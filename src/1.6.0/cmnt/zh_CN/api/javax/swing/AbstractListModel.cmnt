<!-- BEGIN KEY -->
public abstract class javax.swing.AbstractListModel extends java.lang.Object implements javax.swing.ListModel, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
该数据模型的抽象定义提供一个带内容的 <code>List</code>。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.34 05/05/04
@author Hans Muller

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractListModel.addListDataListener(ListDataListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
将某个侦听器添加到每次更改数据模型都要通知的列表。

@param l 要添加的 <code>ListDataListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractListModel.removeListDataListener(ListDataListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
将某个侦听器从每次更改数据模型都要通知的列表中移除。

@param l 要移除的 <code>ListDataListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.ListDataListener[] javax.swing.AbstractListModel.getListDataListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回已在此 <code>AbstractListModel</code> 上注册的所有列表数据侦听器组成的数组。

@return 此模型的所有 <code>ListDataListener</code>，如果当前没有已注册的列表数据侦听器，则返回一个空数组。
 
@see #addListDataListener
@see #removeListDataListener
 
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.AbstractListModel.fireContentsChanged(Object source, int index0, int index1)
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>AbstractListModel</code> 子类必须在列表的一个或多个元素发生更改<b>之后</b>调用此方法。更改的元素由 index0 和 index1 封闭的区间（包括端点）指定。注意，index0 不必小于或等于 index1。
 
@param source 更改的 <code>ListModel</code>，通常为 &quot;this&quot;
@param index0 新区间的一端
@param index1 新区间的另一端
@see EventListenerList
@see DefaultListModel

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.AbstractListModel.fireIntervalAdded(Object source, int index0, int index1)
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>AbstractListModel</code> 子类必须在将一个或多个元素添加到模型中<b>之后</b>调用此方法。新元素由 index0 和 index1 封闭的区间（包括端点）指定。注意，index0 不必小于或等于 index1。
 
@param source 更改的 <code>ListModel</code>，通常为 &quot;this&quot;
@param index0 新区间的一端
@param index1 新区间的另一端
@see EventListenerList
@see DefaultListModel

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.AbstractListModel.fireIntervalRemoved(Object source, int index0, int index1)
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>AbstractListModel</code> 子类必须在从模型中移除一个或多个元素<b>之后</b>调用此方法。<code>index0</code> 和 <code>index1</code> 是已移除区间的端点。注意，<code>index0</code> 不必小于或等于 <code>index1</code>。
 
@param source 更改的 <code>ListModel</code>，通常为 &quot;this&quot;
@param index0 移除区间的一端，包括 <code>index0</code>
@param index1 移除区间的另一端，包括 <code>index1</code>
@see EventListenerList
@see DefaultListModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] javax.swing.AbstractListModel.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回目前已在此模型上注册为 <code><em>Foo</em>Listener</code> 的所有对象组成的数组。<code><em>Foo</em>Listener</code> 是用 <code>add<em>Foo</em>Listener</code> 方法注册的。
 <p>
可以使用 class 字面值来指定 <code>listenerType</code> 参数，如 <code><em>Foo</em>Listener.class</code>。例如，可以使用以下代码查询列表模型 <code>m</code>，以获得其列表数据侦听器：

 <pre>ListDataListener[] ldls = (ListDataListener[])(m.getListeners(ListDataListener.class));</pre>

如果不存在这样的侦听器，则此方法将返回一个空数组。

@param listenerType 请求的侦听器类型；此参数应该指定一个从 <code>java.util.EventListener</code> 遗传下来的接口
@return 在此模型上注册为 <code><em>Foo</em>Listener</code> 的所有对象组成的数组
@exception ClassCastException 如果 <code>listenerType</code> 未指定实现 <code>java.util.EventListener</code> 的类或接口。

@see #getListDataListeners
@since 1.3

<!-- END DATA -->
