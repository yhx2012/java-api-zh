<!-- BEGIN KEY -->
public abstract static class javax.swing.JFormattedTextField.AbstractFormatter extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code> JFormattedTextField</code> 所使用的 <code>AbstractFormatter</code> 实例，用于处理从 Object 到 String 和从 String 到 Object 的转换。<code>AbstractFormatter</code> 还可强制执行编辑策略，或者指导策略的执行，或者以任何适合于强制执行所需策略的方式操作 <code>JFormattedTextField</code>。
 <p>
<code>AbstractFormatter</code> 一次只能在一个 <code>JFormattedTextField</code> 中处于激活状态。<code>JFormattedTextField</code> 准备好使用 <code>install</code> 时即调用它，完成后调用 <code>uninstall</code>。希望安装其他状态的子类应该重写 <code>install</code> 并适当地通知超类。
 <p>
子类必须重写转换方法 <code>stringToValue</code> 和 <code>valueToString</code>。或者，子类可以重写 <code>getActions</code>、<code>getNavigationFilter</code> 和 <code>getDocumentFilter</code>，以便以特定的方式限制 <code>JFormattedTextField</code>。 
 <p>
允许 <code>JFormattedTextField</code> 处于临时无效状态的子类应该在恰当的时间调用 <code>setEditValid</code>。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFormattedTextField.AbstractFormatter.install(JFormattedTextField ftf)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>AbstractFormatter</code> 安装到特定的 <code>JFormattedTextField</code>。这会调用 <code>valueToString</code> 将 <code>JFormattedTextField</code> 的当前值转换为 String。然后将从 <code>getActions</code> 返回的 <code>Action</code>、从 <code>getDocumentFilter</code> 返回的 <code>DocumentFilter</code> 和从 <code>getNavigationFilter</code> 返回的 <code>NavigationFilter</code> 安装到 <code>JFormattedTextField</code>。
 <p>
如果子类希望在该 <code>JFormattedTextField</code> 上安装其他侦听器，通常只需重写此方法即可。
 <p>
如果将当前值转换为 String 的过程中出现 <code>ParseException</code>，则会将文本设置为空 String，并标记 <code>JFormattedTextField</code> 为处于无效状态。
 <p>
不过这是一个公共方法，通常它只对 <code>JFormattedTextField</code> 的子类有用。当值更改，或者 <code>JFormattedTextField</code> 的内部状态更改时，JFormattedTextField 才在适当的时间调用此方法。如果要创建 <code>JFormattedTextField</code> 的子类并且在不同于 <code>JFormattedTextField</code> 操作的时间安装/卸载 <code>AbstractFormatter</code>，则只需自己调用此方法。

@param ftf 用于格式化的 JFormattedTextField，可以为 null，指示从当前 JFormattedTextField 进行卸载。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFormattedTextField.AbstractFormatter.uninstall()
<!-- END KEY -->
<!-- BEGIN DATA -->
卸载 <code>AbstractFormatter</code> 可能已在 <code>JFormattedTextField</code> 上安装的所有状态。这会重置在 <code>JFormattedTextField</code> 上安装的 <code>DocumentFilter</code>、<code>NavigationFilter</code> 和其他 <code>Action</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.Object javax.swing.JFormattedTextField.AbstractFormatter.stringToValue(String text) throws java.text.ParseException
<!-- END KEY -->
<!-- BEGIN DATA -->
分析 <code>text</code>，返回任意 Object。某些 formatter 可能返回 null。

@throws ParseException 如果转换过程中出现错误
@param text 要转换的 String 
@return 文本的 Object 表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String javax.swing.JFormattedTextField.AbstractFormatter.valueToString(Object value) throws java.text.ParseException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回为 <code>value</code> 显示的 string 值。

@throws ParseException 如果转换过程中出现错误
@param value 要转换的 Value 
@return 值的 String 表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JFormattedTextField javax.swing.JFormattedTextField.AbstractFormatter.getFormattedTextField()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>AbstractFormatter</code> 所安装到的当前 <code>JFormattedTextField</code>。

@return 用于格式化的 JFormattedTextField。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JFormattedTextField.AbstractFormatter.invalidEdit()
<!-- END KEY -->
<!-- BEGIN DATA -->
用户键入无效字符时调用此方法。这会将调用转发到当前的 JFormattedTextField。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JFormattedTextField.AbstractFormatter.setEditValid(boolean valid)
<!-- END KEY -->
<!-- BEGIN DATA -->
调用此方法以更新 <code>JFormattedTextField</code> 的 <code>editValid</code> 属性。如果强制实施某个策略而使 <code>JFormattedTextField</code> 始终处于有效状态，则不再需要调用此方法。

@param valid JFormattedTextField 的有效状态

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.Action[] javax.swing.JFormattedTextField.AbstractFormatter.getActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果想提供自定义的 <code>Action</code> 集合，则应进行子类化和重写。<code>install</code> 将在 <code>JFormattedTextField</code> 的 <code>ActionMap</code> 上安装这些 Action。

@return 要在 JFormattedTextField 上安装的 Action 数组

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.DocumentFilter javax.swing.JFormattedTextField.AbstractFormatter.getDocumentFilter()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果想要提供某个 <code>DocumentFilter</code> 以限制输入内容，则应进行子类化和重写。<code>install</code> 会将返回值安装到 <code>JFormattedTextField</code> 上。

@return 限制编辑的 DocumentFilter

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.NavigationFilter javax.swing.JFormattedTextField.AbstractFormatter.getNavigationFilter()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果想要提供过滤器以限制用户可导航的位置，则应进行子类化和重写。<code>install</code> 会将返回值安装到 <code>JFormattedTextField</code> 上。

@return 限制导航的 NavigationFilter

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object javax.swing.JFormattedTextField.AbstractFormatter.clone() throws java.lang.CloneNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
复制 <code>AbstractFormatter</code>。返回的实例与 <code>JFormattedTextField</code> 无关联。

@return AbstractFormatter 的副本

<!-- END DATA -->
