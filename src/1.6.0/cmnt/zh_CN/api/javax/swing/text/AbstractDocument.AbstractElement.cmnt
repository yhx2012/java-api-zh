<!-- BEGIN KEY -->
public abstract class javax.swing.text.AbstractDocument.AbstractElement extends java.lang.Object implements javax.swing.text.Element, javax.swing.text.MutableAttributeSet, java.io.Serializable, javax.swing.tree.TreeNode
<!-- END KEY -->
<!-- BEGIN DATA -->
实现元素的抽象部分。默认情况下，通过提供表示该元素当前属性集合的不可变部分的字段，元素支持这些属性。该元素本身可以实现 MutableAttributeSet，后者可以通过获取新的不可变集合来修改该集合。这些不可变集合是由与此文档相关的 AttributeContext 提供的。
 <p>
<strong>警告：</strong>此类的序列化对象将与以后的 Swing 版本不兼容。当前的序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AbstractDocument.AbstractElement(Element parent, AttributeSet a)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的 AbstractElement。

@param parent 父元素
@param a 该元素的属性
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AbstractDocument.AbstractElement.dump(PrintStream psOut, int indentAmount)
<!-- END KEY -->
<!-- BEGIN DATA -->
转储该元素层次结构的调试表示形式。

@param psOut 输出流
@param indentAmount 缩进级别 &gt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AbstractDocument.AbstractElement.getAttributeCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取所定义的属性数量。

@return 属性数量 &gt;= 0
@see AttributeSet#getAttributeCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.AbstractDocument.AbstractElement.isDefined(Object attrName)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查是否定义了给定的属性。

@param attrName 非 null 属性的名称
@return 如果定义了属性，则返回 true
@see AttributeSet#isDefined

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.AbstractDocument.AbstractElement.isEqual(AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查两个属性集合是否相等。

@param attr 要检查的属性集合
@return 如果相同，则返回 true
@see AttributeSet#isEqual

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.AbstractDocument.AbstractElement.copyAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
复制属性集合。

@return 副本
@see AttributeSet#copyAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.text.AbstractDocument.AbstractElement.getAttribute(Object attrName)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取属性值。

@param attrName 非 null 属性名称
@return 属性值
@see AttributeSet#getAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<?> javax.swing.text.AbstractDocument.AbstractElement.getAttributeNames()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取所有属性的名称。

@return 枚举形式的属性名称
@see AttributeSet#getAttributeNames

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.AbstractDocument.AbstractElement.containsAttribute(Object name, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查是否定义了给定的属性名称/值。

@param name 非 null 属性名称
@param value 属性值
@return 如果定义了名称/值，则返回 true
@see AttributeSet#containsAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.AbstractDocument.AbstractElement.containsAttributes(AttributeSet attrs)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查该元素是否包含所有的属性。

@param attr 要检查的属性
@return 如果该元素包含所有的属性，则返回 true
@see AttributeSet#containsAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.AbstractDocument.AbstractElement.getResolveParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取要解析的父级。如果未重写，则要解析的父级默认为父元素。

@return 父级中的属性，如果不存在，则返回 <code>null</code>
@see AttributeSet#getResolveParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AbstractDocument.AbstractElement.addAttribute(Object name, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
向该元素添加一个属性。

@param name 非 null 属性名称
@param value 属性值
@see MutableAttributeSet#addAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AbstractDocument.AbstractElement.addAttributes(AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
向该元素添加一个属性集合。

@param attr 要添加的属性
@see MutableAttributeSet#addAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AbstractDocument.AbstractElement.removeAttribute(Object name)
<!-- END KEY -->
<!-- BEGIN DATA -->
从该集合中移除一个属性。

@param name 非 null 属性名称
@see MutableAttributeSet#removeAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AbstractDocument.AbstractElement.removeAttributes(java.util.Enumeration<?> names)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除该元素的属性集合。

@param names 属性名称
@see MutableAttributeSet#removeAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AbstractDocument.AbstractElement.removeAttributes(AttributeSet attrs)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除该元素的属性集合。

@param attr 属性
@see MutableAttributeSet#removeAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AbstractDocument.AbstractElement.setResolveParent(AttributeSet parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置要解析的父级。

@param parent 父级，如果不存在，则返回 null
@see MutableAttributeSet#setResolveParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Document javax.swing.text.AbstractDocument.AbstractElement.getDocument()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得基础模型。

@return 模型

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element javax.swing.text.AbstractDocument.AbstractElement.getParentElement()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取该元素的父级。

@return 父级

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.AbstractDocument.AbstractElement.getAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取该元素的属性。

@return 属性集合

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.AbstractDocument.AbstractElement.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取该元素的名称。

@return 名称，如果不存在，则返回 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.text.AbstractDocument.AbstractElement.getStartOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取该元素在此模型中的起始偏移量。

@return 偏移量 &gt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.text.AbstractDocument.AbstractElement.getEndOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取该元素在此模型中的终止偏移量。

@return 偏移量 &gt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.text.Element javax.swing.text.AbstractDocument.AbstractElement.getElement(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取子元素。

@param index 子索引，其值 &gt;= 0 &amp;&amp; &lt; getElementCount()
@return 子元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.text.AbstractDocument.AbstractElement.getElementCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取该元素子级的数量。

@return 子级的数量 &gt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.text.AbstractDocument.AbstractElement.getElementIndex(int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取最接近给定模型偏移量的子元素索引。

@param offset 偏移量 &gt;= 0
@return 元素索引 &gt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.swing.text.AbstractDocument.AbstractElement.isLeaf()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查该元素是否为叶元素。

@return 如果是叶元素，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreeNode javax.swing.text.AbstractDocument.AbstractElement.getChildAt(int childIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
在索引 <code>childIndex</code> 处返回子级 <code>TreeNode</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AbstractDocument.AbstractElement.getChildCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回接受方所包含的子级 <code>TreeNode</code> 的数量。
@return 接受方所包含的子级 <code>TreeNodews</code> 的数量

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreeNode javax.swing.text.AbstractDocument.AbstractElement.getParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回接收方的父级 <code>TreeNode</code>。
@return 接收方的父级 <code>TreeNode</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AbstractDocument.AbstractElement.getIndex(TreeNode node)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回接收方子级中 <code>node</code> 的索引。如果接收方中不包含 <code>node</code>，将返回 -1。
@param node 感兴趣的位置
@return 接收方的子级中 <code>node</code> 的索引，如果不存在，则返回 -1

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.swing.text.AbstractDocument.AbstractElement.getAllowsChildren()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果接收方允许有子级，则返回 true。
@return 如果接收方允许有子级，则返回 true，否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Enumeration javax.swing.text.AbstractDocument.AbstractElement.children()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>Enumeration</code> 形式返回接收方的子级。
@return 接收方的 <code>Enumeration</code> 形式的子级

<!-- END DATA -->
