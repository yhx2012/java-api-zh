<!-- BEGIN KEY -->
public class javax.swing.text.Utilities extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
处理各种文本相关活动的方法集合。
 
@author  Timothy Prinzing
@version 1.47 04/15/04

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.drawTabbedText(Segment s, int x, int y, Graphics g, TabExpander e, int startOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的制表符扩展方式来扩展给定文本所包含的任何制表符，从而绘制给定的文本。此特别实现在一个使用 int 和假定为 72dpi 的 1.1 样式的坐标系统中进行呈现。
 
@param s 文本源
@param x X 起始处，该值 &gt;= 0
@param y Y 起始处，该值 &gt;= 0
@param g 图形上下文
@param e 扩展制表符的方式如果此值为 null，则制表符将被扩展成为一个空白字符。
@param startOffset 文档中文本的起始偏移量，该值 &gt;= 0
@return 处于呈现的文本结尾的 X 位置

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getTabbedTextWidth(Segment s, FontMetrics metrics, int x, TabExpander e, int startOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定给定的考虑制表符的文本段的宽度。在一个使用 int 和假定为 72dpi 的 1.1 样式的坐标系统中实现此方法。

@param s 文本源
@param metrics 用于计算的字体规格
@param x X 起始处，该值 &gt;= 0
@param e 扩展制表符的方式。如果此值为 null，则制表符将被扩展成为一个空白字符。
@param startOffset 文档中文本的起始偏移量，该值 &gt;= 0
@return 文本的宽度

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getTabbedTextOffset(Segment s, FontMetrics metrics, int x0, int x, TabExpander e, int startOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定给定文本中的某个相对偏移量，使其能最好的表示视图坐标系统中的给定跨距。在一个使用 int 和假定为 72dpi 的 1.1 样式的坐标系统中实现此方法。

@param s 文本源
@param metrics 用于计算的字体规格
@param x0 代表给定文本开始处起始视图的位置，该值 &gt;= 0。
@param x 要转换为文本中偏移量的目标视图位置，该值 &gt;= 0。
@param e 扩展制表符的方式。如果此值为 null，则制表符将被扩展成为一个空白字符。
@param startOffset 文档中文本的起始偏移量，该值 &gt;= 0
@return 文本中的偏移量，该值 &gt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getBreakLocation(Segment s, FontMetrics metrics, int x0, int x, TabExpander e, int startOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定对给定文本进行拆分的位置，以符合给定的跨距。此方法试图找到一个字边界。
@param s 文本源
@param metrics 用于计算的字体规格
@param x0 表示给定文本开始处的起始视图位置。
@param x  要转换为文本中偏移量的目标视图位置。
@param e 扩展制表符的方式。如果此值为 null，则制表符将被扩展成为一个空白字符。
@param startOffset 文本文档中的起始偏移量
@return 给定文本中的偏移量

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getRowStart(JTextComponent c, int offs) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
确定包含指定模型位置的行的起始行模型位置。该给定组件必须具有一个用来计算结果的大小。如果组件不具有大小，则将返回值 -1。

@param c 编辑器
@param offs 文档中的偏移量，该值 &gt;= 0
@return 如果请求能被计算，则返回 &gt;= 0 的位置；否则将返回值 -1。
@exception BadLocationException 如果偏移量超出范围

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getRowEnd(JTextComponent c, int offs) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
确定包含指定模型位置的行的结束行模型位置。该给定组件必须具有一个用来计算结果的大小。如果组件不具有大小，则将返回值 -1。

@param c 编辑器
@param offs 文档中的偏移量，该值 &gt;= 0
@return 如果请求能被计算，则返回 &gt;= 0 的位置；否则将返回值 -1。
@exception BadLocationException 如果偏移量超出范围

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getPositionAbove(JTextComponent c, int offs, int x) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
确定模型中离行上方给定的视图位置最近的位置。该给定组件必须具有一个用来计算结果的大小。如果组件不具有大小，则将返回值 -1。

@param c 编辑器
@param offs 文档中的偏移量，该值 &gt;= 0
@param x X 坐标，该值 &gt;= 0
@return 如果请求能被计算，则返回 &gt;= 0 的位置；否则将返回值 -1。
@exception BadLocationException 如果偏移量超出范围

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getPositionBelow(JTextComponent c, int offs, int x) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
确定模型中离行下方给定的视图位置最近的位置。该给定组件必须具有一个用来计算结果的大小。如果组件不具有大小，则将返回值 -1。

@param c 编辑器
@param offs 文档中的偏移量，该值 &gt;= 0
@param x X 坐标，该值 &gt;= 0
@return 如果请求能被计算，则返回 &gt;= 0 的位置；否则将返回值 -1。
@exception BadLocationException 如果偏移量超出范围

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getWordStart(JTextComponent c, int offs) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
确定针对给定模型位置的单词开头。使用 BreakIterator.getWordInstance() 来实际获得单词。
 
@param c 编辑器
@param offs 文档中的偏移量，该值 &gt;= 0
@return 单词开头的模型中的位置，该值 &gt;= 0
@exception BadLocationException 如果偏移量超出范围

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getWordEnd(JTextComponent c, int offs) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
确定针对给定位置的单词结尾。使用 BreakIterator.getWordInstance() 来实际获得单词。
 
@param c 编辑器
@param offs 文档中的偏移量，该值 &gt;= 0
@return 单词尾部的模型中的位置，该值 &gt;= 0
@exception BadLocationException 如果偏移量超出范围

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getNextWord(JTextComponent c, int offs) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
确定针对给定位置的下一个单词开头。使用 BreakIterator.getWordInstance() 来实际获得单词。
 
@param c 编辑器
@param offs 文档中的偏移量，该值 &gt;= 0
@return 单词开头的模型中的位置，该值 &gt;= 0
@exception BadLocationException 如果偏移量超出范围

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getPreviousWord(JTextComponent c, int offs) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
确定针对给定位置的上一个单词开头。使用 BreakIterator.getWordInstance() 来实际获得单词。
 
@param c 编辑器
@param offs 文档中的偏移量，该值 &gt;= 0
@return 单词开头的模型中的位置，该值 &gt;= 0
@exception BadLocationException 如果偏移量超出范围

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.swing.text.Element javax.swing.text.Utilities.getParagraphElement(JTextComponent c, int offs)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定某个段落/行要使用的元素。

@param c 编辑器
@param offs 文档中的起始偏移量，该值 &gt;= 0
@return 元素

<!-- END DATA -->
