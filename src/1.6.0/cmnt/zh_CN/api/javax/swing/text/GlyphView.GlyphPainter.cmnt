<!-- BEGIN KEY -->
public abstract static class javax.swing.text.GlyphView.GlyphPainter extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
执行字形呈现的类。此类可实现为无状态的，或将某些信息存储为缓存，以便更快地呈现和模型/视图转换。至少，GlyphPainter 允许 View 实现独立于特定的 JVM 版本和功能选择（即向国际化并轨）来执行其职责。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float javax.swing.text.GlyphView.GlyphPainter.getSpan(GlyphView v, int p0, int p1, TabExpander e, float x)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定给定开始位置（相对于选项卡扩展而言）的字形区域。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.text.GlyphView.GlyphPainter.paint(GlyphView v, Graphics g, Shape a, int p0, int p1)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制表示给定范围的字形。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Shape javax.swing.text.GlyphView.GlyphPainter.modelToView(GlyphView v, int pos, Position.Bias bias, Shape a) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
提供从文档模型坐标空间到所映射的视图坐标空间的映射。这由拆分后的视图共享。

@param v     包含目标坐标空间的 <code>GlyphView</code>
@param pos   要转换的位置
@param bias  可以是 <code>Position.Bias.Forward</code>，也可以是 <code>Position.Bias.Backward</code>
@param a     视图的边界
@return      给定位置的边界框
@exception BadLocationException  如果给定位置不表示相关文档中的有效位置
@see View#modelToView

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.text.GlyphView.GlyphPainter.viewToModel(GlyphView v, float x, float y, Shape a, javax.swing.text.Position.Bias[] biasReturn)
<!-- END KEY -->
<!-- BEGIN DATA -->
提供从视图坐标空间到模型逻辑坐标空间的映射。

@param v          要为其提供映射的 <code>GlyphView</code>
@param x          X 坐标
@param y          Y 坐标
@param a          要呈现的分配区域
@param biasReturn 将 <code>Position.Bias.Forward</code> 或 <code>Position.Bias.Backward</code> 返回，作为此数组中的第零个元素
@return 模型中最能代表视图中给定点的位置
@see View#viewToModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.text.GlyphView.GlyphPainter.getBoundedPosition(GlyphView v, int p0, float x, float len)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定表示符合给定区域的最大 advance 的模型位置。此方法可用于拆分给定的视图。结果应为一个不完全占用给定 advance 的位置。这与 viewToModel 不同，后者将返回充分利用最大 advance 的位置。

@param v 查找在其处拆分的模型位置的视图。
@param p0 模型中片段应开始其表示形式的位置，该值 &gt;= 0。
@param x  沿已拆分视图可能占用的轴的图形位置，该值 &gt;= 0。这可能对选项卡计算之类的情况有用。
@param len 向需要潜在拆分的视图指定的距离，该值 &gt;= 0.
@return 能用于拆分的最大模型位置。
@see View#breakView

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.GlyphView.GlyphPainter javax.swing.text.GlyphView.GlyphPainter.getPainter(GlyphView v, int p0, int p1)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建用于给定 GlyphView 的 painter。如果该 painter 状态正常，则它可以创建另一个 painter 以表示正在创建的新 GlyphView。如果该 painter 未处于有效状态，则可能返回其自身。默认行为是返回其自身。
@param v  要为其提供 painter 的 <code>GlyphView</code>
@param p0 初始文档偏移量，该值 &gt;= 0
@param p1 结束文档偏移量，该值 &gt;= p0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.GlyphView.GlyphPainter.getNextVisualPositionFrom(GlyphView v, int pos, Position.Bias b, Shape a, int direction, javax.swing.text.Position.Bias[] biasRet) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
提供确定下一个以可视化形式表示的模型位置的方法，用户可以在此位置放置一个插入符。有些视图可能不可见，它们可能与该模型中发现的顺序不同，或它们可能只是不允许访问该模型中的某些位置。

@param v 要使用的视图
@param pos 要转换的位置，该值 &gt;= 0
@param b   可以是 <code>Position.Bias.Forward</code>，也可以是 <code>Position.Bias.Backward</code>
@param a 要呈现的分配区域
@param direction 相对当前位置的方向，通常可视为键盘上找到的箭头键。此可以是 SwingConstants.WEST、SwingConstants.EAST、SwingConstants.NORTH 或 SwingConstants.SOUTH。
@param biasRet  将 <code>Position.Bias.Forward</code> 或 <code>Position.Bias.Backward</code> 作为此数组中的第零个元素返回
@return 模型中最能表示下一个可视位置的位置。
@exception BadLocationException
@exception IllegalArgumentException 如果方向无效

<!-- END DATA -->
