<!-- BEGIN KEY -->
public interface javax.swing.text.StyledDocument extends javax.swing.text.Document
<!-- END KEY -->
<!-- BEGIN DATA -->
用作通用样式化文档的接口。

@author  Timothy Prinzing
@version 1.21 12/19/03

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Style javax.swing.text.StyledDocument.addStyle(String nm, Style parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
向逻辑样式层次中添加新样式。样式属性自下向上进行解析，所以在子级中指定的属性将重写父级中指定的属性。

@param nm  样式的名称（在命名样式集合中必须是惟一的）。如果样式未命名，则此名称可能为 null，但是调用者要负责管理返回的引用，因为未命名的样式不能通过其名称获取。未命名的样式可以用于诸如字符属性重写这样的情况（例如在样式运行中）。
@param parent 父样式。如果未指定的属性不需要以其他样式解析，则此值可以为 null。
@return 样式

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyledDocument.removeStyle(String nm)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除以前添加到文档中的指定样式。

@param nm  要移除的样式的名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Style javax.swing.text.StyledDocument.getStyle(String nm)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取以前添加的指定样式。

@param nm 样式名称
@return 样式

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyledDocument.setCharacterAttributes(int offset, int length, AttributeSet s, boolean replace)
<!-- END KEY -->
<!-- BEGIN DATA -->
更改内容元素属性，该属性是用来给定文档中现有内容范围的。给定 Attributes 参数中定义的所有属性都适用于此给定的范围。此方法可用来完全移除给定范围的所有内容层次的属性，这是通过提供尚未定义属性的 AttributeSet 参数和将 replace 参数设置为 true 实现的。

@param offset 开始更改处，该值 &gt;= 0
@param length 更改的长度，该值 &gt;= 0
@param s 要更改为的非 null 属性。任何定义的属性都将适用于此给定范围的文本。
@param replace 表示在设置新属性时是否清除以前的属性。如果为 true，此操作将完全替换以前的属性。如果为 false，新属性将与以前的属性合并。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyledDocument.setParagraphAttributes(int offset, int length, AttributeSet s, boolean replace)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置段落属性。

@param offset 开始更改处，该值 &gt;= 0
@param length 更改的长度，该值 &gt;= 0
@param s 要更改为的非 null 属性。任何定义的属性都将适用于此给定范围的文本。
@param replace 表示在设置新属性时是否清除以前的属性。如果为 true，此操作将完全替换以前的属性。如果为 false，新属性将与以前的属性合并。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyledDocument.setLogicalStyle(int pos, Style s)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置给定位置的段落所用的逻辑样式。如果没有为字符和段落属性显式设置属性，则它们将通过分配到段落的逻辑样式进行解析，也就是通过某个层次结构来解析，这些层次结构完全独立于文档中元素的层次结构。

@param pos 开始位置，该值 &gt;= 0
@param s 要设置的样式

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Style javax.swing.text.StyledDocument.getLogicalStyle(int p)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取段落中给定位置的逻辑样式。

@param p 位置，该值 &gt;= 0
@return 样式

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element javax.swing.text.StyledDocument.getParagraphElement(int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取表示包含文档中给定偏移量的段落的元素。

@param pos 偏移量，该值 &gt;= 0
@return 元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element javax.swing.text.StyledDocument.getCharacterElement(int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取表示文档中给定偏移量处字符的元素。

@param pos 偏移量，该值 &gt;= 0
@return 元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.text.StyledDocument.getForeground(AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用一个属性集并将其转换成为一个前景色规范。此方法可以用于指定诸如更亮、更鲜艳等之类的内容。

@param attr 属性集
@return 颜色

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.text.StyledDocument.getBackground(AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用一个属性集并将其转换为一个背景色规范。此方法可以用于指定诸如更亮、更鲜艳等之类的内容。

@param attr 属性集
@return 颜色

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font javax.swing.text.StyledDocument.getFont(AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用一个属性集并将其转换为字体规范。此操作可用于将诸如系列、样式、大小等一类的东西转换为当前文档所用的系统中可用的字体。

@param attr 属性集
@return 字体

<!-- END DATA -->
