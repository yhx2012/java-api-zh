<!-- BEGIN KEY -->
public class javax.swing.text.html.MinimalHTMLWriter extends javax.swing.text.AbstractWriter
<!-- END KEY -->
<!-- BEGIN DATA -->
MinimalHTMLWriter 是一个回退 writer，HTMLEditorKit 使用它为非 EditorKit 生成的文档写出 HTML。

文档的格式为：
 <pre>
 &lt;html&gt;
   &lt;head&gt;
     &lt;style&gt;
        &lt;!-- list of named styles
         p.normal {
            font-family: SansSerif;
	      margin-height: 0;
	      font-size: 14
	   }
        --&gt;
      &lt;/style&gt;
   &lt;/head&gt;
   &lt;body&gt;
    &lt;p style=normal&gt;
        <b>Bold, italic, and underline attributes
        of the run are emitted as HTML tags.
        The remaining attributes are emitted as
        part of the style attribute of a &lt;span&gt; tag.
        The syntax is similar to inline styles.</b>
&lt;/p&gt;
   &lt;/body&gt;
 &lt;/html&gt;
 </pre>

@author Sunita Mani
@version 1.14, 12/19/03

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.MinimalHTMLWriter(Writer w, StyledDocument doc)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 MinimalHTMLWriter。

@param w  Writer
@param doc StyledDocument

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.MinimalHTMLWriter(Writer w, StyledDocument doc, int pos, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 MinimalHTMLWriter。

@param w  Writer
@param doc StyledDocument
@param pos 文档中要获取内容的位置。
@param len 写出量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.MinimalHTMLWriter.write() throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 StyledDocument 生成 HTML 输出。

@exception IOException 如果发生任何 I/O 错误
@exception BadLocationException 如果 pos 表示文档中的一个无效位置

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.MinimalHTMLWriter.writeAttributes(AttributeSet attr) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写出以下类型的所有属性：StyleConstants.ParagraphConstants、StyleConstants.CharacterConstants、StyleConstants.FontConstants、StyleConstants.ColorConstants。属性名称和值用冒号隔开。每个名称值对都用分号隔开。

@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.MinimalHTMLWriter.text(Element elem) throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
写出文本。

@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.MinimalHTMLWriter.writeStartTag(String tag) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写出适当缩进的开始标记。还可以增加缩进量。

@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.MinimalHTMLWriter.writeEndTag(String endTag) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写出适当缩进的结束标记。还可以减少缩进量。

@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.MinimalHTMLWriter.writeHeader() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写出 &lt;head&gt; 和 &lt;style&gt; 标记，然后调用 writeStyles()，以写出所有命名的样式，这些样式作为 &lt;style&gt; 标记的内容。内容周围带有有效的 HTML 注释标记，以确保文档在不支持标记的应用程序/浏览器中能够被看到。

@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.MinimalHTMLWriter.writeStyles() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写出所有命名的样式，这些样式作为 &lt;style&gt; 标记的内容。

@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.MinimalHTMLWriter.writeBody() throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
对文档中的元素进行迭代，并基于元素是分支元素还是叶元素来处理它们。此方法对作为文本的叶元素进行特殊处理。

@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.MinimalHTMLWriter.writeEndParagraph() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
发出 &lt;p&gt; 标记的结束标记。写出标记之前，此方法确保正确关闭所有已打开的其他标记。

@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.MinimalHTMLWriter.writeStartParagraph(Element elem) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
发出段落的开始标记。如果段落具有与此方法关联的指定样式，则此方法还生成 &lt;p&gt; 标记的类属性，并将其值设置为样式的名称。

@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.MinimalHTMLWriter.writeLeaf(Element elem) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
负责写出其他非文本叶元素。

@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.MinimalHTMLWriter.writeImage(Element elem) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
负责处理 Icon Elements；有意不实现它。如何实现此方法是一个策略问题。例如，如果您正在生成 &lt;img&gt; 标记，那么您应该如何表示 src 属性呢（图像的位置）？某些情况下它将是 URL，而其他情况下则可能是从流中读取。

@param elem StyleConstants.IconElementName 类型元素

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.MinimalHTMLWriter.writeComponent(Element elem) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
负责处理 Component Elements；有意不实现它。如何实现此方法是一个策略问题。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.html.MinimalHTMLWriter.isText(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果元素是文本元素，则返回 true。


<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.MinimalHTMLWriter.writeContent(Element elem, boolean needsIndenting) throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
以与 HTML 兼容的方式写出属性集。

@exception IOException 如果发生任何 I/O 错误
@exception BadLocationException 如果 pos 表示文档中的一个无效位置

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.MinimalHTMLWriter.writeHTMLTags(AttributeSet attr) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
基于文本的属性设置生成文本的 bold &lt;b&gt;、italic &lt;i&gt; 和 &lt;u&gt; 标记。

@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.MinimalHTMLWriter.writeNonHTMLAttributes(AttributeSet attr) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
以与 HTML 兼容的方式写出其余的字符级属性（bold、italic 和 underline 之外的属性）。因为字体系列和字体大小这样的属性没有到 HTML 标记的直接映射，因此生成一个 &lt;span&gt; 标记并将其样式属性设置为包含其余属性（如内嵌样式）的列表。

@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.html.MinimalHTMLWriter.inFontTag()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果我们当前正处在 &lt;font&gt; 标记中，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.MinimalHTMLWriter.endFontTag() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法已不再使用，而用写出 &lt;span&gt; 来替换。
 <p>
写出 &lt;font&gt; 标记的结束标记。

@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.MinimalHTMLWriter.startFontTag(String style) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法已不再使用，而用写出 &lt;span&gt; 来替换。
 <p>
写出 &lt;font&gt; 标记的开始标记。因为字体标记不能嵌套，所以在此方法写出新的开始标记之前将关闭任何打开的字体标记。

@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
