<!-- BEGIN KEY -->
public class javax.swing.text.FieldView extends javax.swing.text.PlainView
<!-- END KEY -->
<!-- BEGIN DATA -->
扩展多行纯文本视图，使其适合单行编辑器视图。如果为视图分配了额外的空间，则该字段必须调整视图，使之适合该空间。如果承载组件是 JTextField，此视图将管理相关 BoundedRangeModel 的范围并调整水平分配区域以便与 JTextField 的当前可见性设置相匹配。

@author  Timothy Prinzing
@version 1.25 12/19/03
@see     View

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.FieldView(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造包装了元素的新 FieldView。

@param elem 所需元素

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.FontMetrics javax.swing.text.FieldView.getFontMetrics()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与承载此视图组件相关的字体规格。

@return 字体规格

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Shape javax.swing.text.FieldView.adjustAllocation(Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
调整给定视图的分配区域，使其适合文本字段的分配区域。如果在垂直方向上分配该视图的区域超过了首选区域，则会更改该分配区域以便垂直居中。根据相关 JTextField 上的水平对齐属性设置，该视图将在水平方向上进行调整（如果其为承载组件的类型）。

@param a 指定给视图的分配区域，该分配区域可能需要调整大小。
@return 超类应该使用的分配区域。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.FieldView.paint(Graphics g, Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定呈现面和该表面的区域呈现。该视图可能需要进行布置和创建子视图，以使它本身能够在给定的分配区域呈现。

@param g 要使用的呈现表面
@param a 要在其中呈现的分配区域

@see View#paint

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.FieldView.getPreferredSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此视图沿某轴的首选区域。

@param axis 可以是 View.X_AXIS 或 View.Y_AXIS
@return   视图可能要在其中呈现的区域，该值 &gt;= 0。通常会告知该视图在返回的区域中呈现，但不保证一定如此。父级可选择重新调整视图大小或拆分视图。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.FieldView.getResizeWeight(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定视图沿给定轴的大小可调整性。0 或更小的值表示大小不可调整。

@param axis  View.X_AXIS 或 View.Y_AXIS
@return 权重，如果 &gt; 1，表示为 View.X_AXIS，如果为 0，表示 View.Y_AXIS

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Shape javax.swing.text.FieldView.modelToView(int pos, Shape a, Position.Bias b) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
提供从文档模型坐标空间到所映射的视图坐标空间的映射。

@param pos 要转换的位置，其值 &gt;= 0
@param a 分配的要在其中呈现的区域
@return 给定位置的边界框
@exception BadLocationException  如果给定位置在所关联的文档中不是一个有效位置
@see View#modelToView

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.FieldView.viewToModel(float fx, float fy, Shape a, javax.swing.text.Position.Bias[] bias)
<!-- END KEY -->
<!-- BEGIN DATA -->
提供从视图坐标空间到该模型的逻辑坐标空间的映射。

@param fx X 坐标，该值 &gt;= 0.0f
@param fy Y 坐标，该值 &gt;= 0.0f
@param a 要在其中呈现的分配区域
@return 模型中最能代表视图中给定点的位置
@see View#viewToModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.FieldView.insertUpdate(DocumentEvent changes, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知在文档中此视图负责的某个位置已插入内容。

@param changes 来自相关文档的更改信息
@param a 视图的当前分配区域
@param f 用于重建的工厂（如果该视图有子级）
@see View#insertUpdate

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.FieldView.removeUpdate(DocumentEvent changes, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知在文档中此视图负责的某个位置已插入内容。

@param changes 来自相关文档的更改信息
@param a 视图的当前分配区域
@param f 用于重建的工厂（如果该视图有子级）
@see View#removeUpdate

<!-- END DATA -->
