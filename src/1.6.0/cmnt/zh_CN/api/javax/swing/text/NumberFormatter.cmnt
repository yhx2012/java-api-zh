<!-- BEGIN KEY -->
public class javax.swing.text.NumberFormatter extends javax.swing.text.InternationalFormatter
<!-- END KEY -->
<!-- BEGIN DATA -->
添加数字特殊行为的 <code>InternationalFormatter</code> 的子类 <code>NumberFormatter</code>。使用的规范（这些规范只在 <code>NumberFormatter</code> 不显示无效数字时使用，如 <code>setAllowsInvalid(false)</code>）有：
 <ul>
<li>在除指数字段外的任何字段中按下 +/-（- 由与 <code>DecimalFormat</code> 相关的 <code>DecimalFormatSymbols</code> 确定）将试图把数的符号更改为正/负。
<li>在指数字段中按下 +/-（- 由与 <code>DecimalFormat</code> 相关的 <code>DecimalFormatSymbols</code> 确定）将试图把指数符号更改为正/负。
 </ul>
 <p>
如果要显示特定数字，则可能希望打开改写模式 <code>setOverwriteMode(true)</code>。例如：
 <pre>
 DecimalFormat decimalFormat = new DecimalFormat(&quot;0.000E0&quot;);
 NumberFormatter textFormatter = new NumberFormatter(decimalFormat);
 textFormatter.setOverwriteMode(true);
 textFormatter.setAllowsInvalid(false);
 </pre>
 <p>
如果打算允许用户输入小数值，则应强制 DecimalFormat 至少包含一个小数 (<code>#.0###</code>)，或允许该值无效 <code>setAllowsInvalid(true)</code>。否则，用户可能无法输入小数值。
 <p>
<code>NumberFormatter</code> 提供的 <code>stringToValue</code> 行为与其超类的这一行为稍有不同。如果已为 {@link #setValueClass} 值（也就是 <code>Integer</code>、<code>Long</code>、<code>Float</code>、<code>Double</code>、<code>Byte</code> 或 <code>Short</code> 之一）指定了某个类，并且 Format 的 <code>parseObject</code> 返回一个 <code>Number</code> 的实例，则将使用适合于该值类表示的基本类型的构造方法创建一个该值类的对应实例。例如：<code>setValueClass(Integer.class)</code> 将导致结果值通过 <code>new Integer(((Number)formatter.parseObject(string)).intValue())</code> 创建。通常，当希望设置最小/最大值时此方法很有用，因为各种 <code>Number</code> 实现一般不相互比较。如果由于某种原因需要某些值的特定 <code>Number</code> 实现，此方法也非常有用。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.4 03/05/01
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.swing.text.NumberFormatter.specialChars
<!-- END KEY -->
<!-- BEGIN DATA -->
Format 实例中的特殊字符。
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.NumberFormatter()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有默认 <code>NumberFormat</code> 实例的 <code>NumberFormatter</code>，该实例通过 <code>NumberFormat.getNumberInstance()</code> 获得。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.NumberFormatter(NumberFormat format)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定 Format 实例的 NumberFormatter。

@param format  用于指示合法值的 Format

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.NumberFormatter.setFormat(Format format)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置指示可以编辑和显示的合法值的格式。
 <p>
如果已经使用了默认构造方法，则将通过 <code>NumberFormat.getNumberInstance()</code> 方法为当前语言环境确定此属性值。

@param format  用于指示合法值的 NumberFormat 实例

<!-- END DATA -->
