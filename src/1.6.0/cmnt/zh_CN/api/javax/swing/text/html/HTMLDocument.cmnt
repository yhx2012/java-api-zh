<!-- BEGIN KEY -->
public class javax.swing.text.html.HTMLDocument extends javax.swing.text.DefaultStyledDocument
<!-- END KEY -->
<!-- BEGIN DATA -->
对 HTML 进行建模的文档。此模型的目的是支持浏览和编辑。因此，默认情况下 HTML 文档所描述的结构不是精确一致的。默认情况下被建模的元素结构是通过 <code>HTMLDocument.HTMLReader</code> 类构建的，此类实现了解析器所期望的 <code>HTMLEditorKit.ParserCallback</code> 协议。要更改结构，可以创建 <code>HTMLReader</code> 的子类，并且重新实现 {@link #getReader(int)} 方法以返回新的 reader 实现。有关创建默认结构的细节，请参考 <code>HTMLReader</code> 文档。其目的是使文档无丢失（non-lossy）（虽然重新生成 HTML 格式可能导致出现不同的格式）。
 <p>
文档只对 HTML 建模，并且不尝试在其中存储视图属性。元素由 <code>StyleContext.NameAttribute</code> 属性标识，此属性应该始终有一个标识元素种类的 <code>HTML.Tag</code> 类型值。某些元素（例如注释）是合成的。<code>HTMLFactory</code> 使用此属性来确定要构建哪种视图。
 <p>
此文档支持增量加载。<code>TokenThreshold</code> 属性控制在试图更新文档的元素结构之前要缓冲的解析数量。通过 <code>EditorKit</code> 来设置此属性，以便子类可以禁用它。
 <p>
<code>Base</code> 属性根据解析哪些相对 URL 来确定 URL。默认情况下，如果属性值是 URL，则这将是 <code>Document.StreamDescriptionProperty</code>。如果遇到 &lt;BASE&gt; 标记，则基本 URL 将成为该标记所指定的 URL。因为基本 URL 是一个属性，因此毫无疑问可以直接设置它。
 <p>
此文档的默认内容存储机制是一个间隙缓冲区 (<code>GapContent</code>)。通过使用带有 <code>Content</code> 实现的构造方法，可以提供某些替代方法。
 <p>
<strong>警告：</strong>
此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已经在 <code>java.beans</code> 包添加了对所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的支持。请参阅 {@link java.beans.XMLEncoder}。

@author  Timothy Prinzing
@author  Scott Violet
@author  Sunita Mani
@version 1.167 05/05/04

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.html.HTMLDocument.AdditionalComments
<!-- END KEY -->
<!-- BEGIN DATA -->
文档属性键值。键值将是 String 的 Vector，这是正文中没有的注释。

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.net.URL javax.swing.text.html.HTMLDocument.base
<!-- END KEY -->
<!-- BEGIN DATA -->
解析相对 URL 所根据的位置。默认情况下，如果文档是从 URL 加载的，则这将是文档的 URL。如果找到 BASE 标记并可以对其进行解析，则它将充当基本位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean javax.swing.text.html.HTMLDocument.hasBaseTag
<!-- END KEY -->
<!-- BEGIN DATA -->
文档是否有 BASE 标记

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.swing.text.html.HTMLDocument.baseTarget
<!-- END KEY -->
<!-- BEGIN DATA -->
BASE 标记的 TARGET 属性值

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.text.html.HTMLEditorKit.Parser javax.swing.text.html.HTMLDocument.parser
<!-- END KEY -->
<!-- BEGIN DATA -->
当将 html 插入现有文档时所使用的解析器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.HTMLDocument()
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认的缓冲区大小和默认的 <code>StyleSheet</code> 构造 HTML 文档。这是 <code>HTMLDocument(Content, StyleSheet)</code> 构造方法的一个便捷方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.HTMLDocument(StyleSheet styles)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有默认内容存储实现和指定样式/属性存储机制的 HTML 文档。这是 <code>HTMLDocument(Content, StyleSheet)</code> 构造方法的一个便捷方法。

@param styles 样式

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.HTMLDocument(AbstractDocument.Content c, StyleSheet styles)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有给定内容存储实现和给定样式/属性存储机制的 HTML 文档。

@param c 内容的容器
@param styles 样式

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.HTMLEditorKit.ParserCallback javax.swing.text.html.HTMLDocument.getReader(int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取加载带有 HTML 的文档时所用解析器的 reader。实现它的目的是为了返回 <code>HTMLDocument.HTMLReader</code> 的一个实例。如果需要，子类可以重新实现此方法来更改文档获取结构的方式。（例如，处理自定义标记，或者从结构上表示字符样式元素。）

@param pos 起始位置
@return 解析器用于加载文档的 reader

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.HTMLEditorKit.ParserCallback javax.swing.text.html.HTMLDocument.getReader(int pos, int popDepth, int pushDepth, HTML.Tag insertTag)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回加载带有 HTML 的文档时所用解析器的 reader。实现它的目的是为了返回 <code>HTMLDocument.HTMLReader</code> 的一个实例。如果需要，子类可以重新实现此方法来更改文档获取结构的方式。（例如，处理自定义标记，或者从结构上表示字符样式元素。）
<p>这是 <code>getReader(int, int, int, HTML.Tag, TRUE)</code> 的一个便捷方法。

@param popDepth  插入前要生成的 <code>ElementSpec.EndTagTypes</code> 的数量
@param pushDepth  插入前但生成结束标记之后，应该生成的 <code>ElementSpec.StartTagTypes</code> 的数量（它具有 <code>ElementSpec.JoinNextDirection</code> 方向）
@param insertTag 开始插入文档的首个标记
@return 解析器用于加载文档的 reader

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL javax.swing.text.html.HTMLDocument.getBase()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回解析相对 URL 所根据的位置。默认情况下，如果文档是从 URL 加载的，则这将是文档的 URL。如果找到 BASE 标记并可以对其进行解析，则它将充当基本位置。

@return 基本位置

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.setBase(URL u)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置解析相对 URL 所根据的位置。默认情况下，如果文档是从 URL 加载的，则这将是文档的 URL。如果找到 BASE 标记并可以对其进行解析，则它将充当基本位置。
<p>这还将 <code>StyleSheet</code> 的基本 URL 以及文档的基本 URL 设置为 <code>u</code>。

@param u 所需的基本 URL

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLDocument.insert(int offset, javax.swing.text.DefaultStyledDocument.ElementSpec[] data) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
批量插入新元素。这是在文档中创建元素的方式。通过解析确定所需的结构，并创建作为标记（它描述了编辑）集合的规范，同时保留文档的写入锁定打开。然后 reader 以突发的形式调用此方法，以获得短时（也就是正在实际更改文档时）的写入锁定。

@param offset 起始偏移量
@param data 元素数据
@exception BadLocationException 如果给定的位置在关联文档中不是一个有效位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLDocument.insertUpdate(AbstractDocument.DefaultDocumentEvent chng, AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
由于插入文本而导致更新文档的结构。这将在写入锁定中发生。此实现仅解析换行处插入的内容，并构建元素缓冲区的指令集。

@param chng 文档更改的描述
@param attr 属性

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLDocument.create(javax.swing.text.DefaultStyledDocument.ElementSpec[] data)
<!-- END KEY -->
<!-- BEGIN DATA -->
替换具有给定元素规范的文档内容。如果加载是突发进行的，则在插入前调用此方法。如果在一次突发加载中完全加载文档，则这是唯一调用的方法。

@param data 文档的新内容

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.setParagraphAttributes(int offset, int length, AttributeSet s, boolean replace)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置段落属性。
 <p>
虽然大多数 Swing 方法不是线程安全的，但此方法是线程安全的。有关更多信息，请参阅 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How to Use Threads</A>。

@param offset 段落中的偏移量（必须至少为 0）
@param length 受影响的字符数（必须至少为 0）
@param s 属性
@param replace 是替换现有属性，还是合并它们

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.StyleSheet javax.swing.text.html.HTMLDocument.getStyleSheet()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取具有特定于文档的显示规则（CSS）的 <code>StyleSheet</code>，其中这些规则是在 HTML 文档本身中指定的。

@return <code>StyleSheet</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.HTMLDocument.Iterator javax.swing.text.html.HTMLDocument.getIterator(HTML.Tag t)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定 HTML 标记的迭代器。这可以用于在所包含的点集合上进行迭代，或者在输入元素上进行迭代。

@param t 所请求的 <code>HTML.Tag</code>
@return 给定 HTML 标记的 <code>Iterator</code>
@see javax.swing.text.html.HTML.Tag

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.Element javax.swing.text.html.HTMLDocument.createLeafElement(Element parent, AttributeSet a, int p0, int p1)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建直接表示文本的文档叶元素（没有任何子级）。实现它的目的是为了返回 <code>HTMLDocument.RunElement</code> 类型的元素。

@param parent 父元素
@param a 元素属性
@param p0 该范围的开始处（必须至少为 0）
@param p1 该范围的结尾处（必须至少为 p0）
@return 新元素

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.Element javax.swing.text.html.HTMLDocument.createBranchElement(Element parent, AttributeSet a)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建文档分支元素，它可以包含其他元素。实现它的目的是为了返回 <code>HTMLDocument.BlockElement</code> 类型的元素。

@param parent 父元素
@param a 属性
@return 元素

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.AbstractDocument.AbstractElement javax.swing.text.html.HTMLDocument.createDefaultRoot()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建用于表示默认文档结构的根元素。

@return 基本元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.setTokenThreshold(int n)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置在试图更新文档元素结构之前要缓冲的标记数。

@param n 要缓冲的标记数

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.html.HTMLDocument.getTokenThreshold()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取在试图更新文档元素结构之前要缓冲的标记数。默认值为 <code>Integer.MAX_VALUE</code>。

@return 要缓冲的标记数

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.setPreservesUnknownTags(boolean preservesTags)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定解析器如何处理未知标记。如果设置为 true，则将未知标记放入模型中，否则删除它们。

@param preservesTags 如果应该将未知标记保存到模型中，则为 true，否则删除这些标记
@see javax.swing.text.html.HTML.Tag

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.html.HTMLDocument.getPreservesUnknownTags()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在遇到未知标记时所观察到的解析器行为。

@see javax.swing.text.html.HTML.Tag
@return 如果解析时要保留未知标记，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.processHTMLFrameHyperlinkEvent(HTMLFrameHyperlinkEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理 HTML 框架中的文档所生成的 <code>HyperlinkEvents</code>。<code>HyperlinkEvent</code> 类型为 <code>HTMLFrameHyperlinkEvent</code>（正如参数所说明的）。除 <code>HyperlinkEvent</code> 中所包含的典型信息之外，此事件还包含对应于发生单击事件的框架的元素（源元素）和目标名称。目标名称有 4 个可能值：
 <ul>
 <li>  _self
 <li>  _parent
 <li>  _top
<li>  已命名的框架
 </ul>

如果目标是 _self，则该操作将更改 <code>HTML.Attribute.SRC</code> 属性的值，并触发 <code>ChangedUpdate</code> 事件。
<p>
如果目标是 _parent，则它删除父元素（父元素是 &lt;FRAMESET&gt; 元素），插入一个新的 &lt;FRAME&gt; 元素，并将其 <code>HTML.Attribute.SRC</code> 属性设置为一个等于目标 URL 的值，并触发 <code>RemovedUpdate</code> 和 <code>InsertUpdate</code>。
<p>
如果目标是 _top，则此方法不执行任何操作。在框架视图（即 <code>FrameView</code>）的实现中，要对 _top 进行处理。给定该 _top 意味着替换整个文档，在它要替换的文档外部进行这项处理是有意义的。
<p>
如果目标是已命名的框架，则在元素层次结构中搜索名称等于目标的元素，更新其 <code>HTML.Attribute.SRC</code> 属性并触发 <code>ChangedUpdate</code> 事件。

@param e 事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.setParser(HTMLEditorKit.Parser parser)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置将 html 插入现有文档的方法所使用的解析器，例如 <code>setInnerHTML</code> 和 <code>setOuterHTML</code>。
 <p>
<code>HTMLEditorKit.createDefaultDocument</code> 用于设置解析器。如果手动创建 <code>HTMLDocument</code>，则一定要确保相应地设置解析器。
@param parser 用于文本插入的解析器

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.HTMLEditorKit.Parser javax.swing.text.html.HTMLDocument.getParser()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回将 HTML 插入现有文档时所使用的解析器。
@return 用于文本插入的解析器

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.setInnerHTML(Element elem, String htmlText) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

用指定为 HTML 字符串的内容替换给定元素的子元素。
<p>这将至少包括两个事件，n 个插入事件后跟一个移除事件。 
<p>为了让它正确工作，文档必须具有一个 <code>HTMLEditorKit.Parser</code> 集。如果文档是通过 <code>createDefaultDocument</code> 方法从 HTMLEditorKit 创建的，那么就是这种情况。

@param elem 其子元素将被替换的分支元素
@param htmlText 要被解析并分配给 <code>elem</code> 的字符串
@throws IllegalArgumentException 如果 <code>elem</code> 是一个叶元素
@throws IllegalStateException 如果尚未定义 <code>HTMLEditorKit.Parser</code>
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.setOuterHTML(Element elem, String htmlText) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

用指定为 HTML 字符串的内容替换父元素中的给定元素。 
<p>这将至少包括两个事件，n 个插入事件后跟一个移除事件。
<p>当替换叶元素时，这将试图确保存在一个新行（如果需要的话）。这可能导致插入额外的元素。考虑下面的情况，如果要用 &lt;img&gt; 替换一个包含新行的字符元素，那么这将创建两个元素，一个用于图像，另一个用于新行。
<p>如果最后试图替换元素，则最有可能以两个元素结尾，例如，setOuterHTML(getCharacterElement (getLength()), &quot;blah&quot;) 将导致结尾处有两个叶元素，一个表示 'blah'，而另一个则表示结尾元素。
<p>为了让它正确工作，文档必须具有一个 HTMLEditorKit.Parser 集。如果文档是通过 <code>createDefaultDocument</code> 方法从 HTMLEditorKit 创建的，那么就是这种情况。

@param elem 其子元素要被替换的分支元素
@param htmlText 要被解析并分配给 <code>elem</code> 的字符串
@throws IllegalStateException 如果尚未设置 HTMLEditorKit.Parser
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.insertAfterStart(Element elem, String htmlText) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

将指定为字符串的 HTML 插入元素的起始处。 
<p>为了让它正确工作，文档必须具有一个 <code>HTMLEditorKit.Parser</code> 集。如果文档是通过 <code>createDefaultDocument</code> 方法从 HTMLEditorKit 创建的，那么就是这种情况。

@param elem 分支元素，它要作为新文本的根元素
@param htmlText 要被解析并分配给 <code>elem</code> 的字符串
@throws IllegalStateException 如果尚未在文档上设置 HTMLEditorKit.Parser
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.insertBeforeEnd(Element elem, String htmlText) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

将指定为字符串的 HTML 插入元素的结尾处。 
<p> 如果 <code>elem</code> 的子元素是叶元素，并且 <code>elem.getEndOffset() - 1</code> 位置处的字符是一个新行符，则将内容插入到新行符的前面，以便新行符的后面没有文本。
<p>为了让它正确工作，文档必须具有一个 <code>HTMLEditorKit.Parser</code> 集。如果文档是通过 <code>createDefaultDocument</code> 方法从 HTMLEditorKit 创建的，那么就是这种情况。

@param elem 元素，它要作为新文本的根元素
@param htmlText 要被解析并分配给 <code>elem</code> 的字符串
@throws IllegalStateException 如果尚未在文档上设置 HTMLEditorKit.Parser
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.insertBeforeStart(Element elem, String htmlText) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

将指定为字符串的 HTML 插入给定元素的起始处之前。 
<p>为了让它正确工作，文档必须具有一个 <code>HTMLEditorKit.Parser</code> 集。如果文档是通过 <code>createDefaultDocument</code> 方法从 HTMLEditorKit 创建的，那么就是这种情况。

@param elem 元素，它要作为新文本的根元素
@param htmlText 要被解析并分配给 <code>elem</code> 的字符串
@throws IllegalStateException 如果尚未在文档上设置 HTMLEditorKit.Parser
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.insertAfterEnd(Element elem, String htmlText) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

将指定为字符串的 HTML 插入给定元素的起始处之后。 
<p>为了让它正确工作，文档必须具有一个 <code>HTMLEditorKit.Parser</code> 集。如果文档是通过 <code>createDefaultDocument</code> 方法从 HTMLEditorKit 创建的，那么就是这种情况。

@param elem 元素，它要作为新文本的根元素
@param htmlText 要被解析并分配给 <code>elem</code> 的字符串
@throws IllegalStateException 如果尚未在文档上设置 HTMLEditorKit.Parser
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element javax.swing.text.html.HTMLDocument.getElement(String id)
<!-- END KEY -->
<!-- BEGIN DATA -->

返回具有给定 id <code>Attribute</code> 的元素。如果未找到元素，则返回 <code>null</code>。注意，此方法处理的是 <code>Attribute</code>，而<i>不是</i> 字符串标记。在下面的 HTML 片段中：<code>&lt;a id=&quot;HelloThere&quot;&gt;</code>，属性是 'id'，字符串标记是 'a'。这是 <code>getElement(RootElement, HTML.Attribute.id, id)</code> 的一个便捷方法。它不是线程安全的。

@param id  表示所需 <code>Attribute</code> 的字符串
@return 具有指定 <code>Attribute</code> 的元素，如果未找到，则返回 <code>null</code>，如果 <code>id</code> 为 <code>null</code>，则返回 <code>null</code>
@see javax.swing.text.html.HTML.Attribute
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element javax.swing.text.html.HTMLDocument.getElement(Element e, Object attribute, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>e</code>（它包含具有值 <code>value</code> 的属性 <code>attribute</code>）的子元素，如果未找到，则返回 <code>null</code>。它不是线程安全的。

@param e 根元素，从它开始进行搜索
@param attribute 所需的 <code>Attribute</code>
@param value 指定 <code>Attribute</code> 的值
@return 具有指定 <code>Attribute</code> 和指定 <code>value</code> 的元素，如果未找到，则返回 <code>null</code>
@see javax.swing.text.html.HTML.Attribute
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLDocument.fireChangedUpdate(DocumentEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有需要此事件类型的通知的已注册侦听器。使用传入此触发方法的参数延后创建事件实例。

@param e 事件
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLDocument.fireUndoableEditUpdate(UndoableEditEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有需要此事件类型的通知的已注册侦听器。使用传入此触发方法的参数延后创建事件实例。

@param e 事件
@see EventListenerList

<!-- END DATA -->
