<!-- BEGIN KEY -->
public interface javax.swing.text.Document
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
<code>Document</code> 是一个作为 swing 文本组件模型的文本容器。此接口的目标是为了满足不同的文档处理需要，从非常简单的文档（纯文本 textfield）到非常复杂的文档（例如，HTML 或 XML 文档）。

<p><b><font size=+1>内容</font></b>
 <p>
在最简单的级别，文本可用一个线性的字符序列模型表示。为支持国际化，Swing 文本模型使用 <a href="http://www.unicode.org/">unicode</a> 字符。显示在文本组件中的字符序列一般称为组件的<em>内容</em>。
 <p>
要引用序列中的位置，使用的是两个字符之间的坐标。如下图所示，文本文档中位置可称为一个位置或一个偏移量。位置是从零开始的。
<p align=center><img src="doc-files/Document-coord.gif" 
 alt="以下文本是对此图像的描述。">
 <p>
此例中，如前图所示，如果文档的内容为序列 &quot;The quick brown fox&quot; ，&quot;The&quot; 之前的位置为 0，位于 &quot;The&quot; 之后、它后面的空白之前的位置为 3。序列 &quot;The&quot; 中的整个字符序列称为一个<em>范围</em>。
<p>下列方法提供对组成内容的字符数据的访问。
 <ul>
 <li><a href="#getLength()">getLength()</a>
 <li><a href="#getText(int, int)">getText(int, int)</a>
 <li><a href="#getText(int, int, javax.swing.text.Segment)">getText(int, int, Segment)</a>
 </ul>
<p><b><font size=+1>结构</font></b>
 <p>
只将文本表示为一般的内容并不常见。更多的情况下，文本都通常具有与其关联的某种结构。具体构造成哪种结构取决于特定的 Document 实现。它可以简单到没有结构（即简单的文本字段），也可以是类似下面的图。
<p align=center><img src="doc-files/Document-structure.gif"
 alt="图示书-&gt;章-&gt;段落">
 <p>
结构单位（即树的节点）由 <a href="Element.html">Element</a> 接口引用。每个 Element 都可用一组属性标记。这些属性（名称/值对）由 <a href="AttributeSet.html">AttributeSet</a> 接口定义。
<p>下面的方法提供对文档结构的访问。
 <ul>
 <li><a href="#getDefaultRootElement()">getDefaultRootElement</a>
 <li><a href="#getRootElements()">getRootElements</a>
 </ul>

<p><b><font size=+1>可变</font></b>
 <p>
所有的文档都需要能够添加和移除简单的文本。通常，通过键盘或鼠标动作添加和移除文本。插入和移除对文档结构有何影响完全取决于文档的实现。
<p>下列方法与文档内容的变化相关：
 <ul>
 <li><a href="#insertString(int, java.lang.String, javax.swing.text.AttributeSet)">insertString(int, String, AttributeSet)</a>
 <li><a href="#remove(int, int)">remove(int, int)</a>
 <li><a href="#createPosition(int)">createPosition(int)</a>
 </ul>

<p><b><font size=+1>通知</font></b>
 <p>
<code>Document</code> 的改变必须传送给相关的观察者。更改通知遵守为 JavaBeans 指定的事件模型大纲。在 JavaBeans 事件模型中，一旦指派了一个事件通知，必须在事件源发生进一步的更改之前通知所有的侦听器。此外，无法保证传送的顺序。
 <p>
通知以两个独立的事件提供，<a href="../event/DocumentEvent.html">DocumentEvent</a> 和 <a href="../event/UndoableEditEvent.html">UndoableEditEvent</a>。如果通过 <code>Document</code> 的 api 对其进行改变，将对所有注册的 <code>DocumentListeners</code> 发送一个 <code>DocumentEvent</code>。如果 <code>Document</code> 实现支持撤消/重复功能，<code>UndoableEditEvent</code> 将发送到所有注册的 <code>UndoableEditListener</code> 上。如果对可撤消的编辑进行撤消，应从 Document 触发 <code>DocumentEvent</code> 以指示又进行了更改。但是这种情况下不应生成任何 <code>UndoableEditEvent</code>，因为编辑实际上是更改的源，而不是通过其 api 对 <code>Document</code> 进行的改变。
<p align=center><img src="doc-files/Document-notification.gif"
 alt="前述文本是对此图像的描述。">
 <p>
上图中假设左面显示的组件改变了蓝色矩形表示的文本对象。文档通过对两个组件视图指派 DocumentEvent 进行响应，并向侦听逻辑发送 UndoableEditEvent，以保留历史缓冲区。
 <p>
现在假定右面显示的组件改变相同的文档。同样，文档对两个组件视图指派 DocumentEvent 并对保留历史缓冲区的侦听逻辑发送 UndoableEditEvent。 
 <p>
如果历史缓冲区因此回滚（即撤消上一个 UndoableEdit），将对两个视图发送 DocumentEvent，导致二者都反映出对文档的撤消改动（即移除右面的组件的改动）。如果历史缓冲区再次回滚另一个更改，将对两个视图发送另外的 DocumentEvent，导致它们反映出对文档的撤消改动，即移除左面的组件的改动。 
 <p>
与观察文档的改动相关的方法有：
 <ul>
 <li><a href="#addDocumentListener(javax.swing.event.DocumentListener)">addDocumentListener(DocumentListener)</a>
 <li><a href="#removeDocumentListener(javax.swing.event.DocumentListener)">removeDocumentListener(DocumentListener)</a>
 <li><a href="#addUndoableEditListener(javax.swing.event.UndoableEditListener)">addUndoableEditListener(UndoableEditListener)</a>
 <li><a href="#removeUndoableEditListener(javax.swing.event.UndoableEditListener)">removeUndoableEditListener(UndoableEditListener)</a>
 </ul>

<p><b><font size=+1>属性</font></b>
 <p>
文档实现通常具有在运行时与之关联的某组属性。两个最常见的属性是 <a href="#StreamDescriptionProperty">StreamDescriptionProperty</a> 和 <a href="#TitleProperty">TitleProperty</a>，前者可描述 <code>Document</code> 的来源，后者可用于命名 <code>Document</code>。与这些属性相关的方法有：
 <ul>
 <li><a href="#getProperty(java.lang.Object)">getProperty(Object)</a>
 <li><a href="#putProperty(java.lang.Object, java.lang.Object)">putProperty(Object, Object)</a>
 </ul>

<p>有关 <code>Document</code> 类的更多信息，请参阅 <a href="http://java.sun.com/products/jfc/tsc">The Swing Connection</a> 以及更有针对性的文章 <a href="http://java.sun.com/products/jfc/tsc/articles/text/element_interface">The Element Interface</a>。

@author  Timothy Prinzing
@version 1.43 12/19/03


@see javax.swing.event.DocumentEvent
@see javax.swing.event.DocumentListener
@see javax.swing.event.UndoableEditEvent
@see javax.swing.event.UndoableEditListener
@see Element
@see Position
@see AttributeSet

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.Document.StreamDescriptionProperty
<!-- END KEY -->
<!-- BEGIN DATA -->
用于描述初始化文档的流的属性名。如果文档从流初始化并且有来自该流的信息，则应使用此属性。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.Document.TitleProperty
<!-- END KEY -->
<!-- BEGIN DATA -->
文档标题的属性名（如果有）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.Document.getLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回文档中当前内容的字符数。

@return 字符的数量，该数量 &gt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.Document.addDocumentListener(DocumentListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
注册给定的观察者以便开始接收文档发生更改的通知。

@param listener 要注册的观察者
@see Document#removeDocumentListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.Document.removeDocumentListener(DocumentListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定的观察者从通知列表中撤消注册，这样就不再接收改动更新。  

@param listener 要注册的观察者
@see Document#addDocumentListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.Document.addUndoableEditListener(UndoableEditListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
注册给定的观察者以便开始接收文档发生不可撤消的编辑的通知。

@param listener 要注册的观察者
@see javax.swing.event.UndoableEditEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.Document.removeUndoableEditListener(UndoableEditListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定的观察者从通知列表中撤消注册，这样就不再接收更新。

@param listener 要注册的观察者
@see javax.swing.event.UndoableEditEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.text.Document.getProperty(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
获得与文档关联的属性。

@param key 非 <code>null</code> 属性键
@return 属性
@see #putProperty(Object, Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.Document.putProperty(Object key, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
将属性与文档关联。提供两个标准属性键：<a href="#StreamDescriptionProperty"><code>StreamDescriptionProperty</code></a> 和 <a href="#TitleProperty"><code>TitleProperty</code></a>。也可以定义其他属性，如 author。

@param key 非 <code>null</code> 属性键
@param value 属性值
@see #getProperty(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.Document.remove(int offs, int len) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
移除文档的部分内容。这将导致对注册的 DocumentListener 发送类型为 DocumentEvent.EventType.REMOVE 的 DocumentEvent，除非抛出异常。通过在 DocumentListener 上调用 removeUpdate 方法，通知被发送到侦听器。
 <p>
为确保并发情况下的合理行为，事件在改动发生之后指派。这意味着在指派移除通知之前，文档已经更新并且由 <code>createPosition</code> 创建的任何标记已更改。对于移除的情况，移除范围的结束折叠至范围的开始，移除范围内的任何标记都折叠至范围的开始。
<p align=center><img src="doc-files/Document-remove.gif"
  alt="图示从 'The quick brown fox' 中移除 'quick'。">
 <p>
如果移除导致 Document 结构更改，生成的 DocumentEvent 中还将包含更改所涉及的插入和移除 Element 的细节。移除对结构造成的更改则具体取决于 Document 的实现。
 <p>
如果 Document 支持撤消/重复，还将生成 UndoableEditEvent。  

@param offs 起始位置的偏移量，该值 &gt;= 0
@param len  要移除的字符数，该值 &gt;= 0
@exception BadLocationException 移除范围的有些部分不是文档的有效部分。异常中的位置为遇到的第一个损坏位置。
@see javax.swing.event.DocumentEvent
@see javax.swing.event.DocumentListener
@see javax.swing.event.UndoableEditEvent
@see javax.swing.event.UndoableEditListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.Document.insertString(int offset, String str, AttributeSet a) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
插入内容字符串。这将导致对注册的 DocumentListener 发送类型为 DocumentEvent.EventType.INSERT 的 DocumentEvent，除非抛出异常。通过在 DocumentListener 上调用 insertUpdate 方法传送 DocumentEvent。生成的 DocumentEvent 的偏移量和长度将指示对 Document 实际进行的更改。
<p align=center><img src="doc-files/Document-insert.gif"
  alt="图示将 'quick' 插入 'The quick brown fox'">
 <p>
如果插入导致 Document 结构更改，有关更改涉及的插入和移除的 Element 的细节将包含在生成的 DocumentEvent 中。作为对插入的响应，由 Document 的实现决定结构应如何更改。
 <p>
如果 Document 支持撤消/重复，还将生成 UndoableEditEvent。  

@param offset  要插入内容的偏移量，该值 &gt;= 0。跟踪给定的位置或其后位置的更改的所有位置都将移动。
@param str    要插入的字符串
@param a      要与插入的内容关联的属性。如果没有属性，它可能为 null。
@exception BadLocationException  给定插入位置不是文档中的有效位置
@see javax.swing.event.DocumentEvent
@see javax.swing.event.DocumentListener
@see javax.swing.event.UndoableEditEvent
@see javax.swing.event.UndoableEditListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.Document.getText(int offset, int length) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取文档中给定部分包含的文本。

@param offset  文档中代表所需文本起始位置的偏移量，该值 &gt;= 0
@param length  需要的字符串的长度，该值 &gt;= 0
@return 以长度 &gt;= 0 的字符串形式返回文本。
@exception BadLocationException  给定范围的某些部分不是文档中的有效部分。异常中的位置为遇到的第一个损坏位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.Document.getText(int offset, int length, Segment txt) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取文档中给定部分包含的文本。
 <p>
如果 txt 参数的 partialReturn 属性为 false，Segment 中返回的数据将是请求的整个长度，根据数据存储的方式可能是副本，也可能不是。如果 partialReturn 属性为 true，则只返回不需要创建副本即能返回的文本量。使用部分返回在需要扫描大部分文档的情况下具有更好的效果。下面是使用部分返回访问整个文档的示例：
 <p>
 <pre><code>

 &nbsp; int nleft = doc.getDocumentLength();
 &nbsp; Segment text = new Segment();
 &nbsp; int offs = 0;
 &nbsp; text.setPartialReturn(true);   
 &nbsp; while (nleft &gt; 0) {
 &nbsp;     doc.getText(offs, nleft, text);
 &nbsp;     // do someting with text
 &nbsp;     nleft -= text.count;
 &nbsp;     offs += text.count;
 &nbsp; }

 </code></pre>

@param offset  文档中代表所需文本起始位置的偏移量，该值 &gt;= 0
@param length  需要的字符串的长度，该值 &gt;= 0
@param txt 要在其中返回文本的 Segment 对象

@exception BadLocationException  给定范围的某些部分不是文档中的有效部分。异常中的位置为遇到的第一个损坏位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Position javax.swing.text.Document.getStartPosition()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回代表文档起始处的位置。可对返回的位置进行计数以便跟踪更改，也可以让其保留在文档起始位置。

@return 位置

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Position javax.swing.text.Document.getEndPosition()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回代表文档结束处的位置。可对返回的位置进行计数以便跟踪更改，也可以让其保留在文档结束位置。

@return 位置

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Position javax.swing.text.Document.createPosition(int offs) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法允许应用程序在字符内容序列中标记位置。然后可使用此标记对在内容中的插入和移除的更改进行跟踪。总的策略是，总在当前位置之前插入（最常见的情况），除非插入位置为零，这种情况下强制插入到原点位置之后。 

@param offs  文档起始处的偏移量，该值 &gt;= 0
@return 位置
@exception BadLocationException  如果给定的位置不代表关联文档中的有效位置

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element[] javax.swing.text.Document.getRootElements()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回定义的所有根元素。
 <p>
通常只有一个文档结构，但是此接口支持在文本数据上构建任意数的结构投影。文档可以有多个根元素以支持多文档结构。一些示例如下：
 </p>
 <ul>
<li>文本方向。
<li>词法解析标记流。
<li>解析树。
<li>转换为本机格式以外的格式。
<li>修改规范。
<li>注释。
 </ul>

@return 根元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element javax.swing.text.Document.getDefaultRootElement()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回视图赖以存在的根元素，除非提供了向元素结构指定视图的其他机制。

@return 根元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.Document.render(Runnable r)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果模型支持异步更新，则允许在并发情况下安全呈现模型。给定的可运行程序的执行方式是，在可运行程序执行时安全读取模型且不作任何更改。可运行程序本身<em>不</em> 作任何改变。  

@param r 用于呈现模型的 <code>Runnable</code>

<!-- END DATA -->
