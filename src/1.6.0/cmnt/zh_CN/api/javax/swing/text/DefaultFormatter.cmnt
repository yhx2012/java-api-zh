<!-- BEGIN KEY -->
public class javax.swing.text.DefaultFormatter extends javax.swing.JFormattedTextField.AbstractFormatter implements java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>DefaultFormatter</code> 格式化任意对象。格式化是通过调用 <code>toString</code> 方法完成的。为将值转换回 String，类必须提供一个采用 String 参数的构造方法。如果未发现采用 String 的单一参数构造方法，则返回值将为传入 <code>stringToValue</code> 的 String。
 <p>
<code>DefaultFormatter</code> 的实例不能在 <code>JFormattedTextField</code> 的多个实例中使用。要获得已配置好的 <code>DefaultFormatter</code> 的副本，请使用 <code>clone</code> 方法。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@see javax.swing.JFormattedTextField.AbstractFormatter

@version 1.13 05/05/04
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean javax.swing.text.DefaultFormatter.allowsInvalid
<!-- END KEY -->
<!-- BEGIN DATA -->
指示编辑的值是否必须与掩码匹配。
<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean javax.swing.text.DefaultFormatter.overwriteMode
<!-- END KEY -->
<!-- BEGIN DATA -->
如果为 true，编辑模式为改写（或替换）。
<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean javax.swing.text.DefaultFormatter.commitOnEdit
<!-- END KEY -->
<!-- BEGIN DATA -->
如果为 true，任何时间只要有有效的编辑发生即调用 commitEdit。
<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Class javax.swing.text.DefaultFormatter.valueClass
<!-- END KEY -->
<!-- BEGIN DATA -->
用于创建新实例的 Class。
<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.text.NavigationFilter javax.swing.text.DefaultFormatter.navigationFilter
<!-- END KEY -->
<!-- BEGIN DATA -->
将调用转发回 DefaultFormatter 的 NavigationFilter。
<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.text.DocumentFilter javax.swing.text.DefaultFormatter.documentFilter
<!-- END KEY -->
<!-- BEGIN DATA -->
将调用转发回 DefaultFormatter 的 DocumentFilter。
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.DefaultFormatter()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 DefaultFormatter。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultFormatter.install(JFormattedTextField ftf)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>DefaultFormatter</code> 安装到特定的 <code>JFormattedTextField</code>。这会调用 <code>valueToString</code>，以便将 <code>JFormattedTextField</code> 的当前值转换为 String。此方法稍后将会把 <code>getActions</code> 返回的 <code>Action</code>、<code>getDocumentFilter</code> 返回的 <code>DocumentFilter</code> 和 <code>getNavigationFilter</code> 返回的 <code>NavigationFilter</code> 安装到 <code>JFormattedTextField</code> 上。
 <p>
如果子类希望在 <code>JFormattedTextField</code> 上安装其他侦听器，则通常只需要重写此方法。
 <p>
如果在将当前值转换为 String 时存在 <code>ParseException</code>，则这会将文本设置为空 String，并将 <code>JFormattedTextField</code> 标记为正处在无效状态。
 <p>
尽管这是一个公共方法，但通常仅供 <code>JFormattedTextField</code> 的子类使用。当值发生更改，或内部状态发生更改时，<code>JFormattedTextField</code> 将在适当的时候调用此方法。

@param ftf 要格式化为的 JFormattedTextField，可以为 null，指示未从当前的 JFormattedTextField 安装。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultFormatter.setCommitsOnValidEdit(boolean commit)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置何时将编辑内容发布回 <code>JFormattedTextField</code>。如果为 true，<code>commitEdit</code> 在每次有效编辑（编辑文本的任何时间）后调用。另一方面，如果为 false，则 <code>DefaultFormatter</code> 不会将编辑内容发布回 <code>JFormattedTextField</code>。因此，<code>JFormattedTextField</code> 值的惟一一次改变发生的时间是，在 <code>JFormattedTextField</code> 上调用 <code>commitEdit</code> 时，通常为按下回车或当焦点离开 <code>JFormattedTextField</code> 时。

@param commit 用于指示何时将编辑内容提交回 JTextComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.DefaultFormatter.getCommitsOnValidEdit()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回何时将编辑内容发布回 <code>JFormattedTextField</code>。

@return 如果在每次有效编辑后提交编辑，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultFormatter.setOverwriteMode(boolean overwriteMode)
<!-- END KEY -->
<!-- BEGIN DATA -->
配置插入字符时的行为。如果 <code>overwriteMode</code> 为 true （默认值），新字符将改写模型中现有的字符。

@param overwriteMode 指示使用改写或替代模式

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.DefaultFormatter.getOverwriteMode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回插入字符时的行为。

@return 如果新插入字符改写现有字符，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultFormatter.setAllowsInvalid(boolean allowsInvalid)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置编辑的值在一段时间内是否允许为无效（也就是说，<code>stringToValue</code> 是否抛出 <code>ParseException</code>）。允许用户临时输入一个无效值会很方便。

@param allowsInvalid 用于指示编辑的值是否必须始终为有效

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.DefaultFormatter.getAllowsInvalid()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回编辑的值是否在一段时间内允许为无效。

@return 如果编辑的值必须始终为有效，则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultFormatter.setValueClass(java.lang.Class<?> valueClass)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于创建新 Objects 的类。如果传入的类不具有采用 String 的只带一个参数的构造方法，将使用 String 值。

@param valueClass 用于构造从 stringToValue 中返回的值的类

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class<?> javax.swing.text.DefaultFormatter.getValueClass()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于创建新 Objects 的类。

@return 用于构造从 stringToValue 中返回的值的类

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.text.DefaultFormatter.stringToValue(String string) throws java.text.ParseException
<!-- END KEY -->
<!-- BEGIN DATA -->
通过使用带 String 参数的构造方法将传入的 String 转换为 <code>getValueClass</code> 的一个实例。如果 <code>getValueClass</code> 返回 null，将使用 <code>JFormattedTextField</code> 中当前值的类。如果它为 null，将返回一个 String。如果构造方法抛出异常，则会抛出 <code>ParseException</code>。如果没有只带一个参数的 String 构造方法，则返回 <code>string</code>。

@throws ParseException 如果转换过程中出现错误
@param string 要转换的字符串
@return 文本的 Object 表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.DefaultFormatter.valueToString(Object value) throws java.text.ParseException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 <code>toString</code> 方法将传入的 Object 转换为 String。

@throws ParseException 如果在转换时发生错误
@param value 要转换的值
@return 值的 String 表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.DocumentFilter javax.swing.text.DefaultFormatter.getDocumentFilter()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于限制放置到 <code>JFormattedTextField</code> 中的字符的 <code>DocumentFilter</code>。

@return 限制编辑的 DocumentFilter

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.NavigationFilter javax.swing.text.DefaultFormatter.getNavigationFilter()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于限制光标放置位置的 <code>NavigationFilter</code>。

@return 限制导航的 NavigationFilter

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.text.DefaultFormatter.clone() throws java.lang.CloneNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建此 DefaultFormatter 的副本。

@return DefaultFormatter 的副本

<!-- END DATA -->
