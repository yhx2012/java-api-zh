<!-- BEGIN KEY -->
public class javax.swing.text.PlainView extends javax.swing.text.View implements javax.swing.text.TabExpander
<!-- END KEY -->
<!-- BEGIN DATA -->
实现简单的多行文本视图的 View 接口，该文本视图的文本只有一种字体和颜色。该视图用每个子元素表示文本的某一行。

@author  Timothy Prinzing
@version 1.74 04/15/04
@see     View

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.FontMetrics javax.swing.text.PlainView.metrics
<!-- END KEY -->
<!-- BEGIN DATA -->
当前字体的字体规格。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.PlainView(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造在元素上包装的新 PlainView。

@param elem  元素

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.PlainView.getTabSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回文档中制表符大小的集合，默认值是 8。

@return  制表符大小

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.PlainView.drawLine(int lineIndex, Graphics g, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
呈现文本的某一行，取消末尾的空白并扩展所有的制表符。实现此方法以调用方法 <code>drawUnselectedText</code> 和 <code>drawSelectedText</code>，这样可定制呈现选定和未选定文本的方法。

@param lineIndex  要绘制的行，该值 &gt;= 0
@param g  <code>Graphics</code> 上下文
@param x 起始 X 位置，该值 &gt;= 0
@param y 起始 Y 位置 &gt;= 0
@see #drawUnselectedText
@see #drawSelectedText

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.PlainView.drawUnselectedText(Graphics g, int x, int y, int p0, int p1) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
将模型中给定的范围呈现为正常的未选定文本。使用前景色或禁用的颜色呈现文本。

@param g  图形上下文
@param x  起始 X 坐标，该值 &gt;= 0
@param y  起始 Y 坐标，该值 &gt;= 0
@param p0  模型中的起始位置，该值 &gt;= 0
@param p1  模型中的结束位置，该值 &gt;= 0
@return  范围末尾的 X 位置，该值 &gt;= 0
@exception BadLocationException  如果范围无效

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.PlainView.drawSelectedText(Graphics g, int x, int y, int p0, int p1) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
将模型中给定的范围呈现为选定文本。实现此方法以使用承载组件中指定的颜色呈现文本。假定轮廓色将呈现选定的背景。

@param g  图形上下文
@param x  起始 X 坐标，该值 &gt;= 0
@param y  起始 Y 坐标，该值 &gt;= 0
@param p0  模型中的起始位置，该值 &gt;= 0
@param p1  模型中的结束位置，该值 &gt;= 0
@return  范围末尾的位置
@exception BadLocationException  如果范围无效

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final javax.swing.text.Segment javax.swing.text.PlainView.getLineBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
提供对可用于从相关文档获取文本的缓冲区的访问。

@return  缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.PlainView.updateMetrics()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查字体规格和最长行是否最新。
 
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.PlainView.getPreferredSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此视图沿某轴的首选区域。

@param axis 可以是 View.X_AXIS 或 View.Y_AXIS
@return   视图可能要在其中呈现的区域，该值 &gt;= 0。通常会告知该视图在返回的区域中呈现，但不保证一定如此。父级可选择重新调整视图大小或拆分视图。
@exception IllegalArgumentException 如果轴无效

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.PlainView.paint(Graphics g, Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定呈现面和该表面的区域呈现。该视图可能需要进行布置和创建子视图，以使它本身能够在给定的分配区域呈现。

@param g 要使用的呈现表面
@param a 已分配的呈现区域

@see View#paint

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Shape javax.swing.text.PlainView.modelToView(int pos, Shape a, Position.Bias b) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
提供从文档模型坐标空间到所映射的视图坐标空间的映射。

@param pos 要转换的位置，该值 &gt;= 0
@param a 分配的要在其中呈现的区域
@return 给定位置的边界框
@exception BadLocationException  如果给定位置在所关联的文档中不是一个有效位置
@see View#modelToView

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.PlainView.viewToModel(float fx, float fy, Shape a, javax.swing.text.Position.Bias[] bias)
<!-- END KEY -->
<!-- BEGIN DATA -->
提供从视图坐标空间到该模型的逻辑坐标空间的映射。

@param fx  X 坐标，该值 &gt;= 0
@param fy  Y 坐标，该值 &gt;= 0
@param a 要呈现的分配区域
@return  在模型内最能表示该视图中给定点的位置，该值 &gt;= 0
@see View#viewToModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.PlainView.insertUpdate(DocumentEvent changes, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
发出通知，通知在文档中此视图负责的某个位置已插入内容。

@param changes 取自相关文档的更改信息
@param a 视图的当前分配区域
@param f 用于重建的工厂（如果该视图有子级）
@see View#insertUpdate

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.PlainView.removeUpdate(DocumentEvent changes, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知在文档中此视图负责的某个位置已插入内容。

@param changes 取自相关文档的更改信息
@param a 视图的当前分配区域
@param f 用于重建的工厂（如果该视图有子级）
@see View#removeUpdate

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.PlainView.changedUpdate(DocumentEvent changes, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
发出通知，通知文档中此视图负责的某个位置的属性已更改。

@param changes 取自相关文档的更改信息
@param a 视图的当前分配区域
@param f 用于重建的工厂（如果该视图有子级）
@see View#changedUpdate

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.PlainView.setSize(float width, float height)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置视图的大小。如果此方法有任何布局任务，则会导致沿给定的轴布局视图。

@param width 宽度 &gt;= 0
@param height 宽度 &gt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.PlainView.nextTabStop(float x, int tabOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定引用位置之后，返回下一个制表符停靠位的位置。此实现不支持诸如居中对齐一类的事情，所以它将忽略 tabOffset 参数。

@param x  当前位置，该值 &gt;= 0
@param tabOffset  下一个流内出现制表符的位置，该值 &gt;= 0。
@return  以点为测量单位的制表位，该值 &gt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.PlainView.updateDamage(DocumentEvent changes, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
重新绘制给定文档事件覆盖的更改区域。对于只在一行上进行插入/移除的情况，破坏范围开始处的行。如果添加或移除多行，则破坏整个视图。检查最长的行以查看它是否更改。

@since 1.4


<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.PlainView.damageLineRange(int line0, int line1, Shape a, Component host)
<!-- END KEY -->
<!-- BEGIN DATA -->
重新绘制给定的行范围。

@param host  承载视图的组件（用于调用 repaint）
@param a  视图所呈现的分配区域
@param line0  要重绘的起始行号。它必须是模型中的有效行号。
@param line1  要重绘的结束行号。它必须是模型中的有效行号。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.text.PlainView.lineToRect(Shape a, int line)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定表示给定行的矩形。

@param a  视图要呈现的分配区域
@param line  要查找的区域的行号。它必须是模型中的有效行号。
@since 1.4

<!-- END DATA -->
