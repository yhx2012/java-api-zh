<!-- BEGIN KEY -->
public class javax.swing.text.Segment extends java.lang.Object implements java.lang.Cloneable, java.text.CharacterIterator, java.lang.CharSequence
<!-- END KEY -->
<!-- BEGIN DATA -->
表示文本片段的字符数组的 segment。尽管能够直接访问数组，也应将其视为不可变的。此实现提供了对文本片段的快速访问，而且不存在来回复制字符的开销。它实际上是一个未受保护的 String。
 <p>
Segment 实现 java.text.CharacterIterator 接口以支持对国际化支持的使用，而不用将文本复制到某个字符串。

@author  Timothy Prinzing
@version 1.22 12/19/03

<!-- END DATA -->
<!-- BEGIN KEY -->
public char[] javax.swing.text.Segment.array
<!-- END KEY -->
<!-- BEGIN DATA -->
这是包含了所需文本的数组。永远不应修改此数组；它只是用来提高效率的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.Segment.offset
<!-- END KEY -->
<!-- BEGIN DATA -->
这是所需文件开始处的数组偏移量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.Segment.count
<!-- END KEY -->
<!-- BEGIN DATA -->
这是构成所需文本的数组元素的数目。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Segment()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新 segment。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Segment(char[] array, int offset, int count)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个引用现有数组的新 segment。

@param array 要引用的数组
@param offset 数组中的偏移量
@param count 字符数

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.Segment.setPartialReturn(boolean p)
<!-- END KEY -->
<!-- BEGIN DATA -->

指示部分返回有效的标记。如果标志为 true，则接口方法 Document.getText(position,length,Segment) 的实现应该在不进行复制的情况下尽可能多地返回文本。标志的默认状态为 false，这将导致 Document.getText(position,length,Segment) 提供其总是具有的返回行为（要么复制，要么不复制文本，具体取决于请求）。   
 
@param p 部分返回是否有效。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.Segment.isPartialReturn()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示部分返回有效的标记。 

@return 部分返回是否有效。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.Segment.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
将 segment 转换为 String。

@return 字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public char javax.swing.text.Segment.first()
<!-- END KEY -->
<!-- BEGIN DATA -->
将位置设置为 getBeginIndex()，并返回该位置的字符。
@return 文本中的第一个字符，如果文本为空，则返回 DONE
@see #getBeginIndex
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public char javax.swing.text.Segment.last()
<!-- END KEY -->
<!-- BEGIN DATA -->
将位置设置为 getEndIndex()-1（如果文本为空，则设置为 getEndIndex()），并返回该位置的字符。
@return 文本中的最后一个字符，如果文本为空，则返回 DONE
@see #getEndIndex
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public char javax.swing.text.Segment.current()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取当前位置（由 getIndex() 返回）的字符。
@return 当前位置的字符；如果当前位置已超出文本末尾，则返回 DONE。
@see #getIndex
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public char javax.swing.text.Segment.next()
<!-- END KEY -->
<!-- BEGIN DATA -->
将迭代器的索引加一，并返回新索引处的字符。如果所得索引大于等于 getEndIndex()，则将当前索引重置为 getEndIndex()，并返回值 DONE。
@return 新位置的字符；如果该新位置已超出文本范围的末尾，则返回 DONE。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public char javax.swing.text.Segment.previous()
<!-- END KEY -->
<!-- BEGIN DATA -->
将迭代器的索引减一，并返回新索引处的字符。如果当前索引为 getBeginIndex()，则新索引仍为 getBeginIndex()，并返回值 DONE。
@return 新位置的字符；如果当前位置等于 getBeginIndex()，则返回 DONE。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public char javax.swing.text.Segment.setIndex(int position)
<!-- END KEY -->
<!-- BEGIN DATA -->
将位置设置为文本中的指定位置，并返回该字符。
@param position 文本中的位置。从 getBeginIndex() 到 getEndIndex() 的有效值范围。如果提供了无效值，则抛出 IllegalArgumentException。
@return 指定位置的字符；如果指定位置等于 getEndIndex()，则返回 DONE
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.Segment.getBeginIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回文本的起始索引。
@return 文本开始处的索引。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.Segment.getEndIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回文本的结束索引。此索引是文本末尾后面第一个字符的索引。
@return 文本中最后一个字符后面的索引
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.Segment.getIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前索引。
@return 当前索引。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public char javax.swing.text.Segment.charAt(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->

 {@inheritDoc} 
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.Segment.length()
<!-- END KEY -->
<!-- BEGIN DATA -->

 {@inheritDoc} 
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.CharSequence javax.swing.text.Segment.subSequence(int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->

 {@inheritDoc} 
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.text.Segment.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个浅表副本。

@return 副本

<!-- END DATA -->
