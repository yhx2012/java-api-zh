<!-- BEGIN KEY -->
public class javax.swing.text.MaskFormatter extends javax.swing.text.DefaultFormatter
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>MaskFormatter</code> 用于格式化和编辑字符串。<code>MaskFormatter</code> 的行为通过 String 掩码控制，该掩码指定可以包含在 <code>Document</code> 模型中特定位置的有效字符。可以指定以下字符：

 <table border=1 summary="Valid characters and their descriptions">
 <tr>
<th>字符</th>
<th><p align="left">描述</p></th>
 </tr>
 <tr>
    <td>#</td>
<td>任何有效数字，使用 <code>Character.isDigit</code>。</td>
 </tr>
 <tr>
    <td>'</td>
<td>转义字符，用于避开任何具有特殊格式的字符。</td>
 </tr>
 <tr>
<td>U</td><td>任何字符 (<code>Character.isLetter</code>)。将所有小写字母映射为大写。</td>
 </tr>
<tr><td>L</td><td>任何字符 (<code>Character.isLetter</code>)。将所有大写字母映射为小写。</td>
 </tr>
<tr><td>A</td><td>任何字符或数字（<code>Character.isLetter</code> 或 <code>Character.isDigit</code>）</td>
 </tr>
<tr><td>?</td><td>任何字符 (<code>Character.isLetter</code>)。</td>
 </tr>
<tr><td>*</td><td>所有字符。</td></tr>
<tr><td>H</td><td>任何十六进制字符（0-9、a-f 或 A-F）。</td></tr>
 </table>

 <p>
字符通常对应于一个 char，但在某些语言中不是这样。掩码是以单个字符为基础的，因此可以任意调整 char 数量来满足需要。
 <p>
可以进一步限制可通过 <code>setInvalidCharacters</code> 和 <code>setValidCharacters</code> 方法输入的字符。<code>setInvalidCharacters</code> 允许指定哪些字符无效。<code>setValidCharacters</code> 允许指定哪些字符有效。例如，以下代码块与具有无效/有效字符的 '0xHHH' 掩码等效：
 <pre>
 MaskFormatter formatter = new MaskFormatter(&quot;0x***&quot;);
 formatter.setValidCharacters(&quot;0123456789abcdefABCDEF&quot;);
 </pre>
 <p>
最初格式化值时，如果字符串的长度小于掩码的长度，则可能发生以下两种情况。要么使用占位符字符串，要么使用占位符字符。优先考虑使用占位符字符串。例如：
 <pre>
   MaskFormatter formatter = new MaskFormatter(&quot;###-####&quot;);
   formatter.setPlaceholderCharacter('_');
   formatter.getDisplayValue(tf, &quot;123&quot;);
 </pre>
 <p>
可能生成字符串 '123-____'。如果已调用 <code>setPlaceholder(&quot;555-1212&quot;)</code>，则生成 '123-1212'。占位符字符串只用于初始格式，后续格式只使用占位符字符。
 <p>
如果 <code>MaskFormatter</code> 配置为只允许有效字符 (<code>setAllowsInvalid(false)</code>)，则在编辑时将根据需要跳过字面值字符。假定 <code>MaskFormatter</code> 带有掩码 &quot;###-####&quot;，且当前值为 &quot;555-1212&quot;。使用右箭头键通过字段导航将生成（| 指示插入符的位置）：
 <pre>
   |555-1212
   5|55-1212
   55|5-1212
   555-|1212
   555-1|212
 </pre>
'-' 为字面值（不可编辑的）字符，将跳过这一字符。
 <p>
编辑时会导致类似行为。假定在前一示例中将字符串 '123-45' 和 '12345' 插入 <code>MaskFormatter</code>。两项插入都将导致相同的字符串 '123-45__'。<code>MaskFormatter</code> 在字符位置 3（即 '-'）处理插入时，可能发生以下两种情况：
 <ol>
<li>如果插入的字符是 '-'，则接受它。
<li>如果插入的字符与下一个非字面值字符的掩码匹配，则在新位置接受它。
<li>其他任何情况都将导致无效的编辑
 </ol>
 <p>
默认情况下，<code>MaskFormatter</code> 将不允许无效编辑，您可以使用 <code>setAllowsInvalid</code> 方法更改此设置，并在有效编辑状态提交编辑（使用 <code>setCommitsOnValidEdit</code> 更改此设置）。
 <p>
默认情况下，<code>MaskFormatter</code> 处于改写模式。也就是说，键入字符时不插入新字符，而是使用新键入的字符替换当前位置的字符。可以通过方法 <code>setOverwriteMode</code> 更改此行为。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.12 12/19/03
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.swing.text.MaskFormatter.mask
<!-- END KEY -->
<!-- BEGIN DATA -->
用户指定的掩码。
<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.swing.text.MaskFormatter.validCharacters
<!-- END KEY -->
<!-- BEGIN DATA -->
有效字符的列表。
<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.swing.text.MaskFormatter.invalidCharacters
<!-- END KEY -->
<!-- BEGIN DATA -->
无效字符的列表。
<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.swing.text.MaskFormatter.placeholderString
<!-- END KEY -->
<!-- BEGIN DATA -->
如果值不能完全填充掩码，则此 String 用于传入值。
<!-- END DATA -->
<!-- BEGIN KEY -->
private char javax.swing.text.MaskFormatter.placeholder
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示字符不存在的 String。
<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean javax.swing.text.MaskFormatter.containsLiteralChars
<!-- END KEY -->
<!-- BEGIN DATA -->
指示该值是否包含字面值字符。
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.MaskFormatter()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个不带掩码的 MaskFormatter。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.MaskFormatter(String mask) throws java.text.ParseException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定掩码的 <code>MaskFormatter</code>。如果 <code>mask</code> 不是有效掩码，则抛出 <code>ParseException</code>。

@throws ParseException 如果掩码不包含有效掩码字符

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.MaskFormatter.setMask(String mask) throws java.text.ParseException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置指示合法字符的掩码。如果 <code>mask</code> 无效，这将抛出一个 <code>ParseException</code>。

@throws ParseException 如果掩码不包含有效掩码字符

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.MaskFormatter.getMask()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回格式化掩码。

@return 指示合法字符值的掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.MaskFormatter.setValidCharacters(String validCharacters)
<!-- END KEY -->
<!-- BEGIN DATA -->
允许进一步限制可以输入的字符。只允许输入在掩码中指定的（不是 <code>invalidCharacters</code>，而是 <code>validCharacters</code>）字符。传入 null（默认）意味着有效字符只由掩码和无效字符限定范围。

@param validCharacters 如果为非 null，则指定合法字符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.MaskFormatter.getValidCharacters()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回可以输入的有效字符。

@return 合法字符

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.MaskFormatter.setInvalidCharacters(String invalidCharacters)
<!-- END KEY -->
<!-- BEGIN DATA -->
允许进一步限制可以输入的字符。只允许输入在掩码中指定的（不是 <code>invalidCharacters</code>，而是 <code>validCharacters</code>）字符。传入 null （默认）意味着有效字符只由掩码和有效字符限定范围。

@param invalidCharacters 如果为非 null，则指定非法字符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.MaskFormatter.getInvalidCharacters()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回输入无效的字符。

@return 非法字符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.MaskFormatter.setPlaceholder(String placeholder)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置值未完全填充掩码时要使用的字符串。null 值意味着应该使用占位字符。

@param placeholder 值未完全填充掩码的情况下格式化时使用的字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.MaskFormatter.getPlaceholder()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果值未完全填充掩码，则返回要使用的 String。

@return 如果值未完全填充掩码，则返回格式化时使用的 String

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.MaskFormatter.setPlaceholderCharacter(char placeholder)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置一个字符，用来替代值中不存在的字符（即用户必须填充它们）。默认值为一个空格。
 <p>
此方法仅适用于占位符字符串尚未指定，或未完全填充掩码的情况。

@param placeholder 如果值未完全填充掩码，则为格式化时使用的 Character

<!-- END DATA -->
<!-- BEGIN KEY -->
public char javax.swing.text.MaskFormatter.getPlaceholderCharacter()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用来替代值中没有的字符的字符（即用户必须填充它们）。

@return 如果值未完全填充掩码，则返回格式化时使用的 Character

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.MaskFormatter.setValueContainsLiteralCharacters(boolean containsLiteralChars)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果为 true，则返回的值和设置的值还将包含掩码中的字面值字符。
 <p>
例如，如果掩码为 <code>'(###) ###-####'</code>，当前值为 <code>'(415) 555-1212'</code>，且 <code>valueContainsLiteralCharacters</code> 为 true，则 <code>stringToValue</code> 将返回 <code>'(415) 555-1212'</code>。另一方面，如果 <code>valueContainsLiteralCharacters</code> 为 false，则 <code>stringToValue</code> 将返回 <code>'4155551212'</code>。

@param containsLiteralChars 用于指示掩码中的字面值是否应该在 stringToValue 中返回。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.MaskFormatter.getValueContainsLiteralCharacters()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>stringToValue</code> 应该返回掩码中的字面值，则返回 true。

@return 如果掩码中的字面值应该在 stringToValue 中返回，则返回 True

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.text.MaskFormatter.stringToValue(String value) throws java.text.ParseException
<!-- END KEY -->
<!-- BEGIN DATA -->
解析文本，返回 String <code>value</code> 的适当 Object 表示形式。此方法将在必要时将字面值字符分开并调用超类 <code>stringToValue</code>，所以，如果已指定了值类 (<code>setValueClass</code>)，则将创建它的一个实例。如果该值与当前掩码不匹配，这将抛出一个 <code>ParseException</code>。有关如何处理字面值的详细信息，请参阅 {@link #setValueContainsLiteralCharacters}。

@throws ParseException 如果在转换时发生错误
@param value 要转换的字符串
@see #setValueContainsLiteralCharacters
@return 文本的 Object 表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.MaskFormatter.valueToString(Object value) throws java.text.ParseException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回基于掩码的 Object <code>value</code> 的 String 表示形式。有关如何处理字面值的详细信息，请参阅 {@link #setValueContainsLiteralCharacters}。

@throws ParseException 如果在转换时发生错误
@param value 要转换的 Value
@see #setValueContainsLiteralCharacters
@return 值的 String 表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.MaskFormatter.install(JFormattedTextField ftf)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>DefaultFormatter</code> 安装在特定的 <code>JFormattedTextField</code> 上。这将调用 <code>valueToString</code>，将 <code>JFormattedTextField</code> 中的当前值转换为 String。此方法稍后将会把 <code>getActions</code> 返回的 <code>Action</code>、<code>getDocumentFilter</code> 返回的 <code>DocumentFilter</code> 和 <code>getNavigationFilter</code> 返回的 <code>NavigationFilter</code> 安装到 <code>JFormattedTextField</code> 上。
 <p>
如果子类希望在 <code>JFormattedTextField</code> 上安装其他侦听器，则通常只需要重写此方法。
 <p>
如果在将当前值转换为 String 时存在 <code>ParseException</code>，则这会将文本设置为空 String，并将 <code>JFormattedTextField</code> 标记为正处在无效状态。
 <p>
尽管这是一个公共方法，但通常仅供 <code>JFormattedTextField</code> 的子类使用。当值发生更改，或内部状态发生更改时，<code>JFormattedTextField</code> 将在适当的时候调用此方法。

@param ftf 要格式化为的 JFormattedTextField，可以为 null，这指示从当前的 JFormattedTextField 卸载。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.text.MaskFormatter.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建此类的子类，以在默认读取操作完成后更新该掩码的内部表示形式。

<!-- END DATA -->
