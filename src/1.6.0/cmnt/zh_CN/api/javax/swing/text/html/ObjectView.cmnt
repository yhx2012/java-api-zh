<!-- BEGIN KEY -->
public class javax.swing.text.html.ObjectView extends javax.swing.text.ComponentView
<!-- END KEY -->
<!-- BEGIN DATA -->
实现 &lt;object&gt; 元素视图接口的组件装饰符。
 <p>
此视图将尝试加载由 <code>classid</code> 属性指定的类。如有可能，将使用用来加载相关文档的 Classloader。这通常与用于加载 EditorKit 的 ClassLoader 相同。如果文档的 ClassLoader 为 null，将使用 <code>Class.forName</code>。
 <p>
如果可以成功地加载该类，则会尝试通过调用 <code>Class.newInstance</code> 来创建该类的一个实例。通过输入 <code>java.awt.Component</code> 尝试缩小该实例以便显示对象。
 <p>
此视图还可以管理具有某些限制的参数集。期望 &lt;object&gt; 元素的参数以简单的字符串形式出现在相关元素的属性集中。每个 bean 属性都将作为 AttributeSet 的关键字来查询，并期望在属性具有参数规范时显示（类型字符串的）非 null 值。Reflection 将用来设置参数。当前，这仅限于非常简单的类型 String 的单个参数。
 <p>
下面是一个简单的 HTML 调用示例：
 <pre>
      &lt;object classid=&quot;javax.swing.JLabel&quot;&gt;
      &lt;param name=&quot;text&quot; value=&quot;sample text&quot;&gt;
      &lt;/object&gt;
 </pre>

@author Timothy Prinzing
@version 1.13 12/19/03

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.ObjectView(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的 ObjectView 对象。

@param elem 要修饰的元素

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.text.html.ObjectView.createComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建组件。classid 将用作尝试加载的类名称规范。

<!-- END DATA -->
