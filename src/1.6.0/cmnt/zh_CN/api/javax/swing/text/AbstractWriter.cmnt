<!-- BEGIN KEY -->
public abstract class javax.swing.text.AbstractWriter extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
AbstractWriter 是一个抽象类，它实际执行元素树（包括属性）的写出工作。在每行写出的元素数方面，writer 默认值是 100。但是子类可设置此值。

@author Sunita Mani
@version 1.21, 12/19/03

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static final char javax.swing.text.AbstractWriter.NEWLINE
<!-- END KEY -->
<!-- BEGIN DATA -->
text 包模拟新行的方式。
@see #getLineSeparator

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.AbstractWriter(Writer w, Document doc)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的 AbstractWriter。使用默认的文档根初始化 ElementIterator。

@param w  Writer。
@param document  Document。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.AbstractWriter(Writer w, Document doc, int pos, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的 AbstractWriter。使用传入的元素初始化 ElementIterator。

@param w Writer
@param doc Element
@param pos 在文档中获取内容的位置。
@param len 写出量。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.AbstractWriter(Writer w, Element root)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的 AbstractWriter。使用传入的元素初始化 ElementIterator。

@param w Writer
@param root Element

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.AbstractWriter(Writer w, Element root, int pos, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的 AbstractWriter。使用传入的元素初始化 ElementIterator。

@param w Writer
@param root Element
@param pos 在文档中获取内容的位置。
@param len 写出量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AbstractWriter.getStartOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回要输出内容的第一个偏移量。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AbstractWriter.getEndOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
选择要输出内容的最后一个偏移量。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.ElementIterator javax.swing.text.AbstractWriter.getElementIterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 ElementIterator。

@return ElementIterator。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.io.Writer javax.swing.text.AbstractWriter.getWriter()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于输出内容的 Writer。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.Document javax.swing.text.AbstractWriter.getDocument()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取文档。

@return Document。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.AbstractWriter.inRange(Element next)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法确定当前元素是否位于指定的范围内。未指定范围时，则将范围初始化为整个文档。如果指定的范围与该元素的范围相交，则 inRange() 返回 true。

@param  next  Element。
@return 指示元素是否位于该范围的 boolean 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void javax.swing.text.AbstractWriter.write() throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
需要由子类实现此抽象方法。其职责是对元素进行迭代并使用 write() 方法生成所需格式的输出。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.text.AbstractWriter.getText(Element elem) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与该元素关联的文本。此处假定该元素是一个叶元素。遇到错误时抛出 BadLocationException。

@param elem <code>Element</code>
@exception BadLocationException 如果 pos 表示文档内的无效位置
@return <code>String</code> 形式的文本

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.text(Element elem) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写出文本。如果调用构造方法时指定了范围，则只写出相应范围内的文本。

@param elem Element。
@exception IOException 如果发生任何 I/O 错误
@exception BadLocationException 如果 pos 表示文档中的一个无效位置

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.setLineLength(int l)
<!-- END KEY -->
<!-- BEGIN DATA -->
允许子类设置每行上要写入的字符数。默认值是 100。

@param  l 最大行长度。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.AbstractWriter.getLineLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最大行长度。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.setCurrentLineLength(int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置当前行的长度。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.AbstractWriter.getCurrentLineLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前行的长度。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.AbstractWriter.isLineEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果应该将当前行视为空行，则返回 true。已在空行上调用 <code>getCurrentLineLength</code> == 0 || <code>indent</code> 时返回值仍为 true。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.setCanWrapLines(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置是否可以换行。行写入期间可以切换此设置。例如，输出带引号的字符串时，HTML 输出可能将此内容设置为 false。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.AbstractWriter.getCanWrapLines()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回是否可以换行。如果为 false，则不会输出 lineSeparator。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.setIndentSpace(int space)
<!-- END KEY -->
<!-- BEGIN DATA -->
允许子类指定缩进映射为多少空格。进行缩进时，缩进级别乘以此映射关系。默认值是 2。

@param space 表示将缩进映射为多少空格的 int 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.AbstractWriter.getIndentSpace()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回要缩进的空格量。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AbstractWriter.setLineSeparator(String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于表示换行的 String。这是在构造方法中根据 Document 或系统属性 line.separator 来初始化的。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.AbstractWriter.getLineSeparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于表示换行的 String。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.incrIndent()
<!-- END KEY -->
<!-- BEGIN DATA -->
提高缩进级别。如果正在进行的缩进导致 <code>getIndentSpace()</code> *<code>getIndentLevel()</code> 大于 <code>getLineLength()</code>，则不会进行缩进。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.decrIndent()
<!-- END KEY -->
<!-- BEGIN DATA -->
降低缩进级别。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.AbstractWriter.getIndentLevel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前的缩进级别。也就是用调用 <code>incrIndent</code> 的次数减去调用 <code>decrIndent</code> 的次数。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.indent() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
执行缩进。写出的空格数是缩进级别乘以映射关系所映射的空格。如果当前行为空行，则不会进行缩进，所以当前行仍被认为是空行。

@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.write(char ch) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写出字符。调用以 char[] 为参数的 <code>write</code> 方法来实现字符的写出。

@param ch 一个 char。
@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.write(String content) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写出字符串。调用采用 char[] 的 <code>write</code> 方法来实现字符的写出。

@param content String。
@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.writeLineSeparator() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写入行分隔符。这会直接调用 <code>output</code> 并将 <code>lineLength</code> 设置为 0。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.write(char[] chars, int startIndex, int length) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
所有 write 方法都调用到此方法。如果 <code>getCanWrapLines()</code> 返回 false，则将使用不包含 NEWLINE 的每个 <code>chars</code> 序列调用 <code>output</code>，然后调用 <code>writeLineSeparator</code>。另一方面，如果 <code>getCanWrapLines()</code> 返回 true，则根据需要拆分字符串，以便遵守 <code>getLineLength</code>。惟一的例外是，如果当前字符串不包含空白，并且在行长度超过 <code>getLineLength</code> 的情况中无法放入该字符串。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.writeAttributes(AttributeSet attr) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 &quot; <name>=<value>&quot; 对的形式写出属性集。遇到 I/O 错误时抛出 IOException。

@param attr AttributeSet。
@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.output(char[] content, int start, int length) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写出内容过程的最后一步。所有 write 方法最终会被此方法调用，此方法在 Writer 上调用 <code>write</code>。
<p>此方法还根据 <code>length</code> 更新行长度。如果调用此方法来输出新行，则当前行长度因不再有效而需要被重置。如果由调用者决定是否执行此操作，则使用 <code>writeLineSeparator</code> 写出新行，这将正确地更新当前行的长度。

@since 1.3

<!-- END DATA -->
