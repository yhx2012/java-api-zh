<!-- BEGIN KEY -->
public class javax.swing.text.DefaultFormatterFactory extends javax.swing.JFormattedTextField.AbstractFormatterFactory implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>JFormattedTextField.AbstractFormatterFactory</code> 的一个实现。<code>DefaultFormatterFactory</code> 允许指定许多不同的 <code>JFormattedTextField.AbstractFormatter</code> 以供使用。最重要的一个为默认 (<code>setDefaultFormatter</code>)。如果无法找到更专用的 formatter，则使用默认的 formatter。下面的步骤用于确定要使用的适当 formatter。
 <ol>
<li>传入的值是否为 null？使用 null formatter。
<li><code>JFormattedTextField</code> 有焦点吗？使用编辑 formatter。
<li>否则，使用显示 formatter。
<li>如果未发现非 null <code>AbstractFormatter</code>，则使用默认 formatter。
 </ol>
 <p>
下列代码显示如何用两个 <code>JFormattedTextField.AbstractFormatter</code> 配置 <code>JFormattedTextField</code>，一个用于显示，一个用于编辑。
 <pre>
 JFormattedTextField.AbstractFormatter editFormatter = ...;
 JFormattedTextField.AbstractFormatter displayFormatter = ...;
 DefaultFormatterFactory factory = new DefaultFormatterFactory(
                 displayFormatter, displayFormatter, editFormatter);
 JFormattedTextField tf = new JFormattedTextField(factory);
 </pre>
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@see javax.swing.JFormattedTextField

@version 1.8 12/19/03
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.JFormattedTextField.AbstractFormatter javax.swing.text.DefaultFormatterFactory.defaultFormat
<!-- END KEY -->
<!-- BEGIN DATA -->
未指定更专用的 formatter 时，则使用默认 <code>AbstractFormatter</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.JFormattedTextField.AbstractFormatter javax.swing.text.DefaultFormatterFactory.displayFormat
<!-- END KEY -->
<!-- BEGIN DATA -->
用于显示的 <code>JFormattedTextField.AbstractFormatter</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.JFormattedTextField.AbstractFormatter javax.swing.text.DefaultFormatterFactory.editFormat
<!-- END KEY -->
<!-- BEGIN DATA -->
用于编辑的 <code>JFormattedTextField.AbstractFormatter</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.JFormattedTextField.AbstractFormatter javax.swing.text.DefaultFormatterFactory.nullFormat
<!-- END KEY -->
<!-- BEGIN DATA -->
在值为 null 时使用的 <code>JFormattedTextField.AbstractFormatter</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.DefaultFormatterFactory(JFormattedTextField.AbstractFormatter defaultFormat)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定 <code>JFormattedTextField.AbstractFormatter</code> 的 <code>DefaultFormatterFactory</code>。

@param defaultFormat 在未发现更专用的 JFormattedTextField.AbstractFormatter 时使用的 JFormattedTextField.AbstractFormatter。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.DefaultFormatterFactory(JFormattedTextField.AbstractFormatter defaultFormat, JFormattedTextField.AbstractFormatter displayFormat)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定 <code>JFormattedTextField.AbstractFormatter</code> 的 <code>DefaultFormatterFactory</code>。

@param defaultFormat 在未发现更专用的 JFormattedTextField.AbstractFormatter 时使用的 JFormattedTextField.AbstractFormatter。
@param displayFormat 在 JFormattedTextField 没有焦点时使用的 JFormattedTextField.AbstractFormatter。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.DefaultFormatterFactory(JFormattedTextField.AbstractFormatter defaultFormat, JFormattedTextField.AbstractFormatter displayFormat, JFormattedTextField.AbstractFormatter editFormat)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定 JFormattedTextField.AbstractFormatter 的 DefaultFormatterFactory。

@param defaultFormat 在未发现更专用的 JFormattedTextField.AbstractFormatter 时使用的 JFormattedTextField.AbstractFormatter。
@param displayFormat 在 JFormattedTextField 没有焦点时使用的 JFormattedTextField.AbstractFormatter。
@param editFormat    在 JFormattedTextField 拥有焦点时使用的 JFormattedTextField.AbstractFormatter。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.DefaultFormatterFactory(JFormattedTextField.AbstractFormatter defaultFormat, JFormattedTextField.AbstractFormatter displayFormat, JFormattedTextField.AbstractFormatter editFormat, JFormattedTextField.AbstractFormatter nullFormat)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定 JFormattedTextField.AbstractFormatter 的 DefaultFormatterFactory。

@param defaultFormat 在未发现更专用的 JFormattedTextField.AbstractFormatter 时使用的 JFormattedTextField.AbstractFormatter。
@param displayFormat 在 JFormattedTextField 没有焦点时使用的 JFormattedTextField.AbstractFormatter。
@param editFormat    在 JFormattedTextField 拥有焦点时使用的 JFormattedTextField.AbstractFormatter。
@param nullFormat    JFormattedTextField 为 null 值时使用的 JFormattedTextField.AbstractFormatter。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultFormatterFactory.setDefaultFormatter(JFormattedTextField.AbstractFormatter atf)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>JFormattedTextField.AbstractFormatter</code> 供最后选择使用，例如，未指定任何显示、编辑或 null <code>JFormattedTextField.AbstractFormatter</code>。

@param atf 未指定更专用值的情况下使用的 JFormattedTextField.AbstractFormatter 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFormattedTextField.AbstractFormatter javax.swing.text.DefaultFormatterFactory.getDefaultFormatter()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回供最后选择使用的 <code>JFormattedTextField.AbstractFormatter</code>，例如，未指定任何显示、编辑或 null <code>JFormattedTextField.AbstractFormatter</code>。

@return 未指定更专用值的情况下使用的 JFormattedTextField.AbstractFormatter。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultFormatterFactory.setDisplayFormatter(JFormattedTextField.AbstractFormatter atf)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置在不编辑 <code>JFormattedTextField</code> 并且值为非 null 或值虽然为 null 但是未指定 null formatter 的情况下使用的 <code>JFormattedTextField.AbstractFormatter</code>。

@param atf 在 JFormattedTextField 没有焦点时使用的 JFormattedTextField.AbstractFormatter

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFormattedTextField.AbstractFormatter javax.swing.text.DefaultFormatterFactory.getDisplayFormatter()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在不编辑 <code>JFormattedTextField</code> 并且值为非 null 或值虽然为 null 但是未指定 null formatter 的情况下使用的 <code>JFormattedTextField.AbstractFormatter</code>。

@return 在 JFormattedTextField does 没有焦点时使用的 JFormattedTextField.AbstractFormatter 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultFormatterFactory.setEditFormatter(JFormattedTextField.AbstractFormatter atf)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置在编辑 <code>JFormattedTextField</code> 并且值为非 null 或值虽然为 null 但是未指定 null formatter 的情况下使用的 <code>JFormattedTextField.AbstractFormatter</code>。

@param atf 在组件拥有焦点时使用的 JFormattedTextField.AbstractFormatter

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFormattedTextField.AbstractFormatter javax.swing.text.DefaultFormatterFactory.getEditFormatter()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在编辑 <code>JFormattedTextField</code> 并且值为非 null 或值虽然为 null 但是未指定 null formatter 的情况下使用的 <code>JFormattedTextField.AbstractFormatter</code>。

@return 在组件拥有焦点时使用的 JFormattedTextField.AbstractFormatter

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultFormatterFactory.setNullFormatter(JFormattedTextField.AbstractFormatter atf)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置在 JFormattedTextField 值为 null 时使用的 formatter。

@param atf 在 JFormattedTextField 值为 null 时使用的 JFormattedTextField.AbstractFormatter。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFormattedTextField.AbstractFormatter javax.swing.text.DefaultFormatterFactory.getNullFormatter()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回值为 null 时使用的 formatter。

@return 值为 null 时使用的 JFormattedTextField.AbstractFormatter

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFormattedTextField.AbstractFormatter javax.swing.text.DefaultFormatterFactory.getFormatter(JFormattedTextField source)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 JFormattedTextField 的状态返回默认的 formatter、显示 formatter、编辑器 formatter 或 null formatter。

@param source 请求 JFormattedTextField.AbstractFormatter 的 JFormattedTextField
@return 处理格式任务的 JFormattedTextField.AbstractFormatter。

<!-- END DATA -->
