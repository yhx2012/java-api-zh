<!-- BEGIN KEY -->
public class javax.swing.text.html.HTMLWriter extends javax.swing.text.AbstractWriter
<!-- END KEY -->
<!-- BEGIN DATA -->
这是用于 HTMLDocuments 的 writer。

@author  Sunita Mani
@version 1.26, 02/02/00

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.HTMLWriter(Writer w, HTMLDocument doc)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的 HTMLWriter。

@param w Writer
@param doc HTMLDocument


<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.HTMLWriter(Writer w, HTMLDocument doc, int pos, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的 HTMLWriter。

@param w Writer
@param doc HTMLDocument
@param pos 文档位置，从此位置获取内容
@param len 写出量

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLWriter.write() throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
对 Element 树进行迭代并控制所有标记及其属性的写出。

@exception IOException 如果发生任何 I/O 错误
@exception BadLocationException  如果 pos 表示文档中的无效位置。


<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.writeAttributes(AttributeSet attr) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写出属性集。忽略带有类型 HTML.Tag 键的所有属性，带有类型 StyleConstants 键的所有属性，以及带有类型 HTML.Attribute.ENDTAG 键的所有属性。

@param attr  AttributeSet
@exception IOException 如果发生任何 I/O 错误


<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.emptyTag(Element elem) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写出所有空元素（没有对应结束标记的所有标记）。

@param elem  Element
@exception IOException 如果发生任何 I/O 错误
@exception BadLocationException 如果 pos 表示文档中的无效位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.html.HTMLWriter.isBlockTag(AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定与该元素关联的 HTML.Tag 是否为块标记。

@param attr AttributeSet
@return 如果标记是块标记，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.startTag(Element elem) throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
写出元素的开始标记。忽略所有的合成元素。

@param elem Element
@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.textAreaContent(AttributeSet attr) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写出 TEXTAREA 表单元素中所包含的文本。

@param attr AttributeSet
@exception IOException 如果发生任何 I/O 错误
@exception BadLocationException 如果 pos 表示文档中的无效位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.text(Element elem) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写出文本。如果调用构造方法时指定了范围，则只写出相应范围内的文本。

@param elem Element
@exception IOException 如果发生任何 I/O 错误
@exception BadLocationException 如果 pos 表示文档中的无效位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.selectContent(AttributeSet attr) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写出 SELECT 表单元素的内容。
 
@param attr 与表单元素关联的 AttributeSet
@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.writeOption(Option option) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写出 Option 表单元素的内容。
@param option Option
@exception IOException 如果发生任何 I/O 错误
 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.endTag(Element elem) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写出元素的结束标记。

@param elem Element
@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.comment(Element elem) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写出注释。

@param elem Element
@exception IOException 如果发生任何 I/O 错误
@exception BadLocationException 如果 pos 表示文档中的无效位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.html.HTMLWriter.synthesizedElement(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果元素是合成元素，则返回 true。目前我们只测试了 p 暗指的标记。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.html.HTMLWriter.matchNameAttribute(AttributeSet attr, HTML.Tag tag)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 StyleConstants.NameAttribute 与作为参数传入的标记相同，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.writeEmbeddedTags(AttributeSet attr) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
搜索 AttributeSet 中的嵌入式标记并写出它们。它还将这些标记存储在一个向量中，以便在适当的时候能够写出对应的结束标记。

@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.closeOutUnwantedEmbeddedTags(AttributeSet attr) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
搜索属性集和存储在标记向量中的每个标记。如果未找到标记，则从向量中移除标记并写出对应的结束标记。

@exception IOException 如果发生任何 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.writeLineSeparator() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写出行分隔符。当它不是标准的 ascii 时，我们重写它以确保不替换新行内容。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.output(char[] chars, int start, int length) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
重写此方法来映射任何字符实体，例如 &lt; 映射到 &lt;。调用 <code>super.output</code> 可写出内容。
@since 1.3

<!-- END DATA -->
