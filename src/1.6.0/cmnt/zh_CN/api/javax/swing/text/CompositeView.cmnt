<!-- BEGIN KEY -->
public abstract class javax.swing.text.CompositeView extends javax.swing.text.View
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>CompositeView</code> 是一个管理着一个或多个子视图的抽象 <code>View</code> 实现。（注意，<code>CompositeView</code> 主要管理相对较少的子视图。）<code>CompositeView</code> 主要充当 <code>View</code> 实现的起点，例如 <code>BoxView</code>，它将包含子 <code>View</code>。要管理子 <code>View</code> 集的子类应使用 {@link #replace} 方法。由于 <code>View</code> 在 <code>DocumentListener</code> 通知过程中调用 <code>replace</code>，所以通常不需要直接调用 <code>replace</code>。

<p>虽然 <code>CompositeView</code> 不会对其子 <code>View</code> 施加布局策略，但它允许插入将包含的子 <code>View</code>。插入内容可通过 {@link #setInsets} 或 {@link #setParagraphInsets} 进行设置。

<p>除了 {@link javax.swing.text.View} 的抽象方法之外，<code>CompositeView</code> 的子类还需要重写：
 <ul>
<li>{@link #isBefore} - 用于测试给定的 <code>View</code> 位置是否位于 <code>CompositeView</code> 的可视空间之前。
<li>{@link #isAfter} - 用于测试给定的 <code>View</code> 位置是否位于 <code>CompositeView</code> 的可视空间之后。
<li>{@link #getViewAtPoint} - 返回位于给定可视位置的视图。
<li>{@link #childAllocation} - 返回特定子 <code>View</code> 的边界。<code>getChildAllocation</code> 在其边界减去 <code>CompositeView</code> 的 <code>Inset</code> 之后，将调用 <code>childAllocation</code>。
 </ul>

@author  Timothy Prinzing
@version 1.67 12/19/03

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.CompositeView(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
为给定元素构造一个 <code>CompositeView</code>。

@param elem  此视图负责的元素

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.CompositeView.loadChildren(ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
加载所有的子级以初始化该视图。它由 {@link #setParent} 方法调用。子类可重新实现它以便按不同的方式初始化其子视图。默认实现为每个子元素创建一个子视图。

@param f 视图工厂
@see #setParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.CompositeView.setParent(View parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此视图的父级。重新实现此方法可提供超类行为，并可在此视图无子级的情况下调用 <code>loadChildren</code> 方法。不应在构造方法中加载子级，因为设置父级的动作可能引起它们试图沿层次结构向上搜索，例如，要获得承载 <code>Container</code>。如果此视图有子级（视图从视图层次结构中的一个位置移动到另一个位置），则不调用 <code>loadChildren</code> 方法。

@param parent 视图的父级，如果没有则为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.CompositeView.getViewCount()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此视图的子视图数。

@return 视图数，该数量 &gt;= 0
@see #getView

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.View javax.swing.text.CompositeView.getView(int n)
<!-- END KEY -->
<!-- BEGIN DATA -->

返回该容器中的第 n 个视图。

@param n 需要的视图数量，该数量 &gt;= 0 且 &lt; getViewCount()
@return 索引为 <code>n</code> 的视图

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.CompositeView.replace(int offset, int length, javax.swing.text.View[] views)
<!-- END KEY -->
<!-- BEGIN DATA -->
替换子视图。如果没有要移除的视图，此方法视为插入操作。如果没有要添加的视图，此方法视为移除操作。被移除的视图的父级将被设置为 <code>null</code>，并且移除了对它们的内部引用，所以它们有可能被作为垃圾回收。

@param offset 要插入新视图的子视图的起始索引；该索引 &gt;= 0 且 &lt;= getViewCount
@param length 要移除的现有子视图数；此值应 &gt;= 0 且 &lt;= (getViewCount() - offset)
@param views 要添加的子视图；此值可以为 <code>null</code>，表示不添加任何子级（对移除有用）

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Shape javax.swing.text.CompositeView.getChildAllocation(int index, Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取要在其中呈现的给定子视图的分配区域。这有助于获得各个视图所处的位置。

@param index 子级的索引，该索引 &gt;= 0 且 &lt; getViewCount()
@param a  对此视图的分配区域
@return 子级的分配区域

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Shape javax.swing.text.CompositeView.modelToView(int pos, Shape a, Position.Bias b) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
提供从文档模型坐标空间到所映射的视图坐标空间的映射。

@param pos 要转换的位置，该位置 &gt;= 0
@param a 要在其中呈现的已分配区域
@param b 一个偏移值，可以是 <code>Position.Bias.Forward</code> 或 <code>Position.Bias.Backward</code>
@return 给定位置的边界框
@exception BadLocationException  如果给定位置不是相关文档中的有效位置
@see View#modelToView

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Shape javax.swing.text.CompositeView.modelToView(int p0, Position.Bias b0, int p1, Position.Bias b1, Shape a) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
提供从文档模型坐标空间到所映射的视图坐标空间的映射。

@param p0 要转换的位置，该位置 &gt;= 0
@param b0 由 p0 表示的上一字符或下一个字符的偏移量，在这种情况下，该位置是两个视图的边界；既可以是 <code>Position.Bias.Forward</code>，也可以是 <code>Position.Bias.Backward</code>
@param p1 要转换的位置，该位置 &gt;= 0
@param b1 由 p1 表示的上一字符或下一个字符的偏移量，在这种情况下，该位置是两个视图的边界；
@param a 要呈现的已分配区域
@return 返回给定位置的边界框
@exception BadLocationException  如果给定位置不是相关文档中的有效位置
@exception IllegalArgumentException 如果为无效的偏移量参数
@see View#viewToModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.CompositeView.viewToModel(float x, float y, Shape a, javax.swing.text.Position.Bias[] bias)
<!-- END KEY -->
<!-- BEGIN DATA -->
提供从视图坐标空间到模型的逻辑坐标空间的映射。

@param x   要转换的视图位置的 x 坐标，该坐标 &gt;= 0
@param y   要转换的视图位置的 y 坐标，该坐标 &gt;= 0
@param a 要呈现的已分配区域
@param bias 可以是 <code>Position.Bias.Forward</code> 或 <code>Position.Bias.Backward</code>
@return 模型中最能代表视图中给定点的位置，该位置 &gt;= 0
@see View#viewToModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.CompositeView.getNextVisualPositionFrom(int pos, Position.Bias b, Shape a, int direction, javax.swing.text.Position.Bias[] biasRet) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
提供一种方法来确定下一个以可视化形式表示的模型位置，用户可以在此位置放置一个插入符。有些视图可能不可见，它们可能与该模型中发现的顺序不同，或它们可能只是不允许访问该模型中的某些位置。这是一个适用于 {@link #getNextNorthSouthVisualPositionFrom} 和 {@link #getNextEastWestVisualPositionFrom} 的便捷方法。

@param pos 要转换的位置，该位置 &gt;= 0
@param b 偏移量值，可以是 <code>Position.Bias.Forward</code> 或 <code>Position.Bias.Backward</code>
@param a 要呈现的已分配区域
@param direction 相对当前位置的方向，通常可视为键盘上看到的方向键；它可能为下列值之一： 
  <ul>
  <li><code>SwingConstants.WEST</code>
  <li><code>SwingConstants.EAST</code> 
  <li><code>SwingConstants.NORTH</code>
  <li><code>SwingConstants.SOUTH</code>  
  </ul>
@param biasRet 一个包含已检查偏移量的数组
@return 模型中最能代表下一个可视位置的位置
@exception BadLocationException
@exception IllegalArgumentException 如果 <code>direction</code> 无效

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.CompositeView.getViewIndex(int pos, Position.Bias b)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示模型中给定位置的子视图索引。实现此方法可调用 <code>getViewIndexByPosition</code> 方法以便向后兼容。

@param pos 位置，该位置 &gt;= 0
@return 表示给定位置的视图的索引，如果没有视图表示该位置，则返回 -1
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract boolean javax.swing.text.CompositeView.isBefore(int x, int y, Rectangle alloc)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试一个点是否位于矩形范围之前。

@param x X 坐标，该坐标 &gt;= 0
@param y Y 坐标，该坐标 &gt;= 0
@param alloc 矩形
@return 如果该点位于指定范围之前，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract boolean javax.swing.text.CompositeView.isAfter(int x, int y, Rectangle alloc)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试一个点是否位于矩形范围之后。

@param x X 坐标，该坐标 &gt;= 0
@param y Y 坐标，该坐标 &gt;= 0
@param alloc 矩形
@return 如果该点位于指定范围之后，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract javax.swing.text.View javax.swing.text.CompositeView.getViewAtPoint(int x, int y, Rectangle alloc)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取位于给定坐标的子视图。

@param x X 坐标，该坐标 &gt;= 0
@param y Y 坐标，该坐标 &gt;= 0
@param alloc 入口处父级的分配区域，出口处应改为子级的分配区域
@return 子视图

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void javax.swing.text.CompositeView.childAllocation(int index, Rectangle a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定子级的分配区域。

@param index 子级的索引，该索引 &gt;= 0 且 &lt; getViewCount()
@param a  入口处框内部的分配区域，和出口索引处的子视图分配区域。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.View javax.swing.text.CompositeView.getViewAtPosition(int pos, Rectangle a)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取表示模型中给定位置的子视图。实现此方法，以便在每个子元素都有一个子视图的情况下获取视图。

@param pos 位置，该位置 &gt;= 0
@param a  入口处框内部的分配区域，出口处包含此位置的视图分配区域
@return  表示给定位置的视图，如果没有视图，则为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.CompositeView.getViewIndexAtPosition(int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取表示模型中给定位置的子视图索引。实现此方法，以便在每个子元素都有一个子视图的情况下获取视图。

@param pos 位置，该位置 &gt;= 0
@return 表示给定位置的视图的索引，如果没有视图表示该位置，则返回 -1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.text.CompositeView.getInsideAllocation(Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
将分配给视图的不可变分配区域转换为表示内部分配区域的可变分配区域（即给定分配区域的边界，其顶部、左部、底部和右部的 insets 已移除）。返回值需要进一步改变以表示子视图的分配区域。实现此方法可重用一个实例变量，这样可避免创建太多的矩形。通常调用此方法的结果将传给 <code>childAllocation</code> 方法。

@param a 分配给视图的分配区域
@return 表示视图边界空白全部移除后的内部分配区域；如果给定分配区域为 <code>null</code>，则返回值为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.CompositeView.setParagraphInsets(AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
按照给定属性中指定的段落属性设置 insets。

@param attr 属性

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.CompositeView.setInsets(short top, short left, short bottom, short right)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置视图的 insets。

@param top 顶部 inset，该值 &gt;= 0
@param left 左部 inset，该值 &gt;= 0
@param bottom 底部 inset，该值 &gt;= 0
@param right 右部 inset，该值 &gt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected short javax.swing.text.CompositeView.getLeftInset()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取左部 inset。

@return inset，该值 &gt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected short javax.swing.text.CompositeView.getRightInset()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取右部 inset。

@return inset，该值 &gt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected short javax.swing.text.CompositeView.getTopInset()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取顶部 inset。

@return inset，该值 &gt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected short javax.swing.text.CompositeView.getBottomInset()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取底部 inset。

@return inset，该值 &gt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.CompositeView.getNextNorthSouthVisualPositionFrom(int pos, Position.Bias b, Shape a, int direction, javax.swing.text.Position.Bias[] biasRet) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回光标的下一个可视位置，可以在北也可以在南。

@param pos 要转换的位置，该位置 &gt;= 0
@param b 偏移量值，可以是 <code>Position.Bias.Forward</code> 或 <code>Position.Bias.Backward</code>
@param a 要呈现的已分配区域
@param direction 相对当前位置的方向，通常可视为键盘上看到的方向键；它可能为下列值之一：
  <ul>
  <li><code>SwingConstants.NORTH</code>
  <li><code>SwingConstants.SOUTH</code>
  </ul>
@param biasRet 一个包含已检查偏移量的数组
@return 模型中最能代表下一个向北或向南的位置
@exception BadLocationException
@exception IllegalArgumentException 如果 <code>direction</code> 无效
@see #getNextVisualPositionFrom

@return 传入位置处西方下一个位置

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.CompositeView.getNextEastWestVisualPositionFrom(int pos, Position.Bias b, Shape a, int direction, javax.swing.text.Position.Bias[] biasRet) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回光标的下一个可视位置，可以在东或在西。

@param pos 要转换的位置，该位置 &gt;= 0
@param b 偏移量值，可以是 <code>Position.Bias.Forward</code> 或 <code>Position.Bias.Backward</code>
@param a 要呈现的已分配区域
@param direction 相对当前位置的方向，通常可视为键盘上看到的方向键；它可能为下列值之一：
  <ul>
  <li><code>SwingConstants.WEST</code>
  <li><code>SwingConstants.EAST</code>
  </ul>
@param biasRet 一个包含已检查偏移量的数组
@return 模型中最能代表下一个向西或向东的位置
@exception BadLocationException
@exception IllegalArgumentException 如果 <code>direction</code> 无效
@see #getNextVisualPositionFrom

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.CompositeView.flipEastAndWestAtEnds(int position, Position.Bias bias)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定下一个视图放置的朝向。假定 <code>View</code> 位于索引 n 处，通常 <code>View</code> 是从左向右放置的，所以在东面的 <code>View</code> 将位于索引 n + 1 处，在西面的 <code>View</code> 将位于索引 n - 1 处。在某些情况下（例如双向文本中）有可能东面的 <code>View</code> 不是位于 n + 1 处，而是位于 n - 1 处，或者西面的 <code>View</code> 不是位于 n - 1 处，而是位于索引 n + 1 处。这种情况下，该方法将返回 true，指示 <code>View</code> 按降序放置。
 <p>
它无条件返回 false，如果有可能需要按降序放置 <code>View</code>，则子类应重写此方法。

@param position 模型中的位置
@param bias 可以是 <code>Position.Bias.Forward</code> 或 <code>Position.Bias.Backward</code>
@return false

<!-- END DATA -->
