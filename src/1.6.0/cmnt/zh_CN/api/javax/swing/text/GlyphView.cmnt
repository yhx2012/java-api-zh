<!-- BEGIN KEY -->
public class javax.swing.text.GlyphView extends javax.swing.text.View implements javax.swing.text.TabableView, java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
GlyphView 是一个样式化文本存储块，它表示在文本模型中的元素上映射的视图。此视图通常负责以某种方式使用字符级别属性显示文本字形。GlyphPainter 类的实现用于进行实际呈现和模型/视图转换。此操作分别呈现与该模型关联的布局和管理。
 <p>
该视图支持为了格式化而进行的分解。通过分解产生的片段共享对元素负主要负责的视图（即它们是嵌套的类，只有其自身少量的状态），因此它们可以共享其资源。
 <p>
因为此视图表示可以有嵌入其中的选项卡的文本，所以可实现 <code>TabableView</code> 接口。只有此视图嵌入进行选项卡扩展的容器时，才扩展选项卡。ParagraphView 是一个包含进行选项卡扩展的容器的示例。
 <p>

@since 1.3

@author  Timothy Prinzing
@version 1.36 05/26/04

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.GlyphView(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造在元素上包装的新视图。

@param elem 元素

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.lang.Object javax.swing.text.GlyphView.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个浅表复制。这由 createFragment 和 breakView 方法使用。

@return 复制

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.GlyphView.GlyphPainter javax.swing.text.GlyphView.getGlyphPainter()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取当前安装的字形 painter。如果尚未安装 painter，且尚不需要默认，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.GlyphView.setGlyphPainter(GlyphView.GlyphPainter p)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于呈现字形的 painter。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Segment javax.swing.text.GlyphView.getText(int p0, int p1)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取对占用给定范围的文本的引用。这通常由 GlyphPainter 使用，以确定它应该呈现哪些字符的字形。

@param p0  起始文档偏移量，该值 &gt;= 0
@param p1  结束文档偏移量，该值 &gt;= p0
@return    包含文本的 <code>Segment</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.text.GlyphView.getBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取用于呈现字形的背景色。如果不存在背景色，则应该返回 null。如果相关文档是样式化文档，则实现此方法以调用 <code>StyledDocument.getBackground</code>，否则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.text.GlyphView.getForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取用于呈现字形的前景色。如果没有前景色，则应返回 null。如果相关文档是一个 StyledDocument，则实现此方法可调用 <code>StyledDocument.getBackground</code>。如果相关文档不是一个 StyledDocument，则使用相关组件的前景色。如果没有相关组件，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font javax.swing.text.GlyphView.getFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取字形应该以其为依据的字体。如果相关文档是一个 StyledDocument，则实现此方法可调用 <code>StyledDocument.getFont</code>。如果相关文档不是一个 StyledDocument，则使用相关组件的字体。如果没有相关组件，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.GlyphView.isUnderline()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定字形是否应加下划线。如果为 true，则应通过基线绘制下划线。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.GlyphView.isStrikeThrough()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定字形是否应该有删除线。如果为 true，则应穿过字形中心划一条线。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.GlyphView.isSubscript()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定字形是否应该呈现为上标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.GlyphView.isSuperscript()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定字形是否应该呈现为下标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.TabExpander javax.swing.text.GlyphView.getTabExpander()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此视图中存在选项卡，则获取要使用的 TabExpander。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.GlyphView.checkPainter()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查是否存在字形 painter。如果不存在 painter，则安装默认的字形 painter。  

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.GlyphView.getTabbedSpan(float x, TabExpander e)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定使用给定选项卡扩展实现时所需的区域。  

@param x 为进行选项卡扩展该视图所在的位置，该位置 &gt;= 0。
@param e 遇到选项卡时对其进行扩展的方法。
@return 所需的区域，该区域 &gt;= 0
@see TabableView#getTabbedSpan

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.GlyphView.getPartialSpan(int p0, int p1)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定沿与选项卡扩展同轴的区域是否为该视图的一部分。这专门由 TabExpander 使用，用于选项卡扩展涉及的相对于 tab stop 来说没有空白的文本部分对齐的情况。因此，可假定给定的范围不包含选项卡。
 <p>
使用 getTabbedSpan 或 getPreferredSize 时可以调用此方法。它必须安排自己的文本缓冲区来进行测量。

@param p0 起始文档偏移量，该偏移量 &gt;= 0
@param p1 结束文档偏移量，该偏移量 &gt;= p0
@return 区域，该区域 &gt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.GlyphView.getStartOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此视图负责的一部分模型。

@return 模型中的起始偏移量
@see View#getStartOffset

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.GlyphView.getEndOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此视图负责的一部分模型。

@return 模型中的结束偏移量
@see View#getEndOffset

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.GlyphView.paint(Graphics g, Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
呈现一部分运行的文本样式。

@param g 要使用的呈现表面
@param a 已分配的呈现区域

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.GlyphView.getPreferredSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此视图沿某个轴的首选区域。 

@param axis 可以是 View.X_AXIS 或 View.Y_AXIS
@return   视图可能要在其中呈现的区域，该区域 &gt;= 0。通常会告知该视图在返回的区域中呈现，但不保证一定如此。父级可选择重新调整视图大小或拆分视图。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.GlyphView.getAlignment(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此视图沿某个轴所需的对齐方式。对于标签，该对齐方式是让字体基线沿 y 轴对齐，而超类是沿 x 轴对齐方式。

@param axis 可以是 View.X_AXIS 或 View.Y_AXIS
@return 需要的对齐方式。这应是 0.0 和 1.0 之间的值，其中 0.0 指示原点对齐，1.0 指示原点以外的整个区域对齐。0.5 对齐方式指视图的中心。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Shape javax.swing.text.GlyphView.modelToView(int pos, Shape a, Position.Bias b) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
提供从文档模型坐标空间到所映射的视图坐标空间的映射。

@param pos 要转换的位置，该位置 &gt;= 0
@param a   要呈现的分配区域
@param b   可以是 <code>Position.Bias.Forward</code>，也可以是 <code>Position.Bias.Backward</code>
@return 给定位置的边界框
@exception BadLocationException  如果给定位置不表示相关文档中的有效位置
@see View#modelToView

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.GlyphView.viewToModel(float x, float y, Shape a, javax.swing.text.Position.Bias[] biasReturn)
<!-- END KEY -->
<!-- BEGIN DATA -->
提供从视图坐标空间到模型逻辑坐标空间的映射。

@param x X 坐标，该坐标 &gt;= 0
@param y Y 坐标，该坐标 &gt;= 0
@param a 要在其中呈现的分配区域
@param biasReturn 将 <code>Position.Bias.Forward</code> 或 <code>Position.Bias.Backward</code> 作为此数组中的第零个元素返回
@return 模型中最能表示视图给定点的位置，该位置 &gt;= 0
@see View#viewToModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.GlyphView.getBreakWeight(int axis, float pos, float len)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此视图拆分几率有多大。这可用于确定在格式化进程中最有可能调用 <code>breakView</code> 的视图。权重越高，拆分的可能性越大。如果值等于或小于 <code>View.BadBreakWeight</code>，则不应考虑拆分。值大于或等于 <code>View.ForcedBreakWeight</code> 时应该拆分视图。
 <p>
实现此方法以转发到 Y_AXIS 的超类。沿 X_AXIS 可以返回以下值。
 <dl>
 <dt><b>View.ExcellentBreakWeight</b>
<dd>如果有空白占据着所需的拆分位置。  
 <dt><b>View.BadBreakWeight</b>
<dd>如果所需的拆分位置导致了拆分位置的起始偏移量。
 <dt><b>View.GoodBreakWeight</b>
<dd>如果不出现其他情况。
 </dl>
如果能够找到空白位置，则通常会导致在空白位置处的拆分行为，否则会在字符之间拆分。

@param axis 可以是 View.X_AXIS，也可以是 View.Y_AXIS
@param pos 已拆分视图的潜在起始位置，该位置 &gt;= 0。这可能对计算选项卡的位置有用。
@param len 指定到所需的潜在拆分处 <em>pos</em> 的相对长度，该长度 &gt;= 0。
@return  View.ForcedBreakWeight 和 View.BadBreakWeight 之间的一个权重值
@see LabelView
@see ParagraphView
@see View#BadBreakWeight
@see View#GoodBreakWeight
@see View#ExcellentBreakWeight
@see View#ForcedBreakWeight

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.View javax.swing.text.GlyphView.breakView(int axis, int p0, float pos, float len)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定的轴上以给定的长度拆分此视图。实现此方法，以便尝试在空白位置处拆分，并在结束处返回一个带有空白的片段。如果找不到空白位置，则使用最靠近的字符。

@param axis 可以是 View.X_AXIS，也可以是 View.Y_AXIS
@param p0 模型中片段应该开始其表示形式的位置，该位置 &gt;= 0。
@param pos 沿已拆分视图可能占用的轴的位置，该位置 &gt;= 0。这可能对诸如选项卡计算一类的情况很有用。
@param len 指定的沿需要潜在拆分的轴的距离，该距离 &gt;= 0。
@return 如果视图可以拆分，则返回表示给定区域的视图片段。如果视图不支持拆分行为，则返回视图自身。
@see View#breakView

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.View javax.swing.text.GlyphView.createFragment(int p0, int p1)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建表示元素某部分的视图。此方法可能在测量视图片段的格式化操作期间有用。如果视图不支持分段（默认），则返回其自身。  
 <p>
此视图确实支持分段。实现此方法以返回一个嵌套类，该类共享在此视图中只表示该视图的某一部分的状态。

@param p0 起始偏移量，该偏移量 &gt;= 0。此值应该大于或等于元素起始偏移量且小于元素结束偏移量。
@param p1 结束偏移量，该偏移量 &gt; p0。这应该是一个小于或等于元素结束偏移量且大于元素起始偏移量的值。
@return 视图片段，如果视图不支持片段拆分，则返回其自身
@see LabelView

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.GlyphView.getNextVisualPositionFrom(int pos, Position.Bias b, Shape a, int direction, javax.swing.text.Position.Bias[] biasRet) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
提供一种方法来确定下一个以可视化形式表示的模型位置，用户可以在此位置放置一个插入符。有些视图可能不可见，它们可能与该模型中发现的顺序不同，或它们可能只是不允许访问该模型中的某些位置。

@param pos 要转换的位置，该位置 &gt;= 0
@param a 要呈现的分配区域
@param direction 相对当前位置的方向，可视为通常在键盘上看到的箭头键方向。此方向可以是 SwingConstants.WEST、SwingConstants.EAST、SwingConstants.NORTH 或 SwingConstants.SOUTH。
@return 模型中最能表示下一个可视位置的位置。
@exception BadLocationException
@exception IllegalArgumentException 如果方向无效

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.GlyphView.insertUpdate(DocumentEvent e, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
发出通知，通知文档中此视图负责的位置已插入内容。实现此方法，以便沿呈现字形的轴调用 preferenceChanged。

@param e 来自相关文档的更改信息
@param a 视图的当前分配区域
@param f 用于重建的工厂（如果该视图有子级）
@see View#insertUpdate

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.GlyphView.removeUpdate(DocumentEvent e, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
发出通知，通知文档中此视图负责的位置已移除内容。实现此方法，以便沿呈现字形的轴调用 preferenceChanged。

@param e 来自相关文档的更改信息
@param a 视图的当前分配区域
@param f 用于重建的工厂（如果该视图有子级）
@see View#removeUpdate

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.GlyphView.changedUpdate(DocumentEvent e, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
发出通知，通知文档此视图负责的位置处的属性已更改。实现此方法，以便沿水平轴和垂直轴调用 preferenceChanged。

@param e 来自相关文档的更改信息
@param a 视图的当前分配区域
@param f 用于重建的工厂（如果该视图有子级）
@see View#changedUpdate

<!-- END DATA -->
