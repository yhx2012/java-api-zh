<!-- BEGIN KEY -->
public class javax.swing.text.InternationalFormatter extends javax.swing.text.DefaultFormatter
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>InternationalFormatter</code> 扩展 <code>DefaultFormatter</code>，使用 <code>java.text.Format</code> 的实例处理往返于 String 的转换。
 <p>
如果 <code>getAllowsInvalid()</code> 为 false，这将要求 <code>Format</code> 在每次编辑时格式化当前文本。
 <p>
可以通过 <code>setMinimum</code> 和 <code>setMaximum</code> 方法指定最小值和最大值。为使此值生效，必须比较 <code>stringToValue</code> 返回的值和通过 <code>Comparable</code> 接口得到的最小值/最大值。
 <p>
配置 <code>Format</code> 和 <code>InternationalFormatter</code> 时一定要仔细，因为有可能造成某些值无法输入的情形。假定日期格式 'M/d/yy'（一种由 <code>setAllowsInvalid(false)</code> 决定总是有效的 <code>InternationalFormatter</code>）处于改写模式 (<code>setOverwriteMode(true)</code>) 且日期为 7/1/99。在此情况下，用户将不能输入两位数月份或某月的两位数日期。要避免此现象，该格式应该为 'MM/dd/yy'。
 <p>
如果 <code>InternationalFormatter</code> 配置为只允许有效值 (<code>setAllowsInvalid(false)</code>)，则每次有效编辑都会导致 <code>JFormattedTextField</code> 的文本根据 <code>Format</code> 全部重新设置。光标位置也将随着对结果 String 的字面值字符的添加/删除而调整。
 <p>
<code>InternationalFormatter</code> 的 <code>stringToValue</code> 行为与 <code>DefaultTextFormatter</code> 稍有不同，它可以执行以下操作：
 <ol>
<li>在 <code>setFormat</code> 指定的 <code>Format</code> 上调用 <code>parseObject</code>
<li>如果针对一些值设置了某个 Class (<code>setValueClass</code>)，则会调用超类实现，以便将 <code>parseObject</code> 返回的值转换为适当的类。
<li>如果尚未抛出 <code>ParseException</code>，并且该值不在最小值/最大值之间，则抛出 <code>ParseException</code>。
<li>返回该值。
 </ol>
<code>InternationalFormatter</code> 以此方式实现 <code>stringToValue</code>，所以可以指定一个 <code>Format</code> 可能返回的替代 Class。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@see java.text.Format
@see java.lang.Comparable

@version 1.7 04/09/01
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.text.Format javax.swing.text.InternationalFormatter.format
<!-- END KEY -->
<!-- BEGIN DATA -->
用于处理转换的对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Comparable javax.swing.text.InternationalFormatter.max
<!-- END KEY -->
<!-- BEGIN DATA -->
可用于对最大值产生影响。

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Comparable javax.swing.text.InternationalFormatter.min
<!-- END KEY -->
<!-- BEGIN DATA -->
可用于对最小值产生影响。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.InternationalFormatter()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个不带指定 <code>Format</code> 的 <code>InternationalFormatter</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.InternationalFormatter(Format format)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定 <code>Format</code> 实例的 <code>InternationalFormatter</code>。

@param format 用于往返于 String 转换的 Format 实例

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.InternationalFormatter.setFormat(Format format)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置指示可以编辑和显示的合法值的格式。

@param format 用于往返 String 转换的 <code>Format</code> 实例

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.Format javax.swing.text.InternationalFormatter.getFormat()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指示可以编辑和显示的合法值的格式。

@return 用于往返 String 转换的 Format 实例

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.InternationalFormatter.setMinimum(java.lang.Comparable minimum)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置最小允许值。如果尚未指定 <code>valueClass</code>，且 <code>minimum</code> 为非 null，则 <code>valueClass</code> 将被设置为 <code>minimum</code> 类的值类。

@param minimum 可以输入的最小合法值
@see #setValueClass

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Comparable javax.swing.text.InternationalFormatter.getMinimum()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最小允许值。

@return 可以输入的最小合法值

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.InternationalFormatter.setMaximum(java.lang.Comparable max)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置最大允许值。如果尚未指定 <code>valueClass</code>，且 <code>max</code> 为非 null，则将 <code>valueClass</code> 设置为 <code>max</code> 类的值。

@param max 可以输入的最大合法值
@see #setValueClass

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Comparable javax.swing.text.InternationalFormatter.getMaximum()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最大允许值。

@return 可以输入的最大合法值

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.InternationalFormatter.install(JFormattedTextField ftf)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>DefaultFormatter</code> 安装到特定的 <code>JFormattedTextField</code> 上。这将调用 <code>valueToString</code>，将 <code>JFormattedTextField</code> 中的当前值转换为 String。此方法稍后将会将 <code>getActions</code> 返回的 <code>Action</code>、<code>getDocumentFilter</code> 返回的 <code>DocumentFilter</code> 和 <code>getNavigationFilter</code> 返回的 <code>NavigationFilter</code> 安装到 <code>JFormattedTextField</code> 上。
 <p>
如果子类希望在 <code>JFormattedTextField</code> 上安装其他侦听器，则通常只需要重写此方法。
 <p>
如果在将当前值转换为 String 时存在 <code>ParseException</code>，则这会将文本设置为空 String，并将 <code>JFormattedTextField</code> 标记为正处在无效状态。
 <p>
尽管这是一个公共方法，但通常仅供 <code>JFormattedTextField</code> 的子类使用。当值发生更改，或内部状态发生更改时，<code>JFormattedTextField</code> 将在适当的时候调用此方法。

@param ftf 要格式化的 JFormattedTextField，可能为 null，指示未从当前的 JFormattedTextField 安装。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.InternationalFormatter.valueToString(Object value) throws java.text.ParseException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Object <code>value</code> 的 String 表示形式。此方法会在当前 <code>Format</code> 上调用 <code>format</code>。

@throws ParseException 如果在转换时发生错误
@param value 要转换的值
@return 值的 String 表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.text.InternationalFormatter.stringToValue(String text) throws java.text.ParseException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>String</code> <code>text</code> 的 <code>Object</code> 表示形式。

@param text 要转换的 <code>String</code>
@return 文本的 <code>Object</code> 表示形式
@throws ParseException 如果转换时发生错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.Format.Field[] javax.swing.text.InternationalFormatter.getFields(int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与 <code>offset</code> 处的文本相关的 <code>Format.Field</code> 常量。如果 <code>offset</code> 不是当前文本中的有效位置，这将返回一个空数组。

@param offset 要检查文本的偏移量
@return 与给定位置的文本相关的 Format.Field 常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.text.InternationalFormatter.clone() throws java.lang.CloneNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建该 DefaultFormatter 的一个副本。

@return  DefaultFormatter 的副本

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.Action[] javax.swing.text.InternationalFormatter.getActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>getSupportsIncrement</code> 返回 true，则这将返回两个适合增加/减少该值的 Action。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.text.InternationalFormatter.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建此类的子类，以在默认读取操作完成后更新该掩码的内部表示形式。

<!-- END DATA -->
