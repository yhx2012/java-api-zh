<!-- BEGIN KEY -->
public class javax.swing.text.DefaultEditorKit extends javax.swing.text.EditorKit
<!-- END KEY -->
<!-- BEGIN DATA -->
这是文本组件使编辑器对某些<em>类型</em> 的文本文档合理发挥其作用所需的实现集合。此实现提供了一个默认实现，该默认实现把文本当作纯文本，并提供简单编辑器的最小操作集合。
 <p>
 <dl>
<dt><b><font size=+1>换行</font></b>
 <dd>
有两个属性负责处理换行。系统属性 <code>line.separator</code>，它的定义是和平台相关的，可以是 &quot;\n&quot;、&quot;\r&quot; 或 &quot;\r\n&quot;。还有一个属性，它是在 <code>DefaultEditorKit</code> 中定义的，名称为 <a href=#EndOfLineStringProperty><code>EndOfLineStringProperty</code></a>，它是在文档加载时自动定义的，定义为第一个出现的任意换行符。加载文档后，将会适当地设置 <code>EndOfLineStringProperty</code>，当文档被写回时，将用到 <code>EndOfLineStringProperty</code>。但是当文档在内存中时，无论文档在磁盘上如何定义换行，现在都将用 &quot;\n&quot; 字符定义换行。因此，为便于搜索，要经常使用 &quot;\n&quot;。当创建了新文档而 <code>EndOfLineStringProperty</code> 尚未定义时，写入文档将使用 System 属性。
<p>注意，在 <code>Document</code> 上使用 <code>get/setProperty</code> 方法设置 <code>EndOfLineStringProperty</code>。子类可重写此行为。

 </dl>

@author  Timothy Prinzing
@version 1.67 12/19/03

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.EndOfLineStringProperty
<!-- END KEY -->
<!-- BEGIN DATA -->
在读取文档时，如果遇到 CRLF，将添加具有此名称的一个属性，属性值为 &quot;\r\n&quot;。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.insertContentAction
<!-- END KEY -->
<!-- BEGIN DATA -->
将内容置于关联文档中的动作名称。如果存在选定内容，则在添加新内容之前将移除这些选定内容。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.insertBreakAction
<!-- END KEY -->
<!-- BEGIN DATA -->
向文档放置行/段中断的动作名称。如果存在选定内容，则在添加中断之前将移除这些选定内容。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.insertTabAction
<!-- END KEY -->
<!-- BEGIN DATA -->
将制表符置于文档中的动作名称。如果存在选定内容，则在添加制表符之前将移除这些选定内容。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.deletePrevCharAction
<!-- END KEY -->
<!-- BEGIN DATA -->
删除当前插入符位置之前字符内容的动作名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.deleteNextCharAction
<!-- END KEY -->
<!-- BEGIN DATA -->
删除当前插入符位置之后字符内容的动作名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.deleteNextWordAction
<!-- END KEY -->
<!-- BEGIN DATA -->
删除选择开始位置之后单词的动作名称。
 @see #getActions
 @see JTextComponent#getSelectionStart
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.deletePrevWordAction
<!-- END KEY -->
<!-- BEGIN DATA -->
删除选择开始位置之前单词的动作名称。
 @see #getActions
 @see JTextComponent#getSelectionStart
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.readOnlyAction
<!-- END KEY -->
<!-- BEGIN DATA -->
将编辑器设置为只读模式的动作名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.writableAction
<!-- END KEY -->
<!-- BEGIN DATA -->
将编辑器设置为可写入模式的动作名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.cutAction
<!-- END KEY -->
<!-- BEGIN DATA -->
剪切选定区域并将其内容置于剪贴板中的动作名称。
@see JTextComponent#cut
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.copyAction
<!-- END KEY -->
<!-- BEGIN DATA -->
复制选定区域并将其内容置于剪贴板中的动作名称。
@see JTextComponent#copy
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.pasteAction
<!-- END KEY -->
<!-- BEGIN DATA -->
将系统剪贴板内容粘贴到选定区域、如果未选中任何内容，则粘贴到插入符之前的动作名称。
@see JTextComponent#paste
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.beepAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于创建蜂鸣声的动作名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.pageUpAction
<!-- END KEY -->
<!-- BEGIN DATA -->
垂直向上翻页的动作名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.pageDownAction
<!-- END KEY -->
<!-- BEGIN DATA -->
垂直向下翻页的动作名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.forwardAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符逻辑向前移动一个位置的动作名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.backwardAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符在逻辑上向后移动一个位置的动作名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionForwardAction
<!-- END KEY -->
<!-- BEGIN DATA -->
通过将插入符在逻辑上向前移动一个位置来扩展选定内容的动作名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionBackwardAction
<!-- END KEY -->
<!-- BEGIN DATA -->
通过将插入符在逻辑上向后移动一个位置来扩展选定内容的动作名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.upAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符在逻辑上向上移动一个位置的动作名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.downAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符在逻辑上向下移动一个位置的动作名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionUpAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符在逻辑上向上移动一个位置并扩展选定内容的动作名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionDownAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符在逻辑上向下移动一个位置并扩展选定内容的动作名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.beginWordAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符移动到字首的 <code>Action</code> 名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.endWordAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符移动到字尾的动作名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionBeginWordAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符移动到字首并扩展选定内容的 <code>Action</code> 名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionEndWordAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符移动到字尾并扩展选定内容的动作名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.previousWordAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符移动到前一个字开头的 <code>Action</code> 名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.nextWordAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符移动到下一个字开头的 <code>Action</code> 名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionPreviousWordAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将选定内容移动到前一个字的开头并扩展选定内容的 <code>Action</code> 名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionNextWordAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将选定内容移动到下一个字的开头并扩展选定内容的 <code>Action</code> 名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.beginLineAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符移动到行首的 <code>Action</code> 名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.endLineAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符移动到行尾的 <code>Action</code> 名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionBeginLineAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符移动到行首并扩展选定内容的 <code>Action</code> 名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionEndLineAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符移动到行尾并扩展选定内容的 <code>Action</code> 名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.beginParagraphAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符移动到段落开头的 <code>Action</code> 名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.endParagraphAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符移动到段落末尾的 <code>Action</code> 名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionBeginParagraphAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符移动到段落开头并扩展选定内容的 <code>Action</code> 名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionEndParagraphAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符移动到段落末尾并扩展选定内容的 <code>Action</code> 名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.beginAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符移动到文档开头的 <code>Action</code> 名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.endAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符移动到文档末尾的 <code>Action</code> 名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionBeginAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符移动到文档开头的 <code>Action</code> 名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionEndAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将插入符移动到文档末尾的 Action 名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.selectWordAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选中围绕插入符的某个字的 Action 名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.selectLineAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选中围绕插入符的某一行的 Action 名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.selectParagraphAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选中围绕插入符的一个段落的动作名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.selectAllAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选中整个文档的动作名称
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.DefaultEditorKit.defaultKeyTypedAction
<!-- END KEY -->
<!-- BEGIN DATA -->
在接收到<em>键输入事件</em> 并且无 keymap 输入时默认执行的动作名称。
@see #getActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.DefaultEditorKit()
<!-- END KEY -->
<!-- BEGIN DATA -->
DefaultEditorKit 的默认构造方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.DefaultEditorKit.getContentType()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此工具包声明支持的数据的 MIME 类型。默认类型为 <code>text/plain</code>。

@return 类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.ViewFactory javax.swing.text.DefaultEditorKit.getViewFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取一个适合供由此包所产生的任何模型来产生视图的工厂。默认情况下，让 UI 生成此工厂，所以此方法无实现。

@return 视图工厂

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Action[] javax.swing.text.DefaultEditorKit.getActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取能在文本组件上使用的一组命令，该文本组件使用由此工具包生成的模型和视图。

@return 命令列表

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Caret javax.swing.text.DefaultEditorKit.createCaret()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取能在由关联的 ViewFactory 生成的视图中导航的插入符。

@return 插入符

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Document javax.swing.text.DefaultEditorKit.createDefaultDocument()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个适合此编辑器类型的未初始化文本存储模型 (PlainDocument)。

@return 模型

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultEditorKit.read(InputStream in, Document doc, int pos) throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
插入取自给定流的内容，其格式需要适合此类型的内容处理程序。
 
@param in  要读入的流
@param doc 插入到的目标文档。
@param pos 文档中放入内容的位置，该位置 &gt;= 0。
@exception IOException 如果有任何 I/O 错误
@exception BadLocationException 如果 pos 代表文档中的无效位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultEditorKit.write(OutputStream out, Document doc, int pos, int len) throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
将文档中的内容以适合此类型内容处理程序的格式写入给定的流。
 
@param out  要写入的流
@param doc 写入所用的源文档。
@param pos 文档中获取内容的位置，该位置 &gt;= 0。
@param len 要写出的量，该写出量 &gt;= 0。
@exception IOException 如果有任何 I/O 错误
@exception BadLocationException 如果 pos 代表文档中的无效位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultEditorKit.read(Reader in, Document doc, int pos) throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
插入取自给定流的内容，它将被视为纯文本。
 
@param in  要读入的流
@param doc 插入到的目标文档。
@param pos 文档中放入内容的位置，该位置 &gt;= 0。
@exception IOException 如果有任何 I/O 错误
@exception BadLocationException 如果 pos 代表文档中的无效位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultEditorKit.write(Writer out, Document doc, int pos, int len) throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
将取自文档的内容以纯文本格式写入给定流。
 
@param out  要写入的流
@param doc 写入所用的源文档。
@param pos 文档中获取内容的位置，该位置 &gt;= 0。
@param len 要写入的量，该写入量 &gt;= 0。
@exception IOException 如果有任何 I/O 错误
@exception BadLocationException 如果 pos 不是位于 0 和文档长度之间。

<!-- END DATA -->
