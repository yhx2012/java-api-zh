<!-- BEGIN KEY -->
public class javax.swing.text.StyleContext.NamedStyle extends java.lang.Object implements javax.swing.text.Style, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
通常用于表示字符和段落样式的属性集合。这是 MutableAttributeSet（在需要时可以观察它）的一个实现。当集合足够小时这些样式将利用不可变性的优势，并且可能比诸如 SimpleAttributeSet 之类更为高效。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.EventListenerList javax.swing.text.StyleContext.NamedStyle.listenerList
<!-- END KEY -->
<!-- BEGIN DATA -->
模型的更改侦听器。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.event.ChangeEvent javax.swing.text.StyleContext.NamedStyle.changeEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
由于事件的惟一状态（只读）为源属性，因此每个模型实例只需要一个 ChangeEvent。此处生成的事件源总是 &quot;this&quot;。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.StyleContext.NamedStyle(String name, Style parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的命名样式。

@param name 样式名称，未命名则为 null
@param parent 父样式，如果没有则为 null
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.StyleContext.NamedStyle(Style parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的命名样式。

@param parent 父样式，如果没有则为 null
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.StyleContext.NamedStyle()
<!-- END KEY -->
<!-- BEGIN DATA -->
利用 null 名称和父级创建新的命名样式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.StyleContext.NamedStyle.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
将样式转换成为字符串。

@return 字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.StyleContext.NamedStyle.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取样式的名称。样式不是必须命名的，因此如果没有与该样式关联的名称，则返回 null。

@return 名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.NamedStyle.setName(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
更改样式的名称。利用 null 名称不能执行任何操作。

@param name 新名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.NamedStyle.addChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加更改侦听器。

@param l 更改侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.NamedStyle.removeChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除更改侦听器。

@param l 更改侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.ChangeListener[] javax.swing.text.StyleContext.NamedStyle.getChangeListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回使用 addChangeListener() 添加到此 NamedStyle 中的所有 <code>ChangeListener</code> 组成的数组。

@return 所有添加的 <code>ChangeListener</code>，或者在没有添加侦听器时返回空数组
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.StyleContext.NamedStyle.fireStateChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有对此事件类型的通知感兴趣的已注册侦听器。事件实例是使用传入到 fire 方法的参数延后创建的。

@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] javax.swing.text.StyleContext.NamedStyle.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回具有添加到此模型中的给定类型的所有侦听器组成的数组。 

@return 从模型中接收 <em>listenerType</em> 通知的所有对象。
 
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.StyleContext.NamedStyle.getAttributeCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回定义的属性数。

@return 属性数，大于等于 0
@see AttributeSet#getAttributeCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.StyleContext.NamedStyle.isDefined(Object attrName)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定给定属性是否已定义。

@param attrName 非空的属性名
@return 如果属性已定义，则返回 true
@see AttributeSet#isDefined

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.StyleContext.NamedStyle.isEqual(AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查两个属性集是否相等。

@param attr 要检查的属性集
@return 如果相同返回 true
@see AttributeSet#isEqual

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.StyleContext.NamedStyle.copyAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
复制属性集。

@return 副本
@see AttributeSet#copyAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.text.StyleContext.NamedStyle.getAttribute(Object attrName)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取属性的值。

@param attrName 非空属性名
@return 属性值
@see AttributeSet#getAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<?> javax.swing.text.StyleContext.NamedStyle.getAttributeNames()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取所有属性的名称。

@return 以枚举形式返回属性名称
@see AttributeSet#getAttributeNames

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.StyleContext.NamedStyle.containsAttribute(Object name, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定给定的属性名称/值是否已定义。

@param name 非空属性名
@param value 属性值
@return 如果名称/值已定义则返回为 true
@see AttributeSet#containsAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.StyleContext.NamedStyle.containsAttributes(AttributeSet attrs)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查元素是否包含了所有属性。

@param attrs 要检查的属性
@return 如果元素包含了所有属性，则返回 true
@see AttributeSet#containsAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.StyleContext.NamedStyle.getResolveParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
从父级获取属性。如果未重写，则解析父级默认为父元素。

@return 来自父级的属性
@see AttributeSet#getResolveParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.NamedStyle.addAttribute(Object name, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加属性。

@param name 非空属性名
@param value 属性值
@see MutableAttributeSet#addAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.NamedStyle.addAttributes(AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
将属性集添加到元素。

@param attr 要添加的属性
@see MutableAttributeSet#addAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.NamedStyle.removeAttribute(Object name)
<!-- END KEY -->
<!-- BEGIN DATA -->
从集合中移除属性。

@param name 非空属性名
@see MutableAttributeSet#removeAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.NamedStyle.removeAttributes(java.util.Enumeration<?> names)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除元素的属性集。

@param names 属性名称
@see MutableAttributeSet#removeAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.NamedStyle.removeAttributes(AttributeSet attrs)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除元素的属性集。

@param attrs 属性
@see MutableAttributeSet#removeAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.NamedStyle.setResolveParent(AttributeSet parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置解析的父级。

@param parent 父级，如果没有则为 null
@see MutableAttributeSet#setResolveParent

<!-- END DATA -->
