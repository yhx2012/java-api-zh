<!-- BEGIN KEY -->
public class javax.swing.text.ElementIterator extends java.lang.Object implements java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
ElementIterator，顾名思义，沿 Element 树进行迭代。可使用 Document 或 Element 参数调用此构造方法。如果以 Document 为参数调用此构造方法，那么迭代的根为 document.getDefaultRootElement() 的返回值。

迭代以深度优先 (depth-first) 的方式进行。至于如何处理边界条件：a) 如果 next() 在 first() 或 current() 之前调用，将返回根。b) next() 返回 null 指示列表的末尾。c) 如果当前元素为根或 next() 已经返回 null 时，previous() 返回 null。

ElementIterator 并不锁定 Element 树。这意味着它不跟踪任何更改。由此类的用户负责确保元素迭代期间不出现更改。

简单用法示例：

    public void iterate() {
        ElementIterator it = new ElementIterator(root);
	  Element elem;
	  while (true) {
           if ((elem = next()) != null) {
		 // process element
		 System.out.println("elem: " + elem.getName());
	     } else {
	         break;
	     }
	  }
    }


@author Sunita Mani
@version 1.14 12/19/03

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.ElementIterator(Document document)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的 ElementIterator。根元素用于获得文档的默认根元素。

@param document  Document。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.ElementIterator(Element root)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的 ElementIterator。

@param root 根 Element。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Object javax.swing.text.ElementIterator.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
复制 ElementIterator。

@return 复制的 ElementIterator 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element javax.swing.text.ElementIterator.first()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取第一个元素。

@return  Element。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.ElementIterator.depth()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取元素树的当前深度。

@return 深度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element javax.swing.text.ElementIterator.current()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取当前 Element。

@return 位于堆栈顶部的元素，如果根元素为 <code>null</code> 则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element javax.swing.text.ElementIterator.next()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取下一个 Element。定位下一个元素的策略是深度优先搜索。

@return 下一个元素，如果位于列表末尾，则返回 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element javax.swing.text.ElementIterator.previous()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取前一个 Element。但是如果当前元素为最后一个元素，或者当前元素为 null，则返回 null。

@return 前一个 <code>Element</code>（如果有）

<!-- END DATA -->
