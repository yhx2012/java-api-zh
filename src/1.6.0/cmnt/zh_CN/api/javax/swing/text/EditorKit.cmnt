<!-- BEGIN KEY -->
public abstract class javax.swing.text.EditorKit extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
针对某些<em>类型</em> 的文本内容，建立能够合理发挥编辑器功能的文本组件所需的实现集合。EditorKit 充当某个策略类型的工厂。例如，可以提供 html 和 rtf 的实现，它可与其他实现互换。
 <p>
工具包可安全存储编辑状态，因为工具包的实例专供文本组件使用。新的工具包通常通过复制原型工具包创建。工具包会调用其 <code>setComponent</code> 方法来建立与 JTextComponent 的联系。

@author  Timothy Prinzing
@version 1.19 12/19/03

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.EditorKit()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 EditorKit。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.text.EditorKit.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建此编辑器工具包的副本。实现它可使用 <em>Object.clone</em>。如果无法复制工具包，则返回 null。

@return 副本

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.EditorKit.install(JEditorPane c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将工具包安装到 JEditorPane 中时调用。  

@param c  JEditorPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.EditorKit.deinstall(JEditorPane c)
<!-- END KEY -->
<!-- BEGIN DATA -->
从 JEditorPane 中移除工具包时调用。这可用于取消对任何所关联侦听器的注册。

@param c  JEditorPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String javax.swing.text.EditorKit.getContentType()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得此工具包声明支持的数据的 MIME 类型。

@return 类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.text.ViewFactory javax.swing.text.EditorKit.getViewFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取适合生成此工具包生成的任何模型视图的工厂。  

@return 工厂

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.Action[] javax.swing.text.EditorKit.getActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取能在文本组件上使用的一组命令，该文本组件使用由此工具包生成的模型和视图。

@return 动作组

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.text.Caret javax.swing.text.EditorKit.createCaret()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取能在由关联的 ViewFactory 生成的视图中导航的插入符。

@return 插入符

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.text.Document javax.swing.text.EditorKit.createDefaultDocument()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个适合此编辑器类型的未初始化的文本存储模型。

@return 模型

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.text.EditorKit.read(InputStream in, Document doc, int pos) throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
插入来自给定流的内容，其格式需要适合此类型的内容处理程序。
 
@param in  要读入的流
@param doc 插入到的目标文档。
@param pos 文档中放入内容的位置，该值 &gt;= 0。
@exception IOException 如果有任何 I/O 错误
@exception BadLocationException 如果 pos 代表文档中的无效位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.text.EditorKit.write(OutputStream out, Document doc, int pos, int len) throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
将文档中的内容以适合此类型内容处理程序的格式写入给定的流。
 
@param out  要写入的流
@param doc 写入所用的源文档。
@param pos 文档中获取内容的位置，该值 &gt;= 0。
@param len 要写入的量，该值 &gt;= 0。
@exception IOException 如果有任何 I/O 错误
@exception BadLocationException 如果 pos 代表文档中的无效位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.text.EditorKit.read(Reader in, Document doc, int pos) throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
插入来自给定流的内容，其格式需要适合此类型的内容处理程序。
 <p>
由于实际的编辑是基于 unicode 的，这将是读入数据的首选方法。但是有些类型的内容以 8 位形式存储，因此又适合 InputStream。
 
@param in  要读入的流
@param doc 插入到的目标文档。
@param pos 文档中放入内容的位置，该值 &gt;= 0。
@exception IOException 如果有任何 I/O 错误
@exception BadLocationException 如果 pos 代表文档中的无效位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.text.EditorKit.write(Writer out, Document doc, int pos, int len) throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
将文档中的内容以适合此类型内容处理程序的格式写入给定的流。
 <p>
由于实际的编辑是基于 unicode 的，这将是写入数据的首选方法。但是有些类型的内容以 8 位形式存储，因此又适合 OutputStream。
 
@param out  要写入的流
@param doc 写入所用的源文档。
@param pos 文档中获取内容的位置，该值 &gt;= 0。
@param len 要写出的量，该值 &gt;= 0。
@exception IOException 如果有任何 I/O 错误
@exception BadLocationException 如果 pos 代表文档中的无效位置。

<!-- END DATA -->
