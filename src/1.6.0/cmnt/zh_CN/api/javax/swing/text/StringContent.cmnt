<!-- BEGIN KEY -->
public final class javax.swing.text.StringContent extends java.lang.Object implements javax.swing.text.AbstractDocument.Content, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
AbstractDocument.Content 接口的一个实现，这是一个对相对于较小的文档和/或调试很有用的强制实现。它只能管理简单字符数组中的字符内容。而且其效率很低。  
 <p>
通常建议使用间隙缓冲区或拼凑表实现。此缓冲区无法扩展为大尺寸。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@author  Timothy Prinzing
@version 1.44 12/19/03

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.StringContent()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的 StringContent 对象。初始大小默认为 10。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.StringContent(int initialLength)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定初始大小的新 StringContent。如果长度小于 1，大小将为 1。

@param initialLength 初始大小

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.StringContent.length()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回内容的长度。

@return 长度，该值 &gt;= 1
@see AbstractDocument.Content#length

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.undo.UndoableEdit javax.swing.text.StringContent.insertString(int where, String str) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符串插入到内容中。

@param where 起始位置，该值 &gt;= 0 且 &lt; length()
@param str 要插入的非 null 字符串
@return 撤消的 UndoableEdit 对象
@exception BadLocationException 如果指定位置无效
@see AbstractDocument.Content#insertString

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.undo.UndoableEdit javax.swing.text.StringContent.remove(int where, int nitems) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
移除部分内容，其中 where ＋ nitems 必须 &lt; length()。

@param where 起始位置，该值 &gt;= 0
@param nitems 要移除的字符数，该值 &gt;= 0
@return 撤消的 UndoableEdit 对象
@exception BadLocationException 如果指定位置无效
@see AbstractDocument.Content#remove

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.StringContent.getString(int where, int len) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
检索内容的某一部分，where ＋ len 必须 &lt;= length()。

@param where 起始位置，该值 &gt;= 0
@param len 要检索的长度，该值 &gt;= 0
@return 一个表示该内容的字符串；该字符串可能为空
@exception BadLocationException 如果指定位置无效
@see AbstractDocument.Content#getString

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StringContent.getChars(int where, int len, Segment chars) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
检索内容的某一部分，where ＋ len 必须 &lt;= length()

@param where 起始位置，该值 &gt;= 0
@param len 要检索的字符数，该值 &gt;= 0
@param chars 要在其中返回字符的 Segment 对象
@exception BadLocationException 如果指定位置无效
@see AbstractDocument.Content#getChars

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Position javax.swing.text.StringContent.createPosition(int offset) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
在内容中创建一个位置，让其跟踪随内容的变化而进行的更改。

@param offset 所创建位置的偏移量，该值 &gt;= 0
@return 位置
@exception BadLocationException 如果指定位置无效

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Vector javax.swing.text.StringContent.getPositionsInRange(java.util.Vector v, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个包含 UndoPosRef 实例的 Vector，其 Position 的范围从 <code>offset</code> 到 <code>offset</code> + <code>length</code>。如果 <code>v</code> 不为 null，则在此处放置匹配的 Position。返回具有结果 Position 的向量。
 <p>
这里指的是内部用法，通常不适合子类。

@param v 要使用的 Vector，其位置是向量为 null 时创建的新位置
@param offset 起始偏移量，该值 &gt;= 0
@param length 长度，该值 &gt;= 0
@return 实例的集合

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.StringContent.updateUndoPositions(java.util.Vector positions)
<!-- END KEY -->
<!-- BEGIN DATA -->
在 <code>positions</code> 处重新设置所有 UndoPosRef 实例的位置。
 <p>
这里指的是内部用法，通常不适合子类。

@param positions 实例的位置

<!-- END DATA -->
