<!-- BEGIN KEY -->
public class javax.swing.text.html.parser.DTD extends java.lang.Object implements javax.swing.text.html.parser.DTDConstants
<!-- END KEY -->
<!-- BEGIN DATA -->
SGML DTD 的表示形式。DTD 描述文档语法并用于解析 HTML 文档。它包含一个元素及其属性的列表，还包括一个在 DTD 中定义的条目的列表。

@see Element
@see AttributeList
@see ContentModel
@see Parser
@author Arthur van Hoff
@version 1.20 05/05/04

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.html.parser.DTD(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定名称的新 DTD。
@param name 以 <code>String</code> 表示的新 DTD 的名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.html.parser.DTD.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 DTD 的名称。
@return DTD 的名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.parser.Entity javax.swing.text.html.parser.DTD.getEntity(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
按名称获取一个实体。
@return 与 <code>name</code> <code>String</code> 对应的 <code>Entity</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.parser.Entity javax.swing.text.html.parser.DTD.getEntity(int ch)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取一个字符实体。
@return 与 <code>ch</code> 字符对应的 <code>Entity</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.parser.Element javax.swing.text.html.parser.DTD.getElement(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
按名称获取一个元素。如果该元素不存在，将创建一个新元素。

@param name 请求的 <code>String</code>
@return 对应于 <code>name</code> 的 <code>Element</code>，它可以是新创建的

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.parser.Element javax.swing.text.html.parser.DTD.getElement(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
按索引获取一个元素。

@param index 请求的索引
@return 与 <code>index</code> 相应的 <code>Element</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.parser.Entity javax.swing.text.html.parser.DTD.defineEntity(String name, int type, char[] data)
<!-- END KEY -->
<!-- BEGIN DATA -->
定义一个实体。如果由 <code>name</code>、<code>type</code> 和 <code>data</code> 指定的 <code>Entity</code> 存在，就返回该 <code>Entity</code>；否则将创建并返回一个新 <code>Entity</code>。

@param name 以 <code>String</code> 表示的 <code>Entity</code> 的名称
@param type <code>Entity</code> 的类型
@param data <code>Entity</code> 的数据
@return 请求的 <code>Entity</code>，如果未找到请求的，则返回一个新 <code>Entity</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.parser.Element javax.swing.text.html.parser.DTD.defineElement(String name, int type, boolean omitStart, boolean omitEnd, ContentModel content, BitSet exclusions, BitSet inclusions, AttributeList atts)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与指定参数匹配的 <code>Element</code>。如果不存在所需元素，则创建并返回一个新元素。

@param name <code>Element</code> 的名称
@param type <code>Element</code> 的类型
@param omitStart 如果忽略开始，则为 <code>true</code> 

@param omitEnd  如果忽略结尾，则为 <code>true</code>
@param content  <code>ContentModel</code>
@param atts 指定 <code>Element</code> 的 <code>AttributeList</code>
@return 指定的 <code>Element</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.parser.DTD.defineAttributes(String name, AttributeList atts)
<!-- END KEY -->
<!-- BEGIN DATA -->
定义 {@code Element} 的属性。

@param name <code>Element</code> 的名称
@param atts 指定 <code>Element</code> 的 <code>AttributeList</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.parser.Entity javax.swing.text.html.parser.DTD.defEntity(String name, int type, int ch)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回一个字符 <code>Entity</code>。
@param name 实体的名称
@return 新的字符 <code>Entity</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.html.parser.Entity javax.swing.text.html.parser.DTD.defEntity(String name, int type, String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回一个 <code>Entity</code>。
@param name 实体的名称
@return 新的 <code>Entity</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.html.parser.Element javax.swing.text.html.parser.DTD.defElement(String name, int type, boolean omitStart, boolean omitEnd, ContentModel content, java.lang.String[] exclusions, java.lang.String[] inclusions, AttributeList atts)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回一个 <code>Element</code>。
@param name 元素的名称
@return 新的 <code>Element</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.html.parser.AttributeList javax.swing.text.html.parser.DTD.defAttributeList(String name, int type, int modifier, String value, String values, AttributeList atts)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回一个 <code>AttributeList</code>。
@param name 属性列表的名称
@return 新的 <code>AttributeList</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.html.parser.ContentModel javax.swing.text.html.parser.DTD.defContentModel(int type, Object obj, ContentModel next)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回一个新的内容模式。
@param type 新内容模式的类型
@return 新的 <code>ContentModel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.html.parser.DTD.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 DTD 的字符串表示形式。
@return 此 DTD 的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.text.html.parser.DTD javax.swing.text.html.parser.DTD.getDTD(String name) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回具有指定 <code>name</code> 的 DTD。如果不存在具有该名称的 DTD，将创建并返回一个 DTD。名称中的所有大写字符都将转换为小写字符。

@param name DTD 的名称
@return 与 <code>name</code> 对应的 DTD

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.parser.DTD.read(DataInputStream in) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据存档格式重新创建一个 DTD。
@param in  要从中读取数据的 <code>DataInputStream</code>

<!-- END DATA -->
