<!-- BEGIN KEY -->
public class javax.swing.text.ComponentView extends javax.swing.text.View
<!-- END KEY -->
<!-- BEGIN DATA -->
实现视图接口的组件装饰器。整个元素用于代表该组件。它充当了只供显示的 View 实现和交互式轻量级组件之间的网关（即允许组件嵌入 View 层次结构中）。
 <p>
组件根据 <code>Component.getAlignmentY</code> 返回的值相对于文本基线放置。对于 Swing 组件，使用 <code>JComponent.setAlignmentY</code> 方法可以很便捷地设置此值。例如，值设置为 <code>0.75</code> 将使组件的 75％ 位于基线的上面，25％ 位于基线的下面。
 <p>
通过确保在事件线程中完成对所有的组件访问，实现此类可完成在多线程情况下（例如，来自模型更改的同步通知）进行正常工作所需的工作。
 <p>
所使用的组件由 createComponent 方法的返回值确定。此方法的默认实现为将存储的组件作为元素的一个属性返回（通过调用 StyleConstants.getComponent）。此行为有一个限制，组件不能由多于一个文本组件（即可共享的模型）使用。通过实现 createComponent 从而实际上基于属性中包含的某种规范创建一个组件，子类可消除此约束。html 包中的 ObjectView 类为 ComponentView 实现的一个示例，它支持一个共享模型的多组件视图。

@author Timothy Prinzing
@version 1.54 12/19/03

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.ComponentView(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的 ComponentView 对象。

@param elem 要装饰的元素

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.text.ComponentView.createComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建与此视图关联的组件。当确定需要一个新组件时将调用此方法。在调用 setParent 的过程中，或者在收到属性已更改的通知时，都有可能调用上面的方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.awt.Component javax.swing.text.ComponentView.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此视图关联的组件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.ComponentView.paint(Graphics g, Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
真正的绘制行为自然来源于组件与其父容器（容纳此视图的同一容器）之间的关联。实现它不进行任何操作。

@param g 图形上下文
@param a 形状
@see View#paint

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.ComponentView.getPreferredSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此视图沿某轴的首选区域。实现它可返回由 Component.getPreferredSize 返回的沿所需轴的值。

@param axis 可以是 View.X_AXIS 或 View.Y_AXIS
@return   视图可能要在其中呈现的区域，该区域 &gt;= 0。通常会告知该视图要在返回的区域中呈现，但不能保证一定如此。父级可选择重新调整视图大小或拆分视图。
@exception IllegalArgumentException 如果轴无效

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.ComponentView.getMinimumSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此视图沿某轴的最小区域。实现它可返回由 Component.getMinimumSize 返回的沿所需轴的值。

@param axis 可以是 View.X_AXIS 或 View.Y_AXIS
@return   视图可能要在其中呈现的区域，该区域 &gt;= 0。通常会告知该视图在返回的区域中呈现，但不能保证一定如此。父级可选择重新调整视图大小或拆分视图。
@exception IllegalArgumentException 如果轴无效

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.ComponentView.getMaximumSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此视图沿某轴的最大区域。实现它可返回由 Component.getMaximumSize 返回的沿所需轴的值。

@param axis 可以是 View.X_AXIS 或 View.Y_AXIS
@return   视图可能要在其中呈现的区域，该区域 &gt;= 0。通常会告知该视图在返回的区域中呈现，但不能保证一定如此。父级可选择重新调整视图大小或拆分视图。
@exception IllegalArgumentException 如果轴无效

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.ComponentView.getAlignment(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此视图沿某轴所需的对齐方式。实现它来为嵌入组件提供对齐方式。

@param axis 可以是 View.X_AXIS 或 View.Y_AXIS
@return 需要的对齐方式。这应该是介于 0.0 和 1.0 之间的一个值，0 指示在起始位置对齐，1.0 指示在离开起始位置的整个跨距处对齐。为 0.5 表示在视图的中心对齐。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.ComponentView.setParent(View p)
<!-- END KEY -->
<!-- BEGIN DATA -->
为子视图设置父级。父级在子级上调用此方法以告知子级谁为其父，同时为类似宿主 Container 的组件提供视图访问。如果父视图参数为非空且尚未创建组件，将执行超类行为，然后调用 createComponent。嵌入组件的父被设置为由 <code>getContainer</code> 返回的值。如果父视图参数为 null，此视图将被清空，这样组件将从其父中移除。
 <p>
更改组件所在的层次结构将会触动组件锁，这是 View 层次结构的一个不安全之处。因此，如果在事件线程中，则会立即执行此功能；如果是从另一个线程（来自异步更新的更改通知）调用，则此功能将在事件队列排队。

@param p 父级

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Shape javax.swing.text.ComponentView.modelToView(int pos, Shape a, Position.Bias b) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
提供模型坐标空间到视图坐标空间的映射。

@param pos 要转换的位置，该值 &gt;= 0
@param a 分配的要在其中呈现的区域
@return 返回给定位置的边界框
@exception BadLocationException  如果给定位置在所关联的文档中不是一个有效位置
@see View#modelToView

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.ComponentView.viewToModel(float x, float y, Shape a, javax.swing.text.Position.Bias[] bias)
<!-- END KEY -->
<!-- BEGIN DATA -->
提供从视图坐标空间到模型逻辑坐标空间的映射。

@param x X 坐标，该值 &gt;= 0
@param y Y 坐标，该值 &gt;= 0
@param a 分配的要在其中呈现的区域
@return 模型中最能代表视图中给定点的位置
@see View#viewToModel

<!-- END DATA -->
