<!-- BEGIN KEY -->
public class javax.swing.text.DefaultHighlighter extends javax.swing.text.LayeredHighlighter
<!-- END KEY -->
<!-- BEGIN DATA -->
实现 Highlighter 接口。实现一个用纯色绘制的简单高亮显示 painter。
 
@author  Timothy Prinzing
@version 1.39 12/19/03
@see     Highlighter

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.swing.text.LayeredHighlighter.LayerPainter javax.swing.text.DefaultHighlighter.DefaultPainter
<!-- END KEY -->
<!-- BEGIN DATA -->
LayeredHighlighter.LayerPainter 的默认实现，可用于绘制高亮显示区域。
 <p>
从 1.4 开始，此字段为 final。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.DefaultHighlighter()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新 DefaultHighlighther 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultHighlighter.paint(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
呈现高亮显示区域。

@param g 图形上下文

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultHighlighter.install(JTextComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
当 UI 安装到 JTextComponent 的接口时调用。安装编辑器并移除任何现有的高亮显示。

@param c 编辑器组件
@see Highlighter#install

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultHighlighter.deinstall(JTextComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
从 JTextComponent 的接口移除 UI 时调用。

@param c 组件
@see Highlighter#deinstall

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.text.DefaultHighlighter.addHighlight(int p0, int p1, Highlighter.HighlightPainter p) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
向视图添加高亮显示。返回一个可用于引用高亮显示的标记。

@param p0   要高亮显示范围的起始偏移量，该值 &gt;= 0
@param p1   要高亮显示范围的结束偏移量，该值 &gt;= p0
@param p    要用于实际呈现高亮显示的 painter
@return     可充当引用高亮显示的标记的对象
@exception BadLocationException 如果指定的位置无效

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultHighlighter.removeHighlight(Object tag)
<!-- END KEY -->
<!-- BEGIN DATA -->
从视图中移除高亮显示。

@param tag 对高亮显示的引用

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultHighlighter.removeAllHighlights()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除所有的高亮显示。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultHighlighter.changeHighlight(Object tag, int p0, int p1) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
更改高亮显示。

@param tag 高亮显示标记
@param p0 范围的开始处，该值 &gt;= 0
@param p1 范围的结束处，该值 &gt;= p0
@exception BadLocationException 如果指定的位置无效

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Highlighter.Highlight[] javax.swing.text.DefaultHighlighter.getHighlights()
<!-- END KEY -->
<!-- BEGIN DATA -->
制作高亮显示的副本。它并不实际复制每个高亮显示区域，只是对它们进行引用。

@return 副本
@see Highlighter#getHighlights

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultHighlighter.paintLayeredHighlights(Graphics g, int p0, int p1, Shape viewBounds, JTextComponent editor, View view)
<!-- END KEY -->
<!-- BEGIN DATA -->
当要呈现叶 View （例如，LabelView）时，要调用此方法。如果高亮显示位于给定的区域，则会立即绘制该高亮显示。

@param g 用于绘制的图形
@param p0 视图的起始偏移量
@param p1 视图的结束偏移量
@param viewBounds 视图的边界
@param editor JTextComponent
@param view 要呈现的视图实例

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultHighlighter.setDrawsLayeredHighlights(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果为 true，则高亮显示将在视图绘制文本时绘制。即视图将调用 <code>paintLayeredHighlight</code>，结果将导致在绘制文本前绘制矩形（如果偏移量位于高亮显示区域中）。要这样做，所提供的 painter 必须是 LayeredHighlightPainter 的一个实例。

<!-- END DATA -->
