<!-- BEGIN KEY -->
public class javax.swing.JMenuBar extends javax.swing.JComponent implements javax.accessibility.Accessible, javax.swing.MenuElement
<!-- END KEY -->
<!-- BEGIN DATA -->
菜单栏的实现。将 <code>JMenu</code> 对象添加到菜单栏以构造菜单。当用户选择 <code>JMenu</code> 对象时，就会显示其关联的 <code>JPopupMenu</code>，允许用户选择其上的某一个 <code>JMenuItem</code>。
 <p>
有关使用菜单栏的信息和示例，请参阅 <em>The Java Tutorial</em> 中的 <a  href="http://java.sun.com/docs/books/tutorial/uiswing/components/menu.html">How to Use Menus</a> 一节。
 <p>
 <strong>警告：</strong>Swing 不是线程安全的。有关更多信息，请参阅 <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@beaninfo attribute: isContainer true description: A container for holding and displaying menus.

@version 1.98 05/18/04
@author Georges Saab
@author David Karlton
@author Arnaud Weber
@see JMenu
@see JPopupMenu
@see JMenuItem

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuBar()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的菜单栏。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.MenuBarUI javax.swing.JMenuBar.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回菜单栏的当前 UI。
@see #setUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.setUI(MenuBarUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置呈现此组件的 L&F 对象。

@param ui 新的 MenuBarUI L&F 对象
@see UIDefaults#getUI
@beaninfo bound: true hidden: true attribute: visualUpdate true description: The UI object that implements the Component's LookAndFeel. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
利用当前外观的值重置 UI 属性。

@see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JMenuBar.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回呈现此组件的 L&amp;F 类的名称。

@return 字符串 &quot;MenuBarUI&quot;
@see JComponent#getUIClassID
@see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.SingleSelectionModel javax.swing.JMenuBar.getSelectionModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回处理单个选择的模型对象。

@return <code>SingleSelectionModel</code> 属性
@see SingleSelectionModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.setSelectionModel(SingleSelectionModel model)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置处理单个选择的模型对象。

@param model 要使用的 <code>SingleSelectionModel</code>
@see SingleSelectionModel
@beaninfo bound: true description: The selection model, recording which child is selected.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenu javax.swing.JMenuBar.add(JMenu c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的菜单追加到菜单栏的末尾。

@param c 要添加的 <code>JMenu</code> 组件
@return 菜单组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenu javax.swing.JMenuBar.getMenu(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回菜单栏中指定位置的菜单。

@param index  给出菜单栏中位置的整数，其中 0 是第一个位置
@return 该位置上的 <code>JMenu</code>；如果在该位置上没有 <code>JMenu</code>（即它是一个 <code>JMenuItem</code>），则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JMenuBar.getMenuCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回菜单栏上的菜单数。

@return 菜单栏中的项数

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.setHelpMenu(JMenu menu)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用户选择菜单栏中的&ldquo;帮助&rdquo;选项时显示的帮助菜单。此方法尚未实现，将抛出异常。

@param menu 向用户提供帮助的 JMenu

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenu javax.swing.JMenuBar.getHelpMenu()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取菜单栏的帮助菜单。此方法尚未实现，将抛出异常。

@return 向用户提供帮助的 <code>JMenu</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JMenuBar.getComponentAtIndex(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定索引处的组件。

@param i 指定位置的整数，其中 0 为第一个
@return 该位置上的 <code>Component</code>；返回 <code>null</code> 表示索引无效
@deprecated 由 <code>getComponent(int i)</code> 取代

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JMenuBar.getComponentIndex(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定组件的索引。

@param c  要查找的 <code>Component</code>
@return 给出组件位置的整数，其中 0 为第一个；如果找不到则为 -1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.setSelected(Component sel)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置当前选择的组件，更改选择模型。

@param sel 要选择的 <code>Component</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JMenuBar.isSelected()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前已选择了菜单栏的组件，则返回 true。

@return 如果已做出选择，则返回 true；否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JMenuBar.isBorderPainted()
<!-- END KEY -->
<!-- BEGIN DATA -->

如果应该绘制菜单栏的边框，则返回 true。

@return  如果应该绘制边框，则返回 true；否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.setBorderPainted(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置是否应该绘制边框。

@param b 如果为 true 且边框属性不为 <code>null</code>，则绘制边框。
@see #isBorderPainted
@beaninfo bound: true attribute: visualUpdate true description: Whether the border should be painted.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuBar.paintBorder(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>BorderPainted</code> 属性为 true，则绘制菜单栏的边框。
 
@param g 用于进行绘制的 <code>Graphics</code> 上下文
@see JComponent#paint
@see JComponent#setBorder

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.setMargin(Insets m)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置菜单栏的边框与其菜单之间的空白。设置为 <code>null</code> 将导致菜单栏使用默认空白。

@param m 包含空白值的 Insets 对象
@see Insets
@beaninfo bound: true attribute: visualUpdate true description: The space between the menubar's border and its contents

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.JMenuBar.getMargin()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回菜单栏的边框与其菜单之间的空白。如果以前不存在空白，它将创建一个大小为 0 的默认空白。
 
@return 包含空白值的 <code>Insets</code> 对象
@see Insets

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.processMouseEvent(MouseEvent event, javax.swing.MenuElement[] path, MenuSelectionManager manager)
<!-- END KEY -->
<!-- BEGIN DATA -->
实现为 <code>MenuElement</code>（不执行任何操作）。 

@see #getSubElements

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.processKeyEvent(KeyEvent e, javax.swing.MenuElement[] path, MenuSelectionManager manager)
<!-- END KEY -->
<!-- BEGIN DATA -->
实现为 <code>MenuElement</code>（不执行任何操作）。

@see #getSubElements

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.menuSelectionChanged(boolean isIncluded)
<!-- END KEY -->
<!-- BEGIN DATA -->

实现为 <code>MenuElement</code>（不执行任何操作）。

@see #getSubElements

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.MenuElement[] javax.swing.JMenuBar.getSubElements()
<!-- END KEY -->
<!-- BEGIN DATA -->

实现为 <code>MenuElement</code>（返回此菜单栏中的菜单）。这就是实现 <code>MenuElement</code> 接口的原因：以便菜单栏可视为与其他菜单元素相同。
@return 菜单栏中的菜单项所组成的数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JMenuBar.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->

实现为 <code>MenuElement</code>。返回此对象。 

@return 当前 <code>Component</code> (this)
@see #getSubElements

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JMenuBar.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JMenuBar</code> 的字符串表示形式。此方法仅在进行调试的时候使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。
 
@return  此 <code>JMenuBar</code> 的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JMenuBar.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 JMenuBar 相关联的 AccessibleContext。对于 JMenuBar，AccessibleContext 采取 AccessibleJMenuBar 的形式。必要时要创建新的 AccessibleJMenuBar 实例。

@return 用作此 JMenuBar 的 AccessibleContext 的 AccessibleJMenuBar

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JMenuBar.processKeyBinding(KeyStroke ks, KeyEvent e, int condition, boolean pressed)
<!-- END KEY -->
<!-- BEGIN DATA -->
子类化以检查所有子菜单。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>JComponent.addNotify</code> 以向当前键盘管理器注册此菜单栏。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.removeNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>JComponent.removeNotify</code> 以在当前键盘管理器中注销此菜单栏。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JMenuBar.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
请参见 JComponent.readObject() 以获取关于在 Swing 中进行序列化的信息。

<!-- END DATA -->
