<!-- BEGIN KEY -->
public class javax.swing.DefaultListSelectionModel extends java.lang.Object implements javax.swing.ListSelectionModel, java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
列表选择的默认数据模型。 
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.75 05/05/04
@author Philip Milne
@author Hans Muller
@see ListSelectionModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultListSelectionModel.getMinSelectionIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultListSelectionModel.getMaxSelectionIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultListSelectionModel.getValueIsAdjusting()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultListSelectionModel.getSelectionMode()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.setSelectionMode(int selectionMode)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultListSelectionModel.isSelectedIndex(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultListSelectionModel.isSelectionEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.addListSelectionListener(ListSelectionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.removeListSelectionListener(ListSelectionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.ListSelectionListener[] javax.swing.DefaultListSelectionModel.getListSelectionListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回已在此 <code>DefaultListSelectionModel</code> 上注册的所有列表选择侦听器组成的数组。

@return 此模型的所有 <code>ListSelectionListener</code>，如果当前没有已注册的列表选择侦听器，则返回一个空数组。

@see #addListSelectionListener
@see #removeListSelectionListener

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.DefaultListSelectionModel.fireValueChanged(boolean isAdjusting)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知侦听器已经结束了一系列的调整。 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.DefaultListSelectionModel.fireValueChanged(int firstIndex, int lastIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知 <code>ListSelectionListener</code> 选择的值已发生更改，该值在 <code>firstIndex</code> 和 <code>lastIndex</code> 组成的闭区间内。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.DefaultListSelectionModel.fireValueChanged(int firstIndex, int lastIndex, boolean isAdjusting)
<!-- END KEY -->
<!-- BEGIN DATA -->
@param firstIndex 区间中的第一个索引
@param lastIndex 区间中的最后一个索引
@param isAdjusting 如果这是一系列调整中的最终更改，则该参数为 true
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] javax.swing.DefaultListSelectionModel.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前已在此模型上注册为 <code><em>Foo</em>Listener</code> 的所有对象组成的数组。<code><em>Foo</em>Listener</code> 是用 <code>add<em>Foo</em>Listener</code> 方法注册的。
 <p>
可以使用 class 字面值来指定 <code>listenerType</code> 参数，如 <code><em>Foo</em>Listener.class</code>。例如，可以使用下面的代码查询 <code>DefaultListSelectionModel</code> 实例 <code>m</code> 的列表选择侦听器：
 
 <pre>ListSelectionListener[] lsls = (ListSelectionListener[])(m.getListeners(ListSelectionListener.class));</pre>

如果不存在这样的侦听器，则此方法将返回一个空数组。

@param listenerType 请求的侦听器类型；该参数应该指定一个从 <code>java.util.EventListener</code> 继承的接口
@return 在此模型上注册为 <code><em>Foo</em>Listener</code> 的所有对象组成的数组，如果没有添加这样的侦听器，则返回一个空数组
@exception ClassCastException 如果 <code>listenerType</code> 没有指定实现 <code>java.util.EventListener</code> 的类或接口

@see #getListSelectionListeners

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.setLeadAnchorNotificationEnabled(boolean flag)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 leadAnchorNotificationEnabled 标志的值。
@see		#isLeadAnchorNotificationEnabled()

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultListSelectionModel.isLeadAnchorNotificationEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>leadAnchorNotificationEnabled</code> 标志的值。当 <code>leadAnchorNotificationEnabled</code> 为 true 时，该模型生成具有限定范围的通知事件，该范围覆盖对选择所做的所有更改以及对 lead 和 anchor 索引所做的更改。将标志设置为 false 会导致事件的限定范围缩小，使其只包括那些已选择的或自上一次更改之后取消选择的元素。总之，该模型将继续内部维护 lead 和 anchor 变量。默认值为 true。
 <p>
注：在不更改选择的情况下更改 lead 或 anchor 是有可能的。通知这些更改常常很重要，比如需要在视图中更新新的 lead 或 anchor 时。因此，在更改默认值时，一定要小心谨慎。

@return	<code>leadAnchorNotificationEnabled</code> 标志的值
@see		#setLeadAnchorNotificationEnabled(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.clearSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.setSelectionInterval(int index0, int index1)
<!-- END KEY -->
<!-- BEGIN DATA -->
将选择更改为 {@code index0} 和 {@code index1}（包括）的范围之间。{@code index0} 不必小于等于 {@code index1}。
 <p>
 在 {@code SINGLE_SELECTION} 选择模式中，只使用第二个索引。
 <p>
 如果这表示对当前选择的更改，那么将向每个 {@code ListSelectionListener} 通知更改。
 <p>
 如果任一索引为 {@code -1}，则此方法不执行任何操作，并不带任何异常地返回。如果任一索引小于 {@code -1}，则抛出 {@code IndexOutOfBoundsException}。 
 
 @param index0 区间的一端
 @param index1 区间的另一端
 @throws IndexOutOfBoundsException 如果任一索引小于 {@code -1}（并且两个索引都不为 {@code -1}）
 @see #addListSelectionListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.addSelectionInterval(int index0, int index1)
<!-- END KEY -->
<!-- BEGIN DATA -->
 将选择更改为当前选择与 {@code index0} 和 {@code index1}（包括）之间索引的并集。
 <p>
 在 {@code SINGLE_SELECTION} 选择模式中，此方法等效于调用 {@code setSelectionInterval}，并且只使用第二个索引。在 {@code SINGLE_INTERVAL_SELECTION} 选择模式中，此方法与 {@code setSelectionInterval} 的作用完全相同，除非给定区间紧接现有选择或与现有选择重叠从而可用于增大它。
 <p>
 如果这表示对当前选择的更改，那么将向每个 {@code ListSelectionListener} 通知更改。注意，{@code index0} 不必小于等于 {@code index1}。
 <p>
 如果任一索引为 {@code -1}，则此方法不执行任何操作，并不带任何异常地返回。如果任一索引小于 {@code -1}，则抛出 {@code IndexOutOfBoundsException}。 
 
 @param index0 区间的一端
 @param index1 区间的另一端
 @throws IndexOutOfBoundsException 如果任一索引小于 {@code -1}（并且两个索引都不为 {@code -1}）
 @see #addListSelectionListener
 @see #setSelectionInterval

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.removeSelectionInterval(int index0, int index1)
<!-- END KEY -->
<!-- BEGIN DATA -->

将选择更改为当前选择与 {@code index0} 和 {@code index1}（包括）之间索引的差集。{@code index0} 不必小于等于 {@code index1}。
 <p>
 在 {@code SINGLE_INTERVAL_SELECTION} 选择模式中，如果移除操作将生成两个不相交的选择，则移除操作将通过该选择较大的一端延伸。例如，如果选择为 {@code 0-10}，提供索引 {@code 5,6}（按任意顺序），则所得选择为 {@code 0-4}。
 <p>
 如果这表示对当前选择的更改，那么将向每个 {@code ListSelectionListener} 通知更改。
 <p>
 如果任一索引为 {@code -1}，则此方法不执行任何操作，并不带任何异常地返回。如果任一索引小于 {@code -1}，则抛出 {@code IndexOutOfBoundsException}。 
 
 @param index0 区间的一端
 @param index1 区间的另一端
 @throws IndexOutOfBoundsException 如果任一索引小于 {@code -1}（并且两个索引都不为 {@code -1}）
 @see #addListSelectionListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.insertIndexInterval(int index, int length, boolean before)
<!-- END KEY -->
<!-- BEGIN DATA -->
从 index 之前/之后开始插入 length 个索引。如果 index 处的值本身处于已选状态，并且选择模式不是 SINGLE_SELECTION，则将新插入的所有项都设置为已选状态。否则将它们都设置为未选择状态。通常调用此方法来同步选择模型与数据模型中的相应更改。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.removeIndexInterval(int index0, int index1)
<!-- END KEY -->
<!-- BEGIN DATA -->
从选择模型中移除 index0,index1 区间中（包括两端点）的索引。通常调用此方法来同步选择模型与数据模型中的相应更改。注意，同往常一样，index0 不必 &lt;= index1。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.setValueIsAdjusting(boolean isAdjusting)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.DefaultListSelectionModel.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回显示并标识此对象的属性的字符串。

@return  此对象的 <code>String</code> 表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.DefaultListSelectionModel.clone() throws java.lang.CloneNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此选择模型的具有相同选择的副本。<code>listenerList</code> 没有被复制。

@exception CloneNotSupportedException 如果选择模型没有 (a) 实现 Cloneable 接口且 (b) 定义一个 <code>clone</code> 方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultListSelectionModel.getAnchorSelectionIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultListSelectionModel.getLeadSelectionIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.setAnchorSelectionIndex(int anchorIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 anchor 选择索引，并不作更改地保留所有选择值。如果 leadAnchorNotificationEnabled 为 true，则发送一个覆盖原有 anchor 单元格和新 anchor 单元格的通知。 

@see #getAnchorSelectionIndex
@see #setLeadSelectionIndex

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.moveLeadSelectionIndex(int leadIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 lead 选择索引，并不作更改地保留所有选择值。如果 leadAnchorNotificationEnabled 为 true，则发送一个覆盖原有 lead 单元格和新 lead 单元格的通知。

@param leadIndex 新的 lead 选择索引

@see #setAnchorSelectionIndex
@see #setLeadSelectionIndex
@see #getLeadSelectionIndex

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.setLeadSelectionIndex(int leadIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 lead 选择索引，确保 anchor 和新 lead 之间的值要么全部被选定，要么全部被取消选定。如果 anchor 索引处的值被选定，则首先清除范围 [anchor, oldLeadIndex] 中的所有值，然后选择范围 [anchor, newLeadIndex] 中的所有值，其中 oldLeadIndex 是原有的 leadIndex，newLeadIndex 是新的 leadIndex。 
 <p> 
如果 anchor 索引处的值未被选定，则反过来执行上述操作：选择原有范围中的值，并取消选择新范围中的值。 
 <p>
为此更改生成一个事件，并通知所有侦听器。为了在此事件中生成最小的限定范围，要一次完成该操作；那样广播的 ListSelectionEvent 中第一个和最后一个索引将指出由于此方法而实际更改了其值的单元格。如果分两步完成此操作，则选择状态上的效果将是相同的，但会生成两个事件，更改值的限定范围变得更宽，包括之前已清除但稍后又被设置的单元格。 
 <p>
可以在 UI 类的 <code>mouseDragged</code> 方法中使用此方法来扩展选择。  

@see #getLeadSelectionIndex
@see #setAnchorSelectionIndex

<!-- END DATA -->
