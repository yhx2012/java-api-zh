<!-- BEGIN KEY -->
public class javax.swing.JPanel extends javax.swing.JComponent implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>JPanel</code> 是一般轻量级容器。有关 JPanel 的示例和面向任务的文档，请参阅 <em>The Java Tutorial</em> 的 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/components/panel.html">How to Use Panels</a> 一节。
 <p>
<strong>警告：</strong>Swing 不是线程安全的。有关更多信息，请参阅 <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@beaninfo description: A generic lightweight container.
 
@version 1.46 12/19/03
@author Arnaud Weber
@author Steve Wilson

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JPanel(LayoutManager layout, boolean isDoubleBuffered)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定布局管理器和缓冲策略的新 JPanel。

@param layout  要使用的 LayoutManager
@param isDoubleBuffered  boolean 值，true 表示双缓冲，双缓冲使用更多内存空间实现快速、无闪烁的更新

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JPanel(LayoutManager layout)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定布局管理器的新缓冲 JPanel。

@param layout  要使用的 LayoutManager

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JPanel(boolean isDoubleBuffered)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有 <code>FlowLayout</code> 和指定缓冲策略的新 <code>JPanel</code>。如果 <code>isDoubleBuffered</code> 为 true，则 <code>JPanel</code> 将使用双缓冲。

@param isDoubleBuffered  boolean 值，true 表示双缓冲，双缓冲使用更多内存空间实现快速、无闪烁的更新

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JPanel()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有双缓冲和流布局的新 <code>JPanel</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPanel.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
利用当前外观的值重置 UI 属性。

@see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回呈现此组件的外观 (L&F) 对象。

@return 呈现此组件的 PanelUI 对象
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPanel.setUI(PanelUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置呈现此组件的外观 (L&F) 对象。

@param ui  PanelUI L&F 对象
@see UIDefaults#getUI
@since 1.4
@beaninfo bound:true hidden:true attribute: visualUpdate true description: The UI object that implements the Component's LookAndFeel. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JPanel.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定呈现此组件的 L&F 类名的字符串。

@return &quot;PanelUI&quot;
@see JComponent#getUIClassID
@see UIDefaults#getUI
@beaninfo expert: true description: A string that specifies the name of the L&F class.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JPanel.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 JPanel 的字符串表示形式。此方法仅在进行调试的时候使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可以为空，但不可以为 <code>null</code>。
 
@return  此 JPanel 的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 JPanel 关联的 AccessibleContext。对于 JPanel，AccessibleContext 采取 AccessibleJPanel 的形式。必要时要创建新的 AccessibleJPanel 实例。

@return 一个 AccessibleJPanel，它充当此 JPanel 的 AccessibleContext

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JPanel.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

有关 Swing 中更多序列化的信息，请参阅 JComponent 中的 readObject() 和 writeObject()。

<!-- END DATA -->
