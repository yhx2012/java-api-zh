<!-- BEGIN KEY -->
public class javax.swing.JComboBox extends javax.swing.JComponent implements java.awt.ItemSelectable, javax.swing.event.ListDataListener, java.awt.event.ActionListener, javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
将按钮或可编辑字段与下拉列表组合的组件。用户可以从下拉列表中选择值，下拉列表在用户请求时显示。如果使组合框处于可编辑状态，则组合框将包括用户可在其中键入值的可编辑字段。
 
 <p>
 <strong>警告：</strong>Swing 不是线程安全的。有关更多信息，请参阅 <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

 <p>
有关更多信息，请参阅 <a href="http://java.sun.com/Series/Tutorial/index.html"><em>The Java Tutorial</em> 中的 <a href="http://java.sun.com/docs/books/tutorial/uiswing/components/combobox.html">How to Use Combo Boxes</a> 一节。
 <p>

@see ComboBoxModel
@see DefaultComboBoxModel

@beaninfo attribute: isContainer false description: A combination of a text field and a drop-down list.

@version 1.126 05/05/04
@author Arnaud Weber
@author Mark Davidson

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.ComboBoxModel javax.swing.JComboBox.dataModel
<!-- END KEY -->
<!-- BEGIN DATA -->
此受保护字段是特定于实现的。不要直接访问或重写。要使用存取方法。

@see #getModel
@see #setModel

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.ListCellRenderer javax.swing.JComboBox.renderer
<!-- END KEY -->
<!-- BEGIN DATA -->
此受保护字段是特定于实现的。不要直接访问或重写。要使用存取方法。

@see #getRenderer
@see #setRenderer

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.ComboBoxEditor javax.swing.JComboBox.editor
<!-- END KEY -->
<!-- BEGIN DATA -->
此受保护字段是特定于实现的。不要直接访问或重写。要使用存取方法。

@see #getEditor
@see #setEditor

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.JComboBox.maximumRowCount
<!-- END KEY -->
<!-- BEGIN DATA -->
此受保护字段是特定于实现的。不要直接访问或重写。要使用存取方法。

@see #getMaximumRowCount
@see #setMaximumRowCount

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JComboBox.isEditable
<!-- END KEY -->
<!-- BEGIN DATA -->
此受保护字段是特定于实现的。不要直接访问或重写。要使用存取方法。

@see #isEditable
@see #setEditable

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JComboBox.KeySelectionManager javax.swing.JComboBox.keySelectionManager
<!-- END KEY -->
<!-- BEGIN DATA -->
此受保护字段是特定于实现的。不要直接访问或重写。要使用存取方法。

@see #setKeySelectionManager
@see #getKeySelectionManager

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JComboBox.actionCommand
<!-- END KEY -->
<!-- BEGIN DATA -->
此受保护字段是特定于实现的。不要直接访问或重写。要使用存取方法。

@see #setActionCommand
@see #getActionCommand

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JComboBox.lightWeightPopupEnabled
<!-- END KEY -->
<!-- BEGIN DATA -->
此受保护字段是特定于实现的。不要直接访问或重写。要使用存取方法。

@see #setLightWeightPopupEnabled
@see #isLightWeightPopupEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object javax.swing.JComboBox.selectedItemReminder
<!-- END KEY -->
<!-- BEGIN DATA -->
此受保护字段是特定于实现的。不要直接访问或重写。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JComboBox(ComboBoxModel aModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>JComboBox</code>，其项取自现有的 <code>ComboBoxModel</code>。由于提供了 <code>ComboBoxModel</code>，使用此构造方法创建的组合框不创建默认组合框模型，这可能影响插入、移除和添加方法的行为方式。

@param aModel 提供显示的项列表的 <code>ComboBoxModel</code>
@see DefaultComboBoxModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JComboBox(java.lang.Object[] items)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建包含指定数组中的元素的 <code>JComboBox</code>。默认情况下，选择数组中的第一项（因而也选择了该项的数据模型）。

@param items  要插入到组合框的对象数组
@see DefaultComboBoxModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JComboBox(java.util.Vector<?> items)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建包含指定 Vector 中的元素的 <code>JComboBox</code>。默认情况下，选择数组中的第一项（因而也选择了该项的数据模型）。

@param items  要插入到组合框的向量数组
@see DefaultComboBoxModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JComboBox()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有默认数据模型的 <code>JComboBox</code>。默认的数据模型为空对象列表。使用 <code>addItem</code> 添加项。默认情况下，选择数据模型中的第一项。

@see DefaultComboBoxModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setUI(ComboBoxUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置呈现此组件的 L&F 对象。

@param ui  <code>ComboBoxUI</code> L&F 对象
@see UIDefaults#getUI

@beaninfo bound: true hidden: true attribute: visualUpdate true description: The UI object that implements the Component's LookAndFeel. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
将 UI 属性重置为当前外观的值。

@see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JComboBox.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回呈现此组件的 L&F 类的名称。

@return 字符串&ldquo;ComboBoxUI&rdquo;
@see JComponent#getUIClassID
@see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.ComboBoxUI javax.swing.JComboBox.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回呈现此组件的 L&F 对象。

@return 呈现此组件的 ComboBoxUI 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setModel(ComboBoxModel aModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>JComboBox</code> 用于获取项列表的数据模型。

@param aModel 提供显示的项列表的 <code>ComboBoxModel</code>
 
@beaninfo bound: true description: Model that the combo box uses to get data to display.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ComboBoxModel javax.swing.JComboBox.getModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>JComboBox</code> 当前使用的数据模型。

@return 提供显示的项列表的 <code>ComboBoxModel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setLightWeightPopupEnabled(boolean aFlag)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>lightWeightPopupEnabled</code> 属性，该属性提供一个提示：是应该使用重量级 <code>Component</code>（如 <code>Panel</code> 或 <code>Window</code>）还是轻量级 <code>Component</code> 来包含 <code>JComboBox</code>。使用轻量级还是重量级组件，最终由 <code>JComboBox</code> 决定。轻量级窗口比重量级窗口更有效，但是轻量级和重量级组件在 GUI 中不能很好地混合使用。如果应用程序混合使用轻量级和重量级组件，则应该禁用轻量级弹出窗口。除非由外观另行指定，否则 <code>lightWeightPopupEnabled</code> 属性的默认值为 <code>true</code>。某些外观始终使用重量级弹出窗口，不管此属性的值如何。
 <p>
请参阅 <a href="http://java.sun.com/products/jfc/tsc"><em>The Swing Connection</em></a> 上的文章 <a href="http://java.sun.com/products/jfc/tsc/articles/mixing/index.html">Mixing Heavy and Light Components</a>。此方法触发属性更改事件。

@param aFlag 如果为 <code>true</code>，则需要轻量级弹出窗口

@beaninfo bound: true expert: true description: Set to <code>false</code> to require heavyweight popups.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JComboBox.isLightWeightPopupEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>lightWeightPopupEnabled</code> 属性的值。

@return <code>lightWeightPopupEnabled</code> 属性的值
@see #setLightWeightPopupEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setEditable(boolean aFlag)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定 <code>JComboBox</code> 字段是否可编辑。可编辑的 <code>JComboBox</code> 允许用户在字段中键入内容或者从列表中选择项来初始化字段，执行此操作后，该字段就可编辑了。（编辑仅影响字段，列表项保持原样。）不可编辑的 <code>JComboBox</code> 在字段中显示所选项，但不能修改该选择。

@param aFlag 一个 boolean 值，其中 true 指示字段可编辑。
 
@beaninfo bound: true preferred:true description: If true, the user can type a new value in the combo box.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JComboBox.isEditable()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>JComboBox</code> 可编辑，则返回 true。默认情况下，组合框不可编辑。
 
@return 如果 <code>JComboBox</code> 可编辑，则返回 true；否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setMaximumRowCount(int count)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>JComboBox</code> 显示的最大行数。如果模型中的对象数大于 count，则组合框使用滚动条。

@param count 一个整数，它指定使用滚动条前要在列表中显示的最大项数
@beaninfo bound: true preferred: true description: The maximum number of rows the popup should have

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JComboBox.getMaximumRowCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回组合框不使用滚动条可以显示的最大项数

@return 一个整数，它指定使用滚动条前列表中显示的最大项数

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setRenderer(ListCellRenderer aRenderer)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置渲染器，该渲染器用于绘制列表项和从 JComboBox 字段的列表中选择的项。该渲染器在 JComboBox 不可编辑时使用。如果其可编辑，则使用编辑器呈现和编辑所选项。
 <p>
默认渲染器显示字符串或图标。其他渲染器可处理图形图像和复合选项。
 <p>
要显示所选项，请调用 <code>aRenderer.getListCellRendererComponent</code>，其中传递列表对象和索引 -1。
  
@param aRenderer  显示所选项的 <code>ListCellRenderer</code>
@see #setEditor
@beaninfo bound: true expert: true description: The renderer that paints the item selected in the list.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ListCellRenderer javax.swing.JComboBox.getRenderer()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于显示 <code>JComboBox</code> 字段中所选项的渲染器。
  
@return  显示所选项的 <code>ListCellRenderer</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setEditor(ComboBoxEditor anEditor)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于绘制和编辑 <code>JComboBox</code> 字段中所选项的编辑器。仅当接收的 <code>JComboBox</code> 可编辑时才使用编辑器。如果不可编辑，则组合框使用渲染器绘制所选项。
  
@param anEditor  显示所选项的 <code>ComboBoxEditor</code>
@see #setRenderer
@beaninfo bound: true expert: true description: The editor that combo box uses to edit the current value

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ComboBoxEditor javax.swing.JComboBox.getEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于绘制和编辑 <code>JComboBox</code> 字段中所选项的编辑器。
  
@return  显示所选项的 <code>ComboBoxEditor</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setSelectedItem(Object anObject)
<!-- END KEY -->
<!-- BEGIN DATA -->

将组合框显示区域中所选项设置为参数中的对象。如果 <code>anObject</code> 在列表中，则显示区域显示所选的 <code>anObject</code>。
 <p>
如果 <code>anObject</code> <i>不</i> 在列表中，且组合框不可编辑，则不会更改显示区域中的当前选择。对于可编辑的组合框，选择将更改为 <code>anObject</code>。
 <p>
如果此操作造成所选项发生更改，则添加到组合框的 <code>ItemListener</code> 将获得一个或两个 <code>ItemEvent</code> 通知。如果有当前所选项，则将触发 <code>ItemEvent</code>，而状态更改将为 <code>ItemEvent.DESELECTED</code>。如果 <code>anObject</code> 在列表中，但不是当前选择的项，则将触发 <code>ItemEvent</code>，而状态更改将为 <code>ItemEvent.SELECTED</code>。
 <p>
调用此方法时，添加到组合框的 <code>ActionListener</code> 将获得 <code>ActionEvent</code> 通知。

@param anObject  要选择的列表对象；使用 <code>null</code> 清除选择
@beaninfo preferred: true description: Sets the selected item in the JComboBox.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.JComboBox.getSelectedItem()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前所选项。
 <p>
如果组合框可编辑，则可能尚未使用 <code>addItem</code>、<code>insertItemAt</code> 或数据构造方法将此值添加到组合框中。
 
@return 当前选择的 Object
@see #setSelectedItem

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setSelectedIndex(int anIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
选择索引 <code>anIndex</code> 处的项。

@param anIndex 指定要选择的列表项的整数，其中 0 指定列表中的第一项，-1 指示没有作出选择
@exception IllegalArgumentException 如果 <code>anIndex</code> &lt; -1 或者 <code>anIndex</code> 大于等于列表大小
@beaninfo preferred: true description: The item at index is selected.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JComboBox.getSelectedIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回列表中与给定项匹配的第一个选项。如果 <code>JComboBox</code> 允许选择不在列表中的项，则结果并非不总是确定的。如果不存在所选项或者用户指定的项不在列表中，则返回 -1。

@return 指定当前选择的列表项的整数，其中 0 指定列表中的第一项；如果没有选择任何项或者当前所选项不在列表中，则返回 -1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.JComboBox.getPrototypeDisplayValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回&ldquo;原型显示&rdquo;值，即用于计算显示高度和宽度的 Object。

@return <code>prototypeDisplayValue</code> 属性的值
@see #setPrototypeDisplayValue
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setPrototypeDisplayValue(Object prototypeDisplayValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于计算 UI 部分的显示大小的原型显示值。 
 <p>
如果指定了原型显示值，则组合框首选大小的计算方式是：利用原型显示值配置渲染器，然后获取其首选大小。指定首选显示值在组合框将显示大量数据时往往很有用。如果没有指定原型显示值，则必须为模型中的每个值及其获取的首选大小配置渲染器，其花费相对昂贵。
 
@param prototypeDisplayValue
@see #getPrototypeDisplayValue
@since 1.4
@beaninfo bound: true attribute: visualUpdate true description: The display prototype value, used to compute display width and height.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.addItem(Object anObject)
<!-- END KEY -->
<!-- BEGIN DATA -->

为项列表添加项。仅当 <code>JComboBox</code> 使用可变数据模型时此方法才有效。
 <p>
<strong>警告：</strong>如果添加复制的 String 对象，可能会发生焦点和键盘导航问题。解决方法是，添加新对象而不是 String 对象，并且确保定义了 toString() 方法。例如：
 <pre>
   comboBox.addItem(makeObj(&quot;Item 1&quot;));
   comboBox.addItem(makeObj(&quot;Item 1&quot;));
   ...
   private Object makeObj(final String item)  {
     return new Object() { public String toString() { return item; } };
   }
 </pre>

@param anObject 要添加到列表的 Object
@see MutableComboBoxModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.insertItemAt(Object anObject, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->

在项列表中的给定索引处插入项。仅当 <code>JComboBox</code> 使用可变数据模型时此方法才有效。

@param anObject 要添加到列表的 <code>Object</code>
@param index    指定添加项的位置的整数
@see MutableComboBoxModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.removeItem(Object anObject)
<!-- END KEY -->
<!-- BEGIN DATA -->

从项列表中移除项。仅当 <code>JComboBox</code> 使用可变数据模型时此方法才有效。

@param anObject  要从项列表中移除的对象
@see MutableComboBoxModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.removeItemAt(int anIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->

移除 <code>anIndex</code> 处的项。仅当 <code>JComboBox</code> 使用可变数据模型时此方法才有效。

@param anIndex  指定要移除的项索引的 int，其中 0 指示列表中的第一项
@see MutableComboBoxModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.removeAllItems()
<!-- END KEY -->
<!-- BEGIN DATA -->

从项列表中移除所有项。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.showPopup()
<!-- END KEY -->
<!-- BEGIN DATA -->

促使组合框显示其弹出窗口。
@see #setPopupVisible

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.hidePopup()
<!-- END KEY -->
<!-- BEGIN DATA -->

促使组合框关闭其弹出窗口。
@see #setPopupVisible

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setPopupVisible(boolean v)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置弹出窗口的可见性。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JComboBox.isPopupVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->

确定弹出窗口的可见性。

@return 如果弹出窗口可见，则返回 true；否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.addItemListener(ItemListener aListener)
<!-- END KEY -->
<!-- BEGIN DATA -->

添加 <code>ItemListener</code>。
 <p>
当所选项更改时，<code>aListener</code> 将接收一个或两个 <code>ItemEvent</code>。

@param aListener 要通知的 <code>ItemListener</code>
@see #setSelectedItem

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.removeItemListener(ItemListener aListener)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除 <code>ItemListener</code>。

@param aListener  要移除的 <code>ItemListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ItemListener[] javax.swing.JComboBox.getItemListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回使用 addItemListener() 添加到此 JComboBox 中的所有 <code>ItemListener</code> 组成的数组。

@return 添加的所有 <code>ItemListener</code>，如果没有添加侦听器，则返回一个空数组
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.addActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->

添加 <code>ActionListener</code>。 
 <p>
当作出选择时，<code>ActionListener</code> 将接收一个 <code>ActionEvent</code>。如果组合框可编辑，则在编辑停止时将触发 <code>ActionEvent</code>。

@param l  要通知的 <code>ActionListener</code>
@see #setSelectedItem

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.removeActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除 <code>ActionListener</code>。

@param l  要移除的 <code>ActionListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ActionListener[] javax.swing.JComboBox.getActionListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回使用 addActionListener() 添加到此 JComboBox 的所有 <code>ActionListener</code> 组成的数组。

@return 所有添加的 <code>ActionListener</code>；如果没有添加侦听器，则返回一个空数组
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.addPopupMenuListener(PopupMenuListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加 <code>PopupMenu</code> 侦听器，该侦听器将侦听取自组合框弹出部分的通知消息。 
 <p>
对于 Java 附带的所有标准外观，组合框的弹出列表部分将被实现为 <code>JPopupMenu</code>。自定义外观可能不以这种方式实现组合框的弹出列表部分，因此不接收通知。

@param l  要添加的 <code>PopupMenuListener</code>
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.removePopupMenuListener(PopupMenuListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除 <code>PopupMenuListener</code>。

@param l  要移除的 <code>PopupMenuListener</code>
@see #addPopupMenuListener
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.PopupMenuListener[] javax.swing.JComboBox.getPopupMenuListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回利用 addPopupMenuListener() 添加到此 JComboBox 的所有 <code>PopupMenuListener</code> 组成的数组。

@return 所有添加的 <code>PopupMenuListener</code>，如果没有添加侦听器，则返回一个空数组
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.firePopupMenuWillBecomeVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知 <code>PopupMenuListener</code> 组合框的弹出部分将变得可见。
 <p>
此方法是公共方法，但只能由 UI 委托调用。
@see #addPopupMenuListener
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.firePopupMenuWillBecomeInvisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知 <code>PopupMenuListener</code> 组合框的弹出部分已变得不可见。
 <p>
此方法是公共方法，但只能由 UI 委托调用。
@see #addPopupMenuListener
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.firePopupMenuCanceled()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知 <code>PopupMenuListener</code> 组合框的弹出部分已被取消。
 <p>
此方法是公共方法，但只能由 UI 委托调用。
@see #addPopupMenuListener
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setActionCommand(String aCommand)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置发送到动作侦听器的事件中应该包括的动作命令。

@param aCommand  包含发送到动作侦听器的&ldquo;命令&rdquo;的字符串；根据其所接受的命令，相同的侦听器可以做不同的事情

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JComboBox.getActionCommand()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回发送到动作侦听器的事件中包括的动作命令。

@return  包含发送到动作侦听器的&ldquo;命令&rdquo;的字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setAction(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>ActionEvent</code> 源的 <code>Action</code>。新的 <code>Action</code> 替换以前设置的所有 <code>Action</code>，而不影响通过 <code>addActionListener</code> 独立添加的 <code>ActionListener</code>。如果 <code>Action</code> 已经是一个注册到 <code>ActionEvent</code> 源的 <code>ActionListener</code>，则不对它进行重新注册。

 <p>
 设置 <code>Action</code> 将导致立即更改<a href="Action.html#buttonActions">支持 <code>Action</code> 的 Swing 组件</a>中所描述的所有属性。随后，组合框的属性将随 <code>Action</code> 属性的更改自动更新。
 <p>
 此方法使用三个其他方法来设置和帮助跟踪 <code>Action</code> 的属性值。它使用 <code>configurePropertiesFromAction</code> 方法立即更改组合框的属性。要跟踪 <code>Action</code> 属性值的更改，此方法应注册 <code>createActionPropertyChangeListener</code> 所返回的 <code>PropertyChangeListener</code>。当 {@code Action} 中的属性更改时，默认 {@code PropertyChangeListener} 调用 {@code actionPropertyChanged} 方法。

@param a <code>JComboBox</code> 的 <code>Action</code>，或者 <code>null</code>。
@since 1.3
@see Action
@see #getAction
@see #configurePropertiesFromAction
@see #createActionPropertyChangeListener
@see #actionPropertyChanged 
@beaninfo bound: true attribute: visualUpdate true description: the Action instance connected with this ActionEvent source

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Action javax.swing.JComboBox.getAction()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>ActionEvent</code> 源当前设置的 <code>Action</code>，如果没有设置任何 <code>Action</code>，则返回 <code>null</code>。

@return 此 <code>ActionEvent</code> 源的 <code>Action</code>；或者 <code>null</code>
@since 1.3
@see Action
@see #setAction

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JComboBox.configurePropertiesFromAction(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 在此组合框上设置属性以匹配指定 <code>Action</code> 中的属性。有关设置何种属性的更多信息，请参阅<a href="Action.html#buttonActions">支持 <code>Action</code> 的 Swing 组件</a>。 

@param a 从其获取属性的 <code>Action</code>，或者 <code>null</code>
@since 1.3
@see Action
@see #setAction

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeListener javax.swing.JComboBox.createActionPropertyChangeListener(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回一个 <code>PropertyChangeListener</code>，它负责侦听指定 <code>Action</code> 的更改并更新适当属性。
 <p>
 <b>警告：</b>如果子类化此方法，则不要创建匿名内部类。如果执行组合框的生存期，则它将被绑定到 <code>Action</code> 的生存期。

@param a 组合框的动作
@since 1.3
@see Action
@see #setAction

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JComboBox.actionPropertyChanged(Action action, String propertyName)
<!-- END KEY -->
<!-- BEGIN DATA -->
更新组合框的状态以响应关联动作中的属性更改。从 {@code createActionPropertyChangeListener} 所返回的 {@code PropertyChangeListener} 中调用此方法。子类通常不需要调用此方法。支持其他 {@code Action} 属性的子类应该重写此方法和 {@code configurePropertiesFromAction}。
 <p>
 有关此方法设置的属性列表，请参阅<a href="Action.html#buttonActions">支持的 <code>Action</code> 的 Swing 组件</a>下的表。

 @param action 与此组合框关联的 <code>Action</code> 
 @param propertyName 更改的属性名称
 @since 1.6
 @see Action
 @see #configurePropertiesFromAction

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JComboBox.fireItemStateChanged(ItemEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有需要此事件类型的通知的已注册侦听器。
@param e  需要的事件
  
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JComboBox.fireActionEvent()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有需要此事件类型的通知的已注册侦听器。
  
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JComboBox.selectedItemChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->
此受保护方法是特定于实现的。不要直接访问或重写。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] javax.swing.JComboBox.getSelectedObjects()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回包含所选项的数组。实现此方法是为了与 <code>ItemSelectable</code> 兼容。

@return 包含一个元素（所选项）的 <code>Object</code> 数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.actionPerformed(ActionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->

此方法由于实现的副作用而存在的公共方法。不要调用或重写。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.contentsChanged(ListDataEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法作为实现的副作用存在的公共方法。不要调用或重写。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.intervalAdded(ListDataEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法作为实现的副作用存在的公共方法。不要调用或重写。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.intervalRemoved(ListDataEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法作为实现的副作用存在的公共方法。不要调用或重写。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JComboBox.selectWithKeyChar(char keyChar)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果存在与指定键盘字符相对应的项，则选择该列表项并返回 true。否则，返回 false。

@param keyChar 一个 char，它通常是用户键入的键盘键

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
启用组合框以便可以选择项。禁用组合框时，无法选择项并且无法在其字段中键入值（如果它是可编辑的）。

@param b 一个 boolean 值，为 true 时，启用该组件，为 false 时，禁用该组件
@beaninfo bound: true preferred: true description: Whether the combo box is enabled.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.configureEditor(ComboBoxEditor anEditor, Object anItem)
<!-- END KEY -->
<!-- BEGIN DATA -->
利用指定项初始化编辑器。
                                 
@param anEditor 显示组合框字段中的列表项，并可以对其进行编辑的 <code>ComboBoxEditor</code>
@param anItem   要在字段中显示和编辑的对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.processKeyEvent(KeyEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理 <code>KeyEvent</code>，查找 Tab 键。如果找不到 Tab 键，则关闭弹出窗口。

@param e  包含按下的键盘键的 <code>KeyEvent</code>  

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setKeySelectionManager(JComboBox.KeySelectionManager aManager)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置将键盘字符转换为列表选择的对象。通常，第一个字符匹配的第一个选择将成为所选项。

@beaninfo expert: true description: The objects that changes the selection when a key is pressed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JComboBox.KeySelectionManager javax.swing.JComboBox.getKeySelectionManager()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回列表的键选择管理器。

@return 当前使用的 <code>KeySelectionManager</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JComboBox.getItemCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回列表中的项数。

@return 等于列表中项数的整数

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.JComboBox.getItemAt(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定索引处的列表项。如果 <code>index</code> 超出范围（小于零或者大于等于列表大小），则返回 <code>null</code>。

@param index  指示列表位置的整数，其中第一项从零开始
@return 该列表位置上的 <code>Object</code>；如果超出范围，则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JComboBox.KeySelectionManager javax.swing.JComboBox.createDefaultKeySelectionManager()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回默认键选择管理器的实例。

@return 列表当前使用的 <code>KeySelectionManager</code>
@see #setKeySelectionManager

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JComboBox.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JComboBox</code> 的字符串表示形式。此方法仅在进行调试时使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可以为空，但不可以为 <code>null</code>。
 
@return  此 <code>JComboBox</code> 的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JComboBox.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 JComboBox 关联的 AccessibleContext。对于组合框，AccessibleContext 采用 AccessibleJComboBox 的形式。如有必要，可创建一个新的 AccessibleJComboBox 实例。

@return 充当此 JComboBox 的 AccessibleContext 的 AccessibleJComboBox

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JComboBox.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

有关 Swing 中序列化的更多信息，请参阅 <code>JComponent</code> 中的 <code>readObject</code> 和 </code>writeObject</code>。

<!-- END DATA -->
