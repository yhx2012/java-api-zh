<!-- BEGIN KEY -->
public class javax.swing.DefaultDesktopManager extends java.lang.Object implements javax.swing.DesktopManager, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
此类是 <code>DesktopManager</code> 的实现。它当前实现了在任意父级中管理 <code>JInternalFrame</code> 的基本行为。不是 <code>JDesktop</code> 的子级的 <code>JInternalFrame</code> 将使用此组件来处理其类似桌面的操作。
<p>此类为各种 JInternalFrame 方法提供策略，不应该直接调用，而应该在 DesktopManager 中调用各种 JInternalFrame 方法。</p>

@see JDesktopPane
@see JInternalFrame
@version 1.52 12/19/03
@author David Kloba
@author Steve Wilson

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultDesktopManager.openFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
通常不调用此方法。如果调用此方法，它会试着确定来自窗体的 desktopIcon 的适当父窗体。如果成功添加窗体，则要从其父级中移除 desktopIcon。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultDesktopManager.closeFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
从父窗体中移除窗体，如有必要，还要移除 <code>desktopIcon</code>。
@param   f   要移除的 <code>JInternalFrame</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultDesktopManager.maximizeFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
重新调整窗体的大小，使其满足其父窗体的限制。
@param   f   要重新调整的窗体

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultDesktopManager.minimizeFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
使窗体恢复回调用 <code>maximizeFrame</code> 之前的大小和位置。
@param   f   要恢复的 <code>JInternalFrame</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultDesktopManager.iconifyFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
从父窗体中移除窗体，并将其 <code>desktopIcon</code> 添加到父窗体中。
@param   f   要图标化的 <code>JInternalFrame</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultDesktopManager.deiconifyFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
从父窗体中移除 desktopIcon，并将其窗体添加到父窗体中。
@param   f   要取消图标化的 <code>JInternalFrame</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultDesktopManager.activateFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法将激活 <b>f</b>，将它移动到前台。此方法将当前活动窗体（如果有）的 <code>IS_SELECTED_PROPERTY</code> 设置为 <code>false</code>。在所有层中，只能有一个活动窗体。
@param   f   要激活的 <code>JInternalFrame</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultDesktopManager.dragFrame(JComponent f, int newX, int newY)
<!-- END KEY -->
<!-- BEGIN DATA -->

将正被拖动窗体的可见位置移动到指定位置。发生此操作的方式随使用的拖动算法而不同。在调用 <code>endDraggingFrame</code> 之前，窗体的实际逻辑位置可能一直保持不变。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultDesktopManager.resizeFrame(JComponent f, int newX, int newY, int newWidth, int newHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用新值调用 <code>setBoundsForFrame</code>。
@param f 要重新调整大小的组件
@param newX 新的 x 坐标
@param newY 新的 y 坐标
@param newWidth 新的宽度
@param newHeight 新的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultDesktopManager.setBoundsForFrame(JComponent f, int newX, int newY, int newWidth, int newHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法移动 <code>JComponent</code> 并重新绘制已毁坏的区域。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.DefaultDesktopManager.removeIconFor(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
在需要时移除 <b>f</b> 的 desktopIcon 的便捷方法。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.DefaultDesktopManager.getBoundsForIconOf(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
iconifyFrame() 代码调用此方法来确定 desktopIcon 的适当边界。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.DefaultDesktopManager.setPreviousBounds(JInternalFrame f, Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->
在进行 maximize 调用之前存储组件的边界。
@param f 要重新调整大小的组件
@param r 要保存的普通边界

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.DefaultDesktopManager.getPreviousBounds(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
在将组件最大化之前，获得该组件的普通边界。
@param f 感兴趣的 <code>JInternalFrame</code>
@return 组件的普通边界

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.DefaultDesktopManager.setWasIcon(JInternalFrame f, Boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
设定组件已被图标化并且 <code>desktopIcon</code> 的边界是有效的。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.DefaultDesktopManager.wasIcon(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果组件已被图标化并且 <code>desktopIcon</code> 的边界是有效的，则返回 <code>true</code>，否则返回 <code>false</code>。

@param f 感兴趣的 <code>JInternalFrame</code>
@return 如果组件已经被图标化，则返回 <code>true</code>；否则返回 <code>false</code>

<!-- END DATA -->
