<!-- BEGIN KEY -->
public class javax.swing.BoxLayout extends java.lang.Object implements java.awt.LayoutManager2, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
允许垂直或水平布置多个组件的布局管理器。这些组件将不包装，因此举例来说，垂直排列的组件在重新调整框架的大小时仍然被垂直排列。 
 <TABLE ALIGN="RIGHT" BORDER="0" SUMMARY="layout">
    <TR>
      <TD ALIGN="CENTER">
         <P ALIGN="CENTER"><IMG SRC="doc-files/BoxLayout-1.gif" 
          alt="以下文本是对此图像的描述。"
          WIDTH="191" HEIGHT="201" ALIGN="BOTTOM" BORDER="0">
      </TD>
    </TR>
 </TABLE>
 <p>
用水平组件和垂直组件的不同组合嵌套多面板的作用类似于 GridBagLayout，但没那么复杂。该图显示了两个水平排列的面板，每个面板都包含 3 个垂直排列的组件。

<p> BoxLayout 管理器是用 axis 参数构造的，该参数指定了将进行的布局类型。有四个选择：

<blockquote><b><tt>X_AXIS</tt></b>：从左到右水平布置组件。</blockquote>
 
<blockquote><b><tt>Y_AXIS</tt></b>：从上到下垂直布置组件。</blockquote>
 
<blockquote><b><tt>LINE_AXIS</tt></b>：根据容器的 <tt>ComponentOrientation</tt> 属性，按照文字在一行中的排列方式布置组件。如果容器的 <tt>ComponentOrientation</tt> 表示水平，则将组件水平放置，否则将它们垂直放置。对于水平方向，如果容器的 <tt>ComponentOrientation</tt> 表示从左到右，则组件从左到右放置，否则将它们从右到左放置。对于垂直方向，组件总是从上到下放置的。</blockquote>
 
<blockquote><b><tt>PAGE_AXIS</tt></b>：根据容器的 <tt>ComponentOrientation</tt> 属性，按照文本行在一页中的排列方式布置组件。如果容器的 <tt>ComponentOrientation</tt> 表示水平，则将组件垂直放置，否则将它们水平放置。对于水平方向，如果容器的 <tt>ComponentOrientation</tt> 表示从左到右，则组件从左到右放置，否则将它们从右到左放置。对于垂直方向，组件总是从上向下放置的。</blockquote>
 <p>
对于所有方向，组件按照将它们添加到容器中的顺序排列。
 <p>
BoxLayout 试图按照组件的首选宽度（对于水平布局）或首选高度（对于垂直布局）来排列它们。对于水平布局，如果并不是所有的组件都具有相同的高度，则 BoxLayout 会试图让所有组件都具有最高组件的高度。如果对于某一特定组件而言这是不可能的，则 BoxLayout 会根据该组件的 Y 调整值对它进行垂直调整。默认情况下，组件的 Y 调整值为 0.5，这意味着组件的垂直中心应该与其他 Y 调整值为 0.5 的组件的垂直中心具有相同 Y 坐标。
 <p>
同样地，对于垂直布局，BoxLayout 试图让列中的所有组件具有最宽组件的宽度。如果这样做失败，则 BoxLayout 会根据这些组件的 X 调整值对它进行水平调整。对于 <code>PAGE_AXIS</code> 布局，基于组件的开始边水平调整。换句话说，如果容器的 <code>ComponentOrientation</code> 表示从左到右，则 X 调整值为 0.0 意味着组件的左边缘，否则它意味着组件的右边缘。
 <p>
许多程序使用 Box 类，而不是直接使用 BoxLayout。Box 类是使用 BoxLayout 的轻量级容器。它还提供了一些帮助您很好地使用 BoxLayout 的便利方法。要获取您想要的排列，将组件添加到多个嵌套的 box 中是一种功能强大的方法。
 <p>
有关更多信息和示例，请参阅 <em>The Java Tutorial</em> 中的 <a  href="http://java.sun.com/docs/books/tutorial/uiswing/layout/box.html">How to Use BoxLayout</a> 一节。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@see Box
@see java.awt.ComponentOrientation
@see JComponent#getAlignmentX
@see JComponent#getAlignmentY

@author   Timothy Prinzing
@version 1.34 12/19/03 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.BoxLayout.X_AXIS
<!-- END KEY -->
<!-- BEGIN DATA -->
指定组件应该从左到右放置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.BoxLayout.Y_AXIS
<!-- END KEY -->
<!-- BEGIN DATA -->
指定组件应该从上到下放置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.BoxLayout.LINE_AXIS
<!-- END KEY -->
<!-- BEGIN DATA -->
指定应该根据目标容器的 <code>ComponentOrientation</code> 属性确定的文本行方向放置组件。  

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.BoxLayout.PAGE_AXIS
<!-- END KEY -->
<!-- BEGIN DATA -->
指定应该根据目标容器的 <code>ComponentOrientation</code> 属性确定的文本行在页面中的流向来放置组件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.BoxLayout(Container target, int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个将沿给定轴放置组件的布局管理器。  

@param target  需要布置的容器
@param axis  布置组件时使用的轴。它可以是以下值之一：<code>BoxLayout.X_AXIS</code>、<code>BoxLayout.Y_AXIS</code>、<code>BoxLayout.LINE_AXIS</code> 或 <code>BoxLayout.PAGE_AXIS</code>

@exception  AWTError  如果 <code>axis</code> 的值无效 

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.awt.Container javax.swing.BoxLayout.getTarget()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回使用此布局管理器的容器。

 @return 使用此布局管理器的容器

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.swing.BoxLayout.getAxis()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回用于布局组件的轴。返回下列轴之一：<code>BoxLayout.X_AXIS</code>、<code>BoxLayout.Y_AXIS</code>、<code>BoxLayout.LINE_AXIS</code> 或 <code>BoxLayout.PAGE_AXIS</code>

 @return 用于布局组件的轴

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.BoxLayout.invalidateLayout(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
指示一个子容器已经更改其布局相关信息，因此应该刷新所有已缓存的计算结果。
 <p>
在 Container 上调用 invalidate 方法时，由 AWT 调用此方法。因为可以对事件线程异步调用 invalidate 方法，所以可以异步调用此方法。

@param target 受影响的容器

@exception AWTError  如果目标容器不是指定给 BoxLayout 构造方法的容器

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.BoxLayout.addLayoutComponent(String name, Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
此类不使用。

@param name 组件的名称
@param comp 组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.BoxLayout.removeLayoutComponent(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
此类不使用。

@param comp 组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.BoxLayout.addLayoutComponent(Component comp, Object constraints)
<!-- END KEY -->
<!-- BEGIN DATA -->
此类不使用。

@param comp 组件
@param constraints 约束

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.BoxLayout.preferredLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给出指定目标容器中的组件的前提下，返回此布局的首选尺寸。

@param target  需要布置的容器
@return &gt;= 0 &amp;&amp; &lt;= Integer.MAX_VALUE 的尺寸
@exception AWTError  如果目标容器不是指定给 BoxLayout 构造方法的容器
@see Container
@see #minimumLayoutSize
@see #maximumLayoutSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.BoxLayout.minimumLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回布置包含在指定目标容器中的组件所需的最小尺寸。

@param target  需要布置的容器
@return &gt;= 0 &amp;&amp; &lt;= Integer.MAX_VALUE 的尺寸
@exception AWTError  如果目标容器不是指定给 BoxLayout 构造方法的容器
@see #preferredLayoutSize
@see #maximumLayoutSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.BoxLayout.maximumLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回目标容器布置其所包含的组件时可使用的最大尺寸。

@param target  需要布置的容器
@return &gt;= 0 &amp;&amp; &lt;= Integer.MAX_VALUE 的尺寸
@exception AWTError  如果目标容器不是指定给 BoxLayout 构造方法的容器
@see #preferredLayoutSize
@see #minimumLayoutSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized float javax.swing.BoxLayout.getLayoutAlignmentX(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回容器沿 X 轴的对齐方式。如果 box 是水平的，则返回默认对齐方式。否则，将返回沿 X 轴放置子组件所需的对齐方式。

@param target  容器
@return &gt;= 0.0f &amp;&amp; &lt;= 1.0f 的调整值
@exception AWTError  如果目标容器不是指定给 BoxLayout 构造方法的容器

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized float javax.swing.BoxLayout.getLayoutAlignmentY(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回容器沿 Y 轴的对齐方式。如果 box 是垂直的，则返回默认对齐方式。否则，将返回沿 Y 轴放置子组件所需的对齐方式。

@param target  容器
@return &gt;= 0.0f &amp;&amp; &lt;= 1.0f 的调整值
@exception AWTError  如果目标容器不是指定给 BoxLayout 构造方法的容器

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.BoxLayout.layoutContainer(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
在需要布置指定容器时，由 AWT 调用 。
<!-- XXX CHECK! -->

@param target 要布置的容器

@exception AWTError  如果目标容器不是指定给 BoxLayout 构造方法的容器

<!-- END DATA -->
