<!-- BEGIN KEY -->
public class javax.swing.Timer extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
在指定时间间隔触发一个或多个 {@code ActionEvent}。一个示例用法是动画对象，它将 <code>Timer</code> 用作绘制其帧的触发器。
<p>
设置计时器的过程包括创建一个 <code>Timer</code> 对象，在该对象上注册一个或多个动作侦听器，以及使用 <code>start</code> 方法启动该计时器。例如，以下代码创建并启动一个每秒（该时间由 <code>Timer</code> 构造方法的第一个参数指定）触发一次动作事件的计时器。<code>Timer</code> 构造方法的第二个参数指定接收计时器动作事件的侦听器。

<pre>
int delay = 1000; //milliseconds
  ActionListener taskPerformer = new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
          <em>//...Perform a task...</em>
      }
  };
  new Timer(delay, taskPerformer).start();</pre>

 <p>
构造 {@code Timer} 时要指定一个延迟参数和一个 {@code ActionListener}。延迟参数用于设置初始延迟和事件触发之间的延迟（以毫秒为单位）。启动了计时器后，它将在向已注册侦听器触发第一个 <code>ActionEvent</code> 之前等待初始延迟。第一个事件之后，每次超过事件间延迟时它都继续触发事件，直到被停止。
 <p>
构造之后，可以单独更改初始延迟和事件间延迟，并且可以添加其他 <code>ActionListener</code>。
 <p>
如果希望计时器只在第一次时触发然后停止，可以对计时器调用 <code>setRepeats(false)</code>。 
 <p>
尽管所有 <code>Timer</code> 都使用一个共享线程（由第一个执行操作的 <code>Timer</code> 对象创建）执行等待，但是 <code>Timer</code> 的动作事件处理程序还会在其他线程（事件指派线程上）执行。这意味着 <code>Timer</code> 的操作处理程序可以安全地在 Swing 组件上执行操作。但是，它也意味着处理程序必须快速执行以保证 GUI 作出响应。

 <p>
在 1.3 版本中，向 Java 平台添加了另一个 <code>Timer</code> 类：<code>java.util.Timer</code>。该类和 <code>javax.swing.Timer</code> 的基本功能相同，但是 <code>java.util.Timer</code> 更常用，功能更多。<code>javax.swing.Timer</code> 有两个特征，它们可以让使用 GUI 更方便。首先，其事件处理程序都是 GUI 程序员所熟悉的，并且可以更简单地处理事件指派线程。第二，其自动线程共享意味着不必采取特殊步骤来避免生成过多线程。相反，计时器使用同一个线程让光标闪烁、使工具提示显示等等。

 <p>
通过查看 <em>The Java Tutorial</em> 中的 <a href="http://java.sun.com/docs/books/tutorial/uiswing/misc/timer.html"
 target = "_top">How to Use Timers</a> 一节，可以找到使用计时器的更详细的文档和几个示例。有关在此 <code>Timer</code> 类和 <code>java.util.Timer</code> 之间进行选择的更多示例和帮助信息，请参阅 <em>The Swing Connection</em> 中的 <a href="http://java.sun.com/products/jfc/tsc/articles/timer/"
 target="_top">Using Timers in Swing Applications</a> 一文。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参阅 {@link java.beans.XMLEncoder}。

@see java.util.Timer <code>java.util.Timer</code>

@version 1.45 05/05/04
@author Dave Moore

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Timer(int delay, ActionListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 {@code Timer} 并将初始延迟和事件间延迟初始化为 {@code delay} 毫秒。如果 {@code delay} 小于等于 0，则该计时器一启动就触发事件。如果 <code>listener</code> 不为 <code>null</code>，则它会在计时器上注册为动作侦听器。

@param delay 初始延迟和动作事件间延迟的毫秒数
@param listener  初始侦听器；可以为 <code>null</code>

@see #addActionListener
@see #setInitialDelay
@see #setRepeats

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.Timer.addActionListener(ActionListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个动作侦听器添加到 <code>Timer</code>。

@param listener 要添加的侦听器
 
@see #Timer

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.Timer.removeActionListener(ActionListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
从 <code>Timer</code> 移除指定的动作侦听器。

@param listener 要移除的侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ActionListener[] javax.swing.Timer.getActionListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回已在此计时器上注册的所有动作侦听器所组成的数组。

@return 此计时器的所有 <code>ActionListener</code>；如果当前没有注册任何动作侦听器，则返回一个空数组

@see #addActionListener
@see #removeActionListener

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.Timer.fireActionPerformed(ActionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知为此事件类型的通知而注册的所有侦听器。  

@param e 要触发的动作事件
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] javax.swing.Timer.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回目前已在此 <code>Timer</code> 上注册为 <code><em>Foo</em>Listener</code> 的所有对象所组成的数组。<code><em>Foo</em>Listener</code> 是使用 <code>add<em>Foo</em>Listener</code> 方法注册的。
 <p>
可以用一个类字面值（比如 <code><em>Foo</em>Listener.class</code>）指定 <code>listenerType</code> 参数。例如，可以使用下面的代码查询 <code>Timer</code> 实例 <code>t</code> 的动作侦听器：

 <pre>ActionListener[] als = (ActionListener[])(t.getListeners(ActionListener.class));</pre>

如果不存在这样的侦听器，则此方法将返回一个空数组。

@param listenerType 所请求的侦听器的类型；该参数应该指定一个从 <code>java.util.EventListener</code> 继承的接口
@return 在此计时器上注册为 <code><em>Foo</em>Listener</code> 的所有对象所组成的数组；如果没有添加这样的侦听器，则返回一个空数组
@exception ClassCastException 如果 <code>listenerType</code> 没有指定实现 <code>java.util.EventListener</code> 的类或接口
 
@see #getActionListeners
@see #addActionListener
@see #removeActionListener

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.Timer.setLogTimers(boolean flag)
<!-- END KEY -->
<!-- BEGIN DATA -->
启用／禁用计时器日志。启用时，每次计时器退出时都会向 <code>System.out</code> 发送一条信息。

@param flag  <code>true</code> 表示要启用日志记录
@see #getLogTimers

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.Timer.getLogTimers()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果启用了日志记录，则返回 <code>true</code>。

@return 如果启用了日志记录，则返回 <code>true</code>；否则，返回 false
@see #setLogTimers

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.Timer.setDelay(int delay)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>Timer</code> 的事件间延迟，两次连续的动作事件之间的毫秒数。这不会影响初始延迟属性，该属性可由 {@code setInitialDelay} 方法设置。

@param delay 以毫秒为单位的延迟
@see #setInitialDelay

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.Timer.getDelay()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回两次触发动作事件间延迟，以毫秒为单位。

@see #setDelay
@see #getInitialDelay

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.Timer.setInitialDelay(int initialDelay)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>Timer</code> 的初始延迟，即启动计时器后触发第一个事件之前要等待的时间（以毫秒为单位）。构造时，此延迟设置为与事件间延迟相同，但是其值是独立的，并且不受事件间延迟更改的影响。
 
 @param initialDelay 初始延迟（以毫秒为单位）
 @see #setDelay

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.Timer.getInitialDelay()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>Timer</code> 的初始延迟。

@see #setInitialDelay
@see #setDelay

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.Timer.setRepeats(boolean flag)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>flag</code> 为 <code>false</code>，则指示 <code>Timer</code> 只向其侦听器发送一次动作事件。 

@param flag 指定 <code>false</code> 将使计时器在发送第一个动作事件之后停止

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.Timer.isRepeats()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>Timer</code> 多次将一个动作事件发送到其侦听器，则返回 <code>true</code>（默认）。

@see #setRepeats

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.Timer.setCoalesce(boolean flag)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>Timer</code> 是否组合多个挂起的 <code>ActionEvent</code> 触发。忙碌的应用程序可能跟不上 <code>Timer</code> 的事件生成速度，导致多个动作事件排队。当处理这些事件时，应用程序会一个接一个地进行发送，导致 <code>Timer</code> 的侦听器收到一个没有事件间延迟的事件序列。组合操作可以将多个挂起的事件减少为一个事件，从而避免了这种情况的发生。默认情况下 <code>Timer</code> 将组合事件。

@param flag 指定 <code>false</code> 将关闭组合

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.Timer.isCoalesce()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>Timer</code> 组合多个挂起的动作事件，则返回 <code>true</code>。

@see #setCoalesce

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.Timer.setActionCommand(String command)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置将作为此计时器所触发的 <code>ActionEvent</code> 中的动作命令传递的字符串。<code>null</code> 是可接受的值。 

 @param command 动作命令
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.Timer.getActionCommand()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回将作为此计时器所触发的 <code>ActionEvent</code> 中的动作命令传递的字符串。可以为 <code>null</code>， <code>null</code> 也是默认值。

 @return 在触发事件中使用的动作命令
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.Timer.start()
<!-- END KEY -->
<!-- BEGIN DATA -->
启动 <code>Timer</code>，使它开始向其侦听器发送动作事件。

@see #stop

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.Timer.isRunning()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>Timer</code> 正在运行，则返回 <code>true</code>。

@see #start

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.Timer.stop()
<!-- END KEY -->
<!-- BEGIN DATA -->
停止 <code>Timer</code>，使它停止向其侦听器发送动作事件。

@see #start

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.Timer.restart()
<!-- END KEY -->
<!-- BEGIN DATA -->
重新启动 <code>Timer</code>，取消所有挂起的触发并使它按初始延迟触发。

<!-- END DATA -->
