<!-- BEGIN KEY -->
public static class javax.swing.SpringLayout.Constraints extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Constraints</code> 对象将管理组件大小和位置更改方式的约束存储在 <code>SpringLayout</code> 控制的容器中。由于 <code>Constraints</code> 对象具有 <code>x</code>、<code>y</code>、<code>width</code> 和 <code>height</code> 属性，因而它类似于一个 <code>Rectangle</code>。但是，在 <code>Constraints</code> 对象中，这些属性具有的是 <code>Spring</code> 值，而不是整数。此外，可以使用 <code>constraint</code> 属性按四个边（东、南、西、北）操作一个 <code>Constraints</code> 对象。
 
 <p>
对于 <code>Constraints</code> 对象，以下公式始终为 true（这里 WEST 和 <code>x</code> 同义，同样地 NORTH 和 <code>y</code> 同义）：

 <pre>
               EAST = WEST + WIDTH
              SOUTH = NORTH + HEIGHT
  HORIZONTAL_CENTER = WEST + WIDTH/2
    VERTICAL_CENTER = NORTH + HEIGHT/2
  ABSOLUTE_BASELINE = NORTH + RELATIVE_BASELINE*
 </pre>
 <p>
例如，如果指定 WIDTH 和 WEST (X) 位置，则 EAST 按 WEST + WIDTH 计算。如果指定 WIDTH 和 EAST 位置，则 WEST (X) 位置按 EAST - WIDTH 计算。
 <p>
[RELATIVE_BASELINE 是调用 SpringLayout.Constraints(Component) 时或向 SpringLayout 对象注册约束对象时自动设置的专有约束]。
 <p>
<b>注：</b>在本文档中，操作符表示该 <code>Spring</code> 类中的方法。例如，&quot;a + b&quot; 等于 <code>Spring.sum(a, b)</code>，&quot;a - b&quot; 等于 <code>Spring.sum(a, Spring.minus(b))</code>。有关 spring 算法的更多详细信息，请参阅 {@link Spring <code>Spring</code> API documentation}。

 <p>
 
因为 <code>Constraints</code> 对象的属性（表示其边、大小和位置）都可以单独设置，并且互相关联，所以 <code>Constraints</code> 对象可以成为<em>过分约束</em>。例如，如果设置了 <code>WEST</code>、<code>WIDTH</code> 和 <code>EAST</code> 边，则必须采取措施以确保上述公式中的第一个有效。要做到这一点，<code>Constraints</code> 对象抛出<em>最近设置的</em> 约束以使公式有效。
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.SpringLayout.Constraints()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个空 <code>Constraints</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.SpringLayout.Constraints(Spring x, Spring y)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个指定了 <code>x</code> 和 <code>y</code> 属性值的 <code>Constraints</code> 对象。<code>height</code> 和 <code>width</code> spring 具有 <code>null</code> 值。

@param x  控制组件的 <em>x</em> 值的 spring
@param y  控制组件的 <em>y</em> 值的 spring

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.SpringLayout.Constraints(Spring x, Spring y, Spring width, Spring height)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个指定了 <code>x</code>、<code>y</code>、<code>width</code> 和 <code>height</code> 属性值的 <code>Constraints</code> 对象。注：如果 <code>SpringLayout</code> 类在给定组件的 <code>Constraints</code> 对象中遇到 <code>null</code> 值，则它将使用合适的默认值取代这些值。

@param x  <code>x</code> 属性的 spring 值
@param y  <code>y</code> 属性的 spring 值
@param width  <code>width</code> 属性的 spring 值
@param height  <code>height</code> 属性的 spring 值

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.SpringLayout.Constraints(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建组件 <code>c</code> 的合适 <code>x</code>、<code>y</code>、<code>width</code> 和 <code>height</code> spring 的 <code>Constraints</code> 对象。<code>x</code> 和 <code>y</code> spring 是使用调用此方法时该组件的位置初始化的常量 spring。<code>width</code> 和 <code>height</code> spring 是由 <code>Spring.width()</code> 和 <code>Spring.height()</code> 方法创建的特殊 spring，这些方法可在组件的大小特征发生变化时进行跟踪。

@param c  此约束对象反映其特征的组件
@throws NullPointerException 如果 <code>c</code> 为 null。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.SpringLayout.Constraints.setX(Spring x)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>x</code> 属性，该属性控制组件位置的 <code>x</code> 值。

@param x 控制组件位置的 <code>x</code> 值的 spring

@see #getX
@see SpringLayout.Constraints

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Spring javax.swing.SpringLayout.Constraints.getX()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>x</code> 属性的值。

@return 控制组件位置的 <code>x</code> 值的 spring

@see #setX
@see SpringLayout.Constraints

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.SpringLayout.Constraints.setY(Spring y)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>y</code> 属性，该属性控制组件位置的 <code>y</code> 值。

@param y 控制组件位置的 <code>y</code> 值的 spring

@see #getY
@see SpringLayout.Constraints

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Spring javax.swing.SpringLayout.Constraints.getY()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>y</code> 属性的值。

@return 控制组件位置的 <code>y</code> 值的 spring

@see #setY
@see SpringLayout.Constraints

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.SpringLayout.Constraints.setWidth(Spring width)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>width</code> 属性，该属性控制组件的宽度。

@param width 控制此 <code>Constraints</code> 对象的宽度的 spring

@see #getWidth
@see SpringLayout.Constraints

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Spring javax.swing.SpringLayout.Constraints.getWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>width</code> 属性的值。

@return 控制组件宽度的 spring

@see #setWidth
@see SpringLayout.Constraints

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.SpringLayout.Constraints.setHeight(Spring height)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>height</code> 属性，该属性控制组件的高度。

@param height 控制此 <code>Constraints</code> 对象高度的 spring

@see #getHeight
@see SpringLayout.Constraints

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Spring javax.swing.SpringLayout.Constraints.getHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>height</code> 属性的值。

@return 控制组件高度的 spring

@see #setHeight
@see SpringLayout.Constraints

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.SpringLayout.Constraints.setConstraint(String edgeName, Spring s)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置控制指定边的 spring。该边必须是以下某个值：<code>SpringLayout.NORTH</code>、<code>SpringLayout.SOUTH</code>、<code>SpringLayout.EAST</code>、<code>SpringLayout.WEST</code>、<code>SpringLayout.HORIZONTAL_CENTER</code>、<code>SpringLayout.VERTICAL_CENTER</code>、<code>SpringLayout.BASELINE</code>、<code>SpringLayout.WIDTH</code> 或 <code>SpringLayout.HEIGHT</code>。 
对于作为边传递的任何其他 <code>String</code> 值，则不执行任何操作。对于 <code>null</code> 边，则抛出 <code>NullPointerException</code>。

 @param edgeName 要设置的边
 @param s 控制指定边的 spring

 @throws NullPointerException 如果 <code>edgeName</code> 为 <code>null</code>

 @see #getConstraint
 @see #NORTH
 @see #SOUTH
 @see #EAST
 @see #WEST
 @see #HORIZONTAL_CENTER
 @see #VERTICAL_CENTER
 @see #BASELINE
 @see #WIDTH
 @see #HEIGHT
 @see SpringLayout.Constraints

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Spring javax.swing.SpringLayout.Constraints.getConstraint(String edgeName)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定边的值，它可以为一个派生值，甚至可以为 <code>null</code>。该边必须是以下某个值：<code>SpringLayout.NORTH</code>、<code>SpringLayout.SOUTH</code>、<code>SpringLayout.EAST</code>、<code>SpringLayout.WEST</code>、<code>SpringLayout.HORIZONTAL_CENTER</code>、<code>SpringLayout.VERTICAL_CENTER</code>、<code>SpringLayout.BASELINE</code>、<code>SpringLayout.WIDTH</code> 或 <code>SpringLayout.HEIGHT</code>。 
对于作为边传递的任何其他 <code>String</code> 值，则会返回 <code>null</code>。对于 <code>null</code> 边，则抛出 <code>NullPointerException</code>。 

 @param edgeName 要返回其值的边

 @return 控制指定边的 spring，可以为 <code>null</code>

 @throws NullPointerException 如果 <code>edgeName</code> 为 <code>null</code>

 @see #setConstraint
 @see #NORTH
 @see #SOUTH
 @see #EAST
 @see #WEST
 @see #HORIZONTAL_CENTER
 @see #VERTICAL_CENTER
 @see #BASELINE
 @see #WIDTH
 @see #HEIGHT
 @see SpringLayout.Constraints

<!-- END DATA -->
