<!-- BEGIN KEY -->
public class javax.swing.JDesktopPane extends javax.swing.JLayeredPane implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
用于创建多文档界面或虚拟桌面的容器。用户可创建 <code>JInternalFrame</code> 对象并将其添加到 <code>JDesktopPane</code>。<code>JDesktopPane</code> 扩展了 <code>JLayeredPane</code>，以管理可能的重叠内部窗体。它还维护了对 <code>DesktopManager</code> 实例的引用，这是由 UI 类为当前的外观 (L&amp;F) 所设置的。注意，<code>JDesktopPane</code> 不支持边界。
 <p>
此类通常用作 <code>JInternalFrames</code> 的父类，为 <code>JInternalFrames</code> 提供一个可插入的 <code>DesktopManager</code> 对象。特定于 L&amp;F 的实现 <code>installUI</code> 负责正确设置 <code>desktopManager</code> 变量。<code>JInternalFrame</code> 的父类是 <code>JDesktopPane</code> 时，它应该将其大部分行为（关闭、调整大小等）委托给 <code>desktopManager</code>。
 <p>
有关此内容更多的文档和示例，请参阅 <em>The Java Tutorial</em> 的 <a href="http://java.sun.com/docs/books/tutorial/uiswing/components/internalframe.html">How to Use Internal Frames</a> 一节。
 <p>
 <strong>警告：</strong> Swing 不是线程安全的。有关更多信息，请参阅 <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@see JInternalFrame
@see JInternalFrame.JDesktopIcon
@see DesktopManager

@version 1.51 12/19/03
@author David Kloba

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JDesktopPane.LIVE_DRAG_MODE
<!-- END KEY -->
<!-- BEGIN DATA -->
指示正在被拖动项的所有内容是否应该出现在桌面窗格内部。

@see #OUTLINE_DRAG_MODE
@see #setDragMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JDesktopPane.OUTLINE_DRAG_MODE
<!-- END KEY -->
<!-- BEGIN DATA -->
指示桌面窗格是否只应该出现正在被拖动项的轮廓。

@see #LIVE_DRAG_MODE
@see #setDragMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JDesktopPane()
<!-- END KEY -->
<!-- BEGIN DATA -->

创建一个新的 <code>JDesktopPane</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.DesktopPaneUI javax.swing.JDesktopPane.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回呈现此组件的 L&amp;F 对象。

@return 呈现此组件的 <code>DesktopPaneUI</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDesktopPane.setUI(DesktopPaneUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置呈现此组件的 L&amp;F 对象。

@param ui   DesktopPaneUI L&amp;F 对象
@see UIDefaults#getUI
@beaninfo bound:true hidden:true attribute:visualUpdate true 描述：实现该 Component 的 LookAndFeel 的 UI 对象。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDesktopPane.setDragMode(int dragMode)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置桌面窗格使用的&ldquo;拖动样式&rdquo;。出于性能或审美的原因，可能要更改模式。

@param dragMode 为 Desktop 中各项所用的拖动样式

@see #LIVE_DRAG_MODE
@see #OUTLINE_DRAG_MODE

@beaninfo bound:true 描述：内部框架子级的拖动样式。 enum:LIVE_DRAG_MODE JDesktopPane.LIVE_DRAG_MODE OUTLINE_DRAG_MODE JDesktopPane.OUTLINE_DRAG_MODE
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JDesktopPane.getDragMode()
<!-- END KEY -->
<!-- BEGIN DATA -->

获取桌面窗格当前使用的&ldquo;拖动样式&rdquo;。
@return <code>Live_DRAG_MODE</code> 或 <code>OUTLINE_DRAG_MODE</code>
@see #setDragMode
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.DesktopManager javax.swing.JDesktopPane.getDesktopManager()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回处理特定于桌面 UI 操作的 <code>DesktopManger</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDesktopPane.setDesktopManager(DesktopManager d)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置处理特定于桌面 UI 操作的 <code>DesktopManger</code>。

@param d 所使用的 <code>DesktopManager</code> 

@beaninfo bound:true 描述：桌面管理器处理桌面窗格中的内部框架。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDesktopPane.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>UIManager</code> 发出的关于 L&amp;F 已更改的通知。用来自 <code>UIManager</code> 的最新版本 UI 对象替换当前的 UI 对象。


@see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JDesktopPane.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回呈现此组件的 L&amp;F 类名。

@return 字符串 &quot;DesktopPaneUI&quot;
@see JComponent#getUIClassID
@see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JInternalFrame[] javax.swing.JDesktopPane.getAllFrames()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回桌面中当前显示的所有 <code>JInternalFrames</code>。返回图标化的窗体和扩展的窗体。

@return <code>JInternalFrame</code> 对象的数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JInternalFrame javax.swing.JDesktopPane.getSelectedFrame()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JDesktopPane</code> 中当前活动的 <code>JInternalFrame</code>，如果当前没有活动的 <code>JInternalFrame</code>，则返回 <code>null</code>。

@return 当前活动的 <code>JInternalFrame</code> 或 <code>null</code>
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDesktopPane.setSelectedFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 <code>JDesktopPane</code> 中当前活动的 <code>JInternalFrame</code>。此方法用于连接JDesktopPane 和平台实现代码，不应该直接调用。要可视化地选择窗体，客户端必须调用 JInternalFrame.setSelected(true) 激活窗体。
@see JInternalFrame#setSelected(boolean) 

@param f 当前选中的内部窗体
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JInternalFrame[] javax.swing.JDesktopPane.getAllFramesInLayer(int layer)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回桌面指定层中当前所显示的所有 <code>JInternalFrames</code>。返回图标化的窗体和扩展的窗体。

@param layer  指定桌面层的 int 值
@return  <code>JInternalFrame</code> 对象的数组
@see JLayeredPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JInternalFrame javax.swing.JDesktopPane.selectFrame(boolean forward)
<!-- END KEY -->
<!-- BEGIN DATA -->
 选择此桌面窗格中的下一个 <code>JInternalFrame</code>。

 @param forward 一个 boolean 值，指示选择的方向；<code>true</code> 表示向前，<code>false</code> 表示向后
 @return 选择的 JInternalFrame；如果未选择任何窗体，则返回 <code>null</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JDesktopPane.addImpl(Component comp, Object constraints, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDesktopPane.remove(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDesktopPane.removeAll()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDesktopPane.setComponentZOrder(Component comp, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JDesktopPane.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JDesktopPane</code> 的字符串表示形式。此方法仅在进行调试时使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。
 
@return  此 <code>JDesktopPane</code> 的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JDesktopPane.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 <code>JDesktopPane</code> 关联的 <code>AccessibleContext</code>。对于桌面窗格，<code>AccessibleContext</code> 采用 <code>AccessibleJDesktopPane</code> 的形式。如有必要，可以创建一个新的 <code>AccessibleJDesktopPane</code> 实例。

@return 充当此 <code>JDesktopPane</code> 的 <code>AccessibleContext</code> 的 <code>AccessibleJDesktopPane</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JDesktopPane.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

有关 Swing 中更多序列化的信息，请参阅 JComponent 中的 readObject() 和 writeObject()。

<!-- END DATA -->
