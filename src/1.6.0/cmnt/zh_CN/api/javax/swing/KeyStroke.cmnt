<!-- BEGIN KEY -->
public class javax.swing.KeyStroke extends java.awt.AWTKeyStroke
<!-- END KEY -->
<!-- BEGIN DATA -->
表示键盘或等效输入设置上的键操作的 KeyStroke。KeyStroke 仅能对应于按下或释放某个特定的键，正如 KEY_PRESSED 和 KEY_RELEASED KeyEvents 执行的操作；或者，它们可能对应于键入特定的 Java 字符，正如 KEY_TYPED KeyEvents 执行的操作。在所有情况下，KeyStroke 都可以指定修饰符（alt、shift、control、meta、altGraph 或其组合），在针对精确匹配的操作中，这些修饰符必须存在。
 <p>
KeyStroke 用于定义高级（语义)操作事件。不用捕获每个 keystroke 并抛弃不感兴趣的 keystroke，这些重要的 keystroke 会自动在其注册的 Components 上启动操作。
 <p>
KeyStroke 是不可变的，而且是唯一的。客户端代码无法创建 KeyStroke；必须使用 <code>getKeyStroke</code> 的变体。这些工厂方法使得 KeyStroke 实现能够高效缓存和共享实例。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@see javax.swing.text.Keymap
@see #getKeyStroke

@version 1.49, 05/18/04
@author Arnaud Weber
@author David Mendenhall

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.KeyStroke javax.swing.KeyStroke.getKeyStroke(char keyChar)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>KeyStroke</code> 的共享实例，前者表示指定字符的 <code>KEY_TYPED</code> 事件。

@param keyChar 键盘上某个键的字符值
@return 该键的 KeyStroke 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.KeyStroke javax.swing.KeyStroke.getKeyStroke(char keyChar, boolean onKeyRelease)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 KeyStroke 的实例，指定该键在按下或释放时是否视为已激活。与此类中的所有其他工厂方法不同，此方法返回的实例不一定被缓存或共享。

@param keyChar 键盘上某个键的字符值
@param onKeyRelease 如果此 KeyStroke 对应于某个键的释放，则为 <code>true</code>；否则为 <code>false</code>。
@return 键的 KeyStroke 对象
@deprecated 使用 getKeyStroke(char)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.KeyStroke javax.swing.KeyStroke.getKeyStroke(Character keyChar, int modifiers)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 {@code KeyStroke} 的一个共享实例，它表示指定 Character 对象和一组修饰符的 {@code KEY_TYPED} 事件。注意，第一个参数是 Character 类型而不是 char 类型。这是为了避免在调用 <code>getKeyStroke(int keyCode, int modifiers)</code> 时发生无意的冲突。

修饰符由以下任意组合组成：<ul>
 <li>java.awt.event.InputEvent.SHIFT_DOWN_MASK 
 <li>java.awt.event.InputEvent.CTRL_DOWN_MASK
 <li>java.awt.event.InputEvent.META_DOWN_MASK
 <li>java.awt.event.InputEvent.ALT_DOWN_MASK
 <li>java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
 </ul>
 也可以使用下面列出的旧的修饰符，但它们被映射到 _DOWN_ 修饰符。<ul>
 <li>java.awt.event.InputEvent.SHIFT_MASK 
 <li>java.awt.event.InputEvent.CTRL_MASK 
 <li>java.awt.event.InputEvent.META_MASK 
 <li>java.awt.event.InputEvent.ALT_MASK
 <li>java.awt.event.InputEvent.ALT_GRAPH_MASK
 </ul> 
也可以使用，但它们被映射到 _DOWN_ 修饰符。
因为这些数字都是 2 的不同次幂，所以它们的任意组合是一个整数，该整数的每个位都表示一个不同的修饰符键。可以使用 0 指定无修饰符。

@param keyChar 键盘字符的 Character 对象
@param modifiers 任意修饰符的按位或组合
@return 该键的 KeyStroke 对象
@throws IllegalArgumentException 如果 keyChar 为 null

@see java.awt.event.InputEvent
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.KeyStroke javax.swing.KeyStroke.getKeyStroke(int keyCode, int modifiers, boolean onKeyRelease)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给出一个数字键代码和一组修饰符的情况下，返回 KeyStroke 的一个共享实例，指定该键在按下或释放时是否为已激活。
 <p>
可以使用在 java.awt.event.KeyEvent 中定义的&ldquo;虚拟键&rdquo;常量来指定键代码。例如：<ul>
 <li>java.awt.event.KeyEvent.VK_ENTER 
 <li>java.awt.event.KeyEvent.VK_TAB
 <li>java.awt.event.KeyEvent.VK_SPACE
 </ul>
修饰符由以下任意组合组成：<ul>
 <li>java.awt.event.InputEvent.SHIFT_DOWN_MASK 
 <li>java.awt.event.InputEvent.CTRL_DOWN_MASK
 <li>java.awt.event.InputEvent.META_DOWN_MASK
 <li>java.awt.event.InputEvent.ALT_DOWN_MASK
 <li>java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
 </ul>
 旧的修饰符<ul>
 <li>java.awt.event.InputEvent.SHIFT_MASK 
 <li>java.awt.event.InputEvent.CTRL_MASK 
 <li>java.awt.event.InputEvent.META_MASK 
 <li>java.awt.event.InputEvent.ALT_MASK
 <li>java.awt.event.InputEvent.ALT_GRAPH_MASK
 </ul> 
也可以使用，但它们被映射到 _DOWN_ 修饰符。
因为这些数字都是 2 的不同次幂，所以它们的任意组合是一个整数，该整数的每个位都表示一个不同的修饰符键。可以使用 0 指定无修饰符。

@param keyCode 一个 int，指定键盘上某个键的数字代码
@param modifiers 任意修饰符的按位或组合
@param onKeyRelease 如果 KeyStroke 应该表示一个键释放，则为 <code>true</code>；否则为 <code>false</code>。
@return 该键的 KeyStroke 对象

@see java.awt.event.KeyEvent
@see java.awt.event.InputEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.KeyStroke javax.swing.KeyStroke.getKeyStroke(int keyCode, int modifiers)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给出一个数字键代码和一组修饰符的情况下，返回 KeyStroke 的一个共享实例。返回的 KeyStroke 将对应于一个按键操作。
 <p>
可以使用在 java.awt.event.KeyEvent 中定义的&ldquo;虚拟键&rdquo;常量来指定键代码。例如：<ul>
 <li>java.awt.event.KeyEvent.VK_ENTER 
 <li>java.awt.event.KeyEvent.VK_TAB
 <li>java.awt.event.KeyEvent.VK_SPACE
 </ul>
修饰符由以下任意组合组成：<ul>
 <li>java.awt.event.InputEvent.SHIFT_DOWN_MASK 
 <li>java.awt.event.InputEvent.CTRL_DOWN_MASK
 <li>java.awt.event.InputEvent.META_DOWN_MASK
 <li>java.awt.event.InputEvent.ALT_DOWN_MASK
 <li>java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
 </ul>
旧的修饰符<ul>
 <li>java.awt.event.InputEvent.SHIFT_MASK 
 <li>java.awt.event.InputEvent.CTRL_MASK 
 <li>java.awt.event.InputEvent.META_MASK 
 <li>java.awt.event.InputEvent.ALT_MASK
 <li>java.awt.event.InputEvent.ALT_GRAPH_MASK
 </ul> 
也可以使用，但它们被映射到 _DOWN_ 修饰符。
因为这些数字都是 2 的不同次幂，所以它们的任意组合是一个整数，该整数的每个位都表示一个不同的修饰符键。可以使用 0 指定无修饰符。

@param keyCode 一个 int，指定键盘上某个键的数字代码
@param modifiers 任意修饰符的按位或组合
@return 该键的 KeyStroke 对象

@see java.awt.event.KeyEvent
@see java.awt.event.InputEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.KeyStroke javax.swing.KeyStroke.getKeyStrokeForEvent(KeyEvent anEvent)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 KeyStroke，它表示生成给定 KeyEvent 的快捷键事件。
 <p>
此方法获得来自 KeyTyped 事件的 keyChar，以及来自 KeyPressed 或 KeyReleased 事件的 keyCode。为所有三种类型的 KeyEvent 获取 KeyEvent 修饰符。

@param anEvent 从中获取 KeyStroke 的 KeyEvent
@throws NullPointerException 如果 <code>anEvent</code> 为 null
@return 促成事件的 KeyStroke

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.KeyStroke javax.swing.KeyStroke.getKeyStroke(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
分析字符串并返回 <code>KeyStroke</code>。字符串必须具有以下语法：
 <pre>
    &lt;modifiers&gt;* (&lt;typedID&gt; | &lt;pressedReleasedID&gt;)

    modifiers := shift | control | ctrl | meta | alt | altGraph 
    typedID := typed &lt;typedKey&gt;
    typedKey := string of length 1 giving Unicode character.
    pressedReleasedID := (pressed | released) key
    key := KeyEvent key code name, i.e. the name following &quot;VK_&quot;.
 </pre>
如果没有指定是键入、按下还是释放，则假定为按下。以下是一些示例：
 <pre>
     &quot;INSERT&quot; =&gt; getKeyStroke(KeyEvent.VK_INSERT, 0);
     &quot;control DELETE&quot; =&gt; getKeyStroke(KeyEvent.VK_DELETE, InputEvent.CTRL_MASK);
     &quot;alt shift X&quot; =&gt; getKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK);
     &quot;alt shift released X&quot; =&gt; getKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK, true);
     &quot;typed a&quot; =&gt; getKeyStroke('a');
 </pre>

为了维持向后兼容性，指定 null String 或格式不正确的 String 将返回 null。

@param s 用上述方法格式化的 String
@return 该 String 的 KeyStroke 对象，如果指定的 String 为 null 或格式不正确，则返回 null

<!-- END DATA -->
