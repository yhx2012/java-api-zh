<!-- BEGIN KEY -->
public class javax.swing.ProgressMonitor extends java.lang.Object implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
监视某个操作的进度的类。如果表现为操作需要一段时间，则会弹出进度对话框。创建 ProgressMonitor 时，向它提供数字范围和描述字符串。在操作进行时，调用 setProgress 方法，以指示操作的 [min,max] 范围有多大。最初，不存在 ProgressDialog。第一个 millisToDecideToPopup 毫秒（默认值为 500）以后，进度监视器会预测该操作将花费多长时间。如果大于 millisToPopup（默认值为 2000，即 2 秒），则弹出 ProgressDialog。
 <p>
当可以看到 Dialog 框时，调用 setProgress 可以更新进度条。setProgress 并不总是更新该进度条，仅当进度量明显增多时才进行更新。

 <p>
 
有关此内容的更多文档和示例，请参阅 <em>The Java Tutorial</em> 中的 <a  href="http://java.sun.com/docs/books/tutorial/uiswing/components/progress.html">How to Monitor Progress</a> 一节。

@see ProgressMonitorInputStream
@author James Gosling
@author Lynn Monsanto (accessibility)
@version 1.30 04/15/04

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.accessibility.AccessibleContext javax.swing.ProgressMonitor.accessibleContext
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>ProgressMonitor</code> 的 <code>AccessibleContext</code> 
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ProgressMonitor(Component parentComponent, Object message, String note, int min, int max)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个图形对象，它一般会根据进程的完成情况通过填充矩形条来显示进度。

@param parentComponent 对话框的父组件
@param message 要显示给用户的描述消息，以指示在监视什么操作。这不随操作进度而更改。请参阅 {@link JOptionPane#message} 中方法的 message 参数，了解值的范围。
@param note 描述操作状态的简短注释。随着操作的进行，可以调用 setNote 来更改显示的注释。例如，这可用于迭代文件列表以显示正在处理的文件名称的操作中。如果注释最初为 null，则对话框中将不存在注释行，并且 setNote 无效
@param min 范围的下边界
@param max 范围的上边界
@see JDialog
@see JOptionPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ProgressMonitor.setProgress(int nv)
<!-- END KEY -->
<!-- BEGIN DATA -->

指示正被监视操作的进度。如果指定值 &gt;= 最大值，则关闭进度监视器。
@param nv 指定当前值的 int，位于为此组件指定的最大值和最小值之间
@see #setMinimum
@see #setMaximum
@see #close

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ProgressMonitor.close()
<!-- END KEY -->
<!-- BEGIN DATA -->

指示操作已完成。当 setProgress 设置的值 &gt;= 最大值时，此过程自动发生，但是如果提前结束该操作，则可以提前调用它。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ProgressMonitor.getMinimum()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最小值 - 进度值的较低端。

@return 表示最小值的 int
@see #setMinimum

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ProgressMonitor.setMinimum(int m)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定最小值。

@param m  指定最小值的 int
@see #getMinimum

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ProgressMonitor.getMaximum()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最大值 - 进度值的较高端。

@return 表示最大值的 int
@see #setMaximum

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ProgressMonitor.setMaximum(int m)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定最大值。

@param m 指定最大值的 int 
@see #getMaximum

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.ProgressMonitor.isCanceled()
<!-- END KEY -->
<!-- BEGIN DATA -->

如果用户单击进度对话框中的 Cancel 按钮，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ProgressMonitor.setMillisToDecideToPopup(int millisToDecideToPopup)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定在确定是否弹出进度监视器之前要等待的时间量。

@param millisToDecideToPopup  指定要等待的时间（以毫秒为单位）的 int
@see #getMillisToDecideToPopup

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ProgressMonitor.getMillisToDecideToPopup()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在确定是否弹出进度监视器之前此对象等待的时间量。

@see #setMillisToDecideToPopup

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ProgressMonitor.setMillisToPopup(int millisToPopup)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定显示弹出监视器花费的时间量。（如果剩余的预计时间小于此时间，则不显示弹出监视器。）

@param millisToPopup  指定时间（以毫秒为单位）的 int
@see #getMillisToPopup

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ProgressMonitor.getMillisToPopup()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回显示弹出监视器花费的时间量。

@see #setMillisToPopup

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ProgressMonitor.setNote(String note)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定与进度消息一起显示的其他注释。例如，在复制多个文件的过程中，用于显示当前正在复制哪一个文件。

@param note  指定要显示的注释的 String
@see #getNote

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.ProgressMonitor.getNote()
<!-- END KEY -->
<!-- BEGIN DATA -->
指定随进度消息一起显示的其他注释。

@return 指定要显示的注释的 String
@see #setNote

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.ProgressMonitor.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得 <code>ProgressMonitor</code> 的 <code>AccessibleContext</code>。  

@return <code>ProgressMonitor</code> 的 <code>AccessibleContext</code>
@since 1.5

<!-- END DATA -->
