<!-- BEGIN KEY -->
public class javax.swing.JLabel extends javax.swing.JComponent implements javax.swing.SwingConstants, javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
用于短文本字符串或图像或二者的显示区。标签不对输入事件作出反应。因此，它无法获得键盘焦点。但是，标签可以为具有键盘替换功能却无法显示的邻近组件方便地显示其键盘替换功能。
 <p>
<code>JLabel</code> 对象可以显示文本、图像或同时显示二者。可以通过设置垂直和水平对齐方式，指定标签显示区中标签内容在何处对齐。默认情况下，标签在其显示区内垂直居中对齐。默认情况下，只显示文本的标签是开始边对齐；而只显示图像的标签则水平居中对齐。
 <p>
还可以指定文本相对于图像的位置。默认情况下，文本位于图像的结尾边上，文本和图像都垂直对齐。
 <p>
根据标签的 {@link java.awt.ComponentOrientation} 属性值确定其开始边和结尾边。目前，默认的 ComponentOrientation 设置将开始边映射到左边，将结尾边映射到右边。  

 <p>
最后，还可以使用 <code>setIconTextGap</code> 方法指定文本和图像之间应该出现多少像素。默认情况下为 4 个像素。
 <p>
有关进一步的文档，请参阅 <em>The Java Tutorial</em> 中的 <a href="http://java.sun.com/docs/books/tutorial/uiswing/components/label.html">How to Use Labels</a> 一节。
 <p>
<strong>警告：</strong>Swing 不是线程安全的。有关更多信息，请参阅 <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@beaninfo attribute: isContainer false description: A component that displays a short string and an icon.
 
@version 1.116 04/02/04
@author Hans Muller

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JLabel(String text, Icon icon, int horizontalAlignment)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定文本、图像和水平对齐方式的 <code>JLabel</code> 实例。该标签在其显示区内垂直居中对齐。文本位于图像的结尾边上。

@param text  由标签显示的文本。
@param icon  由标签显示的图像。
@param horizontalAlignment  <code>SwingConstants</code> 中定义的以下常量之一：<code>LEFT</code>、<code>CENTER</code>、<code>RIGHT</code>、<code>LEADING</code> 或 <code>TRAILING</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JLabel(String text, int horizontalAlignment)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定文本和水平对齐方式的 <code>JLabel</code> 实例。该标签在其显示区内垂直居中对齐。

@param text  由标签显示的文本。
@param horizontalAlignment  在 <code>SwingConstants</code> 中定义的以下常量之一：<code>LEFT</code>、<code>CENTER</code>、<code>RIGHT</code>、<code>LEADING</code> 或 <code>TRAILING</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JLabel(String text)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定文本的 <code>JLabel</code> 实例。该标签与其显示区的开始边对齐，并垂直居中。

@param text  由标签显示的文本。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JLabel(Icon image, int horizontalAlignment)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定图像和水平对齐方式的 <code>JLabel</code> 实例。该标签在其显示区内垂直居中对齐。

@param image  由标签显示的图像。
@param horizontalAlignment  在 <code>SwingConstants</code> 中定义的以下常量之一：<code>LEFT</code>、<code>CENTER</code>、<code>RIGHT</code>、<code>LEADING</code> 或 <code>TRAILING</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JLabel(Icon image)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定图像的 <code>JLabel</code> 实例。该标签在其显示区内垂直和水平居中对齐。

@param image  由标签显示的图像。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JLabel()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建无图像并且其标题为空字符串的 <code>JLabel</code>。该标签在其显示区内垂直居中对齐。一旦设置了标签的内容，该内容就会显示在标签显示区的开始边上。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.LabelUI javax.swing.JLabel.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回呈现此组件的 L&F 对象。

@return LabelUI 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JLabel.setUI(LabelUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置呈现此组件的 L&F 对象。

@param ui  LabelUI L&F 对象
@see UIDefaults#getUI
@beaninfo bound:true hidden:true attribute: visualUpdate true description: The UI object that implements the Component's LookAndFeel. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JLabel.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
将 UI 属性重置为当前外观的值。

@see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JLabel.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个指定 L&F 类名称的字符串，该类呈现此组件。

@return 字符串 &quot;LabelUI&quot;

@see JComponent#getUIClassID
@see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JLabel.getText()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回该标签所显示的文本字符串。

@return 一个 String
@see #setText

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JLabel.setText(String text)
<!-- END KEY -->
<!-- BEGIN DATA -->
定义此组件将要显示的单行文本。如果 text 值为 null 或空字符串，则什么也不显示。
 <p>
此属性的默认值为 null。
 <p>
这是一个 JavaBeans 绑定属性。  
 
@see #setVerticalTextPosition
@see #setHorizontalTextPosition
@see #setIcon
@beaninfo preferred: true bound: true attribute: visualUpdate true description: Defines the single line of text this component will display.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.JLabel.getIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该标签显示的图形图像（字形、图标）。

@return 一个 Icon
@see #setIcon

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JLabel.setIcon(Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
定义此组件将要显示的图标。如果 icon 值为 null，则什么也不显示。
 <p>
此属性的默认值为 null。
 <p>
这是一个 JavaBeans 绑定属性。  
 
@see #setVerticalTextPosition
@see #setHorizontalTextPosition
@see #getIcon
@beaninfo preferred: true bound:true attribute: visualUpdate true description: The icon this component will display.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.JLabel.getDisabledIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该标签被禁用时所使用的图标。如果尚未设置禁用图标，则此方法将转发对外观的调用，以构造一个合适的禁用图标。
 <p>
某些外观可能无法呈现禁用图标，在此情况下，外观将忽略此图标。

@return <code>disabledIcon</code> 属性
@see #setDisabledIcon
@see javax.swing.LookAndFeel#getDisabledIcon
@see ImageIcon

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JLabel.setDisabledIcon(Icon disabledIcon)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置如果此 JLabel 是&ldquo;禁用的&rdquo;(JLabel.setEnabled(false))，则要显示的图标。
 <p>
此属性的默认值为 null。
 
@param disabledIcon 组件禁用时要显示的图标
@see #getDisabledIcon
@see #setEnabled
@beaninfo bound: true attribute: visualUpdate true description: The icon to display if the label is disabled.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JLabel.setDisplayedMnemonic(int key)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定一个指示助记符键的键代码。当标签是一个较大组件的一部分时使用此属性。如果标签的 labelFor 属性不为 null，则助记符被激活时，标签将调用 labelFor 属性所指定组件的 requestFocus 方法。

@see #getLabelFor
@see #setLabelFor
@beaninfo bound: true attribute: visualUpdate true description: The mnemonic keycode.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JLabel.setDisplayedMnemonic(char aChar)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定 displayedMnemonic 为一个 char 值。

@param aChar  指定要显示的助记符的 char
@see #setDisplayedMnemonic(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JLabel.getDisplayedMnemonic()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指示助记符键的键代码。当标签是一个较大组件的一部分时使用此属性。如果标签的 labelFor 属性不为 null，则助记符被激活时，标签将调用 labelFor 属性所指定组件的 requestFocus 方法。

@return 用于助记符键的 int 值

@see #getLabelFor
@see #setLabelFor

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JLabel.setDisplayedMnemonicIndex(int index) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
关于应该装饰文本中的哪个字符以表示助记符，为外观提供一个提示。并非所有的外观都支持此功能。值 -1 指示没有助记符（字符串中不包含该助记符），或者开发人员不希望显示该助记符。
 <p>
此值随着与助记符相关属性的变化（如助记符本身、文本……）而得到更新。只有不希望对默认字符加下划线时，才必须调用此方法。例如，如果文本为 'Save As'，助记符为 'a'，而您希望装饰 'A'，使文本显示为 'Save <u>A</u>s'，那么您必须在调用 <code>setDisplayedMnemonic(KeyEvent.VK_A)</code> 之后调用 <code>setDisplayedMnemonicIndex(5)</code>。

@since 1.4
@param index 要加下划线的 String 中的索引
@exception IllegalArgumentException 在 <code>index</code> >= 文本长度或< -1 时抛出

@beaninfo bound: true attribute: visualUpdate true description: the index into the String to draw the keyboard character mnemonic at

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JLabel.getDisplayedMnemonicIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
以索引的形式返回字符，外观应提供该字符的装饰以表示助记符。

@since 1.4
@return 表示助记符的索引
@see #setDisplayedMnemonicIndex

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.JLabel.checkHorizontalKey(int key, String message)
<!-- END KEY -->
<!-- BEGIN DATA -->
验证该键是否为 horizontalAlignment 属性的合法值。

@param key 要检查的属性值
@param message IllegalArgumentException 详细消息
@exception IllegalArgumentException 如果 key 不是 LEFT、CENTER、RIGHT、LEADING 或 TRAILING。
@see #setHorizontalTextPosition
@see #setHorizontalAlignment

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.JLabel.checkVerticalKey(int key, String message)
<!-- END KEY -->
<!-- BEGIN DATA -->
验证该键是否为 verticalAlignment 或 verticalTextPosition 属性的合法值。

@param key 要检查的属性值
@param message IllegalArgumentException 详细消息
@exception IllegalArgumentException 如果 key 不是 TOP、CENTER 或 BOTTOM。
@see #setVerticalAlignment
@see #setVerticalTextPosition

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JLabel.getIconTextGap()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此标签中显示的文本和图标之间的间隔量。

@return 等于文本和图标之间像素数的 int 值。
@see #setIconTextGap

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JLabel.setIconTextGap(int iconTextGap)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果同时设置了图标和文本属性，则此属性定义它们之间的间隔。  
 <p>
此属性的默认值为 4 个像素。
 <p>
这是一个 JavaBeans 绑定属性。
 
@see #getIconTextGap
@beaninfo bound: true attribute: visualUpdate true description: If both the icon and text properties are set, this property defines the space between them.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JLabel.getVerticalAlignment()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回标签内容沿 Y 轴的对齐方式。

@return   verticalAlignment 属性的值，为 <code>SwingConstants</code> 中定义的以下常量之一：<code>TOP</code>、<code>CENTER</code> 或 <code>BOTTOM</code>。

@see SwingConstants
@see #setVerticalAlignment

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JLabel.setVerticalAlignment(int alignment)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置标签内容沿 Y 轴的对齐方式。  
 <p>
此属性的默认值为 CENTER。
 
@param alignment <code>SwingConstants</code> 中定义的以下常量之一：<code>TOP</code>、<code>CENTER</code>（默认）或 <code>BOTTOM</code>。

@see SwingConstants
@see #getVerticalAlignment
@beaninfo bound:true enum: TOP    SwingConstants.TOP CENTER SwingConstants.CENTER BOTTOM SwingConstants.BOTTOM attribute: visualUpdate true description: The alignment of the label's contents along the Y axis.  

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JLabel.getHorizontalAlignment()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回标签内容沿 X 轴的对齐方式。

@return   horizontalAlignment 属性的值，为 <code>SwingConstants</code> 中定义的以下常量之一：<code>LEFT</code>、<code>CENTER</code>、<code>RIGHT</code>、<code>LEADING</code> 或 <code>TRAILING</code>。

@see #setHorizontalAlignment
@see SwingConstants

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JLabel.setHorizontalAlignment(int alignment)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置标签内容沿 X 轴的对齐方式。
 <p>
这是一个 JavaBeans 绑定属性。

@param alignment <code>SwingConstants</code> 中定义的以下常量之一：<code>LEFT</code>、<code>CENTER</code>（只显示图像的标签的默认值）、<code>RIGHT</code>、<code>LEADING</code>（只显示文本的标签的默认值）或 <code>TRAILING</code>。

@see SwingConstants
@see #getHorizontalAlignment
@beaninfo bound:true enum: LEFT     SwingConstants.LEFT CENTER   SwingConstants.CENTER RIGHT    SwingConstants.RIGHT LEADING  SwingConstants.LEADING TRAILING SwingConstants.TRAILING attribute: visualUpdate true description: The alignment of the label's content along the X axis.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JLabel.getVerticalTextPosition()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回标签的文本相对其图像的垂直位置。

@return   <code>SwingConstants</code> 中定义的以下常量之一：<code>TOP</code>、<code>CENTER</code> 或 <code>BOTTOM</code>。

@see #setVerticalTextPosition
@see SwingConstants

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JLabel.setVerticalTextPosition(int textPosition)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置标签的文本相对其图像的垂直位置。
 <p>
此属性的默认值为 CENTER。
 <p>
这是一个 JavaBeans 绑定属性。

@param textPosition  <code>SwingConstants</code> 中定义的以下常量之一：<code>TOP</code>、<code>CENTER</code>（默认）或 <code>BOTTOM</code>。

@see SwingConstants
@see #getVerticalTextPosition
@beaninfo bound:true enum: TOP    SwingConstants.TOP CENTER SwingConstants.CENTER BOTTOM SwingConstants.BOTTOM expert:true attribute: visualUpdate true description: The vertical position of the text relative to it's image.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JLabel.getHorizontalTextPosition()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回标签的文本相对其图像的水平位置。

@return   <code>SwingConstants</code> 中定义的以下常量之一：<code>LEFT</code>、<code>CENTER</code>、<code>RIGHT</code>、<code>LEADING</code> 或 <code>TRAILING</code>。

@see SwingConstants

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JLabel.setHorizontalTextPosition(int textPosition)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置标签的文本相对其图像的水平位置。

@param textPosition  <code>SwingConstants</code> 中定义的以下常量之一：<code>LEFT</code>、<code>CENTER</code>、<code>RIGHT</code>、<code>LEADING</code> 或 <code>TRAILING</code>（默认）。
@exception IllegalArgumentException

@see SwingConstants
@beaninfo expert:true bound:true enum: LEFT     SwingConstants.LEFT CENTER   SwingConstants.CENTER RIGHT    SwingConstants.RIGHT LEADING  SwingConstants.LEADING TRAILING SwingConstants.TRAILING attribute: visualUpdate true description: The horizontal position of the label's text, relative to its image.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JLabel.imageUpdate(Image img, int infoflags, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前图标的图像不等于传入的图像 <code>img</code>，则重写此方法以返回 false。

@see     java.awt.image.ImageObserver
@see     java.awt.Component#imageUpdate(java.awt.Image, int, int, int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JLabel.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 JLabel 的字符串表示形式。此方法仅在进行调试的时候使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。
 
@return  此 JLabel 的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JLabel.getLabelFor()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取要添加标签的组件。

@return 要添加标签的 Component。如果无法为 Component 添加标签，则返回值可以为 null。如果设置了 displayedMnemonic 和 labelFor 属性，则助记符被激活时，标签将调用 labelFor 属性所指定组件的 requestFocus 方法。

@see #getDisplayedMnemonic
@see #setDisplayedMnemonic

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JLabel.setLabelFor(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置要添加标签的组件。如果无法为 Component 添加标签，则返回值可以为 null。如果设置了 displayedMnemonic 和 labelFor 属性，则助记符被激活时，标签将调用 labelFor 属性所指定组件的 requestFocus 方法。

@param c  要添加此标签的 Component，如果该标签不是组件的标签，则为 null

@see #getDisplayedMnemonic
@see #setDisplayedMnemonic
 
@beaninfo bound: true description: The component this is labelling.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JLabel.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->

获得此对象的 AccessibleContext。

@return 此对象的 AccessibleContext
@beaninfo expert: true description: The AccessibleContext associated with this Label.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JLabel.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

关于 Swing 中序列化的更多信息，请参阅 JComponent 中 readObject() 和 writeObject()。

<!-- END DATA -->
