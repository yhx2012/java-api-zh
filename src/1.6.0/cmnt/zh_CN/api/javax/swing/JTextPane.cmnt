<!-- BEGIN KEY -->
public class javax.swing.JTextPane extends javax.swing.JEditorPane
<!-- END KEY -->
<!-- BEGIN DATA -->
可以用以图形方式表示的属性来标记的文本组件。有关使用文本窗格的 how-to 信息和示例，请参阅 <em>The Java Tutorial</em> 中的 <a href="http://java.sun.com/docs/books/tutorial/uiswing/components/text.html">Using Text Components</a> 一节。

 <p>
此组件模仿了由一串字符级属性组成的段落。每个段落都可能有一个附加的逻辑样式，如果默认属性没有通过段落上的属性集或一串字符重写，则此样式包含要使用的默认属性。组件和图像可以嵌入在文本流中。
 <p>
<dl>
<dt><b><font size=+1>换行</font></b>
 <dd>
有关如果处理换行的讨论，请参阅 <a href="text/DefaultEditorKit.html">DefaultEditorKit</a>。
 </dl>

 <p>
<strong>警告：</strong>Swing 不是线程安全的。有关更多信息，请参阅　<a
 href="package-summary.html#threading">Swing's Threading Policy</a>。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@beaninfo attribute: isContainer true 描述：可以用以图形方式表示的属性来标记的文本组件。

@author  Timothy Prinzing
@version 1.90 12/19/03
@see javax.swing.text.StyledEditorKit

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JTextPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 <code>JTextPane</code>。创建并设置 <code>StyledEditorKit</code> 的一个新实例，并将文档模型设置为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JTextPane(StyledDocument doc)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定文档模型的新 <code>JTextPane</code>。创建并设置 <code>javax.swing.text.StyledEditorKit</code> 的一个新实例。

@param doc 文档模型

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JTextPane.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 UI 的类 ID。

@return 字符串 &quot;TextPaneUI&quot;

@see JComponent#getUIClassID
@see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTextPane.setDocument(Document doc)
<!-- END KEY -->
<!-- BEGIN DATA -->
将编辑器与一个文本文档关联。这必须是一个 <code>StyledDocument</code>。

@param doc  要显示/编辑的文档
@exception IllegalArgumentException  如果 <code>doc</code> 不能收缩为一个 <code>StyledDocument</code>，它是此文本组件所要求的模型类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTextPane.setStyledDocument(StyledDocument doc)
<!-- END KEY -->
<!-- BEGIN DATA -->
将编辑器与一个文本文档关联。当前注册的工厂用来生成文档的一个视图，此视图由编辑器来显示。

@param doc  要显示/编辑的文档

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.StyledDocument javax.swing.JTextPane.getStyledDocument()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与编辑器关联的模型。  

@return 模型

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTextPane.replaceSelection(String content)
<!-- END KEY -->
<!-- BEGIN DATA -->
用给定字符串所表示的新内容替换当前选择的内容。如果没有选择的内容，则该操作插入给定的文本。如果没有替换文本，则该操作移除当前选择的内容。替换文本将具有针对插入点的输入当前定义的属性。如果文档不是可编辑的，则发出蜂鸣并返回。
 <p>
虽然大多数 Swing 方法不是线程安全的，但此方法是线程安全的。有关更多信息，请参阅 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A>。     

@param content  替换选定内容的内容

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTextPane.insertComponent(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个组件插入到文档中，以替换当前选择的内容。如果当前没有选择的内容，则将组件插入到插入符号的当前位置。在相关文档中这表示为内容字符的一个属性。
 <p>
给定组件是 JTextPane 所使用的实际组件。由于组件不能是多个容器的子级，因此此方法不能在多个文本组件共享模型的情形下使用。
 <p>
根据 <code>Component.getAlignmentY</code> 返回的值，组件相对于文本基线放置。对于 Swing 组件，可以方便地使用 <code>JComponent.setAlignmentY</code> 方法来设置此值。例如，设置值 <code>0.75</code> 将导致组件的 75% 位于基线之上，组件的 25% 位于基线之下。
 <p>
虽然大多数 Swing 方法不是线程安全的，但此方法是线程安全的。有关更多信息，请参阅 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A>。     

@param c  要插入的组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTextPane.insertIcon(Icon g)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个图标插入文档中，以替换当前选择的内容。如果当前没有选择的内容，则将图标插入到插入符号的当前位置。在相关文档中这被表示为内容字符的一个属性。  
 <p>
虽然大多数 Swing 方法不是线程安全的，但此方法是线程安全的。有关更多信息，请参阅 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A>。  

@param g  要插入的图标
@see Icon

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Style javax.swing.JTextPane.addStyle(String nm, Style parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个新样式添加到逻辑样式层次结构中。样式属性自底向上进行解析，这样在子级中指定的属性重写在父级中指定的属性。

@param nm  样式的名称（在命名样式集合中必须是惟一的）。如果样式未命名，则其名称可以为 <code>null</code>，但是调用者要负责管理返回的引用，因为未命名的样式不能通过其名称获取。未命名的样式可以用于诸如字符属性重写这类情况，比如，在样式运行中。
@param parent 父样式。如果未指定的属性不需要以其他样式解析，则此值可以为 <code>null</code>。
@return 新的 <code>Style</code> 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTextPane.removeStyle(String nm)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除以前添加到文档中的已命名的非 <code>null</code> 样式。  

@param nm  要移除的样式名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Style javax.swing.JTextPane.getStyle(String nm)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取以前添加的已命名的非 <code>null</code> 样式。

@param nm  样式名称
@return <code>Style</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTextPane.setLogicalStyle(Style s)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置在当前插入符号位置用于段落的逻辑样式。如果没有为字符和段落属性显式设置属性，则它们将通过分配给段落的逻辑样式进行解析，也就是通过某个层次结构来解析，该层次结构完全独立于文档中元素的层次结构。
 <p>
虽然大多数 Swing 方法不是线程安全的，但此方法是线程安全的。有关更多信息，请参阅 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A>。     

@param s  要分配给段落的逻辑样式，如果没有样式，则为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Style javax.swing.JTextPane.getLogicalStyle()
<!-- END KEY -->
<!-- BEGIN DATA -->

获取分配给由当前插入符号位置表示的段落的逻辑样式，或者 <code>null</code>。

@return <code>Style</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.JTextPane.getCharacterAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取在当前插入符号位置的有效字符属性，或者 <code>null</code>。  

@return 属性，或者 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTextPane.setCharacterAttributes(AttributeSet attr, boolean replace)
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定属性应用于字符内容。如果有选择内容，则属性将应用于所选择的范围。如果没有选择内容，则属性将应用于输入属性集合，此集合定义了所有新插入文本的属性。
 <p>
虽然大多数 Swing 方法不是线程安全的，但此方法是线程安全的。有关更多信息，请参阅 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A>。     

@param attr 属性
@param replace 如果为 true，则首先替换现有属性

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.JTextPane.getParagraphAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取插入符号位置的当前有效段落属性，如果没有，则返回 <code>null</code>。

@return 属性

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTextPane.setParagraphAttributes(AttributeSet attr, boolean replace)
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定属性应用于段落。如果有选择内容，则将属性应用于与选择内容相交的段落。如果没有选择内容，则将属性应用于当前插入符号位置的段落。
 <p>
虽然大多数 Swing 方法不是线程安全的，但此方法是线程安全的。有关更多信息，请参阅 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A>。     

@param attr 非 <code>null</code> 属性
@param replace 如果为 true，则首先替换现有属性

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.MutableAttributeSet javax.swing.JTextPane.getInputAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取窗格的输入属性。

@return 属性

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final javax.swing.text.StyledEditorKit javax.swing.JTextPane.getStyledEditorKit()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取编辑器工具包。

@return 编辑器工具包

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.EditorKit javax.swing.JTextPane.createDefaultEditorKit()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建默认使用的 <code>EditorKit</code>。此实现返回 <code>javax.swing.text.StyledEditorKit</code>。

@return 编辑器工具包

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.swing.JTextPane.setEditorKit(EditorKit kit)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置当前安装的用于内容处理的工具包。这是建立编辑器内容类型的绑定属性。
 
@param kit 所需的编辑器行为
@exception IllegalArgumentException 如果 kit 不是一个 <code>StyledEditorKit</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JTextPane.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JTextPane</code> 的字符串表示形式。此方法仅在进行调试的时候使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。
 
@return  此 <code>JTextPane</code> 的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JTextPane.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

有关 Swing 中序列化的更多信息，请参阅 <code>JComponent</code> 中的 <code>readObject</code> 和 <code>writeObject</code>。

@param s 输出流

<!-- END DATA -->
