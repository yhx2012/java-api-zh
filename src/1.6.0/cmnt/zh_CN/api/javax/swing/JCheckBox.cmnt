<!-- BEGIN KEY -->
public class javax.swing.JCheckBox extends javax.swing.JToggleButton implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
复选框的实现，复选框是一个可以被选定和取消选定的项，它将其状态显示给用户。按照惯例，可以选定组中任意数量的复选框。有关使用复选框的示例和信息，请参阅 <em>The Java Tutorial</em> 中的 <a href="http://java.sun.com/docs/books/tutorial/uiswing/components/button.html">How to Use Buttons, Check Boxes, and Radio Buttons</a>。
 <p>
  通过 <code><a href="Action.html">Action</a></code> 可配置按钮，并进行某种程度的控制。将 <code>Action</code> 用于按钮具有许多直接配置按钮所不及的优点。有关更多详细信息，请参阅<a href="Action.html#buttonActions">支持 <code>Action</code></a> 的 Swing 组件，可在 <em>The Java Tutorial</em> 中的 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/misc/action.html">How
 to Use Actions</a> 一节找到更多信息。
 <p>
 <strong>警告：</strong> Swing 不是线程安全的。有关更多信息，请参阅 <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>。
 <p>
<strong>警告：</strong>此类的序列化对象将与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@see JRadioButton

@beaninfo attribute: isContainer false description: A component which can be selected or deselected.

@version 1.73 12/19/03
@author Jeff Dinkins

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JCheckBox.BORDER_PAINTED_FLAT_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识 flat 属性的更改。
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JCheckBox()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个没有文本、没有图标并且最初未被选定的复选框。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JCheckBox(Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建有一个图标、最初未被选定的复选框。

@param icon  要显示的 Icon 图像

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JCheckBox(Icon icon, boolean selected)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个带图标的复选框，并指定其最初是否处于选定状态。

@param icon  要显示的 Icon 图像
@param selected 指示最初选择状态的 boolean 值。如果该参数为 <code>true</code>，则复选框被选定

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JCheckBox(String text)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个带文本的、最初未被选定的复选框。

@param text  复选框的文本

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JCheckBox(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个复选框，其属性从所提供的 Action 获取。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JCheckBox(String text, boolean selected)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个带文本的复选框，并指定其最初是否处于选定状态。

@param text  复选框的文本
@param selected  指示最初选择状态的 boolean 值。如果该参数为 <code>true</code>，则复选框被选定

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JCheckBox(String text, Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带有指定文本和图标的、最初未选定的复选框。

@param text  复选框的文本
@param icon  要显示的 Icon 图像

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JCheckBox(String text, Icon icon, boolean selected)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个带文本和图标的复选框，并指定其最初是否处于选定状态。

@param text  复选框的文本
@param icon  要显示的 Icon 图像
@param selected 指示最初选择状态的 boolean 值。如果该参数为 <code>true</code>，则复选框被选定

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JCheckBox.setBorderPaintedFlat(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>borderPaintedFlat</code> 属性，该属性为外观提供了关于复选框边框外观的提示。在 <code>JCheckBox</code> 实例用作组件（如 <code>JTable</code> 或 <code>JTree</code>）中的渲染器时，该属性通常被设置为 <code>true</code>。<code>borderPaintedFlat</code> 属性的默认值为 <code>false</code>。此方法触发一个属性更改事件。一些外观也许不实现平面边框；它们将忽略此属性。

@param b 为 <code>true</code> 则请求将边框绘制为平面的；为 <code>false</code> 则请求为普通边框
@see #isBorderPaintedFlat
@beaninfo bound: true attribute: visualUpdate true description: Whether the border is painted flat.
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JCheckBox.isBorderPaintedFlat()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>borderPaintedFlat</code> 属性的值。

@return <code>borderPaintedFlat</code> 属性的值
@see #setBorderPaintedFlat
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JCheckBox.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
根据当前外观重置 UI 属性值。

@see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JCheckBox.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定呈现此组件的 L&F 类名的字符串。

@return 字符串 &quot;CheckBoxUI&quot;
@see JComponent#getUIClassID
@see UIDefaults#getUI
@beaninfo expert: true description: A string that specifies the name of the L&F class

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JCheckBox.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 JCheckBox 的字符串表示形式。此方法仅在进行调试的时候使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。JFC 组件的一些特定的新的方面。
 
@return a 此 JCheckBox 的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JCheckBox.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 JCheckBox 关联的 AccessibleContext。对于 JCheckBoxes，AccessibleContext 采用 AccessibleJCheckBox 的形式。如有必要，可创建一个新的 AccessibleJCheckBox 实例。

@return 一个 AccessibleJCheckBox，它将充当此 JCheckBox 的 AccessibleContext
@beaninfo expert: true description: The AccessibleContext associated with this CheckBox.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JCheckBox.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
有关 Swing 中序列化的更多信息，请参见 JComponent.readObject()。

<!-- END DATA -->
