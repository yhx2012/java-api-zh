<!-- BEGIN KEY -->
public final class javax.swing.event.SwingPropertyChangeSupport extends java.beans.PropertyChangeSupport
<!-- END KEY -->
<!-- BEGIN DATA -->
{@code java.beans.PropertyChangeSupport} 的这一子类在功能上几乎是等效的。唯一的不同在于，如果用 {@code SwingPropertyChangeSupport(sourceBean, true)} 构造此类，它确保只在<i>事件指派线程</i> 上通知侦听器。

@version 1.23 02/14/06
@author Igor Kushnirskiy

<!-- END DATA -->
<!-- BEGIN KEY -->
private final boolean javax.swing.event.SwingPropertyChangeSupport.notifyOnEDT
<!-- END KEY -->
<!-- BEGIN DATA -->
是否在 EDT 上通知侦听器。
 
@serial 
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.SwingPropertyChangeSupport(Object sourceBean)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 SwingPropertyChangeSupport 对象。

@param sourceBean  作为所有事件的源提供的 bean。
@throws NullPointerException 如果 {@code sourceBean} 为 {@code null}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.SwingPropertyChangeSupport(Object sourceBean, boolean notifyOnEDT)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 SwingPropertyChangeSupport 对象。
 
@param sourceBean 作为所有事件的源提供的 bean 
@param notifyOnEDT 是否只在<i>事件指派线程</i> 上通知侦听器

@throws NullPointerException 如果 {@code sourceBean} 为 {@code null}
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.event.SwingPropertyChangeSupport.firePropertyChange(PropertyChangeEvent evt)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<p>
如果 {@link #isNotifyOnEDT} 为 {@code true} 并且取消了<i>事件指派线程</i>，则此实现使用 {@code SwingUtilities.invokeLater} 在<i>事件指派线程</i> 上发送通知。这确保只在<i>事件指派线程</i> 上通知侦听器。
 
@throws NullPointerException 如果 {@code evt} 为 {@code null}
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean javax.swing.event.SwingPropertyChangeSupport.isNotifyOnEDT()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 {@code notifyOnEDT} 属性。
 
@return {@code notifyOnEDT} 属性
@see #SwingPropertyChangeSupport(Object sourceBean, boolean notifyOnEDT)
@since 1.6

<!-- END DATA -->
