<!-- BEGIN KEY -->
public class javax.swing.event.TableModelEvent extends java.util.EventObject
<!-- END KEY -->
<!-- BEGIN DATA -->
TableModelEvent 用于通知侦听器某一表模型已发生更改。模型事件描述 TableModel 的更改，并且对行和列的所有引用都在该模型的坐标系统中。可以根据构造方法中使用的参数，用 TableModelevent 指定以下更改类型： <p>

 <pre>
 TableModelEvent(source);              //  The data, ie. all rows changed 
 TableModelEvent(source, HEADER_ROW);  //  Structure change, reallocate TableColumns
 TableModelEvent(source, 1);           //  Row 1 changed
 TableModelEvent(source, 3, 6);        //  Rows 3 to 6 inclusive changed
 TableModelEvent(source, 2, 2, 6);     //  Cell at (2, 6) changed
 TableModelEvent(source, 3, 6, ALL_COLUMNS, INSERT); // Rows (3, 6) were inserted
 TableModelEvent(source, 3, 6, ALL_COLUMNS, DELETE); // Rows (3, 6) were deleted
 </pre>

可以使用其他参数组合，但并不是所有的参数都有意义。通过创建子类，可以添加其他任何信息，例如：事件&ldquo;将要&rdquo;发生，还是&ldquo;确实已经&rdquo;发生。这使得 DELETE 事件中的行的指定更有用，但这并没有包含在 swing 包中，因为 JTable 只需要发送事件的通知。 
 <p>
<strong>警告：</strong>此类的序列化对象将与以后的 Swing 版本不兼容。当前的序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.21 12/19/03
@author Alan Chung
@author Philip Milne
@see TableModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.event.TableModelEvent.INSERT
<!-- END KEY -->
<!-- BEGIN DATA -->
标识新行或新列的添加。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.event.TableModelEvent.UPDATE
<!-- END KEY -->
<!-- BEGIN DATA -->
标识现有数据的更改。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.event.TableModelEvent.DELETE
<!-- END KEY -->
<!-- BEGIN DATA -->
标识行或列的移除。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.event.TableModelEvent.HEADER_ROW
<!-- END KEY -->
<!-- BEGIN DATA -->
标识标题行。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.event.TableModelEvent.ALL_COLUMNS
<!-- END KEY -->
<!-- BEGIN DATA -->
指定一行或一些行中的所有列。
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.TableModelEvent(TableModel source)
<!-- END KEY -->
<!-- BEGIN DATA -->

如果表中的所有行数据都发生更改，那么侦听器应该丢弃基于这些行的所有状态，并重新查询 <code>TableModel</code> 来获得新的行计数和所有恰当值。<code>JTable</code> 将重新绘制接收此事件有关的整个可见区域，并查询模型来获得可见的单元格值。表的结构（即列的名称、类型和顺序）未发生更改。  

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.TableModelEvent(TableModel source, int row)
<!-- END KEY -->
<!-- BEGIN DATA -->
此数据行已被更新。为了表示具有不同结构的整个新表都已到达，可使用 <code>HEADER_ROW</code> 作为 <code>row</code> 的值。当 <code>JTable</code> 接收此事件，并且其 <code>autoCreateColumnsFromModel</code> 标志被设置，它将丢弃它所拥有的所有 TableColumn，并按照这些列在模型中出现的顺序重新分配默认列。此方法等效于在 <code>JTable</code> 上调用 <code>setModel(TableModel)</code>。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.TableModelEvent(TableModel source, int firstRow, int lastRow)
<!-- END KEY -->
<!-- BEGIN DATA -->
行 [<I>firstRow</I>, <I>lastRow</I>] 中的数据已被更新。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.TableModelEvent(TableModel source, int firstRow, int lastRow, int column)
<!-- END KEY -->
<!-- BEGIN DATA -->
列 <I>column</I> 的 [<I>firstRow</I>, <I>lastRow</I>] 范围内的单元格已被更新。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.TableModelEvent(TableModel source, int firstRow, int lastRow, int column, int type)
<!-- END KEY -->
<!-- BEGIN DATA -->
从 (firstRow, column) 到 (lastRow, column) 的单元格已被更改。<I>column</I> 引用模型坐标系统中的单元格的列索引。当 <I>column</I> 为 ALL_COLUMNS 时，指定行范围中的所有单元格都被认为是已更改的。 
  <p>
<I>type</I> 应该是以下类型之一：INSERT、UPDATE 和 DELETE。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.event.TableModelEvent.getFirstRow()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回第一个被更改的行。HEADER_ROW 表示元数据，即列的名称、类型和顺序。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.event.TableModelEvent.getLastRow()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最后一个被更改的行。
<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.event.TableModelEvent.getColumn()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回事件的列。如果返回值为 ALL_COLUMNS，则意味着指定行中的所有列都被更改。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.event.TableModelEvent.getType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回事件类型，该类型为以下类型之一：INSERT、UPDATE 和 DELETE。

<!-- END DATA -->
