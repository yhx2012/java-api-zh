<!-- BEGIN KEY -->
public class javax.swing.event.AncestorEvent extends java.awt.AWTEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
报告给子组件的事件，该子组件源自组件层次结构中的某个祖先。
 <p>
<strong>警告：</strong>此类的序列化对象将与以后的 Swing 版本不兼容。当前的序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.19 12/19/03
@author Dave Moore

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.event.AncestorEvent.ANCESTOR_ADDED
<!-- END KEY -->
<!-- BEGIN DATA -->
某个祖先组件被添加到可见对象的层次结构中（使其可见），并且目前正显示该组件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.event.AncestorEvent.ANCESTOR_REMOVED
<!-- END KEY -->
<!-- BEGIN DATA -->
某个祖先组件从可见对象的层次结构中被移除（隐藏它），并且不再显示该组件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.event.AncestorEvent.ANCESTOR_MOVED
<!-- END KEY -->
<!-- BEGIN DATA -->
某个祖先组件更改了其屏幕位置。
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.AncestorEvent(JComponent source, int id, Container ancestor, Container ancestorParent)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 AncestorEvent 对象，以标识祖先组件显示状态的更改。

@param source          发起事件的 JComponent（通常为 <code>this</code>）
@param id              指定 {@link #ANCESTOR_ADDED}、{@link #ANCESTOR_REMOVED} 或 {@link #ANCESTOR_MOVED} 的 int 值
@param ancestor        指定显示状态已发生更改的祖先容器的 Container 对象
@param ancestorParent  指定祖先容器的父容器的 Container 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Container javax.swing.event.AncestorEvent.getAncestor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回实际发生事件的祖先组件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Container javax.swing.event.AncestorEvent.getAncestorParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回实际发生事件的祖先组件的父组件。此方法在 ANCESTOR_REMOVED 事件中最为有趣，因为祖先组件可能不再位于组件层次结构中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JComponent javax.swing.event.AncestorEvent.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回添加了侦听器的组件。

<!-- END DATA -->
