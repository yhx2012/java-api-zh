<!-- BEGIN KEY -->
public class javax.swing.MenuSelectionManager extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
MenuSelectionManager 拥有菜单层次结构中的选项。

@version 1.38 12/19/03
@author Arnaud Weber

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.event.ChangeEvent javax.swing.MenuSelectionManager.changeEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
每个按钮模型实例只需要一个 ChangeEvent，因为事件的惟一状态是 source 属性。所生成事件的 source 总是 &quot;this&quot;。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.MenuSelectionManager javax.swing.MenuSelectionManager.defaultManager()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回默认菜单选项管理器。

@return MenuSelectionManager 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.MenuSelectionManager.setSelectedPath(javax.swing.MenuElement[] path)
<!-- END KEY -->
<!-- BEGIN DATA -->
更改菜单层次结构中的选项。数组中的元素按从根菜单元素到当前选定菜单元素的顺序排列。
 <p>
注意，此方法为公共方法，但供外观引擎使用，不应由客户端应用程序调用。

@param path 指定选择路径的 <code>MenuElement</code> 对象的数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.MenuElement[] javax.swing.MenuSelectionManager.getSelectedPath()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前选择菜单项的路径

@return 表示所选路径的 MenuElement 对象的数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.MenuSelectionManager.clearSelectedPath()
<!-- END KEY -->
<!-- BEGIN DATA -->
告知菜单选项，以关闭和取消选择所有菜单组件。在做出选择时调用此方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.MenuSelectionManager.addChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
向按钮添加 ChangeListener。

@param l 要添加的侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.MenuSelectionManager.removeChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
从按钮中移除 ChangeListener。

@param l 要移除的侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.ChangeListener[] javax.swing.MenuSelectionManager.getChangeListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回使用 addChangeListener() 添加到此 MenuSelectionManager 的所有 <code>ChangeListener</code> 的数组。

@return 所有添加的 <code>ChangeListener</code>，如果没有添加侦听器，则返回空数组
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.MenuSelectionManager.fireStateChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有对此事件类型的通知感兴趣的已注册侦听器。以延迟方式创建事件实例。

@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.MenuSelectionManager.processMouseEvent(MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
当 MenuElement 从 MouseListener 接收事件时，它决不应直接处理该事件。相反，所有 MenuElements 应使用该事件调用此方法。

@param event  MouseEvent 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.MenuSelectionManager.componentForPoint(Component source, Point sourcePoint)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含 sourcePoint 的当前选择路径的组件。

@param source 已给定坐标空间 sourcePoint 的组件
@param sourcePoint 正在被测试的点
@return 包含 sourcePoint（相对于源组件的坐标空间）的当前选择路径的组件。如果 sourcePoint 不在当前选择路径上的组件中，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.MenuSelectionManager.processKeyEvent(KeyEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
当 MenuElement 从 KeyListener 接收事件时，它决不应直接处理该事件。相反，所有 MenuElements 应使用该事件调用此方法。

@param e  KeyEvent 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.MenuSelectionManager.isComponentPartOfCurrentMenu(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->

如果 c 是当前使用菜单的一部分，则返回 true

<!-- END DATA -->
