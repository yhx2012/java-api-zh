<!-- BEGIN KEY -->
protected class javax.swing.JMenuBar.AccessibleJMenuBar extends javax.swing.JComponent.AccessibleJComponent implements javax.accessibility.AccessibleSelection
<!-- END KEY -->
<!-- BEGIN DATA -->
此类实现 <code>JMenuBar</code> 类的可访问性支持。它提供适合菜单用户界面元素的 Java Accessibility API 的实现。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleStateSet javax.swing.JMenuBar.AccessibleJMenuBar.getAccessibleStateSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得此对象的可访问性状态设置。

@return 包含对象当前状态的 AccessibleState 的实例

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleRole javax.swing.JMenuBar.AccessibleJMenuBar.getAccessibleRole()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的职责。

@return 描述对象职责的 AccessibleRole 的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleSelection javax.swing.JMenuBar.AccessibleJMenuBar.getAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此对象相关联的 AccessibleSelection。在此类的 Java Accessibility API 的实现中，返回的是此对象，它负责为其本身实现 AccessibleSelection 接口。
 
@return 此对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JMenuBar.AccessibleJMenuBar.getAccessibleSelectionCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前在此菜单栏中选择了菜单，则返回 1。

@return 如果当前选择了菜单，则返回 1；否则返回 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JMenuBar.AccessibleJMenuBar.getAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前选择的菜单（如果选择了一个）；否则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JMenuBar.AccessibleJMenuBar.isAccessibleChildSelected(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果选择了此对象的当前子级，则返回 true。

@param i 此 Accessible 对象的子级从零开始的索引。
@see AccessibleContext#getAccessibleChild

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.AccessibleJMenuBar.addAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
在菜单栏中选择第 n 个菜单，并强制其弹出。如果另一个菜单已弹出，则此操作将强制其关闭。如果第 n 个菜单已被选择，则此方法无效。

@param i 可选择项的从零开始的索引
@see #getAccessibleStateSet

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.AccessibleJMenuBar.removeAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
从对象选择中移除对象中的第 n 个选项。如果当前没有选择第 n 项，则此方法无效。否则，它将关闭弹出菜单。

@param i 可选择项的从零开始的索引

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.AccessibleJMenuBar.clearAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
清除对象中的选择，从而对象中没有选择任何项。此操作将关闭任何打开的菜单。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.AccessibleJMenuBar.selectAllAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果对象支持多种选择，则通常导致选择对象中的所有选择项。此方法在菜单栏中没有意义，因此不执行任何操作。

<!-- END DATA -->
