<!-- BEGIN KEY -->
public abstract class javax.swing.FocusManager extends java.awt.DefaultKeyboardFocusManager
<!-- END KEY -->
<!-- BEGIN DATA -->
从 1.4 focus API 开始，此类已被废弃。虽然客户机代码可能仍然使用此类，但强烈建议开发人员使用 <code>java.awt.KeyboardFocusManager</code> 和 <code>java.awt.DefaultKeyboardFocusManager</code> 替代。
 <p>
有关更多信息，请参阅 <em>The Java Tutorial</em> 中的 <a href="http://java.sun.com/docs/books/tutorial/uiswing/misc/focus.html">How to Use the Focus Subsystem</a> 一节和 <a href="../../java/awt/doc-files/FocusSpec.html">Focus Specification</a>。

@see <a href="../../java/awt/doc-files/FocusSpec.html">Focus Specification</a>

@version 1.28, 05/18/04
@author Arnaud Weber
@author David Mendenhall

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.FocusManager.FOCUS_MANAGER_CLASS_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
该字段已被废弃，不鼓励使用它，因为它的规范与 1.4 focus API 不兼容。当前的 FocusManager 已经不再是 UI 的一个属性。客户端代码必须使用 <code>KeyboardFocusManager.getCurrentKeyboardFocusManager()</code> 来查询当前的 FocusManager。有关更多信息，请参阅 Focus Specification。

@see java.awt.KeyboardFocusManager#getCurrentKeyboardFocusManager
@see <a href="../../java/awt/doc-files/FocusSpec.html">Focus Specification</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.FocusManager javax.swing.FocusManager.getCurrentManager()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回调用线程上下文的当前 <code>KeyboardFocusManager</code> 实例。

@return 此线程上下文的 <code>KeyboardFocusManager</code>
@see #setCurrentManager

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.FocusManager.setCurrentManager(FocusManager aFocusManager) throws java.lang.SecurityException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置调用线程上下文的当前 <code>KeyboardFocusManager</code> 实例。如果指定了 <code>null</code>，则使用 <code>DefaultKeyboardFocusManager</code> 的新实例替换当前的 <code>KeyboardFocusManager</code>。
 <p>
如果安装了 <code>SecurityManager</code>，则必须授予调用线程 <code>AWTPermission</code> &quot;replaceKeyboardFocusManager&quot; 权限才能替换当前的 <code>KeyboardFocusManager</code>。如果未授予该权限，则此方法将抛出 <code>SecurityException</code>，而当前的 <code>KeyboardFocusManager</code> 不会改变。

@param aFocusManager 此线程上下文的新 <code>KeyboardFocusManager</code>
@see #getCurrentManager
@see java.awt.DefaultKeyboardFocusManager
@throws SecurityException 如果调用线程没有替换当前 <code>KeyboardFocusManager</code> 的权限

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.FocusManager.disableSwingFocusManager()
<!-- END KEY -->
<!-- BEGIN DATA -->
将当前 <code>KeyboardFocusManager</code> 的默认 <code>FocusTraversalPolicy</code> 更改为 <code>DefaultFocusTraversalPolicy</code>。

@see java.awt.DefaultFocusTraversalPolicy
@see java.awt.KeyboardFocusManager#setDefaultFocusTraversalPolicy
@deprecated 从 1.4 开始，由 <code>KeyboardFocusManager.setDefaultFocusTraversalPolicy(FocusTraversalPolicy)</code> 取代

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.FocusManager.isFocusManagerEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回应用程序是否已调用 <code>disableSwingFocusManager()</code>。

@see #disableSwingFocusManager
@deprecated 从 1.4 开始，由 <code>KeyboardFocusManager.getDefaultFocusTraversalPolicy()</code> 取代

<!-- END DATA -->
