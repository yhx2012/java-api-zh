<!-- BEGIN KEY -->
public class javax.swing.JPopupMenu extends javax.swing.JComponent implements javax.accessibility.Accessible, javax.swing.MenuElement
<!-- END KEY -->
<!-- BEGIN DATA -->
弹出菜单的实现，弹出菜单是一个可弹出并显示一系列选项的小窗口。<code>JPopupMenu</code> 用于用户在菜单栏上选择项时显示的菜单。它还用于当用户选择菜单项并激活它时显示的&ldquo;右拉式 (pull-right)&rdquo;菜单。最后，<code>JPopupMenu</code> 还可以在想让菜单显示的任何其他位置使用。例如，当用户在指定区域中右击时。
 <p>
有关使用弹出菜单的示例和信息，请参阅 <em>The Java Tutorial</em> 中的 <a  href="http://java.sun.com/docs/books/tutorial/uiswing/components/menu.html">How to Use Menus</a>。
 <p>
<strong>警告：</strong>Swing 不是线程安全的。有关更多信息，请参阅 <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@beaninfo attribute: isContainer false description: A small window that pops up and displays a series of choices.

@version 1.191
@(#)JPopupMenu.java	1.191
@author Georges Saab
@author David Karlton
@author Arnaud Weber

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean javax.swing.JPopupMenu.lightWeightPopup
<!-- END KEY -->
<!-- BEGIN DATA -->
用于指示是否应该使用轻量级弹出菜单。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JPopupMenu()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个不带&ldquo;调用者&rdquo;的 <code>JPopupMenu</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JPopupMenu(String label)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有指定标题的 <code>JPopupMenu</code>。

@param label  可以被 UI 用作弹出菜单的标题显示的字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.JPopupMenu.setDefaultLightWeightPopupEnabled(boolean aFlag)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>lightWeightPopupEnabled</code> 属性的默认值。

@param aFlag 如果弹出菜单为轻量级，则为 <code>true</code>；否则为 <code>false</code>
@see #getDefaultLightWeightPopupEnabled
@see #setLightWeightPopupEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.JPopupMenu.getDefaultLightWeightPopupEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->

获取 <code>defaultLightWeightPopupEnabled</code> 属性，默认情况下，该属性为 <code>true</code>。

@return <code>defaultLightWeightPopupEnabled</code> 属性的值

@see #setDefaultLightWeightPopupEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.PopupMenuUI javax.swing.JPopupMenu.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于呈现此组件的外观 (L&F) 对象。

@return 呈现此组件的 <code>PopupMenuUI</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setUI(PopupMenuUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置呈现此组件的 L&F 对象。

@param ui  新 <code>PopupMenuUI</code> L&F 对象
@see UIDefaults#getUI
@beaninfo bound:true hidden:true attribute: visualUpdate true description: The UI object that implements the Component's LookAndFeel. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
将 UI 属性重置为一个来自当前外观的值。


@see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JPopupMenu.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于呈现此组件的 L&F 类名。

@return 字符串 &quot;PopupMenuUI&quot;
@see JComponent#getUIClassID
@see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JPopupMenu.processKeyEvent(KeyEvent evt)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理快捷键事件，如助记符和加速器。

@param evt  要处理的键事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.SingleSelectionModel javax.swing.JPopupMenu.getSelectionModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回处理单个选择的模型对象。

@return <code>selectionModel</code> 属性
@see SingleSelectionModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setSelectionModel(SingleSelectionModel model)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置处理单个选择的模型对象。

@param model 新 <code>SingleSelectionModel</code>
@see SingleSelectionModel
@beaninfo description: The selection model for the popup menu expert: true

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem javax.swing.JPopupMenu.add(JMenuItem menuItem)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定菜单项添加到此菜单的末尾。 

@param menuItem 要添加的 <code>JMenuItem</code>
@return 已添加的 <code>JMenuItem</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem javax.swing.JPopupMenu.add(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定文本的菜单项，并将其添加到此菜单的末尾。
  
@param s 要添加的菜单项的字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem javax.swing.JPopupMenu.add(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指派指定 <code>Action</code> 对象的新菜单项添加到菜单的末尾。

@param a 要添加到菜单的 <code>Action</code>
@return 新菜单项
@see Action

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JMenuItem javax.swing.JPopupMenu.createActionComponent(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
该工厂方法为添加到 <code>JPopupMenu</code> 的 <code>Action</code> 创建对应的 <code>JMenuItem</code>。

@param a 要添加的菜单项的 <code>Action</code>
@return 新菜单项
@see Action

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeListener javax.swing.JPopupMenu.createActionChangeListener(JMenuItem b)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个正确配置的 <code>PropertyChangeListener</code>，它在 <code>Action</code> 发生更改时更新控件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.remove(int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此弹出菜单移除指定索引处的组件。

@param       pos 要移除的项的位置
@exception   IllegalArgumentException 如果 <code>pos</code> 的值 &lt; 0 或者 <code>pos</code> 的值大于项数

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setLightWeightPopupEnabled(boolean aFlag)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>lightWeightPopupEnabled</code> 属性的值，默认情况下该值为 <code>true</code>。默认情况下，当外观显示弹出菜单时，它选择使用轻量级（纯 Java 的）弹出菜单。轻量级弹出窗口比重量级（本机同位体）窗口效果更好，但是轻量级和重量级组件在 GUI 中不能很好地混合使用。如果应用程序混合使用轻量级和重量级组件，则应该禁用轻量级弹出窗口。某些外观可能始终使用重量级弹出菜单，不管此属性的值如何。

@param aFlag 为 <code>false</code> 表示禁用轻量级弹出菜单
@beaninfo description: Determines whether lightweight popups are used when possible expert: true

@see #isLightWeightPopupEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JPopupMenu.isLightWeightPopupEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>lightWeightPopupEnabled</code> 属性。

@return <code>lightWeightPopupEnabled</code> 属性的值
@see #setLightWeightPopupEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JPopupMenu.getLabel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回弹出菜单的标签。

@return 包含弹出菜单标签的字符串
@see #setLabel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setLabel(String label)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置弹出菜单的标签。不同的外观可以选择显示，也可以选择不显示这一项。

@param label 指定弹出菜单标签的字符串

@see #setLabel
@beaninfo description: The label for the popup menu. bound: true

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.addSeparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
将新分隔符添加到菜单的末尾。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.insert(Action a, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定位置插入指定 <code>Action</code> 对象的菜单项。

@param a  要插入的 <code>Action</code> 对象
@param index      指定插入 <code>Action</code> 的位置，其中 0 为第一个
@exception IllegalArgumentException 如果 <code>index</code> &lt; 0
@see Action

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.insert(Component component, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定组件插入到菜单的给定位置。

@param component  要插入的 <code>Component</code>
@param index      指定插入组件的位置，其中 0 为第一个
@exception IllegalArgumentException 如果 <code>index</code> &lt; 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.addPopupMenuListener(PopupMenuListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加 <code>PopupMenu</code> 侦听器。

@param l  要添加的 <code>PopupMenuListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.removePopupMenuListener(PopupMenuListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除 <code>PopupMenu</code> 侦听器。

@param l  要移除的 <code>PopupMenuListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.PopupMenuListener[] javax.swing.JPopupMenu.getPopupMenuListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回利用 addPopupMenuListener() 添加到此 JMenuItem 的所有 <code>PopupMenuListener</code> 组成的数组。
 
@return 所有添加的 <code>PopupMenuListener</code>，如果没有添加侦听器，则返回一个空数组
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.addMenuKeyListener(MenuKeyListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>MenuKeyListener</code> 添加到弹出菜单。

@param l 要添加的 <code>MenuKeyListener</code>
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.removeMenuKeyListener(MenuKeyListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
从弹出菜单移除 <code>MenuKeyListener</code>。

@param l 要移除的 <code>MenuKeyListener</code>
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.MenuKeyListener[] javax.swing.JPopupMenu.getMenuKeyListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回利用 addMenuKeyListener() 添加到此 JPopupMenu 的所有 <code>MenuKeyListener</code> 组成的数组。

@return 添加的所有 <code>MenuKeyListener</code>，如果没有添加侦听器，则返回一个空数组
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JPopupMenu.firePopupMenuWillBecomeVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知 <code>PopupMenuListener</code> 此弹出菜单将变得可见。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JPopupMenu.firePopupMenuWillBecomeInvisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知 <code>PopupMenuListener</code> 此弹出菜单将变得不可见。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JPopupMenu.firePopupMenuCanceled()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知 <code>PopupMenuListener</code> 此弹出菜单将被取消。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.pack()
<!-- END KEY -->
<!-- BEGIN DATA -->
布置容器，让它使用显示其内容所需的最小空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setVisible(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置弹出菜单的可见性。
 
@param b 为 true 表示使弹出菜单可见，为 false 表示隐藏它
@beaninfo bound: true description: Makes the popup visible

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JPopupMenu.isVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果弹出菜单可见（当前显示的），则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setLocation(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 X、Y 坐标设置弹出菜单的左上角的位置。

@param x 屏幕坐标空间中弹出菜单的新位置的 X 坐标
@param y 屏幕坐标空间中弹出菜单的新位置的 Y 坐标
@beaninfo description: The location of the popup menu.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JPopupMenu.getInvoker()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回作为此弹出菜单的&ldquo;调用者&rdquo;的组件。

@return 弹出菜单在其中显示的 <code>Component</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setInvoker(Component invoker)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此弹出菜单的调用者，即弹出菜单在其中显示的组件。

@param invoker 弹出菜单在其中显示的 <code>Component</code>
@beaninfo description: The invoking component for the popup menu expert: true

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.show(Component invoker, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
在组件调用者的坐标空间中的位置 X、Y 显示弹出菜单。

@param invoker 弹出菜单在其空间中显示的组件
@param x 用于显示弹出菜单的调用者的坐标空间中的 X 坐标
@param y 用于显示弹出菜单的调用者的坐标空间中的 Y 坐标

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JPopupMenu.getComponentAtIndex(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定索引处的组件。
 
@param i  组件的索引，其中 0 为第一个
@return 该索引处的 <code>Component</code>
@deprecated 由 {@link java.awt.Container#getComponent(int)} 取代

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JPopupMenu.getComponentIndex(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定组件的索引。
 
@param  c 要查找的 <code>Component</code>
@return 组件的索引，其中 0 为第一个；如果未找到该组件，则返回 -1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setPopupSize(Dimension d)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 <code>Dimension</code> 对象设置弹出窗口的大小。此操作等效于 <code>setPreferredSize(d)</code>。

@param d   指定此组件新的大小的 <code>Dimension</code>。
@beaninfo description: The size of the popup menu

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setPopupSize(int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
将弹出窗口的大小设置为指定的宽度和高度。此操作等效于 <code>setPreferredSize(new Dimension(width, height))</code>。

@param width 弹出窗口的新宽度（以像素为单位）
@param height 弹出窗口的新高度（以像素为单位）
@beaninfo description: The size of the popup menu

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setSelected(Component sel)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置当前选择的组件，此方法将更改选择模型。

@param sel 要选择的 <code>Component</code>
@beaninfo description: The selected component on the popup menu expert: true hidden: true

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JPopupMenu.isBorderPainted()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查是否应该绘制边框。

@return 如果绘制边框，则返回 true；否则返回 false
@see #setBorderPainted

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setBorderPainted(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置是否应该绘制边框。

@param b 如果为 true，则绘制边框。
@see #isBorderPainted
@beaninfo description: Is the border of the popup menu painted

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JPopupMenu.paintBorder(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>borderPainted</code> 属性为 <code>true</code>，则绘制弹出菜单的边框。
@param g  <code>Graphics</code> 对象
 

@see JComponent#paint
@see JComponent#setBorder

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.JPopupMenu.getMargin()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回弹出菜单的边框与其包含内容之间的空白（以像素表示）。

@return 包含空白值的 <code>Insets</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JPopupMenu.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JPopupMenu</code> 的字符串表示形式。此方法仅在进行调试的时候使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。
 
@return  此 <code>JPopupMenu</code> 的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JPopupMenu.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 JPopupMenu 关联的 AccessibleContext。对于 JPopupMenus，AccessibleContext 采用 AccessibleJPopupMenu 的形式。必要时创建一个新的 AccessibleJPopupMenu 实例。

@return 一个 AccessibleJPopupMenu，它充当此 JPopupMenu 的 AccessibleContext

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.processMouseEvent(MouseEvent event, javax.swing.MenuElement[] path, MenuSelectionManager manager)
<!-- END KEY -->
<!-- BEGIN DATA -->
要求此方法遵守 <code>MenuElement</code> 接口，但它没有被实现。
@see MenuElement#processMouseEvent(MouseEvent, MenuElement[], MenuSelectionManager)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.processKeyEvent(KeyEvent e, javax.swing.MenuElement[] path, MenuSelectionManager manager)
<!-- END KEY -->
<!-- BEGIN DATA -->
如有必要，通过使用 <code>MenuSelectionManager</code> 的 API 处理从 <code>MenuSelectionManager</code> 转发的键事件并更改菜单选择。
 <p>
注：不必将事件转发到子组件。此操作可以通过 <code>MenuSelectionManager</code> 自动完成。

@param e   <code>KeyEvent</code>
@param path  <code>MenuElement</code> 路径数组
@param manager   <code>MenuSelectionManager</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.menuSelectionChanged(boolean isIncluded)
<!-- END KEY -->
<!-- BEGIN DATA -->
当菜单栏选择发生更改以激活或取消激活此菜单时传递消息。此操作实现 <code>javax.swing.MenuElement</code> 接口。重写 <code>MenuElement.menuSelectionChanged</code>。

@param isIncluded  如果此菜单处于激活状态，则为 true；如果不是，则为 false
@see MenuElement#menuSelectionChanged(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.MenuElement[] javax.swing.JPopupMenu.getSubElements()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>MenuElement</code> 组成的数组，包含此菜单组件的子菜单。它将只返回遵守 <code>JMenuElement</code> 接口的项。如果弹出菜单为 <code>null</code>，则返回空数组。要求此方法遵守 <code>MenuElement</code> 接口。  

@return <code>MenuElement</code> 对象的数组
@see MenuElement#getSubElements

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JPopupMenu.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JPopupMenu</code> 组件。
@return 此 <code>JPopupMenu</code> 对象
@see MenuElement#getComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JPopupMenu.isPopupTrigger(MouseEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>JPopupMenu</code> 的当前安装 UI 将 <code>MouseEvent</code> 视为弹出菜单触发器，则返回 true。

@return 如果鼠标事件为弹出菜单触发器，则返回 true
@since 1.3

<!-- END DATA -->
