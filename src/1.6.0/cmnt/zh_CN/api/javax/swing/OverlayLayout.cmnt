<!-- BEGIN KEY -->
public class javax.swing.OverlayLayout extends java.lang.Object implements java.awt.LayoutManager2, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
要在彼此顶部安排组件的布局管理器。请求的容器大小将是请求的子容器的最大大小，同时要考虑对齐方式的需求。  

对齐方式以满足分配区域中子容器的需求为基础。放置子容器，使他们的对齐点都在彼此的顶部。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.27 12/19/03
@author   Timothy Prinzing

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.OverlayLayout(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造执行子容器的覆盖安排的布局管理器。创建的布局管理器专门用于给定的容器。

@param target  用于执行布局的容器

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.awt.Container javax.swing.OverlayLayout.getTarget()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回使用此布局管理器的容器。

 @return 使用此布局管理器的容器

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.OverlayLayout.invalidateLayout(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
指示子容器已更改其布局相关信息，这会导致刷新所有缓存计算。

@param target 容器

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.OverlayLayout.addLayoutComponent(String name, Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的组件添加到布局中。由此类使用，以了解何时使布局无效。

@param name 组件的名称
@param comp 要添加的组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.OverlayLayout.removeLayoutComponent(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
从布局移除指定组件。由此类使用，以了解何时使布局无效。

@param   comp   要移除的组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.OverlayLayout.addLayoutComponent(Component comp, Object constraints)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的约束对象将指定组件添加到布局中。由此类使用，以了解何时使布局无效。

@param comp 要添加的组件
@param constraints  如何将组件添加到布局以及添加到何处。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.OverlayLayout.preferredLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给出指定目标容器中的组件的前提下，返回此布局的首选维数。重新计算布局（如果已经无效）。getInsets() 返回的当前 inset 设置中的因子。

@param target 需要布置的组件
@return 包含首选维数的 Dimension 对象
@see #minimumLayoutSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.OverlayLayout.minimumLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回需要布置组件的最小维数，该组件包含在指定的目标容器中。重新计算布局（如果已经无效）和当前 inset 设置中的因子。

@param target 需要布置的组件
@return 包含最小维数的 Dimension 对象
@see #preferredLayoutSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.OverlayLayout.maximumLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回需要布置组件的最大维数，该组件包含在指定的目标容器中。重新计算布局（如果已经无效）和 <code>getInset</code> 返回的 inset 设置中的因子。

@param target 需要布置的组件
@return 包含最大维数的 <code>Dimension</code> 对象
@see #preferredLayoutSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.OverlayLayout.getLayoutAlignmentX(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回容器沿 X 轴的对齐方式。

@param target 容器
@return  &gt;= 0.0f &amp;&amp; &lt;= 1.0f 的对齐方式

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.OverlayLayout.getLayoutAlignmentY(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回容器沿 Y 轴的对齐方式。

@param target 容器
@return  &gt;= 0.0f &amp;&amp; &lt;= 1.0f 的对齐方式

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.OverlayLayout.layoutContainer(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
当需要布置指定的容器时，由 AWT 调用。

@param target  要布置的容器

@exception AWTError  如果目标不是指定给构造方法的容器

<!-- END DATA -->
