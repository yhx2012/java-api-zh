<!-- BEGIN KEY -->
public class javax.swing.ViewportLayout extends java.lang.Object implements java.awt.LayoutManager, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>JViewport</code> 的默认布局管理器。<code>ViewportLayout</code> 定义应该对大多数应用程序都有用的布局策略。视口使其视图与视口的大小相同，但它不会使视图小于其最小大小。随着视口增大，视图先是在可以看到整个视图之前保持底部对齐，之后是顶部对齐。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.38 12/19/03
@author Hans Muller

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ViewportLayout.addLayoutComponent(String name, Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的组件添加到布局中。不能被此类使用。
@param name 组件的名称
@param c 要添加的组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ViewportLayout.removeLayoutComponent(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
从布局中移除指定组件。不能被此类使用。
@param c 要移除的组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.ViewportLayout.preferredLayoutSize(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给出指定目标容器中的组件的前提下，返回此布局的首选维数。
@param parent 需要布置的组件
@return 包含首选维数的 <code>Dimension</code> 对象
@see #minimumLayoutSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.ViewportLayout.minimumLayoutSize(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回需要布置指定目标容器中包含的组件的最小维数。

@param parent 需要布置的组件
@return 包含最小维数的 <code>Dimension</code> 对象
@see #preferredLayoutSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ViewportLayout.layoutContainer(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
在需要布置指定容器时由 AWT 调用。

@param parent  要布置的容器

@exception AWTError  如果目标不是指定给 <code>BoxLayout</code> 构造方法的容器

<!-- END DATA -->
