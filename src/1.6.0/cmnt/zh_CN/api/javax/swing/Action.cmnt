<!-- BEGIN KEY -->
public interface javax.swing.Action extends java.awt.event.ActionListener
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Action</code> 接口提供 <code>ActionListener</code> 接口的一个有用扩展，以便若干控件访问相同的功能。
 <p>
除了 <code>ActionListener</code> 接口定义的 <code>actionPerformed</code> 方法之外，此接口还允许应用程序在一个位置定义：
 <ul>
<li>描述函数的一个或多个文本字符串。这些字符串可用于显示按钮的立体文本、在菜单项中设置文本等等。
<li>描述函数的一个或多个图标。这些图标可用于菜单控件中的图像，或者用于更复杂用户界面中的合成项。
<li>功能的启用/禁用状态。应用程序可以禁用实现此接口的函数，而不必分别禁用菜单项和工具栏按钮。所有为侦听状态更改而注册为侦听器的组件都将禁止为该项生成事件，并相应地修改显示。
 </ul>
 <p>
可以将此接口添加到现有类中，或者用它创建一个适配器（通常通过子类化 <code>AbstractAction</code> 来实现）。然后可以将 <code>Action</code> 对象添加到多个可感知 <code>Action</code> 的容器中，并连接到可容纳 <code>Action</code> 的组件。然后可以通过调用 <code>Action</code> 对象的 <code>setEnabled</code> 方法立刻激活或取消激活 GUI 控件。
 <p>
注意，<code>Action</code> 实现在存储方面的开销比典型的 <code>ActionListener</code> 要高，但后者不具有集中控制功能和广播属性更改的优点。因此，应该注意只在需要这些优点的地方使用 <code>Action</code>，在别处使用 <code>ActionListener</code> 即可。
 <p>
 
 <h4><a name="buttonActions"></a>支持 <code>Action</code> 的 Swing 组件</h4>
 <p>
许多 Swing 的组件都具有 <code>Action</code> 属性。在组件上设置 <code>Action</code> 时，会发生以下几种情况：  <ul>
 <li><code>Action</code> 被作为 <code>ActionListener</code> 添加到组件。
 <li>组件配置自身的某些属性以匹配 <code>Action</code>。
 <li>组件在 <code>Action</code> 上安装 <code>PropertyChangeListener</code>，这样组件可更改其属性以反映 <code>Action</code> 属性中的更改。 
 </ul>
 <p>
下表描述了支持 <code>Action</code> 的 <code>Swing</code> 组件所使用的属性。在该表中，<em>按钮</em> 指的是任何 <code>AbstractButton</code> 子类，它不仅包括 <code>JButton</code>，而且包括一些类（如 <code>JMenuItem</code>）。除非另行声明，否则 <code>Action</code> 中的 <code>null</code> 属性值（或者为 <code>null</code> 的 <code>Action</code>）将导致按钮的对应属性被设置为 <code>null</code>。
 <p>
 <table border="1" cellpadding="1" cellspacing="0" 
         summary="Supported Action properties"
         valign="top" >
  <tr valign="top"  align="left">
    <th bgcolor="#CCCCFF" align="left">组件属性
    <th bgcolor="#CCCCFF" align="left">组件
    <th bgcolor="#CCCCFF" align="left">动作键
    <th bgcolor="#CCCCFF" align="left">注意事项
  <tr valign="top"  align="left">
      <td><b><code>enabled</code></b>
      <td>所有
      <td><code>isEnabled</code> 方法
      <td>&nbsp;
  <tr valign="top"  align="left">
      <td><b><code>toolTipText</code></b>
      <td>所有
      <td><code>SHORT_DESCRIPTION</code>
      <td>&nbsp;
  <tr valign="top"  align="left">
      <td><b><code>actionCommand</code></b>
      <td>所有
      <td><code>ACTION_COMMAND_KEY</code>
      <td>&nbsp;
  <tr valign="top"  align="left">
      <td><b><code>mnemonic</code></b>
      <td>所有按钮
      <td><code>MNEMONIC_KEY</code>
      <td><code>null</code> 值或 <code>Action</code> 将导致按钮的 <code>mnemonic</code> 属性被设置为 <code>'\0'</code>。
  <tr valign="top"  align="left">
      <td><b><code>text</code></b>
      <td>所有按钮
      <td><code>NAME</code>
      <td>如果不想按钮的文本反映 <code>Action</code> 的文本，可以将 <code>hideActionText</code> 属性设置为 <code>true</code>。如果 <code>hideActionText</code> 为 <code>true</code>，那么设置 <code>Action</code> 会将按钮的文本更改为 <code>null</code>，忽略对 <code>NAME</code> 的任何更改。<code>hideActionText</code> 对于通常仅显示 <code>Icon</code> 的工具栏按钮很有用。如果对于 <code>LARGE_ICON_KEY</code> 或 <code>SMALL_ICON</code>，<code>Action</code> 具有非 <code>null</code> 值，那么 <code>JToolBar.add(Action)</code> 会将属性设置为 <code>true</code>。 
  <tr valign="top"  align="left">
      <td><b><code>displayedMnemonicIndex</code></b>
      <td>所有按钮
      <td><code>DISPLAYED_MNEMONIC_INDEX_KEY</code>
      <td>如果 <code>DISPLAYED_MNEMONIC_INDEX_KEY</code> 的值超出文本边界，则忽略它。当调用 <code>setAction</code> 时，如果取自 <code>Action</code> 的值为 <code>null</code>，则不更新显示的助记符索引。在对 <code>DISPLAYED_MNEMONIC_INDEX_KEY</code> 的任意后续更改中，<code>null</code> 被视为 -1。
  <tr valign="top"  align="left">
      <td><b><code>icon</code></b>
      <td>除 <code>JCheckBox</code>、<code>JToggleButton</code> 和 <code>JRadioButton</code> 之外的所有按钮。
      <td><code>LARGE_ICON_KEY</code> 或 <code>SMALL_ICON</code>
     <td><code>JMenuItem</code> 子类只使用 <code>SMALL_ICON</code>。所有其他按钮将使用 <code>LARGE_ICON_KEY</code>；如果该值为 <code>null</code>，则它们使用 <code>SMALL_ICON</code>。
  <tr valign="top"  align="left">
      <td><b><code>accelerator</code></b>
      <td>除 <code>JMenu</code> 之外的所有 <code>JMenuItem</code> 子类。
      <td><code>ACCELERATOR_KEY</code>
      <td>&nbsp;
  <tr valign="top"  align="left">
      <td><b><code>selected</code></b>
      <td><code>JToggleButton</code>、<code>JCheckBox</code>、<code>JRadioButton</code>、<code>JCheckBoxMenuItem</code> 和 <code>JRadioButtonMenuItem</code>
      <td><code>SELECTED_KEY</code>
      <td>如果遵守此属性的组件为{@code 非 null}，那么它只使用该值。例如，如果设置了一个 {@code Action}，它在 {@code JToggleButton} 上的 {@code SELECTED_KEY} 为 {@code null} 值，那么该 {@code JToggleButton} 将不会以任何方式更新其选定状态。类似地，如果对于 {@code SELECTED_KEY}，{@code Action} 具有{@code 非 null} 值，那么每次 {@code JToggleButton} 的选定状态发生更改时，它都会将值设置回 {@code Action}。
          <br>
          遵守此属性的组件保持其选定状态与此属性同步。当将同一个 {@code Action} 用于多个组件时，所有组件都保持其选定状态与此属性同步。互斥的按钮（如 {@code ButtonGroup} 中的 {@code JToggleButton}）将强制选择其中的一个按钮。因此，在用于多个互斥按钮时，不要使用相同的 {@code Action} 定义 {@code SELECTED_KEY} 属性的值。
 </table>
 <p>
 <code>JPopupMenu</code>、<code>JToolBar</code> 和 <code>JMenu</code> 都提供便捷方法来创建组件和在相应的组件上设置 <code>Action</code>。有关更多信息，请参阅这些类。
 <p>
 <code>Action</code> 使用 <code>PropertyChangeListener</code> 来通知侦听器 <code>Action</code> 发生了更改。bean 规范指示 <code>null</code> 属性名称可用于指示多个值发生了更改。默认情况下，带有 <code>Action</code> 的 Swing 组件不处理这样的更改。要指示 Swing 应该根据 bean 规范处理 <code>null</code> 情况，请将系统属性 <code>swing.actions.reconfigureOnNull</code> 设置为 <code>String</code> 值 <code>true</code>。

 @version 1.36 04/18/06
 @author Georges Saab
 @see AbstractAction

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.Action.DEFAULT
<!-- END KEY -->
<!-- BEGIN DATA -->
当前未使用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.Action.NAME
<!-- END KEY -->
<!-- BEGIN DATA -->

用来存储动作的 <code>String</code> 名称的键，用于菜单或按钮。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.Action.SHORT_DESCRIPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
用来存储动作的简短 <code>String</code> 描述的键，用于工具提示文本。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.Action.LONG_DESCRIPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
用来存储动作的较长 <code>String</code> 描述的键，用于上下文相关的帮助文件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.Action.SMALL_ICON
<!-- END KEY -->
<!-- BEGIN DATA -->
 用来存储小型 <code>Icon</code>（比如 <code>ImageIcon</code>）的键。该键通常用于菜单，比如 <code>JMenuItem</code>。 
 <p>
 如果将同一个 <code>Action</code> 用于菜单和按钮，通常应同时指定 <code>SMALL_ICON</code> 和 <code>LARGE_ICON_KEY</code>。菜单将使用 <code>SMALL_ICON</code>，按钮将使用 <code>LARGE_ICON_KEY</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.Action.ACTION_COMMAND_KEY
<!-- END KEY -->
<!-- BEGIN DATA -->
用来确定 <code>ActionEvent</code> 的命令 <code>String</code> 的键，<code>ActionEvent</code> 是在 <code>Action</code> 因驻留在与 <code>JComponent</code> 关联的 <code>Keymap</code> 中而被通知时所创建的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.Action.ACCELERATOR_KEY
<!-- END KEY -->
<!-- BEGIN DATA -->
用来存储将用作动作加速器的 <code>KeyStroke</code> 的键。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.Action.MNEMONIC_KEY
<!-- END KEY -->
<!-- BEGIN DATA -->
 用来存储对应于一个 <code>KeyEvent</code> 键代码的 <code>Integer</code> 值的键。该值通常用于指定助记符。例如：<code>myAction.putValue(Action.MNEMONIC_KEY, KeyEvent.VK_A)</code> 将 <code>myAction</code> 的助记符设置为 'a'。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.Action.SELECTED_KEY
<!-- END KEY -->
<!-- BEGIN DATA -->
 用来存储对应于选定状态的 <code>Boolean</code> 值的键。该键通常只用于具有有意义的选择状态的组件。例如：<code>JRadioButton</code> 和 <code>JCheckBox</code> 使用此键，但是 <code>JMenu</code> 的实例不使用。
 <p>
 该属性不同于其他属性，因为它由组件读取也由组件设置。例如，如果 <code>Action</code> 连接到 <code>JCheckBox</code>，那么 <code>JCheckBox</code> 的选定状态将根据 <code>Action</code> 的选定状态设置。如果用户在 <code>JCheckBox</code> 上单击，<code>JCheckBox</code> 的选定状态<b>和</b> <code>Action</code> <b>都</b>将被更新。
 <p>
注：此字段的值以 'Swing' 为前缀，以避免与现有 <code>Action</code> 的可能冲突。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.Action.DISPLAYED_MNEMONIC_INDEX_KEY
<!-- END KEY -->
<!-- BEGIN DATA -->
 用来存储对应于文本（由 <code>NAME</code> 属性标识）索引的 <code>Integer</code> 值的键，助记符的装饰应在该文本中呈现。如果此属性的值大于等于该文本的长度，则它将被视为 -1。
 <p>
 注：此字段的值以 'Swing' 为前缀，以避免与现有 <code>Action</code> 的可能冲突。

 @see AbstractButton#setDisplayedMnemonicIndex
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.Action.LARGE_ICON_KEY
<!-- END KEY -->
<!-- BEGIN DATA -->
 用来存储 <code>Icon</code> 的键。该键通常由按钮（如 <code>JButton</code> 和 <code>JToggleButton</code>）使用。 
 <p>
 如果将同一个 <code>Action</code> 用于菜单和按钮，通常应同时指定 <code>SMALL_ICON</code> 和 <code>LARGE_ICON_KEY</code>。菜单将使用 <code>SMALL_ICON</code>，按钮将使用 <code>LARGE_ICON_KEY</code>。
 <p>
 注：此字段的值以 'Swing' 为前缀，以避免与现有 <code>Action</code> 的可能冲突。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.Action.getValue(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用关联的键获取此对象的一个属性。
@see #putValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.Action.putValue(String key, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用关联的键设置此对象的一个属性。如果值发生了更改，则将一个 <code>PropertyChangeEvent</code> 发送到侦听器。

@param key    一个包含键的 <code>String</code>
@param value  一个 <code>Object</code> 值

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.Action.setEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>Action</code> 的启用状态。在启用时，任何与此对象关联的组件都被激活，并且都能触发此对象的 <code>actionPerformed</code> 方法。如果值发生了更改，则将一个 <code>PropertyChangeEvent</code> 发送到侦听器。

@param b 为 true 表示启用此 <code>Action</code>；为 false 表示禁用它

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.Action.isEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>Action</code> 的启用状态。在启用时，任何与此对象关联的组件都被激活，并且都能触发此对象的 <code>actionPerformed</code> 方法。

@return 如果启用了此 <code>Action</code>，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.Action.addPropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加一个 <code>PropertyChange</code> 侦听器。容器和附属组件使用这些方法注册，以侦听此 <code>Action</code> 对象。当启用状态或其他属性发生更改时，已注册的侦听器会收到更改通知。

@param listener  一个 <code>PropertyChangeListener</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.Action.removePropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除一个 <code>PropertyChange</code> 侦听器。

@param listener  一个 <code>PropertyChangeListener</code> 对象
@see #addPropertyChangeListener

<!-- END DATA -->
