<!-- BEGIN KEY -->
public class javax.swing.RepaintManager extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
此类管理重绘请求，以最大限度地降低重绘次数。例如，通过将多个请求折叠到对组件树成员的单个重绘中。
 <p>
从 1.6 开始，<code>RepaintManager</code> 处理对 Swing 的顶层组件（<code>JApplet</code>、<code>JWindow</code>、<code>JFrame</code> 和 <code>JDialog</code>）的重绘请求。在这些组件之一上对 <code>repaint</code> 的任何调用将生成适当的 <code>addDirtyRegion</code> 方法。

@version 1.60 02/18/04
@author Arnaud Weber

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.RepaintManager()
<!-- END KEY -->
<!-- BEGIN DATA -->

创建新的 RepaintManager 实例。很少直接调用此构造方法。要获取默认 RepaintManager，请使用 RepaintManager.currentManager(JComponent)（通常为 &quot;this&quot;）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.RepaintManager javax.swing.RepaintManager.currentManager(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->

在给定 Component 的情况下，返回调用线程的 RepaintManager。
 
@param c 在默认实现中未使用的 Component，但是重写版本可以使用它，以根据 Component 返回不同的 RepaintManager
@return RepaintManager 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.RepaintManager javax.swing.RepaintManager.currentManager(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定 JComponent 的情况下，返回调用线程的 RepaintManager。
 <p>
注：此方法用于与 Swing 库早期版本的向后二进制兼容性。它只返回 {@link #currentManager(Component)} 返回的结果。 

@param c 未使用的 JComponent
@return  RepaintManager 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.RepaintManager.setCurrentManager(RepaintManager aRepaintManager)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于调用线程的 RepaintManager。<b>aRepaintManager</b> 将成为调用线程的线程组的当前 RepaintManager。
@param aRepaintManager  要使用的 RepaintManager 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.RepaintManager.addInvalidComponent(JComponent invalidComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->
按照布局需要标记组件，并将事件指派线程的 runnable 排入队列，该线程将验证组件的第一个 isValidateRoot() 祖先。 

@see JComponent#isValidateRoot
@see #removeInvalidComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.RepaintManager.removeInvalidComponent(JComponent component)
<!-- END KEY -->
<!-- BEGIN DATA -->

从无效组件的列表移除组件。
 
@see #addInvalidComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.RepaintManager.addDirtyRegion(JComponent c, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->

在应刷新的组件列表中添加组件。如果 <i>c</i> 已有脏区 (dirty region)，则矩形 <i>(x,y,w,h)</i> 将与应重绘的区域合并。 
 
 @param c 要重绘的组件，null 不执行任何操作。
 @param x 要重绘区域的 X 坐标
 @param y 要重绘区域的 Y 坐标
 @param w 要重绘区域的宽度
 @param h 要重绘区域的高度
 @see JComponent#repaint

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.RepaintManager.addDirtyRegion(Window window, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->

 将 <code>window</code> 添加到需要重绘的 <code>Component</code> 列表。 
 
 @param window 要重绘的窗口，null 不执行任何操作。
 @param x 要重绘区域的 X 坐标
 @param y 要重绘区域的 Y 坐标
 @param w 要重绘区域的宽度
 @param h 要重绘区域的高度
 @see JFrame#repaint
 @see JWindow#repaint
 @see JDialog#repaint
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.RepaintManager.addDirtyRegion(Applet applet, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->

 将 <code>applet</code> 添加到需要重绘的 <code>Component</code> 列表。 
 
 @param applet 要重绘的 Applet，null 不执行任何操作。 
 @param x 要重绘区域的 X 坐标
 @param y 要重绘区域的 Y 坐标
 @param w 要重绘区域的宽度
 @param h 要重绘区域的高度
 @see JApplet#repaint
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.RepaintManager.getDirtyRegion(JComponent aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回组件的当前脏区。如果组件不脏，则返回空矩形。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.RepaintManager.markCompletelyDirty(JComponent aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->

标记完全弄脏的组件。在下一个 paintDirtyRegions() 调用中，将全部绘制 <b>aComponent</b>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.RepaintManager.markCompletelyClean(JComponent aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->

标记完全干净的组件。在下一个 paintDirtyRegions() 调用中，将不绘制 <b>aComponent</b>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.RepaintManager.isCompletelyDirty(JComponent aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->

在下一个 paintDirtyRegions() 中全部绘制 <b>aComponent</b> 时返回 true 的便捷方法。如果计算脏区对组件开销很大，请使用此方法，避免在其返回 true 时计算脏区。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.RepaintManager.validateInvalidComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->

验证被标记为无效的所有组件。
@see #addInvalidComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.RepaintManager.paintDirtyRegions()
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制被标记为脏的所有组件。
 
@see #addDirtyRegion

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String javax.swing.RepaintManager.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个显示并标记此对象属性的字符串。

@return 此对象的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Image javax.swing.RepaintManager.getOffscreenBuffer(Component c, int proposedWidth, int proposedHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回屏幕外缓冲区，它应用作带有组件 <code>c</code> 的双缓冲区。默认情况下，每个 RepaintManager 都有一个双缓冲。该缓冲可能比 <code>(proposedWidth,proposedHeight)</code> 小，当最大双缓冲区的大小已设置为用于接收重绘管理器时，会发生这种情况。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Image javax.swing.RepaintManager.getVolatileOffscreenBuffer(Component c, int proposedWidth, int proposedHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回可变屏幕外缓冲区，它应用作带有指定组件 <code>c</code> 的双缓冲区。返回的图像将是 VolatileImage 的实例，如果 VolatileImage 对象无法实例化，则为 null。此缓冲区可能小于 <code>(proposedWidth,proposedHeight)</code>。当最大双缓冲区的大小已设置为用于接收重绘管理器时，会发生这种情况。

@see java.awt.image.VolatileImage
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.RepaintManager.setDoubleBufferMaximumSize(Dimension d)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置最大双缓冲区大小。
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.RepaintManager.getDoubleBufferMaximumSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最大双缓冲区大小。

@return 表示最大大小的 Dimension 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.RepaintManager.setDoubleBufferingEnabled(boolean aFlag)
<!-- END KEY -->
<!-- BEGIN DATA -->
在此 RepaintManager 中，启用或禁用双缓冲。小心：设置此属性的默认值可获得给定平台上的最佳绘制性能，不建议程序直接修改此属性。

@param aFlag  如果激活双缓冲，则为 true
@see #isDoubleBufferingEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.RepaintManager.isDoubleBufferingEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 RepaintManager 被双缓冲，则返回 true。此属性的默认值可以随平台的改变而改变。在 AWT 中支持本机双缓冲的平台上，默认值为 <code>false</code>，以避免 Swing 中不必要的缓冲。在不支持本机双缓冲的平台上，默认值为 <code>true</code>。

@return 如果此对象被双缓冲，则返回 true

<!-- END DATA -->
