<!-- BEGIN KEY -->
public class javax.swing.JWindow extends java.awt.Window implements javax.accessibility.Accessible, javax.swing.RootPaneContainer, javax.swing.TransferHandler.HasGetTransferHandler
<!-- END KEY -->
<!-- BEGIN DATA -->

<code>JWindow</code> 是一个容器，可以显示在用户桌面上的任何位置。它没有标题栏、窗口管理按钮或者其他与 <code>JFrame</code> 关联的修饰，但它仍然是用户桌面的&ldquo;一类居民&rdquo;，可以存在于桌面上的任何位置。
 <p>
<code>JWindow</code> 组件包含一个 <code>JRootPane</code> 作为其仅有的子组件。<code>contentPane</code> 应为 <code>JWindow</code> 的所有子窗口的父窗口。作为一个便捷的 <code>add</code> 及其变体，<code>remove</code> 和 <code>setLayout</code> 已被重写并根据需要转发到 <code>contentPane</code>。这意味着您可以写入：
 <pre>
       window.add(child);
 </pre>
该子窗口也被添加到 contentPane。<code>contentPane</code> 将始终为非 <code>null</code>。尝试将其设置为 <code>null</code> 将导致 <code>JWindow</code> 抛出异常。默认的 <code>contentPane</code> 将在其上设置 <code>BorderLayout</code> 管理器。有关添加、删除和设置 <code>JWindow</code> 的 <code>LayoutManager</code> 的详细信息，请参阅 {@link javax.swing.RootPaneContainer}。
 <p>
有关 <code>contentPane</code>、<code>glassPane</code> 和 <code>layeredPane</code> 组件的完整描述，请参阅 {@link JRootPane} 文档。
 <p>
在多屏幕环境中，可以在不同的屏幕设备上创建 <code>JWindow</code>。请参阅 {@link java.awt.Window} 以获取更多信息。
 <p>
<strong>警告：</strong>Swing 不是线程安全的。有关更多信息，请参阅 <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@see JRootPane

@beaninfo attribute: isContainer true attribute: containerDelegate getContentPane description: A toplevel window which has no system border or controls.

@version 1.60 12/19/03
@author David Kloba

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JRootPane javax.swing.JWindow.rootPane
<!-- END KEY -->
<!-- BEGIN DATA -->
管理此框架的 <code>contentPane</code> 和可选 <code>menuBar</code> 以及 <code>glassPane</code> 的 <code>JRootPane</code> 实例。

@see #getRootPane
@see #setRootPane

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JWindow.rootPaneCheckingEnabled
<!-- END KEY -->
<!-- BEGIN DATA -->
如果为 true，则对 <code>add</code> 和 <code>setLayout</code> 的调用将转发到 <code>contentPane</code>。其最初设置为 false，但在构造 <code>JWindow</code> 时将被设置为 true。

@see #isRootPaneCheckingEnabled
@see #setRootPaneCheckingEnabled
@see javax.swing.RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.accessibility.AccessibleContext javax.swing.JWindow.accessibleContext
<!-- END KEY -->
<!-- BEGIN DATA -->
可访问的上下文属性。
<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.TransferHandler javax.swing.JWindow.transferHandler
<!-- END KEY -->
<!-- BEGIN DATA -->
 此窗口的 <code>TransferHandler</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JWindow()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建未指定所有者的窗口。此窗口不可获得焦点。
 <p>
此构造方法将组件的区域属性设置为 <code>JComponent.getDefaultLocale</code> 返回的值。 

@throws HeadlessException 如果 <code>GraphicsEnvironment.isHeadless()</code> 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless
@see #isFocusableWindow
@see JComponent#getDefaultLocale

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JWindow(GraphicsConfiguration gc)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用屏幕设备的指定 <code>GraphicsConfiguration</code> 创建窗口。此窗口不可获得焦点。
 <p>
此构造方法将组件的区域属性设置为 <code>JComponent.getDefaultLocale</code> 返回的值。     
 
@param gc 用以构造新窗口的 <code>GraphicsConfiguration</code>；如果 gc 为 <code>null</code>，则假定系统默认的 <code>GraphicsConfiguration</code>
@throws HeadlessException 如果 <code>GraphicsEnvironment.isHeadless()</code> 返回 true。
@throws IllegalArgumentException 如果 <code>gc</code> 不是来自屏幕设备。

@see java.awt.GraphicsEnvironment#isHeadless
@see #isFocusableWindow
@see JComponent#getDefaultLocale

@since  1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JWindow(Frame owner)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的所有者框架创建窗口。如果 <code>owner</code> 为 <code>null</code>，则使用共享所有者，而且此窗口不可获得焦点。而且，只有其所有者正显示在屏幕上时此窗口才可获得焦点。
 <p>
此构造方法将组件的 locale 属性设置为 <code>JComponent.getDefaultLocale</code> 返回的值。     

@param owner 从中显示该窗口的框架
@throws HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless
@see #isFocusableWindow
@see JComponent#getDefaultLocale

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JWindow(Window owner)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的所有者窗口创建窗口。只有在其所有者正显示在屏幕上时此窗口才可获得焦点。如果 <code>owner</code> 为 <code>null</code>，则使用共享所有者，而且此窗口不可获得焦点。
 <p>
此构造方法将组件的 locale 属性设置为 <code>JComponent.getDefaultLocale</code> 返回的值。     

@param owner 从中显示该窗口的窗口
@throws HeadlessException 如果 <code>GraphicsEnvironment.isHeadless()</code> 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless
@see #isFocusableWindow
@see JComponent#getDefaultLocale

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JWindow(Window owner, GraphicsConfiguration gc)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用屏幕设备的指定所有者窗口和 <code>GraphicsConfiguration</code> 创建窗口。如果 <code>owner</code> 为 <code>null</code>，则使用共享所有者，而且此窗口不可获得焦点。
 <p>
此构造方法将组件的 locale 属性设置为 <code>JComponent.getDefaultLocale</code> 返回的值。     
 
@param owner 从中显示该窗口的窗口
@param gc 用以构造新窗口的 <code>GraphicsConfiguration</code>；如果 gc 为 <code>null</code>，则假定系统默认的 <code>GraphicsConfiguration</code>，除非 <code>owner</code> 也为 null，在此情况下将使用来自共享所有者框架的 <code>GraphicsConfiguration</code>。
@throws HeadlessException 如果 <code>GraphicsEnvironment.isHeadless()</code> 返回 true。
@throws IllegalArgumentException 如果 <code>gc</code> 不是来自屏幕设备。

@see java.awt.GraphicsEnvironment#isHeadless
@see #isFocusableWindow
@see JComponent#getDefaultLocale

@since  1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JWindow.windowInit()
<!-- END KEY -->
<!-- BEGIN DATA -->
由该构造方法调用以正确初始化 <code>JWindow</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JRootPane javax.swing.JWindow.createRootPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
由该构造方法调用以创建默认的 <code>rootPane</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JWindow.isRootPaneCheckingEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对 <code>add</code> 和 <code>setLayout</code> 的调用是否转发到 <code>contentPane</code>。

@return 如果 <code>add</code> 和 <code>setLayout</code> 被转发，则返回 true；否则返回 false

@see #addImpl
@see #setLayout
@see #setRootPaneCheckingEnabled
@see javax.swing.RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JWindow.setTransferHandler(TransferHandler newHandler)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 {@code transferHandler} 属性，该属性是支持将数据传输到此组件的机制。如果该组件不支持数据传输操作，则使用 {@code null}。
 <p>
如果系统属性 {@code suppressSwingDropSupport} 为 {@code false}（默认值），并且此组件上的当前放置目标为 {@code null} 或者不是用户设置的放置目标，那么此方法将按以下方式更改放置目标：如果 {@code newHandler} 为 {@code null}，则它将清除放置目标。如果不为 {@code null}，则它将安装一个新 {@code DropTarget}。
 <p>
注：当用于 {@code JWindow} 时，{@code TransferHandler} 只提供数据导入功能，与数据导出有关的方法当前用于 {@code JComponent}。
 <p>
有关更多信息，请参阅 <em>The Java Tutorial</em> 中的 <a href="http://java.sun.com/docs/books/tutorial/uiswing/misc/dnd.html">
 How to Use Drag and Drop and Data Transfer</a> 一节。 
 
 @param newHandler 新 {@code TransferHandler}

 @see TransferHandler
 @see #getTransferHandler
 @see java.awt.Component#setDropTarget
 @since 1.6

 @beaninfo
        bound: true
       hidden: true
  description: Mechanism for transfer of data into the component

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.TransferHandler javax.swing.JWindow.getTransferHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
 获取 <code>transferHandler</code> 属性。

 @return <code>transferHandler</code> 属性的值

 @see TransferHandler
 @see #setTransferHandler
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JWindow.update(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->

调用 <code>paint(g)</code>。此方法已被重写以防止因不必要的调用而清除背景。

@param g 要在其中进行绘制的 <code>Graphics</code> 上下文

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JWindow.setRootPaneCheckingEnabled(boolean enabled)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置对 <code>add</code> 和 <code>setLayout</code> 的调用是否转发到 <code>contentPane</code>。
 
@param enabled  如果 <code>add</code> 和 <code>setLayout</code> 被转发，则为 true；如果应直接在 <code>JWindow</code> 上操作，则为 false。

@see #addImpl
@see #setLayout
@see #isRootPaneCheckingEnabled
@see javax.swing.RootPaneContainer
@beaninfo hidden: true description: Whether the add and setLayout methods are forwarded

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JWindow.addImpl(Component comp, Object constraints, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定的子 <code>Component</code>。重写此方法以有条件地转发对 <code>contentPane</code> 的调用。默认情况下，子组件被添加到 <code>contentPane</code> 而非框架，请参阅 {@link javax.swing.RootPaneContainer} 以获取详细信息。
 
@param comp 要增强的组件
@param constraints 要考虑的限制
@param index 索引
@exception IllegalArgumentException 如果 <code>index</code> 无效
@exception IllegalArgumentException 如果将容器的父级添加到自身
@exception IllegalArgumentException 如果将一个窗口添加到窗口
 
@see #setRootPaneCheckingEnabled
@see javax.swing.RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JWindow.remove(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->

从该容器中移除指定组件。如果 <code>comp</code> 不是 <code>rootPane</code>，这将把该调用转发到 <code>contentPane</code>。如果 <code>comp</code> 不是 <code>JWindow</code> 或 <code>contentPane</code> 的子对象，将不会执行任何操作。

@param comp 要移除的组件
@throws NullPointerException 如果 <code>comp</code> 为 null
@see #add
@see javax.swing.RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JWindow.setLayout(LayoutManager manager)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>LayoutManager</code>。重写以有条件地将调用转发到 <code>contentPane</code>。有关更多信息，请参阅 {@link javax.swing.RootPaneContainer}。

@param manager <code>LayoutManager</code>
@see #setRootPaneCheckingEnabled
@see javax.swing.RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JRootPane javax.swing.JWindow.getRootPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此窗口的 <code>rootPane</code> 对象。
@return 此窗口的 <code>rootPane</code> 属性

@see #setRootPane
@see RootPaneContainer#getRootPane

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JWindow.setRootPane(JRootPane root)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此窗口的新 <code>rootPane</code> 对象。此方法由构造方法调用。

@param root 新的 <code>rootPane</code> 属性
@see #getRootPane

@beaninfo hidden: true description: the RootPane object for this window.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Container javax.swing.JWindow.getContentPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回作为此窗口的 <code>contentPane</code> 的 <code>Container</code>。

@return <code>contentPane</code> 属性
@see #setContentPane
@see RootPaneContainer#getContentPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JWindow.setContentPane(Container contentPane)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此窗口的 <code>contentPane</code> 属性。此方法由构造方法调用。

@param contentPane 新的 <code>contentPane</code>

@exception IllegalComponentStateException （运行时异常）如果内容窗格参数为 <code>null</code>
@see #getContentPane
@see RootPaneContainer#setContentPane

@beaninfo hidden: true description: The client area of the window where child components are normally inserted.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JLayeredPane javax.swing.JWindow.getLayeredPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此窗口的 <code>layeredPane</code> 对象。

@return <code>layeredPane</code> 属性
@see #setLayeredPane
@see RootPaneContainer#getLayeredPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JWindow.setLayeredPane(JLayeredPane layeredPane)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>layeredPane</code> 属性。此方法由构造方法调用。

@param layeredPane 新的 <code>layeredPane</code> 对象

@exception IllegalComponentStateException （运行时异常）如果内容窗格参数为 <code>null</code>
@see #getLayeredPane
@see RootPaneContainer#setLayeredPane

@beaninfo hidden: true description: The pane which holds the various window layers.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JWindow.getGlassPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此窗口的 <code>glassPane Component</code>。

@return <code>glassPane</code> 属性
@see #setGlassPane
@see RootPaneContainer#getGlassPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JWindow.setGlassPane(Component glassPane)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>glassPane</code> 属性。此方法由构造方法调用。
@param glassPane 此窗口的 <code>glassPane</code> 对象

@see #getGlassPane
@see RootPaneContainer#setGlassPane

@beaninfo hidden: true description: A transparent pane used for menu rendering.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Graphics javax.swing.JWindow.getGraphics()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JWindow.repaint(long time, int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 在 <code>time</code> 毫秒内重绘此组件的指定矩形区域。有关如何处理重绘的细节，请参阅 <code>RepaintManager</code>。
 
 @param     time   更新前等待的最长时间（以毫秒为单位）
 @param     x    <i>x</i> 坐标
 @param     y    <i>y</i> 坐标
 @param     width    宽度
 @param     height   高度
 @see       RepaintManager
 @since     1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JWindow.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JWindow</code> 的字符串表示形式。此方法仅在进行调试的时候使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。
 
@return  此 <code>JWindow</code> 的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JWindow.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 JWindow 关联的 AccessibleContext。对于 JWindows，AccessibleContext 采取 AccessibleJWindow 的形式。必要时创建新的 AccessibleJWindow 实例。

@return 一个 AccessibleJWindow，它充当此 JWindow 的 AccessibleContext

<!-- END DATA -->
