<!-- BEGIN KEY -->
public class javax.swing.JInternalFrame extends javax.swing.JComponent implements javax.accessibility.Accessible, javax.swing.WindowConstants, javax.swing.RootPaneContainer
<!-- END KEY -->
<!-- BEGIN DATA -->
提供很多本机窗体功能的轻量级对象，这些功能包括拖动、关闭、变成图标、调整大小、标题显示和支持菜单栏。有关使用内部窗体的面向任务的文档和示例，请参见 <em>The Java Tutorial</em> 中的 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/components/internalframe.html" target="_top">How to Use Internal Frames</a> 一节。

 <p>

通常，可将 <code>JInternalFrame</code> 添加到 <code>JDesktopPane</code> 中。UI 将特定于外观的操作委托给由 <code>JDesktopPane</code> 维护的 <code>DesktopManager</code> 对象。
 <p>
<code>JInternalFrame</code> 内容窗格是添加子组件的地方。为了方便地使用 <code>add</code> 方法及其变体，已经重写了 <code>remove</code> 和 <code>setLayout</code>，以在必要时将其转发到 <code>contentPane</code>。这意味着可以编写：
 <pre>
       internalFrame.add(child);
 </pre>
子级将被添加到 contentPane。内容窗格实际上由 <code>JRootPane</code> 的实例管理，它还管理 layoutPane、glassPane 和内部窗体的可选菜单栏。有关这些组件的完整描述，请参见 <code>JRootPane</code> 文档。有关添加、移除和设置 <code>JInternalFrame</code> 的 <code>LayoutManager</code> 的详情，请参阅 {@link javax.swing.RootPaneContainer}。
 <p>
<strong>警告：</strong>Swing 不是线程安全的。有关更多信息，请参阅 <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@see InternalFrameEvent
@see JDesktopPane
@see DesktopManager
@see JInternalFrame.JDesktopIcon
@see JRootPane
@see javax.swing.RootPaneContainer

@version 1.147 05/18/04
@author David Kloba
@author Rich Schiavi
@beaninfo attribute: isContainer true attribute: containerDelegate getContentPane description: A frame container which is contained within another window.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JRootPane javax.swing.JInternalFrame.rootPane
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>JRootPane</code> 实例，它管理此内部窗体的内容窗格和可选菜单栏以及玻璃窗格（glass pane）。

@see JRootPane
@see RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JInternalFrame.rootPaneCheckingEnabled
<!-- END KEY -->
<!-- BEGIN DATA -->
如果为 true，则将对 <code>add</code> 和 <code>setLayout</code> 的调用转发到 <code>contentPane</code>。初始设置为 false，但在构造 <code>JInternalFrame</code> 时将其设置为 true。

@see #isRootPaneCheckingEnabled
@see #setRootPaneCheckingEnabled
@see javax.swing.RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JInternalFrame.closable
<!-- END KEY -->
<!-- BEGIN DATA -->
窗体可关闭。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JInternalFrame.isClosed
<!-- END KEY -->
<!-- BEGIN DATA -->
窗体已关闭。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JInternalFrame.maximizable
<!-- END KEY -->
<!-- BEGIN DATA -->
可将窗体扩展到桌面窗格的大小。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JInternalFrame.isMaximum
<!-- END KEY -->
<!-- BEGIN DATA -->

已将窗体扩展到其最大大小。
@see #maximizable

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JInternalFrame.iconable
<!-- END KEY -->
<!-- BEGIN DATA -->

可以&ldquo;图标化&rdquo;窗体（缩小并显示为图标图像）。
@see JInternalFrame.JDesktopIcon
@see #setIconifiable

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JInternalFrame.isIcon
<!-- END KEY -->
<!-- BEGIN DATA -->

窗体已图标化。
@see #isIcon()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JInternalFrame.resizable
<!-- END KEY -->
<!-- BEGIN DATA -->
可以更改窗体的大小。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JInternalFrame.isSelected
<!-- END KEY -->
<!-- BEGIN DATA -->
当前已选中窗体。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.Icon javax.swing.JInternalFrame.frameIcon
<!-- END KEY -->
<!-- BEGIN DATA -->
此内部窗体左上角显示的图标。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JInternalFrame.title
<!-- END KEY -->
<!-- BEGIN DATA -->
此内部窗体标题栏中所显示的标题。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JInternalFrame.JDesktopIcon javax.swing.JInternalFrame.desktopIcon
<!-- END KEY -->
<!-- BEGIN DATA -->

此内部窗体图标化时所显示的图标。
@see #iconable

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JInternalFrame.CONTENT_PANE_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
绑定属性名。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JInternalFrame.MENU_BAR_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
绑定属性名。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JInternalFrame.TITLE_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
绑定属性名。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JInternalFrame.LAYERED_PANE_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
绑定属性名。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JInternalFrame.ROOT_PANE_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
绑定属性名。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JInternalFrame.GLASS_PANE_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
绑定属性名。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JInternalFrame.FRAME_ICON_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
绑定属性名。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JInternalFrame.IS_SELECTED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
约束属性名，指示此窗体具有选定状态。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JInternalFrame.IS_CLOSED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
约束属性名，指示该内部窗体已关闭。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JInternalFrame.IS_MAXIMUM_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
约束属性名，指示该内部窗体已最大化。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JInternalFrame.IS_ICON_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
约束属性名，指示该内部窗体已图标化。
<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.Component javax.swing.JInternalFrame.lastFocusOwner
<!-- END KEY -->
<!-- BEGIN DATA -->
包含调用 <code>restoreSubcomponentFocus</code> 时将要获得焦点的 Component，也就是说 <code>restoreSubcomponentFocus</code> 将此字段设置为 <code>getMostRecentFocusOwner</code> 所返回的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JInternalFrame()
<!-- END KEY -->
<!-- BEGIN DATA -->

创建不可调整大小的、不可关闭的、不可最大化的、不可图标化的、没有标题的 <code>JInternalFrame</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JInternalFrame(String title)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建不可调整大小的、不可关闭的、不可最大化的、不可图标化的、具有指定标题的 <code>JInternalFrame</code>。注意，传入 <code>null</code> <code>title</code> 会导致不确定的行为，并且可能导致异常。

@param title  要在标题栏中显示的非 <code>null</code> <code>String</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JInternalFrame(String title, boolean resizable)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建不可关闭的、不可最大化的、不可图标化的，以及具有指定标题和可调整大小的 <code>JInternalFrame</code>。

@param title   标题栏中要显示的 <code>String</code>
@param resizable  如果为 <code>true</code>，则可以调整内部窗体的大小

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JInternalFrame(String title, boolean resizable, boolean closable)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建不可最大化的、不可图标化的，以及具有指定标题、可调整大小和可关闭的 <code>JInternalFrame</code>。

@param title 标题栏中要显示的 <code>String</code> 
@param resizable  如果为 <code>true</code>，则可以调整内部窗体的大小
@param closable   如果为 <code>true</code>，则可以关闭内部窗体

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JInternalFrame(String title, boolean resizable, boolean closable, boolean maximizable)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建不可图标化的，但具有指定标题、可调整大小、可关闭和可最大化的 <code>JInternalFrame</code>。

@param title       标题栏中要显示的 <code>String</code>
@param resizable   如果为 <code>true</code>，则可以调整内部窗体的大小
@param closable    如果为 <code>true</code>，则可以关闭内部窗体
@param maximizable 如果为 <code>true</code>，则可以最大化内部窗体

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JInternalFrame(String title, boolean resizable, boolean closable, boolean maximizable, boolean iconifiable)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建具有指定标题、可调整、可关闭、可最大化和可图标化的 <code>JInternalFrame</code>。所有 <code>JInternalFrame</code> 构造方法都使用此构造方法。

@param title  标题栏中要显示的 <code>String</code> 
@param resizable   如果为 <code>true</code>，则可以调整内部窗体的大小
@param closable    如果为 <code>true</code>，则可以关闭内部窗体
@param maximizable 如果为 <code>true</code>，则可以最大化内部窗体
@param iconifiable 如果为 <code>true</code>，则可以图标化内部窗体

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JRootPane javax.swing.JInternalFrame.createRootPane()
<!-- END KEY -->
<!-- BEGIN DATA -->

构造方法调用此方法来设置 <code>JRootPane</code>。
@return  新的 <code>JRootPane</code>
@see JRootPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.InternalFrameUI javax.swing.JInternalFrame.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回呈现此组件的外观对象。

@return 呈现此组件的 <code>InternalFrameUI</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setUI(InternalFrameUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 <code>JInternalFrame</code> 的 UI 委托。
@param ui  UI 委托
@beaninfo bound: true hidden: true attribute: visualUpdate true description: 实现该 Component 的 LookAndFeel 的 UI 对象。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
来自 <code>UIManager</code> 的通知，告知外观已更改。用 <code>UIManager</code> 的最新版本替换当前的 UI 对象。

@see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JInternalFrame.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回呈现此组件的外观类名。

@return &quot;InternalFrameUI&quot; 字符串

@see JComponent#getUIClassID
@see UIDefaults#getUI

@beaninfo description: UIClassID

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JInternalFrame.isRootPaneCheckingEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回是否将对 <code>add</code> 和 <code>setLayout</code> 的调用转发到 <code>contentPane</code>。

@return 如果转发 <code>add</code> 和 <code>setLayout</code>，则返回 true；否则返回 false

@see #addImpl
@see #setLayout
@see #setRootPaneCheckingEnabled
@see javax.swing.RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JInternalFrame.setRootPaneCheckingEnabled(boolean enabled)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置是否将对 <code>add</code> 和 <code>setLayout</code> 的调用转发到 <code>contentPane</code>。
 
@param enabled 如果转发 <code>add</code> 和 <code>setLayout</code>，则为 true；如果应直接在 <code>JInternalFrame</code> 上操作，则为 false。

@see #addImpl
@see #setLayout
@see #isRootPaneCheckingEnabled
@see javax.swing.RootPaneContainer
@beaninfo hidden: true description: Whether the add and setLayout methods are forwarded

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JInternalFrame.addImpl(Component comp, Object constraints, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定的子 <code>Component</code>。重写此方法，从而有条件地将调用转发到 <code>contentPane</code>。默认情况下将子组件添加到 <code>contentPane</code> 而不是窗体中，有关详情，请参阅 {@link javax.swing.RootPaneContainer}。
 
@param comp 要添加子组件的组件
@param constraints 要遵守的约束条件
@param index 索引
@exception IllegalArgumentException 如果 <code>index</code> 无效
@exception IllegalArgumentException 如果将容器的父级添加到其本身
@exception IllegalArgumentException 如果向容器内添加窗口
 
@see #setRootPaneCheckingEnabled
@see javax.swing.RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.remove(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->

从此容器中移除指定组件。如果 <code>comp</code> 不是 <code>JInternalFrame</code> 的子级，则将调用转发到 <code>contentPane</code>。

@param comp 要移除的组件
@throws NullPointerException 如果 <code>comp</code> 为 null
@see #add
@see javax.swing.RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setLayout(LayoutManager manager)
<!-- END KEY -->
<!-- BEGIN DATA -->
确保默认情况下无法设置此组件的布局。重写此方法，从而有条件地将调用转发到 <code>contentPane</code>。有关更多信息，请参阅 {@link javax.swing.RootPaneContainer}。
 
@param manager <code>LayoutManager</code>
@see #setRootPaneCheckingEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuBar javax.swing.JInternalFrame.getMenuBar()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JInternalFrame</code> 的当前 <code>JMenuBar</code>；如果尚未设置菜单栏，则返回 <code>null</code>。
@return 当前的菜单栏；如果尚未设置菜单栏，则返回 <code>null</code>

@deprecated 从 Swing version 1.0.3 开始，由 <code>getJMenuBar()</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuBar javax.swing.JInternalFrame.getJMenuBar()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JInternalFrame</code> 的当前 <code>JMenuBar</code>；如果尚未设置菜单栏，则返回 <code>null</code>。

@return  此内部窗体使用的 <code>JMenuBar</code>
@see #setJMenuBar

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setMenuBar(JMenuBar m)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 <code>JInternalFrame</code> 的 <code>menuBar</code> 属性。

@param m  此内部窗体中使用的 <code>JMenuBar</code> 
@see #getJMenuBar
@deprecated 从 Swing version 1.0.3 开始，由 <code>setJMenuBar(JMenuBar m)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setJMenuBar(JMenuBar m)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 <code>JInternalFrame</code> 的 <code>menuBar</code> 属性。

@param m  此内部窗体中使用的 <code>JMenuBar</code>
@see #getJMenuBar
@beaninfo bound:true preferred:true description: The menu bar for accessing pulldown menus from this internal frame.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Container javax.swing.JInternalFrame.getContentPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此内部窗体的内容窗格。
@return 内容窗格

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setContentPane(Container c)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 <code>JInternalFrame</code> 的 <code>contentPane</code> 属性。
 
@param c  此内部窗体的内容窗格

@exception java.awt.IllegalComponentStateException （运行时异常）如果 contentPane 参数为 <code>null</code>
@see RootPaneContainer#getContentPane
@beaninfo bound: true hidden: true description: The client area of the internal frame where child components are normally inserted.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JLayeredPane javax.swing.JInternalFrame.getLayeredPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此内部窗体的分层窗格。

@return <code>JLayeredPane</code> 对象
@see RootPaneContainer#setLayeredPane
@see RootPaneContainer#getLayeredPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setLayeredPane(JLayeredPane layered)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 <code>JInternalFrame</code> 的 <code>layeredPane</code> 属性。

@param layered 此内部窗体的 <code>JLayeredPane</code>

@exception java.awt.IllegalComponentStateException （运行时异常）如果 layeredPane 参数为 <code>null</code>
@see RootPaneContainer#setLayeredPane
@beaninfo hidden:true bound:true description: The pane which holds the various desktop layers.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JInternalFrame.getGlassPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此内部窗体的玻璃窗格。

@return glassPane
@see RootPaneContainer#setGlassPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setGlassPane(Component glass)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 <code>JInternalFrame</code> 的 <code>glassPane</code> 属性。

@param glass 此内部窗体的 glassPane
@see RootPaneContainer#getGlassPane
@beaninfo bound: true hidden: true description: A transparent pane used for menu rendering.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JRootPane javax.swing.JInternalFrame.getRootPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此内部窗体的 <code>rootPane</code> 对象。

@return <code>rootPane</code> 属性
@see RootPaneContainer#getRootPane

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JInternalFrame.setRootPane(JRootPane root)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 <code>JInternalFrame</code> 的 <code>rootPane</code> 属性。此方法由构造方法调用。

@param root 新的 <code>JRootPane</code> 对象
@beaninfo bound: true hidden: true description: The root pane used by this internal frame.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setClosable(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置是否可以通过某个用户操作关闭此 <code>JInternalFrame</code>。
@param b boolean 值，其中 <code>true</code> 意味着可以关闭此内部窗体
@beaninfo preferred: true bound: true description: Indicates whether this internal frame can be closed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JInternalFrame.isClosable()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回是否可以通过某个用户操作关闭此 <code>JInternalFrame</code>。
@return 如果可以关闭此内部窗体，则返回 <code>true</code> 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JInternalFrame.isClosed()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>JInternalFrame</code> 当前是否已关闭。
@return 如果此内部窗体已关闭，则返回 <code>true</code>；否则返回 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setClosed(boolean b) throws java.beans.PropertyVetoException
<!-- END KEY -->
<!-- BEGIN DATA -->

如果参数为 <code>true</code>，则关闭此内部窗体。不要调用带有 <code>false</code> 参数的此方法；调用 <code>setClosed(false)</code> 的结果是不确定的。

 <p>

如果已关闭内部窗体，则此方法不执行任何操作并立即返回。否则此方法通过激发 <code>INTERNAL_FRAME_CLOSING</code> 事件来开始执行。然后此方法将 <code>closed</code> 属性设置为 <code>true</code>，除非侦听器禁止属性更改。最后此方法通过使内部窗体不可见和不可选择，然后激发 <code>INTERNAL_FRAME_CLOSED</code> 事件来结束操作。

 <p>

<b>注：</b>要想重用已关闭的内部窗体，您必须将其添加到容器中（即使从未将其从以前的容器中移除也是如此）。通常，此容器是以前包含该内部窗体的 <code>JDesktopPane</code>。

@param   b  必须为 <code>true</code>
          
@exception PropertyVetoException 如果 <code>JInternalFrame</code> 禁止设置该属性
 

@see #isClosed()
@see #setDefaultCloseOperation
@see #dispose
@see javax.swing.event.InternalFrameEvent#INTERNAL_FRAME_CLOSING

@beaninfo bound: true constrained: true description: Indicates whether this internal frame has been closed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setResizable(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置是否可以通过某个用户操作调整 <code>JInternalFrame</code> 的大小。

@param b  boolean 值，其中 <code>true</code> 意味着可以调整此内部窗体的大小
@beaninfo preferred: true bound: true description: Determines whether this internal frame can be resized by the user.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JInternalFrame.isResizable()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回是否可以通过某个用户操作调整 <code>JInternalFrame</code> 的大小。

@return 如果可以调整此内部窗体的大小，则返回 <code>true</code>；否则返回 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setIconifiable(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置 <code>iconable</code> 属性，对于能够使 <code>JInternalFrame</code> 变成一个图标的用户而言，该属性必须为 <code>true</code>。某些外观可能不实现图标化；它们将忽略此属性。

@param b  boolean 值，其中 <code>true</code> 意味着可以图标化此内部窗体
@beaninfo preferred: true bound: true description: Determines whether this internal frame can be iconified.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JInternalFrame.isIconifiable()
<!-- END KEY -->
<!-- BEGIN DATA -->

获取该 <code>iconable</code> 属性（默认情况下为 <code>false</code>）。 

@return <code>iconable</code> 属性的值。

@see #setIconifiable

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JInternalFrame.isIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回 <code>JInternalFrame</code> 当前是否已图标化。

@return 如果此内部窗体已图标化，则返回 <code>true</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setIcon(boolean b) throws java.beans.PropertyVetoException
<!-- END KEY -->
<!-- BEGIN DATA -->

如果外观支持图标化，则对此内部窗体执行图标化或取消图标化。如果内部窗体的状态更改为图标化，则此方法激发 <code>INTERNAL_FRAME_ICONIFIED</code> 事件。如果该状态更改为取消图标化，则激发 <code>INTERNAL_FRAME_DEICONIFIED</code> 事件。

@param b boolean 值，其中 <code>true</code> 意味着图标化此内部窗体，而 <code>false</code> 意味着取消其图标化
@exception PropertyVetoException 如果 <code>JInternalFrame</code> 禁止设置该属性

@see InternalFrameEvent#INTERNAL_FRAME_ICONIFIED
@see InternalFrameEvent#INTERNAL_FRAME_DEICONIFIED

@beaninfo bound: true constrained: true description: The image displayed when this internal frame is minimized.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setMaximizable(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置 <code>maximizable</code> 属性，该属性确定是否可以通过某个用户操作最大化此 <code>JInternalFrame</code>。某些外观可能不支持最大化内部窗体；它们会忽略此属性。

@param b <code>true</code> 指示此窗体应该是可最大化的；<code>false</code> 指示其不应该是可最大化的 
@beaninfo bound: true preferred: true description: Determines whether this internal frame can be maximized.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JInternalFrame.isMaximizable()
<!-- END KEY -->
<!-- BEGIN DATA -->

获取该 <code>maximizable</code> 属性的值。

@return <code>maximizable</code> 属性的值
@see #setMaximizable

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JInternalFrame.isMaximum()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回 <code>JInternalFrame</code> 当前是否已最大化。

@return 如果此内部窗体已最大化，则返回 <code>true</code>；否则返回 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setMaximum(boolean b) throws java.beans.PropertyVetoException
<!-- END KEY -->
<!-- BEGIN DATA -->
最大化并还原此内部窗体。将已最大化的窗体的大小调整为完全适合与 <code>JInternalFrame</code> 关联的 <code>JDesktopPane</code> 区域。将已还原的窗体的大小设置为 <code>JInternalFrame</code> 的实际大小。

@param b  boolean 值，其中 <code>true</code> 意味着最大化此内部窗体；<code>false</code> 意味着还原它 
@exception PropertyVetoException <code>JInternalFrame</code> 如果禁止设置该属性
@beaninfo bound:true constrained: true description: Indicates whether this internal frame is maximized.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JInternalFrame.getTitle()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>JInternalFrame</code> 的标题。

@return 包含此内部窗体标题的 <code>String</code>
@see #setTitle

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setTitle(String title)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置 <code>JInternalFrame</code> 的标题。<code>title</code> 可能为 <code>null</code> 值。
@see #getTitle

@param title  标题栏中要显示的 <code>String</code> 
@beaninfo preferred: true bound: true description: The text displayed in the title bar.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setSelected(boolean selected) throws java.beans.PropertyVetoException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果要显示内部窗体，则选定或取消选定该窗体。如果内部窗体是已选定的窗体，则 <code>JInternalFrame</code> 以不同的方式绘制其标题栏，向用户指示此内部窗体具有焦点。当此方法将内部窗体的状态从取消选定更改为选定时，它会激发 <code>InternalFrameEvent.INTERNAL_FRAME_ACTIVATED</code> 事件。如果将状态从选定更改为取消选定，则激发 <code>InternalFrameEvent.INTERNAL_FRAME_DEACTIVATED</code> 事件。

@param selected  boolean 值，其中 <code>true</code> 意味着此内部窗体应该成为选定的窗体（当前处于激活状态）；<code>false</code> 意味着此内部窗体应该成为取消选定的窗体
@exception PropertyVetoException <code>JInternalFrame</code> 如果设置该属性

@see #isShowing
@see InternalFrameEvent#INTERNAL_FRAME_ACTIVATED
@see InternalFrameEvent#INTERNAL_FRAME_DEACTIVATED

@beaninfo constrained: true bound: true description: Indicates whether this internal frame is currently the active frame.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JInternalFrame.isSelected()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>JInternalFrame</code> 当前是否为&ldquo;选定的&rdquo;或处于激活状态的窗体。

@return 如果此内部窗体当前为选定的（处于激活状态），则返回 <code>true</code>
@see #setSelected

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setFrameIcon(Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置要在此内部窗体的标题栏中显示的图像（通常显示在左上角）。此图像不是 <code>desktopIcon</code> 对象，desktopIcon 对象是图标化此内部窗体时在 <code>JDesktop</code> 中所显示的图像。

向此函数传入 <code>null</code> 是有效的，但在此情况下外观可选择适当的行为，如不显示图标，或者显示该外观的默认图标。

@param icon 标题栏中要显示的 <code>Icon</code>
@see #getFrameIcon
@beaninfo bound: true description: The icon shown in the top-left corner of this internal frame.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.JInternalFrame.getFrameIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回要在此内部窗体的标题栏中显示的图像（通常显示在左上角）。
 
@return 标题栏中显示的 <code>Icon</code>
@see #setFrameIcon

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.moveToFront()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此组件的父组件是 <code>JLayeredPane</code>，则将此组件移至位置 0 的便捷方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.moveToBack()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此组件的父组件是 <code>JLayeredPane</code>，则将此组件移至位置 -1 的便捷方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Cursor javax.swing.JInternalFrame.getLastCursor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回通过 <code>setCursor</code> 方法设置的最后一个 <code>Cursor</code>，它是不可调整大小的 <code>Cursor</code>。

 @return 最后一个不可调整大小的 <code>Cursor</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setCursor(Cursor cursor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setLayer(Integer layer)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置此组件 layer 属性的便捷方法。

@param layer  指定此窗体的桌面层的 <code>Integer</code> 对象
@see JLayeredPane
@beaninfo expert: true description: Specifies what desktop layer is used.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setLayer(int layer)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置此组件 layer 属性的便捷方法。对于 <code>JLayeredPane</code> 中预定义的 layer 值，应该使用 <code>setLayer(Integer)</code> 方法。使用 <code>setLayer(int)</code> 时，必须注意不要意外地与这些值冲突。

@param layer  指定此内部窗体的桌面层的整数

@since 1.3

@see #setLayer(Integer)
@see JLayeredPane
@beaninfo expert: true description: Specifies what desktop layer is used.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JInternalFrame.getLayer()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得此组件 layer 属性的便捷方法。

@return 指定此窗体的桌面层的 <code>Integer</code> 对象
@see JLayeredPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JDesktopPane javax.swing.JInternalFrame.getDesktopPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
在祖先层次结构中搜索 <code>JDesktop</code> 实例的便捷方法。如果 <code>JInternalFrame</code> 未找到 JDesktop 实例，则搜索 <code>desktopIcon</code> 树。

@return 此内部窗体所属于的 <code>JDesktopPane</code>；如果找不到，则为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setDesktopIcon(JInternalFrame.JDesktopIcon d)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置与此 <code>JInternalFrame</code> 关联的 <code>JDesktopIcon</code>。

@param d 要在桌面上显示的 <code>JDesktopIcon</code>
@see #getDesktopIcon
@beaninfo bound: true description: The icon shown when this internal frame is minimized.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JInternalFrame.JDesktopIcon javax.swing.JInternalFrame.getDesktopIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回图标化此 <code>JInternalFrame</code> 时使用的 <code>JDesktopIcon</code>。

@return 在桌面上显示的 <code>JDesktopIcon</code> 
@see #setDesktopIcon

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.JInternalFrame.getNormalBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>JInternalFrame</code> 未处于最大化状态，则返回 <code>getBounds()</code>；否则返回还原 <code>JInternalFrame</code> 后的边界。

@return 返回此窗体处于正常状态时，包含此窗体边界的 <code>Rectangle</code>
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setNormalBounds(Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此内部窗体的正常边界，即此内部窗体从其最大化状态还原后的边界。此方法仅由桌面管理器使用。

@param r 此内部窗体应该还原为的边界
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JInternalFrame.getFocusOwner()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 <code>JInternalFrame</code> 处于激活状态，则返回具有焦点的子组件。否则返回 <code>null</code>。

@return 具有焦点的组件，如果子组件都不具有焦点，则返回 <code>null</code> 
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JInternalFrame.getMostRecentFocusOwner()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回选定此 <code>JInternalFrame</code> 时，将接收焦点的 <code>JInternalFrame</code> 子组件。如果当前已选定此 <code>JInternalFrame</code>，则此方法返回与 <code>getFocusOwner</code> 方法相同的组件。如果尚未选定此 <code>JInternalFrame</code> ，则返回最近请求焦点的子组件。如果没有子组件请求过焦点，则返回此 <code>JInternalFrame</code> 的初始 focusable 组件。如果不存在这种子组件，则返回此 <code>JInternalFrame</code> 接收焦点的默认组件。

@return 选定此 <code>JInternalFrame</code> 时将接收焦点的子组件
@see #getFocusOwner
@see #isSelected
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.restoreSubcomponentFocus()
<!-- END KEY -->
<!-- BEGIN DATA -->
请求内部窗体将焦点还原到具有焦点的最后一个子组件。用户选定此内部窗体时（例如通过单击标题栏）由 UI 使用此方法。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.reshape(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
移动此组件并调整其大小。与其他组件不同，此实现还会强制进行重新布局，因此总是重新显示窗体装饰，例如标题栏。

@param x  给出该组件新水平位置的整数，该位置从其容器的左边开始，以像素为单位
@param y  给出该组件新垂直位置的整数，该位置从其容器的底边开始，以像素为单位
@param width  给出该组件新宽度的整数，以像素为单位
@param height 给出该组件新高度的整数，以像素为单位

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.addInternalFrameListener(InternalFrameListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定的侦听器，以从此内部窗体接收内部窗体事件。

@param l 内部窗体侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.removeInternalFrameListener(InternalFrameListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定的内部窗体侦听器，不再接收此内部窗体发出的内部窗体事件。

@param l 内部窗体侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.InternalFrameListener[] javax.swing.JInternalFrame.getInternalFrameListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回使用 <code>addInternalFrameListener</code> 添加到此 <code>JInternalFrame</code> 的所有 <code>InternalFrameListener</code> 的数组。

@return 已添加的所有 <code>InternalFrameListener</code>，如果尚未添加侦听器，则返回一个空数组
@since 1.4
 
@see #addInternalFrameListener

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JInternalFrame.fireInternalFrameEvent(int id)
<!-- END KEY -->
<!-- BEGIN DATA -->
激发内部窗体事件。

@param id  要激发的事件类型；为以下值之一：
 <ul>
 <li><code>InternalFrameEvent.INTERNAL_FRAME_OPENED</code>
 <li><code>InternalFrameEvent.INTERNAL_FRAME_CLOSING</code>
 <li><code>InternalFrameEvent.INTERNAL_FRAME_CLOSED</code>
 <li><code>InternalFrameEvent.INTERNAL_FRAME_ICONIFIED</code>
 <li><code>InternalFrameEvent.INTERNAL_FRAME_DEICONIFIED</code>
 <li><code>InternalFrameEvent.INTERNAL_FRAME_ACTIVATED</code>
 <li><code>InternalFrameEvent.INTERNAL_FRAME_DEACTIVATED</code>
 </ul>
如果事件类型不是上述某个值，则不执行任何操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.doDefaultCloseAction()
<!-- END KEY -->
<!-- BEGIN DATA -->
激发 <code>INTERNAL_FRAME_CLOSING</code> 事件，然后执行内部窗体的默认 close 操作所指定的操作。此方法通常由外观实现的操作处理程序为该内部窗体的 close 按钮所调用。

@since 1.3
@see #setDefaultCloseOperation
@see javax.swing.event.InternalFrameEvent#INTERNAL_FRAME_CLOSING

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.setDefaultCloseOperation(int operation)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用户在此内部窗体上发起 &quot;close&quot; 时默认执行的操作。可能的选项为：
 <p>
 <dl>
 <dt><code>DO_NOTHING_ON_CLOSE</code> 
<dd> 不执行任何操作。这要求程序在已注册 <code>InternalFrameListener</code> 对象的 <code>windowClosing</code> 方法中处理该操作。
 <dt><code>HIDE_ON_CLOSE</code>
<dd> 自动使该内部窗体不可见。
 <dt><code>DISPOSE_ON_CLOSE</code>
<dd> 自动释放该内部窗体。
 </dl>
 <p>
默认值是 <code>DISPOSE_ON_CLOSE</code>。执行指定的 close 操作前，该内部窗体激发 <code>INTERNAL_FRAME_CLOSING</code> 事件。

@param operation 在 <code>javax.swing.WindowConstants</code>（由 <code>JInternalFrame</code> 所实现的接口）中定义的以下常量之一：<code>DO_NOTHING_ON_CLOSE</code>、<code>HIDE_ON_CLOSE</code> 或 <code>DISPOSE_ON_CLOSE</code>

@see #addInternalFrameListener
@see #getDefaultCloseOperation
@see #setVisible
@see #dispose
@see InternalFrameEvent#INTERNAL_FRAME_CLOSING

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JInternalFrame.getDefaultCloseOperation()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用户在此内部窗体上发起 &quot;close&quot; 时默认执行的操作。
@return 用户关闭内部窗体时所执行的操作
@see #setDefaultCloseOperation

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.pack()
<!-- END KEY -->
<!-- BEGIN DATA -->
使此 <code>JInternalFrame</code> 的子组件按其首选大小进行布局。首先还原然后打包已图标化或最大化的内部窗体。如果无法还原内部窗体，则不更改其状态并且不对其进行打包。

@see   java.awt.Window#pack

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.show()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果内部窗体不可见，则将该内部窗体置于前端，使其可见并尝试选定它。首次使该内部窗体可见时，此方法还激发 <code>INTERNAL_FRAME_OPENED</code> 事件。如果内部窗体已经可见，则此方法不执行任何操作。调用此方法与调用 <code>setVisible(true)</code> 具有相同的效果。

@see #moveToFront
@see #setSelected
@see InternalFrameEvent#INTERNAL_FRAME_OPENED
@see #setVisible

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.dispose()
<!-- END KEY -->
<!-- BEGIN DATA -->
使此内部窗体不可见、取消选定并关闭它。如果还未关闭该窗体，则此方法激发 <code>INTERNAL_FRAME_CLOSED</code> 事件。调用此方法的结果与调用 <code>setClosed(true)</code> 类似，但是 <code>dispose</code> 总是成功地关闭内部窗体，并且不激发 <code>INTERNAL_FRAME_CLOSING</code> 事件。

@see javax.swing.event.InternalFrameEvent#INTERNAL_FRAME_CLOSED
@see #setVisible
@see #setSelected
@see #setClosed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.toFront()
<!-- END KEY -->
<!-- BEGIN DATA -->
将此内部窗体置于前端。将此内部窗体置于堆栈顺序的顶部，并且对其他可见的内部窗体进行相应的调整。

@see       java.awt.Window#toFront
@see       #moveToFront

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JInternalFrame.toBack()
<!-- END KEY -->
<!-- BEGIN DATA -->
将此内部窗体发送至后台。将此内部窗体置于堆栈顺序的底部，并且对其他可见的内部窗体进行相应的调整。

@see       java.awt.Window#toBack
@see       #moveToBack

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.swing.JInternalFrame.setFocusCycleRoot(boolean focusCycleRoot)
<!-- END KEY -->
<!-- BEGIN DATA -->
不执行任何操作，原因是 <code>JInternalFrame</code> 必须始终为焦点遍历循环的根。 

@param focusCycleRoot 忽略此值
@see #isFocusCycleRoot
@see java.awt.Container#setFocusTraversalPolicy
@see java.awt.Container#getFocusTraversalPolicy
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean javax.swing.JInternalFrame.isFocusCycleRoot()
<!-- END KEY -->
<!-- BEGIN DATA -->
始终返回 <code>true</code>，原因是所有 <code>JInternalFrame</code> 必须为焦点遍历循环的根。

@return <code>true</code>
@see #setFocusCycleRoot
@see java.awt.Container#setFocusTraversalPolicy
@see java.awt.Container#getFocusTraversalPolicy
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.awt.Container javax.swing.JInternalFrame.getFocusCycleRootAncestor()
<!-- END KEY -->
<!-- BEGIN DATA -->
始终返回 <code>null</code>，原因是 <code>JInternalFrame</code> 必须始终为焦点遍历循环的根。 

@return <code>null</code>
@see java.awt.Container#isFocusCycleRoot()
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.swing.JInternalFrame.getWarningString()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此内部窗体中显示的警告字符串。因为内部窗体始终是安全的（由于它完全包含在窗口中，而该窗口可能需要警告字符串），所以此方法始终返回 <code>null</code>。
@return    <code>null</code>
@see       java.awt.Window#getWarningString

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JInternalFrame.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JInternalFrame</code> 的字符串表示形式。此方法仅在进行调试的时候使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。
 
@return  此 <code>JInternalFrame</code> 的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JInternalFrame.paintComponent(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->

重写此方法，以便在拖动内部窗体时允许进行优化的绘制。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JInternalFrame.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得与此 <code>JInternalFrame</code> 关联的 <code>AccessibleContext</code>。对于内部窗体，<code>AccessibleContext</code> 采用 <code>AccessibleJInternalFrame</code> 对象的形式。如果有必要，创建一个新的 <code>AccessibleJInternalFrame</code> 实例。

@return <code>AccessibleJInternalFrame</code>，它用作此 <code>JInternalFrame</code> 的 <code>AccessibleContext</code>
@see AccessibleJInternalFrame

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JInternalFrame.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

有关 Swing 中序列化的更多信息，请参见 <code>JComponent</code> 中的 <code>readObject</code> 和 <code>writeObject</code>。

<!-- END DATA -->
