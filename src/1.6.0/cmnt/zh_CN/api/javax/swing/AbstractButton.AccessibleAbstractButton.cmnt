<!-- BEGIN KEY -->
protected abstract class javax.swing.AbstractButton.AccessibleAbstractButton extends javax.swing.JComponent.AccessibleJComponent implements javax.accessibility.AccessibleAction, javax.accessibility.AccessibleValue, javax.accessibility.AccessibleText, javax.accessibility.AccessibleExtendedComponent
<!-- END KEY -->
<!-- BEGIN DATA -->
 此类实现对 <code>AbstractButton</code> 类的可访问性支持。它提供适合按钮和菜单项用户界面元素的 Java Accessibility API 实现。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象的可访问名称。  

@return 返回该对象的本地化名称，如果此对象没有名称，则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleIcon[] javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此对象关联的 AccessibleIcon（如果存在一个或多个）。否则返回 null。
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleStateSet javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleStateSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得此对象的状态设置。

@return 包含对象当前状态的 AccessibleState 的实例
@see AccessibleState

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleRelationSet javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleRelationSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得与此对象关联的 AccessibleRelationSet（如果存在）。否则返回 null。
@see AccessibleRelation
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleAction javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleAction()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此对象关联的 AccessibleAction。在针对此类的 Java Accessibility API 的实现中，返回此对象，它负责代表其本身实现 AccessibleAction 接口。
 
@return 此对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleValue javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此对象关联的 AccessibleValue。在针对此类的 Java Accessibility API 的实现中，返回此对象，它负责代表其本身实现 AccessibleValue 接口。
 
@return 此对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleActionCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象中可用 Action 的数量。按钮的默认行为是执行一个操作，即切换按钮。

@return 1，此对象中的 Action 数

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleActionDescription(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对该对象的指定操作的描述。

@param i 该操作的从零开始的索引

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.AbstractButton.AccessibleAbstractButton.doAccessibleAction(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
对该对象执行指定的 Action

@param i 从零开始的操作索引
@return 如果执行了该操作，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.swing.AbstractButton.AccessibleAbstractButton.getCurrentAccessibleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 Number 形式获取此对象的值。

@return 如果不选择此对象，则返回整数 0，如果选择此对象，则返回整数 1。
@see AbstractButton#isSelected

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.AbstractButton.AccessibleAbstractButton.setCurrentAccessibleValue(Number n)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此对象的值设置为一个 Number。

@return 如果设置该值，则返回 True。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.swing.AbstractButton.AccessibleAbstractButton.getMinimumAccessibleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 Number 形式获取此对象的最小值。

@return 整数 0。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.swing.AbstractButton.AccessibleAbstractButton.getMaximumAccessibleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 Number 形式获取此对象的最大值。

@return 整数 1。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.AbstractButton.AccessibleAbstractButton.getIndexAtPoint(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
在本地坐标中给出一个点，返回该 Point 之下的、从零开始的字符索引。如果该点无效，则此方法返回 -1。

注：AbstractButton 必须具有一个有效大小（例如，它已被添加到其祖先容器是有效顶级窗口的父容器中），以便此方法能够返回一个有意义的值。

@param p 本地坐标中的 Point
@return Point p 之下的、从零开始的字符索引；如果 Point 无效，则返回 -1。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.AbstractButton.AccessibleAbstractButton.getCharacterBounds(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定字符串中给定索引处的字符的边界框。边界在本地坐标中返回。如果索引无效，则返回一个空矩形。

注：AbstractButton 必须具有一个有效大小（例如，它已被添加到其祖先容器是有效顶级窗口的父容器中），以便此方法能够返回一个有意义的值。

@param i String 中的索引
@return 返回字符边界框的屏幕坐标，如果索引无效，则返回一个空矩形。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.AbstractButton.AccessibleAbstractButton.getCharCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回字符（有效索引）的数量

@return 字符数。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.AbstractButton.AccessibleAbstractButton.getCaretPosition()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回插入符号的从零开始的偏移量。

注：插入符号右边的那个字符将拥有与偏移量相同的索引值（插入符号在两个字符之间）。
@return 插入符号的从零开始的偏移量。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.AbstractButton.AccessibleAbstractButton.getAtIndex(int part, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定索引处的 String。 

@param part 要检索的 AccessibleText.CHARACTER、AccessibleText.WORD 或 AccessibleText.SENTENCE
@param index 文本中的索引，该索引 &gt;= 0
@return 字母、单词或句子，对于无效索引或无效 part，则返回 null
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.AbstractButton.AccessibleAbstractButton.getAfterIndex(int part, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定索引之后的 String。

@param part 要检索的 AccessibleText.CHARACTER、AccessibleText.WORD 或 AccessibleText.SENTENCE
@param index 文本中的索引，该索引 &gt;= 0
@return 字母、单词或句子，对于无效索引或无效 part，则返回 null
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.AbstractButton.AccessibleAbstractButton.getBeforeIndex(int part, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定索引前面的 String。

@param part 要检索的 AccessibleText.CHARACTER、AccessibleText.WORD 或 AccessibleText.SENTENCE
@param index 文本中的索引，该索引 &gt;= 0
@return 字母、单词或句子，对于无效索引或无效 part，则返回 null
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.AbstractButton.AccessibleAbstractButton.getCharacterAttribute(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回位于给定索引处的给定字符的 AttributeSet。

@param i 文本中从零开始的索引
@return 字符的 AttributeSet
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.AbstractButton.AccessibleAbstractButton.getSelectionStart()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回选定文本中的起始偏移量。如果没有选择文本，但有一个插入符号，则起始偏移量和结束偏移量是相同的。

@return 选择文本中起始处的索引
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.AbstractButton.AccessibleAbstractButton.getSelectionEnd()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回选定文本中的结束偏移量。如果没有选择文本，但有一个插入符号，则起始偏移量和结束偏移量是相同的。

@return 选择文本中结束处的索引
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.AbstractButton.AccessibleAbstractButton.getSelectedText()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回选定文本的一部分。

@return 返回选定文本的 String 部分
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.AbstractButton.AccessibleAbstractButton.getToolTipText()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回工具提示文本

@return 对象的工具提示文本（如果受支持）；否则返回 null
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.AbstractButton.AccessibleAbstractButton.getTitledBorderText()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回加标题的边界文本

@return 对象的加标题的边界文本（如果受支持）；否则返回 null
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleKeyBinding javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleKeyBinding()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此对象有关的键绑定。

@return 对象的键绑定（如果受支持）；否则返回 null
@see AccessibleKeyBinding
@since 1.4

<!-- END DATA -->
