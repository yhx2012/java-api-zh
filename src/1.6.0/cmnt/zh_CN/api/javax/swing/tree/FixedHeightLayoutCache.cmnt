<!-- BEGIN KEY -->
public class javax.swing.tree.FixedHeightLayoutCache extends javax.swing.tree.AbstractLayoutCache
<!-- END KEY -->
<!-- BEGIN DATA -->
注：在以后的版本中，这将变得更加开放。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前的序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.24 05/05/04
@author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.FixedHeightLayoutCache.setModel(TreeModel newModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置将提供数据的 TreeModel。

@param newModel 将提供数据的 TreeModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.FixedHeightLayoutCache.setRootVisible(boolean rootVisible)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定 TreeModel 的根节点是否可见。

@param rootVisible 如果将显示树的根节点，则为 true
@see #rootVisible

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.FixedHeightLayoutCache.setRowHeight(int rowHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置每个单元格的高度。如果 rowHeight 小于或等于 0，则将抛出 IllegalArgumentException。

@param rowHeight 每个单元格的高度（以像素为单位）

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.FixedHeightLayoutCache.getRowCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回可视的行数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.FixedHeightLayoutCache.invalidatePathBounds(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
不执行任何操作，FixedHeightLayoutCache 不缓存宽度（即所有可以更改的宽度）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.FixedHeightLayoutCache.invalidateSizes()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知 TreeState 需要重新计算它引用的所有大小。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.FixedHeightLayoutCache.isExpanded(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前扩展了由行标识的值，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.tree.FixedHeightLayoutCache.getBounds(TreePath path, Rectangle placeIn)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给出绘制路径所需边界的矩形。

@param path     指定节点的 TreePath 
@param placeIn  提供可用空间的 Rectangle 对象
@return 指定要使用的空间的 Rectangle 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.tree.FixedHeightLayoutCache.getPathForRow(int row)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回传入行的路径。如果行不可见，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.FixedHeightLayoutCache.getRowForPath(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回路径中标识的最后一项可见的行。如果路径中任何元素当前不可见，则返回 -1。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.tree.FixedHeightLayoutCache.getPathClosestTo(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最接近 x,y 的节点的路径。如果当前没有任何可见的内容，则返回 null，否则，始终返回一个有效路径。如果需要测试返回的对象是否正好位于 x, y，您应获取返回路径的边界，并根据它测试 x, y。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.FixedHeightLayoutCache.getVisibleChildCount(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回行的可见子对象数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<javax.swing.tree.TreePath> javax.swing.tree.FixedHeightLayoutCache.getVisiblePathsFrom(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示从传入位置开始的可见路径的增量的 Enumerator。该枚举的排序基于路径的显示方式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.FixedHeightLayoutCache.setExpandedState(TreePath path, boolean isExpanded)
<!-- END KEY -->
<!-- BEGIN DATA -->
将路径 <code>path</code> 的扩展状态标记为 <code>isExpanded</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.FixedHeightLayoutCache.getExpandedState(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果该路径已扩展，并且可见，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.FixedHeightLayoutCache.treeNodesChanged(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>在已经以某种方式更改节点（或同级节点集）后调用。没有更改节点在树中的位置，也没有改变他们的子数组，但是其他的属性已更改，并且可能影响表示形式。示例：文件的名称已更改，但是它在文件系统中的位置不变。</p>

<p>e.path() 返回已更改节点的父节点的路径。</p>

<p>e.childIndices() 返回更改节点的索引。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.FixedHeightLayoutCache.treeNodesInserted(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>将节点插入树之后进行调用。</p>

<p>e.path() 返回新节点的父节点
<p>e.childIndices() 按升序返回新节点的索引。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.FixedHeightLayoutCache.treeNodesRemoved(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>将节点从树移除之后进行调用。注意，如果从树移除子树，则对于移除的子树的根而言，此方法仅调用一次，对于移除的每个兄弟子树集而言，则不是一次。</p>

<p>e.path() 返回删除节点的前一个父节点。</p>

<p>e.childIndices() 返回节点按升序删除之前具有的索引。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.FixedHeightLayoutCache.treeStructureChanged(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>树彻底更改给定节点以下的结构之后进行调用。如果 e.getPath() 返回的路径长度为一，并且第一个元素不标识当前根节点，则第一个元素应成为树的新根节点。<p>

<p>e.path() 保持节点的路径。</p>
<p>e.childIndices() 返回 null。</p>

<!-- END DATA -->
