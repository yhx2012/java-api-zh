<!-- BEGIN KEY -->
public class javax.swing.tree.DefaultTreeCellRenderer extends javax.swing.JLabel implements javax.swing.tree.TreeCellRenderer
<!-- END KEY -->
<!-- BEGIN DATA -->
显示树中的条目。<code>DefaultTreeCellRenderer</code> 是透明的，除非为 paint 创建子类，否则不要更改它。有关使用此类自定义节点显示的示例，请参阅 <em>The Java Tutorial</em> 中的 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/components/tree.html">How to Use Trees</a> 一节。
 <p>                                                                        
 
<strong><a name="override">实现注意事项：</a></strong>此类重写 <code>invalidate</code>、<code>validate</code>、<code>revalidate</code>、<code>repaint</code> 和 <code>firePropertyChange</code> 只是为了提高性能。如果不重写这些方法，这些经常调用的方法将执行那些对于默认树单元格渲染器来说不必要的代码路径。如果编写自己的渲染器，则要小心权衡重写这些方法的利弊。

 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前的序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。
 
@version 1.51 01/23/04
@author Rob Davis
@author Ray Ryan
@author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.DefaultTreeCellRenderer.selected
<!-- END KEY -->
<!-- BEGIN DATA -->
当前是否选择该值。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.DefaultTreeCellRenderer.hasFocus
<!-- END KEY -->
<!-- BEGIN DATA -->
如果有焦点，则为 true。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.closedIcon
<!-- END KEY -->
<!-- BEGIN DATA -->
用于显示无扩展的非叶节点的图标。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.leafIcon
<!-- END KEY -->
<!-- BEGIN DATA -->
用于显示叶节点的图标。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.openIcon
<!-- END KEY -->
<!-- BEGIN DATA -->
用于显示扩展的非叶节点的图标。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.textSelectionColor
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选定节点的前景颜色。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.textNonSelectionColor
<!-- END KEY -->
<!-- BEGIN DATA -->
用于非选定节点的前景颜色。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.backgroundSelectionColor
<!-- END KEY -->
<!-- BEGIN DATA -->
选定节点时用于背景的颜色。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.backgroundNonSelectionColor
<!-- END KEY -->
<!-- BEGIN DATA -->
不选定节点时用于背景的颜色。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.borderSelectionColor
<!-- END KEY -->
<!-- BEGIN DATA -->
节点具有焦点时，用于焦点指示符的颜色。
<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.JTree javax.swing.tree.DefaultTreeCellRenderer.tree
<!-- END KEY -->
<!-- BEGIN DATA -->
将渲染器绘入的最后一棵树。
<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean javax.swing.tree.DefaultTreeCellRenderer.drawsFocusBorderAroundIcon
<!-- END KEY -->
<!-- BEGIN DATA -->
如果也绘制图标周围的焦点边框，则为 true。
<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean javax.swing.tree.DefaultTreeCellRenderer.drawDashedFocusIndicator
<!-- END KEY -->
<!-- BEGIN DATA -->
如果为 true，则根据焦点指示符绘制虚线。
<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.treeBGColor
<!-- END KEY -->
<!-- BEGIN DATA -->
树的背景色。

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.focusBGColor
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制焦点指示符所使用的颜色，它由背景色确定。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.DefaultTreeCellRenderer()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 DefaultTreeCellRenderer 的新实例。将对齐方式设置为左对齐。图标和文本色由 UIManager 确定。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.getDefaultOpenIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回默认图标，对于当前的 laf，它用于表示扩展的非叶节点。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.getDefaultClosedIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回默认图标，对于当前的 laf，它用于表示没有扩展的非叶节点。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.getDefaultLeafIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回默认图标，对于当前的 laf，它用于表示叶节点。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.setOpenIcon(Icon newIcon)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于表示扩展的非叶节点的图标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.getOpenIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于表示扩展的非叶节点的图标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.setClosedIcon(Icon newIcon)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于表示没有扩展的非叶节点的图标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.getClosedIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于表示没有扩展的非叶节点的图标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.setLeafIcon(Icon newIcon)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于表示叶节点的图标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.getLeafIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于表示叶节点的图标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.setTextSelectionColor(Color newColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置选定节点时绘制文本所使用的颜色。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.getTextSelectionColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回选定节点时绘制文本所使用的颜色。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.setTextNonSelectionColor(Color newColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置选定节点时绘制文本所使用的颜色。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.getTextNonSelectionColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回未选定节点时绘制文本所使用的颜色。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.setBackgroundSelectionColor(Color newColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置在选定节点的情况下背景所使用的颜色。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.getBackgroundSelectionColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在选定节点的情况下背景所使用的颜色。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.setBackgroundNonSelectionColor(Color newColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于非选定节点的背景色。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.getBackgroundNonSelectionColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于非选定节点的背景色。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.setBorderSelectionColor(Color newColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于边框的颜色。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.getBorderSelectionColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回绘制边框时所使用的颜色。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.setFont(Font font)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建子类，以便将 <code>FontUIResource</code> 映射为 null。如果 <code>font</code> 为 null 或 <code>FontUIResource</code>，则此操作可以使 JTree 的字体完全显示。另一方面，如果 <code>font</code> 为非 null，并且不是 <code>FontUIResource</code>，则该字体变成 <code>font</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font javax.swing.tree.DefaultTreeCellRenderer.getFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此组件的字体。
@return 此组件的字体；如果还没有为此组件设置字体，则返回其父级的字体

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.setBackground(Color color)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建子类，以便将 <code>ColorUIResource</code> 映射为 null。如果 <code>color</code> 为 null 或 <code>ColorUIResource</code>，则此操作可以使 JTree 的背景色完全显示。另一方面，如果 <code>color</code> 为非 null，并且不是 <code>ColorUIResource</code>，则该背景色变成 <code>color</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.tree.DefaultTreeCellRenderer.getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus)
<!-- END KEY -->
<!-- BEGIN DATA -->
配置基于传入组件的渲染器。使用 <code>convertValueToText</code> 向树传递消息，从而设置该值，最终对 <code>value</code> 调用 <code>toString</code>。基于选择设置前景色，基于 <code>leaf</code> 和 <code>expanded</code> 参数设置图标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.paint(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制值。基于选择填充背景。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.tree.DefaultTreeCellRenderer.getPreferredSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>JComponent.getPreferredSize</code>，以返回稍宽的首选大小值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.validate()
<!-- END KEY -->
<!-- BEGIN DATA -->
因为性能原因而被重写。有关更多信息，请参见<a href="#override">实现注意事项</a>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.invalidate()
<!-- END KEY -->
<!-- BEGIN DATA -->
因为性能原因而被重写。有关更多信息，请参见<a href="#override">实现注意事项</a>。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.revalidate()
<!-- END KEY -->
<!-- BEGIN DATA -->
因为性能原因而被重写。有关更多信息，请参见<a href="#override">实现注意事项</a>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.repaint(long tm, int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
因为性能原因而被重写。有关更多信息，请参见<a href="#override">实现注意事项</a>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.repaint(Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->
因为性能原因而被重写。有关更多信息，请参见<a href="#override">实现注意事项</a>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.repaint()
<!-- END KEY -->
<!-- BEGIN DATA -->
因为性能原因而被重写。有关更多信息，请参见<a href="#override">实现注意事项</a>。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String propertyName, Object oldValue, Object newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
因为性能原因而被重写。有关更多信息，请参见<a href="#override">实现注意事项</a>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String propertyName, byte oldValue, byte newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
因为性能原因而被重写。有关更多信息，请参见<a href="#override">实现注意事项</a>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String propertyName, char oldValue, char newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
因为性能原因而被重写。有关更多信息，请参见<a href="#override">实现注意事项</a>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String propertyName, short oldValue, short newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
因为性能原因而被重写。有关更多信息，请参见<a href="#override">实现注意事项</a>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String propertyName, int oldValue, int newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
因为性能原因而被重写。有关更多信息，请参见<a href="#override">实现注意事项</a>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String propertyName, long oldValue, long newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
因为性能原因而被重写。有关更多信息，请参见<a href="#override">实现注意事项</a>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String propertyName, float oldValue, float newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
因为性能原因而被重写。有关更多信息，请参见<a href="#override">实现注意事项</a>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String propertyName, double oldValue, double newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
因为性能原因而被重写。有关更多信息，请参见<a href="#override">实现注意事项</a>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String propertyName, boolean oldValue, boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
因为性能原因而被重写。有关更多信息，请参见<a href="#override">实现注意事项</a>。

<!-- END DATA -->
