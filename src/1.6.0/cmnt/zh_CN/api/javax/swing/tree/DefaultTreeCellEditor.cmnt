<!-- BEGIN KEY -->
public class javax.swing.tree.DefaultTreeCellEditor extends java.lang.Object implements java.awt.event.ActionListener, javax.swing.tree.TreeCellEditor, javax.swing.event.TreeSelectionListener
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>TreeCellEditor</code>。需要提供一个 <code>DefaultTreeCellRenderer</code> 实例，以便可以获取图标。您也可以提供一个根据 <code>DefaultTreeCellRenderer</code> 中的图标布局的 <code>TreeCellEditor</code>。如果不提供 <code>TreeCellEditor</code>，将使用 <code>TextField</code>。三次鼠标单击可启动编辑，或者一次单击之后，暂停一会，再单击并延迟 1200 毫秒也可启动编辑。
<p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前的序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@see javax.swing.JTree

@version 1.30 12/19/03
@author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeCellEditor javax.swing.tree.DefaultTreeCellEditor.realEditor
<!-- END KEY -->
<!-- BEGIN DATA -->
处理该编辑的编辑器。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.DefaultTreeCellRenderer javax.swing.tree.DefaultTreeCellEditor.renderer
<!-- END KEY -->
<!-- BEGIN DATA -->
用于从中获取边框和偏移量的呈现器。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Container javax.swing.tree.DefaultTreeCellEditor.editingContainer
<!-- END KEY -->
<!-- BEGIN DATA -->
将包含 <code>editorComponent</code> 的编辑容器。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient java.awt.Component javax.swing.tree.DefaultTreeCellEditor.editingComponent
<!-- END KEY -->
<!-- BEGIN DATA -->
用于编辑的组件，从 <code>editingContainer</code> 获取。 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.DefaultTreeCellEditor.canEdit
<!-- END KEY -->
<!-- BEGIN DATA -->
从 Java 2 平台 v1.4 开始，不应再使用此字段。如果要提供类似行为，您应直接重写 <code>isCellEditable</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient int javax.swing.tree.DefaultTreeCellEditor.offset
<!-- END KEY -->
<!-- BEGIN DATA -->
在编辑中使用。指定存放 <code>editingComponent</code> 的 x 位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.JTree javax.swing.tree.DefaultTreeCellEditor.tree
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>JTree</code> 实例侦听。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.tree.TreePath javax.swing.tree.DefaultTreeCellEditor.lastPath
<!-- END KEY -->
<!-- BEGIN DATA -->
选择的最后路径。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.Timer javax.swing.tree.DefaultTreeCellEditor.timer
<!-- END KEY -->
<!-- BEGIN DATA -->
在启动编辑会话之前使用。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient int javax.swing.tree.DefaultTreeCellEditor.lastRow
<!-- END KEY -->
<!-- BEGIN DATA -->
最后传入到 <code>getTreeCellEditorComponent</code> 的行。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Color javax.swing.tree.DefaultTreeCellEditor.borderSelectionColor
<!-- END KEY -->
<!-- BEGIN DATA -->
如果应绘制边框选择色，则为 true。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.Icon javax.swing.tree.DefaultTreeCellEditor.editingIcon
<!-- END KEY -->
<!-- BEGIN DATA -->
编辑时要使用的图标。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Font javax.swing.tree.DefaultTreeCellEditor.font
<!-- END KEY -->
<!-- BEGIN DATA -->
用以绘制的字体，<code>null</code> 指示将使用呈现器的字体。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.DefaultTreeCellEditor(JTree tree, DefaultTreeCellRenderer renderer)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定呈现器和默认编辑器，为 JTree 构造一个 <code>DefaultTreeCellEditor</code> 对象。（使用此构造方法进行常规编辑。）

@param tree     <code>JTree</code> 对象
@param renderer  <code>DefaultTreeCellRenderer</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.DefaultTreeCellEditor(JTree tree, DefaultTreeCellRenderer renderer, TreeCellEditor editor)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的呈现器和指定的编辑器，为 <code>JTree</code> 构造一个 <code>DefaultTreeCellEditor</code> 对象。（使用此构造方法进行特殊编辑。）

@param tree       <code>JTree</code> 对象
@param renderer  <code>DefaultTreeCellRenderer</code> 对象
@param editor    <code>TreeCellEditor</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellEditor.setBorderSelectionColor(Color newColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于边框的颜色。
@param newColor 新的边框颜色

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.tree.DefaultTreeCellEditor.getBorderSelectionColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回绘制边框的颜色。
@return 边框选择色

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellEditor.setFont(Font font)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置编辑使用的字体。<code>null</code> 指示应使用的呈现器字体。这将不会重写您在编辑器中设置的任何字体，接收者使用该编辑器进行实例化。如果传入编辑器的 <code>null</code>，则将创建采用此字体的默认编辑器。

@param font  编辑 <code>Font</code>
@see #getFont

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font javax.swing.tree.DefaultTreeCellEditor.getFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取用于编辑的字体。

@return 编辑 <code>Font</code>
@see #setFont

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.tree.DefaultTreeCellEditor.getTreeCellEditorComponent(JTree tree, Object value, boolean isSelected, boolean expanded, boolean leaf, int row)
<!-- END KEY -->
<!-- BEGIN DATA -->
配置编辑器。传递到 <code>realEditor</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.tree.DefaultTreeCellEditor.getCellEditorValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前正在编辑的值。
@return 当前正在编辑的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.DefaultTreeCellEditor.isCellEditable(EventObject event)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>realEditor</code> 将 true 返回到此消息，则会通知 <code>prepareForEditing</code>，并返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.DefaultTreeCellEditor.shouldSelectCell(EventObject event)
<!-- END KEY -->
<!-- BEGIN DATA -->
针对返回值，向 <code>realEditor</code> 发送消息。

<!-- END DATA -->
<SPAN style="font-variant:small-caps"></SPAN>
<!-- BEGIN KEY -->
public boolean javax.swing.tree.DefaultTreeCellEditor.stopCellEditing()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>realEditor</code> 允许编辑停止，则移除 <code>realEditor</code>，并返回 true，否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellEditor.cancelCellEditing()
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>cancelCellEditing</code> 发送到 <code>realEditor</code>，并从此实例移除它。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellEditor.addCellEditorListener(CellEditorListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加 <code>CellEditorListener</code>。
@param l 要添加的侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellEditor.removeCellEditorListener(CellEditorListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除以前添加的 <code>CellEditorListener</code>。
@param l 要移除的侦听器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.CellEditorListener[] javax.swing.tree.DefaultTreeCellEditor.getCellEditorListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回使用 addCellEditorListener() 添加到此 DefaultTreeCellEditor 中的所有 <code>CellEditorListener</code> 组成的数组。

@return 添加的所有 <code>CellEditorListener</code>，如果没有添加侦听器，则返回一个空数组
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellEditor.valueChanged(TreeSelectionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
重置 <code>lastPath</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellEditor.actionPerformed(ActionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
计时器被激发时传递消息，这将启动编辑会话。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeCellEditor.setTree(JTree newTree)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置当前正在为其编辑的树。这是添加选择侦听器所需要的。
@param newTree 要编辑的新树

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.DefaultTreeCellEditor.shouldStartEditingTimer(EventObject event)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>event</code> 为 <code>MouseEvent</code>，并且单击计数为 1，则返回 true。
@param event  正在研究的事件

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeCellEditor.startEditingTimer()
<!-- END KEY -->
<!-- BEGIN DATA -->
启动编辑计时器。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.DefaultTreeCellEditor.canEditImmediately(EventObject event)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>event</code> 为 <code>null</code>，或者它是一个单击计数 &gt; 2 的 <code>MouseEvent</code>，并且 <code>inHitRegion</code> 返回 true，则此方法返回 true。
@param event 正在研究的事件

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.DefaultTreeCellEditor.inHitRegion(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果传入位置是要启动编辑的有效鼠标位置，则返回 true。如果 <code>x</code> &lt;= 呈现器显示的图标和图标间距的宽度，则此实现返回 false。换句话说，如果用户单击呈现器显示的文本部分，则返回 true，否则返回 false。
@param x 点的 x 坐标
@param y 点的 y 坐标
@return 如果传入的位置是有效鼠标位置，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeCellEditor.prepareForEditing()
<!-- END KEY -->
<!-- BEGIN DATA -->
仅在编辑启动之前调用。将把 <code>editingComponent</code> 添加到 <code>editingContainer</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Container javax.swing.tree.DefaultTreeCellEditor.createContainer()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建管理 <code>editingComponent</code> 放置的容器。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeCellEditor javax.swing.tree.DefaultTreeCellEditor.createTreeCellEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果构造方法中没有提供 <code>TreeCellEditor</code>，则调用此方法。它返回一个 <code>TextField</code> 编辑器。
@return 新的 <code>TextField</code> 编辑器

<!-- END DATA -->
