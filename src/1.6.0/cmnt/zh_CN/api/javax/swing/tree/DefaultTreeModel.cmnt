<!-- BEGIN KEY -->
public class javax.swing.tree.DefaultTreeModel extends java.lang.Object implements java.io.Serializable, javax.swing.tree.TreeModel
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 TreeNodes 的简单树数据模型。有关使用 DefaultTreeModel 的更多信息和示例，请参阅 <em>The Java Tutorial</em> 中的 <a href="http://java.sun.com/docs/books/tutorial/uiswing/components/tree.html">How to Use Trees</a>。
 <p>
<strong>警告：</strong>此类的序列化对象将与以后的 Swing 版本不兼容。当前的序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.55 05/05/04
@author Rob Davis
@author Ray Ryan
@author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeNode javax.swing.tree.DefaultTreeModel.root
<!-- END KEY -->
<!-- BEGIN DATA -->
树的根。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.EventListenerList javax.swing.tree.DefaultTreeModel.listenerList
<!-- END KEY -->
<!-- BEGIN DATA -->
侦听器。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.DefaultTreeModel.asksAllowsChildren
<!-- END KEY -->
<!-- BEGIN DATA -->
确定 <code>isLeaf</code> 方法如何判断一个节点是否为叶节点。如果为 true，并且节点不允许有子节点，则该节点是叶节点。（如果它允许有子节点，则它不是叶节点，即使不存在任何子节点也是这样。）例如，让您区分文件系统中的<i>文件夹</i> 节点和<i>文件</i> 节点。
 <p>
如果此值为 false，则没有子节点的任何节点都是叶节点，并且任何节点都可以获取子节点。

@see TreeNode#getAllowsChildren
@see TreeModel#isLeaf
@see #setAsksAllowsChildren

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.DefaultTreeModel(TreeNode root)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建其中任何节点都可以有子节点的树。

@param root 作为树的根的 TreeNode 对象
@see #DefaultTreeModel(TreeNode, boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.DefaultTreeModel(TreeNode root, boolean asksAllowsChildren)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一棵树，指定某个节点是否可以有子节点，或者是否仅某些节点可以有子节点。

@param root 作为树的根的 TreeNode 对象
@param asksAllowsChildren 一个布尔值，如果任何节点都可以有子节点，则为 false，如果询问每个节点看是否有子节点，则为 true
@see #asksAllowsChildren

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.setAsksAllowsChildren(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过向 TreeNodes 询问 getAllowsChildren() 或 isLeaf()，设置是否测试无叶性。如果 newValue 为 true，则传递 getAllowsChildren()，否则传递 isLeaf()。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.DefaultTreeModel.asksAllowsChildren()
<!-- END KEY -->
<!-- BEGIN DATA -->
告知如何确定叶节点。

@return 如果只有不允许有子节点的节点是叶节点，则返回 true，如果没有子节点的节点（即使允许）是叶节点，则返回 false
@see #asksAllowsChildren

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.setRoot(TreeNode root)
<!-- END KEY -->
<!-- BEGIN DATA -->
将根设置为 <code>root</code>。<code>root</code> 为 null 暗示树不显示任何内容，并且是合法的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.tree.DefaultTreeModel.getRoot()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回树的根。仅当树没有节点时，返回 null。

@return  树的根

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.DefaultTreeModel.getIndexOfChild(Object parent, Object child)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回父节点中子节点的索引。如果父节点或子节点为 <code>null</code>，则返回 -1。
@param parent 从此数据源获取的树中的节点
@param child 用户需要的节点
@return 父节点中子节点的索引，如果父节点或子节点为 <code>null</code>，则返回 -1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.tree.DefaultTreeModel.getChild(Object parent, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回父节点的子节点数组中索引 <I>index</I> 处的 <I>parent</I> 的子节点。<I>parent</I> 必须是以前从此数据源获取的节点。如果 <i>index</i> 是 <i>parent</i> 的一个有效索引（即：<i>index</i> &gt;= 0 &amp;&amp; <i>index</i> &lt; getChildCount(<i>parent</i>)），则不应返回 null。

@param   parent  从此数据源获取的树中的节点
@return  索引 <I>index</I> 位置的 <I>parent</I> 的子节点

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.DefaultTreeModel.getChildCount(Object parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <I>parent</I> 的子节点数。如果该节点是叶节点，或者它没有子节点，则返回 0。<I>parent</I> 必须是以前从此数据源获取的节点。

@param   parent  从此数据源获取的树中的节点
@return  节点 <I>parent</I> 的子节点数

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.DefaultTreeModel.isLeaf(Object node)
<!-- END KEY -->
<!-- BEGIN DATA -->

返回指定的节点是否为叶节点。执行测试的方法取决于 <code>askAllowsChildren</code> 设置。

@param node 要检查的节点
@return 如果该节点是一个叶节点，则返回 true

@see #asksAllowsChildren
@see TreeModel#isLeaf

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.reload()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果已修改此模型依赖的 {@code TreeNode}，则调用此方法。该模型将通知其所有侦听器该模型已更改。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.valueForPathChanged(TreePath path, Object newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法设置由路径标识的 TreeNode 的用户对象，并发送更改的节点。如果使用 TreeModel 中的自定义用户对象，您将需要为该对象创建子类，并将更改的节点的用户对象设置为有意义的内容。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.insertNodeInto(MutableTreeNode newChild, MutableTreeNode parent, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
对它进行调用，以便在父节点的子节点中的 index 位置插入 newChild。然后，通知 nodesWereInserted 创建适当的事件。这是添加子节点的首选方法，因为它将创建适当的事件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.removeNodeFromParent(MutableTreeNode node)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知它从其父节点中移除节点。这将通知 nodesWereRemoved 创建适当事件。这是移除节点的首选方法，因为它可以为您处理事件的创建。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.nodeChanged(TreeNode node)
<!-- END KEY -->
<!-- BEGIN DATA -->
更改节点在树中的表示方式之后，调用此方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.reload(TreeNode node)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果已修改此模型依赖的 {@code TreeNode}，则调用此方法。该模型将通知其所有侦听器给定节点下面的模型已更改。

@param node 其下面的模型已更改的节点

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.nodesWereInserted(TreeNode node, int[] childIndices)
<!-- END KEY -->
<!-- BEGIN DATA -->
将某些 TreeNodes 插入节点之后，调用此方法。子索引应是新元素的索引，并且必须按升序排序。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.nodesWereRemoved(TreeNode node, int[] childIndices, java.lang.Object[] removedChildren)
<!-- END KEY -->
<!-- BEGIN DATA -->
从节点移除一些 TreeNodes 之后，调用此方法。childIndices 应是移除元素的索引，并且必须按升序排序。removedChildren 应是移除的子对象的数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.nodesChanged(TreeNode node, int[] childIndices)
<!-- END KEY -->
<!-- BEGIN DATA -->
更改由 childIndicies 标识的子对象在树中的表示方式之后，调用此方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.nodeStructureChanged(TreeNode node)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果完全更改了节点的子节点、子节点的子节点、依此类推，则调用此方法。调用此方法将发布 treeStructureChanged 事件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreeNode[] javax.swing.tree.DefaultTreeModel.getPathToRoot(TreeNode aNode)
<!-- END KEY -->
<!-- BEGIN DATA -->
向上构建节点的父节点一直到根节点（包括根节点），其中原始节点是返回数组中的最后一个元素。返回的数组长度给出了树中节点的深度。
 
@param aNode 获取其路径的 TreeNode

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeNode[] javax.swing.tree.DefaultTreeModel.getPathToRoot(TreeNode aNode, int depth)
<!-- END KEY -->
<!-- BEGIN DATA -->
向上构建节点的父节点一直到根节点（包括根节点），其中原始节点是返回数组中的最后一个元素。返回的数组长度给出了树中节点的深度。
 
@param aNode  要获取其路径的 TreeNode 
@param depth  提供对根（通过递归调用）执行的步骤数的 int，用于确定返回的数组的大小
@return 提供从根到指定节点的路径的 TreeNodes 数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.addTreeModelListener(TreeModelListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
为树更改后发布的 TreeModelEvent 添加侦听器。

@see     #removeTreeModelListener
@param   l       要添加的侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.removeTreeModelListener(TreeModelListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除以前使用 <B>addTreeModelListener()</B> 添加的侦听器。

@see     #addTreeModelListener
@param   l       要移除的侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.TreeModelListener[] javax.swing.tree.DefaultTreeModel.getTreeModelListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在此模型上注册的所有树模型侦听器组成的数组。

@return 此模型的所有 <code>TreeModelListener</code>，如果当前没有注册任何树模型侦听器，则返回一个空数组

@see #addTreeModelListener
@see #removeTreeModelListener

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeModel.fireTreeNodesChanged(Object source, java.lang.Object[] path, int[] childIndices, java.lang.Object[] children)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有需要此事件类型的通知的已注册侦听器。使用传入此触发方法的参数延后创建事件实例。

@param source 更改的节点
@param path 到根节点的路径
@param childIndices 更改的元素的索引
@param children 更改的元素
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeModel.fireTreeNodesInserted(Object source, java.lang.Object[] path, int[] childIndices, java.lang.Object[] children)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有需要此事件类型的通知的已注册侦听器。使用传入此触发方法的参数延后创建事件实例。

@param source 插入新元素的节点
@param path 到根节点的路径
@param childIndices 新元素的索引
@param children 新元素
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeModel.fireTreeNodesRemoved(Object source, java.lang.Object[] path, int[] childIndices, java.lang.Object[] children)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有需要此事件类型的通知的已注册侦听器。使用传入此触发方法的参数延后创建事件实例。

@param source 移除元素的节点
@param path 到根节点的路径
@param childIndices 移除元素的索引
@param children 移除的元素
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeModel.fireTreeStructureChanged(Object source, java.lang.Object[] path, int[] childIndices, java.lang.Object[] children)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有需要此事件类型的通知的已注册侦听器。使用传入此触发方法的参数延后创建事件实例。

@param source 从该节点开始树模型已更改的节点
@param path 到根节点的路径
@param childIndices 受影响的元素的索引
@param children 受影响的元素
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] javax.swing.tree.DefaultTreeModel.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前已在此模型上注册为 <code><em>Foo</em>Listener</code> 的所有对象组成的数组。<code><em>Foo</em>Listener</code> 是用 <code>add<em>Foo</em>Listener</code> 方法注册的。

 <p>

可以使用 class 字面值来指定 <code>listenerType</code> 参数，如 <code><em>Foo</em>Listener.class</code>。例如，可以使用下面的代码查询 <code>DefaultTreeModel</code> <code>m</code> 的树模型侦听器：

 <pre>TreeModelListener[] tmls = (TreeModelListener[])(m.getListeners(TreeModelListener.class));</pre>

如果不存在这样的侦听器，则此方法将返回一个空数组。

@param listenerType 所请求侦听器的类型；该参数应该指定一个从 <code>java.util.EventListener</code> 继承的接口
@return 在此容器上注册为 <code><em>Foo</em>Listener</code> 的所有对象的数组，如果没有添加这样的侦听器，则返回一个空数组
@exception ClassCastException 如果 <code>listenerType</code> 没有指定实现 <code>java.util.EventListener</code> 的类或接口

@see #getTreeModelListeners
 
@since 1.3

<!-- END DATA -->
