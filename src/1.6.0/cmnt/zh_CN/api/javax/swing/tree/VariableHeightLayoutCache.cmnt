<!-- BEGIN KEY -->
public class javax.swing.tree.VariableHeightLayoutCache extends javax.swing.tree.AbstractLayoutCache
<!-- END KEY -->
<!-- BEGIN DATA -->
注：在以后的版本中，此类将变得更加开放。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前的序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.21 05/05/04
@author Rob Davis
@author Ray Ryan
@author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.setModel(TreeModel newModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置将提供数据的 <code>TreeModel</code>。

@param newModel 将提供数据的 <code>TreeModel</code>
@beaninfo bound: true 描述：将提供数据的 TreeModel。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.setRootVisible(boolean rootVisible)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定 <code>TreeModel</code> 的根节点是否可见。

@param rootVisible 如果将显示树的根节点，则为 true
@see #rootVisible
@beaninfo bound:true 描述：TreeModel 的根节点是否可见。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.setRowHeight(int rowHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置每个单元格的高度。如果指定的值小于或等于零，则会查询当前单元格渲染器以获取每行高度。

@param rowHeight 每个单元格的高度（以像素为单位）
@beaninfo bound:true 描述：每个单元格的高度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.setNodeDimensions(AbstractLayoutCache.NodeDimensions nd)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置负责绘制树中节点的渲染器。
@param nd 渲染器

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.setExpandedState(TreePath path, boolean isExpanded)
<!-- END KEY -->
<!-- BEGIN DATA -->
将路径 <code>path</code> 的扩展状态标记为 <code>isExpanded</code>。
@param path 相关的 <code>TreePath</code>
@param isExpanded 如果应扩展路径，则为 true，否则为 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.VariableHeightLayoutCache.getExpandedState(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果路径已扩展，并且可见，则返回 true。
@return 如果路径已扩展，并且可见，则返回 true，否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.tree.VariableHeightLayoutCache.getBounds(TreePath path, Rectangle placeIn)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>Rectangle</code>，它包围在其中绘制 <code>path</code> 标识的项的标签部分。

@param path  要绘制的路径
@param placeIn 矩形的边界
@return 矩形的边界，如果无法确认该节点，则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.tree.VariableHeightLayoutCache.getPathForRow(int row)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>row</code> 的路径。如果 <code>row</code> 不可见，则返回 <code>null</code>。

@param row 相关的位置
@return <code>row</code> 的路径，如果 <code>row</code> 不可见，则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.VariableHeightLayoutCache.getRowForPath(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回路径中标识的最后一项在其中可见的行。如果路径中任何元素当前不可见，则返回 -1。
 
@param path 相关的 <code>TreePath</code>
@return 路径中的最后一项在其中可见的行

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.VariableHeightLayoutCache.getRowCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回可见的行数。
@return 可见的行数

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.invalidatePathBounds(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
指示 <code>LayoutCache</code> <code>path</code> 的边界无效，需要更新。

@param path 现在无效的 <code>TreePath</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.VariableHeightLayoutCache.getPreferredHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回首选高度。
@return 首选高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.VariableHeightLayoutCache.getPreferredWidth(Rectangle bounds)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>visibleRegion</code> 中区域的首选宽度和高度。

@param bounds  被查询的区域

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.tree.VariableHeightLayoutCache.getPathClosestTo(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最接近 x,y 的节点的路径。如果当前没有任何可见的内容，则返回 <code>null</code>，否则，始终返回一个有效路径。如果需要测试返回的对象是否正好位于 x, y，您应获取返回路径的边界，并根据它测试 x, y。

@param x  x 坐标
@param y  y 坐标
@return 最接近 x,y 的节点的路径

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<javax.swing.tree.TreePath> javax.swing.tree.VariableHeightLayoutCache.getVisiblePathsFrom(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从传入位置开始的可见路径的增量的 <code>Enumerator</code>。该枚举的排序基于路径的显示方式。

@param path <code>TreePath</code> 的起始位置
@return 表示可见路径的增量的 <code>Enumerator</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.VariableHeightLayoutCache.getVisibleChildCount(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>path</code> 的可见子路径数。
@return <code>path</code> 的可见子路径数

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.invalidateSizes()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知 <code>TreeState</code> 需要重新计算它引用的所有大小。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.VariableHeightLayoutCache.isExpanded(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前扩展了 <code>path</code> 标识的值，则返回 true。
@return 如果当前扩展了 <code>path</code> 标识的值，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.treeNodesChanged(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
按某种方式更改节点（或兄弟节点集）后进行调用。没有更改节点在树中的位置，也没有改变他们的子数组，但是其他的属性已更改，并且可能影响表示形式。示例：文件的名称已更改，但是它在文件系统中的位置不变。

<p><code>e.path</code> 返回已更改节点的父节点的路径。

<p><code>e.childIndices</code> 返回已更改节点的索引。

@param e 相关的 <code>TreeModelEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.treeNodesInserted(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将节点插入树后进行调用。

<p><code>e.path</code> 返回新节点的父节点。
<p><code>e.childIndices</code> 按升序返回新节点的索引。

@param e 相关的 <code>TreeModelEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.treeNodesRemoved(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将节点从树删除后进行调用。注意，如果从树移除子树，则对于移除的子树的根而言，此方法仅调用一次，对于移除的每个兄弟子树集而言，则不是一次。

<p><code>e.path</code> 返回删除节点的前一个父节点。

<p><code>e.childIndices</code> 返回节点按升序删除之前具有的索引。

@param e 相关的 <code>TreeModelEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.treeStructureChanged(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
树彻底更改给定节点以下的结构之后进行调用。如果 <code>e.getPath</code> 返回的路径长度为一，并且第一个元素不标识当前根节点，则第一个元素应成为树的新根。

<p><code>e.path</code> 保持节点的路径。
<p><code>e.childIndices</code> 返回 <code>null</code>。

@param e 相关的 <code>TreeModelEvent</code>

<!-- END DATA -->
