<!-- BEGIN KEY -->
public interface javax.swing.tree.TreeModel
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>JTree</code> 所使用的模型。
 <p>
<code>JTree</code> 及其相关类大量使用了 <code>TreePath</code>，以标识 <code>TreeModel</code> 中的节点。如果 <code>TreeModel</code> 返回相同的对象（使用 <code>equals</code> 比较同一父节点下的两个不同索引的节点），那么产生的 <code>TreePath</code> 对象也被认为是相等的。某些实现可以假定，如果两个 <code>TreePath</code> 相等，则它们标识的节点也相等。如果不能满足此条件，则可能导致绘制问题和其他奇怪的问题。换句话说，如果对给定父节点调用 <code>getChild</code> 返回相同的 Object（由 <code>equals</code> 确定），则可能出现问题，建议您不要执行此操作。
 <p>
类似地，<code>JTree</code> 及其相关类将 <code>TreePath</code> 置于 <code>Map</code> 中。因此，如果两次请求一个节点，则其返回值必须相等（使用 <code>equals</code> 方法）并且具有相同的 <code>hashCode</code>。
 <p>
有关树模型的更多信息（包括自定义实现的示例），请参阅 <em>The Java Tutorial</em> 中的 <a href="http://java.sun.com/docs/books/tutorial/uiswing/components/tree.html">How to Use Trees</a>。

@see TreePath
 
@version 1.23 12/19/03
@author Rob Davis
@author Ray Ryan

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.tree.TreeModel.getRoot()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回树的根。仅当树没有节点时，才返回 <code>null</code>。

@return  树的根

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.tree.TreeModel.getChild(Object parent, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回父节点的子数组中索引 <code>index</code> 位置的 <code>parent</code> 的子节点。<code>parent</code> 必须是以前从此数据源获取的节点。如果 <code>index</code> 是 <code>parent</code> 的一个有效索引（即：<code>index &gt;= 0 &amp;&amp; index &lt; getChildCount(parent</code>)），则此方法不应返回 <code>null</code>。

@param   parent  从此数据源获取的树中的节点
@return  索引 <code>index</code> 位置的 <code>parent</code> 的子节点

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.TreeModel.getChildCount(Object parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>parent</code> 的子节点数。如果该节点为叶节点，或者它没有子节点，则返回 0。<code>parent</code> 必须是以前从此数据源获取的节点。

@param   parent  从此数据源获取的树中的节点
@return  节点 <code>parent</code> 的子节点数

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.TreeModel.isLeaf(Object node)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>node</code> 为叶节点，则返回 <code>true</code>。即使 <code>node</code> 没有子节点，此方法也可能返回 <code>false</code>。例如，文件系统中的目录可以不包含任何文件；表示该目录的节点不是叶节点，但是它也没有任何子节点。

@param   node  从此数据源获取的树中的节点
@return  如果 <code>node</code> 为叶节点，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.TreeModel.valueForPathChanged(TreePath path, Object newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
用户已将 <code>path</code> 标识的项的值更改为 <code>newValue</code> 时，进行通知。如果 <code>newValue</code> 表示一个真实的新值，则该模型应发布一个 <code>treeNodesChanged</code> 事件。

@param path 用户已更改的节点的路径
@param newValue TreeCellEditor 的新值

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.TreeModel.getIndexOfChild(Object parent, Object child)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回父节点中子节点的索引。如果 <code>parent</code> 或 <code>child</code> 为 <code>null</code>，则返回 -1。如果 <code>parent</code> 或 <code>child</code> 不属于此树模型，则返回 -1。

@param parent 从此数据源获取的树中的节点
@param child 相关的节点
@return 父节点中子节点的索引，如果 <code>child</code> 或 <code>parent</code> 为 <code>null</code>，或不属于此树模型，则返回 -1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.TreeModel.addTreeModelListener(TreeModelListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
为树更改后发布的 <code>TreeModelEvent</code> 添加侦听器。

@param   l   要添加的侦听器
@see     #removeTreeModelListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.TreeModel.removeTreeModelListener(TreeModelListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除以前通过 <code>addTreeModelListener</code> 添加的侦听器。

@see     #addTreeModelListener
@param   l       要移除的侦听器

<!-- END DATA -->
