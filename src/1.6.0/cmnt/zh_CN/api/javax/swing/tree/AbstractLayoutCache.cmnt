<!-- BEGIN KEY -->
public abstract class javax.swing.tree.AbstractLayoutCache extends java.lang.Object implements javax.swing.tree.RowMapper
<!-- END KEY -->
<!-- BEGIN DATA -->
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前的序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.17 05/05/04
@author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.AbstractLayoutCache.NodeDimensions javax.swing.tree.AbstractLayoutCache.nodeDimensions
<!-- END KEY -->
<!-- BEGIN DATA -->
负责获取节点大小的对象。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeModel javax.swing.tree.AbstractLayoutCache.treeModel
<!-- END KEY -->
<!-- BEGIN DATA -->
提供信息的模型。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeSelectionModel javax.swing.tree.AbstractLayoutCache.treeSelectionModel
<!-- END KEY -->
<!-- BEGIN DATA -->
选择模型。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.AbstractLayoutCache.rootVisible
<!-- END KEY -->
<!-- BEGIN DATA -->
如果显示根节点，则为 True，如果其子节点是最高可视节点，则为 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.tree.AbstractLayoutCache.rowHeight
<!-- END KEY -->
<!-- BEGIN DATA -->
每行的高度。如果高度 &lt;= 0，则使用 renderer 来确定每行高度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.AbstractLayoutCache.setNodeDimensions(AbstractLayoutCache.NodeDimensions nd)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置负责绘制树中节点的 renderer，因此，它还负责计算各个节点的尺寸。

@param nd  <code>NodeDimensions</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.AbstractLayoutCache.NodeDimensions javax.swing.tree.AbstractLayoutCache.getNodeDimensions()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回呈现树中节点的对象，它负责计算各个节点的尺寸。

@return  <code>NodeDimensions</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.AbstractLayoutCache.setModel(TreeModel newModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置将提供数据的 <code>TreeModel</code>。

@param newModel 将提供数据的 <code>TreeModel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreeModel javax.swing.tree.AbstractLayoutCache.getModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回要提供数据的 <code>TreeModel</code>。

@return 要提供数据的 <code>TreeModel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.AbstractLayoutCache.setRootVisible(boolean rootVisible)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定 <code>TreeModel</code> 的根节点是否可视。

@param rootVisible 如果要显示树的根节点，则为 true
@see #rootVisible
@beaninfo bound: true 描述：TreeModel 的根节点是否可视。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.AbstractLayoutCache.isRootVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果显示树的根节点，则返回 true。

@return 如果显示树的根节点，则返回 true
@see #rootVisible

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.AbstractLayoutCache.setRowHeight(int rowHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置每个单元的高度。如果指定值小于或等于零，则查询当前单元 renderer，以获取每行高度。

@param rowHeight 每个单元的高度（以像素为单位）
@beaninfo bound: true description: The height of each cell.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.AbstractLayoutCache.getRowHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回每行高度。如果返回值小于或等于 0，则每行的高度由 renderer 确定。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.AbstractLayoutCache.setSelectionModel(TreeSelectionModel newLSM)
<!-- END KEY -->
<!-- BEGIN DATA -->
将用于管理选择的 <code>TreeSelectionModel</code> 设置为新的 LSM。

@param newLSM  新的 <code>TreeSelectionModel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreeSelectionModel javax.swing.tree.AbstractLayoutCache.getSelectionModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于维护该选择的模型。

@return <code>treeSelectionModel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.AbstractLayoutCache.getPreferredHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回首选高度。

@return 首选高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.AbstractLayoutCache.getPreferredWidth(Rectangle bounds)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回传入区域的首选宽度。该区域由最接近 <code>(bounds.x, bounds.y)</code> 的路径定义，并在 <code>bounds.height + bounds.y</code> 结束。如果 <code>bounds</code> 为 <code>null</code>，则返回所有节点的首选宽度（这可能是开销很大的计算）。

@param bounds 被查询的区域
@return 传入区域的首选宽度

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.swing.tree.AbstractLayoutCache.isExpanded(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前扩展了由行标识的值，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Rectangle javax.swing.tree.AbstractLayoutCache.getBounds(TreePath path, Rectangle placeIn)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个矩形，该矩形给出了绘制路径所需的 bounds。

@param path     指定节点的 <code>TreePath</code>
@param placeIn  提供可用空间的 <code>Rectangle</code> 对象
@return 指定要使用的空间的 <code>Rectangle</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.tree.TreePath javax.swing.tree.AbstractLayoutCache.getPathForRow(int row)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回传入行的路径。如果该行不可视，则返回 <code>null</code>。

@param row  查询的行
@return 给定的行的 <code>TreePath</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.tree.AbstractLayoutCache.getRowForPath(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回其路径中标识的最后一项可视的行。如果路径中任何元素当前不可视，则返回 -1。

@param path 查询的 <code>TreePath</code>
@return 路径中最后一项可视的行，如果路径中任何元素当前不可视，则返回 -1

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.tree.TreePath javax.swing.tree.AbstractLayoutCache.getPathClosestTo(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最接近 x,y 节点的路径。如果当前不存在任何可视内容，则返回 <code>null</code>，否则，始终返回一个有效路径。如果需要测试返回的对象是否正好位于 x, y，您应获取返回路径的 bounds，并根据它测试 x, y。

@param x 所需位置的水平组件
@param y 所需位置的垂直组件
@return 最接近指定点的 <code>TreePath</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Enumeration<javax.swing.tree.TreePath> javax.swing.tree.AbstractLayoutCache.getVisiblePathsFrom(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>Enumerator</code>，它列举从传入位置开始的可视路径的增量。该枚举的排序取决于路径显示的方式。如果所返回枚举的第一个元素是可视的，则它是路径，如果第一个元素是不可视的，将返回 <code>null</code>。

@param path 枚举的起始位置
@return 在所需位置开始的 <code>Enumerator</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.tree.AbstractLayoutCache.getVisibleChildCount(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回行的可视子节点数。
 
@param path  正被查询的路径
@return 指定路径的可视子节点数

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.tree.AbstractLayoutCache.setExpandedState(TreePath path, boolean isExpanded)
<!-- END KEY -->
<!-- BEGIN DATA -->
将路径 <code>path</code> 的已扩展状态标记为 <code>isExpanded</code>。

@param path  正在被扩展或折叠的路径
@param isExpanded 如果应该扩展路径，则为 true，否则为 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.swing.tree.AbstractLayoutCache.getExpandedState(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果路径已扩展并且可视，则返回 true。

@param path  正在被查询的路径
@return 如果路径已扩展并且可视，则返回 true，否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.tree.AbstractLayoutCache.getRowCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
显示的行数。
 
@return 显示的行数

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.tree.AbstractLayoutCache.invalidateSizes()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知 <code>TreeState</code> 需要重新计算它引用的所有大小。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.tree.AbstractLayoutCache.invalidatePathBounds(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
指示 <code>LayoutCache</code>，<code>path</code> 的边界无效，需要进行更新。

@param path 正在被更新的路径

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.tree.AbstractLayoutCache.treeNodesChanged(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
在某个节点（或一组兄弟节点）以某种方式更改后进行调用。节点没有更改在树中的位置，也没有改变他们的子节点的数组，但是其他属性已更改，并且可能影响表示形式。示例：文件的名称已更改，但是它仍然位于文件系统中的同一位置。</p>

<p>e.path() 返回已更改节点的父节点的路径。</p>

<p>e.childIndices() 返回更改节点的索引。</p>

@param e  <code>TreeModelEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.tree.AbstractLayoutCache.treeNodesInserted(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>将节点插入树之后进行调用。</p>

<p>e.path() 返回新节点的父节点</p>
<p>e.childIndices() 按升序返回新节点的索引。</p>

@param e  <code>TreeModelEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.tree.AbstractLayoutCache.treeNodesRemoved(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>将节点从树移除之后进行调用。注意，如果从该树移除子树，则对于移除的子树的根而言，此方法仅调用一次，而对于移除的每个兄弟子树集而言，则不是一次。</p>

<p>e.path() 返回节点在删除之前的父节点。</p>

<p>e.childIndices() 返回节点按升序删除之前的索引。</p>

@param e <code>TreeModelEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.tree.AbstractLayoutCache.treeStructureChanged(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>树彻底更改给定节点以下的结构之后进行调用。如果 <code>e.getPath()</code> 返回的路径长度为一，并且第一个元素不标识当前的根节点，则第一个元素应成为树的新根。</p>

<p>e.path() 保持节点的路径。</p>
<p>e.childIndices() 返回 null。</p>

@param e <code>TreeModelEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] javax.swing.tree.AbstractLayoutCache.getRowsForPaths(javax.swing.tree.TreePath[] paths)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在其中显示 <code>path</code> 中 <code>TreePath</code> 实例的行。此方法应返回与传入数组长度相同的数组，如果 <code>path</code> 中的某个 <code>TreePaths</code> 无效，则应将它在该数组中的条目设置为 -1。

@param paths 正被查询的 <code>TreePath</code> 的数组
@return 传入的同一长度的数组，包含在其中显示每个 <code>TreePath</code> 的每个相应行；如果 <code>paths</code> 为 <code>null</code>，则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.tree.AbstractLayoutCache.getNodeDimensions(Object value, int row, int depth, boolean expanded, Rectangle placeIn)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回通过 <code>placeIn</code> 中的引用，表示 <code>value</code> 所需的大小。如果 <code>inPlace</code> 为 <code>null</code>，则应返回新创建的 <code>Rectangle</code>，否则将该值放置在 <code>inPlace</code> 中，并返回它。如果不存在 renderer，这将返回 <code>null</code>。

@param value 要表示的 <code>value</code>
@param row  查询的行
@param depth 行的深度
@param expanded 如果行已扩展，则为 true，否则为 false
@param placeIn  包含表示 <code>value</code> 所需大小的 <code>Rectangle</code>
@return 包含节点尺寸的 <code>Rectangle</code>，如果节点没有尺寸，则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.AbstractLayoutCache.isFixedRowHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果每行的高度为固定大小，则返回 true。

<!-- END DATA -->
