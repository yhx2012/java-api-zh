<!-- BEGIN KEY -->
public class javax.swing.JColorChooser extends javax.swing.JComponent implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>JColorChooser</code> 提供一个用于允许用户操作和选择颜色的控制器窗格。有关使用颜色选取器的信息，请参阅 <em>The Java Tutorial</em> 中的 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/components/colorchooser.html">How to Use Color Choosers</a> 一节。

 <p>

此类提供三个级别的 API：
 <ol>
<li>显示有模式颜色选取器对话框并返回用户所选颜色的静态便捷方法。
<li>创建颜色选取器对话框的静态便捷方法，可以指定当用户按下其中一个对话框按钮时要调用的 <code>ActionListener</code>。
<li>能直接创建 <code>JColorChooser</code> 窗格实例（在任何容器中）。可以添加 <code>PropertyChange</code> 侦听器以检测当前&ldquo;颜色&rdquo;属性何时更改。
 </ol>
 <p>
 <strong>警告：</strong> Swing 不是线程安全的。有关更多信息，请参阅 <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@beaninfo attribute: isContainer false description: A component that supports selecting a Color.

@version 1.47 12/19/03
@author James Gosling
@author Amy Fowler
@author Steve Wilson

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JColorChooser.SELECTION_MODEL_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
选择模型属性名。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JColorChooser.PREVIEW_PANEL_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
预览面板属性名。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JColorChooser.CHOOSER_PANELS_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
chooserPanel 数组属性名。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JColorChooser()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建初始颜色为白色的颜色选取器窗格。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JColorChooser(Color initialColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定初始颜色的颜色选取器窗格。

@param initialColor 选取器中的初始颜色设置

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JColorChooser(ColorSelectionModel model)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定 <code>ColorSelectionModel</code> 颜色选取器窗格。

@param model 要使用的 <code>ColorSelectionModel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Color javax.swing.JColorChooser.showDialog(Component component, String title, Color initialColor) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
显示有模式的颜色选取器，在隐藏对话框之前一直阻塞。如果用户按下 &quot;OK&quot; 按钮，则此方法隐藏/释放对话框并返回所选颜色。如果用户按下 &quot;Cancel&quot; 按钮或者在没有按 &quot;OK&quot; 的情况下关闭对话框，则此方法将隐藏/释放对话框并返回 <code>null</code>。

@param component    对话框的父 <code>Component</code>
@param title        包含对话框标题的 String
@param initialColor 显示颜色选取器时的初始 Color 设置
@return 所选颜色；如果用户退出，则返回 <code>null</code>
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.JDialog javax.swing.JColorChooser.createDialog(Component c, String title, boolean modal, JColorChooser chooserPane, ActionListener okListener, ActionListener cancelListener) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回包含指定 <code>ColorChooser</code> 窗格及 &quot;OK&quot;、&quot;Cancel&quot; 和 &quot;Reset&quot; 按钮的新对话框。如果按下 &quot;OK&quot; 或 &quot;Cancel&quot; 按钮，则对话框自动隐藏（但未释放）。如果按下 &quot;Reset&quot; 按钮，则将颜色选取器的颜色重置为上一次在对话框上调用 <code>show</code> 时设置的颜色，并且对话框仍然显示。

@param c              对话框的父组件
@param title          对话框的标题
@param modal          一个 boolean,为 true 时，在关闭对话框之前，程序的剩余部分将一直处于非激活状态。
@param chooserPane    要置于对话框中的颜色选取器
@param okListener     按下 &quot;OK&quot; 时调用的 ActionListener
@param cancelListener 按下 &quot;Cancel&quot; 时调用的 ActionListener
@return 包含颜色选取器窗格的新对话框
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.ColorChooserUI javax.swing.JColorChooser.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回呈现此组件的 L&F 对象。

@return 呈现此组件的 <code>ColorChooserUI</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JColorChooser.setUI(ColorChooserUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置呈现此组件的 L&F 对象。

@param ui  <code>ColorChooserUI</code> L&F 对象
@see UIDefaults#getUI

@beaninfo bound: true hidden:true description: The UI object that implements the color chooser's LookAndFeel.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JColorChooser.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>UIManager</code> 发出的关于 L&F 已更改的通知。根据 <code>UIManager</code> 的最新通知替换当前的 UI 对象。

@see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JColorChooser.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回呈现此组件的 L&F 类的名称。

@return 字符串 &quot;ColorChooserUI&quot;
@see JComponent#getUIClassID
@see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.JColorChooser.getColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取颜色选取器的当前颜色值。默认情况下，此操作委托给模型。

@return 颜色选取器的当前颜色值

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JColorChooser.setColor(Color color)
<!-- END KEY -->
<!-- BEGIN DATA -->
将颜色选取器的当前颜色设置为指定颜色。<code>ColorSelectionModel</code> 将激发 <code>ChangeEvent</code>
@param color 要在颜色选取器中设置的颜色
@see JComponent#addPropertyChangeListener

@beaninfo bound: false hidden: false description: The current color the chooser is to display.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JColorChooser.setColor(int r, int g, int b)
<!-- END KEY -->
<!-- BEGIN DATA -->
将颜色选取器的当前颜色设置为指定的 RGB 颜色。注意，红色、绿色和蓝色的值应该介于数字 0 和 255 之间（包括两者）。

@param r   指定 Red 量的 int
@param g   指定 Green 量的 int 
@param b   指定 Blue 量的 int
@exception IllegalArgumentException 如果 r,g,b 值超出范围
@see java.awt.Color

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JColorChooser.setColor(int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将颜色选取器的当前颜色设置为指定颜色。

@param c 在选取器中设置当前颜色的整数值，其中 8 个低位指定 Blue 值，接下来的 8 个位指定 Green 值，再往上的 8 个位指定 Red 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JColorChooser.setDragEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>dragEnabled</code> 属性，该属性必须为 <code>true</code> 才能启用对此组件的自动拖动处理（拖放操作的第一部分）。必须将 <code>transferHandler</code> 属性设置为非 <code>null</code> 值，拖动才有效。<code>dragEnabled</code> 属性的默认值为 <code>false</code>。

 <p>

启用自动拖动处理时，只要用户在预览面板上按下鼠标按钮，大多数外观就开始拖放操作了。有些外观可能不支持自动拖放；它们将忽略此属性。对于这些外观，可通过修改组件以直接调用 <code>TransferHandler</code> 的 <code>exportAsDrag</code> 方法来处理该问题。

@param b 作为 <code>dragEnabled</code> 属性设置目标的值
@exception HeadlessException 如果 <code>b</code> 为 <code>true</code> 并且 <code>GraphicsEnvironment.isHeadless()</code> 返回 <code>true</code>

@since 1.4

@see java.awt.GraphicsEnvironment#isHeadless
@see #getDragEnabled
@see #setTransferHandler
@see TransferHandler

@beaninfo description: Determines whether automatic drag handling is enabled. bound:false

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JColorChooser.getDragEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>dragEnabled</code> 属性的值。

@return <code>dragEnabled</code> 属性的值
@see #setDragEnabled
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JColorChooser.setPreviewPanel(JComponent preview)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置当前预览面板。此操作将为名为 &quot;previewPanel&quot; 的属性激发 <code>PropertyChangeEvent</code>。

@param preview 显示当前颜色的 <code>JComponent</code>
@see JComponent#addPropertyChangeListener

@beaninfo bound: true hidden: true description: The UI component which displays the current color.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JComponent javax.swing.JColorChooser.getPreviewPanel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回显示选取颜色的预览面板。

@return <code>JComponent</code> 对象，即预览面板

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JColorChooser.addChooserPanel(AbstractColorChooserPanel panel)
<!-- END KEY -->
<!-- BEGIN DATA -->
将颜色选取器面板添加到颜色选取器。

@param panel 要添加的 <code>AbstractColorChooserPanel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.colorchooser.AbstractColorChooserPanel javax.swing.JColorChooser.removeChooserPanel(AbstractColorChooserPanel panel)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定的 Color Panel。

@param panel   要移除的指定面板的字符串
@return 颜色面板
@exception IllegalArgumentException 如果面板不在已知选取器面板的列表中

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JColorChooser.setChooserPanels(javax.swing.colorchooser.AbstractColorChooserPanel[] panels)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定用于选取颜色值的 Color Panel。

@param panels  <code>AbstractColorChooserPanel</code> 对象的数组

@beaninfo bound: true hidden: true description: An array of different chooser types.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.colorchooser.AbstractColorChooserPanel[] javax.swing.JColorChooser.getChooserPanels()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定的颜色面板。

@return <code>AbstractColorChooserPanel</code> 对象的数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.colorchooser.ColorSelectionModel javax.swing.JColorChooser.getSelectionModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回处理颜色选择的数据模型。

@return <code>ColorSelectionModel</code> 对象 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JColorChooser.setSelectionModel(ColorSelectionModel newModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置包含所选颜色的模型。

@param newModel  新 <code>ColorSelectionModel</code> 对象

@beaninfo bound: true hidden: true description: The model which contains the currently selected color.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JColorChooser.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JColorChooser</code> 的字符串表示形式。此方法仅在进行调试时使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。
 
@return  此 <code>JColorChooser</code> 的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JColorChooser.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 JColorChooser 关联的 AccessibleContext。对于颜色选取器，AccessibleContext 采用 AccessibleJColorChooser 的形式。如有必要，可创建一个新的 AccessibleJColorChooser 实例。

@return 充当此 JColorChooser 的 AccessibleContext 的 AccessibleJColorChooser

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JColorChooser.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
有关 Swing 中序列化的更多信息，请参阅 <code>JComponent</code> 中的 <code>readObject</code> 和 <code>writeObject</code>。

<!-- END DATA -->
