<!-- BEGIN KEY -->
public class javax.swing.GroupLayout.SequentialGroup extends javax.swing.GroupLayout.Group
<!-- END KEY -->
<!-- BEGIN DATA -->
一个 {@code Group}，它按顺序一个接一个地确定其元素的位置和大小。此类没有公共构造方法，要创建 SequentialGroup，请使用 {@code createSequentialGroup} 方法。
 <p>
要沿按基线对齐的 {@code ParallelGroup} 的基线对齐 {@code SequentialGroup}，您需要指定使用 {@code SequentialGroup} 的哪些元素来确定基线。使用一个带 {@code boolean} 的 {@code add} 方法来指定用于计算基线的元素。用 {@code useAsBaseline} 为 {@code true} 值的 add 方法添加的最后一个元素将用于计算基线。

@see #createSequentialGroup
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup.addGroup(GroupLayout.Group group)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup.addGroup(boolean useAsBaseline, GroupLayout.Group group)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 {@code Group} 添加到此 {@code Group}。

@param group 要添加的 {@code Group}
@param useAsBaseline 指定的 {@code Group} 是否应该用于计算此 {@code Group} 的基线
@return 此 {@code Group}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup.addComponent(Component component)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup.addComponent(boolean useAsBaseline, Component component)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 {@code Component} 添加到此 {@code Group}。

@param useAsBaseline 指定的 {@code Component} 是否应该用于计算此 {@code Group} 的基线
@param component 要添加的 {@code Component}
@return 此 {@code Group}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup.addComponent(Component component, int min, int pref, int max)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup.addComponent(boolean useAsBaseline, Component component, int min, int pref, int max)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定大小将 {@code Component} 添加到此 {@code Group}。

@param useAsBaseline 指定的 {@code Component} 是否应该用于计算此 {@code Group} 的基线
@param component 要添加的 {@code Component}
@param min 最小大小或者 {@code DEFAULT_SIZE} 或 {@code PREFERRED_SIZE} 之一
@param pref 首选大小或者 {@code DEFAULT_SIZE} 或 {@code PREFERRED_SIZE} 之一
@param max 最大大小或者 {@code DEFAULT_SIZE} 或 {@code PREFERRED_SIZE} 之一
@return 此 {@code Group}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup.addGap(int size)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup.addGap(int min, int pref, int max)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup.addPreferredGap(JComponent comp1, JComponent comp2, LayoutStyle.ComponentPlacement type)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加一个表示两个组件之间首选间隙的元素。创建用来表示间隙的元素是不可调整大小的。

@param comp1 第一个组件
@param comp2 第二个组件
@param type 间隙的类型；由 {@code LayoutStyle} 定义的常量之一
@return 此 {@code SequentialGroup}
@throws IllegalArgumentException 如果 {@code type}、{@code comp1} 或 {@code comp2} 为 {@code null}
@see LayoutStyle

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup.addPreferredGap(JComponent comp1, JComponent comp2, LayoutStyle.ComponentPlacement type, int pref, int max)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加一个表示两个组件之间首选间隙的元素。

@param comp1 第一个组件
@param comp2 第二个组件
@param type 间隙的类型
@param pref 间隙的首选大小；{@code DEFAULT_SIZE} 或大于等于 0 的值
@param max 间隙的最大大小；{@code DEFAULT_SIZE}、{@code PREFERRED_SIZE} 或大于等于 0 的值
@return 此 {@code SequentialGroup}
@throws IllegalArgumentException 如果 {@code type}、{@code comp1} 或 {@code comp2} 为 {@code null}
@see LayoutStyle

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup.addPreferredGap(LayoutStyle.ComponentPlacement type)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加一个表示两个距离最近的组件之间首选间隙的元素。在布局过程中，找到相邻组件，并根据组件之间的首选间隙来设置添加间隙的大小。如果找不到相邻组件，则间隙的大小为 {@code 0}。
 <p>
创建用来表示间隙的元素是不可调整大小的。

@param type 间隙的类型；{@code LayoutStyle.ComponentPlacement.RELATED} 或 {@code LayoutStyle.ComponentPlacement.UNRELATED}
@return 此 {@code SequentialGroup}
@see LayoutStyle
@throws IllegalArgumentException 如果 {@code type} 不是 {@code LayoutStyle.ComponentPlacement.RELATED} 或 {@code LayoutStyle.ComponentPlacement.UNRELATED}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup.addPreferredGap(LayoutStyle.ComponentPlacement type, int pref, int max)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加一个表示两个距离最近的组件之间首选间隙的元素。在布局过程中，找到相邻元素，并根据相邻组件之间的首选间隙大小来设置此间隙的最小大小。如果找不到相邻组件，则最小大小被设置为 0。

@param type 间隙的类型；{@code LayoutStyle.ComponentPlacement.RELATED} 或 {@code LayoutStyle.ComponentPlacement.UNRELATED}
@param pref 间隙的首选大小；{@code DEFAULT_SIZE} 或大于等于 0 的值
@param max 间隙的最大大小；{@code DEFAULT_SIZE}、{@code PREFERRED_SIZE} 或大于等于 0 的值
@return 此 {@code SequentialGroup}
@throws IllegalArgumentException 如果 {@code type} 不是 {@code LayoutStyle.ComponentPlacement.RELATED} 或 {@code LayoutStyle.ComponentPlacement.UNRELATED}
@see LayoutStyle

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup.addContainerGap()
<!-- END KEY -->
<!-- BEGIN DATA -->
添加一个表示容器边缘和触到容器边框的组件之间首选间隙的元素。如果添加的间隙没有触到父容器的边缘，则此方法没有任何效果。
 <p>
创建用来表示间隙的元素是不可调整大小的。

@return 此 {@code SequentialGroup}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup.addContainerGap(int pref, int max)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定大小添加一个元素，它表示容器的一个边缘和下一个或前一个 {@code Component} 之间的首选间隙。如果下一个或前一个元素不是 {@code Component} 并且没有触到父容器的一个边缘，则此方法没有任何效果。

@param pref 首选大小；{@code DEFAULT_SIZE} 或大于等于 0 的值
@param max 最大大小；{@code DEFAULT_SIZE}、{@code PREFERRED_SIZE} 或大于等于 0 的值
@return 此 {@code SequentialGroup}

<!-- END DATA -->
