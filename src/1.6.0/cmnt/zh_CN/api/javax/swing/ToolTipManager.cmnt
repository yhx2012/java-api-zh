<!-- BEGIN KEY -->
public class javax.swing.ToolTipManager extends java.awt.event.MouseAdapter implements java.awt.event.MouseMotionListener
<!-- END KEY -->
<!-- BEGIN DATA -->
管理系统中的所有 <code>ToolTips</code>。
 <p>
ToolTipManager 包含众多属性，用于配置该工具提示需要多长时间显示出来，需要多长时间隐藏。考虑一个在不同的鼠标位置（如 JTree）有不同工具提示的组件。在鼠标移动到 JTree 中和具有有效工具提示的区域上时，该工具提示将在 <code>initialDelay</code> 毫秒后显示出来。在 <code>dismissDelay</code> 毫秒后，将隐藏该工具提示。如果鼠标在具有有效工具提示的区域上，并且当前能看到该工具提示，则在鼠标移动到没有有效工具提示的区域时，将隐藏该工具提示。如果鼠标接下来在 <code>reshowDelay</code> 毫秒内移回具有有效工具提示的区域，则将立即显示该工具提示，否则在 <code>initialDelay</code> 毫秒后将再次显示该工具提示。

@see JComponent#createToolTip
@version 1.70 01/16/04
@author Dave Moore
@author Rich Schiavi

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.setEnabled(boolean flag)
<!-- END KEY -->
<!-- BEGIN DATA -->
启用或禁用工具提示。

@param flag  要启用提示则为 true，否则为 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.ToolTipManager.isEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果启用该对象，则返回 true。

@return 如果启用该对象，则返回 true，否则，返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.setLightWeightPopupEnabled(boolean aFlag)
<!-- END KEY -->
<!-- BEGIN DATA -->
显示 <code>JToolTip</code> 时，该 <code>ToolTipManager</code> 会选择使用一个轻量级 <code>JPanel</code>（如果合适）。此方法允许您禁用该功能。如果应用程序混合轻量级组件和重量级组件，则必须真正禁用此功能。

@param aFlag 如果需要轻量级面板，则为 true，否则为 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.ToolTipManager.isLightWeightPopupEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果使用轻量级（所有 Java）<code>Tooltips</code>，则返回 true；如果使用重量级（本机同位体）<code>Tooltips</code>，则返回 false。

@return true 如果使用轻量级 <code>ToolTips</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.setInitialDelay(int milliseconds)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定初始延迟值。

@param milliseconds  （光标暂停之后）显示工具提示之前要延迟的毫秒数
@see #getInitialDelay

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ToolTipManager.getInitialDelay()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回初始延迟值。

@return 一个表示该初始延迟值的整数，以毫秒为单位
@see #setInitialDelay

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.setDismissDelay(int milliseconds)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定取消工具提示的延迟值。

@param milliseconds  取消工具提示之前要延迟的毫秒数
@see #getDismissDelay

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ToolTipManager.getDismissDelay()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回取消工具提示的延迟值。

@return 一个表示取消工具提示的延迟值的整数，以毫秒为单位
@see #setDismissDelay

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.setReshowDelay(int milliseconds)
<!-- END KEY -->
<!-- BEGIN DATA -->
在显示工具提示之前，用于指定用户必须等待 <code>initialDelay</code> 毫秒之前的时间。也就是说，如果隐藏工具提示，且用户在 <code>milliseconds</code> 毫秒内移动到同一个具有有效工具提示的组件，则立即显示该工具提示。否则，如果用户在 <code>milliseconds</code> 毫秒之后移动到具有有效工具提示的区域，则用户必须在再次显示该工具提示之前再等待 <code>initialDelay</code> 毫秒。

@param milliseconds 以毫秒为单位的时间
@see #getReshowDelay

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ToolTipManager.getReshowDelay()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回重新显示延迟属性。

@return 重新显示的延迟属性
@see #setReshowDelay

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.ToolTipManager javax.swing.ToolTipManager.sharedInstance()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回共享的 <code>ToolTipManager</code> 实例。

@return 共享的 <code>ToolTipManager</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.registerComponent(JComponent component)
<!-- END KEY -->
<!-- BEGIN DATA -->
注册一个工具提示管理组件。
 <p>
这将注册键绑定，以在仅当 <code>component</code> 具有焦点绑定时显示和隐藏工具提示文本。执行此操作，以使通常不是焦点遍历的组件（如 <code>JLabel</code>）不会因为调用此方法而进行焦点遍历。

@param component  要添加的 <code>JComponent</code> 对象
@see JComponent#isFocusTraversable

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.unregisterComponent(JComponent component)
<!-- END KEY -->
<!-- BEGIN DATA -->
从工具提示控件中移除一个组件。

@param component  要移除的 <code>JComponent</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.mouseEntered(MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
鼠标进入组件区域时调用。这确定是否应该显示该工具提示。

@param event  相关事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.mouseExited(MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
鼠标退出组件区域时调用。任何显示的工具提示都应该隐藏。

@param event  相关事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.mousePressed(MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
当按下鼠标时调用。任何工具提示显示都应该隐藏。

@param event  相关事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.mouseDragged(MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
按下和拖动鼠标时调用。不执行任何操作。

@param event  相关事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.mouseMoved(MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
移动鼠标时调用。确定是否应该显示工具提示。

@param event  相关事件

<!-- END DATA -->
