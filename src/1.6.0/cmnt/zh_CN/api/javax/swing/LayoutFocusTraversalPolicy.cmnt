<!-- BEGIN KEY -->
public class javax.swing.LayoutFocusTraversalPolicy extends javax.swing.SortingFocusTraversalPolicy implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 Component 的大小、位置和方向对其排序的 SortingFocusTraversalPolicy。根据 Component 的大小和位置，可以将其大致归类为行和列。对于水平方向的 Container，列的排列顺序是从左到右或从右到左，行的排列顺序是从顶端到底部。对于垂直方向的 Container，列的排列顺序是从顶端到底部，行的排列顺序是从左到右或从右到左。有关更多信息，请参见 <code>ComponentOrientation</code>。在完全遍历一行中的所有列之后才继续到下一行。

@version 1.10, 12/19/03
@author David Mendenhall

@see java.awt.ComponentOrientation
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.LayoutFocusTraversalPolicy()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 LayoutFocusTraversalPolicy。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.LayoutFocusTraversalPolicy.getComponentAfter(Container aContainer, Component aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回应在 aComponent 之后接收焦点的 Component。aContainer 必须是 aComponent 的焦点循环根。
 <p>
默认情况下，LayoutFocusTraversalPolicy 会隐式将焦点传输给下一个循环。也就是说，在进行正常焦点遍历期间，在焦点循环根后面遍历的 Component 将成为焦点循环根默认拥有焦点的 Component。可以使用 <code>setImplicitDownCycleTraversal</code> 方法禁用此行为。
 <p>
如果 aContainer 是<a href="../../java/awt/doc-files/FocusSpec.html#FocusTraversalPolicyProviders">焦点遍历策略提供者</a>，则总是将焦点传输到下一个循环。

@param aContainer aComponent 的焦点循环根，或焦点遍历策略提供者
@param aComponent aContainer 的子组件（可能是间接的），或 aContainer 自身
@return 应该接收 aComponent 之后的焦点的 Component，如果无法找到合适的 Component，则返回 null
@throws IllegalArgumentException 如果 aContainer 不是 aComponent 的焦点循环根或焦点遍历策略提供者，或者 aContainer 或 aComponent 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.LayoutFocusTraversalPolicy.getComponentBefore(Container aContainer, Component aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回应在 aComponent 之前接收焦点的 Component。aContainer 必须是 aComponent 的焦点循环根。
 <p>
默认情况下，LayoutFocusTraversalPolicy 会隐式将焦点传输给下一个循环。也就是说，在进行正常焦点遍历期间，在焦点循环根后面遍历的 Component 将成为焦点循环根默认拥有焦点的 Component。可以使用 <code>setImplicitDownCycleTraversal</code> 方法禁用此行为。
 <p>
如果 aContainer 是<a href="../../java/awt/doc-files/FocusSpec.html#FocusTraversalPolicyProviders">焦点遍历策略提供者</a>，则总是将焦点传输到下一个循环。

@param aContainer aComponent 的焦点循环根，或焦点遍历策略提供者
@param aComponent aContainer 的子组件（可能是间接的），或 aContainer 自身
@return 应该接收 aComponent 之前的焦点的 Component，如果无法找到合适的 Component，则返回 null
@throws IllegalArgumentException 如果 aContainer 不是 aComponent 的焦点循环根或焦点遍历策略提供者，或者 aContainer 或 aComponent 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.LayoutFocusTraversalPolicy.getFirstComponent(Container aContainer)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回遍历循环中的第一个 Component。在进行正向遍历时，可用此方法确定拥有焦点的下一个 Component。

@param aContainer 要返回其第一个 Component 的 aComponent 的焦点循环根，或焦点遍历策略提供者
@return aContainer 的遍历循环中的第一个 Component，如果无法找到合适的 Component，则返回 null
@throws IllegalArgumentException 如果 aContainer 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.LayoutFocusTraversalPolicy.getLastComponent(Container aContainer)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回遍历循环中的最后一个 Component。在进行反向遍历时，可用此方法确定拥有焦点的下一个 Component。

@param aContainer 要返回其最后一个 Component 的 aComponent 的焦点循环根，或焦点遍历策略提供者
@return aContainer 的遍历循环中的最后一个 Component，如果无法找到合适的 Component，则返回 null
@throws IllegalArgumentException 如果 aContainer 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.LayoutFocusTraversalPolicy.accept(Component aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->

确定是否可以接受选择指定的 <code>Component</code> 作为新的焦点所有者。此方法执行下列顺序的操作： 
 <ol>
<li>检查 <code>aComponent</code> 是否可见、可显示、已启用以及是否可获得焦点。如果这些属性中任何一个为 <code>false</code>，则此方法返回 <code>false</code>。
<li>如果 <code>aComponent</code> 是 <code>JTable</code> 的一个实例，则返回 <code>true</code>。  
<li>如果 <code>aComponent</code> 是 <code>JComboBox</code> 的一个实例，则返回 <code>aComponent.getUI().isFocusTraversable(aComponent)</code> 的值。
<li>如果 <code>aComponent</code> 是一个 <code>JComponent</code>，且具有一个既不为 <code>null</code> 也不为空的 <code>JComponent.WHEN_FOCUSED</code> <code>InputMap</code>，则返回 <code>true</code>。
<li>返回 <code>DefaultFocusTraversalPolicy.accept(aComponent)</code> 的值。
 </ol>
   
@param aComponent 将测试其是否适合作为焦点所有者的 <code>Component</code>
@see java.awt.Component#isVisible
@see java.awt.Component#isDisplayable
@see java.awt.Component#isEnabled
@see java.awt.Component#isFocusable
@see javax.swing.plaf.ComboBoxUI#isFocusTraversable
@see javax.swing.JComponent#getInputMap
@see java.awt.DefaultFocusTraversalPolicy#accept
@return 如果 <code>aComponent</code> 是作为焦点所有者的有效选择，则返回 <code>true</code>；否则返回 <code>false</code>

<!-- END DATA -->
