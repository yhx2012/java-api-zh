<!-- BEGIN KEY -->
public class javax.swing.JFileChooser extends javax.swing.JComponent implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>JFileChooser</code> 为用户选择文件提供了一种简单的机制。有关使用 <code>JFileChooser</code> 的更多信息，请参阅 <em>The Java Tutorial</em> 中的 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/components/filechooser.html">How to Use File Choosers</a> 一节。

 <p>

以下代码弹出一个针对用户主目录的文件选择器，其中只显示 .jpg 和 .gif 图像：
 <pre>
    JFileChooser chooser = new JFileChooser();
    FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "JPG & GIF Images", "jpg", "gif");
    chooser.setFileFilter(filter);
    int returnVal = chooser.showOpenDialog(parent);
    if(returnVal == JFileChooser.APPROVE_OPTION) {
       System.out.println("You chose to open this file: " +
            chooser.getSelectedFile().getName());
    }
 </pre>
 <p>
 <strong>警告：</strong>Swing 不是线程安全的。有关更多信息，请参阅 <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>。

@beaninfo attribute: isContainer false description: A component which allows for the interactive selection of a file.

@version 1.106 06/28/04
@author Jeff Dinkins

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JFileChooser.OPEN_DIALOG
<!-- END KEY -->
<!-- BEGIN DATA -->
指示 <code>JFileChooser</code> 支持 &quot;Open&quot; 文件操作的类型值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JFileChooser.SAVE_DIALOG
<!-- END KEY -->
<!-- BEGIN DATA -->
指示 <code>JFileChooser</code> 支持 &quot;Save&quot; 文件操作的类型值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JFileChooser.CUSTOM_DIALOG
<!-- END KEY -->
<!-- BEGIN DATA -->
指示 <code>JFileChooser</code> 支持特定于开发人员文件操作的类型值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JFileChooser.CANCEL_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
选择 cancel 后的返回该值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JFileChooser.APPROVE_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
选择确认（yes、ok）后返回该值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JFileChooser.ERROR_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
发生错误后返回该值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JFileChooser.FILES_ONLY
<!-- END KEY -->
<!-- BEGIN DATA -->
指示仅显示文件。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JFileChooser.DIRECTORIES_ONLY
<!-- END KEY -->
<!-- BEGIN DATA -->
指示仅显示目录。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JFileChooser.FILES_AND_DIRECTORIES
<!-- END KEY -->
<!-- BEGIN DATA -->
指示显示文件和目录。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.CANCEL_SELECTION
<!-- END KEY -->
<!-- BEGIN DATA -->
指示取消当前的选择。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.APPROVE_SELECTION
<!-- END KEY -->
<!-- BEGIN DATA -->
指示确认当前的选择（与按下 yes 或 ok 相同）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.APPROVE_BUTTON_TEXT_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识确认（yes、ok）按钮上的文本更改。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识用于确认（yes、ok）按钮的工具提示文本的更改。  

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识用于确认（yes、ok）按钮的助记符的更改。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
指示显示控制按钮。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.DIRECTORY_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识用户的目录更改。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.SELECTED_FILE_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识用户单个文件选择的更改。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.SELECTED_FILES_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识用户多个文件选择的更改。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.MULTI_SELECTION_ENABLED_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
允许选择多个文件。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.FILE_SYSTEM_VIEW_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
声明使用其他对象在系统上查找可用的驱动器。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.FILE_VIEW_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
声明使用其他对象检索文件信息。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.FILE_HIDING_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识在显示隐藏文件属性中的更改。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.FILE_FILTER_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
用户更改要显示的文件种类。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.FILE_SELECTION_MODE_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识在选择种类（选择单个、多个等等）方面的更改。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.ACCESSORY_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
声明正在使用不同的 accessory 组件（例如预览文件）。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识是否使用 AcceptAllFileFilter。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.DIALOG_TITLE_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识对话框标题的更改。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.DIALOG_TYPE_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识显示文件类型的更改（仅显示文件、仅显示目录或显示文件和目录）。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->

标识预定义文件过滤器列表的更改，用户可从该列表中进行选择。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFileChooser()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个指向用户默认目录的 <code>JFileChooser</code>。此默认目录取决于操作系统。在 Windows 上通常是&ldquo;我的文档&rdquo;，在 Unix 上是用户的主目录。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFileChooser(String currentDirectoryPath)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个使用给定路径的 <code>JFileChooser</code>。传入 <code>null</code> 字符串会导致文件选择器指向用户的默认目录。此默认目录取决于操作系统。在 Windows 上通常是&ldquo;我的文档&rdquo;，在 Unix 上是用户的主目录。

@param currentDirectoryPath  给出文件或目录路径的 <code>String</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFileChooser(File currentDirectory)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的 <code>File</code> 作为路径来构造一个 <code>JFileChooser</code>。传入 <code>null</code> 文件会导致文件选择器指向用户的默认目录。此默认目录取决于操作系统。在 Windows 上通常是&ldquo;我的文档&rdquo;，在 Unix 上是用户的主目录。

@param currentDirectory  指出文件或目录路径的 <code>File</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFileChooser(FileSystemView fsv)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的 <code>FileSystemView</code> 构造一个 <code>JFileChooser</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFileChooser(File currentDirectory, FileSystemView fsv)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的当前目录和 <code>FileSystemView</code> 构造一个 <code>JFileChooser</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFileChooser(String currentDirectoryPath, FileSystemView fsv)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的当前目录路径和 <code>FileSystemView</code> 构造一个 <code>JFileChooser</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JFileChooser.setup(FileSystemView view)
<!-- END KEY -->
<!-- BEGIN DATA -->
执行公共的构造方法初始化和设置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setDragEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>dragEnabled</code> 属性，要在此组件上启用自动拖动处理（drag 和 drop 的第一部分），此属性必须为 <code>true</code>。为了让该拖动完成所需的任务，需要将 <code>transferHandler</code> 属性设置为非 <code>null</code> 的值。<code>dragEnabled</code> 属性的默认值为 <code>false</code>。

 <p>

启用自动拖动处理后，每当用户在项上按下鼠标按键，然后将鼠标移动几个像素后，多数外观就开始拖放操作。因此将此属性设置为 <code>true</code> 对选择方式有一些影响。
 
 <p>
 
某些外观可能不支持自动拖放；它们会忽略此属性。通过修改组件以直接调用 <code>TransferHandler</code> 的 <code>exportAsDrag</code> 方法，从而在此外观下工作。

@param b 为 <code>dragEnabled</code> 属性设置的值
@exception HeadlessException 如果 <code>b</code> 为 <code>true</code> 并且 <code>GraphicsEnvironment.isHeadless()</code> 返回 <code>true</code>
@see java.awt.GraphicsEnvironment#isHeadless
@see #getDragEnabled
@see #setTransferHandler
@see TransferHandler
@since 1.4

@beaninfo description: determines whether automatic drag handling is enabled bound:false

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JFileChooser.getDragEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得 <code>dragEnabled</code> 属性的值。

@return  <code>dragEnabled</code> 属性的值
@see #setDragEnabled
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.File javax.swing.JFileChooser.getSelectedFile()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回选中的文件。可由程序员通过 <code>setFile</code> 或者通过用户操作（如在 UI 中键入文件名，或者从 UI 中的列表内选择文件）来进行此设置。
 
@see #setSelectedFile
@return 选中的文件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setSelectedFile(File file)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置选中的文件。如果该文件的父目录不是当前目录，则将当前目录更改为该文件的父目录。

@beaninfo preferred: true bound: true

@see #getSelectedFile

@param file 选中的文件 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.File[] javax.swing.JFileChooser.getSelectedFiles()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果将文件选择器设置为允许选择多个文件，则返回选中文件的列表。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setSelectedFiles(java.io.File[] selectedFiles)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果将文件选择器设置为允许选择多个文件，则设置选中文件的列表。

@beaninfo bound: true description: The list of selected files if the chooser is in multiple selection mode.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.File javax.swing.JFileChooser.getCurrentDirectory()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前目录。 

@return 当前目录
@see #setCurrentDirectory

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setCurrentDirectory(File dir)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置当前目录。传入 <code>null</code> 会设置文件选择器指向用户的默认目录。此默认目录取决于操作系统。在 Windows 上通常是&ldquo;我的文档&rdquo;，在 Unix 上是用户的主目录。

如果作为 <code>currentDirectory</code> 所传入的文件不是一个目录，则使用该文件的父级作为 currentDirectory。如果该父级是不可遍历的，则会沿父级树向上查找，直到找到可遍历的目录，或者到达文件系统的根为止。

@beaninfo preferred: true bound: true description: The directory that the JFileChooser is showing files of.

@param dir 要指向的当前目录
@see #getCurrentDirectory

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.changeToParentDirectory()
<!-- END KEY -->
<!-- BEGIN DATA -->
将要设置的目录更改为当前目录的父级。 

@see #getCurrentDirectory

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.rescanCurrentDirectory()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知 UI 重新扫描当前目录的文件列表。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.ensureFileIsVisible(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
确保指定的文件是可见的，不是隐藏的。

@param f  一个 File 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JFileChooser.showOpenDialog(Component parent) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
弹出一个 &quot;Open File&quot; 文件选择器对话框。注意，approve 按钮上显示的文本由 L&F 决定。

@param    parent  该对话框的父组件，可以为 <code>null</code>；详情请参阅 <code>showDialog</code>
@return   该文件选择器被弹下时的返回状态：
 <ul>
 <li>JFileChooser.CANCEL_OPTION
 <li>JFileChooser.APPROVE_OPTION
<li>JFileChooser.ERROR_OPTION 如果发生错误或者该对话框已被解除
 </ul>
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless
@see #showDialog

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JFileChooser.showSaveDialog(Component parent) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
弹出一个 &quot;Save File&quot; 文件选择器对话框。注意，approve 按钮上显示的文本由 L&F 决定。

@param    parent  该对话框的父组件，可以为 <code>null</code>；详情请参阅 <code>showDialog</code>
@return   该文件选择器被弹下时的返回状态：
 <ul>
 <li>JFileChooser.CANCEL_OPTION
 <li>JFileChooser.APPROVE_OPTION
<li>JFileChooser.ERROR_OPTION 如果发生错误或者该对话框已被解除
 </ul>
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless
@see #showDialog

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JFileChooser.showDialog(Component parent, String approveButtonText) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
弹出具有自定义 approve 按钮的自定义文件选择器对话框。例如，以下代码弹出具有 &quot;Run Application&quot; 按钮（而不是普通的 &quot;Save&quot; 或 &quot;Open&quot; 按钮）的文件选择器：
 <pre>
 filechooser.showDialog(parentFrame, &quot;Run Application&quot;);
 </pre>

或者，以下代码也可以执行相同的操作：
 <pre>
    JFileChooser chooser = new JFileChooser(null);
    chooser.setApproveButtonText(&quot;Run Application&quot;);
    chooser.showDialog(parentFrame, null);
 </pre>
 

<!--PENDING(jeff) - the following method should be added to the api:
      showDialog(Component parent);-->
<!--PENDING(kwalrath) - should specify modality and what
      "depends" means.-->

 <p>
 
<code>parent</code> 参数确定两件事情：打开的对话框所依赖的窗体，以及组件(放置对话框时外观应该考虑该组件的位置）。如果 parent 是一个 <code>Frame</code> 对象（例如 <code>JFrame</code>），则该对话框取决于该窗体，并且外观相对于窗体放置该对话框（例如在窗体上居中）。如果 parent 是一个组件，则该对话框取决于包含该组件的窗体，并且相对于该组件放置该对话框（例如在组件上居中）。如果 parent 为 <code>null</code>，则该对话框取决于不可见的窗口，并且将其放置到与外观相关的位置，如屏幕的中央。

@param   parent  该对话框的父组件，可以为 <code>null</code>
@param   approveButtonText <code>ApproveButton</code> 的文本
@return  该文件选择器被弹下时的返回状态：
 <ul>
 <li>JFileChooser.CANCEL_OPTION
 <li>JFileChooser.APPROVE_OPTION
<li>JFileChooser.ERROR_OPTION 如果发生错误或者该对话框已被解除
 </ul>
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JDialog javax.swing.JFileChooser.createDialog(Component parent) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回包含 <code>this</code> 的新 <code>JDialog</code>，在 <code>parent</code> 窗体中的 <code>parent</code> 上居中。可重写此方法以进一步地操作对话框、禁止调整大小、设置位置等等。例如：
 <pre>
     class MyFileChooser extends JFileChooser {
         protected JDialog createDialog(Component parent) throws HeadlessException {
             JDialog dialog = super.createDialog(parent);
             dialog.setLocation(300, 200);
             dialog.setResizable(false);
             return dialog;
         }
     }
 </pre>

@param   parent  该对话框的父组件，可以为 <code>null</code>
@return 包含 this 实例的新 <code>JDialog</code> 
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JFileChooser.getControlButtonsAreShown()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>controlButtonsAreShown</code> 属性的值。

@return <code>controlButtonsAreShown</code> 属性的值

@see #setControlButtonsAreShown
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setControlButtonsAreShown(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置属性，指示在文件选择器中是否显示 <i>approve</i> 和 <i>cancel</i> 按钮。此属性默认为 <code>true</code>。始终显示这些按钮的外观将忽略此属性的值。此方法激发一个属性更改事件，使用 <code>CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY</code> 字符串值作为属性名。

@param b 如果不应显示控制按钮，则为 <code>false</code>；否则为 <code>true</code>


@beaninfo preferred:true bound:true description: Sets whether the approve &amp; cancel buttons are shown.


@see #getControlButtonsAreShown
@see #CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JFileChooser.getDialogType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对话框的类型。默认值是 <code>JFileChooser.OPEN_DIALOG</code>。

@return   要显示的对话框的类型：
 <ul>
 <li>JFileChooser.OPEN_DIALOG
 <li>JFileChooser.SAVE_DIALOG
 <li>JFileChooser.CUSTOM_DIALOG
 </ul>

@see #setDialogType

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setDialogType(int dialogType)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对话框的类型。希望显示一个用户可用来打开文件的文件选择器时使用 <code>OPEN_DIALOG</code>。同样，使用 <code>SAVE_DIALOG</code> 可让用户选择用于保存的文件。想要在除 &quot;Open&quot; 或 &quot;Save&quot; 以外的上下文中使用文件选择器，则使用 <code>CUSTOM_DIALOG</code>。例如，您可能想要显示的文件选择器允许用户选择要执行的文件。注意，通常无需设置 <code>JFileChooser</code> 使用 <code>CUSTOM_DIALOG</code>，因为调用 <code>setApproveButtonText</code> 就已经这样作了。默认的对话框类型是 <code>JFileChooser.OPEN_DIALOG</code>。

@param dialogType 要显示的对话框的类型：
 <ul>
 <li>JFileChooser.OPEN_DIALOG
 <li>JFileChooser.SAVE_DIALOG
 <li>JFileChooser.CUSTOM_DIALOG
 </ul>

@exception IllegalArgumentException 如果 <code>dialogType</code> 非法
@beaninfo preferred:true bound:true description: The type (open, save, custom) of the JFileChooser. enum: OPEN_DIALOG JFileChooser.OPEN_DIALOG SAVE_DIALOG JFileChooser.SAVE_DIALOG CUSTOM_DIALOG JFileChooser.CUSTOM_DIALOG

@see #getDialogType
@see #setApproveButtonText

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setDialogTitle(String dialogTitle)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置显示在 <code>JFileChooser</code> 窗口标题栏的字符串。

@param dialogTitle 标题栏的新 <code>String</code>

@beaninfo preferred:true bound:true description:The title of the JFileChooser dialog window.

@see #getDialogTitle

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JFileChooser.getDialogTitle()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得 <code>JFileChooser</code> 的标题栏中所显示的字符串。

@see #setDialogTitle

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setApproveButtonToolTipText(String toolTipText)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>ApproveButton</code> 中使用的工具提示文本。如果为 <code>null</code>，则由 UI 对象确定该按钮的文本。

@beaninfo preferred:true bound:true description: The tooltip text for the ApproveButton.

@param toolTipText 用于确认按钮的工具提示文本
@see #setApproveButtonText
@see #setDialogType
@see #showDialog

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JFileChooser.getApproveButtonToolTipText()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>ApproveButton</code> 中使用的工具提示文本。如果为 <code>null</code>，则由 UI 对象确定该按钮的文本。

@return 用于确认按钮的工具提示文本

@see #setApproveButtonText
@see #setDialogType
@see #showDialog

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JFileChooser.getApproveButtonMnemonic()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回确认按钮的助记符。
@return 用于助记符键的整数值

@see #setApproveButtonMnemonic

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setApproveButtonMnemonic(int mnemonic)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用数值键代码设置确认按钮的助记符。

@param mnemonic 用于助记符键的整数值

@beaninfo preferred:true bound:true description: The mnemonic key accelerator for the ApproveButton.

@see #getApproveButtonMnemonic

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setApproveButtonMnemonic(char mnemonic)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用字符设置确认按钮的助记符。
@param mnemonic 用于助记符键的 char 值

@see #getApproveButtonMnemonic

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setApproveButtonText(String approveButtonText)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>FileChooserUI</code> 中的 <code>ApproveButton</code> 内使用的文本。

@beaninfo preferred:true bound:true description: The text that goes in the ApproveButton.

@param approveButtonText <code>ApproveButton</code> 中使用的文本

@see #getApproveButtonText
@see #setDialogType
@see #showDialog

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JFileChooser.getApproveButtonText()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>ApproveButton</code> 中的 <code>FileChooserUI</code> 内使用的文本。如果为 <code>null</code>，则由 UI 对象确定该按钮的文本。

通常该文本是 &quot;Open&quot; 或 &quot;Save&quot;。

@return <code>ApproveButton</code> 中使用的文本

@see #setApproveButtonText
@see #setDialogType
@see #showDialog

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.filechooser.FileFilter[] javax.swing.JFileChooser.getChoosableFileFilters()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得用户可选择的文件过滤器列表。

@return 包含所有可选择文件过滤器的 <code>FileFilter</code> 数组

@see #addChoosableFileFilter
@see #removeChoosableFileFilter
@see #resetChoosableFileFilters

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.addChoosableFileFilter(FileFilter filter)
<!-- END KEY -->
<!-- BEGIN DATA -->
向用户可选择的文件过滤器列表添加一个过滤器。有关设置文件选择模式的信息，请参阅 {@link #setFileSelectionMode setFileSelectionMode}。
 
@param filter 添加到可选择文件过滤器列表的 <code>FileFilter</code>

@beaninfo preferred:true bound:true description: Adds a filter to the list of user choosable file filters.

@see #getChoosableFileFilters
@see #removeChoosableFileFilter
@see #resetChoosableFileFilters
@see #setFileSelectionMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JFileChooser.removeChoosableFileFilter(FileFilter f)
<!-- END KEY -->
<!-- BEGIN DATA -->
从用户可选择的文件过滤器列表中移除一个过滤器。如果移除了文件过滤器，则返回 true。

@see #addChoosableFileFilter
@see #getChoosableFileFilters
@see #resetChoosableFileFilters

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.resetChoosableFileFilters()
<!-- END KEY -->
<!-- BEGIN DATA -->
将可选择文件过滤器列表重置为其开始状态。通常这会移除所有已添加的文件过滤器并保留 <code>AcceptAll</code> 文件过滤器。

@see #addChoosableFileFilter
@see #getChoosableFileFilters
@see #removeChoosableFileFilter

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.filechooser.FileFilter javax.swing.JFileChooser.getAcceptAllFileFilter()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>AcceptAll</code> 文件过滤器。例如在 Microsoft Windows 上，这会是“所有文件” (*.*)。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JFileChooser.isAcceptAllFileFilterUsed()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回是否使用 <code>AcceptAll FileFilter</code>。
@return 如果使用 <code>AcceptAll FileFilter</code>，则返回 true
@see #setAcceptAllFileFilterUsed
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setAcceptAllFileFilterUsed(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定是否将 <code>AcceptAll FileFilter</code> 用作可选择过滤器列表中一个可用选项。如果为 false，则从可用文件过滤器的列表中移除 <code>AcceptAll</code> 文件过滤器。如果为 true，则 <code>AcceptAll</code> 文件过滤器将成为可用的文件过滤器。 

@beaninfo preferred:true bound:true description: Sets whether the AcceptAll FileFilter is used as an available choice in the choosable filter list.

@see #isAcceptAllFileFilterUsed
@see #getAcceptAllFileFilter
@see #setFileFilter
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JComponent javax.swing.JFileChooser.getAccessory()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 accessory 组件。

@return 此 JFileChooser 的 accessory 组件，或者为 null
@see #setAccessory

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setAccessory(JComponent newAccessory)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 accessory 组件。accessory 通常用于显示已选中文件的预览图像；可按程序员的要求将其用来显示任何内容，如额外的自定义文件选择器控件。

 <p>
注：如果有以前使用的 accessory，则应该取消注册该 accessory 已向文件选择器所注册的所有侦听器。

@beaninfo preferred:true bound:true description: Sets the accessory component on the JFileChooser.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setFileSelectionMode(int mode)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>JFileChooser</code>，以允许用户只选择文件、只选择目录，或者可选择文件和目录。默认值是 <code>JFilesChooser.FILES_ONLY</code>。

@param mode 要显示的文件类型：
 <ul>
 <li>JFileChooser.FILES_ONLY
 <li>JFileChooser.DIRECTORIES_ONLY
 <li>JFileChooser.FILES_AND_DIRECTORIES
 </ul>

@exception IllegalArgumentException  如果 <code>mode</code> 是非法的文件选择模式
@beaninfo preferred:true bound:true description: Sets the types of files that the JFileChooser can choose. enum: FILES_ONLY JFileChooser.FILES_ONLY DIRECTORIES_ONLY JFileChooser.DIRECTORIES_ONLY FILES_AND_DIRECTORIES JFileChooser.FILES_AND_DIRECTORIES

@see #getFileSelectionMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JFileChooser.getFileSelectionMode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前的文件选择模式。默认值是 <code>JFilesChooser.FILES_ONLY</code>。

@return 要显示的文件类型，为下列值之一：
 <ul>
 <li>JFileChooser.FILES_ONLY
 <li>JFileChooser.DIRECTORIES_ONLY
 <li>JFileChooser.FILES_AND_DIRECTORIES
 </ul>
@see #setFileSelectionMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JFileChooser.isFileSelectionEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
方便的调用，可根据当前的文件选择模式确定文件是否为可选择的。


@see #setFileSelectionMode
@see #getFileSelectionMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JFileChooser.isDirectorySelectionEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
方便的调用，可根据当前的文件选择模式确定目录是否为可选择的。


@see #setFileSelectionMode
@see #getFileSelectionMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setMultiSelectionEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置文件选择器，以允许选择多个文件。

@param b 如果可以选择多个文件，则为 true 
@beaninfo bound:true description: Sets multiple file selection mode.

@see #isMultiSelectionEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JFileChooser.isMultiSelectionEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果可以选择多个文件，则返回 true。
@return 如果可以选择多个文件，则返回 true
@see #setMultiSelectionEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JFileChooser.isFileHidingEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果在文件选择器中不显示隐藏文件，则返回 true；否则返回 false。

@return 文件隐藏属性的状态
@see #setFileHidingEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setFileHidingEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置是否实现文件隐藏。如果为 true，则在文件选择器中不显示隐藏文件。确定显示哪些文件由 <code>FileView</code> 完成。


@beaninfo preferred:true bound:true description: Sets file hiding on or off.

@param b 确定是否开启文件隐藏的 boolean 值
@see #isFileHidingEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setFileFilter(FileFilter filter)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置当前文件过滤器。文件选择器使用文件过滤器从用户的视图中过滤文件。


@beaninfo preferred:true bound:true description: Sets the File Filter used to filter out files of type.

@param filter 要使用的新的当前文件过滤器
@see #getFileFilter

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.filechooser.FileFilter javax.swing.JFileChooser.getFileFilter()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前选择的文件过滤器。

@return 当前的文件过滤器
@see #setFileFilter
@see #addChoosableFileFilter

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setFileView(FileView fileView)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于检索 UI 信息的文件视图，如表示文件的图标或文件的类型描述。


@beaninfo preferred:true bound:true description: Sets the File View used to get file type information.

@see #getFileView

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.filechooser.FileView javax.swing.JFileChooser.getFileView()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前的文件视图。

@see #setFileView

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JFileChooser.getName(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回文件名。
@param f <code>File</code>
@return 包含 <code>f</code> 文件名的 <code>String</code>
@see FileView#getName

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JFileChooser.getDescription(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回文件描述。
@param f  <code>File</code>
@return 包含 <code>f</code> 文件描述的 <code>String</code>
@see FileView#getDescription

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JFileChooser.getTypeDescription(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回文件类型。
@param f <code>File</code>
@return 包含 <code>f</code> 文件类型描述的 <code>String</code>
@see FileView#getTypeDescription

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.JFileChooser.getIcon(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此文件或文件类型的图标，这取决于系统。
@param f <code>File</code>
@return 此文件或文件类型的 <code>Icon</code> 
@see FileView#getIcon

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JFileChooser.isTraversable(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果可以返回该文件（目录），则返回 true。如果无法遍历目录，则返回 false。
@param f <code>File</code>
@return 如果可以遍历文件/目录，则返回 true；否则返回 false
@see FileView#isTraversable

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JFileChooser.accept(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果应该显示该文件，则返回 true。
@param f <code>File</code>
@return 如果应该显示该文件，则返回 true；否则返回 false
@see FileFilter#accept

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setFileSystemView(FileSystemView fsv)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置为访问和创建文件系统资源（如查找软驱和获得根驱动器列表），<code>JFileChooser</code> 所使用的文件系统视图。
@param fsv  新的 <code>FileSystemView</code> 


@beaninfo expert:true bound:true description: Sets the FileSytemView used to get filesystem information.

@see FileSystemView

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.filechooser.FileSystemView javax.swing.JFileChooser.getFileSystemView()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回文件系统视图。
@return <code>FileSystemView</code> 对象
@see #setFileSystemView

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.approveSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
用户单击 Approve 按钮（默认情况下标有 &quot;Open&quot; 或 &quot;Save&quot;）时由 UI 调用此方法。程序员也可调用此方法。此方法导致使用等效于 <code>APPROVE_SELECTION</code> 的命令字符串激发一个操作事件。


@see #APPROVE_SELECTION

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.cancelSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
用户选择 Cancel 按钮时由 UI 调用此方法。程序员也可调用此方法。此方法导致使用等效于 <code>CANCEL_SELECTION</code> 的命令字符串激发一个操作事件。


@see #CANCEL_SELECTION

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.addActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
向文件选择器添加一个 <code>ActionListener</code>。

@param l 要添加的侦听器
 

@see #approveSelection
@see #cancelSelection

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.removeActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
从文件选择器中移除一个 <code>ActionListener</code>。

@param l 要移除的侦听器

@see #addActionListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ActionListener[] javax.swing.JFileChooser.getActionListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在此文件选择器上注册的所有操作侦听器的数组。

@return 此文件选择器的所有 <code>ActionListener</code>；如果当前没有注册任何操作侦听器，则返回一个空数组


@see #addActionListener
@see #removeActionListener

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JFileChooser.fireActionPerformed(String command)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知对此事件类型感兴趣的所有侦听器。使用 <code>command</code> 参数以延迟方式创建事件实例。

@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
将 UI 属性重置为当前的外观值。

@see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JFileChooser.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个指示 L&F 类名的字符串，该类负责呈现此组件。

@return 字符串 &quot;FileChooserUI&quot;
@see JComponent#getUIClassID
@see UIDefaults#getUI
@beaninfo expert: true description: A string that specifies the name of the L&F class.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.FileChooserUI javax.swing.JFileChooser.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得实现此组件 L&F 的 UI 对象。

@return 实现 FileChooserUI L&F 的 FileChooserUI 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JFileChooser.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JFileChooser</code> 的字符串表示形式。此方法仅在进行调试时使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。
 
@return  此 <code>JFileChooser</code> 的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JFileChooser.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 JFileChooser 关联的 AccessibleContext。对于文件选择器，AccessibleContext 采用 AccessibleJFileChooser 的形式。如有必要，可创建一个新的 AccessibleJFileChooser 实例。

@return 一个 AccessibleJFileChooser，它充当此 JFileChooser 的 AccessibleContext

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JFileChooser.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
有关 Swing 中序列化的更多信息，请参阅 <code>JComponent</code> 中的 <code>readObject</code> 和 <code>writeObject</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JFileChooser.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
有关 Swing 中序列化的更多信息，请参阅 <code>JComponent</code> 中的 <code>readObject</code> 和 <code>writeObject</code>。

<!-- END DATA -->
