<!-- BEGIN KEY -->
public class javax.swing.JButton extends javax.swing.AbstractButton implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
&quot;push&quot; 按钮的实现。
 <p>
 通过 <code><a href="Action.html">Action</a></code> 可配置按钮，并进行一定程度的控制。将 <code>Action</code> 用于按钮具有许多直接配置按钮所不及的优点。有关更多详细信息，请参阅<a href="Action.html#buttonActions">支持的 <code>Action</code> Swing 组件</a>，可在 <em>The Java Tutorial</em> 中的 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/misc/action.html">How
 to Use Actions</a> 一节找到更到信息。
 <p>
有关使用按钮的更多信息和示例，请参阅 <em>The Java Tutorial</em> 中的 <a href="http://java.sun.com/docs/books/tutorial/uiswing/components/button.html">How to Use Buttons, Check Boxes, and Radio Buttons</a>。
 <p>
 <strong>警告：</strong> Swing 不是线程安全的。有关更多信息，请参阅 <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@beaninfo attribute: isContainer false description: An implementation of a \&quot;push\&quot; button.

@version 1.97 12/19/03
@author Jeff Dinkins

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JButton()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建不带有设置文本或图标的按钮。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JButton(Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个带图标的按钮。

@param icon  显示在按钮上的 Icon 图像

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JButton(String text)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个带文本的按钮。

@param text  按钮的文本

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JButton(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个按钮，其属性从所提供的 <code>Action</code> 中获取。

@param a 用于指定新按钮的 <code>Action</code>

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JButton(String text, Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个带初始文本和图标的按钮。

@param text  按钮的文本
@param icon  显示在按钮上的 Icon 图像

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JButton.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
根据当前外观的值重置 UI 属性。

@see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JButton.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定呈现此组件的 L&F 类名的字符串。

@return 字符串 &quot;ButtonUI&quot;
@see JComponent#getUIClassID
@see UIDefaults#getUI
@beaninfo expert: true description: A string that specifies the name of the L&F class.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JButton.isDefaultButton()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>defaultButton</code> 属性的值，如果为 <code>true</code> 则意味着此按钮是其 <code>JRootPane</code> 的当前默认按钮。大多数外观呈现不同的默认按钮，并且可能提供对访问默认按钮的绑定。

@return <code>defaultButton</code> 属性的值
@see JRootPane#setDefaultButton
@see #isDefaultCapable
@beaninfo description: Whether or not this button is the default button

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JButton.isDefaultCapable()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>defaultCapable</code> 属性的值。

@return <code>defaultCapable</code> 属性的值
@see #setDefaultCapable
@see #isDefaultButton
@see JRootPane#setDefaultButton

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JButton.setDefaultCapable(boolean defaultCapable)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>defaultCapable</code> 属性，该属性确定此按钮是否可以是其根窗格的默认按钮。除非由外观另行指定，否则 <code>defaultCapable</code> 属性的默认值为 <code>true</code>。

@param defaultCapable 如果此按钮可以是 <code>RootPane</code> 上的默认按钮，则该参数为 <code>true</code>；否则为 <code>false</code>
@see #isDefaultCapable
@beaninfo bound: true attribute: visualUpdate true description: Whether or not this button can be the default button

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JButton.removeNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>JComponent.removeNotify</code> 来检查此按钮当前是否被设置为 <code>RootPane</code> 上的默认按钮，如果是，则将 <code>RootPane</code> 的默认按钮设置为 <code>null</code>，以确保 <code>RootPane</code> 不继续停留在无效的按钮引用上。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JButton.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JButton</code> 的字符串表示形式。此方法仅在进行调试时使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可以为空，但不可以为 <code>null</code>。
 
@return  此 <code>JButton</code> 的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JButton.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 <code>JButton</code> 关联的 <code>AccessibleContext</code>。对于 <code>JButton</code>，<code>AccessibleContext</code> 采用 <code>AccessibleJMenuItem</code> 的形式。如有必要，可创建一个新的 <code>AccessibleJButton</code> 实例。

@return 一个 <code>AccessibleJButton</code>，它充当此 <code>JButton</code> 的 <code>AccessibleContext</code>
@beaninfo expert: true description: The AccessibleContext associated with this Button.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JButton.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

有关 Swing 中序列化的更多信息，请参阅 JComponent 中的 readObject() 和 writeObject()。

<!-- END DATA -->
