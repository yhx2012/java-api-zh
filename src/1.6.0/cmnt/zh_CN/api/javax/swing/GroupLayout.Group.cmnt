<!-- BEGIN KEY -->
public abstract class javax.swing.GroupLayout.Group extends javax.swing.GroupLayout.Spring
<!-- END KEY -->
<!-- BEGIN DATA -->
{@code Group} 为 {@code GroupLayout} 所支持的以下两种操作提供基础：一个接一个地布置组件（{@link SequentialGroup SequentialGroup}）或对齐组件（{@link ParallelGroup ParallelGroup}）。{@code Group} 及其子类没有公共的构造方法；要创建一个 {@code Group}，请使用 {@code createSequentialGroup} 或 {@code createParallelGroup}。此外，将从某个 {@code GroupLayout} 创建的 {@code Group} 与另一个 {@code GroupLayout} 一起使用将产生不确定的结果。
 <p>
{@code Group} 及其子类中的各种方法允许显式地指定范围。这些方法的参数可以有两种形式：一个大于等于 0 的值，或者 {@code DEFAULT_SIZE} 或 {@code PREFERRED_SIZE} 之一。大于等于 {@code 0} 的值指示一个特定大小。{@code DEFAULT_SIZE} 指示应该使用取自组件的相应大小。例如，如果 {@code DEFAULT_SIZE} 作为最小大小参数传递，则最小大小是在组件上调用 {@code getMinimumSize} 获得的。同样，{@code PREFERRED_SIZE} 指示应该使用 {@code getPreferredSize} 返回的值。下面的例子将 {@code myComponent} 添加到 {@code group}，并带有特定的范围值。也就是说，最小值被显式地指定为 100，首选值为 200，最大值为 300。
 <pre>
group.addComponent(myComponent, 100, 200, 300);
 </pre>
下面的例子将 {@code myComponent} 添加到 {@code group}，并使用了各种形式的组合。强制使最小大小与首选大小相同，首选大小通过使用 {@code myComponent.getPreferredSize} 确定，最大大小通过对组件调用 {@code getMaximumSize} 确定。
 <pre>
group.addComponent(myComponent, GroupLayout.PREFERRED_SIZE,
GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE);
 </pre>
 <p>
除非另行指定，否则只要传递了无效的范围，{@code Group} 及其子类的所有允许指定范围的方法都将抛出 {@code IllegalArgumentException}。无效范围是指，此范围内的任何值都小于 0 且不是 {@code PREFERRED_SIZE} 或 {@code DEFAULT_SIZE} 之一，或是不满足以下条件的范围（对于特定值）：{@code min} &lt;= {@code pref} &lt;= {@code max}。
 <p>
类似地，如果传递了 null，那么带有 {@code Component} 的所有方法都将抛出 {@code NullPointerException}，带有 {@code Group} 的所有方法都将抛出 {@code IllegalArgumentException}。

@see #createSequentialGroup
@see #createParallelGroup
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.GroupLayout.Group javax.swing.GroupLayout.Group.addGroup(GroupLayout.Group group)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 {@code Group} 添加到此 {@code Group}。

@param group 要添加的 {@code Group}
@return 此 {@code Group}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.GroupLayout.Group javax.swing.GroupLayout.Group.addComponent(Component component)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 {@code Component} 添加到此 {@code Group}。

@param component 要添加的 {@code Component}
@return 此 {@code Group}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.GroupLayout.Group javax.swing.GroupLayout.Group.addComponent(Component component, int min, int pref, int max)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定大小将 {@code Component} 添加到此 {@code Group}。

@param component 要添加的 {@code Component}
@param min 最小大小或者 {@code DEFAULT_SIZE} 或 {@code PREFERRED_SIZE} 之一
@param pref 首选大小或者 {@code DEFAULT_SIZE} 或 {@code PREFERRED_SIZE} 之一
@param max 最大大小或者 {@code DEFAULT_SIZE} 或 {@code PREFERRED_SIZE} 之一
@return 此 {@code Group}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.GroupLayout.Group javax.swing.GroupLayout.Group.addGap(int size)
<!-- END KEY -->
<!-- BEGIN DATA -->
将固定间隙添加到此 {@code Group}。

@param size 间隙的大小
@return 此 {@code Group}
@throws IllegalArgumentException 如果 {@code size} 小于 {@code 0}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.GroupLayout.Group javax.swing.GroupLayout.Group.addGap(int min, int pref, int max)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定大小的间隙添加到此 {@code Group}。

@param min 间隙的最小大小
@param pref 间隙的首选大小
@param max 间隙的最大大小
@throws IllegalArgumentException 如果任一值小于 {@code 0}
@return 此 {@code Group}

<!-- END DATA -->
