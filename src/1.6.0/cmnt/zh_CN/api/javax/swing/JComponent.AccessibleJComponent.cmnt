<!-- BEGIN KEY -->
public abstract class javax.swing.JComponent.AccessibleJComponent extends java.awt.Container.AccessibleAWTContainer implements javax.accessibility.AccessibleExtendedComponent
<!-- END KEY -->
<!-- BEGIN DATA -->
用于为可访问性提供默认支持的 JComponent 内部类。此类并非旨在由应用程序开发人员直接使用，而只能由容器开发人员为其创建子类。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JComponent.AccessibleJComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
尽管该类是抽象的，但是应该通过所有子类调用它。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComponent.AccessibleJComponent.addPropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 PropertyChangeListener 添加到侦听器列表中。

@param   listener   要添加的 PropertyChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComponent.AccessibleJComponent.removePropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
从侦听器列表移除一个 PropertyChangeListener。此方法移除了一个为所有属性注册的 PropertyChangeListener。

@param listener  要移除的 PropertyChangeListener to be removed

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JComponent.AccessibleJComponent.getBorderTitle(Border b)
<!-- END KEY -->
<!-- BEGIN DATA -->
在边界层次结构（如果存在）中递归地搜索带有非 null 标题的 TitledBorder。此方法首先在内部边界，然后在外部边界上执行深度优先搜索。在复合边界的情况中，假定标题实际上完全在边界内部，而不是完全在边界外部。这是相当随意的，但是希望可敬的 UI 程序员不会为相同的组件创建多个有标题的边界。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JComponent.AccessibleJComponent.getAccessibleName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的可访问名称。此方法几乎从不返回 java.awt.Component.getName() 获得的名称，因为该名称通常不是一个本地化名称，并且对用户没有任何意义。如果该对象从根本上说是一个文本对象（例如，菜单项），那么可访问的名称应是该对象的文本（例如，&ldquo;保存&rdquo;）。如果该对象有工具提示，则工具提示文本还可以是要返回的合适的 String。

@return 对象的本地化名称，如果此对象不具有名称，则可以为 null
@see AccessibleContext#setAccessibleName

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JComponent.AccessibleJComponent.getAccessibleDescription()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的可访问描述。这应该是一个简明的本地化描述，描述此对象是什么，即对用户来说有何意义。如果该对象有一个工具提示，则该工具提示文本可以是要返回的合适的字符串，假设该字符串包含对该对象的简明描述（而不仅仅是该对象的名称。例如，将&ldquo;保存&rdquo;作为工具提示文本的工具栏上的&ldquo;保存&rdquo;图标不应返回工具提示文本作为描述，而应为&ldquo;保存当前文本文档&rdquo;）。

@return 返回该对象的本地化描述，如果此对象没有描述，则可能为 null
@see AccessibleContext#setAccessibleDescription

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleRole javax.swing.JComponent.AccessibleJComponent.getAccessibleRole()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的功能。

@return 描述该对象功能的 AccessibleRole 实例
@see AccessibleRole

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleStateSet javax.swing.JComponent.AccessibleJComponent.getAccessibleStateSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的状态。

@return 包含对象当前状态集合的 AccessibleStateSet 实例
@see AccessibleState

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JComponent.AccessibleJComponent.getAccessibleChildrenCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对象中可访问的子级数。如果此对象的所有子级都实现 Accessible，则此方法应该返回该对象的子级数。

@return  对象的可访问子级数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JComponent.AccessibleJComponent.getAccessibleChild(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对象的第 n 个可访问子级。

@param i 从零开始的子级索引
@return 该对象的第 n 个可访问子级

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JComponent.AccessibleJComponent.getToolTipText()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回工具提示文本

@return 对象的工具提示文本（如果支持）；否则返回 null
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JComponent.AccessibleJComponent.getTitledBorderText()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回有标题边界的文本

@return 对象的有标题边界文本（如果支持）；否则返回 null
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleKeyBinding javax.swing.JComponent.AccessibleJComponent.getAccessibleKeyBinding()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此对象关联的键绑定

@return 对象的键绑定（如果支持）；否则返回 null
@see AccessibleKeyBinding
 @since 1.4

<!-- END DATA -->
