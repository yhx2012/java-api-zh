<!-- BEGIN KEY -->
public class javax.swing.SortingFocusTraversalPolicy extends javax.swing.InternalFrameFocusTraversalPolicy
<!-- END KEY -->
<!-- BEGIN DATA -->
通过对焦点遍历循环的 Components 按给定 Comparator 排序确定遍历顺序的 FocusTraversalPolicy。不可视和不可显示的 Component 层次结构部分将不被包含。
 <p>
默认情况下，SortingFocusTraversalPolicy 会隐式将焦点传输给下一个循环。也就是说，在进行正常焦点遍历期间，在焦点循环根后面遍历的 Component 将成为焦点循环根默认拥有焦点的 Component。可以使用 <code>setImplicitDownCycleTraversal</code> 方法禁用此行为。
 <p>
默认情况下，只有 Component 是可视的、可显示的、被启用的和可聚焦的时候，此类的方法才返回此 Component。子类可以通过重写 <code>accept</code> 方法修改此行为。
 <p>
此策略需要考虑<a
 href="../../java/awt/doc-files/FocusSpec.html#FocusTraversalPolicyProviders">焦点遍历策略提供者</a>。当搜索第一个/最后一个/下一个/上一个 Component 时，如果遇到焦点遍历策略提供者，则使用该焦点遍历策略来执行搜索操作。

@author David Mendenhall
@version 1.7, 05/05/04

@see java.util.Comparator
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.SortingFocusTraversalPolicy()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个不带 Comparator 的 SortingFocusTraversalPolicy。在焦点循环根或 KeyboardFocusManager 上安装此 FocusTraversalPolicy 之前，子类必须用 <code>setComparator</code> 设置 Comparator。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.SortingFocusTraversalPolicy(java.util.Comparator<? super java.awt.Component> comparator)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定 Comparator 的 SortingFocusTraversalPolicy。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.SortingFocusTraversalPolicy.getComponentAfter(Container aContainer, Component aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回应该接收 aComponent 后面的焦点的 Component。aContainer 必须是 aComponent 的焦点循环根，或者是一个焦点遍历策略提供者。
 <p>
默认情况下，SortingFocusTraversalPolicy 会隐式将焦点传输给下一个循环。也就是说，在进行正常焦点遍历期间，在焦点循环根后面遍历的 Component 将成为焦点循环根默认拥有焦点的 Component。可以使用 <code>setImplicitDownCycleTraversal</code> 方法禁用此行为。
 <p>
如果 aContainer 是<a href="../../java/awt/doc-files/FocusSpec.html#FocusTraversalPolicyProviders">焦点遍历策略提供者</a>，则总是将焦点传输到下一个循环。

@param aContainer aComponent 的焦点循环根，或焦点遍历策略提供者
@param aComponent aContainer 的子组件（可能是间接的），或 aContainer 自身
@return 应该接收 aComponent 之后的焦点的 Component，如果无法找到合适的 Component，则返回 null
@throws IllegalArgumentException 如果 aContainer 不是 aComponent 的焦点循环根或焦点遍历策略提供者，或者 aContainer 或 aComponent 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.SortingFocusTraversalPolicy.getComponentBefore(Container aContainer, Component aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回应该接收 aComponent 前面的焦点的 Component。aContainer 必须是 aComponent 的焦点循环根，或者是一个焦点遍历策略提供者。
 <p>
默认情况下，SortingFocusTraversalPolicy 会隐式将焦点传输给下一个循环。也就是说，在进行正常焦点遍历期间，在焦点循环根后面遍历的 Component 将成为焦点循环根默认拥有焦点的 Component。可以使用 <code>setImplicitDownCycleTraversal</code> 方法禁用此行为。
 <p>
如果 aContainer 是<a href="../../java/awt/doc-files/FocusSpec.html#FocusTraversalPolicyProviders">焦点遍历策略提供者</a>，则总是将焦点传输到下一个循环。

@param aContainer aComponent 的焦点循环根，或焦点遍历策略提供者
@param aComponent aContainer 的子组件（可能是间接的），或 aContainer 自身
@return 应该接收 aComponent 之前的焦点的 Component，如果无法找到合适的 Component，则返回 null
@throws IllegalArgumentException 如果 aContainer 不是 aComponent 的焦点循环根或焦点遍历策略提供者，或者 aContainer 或 aComponent 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.SortingFocusTraversalPolicy.getFirstComponent(Container aContainer)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回遍历循环中的第一个 Component。在进行正向遍历时，可用此方法确定拥有焦点的下一个 Component。

@param aContainer 要返回其第一个 Component 的 aComponent 的焦点循环根，或焦点遍历策略提供者
@return aContainer 的遍历循环中的第一个 Component，如果无法找到合适的 Component，则返回 null
@throws IllegalArgumentException 如果 aContainer 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.SortingFocusTraversalPolicy.getLastComponent(Container aContainer)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回遍历循环中的最后一个 Component。在进行反向遍历时，可用此方法确定拥有焦点的下一个 Component。

@param aContainer 要返回其最后一个 Component 的 aComponent 的焦点循环根，或焦点遍历策略提供者
@return aContainer 的遍历循环中的最后一个 Component，如果无法找到合适的 Component，则返回 null
@throws IllegalArgumentException 如果 aContainer 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.SortingFocusTraversalPolicy.getDefaultComponent(Container aContainer)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回默认拥有焦点的 Component。在向下遍历到以 aContainer 为根的新焦点遍历循环时，此 Component 将是第一个接受焦点的 Component。此方法的默认实现将返回与 <code>getFirstComponent</code> 相同的 Component。

@param aContainer 将返回其默认 Component 的 aComponent 的焦点循环根或焦点遍历策略提供者
@return aContainer 的遍历循环中的默认 Component，如果没有找到合适的 Component，则返回 null
@see #getFirstComponent
@throws IllegalArgumentException 如果 aContainer 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.SortingFocusTraversalPolicy.setImplicitDownCycleTraversal(boolean implicitDownCycleTraversal)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 SortingFocusTraversalPolicy 是否隐式将焦点传输给下一个循环。如果返回 <code>true</code>，则在进行正常焦点遍历期间，在焦点循环根后面遍历的 Component 将成为焦点循环根默认拥有焦点的 Component。如果返回 <code>false</code>，则将遍历根植在指定焦点循环上的焦点遍历循环中的下一个 Component。此属性的默认值为 <code>true</code>。

@param implicitDownCycleTraversal 此 SortingFocusTraversalPolicy 是否隐式将焦点传输给下一个循环
@see #getImplicitDownCycleTraversal
@see #getFirstComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.SortingFocusTraversalPolicy.getImplicitDownCycleTraversal()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对此 SortingFocusTraversalPolicy 是否隐式将焦点传输给下一个循环的判断。如果返回 <code>true</code>，则在进行正常焦点遍历期间，在焦点循环根后面遍历的 Component 将成为焦点循环根默认拥有焦点的 Component。如果返回 <code>false</code>，则将遍历根植在指定焦点循环上的焦点遍历循环中的下一个 Component。

@return 此 SortingFocusTraversalPolicy 是否隐式将焦点传输给下一个循环
@see #setImplicitDownCycleTraversal
@see #getFirstComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.SortingFocusTraversalPolicy.setComparator(java.util.Comparator<? super java.awt.Component> comparator)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置将用于对焦点遍历循环中的 Components 排序的 Comparator。

@param comparator 将用于排序的 Comparator

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Comparator<? super java.awt.Component> javax.swing.SortingFocusTraversalPolicy.getComparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回将用于对焦点遍历循环中的 Components 排序的 Comparator。

@return 将用于排序的 Comparator

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.SortingFocusTraversalPolicy.accept(Component aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定是否可以接受选择某个 Component 作为新的焦点拥有者。默认情况下，当且仅当 Component 是可视的、可显示的、被启用的和可聚焦的时候，此方法才接受此 Component。

@param aComponent 将测试其是否适合作为焦点拥有者的 Component
@return 如果 aComponent 是可视的、可显示的、被启用的和可聚焦的，则返回 <code>true</code>；否则返回 <code>false</code>

<!-- END DATA -->
