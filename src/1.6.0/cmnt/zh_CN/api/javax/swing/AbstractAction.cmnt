<!-- BEGIN KEY -->
public abstract class javax.swing.AbstractAction extends java.lang.Object implements javax.swing.Action, java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
此类提供 JFC <code>Action</code> 接口的默认实现。它定义了一些标准行为，比如 <code>Action</code> 对象属性（icon、text 和 enabled）的 get 和 set 方法。开发人员只需为此抽象类创建子类并定义 <code>actionPerformed</code> 方法即可。 
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.51 12/19/03
@author Georges Saab
@see Action

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.AbstractAction.enabled
<!-- END KEY -->
<!-- BEGIN DATA -->
指定是否启用操作；默认值为 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.SwingPropertyChangeSupport javax.swing.AbstractAction.changeSupport
<!-- END KEY -->
<!-- BEGIN DATA -->
如果已经注册了任意 <code>PropertyChangeListener</code>，则 <code>changeSupport</code> 字段负责描述它们。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.AbstractAction()
<!-- END KEY -->
<!-- BEGIN DATA -->
用默认描述字符串和默认图标定义一个 <code>Action</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.AbstractAction(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
用指定描述字符串和默认图标定义一个 <code>Action</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.AbstractAction(String name, Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
用指定描述字符串和指定图标定义一个 <code>Action</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.AbstractAction.getValue(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->

获得与指定键关联的 <code>Object</code>。

@param key 包含指定 <code>key</code> 的字符串
@return 用此键存储的绑定 <code>Object</code>；如果没有键，则将返回 <code>null</code>
@see Action#getValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractAction.putValue(String key, Object newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置与指定键关联的 <code>Value</code>。

@param key  标识所存储对象的 <code>String</code>
@param newValue 将使用此键存储的 <code>Object</code>
@see Action#putValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.AbstractAction.isEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果启用该操作，则返回 true。

@return 如果启用该操作，则返回 true；否则返回 false
@see Action#isEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractAction.setEnabled(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
启用或禁用该操作。

@param newValue  为 true 表示启用该操作，为 false 表示禁用该操作
@see Action#setEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] javax.swing.AbstractAction.getKeys()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>Object</code> 的数组，这些对象是一些已经为其设置此 <code>AbstractAction</code> 值的键，如果没有已经设置该值的键，则返回 <code>null</code>。
@return 一个键对象数组，如果没有已经设置好值的键，则返回 <code>null</code>
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.AbstractAction.firePropertyChange(String propertyName, Object oldValue, Object newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
支持报告绑定 (bound) 属性的改变。当改变了绑定属性时可调用此方法，它将向所有已注册的 <code>PropertyChangeListener</code> 发送相应的 <code>PropertyChangeEvent</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.AbstractAction.addPropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
向侦听器列表添加一个 <code>PropertyChangeListener</code>。该侦听器是为所有属性注册的。
 <p>
在响应对绑定属性（例如 <code>setFont</code>、<code>setBackground</code> 或 <code>setForeground</code>）的设置时，将触发一个 <code>PropertyChangeEvent</code>。注意，如果当前组件将继承其容器的前景、背景或字体，则在响应所继承属性中的更改时不会触发任何事件。

@param listener  要添加的 <code>PropertyChangeListener</code>

@see Action#addPropertyChangeListener 

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.AbstractAction.removePropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
从侦听器列表中移除一个 <code>PropertyChangeListener</code>。此方法移除了一个为所有属性注册的 <code>PropertyChangeListener</code>。

@param   listener  要移除的 <code>PropertyChangeListener</code>

@see Action#removePropertyChangeListener 

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.beans.PropertyChangeListener[] javax.swing.AbstractAction.getPropertyChangeListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回使用 addPropertyChangeListener() 添加到此 AbstractAction 中的所有 <code>PropertyChangeListener</code> 组成的数组。

@return 添加的所有 <code>PropertyChangeListener</code>，如果没有添加侦听器，则返回一个空数组
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object javax.swing.AbstractAction.clone() throws java.lang.CloneNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
复制抽象操作。此方法给出了它自己的键/值列表的副本，该副本不能通过 <code>Object.clone()</code> 为您处理。

<!-- END DATA -->
