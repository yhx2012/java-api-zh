<!-- BEGIN KEY -->
public class javax.swing.DebugGraphics extends java.awt.Graphics
<!-- END KEY -->
<!-- BEGIN DATA -->
支持图形调试的图形子类。重写 Graphics 中的大多数方法。DebugGraphics 对象很少通过手工创建。它们通常在 JComponent 的 debugGraphicsOptions 因使用 setDebugGraphicsOptions() 方法而发生更改时自动创建。
 <p>
注：必须关闭双缓冲来使用 DebugGraphics：RepaintManager repaintManager = RepaintManager.currentManager(component); repaintManager.setDoubleBufferingEnabled(false);

@see JComponent#setDebugGraphicsOptions
@see RepaintManager#currentManager
@see RepaintManager#setDoubleBufferingEnabled

@version 1.25 12/19/03
@author Dave Karlton

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.DebugGraphics.LOG_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
记录图形操作。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.DebugGraphics.FLASH_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
Flash 图形操作。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.DebugGraphics.BUFFERED_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
在一个单独的 <code>Frame</code> 中显示已缓冲的操作。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.DebugGraphics.NONE_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
不要调试图形操作。
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.DebugGraphics()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个支持减速绘制的新调试图形上下文。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.DebugGraphics(Graphics graphics, JComponent component)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据现有图形上下文构造一个调试图形上下文，该上下文可以减慢指定组件的绘制。

@param graphics  要减慢的 Graphics 上下文
@param component 要缓慢绘制的 JComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.DebugGraphics(Graphics graphics)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据现有图形上下文构造一个调试图形上下文，该上下文支持减慢绘制。

@param graphics  要减慢的 Graphics 上下文

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Graphics javax.swing.DebugGraphics.create()
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.create</code> 来返回一个 DebugGraphics 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Graphics javax.swing.DebugGraphics.create(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.create</code> 来返回一个 DebugGraphics 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.DebugGraphics.setFlashColor(Color flashColor)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置用于 flash 绘制操作的 Color。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Color javax.swing.DebugGraphics.flashColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于 flash 绘制操作的 Color。
@see #setFlashColor

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.DebugGraphics.setFlashTime(int flashTime)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置绘制操作 flash 的时间延迟。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.swing.DebugGraphics.flashTime()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回绘制操作 flash 的时间延迟。
@see #setFlashTime

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.DebugGraphics.setFlashCount(int flashCount)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置绘制操作将要 flash 的次数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.swing.DebugGraphics.flashCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制操作将要 flash 的次数。
@see #setFlashCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.DebugGraphics.setLogStream(PrintStream stream)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 DebugGraphics 在其中记录绘制操作的流。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.io.PrintStream javax.swing.DebugGraphics.logStream()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 DebugGraphics 在其中记录绘制操作的流。
@see #setLogStream

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.setFont(Font aFont)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于文本绘制操作的 Font。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font javax.swing.DebugGraphics.getFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于文本绘制操作的 Font。
@see #setFont

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.setColor(Color aColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于绘制和填充线条和图形的颜色。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.DebugGraphics.getColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于文本绘制操作的 Color。
@see #setColor

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FontMetrics javax.swing.DebugGraphics.getFontMetrics()
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.getFontMetrics</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FontMetrics javax.swing.DebugGraphics.getFontMetrics(Font f)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.getFontMetrics</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.translate(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.translate</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.setPaintMode()
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.setPaintMode</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.setXORMode(Color aColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.setXORMode</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.DebugGraphics.getClipBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.getClipBounds</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.clipRect(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.clipRect</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.setClip(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.setClip</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Shape javax.swing.DebugGraphics.getClip()
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.getClip</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.setClip(Shape clip)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.setClip</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawRect(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.drawRect</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.fillRect(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.fillRect</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.clearRect(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.clearRect</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.drawRoundRect</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.fillRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.fillRoundRect</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawLine(int x1, int y1, int x2, int y2)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.drawLine</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.draw3DRect(int x, int y, int width, int height, boolean raised)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.draw3DRect</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.fill3DRect(int x, int y, int width, int height, boolean raised)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.fill3DRect</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawOval(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.drawOval</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.fillOval(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.fillOval</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawArc(int x, int y, int width, int height, int startAngle, int arcAngle)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.drawArc</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.fillArc(int x, int y, int width, int height, int startAngle, int arcAngle)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.fillArc</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawPolyline(int[] xPoints, int[] yPoints, int nPoints)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.drawPolyline</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawPolygon(int[] xPoints, int[] yPoints, int nPoints)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.drawPolygon</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.fillPolygon(int[] xPoints, int[] yPoints, int nPoints)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.fillPolygon</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawString(String aString, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.drawString</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawString(AttributedCharacterIterator iterator, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.drawString</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawBytes(byte[] data, int offset, int length, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.drawBytes</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawChars(char[] data, int offset, int length, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.drawChars</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DebugGraphics.drawImage(Image img, int x, int y, ImageObserver observer)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.drawImage</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DebugGraphics.drawImage(Image img, int x, int y, int width, int height, ImageObserver observer)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.drawImage</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DebugGraphics.drawImage(Image img, int x, int y, Color bgcolor, ImageObserver observer)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.drawImage</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DebugGraphics.drawImage(Image img, int x, int y, int width, int height, Color bgcolor, ImageObserver observer)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.drawImage</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DebugGraphics.drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2, int sy2, ImageObserver observer)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.drawImage</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DebugGraphics.drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2, int sy2, Color bgcolor, ImageObserver observer)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.drawImage</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.copyArea(int x, int y, int width, int height, int destX, int destY)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.copyArea</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.dispose()
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics.dispose</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DebugGraphics.isDrawingBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 drawingBuffer 值。

@return 如果此对象将从 Buffer 绘制，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.setDebugOptions(int options)
<!-- END KEY -->
<!-- BEGIN DATA -->
启用/禁用有关每个图形操作的诊断信息。<b>options</b> 的值指示应该如何显示此信息。LOG_OPTION 导致打印一条文本消息。FLASH_OPTION 导致绘制被 flash 多次。BUFFERED_OPTION 创建一个新 Frame，该框架显示屏幕外缓冲区中的每个操作。当前值是 <b>options</b> 值的按位或。要禁用调试，请使用 NONE_OPTION。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DebugGraphics.getDebugOptions()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 DebugGraphics 的当前调试选项。
@see #setDebugOptions

<!-- END DATA -->
