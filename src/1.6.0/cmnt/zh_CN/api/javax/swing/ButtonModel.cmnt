<!-- BEGIN KEY -->
public interface javax.swing.ButtonModel extends java.awt.ItemSelectable
<!-- END KEY -->
<!-- BEGIN DATA -->
按钮的状态模型。
 <p>
 此模型用于常规按钮，也可以用于复选框和单选钮，它们是特殊种类的按钮。实际上，按钮的 UI 负责调用其模型上的方法来管理状态，细节如下：
 <p>
 简单地说，在一个常规按钮上按下并释放鼠标将触发按钮并导致触发 <code>ActionEvent</code>。可通过按钮（通常是空格键）的外观所定义的键盘键生成相同的行为。当按钮具有焦点时，按下并释放此键将得到相同的结果。对于复选框和单选钮，刚刚所描述的鼠标或键盘的等效序列导致选中该按钮。
 <p>
 详细地说，当与鼠标一起使用时，按钮的状态模型的工作方式如下：
 <br>
 在按钮的上方按下鼠标使得模型既被选中又被按下。只要鼠标保持按下，模型就保持按下，即使鼠标移到按钮之外也是如此。相反，只有当鼠标在按钮边界内保持按下时，模型才是被选中的（它可移进或移出按钮的边界，但是只有在按钮中的那部分时间模型才是被选中的）。当在模型被选中的同时释放鼠标时，也就是说当鼠标以前在按钮上按下（并且尚未释放），之后在该按钮上方释放时，将触发按钮和 <code>ActionEvent</code>。鼠标释放后，模型就处于未被选中和未被按下状态。
 <p>
 详细地说，当与键盘一起使用时，按钮状态模型的工作方式如下：
 <br>
 当按钮具有焦点时，按下键盘键所定义的外观使得模型既被选中又被按下。只要此键保持按下，模型就保持此状态。释放该键会将模型设置为未被选中和未被按下、触发按钮并导致触发 <code>ActionEvent</code>。

@version 1.26 12/19/03。
@author Jeff Dinkins

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.ButtonModel.isArmed()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示触发按钮操作的部分委托事项。 

@return 如果按钮被选中，并准备触发它，则返回 <code>true</code>
@see #setArmed

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.ButtonModel.isSelected()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示按钮是否已经被选择。只有某些类型的按钮需要此指示，比如单选钮和复选框。

@return 如果按钮已选择，则返回 <code>true</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.ButtonModel.isEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示是否可通过输入设备（比如鼠标指针）选择或触发按钮。

@return 如果启用按钮，则返回 <code>true</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.ButtonModel.isPressed()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示按钮是否已被按下。

@return 如果按钮已被按下，则返回 <code>true</code> 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.ButtonModel.isRollover()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示鼠标是否在按钮上。

@return 如果鼠标在按钮上，则返回 <code>true</code> 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.setArmed(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此按钮标记为选中或未选中。
 
@param b 是否应该选中该按钮

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.setSelected(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
选择或取消选择该按钮。

@param b 为 <code>true</code> 表示选择该按钮，为 <code>false</code> 表示取消对该按钮的选择。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.setEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
启用或禁用该按钮。
 
@param b 是否应该启用该按钮
@see #isEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.setPressed(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
将按钮设置为按下或未被按下。
 
@param b 是否应该按下该按钮
@see #isPressed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.setRollover(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置或清除该按钮的翻转状态
 
@param b 该按钮是否处于翻转状态
@see #isRollover

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.setMnemonic(int key)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置该按钮的键盘助记符（快捷键或加速键）。

@param key 指示加速键的 int 值

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ButtonModel.getMnemonic()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取该按钮的键盘助记符。

@return 指示加速键的 int 值
@see #setMnemonic

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.setActionCommand(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置动作命令字符串，在触发按钮时，该字符串将作为 <code>ActionEvent</code> 的一部分被发送。

@param s 标识生成的事件的 <code>String</code>
@see #getActionCommand
@see java.awt.event.ActionEvent#getActionCommand

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.ButtonModel.getActionCommand()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该按钮的动作命令字符串。

@return 标识生成的事件的 <code>String</code>
@see #setActionCommand

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.setGroup(ButtonGroup group)
<!-- END KEY -->
<!-- BEGIN DATA -->
标识该按钮所属的组，这是单选钮所需要的，单选钮在它们的组内相互排斥。

@param group 该按钮所属的 <code>ButtonGroup</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.addActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
向模型添加一个 <code>ActionListener</code>。

@param l 要添加的侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.removeActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
从模型中移除一个 <code>ActionListener</code>。

@param l 要移除的侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.addItemListener(ItemListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
向模型添加一个 <code>ItemListener</code>。

@param l 要添加的侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.removeItemListener(ItemListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
从模型中移除一个 <code>ItemListener</code>。

@param l 要移除的侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.addChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
向模型添加一个 <code>ChangeListener</code>。

@param l 要添加的侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.removeChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
从模型中移除一个 <code>ChangeListener</code>。

@param l 要移除的侦听器

<!-- END DATA -->
