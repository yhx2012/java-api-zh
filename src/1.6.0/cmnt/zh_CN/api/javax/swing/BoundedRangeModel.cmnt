<!-- BEGIN KEY -->
public interface javax.swing.BoundedRangeModel
<!-- END KEY -->
<!-- BEGIN DATA -->
定义由 <code>Slider</code> 和 <code>ProgressBar</code> 这类组件使用的数据模型。定义四个相关的整数属性：minimum、maximum、extent 和 value。这四个整数定义了两个嵌套的区域，如下所示：
 <pre>
 minimum &lt;= value &lt;= value+extent &lt;= maximum
 </pre>
外部区域是 <code>minimum,maximum</code>，内部区域是 <code>value,value+extent</code>。内部区域必须位于外部区域内，即 <code>value</code> 必须小于或等于 <code>maximum</code>，而 <code>value+extent</code> 必须大于或等于 <code>minimum</code>，并且 <code>maximum</code> 必须大于或等于 <code>minimum</code>。此模型有一些让人微感吃惊的功能。这些奇特功能的存在是为了方便 Swing BoundedRangeModel 客户端，比如 <code>Slider</code> 和 <code>ScrollBar</code>。
 <ul>
 <li> 
minimum 和 maximum 设置方法&ldquo;纠正&rdquo;其他三个属性，以适应其新 value 参数。例如，设置该模型的 minimum 属性可能更改其 maximum、value 和 extent 属性（以此顺序），以维持上述约束。  
 
 <li>
value 和 extent 设置方法&ldquo;纠正&rdquo;其参数，以符合其他三个属性定义的限制。例如，如果 <code>value == maximum</code>，则 <code>setExtent(10)</code> 会将 extent 更改为（更改回）零。
 
 <li> 
这四个 BoundedRangeModel 值被定义为 Java Beans 属性，不过，Swing ChangeEvent 被用来通知客户端发生的更改，而不是 PropertyChangeEvent。这样做是为了保持监视 BoundedRangeModel 有一个低开销。更改常常根据 MouseDragged 比率进行报告。 
 </ul>

 <p>
 
有关指定滑块使用的自定义有限范围模型的示例，请参阅 <em>The Java Tutorial</em> 中的 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/overview/anatomy.html">The Anatomy of a Swing-Based Program</a> 一节。
 
@version 1.28 12/19/03
@author Hans Muller
@see DefaultBoundedRangeModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.BoundedRangeModel.getMinimum()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最小的可接受值。

@return minimum 属性的值
@see #setMinimum

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.BoundedRangeModel.setMinimum(int newMinimum)
<!-- END KEY -->
<!-- BEGIN DATA -->
将模型的 minimum 设置为 <I>newMinimum</I>。其他三个属性可能也要更改，以确保：
 <pre>
 minimum &lt;= value &lt;= value+extent &lt;= maximum
 </pre>
 <p>
如果模型发生更改，则通知所有侦听器。

@param newMinimum 模型的新 minimum
@see #getMinimum
@see #addChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.BoundedRangeModel.getMaximum()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回模型的 maximum。注意，模型值的上限是 (maximum - extent)。

@return      maximum 属性的值。
@see #setMaximum
@see #setExtent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.BoundedRangeModel.setMaximum(int newMaximum)
<!-- END KEY -->
<!-- BEGIN DATA -->
将模型的 maximum 设置为 <I>newMaximum</I>。其他三个属性可能也要更改，以确保
 <pre>
 minimum &lt;= value &lt;= value+extent &lt;= maximum
 </pre>
 <p>
如果模型发生更改，则通知所有侦听器。

@param newMaximum 模型的新 maximum
@see #getMaximum
@see #addChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.BoundedRangeModel.getValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回模型的当前值。注意，模型值的上限是 <code>maximum - extent</code>，下限是 <code>minimum</code>。

@return  模型的值
@see     #setValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.BoundedRangeModel.setValue(int newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>newValue</code> 满足模型的约束限制，则将模型的当前值设置为 <code>newValue</code>。这些约束限制是：
 <pre>
 minimum &lt;= value &lt;= value+extent &lt;= maximum
 </pre>
否则，如果 <code>newValue</code> 小于 <code>minimum</code>，则将它设置为 <code>minimum</code>；如果它大于 <code>maximum</code>，则将它设置为 <code>maximum</code>；如果它大于 <code>value+extent</code>，则将它设置为 <code>value+extent</code>。
 <p>
在对滚动条使用 BoundedRange 模型时，value 指定滚动条调节器（也称为 &quot;thumb&quot; 或 &quot;elevator&quot;）的起始点。value 通常表示正被滚动对象的可见部分的起始点。
 <p>
如果模型发生更改，则通知所有侦听器。

@param newValue 模型的新值
@see #getValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.BoundedRangeModel.setValueIsAdjusting(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
此属性指示，即将对模型值所做的任何更改都应被认为是一个单独的事件。在开始对该值进行一系列的更改时，此属性将被设置为 true，在该值已经结束更改时，该值将被设置为 false。通常，此方法允许侦听器只在提交了最终值时采取行动，而不是必须对所有中间值进行更新。
 <p>
滑块和滚动条在进行拖动时使用此属性。
 
@param b 如果即将进行的 value 属性更改是一系列更改的一部分，则该参数为 true

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.BoundedRangeModel.getValueIsAdjusting()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 value 属性的当前更改是一系列更改的一部分，则返回 true。
 
@return valueIsAdjustingProperty。
@see #setValueIsAdjusting

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.BoundedRangeModel.getExtent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回模型的 extent，即从模型的 value 开始的内部范围的长度。  

@return  模型的 extent 属性的值
@see     #setExtent
@see     #setValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.BoundedRangeModel.setExtent(int newExtent)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置模型的 extent。<I>newExtent</I> 被迫大于或等于零，且小于等于 maximum - value。   
 <p>
在对滚动条使用 BoundedRange 模型时，extent 定义滚动条调节器（也称为 &quot;thumb&quot; 或 &quot;elevator&quot;）的长度。extent 通常表示正被滚动的对象的可见量。在使用滑块时，extent 确定 value 可以&ldquo;跳跃&rdquo;多少，例如当用户按下 PgUp 或 PgDn 时跳跃的量。
 <p>
如果模型发生更改，则通知所有侦听器。

@param  newExtent 模型的新 extent
@see #getExtent
@see #setValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.BoundedRangeModel.setRangeProperties(int value, int extent, int min, int max, boolean adjusting)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法使用一个方法调用设置模型的所有数据。该方法引起生成一个更改事件。在需要同时调整所有模型数据并且不想产生一些个别更改事件时，此方法很方便。

@param value  给出当前值的一个 int 值
@param extent 给出 value 可以&ldquo;跳跃&rdquo;的量的 int 值
@param min    给出 minimum 值的 int 值
@param max    给出 maximum 值的 int 值
@param adjusting 一个 boolean 值，如果正在进行一系列的更改，则该参数为 true

@see #setValue
@see #setExtent
@see #setMinimum
@see #setMaximum
@see #setValueIsAdjusting

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.BoundedRangeModel.addChangeListener(ChangeListener x)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 ChangeListener 添加到模型的侦听器列表中。

@param x 要添加的 ChangeListener
@see #removeChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.BoundedRangeModel.removeChangeListener(ChangeListener x)
<!-- END KEY -->
<!-- BEGIN DATA -->
从模型的侦听器列表中移除一个 ChangeListener。

@param x 要移除的 ChangeListener
@see #addChangeListener

<!-- END DATA -->
