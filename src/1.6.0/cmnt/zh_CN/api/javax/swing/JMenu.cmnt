<!-- BEGIN KEY -->
public class javax.swing.JMenu extends javax.swing.JMenuItem implements javax.accessibility.Accessible, javax.swing.MenuElement
<!-- END KEY -->
<!-- BEGIN DATA -->
菜单的该实现是一个包含 <code>JMenuItem</code> 的弹出窗口，用户选择 <code>JMenuBar</code> 上的项时会显示该 JMenuItem。除 <code>JMenuItem</code> 之外，<code>JMenu</code> 还可以包含 <code>JSeparator</code>。
 <p>
菜单本质上是带有关联 <code>JPopupMenu</code> 的按钮。当按下&ldquo;按钮&rdquo;时，就会显示 <code>JPopupMenu</code>。如果&ldquo;按钮&rdquo;位于 <code>JMenuBar</code> 上，则该菜单为顶层窗口。如果&ldquo;按钮&rdquo;是另一个菜单项，则 <code>JPopupMenu</code> 就是&ldquo;右拉&rdquo;菜单。
 <p>
通过 <code><a href="Action.html">Action</a></code> 可以配置菜单，并进行一定程度的控制。对菜单使用 <code>Action</code> 有许多直接配置菜单所不及的优点。有关更多信息，请参阅<a href="Action.html#buttonActions">支持 <code>Action</code> 的 Swing 组件</a>，可以在 <em>The Java Tutorial</em> 中的 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/misc/action.html">How
 to Use Actions</a> 一节找到更多信息。
 <p>
有关使用菜单的示例和信息，请参阅 <em>The Java Tutorial</em> 中的 <a href="http://java.sun.com/doc/books/tutorial/uiswing/components/menu.html">How to Use Menus</a> 一节。
 <p>
<strong>警告：</strong>Swing 不是线程安全的。有关更多信息，请参阅 <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参阅 {@link java.beans.XMLEncoder}。

@beaninfo attribute: isContainer true description: A popup window containing menu items displayed in a menu bar.

@version 1.172 12/19/03
@author Georges Saab
@author David Karlton
@author Arnaud Weber
@see JMenuItem
@see JSeparator
@see JMenuBar
@see JPopupMenu

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JMenu.WinListener javax.swing.JMenu.popupListener
<!-- END KEY -->
<!-- BEGIN DATA -->
弹出菜单的窗口关闭侦听器。

@see WinListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenu()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造没有文本的新 <code>JMenu</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenu(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新 <code>JMenu</code>，用提供的字符串作为其文本。

@param s  菜单标签的文本

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenu(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个从提供的 <code>Action</code> 获取其属性的菜单。
@param a <code>Action</code>

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenu(String s, boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新 <code>JMenu</code>，用提供的字符串作为其文本并指定其是否为分离式 (tear-off) 菜单。

@param s 菜单标签的文本
@param b 菜单是否是分离式的（尚未实现）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
利用当前外观的值重置 UI 属性。

@see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JMenu.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回呈现此组件的 L&amp;F 类的名称。

@return 字符串 &quot;MenuUI&quot;
@see JComponent#getUIClassID
@see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.setModel(ButtonModel newModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置&ldquo;菜单按钮&rdquo;的数据模型，即用户单击可以打开或关闭菜单的标签。

@param newModel <code>ButtonModel</code>
@see #getModel
@beaninfo description: The menu's model bound: true expert:true hidden:true

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JMenu.isSelected()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果菜单是当前选择的（即高亮显示的）菜单，则返回 true。

@return 如果选择了菜单，则返回 true；否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.setSelected(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置菜单的选择状态。

@param b  true 表示选择（高亮显示）菜单，false 表示取消选择菜单
@beaninfo description: When the menu is selected, its popup child is shown. expert:true hidden:true

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JMenu.isPopupMenuVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果菜单的弹出窗口可见，则返回 true。

@return 如果菜单可见，则返回 true；否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.setPopupMenuVisible(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置菜单弹出的可见性。如果未启用菜单，则此方法无效。

@param b 一个 boolean 值，true 表示菜单可见，false 表示隐藏
@beaninfo description: The popup menu's visibility expert:true hidden:true

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Point javax.swing.JMenu.getPopupMenuOrigin()
<!-- END KEY -->
<!-- BEGIN DATA -->
计算 <code>JMenu</code> 的弹出菜单的原点。此方法使用名为 <code>Menu.menuPopupOffsetX</code>、<code>Menu.menuPopupOffsetY</code>、<code>Menu.submenuPopupOffsetX</code> 和 <code>Menu.submenuPopupOffsetY</code> 的外观属性调整弹出的确切位置。

@return 菜单的坐标空间中的一个 <code>Point</code>，该点应该用作 <code>JMenu</code> 的弹出菜单的原点

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JMenu.getDelay()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回子菜单向上或向下弹出前建议的延迟（以毫秒为单位）。每个外观 (L&amp;F) 都可以确定它自己查看 <code>delay</code> 属性的策略。在大多数情况下，对于顶层菜单或正在拖动的菜单，不查看延迟。<code>delay</code> 的默认值为 0。此方法是外观代码的属性，用于管理各种 UI 实现的特质。

@return <code>delay</code> 属性

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.setDelay(int d)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置菜单的 <code>PopupMenu</code> 向上或向下弹出前建议的延迟。每个外观 (L&amp;F) 都可以确定它自己查看 delay 属性的策略。在大多数情况下，对于顶层菜单或正在拖动的菜单，不查看延迟。此方法是外观代码的属性，用于管理各种 UI 实现的特质。

@param       d 要延迟的毫秒数
@exception   IllegalArgumentException 如果 <code>d</code> 小于 0
@beaninfo description: The delay between menu selection and making the popup menu visible expert:true

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.setMenuLocation(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置弹出组件的位置。

@param x 弹出菜单的新位置的 x 坐标
@param y 弹出菜单的新位置的 y 坐标

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem javax.swing.JMenu.add(JMenuItem menuItem)
<!-- END KEY -->
<!-- BEGIN DATA -->
将某个菜单项追加到此菜单的末尾。返回添加的菜单项。

@param menuItem 要添加的 <code>JMenuitem</code>
@return 已添加的 <code>JMenuItem</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JMenu.add(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将某个组件追加到此菜单的末尾。返回添加的组件。

@param c 要添加的 <code>Component</code>
@return 已添加的 <code>Component</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JMenu.add(Component c, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->

将指定组件添加到此容器的给定位置上。如果 <code>index</code> 等于 -1，则将组件追加到末尾。
@param     c   要添加的 <code>Component</code>
@param     index    要插入组件的位置
@return    已添加的 <code>Component</code>
@see	  #remove
@see java.awt.Container#add(Component, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem javax.swing.JMenu.add(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定文本的新菜单项，并将其追加到此菜单的末尾。
  
@param s 要添加的菜单项的字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem javax.swing.JMenu.add(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建连接到指定 <code>Action</code> 对象的新菜单项，并将其追加到此菜单的末尾。

@param a 要添加的菜单项的 <code>Action</code>
@see Action

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JMenuItem javax.swing.JMenu.createActionComponent(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
该工厂方法创建添加到 <code>JMenu</code> 的 <code>Action</code> 的 <code>JMenuItem</code>。

@param a 要添加的菜单项的 <code>Action</code>
@return 新菜单项
@see Action

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeListener javax.swing.JMenu.createActionChangeListener(JMenuItem b)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个正确配置的 <code>PropertyChangeListener</code>，它在 <code>Action</code> 发生更改时更新控件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.addSeparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
将新分隔符追加到菜单的末尾。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.insert(String s, int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定位置插入具有指定文本的新菜单项。

@param s 要添加的菜单项的文本
@param pos 指定要添加新菜单项的位置的整数
@exception IllegalArgumentException 当 <code>pos</code> 的值 &lt; 0 时

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem javax.swing.JMenu.insert(JMenuItem mi, int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定位置插入指定的 <code>JMenuitem</code>。

@param mi 要添加的 <code>JMenuitem</code>
@param pos 指定要添加新 <code>JMenuitem</code> 的位置的整数
@return 新菜单项
@exception IllegalArgumentException 如果 <code>pos</code> 的值 &lt; 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem javax.swing.JMenu.insert(Action a, int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定位置插入连接到指定 <code>Action</code> 对象的新菜单项。

@param a 要添加的菜单项的 <code>Action</code> 对象
@param pos 指定要添加新菜单项的位置的整数
@exception IllegalArgumentException 如果 <code>pos</code> 的值 &lt; 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.insertSeparator(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
在指定的位置插入分隔符。

@param       index 指定要插入菜单分隔符的位置的整数
@exception   IllegalArgumentException 如果 <code>index</code> 的值 &lt; 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem javax.swing.JMenu.getItem(int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->

返回指定位置的 <code>JMenuItem</code>。如果位于 <code>pos</code> 的组件不是菜单项，则返回 <code>null</code>。包含此方法是为了 AWT 兼容性。

@param pos    指定位置的整数
@exception   IllegalArgumentException 如果 <code>pos</code> 的值 &lt; 0
@return  指定位置的菜单项；如果指定位置的项不是菜单项，则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JMenu.getItemCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回菜单上的项数，包括分隔符。包含此方法是为了与 AWT 的兼容性。

@return 等于菜单上的项数的整数
@see #getMenuComponentCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JMenu.isTearOff()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此菜单是分离式的，则返回 true。此方法尚未实现。

@return 如果菜单是分离式的，则返回 true；否则返回 false
@exception  Error  如果调用（此方法尚未实现）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.remove(JMenuItem item)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此菜单移除指定的菜单项。如果不存在弹出菜单，则此方法无效。

@param    item 要从该菜单移除的 <code>JMenuItem</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.remove(int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此菜单移除指定索引处的菜单项。

@param       pos 要移除的项的位置
@exception   IllegalArgumentException 如果 <code>pos</code> 的值 &lt; 0 或者 <code>pos</code> 大于菜单项数

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.remove(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此菜单移除组件 <code>c</code>。

@param       c 要移除的组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.removeAll()
<!-- END KEY -->
<!-- BEGIN DATA -->
从此菜单移除所有菜单项。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JMenu.getMenuComponentCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回菜单上的组件数。

@return 包含菜单上的组件数的整数

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JMenu.getMenuComponent(int n)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回位于位置 <code>n</code> 的组件。

@param n 要返回的组件的位置
@return 请求的组件；如果不存在弹出菜单，则返回 <code>null</code>


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component[] javax.swing.JMenu.getMenuComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回菜单子组件的 <code>Component</code> 数组。注意，此操作返回弹出菜单中的所有 <code>Component</code>，包括分隔符。

@return <code>Component</code> 数组；如果不存在弹出菜单，则返回空数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JMenu.isTopLevelMenu()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果菜单是&ldquo;顶层菜单&rdquo;（即菜单栏的直接子级），则返回 true。

@return 如果从菜单栏激活菜单，则返回 true；如果从另一个菜单的菜单项激活菜单，则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JMenu.isMenuComponent(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果在子菜单层次结构中存在指定的组件，则返回 true。

@param c 要测试的 <code>Component</code>
@return 如果 <code>Component</code> 存在，则返回 true；否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JPopupMenu javax.swing.JMenu.getPopupMenu()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此菜单关联的弹出菜单。如果不存在弹出菜单，则将创建一个。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.addMenuListener(MenuListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加菜单事件的侦听器。

@param l 要添加的侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.removeMenuListener(MenuListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除菜单事件的侦听器。

@param l 要移除的侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.MenuListener[] javax.swing.JMenu.getMenuListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回利用 addMenuListener() 添加到此 JMenu 的所有 <code>MenuListener</code> 组成的数组。

@return 添加的所有 <code>MenuListener</code>，如果没有添加侦听器，则返回一个空数组
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenu.fireMenuSelected()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有对此事件类型的通知感兴趣的已注册侦听器。以延迟方式创建事件实例。

@exception Error  如果存在 <code>null</code> 侦听器
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenu.fireMenuDeselected()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有对此事件类型的通知感兴趣的已注册侦听器。以延迟方式创建事件实例。

@exception Error  如果存在 <code>null</code> 侦听器
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenu.fireMenuCanceled()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有对此事件类型的通知感兴趣的已注册侦听器。以延迟方式创建事件实例。

@exception Error  如果存在 <code>null</code> 侦听器
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JMenu.WinListener javax.swing.JMenu.createWinListener(JPopupMenu p)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建弹出菜单的窗口关闭侦听器。

@param p <code>JPopupMenu</code>
@return 新窗口关闭侦听器

@see WinListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.menuSelectionChanged(boolean isIncluded)
<!-- END KEY -->
<!-- BEGIN DATA -->
当菜单栏选择更改为激活或取消激活此菜单时传递消息。重写 <code>JMenuItem.menuSelectionChanged</code>。

@param isIncluded  如果此菜单处于激活状态，则返回 true；如果不是，则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.MenuElement[] javax.swing.JMenu.getSubElements()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由 <code>MenuElement</code> 组成的数组，其中包含此菜单组件的子菜单。如果弹出菜单为 <code>null</code>，则返回空数组。要求此方法遵守 <code>MenuElement</code> 接口。注意，由于 <code>JSeparator</code> 不遵守 <code>MenuElement</code> 接口，因此此数组只包含 <code>JMenuItem</code>。

@return <code>MenuElement</code> 对象的数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JMenu.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于绘制此 <code>MenuElement</code> 的 <code>java.awt.Component</code>。返回的组件用于转换事件并检测某个事件是否位于菜单组件中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.applyComponentOrientation(ComponentOrientation o)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此菜单及其中包含的所有组件的 <code>ComponentOrientation</code> 属性。这包括由 {@link #getMenuComponents getMenuComponents} 返回的所有组件。

@param o 此菜单的新组件的方向性和其中包含组件的方向性。
@exception NullPointerException 如果 <code>orientation</code> 为 null。
@see java.awt.Component#setComponentOrientation
@see java.awt.Component#getComponentOrientation
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.setAccelerator(KeyStroke keyStroke)
<!-- END KEY -->
<!-- BEGIN DATA -->

没有为 <code>JMenu</code> 定义 <code>setAccelerator</code>。而使用 <code>setMnemonic</code> 来代替。
@param keyStroke  键击组合，它调用 <code>JMenuItem</code> 的 actionlistener 而不必导航菜单的层次结构
@exception Error  如果调用（没有为 JMenu 定义此方法。使用 <code>setMnemonic</code> 来代替）

@beaninfo description: The keystroke combination which will invoke the JMenuItem's actionlisteners without navigating the menu hierarchy hidden:true

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenu.processKeyEvent(KeyEvent evt)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理键击事件，如助记符和加速器。

@param evt  要处理的键事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.doClick(int pressTime)
<!-- END KEY -->
<!-- BEGIN DATA -->
以编程方式执行&ldquo;单击&rdquo;。为使菜单弹出，此方法重写 <code>AbstractButton.doClick</code> 方法。
@param pressTime  指示按下按钮的毫秒数

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JMenu.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JMenu</code> 的字符串表示形式。此方法仅在进行调试的时候使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。
 
@return  此 JMenu 的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JMenu.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 JMenu 关联的 AccessibleContext。对于 JMenu，AccessibleContext 采用 AccessibleJMenu 的形式。必要时创建一个新的 AccessibleJMenu 实例。

@return 一个 AccessibleJMenu，它充当此 JMenu 的 AccessibleContext 

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JMenu.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

请参阅 <code>JComponent</code> 中的 <code>readObject</code> 和 <code>writeObject</code>，以获取关于 Swing 中序列化的更多信息。

<!-- END DATA -->
