<!-- BEGIN KEY -->
public class javax.swing.SpinnerNumberModel extends javax.swing.AbstractSpinnerModel implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->

用于数字序列的 <code>SpinnerModel</code>。该序列的上下边界由名为 <code>minimum</code> 和 <code>maximum</code> 的属性定义。<code>nextValue</code> 和 <code>previousValue</code> 方法计算的增加或减少的大小由名为 <code>stepSize</code> 的属性定义。该 <code>minimum</code> 和 <code>maximum</code> 属性可以为 <code>null</code>，指示该序列没有下限和上限。此类中的所有属性都根据以下两个一般类型定义：<code>Number</code> 和 <code>Comparable</code>，以便适应所有 Java 数字类型。在内部，仅支持其类型为以下某个基本 <code>Number</code> 类型的值：<code>Double</code>、<code>Float</code>、<code>Long</code>、<code>Integer</code>、<code>Short</code> 或 <code>Byte</code>。  
 <p> 
要创建从 0 到 100 整数范围（初始值为 50）的 <code>SpinnerNumberModel</code>，可以写入： 
 <pre> 
 Integer value = new Integer(50); 
Integer min = new Integer(0);
 Integer max = new Integer(100); 
 Integer step = new Integer(1); 
 SpinnerNumberModel model = new SpinnerNumberModel(value, min, max, step); 
 int fifty = model.getNumber().intValue(); 
 </pre> 
 <p> 
Integer 和 double 的 spinner 是很常见的，因此提供了针对这些情况的特殊构造方法。例如，要创建前一示例中的模式，也可以写入： 
 <pre> 
 SpinnerNumberModel model = new SpinnerNumberModel(50, 0, 100, 1); 
 </pre>
 <p>
此模式继承的是一个 <code>ChangeListener</code>。每当该模式的 <code>value</code>、<code>stepSize</code>、<code>minimum</code> 或 <code>maximum</code> 属性发生变化时，就会通知该 <code>ChangeListeners</code>。

@see JSpinner
@see SpinnerModel
@see AbstractSpinnerModel
@see SpinnerListModel
@see SpinnerDateModel
 
@version 1.12 05/12/04
@author Hans Muller
@since 1.4 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.SpinnerNumberModel(Number value, java.lang.Comparable minimum, java.lang.Comparable maximum, Number stepSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个表示从 <code>minimum</code> 到 <code>maximum</code> 的闭区间数字序列的 <code>SpinnerModel</code>。<code>nextValue</code> 和 <code>previousValue</code> 方法通过分别添加或减去 <code>stepSize</code> 计算该序列的元素。所有参数必须是相互 <code>Comparable</code> 的，<code>value</code> 和 <code>stepSize</code> 必须是 <code>Integer</code> <code>Long</code>、<code>Float</code> 或 <code>Double</code> 的实例。
 <p>
该 <code>minimum</code> 和 <code>maximum</code> 参数可以为 <code>null</code>，指示该范围没有上下边界。如果 <code>value</code> 或 <code>stepSize</code> 为 <code>null</code>，或者 <code>minimum</code> 和 <code>maximum</code> 两者都是指定值，且 <code>mininum &gt; maximum</code>，则抛出一个 <code>IllegalArgumentException</code>。同样，如果 <code>(minimum &lt;= value &lt;= maximum)</code> 为 false，则抛出一个 <code>IllegalArgumentException</code>。
 
@param value 该模式的当前（非 <code>null</code>）值
@param minimum 该序列中第一个数或 <code>null</code>
@param maximum 该序列中的最后一个数或 <code>null</code>
@param stepSize 该序列中元素之间的区别
 
@throws IllegalArgumentException 如果 stepSize 或值为 <code>null</code>，或者以下表达式为 false：<code>minimum &lt;= value &lt;= maximum</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.SpinnerNumberModel(int value, int minimum, int maximum, int stepSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有指定 <code>value</code>、<code>minimum</code>/<code>maximum</code> 边界和 <code>stepSize</code> 的 <code>SpinnerNumberModel</code>。
 
@param value 该模式的当前值
@param minimum 该序列中的第一个数
@param maximum 该序列中的最后一个数
@param stepSize 该序列中元素之间的区别
@throws IllegalArgumentException 如果以下表达式为 false：<code>minimum &lt;= value &lt;= maximum</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.SpinnerNumberModel(double value, double minimum, double maximum, double stepSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有指定 <code>value</code>、<code>minimum</code>/<code>maximum</code> 边界和 <code>stepSize</code> 的 <code>SpinnerNumberModel</code>。
 
@param value 该模式的当前值
@param minimum 该序列中的第一个数
@param maximum 该序列中的最后一个数
@param stepSize 该序列中元素之间的区别
@throws IllegalArgumentException 如果以下表达式为 false：<code>minimum &lt;= value &lt;= maximum</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.SpinnerNumberModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个没有 <code>minimum</code> 或 <code>maximum</code> 值、<code>stepSize</code> 等于 1 且初始值为零的 <code>SpinnerNumberModel</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.SpinnerNumberModel.setMinimum(java.lang.Comparable minimum)
<!-- END KEY -->
<!-- BEGIN DATA -->
更改此序列中数字的下边界。如果 <code>minimum</code> 为 <code>null</code>，则不存在下边界。此处不进行边界检查；新 <code>minimum</code> 值可能会使该构造方法强制执行的 <code>(minimum &lt;= value &lt;= maximum)</code> 等式失效。这样可以简化更新该模式，调用 <code>getNextValue</code>、<code>getPreviousValue</code> 或 <code>setValue</code> 方法之前自然应该确保该等式为 true。
 <p>
通常，此属性是一个与 <code>value</code> 同一类型的 <code>Number</code>，但是，与该值同一类型 <code>Number</code> 可以使用具有 <code>compareTo</code> 方法的任何 <code>Comparable</code>。例如，如果值为 <code>Long</code>，则 <code>minimum</code> 可能是一个这样定义的 Date 子类：
 <pre>
 MyDate extends Date {  // Date already implements Comparable
     public int compareTo(Long o) {
         long t = getTime();
         return (t &lt; o.longValue() ? -1 : (t == o.longValue() ? 0 : 1));
     }
 }
 </pre>
 <p>
如果 <code>minimum</code> 已经更改，则此方法会激发一个 <code>ChangeEvent</code>。
 
@param minimum 一个 <code>Comparable</code>，它具有与 <code>value</code> 同一类型的 <code>Number</code> 的 <code>compareTo</code> 方法
@see #getMinimum
@see #setMaximum
@see SpinnerModel#addChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Comparable javax.swing.SpinnerNumberModel.getMinimum()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此序列中的第一个数字。
 
@return 该 <code>minimum</code> 属性的值
@see #setMinimum

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.SpinnerNumberModel.setMaximum(java.lang.Comparable maximum)
<!-- END KEY -->
<!-- BEGIN DATA -->
更改此序列中数字的上边界。如果 <code>maximum</code> 为 <code>null</code>，则不存在上边界。此处不进行边界检查；新 <code>maximum</code> 值可能会使该构造方法强制执行的 <code>(minimum &lt;= value &lt; maximum)</code> 等式失效。这样可以简化更新该模式，调用 <code>next</code>、<code>previous</code> 或 <code>setValue</code> 方法之前自然应该确保该等式为 true。  
 <p>
通常，此属性是一个与 <code>value</code> 同一类型的 <code>Number</code>，但是，与该值同一类型 <code>Number</code> 可以使用具有 <code>compareTo</code> 方法的任何 <code>Comparable</code>。有关示例，请参阅 <a href="#setMinimum(java.lang.Comparable)"><code>setMinimum</code></a>。
 <p>
如果 <code>maximum</code> 已经更改，则此方法会激发一个 <code>ChangeEvent</code>。
 
@param maximum 一个 <code>Comparable</code>，它具有与 <code>value</code> 同一类型的 <code>Number</code> 的 <code>compareTo</code> 方法
@see #setMinimum
@see SpinnerModel#addChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Comparable javax.swing.SpinnerNumberModel.getMaximum()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该序列中的最后一个数字。
 
@return 该 <code>maximum</code> 属性的值
@see #setMaximum

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.SpinnerNumberModel.setStepSize(Number stepSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
更改由 <code>getNextValue</code> 和 <code>getPreviousValue</code> 方法计算的值更改的大小。如果 <code>stepSize</code> 为 <code>null</code>，则抛出一个 <code>IllegalArgumentException</code>。
 <p>
如果 <code>stepSize</code> 已经更改，则此方法会激发一个 <code>ChangeEvent</code>。
 
@param stepSize 由 <code>getNextValue</code> 和 <code>getPreviousValue</code> 方法计算的值更改的大小
@see #getNextValue
@see #getPreviousValue
@see #getStepSize
@see SpinnerModel#addChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.swing.SpinnerNumberModel.getStepSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由 <code>getNextValue</code> 和 <code>getPreviousValue</code> 方法计算的值更改的大小。  
 
@return 该 <code>stepSize</code> 属性的值
@see #setStepSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.SpinnerNumberModel.getNextValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该序列中的下一个数字。
 
@return <code>value + stepSize</code>，如果和超过 <code>maximum</code>，则返回 <code>null</code>。
 
@see SpinnerModel#getNextValue
@see #getPreviousValue
@see #setStepSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.SpinnerNumberModel.getPreviousValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该序列中的上一个数字。
 
@return <code>value - stepSize</code>，如果和小于 <code>minimum</code>，则返回 <code>null</code>。
 
@see SpinnerModel#getPreviousValue
@see #getNextValue
@see #setStepSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.swing.SpinnerNumberModel.getNumber()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该序列的当前元素的值。
 
@return 值属性
@see #setValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.SpinnerNumberModel.getValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该序列的当前元素的值。
 
@return 值属性
@see #setValue
@see #getNumber

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.SpinnerNumberModel.setValue(Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此序列的当前元素。如果 <code>value</code> 为 <code>null</code>，或不为 <code>Number</code>，则抛出一个 <code>IllegalArgumentException</code>。此处不进行边界检查；新值可能会使该构造方法强制执行的 <code>(minimum &lt;= value &lt;= maximum)</code> 等式失效。还可以将该值设置为不会在该序列中自然出现的值，即一个不以 <code>stepSize</code> 为模的值。这样做是为了简化更新该模式，也是为了适应不希望限制由用户直接输入的值的 spinner。很自然，调用 <code>next</code>、<code>previous</code> 或 <code>setValue</code> 方法之前应该确保 <code>(minimum &lt;= value &lt;= maximum)</code> 等式为 true。  
 <p>
如果该值已更改，则此方法会激发一个 <code>ChangeEvent</code>。
 
@param value 此序列的当前（非 <code>null</code>）<code>Number</code>
@throws IllegalArgumentException 如果 <code>value</code> 为 <code>null</code> 或不为 <code>Number</code>
@see #getNumber
@see #getValue
@see SpinnerModel#addChangeListener

<!-- END DATA -->
