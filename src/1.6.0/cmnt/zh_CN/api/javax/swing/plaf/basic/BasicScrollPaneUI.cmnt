<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicScrollPaneUI extends javax.swing.plaf.ScrollPaneUI implements javax.swing.ScrollPaneConstants
<!-- END KEY -->
<!-- BEGIN DATA -->
ScrollPaneUI 的默认 L&F 实现。

@version 1.70 12/19/03
@author Hans Muller

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicScrollPaneUI.getMaximumSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
@return 新 Dimension(Short.MAX_VALUE, Short.MAX_VALUE)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicScrollPaneUI.getBaseline(JComponent c, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回基线。 

 @throws NullPointerException {@inheritDoc}
 @throws IllegalArgumentException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component.BaselineResizeBehavior javax.swing.plaf.basic.BasicScrollPaneUI.getBaselineResizeBehavior(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回一个枚举，它指示该组件的基线如何随大小的改变而发生更改。 

 @throws NullPointerException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.event.MouseWheelListener javax.swing.plaf.basic.BasicScrollPaneUI.createMouseWheelListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 MouseWheelListener 的实例，该实例由 installUI() 添加到 JScrollPane。返回的 MouseWheelListener 用于处理鼠标滚轮驱动的滚动。

@return      实现鼠标滚轮驱动滚动的 MouseWheelListener
@see #installUI
@see MouseWheelHandler
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeListener javax.swing.plaf.basic.BasicScrollPaneUI.createPropertyChangeListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建由 installUI() 添加到 JScrollPane 的 PropertyChangeListener 的实例。子类可以重写此方法以返回自定义 PropertyChangeListener，例如
 <pre>
 class MyScrollPaneUI extends BasicScrollPaneUI {
    protected PropertyChangeListener <b>createPropertyChangeListener</b>() {
        return new MyPropertyChangeListener();
    }
    public class MyPropertyChangeListener extends PropertyChangeListener {
        public void propertyChange(PropertyChangeEvent e) {
            if (e.getPropertyName().equals(&quot;viewport&quot;)) {
                // do some extra work when the viewport changes
            }
            super.propertyChange(e);
        }
    }
 }
 </pre>
 
@see java.beans.PropertyChangeListener
@see #installUI

<!-- END DATA -->
