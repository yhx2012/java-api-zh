<!-- BEGIN KEY -->
public static java.awt.Insets javax.swing.plaf.basic.BasicGraphicsUtils.getEtchedInsets()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>drawEtchedRect()</code> 绘制边框占用的空间量。

@return  浮雕化矩形的镶边

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Insets javax.swing.plaf.basic.BasicGraphicsUtils.getGrooveInsets()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>drawGroove()</code> 绘制边框占用的空间量。

@return  凹槽边框的 inset

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.plaf.basic.BasicGraphicsUtils.drawString(Graphics g, String text, int underlinedChar, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
像 <code>g.drawString</code> 那样利用图形 <code>g</code> 在位置 (x,y) 绘制字符串。<code>underlineChar</code> 在文本中第一次出现时将带有下划线。匹配算法不区分大小写。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.plaf.basic.BasicGraphicsUtils.drawStringUnderlineCharAt(Graphics g, String text, int underlinedIndex, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
像 <code>g.drawString</code> 那样利用图形 <code>g</code> 在位置 (<code>x</code>, <code>y</code>) 绘制字符串。文本中 <code>underlinedIndex</code> 处的字符将带有下划线。如果 <code>index</code> 超出 <code>text</code>（包括 &lt; 0）的边界，则没有任何内容有下划线。

@param g 用于绘制的图形
@param text 要绘制的字符串
@param underlinedIndex 文本中要加下划线的字符的索引
@param x 绘制位置的 x 坐标
@param y 绘制位置的 y 坐标
@since 1.4

<!-- END DATA -->
