<!-- BEGIN KEY -->
public class javax.swing.plaf.synth.SynthContext extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
一个不可变的瞬态对象，它包含有关 <code>Region</code> 的上下文信息。<code>SynthContext</code> 只在它传入的方法的使用期间被认为是有效的。换句话说，不应缓存传入的 <code>SynthContext</code> 并希望它仍然有效。

@version 1.9, 12/19/03
@since 1.5
@author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.synth.SynthContext(JComponent component, Region region, SynthStyle style, int state)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定值的 SynthContext。这意味着为自定义 UI 实现器并为其创建子类。您几乎不需要构造一个 SynthContext，尽管一些方法将构造一个 SynthContext。

@param component JComponent
@param region 标识 JComponent 的一部分
@param style 与组件有关的样式
@param state  SynthConstants 中定义的组件状态。
@throws NullPointerException 如果 component、region 或 style 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JComponent javax.swing.plaf.synth.SynthContext.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含 region 的承载组件。

@return 承载组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.synth.Region javax.swing.plaf.synth.SynthContext.getRegion()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回标识此状态的 Region。

@return 承载组件的 Region

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.synth.SynthStyle javax.swing.plaf.synth.SynthContext.getStyle()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 Region 相关的样式。

@return 与此 region 相关的 SynthStyle。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.synth.SynthContext.getComponentState()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回窗口小部件的状态，它是 <code>SynthConstants</code> 中定义的值的位掩码。Region 至少将处于以下状态之一：<code>ENABLED</code>、<code>MOUSE_OVER</code>、<code>PRESSED</code> 或 <code>DISABLED</code>。

@see SynthConstants
@return Component 的状态

<!-- END DATA -->
