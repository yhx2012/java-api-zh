<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicOptionPaneUI extends javax.swing.plaf.OptionPaneUI
<!-- END KEY -->
<!-- BEGIN DATA -->
为 <code>JOptionPane</code> 提供基本外观。<code>BasicMessagePaneUI</code> 提供将图标、消息和按钮置于 <code>Container</code> 中的方法。一般情况下，布局如下所示：<p>
 <pre>
        ------------------
        | i | message    |
        | c | message    |
        | o | message    |
        | n | message    |
        ------------------
        |     buttons    |
        |________________|
 </pre>
图标是 <code>Icon</code> 的实例，包装在 <code>JLabel</code> 中。消息是不透明对象，用于测试：如果消息为 <code>Component</code>，则将其添加到 <code>Container</code>；如果其为 <code>Icon</code>，则将其包装在 <code>JLabel</code> 中并添加到 <code>Container</code>，否则将其包装在 <code>JLabel</code> 中。
 <p>
当选项窗格的 <code>ComponentOrientation</code> 属性为水平的从左到右时，使用上述布局。布局将针对其他方向进行适当调整。
 <p>
<code>Container</code>、消息、图标和按钮都是根据抽象方法确定的。
 
@version 1.58 12/19/03
@author James Gosling
@author Scott Violet
@author Amy Fowler

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JOptionPane javax.swing.plaf.basic.BasicOptionPaneUI.optionPane
<!-- END KEY -->
<!-- BEGIN DATA -->
接收者为其提供外观的 <code>JOptionPane</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JComponent javax.swing.plaf.basic.BasicOptionPaneUI.inputComponent
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 optionPane.getWantsInput() 返回 true，则 JComponent 提供输入。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.plaf.basic.BasicOptionPaneUI.initialFocusComponent
<!-- END KEY -->
<!-- BEGIN DATA -->
利用 selectInitialValue 传递消息时接收焦点的组件。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicOptionPaneUI.hasCustomComponents
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 Component 包含在消息或按钮中，则将其设置为 true。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ComponentUI javax.swing.plaf.basic.BasicOptionPaneUI.createUI(JComponent x)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 BasicOptionPaneUI 实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicOptionPaneUI.installUI(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
安装作为传入 <code>JOptionPane</code> 的 L&F 的接收者。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicOptionPaneUI.uninstallUI(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
从传入拆分窗格的 L&F 控制器移除接收者。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicOptionPaneUI.getMinimumOptionPaneSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回选项窗格应该具有的最小大小。主要供希望提供不同最小大小的子类使用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicOptionPaneUI.getPreferredSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>c</code> 为包含接收者的 <code>JOptionPane</code>，则返回的首选大小为 <code>JOptionPane</code> 的 <code>LayoutManager</code> 的最大首选大小和 <code>getMinimumOptionPaneSize</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Container javax.swing.plaf.basic.BasicOptionPaneUI.createMessageArea()
<!-- END KEY -->
<!-- BEGIN DATA -->
从 installComponents 获取消息以创建包含消息正文的 Container。通过调用 <code>addIcon</code> 创建图标。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicOptionPaneUI.addMessageComponents(Container container, GridBagConstraints cons, Object msg, int maxll, boolean internallyCreated)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建表示 <code>msg</code> 的适当对象并将其置于 <code>container</code> 中。如果 <code>msg</code> 为 Component 的实例，则直接添加它；如果其为 Icon，则创建 JLabel 来表示它；否则，如果 <code>d</code> 为 Object[]，则为该字符串创建 JLabel，将为其子级递归式调用此方法。如果 Objc 为 Component 的实例并且由此方法内部创建，则 <code>internallyCreated</code> 为 true（仅当 !internallyCreated 时，使用此方法正确设置 hasCustomComponents）。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object javax.swing.plaf.basic.BasicOptionPaneUI.getMessage()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从接收者为其提供外观的 JOptionPane 显示的消息。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicOptionPaneUI.addIcon(Container top)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并添加 JLabel，它表示对 <code>top</code> 调用 <code>getIcon</code> 所返回的图标。此方法获得从 <code>createMessageArea</code> 传递的消息

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.Icon javax.swing.plaf.basic.BasicOptionPaneUI.getIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回来自接收者为其提供外观的 JOptionPane 的图标，或者从 <code>getDefaultIcon</code> 返回的默认图标。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.Icon javax.swing.plaf.basic.BasicOptionPaneUI.getIconForType(int messageType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于传入类型的图标。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicOptionPaneUI.getMaxCharactersPerLineCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回要置于行中的最大字符数。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicOptionPaneUI.burstStringInto(Container c, String d, int maxll)
<!-- END KEY -->
<!-- BEGIN DATA -->
递归式创建表示 <code>d</code> 的新 JLabel 实例每个 JLabel 实例都将被添加到 <code>c</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Container javax.swing.plaf.basic.BasicOptionPaneUI.createButtonArea()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回包含按钮的 Container。通过调用 <code>getButtons</code> 创建按钮。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicOptionPaneUI.addButtonComponents(Container container, java.lang.Object[] buttons, int initialIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建表示 <code>buttons</code> 中每个对象的适当对象并将其添加到 <code>container</code>。这与 addMessageComponents 不同，不同点在于它将在 <code>buttons</code> 上递归，并且如果按钮不是 Component，它将创建一个 JButton 的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object[] javax.swing.plaf.basic.BasicOptionPaneUI.getButtons()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从接收者为其提供外观的 JOptionPane 显示的按钮。如果 JOptionPane 设置了选项，则提供它们；否则，如果 optionType 为 YES_NO_OPTION，则返回 yesNoOptions；如果类型为 YES_NO_CANCEL_OPTION，则返回 yesNoCancelOptions；否则返回 defaultButtons。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicOptionPaneUI.getSizeButtonsToSameWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 true，基本 L&F 希望所有按钮具有相同的宽度。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicOptionPaneUI.getInitialValueIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
将初始索引返回给要选择的按钮。索引是根据 JOptionPane 的初始值和 JOptionPane 的选项计算出的，或者为 0。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicOptionPaneUI.resetInputValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
基于 inputComponent 中的值，设置接收者为其提供外观的选项窗格中的输入值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicOptionPaneUI.selectInitialValue(JOptionPane op)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 inputComponent 为非 null，则请求焦点位于其上；否则请求焦点位于默认值上

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.basic.BasicOptionPaneUI.containsCustomComponents(JOptionPane op)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果在上一次对 validateComponent 的调用中消息或按钮包含 Component 的子类，则返回 true。

<!-- END DATA -->
