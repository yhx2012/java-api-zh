<!-- BEGIN KEY -->
public abstract class javax.swing.plaf.TextUI extends javax.swing.plaf.ComponentUI
<!-- END KEY -->
<!-- BEGIN DATA -->
文本编辑器用户界面

@author  Timothy Prinzing
@version 1.32 12/19/03

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Rectangle javax.swing.plaf.TextUI.modelToView(JTextComponent t, int pos) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
将模型中的给定位置转换成视图坐标系统中的某一个位置。

@param pos  模型中要转换的本地位置，该位置 &gt;= 0
@return 矩形形式的坐标
@exception BadLocationException  如果给定位置并不表示相关文档中的一个有效位置

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Rectangle javax.swing.plaf.TextUI.modelToView(JTextComponent t, int pos, Position.Bias bias) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
将模型中的给定位置转换成视图坐标系统中的某一个位置。

@param pos  模型中要转换的本地位置，该位置 &gt;= 0
@return 矩形形式的坐标
@exception BadLocationException  如果给定位置并不表示相关文档中的一个有效位置

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.plaf.TextUI.viewToModel(JTextComponent t, Point pt)
<!-- END KEY -->
<!-- BEGIN DATA -->
将视图坐标系统中的给定位置转换成模型中最有代表性的位置。

@param pt  视图中要转换的位置。此位置应该与鼠标事件在同一坐标系统中。
@return 距文档起始位置的偏移量，该偏移量 &gt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.plaf.TextUI.viewToModel(JTextComponent t, Point pt, javax.swing.text.Position.Bias[] biasReturn)
<!-- END KEY -->
<!-- BEGIN DATA -->
提供从视图坐标空间到模型的逻辑坐标空间的映射关系。

@param pt  视图中要转换的位置。此位置应该与鼠标事件在同一坐标系统中。
@param biasReturn 由此方法填充，以指示给定点是更接近于模型中的前一个字符，还是更接近于模型中的下一个字符

@return 模型中最好地表示视图中的给定点的位置，该位置 &gt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.plaf.TextUI.getNextVisualPositionFrom(JTextComponent t, int pos, Position.Bias b, int direction, javax.swing.text.Position.Bias[] biasRet) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
提供确定下一个可以放置一个插入符的可见模型位置的方法。一些视图可能是不可见的，它们的顺序可能与模型中的顺序不同，或者它们可能不允许访问模型中的某些位置。

@param t 为其安装此 UI 的文本组件
@param pos 要转换的位置，该位置 &gt;= 0
@param b 位置的偏差
@param direction 以当前位置开始的方向，可以将它们设想为通常出现在键盘上的箭头键。该参数可以是 SwingConstants.WEST、SwingConstants.EAST、SwingConstants.NORTH 或 SwingConstants.SOUTH
@param biasRet 包含返回位置偏差的数组
@return 模型中能最好地表示下一个可见位置的位置
@exception BadLocationException
@exception IllegalArgumentException 如果方向无效

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.plaf.TextUI.damageRange(JTextComponent t, int p0, int p1)
<!-- END KEY -->
<!-- BEGIN DATA -->
促使重新绘制负责模型给定部分的那部分视图。

@param p0 范围的起始位置，该位置 &gt;= 0
@param p1 范围的结束位置，该位置 &gt;= p0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.plaf.TextUI.damageRange(JTextComponent t, int p0, int p1, Position.Bias firstBias, Position.Bias secondBias)
<!-- END KEY -->
<!-- BEGIN DATA -->
促使重新绘制负责模型给定部分的那部分视图。

@param p0 范围的起始位置，该位置 &gt;= 0
@param p1 范围的结束位置，该位置 &gt;= p0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.text.EditorKit javax.swing.plaf.TextUI.getEditorKit(JTextComponent t)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取为要编辑的文档类型设置策略的服务绑定。这包含诸如可用命令、流 reader 和 writer 等这类东西。

@return 编辑器工具包绑定

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.text.View javax.swing.plaf.TextUI.getRootView(JTextComponent t)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取分配了相关文本组件（即层次结构的根）的 View，可遍历这些组件来确定在空间中表示模型的形式。

@return 视图

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.TextUI.getToolTipText(JTextComponent t, Point pt)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在传入位置上用作工具提示的字符串。

@see javax.swing.text.JTextComponent#getToolTipText
@since 1.4

<!-- END DATA -->
