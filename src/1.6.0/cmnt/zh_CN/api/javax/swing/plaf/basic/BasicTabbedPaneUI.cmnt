<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicTabbedPaneUI extends javax.swing.plaf.TabbedPaneUI implements javax.swing.SwingConstants
<!-- END KEY -->
<!-- BEGIN DATA -->
TabbedPaneUI 的基本 L&F 实现。

@version 1.87 06/08/99
@author Amy Fowler
@author Philip Milne
@author Steve Wilson
@author Tom Santos
@author Dave Moore

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.KeyStroke javax.swing.plaf.basic.BasicTabbedPaneUI.upKey
<!-- END KEY -->
<!-- BEGIN DATA -->
从 Java 2 平台 v1.3 开始，不再使用这种以前没有记录的字段。键绑定现在由 LookAndFeel 定义，请参阅键绑定规范以了解更多详细信息。

@deprecated 从 Java 2 platform v1.3 开始。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.KeyStroke javax.swing.plaf.basic.BasicTabbedPaneUI.downKey
<!-- END KEY -->
<!-- BEGIN DATA -->
从 Java 2 平台 v1.3 开始，不再使用这种以前没有记录的字段。键绑定现在由 LookAndFeel 定义，请参阅键绑定规范以了解更多详细信息。

@deprecated 从 Java 2 platform v1.3 开始。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.KeyStroke javax.swing.plaf.basic.BasicTabbedPaneUI.leftKey
<!-- END KEY -->
<!-- BEGIN DATA -->
从 Java 2 平台 v1.3 开始，不再使用这种以前没有记录的字段。键绑定现在由 LookAndFeel 定义，请参阅键绑定规范以了解更多详细信息。

@deprecated 从 Java 2 platform v1.3 开始。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.KeyStroke javax.swing.plaf.basic.BasicTabbedPaneUI.rightKey
<!-- END KEY -->
<!-- BEGIN DATA -->
从 Java 2 平台 v1.3 开始，不再使用这种以前没有记录的字段。键绑定现在由 LookAndFeel 定义，请参阅键绑定规范以了解更多详细信息。

@deprecated 从 Java 2 platform v1.3 开始。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient java.awt.Rectangle javax.swing.plaf.basic.BasicTabbedPaneUI.calcRect
<!-- END KEY -->
<!-- BEGIN DATA -->
用于通用布局计算以避免运行中构造多个新 Rectangle 的矩形。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.LayoutManager javax.swing.plaf.basic.BasicTabbedPaneUI.createLayoutManager()
<!-- END KEY -->
<!-- BEGIN DATA -->
由 <code>installUI</code> 调用，用于创建布局管理器对象以管理 <code>JTabbedPane</code>。

@return 布局管理器对象

@see TabbedPaneLayout
@see javax.swing.JTabbedPane#getTabLayoutPolicy

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTabbedPaneUI.installComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并安装 JTabbedPane 的所有必需的子组件。由 installUI 调用。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JButton javax.swing.plaf.basic.BasicTabbedPaneUI.createScrollButton(int direction)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回一个 JButton，它将为用户提供朝某一特定方向滚动选项卡的方式。返回的 JButton 必须为 UIResource 的实例。

@param direction SwingConstants 常量之一：SOUTH、NORTH、EAST 或 WEST
@return 供用户使用的 Widget
@see javax.swing.JTabbedPane#setTabPlacement
@see javax.swing.SwingConstants
@throws IllegalArgumentException 如果方向不为 NORTH、SOUTH、EAST 或 WEST 之一
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTabbedPaneUI.uninstallComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->
从 JTabbedPane 移除所有已安装的子组件。由 uninstallUI 调用。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTabbedPaneUI.setRolloverTab(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
将当前有鼠标位于其上方的选项卡设置为 <code>index</code>。如果鼠标不再位于任何选项卡上，则 <code>index</code> 将为 -1。没有执行任何检查来确保传入的索引标识有效的选项卡。

@param index 鼠标位于其上方的选项卡的索引。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTabbedPaneUI.getRolloverTab()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前有鼠标位于其上方的选项卡；如果鼠标不再位于任何选项卡上，则返回 {@code -1}。

@return 当前有鼠标位于其上方的选项卡；如果鼠标不再位于任何选项卡上，则返回 {@code -1}
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicTabbedPaneUI.getBaseline(JComponent c, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回基线。

 @throws NullPointerException {@inheritDoc}
 @throws IllegalArgumentException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component.BaselineResizeBehavior javax.swing.plaf.basic.BasicTabbedPaneUI.getBaselineResizeBehavior(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回一个枚举，它指示该组件的基线如何随大小的改变而发生更改。 

 @throws NullPointerException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTabbedPaneUI.getBaseline(int tab)
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回指定选项卡的基线。

 @param tab 获取其基线的选项卡的索引
 @exception IndexOutOfBoundsException 如果索引超出范围（index < 0 || index >= tab count）
 @return 基线，或返回 &lt; 0 的值指示没有合理的基线 
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTabbedPaneUI.getBaselineOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回基线偏移的距离。这通常与 <code>getTabLabelShiftY</code> 相同。

 @return 基线偏移的距离
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTabbedPaneUI.paintTabArea(Graphics g, int tabPlacement, int selectedIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
在选项卡区域绘制选项卡。由 paint() 调用。图形参数必须为有效的 <code>Graphics</code> 对象。布局可以是以下几种之一：<code>JTabbedPane.TOP</code>、<code>JTabbedPane.BOTTOM</code>、<code>JTabbedPane.LEFT</code> 或 <code>JTabbedPane.RIGHT</code>。选择的索引必须为有效的选项卡窗格选项卡索引（0 至选项卡数 - 1，包括两者）；如果当前没有选项选项卡，则为 -1。无效参数的处理没有指定。

@param g 要用于呈现的图形对象
@param tabPlacement JTabbedPane 中选项卡的位置
@param selectedIndex 所选组件的选项卡索引

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTabbedPaneUI.paintTabBorder(Graphics g, int tabPlacement, int tabIndex, int x, int y, int w, int h, boolean isSelected)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法围绕每个选项卡绘制边框。注意，此方法现在已经能够绘制选项卡的背景，这在其他地方完成。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.plaf.basic.BasicTabbedPaneUI.getTabBounds(JTabbedPane pane, int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定选项卡索引的边界。这些边界与 JTabbedPane 的坐标空间有关。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicTabbedPaneUI.tabForCoordinate(JTabbedPane pane, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与 JTabbedPane 的坐标空间中的指定点相交的选项卡索引。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.plaf.basic.BasicTabbedPaneUI.getTabBounds(int tabIndex, Rectangle dest)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 JTabbedPane 组件的坐标空间中指定选项卡的边界。这一点是必需的，因为默认情况下选项卡矩形是在呈现它们的组件的坐标空间中定义的，该组件可以为 JTabbedPane（对于 WRAP_TAB_LAYOUT）或 ScrollableTabPanel（对于 SCROLL_TAB_LAYOUT）。只要选项卡矩形必须相对于 JTabbedPane 本身就应该使用此方法，并且应该将结果置于指定的 Rectangle 对象中（而不是每次都要实例化并返回新的 Rectangle）。选项卡索引参数必须为有效的选项卡窗格选项卡索引（0 至选项卡数 - 1，包括两者）。目标矩形参数必须为有效的 <code>Rectangle</code> 实例。无效参数的处理没有指定。

@param tabIndex 选项卡的索引
@param dest 应将结果置于其中的矩形
@return 得到的矩形

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.View javax.swing.plaf.basic.BasicTabbedPaneUI.getTextViewForTab(int tabIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->

返回为指定选项卡呈现样式化文本 (HTML) 所需的文本 View 对象；如果此选项卡不需要任何特殊化的文本呈现，则返回 null。提供它是为了支持在选项卡内进行的 html 呈现。

@param tabIndex 选项卡的索引
@return 呈现选项卡文本的文本视图；如果不需要任何特殊化的呈现，则返回 null

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTabbedPaneUI.getFocusIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回具有焦点的选项卡的索引。

@return 具有焦点的选项卡的索引
@since 1.5

<!-- END DATA -->
