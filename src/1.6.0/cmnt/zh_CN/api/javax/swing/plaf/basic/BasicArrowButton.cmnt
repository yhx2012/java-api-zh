<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicArrowButton extends javax.swing.JButton implements javax.swing.SwingConstants
<!-- END KEY -->
<!-- BEGIN DATA -->
一个 JButton 对象，它绘制朝某个基本方向的缩放箭头。
 <p>
<strong>警告：</strong>此类的序列化对象将与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.26 12/19/03
@author David Kloba

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicArrowButton.direction
<!-- END KEY -->
<!-- BEGIN DATA -->
 箭头的方向。{@code SwingConstants.NORTH}、{@code SwingConstants.SOUTH}、{@code SwingConstants.EAST} 或 {@code SwingConstants.WEST} 之一。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.basic.BasicArrowButton(int direction, Color background, Color shadow, Color darkShadow, Color highlight)
<!-- END KEY -->
<!-- BEGIN DATA -->
 创建一个在指定方向上绘制其箭头并具有指定颜色的 {@code BasicArrowButton}。

 @param direction 箭头的方向；{@code SwingConstants.NORTH}、{@code SwingConstants.SOUTH}、{@code SwingConstants.EAST} 或 {@code SwingConstants.WEST} 之一
 @param background 按钮的背景色 
 @param shadow 阴影的颜色 
 @param darkShadow 黑阴影的颜色 
 @param highlight 高亮显示的颜色 
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.basic.BasicArrowButton(int direction)
<!-- END KEY -->
<!-- BEGIN DATA -->
 创建一个在指定方向上绘制其箭头的 {@code BasicArrowButton}。

 @param direction 箭头的方向；{@code SwingConstants.NORTH}、{@code SwingConstants.SOUTH}、{@code SwingConstants.EAST} 或 {@code SwingConstants.WEST} 之一

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicArrowButton.getDirection()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回箭头的方向。

 @param direction 箭头的方向；{@code SwingConstants.NORTH}、{@code SwingConstants.SOUTH}、{@code SwingConstants.EAST} 或 {@code SwingConstants.WEST} 之一

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicArrowButton.setDirection(int dir)
<!-- END KEY -->
<!-- BEGIN DATA -->
 设置箭头的方向。 

 @param direction 箭头的方向；{@code SwingConstants.NORTH}、{@code SwingConstants.SOUTH}、{@code SwingConstants.EAST} 或 {@code SwingConstants.WEST} 之一

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicArrowButton.getPreferredSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回 {@code BasicArrowButton} 的首选大小。 
 @return 首选大小

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicArrowButton.getMinimumSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 {@code BasicArrowButton} 的最小大小。

 @return 最小大小

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicArrowButton.getMaximumSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回 {@code BasicArrowButton} 的最大大小。

 @return 最大大小

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.basic.BasicArrowButton.isFocusTraversable()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回箭头按钮是否应该获取焦点。{@code BasicArrowButton} 用作复合组件（如 {@code JScrollBar} 和 {@code JComboBox}）的子组件。因为通常是复合组件获取焦点，所以重写此方法以返回 {@code false}。

 @return {@code false}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicArrowButton.paintTriangle(Graphics g, int x, int y, int size, int direction, boolean isEnabled)
<!-- END KEY -->
<!-- BEGIN DATA -->
 绘制一个三角形。 

 @param g 要在其上进行绘制的 {@code Graphics} 
 @param x x 坐标
 @param y y 坐标
 @param size 要绘制的三角形的大小
 @param direction 绘制箭头的方向；{@code SwingConstants.NORTH}、{@code SwingConstants.SOUTH}、{@code SwingConstants.EAST} 或 {@code SwingConstants.WEST} 之一
 @param isEnabled 是否已启用绘制箭头

<!-- END DATA -->
