<!-- BEGIN KEY -->
public abstract class javax.swing.plaf.synth.SynthStyle extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SynthStyle</code> 是一个样式属性集。每个 <code>SynthUI</code> 至少引用一个 <code>SynthStyle</code>，SynthStyle 是使用 <code>SynthStyleFactory</code> 获得的。通常不需要直接与此类进行交互，而是要将一个 <a href="doc-files/synthFileFormat.html">Synth File Format 文件</a>加载到 <code>SynthLookAndFeel</code> 中，后者将创建一个 SynthStyle 集。

@see SynthLookAndFeel
@see SynthStyleFactory

@version 1.23, 12/19/03
@since 1.5
@author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.synth.SynthStyle()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 SynthStyle。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.synth.SynthGraphicsUtils javax.swing.plaf.synth.SynthStyle.getGraphicsUtils(SynthContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定上下文的 <code>SynthGraphicUtils</code>。

@param context 标识请求者的 SynthContext
@return SynthGraphicsUtils

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.plaf.synth.SynthStyle.getColor(SynthContext context, ColorType type)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定状态的颜色。此方法为 <code>JComponent</code> 的前景和背景提供了优先权。如果 <code>JComponent</code> 中的 <code>Color</code> 不合适，或者未被使用，则此方法将调用 <code>getColorForState</code>。子类通常不必重写此方法，而是重写 {@link #getColorForState}。

@param context 标识请求者的 SynthContext
@param type 将请求的颜色的类型。
@return 颜色

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract java.awt.Color javax.swing.plaf.synth.SynthStyle.getColorForState(SynthContext context, ColorType type)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定状态的颜色。此方法不应调用 <code>JComponent</code> 上的任何方法。

@param context 标识请求者的 SynthContext
@param type 将请求的颜色的类型。
@return 要呈现的颜色

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font javax.swing.plaf.synth.SynthStyle.getFont(SynthContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定状态的 Font。如有必要，此方法可重定向到 <code>context</code> 中的 <code>JComponent</code>。如果此方法没有重定向到 JComponent，则调用 {@link #getFontForState}。

@param context 标识请求者的 SynthContext
@return 要呈现的 Font

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract java.awt.Font javax.swing.plaf.synth.SynthStyle.getFontForState(SynthContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定状态的字体。此方法不应调用 <code>JComponent</code> 上的任何方法。

@param context 标识请求者的 SynthContext
@return 要呈现的 Font

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.plaf.synth.SynthStyle.getInsets(SynthContext context, Insets insets)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用来计算大小调整信息的 Insets。

@param context 标识请求者的 SynthContext
@param insets 在其中放置返回值的 Insets。
@return 将调整大小的 Insets。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.synth.SynthPainter javax.swing.plaf.synth.SynthStyle.getPainter(SynthContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回将用于绘制的 <code>SynthPainter</code>。此方法可以返回 null。

@param context 标识请求者的 SynthContext
@return 要使用的 SynthPainter

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.synth.SynthStyle.isOpaque(SynthContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 region 是不透明的，则返回 true。

@param context 标识请求者的 SynthContext
@return 如果 region 是不透明的，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.plaf.synth.SynthStyle.get(SynthContext context, Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
某个 region 特定样式属性的获取器。

@param context 标识请求者的 SynthContext
@param key 将请求的属性。
@return      指定属性的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthStyle.installDefaults(SynthContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->
在 <code>context</code> 的 <code>JComponent</code> 上根据此 Style 安装必要的状态。

@param context 标识要安装属性的组件的 SynthContext。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthStyle.uninstallDefaults(SynthContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->
卸载此样式在 <code>context</code> 的 <code>JComponent</code> 上安装的任何状态。
 <p>
样式不应依赖调用此方法，在某些情况下，此方法可能从不被调用。

@param context 标识要安装属性的组件的 SynthContext。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.synth.SynthStyle.getInt(SynthContext context, Object key, int defaultValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
获得值为 <code>Number</code> 的一个特定样式属性的便捷方法。如果该值为 <code>Number</code>，则返回 <code>intValue</code>，否则返回 <code>defaultValue</code>。

@param context 标识请求者的 SynthContext
@param key 将请求的属性。
@param defaultValue 如果该属性还未被指定，或者该值不是一个 Number，则该参数表示要返回的值
@return 指定属性的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.synth.SynthStyle.getBoolean(SynthContext context, Object key, boolean defaultValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
获得其值是一个 Boolean 值的特定样式属性的便捷方法。

@param context 标识请求者的 SynthContext
@param key 将请求的属性。
@param defaultValue 如果该属性还未被指定，或者该值不是一个 Boolean，则该参数表示要返回的值
@return 指定属性的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.plaf.synth.SynthStyle.getIcon(SynthContext context, Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
获得其值是一个 Icon 的特定样式属性的便捷方法。

@param context 标识请求者的 SynthContext
@param key 将请求的属性。
@return 指定属性的值，如果没有指定属性，则返回 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.synth.SynthStyle.getString(SynthContext context, Object key, String defaultValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
获得其值是一个 String 值的特定样式属性的便捷方法。

@param context 标识请求者的 SynthContext
@param key 将请求的属性。
@param defaultValue 如果该属性还未被指定，或者该值不是一个 String，则该参数表示要返回的值
@return 指定属性的值

<!-- END DATA -->
