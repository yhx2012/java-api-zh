<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicScrollBarUI extends javax.swing.plaf.ScrollBarUI implements java.awt.LayoutManager, javax.swing.SwingConstants
<!-- END KEY -->
<!-- BEGIN DATA -->
基本外观的 ScrollBarUI 的实现

@version 1.83 01/09/04
@author Rich Schiavi
@author David Kloba
@author Hans Muller

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicScrollBarUI.setThumbRollover(boolean active)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置鼠标当前是否位于 thumb 上。

@param active 为 true 指示 thumb 当前处于激活状态。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.basic.BasicScrollBarUI.isThumbRollover()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果鼠标当前位于 thumb 上，则返回 true。

@return 如果 thumb 当前处于激活状态，则返回 true
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicScrollBarUI.getPreferredSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
垂直滚动条的首选宽度是（非 <code>null</code>）递增/递减按钮的首选宽度的最大值，也是 thumb 的最小宽度。首选高度是相同部分的首选高度之和。水平滚动条的首选大小的基础与此类似。 
 <p>
<code>preferredSize</code> 仅计算一次，此方法的后续调用仅返回缓存的大小。
 
@param c 委托此方法的 <code>JScrollBar</code>
@return Basic JScrollBar 的首选大小
@see #getMaximumSize
@see #getMinimumSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicScrollBarUI.getMaximumSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
@param c 委托此方法的 JScrollBar。
@return 新的 Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE)；
@see #getMinimumSize
@see #getPreferredSize

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Dimension javax.swing.plaf.basic.BasicScrollBarUI.getMinimumThumbSize()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回 thumb 的最小可接受大小。如果滚动条变得非常小，此大小不适用，则 thumb 将被隐藏。  
 <p>
<b>警告：</b>不应修改此方法返回的值，它是一个共享的静态常量。

@return thumb 的最小可接受大小。
@see #getMaximumThumbSize

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Dimension javax.swing.plaf.basic.BasicScrollBarUI.getMaximumThumbSize()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回 thumb 的最大可接受大小。要创建固定大小的 thumb，需要让此方法和 <code>getMinimumThumbSize</code> 返回相同的值。
 <p>
<b>警告：</b>不应修改此方法返回的值，它是一个共享的静态常量。

@return thumb 的最大可接受大小。
@see #getMinimumThumbSize

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicScrollBarUI.setThumbBounds(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 thumb 的边界并强制进行包括新旧 thumbBounds 在内的重绘。

@see #getThumbBounds

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.plaf.basic.BasicScrollBarUI.getThumbBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 thumb 的当前大小/位置。
 <p>
<b>警告：</b>不应修改此方法返回的值，它是一个到实际矩形的引用，而不是一个副本。

@return thumb 的当前大小/位置。
@see #setThumbBounds

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.plaf.basic.BasicScrollBarUI.getTrackBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回滑道的当前边界，即递增和递减按钮之间的空间（减去 insets）。每次布置滚动条时（确认后）此方法返回的值都会更新。
 <p>
<b>警告：</b>不应修改此方法返回的值，它是一个到实际矩形的引用，而不是一个副本。

@return 滚动条滑道的当前边界
@see #layoutContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.basic.BasicScrollBarUI.getSupportsAbsolutePositioning()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示用户是否可以利用鼠标动作（通常使用中间的鼠标按键）来绝对定位 thumb。

@return 如果鼠标运行可以绝对定位 thumb，则返回 true
@since 1.5

<!-- END DATA -->
