<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicSpinnerUI extends javax.swing.plaf.SpinnerUI
<!-- END KEY -->
<!-- BEGIN DATA -->
默认 Spinner UI 委托。

@version 1.22 12/19/03
@author Hans Muller
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JSpinner javax.swing.plaf.basic.BasicSpinnerUI.spinner
<!-- END KEY -->
<!-- BEGIN DATA -->
作为 UI 委托的 spinner。由 <code>installUI</code> 方法初始化，并由 <code>uninstallUI</code> 重置为 null。
 
@see #installUI
@see #uninstallUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ComponentUI javax.swing.plaf.basic.BasicSpinnerUI.createUI(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 BasicSpinnerUI 的新实例。每个 JSpinner 分配一个 SpinnerListUI 委托。
 
@param c JSpinner（未使用）
@see ComponentUI#createUI
@return 新 BasicSpinnerUI 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicSpinnerUI.installUI(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
调用 <code>installDefaults</code>、<code>installListeners</code>，然后添加由 <code>createNextButton</code>、<code>createPreviousButton</code> 和 <code>createEditor</code> 返回的组件。
 
@param c JSpinner
@see #installDefaults
@see #installListeners
@see #createNextButton
@see #createPreviousButton
@see #createEditor

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicSpinnerUI.uninstallUI(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
调用 <code>uninstallDefaults</code>、<code>uninstallListeners</code>，然后移除所有子 spinner。
 
@param c JSpinner（不使用）

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSpinnerUI.installListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
用将感兴趣的 PropertyChangeEvent 委托给受保护方法的共享对象初始化 <code>PropertyChangeListener</code>。
 <p>
此方法由 <code>installUI</code> 调用。
 
@see #replaceEditor
@see #uninstallListeners

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSpinnerUI.uninstallListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除 installListeners 添加的 <code>PropertyChangeListener</code>。
 <p>
此方法由 <code>uninstallUI</code> 调用。
 
@see #installListeners

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSpinnerUI.installDefaults()
<!-- END KEY -->
<!-- BEGIN DATA -->
初始化 <code>JSpinner</code> <code>border</code>、<code>foreground</code>、<code>background</code> 属性以及基于默认表中对应的 &quot;Spinner.*&quot; 属性。将 <code>JSpinner</code> 布局设置为 <code>createLayout</code> 返回的值。此方法由 <code>installUI</code> 调用。

@see #uninstallDefaults
@see #installUI
@see #createLayout
@see LookAndFeel#installBorder
@see LookAndFeel#installColors

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSpinnerUI.uninstallDefaults()
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>JSpinner</code> 的布局管理器设置为 null。此方法由 <code>uninstallUI</code> 调用。
 
@see #installDefaults
@see #uninstallUI

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSpinnerUI.installNextButtonListeners(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
在下一个按钮（<code>c</code>）上安装必要的侦听器以更新 <code>JSpinner</code> 来响应用户动作。

@param c 要在其上安装侦听器的组件
@throws NullPointerException 如果 <code>c</code> 为 null。
@see #createNextButton
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSpinnerUI.installPreviousButtonListeners(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
在上一个按钮（<code>c</code>）上安装必要的侦听器以更新 <code>JSpinner</code> 来响应用户动作。

@param c 要在其上安装侦听器的组件。
@throws NullPointerException 如果 <code>c</code> 为 null。
@see #createPreviousButton
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.LayoutManager javax.swing.plaf.basic.BasicSpinnerUI.createLayout()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建管理 JSpinner 的 <code>editor</code>、<code>nextButton</code> 和 <code>previousButton</code> 子级的 <code>LayoutManager</code>。必须用标识其职责的约束添加这三个子级：&quot;Editor&quot;、&quot;Next&quot;、和 &quot;Previous&quot;。默认的布局管理器可以处理缺少这些子级中任意一个的情况。
 
@return 编辑器、下一个和上一个按钮的 LayoutManager。
@see #createNextButton
@see #createPreviousButton
@see #createEditor

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeListener javax.swing.plaf.basic.BasicSpinnerUI.createPropertyChangeListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个可以添加到 JSpinner 本身的 <code>PropertyChangeListener</code>。通常，此侦听器将在&ldquo;编辑器&rdquo;属性更改时调用 replaceEditor，因为它的 <code>SpinnerUI</code> 负责将编辑器添加到 JSpinner（并移除旧的）。此方法由 <code>installListeners</code> 调用。
 
@return JSpinner 本身的 PropertyChangeListener
@see #installListeners

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.plaf.basic.BasicSpinnerUI.createPreviousButton()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建将用 <code>spinner.getPreviousValue</code> 返回的对象取代 spinner 模型值的组件。默认情况下 <code>previousButton</code> 为 JButton。此方法通过调用 <code>installPreviousButtonListeners</code> 安装必需的侦听器以更新 <code>JSpinner</code> 的模型来响应用户动作。如果不需要 previousButton（在子类中），则重写此方法以返回 null。

@return 将用序列中的下一个值取代 spinner 模型的组件，或返回 null
@see #installUI
@see #createNextButton
@see #installPreviousButtonListeners

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.plaf.basic.BasicSpinnerUI.createNextButton()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建将用 <code>spinner.getNextValue</code> 返回的对象取代 spinner 模型值的组件。默认情况下，<code>nextButton</code> 即为 JButton，其 <code>ActionListener</code> 更新其 <code>JSpinner</code> 祖先模型。如果不需要 nextButton（在子类中），则重写此方法以返回 null。

@return 将用序列中的下一个值取代 spinner 模型的组件，或 null
@see #installUI
@see #createPreviousButton
@see #installNextButtonListeners

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JComponent javax.swing.plaf.basic.BasicSpinnerUI.createEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->
installUI 通过调用此方法获取 <code>JSpinner</code> 的编辑器组件。默认情况下它仅返回 <code>JSpinner.getEditor()</code>。如果子类要使用重写的 <code>installUI</code> 将编辑器添加到 <code>JSpinner</code> 中，则其可以重写 <code>createEditor</code> 来返回包含 spinner 的编辑器的组件或 null。
 <p>
通常重写此方法以利用带有自定义边框的容器包装编辑器，因为不能假定可以直接设置编辑器的边框。  
 <p>
利用 <code>JSpinner.setEditor</code> 更改 spinner 的编辑器时调用 <code>replaceEditor</code> 方法。如果已重写此方法，则可能还要重写 <code>replaceEditor</code>。
 
@return JSpinner 编辑器 JComponent，默认情况下返回 spinner.getEditor()
@see #installUI
@see #replaceEditor
@see JSpinner#getEditor

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSpinnerUI.replaceEditor(JComponent oldEditor, JComponent newEditor)
<!-- END KEY -->
<!-- BEGIN DATA -->
当 <code>JSpinner</code> 编辑器属性更改时，由 <code>PropertyChangeListener</code> 调用。此方法负责移除旧编辑器并添加新编辑器。默认情况下，此操作为：
 <pre>
 spinner.remove(oldEditor);
 spinner.add(newEditor, &quot;Editor&quot;);
 </pre>
<code>replaceEditor</code> 的实现应该配合 <code>createEditor</code> 方法使用。
 
@see #createEditor
@see #createPropertyChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSpinnerUI.installKeyboardActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
在 JSpinner 上安装键盘动作。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicSpinnerUI.getBaseline(JComponent c, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回基线。

 @throws NullPointerException {@inheritDoc}
 @throws IllegalArgumentException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component.BaselineResizeBehavior javax.swing.plaf.basic.BasicSpinnerUI.getBaselineResizeBehavior(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个枚举，它指示该组件的基线如何随大小的改变而发生更改。  

 @throws NullPointerException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
