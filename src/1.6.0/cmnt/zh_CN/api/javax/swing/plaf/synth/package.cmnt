<!-- BEGIN KEY -->
javax.swing.plaf.synth
<!-- END KEY -->
<!-- BEGIN DATA -->

    <p>
Synth 是一个可更换皮肤 (skinnable) 的外观，在其中可委托所有绘制。Synth 不提供默认外观。为了使用 Synth，需要指定一个 <a href="doc-files/synthFileFormat.html">file</a>，或提供一个 {@link javax.swing.plaf.synth.SynthStyleFactory}。两种配置选项都要求了解 synth 的架构（该架构如下所示），并了解 Swing 的架构。
    </p>
    <p>
      除非另行指定，否则 null 对于 synth 包中定义的所有方法而言都不是合法值，如果传入 null，将导致 <code>NullPointerException</code>。

    <h2>Synth</h2>
    <p>
Synth 中的每个 {@link javax.swing.plaf.ComponentUI} 实现都将自身与每个 {@link javax.swing.plaf.synth.Region} 的一个 {@link javax.swing.plaf.synth.SynthStyle} 相关联，大多数 <code>Component</code> 只能有一个 <code>Region</code>，所以也就只有一个 <code>SynthStyle</code>。<code>SynthStyle</code> 用于访问所有与样式有关的属性：fonts、colors 和其他 <code>Component</code> 属性。此外，<code>SynthStyle</code> 用于获得绘制背景、边框、焦点和 <code>Component</code> 的其他部分的 {@link javax.swing.plaf.synth.SynthPainter}。<code>ComponentUI</code> 从 {@link javax.swing.plaf.synth.SynthStyleFactory} 中获得 <code>SynthStyle</code>。可直接通过 {@link javax.swing.plaf.synth.SynthLookAndFeel#setStyleFactory(javax.swing.plaf.synth.SynthStyleFactory)} 或间接通过 {@link javax.swing.plaf.synth.SynthLookAndFeel#load} 提供 <code>SynthStyleFactory</code>。以下示例使用 <code>SynthLookAndFeel.load()</code> 方法来配置 <code>SynthLookAndFeel</code>，并将它设置为当前外观：
    </p>
    <div class="example">
      <pre>
  SynthLookAndFeel laf = new SynthLookAndFeel();
  laf.load(MyClass.class.getResourceAsStream(&quot;laf.xml&quot;), MyClass.class);
  UIManager.setLookAndFeel(laf);
      </pre>
    </div>
    <p>
许多 <code>JComponent</code> 被拆分成更小的块，并由 {@link javax.swing.plaf.synth.Region} 中类型安全的枚举来标识。例如，<code>JTabbedPane</code> 由 <code>JTabbedPane</code> 的 <code>Region</code> ({@link javax.swing.plaf.synth.Region#TABBED_PANE})、内容区域 ({@link javax.swing.plaf.synth.Region#TABBED_PANE_CONTENT})、选项卡背后的区域 ({@link javax.swing.plaf.synth.Region#TABBED_PANE_TAB_AREA}) 和选项卡 ({@link javax.swing.plaf.synth.Region#TABBED_PANE_TAB}) 组成。每个 <code>JComponent</code> 的每个 <code>Region</code> 都将有一个 <code>SynthStyle</code>。这允许您定制每个 <code>JComponent</code> 的每个区域的个别片段。
    <p>
许多 Synth 方法都采用一个 {@link javax.swing.plaf.synth.SynthContext}。SynthContext 用于提供有关当前 <code>Component</code> 的信息，这些信息包括：与当前 {@link javax.swing.plaf.synth.Region} 关联的 {@link javax.swing.plaf.synth.SynthStyle}、位掩码形式的 <code>Component</code> 状态（有关有效状态，请参阅 {@link javax.swing.plaf.synth.SynthConstants}）和一个标识正被绘制的 <code>Component</code> 部分的 {@link javax.swing.plaf.synth.Region}。
    <p>
由非 <code>JTextComponent</code> 呈现的所有文本都被委托给 {@link javax.swing.plaf.synth.SynthGraphicsUtils}，可以使用 {@link javax.swing.plaf.synth.SynthStyle} 的方法 {@link javax.swing.plaf.synth.SynthStyle#getGraphicsUtils} 获取。通过提供自己的 {@link javax.swing.plaf.synth.SynthGraphicsUtils}，可以定制文本呈现。

    </p>
    <h2>特定组件注意事项</h2>

    <h3>JTree</h3>
    <p>
      Synth 为树单元提供一个区域：<code>Region.TREE_CELL</code>。要指定渲染器的颜色，可以为 <code>TREE_CELL</code> 区域提供一个风格。以下代码展示了这一点： 
<pre>
  &lt;style id="treeCellStyle">
    &lt;opaque value="TRUE"/>
    &lt;state>
      &lt;color value="WHITE" type="TEXT_FOREGROUND"/>
      &lt;color value="RED" type="TEXT_BACKGROUND"/>
    &lt;/state>
    &lt;state value="SELECTED">
      &lt;color value="RED" type="TEXT_FOREGROUND"/>
      &lt;color value="WHITE" type="BACKGROUND"/>
    &lt;/state>
  &lt;/style>
  &lt;bind style="treeCellStyle" type="region" key="TreeCell"/>
</pre>
    <p>
      这指定了一个颜色组合，当选中时，红色将在白色之上；未选中时，白色在红色之上。要查看背景，需要指定标签是透明的，用以下 XML 代码段可以做到这一点：
<pre>
  &lt;style id="labelStyle">
    &lt;opaque value="FALSE"/>
  &lt;/style>
  &lt;bind style="labelStyle" type="region" key="Label"/>
</pre>
      
    <h3>JList 和 JTable</h3>
    <p>
      JList 和 JTable 渲染器所使用的颜色通过列表和表 Region 的方式指定。以下 XML 代码段展示了如何在选中时指定红色在白色之上，未选中时白色在红色之上：
<pre>
  &lt;style id="style">
    &lt;opaque value="TRUE"/>
    &lt;state>
      &lt;color value="WHITE" type="TEXT_FOREGROUND"/>
      &lt;color value="RED" type="TEXT_BACKGROUND"/>
      &lt;color value="RED" type="BACKGROUND"/>
    &lt;/state>
    &lt;state value="SELECTED">
      &lt;color value="RED" type="TEXT_FOREGROUND"/>
      &lt;color value="WHITE" type="TEXT_BACKGROUND"/>
    &lt;/state>
  &lt;/style>
  &lt;bind style="style" type="region" key="Table"/>
  &lt;bind style="style" type="region" key="List"/>
</pre>

  
<!-- END DATA -->
