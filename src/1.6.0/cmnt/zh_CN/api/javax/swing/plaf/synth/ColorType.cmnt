<!-- BEGIN KEY -->
public class javax.swing.plaf.synth.ColorType extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
可从某种风格中获取的一些颜色的类型安全枚举。
 <p>
每个 <code>SynthStyle</code> 都有一组 <code>ColorType</code>，可以使用 {@link SynthStyle#getColor(SynthContext, ColorType)} 方法来访问它们。<code>SynthStyle</code> 的 <code>installDefaults</code> 将安装 <code>FOREGROUND</code> 颜色作为 Component 的前景色，并安装 <code>BACKGROUND</code> 颜色作为组件的背景色（假定您没有显式指定前景色和背景色）。一些组件支持更多基于颜色的属性，例如，<code>JList</code> 拥有属性 <code>selectionForeground</code>，该属性将在组件状态为 <code>SynthConstants.SELECTED</code> 的情况下被映射到 <code>FOREGROUND</code>。
 <p>
以下示例显示了一个自定义 <code>SynthStyle</code>，对于 <code>DISABLED</code> 状态，它返回红色，其他情况返回黑色。
 <pre>
 class MyStyle extends SynthStyle {
     private Color disabledColor = new ColorUIResource(Color.RED);
     private Color color = new ColorUIResource(Color.BLACK);
     protected Color getColorForState(SynthContext context, ColorType type){
         if (context.getComponentState() == SynthConstants.DISABLED) {
             return disabledColor;
         }
         return color;
     }
 }
 </pre>

@version 1.11, 12/19/03
@since 1.5
@author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.swing.plaf.synth.ColorType javax.swing.plaf.synth.ColorType.FOREGROUND
<!-- END KEY -->
<!-- BEGIN DATA -->
某一 region 前景的 ColorType。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.swing.plaf.synth.ColorType javax.swing.plaf.synth.ColorType.BACKGROUND
<!-- END KEY -->
<!-- BEGIN DATA -->
某一 region 背景的 ColorType。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.swing.plaf.synth.ColorType javax.swing.plaf.synth.ColorType.TEXT_FOREGROUND
<!-- END KEY -->
<!-- BEGIN DATA -->
某一 region 前景的 ColorType。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.swing.plaf.synth.ColorType javax.swing.plaf.synth.ColorType.TEXT_BACKGROUND
<!-- END KEY -->
<!-- BEGIN DATA -->
某一 region 背景的 ColorType。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.swing.plaf.synth.ColorType javax.swing.plaf.synth.ColorType.FOCUS
<!-- END KEY -->
<!-- BEGIN DATA -->
焦点的 ColorType。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.plaf.synth.ColorType.MAX_COUNT
<!-- END KEY -->
<!-- BEGIN DATA -->
最大 <code>ColorType</code> 数。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.plaf.synth.ColorType(String description)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定描述的 ColorType。

@param description ColorType 的字符串描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.swing.plaf.synth.ColorType.getID()
<!-- END KEY -->
<!-- BEGIN DATA -->
以整数形式返回此 ColorType 的唯一 id。

@return 以整数形式返回此 ColorType 的唯一 id。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.synth.ColorType.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>ColorType</code> 的文本描述。
返回值就是用来创建 <code>ColorType</code> 的那个值。
@return 字符串的描述。

<!-- END DATA -->
