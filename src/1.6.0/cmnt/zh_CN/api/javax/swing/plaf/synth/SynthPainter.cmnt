<!-- BEGIN KEY -->
public abstract class javax.swing.plaf.synth.SynthPainter extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SynthPainter</code> 用于绘制 <code>JComponent</code> 的某些部分。每个 <code>JComponent</code> 至少有两个绘制方法：一个用于边框，另一个用于背景。有些 <code>JComponent</code> 有多个 <code>Region</code>，因此具有更多的绘制方法。
 <p>
<code>SynthPainter</code> 的实例可通过 {@link javax.swing.plaf.synth.SynthStyle#getPainter} 方法获取。 
 <p>
通常，可以通过 Synth 的 <a href="doc-files/synthFileFormat.html">file</a> 格式提供一个 <code>SynthPainter</code>。以下示例为所有将呈现图像 <code>myImage.png</code> 的 <code>JButton</code> 注册一个 painter：
 <pre>
  &lt;style id=&quot;buttonStyle&quot;&gt;
    &lt;imagePainter path=&quot;myImage.png&quot; sourceInsets=&quot;2 2 2 2&quot;
                  paintCenter=&quot;true&quot; stretch=&quot;true&quot;/&gt;
    &lt;insets top=&quot;2&quot; bottom=&quot;2&quot; left=&quot;2&quot; right=&quot;2&quot;/&gt;
  &lt;/style&gt;
  &lt;bind style=&quot;buttonStyle&quot; type=&quot;REGION&quot; key=&quot;button&quot;/&gt;
</pre>
 <p>
就不进行绘制这一点而言，<code>SynthPainter</code> 是抽象的，所有方法都是空的。尽管这些方法都不会抛出异常，但子类可以假定传入的是有效参数，或者它们也可以抛出 <code>NullPointerException</code> 或 <code>IllegalArgumentException</code> 来响应无效参数。

@version 1.10, 12/19/03
@since 1.5
@author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintArrowButtonBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制箭头按钮的背景。箭头按钮由 <code>JScrollBar</code> 之类的组件创建。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintArrowButtonBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制箭头按钮的边框。箭头按钮由 <code>JScrollBar</code> 之类的组件创建。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintArrowButtonForeground(SynthContext context, Graphics g, int x, int y, int w, int h, int direction)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制箭头按钮的前景。此方法负责绘制某一方向的图形表示形式，通常是一个箭头。箭头按钮由 <code>JScrollBar</code> 之类的组件创建。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
@param direction SwingConstants.NORTH、SwingConstants.SOUTH、SwingConstants.EAST 或 SwingConstants.WEST 之一

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintButtonBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制按钮的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintButtonBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制按钮的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintCheckBoxMenuItemBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制复选框菜单项的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintCheckBoxMenuItemBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制复选框菜单项的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintCheckBoxBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制复选框的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintCheckBoxBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制复选框的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintColorChooserBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制颜色选择器的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintColorChooserBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制颜色选择器的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintComboBoxBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制组合框的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintComboBoxBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制组合框的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintDesktopIconBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制桌面图标的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintDesktopIconBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制桌面图标的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintDesktopPaneBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制桌面窗格的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintDesktopPaneBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制桌面窗格的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintEditorPaneBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制编辑器窗格的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintEditorPaneBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制编辑器窗格的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintFileChooserBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制文件选择器的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintFileChooserBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制文件选择器的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintFormattedTextFieldBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制已格式化文本字段的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintFormattedTextFieldBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制已格式化文本字段的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintInternalFrameTitlePaneBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制内部窗体标题窗格的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintInternalFrameTitlePaneBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制内部窗体标题窗格的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintInternalFrameBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制内部窗体的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintInternalFrameBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制内部窗体的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintLabelBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制标签的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintLabelBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制标签的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintListBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制列表的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintListBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制列表的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintMenuBarBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制菜单栏的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintMenuBarBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制菜单栏的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintMenuItemBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制菜单项的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintMenuItemBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制菜单项的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintMenuBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制菜单的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintMenuBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制菜单的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintOptionPaneBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制选项窗格的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintOptionPaneBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制选项窗格的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintPanelBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制面板的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintPanelBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制面板的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintPasswordFieldBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制密码字段的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintPasswordFieldBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制密码字段的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintPopupMenuBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制弹出菜单的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintPopupMenuBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制弹出菜单的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintProgressBarBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制进度条的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintProgressBarBackground(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制进度条的背景。此实现调用不带 orientation 的同名方法。

 @param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext

@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
 @param orientation <code>JProgressBar.HORIZONTAL</code> 或 <code>JProgressBar.VERTICAL</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintProgressBarBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制进度条的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintProgressBarBorder(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制进度条的边框。此实现调用不带 orientation 的同名方法。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
 @param orientation <code>JProgressBar.HORIZONTAL</code> 或 <code>JProgressBar.VERTICAL</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintProgressBarForeground(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制进度条的前景。此方法负责提供进度条的进度指示。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
@param orientation 为 <code>JProgressBar.HORIZONTAL</code> 或 <code>JProgressBar.VERTICAL</code> 之一

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintRadioButtonMenuItemBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制单选钮菜单项的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintRadioButtonMenuItemBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制单选钮菜单项的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintRadioButtonBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制单选钮的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintRadioButtonBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制单选钮的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintRootPaneBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制根窗体的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintRootPaneBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制根窗体的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintScrollBarBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滚动条的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintScrollBarBackground(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滚动条的背景。此实现调用不带 orientation 的同名方法。

 @param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
 @param orientation  JScrollBar 的方向，<code>JScrollBar.HORIZONTAL</code> 或
                    <code>JScrollBar.VERTICAL</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintScrollBarBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滚动条的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintScrollBarBorder(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滚动条的边框。此实现调用不带 orientation 的同名方法。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
 @param orientation  JScrollBar 的方向，<code>JScrollBar.HORIZONTAL</code> 或
                    <code>JScrollBar.VERTICAL</code>

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintScrollBarThumbBackground(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滚动条的 thumb 的背景。该 thumb 提供关于 Component 在 <code>JScrollPane</code> 中的可见程度的图形指示。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
@param orientation JScrollBar 的方向，<code>JScrollBar.HORIZONTAL</code> 或 <code>JScrollBar.VERTICAL</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintScrollBarThumbBorder(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滚动条的 thumb 的边框。该 thumb 提供关于 Component 在 <code>JScrollPane</code> 中的可见程度的图形指示。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
@param orientation JScrollBar 的方向，<code>JScrollBar.HORIZONTAL</code> 或 <code>JScrollBar.VERTICAL</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintScrollBarTrackBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滚动条滑道的背景。该滑道包含 thumb。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintScrollBarTrackBackground(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
 绘制滚动条滑道的背景。该滑道包含 thumb。此实现调用不带 orientation 的同名方法。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
 @param orientation  JScrollBar 的方向，<code>JScrollBar.HORIZONTAL</code> 或
                    <code>JScrollBar.VERTICAL</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintScrollBarTrackBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滚动条滑道的边框。该滑道包含 thumb。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintScrollBarTrackBorder(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滚动条滑道的边框。该滑道包含 thumb。此实现调用不带 orientation 的同名方法。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

 @param orientation JScrollBar 的方向，<code>JScrollBar.HORIZONTAL</code> 或
                    <code>JScrollBar.VERTICAL</code>

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintScrollPaneBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滚动窗格的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintScrollPaneBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滚动窗格的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSeparatorBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制分隔符的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSeparatorBackground(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制分隔符的背景。此实现调用不带 orientation 的同名方法。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
 @param orientation <code>JSeparator.HORIZONTAL</code> 或
                           <code>JSeparator.VERTICAL</code>
 @since 1.6


<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSeparatorBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制分隔符的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSeparatorBorder(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制分隔符的边框。此实现调用不带 orientation 的同名方法。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
 @param orientation <code>JSeparator.HORIZONTAL</code> 或
                           <code>JSeparator.VERTICAL</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSeparatorForeground(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制分隔符的前景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
@param orientation <code>JSeparator.HORIZONTAL</code> 或 <code>JSeparator.VERTICAL</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSliderBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滑块的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSliderBackground(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滑块的背景。此实现调用不带 orientation 的同名方法。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
 @param orientation <code>JSlider.HORIZONTAL</code> 或
                           <code>JSlider.VERTICAL</code>
 @since 1.6


<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSliderBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滑块的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSliderBorder(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滑块的边框。此实现调用不带 orientation 的同名方法。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
 @param orientation <code>JSlider.HORIZONTAL</code> 或
                           <code>JSlider.VERTICAL</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSliderThumbBackground(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滑块的 thumb 的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
@param orientation <code>JSlider.HORIZONTAL</code> 或 <code>JSlider.VERTICAL</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSliderThumbBorder(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滑块的 thumb 的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
@param orientation <code>JSlider.HORIZONTAL</code> 或 <code>JSlider.VERTICAL</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSliderTrackBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滑块的滑道的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSliderTrackBackground(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滑块的滑道的背景。此实现调用不带 orientation 的同名方法。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
 @param orientation <code>JSlider.HORIZONTAL</code> 或
                           <code>JSlider.VERTICAL</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSliderTrackBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滑块的滑道的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSliderTrackBorder(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制滑块的滑道的边框。此实现调用不带 orientation 的同名方法。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
 @param orientation <code>JSlider.HORIZONTAL</code> 或
                           <code>JSlider.VERTICAL</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSpinnerBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制 spinner 的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSpinnerBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制 spinner 的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSplitPaneDividerBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制分隔窗格的分隔栏的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSplitPaneDividerBackground(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制分隔窗格的分隔栏的背景。此实现调用不带 orientation 的同名方法。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
 @param orientation <code>JSplitPane.HORIZONTAL_SPLIT</code> 或
                           <code>JSplitPane.VERTICAL_SPLIT</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSplitPaneDividerForeground(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制分隔窗格的分隔栏的前景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
@param orientation <code>JSplitPane.HORIZONTAL_SPLIT</code> 或 <code>JSplitPane.VERTICAL_SPLIT</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSplitPaneDragDivider(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
当用户拖动分隔符时，绘制分隔窗格的分隔栏。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
@param orientation <code>JSplitPane.HORIZONTAL_SPLIT</code> 或 <code>JSplitPane.VERTICAL_SPLIT</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSplitPaneBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制分隔窗格的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintSplitPaneBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制分隔窗格的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTabbedPaneBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制选项卡窗格的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTabbedPaneBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制选项卡窗格的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabAreaBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制选项卡窗格的选项卡背后区域的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabAreaBackground(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制选项卡窗格的选项卡背后区域的背景。此实现调用不带 orientation 的同名方法。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
 @param orientation <code>JTabbedPane.TOP</code>、<code>JTabbedPane.LEFT</code>、<code>JTabbedPane.BOTTOM</code>、或 <code>JTabbedPane.RIGHT</code> 之一
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabAreaBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制选项卡窗格的选项卡背后区域的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabAreaBorder(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制选项卡窗格的选项卡背后区域的边框。此实现调用不带 orientation 的同名方法。


@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
 @param orientation <code>JTabbedPane.TOP</code>、<code>JTabbedPane.LEFT</code>、<code>JTabbedPane.BOTTOM</code>、或 <code>JTabbedPane.RIGHT</code> 之一
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabBackground(SynthContext context, Graphics g, int x, int y, int w, int h, int tabIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制选项卡窗格的选项卡的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
@param tabIndex 要绘制选项卡的索引。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabBackground(SynthContext context, Graphics g, int x, int y, int w, int h, int tabIndex, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制选项卡窗格的选项卡的背景。此实现调用不带 orientation 的同名方法。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
@param tabIndex 要绘制选项卡的索引。
 @param orientation <code>JTabbedPane.TOP</code>、<code>JTabbedPane.LEFT</code>、<code>JTabbedPane.BOTTOM</code>、或 <code>JTabbedPane.RIGHT</code> 之一
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabBorder(SynthContext context, Graphics g, int x, int y, int w, int h, int tabIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制选项卡窗格的选项卡的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
@param tabIndex 要绘制选项卡的索引。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabBorder(SynthContext context, Graphics g, int x, int y, int w, int h, int tabIndex, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制选项卡窗格的选项卡的边框。此实现调用不带 orientation 的同名方法。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
@param tabIndex 要绘制选项卡的索引。

 @param orientation <code>JTabbedPane.TOP</code>、<code>JTabbedPane.LEFT</code>、<code>JTabbedPane.BOTTOM</code>、或 <code>JTabbedPane.RIGHT</code> 之一
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTabbedPaneContentBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制包含选项卡窗格中所选选项卡内容的区域的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTabbedPaneContentBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制包含选项卡窗格中所选选项卡内容的区域的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTableHeaderBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制表标题的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTableHeaderBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制表标题的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTableBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制表的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTableBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制表的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTextAreaBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制文本区域的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTextAreaBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制文本区域的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTextPaneBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制文本窗格的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTextPaneBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制文本窗格的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTextFieldBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制文本字段的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTextFieldBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制文本字段的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintToggleButtonBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制切换按钮的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintToggleButtonBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制切换按钮的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintToolBarBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制工具栏的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintToolBarBackground(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制工具栏的背景。此实现调用不带 orientation 的同名方法。


@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
 @param orientation <code>JToolBar.HORIZONTAL</code> 或
                           <code>JToolBar.VERTICAL</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintToolBarBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制工具栏的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintToolBarBorder(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制工具栏的边框。此实现调用不带 orientation 的同名方法。


@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
 @param orientation <code>JToolBar.HORIZONTAL</code> 或
                           <code>JToolBar.VERTICAL</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintToolBarContentBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制工具栏内容区的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintToolBarContentBackground(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制工具栏内容区的背景。此实现调用不带 orientation 的同名方法。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
 @param orientation <code>JToolBar.HORIZONTAL</code> 或
                           <code>JToolBar.VERTICAL</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintToolBarContentBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制工具栏内容区的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintToolBarContentBorder(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制工具栏内容区的边框。此实现调用不带 orientation 的同名方法。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
 @param orientation <code>JToolBar.HORIZONTAL</code> 或
                           <code>JToolBar.VERTICAL</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintToolBarDragWindowBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制工具栏从主窗体中脱离出来时包含它的窗口的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintToolBarDragWindowBackground(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制工具栏从主窗体中脱离出来时包含它的窗口的背景。此实现调用不带 orientation 的同名方法。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

 @param orientation <code>JToolBar.HORIZONTAL</code> 或
                           <code>JToolBar.VERTICAL</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintToolBarDragWindowBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制工具栏从主窗体中脱离出来时包含它的窗口的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintToolBarDragWindowBorder(SynthContext context, Graphics g, int x, int y, int w, int h, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制工具栏从主窗体中脱离出来时包含它的窗口的边框。此实现调用不带 orientation 的同名方法。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度
 @param orientation <code>JToolBar.HORIZONTAL</code> 或
                           <code>JToolBar.VERTICAL</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintToolTipBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制工具提示的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintToolTipBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制工具提示的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTreeBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制树的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTreeBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制树的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTreeCellBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制包含树中某个单元格的行的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTreeCellBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制包含树中某个单元格的行的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintTreeCellFocus(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
当树中某个单元格拥有焦点时，绘制该单元格的焦点指示器。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintViewportBackground(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制视口的背景。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthPainter.paintViewportBorder(SynthContext context, Graphics g, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制视口的边框。

@param context 标识要绘制的 <code>JComponent</code> 和 <code>Region</code> 的 SynthContext
@param g 要绘制的 <code>Graphics</code>
@param x 要绘制区域的 X 坐标
@param y 要绘制区域的 Y 坐标
@param w 要绘制区域的宽度
@param h 要绘制区域的高度

<!-- END DATA -->
