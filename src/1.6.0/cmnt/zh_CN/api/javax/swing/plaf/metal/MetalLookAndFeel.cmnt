<!-- BEGIN KEY -->
public class javax.swing.plaf.metal.MetalLookAndFeel extends javax.swing.plaf.basic.BasicLookAndFeel
<!-- END KEY -->
<!-- BEGIN DATA -->
Java 外观，也称为 Metal。
 <p>
 每个由 {@code MetalLookAndFeel} 提供的 {@code ComponentUI} 从默认表中派生其行为。除非另行说明，否则此包中每个 {@code ComponentUI} 实现都记录它们所使用的默认值集合。除非另行说明，否则调用 {@code installUI} 时，将安装默认值并遵循 {@code LookAndFeel} 中描述的安装默认值的建议。
 <p>
 {@code MetalLookAndFeel} 从 {@code MetalTheme} 派生其调色板和字体。默认主题为 {@code OceanTheme}。可以使用 {@code setCurrentTheme} 方法更改主题，有关更改主题的详细信息，请参阅该方法。在 1.5 之前，默认主题为 {@code DefaultMetalTheme}。可以将系统属性 {@code "swing.metalTheme"} 设置为 {@code "steel"}，指示默认主题应该为 {@code DefaultMetalTheme}。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@see MetalTheme
@see DefaultMetalTheme
@see OceanTheme
@version
@(#)MetalLookAndFeel.java	1.182 04/04/02
@author Steve Wilson

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.metal.MetalLookAndFeel.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此外观的名称。此方法返回 {@code "Metal"}。

 @return 此外观的名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.metal.MetalLookAndFeel.getID()
<!-- END KEY -->
<!-- BEGIN DATA -->
此外观的标识符。此方法返回 {@code "Metal"}。

 @return 此外观的标识符

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.metal.MetalLookAndFeel.getDescription()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此外观的简短描述。此方法返回 {@code "The Java(tm) Look and Feel"}。

 @return 外观的简短描述

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.metal.MetalLookAndFeel.isNativeLookAndFeel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 {@code false}；{@code MetalLookAndFeel} 不是本机外观。

@return {@code false}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.metal.MetalLookAndFeel.isSupportedLookAndFeel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 {@code true}；可以在任意平台上运行 {@code MetalLookAndFeel}。

@return {@code true}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.metal.MetalLookAndFeel.getSupportsWindowDecorations()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 {@code true}； metal 可以提供 {@code Window} 装饰。

@return {@code true}
@see JDialog#setDefaultLookAndFeelDecorated
@see JFrame#setDefaultLookAndFeelDecorated
@see JRootPane#setWindowDecorationStyle
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.metal.MetalLookAndFeel.initClassDefaults(UIDefaults table)
<!-- END KEY -->
<!-- BEGIN DATA -->

用从 {@code uiClassID} 到 ui 类完全限定名的映射关系填充 {@code table}。{@code MetalLookAndFeel} 在名为 MetalXXXUI 的 {@code javax.swing.plaf.metal} 包为每个类注册一个条目。字符串 {@code XXX} 为 Swing 的一个 uiClassID。对于在 metal 中没有类的 {@code uiClassID}，使用 {@code javax.swing.plaf.basic} 中对应的类。例如，metal 没有名为 {@code "MetalColorChooserUI"} 的类，这种情况下使用 {@code javax.swing.plaf.basic.BasicColorChooserUI}。
 
@param table 要添加条目的 {@code UIDefaults} 实例
@throws NullPointerException 如果 {@code table} 为 {@code null}
@see javax.swing.plaf.basic.BasicLookAndFeel#initClassDefaults


<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.metal.MetalLookAndFeel.initSystemColorDefaults(UIDefaults table)
<!-- END KEY -->
<!-- BEGIN DATA -->
用系统颜色填充 {@code table}。将以下值添加到 {@code table}：

 <table border="1" cellpadding="1" cellspacing="0" 
         summary="Metal 的系统颜色映射"
         valign="top" >
  <tr valign="top"  align="left">
    <th bgcolor="#CCCCFF" align="left">Key
    <th bgcolor="#CCCCFF" align="left">Value
  <tr valign="top"  align="left">
    <td>"desktop"
    <td>{@code theme.getDesktopColor()}
  <tr valign="top"  align="left">
    <td>"activeCaption"
    <td>{@code theme.getWindowTitleBackground()} 
  <tr valign="top"  align="left">
    <td>"activeCaptionText"
    <td>{@code theme.getWindowTitleForeground()} 
  <tr valign="top"  align="left">
    <td>"activeCaptionBorder"
    <td>{@code theme.getPrimaryControlShadow()} 
  <tr valign="top"  align="left">
    <td>"inactiveCaption"
    <td>{@code theme.getWindowTitleInactiveBackground()} 
  <tr valign="top"  align="left">
    <td>"inactiveCaptionText"
    <td>{@code theme.getWindowTitleInactiveForeground()} 
  <tr valign="top"  align="left">
    <td>"inactiveCaptionBorder"
    <td>{@code theme.getControlShadow()} 
  <tr valign="top"  align="left">
    <td>"window"
    <td>{@code theme.getWindowBackground()} 
  <tr valign="top"  align="left">
    <td>"windowBorder"
    <td>{@code theme.getControl()} 
  <tr valign="top"  align="left">
    <td>"windowText"
    <td>{@code theme.getUserTextColor()} 
  <tr valign="top"  align="left">
    <td>"menu"
    <td>{@code theme.getMenuBackground()} 
  <tr valign="top"  align="left">
    <td>"menuText"
    <td>{@code theme.getMenuForeground()} 
  <tr valign="top"  align="left">
    <td>"text"
    <td>{@code theme.getWindowBackground()} 
  <tr valign="top"  align="left">
    <td>"textText"
    <td>{@code theme.getUserTextColor()} 
  <tr valign="top"  align="left">
    <td>"textHighlight"
    <td>{@code theme.getTextHighlightColor()} 
  <tr valign="top"  align="left">
    <td>"textHighlightText"
    <td>{@code theme.getHighlightedTextColor()} 
  <tr valign="top"  align="left">
    <td>"textInactiveText"
    <td>{@code theme.getInactiveSystemTextColor()} 
  <tr valign="top"  align="left">
    <td>"control"
    <td>{@code theme.getControl()} 
  <tr valign="top"  align="left">
    <td>"controlText"
    <td>{@code theme.getControlTextColor()} 
  <tr valign="top"  align="left">
    <td>"controlHighlight"
    <td>{@code theme.getControlHighlight()} 
  <tr valign="top"  align="left">
    <td>"controlLtHighlight"
    <td>{@code theme.getControlHighlight()} 
  <tr valign="top"  align="left">
    <td>"controlShadow"
    <td>{@code theme.getControlShadow()} 
  <tr valign="top"  align="left">
    <td>"controlDkShadow"
    <td>{@code theme.getControlDarkShadow()} 
  <tr valign="top"  align="left">
    <td>"scrollbar"
    <td>{@code theme.getControl()} 
  <tr valign="top"  align="left">
    <td>"info"
    <td>{@code theme.getPrimaryControl()} 
  <tr valign="top"  align="left">
    <td>"infoText"
    <td>{@code theme.getPrimaryControlInfo()} 
 </table>
值 {@code theme} 对应于当前 {@code MetalTheme}。
 
@param table 要添加值的 {@code UIDefaults} 对象
@throws NullPointerException 如果 {@code table} 为 {@code null}

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.metal.MetalLookAndFeel.initComponentDefaults(UIDefaults table)
<!-- END KEY -->
<!-- BEGIN DATA -->
用 metal 的默认值填充 {@code table}。

@param table 要添加值的 {@code UIDefaults} 
@throws NullPointerException 如果 {@code table} 为 {@code null}

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.metal.MetalLookAndFeel.createDefaultTheme()
<!-- END KEY -->
<!-- BEGIN DATA -->
确保当前 {@code MetalTheme} 为{@code 非 null}。此方法是 {@code getCurrentTheme} 的覆盖方法。

@see #getCurrentTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.UIDefaults javax.swing.plaf.metal.MetalLookAndFeel.getDefaults()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回外观的默认值。此方法按顺序调用 {@code createDefaultTheme()}、{@code super.getDefaults()} 和 {@code getCurrentTheme().addCustomEntriesToTable(table)}。
 <p>
虽然此方法是公共方法，但只当外观被设置为当前外观并调用了 {@code initialize} 之后才应该由 {@code UIManager} 调用此方法。
 
@return 外观默认值

@see #createDefaultTheme
@see javax.swing.plaf.basic.BasicLookAndFeel#getDefaults()
@see MetalTheme#addCustomEntriesToTable(UIDefaults)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.metal.MetalLookAndFeel.provideErrorFeedback(Component component)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.plaf.metal.MetalLookAndFeel.setCurrentTheme(MetalTheme theme)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>MetalLookAndFeel</code> 使用的主题。
<p>
设置主题后，需要重新安装 {@code MetalLookAndFeel} 并重新创建 ui。以下代码说明了如何完成此操作：
 <pre>
   MetalLookAndFeel.setCurrentTheme(theme);

   // re-install the Metal Look and Feel
   UIManager.setLookAndFeel(new MetalLookAndFeel());

   // Update the ComponentUIs for all Components. This
   // needs to be invoked for all windows.
   SwingUtilities.updateComponentTreeUI(rootComponent);
 </pre>
如果此操作未完成，则结果是不确定的。

@param theme 要使用的主题 
@throws NullPointerException 如果 {@code theme} 为 {@code null}
@see #getCurrentTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.metal.MetalTheme javax.swing.plaf.metal.MetalLookAndFeel.getCurrentTheme()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>MetalLookAndFeel</code> 当前正在使用的主题。如果当前主题为 {@code null}，则创建默认主题。

@return 当前主题
@see #setCurrentTheme
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.plaf.metal.MetalLookAndFeel.getDisabledIcon(JComponent component, Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回具有禁用外观的 <code>Icon</code>。此方法用于在未指定图标时生成被禁用的 <code>Icon</code>。例如，如果创建了一个 <code>JButton</code>，并通过 <code>setIcon</code> 仅指定了一个 <code>Icon</code>，则会调用此方法来生成禁用的 <code>Icon</code>。如果将 null 作为 <code>icon</code> 传递，则此方法返回 null。 
 <p>
某些外观可能无法呈现禁用图标，在此情况下，外观将忽略此图标。

@param component 将显示 Icon 的 JComponent，可以为 null
@param icon 从其生成禁用图标的 Icon。
@return 禁用图标；如果无法生成合适的 Icon，则返回 null。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.plaf.metal.MetalLookAndFeel.getDisabledSelectedIcon(JComponent component, Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由选定的禁用组件使用的 <code>Icon</code>。此方法用于为以下情况的组件生成一个 <code>Icon</code>：这些组件均为禁用和选中状态，但没有此状态的指定 <code>Icon</code>。例如，如果创建了一个 <code>JButton</code>，并通过 <code>setIcon</code> 仅指定了一个 <code>Icon</code>，则会调用此方法来生成被禁用和选中的 <code>Icon</code>。如果将 null 作为 <code>icon</code> 传递，则此方法返回 null。 
 <p>
有些外观可能不呈现禁用和选中的 Icon，在此情况下这些外观将忽略它。

@param component 将显示 Icon 的 JComponent，可以为 null
@param icon 从其生成禁用和选中图标的 Icon。
@return 禁用和选中的图标，如果可以生成合适的 Icon，则返回 null。
@since 1.5


<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.FontUIResource javax.swing.plaf.metal.MetalLookAndFeel.getControlTextFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的控件文本字体。此方法是 {@code getCurrentTheme().getControlTextColor()} 的覆盖方法。

@return 控件文本字体

@see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.FontUIResource javax.swing.plaf.metal.MetalLookAndFeel.getSystemTextFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的系统文本字体。此方法是 {@code getCurrentTheme().getSystemTextFont()} 的覆盖方法。

@return 系统文本字体
@see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.FontUIResource javax.swing.plaf.metal.MetalLookAndFeel.getUserTextFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的用户文本字体。此方法是 {@code getCurrentTheme().getUserTextFont()} 的覆盖方法。

@return 用户文本字体

@see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.FontUIResource javax.swing.plaf.metal.MetalLookAndFeel.getMenuTextFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的菜单文本字体。此方法是 {@code getCurrentTheme().getMenuTextFont()} 的覆盖方法。

 @return 菜单文本字体

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.FontUIResource javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的窗口标题字体。此方法是 {@code getCurrentTheme().getWindowTitleFont()} 的覆盖方法。

 @return 窗口标题字体

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.FontUIResource javax.swing.plaf.metal.MetalLookAndFeel.getSubTextFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的子文本字体。此方法是 {@code getCurrentTheme().getSubTextFont()} 的覆盖方法。

 @return 子文本字体

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getDesktopColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的桌面颜色。此方法是 {@code getCurrentTheme().getDesktopColor()} 的覆盖方法。

 @return 桌面颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getFocusColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的焦点颜色。此方法是 {@code getCurrentTheme().getFocusColor()} 的覆盖方法。

 @return 焦点颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getWhite()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的白色。此方法是 {@code getCurrentTheme().getWhite()} 的覆盖方法。

 @return 白色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getBlack()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的黑色。此方法是 {@code getCurrentTheme().getBlack()} 的覆盖方法。

 @return 黑色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getControl()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的控件颜色。此方法是 {@code getCurrentTheme().getControl()} 的覆盖方法。

 @return 控件颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getControlShadow()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的控件阴影颜色。此方法是 {@code getCurrentTheme().getControlShadow()} 的覆盖方法。

 @return 控件阴影颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getControlDarkShadow()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的控件加黑阴影颜色。此方法是 {@code getCurrentTheme().getControlDarkShadow()} 的覆盖方法。

 @return 控件加黑阴影颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getControlInfo()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的控件信息颜色。此方法是 {@code getCurrentTheme().getControlInfo()} 的覆盖方法。

 @return 控件信息颜色
 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getControlHighlight()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的控件高亮显示颜色。此方法是 {@code getCurrentTheme().getControlHighlight()} 的覆盖方法。

 @return 控件高亮显示颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getControlDisabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的控件禁用颜色。此方法是 {@code getCurrentTheme().getControlDisabled()} 的覆盖方法。

 @return 控件禁用颜色
 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControl()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的 primary 控件颜色。此方法是 {@code getCurrentTheme().getPrimaryControl()} 的覆盖方法。

 @return  primary 控件颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlShadow()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的 primary 控件阴影颜色。此方法是 {@code getCurrentTheme().getPrimaryControlShadow()} 的覆盖方法。

 @return  primary 控件阴影颜色
 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlDarkShadow()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的 primary 控件加黑阴影颜色。此方法是 {@code getCurrentTheme().getPrimaryControlDarkShadow()} 的覆盖方法。

 @return  primary 控件加黑阴影颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlInfo()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的 primary 控件信息颜色。此方法是 {@code getCurrentTheme().getPrimaryControlInfo()} 的覆盖方法。

 @return  primary 控件信息颜色
 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlHighlight()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的 primary 控件高亮显示颜色。此方法是 {@code getCurrentTheme().getPrimaryControlHighlight()} 的覆盖方法。

 @return  primary 控件高亮显示颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getSystemTextColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的系统文本颜色。此方法是 {@code getCurrentTheme().getSystemTextColor()} 的覆盖方法。

 @return 系统文本颜色
 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getControlTextColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的控件文本颜色。此方法是 {@code getCurrentTheme().getControlTextColor()} 的覆盖方法。

 @return 控件文本颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getInactiveControlTextColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的非活动控件文本颜色。此方法是 {@code getCurrentTheme().getInactiveControlTextColor()} 的覆盖方法。

 @return 非活动控件文本颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getInactiveSystemTextColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的非活动系统文本颜色。此方法是 {@code getCurrentTheme().getInactiveSystemTextColor()} 的覆盖方法。

 @return 非活动系统文本颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getUserTextColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的用户文本颜色。此方法是 {@code getCurrentTheme().getUserTextColor()} 的覆盖方法。

 @return 用户文本颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getTextHighlightColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的文本高亮显示颜色。此方法是 {@code getCurrentTheme().getTextHighlightColor()} 的覆盖方法。

 @return 文本高亮显示颜色
 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getHighlightedTextColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的加亮文本颜色。此方法是 {@code getCurrentTheme().getHighlightedTextColor()} 的覆盖方法。

 @return 加亮文本颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getWindowBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的窗口背景颜色。此方法是 {@code getCurrentTheme().getWindowBackground()} 的覆盖方法。

 @return 窗口背景颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的窗口标题背景颜色。此方法是  {@code getCurrentTheme().getWindowTitleBackground()} 的覆盖方法。

 @return 窗口标题背景颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的窗口标题前景色。此方法是 {@code getCurrentTheme().getWindowTitleForeground()} 的覆盖方法。

 @return 窗口标题前景色 

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleInactiveBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的窗口标题非活动背景颜色。此方法是 {@code getCurrentTheme().getWindowTitleInactiveBackground()} 的覆盖方法。

 @return 窗口标题非活动背景颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleInactiveForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的窗口标题非活动前景颜色。此方法是 {@code getCurrentTheme().getWindowTitleInactiveForeground()} 的覆盖方法。

 @return 窗口标题非活动前景颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getMenuBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的菜单背景颜色。此方法是 {@code getCurrentTheme().getMenuBackground()} 的覆盖方法。

 @return 菜单背景颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getMenuForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的菜单前景颜色。此方法是 {@code getCurrentTheme().getMenuForeground()} 的覆盖方法。

 @return 菜单前景颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getMenuSelectedBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的菜单选中背景颜色。此方法是 {@code getCurrentTheme().getMenuSelectedBackground()} 的覆盖方法。

 @return 菜单选中背景颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getMenuSelectedForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的菜单选中前景颜色。此方法是 {@code getCurrentTheme().getMenuSelectedForeground()} 的覆盖方法。

 @return 菜单选中前景颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getMenuDisabledForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的菜单禁用前景颜色。此方法是 {@code getCurrentTheme().getMenuDisabledForeground()} 的覆盖方法。

 @return 菜单禁用前景颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getSeparatorBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的分隔符背景颜色。此方法是 {@code getCurrentTheme().getSeparatorBackground()} 的覆盖方法。

 @return 分隔符背景颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getSeparatorForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的分隔符前景颜色。此方法是 {@code getCurrentTheme().getSeparatorForeground()} 的覆盖方法。

 @return 分隔符前景颜色

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getAcceleratorForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的加速器前景颜色。此方法是 {@code getCurrentTheme().getAcceleratorForeground()} 的覆盖方法。

 @return 分隔符加速器前景颜色
 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getAcceleratorSelectedForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前主题的加速器选中前景颜色。此方法是 {@code getCurrentTheme().getAcceleratorSelectedForeground()} 的覆盖方法。

 @return 加速器选中前景颜色 

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.LayoutStyle javax.swing.plaf.metal.MetalLookAndFeel.getLayoutStyle()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 {@code LayoutStyle}，它实现 <a href="http://java.sun.com/products/jlf/ed2/book/HIG.Visual2.html">http://java.sun.com/products/jlf/ed2/book/HIG.Visual2.html</a> 中指定的 Java 外观设计原则。

@return 实现 Java 外观设计原则的 LayoutStyle 
@since 1.6

<!-- END DATA -->
