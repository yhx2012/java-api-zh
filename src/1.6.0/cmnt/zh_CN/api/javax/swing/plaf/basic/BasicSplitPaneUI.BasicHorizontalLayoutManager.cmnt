<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager extends java.lang.Object implements java.awt.LayoutManager2
<!-- END KEY -->
<!-- BEGIN DATA -->
具有 HORIZONTAL_SPLIT 方向的 JSplitPane 的 LayoutManager。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.layoutContainer(Container container)
<!-- END KEY -->
<!-- BEGIN DATA -->
进行实际布局。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.addLayoutComponent(String place, Component component)
<!-- END KEY -->
<!-- BEGIN DATA -->
在 place 位置添加组件。Place 必须为 JSplitPane.LEFT、RIGHT、TOP、BOTTOM 或 null（用于分隔器）之一。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.minimumLayoutSize(Container container)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含子级所需的最小大小。宽度为所有子级的最小宽度之和，高度为子级的最小高度中的最大者。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.preferredLayoutSize(Container container)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含子级所需的首选大小。宽度为所有子级的首选宽度之和，高度为子级的首选高度中的最大者。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.removeLayoutComponent(Component component)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据了解的情况移除指定的组件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.addLayoutComponent(Component comp, Object constraints)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的约束对象将指定组件添加到布局中。
@param comp 要添加的组件
@param constraints  如何将组件添加到布局以及添加到何处。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getLayoutAlignmentX(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回容器沿 X 轴的对齐方式。这指出相对于其他组件将如何排列该组件。该值应该在 0 到 1 之间，其中，0 表示沿原点进行对齐，1 表示在距原点最远的地方对齐，0.5 表示居中等等。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getLayoutAlignmentY(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回容器沿 Y 轴的对齐方式。这指出相对于其他组件将如何排列该组件。该值应该在 0 到 1 之间，其中，0 表示沿原点进行对齐，1 表示在距原点最远的地方对齐，0.5 表示居中等等。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.invalidateLayout(Container c)
<!-- END KEY -->
<!-- BEGIN DATA -->
不执行任何操作。如果开发人员确实希望更改其中某个视图的大小，应该传递 JSplitPane.resetToPreferredSizes 的消息。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.maximumLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最大布局大小，该大小在两个方向上都是 Integer.MAX_VALUE。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.resetToPreferredSizes()
<!-- END KEY -->
<!-- BEGIN DATA -->
标记接收者，以便下一次布置此实例时它将请求首选大小。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.resetSizeAt(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
在传入位置重置 Component 的大小。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.setSizes(int[] newSizes)
<!-- END KEY -->
<!-- BEGIN DATA -->
将大小设置为 <code>newSizes</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int[] javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getSizes()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回组件的大小。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getPreferredSizeOfComponent(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回传入 Component 的首选大小的宽度。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getSizeOfComponent(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回传入组件的宽度。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getAvailableSize(Dimension containerSize, Insets insets)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回基于容器大小和 Insets 的可用宽度。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getInitialLocation(Insets insets)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 Insets 不为 null，则返回左边 inset；如果其为 null，则返回 0。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.setComponentToSize(Component c, int size, int location, Insets insets, Dimension containerSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件 c 的宽度设置为 size（将其 x 的位置放置到 location），将 y 和高度分别设置为 insets.top 和 containersize.height 减去上下 insets。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.updateComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定组件。只要将其新实例安装到现有 SplitPane 中就应该调用此方法。

<!-- END DATA -->
