<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicProgressBarUI extends javax.swing.plaf.ProgressBarUI
<!-- END KEY -->
<!-- BEGIN DATA -->
ProgressBarUI 的基本 L&F 实现。

@version 1.68 03/11/04
@author Michael C. Albers
@author Kathy Walrath

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.plaf.basic.BasicProgressBarUI.boxRect
<!-- END KEY -->
<!-- BEGIN DATA -->

用于保存要绘制的跳动框（由 getBox 返回）的位置和大小。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicProgressBarUI.startAnimationTimer()
<!-- END KEY -->
<!-- BEGIN DATA -->
启动动画线程，如果必要则创建并初始化它。当不确定的进度条应该启动动画时，调用此方法。此操作的理由包括：
 <ul>
<li>此进度条是确定的并变得可显示
<li>此进度条是可显示的并变得确定
<li>进度条是可显示和确定的，并且安装了此 UI
 </ul>
如果实现自己的动画线程，则必须重写此线程。

@since 1.4
@see #stopAnimationTimer

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicProgressBarUI.stopAnimationTimer()
<!-- END KEY -->
<!-- BEGIN DATA -->
停止动画线程。应该停止不确定的动画时调用此方法。此操作的理由包括：
 <ul>
<li>进度条更改为确定
<li>进度条不再是可显示层次结构的一部分
<li>未安装此 UI
 </ul>
如果实现自己的动画线程，则必须重写此线程。

@since 1.4
@see #startAnimationTimer

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicProgressBarUI.uninstallListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除此对象安装的所有侦听器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicProgressBarUI.getBaseline(JComponent c, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回基线。 

 @throws NullPointerException {@inheritDoc}
 @throws IllegalArgumentException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component.BaselineResizeBehavior javax.swing.plaf.basic.BasicProgressBarUI.getBaselineResizeBehavior(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个枚举，它指示该组件的基线如何随大小的改变而发生更改。  

 @throws NullPointerException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Color javax.swing.plaf.basic.BasicProgressBarUI.getSelectionForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果在进度条的填充区域上绘制文本，文本的颜色为 &quot;selectionForeground&quot;。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Color javax.swing.plaf.basic.BasicProgressBarUI.getSelectionBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果在进度条的未填充区域上绘制文本，则文本的颜色为 &quot;selectionBackground&quot;。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicProgressBarUI.getCellLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回要在进度条中呈现的每个单个单元格/单元的宽度（如果为 HORIZONTAL）或高度（如果为 VERTICAL）。但是，为了文本呈现的简易性和出于审美考虑，呈现进度字符串时，此方法将返回 1。

@return 表示单元格之间间隔的值
@see    #setCellLength
@see    JProgressBar#isStringPainted

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicProgressBarUI.getCellSpacing()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回进度条中每个单元格/单元之间的间隔。但是，为了文本呈现的简易性和出于审美考虑，呈现进度字符串时，此方法将返回 0。

@return 表示单元格之间间隔的值
@see    #setCellSpacing
@see    JProgressBar#isStringPainted

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicProgressBarUI.getAmountFull(Insets b, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法确定进度条的量，该量应该基于从模型搜集的完成百分比填充。此方法是一种共同的操作，所以被作为抽象方法提出来。它假定进度条是线性的。就是说，如果要制作圆形进度指示器，则要重写此方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicProgressBarUI.paint(Graphics g, JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将绘制委托给两种方法之一：paintDeterminate 和 paintIndeterminate。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.plaf.basic.BasicProgressBarUI.getBox(Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->
存储将为 <code>r</code> 中的当前动画索引绘制并返回 <code>r</code> 的跳动框中位置和大小。在 <code>paintIndeterminate</code> 的此类的实现中执行添加绘制的子类（例如，围绕跳动框绘制轮廓）可以使用此方法获取刚刚绘制的跳动框的位置。通过重写此方法，可以完全控制跳动框的大小和位置，无需重新实现 <code>paintIndeterminate</code>。

@param r  要修改的 Rectangle 实例；可能为 <code>null</code>
@return   如果不应该绘制框，则返回 <code>null</code>；否则返回传入的矩形（如果非 null）或新矩形

@see #setAnimationIndex
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicProgressBarUI.getBoxLength(int availableLength, int otherDimension)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回要绘制的&ldquo;跳动框&rdquo;的长度。<code>paintIndeterminate</code> 的默认实现调用此方法来获取框的宽度（如果进度条是水平的）或高度（如果是垂直的）。例如：
 <blockquote>
 <pre>
boxRect.width = getBoxLength(componentInnards.width,
                             componentInnards.height);
 </pre>
 </blockquote>

@param availableLength  跳动框可移动的空间量；对于水平进度条而言，此空间量应为进度条的内部宽度（组件宽度减去边框）
@param otherDimension   对于水平进度条，此空间量应为进度条的内部高度；此值可能用于约束或确定返回值。

@return 要确定的框的尺寸；必须不大于 <code>availableLength</code>

@see javax.swing.SwingUtilities#calculateInnerArea
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicProgressBarUI.paintIndeterminate(Graphics g, JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
对所有线性跳动框进度条都能正确执行操作的多用途绘制方法。如果要制作另一种进度条，则重写此方法。

@see #paintDeterminate

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicProgressBarUI.paintDeterminate(Graphics g, JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
对几乎所有线性、确定进度条都能正确执行操作的多用途绘制方法。通过在默认表中设置几个值，就可以很好地绘制进度条了。如果要制作圆形或半圆形进度条，自然要重写此方法。
 
@see #paintIndeterminate

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Point javax.swing.plaf.basic.BasicProgressBarUI.getStringPlacement(Graphics g, String progressString, int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定将绘制进度字符串的位置。此实现将其置于进度条的中心（x 和 y 都是如此）。如果要向右、向左、向上或向下对齐进度字符串或者不管出于何种原因需要轻微移动它，则重写此方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicProgressBarUI.getMinimumSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
此组件的最小大小为 10。此处的基本原理是，每 10％ 应该至少有一个像素。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicProgressBarUI.getAnimationIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取当前动画窗体的索引。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final int javax.swing.plaf.basic.BasicProgressBarUI.getFrameCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回不确定 JProgessBar 所使用的完整动画循环的窗体数。进度块在整个循环过程中将从一端移动到另一端并返回。此可视行为可由其他外观中的子类更改。
 
 @return 窗体数
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicProgressBarUI.setAnimationIndex(int newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
将当前动画窗体的索引设置为指定的值，并请求重绘进度条。不使用默认绘制代码的子类可能需要重写此方法来更改 <code>repaint</code> 方法的调用方式。

@param newValue 新动画索引；没有对其值执行检查
@see #incrementAnimationIndex

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicProgressBarUI.incrementAnimationIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
将当前动画窗体的索引设置为下一个有效值，这将导致进度条的重绘。默认情况下下一个有效值是当前动画索引加上一。如果新值过大，则此方法将索引设置为 0。子类可能需要重写此方法以确保索引不超越特定进度条实例所需的窗体数。默认的动画线程每隔 <em>X</em> 毫秒就会调用一次此方法，其中 <em>X</em> 由 &quot;ProgressBar.repaintInterval&quot; UI 默认值指定。

@see #setAnimationIndex
@since 1.4

<!-- END DATA -->
