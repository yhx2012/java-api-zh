<!-- BEGIN KEY -->
public class javax.swing.plaf.multi.MultiToolBarUI extends javax.swing.plaf.ToolBarUI
<!-- END KEY -->
<!-- BEGIN DATA -->
用于组合 <code>ToolBarUI</code> 的多路 UI。
 
<p>此文件由 AutoMulti 自动生成。

@version 1.28 12/19/03 17:39:45
@author  Otto Multey

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Vector javax.swing.plaf.multi.MultiToolBarUI.uis
<!-- END KEY -->
<!-- BEGIN DATA -->
包含实际 UI 的向量。这是在对 <code>createUI</code> 的调用中生成的，并且可通过调用 <code>getUIs</code> 方法获得它。可以保证第一个元素是从默认外观获得的实际 UI。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.ComponentUI[] javax.swing.plaf.multi.MultiToolBarUI.getUIs()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此多路 UI 关联的 UI 列表。这允许由意识到组件上多路 UI 的应用程序进行 UI 处理。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.multi.MultiToolBarUI.contains(JComponent a, int b, int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
在由此对象处理的每个 UI 上调用 <code>contains</code> 方法。
 
@return 从第一个 UI 获得的值，该 UI 是从默认 <code>LookAndFeel</code> 获得的 UI

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiToolBarUI.update(Graphics a, JComponent b)
<!-- END KEY -->
<!-- BEGIN DATA -->
在由此对象处理的每个 UI 上调用 <code>update</code> 方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ComponentUI javax.swing.plaf.multi.MultiToolBarUI.createUI(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果任意辅助 <code>LookAndFeel</code> 都支持此 UI，则返回一个多路 UI 实例。否则只返回从默认 <code>LookAndFeel</code> 获得的 UI 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiToolBarUI.installUI(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
在由此对象处理的每个 UI 上调用 <code>installUI</code> 方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiToolBarUI.uninstallUI(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
在由此对象处理的每个 UI 上调用 <code>uninstallUI</code> 方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiToolBarUI.paint(Graphics a, JComponent b)
<!-- END KEY -->
<!-- BEGIN DATA -->
在由此对象处理的每个 UI 上调用 <code>paint</code> 方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.multi.MultiToolBarUI.getPreferredSize(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
在由此对象处理的每个 UI 上调用 <code>getPreferredSize</code> 方法。
 
@return 从第一个 UI 获得的值，该 UI 是从默认 <code>LookAndFeel</code> 获得的 UI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.multi.MultiToolBarUI.getMinimumSize(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
在由此对象处理的每个 UI 上调用 <code>getMinimumSize</code> 方法。
 
@return 从第一个 UI 获得的值，该 UI 是从默认 <code>LookAndFeel</code> 获得的 UI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.multi.MultiToolBarUI.getMaximumSize(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
在由此对象处理的每个 UI 上调用 <code>getMaximumSize</code> 方法。
 
@return 从第一个 UI 获得的值，该 UI 是从默认 <code>LookAndFeel</code> 获得的 UI

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.multi.MultiToolBarUI.getAccessibleChildrenCount(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
在由此对象处理的每个 UI 上调用 <code>getAccessibleChildrenCount</code> 方法。
 
@return 从第一个 UI 获得的值，该 UI 是从默认 <code>LookAndFeel</code> 获得的 UI

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.plaf.multi.MultiToolBarUI.getAccessibleChild(JComponent a, int b)
<!-- END KEY -->
<!-- BEGIN DATA -->
在由此对象处理的每个 UI 上调用 <code>getAccessibleChild</code> 方法。
 
@return 从第一个 UI 获得的值，该 UI 是从默认 <code>LookAndFeel</code> 获得的 UI

<!-- END DATA -->
