<!-- BEGIN KEY -->
public class javax.swing.plaf.synth.SynthGraphicsUtils extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
用于基本图形调用的包装器。

@version 1.16, 12/19/03
@since 1.5
@author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.synth.SynthGraphicsUtils()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>SynthGraphicsUtils</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthGraphicsUtils.drawLine(SynthContext context, Object paintKey, Graphics g, int x1, int y1, int x2, int y2)
<!-- END KEY -->
<!-- BEGIN DATA -->
在两个端点之间绘制一条线。

@param context 指示承载区域。
@param paintKey 标识请求绘制的组件部分，可以为 null。
@param g 要绘制的 Graphics 对象
@param x1 x 原点
@param y1 y 原点
@param x2 x 目标
@param y2 y 目标

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthGraphicsUtils.drawLine(SynthContext context, Object paintKey, Graphics g, int x1, int y1, int x2, int y2, Object styleKey)
<!-- END KEY -->
<!-- BEGIN DATA -->
 在两个端点之间绘制一条线。
 <p>此实现只支持一个线风格键 <code>"dashed"</code>。<code>"dashed"</code> 线风格只应用于垂直和水平的线。 
 <p>指定 <code>null</code> 或任何 <code>"dashed"</code> 以外的键将绘制出实线。

 @param context 指示承载区域
 @param paintKey 标识请求绘制的组件部分，可以为 null。
 @param g 要绘制的 Graphics 对象
 @param x1 x 原点
 @param y1 y 原点
 @param x2 x 目标
 @param y2 y 目标
 @param styleKey 标识所请求的线风格（例如，"dashed"）
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.synth.SynthGraphicsUtils.layoutText(SynthContext ss, FontMetrics fm, String text, Icon icon, int hAlign, int vAlign, int hTextPosition, int vTextPosition, Rectangle viewR, Rectangle iconR, Rectangle textR, int iconTextGap)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据通过引用返回的放置图标和文本的位置，布局文本和图标。

@param ss SynthContext
@param fm 将使用的 Font 的 FontMetric，该参数可以忽略
@param text 要布置的文本
@param icon 要布置的图标
@param hAlign 水平对齐方式
@param vAlign 垂直对齐方式
@param hTextPosition 水平文本位置
@param vTextPosition 垂直文本位置
@param viewR 在其中布置文本和图标的矩形。
@param iconR 将图标边界放入其中的矩形
@param textR 将文本放入其中的矩形
@param iconTextGap 图标和文本之间的间隙

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.synth.SynthGraphicsUtils.computeStringWidth(SynthContext ss, Font font, FontMetrics metrics, String text)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回传入字符串的大小。

@param ss SynthContext
@param font 要使用的字体
@param metrics FontMetrics，可以忽略
@param text 将获得其大小的文本。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.synth.SynthGraphicsUtils.getMinimumSize(SynthContext ss, Font font, String text, Icon icon, int hAlign, int vAlign, int hTextPosition, int vTextPosition, int iconTextGap, int mnemonicIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回正确呈现图标和文本所需的最小大小。

@param ss SynthContext
@param font 要使用的字体
@param text 要布置的文本
@param icon 要布置的图标
@param hAlign 水平对齐方式
@param vAlign 垂直对齐方式
@param hTextPosition 水平文本位置
@param vTextPosition 垂直文本位置
@param iconTextGap 图标与文本之间的间隙
@param mnemonicIndex 文本中的索引，在该处呈现助记符，-1 表示没有助记符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.synth.SynthGraphicsUtils.getMaximumSize(SynthContext ss, Font font, String text, Icon icon, int hAlign, int vAlign, int hTextPosition, int vTextPosition, int iconTextGap, int mnemonicIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回正确呈现图标和文本所需的最大大小。

@param ss SynthContext
@param font 要使用的字体
@param text 要布置的文本
@param icon 要布置的图标
@param hAlign 水平对齐方式
@param vAlign 垂直对齐方式
@param hTextPosition 水平文本位置
@param vTextPosition 垂直文本位置
@param iconTextGap 图标与文本之间的间隙
@param mnemonicIndex 文本中的索引，在该处呈现助记符，-1 表示没有助记符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.synth.SynthGraphicsUtils.getMaximumCharHeight(SynthContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据传入的 SynthContext 返回 Font 的最大高度。

@param context 确定字体使用的 SynthContext。
@return 根据传入的上下文，返回字体中字符的最大高度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.synth.SynthGraphicsUtils.getPreferredSize(SynthContext ss, Font font, String text, Icon icon, int hAlign, int vAlign, int hTextPosition, int vTextPosition, int iconTextGap, int mnemonicIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回正确呈现图标和文本所需的首选大小。

@param ss SynthContext
@param font 要使用的字体
@param text 要布置的文本
@param icon 要布置的图标
@param hAlign 水平对齐方式
@param vAlign 垂直对齐方式
@param hTextPosition 水平文本位置
@param vTextPosition 垂直文本位置
@param iconTextGap 图标与文本之间的间隙
@param mnemonicIndex 文本中的索引，在该处呈现助记符，-1 表示没有助记符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthGraphicsUtils.paintText(SynthContext ss, Graphics g, String text, Rectangle bounds, int mnemonicIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
在指定位置上绘制文本。此方法不会尝试以 html 形式呈现文本，也不会根据组件的 insets 进行偏移。

@param ss SynthContext
@param g 用来在其中呈现字符串的图形。
@param text 要呈现的文本
@param bounds 文本的绘制边界。
@param mnemonicIndex 索引，在该处绘制字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthGraphicsUtils.paintText(SynthContext ss, Graphics g, String text, int x, int y, int mnemonicIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
在指定位置上绘制文本。此方法不会尝试以 html 形式呈现文本，也不会根据组件的 insets 进行偏移。

@param ss SynthContext
@param g 用来在其中呈现字符串的图形。
@param text 要呈现的文本
@param x 绘制文本的位置的 X 位置。
@param y 绘制文本的位置的左上角。
@param mnemonicIndex 索引，在该处绘制字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthGraphicsUtils.paintText(SynthContext ss, Graphics g, String text, Icon icon, int hAlign, int vAlign, int hTextPosition, int vTextPosition, int iconTextGap, int mnemonicIndex, int textOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制图标和文本。如有必要，此方法将以 html 形式呈现文本，并根据组件的 insets 对位置进行偏移。

@param ss SynthContext
@param g 在其中呈现字符串和图标的图形
@param text 要布置的文本
@param icon 要布置的图标
@param hAlign 水平对齐方式
@param vAlign 垂直对齐方式
@param hTextPosition 水平文本位置
@param vTextPosition 垂直文本位置
@param iconTextGap 图标与文本之间的间隙
@param mnemonicIndex 文本中的索引，在该处呈现助记符，-1 表示没有助记符。
@param textOffset 进行绘制时文本的偏移量

<!-- END DATA -->
