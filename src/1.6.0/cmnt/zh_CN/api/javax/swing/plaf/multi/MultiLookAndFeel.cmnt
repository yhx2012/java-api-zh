<!-- BEGIN KEY -->
public class javax.swing.plaf.multi.MultiLookAndFeel extends javax.swing.LookAndFeel
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>多路外观允许同时将多个 UI 与一个组件相关联。主外观称为<em>默认</em> 外观，而其他外观则称为<em>辅助</em> 外观。
 <p>
 
有关更多信息，请参阅 <a href="doc-files/multi_tsc.html" target="_top">Using the Multiplexing Look and Feel</a>。
 
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前的序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@see UIManager#addAuxiliaryLookAndFeel
@see javax.swing.plaf.multi

@version 1.34 12/19/03
@author Willie Walker

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.multi.MultiLookAndFeel.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回适合在菜单中使用、标识此外观的 string。

@return 一个 string，如 &quot;Multiplexing Look and Feel&quot; 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.multi.MultiLookAndFeel.getID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回适合应用程序/服务使用、标识此外观的 string。
 
@return &quot;Multiplex&quot;

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.multi.MultiLookAndFeel.getDescription()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对此外观的一行描述。
 
@return 描述性的 string，如 &quot;Allows multiple UI instances per component instance&quot;

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.multi.MultiLookAndFeel.isNativeLookAndFeel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>false</code>；此外观对于任意平台而言不是本机的。

@return <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.multi.MultiLookAndFeel.isSupportedLookAndFeel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>true</code>；所有平台都允许此外观。

@return <code>true</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.UIDefaults javax.swing.plaf.multi.MultiLookAndFeel.getDefaults()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建、初始化并返回特定于外观的默认值。对于此外观，默认仅包括 UI 类 ID（如 &quot;ButtonUI&quot;）与 <code>ComponentUI</code> 类名称（如 &quot;javax.swing.plaf.multi.MultiButtonUI&quot;）的映射关系。

@return 已初始化的 <code>UIDefaults</code> 对象
@see javax.swing.JComponent#getUIClassID

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ComponentUI javax.swing.plaf.multi.MultiLookAndFeel.createUIs(ComponentUI mui, java.util.Vector uis, JComponent target)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建表示 <code>target</code> 组件所需的 <code>ComponentUI</code> 对象，将对象放入 <code>uis</code> 向量中，并返回最能表示该组件 UI 的 <code>ComponentUI</code> 对象。此方法查找 <code>ComponentUI</code> 对象，方法是在当前使用的所有默认和辅助外观上调用 <code>getDefaults().getUI(target)</code>。此方法添加到 <code>uis</code> 向量中的第一个 UI 对象是针对默认外观的。
 <p>
此方法由 <code>MultiXxxxUI</code> 类的 <code>createUI</code> 方法调用。
 
@param mui 表示 <code>target</code> 组件完整 UI 的 <code>ComponentUI</code> 对象；这应该是某个 <code>MultiXxxxUI</code> 类的实例
@param uis 一个 <code>Vector</code>；通常这是 <code> mui</code> 参数的 <code>uis</code> 字段
@param target 一个组件，由 <code>mui</code> 表示其 UI

@return 如果该组件有辅助 UI 对象，则返回 <code>mui</code>；否则返回默认外观的 UI 对象，如果无法找到默认 UI 对象，则返回 <code>null</code>

@see javax.swing.UIManager#getAuxiliaryLookAndFeels
@see javax.swing.UIDefaults#getUI
@see MultiButtonUI#uis
@see MultiButtonUI#createUI

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static javax.swing.plaf.ComponentUI[] javax.swing.plaf.multi.MultiLookAndFeel.uisToArray(java.util.Vector uis)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个数组，使用来自传入向量的 UI 对象填充它并返回该数组。如果 <code>uis</code> 为 null，则此方法返回具有零元素的数组。如果 <code>uis</code> 是空向量，则此方法返回 <code>null</code>。如果 <code>uis</code> 向量中的任何对象不是 <code>ComponentUI</code> 类型的，则出现运行时错误。
 
@param uis 包含 <code>ComponentUI</code> 对象的向量
@return 等同于传入向量的数组
         
<!-- END DATA -->
