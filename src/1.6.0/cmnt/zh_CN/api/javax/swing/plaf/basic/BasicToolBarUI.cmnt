<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicToolBarUI extends javax.swing.plaf.ToolBarUI implements javax.swing.SwingConstants
<!-- END KEY -->
<!-- BEGIN DATA -->
ToolBarUI 的基本 L&F 实现。此实现是一个&ldquo;组合的&rdquo;视图/控制器。
 <p>

@version 1.96 05/18/04
@author Georges Saab
@author Jeff Shapiro

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.KeyStroke javax.swing.plaf.basic.BasicToolBarUI.upKey
<!-- END KEY -->
<!-- BEGIN DATA -->
从 Java 2 平台 v1.3 开始，不再使用这种以前没有记录的字段。键绑定现在由 LookAndFeel 定义，请参阅键绑定规范以了解更多详细信息。

@deprecated 从 Java 2 平台 v1.3 开始。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.KeyStroke javax.swing.plaf.basic.BasicToolBarUI.downKey
<!-- END KEY -->
<!-- BEGIN DATA -->
从 Java 2 平台 v1.3 开始，不再使用这种以前没有记录的字段。键绑定现在由 LookAndFeel 定义，请参阅键绑定规范以了解更多详细信息。

@deprecated 从 Java 2 平台 v1.3 开始。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.KeyStroke javax.swing.plaf.basic.BasicToolBarUI.leftKey
<!-- END KEY -->
<!-- BEGIN DATA -->
从 Java 2 平台 v1.3 开始，不再使用这种以前没有记录的字段。键绑定现在由 LookAndFeel 定义，请参阅键绑定规范以了解更多详细信息。

@deprecated 从 Java 2 平台 v1.3 开始。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.KeyStroke javax.swing.plaf.basic.BasicToolBarUI.rightKey
<!-- END KEY -->
<!-- BEGIN DATA -->
从 Java 2 平台 v1.3 开始，不再使用这种以前没有记录的字段。键绑定现在由 LookAndFeel 定义，请参阅键绑定规范以了解更多详细信息。

@deprecated 从 Java 2 平台 v1.3 开始。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.border.Border javax.swing.plaf.basic.BasicToolBarUI.createRolloverBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建工具栏组件的翻转边框。如果启用了翻转边框，则将安装翻转边框。 
 <p>
重写此方法以提供备用翻转边框。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.border.Border javax.swing.plaf.basic.BasicToolBarUI.createNonRolloverBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建工具栏组件的非翻转边框。如果启用翻转边框，则此边框将作为添加到工具栏的组件的边框安装。
 <p>
重写此方法以提供备用翻转边框。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JFrame javax.swing.plaf.basic.BasicToolBarUI.createFloatingFrame(JToolBar toolbar)
<!-- END KEY -->
<!-- BEGIN DATA -->
不再使用，使用 BasicToolBarUI.createFloatingWindow(JToolBar)
@see #createFloatingWindow

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.RootPaneContainer javax.swing.plaf.basic.BasicToolBarUI.createFloatingWindow(JToolBar toolbar)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建将工具栏拖出其容器后包含该工具栏的窗口
@return <code>RootPaneContainer</code> 对象，包含工具栏。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.basic.BasicToolBarUI.isRolloverBorders()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个标志，用于确定是否启用翻转按钮边框。

@return 如果启用翻转按钮边框，则返回 true；否则返回 false
@see #setRolloverBorders
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicToolBarUI.setRolloverBorders(boolean rollover)
<!-- END KEY -->
<!-- BEGIN DATA -->
在工具栏上设置启用翻转边框的标志并根据标志的状态安装适当的边框。
    
@param rollover 如果为 true，则安装翻转边框。否则，安装非翻转边框
@see #isRolloverBorders
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicToolBarUI.installRolloverBorders(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
在 JComponent 的所有子组件上安装翻转边框。
 <p>
此方法是为每个子组件调用 <code>setBorderToRollover</code> 的便捷方法。
    
@param c 保存子组件（通常为 JToolBar）的容器
@see #setBorderToRollover
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicToolBarUI.installNonRolloverBorders(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
在 JComponent 的所有子组件上安装非翻转边框。非翻转边框是一种当子组件在工具栏中时安装在该子组件上的边框。
 <p>
此方法是为每个子组件调用 <code>setBorderToNonRollover</code> 的便捷方法。
    
@param c 保存子组件（通常为 JToolBar）的容器
@see #setBorderToNonRollover
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicToolBarUI.installNormalBorders(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
在 JComponent 的所有子组件上安装普通边框。普通边框指添加到工具栏前安装在子组件上的原始边框。
 <p>
此方法是为每个子组件调用 <code>setBorderNormal</code> 的便捷方法。
    
@param c 保存子组件（通常为 JToolBar）的容器
@see #setBorderToNonRollover
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicToolBarUI.setBorderToRollover(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件的边框设置为具有由 <code>createRolloverBorder</code> 创建的翻转边框。 

@param c 将安装翻转边框的组件
@see #createRolloverBorder
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.border.Border javax.swing.plaf.basic.BasicToolBarUI.getRolloverBorder(AbstractButton b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回按钮的翻转边框。

 @param b 为其计算翻转边框的按钮 
 @return 翻转边框
 @see #setBorderToRollover
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicToolBarUI.setBorderToNonRollover(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件的边框设置为具有由 <code>createNonRolloverBorder</code> 创建的翻转边框。 

@param c 将安装翻转边框的组件
@see #createNonRolloverBorder
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.border.Border javax.swing.plaf.basic.BasicToolBarUI.getNonRolloverBorder(AbstractButton b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回按钮的非翻转边框。 

 @param b 为其计算非翻转边框的按钮
 @return 非翻转边框
 @see #setBorderToNonRollover
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicToolBarUI.setBorderToNormal(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件的边框设置为具有普通边框。普通边框指添加到工具栏前安装在子组件上的原始边框。

@param c 将重新安装普通边框的组件
@see #createNonRolloverBorder
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.plaf.basic.BasicToolBarUI.getDockingColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取在连接 (docking) 区域上时显示的颜色。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicToolBarUI.setDockingColor(Color c)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置在连接区域上时显示的颜色。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.plaf.basic.BasicToolBarUI.getFloatingColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取在浮动区域上时显示的颜色。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicToolBarUI.setFloatingColor(Color c)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置在浮动区域上时显示的颜色。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicToolBarUI.paintDragWindow(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制用于拖动的窗口的内容。

@param g 要绘制的图形。
@throws NullPointerException 如果 <code>g</code> 为 null
@since 1.5

<!-- END DATA -->
