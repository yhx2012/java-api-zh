<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicTreeUI extends javax.swing.plaf.TreeUI
<!-- END KEY -->
<!-- BEGIN DATA -->
层次数据结构的基本 L&amp;F。
 <p>

@version 1.193 04/18/06
@author Scott Violet
@author Shannon Hickey (drag and drop)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTreeUI.leftChildIndent
<!-- END KEY -->
<!-- BEGIN DATA -->
从左页边空白到将绘制垂直虚线的位置之间的距离。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTreeUI.rightChildIndent
<!-- END KEY -->
<!-- BEGIN DATA -->
添加到 leftChildIndent 以确定将绘制单元格内容的位置的距离。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTreeUI.totalChildIndent
<!-- END KEY -->
<!-- BEGIN DATA -->
将缩进的总距离。leftChildIndent 和 rightChildIndent 的和。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Dimension javax.swing.plaf.basic.BasicTreeUI.preferredMinSize
<!-- END KEY -->
<!-- BEGIN DATA -->
最小首选大小。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTreeUI.lastSelectedRow
<!-- END KEY -->
<!-- BEGIN DATA -->
上一次选中行的索引。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JTree javax.swing.plaf.basic.BasicTreeUI.tree
<!-- END KEY -->
<!-- BEGIN DATA -->
要在其中进行绘制的组件。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.tree.TreeCellRenderer javax.swing.plaf.basic.BasicTreeUI.currentCellRenderer
<!-- END KEY -->
<!-- BEGIN DATA -->
要用于进行实际单元格绘制的渲染器。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.createdRenderer
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前在树中使用的渲染器由此实例创建，则设置为 true。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.tree.TreeCellEditor javax.swing.plaf.basic.BasicTreeUI.cellEditor
<!-- END KEY -->
<!-- BEGIN DATA -->
树的编辑器。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.createdCellEditor
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前位于树中的编辑器由此实例创建，则设置为 true。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.stopEditingInCompleteEditing
<!-- END KEY -->
<!-- BEGIN DATA -->
编辑时设置为 false，shouldSelectCell() 返回 true 表示应该在编辑前选中节点，在 completeEditing 中使用该字段。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.CellRendererPane javax.swing.plaf.basic.BasicTreeUI.rendererPane
<!-- END KEY -->
<!-- BEGIN DATA -->
用于绘制 TreeCellRenderer。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Dimension javax.swing.plaf.basic.BasicTreeUI.preferredSize
<!-- END KEY -->
<!-- BEGIN DATA -->
完全显示所有节点所需的大小。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.validCachedPreferredSize
<!-- END KEY -->
<!-- BEGIN DATA -->
preferredSize 是否有效？
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.AbstractLayoutCache javax.swing.plaf.basic.BasicTreeUI.treeState
<!-- END KEY -->
<!-- BEGIN DATA -->
负责处理大小和展开问题的对象。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Hashtable<javax.swing.tree.TreePath, java.lang.Boolean> javax.swing.plaf.basic.BasicTreeUI.drawingCache
<!-- END KEY -->
<!-- BEGIN DATA -->
用于最小化垂直线的绘制。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.largeModel
<!-- END KEY -->
<!-- BEGIN DATA -->
如果对 largeModel 进行优化，则为 True。不支持它的子类可能希望重写 createLayoutCache 以便不返回 FixedHeightLayoutCache 实例。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.AbstractLayoutCache.NodeDimensions javax.swing.plaf.basic.BasicTreeUI.nodeDimensions
<!-- END KEY -->
<!-- BEGIN DATA -->
负责告知 TreeState 节点所需的大小。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeModel javax.swing.plaf.basic.BasicTreeUI.treeModel
<!-- END KEY -->
<!-- BEGIN DATA -->
用于确定要显示的内容。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeSelectionModel javax.swing.plaf.basic.BasicTreeUI.treeSelectionModel
<!-- END KEY -->
<!-- BEGIN DATA -->
维护选择的模型。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTreeUI.depthOffset
<!-- END KEY -->
<!-- BEGIN DATA -->
要正确计算 x 位置应该偏移的深度。它依赖于根是否可见以及根句柄是否可见。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.plaf.basic.BasicTreeUI.editingComponent
<!-- END KEY -->
<!-- BEGIN DATA -->
编辑时，它将是进行实际编辑的 Component。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreePath javax.swing.plaf.basic.BasicTreeUI.editingPath
<!-- END KEY -->
<!-- BEGIN DATA -->
要编辑的路径。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTreeUI.editingRow
<!-- END KEY -->
<!-- BEGIN DATA -->
要编辑的行。仅当 editingComponent 不为 null 时才引用。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.editorHasDifferentSize
<!-- END KEY -->
<!-- BEGIN DATA -->
如果编辑器的大小不同于渲染器，则设置为 true。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.setLargeModel(boolean largeModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果必要，则更新 componentListener。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.setRowHeight(int rowHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置行高度，此方法将被转发到 treeState。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.setCellRenderer(TreeCellRenderer tcr)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 TreeCellRenderer 设置为 <code>tcr</code>。此方法调用 <code>updateRenderer</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeCellRenderer javax.swing.plaf.basic.BasicTreeUI.getCellRenderer()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 currentCellRenderer，可以为树渲染器，也可以为 defaultCellRenderer，无论哪个都不为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.setModel(TreeModel model)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 TreeModel。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.setRootVisible(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
将根设置为可见。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.setShowsRootHandles(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定是否显示节点句柄。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.setCellEditor(TreeCellEditor editor)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置单元格编辑器。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.setEditable(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
配置接收者以允许或不允许进行编辑。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.setSelectionModel(TreeSelectionModel newLSM)
<!-- END KEY -->
<!-- BEGIN DATA -->
重置选择模型。在模型上安装适当的侦听器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.plaf.basic.BasicTreeUI.getPathBounds(JTree tree, TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回封闭标签部分的 Rectangle，路径中的最后一个项将在这一部分绘制。如果路径中的任何组件当前有效，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.plaf.basic.BasicTreeUI.getPathForRow(JTree tree, int row)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回传入的 row 的路径。如果 row 不可见，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicTreeUI.getRowForPath(JTree tree, TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回可在其中看见路径中标识的最后一个项的行。如果路径中的所有元素当前都是不可见的，则返回 -1。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicTreeUI.getRowCount(JTree tree)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回将显示的行数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.plaf.basic.BasicTreeUI.getClosestPathForLocation(JTree tree, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回到达最接近于 x,y 的那个节点的路径。如果当前不可见，则返回 null，否则该方法总是返回一条有效路径。如果要测试返回的对象是否正好位于 x, y，则应该获取返回路径的边界，并根据该边界测试 x,y。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.basic.BasicTreeUI.isEditing(JTree tree)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果树正被编辑，则返回 true。正被编辑的项可由 getEditingPath() 返回。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.basic.BasicTreeUI.stopEditing(JTree tree)
<!-- END KEY -->
<!-- BEGIN DATA -->
停止当前编辑会话。如果不在编辑树，则此方法无效。如果编辑器允许停止编辑会话，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicTreeUI.cancelEditing(JTree tree)
<!-- END KEY -->
<!-- BEGIN DATA -->
取消当前编辑会话。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicTreeUI.startEditingAtPath(JTree tree, TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
选择路径中的最后一个项并尝试对其进行编辑。如果 CellEditor 不允许对所选项进行编辑操作，则编辑将失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.plaf.basic.BasicTreeUI.getEditingPath(JTree tree)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回到达正被编辑的元素的路径。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.prepareForUIInstall()
<!-- END KEY -->
<!-- BEGIN DATA -->
在设置 <code>tree</code> 实例变量之后，但在安装任何默认值/侦听器之前调用此方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.completeUIInstall()
<!-- END KEY -->
<!-- BEGIN DATA -->
在安装所有默认值/侦听器之后根据 installUI 调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.installComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->
安装作为渲染器窗格的树的子组件。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.AbstractLayoutCache.NodeDimensions javax.swing.plaf.basic.BasicTreeUI.createNodeDimensions()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建能够确定树中给定节点大小的 NodeDimensions 的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeListener javax.swing.plaf.basic.BasicTreeUI.createPropertyChangeListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建负责基于树的更改方式更新 UI 的侦听器。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.event.MouseListener javax.swing.plaf.basic.BasicTreeUI.createMouseListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建负责基于鼠标事件更新选择的侦听器。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.event.FocusListener javax.swing.plaf.basic.BasicTreeUI.createFocusListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建失去/获取焦点时负责更新显示的侦听器。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.event.KeyListener javax.swing.plaf.basic.BasicTreeUI.createKeyListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建负责从树获取键事件的侦听器。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeListener javax.swing.plaf.basic.BasicTreeUI.createSelectionModelPropertyChangeListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建负责从选择模型获取属性更改事件的侦听器。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.TreeSelectionListener javax.swing.plaf.basic.BasicTreeUI.createTreeSelectionListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建基于选择更改方法更新显示的侦听器。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.CellEditorListener javax.swing.plaf.basic.BasicTreeUI.createCellEditorListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建在当前编辑器中处理事件的侦听器。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.event.ComponentListener javax.swing.plaf.basic.BasicTreeUI.createComponentListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回新的 ComponentHandler。它用于大型模型，在组件移动时将 validCachedPreferredSize 标记为无效。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.TreeExpansionListener javax.swing.plaf.basic.BasicTreeUI.createTreeExpansionListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回在节点展开状态更改时负责更新 treestate 的对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.AbstractLayoutCache javax.swing.plaf.basic.BasicTreeUI.createLayoutCache()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建负责管理展开内容及节点大小的对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.CellRendererPane javax.swing.plaf.basic.BasicTreeUI.createCellRendererPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于放置渲染器组件的渲染器窗格。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeCellEditor javax.swing.plaf.basic.BasicTreeUI.createDefaultCellEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建默认单元格编辑器。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeCellRenderer javax.swing.plaf.basic.BasicTreeUI.createDefaultCellRenderer()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于为每个节点添加标志的默认单元格渲染器。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.TreeModelListener javax.swing.plaf.basic.BasicTreeUI.createTreeModelListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回可以在模型更改时更新树的侦听器。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.uninstallComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->
卸载渲染器窗格。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicTreeUI.getBaseline(JComponent c, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回基线。

 @throws NullPointerException {@inheritDoc}
 @throws IllegalArgumentException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component.BaselineResizeBehavior javax.swing.plaf.basic.BasicTreeUI.getBaselineResizeBehavior(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回一个枚举，它指示组件的基线如何随大小的改变而发生更改。 

 @throws NullPointerException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.paintHorizontalPartOfLeg(Graphics g, Rectangle clipBounds, Insets insets, Rectangle bounds, TreePath path, int row, boolean isExpanded, boolean hasBeenExpanded, boolean isLeaf)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制支路 (leg) 的水平部分。接收者不应修改 <code>clipBounds</code> 或 <code>insets</code>。<p>
注：如果树不可见，则 <code>parentRow</code> 为 -1。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.paintVerticalPartOfLeg(Graphics g, Rectangle clipBounds, Insets insets, TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制支路的垂直部分。接收者不应修改 <code>clipBounds</code>、<code>insets</code>。<p>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.paintExpandControl(Graphics g, Rectangle clipBounds, Insets insets, Rectangle bounds, TreePath path, int row, boolean isExpanded, boolean hasBeenExpanded, boolean isLeaf)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制 row 的展开（切换）部分。接收者不应修改 <code>clipBounds</code> 或 <code>insets</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.paintRow(Graphics g, Rectangle clipBounds, Insets insets, Rectangle bounds, TreePath path, int row, boolean isExpanded, boolean hasBeenExpanded, boolean isLeaf)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制 row 的渲染器部分。接收者不应修改 <code>clipBounds</code> 或 <code>insets</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.shouldPaintExpandControl(TreePath path, int row, boolean isExpanded, boolean hasBeenExpanded, boolean isLeaf)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果应该为指定行绘制展开（切换）控件，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.paintVerticalLine(Graphics g, JComponent c, int x, int top, int bottom)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制垂直线。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.paintHorizontalLine(Graphics g, JComponent c, int y, int left, int right)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制水平线。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTreeUI.getVerticalLegBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
默认情况下，节点间支路的垂直元素开始于父节点的底部。此方法能让支路从该位置以下开始。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTreeUI.getHorizontalLegBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
默认情况下，节点间支路的水平元素开始于子节点左侧的右边。此方法能让支路在该位置以前结束。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTreeUI.getRowX(int row, int depth)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回沿 x 轴呈现特定行的位置。返回值不包括在 JTree 上指定的任何 Insets。此方法不检查行或深度的有效性，只是假定其正确；如果行或深度与树的行或深度不匹配，则其也不抛出 Exception。

@param row 返回 x 位置的行
@param depth 行的深度
@return 给定行的缩进量。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.updateLayoutCacheExpandedNodes()
<!-- END KEY -->
<!-- BEGIN DATA -->
让在 JTree 中展开的所有节点在 LayoutCache 中展开。此方法通过根路径调用 updateExpandedDescendants。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.updateExpandedDescendants(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过从树获取展开的子代并将其转发到树状态来更新 <code>path</code> 的所有子代的展开状态。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreePath javax.swing.plaf.basic.BasicTreeUI.getLastChildPath(TreePath parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回到 <code>parent</code> 的最后一个子节点的路径。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.updateDepthOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
更新每次应该偏移的深度量。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.updateCellEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->

基于包含所在的 JTree 的可编辑性更新 cellEditor。如果树可编辑但不具有 cellEditor，则使用基本的 cellEditor。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.updateRenderer()
<!-- END KEY -->
<!-- BEGIN DATA -->
当渲染器更改时从所处的树中传递消息。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.configureLayoutCache()
<!-- END KEY -->
<!-- BEGIN DATA -->
基于为其提供外观的树重置 TreeState 实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.updateSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
将缓存大小标记为无效并使用 <code>treeDidChange</code> 传递树的信息。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.updateCachedPreferredSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
更新 <code>preferredSize</code> 实例变量，该变量从 <code>getPreferredSize()</code> 返回。<p>
对于从左到右方向，大小是根据当前的 AbstractLayoutCache 确定的。对于 RTL 方向，首选大小为宽度减去最小 x 位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.pathWasExpanded(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
在展开 VisibleTreeNode 后，从其传递消息。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.pathWasCollapsed(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
在折叠 VisibleTreeNode 后，从其传递消息。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.ensureRowsAreVisible(int beginRow, int endRow)
<!-- END KEY -->
<!-- BEGIN DATA -->
确保 beginRow 通过 endRow 标识的行是可见的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicTreeUI.setPreferredMinSize(Dimension newSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置首选最小大小。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicTreeUI.getPreferredMinSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最小首选大小。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicTreeUI.getPreferredSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回首选大小以正确显示树，这是一种 getPreferredSize(c, false) 的替代方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicTreeUI.getPreferredSize(JComponent c, boolean checkConsistancy)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回首选大小以表示 <I>c</I> 中的树。如果 <I>checkConsistancy</I> 为 true，则首先传递 <b>checkConsistancy</b> 的消息。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicTreeUI.getMinimumSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此组件的最小大小。该大小将为最小首选大小或 0, 0。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicTreeUI.getMaximumSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此组件的最大大小，如果实例当前位于 JTree 中或 0, 0 处，则该大小将为首选大小。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.completeEditing()
<!-- END KEY -->
<!-- BEGIN DATA -->
传递消息以停止编辑会话。如果接收者为其提供外观的 UI 从 <code>getInvokesStopCellEditing</code> 返回 true，则在当前编辑器上调用 stopCellEditing。然后对 completeEditing 传递 false 或 true 消息，false 表示取消所有遗留的编辑。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.completeEditing(boolean messageStop, boolean messageCancel, boolean messageTree)
<!-- END KEY -->
<!-- BEGIN DATA -->
停止编辑会话。如果 messageStop 为 true，则对编辑器传递 stopEditing 的消息；如果 messageCancel 为 true，则对编辑器传递 cancelEditing 的消息。如果 messageTree 为 true，则对 treeModel 传递 valueForPathChanged 的消息。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.startEditing(TreePath path, MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果存在 cellEditor 并且 shouldSelectCell 返回 true，则启动节点的编辑操作。<p>
此方法假定路径有效且可见。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.checkForClickInExpandControl(TreePath path, int mouseX, int mouseY)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>mouseX</code> 和 <code>mouseY</code> 位于 <code>row</code> 的展开/折叠区域内，则此方法将切换行。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.isLocationInExpandControl(TreePath path, int mouseX, int mouseY)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>mouseX</code> 和 <code>mouseY</code> 落在用于展开/折叠节点的行的区域内，并且 <code>row</code> 的节点不表示叶节点，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.handleExpandControlClick(TreePath path, int mouseX, int mouseY)
<!-- END KEY -->
<!-- BEGIN DATA -->
当用户单击特定行时传递消息，此方法调用 toggleExpandState。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.toggleExpandState(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果路径不是展开的，则展开它；如果它是展开的，则折叠它。如果展开路径且 JTree 在展开的基础上滚动，则调用 ensureRowsAreVisible 以滚动尽可能多的可见子节点（试图滚动到路径的最后一个可见子代）。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.isToggleSelectionEvent(MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 true 表示节点上的鼠标事件应该仅切换鼠标下的行的选择。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.isMultiSelectEvent(MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 true 表示节点上的鼠标事件应该根据锚点作出选择。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.isToggleEvent(MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 true 指示应该基于事件切换鼠标下的行。此方法在 checkForClickInExpandControl 之后调用，暗指该位置不受展开（切换）的控制

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.selectPathForEvent(TreePath path, MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
传递消息以基于特定行上的 MouseEvent 更新选择。如果事件为切换选择事件，则或者选择行或者取消选择行。如果事件标识多选择事件，则根据定位点更新选择。否则，选择行；如果事件指定了切换事件，则展开/折叠行。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.isLeaf(int row)
<!-- END KEY -->
<!-- BEGIN DATA -->
@return 如果位于 <code>row</code> 的节点是叶节点，则返回 true。

<!-- END DATA -->
