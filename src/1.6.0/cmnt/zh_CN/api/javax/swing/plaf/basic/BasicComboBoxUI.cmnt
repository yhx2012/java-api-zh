<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicComboBoxUI extends javax.swing.plaf.ComboBoxUI
<!-- END KEY -->
<!-- BEGIN DATA -->
JComboBox 的基本 UI 实现。 
 <p>
组合框是一个组合组件，这意味着它是很多简单组件的聚合。此类创建和管理组合框上的侦听器和组合框模型。这些侦听器更新用户界面以响应组合框的属性和状态的更改。
 <p>
所有事件处理都是由利用 <code>createxxxListener()</code> 方法和内部类创建的侦听器类处理的。通过重写 <code>createxxxListener()</code> 方法，并提供自己的事件侦听器或为此类提供的事件侦听器创建子类，可以更改此类的行为。
 <p>
为了添加特殊动作，需要重写 <code>installKeyboardActions</code> 来添加响应 KeyStroke 绑定的动作。请参见 <a href="http://java.sun.com/products/jfc/tsc"><em>The Swing Connection</em></a> 中的文章 <a href="http://java.sun.com/products/jfc/tsc/special_report/kestrel/keybindings.html">Keyboard Bindings in Swing</a>。

@version 1.170 12/19/03
@author Arnaud Weber
@author Tom Santos
@author Mark Davidson

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicComboBoxUI.hasFocus
<!-- END KEY -->
<!-- BEGIN DATA -->
此受保护字段是特定于实现的。不要直接访问或重写。 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.event.KeyListener javax.swing.plaf.basic.BasicComboBoxUI.keyListener
<!-- END KEY -->
<!-- BEGIN DATA -->
此受保护字段是特定于实现的。不要直接访问或重写。可以改为重写侦听器构造方法。

@see #createKeyListener

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.event.FocusListener javax.swing.plaf.basic.BasicComboBoxUI.focusListener
<!-- END KEY -->
<!-- BEGIN DATA -->
此受保护字段是特定于实现的。不要直接访问或重写。可以改为重写侦听器构造方法。

@see #createFocusListener

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeListener javax.swing.plaf.basic.BasicComboBoxUI.propertyChangeListener
<!-- END KEY -->
<!-- BEGIN DATA -->
此受保护字段是特定于实现的。不要直接访问或重写。可以改为重写侦听器构造方法。

@see #createPropertyChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.event.ItemListener javax.swing.plaf.basic.BasicComboBoxUI.itemListener
<!-- END KEY -->
<!-- BEGIN DATA -->
此受保护字段是特定于实现的。不要直接访问或重写。可以改为重写侦听器构造方法。

@see #createItemListener

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.ListDataListener javax.swing.plaf.basic.BasicComboBoxUI.listDataListener
<!-- END KEY -->
<!-- BEGIN DATA -->
此受保护字段是特定于实现的。不要直接访问或重写。可以改为重写侦听器构造方法。

@see #createListDataListener

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicComboBoxUI.installDefaults()
<!-- END KEY -->
<!-- BEGIN DATA -->
将默认颜色、默认字体、默认渲染器和默认编辑器安装到 JComboBox 中。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicComboBoxUI.installListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
为组合框及其模型创建并安装侦听器。安装 UI 时调用此方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicComboBoxUI.uninstallDefaults()
<!-- END KEY -->
<!-- BEGIN DATA -->
从 JComboBox 中卸载默认颜色、默认字体、默认渲染器和默认编辑器。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicComboBoxUI.uninstallListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
从组合框及其模型中移除已安装的侦听器。从此方法中移除的侦听器的数目和类型应该与在 <code>installListeners</code> 中添加的相同。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.plaf.basic.ComboPopup javax.swing.plaf.basic.BasicComboBoxUI.createPopup()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建组合框的弹出部分。

@return <code>ComboPopup</code> 的实例
@see ComboPopup

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.event.KeyListener javax.swing.plaf.basic.BasicComboBoxUI.createKeyListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建将添加到组合框的 <code>KeyListener</code>。如果此方法返回 null，则不会将其添加到组合框。
 
@return <code>KeyListener</code> 的实例或 null

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.event.FocusListener javax.swing.plaf.basic.BasicComboBoxUI.createFocusListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建将添加到组合框的 <code>FocusListener</code>。如果此方法返回 null，则不会将其添加到组合框。

@return <code>FocusListener</code> 的实例或 null

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.ListDataListener javax.swing.plaf.basic.BasicComboBoxUI.createListDataListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建将添加到 <code>ComboBoxModel</code> 的列表数据侦听器。如果此方法返回 null，则不会将其添加到组合框模型。

@return <code>ListDataListener</code> 的实例或 null

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.event.ItemListener javax.swing.plaf.basic.BasicComboBoxUI.createItemListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建将添加到组合框的 <code>ItemListener</code>。如果此方法返回 null，则不会将其添加到组合框。
 <p>
子类可以重写此方法以返回其 ItemEvent 处理程序的实例。

@return <code>ItemListener</code> 的实例或 null

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeListener javax.swing.plaf.basic.BasicComboBoxUI.createPropertyChangeListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建将添加到组合框的 <code>PropertyChangeListener</code>。如果此方法返回 null，则不会将其添加到组合框。
 
@return <code>PropertyChangeListener</code> 的实例或 null

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.LayoutManager javax.swing.plaf.basic.BasicComboBoxUI.createLayoutManager()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建用于管理构成组合框的组件的布局管理器。
 
@return 布局管理器的实例

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.ListCellRenderer javax.swing.plaf.basic.BasicComboBoxUI.createRenderer()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建将在不可编辑的组合框中使用的默认渲染器。仅当没有利用 <code>setRenderer</code> 显式设置渲染器时才使用默认渲染器。
 
@return 用于组合框的 <code>ListCellRender</code>
@see javax.swing.JComboBox#setRenderer

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.ComboBoxEditor javax.swing.plaf.basic.BasicComboBoxUI.createEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建将在可编辑的组合框中使用的默认编辑器。仅当没有利用 <code>setEditor</code> 显式设置编辑器时才使用默认编辑器。

@return 用于组合框的 <code>ComboBoxEditor</code>
@see javax.swing.JComboBox#setEditor

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicComboBoxUI.installComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并初始化构成聚合组合框的组件。此方法作为 UI 安装进程的一部分调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicComboBoxUI.uninstallComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->
注销并卸载组成组合框的聚合组件。此方法作为 UI 卸载进程的一部分调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicComboBoxUI.addEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->
此公共方法是特定于实现的，应该为私有，不要调用或重写。要实现特定编辑器，请创建自定义 <code>ComboBoxEditor</code>

@see #createEditor
@see javax.swing.JComboBox#setEditor
@see javax.swing.ComboBoxEditor

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicComboBoxUI.removeEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->
此公共方法是特定于实现的，应该为私有，不要调用或重写。 

@see #addEditor

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicComboBoxUI.configureEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->
此受保护方法是特定于实现的，应该为私有，不要调用或重写。
 
@see #addEditor

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicComboBoxUI.unconfigureEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->
此受保护方法是特定于实现的，应该为私有。不要调用或重写。
 
@see #addEditor

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicComboBoxUI.configureArrowButton()
<!-- END KEY -->
<!-- BEGIN DATA -->
此公共方法是特定于实现的，应该为私有。不要调用或重写。

@see #createArrowButton

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicComboBoxUI.unconfigureArrowButton()
<!-- END KEY -->
<!-- BEGIN DATA -->
此公共方法是特定于实现的，应该为私有。不要调用或重写。

@see #createArrowButton

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JButton javax.swing.plaf.basic.BasicComboBoxUI.createArrowButton()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个按钮，将使用它来控制显示或隐藏组合框的弹出部分。

@return 表示弹出控件的按钮

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.basic.BasicComboBoxUI.isPopupVisible(JComboBox c)
<!-- END KEY -->
<!-- BEGIN DATA -->
告知弹出控件是否可见。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicComboBoxUI.setPopupVisible(JComboBox c, boolean v)
<!-- END KEY -->
<!-- BEGIN DATA -->
隐藏弹出部分。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.basic.BasicComboBoxUI.isFocusTraversable(JComboBox c)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定 JComboBox 是否是可焦点遍历的。如果 JComboBox 可编辑，则其返回 false；否则，返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicComboBoxUI.getMinimumSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->

最小大小为显示区域加上 insets 再加上按钮的大小。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicComboBoxUI.getBaseline(JComponent c, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回基线。

 @throws NullPointerException {@inheritDoc}
 @throws IllegalArgumentException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component.BaselineResizeBehavior javax.swing.plaf.basic.BasicComboBoxUI.getBaselineResizeBehavior(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回一个枚举，它指示该组件的基线如何随大小的改变而发生更改。 

 @throws NullPointerException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicComboBoxUI.isNavigationKey(int keyCode)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回提供的 keyCode 是否映射到用于导航的键中。它用于仅通过将非导航键传递到提前键入机制来优化键输入。如果子类更改导航键，则其应该重写此方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicComboBoxUI.selectNextPossibleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
选择列表中的下一项。如果当前所选项已经是最后一项，则其不更改选择。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicComboBoxUI.selectPreviousPossibleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
选择列表中的上一项。如果当前选择的项已经是第一项，则其不更改选择。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicComboBoxUI.toggleOpenClose()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果正在显示弹出部分，则隐藏它；如果它是隐藏的，则显示它。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.plaf.basic.BasicComboBoxUI.rectangleForCurrentValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回为绘制当前所选项而保留的区域。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Insets javax.swing.plaf.basic.BasicComboBoxUI.getInsets()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 JComboBox 的 insets。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicComboBoxUI.paintCurrentValue(Graphics g, Rectangle bounds, boolean hasFocus)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制当前所选项。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicComboBoxUI.paintCurrentValueBackground(Graphics g, Rectangle bounds, boolean hasFocus)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制当前所选项的背景。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Dimension javax.swing.plaf.basic.BasicComboBoxUI.getDefaultSize()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回使用当前渲染器和字体的组合框的空显示区域的默认大小。

@return 空显示区域的大小
@see #getDisplaySize

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Dimension javax.swing.plaf.basic.BasicComboBoxUI.getDisplaySize()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回显示区域的计算大小。显示区域是组合框的一部分，用于显示所选项。如果已经将显示区域设置为原型显示值，则此方法将使用原型显示值。 
 <p>
对于项数不多的组合框，建议使用原型显示值，使用原型显示值可以大大加速显示大小的计算。
 
@return 根据组合框项计算出的显示区域的大小
@see javax.swing.JComboBox#setPrototypeDisplayValue

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicComboBoxUI.installKeyboardActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
将键盘动作添加到 JComboBox。Enter 键和 Esc 键上的动作已提供。根据需要添加更多动作。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicComboBoxUI.uninstallKeyboardActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除焦点 InputMap 和 ActionMap。

<!-- END DATA -->
