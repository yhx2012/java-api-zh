<!-- BEGIN KEY -->
public class javax.swing.plaf.metal.MetalRootPaneUI extends javax.swing.plaf.basic.BasicRootPaneUI
<!-- END KEY -->
<!-- BEGIN DATA -->
提供 <code>RootPaneUI</code> 的 metal 外观实现。
 <p>
<code>MetalRootPaneUI</code> 提供对 <code>JRootPane</code> 的 <code>windowDecorationStyle</code> 属性的支持。<code>MetalRootPaneUI</code> 通过安装一个自定义 <code>LayoutManager</code>、一个呈现适当窗口小部件的私有 <code>Component</code> 和一个私有 <code>Border</code> 来做到这一点。不管 <code>windowDecorationStyle</code> 属性的值如何，总是要安装 <code>LayoutManager</code>，但 <code>Border</code> 和 <code>Component</code> 只在 <code>windowDecorationStyle</code> 不是 <code>JRootPane.NONE</code> 时才被安装/添加。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.20 04/27/04
@author Terry Kellerman
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ComponentUI javax.swing.plaf.metal.MetalRootPaneUI.createUI(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
为 <code>JRootPane</code> 创建一个 UI。

@param c 将为其创建 RootPaneUI 的 JRootPane
@return 所传入 JRootPane 的 RootPaneUI 实现

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.metal.MetalRootPaneUI.installUI(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
调用 <code>installUI</code> 的超实现来在传入的 <code>JRootPane</code> 上安装必要的状态，以呈现 <code>RootPaneUI</code> 的 metal 外观实现。如果 <code>JRootPane</code> 的 <code>windowDecorationStyle</code> 属性不是 <code>JRootPane.NONE</code>，则此方法将添加一个自定义 <code>Component</code> 来将窗口小部件呈现给 <code>JRootPane</code>，并在 <code>JRootPane</code> 上安装一个自定义 <code>Border</code> 和 <code>LayoutManager</code>。

@param c 在其上安装状态的 JRootPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.metal.MetalRootPaneUI.uninstallUI(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
调用超实现来卸载所有状态。此方法还将重置 <code>JRootPane</code> 的 <code>LayoutManager</code>。如果已经将 <code>Component</code> 添加到 <code>JRootPane</code> 中来呈现窗口装饰风格，则此方法将移除它。类似地，此方法会将 <code>JRootPane</code> 的 Border 和 LayoutManager 恢复为调用 <code>installUI</code> 前的样子。

@param c 从其中卸载状态的 JRootPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.metal.MetalRootPaneUI.propertyChange(PropertyChangeEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
属性更改时调用。<code>MetalRootPaneUI</code> 主要用于源自 <code>JRootPane</code>（已安装它来标识属性 <code>windowDecorationStyle</code>）的事件。如果 <code>windowDecorationStyle</code> 已经更改为不是 <code>JRootPane.NONE</code> 的某个值，则此方法会向 <code>JRootPane</code> 添加一个 <code>Component</code> 来呈现窗口装饰，并在 <code>JRootPane</code> 上安装一个 <code>Border</code>。另一方面，如果 <code>windowDecorationStyle</code> 已更改为 <code>JRootPane.NONE</code>，则此方法将移除已添加到 <code>JRootPane</code> 中的 <code>Component</code>，并将 Border 重置回调用 <code>installUI</code> 以前的样子。

@param e 描述事件源和已更改的属性的 PropertyChangeEvent 对象。

<!-- END DATA -->
