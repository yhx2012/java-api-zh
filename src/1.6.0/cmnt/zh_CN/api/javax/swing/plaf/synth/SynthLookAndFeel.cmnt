<!-- BEGIN KEY -->
public class javax.swing.plaf.synth.SynthLookAndFeel extends javax.swing.plaf.basic.BasicLookAndFeel
<!-- END KEY -->
<!-- BEGIN DATA -->
SynthLookAndFeel 提供创建定制外观的基础。SynthLookAndFeel 不直接提供一个外观，所有绘制都被委托。您需要通过 {@link #load} 方法提供一个配置文件，或者给 {@link #setStyleFactory} 提供自己的 {@link SynthStyleFactory}。有关加载文件的示例，请参阅<a href="package-summary.html">包摘要</a>，有关为 <code>setStyleFactory</code> 提供自己的 <code>SynthStyleFactory</code> 的示例，请参阅 {@link javax.swing.plaf.synth.SynthStyleFactory}。
 <p>
<strong>警告：</strong>此类实现 {@link Serializable}，这是扩展 {@link BasicLookAndFeel} 的副作用。此类并不打算被序列化。试图对该类进行序列化将导致 {@link NotSerializableException}。
 
@serial exclude
@version 1.45, 05/07/04
@since 1.5
@author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.plaf.synth.SynthStyleFactory javax.swing.plaf.synth.SynthLookAndFeel.factory
<!-- END KEY -->
<!-- BEGIN DATA -->
此 SynthLookAndFeel 的 SynthStyleFactory。

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.util.Map javax.swing.plaf.synth.SynthLookAndFeel.defaultsMap
<!-- END KEY -->
<!-- BEGIN DATA -->
默认表条目的映射。此表是通过 load 方法填充的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.synth.SynthLookAndFeel()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 SynthLookAndFeel。
 <p>
为使返回的 <code>SynthLookAndFeel</code> 变得有用，需要调用 <code>load</code> 来指定 <code>SynthStyle</code> 的集合，或调用 <code>setStyleFactory</code>。

@see #load
@see #setStyleFactory

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.plaf.synth.SynthLookAndFeel.setStyleFactory(SynthStyleFactory cache)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 SynthStyleFactory，由 synth 提供的 UI 类将使用它来获取 SynthStyle。

@param cache UI 应该使用的 SynthStyleFactory。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.synth.SynthStyleFactory javax.swing.plaf.synth.SynthLookAndFeel.getStyleFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前 SynthStyleFactory。

@return SynthStyleFactory

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.synth.SynthStyle javax.swing.plaf.synth.SynthLookAndFeel.getStyle(JComponent c, Region region)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定组件的指定 region 的 SynthStyle。这并非用于一般的使用情况，只有自定义 UI 才应该使用此方法。

@param c 要获取 SynthStyle 的 JComponent
@param region 标识指定组件的 region
@return 要使用的 SynthStyle。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.plaf.synth.SynthLookAndFeel.updateStyles(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
更新与 <code>c</code> 关联的样式以及其所有子样式。这是一个颜色更浅的 <code>SwingUtilities.updateComponentTreeUI</code>。

@param c 要更新样式的 Component。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.synth.Region javax.swing.plaf.synth.SynthLookAndFeel.getRegion(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 JComponent <code>c</code> 的 Region。

@param c 要获取 Region 的 JComponent
@return 对应于 <code>c</code> 的 Region

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ComponentUI javax.swing.plaf.synth.SynthLookAndFeel.createUI(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
为传入的 <code>JComponent</code> 创建 Synth 外观 <code>ComponentUI</code>。

@param c 要创建 <code>ComponentUI</code> 的 JComponent
@return 用于 <code>c</code> 的 ComponentUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthLookAndFeel.load(InputStream input, java.lang.Class<?> resourceBase) throws java.text.ParseException
<!-- END KEY -->
<!-- BEGIN DATA -->
加载此 <code>SynthLookAndFeel</code> 将使用的 <code>SynthStyle</code> 集合。<code>resourceBase</code> 用于解析所有基于路径的资源，例如，<code>Image</code> 将由 <code>resourceBase.getResource(path)</code> 解析。有关更多信息，请参阅 <a href="doc-files/synthFileFormat.html">Synth File Format</a>。

@param input 从中加载数据的 InputStream
@param resourceBase 用于解析所有图像或其他资源
@throws ParseException 如果解析过程中发生错误
@throws IllegalArgumentException 如果 input 或 resourceBase 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthLookAndFeel.load(URL url) throws java.text.ParseException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
加载此 <code>SynthLookAndFeel</code> 将使用的 <code>SynthStyle</code> 集合。基于路径的资源相对于指定的风格 <code>URL</code> 进行解析。例如，<code>Image</code> 将通过 <code>new URL(synthFile, path)</code> 进行解析。有关更多信息，请参阅 <a href="doc-files/synthFileFormat.html">Synth File Format</a>。

 @param url 从中加载 <code>SynthStyle</code> 集合的 <code>URL</code>。
 @throws ParseException 如果解析过程中发生错误
 @throws IllegalArgumentException 如果 synthSet 为 <code>null</code>
 @throws IOException 如果 synthSet 不能作为 <code>InputStream</code> 打开
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthLookAndFeel.initialize()
<!-- END KEY -->
<!-- BEGIN DATA -->
在安装此外观时由 UIManager 调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthLookAndFeel.uninitialize()
<!-- END KEY -->
<!-- BEGIN DATA -->
在卸载此外观时由 UIManager 调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.UIDefaults javax.swing.plaf.synth.SynthLookAndFeel.getDefaults()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 SynthLookAndFeel 的默认值。

@return 默认表。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.synth.SynthLookAndFeel.isSupportedLookAndFeel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 true，SynthLookAndFeel 总是受支持。

@return true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.synth.SynthLookAndFeel.isNativeLookAndFeel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 false，SynthLookAndFeel 不是一个本机外观。

@return false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.synth.SynthLookAndFeel.getDescription()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 SynthLookAndFeel 的文本描述。

@return synth 的文本描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.synth.SynthLookAndFeel.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个标识此外观的短字符串。

@return 标识此外观的短字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.synth.SynthLookAndFeel.getID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个标识此外观的短字符串。

@return 标识此外观的短字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.synth.SynthLookAndFeel.shouldUpdateStyleOnAncestorChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在 <code>JComponent</code> 的祖先发生更改时，UI 是否应该更新 <code>SynthStyleFactory</code> 中的 <code>SynthStyles</code>。提供了 <code>SynthStyleFactory</code>（基于容器层次结构的 <code>getStyle</code> 中返回的值）的子类将重写此方法以返回 true。

@return 在祖先发生更改时，UI 是否应该更新 <code>SynthStyleFactory</code> 中的 <code>SynthStyles</code>。

<!-- END DATA -->
