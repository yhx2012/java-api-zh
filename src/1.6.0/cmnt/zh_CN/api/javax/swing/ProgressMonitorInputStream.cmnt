<!-- BEGIN KEY -->
public class javax.swing.ProgressMonitorInputStream extends java.io.FilterInputStream
<!-- END KEY -->
<!-- BEGIN DATA -->

监视读取某些 InputStream 的进度。大致用以下形式调用此 ProgressMonitor：
 <pre>
 InputStream in = new BufferedInputStream(
                          new ProgressMonitorInputStream(
                                  parentComponent,
                                  &quot;Reading &quot; + fileName,
                                  new FileInputStream(fileName)));
 </pre><p>
这可以创建一个进度监视器，以监视读取输入流的进度。如果需要一段时间，将会弹出 ProgressDialog，以通知用户。如果用户单击 Cancel 按钮，则在进行下一次读取操作时会抛出 InterruptedIOException。当关闭流时，会执行所有的正确清除。

 <p>

有关此内容的更多文档和示例，请参阅 <em>The Java Tutorial</em> 中的 <a href="http://java.sun.com/docs/books/tutorial/uiswing/components/progress.html">How to Monitor Progress</a> 一节。

@see ProgressMonitor
@see JOptionPane
@author James Gosling
@version 1.19 12/19/03

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ProgressMonitorInputStream(Component parentComponent, Object message, InputStream in)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个对象，以监视输入流的进度。

@param message  要在对话框（如果弹出）中放置的描述性文本。
@param parentComponent 触发被监视操作的组件。
@param in 要监视的输入流。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ProgressMonitor javax.swing.ProgressMonitorInputStream.getProgressMonitor()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此流使用的 ProgressMonitor 对象。通常不需要上述操作，除非您要通过读取文件执行一些中途更改描述性文本的操作。
@return 此对象使用的 ProgressMonitor 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ProgressMonitorInputStream.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>FilterInputStream.read</code>，以便在读取之后更新进度监视器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ProgressMonitorInputStream.read(byte[] b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>FilterInputStream.read</code>，以读取之后更新进度监视器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ProgressMonitorInputStream.read(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>FilterInputStream.read</code>，以便在读取之后更新进度监视器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.swing.ProgressMonitorInputStream.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>FilterInputStream.skip</code>，以便在跳过之后更新进度监视器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ProgressMonitorInputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>FilterInputStream.close</code>，以便关闭进度监视器以及流。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.ProgressMonitorInputStream.reset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>FilterInputStream.reset</code>，以重置进度监视器以及流。

<!-- END DATA -->
