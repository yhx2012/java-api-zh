<!-- BEGIN KEY -->
protected class javax.swing.JTable.AccessibleJTable extends javax.swing.JComponent.AccessibleJComponent implements javax.accessibility.AccessibleSelection, javax.swing.event.ListSelectionListener, javax.swing.event.TableModelListener, javax.swing.event.TableColumnModelListener, javax.swing.event.CellEditorListener, java.beans.PropertyChangeListener, javax.accessibility.AccessibleExtendedTable
<!-- END KEY -->
<!-- BEGIN DATA -->
此类实现对 <code>JTable</code> 类的可访问性支持。它提供适合于表用户界面元素的 Java Accessibility API 的实现。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JTable.AccessibleJTable()
<!-- END KEY -->
<!-- BEGIN DATA -->
AccessibleJTable 构造方法

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.propertyChange(PropertyChangeEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
跟踪选择模型、列模型等的变更，从而能够重新将侦听器放置这些模型上，以便把信息传递给 Accessibility PropertyChange 机制

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.tableChanged(TableModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
跟踪表内容的变更

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.tableRowsInserted(TableModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
跟踪表内容的变更（行插入）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.tableRowsDeleted(TableModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
跟踪表内容的变更（行删除）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.columnAdded(TableColumnModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
跟踪表内容的变更（列插入）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.columnRemoved(TableColumnModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
跟踪表内容的变更（列删除）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.columnMoved(TableColumnModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
跟踪列重新定位的变更。

@see TableColumnModelListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.columnMarginChanged(ChangeEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
跟踪由于空白变更而引起的列移动的变更。

@see TableColumnModelListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.columnSelectionChanged(ListSelectionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
对变更的 TableColumnModel 的选择模型进行跟踪。

@see TableColumnModelListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.editingStopped(ChangeEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
跟踪单元格内容的变更。

当编辑结束时调用。保存变更，丢弃编辑器对象，并再次呈现单元格。

@see CellEditorListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.editingCanceled(ChangeEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
编辑取消时调用。丢弃编辑器对象，并再次呈现单元格。

@see CellEditorListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.valueChanged(ListSelectionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
跟踪表单元格选择的变更

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleSelection javax.swing.JTable.AccessibleJTable.getAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此对象关联的 AccessibleSelection。在此类的 Java Accessibility API 的实现中，返回的是此对象，它负责代表它自己实现 AccessibleSelection 接口。

@return 此对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleRole javax.swing.JTable.AccessibleJTable.getAccessibleRole()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的功能。

@return 描述该对象功能的 AccessibleRole 实例
@see AccessibleRole

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTable.AccessibleJTable.getAccessibleAt(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果存在 <code>Accessible</code> 子级，并且包含在本地坐标 <code>Point</code> 位置，则返回 <code>Accessible</code> 子级。

@param p 该点定义该对象的父对象的坐标空间中给出的 <code>Accessible</code> 的左上角
@return 如果在指定的位置存在 <code>Accessible</code>，则返回它；否则，返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.getAccessibleChildrenCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该对象中可访问的子对象数。如果此对象的所有子对象都实现 <code>Accessible</code>，那么此方法应返回此对象的子对象数。

@return 该对象中可访问的子对象数

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTable.AccessibleJTable.getAccessibleChild(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该对象的第 n 个 <code>Accessible</code> 子对象。

@param i 基于零的子对象索引
@return 该对象的第 n 个可访问子对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.getAccessibleSelectionCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前选择的 <code>Accessible</code> 子对象数。如果没有选择子对象，那么返回的值将为 0。

@return 当前选择的项数

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTable.AccessibleJTable.getAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>Accessible</code>，它表示该对象中指定的已选择的子对象。如果没有选择，或选择的子对象数小于传入的整数，那么返回的值将为 <code>null</code>。
<p>注意，该索引表示第 i 个已选择的子对象，它不同于第 i 个子对象。

@param i 所选子对象的基于零的索引
@return 第 i 个已选择的子对象
@see #getAccessibleSelectionCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JTable.AccessibleJTable.isAccessibleChildSelected(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定是否选择此对象的当前子对象。

@param i 此 <code>Accessible</code> 对象的子对象基于 0 的索引
@return true 如果选择此对象的当前子对象
@see AccessibleContext#getAccessibleChild

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.addAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
将该对象的指定 <code>Accessible</code> 子对象添加到该对象的选择中。如果该对象支持多个选择，则将指定的子对象添加到任何现有选择中，否则，它会替换该对象中的任何现有选择。如果指定的子对象已被选择，则此方法无效。
 <p>
此方法只对 <code>JTable</code> 有效，它的单个单元格选择是启用的。

@param i 子对象的基于零的索引
@see AccessibleContext#getAccessibleChild

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.removeAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
从对象的选择中移除该对象的指定子对象。如果当前没有选择指定的项，则此方法无效。
 <p>
此方法只对 <code>JTables</code> 有效，它的单个单元格选择是启用的。

@param i 子对象的基于零的索引
@see AccessibleContext#getAccessibleChild

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.clearAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
清除该对象中的选择，使该对象中不存在选择的子对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.selectAllAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
只有 <code>JTable</code> 支持多个选择，并且单个单元格选择为启用状态时，才会导致该对象的每个子对象都被选择。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.getAccessibleRow(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表中一个索引的行数。

@param index 此表中基于 0 的索引
@return 表中基于 0 的行（如果存在）；否则返回 -1
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.getAccessibleColumn(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表中一个索引的列数。

@param index 此表中基于 0 的索引
@return 表中基于 0 的列（如果存在）；否则返回 -1
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.getAccessibleIndex(int r, int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表中在某一行和某一列的索引。

@param r 表中基于 0 的行
@param c 表中基于 0 的列
@return 表中基于 0 的索引（如果存在）；否则返回 -1。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleTable javax.swing.JTable.AccessibleJTable.getAccessibleTable()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此对象关联的 <code>AccessibleTable</code>。在实现此类的 Java Accessibility API 时，返回此对象，它负责代表它自己实现 <code>AccessibleTables</code> 接口。

@return 此对象
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTable.AccessibleJTable.getAccessibleCaption()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此表的标题。

@return 表的标题
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.setAccessibleCaption(Accessible a)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置表的标题。

@param a 表的标题
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTable.AccessibleJTable.getAccessibleSummary()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表的摘要描述。

@return  表的摘要描述
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.setAccessibleSummary(Accessible a)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置表的摘要描述。

@param a 表的摘要描述
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.getAccessibleRowExtentAt(int r, int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>Accessible</code> 在表中指定行和列占用的行数。

@return <code>Accessible</code> 在表中指定行和列占用的行数
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.getAccessibleColumnExtentAt(int r, int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>Accessible</code> 在给定的 (row, column) 占用的列数。

@return <code>Accessible</code> 在表中指定行和列占用的列数
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleTable javax.swing.JTable.AccessibleJTable.getAccessibleRowHeader()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回以 <code>AccessibleTable</code> 表示的行标题。

@return 表示行标题的 <code>AccessibleTable</code>
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.setAccessibleRowHeader(AccessibleTable a)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置以 <code>AccessibleTable</code> 表示的列标题。

@param a 表示行标题的 <code>AccessibleTable</code>
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleTable javax.swing.JTable.AccessibleJTable.getAccessibleColumnHeader()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回以 <code>AccessibleTable</code> 表示的列标题。

@return 表示列标题的 <code>AccessibleTable</code>，如果表头为 <code>null</code>，则返回 <code>null</code>
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.setAccessibleColumnHeader(AccessibleTable a)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置以 <code>AccessibleTable</code> 表示的列标题。

 @param a 表示列标题的 <code>AccessibleTable</code>
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTable.AccessibleJTable.getAccessibleRowDescription(int r)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对表中指定行的描述。

@param r 表的基于 0 的索引
@return 行的描述
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.setAccessibleRowDescription(int r, Accessible a)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置表中指定行的描述文本。

@param r 表中基于 0 的索引
@param a 行的描述
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTable.AccessibleJTable.getAccessibleColumnDescription(int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对表中指定列的描述。

@param r 表的基于 0 的列
@return 列的描述
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.setAccessibleColumnDescription(int c, Accessible a)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置表中指定列的描述文本。

@param c 表中基于 0 的列
@param a 列的描述
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JTable.AccessibleJTable.isAccessibleSelected(int r, int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个布尔值，它表明在给定的 (row, column) 是否选择为可访问的。

@param r 表的基于 0 的行
@param c 表的基于 0 的列
@return 如果在 (row, column) 选择了可访问性，则返回布尔值 true；否则返回布尔值 false
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JTable.AccessibleJTable.isAccessibleRowSelected(int r)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个布尔值，它表示是否选择了指定的行。

@param r 表的基于 0 的行
@return 如果选择了指定的行，则返回布尔值 true；否则返回 false
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JTable.AccessibleJTable.isAccessibleColumnSelected(int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个布尔值，它指示是否选择了指定的列。

@param c 表的基于 0 的列
@return 如果选择了指定的列，则返回布尔值 true；否则返回 false
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] javax.swing.JTable.AccessibleJTable.getSelectedAccessibleRows()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表中选择的行。

@return 选择的行的数组，其中每个元素都是表中一个基于 0 的行
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] javax.swing.JTable.AccessibleJTable.getSelectedAccessibleColumns()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表中选择的列。

@return 选择的列的数组，其中每个元素都是表中一个基于 0 的列
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.getAccessibleRowAtIndex(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表中在一个给定的索引位置的行。

@param i 表的基于 0 的索引
@return 在给定的索引位置的行
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.getAccessibleColumnAtIndex(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在表中给定的索引位置的列。

@param i 表的基于 0 的索引
@return 在给定的索引位置的列
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.getAccessibleIndexAt(int r, int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表中在给定的 (row, column) 位置的索引。

@param r 表中基于 0 的行
@param c 表中基于 0 的列
@return 表的索引
@since 1.3

<!-- END DATA -->
