<!-- BEGIN KEY -->
protected class javax.swing.JTree.AccessibleJTree extends javax.swing.JComponent.AccessibleJComponent implements javax.accessibility.AccessibleSelection, javax.swing.event.TreeSelectionListener, javax.swing.event.TreeModelListener, javax.swing.event.TreeExpansionListener
<!-- END KEY -->
<!-- BEGIN DATA -->
此类实现 <code>JTree</code> 类的可访问性支持。它提供适合树用户界面元素的 Java Accessibility API 的实现。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.valueChanged(TreeSelectionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
树选择侦听器值更改方法。用于激发属性更改

@param e ListSelectionEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.fireVisibleDataPropertyChange()
<!-- END KEY -->
<!-- BEGIN DATA -->
激发可见数据属性更改通知。&ldquo;可见&rdquo;数据属性表示组件在显示器上的显示方式，其外观不受限于任何其他属性。它通知屏幕 reader 组件的可见外观已发生更改，因此它们可以通知用户。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.treeNodesChanged(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
树模型节点更改通知。

@param e  树模型事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.treeNodesInserted(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
树模型节点更改通知。

@param e  树节点插入事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.treeNodesRemoved(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
树模型节点更改通知。

@param e  树节点移除事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.treeStructureChanged(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
树模型结构更改通知。

@param e  树模型事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.treeCollapsed(TreeExpansionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
树折叠通知。

@param e  一个 TreeExpansionEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.treeExpanded(TreeExpansionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
树模型展开通知。

@param e  树节点插入事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleRole javax.swing.JTree.AccessibleJTree.getAccessibleRole()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的职责。

@return 描述对象职责的 AccessibleRole 实例
@see AccessibleRole

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTree.AccessibleJTree.getAccessibleAt(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>Accessible</code> 子对象（如果存在），它包含在本地坐标 <code>Point</code> 中。否则返回 <code>null</code>。

@param p 此 <code>Accessible</code> 的本地坐标中的点
@return 在指定位置的 <code>Accessible</code>（如果存在）；否则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTree.AccessibleJTree.getAccessibleChildrenCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 JTree 的顶层子节点数。每个这样的节点都可以依次拥有子节点。

@return  树中的可访问子节点数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTree.AccessibleJTree.getAccessibleChild(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对象的第 n 个可访问子对象。

@param i 从零开始的子对象索引
@return 对象的第 n 个可访问子对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTree.AccessibleJTree.getAccessibleIndexInParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象在其可访问父对象中的索引。

@return 此对象在其父对象中的索引。因为 JTree 顶层对象没有可访问父对象。
@see #getAccessibleParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleSelection javax.swing.JTree.AccessibleJTree.getAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此对象相关联的 AccessibleSelection。在此类的 Java Accessibility API 的实现中，返回的是此对象，它负责为其本身实现 AccessibleSelection 接口。
 
@return 此对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTree.AccessibleJTree.getAccessibleSelectionCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前选中的项数。如果未选择项，则返回值 0。

@return 当前选择的项数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTree.AccessibleJTree.getAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示对象中指定选择项的 Accessible。如果没有作出选择，或者所选项数少于传入的整数，则返回值为 null。

@param i 所选项的从零开始的索引
@return 包含所选项的 Accessible

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JTree.AccessibleJTree.isAccessibleChildSelected(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果选择了此对象的当前子对象，则返回 true。

@param i 此 Accessible 对象的子级的从零开始的索引。
@see AccessibleContext#getAccessibleChild

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.addAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
将对象中指定选择的项添加到对象的选择中。如果对象支持多种选择，则将指定项添加到所有现有选择中，否则它将替换对象中的所有现有选择。如果已经选择了指定的项，则此方法无效。

@param i 可选择项的从零开始的索引

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.removeAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
将对象中指定选择项从对象的选择中移除。如果当前没有选择指定的项，则此方法无效。

@param i 可选择项的从零开始的索引

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.clearAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
清除对象中的选择，这样此对象中什么也没有选择。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.selectAllAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
导致对象中的所有选择项都被选中，前提是对象支持多个选择。

<!-- END DATA -->
