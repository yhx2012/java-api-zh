<!-- BEGIN KEY -->
public class javax.swing.DefaultListModel extends javax.swing.AbstractListModel
<!-- END KEY -->
<!-- BEGIN DATA -->
此类以松散方式实现 <code>java.util.Vector</code> API，它实现 1.1.x 版本的 <code>java.util.Vector</code>，没有 collection 类支持，并且在发生更改时通知 <code>ListDataListener</code>。目前，它委托给一个 <code>Vector</code>，在将来的版本中，它将是一个真正的 Collection 实现。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.35 05/05/04
@author Hans Muller

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultListModel.getSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此列表中的组件数。
 <p>
此方法等同于 <code>size</code>，后者实现 1.2 Collections 框架中定义的 <code>List</code> 接口。此方法连同 <code>setSize</code> 一起存在，因此可以将 <code>size</code> 看作为一个 JavaBean 属性。

@return 此列表中的组件数
@see #size()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.DefaultListModel.getElementAt(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定索引处的组件。
 <blockquote>
<b>注：</b>尽管此方法未过时，但首选使用方法是 <code>get(int)</code>，该方法实现 1.2 Collections 框架中定义的 <code>List</code> 接口。
 </blockquote>
@param      index   此列表中的索引
@return     指定索引处的组件
@exception  ArrayIndexOutOfBoundsException  如果 <code>index</code> 为负或大于此列表的当前大小
@see #get(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListModel.copyInto(java.lang.Object[] anArray)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此列表的组件复制到指定数组中。数组必须足够大，能够保存此列表中的所有对象，否则抛出 <code>IndexOutOfBoundsException</code>。

@param   anArray   要将组件复制到其中的数组
@see Vector#copyInto(Object[])

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListModel.trimToSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
对此列表的容量进行裁剪，使其等于此列表的当前大小。
 
@see Vector#trimToSize()

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListModel.ensureCapacity(int minCapacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
增加此列表的容量（如有必要），以确保其至少能够保存最小容量参数指定的组件数。 

@param   minCapacity   所需的最小容量
@see Vector#ensureCapacity(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListModel.setSize(int newSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此列表的大小。

@param   newSize   此列表的新大小
@see Vector#setSize(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultListModel.capacity()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此列表的当前容量。

@return  当前容量
@see Vector#capacity()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultListModel.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此列表中的组件数。

@return 此列表中的组件数
@see Vector#size()

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultListModel.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试此列表中是否有组件。

@return  当且仅当此列表中没有组件（也就是说其大小为零）时返回 <code>true</code>；否则返回 <code>false</code>
@see Vector#isEmpty()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<?> javax.swing.DefaultListModel.elements()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此列表的组件枚举。

@return  此列表的组件枚举
@see Vector#elements()

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultListModel.contains(Object elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试指定对象是否为此类表中的组件。

@param   elem   对象
@return  如果指定对象是此列表中的组件，则返回 <code>true</code>
@see Vector#contains(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultListModel.indexOf(Object elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
搜索 <code>elem</code> 的第一次出现。

@param   elem  一个对象
@return 此列表中该参数第一次出现时所在位置上的索引；如果没有找到该对象，则返回 <code>-1</code>
@see Vector#indexOf(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultListModel.indexOf(Object elem, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
从 <code>index</code> 开始搜索 <code>elem</code> 的第一次出现。 

@param   elem    所需的组件
@param   index   从其所在的位置开始进行搜索的索引
@return  <code>index</code> 之后第一次出现 <code>elem</code> 处的索引；如果在列表中没有找到 <code>elem</code>，则返回 <code>-1</code>
@see Vector#indexOf(Object,int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultListModel.lastIndexOf(Object elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>elem</code> 最后一次出现处的索引。

@param   elem   所需的组件
@return  列表中 <code>elem</code> 最后一次出现处的索引；如果没有找到该对象，则返回 <code>-1</code>
@see Vector#lastIndexOf(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultListModel.lastIndexOf(Object elem, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
从指定的索引处开始反向搜索 <code>elem</code>，并返回该对象的索引。 

@param  elem    所需的组件
@param  index   从其所在的位置开始进行搜索的索引
@return 列表中 <code>index</code> 之前最后一次出现 <code>elem</code> 处的索引；如果在列表中没有找到该对象，则返回 <code>-1</code>
@see Vector#lastIndexOf(Object,int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.DefaultListModel.elementAt(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定索引处的组件。如果索引为负或不小于列表的大小，则抛出 <code>ArrayIndexOutOfBoundsException</code>。
 <blockquote>
<b>注：</b>尽管此方法未过时，但首选使用方法是 <code>get(int)</code>，该方法实现 1.2 Collections 框架中定义的 <code>List</code> 接口。
 </blockquote>

@param      index   此列表中的一个索引
@return     指定索引处的组件
@see #get(int)
@see Vector#elementAt(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.DefaultListModel.firstElement()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此列表中的第一个组件。如果此向量没有组件，则抛出 <code>NoSuchElementException</code>。
@return 此列表的第一个组件
@see Vector#firstElement()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.DefaultListModel.lastElement()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回列表的最后一个组件。如果此向量没有组件，则抛出 <code>NoSuchElementException</code>。

@return 列表的最后一个组件
@see Vector#lastElement()

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListModel.setElementAt(Object obj, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此列表指定 <code>index</code> 处的组件设置为指定的对象。丢弃该位置以前的组件。
 <p>
如果索引无效，则抛出 <code>ArrayIndexOutOfBoundsException</code>。
 <blockquote>
<b>注：</b>尽管此方法未过时，但首选使用方法是 <code>set(int,Object)</code>，该方法实现 1.2 Collections 框架中定义的 <code>List</code> 接口。
 </blockquote>

@param      obj     组件的设置目标
@param      index   指定的索引
@see #set(int,Object)
@see Vector#setElementAt(Object,int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListModel.removeElementAt(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
删除指定索引处的组件。
 <p>
如果索引无效，则抛出 <code>ArrayIndexOutOfBoundsException</code>。
 <blockquote>
<b>注：</b>尽管此方法未过时，但首选使用方法是 <code>remove(int)</code>，该方法实现 1.2 Collections 框架中定义的 <code>List</code> 接口。
 </blockquote>

@param      index   要移除对象的索引
@see #remove(int)
@see Vector#removeElementAt(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListModel.insertElementAt(Object obj, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定对象作为此列表中的组件插入到指定的 <code>index</code> 处。
 <p>
如果索引无效，则抛出 <code>ArrayIndexOutOfBoundsException</code>。
 <blockquote>
<b>注：</b>尽管此方法未过时，但首选使用方法是 <code>add(int,Object)</code>，该方法实现 1.2 Collections 框架中定义的 <code>List</code> 接口。
 </blockquote>

@param      obj     要插入的组件
@param      index   插入新组件的位置
@exception  ArrayIndexOutOfBoundsException  如果索引无效
@see #add(int,Object)
@see Vector#insertElementAt(Object,int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListModel.addElement(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定组件添加到此类表的末尾。

@param   obj   要添加的组件
@see Vector#addElement(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultListModel.removeElement(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此列表中移除参数的第一个（索引最小的）匹配项。

@param obj 要移除的组件
@return 如果该参数是此列表的一个组件，则返回 <code>true</code>；否则返回 <code>false</code>
@see Vector#removeElement(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListModel.removeAllElements()
<!-- END KEY -->
<!-- BEGIN DATA -->
从此列表中移除所有组件，并将它们的大小设置为零。
 <blockquote>
<b>注：</b>尽管此方法未过时，但首选使用方法是 <code>clear</code>，该方法实现 1.2 Collections 框架中定义的 <code>List</code> 接口。
 </blockquote>

@see #clear()
@see Vector#removeAllElements()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.DefaultListModel.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回显示并标识此对象的属性的字符串。

@return  此对象的 String 表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] javax.swing.DefaultListModel.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
以正确顺序返回包含此列表中所有元素的数组。

@return 包含列表元素的数组
@see Vector#toArray()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.DefaultListModel.get(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回列表中指定位置处的元素。
 <p>
如果索引超出范围（<code>index &lt; 0 || index &gt;= size()</code>），则抛出 <code>ArrayIndexOutOfBoundsException</code>。

@param index 要返回的元素的索引

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.DefaultListModel.set(int index, Object element)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定元素替换此列表中指定位置上的元素。
 <p>
如果索引超出范围（<code>index &lt; 0 || index &gt;= size()</code>），则抛出 <code>ArrayIndexOutOfBoundsException</code>。

@param index 要替换的元素的索引
@param element 要存储在指定位置上的元素
@return 以前在指定位置上的元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListModel.add(int index, Object element)
<!-- END KEY -->
<!-- BEGIN DATA -->
在此列表的指定位置处插入指定元素。
 <p>
如果索引超出范围（<code>index &lt; 0 || index &gt; size()</code>），则抛出 <code>ArrayIndexOutOfBoundsException</code>。

@param index 指定元素的插入位置的索引
@param element 要插入的元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.DefaultListModel.remove(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除此列表中指定位置处的元素。返回从列表中移除的元素。
 <p>
如果索引超出范围（<code>index &lt; 0 || index &gt;= size()</code>），则抛出 <code>ArrayIndexOutOfBoundsException</code>。

@param index 要移除的元素的索引

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListModel.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
从此列表中移除所有元素。此调用返回后，列表将是空的（除非该调用抛出异常）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListModel.removeRange(int fromIndex, int toIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
删除指定索引范围中的组件。移除组件包括指定范围两个端点处的组件，因此，如果指定范围 (1,5)，则移除索引 1 处的组件和索引 5 处的组件，以及它们之间的所有组件。
 <p>
如果索引无效，则抛出 <code>ArrayIndexOutOfBoundsException</code>。如果 <code>fromIndex &gt; toIndex</code>，则抛出 <code>IllegalArgumentException</code>。

@param      fromIndex 范围低端点的索引
@param      toIndex   范围高端点的索引
@see	   #remove(int)

<!-- END DATA -->
