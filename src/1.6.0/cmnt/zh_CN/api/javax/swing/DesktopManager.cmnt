<!-- BEGIN KEY -->
public interface javax.swing.DesktopManager
<!-- END KEY -->
<!-- BEGIN DATA -->
DesktopManager 对象由 DesktopPane 对象所拥有。它们负责为 JDesktopPane 实现 L&F 特定行为。JInternalFrame 实现应该将特定行为委托给 DesktopManager。例如，如果 InternalFrame 请求图标化，则它应该试着：
 <PRE>
    getDesktopPane().getDesktopManager().iconifyFrame(frame);
 </PRE>
此委托允许每个 L&F 为特定于桌面的操作提供自定义行为。（例如，内部窗体图标的显示方法和位置。）
<p>此类为各种 JInternalFrame 方法提供策略，不应该直接调用，而应该在 DesktopManager 中调用各种 JInternalFrame 方法。</p>
 
@see JDesktopPane
@see JInternalFrame
@see JInternalFrame.JDesktopIcon

@version 1.15 12/19/03
@author David Kloba

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.openFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
如有可能，在适当的位置显示此窗体。通常不调用此方法，因为 JInternalFrame 的创建者会将该窗体添加到适当的父窗体中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.closeFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
通常，此调用应该从其父窗体中移除窗体。
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.maximizeFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
通常，应该重新调整窗体的大小，使其满足其父窗体的限制。
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.minimizeFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
通常，这指示应该将窗体恢复到调用 maximizeFrame() 前的大小和位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.iconifyFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
通常从父窗体中移除此窗体，并添加一个图标表示形式。
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.deiconifyFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
通常移除现有的任何图标表示形式，并将窗体恢复到其原始大小和位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.activateFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->

通常指示此窗体拥有焦点。此方法一般在已经将 JInternalFrame 的 IS_SELECTED_PROPERTY 设置为 true 后调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.deactivateFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->

通常指示此窗体失去焦点。此方法一般在已经将 JInternalFrame 的 IS_SELECTED_PROPERTY 设置为 false 后调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.beginDraggingFrame(JComponent f)
<!-- END KEY -->
<!-- BEGIN DATA -->
通常在用户已经指示他们将开始拖动某个组件时调用此方法。此方法应该在任何 dragFrame() 调用之前调用，以允许 DesktopManager 准备好所有的必需状态。通常 <b>f</b> 将是一个 JInternalFrame。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.dragFrame(JComponent f, int newX, int newY)
<!-- END KEY -->
<!-- BEGIN DATA -->
用户已经移动窗体。此方法将在调用 beginDraggingFrame() 之后调用。通常 <b>f</b> 将是一个 JInternalFrame。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.endDraggingFrame(JComponent f)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法在拖动会话结束时发出信号。在这里可以移除由 DesktopManager 维护的任何状态。通常 <b>f</b> 将是一个 JInternalFrame。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.beginResizingFrame(JComponent f, int direction)
<!-- END KEY -->
<!-- BEGIN DATA -->
通常在用户已经指示他们将开始重新调整窗体的大小时调用此方法。此方法应该在任何 resizeFrame() 调用之前调用，以允许 DesktopManager 准备好所有的必需状态。通常 <b>f</b> 将是一个 JInternalFrame。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.resizeFrame(JComponent f, int newX, int newY, int newWidth, int newHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
用户已经重新调整组件的大小。此方法将在调用 beginResizingFrame() 之后调用。通常 <b>f</b> 将是一个 JInternalFrame。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.endResizingFrame(JComponent f)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法在重新调整大小会话结束时发出信号。在这里可以移除由 DesktopManager 维护的任何状态。通常 <b>f</b> 将是一个 JInternalFrame。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.setBoundsForFrame(JComponent f, int newX, int newY, int newWidth, int newHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
这是一个基本重塑方法。
<!-- END DATA -->
