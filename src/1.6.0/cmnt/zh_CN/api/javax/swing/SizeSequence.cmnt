<!-- BEGIN KEY -->
public class javax.swing.SizeSequence extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
一个 <code>SizeSequence</code> 对象，它有效地维护一个包含大小和相应位置的顺序列表。有一种情况需要用到 <code>SizeSequence</code>，即显示具有不同大小的多个行的组件。在这种情况下，用一个单独的 <code>SizeSequence</code> 对象可跟踪所有行的高度和 Y 位置。
 <p>
另一个例子是包含多列的组件，比如 <code>JTable</code>，它的各列大小不尽相同。<code>JTable</code> 可使用一个单独的 <code>SizeSequence</code> 对象来存储所有列的宽度和 X 位置。然后，<code>JTable</code> 可以使用 <code>SizeSequence</code> 对象来查找与特定位置对应的列。只要有一列或多列大小发生更改，<code>JTable</code> 就会更新该 <code>SizeSequence</code> 对象。

 <p> 
下图显示了多列组件中大小和位置数据之间的关系。
 <p>
 <center>
<img src="doc-files/SizeSequence-1.gif" width=384 height = 100
 alt="第一项起始位置为 0，第二项起始位置等于
前一项的大小，依此类推。">
 </center>
 <p>
在上图中，第一个索引 (0) 对应第一列，第二个索引 (1) 对应第二列，依此类推。第一列位置从 0 开始，该列占据 <em>size<sub>0</sub></em> 个像素，其中 <em>size<sub>0</sub></em> 是 <code>getSize(0)</code> 返回的值。因此，第一列在 <em>size<sub>0</sub></em> - 1 位置结束。然后第二列从 <em>size<sub>0</sub></em> 位置开始并占据 <em>size<sub>1</sub></em> (<code>getSize(1)</code>) 个像素。
 <p>
注意，<code>SizeSequence</code> 对象只代表轴上的间隔。在我们的示例中，间隔代表以像素为单位的高度或宽度。但是，任何其他测量单位（例如，时间单位为天）也同样有效。

 <p>

<h4>实现注意事项</h4>

通常，存储条目的大小和位置时，我们会选择是存储条目的大小还是位置。呈现时需要两个公共操作：<code>getIndex(position)</code> 和 <code>setSize(index, size)</code>。无论选择哪种内部格式，当条目数变大时，这两个操作中每一个开销都很大。如果存储的是大小，查找位于特定位置的条目索引与条目数呈线性关系。反过来，如果存储的是位置，对位于特定索引的条目设置大小需要更新相关条目的位置，这又是一个线性计算。 
 <p>
与以上技巧相似，此类内部保存一个包含 N 个整数的数组，但它使用混合编码，这是介于基于大小和基于位置的方法之间一种折中方法。结果为一个数据结构，它存储信息需要相同大小的空间，但是执行大多数操作只需要 Log(N) 次，而不是 O(N) 次，N 是列表中的条目数。 
 <p>
有两个操作还需要执行 O(N) 条目数次，它们就是 <code>insertEntries</code> 和 <code>removeEntries</code> 方法，两者的实现方法都是将内部数组转换为一组整数大小，将它复制到新数组，然后将混合表示形式重新正确归位。 

@version 1.14 12/19/03
@author Philip Milne
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.SizeSequence()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 <code>SizeSequence</code> 对象，它不包含任何条目。要添加条目，可使用 <code>insertEntries</code> 或 <code>setSizes</code>。

@see #insertEntries
@see #setSizes

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.SizeSequence(int numEntries)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 <code>SizeSequence</code> 对象，它包含指定的条目数，每个大小都已初始化为 0。
 
@param numEntries  要跟踪的大小数
@exception NegativeArraySizeException 如果 <code>numEntries &lt; 0</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.SizeSequence(int numEntries, int value)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 <code>SizeSequence</code> 对象，它包含指定的条目数，每个大小都已初始化为 <code>value</code>。
 
@param numEntries  要跟踪的大小数
@param value       每个大小的初始值

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.SizeSequence(int[] sizes)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 <code>SizeSequence</code> 对象，它包含指定的大小。
 
@param sizes  要包含在 <code>SizeSequence</code> 中的大小的数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.SizeSequence.setSizes(int[] sizes)
<!-- END KEY -->
<!-- BEGIN DATA -->
用 <code>sizes</code> 参数中的数据重置此 <code>SizeSequence</code> 对象。该方法将此对象重新初始化，这样它可以包含与 <code>sizes</code> 数组一样多的条目。每个条目的大小都初始化为 <code>sizes</code> 中对应项的值。
 
@param sizes  要包含在此 <code>SizeSequence</code> 中的大小的数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] javax.swing.SizeSequence.getSizes()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回所有条目的大小。
 
@return  一个包含此对象中的大小的新数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.SizeSequence.getPosition(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定条目的起始位置。例如，<code>getPosition(0)</code> 返回 0，<code>getPosition(1)</code> 与 <code>getSize(0)</code>相等，<code>getPosition(2)</code> 等于 <code>getSize(0)</code> + <code>getSize(1)</code>，依此类推。
<p>注意，如果 <code>index</code> 大于 <code>length</code>，返回的值可能无意义。
 
@param index  位于期望位置的条目的索引
@return       指定条目的起始位置

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.SizeSequence.getIndex(int position)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与指定位置对应的条目的索引。例如，由于第一个条目通常从位置 0 开始，<code>getIndex(0)</code> 为 0。
 
@param position  条目的位置
@return  占用指定位置的条目的索引

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.SizeSequence.getSize(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定条目的大小。如果 <code>index</code> 超出范围 <code>(0 &lt;= index &lt; getSizes().length)</code>，则行为是未指定的。
 
@param index  与条目对应的索引
@return  条目的大小

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.SizeSequence.setSize(int index, int size)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置指定条目的大小。注意，如果 <code>index</code> 值未落在如下范围：<code>(0 &lt;= index &lt; getSizes().length)</code>，则行为是未指定的。
 
@param index  与条目对应的索引
@param size   条目的大小

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.SizeSequence.insertEntries(int start, int length, int value)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一组相邻的条目添加到此 <code>SizeSequence</code> 中。注意，<code>start</code> 和 <code>length</code> 的值必须满足如下条件：<code>(0 &lt;= start &lt; getSizes().length) AND (length &gt;= 0)</code>。如果未满足这些条件，则行为未指定并且可能抛出异常。
 
@param start   将分配给组中第一个条目的索引
@param length  组中的条目数
@param value   将分配给每个条目的大小
@exception ArrayIndexOutOfBoundsException 如果参数超出如下范围：(<code>0 &lt;= start &lt; (getSizes().length)) AND (length &gt;= 0)</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.SizeSequence.removeEntries(int start, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此 <code>SizeSequence</code> 中移除一组相邻的条目。注意，<code>start</code> 和 <code>length</code> 的值必须满足如下条件：<code>(0 &lt;= start &lt; getSizes().length) AND (length &gt;= 0)</code>。如果未满足这些条件，则行为未指定并且可能抛出异常。
 
@param start   要移除的第一个条目的索引
@param length  要移除的条目数

<!-- END DATA -->
