<!-- BEGIN KEY -->
public static final class javax.swing.JTree.DropLocation extends javax.swing.TransferHandler.DropLocation
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>TransferHandler.DropLocation</code> 的一个子类，表示 <code>JTree</code> 的放置位置 (drop location)。

@see #getDropLocation
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTree.DropLocation.getChildIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
对于 <code>getPath()</code> 返回的路径，返回应该插入放置数据的位置的索引。
 <p>
对于放置模式 <code>DropMode.USE_SELECTION</code> 和 <code>DropMode.ON</code>，此索引并不重要（它将始终为 <code>-1</code>），因为所需的数据只是放置操作发生的路径。
 <p>
对于放置模式 <code>DropMode.INSERT</code>，此索引指示 <code>getPath()</code> 所表示的父路径中应该插入数据的位置的索引。<code>-1</code> 指示放置操作发生在父路径上，在大多数情况下，应该被视为插入到子路径的父路径列表开始或结束的位置。
 <p>
对于 <code>DropMode.ON_OR_INSERT</code>，此值将是一个插入索引，如上所述，如果放置操作发生在路径本身上，则此值为 <code>-1</code>。

@return 子索引
@see #getPath

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.JTree.DropLocation.getPath()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回树中应该用来放入放置数据的路径。
 <p>
对此值的解释取决于在关联组件上设置的放置模式。如果放置模式为 <code>DropMode.USE_SELECTION</code> 或 <code>DropMode.ON</code>，则返回值是树中放置了（或将放置）数据的路径。<code>null</code> 指示该放置操作发生在空格上，与特定路径没有关联。
 <p>
如果放置模式为 <code>DropMode.INSERT</code>，则返回值是应该成为新数据父级的路径，在这种情况下，<code>getChildIndex()</code> 指示应该将新的项插入到此父路径的哪个位置。<code>null</code> 路径指示没有确定父路径，发生这种情况有很多原因：
 <ul>
<li>树没有模型
<li>树中没有根
<li>根是折叠的
<li>根是一个叶节点
 </ul>
由开发人员决定他们是否希望处理 <code>null</code> 的情况以及如何处理这种情况。 
 <p>
如果放置模式为 <code>DropMode.ON_OR_INSERT</code>，则可以使用 <code>getChildIndex</code> 来确定放置操作是否发生在路径本身的顶部（<code>-1</code>），或者路径中应该插入它的位置的索引（<code>-1</code> 以外的值）。

@return 放置路径
@see #getChildIndex

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JTree.DropLocation.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此放置位置的字符串表示形式。此方法仅用于调试，对于各个实现，所返回字符串的内容和格式可能有所不同。

@return 此放置位置的字符串表示形式

<!-- END DATA -->
