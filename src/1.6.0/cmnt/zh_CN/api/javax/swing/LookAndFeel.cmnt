<!-- BEGIN KEY -->
public abstract class javax.swing.LookAndFeel extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
顾名思义，{@code LookAndFeel} 封装了一个外观。除了安装外观之外，大多数开发人员无需直接与 {@code LookAndFeel} 进行交互。通常，只有创建自定义外观的开发人员才需要涉及此类。
 <p>
Swing 构建的基础是每个 {@code JComponent} 子类都具有特定 {@code ComponentUI} 子类的实现。{@code ComponentUI} 通常被称为“ui”、“组件 ui”或“外观委托”。{@code ComponentUI} 子类负责提供组件特定于外观的功能。例如，{@code JTree} 需要 {@code ComponentUI} 子类 {@code TreeUI} 的实现。特定 {@code ComponentUI} 子类的实现由 {@code LookAndFeel} 提供。通过 {@code JComponent} 方法 {@code getUIClassID}，每个 {@code JComponent} 子类可标识所需的 {@code ComponentUI} 子类。
 <p>
每个 {@code LookAndFeel} 实现必须提供适当 {@code ComponentUI} 子类的实现，方法是为 {@code getDefaults} 所返回的 {@code UIDefaults} 对象中每个 Swing 的 ui 类 id 指定一个值。例如，{@code BasicLookAndFeel} 将 {@code BasicTreeUI} 用作 {@code TreeUI} 的具体实现。这是通过提供键-值对 {@code
 "TreeUI"-"javax.swing.plaf.basic.BasicTreeUI"} 的 {@code BasicLookAndFeel} 完成的，该键-值对在 {@code getDefaults} 所返回的 {@code UIDefaults} 中。有关如何获得 {@code ComponentUI} 子类实现的详细信息，请参阅 {@link UIDefaults#getUI(JComponent)}。
 <p>
当安装了一个 {@code LookAndFeel} 时，{@code UIManager} 不会检查是否存在所有 ui 类 id 的项。因此，如果当前外观尚未为特定 ui 类 id 提供一个值，并且创建了 {@code JComponent} 子类的实例，则会发生随机异常。

 <h2>对外观的建议</h2>

正如 {@code UIManager} 中说明的，每个 {@code LookAndFeel} 都有机会提供一个默认值（该值按开发人员和系统默认值分层）的集合。Swing 的某些组件要求外观提供默认值的特定集合。这些在要求特定默认值的类中有记录。

 <h3><a name="#defaultRecommendation">ComponentUI 和默认值</a></h2>

所有 {@code ComponentUI} 通常都需要在 {@code JComponent} 上设置各种属性，{@code ComponentUI} 为其提供外观。这通常在 {@code JComponent} 上安装了 {@code ComponentUI} 时执行。只有在开发人员尚未设置属性时，才应该设置该属性。对于非基本值，只有当前值为 {@code null} 或实现 {@code UIResource} 时，才建议 {@code ComponentUI} 更改 {@code JComponent} 上的属性。如果当前值为 {@code null} 或实现 {@code UIResource}，则它指示开发人员尚未设置该属性，ui 可以随意更改它。例如，只有从 {@code button.getFont()} 返回的值为 {@code null} 或实现 {@code UIResource} 时，{@code BasicButtonUI.installDefaults} 才更改 {@code JButton} 的字体。另一方面，如果 {@code button.getFont()} 返回一个未实现 {@code UIResource} 的{@code 非 null} 值，则 {@code BasicButtonUI.installDefaults} 将不会更改 {@code JButton} 的字体。
 <p>
对于基本值（如 {@code opaque}），应该调用 {@code installProperty} 方法。只有在开发人员尚未更改该值时，{@code installProperty} 才更改对应属性。
 <p>
在 {@code ComponentUI} 实现使用推荐指南处理必需的检查和安装属性时，它们应该使用此类提供的各种安装方法。 
 <p>
 <h3><a name="exceptions"></a>异常</h3>

如果要更改的属性值为 {@code null} 或 {@code UIResource}，则 {@code LookAndFeel} 提供的所有安装方法都需要访问默认值。例如，安装字体执行以下操作：
 <pre>
   JComponent c;
   Font font = c.getFont();
   if (font == null || (font instanceof UIResource)) {
       c.setFont(UIManager.getFont("fontKey"));
   }
 </pre>
如果字体为 {@code null} 或 {@code UIResource}，则使用 {@code fontKey} 键查询默认表。如果传入 {@code null}，则所有 {@code UIDefaults} 的获取方法都将抛出 {@code NullPointerException}。因此，如果当前值为 {@code null} 或 {@code UIResource}，并且提供的默认键为 {@code null}，那么除非另行说明，否则 {@code LookAndFeel} 的每个安装方法都将抛出 {@code NullPointerException}。此外，如果传入一个 {@code null} 组件，那么除非另行指定，否则所有 {@code install} 方法都将抛出 {@code NullPointerException}。
 
@version 1.44 07/12/06
@author Tom Ball
@author Hans Muller

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.LookAndFeel.installColors(JComponent c, String defaultBgName, String defaultFgName)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认的值设置组件的前景和背景颜色属性的便捷方法。只有在当前值为 {@code null} 或 {@code UIResource} 时才设置这些属性。
 
@param c 要设置颜色的组件
@param defaultBgName 背景的键
@param defaultFgName 前景的键
 
@see #installColorsAndFont
@see UIManager#getColor
@throws NullPointerException 如<a href="#exceptions">异常</a>中所述

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.LookAndFeel.installColorsAndFont(JComponent c, String defaultBgName, String defaultFgName, String defaultFontName)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认的值设置组件的前景、背景和字体属性的便捷方法。只有在当前值为 {@code null} 或 {@code UIResource} 时才设置这些属性。
 
@param c 要设置颜色和字体的组件
@param defaultBgName 背景的键
@param defaultFgName 前景的键
@param defaultFontName 字体的键
@throws NullPointerException 如<a href="#exceptions">异常</a>中所述

@see #installColors
@see UIManager#getColor
@see UIManager#getFont

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.LookAndFeel.installBorder(JComponent c, String defaultBorderName)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认的值设置组件边框属性的便捷方法。只有在边框为 {@code null} 或 {@code UIResource} 的实例时才设置该边框。

@param c 要设置边框的组件
@param defaultBorderName 指定该边框的键
@throws NullPointerException 如<a href="#exceptions">异常</a>中所述

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.LookAndFeel.uninstallBorder(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
卸载边框的便捷方法。如果该组件的边框是一个 {@code UIResource}，则将它设置为 {@code null}。

@param c 要卸载边框的组件
@throws NullPointerException 如果 {@code c} 为 {@code null}

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.LookAndFeel.installProperty(JComponent c, String propertyName, Object propertyValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
在组件上安装具有指定名称和值的属性的便捷方法，条件是该属性尚未由开发人员设置。此方法供 ui 委托实例使用，该实例需要为基本类型 (boolean, int, ..) 的属性指定一个默认值，但不希望重写由客户端设置的值。由于基本属性值无法使用 {@code UIResource} 标记来包装，此方法使用私有状态来确定属性是否已由客户端设置。

 @throws IllegalArgumentException 如果指定的属性不是可以使用此方法设置的属性
 @throws ClassCastException 如果属性值尚未由开发人员设置并且类型与属性的类型不匹配
 @throws NullPointerException 如果 {@code c} 为 {@code null}，或者指定属性尚未由开发人员设置并且 {@code propertyValue} 为 {@code null}
 @param c 要设置属性的目标组件
 @param propertyName 要设置的属性的名称
 @param propertyValue 属性的值
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.text.JTextComponent.KeyBinding[] javax.swing.LookAndFeel.makeKeyBindings(java.lang.Object[] keyBindingList)
<!-- END KEY -->
<!-- BEGIN DATA -->
构建一个 {@code KeyBinding} 数组的便捷方法。尽管此方法没有过时，但开发人员应该使用 {@code ActionMap} 和 {@code InputMap} 来提供键绑定。
 <p>
此方法返回一个 {@code KeyBinding} 数组，其中的每个元素都是 {@code keyBindingList} 中一个交替 {@code key-action} 对。{@code key} 可以是由 <code>KeyStroke.getKeyStroke</code> 方法指定格式的 {@code String}，或者是一个 {@code KeyStroke}。该对的 {@code action} 部分是对应于 {@code Action} 名称的 {@code String}。 
 <p>
以下示例演示了如何根据六个交替 {@code key-action} 对创建一个 {@code KeyBinding} 数组：
 <pre>
 	JTextComponent.KeyBinding[] multilineBindings = makeKeyBindings( new Object[] {
          &quot;UP&quot;, DefaultEditorKit.upAction,
        &quot;DOWN&quot;, DefaultEditorKit.downAction,
     &quot;PAGE_UP&quot;, DefaultEditorKit.pageUpAction,
   &quot;PAGE_DOWN&quot;, DefaultEditorKit.pageDownAction,
       &quot;ENTER&quot;, DefaultEditorKit.insertBreakAction,
         &quot;TAB&quot;, DefaultEditorKit.insertTabAction
  });
 </pre>
如果 {@code keyBindingList} 的长度为奇数，则忽略最后一个元素。
 <p>
为 {@code key-action} 对的 {@code key} 或 {@code action} 部分提供一个 {@code null} 值将导致创建一个 {@code KeyBinding}，其对应值为 {@code null}。作为 {@code KeyBinding} 中 Swing 的期望{@code 非 null} 值的其他部分，应该避免将 {@code null} 作为 {@code key-action} 对的 {@code key} 或 {@code action} 部分提供。

 @param keyBindingList {@code key-action} 对数组
 @return {@code KeyBinding} 数组
 @throws NullPointerException 如果 {@code keyBindingList} 为 {@code null}
 @throws ClassCastException 如果该对的 {@code key} 部分不是 {@code KeyStroke} 或 {@code String}，或者该对的 {@code action} 部分不是 {@code String}
 @see ActionMap
 @see InputMap
 @see KeyStroke#getKeyStroke

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.InputMap javax.swing.LookAndFeel.makeInputMap(java.lang.Object[] keys)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 <code>keys</code> 创建一个 {@code InputMapUIResource}。这是创建新 {@code InputMapUIResource}、调用 {@code loadKeyBindings(map, keys)} 并返回 {@code InputMapUIResource} 的一个便捷方法。

 @param keys {@link #loadKeyBindings} 中所述的 {@code keystroke-action key} 对的交替对
 @return 新创建并填充的 {@code InputMapUIResource}
 @see #loadKeyBindings

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.ComponentInputMap javax.swing.LookAndFeel.makeComponentInputMap(JComponent c, java.lang.Object[] keys)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 <code>keys</code> 创建一个 {@code ComponentInputMapUIResource}。这是创建新 {@code ComponentInputMapUIResource}、调用 {@code loadKeyBindings(map, keys)} 并返回 {@code ComponentInputMapUIResource} 的一个便捷方法。

 @param c 要用来创建 {@code ComponentInputMapUIResource} 的组件
 @param keys {@link #loadKeyBindings} 中所述的 {@code keystroke-action key} 对的交替对
 @return 新创建并填充的 {@code InputMapUIResource}
 @throws IllegalArgumentException 如果 {@code c} 为 {@code null}

 @see #loadKeyBindings
 @see ComponentInputMapUIResource

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.LookAndFeel.loadKeyBindings(InputMap retMap, java.lang.Object[] keys)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定绑定填充 {@code InputMap}。该绑定作为一个交替 {@code keystroke-action key} 对的列表提供。{@code keystroke} 是 {@code KeyStroke} 的实例，或者是标识该绑定的 {@code KeyStroke} 的 {@code String}。有关特定格式，请参阅 {@code KeyStroke.getKeyStroke(String)}。该对的 {@code action key} 部分是为 {@code KeyStroke} 在 {@code InputMap} 中注册的键。
 <p>
以下代码演示了如何使用两个 {@code key-action} 对来加载 {@code InputMap}： 
 <pre>
   LookAndFeel.loadKeyBindings(inputMap, new Object[] {
     "control X", "cut",
     "control V", "paste"
   });
 </pre>
 <p>
提供一个绑定 {@code keys} 的 {@code null} 列表不会以任何方式更改 {@code retMap}。 
 <p>
指定一个为 {@code null} 的 {@code action key} 将导致从 {@code InputMap} 中移除 {@code keystroke} 的项。忽略为 {@code null} 的 {@code keystroke}。

 @param retMap 要添加 {@code key-action} 对的 {@code InputMap} 
 @param keys 要添加到 {@code retMap} 的绑定
 @throws NullPointerException 如果 {@code keys} 为{@code 非 null}，不为空，并且 {@code retMap} 为 {@code null}

 @see KeyStroke#getKeyStroke(String)
 @see InputMap

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Object javax.swing.LookAndFeel.makeIcon(java.lang.Class<?> baseClass, String gifFile)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回一个加载图像的 {@code UIDefault.LazyValue}。返回值是 {@code UIDefaults.LazyValue} 的实现。当在返回对象上调用 {@code createValue} 时加载图像。如果图像为{@code 非 null}，则它包装在一个实现 {@code UIResource} 的 {@code Icon} 中。使用 {@code Class.getResourceAsStream(gifFile)} 加载图像。
 <p>
此方法不会以任何方式检查参数。建议最好提供{@code 非 null} 值，否则在返回对象上调用 {@code createValue} 时可能发生异常。 

 @param baseClass 用于加载资源的 {@code Class} 
 @param gifFile 要加载的图像的路径
 @return 一个 {@code UIDefaults.LazyValue}；该值被解析时 {@code LazyValue} 加载指定的图像 
 @see UIDefaults.LazyValue
 @see Icon
 @see Class#getResourceAsStream(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.LayoutStyle javax.swing.LookAndFeel.getLayoutStyle()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此外观的 <code>LayoutStyle</code>。此方法永远不会返回 {@code null}。
 <p>
通常不使用外观的 <code>LayoutStyle</code>，而使用 <code>LayoutStyle</code> 方法 <code>getInstance</code>。

 @see LayoutStyle#getInstance
 @return 此外观的 <code>LayoutStyle</code> 
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.LookAndFeel.provideErrorFeedback(Component component)
<!-- END KEY -->
<!-- BEGIN DATA -->
在用户尝试一个无效操作时调用，例如，在具有焦点的不可编辑的 <code>JTextField</code> 中进行粘贴。默认实现蜂鸣。期待不同行为的子类应重写它，并提供其他的反馈。

@param component 其中发生错误的 <code>Component</code>，可以为 <code>null</code>，指示错误条件与某个 <code>Component</code> 并无直接关联
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Object javax.swing.LookAndFeel.getDesktopPropertyValue(String systemPropertyName, Object fallbackValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 <code>Toolkit.getDefaultToolkit().getDesktopProperty()</code> 返回指定系统桌面属性的值。如果指定属性的值为 {@code null}，则返回 {@code fallbackValue}。
@param systemPropertyName 正被查询的系统桌面属性的名称
@param fallbackValue 在系统值为 null 时，要作为值返回的对象
@return 桌面属性的当前值

@see java.awt.Toolkit#getDesktopProperty

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.LookAndFeel.getDisabledIcon(JComponent component, Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回具有禁用外观的 <code>Icon</code>。此方法用于在未指定图标时生成被禁用的 <code>Icon</code>。例如，如果创建了一个 <code>JButton</code>，并通过 <code>setIcon</code> 仅指定了一个 <code>Icon</code>，则会调用此方法来生成被禁用的 <code>Icon</code>。如果 {@code null} 作为 <code>icon</code> 传递，则此方法将返回 {@code null}。 
 <p>
有些外观可能不呈现被禁用的 {@code Icon}，在此情况下这些外观将忽略它。

@param component 将显示 {@code Icon} 的 {@code JComponent}，可以为 {@code null}
@param icon 从其生成禁用图标的 {@code Icon} 
@return 禁用 {@code Icon}；如果无法生成合适的 {@code Icon}，则返回 {@code null}
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.LookAndFeel.getDisabledSelectedIcon(JComponent component, Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由选定的禁用组件使用的 <code>Icon</code>。此方法用于为以下情况的组件生成一个 <code>Icon</code>：这些组件均为禁用和选中状态，但没有此状态的指定 <code>Icon</code>。例如，如果创建了一个 <code>JButton</code>，并通过 <code>setIcon</code> 仅指定了一个 <code>Icon</code>，则会调用此方法来生成禁用和选中的 <code>Icon</code>。如果 {@code null} 作为 <code>icon</code> 传递，则此方法将返回 {@code null}。 
 <p>
有些外观可能不呈现禁用和选中的 {@code Icon}，在此情况下这些外观将忽略它。

@param component 将显示 {@code Icon} 的 {@code JComponent}，可以为 {@code null}
@param icon 从其生成禁用和选中图标的 {@code Icon} 
@return 禁用和选中的图标，如果无法生成合适的 {@code Icon}，则返回 {@code null}
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String javax.swing.LookAndFeel.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回标识此外观的短字符串，例如 &quot;CDE/Motif&quot;。此字符串应适合于菜单项。不同的外观应具有不同的名称，例如，更改某些组件呈现方式的 MotifLookAndFeel 的子类应称为 &quot;CDE/Motif My Way&quot;；这对从名称列表中选择 L&F 的用户非常有用。

@return 该外观的短标识符

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String javax.swing.LookAndFeel.getID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回标识此外观的字符串。此字符串将由希望识别熟知的外观实现的应用程序/服务使用。目前熟知的的名称有&ldquo;Motif&rdquo;、&ldquo;Windows&rdquo;、&ldquo;Mac&rdquo;和&ldquo;Metal&rdquo;。注意，由未对外观进行任何基本更改的熟知的超类派生的 LookAndFeel 不应重写此方法。

@return 该外观的标识符

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String javax.swing.LookAndFeel.getDescription()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回对此外观实现的单行描述，例如，&quot;The CDE/Motif Look and Feel&quot;。此字符串供用户使用，例如，在窗口的标题中或在 ToolTip 消息中使用。

@return 该外观的简短描述

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.LookAndFeel.getSupportsWindowDecorations()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>LookAndFeel</code> 返回的 <code>RootPaneUI</code> 实例支持 <code>JRootPane</code> 中提供 {@code Window} 装饰，则返回 {@code true}。
 <p>
默认实现返回 {@code false}，支持 {@code Window} 装饰的子类应重写它并返回 {@code true}。

@return 如果此外观创建的 {@code RootPaneUI} 实例支持客户端装饰，则返回 {@code true}
@see JDialog#setDefaultLookAndFeelDecorated
@see JFrame#setDefaultLookAndFeelDecorated
@see JRootPane#setWindowDecorationStyle
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.swing.LookAndFeel.isNativeLookAndFeel()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果底层平台具有&ldquo;本机&rdquo;外观，而且这是对它的一个实现，则返回 {@code true}。例如，在底层平台为运行 CDE 的 Solaris 时，CDE/Motif 的外观实现将返回 {@code true}。

@return 如果此外观表示底层平台的外观，则返回 {@code true} 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.swing.LookAndFeel.isSupportedLookAndFeel()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果底层平台支持和/或允许此外观，则返回 {@code true}。如果外观取决于特定资源或未为当前平台定义合法协议，则此方法返回 {@code false}。  
 
@return 如果这是一个受支持的外观，则返回 {@code true} 
@see UIManager#setLookAndFeel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.LookAndFeel.initialize()
<!-- END KEY -->
<!-- BEGIN DATA -->
初始化外观。尽管此方法是公共的，但只有在外观作为当前外观安装时才能由 {@code UIManager} 调用。在 {@code UIManager} 调用 {@code getDefaults} 之前调用此方法。此方法用于执行外观的任何初始化。子类应该用此方法而不是静态初始化程序来执行它们需要的任何一次设置，因为也可能只是为了发现 {@code isSupportedLookAndFeel()} 返回 {@code false} 而加载外观类对象。

@see #uninitialize
@see UIManager#setLookAndFeel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.LookAndFeel.uninitialize()
<!-- END KEY -->
<!-- BEGIN DATA -->
取消初始化外观。尽管此方法是公共的，但只有在卸载外观时才能由 {@code UIManager} 调用。例如，外观更改时 {@code UIManager.setLookAndFeel} 调用此方法。
 <p>
子类在此处可以选择释放一些资源。 

 @see #initialize
 @see UIManager#setLookAndFeel

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.UIDefaults javax.swing.LookAndFeel.getDefaults()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回外观的默认值。尽管此方法是公共的，但只有在调用 {@code initialize} 后，外观作为当前外观设置时才能由 {@code UIManager} 调用。

@return 外观默认值
@see #initialize
@see #uninitialize
@see UIManager#setLookAndFeel

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.LookAndFeel.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回显示和标识此对象属性的字符串。

@return 此对象的 String 表示形式

<!-- END DATA -->
