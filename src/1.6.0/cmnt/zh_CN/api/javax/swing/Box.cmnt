<!-- BEGIN KEY -->
public class javax.swing.Box extends javax.swing.JComponent implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 BoxLayout 对象作为其布局管理器的一个轻量级容器。Box 提供几个对使用 BoxLayout 的容器（甚至非 Box 容器）有用的类方法。

 <p>
<code>Box</code> 类可以创建几种影响布局的不可见组件：glue、struts 和 rigid 区域。如果 <code>Box</code> 包含的所有组件都有一个固定大小，可以使用 glue 组件（由 <code>createGlue</code> 返回）来控制组件的位置。如果想让两个组件之间有一个固定的空间量，可以尝试使用 strut（<code>createHorizontalStrut</code> 或 <code>createVerticalStrut</code>）。如果需要一个总是占用相同空间量的不可见组件，可以通过调用 <code>createRigidArea</code> 获得。
 <p>
如果要实现一个 <code>BoxLayout</code>，可以在 <em>The Java Tutorial</em> 的 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/layout/box.html">How to Use BoxLayout</a> 一节中获得更多信息和示例。 
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@see BoxLayout

@author  Timothy Prinzing
@version 1.43 12/19/03

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Box(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个沿指定坐标轴显示其组件的 <code>Box</code>。

@param axis  可以是 {@link BoxLayout#X_AXIS}、{@link BoxLayout#Y_AXIS}、{@link BoxLayout#LINE_AXIS} 或 {@link BoxLayout#PAGE_AXIS}。
@throws AWTError 如果 <code>axis</code> 无效
@see #createHorizontalBox
@see #createVerticalBox

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.Box javax.swing.Box.createHorizontalBox()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个从左到右显示其组件的 <code>Box</code>。如果想创建一个遵守该组件方向的 <code>Box</code>，则应使用构造方法并传入 <code>BoxLayout.LINE_AXIS</code> 来创建 <code>Box</code>，例如：
 <pre>
   Box lineBox = new Box(BoxLayout.LINE_AXIS);
 </pre>

@return box

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.Box javax.swing.Box.createVerticalBox()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个从上到下显示其组件的 <code>Box</code>。如果想创建一个遵守该组件方向的 <code>Box</code>，则应使用构造方法并传入 <code>BoxLayout.PAGE_AXIS</code> 来创建 <code>Box</code>，例如：
 <pre>
   Box lineBox = new Box(BoxLayout.PAGE_AXIS);
 </pre>

@return box

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Component javax.swing.Box.createRigidArea(Dimension d)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个总是具有指定大小的不可见组件。
<!-- WHEN WOULD YOU USE THIS AS OPPOSED TO A STRUT? -->

@param d 不可见组件的尺寸
@return 该组件
@see #createGlue
@see #createHorizontalStrut
@see #createVerticalStrut

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Component javax.swing.Box.createHorizontalStrut(int width)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个不可见的、固定宽度的组件。在一个横向 box 中，通常使用此方法强行使两个组件之间具有某一空间量。在一个纵向 box 中，可以使用此方法强行使 box 至少具有指定宽度。只有存在可用的剩余空间时，不可见组件才有高度，在这种情况下，就像其他任何没有最大高度的组件一样，它将采用其可用的共享空间。

@param width 不可见组件的宽度，以像素为单位，该宽度 &gt;= 0
@return 该组件
@see #createVerticalStrut
@see #createGlue
@see #createRigidArea

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Component javax.swing.Box.createVerticalStrut(int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个不可见的、固定高度的组件。在一个纵向 box 中，通常使用此方法强行使两个组件之间具有某一空间量。在一个横向 box 中，可以使用此方法强行使 box 至少具有指定高度。只有具有可用的剩余空间时，不可见组件才有宽度，在这种情况下，就像其他任何没有最大宽度的组件一样，它将采用其可用的共享空间。

@param height 不可见组件的高度，以像素为单位，该高度 &gt;= 0
@return 该组件
@see #createHorizontalStrut
@see #createGlue
@see #createRigidArea

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Component javax.swing.Box.createGlue()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个不可见的 &quot;glue&quot; 组件，其可见组件有一个最大宽度（对于横向 box）或高度（对于纵向 box）的 Box，该组件可能很有用。可将该 glue 组件视为一种粘性物质，它尽其所需地进行扩展，以填充与其相邻组件间的空间。

 <p>

例如，假定有一个包含两个固定大小组件的横向 box。如果 box 获得额外的空间，而这两个固定大小的组件不会变得更大，那么额外的空间放到哪去呢？在没有 glue 的情况下，额外的空间将放到第二个组件的右边。如果将 glue 放在两个固定大小组件之间，则额外的空间将放到那里。如果将 glue 放在第一个固定大小组件的前面，则额外的空间将放到那里，两个固定大小的组件将被挤到 box 的右边缘。如果将 glue 放在第一个固定大小组件之前，第二个固定大小组件之后，则这两个固定大小组件将被挤到 box 的中心。

 <p>

要使用 glue，请调用 <code>Box.createGlue</code>，并将返回的组件添加到容器中。glue 组件没有最小大小或首选大小，因此只有剩余的空间可用时，它才占用空间。如果剩余的空间可用，那么就像其他任何没有最大宽度或高度的组件一样，glue 组件将占用其可用的共享横向或纵向空间。

@return 组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Component javax.swing.Box.createHorizontalGlue()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个横向 glue 组件。

@return 组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Component javax.swing.Box.createVerticalGlue()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个纵向 glue 组件。

@return 组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.Box.setLayout(LayoutManager l)
<!-- END KEY -->
<!-- BEGIN DATA -->
抛出一个 AWTError，因为 Box 只能使用 BoxLayout。

@param l 要使用的布局管理器

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.Box.paintComponent(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
 绘制此 <code>Box</code>。如果此 <code>Box</code> 具有一个 UI，则此方法调用 super 的实现，否则，如果此 <code>Box</code> 是不透明的，则使用背景填充 <code>Graphics</code>。

 @param g 要绘制的 <code>Graphics</code> 
 @throws NullPointerException 如果 <code>g</code> 为 null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.Box.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 Box 相关联的 AccessibleContext。对于 box 来说，AccessibleContext 采用 AccessibleAWTDialog 的形式。如有必要，可创建一个新的 AccessibleAWTBox 实例。

@return 一个 AccessibleBox，它充当此 Box 的 AccessibleContext。

<!-- END DATA -->
