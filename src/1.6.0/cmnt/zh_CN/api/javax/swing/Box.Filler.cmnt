<!-- BEGIN KEY -->
public static class javax.swing.Box.Filler extends javax.swing.JComponent implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
参与布局但没有视图的轻量级组件的实现。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Box.Filler(Dimension min, Dimension pref, Dimension max)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的大小范围创建形状的构造方法。

@param min   最小大小
@param pref  首选大小
@param max   最大大小

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.Box.Filler.changeShape(Dimension min, Dimension pref, Dimension max)
<!-- END KEY -->
<!-- BEGIN DATA -->
更改此形状的大小请求。此方法使 invalidate() 向上传播，以至最终将使用新的大小进行布局。

@param min   将由 getMinimumSize 返回的值
@param pref  将由 getPreferredSize 返回的值
@param max   将由 getMaximumSize 返回的值

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.Box.Filler.paintComponent(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
 绘制此 <code>Filler</code>。如果此 <code>Filler</code> 具有一个 UI，则此方法调用 super 的实现，否则，如果此 <code>Filler</code> 是不透明的，则使用背景填充 <code>Graphics</code>。

 @param g 要绘制的 <code>Graphics</code> 
 @throws NullPointerException 如果 <code>g</code> 为 null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.Box.Filler.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 Box.Filler 相关联的 AccessibleContext。对于 box filler，AccessibleContext 采用 AccessibleBoxFiller 的形式。如有必要，可创建一个新的 AccessibleAWTBoxFiller 实例。

@return 一个 AccessibleBoxFiller，它充当此 Box.Filler 的 AccessibleContext。

<!-- END DATA -->
