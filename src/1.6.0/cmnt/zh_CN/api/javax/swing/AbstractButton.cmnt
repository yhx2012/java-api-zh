<!-- BEGIN KEY -->
public abstract class javax.swing.AbstractButton extends javax.swing.JComponent implements java.awt.ItemSelectable, javax.swing.SwingConstants
<!-- END KEY -->
<!-- BEGIN DATA -->
定义按钮和菜单项的一般行为。
 <p>
按钮可以进行配置，以及通过 <code><a href="Action.html">Action</a></code> 进行某种程度的控制。使用带有按钮的 <code>Action</code> 具有除直接配置按钮之外的许多优点。有关更多信息，请参阅<a href="Action.html#buttonActions">支持 <code>Action</code> 的 Swing 组件</a>，在 <em>The Java Tutorial</em> 中的 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/misc/action.html">How
 to Use Actions</a> 一节中可以找到更多信息。
 <p>
有关更多信息，请参阅 <em>The Java Tutorial</em> 中的 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/components/button.html">How to Use Buttons, Check Boxes, and Radio Buttons</a> 一节。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.174 05/18/04
@author Jeff Dinkins

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.AbstractButton.MODEL_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识按钮模型中的更改。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.AbstractButton.TEXT_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识按钮的文本中的更改。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.AbstractButton.MNEMONIC_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识按钮的助记符中的更改。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.AbstractButton.MARGIN_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识按钮的边界空白的更改。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.AbstractButton.VERTICAL_ALIGNMENT_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识按钮的垂直对齐方式的更改。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.AbstractButton.HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识按钮的水平对齐方式的更改。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.AbstractButton.VERTICAL_TEXT_POSITION_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识按钮的垂直文本位置的更改。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.AbstractButton.HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识按钮的水平文本位置的更改。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.AbstractButton.BORDER_PAINTED_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识是否绘制边框的更改。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.AbstractButton.FOCUS_PAINTED_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识是否在边框拥有焦点时高亮显示。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.AbstractButton.ROLLOVER_ENABLED_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识从启用翻转到禁用翻转或者从禁用翻转到启用翻转的更改。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识对按钮绘制的内容区域的更改。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.AbstractButton.ICON_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识对表示该按钮的图标的更改。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.AbstractButton.PRESSED_ICON_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识对按下按钮时使用的图标的更改。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.AbstractButton.SELECTED_ICON_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识对选定按钮时使用的图标的更改。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.AbstractButton.ROLLOVER_ICON_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识对光标移动到按钮上时使用的图标的更改。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.AbstractButton.ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识对光标移动到按钮上并选定该按钮时使用的图标的更改。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.AbstractButton.DISABLED_ICON_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识禁用按钮时使用的图标的更改。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.AbstractButton.DISABLED_SELECTED_ICON_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标识禁用并选定按钮时使用的图标的更改。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.ButtonModel javax.swing.AbstractButton.model
<!-- END KEY -->
<!-- BEGIN DATA -->
确定按钮状态的数据模型。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.ChangeListener javax.swing.AbstractButton.changeListener
<!-- END KEY -->
<!-- BEGIN DATA -->

按钮模型的 <code>changeListener</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.event.ActionListener javax.swing.AbstractButton.actionListener
<!-- END KEY -->
<!-- BEGIN DATA -->

按钮模型的 <code>ActionListener</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.event.ItemListener javax.swing.AbstractButton.itemListener
<!-- END KEY -->
<!-- BEGIN DATA -->

按钮模型的 <code>ItemListener</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.event.ChangeEvent javax.swing.AbstractButton.changeEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
每个按钮实例都只需要一个 <code>ChangeEvent</code>，因为事件的唯一状态是源属性。所生成的事件源总是 &quot;this&quot;。

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.AbstractButton.Handler javax.swing.AbstractButton.handler
<!-- END KEY -->
<!-- BEGIN DATA -->
组合的侦听器：ActionListener、ChangeListener 和 ItemListener。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setHideActionText(boolean hideActionText)
<!-- END KEY -->
<!-- BEGIN DATA -->
 设置 <code>hideActionText</code> 属性，该属性确定按钮是否显示 <code>Action</code> 的文本。只有在按钮上已安装了 <code>Action</code> 时，此方法才有用。

 @param hideActionText 如果按钮的 <code>text</code> 属性不应该反映 <code>Action</code> 的文本，则该参数为 <code>true</code>；默认情况下为 <code>false</code>
 @see <a href="Action.html#buttonActions">支持
      <code>Action</code> 的 Swing 组件</a>
 @since 1.6
 @beaninfo
        bound: true
    expert: true
  description: Whether the text of the button should come from
               the <code>Action</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.AbstractButton.getHideActionText()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回 <code>hideActionText</code> 属性的值，该属性确定按钮是否显示 <code>Action</code> 的文本。只有在按钮上已安装了 <code>Action</code> 时，此方法才有用。

 @return 如果按钮的 <code>text</code> 属性不应该反映 <code>Action</code> 的文本，则返回 <code>true</code>；默认情况下返回 <code>false</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.AbstractButton.getText()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回按钮的文本。
@return 按钮的文本
@see #setText

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setText(String text)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置按钮的文本。
@param text 用于设置文本的字符串
@see #getText
@beaninfo bound:true preferred:true attribute: visualUpdate true description:The button's text.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.AbstractButton.isSelected()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回按钮的状态。如果选定了切换按钮，则返回 true，否则返回 false。
@return 如果选定了切换按钮，则返回 true，否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setSelected(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置按钮的状态。注意，此方法不会触发 <code>actionEvent</code>。调用 <code>doClick</code> 以执行程序上的动作更改。

@param b 如果选择了按钮，则该参数为 true，否则为 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.doClick()
<!-- END KEY -->
<!-- BEGIN DATA -->
以编程方式执行&ldquo;单击&rdquo;。此方法的效果等同于用户按下并随后释放按钮。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.doClick(int pressTime)
<!-- END KEY -->
<!-- BEGIN DATA -->
以编程方式执行&ldquo;单击&rdquo;。此方法的效果等同于用户按下并随后释放按钮。按钮在虚拟&ldquo;按下&rdquo;状态下停留 <code>pressTime</code> 毫秒的时间。

@param pressTime &ldquo;按下&rdquo;按钮的时间，以毫秒为单位

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setMargin(Insets m)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置按钮边框和标签之间的空白。将该空白设置为 <code>null</code> 会造成按钮使用默认空白。按钮的默认 <code>Border</code> 对象将使用该值来创建适当的空白。不过，如果在按钮上设置非默认边框，则由 <code>Border</code> 对象负责创建适当的空白（否则此属性将被忽略）。

@param m 边框和标签之间的间隔

@beaninfo bound:true attribute: visualUpdate true description: The space between the button's border and the label.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.AbstractButton.getMargin()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回按钮边框和标签之间的空白。
 
@return 一个指定按钮边框和标签之间的空白的 <code>Insets</code> 对象
@see #setMargin

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.AbstractButton.getIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回默认图标。
@return 默认 <code>Icon</code>
@see #setIcon

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setIcon(Icon defaultIcon)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置按钮的默认图标。如果没有显式地设置按下的图标，则此图标还被用作&ldquo;按下&rdquo;和&ldquo;禁用&rdquo;图标。

@param defaultIcon 用作默认图像的图标
@see #getIcon
@see #setPressedIcon
@beaninfo bound:true attribute: visualUpdate true description:The button's default icon

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.AbstractButton.getPressedIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回按钮的按下图标。
@return <code>pressedIcon</code> 属性
@see #setPressedIcon

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setPressedIcon(Icon pressedIcon)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置按钮的按下图标。
@param pressedIcon 用作&ldquo;按下&rdquo;图像的图标
@see #getPressedIcon
@beaninfo bound:true attribute: visualUpdate true description: The pressed icon for the button.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.AbstractButton.getSelectedIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回按钮的选择图标。
@return <code>selectedIcon</code> 属性
@see #setSelectedIcon

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setSelectedIcon(Icon selectedIcon)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置按钮的选择图标。
@param selectedIcon 用作&ldquo;选择&rdquo;图像的图标
@see #getSelectedIcon
@beaninfo bound:true attribute: visualUpdate true description: The selected icon for the button.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.AbstractButton.getRolloverIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回按钮的翻转图标。
@return <code>rolloverIcon</code> 属性
@see #setRolloverIcon

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setRolloverIcon(Icon rolloverIcon)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置按钮的翻转图标。
@param rolloverIcon 用作&ldquo;翻转&rdquo;图像的图标
@see #getRolloverIcon
@beaninfo bound:true attribute: visualUpdate true description: The rollover icon for the button.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.AbstractButton.getRolloverSelectedIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回按钮的翻转选定图标。
@return <code>rolloverSelectedIcon</code> 属性
@see #setRolloverSelectedIcon

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setRolloverSelectedIcon(Icon rolloverSelectedIcon)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置按钮的翻转选择图标。
@param rolloverSelectedIcon 用作&ldquo;选择翻转&rdquo;图像的图标
@see #getRolloverSelectedIcon
@beaninfo bound:true attribute: visualUpdate true description: The rollover selected icon for the button.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.AbstractButton.getDisabledIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回禁用按钮时按钮使用的图标。如果没有设置禁用图标，则此方法将调用转发给外观，以构造适当的禁用 Icon。
 <p>
一些外观上可能没有呈现禁用图标，在这种情况下，它们将忽略此图标。

@return <code>disabledIcon</code> 属性
@see #getPressedIcon
@see #setDisabledIcon
@see javax.swing.LookAndFeel#getDisabledIcon

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setDisabledIcon(Icon disabledIcon)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置按钮的禁用图标。
@param disabledIcon 用作禁用图像的图标
@see #getDisabledIcon
@beaninfo bound:true attribute: visualUpdate true description: The disabled icon for the button.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.AbstractButton.getDisabledSelectedIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回禁用并选择按钮时按钮使用的图标。如果没有设置禁用选择图标，则将调用转发给 LookAndFeel，以从选择图标中（如果已设置）构造适当的禁用图标；否则将调用转发给 <code>getDisabledIcon()</code>。
 <p>
一些外观上可能没有呈现禁用选择 Icon，在这种情况下，它们将忽略此图标。

@return <code>disabledSelectedIcon</code> 属性
@see #getDisabledIcon
@see #setDisabledSelectedIcon
@see javax.swing.LookAndFeel#getDisabledSelectedIcon

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setDisabledSelectedIcon(Icon disabledSelectedIcon)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置按钮的禁用选择图标。
@param disabledSelectedIcon 用作禁用选择图像的图标
@see #getDisabledSelectedIcon
@beaninfo bound:true attribute: visualUpdate true description: The disabled selection icon for the button.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.AbstractButton.getVerticalAlignment()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回文本和图标的垂直对齐方式。

@return <code>verticalAlignment</code> 属性，它是以下值之一： 
 <ul>
 <li>{@code SwingConstants.CENTER}（默认值）
 <li>{@code SwingConstants.TOP}
 <li>{@code SwingConstants.BOTTOM}
 </ul>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setVerticalAlignment(int alignment)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置图标和文本的垂直对齐方式。
@param alignment  它是以下值之一：
 <ul>
 <li>{@code SwingConstants.CENTER}（默认值）
 <li>{@code SwingConstants.TOP}
 <li>{@code SwingConstants.BOTTOM}
 </ul>
@throws IllegalArgumentException 如果对齐方式不是上面列出的合法值之一
@beaninfo bound:true enum: TOP  SwingConstants.TOP CENTER SwingConstants.CENTER BOTTOM  SwingConstants.BOTTOM attribute: visualUpdate true description:图标和文本的垂直对齐方式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.AbstractButton.getHorizontalAlignment()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回图标和文本的水平对齐方式。{@code AbstractButton} 的默认对齐方式为 {@code SwingConstants.CENTER}，但子类（如 {@code JCheckBox}）可以使用不同的默认对齐方式。 

@return <code>horizontalAlignment</code> 属性，它是以下值之一：
 <ul>
   <li>{@code SwingConstants.RIGHT}
   <li>{@code SwingConstants.LEFT}
   <li>{@code SwingConstants.CENTER}
   <li>{@code SwingConstants.LEADING}
   <li>{@code SwingConstants.TRAILING}
 </ul>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setHorizontalAlignment(int alignment)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置图标和文本的水平对齐方式。{@code AbstractButton} 的默认对齐方式为 {@code SwingConstants.CENTER}，但子类（如 {@code JCheckBox}）可以使用不同的默认对齐方式。 

@param alignment  对齐方式的值，它是以下值之一：
 <ul>
   <li>{@code SwingConstants.RIGHT}
   <li>{@code SwingConstants.LEFT}
   <li>{@code SwingConstants.CENTER}
   <li>{@code SwingConstants.LEADING}
   <li>{@code SwingConstants.TRAILING}
 </ul>
@throws IllegalArgumentException 如果对齐方式不是有效值之一
@beaninfo bound:true enum: LEFT     SwingConstants.LEFT CENTER   SwingConstants.CENTER RIGHT    SwingConstants.RIGHT LEADING  SwingConstants.LEADING TRAILING SwingConstants.TRAILING attribute: visualUpdate true description:图标和文本的水平对齐方式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.AbstractButton.getVerticalTextPosition()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回文本相对于图标的垂直位置。
@return <code>verticalTextPosition</code> 属性，它是以下值之一：
 <ul>
 <li>{@code SwingConstants.CENTER}（默认值）
 <li>{@code SwingConstants.TOP}
 <li>{@code SwingConstants.BOTTOM}
 </ul>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setVerticalTextPosition(int textPosition)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置文本相对于图标的垂直位置。
@param textPosition  它是以下值之一：
 <ul>
 <li>{@code SwingConstants.CENTER}（默认值）
 <li>{@code SwingConstants.TOP}
 <li>{@code SwingConstants.BOTTOM}
 </ul>

@beaninfo bound:true enum: TOP    SwingConstants.TOP CENTER SwingConstants.CENTER BOTTOM SwingConstants.BOTTOM attribute: visualUpdate true description:文本相对于图标的垂直位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.AbstractButton.getHorizontalTextPosition()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回文本相对于图标的水平位置。
@return <code>horizontalTextPosition</code> 属性，它是以下值之一：
 <ul>
 <li>{@code SwingConstants.RIGHT}
 <li>{@code SwingConstants.LEFT}
 <li>{@code SwingConstants.CENTER}
 <li>{@code SwingConstants.LEADING}
 <li>{@code SwingConstants.TRAILING}（默认值）
 </ul>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setHorizontalTextPosition(int textPosition)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置文本相对于图标的水平位置。
@param textPosition  它是以下值之一：
 <ul>
 <li>{@code SwingConstants.RIGHT}
 <li>{@code SwingConstants.LEFT}
 <li>{@code SwingConstants.CENTER}
 <li>{@code SwingConstants.LEADING}
 <li>{@code SwingConstants.TRAILING}（默认值）
 </ul>
@exception IllegalArgumentException 如果 <code>textPosition</code> 不是上面列出的合法值之一
@beaninfo bound:true enum: LEFT     SwingConstants.LEFT CENTER   SwingConstants.CENTER RIGHT    SwingConstants.RIGHT LEADING  SwingConstants.LEADING TRAILING SwingConstants.TRAILING attribute: visualUpdate true description:文本相对于图标的水平位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.AbstractButton.getIconTextGap()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此按钮中显示的文本与图标之间的间隔量。

@return 等于文本与图标之间的像素数的 int 值。
@since 1.4
@see #setIconTextGap

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setIconTextGap(int iconTextGap)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果图标和文本的属性都已设置，则此属性定义图标和文本之间的间隔。  
 <p>
此属性的默认值为 4 个像素。
 <p>
这是一个 JavaBeans 绑定属性。
 
@since 1.4
@see #getIconTextGap
@beaninfo bound:true attribute: visualUpdate true description: If both the icon and text properties are set, this property defines the space between them.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.AbstractButton.checkHorizontalKey(int key, String exception)
<!-- END KEY -->
<!-- BEGIN DATA -->
验证 {@code key} 参数是否为 {@code horizontalAlignment} 和 {@code horizontalTextPosition} 属性的合法值。有效值有：
 <ul>
   <li>{@code SwingConstants.RIGHT}
   <li>{@code SwingConstants.LEFT}
   <li>{@code SwingConstants.CENTER}
   <li>{@code SwingConstants.LEADING}
   <li>{@code SwingConstants.TRAILING}
 </ul>

@param key 要检查的属性值
@param exception {@code IllegalArgumentException} 中要使用的消息，无效值时抛出
@exception IllegalArgumentException 如果 key 不是上面列出的合法值之一
@see #setHorizontalTextPosition
@see #setHorizontalAlignment

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.AbstractButton.checkVerticalKey(int key, String exception)
<!-- END KEY -->
<!-- BEGIN DATA -->
 验证 {@code key} 参数是否为垂直属性的合法值。有效值有：
 <ul>
   <li>{@code SwingConstants.CENTER}
   <li>{@code SwingConstants.TOP}
   <li>{@code SwingConstants.BOTTOM}
 </ul>

@param key 要检查的属性值
@param exception {@code IllegalArgumentException} 中要使用的消息，无效值时抛出
@exception IllegalArgumentException 如果 key 不是上面列出的合法值之一

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.removeNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setActionCommand(String actionCommand)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此按钮的动作命令。
@param actionCommand 此按钮的动作命令

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.AbstractButton.getActionCommand()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此按钮的动作命令。
@return 此按钮的动作命令

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setAction(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>Action</code>。新 <code>Action</code> 将替换所有以前设置的 <code>Action</code>，但不影响单独使用 <code>addActionListener</code> 添加的 <code>ActionListener</code>。如果 <code>Action</code> 已经是按钮的已注册 <code>ActionListener</code>，则它不需要重新注册。
 <p>
设置 <code>Action</code> 导致<a href="Action.html#buttonActions">支持 <code>Action</code> 的 Swing 组件</a>中描述的所有属性立即更改。随后，按钮的属性根据 <code>Action</code> 的属性的更改进行自动更新。
 <p>
 此方法可以使用三个其他方法设置并帮助跟踪 <code>Action</code> 的属性值。它使用 <code>configurePropertiesFromAction</code> 方法可立即更改按钮的属性。要跟踪 <code>Action</code> 的属性值中的更改，此方法应注册 <code>createActionPropertyChangeListener</code> 返回的 <code>PropertyChangeListener</code>。{@code Action} 中的属性更改时，默认 {@code PropertyChangeListener} 调用 {@code actionPropertyChanged} 方法。

@param a <code>AbstractButton</code> 的 <code>Action</code>，或为 <code>null</code>
@since 1.3
@see Action
@see #getAction
@see #configurePropertiesFromAction
@see #createActionPropertyChangeListener
@see #actionPropertyChanged 
@beaninfo bound:true attribute: visualUpdate true description: the Action instance connected with this ActionEvent source

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Action javax.swing.AbstractButton.getAction()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前为此 <code>ActionEvent</code> 源设置的 <code>Action</code>，如果没有设置任何 <code>Action</code>，则返回 <code>null</code>。

@return 此 <code>ActionEvent</code> 源的 <code>Action</code>，或 <code>null</code>
@since 1.3
@see Action
@see #setAction

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.AbstractButton.configurePropertiesFromAction(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 在此按钮上设置属性以匹配指定 <code>Action</code> 中的属性。有关关于设置了哪些属性的更多信息，请参阅<a href="Action.html#buttonActions">支持 <code>Action</code> 的 Swing 组件</a>。 

@param a 从中获取属性的 <code>Action</code>，或为 <code>null</code>
@since 1.3
@see Action
@see #setAction

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.AbstractButton.actionPropertyChanged(Action action, String propertyName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 更新按钮的状态以响应相关的操作中的属性更改。从 {@code createActionPropertyChangeListener} 返回的 {@code PropertyChangeListener} 中调用此方法。子类通常不需要调用此方法。支持其他 {@code Action} 属性的子类应该重写此方法以及 {@code configurePropertiesFromAction}。
 <p>
 有关此方法设置的属性的列表，请参阅<a href="Action.html#buttonActions">支持 <code>Action</code> 的 Swing 组件</a>处的表。

 @param action 与此按钮关联的 <code>Action</code> 
 @param propertyName 已更改属性的名称
 @since 1.6
 @see Action
 @see #configurePropertiesFromAction

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeListener javax.swing.AbstractButton.createActionPropertyChangeListener(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回 <code>PropertyChangeListener</code>，它负责侦听指定 <code>Action</code> 的更改以及更新适当的属性。
 <p>
 <b>警告：</b>如果为此类创建子类，则不要创建匿名内部类。否则，按钮的生命周期将依赖于 <code>Action</code> 的生命周期。

 @param a 按钮的操作
 @since 1.3
 @see <a href="#actions">Actions</a>
 @see Action
 @see #setAction

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.AbstractButton.isBorderPainted()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>borderPainted</code> 属性。

@return <code>borderPainted</code> 属性的值
@see #setBorderPainted

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setBorderPainted(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>borderPainted</code> 属性。如果该属性为 <code>true</code> 并且按钮有边框，则绘制该边框。<code>borderPainted</code> 属性的默认值为 <code>true</code>。

@param b 如果为 true 并且边框属性不为 <code>null</code>，则绘制该边框
@see #isBorderPainted
@beaninfo bound:true attribute: visualUpdate true description: Whether the border should be painted.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.AbstractButton.paintBorder(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>BorderPainted</code> 属性为 true 并且按钮有边框，则绘制该按钮边框。
@param g 在其中进行绘制的 <code>Graphics</code> 环境
 
@see #paint
@see #setBorder

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.AbstractButton.isFocusPainted()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>paintFocus</code> 属性。

@return <code>paintFocus</code> 属性
@see #setFocusPainted

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setFocusPainted(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>paintFocus</code> 属性，对于要绘制的焦点状态，该属性必须为 <code>true</code>。<code>paintFocus</code> 属性的默认值为 <code>true</code>。一些外观没有绘制焦点状态；它们将忽略此属性。

@param b 如果为 <code>true</code>，则应绘制焦点状态
@see #isFocusPainted
@beaninfo bound:true attribute: visualUpdate true description: Whether focus should be painted

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.AbstractButton.isContentAreaFilled()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>contentAreaFilled</code> 属性。

@return <code>contentAreaFilled</code> 属性
@see #setContentAreaFilled

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setContentAreaFilled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>contentAreaFilled</code> 属性。如果该属性为 <code>true</code>，则按钮将绘制内容区域。如果希望有一个透明的按钮，比如只是一个图标的按钮，那么应该将此属性设置为 <code>false</code>。不要调用 <code>setOpaque(false)</code>。<code>contentAreaFilled</code> 属性的默认值为 <code>true</code>。
 <p>
此方法可能造成组件的不透明属性发生更改。
 <p>
调用此方法的具体行为在各个组件和各个 L&amp;F 之间是各不相同的。

@param b 如果为 true，则应该填充内容；如果为 false，则不填充内容区域
@see #isContentAreaFilled
@see #setOpaque
@beaninfo bound:true attribute: visualUpdate true description: Whether the button should paint the content area or leave it transparent.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.AbstractButton.isRolloverEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>rolloverEnabled</code> 属性。

@return <code>rolloverEnabled</code> 属性的值
@see #setRolloverEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setRolloverEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>rolloverEnabled</code> 属性，若需要翻转效果，该属性必须为 <code>true</code>。<code>rolloverEnabled</code> 属性的默认值为 <code>false</code>。一些外观也许不实现翻转效果；它们将忽略此属性。

@param b 如果为 <code>true</code>，则应绘制翻转效果
@see #isRolloverEnabled
@beaninfo bound:true attribute: visualUpdate true description: Whether rollover effects should be enabled.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.AbstractButton.getMnemonic()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前模型中的键盘助记符。
@return 模型中的键盘助记符

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setMnemonic(int mnemonic)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置当前模型上的键盘助记符。助记符是某种键，它与外观的无鼠标修饰符（通常是 Alt）组合时（如果焦点包含在此按钮祖先窗口中的某个地方）将激活此按钮。  
 <p>
一个助记符必须对应键盘上的一个键，并且应该使用 <code>java.awt.event.KeyEvent</code> 中定义的 <code>VK_XXX</code> 键代码之一指定。助记符是不区分大小写的，所以具有相应键代码的键事件将造成按钮被激活，不管是否按下 Shift 修饰符。
 <p>
如果在按钮的标签字符串中发现由助记符定义的字符，则第一个出现的助记符将是带下划线的，以向用户指示该助记符。  

@param mnemonic 表示助记符的键代码
@see     java.awt.event.KeyEvent
@see     #setDisplayedMnemonicIndex

 @beaninfo
        bound: true
    attribute: visualUpdate true
  description: the keyboard character mnemonic

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setMnemonic(char mnemonic)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法现在已废弃，请使用 <code>setMnemonic(int)</code> 来设置按钮的助记符。此方法仅设计用于处理 'a' 到 'z' 或 'A' 到 'Z'之间的字符值。

@param mnemonic 指定助记符值的字符
@see #setMnemonic(int)
@beaninfo bound:true attribute: visualUpdate true description: the keyboard character mnemonic

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setDisplayedMnemonicIndex(int index) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
提供关于应该装饰文本中哪一个字符来表示助记符的外观提示。并不是所有的外观都能支持此方法。值 -1 指示没有助记符（助记符字符没有包含在字符串中），或者开发人员不希望显示助记符。
 <p>
与助记符相关的属性发生更改时（比如助记符本身、文本……），此索引值也被更改。如果不希望默认字符带下划线，那么只能不断地调用此方法。例如，如果文本 'Save As' 带有一个助记符 'a'，您想装饰 'A'（比如装饰成 'Save <u>A</u>s'），那么您必须在调用 <code>setMnemonic(KeyEvent.VK_A)</code> 之后调用 <code>setDisplayedMnemonicIndex(5)</code>。

@since 1.4
@param index String 中的索引，指示要加下划线的字符
@exception IllegalArgumentException 如果 <code>index</code> &gt;= 文本的长度，或者 &lt; -1，则抛出该异常
@see #getDisplayedMnemonicIndex

@beaninfo
        bound: true
    attribute: visualUpdate true
  description: the index into the String to draw the keyboard character
               mnemonic at

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.AbstractButton.getDisplayedMnemonicIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
以索引形式返回字符，它表示助记符字符，外观应该对其提供装饰。

@since 1.4
@return 表示助记符字符的索引
@see #setDisplayedMnemonicIndex

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setMultiClickThreshhold(long threshhold)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置对按钮按下鼠标到生成相应动作事件所需的时间量（以毫秒为单位）。在最初按下鼠标（并生成动作事件）之后，发生在小于 threshhold 的时间间隔中的所有后续鼠标按下事件都将被忽略，并且不生成相应的动作事件。默认情况下，threshhold 为 0，这意味着对于每个鼠标按下操作，都将触发动作事件，无论单击鼠标的速度有多快。在不需要此行为的按钮中（比如对话框中的 &quot;OK&quot; 按钮），应该将此 threshhold 设置为一个适当的正值。

@see #getMultiClickThreshhold
@param threshhold 按下鼠标到生成相应动作事件所需的时间量
@exception   IllegalArgumentException 如果 threshhold < 0
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.swing.AbstractButton.getMultiClickThreshhold()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取对按钮按下鼠标到生成相应动作事件所需的时间量（以毫秒为单位）。

@see #setMultiClickThreshhold
@return 按下鼠标到生成相应动作事件所需的时间量
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ButtonModel javax.swing.AbstractButton.getModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此按钮表示的模型。
@return <code>model</code> 属性
@see #setModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setModel(ButtonModel newModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此按钮表示的模型。
@param newModel 新的 <code>ButtonModel</code>
@see #getModel
@beaninfo bound:true description: Model that the Button uses.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.ButtonUI javax.swing.AbstractButton.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回呈现此组件的 L&amp;F 对象。
@return ButtonUI 对象
@see #setUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setUI(ButtonUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置呈现此组件的 L&amp;F 对象。
@param ui <code>ButtonUI</code> L&amp;F 对象
@see #getUI
 @beaninfo
        bound: true
       hidden: true
    attribute: visualUpdate true
  description: The UI object that implements the LookAndFeel.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
将 UI 属性重置为当前外观中的一个值。<code>AbstractButton</code> 的子类型应该重写此方法来更新 UI。例如，<code>JButton</code> 可以执行以下操作：
 <pre>
      setUI((ButtonUI)UIManager.getUI(
          &quot;ButtonUI&quot;, &quot;javax.swing.plaf.basic.BasicButtonUI&quot;, this));
 </pre>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.AbstractButton.addImpl(Component comp, Object constraints, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定组件添加到此容器的指定索引所在的位置上，有关此方法的完整描述，请参阅 {@link java.awt.Container#addImpl(Component, Object, int)}。

@param     comp 要添加的组件
@param     constraints 表示此组件的布局约束的对象
@param     index 容器列表中插入组件的位置，<code>-1</code> 表示添加到列表的末尾
@exception IllegalArgumentException 如果 <code>index</code> 无效
@exception IllegalArgumentException 如果将容器的父容器添加到该容器自身中
@exception IllegalArgumentException 如果将一个窗口添加到容器中
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setLayout(LayoutManager mgr)
<!-- END KEY -->
<!-- BEGIN DATA -->

为此容器设置布局管理器，有关此方法的完整描述，请参阅 {@link java.awt.Container#setLayout(LayoutManager)}。

@param mgr 指定的布局管理器
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.addChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
向按钮添加一个 <code>ChangeListener</code>。
@param l 要添加的侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.removeChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
从按钮中移除一个 ChangeListener。
@param l 要移除的侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.ChangeListener[] javax.swing.AbstractButton.getChangeListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回使用 addChangeListener() 添加到此 AbstractButton 中的所有 <code>ChangeListener</code> 组成的数组。

@return 添加的所有 <code>ChangeListener</code>，如果没有添加侦听器，则返回一个空数组
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.AbstractButton.fireStateChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有需要此事件类型的通知的已注册侦听器。以延迟方式创建事件实例。
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.addActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 <code>ActionListener</code> 添加到按钮中。
@param l 要添加的 <code>ActionListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.removeActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
从按钮中移除一个 <code>ActionListener</code>。如果侦听器是按钮当前设置的 <code>Action</code>，则将 <code>Action</code> 设置为 <code>null</code>。

@param l 要移除的侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ActionListener[] javax.swing.AbstractButton.getActionListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回使用 addActionListener() 添加到此 AbstractButton 的所有 <code>ActionListener</code> 组成的数组。

@return 添加的所有 <code>ActionListener</code>，如果没有添加侦听器，则返回一个空数组
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.ChangeListener javax.swing.AbstractButton.createChangeListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
想以不同的方式处理 <code>ChangeEvent</code> 的子类可以重写此方法，以返回另一个 <code>ChangeListener</code> 实现。

@return 新的 <code>ChangeListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.AbstractButton.fireActionPerformed(ActionEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有需要此事件类型的通知的已注册侦听器。使用 <code>event</code> 参数以延迟方式创建事件实例。

@param event  <code>ActionEvent</code> 对象
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.AbstractButton.fireItemStateChanged(ItemEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有需要此事件类型的通知的已注册侦听器。使用 <code>event</code> 参数以延迟方式创建事件实例。
 
@param event  <code>ItemEvent</code> 对象
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
启用（或禁用）按钮。
@param b  true 表示启用按钮，否则为 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.AbstractButton.getLabel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回标签文本。

@return 包含标签的 <code>String</code>
@deprecated - 由 <code>getText</code> 取代

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.setLabel(String label)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置标签文本。

@param label  包含文本的 <code>String</code>
@deprecated - 由 <code>setText(text)</code> 取代
@beaninfo bound:true description: Replace by setText(text)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.addItemListener(ItemListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 <code>ItemListener</code> 添加到 <code>checkbox</code> 中。
@param l 要添加的 <code>ItemListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractButton.removeItemListener(ItemListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
从按钮中移除一个 <code>ItemListener</code>。
@param l 要移除的 <code>ItemListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ItemListener[] javax.swing.AbstractButton.getItemListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回使用 addItemListener() 添加到此 AbstractButton 中的所有 <code>ItemListener</code> 组成的数组。

@return 添加的所有 <code>ItemListener</code>，如果没有添加侦听器，则返回一个空数组
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] javax.swing.AbstractButton.getSelectedObjects()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含标签的数组（长度为 1），如果没有选择按钮，则返回 <code>null</code>。

@return 包含 1 个 Object 的数组：按钮的文本，如果选择该项；否则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.AbstractButton.imageUpdate(Image img, int infoflags, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写的此方法在当前 <code>Icon</code> 的 <code>Image</code> 不等于传入的 <code>Image</code> <code>img</code> 时返回 false。

@param img  要比较的 <code>Image</code>
@param infoflags 更新图像时用于重绘按钮的标志，它确定将绘制多大的区域
@param x  x 坐标
@param y  y 坐标
@param w  宽度
@param h  高度
@see     java.awt.image.ImageObserver
@see     java.awt.Component#imageUpdate(java.awt.Image, int, int, int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.AbstractButton.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>AbstractButton</code> 的字符串表示形式。此方法仅在进行调试的时候使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。
 <P>
重写 <code>paramString</code> 来提供有关 JFC 组件的一些特定新方面的信息。
 
@return  此 <code>AbstractButton</code> 的字符串表示形式

<!-- END DATA -->
