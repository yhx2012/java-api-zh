<!-- BEGIN KEY -->
public class javax.swing.ImageIcon extends java.lang.Object implements javax.swing.Icon, java.io.Serializable, javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
一个 Icon 接口的实现，它根据 Image 绘制 Icon。可使用 MediaTracker 预载根据 URL、文件名或字节数组创建的图像，以监视该图像的加载状态。

 <p>
有关使用图像图标的更多信息和示例，请参阅 <em>The Java Tutorial</em> 中的 <a href="http://java.sun.com/docs/books/tutorial/uiswing/misc/icon.html">How to Use Icons</a> 一节。

 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。
 
@version 1.53 12/19/03
@author Jeff Dinkins
@author Lynn Monsanto

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.ImageIcon.AccessibleImageIcon javax.swing.ImageIcon.accessibleContext
<!-- END KEY -->
<!-- BEGIN DATA -->
--- 可访问性支持 ---

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ImageIcon(String filename, String description)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定的文件创建一个 ImageIcon。使用 MediaTracker 预载图像以监视图像的加载状态。
@param filename 包含图像的文件的名称
@param description 图像的简明文本描述
@see #ImageIcon(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ImageIcon(String filename)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定的文件创建一个 ImageIcon。使用 MediaTracker 预载图像以监视图像的加载状态。指定 String 可以是一个文件名或是一条文件路径。在指定一条路径时，可使用 Internet 标准正斜杠 (&quot;/&quot;) 作为分隔符。（该字符串被转换成一个 URL，而正斜杠适用于所有系统。）例如，指定：
 <pre>
    new ImageIcon(&quot;images/myImage.gif&quot;) </pre>
该描述被初始化为 <code>filename</code> 字符串。

@param filename 指定文件名或路径的 String
@see #getDescription

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ImageIcon(URL location, String description)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定的 URL 创建一个 ImageIcon。使用 MediaTracker 预载图像以监视图像的加载状态。
@param location 图像的 URL
@param description 图像的简明文本描述
@see #ImageIcon(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ImageIcon(URL location)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定的 URL 创建一个 ImageIcon。使用 MediaTracker 预载图像以监视图像的加载状态。图标的描述被初始化为 URL 的字符串表示形式。
@param location 图像的 URL
@see #getDescription

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ImageIcon(Image image, String description)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据图像创建一个 ImageIcon。
@param image 图像
@param description 图像的简明文本描述

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ImageIcon(Image image)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据图像对象创建一个 ImageIcon。如果图像有一个字符串形式的 &quot;comment&quot; 属性，则该字符串被用作此图标的描述。
@param image 图像
@see #getDescription
@see java.awt.Image#getProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ImageIcon(byte[] imageData, String description)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据字节数组创建一个 ImageIcon，这些字节读取自一个包含受支持图像格式（比如 GIF、JPEG 或从 1.3 版本开始的 PNG）的图像文件。通常，此数组是通过使用 Class.getResourceAsStream() 读取图像文件来创建的，但该字节数组也可以静态地存储在某个类中。

@param  imageData 一个像素数组，具有受 AWT Toolkit 支持的图像格式，比如 GIF、JPEG 或从 1.3 版本开始的 PNG
@param  description 图像的简明文本描述
@see    java.awt.Toolkit#createImage

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ImageIcon(byte[] imageData)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据字节数组创建一个 ImageIcon，这些字节读取自一个包含受支持图像格式（比如 GIF、JPEG 或从 1.3 版本开始的 PNG）的图像文件。通常，此数组是通过使用 Class.getResourceAsStream() 读取一幅图像来创建的，但该字节数组也可以静态地存储在某个类中。如果得到的图像有一个字符串形式的 &quot;comment&quot; 属性，则该字符串被用作此图标的描述。

@param  imageData 一个像素数组，具有受 AWT Toolkit 支持的图像格式，比如 GIF、JPEG 或从 1.3 版本开始的 PNG
@see    java.awt.Toolkit#createImage
@see #getDescription
@see java.awt.Image#getProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ImageIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个未初始化的图像图标。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.ImageIcon.loadImage(Image image)
<!-- END KEY -->
<!-- BEGIN DATA -->
加载图像，并且只在图像已加载时返回。
@param      image   图像

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ImageIcon.getImageLoadStatus()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回图像加载操作的状态。
@return 由 java.awt.MediaTracker 定义的加载状态
@see java.awt.MediaTracker#ABORTED
@see java.awt.MediaTracker#ERRORED
@see java.awt.MediaTracker#COMPLETE

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Image javax.swing.ImageIcon.getImage()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此图标的 <code>Image</code>。
@return 此 <code>ImageIcon</code> 的 <code>Image</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ImageIcon.setImage(Image image)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置由此图标显示的图像。
@param      image   图像

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.ImageIcon.getDescription()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得图像的描述。此描述应该是该对象的简明文本描述。例如，可以将它呈现给盲人用户，为他们提供该图像用途的指示。该描述可以为 null。

@return     图像的简明文本描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ImageIcon.setDescription(String description)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置图像的描述。此描述应该是该对象的简明文本描述。例如，可以将它呈现给盲人用户，为他们提供该图像用途的指示。
@param description     图像的简明文本描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.ImageIcon.paintIcon(Component c, Graphics g, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制图标。图标的左上角在图形上下文 <code>g</code> 的坐标空间中的点 (<code>x</code>, <code>y</code>) 处绘制。如果此图标没有图像观察者，则此方法使用 <code>c</code> 组件作为观察者。

@param c 用作观察者的组件，如果此图标没有图像观察者
@param g 图形上下文
@param x 图标左上角的 X 坐标
@param y 图标左上角的 Y 坐标

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ImageIcon.getIconWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得图标的宽度。

@return 此图标的宽度，以像素为单位

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ImageIcon.getIconHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得图标的高度。

@return 此图标的高度，以像素为单位

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ImageIcon.setImageObserver(ImageObserver observer)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置图像的图像观察者。如果 ImageIcon 包含一个动画 GIF，则设置此属性，而观察者获得更新其显示的通知。例如：
 <pre>
     icon = new ImageIcon(...)
     button.setIcon(icon);
     icon.setImageObserver(button);
 </pre>

@param observer 图像观察者

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.ImageObserver javax.swing.ImageIcon.getImageObserver()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回图像的图像观察者。

@return 图像观察者，它可以为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.ImageIcon.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此图像的字符串表示形式。

@return 表示此图像的字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.ImageIcon.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->

获得与此 ImageIcon 关联的 AccessibleContext。对于图像图标，AccessibleContext 采用 AccessibleImageIcon 的形式。如有必要，可创建一个新的 AccessibleImageIcon 实例。

@return 一个 AccessibleImageIcon，它将充当此 ImageIcon 的 AccessibleContext
@beaninfo expert: true description: The AccessibleContext associated with this ImageIcon.
@since 1.3

<!-- END DATA -->
