<!-- BEGIN KEY -->
public class javax.swing.SizeRequirements extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
为方便布局管理器，计算组件的有关大小和位置信息。大小和位置的所有计算方法都是将 SizeRequirements 数组作为参数的类方法。SizeRequirements 类支持两种布局类型：

 <blockquote>
 <dl>
<dt> 平铺
<dd> 组件按端到端方式放置，起点可以为坐标 0 （最左或最顶端位置）或所分配区域的末尾对应的坐标（最右或最底端位置）。

<dt> 对齐
<dd> 组件按每个组件的 X 或 Y 对齐值指定的方式对齐。
 </dl>
 </blockquote>

 <p>

每个 SizeRequirements 对象包含了有关单个组件或一组组件的宽度（和 X 对齐方式）或高度（和 Y 对齐方式）的信息：

 <blockquote>
 <dl>
 <dt> <code>minimum</code>
<dd> 组件或组件组的最小合理宽度/高度，以像素为单位。

 <dt> <code>preferred</code>
<dd> 组件或组件组的自然宽度/高度，以像素为单位。

 <dt> <code>maximum</code>
<dd> 组件或组件组的最大合理宽度/高度，以像素为单位。

 <dt> <code>alignment</code>
<dd> 组件或组件组的 X/Y 对齐方式。
 </dl>
 </blockquote>
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@see Component#getMinimumSize
@see Component#getPreferredSize
@see Component#getMaximumSize
@see Component#getAlignmentX
@see Component#getAlignmentY

@version 1.32 12/19/03
@author Timothy Prinzing

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.SizeRequirements.minimum
<!-- END KEY -->
<!-- BEGIN DATA -->
要求的最小大小。对于组件 <code>comp</code>，该大小应该等于 <code>comp.getMinimumSize().width</code> 或 <code>comp.getMinimumSize().height</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.SizeRequirements.preferred
<!-- END KEY -->
<!-- BEGIN DATA -->
首选（自然）大小。对于组件 <code>comp</code>，该大小应该等于 <code>comp.getPreferredSize().width</code> 或 <code>comp.getPreferredSize().height</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.SizeRequirements.maximum
<!-- END KEY -->
<!-- BEGIN DATA -->
允许的最大大小。对于组件 <code>comp</code>，该大小应该等于 <code>comp.getMaximumSize().width</code> 或 <code>comp.getMaximumSize().height</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.SizeRequirements.alignment
<!-- END KEY -->
<!-- BEGIN DATA -->
对齐方式，指定为介于 0.0 和 1.0 之间的值，包含这两个边界值。要指定居中，对齐方式应为 0.5。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.SizeRequirements()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 SizeRequirements 对象，其最小、首选和最大大小设置为零，对齐方式值为 0.5（居中）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.SizeRequirements(int min, int pref, int max, float a)
<!-- END KEY -->
<!-- BEGIN DATA -->
用指定的最小、首选和最大大小以及指定的对齐方式创建 SizeRequirements 对象。

@param min 最小大小 &gt;= 0
@param pref 首选大小 &gt;= 0
@param max 最大大小 &gt;= 0
@param a 对齐方式 &gt;= 0.0f &amp;&amp; &lt;= 1.0f

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.SizeRequirements.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个描述最小、首选和最大大小以及对齐方式要求的字符串。

@return 字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.SizeRequirements javax.swing.SizeRequirements.getTiledSizeRequirements(javax.swing.SizeRequirements[] children)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定端到端放置一组组件需要占用的总空间。集合中每个组件的要求通过传入的 SizeRequirements 数组中的一个条目表示。返回的 SizeRequirements 对象的对齐方式为 0.5 （居中）。所需空间永远不会大于 Integer.MAX_VALUE。

@param children  一组组件的空间要求。该向量可以是零长度，它将导致传回一个默认的 SizeRequirements 对象实例。
@return  总空间要求。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.SizeRequirements javax.swing.SizeRequirements.getAlignedSizeRequirements(javax.swing.SizeRequirements[] children)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定对齐一组组件所需的总空间。集合中每个组件的要求通过传入的 SizeRequirements 数组中的一个条目表示。所需总空间永远不会大于 Integer.MAX_VALUE。

@param children  所需的子级集合。如果长度为零，返回的结果将是一个默认的 SizeRequirements 实例。
@return  总空间要求。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SizeRequirements.calculateTiledPositions(int allocated, SizeRequirements total, javax.swing.SizeRequirements[] children, int[] offsets, int[] spans)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一组表示如何对一组组件进行端到端布局的偏移量/区域对。此方法需要您指定要分配的总空间量、要放置的每个组件的大小要求（指定为 SizeRequirements 数组）以及组件集合的总大小要求。通过调用 getTiledSizeRequirements 方法可获得总大小要求。组件将按正向平铺，偏移量从 0 递增。

@param allocated 要分配的总区域 &gt;= 0。
@param total     请求的子级总数。该参数是可选的，可以为 null。
@param children  每个组件的大小要求。
@param offsets   每个子级相对于 0 的偏移量，用于分配区域（确定区域的放置）。
@param spans     为每个子级分配的区域，它们构成了总目标区域。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SizeRequirements.calculateTiledPositions(int allocated, SizeRequirements total, javax.swing.SizeRequirements[] children, int[] offsets, int[] spans, boolean forward)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一组表示如何对一组组件进行端到端布局的偏移量/区域对。此方法需要您指定要分配的总空间量、要放置的每个组件的大小要求（指定为一组 SizeRequirements）以及组件集合的总大小要求。通过调用 getTiledSizeRequirements 方法可获得总大小要求。

该方法还需要使用一个标志，用来指示组件应该以正向（偏移量从 0 递增）还是反向（偏移量从已分配空间末尾递减）平铺。正向表示组件从左到右或从顶部到底部平铺。反向表示组件从右到左或从底部到顶部平铺。

@param allocated 要分配的总区域 &gt;= 0。
@param total     请求的子级总数。该参数是可选的，可以为 null。
@param children  每个组件的大小要求。
@param offsets   每个子级相对于 0 的偏移量，用于分配区域（确定区域的放置）。
@param spans     为每个子级分配的区域，它们构成了总目标区域。
@param forward   如果为 true，按从 0 递增的偏移量平铺；如果为 false，按从已分配空间末尾递减的偏移量平铺。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SizeRequirements.calculateAlignedPositions(int allocated, SizeRequirements total, javax.swing.SizeRequirements[] children, int[] offsets, int[] spans)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一组偏移量/区域对，指定如何按照指定对齐方式对一组组件进行布局。得到的区域分配将互相重叠，每个组件尽可能地放到给定的总分配中。此方法需要您指定要分配的总空间量、要放置的每个组件的大小要求（指定为一组 SizeRequirements）以及组件集合的总大小要求（实际上只使用其中的对齐字段）。通过调用 getAlignedSizeRequirements 可获得总大小要求。

将执行正常对齐方式，对齐方式值为 0.0f（表示组件的左/上边界）。

@param allocated 要分配的总区域 &gt;= 0。
@param total     请求的子级总数。
@param children  每个组件的大小要求。
@param offsets   每个子级相对于 0 的偏移量，用于分配区域（确定区域的放置）。
@param spans     为每个子级分配的区域，它们构成了总目标区域。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SizeRequirements.calculateAlignedPositions(int allocated, SizeRequirements total, javax.swing.SizeRequirements[] children, int[] offsets, int[] spans, boolean normal)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一组偏移量/区域对，指定如何按指定对齐方式对一组组件进行布局。得到的区域分配将互相重叠，每个组件尽可能地放到给定的总分配中。此方法需要您指定要分配的总空间量、要放置的每个组件的大小要求（指定为一组 SizeRequirements）以及组件集合的总大小要求（实际上只使用其中的对齐字段）。调用 getAlignedSizeRequirements 可获得总大小要求。

此方法还需要使用一个标志，用来指示应该执行正常或反向对齐。正常对齐方式下，值 0.0f 表示要对齐的组件的左/顶端边界。反向对齐方式下，0.0f 表示右/底端边界。

@param allocated 要分配的总区域 &gt;= 0。
@param total     请求的子级总数。
@param children  每个组件的大小要求。
@param offsets   区域分配位置每个子级相对于 0 的偏移（确定区域的放置）。
@param spans     为每个子级分配的区域，它们构成了总目标区域。
@param normal    值为 true 时，对齐方式值 0.0f 表示左/顶端；值为 false 时，它表示右/底端。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int[] javax.swing.SizeRequirements.adjustSizes(int delta, javax.swing.SizeRequirements[] children)
<!-- END KEY -->
<!-- BEGIN DATA -->
按给定总量调整指定的大小数组。

@param delta   指定大小差异的 int
@param children  SizeRequirements 对象的数组
@return 包含每一项的最终大小的 int 数组

<!-- END DATA -->
