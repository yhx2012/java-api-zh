<!-- BEGIN KEY -->
public class javax.swing.undo.UndoManager extends javax.swing.undo.CompoundEdit implements javax.swing.event.UndoableEditListener
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@code UndoManager} 管理 {@code UndoableEdit} 列表，提供撤消或恢复适当编辑的方法。有两个方法可以将编辑添加到 <code>UndoManager</code>。直接使用 <code>addEdit</code> 方法添加编辑，或将 <code>UndoManager</code> 添加到支持 <code>UndoableEditListener</code> 的 bean。下面的例子创建了一个 <code>UndoManager</code> 并将它作为 <code>UndoableEditListener</code> 添加到 <code>JTextField</code>：
 <pre>
   UndoManager undoManager = new UndoManager();
   JTextField tf = ...;
   tf.getDocument().addUndoableEditListener(undoManager);
 </pre>
 <p>
 <code>UndoManager</code> 维护编辑的有序列表以及该列表中下一个编辑的索引。下一个编辑的索引为当前编辑列表的大小，如果已经调用了 <code>undo</code>，则该索引对应于已撤消的最后一个有效编辑的索引。调用 <code>undo</code> 时，所有的编辑（从下一个编辑的索引到最后一个有效编辑）都将以相反的顺序被撤消。例如，考虑由以下编辑组成的 <code>UndoManager</code> ：<b>A</b> <i>b</i> <i>c</i> <b>D</b>。粗体大写字母的编辑为有效编辑，斜体小写字母的编辑为无效编辑。
 <p>
 <a name="figure1"></a>
 <table border=0>
 <tr><td>
     <img src="doc-files/UndoManager-1.gif">
 <tr><td align=center>Figure 1
 </table>
 <p>
 如 <a href="#figure1">figure 1</a> 中所示，如果刚刚添加了 <b>D</b>，则下一个编辑的索引为 4。调用 <code>undo</code> 导致在 <b>D</b> 上调用 <code>undo</code> 并将下一个编辑的索引设置为 3（编辑 <i>c</i>），如下图所示。
 <p>
 <a name="figure2"></a>
 <table border=0>
 <tr><td>
     <img src="doc-files/UndoManager-2.gif">
 <tr><td align=center>Figure 2
 </table>
 <p>
 最后一个有效编辑为 <b>A</b>，所以调用 <code>undo</code> 会在 <i>c</i>、<i>b</i>、和<b>A</b> 上以该顺序再次调用 <code>undo</code>，并将下一个编辑的索引设置为 0，如下图所示。
 <p>
 <a name="figure3"></a>
 <table border=0>
 <tr><td>
     <img src="doc-files/UndoManager-3.gif">
 <tr><td align=center>Figure 3
 </table>
 <p>
 调用 <code>redo</code> 会导致在下一个编辑的索引和下一个有效编辑（或列表结尾位置）之间的所有编辑上调用 <code>redo</code>。继续上一个例子，如果调用了 <code>redo</code>，则将依次在 <b>A</b>、<i>b</i> 和 <i>c</i> 上调用 <code>redo</code>。此外，下一个编辑的索引被设置为 3 （如 <a href="#figure2">figure 2</a> 中所示）。
 <p>
 将一个编辑添加到 <code>UndoManager</code> 会移除从下一个编辑的索引到列表结尾位置的所有编辑。继续上一个例子，如果添加一个新的编辑 <i>e</i>，则从列表中移除编辑 <b>D</b> （在它上面调用 <code>die</code> 之后）。如果下一个编辑没有合并（<code><i>c</i>.addEdit(<i>e</i>)</code> 返回 true）或替换（<code><i>e</i>.replaceEdit(<i>c</i>)</code> 返回 true）<i>c</i>，则将新的编辑添加到 <i>c</i> 的后面，如下图所示。
 <p>
 <a name="figure4"></a>
 <table border=0>
 <tr><td>
     <img src="doc-files/UndoManager-4.gif">
 <tr><td align=center>Figure 4
 </table>
 <p>
 在 <code>UndoManager</code> 上调用了 <code>end</code> 后，超类行为将用于所有 <code>UndoableEdit</code> 方法。有关其行为的详细信息，请参阅 <code>CompoundEdit</code>。
 <p>
 不同于 Swing 的其他类，此类是线程安全的。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@author Ray Ryan
@version 1.35, 12/19/03

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.undo.UndoManager()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 <code>UndoManager</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int javax.swing.undo.UndoManager.getLimit()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 {@code UndoManager} 保持的最大编辑数。小于 0 的值指示编辑数不受限制。

@return 此 {@code UndoManager} 保持的最大编辑数
@see #addEdit
@see #setLimit

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.undo.UndoManager.discardAllEdits()
<!-- END KEY -->
<!-- BEGIN DATA -->
清空撤消管理器，向进程中的每个编辑发送一个 <code>die</code> 消息。

@see AbstractUndoableEdit#die

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.undo.UndoManager.trimForLimit()
<!-- END KEY -->
<!-- BEGIN DATA -->
以下一个编辑的索引为中心，将已排队编辑的数量减少到限制的大小范围内。  

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.undo.UndoManager.trimEdits(int from, int to)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定范围内的编辑。对给定范围内的所有编辑（包括两端，以相反顺序）调用 <code>die</code>， 并从编辑列表中移除它们。如果 <code>from</code> &gt; <code>to</code>，则此方法没有任何效果。
 
@param from 要移除的最小索引
@param to 要移除的最大索引

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.undo.UndoManager.setLimit(int l)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 <code>UndoManager</code> 保持的最大编辑数。小于 0 的值指示编辑数不受限制。如果需要丢弃编辑以缩小限制，则将以添加编辑的相反顺序对其调用 <code>die</code>。默认值为 100。

@param l 新的限制
@throws RuntimeException 如果不再执行此 {@code UndoManager}（调用了 {@code end}）
@see #isInProgress
@see #end
@see #addEdit
@see #getLimit

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.undo.UndoableEdit javax.swing.undo.UndoManager.editToBeUndone()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果调用 <code>undo</code>，则返回下一个要撤消的有效编辑。如果没有要撤消的编辑，则此方法返回 <code>null</code>。

@return 下一个要撤消的有效编辑

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.undo.UndoableEdit javax.swing.undo.UndoManager.editToBeRedone()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果调用 <code>redo</code>，则返回下一个要恢复的有效编辑。如果没有要恢复的编辑，则此方法返回 <code>null</code>。

@return 下一个要恢复的有效编辑

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.undo.UndoManager.undoTo(UndoableEdit edit) throws javax.swing.undo.CannotUndoException
<!-- END KEY -->
<!-- BEGIN DATA -->
撤消从下一个编辑的索引到 <code>edit</code> 的所有更改，适当地更新下一个编辑的索引。

@throws CannotUndoException 如果其中一个编辑抛出 <code>CannotUndoException</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.undo.UndoManager.redoTo(UndoableEdit edit) throws javax.swing.undo.CannotRedoException
<!-- END KEY -->
<!-- BEGIN DATA -->
恢复从下一个编辑的索引到 <code>edit</code> 的所有更改，适当地更新下一个编辑的索引。

@throws CannotUndoException 如果其中一个编辑抛出 <code>CannotUndoException</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.undo.UndoManager.undoOrRedo() throws javax.swing.undo.CannotRedoException, javax.swing.undo.CannotUndoException
<!-- END KEY -->
<!-- BEGIN DATA -->
一个便捷方法，它调用 <code>undo</code> 或 <code>redo</code>。如果已撤消了所有编辑（下一个编辑的索引小于编辑列表的长度），则此方法调用 <code>redo</code>，否则调用 <code>undo</code>。

@see #canUndoOrRedo
@see #getUndoOrRedoPresentationName
@throws CannotUndoException 如果其中一个编辑抛出 <code>CannotUndoException</code>
@throws CannotRedoException 如果其中一个编辑抛出 <code>CannotRedoException</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean javax.swing.undo.UndoManager.canUndoOrRedo()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果可以调用 <code>undo</code> 或 <code>redo</code>，则返回 true。

@return 如果调用 <code>canUndoOrRedo</code> 有效，则返回 true
@see #undoOrRedo

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.undo.UndoManager.undo() throws javax.swing.undo.CannotUndoException
<!-- END KEY -->
<!-- BEGIN DATA -->
撤消适当的编辑。如果已调用了 <code>end</code>，则通过此方法调用超类，否则此方法对下一个编辑的索引和最后一个有效编辑之间的所有编辑调用 <code>undo</code>，适当地更新下一个编辑的索引。
 
@throws CannotUndoException 如果其中一个编辑抛出 <code>CannotUndoException</code> 或没有要撤消的编辑
@see CompoundEdit#end
@see #canUndo
@see #editToBeUndone

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean javax.swing.undo.UndoManager.canUndo()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果可以撤消编辑，则返回 true。如果已调用了 <code>end</code>，则此方法返回来自超类的值。否则，如果有要撤消的编辑（<code>editToBeUndone</code> 返回非 <code>null</code>），则此方法返回 true。

@return 如果有要撤消的编辑，则返回 true
@see CompoundEdit#canUndo
@see #editToBeUndone

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.undo.UndoManager.redo() throws javax.swing.undo.CannotRedoException
<!-- END KEY -->
<!-- BEGIN DATA -->
恢复适当的编辑。如果已调用了 <code>end</code>，则此方法调用超类，否则此方法对下一个编辑的索引和下一个有效编辑之间的所有编辑调用 <code>redo</code>，适当地更新下一个编辑的索引。

@throws CannotRedoException 如果其中一个编辑抛出 <code>CannotRedoException</code> 或没有要恢复的编辑
@see CompoundEdit#end
@see #canRedo
@see #editToBeRedone

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean javax.swing.undo.UndoManager.canRedo()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果可以恢复编辑，则返回 true。如果已调用了 <code>end</code>，则此方法返回来自超类的值。否则，如果有要恢复的编辑（<code>editToBeRedone</code> 返回非 <code>null</code>），则此方法返回 true。

@return 如果有要恢复的编辑，则返回 true 
@see CompoundEdit#canRedo
@see #editToBeRedone

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean javax.swing.undo.UndoManager.addEdit(UndoableEdit anEdit)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果可能，将一个 <code>UndoableEdit</code> 添加到此 <code>UndoManager</code>。此方法移除从下一个编辑的索引到编辑列表结尾位置的所有编辑。如果已调用了 <code>end</code>，则不添加该编辑并返回 <code>false</code>。如果没有调用 <code>end</code>，则此方法返回 <code>true</code>。

@param anEdit 要添加的编辑
@return 如果可以将 <code>anEdit</code> 合并到此编辑，则返回 true
@see CompoundEdit#end
@see CompoundEdit#addEdit

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.undo.UndoManager.end()
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>UndoManager</code> 转换为标准 <code>CompoundEdit</code>。这将移除所有已撤消的编辑。

@see CompoundEdit#end

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String javax.swing.undo.UndoManager.getUndoOrRedoPresentationName()
<!-- END KEY -->
<!-- BEGIN DATA -->
一个便捷方法，它返回 <code>getUndoPresentationName</code> 或 <code>getRedoPresentationName</code>。如果下一个编辑的索引等于编辑列表的大小，则返回 <code>getUndoPresentationName</code>，否则返回  <code>getRedoPresentationName</code>。

@return 撤消或恢复的名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String javax.swing.undo.UndoManager.getUndoPresentationName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此编辑可撤消形式的描述。如果已调用了 <code>end</code>，则通过此方法调用超类。否则，如果有要撤消的编辑，则此方法返回下一个将要撤消的有效编辑的值。如果没有要撤消的编辑且没有调用 <code>end</code>，则此方法返回取自 <code>UIManager</code> 属性“AbstractUndoableEdit.undoText”的值。

@return  此编辑可撤消形式的描述
@see     #undo
@see     CompoundEdit#getUndoPresentationName

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String javax.swing.undo.UndoManager.getRedoPresentationName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此编辑可恢复形式的描述。如果已调用了 <code>end</code> ，则此方法调用到超类。否则，如果有要恢复的编辑，此方法返回下一个将要恢复的有效编辑的值。如果没有要恢复的编辑且没有调用 <code>end</code>，则此方法返回取自 <code>UIManager</code> 属性“AbstractUndoableEdit.redoText”的值。

@return  此编辑可恢复形式的描述
@see     #redo
@see     CompoundEdit#getRedoPresentationName

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.undo.UndoManager.undoableEditHappened(UndoableEditEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
一个 <code>UndoableEditListener</code> 方法。此方法使用 <code>e.getEdit()</code> 调用 <code>addEdit</code>。

@param e 要从中添加 <code>UndoableEditEvent</code> 的 <code>UndoableEditEvent</code> 
@see #addEdit

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.undo.UndoManager.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回显示和标识此对象属性的字符串。

@return 此对象的 String 表示形式

<!-- END DATA -->
