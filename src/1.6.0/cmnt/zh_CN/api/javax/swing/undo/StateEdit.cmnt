<!-- BEGIN KEY -->
public class javax.swing.undo.StateEdit extends javax.swing.undo.AbstractUndoableEdit
<!-- END KEY -->
<!-- BEGIN DATA -->
<P>StateEdit 是更改状态的对象的通用编辑。被编辑的对象必须遵守 StateEditable 接口。</P>
 
<P>此编辑类的工作方式是，在编辑发生之前和发生之后，请求对象将其状态存储在 Hashtable 中。通过撤消或恢复操作，通知该对象从这些 Hashtable 中恢复其状态。</P>
 
按如下方式使用状态编辑：
 <PRE>
	// Create the edit during the &quot;before&quot; state of the object
	StateEdit newEdit = new StateEdit(myObject);
	// Modify the object
	myObject.someStateModifyingMethod();
	// &quot;end&quot; the edit when you are done modifying the object
	newEdit.end();
 </PRE>
 
<P><EM>注意，当 StateEdit 结束时，它将从 Hashtable 中移除多余的状态 - 状态 Hashtable 并不保证包含在存储状态时放入其中的所有键/值！</EM></P>

@see StateEditable

@version 1.14 05/05/04
@author Ray Ryan

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.undo.StateEditable javax.swing.undo.StateEdit.object
<!-- END KEY -->
<!-- BEGIN DATA -->
被编辑的对象

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Hashtable<java.lang.Object, java.lang.Object> javax.swing.undo.StateEdit.preState
<!-- END KEY -->
<!-- BEGIN DATA -->
编辑之前的状态信息

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Hashtable<java.lang.Object, java.lang.Object> javax.swing.undo.StateEdit.postState
<!-- END KEY -->
<!-- BEGIN DATA -->
编辑之后的状态信息

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.undo.StateEdit.undoRedoName
<!-- END KEY -->
<!-- BEGIN DATA -->
撤消/恢复的表示名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.undo.StateEdit(StateEditable anObject)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回新的 StateEdit。

@param anObject 监视更改状态的对象

@see StateEdit

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.undo.StateEdit(StateEditable anObject, String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回具有表示名称的新 StateEdit。

@param anObject 监视更改状态的对象
@param name 将用于此编辑的表示名称

@see StateEdit

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.undo.StateEdit.end()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 StateEditable 对象的后编辑状态，并结束编辑。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.undo.StateEdit.undo()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知被编辑的对象应用编辑之前的状态

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.undo.StateEdit.redo()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知编辑对象应用编辑之后的状态

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.undo.StateEdit.getPresentationName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此编辑的表示名称

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.undo.StateEdit.removeRedundantState()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除状态哈希表中多余的键/值。

<!-- END DATA -->
