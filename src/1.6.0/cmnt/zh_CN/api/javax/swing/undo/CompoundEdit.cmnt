<!-- BEGIN KEY -->
public class javax.swing.undo.CompoundEdit extends javax.swing.undo.AbstractUndoableEdit
<!-- END KEY -->
<!-- BEGIN DATA -->
AbstractUndoableEdit 的具体子类，用于将一些小的 UndoableEdit 组合到一个大的 UndoableEdit 之中。

@version 1.25 05/05/04
@author Ray Ryan

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Vector<javax.swing.undo.UndoableEdit> javax.swing.undo.CompoundEdit.edits
<!-- END KEY -->
<!-- BEGIN DATA -->
由此 <code>CompoundEdit</code> 全部撤消/恢复的 <code>UndoableEdit</code> 的集合。

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean javax.swing.undo.CompoundEdit.inProgress
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此编辑从未接收 <code>end</code>，则为 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.undo.CompoundEdit.undo() throws javax.swing.undo.CannotUndoException
<!-- END KEY -->
<!-- BEGIN DATA -->
按与添加时相反的顺序将 <code>undo</code> 发送到所有包含的 <code>UndoableEdits</code> 中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.undo.CompoundEdit.redo() throws javax.swing.undo.CannotRedoException
<!-- END KEY -->
<!-- BEGIN DATA -->
按添加时的顺序将 <code>redo</code> 发送到所有包含的 <code>UndoableEdit</code> 中。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.undo.UndoableEdit javax.swing.undo.CompoundEdit.lastEdit()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>edits</code> 中最后一个 <code>UndoableEdit</code>，如果 <code>edits</code> 为空，则返回 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.undo.CompoundEdit.die()
<!-- END KEY -->
<!-- BEGIN DATA -->
按添加时相反的顺序将 <code>die</code> 发送到每个子编辑。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.undo.CompoundEdit.addEdit(UndoableEdit anEdit)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此编辑为 <code>inProgress</code>，则接受 <code>anEdit</code> 并返回 true。
 
<p>对添加到此 <code>CompoundEdit</code> 的最后编辑执行 <code>addEdit(anEdit)</code> 操作。如果拒绝（返回 false），则对 <code>anEdit</code> 执行对最后编辑进行 <code>replaceEdit</code> 的操作。如果此处 <code>anEdit</code> 返回 false，则将它添加到 <code>edits</code>。

@param anEdit 要添加的编辑
@return 如果该编辑为 <code>inProgress</code>，则返回 true；否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.undo.CompoundEdit.end()
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>inProgress</code> 设置为 false。
 

@see #canUndo
@see #canRedo

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.undo.CompoundEdit.canUndo()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>isInProgress</code> 或者超类返回 false，则此方法返回 false。
 
@see	#isInProgress

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.undo.CompoundEdit.canRedo()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>isInProgress</code> 或者超类返回 false，则此方法返回 false。
 
@see	#isInProgress

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.undo.CompoundEdit.isInProgress()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此编辑正在进行中（即未收到结束通知），则返回 true。这通常意味着还在向其中添加编辑。

@see	#end

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.undo.CompoundEdit.isSignificant()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>edits</code> 中的任何 <code>UndoableEdit</code> 返回 true，则返回 true。如果它们都返回 false，则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.undo.CompoundEdit.getPresentationName()
<!-- END KEY -->
<!-- BEGIN DATA -->
从添加到 <code>edits</code> 的最后 <code>UndoableEdit</code> 返回 <code>getPresentationName</code>。如果 <code>edits</code> 为空，则调用超类。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.undo.CompoundEdit.getUndoPresentationName()
<!-- END KEY -->
<!-- BEGIN DATA -->
从添加到 <code>edits</code> 的最后 <code>UndoableEdit</code> 返回 <code>getUndoPresentationName</code>。如果 <code>edits</code> 为空，则调用超类。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.undo.CompoundEdit.getRedoPresentationName()
<!-- END KEY -->
<!-- BEGIN DATA -->
从添加到 <code>edits</code> 的最后 <code>UndoableEdit</code> 返回 <code>getRedoPresentationName</code>。如果 <code>edits</code> 为空，则调用超类。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.undo.CompoundEdit.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个显示并标识此对象属性的字符串。

@return 此对象的字符串表示形式

<!-- END DATA -->
