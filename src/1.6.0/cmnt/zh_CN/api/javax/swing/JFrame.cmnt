<!-- BEGIN KEY -->
public class javax.swing.JFrame extends java.awt.Frame implements javax.swing.WindowConstants, javax.accessibility.Accessible, javax.swing.RootPaneContainer, javax.swing.TransferHandler.HasGetTransferHandler
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>java.awt.Frame</code> 的扩展版本，该版本添加了对 JFC/Swing 组件架构的支持。有关使用 <code>JFrame</code> 的面向任务的文档，请参阅 <em>The Java Tutorial</em> 中的 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/components/frame.html">How to Make Frames</a> 一节。
 
 <p>
<code>JFrame</code> 类与 <code>Frame</code> 轻微不兼容。与其他所有 JFC/Swing 顶层容器一样，<code>JFrame</code> 包含一个 <code>JRootPane</code> 作为其唯一的子容器。根据规定，根窗格所提供的<b>内容窗格</b>应该包含 <code>JFrame</code> 所显示的所有非菜单组件。这不同于 AWT <code>Frame</code>。为了方便地使用 <code>add</code> 及其变体，已经重写了 <code>remove</code> 和 <code>setLayout</code>，以在必要时将其转发到 <code>contentPane</code>。这意味着可以编写：
 <pre>
       frame.add(child);
 </pre>
子级将被添加到 contentPane。内容窗格始终是非 null 的。试图将其设置为 null 会导致 JFrame 抛出异常。默认的内容窗格上会设置有 BorderLayout 管理器。有关添加、移除和设置 <code>JFrame</code> 的 <code>LayoutManager</code> 的详细信息，请参阅 {@link javax.swing.RootPaneContainer}。
 <p>
与 <code>Frame</code> 不同，当用户试图关闭窗口时，<code>JFrame</code> 知道如何进行响应。用户关闭窗口时，默认的行为只是简单地隐藏 JFrame。要更改默认的行为，可调用方法 {@link #setDefaultCloseOperation}。要使 <code>JFrame</code> 的行为与 <code>Frame</code> 实例相同，请使用 <code>setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE)</code>。
 <p>
有关内容窗格和根窗格提供的其他功能的更多信息，请参阅 <em>The Java Tutorial</em> 中的 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/components/toplevel.html">Using Top-Level Containers</a> 一节。
 <p>
在多屏幕环境中，可以在不同的屏幕设备上创建一个 <code>JFrame</code>。有关更多信息，请参阅 {@link java.awt.Frame}。
 <p>
<strong>警告：</strong>Swing 不是线程安全的。有关更多信息，请参阅 <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参阅 {@link java.beans.XMLEncoder}。

@see JRootPane
@see #setDefaultCloseOperation
@see java.awt.event.WindowListener#windowClosing
@see javax.swing.RootPaneContainer

@beaninfo attribute: isContainer true attribute: containerDelegate getContentPane description: A toplevel window which can be minimized to an icon.

@version 1.104 12/19/03
@author Jeff Dinkins
@author Georges Saab
@author David Kloba

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JFrame.EXIT_ON_CLOSE
<!-- END KEY -->
<!-- BEGIN DATA -->
退出应用程序后的默认窗口关闭操作。如果执行关闭操作时窗口具有此设置，并且是在 applet 中关闭窗口，则可能抛出 <code>SecurityException</code>。建议仅在应用程序中使用此设置。
 <p>
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JRootPane javax.swing.JFrame.rootPane
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>JRootPane</code> 实例管理此窗体的 <code>contentPane</code> 和可选的 <code>menuBar</code>，以及 <code>glassPane</code>。

@see JRootPane
@see RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JFrame.rootPaneCheckingEnabled
<!-- END KEY -->
<!-- BEGIN DATA -->
如果为 true，则将对 <code>add</code> 和 <code>setLayout</code> 的调用转发到 <code>contentPane</code>。此设置初始为 false，但在构建 <code>JFrame</code> 时将其设置为 true。

@see #isRootPaneCheckingEnabled
@see #setRootPaneCheckingEnabled
@see javax.swing.RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.accessibility.AccessibleContext javax.swing.JFrame.accessibleContext
<!-- END KEY -->
<!-- BEGIN DATA -->
可访问的上下文属性。
<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.TransferHandler javax.swing.JFrame.transferHandler
<!-- END KEY -->
<!-- BEGIN DATA -->
 此窗体的 <code>TransferHandler</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFrame() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个初始时不可见的新窗体。
 <p>
此构造方法将组件的 locale 属性设置为 <code>JComponent.getDefaultLocale</code> 所返回的值。

@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless
@see Component#setSize
@see Component#setVisible
@see JComponent#getDefaultLocale

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFrame(GraphicsConfiguration gc)
<!-- END KEY -->
<!-- BEGIN DATA -->
以屏幕设备的指定 <code>GraphicsConfiguration</code> 和空白标题创建一个 <code>Frame</code>。
 <p>
此构造方法将组件的 locale 属性设置为 <code>JComponent.getDefaultLocale</code> 所返回的值。

@param gc 用于构造新 <code>Frame</code> 的 <code>GraphicsConfiguration</code>；如果 <code>gc</code> 为 <code>null</code>，则使用系统默认的 <code>GraphicsConfiguration</code> 
@exception IllegalArgumentException 如果 <code>gc</code> 不是来自屏幕设备。GraphicsEnvironment.isHeadless() 返回 true 时总是抛出此异常。
@see java.awt.GraphicsEnvironment#isHeadless
@see JComponent#getDefaultLocale
@since     1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFrame(String title) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的、初始不可见的、具有指定标题的 <code>Frame</code>。
 <p>
此构造方法将组件的 locale 属性设置为 <code>JComponent.getDefaultLocale</code> 所返回的值。

@param title 该窗体的标题
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless
@see Component#setSize
@see Component#setVisible
@see JComponent#getDefaultLocale

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFrame(String title, GraphicsConfiguration gc)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定标题和指定屏幕设备的 <code>GraphicsConfiguration</code> 的 <code>JFrame</code>。
 <p>
此构造方法将组件的 locale 属性设置为 <code>JComponent.getDefaultLocale</code> 所返回的值。

@param title 要显示在窗体边框中的标题。将 <code>null</code> 值视为空字符串 &quot;&quot;。
@param gc 用于构造新 <code>JFrame</code> 的 <code>GraphicsConfiguration</code>；如果 <code>gc</code> 为 <code>null</code>，则使用系统默认的 <code>GraphicsConfiguration</code> 
@exception IllegalArgumentException 如果 <code>gc</code> 不是来自屏幕设备。GraphicsEnvironment.isHeadless() 返回 true 时总是抛出此异常。
@see java.awt.GraphicsEnvironment#isHeadless
@see JComponent#getDefaultLocale
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JFrame.frameInit()
<!-- END KEY -->
<!-- BEGIN DATA -->
由构造方法调用，以适当地初始化 <code>JFrame</code>。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JRootPane javax.swing.JFrame.createRootPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
由构造方法调用，以创建默认的 <code>rootPane</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JFrame.processWindowEvent(WindowEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->

处理此组件上发生的窗口事件。隐藏窗口或释放窗口，根据 <code>defaultCloseOperation</code> 属性的设置来指定。

@param  e 窗口事件
@see    #setDefaultCloseOperation
@see    java.awt.Window#processWindowEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFrame.setDefaultCloseOperation(int operation)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置用户在此窗体上发起 &quot;close&quot; 时默认执行的操作。必须指定以下选项之一：
 <p>
 <ul>
<li><code>DO_NOTHING_ON_CLOSE</code>（在 <code>WindowConstants</code> 中定义）：不执行任何操作；要求程序在已注册的 <code>WindowListener</code> 对象的 <code>windowClosing</code> 方法中处理该操作。

<li><code>HIDE_ON_CLOSE</code>（在 <code>WindowConstants</code> 中定义）：调用任意已注册的 <code>WindowListener</code> 对象后自动隐藏该窗体。

<li><code>DISPOSE_ON_CLOSE</code>（在 <code>WindowConstants</code> 中定义）：调用任意已注册 <code>WindowListener</code> 的对象后自动隐藏并释放该窗体。

<li><code>EXIT_ON_CLOSE</code>（在 <code>JFrame</code> 中定义）：使用 <code>System</code> <code>exit</code> 方法退出应用程序。仅在应用程序中使用。
 </ul>
 <p>
默认情况下，该值被设置为 <code>HIDE_ON_CLOSE</code>。更改此属性的值将导致激发属性更改事件，其属性名称为 "defaultCloseOperation"。
 <p>
<b>注：</b>当 Java 虚拟机 (VM) 中最后一个可显示窗口被释放后，虚拟机可能会终止。有关更多信息，请参阅 <a href="../../java/awt/doc-files/AWTThreadIssues.html">AWT Threading Issues</a>。

@param operation 用户关闭该窗体时应该执行的操作
@exception IllegalArgumentException 如果 defaultCloseOperation 值不是上述有效值之一
@see #addWindowListener
@see #getDefaultCloseOperation
@see WindowConstants
@throws  SecurityException 如果已指定 <code>EXIT_ON_CLOSE</code> 并且 <code>SecurityManager</code> 不允许调用者调用 <code>System.exit</code>
@see        java.lang.Runtime#exit(int)


@beaninfo preferred:true bound:true enum: DO_NOTHING_ON_CLOSE WindowConstants.DO_NOTHING_ON_CLOSE HIDE_ON_CLOSE       WindowConstants.HIDE_ON_CLOSE DISPOSE_ON_CLOSE    WindowConstants.DISPOSE_ON_CLOSE EXIT_ON_CLOSE       WindowConstants.EXIT_ON_CLOSE description: The frame's default close operation.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JFrame.getDefaultCloseOperation()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用户在此窗体上发起 &quot;close&quot; 时执行的操作。

@return 一个指示窗口关闭操作的整数
@see #setDefaultCloseOperation

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFrame.setTransferHandler(TransferHandler newHandler)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 {@code transferHandler} 属性，该属性是支持向此组件传输数据的机制。如果该组件不支持数据传输操作，那么请使用 {@code null}。
 <p>
如果系统属性 {@code suppressSwingDropSupport} 为 {@code false}（默认值），并且此组件上的当前放置目标为 {@code null} 或者不是用户设置的放置目标，则此方法将按如下方式更改放置目标：如果 {@code newHandler} 为 {@code null}，则它将清除放置目标。如果不为 {@code null}，则它将安装一个新的 {@code DropTarget}。
 <p>
注：当用于 {@code JFrame} 时，{@code TransferHandler} 只提供数据导入功能，与数据导出相关的方法当前用于 {@code JComponent}。 
 <p>
有关更多信息，请参阅 <em>The Java Tutorial</em> 中的 <a href="http://java.sun.com/docs/books/tutorial/uiswing/misc/dnd.html">
 How to Use Drag and Drop and Data Transfer</a> 一节。 
 
 @param newHandler 新的 {@code TransferHandler}

 @see TransferHandler
 @see #getTransferHandler
 @see java.awt.Component#setDropTarget
 @since 1.6

 @beaninfo
        bound: true
       hidden: true
  description: Mechanism for transfer of data into the component

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.TransferHandler javax.swing.JFrame.getTransferHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
 获取 <code>transferHandler</code> 属性。

 @return <code>transferHandler</code> 属性的值

 @see TransferHandler
 @see #setTransferHandler
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFrame.update(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->

只是调用 <code>paint(g)</code>。重写此方法，以防止不必要的调用清除背景。

@param g 要在其中进行绘制的 Graphics 上下文

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFrame.setJMenuBar(JMenuBar menubar)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此窗体的菜单栏。
@param menubar 放置于该窗体中的菜单栏

@see #getJMenuBar

@beaninfo hidden: true description: The menubar for accessing pulldown menus from this frame.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuBar javax.swing.JFrame.getJMenuBar()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此窗体上设置的菜单栏。
@return 此窗体的菜单栏

@see #setJMenuBar

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JFrame.isRootPaneCheckingEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回是否将对 <code>add</code> 和 <code>setLayout</code> 的调用转发到 <code>contentPane</code>。

@return 如果转发 <code>add</code> 和 <code>setLayout</code>，则返回 true；否则返回 false

@see #addImpl
@see #setLayout
@see #setRootPaneCheckingEnabled
@see javax.swing.RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JFrame.setRootPaneCheckingEnabled(boolean enabled)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置是否将对 <code>add</code> 和 <code>setLayout</code> 的调用转发到 <code>contentPane</code>。
 
@param enabled 如果转发 <code>add</code> 和 <code>setLayout</code>，则为 true；如果应直接在 <code>JFrame</code> 上操作，则为 false。

@see #addImpl
@see #setLayout
@see #isRootPaneCheckingEnabled
@see javax.swing.RootPaneContainer
@beaninfo hidden: true description: Whether the add and setLayout methods are forwarded

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JFrame.addImpl(Component comp, Object constraints, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定的子 <code>Component</code>。重写此方法，从而有条件地将调用转发到 <code>contentPane</code>。默认情况下将子组件添加到 <code>contentPane</code> 而不是窗体中，有关详细信息，请参阅 {@link javax.swing.RootPaneContainer}。
 
@param comp 要添加子组件的组件
@param constraints 要遵守的约束条件
@param index 索引
@exception IllegalArgumentException 如果 <code>index</code> 无效
@exception IllegalArgumentException 如果将容器的父级添加到其本身
@exception IllegalArgumentException 如果向容器内添加窗口
 
@see #setRootPaneCheckingEnabled
@see javax.swing.RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFrame.remove(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->

从该容器中移除指定组件。如果 <code>comp</code> 不是 <code>rootPane</code>，则将调用转发到 <code>contentPane</code>。如果 <code>comp</code> 不是 <code>JFrame</code> 或 <code>contentPane</code> 的子级，则不执行任何操作。

@param comp 要移除的组件
@throws NullPointerException 如果 <code>comp</code> 为 null
@see #add
@see javax.swing.RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFrame.setLayout(LayoutManager manager)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>LayoutManager</code>。重写此方法，从而有条件地将调用转发到 <code>contentPane</code>。有关更多信息，请参阅 {@link javax.swing.RootPaneContainer}。

@param manager <code>LayoutManager</code>
@see #setRootPaneCheckingEnabled
@see javax.swing.RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JRootPane javax.swing.JFrame.getRootPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此窗体的 <code>rootPane</code> 对象。
@return <code>rootPane</code> 属性

@see #setRootPane
@see RootPaneContainer#getRootPane

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JFrame.setRootPane(JRootPane root)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>rootPane</code> 属性。此方法由构造方法调用。
@param root 此窗体的 <code>rootPane</code> 对象

@see #getRootPane

@beaninfo hidden: true description: the RootPane object for this frame.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFrame.setIconImage(Image image)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Container javax.swing.JFrame.getContentPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此窗体的 <code>contentPane</code> 对象
@return <code>contentPane</code> 属性

@see #setContentPane
@see RootPaneContainer#getContentPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFrame.setContentPane(Container contentPane)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>contentPane</code> 属性。此方法由构造方法调用。
 <p>
Swing 的绘制架构要求在包含层次结构中有不透明的 <code>JComponent</code>。这通常由内容窗格提供。如果要替换内容窗格，建议用不透明的 <code>JComponent</code> 替换它。

@param contentPane 此窗体的 <code>contentPane</code> 对象

@exception java.awt.IllegalComponentStateException （运行时异常）如果 contentPane 参数为 <code>null</code>
@see #getContentPane
@see RootPaneContainer#setContentPane
@see JRootPane

@beaninfo hidden: true description: The client area of the frame where child components are normally inserted.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JLayeredPane javax.swing.JFrame.getLayeredPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此窗体的 <code>layeredPane</code> 对象。
@return <code>layeredPane</code> 属性

@see #setLayeredPane
@see RootPaneContainer#getLayeredPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFrame.setLayeredPane(JLayeredPane layeredPane)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>layeredPane</code> 属性。此方法由构造方法调用。
@param layeredPane 此窗体的 <code>layeredPane</code> 对象

@exception java.awt.IllegalComponentStateException （运行时异常）如果 layeredPane 参数为 <code>null</code>
@see #getLayeredPane
@see RootPaneContainer#setLayeredPane
@beaninfo hidden: true description: The pane that holds the various frame layers.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JFrame.getGlassPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此窗体的 <code>glassPane</code> 对象。
@return <code>glassPane</code> 属性

@see #setGlassPane
@see RootPaneContainer#getGlassPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFrame.setGlassPane(Component glassPane)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>glassPane</code> 属性。此方法由构造方法调用。
@param glassPane 此窗体的 <code>glassPane</code> 对象

@see #getGlassPane
@see RootPaneContainer#setGlassPane

@beaninfo hidden: true description: A transparent pane used for menu rendering.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Graphics javax.swing.JFrame.getGraphics()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFrame.repaint(long time, int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
在 <code>time</code> 毫秒内重绘此组件的指定矩形区域。有关如何处理重绘的详细信息，请参阅 <code>RepaintManager</code>。
 
 @param     time  更新前等待的最长时间（以毫秒为单位）
 @param     x    <i>x</i> 坐标
 @param     y    <i>y</i> 坐标
 @param     width    宽度
 @param     height   高度
 @see       RepaintManager
 @since     1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.JFrame.setDefaultLookAndFeelDecorated(boolean defaultLookAndFeelDecorated)
<!-- END KEY -->
<!-- BEGIN DATA -->
提供一个关于新创建的 <code>JFrame</code> 是否应该具有当前外观为其提供的 Window 装饰（如边框、关闭窗口的小部件、标题等等）的提示。如果 <code>defaultLookAndFeelDecorated</code> 为 true，则当前的 <code>LookAndFeel</code> 支持提供窗口装饰，并且当前的窗口管理器支持未装饰的窗口，然后新创建的 <code>JFrame</code> 将具有当前 <code>LookAndFeel</code> 为其提供的 Window 装饰。否则，新创建的 <code>JFrame</code> 将具有当前窗口管理器为其提供的 Window 装饰。
 <p>
执行以下操作可在单个 JFrame 上获得相同的效果：
 <pre>
    JFrame frame = new JFrame();
    frame.setUndecorated(true);
    frame.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
 </pre>

@param defaultLookAndFeelDecorated 指示当前的外观是否应该提供窗口装饰的提示 
@see javax.swing.LookAndFeel#getSupportsWindowDecorations
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.JFrame.isDefaultLookAndFeelDecorated()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果新创建的 <code>JFrame</code> 应该由当前外观为其提供 Window 装饰，则返回 true。这只是一个提示，因为某些外观可能不支持此功能。

@return 如果外观应该提供 Window 装饰，则返回 true。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JFrame.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JFrame</code> 的字符串表示形式。此方法仅在进行调试的时候使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。
 
@return  此 <code>JFrame</code> 的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JFrame.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得与此 JFrame 关联的 AccessibleContext。对于 JFrame，AccessibleContext 采用 AccessibleJFrame 的形式。如有必要，可创建一个新的 AccessibleJFrame 实例。

@return 一个 AccessibleJFrame，它充当此 JFrame 的 AccessibleContext

<!-- END DATA -->
