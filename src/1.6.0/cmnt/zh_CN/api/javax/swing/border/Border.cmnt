<!-- BEGIN KEY -->
public interface javax.swing.border.Border
<!-- END KEY -->
<!-- BEGIN DATA -->
该接口描述一个能够呈现围绕 swing 组件边缘边框的对象。有关使用 border 的示例，请参阅 <em>The Java Tutorial</em> 中的 <a href="http://java.sun.com/docs/books/tutorial/uiswing/misc/border.html">How to Use Borders</a> 一节。
 <p>
在 Swing 组件集中，作为一种创建组件边缘四周的装饰或普通区域的机制，border 取代了 Insets。
 <p>
用法说明：
 <ul>
<li>使用 EmptyBorder 创建普通边框（该机制取代了原先的 <code>setInsets</code>）。
<li>使用嵌套多个 border 对象的 CompoundBorder 来创建单个组合边框。
<li>border 实例设计为可共享。不使用某个 border 类来创建新的 border 对象，而是使用 BorderFactory 方法生成常见 border 类型的共享实例。
<li>其他边框样式包括 BevelBorder、SoftBevelBorder、EtchedBorder、LineBorder、TitledBorder 和 MatteBorder。
<li>要创建新的 border 类，请用 AbstractBorder 创建子类。   
 </ul>

@version 1.19 12/19/03
@author David Kloba
@author Amy Fowler
@see javax.swing.BorderFactory
@see EmptyBorder
@see CompoundBorder

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.border.Border.paintBorder(Component c, Graphics g, int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
按指定的位置和尺寸绘制指定组件的边框。
@param c 要为其绘制边框的组件
@param g 绘制的图形
@param x 所绘制边框的 x 坐标位置
@param y 所绘制边框的 y 坐标位置
@param width 所绘制边框的宽度
@param height 所绘制边框的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.border.Border.getBorderInsets(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该边框的 insets。
@param c 要应用此边框 insets 值的组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.border.Border.isBorderOpaque()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此边框是否透明。如果边框为不透明，则在绘制它时将用自身的背景来填充。

<!-- END DATA -->
