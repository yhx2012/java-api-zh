<!-- BEGIN KEY -->
public abstract class javax.swing.border.AbstractBorder extends java.lang.Object implements javax.swing.border.Border, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
实现无大小限制的空边框类。它提供了一个便捷的基类，其他边框类可方便地从其派生。
 <p>
<strong>警告：</strong>此类的序列化对象将与以后的 Swing 版本不兼容。当前的序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.33 12/19/03
@author David Kloba

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.border.AbstractBorder.paintBorder(Component c, Graphics g, int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
此默认实现不执行绘制操作。
@param c 要为其绘制边框的组件
@param g 绘制的图形
@param x 所绘制边框的 x 坐标位置
@param y 所绘制边框的 y 坐标位置
@param width 所绘制边框的宽度
@param height 所绘制边框的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.border.AbstractBorder.getBorderInsets(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
此默认实现返回一个新的 <code>Insets</code> 实例，其中 <code>top</code>、<code>left</code>、<code>bottom</code> 和 <code>right</code> 字段都设置成了 <code>0</code>。
@param c 应用此边框 insets 值的组件
@return 已初始化为 0 的新 <code>Insets</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.border.AbstractBorder.getBorderInsets(Component c, Insets insets)
<!-- END KEY -->
<!-- BEGIN DATA -->

用此边框的当前 Insets 重新初始化 insets 参数。
@param c 应用此边框 insets 值的组件
@param insets 要重新初始化的对象
@return <code>insets</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.border.AbstractBorder.isBorderOpaque()
<!-- END KEY -->
<!-- BEGIN DATA -->
此默认实现返回 false。
@return false

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.border.AbstractBorder.getInteriorRectangle(Component c, int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
此便捷方法调用静态方法。
@param c 要为其计算此边框的组件
@param x 边框的 x 坐标位置
@param y 边框的 y 坐标位置
@param width 边框的宽度
@param height 边框的高度
@return 包含内部坐标的 <code>Rectangle</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Rectangle javax.swing.border.AbstractBorder.getInteriorRectangle(Component c, Border b, int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个用所给的参数减去边框 insets 得到的矩形。这有助于确定绘制组件所在的区域，保证不会与边框相交。
@param c 为其计算边框的组件
@param b <code>Border</code> 对象
@param x 边框的 x 坐标位置
@param y 边框的 y 坐标位置
@param width 边框的宽度
@param height 边框的高度
@return 包含内部坐标的 <code>Rectangle</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.border.AbstractBorder.getBaseline(Component c, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回基线。小于 0 的返回值指示边框不具有合理的基线。
<p>
默认实现返回 －1。支持基线的子类应该进行适当地重写。如果返回 &gt;= 0 的值，则任何大小 >= 最小大小的组件都具有有效基线并且 <code>getBaselineResizeBehavior</code> 可用于确定基线如何随大小的改变而发生更改。

@param c 将为其请求基线的 <code>Component</code> 
@param width 为其获取基线的宽度
@param height 为其获取基线的高度
@return 基线；如果 <0，则指示没有合理的基线
@throws IllegalArgumentException 如果宽度或高度 &lt; 0
@see java.awt.Component#getBaseline(int,int)
@see java.awt.Component#getBaselineResizeBehavior()
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component.BaselineResizeBehavior javax.swing.border.AbstractBorder.getBaselineResizeBehavior(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个枚举，指示组件的基线如何随大小的改变而发生更改。此方法主要用于布局管理器和 GUI 生成器。
<p>
默认实现返回 <code>BaselineResizeBehavior.OTHER</code>，支持基线的子类应该进行适当地重写。子类从不返回 <code>null</code>；如果不能计算基线，则返回 <code>BaselineResizeBehavior.OTHER</code>。调用者应该首先使用 <code>getBaseline</code> 请求基线，如果返回 &gt;= 0 的值，则使用此方法。此方法返回 <code>BaselineResizeBehavior.OTHER</code> 以外的值也是可以接受的，即使 <code>getBaseline</code> 返回小于 0 的值。
 
@param c 为其返回基线调整大小行为的 <code>Component</code> 
@return 一个枚举，指示调整边框大小时基线如何改变
@see java.awt.Component#getBaseline(int,int)
@see java.awt.Component#getBaselineResizeBehavior()
@since 1.6

<!-- END DATA -->
