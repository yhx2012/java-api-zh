<!-- BEGIN KEY -->
public class javax.swing.border.TitledBorder extends javax.swing.border.AbstractBorder
<!-- END KEY -->
<!-- BEGIN DATA -->
该类实现在指定位置以指定对齐方式显示字符串标题的任意边框。
 <p>
如果构造方法中未指定边框、字体或颜色属性，也没有调用相应的设置方法来设置这些属性值，则当前外观将按照&ldquo;默认表&rdquo;中的如下属性名称定义属性值：
 <ul>
 <li>&quot;TitledBorder.border&quot;
 <li>&quot;TitledBorder.font&quot;
 <li>&quot;TitledBorder.titleColor&quot;
 </ul>
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.40 12/19/03
@author David Kloba
@author Amy Fowler

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.border.TitledBorder.DEFAULT_POSITION
<!-- END KEY -->
<!-- BEGIN DATA -->
标题文本使用默认的垂直方向。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.border.TitledBorder.ABOVE_TOP
<!-- END KEY -->
<!-- BEGIN DATA -->
将标题置于边框顶端线的上部。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.border.TitledBorder.TOP
<!-- END KEY -->
<!-- BEGIN DATA -->
将标题置于边框顶端线的中部。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.border.TitledBorder.BELOW_TOP
<!-- END KEY -->
<!-- BEGIN DATA -->
将标题置于边框顶端线的底部。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.border.TitledBorder.ABOVE_BOTTOM
<!-- END KEY -->
<!-- BEGIN DATA -->
将标题置于边框底端线的顶部。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.border.TitledBorder.BOTTOM
<!-- END KEY -->
<!-- BEGIN DATA -->
将标题置于边框底端线的中部。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.border.TitledBorder.BELOW_BOTTOM
<!-- END KEY -->
<!-- BEGIN DATA -->
将标题置于边框底端线的底部。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION
<!-- END KEY -->
<!-- BEGIN DATA -->
标题文本使用默认的对齐方式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.border.TitledBorder.LEFT
<!-- END KEY -->
<!-- BEGIN DATA -->
将标题文本置于边框线的左边。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.border.TitledBorder.CENTER
<!-- END KEY -->
<!-- BEGIN DATA -->
将标题文本置于边框线的中心。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.border.TitledBorder.RIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
将标题文本置于边框线的右边。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.border.TitledBorder.LEADING
<!-- END KEY -->
<!-- BEGIN DATA -->
从左到右排列时将标题文本置于边框线的左边，从右到左排列时将标题文本置于边框线的右边。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.border.TitledBorder.TRAILING
<!-- END KEY -->
<!-- BEGIN DATA -->
从左到右排列时将标题文本置于边框线的右边，从右到左排列时将标题文本置于边框线的左边。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.TitledBorder(String title)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 TitledBorder 实例。
 
@param title  边框应显示的标题

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.TitledBorder(Border border)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定边框和空标题的 TitledBorder 实例。
 
@param border  边框

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.TitledBorder(Border border, String title)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定边框和标题的 TitledBorder 实例。
 
@param border  边框
@param title  边框应显示的标题

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.TitledBorder(Border border, String title, int titleJustification, int titlePosition)
<!-- END KEY -->
<!-- BEGIN DATA -->
用指定的边框、标题、标题对齐方式和标题位置创建 TitledBorder 实例。
 
@param border  边框
@param title  边框应显示的标题
@param titleJustification 标题的对齐方式
@param titlePosition 标题的位置

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.TitledBorder(Border border, String title, int titleJustification, int titlePosition, Font titleFont)
<!-- END KEY -->
<!-- BEGIN DATA -->
用指定的边框、标题、标题对齐方式、标题位置和标题字体创建 TitledBorder 实例。
 
@param border  边框
@param title  边框应显示的标题
@param titleJustification 标题的对齐方式
@param titlePosition 标题的位置
@param titleFont 显示标题的字体

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.TitledBorder(Border border, String title, int titleJustification, int titlePosition, Font titleFont, Color titleColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
用指定的边框、标题、标题对齐方式、标题位置、标题字体和标题颜色创建 TitledBorder 实例。
 
@param border  边框
@param title  边框应显示的标题
@param titleJustification 标题的对齐方式
@param titlePosition 标题的位置
@param titleFont 标题的字体
@param titleColor 标题的颜色

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.border.TitledBorder.paintBorder(Component c, Graphics g, int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
按照指定的位置和大小为指定的组件绘制边框。
@param c 要为其绘制边框的组件
@param g 绘制的图形
@param x 所绘制边框的 x 坐标位置
@param y 所绘制边框的 y 坐标位置
@param width 所绘制边框的宽度
@param height 所绘制边框的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.border.TitledBorder.getBorderInsets(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回边框的 insets。
@param c 要应用此边框 insets 值的组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.border.TitledBorder.getBorderInsets(Component c, Insets insets)
<!-- END KEY -->
<!-- BEGIN DATA -->

用此边框的当前 Insets 重新初始化 insets 参数。
@param c 应用此边框 insets 值的组件
@param insets 要重新初始化的对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.border.TitledBorder.isBorderOpaque()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回边框是否透明。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.border.TitledBorder.getTitle()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回带标题边框的标题。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.Border javax.swing.border.TitledBorder.getBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回带标题边框的边框。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.border.TitledBorder.getTitlePosition()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回带标题边框的标题位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.border.TitledBorder.getTitleJustification()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回带标题边框的标题对齐方式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font javax.swing.border.TitledBorder.getTitleFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回带标题边框的标题字体。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.border.TitledBorder.getTitleColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回带标题边框的标题颜色。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.border.TitledBorder.setTitle(String title)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置带标题边框的标题。参数 title 为边框的 title（标题）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.border.TitledBorder.setBorder(Border border)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置带标题边框的边框。
@param border 边框

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.border.TitledBorder.setTitlePosition(int titlePosition)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置带标题边框的标题位置。
@param titlePosition 边框的位置

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.border.TitledBorder.setTitleJustification(int titleJustification)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置带标题边框的标题对齐方式。
@param titleJustification 边框标题的对齐方式

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.border.TitledBorder.setTitleFont(Font titleFont)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置带标题边框的标题字体。
@param titleFont 边框标题的字体

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.border.TitledBorder.setTitleColor(Color titleColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置带标题边框的标题颜色。
@param titleColor 边框标题的颜色

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.border.TitledBorder.getMinimumSize(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此边框完全显示边框和标题所需的最小大小。
@param c 将在其上绘制此边框的组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.border.TitledBorder.getBaseline(Component c, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回基线。

 @throws NullPointerException {@inheritDoc}
 @throws IllegalArgumentException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component.BaselineResizeBehavior javax.swing.border.TitledBorder.getBaselineResizeBehavior(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回一个枚举，指示该边框的基线如何随大小的改变而发生更改。

 @throws NullPointerException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
