<!-- BEGIN KEY -->
public class javax.swing.border.EtchedBorder extends javax.swing.border.AbstractBorder
<!-- END KEY -->
<!-- BEGIN DATA -->
该类实现简单的浮雕化边框，它既可以是阴刻浮雕化边框，也可以是阳刻浮雕化边框。如果创建边框时未初始化任何高亮显示/阴影颜色，则这些颜色将从传递给 paintBorder() 方法的组件参数的背景色动态派生。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.18 12/19/03
@author David Kloba
@author Amy Fowler

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.border.EtchedBorder.RAISED
<!-- END KEY -->
<!-- BEGIN DATA -->
阳刻浮雕化类型。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.border.EtchedBorder.LOWERED
<!-- END KEY -->
<!-- BEGIN DATA -->
阴刻浮雕化类型。
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.EtchedBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个阴刻浮雕化类型的边框，其颜色将从传递给 paintBorder 方法的组件的背景色派生。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.EtchedBorder(int etchType)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定蚀刻类型的浮雕化边框，其颜色将从传递给 paintBorder 方法的组件的背景色派生
@param etchType 边框要绘制的蚀刻类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.EtchedBorder(Color highlight, Color shadow)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定高亮显示和阴影颜色的阴刻浮雕化边框
@param highlight 用于浮雕化高亮显示的颜色
@param shadow 用于浮雕化阴影的颜色

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.EtchedBorder(int etchType, Color highlight, Color shadow)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定蚀刻类型、高亮显示和阴影颜色的浮雕化边框
@param etchType 边框要绘制的蚀刻类型
@param highlight 用于浮雕化高亮显示的颜色
@param shadow 用于浮雕化阴影的颜色

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.border.EtchedBorder.paintBorder(Component c, Graphics g, int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
按照指定的位置和尺寸为指定的组件绘制边框
@param c 要为其绘制边框的组件
@param g 绘制的图形
@param x 所绘制边框的 x 坐标位置
@param y 所绘制边框的 y 坐标位置
@param width 所绘制边框的宽度
@param height 所绘制边框的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.border.EtchedBorder.getBorderInsets(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回边框的 insets
@param c 要应用此边框 insets 值的组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.border.EtchedBorder.getBorderInsets(Component c, Insets insets)
<!-- END KEY -->
<!-- BEGIN DATA -->

用此边框的当前 Insets 重新初始化 insets 参数
@param c 应用此边框 insets 值的组件
@param insets 要重新初始化的对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.border.EtchedBorder.isBorderOpaque()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回边框是否透明。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.border.EtchedBorder.getEtchType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回浮雕化边框设置的蚀刻类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.border.EtchedBorder.getHighlightColor(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回浮雕化边框在指定组件上呈现的高亮显示颜色。如果实例化时未指定任何高亮显示颜色，高亮显示颜色将从指定组件的背景色派生
@param c 从其派生高亮显示颜色的组件
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.border.EtchedBorder.getHighlightColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回浮雕化边框的高亮显示颜色。如果实例化时未指定任何高亮显示颜色，则返回 null。
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.border.EtchedBorder.getShadowColor(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回浮雕化边框在指定组件上呈现的阴影颜色。如果实例化时未指定任何阴影颜色，阴影颜色将从指定组件的背景色派生
@param c 从其派生阴影颜色的组件
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.border.EtchedBorder.getShadowColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回浮雕化边框的阴影颜色。如果实例化时未指定任何阴影颜色，则返回 null。
 @since 1.3

<!-- END DATA -->
