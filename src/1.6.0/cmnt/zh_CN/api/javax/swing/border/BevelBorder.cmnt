<!-- BEGIN KEY -->
public class javax.swing.border.BevelBorder extends javax.swing.border.AbstractBorder
<!-- END KEY -->
<!-- BEGIN DATA -->
该类实现简单的双线斜面边框。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.20 12/19/03
@author David Kloba

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.border.BevelBorder.RAISED
<!-- END KEY -->
<!-- BEGIN DATA -->
凸出斜面类型。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.border.BevelBorder.LOWERED
<!-- END KEY -->
<!-- BEGIN DATA -->
凹入斜面类型。
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.BevelBorder(int bevelType)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定类型的斜面边框，其颜色将从传递给 paintBorder 方法的组件的背景色派生。
@param bevelType 边框斜面类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.BevelBorder(int bevelType, Color highlight, Color shadow)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定类型、高亮显示和阴影颜色的斜面边框。
@param bevelType 边框的斜面类型
@param highlight 斜面高亮显示所用颜色
@param shadow 斜面阴影所用颜色

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.BevelBorder(int bevelType, Color highlightOuterColor, Color highlightInnerColor, Color shadowOuterColor, Color shadowInnerColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定类型、高亮显示和阴影颜色的斜面边框。
 <p>
注：可与凹入斜面边框交换阴影内部和外部的颜色。

@param bevelType 边框的斜面类型
@param highlightOuterColor 斜面外部高亮显示所用颜色
@param highlightInnerColor 斜面内部高亮显示所用颜色
@param shadowOuterColor 斜面外部阴影所用颜色
@param shadowInnerColor 斜面内部阴影所用颜色

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.border.BevelBorder.paintBorder(Component c, Graphics g, int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
按指定的位置和尺寸绘制指定组件的边框。
@param c 要为其绘制边框的组件
@param g 绘制的图形
@param x 所绘制边框的 x 坐标位置
@param y 所绘制边框的 y 坐标位置
@param width 所绘制边框的宽度
@param height 所绘制边框的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.border.BevelBorder.getBorderInsets(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回边框的 insets。
@param c 要应用此边框 insets 值的组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.border.BevelBorder.getBorderInsets(Component c, Insets insets)
<!-- END KEY -->
<!-- BEGIN DATA -->

用此边框的当前 Insets 重新初始化 insets 参数。
@param c 应用此边框 insets 值的组件
@param insets 要重新初始化的对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.border.BevelBorder.getHighlightOuterColor(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回斜面边框在指定组件上呈现的外部高亮显示颜色。如果实例化时未指定任何高亮显示颜色，高亮显示颜色将从指定组件的背景色派生。
@param c 从其派生高亮显示颜色的组件
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.border.BevelBorder.getHighlightInnerColor(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回斜面边框在指定组件上呈现的内部高亮显示颜色。如果实例化时未指定任何高亮显示颜色，高亮显示颜色将从指定组件的背景色派生。
@param c 从其派生高亮显示颜色的组件
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.border.BevelBorder.getShadowInnerColor(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回斜面边框在指定组件上呈现的内部阴影颜色。如果实例化时未指定任何阴影颜色，阴影颜色将从指定组件的背景色派生。
@param c 从其派生阴影颜色的组件
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.border.BevelBorder.getShadowOuterColor(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回斜面边框在指定组件上呈现的外部阴影颜色。如果实例化时未指定任何阴影颜色，阴影颜色将从指定组件的背景色派生。
@param c 从其派生阴影颜色的组件
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.border.BevelBorder.getHighlightOuterColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回斜面边框外部的高亮显示颜色。如果实例化时未指定任何高亮显示颜色，则返回 null。
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.border.BevelBorder.getHighlightInnerColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回斜面边框内部的高亮显示颜色。如果实例化时未指定任何高亮显示颜色，则返回 null。
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.border.BevelBorder.getShadowInnerColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回斜面边框内部的阴影颜色。如果实例化时未指定任何阴影颜色，则返回 null。
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.border.BevelBorder.getShadowOuterColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回斜面边框的外部阴影颜色。如果实例化时未指定任何阴影颜色，则返回 null。
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.border.BevelBorder.getBevelType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回斜面边框的类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.border.BevelBorder.isBorderOpaque()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回边框是否透明。

<!-- END DATA -->
