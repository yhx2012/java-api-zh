<!-- BEGIN KEY -->
public class javax.swing.JMenuItem extends javax.swing.AbstractButton implements javax.accessibility.Accessible, javax.swing.MenuElement
<!-- END KEY -->
<!-- BEGIN DATA -->
菜单中的项的实现。菜单项本质上是位于列表中的按钮。当用户选择&ldquo;按钮&rdquo;时，则执行与菜单项关联的操作。<code>JPopupMenu</code> 中包含的 <code>JMenuItem</code> 正好执行该功能。
 <p>
通过 <code><a href="Action.html">Action</a></code> 可以配置菜单，并进行一定程度的控制。对菜单项使用 <code>Action</code> 有许多直接配置菜单项所不及的优点。有关更多信息，请参阅<a href="Action.html#buttonActions">支持 <code>Action</code> 的 Swing 组件</a>，可以在 <em>The Java Tutorial</em> 中的 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/misc/action.html">How
 to Use Actions</a> 一节找到更多信息。  
 <p>
有关更多文档和示例，请参见 <em>The Java Tutorial</em> 中的 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/components/menu.html">How to Use Menus</a> 一节。
 <p>
<strong>警告：</strong>Swing 不是线程安全的。有关更多信息，请参阅 <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@beaninfo attribute: isContainer false description: An item which can be selected in a menu.

@version 1.118 03/05/04
@author Georges Saab
@author David Karlton
@see JPopupMenu
@see JMenu
@see JCheckBoxMenuItem
@see JRadioButtonMenuItem

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建不带有设置文本或图标的 <code>JMenuItem</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem(Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带有指定图标的 <code>JMenuItem</code>。

@param icon <code>JMenuItem</code> 的图标

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem(String text)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带有指定文本的 <code>JMenuItem</code>。

@param text <code>JMenuItem</code> 的文本

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建从指定的 <code>Action</code> 获取其属性的菜单项。

@param a <code>JMenuItem</code> 的操作
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem(String text, Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带有指定文本和图标的 <code>JMenuItem</code>。

@param text <code>JMenuItem</code> 的文本
@param icon <code>JMenuItem</code> 的图标

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem(String text, int mnemonic)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带有指定文本和键盘助记符的 <code>JMenuItem</code>。

@param text <code>JMenuItem</code> 的文本
@param mnemonic <code>JMenuItem</code> 的键盘助记符

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.setModel(ButtonModel newModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuItem.init(String text, Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
利用指定文本和图标初始化菜单项。

@param text <code>JMenuItem</code> 的文本
@param icon <code>JMenuItem</code> 的图标

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.setUI(MenuItemUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置呈现此组件的外观对象。

@param ui  <code>JMenuItemUI</code> L&amp;F 对象
@see UIDefaults#getUI
@beaninfo bound:true hidden:true attribute: visualUpdate true description: The UI object that implements the Component's LookAndFeel. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
利用当前外观的值重置 UI 属性。

@see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JMenuItem.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于构造呈现此组件时使用的 L&amp;F 类名称的后缀。

@return 字符串 &quot;MenuItemUI&quot;
@see JComponent#getUIClassID
@see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.setArmed(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
将菜单项标识为&ldquo;调出&rdquo;。如果鼠标指针在此项上时释放鼠标按钮，则激发菜单的操作事件。如果在其他地方释放鼠标按钮，则不激发事件，而菜单项将缩回。
 
@param b true 表示调出菜单项以供选择
@beaninfo description: Mouse release will fire an action event hidden:true

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JMenuItem.isArmed()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回菜单项是否被&ldquo;调出&rdquo;。
 
@return 如果菜单项为调出状态，可供选择，则返回 true
@see #setArmed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.setEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
启用或禁用菜单项。

@param b  true 表示启用项
@beaninfo description: Does the component react to user interaction bound:true preferred:true

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.setAccelerator(KeyStroke keyStroke)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置修改键，它能直接调用菜单项的操作侦听器而不必显示菜单的层次结构。UI 负责安装正确的操作。注意，当键入键盘加速器时，不管目前是否显示菜单，它都会运行。

@param keyStroke 将作为加速器的 <code>KeyStroke</code>
@beaninfo description: The keystroke combination which will invoke the JMenuItem's actionlisteners without navigating the menu hierarchy bound:true preferred:true

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.KeyStroke javax.swing.JMenuItem.getAccelerator()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回作为菜单项的加速器的 <code>KeyStroke</code>。
@return 标识加速键的 <code>KeyStroke</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuItem.configurePropertiesFromAction(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuItem.actionPropertyChanged(Action action, String propertyName)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.processMouseEvent(MouseEvent e, javax.swing.MenuElement[] path, MenuSelectionManager manager)
<!-- END KEY -->
<!-- BEGIN DATA -->
如有必要，通过使用 <code>MenuSelectionManager</code> 的 API 处理从 <code>MenuSelectionManager</code> 转发的鼠标事件并更改菜单选择。
 <p>
注：不必将事件转发到子组件。此操作可以通过 <code>MenuSelectionManager</code> 自动完成。

@param e  <code>MouseEvent</code>
@param path <code>MenuElement</code> 路径数组
@param manager <code>MenuSelectionManager</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.processKeyEvent(KeyEvent e, javax.swing.MenuElement[] path, MenuSelectionManager manager)
<!-- END KEY -->
<!-- BEGIN DATA -->
如有必要，通过使用 <code>MenuSelectionManager</code> 的 API 处理从 <code>MenuSelectionManager</code> 转发的键事件并更改菜单选择。
 <p>
注：不必将事件转发到子组件。此操作可以通过 <code>MenuSelectionManager</code> 自动完成。

@param e   <code>KeyEvent</code>
@param path  <code>MenuElement</code> 路径数组
@param manager   <code>MenuSelectionManager</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.processMenuDragMouseEvent(MenuDragMouseEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理菜单中的鼠标拖动。

@param e  <code>MenuDragMouseEvent</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.processMenuKeyEvent(MenuKeyEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理菜单中的快捷键。

@param e  <code>MenuKeyEvent</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuItem.fireMenuDragMouseEntered(MenuDragMouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有对此事件类型上的通知感兴趣的已注册侦听器。 

@param event <code>MenuMouseDragEvent</code>
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuItem.fireMenuDragMouseExited(MenuDragMouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有对此事件类型上的通知感兴趣的已注册侦听器。  

@param event <code>MenuDragMouseEvent</code>
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuItem.fireMenuDragMouseDragged(MenuDragMouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有对此事件类型上的通知感兴趣的已注册侦听器。

@param event <code>MenuDragMouseEvent</code>
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuItem.fireMenuDragMouseReleased(MenuDragMouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有对此事件类型上的通知感兴趣的已注册侦听器。 

@param event <code>MenuDragMouseEvent</code>
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuItem.fireMenuKeyPressed(MenuKeyEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有对此事件类型上的通知感兴趣的已注册侦听器。 

@param event <code>MenuKeyEvent</code>
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuItem.fireMenuKeyReleased(MenuKeyEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有对此事件类型上的通知感兴趣的已注册侦听器。 

@param event <code>MenuKeyEvent</code>
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuItem.fireMenuKeyTyped(MenuKeyEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有对此事件类型上的通知感兴趣的已注册侦听器。 

@param event <code>MenuKeyEvent</code>
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.menuSelectionChanged(boolean isIncluded)
<!-- END KEY -->
<!-- BEGIN DATA -->
当选择或取消选择 <code>MenuElement</code> 时由 <code>MenuSelectionManager</code> 调用。
 
@param isIncluded  如果此菜单项位于发生更改的菜单路径部分，则为 true；如果此菜单项位于发生更改的菜单路径部分，但该路径的这一特殊部分与更改前相同，则为 false
@see MenuSelectionManager#setSelectedPath(MenuElement[])

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.MenuElement[] javax.swing.JMenuItem.getSubElements()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回包含此菜单组件的子菜单组件的数组。

@return <code>MenuElement</code> 的数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JMenuItem.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于绘制此对象的 <code>java.awt.Component</code>。返回的组件用于转换事件并检测事件是否位于菜单组件中。

@return 绘制此菜单项的 <code>Component</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.addMenuDragMouseListener(MenuDragMouseListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>MenuDragMouseListener</code> 添加到菜单项。

@param l 要添加的 <code>MenuDragMouseListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.removeMenuDragMouseListener(MenuDragMouseListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
从菜单项中移除 <code>MenuDragMouseListener</code>。

@param l 要移除的 <code>MenuDragMouseListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.MenuDragMouseListener[] javax.swing.JMenuItem.getMenuDragMouseListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回利用 addMenuDragMouseListener() 添加到此 JMenuItem 的所有 <code>MenuDragMouseListener</code> 组成的数组。
 
@return 添加的所有 <code>MenuDragMouseListener</code>，如果没有添加侦听器，则返回一个空数组
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.addMenuKeyListener(MenuKeyListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>MenuKeyListener</code> 添加到菜单项。

@param l 要添加的 <code>MenuKeyListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.removeMenuKeyListener(MenuKeyListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
从菜单项中移除 <code>MenuKeyListener</code>。

@param l 要移除的 <code>MenuKeyListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.MenuKeyListener[] javax.swing.JMenuItem.getMenuKeyListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回利用 addMenuKeyListener() 添加到此 JMenuItem 的所有 <code>MenuKeyListener</code> 的数组。
 
@return 添加的所有 <code>MenuKeyListener</code>，如果没有添加侦听器，则返回一个空数组
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JMenuItem.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JMenuItem</code> 的字符串表示形式。此方法仅在进行调试的时候使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。
 
@return  此 <code>JMenuItem</code> 的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JMenuItem.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>JMenuItem</code> 关联的 <code>AccessibleContext</code>。对于 <code>JMenuItem</code>，<code>AccessibleContext</code> 采用的是 <code>AccessibleJMenuItem</code> 的形式。必要时创建一个新的 AccessibleJMenuItme 实例。

@return 充当此 <code>JMenuItem</code> 的 <code>AccessibleContext</code> 的 <code>AccessibleJMenuItem</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JMenuItem.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
请参见 JComponent.readObject() 以获取关于在 Swing 中进行序列化的信息。

<!-- END DATA -->
