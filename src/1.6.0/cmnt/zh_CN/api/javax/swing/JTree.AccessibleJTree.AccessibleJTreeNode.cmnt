<!-- BEGIN KEY -->
protected class javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode extends javax.accessibility.AccessibleContext implements javax.accessibility.Accessible, javax.accessibility.AccessibleComponent, javax.accessibility.AccessibleSelection, javax.accessibility.AccessibleAction
<!-- END KEY -->
<!-- BEGIN DATA -->
此类实现 <code>JTree</code> 子类的可访问性支持。它提供适合树节点的 Java Accessibility API 实现。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode(JTree t, TreePath p, Accessible ap)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 AccessibleJTreeNode
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此树节点关联的 AccessibleContext。在此类的 Java Accessibility API 的实现中，返回的是此对象，它是其自身的 AccessibleContext。

@return 此对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getAccessibleName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的可访问名称。

@return 对象的本地化名称；如果此对象没有名称，则返回 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.setAccessibleName(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的本地化可访问名称。

@param s 对象的新本地化名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getAccessibleDescription()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的可访问的描述。

@return 对象的本地化描述；如果此对象没有描述，则返回 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.setAccessibleDescription(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的可访问描述。

@param s 此对象的新的本地化描述

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleRole javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getAccessibleRole()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的职责。

@return 描述该对象职责的 AccessibleRole 实例
@see AccessibleRole

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleStateSet javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getAccessibleStateSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的状态设置。

@return 包含对象当前状态集合的 AccessibleStateSet 的实例
@see AccessibleState

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getAccessibleParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的 Accessible 父对象。

@return 此对象的 Accessible 父对象；如果此对象没有 Accessible 父对象，则返回 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getAccessibleIndexInParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象在其可访问父对象中的索引。

@return 返回此对象的父对象中的索引；如果此对象没有可访问父对象，则返回 -1。
@see #getAccessibleParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getAccessibleChildrenCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对象中的可访问子对象数。

@return  对象的可访问子对象数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getAccessibleChild(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对象的指定 Accessible 子对象。

@param i 从零开始的子对象索引
@return 对象的 Accessible 子对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Locale javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getLocale()
<!-- END KEY -->
<!-- BEGIN DATA -->

获取组件的区域。如果该组件没有区域，则返回其父级的区域。  

@return 此组件的区域。如果此组件没有区域，则返回其父级的区域。
@exception IllegalComponentStateException 如果该 Component 没有自己的区域，并且尚未被添加到包含层次结构（那样可以从包含父级确定其区域）。
@see #setLocale

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.addPropertyChangeListener(PropertyChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 PropertyChangeListener 添加到侦听器列表。此侦听器为所有属性注册。

@param l  要添加的 PropertyChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.removePropertyChangeListener(PropertyChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
从侦听器列表中移除 PropertyChangeListener。此方法移除了一个为所有属性注册的 PropertyChangeListener。

@param l  要移除的 PropertyChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleAction javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getAccessibleAction()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此对象关联的 AccessibleAction。在针对此类的 Java Accessibility API 的实现中，返回此对象，它负责代表其自身实现 AccessibleAction 接口。
 
@return 此对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleComponent javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getAccessibleComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此对象关联的 AccessibleComponent。在针对此类的 Java Accessibility API 的实现中，返回此对象，它负责代表其自身实现 AccessibleComponent 接口。
 
@return 此对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleSelection javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此对象关联的 AccessibleSelection（如果存在）。否则，返回 null。

@return AccessibleSelection 或 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleText javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getAccessibleText()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此对象关联的 AccessibleText（如果存在）。否则，返回 null。

@return AccessibleText 或 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleValue javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getAccessibleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此对象关联的 AccessibleValue（如果存在）。否则，返回 null。

@return AccessibleValue 或 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的背景色。

@return 对象的背景色（如果受支持）；否则返回 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.setBackground(Color c)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的背景色。

@param c 背景的新颜色

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的前景色。

@return 对象的前景色（如果受支持）；否则，返回 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getAccessibleAt(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>Accessible</code> 子对象（如果存在），它包含在本地坐标 <code>Point</code> 中。否则返回 <code>null</code>。

@param p 此 <code>Accessible</code> 的本地坐标中的点
@return 在指定位置的 <code>Accessible</code>（如果存在）；否则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getAccessibleSelectionCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前选中的项数。如果未选择项，则返回值 0。

@return 当前选择的项数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示对象中指定选择项的 Accessible。如果没有作出选择，或者所选项数少于传入的整数，则返回值为 null。

@param i 所选项的从零开始的索引
@return 包含所选项的 Accessible

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.isAccessibleChildSelected(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果选择了此对象的当前子对象，则返回 true。

@param i 此 Accessible 对象的子对象的从零开始的索引。
@see AccessibleContext#getAccessibleChild

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.addAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
将对象中指定选择的项添加到对象的选择中。如果对象支持多种选择，则将指定项添加到所有现有选择中，否则它将替换对象中的所有现有选择。如果已经选择了指定的项，则此方法无效。

@param i 可选择项的从零开始的索引

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.removeAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
将该对象中指定选择的项从该对象的选择中移除。如果当前没有选择指定的项，则此方法无效。

@param i 可选择项的从零开始的索引

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.clearAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
清除对象中的选择，这样此对象中什么也没有选择。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.selectAllAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
导致该对象中的所有选择项都被选中，前提是该对象支持多个选择。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getAccessibleActionCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此树节点中可用的可访问操作数。如果此节点不是叶节点，则除 TreeCellRenderer 后面对象上所有可用操作外，至少还存在一个操作（切换展开）。

@return 此对象中的操作数

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.getAccessibleActionDescription(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该树节点的指定操作的描述。如果此节点不是叶节点，则除 TreeCellRenderer 后面对象上所有可用操作外，至少还存在一个操作描述（切换展开）。

@param i 该操作的从零开始的索引
@return 该操作的描述

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode.doAccessibleAction(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
执行树节点上的指定操作。如果此节点不是叶节点，则除 TreeCellRenderer 后面对象上所有可用操作外，至少还存在一个可以完成的操作（切换展开）。

@param i 操作的从零开始的索引
@return 如果执行了该操作，则返回 true；否则返回 false。

<!-- END DATA -->
