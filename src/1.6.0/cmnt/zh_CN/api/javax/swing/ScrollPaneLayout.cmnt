<!-- BEGIN KEY -->
public class javax.swing.ScrollPaneLayout extends java.lang.Object implements java.awt.LayoutManager, javax.swing.ScrollPaneConstants, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>JScrollPane</code> 使用的布局管理器。<code>JScrollPaneLayout</code> 负责管理九个组件：一个视口、两个滚动条、一个行标题、一个列标题和四个&ldquo;角&rdquo;组件。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@see JScrollPane
@see JViewport

@version 1.60 05/18/04
@author Hans Muller

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JViewport javax.swing.ScrollPaneLayout.viewport
<!-- END KEY -->
<!-- BEGIN DATA -->

滚动窗格的子级视口。默认情况下为空 <code>JViewport</code>。
@see JScrollPane#setViewport

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JScrollBar javax.swing.ScrollPaneLayout.vsb
<!-- END KEY -->
<!-- BEGIN DATA -->
滚动窗格的子级垂直滚动条。默认情况下为 <code>JScrollBar</code>。
@see JScrollPane#setVerticalScrollBar

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JScrollBar javax.swing.ScrollPaneLayout.hsb
<!-- END KEY -->
<!-- BEGIN DATA -->
滚动窗格的子级水平滚动条。默认情况下为 <code>JScrollBar</code>。
@see JScrollPane#setHorizontalScrollBar

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JViewport javax.swing.ScrollPaneLayout.rowHead
<!-- END KEY -->
<!-- BEGIN DATA -->

子级行标题。默认情况下为 <code>null</code>。
@see JScrollPane#setRowHeader

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JViewport javax.swing.ScrollPaneLayout.colHead
<!-- END KEY -->
<!-- BEGIN DATA -->

子级列标题。默认情况下为 <code>null</code>。
@see JScrollPane#setColumnHeader

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.ScrollPaneLayout.lowerLeft
<!-- END KEY -->
<!-- BEGIN DATA -->
左下角显示的组件。默认情况下为 <code>null</code>。
@see JScrollPane#setCorner

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.ScrollPaneLayout.lowerRight
<!-- END KEY -->
<!-- BEGIN DATA -->
右下角显示的组件。默认情况下为 <code>null</code>。
@see JScrollPane#setCorner

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.ScrollPaneLayout.upperLeft
<!-- END KEY -->
<!-- BEGIN DATA -->
左上角显示的组件。默认情况下为 <code>null</code>。
@see JScrollPane#setCorner

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.ScrollPaneLayout.upperRight
<!-- END KEY -->
<!-- BEGIN DATA -->
右上角显示的组件。默认情况下为 <code>null</code>。
@see JScrollPane#setCorner

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.ScrollPaneLayout.vsbPolicy
<!-- END KEY -->
<!-- BEGIN DATA -->

垂直滚动条的显示策略。默认情况下为 <code>ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED</code>。  
 <p>
该字段已废弃，请用 <code>JScrollPane</code> 字段代替。
 
@see JScrollPane#setVerticalScrollBarPolicy

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.ScrollPaneLayout.hsbPolicy
<!-- END KEY -->
<!-- BEGIN DATA -->
水平滚动条的显示策略。默认情况下为 <code>ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED</code>。
 <p>
该字段已废弃，请用 <code>JScrollPane</code> 字段代替。
 
@see JScrollPane#setHorizontalScrollBarPolicy

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ScrollPaneLayout.syncWithScrollPane(JScrollPane sp)
<!-- END KEY -->
<!-- BEGIN DATA -->
在 ScrollPaneLayout 被设置为 <code>JScrollPane</code> 的 LayoutManager 后，此方法被调用。它将初始化通常由 <code>addLayoutComponent</code> 设置的所有内部字段。例如：
 <pre>
 ScrollPaneLayout mySPLayout = new ScrollPanelLayout() {
     public void layoutContainer(Container p) {
         super.layoutContainer(p);
         // do some extra work here ...
     }
 };
 scrollpane.setLayout(mySPLayout):
 </pre>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.ScrollPaneLayout.addSingletonComponent(Component oldC, Component newC)
<!-- END KEY -->
<!-- BEGIN DATA -->

移除现有组件。当添加新的组件（如左角或垂直滚动条）时，对应的旧组件（如果有）必须移除。
 <p>
该方法返回 <code>newC</code>。如果 <code>oldC</code> 不等于 <code>newC</code> 并且不为 <code>null</code>，它将从其父级移除。
 
@param oldC 要替换的 <code>Component</code>
@param newC 要添加的 <code>Component</code>
@return <code>newC</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ScrollPaneLayout.addLayoutComponent(String s, Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的组件添加到布局中。布局通过以下内容之一标识：
 <ul>
 <li>ScrollPaneConstants.VIEWPORT
 <li>ScrollPaneConstants.VERTICAL_SCROLLBAR
 <li>ScrollPaneConstants.HORIZONTAL_SCROLLBAR
 <li>ScrollPaneConstants.ROW_HEADER
 <li>ScrollPaneConstants.COLUMN_HEADER
 <li>ScrollPaneConstants.LOWER_LEFT_CORNER
 <li>ScrollPaneConstants.LOWER_RIGHT_CORNER
 <li>ScrollPaneConstants.UPPER_LEFT_CORNER
 <li>ScrollPaneConstants.UPPER_RIGHT_CORNER
 </ul>

@param s 组件标识符
@param c 要添加的组件
@exception IllegalArgumentException 如果 <code>s</code> 为无效关键字

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ScrollPaneLayout.removeLayoutComponent(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
从布局中移除指定的组件。
   
@param c 要移除的组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ScrollPaneLayout.getVerticalScrollBarPolicy()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回垂直滚动条的显示策略。

@return 一个提供显示策略的整数
@see #setVerticalScrollBarPolicy

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ScrollPaneLayout.setVerticalScrollBarPolicy(int x)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置垂直滚动条的显示策略。选项有：
 <ul>
 <li>ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED
 <li>ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER
 <li>ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS
 </ul>
注：应用程序应使用该方法的 <code>JScrollPane</code> 版本。它仅用于此类的 Swing 1.0.2（及更早）版本向后兼容。

@param x 一个提供显示策略的整数
@exception IllegalArgumentException 如果 <code>x</code> 为上面列出的无效垂直滚动条策略

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ScrollPaneLayout.getHorizontalScrollBarPolicy()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回水平滚动条的显示策略。

@return 一个提供显示策略的整数
@see #setHorizontalScrollBarPolicy

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ScrollPaneLayout.setHorizontalScrollBarPolicy(int x)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置水平滚动条显示策略。选项有：<ul>
 <li>ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED
 <li>ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER
 <li>ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS
 </ul>
注：应用程序应使用该方法的 <code>JScrollPane</code> 版本。它仅用于此类的 Swing 1.0.2（及更早）版本向后兼容。

@param x 一个提供显示策略的整数
@exception IllegalArgumentException 如果 <code>x</code> 为上面列出的无效水平滚动条策略

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JViewport javax.swing.ScrollPaneLayout.getViewport()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回显示滚动组件内容的 <code>JViewport</code> 对象。
@return 显示滚动组件内容的 <code>JViewport</code> 对象
@see JScrollPane#getViewport

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JScrollBar javax.swing.ScrollPaneLayout.getHorizontalScrollBar()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回处理水平滚动的 <code>JScrollBar</code> 对象。
@return 处理水平滚动的 <code>JScrollBar</code> 对象
@see JScrollPane#getHorizontalScrollBar

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JScrollBar javax.swing.ScrollPaneLayout.getVerticalScrollBar()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回处理垂直滚动的 <code>JScrollBar</code> 对象。
@return 处理垂直滚动的 <code>JScrollBar</code> 对象
@see JScrollPane#getVerticalScrollBar

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JViewport javax.swing.ScrollPaneLayout.getRowHeader()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回行标题对应的 <code>JViewport</code> 对象。
@return 行标题对应的 <code>JViewport</code> 对象
@see JScrollPane#getRowHeader

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JViewport javax.swing.ScrollPaneLayout.getColumnHeader()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回列标题对应的 <code>JViewport</code> 对象。
@return 列标题对应的 <code>JViewport</code> 对象
@see JScrollPane#getColumnHeader

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.ScrollPaneLayout.getCorner(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回位于指定角的 <code>Component</code>。
@param key 用于指定角的 <code>String</code>
@return 位于指定角的 <code>Component</code>，在 {@link ScrollPaneConstants} 中的定义；如果 <code>key</code> 不是四个角之一，则返回 <code>null</code>
@see JScrollPane#getCorner

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.ScrollPaneLayout.preferredLayoutSize(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->

<code>ScrollPane</code> 的首选大小是 insets 的大小加上视口的首选大小、可见标题首选大小以及滚动条的首选大小，它按照给定的当前视图和当前滚动条策略显示。  
<p>注意，rowHeader 是作为 width 首选大小的一部分计算的，colHeader 是作为首选大小的一部分计算的。
 
@param parent 将被布置的 <code>Container</code>
@return 指定视口和任何滚动条的首选大小的 <code>Dimension</code> 对象
@see ViewportLayout
@see LayoutManager

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.ScrollPaneLayout.minimumLayoutSize(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->

<code>ScrollPane</code> 的最小大小是 insets 加上视口最小大小，加上可见标题的最小大小，加上 displayPolicy 不为 NEVER 的滚动条的最小大小。
 
@param parent 将被布置的 <code>Container</code>
@return 指定最小大小的 <code>Dimension</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ScrollPaneLayout.layoutContainer(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->

布置滚动窗格。组件的放置取决于以下约束：
 <ul>
<li> 行标题，如果存在且可见的话，获取它的首选宽度大小以及视口的高度。
 
<li> 列标题，如果存在且可见的话，获取它的首选高度大小以及视口的宽度。
 
<li> 如果需要垂直滚动条，即如果视口的延伸高度小于它的视图高度，或者 <code>displayPolicy</code> 为 ALWAYS，在维度方面它将被视作行标题并且可见。
 
<li> 如果需要水平滚动条，它将被视作列标题（请参阅上段中有关垂直滚动条的内容）。
 
<li> 如果滚动窗格为非 <code>null</code> <code>viewportBorder</code>，将为其分配空间。
 
<li> 视口在满足前面的约束后获取可用的空间。
 
<li> 如果提供了角组件，它将与滚动条和标题的末尾对齐。如果有垂直滚动条，将显示右角；如果有水平滚动条，将显示底角；有行标题将显示左角，有列标题将显示上角。
 </ul>

@param parent 要布置的 <code>Container</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.ScrollPaneLayout.getViewportBorderBounds(JScrollPane scrollpane)
<!-- END KEY -->
<!-- BEGIN DATA -->

返回围绕指定滚动窗格视口的边框。

@return 视口边框的大小和位置
@deprecated 从 JDK version Swing1.1 开始，由 <code>JScrollPane.getViewportBorderBounds()</code> 取代。

<!-- END DATA -->
