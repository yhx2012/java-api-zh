<!-- BEGIN KEY -->
public class javax.swing.table.JTableHeader extends javax.swing.JComponent implements javax.swing.event.TableColumnModelListener, javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
这是管理 <code>JTable</code> 的头的对象。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前的序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.66 12/19/03
@author Alan Chung
@author Philip Milne
@see javax.swing.JTable

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JTable javax.swing.table.JTableHeader.table
<!-- END KEY -->
<!-- BEGIN DATA -->

将此对象作为其头的表，默认值为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.table.TableColumnModel javax.swing.table.JTableHeader.columnModel
<!-- END KEY -->
<!-- BEGIN DATA -->

表头的 <code>TableColumnModel</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.table.JTableHeader.reorderingAllowed
<!-- END KEY -->
<!-- BEGIN DATA -->

如果为 true，则允许用户重新排序各列；默认值为 true。 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.table.JTableHeader.resizingAllowed
<!-- END KEY -->
<!-- BEGIN DATA -->

如果为 true，则允许用户调整各列的大小；默认值为 true。 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.table.JTableHeader.updateTableInRealTime
<!-- END KEY -->
<!-- BEGIN DATA -->
从 Java 2 platform v1.3 开始已过时。为响应列拖动或调整大小而进行的实时重新绘制现在是无条件的。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.table.TableColumn javax.swing.table.JTableHeader.resizingColumn
<!-- END KEY -->
<!-- BEGIN DATA -->
进行大小调整的列的索引。如果未调整大小，则为 <code>null</code>。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.table.TableColumn javax.swing.table.JTableHeader.draggedColumn
<!-- END KEY -->
<!-- BEGIN DATA -->
被拖动列的索引。如果未拖动，则为 <code>null</code>。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient int javax.swing.table.JTableHeader.draggedDistance
<!-- END KEY -->
<!-- BEGIN DATA -->
列被拖离其初始位置的距离。
<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.table.TableCellRenderer javax.swing.table.JTableHeader.defaultRenderer
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>TableColumn</code> 未定义 <code>headerRenderer</code> 时所使用的默认渲染器。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.JTableHeader()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有默认 <code>TableColumnModel</code> 的 <code>JTableHeader</code>。

@see #createDefaultColumnModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.JTableHeader(TableColumnModel cm)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造 <code>JTableHeader</code>，使用 <code>cm</code> 作为列模型对其进行初始化。如果 <code>cm</code> 为 <code>null</code>，则此方法将使用默认的 <code>TableColumnModel</code> 来初始化其表头。

@param cm  该表的列模型
@see #createDefaultColumnModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.setTable(JTable table)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置与此头关联的表。
@param  table   新表
@beaninfo bound: 设置与此头关联的表。   

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JTable javax.swing.table.JTableHeader.getTable()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回与此头关联的表。
@return <code>table</code> 属性

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.setReorderingAllowed(boolean reorderingAllowed)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用户是否可以拖动列头，以重新排序各列。

@param	reorderingAllowed	如果表视图应该允许重新排序，则为 true；否则为 false
@see	#getReorderingAllowed
@beaninfo bound: true description: Whether the user can drag column headers to reorder columns.   

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.table.JTableHeader.getReorderingAllowed()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果允许用户通过拖动各列的头对其进行重新安排，则返回 true；否则返回 false。默认值为 true。无论此设置为多少都可以通过编程方式重新安排各列。

@return  <code>reorderingAllowed</code> 属性
@see	#setReorderingAllowed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.setResizingAllowed(boolean resizingAllowed)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用户是否可以通过在头间拖动来调整各列的大小。

@param	resizingAllowed		如果表视图应该允许调整大小，则为 true 
@see	#getResizingAllowed
@beaninfo bound: true description: Whether the user can resize columns by dragging between headers.   

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.table.JTableHeader.getResizingAllowed()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果允许用户通过在头间拖动来调整各列的大小，则返回 true；否则返回 false。默认值为 true。无论此设置为多少都可以通过编程方式重新安排各列。

@return	<code>resizingAllowed</code> 属性
@see	#setResizingAllowed

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.TableColumn javax.swing.table.JTableHeader.getDraggedColumn()
<!-- END KEY -->
<!-- BEGIN DATA -->
当且仅当正在进行拖动时，返回被拖动的列，否则返回 <code>null</code>。

@return	如果正在进行拖动，则返回被拖动的列；否则返回 <code>null</code>
@see	#getDraggedDistance

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.JTableHeader.getDraggedDistance()
<!-- END KEY -->
<!-- BEGIN DATA -->
当且仅当正在进行拖动时，返回该列到其初始位置的水平距离。否则返回值无意义。

@return	当且仅当正在进行拖动时，返回该列到其初始位置的水平距离；否则返回值无意义
@see	#getDraggedColumn

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.TableColumn javax.swing.table.JTableHeader.getResizingColumn()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回正在调整其大小的列。如果未调整列的大小，则此方法返回 <code>null</code>。

@return	如果正在进行大小调整，则返回调整其大小的列；否则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.setUpdateTableInRealTime(boolean flag)
<!-- END KEY -->
<!-- BEGIN DATA -->
从 Java 2 platform v1.3 开始已过时。为响应列拖动或调整大小而进行的实时重新绘制现在是无条件的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.table.JTableHeader.getUpdateTableInRealTime()
<!-- END KEY -->
<!-- BEGIN DATA -->
从 Java 2 platform v1.3 开始已过时。为响应列拖动或调整大小而进行的实时重新绘制现在是无条件的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.setDefaultRenderer(TableCellRenderer defaultRenderer)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>TableColumn</code> 未定义 <code>headerRenderer</code> 时所使用的默认渲染器。
@param  defaultRenderer  默认渲染器
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.TableCellRenderer javax.swing.table.JTableHeader.getDefaultRenderer()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>TableColumn</code> 未定义 <code>headerRenderer</code> 时所使用的默认渲染器。
@return 默认渲染器
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.JTableHeader.columnAtPoint(Point point)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该 <code>point</code> 所处列的索引，如果列位于边界外，则返回  -1。

@return	该 <code>point</code> 所处列的索引，如果列位于边界外，则返回  -1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.table.JTableHeader.getHeaderRect(int column)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含 <code>column</code> 处头 tile 的矩形。<code>column</code> 参数超出范围时，此方法使用与 <code>JTable</code> 的 <code>getCellRect</code> 方法相同的约定。 

@return	包含 <code>column</code> 处头 tile 的矩形
@see JTable#getCellRect

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.table.JTableHeader.getToolTipText(MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果设置了提示文本，则允许使用渲染器的提示。
@param  event  标识正确渲染器和正确提示的事件位置 
@return 此组件的工具提示

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.TableHeaderUI javax.swing.table.JTableHeader.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回渲染此组件的外观 (L&F) 对象。

@return 渲染此组件的 <code>TableHeaderUI</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.setUI(TableHeaderUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置渲染此组件的 (L&F) 对象。

@param ui <code>TableHeaderUI</code> L&F 对象
@see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>UIManager</code> 发出的关于 L&F 已更改的通知。用来自 <code>UIManager</code> 的最新版本 UI 对象替换当前的 UI 对象。

@see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.table.JTableHeader.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于构造外观 (L&F) 类名称的后缀，该类用于渲染此组件。
@return &quot;TableHeaderUI&quot; 字符串

@return &quot;TableHeaderUI&quot;
@see JComponent#getUIClassID
@see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.setColumnModel(TableColumnModel columnModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此表的列模型设置为 <code>newModel</code>，并向侦听器注册来自新列模型的通知。

@param	columnModel	此表的新数据源
@exception IllegalArgumentException  如果 <code>newModel</code> 为 <code>null</code>
@see  	#getColumnModel
@beaninfo bound:true description: The object governing the way columns appear in the view.   

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.TableColumnModel javax.swing.table.JTableHeader.getColumnModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含此表头所有列信息的 <code>TableColumnModel</code>。

@return	<code>columnModel</code> 属性
@see	#setColumnModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.columnAdded(TableColumnModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将列添加到表列模型时调用。
 <p>
应用程序代码不显式地使用这些方法，它们由 <code>JTable</code> 在内部使用。

@param  e  接收到的事件
@see TableColumnModelListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.columnRemoved(TableColumnModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
从表列模型中移除列时调用。
 <p>
应用程序代码不显式地使用这些方法，它们由 <code>JTable</code> 在内部使用。

@param  e  接收到的事件
@see TableColumnModelListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.columnMoved(TableColumnModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
重新定位列时调用。
 <p>
应用程序代码不显式地使用这些方法，它们由 <code>JTable</code> 在内部使用。

@param  e  接收到的事件
@see TableColumnModelListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.columnMarginChanged(ChangeEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
当列由于间距改变而被移动时调用。
 <p>
应用程序代码不显式地使用这些方法，它们由 <code>JTable</code> 在内部使用。

@param  e  接收到的事件
@see TableColumnModelListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.columnSelectionChanged(ListSelectionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
当 <code> TableColumnModel</code> 的选择模型更改时调用。此方法当前无效（不重绘头）。
 <p>
应用程序代码不显式地使用这些方法，它们由 <code>JTable</code> 在内部使用。

@param  e  接收到的事件
@see TableColumnModelListener

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.table.TableColumnModel javax.swing.table.JTableHeader.createDefaultColumnModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回默认的列模型对象，它是 <code>DefaultTableColumnModel</code>。子类可以重写此方法，以返回不同的列模型对象。

@return 默认的列模型对象

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.table.TableCellRenderer javax.swing.table.JTableHeader.createDefaultRenderer()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>TableColumn</code> 未定义头渲染器时所使用的默认渲染器。 

@return 默认的表列渲染器
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.table.JTableHeader.initializeLocalVars()
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认值初始化局部变量和属性。由构造方法使用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.resizeAndRepaint()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定头的大小并将其标记为需要显示。等效于 <code>revalidate</code> 后跟 <code>repaint</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.setDraggedColumn(TableColumn aColumn)
<!-- END KEY -->
<!-- BEGIN DATA -->

将头的 <code>draggedColumn</code> 设置为 <code>aColumn</code>。
  <p>
应用程序代码不显式地使用此方法，它们由列拖动机制在内部使用。

@param  aColumn  被拖动的列，如果没有列被拖动，则为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.setDraggedDistance(int distance)
<!-- END KEY -->
<!-- BEGIN DATA -->

将头的 <code>draggedDistance</code> 设置为 <code>distance</code>。
@param distance  拖动的距离

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.setResizingColumn(TableColumn aColumn)
<!-- END KEY -->
<!-- BEGIN DATA -->

将头的 <code>resizingColumn</code> 设置为 <code>aColumn</code>。
  <p>
应用程序代码不显式地使用此方法，它们由列大小调整机制在内部使用。

@param  aColumn  调整其大小的列，如果现在没有调整列的大小，则为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.table.JTableHeader.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JTableHeader</code> 的字符串表示形式。此方法仅在进行调试的时候使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。
 <P>
重写 <code>paramString</code> 以提供有关特定的新的 JFC 组件方面的信息。
 
@return  此 <code>JTableHeader</code> 的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.table.JTableHeader.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 JTableHeader 关联的 AccessibleContext。对于 JTableHeaders，AccessibleContext 采用 AccessibleJTableHeader 的形式。如有必要，则会创建一个新的 AccessibleJTableHeader 实例。

@return 一个 AccessibleJTableHeader，用作此 JTableHeader 的 AccessibleContext

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.table.JTableHeader.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

有关 Swing 中序列化的更多信息，请参阅 <code>JComponent</code> 中的 <code>readObject</code> 和 <code>writeObject</code>。

<!-- END DATA -->
