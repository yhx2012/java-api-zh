<!-- BEGIN KEY -->
public class javax.swing.table.TableColumn extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>TableColumn</code> 表示 <code>JTable</code> 中列的所有属性，如宽度、大小可调整性、最小和最大宽度。此外，<code>TableColumn</code> 还为显示和编辑此列中值的渲染器和编辑器提供了槽。 
  <p>
还可以基于每种类型，而不是每列来指定渲染器和编辑器，请参阅 <code>JTable</code> 类中的 <code>setDefaultRenderer</code> 方法。此默认机制仅用于 <code>TableColumn</code> 中的渲染器（或编辑器）为 <code>null</code> 的情况。
 <p>
<code>TableColumn</code> 存储 <code>JTable</code> 中各列与 <code>TableModel</code> 中各列之间的链接。<code>modelIndex</code> 是 <code>TableModel</code> 中的列，要获得此列中单元格的数据值，可对 <code>modelIndex</code> 进行查询。在视图中移动列时，此 <code>modelIndex</code> 不更改。
  <p>
<b>注：</b>某些实现可能假定所有 <code>TableColumnModel</code> 都是唯一的，因此我们建议不要多次将同一 <code>TableColumn</code> 实例添加到 <code>TableColumnModel</code> 中。要从模型中显示具有相同数据列的 <code>TableColumn</code>，可创建具有相同 <code>modelIndex</code> 的新实例。
  <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.60 05/18/04
@author Alan Chung
@author Philip Milne
@see javax.swing.table.TableColumnModel

@see javax.swing.table.DefaultTableColumnModel
@see javax.swing.table.JTableHeader#getDefaultRenderer()
@see JTable#getDefaultRenderer(Class)
@see JTable#getDefaultEditor(Class)
@see JTable#getCellRenderer(int, int)
@see JTable#getCellEditor(int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.table.TableColumn.COLUMN_WIDTH_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->

从 Java 2 platform v1.3 开始已过时。请使用 string 字面值来标识属性。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.table.TableColumn.HEADER_VALUE_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->

从 Java 2 platform v1.3 开始已过时。请使用 string 字面值来标识属性。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.table.TableColumn.HEADER_RENDERER_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->

从 Java 2 platform v1.3 开始已过时。请使用 string 字面值来标识属性。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.table.TableColumn.CELL_RENDERER_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->

从 Java 2 platform v1.3 开始已过时。请使用 string 字面值来标识属性。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.table.TableColumn.modelIndex
<!-- END KEY -->
<!-- BEGIN DATA -->
模型中的列索引，通过此 <code>TableColumn</code> 显示该模型。在视图中移动列时，<code>modelIndex</code> 保持不变。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object javax.swing.table.TableColumn.identifier
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 <code>JTable</code> 的绘制机制，此对象不会在内部使用；可在 <code>TableColumn</code> 中设置标识符，并将其作为标记和定位表列的可选方式。table 包只修改或调用这些标识符对象中的 <code>equals</code> 方法，该方法用于 <code>DefaultTableColumnModel</code> 中的 <code>getColumnIndex()</code> 方法中。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.table.TableColumn.width
<!-- END KEY -->
<!-- BEGIN DATA -->
列的宽度。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.table.TableColumn.minWidth
<!-- END KEY -->
<!-- BEGIN DATA -->
列的最小宽度。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.table.TableColumn.maxWidth
<!-- END KEY -->
<!-- BEGIN DATA -->
列的最大宽度。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.table.TableCellRenderer javax.swing.table.TableColumn.headerRenderer
<!-- END KEY -->
<!-- BEGIN DATA -->
用于绘制列标题的渲染器。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object javax.swing.table.TableColumn.headerValue
<!-- END KEY -->
<!-- BEGIN DATA -->
列的标题值。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.table.TableCellRenderer javax.swing.table.TableColumn.cellRenderer
<!-- END KEY -->
<!-- BEGIN DATA -->
用于绘制列的数据单元格的渲染器。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.table.TableCellEditor javax.swing.table.TableColumn.cellEditor
<!-- END KEY -->
<!-- BEGIN DATA -->
用于编辑列的数据单元格的编辑器。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.table.TableColumn.isResizable
<!-- END KEY -->
<!-- BEGIN DATA -->
如果为 true，则允许用户调整列的大小；默认值为 true。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient int javax.swing.table.TableColumn.resizedPostingDisableCount
<!-- END KEY -->
<!-- BEGIN DATA -->
在以前的版本中不使用此字段，并且当前也没有计划以后支持它。
 
@deprecated 从 Java 2 platform v1.3 开始

<!-- END DATA -->
<!-- BEGIN KEY -->
private int javax.swing.table.TableColumn.preferredWidth
<!-- END KEY -->
<!-- BEGIN DATA -->
列的首选宽度。
<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.event.SwingPropertyChangeSupport javax.swing.table.TableColumn.changeSupport
<!-- END KEY -->
<!-- BEGIN DATA -->
如果已注册任意 <code>PropertyChangeListeners</code>，则 <code>changeSupport</code> 字段描述它们。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.TableColumn()
<!-- END KEY -->
<!-- BEGIN DATA -->

覆盖方法，它使用的默认模型索引为 0、默认宽度为 75、渲染器为 <code>null</code>、编辑器为 <code>null</code>。此方法用于进行序列化。
@see #TableColumn(int, int, TableCellRenderer, TableCellEditor)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.TableColumn(int modelIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->

覆盖方法，它使用的默认宽度为 75、渲染器为 <code>null</code>、编辑器为 <code>null</code>。
@see #TableColumn(int, int, TableCellRenderer, TableCellEditor)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.TableColumn(int modelIndex, int width)
<!-- END KEY -->
<!-- BEGIN DATA -->

覆盖方法，它使用的渲染器为 <code>null</code>、编辑器为 <code>null</code> 。
@see #TableColumn(int, int, TableCellRenderer, TableCellEditor)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.TableColumn(int modelIndex, int width, TableCellRenderer cellRenderer, TableCellEditor cellEditor)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的模型索引、宽度、单元格渲染器、单元格编辑器创建并初始化 <code>TableColumn</code> 实例；所有 <code>TableColumn</code> 构造方法都委托给此方法。<code>width</code> 的值用于初始宽度和首选宽度；如果 <code>width</code> 为负，则将它们设置为 0。将最小宽度设置为 15，如果初始宽度更小，则将最小宽度设置为初始宽度的值。
<p>
当 <code>cellRenderer</code> 或 <code>cellEditor</code> 参数为 <code>null</code> 时，由 <code>JTable</code> 的 <code>getDefaultRenderer</code> 或 <code>getDefaultEditor</code> 方法提供的默认值分别用于根据此列中数据的类型来提供默认的渲染器和编辑器。通过重写 <code>JTable</code> 中的 <code>getCellRenderer</code> 方法可回避这种以列为中心的呈现策略。 

@param modelIndex 模型中列的索引，该模型提供表中此列的数据；即使列在视图中重新排序，该模型索引依然不变
@param width 此列的首选宽度和初始宽度
@param cellRenderer 用于呈现此列中值的对象
@param cellEditor 用于编辑此列中值的对象
@see #getMinWidth()
@see JTable#getDefaultRenderer(Class)
@see JTable#getDefaultEditor(Class)
@see JTable#getCellRenderer(int, int)
@see JTable#getCellEditor(int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumn.setModelIndex(int modelIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此列的模型索引。模型索引是模型中此 <code>TableColumn</code> 将要显示的列的索引。<code>TableColumn</code> 在视图中移动时，该模型索引保持不变。
@param  modelIndex  新的 modelIndex
@beaninfo bound: true 描述：The model index.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.TableColumn.getModelIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此列的模型索引。
@return <code>modelIndex</code> 属性

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumn.setIdentifier(Object identifier)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>TableColumn</code> 的标识符设置为 <code>anIdentifier</code>。 <p>
注：<code>JTable</code> 不使用标识符，它们只是为了便于外部标记和标识列的位置。

@param	   identifier		此列的标识符
@see	   #getIdentifier
@beaninfo bound: true description: A unique identifier for this column.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.table.TableColumn.getIdentifier()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此列的 <code>identifier</code> 对象。注意，<code>JTable</code> 不使用标识符，它们只是为了便于外部使用。如果 <code>identifier</code> 为 <code>null</code>，则 <code>getIdentifier()</code> 返回 <code>getHeaderValue</code> 作为默认值。

@return  <code>identifier</code> 属性
@see	#setIdentifier

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumn.setHeaderValue(Object headerValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>Object</code>，将使用其字符串表示形式作为 <code>headerRenderer</code> 的值。创建 <code>TableColumn</code> 时，默认的 <code>headerValue</code> 为 <code>null</code>。
@param headerValue  新的 headerValue
@see	  #getHeaderValue
@beaninfo bound: true description: The text to be used by the header renderer.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.table.TableColumn.getHeaderValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用作标题渲染器值的 <code>Object</code>。

@return  <code>headerValue</code> 属性
@see	#setHeaderValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumn.setHeaderRenderer(TableCellRenderer headerRenderer)
<!-- END KEY -->
<!-- BEGIN DATA -->
将用于绘制 <code>TableColumn</code> 的标题的 <code>TableCellRenderer</code> 设置为 <code>headerRenderer</code>。 
<p>
标题渲染器负责呈现排序指示符。如果正在使用排序并指定了渲染器，则此渲染器必须呈现排序指示。 

@param headerRenderer  新的 headerRenderer

@see	  #getHeaderRenderer
@beaninfo bound: true description: The header renderer.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.TableCellRenderer javax.swing.table.TableColumn.getHeaderRenderer()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于绘制 <code>TableColumn</code> 标题的 <code>TableCellRenderer</code>。<code>headerRenderer</code> 为 <code>null</code> 时，<code>JTableHeader</code> 使用其 <code>defaultRenderer</code>。<code>headerRenderer</code> 的默认值为 <code>null</code>。  

@return	<code>headerRenderer</code> 属性
@see	#setHeaderRenderer
@see	#setHeaderValue
@see	javax.swing.table.JTableHeader#getDefaultRenderer()

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumn.setCellRenderer(TableCellRenderer cellRenderer)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>JTable</code> 用于绘制此列各值的 <code>TableCellRenderer</code>。  

@param cellRenderer 新的 cellRenderer
@see	#getCellRenderer
@beaninfo bound: true description: The renderer to use for cell values.  

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.TableCellRenderer javax.swing.table.TableColumn.getCellRenderer()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>JTable</code> 用于绘制此列各值的 <code>TableCellRenderer</code>。列的 <code>cellRenderer</code> 不仅控制着该列的可视外观，而且还用于解释 <code>TableModel</code> 所提供的值对象。<code>cellRenderer</code> 为 <code>null</code> 时，<code>JTable</code> 根据该列中单元格的类来使用默认的编辑器。<code>cellRenderer</code> 的默认值为 <code>null</code>。  

@return	<code>cellRenderer</code> 属性
@see	#setCellRenderer
@see	JTable#setDefaultRenderer

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumn.setCellEditor(TableCellEditor cellEditor)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置编辑此列中单元格时所用的编辑器。  

@param cellEditor  新的 cellEditor
@see	#getCellEditor
@beaninfo bound: true description: The editor to use for cell values.     

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.TableCellEditor javax.swing.table.TableColumn.getCellEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>JTable</code> 用于编辑此列各值的 <code>TableCellEditor</code>。<code>cellEditor</code> 为 <code>null</code> 时，<code>JTable</code> 根据该列中单元格的类来使用默认的渲染器。<code>cellEditor</code> 的默认值为 <code>null</code>。  

@return	<code>cellEditor</code> 属性
@see	#setCellEditor
@see	JTable#setDefaultEditor

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumn.setWidth(int width)
<!-- END KEY -->
<!-- BEGIN DATA -->
不应使用此方法来设置 <code>JTable</code> 中列的宽度，而应使用 <code>setPreferredWidth</code>。与 AWT 中的布局管理器类似，在表本身更改大小时，或者更改列的首选宽度时，<code>JTable</code> 会自动调整列的宽度。因此，以编程方式设置宽度没有长期的效果。 
 <p>
此方法将此列的宽度设置为 <code>width</code>。如果 <code>width</code> 超出最小或最大宽度，则将其调整为合适的界限值。

@param  width  新宽度
@see	#getWidth
@see	#setMinWidth
@see	#setMaxWidth
@see	#setPreferredWidth
@see     JTable#doLayout()
@beaninfo bound: true description: The width of the column.     

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.TableColumn.getWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该 <code>TableColumn</code> 的宽度。默认宽度为 75。

@return	<code>width</code> 属性
@see	#setWidth

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumn.setPreferredWidth(int preferredWidth)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此列的首选宽度设置为 <code>preferredWidth</code>。如果 <code>preferredWidth</code> 超出最小或最大宽度，则将其调整为合适的界限值。 
 <p>
有关如何根据 <code>preferredWidth</code> 计算 <code>JTable</code>（和 <code>JTableHeader</code>）中列宽度的细节，请参见 <code>JTable</code> 中的 <code>doLayout</code> 方法。 

@param  preferredWidth 新的首选宽度
@see	#getPreferredWidth
@see     JTable#doLayout()
@beaninfo bound: true description: The preferred width of the column.     

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.TableColumn.getPreferredWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>TableColumn</code> 的首选宽度。默认首选宽度为 75。

@return	<code>preferredWidth</code> 属性
@see	#setPreferredWidth

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumn.setMinWidth(int minWidth)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>TableColumn</code> 的最小宽度设置为 <code>minWidth</code>，如有必要，调整新的最小宽度以确保 0 &lt;= <code>minWidth</code> &lt;= <code>maxWidth</code>。例如，如果 <code>minWidth</code> 参数为负，则此方法将 <code>minWidth</code> 属性设置为 0。

<p>
如果 <code>width</code> 或 <code>preferredWidth</code> 属性的值小于新的最小宽度，则此方法将该属性设置为新的最小宽度。

@param minWidth  新的最小宽度
@see	#getMinWidth
@see	#setPreferredWidth
@see	#setMaxWidth
@beaninfo bound: true description: The minimum width of the column.     

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.TableColumn.getMinWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>TableColumn</code> 的最小宽度。不能通过用户或编程的方式将 <code>TableColumn</code> 的宽度设置为小于此值。

@return	<code>minWidth</code> 属性
@see	#setMinWidth
@see     #TableColumn(int, int, TableCellRenderer, TableCellEditor)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumn.setMaxWidth(int maxWidth)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>TableColumn</code> 的最大宽度设置为 <code>maxWidth</code>；如果 <code>maxWidth</code> 小于最小宽度，则设置为最小宽度。
<p>
如果 <code>width</code> 或 <code>preferredWidth</code> 属性的值大于新的最大宽度，则此方法将该属性设置为新的最大宽度。

@param maxWidth  新的最大宽度
@see	#getMaxWidth
@see	#setPreferredWidth
@see	#setMinWidth
@beaninfo bound:true description:The maximum width of the column.     

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.TableColumn.getMaxWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>TableColumn</code> 的最大宽度。不能通过用户或编程的方式将 <code>TableColumn</code> 的宽度设置为大于此值。默认的 maxWidth 为 Integer.MAX_VALUE。

@return	<code>maxWidth</code> 属性
@see	#setMaxWidth

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumn.setResizable(boolean isResizable)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置是否可以调整此列的大小。

@param isResizable  如果为 true，则允许调整大小；否则为 false
@see	#getResizable
@beaninfo bound:true description: Whether or not this column can be resized.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.table.TableColumn.getResizable()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果允许用户调整 <code>TableColumn</code> 的宽度，则返回 true；否则返回 false。无论此设置是什么，都可以通过编程方式更改宽度。默认值为 true。

@return	<code>isResizable</code> 属性
@see	#setResizable

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumn.sizeWidthToFit()
<!-- END KEY -->
<!-- BEGIN DATA -->
调整 <code>TableColumn</code> 的大小，以适合其标题单元格的宽度。如果标题渲染器为 <code>null</code>（默认情况如此），则此方法不执行任何操作。否则，此方法将此列的最小、最大和首选宽度设置为标题渲染器所传递的 Component 的最小、最大和首选大小。此 TableColumn 的瞬态 &quot;width&quot; 属性也设置为首选宽度。注意，table 包不会在内部使用此方法。 

@see	#setPreferredWidth

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumn.disableResizedPosting()
<!-- END KEY -->
<!-- BEGIN DATA -->
在以前的版本中不使用此字段，并且当前也没有计划以后支持它。
 
@deprecated 从 Java 2 platform v1.3 开始

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumn.enableResizedPosting()
<!-- END KEY -->
<!-- BEGIN DATA -->
在以前的版本中不使用此字段，并且当前也没有计划以后支持它它。
 
@deprecated 从 Java 2 platform v1.3 开始

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.table.TableColumn.addPropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
向侦听器列表中添加一个 <code>PropertyChangeListener</code>。该侦听器是为所有属性注册的。
 <p>
响应对当前组件上 <code>setFont</code>、<code>setBackground</code> 或 <code>setForeground</code> 的显式调用时，将触发一个 <code>PropertyChangeEvent</code>。注意，如果当前组件将继承其容器的前景、背景或字体，则在响应所继承属性中的更改时不会触发任何事件。

@param listener 要添加的侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.table.TableColumn.removePropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
从侦听器列表中移除一个 <code>PropertyChangeListener</code>。所移除的 <code>PropertyChangeListener</code> 是为所有属性注册的。

@param listener 要移除的侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.beans.PropertyChangeListener[] javax.swing.table.TableColumn.getPropertyChangeListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回使用 addPropertyChangeListener() 添加到此 TableColumn 的所有 <code>PropertyChangeListener</code> 组成的数组。

@return 添加的所有 <code>PropertyChangeListener</code>，如果没有添加侦听器，则返回一个空数组
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.table.TableCellRenderer javax.swing.table.TableColumn.createDefaultHeaderRenderer()
<!-- END KEY -->
<!-- BEGIN DATA -->

从 Java 2 platform v1.3 开始，<code>TableColumn</code> 构造方法不再调用此方法。以前 <code>TableColumn</code> 使用此方法来创建默认的标题渲染器。从 Java 2 platform v1.3 开始，默认的标题渲染器为 <code>null</code>。<code>JTableHeader</code> 现在提供其自己的共享默认渲染器，就像 <code>JTable</code> 为其单元格渲染器所提供的。

@return 默认的标题渲染器
@see javax.swing.table.JTableHeader#createDefaultRenderer()

<!-- END DATA -->
