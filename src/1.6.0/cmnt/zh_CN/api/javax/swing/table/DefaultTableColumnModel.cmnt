<!-- BEGIN KEY -->
public class javax.swing.table.DefaultTableColumnModel extends java.lang.Object implements javax.swing.table.TableColumnModel, java.beans.PropertyChangeListener, javax.swing.event.ListSelectionListener, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>JTable</code> 的标准列处理程序。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前的序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.48 05/05/04
@author Alan Chung
@author Philip Milne
@see JTable

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Vector<javax.swing.table.TableColumn> javax.swing.table.DefaultTableColumnModel.tableColumns
<!-- END KEY -->
<!-- BEGIN DATA -->
此模型中 TableColumn 对象组成的数组
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.ListSelectionModel javax.swing.table.DefaultTableColumnModel.selectionModel
<!-- END KEY -->
<!-- BEGIN DATA -->
跟踪列选择的模型
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.table.DefaultTableColumnModel.columnMargin
<!-- END KEY -->
<!-- BEGIN DATA -->
每列之间的空白宽度
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.EventListenerList javax.swing.table.DefaultTableColumnModel.listenerList
<!-- END KEY -->
<!-- BEGIN DATA -->
TableColumnModelListener 的列表
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.event.ChangeEvent javax.swing.table.DefaultTableColumnModel.changeEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
更改事件（只需要一个）
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.table.DefaultTableColumnModel.columnSelectionAllowed
<!-- END KEY -->
<!-- BEGIN DATA -->
此列模型中允许的列选择
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.table.DefaultTableColumnModel.totalColumnWidth
<!-- END KEY -->
<!-- BEGIN DATA -->
所有列总宽度的本地缓存
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.DefaultTableColumnModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建默认的表列模型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.DefaultTableColumnModel.addColumn(TableColumn aColumn)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>aColumn</code> 追加到 <code>tableColumns</code> 数组的结尾。此方法还将 <code>columnAdded</code> 事件发送到它的侦听器。

@param	aColumn		要添加的 <code>TableColumn</code>
@exception IllegalArgumentException	如果 <code>aColumn</code> 为 <code>null</code>
@see	#removeColumn

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.DefaultTableColumnModel.removeColumn(TableColumn column)
<!-- END KEY -->
<!-- BEGIN DATA -->
从 <code>tableColumns</code> 数组删除 <code>column</code>。如果 <code>column</code> 不在该表各列的列表中，则此方法不执行任何操作。此方法调用 <code>tile</code> 重新调整标题和表视图的大小。此方法还将 <code>columnRemoved</code> 事件发送到它的侦听器。

@param	column		要移除的 <code>TableColumn</code>
@see	#addColumn

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.DefaultTableColumnModel.moveColumn(int columnIndex, int newIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>columnIndex</code> 位置的列和标题移到 <code>newIndex</code>。原来在 <code>columnIndex</code> 位置的列现在可以在 <code>newIndex</code> 处找到。<code>newIndex</code> 位置上的原有列向左或右移动以留出空间。如果 <code>columnIndex</code> 等于 <code>newIndex</code>，则此操作不移动任何列。此方法还将 <code>columnMoved</code> 事件发送到它的侦听器。

@param	columnIndex			要移动列的索引
@param	newIndex			将列移动到该新索引位置
@exception IllegalArgumentException	如果 <code>column</code> 或 <code>newIndex</code> 不在有效范围内

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.DefaultTableColumnModel.setColumnMargin(int newMargin)
<!-- END KEY -->
<!-- BEGIN DATA -->
将列空白设置为 <code>newMargin</code>。此方法还将 <code>columnMarginChanged</code> 事件发送到它的侦听器。

@param	newMargin		新的空白宽度，以像素为单位
@see	#getColumnMargin
@see	#getTotalColumnWidth

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.DefaultTableColumnModel.getColumnCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>tableColumns</code> 数组中的列数。

@return	<code>tableColumns</code> 数组中的列数
@see	#getColumns

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<javax.swing.table.TableColumn> javax.swing.table.DefaultTableColumnModel.getColumns()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该模型中所有列的一个 <code>Enumeration</code>。
@return 该模型中所有列的一个 <code>Enumeration</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.DefaultTableColumnModel.getColumnIndex(Object identifier)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>tableColumns</code> 数组中第一列的索引，当使用 <code>equals</code> 进行比较时，该列的标识符等于 <code>identifier</code>。

@param		identifier		标识符对象
@return         <code>tableColumns</code> 数组中第一列的索引，该列的标识符等于 <code>identifier</code>
@exception       IllegalArgumentException 如果 <code>identifier</code> 为 <code>null</code>，或者没有 <code>TableColumn</code> 具有此 <code>identifier</code>
@see		#getColumn

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.TableColumn javax.swing.table.DefaultTableColumnModel.getColumn(int columnIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>columnIndex</code> 处列的 <code>TableColumn</code> 对象。

@param	columnIndex	所需列的索引
@return	<code>columnIndex</code> 处列的 <code>TableColumn</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.DefaultTableColumnModel.getColumnMargin()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>TableColumn</code> 的空白宽度。默认的 <code>columnMargin</code> 为 1。

@return	<code>TableColumn</code> 的最大宽度
@see	#setColumnMargin

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.DefaultTableColumnModel.getColumnIndexAtX(int x)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回位于 <code>x</code> 处列的索引，如果该点处没有列，则返回 -1。

为了与 Swing 的可分离模型架构保持一致，TableColumnModel 不知道表的各列是如何实际显示在屏幕上的。各列的可视化表示由使用此模型的视图/控制器（通常是 JTable）来负责。该视图/控制器无需从左到右按顺序显示各列。例如，为了适应语言环境的优先选择，可以从右到左显示各列，或者可能根据用户的请求隐藏某些列。因为模型不知道各列是如何在屏幕上布局的，所以不应将给定的 <code>xPosition</code> 认为是 2D 图形空间中的坐标。相反，应该将其认为是从模型中首列开始的一个宽度。如果需要 2D 空间中给定 X 坐标的列索引，则可以使用 <code>JTable.columnAtPoint</code>。

@param  x  需要的水平位置
@return	列的索引，如果未找到列，则返回 -1
@see javax.swing.JTable#columnAtPoint

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.DefaultTableColumnModel.getTotalColumnWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回所有列的总宽度。
@return <code>totalColumnWidth</code> 属性

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.DefaultTableColumnModel.setSelectionModel(ListSelectionModel newModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>TableColumnModel</code> 的选择模型设置为 <code>newModel</code>，并为来自新选择模型的侦听器通知注册它。如果 <code>newModel</code> 为 <code>null</code>，则抛出一个异常。

@param	newModel	新的选择模型
@exception IllegalArgumentException 如果 <code>newModel</code> 为 <code>null</code>
@see	#getSelectionModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ListSelectionModel javax.swing.table.DefaultTableColumnModel.getSelectionModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用来维护列选择状态的 <code>ListSelectionModel</code>。

@return	提供列选择状态的对象。如果不允许列选择，则返回 <code>null</code>。
@see	#setSelectionModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.DefaultTableColumnModel.setColumnSelectionAllowed(boolean flag)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置是否允许列选择。默认值为 false。
@param  flag 如果允许列选择，则为 true，否则为 false 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.table.DefaultTableColumnModel.getColumnSelectionAllowed()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果允许列选择，则返回 true，否则返回 false。默认值为 false。
@return <code>columnSelectionAllowed</code> 属性

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] javax.swing.table.DefaultTableColumnModel.getSelectedColumns()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含选定列的数组。如果 <code>selectionModel</code> 为 <code>null</code>，则返回一个空数组。
@return 包含选定列的数组，如果没有选定的列，或 <code>selectionModel</code> 为 <code>null</code>，则返回一个空数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.DefaultTableColumnModel.getSelectedColumnCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回选定的列数。
@return 选定的列数

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.DefaultTableColumnModel.addColumnModelListener(TableColumnModelListener x)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加表列模型事件的侦听器。
@param x  一个 <code>TableColumnModelListener</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.DefaultTableColumnModel.removeColumnModelListener(TableColumnModelListener x)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除表列模型事件的侦听器。
@param x  一个 <code>TableColumnModelListener</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.TableColumnModelListener[] javax.swing.table.DefaultTableColumnModel.getColumnModelListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个包含在此模型上注册的所有列模型侦听器的数组。

@return 此默认表列模型的所有 <code>ColumnModelListener</code>，如果当前没有已注册的列模型侦听器，则返回一个空数组

@see #addColumnModelListener
@see #removeColumnModelListener

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.table.DefaultTableColumnModel.fireColumnAdded(TableColumnModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有对此事件类型的通知感兴趣的已注册侦听器。使用传入此触发方法的参数延后（lazily）创建事件实例。
@param e  接收的事件
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.table.DefaultTableColumnModel.fireColumnRemoved(TableColumnModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有对此事件类型的通知感兴趣的已注册侦听器。使用传入此触发方法的参数延后创建事件实例。
@param e  接收的事件
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.table.DefaultTableColumnModel.fireColumnMoved(TableColumnModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有对此事件类型的通知感兴趣的已注册侦听器。使用传入此触发方法的参数延后创建事件实例。
@param e  接收的事件
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.table.DefaultTableColumnModel.fireColumnSelectionChanged(ListSelectionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有对此事件类型的通知感兴趣的已注册侦听器。使用传入此触发方法的参数延后创建事件实例。
@param e  接收的事件
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.table.DefaultTableColumnModel.fireColumnMarginChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有对此事件类型的通知感兴趣的已注册侦听器。使用传入此触发方法的参数延后创建事件实例。
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] javax.swing.table.DefaultTableColumnModel.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前已在此模型上注册为 <code><em>Foo</em>Listener</code> 的所有对象组成的数组。<code><em>Foo</em>Listener</code> 是用 <code>add<em>Foo</em>Listener</code> 方法注册的。

 <p>

可以使用 class 字面值（如 <code><em>Foo</em>Listener.class</code>）来指定 <code>listenerType</code> 参数。例如，可以使用以下代码查询 <code>DefaultTableColumnModel</code> <code>m</code> 的列模型侦听器：

 <pre>ColumnModelListener[] cmls = (ColumnModelListener[])(m.getListeners(ColumnModelListener.class));</pre>

如果不存在这样的侦听器，则此方法将返回一个空数组。

@param listenerType 请求的侦听器类型；此参数应该指定一个从 <code>java.util.EventListener</code> 继承的接口
@return 在此模型上注册为 <code><em>Foo</em>Listener</code> 的所有对象组成的数组，如果没有添加这样的侦听器，则返回一个空数组
@exception ClassCastException 如果 <code>listenerType</code> 未指定实现 <code>java.util.EventListener</code> 的类或接口。
 
@see #getColumnModelListeners
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.DefaultTableColumnModel.propertyChange(PropertyChangeEvent evt)
<!-- END KEY -->
<!-- BEGIN DATA -->
Property Change Listener 更改方法。用于跟踪列宽或首选列宽的更改。

@param  evt  <code>PropertyChangeEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.DefaultTableColumnModel.valueChanged(ListSelectionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
列选择更改时转发 <code>ListSelectionEvents</code> 的 <code>ListSelectionListener</code>。

@param e 更改事件

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.ListSelectionModel javax.swing.table.DefaultTableColumnModel.createSelectionModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的默认列表选择模型。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.table.DefaultTableColumnModel.recalcWidthCache()
<!-- END KEY -->
<!-- BEGIN DATA -->
重新计算所有列的总宽度。更新 <code>totalColumnWidth</code> 属性。

<!-- END DATA -->
