<!-- BEGIN KEY -->
public interface javax.swing.table.TableColumnModel
<!-- END KEY -->
<!-- BEGIN DATA -->
定义了适合用于 <code>JTable</code> 的表列模型对象的要求。

@version 1.25 05/05/04
@author Alan Chung
@author Philip Milne
@see DefaultTableColumnModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumnModel.addColumn(TableColumn aColumn)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>aColumn</code> 追加到 <code>tableColumns</code> 数组的结尾。此方法向其侦听器发送一个 <code>columnAdded</code> 事件。

@param   aColumn 要添加的 <code>TableColumn</code>
@see     #removeColumn

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumnModel.removeColumn(TableColumn column)
<!-- END KEY -->
<!-- BEGIN DATA -->
从 <code>tableColumns</code> 数组中删除 <code>TableColumn</code> <code>column</code>。如果 <code>column</code> 不处于该表各列的列表中，则此方法不执行任何操作。此方法向其侦听器发送一个 <code>columnRemoved</code> 事件。

@param   column  要移除的 <code>TableColumn</code> 
@see     #addColumn

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumnModel.moveColumn(int columnIndex, int newIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>columnIndex</code> 位置的列及其头移至 <code>newIndex</code>。原位于 <code>columnIndex</code> 位置的列现在将在 <code>newIndex</code> 处找到。将原位于 <code>newIndex</code> 位置的列向左或向右移动以留出空间。如果 <code>columnIndex</code> 等于 <code>newIndex</code>，则不移动任何列。此方法向其侦听器发送一个 <code>columnMoved</code> 事件。

@param   columnIndex 要移动的列的索引
@param   newIndex 该列新位置的索引
@exception IllegalArgumentException 如果 <code>columnIndex</code> 或 <code>newIndex</code> 不在有效范围内

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumnModel.setColumnMargin(int newMargin)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>TableColumn</code> 的列空白设置为 <code>newMargin</code>。此方法向其侦听器发送一个 <code>columnMarginChanged</code> 事件。

@param   newMargin 新列空白的宽度，以像素为单位
@see     #getColumnMargin

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.TableColumnModel.getColumnCount()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回该模型中的列数。
@return 该模型中的列数

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<javax.swing.table.TableColumn> javax.swing.table.TableColumnModel.getColumns()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回该模型中所有列的 <code>Enumeration</code>。
@return 该模型中所有列的 <code>Enumeration</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.TableColumnModel.getColumnIndex(Object columnIdentifier)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该表中首列的索引，使用 <code>equals</code> 进行比较时，该列的标识符等于 <code>identifier</code>。

@param columnIdentifier 标识符对象
@return 首个表列的索引，其标识符等于 <code>identifier</code>
@exception IllegalArgumentException 如果 <code>identifier</code> 为 <code>null</code>，或者没有 <code>TableColumn</code> 具有此 <code>identifier</code>
@see             #getColumn

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.TableColumn javax.swing.table.TableColumnModel.getColumn(int columnIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>columnIndex</code> 位置列的 <code>TableColumn</code> 对象。

@param   columnIndex  所需列的索引
@return <code>columnIndex</code> 位置列的 <code>TableColumn</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.TableColumnModel.getColumnMargin()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回每列中单元格之间的宽度。
@return 单元格之间的空白，以像素为单位

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.TableColumnModel.getColumnIndexAtX(int xPosition)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回位于该水平点 <code>xPosition</code> 位置列的索引；如果该点位于任何列边界外，则返回 -1。

在维护 Swing 的可分离模型架构的过程中，TableColumnModel 并不了解表的各列实际出现在屏幕上的方式。列的虚拟展示由使用此模型（通常是 JTable）的 view/controller 对象负责。view/controller 不必从左到右按顺序显示这些列。例如，为了适应语言环境的优先选择，可以从右到左显示各列，或者可能根据用户的请求隐藏某些列。因为该模型不了解各列在屏幕上的排列方式，所以不应将给定的 <code>xPosition</code> 考虑为 2D 图形空间中的坐标。相反，应将其考虑为从模型中第一列开始的宽度。如果要求 2D 空间中给定 X 坐标的列索引，则可以使用 <code>JTable.columnAtPoint</code>。

@return  列的索引；如果无法找到列，则返回 -1 
@see javax.swing.JTable#columnAtPoint

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.TableColumnModel.getTotalColumnWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回所有列的总宽度。
@return 计算出的所有列的总宽度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumnModel.setColumnSelectionAllowed(boolean flag)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置是否可以选择此模型中的列。
@param flag 如果可以选择列，则为 true；否则为 false
@see #getColumnSelectionAllowed

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.table.TableColumnModel.getColumnSelectionAllowed()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果可以选择列，则返回 true。
@return 如果可以选择列，则返回 true
@see #setColumnSelectionAllowed

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] javax.swing.table.TableColumnModel.getSelectedColumns()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回所有选定列的索引数组。
@return 包含所有选定列索引的整数数组；如果没有选定的列，则返回一个空数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.TableColumnModel.getSelectedColumnCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回选定的列数。

@return 选定的列数；如果没有选定的列，则返回 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumnModel.setSelectionModel(ListSelectionModel newModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置选择模型。

@param newModel <code>ListSelectionModel</code> 对象
@see #getSelectionModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ListSelectionModel javax.swing.table.TableColumnModel.getSelectionModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前的选择模型。

@return <code>ListSelectionModel</code> 对象
@see #setSelectionModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumnModel.addColumnModelListener(TableColumnModelListener x)
<!-- END KEY -->
<!-- BEGIN DATA -->
为表列模型事件添加侦听器。

@param x <code>TableColumnModelListener</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumnModel.removeColumnModelListener(TableColumnModelListener x)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除表列模型事件的侦听器。

@param x <code>TableColumnModelListener</code> 对象

<!-- END DATA -->
