<!-- BEGIN KEY -->
public class javax.swing.JSplitPane extends javax.swing.JComponent implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>JSplitPane</code> 用于分隔两个（只能两个）<code>Component</code>。两个 <code>Component</code> 图形化分隔以外观实现为基础，并且这两个 <code>Component</code> 可以由用户交互式调整大小。有关如何使用 <code>JSplitPane</code> 的信息，请参阅 <em>The Java Tutorial</em> 中的 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/components/splitpane.html">How to Use Split Panes</a> 一节。
 <p>
使用 <code>JSplitPane.HORIZONTAL_SPLIT</code> 可让分隔窗格中的两个 <code>Component</code> 从左到右排列，或者使用 <code>JSplitPane.VERTICAL_SPLIT</code> 使其从上到下排列。改变 <code>Component</code> 大小的首选方式是调用 <code>setDividerLocation</code>，其中 <code>location</code> 是新的 x 或 y 位置，具体取决于 <code>JSplitPane</code> 的方向。
 <p>
要将 <code>Component</code> 调整到其首选大小，可调用 <code>resetToPreferredSizes</code>。
 <p>
当用户调整 <code>Component</code> 的大小时，<code>Component</code> 的最小大小用于确定 <code>Component</code> 能够设置的最大/最小位置。如果两个组件的最小大小大于分隔窗格的大小，则分隔条将不允许您调整其大小。改变 <code>JComponent</code> 最小大小，请参阅 {@link JComponent#setMinimumSize}。
 <p>
当用户调整分隔窗格大小时，新的空间以 <code>resizeWeight</code> 为基础在两个组件之间分配。默认情况下，值为 0 表示右边/底部的组件获得所有空间，而值为 1 表示左边/顶部的组件获得所有空间。
 <p>
<strong>警告：</strong>Swing 不是线程安全的。有关更多信息，请参阅 <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@see #setDividerLocation
@see #resetToPreferredSizes

@version 1.76 12/19/03
@author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JSplitPane.VERTICAL_SPLIT
<!-- END KEY -->
<!-- BEGIN DATA -->
垂直分割表示 <code>Component</code> 沿 y 轴分割。例如，两个 <code>Component</code> 将被分割成一个在另一个顶上。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JSplitPane.HORIZONTAL_SPLIT
<!-- END KEY -->
<!-- BEGIN DATA -->
水平分割表示 <code>Component</code> 沿 x 轴分割。例如，两个 <code>Component</code> 将被分割成一个在另一个左边。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JSplitPane.LEFT
<!-- END KEY -->
<!-- BEGIN DATA -->
用于添加一个 <code>Component</code> 到另一个 <code>Component</code> 的左边。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JSplitPane.RIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
用于添加一个 <code>Component</code> 到另一个 <code>Component</code> 的右边。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JSplitPane.TOP
<!-- END KEY -->
<!-- BEGIN DATA -->
用于添加一个 <code>Component</code> 到另一个 <code>Component</code> 的上面。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JSplitPane.BOTTOM
<!-- END KEY -->
<!-- BEGIN DATA -->
用于添加一个 <code>Component</code> 到另一个 <code>Component</code> 的下面。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JSplitPane.DIVIDER
<!-- END KEY -->
<!-- BEGIN DATA -->
用于添加一个表示分隔条的 <code>Component</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JSplitPane.ORIENTATION_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
绑定 orientation（水平或者垂直）属性名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JSplitPane.CONTINUOUS_LAYOUT_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
绑定 continuousLayout 属性名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JSplitPane.DIVIDER_SIZE_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
绑定 border 属性名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JSplitPane.ONE_TOUCH_EXPANDABLE_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
绑定 oneTouchExpandable 属性。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JSplitPane.LAST_DIVIDER_LOCATION_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
绑定 lastLocation 属性。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JSplitPane.DIVIDER_LOCATION_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
绑定 dividerLocation 属性。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JSplitPane.RESIZE_WEIGHT_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
绑定 weight 属性。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.JSplitPane.orientation
<!-- END KEY -->
<!-- BEGIN DATA -->
如何分割视图。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JSplitPane.continuousLayout
<!-- END KEY -->
<!-- BEGIN DATA -->
当调整大小时视图是否连续重新显示。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.JSplitPane.leftComponent
<!-- END KEY -->
<!-- BEGIN DATA -->
左边或者顶部的组件。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.JSplitPane.rightComponent
<!-- END KEY -->
<!-- BEGIN DATA -->
右边或者底部的组件。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.JSplitPane.dividerSize
<!-- END KEY -->
<!-- BEGIN DATA -->
分隔条大小。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JSplitPane.oneTouchExpandable
<!-- END KEY -->
<!-- BEGIN DATA -->
是否要提供一个小部件来快速展开/折叠分隔窗格。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.JSplitPane.lastDividerLocation
<!-- END KEY -->
<!-- BEGIN DATA -->
分隔窗格的上一个位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
private double javax.swing.JSplitPane.resizeWeight
<!-- END KEY -->
<!-- BEGIN DATA -->
如何分配额外空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
private int javax.swing.JSplitPane.dividerLocation
<!-- END KEY -->
<!-- BEGIN DATA -->
分隔条的位置，至少是设置的那个值，UI 可能具有另外一个值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JSplitPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个配置为将其子组件水平排列、无连续布局、为组件使用两个按钮的新 <code>JSplitPane</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JSplitPane(int newOrientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个配置为指定方向且无连续布局的新 <code>JSplitPane</code>。

@param newOrientation  <code>JSplitPane.HORIZONTAL_SPLIT</code> 或 <code>JSplitPane.VERTICAL_SPLIT</code>
@exception IllegalArgumentException 如果 <code>orientation</code> 不是 HORIZONTAL_SPLIT 或 VERTICAL_SPLIT 之一。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JSplitPane(int newOrientation, boolean newContinuousLayout)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定方向和重绘方式的新 <code>JSplitPane</code>。

@param newOrientation  <code>JSplitPane.HORIZONTAL_SPLIT</code> 或 <code>JSplitPane.VERTICAL_SPLIT</code>
@param newContinuousLayout 一个 boolean 值，当分隔条改变位置时组件连续重绘则为 true；当分隔条位置停止改变时才重绘则为 false
@exception IllegalArgumentException 如果 <code>orientation</code> 不是 HORIZONTAL_SPLIT 或 VERTICAL_SPLIT 之一

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JSplitPane(int newOrientation, Component newLeftComponent, Component newRightComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定方向和不连续重绘的指定组件的新 <code>JSplitPane</code>。

@param newOrientation  <code>JSplitPane.HORIZONTAL_SPLIT</code> 或 <code>JSplitPane.VERTICAL_SPLIT</code>
@param newLeftComponent 将出现在水平分隔窗格的左边或者垂直分隔窗格的顶部的 <code>Component</code> 
@param newRightComponent 将出现在水平分隔窗格的右边或者垂直分隔窗格的底部的 <code>Component</code>
@exception IllegalArgumentException 如果 <code>orientation</code> 不是 HORIZONTAL_SPLIT 或 VERTICAL_SPLIT 之一

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JSplitPane(int newOrientation, boolean newContinuousLayout, Component newLeftComponent, Component newRightComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定方向、重绘方式和指定组件的新 <code>JSplitPane</code>。

@param newOrientation  <code>JSplitPane.HORIZONTAL_SPLIT</code> 或 <code>JSplitPane.VERTICAL_SPLIT</code>
@param newContinuousLayout  一个 boolean 值，当分隔条改变位置时组件连续重绘则为 true；当分隔条位置停止改变时才重绘则为 false
@param newLeftComponent 将出现在水平分隔窗格的左边或者垂直分隔窗格的顶部的 <code>Component</code>
@param newRightComponent 将出现在水平分隔窗格的右边或者垂直分隔窗格的底部的 <code>Component</code>
@exception IllegalArgumentException 如果 <code>orientation</code> 不是 HORIZONTAL_SPLIT 或 VERTICAL_SPLIT 之一

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSplitPane.setUI(SplitPaneUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置呈现此组件的 L&F 对象。

@param ui <code>SplitPaneUI</code> 的 L&F 对象
@see UIDefaults#getUI
@beaninfo bound: true hidden: true attribute: visualUpdate true description: 实现此组件的 LookAndFeel 的 UI 对象。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.SplitPaneUI javax.swing.JSplitPane.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回提供当前外观的 <code>SplitPaneUI</code>。 

@return 呈现此组件的 <code>SplitPaneUI</code> 对象
@beaninfo expert: true description: 呈现此组件的 L&F 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSplitPane.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>UIManager</code> 发出的关于 L&F 已改变的通知。用来自 <code>UIManager</code> 的最新版本 UI 对象替换当前的 UI 对象。

@see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JSplitPane.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回呈现此组件的 L&F 类名。

@return 字符串 &quot;SplitPaneUI&quot;
@see JComponent#getUIClassID
@see UIDefaults#getUI
@beaninfo expert: true description: 指定 L&F 类名的字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSplitPane.setDividerSize(int newSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置分隔条的大小。

@param newSize 给定分隔条大小的一个整数，以像素为单位
@beaninfo bound: true description: The size of the divider.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JSplitPane.getDividerSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回分隔条的大小。

@return 给定分隔条大小的一个整数，以像素为单位

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSplitPane.setLeftComponent(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件设置到分隔条的左边（或上面）。

@param comp 在该位置中显示的 <code>Component</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JSplitPane.getLeftComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回分隔条左边（或者上面）的组件。

@return 在该位置中显示的 <code>Component</code>
@beaninfo preferred: true description: 分隔条左边（或者上面）的组件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSplitPane.setTopComponent(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件设置到分隔条的上面或者左边。

@param comp 在该位置中显示的 <code>Component</code>
@beaninfo description: The component above, or to the left of the divider.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JSplitPane.getTopComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回分隔条上面或者左边的组件。

@return 在该位置中显示的 <code>Component</code> 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSplitPane.setRightComponent(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件设置到分隔条的右边（或者下面）。

@param comp 在该位置中显示的 <code>Component</code>
@beaninfo preferred: true description:分隔条右边（或者下面）的组件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JSplitPane.getRightComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回分隔条右边（或者下面）的组件。

@return 在该位置中显示的 <code>Component</code> 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSplitPane.setBottomComponent(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件设置到分隔条的下面或者右边。

@param comp 在该位置中显示的 <code>Component</code>
@beaninfo description: 分隔条下面或者右边的组件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JSplitPane.getBottomComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回分隔条下面或者右边的组件。

@return 在该位置中显示的 <code>Component</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSplitPane.setOneTouchExpandable(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>oneTouchExpandable</code> 属性的值，要使 <code>JSplitPane</code> 在分隔条上提供一个 UI 小部件来快速展开/折叠分隔条，此属性必须为 <code>true</code>。此属性的默认值为 <code>false</code>。有些外观可能不支持一键展开；它们将忽略此属性。

@param newValue 指定为 <code>true</code>，则分隔窗格应该提供一个折叠/展开的小部件
@beaninfo bound: true description: UI widget on the divider to quickly expand/collapse the divider.


@see #isOneTouchExpandable

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JSplitPane.isOneTouchExpandable()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>oneTouchExpandable</code> 属性。

@return <code>oneTouchExpandable</code> 的值
@see #setOneTouchExpandable

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSplitPane.setLastDividerLocation(int newLastLocation)
<!-- END KEY -->
<!-- BEGIN DATA -->
将分隔条所处的最后位置设置为 <code>newLastLocation</code>。

@param newLastLocation 指定分隔条最后位置从窗格的左边（或者上边）到分隔条的左边（或者上边）的一个整数，以像素为单位
@beaninfo bound: true description: 分隔条所处的最后位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JSplitPane.getLastDividerLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回分隔条所处的最后位置。

@return 指定分隔条最后位置从窗格的左边（或者上边）到分隔条的左边（或者上边）的一个整数，以像素为单位

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSplitPane.setOrientation(int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置方向，或者分隔窗格的方式。选项有：<ul>
<li>JSplitPane.VERTICAL_SPLIT（组件的上/下方向）
<li>JSplitPane.HORIZONTAL_SPLIT（组件的左/右方向）
 </ul>

@param orientation 指定方向的一个整数
@exception IllegalArgumentException 如果方向不是如下之一：HORIZONTAL_SPLIT 或 VERTICAL_SPLIT。
@beaninfo bound: true description: The orientation, or how the splitter is divided. enum: HORIZONTAL_SPLIT JSplitPane.HORIZONTAL_SPLIT VERTICAL_SPLIT   JSplitPane.VERTICAL_SPLIT

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JSplitPane.getOrientation()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回方向。
 
@return 给定方向的一个整数
@see #setOrientation

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSplitPane.setContinuousLayout(boolean newContinuousLayout)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>continuousLayout</code> 属性的值，在用户干预期要使子组件连续地重新显示和布局子组件，此值必须为 <code>true</code>。此属性的默认值为 <code>false</code>。一些外观可能不支持连续布局；它们将忽略此属性。

@param newContinuousLayout 如果分隔条改变位置时组件连续重绘，则为 <code>true</code>
@beaninfo bound: true description: Whether the child components are continuously redisplayed and laid out during user intervention.
@see #isContinuousLayout

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JSplitPane.isContinuousLayout()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>continuousLayout</code> 属性。

@return <code>continuousLayout</code> 属性的值
@see #setContinuousLayout

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSplitPane.setResizeWeight(double value)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定当分隔窗格的大小改变时如何分配额外空间。在默认情况下，值为 0 表示右边/底部的组件获得所有额外空间（左边/顶部的组件固定），而值为 1 表示左边/顶部的组件获得所有额外空间（右边/底部的组件固定）。特别地，左边/顶部的组件获得 (weight * diff) 额外空间，并且右边/底部的组件获得 (1 - weight) * diff 额外空间。

@param value 如上所述
@exception IllegalArgumentException 如果 <code>value</code> 小于 0 或者大于 1
@since 1.3
@beaninfo bound: true description: Specifies how to distribute extra space when the split pane resizes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public double javax.swing.JSplitPane.getResizeWeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回确定额外空间如何分配的数。
@return 在分隔窗格的一次大小调整中如何分配额外空间
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSplitPane.resetToPreferredSizes()
<!-- END KEY -->
<!-- BEGIN DATA -->
以子组件的首选大小为基础调整 <code>JSplitPane</code> 的布局。这将可能导致分隔条位置的改变。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSplitPane.setDividerLocation(double proportionalLocation)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置分隔条的位置为 <code>JSplitPane</code> 大小的一个百分比。
 <p>
根据 <code>setDividerLocation(int)</code> 来实现此方法。此方法以分隔窗格的当前大小为基础迅速改变窗格的大小。如果分隔窗格没有正确地实现并且不显示在屏幕上，此方法将不产生任何影响（新的分隔条位置将成为 0（当前的 size * proportionalLocation ））。

@param proportionalLocation  指示百分比的双精度浮点值，从 0 (top/left) 到 1.0 (bottom/right)
@exception IllegalArgumentException 如果指定的位置为 &lt; 0 or &gt; 1.0
@beaninfo description: 分隔条的位置

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSplitPane.setDividerLocation(int location)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置分隔条的位置。这将传递给外观实现，然后通知侦听器。一个值小于 0 意味着分隔条应该重设为试图遵守左边/顶部组件首选大小的一个值。通知侦听器之后，最后的分隔条位置通过 <code>setLastDividerLocation</code> 更新。

@param location 指定特定于 UI 值的一个整数（通常以像素为单位）
@beaninfo bound: true description: The location of the divider.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JSplitPane.getDividerLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最后传递给 <code>setDividerLocation</code> 的值。此方法返回的值可能与实际的分隔条位置不同（如果传递给 <code>setDividerLocation</code> 的值大于当前大小）。

@return 指定分隔条位置的一个整数

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JSplitPane.getMinimumDividerLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回外观实现中分隔条的最小位置。

@return 一个整数，它指定最小位置的特定于 UI 的值（通常以像素为单位）；如果 UI 为 <code>null</code>，则返回 -1
@beaninfo description: The minimum location of the divider from the L&F.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JSplitPane.getMaximumDividerLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回外观实现中分隔条的最大位置。

@return 指定最大位置的特定于 UI 值的一个整数（通常以像素为单位）；如果 UI 为 <code>null</code>，则返回 -1
@beaninfo description:

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSplitPane.remove(Component component)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除窗格中的子组件 <code>component</code>。如果必要，可重设 <code>leftComponent</code> 或 <code>rightComponent</code> 实例变量。
 
@param component 要移除的 <code>Component</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSplitPane.remove(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定索引处的 <code>Component</code>。如果必要，可更新 <code>leftComponent</code> 和 <code>rightComponent</code> 实例变量，然后通知超类。

@param index 指定要移除的组件的一个整数，为 1 时指定左边/顶部的组件，为 2 指定底部/右边的组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSplitPane.removeAll()
<!-- END KEY -->
<!-- BEGIN DATA -->
从分隔窗格中移除所有子组件。重设 <code>leftComponent</code> 和 <code>rightComponent</code> 实例变量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JSplitPane.isValidateRoot()
<!-- END KEY -->
<!-- BEGIN DATA -->

如果返回 true，则在此 <code>JSplitPane</code> 的任何后代上调用 <code>revalidate</code>，将导致在队列中加入一个验证 <code>JSplitPane</code> 及其所有后代的一个请求。
 
@return true
@see JComponent#revalidate
 
@beaninfo hidden: true

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JSplitPane.addImpl(Component comp, Object constraints, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定组件添加到此分隔窗格。如果 <code>constraints</code> 标识左边/顶部或者右边/底部的子组件，并且之前已添加了一个具有该标识符的组件，则该组件将被移除，然后 <code>comp</code> 将被添加到该位置。如果 <code>constraints</code> 不是已知的标识符之一，则布局管理器可能抛出一个 <code>IllegalArgumentException</code>。
 <p>
可能的约束对象（字符串）是：
 <ul>
 <li>JSplitPane.TOP
 <li>JSplitPane.LEFT
 <li>JSplitPane.BOTTOM
 <li>JSplitPane.RIGHT
 </ul>
如果 <code>constraints</code> 对象为 <code>null</code>，则组件将被添加到第一个可用位置（如果展开，则为左边/顶部；否则为右边/底部）。
 
@param comp 要添加的组件
@param constraints 指定此组件布局约束（位置）的一个 <code>Object</code>
@param index 指定容器列表中索引的一个整数。
@exception IllegalArgumentException 如果 <code>constraints</code> 对象不匹配现有的组件
@see java.awt.Container#addImpl(Component, Object, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JSplitPane.paintChildren(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知超类后，UI 通过 <code>finishedPaintingChildren</code> 通知子类，同时绘制边框。

@param g 在其中进行绘制的 <code>Graphics</code> 上下文

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JSplitPane.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JSplitPane</code> 的字符串表示形式。此方法仅在进行调试的时候使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。
 
@return  此 <code>JSplitPane</code> 的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JSplitPane.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与 JSplitPane 关联的 AccessibleContext。对于分隔窗格，AccessibleContext 采用 AccessibleJSplitPane 的形式。必要时创建新的 AccessibleJSplitPane 实例。

@return 一个 AccessibleJSplitPane，它充当此 JSplitPane 的 AccessibleContext
@beaninfo expert: true description: The AccessibleContext associated with this SplitPane.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JSplitPane.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

有关 Swing 中序列化的更多信息，请参阅 <code>JComponent</code> 中的 <code>readObject</code> 和 <code>readObject</code>。

<!-- END DATA -->
