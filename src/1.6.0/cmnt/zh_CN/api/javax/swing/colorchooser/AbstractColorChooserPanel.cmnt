<!-- BEGIN KEY -->
public abstract class javax.swing.colorchooser.AbstractColorChooserPanel extends javax.swing.JPanel
<!-- END KEY -->
<!-- BEGIN DATA -->
这是用于颜色选取器的抽象超类。如果希望在 <code>JColorChooser</code> 中添加一个新的颜色选取器面板，请创建该类的子类。
 <p>
<strong>警告：</strong>此类已序列化的对象将不再与以后的 Swing 版本兼容。当前的序列化支持适合在运行相同 Swing 版本的应用程序之间短期存储或 RMI。从 1.4 版开始，已在 <code>java.beans</code> 包中加入对所有 JavaBeans<sup><font size="-2">TM</font></sup> 的长期存储支持。请参见 {@link java.beans.XMLEncoder}。

@version 1.20 12/19/03
@author Tom Santos
@author Steve Wilson

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.JColorChooser javax.swing.colorchooser.AbstractColorChooserPanel.chooser
<!-- END KEY -->
<!-- BEGIN DATA -->


<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.event.ChangeListener javax.swing.colorchooser.AbstractColorChooserPanel.colorListener
<!-- END KEY -->
<!-- BEGIN DATA -->
 

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean javax.swing.colorchooser.AbstractColorChooserPanel.dirty
<!-- END KEY -->
<!-- BEGIN DATA -->
 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.colorchooser.AbstractColorChooserPanel.updateChooser()
<!-- END KEY -->
<!-- BEGIN DATA -->
在模型状态更改时自动调用。也可以由 <code>installChooserPanel</code> 来调用它，以便允许您设置选取器的初始状态。重写此方法以更新 <code>ChooserPanel</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void javax.swing.colorchooser.AbstractColorChooserPanel.buildChooser()
<!-- END KEY -->
<!-- BEGIN DATA -->
建立一个新的选取器面板。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String javax.swing.colorchooser.AbstractColorChooserPanel.getDisplayName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个包含面板显示名称的字符串。
@return 显示面板的名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.colorchooser.AbstractColorChooserPanel.getMnemonic()
<!-- END KEY -->
<!-- BEGIN DATA -->
提供关于 <code>KeyEvent.VK</code> 常量的外观方面的提示，此常量可用作访问面板的助记符。返回值 &lt;= 0 表明无助记符。
 <p>
这里的返回值是一个提示，最终由外观来为此返回值赋予真实的含义。
 <p>
此实现返回 0，表明 <code>AbstractColorChooserPanel</code> 不支持助记符，希望使用助记符的子类需要重写此方法。

@return 标识助记符的 KeyEvent.VK 常量；返回值 &lt;= 0 表示无助记符
@see #getDisplayedMnemonicIndex
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.colorchooser.AbstractColorChooserPanel.getDisplayedMnemonicIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
提供关于 <code>getDisplayName</code> 中字符的索引在外观方面的提示，字符索引应以可视化的方式标识为助记符。如果 <code>getMnemonic</code> 返回值 &gt; 0，外观应当只用助记符。
 <p>
这里的返回值是一个提示，最终由外观来为此返回值赋予真实的含义。例如，外观希望在 <code>JTabbedPane</code> 中呈现每个 <code>AbstractColorChooserPanel</code>，然后进一步使用该返回值来为 <code>getDisplayName</code> 中的某个字符加下划线。
 <p>
此实现返回 -1，表明 <code>AbstractColorChooserPanel</code> 不支持助记符，希望使用助记符的子类需要重写此方法。

@return 呈现助记符的字符索引；-1 表示不为该面板提供任何可视化标识符。
@see #getMnemonic
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.Icon javax.swing.colorchooser.AbstractColorChooserPanel.getSmallDisplayIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此面板的小图标。
@return 小显示图标

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.Icon javax.swing.colorchooser.AbstractColorChooserPanel.getLargeDisplayIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此面板的大显示图标。
@return 大显示图标

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.colorchooser.AbstractColorChooserPanel.installChooserPanel(JColorChooser enclosingChooser)
<!-- END KEY -->
<!-- BEGIN DATA -->
将面板添加到选取器时被调用。如果要重写此方法，一定要确保调用 <code>super</code>。
@param enclosingChooser  要添加的面板
@exception RuntimeException  如果已安装了选取器面板

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.colorchooser.AbstractColorChooserPanel.uninstallChooserPanel(JColorChooser enclosingChooser)
<!-- END KEY -->
<!-- BEGIN DATA -->
从选取器中移除面板时被调用。如果要重写此方法，一定要确保调用 <code>super</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.colorchooser.ColorSelectionModel javax.swing.colorchooser.AbstractColorChooserPanel.getColorSelectionModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回选取器面板正在编辑的模型。
@return 此面板正在编辑的 <code>ColorSelectionModel</code> 模型

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Color javax.swing.colorchooser.AbstractColorChooserPanel.getColorFromModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前所选取的颜色。
@return 所选取的 <code>Color</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.colorchooser.AbstractColorChooserPanel.paint(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制面板。
@param g <code>Graphics</code> 对象

<!-- END DATA -->
