<!-- BEGIN KEY -->
public class javax.swing.DefaultBoundedRangeModel extends java.lang.Object implements javax.swing.BoundedRangeModel, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
BoundedRangeModel 的一般实现。
 <p>
<strong>警告：</strong>此类的序列化对象将与以后的 Swing 版本不兼容。当前的序列化支持适用于短期存储或运行相同 Swing 版本的应用程序之间的 RMI。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.46 05/05/04
@author David Kloba
@author Hans Muller
@see BoundedRangeModel

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.event.ChangeEvent javax.swing.DefaultBoundedRangeModel.changeEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
由于事件的惟一状态（只读）为源属性，所以每个模型实例只需要一个 <code>ChangeEvent</code>。这里生成的事件源总是&ldquo;this&rdquo;。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.EventListenerList javax.swing.DefaultBoundedRangeModel.listenerList
<!-- END KEY -->
<!-- BEGIN DATA -->
等待模型更改的侦听器。
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.DefaultBoundedRangeModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认值初始化所有属性。这些值是：
 <ul>
 <li><code>value</code> = 0
 <li><code>extent</code> = 0
 <li><code>minimum</code> = 0
 <li><code>maximum</code> = 100
 <li><code>adjusting</code> = false
 </ul>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.DefaultBoundedRangeModel(int value, int extent, int min, int max)
<!-- END KEY -->
<!-- BEGIN DATA -->
初始化 value、extent、minimum 和 maximum。调整是错误的。如果不满足以下约束条件，则抛出 <code>IllegalArgumentException</code>：
 <pre>
 min &lt;= value &lt;= value+extent &lt;= max
 </pre>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultBoundedRangeModel.getValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回模型的当前值。
@return 模型的当前值
@see #setValue
@see BoundedRangeModel#getValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultBoundedRangeModel.getExtent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回模型的 extent。
@return 模型的 extent
@see #setExtent
@see BoundedRangeModel#getExtent

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultBoundedRangeModel.getMinimum()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回模型的 minimum。
@return 模型的 minimum
@see #setMinimum
@see BoundedRangeModel#getMinimum

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultBoundedRangeModel.getMaximum()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回模型的 maximum。
@return  模型的 maximum
@see #setMaximum
@see BoundedRangeModel#getMaximum

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultBoundedRangeModel.setValue(int n)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置模型的当前值。对于滑块，该值确定调节器出现的位置。确保新值 <I>n</I> 落在以下模型约束范围内：
 <pre>
     minimum &lt;= value &lt;= value+extent &lt;= maximum
 </pre>
 
@see BoundedRangeModel#setValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultBoundedRangeModel.setExtent(int n)
<!-- END KEY -->
<!-- BEGIN DATA -->

在确保 <I>n</I> 大于或等于零，且落在以下模型约束范围内之后，将 extent 设置为 <I>n</I>：
 <pre>
     minimum &lt;= value &lt;= value+extent &lt;= maximum
 </pre>
@see BoundedRangeModel#setExtent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultBoundedRangeModel.setMinimum(int n)
<!-- END KEY -->
<!-- BEGIN DATA -->

在确保 <I>n</I> 以及其他三个属性满足以下模型约束条件之后，将 minimum 设置为 <I>n</I>：
 <pre>
     minimum &lt;= value &lt;= value+extent &lt;= maximum
 </pre>
@see #getMinimum
@see BoundedRangeModel#setMinimum

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultBoundedRangeModel.setMaximum(int n)
<!-- END KEY -->
<!-- BEGIN DATA -->

在确保 <I>n</I> 以及其他三个属性满足以下模型约束条件之后，将 maximum 设置为 <I>n</I>：
 <pre>
     minimum &lt;= value &lt;= value+extent &lt;= maximum
 </pre>
@see BoundedRangeModel#setMaximum

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultBoundedRangeModel.setValueIsAdjusting(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>valueIsAdjusting</code> 属性。
 
@see #getValueIsAdjusting
@see #setValue
@see BoundedRangeModel#setValueIsAdjusting

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultBoundedRangeModel.getValueIsAdjusting()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果该值由于用户正执行操作而处于更改过程中，则返回 true。

@return <code>valueIsAdjusting</code> 属性的值
@see #setValue
@see BoundedRangeModel#getValueIsAdjusting

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultBoundedRangeModel.setRangeProperties(int newValue, int newExtent, int newMin, int newMax, boolean adjusting)
<!-- END KEY -->
<!-- BEGIN DATA -->
在强行使参数满足以下常规约束条件之后，设置所有的 <code>BoundedRangeModel</code> 属性：
 <pre>
     minimum &lt;= value &lt;= value+extent &lt;= maximum
 </pre>
 <p>
至多生成一个 <code>ChangeEvent</code>。
 
@see BoundedRangeModel#setRangeProperties
@see #setValue
@see #setExtent
@see #setMinimum
@see #setMaximum
@see #setValueIsAdjusting

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultBoundedRangeModel.addChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加一个 <code>ChangeListener</code>。每当任何一个 Bounded Range 模型属性发生更改时，更改侦听器都会运行。

@param l 要添加的 ChangeListener
@see #removeChangeListener
@see BoundedRangeModel#addChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultBoundedRangeModel.removeChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除一个 <code>ChangeListener</code>。

@param l 要移除的 <code>ChangeListener</code>
@see #addChangeListener
@see BoundedRangeModel#removeChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.ChangeListener[] javax.swing.DefaultBoundedRangeModel.getChangeListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>DefaultBoundedRangeModel</code> 上所有已注册的更改侦听器组成的数组。

@return 此模型的所有 <code>ChangeListener</code>，如果当前没有已注册的更改侦听器，则返回一个空数组。

@see #addChangeListener
@see #removeChangeListener

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.DefaultBoundedRangeModel.fireStateChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->

运行每个 <code>ChangeListener</code> 的 <code>stateChanged</code> 方法。
 
@see #setRangeProperties
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.DefaultBoundedRangeModel.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回显示所有 <code>BoundedRangeModel</code> 属性的字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] javax.swing.DefaultBoundedRangeModel.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前已在此模型上注册为 <code><em>Foo</em>Listener</code> 的所有对象组成的数组。<code><em>Foo</em>Listener</code> 是用 <code>add<em>Foo</em>Listener</code> 方法注册的。
 <p>
可以使用 class 字面值来指定 <code>listenerType</code> 参数，如 <code><em>Foo</em>Listener.class</code>。例如，可以使用下面的代码查询 <code>DefaultBoundedRangeModel</code> 实例 <code>m</code> 的更改侦听器：

<pre>ChangeListener[] cls = (ChangeListener[])(m.getListeners(ChangeListener.class));</pre>

如果不存在这样的侦听器，则此方法将返回一个空数组。

@param listenerType 所请求侦听器的类型；此参数应该指定一个从 <code>java.util.EventListener</code> 遗传下来的接口
@return 在此模型上注册为 <code><em>Foo</em>Listener</code> 的所有对象组成的数组，如果没有添加这样的侦听器，则返回一个空数组
@exception ClassCastException 如果 <code>listenerType</code> 没有指定实现 <code>java.util.EventListener</code> 的类或接口

@see #getChangeListeners

@since 1.3

<!-- END DATA -->
