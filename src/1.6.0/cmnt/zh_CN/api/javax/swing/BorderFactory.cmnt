<!-- BEGIN KEY -->
public class javax.swing.BorderFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
提供标准 <code>Border</code> 对象的工厂类。在任何可能的地方，此工厂类都将提供对已共享 <code>Border</code> 实例的引用。有关更多信息和示例，请参阅 <em>The Java Tutorial</em> 中的 <a href="http://java.sun.com/docs/books/tutorial/uiswing/misc/border.html">How to Use Borders</a> 一节。

@version 1.30 12/19/03
@author David Kloba

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createLineBorder(Color color)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定颜色的线边框。

@param color  用于线条的 <code>Color</code>
@return <code>Border</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createLineBorder(Color color, int thickness)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定颜色和宽度的线边框。该宽度将应用于边框的四条边。要分别指定顶线、底线、左边框线和右边框线的宽度，请使用 {@link #createMatteBorder(int,int,int,int,Color)}。

@param color  用于线条的颜色 <code>Color</code>
@param thickness  指定宽度的整数，以像素为单位
@return <code>Border</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createRaisedBevelBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有凸出斜面边缘的边框，将组件当前背景色的较亮的色度用于高亮显示，较暗的色度用于阴影。（在凸出边框中，高亮显示位于顶部，阴影位于其下。）

@return <code>Border</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createLoweredBevelBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有凹入斜面边缘的边框，将组件当前背景色的较亮的色度用于高亮显示，较暗的色度用于阴影。（在凹入边框中，阴影位于顶部，高亮显示位于其下。）

@return <code>Border</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createBevelBorder(int type)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个指定类型的斜面边框，将组件当前背景色的较亮的色度用于高亮显示，较暗的色度用于阴影。（在凹入边框中，阴影位于顶部，高亮显示位于其下。）

@param type  指定 <code>BevelBorder.LOWERED</code> 或 <code>BevelBorder.RAISED</code> 的整数
@return <code>Border</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createBevelBorder(int type, Color highlight, Color shadow)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定高亮显示和阴影显示方式来创建一个指定类型的斜面边框。高亮显示区域的外边缘使用高亮显示颜色的较明亮的色度。突出阴影区域的内边缘使用阴影颜色的较明亮的色度。
 
@param type  指定 <code>BevelBorder.LOWERED</code> 或 <code>BevelBorder.RAISED</code> 的整数
@param highlight  用于高亮显示的 <code>Color</code> 对象
@param shadow     用于阴影的 <code>Color</code> 对象
@return <code>Border</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createBevelBorder(int type, Color highlightOuter, Color highlightInner, Color shadowOuter, Color shadowInner)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个指定类型的斜面边框，使用内部和外部高亮显示区域及阴影区域的指定颜色。 
 <p>
注：对于凹入斜面边框，交换阴影内部和外部颜色。
 
@param type  指定 <code>BevelBorder.LOWERED</code> 或 <code>BevelBorder.RAISED</code> 的整数
@param highlightOuter  用于高亮显示区域的外边缘的 <code>Color</code> 对象
@param highlightInner  用于高亮显示区域的内边缘的 <code>Color</code> 对象
@param shadowOuter     用于阴影区域的外边缘的 <code>Color</code> 对象
@param shadowInner     用于阴影区域的内边缘的 <code>Color</code> 对象
@return <code>Border</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createEtchedBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有&ldquo;浮雕化&rdquo;外观效果的边框，将组件的当前背景色用于高亮显示和阴影显示。

@return <code>Border</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createEtchedBorder(Color highlight, Color shadow)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的高亮显示颜色和阴影颜色创建一个具有&ldquo;浮雕化&rdquo;外观效果的边框。

@param highlight  用于边框高亮显示的 <code>Color</code> 对象
@param shadow     用于边框阴影的 <code>Color</code> 对象
@return <code>Border</code> 对象 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createEtchedBorder(int type)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有&ldquo;浮雕化&rdquo;外观效果的边框，将组件的当前背景色用于高亮显示和阴影显示。

@param type	<code>EtchedBorder.RAISED</code> 或 <code>EtchedBorder.LOWERED</code> 之一
@return <code>Border</code> 对象
@exception IllegalArgumentException 如果类型既不是 <code>EtchedBorder.RAISED</code> 也不是 <code>EtchedBorder.LOWERED</code>
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createEtchedBorder(int type, Color highlight, Color shadow)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的高亮显示颜色和阴影颜色创建一个具有&ldquo;浮雕化&rdquo;外观效果的边框。

@param type	<code>EtchedBorder.RAISED</code> 或 <code>EtchedBorder.LOWERED</code> 之一
@param highlight  用于边框高亮显示的 <code>Color</code> 对象
@param shadow     用于边框阴影的 <code>Color</code> 对象
@return <code>Border</code> 对象
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.TitledBorder javax.swing.BorderFactory.createTitledBorder(String title)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新标题边框，使其具有指定的标题、默认的边框类型（由当前外观确定）、默认的文本位置（位于顶线上）、默认的调整 (leading)，以及默认的字体和文本颜色（由当前外观确定）。

@param title      包含标题文本的 <code>String</code>
@return <code>TitledBorder</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.TitledBorder javax.swing.BorderFactory.createTitledBorder(Border border)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个空标题的新标题边框，使其具有指定的边框对象、默认的文本位置（位于顶线上）、默认的调整 (leading)，以及默认的字体和文本颜色（由当前外观确定）。

@param border     向其添加标题的 <code>Border</code> 对象；如果该参数为 <code>null</code>，则 <code>Border</code> 由当前外观确定。
@return <code>TitledBorder</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.TitledBorder javax.swing.BorderFactory.createTitledBorder(Border border, String title)
<!-- END KEY -->
<!-- BEGIN DATA -->
向现有边框添加一个标题，使其具有默认的位置（位于顶线上）、默认的调整 (leading)，以及默认的字体和文本颜色（由当前外观确定）。

@param border     向其添加标题的 <code>Border</code> 对象
@param title      包含标题文本的 <code>String</code>
@return <code>TitledBorder</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.TitledBorder javax.swing.BorderFactory.createTitledBorder(Border border, String title, int titleJustification, int titlePosition)
<!-- END KEY -->
<!-- BEGIN DATA -->
向现有边框添加一个标题，使其具有指定的位置和默认字体和文本颜色（由当前外观确定）。

@param border      向其添加标题的 <code>Border</code> 对象
@param title       包含标题文本的 <code>String</code>
@param titleJustification  指定标题调整的整数，该值为以下值之一：
<ul>
<li><code>TitledBorder.LEFT</code>
<li><code>TitledBorder.CENTER</code>
<li><code>TitledBorder.RIGHT</code>
<li><code>TitledBorder.LEADING</code>
<li><code>TitledBorder.TRAILING</code>
<li><code>TitledBorder.DEFAULT_JUSTIFICATION</code> (leading)
</ul>
@param titlePosition       指示文本相对于边框的纵向位置的整数，它为以下值之一：
<ul>
<li><code>TitledBorder.ABOVE_TOP</code>
<li><code>TitledBorder.TOP</code>（位于顶线上）
<li><code>TitledBorder.BELOW_TOP</code>
<li><code>TitledBorder.ABOVE_BOTTOM</code>
<li><code>TitledBorder.BOTTOM</code>（位于底线上）
<li><code>TitledBorder.BELOW_BOTTOM</code>
<li><code>TitledBorder.DEFAULT_POSITION</code>（顶部）
</ul>
@return <code>TitledBorder</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.TitledBorder javax.swing.BorderFactory.createTitledBorder(Border border, String title, int titleJustification, int titlePosition, Font titleFont)
<!-- END KEY -->
<!-- BEGIN DATA -->
向现有边框添加一个标题，使其具有指定的位置和默认的文本颜色（由当前外观确定）。

@param border      向其添加标题的 <code>Border</code> 对象
@param title       包含标题文本的 <code>String</code>
@param titleJustification  指定标题调整的整数，该值为以下值之一：
<ul>
<li><code>TitledBorder.LEFT</code>
<li><code>TitledBorder.CENTER</code>
<li><code>TitledBorder.RIGHT</code>
<li><code>TitledBorder.LEADING</code>
<li><code>TitledBorder.TRAILING</code>
<li><code>TitledBorder.DEFAULT_JUSTIFICATION</code> (leading)
</ul>
@param titlePosition       指示文本相对于边框的纵向位置的整数，它为以下值之一：
<ul>
<li><code>TitledBorder.ABOVE_TOP</code>
<li><code>TitledBorder.TOP</code>（位于顶线上）
<li><code>TitledBorder.BELOW_TOP</code>
<li><code>TitledBorder.ABOVE_BOTTOM</code>
<li><code>TitledBorder.BOTTOM</code>（位于底线上）
<li><code>TitledBorder.BELOW_BOTTOM</code>
<li><code>TitledBorder.DEFAULT_POSITION</code>（顶部）
</ul>
@param titleFont           指定标题字体的 Font 对象
@return TitledBorder 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.TitledBorder javax.swing.BorderFactory.createTitledBorder(Border border, String title, int titleJustification, int titlePosition, Font titleFont, Color titleColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
向现有边框添加一个标题，使其具有指定的位置、字体和颜色。

@param border      向其添加标题的 <code>Border</code> 对象
@param title       包含标题文本的 <code>String</code>
@param titleJustification  指定标题调整的整数，该值为以下值之一：
<ul>
<li><code>TitledBorder.LEFT</code>
<li><code>TitledBorder.CENTER</code>
<li><code>TitledBorder.RIGHT</code>
<li><code>TitledBorder.LEADING</code>
<li><code>TitledBorder.TRAILING</code>
<li><code>TitledBorder.DEFAULT_JUSTIFICATION</code> (leading)
</ul>
@param titlePosition       指示文本相对于边框的纵向位置的整数，它为以下值之一：
<ul>
<li><code>TitledBorder.ABOVE_TOP</code>
<li><code>TitledBorder.TOP</code>（位于顶线上）
<li><code>TitledBorder.BELOW_TOP</code>
<li><code>TitledBorder.ABOVE_BOTTOM</code>
<li><code>TitledBorder.BOTTOM</code>（位于底线上）
<li><code>TitledBorder.BELOW_BOTTOM</code>
<li><code>TitledBorder.DEFAULT_POSITION</code>（顶部）
</ul>
@param titleFont   指定标题字体的 <code>Font</code> 对象
@param titleColor  指定标题颜色的 <code>Color</code> 对象
@return <code>TitledBorder</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createEmptyBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个不占用空间的空边框。（顶线、底线、左边框线和右边框线的宽度都为零。）

@return <code>Border</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createEmptyBorder(int top, int left, int bottom, int right)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个占用空间但没有绘制的空边框，指定了顶线、底线、左边框线和右边框线的宽度。

@param top     指定顶线宽度的整数，以像素为单位
@param left    指定左边框线宽度的整数，以像素为单位
@param bottom  指定底线宽度的整数，以像素为单位
@param right   指定右边框线宽度的整数，以像素为单位
@return <code>Border</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.CompoundBorder javax.swing.BorderFactory.createCompoundBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有 <code>null</code> 内部边缘和 <code>null</code> 外部边缘的合成边框。

@return <code>CompoundBorder</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.CompoundBorder javax.swing.BorderFactory.createCompoundBorder(Border outsideBorder, Border insideBorder)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个合成边框，指定了用于外部和内部边缘的 border 对象。

@param outsideBorder  用于合成边框的外部边缘的 <code>Border</code> 对象
@param insideBorder   用于合成边框的内部边缘的 <code>Border</code> 对象
@return <code>CompoundBorder</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.MatteBorder javax.swing.BorderFactory.createMatteBorder(int top, int left, int bottom, int right, Color color)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用纯色创建一个类似衬边的边框。（此边框与线边框的不同之处在于您可以指定单独的边框尺寸。）

@param top     指定顶线宽度的整数，以像素为单位
@param left    指定左边框线宽度的整数，以像素为单位
@param right 指定右边框线宽度的整数，以像素为单位
@param bottom   指定底线宽度的整数，以像素为单位
@param color   用于边框的 <code>Color</code>
@return <code>MatteBorder</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.MatteBorder javax.swing.BorderFactory.createMatteBorder(int top, int left, int bottom, int right, Icon tileIcon)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个由多层指定图标组成的、类似衬边的边框。该图标的多个副本被并行放置在一起来填充边框区域。
 <p>
注：<br>如果无法加载该图标，则边框区域被绘制为灰色。

@param top     指定顶线宽度的整数，以像素为单位
@param left    指定左边框线宽度的整数，以像素为单位
@param right  指定右边框线宽度的整数，以像素为单位
@param bottom   指定底线宽度的整数，以像素为单位
@param tileIcon  用于边框平铺显示的 <code>Icon</code> 对象
@return <code>MatteBorder</code> 对象

<!-- END DATA -->
