<!-- BEGIN KEY -->
public class javax.swing.SwingUtilities extends java.lang.Object implements javax.swing.SwingConstants
<!-- END KEY -->
<!-- BEGIN DATA -->
Swing 实用方法的集合。

@version 1.134 06/15/04
@author unknown

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final boolean javax.swing.SwingUtilities.isRectangleContainingRectangle(Rectangle a, Rectangle b)
<!-- END KEY -->
<!-- BEGIN DATA -->

如果 <code>a</code> 包含 <code>b</code>，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Rectangle javax.swing.SwingUtilities.getLocalBounds(Component aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回组件 <code>aComponent</code> 的矩形 (0,0,bounds.width,bounds.height)。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Window javax.swing.SwingUtilities.getWindowAncestor(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>c</code> 的第一个 <code>Window</code> 祖先；如果 <code>c</code> 未包含在 <code>Window</code> 内，则返回 {@code null}。

@param c 要获取其 <code>Window</code> 祖先的 <code>Component</code>。
@return 返回 <code>c</code> 的第一个 <code>Window</code> 祖先；如果 <code>c</code> 未包含在 <code>Window</code> 内，则返回 {@code null}。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Point javax.swing.SwingUtilities.convertPoint(Component source, Point aPoint, Component destination)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>source</code> 坐标系统中的 <code>aPoint</code> 转换到 <code>destination</code> 坐标系统。如果 <code>source</code> 为 {@code null}，则假定 <code>aPoint</code> 位于 <code>destination</code> 的根组件坐标系统中。如果 <code>destination</code> 为 {@code null}，则将 <code>aPoint</code> 转换到 <code>source</code> 的根组件坐标系统。如果 <code>source</code> 和 <code>destination</code> 都为 {@code null}，则返回 <code>aPoint</code>，无需进行任何转换。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Point javax.swing.SwingUtilities.convertPoint(Component source, int x, int y, Component destination)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>source</code> 坐标系统中的点 <code>(x,y)</code> 转换到 <code>destination</code> 坐标系统。如果 <code>source</code> 为 {@code null}，则假定 <code>(x,y)</code> 位于 <code>destination</code> 的根组件坐标系统中。如果 <code>destination</code> 为 {@code null}，则将 <code>(x,y)</code> 转换到 <code>source</code> 的根组件坐标系统。如果 <code>source</code> 和 <code>destination</code> 都为 {@code null}，则返回 <code>(x,y)</code>，无需进行任何转换。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Rectangle javax.swing.SwingUtilities.convertRectangle(Component source, Rectangle aRectangle, Component destination)
<!-- END KEY -->
<!-- BEGIN DATA -->

将 <code>source</code> 坐标系统中的矩形 <code>aRectangle</code> 转换到 <code>destination</code> 坐标系统。如果 <code>source</code> 为 {@code null}，则假定 <code>aRectangle</code> 位于 <code>destination</code> 的根组件坐标系统中。如果 <code>destination</code> 为 {@code null}，则将 <code>aRectangle</code> 转换到 <code>source</code> 的根组件坐标系统。如果 <code>source</code> 和 <code>destination</code> 都为 {@code null}，则返回 <code>aRectangle</code>，无需进行任何转换。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Container javax.swing.SwingUtilities.getAncestorOfClass(java.lang.Class<?> c, Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
在组件层次结构中搜索上面的 <code>comp</code> 的便捷方法，返回它找到的类 <code>c</code> 的第一个对象。如果无法找到类 <code>c</code>，可以返回 {@code null}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Container javax.swing.SwingUtilities.getAncestorNamed(String name, Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
在组件层次结构中搜索上面的 <code>comp</code> 的便捷方法，返回它找到的 <code>name</code> 第一个对象。如果无法找到 <code>name</code>，可以返回 {@code null}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Component javax.swing.SwingUtilities.getDeepestComponentAt(Component parent, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含位置 <code>x</code>、<code>y</code> 的 <code>parent</code> 的最深可见后代组件。如果 <code>parent</code> 未包含指定位置，则返回 <code>null</code>。如果 <code>parent</code> 不是容器，或者没有一个 <code>parent</code> 的可见后代包含指定位置，则返回 <code>parent</code>。

@param parent 开始该搜索的根组件
@param x 该 x 目标位置
@param y 该 y 目标位置  

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.event.MouseEvent javax.swing.SwingUtilities.convertMouseEvent(Component source, MouseEvent sourceEvent, Component destination)
<!-- END KEY -->
<!-- BEGIN DATA -->

返回类似于 <code>sourceEvent</code> 的 MouseEvent，除了其 x 和 y 成员已转换到 <code>destination</code> 的坐标系统。如果 <code>source</code> 为 {@code null}，则假定已将 <code>sourceEvent</code> x 和 y 成员转换到 <code>destination</code> 的根组件坐标系统。如果 <code>destination</code> 为 <code>null</code>，则返回的 MouseEvent 将位于 <code>source</code> 的坐标系统中。<code>sourceEvent</code> 不会更改。返回一个新事件。返回事件的 <code>source</code> 字段将被设置为 <code>destination</code>。如果目标为非 {@code null}，则在不更改源的情况下使用 translateMouseEvent() 方法将鼠标事件从一个组件转换到另一个组件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SwingUtilities.convertPointToScreen(Point p, Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个点从组件的坐标系统转换到屏幕坐标。

@param p  一个 Point 对象（已转换到新坐标系统）
@param c  一个 Component 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SwingUtilities.convertPointFromScreen(Point p, Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个点从屏幕坐标转换到组件的坐标系统

@param p  一个 Point 对象（已转换到新坐标系统）
@param c  一个 Component 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Window javax.swing.SwingUtilities.windowForComponent(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>c</code> 的第一个 <code>Window</code> 祖先；如果 <code>c</code> 未包含在 <code>Window</code> 内，则返回 {@code null}。
 <p>
注：此方法与 <code>getWindowAncestor</code> 提供的功能相同。

@param c 要获取其 <code>Window</code> 祖先的 <code>Component</code>。
@return <code>c</code> 的第一个 <code>Window </code> 祖先；如果 <code>c</code> 未包含在 <code>Window</code> 内，则返回 {@code null}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.SwingUtilities.isDescendingFrom(Component a, Component b)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果组件 <code>a</code> 从组件 <code>b</code> 继承，则返回 <code>true</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Rectangle javax.swing.SwingUtilities.computeIntersection(int x, int y, int width, int height, Rectangle dest)
<!-- END KEY -->
<!-- BEGIN DATA -->
在未分配新矩形的情况下计算两个矩形的交集的便捷方法。如果这两个矩形不相交，则返回的矩形从 (0,0) 开始，宽度和高度都是 0。

@param x       第一个矩形的左上顶点的 X 坐标
@param y       第一个矩形的左上顶点的 Y 坐标
@param width   第一个矩形的宽度
@param height  第一个矩形的高度
@param dest    第二个矩形

@return <code>dest</code>，已改为指定交集

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Rectangle javax.swing.SwingUtilities.computeUnion(int x, int y, int width, int height, Rectangle dest)
<!-- END KEY -->
<!-- BEGIN DATA -->
在未分配新矩形的情况下计算两个矩形的并集的便捷方法。

@param x 第一个矩形的 x 坐标
@param y 第一个矩形的 y 坐标
@param width 第一个矩形的宽度
@param height 第一个矩形的高度
@param dest  第二个矩形的坐标；在此矩形中返回两个矩形的并集
@return 该 <code>dest</code> <code>Rectangle</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Rectangle[] javax.swing.SwingUtilities.computeDifference(Rectangle rectA, Rectangle rectB)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回矩形数组的便捷方法，该矩形表示不与 <code>rectB</code> 重叠的 <code>rectA</code> 内的区域。如果两个矩形不重叠，则返回一个空数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.SwingUtilities.isLeftMouseButton(MouseEvent anEvent)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果鼠标事件指定左边鼠标按键，则返回 true。

@param anEvent  一个 MouseEvent 对象
@return 如果左边鼠标按键处于活动状态，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.SwingUtilities.isMiddleMouseButton(MouseEvent anEvent)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果鼠标事件指定中间鼠标按键，则返回 true。

@param anEvent  一个 MouseEvent 对象
@return 如果中间鼠标按键处于活动状态，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.SwingUtilities.isRightMouseButton(MouseEvent anEvent)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果鼠标事件指定右边鼠标按键，则返回 true。

@param anEvent  一个 MouseEvent 对象
@return 如果右边鼠标按键处于活动状态，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.swing.SwingUtilities.computeStringWidth(FontMetrics fm, String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用具有指定&ldquo;规格&rdquo;（大小）的字体计算字符串的宽度。

@param fm   用来计算的 FontMetrics 对象
@param str  要计算的字符串
@return 一个包含该字符串宽度的 int 值

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String javax.swing.SwingUtilities.layoutCompoundLabel(JComponent c, FontMetrics fm, String text, Icon icon, int verticalAlignment, int horizontalAlignment, int verticalTextPosition, int horizontalTextPosition, Rectangle viewR, Rectangle iconR, Rectangle textR, int textIconGap)
<!-- END KEY -->
<!-- BEGIN DATA -->
计算并返回图标原点的位置，文本基线的原点的位置，以及复合标签字符串的可能进行了修剪的版本。相对于 viewR 矩形计算位置。还要考虑该 JComponents 方向 (LEADING/TRAILING)，并相应地将其转换为 LEFT/RIGHT 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String javax.swing.SwingUtilities.layoutCompoundLabel(FontMetrics fm, String text, Icon icon, int verticalAlignment, int horizontalAlignment, int verticalTextPosition, int horizontalTextPosition, Rectangle viewR, Rectangle iconR, Rectangle textR, int textIconGap)
<!-- END KEY -->
<!-- BEGIN DATA -->
计算并返回图标原点的位置，文本基线的原点的位置，以及复合标签字符串的可能进行了修剪的版本。相对于 viewR 矩形计算位置。此 layoutCompoundLabel() 不知道如何处理 horizontalTextPosition（默认为 RIGHT）和 horizontalAlignment（默认为 CENTER）中的 LEADING/TRAILING 值。可以使用其他版本的 layoutCompoundLabel() 替代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SwingUtilities.paintComponent(Graphics g, Component c, Container p, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
在指定的 <code>Graphics</code> 上绘制组件。此方法主要用于呈现不作为可见包含层次结构的一部分而存在，但用于呈现的 <code>Component</code>。例如，如果执行自己的呈现并想呈现某些文本（甚至 HTML），则可以利用 <code>JLabel</code> 的文本呈现支持并通过此方法直接绘制它，而不会将标签添加到可见包含层次结构中。 
 <p>
此方法利用 <code>CellRendererPane</code> 处理实际的绘制，只有使用了用于呈现的组件时才建议使用此方法。如果利用多个组件处理呈现，则就像 <code>JTable</code> 所做的一样，那么可直接使用 <code>CellRendererPane</code>。否则，如下所述，每个 <code>Component</code> 可以以 <code>CellRendererPane</code> 结尾。
 <p>
如果 <code>c</code> 的父组件不是 <code>CellRendererPane</code>，则创建一个新的 <code>CellRendererPane</code>，将 <code>c</code> 添加到其中，并将 <code>CellRendererPane</code> 添加到 <code>p</code>。如果 <code>c</code> 的父组件是 <code>CellRendererPane</code>，并且 <code>CellRendererPane</code> 的父级不是 <code>p</code>，则将它添加到 <code>p</code>。
 <p>
该组件应该从 <code>JComponent</code> 继承或者是另一种轻量级组件。轻量级组件是一个其 &quot;lightweight&quot; 属性（由该 <code>Component</code> <code>isLightweight</code> 方法返回）为 true 的组件。如果该 Component 不是轻量级的，则可能发生以下糟糕的事情：崩溃、异常、绘制问题……

@param g  要在其上绘制的 <code>Graphics</code> 对象
@param c  要绘制的 <code>Component</code>
@param p  该中间 <code>Container</code>
@param x  指定要在其中绘制的区域左侧的 int 值，以像素为单位，通过图形环境的左边缘测量
@param y  指定要在其中绘制的区域顶部的 int 值，以像素为单位，通过图形环境的顶部边缘测量
@param w  指定要在其中绘制的区域宽度的 int 值，以像素为单位
@param h  指定要在其中绘制的区域高度的 int 值，以像素为单位
 
@see CellRendererPane
@see java.awt.Component#isLightweight

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SwingUtilities.paintComponent(Graphics g, Component c, Container p, Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->
在指定的 <code>Graphics</code> 上绘制组件。这是 {@link #paintComponent(Graphics,Component,Container,int,int,int,int)} 的一个覆盖方法。有关更多信息，请参阅它。 

@param g  要在其上绘制的 <code>Graphics</code> 对象
@param c  要绘制的 <code>Component</code>
@param p  该中间 <code>Container</code>
@param r  要在其中绘制的 <code>Rectangle</code>
 
@see #paintComponent(Graphics,Component,Container,int,int,int,int)
@see CellRendererPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SwingUtilities.updateComponentTreeUI(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
简单的外观更改：将树结构中的每个节点转到 <code>updateUI()</code> -- 也就是说，通过当前外观初始化其 UI 属性。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SwingUtilities.invokeLater(Runnable doRun)
<!-- END KEY -->
<!-- BEGIN DATA -->
导致 <i>doRun.run()</i> 在 AWT 事件指派线程上异步执行。在所有挂起的 AWT 事件被处理后才发生。此方法应该在应用程序线程需要更新该 GUI 时使用。在下面的示例中，<code>invokeLater</code> 调用将事件指派线程上的 <code>Runnable</code> 对象 <code>doHelloWorld</code> 加入队列，然后输出一条信息。
 <pre>
 Runnable doHelloWorld = new Runnable() {
     public void run() {
         System.out.println(&quot;Hello World on &quot; + Thread.currentThread());
     }
 };

 SwingUtilities.invokeLater(doHelloWorld);
 System.out.println(&quot;This might well be displayed before the other message.&quot;);
 </pre>
如果从事件指派线程调用 invokeLater（例如，从 JButton 的 ActionListener）则仍要将 <i>doRun.run()</i> 推迟，直到处理了所有挂起的事件。注意，如果 <i>doRun.run()</i> 抛出一个未捕获的异常，则该事件指派线程将不会缠绕（不是该当前线程）。
 <p>
有关此方法的其他文档和示例，请参阅 <em>The Java Tutorial</em> 中的 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How to Use Threads</a> 一节。
 <p>
从 1.3 版本开始，此方法只覆盖了 <code>java.awt.EventQueue.invokeLater()</code>。
  <p>
与 Swing 的其余部分不同，可从任一线程中调用此方法。

@see #invokeAndWait

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SwingUtilities.invokeAndWait(Runnable doRun) throws java.lang.InterruptedException, java.lang.reflect.InvocationTargetException
<!-- END KEY -->
<!-- BEGIN DATA -->
导致 <code>doRun.run()</code> 在 AWT 事件指派线程上同步执行。在所有挂起的 AWT 事件被处理完（然后）返回 <code>doRun.run()</code> 之前，此调用将处于阻塞状态。此方法应该在应用程序线程需要更新该 GUI 时使用。而不应该从 <code>EventDispatchThread</code> 中调用此方法。下面是一个创建新应用程序线程的示例，该应用线程使用 <code>invokeAndWait</code> 从事件指派线程输出一个字符串，完成后再从应用程序线程输出一个字符串。
 <pre>
 final Runnable doHelloWorld = new Runnable() {
     public void run() {
         System.out.println(&quot;Hello World on &quot; + Thread.currentThread());
     }
 };

 Thread appThread = new Thread() {
     public void run() {
         try {
             SwingUtilities.invokeAndWait(doHelloWorld);
         }
         catch (Exception e) {
             e.printStackTrace();
         }
         System.out.println(&quot;Finished on &quot; + Thread.currentThread());
     }
 };
 appThread.start();
 </pre>
注意，如果 <code>Runnable.run</code> 方法抛出一个未捕获的异常（在事件指派线程上），则它将被作为一个 <code>InvocationTargetException</code>（在调用者的线程上）捕获并重新抛出。
 <p>
有关此方法的更多文档和示例，请参阅 <em>The Java Tutorial</em> 中的 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How to Use Threads</a> 一节。
 <p>
从 1.3 版本开始，此方法只覆盖了 <code>java.awt.EventQueue.invokeAndWait()</code>。

@exception  InterruptedException 如果等待事件指派线程执完成执行 <code>doRun.run()</code> 时被中断
@exception  InvocationTargetException  如果在运行 <code>doRun</code> 时抛出异常

@see #invokeLater

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.SwingUtilities.isEventDispatchThread()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前线程是 AWT 事件指派线程，则返回 true。
 <p>
从 1.3 版本开始，此方法只覆盖了 <code>java.awt.EventQueue.isDispatchThread()</code>。
 
@return true 如果当前线程是一个 AWT 事件指派线程

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.swing.SwingUtilities.getAccessibleIndexInParent(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象在其可访问的父对象中的索引。<p>

注：从 Java 2 平台 v1.3 开始，建议开发人员调用 Component.AccessibleAWTComponent.getAccessibleIndexInParent()，而不是使用此方法。

@return 如果此对象没有可访问的父对象，则返回 -1。否则，返回子对象在其可访问的父对象中的索引。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.accessibility.Accessible javax.swing.SwingUtilities.getAccessibleAt(Component c, Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果存在，则返回本地坐标 <code>Point</code> 处包含的 <code>Accessible</code> 子对象。否则返回 <code>null</code>。

@return 指定位置的 <code>Accessible</code>（如果存在）；否则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.accessibility.AccessibleStateSet javax.swing.SwingUtilities.getAccessibleStateSet(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的状态。 <p>

注：从 Java 2 平台 v1.3 开始，建议开发人员调用 Component.AccessibleAWTComponent.getAccessibleIndexInParent()，而不是使用此方法。

@return 包含对象当前状态集合的 AccessibleStateSet 的实例
@see AccessibleState

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.swing.SwingUtilities.getAccessibleChildrenCount(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对象中可访问的子对象数。如果此对象的所有子级都实现 Accessible，则此方法应该返回该对象的子级数。 <p>

注：从 Java 2 平台 v1.3 开始，建议开发人员调用 Component.AccessibleAWTComponent.getAccessibleIndexInParent()，而不是使用此方法。

@return  对象的可访问子对象数

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.accessibility.Accessible javax.swing.SwingUtilities.getAccessibleChild(Component c, int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对象的第 n 个可访问子对象。 <p>

注：从 Java 2 平台 v1.3 开始，建议开发人员调用 Component.AccessibleAWTComponent.getAccessibleIndexInParent()，而不是使用此方法。

@param i 从零开始的子对象索引
@return 该对象的第 n 个可访问子对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Component javax.swing.SwingUtilities.findFocusOwner(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定为焦点所有者的 <code>Component</code> 的子 <code>Component</code>（如果有）。

@param c 要搜索焦点所有者的 <code>Component</code> 层次结构的根
@return 焦点所有者；如果不存在焦点所有者，如果焦点所有者不是 <code>comp</code> 或 <code>comp</code> 的后代，则返回 <code>null</code>

@see java.awt.KeyboardFocusManager#getFocusOwner
@deprecated 从 1.4 开始，由 <code>KeyboardFocusManager.getFocusOwner()</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.JRootPane javax.swing.SwingUtilities.getRootPane(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 c 是一个 JRootPane 后代，则返回其 JRootPane 祖先。如果 c 是一个 RootPaneContainer，则返回其 JRootPane。
@return 组件 c 的 JRootPane，或者 {@code null}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Component javax.swing.SwingUtilities.getRoot(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前组件树结构的根组件。
@return c（一个 Window）的第一个祖先，或者最后一个 Applet 祖先

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.SwingUtilities.processKeyBindings(KeyEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理与 <code>event</code> 关联的 <code>Component</code> 的键绑定。此方法仅当 <code>event.getComponent()</code> 不是从 <code>JComponent</code> 继承的，或不从 <code>JComponent</code> 子类中调用 <code>super.processKeyEvent</code> 时才有用。<code>JComponent</code> 自动处理其 <code>processKeyEvent</code> 方法中的绑定，因此一般情况下不需要直接调用此方法。

@param event 用于标识哪些绑定要处理以及哪个组件有焦点的 KeyEvent。
@return 如果找到并处理一个绑定，则返回 true 
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.SwingUtilities.notifyAction(Action action, KeyStroke ks, KeyEvent event, Object sender, int modifiers)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果启用 <code>action</code>（且为非 {@code null}），则调用 <code>action</code> 上的 <code>actionPerformed</code>。ActionEvent 的命令由以下情况确定：
 <ol>
<li>如果该动作是通过 <code>registerKeyboardAction</code> 注册的，则传入命令字符串（如果传入 {@code null}，则使用 {@code null}）。
<li>动作值的名称是 Action.ACTION_COMMAND_KEY，除非为 {@code null}。
<li>该 KeyEvent 的字符串值，除非 <code>getKeyChar</code> 返回 KeyEvent.CHAR_UNDEFINED。
 </ol>
如果 <code>action</code> 为非 {@code null} 且 actionPerformed 是在其上调用的，则将返回 true。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SwingUtilities.replaceUIInputMap(JComponent component, int type, InputMap uiInputMap)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>component</code> 的 UI InputMap 更改为 <code>uiInputMap</code> 的便捷方法。如果 <code>uiInputMap</code> 为 {@code null}，则将移除以前安装的任何 UI InputMap。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SwingUtilities.replaceUIActionMap(JComponent component, ActionMap uiActionMap)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>component</code> 的 UI ActionMap 更改为 <code>uiActionMap</code> 的便捷方法。如果 <code>uiActionMap</code> 为 {@code null}，则将移除以前安装的任何 UI ActionMap。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.InputMap javax.swing.SwingUtilities.getUIInputMap(JComponent component, int condition)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由组件 <code>component</code> 中的条件 <code>condition</code> 的 UI 提供的 InputMap。
<p>如果该 UI 未安装指定类型的 InputMap，则将返回 {@code null}。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.ActionMap javax.swing.SwingUtilities.getUIActionMap(JComponent component)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该 UI 在组件 <code>component</code> 中提供的 ActionMap。
<p>如果该 UI 未安装 ActionMap，则将返回 {@code null}。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Rectangle javax.swing.SwingUtilities.calculateInnerArea(JComponent c, Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定组件的内部绘制区域的位置和大小存储在 <code>r</code> 中，然后返回 <code>r</code>。该位置和大小指定组件的边界，进行调整以使其不包括边框区域（即 insets）。此方法对实现绘制代码的类很有用。

@param c  相关的 JComponent；如果为 {@code null}，则此方法返回 {@code null}
@param r  要修改的 Rectangle 实例；可以为 {@code null}
@return 如果该组件为 {@code null}，则返回 {@code null}；否则返回传入的矩形（如果为非 {@code null}），或一个指定位置和大小信息的新矩形

@since 1.4

<!-- END DATA -->
