<!-- BEGIN KEY -->
public abstract class javax.swing.LayoutStyle extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>LayoutStyle</code> 提供有关如何确定组件位置的信息。此类主要用于可视化工具和布局管理器。大多数开发人员不需要使用此类。
 <p>
通常不设置或创建 <code>LayoutStyle</code>。而是使用静态方法 <code>getInstance</code> 获取当前实例。

@version 1.2, 11/17/05
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.LayoutStyle()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 <code>LayoutStyle</code>。通常不创建 <code>LayoutStyle</code>。而是使用 <code>getInstance</code> 方法获取当前 <code>LayoutStyle</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.LayoutStyle.setInstance(LayoutStyle style)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>LayoutStyle</code> 的共享实例。指定 <code>null</code> 将导致使用当前 <code>LookAndFeel</code> 的 <code>LayoutStyle</code>。

@param style <code>LayoutStyle</code>，或 <code>null</code>
@see #getInstance

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.LayoutStyle javax.swing.LayoutStyle.getInstance()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>LayoutStyle</code> 的共享实例。如果没有在 <code>setInstance</code> 中指定实例，则此方法将返回当前 <code>LookAndFeel</code> 的 <code>LayoutStyle</code>。

@see LookAndFeel#getLayoutStyle
@return <code>LayoutStyle</code> 的共享实例

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.LayoutStyle.getPreferredGap(JComponent component1, JComponent component2, LayoutStyle.ComponentPlacement type, int position, Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回两个组件之间使用的空格的数量。返回值表示相对于 <code>component1</code> 放置 <code>component2</code> 的距离。例如，当 <code>component2</code> 被放置在 <code>component1</code> 的正上方时，以下代码返回 <code>component2</code> 和 <code>component1</code> 之间放置的空格数：
 <pre>
int gap = getPreferredGap(component1, component2,
ComponentPlacement.RELATED,
SwingConstants.NORTH, parent);
 </pre>
<code>type</code> 参数指示两个组件之间的关系。如果这两个组件将被包含在同一个父容器中并显示相似的逻辑相关项，则使用 <code>RELATED</code>。如果这两个组件将被包含在同一个父容器中但显示逻辑不相关项，则使用 <code>UNRELATED</code>。某些外观不区分 <code>RELATED</code> 和 <code>UNRELATED</code> 类型。
 <p>
返回值不考虑 <code>component2</code> 或 <code>component1</code> 的当前大小和位置。返回值可能考虑组件的各种属性。例如，空格可能随字体大小或组件首选大小的不同而不同。

@param component1 <code>JComponent</code>，<code>component2</code> 将相对于该 <code>JComponent</code> 被放置 
@param component2 将被放置的 <code>JComponent</code>
@param position <code>component2</code> 将相对于 <code>component1</code> 进行放置的位置；<code>SwingConstants.NORTH</code>、<code>SwingConstants.SOUTH</code>、<code>SwingConstants.EAST</code> 或 <code>SwingConstants.WEST</code> 之一
@param type 这两个组件将如何放置
@param parent <code>component2</code> 的父容器；它可能不同于实际的父容器，可能为 <code>null</code>
@return 两个组件之间放置的空格数量
@throws NullPointerException 如果 <code>component1</code>、<code>component2</code> 或 <code>type</code> 为 <code>null</code>
@throws IllegalArgumentException 如果 <code>position</code> 不是 <code>SwingConstants.NORTH</code>、<code>SwingConstants.SOUTH</code>、<code>SwingConstants.EAST</code> 或 <code>SwingConstants.WEST</code> 之一
@see LookAndFeel#getLayoutStyle
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.LayoutStyle.getContainerGap(JComponent component, int position, Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回组件与其父容器的指定边缘之间放置的空格数量。

@param component 要放置的 <code>JComponent</code>
@param position <code>component</code> 将相对于其父容器被放置的位置；<code>SwingConstants.NORTH</code>、<code>SwingConstants.SOUTH</code>、<code>SwingConstants.EAST</code> 或 <code>SwingConstants.WEST</code> 之一
@param parent <code>component</code> 的父容器；它可能不同于实际的父容器，可能为 <code>null</code>
@return 组件与指定边缘之间放置的空格数
@throws IllegalArgumentException 如果 <code>position</code> 不是 <code>SwingConstants.NORTH</code>、<code>SwingConstants.SOUTH</code>、<code>SwingConstants.EAST</code> 或 <code>SwingConstants.WEST</code> 之一

<!-- END DATA -->
