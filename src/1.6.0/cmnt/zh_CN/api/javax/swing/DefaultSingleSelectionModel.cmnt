<!-- BEGIN KEY -->
public class javax.swing.DefaultSingleSelectionModel extends java.lang.Object implements javax.swing.SingleSelectionModel, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
SingleSelectionModel 的一般实现。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@version 1.35 05/05/04
@author Dave Moore

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.EventListenerList javax.swing.DefaultSingleSelectionModel.listenerList
<!-- END KEY -->
<!-- BEGIN DATA -->
已注册侦听器的集合
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultSingleSelectionModel.addChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
向按钮添加一个 <code>ChangeListener</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultSingleSelectionModel.removeChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
从按钮中移除一个 <code>ChangeListener</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.ChangeListener[] javax.swing.DefaultSingleSelectionModel.getChangeListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>DefaultSingleSelectionModel</code> 上所有已注册的更改侦听器组成的数组。

@return 此模型的所有 <code>ChangeListener</code>，如果当前没有已注册的更改侦听器，则返回一个空数组。
 
@see #addChangeListener
@see #removeChangeListener
 
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.DefaultSingleSelectionModel.fireStateChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知所有对此事件类型的通知感兴趣的已注册侦听器。以延迟方式创建事件实例。
@see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] javax.swing.DefaultSingleSelectionModel.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前已在此模型上注册为 <code><em>Foo</em>Listener</code> 的所有对象组成的数组。<code><em>Foo</em>Listener</code> 是用 <code>add<em>Foo</em>Listener</code> 方法注册的。
 <p>
可以使用 class 字面值来指定 <code>listenerType</code> 参数，如 <code><em>Foo</em>Listener.class</code>。例如，可以使用下面的代码查询 <code>DefaultSingleSelectionModel</code> 实例 <code>m</code> 的更改侦听器：

 <pre>ChangeListener[] cls = (ChangeListener[])(m.getListeners(ChangeListener.class));</pre>

如果不存在这样的侦听器，则此方法将返回一个空数组。

@param listenerType 所请求侦听器的类型；该参数应该指定一个从 <code>java.util.EventListener</code> 遗传下来的接口
@return 在此模型上注册为 <code><em>Foo</em>Listener</code> 的所有对象组成的数组，如果没有添加这样的侦听器，则返回一个空数组
@exception ClassCastException 如果 <code>listenerType</code> 没有指定实现 <code>java.util.EventListener</code> 的类或接口

@see #getChangeListeners

@since 1.3

<!-- END DATA -->
