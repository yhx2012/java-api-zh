<!-- BEGIN KEY -->
public class javax.swing.JToolBar extends javax.swing.JComponent implements javax.swing.SwingConstants, javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>JToolBar</code> 提供了一个用来显示常用的 <code>Action</code> 或控件的组件。有关使用工具栏的示例和信息，请参阅 <em>The Java Tutorial</em> 中的 <a href="http://java.sun.com/docs/books/tutorial/uiswing/components/toolbar.html">How to Use Tool Bars</a> 一节。

 <p>
对于大多数的外观，用户可以将工具栏拖到单独的窗口中（除非 <code>floatable</code> 属性被设置为 <code>false</code>）。为了正确执行拖动，建议将 <code>JToolBar</code> 实例添加到容器的四&ldquo;边&rdquo;中的一边（其中容器的布局管理器为 <code>BorderLayout</code>），并且不在其他四&ldquo;边&rdquo;中添加任何子级。
 <p>
<strong>警告：</strong>Swing 不是线程安全的。有关更多信息，请参阅 <a
 href="package-summary.html#threading">Swing's Threading Policy</a>。
 <p>
<strong>警告：</strong>此类的已序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@beaninfo attribute: isContainer true 描述：用来显示常用控件或 Action 的组件。

@version 1.108 02/26/04
@author Georges Saab
@author Jeff Shapiro
@see Action

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JToolBar()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的工具栏；默认的方向为 <code>HORIZONTAL</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JToolBar(int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定 <code>orientation</code> 的新工具栏。<code>orientation</code> 不是 <code>HORIZONTAL</code> 就是 <code>VERTICAL</code>。

@param orientation  预期的方向

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JToolBar(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定 <code>name</code> 的新工具栏。名称用作浮动式 (undocked) 工具栏的标题。默认的方向为 <code>HORIZONTAL</code>。

@param name 工具栏的名称
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JToolBar(String name, int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定 <code>name</code> 和 <code>orientation</code> 的新工具栏。所有其他构造方法均调用此构造方法。如果 <code>orientation</code> 是一个无效值，则将抛出异常。

@param name  工具栏的名称
@param orientation  初始方向，它不是 <code>HORIZONTAL</code> 就是 <code>VERTICAL</code>
@exception IllegalArgumentException 如果方向既不是 <code>HORIZONTAL</code> 也不是 <code>VERTICAL</code>
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.ToolBarUI javax.swing.JToolBar.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回工具栏的当前 UI。
@see #setUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JToolBar.setUI(ToolBarUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置呈现此组件的 L&amp;F 对象。

@param ui  <code>ToolBarUI</code> L&amp;F 对象
@see UIDefaults#getUI
@beaninfo bound: true hidden: true attribute: visualUpdate true 描述：实现 Component 的 LookAndFeel 的 UI 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JToolBar.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>UIFactory</code> 发出的关于 L&amp;F 已更改的通知。调用该方法，从而用 <code>UIFactory</code> 的最新版本来替换 UI。

@see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JToolBar.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回呈现此组件的 L&amp;F 类的名称。

@return 字符串 &quot;ToolBarUI&quot;
@see JComponent#getUIClassID
@see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JToolBar.getComponentIndex(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定组件的索引。（注：分隔符占用索引位置）。

@param c  要查找的 <code>Component</code> 
@return 指示组件位置的整数，此数从 0 开始

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JToolBar.getComponentAtIndex(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定索引位置的组件。

@param i  组件的位置，从 0 开始
@return   在该位置的 <code>Component</code>，如果索引无效则返回 <code>null</code>


<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JToolBar.setMargin(Insets m)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置工具栏边框和它的按钮之间的空白。设置为 <code>null</code> 将导致工具栏使用默认的空白。工具栏的默认 <code>Border</code> 对象使用此值来创建正确的空白。不过，如果在工具栏上设置了非默认边框，则由 <code>Border</code> 对象负责创建适当的空白（否则此属性将被忽略）。

@param m <code>Insets</code> 对象，它定义了边框和按钮之间的空间
@see Insets
@beaninfo description: 工具栏的边框和内容边界之间的空白
                bound: true
               expert: true

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.JToolBar.getMargin()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回工具栏边框和它的按钮之间的空白。

@return 包含空白值的 <code>Insets</code> 对象
@see Insets

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JToolBar.isBorderPainted()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>borderPainted</code> 属性。

@return <code>borderPainted</code> 属性的值
@see #setBorderPainted

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JToolBar.setBorderPainted(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>borderPainted</code> 属性，如果需要绘制边框，则此属性为 <code>true</code>。此属性的默认值为 <code>true</code>。某些外观可能不绘制边框，它们将忽略此属性。

@param b 如果为 true，则绘制边框
@see #isBorderPainted
@beaninfo description: 工具栏绘制其边框吗？
                bound：true
               expert: true

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JToolBar.paintBorder(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>borderPainted</code> 属性为 <code>true</code>，则绘制工具栏边框。

@param g  <code>Graphics</code> 上下文，绘制在此上下文中完成
@see JComponent#paint
@see JComponent#setBorder

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JToolBar.isFloatable()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>floatable</code> 属性。

@return <code>floatable</code> 属性的值

@see #setFloatable

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JToolBar.setFloatable(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>floatable</code> 属性，如果要移动工具栏，此属性必须设置为 <code>true</code>。通常，可以将浮动工具栏拖动到同一个容器中的不同位置，或者拖动到自己的窗口中。此属性的默认值为 <code>true</code>。某些外观可能不实现浮动工具栏，它们将忽略此属性。

@param b 如果为 <code>true</code>，则工具栏可以移动；如果为 <code>false</code>，则工具栏不能移动
@see #isFloatable
@beaninfo description: 用户可以移动工具栏吗？
                bound：true
            preferred: true

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JToolBar.getOrientation()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回工具栏的当前方向。值不是 <code>HORIZONTAL</code> 就是 <code>VERTICAL</code>。

@return 表示当前方向的整数 -- 不是 <code>HORIZONTAL</code> 就是 <code>VERTICAL</code>
@see #setOrientation

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JToolBar.setOrientation(int o)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置工具栏的方向。方向不是 <code>HORIZONTAL</code> 就是 <code>VERTICAL</code>。如果 <code>orientation</code> 是一个无效值，则将抛出异常。

@param o  新的方向，不是 <code>HORIZONTAL</code> 就是 <code>VERTICAL</code>
@exception IllegalArgumentException 如果方向既不是 <code>HORIZONTAL</code> 也不是 <code>VERTICAL</code>
@see #getOrientation
@beaninfo description: 工具栏边界的当前方向
                bound: true
            preferred: true

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JToolBar.setRollover(boolean rollover)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此工具栏的 rollover 状态。如果 rollover 状态为 true，则仅当鼠标指针悬停在工具栏按钮上时，才绘制该工具栏按钮的边框。此属性的默认值为 false。
 <p>
外观的实现可以选择忽略此属性。

@param rollover 如果翻转工具栏按钮，则为 true；否则为 false
@since 1.4
@beaninfo bound: true preferred: true attribute: visualUpdate true 描述：将绘制工具栏中的 rollover 按钮的边框。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JToolBar.isRollover()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 rollover 状态。

@return 如果绘制 rollover 工具栏按钮，则返回 true；否则返回 false
@see #setRollover(boolean)
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JToolBar.addSeparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
将默认大小的分隔符添加到工具栏的末尾。默认大小由当前外观确定。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JToolBar.addSeparator(Dimension size)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定大小的分隔符添加到工具栏的末尾。

@param size 分隔符的 <code>Dimension</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JButton javax.swing.JToolBar.add(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加一个指派动作的新的 <code>JButton</code>。

@param a 要作为一个新的菜单项添加的 <code>Action</code> 对象
@return 用来指派动作的新按钮

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JButton javax.swing.JToolBar.createActionComponent(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
将为 <code>Action</code> 创建 <code>JButton</code> 的工厂方法添加到 <code>JToolBar</code> 中。如果传递了一个 <code>null</code> 操作，则默认名称为空。

@param a 要添加的按钮的 <code>Action</code>
@return 新创建的按钮
@see Action
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeListener javax.swing.JToolBar.createActionChangeListener(JButton b)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回正确配置的 <code>PropertyChangeListener</code>，它根据 <code>Action</code> 的更改对控件进行更新，如果需要使用默认的属性更改侦听器，则为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JToolBar.addImpl(Component comp, Object constraints, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
在添加 <code>JButton</code> 时，它最初被设置为 disabled。

@param comp  要增强的组件
@param constraints  组件上强制要求的约束
@param index 组件的索引


<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JToolBar.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JToolBar</code> 的字符串表示形式。此方法仅在进行调试的时候使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可以为空，但不可以为 <code>null</code>。

@return  此 <code>JToolBar</code> 的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JToolBar.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 JToolBar 关联的 AccessibleContext。对于工具栏，AccessibleContext 采用 AccessibleJToolBar 的形式。必要时创建新的 AccessibleJToolBar 实例。

@return 一个 AccessibleJToolBar，它充当此 JToolBar 的 AccessibleContext

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JToolBar.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
有关 Swing 中序列化的更多信息，请参阅 <code>JComponent</code> 中的 <code>readObject</code> 和 <code>writeObject</code>。

<!-- END DATA -->
