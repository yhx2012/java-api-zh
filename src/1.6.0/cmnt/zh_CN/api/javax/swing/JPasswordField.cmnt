<!-- BEGIN KEY -->
public class javax.swing.JPasswordField extends javax.swing.JTextField
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>JPasswordField</code> 是一个轻量级组件，允许编辑单行文本，其视图指示键入内容，但不显示原始字符。有关更多信息和示例，请参阅 <em>The Java Tutorial</em> 中的 <a href="http://java.sun.com/docs/books/tutorial/uiswing/components/textfield.html">How to Use Text Fields</a> 一节。
 <p>
<code>JPasswordField</code> 与使用 <code>echoChar</code> 设置的 <code>java.awt.TextField</code> 是根本一致的。单独提供它可以较方便地安全更改 <code>JTextField</code> 的 UI 而不影响密码输入。
 <p>
<strong>注：</strong>
默认情况下，JPasswordField 禁用输入法；否则，当使用输入法组合时，输入字符应该是可见的。如果应用程序需要输入法支持，请使用继承方法 <code>enableInputMethods(true)</code>。
 <p>
<strong>警告：</strong>Swing 不是线程安全的。有关更多信息，请参阅 <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>。
 <p>
<strong>警告：</strong>此类的序列化对象与以后的 Swing 版本不兼容。当前序列化支持适用于短期存储，或适用于在运行相同 Swing 版本的应用程序之间进行 RMI（Remote Method Invocation，远程方法调用）。从 1.4 版本开始，已在 <code>java.beans</code> 包中添加了支持所有 JavaBeans<sup><font size="-2">TM</font></sup> 长期存储的功能。请参见 {@link java.beans.XMLEncoder}。

@beaninfo attribute: isContainer false description: Allows the editing of a line of text but doesn't show the characters.

@author  Timothy Prinzing
@version 1.54 06/02/04

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JPasswordField()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新 <code>JPasswordField</code>，使其具有默认文档、为 <code>null</code> 的开始文本字符串和为 0 的列宽度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JPasswordField(String text)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个利用指定文本初始化的新 <code>JPasswordField</code>。将文档模型设置为默认值，列数为 0。

@param text 要显示的文本；如果没有文本，则为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JPasswordField(int columns)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有指定列数的新的空 <code>JPasswordField</code>。创建一个默认模型，并将其初始字符串设置为 <code>null</code>。

@param columns 列数，它 &gt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JPasswordField(String text, int columns)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个利用指定文本和列初始化的新 <code>JPasswordField</code>。将文档模型设置为默认值。

@param text 要显示的文本；如果不存在文本，则为 <code>null</code>
@param columns 列数，它 &gt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JPasswordField(Document doc, String txt, int columns)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个使用给定文本存储模型和给定列数的新 <code>JPasswordField</code>。其他构造方法馈通此构造方法。将回显字符设置为 '*'，但可以通过当前外观更改。如果文档模型为 <code>null</code>，则创建默认文档。

@param doc  要使用的文本存储
@param txt 要显示的文本；如果不存在文本，则为 <code>null</code>
@param columns  用于计算首选宽度的列数，它 &gt;= 0；如果将列数设置为 0，则首选宽度将从组件实现自然产生

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JPasswordField.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回呈现此组件的 L&amp;F 类名。

@return 字符串 &quot;PasswordFieldUI&quot;
@see JComponent#getUIClassID
@see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPasswordField.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public char javax.swing.JPasswordField.getEchoChar()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回要用于回显的字符。默认值为 '*'。默认值根据当前运行的外观可以有所不同。例如，Metal/Ocean 的默认值为 bullet 字符。

@return 回显字符；如果未设置，则返回 0
@see #setEchoChar
@see #echoCharIsSet

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPasswordField.setEchoChar(char c)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 <code>JPasswordField</code> 的回显字符。注意，这仅仅是一个建议，因为安装的视图可以使用它所需要的任何图形技术来表示字段。将值设置为 0 指示希望按照键入查看文本，类似于标准 <code>JTextField</code> 的行为。

@param c 要显示的回显字符
@see #echoCharIsSet
@see #getEchoChar
@beaninfo description: character to display in place of the real characters attribute:visualUpdate true

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JPasswordField.echoCharIsSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 <code>JPasswordField</code> 具有为回显设置的字符，则返回 true。如果回显字符不为 0，则考虑设置字符。

@return 如果为回显设置了字符，则返回 true
@see #setEchoChar
@see #getEchoChar

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPasswordField.cut()
<!-- END KEY -->
<!-- BEGIN DATA -->
对当前外观调用 <code>provideErrorFeedback</code>，这通常启动错误蜂鸣。将关联模型中的当前选定范围传输到系统剪贴板并从模型中移除内容，这种普通行为对于密码字段而言，是不可接受的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPasswordField.copy()
<!-- END KEY -->
<!-- BEGIN DATA -->
对当前外观调用 <code>provideErrorFeedback</code>，这通常启动错误蜂鸣。将关联模型中的当前选定范围传输到系统剪贴板并在模型中保留内容，这种普通行为对于密码字段而言，是不可接受的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JPasswordField.getText()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>TextComponent</code> 中所包含的文本。如果基础文档为 <code>null</code>，则将给出 <code>NullPointerException</code>。  
 <p>
出于安全考虑，此方法已废弃。使用 <code>getPassword</code> 方法来代替。
@deprecated 从 Java 2 platform v1.2 开始，由 <code>getPassword</code> 来代替。
@return 文本

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JPasswordField.getText(int offs, int len) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取由组件表示的文本部分。如果长度为 0，则返回空字符串。
 <p>
出于安全考虑，此方法已废弃。使用 <code>getPassword</code> 方法来代替。
@deprecated 从 Java 2 platform v1.2 开始，由 <code>getPassword</code> 来代替。
@param offs 偏移量，它 &gt;= 0
@param len 长度，它 &gt;= 0
@return 文本
@exception BadLocationException 如果偏移量或长度无效

<!-- END DATA -->
<!-- BEGIN KEY -->
public char[] javax.swing.JPasswordField.getPassword()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>TextComponent</code> 中所包含的文本。如果基础文档为 <code>null</code>，则将给出 <code>NullPointerException</code>。为了取得较高的安全性，建议将每个字符设置为 0 以便在使用后清除返回的字符数组。

@return 文本

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JPasswordField.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>JPasswordField</code> 的字符串表示形式。此方法仅在进行调试的时候使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。
 
@return  此 <code>JPasswordField</code> 的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JPasswordField.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>JPasswordField</code> 关联的 <code>AccessibleContext</code>。对于密码字段，<code>AccessibleContext</code> 采用 <code>AccessibleJPasswordField</code> 的形式。必要时要创建新的 <code>AccessibleJPasswordField</code> 实例。

@return 一个 <code>AccessibleJPasswordField</code>，它充当此 <code>JPasswordField</code> 的 <code>AccessibleContext</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JPasswordField.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

有关 Swing 中更多序列化的信息，请参阅 JComponent 中的 readObject() 和 writeObject()。

<!-- END DATA -->
