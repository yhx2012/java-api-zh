<!-- BEGIN KEY -->
public interface javax.sound.sampled.SourceDataLine extends javax.sound.sampled.DataLine
<!-- END KEY -->
<!-- BEGIN DATA -->
源数据行是可以写入数据的数据行。它充当其混频器的源。应用程序将音频字节写入源数据行，这样可处理字节缓冲并将它们传递给混频器。混频器可以将这些样本与取自其他源的样本混合起来，然后将该混合物传递到输出端口之类的目标（它可表示声卡上的音频输出设备）。
 <p>
注意，此接口的命名约定反映了数据行及其混频器之间的关系。从应用程序的角度来看，源数据行可能充当音频数据的目标。
 <p>
可以通过使用适当 <code>{@link DataLine.Info}</code> 对象调用 <code>Mixer</code> 的 <code>{@link Mixer#getLine getLine}</code> 方法从混频器获得源数据行。
 <p>
<code>SourceDataLine</code> 接口提供将音频数据写入数据行的缓冲区中的方法。播放或混合音频的应用程序应该以足够快的速度将数据写入源数据行，以防缓冲区下溢（排空），下溢可能导致单击时音频数据中出现可感知的间断。应用程序可以使用在 <code>DataLine</code> 接口中定义的 <code>{@link DataLine#available available}</code> 方法来确定当前在数据行缓冲区中列队的数据量。可以不受阻塞地写入缓冲区的数据量是缓冲区大小和已列队数据量之间的差值。如果由于下溢而导致音频输出的传递停止，则生成 <code>{@link LineEvent.Type#STOP STOP}</code> 事件。恢复音频输出时生成 <code>{@link LineEvent.Type#START START}</code> 事件。 

@author Kara Kytle
@version 1.21 05/11/17
@see Mixer
@see DataLine
@see TargetDataLine
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sound.sampled.SourceDataLine.open(AudioFormat format, int bufferSize) throws javax.sound.sampled.LineUnavailableException
<!-- END KEY -->
<!-- BEGIN DATA -->
打开具有指定格式和建议缓冲区大小的行，这样可使该行获得所有所需系统资源并变得可操作。
 <p>
以字节为单位指定缓冲区大小，但该大小必须表示整数形式的样本帧数。使用不满足此要求的所请求缓冲区大小调用此方法可能导致 IllegalArgumentException。已打开的行的实际缓冲区大小可能与所请求缓冲区大小不同。实际设置的值可以通过后续调用 <code>{@link DataLine#getBufferSize}</code> 来查询。  
 <p>
如果此操作成功，则将该行标记为 open，并向行的侦听器指派一个 <code>{@link LineEvent.Type#OPEN OPEN}</code> 事件。
 <p>
在已经打开的行上调用此方法是非法的，并且可能导致 <code>IllegalStateException</code>。
 <p>
注意，有些行一旦关闭就无法重新打开。试图重新打开这样的行总是导致 <code>LineUnavailableException</code>。

@param  format  所需的音频格式 
@param  bufferSize  所需的缓冲区大小 
@throws  LineUnavailableException  如果由于资源限制而无法打开行 
@throws  IllegalArgumentException  如果缓冲区大小不表示整数形式的样本帧数，或者 <code>format</code> 未完全指定或是无效的 
@throws  IllegalStateException  如果行已经打开 
@throws  SecurityException  如果由于安全限制而无法打开行

@see #open(AudioFormat)
@see Line#open
@see Line#close
@see Line#isOpen
@see LineEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sound.sampled.SourceDataLine.open(AudioFormat format) throws javax.sound.sampled.LineUnavailableException
<!-- END KEY -->
<!-- BEGIN DATA -->
打开具有指定格式的行，这样可使行获得所有所需的系统资源并变得可操作。  
   
 <p>
该实现选择缓冲区大小，此大小是以字节为单位来测量的，但它不包括整数形式的样本帧数。系统选择的缓冲区大小可以通过后续调用 <code>{@link DataLine#getBufferSize}</code> 来查询。
 <p>
如果此操作成功，则将该行标记为 open，并向行的侦听器指派一个 <code>{@link LineEvent.Type#OPEN OPEN}</code> 事件。
 <p>
在已经打开的行上调用此方法是非法的，并且可能导致 <code>IllegalStateException</code>。
 <p>
注意，有些行一旦关闭就无法重新打开。试图重新打开这样的行总是导致 <code>LineUnavailableException</code>。

@param  format  所需音频格式 
@throws  LineUnavailableException  如果由于资源限制而无法打开行 
@throws  IllegalArgumentException  如果 <code>format</code> 未完全指定的或是无效的 
@throws  IllegalStateException  如果行已经打开 
@throws  SecurityException 如果由于安全限制而无法打开行

@see #open(AudioFormat, int)
@see Line#open
@see Line#close
@see Line#isOpen
@see LineEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.sampled.SourceDataLine.write(byte[] b, int off, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过此源数据行将音频数据写入混频器。所请求的数据字节数是从指定的数组中读取的（从数组中给定的偏移量开始），并且将被写入数据行的缓冲区。如果调用者试图写入多于当前可写入数据量的数据（参见 <code>{@link DataLine#available available}</code>），则此方法在写入所请求数据量之前一直阻塞。即使要写入的请求数据量大于数据行的缓冲区大小，此方法也适用。不过，如果在写入请求的数据量之前数据行已关闭、停止或刷新，则该方法不再阻塞，但它会返回至今为止写入的字节数。 
 <p>
可以使用 <code>DataLine</code> 接口的 <code>{@link DataLine#available available}</code> 方法确认可不受阻塞地写入的字节数。（在保证可以不受阻塞地写入此字节数时，不保证试图写入其他数据不会发生阻塞。）
 <p>
要写入的字节数必须表示整数形式的样本帧数，比如：<br>
 <center><code>[ bytes written ] % [frame size in bytes ] == 0</code></center>
<br> 返回值将始终满足此要求。写入表示非整数形式的样本帧数的字节数的请求无法完成，并且可能导致 <code>IllegalArgumentException</code>。

@param  b  包含要写入数据行的数据的字节数组 
@param  len  数组中的有效数据的长度，以字节为单位（即要写入的请求数据量，以字节为单位）
@param  off  数组开始处的偏移量，以字节为单位
@return  实际写入的字节数 
@throws  IllegalArgumentException  如果所请求字节数不表示整数形式的样本帧数，或者 <code>len</code> 为负 
@throws  ArrayIndexOutOfBoundsException  如果 <code>off</code> 为负，或者 <code>off+len</code> 大于数组 <code>b</code> 的长度。

@see TargetDataLine#read
@see DataLine#available

<!-- END DATA -->
