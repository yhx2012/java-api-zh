<!-- BEGIN KEY -->
public abstract class javax.sound.sampled.EnumControl extends javax.sound.sampled.Control
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>EnumControl</code> 提供对一组截然不同的可能值的控制，每个值都由一个对象表示。在图形用户界面中，这样的控件可由一组按钮表示，每个按钮都选择一个值或设置。例如，回响控件可能提供几个预置的回响设置，而不是连续提供应由 <code>{@link FloatControl}</code> 对象表示的可调整的排序参数。
 <p>
只在两个设置之间提供选择的控件常被实现为一个 <code>{@link BooleanControl}</code>，而在某些可计量维度之间提供一组值的控件可能被实现为具有粗分辨率的 <code>FloatControl</code>。不过，<code>EnumControl</code> 的关键特性是，返回的值是任意对象，而不是数字值或 boolean 值。这意味着每个返回的对象都可以提供更多信息。例如，<code>{@link EnumControl.Type#REVERB REVERB}</code> 控件的设置是可以查询用于每个设置的参数值的 <code>{@link ReverbType}</code> 实例。

@author Kara Kytle
@version 1.15, 05/11/17
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.sound.sampled.EnumControl(EnumControl.Type type, java.lang.Object[] values, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有给定参数的新枚举控件对象。

@param  type  此枚举控件对象表示的控件类型 
@param  values  该控件的可能值的集合 
@param  value  初始控件值

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sound.sampled.EnumControl.setValue(Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置控件的当前值。默认实现只根据指示设置值。如果指示的值不受支持，则抛出 IllegalArgumentException。有些控件要求提前打开行，以防受设置值受影响。
@param  value  所需的新值 
@throws  IllegalArgumentException  如果指示的值不在允许的范围内

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.sound.sampled.EnumControl.getValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得此控件的当前值。
@return  当前值

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] javax.sound.sampled.EnumControl.getValues()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此控件的可能值的集合。
@return  可能值的集合

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sound.sampled.EnumControl.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
提供该控件的字符串表示形式。
@return  字符串描述

<!-- END DATA -->
