<!-- BEGIN KEY -->
public static class javax.sound.sampled.Port.Info extends javax.sound.sampled.Line.Info
<!-- END KEY -->
<!-- BEGIN DATA -->
该 <code>Port.Info</code> 类扩展了具有其他特定于端口的信息的 <code>{@link Line.Info}</code>，这些信息包括端口的名称以及该端口是否是其混频器的源或目标。按照定义，端口充当其混频器的源或目标，但不会同时是两者。（音频输入端口是源；音频输出端口是目标。）
 <p>
要了解可用的端口，可以通过 <code>Mixer</code> 的 <code>{@link Mixer#getSourceLineInfo getSourceLineInfo}</code> 和 <code>{@link Mixer#getTargetLineInfo getTargetLineInfo}</code> 方法检索 port 的 info 对象。还可以构造 <code>Port.Info</code> 类的实例，并用它来获得与 <code>Port.Info</code> 对象中指定的参数匹配的行。

@author Kara Kytle
@version 1.27, 05/11/17
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.sound.sampled.Port.Info javax.sound.sampled.Port.Info.MICROPHONE
<!-- END KEY -->
<!-- BEGIN DATA -->
从内置麦克风或麦克风插孔中获得音频端口类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.sound.sampled.Port.Info javax.sound.sampled.Port.Info.LINE_IN
<!-- END KEY -->
<!-- BEGIN DATA -->
从线路级音频输入插孔获得音频端口类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.sound.sampled.Port.Info javax.sound.sampled.Port.Info.COMPACT_DISC
<!-- END KEY -->
<!-- BEGIN DATA -->
从 CD-ROM 驱动器获得音频端口类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.sound.sampled.Port.Info javax.sound.sampled.Port.Info.SPEAKER
<!-- END KEY -->
<!-- BEGIN DATA -->
向内置扬声器或扬声器插孔发送音频端口类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.sound.sampled.Port.Info javax.sound.sampled.Port.Info.HEADPHONE
<!-- END KEY -->
<!-- BEGIN DATA -->
向耳机插孔发送音频端口类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.sound.sampled.Port.Info javax.sound.sampled.Port.Info.LINE_OUT
<!-- END KEY -->
<!-- BEGIN DATA -->
向线路级音频输出插孔发送音频端口类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.sampled.Port.Info(java.lang.Class<?> lineClass, String name, boolean isSource)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据给定的信息构造端口的 info 对象。此构造方法通常由 Java Sound 的实现用于描述受支持的行。
 
@param  lineClass  info 对象描述的端口的类。
@param  name  命名端口的字符串 
@param  isSource  如果端口是源端口（如麦克风），则该参数为 <code>true</code>；如果端口是目标端口（如扬声器），则该参数为 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sound.sampled.Port.Info.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得端口的名称。
@return  命名该端口的字符串 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sound.sampled.Port.Info.isSource()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示端口是其混频器的源还是目标。
@return  如果该端口是源端口（如麦克风），则返回 <code>true</code>；如果该端口是目标端口（如扬声器），则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sound.sampled.Port.Info.matches(Line.Info info)
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此指定 info 对象是否与此对象匹配。若要匹配，则必须满足超类的匹配要求，并且各类型必须相等。
@param  info  为其查询匹配的 info 对象  

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean javax.sound.sampled.Port.Info.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
终止 equals 方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.sound.sampled.Port.Info.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
终止 hashCode 方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.sound.sampled.Port.Info.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
提供该端口的 <code>String</code> 表示形式。
@return  描述该端口的字符串

<!-- END DATA -->
