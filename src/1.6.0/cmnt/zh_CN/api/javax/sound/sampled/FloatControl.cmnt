<!-- BEGIN KEY -->
public abstract class javax.sound.sampled.FloatControl extends javax.sound.sampled.Control
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>FloatControl</code> 对象提供对浮点值范围的控制。Float 控件常常通过滑块或旋钮之类的可连续调节对象在图形用户界面中表示。<code>FloatControl</code> 的具体子类实现诸如 gain 和 pan 之类的控件，这些控件会以应用程序可以操作的方式影响行的音频信号。<code>{@link FloatControl.Type}</code> 内部类提供用于标识一些常见 float 控件的那些类型的静态实例。
 <p>
<code>FloatControl</code> 抽象类提供设置和获取控件的当前浮点值的方法。其他方法获得可能的值范围和控件的分辨率（所返回值之间的最小增量）。一些 float 控件允许将新值延伸至指定时间段。<code>FloatControl</code> 还包括一些方法，这些方法返回用于该控件的最大、最小和中点位置的字符串标签。

@see Line#getControls
@see Line#isControlSupported

@author David Rivas
@author Kara Kytle
@version 1.17, 05/11/17
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.sound.sampled.FloatControl(FloatControl.Type type, float minimum, float maximum, float precision, int updatePeriod, float initialValue, String units, String minLabel, String midLabel, String maxLabel)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有给定参数的新 float 控件对象

@param  type  由此 float 控件对象表示的控件种类 
@param  minimum  该控件允许的最小值 
@param  maximum  该控件允许的最大值 
@param  precision  该控件的分辨率或粒度。这是离散有效值之间的增量大小。
@param  updatePeriod  最小时间间隔（以微秒为单位），在此段时间内，控件可以在 {@link #shift(float,float,int) shift} 期间从一个离散值更改为下一个离散值 
@param  initialValue  构造控件时该控件的起始值 
@param  units  用来表示控件值的单位的标签，如 &quot;dB&quot; 或 &quot;frames per second&quot; 
@param  minLabel  最小值的标签，如 &quot;Left&quot; 或 &quot;Off&quot; 
@param  midLabel  中点值的标签，如 &quot;Center&quot; 或 &quot;Default&quot; 
@param  maxLabel  最大值的标签，如 &quot;Right&quot; 或 &quot;Full&quot;

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.sound.sampled.FloatControl(FloatControl.Type type, float minimum, float maximum, float precision, int updatePeriod, float initialValue, String units)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有给定参数的新 float 控件对象。将最小、最大和中点值的标签设置为零长度字符串。

@param  type  由此 float 控件对象表示的控件种类 
@param  minimum  该控件允许的最小值 
@param  maximum  该控件允许的最大值 
@param  precision  该控件的分辨率或粒度。这是离散有效值之间的增量大小。
@param  updatePeriod  最小时间间隔（以微秒为单位），在此段时间内，控件可以在 {@link #shift(float,float,int) shift} 期间从一个离散值更改为下一个离散值 
@param  initialValue  构造控件时该控件的起始值 
@param  units  表示控件值的音位标签，如 &quot;dB&quot; 或 &quot;frames per second&quot;

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sound.sampled.FloatControl.setValue(float newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置控件的当前值。默认实现只根据指示设置该值。如果指示的值大于最大值，或小于最小值，则抛出 IllegalArgumentException。有些控件要求提前打开它们的行，以防受设置值受影响。
@param  newValue  所需的新值 
@throws  IllegalArgumentException  如果指示的值不在允许的范围内

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.sound.sampled.FloatControl.getValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得此控件的当前值。
@return  当前值

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.sound.sampled.FloatControl.getMaximum()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得所允许的最大值。
@return  所允许的最大值

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.sound.sampled.FloatControl.getMinimum()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得所允许的最小值。
@return  所允许的最小值

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sound.sampled.FloatControl.getUnits()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得表示控件值的单位标签，如 &quot;dB&quot; 或 &quot;frames per second&quot;。
@return  单位标签；如果没有标签，则返回零长度字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sound.sampled.FloatControl.getMinLabel()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得最小值的标签，如 &quot;Left&quot; 或 &quot;Off&quot;。
@return  最小值标签；如果没有设置标签，则返回零长度字符串	 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sound.sampled.FloatControl.getMidLabel()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得中点值的标签，如 &quot;Center&quot; 或 &quot;Default&quot;。
@return  中点值标签；如果没有设置标签，则返回零长度字符串	 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sound.sampled.FloatControl.getMaxLabel()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得最大值的标签，如 &quot;Right&quot; 或 &quot;Full&quot;。
@return  最大值标签；如果没有设置标签，则返回零长度字符串	 

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.sound.sampled.FloatControl.getPrecision()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得该控件的分辨率或粒度，以该控件测量的单位为准。精度是受支持浮点值的集合中此控件的离散有效值之间的增量大小。
@return  控件的精度

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.sampled.FloatControl.getUpdatePeriod()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得最小时间间隔（以微秒为单位），在此段时间内，控件值可以在移动期间更改。更新周期是控件用来在移动期间更新值的频率的倒数。如果实现不支持随时间移动的值，则它应立即将控件的值设置为最终值，并从此方法返回 -1。

@return  以微秒为单位的更新周期；如果随着时间的流逝，移动变得不受支持，则返回 -1  
@see #shift

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sound.sampled.FloatControl.shift(float from, float to, int microseconds)
<!-- END KEY -->
<!-- BEGIN DATA -->
在整个指定的时间内线性地将控件值从初始值更改为最终值，以微秒为单位进行指定。此方法可以不受阻塞地返回；它不会等到移动完成。实现应该在指定时间内完成操作。默认实现只能立即将该值更改最终值。

@param  from  移动开始时的初始值 
@param  to  移动之后的最终值 
@param  microseconds  移动持续的最长时间（以微秒为单位）


@see #getUpdatePeriod

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sound.sampled.FloatControl.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
提供控件的字符串表示形式 
@return  字符串描述

<!-- END DATA -->
