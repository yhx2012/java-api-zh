<!-- BEGIN KEY -->
public static class javax.sound.sampled.AudioFormat.Encoding extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Encoding</code> 类命名用于音频流的数据表示形式的特定类型。编码除了信道数、样本频率、样本大小、帧速率、帧大小和字节顺序之外，还包括音频格式。
 <p>
音频编码的常见类型是脉冲编码调制 (PCM)，它只是声音波形的线性（比例）表示形式。有了 PCM，每个样本中存储的数字都与该时间点上的声压瞬时振幅成比例。这些数字通常是有符号的或无符号的整数。除了 PCM 外，其他编码还有 mu-law 和 a-law，它们是常用于记录语音的声音振幅的非线性映射。
 <p>
通过引用由此类创建的静态对象（如 PCM_SIGNED 或 PCM_UNSIGNED）之一，可以使用预定义的编码。服务提供者可以创建新的编码（如压缩音频格式或浮点 PCM 样本），并可通过 <code>{@link AudioSystem}</code> 类使用这些编码。
 <p>
<code>Encoding</code> 类是静态类，所以具有相同编码的所有 <code>AudioFormat</code> 对象都将引用同一个对象（而不是同一类的不同实例）。这允许通过检查两种格式的编码是否相等进行匹配操作。

@see AudioFormat
@see javax.sound.sampled.spi.FormatConversionProvider

@author Kara Kytle
@version 1.36 05/11/17
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.sound.sampled.AudioFormat.Encoding javax.sound.sampled.AudioFormat.Encoding.PCM_SIGNED
<!-- END KEY -->
<!-- BEGIN DATA -->
指定有符号的线性 PCM 数据。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.sound.sampled.AudioFormat.Encoding javax.sound.sampled.AudioFormat.Encoding.PCM_UNSIGNED
<!-- END KEY -->
<!-- BEGIN DATA -->
指定无符号的线性 PCM 数据。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.sound.sampled.AudioFormat.Encoding javax.sound.sampled.AudioFormat.Encoding.ULAW
<!-- END KEY -->
<!-- BEGIN DATA -->
指定 u-law 编码数据。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.sound.sampled.AudioFormat.Encoding javax.sound.sampled.AudioFormat.Encoding.ALAW
<!-- END KEY -->
<!-- BEGIN DATA -->
指定 a-law 编码数据。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.sampled.AudioFormat.Encoding(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新编码。
@param name	新编码类型的名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean javax.sound.sampled.AudioFormat.Encoding.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
终止 equals 方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.sound.sampled.AudioFormat.Encoding.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
终止 hashCode 方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.sound.sampled.AudioFormat.Encoding.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
提供编码的 <code>String</code> 表示形式。此 <code>String</code> 与传入构造方法的名称相同。对于预定义的编码，该名称类似于编码的变量（字段）名称。例如，<code>PCM_SIGNED.toString()</code> 返回名称 &quot;pcm_signed&quot;。

@return  编码名称

<!-- END DATA -->
