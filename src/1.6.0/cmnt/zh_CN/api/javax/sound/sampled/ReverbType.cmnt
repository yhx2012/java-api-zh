<!-- BEGIN KEY -->
public class javax.sound.sampled.ReverbType extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>ReverbType</code> 类提供用于访问应用于音频信号的各种回响设置的方法。
 <p>
回响模拟从一个房间的墙壁、天花板和地板发出的声音反射。根据房间的大小和房间表面材料吸收和反射度，声音可能回响很长时间才消失。
 <p>
<code>ReverbType</code> 提供的回响参数由早期反射的延迟时间和强度、晚期反射的延迟时间和强度以及总衰减时间组成。早期反射是房间表面发出的直接信号的单独初始低级反射。晚期反射是以房间回响为特征的密集型高级返射。启动这两种反射类型的延迟时间使侦听器认识到房间形状和容量的总体大小和复杂性。房间越大，反射延迟时间越长。早期和晚期的反射强度定义了反射信号与直接信号相比的音量（以分贝为单位）。这些强度使侦听器记住房间表面和其中物体的吸收特性。衰减时间定义回响在不再被察觉之前（&ldquo;有效 0&rdquo;）呈指数级衰减所用的时间。表面的吸收力越大或越小，衰减时间都会变得越长。
 <p>
这里定义的参数集合可能不包括回响的所有方面，正如有些系统指定的一样。例如，Midi 制造商联盟 (MMA) 有一个交互式专业组 (IASIG)，该组有一个已定义 Level 2 Spec 的 3-D 工作组 (I3DL2)。I3DL2 支持回响过滤和对回响密度的控制。JavaSound 1.0 回响控件的定义中不包括这些属性。在此情况下，实现系统应该要么扩展定义的回响控件以包括附加的参数，要么以适合这里所描述模型的方式解释系统的其他功能。  
 <p>
如果在 I3DL2 兼容的设备上实现 JavaSound，则：
 <ul>
<li>禁用过滤（将高频衰减设置为 0.0 dB）
<li>将密度参数设置为最小密度和最大密度之间的中间值
 </ul>
 <p>
下表显示了实现可用于有代表性的一组回响设置的参数值。  
 <p>
 
<b>回响类型和参数</b>
 <p>
 <table border=1 cellpadding=5 summary="reverb types and params: decay time, late intensity, late delay, early intensity, and early delay">
 
 <tr>
<th>类型</th>
<th>衰减时间 (ms)</th>
<th>晚期密度 (dB)</th>
<th>晚期延迟 (ms)</th>
<th>早期密度 (dB)</th>
<th>早期延迟 (ms)</th>
 </tr>
 
 <tr>
<td>山洞</td>
  <td>2250</td>
  <td>-2.0</td>
  <td>41.3</td>
  <td>-1.4</td>
  <td>10.3</td>
 </tr>
 
 <tr>
<td>地下室</td>
  <td>1600</td>
  <td>-1.0</td>
  <td>10.3</td>
  <td>-0.7</td>
  <td>2.6</td>
 </tr>
 
 <tr>
<td>车库</td>
  <td>900</td>
  <td>-6.0</td>
  <td>14.7</td>
  <td>-4.0</td>
  <td>3.9</td>
 </tr>
 
 <tr>
<td>声音实验室</td>
  <td>280</td>
  <td>-3.0</td>
  <td>8.0</td>
  <td>-2.0</td>
  <td>2.0</td>
 </tr>
 
 <tr>
<td>壁橱</td>
  <td>150</td>
  <td>-10.0</td>
  <td>2.5</td>
  <td>-7.0</td>
  <td>0.6</td>
 </tr>
 
 </table>
 
@author Kara Kytle
@version 1.14, 05/11/17
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.sound.sampled.ReverbType(String name, int earlyReflectionDelay, float earlyReflectionIntensity, int lateReflectionDelay, float lateReflectionIntensity, int decayTime)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定回响参数值的新回响类型。
@param  name  新回响类型的名称，或长度为 0 的 <code>String</code>
@param  earlyReflectionDelay  新类型的早期反射延迟时间，以微秒为单位
@param  earlyReflectionIntensity  新类型的早期反射密度，以 dB 为单位
@param  lateReflectionDelay  新类型的晚期反射延迟时间，以微秒为单位
@param  lateReflectionIntensity 新类型的晚期反射密度，以 dB 为单位
@param  decayTime  新类型的衰减时间，以微秒为单位

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sound.sampled.ReverbType.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得此回响类型的名称。
@return  此回响类型的名称
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.sound.sampled.ReverbType.getEarlyReflectionDelay()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回早期反射延迟时间，以微秒为单位。该时间是听到直接信号时和听到前几个早期反射时之间的时间差。
@return  此回响类型的早期反射延迟时间，以微秒为单位

<!-- END DATA -->
<!-- BEGIN KEY -->
public final float javax.sound.sampled.ReverbType.getEarlyReflectionIntensity()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回早期反射密度，以分贝为单位。这是相对于直接信号的头几个早期反射的振幅衰减。
@return  此回响类型的早期反射密度，以 dB 为单位

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.sound.sampled.ReverbType.getLateReflectionDelay()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回晚期反射延迟时间，以微秒为单位。这是听到头几个早期反射时和听到头几个早期反射时之间的时间量。
@return  此回响类型的晚期反射延迟时间，以微秒为单位

<!-- END DATA -->
<!-- BEGIN KEY -->
public final float javax.sound.sampled.ReverbType.getLateReflectionIntensity()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回晚期反射密度，以分贝为单位。这是相对于直接信号的头几个晚期反射的振幅衰减。
@return  此回响类型的晚期反射密度，以 dB 为单位

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.sound.sampled.ReverbType.getDecayTime()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得衰减时间，该时间是晚期反射削弱到有效 0 的总时间差。该有效 0 值与实现有关。
@return  晚期反射的衰减时间，以微秒为单位

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean javax.sound.sampled.ReverbType.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
指示指定对象是否等于此回响类型，如果对象相同，则返回 <code>true</code>。
@param  obj  要与之进行比较的引用对象 
@return  如果此回响类型与 <code>obj</code> 相同，则返回 <code>true</code>；否则返回 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.sound.sampled.ReverbType.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
终止 hashcode 方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.sound.sampled.ReverbType.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
提供回响类型的 <code>String</code> 表示形式，包括其名称和其参数设置。字符串的具体内容可以在 Java Sound 的实现之间变化。
@return  回响类型名称和描述

<!-- END DATA -->
