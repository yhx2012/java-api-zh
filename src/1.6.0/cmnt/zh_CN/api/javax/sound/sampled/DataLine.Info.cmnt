<!-- BEGIN KEY -->
public static class javax.sound.sampled.DataLine.Info extends javax.sound.sampled.Line.Info
<!-- END KEY -->
<!-- BEGIN DATA -->
除了继承自其超类的类信息之外，<code>DataLine.Info</code> 还提供特定于数据行的其他信息。这些信息包括：
 <ul>
<li> 受数据行支持的音频格式
<li> 其内部缓冲区的最小和最大大小
 </ul>
因为 <code>Line.Info</code> 了解它所描述的行的类，所以 <code>DataLine.Info</code> 对象可以描述 <code>DataLine</code> 子接口（比如 <code>{@link SourceDataLine}</code>、<code>{@link TargetDataLine}</code> 和 <code>{@link Clip}</code>）。通过将 <code>DataLine.Info</code> 的适当实例作为参数传递到某一方法（如 <code>{@link Mixer#getLine Mixer.getLine(Line.Info)}</code>），可以查询任何类型的行混频器。

@see Line.Info
@author Kara Kytle
@version 1.34, 05/11/17
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.sampled.DataLine.Info(java.lang.Class<?> lineClass, javax.sound.sampled.AudioFormat[] formats, int minBufferSize, int maxBufferSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定信息构造数据行的信息对象，这些包括受支持音频格式的集合和缓冲区大小的范围。此构造方法通常在返回受支持行的信息时由混频器实现使用。

@param  lineClass  该信息对象描述的数据行的类 
@param  formats  受支持格式的集合 
@param  minBufferSize  数据行支持的最小缓冲区大小（以字节为单位）
@param  maxBufferSize  数据行支持的最大缓冲区大小（以字节为单位）

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.sampled.DataLine.Info(java.lang.Class<?> lineClass, AudioFormat format, int bufferSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定信息构造数据行的信息对象，这些信息包括单个音频格式和所需的缓冲区大小。此构造方法通常由应用程序用于描述所需的行。

@param  lineClass  该信息对象描述的数据行的类 
@param  format  所需的格式 
@param  bufferSize  所需的缓冲区大小（以字节为单位）

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.sampled.DataLine.Info(java.lang.Class<?> lineClass, AudioFormat format)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定信息构造数据行的信息对象，这些信息包括单个音频格式。此构造方法通常由应用程序用于描述所需的行。

@param  lineClass  该信息对象所描述的数据行的类 
@param  format  所需的格式

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.sampled.AudioFormat[] javax.sound.sampled.DataLine.Info.getFormats()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得数据行支持的音频格式的集合。注意，<code>isFormatSupported(AudioFormat)</code> 可能为某种其他格式返回 <code>true</code>，这些格式是从 <code>getFormats()</code> 返回的集合中丢失的。反之则不然：保证 <code>isFormatSupported(AudioFormat)</code> 为所有由 <code>getFormats()</code> 返回的格式返回 <code>true</code>。

如果 AudioFormat 实例中的某些字段不适用该格式，或者如果该格式不支持对字段使用大量的值，则可以将这些字段设置为 {@link javax.sound.sampled.AudioSystem#NOT_SPECIFIED NOT_SPECIFIED}。例如，最多支持 64 个信道的多信道设备可以将此方法返回的 <code>AudioFormat</code> 实例中的信道字段设置为 <code>NOT_SPECIFIED</code>。

@return  受支持的音频格式的集合。
@see #isFormatSupported(AudioFormat)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sound.sampled.DataLine.Info.isFormatSupported(AudioFormat format)
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此数据行是否支持特定的音频格式。如果指定格式与任何受支持的格式匹配，则此方法的默认实现只返回 <code>true</code>。

@param  format  查询其是否受支持的音频格式。
@return  如果该格式受支持，则返回 <code>true</code>；否则返回 <code>false</code> 
@see #getFormats
@see AudioFormat#matches

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.sampled.DataLine.Info.getMinBufferSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得数据行支持的最小缓冲区大小。
@return  以字节为单位的最小缓冲区大小，或 <code>AudioSystem.NOT_SPECIFIED</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.sampled.DataLine.Info.getMaxBufferSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得数据行支持的最大缓冲区大小。
@return  以字节为单位的最大缓冲区大小，或 <code>AudioSystem.NOT_SPECIFIED</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sound.sampled.DataLine.Info.matches(Line.Info info)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定指定的信息对象是否与此对象匹配。若要匹配，则必须满足超类匹配要求。此外，该对象的最小缓冲区大小必须至少与指定对象的缓冲区大小相同，其最大缓冲区大小必须至多与指定对象的缓冲区大小相同，并且它的所有格式都必须与指定对象支持的格式匹配。
@return  如果此对象与指定的对象匹配，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sound.sampled.DataLine.Info.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得数据行信息的文本描述。
@return  字符串描述

<!-- END DATA -->
