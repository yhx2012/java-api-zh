<!-- BEGIN KEY -->
public abstract class javax.sound.sampled.spi.AudioFileReader extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
音频文件读取服务的提供者。提供具体实现的类可以根据一种或多种类型的音频文件来分析格式信息，并且可以根据这些类型的文件生成音频输入流。

@author Kara Kytle
@version 1.16 05/11/17
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.sound.sampled.AudioFileFormat javax.sound.sampled.spi.AudioFileReader.getAudioFileFormat(InputStream stream) throws javax.sound.sampled.UnsupportedAudioFileException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
获得所提供输入流的音频文件格式。该流必须指向有效的音频文件数据。通常，音频文件 reader 可能需要在确定它们是否支持该流之前从中读取一些数据。这些解析器必须能够标记该流，读取足够量的数据来确定它们是否支持该流，如果不支持，则将该流的阅读指针重新设置到其初始位置。如果输入流不支持此操作，则此方法可能会失败，并抛出 <code>IOException</code>。
@param  stream  应该从中提取文件格式信息的输入流 
@return  描述音频文件格式的 <code>AudioFileFormat</code> 对象 
@throws  UnsupportedAudioFileException  如果该流没有指向系统识别的有效音频文件数据 
@throws  IOException  如果发生 I/O 异常 
@see  InputStream#markSupported 
@see  InputStream#mark

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.sound.sampled.AudioFileFormat javax.sound.sampled.spi.AudioFileReader.getAudioFileFormat(URL url) throws javax.sound.sampled.UnsupportedAudioFileException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
获得所提供 URL 的音频文件格式。该 URL 必须指向有效的音频文件数据。
@param  url  应该从中提取文件格式信息的 URL 
@return  描述音频文件格式的 <code>AudioFileFormat</code> 对象 
@throws  UnsupportedAudioFileException  如果该 URL 没有指向系统识别的有效音频文件数据 
@throws  IOException  如果发生 I/O 异常

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.sound.sampled.AudioFileFormat javax.sound.sampled.spi.AudioFileReader.getAudioFileFormat(File file) throws javax.sound.sampled.UnsupportedAudioFileException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
获得所提供 <code>File</code> 的音频文件格式。该 <code>File</code> 必须指向有效的音频文件数据。
@param  file  应该从中提取文件格式信息的 <code>File</code> 
@return  描述音频文件格式的 <code>AudioFileFormat</code> 对象 
@throws  UnsupportedAudioFileException  如果 <code>File</code> 没有指向系统识别的有效文件数据 
@throws  IOException  如果发生 I/O 异常

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.sound.sampled.AudioInputStream javax.sound.sampled.spi.AudioFileReader.getAudioInputStream(InputStream stream) throws javax.sound.sampled.UnsupportedAudioFileException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从所提供的输入流中获得音频输入流。该流必须指向有效的音频文件数据。通常，音频文件 reader 可能需要在确定它们是否支持该流之前从中读取一些数据。这些解析器必须能够标记该流，读取足够量的数据来确定它们是否支持该流，如果不支持，则将该流的阅读指针重新设置到其初始位置。如果输入流不支持此操作，则此方法可能会失败，并抛出 <code>IOException</code>。
@param  stream  应该从中构造 <code>AudioInputStream</code> 的输入流 
@return  基于包含在输入流中的音频文件数据的 <code>AudioInputStream</code> 对象。
@throws  UnsupportedAudioFileException  如果该流没有指向系统识别的有效音频文件数据 
@throws  IOException  如果发生 I/O 异常 
@see  InputStream#markSupported 
@see  InputStream#mark

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.sound.sampled.AudioInputStream javax.sound.sampled.spi.AudioFileReader.getAudioInputStream(URL url) throws javax.sound.sampled.UnsupportedAudioFileException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从所提供的 URL 获得音频输入流。该 URL 必须指向有效的音频文件数据。
@param  url  应该为其构造 <code>AudioInputStream</code> 的 URL 
@return 基于由 URL 指向的音频文件数据的 <code>AudioInputStream</code> 对象 
@throws  UnsupportedAudioFileException 如果 URL 没有指向系统识别的有效音频文件数据 
@throws  IOException  如果发生 I/O 异常

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.sound.sampled.AudioInputStream javax.sound.sampled.spi.AudioFileReader.getAudioInputStream(File file) throws javax.sound.sampled.UnsupportedAudioFileException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从所提供的 <code>File</code> 获得音频输入流。该 <code>File</code> 必须指向有效的音频文件数据。
@param  file  应该为其构造 <code>AudioInputStream</code> 的 <code>File</code> 
@return  基于由 File 指向的音频文件数据的 <code>AudioInputStream</code> 对象 
@throws  UnsupportedAudioFileException  如果 <code>File</code> 没有指向系统识别的有效音频文件数据 
@throws  IOException  如果发生 I/O 异常

<!-- END DATA -->
