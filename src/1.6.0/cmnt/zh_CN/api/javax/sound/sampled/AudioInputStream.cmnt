<!-- BEGIN KEY -->
public class javax.sound.sampled.AudioInputStream extends java.io.InputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
音频输入流是具有指定音频格式和长度的输入流。长度用示例帧表示，不用字节表示。提供几种方法，用于从流读取一定数量的字节，或未指定数量的字节。音频输入流跟踪所读取的最后一个字节。可以跳过任意数量的字节以到达稍后的读取位置。音频输入流可支持标记。设置标记时，会记住当前位置，以便可以稍后返回到该位置。
 <p>
<code>AudioSystem</code> 类包括许多操作 <code>AudioInputStream</code> 对象的方法。例如，这些方法可以让您：
 <ul>
<li> 从外部音频文件、流或 URL 获得音频输入流
<li> 从音频输入流写入外部文件
<li> 将音频输入流转换为不同的音频格式
 </ul>

@author David Rivas
@author Kara Kytle
@author Florian Bomers
@version 1.34, 05/11/17

@see AudioSystem
@see Clip#open(AudioInputStream) Clip.open(AudioInputStream)
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.sound.sampled.AudioFormat javax.sound.sampled.AudioInputStream.format
<!-- END KEY -->
<!-- BEGIN DATA -->
流中包含的音频数据的格式。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected long javax.sound.sampled.AudioInputStream.frameLength
<!-- END KEY -->
<!-- BEGIN DATA -->
此流的长度，以示例帧为单位。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.sound.sampled.AudioInputStream.frameSize
<!-- END KEY -->
<!-- BEGIN DATA -->
每帧的大小，以字节为单位。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected long javax.sound.sampled.AudioInputStream.framePos
<!-- END KEY -->
<!-- BEGIN DATA -->
此流中的当前位置，以示例帧为单位（从零开始）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.sampled.AudioInputStream(InputStream stream, AudioFormat format, long length)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定输入流中的音频数据构造具有请求的格式和长度（以示例帧为单位）的音频输入流。
@param  stream 流，<code>AudioInputStream</code> 对象以该为基础 
@param  format  此流的音频数据格式 
@param  length  在此流中的数据长度（以示例帧为单位）

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.sampled.AudioInputStream(TargetDataLine line)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造从指示的目标数据行读取数据的音频输入流。该流的格式与目标数据行的格式相同，长度为 AudioSystem#NOT_SPECIFIED。
@param  line  此流从中获得数据的目标数据行。
@see AudioSystem#NOT_SPECIFIED

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.sampled.AudioFormat javax.sound.sampled.AudioInputStream.getFormat()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得此音频输入流中声音数据的音频格式。
@return  描述此流的格式的音频格式对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.sound.sampled.AudioInputStream.getFrameLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得流的长度，以示例帧表示，而不是以字节表示。
@return  以示例帧为单位的长度

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.sampled.AudioInputStream.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从音频输入流读取数据下一个字节。音频输入流的帧大小必须是一个字节，否则将抛出 <code>IOException</code>。

@return  数据的下一个字节；如果已到达流的末尾，则返回 -1 
@throws IOException  如果发生输入或输出错误 
@see #read(byte[], int, int)
@see #read(byte[])
@see #available
 <p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.sampled.AudioInputStream.read(byte[] b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从音频输入流读取一定数量的字节，并将其存储在缓冲区数组 <code>b</code> 中。以整数形式返回实际读取的字节数。在输入数据可用、检测到流末尾或抛出异常之前，此方法将一直阻塞。
<p>此方法将总是读取整数帧。如果数组的长度不是整数帧，则读取最大数量的 <code>b.length - (b.length % frameSize)</code> 字节。

@param  b  将数据读入的缓冲区 
@return  读入缓冲区的总字节数；如果因已到达流末尾而不再有更多数据，则返回 -1
@throws  IOException  如果发生输入或输出错误 
@see #read(byte[], int, int)
@see #read()
@see #available

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.sampled.AudioInputStream.read(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从音频流读取指定的最大数量的数据字节，并将其放入给定的字节数组中。
<p>此方法将总是读取整数帧。如果 <code>len</code> 未指定整数帧，则读取最大数量的 <code>len - (len % frameSize)</code> 字节。

@param  b  将数据读入的缓冲区 
@param  off  从数组 <code>b</code> 的开头开始的偏移量，将从此处写入数据 
@param  len  要读取的最大数量的字节 
@return  读入缓冲区的总字节数；如果因已到达流末尾而不再有更多数据，则返回 -1
@throws  IOException  如果发生输入或输出错误 
@see #read(byte[])
@see #read()
@see #skip
@see #available

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.sound.sampled.AudioInputStream.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
跳过并丢弃此音频输入流中指定数量的字节。
@param  n  要跳过的请求数量的字节 
@return  跳过的实际字节数 
@throws  IOException  如果发生输入或输出错误 
@see #read
@see #available

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.sampled.AudioInputStream.available() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回可不受阻塞地从此音频输入流中读取（或跳过）的最大字节数。此限制只应用于对此音频输入流的 <code>read</code> 或 <code>skip</code> 方法的下一个调用；每次调用这些方法时该限制都可以有所不同。如果关闭此流，则可能抛出 IOException，这一点取决于基础流。
@return  可以不受阻塞地从此音频输入流中读取的字节数 
@throws  IOException  如果发生输入或输出错误 
@see #read(byte[], int, int)
@see #read(byte[])
@see #read()
@see #skip

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sound.sampled.AudioInputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此音频输入流并释放与该流关联的所有系统资源。
@throws  IOException  如果发生输入或输出错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sound.sampled.AudioInputStream.mark(int readlimit)
<!-- END KEY -->
<!-- BEGIN DATA -->
标记此音频输入流中的当前位置。
@param  readlimit  在标记位置变得无效之前可以读取的最大字节数。
@see #reset
@see #markSupported

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sound.sampled.AudioInputStream.reset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此音频输入流重新定位到上一次调用其 <code>mark</code> 方法时的位置。
@throws  IOException  如果发生输入或输出错误。
@see #mark
@see #markSupported

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sound.sampled.AudioInputStream.markSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试此音频输入流是否支持 <code>mark</code> 和 <code>reset</code> 方法。
@return  如果此流支持 <code>mark</code> 和 <code>reset</code> 方法，则返回 <code>true</code>；否则返回 <code>false</code> 
@see #mark
@see #reset

<!-- END DATA -->
