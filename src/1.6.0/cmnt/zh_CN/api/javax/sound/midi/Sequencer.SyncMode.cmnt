<!-- BEGIN KEY -->
public static class javax.sound.midi.Sequencer.SyncMode extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SyncMode</code> 对象表示 MIDI sequencer 的时间标记可与主或从设备同步的方式之一。如果 sequencer 与主设备同步，sequencer 将修改其当前时间以响应主设备的消息。如果 sequencer 带有从设备，此 sequencer 通常会发送消息以控制从设备的计时。
 <p>
有三种预定义模式可为 sequencer 指定一个可能的主设备：<code>INTERNAL_CLOCK</code>、<code>MIDI_SYNC</code> 和 <code>MIDI_TIME_CODE</code>。后两种在 sequencer 从其他设备接收 MIDI 消息时工作。在这两种模式中，sequencer 的时间基于系统实时计时时钟消息和各自的 MIDI 时间代码 (MTC) 消息进行重置。这两种模式还可用于辅模式，此时，sequencer 将相应类型的 MIDI 消息发送至其接收者（无论此 sequencer 是否还从主设备接收它们）。第四种模式 <code>NO_SYNC</code> 用于指示 sequencer 不应控制其接收者的计时。

@see Sequencer#setMasterSyncMode(Sequencer.SyncMode)
@see Sequencer#setSlaveSyncMode(Sequencer.SyncMode)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.sound.midi.Sequencer.SyncMode javax.sound.midi.Sequencer.SyncMode.INTERNAL_CLOCK
<!-- END KEY -->
<!-- BEGIN DATA -->
主同步模式，它使 sequencer 从其内部时钟获取计时信息。这不是一个合法的辅同步模式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.sound.midi.Sequencer.SyncMode javax.sound.midi.Sequencer.SyncMode.MIDI_SYNC
<!-- END KEY -->
<!-- BEGIN DATA -->
指定使用 MIDI 时钟消息的主或辅同步模式。如果此模式用作主同步模式，sequencer 从系统实时 MIDI 时钟消息获取其计时信息。此模式只适用于 sequencer 的主同步模式，sequencer 也是 MIDI 接收者。如果这里为辅同步模式，此 sequencer 发送系统实时 MIDI 时钟消息至其接收者。MIDI 时钟消息发送速度为每四分音符 24 个。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.sound.midi.Sequencer.SyncMode javax.sound.midi.Sequencer.SyncMode.MIDI_TIME_CODE
<!-- END KEY -->
<!-- BEGIN DATA -->
指定使用 MIDI 时间代码的主或辅同步模式如果此模式用作主同步模式，sequencer 从 MIDI 时间代码消息获取其计时信息。此模式只适用于 sequencer 的主同步模式，sequencer 也是 MIDI 接收者。如果此模式用作辅同步模式，sequencer 发送 MIDI 时间代码消息至其接收者。（请参见 MIDI 1.0 Detailed Specification 获取对 MIDI 时间代码的描述。）

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.sound.midi.Sequencer.SyncMode javax.sound.midi.Sequencer.SyncMode.NO_SYNC
<!-- END KEY -->
<!-- BEGIN DATA -->
辅同步模式，指示不应向接收者发送任何计时信息。这不是一个合法的主同步模式。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.sound.midi.Sequencer.SyncMode(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个同步模式。
@param name 同步模式的名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean javax.sound.midi.Sequencer.SyncMode.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定两个对象是否等价。如果两个对象相同，则返回 <code>true</code>
@param obj 参与比较的参考对象
@return 如果此对象与 <code>obj</code> 参数相等，则返回 <code>true</code>，否则返回 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.sound.midi.Sequencer.SyncMode.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
终结 hashcode 方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.sound.midi.Sequencer.SyncMode.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
以模式的字符串表示形式提供此同步模式的名称。
@return 此同步模式的名称

<!-- END DATA -->
