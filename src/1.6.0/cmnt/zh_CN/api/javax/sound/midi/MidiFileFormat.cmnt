<!-- BEGIN KEY -->
public class javax.sound.midi.MidiFileFormat extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>MidiFileFormat</code> 对象，它封装了 MIDI 文件的类型、长度和定时信息。

<p><code>MidiFileFormat</code> 对象可包含一组属性。属性是一对键和值：键的类型是 <code>String</code>，关联属性值是任意对象。属性指定其他的信息元数据（如作者或版权）。属性是可选信息，不要求文件 reader 和文件 writer 实现提供或识别属性。

<p>下表列出了一些应在实现中使用的常见属性：

 <table border=1>
  <tr>
<th>属性键</th>
<th>值类型</th>
<th>描述</th>
  </tr>
  <tr>
<td>&quot;author&quot;</td>
   <td>{@link java.lang.String String}</td>
<td>此文件的作者名</td>
  </tr>
  <tr>
   <td>&quot;title&quot;</td>
   <td>{@link java.lang.String String}</td>
<td>此文件的标题</td>
  </tr>
  <tr>
   <td>&quot;copyright&quot;</td>
   <td>{@link java.lang.String String}</td>
<td>版权消息</td>
  </tr>
  <tr>
   <td>&quot;date&quot;</td>
   <td>{@link java.util.Date Date}</td>
<td>录制或发行日期</td>
  </tr>
  <tr>
   <td>&quot;comment&quot;</td>
   <td>{@link java.lang.String String}</td>
<td>任意文本</td>
  </tr>
 </table>

@see MidiSystem#getMidiFileFormat(java.io.File)
@see Sequencer#setSequence(java.io.InputStream stream)

@version 1.18, 05/11/17
@author Kara Kytle
@author Florian Bomers

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.MidiFileFormat.UNKNOWN_LENGTH
<!-- END KEY -->
<!-- BEGIN DATA -->
表示未知长度。
@see #getByteLength
@see #getMicrosecondLength

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.sound.midi.MidiFileFormat.type
<!-- END KEY -->
<!-- BEGIN DATA -->
MIDI 文件的类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected float javax.sound.midi.MidiFileFormat.divisionType
<!-- END KEY -->
<!-- BEGIN DATA -->
MIDI 文件的 division 类型。

@see Sequence#PPQ
@see Sequence#SMPTE_24
@see Sequence#SMPTE_25
@see Sequence#SMPTE_30DROP
@see Sequence#SMPTE_30

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.sound.midi.MidiFileFormat.resolution
<!-- END KEY -->
<!-- BEGIN DATA -->
MIDI 文件的定时精度。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.sound.midi.MidiFileFormat.byteLength
<!-- END KEY -->
<!-- BEGIN DATA -->
MIDI 文件的长度，以字节为单位。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected long javax.sound.midi.MidiFileFormat.microsecondLength
<!-- END KEY -->
<!-- BEGIN DATA -->
MIDI 文件的持续时间，以微秒为单位。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.midi.MidiFileFormat(int type, float divisionType, int resolution, int bytes, long microseconds)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>MidiFileFormat</code>。

@param type MIDI 文件类型（0、1 或 2）
@param divisionType 定时 division 类型（PPQ 或某一 SMPTE 类型）
@param resolution 定时精度
@param bytes MIDI 文件的长度，以字节为单位，如果长度未知，则为 UNKNOWN_LENGTH
@param microseconds 文件的持续时间，以微秒为单位，如果文件持续时间未知，则为 UNKNOWN_LENGTH
@see #UNKNOWN_LENGTH
@see Sequence#PPQ
@see Sequence#SMPTE_24
@see Sequence#SMPTE_25
@see Sequence#SMPTE_30DROP
@see Sequence#SMPTE_30

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.midi.MidiFileFormat(int type, float divisionType, int resolution, int bytes, long microseconds, java.util.Map<java.lang.String, java.lang.Object> properties)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带一组属性的 <code>MidiFileFormat</code>。

@param type MIDI 文件类型（0、1 或 2）
@param divisionType 定时 division 类型（PPQ 或某一 SMPTE 类型）
@param resolution 定时精度
@param bytes MIDI 文件的长度，以字节为单位，如果长度未知，则为 UNKNOWN_LENGTH
@param microseconds 文件的持续时间，以微秒为单位，如果文件持续时间未知，则为 UNKNOWN_LENGTH
@param properties 一个带属性的 <code>Map&lt;String,Object&gt;</code> 对象


@see #UNKNOWN_LENGTH
@see Sequence#PPQ
@see Sequence#SMPTE_24
@see Sequence#SMPTE_25
@see Sequence#SMPTE_30DROP
@see Sequence#SMPTE_30
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.midi.MidiFileFormat.getType()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得 MIDI 文件类型。
@return 文件的类型（0、1 或 2）

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.sound.midi.MidiFileFormat.getDivisionType()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得 MIDI 文件的定时 division 类型。

@return division 类型（PPQ 或某一 SMPTE 类型）


@see Sequence#Sequence(float, int)
@see Sequence#PPQ
@see Sequence#SMPTE_24
@see Sequence#SMPTE_25
@see Sequence#SMPTE_30DROP
@see Sequence#SMPTE_30
@see Sequence#getDivisionType()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.midi.MidiFileFormat.getResolution()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得 MIDI 文件的定时精度。如果 division 类型为 PPQ，则精度按每拍的节拍数指定。对于 SMTPE 定时，精度按每帧的节拍数指定。

@return 每拍 (PPQ) 或每帧 (SMPTE) 的节拍数
@see #getDivisionType
@see Sequence#getResolution()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.midi.MidiFileFormat.getByteLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得 MIDI 文件的长度，用 8 位字节表示。
@return 文件中的字节数，如果未知，则为 UNKNOWN_LENGTH
@see #UNKNOWN_LENGTH

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.sound.midi.MidiFileFormat.getMicrosecondLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得 MIDI 文件的长度，用微秒表示。
@return 文件的持续时间，以微秒为单位，如果未知，则返回 UNKNOWN_LENGTH
@see Sequence#getMicrosecondLength()
@see #getByteLength
@see #UNKNOWN_LENGTH

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map<java.lang.String, java.lang.Object> javax.sound.midi.MidiFileFormat.properties()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得属性的一个不可修改的映射。在{@link MidiFileFormat 类描述}中对属性的概念进行了进一步的介绍。

@return 一个包含所有属性的 <code>Map&lt;String,Object&gt;</code> 对象。如果没有任何可识别的属性，则返回一个空映射。

@see #getProperty(String)
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.sound.midi.MidiFileFormat.getProperty(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
获得由键指定的属性值。在{@link MidiFileFormat 类描述}中对属性的概念进行了进一步的介绍。

<p>如果对于一个特定的文件格式，指定的属性未定义，则此方法返回 <code>null</code>。

@param key 所需属性的键
@return 具有指定键的属性的值，如果此属性不存在，则返回 <code>null</code>。

@see #properties
@since 1.5

<!-- END DATA -->
