<!-- BEGIN KEY -->
public class javax.sound.midi.Patch extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
一个 <code>Patch</code> 对象，用于表示 MIDI 合成器上的某个位置，其中存储（加载）了单个乐器。每个 <code>Instrument</code> 对象都有其自己的 <code>Patch</code> 对象，它指定了乐器应加载到的内存位置。该位置由一个库索引和一个程序号抽象指定（而不是通过任何直接引用 RAM 的具体地址或偏移量的机制指定）。这是一种层次化索引机制：MIDI 提供多达 16384 个库，每个库包含多达 128 个程序位置。例如，最小类型的合成器可能只有一个乐器库，该库中只有 32 种乐器（程序）。  
 <p>
要选择演奏特定 MIDI 通道上的音符所使用的乐器，可使用两种指定包位置 MIDI 消息：一个是库选择命令，一个是程序更改通道命令。等效的 Java Sound 为 <code>MidiChannel</code> 的 {@link MidiChannel#programChange(int, int) programChange(int, int)} 方法。

@see Instrument
@see Instrument#getPatch()
@see MidiChannel#programChange(int, int)
@see Synthesizer#loadInstruments(Soundbank, Patch[])
@see Soundbank
@see Sequence#getPatchList()

@author Kara Kytle

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.midi.Patch(int bank, int program)
<!-- END KEY -->
<!-- BEGIN DATA -->
从指定的库和程序号构造一个新的 patch 对象。
@param bank 库索引（范围从 0 到 16383）
@param program 程序索引（范围从 0 到 127）

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.midi.Patch.getBank()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含该 <code>Patch</code> 指定其位置乐器的库的号码。
@return 库号，范围从 0 到 16383
@see MidiChannel#programChange(int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.midi.Patch.getProgram()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该 <code>Patch</code> 指定其位置的乐器在库中的索引号。
@return 乐器的程序号，范围从 0 到 127

@see MidiChannel#getProgram
@see MidiChannel#programChange(int)
@see MidiChannel#programChange(int, int)

<!-- END DATA -->
