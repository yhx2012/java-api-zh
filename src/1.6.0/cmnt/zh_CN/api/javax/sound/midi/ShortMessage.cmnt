<!-- BEGIN KEY -->
public class javax.sound.midi.ShortMessage extends javax.sound.midi.MidiMessage
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>ShortMessage</code> 包含了一个 MIDI 消息，该消息在状态字节后最多有两个数据字节。满足此标准的 MIDI 消息类型是通道声音、通道模式、系统常见和系统实时消息，换句话说，除系统独占和元事件之外的所有情况。<code>ShortMessage</code> 类提供了用于获取和设置 MIDI 消息内容的方法。
 <p>
多个 <code>ShortMessage</code> 方法带有整数参数，您可通过它来指定 MIDI 状态或数据字节。如果知道此数字值，则可以直接使用数字表示。对于系统常见和系统实时消息，通常可使用相应的 <code>ShortMessage</code> 字段，例如 {@link #SYSTEM_RESET SYSTEM_RESET}。对于通道消息，状态字节的高四位由一个命令值指定，低四位由一个 MIDI 通道号指定。要转换传入的 MIDI 数据字节（Java 带符号字节格式），可以使用 <code>{@link MidiMessage}</code> 类描述中给出的<A HREF="MidiMessage.html#integersVsBytes">变换码</A>。

@see SysexMessage
@see MetaMessage

@version 1.26, 05/11/17
@author David Rivas
@author Kara Kytle
@author Florian Bomers

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.MIDI_TIME_CODE
<!-- END KEY -->
<!-- BEGIN DATA -->
MIDI Time Code Quarter Frame 消息的状态字节（0xF1 或 241）。
@see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.SONG_POSITION_POINTER
<!-- END KEY -->
<!-- BEGIN DATA -->
SONG_POSITION_POINTER 消息的状态字节（0xF2 或 242）。
@see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.SONG_SELECT
<!-- END KEY -->
<!-- BEGIN DATA -->
MIDI SONG_SELECT 消息的状态字节（0xF3 或 243）。
@see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.TUNE_REQUEST
<!-- END KEY -->
<!-- BEGIN DATA -->
TUNE_REQUEST 消息的状态字节（0xF6 或 246）。
@see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.END_OF_EXCLUSIVE
<!-- END KEY -->
<!-- BEGIN DATA -->
End of System Exclusive 消息的状态字节（0xF7 或 247）。
@see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.TIMING_CLOCK
<!-- END KEY -->
<!-- BEGIN DATA -->
TIMING_CLOCK 消息的状态字节（0xF8 或 248）。
@see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.START
<!-- END KEY -->
<!-- BEGIN DATA -->
START 消息的状态字节（0xFA 或 250）。
@see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.CONTINUE
<!-- END KEY -->
<!-- BEGIN DATA -->
CONTINUE 消息的状态字节（0xFB 或 251）。
@see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.STOP
<!-- END KEY -->
<!-- BEGIN DATA -->
STOP 消息的状态字节（0xFC 或 252）。
@see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.ACTIVE_SENSING
<!-- END KEY -->
<!-- BEGIN DATA -->
ACTIVE_SENSING 消息的状态字节（0xFE 或 254）。
@see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.SYSTEM_RESET
<!-- END KEY -->
<!-- BEGIN DATA -->
SYSTEM_RESET 消息的状态字节（0xFF 或 255）。
@see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.NOTE_OFF
<!-- END KEY -->
<!-- BEGIN DATA -->
NOTE_OFF 消息的命令值（0x80 或 128）

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.NOTE_ON
<!-- END KEY -->
<!-- BEGIN DATA -->
NOTE_ON 消息的命令值（0x90 或 144）

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.POLY_PRESSURE
<!-- END KEY -->
<!-- BEGIN DATA -->
Polyphonic Key Pressure (Aftertouch) 消息的命令值（0xA0 或 128）

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.CONTROL_CHANGE
<!-- END KEY -->
<!-- BEGIN DATA -->
CONTROL_CHANGE 消息的命令值（0xB0 或 176）

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.PROGRAM_CHANGE
<!-- END KEY -->
<!-- BEGIN DATA -->
PROGRAM_CHANGE 消息的命令值（0xC0 或 192）

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.CHANNEL_PRESSURE
<!-- END KEY -->
<!-- BEGIN DATA -->
CHANNEL_PRESSURE (Aftertouch) 消息的命令值（0xD0 或 208）

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.PITCH_BEND
<!-- END KEY -->
<!-- BEGIN DATA -->
PITCH_BEND 消息的命令值（0xE0 或 224）

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.midi.ShortMessage()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的 <code>ShortMessage</code>。可保证新消息的内容指定一个有效的 MIDI 消息。之后，可以使用 <code>setMessage</code> 方法之一来设置消息的内容。
@see #setMessage

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.sound.midi.ShortMessage(byte[] data)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的 <code>ShortMessage</code>。
@param data 包含完整消息的 byte 数组。使用 <code>setMessage</code> 方法可更改消息数据。
@see #setMessage

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sound.midi.ShortMessage.setMessage(int status) throws javax.sound.midi.InvalidMidiDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
为不带任何数据字节的 MIDI 消息设置参数。
@param status	MIDI 状态字节
@throws <code>InvalidMidiDataException</code> 如果 <code>status</code> 没有为不要求任何数据字节的消息指定有效的 MIDI 状态字节。
@see #setMessage(int, int, int)
@see #setMessage(int, int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sound.midi.ShortMessage.setMessage(int status, int data1, int data2) throws javax.sound.midi.InvalidMidiDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
为带一个或两个数据字节的 MIDI 消息设置参数。如果消息只带一个数据字节，则忽略第二个数据字节；如果消息不带任何数据字节，则忽略两个数据字节。

@param status	MIDI 状态字节
@param data1		第一个数据字节
@param data2		第二个数据字节
@throws	<code>InvalidMidiDataException</code> 如果该状态字节或属于此消息的所有数据字节都未指定有效的 MIDI 消息。
@see #setMessage(int, int, int, int)
@see #setMessage(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sound.midi.ShortMessage.setMessage(int command, int channel, int data1, int data2) throws javax.sound.midi.InvalidMidiDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
为带两个数据字节的通道消息设置短消息参数。如果消息只带一个数据字节，则忽略第二个数据字节；如果消息不带任何数据字节，则忽略两个数据字节。

@param command	此消息所表示的 MIDI 命令
@param channel	与此消息关联的通道
@param data1		第一个数据字节
@param data2		第二个数据字节
@throws	<code>InvalidMidiDataException</code> 如果该状态字节或属于此消息的所有数据字节都未指定有效的 MIDI 消息

@see #setMessage(int, int, int)
@see #setMessage(int)
@see #getCommand
@see #getChannel
@see #getData1
@see #getData2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.midi.ShortMessage.getChannel()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此事件关联的 MIDI 通道。此方法假定事件是一个 MIDI 通道消息；否则返回值没有意义。
@return 与此消息关联的 MIDI 通道。
@see #setMessage(int, int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.midi.ShortMessage.getCommand()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此事件关联的 MIDI 命令。此方法假定事件是一个 MIDI 通道消息；否则返回值没有意义。
@see #setMessage(int, int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.midi.ShortMessage.getData1()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取消息中的第一个数据字节。
@return <code>data1</code> 字段的值
@see #setMessage(int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.midi.ShortMessage.getData2()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取消息中的第二个数据字节。
@return <code>data2</code> 字段的值
@see #setMessage(int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.sound.midi.ShortMessage.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个与此对象具有相同类和相同内容的新对象。
@return 此实例的一个副本。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final int javax.sound.midi.ShortMessage.getDataLength(int status) throws javax.sound.midi.InvalidMidiDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
检索与特定状态字节值关联的数据字节数。
@param status 状态字节值，必须表示一个短 MIDI 消息
@return 数据长度，以字节为单位（0、1 或 2）
@throws <code>InvalidMidiDataException</code> 如果 <code>status</code> 参数不表示任何短消息的状态字节

<!-- END DATA -->
