<!-- BEGIN KEY -->
public class javax.naming.CannotProceedException extends javax.naming.NamingException
<!-- END KEY -->
<!-- BEGIN DATA -->
抛出此异常指示操作到达了名称中的某一点，在该点上操作无法继续进行。在某一复合名称上执行操作时，命名服务提供者可以到达不属于其名称空间的名称部分。在该点上，它可以构造一个 CannotProceedException，然后调用 javax.naming.spi.NamingManager 提供的方法（比如 getContinuationContext()）来查找另一个提供者，以继续该操作。如果不能完成该过程，则向该上下文操作的调用者引发此异常。
<p>
如果程序想要单独处理此异常，它应该在试图捕获 NamingException 之前显式捕获 CannotProceedException。
<p>
CannotProceedException 实例与并发多线程访问不同步。尝试访问并修改 CannotProceedException 的多个线程应该锁定对象。

@author Rosanna Lee
@author Scott Seligman
@version 1.12 05/11/17
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.naming.Name javax.naming.CannotProceedException.remainingNewName
<!-- END KEY -->
<!-- BEGIN DATA -->
包含 Context.rename() 第二个 &quot;name&quot; 参数的剩余未解析部分。此信息对于继续 Context.rename() 操作是必需的。
 <p>
此字段被初始化为 null。不应该直接操作它：应该使用 getRemainingName() 和 setRemainingName() 访问和更新。
@serial

@see #getRemainingNewName
@see #setRemainingNewName

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Hashtable<?, ?> javax.naming.CannotProceedException.environment
<!-- END KEY -->
<!-- BEGIN DATA -->
包含与无法继续进行的 Context 或 DirContext 方法有关的环境。
 <p>
此字段被初始化为 null。不应该直接操作它：应该使用 getEnvironment() 和 setEnvironment() 访问和更新。
@serial

@see #getEnvironment
@see #setEnvironment

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.naming.Name javax.naming.CannotProceedException.altName
<!-- END KEY -->
<!-- BEGIN DATA -->
包含已解析对象的名称，该名称相对于上下文 <code>altNameCtx</code>。该名称是一个复合名称。如果为 null，则不指定任何名称。有关如何使用此方法的详细信息，请参见 <code>javax.naming.spi.ObjectFactory.getObjectInstance</code> 方法。
 <p>
此字段被初始化为 null。不应该直接操作它：应该使用 getAltName() 和 setAltName() 访问和更新。
@serial

@see #getAltName
@see #setAltName
@see #altNameCtx
@see javax.naming.spi.ObjectFactory#getObjectInstance

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.naming.Context javax.naming.CannotProceedException.altNameCtx
<!-- END KEY -->
<!-- BEGIN DATA -->
包含上下文，<code>altName</code> 是相对于该上下文指定的。如果为 null，则暗指默认初始上下文。有关如何使用此方法的详细信息，请参见 <code>javax.naming.spi.ObjectFactory.getObjectInstance</code> 方法。
 <p>
此字段被初始化为 null。不应该直接操作它：应该使用 getAltNameCtx() 和 setAltNameCtx() 访问和更新。
@serial

@see #getAltNameCtx
@see #setAltNameCtx
@see #altName
@see javax.naming.spi.ObjectFactory#getObjectInstance

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.CannotProceedException(String explanation)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用解释构造一个新的 CannotProceedException 实例。所有未指定字段都默认为 null。

@param	explanation	一个可能为 null 的字符串，包含有关此异常的附加详细信息。如果为 null，则此异常没有详细消息。
@see java.lang.Throwable#getMessage

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.CannotProceedException()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的 CannotProceedException 实例。所有字段都默认为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Hashtable<?, ?> javax.naming.CannotProceedException.getEnvironment()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索创建此异常时受影响的环境。
@return 可能为 null 的环境属性设置。null 表示没有为此异常记录任何环境。
@see #setEnvironment

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.CannotProceedException.setEnvironment(java.util.Hashtable<?, ?> environment)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置调用 getEnvironment() 时将返回的环境。
@param environment 可能为 null 的环境属性设置。null 表示不会为此异常记录任何环境。
@see #getEnvironment

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.Name javax.naming.CannotProceedException.getRemainingNewName()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此异常的 &quot;remaining new name&quot; 字段，当执行 rename() 操作期间抛出此异常时，将使用该字段。

@return 尚未解析的可能为 null 的新名称部分。该名称是一个复合名称。它可以为 null，表示剩余的新名称字段尚未设置。

@see #setRemainingNewName

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.CannotProceedException.setRemainingNewName(Name newName)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此异常的 &quot;remaining new name&quot; 字段。该设置值由 <code>getRemainingNewName()</code> 返回。
<p>
<tt>newName</tt> 是一个复合名称。如果打算使用复合名称或字符串设置此字段，则必须将该复合名称&ldquo;字符串化&rdquo;，并用使用该字符串的单个组件创建一个复合名称。然后可以使用得到的复合名称调用此方法。
<p>
创建并存储 <code>newName</code> 的副本。对 <code>name</code> 进行的后续更改不会影响此 NamingException 中的副本，反之亦然。

@param newName 可能为 null 的名称，&quot;remaining new name&quot; 将被设置成该名称。如果其为 null，则将剩余的名称字段设置为 null。

@see #getRemainingNewName

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.Name javax.naming.CannotProceedException.getAltName()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此异常的 <code>altName</code> 字段。它是已解析对象的名称，该名称相对于上下文 <code>altNameCtx</code>。在后续调用 <code>javax.naming.spi.ObjectFactory.getObjectInstance</code> 方法期间，将使用该名称。

@return 已解析对象的名称，该名称相对于 <code>altNameCtx</code>。该名称是一个复合名称。如果为 null，则不指定任何名称。

@see #setAltName
@see #getAltNameCtx
@see javax.naming.spi.ObjectFactory#getObjectInstance

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.CannotProceedException.setAltName(Name altName)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此异常的 <code>altName</code> 字段。

@param altName	已解析对象的名称，该名称相对于 <code>altNameCtx</code>。该名称是一个复合名称。如果为 null，则不指定任何名称。

@see #getAltName
@see #setAltNameCtx

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.Context javax.naming.CannotProceedException.getAltNameCtx()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此异常的 <code>altNameCtx</code> 字段。它是一个上下文，<code>altName</code> 就是相对于该上下文指定的。在后续调用 <code>javax.naming.spi.ObjectFactory.getObjectInstance</code> 方法期间，将使用该名称。

@return	上下文，<code>altName</code> 是相对于该上下文指定的。如果为 null，则暗指默认初始上下文。

@see #setAltNameCtx
@see #getAltName
@see javax.naming.spi.ObjectFactory#getObjectInstance

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.CannotProceedException.setAltNameCtx(Context altNameCtx)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此异常的 <code>altNameCtx</code> 字段。

@param altNameCtx 上下文，<code>altName</code> 是相对于该上下文指定的。如果为 null，则暗指默认初始上下文。

@see #getAltNameCtx
@see #setAltName

<!-- END DATA -->
