<!-- BEGIN KEY -->
public interface javax.naming.spi.ObjectFactoryBuilder
<!-- END KEY -->
<!-- BEGIN DATA -->
此接口表示创建对象工厂的生成器。
<p>
JNDI 框架允许通过<em>对象工厂</em> 动态加载对象实现。例如，当查找绑定在名称空间中的打印机时，如果打印服务将打印机的名称绑定到 Reference，则可以使用该打印机 Reference 创建一个打印机对象，从而查找的调用者可以在查找后直接在该打印机对象上操作。ObjectFactory 负责创建特定类型的对象。JNDI 使用默认策略来使用和加载对象工厂。可以通过调用使用 ObjectFactoryBuilder 参数的 <tt>NamingManager.setObjectFactoryBuilder()</tt> 重写此默认策略，ObjectFactoryBuilder 参数中包含创建/加载对象工厂的程序定义的方式。任何 <tt>ObjectFactoryBuilder</tt> 实现都必须实现此接口来创建对象工厂。

@author Rosanna Lee
@author Scott Seligman
@version 1.11 05/11/17

@see ObjectFactory
@see NamingManager#getObjectInstance
@see NamingManager#setObjectFactoryBuilder
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.spi.ObjectFactory javax.naming.spi.ObjectFactoryBuilder.createObjectFactory(Object obj, java.util.Hashtable<?, ?> environment) throws javax.naming.NamingException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用所提供的环境创建一个新对象工厂。
<p>
环境参数由调用者所有。该实现不会修改对象或保持对该对象的引用，尽管可能保持对其副本的引用。

@param obj 将为之创建工厂的对象（可能为 null）。
@param  environment  创建工厂时要使用的环境。可以为 null。
@return 非 null 的 ObjectFactory 新实例。
@exception NamingException 如果无法创建对象工厂。


<!-- END DATA -->
