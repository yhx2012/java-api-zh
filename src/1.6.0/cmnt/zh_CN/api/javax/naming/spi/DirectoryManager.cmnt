<!-- BEGIN KEY -->
public class javax.naming.spi.DirectoryManager extends javax.naming.spi.NamingManager
<!-- END KEY -->
<!-- BEGIN DATA -->
此类包含支持 <tt>DirContext</tt> 实现的方法。
<p>
此类是 <tt>NamingManager</tt> 的一个扩展。它包含一些方法供服务提供者用来访问对象工厂和状态工厂，并用来获得连续上下文以支持联合。
<p>
将 <tt>DirectoryManager</tt> 用于多个线程的并发访问是安全的。
<p>
除非另有说明，否则传递给任何方法的 <tt>Name</tt>、<tt>Attributes</tt> 或环境参数都归调用者所有。该实现不会修改对象或保持对该对象的引用，尽管可能保持对其副本的引用。

@author Rosanna Lee
@author Scott Seligman
@version 1.14 05/11/17

@see DirObjectFactory
@see DirStateFactory
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.naming.directory.DirContext javax.naming.spi.DirectoryManager.getContinuationDirContext(CannotProceedException cpe) throws javax.naming.NamingException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个将继续某个 <tt>DirContext</tt> 操作的上下文。此方法的运行非常类似于 <tt>NamingManager.getContinuationContext()</tt>，唯一的不同是它返回的连续上下文是一个 <tt>DirContext</tt>。

@param cpe 触发此连续的非 null 异常。
@return 用于继续该操作的非 null <tt>DirContext</tt> 对象。
@exception NamingException 如果发生命名异常。

@see NamingManager#getContinuationContext(CannotProceedException)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Object javax.naming.spi.DirectoryManager.getObjectInstance(Object refInfo, Name name, Context nameCtx, java.util.Hashtable<?, ?> environment, Attributes attrs) throws java.lang.Exception
<!-- END KEY -->
<!-- BEGIN DATA -->
为指定对象、属性和环境创建一个对象实例。
 <p>
除以下不同之处外，此方法与 <tt>NamingManager.getObjectInstance</tt> 相同：
<ul>
<li>
它接受包含与对象关联的属性的 <tt>Attributes</tt> 参数。<tt>DirObjectFactory</tt> 可以使用这些属性来保存所拥有的对象，以便从目录中查找它们。
<li>
所尝试的对象工厂必须实现 <tt>ObjectFactory</tt> 或 <tt>DirObjectFactory</tt>。如果它实现 <tt>DirObjectFactory</tt>，则使用 <tt>DirObjectFactory.getObjectInstance()</tt>，否则使用 <tt>ObjectFactory.getObjectInstance()</tt>。
</ul>
实现 <tt>DirContext</tt> 接口的服务提供者应该使用此方法而不是 <tt>NamingManager.getObjectInstance()</tt>。
<p>

@param refInfo 将为之创建对象的对象（可能为 null）。
@param name 此对象的相对于 <code>nameCtx</code> 的名称。指定名称是可选操作；如果忽略名称，则 <code>name</code> 应该为 null。
@param nameCtx 一个上下文，<code>name</code> 参数是相对于该上下文指定的。如果为 null，则 <code>name</code> 相对于默认初始上下文。
@param environment 将在创建对象和对象工厂时使用的环境（可能为 null）。
@param attrs 与 refInfo 关联的属性（可能为 null）。这些属性可能不是用于 refInfo 的完整属性集，可以从目录中读取更多的属性。
@return 使用 <code>refInfo</code> 和 <tt>attrs</tt> 创建的对象；如果无法通过工厂创建对象，则返回 <code>refInfo</code>。
@exception NamingException 如果在试图获得 URL 上下文时遇到命名异常，或者受访问的工厂之一抛出 NamingException。
@exception Exception 如果受访问的工厂之一抛出异常，或者加载和实例化工厂和对象类时遇到错误。工厂只有在不希望试图使用其他工厂创建对象时才抛出异常。请参见 <tt>DirObjectFactory.getObjectInstance()</tt>。
@see NamingManager#getURLContext
@see DirObjectFactory
@see DirObjectFactory#getObjectInstance
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.naming.spi.DirStateFactory.Result javax.naming.spi.DirectoryManager.getStateToBind(Object obj, Name name, Context nameCtx, java.util.Hashtable<?, ?> environment, Attributes attrs) throws javax.naming.NamingException
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定初始对象及其属性时，检索用于绑定的对象的状态。
 <p>
除以下不同之处外，此方法与 <tt>NamingManager.getStateToBind</tt> 类似：
<ul>
<li>它接受包含传递给 <tt>DirContext.bind()</tt> 方法的属性的 <tt>Attributes</tt> 参数。
<li>它返回一个非 null <tt>DirStateFactory.Result</tt> 实例，该实例包含将被绑定的对象，以及伴随该绑定的属性。该对象和属性都可以为 null。
<li>
每个所尝试的状态工厂都必须实现 <tt>StateFactory</tt> 或 <tt>DirStateFactory</tt>。如果它实现 <tt>DirStateFactory</tt>，则调用 <tt>DirStateFactory.getStateToBind()</tt>；否则调用 <tt>StateFactory.getStateToBind()</tt>。
</ul>

实现 <tt>DirContext</tt> 接口的服务提供者应该使用此方法而不是 <tt>NamingManager.getStateToBind()</tt>。
<p>
有关如何确定要尝试的状态工厂列表的描述，请参见 NamingManager.getStateToBind()。
<p>
此方法返回的对象归调用者所有。该实现随后不会对它进行修改。它或者包含一个同样归调用者所有的新 <tt>Attributes</tt> 对象，或者包含对原始 <tt>attrs</tt> 参数的引用。

@param obj 将为其获得要绑定的状态的非 null 对象。
@param name 此对象相对于 <code>nameCtx</code> 的名称，如果没有指定名称，则该参数为 null。
@param nameCtx 一个上下文，<code>name</code> 参数是相对于该上下文指定的，如果 <code>name</code> 相对于默认初始上下文，则该参数为 null。
@param environment 将在创建状态工厂和对象状态时使用的环境（可能为 null）。
@param attrs 将与对象绑定在一起的属性（可能为 null）。
@return 一个非 null DirStateFactory.Result，它包含要绑定的对象和属性。如果没有任何状态工厂返回非 null 应答，则结果将包含该对象本身 (<tt>obj</tt>) 以及原始属性。
@exception NamingException 如果使用这些工厂时遇到命名异常。工厂只有在不希望试图使用其他工厂创建对象时才抛出异常。请参见 <tt>DirStateFactory.getStateToBind()</tt>。
@see DirStateFactory
@see DirStateFactory#getStateToBind
@see NamingManager#getStateToBind
@since 1.3

<!-- END DATA -->
