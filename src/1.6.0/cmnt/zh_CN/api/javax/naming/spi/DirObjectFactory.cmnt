<!-- BEGIN KEY -->
public interface javax.naming.spi.DirObjectFactory extends javax.naming.spi.ObjectFactory
<!-- END KEY -->
<!-- BEGIN DATA -->
此接口表示一个工厂，该工厂用来在给定某一对象以及有关该对象的属性的情况下创建该对象。
<p>
JNDI 框架允许通过<em>对象工厂</em> 动态加载对象实现。有关详细信息，请参见 <tt>ObjectFactory</tt>。
 <p>
<tt>DirObjectFactory</tt> 扩展了 <tt>ObjectFactory</tt>，它允许将 <tt>Attributes</tt> 实例提供给 <tt>getObjectInstance()</tt> 方法。<tt>DirObjectFactory</tt> 实现将由 <tt>DirContext</tt> 服务提供者使用。除了从目录中读取对象之外，该服务提供者还可能已经拥有对该对象工厂有用的属性，以检查该工厂是否应该处理对象。例如，LDAP 风格的服务提供者可能已经读取对象的&ldquo;对象类 (objectclass)&rdquo;。CORBA 对象工厂可能只对具有 &quot;objectclass=corbaObject&quot; 的 LDAP 项感兴趣。通过使用 LDAP 服务提供者所提供的属性，CORBA 对象工厂可以快速排除不需要关注的对象，而非 CORBA 对象工厂可以快速排除与 CORBA 有关的 LDAP 项。

@author Rosanna Lee
@author Scott Seligman
@version 1.12 05/11/17

@see NamingManager#getObjectInstance
@see DirectoryManager#getObjectInstance
@see ObjectFactory
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.naming.spi.DirObjectFactory.getObjectInstance(Object obj, Name name, Context nameCtx, java.util.Hashtable<?, ?> environment, Attributes attrs) throws java.lang.Exception
<!-- END KEY -->
<!-- BEGIN DATA -->
使用位置或引用信息以及指定的属性创建一个对象。  
 <p>
使用 <code>environment</code> 提供此对象的特殊需要。这种 environment 属性的一个示例是用户身份信息。 
<p>
<tt>DirectoryManager.getObjectInstance()</tt> 接连在对象工厂中进行加载。如果遇到 <tt>DirObjectFactory</tt>，它将调用 <tt>DirObjectFactory.getObjectInstance()</tt>；否则它将调用 <tt>ObjectFactory.getObjectInstance()</tt>。它将持续这样做，直到某一工厂产生非 null 应答。  
<p> 当对象工厂抛出异常时，该异常被传递给 <tt>DirectoryManager.getObjectInstance()</tt> 的调用者。停止搜索可能产生非 null 应答的其他工厂。对象工厂只有在可以确定它是唯一需要的工厂并且不应该再尝试其他对象工厂时才抛出异常。如果此对象工厂无法使用所提供的参数创建对象，则它应该返回 null。 
<p>因为 <tt>DirObjectFactory</tt> 扩展了 <tt>ObjectFactory</tt>，所以它实际上有两个 <tt>getObjectInstance()</tt> 方法，其中一个方法在属性参数上不同于另一个方法。给出一个实现 <tt>DirObjectFactory</tt> 的工厂，<tt>DirectoryManager.getObjectInstance()</tt> 将只使用接受属性参数的方法，而 <tt>NamingManager.getObjectInstance()</tt> 将只使用不接收属性参数的方法。
<p>
有关 URL 上下文工厂和对象工厂其他属性的描述，请参阅 <tt>ObjectFactory</tt>，它同样适用于 <tt>DirObjectFactory</tt>。
<p>
<tt>name</tt>、<tt>attrs</tt> 和 <tt>environment</tt> 参数都归调用者所有。该实现不会修改这些对象或保存对它们的引用，尽管它可能保存对这些对象的副本的引用。

@param obj 包含可在创建对象时使用的位置或引用信息的对象（可能为 null）。
@param name 此对象相对于 <code>nameCtx</code> 的名称，如果没有指定名称，则该参数为 null。
@param nameCtx 一个上下文，<code>name</code> 参数是相对于该上下文指定的，如果 <code>name</code> 相对于默认初始上下文，则该参数为 null。
@param environment 创建对象时使用的环境（可能为 null）。
@param attrs 包含 <tt>obj</tt> 的某些属性的属性（可能为 null）。<tt>attrs</tt> 不一定拥有 <tt>obj</tt> 的所有属性。如果对象工厂需要更多的属性，则需要使用 <tt>obj</tt> 或者 <tt>name</tt> 和 <tt>nameCtx</tt> 获取。该工厂不得修改 attrs。
@return 已创建的对象；如果无法创建对象，则返回 null。
@exception Exception 如果此对象工厂在试图创建对象时遇到异常，并且不再尝试其他对象工厂。

@see DirectoryManager#getObjectInstance
@see NamingManager#getURLContext

<!-- END DATA -->
