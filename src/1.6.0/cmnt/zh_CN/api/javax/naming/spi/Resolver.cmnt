<!-- BEGIN KEY -->
public interface javax.naming.spi.Resolver
<!-- END KEY -->
<!-- BEGIN DATA -->
此接口表示用于名称解析的&ldquo;中间上下文&rdquo;。
<p>
Resolver 接口包含一些方法，不支持 Context 的子类但可以作为解析操作的中间上下文的上下文要实现这些方法。
<p>
传递给任何方法的 <tt>Name</tt> 参数都归调用者所有。服务提供者将不修改对象，也不保持对它的引用。任何方法返回的 <tt>ResolveResult</tt> 对象都归调用者所有。调用者随后可修改它，而服务提供者则不能。

@author Rosanna Lee
@author Scott Seligman
@version 1.10 05/11/17
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.spi.ResolveResult javax.naming.spi.Resolver.resolveToClass(Name name, java.lang.Class<? extends javax.naming.Context> contextType) throws javax.naming.NamingException
<!-- END KEY -->
<!-- BEGIN DATA -->
部分解析某一名称。在给定 <code>Context</code> 子类型实例的第一个上下文处停止。

@param name 要解析的名称
@param contextType 要解析的对象的类型。该类型应该是 <code>Context</code> 的子类型。
@return	找到的对象，以及 <code>name</code> 的未解析的后缀。不能为 null。

@throws	javax.naming.NotContextException 如果没有找到适当类型的上下文
@throws	NamingException 如果遇到命名异常

@see #resolveToClass(String, Class)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.spi.ResolveResult javax.naming.spi.Resolver.resolveToClass(String name, java.lang.Class<? extends javax.naming.Context> contextType) throws javax.naming.NamingException
<!-- END KEY -->
<!-- BEGIN DATA -->
部分解析某一名称。有关详细信息，请参见 {@link #resolveToClass(Name, Class)}。

@param name 要解析的名称
@param contextType 要解析的对象的类型。该类型应该是 <code>Context</code> 的子类型。
@return	找到的对象，以及 <code>name</code> 的未解析的后缀。不能为 null。

@throws	javax.naming.NotContextException 如果没有找到适当类型的上下文
@throws	NamingException 如果遇到命名异常

<!-- END DATA -->
