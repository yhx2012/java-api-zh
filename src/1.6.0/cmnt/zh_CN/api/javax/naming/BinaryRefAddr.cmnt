<!-- BEGIN KEY -->
public class javax.naming.BinaryRefAddr extends javax.naming.RefAddr
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示通信终端地址的二进制形式。
<p>
BinaryRefAddr 由描述通信机制的类型和包含特定于该通信机制的地址描述的不透明缓冲区组成。地址类型的格式和解释以及不透明缓冲区的内容基于三方的协议，这里的三方为：使用该地址的客户端、使用该地址的可到达对象/服务器，以及创建该地址的管理员或程序。
<p>
二进制基准地址 (reference address) 的一个示例是 BER X.500 现行地址 (presentation address)。二进制基准地址的另一个示例是服务的对象句柄的序列化形式。
<p>
二进制基准地址是不可变的，因为其字段一经创建就不能被替换。不过，可以访问用来保存不透明缓冲区的字节数组。强烈建议程序不要更改此字节数组。对此字节数组的更改需要被显式同步。

@author Rosanna Lee
@author Scott Seligman
@version 1.8 05/11/17

@see RefAddr
@see StringRefAddr
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private byte[] javax.naming.BinaryRefAddr.buf
<!-- END KEY -->
<!-- BEGIN DATA -->
包含地址字节。此字段由构造方法初始化，并使用 getAddressBytes() 和 getAddressContents() 返回。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.BinaryRefAddr(String addrType, byte[] src)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用地址类型和用于内容的字节数组构造一个新的 BinaryRefAddr 实例。

@param addrType 描述地址类型的非 null 字符串。
@param src	字节数组形式的非 null 地址内容。src 的内容被复制到新 BinaryRefAddr 中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.BinaryRefAddr(String addrType, byte[] src, int offset, int count)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用地址类型和用于内容的字节数组区域构造一个新的 BinaryRefAddr 实例。

@param addrType 描述地址类型的非 null 字符串。
@param src	字节数组形式的非 null 地址内容。src 的内容被复制到新 BinaryRefAddr 中。
@param offset	src 中的获得字节起始索引。0 &lt;= offset &lt;= src.length。
@param count	从 src 中提取的字节数。0 &lt;= count &lt;= src.length-offset。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.naming.BinaryRefAddr.getContent()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 Object 形式检索此地址的内容。结果是一个字节数组。对此数组的更改将影响此 BinaryRefAddr 的内容。建议程序不要更改此数组的内容，如果需要更改此数组，则建议锁定缓冲区。

@return 包含此地址内容的非 null 缓冲区。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.naming.BinaryRefAddr.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定 obj 是否等于此地址。如果 obj 包含相同的地址类型并且两者内容逐字节相等，则其与此对象相等。
@param obj	要检查的可能为 null 的对象。
@return 如果对象是相等的，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.naming.BinaryRefAddr.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
使用地址类型和内容计算此地址的哈希码。如果两个 BinaryRefAddr 有相同的地址类型和相同的内容，则它们的哈希码相同。不同的 BinaryRefAddr 也可能具有相同的哈希码。

@return 此地址的 int 形式的哈希码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.naming.BinaryRefAddr.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
生成此地址的字符串表示形式。该字符串由地址的类型和带标签的内容组成。显示内容的前 32 个字节（以十六进制形式）。如果内容中的字节多于 32 个字节，则用 &quot;...&quot; 指示超出的字节。此字符串用于调试目的，不以编程方式对其进行解释。
@return  此地址的非 null 字符串表示形式。

<!-- END DATA -->
