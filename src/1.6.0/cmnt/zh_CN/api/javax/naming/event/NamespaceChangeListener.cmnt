<!-- BEGIN KEY -->
public interface javax.naming.event.NamespaceChangeListener extends javax.naming.event.NamingListener
<!-- END KEY -->
<!-- BEGIN DATA -->
指定对名称空间更改感兴趣的侦听器必须实现的方法。明确地说，是对 <tt>OBJECT_ADDED</TT>、<TT>OBJECT_RENAMED</TT> 或 <TT>OBJECT_REMOVED</TT> 事件类型的 <tt>NamingEvent</tt> 感兴趣的侦听器。
<p>
这种侦听器必须：
<ol>
<li>实现此接口及其方法。
<li>实现 <tt>NamingListener.namingExceptionThrown()</tt>，以便在尝试收集关于事件的信息期间抛出异常时得到通知。
<li>使用源的 <tt>addNamingListener()</tt> 方法向该源注册。
</ol>
希望获得 <tt>OBJECT_CHANGED</tt> 事件类型的通知的侦听器还应该实现 <tt>ObjectChangeListener</tt> 接口。
 
@author Rosanna Lee
@author Scott Seligman
@version 1.8 05/11/17

@see NamingEvent
@see ObjectChangeListener
@see EventContext
@see EventDirContext
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.event.NamespaceChangeListener.objectAdded(NamingEvent evt)
<!-- END KEY -->
<!-- BEGIN DATA -->
在已经添加了对象时调用此方法。
<p>
可以使用 <tt>evt.getNewBinding()</tt> 获取新添加对象的绑定。
@param evt 非 null 事件。
@see NamingEvent#OBJECT_ADDED

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.event.NamespaceChangeListener.objectRemoved(NamingEvent evt)
<!-- END KEY -->
<!-- BEGIN DATA -->
在已经移除了对象时调用此方法。
<p>
可以使用 <tt>evt.getOldBinding()</tt> 获取新移除对象的绑定。
@param evt 非 null 事件。
@see NamingEvent#OBJECT_REMOVED

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.event.NamespaceChangeListener.objectRenamed(NamingEvent evt)
<!-- END KEY -->
<!-- BEGIN DATA -->
在已经重命名了对象时调用此方法。
<p>
可以使用 <tt>evt.getNewBinding()</tt> 获取重命名对象的绑定。可以使用 <tt>evt.getOldBinding()</tt> 获取其旧绑定（重命名前的绑定）。如果新/旧绑定在已注册侦听器关注的范围之外，则这些事件之一可能为 null。
@param evt 非 null 事件。
@see NamingEvent#OBJECT_RENAMED

<!-- END DATA -->
