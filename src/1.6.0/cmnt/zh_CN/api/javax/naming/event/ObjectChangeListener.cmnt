<!-- BEGIN KEY -->
public interface javax.naming.event.ObjectChangeListener extends javax.naming.event.NamingListener
<!-- END KEY -->
<!-- BEGIN DATA -->
指定事件类型为 <tt>OBJECT_CHANGED</tt> 的 <tt>NamingEvent</tt> 侦听器必须实现的方法。
<p>
更改对象（的内容）时将触发 <tt>OBJECT_CHANGED</tt> 事件类型。这可能意味着对象的属性已经被修改、添加或移除，和/或对象本身已经被替换。通过检查 <tt>NamingEvent</tt> 的旧绑定和新绑定可以确定对象的更改方式。
<p>
对 <tt>OBJECT_CHANGED</tt> 事件类型感兴趣的侦听器必须：
<ol>

<li>实现此接口及其方法 (<tt>objectChanged()</tt>)。
<li>实现 <tt>NamingListener.namingExceptionThrown()</tt>，以便在尝试收集关于事件的信息期间抛出异常时得到通知。
<li>使用源的 <tt>addNamingListener()</tt> 方法向该源注册。
</ol>
希望获得名称空间更改事件的通知的侦听器还应该实现 <tt>NamespaceChangeListener</tt> 接口。
 
@author Rosanna Lee
@author Scott Seligman
@version 1.8 05/11/17
 
@see NamingEvent
@see NamespaceChangeListener
@see EventContext
@see EventDirContext
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.event.ObjectChangeListener.objectChanged(NamingEvent evt)
<!-- END KEY -->
<!-- BEGIN DATA -->
在已经更改了对象时调用此方法。
<p>
可以使用 <tt>evt.getNewBinding()</tt> 获取更改对象的绑定。可以使用 <tt>evt.getOldBinding()</tt> 获取其旧绑定（更改前的绑定）。
@param evt 非 null 命名事件。
@see NamingEvent#OBJECT_CHANGED

<!-- END DATA -->
