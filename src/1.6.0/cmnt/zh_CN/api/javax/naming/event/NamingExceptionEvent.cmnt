<!-- BEGIN KEY -->
public class javax.naming.event.NamingExceptionEvent extends java.util.EventObject
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示用来收集通知 <tt>NamingEvent</tt> 侦听器的信息的过程/进程抛出 <tt>NamingException</tt> 时触发的事件。例如，当侦听器使用的服务器在调用 <tt>addNamingListener()</tt> 后异常中止时，可能出现该情况。
 
@author Rosanna Lee
@author Scott Seligman
@version 1.8 05/11/17

@see NamingListener#namingExceptionThrown
@see EventContext
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.naming.NamingException javax.naming.event.NamingExceptionEvent.exception
<!-- END KEY -->
<!-- BEGIN DATA -->
包含抛出过的异常
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.event.NamingExceptionEvent(EventContext source, NamingException exc)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用在抛出过 <tt>NamingException</tt> 的上下文和抛出的异常构造一个 <tt>NamingExceptionEvent</tt> 的实例。

@param source 抛出过异常的非 null 上下文。
@param exc    抛出的非 null <tt>NamingException</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.NamingException javax.naming.event.NamingExceptionEvent.getException()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索抛出的异常。
@return 抛出的异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.event.EventContext javax.naming.event.NamingExceptionEvent.getEventContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索触发此事件的 <tt>EventContext</tt>。此操作与 <tt>EventObject.getSource()</tt> 返回相同的对象。
@return 触发此事件的非 null <tt>EventContext</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.event.NamingExceptionEvent.dispatch(NamingListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用此事件对侦听器调用 <tt>namingExceptionThrown()</tt> 方法。
@param listener 非 null 命名侦听器，要对该侦听器调用方法。

<!-- END DATA -->
