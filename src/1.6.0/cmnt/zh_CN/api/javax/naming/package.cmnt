<!-- BEGIN KEY -->
javax.naming
<!-- END KEY -->
<!-- BEGIN DATA -->

为访问命名服务提供类和接口。

<p>
此包定义 Java Naming and Directory Interface<font size=-2><sup>TM</sup></font> (JNDI) 的命名操作。&#xA0; JNDI 向使用 Java 编程语言编写的应用程序提供命名和目录功能。它被设计成与任何特定的命名或目录服务实现无关。因此可以使用共同的方式对多种服务（新的、新出现的及已经部署的服务）进行访问。

<h4>上下文</h4>
<p>
此包定义<em>上下文</em> 的概念，由 <tt>Context</tt> 结构表示。上下文由一组名称到对象的<em>绑定</em> 组成。<tt>Context</tt> 是用来查找、绑定、取消绑定和重新命名对象，以及创建和销毁子上下文的核心接口。
<p>
<tt>lookup()</tt> 是最常使用的操作。当向 <tt>lookup()</tt> 提供想要查询的对象的名称时，它将返回绑定到该名称的对象。例如，以下代码段要查找一台打印机并将文档发送给该打印机对象打印：

<blockquote>
<pre>
Printer printer = (Printer)ctx.lookup(&quot;treekiller&quot;);
printer.print(report);
</pre>
</blockquote>

<h4>名称</h4>
<p>
<tt>Context</tt> 接口中的每个命名方法都有两个重载形式：一个接受 <tt>Name</tt> 参数，另一个接受字符串名称。<tt>Name</tt> 是一个表示一般名称的接口，一般名称是零个或多个组件的有序序列。对于这些方法，可以使用 <tt>Name</tt> 表示<em>复合名称</em> (<tt>CompositeName</tt>)，从而可以使用跨多个名称空间的名称来命名一个对象。
<p>
接受 <tt>Name</tt> 的重载方法对那些需要对名称进行以下操作的应用程序很有用：组合名称、比较组件等等。接受字符串名称的重载方法对那些简单的应用程序可能更加有用，比如那些只是读取某一名称以及查找相应对象的应用程序。
<p>

<h4>绑定</h4>

<tt>Binding</tt> 类表示一个名称到对象的绑定。它是一个包含所绑定对象的名称、对象的类的名称和对象本身的元组 (tuple)。
<p>
<tt>Binding</tt> 类实际上是 <tt>NameClassPair</tt> 的子类，由对象的名称和对象的类名称组成。在只想要关于对象的类的信息以及不想为获得对象而额外开销时，<tt>NameClassPair</tt> 很有用。

<h4>引用</h4>
对象以不同方式存储在命名和目录服务中。如果对象存储支持存储 Java 对象，则它可能支持以序列化形式存储对象。不过，一些命名和目录服务不支持存储 Java 对象。此外，对于目录中某些对象而言，Java 程序只是访问它们的一组应用程序。在这种情况下，序列化 Java 对象可能不是最合适的表示形式。JNDI 定义了一个由 <tt>Reference</tt> 类表示的<em>引用</em>，它包含有关如何构造对象副本的信息。JNDI 将尝试把从目录中找到的引用转换成它们表示的 Java 对象，从而给 JNDI 客户端制造一种目录中存储的是 Java 对象的假象。 

<h4>初始上下文</h4>

在 JNDI 中，所有命名和目录操作都是相对于上下文执行的。没有绝对的根。所以 JNDI 定义了一个<em>初始上下文</em> <tt>InitialContext</tt>，为命名和目录操作提供起始点。一旦有了初始上下文，就可以使用它来查找其他上下文和对象。

<h4>异常</h4>

JNDI 为可能在执行命名和目录操作期间抛出的异常定义了一个类层次。此类层次的根是 <tt>NamingException</tt>。需要处理特定异常的程序可以捕获相应的异常子类。否则，这些程序应该捕获 <tt>NamingException</tt>。

<h2>包规范</h2>

JNDI API 规范及相关文档可在
<a href="../../../technotes/guides/jndi/index.html">JNDI documentation</a> 中找到。

@since 1.3

<!-- END DATA -->
