<!-- BEGIN KEY -->
public abstract class javax.naming.ldap.StartTlsResponse extends java.lang.Object implements javax.naming.ldap.ExtendedResponse
<!-- END KEY -->
<!-- BEGIN DATA -->
此类实现在 <a href="http://www.ietf.org/rfc/rfc2830.txt">Lightweight Directory Access Protocol (v3): Extension for Transport Layer Security</a> 中定义的 StartTLS 的 LDAPv3 扩展响应。 

StartTLS 的对象标识符为 1.3.6.1.4.1.1466.20037，没有定义任何扩展响应值。

<p>
使用 Start TLS 扩展请求和响应在与 JNDI 上下文（对该上下文调用 <tt>extendedOperation()</tt>）关联的现有 LDAP 连接上建立 TLS 连接。通常，JNDI 程序使用以下 Start TLS 扩展请求和响应类。
 <blockquote><pre>
 import javax.naming.ldap.*;
 
 // Open an LDAP association
 LdapContext ctx = new InitialLdapContext();

 // Perform a StartTLS extended operation
 StartTlsResponse tls =
     (StartTlsResponse) ctx.extendedOperation(new StartTlsRequest());

 // Open a TLS connection (over the existing LDAP association) and get details
 // of the negotiated TLS session: cipher suite, peer certificate, ...
 SSLSession session = tls.negotiate();

 // ... use ctx to perform protected LDAP operations

 // Close the TLS connection (revert back to the underlying LDAP association)
 tls.close();

 // ... use ctx to perform unprotected LDAP operations

 // Close the LDAP association
 ctx.close;
 </pre></blockquote>

@since 1.4
@see StartTlsRequest
@author Vincent Ryan

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.naming.ldap.StartTlsResponse.OID
<!-- END KEY -->
<!-- BEGIN DATA -->
StartTLS 扩展响应的分配对象标识符为 1.3.6.1.4.1.1466.20037。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.naming.ldap.StartTlsResponse()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造 StartTLS 扩展响应。具体子类必须具有不带参数的公共构造方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.naming.ldap.StartTlsResponse.getID()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索 StartTLS 响应的对象标识符字符串。

@return 对象标识符字符串 &quot;1.3.6.1.4.1.1466.20037&quot;。

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] javax.naming.ldap.StartTlsResponse.getEncodedValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索 StartTLS 响应的 ASN.1 BER 编码值。因为响应没有定义任何值，所以始终返回 null。

@return null 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.naming.ldap.StartTlsResponse.setEnabledCipherSuites(java.lang.String[] suites)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写在 TLS 连接上启用的密码套件的默认列表。密码套件必须已经作为受支持的项由 <tt>SSLSocketFactory.getSupportedCipherSuites()</tt> 列出。即使已经启用套件，它仍然有可能不可用，因为有可能同位体不支持它，或者必需的证书（或私钥）不可用。

@param suites 要启用的所有密码套件的非 null 名称列表。
@see #negotiate

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.naming.ldap.StartTlsResponse.setHostnameVerifier(HostnameVerifier verifier)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置在已完成 TLS 握手且默认主机名校验失败后供 <tt>negotiate()</tt> 使用的主机名校验器。<tt>setHostnameVerifier()</tt> 必须在调用 <tt>negotiate()</tt> 前调用才能生效。如果在 <tt>negotiate()</tt> 之后调用，则此方法不执行任何操作。 

@param verifier 非 null 主机名校验器回调。
@see #negotiate

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.net.ssl.SSLSession javax.naming.ldap.StartTlsResponse.negotiate() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认的 SSL 套接字工厂协商 TLS 会话。
 <p>
此方法等效于 <tt>negotiate(null)</tt>。

@return 协商的 SSL 会话
@throws IOException 如果在建立 TLS 会话时遇到 IO 错误。
@see #setEnabledCipherSuites
@see #setHostnameVerifier

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.net.ssl.SSLSession javax.naming.ldap.StartTlsResponse.negotiate(SSLSocketFactory factory) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 SSL 套接字工厂协商 TLS 会话。
 <p>
使用提供的 SSL 套接字工厂创建 SSL 套接字，并将其附加到现有连接上。执行 TLS 握手并返回协商的会话信息。
 <p>
如果密码套件是通过 <tt>setEnabledCipherSuites</tt> 设置的，则需要在 TLS 握手开始之前启用这些套件。
 <p>
主机名校验在 TLS 握手完成之后执行。默认的主机名校验将服务器主机名与存在于服务器证书中的主机名信息进行匹配。如果此校验失败且没有通过 <tt>setHostnameVerifier</tt> 设置任何回调，则协商失败。如果此校验失败但通过 <tt>setHostnameVerifier</tt> 设置了回调，则使用回调确定协商是否成功。
 <p>
如果发生错误，则关闭 SSL 套接字并抛出 IOException。底层连接保持原样。

@param factory 要使用的 SSL 套接字工厂（可能为 null）。如果为 null，则使用默认的 SSL 套接字工厂。
@return 协商的 SSL 会话
@throws IOException 如果在建立 TLS 会话时遇到 IO 错误。
@see #setEnabledCipherSuites
@see #setHostnameVerifier

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.naming.ldap.StartTlsResponse.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
妥善地关闭 TLS 连接并转换回底层连接。

@throws IOException 如果在关闭 TLS 连接时遇到 IO 错误

<!-- END DATA -->
