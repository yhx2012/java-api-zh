<!-- BEGIN KEY -->
public class javax.naming.ldap.StartTlsRequest extends java.lang.Object implements javax.naming.ldap.ExtendedRequest
<!-- END KEY -->
<!-- BEGIN DATA -->
此类实现在 <a href="http://www.ietf.org/rfc/rfc2830.txt">Lightweight Directory Access Protocol (v3): Extension for Transport Layer Security</a> 中定义的 StartTLS 的 LDAPv3 扩展请求。

StartTLS 的对象标识符为 1.3.6.1.4.1.1466.20037，没有定义任何扩展请求值。
<p>
使用 <tt>StartTlsRequest</tt>/<tt>StartTlsResponse</tt> 在与 JNDI 上下文（对该上下文调用 <tt>extendedOperation()</tt>）关联的现有 LDAP 连接上建立 TLS 连接。通常，JNDI 程序使用以下这些类。
 <blockquote><pre>
 import javax.naming.ldap.*;

 // Open an LDAP association
 LdapContext ctx = new InitialLdapContext();

 // Perform a StartTLS extended operation
 StartTlsResponse tls =
     (StartTlsResponse) ctx.extendedOperation(new StartTlsRequest());

 // Open a TLS connection (over the existing LDAP association) and get details
 // of the negotiated TLS session: cipher suite, peer certificate, etc.
 SSLSession session = tls.negotiate();

 // ... use ctx to perform protected LDAP operations

 // Close the TLS connection (revert back to the underlying LDAP association)
 tls.close();

 // ... use ctx to perform unprotected LDAP operations

 // Close the LDAP association
 ctx.close;
 </pre></blockquote>

@since 1.4
@see StartTlsResponse
@author Vincent Ryan

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.naming.ldap.StartTlsRequest.OID
<!-- END KEY -->
<!-- BEGIN DATA -->
StartTLS 扩展请求的分配对象标识符为 1.3.6.1.4.1.1466.20037。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.ldap.StartTlsRequest()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造 StartTLS 扩展请求。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.naming.ldap.StartTlsRequest.getID()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索 StartTLS 请求的对象标识符字符串。

@return 对象标识符字符串 &quot;1.3.6.1.4.1.1466.20037&quot;。

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] javax.naming.ldap.StartTlsRequest.getEncodedValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索 StartTLS 请求的 ASN.1 BER 编码值。因为该请求没有定义任何值，所以始终返回 null。

@return null 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.ldap.ExtendedResponse javax.naming.ldap.StartTlsRequest.createExtendedResponse(String id, byte[] berValue, int offset, int length) throws javax.naming.NamingException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建与 LDAP StartTLS 扩展请求相对应的扩展响应对象。
 <p>
结果必须为 StartTlsResponse 的具体子类，并且必须具有不带参数的公共构造方法。  
 <p>
此方法通过查找具有以下名称的配置文件来查找实现类：
 <blockquote><tt>META-INF/services/javax.naming.ldap.StartTlsResponse</tt></blockquote>
配置文件及其相应的实现类对于调用线程的上下文类加载器而言必须是可访问的。
 <p>
每个配置文件应该包含一个完全限定类名称列表，每行一个类名。忽略各名称周围的空格字符和制表符以及空行。注释字符为 <tt>'#'</tt> (<tt>0x23</tt>)；将忽略每行第一个注释字符后面的所有字符。文件必须使用 UTF-8 编码。
 <p>
此方法将返回它能够从类名称列表（通过配置文件收集）成功加载和实例化的第一个实现类的实例。此方法使用调用线程的上下文类加载器查找配置文件和加载实现类。
 <p>
如果使用此方式找不到任何类，则此方法将使用特定于实现的方式来查找实现。如果一个也找不到，则抛出 NamingException。

@param id         扩展响应的对象标识符。其值必须为 &quot;1.3.6.1.4.1.1466.20037&quot; 或 null。两个值是等价的。
@param berValue   扩展响应的 ASN.1 BER 编码值（可能为 null）。此为原始 BER 字节，包括响应值的标记和长度。它不包括响应 OID。它的值将被忽略，因为不要求 Start TLS 响应包含任何响应值。
@param offset   berValue 中要使用的字节的开始位置。它的值将被忽略，因为不要求 Start TLS 响应包含任何响应值。
@param length   berValue 中要使用的字节数。它的值将被忽略，因为不要求 Start TLS 响应包含任何响应值。
@return           StartTLS 扩展响应对象。
@exception NamingException 如果在创建 StartTLS 扩展响应对象时遇到命名异常。

<!-- END DATA -->
