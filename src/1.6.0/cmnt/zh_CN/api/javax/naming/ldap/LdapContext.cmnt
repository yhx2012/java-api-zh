<!-- BEGIN KEY -->
public interface javax.naming.ldap.LdapContext extends javax.naming.directory.DirContext
<!-- END KEY -->
<!-- BEGIN DATA -->
此接口表示一个上下文，在该上下文中可以利用 LDAPv3 样式的控件执行操作，并且可以执行 LDAPv3 样式的扩展操作。
 
对于不需要这些控件或扩展操作的应用程序，则应该使用更一般的 <tt>javax.naming.directory.DirContext</tt> 来代替。
 
<h3>关于控件的使用细节</h3>
 
此接口提供对 LDAP v3 控件的支持。在较高级别，这一支持允许用户程序为用户程序调用 <tt>Context</tt>/<tt>DirContext</tt> 方法期间执行的 LDAP 操作设置请求控件，并读取从 LDAP 操作得到的响应控件。在实现级别，有些细节用户程序和服务提供者的开发人员都需要理解才能正确地使用请求控件和响应控件。
 
<h3>请求控件</h3>
 <p>
请求控件有两种类型：
 <ul>
<li>影响连接的创建方式的请求控件
<li>影响上下文方法的请求控件
 </ul>
 
在需要利用 LDAP 服务器建立或重新建立连接时使用前者。在将所有其他 LDAP 操作发送到 LDAP 服务器时使用后者。两种类型的请求控件之间必须存在差别的原因是， JNDI 是一种不直接处理连接的高级 API。服务提供者负责进行所有必需的连接管理。因此，多个上下文实例可能共享单个连接，并且服务提供者可以自由地使用它自己的算法保存连接和网络使用。对上下文实例调用方法时，服务提供者除了执行相应的 LDAP 操作，可能还需要进行一些连接管理。对于连接管理，它使用<em>连接请求控件</em>，而对于常规 LDAP 操作，它使用<em>上下文请求控件</em>。
<p>如果没有显式限定，术语&ldquo;请求控件&rdquo;就是指上下文请求控件。
 
<h4>上下文请求控件</h4>
上下文实例获取其请求控件有两种方式：
 <ol>
 <tt>
 <li>ldapContext.newInstance(<strong>reqCtls</strong>)
 <li>ldapContext.setRequestControls(<strong>reqCtls</strong>)</tt>
 </ol>
其中 <tt>ldapContext</tt> 是 <tt>LdapContext</tt> 的实例。为 <tt>reqCtls</tt> 指定 <tt>null</tt> 或空数组意味着不存在请求控件。<tt>newInstance()</tt> 使用 <tt>reqCtls</tt> 创建上下文的新实例，而 <tt>setRequestControls()</tt> 将现有上下文实例的请求控件更新为 <tt>reqCtls</tt>。
 <p>
与环境属性不同，从某个上下文实例派生的上下文实例<em>不能继承</em> 它的请求控件。派生的上下文实例的上下文请求控件为 <tt>null</tt>。必须使用 <tt>setRequestControls()</tt> 显式设置派生的上下文实例的请求控件。
 <p>
上下文实例的请求控件需要使用方法 <tt>getRequestControls()</tt> 进行检索。
 
<h4>连接请求控件</h4>
可以使用三种方式设置连接请求控件：
 <ol>
 <tt>
 <li>
 new InitialLdapContext(env, <strong>connCtls</strong>)
 <li>refException.getReferralContext(env, <strong>connCtls</strong>)
 <li>ldapContext.reconnect(<strong>connCtls</strong>);</tt>
 </ol>
其中 <tt>refException</tt> 是 <tt>LdapReferralException</tt> 的实例，<tt>ldapContext</tt> 是 <tt>LdapContext</tt> 的实例。为 <tt>connCtls</tt> 指定 <tt>null</tt> 或空数组意味着不存在连接请求控件。
 <p>
与环境属性一样，从上下文派生的上下文<em>可以继承</em> 它的连接请求控件。通常，使用 <tt>InitialLdapContext</tt> 构造方法或 <tt>LdapReferralContext.getReferralContext()</tt> 来初始化连接请求控件。这些连接请求控件可以由共享同一连接的上下文继承，即上下文是从初始或引用上下文派生的。  
 <p>
使用 <tt>reconnect()</tt> 更改上下文的连接请求控件。调用 <tt>ldapContext.reconnect()</tt> 仅影响 <tt>ldapContext</tt> 使用的连接和从 <tt>ldapContext</tt> 派生的所有新上下文实例。以前与 <tt>ldapContext</tt> 共享连接的上下文保持不变。即上下文的连接请求控件必须显式更改，更改另一个上下文的连接请求控件对它没有影响。
 <p>
上下文实例的连接请求控件需要使用方法 <tt>getConnectControls()</tt> 进行检索。
 
<h4>服务提供者需求</h4>
 
服务提供者用以下方式支持连接和上下文请求控件。上下文请求控件必须在每个上下文实例的基础上相关联，而连接请求控件必须在每个连接实例的基础上相关联。服务提供者必须在环境属性 &quot;java.naming.ldap.control.connect&quot; 中查找连接请求控件，并将此环境属性传递到它创建的上下文实例中。
 
<h3>响应控件</h3>
 
方法 <tt>LdapContext.getResponseControls()</tt> 用于检索由于调用 <tt>Context</tt>/<tt>DirContext</tt> 操作而执行的 LDAP 操作生成的响应控件。结果为基础 LDAP 操作生成的所有响应控件，包括所有隐式重接。要仅获取重接响应控件，请使用 <tt>reconnect()</tt>，然后使用 <tt>getResponseControls()</tt>。
 
<h3>参数</h3>

作为参数传递给任何方法的 <tt>Control[]</tt> 数组都为调用者所有。服务提供者将不修改数组，也不保持对它的引用，但它可能保持对数组中个别 <tt>Control</tt> 对象的引用。任何方法返回的 <tt>Control[]</tt> 数组都是不可变的，并且不能被调用者或服务提供者进行后续修改。
 
@author Rosanna Lee
@author Scott Seligman
@author Vincent Ryan
@version 1.11 05/11/17

@see InitialLdapContext
@see LdapReferralException#getReferralContext(java.util.Hashtable,javax.naming.ldap.Control[])
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.naming.ldap.LdapContext.CONTROL_FACTORIES
<!-- END KEY -->
<!-- BEGIN DATA -->
该常量保存用来指定要使用的控件工厂列表的环境属性名称。该属性的值应该是工厂类以冒号分隔的完全限定类名称列表，这些类将在给定另一控件的情况下创建一个控件。有关详细信息，请参见 <tt>ControlFactory.getControlInstance()</tt>。此属性可以在环境、applet 参数、系统属性或者一个或多个资源文件中指定。
<p>
此常量的值是 &quot;java.naming.factory.control&quot;。
<p>

@see ControlFactory
@see javax.naming.Context#addToEnvironment
@see javax.naming.Context#removeFromEnvironment

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.ldap.ExtendedResponse javax.naming.ldap.LdapContext.extendedOperation(ExtendedRequest request) throws javax.naming.NamingException
<!-- END KEY -->
<!-- BEGIN DATA -->
执行扩展操作。

此方法用于支持 LDAPv3 扩展操作。
@param request 要执行的非 null 请求。
@return 操作的响应（可能为 null）。null 表示操作没有生成任何响应。
@throws NamingException 如果在执行扩展操作时出错。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.ldap.LdapContext javax.naming.ldap.LdapContext.newInstance(javax.naming.ldap.Control[] requestControls) throws javax.naming.NamingException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建此上下文的新实例，使用请求控件进行初始化。

此方法是为了进行多线程访问而创建此上下文新实例的便捷方法。例如，如果多个线程要使用不同的上下文请求控件，则每个线程可以使用此方法获取它自己的此上下文的副本，并设置/获取上下文请求控件，无需与其他线程同步。
<p>
新上下文与此上下文具有相同的环境属性和连接请求控件。有关详细信息请参阅类描述。实现可能还允许此上下文和新上下文共享同一个网络连接或其他资源，如果这样做不妨碍这两种上下文各自的独立性。

@param requestControls 要用于新上下文的请求控件（可能为 null）。如果为 null，则不使用任何请求控件初始化上下文。

@return 非 null <tt>LdapContext</tt> 实例。
@exception NamingException 如果在创建新实例时出错。
@see InitialLdapContext

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.ldap.LdapContext.reconnect(javax.naming.ldap.Control[] connCtls) throws javax.naming.NamingException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用提供的控件和此上下文的环境重新连接到 LDAP 服务器。
<p>
此方法是一种显式启动 LDAP&ldquo;绑定&rdquo;操作的方式。例如，可以使用此方法为 LDAP&ldquo;绑定&rdquo;操作设置请求控件，或者显式连接到服务器以获取由 LDAP&ldquo;绑定&rdquo;操作返回的响应控件。
<p>
此方法将此上下文的 <tt>connCtls</tt> 设置为其新连接请求控件。此上下文的上下文请求控件将不受影响。调用此方法后，所有后续隐式重接将使用 <tt>connCtls</tt> 完成。<tt>connCtls</tt> 还可用作从此上下文派生的新上下文实例的连接请求控件。这些连接请求控件将不受 <tt>setRequestControls()</tt> 的影响。
<p>
服务提供者的实现方应该读取类描述中的&ldquo;服务提供者&rdquo;一节，以获取实现详细信息。
@param connCtls 要使用的控件（可能为 null）。如果为 null，则不使用任何控件。
@exception NamingException 如果重接时出错。
@see #getConnectControls
@see #newInstance

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.ldap.Control[] javax.naming.ldap.LdapContext.getConnectControls() throws javax.naming.NamingException
<!-- END KEY -->
<!-- BEGIN DATA -->
检索对此上下文有效的连接请求控件。JNDI 实现所拥有的控件是不可变的。调用者既不能修改数组也不能修改控件。

@return 控件数组（可能为 null）。null 表示没有为此上下文设置任何连接控件。
@exception NamingException 如果在获取请求控件时出错。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.ldap.LdapContext.setRequestControls(javax.naming.ldap.Control[] requestControls) throws javax.naming.NamingException
<!-- END KEY -->
<!-- BEGIN DATA -->
为在此上下文上后续调用的方法设置请求控件。JNDI 实现所拥有的请求控件是不可变的。调用者既不能修改数组也不能修改控件。
 <p>
此操作移除所有以前的请求控件，并添加 <tt>requestControls</tt> 供在此上下文上调用的后续方法使用。此方法不影响此上下文的连接请求控件。
<p>
注意，在下一次调用 <tt>setRequestControls()</tt> 之前 <tt>requestControls</tt> 一直有效。如果不想让这些控件继续影响上下文方法，则需要使用 <tt>null</tt> 或空数组作为参数显式调用 <tt>setRequestControls()</tt> 来清除它们。要检查对此上下文有效的请求控件，请使用 <tt>getRequestControls()</tt>。
@param requestControls 要使用的控件（可能为 null）。如果为 null，则不使用任何控件。
@exception NamingException 如果在设置请求控件时出错。
@see #getRequestControls

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.ldap.Control[] javax.naming.ldap.LdapContext.getRequestControls() throws javax.naming.NamingException
<!-- END KEY -->
<!-- BEGIN DATA -->
检索对此上下文有效的请求控件。JNDI 实现所拥有的请求控件是不可变的。调用者既不能修改数组也不能修改控件。

@return 控件数组（可能为 null）。null 表示没有为此上下文设置任何请求控件。
@exception NamingException 如果在获取请求控件时出错。
@see #setRequestControls

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.ldap.Control[] javax.naming.ldap.LdapContext.getResponseControls() throws javax.naming.NamingException
<!-- END KEY -->
<!-- BEGIN DATA -->
检索对此上下文调用的最后一个方法所生成的响应控件。JNDI 实现所拥有的响应控件是不可变的。调用者既不能修改数组也不能修改控件。
<p>
这些响应控件可能由成功或失败的操作生成。
<p>
调用可能返回响应控件的上下文方法时，上一个方法调用生成的响应控件将被清除。<tt>getResponseControls()</tt>（按照从 LDAP 服务器收到响应控件的顺序） 返回上下文方法使用的 LDAP 操作生成的所有响应控件。调用 <tt>getResponseControls()</tt> 不清除响应控件。在调用可能返回控件的下一个上下文方法之前，可以多次调用它（并返回相同的控件）。
<p>
@return 控件数组（可能为 null）。如果为 null，则对此上下文调用的上一个方法不会生成任何控件。
@exception NamingException 如果在获取响应控件时出错。

<!-- END DATA -->
