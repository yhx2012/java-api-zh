<!-- BEGIN KEY -->
public class javax.naming.directory.BasicAttributes extends java.lang.Object implements javax.naming.directory.Attributes
<!-- END KEY -->
<!-- BEGIN DATA -->
此类提供 Attributes 接口的基本实现。
<p>
BasicAttributes 或者区分大小写或者不区分大小写（忽略大小写）。此属性在调用 BasicAttributes 构造方法时确定。在不区分大小写的 BasicAttributes 中，搜索属性或添加属性时将忽略其属性标识符的大小写。在区分大小写的 BasicAttributes 中，大小写有意义。
<p>
BasicAttributes 类需要创建 Attribute 时使用 BasicAttribute。对 BasicAttribute 没有其他依赖性。
<p>
注意，更新 BasicAttributes（如添加或移除属性）对目录中的相应表示形式没有影响。只有使用 DirContext 接口中的操作才能实现对目录的更新。
<p>
BasicAttributes 实例与并发多线程访问不同步。试图访问和修改单个 BasicAttributes 实例的多个线程应该锁定对象。

@author Rosanna Lee
@author Scott Seligman
@version 1.13 05/11/17

@see DirContext#getAttributes
@see DirContext#modifyAttributes
@see DirContext#bind
@see DirContext#rebind
@see DirContext#createSubcontext
@see DirContext#search
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean javax.naming.directory.BasicAttributes.ignoreCase
<!-- END KEY -->
<!-- BEGIN DATA -->
指示是否忽略属性 id 的大小写。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.directory.BasicAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的 Attributes 实例。在后续检索或添加属性时属性标识符的字符大小写有意义。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.directory.BasicAttributes(boolean ignoreCase)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的 Attributes 实例。如果 <code>ignoreCase</code> 为 true，则忽略属性标识符的字符大小写；否则大小写有意义。
@param ignoreCase 为 true 表示在检索或添加属性时此属性集将忽略其属性标识符的大小写；为 false 表示要考虑大小写。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.directory.BasicAttributes(String attrID, Object val)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带有一个属性的新 Attributes 实例。将 attrID 和 val 指定的属性添加到新创建的属性中。在后续检索或添加属性时属性标识符的字符大小写有意义。
@param attrID	要添加的非 null 属性 id。
@param val 要添加的属性的值。如果为 null，则将 null 值添加到属性中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.directory.BasicAttributes(String attrID, Object val, boolean ignoreCase)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带有一个属性的新 Attributes 实例。将 attrID 和 val 指定的属性添加到新创建的属性中。如果 <code>ignoreCase</code> 为 true，则忽略属性标识符的字符大小写；否则大小写有意义。
@param attrID	要添加的属性的非 null id。如果此属性集忽略其属性 id 的字符大小写，则忽略 attrID 的大小写。
@param val 要添加的属性的值。如果为 null，则将 null 值添加到属性中。
@param ignoreCase 为 true 表示在检索或添加属性时此属性集将忽略其属性标识符的大小写；为 false 表示要考虑大小写。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.naming.directory.BasicAttributes.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
生成此属性集的字符串表示形式。字符串由每个属性标识符和每个属性的内容组成。此字符串的内容用于调试目的，不以编程方式对其进行解释。
 
@return 列出此属性集的内容的非 null 字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.naming.directory.BasicAttributes.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此 <tt>BasicAttributes</tt> 是否等于另一个 <tt>Attributes</tt>。如果两个 <tt>Attributes</tt> 均为 <tt>Attributes</tt> 的实例、对待属性 ID 的大小写的方式相同并且包含相同的属性，则它们是相等的。此 <tt>BasicAttributes</tt> 中的每个 <tt>Attribute</tt> 的相等性都是使用 <tt>Object.equals()</tt> 检查的（<tt>Attribute</tt> 的实现可能已经重写了该方法）。如果子类重写 <tt>equals()</tt>，则其也应该重写 <tt>hashCode()</tt>，这样两个相等的 <tt>Attributes</tt> 实例才能具有相同的哈希码。
@param obj 要与之比较的可能为 null 的对象。

@return 如果 obj 等于此 BasicAttributes，则返回 true。
@see #hashCode

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.naming.directory.BasicAttributes.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
计算此 BasicAttributes 的哈希码。
<p>
该哈希码通过加总此对象的属性的哈希码来计算。如果此 BasicAttributes 忽略其属性 ID 的大小写，则将哈希码加一。如果子类重写 <tt>hashCode()</tt>，则其也应该重写 <tt>equals()</tt>，这样两个相等的 <tt>Attributes</tt> 实例才能具有相同的哈希码。

@return 表示此 BasicAttributes 实例的哈希码的 int。
@see #equals

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.naming.directory.BasicAttributes.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
重写以避免公开实现细节。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.naming.directory.BasicAttributes.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
重写以避免公开实现细节。
@serialData Default field (ignoreCase flag -- a boolean), followed by the number of attributes in the set (an int), and then the individual Attribute objects.

<!-- END DATA -->
