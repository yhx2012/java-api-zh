<!-- BEGIN KEY -->
public class javax.naming.Binding extends javax.naming.NameClassPair
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示上下文中一个名称到对象的绑定。
<p>
上下文由名称到对象的绑定组成。Binding 类表示的就是这种绑定。它由一个名称和一个对象组成。<code>Context.listBindings()</code> 方法返回一个 Binding 枚举。
<p>
对于动态生成绑定内容的命名系统，要创建子类。
<p>
Binding 实例与多个线程的并发访问不同步。需要并发地访问 Binding 的线程应该在它们之间实现同步并提供所需的锁定。

@author Rosanna Lee
@author Scott Seligman
@version 1.9 05/11/17
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Object javax.naming.Binding.boundObj
<!-- END KEY -->
<!-- BEGIN DATA -->
包含此绑定的对象。它由构造方法初始化，可以使用 <tt>setObject</tt> 更新。
@serial
@see #getObject
@see #setObject

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.Binding(String name, Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定其名称和对象的情况下构造一个 Binding 实例。 
<p>
如果还没有使用 <tt>setClassName()</tt> 显式设置类名称，则 <tt>getClassName()</tt> 将返回 <tt>obj</tt> 的类名称（或者 null，如果 <tt>obj</tt> 为 null）。

@param	name	对象的非 null 名称。它是相对于<em>目标上下文</em>（由 <code>listBindings()</code> 方法的第一个参数指定）的名称
@param	obj	绑定到 name 的可能为 null 的对象。
@see NameClassPair#setClassName

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.Binding(String name, Object obj, boolean isRelative)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定其名称、对象以及该名称是否是相对名称的情况下构造一个 Binding 实例。
<p>
如果还没有使用 <tt>setClassName()</tt> 显式设置类名称，则 <tt>getClassName()</tt> 将返回 <tt>obj</tt> 的类名称（或者 null，如果 <tt>obj</tt> 为 null）。

@param	name	对象的非 null 字符串名称。
@param	obj	绑定到 name 的可能为 null 的对象。
@param isRelative 如果 <code>name</code> 是一个相对于目标上下文（由 <code>listBindings()</code> 方法的第一个参数命名）的名称，则该参数为 true；如果 <code>name</code> 是一个 URL 字符串，则该参数为 false。
@see NameClassPair#isRelative
@see NameClassPair#setRelative
@see NameClassPair#setClassName

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.Binding(String name, String className, Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定其名称、类名称和对象的情况下构造一个 Binding 实例。 

@param	name	对象的非 null 名称。它是相对于<em>目标上下文</em>（由 <code>listBindings()</code> 方法的第一个参数命名）的名称
@param	className	绑定到 <tt>name</tt> 的对象的类名称（可能为 null）。如果为 null，则 <tt>obj</tt> 的类名称由 <tt>getClassName()</tt> 返回。如果 <tt>obj</tt> 也为 null，则 <tt>getClassName()</tt> 将返回 null。
@param	obj	绑定到 name 的可能为 null 的对象。
@see NameClassPair#setClassName

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.Binding(String name, String className, Object obj, boolean isRelative)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定其名称、类名称、对象以及该名称是否是相对名称的情况下构造一个 Binding 实例。

@param	name	对象的非 null 字符串名称。
@param	className	绑定到 <tt>name</tt> 的对象的类名称（可能为 null）。如果为 null，则 <tt>obj</tt> 的类名称由 <tt>getClassName()</tt> 返回。如果 <tt>obj</tt> 也为 null，则 <tt>getClassName()</tt> 将返回 null。
@param	obj	绑定到 name 的可能为 null 的对象。
@param isRelative 如果 <code>name</code> 是一个相对于目标上下文（由 <code>listBindings()</code> 方法的第一个参数命名）的名称，则该参数为 true；如果 <code>name</code> 是一个 URL 字符串，则该参数为 false。
@see NameClassPair#isRelative
@see NameClassPair#setRelative
@see NameClassPair#setClassName

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.naming.Binding.getClassName()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索绑定到此绑定名称的对象的类名称。如果已经显式设置该类名称，则返回该名称。如果未显式设置该类名称，且此绑定包含非 null 对象，则使用该对象的类名称。如果未显式设置该类名称，且此绑定不包含非 null 对象，返回 null。
 
@return	包含所绑定对象的类名称的字符串（可能为 null）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.naming.Binding.getObject()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索绑定到此绑定名称的对象。

@return	绑定的对象；如果此绑定没有包含任何对象，则返回 null。
@see #setObject

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.Binding.setObject(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置与此绑定关联的对象。
@param obj 要使用的可能为 null 的对象。
@see #getObject

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.naming.Binding.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
生成此绑定的字符串表示形式。该字符串表示形式由名称/类对的字符串表示形式和此绑定对象的表示形式组成，两个表示形式之间用 ':' 分隔。此字符串的内容用于调试目的，不以编程方式对其进行解释。

@return  此绑定的非 null 字符串表示形式。

<!-- END DATA -->
