<!-- BEGIN KEY -->
public class javax.naming.NamingException extends java.lang.Exception
<!-- END KEY -->
<!-- BEGIN DATA -->
此异常是 Context 和 DirContext 接口中的操作抛出的所有异常的超类。失败的特性由子类的名称描述。此异常捕获指出操作失败处的信息，比如解析最后进行到的位置。
 <ul>
<li> 已解析名称。已解析的名称部分。
<li> 已解析对象。名称解析已进行到其所在位置的对象。
<li> 剩余名称。尚未解析的名称部分。
<li> 解释。解释名称解析失败原因的详细信息。
<li> 根异常。导致抛出此命名异常的异常。
</ul>
所有这些字段都可以为 null 值。字段值为 null 意味着没有为该字段记录此类信息。
<p>
NamingException 实例与并发多线程访问不同步。试图访问和修改单个 NamingException 实例的多个线程应该锁定对象。
<p>
此异常已作出改进，以符合通用异常链机制。<i>根异常</i>（或<i>根 cause</i>）是与 {@link Throwable#getCause()} 方法返回的 <i>cause</i> 相同的对象。

@author Rosanna Lee
@author Scott Seligman
@version 1.11 05/11/17
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.naming.Name javax.naming.NamingException.resolvedName
<!-- END KEY -->
<!-- BEGIN DATA -->
包含已成功解析的名称部分。它可以是一个复合名称，并且可以为 null。此字段由构造方法初始化。应该通过其 get 和 set 方法访问和操作此字段。
@serial
@see #getResolvedName
@see #setResolvedName

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object javax.naming.NamingException.resolvedObj
<!-- END KEY -->
<!-- BEGIN DATA -->
包含一个对象，已成功解析的名称部分进行到该对象。可以为 null。此字段由构造方法初始化。应该通过其 get 和 set 方法访问和操作此字段。
@serial
@see #getResolvedObj
@see #setResolvedObj

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.naming.Name javax.naming.NamingException.remainingName
<!-- END KEY -->
<!-- BEGIN DATA -->
包含尚未解析的剩余名称。它可以是一个复合名称，并且可以为 null。此字段由构造方法初始化。应该通过其 get、set 和 &quot;append&quot; 方法访问和操作此字段。
@serial
@see #getRemainingName
@see #setRemainingName
@see #appendRemainingName
@see #appendRemainingComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Throwable javax.naming.NamingException.rootException
<!-- END KEY -->
<!-- BEGIN DATA -->
包含导致抛出此 NamingException 的原始异常。如果存在可以从原始异常中获得的附加信息，或者无法将原始异常映射到 NamingException 的子类，则设置此字段。可以为 null。
<p>
此字段早于通用异常链设施。{@link #initCause(Throwable)} 和 {@link #getCause()} 方法现在是访问此信息的首选方法。

@serial
@see #getRootCause
@see #setRootCause(Throwable)
@see #initCause(Throwable)
@see #getCause

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.NamingException(String explanation)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用解释构造一个新的 NamingException。将所有未指定字段都设置为 null。

@param	explanation	一个可能为 null 的字符串，包含有关此异常的附加详细信息。
@see java.lang.Throwable#getMessage

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.NamingException()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的 NamingException。将所有字段都设置为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.Name javax.naming.NamingException.getResolvedName()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索成功被解析的名称的开头部分。 

@return 成功被解析的名称部分。该名称是一个复合名称。它可以为 null，表示尚未设置已解析名称字段。
@see #getResolvedObj
@see #setResolvedName

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.Name javax.naming.NamingException.getRemainingName()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索名称的剩余未解析部分。
@return 尚未解析的名称部分。该名称是一个复合名称。它可以为 null，表示尚未设置剩余名称字段。
@see #setRemainingName
@see #appendRemainingName
@see #appendRemainingComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.naming.NamingException.getResolvedObj()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索已成功解析成的对象。该对象是已解析名称被绑定到的对象。

@return 到目前为止已被解析的对象（可能为 null）。null 意味着尚未设置已解析对象字段。
@see #getResolvedName
@see #setResolvedObj

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.naming.NamingException.getExplanation()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索与此异常关联的解释。
 
@return 更详细地解释此异常的字符串（可能为 null）。如果为 null，则意味着没有此异常的详细消息。

@see java.lang.Throwable#getMessage

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.NamingException.setResolvedName(Name name)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此异常的已解析名称字段。
<p>
<tt>name</tt> 是一个复合名称。如果打算使用复合名称或字符串设置此字段，则必须将该复合名称&ldquo;字符串化&rdquo;，并用使用该字符串的单个组件创建一个复合名称。然后可以使用得到的复合名称调用此方法。
<p>
创建并存储 <code>name</code> 的副本。对 <code>name</code> 进行的后续更改不会影响此 NamingException 中的副本，反之亦然。

@param name 用来设置已解析名称的名称（可能为 null）。如果其为 null，则将已解析名称字段设置为 null。
@see #getResolvedName

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.NamingException.setRemainingName(Name name)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此异常的剩余名称字段。
<p>
<tt>name</tt> 是一个复合名称。如果打算使用复合名称或字符串设置此字段，则必须将该复合名称&ldquo;字符串化&rdquo;，并用使用该字符串的单个组件创建一个复合名称。然后可以使用得到的复合名称调用此方法。
<p>
创建并存储 <code>name</code> 的副本。对 <code>name</code> 进行的后续更改不会影响此 NamingException 中的副本，反之亦然。
@param name 用来设置剩余名称的名称（可能为 null）。如果其为 null，则将剩余的名称字段设置为 null。
@see #getRemainingName
@see #appendRemainingName
@see #appendRemainingComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.NamingException.setResolvedObj(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此异常的已解析对象字段。
@param name 用来设置已解析对象的对象（可能为 null）。如果为 null，则将已解析对象字段设置为 null。
@see #getResolvedObj

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.NamingException.appendRemainingComponent(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 name 作为剩余名称中最后的组件添加。
@param name 要添加的组件。如果 name 为 null，则此方法不执行任何操作。
@see #setRemainingName
@see #getRemainingName
@see #appendRemainingName

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.NamingException.appendRemainingName(Name name)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 'name' 中的组件作为剩余名称中最后的组件添加。
<p>
<tt>name</tt> 是一个复合名称。如果打算追加一个组合名称，则应该&ldquo;字符串化&rdquo;该组合名称，然后调用接受 String 参数的该方法的重载形式。
<p>
对 <code>name</code> 进行的后续更改不会影响此 NamingException 中的剩余名称字段，反之亦然。
@param name 要添加的包含有序组件的名称（可能为 null）。如果 name 为 null，则此方法不执行任何操作。
@see #setRemainingName
@see #getRemainingName
@see #appendRemainingComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Throwable javax.naming.NamingException.getRootCause()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 NamingException 的根 cause，如果有的话。如果服务提供者需要向调用者指示非命名相关异常，同时又需要使用 NamingException 结构指示命名操作进行的程度，则可以使用命名异常的根 cause。
<p>
这是通用异常链设施之前的方法。{@link #getCause()} 方法现在是获取此信息的首选方法。

@return 导致此命名异常的异常（可能为 null）。如果为 null，则意味着没有为此命名异常设置根 cause。
@see #setRootCause
@see #rootException
@see #getCause

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.NamingException.setRootCause(Throwable e)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录此 NamingException 的根 cause。如果 <tt>e</tt> 为 <tt>this</tt>，则此方法不执行任何操作。
<p>
这是通用异常链设施之前的方法。{@link #initCause(Throwable)} 方法现在是记录此信息的首选方法。

@param e 导致命名操作失败的异常（可能为 null）。如果为 null，则意味着此命名异常没有根 cause。
@see #getRootCause
@see #rootException
@see #initCause

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Throwable javax.naming.NamingException.getCause()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此异常的 cause。cause 是导致抛出此命名异常的 throwable 对象。如果 cause 不存在或是未知的，则返回 <code>null</code>。

@return 此异常的 cause，如果 cause 不存在或是未知的，则返回 <code>null</code>。
@see #initCause(Throwable)
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Throwable javax.naming.NamingException.initCause(Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此异常的 cause 初始化为指定值。cause 是导致抛出此命名异常的 throwable 对象。
<p>
此方法至多可以调用一次。

@param  cause	cause（保存此 cause，以便以后通过 {@link #getCause()} 方法检索）。指示 cause 不存在或未知的 <tt>null</tt> 值。
@return  对此 <code>NamingException</code> 实例的引用。
@throws IllegalArgumentException 如果 <code>cause</code> 是此异常。（throwable 对象不能是它自己的 cause。）
@throws IllegalStateException 如果已经在此异常上调用此方法。
@see #getCause
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.naming.NamingException.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
生成此异常的字符串表示形式。该字符串表示形式由此异常的类名称、详细消息组成，如果该异常有根 cause，则还包括根 cause 异常的字符串表示形式，后跟剩余名称（如果不为 null）。此字符串用于调试，不以编程方式进行解释。

@return 包含此异常字符串表示形式的非 null 字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.naming.NamingException.toString(boolean detail)
<!-- END KEY -->
<!-- BEGIN DATA -->
生成更详细的字符串表示形式。此字符串表示形式由不使用任何参数的 toString() 返回的信息以及已解析对象（如果不为 null）的字符串表示形式组成。此字符串用于调试，不以编程方式进行解释。

@param detail 如果为 true，则除了包含其他信息外，还包含有关已解析对象的详细信息。
@return  包含该字符串表示形式的非 null 字符串。 

<!-- END DATA -->
