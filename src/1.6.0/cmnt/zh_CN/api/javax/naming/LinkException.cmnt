<!-- BEGIN KEY -->
public class javax.naming.LinkException extends javax.naming.NamingException
<!-- END KEY -->
<!-- BEGIN DATA -->
此异常用于描述解析链接时遇到的问题。向基本 NamingException 添加补充信息，用来指出该链接所具有的问题。 
<p>
与 NamingException 捕获名称解析信息的方式类似，LinkException 捕获指出解析某一链接时所遇问题的&ldquo;链接&rdquo;名称解析信息。所有字段都可以为 null。
 <ul>
<li> Link Resolved Name。已解析的链接名称部分。
<li> Link Resolved Object。将要进行链接名称解析的对象。
<li> Link Remaining Name。未解析的链接名称部分。
<li> Link Explanation。解释链接解析失败原因的详细信息。
</ul>

<p>
LinkException 实例与并发多线程访问不同步。试图访问和修改单个 LinkException 实例的多个线程应该锁定对象。

@author Rosanna Lee
@author Scott Seligman
@version 1.8 03/12/19

@see Context#lookupLink
@see LinkRef
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.naming.Name javax.naming.LinkException.linkResolvedName
<!-- END KEY -->
<!-- BEGIN DATA -->
包含已成功解析的链接部分。它可以是一个复合名称，并且可以为 null。此字段由构造方法初始化。应该通过其 get 和 set 方法访问和操作此字段。
@serial
@see #getLinkResolvedName
@see #setLinkResolvedName

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object javax.naming.LinkException.linkResolvedObj
<!-- END KEY -->
<!-- BEGIN DATA -->
包含一个对象，已成功解析的链接部分一直到达该对象。可以为 null。此字段由构造方法初始化。应该通过其 get 和 set 方法访问和操作此字段。
@serial
@see #getLinkResolvedObj
@see #setLinkResolvedObj

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.naming.Name javax.naming.LinkException.linkRemainingName
<!-- END KEY -->
<!-- BEGIN DATA -->
包含尚未解析的剩余链接名称。它可以是一个复合名称，并且可以为 null。此字段由构造方法初始化。应该通过其 get 和 set 方法访问和操作此字段。
@serial
@see #getLinkRemainingName
@see #setLinkRemainingName

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.naming.LinkException.linkExplanation
<!-- END KEY -->
<!-- BEGIN DATA -->
包含链接解析失败原因的异常。可以为 null。此字段由构造方法初始化。应该通过其 get 和 set 方法访问和操作此字段。
@serial
@see #getLinkExplanation
@see #setLinkExplanation

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.LinkException(String explanation)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用解释构造一个新的 LinkException 实例，其他所有字段都初始化为 null。
@param	explanation	一个可能为 null 的字符串，包含有关此异常的附加详细信息。
@see java.lang.Throwable#getMessage

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.LinkException()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的 LinkException 实例。所有与链接无关的和与链接有关的字段都被初始化为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.Name javax.naming.LinkException.getLinkResolvedName()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索成功被解析的链接名称的开头部分。

@return 成功被解析的链接名称部分。该名称是一个复合名称。它可以为 null，表示尚未设置已解析链接名称字段。
@see #getLinkResolvedObj
@see #setLinkResolvedName

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.Name javax.naming.LinkException.getLinkRemainingName()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索链接名称的剩余未解析部分。
@return 未被解析的链接名称部分。该名称是一个复合名称。它可以为 null，表示尚未设置链接剩余解析名称字段。
@see #setLinkRemainingName

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.naming.LinkException.getLinkResolvedObj()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索已成功解析成的对象。该对象是已解析的链接名称被绑定到的对象。

@return 到目前为止已解析的可能为 null 的对象。如果为 null，则意味着尚未设置已解析链接对象字段。
@see #getLinkResolvedName
@see #setLinkResolvedObj

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.naming.LinkException.getLinkExplanation()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索与解析某一链接时遇到的问题关联的解释。
 
@return 更详细地解释有关解析某一链接时所遇问题的可能为 null 的字符串。如果为 null，则意味着没有此异常的链接细节消息。
@see #setLinkExplanation

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.LinkException.setLinkExplanation(String msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置与解析某一链接时所遇问题关联的解释。
 
@param msg 更详细地解释有关解析某一链接时所遇问题的可能为 null 的字符串。如果为 null，则意味着没有记录任何细节信息。
@see #getLinkExplanation

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.LinkException.setLinkResolvedName(Name name)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此异常的已解析链接名称字段。
<p>
<tt>name</tt> 是一个复合名称。如果打算使用复合名称或字符串设置此字段，则必须将该复合名称&ldquo;字符串化&rdquo;，并用使用该字符串的单个组件创建一个复合名称。然后可以使用得到的复合名称调用此方法。
<p>
创建并存储 <code>name</code> 的副本。对 <code>name</code> 进行的后续更改不会影响此 NamingException 中的副本，反之亦然。

@param name 用来设置已解析链接名称的名称。此值可以为 null。如果为 null，则将已解析链接名称字段设置为 null。
@see #getLinkResolvedName

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.LinkException.setLinkRemainingName(Name name)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此异常的剩余链接名称字段。
<p>
<tt>name</tt> 是一个复合名称。如果打算使用复合名称或字符串设置此字段，则必须将该复合名称&ldquo;字符串化&rdquo;，并用使用该字符串的单个组件创建一个复合名称。然后可以使用得到的复合名称调用此方法。
<p>
创建并存储 <code>name</code> 的副本。对 <code>name</code> 进行的后续更改不会影响此 NamingException 中的副本，反之亦然。

@param name 用来设置剩余链接名称的名称。此值可以为 null。如果其为 null，则将剩余的名称字段设置为 null。
@see #getLinkRemainingName

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.LinkException.setLinkResolvedObj(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此异常的已解析链接对象字段。此字段指示最后一个成功解析的链接名称对象。
@param obj 用来设置已解析链接对象的对象。此值可以为 null。如果为 null，则将已解析链接对象字段设置为 null。
@see #getLinkResolvedObj

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.naming.LinkException.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
生成此异常的字符串表示形式。此字符串由 NamingException 信息和链接的剩余名称组成。此字符串用于调试，不以编程方式进行解释。
@return 此链接异常的非 null 字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.naming.LinkException.toString(boolean detail)
<!-- END KEY -->
<!-- BEGIN DATA -->
生成此异常的字符串表示形式。此字符串由 NamingException 信息和解析链接的附加信息组成。如果 'detail' 为 true，则该字符串还包含有关已解析链接对象的信息。如果为 false，则此方法在形式上与不接受任何参数的 toString() 方法相同。此字符串用于调试，不以编程方式进行解释。

@param	detail	如果为 true，则添加有关已解析链接对象的信息。
@return 此链接异常的非 null 字符串表示形式。

<!-- END DATA -->
