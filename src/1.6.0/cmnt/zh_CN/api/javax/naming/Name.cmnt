<!-- BEGIN KEY -->
public interface javax.naming.Name extends java.lang.Cloneable, java.io.Serializable, java.lang.Comparable
<!-- END KEY -->
<!-- BEGIN DATA -->
<tt>Name</tt> 接口表示一个一般名称，即一个有序的组件序列。该名称可以是一个复合名称（跨多个名称空间的名称），或是一个组合名称（在各个分层的命名系统中使用的名称）。

<p> 可以有不同的 <tt>Name</tt> 实现；例如，复合名称、URL 或特定于名称空间的组合名称。

<p> 名称的组件都已编号。带 N 个组件的名称的索引在 0 到 N（但不包括 N）的范围内变动。可将该范围写为 [0,N)。最重要的组件位于索引 0 处。空名称没有组件。

<p> 此接口中的所有方法都不接收 null 作为一个参数（名称和名称组件）的有效值。同样，返回名称或名称组件的方法绝不会返回 null。

<p> <tt>Name</tt> 的实例在不是只读访问时无法与并发多线程访问同步。

@author Rosanna Lee
@author Scott Seligman
@author R. Vasudevan
@version 1.12 05/11/17
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long javax.naming.Name.serialVersionUID
<!-- END KEY -->
<!-- BEGIN DATA -->
为指示与以前的类版本序列化兼容而设置的类指纹。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.naming.Name.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
生成此名称的新副本。对此名称的组件进行的后续更改不会影响新副本，反之亦然。

@return	此名称的副本

@see Object#clone()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.naming.Name.compareTo(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较此名称与另一个名称的顺序。根据此名称小于、等于还是大于给定名称分别返回负整数、零或正整数。

<p> 对于 <tt>Object.equals()</tt>，名称排序的概念取决于实现此接口的类。例如，该排序可能基于名称组件的字典顺序进行。该名称的特定属性（比如对待大小写的方式）可能影响排序。通常，无法比较两个不同类的名称。

@param obj 要与之比较的非 null 对象。
@return 根据此名称小于、等于还是大于给定名称分别返回负整数、零或正整数
@throws ClassCastException 如果 obj 不是一个可以与此名称进行比较的类型的 <tt>Name</tt>

@see Comparable#compareTo(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.naming.Name.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此名称中的组件数。

@return	此名称中的组件数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.naming.Name.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此名称是否为空。空名称是没有任何组件的名称。

@return	如果此名称为空，则返回 true，否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<java.lang.String> javax.naming.Name.getAll()
<!-- END KEY -->
<!-- BEGIN DATA -->
以字符串枚举的形式检索此名称的组件。在该枚举上更新此名称的效果是不确定的。如果该名称没有组件，则返回空（非 null）枚举。

@return	此名称的组件所组成的枚举，每个组件都是一个字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.naming.Name.get(int posn)
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此名称的组件。

@param posn 要检索的从 0 开始的组件索引。该索引必须在范围 [0,size()) 内。
@return	索引 posn 处的组件
@throws	ArrayIndexOutOfBoundsException 如果 posn 超出指定范围

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.Name javax.naming.Name.getPrefix(int posn)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个名称，其组件由此名称中组件的前缀组成。对此名称进行的后续更改不会影响返回的名称，反之亦然。

@param posn 从 0 开始的组件索引，在该索引处停止。该索引必须在范围 [0,size()] 内。
@return	由索引范围在 [0,posn) 之间的组件组成的名称。
@throws	ArrayIndexOutOfBoundsException 如果 posn 超出指定范围

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.Name javax.naming.Name.getSuffix(int posn)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个名称，其组件由此名称中组件的后缀组成。对此名称进行的后续更改不会影响返回的名称，反之亦然。

@param posn 从 0 开始的组件索引，从该索引处开始。该索引必须在范围 [0,size()] 内。
@return	由索引范围在 [posn,size()) 之间的组件组成的名称。如果 posn 等于 size()，则返回一个空名称。
@throws	ArrayIndexOutOfBoundsException 如果 posn 超出指定范围

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.naming.Name.startsWith(Name n)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此名称是否从某一指定前缀开始。如果该方法与 <tt>getPrefix(n.size())</tt> 等效，则名称 <tt>n</tt> 是一个前缀。

@param n 要检查的名称
@return	如果 <tt>n</tt> 是此名称的前缀，则返回 true，否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.naming.Name.endsWith(Name n)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此名称是否以某一指定后缀结束。如果该方法与 <tt>getSuffix(size()-n.size())</tt> 等效，则名称 <tt>n</tt> 是一个后缀。

@param n 要检查的名称
@return	如果 <tt>n</tt> 是此名称的后缀，则返回 true，否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.Name javax.naming.Name.addAll(Name suffix) throws javax.naming.InvalidNameException
<!-- END KEY -->
<!-- BEGIN DATA -->
按顺序将名称的组件添加到此名称的末尾。

@param suffix 要添加的组件
@return	更新的名称（不是新名称）

@throws	InvalidNameException 如果 <tt>suffix</tt> 不是一个有效名称，或者添加组件将违反此名称的语法规则

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.Name javax.naming.Name.addAll(int posn, Name n) throws javax.naming.InvalidNameException
<!-- END KEY -->
<!-- BEGIN DATA -->
按顺序将名称的组件添加到此名称中的指定位置。此名称位于第一个新组件索引处或这之后的组件被上移（远离索引 0），以容纳新的组件。

@param n 要添加的组件
@param posn 此名称中的索引，将在该索引处添加新组件。该索引必须在范围 [0,size()] 内。
@return	更新的名称（不是新名称）

@throws	ArrayIndexOutOfBoundsException 如果 posn 超出指定范围
@throws	InvalidNameException 如果 <tt>n</tt> 不是一个有效名称，或者添加组件将违反此名称的语法规则

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.Name javax.naming.Name.add(String comp) throws javax.naming.InvalidNameException
<!-- END KEY -->
<!-- BEGIN DATA -->
将单个组件添加到此名称的末尾。

@param   comp   要添加的组件
@return	更新的名称（不是新名称）

@throws	InvalidNameException 如果添加 <tt>comp</tt> 将违反此名称的语法规则

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.Name javax.naming.Name.add(int posn, String comp) throws javax.naming.InvalidNameException
<!-- END KEY -->
<!-- BEGIN DATA -->
在此名称中的指定位置添加单个组件。此名称位于新组件索引处或这之后的组件被上移（远离索引 0）一位，以容纳新组件。

@param comp 要添加的组件
@param posn 将在其所在位置处添加新组件的索引。该索引必须在范围 [0,size()] 内。
@return	更新的名称（不是新名称）

@throws	ArrayIndexOutOfBoundsException 如果 posn 超出指定范围
@throws	InvalidNameException 如果添加 <tt>comp</tt> 将违反此名称的语法规则

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.naming.Name.remove(int posn) throws javax.naming.InvalidNameException
<!-- END KEY -->
<!-- BEGIN DATA -->
从此名称中移除一个组件。移除此名称位于指定位置处的组件。索引大于此位置的组件都被下移（朝向索引 0）一位。

@param posn 要移除的组件的索引。该索引必须在范围 [0,size()) 内。
@return	移除的组件（一个 String）

@throws	ArrayIndexOutOfBoundsException 如果 posn 超出指定范围
@throws	InvalidNameException 如果删除组件将违反该名称的语法规则

<!-- END DATA -->
