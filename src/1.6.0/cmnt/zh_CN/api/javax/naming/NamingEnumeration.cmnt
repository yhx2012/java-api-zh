<!-- BEGIN KEY -->
public interface javax.naming.NamingEnumeration extends java.util.Enumeration
<!-- END KEY -->
<!-- BEGIN DATA -->
此接口用于枚举 javax.naming 和 javax.naming.directory 包中的方法所返回的列表。它扩展了 Enumeration，允许在枚举期间抛出异常。
<p>
当某一方法（比如 list()、listBindings() 或 search()）返回 NamingEnumeration 时，在返回所有结果之前，将保留所遇到的所有异常。在枚举结束时抛出异常（由 hasMore() 完成）。
 <p> 
例如，如果 list() 只返回一部分内容，则相应的异常将是 PartialResultException。list() 将先返回一个 NamingEnumeration。当已由 NamingEnumeration 的 next() 返回最后结果时，调用 hasMore() 将导致抛出 PartialResultException。
<p>
在另一个示例中，在指定大小限制为 'n' 的情况下调用 search() 方法。如果结果由 'n' 个以上的结果组成，则 search() 将首先返回一个 NamingEnumeration。当已经通过对 NamingEnumeration 调用 next() 返回了第 n 个结果时，将在调用 hasMore() 时抛出 SizeLimitExceedException。
<p>
注意，如果程序使用 hasMoreElements() 和 nextElement() 而不是在 NamingEnumeration 上迭代，那么因为这些方法无法抛出异常，所以不会抛出异常。此外，在前面的示例中，在 nextElement() 已返回第 n 个结果后，调用 hasMoreElements() 将返回 false。
<p>
还要注意的是，如果在枚举中没有剩余元素时该程序调用 next() 或 nextElement()，则将抛出 NoSuchElementException。通过使用 hasMore() 和 hasMoreElements() 检查是否已经到达枚举末尾，程序总是可以避免此异常。
<p>
如果枚举期间抛出异常，则该枚举变得无效。对该枚举后续调用任何方法都将产生不确定的结果。
 
@author Rosanna Lee
@author Scott Seligman
@version 1.9 05/11/17

@see Context#list
@see Context#listBindings
@see javax.naming.directory.DirContext#search
@see javax.naming.directory.Attributes#getAll
@see javax.naming.directory.Attributes#getIDs
@see javax.naming.directory.Attribute#getAll
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public T javax.naming.NamingEnumeration.next() throws javax.naming.NamingException
<!-- END KEY -->
<!-- BEGIN DATA -->
检索枚举中的下一个元素。此方法允许应用程序捕获并处理在检索下一个元素时遇到的命名异常。 
 <p> 
注意，<tt>next()</tt> 还可以抛出运行时异常 NoSuchElementException，指示调用者试图超出枚举的尾部进行枚举。此异常不同于 NamingException，后者指示在获得下一个元素时存在问题，比如说，因为某一项引用或者服务器不可用等等。

@return	枚举中的元素（可能为 null）。只有对于可以返回 null 的枚举而言，null 才是有效值（例如，Attribute.getAll() 返回一个属性值所组成的枚举，属性值可以为 null）。
@exception NamingException 如果在试图检索下一个元素时遇到命名异常。有关可能的命名异常，请参见 NamingException 及其子类。
@exception java.util.NoSuchElementException 如果试图在没有元素可用时获得下一个元素。
@see java.util.Enumeration#nextElement

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.naming.NamingEnumeration.hasMore() throws javax.naming.NamingException
<!-- END KEY -->
<!-- BEGIN DATA -->
确定枚举中是否还有元素。此方法允许应用程序捕获并处理在确定是否还有元素时遇到的命名异常。

@return		如果枚举中还有元素，则返回 true；否则返回 false。
@exception NamingException 如果在试图确定枚举中是否还有另一个元素时遇到命名异常。有关可能的命名异常，请参见 NamingException 及其子类。
@see java.util.Enumeration#hasMoreElements

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.NamingEnumeration.close() throws javax.naming.NamingException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此枚举。

当已对此枚举调用此方法之后，枚举变得无效，并且对其方法的任何后续调用都将产生不确定的结果。此方法主要用于终止枚举，释放资源。如果枚举进行到结尾处（也就是说，一直到 <tt>hasMoreElements()</tt> 或 <tt>hasMore()</tt> 返回 <tt>false</tt>），则资源将被自动释放，无需显式调用 <tt>close()</tt>。
<p>
此方法指示服务提供者随意释放与该枚举关联的资源，并且可以通知服务器取消任何未处理的请求。<tt>close()</tt> 方法是实现管理其资源的一个提示。当客户端忽略 <tt>close()</tt> 调用时，建议实现使用适当的算法管理其资源。

@exception NamingException 如果关闭枚举时遇到命名异常。
@since 1.3

<!-- END DATA -->
