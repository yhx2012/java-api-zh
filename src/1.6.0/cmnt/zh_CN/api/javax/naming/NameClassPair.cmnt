<!-- BEGIN KEY -->
public class javax.naming.NameClassPair extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示存在于上下文中的某一绑定的对象名称和类名称对。
<p>
上下文由名称到对象的绑定组成。NameClassPair 类表示所绑定对象的名称和类。它由一个名称和表示包限定类名称的字符串组成。
<p>
对于动态生成名称/类对内容的命名系统，要创建子类。
<p>
NameClassPair 实例与多个线程的并发访问不同步。需要并发地访问 NameClassPair 的线程应该在它们之间实现同步并提供所需的锁定。

@author Rosanna Lee
@author Scott Seligman
@version 1.11 05/11/17

@see Context#list
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.naming.NameClassPair.name
<!-- END KEY -->
<!-- BEGIN DATA -->
包含此 NameClassPair 的名称。它由构造方法初始化，可以使用 <tt>setName()</tt> 更新。
@serial
@see #getName
@see #setName

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.naming.NameClassPair.className
<!-- END KEY -->
<!-- BEGIN DATA -->
包含此 NameClassPair 中包含的类名称。它由构造方法初始化，可以使用 <tt>setClassName()</tt> 更新。
@serial
@see #getClassName
@see #setClassName

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.naming.NameClassPair.fullName
<!-- END KEY -->
<!-- BEGIN DATA -->
包含其自己的名称空间中此 NameClassPair 的完全名称。它使用 <tt>setNameInNamespace()</tt> 初始化
@serial
@see #getNameInNamespace
@see #setNameInNamespace

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean javax.naming.NameClassPair.isRel
<!-- END KEY -->
<!-- BEGIN DATA -->
记录此 <tt>NameClassPair</tt> 的名称是否相对于目标上下文。它由构造方法初始化，可以使用 <tt>setRelative()</tt> 更新。
@serial
@see #isRelative
@see #setRelative
@see #getName
@see #setName

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.NameClassPair(String name, String className)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定名称和类名称的情况下构造一个 NameClassPair 实例。

@param	name	对象的非 null 名称。它是相对于<em>目标上下文</em>（由 <code>list()</code> 方法的第一个参数指定）的名称
@param	className	绑定到 name 的对象的类名称（可能为 null）。如果所绑定的对象为 null，则该参数为 null。
@see #getClassName
@see #setClassName
@see #getName
@see #setName

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.NameClassPair(String name, String className, boolean isRelative)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定其名称、类名称以及该名称是否相对于列表上下文的情况下构造一个 NameClassPair 实例。

@param	name	对象的非 null 名称。
@param	className	绑定到 name 的对象的类名称（可能为 null）。如果所绑定的对象为 null，则该参数为 null。
@param isRelative 如果 <code>name</code> 是一个相对于目标上下文（由 <code>list()</code> 方法的第一个参数命名）的名称，则该参数为 true；如果 <code>name</code> 是一个 URL 字符串，则该参数为 false。
@see #getClassName
@see #setClassName
@see #getName
@see #setName
@see #isRelative
@see #setRelative

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.naming.NameClassPair.getClassName()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索绑定到此绑定名称的对象的类名称。如果绑定了某一引用或其他一些间接信息，则检索将由 <tt>Binding.getObject()</tt> 返回的最终对象的类名称。

@return	所绑定对象的可能为 null 的类名称。如果所绑定的对象为 null，则该参数为 null。
@see Binding#getObject
@see Binding#getClassName
@see #setClassName

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.naming.NameClassPair.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此绑定的名称。如果 <tt>isRelative()</tt> 为 true，则此名称相对于目标上下文（由 <tt>list()</tt> 的第一个参数命名）。如果 <tt>isRelative()</tt> 为 false，则此名称是一个 URL 字符串。

@return	此绑定的非 null 名称。
@see #isRelative
@see #setName

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.NameClassPair.setName(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此绑定的名称。

@param	name 将用作该名称的非 null 字符串。
@see #getName
@see #setRelative

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.NameClassPair.setClassName(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此绑定的类名称。

@param	name 将用作类名称的可能为 null 的字符串。如果为 null，则 <tt>Binding.getClassName()</tt> 将返回该绑定中对象的实际类名称。如果所绑定对象为 null，则类名称也将为 null。
@see #getClassName
@see Binding#getClassName

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.naming.NameClassPair.isRelative()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此绑定的名称是否相对于目标上下文（由 <code>list()</code> 方法的第一个参数命名）。

@return 如果此绑定的名称相对于目标上下文，则返回 true；如果此绑定的名称是一个 URL 字符串，则返回 false。
@see #setRelative
@see #getName

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.NameClassPair.setRelative(boolean r)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此绑定的名称是否相对于目标上下文（由 <code>list()</code> 方法的第一个参数命名）。

@param r  如果为 true，则绑定的名称相对于目标上下文；如果为 false，则绑定的名称是一个 URL 字符串。
@see #isRelative
@see #setName

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.naming.NameClassPair.getNameInNamespace()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此绑定的完全名称。该完全名称是此绑定在其自己的名称空间中的绝对名称。请参见 {@link Context#getNameInNamespace()}。
 <p>

在没有将完全名称的概念应用于此绑定的命名系统中，将抛出 <tt>UnsupportedOperationException</tt>。使用引入该方法之前编写的服务提供者时也会抛出此异常。
 <p>
此方法返回的字符串不是一个 JNDI 复合名称，不应将它直接传递给上下文方法。

@return  此绑定的完全名称。
@throws UnsupportedOperationException 如果完全名称的概念没有应用于命名系统中的此绑定。
@since 1.5
@see #setNameInNamespace
@see #getName

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.naming.NameClassPair.setNameInNamespace(String fullName)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此绑定的完全名称。只要创建 <tt>NameClassPair</tt> 并且一个完全名称可应用于此绑定，就必须调用此方法设置完全名称。
 <p>
将完全名称设置为 null（或者根本不设置它）将导致 <tt>getNameInNamespace()</tt> 抛出异常。

@param fullName 要使用的完全名称。
@since 1.5
@see #getNameInNamespace
@see #setName

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.naming.NameClassPair.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
生成此名称/类对的字符串表示形式。该字符串表示形式由以冒号 (':') 分隔的名称和类名称组成。此字符串的内容用于调试目的，不以编程方式对其进行解释。

@return 此名称/类对的字符串表示形式。

<!-- END DATA -->
