<!-- BEGIN KEY -->
public class javax.naming.LinkRef extends javax.naming.Reference
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示一个 Reference，其内容是绑定到上下文中的原子名称的一个名称，称为链接名称 (link name)。 
<p>
该名称是一个 URL，或者是一个将被相对于初始上下文解析的名称，如果该名称的第一个字符是 &quot;.&quot;，则它相对于绑定该链接的上下文。
<p>
在上下文操作中，普通的名称解析总是根据链接进行的。解析链接名称本身可能导致该解析通过其他链接。这可能导致链接循环，该循环中的解析通常无法终止。有一个避免这类无法终止的解析的简单方法，即服务提供者可以定义一个关于调用者调用的任何单独操作中可以涉及的链接数的限制。
<p>
LinkRef 包含单个 StringRefAddr，其类型为 &quot;LinkAddress&quot;，其内容则是一个链接名称。Reference 的类名称字段是此 (LinkRef) 类的类名称字段。
<p>
可使用标准的 Context.bind()/rebind() 和 DirContext.bind()/rebind() 将 LinkRef 绑定到一个名称。如果最终原子名称被绑定到某一链接，则使用 Context.lookupLink() 来检索该链接本身。
<p>
许多命名系统支持可在该命名系统本身中使用的本机链接概念。JNDI 不指定这类本机链接与 JNDI 链接之间是否存在任何关系。
<p>
LinkRef 实例与多个线程的并发访问不同步。需要并发地访问 LinkRef 的线程应该在它们之间实现同步并提供所需的锁定。

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19

@see LinkException
@see LinkLoopException
@see MalformedLinkException
@see Context#lookupLink
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.LinkRef(Name linkName)
<!-- END KEY -->
<!-- BEGIN DATA -->
为某一名称构造一个 LinkRef。
@param linkName 将为其创建此链接的非 null 名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.naming.LinkRef(String linkName)
<!-- END KEY -->
<!-- BEGIN DATA -->
为某一字符串名称构造一个 LinkRef。
@param linkName 将为其创建此链接的非 null 名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.naming.LinkRef.getLinkName() throws javax.naming.NamingException
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此链接的名称。
 
@return  此链接的非 null 名称。
@exception MalformedLinkException 如果无法提取链接名称
@exception NamingException 如果遇到命名异常。

<!-- END DATA -->
