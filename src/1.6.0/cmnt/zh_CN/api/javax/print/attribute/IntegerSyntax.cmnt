<!-- BEGIN KEY -->
public abstract class javax.print.attribute.IntegerSyntax extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
类 IntegerSyntax 是一个抽象的基类，它提供具有整数值的所有属性的公共实现。 
 <P>
实际上，整数属性正好是一个整数。通过调用 {@link #getValue() <CODE>getValue()</CODE>} 可以获取整数属性的整数值。整数属性的整数值是在构造时建立的（请参阅 {@link #IntegerSyntax(int) <CODE>IntegerSyntax(int)</CODE>}）。构造之后，整数属性的值是不可变的。 
 <P>

@author  David Mendenhall
@author  Alan Kaminsky

<!-- END DATA -->
<!-- BEGIN KEY -->
private int javax.print.attribute.IntegerSyntax.value
<!-- END KEY -->
<!-- BEGIN DATA -->
此整数属性的整数值。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.print.attribute.IntegerSyntax(int value)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的整数值构造一个新的整数属性。

@param  value  整数值。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.print.attribute.IntegerSyntax(int value, int lowerBound, int upperBound)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的整数值构造一个新的整数属性，它必须位于给定的范围内。 

@param  value  整数值。
@param  lowerBound  下边界。
@param  upperBound  上边界。

@exception  IllegalArgumentException （未经检查的异常）如果 <CODE>value</CODE> 小于 <CODE>lowerBound</CODE> 或大于 <CODE>upperBound</CODE>，则抛出该异常。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.print.attribute.IntegerSyntax.getValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此整数属性的整数值。
@return 整数值

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.IntegerSyntax.equals(Object object)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此整数属性是否等效于传入的对象。若要等效，以下所有条件都必须为 true： 
 <OL TYPE=1>
 <LI>
<CODE>object</CODE> 不为 null。
 <LI>
<CODE>object</CODE> 是类 IntegerSyntax 的一个实例。
 <LI>
此整数属性的值和 <CODE>object</CODE> 的值相等。 
 </OL>

@param  object  要比较的对象。

@return  如果 <CODE>object</CODE> 等效于此整数属性，则返回 True，否则返回 false。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.print.attribute.IntegerSyntax.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此整数属性的哈希码值。哈希码正好是此整数属性的整数值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.print.attribute.IntegerSyntax.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对应于此整数属性的字符串值。字符串值就是此整数属性的转换为字符串的整数值。 

<!-- END DATA -->
