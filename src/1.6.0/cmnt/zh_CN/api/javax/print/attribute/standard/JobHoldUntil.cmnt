<!-- BEGIN KEY -->
public final class javax.print.attribute.standard.JobHoldUntil extends javax.print.attribute.DateTimeSyntax implements javax.print.attribute.PrintRequestAttribute, javax.print.attribute.PrintJobAttribute
<!-- END KEY -->
<!-- BEGIN DATA -->
JobHoldUntil 类是打印属性类，它是一个日期-时间属性，指定了作业必须成为候选打印作业的准确日期和时间。 
 <P>
如果此属性的值指定了将来的某个日期-时间，则打印机应将 JOB_HOLD_UNTIL_SPECIFIED 的 {@link JobStateReason JobStateReason} 值添加到作业的 {@link JobStateReasons JobStateReasons} 属性，必须将作业移动到 PENDING_HELD 状态，并且在指定的日期-时间到来之前不能安排该打印作业。 
 <P>
当指定的日期-时间到来时，打印机必须从作业的 {@link JobStateReasons JobStateReasons} 属性中移除 JOB_HOLD_UNTIL_SPECIFIED 的 {@link JobStateReason JobStateReason} 值（如果存在）。如果没有其他使打印作业保持为 PENDING_HELD 状态的作业状态原因，则打印机必须将该作业移动到 PENDING 状态，以将其作为处理的候选作业。 
 <P>
如果已经超过指定的日期-时间，则该作业必须立即成为处理的候选作业。因此，使打印作业立即成为候选作业的一种方法是指定构造如下的 JobHoldUntil 属性（表示的日期-时间为 GMT 时间 1970 年 1 月 1 日，00:00:00）： 
 <PRE>
     JobHoldUntil immediately = new JobHoldUntil (new Date (0L));
 </PRE>
 <P>
如果客户机没有在 Print Request 中提供此属性，且打印机支持此属性，则打印机必须使用其（与实现有关的）默认的作业提交时的 JobHoldUntil 值（与作业处理时必要时所使用的大多数作业模板属性不同）。 
 <P>
要从独立的 year、month、day、hour、minute 等值构造 JobHoldUntil 属性，请使用 {@link java.util.Calendar Calendar} 对象来构造一个 {@link java.util.Date Date} 对象，然后使用该 {@link java.util.Date Date} 对象来构造 JobHoldUntil 属性。要将 JobHoldUntil 属性转换为独立的 year、month、day、hour、minute 等值，请创建一个 {@link java.util.Calendar Calendar} 对象，并根据 JobHoldUntil 属性将它设置为 {@link java.util.Date Date}。 
 <P>
 <B>IPP Compatibility:</B> 虽然 IPP 支持指定为关键字的 &quot;job-hold-until&quot; 属性，但此处 IPP 不支持指定为日期和时间的 &quot;job-hold-until&quot; 属性。但是，可以在丢失一定精度的情况下，将日期和时间转换为标准 IPP 关键字之一；例如，日期为今天、时间为本地时间 9:00pm 的 JobHoldUntil 值可以转换为标准的 IPP 关键字 &quot;night&quot;。<CODE>getName()</CODE> 所返回的类别名称给出了 IPP 属性名称。 
 <P>

@author  Alan Kaminsky

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.print.attribute.standard.JobHoldUntil(Date dateTime)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有给定 {@link java.util.Date Date} 值新 JobHoldUntil 属性。 

@param  dateTime  {@link java.util.Date Date} 值。

@exception  NullPointerException （未检查的异常）如果 <CODE>dateTime</CODE> 为 null，则抛出此异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.standard.JobHoldUntil.equals(Object object)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 JobHoldUntil 属性是否等效于传入的对象。若要等效，以下所有条件都必须为 true： 
 <OL TYPE=1>
 <LI>
<CODE>object</CODE> 不为 null。
 <LI>
<CODE>object</CODE> 为 JobHoldUntil 类的实例。
 <LI>
此 JobHoldUntil 属性的 {@link java.util.Date Date} 值与 <CODE>object</CODE> 的 {@link java.util.Date Date} 值相等。 
 </OL>

@param  object  要比较的 Object。

@return 如果 <CODE>object</CODE> 等效于此 JobHoldUntil 属性，则返回 true，否则返回 false。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.Class<? extends javax.print.attribute.Attribute> javax.print.attribute.standard.JobHoldUntil.getCategory()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取将被用作此打印属性值的&ldquo;类别&rdquo;的打印属性类。
 <P>
对于 JobHoldUntil 类，类别为 JobHoldUntil 类本身。

@return  打印属性类（类别），它是 {@link java.lang.Class java.lang.Class} 类的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.print.attribute.standard.JobHoldUntil.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取类别名称，此属性值为该类别的实例。 
 <P>
对于 JobHoldUntil 类，类别名称为 <CODE>&quot;job-hold-until&quot;</CODE>。 

@return  属性类别名称。

<!-- END DATA -->