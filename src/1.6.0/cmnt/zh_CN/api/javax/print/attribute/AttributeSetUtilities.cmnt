<!-- BEGIN KEY -->
public final class javax.print.attribute.AttributeSetUtilities extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
类 AttributeSetUtilities 为操作 AttributeSets 提供静态方法。
 <ul>
<li>用于创建属性集的不可修改的同步视图的方法。 
<li>用于构建接口 {@link AttributeSet AttributeSet} 的实现的操作。
 </ul>
 <P>
AttributeSet <I>S</I> 的<B>不可修改的视图</B> <I>U</I> 为客户机提供对 <I>S</I> 的&ldquo;只读&rdquo;访问。<I>U</I> 上的查询操作&ldquo;遍历&rdquo;<I>S</I>；因此，<I>S</I> 中的更改会反映在 <I>U</I> 中。但是，任何修改 <I>U</I> 的尝试都会导致 UnmodifiableSetException。如果属性集对象 <I>S</I> 是可序列化的，则不可修改的视图对象 <I>U</I> 将是可序列化的。 
 <P>
属性集 <I>S</I> 的 <B>同步视图</B> <I>V</I> 为客户机提供对 <I>S</I> 的同步（多线程安全）访问。<I>V</I> 的每个操作使用 <I>V</I> 本身作为锁定对象进行同步，然后只调用 <I>S</I> 的相应操作。为了相互保证独占访问，通过 <I>V</I> 完成对 <I>S</I> 的所有访问非常重要。如果属性集对象 <I>S</I> 是可序列化的，则同步视图对象 <I>V</I> 将是可序列化的。 
 <P>
如 javax.print 的包描述中提及的那样，方法的 null 引用参数是不正确的，除非在该方法中将该参数明确记录为具有有意义的解释。与之相反的用法是不正确的编码，可能立即或在稍后某一时间导致运行时异常。IllegalArgumentException 和 NullPointerException 是针对这种情况的典型的、可接受的运行时异常的示例。

@author  Alan Kaminsky

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.print.attribute.AttributeSet javax.print.attribute.AttributeSetUtilities.unmodifiableView(AttributeSet attributeSet)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建给定属性集的不可修改的视图。

@param  attributeSet  底层属性集。

@return  <CODE>attributeSet</CODE> 的不可修改的视图。

@exception  NullPointerException 如果 <CODE>attributeSet</CODE> 为 null，则抛出该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.print.attribute.DocAttributeSet javax.print.attribute.AttributeSetUtilities.unmodifiableView(DocAttributeSet attributeSet)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个给定文档属性集的不可修改的视图。

@param  attributeSet  底层文档属性集。

@return  <CODE>attributeSet</CODE> 的不可修改的视图。

@exception  NullPointerException 如果 <CODE>attributeSet</CODE> 为 null，则抛出该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.print.attribute.PrintRequestAttributeSet javax.print.attribute.AttributeSetUtilities.unmodifiableView(PrintRequestAttributeSet attributeSet)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个给定打印请求属性集的不可修改的视图。

@param  attributeSet  底层打印请求属性集。

@return  <CODE>attributeSet</CODE> 的不可修改的视图。

@exception  NullPointerException 如果 <CODE>attributeSet</CODE> 为 null，则抛出该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.print.attribute.PrintJobAttributeSet javax.print.attribute.AttributeSetUtilities.unmodifiableView(PrintJobAttributeSet attributeSet)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个给定打印作业属性集的不可修改的视图。

@param  attributeSet  底层打印作业属性集。

@return  <CODE>attributeSet</CODE> 的不可修改的视图。

@exception  NullPointerException 如果 <CODE>attributeSet</CODE> 为 null，则抛出该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.print.attribute.PrintServiceAttributeSet javax.print.attribute.AttributeSetUtilities.unmodifiableView(PrintServiceAttributeSet attributeSet)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个给定打印服务属性集的不可修改的视图。

@param  attributeSet  底层打印服务属性集。

@return  <CODE>attributeSet</CODE> 的不可修改的视图。

@exception  NullPointerException 如果 <CODE>attributeSet</CODE> 为 null，则抛出该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.print.attribute.AttributeSet javax.print.attribute.AttributeSetUtilities.synchronizedView(AttributeSet attributeSet)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建给定属性集的同步视图。

@param  attributeSet  底层属性集。

@return  <CODE>attributeSet</CODE> 的同步视图。

@exception  NullPointerException 如果 <CODE>attributeSet</CODE> 为 null，则抛出该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.print.attribute.DocAttributeSet javax.print.attribute.AttributeSetUtilities.synchronizedView(DocAttributeSet attributeSet)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个给定文档属性集的同步视图。

@param  attributeSet  底层文档属性集。

@return  <CODE>attributeSet</CODE> 的同步视图。

@exception  NullPointerException 如果 <CODE>attributeSet</CODE> 为 null，则抛出该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.print.attribute.PrintRequestAttributeSet javax.print.attribute.AttributeSetUtilities.synchronizedView(PrintRequestAttributeSet attributeSet)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个给定打印请求属性集的同步视图。

@param  attributeSet  底层打印请求属性集。

@return  <CODE>attributeSet</CODE> 的同步视图。

@exception  NullPointerException 如果 <CODE>attributeSet</CODE> 为 null，则抛出该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.print.attribute.PrintJobAttributeSet javax.print.attribute.AttributeSetUtilities.synchronizedView(PrintJobAttributeSet attributeSet)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个给定打印作业属性集的同步视图。

@param  attributeSet  底层打印作业属性集。

@return  <CODE>attributeSet</CODE> 的同步视图。

@exception  NullPointerException 如果 <CODE>attributeSet</CODE> 为 null，则抛出该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.print.attribute.PrintServiceAttributeSet javax.print.attribute.AttributeSetUtilities.synchronizedView(PrintServiceAttributeSet attributeSet)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个给定打印服务属性集的同步视图。

@param  attributeSet  底层打印服务属性集。

@return  <CODE>attributeSet</CODE> 的同步视图。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Class<?> javax.print.attribute.AttributeSetUtilities.verifyAttributeCategory(Object object, java.lang.Class<?> interfaceName)
<!-- END KEY -->
<!-- BEGIN DATA -->
验证给定的对象是否为实现给定接口（假定为接口 {@link Attribute Attribute} 或其子接口）的 {@link java.lang.Class Class}。 

@param  object    要测试的对象。
@param  interfaceName  该对象必须实现的接口。

@return  如果 <CODE>object</CODE> 是实现 <CODE>interfaceName</CODE> 的 {@link java.lang.Class Class}，则返回的 <CODE>object</CODE> 向下转型到类型 {@link java.lang.Class Class}；否则抛出一个异常。 

@exception  NullPointerException （未经检查的异常）如果 <CODE>object</CODE> 为 null，则抛出该异常。
@exception  ClassCastException （未经检查的异常）如果 <CODE>object</CODE> 不是实现 <CODE>interfaceName</CODE> 的 {@link java.lang.Class Class}，则抛出该异常。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.print.attribute.Attribute javax.print.attribute.AttributeSetUtilities.verifyAttributeValue(Object object, java.lang.Class<?> interfaceName)
<!-- END KEY -->
<!-- BEGIN DATA -->
验证给定的对象是否为给定接口（假定为接口 {@link Attribute Attribute} 或其子接口）的一个实例。 

@param  object    要测试的对象。
@param  interfaceName  其对象必须是实例的接口的名称。

@return  如果 <CODE>object</CODE> 是 <CODE>interfaceName</CODE> 的一个实例，则返回的 <CODE>object</CODE> 向下转型到类型 {@link Attribute Attribute}；否则抛出一个异常。 

@exception  NullPointerException （未经检查的异常）如果 <CODE>object</CODE> 为 null，则抛出该异常。
@exception  ClassCastException （未经检查的异常）如果 <CODE>object</CODE> 不是 <CODE>interfaceName</CODE> 的一个实例，则抛出该异常。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.print.attribute.AttributeSetUtilities.verifyCategoryForValue(java.lang.Class<?> category, Attribute attribute)
<!-- END KEY -->
<!-- BEGIN DATA -->
验证给定的属性类别对象是否等于给定属性值对象的类别。如果等于，则此方法只返回而不执行任何操作。如果不等于，则此方法抛出一个异常。 

@param  category  要测试的属性类别。
@param  attribute  要测试的属性值。

@exception  NullPointerException （未经检查的异常）如果 <CODE>category</CODE> 为 null，或者如果 <CODE>attribute</CODE> 为 null，则抛出该异常。
@exception  IllegalArgumentException （未经检查的异常）如果 <CODE>category</CODE> 不等于 <CODE>attribute</CODE> 的类别，则抛出该异常。 

<!-- END DATA -->
