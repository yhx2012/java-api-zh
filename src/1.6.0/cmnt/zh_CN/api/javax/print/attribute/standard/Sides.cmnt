<!-- BEGIN KEY -->
public final class javax.print.attribute.standard.Sides extends javax.print.attribute.EnumSyntax implements javax.print.attribute.DocAttribute, javax.print.attribute.PrintRequestAttribute, javax.print.attribute.PrintJobAttribute
<!-- END KEY -->
<!-- BEGIN DATA -->
Sides 类是打印属性类，它是一种枚举，指定了如何将打印流页应用于选定介质实例的各面（即一个印张）。 
 <P>
多文档打印（一个作业带有多个文档）作业的 Sides 属性的效果取决于是为所有的文档指定了相同的 sides 值，还是不同的文档指定了不同的 sides 值，以及 {@link MultipleDocumentHandling MultipleDocumentHandling} 属性的值（可能是默认值）。 
 <UL>
 <LI>
如果所有的文档指定了相同的 sides 值 <I>n</I>，则 {@link MultipleDocumentHandling MultipleDocumentHandling} 的任何值都有意义，因此打印机的处理取决于 {@link MultipleDocumentHandling MultipleDocumentHandling} 的值： 
 <UL>
 <LI>
SINGLE_DOCUMENT -- 所有输入文档都将合并到一个输出文档中。每个介质纸张都包括来自输出文档的 <I>n</I> 个印张。 
 <P>
 <LI>
SINGLE_DOCUMENT_NEW_SHEET -- 所有输入文档都将合并到一个输出文档中。每个介质纸张都包括来自输出文档的 <I>n</I> 个印张。但是，始终在新的介质纸张上开始每个输入文档的第一个印张；这意味着输入文档的最后一张介质纸张上可能只有一个印张。 
 <P>
 <LI>
SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- 输入文档将保持为单独的文档。每个介质纸张都包括来自输入文档的 <I>n</I> 个印张。由于输入文档是单独的，所以始终在新的介质纸张上开始每个输入文档的第一个印张；这意味着输入文档的最后一张介质纸张上可能只有一个印张。 
 <P>
 <LI>
SEPARATE_DOCUMENTS_COLLATED_COPIES -- 输入文档将保持为单独的文档。每个介质纸张都包括来自输入文档的 <I>n</I> 个印张。由于输入文档是单独的，所以始终在新的介质纸张上开始每个输入文档的第一个印张；这意味着输入文档的最后一张介质纸张上可能只有一个印张。 
 </UL> 
 <P>
 <UL>
 <LI>
SINGLE_DOCUMENT -- 所有输入文档都将合并到一个输出文档中。每个介质纸张都将包括来自输出文档的 <I>n<SUB>i</SUB></I> 个印张，其中 <I>i</I> 是与输出文档中的数量对应的输入文档数量。当下一个输入文档具有不同于前一个输入文档的 sides 值时，下一个输入文档的第一个打印流页将从下一个介质纸张处开始，因此很可能会在前一个介质纸张上只留下一个印张。 
 <P>
 <LI>
SINGLE_DOCUMENT_NEW_SHEET -- 所有输入文档都将合并到一个输出文档中。每个介质纸张都包括来自输出文档的 <I>n</I> 个印张。但是，始终在新的介质纸张上开始每个输入文档的第一个印张；这意味着输入文档的最后一张介质纸张上可能只有一个印张。 
 <P>
 <LI>
SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- 输入文档将保持为单独的文档。对于输入文档 <I>i</I>，每个介质纸张都包括来自该输入文档的 <I>n<SUB>i</SUB></I> 个印张。由于输入文档是单独，所以始终在新的介质纸张上开始每个输入文档的第一个印张；这意味着输入文档的最后一张介质纸张上可能只有一个印张。 
 <P>
 <LI>
SEPARATE_DOCUMENTS_COLLATED_COPIES -- 输入文档将保持为单独的文档。对于输入文档 <I>i</I>，每个介质纸张都包括来自该输入文档的 <I>n<SUB>i</SUB></I> 个印张。由于输入文档是单独，所以始终在新的介质纸张上开始每个输入文档的第一个印张；这意味着输入文档的最后一张介质纸张上可能只有一个印张。 
 </UL>
 </UL>
 <P>
<B>IPP 兼容性：</B>由 <CODE>getName()</CODE> 返回的类别名称是 IPP 属性名称。枚举的整数值是 IPP 枚举值。<code>toString()</code> 方法返回属性值的 IPP 字符串表示形式。
 <P>

@author  Alan Kaminsky

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.print.attribute.standard.Sides javax.print.attribute.standard.Sides.ONE_SIDED
<!-- END KEY -->
<!-- BEGIN DATA -->
将每个连续的打印流页应用于连续介质纸张的相同面。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.print.attribute.standard.Sides javax.print.attribute.standard.Sides.TWO_SIDED_LONG_EDGE
<!-- END KEY -->
<!-- BEGIN DATA -->
将每个连续的打印流页对应用于连续介质纸张的前后两面，以便介质上的每个打印流页对方向正对着读者，就好像绑定在长边上一样。此整版形式称为 &quot;duplex&quot;（请参阅 {@link #DUPLEX <CODE>DUPLEX</CODE>}）。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.print.attribute.standard.Sides javax.print.attribute.standard.Sides.TWO_SIDED_SHORT_EDGE
<!-- END KEY -->
<!-- BEGIN DATA -->
将每个连续的打印流页对应用于连续介质纸张的前后两面，以便介质上的每个打印流页对方向正对着读者，就好像绑定在短边上一样。此整版形式称为 &quot;tumble&quot;（请参阅 {@link #TUMBLE <CODE>TUMBLE</CODE>}）。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.print.attribute.standard.Sides javax.print.attribute.standard.Sides.DUPLEX
<!-- END KEY -->
<!-- BEGIN DATA -->
&ldquo;双面长边&rdquo;的别名（请参阅 {@link #TWO_SIDED_LONG_EDGE <CODE>TWO_SIDED_LONG_EDGE</CODE>}）。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.print.attribute.standard.Sides javax.print.attribute.standard.Sides.TUMBLE
<!-- END KEY -->
<!-- BEGIN DATA -->
&ldquo;双面短边&rdquo;的别名（请参阅 {@link #TWO_SIDED_SHORT_EDGE <CODE>TWO_SIDED_SHORT_EDGE</CODE>}）。 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.print.attribute.standard.Sides(int value)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有给定整数值的新 sides 枚举值， 

@param value 整数值。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String[] javax.print.attribute.standard.Sides.getStringTable()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回类 Sides 的字符串表。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.print.attribute.EnumSyntax[] javax.print.attribute.standard.Sides.getEnumValueTable()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回类 Sides 的枚举值表。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.Class<? extends javax.print.attribute.Attribute> javax.print.attribute.standard.Sides.getCategory()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取将用作此打印属性值的&ldquo;类别&rdquo;的打印属性类。
 <P>
对于类 Sides，该类别就是类 Sides 本身。 

@return 打印属性类（类别），这是类 {@link java.lang.Class java.lang.Class} 的一个实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.print.attribute.standard.Sides.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取类别的名称，此属性值是该类别的一个实例。 
 <P>
对于类 Sides，类别名称是 <CODE>&quot;sides&quot;</CODE>。 

@return 属性类别名称。

<!-- END DATA -->
