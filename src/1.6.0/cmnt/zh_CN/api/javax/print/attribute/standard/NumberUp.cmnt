<!-- BEGIN KEY -->
public final class javax.print.attribute.standard.NumberUp extends javax.print.attribute.IntegerSyntax implements javax.print.attribute.DocAttribute, javax.print.attribute.PrintRequestAttribute, javax.print.attribute.PrintJobAttribute
<!-- END KEY -->
<!-- BEGIN DATA -->
NumberUp 类是整数值形式的打印属性类，它指定了要放置于选中介质的实例单面上的打印流页数。也就是说，如果 NumberUp 值为 <I>n，</I>则打印机必须将 <I>n</I> 个打印流页放置于选中介质的实例单面上。要完成此功能，打印机可以添加某种转换、缩放或旋转。此属性主要控制打印流页的转换、缩放和旋转。 
 <P>
多文档打印作业（具有多个文档的作业）上的 NumberUp 属性的效果取决于是否所有文档均已指定相同的计数值，或者是否不同文档已指定不同计数值，并取决于（可能是默认的）{@link MultipleDocumentHandling MultipleDocumentHandling} 属性的值。 
 <UL>
 <LI>
如果所有文档均已指定了相同计数值 <I>n</I>，则 {@link MultipleDocumentHandling MultipleDocumentHandling} 的任何值均有意义，且打印机的处理取决于 {@link MultipleDocumentHandling MultipleDocumentHandling} 值： 
 <UL>
 <LI>
SINGLE_DOCUMENT －－ 所有输入文档将被合并为一个输出文档。每个介质印张将由 <I>n</I>m 个取自输出文档的打印流页组成。 
 <P>
 <LI>
SINGLE_DOCUMENT_NEW_SHEET －－ 所有输入文档将被合并为一个输出文档。每个介质印张将由 <I>n</I> 个取自输出文档的打印流页组成。但是，每个输入文档的首个印张将总是在新介质纸张上开始；这意味着输入文档的最后一个印张上可能有少于 <I>n</I> 个打印流页。 
 <P>
 <LI>
SEPARATE_DOCUMENTS_UNCOLLATED_COPIES －－ 输入文档将保持独立。每个介质印张将由 <I>n</I> 个取自输入文档的打印流页组成。因为输入文档是独立的，所以每个输入文档的首个印张将总是在新介质纸张上开始；这意味着输入文档的最后一个印张上可能有少于 <I>n</I> 个打印流页。 
 <P>
 <LI>
SEPARATE_DOCUMENTS_COLLATED_COPIES －－ 输入文档将保持独立。每个介质印张将由 <I>n</I> 个取自输入文档的打印流页组成。因为输入文档是独立的，所以每个输入文档的首个印张将总是在新介质纸张上开始；这意味着输入文档的最后一个印张上可能有少于 <I>n</I> 个打印流页。 
 </UL> 
 <UL>
 <LI>
SINGLE_DOCUMENT －－ 所有输入文档将被合并为一个输出文档。每个介质纸张将由 <I>n<SUB>i</SUB></I> 个取自输出文档的打印流页组成，其中 <I>i</I> 为对应于输出文档中该点的输入文档数。当下一个文档具有不同于前一个输入文档的计数值时，下一个输入文档的首个打印流页在下一个介质印张的开始处开始，可能保留少于前一个介质印张上的全部打印流页数。 
 <P>
 <LI>
SINGLE_DOCUMENT_NEW_SHEET －－ 所有输入文档将被合并为一个输出文档。每个介质印张将由 <I>n</I> 个取自输出文档的打印流页组成。但是，每个输入文档的首个印张将总是在新介质纸张上开始；这意味着输入文档的最后一个印张上可能有少于 <I>n</I> 个打印流页。 
 <P>
 <LI>
SEPARATE_DOCUMENTS_UNCOLLATED_COPIES －－ 输入文档将保持独立。对于输入文档 <I>i，</I> 每个介质印张将由 <I>n<SUB>i</SUB></I> 个取自输入文档的打印流页组成。因为输入文档是独立的，所以每个输入文档的首个印张将总是在新介质纸张上开始；这意味着输入文档的最后一个印张上可能有少于 <I>n<SUB>i</SUB></I> 个打印流页。 
 <P>
 <LI>
SEPARATE_DOCUMENTS_COLLATED_COPIES －－ 输入文档将保持独立。对于输入文档 <I>i，</I> 每个介质印张将由 <I>n<SUB>i</SUB></I> 个取自输入文档的打印流页组成。因为输入文档是独立的，所以每个输入文档的首个印张将总是在新介质纸张上开始；这意味着输入文档的最后一个印张上可能有少于 <I>n<SUB>i</SUB></I> 个打印流页。 
 </UL> 
 </UL>
 <B>IPP Compatibility:</B> 整数值给出了 IPP 整数值。<CODE>getName()</CODE> 所返回的类别名称给出了 IPP 属性名称。 
 <P>

@author  Alan Kaminsky

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.print.attribute.standard.NumberUp(int value)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有给定整数值的新 NumberUp 属性。 

@param  value  整数值。

@exception  IllegalArgumentException （未检查的异常）如果 <CODE>value</CODE> 小于 1，则抛出该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.standard.NumberUp.equals(Object object)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此计数属性是否等效于传入的对象。若要等效，以下所有条件都必须为 true： 
 <OL TYPE=1>
 <LI>
<CODE>object</CODE> 不为 null。
 <LI>
<CODE>object</CODE> 为 NumberUp 类的实例。
 <LI>
此计数属性的值与 <CODE>object</CODE> 的值相等。 
 </OL>

@param  object  要比较的 Object。

@return 如果 <CODE>object</CODE> 等效于此计数属性，则返回 true，否则返回 false。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.Class<? extends javax.print.attribute.Attribute> javax.print.attribute.standard.NumberUp.getCategory()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取将被用作此打印属性值的&ldquo;类别&rdquo;的打印属性类。
 <P>
对于 NumberUp 类，类别为 NumberUp 类本身。 

@return  打印属性类（类别），它是 {@link java.lang.Class java.lang.Class} 类的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.print.attribute.standard.NumberUp.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取类别名称，此属性值为该类别的实例。 
 <P>
对于 NumberUp 类，类别名称为 <CODE>&quot;number-up&quot;</CODE>。 

@return  属性类别名称。

<!-- END DATA -->
