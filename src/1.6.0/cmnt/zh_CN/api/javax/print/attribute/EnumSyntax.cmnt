<!-- BEGIN KEY -->
public abstract class javax.print.attribute.EnumSyntax extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
类 EnumSyntax 是一个抽象的基类，它提供所有&ldquo;类型安全枚举&rdquo;对象的公共实现。扩展类 EnumSyntax 的枚举类提供一组枚举值（对象），它是该枚举类的单一实例；例如： 
 <PRE>
     public class Bach extends EnumSyntax {
         public static final Bach JOHANN_SEBASTIAN     = new Bach(0);
         public static final Bach WILHELM_FRIEDEMANN   = new Bach(1);
         public static final Bach CARL_PHILIP_EMMANUEL = new Bach(2);
         public static final Bach JOHANN_CHRISTIAN     = new Bach(3);
         public static final Bach P_D_Q                = new Bach(4);

         private static final String[] stringTable = {
             &quot;Johann Sebastian Bach&quot;,
              &quot;Wilhelm Friedemann Bach&quot;,
              &quot;Carl Philip Emmanuel Bach&quot;,
              &quot;Johann Christian Bach&quot;,
              &quot;P.D.Q. Bach&quot;
         };

         protected String[] getStringTable() {
             return stringTable;
         }

         private static final Bach[] enumValueTable = {
             JOHANN_SEBASTIAN,
              WILHELM_FRIEDEMANN,
              CARL_PHILIP_EMMANUEL,
              JOHANN_CHRISTIAN,
              P_D_Q
         };

         protected EnumSyntax[] getEnumValueTable() {
             return enumValueTable;
         }
     }
 </PRE>
然后，可以写入使用 <CODE>==</CODE> 和 <CODE>!=</CODE> 运算符的代码，以测试枚举值；例如： 
 <PRE>
     Bach theComposer;
     . . .
     if (theComposer == Bach.JOHANN_SEBASTIAN) {
         System.out.println (&quot;The greatest composer of all time!&quot;);
     }
 </PRE>
枚举类的 <CODE>equals()</CODE> 方法仅为相同的对象 (<CODE>==</CODE>) 执行测试。 
 <P>
通过调用 {@link #toString() <CODE>toString()</CODE>} 可以将枚举值转换为字符串。从枚举类提供的表获取字符串。
 <P>
实际上，枚举值就是一个整数，枚举类中每个枚举值都有一个不同的整数。通过调用 {@link #getValue() <CODE>getValue()</CODE>} 可以获取枚举值的整数值。枚举值的整数值是在构造时建立的（请参阅 {@link #EnumSyntax(int) <CODE>EnumSyntax(int)</CODE>}）。由于构造方法是受保护的，唯一可能的枚举值是枚举类中声明的单一对象；在运行时无法创建其他枚举值。 
 <P>
可以定义枚举类的子类，该枚举类会使用其他枚举值对它进行扩展。子类的枚举值的整数值不必与超类的枚举值的整数值不同；<CODE>==</CODE>、<CODE>!=</CODE>、<CODE>equals()</CODE> 和 <CODE>toString()</CODE> 方法仍将正常运行，即使子类使用一些与超类相同的整数值。但是，使用枚举类和子类的应用程序在超类和子类中可能需要具有不同的整数值。 
 <P>

@author  David Mendenhall
@author  Alan Kaminsky

<!-- END DATA -->
<!-- BEGIN KEY -->
private int javax.print.attribute.EnumSyntax.value
<!-- END KEY -->
<!-- BEGIN DATA -->
此枚举值的整数值。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.print.attribute.EnumSyntax(int value)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的整数值构造一个新枚举值。

@param  value  整数值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.print.attribute.EnumSyntax.getValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此枚举值的整数值。
@return 值

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.print.attribute.EnumSyntax.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此枚举值的一个副本，该副本保留了枚举值的语义，它是与此枚举值相同的对象。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.print.attribute.EnumSyntax.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此枚举值的哈希码值。哈希码正好是此枚举值的整数值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.print.attribute.EnumSyntax.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对应于此枚举值的字符串值。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object javax.print.attribute.EnumSyntax.readResolve() throws java.io.ObjectStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
在对象输入过程中，将此反序列化的枚举实例转换为枚举属性类中定义的适当枚举值。

@return  单个枚举值，它存储在 {@link #getEnumValueTable() <CODE>getEnumValueTable()</CODE>} 返回的枚举值表中的索引 <I>i</I>-<I>L</I> 处，其中 <I>i</I> 是此枚举值的整数值，<I>L</I> 是 {@link #getOffset() <CODE>getOffset()</CODE>} 返回的值。 

@throws ObjectStreamException 如果无法对流反序列化
@throws  InvalidObjectException 如果枚举值表为 null，此枚举值的整数值与枚举值表中的元素不对应，或枚举值表中的对应元素为 null，则抛出该异常。（注：{@link java.io.InvalidObjectException InvalidObjectException} 是 {@link java.io.ObjectStreamException ObjectStreamException} 的一个子类，{@link java.io.ObjectStreamException ObjectStreamException} 由 <CODE>readResolve()</CODE> 声明抛出。 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String[] javax.print.attribute.EnumSyntax.getStringTable()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此枚举值的枚举类的字符串表。假设枚举类的整数值的范围是 <I>L</I>..<I>L</I>+<I>N</I>-1，其中 <I>L</I> 是 {@link #getOffset() <CODE>getOffset()</CODE>} 返回的值，<I>N</I> 是字符串表的长度。字符串表中索引 <I>i</I>-<I>L</I> 处的元素是 {@link #toString() <CODE>toString()</CODE>} 针对其整数值是 <I>i</I> 的枚举值所返回的值。如果任何枚举值都不使用上面范围中的整数，则对应的表元素保持为 null。 
 <P>
默认实现返回 null。如果枚举类（类 EnumSyntax 的子类）不重写此方法，以返回非 null 字符串表，并且子类不重写 {@link #toString() <CODE>toString()</CODE>} 方法，则基类 {@link #toString() <CODE>toString()</CODE>} 方法将仅返回此枚举值的整数值的字符串表示形式。
@return 字符串表

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.print.attribute.EnumSyntax[] javax.print.attribute.EnumSyntax.getEnumValueTable()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此枚举值的枚举类的枚举值表。假设枚举类的整数值的范围是 <I>L</I>..<I>L</I>+<I>N</I>-1，其中 <I>L</I> 是 {@link #getOffset() <CODE>getOffset()</CODE>} 返回的值，<I>N</I> 是枚举值表的长度。枚举值表中索引 <I>i</I>-<I>L</I> 处的元素是其整数值是 <I>i</I> 的枚举值对象；在枚举实例的反序列化过程中，{@link #readResolve() <CODE>readResolve()</CODE>} 方法需要此元素来保持单一语义。如果任何枚举值都不使用上面范围中的整数，则对应的表元素保持为 null。 
 <P>
默认实现返回 null。如果枚举类（类 EnumSyntax 的子类）不重写此方法，以返回非 null 枚举值表，并且子类不重写 {@link #readResolve() <CODE>readResolve()</CODE>} 方法，则每当从对象输入流反序列化枚举实例时，基类 {@link #readResolve() <CODE>readResolve()</CODE>} 方法将抛出一个异常。
@return 值表

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.print.attribute.EnumSyntax.getOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此枚举值的枚举类使用的最小整数值。
 <P>
默认实现返回 0。如果枚举类（类 EnumSyntax 的子类）使用以非 0 开始的整数值，则重写子类中的此方法。
@return 最小枚举值的偏移量。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object javax.print.attribute.EnumSyntax.readResolve() throws java.io.ObjectStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
在对象输入过程中，将此反序列化的枚举实例转换为枚举属性类中定义的适当枚举值。

@return  单个枚举值，它存储在 {@link #getEnumValueTable() <CODE>getEnumValueTable()</CODE>} 返回的枚举值表中的索引 <I>i</I>-<I>L</I> 处，其中 <I>i</I> 是此枚举值的整数值，<I>L</I> 是 {@link #getOffset() <CODE>getOffset()</CODE>} 返回的值。 

@throws ObjectStreamException 如果无法对流反序列化
@throws  InvalidObjectException 如果枚举值表为 null，此枚举值的整数值与枚举值表中的元素不对应，或枚举值表中的对应元素为 null，则抛出该异常。（注：{@link java.io.InvalidObjectException InvalidObjectException} 是 {@link java.io.ObjectStreamException ObjectStreamException} 的一个子类，{@link java.io.ObjectStreamException ObjectStreamException} 由 <CODE>readResolve()</CODE> 声明抛出。 

<!-- END DATA -->
