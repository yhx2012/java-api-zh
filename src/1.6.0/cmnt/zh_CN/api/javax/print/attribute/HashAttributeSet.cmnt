<!-- BEGIN KEY -->
public class javax.print.attribute.HashAttributeSet extends java.lang.Object implements javax.print.attribute.AttributeSet, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
类 HashAttributeSet 提供具有哈希映射特征的 <code>AttributeSet</code> 实现。
 <P>

@author  Alan Kaminsky

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Class javax.print.attribute.HashAttributeSet.myInterface
<!-- END KEY -->
<!-- BEGIN DATA -->
此属性集的所有成员必须是其实例的接口。假设是接口 {@link Attribute Attribute} 或其子接口。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.print.attribute.HashAttributeSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的、空属性集。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.print.attribute.HashAttributeSet(Attribute attribute)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个最初使用给定属性填充的新属性集。 

@param  attribute  要添加到此集合的属性值。

@exception  NullPointerException （未经检查的异常）如果 <CODE>attribute</CODE> 为 null，则抛出该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.print.attribute.HashAttributeSet(javax.print.attribute.Attribute[] attributes)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个最初使用给定数组中的值填充的新属性集。通过将 <CODE>attributes</CODE> 数组中的元素从索引 0 开始按顺序添加到该集合来填充新的属性集。因此，如果该数组包含重复的属性值或属性类别，则后面的数组元素可以替换前面的数组元素。 

@param  attributes  要添加到该集合的属性值的数组。如果为 null，则构造一个空属性集。

@exception  NullPointerException （未经检查的异常）如果 <CODE>attributes</CODE> 的任何元素为 null，则抛出该异常。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.print.attribute.HashAttributeSet(AttributeSet attributes)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个最初使用给定集合中的值填充的新属性集。

@param  attributes 从中初始化此集合的属性集。如果为 null，则构造一个空属性集。


<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.print.attribute.HashAttributeSet(java.lang.Class<?> interfaceName)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的空属性集，其中该属性集的成员限于给定的接口。 

@param  interfaceName  此属性集的所有成员必须是其实例的接口。假设是接口 {@link Attribute Attribute} 或其子接口。
@exception NullPointerException 如果 interfaceName 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.print.attribute.HashAttributeSet(Attribute attribute, java.lang.Class<?> interfaceName)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个最初使用给定属性填充的新属性集，其中该属性集的成员限于给定的接口。 

@param  attribute  要添加到此集合的属性值。
@param  interfaceName  此属性集的所有成员必须是其实例的接口。假设是接口 {@link Attribute Attribute} 或其子接口。 

@exception  NullPointerException （未经检查的异常）如果 <CODE>attribute</CODE> 为 null，则抛出该异常。
@exception NullPointerException 如果 interfaceName 为 null。
@exception  ClassCastException （未经检查的异常）如果 <CODE>attribute</CODE> 不是 <CODE>interfaceName</CODE> 的一个实例，则抛出该异常。 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.print.attribute.HashAttributeSet(javax.print.attribute.Attribute[] attributes, java.lang.Class<?> interfaceName)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的属性集，其中该属性集的成员限于给定的接口。通过将 <CODE>attributes</CODE> 数组中的元素从索引 0 开始按顺序添加到该集合来填充新的属性集。因此，如果该数组包含重复的属性值或属性类别，则后面的数组元素可以替换前面的数组元素。 

@param  attributes  要添加到该集合的属性值的数组。如果为 null，则构造一个空属性集。
@param  interfaceName  此属性集的所有成员必须是其实例的接口。假设是接口 {@link Attribute Attribute} 或其子接口。 

@exception  NullPointerException （未经检查的异常）如果 <CODE>attributes</CODE> 的任何元素为 null，则抛出该异常。
@exception NullPointerException 如果 interfaceName 为 null。
@exception  ClassCastException （未经检查的异常）如果 <CODE>attributes</CODE> 的元素不是 <CODE>interfaceName</CODE> 的一个实例，则抛出该异常。 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.print.attribute.HashAttributeSet(AttributeSet attributes, java.lang.Class<?> interfaceName)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个最初使用给定集合中的值填充的新属性集，其中该属性集的成员限于给定的接口。

@param  attributes  要初始化该集合的属性值的集合。如果为 null，则构造一个空属性集。
@param  interfaceName  此属性集的所有成员必须是其实例的接口。假设是接口 {@link Attribute Attribute} 或其子接口。 

@exception  ClassCastException （未经检查的异常）如果 <CODE>attributes</CODE> 的元素不是 <CODE>interfaceName</CODE> 的一个实例，则抛出该异常。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.print.attribute.Attribute javax.print.attribute.HashAttributeSet.get(java.lang.Class<?> category)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此属性集在给定的属性类别中包含的属性值。如果此属性集在给定的属性类别中不包含任何属性值，则返回 <tt>null</tt>。

@param  category  将返回其关联的属性值的属性类别。它必须是实现接口 {@link Attribute Attribute} 的 {@link java.lang.Class Class}。 

@return  此属性集中包含的给定属性类别中的属性值，如果此属性集在给定的属性类别中不包含任何属性值，则返回 <tt>null</tt>。 
 
@throws  NullPointerException （未经检查的异常）如果 <CODE>category</CODE> 为 null，则抛出该异常。
@throws  ClassCastException （未经检查的异常）如果 <CODE>category</CODE> 不是实现接口 {@link Attribute Attribute} 的 {@link java.lang.Class Class}，则抛出该异常。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.HashAttributeSet.add(Attribute attribute)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果指定的属性不存在，则将它添加到此属性集中，方法是首先移除与指定属性值相同的属性类别中的任何现有属性。 

@param  attribute  要添加到此属性集的属性值。

@return  如果此属性集由于调用而发生改变（即：给定的属性值还不是此属性集的成员），则返回 <tt>true</tt>。 
 
@throws  NullPointerException （未经检查的异常）如果 <CODE>attribute</CODE> 为 null，则抛出该异常。
@throws  UnmodifiableSetException （未经检查的异常）如果此属性集不支持 <CODE>add()</CODE> 操作，则抛出该异常。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.HashAttributeSet.remove(java.lang.Class<?> category)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此属性集移除此类别的任何属性（如果存在）。如果 <CODE>category</CODE> 为 null，则 <CODE>remove()</CODE> 不执行任何操作，并返回 <tt>false</tt>。 

@param  category 要从此属性集移除的属性类别。

@return  如果此属性集由于调用而发生改变（即给定的属性类别已经成为此属性集的成员），则返回 <tt>true</tt>。 
 
@throws  UnmodifiableSetException （未经检查的异常）如果此属性集不支持 <CODE>remove()</CODE> 操作，则抛出该异常。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.HashAttributeSet.remove(Attribute attribute)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此属性集移除指定的属性（如果存在）。如果 <CODE>attribute</CODE> 为 null，则 <CODE>remove()</CODE> 不执行任何操作，并返回 <tt>false</tt>。 

@param  attribute 从此属性集移除的属性值。

@return  如果此属性集由于调用而发生改变（即：给定的属性值已经成为此属性集的成员），则返回 <tt>true</tt>。 
 
@throws  UnmodifiableSetException （未经检查的异常）如果此属性集不支持 <CODE>remove()</CODE> 操作，则抛出该异常。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.HashAttributeSet.containsKey(java.lang.Class<?> category)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此属性集包含指定类别的属性，则返回 <tt>true</tt>。

@param category 将测试其是否存在于此属性集中的类别。

@return  如果此属性集包含指定类别的一个属性值，则返回 <tt>true</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.HashAttributeSet.containsValue(Attribute attribute)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此属性集包含给定的属性，则返回 <tt>true</tt>。

@param  attribute  将测试其是否存在于此属性集中的值。

@return  如果此属性集包含给定的属性值，则返回 <tt>true</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.HashAttributeSet.addAll(AttributeSet attributes)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定集合中的所有元素添加到此属性中。该结果与使用指定集合中的每个元素将 {@link #add(Attribute) <CODE>add(Attribute)</CODE>} 操作成功地应用到此属性集中相同。如果正在进行此操作的同时修改了指定的集合，则 <CODE>addAll(AttributeSet)</CODE> 操作的行为是不确定的。
 <P>
如果 <CODE>addAll(AttributeSet)</CODE> 操作抛出一个异常，则对此属性集状态的影响取决于实现方法；在异常点之前，不一定将指定集合中的元素添加到了此属性集。 

@param  attributes  要将其元素添加到此属性集中的属性。

@return 如果此属性集由于调用而发生改变，则返回 <tt>true</tt>。
 
@throws  UnmodifiableSetException （未经检查的异常）如果此属性集不支持 <tt>addAll(AttributeSet)</tt> 方法，则抛出该异常。
@throws  NullPointerException （未经检查的异常）如果指定集合中的某一元素为 null，或该集合为 null，则抛出该异常。


@see #add(Attribute)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.print.attribute.HashAttributeSet.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此属性集中属性的数量。如果此属性集包含的元素多于 <tt>Integer.MAX_VALUE</tt> ，则返回 <tt>Integer.MAX_VALUE</tt>。

@return  此属性集中属性的数量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.print.attribute.Attribute[] javax.print.attribute.HashAttributeSet.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 
@return 作为数组包含在此集合中的属性，如果 AttributeSet 为空，则返回零长度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.print.attribute.HashAttributeSet.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
从此属性集中移除所有属性。

@throws  UnmodifiableSetException （未经检查的异常）如果此属性集不支持 <CODE>clear()</CODE> 操作，则抛出该异常。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.HashAttributeSet.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此属性集不包含任何属性，则返回 true。

@return 如果此属性集不包含任何属性，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.HashAttributeSet.equals(Object object)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较指定的对象与此属性集的相等性。如果给定的对象也是一个属性集，并且两个属性集包含相同的属性类别到属性值的映射关系，则返回 <tt>true</tt>。这确保了 <tt>equals()</tt> 方法能跨越 AttributeSet 接口的不同实现正常运行。 

@param  object 要与此属性集进行相等性比较的对象。

@return 如果指定对象等于此属性集，则返回 <tt>true</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.print.attribute.HashAttributeSet.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此属性集的哈希码值。属性集的哈希码被定义为 AttributeSet 中每个条目的哈希码的总和。这确保了 <tt>t1.equals(t2)</tt> 意味对于任何两个属性集 <tt>t1</tt> 和 <tt>t2</tt> 而言，都存在 <tt>t1.hashCode()==t2.hashCode()</tt>，这是 {@link java.lang.Object#hashCode() <CODE>Object.hashCode()</CODE>} 的通用协定所要求的。 

@return  此属性集的哈希码值。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.print.attribute.HashAttributeSet.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流重构一个实例（也就是将其反序列化）。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.print.attribute.HashAttributeSet.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将该实例写入到流（即：将该对象序列化）

@serialData  属性集的序列化形式显式写入该集合中的属性的数量和每个属性。这不保证序列化形式的相等性，因为未定义写入属性的顺序。

<!-- END DATA -->
