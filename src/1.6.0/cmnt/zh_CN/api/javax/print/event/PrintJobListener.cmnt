<!-- BEGIN KEY -->
public interface javax.print.event.PrintJobListener
<!-- END KEY -->
<!-- BEGIN DATA -->
此侦听器接口的实现应该连接到 {@link javax.print.DocPrintJob DocPrintJob}，以监视打印机作业的状态。在处理打印作业的线程上或服务创建的通知线程上可以调用这些回调方法。无论是哪一种情况，在这些回调中客户端都不必执行较长时间的处理。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.print.event.PrintJobListener.printDataTransferCompleted(PrintJobEvent pje)
<!-- END KEY -->
<!-- BEGIN DATA -->
调用此方法来通知客户端，已成功地将数据传输到打印服务，客户端可以释放分配给该数据的本地资源。接收到此事件之后，客户端不应假定已完全打印了该数据。如果未接收到此事件，则客户端必须等待终端事件（完成/取消/失败），然后再释放资源。
@param pje 生成此事件的作业

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.print.event.PrintJobListener.printJobCompleted(PrintJobEvent pje)
<!-- END KEY -->
<!-- BEGIN DATA -->

调用此方法来通知客户端，作业已成功完成。
@param pje 生成此事件的作业

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.print.event.PrintJobListener.printJobFailed(PrintJobEvent pje)
<!-- END KEY -->
<!-- BEGIN DATA -->

调用此方法来通知客户端，无法成功完成作业，必须重新提交该作业。
@param pje 生成此事件的作业

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.print.event.PrintJobListener.printJobCanceled(PrintJobEvent pje)
<!-- END KEY -->
<!-- BEGIN DATA -->

调用此方法来通知客户端，作业已被用户或程序取消。
@param pje 生成此事件的作业

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.print.event.PrintJobListener.printJobNoMoreEvents(PrintJobEvent pje)
<!-- END KEY -->
<!-- BEGIN DATA -->

调用此方法来通知客户端，不需要再提供事件。生成此事件的原因之一是：作业已成功完成，但打印系统功能有限，无法验证此事件。如果未提供其他的终端事件（完成/失败/取消），则必须提供此事件。
@param pje 生成此事件的作业

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.print.event.PrintJobListener.printJobRequiresAttention(PrintJobEvent pje)
<!-- END KEY -->
<!-- BEGIN DATA -->

调用此方法来通知客户端，发生了一个用户也许能够修复的错误，可以生成此事件的一个错误示例是打印机用完了纸张。
@param pje 生成此事件的作业

<!-- END DATA -->
