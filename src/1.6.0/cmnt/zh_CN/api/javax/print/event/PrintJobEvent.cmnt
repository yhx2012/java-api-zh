<!-- BEGIN KEY -->
public class javax.print.event.PrintJobEvent extends javax.print.event.PrintEvent
<!-- END KEY -->
<!-- BEGIN DATA -->

类 <code>PrintJobEvent</code> 封装打印作业报告的常见事件，以便让侦听器知道 {@link DocPrintJob} 处理的进度。


<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.print.event.PrintJobEvent.JOB_CANCELED
<!-- END KEY -->
<!-- BEGIN DATA -->

作业已被 {@link javax.print.PrintService PrintService} 取消。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.print.event.PrintJobEvent.JOB_COMPLETE
<!-- END KEY -->
<!-- BEGIN DATA -->

文档已被完全打印。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.print.event.PrintJobEvent.JOB_FAILED
<!-- END KEY -->
<!-- BEGIN DATA -->

打印服务报告无法完成作业。应用程序必须重新提交该作业。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.print.event.PrintJobEvent.REQUIRES_ATTENTION
<!-- END KEY -->
<!-- BEGIN DATA -->

打印服务指示可能发生需要外部干预的瞬态问题，然后打印服务才可以继续进行。可以生成此消息的一个示例是打印机用完了纸张。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.print.event.PrintJobEvent.NO_MORE_EVENTS
<!-- END KEY -->
<!-- BEGIN DATA -->

并非所有的打印服务都能够提供所需的事件，甚至无法通知作业何时完成。此消息指示打印作业没有更多的信息或与打印服务之间没有通信。如果未提供终端事件（完成/失败/取消），则必须始终提供此消息。例如，如果在接收此消息之前尚未接收到诸如 JOB_COMPLETE 之类的消息，则可以得出的唯一结论就是打印服务不支持提供此类事件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.print.event.PrintJobEvent.DATA_TRANSFER_COMPLETE
<!-- END KEY -->
<!-- BEGIN DATA -->
不必打印该作业，但数据已经成功地从客户端传输到了打印服务。客户端可以释放这些数据资源。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.print.event.PrintJobEvent(DocPrintJob source, int reason)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>PrintJobEvent</code> 对象。

@param source 一个 <code>DocPrintJob</code> 对象
@param reason 一个指定原因的 int。
@throws IllegalArgumentException 如果 <code>source</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.print.event.PrintJobEvent.getPrintEventType()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得此事件的原因。
@return 原因 int。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.print.DocPrintJob javax.print.event.PrintJobEvent.getPrintJob()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此打印作业事件适合的 <code>DocPrintJob</code>。

@return <code>DocPrintJob</code> 对象，该对象表示报告了由此 <code>PrintJobEvent</code> 所封装事件的打印作业。


<!-- END DATA -->
