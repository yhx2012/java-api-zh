<!-- BEGIN KEY -->
public interface javax.sql.DataSource extends javax.sql.CommonDataSource, java.sql.Wrapper
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>该工厂用于提供到此 <code>DataSource</code> 对象所表示的物理数据源的连接。作为 <code>DriverManager</code> 工具的替代项，<code>DataSource</code> 对象是获取连接的首选方法。实现 <code>DataSource</code> 接口的对象通常在基于 Java<sup><font size=-2>TM</font></sup> Naming and Directory Interface (JNDI) API 的命名服务中注册。
 <P>
<code>DataSource</code> 接口由驱动程序供应商实现。共有三种类型的实现：
 <OL>
<LI>基本实现 - 生成标准的 <code>Connection</code> 对象
<LI>连接池实现 - 生成自动参与连接池的 <code>Connection</code> 对象。此实现与中间层连接池管理器一起使用。
<LI>分布式事务实现 - 生成一个 <code>Connection</code> 对象，该对象可用于分布式事务，大多数情况下总是参与连接池。此实现与中间层事务管理器一起使用，大多数情况下总是与连接池管理器一起使用。
 </OL>
 <P>
<code>DataSource</code> 对象的属性在必要时可以修改。例如，如果将数据源移动到另一个服务器，则可更改与服务器相关的属性。其优点在于，由于可以更改数据源的属性，所以任何访问该数据源的代码都无需更改。
 <P>
通过 <code>DataSource</code> 对象访问的驱动程序本身不会向 <code>DriverManager</code> 注册。通过查找操作获取 <code>DataSource</code> 对象，然后使用该对象创建 <code>Connection</code> 对象。使用基本的实现，通过 <code>DataSource</code> 对象获取的连接与通过 <code>DriverManager</code> 设施获取的连接相同。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Connection javax.sql.DataSource.getConnection() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>尝试建立与此 <code>DataSource</code> 对象所表示的数据源的连接。

@return  到数据源的连接
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Connection javax.sql.DataSource.getConnection(String username, String password) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>尝试建立与此 <code>DataSource</code> 对象所表示的数据源的连接。

@param username 为其建立连接的数据库用户
@param password 用户的密码
@return  到数据源的连接
@exception SQLException 如果发生数据库访问错误
@since 1.4

<!-- END DATA -->
