<!-- BEGIN KEY -->
public interface javax.sql.PooledConnection
<!-- END KEY -->
<!-- BEGIN DATA -->
为连接池管理提供钩子 (hook) 的对象。<code>PooledConnection</code> 对象表示到数据源的物理连接。该连接在应用程序使用完后可以回收而不用关闭，从而减少了需要建立连接的次数。
 <P>
应用程序员不直接使用 <code>PooledConnection</code> 接口，而是通过一个管理连接池的中间层基础设施使用。
 <P>
当应用程序调用 <code>DataSource.getConnection</code> 方法时，它取回 <code>Connection</code> 对象。如果连接池已完成，则该 <code>Connection</code> 对象实际上是到 <code>PooledConnection</code> 对象的句柄，这是一个物理连接。
 <P>
连接池管理器（通常为应用程序服务器）维护 <code>PooledConnection</code> 对象的池。如果在池中存在可用的 <code>PooledConnection</code> 对象，则连接池管理器返回作为到该物理连接的句柄的 <code>Connection</code> 对象。如果不存在可用的 <code>PooledConnection</code> 对象，则连接池管理器调用 <code>ConnectionPoolDataSource</code> 方法 <code>getPoolConnection</code> 创建新的物理连接。实现 <code>ConnectionPoolDataSource</code> 的 JDBC 驱动程序创建新的 <code>PooledConnection</code> 对象并返回一个到它的句柄。
 <P>
当应用程序关闭连接时，它调用 <code>Connection</code> 方法 <code>close</code>。完成连接池时，连接池管理器将得到通知；因为它曾使用 <code>ConnectionPool</code> 方法 <code>addConnectionEventListener</code> 作为 <code>ConnectionEventListener</code> 对象注册它自身。连接池管理器释放到 <code>PooledConnection</code> 对象的句柄，并将 <code>PooledConnection</code> 对象返回到连接池，以便再次使用。因此，当应用程序关闭其连接时，基础物理连接会被回收而不是被关闭。
 <P>
在连接池管理器调用 <code>PooledConnection</code> 方法 <code>close</code> 之前，物理连接不会被关闭。调用此方法通常是为了按顺序关闭服务器，也可能在发生了严重错误，导致连接变得不可用时调用。

 <p>
连接池管理器通常也是一个语句池管理器，用于维护 <code>PreparedStatement</code> 对象的池。当应用程序关闭一个准备好的语句时，它调用 <code>PreparedStatement</code> 方法 <code>close</code>。 当完成 <code>Statement</code> 池操作时，该池管理器获得通知，因为它本身已使用 <code>ConnectionPool</code> 方法 <code>addStatementEventListener</code> 作为 <code>StatementEventListener</code> 对象注册。 因此，当应用程序关闭其 <code>PreparedStatement</code> 时，底层准备好的语句会被回收而不是被关闭。
 <P>

@since 1.4 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Connection javax.sql.PooledConnection.getConnection() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回一个 <code>Connection</code> 对象，它是此 <code>PooledConnection</code> 对象表示的物理连接的句柄。当应用程序已经调用 <code>DataSource.getConnection</code> 方法但不存在可用的 <code>PooledConnection</code> 对象时，连接池管理器将调用此方法。有关更多信息，请参阅{@link PooledConnection 接口描述}。

@return 一个 <code>Connection</code> 对象，它是到此 <code>PooledConnection</code> 对象的句柄
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.PooledConnection.close() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此 <code>PooledConnection</code> 对象表示的物理连接。应用程序永远不会直接调用此方法；它由连接池模块或管理器调用。
 <P>
有关更多信息，请参阅{@link PooledConnection 接口描述}。

@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.PooledConnection.addConnectionEventListener(ConnectionEventListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
注册给定的事件侦听器，以便在此 <code>PooledConnection</code> 对象上发生事件时它将得到通知。

@param listener 一个组件（通常为连接池管理器），它实现了 <code>ConnectionEventListener</code> 接口，并在关闭连接或发生错误时应得到通知
@see #removeConnectionEventListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.PooledConnection.removeConnectionEventListener(ConnectionEventListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
从在此 <code>PooledConnection</code> 对象上发生事件时得到通知的组件所组成的列表中移除给定的事件侦听器。

@param listener 一个组件（通常为连接池管理器），它实现了 <code>ConnectionEventListener</code> 接口，并已作为侦听器向此 <code>PooledConnection</code> 对象注册
@see #addConnectionEventListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.PooledConnection.addStatementEventListener(StatementEventListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
向此 <code>PooledConnection</code> 对象注册一个 <code>StatementEventListener</code>。该连接创建的 <code>PreparedStatement</code> 关闭或检测为无效时希望获得通知的组件可以使用此方法向此 <code>PooledConnection</code> 对象注册一个 <code>StatementEventListener</code>。
 <p>
@param listener	实现将向此 <code>PooledConnection</code> 对象注册的 <code>StatementEventListener</code> 接口的组件
 <p>
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.PooledConnection.removeStatementEventListener(StatementEventListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
从一个组件列表中移除指定的 <code>StatementEventListener</code>，该列表由驱动程序检测到 <code>PreparedStatement</code> 已关闭或无效时将获得通知的组件组成。
 <p> 
 @param listener	实现以前向此 <code>PooledConnection</code> 对象注册的 <code>StatementEventListener</code> 接口的组件
 <p>
 @since 1.6

<!-- END DATA -->
