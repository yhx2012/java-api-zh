<!-- BEGIN KEY -->
public class javax.sql.ConnectionEvent extends java.util.EventObject
<!-- END KEY -->
<!-- BEGIN DATA -->
<P>提供关于连接相关事件的源信息的 <code>Event</code> 对象。当应用程序关闭已入池连接并发生错误时生成 <code>ConnectionEvent</code> 对象。<code>ConnectionEvent</code> 对象包含两种信息：
 <UL>
<LI>应用程序关闭的入池连接
<LI>在发生错误事件时要向应用程序抛出的 <code>SQLException</code>
 </UL>

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.sql.SQLException javax.sql.ConnectionEvent.ex
<!-- END KEY -->
<!-- BEGIN DATA -->
发生错误且入池连接不再可用时驱动程序将向应用程序抛出的 <code>SQLException</code>。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sql.ConnectionEvent(PooledConnection con)
<!-- END KEY -->
<!-- BEGIN DATA -->
<P>构造一个 <code>ConnectionEvent</code> 对象，使用给定的 <code>PooledConnection</code> 对象进行初始化。<code>SQLException</code> 的默认值为 <code>null</code>。

@param con  作为事件源的入池连接
@throws IllegalArgumentException 如果 <code>con</code> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sql.ConnectionEvent(PooledConnection con, SQLException ex)
<!-- END KEY -->
<!-- BEGIN DATA -->
<P>构造一个 <code>ConnectionEvent</code> 对象，使用给定的 <code>PooledConnection</code> 对象和 <code>SQLException</code> 对象进行初始化。

@param con 作为事件源的入池连接
@param ex 要向应用程序抛出的 SQLException
@throws IllegalArgumentException 如果 <code>con</code> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLException javax.sql.ConnectionEvent.getSQLException()
<!-- END KEY -->
<!-- BEGIN DATA -->
<P>获取此 <code>ConnectionEvent</code> 对象的 <code>SQLException</code>。可能为 <code>null</code>。

@return 要抛出的 SQLException，或者 <code>null</code>

<!-- END DATA -->
