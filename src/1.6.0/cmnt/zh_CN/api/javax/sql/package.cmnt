<!-- BEGIN KEY -->
javax.sql
<!-- END KEY -->
<!-- BEGIN DATA -->

为通过 Java<sup><font size=-2>TM</font></sup> 编程语言进行服务器端数据源访问和处理提供 API。此包补充了 <code>java.sql</code> 包，它从 1.4 版本开始包含在 Java 平台、标准版 (Java SE<sup><font size=-2>TM</sup></font>) 中。它保留了 Java 平台、企业版 (Java EE<sup><font size=-2>TM</sup></font>) 中的精华部分。
<P>
<code>java.sql</code> 包中提供以下内容：
<OL>
<LI><code>DataSource</code> 接口，用于建立到数据源的连接，是 <code>DriverManager</code> 的替代项。
<LI>连接池和语句池
<LI>分布式事务
<LI>Rowset
</OL>
<P>
应用程序直接使用 <code>DataSource</code> 和 <code>RowSet</code> API，但连接池和分布式事务 API 只能由中间层基础设施在内部使用。

<H2>使用 <code>DataSource</code> 对象建立连接</H2>

<code>javax.sql</code> 包提供建立到数据源的连接的首选方式。<code>DriverManager</code> 类（原始机制）仍然有效，使用它的代码将继续运行。然而，与 <code>DriverManager</code> 机制相比，较新的 <code>DataSource</code> 机制更为可取，因为有更多的优点。
<P>
下面是使用 <code>DataSource</code> 对象建立连接的主要优点：
<UL>

<LI>可以对数据源的属性进行更改，这意味着当数据源或驱动程序发生更改时，不必更改应用程序代码。
<LI>通过已实现为与中间层基础设施一起使用的 <code>DataSource</code> 对象，可获得连接池、语句池和分布式事务。通过 <code>DriverManager</code> 建立的连接不具有连接池和语句池或分布式事务功能。
</UL>
<P>
驱动程序提供 <code>DataSource</code> 实现。特定的 <code>DataSource</code> 对象表示特定的物理数据源，<code>DataSource</code> 对象创建的每个连接都是到该物理数据源的连接。 
<P>
数据源的逻辑名称需要向使用 Java Naming and Directory Interface<sup><font size=-2>TM</font></sup> (JNDI) API 的命名服务注册，通常由系统管理员或某个执行系统管理员职责的人执行。应用程序可以通过查找注册的逻辑名称获取它需要的 <code>DataSource</code> 对象。然后，应用程序可以使用 <code>DataSource</code> 对象创建到它所表示物理数据源的连接。
<P>
<code>DataSource</code> 对象可以实现为与中间层设施一起使用，这样可将它生成的连接入池以供重用。使用这种 <code>DataSource</code> 实现的应用程序将自动获取参与连接池的连接。<code>DataSource</code> 对象也可以实现为与中间层设施一起使用，这样无需要任何特殊编码即可将它所生成连接用于分布式事务。

<H2>连接池和语句池</H2>

通过实现为与中间层连接池管理器一起使用的 <code>DataSource</code> 对象建立的连接将参与连接池。这能显著地提高性能，因为创建新连接开销很大。连接池允许使用和重用连接，因此可以极大地减少需要创建的新连接数。
<P>
连接池是完全透明的。此操作是在中间层 Java EE 配置中自动完成的，因此就应用程序而言，无需对代码进行任何更改。应用程序可以简单地使用 <code>DataSource.getConnection</code> 方法获取入池连接，并按使用任何 <code>Connection</code> 对象相同的方式使用该连接。
<P>
用于连接池的类和接口是：
<UL>
  <LI><code>ConnectionPoolDataSource</code>
  <LI><code>PooledConnection</code>
  <LI><code>ConnectionEvent</code>
  <LI><code>ConnectionEventListener</code>
   <LI><code>StatementEvent</code>
  <LI><code>StatementEventListener</code>
</UL>
连接池管理器（三层体系结构的中间层中的设施）在后台使用这些类和接口。当调用 <code>ConnectionPoolDataSource</code> 对象创建 <code>PooledConnection</code> 对象时，连接池管理器将作为 <code>ConnectionEventListener</code> 对象在新 <code>PooledConnection</code> 对象中注册。当关闭连接或发生错误时，连接池管理器（作为侦听器）获取包括 <code>ConnectionEvent</code> 对象在内的通知。
<p>
如果连接池管理器支持 <code>Statement</code> 池，则对于可以通过调用 <code>DatabaseMetaData.supportsStatementPooling</code> 方法确定的 <code>PreparedStatements</code>，连接池管理器将向新 <code>PooledConnection</code> 对象注册为 <code>StatementEventListener</code> 对象。当 <code>PreparedStatement</code> 关闭或者发生错误时，连接池管理器（作为一个侦听器）获取一个通知，该通知包括 <code>StatementEvent</code> 对象。
<p>

<H2>分布式事务</H2>

与入池连接一样，通过实现为与中间层基础设施一起使用的 <code>DataSource</code> 对象建立的连接可参与分布式事务。这为应用程序提供了在单个事务中占用多个服务器上的数据源的能力。
<P>
用于分布式事务的类和接口是：
<UL>
  <LI><code>XADataSource</code>
  <LI><code>XAConnection</code>
</UL>
这些接口由事务管理器使用；应用程序不直接使用它们。
<P>
<code>XAConnection</code> 接口是从 <code>PooledConnection</code> 接口派生的，因此适用于入池连接的内容也适用于作为分布式事务一部分的连接。中间层中的事务管理器透明地处理所有动作。应用程序代码中的唯一变化是，应用程序不能执行任何与事务管理器对事务的处理有冲突的操作。更明确地说，应用程序不能调用方法 <code>Connection.commit</code> 或 <code>Connection.rollback</code>，并且它不能将连接设置为自动提交模式（即它不能调用 <code>Connection.setAutoCommit(true)</code>）。  
<P>
应用程序不必为参与分布式事务而执行任何特殊操作。它只需要通过 <code>DataSource.getConnection</code> 方法创建到所需的数据源的连接，就跟它通常的做法一样。事务管理器在后台管理事务。<code>XADataSource</code> 接口创建 <code>XAConnection</code> 对象，每个 <code>XAConnection</code> 对象创建事务管理器用于管理连接的 <code>XAResource</code> 对象。

<H2>Rowset</H2>
<code>RowSet</code> 接口在后台与各种其他类和接口一起使用。RowSet 可分为三个类别。
<OL>
<LI>事件通知
<UL>
<LI><code>RowSetListener</code><br> <code>RowSet</code> 对象是 JavaBeans<sup><font size=-2>TM</font></sup> 组件，因为它具有属性并参与 JavaBeans 事件通知机制。<code>RowSetListener</code> 接口由希望在特定 <code>RowSet</code> 对象发生事件时获得通知的组件实现。这种组件通过 <code>RowSet.addRowSetListener</code> 方法在 rowset 中作为侦听器注册。
<P>
当 <code>RowSet</code> 对象更改它的其中一行、所有行或者移动其指针时，它将同时通知向它注册的所有侦听器。侦听器通过执行对它调用的通知方法的实现作出反应。
<P>
<LI><code>RowSetEvent</code><br> 作为内部通知进程的一部分，<code>RowSet</code> 对象创建一个 <code>RowSetEvent</code> 的实例并将其传递到侦听器。侦听器可以使用此 <code>RowSetEvent</code> 对象来找出具有该事件的 rowset。
</UL>
<P>
<LI>元数据
<UL>
<LI><code>RowSetMetaData</code><br> 此接口从 <code>ResultSetMetaData</code> 接口派生而来，提供关于 <code>RowSet</code> 对象中的列的信息。应用程序可以使用 <code>RowSetMetaData</code> 方法来找出 rowset 包含的列数和每列可以包含的数据种类。
<P>
<code>RowSetMetaData</code> 接口提供用于设置关于列的信息的方法，但是应用程序通常不使用这些方法。当应用程序调用 <code>RowSet</code> 方法 <code>execute</code> 时，<code>RowSet</code> 对象将包含新的行设置，并且其 <code>RowSetMetaData</code> 对象将在内部被更新，以包含关于新行的信息。
<P>
</UL>
<LI>Reader/Writer 设施<br> 实现 <code>RowSetInternal</code> 接口的 <code>RowSet</code> 对象可以调用与之关联的 <code>RowSetReader</code> 对象来填充数据。它还可以调用与之关联的 <code>RowSetWriter</code> 对象将对其行所做的任何更改写回数据源，它的行最初便是从该数据源获取的。保持连接到其数据源的 rowset 不需要使用 reader 和 writer，因为它可以直接对数据源进行操作。

<UL>
<LI><code>RowSetInternal</code><br> 通过实现 <code>RowSetInternal</code> 接口，<code>RowSet</code> 对象获取对其内部状态的访问权限，并且能够调用其 reader 和 writer。rowset 关注其当前行的值和当前行之前那个行的值（称为<i>原始</i> 值）。rowset 还关注：（1）已经设置的用于命令的参数（2）传递给它的连接（如果有）。rowset 在后台使用 <code>RowSetInternal</code> 方法获取对此信息的访问权限。应用程序通常不直接调用这些方法。
<P>
<LI><code>RowSetReader</code><br> 已经实现 <code>RowSetInternal</code> 接口的非连接 <code>RowSet</code> 对象可以调用其 reader（与之关联的 <code>RowSetReader</code> 对象）来填充数据。当应用程序调用 <code>RowSet.execute</code> 方法时，该方法调用 rowset 的 reader 来执行大多数操作。实现与实现可能大不相同，但一般过程是：reader 建立到数据源的连接，从数据源读取数据并使用该数据填充 rowset，然后关闭连接。reader 还可能更新其 rowset 的 <code>RowSetMetaData</code> 对象。rowset 的内部状态也将被更新，或者由 reader 进行或者由 <code>RowSet.execute</code> 方法直接进行。

<LI><code>RowSetWriter</code><br> 已经实现 <code>RowSetInternal</code> 接口的非连接 <code>RowSet</code> 对象可以调用其 writer（与之关联的 <code>RowSetWriter</code> 对象）将更改写回底层数据源。实现与实现可能大不相同，但一般情况下，writer 将执行以下操作：

<P>
<UL>
<LI>建立到数据源的连接
<LI>检查是否存在冲突，即了解曾经在 rowset 中更改的值是否在数据源中也进行了更改
<LI>如果不存在冲突，则将新值写入数据源
<LI>关闭连接
</UL>

</UL>
</OL>
<P>
<code>RowSet</code> 接口可以使用多种方式实现，任何人都可以编写实现。鼓励开发人员充分发挥想象力，探索使用 rowset 的新方式。
<P>
<B>重要注意事项：</B>对于使用标记有 &quot;Since 1.6&quot; 的 API，必须使用实现 JDBC 4.0 API 的 JDBC 技术驱动程序才能运行。必须检查驱动程序文档，以确保它实现了所需使用的特定功能。
<P>

<h2>包规范</h2>

<ul>
<li><a href="http://java.sun.com/products/jdbc/download.html">JDBC 4.0 API 的规范</a>
</ul>

<h2>相关文档</h2>

由 Addison-Wesley Longman 出版的 Java 系列书提供关于 <code>javax.sql</code> 包中的类和实现的详细信息： 

<ul>
<li><a href="http://java.sun.com/docs/books/jdbc"><i>JDBC<sup><font size=-2>TM</font></sup>
      API Tutorial and Reference, Third Edition:</i></a>
</ul>
<P>
@since 1.4

<!-- END DATA -->