<!-- BEGIN KEY -->
public class javax.sql.rowset.serial.SQLOutputImpl extends java.lang.Object implements java.sql.SQLOutput
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将自定义映射的用户定义类型 (UDT) 的属性写回数据库的输出流。驱动程序在内部使用此接口，应用程序员决不能直接调用其方法。
 <p>
当应用程序调用 <code>PreparedStatement.setObject</code> 方法时，驱动程序将检查要写入的值是否具有自定义映射关系的 UDT。如果是，则在类型映射表中将存在一个条目，该条目包含 <code>Class</code> 对象，用于为此 UDT 实现 <code>SQLData</code> 的类。如果要写入的值是 <code>SQLData</code> 的实例，则驱动程序将创建 <code>SQLOutputImpl</code> 的实例并将其传递给 <code>SQLData.writeSQL</code> 方法。<code>writeSQL</code> 方法依次调用适当的 <code>SQLOutputImpl.writeXXX</code> 方法，从 <code>SQLData</code> 对象以 SQL 用户定义类型的表示形式将数据写入 <code>SQLOutputImpl</code> 输出流。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sql.rowset.serial.SQLOutputImpl(java.util.Vector<?> attributes, java.util.Map<java.lang.String, ?> map) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 <code>SQLOutputImpl</code> 对象，并使用给定的属性向量和类型映射表进行初始化。驱动程序将使用类型映射表来确定要调用的 <code>SQLData.writeSQL</code> 方法。然后，此方法将调用适当的 <code>SQLOutputImpl</code> 写入方法，以便能够将属性写入新输出流。

@param attributes <code>Vector</code> 对象，该对象包含要映射为 Java 编程语言中一个或多个对象的 UDT 属性
 
@param map 包含零个或多个条目的 <code>java.util.Map</code> 对象，其中每个条目包含：1) 给出 UDT 完全限定名的 <code>String</code> 2) 用于定义 UDT 映射方式的 <code>SQLData</code> 实现的 <code>Class</code> 对象
@throws SQLException 如果 <code>attributes</code> 或 <code>map</code> 的值为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeString(String x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 Java 编程语言中的 <code>String</code> 写入此 <code>SQLOutputImpl</code> 对象。在此值返回到数据库之前，驱动程序首先将它转换为 SQL <code>CHAR</code>、<code>VARCHAR</code> 或 <code>LONGVARCHAR</code>。

@param x 要传递到数据库的值
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeBoolean(boolean x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 Java 编程语言中的 <code>boolean</code> 写入此 <code>SQLOutputImpl</code> 对象。在此值返回到数据库之前，驱动程序首先将它转换为 SQL <code>BIT</code>。

@param x 要传递到数据库的值
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeByte(byte x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 Java 编程语言中的 <code>byte</code> 写入此 <code>SQLOutputImpl</code> 对象。在此值返回到数据库之前，驱动程序首先将它转换为 SQL <code>BIT</code>。

@param x 要传递到数据库的值
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeShort(short x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 Java 编程语言中的 <code>short</code> 写入此 <code>SQLOutputImpl</code> 对象。在此值返回到数据库之前，驱动程序首先将它转换为 SQL <code>SMALLINT</code>。

@param x 要传递到数据库的值
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeInt(int x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 Java 编程语言中的 <code>int</code> 写入此 <code>SQLOutputImpl</code> 对象。在此值返回到数据库之前，驱动程序首先将它转换为 SQL <code>INTEGER</code>。

@param x 要传递到数据库的值
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeLong(long x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 Java 编程语言中的 <code>long</code> 写入此 <code>SQLOutputImpl</code> 对象。在此值返回到数据库之前，驱动程序首先将它转换为 SQL <code>BIGINT</code>。

@param x 要传递到数据库的值
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeFloat(float x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 Java 编程语言中的 <code>float</code> 写入此 <code>SQLOutputImpl</code> 对象。在此值返回到数据库之前，驱动程序首先将它转换为 SQL <code>REAL</code>。

@param x 要传递到数据库的值
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeDouble(double x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 Java 编程语言中的 <code>double</code> 写入此 <code>SQLOutputImpl</code> 对象。在此值返回到数据库之前，驱动程序首先将它转换为 SQL <code>DOUBLE</code>。

@param x 要传递到数据库的值
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeBigDecimal(BigDecimal x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 Java 编程语言中的 <code>java.math.BigDecimal</code> 对象写入此 <code>SQLOutputImpl</code> 对象。在此值返回到数据库之前，驱动程序首先将它转换为 SQL <code>NUMERIC</code>。

@param x 要传递到数据库的值
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。     

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeBytes(byte[] x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 Java 编程语言中的 <code>byte</code> 数组写入此 <code>SQLOutputImpl</code> 对象。在此值返回数据库之前，驱动程序首先将它转换为 SQL <code>VARBINARY</code> 或 <code>LONGVARBINARY</code>。

@param x 要传递到数据库的值
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeDate(Date x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 Java 编程语言中的 <code>java.sql.Date</code> 对象写入此 <code>SQLOutputImpl</code> 对象。在此值返回到数据库之前，驱动程序首先将它转换为 SQL <code>DATE</code>。

@param x 要传递到数据库的值
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeTime(Time x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 Java 编程语言中的 <code>java.sql.Time</code> 对象写入此 <code>SQLOutputImpl</code> 对象。在此值返回到数据库之前，驱动程序首先将它转换为 SQL <code>TIME</code>。

@param x 要传递到数据库的值
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeTimestamp(Timestamp x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 Java 编程语言中的 <code>java.sql.Timestamp</code> 对象写入此 <code>SQLOutputImpl</code> 对象。在此值返回到数据库之前，驱动程序首先将它转换为 SQL <code>TIMESTAMP</code>。

@param x 要传递到数据库的值
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeCharacterStream(Reader x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 Unicode 字符流写入此 <code>SQLOutputImpl</code> 对象。驱动程序将执行从 Unicode 到数据库 <code>CHAR</code> 格式的任何必要转换。

@param x 要传递到数据库的值
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeAsciiStream(InputStream x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 ASCII 字符流写入此 <code>SQLOutputImpl</code> 对象。驱动程序将执行从 ASCII 到数据库 <code>CHAR</code> 格式的任何必要转换。

@param x 要传递到数据库的值
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeBinaryStream(InputStream x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将未解释字节流写入此 <code>SQLOutputImpl</code> 对象。

@param x 要传递到数据库的值
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeObject(SQLData x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将包含在给定 <code>SQLData</code> 对象中的数据写入流中。当 <code>SQLData</code> 对象为 <code>null</code> 时，此方法将 SQL <code>NULL</code> 写入流中。否则，它将调用给定对象的 <code>SQLData.writeSQL</code> 方法，该方法将对象的属性写入流中。
 <P>
<code>SQLData.writeSQ</code> 方法的实现调用适当的 <code>SQLOutputImpl.writeXXX</code> 方法，依次写入对象的每个属性。从 <code>SQLInput</code> 输入流读取属性和将属性写入 <code>SQLOutputImpl</code> 输出流都必须按照在用户定义类型的 SQL 定义中将它们列出的顺序进行。
 
@param x 表示 SQL 结构或 distinct 类型的数据的对象
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeRef(Ref x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 Java 编程语言中的 <code>Ref</code> 对象写入此 <code>SQLOutputImpl</code> 对象。在此值返回到数据库之前，驱动程序首先将它转换为可序列化的 <code>SerialRef</code> SQL <code>REF</code> 值。

@param x 表示 SQL <code>REF</code> 值的对象
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeBlob(Blob x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 Java 编程语言中的 <code>Blob</code> 对象写入此 <code>SQLOutputImpl</code> 对象。在此值返回到数据库之前，驱动程序首先将它转换为可序列化的 <code>SerialBlob</code> SQL <code>BLOB</code> 值。

@param x 表示 SQL <code>BLOB</code> 值的对象
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeClob(Clob x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 Java 编程语言中的 <code>Clob</code> 对象写入此 <code>SQLOutputImpl</code> 对象。在此值返回到数据库之前，驱动程序首先将它转换为可序列化的 <code>SerialClob</code> SQL <code>CLOB</code> 值。

@param x 表示 SQL <code>CLOB</code> 值的对象
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeStruct(Struct x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 Java 编程语言中的 <code>Struct</code> 对象写入此 <code>SQLOutputImpl</code> 对象。在此值返回到数据库前，驱动程序将它转换成 SQL 结构类型值。
 <P>
在将 SQL 结构类型被映射为 Java 编程语言中的 <code>Struct</code> 对象（标准映射）时，应该使用此方法。如果将 SQL 结构类型自定义映射为 Java 编程语言中的类，则应该使用 <code>writeObject</code> 方法。

@param x 表示 SQL 结构类型的属性的对象
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeArray(Array x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 Java 编程语言中的 <code>Array</code> 对象写入此 <code>SQLOutputImpl</code> 对象。在此值返回到数据库之前，驱动程序首先将它转换为可序列化的 <code>SerialArray</code> SQL <code>ARRAY</code> 值。

@param x 表示 SQL <code>ARRAY</code> 值的对象
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeURL(URL url) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 Java 编程语言中的 <code>java.sql.Type.DATALINK</code> 对象写入此 <code>SQLOutputImpl</code> 对象。在此值返回到数据库之前，驱动程序首先将它转换为可序列化的 <code>SerialDatalink</code> SQL <code>DATALINK</code> 值。
     
@param url 表示 SQL <code>DATALINK</code> 值的对象
@throws SQLException 如果尝试将 UDT 的属性值写入数据库的 <code>SQLData</code> 对象正在使用 <code>SQLOutputImpl</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeNString(String x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将下一个属性以 Java 编程语言中 <code>String</code> 的形式写入流中。在将此属性发送到流中时，驱动程序将其转换为 SQL <code>NCHAR</code>、<code>NVARCHAR</code> 或 <code>LONGNVARCHAR</code> 值（具体取决于该参数相对于驱动程序在 <code>NVARCHAR</code> 值上的限制的大小）。  

 @param x 传递给数据库的值
 @exception SQLException 如果发生数据库访问错误
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeNClob(NClob x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将 SQL <code>NCLOB</code> 值写入流中。

 @param x 表示 SQL <code>NCLOB</code> 值的数据的 <code>NClob</code> 对象

 @exception SQLException 如果发生数据库访问错误
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeRowId(RowId x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将 SQL <code>ROWID</code> 值写入流中。

 @param x 表示 SQL <code>ROWID</code> 值的数据的 <code>RowId</code> 对象

 @exception SQLException 如果发生数据库访问错误
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SQLOutputImpl.writeSQLXML(SQLXML x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将 SQL <code>XML</code> 值写入流中。

 @param x 表示 SQL <code>XML</code> 值的数据的 <code>SQLXML</code> 对象

 @exception SQLException 如果发生数据库访问错误
 @since 1.6

<!-- END DATA -->
