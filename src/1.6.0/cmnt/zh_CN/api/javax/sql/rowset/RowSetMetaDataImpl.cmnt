<!-- BEGIN KEY -->
public class javax.sql.rowset.RowSetMetaDataImpl extends java.lang.Object implements javax.sql.RowSetMetaData, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
为设置和获取关于 <code>RowSet</code> 对象列的元数据信息的方法提供实现。<code>RowSetMetaDataImpl</code> 对象跟踪 rowset 中的列并为每个列维持一个列属性的内部数组。
 <P>
<code>RowSet</code> 对象在内部创建 <code>RowSetMetaDataImpl</code> 对象以设置和获取关于其列的信息。
 <P>
注：在填充 <code>RowSetMetaDataImpl</code> 对象所描述的 <code>RowSet</code> 对象之前，该对象中的所有元数据都应视为不可用。因此，在 <code>RowSet</code> 对象包含数据之前调用任何获取信息的 <code>RowSetMetaDataImpl</code> 方法所导致的行为都被定义为是不确定的。

<!-- END DATA -->
<!-- BEGIN KEY -->
private int javax.sql.rowset.RowSetMetaDataImpl.colCount
<!-- END KEY -->
<!-- BEGIN DATA -->
创建此 <code>RowSetMetaDataImpl</code> 对象的 <code>RowSet</code> 对象中的列数。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.sql.rowset.RowSetMetaDataImpl.ColInfo[] javax.sql.rowset.RowSetMetaDataImpl.colInfo
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>ColInfo</code> 对象数组，这些对象用于存储关于 <code>RowSet</code> 对象（此 <code>RowSetMetaDataImpl</code> 对象为其创建）中每个列的信息。此数组中的第一个 <code>ColInfo</code> 对象包含关于 <code>RowSet</code> 对象中第一个列的信息，第二个元素包含关于第二列的信息，依此类推。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.RowSetMetaDataImpl.setColumnCount(int columnCount) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
在为其创建此 <code>RowSetMetaDataImpl</code> 对象的 <code>RowSet</code> 对象中，将列数设置为给定数。

@param columnCount 给出 <code>RowSet</code> 对象中列数的 <code>int</code>
@throws SQLException 如果给定数小于或等于零

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.RowSetMetaDataImpl.setAutoIncrement(int columnIndex, boolean property) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定列设置为给定 <code>boolean</code> 值，以指示是否为该列自动编号，从而变为只读。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和 rowset 中的列数之间（包含两端的值）
@param property 如果给定列自动加 1，则为 <code>true</code>；否则为 <code>false</code>
@throws <code>SQLException</code> 如果发生数据库访问错误或者给定索引超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.RowSetMetaDataImpl.setCaseSensitive(int columnIndex, boolean property) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定列设置为给定的 <code>boolean</code> 值，以指示该列的名称是否区分大小写。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和 rowset 中的列数之间（包含两端的值）
@param property 为 <code>true</code> 指示列名称区分大小写；否则为 <code>false</code>
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.RowSetMetaDataImpl.setSearchable(int columnIndex, boolean property) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定列设置为给定的 <code>boolean</code> 值，以指示存储在该列中的值是否可以在 <code>WHERE</code> 子句中使用。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和 rowset 中的列数之间（包含两端的值）
@param property 为 <code>true</code> 指示列值可以在 <code>WHERE</code> 子句中使用；否则为 <code>false</code>

@throws <code>SQLException</code> 如果发生数据库访问错误或者给定的列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.RowSetMetaDataImpl.setCurrency(int columnIndex, boolean property) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定列设置为给定的 <code>boolean</code>，以指示存储在该列中的值是否为缓存值。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@param property 如果该值为缓存值，则为 true；否则为 false。
@throws <code>SQLException</code> 如果发生数据库访问错误或者给定的列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.RowSetMetaDataImpl.setNullable(int columnIndex, int property) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定列设置为 <code>ResultSetMetaData</code> 接口中的给定常量，以指示是否可以将存储在该列中的值设置为 <code>NULL</code>。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@param property 以下 <code>ResultSetMetaData</code> 常量之一：<code>columnNoNulls</code>、<code>columnNullable</code> 或 <code>columnNullableUnknown</code>

@throws <code>SQLException</code> 如果发生数据库访问错误、给定列数超出限制，或者提供给 <i>property</i> 参数的值不是以下常量之一：<code>ResultSetMetaData.columnNoNulls</code>、<code>ResultSetMetaData.columnNullable</code> 或 <code>ResultSetMetaData.columnNullableUnknown</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.RowSetMetaDataImpl.setSigned(int columnIndex, boolean property) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定列设置为给定的 <code>boolean</code> 值，以指示存储在该列中的值是否为有符号数。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@param property 为 <code>true</code> 指示列值为有符号数；为 <code>false</code> 指示其不是有符号数
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.RowSetMetaDataImpl.setColumnDisplaySize(int columnIndex, int size) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定列中的正常最大 char 数设置为给定数。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和 rowset 中的列数之间（包含两端的值）
@param size 以 char 表示的列的最大大小；必须大于等于 <code>0</code>
@throws SQLException 如果发生数据库访问错误、给定列数超出限制，或者 <i>size</i> 小于 <code>0</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.RowSetMetaDataImpl.setColumnLabel(int columnIndex, String label) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将建议用于打印输出和显示的列标签（如果有）设置为给定的 <i>label</i>。如果 <i>label</i> 为 <code>null</code>，则将列标签设置为空字符串 (&quot;&quot;)。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@param label 用于打印输出和显示的列标签；如果列标签为 <code>null</code>，则设置空 <code>String</code>
@throws SQLException 如果发生数据库访问错误或者给定列索引超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.RowSetMetaDataImpl.setColumnName(int columnIndex, String columnName) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定列的列名称设置为给定的名称。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和 rowset 中的列数之间（包含两端的值）
@param columnName 指示列名称的 <code>String</code> 对象；如果给定名称为 <code>null</code>，则设置空 <code>String</code>
@throws SQLException 如果发生数据库访问错误或者给定索引超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.RowSetMetaDataImpl.setSchemaName(int columnIndex, String schemaName) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定列的表的模式名称（如果有）设置为 <i>schemaName</i>。如果 <i>schemaName</i> 为 <code>null</code>，则将模式名称设置为空字符串 (&quot;&quot;)。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@param schemaName 表的模式名称，指定列中的值从其派生；可能为空 <code>String</code> 或 <code>null</code>
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.RowSetMetaDataImpl.setPrecision(int columnIndex, int precision) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将存储在指定列中的值的小数位数的总数设置为给定数。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和 rowset 中的列数之间（包含两端的值）
@param precision 小数位数的总数；必须大于等于 <code>0</code>
@throws SQLException 如果发生数据库访问错误、<i>columnIndex</i> 超出限制，或者 <i>precision</i> 小于 <code>0</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.RowSetMetaDataImpl.setScale(int columnIndex, int scale) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将存储在指定列中的值的小数点右边的位数设置为给定数。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和 rowset 中的列数之间（包含两端的值）
@param scale 小数点右边的小数位数；必须大于等于 0
@throws SQLException 如果发生数据库访问错误、<i>columnIndex</i> 超出限制，或者 <i>scale</i> 小于 <code>0</code> 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.RowSetMetaDataImpl.setTableName(int columnIndex, String tableName) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将派生指定列的表名称设置为给定的表名称。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@param tableName 列的表名称；可以为 <code>null</code> 或空字符串
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.RowSetMetaDataImpl.setCatalogName(int columnIndex, String catalogName) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将派生指定列的表名称设置为 <i>catalogName</i>。如果 <i>catalogName</i> 为 <code>null</code>，则将类别名称设置为空字符串。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@param catalogName 列的表的类别名称；如果 catalogName 为 <code>null</code>，则设置为 <code>String</code>
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.RowSetMetaDataImpl.setColumnType(int columnIndex, int SQLType) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将存储在指定列中的值的 SQL 类型代码设置为 <code>java.sql.Types</code> 类中的给定类型代码。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和 rowset 中的列数之间（包含两端的值）
@param SQLType 指定列的 SQL 类型，它必须为 <code>java.sql.Types</code> 类中的常量之一
@throws SQLException 如果发生数据库访问错误、给定列数超出限制，或者指定的列类型不是 <code>java.sql.Types</code> 中的常量之一
@see java.sql.Types

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.RowSetMetaDataImpl.setColumnTypeName(int columnIndex, String typeName) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将供存储在指定列中的值的数据源使用的类型名称设置为给定类型名称。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和 rowset 中的列数之间（包含两端的值）
@param typeName 特定于数据源的类型名称；如果 <i>typeName</i> 为 <code>null</code>，则设置空 <code>String</code>
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sql.rowset.RowSetMetaDataImpl.getColumnCount() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取为其创建此 <code>RowSetMetaDataImpl</code> 对象的 <code>RowSet</code> 对象中的列数。

@return 列数
@throws SQLException 如果在确定列数时发生错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sql.rowset.RowSetMetaDataImpl.isAutoIncrement(int columnIndex) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取存储在指定列中的值是否自动编号，因而是只读的。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@return 如果列是自动编号的，则返回 <code>true</code>；否则返回 <code>false</code>
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sql.rowset.RowSetMetaDataImpl.isCaseSensitive(int columnIndex) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
指示指定列的名称是否区分大小写。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@return 如果列是区分大小写的，则返回 <code>true</code>；否则返回 <code>false</code>
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sql.rowset.RowSetMetaDataImpl.isSearchable(int columnIndex) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
指示是否可以在 <code>WHERE</code> 子句中使用存储在指定列中的值。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@return 如果可以在 <code>WHERE</code> 子句中使用指定列中的值，则返回 <code>true</code>；否则返回 <code>false</code>
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sql.rowset.RowSetMetaDataImpl.isCurrency(int columnIndex) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
指示存储在指定列中的值是否为缓存值。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@return 如果指定列中的值为缓存值，则返回 <code>true</code>；否则返回 <code>false</code>
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sql.rowset.RowSetMetaDataImpl.isNullable(int columnIndex) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指示是否可以在指定列中存储 <code>NULL</code> 值的常量。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@return <code>ResultSetMetaData</code> 接口中的常量；<code>columnNoNulls</code>、<code>columnNullable</code> 或 <code>columnNullableUnknown</code>
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sql.rowset.RowSetMetaDataImpl.isSigned(int columnIndex) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
指示存储在指定列中的值是否为有符号数。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@return 如果指定列中的值为有符号数，则返回 <code>true</code>；否则返回 <code>false</code>
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sql.rowset.RowSetMetaDataImpl.getColumnDisplaySize(int columnIndex) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取以 char 为单位的指定列的正常最大宽度。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@return 可以在指定列中显示的最大 char 数
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sql.rowset.RowSetMetaDataImpl.getColumnLabel(int columnIndex) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取用于打印输出和显示的指定列的建议列标题。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@return 用于打印输出和显示的建议列标题
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sql.rowset.RowSetMetaDataImpl.getColumnName(int columnIndex) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定列的名称。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@return 指定列的列名称
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sql.rowset.RowSetMetaDataImpl.getSchemaName(int columnIndex) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取派生指定列中值的表的模式名称。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@return 模式名称；如果不存在可用的模式名称，则返回一个空 <code>String</code>
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sql.rowset.RowSetMetaDataImpl.getPrecision(int columnIndex) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取存储在指定列中的值的数字总数。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@return 存储在指定列中值的精度
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sql.rowset.RowSetMetaDataImpl.getScale(int columnIndex) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取存储在指定列中的值的小数点右边的数字数。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@return 存储在指定列中的 scale 值
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sql.rowset.RowSetMetaDataImpl.getTableName(int columnIndex) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取派生指定列中值的表名称。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@return 表名称；如果不存在可用的表名称，则返回空 <code>String</code>
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sql.rowset.RowSetMetaDataImpl.getCatalogName(int columnIndex) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取派生指定列中值的表的类别名称。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@return 列的表的类别名称；如果不存在可用的类别名称，则返回空 <code>String</code>
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sql.rowset.RowSetMetaDataImpl.getColumnType(int columnIndex) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取存储在指定行中值的 SQL 类型的类型代码（<code>java.sql.Types</code> 常量之一）。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@return 表示存储在指定列中值的 SQL 类型的 <code>int</code>
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制
@see java.sql.Types

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sql.rowset.RowSetMetaDataImpl.getColumnTypeName(int columnIndex) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取存储在指定列中值的特定于 DBMS 的类型名称。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@return 供数据源使用的类型名称
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sql.rowset.RowSetMetaDataImpl.isReadOnly(int columnIndex) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
指示指定的列是否一定不可写入，即只读。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@return 如果此 <code>RowSet</code> 对象是只读的并因而不可更新，则返回 <code>true</code>；否则返回 <code>false</code>
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sql.rowset.RowSetMetaDataImpl.isWritable(int columnIndex) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
指示在指定的列上进行写操作是否可以获得成功。返回值为 <code>true</code> 意味着写操作可能成功，也可能不成功。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@return 如果在指定列上进行的写操作可能成功，则返回 <code>true</code>；否则返回 <code>false</code>
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sql.rowset.RowSetMetaDataImpl.isDefinitelyWritable(int columnIndex) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
指示在指定的列上进行写操作是否一定可以获得成功。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两端的值）
@return 如果在指定列上进行的写操作一定会成功，则返回 <code>true</code>；否则返回 <code>false</code>
@throws SQLException 如果发生数据库访问错误或者给定列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sql.rowset.RowSetMetaDataImpl.getColumnClassName(int columnIndex) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 Java 编程语言中一个类的完全限定名，该类是指定列中的值将映射到的那个类。例如，如果值为 <code>int</code>，则此方法返回的类名称将为 <code>java.lang.Integer</code>。 
 <P>
如果指定列中的值进行自定义映射，则此方法返回实现 <code>SQLData</code> 的类的名称。当调用 <code>ResultSet.getObject</code> 方法从指定列获取值时，该方法将创建此类或其某个子类的实例。

@param columnIndex 第一列为 1，第二列为 2，依此类推；必须介于 <code>1</code> 和列数之间（包含两个端点）
@return Java 编程语言中类的完全限定名，供 <code>RowSet.getObject</code> 方法用来获取指定列中的值。如果存在自定义映射，则返回值是用于自定义映射的类名称。
@throws SQLException 如果发生数据库访问错误或者给定的列数超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public T javax.sql.rowset.RowSetMetaDataImpl.unwrap(java.lang.Class<T> iface) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回实现给定接口以允许访问非标准方法，或者代理未公开标准方法的的对象。结果可能是实现接口的对象或是该对象的一个代理。如果接收者实现接口，则它就是要返回的对象。如果接收者是一个包装器，并且包装的对象实现接口，则该对象就是要返回的对象。否则，返回的对象是在包装的对象上递归地调用 <code>unwrap</code> 的结果。如果接收者不是包装器并且不实现接口，则抛出 <code>SQLException</code>。

 @param iface 定义结果必须实现的接口的 Class。
 @return 实现接口的对象。可以是实际实现对象的代理。
 @throws java.sql.SQLException 如果未找到实现接口的对象 
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sql.rowset.RowSetMetaDataImpl.isWrapperFor(java.lang.Class<?> interfaces) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果调用者实现接口参数或者是实现接口参数的对象的直接或间接包装器，则返回 true。否则，返回 false。如果调用者实现接口，则返回 true；如果调用者是包装器，则返回在包装的对象上递归地调用 <code>isWrapperFor</code> 的结果。如果调用者不实现接口并且不是包装器，则返回 false。与 <code>unwrap</code> 相比，此方法作为一个低成本的操作实现，从而调用者可以使用此方法来避免昂贵的 <code>unwrap</code> 调用（它们可能会失败）。如果此方法返回 true，则使用相同参数调用 <code>unwrap</code> 应该成功。

 @param interfaces 定义接口的 Class。
 @return 如果调用者实现接口或者是实现接口的对象的直接或间接包装器。
 @throws java.sql.SQLException  如果在确定调用者是否是带有给定接口的对象的包装器时发生错误。
 @since 1.6

<!-- END DATA -->