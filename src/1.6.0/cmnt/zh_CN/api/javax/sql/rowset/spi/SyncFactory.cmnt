<!-- BEGIN KEY -->
public class javax.sql.rowset.spi.SyncFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
该服务提供者接口 (SPI) 机制可以生成由非连接 <code>RowSet</code> 对象使用的 <code>SyncProvider</code> 实例。<code>SyncProvider</code> 实例依次提供 <code>javax.sql.RowSetReader</code> 对象和 <code>javax.sql.RowSetWriter</code> 对象，<code>RowSet</code> 对象需要前者来使用数据填充本身，需要后者来将对其数据的更改传播回底层数据源。 
 <P>
因为 <code>SyncFactory</code> 类中的方法都是静态的，所以每个 Java VM 在任意一个时刻内仅有一个 <code>SyncFactory</code> 对象。这能确保存在一个 <code>RowSet</code> 实现可以从中获取其 <code>SyncProvider</code> 实现的单一源。 
 <p>
<h3>1.0 概述</h3>
<code>SyncFactory</code> 类提供可用同步提供者实现（<code>SyncProvider</code> 对象）的内部注册表。可以查询此注册表以确定可用的同步提供者。以下的代码行可以获取当前注册的提供者所组成的枚举。
 <PRE>
     java.util.Enumeration e = SyncFactory.getRegisteredProviders();
 </PRE>
所有的标准 <code>RowSet</code> 实现必须至少提供两个提供者： 
 <UL>
<LI>乐观提供者，它与 <code>CachedRowSet</code> 实现或从该实现派生的实现一起使用。
<LI>XML 提供者，它用于读取和写入 XML（比如与 <code>WebRowSet</code> 对象一起使用时）。
 </UL> 
注意，JDBC RowSet 实现包括满足此要求的 <code>SyncProvider</code> 实现 <code>RIOptimisticProvider</code> 和 <code>RIXmlProvider</code>。
 <P>
<code>SyncFactory</code> 类提供了一些访问器方法，用来帮助应用程序确定当前向 <code>SyncFactory</code> 注册的同步提供者。
 <p>
其他方法让 <code>RowSet</code> 持久提供者向工厂机制注册或注销。这允许其他同步提供者实现在运行时可用于 <code>RowSet</code> 对象。       
 <p>
应用程序可以应用一定程度的过滤，以确定 <code>SyncProvider</code> 实现提供的同步级别。以下标准确定提供者是否可用于 <code>RowSet</code> 对象：
 <ol>
<li>如果 <code>RowSet</code> 对象指定了特定的提供者，并且 <code>SyncFactory</code> 不包含对此提供者的引用，则抛出 <code>SyncFactoryException</code>，声明不能找到同步提供者。
 <p>
<li>如果使用指定的提供者实例化 <code>RowSet</code> 实现，并且适当地注册了指定的提供者，则提供请求的提供者。否则，将抛出 <code>SyncFactoryException</code>。
 <p>
<li>如果 <code>RowSet</code> 对象未指定 <code>SyncProvider</code> 实现，并且没有其他可用的 <code>SyncProvider</code> 实现，则提供参考实现提供者。
 </ol>
<h3>2.0 注册 <code>SyncProvider</code> 实现</h3>
 <p>
供应商和开发人员都可以使用以下机制之一注册 <code>SyncProvider</code> 实现。
 <ul>
<LI><B>使用命令行</B><BR> 
在命令行中提供提供者的名称，这会将提供者添加到系统属性中。例如：
 <PRE> 
    -Drowset.provider.classname=com.fred.providers.HighAvailabilityProvider
 </PRE> 
<li><b>使用标准属性文件</b><BR> 参考实现的目标是随 J2SE 1.5 一起发行，这将包含一个可以手工编辑的附加资源文件。下面是参考实现中包含的属性文件示例：
 <PRE>
   #Default JDBC RowSet sync providers listing
   #

   # Optimistic synchronization provider
   rowset.provider.classname.0=com.sun.rowset.providers.RIOptimisticProvider
   rowset.provider.vendor.0=Sun Microsystems Inc
   rowset.provider.version.0=1.0
   
   # XML Provider using standard XML schema
   rowset.provider.classname.1=com.sun.rowset.providers.RIXMLProvider
   rowset.provider.vendor.1=Sun Microsystems Inc.
   rowset.provider.version.1=1.0
 </PRE>
<code>SyncFactory</code> 检查此文件，并注册它包含的 <code>SyncProvider</code> 实现。开发人员或供应商可以将其他实现添加到此文件。例如，可能添加以下内容：
 <PRE>
     rowset.provider.classname.2=com.fred.providers.HighAvailabilityProvider
     rowset.provider.vendor.2=Fred, Inc.
     rowset.provider.version.2=1.0
 </PRE>
 <p>
<li><b>使用 JNDI 上下文</b><BR> 在 JNDI 上下文中可以注册可用的提供者，<code>SyncFactory</code> 将尝试从该 JNDI 上下文加载 <code>SyncProvider</code> 实现。例如，以下代码片段将在 JNDI 上下文中注册提供者实现。这是部署者通常都要执行的命令。在此示例中，<code>MyProvider</code> 在 CosNaming 名称空间（它是 J2EE 资源使用的名称空间）上注册。
 <PRE>
    import javax.naming.*;
    
    Hashtable svrEnv = new  Hashtable();
    srvEnv.put(Context.INITIAL_CONTEXT_FACTORY, &quot;CosNaming&quot;);

    Context ctx = new InitialContext(svrEnv);
    com.fred.providers.MyProvider = new MyProvider();
    ctx.rebind(&quot;providers/MyProvider&quot;, syncProvider);
 </PRE>
 </ul> 
接下来，应用程序将向 <code>SyncFactory</code> 实例注册 JNDI 上下文。这允许 <code>SyncFactory</code> 在 JNDI 上下文中进行浏览，以查找 <code>SyncProvider</code> 实现。 
 <PRE>
    Hashtable appEnv = new Hashtable();
    appEnv.put(Context.INITIAL_CONTEXT_FACTORY, &quot;CosNaming&quot;);
    appEnv.put(Context.PROVIDER_URL, &quot;iiop://hostname/providers&quot;);
    Context ctx = new InitialContext(appEnv);

    SyncFactory.registerJNDIContext(ctx);
 </PRE>
如果 <code>RowSet</code> 对象试图获得 <code>MyProvider</code> 对象，则 <code>SyncFactory</code> 将尝试查找它。首先，在系统属性中进行搜索，然后在资源文件中查找，最后检查已设置的 JNDI 上下文。<code>SyncFactory</code> 实例验证请求的提供者是否为 <code>SyncProvider</code> 抽象类的有效扩展，然后将它提供给 <code>RowSet</code> 对象。在以下代码片段中，使用 <i>env</i> 创建并初始化一个新的 <code>CachedRowSet</code> 对象，该对象包含对 <code>MyProvider</code> 的绑定。
 <PRE>
    Hashtable env = new Hashtable();
    env.put(SyncFactory.ROWSET_SYNC_PROVIDER, &quot;com.fred.providers.MyProvider&quot;);
    CachedRowSet crs = new com.sun.rowset.CachedRowSetImpl(env); 
 </PRE>
<code>javax.sql.rowset.spi</code> 包规范中提供了关于这些机制的更多详细信息。

@author  Jonathan Bruce
@see javax.sql.rowset.spi.SyncProvider
@see javax.sql.rowset.spi.SyncFactoryException

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String javax.sql.rowset.spi.SyncFactory.ROWSET_SYNC_PROVIDER
<!-- END KEY -->
<!-- BEGIN DATA -->
用于同步提供者实现名称的标准属性 id。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String javax.sql.rowset.spi.SyncFactory.ROWSET_SYNC_VENDOR
<!-- END KEY -->
<!-- BEGIN DATA -->
用于同步提供者实现供应商名称的标准属性 id。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String javax.sql.rowset.spi.SyncFactory.ROWSET_SYNC_PROVIDER_VERSION
<!-- END KEY -->
<!-- BEGIN DATA -->
用于同步提供者实现版本标记的标准属性 id。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized void javax.sql.rowset.spi.SyncFactory.registerProvider(String providerID) throws javax.sql.rowset.spi.SyncFactoryException
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定的同步提供者添加到工厂注册器。在 <code>SyncProvider</code> 规范中为 <code>SyncProvider</code> 实现所需的命名约定提供了指导方针。
 <p>
通过将 SyncProvider 实例绑定到 JNDI 名称空间可以注册绑定到 JNDI 上下文的同步提供者。     
 <ul>
 <pre>
 SyncProvider p = new MySyncProvider();
 InitialContext ic = new InitialContext();
 ic.bind (&quot;jdbc/rowset/MySyncProvider&quot;, p);
 </pre>
 </ul>
另外，应通过 <code>SyncFactory</code> 使用 <code>setJNDIContext</code> 方法设置初始 JNDI 上下文。<code>SyncFactory</code> 利用此上下文搜索绑定到 JNDI 上下文及其子节点的可用 <code>SyncProvider</code> 对象。
      
@param providerID 一个 <code>String</code> 对象，具有注册的同步提供者的唯一 ID
@throws SyncFactoryException 如果进行尝试提供空的或 null 提供者名称
@see #setJNDIContext

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.sql.rowset.spi.SyncFactory javax.sql.rowset.spi.SyncFactory.getSyncFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>SyncFactory</code>。
 
@return  <code>SyncFactory</code> 实例

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized void javax.sql.rowset.spi.SyncFactory.unregisterProvider(String providerID) throws javax.sql.rowset.spi.SyncFactoryException
<!-- END KEY -->
<!-- BEGIN DATA -->
从工厂 SPI 注册器移除指派的当前已注册同步提供者。

@param providerID 同步提供者的唯一 id
@throws SyncFactoryException 如果尝试注销未注册的 SyncProvider 实现。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.sql.rowset.spi.SyncProvider javax.sql.rowset.spi.SyncFactory.getInstance(String providerID) throws javax.sql.rowset.spi.SyncFactoryException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <i>providerID</i> 标识的 <code>SyncProvider</code> 实例。

@param providerID 提供者的唯一标识符
@return  <code>SyncProvider</code> 实现
@throws SyncFactoryException 如果无法找到 SyncProvider，或者尝试调用此提供者时遇到某种错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Enumeration<javax.sql.rowset.spi.SyncProvider> javax.sql.rowset.spi.SyncFactory.getRegisteredProviders() throws javax.sql.rowset.spi.SyncFactoryException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前已注册的同步提供者所组成的枚举。<code>RowSet</code> 实现可以将枚举中的任何提供者用作其 <code>SyncProvider</code> 对象。
 <p>
至少应该可以使用允许用 JDBC 驱动程序存储 RowSet 内容数据的那个同步提供者。

@return Enumeration  向此工厂注册的可用同步提供者所组成的枚举

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.sql.rowset.spi.SyncFactory.setLogger(Logger logger)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>SyncFactory</code> 提供的 <code>SyncProvider</code> 实现所使用的日志对象。所有 <code>SyncProvider</code> 实现可以将其事件记录到此对象，应用程序可以使用 <code>getLogger</code> 方法获取此对象的句柄。
 
@param logger  Logger 对象实例

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.sql.rowset.spi.SyncFactory.setLogger(Logger logger, Level level)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>SyncFactory</code> SPI 提供的 <code>SyncProvider</code> 实现所使用的日志对象。所有 <code>SyncProvider</code> 实现可以将其事件记录到此对象，应用程序可以使用 <code>getLogger</code> 方法获取此对象的句柄。

@param logger Logger 对象实例
@param level 指示所需日志等级的 Level 对象实例

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.logging.Logger javax.sql.rowset.spi.SyncFactory.getLogger() throws javax.sql.rowset.spi.SyncFactoryException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回应用程序的日志对象，以获取 SyncProvider 实现发送的同步事件。

@throws SyncFactoryException 如果未设置任何日志对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.sql.rowset.spi.SyncFactory.setJNDIContext(Context ctx) throws javax.sql.rowset.spi.SyncFactoryException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置初始 JNDI 上下文，通过该上下文可以从 JNDI 名称空间获取 SyncProvider 实现

@param ctx 有效的 JNDI 上下文
@throws SyncFactoryException 如果提供的 NDI 上下文为 null

<!-- END DATA -->
