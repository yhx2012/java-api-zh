<!-- BEGIN KEY -->
public class javax.sql.rowset.serial.SerialBlob extends java.lang.Object implements java.sql.Blob, java.io.Serializable, java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
SQL <code>BLOB</code> 值在 Java 编程语言中的序列化映射关系。 
 <P>
<code>SerialBlob</code> 类提供一个根据 <code>Blob</code> 对象创建实例的构造方法。注意，在根据 <code>Blob</code> 对象构造 <tt>SerialBlob </tt>对象之前，<code>Blob</code> 对象应该已经将 SQL <code>Blob</code> 值的数据置于客户端上。SQL <code>Blob</code> 值的数据可以在客户端上以字节数组（使用 <code>Blob.getBytes</code> 方法）或未解释字节流的形式（使用 <code>Blob.getBinaryStream</code> 方法）实现。
 <P>
<code>SerialBlob</code> 方法能够以字节数组或流的形式复制 <code>SerialBlob</code> 对象。这些方法还可以在 <code>SerialBlob</code> 对象中查找给定模式的字节或 <code>Blob </code>对象，并可以更新或截断 <code>Blob</code> 对象。

@author Jonathan Bruce

<!-- END DATA -->
<!-- BEGIN KEY -->
private byte[] javax.sql.rowset.serial.SerialBlob.buf
<!-- END KEY -->
<!-- BEGIN DATA -->

表示此 <code>SerialBlob</code> 对象值的序列化未解释字节数组。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.sql.Blob javax.sql.rowset.serial.SerialBlob.blob
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Blob</code> 对象的内部表示形式，此 <code>SerialBlob</code> 对象以该对象为基础。

<!-- END DATA -->
<!-- BEGIN KEY -->
private long javax.sql.rowset.serial.SerialBlob.len
<!-- END KEY -->
<!-- BEGIN DATA -->
此 <code>SerialBlob</code> 对象的字节数组中的字节数。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private long javax.sql.rowset.serial.SerialBlob.origLen
<!-- END KEY -->
<!-- BEGIN DATA -->
刚建立时此 <code>SerialBlob</code> 对象的字节数组中的原始字节数。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sql.rowset.serial.SerialBlob(byte[] b) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
按照给定 <code>byte</code> 数组的序列化形式构造一个 <code>SerialBlob</code> 对象。
 <p>
新的 <code>SerialBlob</code> 对象使用 <code>byte</code> 数组中的数据进行初始化，因此允许未连接 <code>RowSet</code> 对象无需接触数据源即可建立序列化的 <code>Blob</code> 对象。

@param b 一个 <code>byte</code> 数组，包含要序列化的 <code>Blob</code> 对象的数据
@throws SerialException 如果在序列化期间发生错误
@throws SQLException 如果发生 SQL 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sql.rowset.serial.SerialBlob(Blob blob) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->

根据给定 <code>Blob</code> 对象的序列化形式构造一个 <code>SerialBlob</code> 对象。 
 <P>
新的 <code>SerialBlob</code> 对象使用 <code>Blob</code> 对象中的数据进行初始化；因此，<code>Blob</code> 对象应该预先从数据库将 SQL <code>BLOB</code> 值的数据置于客户端上。否则，新 <code>SerialBlob</code> 对象将不包含任何数据。
 
@param blob 一个 <code>Blob</code> 对象，根据该对象构造此 <code>SerialBlob</code> 对象 ；此值不能为 null。
@throws SerialException 如果在序列化期间发生错误
@throws SQLException 如果传递给此构造方法的 <code>Blob</code> 为 <code>null</code>。
@see java.sql.Blob     

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] javax.sql.rowset.serial.SerialBlob.getBytes(long pos, int length) throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的字节数（从给定位置开始）从此 <code>SerialBlob</code> 对象复制到另一个字节数组。
 <P>
注意，如果要复制的给定字节数大于此 <code>SerialBlob</code> 对象的字节数组的长度，则将其缩短为该数组的长度。

@param pos 此 <code>SerialBlob</code> 对象中要复制的第一个字节的顺序位置；编号从 <code>1</code> 开始；不得小于 <code>1</code> 并且必须小于或等于此 <code>SerialBlob</code> 对象的长度
@param length 要复制的字节数
@return 一个字节数组，它是此 <code>SerialBlob</code> 对象一个区域的副本，从给定位置开始并且包含给定的连续字节数
@throws SerialException 如果给定开始位置超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.sql.rowset.serial.SerialBlob.length() throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>SerialBlob</code> 对象字节数组中的字节数。

@return 一个 <code>long</code> 值，指示此 <code>SerialBlob</code> 对象的字节数组的长度（以字节为单位）
@throws SerialException 如果发生错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream javax.sql.rowset.serial.SerialBlob.getBinaryStream() throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
以输入流的形式返回此 <code>SerialBlob</code> 对象。与相关方法 <code>setBinaryStream</code> 不同的是，无论 <code>SerialBlob</code> 是使用 <code>Blob</code> 对象还是使用 <code>byte</code> 数组创建的，都将生成流。

@return 包含此 <code>SerialBlob</code> 对象字节数组的 <code>java.io.InputStream</code> 对象
@throws SerialException 如果发生错误
@see #setBinaryStream

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.sql.rowset.serial.SerialBlob.position(byte[] pattern, long start) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回在此 <code>SerialBlob</code> 对象中给定模式的字节开始的位置，搜索从指定的位置开始。	
	
@param pattern 要搜索的字节模式
@param start 此 <code>SerialBlob</code> 对象中字节的位置，搜索从该位置开始；第一个位置是 <code>1</code>；不得小于 <code>1</code> 且不得大于此 <code>SerialBlob</code> 对象的长度
@return 此 <code>SerialBlob</code> 对象中给定模式开始的位置，从指定位置开始；如果找不到模式或者给定开始位置超出限制，则返回 <code>-1</code>；返回值的位置编号从 <code>1</code> 开始
@throws SerialException 如果在序列化 blob 时发生错误
@throws SQLException 如果在从数据库访问 <code>BLOB</code> 值时发生错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.sql.rowset.serial.SerialBlob.position(Blob pattern, long start) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>SerialBlob</code> 对象中给定 <code>Blob</code> 对象开始的位置，搜索从指定位置开始。	
	
@param pattern 进行搜索的 <code>Blob</code> 对象；
@param start 在此 <code>SerialBlob</code> 对象中开始搜索的字节的位置；第一个位置是 <code>1</code>；不得小于 <code>1</code> 且不得大于此 <code>SerialBlob</code> 对象的长度
@return 在此 <code>SerialBlob</code> 对象中给定 <code>Blob</code> 对象开始的位置，从指定位置开始；如果找不到模式或者给定开始位置超出限制，则返回 <code>-1</code>；返回值的位置编号从 <code>1</code> 开始
@throws SerialException 如果在序列化 blob 时发生错误
@throws SQLException 如果在从数据库访问 <code>BLOB</code> 值时发生错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sql.rowset.serial.SerialBlob.setBytes(long pos, byte[] bytes) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定字节数组写入此 <code>Blob</code> 对象表示的 <code>BLOB</code> 值（从位置 <code>pos</code> 处开始），并返回写入的字节数。

@param pos SQL <code>BLOB</code> 值中开始写入的位置。第一个位置是 <code>1</code>；不得小于 <code>1</code> 且不得大于此 <code>SerialBlob</code> 对象的长度。
@param bytes 要写入此 <code>Blob</code> 对象所表示的 <code>BLOB</code> 值的字节数组
@return 写入的字节数
@throws SerialException 如果在访问 <code>BLOB</code> 值时发生错误；如果设置了无效的位置；如果设置了无效的偏移量值
@throws SQLException 如果从数据库访问 <code>BLOB</code> 值时发生错误
@see #getBytes

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sql.rowset.serial.SerialBlob.setBytes(long pos, byte[] bytes, int offset, int length) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将所有或部分给定的 <code>byte</code> 数组写入此 <code>Blob</code> 对象表示的 <code>BLOB</code> 值中，并返回写入的字节数。写入操作从 <code>BLOB</code> 值中的位置 <code>pos</code> 处开始；写入给定字节数组中的 <i>len</i> 个字节。

@param pos SQL <code>BLOB</code> 对象中开始写入的位置。第一个位置是 <code>1</code>；不得小于 <code>1</code> 且不得大于此 <code>SerialBlob</code> 对象的长度。
@param bytes 要写入 <code>BLOB</code> 值的字节数组
@param offset <code>byte</code> 数组中的偏移量，从该偏移量开始读取字节。第一个偏移量位置是 <code>0</code>；不得小于 <code>0</code> 且不得大于 <code>byte</code> 数组的长度
@param length 要从 <i>bytes</i> 字节数组写入 <code>BLOB</code> 值的字节数。
        
@return 写入的字节数
@throws SerialException 如果在访问 <code>BLOB</code> 值时发生错误；如果设置了无效的位置；如果设置了无效的偏移量值；如果要写入的字节数大于 <code>SerialBlob</code> 长度；如果长度和偏移量的组合值大于 Blob 缓冲区
@throws SQLException 如果在从数据库访问 <code>BLOB</code> 值时发生错误。
@see #getBytes

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.OutputStream javax.sql.rowset.serial.SerialBlob.setBinaryStream(long pos) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取用于写入此 <code>Blob</code> 对象所表示的 <code>BLOB</code> 值的流。该流从位置 <code>pos</code> 处开始。如果此 <code>SerialBlob</code> 对象是使用 <code>Blob</code> 进行实例化的，则此方法将 <code>setBinaryStream()</code> 调用转发到底层 <code>Blob</code>。如果此 <code>SerialBlob</code> 是使用 <code>byte</code> 数组进行实例化的，则抛出 <code>SerialException</code>。

@param pos <code>BLOB</code> 值中开始进行写入操作的位置
@return 可以写入数据的 <code>java.io.OutputStream</code> 对象
@throws SQLException 如果访问 <code>BLOB</code> 值时发生错误
@throws SerialException 如果 SerialBlob 不是使用支持 <code>setBinaryStream()</code> 的 <code>Blob</code> 对象进行实例化的
@see #getBinaryStream
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SerialBlob.truncate(long length) throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
截取此 <code>Blob</code> 对象表示的 <code>BLOB</code> 值，使其长度为 <code>len</code> 个字节。

@param length 此 <code>Blob</code> 对象表示的 <code>BLOB</code> 值截取后的长度（以字节为单位）
@throws SerialException 如果在访问 Blob 值时发生错误，或者要截取的长度大于 SerialBlob 长度

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream javax.sql.rowset.serial.SerialBlob.getBinaryStream(long pos, long length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个包含部分 <code>Blob</code> 值的 <code>InputStream</code> 对象，它从 pos 指定的字节开始，具有 length 个字节长度。

 @param pos 要获取的部分值的第一个字节的偏移量。<code>Blob</code> 的第一个字节位于位置 1。
 @param length 要获取的部分值的字节长度
 @return 通过其可以读取部分 <code>Blob</code> 值的 <code>InputStream</code>
 @throws SQLException 如果 pos 小于 1，pos 大于 <code>Blob</code> 的字节数，或者 pos + length 大于 <code>Blob</code> 的字节数

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SerialBlob.free() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法释放 <code>Blob</code> 对象及其占有的资源。调用 <code>free</code> 方法后，该对象将无效。如果多次调用了 <code>free</code> 方法，则对 <code>free</code> 的后续调用将被视为无操作 (no-op)。

 
 @throws SQLException 如果释放 Blob 的资源时发生错误
 @since 1.6

<!-- END DATA -->
