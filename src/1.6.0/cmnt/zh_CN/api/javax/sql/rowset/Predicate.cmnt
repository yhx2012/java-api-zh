<!-- BEGIN KEY -->
public interface javax.sql.rowset.Predicate
<!-- END KEY -->
<!-- BEGIN DATA -->
为所有 <code>FilteredRowSet</code> 对象提供框架以描述其过滤器的标准接口。
 <p>
<h3>1.0 背景</h3>
<code>Predicate</code> 接口是一个标准接口，应用程序可以实现它来定义希望应用于 <code>FilteredRowSet</code> 对象的过滤器。<code>FilteredRowSet</code> 对象使用此接口的实现并实施在 <code>evaluate</code> 方法的实现中定义的各种约束。<code>FilteredRowSet</code> 对象以双向方式实施过滤器约束：它只输出过滤器的约束中存在的行；反之，也只插入、修改或更新过滤器的约束中存在的行。
 
<h3>2.0 实现指南</h3>
要为 <code>FilteredRowSet</code> 提供 predicate，则必须实现此接口。此时，JDBC RowSet Implementations (JSR-114) 不指定任何标准过滤器定义。通过为要使用 <code>FilteredRowSet</code> 接口的参考实现和供应商实现来定义和部署的过滤器范围指定一个标准的方法与机制，此接口允许形成一个应用程序驱动的 <code>Predicate</code> 的灵活实现。
 <p>
示例实现如下所示：
 <pre>
 <code>
    public class Range implements Predicate {

       private Object lo[];
       private Object hi[];
       private int idx[];

       public Range(Object[] lo, Object[] hi, int[] idx) {
          this.lo = lo;
          this.hi = hi;
          this.idx = idx;
       }

      public boolean evaluate(RowSet rs) {
          CachedRowSet crs = (CachedRowSet)rs;
          boolean bool1,bool2;           
       
          // Check the present row determine if it lies
          // within the filtering criteria. 
      
          for (int i = 0; i &lt; idx.length; i++) {
        
	        if ((rs.getObject(idx[i]) &gt;= lo[i]) &amp;&amp; 
                  (rs.getObject(idx[i]) &gt;= hi[i]) { 
	            bool1 = true; // within filter constraints
          } else {
            bool2 = true; // outside of filter constraints             
          } 
      }
      
      if (bool2) {
return false;
      } else {
return true;
      }
  }          
 </code>
 </pre>
 <P>
上述示例实现一个简单的范围 predicate。注意，实现应该（但不是必须）提供基于 <code>String</code> 和整数索引的构造方法，供同时使用两种列标识约定的 JDBC RowSet Implementation 应用程序使用。

@author Jonathan Bruce, Amit Handa

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sql.rowset.Predicate.evaluate(RowSet rs)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法通常称为 <code>FilteredRowSet</code> 对象内部方法（非公共），它控制 <code>RowSet</code> 对象的指针从一行移动到下一行。此外，如果此内部方法将指针移动到一个已删除的行上，则其将继续移动指针，直到找到一个有效行为止。 

@return 如果在过滤器中存在更多行，则返回 <code>true</code>；否则返回 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sql.rowset.Predicate.evaluate(Object value, int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>FilteredRowSet</code> 对象调用此方法来检查值是否位于使用 <code>setFilter()</code> 方法设置的过滤标准（或标准，如果存在多个约束）中。
 <P>
向 <code>FilteredRowSet</code> 实例插入新行时，<code>FilteredRowSet</code> 对象将在内部使用此方法。

@param value 一个 <code>Object</code> 值，需要检查其是否可以为 <code>FilterRowSet</code> 对象的一部分。
@param column 一个 <code>int</code> 对象，必须与此 <code>RowSet</code> 对象中列的 SQL 索引相匹配。初始化 <code>Predicate</code> 时，此值必须已作为要过滤的列之一传递给 <code>Predicate</code>
@return 如果行值位于过滤器中，则返回 <code>true</code>；否则返回 <code>false</code>
@throws SQLException 如果列不是过滤标准的一部分

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sql.rowset.Predicate.evaluate(Object value, String columnName) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>FilteredRowSet</code> 对象调用此方法来检查值是否位于使用 setFilter 方法设置的过滤标准中。
 <P>
向 <code>FilteredRowSet</code> 实例插入新行时，<code>FilteredRowSet</code> 对象将在内部使用此方法。

@param value 一个 <code>Object</code> 值，需要检查其是否可以为 <code>FilterRowSet</code> 对象的一部分。

@param columnName 一个 <code>String</code> 对象，必须与此 <code>RowSet</code> 中列的 SQL 名称相匹配（忽略大小写）。初始化 <code>Predicate</code> 时，此值必须作为要过滤的列之一传递给 <code>Predicate</code>。

@return 如果值位于过滤器中，则返回 <code>true</code>；否则，返回 <code>false</code>。
 
@throws SQLException 如果列不是过滤标准的一部分

<!-- END DATA -->
