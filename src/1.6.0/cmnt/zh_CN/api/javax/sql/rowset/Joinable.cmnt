<!-- BEGIN KEY -->
public interface javax.sql.rowset.Joinable
<!-- END KEY -->
<!-- BEGIN DATA -->
<h3>1.0 背景</h3>
<code>Joinable</code> 接口提供了用于获取和设置匹配列的各种方法，匹配列是形成通过将 <code>RowSet</code> 对象添加到 <code>JoinRowSet</code> 对象所形成的 SQL <code>JOIN</code> 的基础。
 <P>
任何标准 <code>RowSet</code> 实现都<b>可以</b>实现 <code>Joinable</code> 接口，以便能够被添加到 <code>JoinRowSet</code> 对象中。实现此接口使 <code>RowSet</code> 对象能够使用各种 <code>Joinable</code> 方法，这些方法可设置、检索和获取有关匹配列的信息。应用程序可以将尚未实现 <code>Joinable</code> 接口的 <code>RowSet</code> 对象添加到 <code>JoinRowSet</code> 对象中，但是这样做必须使用一个同时带有 <code>RowSet</code> 对象和匹配列（或者 <code>RowSet</code> 对象数组和匹配列数组）的 <code>JoinRowSet.addRowSet</code> 方法。 
 <P>
要获取访问 <code>Joinable</code> 接口中的方法，<code>RowSet</code> 对象至少要实现 5 个标准 <code>RowSet</code> 接口中的一个并且要实现 <code>Joinable</code> 接口。另外，多数 <code>RowSet</code> 对象扩展了 <code>BaseRowSet</code> 类。例如：
 <pre>
     class MyRowSetImpl extends BaseRowSet implements CachedRowSet, Joinable {
         :
         :
     }
 </pre>
 <P>
<h3>2.0 使用指南</h3>
 <P>
<code>Joinable</code> 接口中的方法允许 <code>RowSet</code> 对象设置匹配列、获取匹配列或取消设置匹配列，匹配列是 SQL <code>JOIN</code> 的基础。可将实现这些方法的类的实例添加到 <code>JoinRowSet</code> 对象，以便允许建立 SQL <code>JOIN</code> 关系。
 <p>
 <pre>
     CachedRowSet crs = new MyRowSetImpl();
     crs.populate((ResultSet)rs);
     (Joinable)crs.setMatchColumnIndex(1);

     JoinRowSet jrs = new JoinRowSetImpl();
     jrs.addRowSet(crs);
 </pre>
在上例中，<i>crs</i> 是一个已经实现了 <code>Joinable</code> 接口的 <code>CachedRowSet</code> 对象。在下例中，<i>crs2</i> 没有实现 Joinable 接口，所以它必须将匹配列作为参数提供给 <code>addRowSet</code> 方法。此示例假定列 1 是匹配列。
 <PRE>
     CachedRowSet crs2 = new MyRowSetImpl();
     crs2.populate((ResultSet)rs);
     
     JoinRowSet jrs2 = new JoinRowSetImpl();
     jrs2.addRowSet(crs2, 1);
 </PRE>
 <p>
<code>JoinRowSet</code> 接口使它能够从已合并为一个表的一个或多个 <code>RowSet</code> 对象获取数据，从而避免了创建数据库连接的开销。因此理论上它非常适合于非连接 <code>RowSet</code> 对象使用。尽管如此，任何 <code>RowSet</code> 对象都<b>可以</b>实现此接口，无论它是连接的还是非连接的。注意，始终连接到其数据源的 <code>JdbcRowSet</code> 对象可以直接成为 SQL <code>JOIN</code> 的一部分，而不必先成为 <code>JoinRowSet</code> 对象的一部分。 
 <P>
<h3>3.0 管理多个匹配列</h3>
传递到 <code>setMatchColumn</code> 方法中的索引数组除了指示将用于匹配的列外，还指示要设置的匹配列数（数组的长度）。例如：
 <pre>
     int[] i = {1, 2, 4, 7}; // indicates four match columns, with column
                             // indexes 1, 2, 4, 7 participating in the JOIN.
     Joinable.setMatchColumn(i);
 </pre>
可按以下方式将后续匹配列添加到不同 <code>Joinable</code> 对象（已经实现 <code>Joinable</code> 接口的 <code>RowSet</code> 对象）。
 <pre>
     int[] w = {3, 2, 5, 3};
     Joinable2.setMatchColumn(w);
 </pre>
当应用程序向 <code>JoinRowSet</code> 对象添加两个或更多 <code>RowSet</code> 对象时，数组中索引的顺序特别重要。每个数组索引都直接映射到以前添加的 <code>RowSet</code> 对象的相应索引。如果出现重叠或间隙，则匹配列数据将被保留在添加了附加 <code>Joinable</code> RowSet 并需要关联匹配列数据的事件中。因此，应用程序可以以任意顺序设置多个匹配列，但是此顺序对 <code>SQL</code> JOIN 的结果有直接的影响。
 <p>
此断言在使用列名而不是列索引来指示匹配列时也同样适用。

@see JoinRowSet
@author  Jonathan Bruce

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.Joinable.setMatchColumn(int columnIdx) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->

将指定的列设置为此 <code>RowSet</code> 对象的匹配列。现在 <code>JoinRowSet</code> 对象可以根据匹配列添加此 <code>RowSet</code> 对象。
 <p>
子接口（如 <code>CachedRowSet</code><sup><font size=-2>TM</font></sup> 接口）定义了方法 <code>CachedRowSet.setKeyColumns</code>，该方法允许在具体列上强制执行主键语义。当 <code>CachedRowSet</code> 对象将主键列设置为匹配列时，<code>setMatchColumn(int columnIdx)</code> 方法的实现应该确保坚持关于键列的约束条件。

@param columnIdx 一个 <code>int</code> 值，标识要设置为匹配列的列索引
@throws SQLException 如果设置了无效的列索引
@see #setMatchColumn(int[])
@see #unsetMatchColumn(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.Joinable.setMatchColumn(int[] columnIdxes) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的列设置为此 <code>RowSet</code> 对象的匹配列。现在 <code>JoinRowSet</code> 对象可以根据匹配列添加此 <code>RowSet</code> 对象。

@param columnIdxes 一个 <code>int</code> 数组，标识要设置为匹配列的列索引
@throws SQLException 如果设置了无效的列索引
@see #setMatchColumn(int[])
@see #unsetMatchColumn(int[]) 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.Joinable.setMatchColumn(String columnName) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->

将指定的列设置为此 <code>RowSet</code> 对象的匹配列。现在 <code>JoinRowSet</code> 对象可以根据匹配列添加此 <code>RowSet</code> 对象。
 <p>
子接口（如 <code>CachedRowSet</code> 接口）定义方法 <code>CachedRowSet.setKeyColumns</code>，该方法允许在具体列上强制执行主键语义。当 <code>CachedRowSet</code> 对象将主键列设置为匹配列时，<code>setMatchColumn(String columnIdx)</code> 方法的实现应该确保坚持关于键列的约束条件。

@param columnName <code>String</code> 对象，提供了要设置为匹配列的列名
@throws SQLException 如果设置了无效的列名、列名为 null 或列名是空字符串
@see #unsetMatchColumn
@see #setMatchColumn(int[])

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.Joinable.setMatchColumn(java.lang.String[] columnNames) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的列设置为此 <code>RowSet</code> 对象的匹配列。现在 <code>JoinRowSet</code> 对象可以根据匹配列添加此 <code>RowSet</code> 对象。

@param columnNames <code>String</code> 对象数组，提供了要设置为匹配列的列名
@throws SQLException 如果设置了无效的列名、列名为 null 或列名是空字符串
@see #unsetMatchColumn
@see #setMatchColumn(int[])

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] javax.sql.rowset.Joinable.getMatchColumnIndexes() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->

获取使用方法 <code>setMatchColumn(int[] columnIdxes)</code> 为此 <code>RowSet</code> 对象设置的匹配列的索引。

@return <code>int</code> 数组，标识已设置为此 <code>RowSet</code> 对象匹配列的列索引
@throws SQLException 如果未设置任何匹配列
@see #setMatchColumn
@see #unsetMatchColumn

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] javax.sql.rowset.Joinable.getMatchColumnNames() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->

获取使用方法 <code>setMatchColumn(String [] columnNames)</code> 为此 <code>RowSet</code> 对象设置的匹配列的名称。

@return <code>String</code> 对象数组，提供了已设置为此 <code>RowSet</code> 对象匹配列的列名称
@throws SQLException 如果未设置任何匹配列
@see #setMatchColumn
@see #unsetMatchColumn

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.Joinable.unsetMatchColumn(int columnIdx) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->

取消将指定的列设置为此 <code>RowSet</code> 对象的匹配列。
 <P>
在指定的列上调用方法 <code>CachedRowSet.unsetKeyColumns</code> 之前，实现了 <code>Joinable</code> 接口的 <code>RowSet</code> 对象必须确保可继续强制执行与键有关的约束条件。

@param columnIdx 一个 <code>int</code> 值，标识被取消设置为匹配列的列索引
@throws SQLException 如果指定了无效的列索引或者指定的列以前未被设置为匹配列
@see #setMatchColumn 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.Joinable.unsetMatchColumn(int[] columnIdxes) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
取消将指定的列设置为此 <code>RowSet</code> 对象的匹配列。

@param columnIdxes <code>int</code> 数组，标识被取消设置为匹配列的列索引
@throws SQLException 如果指定了无效的列索引或者指定的列以前未被设置为匹配列
@see #setMatchColumn

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.Joinable.unsetMatchColumn(String columnName) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->

取消将指定的列设置为此 <code>RowSet</code> 对象的匹配列。
 <P>
在指定的列上调用方法 <code>CachedRowSet.unsetKeyColumns</code> 之前，实现了 <code>Joinable</code> 接口的 <code>RowSet</code> 对象必须确保可继续强制执行与键有关的约束条件。

@param columnName <code>String</code> 对象，提供了被取消设置为匹配列的列名
@throws SQLException 如果指定了无效的列名或者指定的列以前未被设置为匹配列
@see #setMatchColumn

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.Joinable.unsetMatchColumn(java.lang.String[] columnName) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
取消将指定的列设置为此 <code>RowSet</code> 对象的匹配列。
      
@param columnName  <code>String</code> 对象数组，提供了被取消设置为匹配列的列名
@throws SQLException 如果指定了无效的列名或者指定的列以前未被设置为匹配列
@see #setMatchColumn

<!-- END DATA -->
