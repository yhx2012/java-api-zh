<!-- BEGIN KEY -->
public class javax.sql.rowset.serial.SerialClob extends java.lang.Object implements java.sql.Clob, java.io.Serializable, java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
SQL <code>CLOB</code> 值在 Java 编程语言中的序列化映射关系。
 <P>
<code>SerialClob</code> 类提供一个根据 <code>Clob</code> 对象创建实例的构造方法。注意，在根据 <code>Clob</code> 对象构造 <tt>SerialBlob </tt>对象之前，<code>Clob</code> 对象应该已经将 SQL <code>Clob</code> 值的数据置于客户端上。SQL <code>CLOB</code> 值的数据可以在客户端上以 Unicode 字符流的形式实现。
 <P>
<code>SerialClob </code>方法可以从 <code>SerialClob </code>对象获取子字符串或者查找某种模式的字符的开头。

@author Jonathan Bruce

<!-- END DATA -->
<!-- BEGIN KEY -->
private char[] javax.sql.rowset.serial.SerialClob.buf
<!-- END KEY -->
<!-- BEGIN DATA -->
一个序列化字符数组，包含此 <code>SerialClob</code> 对象所表示的 SQL <code>CLOB</code> 值的数据。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.sql.Clob javax.sql.rowset.serial.SerialClob.clob
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 Clob 初始化 SerialClob 时内部 Clob 表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
private long javax.sql.rowset.serial.SerialClob.len
<!-- END KEY -->
<!-- BEGIN DATA -->
此 <code>SerialClob</code> 对象内部字符数组的长度（以字符为单位）。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private long javax.sql.rowset.serial.SerialClob.origLen
<!-- END KEY -->
<!-- BEGIN DATA -->
此 <code>SerialClob</code> 对象内部字符数组的原始长度（以字符为单位）。
 
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sql.rowset.serial.SerialClob(char[] ch) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
按照给定 <code>char</code> 数组的序列化形式构造一个 <code>SerialClob</code> 对象。
 <p>
新的 <code>SerialClob</code> 对象使用 <code>char</code> 数组中的数据进行初始化，因此允许未连接 <code>RowSet</code> 对象无需接触数据源即可建立序列化的 <code>Clob</code> 对象。

@param ch 表示要序列化的 <code>Clob</code> 对象的 char 数组
@throws SerialException 如果在序列化期间发生错误
@throws SQLException 如果发生 SQL 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sql.rowset.serial.SerialClob(Clob clob) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
按照给定 <code>Clob</code> 对象的序列化形式构造一个 <code>SerialClob</code> 对象。
 <P>
新的 <code>SerialClob</code> 对象使用 <code>Clob</code> 对象中的数据进行初始化；因此，<code>Clob</code> 对象应该预先从数据库将 SQL <code>CLOB</code> 值的数据置于客户端上。否则，新 <code>SerialClob</code> 对象将不包含任何数据。
 <p>
注：提供给此构造方法的 <code>Clob</code> 对象不能对 <code>Clob.getCharacterStream()</code> 和 <code>Clob.getAsciiStream</code> 方法返回 <code>null</code>。此 <code>SerialClob</code> 构造方法不能在此实例中序列化 <code>Clob</code> 对象，将抛出 <code>SQLException</code> 对象。

@param  clob 要用来构造此 <code>SerialClob</code> 对象的 <code>Clob</code> 对象；不能为 null
@throws SerialException 如果在序列化期间发生错误
@throws SQLException 如果在捕获 CLOB 期间发生 SQL 错误；如果 <code>Clob</code> 对象为 null；如果对 <code>Clob</code> 调用 <code>Clob.getCharacterStream()</code> 和 <code>Clob.getAsciiStream()</code> 方法时都返回 null
@see java.sql.Clob

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.sql.rowset.serial.SerialClob.length() throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>SerialClob</code> 对象字节数组中的字节数。 

@return 一个 <code>long</code> 值，指示此 <code>SerialClob</code> 对象的字节数组的长度（以字节为单位）
@throws SerialException 如果发生错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Reader javax.sql.rowset.serial.SerialClob.getCharacterStream() throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 Unicode 字符流的形式返回此 <code>SerialClob</code> 对象的数据。与相关方法 <code>getAsciiStream</code> 不同的是，无论 <code>SerialClob</code> 对象是使用 <code>Clob</code> 对象还是使用 <code>char</code> 数组创建，都将生成流。

@return 包含此 <code>SerialClob</code> 对象数据的 <code>java.io.Reader</code> 对象
@throws SerialException 如果发生错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream javax.sql.rowset.serial.SerialClob.getAsciiStream() throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 ascii 流的形式获取此 <code>SerialClob</code> 对象指定的 <code>CLOB</code> 值。如果此 <code>SerialClob</code> 对象是使用 <code>Clob</code> 对象实例化的，则此方法将 <code>getAsciiStream</code> 调用转发到底层 <code>Clob</code>。如果此 <code>SerialClob</code> 是使用 <code>char</code> 数组实例化的，则抛出 <code>SerialException</code>。

@return 包含此 <code>SerialClob</code> 对象数据的 <code>java.io.InputStream</code> 对象
@throws SerialException 如果此 <code>SerialClob</code> 对象不是使用 <code>Clob</code> 对象实例化的
@throws SQLException 如果在访问用于创建此 <code>SerialClob</code> 对象的 <code>Clob</code> 对象表示的 <code>CLOB</code> 值时发生错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sql.rowset.serial.SerialClob.getSubString(long pos, int length) throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含在此 <code>SerialClob</code> 对象中的子字符串的副本，从给定位置开始，后跟指定字符数。

@param pos 子字符串中要复制的第一个字符的位置；<code>SerialClob</code> 对象的第一个字符位于位置 <code>1</code>；不得小于 <code>1</code>，并且开始位置与子字符串的长度之和必须小于此 <code>SerialClob</code> 对象的长度
@param length 子字符串中要返回的字符数；不得大于此 <code>SerialClob</code> 对象的长度，并且开始位置与子字符串的长度之和必须小于此 <code>SerialClob</code> 对象的长度
@return 包含此 <code>SerialClob</code> 对象的子字符串的 <code>String</code> 对象，从给定位置开始，包含指定的连续字符数
@throws SerialException 如果两个参数中的任意一个超出限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.sql.rowset.serial.SerialClob.position(String searchStr, long start) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>SerialClob</code> 对象中给定 <code>String</code> 对象开始的位置，搜索从指定位置开始。如果未找到该模式，则此方法返回 <code>-1</code>。

@param searchStr 要搜索的 <code>String</code> 对象
@param start 此 <code>SerialClob</code> 对象中搜索开始的位置；第一个位置是 <code>1</code>；不得小于 <code>1</code> 且不得大于此 <code>SerialClob</code> 对象的长度
@return 给定 <code>String</code> 对象开始的位置，从指定位置开始搜索；如果未找到给定的 <code>String</code> 对象或者开始位置超出限制，则返回 <code>-1</code>；返回值的位置编号从 <code>1</code> 开始
@throws SerialException 如果在查找 String 签名时发生错误
@throws SQLException 如果从数据库访问 Blob 值时发生错误          

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.sql.rowset.serial.SerialClob.position(Clob searchStr, long start) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>SerialClob</code> 对象中给定 <code>Clob</code> 签名开始的位置，搜索从指定位置开始。如果未找到该模式，则此方法返回 <code>-1</code>。

@param searchStr 要搜索的 <code>Clob</code> 对象
@param start 此 <code>SerialClob</code> 对象中开始搜索的位置；第一个位置是 <code>1</code>；不得小于 <code>1</code> 且不得大于此 <code>SerialClob</code> 对象的长度
@return 此 <code>SerialClob</code> 对象中的位置，给定的 <code>Clob</code> 对象从该位置开始，位于指定开始位置或该位置之后
@throws SerialException 如果在查找 Clob 签名时发生错误
@throws SQLException 如果在从数据库访问 Blob 值时发生错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sql.rowset.serial.SerialClob.setString(long pos, String str) throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
在位置 <code>pos</code> 处将给定 Java <code>String</code> 写入此 <code>SerialClob</code> 对象表示的 <code>CLOB</code> 值中。

@param pos 开始写入此 <code>SerialClob</code> 对象所表示的 <code>CLOB</code> 值的位置；第一个位置是 <code>1</code>；不得小于 <code>1</code> 且不得大于此 <code>SerialClob</code> 对象的长度
@param str 要写入此 <code>SerialClob</code> 对象所表示的 <code>CLOB</code> 值的字符串
@return 写入的字符数
@throws SerialException 如果在访问 <code>CLOB</code> 值时发生错误；如果设置了无效的位置；如果设置了无效的偏移量值；如果要写入的字节数大于 <code>SerialClob</code> 长度；如果长度与偏移量的组合值大于 Clob 缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sql.rowset.serial.SerialClob.setString(long pos, String str, int offset, int length) throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>str</code> 的 <code>len</code> 个字符写入此 <code>Clob</code> 表示的 <code>CLOB</code> 值中，从字符 <code>offset</code> 开始。

@param pos 开始写入此 <code>SerialClob</code> 对象所表示 <code>CLOB</code> 值的位置；第一个位置是 <code>1</code>；不得小于 <code>1</code> 且不得大于此 <code>SerialClob</code> 对象的长度
@param str 要写入此 <code>Clob</code> 对象所表示 <code>CLOB</code> 值的字符串
@param offset <code>str</code> 中开始读取要写入的字符的偏移量
@param length 要写入的字符数
@return 写入的字符数
@throws SerialException 如果在访问 <code>CLOB</code> 值时发生错误；如果设置了无效的位置；如果设置了无效的偏移量值；如果要写入的字节数大于 <code>SerialClob</code> 长度；如果长度与偏移量的组合值大于 Clob 缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.OutputStream javax.sql.rowset.serial.SerialClob.setAsciiStream(long pos) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取用于将 Ascii 字符写入此 <code>SerialClob</code> 对象所表示的 <code>Clob</code> 值的流，从位置 <code>pos</code> 处开始。如果此 <code>SerialClob</code> 对象是使用 <code>Clob</code> 对象实例化的，则此方法将 <code>getAsciiStream</code> 调用转发到底层 <code>Clob</code>。如果此 <code>SerialClob</code> 是使用 <code>char</code> 数组实例化的，则抛出 <code>SerialException</code>。

@param pos 开始写入此 <code>CLOB</code> 对象的位置
@return 可写入 ASCII 编码字符的流
@throws SerialException 如果 SerialClob 不是使用支持 <code>setAsciiStream</code> 的 Clob 对象实例化的
@throws SQLException 如果在访问 <code>CLOB</code> 值时发生错误
@see #getAsciiStream

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Writer javax.sql.rowset.serial.SerialClob.setCharacterStream(long pos) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取用于将 Unicode 字符流写入此 <code>SerialClob</code> 对象所表示的 <code>CLOB</code> 值（位置 <code>pos</code> 处）的流。如果此 <code>SerialClob</code> 对象是使用 <code>Clob</code> 对象实例化的，则此方法将 <code>setCharacterStream()</code> 调用转发到底层 <code>Clob</code>。如果此 <code>SerialClob</code> 是使用 <code>char</code> 数组实例化的，则抛出 <code>SerialException</code>。

@param  pos 开始写入 <code>CLOB</code> 值中的位置

@return 可写入 Unicode 编码字符的流
@throws SerialException 如果 SerialClob 不是使用支持 <code>setCharacterStream</code> 的 Clob 对象实例化的
@throws SQLException 如果在访问 <code>CLOB</code> 值时发生错误
@see #getCharacterStream

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SerialClob.truncate(long length) throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
截取此 <code>SerialClob</code> 对象所表示的 <code>CLOB</code> 值，使其长度为 <code>len</code> 个字符。 
 <p>
将 <code>SerialClob</code> 对象截取至长度 0 相当于清除其内容。

@param length <code>CLOB</code> 值应被截取的字节长度
@throws SQLException 如果访问 <code>CLOB</code> 值时发生错误

<!-- END DATA -->
