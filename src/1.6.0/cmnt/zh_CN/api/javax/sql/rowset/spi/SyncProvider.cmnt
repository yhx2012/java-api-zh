<!-- BEGIN KEY -->
public abstract class javax.sql.rowset.spi.SyncProvider extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
为非连接 <code>RowSet</code> 对象提供 reader/writer 功能的同步机制。<code>SyncProvider</code> 实现是一个扩展了 <code>SyncProvider</code> 抽象类的类。
 <P>
<code>SyncProvider</code> 实现由一个唯一 ID 标识，该 ID 即其完全限定类名称。此名称必须向 <code>SyncFactory</code> SPI 注册，这样才能使该实现可用于所有的 <code>RowSet</code> 实现。参考实现中的工厂机制使用此名称来实例化该实现，然后该实现可以通过其 reader（<code>javax.sql.RowSetReader</code> 对象）和 writer（<code>javax.sql.RowSetWriter</code> 对象）提供一个 <code>RowSet</code> 对象。
 <P>
Jdbc <code>RowSet</code> 实现规范提供 <code>SyncProvider</code> 抽象类的两个参考实现：<code>RIOptimisticProvider</code> 和 <code>RIXMLProvider</code>。<code>RIOptimisticProvider</code> 可以使用 <code>RowSetReader</code> 对象和 <code>RowSetWriter</code> 对象设置任何 <code>RowSet</code> 实现。但是，只有 <code>RIXMLProvider</code> 实现可以设置 <code>XmlReader</code> 对象和 <code>XmlWriter</code> 对象。<code>WebRowSet</code> 对象使用 <code>XmlReader</code> 对象以 XML 格式读取数据，然后使用该数据填充本身。它使用 <code>XmlWriter</code> 对象以 XML 格式将本身写入到流或 <code>java.io.Writer</code> 对象。 
 <P>
<h3>1.0 实现的命名约定</h3>
作为命名 <code>SyncProvider</code> 实现的指南，应注意以下事项：
 <UL>
<li><code>SyncProvider</code> 实现的名称是其完全限定类名称。
<li>建议供应商在名为 <code>providers</code> 的包中提供 <code>SyncProvider</code> 实现。
 </UL>
 <p>
例如，如果名为 Fred, Inc. 的供应商提供了 <code>SyncProvider</code> 实现，则可能拥有以下内容：
 <PRE>
     Vendor name:  Fred, Inc.     
     Domain name of vendor:  com.fred
     Package name:  com.fred.providers
     SyncProvider implementation class name:  HighAvailabilityProvider

     Fully qualified class name of SyncProvider implementation:
                        com.fred.providers.HighAvailabilityProvider 
 </PRE>
 <P>
以下代码行使用完全限定名称向 <code>SyncFactory</code> 静态实例注册此实现。
 <PRE>
     SyncFactory.registerProvider(
                          &quot;com.fred.providers.HighAvailabilityProvider&quot;);
 </PRE>
 <P>
通过参考实现提供的默认 <code>SyncProvider</code> 对象使用以下名称：
 <pre>
     com.sun.rowset.providers.RIOptimisticProvider 
 </pre>
 <p>
供应商可以通过发送电子邮件到 jdbc@sun.com 向 Sun Microsystems 公司注册 <code>SyncProvider</code> 实现类名称。Sun 将维护列出可用 <code>SyncProvider</code> 实现的数据库，以便与兼容 <code>RowSet</code> 实现一起使用。此数据库将类似于已维护列出可用 JDBC 驱动程序的数据库。
 <P>
有关如何实现一个新的 <code>SyncProvider</code> 实现的附加指南，供应商应参考参考实现同步提供者。
 
<h3>2.0 <code>RowSet</code> 对象如何获取其提供者</h3>
 
非连接 <code>Rowset</code> 对象可以使用以下两种方法之一获取对 <code>SyncProvider</code> 对象的访问：
 <UL>
<LI>使用构造方法<BR>
      <PRE>
       CachedRowSet crs = new CachedRowSet(
                  &quot;com.fred.providers.HighAvailabilitySyncProvider&quot;); 
      </PRE>
<LI>使用 <code>setSyncProvider</code> 方法
      <PRE>
       CachedRowSet crs = new CachedRowSet(); 
       crs.setSyncProvider(&quot;com.fred.providers.HighAvailabilitySyncProvider&quot;); 
      </PRE>

 </UL>
 <p> 
默认情况下，<code>RowSet</code> 同步提供者的参考实现总是可用于 Java 平台。如果没有正确地注册任何其他可插入的同步提供者，则 <code>SyncFactory</code> 将自动生成一个默认 <code>SyncProvider</code> 参考实现的实例。这样，在前述的代码片段中，如果没有任何名为 <code>com.fred.providers.HighAvailabilitySyncProvider</code> 的实现已向 <code>SyncFactory</code> 实例注册，则 <i>crs</i> 将被分配一个参考实现中的默认提供者，它是 <code>com.sun.rowset.providers.RIOptimisticProvider</code>。 
 <p>
<h3>3.0 冲突和同步问题</h3>
如果非连接 <code>RowSet</code> 对象和数据源之间的更新与初始查询或底层数据源约束发生冲突，则这将导致所有非连接 <code>RowSet</code> 实现及其指派的 <code>SyncProvider</code> 实现的行为不明确。不定义此类冲突发生时的行为给 <code>SyncProvider</code> 实现提供更大的灵活性，使它能自己决定如何反应。
 <p>
<code>SyncProvider</code> 实现可以选择实现特定的处理程序来处理查询冲突的子集。但是，如果 <code>SyncProvider</code> 实现没有处理原始查询冲突或更一般的数据源约束冲突，则所有的 <code>SyncProvider</code> 对象必须抛出 <code>SyncProviderException</code>。
 <p>
<h3>4.0 可更新的 SQL VIEW</h3>
能够从 SQL 查询（最初从 SQL <code>VIEW</code> 形成）填充任何非连接或连接的 <code>RowSet</code> 对象。虽然在许多情况下能够对底层视图执行更新，但是此类更新需要附加的元数据，并且该数据可能不同。<code>SyncProvider</code> 类提供两个常量来指示实现是否支持更新 SQL <code>VIEW</code>。
 <ul>
<li><code><b>NONUPDATABLE_VIEW_SYNC</b></code> - 指示将 SQL <code>VIEW</code> 作为 <code>RowSet</code> 对象的数据底层源的情况下，<code>SyncProvider</code> 实现不支持与它的同步。
<li><code><b>UPDATABLE_VIEW_SYNC</b></code> - 指示将 SQL <code>VIEW</code> 作为数据底层源的情况下，<code>SyncProvider</code> 实现支持与它的同步。
 </ul>
 <P>
如果使用取自 SQL <code>VIEW</code> 的数据填充 <code>RowSet</code> 对象，则默认情况是它不可更新。
 <P>
<h3>5.0 <code>SyncProvider</code> 常量</h3>
<code>SyncProvider</code> 类提供三个常量集，用作返回值或 <code>SyncProvider</code> 方法的参数。可以实现 <code>SyncProvider</code> 对象来使用不同的关心程度执行 <code>RowSet</code> 对象与其底层数据源之间的同步。第一组常量指示如何处理同步。例如，<code>GRADE_NONE</code> 指示 <code>SyncProvider</code> 对象将不会注意查看哪些数据有用，只是将 <code>RowSet</code> 数据写入数据源。<code>GRADE_MODIFIED_AT_COMMIT</code> 指示提供者只检查修改数据的有效性。其他等级检查所有数据的有效性，或者在修改或加载数据时设置锁定。
 <OL>
<LI>指示 <code>SyncProvider</code> 对象的同步等级的常量
   <UL>
    <LI>SyncProvider.GRADE_NONE
    <LI>SyncProvider.GRADE_MODIFIED_AT_COMMIT
    <LI>SyncProvider.GRADE_CHECK_ALL_AT_COMMIT
    <LI>SyncProvider.GRADE_LOCK_WHEN_MODIFIED
    <LI>SyncProvider.GRADE_LOCK_WHEN_LOADED
   </UL>
<LI>指示在数据源上设置何种锁定的常量
   <UL> 
     <LI>SyncProvider.DATASOURCE_NO_LOCK
     <LI>SyncProvider.DATASOURCE_ROW_LOCK
     <LI>SyncProvider.DATASOURCE_TABLE_LOCK
     <LI>SyncProvider.DATASOURCE_DB_LOCK
   </UL> 
<LI>指示 <code>SyncProvider</code> 对象是否可以对 SQL <code>VIEW</code> 执行更新的常量<BR>在前述的章节 (4.0) 中已对这些常量进行了解释。
   <UL>
     <LI>SyncProvider.UPDATABLE_VIEW_SYNC
     <LI>SyncProvider.NONUPDATABLE_VIEW_SYNC
   </UL>
 </OL>

@author Jonathan Bruce
@see javax.sql.rowset.spi.SyncFactory
@see javax.sql.rowset.spi.SyncFactoryException

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.sql.rowset.spi.SyncProvider.GRADE_NONE
<!-- END KEY -->
<!-- BEGIN DATA -->
指示没有提供与原始数据源的同步。返回此等级的 <code>SyncProvider</code> 实现仅尝试将 <code>RowSet</code> 对象中的更新写入底层数据源，而不检查任何数据的有效性。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.sql.rowset.spi.SyncProvider.GRADE_CHECK_MODIFIED_AT_COMMIT
<!-- END KEY -->
<!-- BEGIN DATA -->
指示关于原始数据源的低级别乐观同步等级。

返回此等级的 <code>SyncProvider</code> 实现只检查已经更改的行。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.sql.rowset.spi.SyncProvider.GRADE_CHECK_ALL_AT_COMMIT
<!-- END KEY -->
<!-- BEGIN DATA -->
指示关于原始数据源的高级别乐观同步等级。

返回此等级的 <code>SyncProvider</code> 实现将检查所有的行，包括没有更改的行。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.sql.rowset.spi.SyncProvider.GRADE_LOCK_WHEN_MODIFIED
<!-- END KEY -->
<!-- BEGIN DATA -->
指示关于原始数据源的悲观同步等级。

返回此等级的 <code>SyncProvider</code> 实现将锁定原始数据源中的行。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.sql.rowset.spi.SyncProvider.GRADE_LOCK_WHEN_LOADED
<!-- END KEY -->
<!-- BEGIN DATA -->
指示关于原始数据源的最悲观同步等级。返回此等级的 <code>SyncProvider</code> 实现将锁定用于填充 <code>RowSet</code> 对象的原始语句所影响的整个视图和/或表。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.sql.rowset.spi.SyncProvider.DATASOURCE_NO_LOCK
<!-- END KEY -->
<!-- BEGIN DATA -->
指示在原始数据源上不保持任何锁定。如果 <code>RowSet</code> 对象没有其他指示，则这是所有 <code>SyncProvider</code> 实现的默认锁定设置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.sql.rowset.spi.SyncProvider.DATASOURCE_ROW_LOCK
<!-- END KEY -->
<!-- BEGIN DATA -->
指示锁定原始 SQL 语句涉及的行，该语句用于填充正在使用此 <code>SyncProvider</code> 对象的 <code>RowSet</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.sql.rowset.spi.SyncProvider.DATASOURCE_TABLE_LOCK
<!-- END KEY -->
<!-- BEGIN DATA -->
指示锁定原始 SQL 语句涉及的所有表，该语句用于填充正在使用此 <code>SyncProvider</code> 对象的 <code>RowSet</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.sql.rowset.spi.SyncProvider.DATASOURCE_DB_LOCK
<!-- END KEY -->
<!-- BEGIN DATA -->
指示锁定整个数据源，该数据源是正在使用此 <code>SyncProvider</code> 对象的 <code>RowSet</code> 对象的数据源。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.sql.rowset.spi.SyncProvider.UPDATABLE_VIEW_SYNC
<!-- END KEY -->
<!-- BEGIN DATA -->
指示 <code>SyncProvider</code> 实现支持 <code>RowSet</code> 对象和用于填充它的 SQL <code>VIEW</code> 之间的同步。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.sql.rowset.spi.SyncProvider.NONUPDATABLE_VIEW_SYNC
<!-- END KEY -->
<!-- BEGIN DATA -->
指示 <code>SyncProvider</code> 实现<B>不</B>支持 <code>RowSet</code> 对象和用于填充它的 SQL <code>VIEW</code> 之间的同步。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sql.rowset.spi.SyncProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建默认的 <code>SyncProvider</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String javax.sql.rowset.spi.SyncProvider.getProviderID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>SyncProvider</code> 对象的唯一标识符。 
 
@return 具有此 <code>SyncProvider</code> 对象的完全限定类名的 <code>String</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.sql.RowSetReader javax.sql.rowset.spi.SyncProvider.getRowSetReader()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>javax.sql.RowSetReader</code> 对象，它可以用于填充带有数据的 <code>RowSet</code> 对象。
 
@return  <code>javax.sql.RowSetReader</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.sql.RowSetWriter javax.sql.rowset.spi.SyncProvider.getRowSetWriter()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>javax.sql.RowSetWriter</code> 对象，它可以用于将 <code>RowSet</code> 对象的数据写回底层数据源。
 
@return  <code>javax.sql.RowSetWriter</code> 对象 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.sql.rowset.spi.SyncProvider.getProviderGrade()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个常量，它指示 <code>RowSet</code> 对象希望从此 <code>SyncProvider</code> 对象获得的同步等级。

@return 一个 int，它是以下常量之一：SyncProvider.GRADE_NONE、SyncProvider.GRADE_CHECK_MODIFIED_AT_COMMIT、SyncProvider.GRADE_CHECK_ALL_AT_COMMIT、SyncProvider.GRADE_LOCK_WHEN_MODIFIED、SyncProvider.GRADE_LOCK_WHEN_LOADED

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.sql.rowset.spi.SyncProvider.setDataSourceLock(int datasource_lock) throws javax.sql.rowset.spi.SyncProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->
按照 <i>datasource_lock</i> 指示的级别在底层数据源上设置锁定。这应导致 <code>SyncProvider</code> 为能成功同步而调整其行为，即增加或减少其提供的乐观级别。

@param datasource_lock 以下常量之一，它指示所需数据源锁定的严重性级别：
 <pre>
           SyncProvider.DATASOURCE_NO_LOCK,
           SyncProvider.DATASOURCE_ROW_LOCK,
           SyncProvider.DATASOURCE_TABLE_LOCK,
           SyncProvider.DATASOURCE_DB_LOCK,          
 </pre>
@throws SyncProviderException 如果设置不支持的数据源锁定级别。
@see #getDataSourceLock

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.sql.rowset.spi.SyncProvider.getDataSourceLock() throws javax.sql.rowset.spi.SyncProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在此 <code>SyncProvider</code> 实现中活动的当前数据源锁定严重性级别。

@return 一个常量，它指示在此 <code>SyncProvider</code> 对象中活动的数据源锁定的当前级别；是以下常量之一：
 <pre>
           SyncProvider.DATASOURCE_NO_LOCK,
           SyncProvider.DATASOURCE_ROW_LOCK,
           SyncProvider.DATASOURCE_TABLE_LOCK,
           SyncProvider.DATASOURCE_DB_LOCK     
 </pre>
@throws SyncProviderExceptiom 如果在确定数据源锁定级别时发生错误。
@see #setDataSourceLock     

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.sql.rowset.spi.SyncProvider.supportsUpdatableView()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>SyncProvider</code> 实现是否可以执行 <code>RowSet</code> 对象和数据源（<code>RowSet</code> 从中获取其数据）中的 SQL <code>VIEW</code> 之间的同步。

@return 一个 <code>int</code>，表示此 <code>SyncProvider</code> 对象是否支持更新 SQL <code>VIEW</code>；它是以下常量之一：SyncProvider.UPDATABLE_VIEW_SYNC、SyncProvider.NONUPDATABLE_VIEW_SYNC

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String javax.sql.rowset.spi.SyncProvider.getVersion()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>SyncProvider</code> 实例的发行版本。
 
@return 一个 <code>String</code>，它详述了 <code>SyncProvider</code> 实现的发行版本

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String javax.sql.rowset.spi.SyncProvider.getVendor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>SyncProvider</code> 实例的供应商名称
     
@return 一个 <code>String</code>，它详述了此 <code>SyncProvider</code> 实现的供应商名称

<!-- END DATA -->
