<!-- BEGIN KEY -->
javax.sql.rowset
<!-- END KEY -->
<!-- BEGIN DATA -->

<!-- Description clause -->
JDBC <code>RowSet</code> 实现的标准接口和基类。此包包含了标准 <code>RowSet</code> 实现可实现或扩展的各种接口和类。


<h2>目录</h2>
<ul>
<li><a href="#pkgspec">1.0 包规范</a>
<li><a href="#stdrowset">2.0 标准 RowSet 定义</a>
<li><a href="#impl">3.0 实现者指南</a>
<li><a href="#relspec">4.0 相关规范</a>
<li><a href="#reldocs">5.0 相关文档</a>
</ul>

<h3><a name="pkgspec">1.0 包规范</a></h3>
此包指定了 5 个标准的 JDBC <code>RowSet</code> 接口。所有这 5 个接口都扩展了 JDBC 3.0 规范中描述的 <a href="../RowSet.html">RowSet</a> 接口。可以预计随着此项技术的成熟，会出现其他更专用 JDBC <code>RowSet</code> 类型的定义。以后的定义<i>应该</i> 通过继承指定为子接口，与此规范中所用的方式类似。
<p>
<i>注：</i>此包中提供的接口定义构成了所有兼容 JDBC <code>RowSet</code> 实现的基础。供应商和打算提供其自己的兼容 <code>RowSet</code> 实现的高级开发人员应该特别注意在接口规范中详述的声明。 

<h3><a name="stdrowset">2.0 标准 RowSet 定义</a></h3>
<ul>
<li><a href="JdbcRowSet.html"><b><code>JdbcRowSet</code></b></a> - <tt>ResultSet</tt> 对象的包装器，使得该结果集用作 JavaBeans<sup><font size=-2>TM</font></sup> 组件成为可能。因此，<tt>JdbcRowSet</tt> 对象可以是一个 Bean，任何工具都可将其作为基于架构的组件部分来组装应用程序。<tt>JdbcRowSet</tt> 对象是连接的 <code>RowSet</code> 对象，也就是说，它<b>必须</b>使用启用 JDBC 技术的驱动程序（&ldquo;JDBC 驱动程序&rdquo;）来持续维持它与数据源的连接。此外，<code>JdbcRowSet</code> 对象提供完全可更新和可滚动的表格数据结构，这在 JDBC 3.0 规范中定义。
<p>
<li><a href="CachedRowSet.html"><b><code>CachedRowSet</code><sup><font size=-2>TM&gt;</font></sup></b></a> - <tt>CachedRowSet</tt> 对象是一个 JavaBeans<sup><font size=-2>TM</font></sup> 组件，是可滚动的、可更新的、可序列化的，并且通常是与其数据源断开连接的。<tt>CachedRowSet</tt> 对象通常包含取自结果集的多个行，但是也可包含任何取自表格式文件（如电子表格）的行。<tt>CachedRowSet</tt> 实现<b>必须</b>使用 <tt>SyncFactory</tt> 管理和获得可插入的 <code>SyncProvider</code> 对象，以便在非连接 <code>RowSet</code> 对象和原始数据源之间提供同步。通常 <code>SyncProvider</code> 实现依靠 JDBC 驱动程序来连接特定数据源。<a
href="spi/package-summary.html"><code>javax.sql.rowset.spi</code></a> 包规范中讨论了关于此机制的更多详细信息。
<p>
<li><a href="WebRowSet.html"><b><code>WebRowSet</code></b></a> - <code>WebRowSet</code> 对象是 <tt>CachedRowSet</tt> 的扩展，可以用合适的 XML 格式读取和写入 <code>RowSet</code> 对象。此类调用 <a href="spi/XmlReader.html"><code>XmlReader</code></a> 对象（<a href="../RowSetReader.html"><code>RowSetReader</code></a> 接口的扩展）来读取 XML 格式的 rowset。调用 <a href="spi/XmlWriter.html"><code>XmlWriter</code></a> 对象（<a href="../RowSetWriter.html"><code>RowSetWriter</code></a> 接口的扩展）来写入 XML 格式的 rowset。<code>SyncFactory</code> 以 <code>SyncProvider</code> 实现的形式提供 <code>WebRowSet</code> 对象所需的 reader 和 writer。为了确保使用合适的 XML，在 <a href="http://java.sun.com/xml/ns/jdbc/webrowset.xsd"><code>http://java.sun.com/xml/ns/jdbc/webrowset.xsd</code></a> 中定义并发布了标准的通用 XML 模式。
<p>   
<li><a href="FilteredRowSet.html"><b><code>FilteredRowSet</code></b></a> - <tt>FilteredRowSet</tt> 对象以编程和可扩展的方式提供过滤功能。有很多实例在 <tt>RowSet</tt> <code>object</code> 需要在其内容中提供过滤时无需放弃非连接环境，从而节省了必须创建到数据源的连接所带来的开销。从提供重量级的全部 SQL 查询能力，到可移植的组件，再到更轻量级的方法，这一需求的解决方案各有不同。<code>FilteredRowSet</code> 对象使用 <a href="Predicate.html"><code>Predicate</code></a> 接口的实现，该接口<b>可以</b>在运行时定义一个过滤器。接着，<code>FilteredRowSet</code> 对象的任务是强行为入站 (inbound) 和出站 (outbound) 读写操作设置过滤器。也就是说，可以将所有过滤器认为是双向的。未定义任何标准过滤器；但是指定了足够的机制以允许实现任何所需的过滤器。
<p>
<li><a href="JoinRowSet.html"><b><code>JoinRowSet</code></b></a> - <tt>JoinRowSet</tt> 接口描述了一种机制，根据这种机制可在两个或多个标准 <code>RowSet</code> 实现之间建立关系。可将任意数目的 <tt>RowSet</tt> 对象添加到 <tt>JoinRowSet</tt> 对象中，只要能够以 SQL <tt>JOIN</tt> 类似的方式将这些 <tt>RowSet</tt> 对象关联起来。根据定义，SQL <tt>JOIN</tt> 语句用于根据公共的属性将两个（<i>或多个</i>）关系数据库表中包含的数据组合起来。通过建立然后实施列匹配，<tt>JoinRowSet</tt> 对象可在 <tt>RowSet</tt> 实例之间建立关系，而无需触动原始数据源。     
</ul>

<h3><a name="impl">3.0 实现者指南</a></h3>
JDBC <code>RowSet</code> 实现的兼容实现<b>必须</b>遵循此规范中描述的声明。为了与 <a href="http://www.jcp.org">Java Community Process</a> 的条款保持一致，可以获得一个兼容性测试工具包（Test Compatibility Kit，TCK）的许可，以确保与规范保持兼容性。以下各段概述了一些实现标准 JDBC <code>RowSet</code> 定义的入门知识。实现者还应参考 <a
href="spi/package-summary.html">javax.sql.rowset.spi</a> 包中的<i>实现者指南</i>，以获得有关 <a href="spi/SyncProvider.html"><code>SyncProvider</code></a> 实现的指南。
<p>
<ul>
<li><b>3.1 <code>BaseRowSet</code> 类的职责</b>
<p>
兼容的 JDBC <code>RowSet</code> 实现<b>必须</b>实现此包中指定的一个或多个标准接口，并且<b>可以</b>扩展 <a href="BaseRowSet.html"><code>BaseRowSet</code></a> 抽象类。例如，<code>CachedRowSet</code> 实现必须实现 <code>CachedRowSet</code> 接口并扩展 <code>BaseRowSet</code> 抽象类。<code>BaseRowSet</code> 类提供用于构建所有 <code>RowSet</code> 实现的标准架构，无论是存在于连接环境还是非连接环境中的 <code>RowSet</code> 对象。<tt>BaseRowSet</tt> 抽象类为所有 <tt>RowSet</tt> 实现提供其基本功能，包括与 <a href="http://java.sun.com/products/javabeans">JavaBeans</a> 组件要求完全兼容的属性操纵和事件通知。例如，参考实现中提供的所有实现（包含在 <tt>com.sun.rowset</tt> 包中）都使用 <tt>BaseRowSet</tt> 作为其实现的基础。            
<P>
下表展示了 <code>BaseRowSet</code> 抽象类提供的功能。
  <blockquote>                    
    <table cellpadding="2" cellspacing="2" border="1" width="75%">
          <tbody>
            <tr>
<td valign="top"><b>功能</b><br>
              </td>
<td valign="top"><b>详细信息</b><br>
              </td>
            </tr>
            <tr>
<td valign="top">属性<br>
              </td>
<td valign="top">提供标准的 JavaBeans 属性操纵机制，允许应用程序获得和设置 <code>RowSet</code> 的命令和属性值。有关标准 <code>RowSet</code> 属性的更多信息，请参阅 <tt>javax.sql.RowSet</tt> 接口的文档（JDBC 3.0 规范中提供）。<br>
              </td>
            </tr>
            <tr>
<td valign="top">事件通知<br>
              </td>
<td valign="top">向已注册事件侦听器提供标准的 JavaBeans 事件通知。有关如何注册和处理由兼容实现所生成的标准 RowSet 事件的更多信息，请参阅 <tt>javax.sql.RowSetEvent</tt> 接口的文档（JDBC 3.0 规范中提供）。<br>
              </td>
            </tr>
            <tr>
<td valign="top">用于 RowSet 对象命令的 Setter<br>
              </td>
<td valign="top">为设置 RowSet 命令参数提供完整的设置方法集。<br>
              </td>
            </tr>
            <tr>
<td valign="top">流<br>
              </td>
<td valign="top">除了为流类型标记提供常量集外，还为流实例的存储提供了各种字段。<br>
              </td>
            </tr>
                               
      </tbody>                    
    </table>
      </blockquote>
<p>
<li><b>3.2 连接 RowSet 需求</b> 
<p>
<code>JdbcRowSet</code> 描述一种<b>必须</b>始终连接到原始数据源的 <code>RowSet</code> 对象。<code>JdbcRowSet</code> 的实现应该确保此连接是由 JDBC 驱动程序唯一提供的。此外，作为 <code>JdbcRowSet</code> 接口的实现并因此在连接环境中运行的 <code>RowSet</code> 对象不使用 <code>SyncFactory</code> 来获取 <code>RowSetReader</code> 对象或 <code>RowSetWriter</code> 对象。由于存在可更新和可滚动的底层 <code>ResultSet</code> 实现，所以它们可以安全地依靠 JDBC 驱动程序来满足其需求。
<p>

<li>
<b>3.3 非连接 RowSet 需求</b> 
<p> 
非连接 <code>RowSet</code> 对象（如 <code>CachedRowSet</code> 对象）<b>应该</b>将连接管理委托给 <code>SyncFactory</code> 所提供的 <code>SyncProvider</code> 对象。要确保完全的非连接语义，所有非连接 <code>RowSet</code> 对象<b>必须</b>确保已关闭填充 <code>RowSet</code> 对象时所建立的与数据源的原始连接，以便垃圾回收器能够恢复和释放资源。<code>SyncProvider</code> 对象确保可维护关键的 JDBC 属性，从而在需要进行同步时可重新建立到数据源的连接。因此，非连接 <code>RowSet</code> 对象应该确保在 <code>Connection</code> 对象上没有保留任何其他引用。
<p>
<li><b>3.4 RowSetMetaDataImpl 的职责</b>
<p>
<code>RowsetMetaDataImpl</code> 类是一个提供 <a href="../RowSetMetaData.html">RowSetMetaData</a> 接口实现的实用工具类，它同时为连接和非连接 <code>RowSet</code> 对象的元数据提供标准的设置方法实现。所有实现都可随意使用此标准实现，但是并不要求必须如此。
<p>
<li><b>3.5 RowSetWarning 类</b>
<p>
<code>RowSetWarning</code> 类提供了可在 <code>RowSet</code> 实现上设置的警告。与 <a href="../../../java/sql/SQLWarning.html">SQLWarning</a> 对象类似，<code>RowSetWarning</code> 对象正常链接到其方法会导致抛出警告的那些对象。所有 <code>RowSet</code> 实现<b>应该</b>确保如果生成了警告，则会发生此链接操作，还要确保通过 <code>JdbcRowSet</code> 接口或 <code>CachedRowSet</code> 接口中定义的 <code>getRowSetWarnings</code> 方法可以获得这些警告。使用某个 <code>getRowSetWarnings</code> 方法获取警告后，可在 <code>RowSetWarning</code> 上调用其方法 <code>getNextWarning</code> 来获取所有可能链接到它的警告。如果返回了某个警告，则可以在其上调用 <code>getNextWarning</code> 并一直调用下去，直到再没有其他警告为止。

<P>
<li><b>3.6 Joinable 接口</b>
<P>
<code>Joinable</code> 接口同时为连接和非连接 <code>RowSet</code> 对象提供要在 SQL <code>JOIN</code> 操作中添加到 <code>JoinRowSet</code> 对象的功能。已经实现了 <code>Joinable</code> 接口的 <code>RowSet</code> 对象可以设置匹配列、获取匹配列或取消设置匹配列。然后 <code>JoinRowSet</code> 对象可以使用 <code>RowSet</code> 对象的匹配列作为添加 <code>RowSet</code> 对象的基础。 
</ul>

<h3><a name="relspec">4.0 相关规范</a></h3>
<ul>
<li><a href="http://java.sun.com/products/jdbc">JDBC 3.0 规范</a>
<li><a href="http://www.w3.org/XML/Schema">XML Schema</a>
<li><a href="http://www.syncml.org">SyncML</a>
</ul>

<h3><a name="reldocs">5.0 相关文档</a></h3>
<ul>
<li><a href="http://developer.java.sun.com/developer/Books/JDBCTutorial/chapter5.html">JDBC RowSet 教程</a>      
</ul>

<!-- END DATA -->
