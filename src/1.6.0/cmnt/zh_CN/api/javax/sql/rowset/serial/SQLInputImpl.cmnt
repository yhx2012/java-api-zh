<!-- BEGIN KEY -->
public class javax.sql.rowset.serial.SQLInputImpl extends java.lang.Object implements java.sql.SQLInput
<!-- END KEY -->
<!-- BEGIN DATA -->
用于自定义映射用户定义类型 (UDT) 的输入流。<code>SQLInputImpl</code> 对象是一个包含值流的输入流，这些值是 UDT 的属性。
 <p>
在对具有自定义映射关系的 SQL 结构类型或不同类型调用 <code>getObject</code> 方法时，驱动程序在后台使用此类；程序员决不直接调用 <code>SQLInputImpl</code> 方法。这里提供这些方法是为了便于编写 <code>RowSet</code> 实现。
 <P>
<code>SQLInputImpl</code> 类提供一组类似于 <code>ResultSet</code> 获取方法的读取方法。这些方法可以在 <code>SQLInputImpl</code> 对象中读取值。
 <P>
方法 <code>wasNull</code> 用于确定读取的最后一个值是否是 SQL <code>NULL</code>。
<P>当用实现接口 <code>SQLData</code> 的类的对象调用方法 <code>getObject</code> 时，JDBC 驱动程序调用方法 <code>SQLData.getSQLType</code> 来确定要自定义映射的 UDT 的 SQL 类型。驱动程序创建一个 <code>SQLInputImpl</code> 实例，并用 UDT 的属性填充它。然后，驱动程序将输入流传递给 <code>SQLData.readSQL</code> 方法，该方法依次调用 <code>SQLInputImpl</code> 读取方法从输入流读取属性。
@see java.sql.SQLData

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sql.rowset.serial.SQLInputImpl(java.lang.Object[] attributes, java.util.Map<java.lang.String, java.lang.Class<?>> map) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>SQLInputImpl</code> 对象，并使用给定的属性数组和类型映射表进行初始化。如果这些属性中有某个 UDT 属性的名称存在于类型映射表条目中，则根据相应的 <code>SQLData</code> 实现映射该属性。

@param attributes <code>Object</code> 实例数组，其中每个元素都是 UDT 属性。数组中属性的顺序与它们在 UDT 定义中所定义的顺序相同。
@param map 包含零个或多个条目的 <code>java.util.Map</code> 对象，其中每个条目包含：1) 给出 UDT 完全限定名的 <code>String</code> 2) 用于定义 UDT 映射方式的 <code>SQLData</code> 实现的 <code>Class</code> 对象
@throws SQLException 如果 <code>attributes</code> 或 <code>map</code> 的值为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sql.rowset.serial.SQLInputImpl.readString() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 Java 编程语言中 <code>String</code> 的形式获取此 <code>SQLInputImpl</code> 对象中的下一个属性。
 <p>
此方法不执行类型安全检查来确定返回类型是否为期望类型；该职责已委托给 <code>SQLData</code> 实现定义的 UDT 映射。
 <p>
@return 此 <code>SQLInputImpl</code> 对象中的下一个属性；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@throws SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sql.rowset.serial.SQLInputImpl.readBoolean() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 Java 编程语言中 <code>boolean</code> 的形式获取此 <code>SQLInputImpl</code> 对象中的下一个属性。
 <p>
此方法不执行类型安全检查来确定返回类型是否为期望类型；该职责已委托给 <code>SQLData</code> 实现定义的 UDT 映射。
 <p>
@return 此 <code>SQLInputImpl</code> 对象中的下一个属性；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@throws SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte javax.sql.rowset.serial.SQLInputImpl.readByte() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 Java 编程语言中 <code>byte</code> 的形式获取此 <code>SQLInputImpl</code> 对象中的下一个属性。
 <p>
此方法不执行类型安全检查来确定返回类型是否为期望类型；该职责已委托给 <code>SQLData</code> 实现定义的 UDT 映射。
 <p>
@return 此 <code>SQLInputImpl</code> 对象中的下一个属性；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@throws SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public short javax.sql.rowset.serial.SQLInputImpl.readShort() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 Java 编程语言中 <code>short</code> 的形式获取此 <code>SQLInputImpl</code> 对象中的下一个属性。
 <P>
此方法不执行类型安全检查来确定返回类型是否为期望类型；该职责已委托给 <code>SQLData</code> 实现定义的 UDT 映射。
 <P>
@return 此 <code>SQLInputImpl</code> 对象中的下一个属性；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@throws SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sql.rowset.serial.SQLInputImpl.readInt() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 Java 编程语言中 <code>int</code> 的形式获取此 <code>SQLInputImpl</code> 对象中的下一个属性。     
 <P>
此方法不执行类型安全检查来确定返回类型是否为期望类型；该职责已委托给 <code>SQLData</code> 实现定义的 UDT 映射。
 <P>
@return 此 <code>SQLInputImpl</code> 对象中的下一个属性；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@throws SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.sql.rowset.serial.SQLInputImpl.readLong() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 Java 编程语言中 <code>long</code> 的形式获取此 <code>SQLInputImpl</code> 对象中的下一个属性。
 <P>
此方法不执行类型安全检查来确定返回类型是否为期望类型；该职责已委托给 <code>SQLData</code> 实现定义的 UDT 映射。
 <P>
@return 此 <code>SQLInputImpl</code> 对象中的下一个属性；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@throws SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.sql.rowset.serial.SQLInputImpl.readFloat() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 Java 编程语言中 <code>float</code> 的形式获取此 <code>SQLInputImpl</code> 对象中的下一个属性。
 <P>
此方法不执行类型安全检查来确定返回类型是否为期望类型；该职责已委托给 <code>SQLData</code> 实现定义的 UDT 映射。
 <P>
@return 此 <code>SQLInputImpl</code> 对象中的下一个属性；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@throws SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public double javax.sql.rowset.serial.SQLInputImpl.readDouble() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 Java 编程语言中 <code>double</code> 的形式获取此 <code>SQLInputImpl</code> 对象中的下一个属性。
 <P>
此方法不执行类型安全检查来确定返回类型是否为期望类型；该职责已委托给 <code>SQLData</code> 实现定义的 UDT 映射。
 <P>
@return 此 <code>SQLInputImpl</code> 对象中的下一个属性；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@throws SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.BigDecimal javax.sql.rowset.serial.SQLInputImpl.readBigDecimal() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>java.math.BigDecimal</code> 的形式获取此 <code>SQLInputImpl</code> 对象中的下一个属性。
 <P>
此方法不执行类型安全检查来确定返回类型是否为期望类型；该职责已委托给 <code>SQLData</code> 实现定义的 UDT 映射。
 <P>
@return 此 <code>SQLInputImpl</code> 对象中的下一个属性；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@throws SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] javax.sql.rowset.serial.SQLInputImpl.readBytes() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以字节数组的形式获取此 <code>SQLInputImpl</code> 对象中的下一个属性。
 <p>
此方法不执行类型安全检查来确定返回类型是否为期望类型；该职责已委托给 <code>SQLData</code> 实现定义的 UDT 映射。
 <P>
@return 此 <code>SQLInputImpl</code> 对象中的下一个属性；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@throws SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Date javax.sql.rowset.serial.SQLInputImpl.readDate() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>java.sql.Date</code> 对象的形式获取此 <code>SQLInputImpl</code> 中的下一个属性。
 <P>
此方法不执行类型安全检查来确定返回类型是否为期望类型；该职责已委托给 <code>SQLData</code> 实现定义的 UDT 映射。
 <P>
@return 此 <code>SQLInputImpl</code> 对象中的下一个属性；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@throws SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Time javax.sql.rowset.serial.SQLInputImpl.readTime() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>java.sql.Time</code> 对象的形式获取此 <code>SQLInputImpl</code> 对象中的下一个属性。
 <P>
此方法不执行类型安全检查来确定返回类型是否为期望类型；该职责已委托给 <code>SQLData</code> 实现实现的 UDT 映射。

@return 属性；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@throws SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Timestamp javax.sql.rowset.serial.SQLInputImpl.readTimestamp() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>java.sql.Timestamp</code> 对象的形式获取此 <code>SQLInputImpl</code> 对象中的下一个属性。

@return 属性；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@throws SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Reader javax.sql.rowset.serial.SQLInputImpl.readCharacterStream() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 Unicode 字符流的形式获取此 <code>SQLInputImpl</code> 对象中的下一个属性。
 <P>
此方法不执行类型安全检查来确定返回类型是否为期望类型；该职责已委托给 <code>SQLData</code> 实现实现的 UDT 映射。

@return 属性；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@throws SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream javax.sql.rowset.serial.SQLInputImpl.readAsciiStream() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 ASCII 字符流的形式返回此 <code>SQLInputImpl</code> 对象中的下一个属性。
 <P>
此方法不执行类型安全检查来确定返回类型是否为期望类型；该职责已委托给 <code>SQLData</code> 实现实现的 UDT 映射。

@return 属性；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@throws SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream javax.sql.rowset.serial.SQLInputImpl.readBinaryStream() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以未解释字节流的形式返回此 <code>SQLInputImpl</code> 对象中的下一个属性。
 <P>
此方法不执行类型安全检查来确定返回类型是否为期望类型；该职责已委托给 <code>SQLData</code> 实现实现的 UDT 映射。

@return 属性；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@throws SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.sql.rowset.serial.SQLInputImpl.readObject() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 Java 编程语言中 <code>Object</code> 的形式获取此 <code>SQLInputImpl</code> 对象的头部值。如果不存在自定义映射关系，则返回对象的实际类型由 SQL 类型到 Java 编程语言中类型的默认映射关系确定；如果存在自定义映射关系，则返回对象的类型由此流的类型映射确定。
 <P>
在将流传递给应用程序之前，启用 JDBC 技术的驱动程序在流中注册类型映射表。
 <P>
当流头部中的数据为 SQL <code>NULL</code> 时，此方法返回 <code>null</code>。如果数据是具有自定义映射关系的 SQL 结构类型或 distinct 类型，则此方法确定位于流头部的数据的 SQL 类型，构造适当类的对象，并对该对象调用 <code>SQLData.readSQL</code> 方法。然后，<code>readSQL</code> 方法调用适当的 <code>SQLInputImpl.readXXX</code> 方法从流获取属性值。

@return 以 Java 编程语言中 <code>Object</code> 的形式返回流头部的值；如果值为 SQL <code>NULL</code>，则返回 <code>null</code>
@exception SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Ref javax.sql.rowset.serial.SQLInputImpl.readRef() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 Java 编程语言中 <code>Ref</code> 对象的形式获取此 <code>SQLInputImpl</code> 对象的头部值。 

@return 表示位于流头部的 SQL <code>REF</code> 值的 <code>Ref</code> 对象；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@exception SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。     

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Blob javax.sql.rowset.serial.SQLInputImpl.readBlob() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 Java 编程语言中 <code>Blob</code> 对象的形式获取此 <code>SQLInputImpl</code> 对象头部的 <code>BLOB</code> 值。
 <P>
此方法不执行类型安全检查来确定返回类型是否为期望类型；该职责已委托给 <code>SQLData</code> 实现实现的 UDT 映射。

@return 表示位于此流头部的 SQL <code>BLOB</code> 值的 <code>Blob</code> 对象；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@exception SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Clob javax.sql.rowset.serial.SQLInputImpl.readClob() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 Java 编程语言中 <code>Clob</code> 对象的形式获取此 <code>SQLInputImpl</code> 对象头部的 <code>CLOB</code> 值。
 <P>    
此方法不执行类型安全检查来确定返回类型是否为期望类型；该职责已委托给 <code>SQLData</code> 实现实现的 UDT 映射。

@return 表示位于流头部的 SQL <code>CLOB</code> 值的 <code>Clob</code> 对象；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@exception SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Array javax.sql.rowset.serial.SQLInputImpl.readArray() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取 SQL <code>ARRAY</code> 值并以 Java 编程语言中 <code>Array</code> 对象的形式返回。
 <P>
此方法不执行类型安全检查来确定返回类型是否为期望类型；该职责已委托给 <code>SQLData</code> 实现实现的 UDT 映射。

@return 表示位于流头部的 SQL <code>ARRAY</code> 值的 <code>Array</code> 对象；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@exception SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sql.rowset.serial.SQLInputImpl.wasNull() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
确认从此 <code>SQLInputImpl</code> 对象读取的上一个值是否为 <code>null</code>。
 
@return 如果最近一次读取的 SQL 值为 <code>null</code>，则返回 <code>true</code>；否则返回 <code>false</code>；默认情况下它将返回 false
@throws SQLException 如果在确定上一次读取的值是否为 <code>null</code> 值时发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL javax.sql.rowset.serial.SQLInputImpl.readURL() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->

从流中读取 SQL <code>DATALINK</code> 值并以 Java 编程语言中 <code>URL</code> 对象的形式返回。
 <P>
此方法不执行类型安全检查来确定返回类型是否为期望类型；该职责已委托给 <code>SQLData</code> 实现的 UDT 映射。

@return 表示位于流头部的 SQL <code>DATALINK</code> 值的 <code>URL</code> 对象；如果值为 <code>SQL NULL</code>，则返回 <code>null</code>
@exception SQLException 如果读取位置被定位在无效位置，或者流中不存在更多值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.NClob javax.sql.rowset.serial.SQLInputImpl.readNClob() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 从流中读取 SQL <code>NCLOB</code> 值并以 Java 编程语言中 <code>Clob</code> 对象的形式返回。

 @return <code>NClob</code> 对象，表示位于流头部的 SQL <code>NCLOB</code> 值的数据；如果读取的值为 SQL <code>NULL</code>，则返回 <code>null</code>
 @exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sql.rowset.serial.SQLInputImpl.readNString() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 读取流中下一个属性并以 Java 编程语言中 <code>String</code> 的形式返回。访问 <code>NCHAR</code>、<code>NVARCHAR</code> 和 <code>LONGNVARCHAR</code> 列时使用该方法。

 @return 属性；如果值为 SQL <code>NULL</code>，则返回 <code>null</code>
 @exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLXML javax.sql.rowset.serial.SQLInputImpl.readSQLXML() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 从流中读取 SQL <code>XML</code> 值并以 Java 编程语言中 <code>SQLXML</code> 对象的形式返回。

 @return <code>SQLXML</code> 对象，表示位于流头部的 SQL <code>XML</code> 值的数据；如果读取的值为 SQL <code>NULL</code>，则返回 <code>null</code>
 @exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.RowId javax.sql.rowset.serial.SQLInputImpl.readRowId() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 从流中读取 SQL <code>ROWID</code> 值并以 Java 编程语言中 <code>RowId</code> 对象的形式返回。

 @return <code>RowId</code> 对象，表示位于流头部的 SQL <code>ROWID</code> 值的数据；如果读取的值为 SQL <code>NULL</code>，则返回 <code>null</code>
 @exception SQLException 如果发生数据库访问错误

<!-- END DATA -->