<!-- BEGIN KEY -->
public class javax.sql.rowset.serial.SerialArray extends java.lang.Object implements java.sql.Array, java.io.Serializable, java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
序列化的 <code>Array</code> 对象，它是 SQL <code>ARRAY</code> 值在 Java 编程语言中的映射关系。
 <P>
<code>SerialArray</code> 类提供一个根据 <code>Array</code> 对象创建 <code>SerialArray</code> 实例的构造方法，提供获取基本类型及其 SQL 名称的各种方法，以及复制全部或部分 <code>SerialArray</code> 对象的各种方法。
 <P>
注：要让此类正常运行，到数据源的连接必须可用，这样在需要时才能实现 SQL <code>Array</code> 对象（将其所有元素置于客户端服务器）。在这种情况下，指向数据源中数据的逻辑指针（如定位符）当前不受支持。 

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Object[] javax.sql.rowset.serial.SerialArray.elements
<!-- END KEY -->
<!-- BEGIN DATA -->
序列化数组，每个数组元素都是一个 Java 编程语言中表示 SQL <code>ARRAY</code> 值的 <code>Object</code>。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int javax.sql.rowset.serial.SerialArray.baseType
<!-- END KEY -->
<!-- BEGIN DATA -->
此 <code>SerialArray</code> 对象中 SQL 类型的元素。该类型表示为 <code>java.sql.Types</code> 类中的一个常量。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.sql.rowset.serial.SerialArray.baseTypeName
<!-- END KEY -->
<!-- BEGIN DATA -->
DBMS 将该类型名称用于此 <code>SerialArray</code> 对象所表示的 SQL <code>ARRAY</code> 值中的元素。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int javax.sql.rowset.serial.SerialArray.len
<!-- END KEY -->
<!-- BEGIN DATA -->
此 <code>SerialArray</code> 对象中的元素数，同时还是此 <code>SerialArray</code> 对象所表示的 SQL <code>ARRAY</code> 值中的元素数。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sql.rowset.serial.SerialArray(Array array, java.util.Map<java.lang.String, java.lang.Class<?>> map) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据给定 <code>Array</code> 对象构造新的 <code>SerialArray</code> 对象，当数组元素是 SQL UDT 时对每个元素的自定义映射关系使用给定的类型映射表。
 <P>
如果数组元素为 UDT 并且给定类型映射表具有针对该 UDT 的条目，则此方法执行自定义映射。自定义映射是递归的，这意味着，如果 SQL 结构类型的元素是 SQL 结构类型，而它本身又具有 SQL 结构类型的元素，则根据给定类型映射表映射每个具有自定义映射关系的结构类型。
 <P>
新 <code>SerialArray</code> 对象包含的元素与用来构建它的 <code>Array</code> 对象相同，基本类型为 SQL 类型 <code>STRUCT</code>、<code>ARRAY</code>、<code>BLOB</code>、<code>CLOB</code>、<code>DATALINK</code> 或 <code>JAVA_OBJECT</code> 时除外。在这种情况下，新 <code>SerialArray</code> 对象中的每个元素都是适当的序列化形式，即 <code>SerialStruct</code>、<code>SerialArray</code>、<code>SerialBlob</code>、<code>SerialClob</code>、<code>SerialDatalink</code> 或 <code>SerialJavaObject</code> 对象。
 <P> 
注：(1) 用来创建 <code>SerialArray</code> 对象的 <code>Array</code> 对象在被传递给构造方法之前，必须已经在客户端实现了 SQL <code>ARRAY</code> 值的数据。否则，新 <code>SerialArray</code> 对象将不包含任何数据。
 <p>
注：(2) 如果 <code>Array</code> 包含 <code>java.sql.Types.JAVA_OBJECT</code> 类型，则调用 <code>SerialJavaObject</code> 构造方法，其中会执行检查以确保此对象可序列化。 
 <p>
注：(3) 提供给此构造方法的 <code>Array</code> 对象对于任何 <code>Array.getArray()</code> 方法都不能返回 <code>null</code>。<code>SerialArray</code> 无法序列化 null 数组值。
 
@param array 要序列化的 <code>Array</code> 对象
@param map <code>java.util.Map</code> 对象，其中每个条目都包含：1) 给出 UDT（SQL 结构类型或 distinct 类型）完全限定名的 <code>String</code> 对象 2) 用于定义 UDT 映射方式的 <code>SQLData</code> 实现的 <code>Class</code> 对象。<i>map</i> 参数对 <code>Blob</code>、<code>Clob</code>、<code>DATALINK</code> 或 <code>JAVA_OBJECT</code> 类型没有任何影响。
@throws SerialException 如果在序列化 <code>Array</code> 对象时出错
@throws SQLException 如果发生数据库访问错误或者 <i>array</i> 或 <i>map</i> 值为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sql.rowset.serial.SerialArray(Array array) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据给定 <code>Array</code> 对象构造新的 <code>SerialArray</code> 对象。
 <P>
此构造方法不执行自定义映射。如果数组的基本类型为 SQL 结构类型并且需要自定义映射，则应该使用 <code>SerialArray(Array array, Map map)</code> 构造方法。
 <P>
新 <code>SerialArray</code> 对象包含的元素与其据以构建的 <code>Array</code> 对象相同，基本类型为 SQL 类型 <code>BLOB</code>、<code>CLOB</code>、<code>DATALINK</code> 或 <code>JAVA_OBJECT</code> 时除外。在这种情况下，新 <code>SerialArray</code> 对象中的每个元素都是适当的序列化形式，即 <code>SerialBlob</code>、<code>SerialClob</code>、<code>SerialDatalink</code> 或 <code>SerialJavaObject</code> 对象。
 <P> 
注：(1) 用来创建 <code>SerialArray</code> 对象的 <code>Array</code> 对象在被传递给构造方法之前，必须已经在客户端实现了 SQL <code>ARRAY</code> 值的数据。否则，新 <code>SerialArray</code> 对象将不包含任何数据。
 <p>
注：(2) 提供给此构造方法的 <code>Array</code> 对象对于任何 <code>Array.getArray()</code> 方法都不能返回 <code>null</code>。<code>SerialArray</code> 无法序列化 <code>null</code> 数组值。

@param array 要序列化的 <code>Array</code> 对象
@throws SerialException 如果在序列化 <code>Array</code> 对象时出错
@throws SQLException 如果发生数据库访问错误或者 <i>array</i> 参数为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SerialArray.free() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法释放 <code>Array</code> 对象及其占有的资源。调用 <code>free</code> 方法后，该对象将无效。

<p>
如果多次调用了 <code>free</code>，则对 <code>free</code> 的后续调用都被视为无操作 (no-op)。
<p>
 
 @throws SQLException 如果释放 Array 的资源时发生错误
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @since 1.6     

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.sql.rowset.serial.SerialArray.getArray() throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个新数组，它是此 <code>SerialArray</code> 对象的副本。

@return Java 编程语言中此 <code>SerialArray</code> 对象 <code>Object</code> 形式的副本
@throws SerialException 如果在获取此 <code>SerialArray</code> 对象的副本时出错

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.sql.rowset.serial.SerialArray.getArray(java.util.Map<java.lang.String, java.lang.Class<?>> map) throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个新数组，它是此 <code>SerialArray</code> 对象的副本，当元素为 SQL UDT 时对每个自定义映射关系的元素使用给定类型映射表。
 <P>
如果数组元素为 UDT 并且给定类型映射表具有针对该 UDT 的条目，则此方法执行自定义映射。自定义映射是递归的，这意味着，如果 SQL 结构类型的元素是 SQL 结构类型，而它本身又具有 SQL 结构类型的元素，则根据给定类型映射表映射每个具有自定义映射关系的结构类型。

@param map <code>java.util.Map</code> 对象，其中每个条目包含：1) 给出 UDT 完全限定名的 <code>String</code> 对象 2) 用于定义 UDT 映射方式的 <code>SQLData</code> 实现的 <code>Class</code> 对象
@return Java 编程语言中此 <code>SerialArray</code> 对象 <code>Object</code> 形式的副本
@throws SerialException 如果发生错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.sql.rowset.serial.SerialArray.getArray(long index, int count) throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个新数组，它是部分此 <code>SerialArray</code> 对象的副本，从给定索引处的元素开始，包含给定的连续元素数。

@param index 此 <code>SerialArray</code> 对象中要复制的第一个元素的索引；第一个元素的索引为 <code>0</code>
@param count 要复制的连续元素数，从给定索引处开始
@return Java 编程语言中此 <code>SerialArray</code> 对象指定元素的 <code>Object</code> 形式的副本
@throws SerialException 如果发生错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.sql.rowset.serial.SerialArray.getArray(long index, int count, java.util.Map<java.lang.String, java.lang.Class<?>> map) throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个新数组，它是部分此 <code>SerialArray</code> 对象的副本，从给定索引处的元素开始，包含给定的连续元素数。
 <P>
如果数组元素为 UDT 并且给定类型映射表具有针对该 UDT 的条目，则此方法执行自定义映射。自定义映射是递归的，这意味着，如果 SQL 结构类型的元素是 SQL 结构类型，而它本身又具有 SQL 结构类型的元素，则根据给定类型映射表映射每个具有自定义映射关系的结构类型。

@param index 此 <code>SerialArray</code> 对象中要复制的第一个元素的索引；数组中第一个元素的索引为 <code>0</code>
@param count 要复制的连续元素数，从给定的索引处开始
@param map <code>java.util.Map</code> 对象，该对象中的每个条目包含：1) 给出 UDT 完全限定名的 <code>String</code> 对象 2) 用于定义 UDT 映射方式的 <code>SQLData</code> 实现的 <code>Class</code> 对象
@return Java 编程语言中此 <code>SerialArray</code> 对象指定元素 <code>Object</code> 形式的副本
@throws SerialException 如果发生错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sql.rowset.serial.SerialArray.getBaseType() throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>SerialArray</code> 对象中 SQL 类型的元素。返回的 <code>int</code> 是 <code>java.sql.Types</code> 类中的一个常量。

@return <code>java.sql.Types</code> 中的一个常量，指示此 <code>SerialArray</code> 对象中 SQL 类型的元素
@throws SerialException 如果发生错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sql.rowset.serial.SerialArray.getBaseTypeName() throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>SerialArray</code> 对象元素特定于 DBMS 的类型名称。

@return DBMS 用于此 <code>SerialArray</code> 对象基本类型的 SQL 类型名称
@throws SerialException 如果发生错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.ResultSet javax.sql.rowset.serial.SerialArray.getResultSet(long index, int count) throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取保存子数组元素的 <code>ResultSet</code> 对象，该子数组从 <i>index</i> 索引处开始，包含 <i>count</i> 个连续元素。此方法使用连接的类型映射表来映射数组的元素，如果该映射表包含一个对应于基本类型的项。否则使用标准映射关系。  
     
@param index 此 <code>SerialArray</code> 对象中要复制的第一个元素的索引；数组中第一个元素的索引为 <code>0</code>
@param count 要复制的连续元素数，从给定索引处开始
@return 包含此 <code>SerialArray</code> 对象中指定元素的 <code>ResultSet</code> 对象，每个元素一个单独行
@throws SerialException （该异常依次抛出 <code>UnsupportedOperationException</code>）如果调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.ResultSet javax.sql.rowset.serial.SerialArray.getResultSet(java.util.Map<java.lang.String, java.lang.Class<?>> map) throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->

获取 <code>ResultSet</code> 对象，该对象包含由此 <code>SerialArray</code> 对象所表示的所有 SQL <code>ARRAY</code> 值的元素。此方法使用指定的 map 进行类型映射自定义，除非数组的基本类型与 <i>map</i> 中用户定义类型 (UDT) 不匹配，这种情况下使用标准映射关系。这一 <code>getResultSet</code> 方法使用给定类型映射表或标准映射关系；它绝不会使用与连接关联的类型映射表。
 
@param map <code>java.util.Map</code> 对象，其中每个条目包含：1) 给出 UDT 完全限定名的 <code>String</code> 对象 2) 用于定义 UDT 映射方式的 <code>SQLData</code> 实现的 <code>Class</code> 对象
@return 包含此 <code>SerialArray</code> 对象中所有元素的 <code>ResultSet</code> 对象，第个元素一个单独行
@throws SerialException （该异常依次抛出 <code>UnsupportedOperationException</code>）如果调用此方法	

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.ResultSet javax.sql.rowset.serial.SerialArray.getResultSet() throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->

获取 <code>ResultSet</code> 对象，该对象包含由此 <code>SerialArray</code> 对象所表示的所有 <code>ARRAY</code> 值中的元素。如果合适，则使用该连接的类型映射表来映射数组的元素；否则使用标准映射关系。          
 
@return 包含此 <code>SerialArray</code> 对象中所有元素的 <code>ResultSet</code> 对象，每个元素一个单独行
@throws SerialException （该异常依次抛出 <code>UnsupportedOperationException</code>）如果调用此方法	

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.ResultSet javax.sql.rowset.serial.SerialArray.getResultSet(long index, int count, java.util.Map<java.lang.String, java.lang.Class<?>> map) throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->

获取包含此 <code>SerialArray</code> 对象中元素的子数组的 <code>ResultSet</code> 对象，该子数组从 <i>index</i> 索引处开始，包含 <i>count</i> 个连续元素。此方法使用指定的 map 进行类型映射自定义，除非数组的基本类型与 <i>map</i> 中用户定义类型 (UDT) 不匹配，这种情况下使用标准映射关系。这一 <code>getResultSet</code> 方法使用给定类型映射表或标准映射关系；它绝不会使用与连接关联的类型映射表。

@param index 此 <code>SerialArray</code> 对象中要复制的第一个元素的索引；数组中第一个元素的索引为 <code>0</code>
@param count 要复制的连续元素数，从给定的索引处开始
@param map <code>java.util.Map</code> 对象，该对象中的每个条目包含：1) 给出 UDT 完全限定名的 <code>String</code> 对象 2) 用于定义 UDT 映射方式的 <code>SQLData</code> 实现的 <code>Class</code> 对象
@return 包含此 <code>SerialArray</code> 对象中指定元素的 <code>ResultSet</code> 对象，每个元素一个单独行
@throws SerialException （该异常依次抛出 <code>UnsupportedOperationException</code>）如果调用此方法

<!-- END DATA -->
