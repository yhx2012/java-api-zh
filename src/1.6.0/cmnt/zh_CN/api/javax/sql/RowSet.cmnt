<!-- BEGIN KEY -->
public interface javax.sql.RowSet extends java.sql.ResultSet
<!-- END KEY -->
<!-- BEGIN DATA -->
该接口添加了对 JavaBeans<sup><font size=-2>TM</font></sup> 组件模型的 JDBC API 支持。rowset 可用作可视化 Bean 开发环境中的 JavaBeans 组件，它可以在设计时创建和配置并在运行时执行。  
 <P>
<code>RowSet</code> 接口提供一组 JavaBeans 属性，这些属性允许配置一个 <code>RowSet</code> 实例来连接 JDBC 数据源并从中读取某些数据。一组设置方法（<code>setInt</code>、<code>setBytes</code>、<code>setString</code> 等等）提供将输入参数传递到 rowset 命令属性的方式。在一般情况下，此命令是 rowset 从关系数据库获取其数据时所使用的 SQL 查询。
 <P>
<code>RowSet</code> 接口支持 JavaBeans 事件，允许应用程序中的其他组件在 rowset 发生事件时（如值的更改）得到通知。
 
<P><code>RowSet</code> 接口是唯一的，因为需要使用其他 JDBC API 来实现它。换句话说，<code>RowSet</code> 实现是在 JDBC 驱动程序&ldquo;顶部&rdquo;执行的软件层。任何人都可以提供 <code>RowSet</code> 接口的实现，包括希望将 <code>RowSet</code> 实现作为其 JDBC 产品的一部分提供的 JDBC 驱动程序供应商。
 <P>
<code>RowSet</code> 对象可以建立一个与数据源的连接并在其整个生命周期中维持该连接，在此情况下，该对象被称为<i>连接的</i> rowset。rowset 还可以建立一个与数据源的连接，从其获取数据，然后关闭它。这种 rowset 被称为<i>非连接</i> rowset。非连接 rowset 可以在断开时更改其数据，然后将这些更改发送回原始数据源，不过它必须重新建立连接才能完成此操作。
 <P>
非连接 rowset 可以具有与之关联的 reader（<code>RowSetReader</code> 对象）和 writer（<code>RowSetWriter</code> 对象）。可以多种方式实现 reader 来使用数据填充 rowset，包括从非关系型数据源获取数据。也可以多种方式实现 writer 来将对 rowset 的数据所做的更改传回底层数据源。
 <P>
Rowset 易于使用。<code>RowSet</code> 接口扩展了标准 <code>java.sql.ResultSet</code> 接口。<code>RowSetMetaData</code> 接口扩展了 <code>java.sql.ResultSetMetaData</code> 接口。因此，熟悉 JDBC API 的开发人员必须学习少数几个新 API 才能使用 rowset。此外，与 JDBC <code>ResultSet</code> 对象配套使用的第三方软件工具也可以方便地用于 rowset。
 
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sql.RowSet.getUrl() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->

如果此 <code>RowSet</code> 对象使用 <code>DriverManager</code> 而非 <code>DataSource</code> 对象建立连接，则获取创建连接时将使用的 url 属性。默认值为 <code>null</code>。

@return 字符串 url
@exception SQLException 如果发生数据库访问错误
@see #setUrl

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setUrl(String url) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 <code>RowSet</code> 对象在使用 <code>DriverManager</code> 创建连接时将使用的 URL。

设置此属性是可选的。如果使用 URL，则在使用 rowset 连接到数据库之前，必须加载接受 URL 的 JDBC 驱动程序。在读取或写入数据时，rowset 将在内部使用 URL 创建数据库连接。创建连接时可能使用 URL，也可能使用数据源名称，具体取决于最近一次设置为非 null 值的是哪一个。
 
@param url 字符串值；可以为 <code>null</code>
@exception SQLException 如果发生数据库访问错误
@see #getUrl

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sql.RowSet.getDataSourceName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取标识此 <code>RowSet</code> 对象的数据源的逻辑名称。

@return 数据源名称
@see #setDataSourceName
@see #setUrl

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setDataSourceName(String name) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象的数据源名称属性设置为给定的 <code>String</code>。
 <P>
可以使用数据源名称属性的值来查找已经在命名服务中注册的 <code>DataSource</code> 对象。完成检索后，可以使用 <code>DataSource</code> 对象创建到它所表示的数据源的连接。

@param name 此 <code>RowSet</code> 对象数据源的逻辑名称；可以为 <code>null</code>
@exception SQLException 如果发生数据库访问错误
@see #getDataSourceName

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sql.RowSet.getUsername()
<!-- END KEY -->
<!-- BEGIN DATA -->

获取用于创建此 <code>RowSet</code> 对象的数据库连接的用户名。用户名属性是在调用 <code>execute</code> 方法前在运行时设置的。它通常不是 <code>RowSet</code> 对象的序列化状态的一部分。

@return 用户名属性
@see #setUsername

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setUsername(String name) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象的用户名属性设置为给定的 <code>String</code>。

@param name 用户名
@exception SQLException 如果发生数据库访问错误
@see #getUsername

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sql.RowSet.getPassword()
<!-- END KEY -->
<!-- BEGIN DATA -->

获取用于创建数据库连接的密码。密码属性是在调用 <code>execute</code> 方法前在运行时设置的。它通常不是 <code>RowSet</code> 对象的序列化状态的一部分。

@return 用于创建数据库连接的密码
@see #setPassword

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setPassword(String password) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象的数据库密码设置为给定的 <code>String</code>。

@param password 密码字符串
@exception SQLException 如果发生数据库访问错误
@see #getPassword

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sql.RowSet.getTransactionIsolation()
<!-- END KEY -->
<!-- BEGIN DATA -->

获取为此 <code>RowSet</code> 对象设置的事务隔离级别。

@return 事务隔离级别；<code>Connection.TRANSACTION_READ_UNCOMMITTED</code>、<code>Connection.TRANSACTION_READ_COMMITTED</code>、<code>Connection.TRANSACTION_REPEATABLE_READ</code> 或 <code>Connection.TRANSACTION_SERIALIZABLE</code> 之一
@see #setTransactionIsolation(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setTransactionIsolation(int level) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 <code>RowSet</code> 对象的事务隔离级别。

@param level 事务隔离级别；<code>Connection.TRANSACTION_READ_UNCOMMITTED</code>、<code>Connection.TRANSACTION_READ_COMMITTED</code>、<code>Connection.TRANSACTION_REPEATABLE_READ</code> 或 <code>Connection.TRANSACTION_SERIALIZABLE</code> 之一
@exception SQLException 如果发生数据库访问错误
@see #getTransactionIsolation

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map<java.lang.String, java.lang.Class<?>> javax.sql.RowSet.getTypeMap() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 <code>RowSet</code> 对象关联的 <code>Map</code> 对象，该对象指定 SQL 用户定义类型的自定义映射关系（如果有）。默认类型映射为空。

@return 一个 <code>java.util.Map</code> 对象，该对象包含 SQL 用户定义类型的名称及其映射到的 Java 类

@exception SQLException 如果发生数据库访问错误
@see #setTypeMap

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setTypeMap(java.util.Map<java.lang.String, java.lang.Class<?>> map) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定 <code>java.util.Map</code> 对象安装为此 <code>RowSet</code> 对象的默认类型映射表。在通过方法参数提供另一个类型映射表之前，将一直使用此类型映射表。

@param map 一个 <code>java.util.Map</code> 对象，该对象包含 SQL 用户定义类型的名称及其映射到的 Java 类
@exception SQLException 如果发生数据库访问错误
@see #getTypeMap

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sql.RowSet.getCommand()
<!-- END KEY -->
<!-- BEGIN DATA -->

获取此 <code>RowSet</code> 对象的命令属性。

命令属性包含命令字符串，该字符串必须为 SQL 查询，执行该查询可以使用数据填充 rowset。默认值为 <code>null</code>。

@return 命令字符串；可以为 <code>null</code>
@see #setCommand

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setCommand(String cmd) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象的命令属性设置为给定的 SQL 查询。

当 rowset 从不支持命令的数据源（如电子表格）获取数据时，此属性是可选的。 

@param cmd 将用于为此 <code>RowSet</code> 对象获取数据的 SQL 查询；可以为 <code>null</code>
@exception SQLException 如果发生数据库访问错误
@see #getCommand

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sql.RowSet.isReadOnly()
<!-- END KEY -->
<!-- BEGIN DATA -->

获取此 <code>RowSet</code> 对象是否是只读的。如果能够进行更新，则默认 rowset 为可更新。
 <P>
试图更新只读 rowset 将导致抛出 <code>SQLException</code>。 

@return 如果此 <code>RowSet</code> 对象是只读的，则返回 <code>true</code>；如果它是可更新的，则返回 <code>false</code>
@see #setReadOnly

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setReadOnly(boolean value) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象的只读性设置为给定的 <code>boolean</code> 值。

@param value 如果只读，则该值为 <code>true</code>；如果可更新，则为 <code>false</code>
@exception SQLException 如果发生数据库访问错误
@see #isReadOnly

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sql.RowSet.getMaxFieldSize() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取可以对某些列值返回的最大字节数。此限制仅应用于 <code>BINARY</code>、<code>VARBINARY</code>、<code>LONGVARBINARYBINARY</code>、<code>CHAR</code>、<code>VARCHAR</code>、<code>LONGVARCHAR</code>、<code>NCHAR</code> 和 <code>NVARCHAR</code> 列。如果超过了该限制，则默认丢弃多出的数据。

@return 当前最大列大小限制；零表示不存在任何限制
@exception SQLException 如果发生数据库访问错误
@see #setMaxFieldSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setMaxFieldSize(int max) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将可以对列值返回的最大字节数设置为给定的字节数。此限制仅应用于 <code>BINARY</code>、<code>VARBINARY</code>、<code>LONGVARBINARYBINARY</code>、<code>CHAR</code>、<code>VARCHAR</code>、<code>LONGVARCHAR</code>、<code>NCHAR</code> 和 <code>NVARCHAR</code> 列。如果超过了该限制，则默认丢弃多出的数据。为了获得最大的可移植性，应该使用大于 256 的值。

@param max 以字节为单位的新最大列大小限制；零表示没有任何限制
@exception SQLException 如果发生数据库访问错误
@see #getMaxFieldSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sql.RowSet.getMaxRows() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>RowSet</code> 对象可以包含的最大行数。如果超过了该限制，则正常撤消多出的行。

@return 此 <code>RowSet</code> 对象可以包含的当前最大行数；零表示不存在任何限制
@exception SQLException 如果发生数据库访问错误
@see #setMaxRows

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setMaxRows(int max) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象可以包含的最大行数设置为指定数。如果超过了该限制，则正常撤消多出的行。

@param max 新最大行数；零表示没有任何限制
@exception SQLException 如果发生数据库访问错误
@see #getMaxRows

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sql.RowSet.getEscapeProcessing() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取是否为此 <code>RowSet</code> 对象启用转义处理。如果启用转义扫描（默认值），则驱动程序在将 SQL 语句发送到数据库之前将执行转义替换。

@return 如果启用转义处理，则返回 <code>true</code>；如果禁用，则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误
@see #setEscapeProcessing

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setEscapeProcessing(boolean enable) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象的转义处理设置为开或关。如果转义扫描为开启（默认值），则驱动程序在将 SQL 语句发送到数据库之前将执行转义替换。

@param enable 为 <code>true</code> 表示启用转义处理；为 <code>false</code> 表示禁用转义处理
@exception SQLException 如果发生数据库访问错误
@see #getEscapeProcessing

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sql.RowSet.getQueryTimeout() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取驱动程序等待语句执行的最大秒数。如果超过此限制，则抛出 <code>SQLException</code>。

@return 以秒为单位的当前查询超时限制；零表示不存在任何限制
@exception SQLException 如果发生数据库访问错误
@see #setQueryTimeout

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setQueryTimeout(int seconds) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将驱动程序等待语句执行的最大秒数设置为给定的秒数。如果超过此限制，则抛出 <code>SQLException</code>。

@param seconds 以秒为单位的新查询超时限制；零表示不存在任何限制
@exception SQLException 如果发生数据库访问错误
@see #getQueryTimeout

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setType(int type) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象的类型设置为给定的类型。此方法用于更改 rowset 的类型，默认情况下该类型为只读且不可滚动。

@param type 以下指定类型的 <code>ResultSet</code> 常量之一：<code>ResultSet.TYPE_FORWARD_ONLY</code>、<code>ResultSet.TYPE_SCROLL_INSENSITIVE</code> 或 <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@exception SQLException 如果发生数据库访问错误
@see java.sql.ResultSet#getType

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setConcurrency(int concurrency) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象的并发性设置为给定的并发级别。此方法用于更改 rowset 的并发级别，默认情况下为 <code>ResultSet.CONCUR_READ_ONLY</code>。

@param concurrency 以下指定并发级别的 <code>ResultSet</code> 常量之一：<code>ResultSet.CONCUR_READ_ONLY</code> 或 <code>ResultSet.CONCUR_UPDATABLE</code>
@exception SQLException 如果发生数据库访问错误
@see ResultSet#getConcurrency

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setNull(int parameterIndex, int sqlType) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象的 SQL 命令中的指定参数设置为 SQL <code>NULL</code>。

<P><B>注：</B> 必须指定参数的 SQL 类型。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param sqlType 由 <code>java.sql.Types</code> 定义的 SQL 类型代码
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setNull(String parameterName, int sqlType) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为 SQL <code>NULL</code>。

 <P><B>注：</B> 必须指定该参数的 SQL 类型。

 @param parameterName 参数的名称
 @param sqlType <code>java.sql.Types</code> 中定义的 SQL 类型代码
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setNull(int paramIndex, int sqlType, String typeName) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象的 SQL 命令中的指定参数设置为 SQL <code>NULL</code>。这种 <code>setNull</code> 方法应该用于 SQL 用户定义的类型 (UDT) 和 <code>REF</code> 类型参数。UDT 的例子包括：<code>STRUCT</code>、<code>DISTINCT</code>、<code>JAVA_OBJECT</code> 和指定数组类型。

<P><B>注：</B> 为了便于移植，在指定 NULL UDT 或 <code>REF</code> 参数时，应用程序必须提供 SQL 类型代码和全限定 SQL 类型名称。对于 UDT 参数，名称是参数本身的类型名称。对于 <code>REF</code> 参数，名称是所引用类型的类型名称。如果 JDBC 驱动程序不需要类型代码或类型名称信息，那么它可以忽略此信息。     

尽管此方法适合 UDT 和 <code>REF</code> 参数使用，但可以使用此方法来设置任意 JDBC 类型的 null 参数。如果该参数没有用户定义的类型或 <code>REF</code> 类型，则忽略 typeName 参数。


@param paramIndex 第一个参数是 1，第二个参数是 2 ……
@param sqlType 取自 <code>java.sql.Types</code> 的值
@param typeName SQL UDT 的完全限定名或 <code>REF</code> 类型引用的 SQL 结构化类型的名称；如果不是 UDT 或 <code>REF</code> 类型，则忽略该参数
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setNull(String parameterName, int sqlType, String typeName) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为 SQL <code>NULL</code>。这种 <code>setNull</code> 方法应该用于用户定义类型和 REF 类型参数。用户定义类型的示例有：STRUCT、DISTINCT、JAVA_OBJECT 和指定数组类型。

<P><B>注：</B> 为了便于移植，在指定 NULL 用户定义参数或 REF 参数时，应用程序必须提供 SQL 类型代码和完全限定的 SQL 类型名称。 在用户定义类型的情况下，名称是参数本身的类型名称。对于 REF 参数，名称是所引用类型的类型名称。如果 JDBC 驱动程序不需要类型代码或类型名称信息，那么它可以忽略这些信息。

尽管此方法供用户定义参数和 Ref 参数使用，但也可以使用它设置任何 JDBC 类型的 null 参数。如果该参数不具有用户定义类型或 REF 类型，则忽略给定 typeName。


 @param parameterName 参数的名称
 @param sqlType 取自 <code>java.sql.Types</code> 的值
 @param typeName SQL 用户定义类型的完全限定名称；如果该参数不是用户定义类型或 SQL <code>REF</code> 值，则忽略它
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setBoolean(int parameterIndex, boolean x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象命令中的指定参数设置为给定的 Java <code>boolean</code> 值。在将此值发送到数据库之前，驱动程序将其转换为 SQL <code>BIT</code> 值。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 参数值
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setBoolean(String parameterName, boolean x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定的 Java <code>boolean</code> 值。在将此值发送到数据库时，驱动程序将其转换为 SQL <code>BIT</code> 或 <code>BOOLEAN</code> 值。

 @param parameterName 参数的名称
 @param x 参数值
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @see #getBoolean
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setByte(int parameterIndex, byte x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象命令中的指定参数设置为给定的 Java <code>byte</code> 值。在将此值发送到数据库之前，驱动程序将其转换为 SQL <code>TINYINT</code> 值。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 参数值
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setByte(String parameterName, byte x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为给定的 Java <code>byte</code> 值。在将此值发送到数据库时，驱动程序将其转换为 SQL <code>TINYINT</code> 值。

 @param parameterName 参数的名称
 @param x 参数值
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @see #getByte
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setShort(int parameterIndex, short x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象命令中的指定参数设置为给定的 Java <code>short</code> 值。在将此值发送到数据库之前，驱动程序将其转换为 SQL <code>SMALLINT</code> 值。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 参数值
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setShort(String parameterName, short x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为给定的 Java <code>short</code> 值。在将此值发送到数据库时，驱动程序将其转换为 SQL <code>SMALLINT</code> 值。

 @param parameterName 参数的名称
 @param x 参数值
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @see #getShort
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setInt(int parameterIndex, int x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象命令中的指定参数设置为给定的 Java <code>int</code> 值。在将此值发送到数据库之前，驱动程序将其转换为 SQL <code>INTEGER</code> 值。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 参数值
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setInt(String parameterName, int x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为给定的 Java <code>int</code> 值。在将此值发送到数据库时，驱动程序将其转换为 SQL <code>INTEGER</code> 值。

 @param parameterName 参数的名称
 @param x 参数值
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @see #getInt
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setLong(int parameterIndex, long x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象命令中的指定参数设置为给定的 Java <code>long</code> 值。在将此值发送到数据库之前，驱动程序将其转换为 SQL <code>BIGINT</code> 值。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 参数值
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setLong(String parameterName, long x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为给定的 Java <code>long</code> 值。在将此值发送到数据库时，驱动程序将其转换为 SQL <code>BIGINT</code> 值。

 @param parameterName 参数的名称
 @param x 参数值
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @see #getLong
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setFloat(int parameterIndex, float x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象命令中的指定参数设置为给定的 Java <code>float</code> 值。在将此值发送到数据库之前，驱动程序将其转换为 SQL <code>REAL</code> 值。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 参数值
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setFloat(String parameterName, float x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为给定的 Java <code>float</code> 值。在将此值发送到数据库时，驱动程序将其转换为 SQL <code>FLOAT</code> 值。

 @param parameterName 参数的名称
 @param x 参数值
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @see #getFloat
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setDouble(int parameterIndex, double x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象命令中的指定参数设置为给定的 Java <code>double</code> 值。在将此值发送到数据库之前，驱动程序将其转换为 SQL <code>DOUBLE</code> 值。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 参数值
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setDouble(String parameterName, double x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为给定的 Java <code>double</code> 值。在将此值发送到数据库时，驱动程序将其转换为 SQL <code>DOUBLE</code> 值。

 @param parameterName 参数的名称
 @param x 参数值
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @see #getDouble
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setBigDecimal(int parameterIndex, BigDecimal x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象命令中的指定参数设置为给定的 <code>java.math.BigDeciaml</code> 值。在将此值发送到数据库之前，驱动程序将其转换为 SQL <code>NUMERIC</code> 值。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 参数值
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setBigDecimal(String parameterName, BigDecimal x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为给定的 <code>java.math.BigDecimal</code> 值。在将此值发送到数据库时，驱动程序将其转换为 SQL <code>NUMERIC</code> 值。

 @param parameterName 参数的名称
 @param x 参数值
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @see #getBigDecimal
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setString(int parameterIndex, String x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象命令中的指定参数设置为给定的 Java <code>String</code> 值。在将此值发送给数据库之前，驱动程序将其转换为 SQL <code>VARCHAR</code> 或 <code>LONGVARCHAR</code> 值，具体取决于该参数相对于驱动程序在 <code>VARCHAR</code> 值上的限制的大小。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 参数值
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setString(String parameterName, String x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定的 Java <code>String</code> 值。在将此值发送到数据库时，驱动程序将其转换为 SQL <code>VARCHAR</code> 或 <code>LONGVARCHAR</code> 值（具体取决于该参数相对于驱动程序在 <code>VARCHAR</code> 值上的限制的大小）。

 @param parameterName 参数的名称
 @param x 参数值
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @see #getString
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setBytes(int parameterIndex, byte[] x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象命令中的指定参数设置为给定的 Java <code>byte</code> 值数组。在将此值发送给数据库之前，驱动程序将其转换为 SQL <code>VARBINARY</code> 或 <code>LONGVARBINARY</code> 值，具体取决于该参数相对于驱动程序在 <code>VARBINARY</code> 值上的限制的大小。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 参数值
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setBytes(String parameterName, byte[] x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定的 Java byte 数组。在将此值发送到数据库时，驱动程序将其转换为 SQL <code>VARBINARY</code> 或 <code>LONGVARBINARY</code> 值（具体取决于该参数相对于驱动程序在 <code>VARBINARY</code> 值上的限制的大小）。

 @param parameterName 参数的名称
 @param x 参数值
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @see #getBytes
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setDate(int parameterIndex, Date x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象命令中的指定参数设置为给定的 <code>java.sql.Date</code> 值。在将此值发送到数据库之前，驱动程序将其转换为 SQL <code>DATE</code> 值，使用默认的 <code>java.util.Calendar</code> 来计算日期。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 参数值
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setTime(int parameterIndex, Time x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象命令中的指定参数设置为给定的 <code>java.sql.Time</code> 值。在将此值发送到数据库之前，驱动程序将其转换为 SQL <code>TIME</code> 值，使用默认的 <code>java.util.Calendar</code> 来计算该值。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 参数值
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setTimestamp(int parameterIndex, Timestamp x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象命令中的指定参数设置为给定的 <code>java.sql.Timestamp</code> 值。在将此值发送到数据库之前，驱动程序将其转换为 SQL <code>TIMESTAMP</code> 值，使用默认的 <code>java.util.Calendar</code> 来计算该值。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 参数值
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setTimestamp(String parameterName, Timestamp x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定的 <code>java.sql.Timestamp</code> 值。在将此值发送到数据库时，驱动程序将其转换为 SQL <code>TIMESTAMP</code> 值。

 @param parameterName 参数的名称
 @param x 参数值
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @see #getTimestamp
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setAsciiStream(int parameterIndex, InputStream x, int length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象命令中的指定参数设置为给定的 <code>java.io.InputStream</code> 值。更实际的做法是，通过 <code>java.io.InputStream</code> 而不是 <code>LONGVARCHAR</code> 参数来发送很大的 ASCII 值。在到达文件末尾之前，驱动程序将根据需要从该流读取数据。   
 
<P><B>注：</B>此流对象既可以是一个标准 Java 流对象，也可以是用户定义的实现标准接口的子类。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 包含 ASCII 参数值的 Java 输入流
@param length 流中的字节数
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setAsciiStream(String parameterName, InputStream x, int length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定输入流，该输入流将拥有指定字节数。在将一个非常大的 ASCII 值输入到 <code>LONGVARCHAR</code> 参数时，通过 <code>java.io.InputStream</code> 发送可能更为实际。将根据需要从流中读取数据，一直读取到文件末尾。 JDBC 驱动程序将执行从 ASCII 到数据库 char 格式的任何必要转换。

 <P><B>注：</B> 此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。

 @param parameterName 参数的名称
 @param x 包含 ASCII 参数值的 Java 输入流
 @param length 流中的字节数
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setBinaryStream(int parameterIndex, InputStream x, int length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象命令中的指定参数设置为给定的 <code>java.io.InputStream</code> 值。更实际的做法是，通过 <code>java.io.InputStream</code> 而不是 <code>LONGVARBINARY</code> 参数来发送很大的二进制值。在到达文件末尾之前，驱动程序将根据需要从该流读取数据。   
 
<P><B>注：</B> 此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 包含二进制参数值的 Java 输入流
@param length 流中的字节数
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setBinaryStream(String parameterName, InputStream x, int length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定输入流，该输入流将拥有给定字节数。在将一个非常大的二进制值输入到 <code>LONGVARBINARY</code> 参数时，通过 <code>java.io.InputStream</code> 对象发送它可能更为实际。将根据需要从流中读取数据，一直读取到文件末尾。 

 <P><B>注：</B> 此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。

 @param parameterName 参数的名称
 @param x 包含二进制参数值的 java 输入流
 @param length 流中的字节数
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setCharacterStream(int parameterIndex, Reader reader, int length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象命令中的指定参数设置为给定的 <code>java.io.Reader</code> 值。更实际的做法是，通过 <code>java.io.Reader</code> 而不是 <code>LONGVARCHAR</code> 参数来发送很大的 UNICODE 值。在到达文件末尾之前，驱动程序将根据需要从该流读取数据。   
 
<P><B>注：</B> 此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param reader 包含要设置的 UNICODE 数据的 <code>Reader</code> 对象
@param length 流中的字符数
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setCharacterStream(String parameterName, Reader reader, int length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定 <code>Reader</code> 对象，该对象是给定的字符长度数目。在将一个非常大的 UNICODE 值输入到 <code>LONGVARCHAR</code> 参数时，通过 <code>java.io.Reader</code> 发送它可能更为实际。将根据需要从流中读取数据，一直读取到文件末尾。 JDBC 驱动程序将执行从 UNICODE 到数据库 char 格式的任何必要转换。

<P><B>注：</B> 此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。

 @param parameterName 参数的名称
 @param reader 包含用作指定参数的 UNICODE 数据的 <code>java.io.Reader</code> 对象
 @param length 流中的字符数
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setAsciiStream(int parameterIndex, InputStream x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象命令中的指定参数设置为给定输入流。在将一个非常大的 ASCII 值输入到 <code>LONGVARCHAR</code> 参数时，通过 <code>java.io.InputStream</code> 发送它可能更为实际。将根据需要从流中读取数据，一直读取到文件末尾。 JDBC 驱动程序将执行从 ASCII 到数据库 char 格式的任何必要转换。

<P><B>注：</B> 此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。
<P><B>注：</B> 请参考 JDBC 驱动程序文档确定使用带长度参数的 <code>setAsciiStream</code> 是否更有效。

 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
 @param x 包含 ASCII 参数值的 Java 输入流
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>PreparedStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setAsciiStream(String parameterName, InputStream x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定输入流。在将一个非常大的 ASCII 值输入到 <code>LONGVARCHAR</code> 参数时，通过 <code>java.io.InputStream</code> 发送它可能更为实际。将根据需要从流中读取数据，一直读取到文件末尾。JDBC 驱动程序将执行从 ASCII 到数据库 char 格式的任何必要转换。

<P><B>注：</B> 此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。
<P><B>注：</B> 请参考 JDBC 驱动程序文档确定使用带有长度参数的 <code>setAsciiStream</code> 是否更有效。

 @param parameterName 参数的名称
 @param x 包含 ASCII 参数值的 Java 输入流
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setBinaryStream(int parameterIndex, InputStream x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象命令中的指定参数设置为给定输入流。在将一个非常大的二进制值输入到 <code>LONGVARBINARY</code> 参数时，通过 <code>java.io.InputStream</code> 对象发送它可能更为实际。将根据需要从流中读取数据，一直读取到文件末尾。 

<P><B>注：</B> 此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。
<P><B>注：</B> 请参考 JDBC 驱动程序文档确定使用带有长度参数的 <code>setBinaryStream</code> 是否更有效。

 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
 @param x 包含二进制参数值的 Java 输入流
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>PreparedStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setBinaryStream(String parameterName, InputStream x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定输入流。在将一个非常大的二进制值输入到 <code>LONGVARBINARY</code> 参数时，通过 <code>java.io.InputStream</code> 对象发送它可能更为实际。将根据需要从流中读取数据，一直读取到文件末尾。

<P><B>注：</B> 此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。
<P><B>注：</B> 请参考 JDBC 驱动程序文档确定使用带有长度参数的 <code>setBinaryStream</code> 是否更有效。

 @param parameterName 参数的名称
 @param x 包含二进制参数值的 Java 输入流
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setCharacterStream(int parameterIndex, Reader reader) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象命令中的指定参数设置为给定 <code>Reader</code> 对象。在将一个非常大的 UNICODE 值输入到 <code>LONGVARCHAR</code> 参数时，通过 <code>java.io.Reader</code> 对象发送它可能更为实际。将根据需要从流中读取数据，一直读取到文件末尾。 JDBC 驱动程序将执行从 UNICODE 到数据库 char 格式的任何必要转换。

<P><B>注：</B> 此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。
<P><B>注：</B> 请参考 JDBC 驱动程序文档确定使用带有长度参数的 <code>setCharacterStream</code> 是否更有效。

 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
 @param reader 包含 Unicode 数据的 <code>java.io.Reader</code> 对象
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>PreparedStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setCharacterStream(String parameterName, Reader reader) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定 <code>Reader</code> 对象。在将一个非常大的 UNICODE 值输入到 <code>LONGVARCHAR</code> 参数时，通过 <code>java.io.Reader</code> 对象发送它可能更为实际。将根据需要从流中读取数据，一直读取到文件末尾。JDBC 驱动程序将执行从 UNICODE 到数据库 char 格式的任何必要转换。

<P><B>注：</B> 此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。
<P><B>注：</B> 请参考 JDBC 驱动程序文档确定使用带有长度参数的 <code>setCharacterStream</code> 是否更有效。

 @param parameterName 参数的名称
 @param reader 包含 Unicode 数据的 <code>java.io.Reader</code> 对象
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法    
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setNCharacterStream(int parameterIndex, Reader value) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>RowSet</code> 对象命令中的指定参数设置为 <code>Reader</code> 对象。<code>Reader</code> 读取数据，一直读取到文件末尾。驱动程序将执行从 Java 字符格式到数据库中国家字符集 (national character set) 的必要转换。

<P><B>注：</B> 此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。
<P><B>注：</B> 请参考 JDBC 驱动程序文档确定使用带有长度参数的 <code>setNCharacterStream</code> 是否更有效。

 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
 @param value 参数值
 @throws SQLException 如果驱动程序不支持国家字符集；如果驱动程序检测到可能发生数据转换错误；如果发生数据库访问错误；如果在关闭的 <code>PreparedStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定 Java <code>Object</code> 设置此 <code>RowSet</code> 对象命令中的指定参数。对于整数值，应该使用 <code>java.lang</code> 等效对象（例如，对于 <code>int</code>，应使用 <code>Integer</code> 类的实例）。

如果第二个参数是 <code>InputStream</code>，则该流必须包含 scaleOrLength 所指定的字节数。如果第二个参数是 <code>Reader</code>，则该 reader 必须包含 scaleOrLength 所指定的字符数。如果这些条件都不为 true，则驱动程序在执行准备好的语句时将会生成 <code>SQLException</code>。

<p>在发送到数据库之前，给定 Java 对象将被转换为 targetSqlType。
 <P>
如果对象是实现 <code>SQLData</code> 的类，则 rowset 应该调用 <code>SQLData.writeSQL</code> 方法将对象写入 <code>SQLOutput</code> 数据流中。另一方面，如果对象是实现 <code>Ref</code>、<code>Blob</code>、<code>Clob</code>、<code>NClob</code>、<code>Struct</code>、<code>java.net.URL</code> 或 <code>Array</code> 的类，则驱动程序应该将其作为相应 SQL 类型的值传递给数据库。
<P>

<p>注意，此方法可用于传递特定于数据库的抽象数据类型。 

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 包含输入参数值的对象
@param targetSqlType 将发送给数据库的 SQL 类型（定义于 <code>java.sql.Types</code> 中）。scale 参数可以进一步限定此类型。
@param scaleOrLength 对于 <code>java.sql.Types.DECIMAL</code> 或 <code>java.sql.Types.NUMERIC</code> 类型，该值是小数点后的位数。对于 Java Object 类型 <code>InputStream</code> 和 <code>Reader</code>，该值是流或 reader 中数据的长度。对于所有其他类型，将忽略此值。
@exception SQLException 如果发生数据库访问错误
@see java.sql.Types 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setObject(String parameterName, Object x, int targetSqlType, int scale) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定对象设置指定参数的值。第二个参数必须是一个对象类型；对于整数值，应该使用 <code>java.lang</code> 的等效对象。

<p>在发送到数据库之前，给定 Java 对象将被转换为给定的 targetSqlType。

如果对象具有自定义映射关系（属于实现 <code>SQLData</code> 接口的类），则 JDBC 驱动程序应该调用 <code>SQLData.writeSQL</code> 方法将它写入 SQL 数据流中。另一方面，如果对象是实现 <code>Ref</code>、<code>Blob</code>、<code>Clob</code>、<code>NClob</code>、<code>Struct</code>、<code>java.net.URL</code> 或 <code>Array</code> 的类，则驱动程序应该将其作为相应 SQL 类型的值传递给数据库。
 <P>
注意，此方法可用于传递特定于数据库的抽象数据类型。  

 @param parameterName 参数的名称
 @param x 包含输入参数值的对象
 @param targetSqlType 将发送给数据库的 SQL 类型（在 java.sql.Types 中定义）。scale 参数可以进一步限定此类型。
 @param scale 对于 java.sql.Types.DECIMAL 或 java.sql.Types.NUMERIC 类型，该值是小数点后的位数。对于所有其他类型，将忽略此值。
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 <code>targetSqlType</code> 是 <code>ARRAY</code>、<code>BLOB</code>、<code>CLOB</code>、<code>DATALINK</code>、<code>JAVA_OBJECT</code>、<code>NCHAR</code>、<code>NCLOB</code>、<code>NVARCHAR</code>、<code>LONGNVARCHAR</code>、<code>REF</code>、<code>ROWID</code>、<code>SQLXML</code> 或 <code>STRUCT</code> 数据类型并且 JDBC 驱动程序不支持此数据类型
 @see Types
 @see #getObject
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setObject(int parameterIndex, Object x, int targetSqlType) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 Java <code>Object</code> 设置此 <code>RowSet</code> 对象命令中的指定参数。对于整数值，应该使用 <code>java.lang</code> 等效对象。此方法与上述 <code>setObject</code> 类似，但使用的 scale 是第二个参数的 scale。标量值的 scale 为零。字面值的 scale 存在于字面中。  
 <P>
尽管支持浮点型输入值，但不建立使用该类型值调用此方法。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 包含输入参数值的对象
@param targetSqlType 将发送给数据库的 SQL 类型（定义于 <code>java.sql.Types</code> 中）
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setObject(String parameterName, Object x, int targetSqlType) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 使用给定对象设置指定参数的值。此方法类似于上面的 <code>setObject</code> 方法，不同之处在于它假定 scale 为 0。

 @param parameterName 参数的名称
 @param x 包含输入参数值的对象
 @param targetSqlType 将发送给数据库的 SQL 类型（在 java.sql.Types 中定义）
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 <code>targetSqlType</code> 是 <code>ARRAY</code>、<code>BLOB</code>、<code>CLOB</code>、<code>DATALINK</code>、<code>JAVA_OBJECT</code>、<code>NCHAR</code>、<code>NCLOB</code>、<code>NVARCHAR</code>、<code>LONGNVARCHAR</code>、<code>REF</code>、<code>ROWID</code>、<code>SQLXML</code> 或 <code>STRUCT</code> 数据类型并且 JDBC 驱动程序不支持此数据类型
 @see #getObject
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setObject(String parameterName, Object x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定对象设置指定参数的值。第二个参数必须是 <code>Object</code> 类型；所以，应该对内置类型使用 <code>java.lang</code> 的等效对象。

<p>JDBC 规范指定一个从 Java <code>Object</code> 类型到 SQL 类型的标准映射关系。在发送到数据库之前，给定参数将被转换为相应的 SQL 类型。

<p>注意，通过使用特定于驱动程序的 Java 类型，此方法可用于传递特定于数据库的抽象数据类型。

如果对象是实现 <code>SQLData</code> 接口的类，则 JDBC 驱动程序应该调用 <code>SQLData.writeSQL</code> 方法将它写入 SQL 数据流中。另一方面，如果对象是实现 <code>Ref</code>、<code>Blob</code>、<code>Clob</code>、<code>NClob</code>、<code>Struct</code>、<code>java.net.URL</code> 或 <code>Array</code> 的类，则驱动程序应该将其作为相应 SQL 类型的值传递给数据库。
 <P>
如果出现混淆，例如该对象是实现多个上述指定接口的类，则此方法抛出异常。

 @param parameterName 参数的名称
 @param x 包含输入参数值的对象
 @exception SQLException 如果发生数据库访问错误，在关闭的 <code>CallableStatement</code> 上调用此方法或者给定 <code>Object</code> 参数不明确
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @see #getObject
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setObject(int parameterIndex, Object x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 Java <code>Object</code> 设置此 <code>RowSet</code> 对象命令中的指定参数。对于整数值，应该使用 <code>java.lang</code> 等效对象。

<p>JDBC 规范提供了一个从 Java Object 类型到 SQL 类型的标准映射关系。在将给定 Java 对象发送到数据库之前，驱动程序将其转换为其标准的 SQL 映射关系。

<p>注意，通过使用特定于驱动程序的 Java 类型，此方法可用于传递特定于数据库的抽象数据类型。

如果对象是实现 <code>SQLData</code> 的类，则 rowset 应该调用 <code>SQLData.writeSQL</code> 方法将对象写入 <code>SQLOutput</code> 数据流中。另一方面，如果对象是实现 <code>Ref</code>、<code>Blob</code>、<code>Clob</code>、<code>NClob</code>、<code>Struct</code>、<code>java.net.URL</code> 或 <code>Array</code> 的类，则驱动程序应该将其作为相应 SQL 类型的值传递给数据库。
 <P>
 <P>
如果出现混淆，例如如果该对象是实现多个这些接口的类，则抛出异常。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 包含输入参数值的对象
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setRef(int i, Ref x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定 <code>Ref</code> 值设置此 <code>RowSet</code> 对象命令中的指定参数。驱动程序将此值转换为适当的 <code>REF(&lt;结构化类型&gt;)</code> 值。

@param i 第一个参数是 1，第二个参数是 2 ……
@param x 一个对象，它表示 SQL <code>REF</code> 类型的数据
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setBlob(int i, Blob x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->

使用给定 <code>Blob</code> 值设置此 <code>RowSet</code> 对象命令中的指定参数。在将此值发送到数据库之前，驱动程序会将其转换为 <code>Blob</code> 对象表示的 <code>BLOB</code> 值。

@param i 第一个参数是 1，第二个参数是 2 ……
@param x 表示 BLOB 的对象
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setBlob(int parameterIndex, InputStream inputStream, long length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为 <code>InputStream</code> 对象。 inputstream 必须包含 length 所指定的字符数，否则，在执行 <code>PreparedStatement</code> 时将会生成 <code>SQLException</code>。此方法不同于 <code>setBinaryStream (int, InputStream, int)</code> 方法，因为它通知驱动程序参数值应该以 <code>BLOB</code> 的形式发送到服务器。使用 <code>setBinaryStream</code> 方法时，驱动程序必须做额外的工作来确定参数数据是以 <code>LONGVARBINARY</code> 还是 <code>BLOB</code> 的形式发送到服务器
 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
 @param inputStream 包含用来设置参数值的数据的对象。
 @param length 参数数据中的字节数。
 @throws SQLException 如果发生数据库访问错误；如果在关闭的 <code>PreparedStatement</code> 上调用此方法；如果 parameterIndex 不对应 SQL 语句中的参数标记；如果指定长度小于 0 或者 inputstream 中的字节数不匹配指定长度。
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setBlob(int parameterIndex, InputStream inputStream) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为 <code>InputStream</code> 对象。此方法不同于 <code>setBinaryStream (int, InputStream)</code> 方法，因为它通知驱动程序参数值应该以 <code>BLOB</code> 的形式发送到服务器。使用 <code>setBinaryStream</code> 方法时，驱动程序必须做额外的工作来确定参数数据是以 <code>LONGVARBINARY</code> 还是 <code>BLOB</code> 的形式发送到服务器

<P><B>注：</B> 请参考 JDBC 驱动程序文档确定使用带有长度参数的 <code>setBlob</code> 是否更有效。

 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
 @param inputStream 包含用来设置参数值的数据的对象。
 @throws SQLException 如果发生数据库访问错误，在关闭的 <code>PreparedStatement</code> 上调用此方法或者 parameterIndex 不对应 SQL 语句中的参数标记
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setBlob(String parameterName, InputStream inputStream, long length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为 <code>InputStream</code> 对象。<code>inputstream</code> 必须包含 length 所指定的字符数，否则，在执行 <code>CallableStatement</code> 时将会生成 <code>SQLException</code>。此方法不同于 <code>setBinaryStream (int, InputStream, int)</code> 方法，因为它通知驱动程序参数值应该以 <code>BLOB</code> 的形式发送到服务器。使用 <code>setBinaryStream</code> 方法时，驱动程序必须做额外的工作来确定参数数据是以 <code>LONGVARBINARY</code> 还是 <code>BLOB</code> 的形式发送到服务器。

 @param parameterName 要设置的参数名称

 @param inputStream 包含用来设置参数值的数据的对象。
 @param length 参数数据中的字节数。
 @throws SQLException  如果 parameterIndex 不对应 SQL 语句中的参数标记，或者指定长度小于 0；如果 inputstream 中的字节数不匹配指定长度；如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setBlob(String parameterName, Blob x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定的 <code>java.sql.Blob</code> 对象。在将此值发送到数据库时，驱动程序将其转换为 SQL <code>BLOB</code> 值。

 @param parameterName 参数的名称
 @param x 映射 SQL <code>BLOB</code> 值的 <code>Blob</code> 对象
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setBlob(String parameterName, InputStream inputStream) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为 <code>InputStream</code> 对象。此方法不同于 <code>setBinaryStream (int, InputStream)</code> 方法，因为它通知驱动程序参数值应该以 <code>BLOB</code> 的形式发送到服务器。使用 <code>setBinaryStream</code> 方法时，驱动程序必须做额外的工作来确定参数数据是以 <code>LONGVARBINARY</code> 还是 <code>BLOB</code> 的形式发送到服务器。

<P><B>注：</B> 请参考 JDBC 驱动程序文档确定使用带有长度参数的 <code>setBlob</code> 是否更有效。

 @param parameterName 参数的名称
 @param inputStream 包含用来设置参数值的数据的对象。
 @throws SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setClob(int i, Clob x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->

使用给定 <code>Clob</code> 值设置此 <code>RowSet</code> 对象命令中的指定参数。在将此值发送到数据库之前，驱动程序会将其转换为 <code>Clob</code> 对象表示的 <code>CLOB</code> 值。

@param i 第一个参数是 1，第二个参数是 2 ……
@param x 表示 CLOB 的对象
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setClob(int parameterIndex, Reader reader, long length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为 <code>Reader</code> 对象。reader 必须包含 length 所指定的字符数，否则，在执行 <code>PreparedStatement</code> 时将会生成 <code>SQLException</code>。此方法不同于 <code>setCharacterStream (int, Reader, int)</code> 方法，因为它通知驱动程序参数值应该以 <code>CLOB</code> 的形式发送到服务器。使用 <code>setCharacterStream</code> 方法时，驱动程序必须做额外的工作来确定参数数据是以 <code>LONGVARCHAR</code> 还是 <code>CLOB</code> 的形式发送到服务器。
 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
 @param reader 包含用来设置参数值的数据的对象。
 @param length 参数数据中的字符数。
 @throws SQLException 如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法；如果 parameterIndex 不对应 SQL 语句中的参数标记，或者指定长度小于 0。

 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setClob(int parameterIndex, Reader reader) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为 <code>Reader</code> 对象。此方法不同于 <code>setCharacterStream (int, Reader)</code> 方法，因为它通知驱动程序该参数值应该以 <code>CLOB</code> 的形式发送到服务器。使用 <code>setCharacterStream</code> 方法时，驱动程序必须做额外的工作来确定参数数据是以 <code>LONGVARCHAR</code> 还是 <code>CLOB</code> 的形式发送到服务器。

<P><B>注：</B> 请参考 JDBC 驱动程序文档确定使用带有长度参数的 <code>setClob</code> 是否更有效。

 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
 @param reader 包含用来设置参数值的数据的对象。
 @throws SQLException 如果发生数据库访问错误，在关闭的 <code>PreparedStatement</code> 上调用此方法或者 parameterIndex 不对应 SQL 语句中的参数标记

 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setClob(String parameterName, Reader reader, long length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为 <code>Reader</code> 对象。<code>reader</code> 必须包含 length 所指定的字符数，否则，在执行 <code>CallableStatement</code> 时将会生成 <code>SQLException</code>。此方法不同于 <code>setCharacterStream (int, Reader, int)</code> 方法，因为它通知驱动程序该参数值应该以 <code>CLOB</code> 的形式发送到服务器。使用 <code>setCharacterStream</code> 方法时，驱动程序必须做额外的工作来确定参数数据是以 <code>LONGVARCHAR</code> 还是 <code>CLOB</code> 的形式发送到服务器。
 @param parameterName 要设置的参数的名称
 @param reader 包含用来设置参数值的数据的对象。
 @param length 参数数据中的字符数。
 @throws SQLException 如果 parameterIndex 不对应 SQL 语句中的参数标记；如果指定长度小于 0；如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setClob(String parameterName, Clob x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定的 <code>java.sql.Clob</code> 对象。将此值发送到数据库时，驱动程序将其转换为 SQL <code>CLOB</code> 值。

 @param parameterName 参数的名称
 @param x 映射 SQL <code>CLOB</code> 值的 <code>Clob</code> 对象
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setClob(String parameterName, Reader reader) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为 <code>Reader</code> 对象。此方法不同于 <code>setCharacterStream (int, Reader)</code> 方法，因为它通知驱动程序该参数值应该以 <code>CLOB</code> 的形式发送到服务器。使用 <code>setCharacterStream</code> 方法时，驱动程序必须做额外的工作来确定参数数据是以 <code>LONGVARCHAR</code> 还是 <code>CLOB</code> 的形式发送到服务器。

<P><B>注：</B> 请参考 JDBC 驱动程序文档确定使用带有长度参数的 <code>setClob</code> 是否更有效。

 @param parameterName 参数的名称
 @param reader 包含用来设置参数值的数据的对象。
 @throws SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法

 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setArray(int i, Array x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->

使用给定 <code>Array</code> 值设置此 <code>RowSet</code> 对象命令中的指定参数。在将此值发送到数据库之前，驱动程序会将其转换为 <code>Array</code> 对象表示的 <code>ARRAY</code> 值。

@param i 第一个参数是 1，第二个参数是 2 ……
@param x 表示 SQL 数组的对象
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setDate(int parameterIndex, Date x, Calendar cal) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定 <code>java.sql.Date</code> 值设置此 <code>RowSet</code> 对象命令中的指定参数。驱动程序将此值转换为 SQL <code>DATE</code> 值，使用给定 <code>java.util.Calendar</code> 对象来计算日期。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 参数值
@param cal 用于计算日期的 <code>java.util.Calendar</code> 对象
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setDate(String parameterName, Date x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用运行应用程序的虚拟机所在的默认时区将指定参数设置为给定的 <code>java.sql.Date</code> 值。在将此值发送到数据库时，驱动程序将其转换为 SQL <code>DATE</code> 值。

 @param parameterName 参数的名称
 @param x 参数值
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @see #getDate
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setDate(String parameterName, Date x, Calendar cal) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定 <code>Calendar</code> 对象将指定参数设置为给定的 <code>java.sql.Date</code> 值。驱动程序使用 <code>Calendar</code> 对象构造一个 SQL <code>DATE</code> 值，该值随后被驱动程序发送到数据库。利用 <code>Calendar</code> 对象，驱动程序可以在考虑自定义时区的情况下计算日期。如果没有指定任何 <code>Calendar</code> 对象，则驱动程序使用默认时区，该时区是运行应用程序的虚拟机所在的时区。

 @param parameterName 参数的名称
 @param x 参数值
 @param cal 驱动程序将用来构造日期的 <code>Calendar</code> 对象
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @see #getDate
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setTime(int parameterIndex, Time x, Calendar cal) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定 <code>java.sql.Time</code> 值设置此 <code>RowSet</code> 对象命令中的指定参数。在将此值发送到数据库之前，驱动程序将其转换为 SQL <code>TIME</code> 值，使用给定 <code>java.util.Calendar</code> 对象来计算该值。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 参数值
@param cal 用于计算时间的 <code>java.util.Calendar</code> 对象
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setTime(String parameterName, Time x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定的 <code>java.sql.Time</code> 值。在将此值发送到数据库时，驱动程序将其转换为 SQL <code>TIME</code> 值。

 @param parameterName 参数的名称
 @param x 参数值
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @see #getTime
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setTime(String parameterName, Time x, Calendar cal) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定 <code>Calendar</code> 对象将指定参数设置为给定的 <code>java.sql.Time</code> 值。驱动程序使用 <code>Calendar</code> 对象构造一个 SQL <code>TIME</code> 值，该值随后被驱动程序发送到数据库。利用 <code>Calendar</code> 对象，驱动程序可以在考虑自定义时区的情况下计算时间。如果没有指定任何 <code>Calendar</code> 对象，则驱动程序使用默认时区，该时区是运行应用程序的虚拟机所在的时区。

 @param parameterName 参数的名称
 @param x 参数值
 @param cal 驱动程序将用来构造时间的 <code>Calendar</code> 对象
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @see #getTime
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定 <code>java.sql.Timestamp</code> 值设置此 <code>RowSet</code> 对象命令中的指定参数。在将此值发送到数据库之前，驱动程序将其转换为 SQL <code>TIMESTAMP</code> 值，使用给定 <code>java.util.Calendar</code> 对象来计算该值。

@param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
@param x 参数值
@param cal 用于计算时间戳的 <code>java.util.Calendar</code> 对象
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setTimestamp(String parameterName, Timestamp x, Calendar cal) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定 <code>Calendar</code> 对象将指定参数设置为给定的 <code>java.sql.Timestamp</code> 值。驱动程序使用 <code>Calendar</code> 对象构造一个 SQL <code>TIMESTAMP</code> 值，该值随后被驱动程序发送到数据库。利用 <code>Calendar</code> 对象，驱动程序可以在考虑自定义时区的情况下计算时间戳。如果没有指定任何 <code>Calendar</code> 对象，则驱动程序使用默认时区，该时区是运行应用程序的虚拟机所在的时区。

 @param parameterName 参数的名称
 @param x 参数值
 @param cal 驱动程序将用来构造时间戳的 <code>Calendar</code> 对象
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @see #getTimestamp
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.clearParameters() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
清除为此 <code>RowSet</code> 对象命令设置的参数。
<P>通常参数值对 <code>RowSet</code> 对象的重复使用仍然有效。设置一个参数值会自动清除其以前的值。不过，在某些情况下，直接释放当前参数值使用的资源也是很有用的；这可以通过调用 <code>clearParameters</code> 方法来实现。

@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.execute() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用数据填充此 <code>RowSet</code> 对象。  
 <P>
<code>execute</code> 方法可以使用以下属性来创建用于读取数据的连接：url、数据源名称、用户名、密码、事务隔离和类型映射表。
 
<code>execute</code> 方法可以使用以下属性来创建执行命令的语句：命令、只读、最大字段大小、最大行数、转义处理和查询超时值。
 <P>
如果没有设置必需的参数，则抛出异常。如果此方法执行成功，则丢弃 rowset 的当前内容，同时设置（或重置）rowset 的元数据。如果存在未执行的更新，则忽略它们。 
 <P>
如果此 <code>RowSet</code> 对象不维持与其数据源的连续连接，则它可以使用 reader（<code>RowSetReader</code> 对象）来填充数据。在此情况下，reader 应该已经在此 <code>RowSet</code> 对象中注册，并且 <code>execute</code> 方法将作为其实现的一部分调用 reader 的 <code>readData</code> 方法。

@exception SQLException 如果发生数据库访问错误，或者没有设置建立连接和创建语句所需的任何属性

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.addRowSetListener(RowSetListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
注册给定侦听器，以便此 <code>RowSet</code> 对象上发生事件时将得到通知。

@param listener 一个组件，它实现了 <code>RowSetListener</code> 接口并希望在此 <code>RowSet</code> 对象上发生事件时得到通知
@see #removeRowSetListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.removeRowSetListener(RowSetListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
从在此 <code>RowSet</code> 对象上发生事件时得到通知的组件所组成的列表中移除指定的侦听器。

@param listener 一个组件，它已注册为此 <code>RowSet</code> 对象的侦听器
@see #addRowSetListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setSQLXML(int parameterIndex, SQLXML xmlObject) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为给定 <code>java.sql.SQLXML</code> 对象。在将此值发送到数据库时，驱动程序将其转换为 SQL <code>XML</code> 值。
 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
 @param xmlObject 映射 SQL <code>XML</code> 值的 <code>SQLXML</code> 对象
 @throws SQLException 如果发生数据库访问错误，在关闭的结果集上调用此方法，没有为 <code>SQLXML</code> 对象关闭 <code>java.xml.transform.Result</code>、<code>Writer</code> 或 <code>OutputStream</code>，或者在处理 XML 值时发生错误。异常的 <code>getCause</code> 方法可以提供更详细的异常，例如，如果该流不包含有效的 XML。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setSQLXML(String parameterName, SQLXML xmlObject) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为给定的 <code>java.sql.SQLXML</code> 对象。在将此值发送到数据库时，驱动程序将其转换为 <code>SQL XML</code> 值。 
 @param parameterName 参数的名称
 @param xmlObject 映射 <code>SQL XML</code> 值的 <code>SQLXML</code> 对象
 @throws SQLException 如果发生数据库访问错误，在关闭的结果集上调用此方法，没有为 <code>SQLXML</code> 对象关闭 <code>java.xml.transform.Result</code>、<code>Writer</code> 或 <code>OutputStream</code>，或者在处理 XML 值时发生错误。异常的 <code>getCause</code> 方法可以提供更详细的异常，例如，如果该流不包含有效的 XML。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setRowId(int parameterIndex, RowId x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定的 <code>java.sql.RowId</code> 对象。在将此值发送到数据库时，驱动程序将其转换为 SQL <code>ROWID</code> 值。  

 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
 @param x 参数值
 @throws SQLException 如果发生数据库访问错误

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setRowId(String parameterName, RowId x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为给定的 <code>java.sql.RowId</code> 对象。在将此值发送到数据库时，驱动程序将其转换为 SQL <code>ROWID</code>。  

 @param parameterName 参数的名称
 @param x 参数值
 @throws SQLException 如果发生数据库访问错误
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setNString(int parameterIndex, String value) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定的 <code>String</code> 对象。在将此值发送到数据库时，驱动程序将其转换为 SQL <code>NCHAR</code>、<code>NVARCHAR</code> 或 <code>LONGNVARCHAR</code> 值（具体取决于该参数相对于驱动程序在 <code>NVARCHAR</code> 值上的限制的大小）。 

 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
 @param value 参数值
 @throws SQLException 如果驱动程序不支持国家字符集；如果驱动程序检测到可能发生数据转换错误；或者发生数据库访问错误
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setNString(String parameterName, String value) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为给定的 <code>String</code> 对象。驱动程序将此值转换为 SQL <code>NCHAR</code>、<code>NVARCHAR</code> 或 <code>LONGNVARCHAR</code>
 @param parameterName 要设置的列的名称
 @param value 参数值
 @throws SQLException 如果驱动程序不支持国家字符集；如果驱动程序检测到可能发生数据转换错误；或者发生数据库访问错误
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setNCharacterStream(int parameterIndex, Reader value, long length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为 <code>Reader</code> 对象。<code>Reader</code> 读取数据，一直读取到文件末尾。驱动程序将执行从 Java 字符格式到数据库中国家字符集的必要转换。
 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
 @param value 参数值
 @param length 参数数据中的字符数。
 @throws SQLException 如果驱动程序不支持国家字符集；如果驱动程序检测到可能发生数据转换错误；或者发生数据库访问错误
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setNCharacterStream(String parameterName, Reader value, long length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为 <code>Reader</code> 对象。<code>Reader</code> 读取数据，一直读取到文件末尾。驱动程序将执行从 Java 字符格式到数据库中国家字符集的必要转换。
 @param parameterName 要设置的列的名称
 @param value 参数值
 @param length 参数数据中的字符数。
 @throws SQLException 如果驱动程序不支持国家字符集；如果驱动程序检测到可能发生数据转换错误；或者发生数据库访问错误
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setNCharacterStream(String parameterName, Reader value) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为 <code>Reader</code> 对象。<code>Reader</code> 读取数据，一直读取到文件末尾。驱动程序将执行从 Java 字符格式到数据库中国家字符集的必要转换。

<P><B>注：</B> 此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。
<P><B>注：</B> 请参考 JDBC 驱动程序文档确定使用带有长度参数的 <code>setNCharacterStream</code> 是否更有效。

 @param parameterName 参数的名称
 @param value 参数值 
 @throws SQLException 如果驱动程序不支持国家字符集；如果驱动程序检测到可能发生数据转换错误；如果发生数据库访问错误；或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setNClob(String parameterName, NClob value) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为 <code>java.sql.NClob</code> 对象。该对象实现 <code>java.sql.NClob</code> 接口。此 <code>NClob</code> 对象映射到 SQL <code>NCLOB</code>。
 @param parameterName 要设置的列的名称
 @param value 参数值 
 @throws SQLException 如果驱动程序不支持国家字符集；如果驱动程序检测到可能发生数据转换错误；或者发生数据库访问错误
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setNClob(String parameterName, Reader reader, long length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为 <code>Reader</code> 对象。<code>reader</code> 必须包含 length 所指定的字符数，否则，在执行 <code>CallableStatement</code> 时将会生成 <code>SQLException</code>。此方法不同于 <code>setCharacterStream (int, Reader, int)</code> 方法，因为它通知驱动程序该参数值应该以 <code>NCLOB</code> 的形式发送到服务器。使用 <code>setCharacterStream</code> 方法时，驱动程序必须做额外的工作来确定参数数据是以 <code>LONGNVARCHAR</code> 还是 <code>NCLOB</code> 的形式发送到服务器。

 @param parameterName 要设置的参数的名称
 @param reader 包含用来设置参数值的数据的对象。
 @param length 参数数据中的字符数。
 @throws SQLException 如果 parameterIndex 不对应 SQL 语句中的参数标记；如果指定长度小于 0；如果驱动程序不支持国家字符集；如果驱动程序检测到可能发生数据转换错误；如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setNClob(String parameterName, Reader reader) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为 <code>Reader</code> 对象。此方法不同于 <code>setCharacterStream (int, Reader)</code> 方法，因为它通知驱动程序该参数值应该以 <code>NCLOB</code> 的形式发送到服务器。使用 <code>setCharacterStream</code> 方法时，驱动程序必须做额外的工作来确定参数数据是以 <code>LONGNVARCHAR</code> 还是 <code>NCLOB</code> 的形式发送到服务器。
<P><B>注：</B> 请参考 JDBC 驱动程序文档确定使用带有长度参数的 <code>setNClob</code> 是否更有效。

 @param parameterName 参数的名称
 @param reader 包含用来设置参数值的数据的对象。
 @throws SQLException 如果驱动程序不支持国家字符集；如果驱动程序检测到可能发生数据转换错误；如果发生数据库访问错误或者在关闭的 <code>CallableStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setNClob(int parameterIndex, Reader reader, long length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为 <code>Reader</code> 对象。reader 必须包含 length 所指定的字符数，否则，在执行 <code>PreparedStatement</code> 时将会生成 <code>SQLException</code>。此方法不同于 <code>setCharacterStream (int, Reader, int)</code> 方法，因为它通知驱动程序该参数值应该以 <code>NCLOB</code> 的形式发送到服务器。使用 <code>setCharacterStream</code> 方法时，驱动程序必须做额外的工作来确定参数数据是以 <code>LONGNVARCHAR</code> 还是 <code>NCLOB</code> 的形式发送到服务器。
 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
 @param reader 包含用来设置参数值的数据的对象。
 @param length 参数数据中的字符数。
 @throws SQLException 如果 parameterIndex 不对应 SQL 语句中的参数标记；如果指定长度小于 0；如果驱动程序不支持国家字符集；如果驱动程序检测到可能发生数据转换错误；如果发生数据库访问错误或者在关闭的 <code>PreparedStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setNClob(int parameterIndex, NClob value) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为 <code>java.sql.NClob</code> 对象。在将此值发送到数据库时，驱动程序将其转换为 SQL <code>NCLOB</code> 值。
 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
 @param value 参数值
 @throws SQLException 如果驱动程序不支持国家字符集；如果驱动程序检测到可能发生数据转换错误；如果发生数据库访问错误
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setNClob(int parameterIndex, Reader reader) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为 <code>Reader</code> 对象。此方法不同于 <code>setCharacterStream (int, Reader)</code> 方法，因为它通知驱动程序该参数值应该以 <code>NCLOB</code> 的形式发送到服务器。使用 <code>setCharacterStream</code> 方法时，驱动程序必须做额外的工作来确定参数数据是以 <code>LONGNVARCHAR</code> 还是 <code>NCLOB</code> 的形式发送到服务器。
<P><B>注：</B> 请参考 JDBC 驱动程序文档确定使用带有长度参数的 <code>setNClob</code> 是否更有效。

 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
 @param reader 包含用来设置参数值的数据的对象。
 @throws SQLException 如果 parameterIndex 不对应 SQL 语句中的参数标记；如果驱动程序不支持国家字符集；如果驱动程序检测到可能发生数据转换错误；如果发生数据库访问错误或者在关闭的 <code>PreparedStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.RowSet.setURL(int parameterIndex, URL x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为给定的 <code>java.net.URL</code> 值。在将此值发送到数据库时，驱动程序将其转换为 SQL <code>DATALINK</code> 值。

 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2 ……
 @param x 要设置的 <code>java.net.URL</code> 对象
 @exception SQLException 如果发生数据库访问错误或者在关闭的 <code>PreparedStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
 @since 1.4

<!-- END DATA -->
