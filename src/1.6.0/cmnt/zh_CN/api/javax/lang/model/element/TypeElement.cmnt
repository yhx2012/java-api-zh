<!-- BEGIN KEY -->
public interface javax.lang.model.element.TypeElement extends javax.lang.model.element.Element
<!-- END KEY -->
<!-- BEGIN DATA -->
表示一个类或接口程序元素。提供对有关类型及其成员的信息的访问。注意，枚举类型是一种类，而注释类型是一种接口。

<p> <a name="ELEM_VS_TYPE"></a> {@code TypeElement} 表示一个类或接口<i>元素</i>，而 {@link DeclaredType} 表示一个类或接口<i>类型</i>，后者将成为前者的一种使用（或<i>调用</i>）。这种区别对于一般的类型是最明显的，对于这些类型，单个元素可以定义一系列完整的类型。例如，元素 {@code java.util.Set} 对应于参数化类型 {@code java.util.Set<String>} 和 {@code java.util.Set<Number>}（以及其他许多类型），还对应于原始类型 {@code java.util.Set}。

<p> 此接口每一个都返回元素列表的方法都将按照这些元素在程序信息底层源代码中的自然顺序返回它们。例如，如果信息的底层源代码是 Java 源代码，则按照源代码顺序返回这些元素。

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@version 1.8 06/08/15
@see DeclaredType
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.element.NestingKind javax.lang.model.element.TypeElement.getNestingKind()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此类型元素的<i>嵌套种类 (nesting kind)</i>。

@return 此类型元素的嵌套种类

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.element.Name javax.lang.model.element.TypeElement.getQualifiedName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此类型元素的完全限定名称。更准确地说，返回<i>规范</i> 名称。对于没有规范名称的局部类和匿名类，返回一个空名称。

<p>一般类型的名称不包括对其形式类型参数的任何引用。例如，接口 {@code java.util.Set<E>} 的完全限定名称是 &quot;{@code java.util.Set}&quot;。嵌套类型使用 &quot;{@code .}&quot; 作为分隔符，如 &quot;{@code java.util.Map.Entry}&quot; 中所示。

@return 此类或接口的完全限定名称；如果没有，则返回一个空名称

@see Elements#getBinaryName
@jls3 6.7 Fully Qualified Names and Canonical Names

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.type.TypeMirror javax.lang.model.element.TypeElement.getSuperclass()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此类型元素的直接超类。如果此类型元素表示一个接口或者类 {@code java.lang.Object}，则返回一个种类为 {@link TypeKind#NONE NONE} 的 {@link NoType}。

@return 直接超类；如果没有，则返回 {@code NoType}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<? extends javax.lang.model.type.TypeMirror> javax.lang.model.element.TypeElement.getInterfaces()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回直接由此类实现或直接由此接口扩展的接口类型。

@return 直接由此类实现或直接由此接口扩展的接口类型；如果没有，则返回一个空列表

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<? extends javax.lang.model.element.TypeParameterElement> javax.lang.model.element.TypeElement.getTypeParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->
按照声明顺序返回此类型元素的形式类型参数。

@return 形式类型参数；如果没有，则返回一个空列表

<!-- END DATA -->
