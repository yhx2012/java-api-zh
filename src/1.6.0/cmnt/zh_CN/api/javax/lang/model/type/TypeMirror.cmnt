<!-- BEGIN KEY -->
public interface javax.lang.model.type.TypeMirror
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 Java 编程语言中的类型。这些类型包括基本类型、声明类型（类和接口类型）、数组类型、类型变量和 null 类型。还可以表示通配符类型参数、executable 的签名和返回类型，以及对应于包和关键字 {@code void} 的伪类型。

<p> 应该使用 {@link Types} 中的实用工具方法比较这些类型。不保证总是使用相同的对象表示某个特定的类型。

<p> 要实现基于 {@code TypeMirror} 对象类的操作，可以使用 {@linkplain TypeVisitor visitor} 或者使用 {@link #getKind} 方法的结果。使用 {@code instanceof} 确定此建模层次结构中某一对象的有效类 <em>未必</em> 可靠，因为一个实现可以选择让单个对象实现多个 {@code TypeMirror} 子接口。

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@version 1.6 06/08/03
@see Element
@see Types
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.type.TypeKind javax.lang.model.type.TypeMirror.getKind()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此类型的 {@code kind}。

@return 此类型的种类

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.lang.model.type.TypeMirror.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
遵守 {@link Object#equals Object.equals} 的常规协定。但是，此方法并不指示两个类型是否表示相同的类型。类型相等性的语义比较应该使用 {@link Types#isSameType(TypeMirror, TypeMirror)}。{@code t1.equals(t2)} 和 {@code Types.isSameType(t1, t2)} 的结果可能有所不同。

@param  obj 将与此类型进行比较的对象 
@return 如果指定的对象与此对象相等，则返回 {@code true}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.lang.model.type.TypeMirror.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
遵守 {@link Object#hashCode Object.hashCode} 的常规协定。

@see #equals

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.lang.model.type.TypeMirror.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含此类型许多信息的字符串表示形式。如果可能，字符串应该是适用于表示源代码中此类型的一种形式。结果中嵌套的任何名称都应该是限定名称（如果有）。

@return  此类型的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.type.TypeMirror.accept(javax.lang.model.type.TypeVisitor<R, P> v, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 visitor 应用于此类型。

@param <R> visitor 的方法的返回类型
@param<P> visitor 的方法的附加参数类型
@param v   在此类型上操作的 visitor
@param p visitor 的附加参数
@return 特定于 visitor 的结果

<!-- END DATA -->
