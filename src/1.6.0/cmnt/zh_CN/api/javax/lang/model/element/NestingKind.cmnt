<!-- BEGIN KEY -->
public final class javax.lang.model.element.NestingKind extends java.lang.Enum
<!-- END KEY -->
<!-- BEGIN DATA -->
某一类型元素的<i>嵌套种类 (nesting kind)</i>。类型元素的种类有四种：top-level（顶层）、member（成员）、local（局部）和 anonymous（匿名）。<i>嵌套种类</i> 是一个非标准术语，在这里使用它是为了表示这种分类。

<p>注意，在平台的未来版本中可能添加其他嵌套种类。

<p><b>示例：</b> 以下类是使用其嵌套种类注释的。
 <blockquote><pre>

import java.lang.annotation.*;
 import static java.lang.annotation.RetentionPolicy.*;
 import javax.lang.model.element.*;
 import static javax.lang.model.element.NestingKind.*;
 
 &#64;Nesting(TOP_LEVEL)
 public class NestingExamples {
     &#64;Nesting(MEMBER)
     static class MemberClass1{}
 
     &#64;Nesting(MEMBER)
     class MemberClass2{}
 
     public static void main(String... argv) {
         &#64;Nesting(LOCAL)
         class LocalClass{};
 
         Class&lt;?&gt;[] classes = {
             NestingExamples.class,
             MemberClass1.class,
             MemberClass2.class,
             LocalClass.class
         };	
 
         for(Class&lt;?&gt; clazz : classes) {
             System.out.format("%s is %s%n",
                               clazz.getName(),
                               clazz.getAnnotation(Nesting.class).value());
         }
     }
 }
 
 &#64;Retention(RUNTIME)
 &#64;interface Nesting {
     NestingKind value();
 }
 </pre></blockquote>

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@version 1.3 06/07/17
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.lang.model.element.NestingKind.isNested()
<!-- END KEY -->
<!-- BEGIN DATA -->
此常量是否对应于嵌套类型元素？<i>嵌套 (nested)</i> 类型元素是任何非顶层的元素。<i>内部 (inner)</i> 类型元素是任何非 {@linkplain Modifier#STATIC static} 的嵌套类型元素。

<!-- END DATA -->
