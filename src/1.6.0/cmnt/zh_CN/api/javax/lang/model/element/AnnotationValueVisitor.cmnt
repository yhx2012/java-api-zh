<!-- BEGIN KEY -->
public interface javax.lang.model.element.AnnotationValueVisitor
<!-- END KEY -->
<!-- BEGIN DATA -->
注释类型元素值的 visitor，使用 visitor 设计模式的变体。标准 visitor 基于类型层次结构成员的具体类型进行调度，与它不同，此 visitor 基于存储数据的类型进行调度；对于存储，没有不同的子类，例如 {@code boolean} 值和 {@code int} 值。在编译时某个值的类型未知时，实现此接口的类被用来对该值进行操作。在将 visitor 传递给某个值的 {@link AnnotationValue#accept accept} 方法时，适用于该值的 <tt>visit<i>XYZ</i></tt> 方法将被调用。

<p> 如果附加参数 {@code p} 为 {@code null}，则实现此接口的类有可能抛出 {@code NullPointerException}；有关详细信息，请参阅实现类的文档。
 
<p> <b>警告：</b> 以后可能会向此接口添加一些方法，以适应添加到 Java&trade; 编程语言未来版本中的新（当前未知的）语言结构。所以，直接实现此接口的 visitor 类可能与平台的未来版本不兼容。为了避免这种不兼容性，建议 visitor 实现扩展实现此接口的抽象 visitor 类。不过，API 通常应该使用此 visitor 接口作为参数类型、返回类型等，而不是将它作为抽象类之一。

@param <R> 此 visitor 的方法的返回类型
@param<P> 此 visitor 的方法的附加参数类型。
@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@version 1.6 06/07/31
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visit(AnnotationValue av, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问注释值。
@param av 要访问的值
@param p 特定于 visitor 的参数
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visit(AnnotationValue av)
<!-- END KEY -->
<!-- BEGIN DATA -->
等效于 {@code v.visit(av, null)} 的便捷方法。
@param av 要访问的值
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitBoolean(boolean b, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问注释中的 {@code boolean} 值。
@param b 要访问的值
@param p 特定于 visitor 的参数
@return 访问结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitByte(byte b, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问注释中的 {@code byte} 值。
@param b 要访问的值
@param p 特定于 visitor 的参数
@return 访问结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitChar(char c, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问注释中的 {@code char} 值。
@param c 要访问的值
@param p 特定于 visitor 的参数
@return 访问结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitDouble(double d, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问注释中的 {@code double} 值。
@param d 要访问的值
@param p 特定于 visitor 的参数
@return 访问结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitFloat(float f, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问注释中的 {@code float} 值。
@param f 要访问的值
@param p 特定于 visitor 的参数
@return 访问结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitInt(int i, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问注释中的 {@code int} 值。
@param i 要访问的值
@param p 特定于 visitor 的参数
@return 访问结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitLong(long i, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问注释中的 {@code long} 值。
@param i 要访问的值
@param p 特定于 visitor 的参数
@return 访问结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitShort(short s, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问注释中的 {@code short} 值。
@param s 要访问的值
@param p 特定于 visitor 的参数
@return 访问结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitString(String s, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问注释中的 string 值。
@param s 要访问的值
@param p 特定于 visitor 的参数
@return 访问结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitType(TypeMirror t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问注释中的 type 值。
@param t 要访问的值
@param p 特定于 visitor 的参数
@return 访问结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitEnumConstant(VariableElement c, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问注释中的 {@code enum} 值。
@param c 要访问的值
@param p 特定于 visitor 的参数
@return 访问结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitAnnotation(AnnotationMirror a, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问注释中的 annotation 值。
@param a 要访问的值
@param p 特定于 visitor 的参数
@return 访问结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitArray(java.util.List<? extends javax.lang.model.element.AnnotationValue> vals, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问注释中的 array 值。
@param vals 要访问的值
@param p 特定于 visitor 的参数
@return 访问结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitUnknown(AnnotationValue av, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问未知种类的注释值。如果语言有所发展并且新类型的值可以存储在注释中，则会发生这种情况。
@param  av 要访问的未知值
@param  p 特定于 visitor 的参数
@return 访问结果
@throws UnknownAnnotationValueException  visitor 实现可以有选择地抛出此异常

<!-- END DATA -->
