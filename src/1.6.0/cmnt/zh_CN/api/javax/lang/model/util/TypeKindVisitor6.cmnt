<!-- BEGIN KEY -->
public class javax.lang.model.util.TypeKindVisitor6 extends javax.lang.model.util.SimpleTypeVisitor6
<!-- END KEY -->
<!-- BEGIN DATA -->
基于其{@linkplain TypeKind 种类}的类型 visitor，具有适用于 {@link SourceVersion#RELEASE_6 RELEASE_6} 源版本的默认行为。对于可能有多个种类的{@linkplain TypeMirror 类型} <tt><i>XYZ</i></tt>，此类中的 <tt>visit<i>XYZ</i></tt> 方法委托给对应于第一个参数种类的 <tt>visit<i>XYZKind</i></tt> 方法。<tt>visit<i>XYZKind</i></tt> 方法调用 {@link #defaultAction defaultAction}，并将其参数传递给 {@code defaultAction} 的对应参数。
 
<p> 根据常规协定，可以重写此类中的方法。注意，具有 {@link java.lang.Override @Override} 的具体子类中的注释方法可以帮助确定那些打算重写的方法。
 
<p> <b>警告：</b> 以后可能会向此类实现的 {@code TypeVisitor} 接口添加一些方法，以适应添加到 Java&trade; 编程语言未来版本中的新（当前未知的）语言结构。所以，将来可能会向此类添加名称以 {@code "visit"} 开头的方法；为了避免不兼容，扩展此类的类不应该声明任何名称以 {@code "visit"} 开头的实例方法。
 
<p>在添加一个这样的新 visit 方法时，此类中的默认实现将调用 {@link #visitUnknown visitUnknown} 方法。还将引入新的类型种类 visitor 类，以对应新的语言级别；此 visitor 针对相关 visit 方法有不同的默认行为。在引入新的 visitor 时，此 visitor 的全部或部分可能过时。

@param <R> 此 visitor 的方法的返回类型。对于不需要返回结果的 visitor，使用 {@link Void}。
@param<P> 此 visitor 的方法的附加参数类型。对于不需要附加参数的 visitor，使用 {@code Void}。

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@version 1.6 06/08/07
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.lang.model.util.TypeKindVisitor6()
<!-- END KEY -->
<!-- BEGIN DATA -->
要调用的具体子类的构造方法；使用 {@code null} 作为默认值。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.lang.model.util.TypeKindVisitor6(R defaultValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
要调用的具体子类的构造方法；使用参数作为默认值。

@param defaultValue 为 {@link #DEFAULT_VALUE} 分配的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.TypeKindVisitor6.visitPrimitive(PrimitiveType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问基本类型，指派给用于以下特定的基本类型{@linkplain TypeKind 种类}的 visit 方法：{@code BOOLEAN}、{@code BYTE} 等。

@param t {@inheritDoc}
@param p {@inheritDoc}
@return  特定种类的 visit 方法的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsBoolean(PrimitiveType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code BOOLEAN} 基本类型。

@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsByte(PrimitiveType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code BYTE} 基本类型。

@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsShort(PrimitiveType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code SHORT} 基本类型。

@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsInt(PrimitiveType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code INT} 基本类型。

@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsLong(PrimitiveType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code LONG} 基本类型。

@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsChar(PrimitiveType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code CHAR} 基本类型。

@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsFloat(PrimitiveType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code FLOAT} 基本类型。

@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsDouble(PrimitiveType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code DOUBLE} 基本类型。

@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.TypeKindVisitor6.visitNoType(NoType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问 {@link NoType} 实例，指派给用于以下特定的伪类型{@linkplain TypeKind 种类}的 visit 方法：{@code VOID}、{@code PACKAGE} 或 {@code NONE}。

@param t {@inheritDoc}
@param p {@inheritDoc}
@return  特定种类的 visit 方法的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.TypeKindVisitor6.visitNoTypeAsVoid(NoType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@link TypeKind#VOID VOID} 伪类型。

@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.TypeKindVisitor6.visitNoTypeAsPackage(NoType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@link TypeKind#PACKAGE PACKAGE} 伪类型。

@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.TypeKindVisitor6.visitNoTypeAsNone(NoType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@link TypeKind#NONE NONE} 伪类型。

@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
