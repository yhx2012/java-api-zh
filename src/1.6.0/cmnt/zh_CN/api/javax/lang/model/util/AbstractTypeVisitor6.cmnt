<!-- BEGIN KEY -->
public abstract class javax.lang.model.util.AbstractTypeVisitor6 extends java.lang.Object implements javax.lang.model.type.TypeVisitor
<!-- END KEY -->
<!-- BEGIN DATA -->
类型的骨干 visitor，具有适用于第 6 版语言级别的默认行为。
 
<p> <b>警告：</b> 以后可能会向此类实现的 {@code TypeVisitor} 接口添加一些方法，以适应添加到 Java&trade; 编程语言未来版本中的新（当前未知的）语言结构。所以，将来可能会向此类添加名称以 {@code &quot;visit&quot;} 开头的方法；为了避免不兼容，扩展此类的类不应该声明任何名称以 {@code &quot;visit&quot;} 开头的实例方法。
 
<p>在添加一个这样的新 visit 方法时，此类中的默认实现将调用 {@link #visitUnknown visitUnknown} 方法。还将引入新的抽象类型 visitor 类，以对应新的语言级别；此 visitor 针对相关 visit 方法有不同的默认行为。在引入新的 visitor 时，此 visitor 的全部或部分可能过时。

@param <R> 此 visitor 的方法的返回类型。对于不需要返回结果的 visitor，使用 {@link Void}。
@param<P> 此 visitor 的方法的附加参数类型。对于不需要附加参数的 visitor，使用 {@code Void}。

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@version 1.4 06/07/31
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.lang.model.util.AbstractTypeVisitor6()
<!-- END KEY -->
<!-- BEGIN DATA -->
要调用的具体子类的构造方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final R javax.lang.model.util.AbstractTypeVisitor6.visit(TypeMirror t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问任何类型镜像，如同将自身传递给该类型镜像的 {@link TypeMirror#accept accept} 方法一样。调用 {@code v.visit(t, p)} 等效于调用 {@code t.accept(v, p)}。

@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public final R javax.lang.model.util.AbstractTypeVisitor6.visit(TypeMirror t)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问任何类型镜像，如同将自身传递给该类型镜像的 {@link TypeMirror#accept accept} 方法，并为附加参数传递 {@code null} 一样。调用 {@code v.visit(t)} 等效于调用 {@code t.accept(v, null)}。

@param t  要访问的类型
@return 特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.AbstractTypeVisitor6.visitUnknown(TypeMirror t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}

<p> {@code AbstractTypeVisitor6} 中此方法的默认实现将总是抛出 {@code UnknownTypeException}。子类不需要此行为。

@param t  要访问的类型
@return 特定于 visitor 的结果
@throws UnknownTypeException visitor 实现可以有选择地抛出此异常

<!-- END DATA -->
