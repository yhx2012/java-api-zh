<!-- BEGIN KEY -->
public class javax.lang.model.util.ElementKindVisitor6 extends javax.lang.model.util.SimpleElementVisitor6
<!-- END KEY -->
<!-- BEGIN DATA -->
基于其 {@linkplain ElementKind kind} 的程序元素的 visitor，具有适用于 {@link SourceVersion#RELEASE_6 RELEASE_6} 源版本的默认行为。对于可能有多个种类的{@linkplain Element 元素} <tt><i>XYZ</i></tt>，此类中的 <tt>visit<i>XYZ</i></tt> 方法委托给对应于第一个参数种类的 <tt>visit<i>XYZKind</i></tt> 方法。<tt>visit<i>XYZKind</i></tt> 方法调用 {@link #defaultAction defaultAction}，并将其参数传递给 {@code defaultAction} 的对应参数。

<p> 根据常规协定，可以重写此类中的方法。注意，具有 {@link java.lang.Override @Override} 的具体子类中的注释方法可以帮助确定那些打算重写的方法。
 
<p> <b>警告：</b> 以后可能会向此类实现的 {@code ElementVisitor} 接口添加一些方法，或者向在这里使用的 {@code ElementKind} {@code enum} 添加一些常量，以适应添加到 Java&trade; 编程语言未来版本中的新（当前未知的）语言结构。所以，将来可能会向此类添加名称以 {@code "visit"} 开头的方法；为了避免不兼容，扩展此类的类不应该声明任何名称以 {@code "visit"} 开头的实例方法。
 
<p>在添加一个这样的新 visit 方法时，此类中的默认实现将调用 {@link #visitUnknown visitUnknown} 方法。还将引入新的抽象元素种类 visitor 类，以对应新的语言级别；此 visitor 针对相关 visit 方法有不同的默认行为。在引入新的 visitor 时，此 visitor 的全部或部分可能过时。

@param <R> 此 visitor 的方法的返回类型。对于不需要返回结果的 visitor，使用 {@link Void}。
@param<P> 此 visitor 的方法的附加参数类型。对于不需要附加参数的 visitor，使用 {@code Void}。

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@version 1.5 06/08/07
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.lang.model.util.ElementKindVisitor6()
<!-- END KEY -->
<!-- BEGIN DATA -->
具体子类的构造方法；使用 {@code null} 作为默认值。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.lang.model.util.ElementKindVisitor6(R defaultValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
具体子类的构造方法；使用参数作为默认值。

@param defaultValue 为 {@link #DEFAULT_VALUE} 分配的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitPackage(PackageElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}

元素参数的种类为 {@code PACKAGE}。

@param e {@inheritDoc}
@param p {@inheritDoc}
@return  {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitType(TypeElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问类型元素，指派给用于特定的类型{@linkplain ElementKind 种类} {@code ANNOTATION_TYPE}、{@code CLASS}、{@code ENUM} 或 {@code INTERFACE} 的 visit 方法。

@param e {@inheritDoc}
@param p {@inheritDoc}
@return  特定于种类的 visit 方法的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitTypeAsAnnotationType(TypeElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code ANNOTATION_TYPE} 类型元素。

@param e 要访问的元素
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitTypeAsClass(TypeElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code CLASS} 类型元素。

@param e 要访问的元素
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitTypeAsEnum(TypeElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code ENUM} 类型元素。

@param e 要访问的元素
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitTypeAsInterface(TypeElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code INTERFACE} 类型元素。
@param e 要访问的元素
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitVariable(VariableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问变量元素，指派给用于特定的变量{@linkplain ElementKind 种类} {@code ENUM_CONSTANT}、{@code EXCEPTION_PARAMETER}、{@code FIELD}、{@code LOCAL_VARIABLE} 或 {@code PARAMETER} 的 visit 方法。
@param e {@inheritDoc}
@param p {@inheritDoc}
@return  特定于种类的 visit 方法的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitVariableAsEnumConstant(VariableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code ENUM_CONSTANT} 变量元素。

@param e 要访问的元素
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitVariableAsExceptionParameter(VariableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code EXCEPTION_PARAMETER} 变量元素。

@param e 要访问的元素
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitVariableAsField(VariableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code FIELD} 变量元素。

@param e 要访问的元素
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitVariableAsLocalVariable(VariableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code LOCAL_VARIABLE} 变量元素。

@param e 要访问的元素
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitVariableAsParameter(VariableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code PARAMETER} 变量元素。

@param e 要访问的元素
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitExecutable(ExecutableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问 executable 元素，指派给用于特定的 executable {@linkplain ElementKind 种类} {@code CONSTRUCTOR}、{@code INSTANCE_INIT}、{@code METHOD} 或 {@code STATIC_INIT} 的 visit 方法。

@param e {@inheritDoc}
@param p {@inheritDoc}
@return  特定于种类的 visit 方法的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitExecutableAsConstructor(ExecutableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code CONSTRUCTOR} executable 元素。

@param e 要访问的元素
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitExecutableAsInstanceInit(ExecutableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code INSTANCE_INIT} executable 元素。

@param e 要访问的元素
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitExecutableAsMethod(ExecutableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code METHOD} executable 元素。

@param e 要访问的元素
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitExecutableAsStaticInit(ExecutableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code defaultAction} 访问 {@code STATIC_INIT} executable 元素。

@param e 要访问的元素
@param p 特定于 visitor 的参数
@return  {@code defaultAction} 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitTypeParameter(TypeParameterElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}

元素参数的种类为 {@code TYPE_PARAMETER}。

@param e {@inheritDoc}
@param p {@inheritDoc}
@return  {@inheritDoc}

<!-- END DATA -->
