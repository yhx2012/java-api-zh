<!-- BEGIN KEY -->
public interface javax.lang.model.element.ExecutableElement extends javax.lang.model.element.Element
<!-- END KEY -->
<!-- BEGIN DATA -->
表示某个类或接口的方法、构造方法或初始化程序（静态或实例），包括注释类型元素。

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@version 1.4 06/07/11
@see ExecutableType
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<? extends javax.lang.model.element.TypeParameterElement> javax.lang.model.element.ExecutableElement.getTypeParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->
按照声明顺序返回此 executable 的形式类型参数。

@return 形式类型参数；如果没有，则返回一个空列表

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.type.TypeMirror javax.lang.model.element.ExecutableElement.getReturnType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 executable 的返回类型。如果此 executable 不是一个方法或者是一个不返回值的方法，则返回一个种类为 {@link TypeKind#VOID VOID} 的 {@link NoType}。

@return 此 executable 的返回类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<? extends javax.lang.model.element.VariableElement> javax.lang.model.element.ExecutableElement.getParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 executable 的形参。按声明顺序返回这些参数。

@return 形参；如果没有，则返回一个空列表

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.lang.model.element.ExecutableElement.isVarArgs()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此方法或构造方法接受可变数量的参数，则返回 {@code true}，否则返回 {@code false}。

@return 如果此方法或构造方法接受可变数量的参数，则返回 {@code true}，否则返回 {@code false}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<? extends javax.lang.model.type.TypeMirror> javax.lang.model.element.ExecutableElement.getThrownTypes()
<!-- END KEY -->
<!-- BEGIN DATA -->
按声明顺序返回此方法或构造方法的 {@code throws} 子句中所列出的异常和其他 throwable。

@return {@code throws} 子句中所列出的异常和其他 throwable；如果没有，则返回一个空列表

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.element.AnnotationValue javax.lang.model.element.ExecutableElement.getDefaultValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 executable 是一个注释类型元素，则返回默认值。如果此方法不是注释类型元素，或者它是一个没有默认值的注释类型元素，则返回 {@code null}。

@return 默认值；如果没有，则返回 {@code null}

<!-- END DATA -->
