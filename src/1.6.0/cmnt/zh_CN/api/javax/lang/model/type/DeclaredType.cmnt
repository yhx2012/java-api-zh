<!-- BEGIN KEY -->
public interface javax.lang.model.type.DeclaredType extends javax.lang.model.type.ReferenceType
<!-- END KEY -->
<!-- BEGIN DATA -->
表示某一声明类型，是一个类 (class) 类型或接口 (interface) 类型。这包括参数化的类型（比如 {@code java.util.Set<String>}）和原始类型。

<p> {@code TypeElement} 表示一个类或接口<i>元素</i>，而 {@code DeclaredType} 表示一个类或接口<i>类型</i>，后者将成为前者的一种使用（或<i>调用</i>）。有关这种区别的更多信息，请参见 {@link TypeElement}。

<p> 可以使用 {@link Types#directSupertypes(TypeMirror)} 方法找到已声明类型的超类型（类类型和接口类型）。此方法返回所有类型参数都被替换的超类型。

<p> 还可以使用此接口表示交集 (intersection) 类型。交集类型在程序中是隐式声明的，而不是显式声明。例如，类型参数 {@code <T extends Number & Runnable>} 的边界是一个交集类型。它由 {@code DeclaredType} 表示，使用 {@code Number} 作为其超类并使用 {@code Runnable} 作为其独立超接口。

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@version 1.6 06/08/07
@see TypeElement
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.element.Element javax.lang.model.type.DeclaredType.asElement()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对应于此类型的元素。

@return 对应于此类型的元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.type.TypeMirror javax.lang.model.type.DeclaredType.getEnclosingType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回封装实例的最里层类型；如果没有任何封装实例，则返回种类为 {@code NONE} 的 {@code NoType}。只有对应于内部类的类型才具有封装实例。

@return 封装类型的类型镜像
@jls3 8.1.3 Inner Classes and Enclosing Instances
@jls3 15.9.2 Determining Enclosing Instances

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<? extends javax.lang.model.type.TypeMirror> javax.lang.model.type.DeclaredType.getTypeArguments()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此类型的实际类型参数。对于嵌套在已参数化类型中的类型（比如 {@code Outer<String>.Inner<Number>}），只包括最里层类型的类型参数。

@return 此类型的实际类型参数；如果没有，则返回一个空列表

<!-- END DATA -->
