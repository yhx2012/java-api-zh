<!-- BEGIN KEY -->
public interface javax.lang.model.type.TypeVisitor
<!-- END KEY -->
<!-- BEGIN DATA -->
类型的 visitor，使用 visitor 设计模式的样式。在编译时某个类型的种类未知时，实现此接口的类被用来对该类型进行操作。在将 visitor 传递给某个类型的 {@link TypeMirror#accept accept} 方法时，最适用于该类型的 <tt>visit<i>XYZ</i></tt> 方法将被调用。

<p> 如果附加参数 {@code p} 为 {@code null}，则实现此接口的类有可能抛出 {@code NullPointerException}；有关详细信息，请参阅实现类的文档。
 
<p> <b>警告：</b> 以后可能会向此接口添加一些方法，以适应添加到 Java&trade; 编程语言未来版本中的新（当前未知的）语言结构。所以，直接实现此接口的 visitor 类可能与平台的未来版本不兼容。为了避免这种不兼容性，建议 visitor 实现扩展实现此接口的抽象 visitor 类。不过，API 通常应该使用此 visitor 接口作为参数类型、返回类型等，而不是将它作为抽象类之一。

@param <R> 此 visitor 的方法的返回类型。对于不需要返回结果的 visitor，使用 {@link Void}。
@param<P> 此 visitor 的方法的附加参数类型。对于不需要附加参数的 visitor，使用 {@code Void}。

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@version 1.5 06/07/31
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.type.TypeVisitor.visit(TypeMirror t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问一个类型。
@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.type.TypeVisitor.visit(TypeMirror t)
<!-- END KEY -->
<!-- BEGIN DATA -->
等效于 {@code v.visit(t, null)} 的便捷方法。
@param t 要访问的元素
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.type.TypeVisitor.visitPrimitive(PrimitiveType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问基本类型。
@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.type.TypeVisitor.visitNull(NullType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问 null 类型。
@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.type.TypeVisitor.visitArray(ArrayType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问数组类型。
@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.type.TypeVisitor.visitDeclared(DeclaredType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问已声明的类型。
@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.type.TypeVisitor.visitError(ErrorType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问错误类型。
@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.type.TypeVisitor.visitTypeVariable(TypeVariable t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问类型变量。
@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.type.TypeVisitor.visitWildcard(WildcardType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问通配符类型。
@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.type.TypeVisitor.visitExecutable(ExecutableType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问 executable 类型。
@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.type.TypeVisitor.visitNoType(NoType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问 {@link NoType} 实例。
@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.type.TypeVisitor.visitUnknown(TypeMirror t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问未知种类的类型。如果语言有所发展并且向 {@code TypeMirror} 层次结构中添加了新种类的类型，则会发生这种情况。
@param t 要访问的类型
@param p 特定于 visitor 的参数
@return  特定于 visitor 的结果
@throws UnknownTypeException visitor 实现可以有选择地抛出此异常

<!-- END DATA -->
