<!-- BEGIN KEY -->
public class javax.lang.model.element.UnknownAnnotationValueException extends java.lang.RuntimeException
<!-- END KEY -->
<!-- BEGIN DATA -->
指示遇到一个未知种类的注释值。如果语言有所发展并且新种类的注释值可以存储在注释中，则会发生这种情况。该异常可能由{@linkplain AnnotationValueVisitor 注释值 visitor} 抛出，指示已经为以前的语言版本创建了 visitor。

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@version 1.4 06/07/31
@see AnnotationValueVisitor#visitUnknown
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.element.UnknownAnnotationValueException(AnnotationValue av, Object p)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 {@code UnknownAnnotationValueException}。可以使用 {@code p} 参数传入一个带有上下文（在该上下文中遇到未知元素）信息的附加参数；例如，{@link AnnotationValueVisitor} 的 visit 方法可以传入其附加参数。

@param av 未知注释值，可以为 {@code null}
@param p 附加参数，可以为 {@code null}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.element.AnnotationValue javax.lang.model.element.UnknownAnnotationValueException.getUnknownAnnotationValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回未知注释值。如果已经序列化此异常并随后将其读回，则该值将不可用。

@return 未知元素；如果不可用，则返回 {@code null}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.lang.model.element.UnknownAnnotationValueException.getArgument()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回附加参数。

@return 附加参数

<!-- END DATA -->
