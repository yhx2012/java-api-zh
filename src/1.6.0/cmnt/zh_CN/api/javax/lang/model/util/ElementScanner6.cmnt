<!-- BEGIN KEY -->
public class javax.lang.model.util.ElementScanner6 extends javax.lang.model.util.AbstractElementVisitor6
<!-- END KEY -->
<!-- BEGIN DATA -->
程序元素的扫描 visitor，具有适用于 {@link SourceVersion#RELEASE_6 RELEASE_6} 源版本的默认行为。此类中的 <tt>visit<i>XYZ</i></tt> 方法通过对其 {@linkplain Element#getEnclosedElements 封装元素}、{@linkplain ExecutableElement#getParameters 参数}等调用 {@code scan} 来扫描其组件元素，正如其各自的方法规范所指示的那样。子类可以通过重写 <tt>visit<i>XYZ</i></tt> 方法控制元素的访问顺序。注意，scanner 的客户端可通过对相关根元素调用 {@code v.scan(e, p)} 而不是 {@code v.visit(e, p)} 来获得所需行为。

<p>当子类重写 <tt>visit<i>XYZ</i></tt> 方法时，新方法可以通过调用 <tt>super.visit<i>XYZ</i></tt> 按默认方式扫描封装的元素。使用这种方式，就附加处理而言，具体 visitor 可以控制遍历组件元素的顺序；例如，在重写方法的开始处以一致的方式调用 <tt>super.visit<i>XYZ</i></tt> 将产生先序遍历 (preorder traversal)。如果应该以其他顺序遍历组件元素，那么重写的 visit 方法应该使用按所需顺序排列的元素调用 {@code scan}，而不是调用 <tt>super.visit<i>XYZ</i></tt>。

<p> 根据常规协定，可以重写此类中的方法。注意，具有 {@link java.lang.Override @Override} 的具体子类中的注释方法可以帮助确定那些打算重写的方法。
 
<p> <b>警告：</b> 以后可能会向此类实现的 {@code ElementVisitor} 接口添加一些方法，以适应添加到 Java&trade; 编程语言未来版本中的新（当前未知的）语言结构。所以，将来可能会向此类添加名称以 {@code "visit"} 开头的方法；为了避免不兼容，扩展此类的类不应该声明任何名称以 {@code "visit"} 开头的实例方法。
 
<p>在添加一个这样的新 visit 方法时，此类中的默认实现将调用 {@link #visitUnknown visitUnknown} 方法。还将引入新的元素 scanner visitor 类，以对应新的语言级别；此 visitor 针对相关 visit 方法有不同的默认行为。在引入新的 visitor 时，此 visitor 的全部或部分可能过时。

@param <R> 此 visitor 的方法的返回类型。对于不需要返回结果的 visitor，使用 {@link Void}。
@param<P> 此 visitor 的方法的附加参数类型。对于不需要附加参数的 visitor，使用 {@code Void}。

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@version 1.7 06/08/15
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final R javax.lang.model.util.ElementScanner6.DEFAULT_VALUE
<!-- END KEY -->
<!-- BEGIN DATA -->
指定的默认值。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.lang.model.util.ElementScanner6()
<!-- END KEY -->
<!-- BEGIN DATA -->
具体子类的构造方法；使用 {@code null} 作为默认值。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.lang.model.util.ElementScanner6(R defaultValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
具体子类的构造方法；使用参数作为默认值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final R javax.lang.model.util.ElementScanner6.scan(java.lang.Iterable<? extends javax.lang.model.element.Element> iterable, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
迭代给定元素并对每个元素调用 {@link #scan(Element, Object) scan(Element, P)}。返回最后一次调用 {@code scan} 的结果；对于空 iterable，则返回 {@code DEFAULT_VALUE}。

@param iterable 要扫描的元素
@param  p 附加参数
@return 最后一个元素的扫描；如果没有元素，则返回 {@code DEFAULT_VALUE}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementScanner6.scan(Element e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 {@code e.accept(this, p)} 处理元素；此方法可被子类重写。
@return 访问 {@code e} 的结果。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final R javax.lang.model.util.ElementScanner6.scan(Element e)
<!-- END KEY -->
<!-- BEGIN DATA -->
等效于 {@code v.scan(e, null)} 的便捷方法。
@return 扫描 {@code e} 的结果。

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementScanner6.visitPackage(PackageElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 此实现扫描封装的元素。

@param e  要访问的元素
@param p  特定于 visitor 的参数
@return 扫描的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementScanner6.visitType(TypeElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 此实现扫描封装的元素。

@param e  要访问的元素
@param p  特定于 visitor 的参数
@return 扫描的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementScanner6.visitVariable(VariableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 此实现扫描封装的元素。

@param e  要访问的元素
@param p  特定于 visitor 的参数
@return 扫描的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementScanner6.visitExecutable(ExecutableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 此实现扫描参数。

@param e  要访问的元素
@param p  特定于 visitor 的参数
@return 扫描的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementScanner6.visitTypeParameter(TypeParameterElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 此实现扫描封装的元素。

@param e  要访问的元素
@param p  特定于 visitor 的参数
@return 扫描的结果

<!-- END DATA -->
