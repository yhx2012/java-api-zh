<!-- BEGIN KEY -->
public interface javax.lang.model.element.ElementVisitor
<!-- END KEY -->
<!-- BEGIN DATA -->
程序元素的 visitor，使用 visitor 设计模式的样式。在编译时某个元素的种类未知时，实现此接口的类被用来对该元素进行操作。在将 visitor 传递给某个元素的 {@link Element#accept accept} 方法时，调用适用于该元素的 <tt>visit<i>XYZ</i></tt> 方法。

<p> 如果附加参数 {@code p} 为 {@code null}，则实现此接口的类有可能抛出 {@code NullPointerException}；有关详细信息，请参阅实现类的文档。
 
<p> <b>警告：</b> 以后可能会向此接口添加一些方法，以适应添加到 Java&trade; 编程语言未来版本中的新（当前未知的）语言结构。所以，直接实现此接口的 visitor 类可能与平台的未来版本不兼容。为了避免这种不兼容性，建议 visitor 实现扩展实现此接口的抽象 visitor 类。不过，API 通常应该使用此 visitor 接口作为参数类型、返回类型等，而不是将它作为抽象类之一。

@param <R> 此 visitor 的方法的返回类型。对于不需要返回结果的 visitor，使用 {@link Void}。
@param<P> 此 visitor 的方法的附加参数类型。对于不需要附加参数的 visitor，使用 {@code Void}。

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@version 1.4 06/07/31
@see AbstractElementVisitor6
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.ElementVisitor.visit(Element e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问一个元素。
@param e 要访问的元素
@param p 特定于 visitor 的参数
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.ElementVisitor.visit(Element e)
<!-- END KEY -->
<!-- BEGIN DATA -->
等效于 {@code v.visit(e, null)} 的便捷方法。
@param e 要访问的元素
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.ElementVisitor.visitPackage(PackageElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问包元素。
@param e 要访问的元素
@param p 特定于 visitor 的参数
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.ElementVisitor.visitType(TypeElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问类型元素。
@param e 要访问的元素
@param p 特定于 visitor 的参数
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.ElementVisitor.visitVariable(VariableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问变量元素。
@param e 要访问的元素
@param p 特定于 visitor 的参数
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.ElementVisitor.visitExecutable(ExecutableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问 executable 元素。
@param e 要访问的元素
@param p 特定于 visitor 的参数
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.ElementVisitor.visitTypeParameter(TypeParameterElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问类型参数元素。
@param e 要访问的元素
@param p 特定于 visitor 的参数
@return  特定于 visitor 的结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.ElementVisitor.visitUnknown(Element e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
访问未知种类的元素。如果语言有所发展并且向 {@code Element} 层次结构中添加了新种类的元素，则会发生这种情况。

@param e 要访问的元素
@param p 特定于 visitor 的参数
@return  特定于 visitor 的结果
@throws UnknownElementException visitor 实现可以有选择地抛出此异常

<!-- END DATA -->
