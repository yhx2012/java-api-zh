<!-- BEGIN KEY -->
public interface javax.lang.model.util.Types
<!-- END KEY -->
<!-- BEGIN DATA -->
用来对类型进行操作的实用工具方法。

<p><b>兼容性注意事项：</b> 在将来的平台版本中可能会向此接口添加一些方法。

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@version 1.7 06/07/11
@see javax.annotation.processing.ProcessingEnvironment#getTypeUtils
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.element.Element javax.lang.model.util.Types.asElement(TypeMirror t)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对应于类型的元素。该类型可能是 {@code DeclaredType} 或 {@code TypeVariable}。如果该类型没有对应元素，则返回 {@code null}。

@return 对应于给定类型的元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.lang.model.util.Types.isSameType(TypeMirror t1, TypeMirror t2)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试两个 {@code TypeMirror} 对象是否表示同一类型。

<p>警告：如果此方法两个参数中有一个表示通配符，那么此方法将返回 false。因此，通配符与其本身的类型不同。初看起来这可能让人感到很奇怪，但考虑到编译器一定会拒绝以下示例时，这就很合理了：
 <pre> 
{@code List<?> list = new ArrayList<Object>();}
{@code list.add(list.get(0));}
 </pre>

@param t1  第一种类型
@param t2  第二种类型
@return 当且仅当两种类型相同时返回 {@code true}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.lang.model.util.Types.isSubtype(TypeMirror t1, TypeMirror t2)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试一种类型是否是另一个类型的子类型。任何类型都被认为是其本身的子类型。

@param t1  第一种类型
@param t2  第二种类型
@return 当且仅当第一种类型是第二种类型的子类型时返回 {@code true}
@throws IllegalArgumentException 如果给定一个 executable 或 package 类型
@jls3 4.10 Subtyping

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.lang.model.util.Types.isAssignable(TypeMirror t1, TypeMirror t2)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试一种类型是否可以指派给另一种类型。

@param t1  第一种类型
@param t2  第二种类型
@return 当且仅当第一种类型可以指派给第二种类型时返回 {@code true}
@throws IllegalArgumentException 如果给定一个 executable 或 package 类型
@jls3 5.2 Assignment Conversion

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.lang.model.util.Types.contains(TypeMirror t1, TypeMirror t2)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试一个类型参数是否<i>包含</i> 另一个类型参数。

@param t1  第一种类型
@param t2  第二种类型
@return 当且仅当第一种类型包含第二种类型时返回 {@code true}
@throws IllegalArgumentException 如果给定一个 executable 或 package 类型
@jls3 4.5.1.1 Type Argument Containment and Equivalence

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.lang.model.util.Types.isSubsignature(ExecutableType m1, ExecutableType m2)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试一个方法的签名是否是另一个方法的<i>子签名</i>。

@param m1  第一个方法
@param m2  第二个方法
@return 当且仅当第一个签名是第二个签名的子签名时返回 {@code true}
@jls3 8.4.2 Method Signature

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<? extends javax.lang.model.type.TypeMirror> javax.lang.model.util.Types.directSupertypes(TypeMirror t)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回类型的直接超类型。interface 类型将出现在列表的最后（如果有）。

@param t  将被检查的类型
@return 直接超类型；如果没有，则返回一个空列表
@throws IllegalArgumentException 如果给定一个 executable 或 package 类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.type.TypeMirror javax.lang.model.util.Types.erasure(TypeMirror t)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回删除状态的类型。

@param t  要删除的类型
@return 删除状态的给定类型
@throws IllegalArgumentException 如果给定一个 package 类型
@jls3 4.6 Type Erasure

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.element.TypeElement javax.lang.model.util.Types.boxedClass(PrimitiveType p)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定基本类型的装箱 (boxed) 值类型的类。即应用 <i>boxing 转换</i>。

@param p  要转换的基本类型
@return 类型 {@code p} 的装箱值类型的类
@jls3 5.1.7 Boxing Conversion

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.type.PrimitiveType javax.lang.model.util.Types.unboxedType(TypeMirror t)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定类型的拆箱 (unboxed) 值类型（基本类型）。即应用 <i>unboxing 转换</i>。

@param t  要拆箱的类型
@return 类型 {@code t} 的拆箱值类型
@throws IllegalArgumentException 如果给定类型无法进行 unboxing 转换
@jls3 5.1.8 Unboxing Conversion

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.type.TypeMirror javax.lang.model.util.Types.capture(TypeMirror t)
<!-- END KEY -->
<!-- BEGIN DATA -->
对类型应用 capture 转换。
@param t  要转换的类型
@return 应用 capture 转换的结果
@throws IllegalArgumentException 如果给定 executable 或 package 类型
@jls3 5.1.10 Capture Conversion

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.type.PrimitiveType javax.lang.model.util.Types.getPrimitiveType(TypeKind kind)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回基本类型。

@param kind  要返回的基本类型的种类
@return 一个基本类型
@throws IllegalArgumentException 如果 {@code kind} 不是基本种类

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.type.NullType javax.lang.model.util.Types.getNullType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 null 类型。该类型是 {@code null} 的类型。

@return null 类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.type.NoType javax.lang.model.util.Types.getNoType(TypeKind kind)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在实际类型不适用的地方所使用的伪类型。要返回的类型的种类可以是 {@link TypeKind#VOID VOID} 或 {@link TypeKind#NONE NONE}。对于包，可以使用 {@link Elements#getPackageElement(CharSequence)}{@code .asType()} 替代。

@param kind  要返回的类型的种类
@return 种类 {@code VOID} 或 {@code NONE} 的伪类型
@throws IllegalArgumentException 如果 {@code kind} 无效

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.type.ArrayType javax.lang.model.util.Types.getArrayType(TypeMirror componentType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回具有指定组件类型的数组类型。

@param componentType  组件类型
@return 具有指定组件类型的数组类型。
@throws IllegalArgumentException 如果组件类型对于数组无效

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.type.WildcardType javax.lang.model.util.Types.getWildcardType(TypeMirror extendsBound, TypeMirror superBound)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回新的通配符类型参数。可以指定通配符边界中的一个，也可以都不指定，但不能都指定。

@param extendsBound  扩展（上）边界；如果没有，则该参数为 {@code null}
@param superBound    超（下）边界；如果没有，则该参数为 {@code null}
@return 新的通配符
@throws IllegalArgumentException 如果边界无效

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.type.DeclaredType javax.lang.model.util.Types.getDeclaredType(TypeElement typeElem, javax.lang.model.type.TypeMirror[] typeArgs)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对应于类型元素和实际类型参数的类型。例如，如果给定 {@code Set} 的类型元素和 {@code String} 的类型镜像，那么可以使用此方法获取参数化类型 {@code Set<String>}。

<p> 类型参数的数量必须等于类型元素的形式类型参数的数量，或者等于 0。如果等于 0，并且类型元素是泛型，则返回该类型元素的原始类型。

<p> 如果返回一个参数化类型，则其类型元素不得包含在一般外部类中。例如，首先使用此方法获取类型 {@code Outer<String>}，然后调用 {@link #getDeclaredType(DeclaredType, TypeElement, TypeMirror...)}，可以构造参数化类型 {@code Outer<String>.Inner<Number>}。

@param typeElem	类型元素
@param typeArgs	实际类型参数
@return 对应于类型元素和实际类型参数的类型
@throws IllegalArgumentException 如果给定的类型参数太多或太少，或者提供不合适的类型参数或类型元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.type.DeclaredType javax.lang.model.util.Types.getDeclaredType(DeclaredType containing, TypeElement typeElem, javax.lang.model.type.TypeMirror[] typeArgs)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据给定的{@linkplain DeclaredType#getEnclosingType() 包含类型}，返回对应于类型元素和实际类型参数的类型（它是给定包含类型的成员）。例如，通过首先使用 {@link #getDeclaredType(TypeElement, TypeMirror...)} 获取类型 {@code Outer<String>}，然后调用此方法，可以构造参数化类型 {@code Outer<String>.Inner<Number>}。

<p> 如果包含类型是一个参数化类型，则类型参数的数量必须等于 {@code typeElem} 的形式类型参数的数量。如果包含类型不是参数化的，或者为 {@code null}，则此方法等效于 {@code getDeclaredType(typeElem, typeArgs)}。

@param containing  包含类型；如果没有，则该参数为 {@code null}
@param typeElem	  类型元素
@param typeArgs	  实际类型参数
@return 对应于类型元素和实际类型参数的类型，该类型包含在给定类型中
@throws IllegalArgumentException 如果给定的类型参数太多或太少，或者提供了不合适的类型参数、类型元素或包含类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.type.TypeMirror javax.lang.model.util.Types.asMemberOf(DeclaredType containing, Element element)
<!-- END KEY -->
<!-- BEGIN DATA -->
当元素被视为给定类型的成员或者直接由给定类型包含时，返回该元素的类型。例如，被视为参数化类型 {@code Set<String>} 的成员时，{@code Set.add} 方法是参数类型为 {@code String} 的 {@code ExecutableType}。

@param containing  包含类型
@param element     元素
@return 从包含类型来看的元素的类型
@throws IllegalArgumentException 如果元素对于给定类型无效

<!-- END DATA -->
