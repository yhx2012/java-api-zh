<!-- BEGIN KEY -->
javax.lang.model.element
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 Java 编程语言的模型元素的接口。

<p>当在注释处理的上下文中使用时，必须返回要表示的元素的准确模型。因为这是一个语言模型，所以源代码提供相关构造的基准（引用）表示形式，而不是 executable 输出（如类文件）中的表示形式。executable 输出可作为创建建模元素的基础。不过，将源代码转换为 executable 输出的过程中可能不允许恢复源代码表示形式的某些方面。例如，无法从类文件恢复带有 {@linkplain java.lang.annotation.RetentionPolicy#SOURCE source} {@linkplain java.lang.annotation.Retention retention} 的注释，并且类文件无法提供源位置信息。某一元素上的{@linkplain javax.lang.model.element.Modifier 修饰符}在某些情况下可能有所不同，这些情况包括：

 <ul>
<li> 某个类或接口上的 {@code strictfp}
<li> 某个参数上的 {@code final}
<li> 类和接口上的 {@code protected}、{@code private} 和 {@code static}
 </ul>

此外，类文件中的复合构造方法（例如，用来实现嵌套类的存取方法和用来实现协变返回的 bridge 方法）是此模型以外的转换产物。

<p>进行注释处理期间，必然会在不完整或错误的程序上进行操作；但是，有关所得模型特性的保证更少。如果源代码在语法结构上不是很好，则可能会提供一个模型作为实现问题的质量。如果某一程序在语法上是有效的，但在其他某些方面有问题，则返回模型包含的信息不得少于程序中所有方法正文被 {@code "throw new RuntimeException();"} 替代时所包含的信息。如果某一程序引用缺失类型 XYZ，则返回模型包含的信息不得少于类型 XYZ 的声明被假定为 {@code "class XYZ {}"}、{@code "interface XYZ {}"}、{@code "enum XYZ {}"} 或 {@code "@interface XYZ {}"} 时所包含的信息。如果某一程序引用缺失类型 {@code XYZ<K1, ... ,Kn>}，则返回模型包含的信息不得少于 XYZ 的声明被假定为 {@code "class XYZ<T1, ... ,Tn> {}"} 或 {@code "interface XYZ<T1,
 ... ,Tn> {}"} 时所包含的信息。

<p> 除非在特定实现中另行指定，否则此包中的方法所返回的集合应该是不能由调用者修改的，并且对于并发访问是不安全的。

<p> 除非另行指定，否则，如果给定一个 {@code null} 参数，此包中的方法将抛出 {@code NullPointerException}。

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@version 1.6 06/08/28
@since 1.6

<!-- END DATA -->
