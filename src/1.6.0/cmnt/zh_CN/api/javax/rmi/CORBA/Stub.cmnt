<!-- BEGIN KEY -->
public abstract class javax.rmi.CORBA.Stub extends org.omg.CORBA_2_3.portable.ObjectImpl implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
必须从其继承所有 RMI-IIOP stub 的基类。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.rmi.CORBA.Stub.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对象的哈希码值，对于表示同一远程对象的所有 stub，其哈希码值是相等的。
@return 哈希码值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.rmi.CORBA.Stub.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较两个 stub 的相等性。在用于比较表示同一远程对象的 stub 时返回 <code>true</code>，否则返回 <code>false</code>。
@param   obj   要与之比较的引用对象。
@return 如果此对象与 <code>obj</code> 变量相同，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.rmi.CORBA.Stub.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 stub 的字符串表示形式。对于表示同一远程对象的所有 stub，返回相同的字符串。
@return  此 stub 的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.rmi.CORBA.Stub.connect(ORB orb) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 stub 连接到 ORB。在反序列化 stub 后要求此操作，但在 ORB 流对其取消屏蔽后不要求此操作。如果未连接的 stub 被传递到 ORB 流进行编组，则将其隐式连接到该 ORB。应用程序代码不应直接调用此方法，但应调用可移植包装器方法 {@link javax.rmi.PortableRemoteObject#connect}。
@param orb 要连接到的 ORB。
@exception RemoteException 如果 stub 已经连接到另一个 ORB，或者如果 stub 不表示一个导出的远程对象或本地对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.rmi.CORBA.Stub.readObject(ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
恢复 IOR 状态的序列化方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.rmi.CORBA.Stub.writeObject(ObjectOutputStream stream) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
保存 IOR 状态的序列化方法。
@serialData IOR 类型 ID (int) 的长度，后跟 IOR 类型 ID（使用 ISO8859-1 编码的字节数组），后跟 IOR 配置文件数 (int)，后跟 IOR 配置文件。每个 IOR 配置文件作为配置文件标签 (int) 写入，后跟配置文件数据 (int) 的长度，后跟配置文件数据（字节数组）。

<!-- END DATA -->
