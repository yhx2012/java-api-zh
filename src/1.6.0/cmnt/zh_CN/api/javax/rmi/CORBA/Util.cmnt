<!-- BEGIN KEY -->
public class javax.rmi.CORBA.Util extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
提供可以由 stub 和 tie 用于执行公共操作的实用方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.rmi.RemoteException javax.rmi.CORBA.Util.mapSystemException(SystemException ex)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 SystemException 映射到 RemoteException。
@param ex 要映射的 SystemException。
@return 映射的异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.rmi.CORBA.Util.writeAny(OutputStream out, Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 any java.lang.Object 作为 CORBA any 写入。
@param out 要写入 any 的流。
@param obj 要写入为 any 的对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Object javax.rmi.CORBA.Util.readAny(InputStream in)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 java.lang.Object 作为 CORBA any 读取。
@param in 从中读取 any 的流。
@return 从流读取的 Object。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.rmi.CORBA.Util.writeRemoteObject(OutputStream out, Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 java.lang.Object 作为 CORBA Object 写入。如果 <code>obj</code> 是导出的 RMI-IIOP 服务器对象，则查找 tie 并传递到 <code>obj</code>，然后写入 <code>out.write_Object(org.omg.CORBA.Object)</code>。如果 <code>obj</code> 是 CORBA Object，则将其写入到 <code>out.write_Object(org.omg.CORBA.Object)</code>。
@param out 要将 Object 写入的流。
@param obj 要写入的对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.rmi.CORBA.Util.writeAbstractObject(OutputStream out, Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 java.lang.Object 作为一个值或 CORBA Object 写入。如果 <code>obj</code> 是一个值对象或者是一个 stub 对象，则将其写入到 <code>out.write_abstract_interface(java.lang.Object)</code>。如果 <code>obj</code> 是导出的 RMI-IIOP 服务器对象，则查找 tie 并传递到 <code>obj</code>，然后写入到 <code>out.write_abstract_interface(java.lang.Object)</code>。
@param out 要写入 Object 的流。
@param obj 要写入的对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.rmi.CORBA.Util.registerTarget(Tie tie, Remote target)
<!-- END KEY -->
<!-- BEGIN DATA -->
为 tie 注册一个目标。将 tie 添加到内部表并对 tie 对象调用 {@link Tie#setTarget}。
@param tie 要注册的 tie。
@param target tie 的目标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.rmi.CORBA.Util.unexportObject(Remote target) throws java.rmi.NoSuchObjectException
<!-- END KEY -->
<!-- BEGIN DATA -->
从内部表中移除关联的 tie，并调用 {@link Tie#deactivate} 以取消激活该对象。
@param target 要撤消导出的对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.rmi.CORBA.Tie javax.rmi.CORBA.Util.getTie(Remote target)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定目标对象的 tie（如果存在）。
@return tie，如果没有为给定目标注册 tie，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.rmi.CORBA.ValueHandler javax.rmi.CORBA.Util.createValueHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回实现 {@link ValueHandler} 接口的类的单一实例。
@return 实现 ValueHandler 接口的类。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String javax.rmi.CORBA.Util.getCodebase(java.lang.Class clz)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定类的代码基（如果存在）。
@param clz 为其获取代码基的类。
@return URL 的空格分隔的列表，或者为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Class javax.rmi.CORBA.Util.loadClass(String className, String remoteCodebase, ClassLoader loader) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
为指定的类返回一个类实例。 
<P>此方法的规范是&ldquo;Java 到 IDL 语言的映射关系&rdquo;ptc/00-01-06。
<P>在 Java SE 平台上，此方法的工作方式如下：
<UL><LI>在调用堆栈上查找第一个非 null 的 <tt>ClassLoader</tt>，并使用此 <tt>ClassLoader</tt> 尝试加载类。 
<LI>如果第一步失败，并且如果 <tt>remoteCodebase</tt> 为非 null，且 <tt>useCodebaseOnly</tt> 为 false，则调用 <tt>java.rmi.server.RMIClassLoader.loadClass(remoteCodebase, className)</tt>。
<LI>如果 <tt>remoteCodebase</tt> 为 null 或 <tt>useCodebaseOnly</tt> 为 true，则调用 <tt>java.rmi.server.RMIClassLoader.loadClass(className)</tt>。
<LI>如果通过步骤 1、2 或 3 没有成功加载类，并且 <tt>loader</tt> 为非 null，则调用 <tt>loader.loadClass(className)</tt>。
<LI>如果通过步骤 1、2、3 或 4 成功加载类，则返回加载的类，否则抛出 <tt>ClassNotFoundException</tt>。
@param className 类名。
@param remoteCodebase 可能从中发现类的空格分隔的 URL 列表。可以为 null。
@param loader 在所有其他方法失败时可以用来加载类的 <tt>ClassLoader</tt>。
@return 表示加载的类的 <code>Class</code> 对象。
@exception ClassNotFoundException 如果不能加载类。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.rmi.CORBA.Util.isLocal(Stub stub) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
<tt>isLocal</tt> 方法与 <tt>ObjectImpl._is_local</tt> 方法具有相同的语义，否则可能抛出 <tt>RemoteException</tt>。
   
如果通过本地伺服器实现特定对象，并因此使用本地调用 API，则提供 <tt>_is_local()</tt> 方法以便能够确定 stub。
 
@param stub 要测试的 stub。

@return 如果具体化对象的伺服器与 stub 位于同一个进程，并且它们共享同一个 ORB 实例，则 <tt>_is_local()</tt> 方法返回 true。否则，<tt>_is_local()</tt> 方法返回 false。<tt>_is_local()</tt> 的默认行为是返回 false。

@throws RemoteException 如果 Java 到 IDL 的规范 没有指定导致抛出 <tt>RemoteException</tt> 的条件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.rmi.RemoteException javax.rmi.CORBA.Util.wrapException(Throwable orig)
<!-- END KEY -->
<!-- BEGIN DATA -->
包装由实现方法抛出的异常。它返回相应的客户端异常。
@param orig 要包装的异常。
@return 包装的异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Object[] javax.rmi.CORBA.Util.copyObjects(java.lang.Object[] obj, ORB orb) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
复制或连接一个对象数组。由本地 stub 使用以复制任意数量的实际参数，根据需要保留共享的交叉参数以支持 RMI 语义。
@param obj 要复制或连接的对象。
@param orb 该 ORB。
@return 复制或连接的对象。
@exception RemoteException 如果不能复制或连接任何对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Object javax.rmi.CORBA.Util.copyObject(Object obj, ORB orb) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
复制或连接一个对象。由本地 stub 使用，以复制实际参数、结果对象或异常。
@param obj 要复制的对象。
@param orb 该 ORB。
@return 复制或连接的对象。
@exception RemoteException 如果不能复制或连接该对象。

<!-- END DATA -->
