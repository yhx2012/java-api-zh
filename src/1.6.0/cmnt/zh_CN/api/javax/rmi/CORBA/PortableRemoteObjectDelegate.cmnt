<!-- BEGIN KEY -->
public interface javax.rmi.CORBA.PortableRemoteObjectDelegate
<!-- END KEY -->
<!-- BEGIN DATA -->
支持 {@link javax.rmi.PortableRemoteObject} 中方法实现的委托。委托是类的单一实例，它实现此接口并提供 <code>javax.rmi.PortableRemoteObject</code> 的所有方法的替代实现。

通过提供委托的类名称作为 <code>javax.rmi.CORBA.PortableRemoteObjectClass</code> 系统属性的值启用委托。

@see javax.rmi.PortableRemoteObject

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.rmi.CORBA.PortableRemoteObjectDelegate.exportObject(Remote obj) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link javax.rmi.PortableRemoteObject#exportObject} 的委托调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.Remote javax.rmi.CORBA.PortableRemoteObjectDelegate.toStub(Remote obj) throws java.rmi.NoSuchObjectException
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link javax.rmi.PortableRemoteObject#toStub} 的委托调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.rmi.CORBA.PortableRemoteObjectDelegate.unexportObject(Remote obj) throws java.rmi.NoSuchObjectException
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link javax.rmi.PortableRemoteObject#unexportObject} 的委托调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.rmi.CORBA.PortableRemoteObjectDelegate.narrow(Object narrowFrom, java.lang.Class narrowTo) throws java.lang.ClassCastException
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link javax.rmi.PortableRemoteObject#narrow} 的委托调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.rmi.CORBA.PortableRemoteObjectDelegate.connect(Remote target, Remote source) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link javax.rmi.PortableRemoteObject#connect} 的委托调用。

<!-- END DATA -->
