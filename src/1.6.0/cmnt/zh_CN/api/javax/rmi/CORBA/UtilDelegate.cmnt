<!-- BEGIN KEY -->
public interface javax.rmi.CORBA.UtilDelegate
<!-- END KEY -->
<!-- BEGIN DATA -->
支持 {@link Util} 中方法实现的委托。委托是类的单一实例，它实现此接口，并提供 <code>javax.rmi.CORBA.Util</code> 的所有方法的替代实现。

通过提供委托的类名称作为 <code>javax.rmi.CORBA.UtilClass</code> 系统属性的值来启用委托。


@see Util

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.RemoteException javax.rmi.CORBA.UtilDelegate.mapSystemException(SystemException ex)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link Util#mapSystemException} 的委托调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.rmi.CORBA.UtilDelegate.writeAny(OutputStream out, Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link Util#writeAny} 的委托调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.rmi.CORBA.UtilDelegate.readAny(InputStream in)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link Util#readAny} 的委托调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.rmi.CORBA.UtilDelegate.writeRemoteObject(OutputStream out, Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link Util#writeRemoteObject} 的委托调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.rmi.CORBA.UtilDelegate.writeAbstractObject(OutputStream out, Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link Util#writeAbstractObject} 的委托调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.rmi.CORBA.UtilDelegate.registerTarget(Tie tie, Remote target)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link Util#registerTarget} 的委托调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.rmi.CORBA.UtilDelegate.unexportObject(Remote target) throws java.rmi.NoSuchObjectException
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link Util#unexportObject} 的委托调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.rmi.CORBA.Tie javax.rmi.CORBA.UtilDelegate.getTie(Remote target)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link Util#getTie} 的委托调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.rmi.CORBA.ValueHandler javax.rmi.CORBA.UtilDelegate.createValueHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link Util#createValueHandler} 的委托调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.rmi.CORBA.UtilDelegate.getCodebase(java.lang.Class clz)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link Util#getCodebase} 的委托调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class javax.rmi.CORBA.UtilDelegate.loadClass(String className, String remoteCodebase, ClassLoader loader) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link Util#loadClass} 的委托调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.rmi.CORBA.UtilDelegate.isLocal(Stub stub) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link Util#isLocal} 的委托调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.RemoteException javax.rmi.CORBA.UtilDelegate.wrapException(Throwable obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link Util#wrapException} 的委托调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.rmi.CORBA.UtilDelegate.copyObject(Object obj, ORB orb) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link Util#copyObject} 的委托调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] javax.rmi.CORBA.UtilDelegate.copyObjects(java.lang.Object[] obj, ORB orb) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link Util#copyObjects} 的委托调用。

<!-- END DATA -->
