<!-- BEGIN KEY -->
public class javax.rmi.ssl.SslRMIClientSocketFactory extends java.lang.Object implements java.rmi.server.RMIClientSocketFactory, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<p><code>SslRMIClientSocketFactory</code> 实例由 RMI 运行时使用，以便通过 SSL 获取 RMI 调用的客户端套接字。</p>

<p>此类通过安全套接字层 (SSL) 或传输层安全 (TLS) 协议实现 <code>RMIClientSocketFactory</code>。</p>

<p>此类使用默认的 <code>SSLSocketFactory</code>（请参阅 {@link SSLSocketFactory#getDefault}）创建 SSL 套接字。此类的所有实例在功能上是等效的。尤其是，在服务器要求客户机进行验证时，它们都共享相同的信任存储区和相同的密钥存储区。在子类中通过重写 {@link #createSocket(String,int)} 方法可以修改此行为；在此情况下，{@link #equals(Object) equals} 和 {@link #hashCode() hashCode} 可能也需要重写。</p>

<p>如果指定了系统属性 <code>javax.rmi.ssl.client.enabledCipherSuites</code>，则 {@link #createSocket(String,int)} 方法将在返回套接字之前调用 {@link SSLSocket#setEnabledCipherSuites(String[])}。此系统属性的值是一个字符串，该字符串是要启用的 SSL/TLS 密码套件的逗号分隔的列表。</p>

<p>如果指定了系统属性 <code>javax.rmi.ssl.client.enabledProtocols</code>，{@link #createSocket(String,int)} 方法将在返回套接字之前调用 {@link SSLSocket#setEnabledProtocols(String[])}。此系统属性的值是一个字符串，该字符串是要启用的 SSL/TLS 协议版本的逗号分隔的列表。</p>

@see javax.net.ssl.SSLSocketFactory
@see javax.rmi.ssl.SslRMIServerSocketFactory
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.rmi.ssl.SslRMIClientSocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>创建一个新的 <code>SslRMIClientSocketFactory</code>。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.Socket javax.rmi.ssl.SslRMIClientSocketFactory.createSocket(String host, int port) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>创建一个 SSL 套接字。</p>

<p>如果指定了系统属性 <code>javax.rmi.ssl.client.enabledCipherSuites</code>，则此方法将在返回套接字之前调用 {@link SSLSocket#setEnabledCipherSuites(String[])}。此系统属性的值是一个字符串，该字符串是要启用的 SSL/TLS 密码套件的逗号分隔的列表。</p>

<p>如果指定了系统属性 <code>javax.rmi.ssl.client.enabledProtocols</code>，则此方法将在返回套接字之前调用 {@link SSLSocket#setEnabledProtocols(String[])}。此系统属性的值是一个字符串，该字符串是要启用的 SSL/TLS 协议版本的逗号分隔的列表。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.rmi.ssl.SslRMIClientSocketFactory.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>指示某个其他对象是否&ldquo;等于&rdquo;此对象。</p>

<p>因为此类的所有实例在功能上都等效（它们都使用默认的 <code>SSLSocketFactory</code>），所以此方法仅返回 <code>this.getClass().equals(obj.getClass())</code>。</p>

<p>如果子类的实例在功能上不都等效，则该子类应该重写此方法以及 {@link #hashCode()}。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.rmi.ssl.SslRMIClientSocketFactory.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回此 <code>SslRMIClientSocketFactory</code> 的哈希码值。</p>

@return 此 <code>SslRMIClientSocketFactory</code> 的哈希码值。

<!-- END DATA -->
