<!-- BEGIN KEY -->
public class javax.rmi.ssl.SslRMIServerSocketFactory extends java.lang.Object implements java.rmi.server.RMIServerSocketFactory
<!-- END KEY -->
<!-- BEGIN DATA -->
<p><code>SslRMIServerSocketFactory</code> 实例由 RMI 运行时使用，以便通过 SSL 获取 RMI 调用的服务端套接字。</p>

<p>此类通过安全套接字层 (SSL) 或传输层安全 (TLS) 协议实现 <code>RMIServerSocketFactory</code>。</p>

<p>此类使用默认的 <code>SSLSocketFactory</code>（请参阅 {@link SSLSocketFactory#getDefault}）或默认的 <code>SSLServerSocketFactory</code>（请参阅 {@link SSLServerSocketFactory#getDefault}）创建 SSL 套接字。因此，在服务器要求客户机进行验证时，此类的所有实例共享相同的密钥存储区和相同的信任存储区。在子类中通过重写 {@link #createServerSocket(int)} 方法可以修改此行为；在此情况下，{@link #equals(Object) equals} 和 {@link #hashCode() hashCode} 可能也需要重写。</p>

@see javax.net.ssl.SSLSocketFactory
@see javax.net.ssl.SSLServerSocketFactory
@see javax.rmi.ssl.SslRMIClientSocketFactory
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.rmi.ssl.SslRMIServerSocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>使用默认的 SSL 套接字配置创建一个新的 <code>SslRMIServerSocketFactory</code>。</p>

<p>由此工厂创建的服务器套接字接受的 SSL 连接启用了默认的密码套件和协议版本，不要求客户机进行验证。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.rmi.ssl.SslRMIServerSocketFactory(java.lang.String[] enabledCipherSuites, java.lang.String[] enabledProtocols, boolean needClientAuth) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>使用指定的 SSL 套接字配置创建一个新的 <code>SslRMIServerSocketFactory</code>。</p>

@param enabledCipherSuites 由此工厂创建的服务器套接字所接受的 SSL 连接上启用的所有密码套件的名称，如果为 <code>null</code> 将使用默认启用的密码套件

@param enabledProtocols 由此工厂创建的服务器套接字接受的 SSL 连接上启用的所有协议版本的名称，如果为 <code>null</code> 将使用默认启用的协议版本

@param needClientAuth 如果为 <code>true</code>，将要求在由此工厂创建的服务器套接字接受的 SSL 连接上进行客户机验证；如果为 <code>false</code>，则不要求客户机进行验证

@exception IllegalArgumentException 当不支持由 <code>enabledCipherSuites</code> 参数命名的一个或多个密码套件时，当不支持由 <code>enabledProtocols</code> 参数命名的一个或多个协议时，或者在尝试检查提供的要启用的密码套件和协议是否受支持时遇到问题，就会抛出此异常。

@see SSLSocket#setEnabledCipherSuites
@see SSLSocket#setEnabledProtocols
@see SSLSocket#setNeedClientAuth

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String[] javax.rmi.ssl.SslRMIServerSocketFactory.getEnabledCipherSuites()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回由此工厂创建的服务器套接字所接受的 SSL 连接上启用的密码套件的名称，如果此工厂使用默认启用的密码套件，则返回 <code>null</code>。</p>

@return 启用的密码套件的数组，或者为 <code>null</code>

@see SSLSocket#setEnabledCipherSuites

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String[] javax.rmi.ssl.SslRMIServerSocketFactory.getEnabledProtocols()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回由此工厂创建的服务器套接字所接受的 SSL 连接上启用的协议版本的名称，如果此工厂使用默认启用的协议版本，则返回 <code>null</code>。</p>

@return 启用的协议版本的数组，或者为 <code>null</code>

@see SSLSocket#setEnabledProtocols

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean javax.rmi.ssl.SslRMIServerSocketFactory.getNeedClientAuth()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>如果由此工厂创建的服务器套接字所接受的 SSL 连接上要求客户机进行验证，则返回 <code>true</code>。</p>

@return 如果要求客户机进行验证，则返回 <code>true</code>

@see SSLSocket#setNeedClientAuth

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.ServerSocket javax.rmi.ssl.SslRMIServerSocketFactory.createServerSocket(int port) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>创建一个服务器套接字，该套接字接受根据此工厂的 SSL 套接字配置参数配置的 SSL 连接。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.rmi.ssl.SslRMIServerSocketFactory.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>指示某个其他对象是否&ldquo;等于&rdquo;此对象。</p>

<p>如果两个 <code>SslRMIServerSocketFactory</code> 对象使用了相同的 SSL 套接字配置参数构造，则这两个对象相等。</p>

<p>如果子类添加了影响相等性的实例状态，则该子类应重写此方法以及 {@link #hashCode()}。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.rmi.ssl.SslRMIServerSocketFactory.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回此 <code>SslRMIServerSocketFactory</code> 的哈希码值。</p>

@return 此 <code>SslRMIServerSocketFactory</code> 的哈希码值。

<!-- END DATA -->
