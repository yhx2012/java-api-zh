<!-- BEGIN KEY -->
public class javax.rmi.PortableRemoteObject extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
服务器实现对象可以从 javax.rmi.PortableRemoteObject 继承，也可以实现一个远程接口，然后使用 exportObject 方法将其本身注册为服务器对象。toStub 方法采用服务器实现，并返回一个可用于访问该服务器对象的 stub。连接方法使 Remote 对象准备好进行远程通信。unexportObject 方法用于注销服务器对象，使之可用于垃圾回收。narrow 方法采用一个对象引用或抽象接口类型，并尝试使其变窄以适合给定的接口。如果该操作成功，结果将是一个指定类型的对象，否则将抛出一个异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.rmi.PortableRemoteObject() throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 <code>exportObject(this)</code> 初始化该对象。
@exception RemoteException 如果导出失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.rmi.PortableRemoteObject.exportObject(Remote obj) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
准备服务器对象，以接收远程调用。注意，PortableRemoteObject 的子类不需要调用此方法，因为它由构造器调用。
@param obj 要导出的服务器对象。
@exception RemoteException 如果导出失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.rmi.Remote javax.rmi.PortableRemoteObject.toStub(Remote obj) throws java.rmi.NoSuchObjectException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定服务器对象的 stub。
@param obj 需要 stub 的服务器对象。必须为 PortableRemoteObject 的一个子类，或者以前已经是调用 {@link #exportObject} 的目标。
@return 该对象的最常派生的 stub。
@exception NoSuchObjectException 如果找不到给定服务器对象的 stub。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.rmi.PortableRemoteObject.unexportObject(Remote obj) throws java.rmi.NoSuchObjectException
<!-- END KEY -->
<!-- BEGIN DATA -->
从运行时注销服务器对象，允许对象用于垃圾回收。
@param obj 要撤消导出的对象。
@exception NoSuchObjectException 如果当前未导出远程对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Object javax.rmi.PortableRemoteObject.narrow(Object narrowFrom, java.lang.Class narrowTo) throws java.lang.ClassCastException
<!-- END KEY -->
<!-- BEGIN DATA -->
检查以确保远程或抽象接口类型的对象可以强制转换为所需的类型。
@param narrowFrom 要检查的对象。
@param narrowTo 所需的类型。
@return 可以强制转换为所需类型的对象。
@throws ClassCastException 如果 narrowFrom 不能强制转换为 narrowTo。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.rmi.PortableRemoteObject.connect(Remote target, Remote source) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
使 Remote 对象准备好进行远程通信。在远程方法调用上，当对象作为一个参数发送或接收时，这通常是隐式发生的，但是在某些情况下，通过进行显式调用执行此操作较为有用。有关更多信息，请参阅 {@link Stub#connect} 方法。
@param target 要连接的对象。
@param source 以前连接的对象。
@throws RemoteException 如果 <code>source</code> 未连接，或者如果 <code>target</code> 已经连接到与 <code>source</code> 不同的 ORB。

<!-- END DATA -->
