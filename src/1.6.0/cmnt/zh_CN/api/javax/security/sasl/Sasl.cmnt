<!-- BEGIN KEY -->
public class javax.security.sasl.Sasl extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
用于创建 SASL 客户端和服务器的静态类。
<p>
此类定义了如何查找、加载和实例化 SASL 客户端和服务器的策略。
<p>
例如，通过执行以下操作，应用程序或库可获得 SASL 客户端：
<blockquote><pre>
 SaslClient sc = Sasl.createSaslClient(mechanisms,
     authorizationId, protocol, serverName, props, callbackHandler);
</pre></blockquote>
然后该程序可继续使用该实例来创建验证连接。
<p>
类似地，服务器可使用下列代码来获得 SASL 服务器：
<blockquote><pre>
 SaslServer ss = Sasl.createSaslServer(mechanism,
     protocol, serverName, props, callbackHandler);
</pre></blockquote>
 
@since 1.5

@author Rosanna Lee
@author Rob Weltman

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.security.sasl.Sasl.QOP
<!-- END KEY -->
<!-- BEGIN DATA -->
属性名，指定要使用的保护级别。该属性包含一个逗号分隔的、客户端或服务器希望支持的保护级别值的有序列表。保护级别值 (qop) 是下列之一：
 <ul>
<li><tt>&quot;auth&quot;</tt> - 仅验证</li>
<li><tt>&quot;auth-int&quot;</tt> - 验证和完整性保护</li>
<li><tt>&quot;auth-conf&quot;</tt> - 验证、完整性和机密性保护</li>
 </ul>

该列表的顺序指定了客户端或服务器的首选顺序。如果此属性不存在，则默认的保护级别是 <tt>&quot;auth&quot;</tt>。此常量的值是 <tt>&quot;javax.security.sasl.qop&quot;</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.security.sasl.Sasl.STRENGTH
<!-- END KEY -->
<!-- BEGIN DATA -->
属性名，指定要使用的密码强度。该属性包含一个逗号分隔的、客户端或服务器希望支持的密码强度值的有序列表。强度值是下列之一：
 <ul>
 <li><tt>&quot;low&quot;</tt></li>
 <li><tt>&quot;medium&quot;</tt></li>
 <li><tt>&quot;high&quot;</tt></li>
 </ul>
该列表的顺序指定了客户端或服务器的首选顺序。实现应该允许配置这些值的含义。应用程序可以使用 Java Cryptography Extension（Java 加密扩展，JCE），借助可使用 JCE 的机制来控制对与该强度值相符的密码套件的选择。<BR> 如果此属性不存在，则默认的强度是 <tt>&quot;high,medium,low&quot;</tt>。此常量的值是 <tt>&quot;javax.security.sasl.strength&quot;</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.security.sasl.Sasl.SERVER_AUTH
<!-- END KEY -->
<!-- BEGIN DATA -->
属性名，指定服务器是否必须验证客户端。如果服务器必须验证客户端，则该属性包含 <tt>&quot;true&quot;</tt>；否则包含 <tt>&quot;false&quot;</tt>。默认值为 <tt>&quot;false&quot;</tt>。<br>此常量的值是 <tt>&quot;javax.security.sasl.server.authentication&quot;</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.security.sasl.Sasl.MAX_BUFFER
<!-- END KEY -->
<!-- BEGIN DATA -->
属性名，指定 <tt>SaslClient</tt>/<tt>SaslServer</tt> 接收缓冲区的最大大小（以字节为单位）。该属性包含一个整数的字符串表示形式。<br>如果此属性不存在，则由机制定义默认的大小。<br>此常量的值是 <tt>&quot;javax.security.sasl.maxbuffer&quot;</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.security.sasl.Sasl.RAW_SEND_SIZE
<!-- END KEY -->
<!-- BEGIN DATA -->
属性名，指定 <tt>SaslClient</tt>/<tt>SaslServer</tt> 初始发送缓冲区的最大大小（以字节为单位）。该属性包含一个整数的字符串表示形式。验证交换期间在客户端和服务器之间协商此属性的值。<br>此常量的值是 <tt>&quot;javax.security.sasl.rawsendsize&quot;</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.security.sasl.Sasl.REUSE
<!-- END KEY -->
<!-- BEGIN DATA -->
属性名，指定是否重用以前已验证过的会话信息。如果机制实现可以尝试重用以前已验证的会话信息，则该属性包含 &quot;true&quot;；如果实现必须不重用以前已验证的会话信息，则该属性包含 &quot;false&quot;。&quot;true&quot; 设置仅用作一个提示：这不一定会实际重用该信息，很多原因都可能导致无法重用，这些原因包括（但不限于）机制不支持重用、可重用的信息已过期和同位体拒绝支持重用。

该属性的默认值是 &quot;false&quot;。此常量的值是 &quot;javax.security.sasl.reuse&quot;。

注意，不管是否提供了此属性，必须提供创建 SASL 客户端/服务器实例所需的所有其他参数和属性。也就是说，如果期望重用该信息，也不能提供较少的其他信息。
 
支持重用的机制实现可以允许为某些方面自定义其实现，如缓存大小、超时和可重用性标准。这些自定义内容与实现有关。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.security.sasl.Sasl.POLICY_NOPLAINTEXT
<!-- END KEY -->
<!-- BEGIN DATA -->
属性名，指定是否允许易受简单被动式攻击（例如 &quot;PLAIN&quot;）的机制。如果不允许这种机制，则该属性包含 <tt>&quot;true&quot;</tt>；如果允许这种机制，则包含 <tt>&quot;false&quot;</tt>。默认值为 <tt>&quot;false&quot;</tt>。<br>此常量的值是 <tt>&quot;javax.security.sasl.policy.noplaintext&quot;</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.security.sasl.Sasl.POLICY_NOACTIVE
<!-- END KEY -->
<!-- BEGIN DATA -->
属性名，指定是否允许易受主动式攻击（非字典）的机制。如果不允许这种易受主动式攻击的机制，则该属性包含 <tt>&quot;true&quot;</tt>；如果允许这种机制，则包含 <tt>&quot;false&quot;</tt>。默认值为 <tt>&quot;false&quot;</tt>。<br>此常量的值是 <tt>&quot;javax.security.sasl.policy.noactive&quot;</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.security.sasl.Sasl.POLICY_NODICTIONARY
<!-- END KEY -->
<!-- BEGIN DATA -->
属性名，指定是否允许易受被动式字典攻击的机制。如果不允许这种易受字典攻击的机制，则该属性包含 <tt>&quot;true&quot;</tt>；如果允许这种机制，则包含 <tt>&quot;false&quot;</tt>。默认值为 <tt>&quot;false&quot;</tt>。<br> 此常量的值是 <tt>&quot;javax.security.sasl.policy.nodictionary&quot;</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.security.sasl.Sasl.POLICY_NOANONYMOUS
<!-- END KEY -->
<!-- BEGIN DATA -->
属性名，指定是否允许接受匿名登录的机制。如果不允许这种接受匿名登录的机制，则该属性包含 <tt>&quot;true&quot;</tt>；如果允许这种机制，则包含 <tt>&quot;false&quot;</tt>。默认值为 <tt>&quot;false&quot;</tt>。<br> 此常量的值是 <tt>&quot;javax.security.sasl.policy.noanonymous&quot;</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.security.sasl.Sasl.POLICY_FORWARD_SECRECY
<!-- END KEY -->
<!-- BEGIN DATA -->

属性名，指定是否需要在会话间实现了转发安全性的机制。转发安全性意味着中断一个会话不会自动为中断后续的会话提供信息。如果需要在会话间实现转发安全性的机制，则该属性包含 <tt>&quot;true&quot;</tt>；如果不需要这样的机制，则包含 <tt>&quot;false&quot;</tt>。默认值为 <tt>&quot;false&quot;</tt>。<br> 此常量的值是 <tt>&quot;javax.security.sasl.policy.forward&quot;</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.security.sasl.Sasl.POLICY_PASS_CREDENTIALS
<!-- END KEY -->
<!-- BEGIN DATA -->
属性名，指定是否需要传递客户端证书的机制。如果需要传递客户端证书的机制，则该属性包含 <tt>&quot;true&quot;</tt>；如果不需要这样的机制，则包含 <tt>&quot;false&quot;</tt>。默认值为 <tt>&quot;false&quot;</tt>。<br> 此常量的值是 <tt>&quot;javax.security.sasl.policy.credentials&quot;</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.security.sasl.Sasl.CREDENTIALS
<!-- END KEY -->
<!-- BEGIN DATA -->
属性的名称，它指定要使用的证书。该属性包含特定于机制的 Java 证书对象。机制实现可以检查此属性的值，以确定它是否是它们支持的类。该属性可以向支持委托的验证的机制提供证书。
<br>
此常量的值为 <tt>"javax.security.sasl.credentials"</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.security.sasl.SaslClient javax.security.sasl.Sasl.createSaslClient(java.lang.String[] mechanisms, String authorizationId, String protocol, String serverName, java.util.Map<java.lang.String, ?> props, CallbackHandler cbh) throws javax.security.sasl.SaslException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用提供的参数创建 <tt>SaslClient</tt>。

此方法使用 <a href="{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#Provider">JCA Security Provider Framework</a>（在 &quot;Java Cryptography Architecture API Specification &amp; Reference&quot; 中描述）来查找和选择 <tt>SaslClient</tt> 实现。

首先，它从 &quot;SaslClientFactory&quot; 服务的已注册安全提供者和指定的 SASL 机制中获得 <tt>SaslClientFactory</tt> 实例的有序列表。然后它在列表中的每个工厂实例上调用 <tt>createSaslClient()</tt>，直到某个调用生成一个非 null 的 <tt>SaslClient</tt> 实例为止。此方法返回非 null 的 <tt>SaslClient</tt> 实例，如果搜索无法生成非 null 的 <tt>SaslClient</tt> 实例，则返回 null。
<p>
SaslClientFactory 的安全提供者向 JCA Security Provider Framework 注册以下形式的键：<br> <tt>SaslClientFactory.<em>机制名</em></tt><br>和值（即 <tt>javax.security.sasl.SaslClientFactory</tt> 实现的类名）。

例如，一个包含工厂类 <tt>com.wiz.sasl.digest.ClientFactory</tt>（支持 &quot;DIGEST-MD5&quot; 机制）的提供者将向 JCA 注册以下项：<tt>SaslClientFactory.DIGEST-MD5 com.wiz.sasl.digest.ClientFactory</tt>
<p>
有关如何安装和配置安全服务提供者的信息，请参阅 &quot;Java Cryptography Architecture API Specification &amp; Reference&quot;。

@param mechanisms 要试用的机制名的非 null 列表。每个名称都是 SASL 机制的 IANA 注册名。（例如 &quot;GSSAPI&quot;、&quot;CRAM-MD5&quot;）。
@param authorizationId 与协议有关可能为 null 的用于授权的标识。如果为 null 或空，则服务器根据客户端的验证证书派生出一个授权 ID。SASL 验证成功完成后，就允许指定的实体访问。 

@param protocol 非 null 的协议（例如 &quot;ldap&quot;）字符串名，将用它执行验证。

@param serverName 服务器的非 null 完全限定主机名，要向该服务器进行验证。

@param props 可能为 null 的属性集，用于选择 SASL 机制并配置所选机制的验证交换。例如，如果 <tt>props</tt> 包含 <code>Sasl.POLICY_NOPLAINTEXT</code> 属性，且属性值为 <tt>&quot;true&quot;</tt>，则所选的 SASL 机制必须不易受到简单被动式攻击的影响。除了在此类中所声明的标准属性外，也可以包括其他的可能特定于机制的属性。忽略与所选机制无关的属性，包括带有非字符串关键字的所有映射项。

@param cbh SASL 机制使用的回调处理程序（可能为 null），以便为完成验证而从应用程序/库获得更多的信息。例如，SASL 机制可能需要从调用者获得验证 ID、密码和域。使用 <tt>NameCallback</tt> 来请求验证 ID。使用 <tt>PasswordCallback</tt> 来请求密码。如果要从域列表中选择，则使用 <tt>RealmChoiceCallback</tt> 来请求域，如果必须输入域，则使用 <tt>RealmCallback</tt> 来请求域。 

@return 使用所提供参数创建的 <tt>SaslClient</tt>，可能为 null。如果为 null，则无法找到可生成 SaslClient 的 <tt>SaslClientFactory</tt>。
@exception SaslException 如果因为错误而无法创建 <tt>SaslClient</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.security.sasl.SaslServer javax.security.sasl.Sasl.createSaslServer(String mechanism, String protocol, String serverName, java.util.Map<java.lang.String, ?> props, CallbackHandler cbh) throws javax.security.sasl.SaslException
<!-- END KEY -->
<!-- BEGIN DATA -->
为指定机制创建一个 <tt>SaslServer</tt>。 

此方法使用 <a href="{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#Provider">JCA Security Provider Framework</a>（在 &quot;Java Cryptography Architecture API Specification &amp; Reference&quot; 中所有描述）来查找和选择 <tt>SaslServer</tt> 实现。

首先，它从 &quot;SaslServerFactory&quot; 服务的已注册安全提供者和指定的 SASL 机制中获得 <tt>SaslServerFactory</tt> 实例的有序列表。然后它在列表中的每个工厂实例上调用 <tt>createSaslServer()</tt>，直到某个调用生成一个非 null 的 <tt>SaslServer</tt> 实例为止。此方法返回非 null 的 <tt>SaslServer</tt> 实例，如果搜索无法生成非 null 的 <tt>SaslServer</tt> 实例，则返回 null。
<p>
SaslServerFactory 的安全提供者向 JCA Security Provider Framework 注册以下形式的键：<br> <tt>SaslServerFactory.<em>机制名</em></tt><br>和值（即 <tt>javax.security.sasl.SaslServerFactory</tt> 实现的类名）。

例如，一个包含工厂类 <tt>com.wiz.sasl.digest.ServerFactory</tt>（支持 &quot;DIGEST-MD5&quot; 机制）的提供者将向 JCA 注册以下项： <tt>SaslServerFactory.DIGEST-MD5  com.wiz.sasl.digest.ServerFactory</tt>
<p>
有关如何安装和配置安全服务提供者的信息，请参阅 &quot;Java Cryptography Architecture API Specification &amp; Reference&quot;。

@param mechanism 非 null 的机制名。它必须是 SASL 机制的 IANA 注册名。（例如 &quot;GSSAPI&quot;、&quot;CRAM-MD5&quot;）。
@param protocol 非 null 的协议（例如 &quot;ldap&quot;）字符串名，将为它执行验证。
@param serverName 服务器的非 null 完全限定主机名。
@param props 可能为 null 的属性集，用于选择 SASL 机制并配置所选机制的验证交换。例如，如果 <tt>props</tt> 包含 <code>Sasl.POLICY_NOPLAINTEXT</code> 属性，且属性值为 <tt>&quot;true&quot;</tt>，则所选的 SASL 机制必须不易受到简单被动式攻击的危害。除了在此类中所声明的标准属性外，也可以包括其他的可能特定于机制的属性。忽略与所选机制无关的属性，包括带有非字符串关键字的所有映射项。

@param cbh SASL 机制使用的回调处理程序（可能为 null），以便为完成验证而从应用程序/库获得更多的信息。例如，SASL 机制可能需要从调用者获得验证 ID、密码和域。使用 <tt>NameCallback</tt> 来请求验证 ID。使用 <tt>PasswordCallback</tt> 来请求密码。如果要从域列表中选择，则使用 <tt>RealmChoiceCallback</tt> 来请求域，如果必须输入域，则使用 <tt>RealmCallback</tt> 来请求域。 

@return 使用所提供参数创建的 <tt>SaslServer</tt>，可能为 null。如果为 null，则无法找到可生成 SaslServer 的 <tt>SaslServerFactory</tt>。
@exception SaslException 如果因为错误而无法创建 <tt>SaslServer</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Enumeration<javax.security.sasl.SaslClientFactory> javax.security.sasl.Sasl.getSaslClientFactories()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得用于生成 <tt>SaslClient</tt> 的已知工厂的枚举。此方法使用与 <tt>createSaslClient()</tt> 相同的查找工厂算法。
@return 用于生成 <tt>SaslClient</tt> 的已知工厂非 null 枚举。
@see #createSaslClient

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Enumeration<javax.security.sasl.SaslServerFactory> javax.security.sasl.Sasl.getSaslServerFactories()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得用于生成 <tt>SaslServer</tt> 的已知工厂的枚举。此方法使用与 <tt>createSaslServer()</tt> 相同的查找工厂算法。
@return 用于生成 <tt>SaslServer</tt> 的已知工厂的非 null 枚举，
@see #createSaslServer

<!-- END DATA -->
