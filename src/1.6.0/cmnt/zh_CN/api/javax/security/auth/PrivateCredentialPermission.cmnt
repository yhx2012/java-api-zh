<!-- BEGIN KEY -->
public final class javax.security.auth.PrivateCredentialPermission extends java.security.Permission
<!-- END KEY -->
<!-- BEGIN DATA -->
此类用来保护对属于特定 <code>Subject</code> 的私有 Credential 的访问。<code>Subject</code> 通过 Principals Set 表示。

<p> 此 <code>Permission</code> 的目标名称指定了一个 Credential 类名和一个 Principals Set。此 Permission 的操作的唯一有效值是 &quot;read&quot;。目标名称必须遵守下面的语法：

 <pre>
	CredentialClass {PrincipalClass &quot;PrincipalName&quot;}*
 </pre>

例如，下面的权限授予对 Subjects 拥有的 com.sun.PrivateCredential 的访问，该 Subjects 有一个 com.sun.Principal,名称为 &quot;duke&quot;。注意，尽管此例子（以及下面的所有例子）在 grant 语句中不包含 Codebase、SignedBy 或 Principal 信息（为了使例子简单），但是实际的策略配置在适当的时候应该指定该信息。

 <pre>

    grant {
	permission javax.security.auth.PrivateCredentialPermission
		&quot;com.sun.PrivateCredential com.sun.Principal \&quot;duke\&quot;&quot;,
		&quot;read&quot;;
    };
 </pre>

如果 CredentialClass 为 &quot;*&quot;，那么授予属于指定的 <code>Subject</code> 的所有 Credential 访问权限。如果 &quot;PrincipalName&quot; 为 &quot;*&quot;，那么授予指定的由任何 <code>Subject</code> 拥有的 Credential 访问权限，此 <code>Subject</code> 具有指定的 <code>Principal</code> （实际的 PrincipalName 无关紧要）。例如，下面的语句授予对任何有 a.b.Principal 的 <code>Subject</code> 所拥有的 a.b.Credential 访问权限。
 
 <pre>
    grant {
	permission javax.security.auth.PrivateCredentialPermission
		&quot;a.b.Credential a.b.Principal &quot;*&quot;&quot;,
		&quot;read&quot;;
    };
 </pre>

如果 PrincipalClass 和 &quot;PrincipalName&quot; 都为 &quot;*&quot;，那么授予由任何 <code>Subject</code> 拥有的指定的 Credential 访问权限。
 
<p> 另外，PrincipalClass/PrincipalName 对可以重复：

 <pre>
    grant {
	permission javax.security.auth.PrivateCredentialPermission
		&quot;a.b.Credential a.b.Principal &quot;duke&quot; c.d.Principal &quot;dukette&quot;&quot;,
		&quot;read&quot;;
    };
 </pre>

上面的语句授予对私有 Credential（&quot;a.b.Credential&quot;）的访问权限，&quot;a.b.Credential&quot; 属于带有至少两个 Principals 的 <code>Subject</code>：名称为 &quot;duke&quot; 的 &quot;a.b.Principal&quot;，和名称为 &quot;dukette&quot; 的 &quot;c.d.Principal&quot;。

@version 1.31, 12/19/03

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.security.auth.PrivateCredentialPermission.credentialClass
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.util.Set javax.security.auth.PrivateCredentialPermission.principals
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial 与此 permission 相关联的 Principals 。该集合包含 <code>PrivateCredentialPermission.CredOwner</code> 类型的元素。

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean javax.security.auth.PrivateCredentialPermission.testing
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.PrivateCredentialPermission(String name, String actions)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定 <code>name</code> 的新 <code>PrivateCredentialPermission</code>。<code>name</code> 指定了一个 Credential 类和一个 <code>Principal</code> 集合。

 <p>

@param name 指定 Credential 类和 <code>Principal</code> 集合的名称。 <p>

@param actions 指定 Credential 能够被读取的操作。

@throws IllegalArgumentException 如果 <code>name</code> 没有遵循正确的语法或者如果 <code>actions</code> 不是 &quot;read&quot;。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.security.auth.PrivateCredentialPermission.getCredentialClass()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>PrivateCredentialPermission</code> 相关联的 Credential 的 Class 名称。

 <p>

@return 与此 <code>PrivateCredentialPermission</code> 相关联的 Credential 的 Class 名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[][] javax.security.auth.PrivateCredentialPermission.getPrincipals()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>PrivateCredentialPermission</code> 相关联的 <code>Principal</code> 类和名称。信息以二维数组 (array[x][y]) 的形式返回。'x' 值对应于 <code>Principal</code> 的类和名称对的数目。当 (y==0) 时，它对应于 <code>Principal</code> 类值，当 (y==1) 时,它对应于 <code>Principal</code> 名称值。例如，array[0][0] 对应于数组中的第一个 <code>Principal</code> 的类名。array[0][1] 对应于数组中的第一个 <code>Principal</code> 的 <code>Principal</code> 名。

 <p>

@return 与此 <code>PrivateCredentialPermission</code> 相关联的 <code>Principal</code> 类和名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.security.auth.PrivateCredentialPermission.implies(Permission p)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查此 <code>PrivateCredentialPermission</code> 是否暗含指定的<code>Permission</code>。

 <p>

如果满足下面的条件，则此方法返回 true：
 <p><ul>
<li> <i>p</i> 是 PrivateCredentialPermission 的一个实例，且 <p>
<li> 此对象的目标名称隐含了 <i>p</i> 的目标名称。例如：
 <pre>
	[* P1 &quot;duke&quot;] implies [a.b.Credential P1 &quot;duke&quot;].
	[C1 P1 &quot;duke&quot;] implies [C1 P1 &quot;duke&quot; P2 &quot;dukette&quot;].
	[C1 P2 &quot;dukette&quot;] implies [C1 P1 &quot;duke&quot; P2 &quot;dukette&quot;].
 </pre>
 </ul>		

 <p>

@param p 所要检查的 <code>Permission</code>。

@return 如果此 <code>PrivateCredentialPermission</code> 隐含了指定的 <code>Permission</code>，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.security.auth.PrivateCredentialPermission.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查两个 <code>PrivateCredentialPermission</code> 对象是否相等。检查 <i>obj</i> 是否为 <code>PrivateCredentialPermission</code>，是否与此对象具有相同的证书类以及相同的 Principals。在各自的 Permission 的目标名称中的 Principals 的顺序是无关的。

 <p>

@param obj 要与此对象进行相等性测试的对象。

@return 如果 obj 为 <code>PrivateCredentialPermission</code>，与此对象具有相同的证书类以及相同的 Principals，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.security.auth.PrivateCredentialPermission.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象的哈希码值。

@return 此对象的哈希码值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.security.auth.PrivateCredentialPermission.getActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回操作的&ldquo;规范的字符串表示形式&rdquo;。此方法总是返回 String &quot;read&quot;。

 <p>

@return 操作（总是返回 &quot;read&quot;）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.PermissionCollection javax.security.auth.PrivateCredentialPermission.newPermissionCollection()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>PermissionCollection</code> 中同类的 PrivateCredentialPermissions 集合。没有定义这种 <code>PermissionCollection</code>，所以此方法总是返回 <code>null</code>。

 <p>

@return 所有情况下都返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.security.auth.PrivateCredentialPermission.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流读取此对象（也就是将其反序列化）。

<!-- END DATA -->
