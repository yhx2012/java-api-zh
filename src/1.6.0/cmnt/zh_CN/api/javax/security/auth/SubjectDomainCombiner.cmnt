<!-- BEGIN KEY -->
public class javax.security.auth.SubjectDomainCombiner extends java.lang.Object implements java.security.DomainCombiner
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SubjectDomainCombiner</code> 通过与此 <code>SubjectDomainCombiner</code> 关联的 <code>Subject</code> 中的 Principals 更新 ProtectionDomains。

@version 1.45, 12/19/03 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.SubjectDomainCombiner(Subject subject)
<!-- END KEY -->
<!-- BEGIN DATA -->
将提供的 <code>Subject</code> 与此 <code>SubjectDomainCombiner</code> 关联。

 <p>

@param subject 要与此 <code>SubjectDomainCombiner</code> 关联的 <code>Subject</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.Subject javax.security.auth.SubjectDomainCombiner.getSubject()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 <code>SubjectDomainCombiner</code> 关联的 <code>Subject</code>。

 <p>

@return 与此 <code>SubjectDomainCombiner</code> 关联的 <code>Subject</code>，如果没有与此 <code>SubjectDomainCombiner</code> 关联的 <code>Subject</code>，则返回 <code>null</code>。

@exception SecurityException 如果调用者没有获取与此 <code>SubjectDomainCombiner</code> 关联的 <code>Subject</code> 的权限。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.ProtectionDomain[] javax.security.auth.SubjectDomainCombiner.combine(java.security.ProtectionDomain[] currentDomains, java.security.ProtectionDomain[] assignedDomains)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用与此 <code>SubjectDomainCombiner</code> 关联的 <code>Subject</code> 中的 Principals 更新相关的 ProtectionDomains。

<p> 为 <i>currentDomains</i> 数组中的每个 <code>ProtectionDomain</code> 创建一个新的 <code>ProtectionDomain</code> 实例。每个新 <code>ProtectionDomain</code> 实例使用相应的 <i>currentDomains</i> 中的 <code>ProtectionDomain</code> 的 <code>CodeSource</code>、<code>Permission</code> 和 <code>ClassLoader</code>，以及与此 <code>SubjectDomainCombiner</code> 关联的 <code>Subject</code> 的 Principals 来创建。
 
<p> 将所有新实例化的 ProtectionDomains 组合到一个新数组中。把 <i>assignedDomains</i> 数组中的 ProtectionDomains 追加到此新数组中，同时返回结果。

<p> 注意，可能发生移除重复的 ProtectionDomains 这样的优化。另外，也允许缓存 ProtectionDomains。

 <p>

@param currentDomains 与当前执行线程关联的 ProtectionDomain，直到最近的特权 <code>ProtectionDomain</code>。ProtectionDomain 按执行的顺序列出，最近执行的 <code>ProtectionDomain</code> 位于数组的开头。如果当前的执行线程没有相关的 ProtectionDomains，则此参数可以为 <code>null</code>。<p>

@param assignedDomains 从父线程继承的 ProtectionDomains，如果发生对 AccessController.doPrivileged(..., <i>context</i>) 的调用，则此参数为特权 <i>context</i> 中的 ProtectionDomains。如果不存在从父线程继承的 ProtectionDomains 或不存在取自 <i>context</i> 的 ProtectionDomains，则此参数可以为 <code>null</code>。

@return 由更新的 ProtectionDomains 组成的新数组，或 <code>null</code>。

<!-- END DATA -->
