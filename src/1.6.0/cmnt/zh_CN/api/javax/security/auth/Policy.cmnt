<!-- BEGIN KEY -->
public abstract class javax.security.auth.Policy extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<p> 这是用于表示基于 Subject 授权的系统策略的抽象类。此类的子类实现提供一种方式来指定一个基于 Subject 的访问控制 <code>Policy</code>。

<p> 可以通过以下方式查询 <code>Policy</code> 对象，查找授予作为 <code>Principal</code> 运行的代码的 Permission 集合：

 <pre>
	policy = Policy.getPolicy();
	PermissionCollection perms = policy.getPermissions(subject,
							codeSource);
 </pre>

<code>Policy</code> 对象查询本地策略，且返回适当的 <code>Permissions</code> 对象，该对象所具有的权限被授予与所提供的 <i>subject</i> 相关联的 Principals，同时也授予由提供的 <i>codeSource</i> 指定的代码。

<p> <code>Policy</code> 包含下面的信息。注意，此例子只表示默认的 <code>Policy</code> 实现的语法。此类的子类实现可以实现替代语法，也可以根据任何如文件、数据库或服务器之类的源获取 <code>Policy</code>。

<p> <code>Policy</code> 中的每一项表示为一个 <b><i>grant</i></b> 条目。每个 <b><i>grant</i></b> 条目指定代码基、代码签名者和 Principals 三元组，以及授予该三元组的 Permissions。

 <pre>
	grant CodeBase [&quot;URL&quot;], Signedby [&quot;signers&quot;],
	      Principal [Principal_Class] &quot;Principal_Name&quot; {
	    Permission Permission_Class [&quot;Target_Name&quot;]
					[, &quot;Permission_Actions&quot;]
					[, signedBy &quot;SignerName&quot;];
	};
 </pre>

三元组名称/值对的组成部分 CodeBase 和 Signedby 是可选的。如果它们不存在，任何代码基和任何签名者（包括未签名代码）都将相符。例如，

 <pre>
	grant CodeBase &quot;foo.com&quot;, Signedby &quot;foo&quot;,
	      Principal com.sun.security.auth.SolarisPrincipal &quot;duke&quot; {
	    permission java.io.FilePermission &quot;/home/duke&quot;, &quot;read, write&quot;;
	};
 </pre>

此 <b><i>grant</i></b> 条目指定 &quot;foo.com&quot; 中的代码，由 &quot;foo&quot; 签名,作为 <code>SolarisPrincipal</code> 运行且名称为 duke，权限为 <code>Permission</code>。此 <code>Permission</code> 允许执行代码在目录 &quot;/home/duke&quot; 下读取和写入文件。

<p> 为了作为一个特定的 <code>Principal</code>&ldquo;运行&rdquo;，代码调用 <code>Subject.doAs(subject, ...)</code> 方法。调用该方法后，代码作为与指定的 <code>Subject</code> 相关联的所有 Principals 运行。注意，只在调用 <code>Subject.doAs</code> 之后，此 <code>Policy</code>（以及在此 <code>Policy</code> 中授予的 Permission）才有效。

<p> 多个 Principals 可以列在一个 <b><i>grant</i></b> 条目中。在 grant 条目中的所有 Principals 必须与提供给 <code>Subject.doAs</code> 的 <code>Subject</code> 相关联，以便授予该 <code>Subject</code> 指定的 Permissions。

 <pre>
	grant Principal com.sun.security.auth.SolarisPrincipal &quot;duke&quot;,
	      Principal com.sun.security.auth.SolarisNumericUserPrincipal &quot;0&quot; {
	    permission java.io.FilePermission &quot;/home/duke&quot;, &quot;read, write&quot;;
	    permission java.net.SocketPermission &quot;duke.com&quot;, &quot;connect&quot;;
	};
 </pre>

此条目授予任何以 &quot;duke&quot; 和 &quot;0&quot; 运行的代码在 duke 的主目录下读取和写入文件的权限，以及创建到 &quot;duke.com&quot; 的套接字连接的权限。
 
<p> 注意，在此 <code>Policy</code> 中不允许非基于 Principal 的 grant 条目。因此，像下面这样的 grant 条目：

 <pre>
	grant CodeBase &quot;foo.com&quot;, Signedby &quot;foo&quot; {
	    permission java.io.FilePermission &quot;/tmp/scratch&quot;, &quot;read, write&quot;;
	};
 </pre>

是被拒绝的。这种权限必须列在 <code>java.security.Policy</code> 中。

<p> 可以通过把 &quot;auth.policy.provider&quot; 安全属性（在 Java 安全属性文件中）的值设置为所需的 <code>Policy</code> 实现类的完全限定名，从而改变默认的 <code>Policy</code> 实现。Java 安全属性文件位于名称为 &lt;JAVA_HOME&gt;/lib/security/java.security 的文件中。&lt;JAVA_HOME&gt; 是指 java.home 系统属性的值并指定安装 JRE 的目录。


@deprecated	从 JDK 1.4 版本开始，由 java.security.Policy 取代。java.security.Policy 有一个方法：
 <pre>
 	public PermissionCollection getPermissions
  	    (java.security.ProtectionDomain pd)
 
 </pre>
ProtectionDomain 有一个构造方法：
 <pre>
	public ProtectionDomain
	    (CodeSource cs,
	     PermissionCollection permissions,
	     ClassLoader loader,
	     Principal[] principals)
 </pre>

这两个 API 为调用者提供向 Policy 查询基于 Principal 的 Permission 条目的方法。

@version 1.50, 05/18/04

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.security.auth.Policy()
<!-- END KEY -->
<!-- BEGIN DATA -->
唯一的构造方法。（由子类构造方法调用，通常是隐式的）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.security.auth.Policy javax.security.auth.Policy.getPolicy()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回安装的 Policy 对象。此方法首先通过 <code>AuthPermission(&quot;getPolicy&quot;)</code> 权限调用 <code>SecurityManager.checkPermission</code> ，以确保调用者具有获取 Policy 对象的权限。

 <p>

@return 安装的 Policy。返回值不能为 <code>null</code>。

@exception java.lang.SecurityException 如果当前线程不具有获取此 Policy 对象的权限。


@see #setPolicy

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.security.auth.Policy.setPolicy(Policy policy)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置系统级 Policy 对象。此方法首先通过 <code>AuthPermission(&quot;setPolicy&quot;)</code> 权限调用 <code>SecurityManager.checkPermission</code> ，以确保调用者具有设置 Policy 对象的权限。

 <p>

@param policy 新的系统 Policy 对象。

@exception java.lang.SecurityException 如果当前线程不具有设置此 Policy 的权限。

@see #getPolicy

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.PermissionCollection javax.security.auth.Policy.getPermissions(Subject subject, CodeSource cs)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取授予与指定的 <code>CodeSource</code> 关联的 Principals 的 Permissions。

 <p>

@param subject 与此 <code>Subject</code>（主题）所关联的 Principal（主体）与提供的 <code>CodeSource</code> 共同确定此方法返回的 Permission。此参数可以为 <code>null</code>。 <p>

@param cs 它的 <code>CodeSource</code> 所指定的代码，与提供的 <code>CodeSource</code> 一起使用，确定此方法返回的 Permissions。此参数可以为 <code>null</code>。

@return 授予所有的 <code>Subject</code> 以及提供的 <i>subject</i> 和 <i>cs</i> 参数中指定的代码的 Permissions Collection。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.security.auth.Policy.refresh()
<!-- END KEY -->
<!-- BEGIN DATA -->
刷新/重新加载 Policy。

<p>此方法使该对象刷新/重新加载其当前 Policy。这是依赖于实现的。例如，如果 Policy 对象存储在文件中，调用 <code>refresh</code> 将会引起重新读取该文件。

 <p>

@exception SecurityException 如果调用者没有刷新此 Policy 的权限。

<!-- END DATA -->
