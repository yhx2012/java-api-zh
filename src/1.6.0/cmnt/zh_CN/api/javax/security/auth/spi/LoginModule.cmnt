<!-- BEGIN KEY -->
public interface javax.security.auth.spi.LoginModule
<!-- END KEY -->
<!-- BEGIN DATA -->
<p> <code>LoginModule</code> 描述由验证技术提供者实现的接口。LoginModule 插入到应用程序中以提供特定类型的验证。

<p> 当应用程序写入 <code>LoginContext</code> API 时，验证技术提供者将实现 <code>LoginModule</code> 接口。<code>Configuration</code> 指定将与特定登录应用程序一起使用的 LoginModule(s)。因此可以将不同的 LoginModule 插入到应用程序中，而无需修改应用程序本身。

<p> <code>LoginContext</code> 负责读取 <code>Configuration</code> 和实例化适当的 LoginModule。每个 <code>LoginModule</code> 都是使用 <code>Subject</code>、<code>CallbackHandler</code>、共享的 <code>LoginModule</code> 状态和特定于 LoginModule 的选项来实例化的。
 
<code>Subject</code> 表示当前正进行验证的 <code>Subject</code>，如果验证成功，则使用相关的 Credential 更新它。LoginModule 使用 <code>CallbackHandler</code> 与用户进行通信。例如，<code>CallbackHandler</code> 可以用于提示要求用户名和密码。注意，<code>CallbackHandler</code> 可以为 null。确实需要一个 <code>CallbackHandler</code> 来对 <code>Subject</code> 进行验证的 LoginModule 可以抛出 <code>LoginException</code>。LoginModule 可以有选择地使用共享状态来共享它们之间的信息或数据。

<p> 特定于 LoginModule 的选项表示由管理员或用户在 <code>Configuration</code> 中为此 <code>LoginModule</code> 配置的选项。这些选项由 <code>LoginModule</code> 自身定义，并在其中控制其行为。例如，<code>LoginModule</code> 可以定义支持调试/测试功能的选项。这些选项是使用键-值语法定义的，例如 <i>debug=true</i>。<code>LoginModule</code> 以 <code>Map</code> 形式存储这些选项，因此可以使用键来获取这些值。注意，对 <code>LoginModule</code> 选择定义的选项个数是没有限制的。

<p> 调用应用程序将验证过程视为单个操作。但是，<code>LoginModule</code> 中的验证过程分两个不同的阶段进行。在第一个阶段，LoginModule 的 <code>login</code> 方法由 LoginContext 的 <code>login</code> 方法调用。<code>LoginModule</code> 的 <code>login</code> 方法执行实际的验证（例如，提示并验证密码），并将验证状态作为私有状态信息保存。一旦完成上述操作，LoginModule 的 <code>login</code> 将返回 <code>true</code>（如果成功）或 <code>false</code>（如果应该忽略它），或抛出 <code>LoginException</code> 来指示失败。在失败的情况下，<code>LoginModule</code> 不必再尝试进行验证或者引入延迟。由应用程序完成这类任务。如果应用程序试图重新尝试验证，将会再次调用 LoginModule 的 <code>login</code> 方法。

<p> 在第二个阶段，如果 LoginContext 的整个验证成功（相关的 REQUIRED、REQUISITE、SUFFICIENT 和 OPTIONAL LoginModule 成功），则调用 <code>LoginModule</code> 的 <code>commit</code> 方法。<code>LoginModule</code> 的 <code>commit</code> 方法检查其私有保存状态，以查看自己的验证是否成功。如果整个 <code>LoginContext</code> 验证成功，并且 LoginModule 自己的验证也获得成功，则 <code>commit</code> 方法会将相关的 Principal（已进行验证的身份）和 Credential（验证数据，如加密密钥）与位于 <code>LoginModule</code> 中的 <code>Subject</code> 联系在一起。

<p> 如果 LoginContext 的整个验证失败（相关的 REQUIRED、REQUISITE、SUFFICIENT 和 OPTIONAL LoginModule 没有成功），则调用每个 <code>LoginModule</code> 的 <code>abort</code> 方法。在这种情况下，<code>LoginModule</code> 移除/销毁原先保存的任何验证状态。

<p> 注销 <code>Subject</code> 只涉及一个阶段。<code>LoginContext</code> 调用 LoginModule 的 <code>logout</code> 方法。然后 <code>LoginModule</code> 的 <code>logout</code> 方法执行注销过程，例如从 <code>Subject</code> 中移除 Principal 或 Credential，或者记录会话信息。

<p> <code>LoginModule</code> 实现必须有一个无参数的构造方法。这允许加载 <code>LoginModule</code> 的类对其进行实例化。

@version 1.53, 05/05/04
@see javax.security.auth.login.LoginContext
@see javax.security.auth.login.Configuration

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.security.auth.spi.LoginModule.initialize(Subject subject, CallbackHandler callbackHandler, java.util.Map<java.lang.String, ?> sharedState, java.util.Map<java.lang.String, ?> options)
<!-- END KEY -->
<!-- BEGIN DATA -->
初始化此 LoginModule。

<p> 在此 <code>LoginModule</code> 已经实例化后，由 <code>LoginContext</code> 调用此方法。此方法的目的是使用相关的信息初始化此 <code>LoginModule</code>。如果此 <code>LoginModule</code> 不理解存储在 <code>sharedState</code> 或 <code>options</code> 参数中的任何数据，则可以忽略它们。

 <p>

@param subject 要进行验证的 <code>Subject</code>。 <p>

@param callbackHandler 用来与最终用户通信的 <code>CallbackHandler</code>（例如，提示要求用户名和密码）。 <p>

@param sharedState 与其他已配置的 LoginModule 共享的状态。 <p>

@param options 在登录 <code>Configuration</code> 中为此特定的 <code>LoginModule</code> 指定的选项。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.security.auth.spi.LoginModule.login() throws javax.security.auth.login.LoginException
<!-- END KEY -->
<!-- BEGIN DATA -->
对 <code>Subject</code> 进行验证的方法（阶段 1）。

<p> 此方法的实现对 <code>Subject</code> 进行验证。例如，它可以向 <code>Subject</code> 提示一些信息（比如用户名和密码），然后试图验证该密码。此方法将验证尝试的结果作为私有状态保存在 LoginModule 中。

 <p>

@exception LoginException 如果验证失败

@return 如果验证成功，则返回 true；如果应该忽略此 <code>LoginModule</code>，则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.security.auth.spi.LoginModule.commit() throws javax.security.auth.login.LoginException
<!-- END KEY -->
<!-- BEGIN DATA -->
提交验证过程的方法（阶段 2）。

<p> 如果 LoginContext 的整个验证成功（相关的 REQUIRED、REQUISITE、SUFFICIENT 和 OPTIONAL LoginModule 成功），则调用此方法。

<p> 如果此 LoginModule 自己的验证尝试成功（通过获取 <code>login</code> 方法保存的私有状态检查），则此方法会将相关的 Principal 和 Credential 与位于 <code>LoginModule</code> 中的 <code>Subject</code> 联系在一起。如果此 LoginModule 自己的验证尝试失败，则此方法将移除/销毁原先保存的任何状态。

 <p>

@exception LoginException 如果提交失败。

@return 如果此方法成功，则返回 true；如果应该忽略此 <code>LoginModule</code>，则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.security.auth.spi.LoginModule.abort() throws javax.security.auth.login.LoginException
<!-- END KEY -->
<!-- BEGIN DATA -->
中止验证过程的方法（阶段 2）。

<p> 如果 LoginContext 的整个验证失败（相关的 REQUIRED、REQUISITE、SUFFICIENT 和 OPTIONAL LoginModule 没有成功），则调用此方法。

<p> 如果此 LoginModule 自己的验证尝试成功（通过获取 <code>login</code> 方法保存的私有状态检查），则此方法将清除任何原先保存的状态。

 <p>

@exception LoginException 如果中止失败

@return 如果此方法成功，则返回 true；如果应该忽略此 <code>LoginModule</code>，则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.security.auth.spi.LoginModule.logout() throws javax.security.auth.login.LoginException
<!-- END KEY -->
<!-- BEGIN DATA -->
注销 <code>Subject</code> 的方法。  

<p>此方法的实现可以移除/销毁 Subject 的 Principal 和 Credential。

 <p>

@exception LoginException 如果注销失败

@return 如果此方法成功，则返回 true；如果应该忽略此 <code>LoginModule</code>，则返回 false。

<!-- END DATA -->
