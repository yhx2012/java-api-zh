<!-- BEGIN KEY -->
public class javax.security.auth.login.LoginContext extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<p> <code>LoginContext</code> 类描述用于验证 Subjects 的基本方法和提供开发与底层验证技术无关的应用程序的方法。<code>Configuration</code> 指定将与特定应用程序一起使用的验证技术或 <code>LoginModule</code>。可以将不同的 LoginModules 插入到应用程序中而无需修改应用程序本身。

<p> 除了支持<i>可插入</i> 验证之外，此类还支持<i>堆栈式</i> 验证的概念。可将应用程序配置为使用多于一个的 LoginModule。例如，可以在应用程序上配置 Kerberos LoginModule 和智能卡 LoginModule。

<p> 典型的调用者使用<i>名称</i> 和 <code>CallbackHandler</code> 来实例化 LoginContext。LoginContext 使用<i>名称</i> 作为 Configuration 中的索引，以确定应该使用哪些 LoginModules，并确定为了使整个验证成功，哪些验证是必须成功的。把 <code>CallbackHandler</code> 被传递给底层 LoginModules，因此它们可以与用户通信和交互（例如，通过图形用户界面提示用户名和密码）。

<p> 一旦调用者已经实例化一个 LoginContext，则它会调用 <code>login</code> 方法对 <code>Subject</code> 进行验证。<code>login</code> 方法调用配置的模块来执行它们各自类型的验证（用户名/密码、智能卡 pin 码验证，等等）。注意，如果验证失败，则 LoginModules 不会尝试重新进行验证，也不会导致延迟。这类任务属于 LoginContext 调用者。

<p> 如果 <code>login</code> 方法返回而不是抛出一个异常，则整个验证就获得成功了。接着调用者可以通过调用 <code>getSubject</code> 方法来检索新验证的 Subject。与 Subject 关联的 Principals 和 Credentials 可以通过分别调用 Subject 的 <code>getPrincipals</code>、<code>getPublicCredentials</code> 和 <code>getPrivateCredentials</code> 方法来进行检索。

<p> 调用者可通过调用 <code>logout</code> 方法注销 Subject。与对待 <code>login</code> 方法类似，此 <code>logout</code> 方法对已配置的模块调用 <code>logout</code> 方法。
 
<p> LoginContext 不应该用于对一个以上的 Subject 进行验证。单个 LoginContext 应该用于对每个不同的 Subject 进行验证。

<p> 以下文档适用于所有的 LoginContext 构造方法：
 <ol>

 <li> <code>Subject</code>
 <ul>
<li> 如果构造方法有一个 Subject 输入参数，则 LoginContext 使用调用者指定的 Subject 对象。
 <p>
<li> 如果调用者指定一个 <code>null</code> Subject，并且 <code>null</code> 值是允许的，则 LoginContext 将实例化一个新 Subject。
 <p>
<li> 如果构造方法<b>没有</b> Subject 输入参数，则 LoginContext 将实例化一个新 Subject。
 <p>
 </ul>

<li> <code>Configuration</code> 
 <ul> 
<li> 如果构造方法有一个 Configuration 输入参数，并且调用者指定一个非 null Configuration，则 LoginContext 使用调用者指定的 Configuration。
 <p>
如果构造方法<b>没有</b> Configuration 输入参数，或者调用者指定一个 <code>null</code> Configuration 对象，则构造方法使用以下调用来获得已安装的 Configuration：
 <pre>
      config = Configuration.getConfiguration();
 </pre>
对于这两种情况，提供给构造方法的 <i>name</i> 参数被传递给 <code>Configuration.getAppConfigurationEntry</code> 方法。如果 Configuration 没有用于指定 <i>name</i> 的条目，那么 <code>LoginContext</code> 将使用名称 &quot;<i>other</i>&quot;（默认条目名称）调用 <code>getAppConfigurationEntry</code>。如果没有用于 &quot;<i>other</i>&quot; 的条目，则抛出 <code>LoginException</code>。
 <p>
<li> 当 LoginContext 使用已安装的 Configuration 时，调用者需要 createLoginContext.<em>name</em> 和 createLoginContext.other AuthPermissions（可能需要）。此外，LoginContext 将从 <code>AccessController.doPrivileged</code> 调用中调用已配置的模块，因此执行与安全有关的任务（例如连接到远端主机和更新 Subject）的模块将需要各自的权限，但是 LoginContext 的调用者不需要这些权限。
 <p>
<li> 当 LoginContext 使用调用者指定的 Configuration 时，调用者不需要任何 createLoginContext AuthPermission。LoginContext 为调用者保存 <code>AccessControlContext</code>，并且从该上下文限制的 <tt>AccessController.doPrivileged</tt> 调用中调用已配置的模块。这意味着调用者上下文（在创建 LoginContext 时存储的上下文）必须具有足够的权限去执行该模块可以执行的任何与安全有关的任务。
 <p>
 </ul>

 <li> <code>CallbackHandler</code>
 <ul>
<li> 如果构造方法有一个 CallbackHandler 输入参数，则 LoginContext 将使用调用者指定的 CallbackHandler 对象。
 <p>
<li> 如果构造方法<b>没有</b> CallbackHandler 输入参数，或者调用者指定了一个 <code>null</code> CallbackHandler 对象（并且允许使用 <code>null</code> 值），则 LoginContext 将查询 <i>auth.login.defaultCallbackHandler</i> 安全属性来查找默认处理程序实现的完全限定类名称。如果没有设置安全属性，则底层模块不会有一个用来与用户通信的 CallbackHandler。调用者因此假定已配置的模块具有对用户进行验证的替代方法。

 <p>
<li> 当 LoginContext 使用安装的 Configuration（而不是调用者指定的 Configuration，请参阅上文）时，此 LoginContext 必须在一个新 CallbackHandler 实现中包装任何调用者指定的或默认的 CallbackHandler 实现，CallbackHandler 实现的 <code>handle</code> 方法的实现在由调用者的当前 <code>AccessControlContext</code> 限制的 <code>java.security.AccessController.doPrivileged</code> 调用中调用指定 CallbackHandler 的 <code>handle</code> 方法。
 </ul>
 </ol>

<p> 注意，Security Properties（比如 <code>auth.login.defaultCallbackHandler</code>）可以通过 <code>java.security.Security</code> 类以编程的方式来进行设置，或者是在名为 &lt;JAVA_HOME&gt;/lib/security/java.security的 Java 安全属性文件中静态设置的。&lt;JAVA_HOME&gt; 是指java.home 系统属性的值并且指定安装 JRE 的目录）
 
@version 1.98, 06/28/04
@see java.security.Security
@see javax.security.auth.AuthPermission
@see javax.security.auth.Subject
@see javax.security.auth.callback.CallbackHandler
@see javax.security.auth.login.Configuration
@see javax.security.auth.spi.LoginModule

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.login.LoginContext(String name) throws javax.security.auth.login.LoginException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 name 实例化一个新 <code>LoginContext</code> 对象。

@param name 用作为 <code>Configuration</code> 中的索引的名称。

@exception LoginException 如果调用者指定的 <code>name</code> 在 <code>Configuration</code> 中没有出现，并且不存在用于 &quot;<i>other</i>&quot; 的 <code>Configuration</code> 条目，或者设置了 <i>auth.login.defaultCallbackHandler</i> 安全属性，但是无法加载实现类。
		<p>
@exception SecurityException 如果设置了 SecurityManager，但调用者没有 AuthPermission(&quot;createLoginContext.<i>name</i>&quot;) 权限，或者 <i>name</i> 的配置条目不存在，并且调用者没有 AuthPermission(&quot;createLoginContext.other&quot;) 权限。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.login.LoginContext(String name, Subject subject) throws javax.security.auth.login.LoginException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 name 和 <code>Subject</code> 对象实例化一个新 <code>LoginContext</code> 对象。

 <p>

@param name 用作为 <code>Configuration</code> 中的索引的名称。 <p>

@param subject 要进行验证的 <code>Subject</code>。

@exception LoginException 如果调用者指定的 <code>name</code> 在 <code>Configuration</code> 中没有出现，并且不存在用于 &quot;<i>other</i>&quot; 的 <code>Configuration</code> 条目，如果调用者指定的 <code>subject</code> 为 <code>null</code>，或者设置了 <i>auth.login.defaultCallbackHandler</i> 安全属性，但是不能加载实现类。
		<p>
@exception SecurityException 如果设置了 SecurityManager 但调用者没有 AuthPermission(&quot;createLoginContext.<i>name</i>&quot;) 权限，或者 <i>name</i> 的配置条目不存在，并且调用者又没有 AuthPermission(&quot;createLoginContext.other&quot;) 权限。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.login.LoginContext(String name, CallbackHandler callbackHandler) throws javax.security.auth.login.LoginException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 name 和 <code>CallbackHandler</code> 对象实例化一个新 <code>LoginContext</code> 对象。

 <p>

用作为 <code>Configuration</code> 中的索引的名称。 <p>

@param callbackHandler LoginModules 用来与用户通信的 <code>CallbackHandler</code> 对象。

@exception LoginException 如果调用者指定的 <code>name</code> 在 <code>Configuration</code> 中没有出现，并且不存在用于 &quot;<i>other</i>&quot; 的 <code>Configuration</code> 条目，或者调用者指定的 <code>callbackHandler</code> 为 <code>null</code>。
		<p>
@exception SecurityException 如果设置了 SecurityManager 但调用者没有 AuthPermission(&quot;createLoginContext.<i>name</i>&quot;) 权限，或者 <i>name</i> 的配置条目不存在并且调用者又没有 AuthPermission(&quot;createLoginContext.other&quot;) 权限。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.login.LoginContext(String name, Subject subject, CallbackHandler callbackHandler) throws javax.security.auth.login.LoginException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 name、要进行验证的 <code>Subject</code> 和 <code>CallbackHandler</code> 对象实例化一个新 <code>LoginContext</code> 对象。

 <p>

@param name 用作为 <code>Configuration</code> 中的索引的名称。 <p>

@param subject 要进行验证的 <code>Subject</code>。 <p>

@param callbackHandler LoginModules 用来与用户通信的 <code>CallbackHandler</code> 对象。

@exception LoginException 如果调用者指定的 <code>name</code> 在 <code>Configuration</code> 中没有出现，并且不存在用于 &quot;<i>other</i>&quot; 的 <code>Configuration</code> 条目，或调用者指定的 <code>subject</code> 为 <code>null</code>，或调用者指定的 <code>callbackHandler</code> 为 <code>null</code>。
		<p>
@exception SecurityException 如果设置了 SecurityManager 但调用者没有 AuthPermission(&quot;createLoginContext.<i>name</i>&quot;) 权限，或者 <i>name</i> 的配置条目不存在并且调用者又没有 AuthPermission(&quot;createLoginContext.other&quot;) 权限。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.login.LoginContext(String name, Subject subject, CallbackHandler callbackHandler, Configuration config) throws javax.security.auth.login.LoginException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 name、要进行验证的 <code>Subject</code>、<code>CallbackHandler</code> 对象和登录 <code>Configuration</code> 来实例化一个新 <code>LoginContext</code> 对象。

 <p>

@param name 用作为调用者指定的 <code>Configuration</code> 中的索引的名称。 <p>

@param subject 要进行验证的 <code>Subject</code> 或 <code>null</code>。 <p>

@param callbackHandler LoginModules 用来与用户通信的 <code>CallbackHandler</code> 对象，或者为 <code>null</code>。
		<p>

@param config 列出将被调用来执行验证的登录模块的 <code>Configuration</code>，或者为 <code>null</code>。

@exception LoginException 如果调用者指定的 <code>name</code> 在 <code>Configuration</code> 中没有出现，并且不存在用于 &quot;<i>other</i>&quot; 的 <code>Configuration</code> 条目。
		<p>
@exception SecurityException 如果设置了 SecurityManager，<i>config</i> 为 <code>null</code>，且任一个调用者都没有 AuthPermission(&quot;createLoginContext.<i>name</i>&quot;) 权限，或者 <i>name</i> 的配置条目不存在，并且调用者又没有 AuthPermission(&quot;createLoginContext.other&quot;) 权限。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.security.auth.login.LoginContext.login() throws javax.security.auth.login.LoginException
<!-- END KEY -->
<!-- BEGIN DATA -->
执行验证。

<p> 此方法对为指定给 <code>LoginContext</code> 构造方法的 <i>name</i> 配置的每个 LoginModule 调用 <code>login</code> 方法，由登录 <code>Configuration</code> 确定。每个 <code>LoginModule</code> 执行各自类型的验证（用户名/密码、智能卡 pin 码验证，等等）。

<p> 此方法完成由两个阶段组成的验证过程，如果整个验证成功（相关的 REQUIRED、REQUISITE、SUFFICIENT 和 OPTIONAL LoginModules 获得成功），通过调用每个已配置的 LoginModule 的 <code>commit</code> 方法来完成验证过程；如果整个验证失败，通过调用每个配置的 LoginModule 的 <code>abort</code> 方法来完成验证过程。如果验证成功，每个成功的 LoginModule 的 <code>commit</code> 方法会将相关的 Principals 和 Credentials 与 <code>Subject</code> 联系起来。如果验证失败，则每个 LoginModule 的 <code>abort</code> 方法都移除/销毁任何以前存储的状态。

<p> 如果验证过程的 <code>commit</code> 阶段失败，则整个验证失败，且此方法对每个已配置的 <code>LoginModule</code> 调用 <code>abort</code> 方法。

<p> 如果因为某种原因导致 <code>abort</code> 阶段失败，此方法将传播在 <code>login</code> 阶段或 <code>commit</code> 阶段抛出的原始异常。在上述任何一种情况下，整个验证都将失败。

<p> 在多个 LoginModules 失败的情况下，此方法传播由第一个失败的 <code>LoginModule</code> 引起的异常。

<p> 注意，如果此方法进入 <code>abort</code> 阶段（<code>login</code> 或 <code>commit</code> 阶段失败），不管它们各自的 <code>Configuration</code> flag 参数如何，此方法都将调用为应用程序配置的所有 LoginModules。这实质上意味着在 <code>abort</code> 阶段忽略 <code>Requisite</code> 和 <code>Sufficient</code> 语义。这保证能发生正确的清除和状态恢复。
 
 <p>

@exception LoginException 如果验证失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.security.auth.login.LoginContext.logout() throws javax.security.auth.login.LoginException
<!-- END KEY -->
<!-- BEGIN DATA -->
注销 <code>Subject</code>。

<p> 此方法对为此 <code>LoginContext</code> 配置的每个 <code>LoginModule</code> 调用 <code>logout</code> 方法。每个 <code>LoginModule</code> 执行各自的注销过程，包括移除/销毁 <code>Subject</code> 的 <code>Principal</code> 和 <code>Credential</code> 信息以及状态清除。

<p> 注意，不管 LoginModules 的 <code>Configuration</code> flag 参数如何，此方法都将调用为应用程序配置的所有 LoginModules。这实质上意味着忽略此方法的 <code>Requisite</code> 和 <code>Sufficient</code> 语义。这保证能发生正确的清除和状态恢复。
 
 <p>

@exception LoginException 如果注销失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.Subject javax.security.auth.login.LoginContext.getSubject()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回已进行验证的 Subject。

 <p>

@return 已进行验证的 Subject。如果调用者为此 LoginContext 的构造方法指定一个 Subject，则此方法将返回调用者指定的 Subject。如果没有指定 Subject 并且验证成功，则此方法将返回由此 LoginContext 实例化且用于验证的 Subject。如果没有指定 Subject，并且验证失败或没有试图进行验证，则此方法返回 null。

<!-- END DATA -->
