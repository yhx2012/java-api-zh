<!-- BEGIN KEY -->
public final class javax.security.auth.kerberos.KerberosPrincipal extends java.lang.Object implements java.security.Principal, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
此类封装 Kerberos 主体。

@author Mayank Upadhyay
@version 1.18, 02/03/04
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.kerberos.KerberosPrincipal.KRB_NT_UNKNOWN
<!-- END KEY -->
<!-- BEGIN DATA -->
未知的名称类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.kerberos.KerberosPrincipal.KRB_NT_PRINCIPAL
<!-- END KEY -->
<!-- BEGIN DATA -->
用户主体名称类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.kerberos.KerberosPrincipal.KRB_NT_SRV_INST
<!-- END KEY -->
<!-- BEGIN DATA -->
服务和其他唯一实例 (krbtgt) 名称类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.kerberos.KerberosPrincipal.KRB_NT_SRV_HST
<!-- END KEY -->
<!-- BEGIN DATA -->
主机名作为实例 (telnet, rcommands) 的服务的名称类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.kerberos.KerberosPrincipal.KRB_NT_SRV_XHST
<!-- END KEY -->
<!-- BEGIN DATA -->
将主机名作为剩余组件的服务的名称类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.kerberos.KerberosPrincipal.KRB_NT_UID
<!-- END KEY -->
<!-- BEGIN DATA -->
唯一 ID 名称类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.kerberos.KerberosPrincipal(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->

根据提供的字符串输入构造 KerberosPrincipal。此主体的名称类型默认为 {@link #KRB_NT_PRINCIPAL KRB_NT_PRINCIPAL} 假定此字符串包含一个名称，该名称的格式在 <a href=http://www.ietf.org/rfc/rfc1964.txt> RFC 1964 </a> 的 2.1.1. 小节 (Kerberos Principal Name Form) 中指定（例如 <i>duke@FOO.COM</i>，其中的 <i>duke</i> 表示主体，<i>FOO.COM</i> 表示域）。
 
<p>如果输入的名称中不包含域，则使用默认的域。默认域可以在 Kerberos 配置文件中指定或通过 java.security.krb5.realm 系统属性指定。有关的更多信息请参见 <a href="../../../../../technotes/guides/security/jgss/tutorials/index.html">Kerberos Requirements </a>
 
@param name 主体名称
@throws IllegalArgumentException 如果名称不是正确格式的，或者如果名称为 null，抑或如果名称不包含将使用的域，并且没有在 Kerberos 配置文件或 java.security.krb5.realm 系统属性中指定默认域。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.kerberos.KerberosPrincipal(String name, int nameType)
<!-- END KEY -->
<!-- BEGIN DATA -->

根据提供的字符串和名称类型输入构造 KerberosPrincipal。假定此字符串包含一个名称，<a href=http://www.ietf.org/rfc/rfc1964.txt>RFC 1964</a> 的 2.1 小节 (Mandatory Name Forms) 中指定了该字符串的格式。<a href=http://www.ietf.org/rfc/rfc1510.txt>RFC 1510</a> 的 7.2 小节 (Principal Names) 中指定了有效的名称类型。输入的名称必须与提供的名称类型一致。（例如，<i>duke@FOO.COM</i> 是 KRB_NT_PRINCIPAL 名称类型的有效输入字符串，其中 <i>duke</i> 表示主体，<i>FOO.COM</i> 表示域）。

<p> 如果输入的名称中不包含域，则使用默认的域。可以在 Kerberos 配置文件中指定默认域或通过 java.security.krb5.realm 系统属性指定默认域。有关的更多信息请参见 <a href="../../../../../technotes/guides/security/jgss/tutorials/index.html">Kerberos Requirements </a>。
 
@param name 主体名称
@param nameType 主体的名称类型
@throws IllegalArgumentException 如果名称不是正确格式的，或者名称为 null，抑或如果 nameType 不受支持，或者如果名称不包含将使用的域并且没有在 Kerberos 配置文件中指定默认域或通过 java.security.krb5.realm 系统属性指定默认域。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.security.auth.kerberos.KerberosPrincipal.getRealm()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 Kerberos 主体的域组件。

@return 此 Kerberos 主体的域组件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.security.auth.kerberos.KerberosPrincipal.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此主体的哈希码。哈希码被定义为以下计算的结果：
 <pre><code>
  hashCode = getName().hashCode();
 </code></pre>
 
@return <code>KerberosPrincipal</code> 的 hashCode()

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.security.auth.kerberos.KerberosPrincipal.equals(Object other)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较指定的对象与此 Principal 是否相等。如果给定对象也是一个 <code>KerberosPrincipal</code> 并且两个 <code>KerberosPrincipal</code> 实例是等效的，则返回 true。更正式地说，如果 <code>getName()</code> 返回的值是相等的并且 <code>getNameType()</code> 返回的值也是相等的，则两个 <code>KerberosPrincipal</code> 实例是相等的。

@param other 要与之进行比较的 Object
@return 如果传入的 Object 和此对象表示相同的主体，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.security.auth.kerberos.KerberosPrincipal.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回的字符串对应于 Kerberos Principal 名称的 single-string 表示形式，<a href=http://www.ietf.org/rfc/rfc1964.txt>RFC 1964</a> 的 2.1 小节中指定了这种表示形式。

@return 主体名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.security.auth.kerberos.KerberosPrincipal.getNameType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 KerberosPrincipal 的名称类型。<a href=http://www.ietf.org/rfc/rfc1510.txt> RFC1510</a> 的 7.2 小节中指定了有效的名称类型。 

@return 名称类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.security.auth.kerberos.KerberosPrincipal.readObject(ObjectInputStream ois) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流读取此对象（也就是将其反序列化）。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.security.auth.kerberos.KerberosPrincipal.writeObject(ObjectOutputStream oos) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 KerberosPrincipal 对象保存到流中。

@serialData 通过以 DER-encoded 形式（在 <a href=http://www.ietf.org/rfc/rfc1510.txt> RFC1510</a> 的 5.2 小节中指定）写出 PrincipalName 和域来序列化 <code>KerberosPrincipal</code>。 

<!-- END DATA -->
