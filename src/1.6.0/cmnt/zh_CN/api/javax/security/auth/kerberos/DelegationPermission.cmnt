<!-- BEGIN KEY -->
public final class javax.security.auth.kerberos.DelegationPermission extends java.security.BasicPermission implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
此类用于限制 Kerberos 代理模型（即可转发和可代理票据）的使用。 
 <p>
此 <code>Permission</code> 的目标名称指定一对 kerberos 服务主体。第一个服务主体是受信任而使用 TGT 的从属服务主体。第二个服务主体指定目标服务，从属服务主体代表启动的 KerberosPrincipal 与其进行交互。指定后一种服务主体是为了限制可代理票据的使用。
 <p>
例如，要指定可转发 TGT 的&ldquo;主机&rdquo;服务使用，则目标权限的指定如下：
 <p> 
 <pre>
  DelegationPermission(&quot;\&quot;host/foo.example.com@EXAMPLE.COM\&quot; \&quot;krbtgt/EXAMPLE.COM@EXAMPLE.COM\&quot;&quot;);
 </pre>
 <p>
要为&ldquo;后备&rdquo;服务提供可代理的 nfs 服务票据，则目标权限可以指定为：
 <p>
 <pre>
  DelegationPermission(&quot;\&quot;backup/bar.example.com@EXAMPLE.COM\&quot; \&quot;nfs/home.EXAMPLE.COM@EXAMPLE.COM\&quot;&quot;);
 </pre>

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.kerberos.DelegationPermission(String principals)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带有指定从属主体和目标主体的新 <code>DelegationPermission</code>。

 <p>

@param principals 从属主体和目标主体的名称
@throws NullPointerException 如果 <code>principals</code> 为 <code>null</code>。
@throws IllegalArgumentException 如果 <code>principals</code> 为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.kerberos.DelegationPermission(String principals, String actions)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带有指定从属主体和目标主体的新 <code>DelegationPermission</code>。
 <p>

@param principals 从属主体和目标主体的名称
 <p>
@param actions 应该为 null。
@throws NullPointerException 如果 <code>principals</code> 为 <code>null</code>。
@throws IllegalArgumentException 如果 <code>principals</code> 为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.security.auth.kerberos.DelegationPermission.implies(Permission p)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查此 Kerberos 代理权限对象是否&ldquo;隐含&rdquo;指定的权限。
 <P>
如果上述条件都不为 true，则 <code>implies</code> 返回 false。
@param p 所要检查的权限。

@return  如果此对象隐含指定的权限，则返回 true；否则返回 false。  

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.security.auth.kerberos.DelegationPermission.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查两个 DelegationPermission 对象是否相等。 
 <P>
@param obj 要与此对象进行相等性测试的对象。
 
@return 如果 <i>obj</i> 是一个 DelegationPermission，并且与此 DelegationPermission 对象具有相同的从属和服务主体，则返回 true。
<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.security.auth.kerberos.DelegationPermission.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象的哈希码值。

@return  此对象的哈希码值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.PermissionCollection javax.security.auth.kerberos.DelegationPermission.newPermissionCollection()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于存储 DelegationPermission 对象的 PermissionCollection 对象。<br> DelegationPermission 对象必须以允许将它们按任意顺序插入集合的方式来存储，但同时也允许以有效（并一致）的方式实现 PermissionCollection 的 implies 方法。

@return 适合用来存储 DelegationPermissions 的新 PermissionCollection 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
private synchronized void javax.security.auth.kerberos.DelegationPermission.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
调用 readObject 从流中恢复 DelegationPermission 的状态。

<!-- END DATA -->
<!-- BEGIN KEY -->
private synchronized void javax.security.auth.kerberos.DelegationPermission.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
调用 WriteObject 将 DelegationPermission 的状态保存到流中。操作已被序列化，超类负责管理名称。

<!-- END DATA -->
