<!-- BEGIN KEY -->
public final class javax.security.auth.AuthPermission extends java.security.BasicPermission
<!-- END KEY -->
<!-- BEGIN DATA -->
此类用于验证权限。AuthPermission 包含一个名称（也称为&ldquo;目标名称&rdquo;），但没有动作列表；您并非一定拥有所指定的权限。

<p> 目标名称就是安全配置参数的名称（见下文）。目前 AuthPermission 对象可用来保护对 Policy、Subject、LoginContext 和 Configuration 对象的访问。

<p> AuthPermission 的可能目标名称有：

 <pre>
	doAs -			允许调用者调用
				<code>Subject.doAs</code> 方法。

	doAsPrivileged -	允许调用者调用
				<code>Subject.doAsPrivileged</code> 方法。

       getSubject - 允许获取与当前的 Thread 关联的一个或多个 Subject（主题）。		
				
				

	getSubjectFromDomainCombiner - 允许获取与 <code>SubjectDomainCombiner</code> 关联的 Subject。	
				
				

	setReadOnly - 允许调用者将 Subject 设置为只读。


	modifyPrincipals - 允许调用者修改与 Subject 关联的 Principals <code>Set</code>。



	modifyPublicCredentials - 允许调用者修改与 Subject 关联的公共证书 Set。



	modifyPrivateCredentials - 允许调用者修改与 Subject 关联的私有证书 Set。



       refreshCredential - 允许代码在一个实现了 Refreshable 接口的证书对象上调用 refresh 方法。	



	destroyCredential - 允许代码在一个实现了 Destroyable 接口的证书对象上调用 destroy 方法。	




	createLoginContext.{name} - 允许代码用指定的 <i>name</i> 实例化一个 LoginContext。<i>name</i> 可用作为安装的登录 Configuration（通过 Configuration.getConfiguration() 返回）中的索引。<i>name</i> 可以使用通配符（设置为 '*'），从而允许使用任何名称。


       getLoginConfiguration - 允许获取系统级登录 Configuration。

	createLoginConfiguration.{type} - 允许代码通过 <code>Configuration.getInstance</code> 获取 Configuration 对象。				

       setLoginConfiguration - 允许设置系统级登录 Configuration。


	refreshLoginConfiguration - 允许刷新系统级登录 Configuration。

 </pre>

<p> 以下目标名称已过时，推荐使用 <code>createLoginContext.{name}</code>。

 <pre>
	createLoginContext - 允许代码实例化一个 <code>LoginContext</code>。	

</pre>

<p> <code>javax.security.auth.Policy</code> 已过时，推荐使用 <code>java.security.Policy</code>。因此，以下目标名称也已经过时：

 <pre>
	getPolicy - 允许调用者获取系统级基于 Subject 的访问控制策略。


	setPolicy - 允许调用者设置系统级基于 Subject 的访问控制策略。


	refreshPolicy - 允许调用者刷新系统级基于 Subject 的访问控制策略。

</pre>

@version 1.51, 12/19/03

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.AuthPermission(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定名称的新 AuthPermission。name 是 AuthPermission 的符号名。

 <p>

@param name AuthPermission 的名称

@throws NullPointerException 如果 <code>name</code> 为 <code>null</code>。
@throws IllegalArgumentException 如果 <code>name</code> 为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.AuthPermission(String name, String actions)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定名称的新 AuthPermission 对象。name 是 AuthPermission 的符号名，并且 actions 字符串目前未使用，应该为 null。

 <p>

@param name AuthPermission 的名称 <p>

@param actions 应该为 null。

@throws NullPointerException 如果 <code>name</code> 为 <code>null</code>。
@throws IllegalArgumentException 如果 <code>name</code> 为空。

<!-- END DATA -->
