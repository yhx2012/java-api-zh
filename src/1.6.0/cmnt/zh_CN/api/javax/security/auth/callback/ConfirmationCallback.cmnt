<!-- BEGIN KEY -->
public class javax.security.auth.callback.ConfirmationCallback extends java.lang.Object implements javax.security.auth.callback.Callback, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<p> 底层安全服务实例化 <code>ConfirmationCallback</code>，并将其传递到 <code>CallbackHandler</code> 的 <code>handle</code> 方法，以请求 YES/NO、OK/CANCEL、YES/NO/CANCEL 或其他类似的确认信息。

@version 1.16, 12/19/03
@see javax.security.auth.callback.CallbackHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.UNSPECIFIED_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
未指定的选项类型。

<p> 如果此 <code>ConfirmationCallback</code> 是使用 <code>options</code> 而不是 <code>optionType</code> 实例化的，则 <code>getOptionType</code> 方法返回此值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.YES_NO_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
YES/NO 确认选项。

<p> 如果 <code>ConfirmationCallback</code> 构造方法需要一个以 <code>YES</code> 或 <code>NO</code> 作答的确认信息，则底层安全服务将此值指定为 <code>ConfirmationCallback</code> 构造方法的 <code>optionType</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.YES_NO_CANCEL_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
YES/NO/CANCEL 确认选项。

<p> 如果 <code>ConfirmationCallback</code> 构造方法需要一个以 <code>YES</code>、<code>NO</code> 或 <code>CANCEL</code> 作答的确认信息，则底层安全服务将此值指定为 <code>ConfirmationCallback</code> 构造方法的 <code>optionType</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.OK_CANCEL_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
OK/CANCEL 确认选项。

<p> 如果 <code>ConfirmationCallback</code> 构造方法需要一个以 <code>OK</code> 或 <code>CANCEL</code> 作答的确认信息，则底层安全服务将此值指定为 <code>ConfirmationCallback</code> 构造方法的 <code>optionType</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.YES
<!-- END KEY -->
<!-- BEGIN DATA -->
YES 选项。

<p> 如果指定了此 <code>ConfirmationCallback</code> 的 <code>optionType</code>，则可以将此选项指定为 <code>defaultOption</code> 或作为选择的索引返回。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.NO
<!-- END KEY -->
<!-- BEGIN DATA -->
NO 选项。

<p> 如果指定了此 <code>ConfirmationCallback</code> 的 <code>optionType</code>，则可以将此选项指定为 <code>defaultOption</code> 或作为选择的索引返回。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.CANCEL
<!-- END KEY -->
<!-- BEGIN DATA -->
CANCEL 选项。

<p> 如果指定了此 <code>ConfirmationCallback</code> 的 <code>optionType</code>，则可以将此选项指定为 <code>defaultOption</code> 或作为选择的索引返回。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.OK
<!-- END KEY -->
<!-- BEGIN DATA -->
OK 选项。

<p> 如果指定了此 <code>ConfirmationCallback</code> 的 <code>optionType</code>，则可以将此选项指定为 <code>defaultOption</code> 或作为选择的索引返回。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.INFORMATION
<!-- END KEY -->
<!-- BEGIN DATA -->
INFORMATION 消息类型。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.WARNING
<!-- END KEY -->
<!-- BEGIN DATA -->
WARNING 消息类型。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.ERROR
<!-- END KEY -->
<!-- BEGIN DATA -->
ERROR 消息类型。
<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.security.auth.callback.ConfirmationCallback.prompt
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private int javax.security.auth.callback.ConfirmationCallback.messageType
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private int javax.security.auth.callback.ConfirmationCallback.optionType
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private int javax.security.auth.callback.ConfirmationCallback.defaultOption
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String[] javax.security.auth.callback.ConfirmationCallback.options
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private int javax.security.auth.callback.ConfirmationCallback.selection
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.callback.ConfirmationCallback(int messageType, int optionType, int defaultOption)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个带有消息类型、选项类型和默认选项的 <code>ConfirmationCallback</code>。

<p> 如果底层安全服务需要 YES/NO、 YES/NO/CANCEL 或 OK/CANCEL 确认信息，则它们使用此构造方法。

 <p>

@param messageType 消息类型（<code>INFORMATION</code>、<code>WARNING</code> 或 <code>ERROR</code>）。 <p>

@param optionType 选项类型（<code>YES_NO_OPTION</code>、<code>YES_NO_CANCEL_OPTION</code> 或 <code>OK_CANCEL_OPTION</code>）。 <p>

@param defaultOption 从提供的 optionType（<code>YES</code>、<code>NO</code>、<code>CANCEL</code> 或 <code>OK</code>）得出的默认选项。

@exception IllegalArgumentException 如果 messageType 不是 <code>INFORMATION</code>、<code>WARNING</code> 或 <code>ERROR</code>，如果 optionType 不是 <code>YES_NO_OPTION</code>、<code>YES_NO_CANCEL_OPTION</code> 或 <code>OK_CANCEL_OPTION</code>，或者 <code>defaultOption</code> 不与 <code>optionType</code> 中的某个选项对应。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.callback.ConfirmationCallback(int messageType, java.lang.String[] options, int defaultOption)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个带有消息类型、选项列表和默认选项的 <code>ConfirmationCallback</code>。

<p> 如果底层安全服务需要的确认信息不同于可供使用的、已提供的预置确认信息（例如，CONTINUE/ABORT 或 STOP/GO），则它们使用此构造方法。确认选项在 <code>options</code> 数组中列出，由 <code>CallbackHandler</code> 实现通过与预置选项一致的方式显示。

 <p>

@param messageType 消息类型（<code>INFORMATION</code>、<code>WARNING</code> 或 <code>ERROR</code>）。 <p>

@param options 确认选项列表。 <p>

@param defaultOption 默认选项，表示为 <code>options</code> 数组中的索引。

@exception IllegalArgumentException 如果 messageType 不是 <code>INFORMATION</code>、<code>WARNING</code> 或 <code>ERROR</code>，如果 <code>options</code> 为 null，如果 <code>options</code> 的长度为 0，如果 <code>options</code> 中的任何一个元素为 null，如果 <code>options</code> 中的任何一个元素的长度为 0，或者 <code>defaultOption</code> 不在 <code>options</code> 的数组边界内。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.callback.ConfirmationCallback(String prompt, int messageType, int optionType, int defaultOption)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个带有提示、消息类型、选项类型和默认选项的 <code>ConfirmationCallback</code>。

<p> 如果底层安全服务需要 YES/NO、 YES/NO/CANCEL 或 OK/CANCEL 确认信息，则它们使用此构造方法。

 <p>

@param prompt 用于描述选项列表的提示。 <p>

@param messageType 消息类型（<code>INFORMATION</code>、<code>WARNING</code> 或 <code>ERROR</code>）。 <p>

@param optionType 选项类型（<code>YES_NO_OPTION</code>、<code>YES_NO_CANCEL_OPTION</code> 或 <code>OK_CANCEL_OPTION</code>）。 <p>

@param defaultOption 从提供的 optionType（<code>YES</code>、<code>NO</code>、<code>CANCEL</code> 或 <code>OK</code>）得出的默认选项。

@exception IllegalArgumentException 如果 <code>prompt</code> 为 null，如果 <code>prompt</code> 的长度为 0，如果 messageType 不是 <code>INFORMATION</code>、<code>WARNING</code> 或 <code>ERROR</code>，如果 optionType 不是 <code>YES_NO_OPTION</code>、<code>YES_NO_CANCEL_OPTION</code> 或 <code>OK_CANCEL_OPTION</code>，或者 <code>defaultOption</code> 不对应于 <code>optionType</code> 中的某个选项。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.callback.ConfirmationCallback(String prompt, int messageType, java.lang.String[] options, int defaultOption)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个带有提示、消息类型、选项列表和默认选项的 <code>ConfirmationCallback</code>。

<p> 如果底层安全服务需要的确认信息不同于可供使用的、已提供的预置确认信息（例如，CONTINUE/ABORT 或 STOP/GO），则它们使用此构造方法。确认选项在 <code>options</code> 数组中列出，由 <code>CallbackHandler</code> 实现通过与预置选项一致的方式显示。

 <p>

@param prompt 用于描述选项列表的提示。 <p>

@param messageType 消息类型（<code>INFORMATION</code>、<code>WARNING</code> 或 <code>ERROR</code>）。 <p>

@param options 确认选项列表。 <p>

@param defaultOption 默认选项，表示为 <code>options</code> 数组中的索引。

@exception IllegalArgumentException 如果 <code>prompt</code> 为 null，如果 <code>prompt</code> 的长度为 0，如果 messageType 不是 <code>INFORMATION</code>、<code>WARNING</code> 或 <code>ERROR</code>，如果 <code>options</code> 为 null，如果 <code>options</code> 的长度为 0，如果 <code>options</code> 中的任何一个元素为 null，如果 <code>options</code> 中的任何一个元素长度为 0，或者 <code>defaultOption</code> 不是位于 <code>options</code> 的数组边界内。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.security.auth.callback.ConfirmationCallback.getPrompt()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取提示。

 <p>

@return 提示，如果此 <code>ConfirmationCallback</code> 实例化为不带 <code>prompt</code>，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.security.auth.callback.ConfirmationCallback.getMessageType()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取消息类型。

 <p>

@return 消息类型（<code>INFORMATION</code>、<code>WARNING</code> 或 <code>ERROR</code>）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.security.auth.callback.ConfirmationCallback.getOptionType()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取选项类型。

<p> 如果此方法返回 <code>UNSPECIFIED_OPTION</code>，那么此 <code>ConfirmationCallback</code> 是使用 <code>options</code> 而不是 <code>optionType</code> 实例化的。在这种情况下，调用 <code>getOptions</code> 方法，以确定显示何种确认选项。

 <p>

@return 选项类型（<code>YES_NO_OPTION</code>、<code>YES_NO_CANCEL_OPTION</code> 或 <code>OK_CANCEL_OPTION</code>），如果此 <code>ConfirmationCallback</code> 是使用 <code>options</code> 而不是 <code>optionType</code> 实例化的，则返回 <code>UNSPECIFIED_OPTION</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] javax.security.auth.callback.ConfirmationCallback.getOptions()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取确认选项。

 <p>

@return 确认选项列表，如果此 <code>ConfirmationCallback</code> 是使用 <code>optionType</code> 而不是 <code>options</code> 实例化的，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.security.auth.callback.ConfirmationCallback.getDefaultOption()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取默认选项。

 <p>

@return 默认选项，如果为此 <code>ConfirmationCallback</code> 的构造方法指定了 <code>optionType</code>，则表示为 <code>YES</code>、<code>NO</code>、<code>OK</code> 或 <code>CANCEL</code>。否则，此方法返回默认选项，作为为此 <code>ConfirmationCallback</code> 的构造方法指定的 <code>options</code> 数组中的索引。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.security.auth.callback.ConfirmationCallback.setSelectedIndex(int selection)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置选中的确认选项。

 <p>

@param selection 如果为此 <code>ConfirmationCallback</code> 的构造方法指定了一个 <code>optionType</code>，则该 selection 表示为 <code>YES</code>、<code>NO</code>、<code>OK</code> 或 <code>CANCEL</code>。否则，该 selection 表示为为此 <code>ConfirmationCallback</code> 的构造方法指定的 <code>options</code> 数组中的索引。

@see #getSelectedIndex

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.security.auth.callback.ConfirmationCallback.getSelectedIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取选中的确认选项。

 <p>

@return 如果为此 <code>ConfirmationCallback</code> 的构造方法指定了一个 <code>optionType</code> ，则返回选中的确认选项，表示为 <code>YES</code>、<code>NO</code>、<code>OK</code> 或 <code>CANCEL</code>。否则，此方法返回选中的确认选项，作为为此 <code>ConfirmationCallback</code> 的构造方法指定的 <code>options</code> 数组中的索引。

@see #setSelectedIndex

<!-- END DATA -->
