<!-- BEGIN KEY -->
public abstract class javax.security.cert.Certificate extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

<p>管理各种身份证书的抽象类。身份证书是某个主体的保证，保证某个公钥是另一个主体的公钥。（主体表示一个实体，如个人用户、团体或公司。）
<p>
此类是具有不同格式但是很常用的证书的抽象。例如，不同的证书类型（如 X.509 和 PGP）共享通用的证书功能（如编码和验证）和某些信息类型（如公钥）。
 <p>
虽然 X.509、PGP 和 SDSI 证书包含不同的信息集，并且它们以不同的方式存储和获取信息，但都可以通过扩展 Certificate 类来实现它们。 

<p><em>注：包 <code>javax.security.cert</code> 中的类用于与早期版本的 Java 安全套接字扩展（Java Secure Socket Extension，JSSE）保持兼容。新的应用程序应该使用 <code>java.security.cert</code> 中的标准 Java SE 证书类。</em></p>

@since 1.4
@see X509Certificate

@author Hemma Prafullchandra
@version 1.16

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.security.cert.Certificate.equals(Object other)
<!-- END KEY -->
<!-- BEGIN DATA -->

比较此证书是否与指定对象相等。如果 <code>other</code> 对象是一个 <code>Certificate</code> 的<code>实例</code>，则获取其编码形式并且与此证书的编码形式进行比较。
 
@param other 要与此证书进行相等性测试的对象。
@return 如果两个证书的编码形式匹配，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.security.cert.Certificate.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回根据此证书的编码形式得出的证书的哈希码值。

@return 哈希码值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract byte[] javax.security.cert.Certificate.getEncoded() throws javax.security.cert.CertificateEncodingException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此证书的编码形式。假定每种证书类型只有一种编码形式；例如 X.509 证书将以 ASN.1 DER 的形式进行编码。

@return 此证书的编码形式
@exception CertificateEncodingException 如果内部证书编码失败

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.security.cert.Certificate.verify(PublicKey key) throws javax.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
<!-- END KEY -->
<!-- BEGIN DATA -->

验证是否已使用与指定公钥相对应的私钥签署了此证书。

@param key 用于进行验证的 PublicKey。

@exception NoSuchAlgorithmException 如果签名算法不受支持。
@exception InvalidKeyException 如果密钥不正确。
@exception NoSuchProviderException 如果没有默认的提供者。
@exception SignatureException 如果发生签名错误。
@exception CertificateException 如果出现编码错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.security.cert.Certificate.verify(PublicKey key, String sigProvider) throws javax.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
<!-- END KEY -->
<!-- BEGIN DATA -->

验证是否已使用与指定公钥相对应的私钥签署了此证书。此方法使用指定提供者所提供的签名验证引擎。

@param key 用于进行验证的 PublicKey。
@param sigProvider 签名提供者的名称。
@exception NoSuchAlgorithmException 如果签名算法不受支持。
@exception InvalidKeyException 如果密钥不正确。
@exception NoSuchProviderException 如果提供者不正确。
@exception SignatureException 如果发生签名错误。
@exception CertificateException 如果出现编码错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String javax.security.cert.Certificate.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此证书的字符串表示形式。

@return 此证书的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.PublicKey javax.security.cert.Certificate.getPublicKey()
<!-- END KEY -->
<!-- BEGIN DATA -->

从此证书中获取公钥。
 
@return 公钥。

<!-- END DATA -->
