<!-- BEGIN KEY -->
public class javax.activation.ActivationDataFlavor extends java.awt.datatransfer.DataFlavor
<!-- END KEY -->
<!-- BEGIN DATA -->
ActivationDataFlavor 类是 <code>java.awt.datatransfer.DataFlavor</code> 的一个特殊子类。它允许 JAF 通过新的构造方法设置 DataFlavor 类所存储的所有三个值。它还包含 <code>equals</code> 方法中增强的 MIME 解析。除了增强的解析外，其语义与 JDK DataFlavor 类的语义相同。
 
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.activation.ActivationDataFlavor(java.lang.Class representationClass, String mimeType, String humanPresentableName)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个表示任意 Java 对象的 <code>DataFlavor</code>。此构造方法是 JDK DataFlavor 的扩展，它允许显示设置所有三个 DataFlavor 属性。
 <p>
返回的 DataFlavor 将具有以下特征：
 <p>
representationClass = representationClass<br> mimeType            = mimeType<br> humanName           = humanName
 <p>

@param representationClass 此 DataFlavor 中使用的类
@param mimeType 此类所表示数据的 MIME 类型
@param humanPresentableName flavor 的得体的名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.activation.ActivationDataFlavor(java.lang.Class representationClass, String humanPresentableName)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个表示 <code>MimeType</code> 的 <code>DataFlavor</code>。
 <p>
返回的 DataFlavor 将具有以下特征：
 <p>
如果 mimeType 为 &quot;application/x-java-serialized-object; class=&quot;，则结果与调用新的 DataFlavor(Class:forName()) 相同（同上）。
 <p>
否则：
 <p>
representationClass = InputStream<p>
mimeType = mimeType<p>

@param representationClass 此 DataFlavor 中使用的类
@param humanPresentableName flavor 的得体的名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.activation.ActivationDataFlavor(String mimeType, String humanPresentableName)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个表示 MimeType 的 DataFlavor。
 <p>
返回的 DataFlavor 将具有以下特征：
 <p>
如果 mimeType 为 &quot;application/x-java-serialized-object; class=&quot;，则结果与调用新的 DataFlavor(Class:forName()) 相同（同上），否则：
 <p>
representationClass = InputStream<p>
mimeType = mimeType

@param mimeType 此类表示的数据 MIME 类型
@param humanPresentableName flavor 的得体的名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.activation.ActivationDataFlavor.getMimeType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 DataFlavor 的 MIME 类型。

@return	MIME 类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class javax.activation.ActivationDataFlavor.getRepresentationClass()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示形式类。

@return	表示形式类

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.activation.ActivationDataFlavor.getHumanPresentableName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回得体的名称。

@return	得体的名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.activation.ActivationDataFlavor.setHumanPresentableName(String humanPresentableName)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置得体的名称。

@param humanPresentableName	要设置的名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.activation.ActivationDataFlavor.equals(DataFlavor dataFlavor)
<!-- END KEY -->
<!-- BEGIN DATA -->
将传入的 DataFlavor 与此 DataFlavor 进行比较；调用 <code>isMimeTypeEqual</code> 方法。

@param dataFlavor	要与之比较的 DataFlavor
@return			如果 MIME 类型和表示形式类都相同，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.activation.ActivationDataFlavor.isMimeTypeEqual(String mimeType)
<!-- END KEY -->
<!-- BEGIN DATA -->
传入的 MIME 类型的字符串表示形式是否等效于此 DataFlavor 的 MIME 类型。 <p>

ActivationDataFlavor 将 MIME 类型的比较委托给作为 JavaBeans Activation Framework 的一部分包含的 MimeType 类。相比 DataFlavor 类中通常可用的比较，此方法提供的比较更加健壮。

@param mimeType	 MIME 类型
@return		如果 MIME 类型相同，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.activation.ActivationDataFlavor.normalizeMimeTypeParameter(String parameterName, String parameterValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
针对每个 MIME 类型参数对 DataFlavor 调用此方法，以允许 DataFlavor 子类处理特定参数，如文本/纯文本 charset 参数，其值是不区分大小写的。（MIME 类型参数值应该区分大小写）。
 <p>
为每个参数名/值对调用此方法，应该返回 parameterValue 的标准化表示形式。此实现不再调用此方法。

@param parameterName	 参数名称
@param parameterValue	 参数值
@return			标准化的参数值
@deprecated

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.activation.ActivationDataFlavor.normalizeMimeType(String mimeType)
<!-- END KEY -->
<!-- BEGIN DATA -->
为每个 MIME 类型字符串调用此方法，以使 DataFlavor 子类型能够更改实现 MIME 类型标准化的方式。一种可能的用法是，在传入的 MIME 类型字符串中不存在参数/值对的情况下添加默认的参数/值对。此实现不再调用此方法。

@param mimeType	 MIME 类型
@return		标准化的 MIME 类型
@deprecated

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.datatransfer.DataFlavor.readExternal(ObjectInput is) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 Serialized 状态还原此 <code>DataFlavor</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.datatransfer.DataFlavor.writeExternal(ObjectOutput os) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
序列化此 <code>DataFlavor</code>。

<!-- END DATA -->
