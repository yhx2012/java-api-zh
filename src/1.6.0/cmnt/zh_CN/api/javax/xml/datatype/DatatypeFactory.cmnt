<!-- BEGIN KEY -->
public abstract class javax.xml.datatype.DatatypeFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>创建新 <code>javax.xml.datatype</code> <code>Object</code> 的工厂，创建的对象可提供 XML 和 Java <code>Object</code> 之间的映射。</p>
 
<p><a name="DatatypeFactory.newInstance"/>{@link #newInstance()} 用于创建新的 <code>DatatypeFactory</code>。按下列顺序使用以下实现解析机制：</p>
 <ol>
    <li>
如果 {@link #DATATYPEFACTORY_PROPERTY} 指定的系统属性 &quot;<code>javax.xml.datatype.DatatypeFactory</code>&quot; 存在，则实例化具有属性值名称的类。将实例化进程中抛出的任何异常包装为 {@link DatatypeConfigurationException}。
    </li>
    <li>
如果文件 ${JAVA_HOME}/lib/jaxp.properties 存在，则在 {@link java.util.Properties} <code>Object</code> 中加载它。然后查询 <code>Properties</code> <code>Object</code>，以获取前面步骤中的文档介绍的属性，并按照前面步骤中文档的介绍进行处理。
    </li>
    <li>
使用服务解析机制，例如 <code>META-INF/services/java.xml.datatype.DatatypeFactory</code>。将实例化进程中抛出的任何异常包装为 {@link DatatypeConfigurationException}。
    </li>
    <li>
最终机制将尝试实例化 {@link #DATATYPEFACTORY_IMPLEMENTATION_CLASS} 指定的 <code>Class</code>。实例化进程中抛出的任何异常将被包装为 {@link DatatypeConfigurationException}。
    </li>
 </ol> 
 
@author <a href="mailto:Joseph.Fialli@Sun.COM">Joseph Fialli</a>
@author <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
@author <a href="mailto:Neeraj.Bajaj@sun.com">Neeraj Bajaj</a>
@version $Revision: 1.4 $, $Date: 2006-09-18 09:03:05 $
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.datatype.DatatypeFactory.DATATYPEFACTORY_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>JSR 206:Java(TM) API for XML Processing (JAXP) 1.3 中定义的默认实现类名称。</p>
 
<p>默认值为 <code>javax.xml.datatype.DatatypeFactory</code>。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.datatype.DatatypeFactory.DATATYPEFACTORY_IMPLEMENTATION_CLASS
<!-- END KEY -->
<!-- BEGIN DATA -->
<p><em>JSR 206: Java(TM) API for XML Processing (JAXP) 1.3</em> 中定义的默认实现类名称。</p>

 <p>如果其他实现解析机制都没有成功，则实现者应该指定将被实例化的恰当类的名称。</p>

 <p>用户不应该引用此字段；该字段只用来记录工厂实现详细信息。
 </p>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.xml.datatype.DatatypeFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>受保护的构造方法，包外无法实例化。</p>
 
<p>使用 {@link #newInstance()} 创建 <code>DatatypeFactory</code>。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.datatype.DatatypeFactory javax.xml.datatype.DatatypeFactory.newInstance() throws javax.xml.datatype.DatatypeConfigurationException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取新的 <code>DatatypeFactory</code> 实例。</p>
 
<p>实现解析机制<a href="#DatatypeFactory.newInstance">定义</a>在此 <code>Class</code> 的文档中。</p>
 
@return 新的 <code>DatatypeFactory</code> 实例

@throws DatatypeConfigurationException 如果该实现不可用，或者无法实例化。
@see #newInstance(String factoryClassName, ClassLoader classLoader)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.datatype.DatatypeFactory javax.xml.datatype.DatatypeFactory.newInstance(String factoryClassName, ClassLoader classLoader) throws javax.xml.datatype.DatatypeConfigurationException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>从类名称中获取新的 <code>DatatypeFactory</code> 实例。此函数在类路径中有多个提供者时很有用。它可以对应用程序提供更多的控制，因为它可以指定应该加载哪个提供者。</p>
<p>在应用程序获取对 <code>DatatypeFactory</code> 的引用后，它可以使用工厂来配置和获取数据类型实例。</p>
<h2>疑难解答提示</h2>
 <p>设置 <code>jaxp.debug</code> 系统属性将导致此方法将许多调试消息打印到 <code>System.err</code>，这些消息说明了正在执行的操作以及何处可以找到它。</p>
 
 <p>如有问题，可以尝试使用以下代码：</p>
 <pre>
 java -Djaxp.debug=1 YourProgram ....
 </pre>
 
 @param factoryClassName 提供 <code>javax.xml.datatype.DatatypeFactory</code> 实现的完全限定工厂类名称。

 @param classLoader 用来加载工厂类的 <code>ClassLoader</code>。如果该参数为 <code>null</code>，则使用当前 <code>Thread</code> 的上下文类加载器来加载工厂类。

 @return 新的 <code>DatatypeFactory</code> 实例

 @throws DatatypeConfigurationException 如果 <code>factoryClassName</code> 为 <code>null</code>，或者无法加载和实例化工厂类。

 @see #newInstance()

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.datatype.Duration javax.xml.datatype.DatatypeFactory.newDuration(String lexicalRepresentation)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取新的 <code>Duration</code> 实例，它根据 XML 模式 1.0 第 3.2.6.1 节中的定义将 <code>Duration</code> 指定为其字符串表示形式 &quot;PnYnMnDTnHnMnS&quot;。</p>
 
 <p>XML 模式第二部分 Datatypes 中的 3.2.6 节 duration 将<code>持续时间</code>定义如下：</p>
 <blockquote>
持续时间表示某一时间段。持续时间的值空间是六维空间，其中坐标分别指定 [ISO 8601] 的第 5.5.3.2 节中定义的 Gregorian year、month、day、hour、minute 和 second 组件。这些组件根据其重要性按其出现顺序（即 year、month、day、hour、minute、second）排序。 
 </blockquote>
<p>六个值都可以通过创建的 {@link Duration} 设置和获得</p>
 
<p>XML 模式规范说明值可以为任意大小。实现可以选择不（或不能）支持任意大和/或小的值。如果超过实现容量，则抛出 {@link UnsupportedOperationException} 和指示实现限制的消息。</p>
 
@param lexicalRepresentation <code>Duration</code> 的 <code>String</code> 表示形式。
 
@return 通过解析 <code>lexicalRepresentation</code> 创建的新 <code>Duration</code>。
 
@throws IllegalArgumentException 如果 <code>lexicalRepresentation</code> 不是 <code>Duration</code> 的有效表示形式。
@throws UnsupportedOperationException 如果实现无法支持请求值。
@throws NullPointerException 如果 <code>lexicalRepresentation</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.datatype.Duration javax.xml.datatype.DatatypeFactory.newDuration(long durationInMilliSeconds)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取新的 <code>Duration</code> 实例，它将 <code>Duration</code> 指定为毫秒。</p>
 
 <p>XML 模式第二部分 Datatypes 中的 3.2.6 节将<code>持续时间</code>定义为：</p>
 <blockquote>
持续时间表示某一时间段。持续时间的值空间是六维空间，其中坐标分别指定 [ISO 8601] 的第 5.5.3.2 节中定义的 Gregorian year、month、day、hour、minute 和 second 组件。这些组件根据其重要性按其出现顺序（即 year、month、day、hour、minute 和 second）排序。 
 </blockquote>
<p>六个值都可以通过计算指定毫秒的值来设置，通过创建的 {@link Duration} 的 <code>get</code> 方法获得。该值符合以下规范并由其定义：</p>
 <ul>
   <li>ISO 8601:2000(E) Section 5.5.3.2 Alternative format</li>
   <li><a href="http://www.w3.org/TR/xmlschema-2/#isoformats">W3C XML Schema 1.0 Part 2, Appendix D, ISO 8601 Date and Time Formats</a>
   </li>
   <li>{@link XMLGregorianCalendar}  XML 模式 1.0 和 Java 表示形式之间的日期/时间数据类型字段映射关系</li>
 </ul>
 
<p>通过 {@link GregorianCalendar} 使用的历元开始时间定义默认开始实例：即 {@link java.util.Calendar#YEAR} = 1970、{@link java.util.Calendar#MONTH} = {@link java.util.Calendar#JANUARY}、{@link java.util.Calendar#DATE} = 1 等。这非常重要，因为阳历中存在变化，例如，对于 month = {@link java.util.Calendar#FEBRUARY}，闰年会有不同的天数，所以 {@link Duration#getMonths()} 和 {@link Duration#getDays()} 的结果都会受到影响。</p> 
 
@param durationInMilliSeconds 要创建的 Duration，以毫秒为单位。
 
@return  表示 <code>durationInMilliSeconds</code> 的新 <code>Duration</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.datatype.Duration javax.xml.datatype.DatatypeFactory.newDuration(boolean isPositive, BigInteger years, BigInteger months, BigInteger days, BigInteger hours, BigInteger minutes, BigDecimal seconds)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取 <code>Duration</code> 的新实例，该 <code>Duration</code> 根据 isPositive、years、months、days、hours、minutes、seconds 的值确定。</p>
 
<p>XML 模式规范说明值可以为任意大小。实现可以选择不（或不能）支持任意大和/或小的值。如果超过实现容量，则抛出 {@link UnsupportedOperationException} 和指示实现限制的消息。</p>
 
<p><code>null</code> 值指示不设置字段。</p>
 
@param isPositive 设置为 <code>false</code> 将创建负的 Duration。当 Duration 的长度为零时，将忽略此参数。
@param years 此 <code>Duration</code> 的年
@param months 此 <code>Duration</code> 的月
@param days 此 <code>Duration</code> 的日
@param hours 此 <code>Duration</code> 的时
@param minutes 此 <code>Duration</code> 的分
@param seconds 此 <code>Duration</code> 的秒
 
@return 从指定的值创建的新 <code>Duration</code>。
 
@throws IllegalArgumentException 如果值不是 <code>Duration</code> 的有效表示形式：如果所有这些字段（years、months 等等）为 null，或者任何一个为负。
@throws UnsupportedOperationException 如果实现无法支持请求值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.datatype.Duration javax.xml.datatype.DatatypeFactory.newDuration(boolean isPositive, int years, int months, int days, int hours, int minutes, int seconds)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取 <code>Duration</code> 的新实例，该 <code>Duration</code> 根据 isPositive、years、months、days、hours、minutes、seconds 的值确定。</p>
 
<p>{@link DatatypeConstants#FIELD_UNDEFINED} 值指示不设置字段。</p>
 
@param isPositive 设置为 <code>false</code> 将创建负的 Duration。当 Duration 的长度为零时，将忽略此参数。
@param years 此 <code>Duration</code> 的年
@param months 此 <code>Duration</code> 的月
@param days 此 <code>Duration</code> 的日
@param hours 此 <code>Duration</code> 的时
@param minutes 此 <code>Duration</code> 的分
@param seconds 此 <code>Duration</code> 的秒
 
@return 根据指定值创建的新 <code>Duration</code>。
 
@throws IllegalArgumentException 如果值不是 <code>Duration</code> 的有效表示形式：如果任一字段为负。
 
@see #newDuration( boolean isPositive, BigInteger years, BigInteger months, BigInteger days, BigInteger hours, BigInteger minutes, BigDecimal seconds)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.datatype.Duration javax.xml.datatype.DatatypeFactory.newDurationDayTime(String lexicalRepresentation)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>通过解析其 <code>String</code> 表示形式 &quot;<em>PnDTnHnMnS</em>&quot;（<a href="http://www.w3.org/TR/xpath-datamodel#dt-dayTimeDuration">XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration</a>）创建类型为 <code>xdt:dayTimeDuration</code> 的 <code>Duration</code>。</p>
 
<p>数据类型 <code>xdt:dayTimeDuration</code> 是 <code>xs:duration</code> 的子类型，<code>xs:duration</code> 的词汇表示形式只包含 day、hour、minute 和 second 组件。此数据类型位于名称空间 <code>http://www.w3.org/2003/11/xpath-datatypes</code> 中。</p>
 
<p>四个值都可以从创建的 {@link Duration} 设置和获得。</p>
 
<p>XML 模式规范说明值可以为任意大小。实现可以选择不（或不能）支持任意大和/或小的值。如果超过实现容量，则抛出 {@link UnsupportedOperationException} 和指示实现限制的消息。</p>
 
@param lexicalRepresentation Duration 的词汇表示形式。
 
@return 使用指定 <code>lexicalRepresentation</code> 创建的新 <code>Duration</code>。
 
@throws IllegalArgumentException 如果 <code>lexicalRepresentation</code> 不是只以日期和时间形式表达的 <code>Duration</code> 的有效表示形式。
@throws UnsupportedOperationException 如果实现无法支持请求值。
@throws NullPointerException 如果 <code>lexicalRepresentation</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.datatype.Duration javax.xml.datatype.DatatypeFactory.newDurationDayTime(long durationInMilliseconds)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>使用 <a href="http://www.w3.org/TR/xpath-datamodel#dt-dayTimeDuration">XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration</a> 中定义的指定毫秒创建类型为 <code>xdt:dayTimeDuration</code> 的 <code>Duration</code>。</p>
 
<p>数据类型 <code>xdt:dayTimeDuration</code> 是 <code>xs:duration</code> 的子类型，<code>xs:duration</code> 词汇表示形式只包含 day、hour、minute 和 second 组件。此数据类型位于名称空间 <code>http://www.w3.org/2003/11/xpath-datatypes</code> 中。</p>
 
<p>四个值都可以通过计算指定毫秒的值设置，通过创建的 {@link Duration} 的 <code>get</code> 方法获得。该值符合以下规范并由其定义：</p>
 <ul>
   <li>ISO 8601:2000(E) Section 5.5.3.2 Alternative format</li>
   <li><a href="http://www.w3.org/TR/xmlschema-2/#isoformats">W3C XML Schema 1.0 Part 2, Appendix D, ISO 8601 Date and Time Formats</a>
   </li>
   <li>{@link XMLGregorianCalendar}  XML 模式 1.0 和 Java 表示形式之间的日期/时间数据类型字段映射关系</li>
 </ul>
 
<p>通过 {@link GregorianCalendar} 使用的历元开始时间定义默认开始实例：即 {@link java.util.Calendar#YEAR} = 1970、{@link java.util.Calendar#MONTH} = {@link java.util.Calendar#JANUARY}、{@link java.util.Calendar#DATE} = 1 等。这非常重要，因为阳历中存在变化，例如，对于 month = {@link java.util.Calendar#FEBRUARY}，闰年会有不同的天数，所以 {@link Duration#getDays()} 的结果将受到影响。</p>
 
<p>丢弃确定 day、hour、minute 和 second 之后所有剩余毫秒。</p>
 
@param durationInMilliseconds 要创建的 <code>Duration</code> 的毫秒。
 
@return 使用指定 <code>durationInMilliseconds</code> 创建的新 <code>Duration</code>。
 
@see <a href="http://www.w3.org/TR/xpath-datamodel#dt-dayTimeDuration">XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.datatype.Duration javax.xml.datatype.DatatypeFactory.newDurationDayTime(boolean isPositive, BigInteger day, BigInteger hour, BigInteger minute, BigInteger second)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>根据 <a href="http://www.w3.org/TR/xpath-datamodel#dt-dayTimeDuration">XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration</a> 中的定义，使用指定 <code>day</code>、<code>hour</code>、<code>minute</code> 和 <code>second</code> 创建类型为 <code>xdt:dayTimeDuration</code> 的 <code>Duration</code>。</p>
 
<p>数据类型 <code>xdt:dayTimeDuration</code> 是 <code>xs:duration</code> 的子类型，<code>xs:duration</code> 词汇表示形式只包含 day、hour、minute 和 second 组件。此数据类型位于名称空间 <code>http://www.w3.org/2003/11/xpath-datatypes</code> 中。</p>
 
<p>XML 模式规范说明值可以为任意大小。实现可以选择不（或不能）支持任意大和/或小的值。如果超过实现容量，则抛出 {@link UnsupportedOperationException} 和指示实现限制的消息。</p>
 
<p><code>null</code> 值指示不设置字段。</p>
 
@param isPositive 设置为 <code>false</code> 将创建负的 Duration。当 Duration 的长度为零时，将忽略此参数。
@param day <code>Duration</code> 的日。
@param hour <code>Duration</code> 的时。
@param minute  <code>Duration</code> 的分。
@param second <code>Duration</code> 的秒。
 
@return 使用指定的 <code>day</code>、<code>hour</code>、<code>minute</code> 和 <code>second</code> 创建新的 <code>Duration</code>。
 
@throws IllegalArgumentException 如果值不是 <code>Duration</code> 的有效表示形式：如果所有这些字段（years、months 等等）为 null，或者任何一个为负。
@throws UnsupportedOperationException 如果实现无法支持请求值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.datatype.Duration javax.xml.datatype.DatatypeFactory.newDurationDayTime(boolean isPositive, int day, int hour, int minute, int second)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>根据 <a href="http://www.w3.org/TR/xpath-datamodel#dt-dayTimeDuration">XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration</a> 中的定义，使用指定 <code>day</code>、<code>hour</code>、<code>minute</code> 和 <code>second</code> 创建类型为 <code>xdt:dayTimeDuration</code> 的 <code>Duration</code>。</p>
 
<p>数据类型 <code>xdt:dayTimeDuration</code> 是 <code>xs:duration</code> 的子类型，<code>xs:duration</code> 词汇表示形式仅包含 day、hour、minute 和 second 组件。此数据类型位于名称空间 <code>http://www.w3.org/2003/11/xpath-datatypes</code> 中。</p>
 
<p>{@link DatatypeConstants#FIELD_UNDEFINED} 值指示不设置字段。</p>
 
@param isPositive 设置为 <code>false</code> 将创建负的 Duration。当 Duration 的长度为零时，将忽略此参数。
@param day <code>Duration</code> 的日。
@param hour <code>Duration</code> 的时。
@param minute  <code>Duration</code> 的分。
@param second <code>Duration</code> 的秒。
 
@return 使用指定的 <code>day</code>、<code>hour</code>、<code>minute</code> 和 <code>second</code> 创建新的 <code>Duration</code>。
 
@throws IllegalArgumentException 如果值不是 <code>Duration</code> 的有效表示形式：如果所有这些字段（years、months 等等）为 null，或者任何一个为负。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.datatype.Duration javax.xml.datatype.DatatypeFactory.newDurationYearMonth(String lexicalRepresentation)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>通过解析其 <code>String</code> 表示形式 &quot;<em>PnYnM</em>&quot;（<a href="http://www.w3.org/TR/xpath-datamodel#dt-yearMonthDuration">XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration</a>）创建类型为 <code>xdt:yearMonthDuration</code> 的 <code>Duration</code>。</p>
 
<p>数据类型 <code>xdt:yearMonthDuration</code> 是 <code>xs:duration</code> 的子类型，<code>xs:duration</code> 词汇表示形式仅包含 year 和 month 组件。此数据类型位于名称空间 {@link javax.xml.XMLConstants#W3C_XPATH_DATATYPE_NS_URI} 中。</p>
 
<p>这两个值都可以从创建的 {@link Duration} 设置和获得</p>
 
<p>XML 模式规范说明值可以为任意大小。实现可以选择不（或不能）支持任意大和/或小的值。如果超过实现容量，则抛出 {@link UnsupportedOperationException} 和指示实现限制的消息。</p>
 
@param lexicalRepresentation Duration 的词汇表示形式。
 
@return 使用指定 <code>lexicalRepresentation</code> 创建的新 <code>Duration</code>。
 
@throws IllegalArgumentException 如果 <code>lexicalRepresentation</code> 不是通过 years 和 months 表示的 <code>Duration</code> 的有效表示形式。
@throws UnsupportedOperationException 如果实现无法支持请求值。
@throws NullPointerException 如果 <code>lexicalRepresentation</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.datatype.Duration javax.xml.datatype.DatatypeFactory.newDurationYearMonth(long durationInMilliseconds)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>根据 <a href="http://www.w3.org/TR/xpath-datamodel#dt-dayTimeDuration">XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration</a> 中的定义，使用指定毫秒创建类型为 <code>xdt:yearMonthDuration</code> 的 <code>Duration</code>。</p>
 
<p>数据类型 <code>xdt:yearMonthDuration</code> 是 <code>xs:duration</code> 的子类型，<code>xs:duration</code>  词汇表示形式只包含 year 和 month 组件。此数据类型位于名称空间 {@link javax.xml.XMLConstants#W3C_XPATH_DATATYPE_NS_URI} 中。</p>
 
<p>两个值都可以通过计算指定毫秒的值设置，通过创建的 {@link Duration} 的 <code>get</code> 方法获得。该值符合以下规范并由其定义：</p>
 <ul>
   <li>ISO 8601:2000(E) Section 5.5.3.2 Alternative format</li>
   <li><a href="http://www.w3.org/TR/xmlschema-2/#isoformats">W3C XML Schema 1.0 Part 2, Appendix D, ISO 8601 Date and Time Formats</a>
   </li>
<li>{@link XMLGregorianCalendar} XML 模式 1.0 和 Java 表示形式之间的日期/时间数据类型字段映射关系 </li>
 </ul>
 
<p>通过 {@link GregorianCalendar} 使用的历元开始时间定义默认开始实例：即 {@link java.util.Calendar#YEAR} = 1970、{@link java.util.Calendar#MONTH} = {@link java.util.Calendar#JANUARY}、{@link java.util.Calendar#DATE} = 1 等。这非常重要，因为阳历中存在变化，例如，对于 month = {@link java.util.Calendar#FEBRUARY}，闰年会有不同的天数，所以 {@link Duration#getMonths()} 的结果将受到影响。</p>
 
<p>丢弃确定 year 和 month 之后所有剩余毫秒。</p>
 
@param durationInMilliseconds 要创建的 <code>Duration</code> 的毫秒。
 
@return 使用指定 <code>durationInMilliseconds</code> 创建的新 <code>Duration</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.datatype.Duration javax.xml.datatype.DatatypeFactory.newDurationYearMonth(boolean isPositive, BigInteger year, BigInteger month)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>根据 <a href="http://www.w3.org/TR/xpath-datamodel#dt-yearMonthyDuration">XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration</a> 中的定义，使用指定 <code>year</code> 和 <code>month</code> 创建类型为 <code>xdt:yearMonthDuration</code> 的 <code>Duration</code>。</p>
 
<p>XML 模式规范说明值可以为任意大小。实现可以选择不（或不能）支持任意大和/或小的值。如果超过实现容量，则抛出 {@link UnsupportedOperationException} 和指示实现限制的消息。</p>
 
<p><code>null</code> 值指示不设置字段。</p>
 
@param isPositive 设置为 <code>false</code> 将创建负的 Duration。当 Duration 的长度为零时，将忽略此参数。
@param year <code>Duration</code> 的年。
@param month <code>Duration</code> 的月。
 
@return 使用指定的 <code>year</code> 和 <code>month</code> 创建的新 <code>Duration</code>。
 
@throws IllegalArgumentException 如果值不是 <code>Duration</code> 的有效表示形式：如果所有这些字段（years、months 等等）为 null，或者任何一个为负。
@throws UnsupportedOperationException 如果实现无法支持请求值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.datatype.Duration javax.xml.datatype.DatatypeFactory.newDurationYearMonth(boolean isPositive, int year, int month)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>根据 <a href="http://www.w3.org/TR/xpath-datamodel#dt-yearMonthyDuration">XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration</a> 中的定义，使用指定 <code>year</code> 和 <code>month</code> 创建类型为 <code>xdt:yearMonthDuration</code> 的 <code>Duration</code>。</p>
 
<p>{@link DatatypeConstants#FIELD_UNDEFINED} 值指示不设置字段。</p>
 
@param isPositive 设置为 <code>false</code> 将创建负的 Duration。当 Duration 的长度为零时，将忽略此参数。
@param year <code>Duration</code> 的年。
@param month <code>Duration</code> 的月。
 
@return 使用指定的 <code>year</code> 和 <code>month</code> 创建的新 <code>Duration</code>。
 
@throws IllegalArgumentException 如果值不是 <code>Duration</code> 的有效表示形式：如果这些字段（year 和 month）中的任何一个为负。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.datatype.XMLGregorianCalendar javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>创建新的 <code>XMLGregorianCalendar</code> 实例。</p>
 
<p>设置为 {@link DatatypeConstants#FIELD_UNDEFINED} 或 null 的所有日期/时间数据类型字段。</p>
 
@return 新的 <code>XMLGregorianCalendar</code>，其所有日期/时间数据类型字段设置为 {@link DatatypeConstants#FIELD_UNDEFINED} 或 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.datatype.XMLGregorianCalendar javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar(String lexicalRepresentation)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>通过将字符串解析为词汇表示形式，创建新的 XMLGregorianCalendar。</p>
 
<p>在 <a href="http://www.w3.org/TR/xmlschema-2/#dateTime-order">XML Schema 1.0 Part 2, Section 3.2.[7-14].1, <em>Lexical Representation</em></a> 中定义了解析词汇字符串表示形式。</p>
 
<p>字符串表示形式不能存在任何前导和尾部空格。</p>
 
<p>逐字段执行解析，以便以下内容保存任何词汇正确的字符串 x：</p>
 <pre>
 newXMLGregorianCalendar(x).toXMLFormat().equals(x)
 </pre>
<p><a href="http://www.w3.org/2001/05/xmlschema-errata#e2-45">XML Schema 1.0 errata, Section 3.2.7.2</a> 中列出的注释词汇/规范化表示形式不匹配的情况除外。</p>
 
@param lexicalRepresentation 八个 XML 模式日期/时间数据数型之一的词汇表示形式。
 
@return  根据 <code>lexicalRepresentation</code> 创建的 <code>XMLGregorianCalendar</code>。
 
@throws IllegalArgumentException 如果 <code>lexicalRepresentation</code> 不是有效的 <code>XMLGregorianCalendar</code>。
@throws NullPointerException 如果 <code>lexicalRepresentation</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.datatype.XMLGregorianCalendar javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar(GregorianCalendar cal)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>根据 {@link GregorianCalendar} 创建 <code>XMLGregorianCalendar</code>。</p> 

 <table border="2" rules="all" cellpadding="2">
   <thead>
     <tr>
       <th align="center" colspan="2">
从 {@link GregorianCalendar} 到 {@link XMLGregorianCalendar} 的逐字段转换
       </th>
     </tr>
     <tr>
<th><code>java.util.GregorianCalendar</code> 字段</th>
<th><code>javax.xml.datatype.XMLGregorianCalendar</code> 字段</th>
     </tr>
   </thead>
   <tbody>
     <tr>
       <td><code>ERA == GregorianCalendar.BC ? -YEAR :YEAR</code></td>
       <td>{@link XMLGregorianCalendar#setYear(int year)}</td>
     </tr>
     <tr>
       <td><code>MONTH + 1</code></td>
       <td>{@link XMLGregorianCalendar#setMonth(int month)}</td>
     </tr>
     <tr>
       <td><code>DAY_OF_MONTH</code></td>
       <td>{@link XMLGregorianCalendar#setDay(int day)}</td>
     </tr>
     <tr>
       <td><code>HOUR_OF_DAY, MINUTE, SECOND, MILLISECOND</code></td>
       <td>{@link XMLGregorianCalendar#setTime(int hour, int minute, int second, BigDecimal fractional)}</td>
     </tr>
     <tr>
       <td>
<code>(ZONE_OFFSET + DST_OFFSET) / (60*1000)</code><br/> <em>（以分为单位）</em>
       </td>
       <td>{@link XMLGregorianCalendar#setTimezone(int offset)}<sup><em>*</em></sup>
       </td>
     </tr>
   </tbody>
 </table>
<p><em>*</em> 转换丢失信息。不能以 XML 模式 1.0 日期/时间数据类型表示形式表示 <code>java.util.GregorianCalendar</code> 夏令时时区 id。</p>
 
<p>要计算返回值的 <code>TimeZone</code> 字段，
 <ul>
<li>当 <code>this.getTimezone() != FIELD_UNDEFINED</code> 时，使用 <code>this.getTimezone()</code> 创建带有自定义时区 id 的 <code>java.util.TimeZone</code>。</li>
<li>此外，对主机使用 <code>GregorianCalendar</code> 默认时区值按 <code>java.util.TimeZone.getDefault()</code> 指定的方式定义。</li></p>     

@param cal 用于创建 <code>XMLGregorianCalendar</code> 的 <code>java.util.GregorianCalendar</code>。
 
@return 从 <code>java.util.GregorianCalendar</code> 创建的 <code>XMLGregorianCalendar</code>
  
@throws NullPointerException 如果 <code>cal</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.datatype.XMLGregorianCalendar javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar(BigInteger year, int month, int day, int hour, int minute, int second, BigDecimal fractionalSecond, int timezone)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>W3C XML 模式 1.0 推荐考虑完整值空间的构造方法，该方法用于 xsd:dateTime 和相关的内置数据类型。注意，<code>year</code> 参数支持任意大的数字，fractionalSecond 具有无限精度。</p>
 
<p><code>null</code> 值指示不设置字段。</p>
 
@param year 要创建的 <code>XMLGregorianCalendar</code> 的年。
@param month  要创建的 <code>XMLGregorianCalendar</code> 的月。
@param day 要创建的 <code>XMLGregorianCalendar</code> 的日。
@param hour 要创建的 <code>XMLGregorianCalendar</code> 的时。
@param minute 要创建的 <code>XMLGregorianCalendar</code> 的分。
@param second 要创建的 <code>XMLGregorianCalendar</code> 的秒。
@param fractionalSecond 要创建的 <code>XMLGregorianCalendar</code> 的 fractionalSecond。
@param timezone 要创建的 <code>XMLGregorianCalendar</code> 的时区。
 
@return 根据指定值创建的 <code>XMLGregorianCalendar</code>。
 
@throws IllegalArgumentException 如果任一参数的值超出由 {@link XMLGregorianCalendar} 中词汇 Data Mapping 表确定的字段的最大值约束，或者复合值组成了 {@link XMLGregorianCalendar#isValid()} 确定为无效的 <code>XMLGregorianCalendar</code> 实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.datatype.XMLGregorianCalendar javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar(int year, int month, int day, int hour, int minute, int second, int millisecond, int timezone)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p><code>java.util.GregorianCalendar</code> 实例需要转换为 <code>XMLGregorianCalendar</code> 实例的值空间的构造方法。</p>
    
<p>将 <code>XMLGregorianCalendar eon</code> 和 <code>fractionalSecond</code> 设置为 <code>null</code></p>

<p>{@link DatatypeConstants#FIELD_UNDEFINED} 值指示不设置字段。</p>
 
@param year 要创建的 <code>XMLGregorianCalendar</code> 的年。
@param month  要创建的 <code>XMLGregorianCalendar</code> 的月。
@param day 要创建的 <code>XMLGregorianCalendar</code> 的日。
@param hour 要创建的 <code>XMLGregorianCalendar</code> 的时。
@param minute 要创建的 <code>XMLGregorianCalendar</code> 的分。
@param second 要创建的 <code>XMLGregorianCalendar</code> 的秒。
@param millisecond 要创建的 <code>XMLGregorianCalendar</code> 的毫秒。
@param timezone 要创建的 <code>XMLGregorianCalendar</code> 的时区。
 
@return 根据指定值创建的 <code>XMLGregorianCalendar</code>。
 
@throws IllegalArgumentException 如果任一参数的值超出由 {@link XMLGregorianCalendar} 中词汇 Data Mapping 表确定的字段的最大值约束，或者复合值组成了 {@link XMLGregorianCalendar#isValid()} 确定为无效的 <code>XMLGregorianCalendar</code> 实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.datatype.XMLGregorianCalendar javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendarDate(int year, int month, int day, int timezone)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>创建 XML 模式内置数据类型 <code>date</code> 或 <code>g*</code> 的 Java 表示形式。</p>
 
<p>例如，通过调用此工厂，并将 <code>month</code> 和 <code>day</code> 参数设置为 {@link DatatypeConstants#FIELD_UNDEFINED}，可以创建 <code>gYear</code> 实例。</p>
 
<p>{@link DatatypeConstants#FIELD_UNDEFINED} 值指示不设置字段。</p>
 
@param year 要创建的 <code>XMLGregorianCalendar</code> 的年。
@param month  要创建的 <code>XMLGregorianCalendar</code> 的月。
@param day 要创建的 <code>XMLGregorianCalendar</code> 的日。
@param timezone 以分为单位的偏移量。{@link DatatypeConstants#FIELD_UNDEFINED} 指示未设置可选字段。
 
@return 根据参数值创建的 <code>XMLGregorianCalendar</code>。
 
@see DatatypeConstants#FIELD_UNDEFINED

@throws IllegalArgumentException 如果任一参数的值超出由 {@link XMLGregorianCalendar} 中词汇 Data Mapping 表确定的字段的最大值约束，或者复合值组成了 {@link XMLGregorianCalendar#isValid()} 确定为无效的 <code>XMLGregorianCalendar</code> 实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.datatype.XMLGregorianCalendar javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendarTime(int hours, int minutes, int seconds, int timezone)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>创建 XML 模式内置数据类型 <code>time</code> 的 Java 实例。</p>
 
<p>{@link DatatypeConstants#FIELD_UNDEFINED} 值指示不设置字段。</p>
 
@param hours 小时数
@param minutes 分钟数
@param seconds 秒数
@param timezone 以分钟为单位的偏移量。{@link DatatypeConstants#FIELD_UNDEFINED} 指示未设置可选字段。
 
@return 根据参数值创建的 <code>XMLGregorianCalendar</code>。
 
@throws IllegalArgumentException 如果任何单个参数的值超出由 {@link XMLGregorianCalendar} 中词汇 Data Mapping 表确定的字段的最大值约束，或者复合值组成了 {@link XMLGregorianCalendar#isValid()} 确定为无效的 <code>XMLGregorianCalendar</code> 实例。
  
@see DatatypeConstants#FIELD_UNDEFINED

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.datatype.XMLGregorianCalendar javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendarTime(int hours, int minutes, int seconds, BigDecimal fractionalSecond, int timezone)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>创建 XML 模式内置数据类型 time 的 Java 实例。</p>
 
<p><code>null</code> 值指示不设置字段。</p>
<p>{@link DatatypeConstants#FIELD_UNDEFINED} 值指示不设置字段。</p>
 
@param hours 小时数
@param minutes 分钟数
@param seconds 秒数
@param fractionalSecond <code>null</code> 的值，它指示未设置此可选字段。
@param timezone 以分为单位的偏移量。{@link DatatypeConstants#FIELD_UNDEFINED} 指示未设置可选字段。
 
@return 根据参数值创建的 <code>XMLGregorianCalendar</code>。
 

@see DatatypeConstants#FIELD_UNDEFINED

@throws IllegalArgumentException 如果任一参数的值超出由 {@link XMLGregorianCalendar} 中词汇 Data Mapping 表确定的字段的最大值约束，或者复合值组成了 {@link XMLGregorianCalendar#isValid()} 确定为无效的 <code>XMLGregorianCalendar</code> 实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.datatype.XMLGregorianCalendar javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendarTime(int hours, int minutes, int seconds, int milliseconds, int timezone)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>创建 XML 模式内置数据类型 time 的 Java 实例。</p>
 
<p>{@link DatatypeConstants#FIELD_UNDEFINED} 值指示不设置字段。</p>
 
@param hours 小时数
@param minutes 分钟数
@param seconds 秒数
@param milliseconds 毫秒数
@param timezone 以分钟为单位的偏移量。{@link DatatypeConstants#FIELD_UNDEFINED} 指示未设置可选字段。
 
@return 根据参数值创建的 <code>XMLGregorianCalendar</code>。
 

@see DatatypeConstants#FIELD_UNDEFINED

@throws IllegalArgumentException 如果任一参数的值超出由 {@link XMLGregorianCalendar} 中词汇 Data Mapping 表确定的字段的最大值约束，或者复合值了 {@link XMLGregorianCalendar#isValid()} 确定为无效的 <code>XMLGregorianCalendar</code> 实例。

<!-- END DATA -->
