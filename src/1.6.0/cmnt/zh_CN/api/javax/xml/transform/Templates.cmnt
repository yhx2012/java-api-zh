<!-- BEGIN KEY -->
public interface javax.xml.transform.Templates
<!-- END KEY -->
<!-- BEGIN DATA -->
实现此接口的对象是处理后的转换指令的运行时表示形式。

<p>Templates 对于多线程同时运行的给定实例必须是线程安全的，且在给定会话中可多次使用。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.Transformer javax.xml.transform.Templates.newTransformer() throws javax.xml.transform.TransformerConfigurationException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建此 Templates 对象的新转换上下文。

@return  Transformer 的有效非 null 实例。

@throws TransformerConfigurationException 如果不能创建 Transformer。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Properties javax.xml.transform.Templates.getOutputProperties()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取对应于有效 xsl:output 元素的属性。返回的对象将是内部值的副本。相应地，可以在不改变 Templates 对象的情况下改变它，然后传递给 {@link javax.xml.transform.Transformer#setOutputProperties}。

<p>返回的属性应包含通过 stylesheet 设置的属性，且这些属性将 <a href="http://www.w3.org/TR/xslt#output">section 16 of the XSL Transformations (XSLT) W3C Recommendation</a> 所指定的默认属性作为&ldquo;默认值&rdquo;。通过 stylesheet 特定设置的属性应位于基本 Properties 列表中，而未特定设置的 XSLT 默认属性应位于 &quot;default&quot; Properties 列表中。因此，getOutputProperties().getProperty(String key) 将包含通过 stylesheet 设置的任何属性，<em>或者</em>默认属性，而 getOutputProperties().get(String key) 将只检索 stylesheet 中显式设置的属性。</p>

<p>对于 XSLT，将返回未展开的 <a href="http://www.w3.org/TR/xslt#attribute-value-templates">Attribute Value Templates</a> 属性值（因为此时没有上下文）。Attribute Value Templates 中的名称空间前缀将不展开，因此它们保持有效的 XPath 值。</p>

@return Properties 对象，不会返回 null。

<!-- END DATA -->
