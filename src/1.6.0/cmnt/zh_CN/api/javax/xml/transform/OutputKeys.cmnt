<!-- BEGIN KEY -->
public class javax.xml.transform.OutputKeys extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
提供可用于设置 Transformer 的输出属性或从 Transformer 或 Templates 对象检索输出属性的字符串常量。
<p>此类中的所有字段均为只读的。</p>

@see <a href="http://www.w3.org/TR/xslt#output">XSL Transformations (XSLT) W3C Recommendation 的第 16 小节</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.OutputKeys.METHOD
<!-- END KEY -->
<!-- BEGIN DATA -->
method = &quot;xml&quot; | &quot;html&quot; | &quot;text&quot; | <var>expanded name</var>。

<p>方法属性的值标识了应用于输出结果树的总体方法。可以使用其他非名称空间的值，例如 &quot;xhtml&quot;，但如果接受的话，这样的值的处理是由实现定义的。如果不接受任何方法值，或方法值不是名称空间限定的，则 {@link javax.xml.transform.Transformer#setOutputProperty} 或 {@link javax.xml.transform.Transformer#setOutputProperties} 将抛出 {@link java.lang.IllegalArgumentException}。</p>

@see <a href="http://www.w3.org/TR/xslt#output">XSL Transformations (XSLT) W3C Recommendation 的第 16 小节</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.OutputKeys.VERSION
<!-- END KEY -->
<!-- BEGIN DATA -->
version = <var>nmtoken</var>.

<p><code>version</code> 指定了输出方法的版本。</p>
<p>当输出方法为 &quot;xml&quot; 时，版本值指定了要用于输出结果树的 XML 的版本。xml 输出方法的默认值为 1.0。当输出方法为 &quot;html&quot; 时，版本值指示了 HTML 的版本。xml 输出方法的置信值为 4.0，它指定了结果应以遵守 HTML 4.0 Recommendation [HTML] 的 HTML 格式输出。如果输出方法为 &quot;text&quot;，则忽略版本属性。</p>

@see <a href="http://www.w3.org/TR/xslt#output">XSL Transformations (XSLT) W3C Recommendation 的第 16 小节</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.OutputKeys.ENCODING
<!-- END KEY -->
<!-- BEGIN DATA -->
encoding = <var>string</var>.

<p><code>encoding</code> 指定了首选的字符编码，Transformer 应使用此编码将字符序列编码作为字节序列进行编码。编码属性值应是不区分大小写的。该值必须只包含 #x21 到 #x7E（即可打印的 ASCII 字符）范围内的字符。值要么为 Internet Assigned Numbers Authority <a href="http://www.iana.org/">[IANA]</a>, <a href="http://www.ietf.org/rfc/rfc2278.txt">[RFC2278]</a> 中注册的 <code>charset</code>，要么以 <code>X-</code> 开头。</p>

@see <a href="http://www.w3.org/TR/xslt#output">XSL Transformations (XSLT) W3C Recommendation 的第 16 小节</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.OutputKeys.OMIT_XML_DECLARATION
<!-- END KEY -->
<!-- BEGIN DATA -->
omit-xml-declaration = &quot;yes&quot; | &quot;no&quot;.

<p><code>omit-xml-declaration</code> 指定了 XSLT 处理器是否应输出 XML 声明，其值必须为 <code>yes</code> 或 <code>no</code>。</p>

@see <a href="http://www.w3.org/TR/xslt#output">XSL Transformations (XSLT) W3C Recommendation 的第 16 小节</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.OutputKeys.STANDALONE
<!-- END KEY -->
<!-- BEGIN DATA -->
standalone = &quot;yes&quot; | &quot;no&quot;.

<p><code>standalone</code> 指定了 Transformer 是否应输出单独的文档声明，其值必须为 <code>yes</code> 或 <code>no</code>。</p>

@see <a href="http://www.w3.org/TR/xslt#output">XSL Transformations (XSLT) W3C Recommendation 的第 16 小节</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.OutputKeys.DOCTYPE_PUBLIC
<!-- END KEY -->
<!-- BEGIN DATA -->
doctype-public = <var>string</var>.
<p>有关关键值应为何值的描述，请参阅 {@link #DOCTYPE_SYSTEM} 属性文档。</p>

@see <a href="http://www.w3.org/TR/xslt#output">XSL Transformations (XSLT) W3C Recommendation 的第 16 小节</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.OutputKeys.DOCTYPE_SYSTEM
<!-- END KEY -->
<!-- BEGIN DATA -->
doctype-system = <var>string</var>.
<p><code>doctype-system</code> 指定了要在文档类型声明中使用的系统标识符。</p>
<p>如果指定了 doctype-system 属性，则 xml 输出方法应在首个元素的正前面输出文档类型声明。紧跟 &lt;!DOCTYPE 后面的名称应为第一个元素的名称。如果还指定了 doctype-public 属性，则 xml 输出方法应输出 PUBLIC，后跟公共标识符，再后跟系统标识符，否则，它应输出 SYSTEM，后跟系统标识符。内部子集应为空。如果没有指定 doctype-system 属性，则应忽略 doctype-public 属性值。</p>
<p>如果指定了 doctype-public 或 doctype-system 属性，则 html 输出方法应在第一个元素的正前面输出文档类型声明。紧跟 &lt;!DOCTYPE 后面的名称应为 HTML 或 html。如果指定了 doctype-public 属性，则输出方法应输出 PUBLIC，后跟指定的公共标识符；如果还指定了 doctype-system 属性，则它还应在公共标识符后面输出指定的系统标识符。如果指定了 doctype-system 属性但未指定 doctype-public 属性，则输出方法应输出 SYSTEM，后跟指定的系统标识符。</p>

<p><code>doctype-system</code> 指定了要在文档类型声明中使用的系统标识符。</p>

@see <a href="http://www.w3.org/TR/xslt#output">XSL Transformations (XSLT) W3C Recommendation 的第 16 小节</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.OutputKeys.CDATA_SECTION_ELEMENTS
<!-- END KEY -->
<!-- BEGIN DATA -->
cdata-section-elements = <var>expanded names</var>.

<p><code>cdata-section-elements</code> 指定了由空白分隔的元素名称列表，其中的文本节点子级应使用 CDATA 部分来输出。注意这些名称必须使用 {@link javax.xml.transform} 的 Qualfied Name Representation 节中描述的格式。</p>

@see <a href="http://www.w3.org/TR/xslt#output">XSL Transformations (XSLT) W3C Recommendation 的第 16 小节.</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.OutputKeys.INDENT
<!-- END KEY -->
<!-- BEGIN DATA -->
indent = &quot;yes&quot; | &quot;no&quot;.

<p><code>indent</code> 指定了当输出结果树时，Transformer 是否可以添加额外的空白；其值必须为 <code>yes</code> 或 <code>no</code>。</p>

@see <a href="http://www.w3.org/TR/xslt#output">XSL Transformations (XSLT) W3C Recommendation 的第 16 小节</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.OutputKeys.MEDIA_TYPE
<!-- END KEY -->
<!-- BEGIN DATA -->
media-type = <var>string</var>.

<p><code>media-type</code> 指定了输出结果树得到的数据的介质类型（MIME 内容类型）。不应显式指定<code>charset</code> 参数；相反，当顶层介质类型为 <code>text</code> 时，应根据输出方法实际使用的字符编码来添加 <code>charset</code> 参数。  </p>

@see <a href="http://www.w3.org/TR/xslt#output">s ection 16 of the XSL Transformations (XSLT) W3C Recommendation</a>

<!-- END DATA -->
