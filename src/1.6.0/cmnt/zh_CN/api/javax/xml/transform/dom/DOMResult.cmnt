<!-- BEGIN KEY -->
public class javax.xml.transform.dom.DOMResult extends java.lang.Object implements javax.xml.transform.Result
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>以 Document Object Model（DOM）树的形式充当转换结果树的持有者。</p>
 
<p>如果未设置输出 DOM 源，则转换将创建 Document 节点作为转换结果的持有者，可以通过 {@link #getNode()} 来检索该节点。</p>
 
@author <a href="Jeff.Suttor@Sun.com">Jeff Suttor</a>
@version $Revision: 1.3 $, $Date: 2006-09-14 09:54:18 $

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.dom.DOMResult.FEATURE
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>当将此值作为参数传递时，如果 {@link javax.xml.transform.TransformerFactory#getFeature} 返回 <code>true</code>，则 <code>Transformer</code> 支持此类型的 <code>Result</code> 输出。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.dom.DOMResult()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>零参数的默认构造方法。</p>
 
<p><code>node</code>、<code>siblingNode</code> 和 <code>systemId</code> 将被设置为 <code>null</code>。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.dom.DOMResult(Node node)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>使用 DOM 节点创建新输出目标。</p>
 
<p>实际上，该节点应该是 {@link org.w3c.dom.Document} 节点、{@link org.w3c.dom.DocumentFragment} 节点或 {@link org.w3c.dom.Element} 节点。换句话说，应该是接受子级的节点。</p>

<p><code>siblingNode</code> 和 <code>systemId</code> 将被设置为 <code>null</code>。</p>
 
@param node 将包含结果树的 DOM 节点。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.dom.DOMResult(Node node, String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>使用 DOM 节点创建带有指定 System ID 的新输出目标。<p>
 
<p>实际上，该节点应该是 {@link org.w3c.dom.Document} 节点、{@link org.w3c.dom.DocumentFragment} 节点或 {@link org.w3c.dom.Element} 节点。换句话说，应该是是接受子级的节点。</p>

<p><code>siblingNode</code> 将被设置为 <code>null</code>。</p>
 
@param node 将包含结果树的 DOM 节点。
@param systemId 可与此节点联合使用的系统标识符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.dom.DOMResult(Node node, Node nextSibling)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>使用 DOM 节点创建新输出目标，此目标指定了应该插入的结果节点之后的子节点。</p>
 
<p>实际上，<code>node</code> 和 <code>nextSibling</code> 应该是 {@link org.w3c.dom.Document} 节点、{@link org.w3c.dom.DocumentFragment} 节点或 {@link org.w3c.dom.Element} 节点。换句话说，应该是接受子级的节点。</p>
 
<p>使用 <code>nextSibling</code> 来指定应该插入的结果节点之后的子节点。如果 <code>nextSibling</code> 不是 <code>node</code> 的兄弟结点，则抛出 <code>IllegalArgumentException</code>。如果 <code>node</code> 为 <code>null</code> 且 <code>nextSibling</code> 不为 <code>null</code>，则抛出 <code>IllegalArgumentException</code>。如果 <code>nextSibling</code> 为 <code>null</code>，则行为将与调用 {@link #DOMResult(Node node)} 相同，即将结果节点追加为指定 <code>node</code> 的最后一个子节点。</p>
 
<p><code>systemId</code> 将被设置为 <code>null</code>。</p>
 
@param node 将包含结果树的 DOM 节点。
@param nextSibling 应该插入的结果节点之后的子节点。
 
@throws IllegalArgumentException 如果 <code>nextSibling</code> 不是 <code>node</code> 的兄弟节点，或者 <code>node</code> 为 <code>null</code> 且 <code>nextSibling</code> 不为 <code>null</code>。
 
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.dom.DOMResult(Node node, Node nextSibling, String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>使用 DOM 节点创建新输出目标，此目标指定了子节点，其中结果节点为指定 System ID 且应该插入到该子节点之前。</p>
 
<p>实际上，<code>node</code> 和 <code>nextSibling</code> 应该是 {@link org.w3c.dom.Document} 节点、{@link org.w3c.dom.DocumentFragment} 节点或 {@link org.w3c.dom.Element} 节点。换句话说，应该是接受子级的节点。</p>

<p>使用 <code>nextSibling</code> 来指定应该插入的结果节点之后的子节点。如果 <code>nextSibling</code> 不是 <code>node</code> 的兄弟结点，则抛出 <code>IllegalArgumentException</code>。如果 <code>node</code> 为 <code>null</code> 且 <code>nextSibling</code> 不为 <code>null</code>，则抛出 <code>IllegalArgumentException</code>。如果 <code>nextSibling</code> 为 <code>null</code>，则行为将与调用 {@link #DOMResult(Node node, String systemId)} 相同，即将结果节点追加为指定节点的最后一个子节点，并使用指定 System ID。</p>
 
@param node 将包含结果树的 DOM 节点。
@param nextSibling 应该插入的结果节点之后的子节点。
@param systemId 可与此节点关联使用的系统标识符。
 
@throws IllegalArgumentException 如果 <code>nextSibling</code> 不是 <code>node</code> 的兄弟节点，或者 <code>node</code> 为 <code>null</code> 且 <code>nextSibling</code> 不为 <code>null</code>。
 
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.dom.DOMResult.setNode(Node node)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>设置将包含结果 DOM 树的节点。<p>
 
<p>实际上，该节点应该是 {@link org.w3c.dom.Document} 节点、{@link org.w3c.dom.DocumentFragment} 节点或 {@link org.w3c.dom.Element} 节点。换句话说，应该是接受子级的节点。</p>
 
<p>如果 <code>nextSibling</code> 不为 <code>null</code> 且 <code>node</code> 不是 <code>nextSibling</code> 的父级，则抛出 <code>IllegalStateException</code>。如果 <code>node</code> 为 <code>null</code> 且 <code>nextSibling</code> 不为 <code>null</code>，则抛出 <code>IllegalStateException</code>。</p> 

@param node 转换将被追加到的节点。
 
@throws IllegalStateException 如果 <code>nextSibling</code> 不为 <code>null</code> 且 <code>nextSibling</code> 不是 <code>node</code> 的子节点，或者 <code>node</code> 为 <code>null</code> 且 <code>nextSibling</code> 不为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node javax.xml.transform.dom.DOMResult.getNode()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取将包含结果 DOM 树的节点。</p>
 
<p>如果节点不是通过 {@link #DOMResult(Node node)}、{@link #DOMResult(Node node, String systeId)}、{@link #DOMResult(Node node, Node nextSibling)}、{@link #DOMResult(Node node, Node nextSibling, String systemId)} 或 {@link #setNode(Node node)} 设置的，则节点将通过转换进行设置，且当转换完成后可以从此方法获取。在转换之前调用此方法将返回 <code>null</code>。</p>

@return 转换将被追加到的节点。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.dom.DOMResult.setNextSibling(Node nextSibling)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>设置将要插入的结果节点之后的子节点。</p>

<p>使用 <code>nextSibling</code> 来指定将要插入的结果节点之后的子节点。如果 <code>nextSibling</code> 不是 <code>node</code> 的后代，则抛出 <code>IllegalArgumentException</code>。如果 <code>node</code> 为 <code>null</code> 且 <code>nextSibling</code> 不为 <code>null</code>，则抛出 <code>IllegalStateException</code>。如果 <code>nextSibling</code> 为 <code>null</code>，则行为将与调用 {@link #DOMResult(Node node)} 相同，即将结果节点追加为指定 <code>node</code> 的最后一个子节点。</p>
 
@param nextSibling 将要插入的结果节点之后的子节点。
 
@throws IllegalArgumentException 如果 <code>nextSibling</code> 不是 <code>node</code> 的后代。
@throws IllegalStateException 如果 <code>node</code> 为 <code>null</code> 且 <code>nextSibling</code> 不为 <code>null</code>。
 
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node javax.xml.transform.dom.DOMResult.getNextSibling()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取将要插入的结果节点之后的子节点。</p>
 
<p>如果没有通过 {@link #DOMResult(Node node, Node nextSibling)}、{@link #DOMResult(Node node, Node nextSibling, String systemId)} 或 {@link #setNextSibling(Node nextSibling)} 设置节点，则将返回 <code>null</code>。</p>

@return 将要插入的结果节点之后的子节点。
 
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.dom.DOMResult.setSystemId(String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>设置可与此节点联合使用的 systemId。</p>

@param systemId URI 字符串形式的系统标识符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.transform.dom.DOMResult.getSystemId()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取系统标识符。</p>
 
<p>如果没有通过 {@link #DOMResult(Node node, String systemId)}、{@link #DOMResult(Node node, Node nextSibling, String systemId)} 或 {@link #setSystemId(String systemId)} 设置 System ID，则将返回 <code>null</code>。</p>

@return 系统标识符。

<!-- END DATA -->
