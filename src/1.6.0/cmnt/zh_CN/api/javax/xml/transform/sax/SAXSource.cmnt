<!-- BEGIN KEY -->
public class javax.xml.transform.sax.SAXSource extends java.lang.Object implements javax.xml.transform.Source
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>充当 SAX 样式 Source 的持有者。</p>
 
<p>注意，XSLT 要求名称空间支持。尝试转换不是通过名称空间感知的解析器生成的输入源可能导致错误。通过调用 {@link javax.xml.parsers.SAXParserFactory#setNamespaceAware(boolean awareness)} 方法可以使解析器具有名称空间感知的功能。</p>
 
@author <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
@version $Revision: 1.2 $, $Date: 2006-08-31 06:55:51 $

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.sax.SAXSource.FEATURE
<!-- END KEY -->
<!-- BEGIN DATA -->
当将此值作为参数传递时，如果 {@link javax.xml.transform.TransformerFactory#getFeature} 返回 true，则 Transformer 支持此类型的 Source 输入。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.sax.SAXSource()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>零参数的默认构造方法。如果使用了此构造方法，且未使用 {@link #setInputSource(InputSource inputSource)} 设置 SAX 源，则 <code>Transformer</code> 将使用 {@link org.xml.sax.InputSource#InputSource() new InputSource()} 创建空的源 {@link org.xml.sax.InputSource}。</p>

@see javax.xml.transform.Transformer#transform(Source xmlSource, Result outputTarget)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.sax.SAXSource(XMLReader reader, InputSource inputSource)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 {@link org.xml.sax.XMLReader} 和 SAX InputSource 创建 <code>SAXSource</code>。{@link javax.xml.transform.Transformer} 或 {@link javax.xml.transform.sax.SAXTransformerFactory} 将其本身设置为 reader 的 {@link org.xml.sax.ContentHandler}，然后将调用 reader.parse(inputSource)。

@param reader 要用于解析的 XMLReader。
@param inputSource 必须为非 null 且将被传递给 reader 解析方法的 SAX 输入源引用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.sax.SAXSource(InputSource inputSource)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 SAX <code>InputSource</code>，创建 <code>SAXSource</code>。{@link javax.xml.transform.Transformer} 或 {@link javax.xml.transform.sax.SAXTransformerFactory} 通过 {@link org.xml.sax.helpers.XMLReaderFactory}（如果未使用 setXMLReader）创建 reader，将其本身设置为该 reader 的 {@link org.xml.sax.ContentHandler}，并调用 reader.parse(inputSource)。

@param inputSource 必须为非 null 且将传递给 reader 的解析方法的输入源引用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.sax.SAXSource.setXMLReader(XMLReader reader)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置要用于 Source 的 XMLReader。

@param reader 有效的 XMLReader 或 XMLFilter 引用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.XMLReader javax.xml.transform.sax.SAXSource.getXMLReader()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取要用于 Source 的 XMLReader。

@return 有效的 XMLReader 或 XMLFilter 引用，或者返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.sax.SAXSource.setInputSource(InputSource inputSource)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置要用于 Source 的 SAX InputSource。

@param inputSource 有效的 InputSource 引用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.InputSource javax.xml.transform.sax.SAXSource.getInputSource()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取要用于 Source 的 SAX InputSource。

@return 有效的 InputSource 引用，或 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.sax.SAXSource.setSystemId(String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 Source 的系统标识符。如果已设置输入源，则它将设置系统 ID 或该输入源，否则它将创建新输入源。

<p>如果有字节流或字符流，则系统标识符是可选的，但提供系统标识符仍然很有用，因为应用程序可以用它来解析相对 URI，并可以将它包括在错误消息和警告中（仅当未指定字节流或字符流时，解析器才尝试打开到 URI 的连接）。</p>

@param systemId URI 字符串形式的系统标识符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.transform.sax.SAXSource.getSystemId()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取要从其解析 URI 的基本 ID（URI 或系统 ID）。</p>

@return <code>Source</code> 的基本 URL，或 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static org.xml.sax.InputSource javax.xml.transform.sax.SAXSource.sourceToInputSource(Source source)
<!-- END KEY -->
<!-- BEGIN DATA -->
尝试从 Source 对象获取 SAX InputSource 对象。

@param source 必须为非 null Source 引用。

@return InputSource，如果不能转换 Source，则返回 null。

<!-- END DATA -->
