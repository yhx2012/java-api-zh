<!-- BEGIN KEY -->
public class javax.xml.transform.stax.StAXResult extends java.lang.Object implements javax.xml.transform.Result
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>以 StAX writer 的形式（即 {@link XMLStreamWriter} 或 {@link XMLEventWriter}）充当 XML {@link Result} 的持有者。各种接受 <code>Result</code> 的情况下都可以使用 <code>StAXResult</code>，例如，将 <code>Result</code> 作为输入接受的 {@link javax.xml.transform.Transformer} 和 {@link javax.xml.validation.Validator}。


@author <a href="mailto:Neeraj.Bajaj@Sun.com">Neeraj Bajaj</a>
@author <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
@version $Revision: 1.3 $, $Date: 2006-10-23 09:14:16 $

@see <a href="http://jcp.org/en/jsr/detail?id=173">JSR 173:Streaming API for XML</a>
@see XMLStreamWriter
@see XMLEventWriter

@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.stax.StAXResult.FEATURE
<!-- END KEY -->
<!-- BEGIN DATA -->
当将此值作为参数传递时，如果 {@link javax.xml.transform.TransformerFactory#getFeature(String name)} 返回 true，则 Transformer 支持此类型的 Result 输出。

@author <a href="mailto:Neeraj.Bajaj@Sun.com">Neeraj Bajaj</a>
@author <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
@version $Revision: 1.3 $, $Date: 2006-10-23 09:14:16 $

@see <a href="http://jcp.org/en/jsr/detail?id=173">JSR 173:Streaming API for XML</a>
@see XMLStreamWriter
@see XMLEventWriter

@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.stax.StAXResult.FEATURE
<!-- END KEY -->
<!-- BEGIN DATA -->
当将此值作为参数传递时，如果 {@link javax.xml.transform.TransformerFactory#getFeature(String name)} 返回 true，则 Transformer 支持此类型的 Result 输出。


<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stax.StAXResult(XMLEventWriter xmlEventWriter)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>通过提供 {@link XMLEventWriter} 创建 <code>StAXResult</code> 的一个新实例。</p>

<p><code>XMLEventWriter</code> 必须为非 <code>null</code> 引用。</p>

@param xmlEventWriter 用于创建此 <code>StAXResult</code> 的 <code>XMLEventWriter</code>。

@throws IllegalArgumentException 如果 <code>xmlEventWriter</code> == <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stax.StAXResult(XMLStreamWriter xmlStreamWriter)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>通过提供 {@link XMLStreamWriter} 创建 <code>StAXResult</code> 的一个新实例。</p>

<p><code>XMLStreamWriter</code> 必须为非 <code>null</code> 引用。</p>

@param xmlStreamWriter 用于创建此 <code>StAXResult</code> 的 <code>XMLStreamWriter</code>。

@throws IllegalArgumentException 如果 <code>xmlStreamWriter</code> == <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.stream.XMLEventWriter javax.xml.transform.stax.StAXResult.getXMLEventWriter()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取此 <code>StAXResult</code> 使用的 <code>XMLEventWriter</code>。</p>

<p>如果此 <code>StAXResult</code> 是使用 <code>XMLStreamWriter</code> 创建的，那么 <code>XMLEventWriter</code> 将为 <code>null</code>。</p>

@return 此 <code>StAXResult</code> 使用的 <code>XMLEventWriter</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.stream.XMLStreamWriter javax.xml.transform.stax.StAXResult.getXMLStreamWriter()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取此 <code>StAXResult</code> 使用的 <code>XMLStreamWriter</code>。</p>

<p>如果此 <code>StAXResult</code> 是使用 <code>XMLEventWriter</code> 创建的，那么 <code>XMLStreamWriter</code> 将为 <code>null</code>。</p>

@return 此 <code>StAXResult</code> 使用的 <code>XMLStreamWriter</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.stax.StAXResult.setSystemId(String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>在 <code>StAXResult</code> 的上下文中，它不适合显示设置系统标识符。用于构造此 <code>StAXResult</code> 的 <code>XMLEventWriter</code> 或 <code>XMLStreamWriter</code> 确定 XML 结果的系统标识符。</p>

<p>此方法<strong>始终</strong>抛出 {@link UnsupportedOperationException}。</p>

@param systemId 忽略。

@throws UnsupportedOperationException 此方法<strong>始终</strong>抛出该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.transform.stax.StAXResult.getSystemId()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回的系统标识符始终为 <code>null</code>。</p>

@return 返回的系统标识符始终为 <code>null</code>。

<!-- END DATA -->
