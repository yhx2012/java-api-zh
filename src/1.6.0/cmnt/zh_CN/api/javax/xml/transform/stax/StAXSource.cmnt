<!-- BEGIN KEY -->
public class javax.xml.transform.stax.StAXSource extends java.lang.Object implements javax.xml.transform.Source
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>以 StAX reader 的形式（即 {@link XMLStreamReader} 或 {@link XMLEventReader}）充当 XML {@link Source} 的持有者。各种接受 <code>Source</code> 的情况下都可以使用 <code>StAXSource</code>，例如，将 <code>Source</code> 作为输入接受的 {@link javax.xml.transform.Transformer} 和 {@link javax.xml.validation.Validator}。


<p>在处理期间使用 <code>StAXSource</code> 并且不能重复使用。</p>

@author <a href="mailto:Neeraj.Bajaj@Sun.com">Neeraj Bajaj</a>
@author <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
@version $Revision: 1.3 $, $Date: 2006-10-23 09:14:17 $

@see <a href="http://jcp.org/en/jsr/detail?id=173">JSR 173:Streaming API for XML</a>
@see XMLStreamReader
@see XMLEventReader

@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.stax.StAXSource.FEATURE
<!-- END KEY -->
<!-- BEGIN DATA -->
当将此值作为参数传递时，如果 {@link javax.xml.transform.TransformerFactory#getFeature(String name)} 返回 true，则 Transformer 支持此类型的 Source 输入。

<p>在处理期间使用 <code>StAXSource</code> 并且不能重复使用。</p>

@author <a href="mailto:Neeraj.Bajaj@Sun.com">Neeraj Bajaj</a>
@author <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
@version $Revision: 1.3 $, $Date: 2006-10-23 09:14:17 $

@see <a href="http://jcp.org/en/jsr/detail?id=173">JSR 173:Streaming API for XML</a>
@see XMLStreamReader
@see XMLEventReader

@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.stax.StAXSource.FEATURE
<!-- END KEY -->
<!-- BEGIN DATA -->
当将此值作为参数传递时，如果 {@link javax.xml.transform.TransformerFactory#getFeature(String name)} 返回 true，则 Transformer 支持此类型的 Source 输入。


<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stax.StAXSource(XMLEventReader xmlEventReader) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>通过提供 {@link XMLEventReader} 创建 <code>StAXSource</code> 的一个新实例。</p>

<p><code>XMLEventReader</code> 必须为非 <code>null</code> 引用。</p>

<p><code>XMLEventReader</code> 必须处于 {@link XMLStreamConstants#START_DOCUMENT} 或 {@link XMLStreamConstants#START_ELEMENT} 状态。</p>

@param xmlEventReader 用于创建此 <code>StAXSource</code> 的 <code>XMLEventReader</code>。

@throws XMLStreamException 如果 <code>xmlEventReader</code> 访问抛出 <code>Exception</code>。
@throws IllegalArgumentException 如果 <code>xmlEventReader</code> == <code>null</code>。
@throws IllegalStateException 如果 <code>xmlEventReader</code> 不处于 <code>XMLStreamConstants.START_DOCUMENT</code> 或 <code>XMLStreamConstants.START_ELEMENT</code> 状态。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stax.StAXSource(XMLStreamReader xmlStreamReader)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>通过 {@link XMLStreamReader} 创建 <code>StAXSource</code> 的一个新实例。</p>

<p><code>XMLStreamReader</code> 必须为非 <code>null</code> 引用。</p>

<p><code>XMLStreamReader</code> 必须处于 {@link XMLStreamConstants#START_DOCUMENT} 或 {@link XMLStreamConstants#START_ELEMENT} 状态。</p>

@param xmlStreamReader 用于创建此 <code>StAXSource</code> 的 <code>XMLStreamReader</code>。

@throws IllegalArgumentException 如果 <code>xmlStreamReader</code> == <code>null</code>。
@throws IllegalStateException 如果 <code>xmlStreamReader</code> 不处于 <code>XMLStreamConstants.START_DOCUMENT</code> 或 <code>XMLStreamConstants.START_ELEMENT</code> 状态。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.stream.XMLEventReader javax.xml.transform.stax.StAXSource.getXMLEventReader()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取此 <code>StAXSource</code> 使用的 <code>XMLEventReader</code>。</p>

<p>如果此 <code>StAXSource</code> 是使用 <code>XMLStreamReader</code> 创建的，那么 <code>XMLEventReader</code> 将为 <code>null</code>。</p>

@return 此 <code>StAXSource</code> 使用的 <code>XMLEventReader</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.stream.XMLStreamReader javax.xml.transform.stax.StAXSource.getXMLStreamReader()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取此 <code>StAXSource</code> 使用的 <code>XMLStreamReader</code>。</p>

<p>如果此 <code>StAXSource</code> 是使用 <code>XMLEventReader</code> 创建的，那么 <code>XMLStreamReader</code> 将为 <code>null</code>。</p>

@return 此 <code>StAXSource</code> 使用的 <code>XMLStreamReader</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.stax.StAXSource.setSystemId(String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>在 <code>StAXSource</code> 的上下文中，它不适合显示设置系统标识符。用于构造此 <code>StAXSource</code> 的 <code>XMLStreamReader</code> 或 <code>XMLEventReader</code> 确定 XML 源的系统标识符。</p>

<p>此方法<strong>始终</strong>抛出 {@link UnsupportedOperationException}。</p>

@param systemId 忽略。

@throws UnsupportedOperationException 此方法<strong>始终</strong>抛出该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.transform.stax.StAXSource.getSystemId()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取此 <code>StAXSource</code> 使用的系统标识符。</p>

<p>查询用于构造此 <code>StAXSource</code> 的 <code>XMLStreamReader</code> 或 <code>XMLEventReader</code> 以确定 XML 源的系统标识符。</p>

<p>系统标识符可以为 <code>null</code> 或空 <code>&quot;&quot;</code> <code>String</code>。</p>

@return 此 <code>StAXSource</code> 使用的系统标识符。

<!-- END DATA -->
