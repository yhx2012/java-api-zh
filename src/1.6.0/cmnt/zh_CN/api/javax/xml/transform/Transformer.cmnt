<!-- BEGIN KEY -->
public abstract class javax.xml.transform.Transformer extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
此抽象类的实例能够将源树转换为结果树。

<p>可以通过 {@link TransformerFactory#newTransformer TransformerFactory.newTransformer} 方法获取此类的实例。然后可以使用此实例处理来自不同源的 XML，并将转换输出写入各种接收器。</p>

<p>在多线程同时运行时不能使用此类的对象。不同线程可以同时使用不同的 Transformers。</p>

<p><code>Transformer</code> 可以多次使用。可以在转换之间保留参数和输出属性。</p>

@author <a href="Jeff.Suttor@Sun.com">Jeff Suttor</a>
@version $Revision: 1.3 $, $Date: 2006-09-14 09:54:17 $

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.xml.transform.Transformer()
<!-- END KEY -->
<!-- BEGIN DATA -->
默认构造方法受到有意保护。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.Transformer.reset()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>将此 <code>Transformer</code> 重置为其初始配置。</p>
 
<p><code>Transformer</code> 被重置为通过 {@link TransformerFactory#newTransformer()}、{@link TransformerFactory#newTransformer(Source source)} 或 {@link Templates#newTransformer()} 创建它时的状态。<code>reset()</code> 的设计目标是允许重用现有 <code>Transformer</code>，以节省与创建新 <code>Transformer</code> 有关的资源。</p>
 
<p>不保证重置的 <code>Transformer</code> 具有相同的 {@link URIResolver} 或 {@link ErrorListener} <code>Object</code>，例如 {@link Object#equals(Object obj)}。但保证具有功能相同的 <code>URIResolver</code> 和 <code>ErrorListener</code>。</p>

@throws UnsupportedOperationException 当实现不能重写此方法时。
 
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.transform.Transformer.transform(Source xmlSource, Result outputTarget) throws javax.xml.transform.TransformerException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>将 XML <code>Source</code> 转换为 <code>Result</code>。当实例化 <code>Transformer</code> 和对 <code>Transformer</code> 实例进行任何修改时，指定的转换行为由 <code>TransformerFactory</code> 的实际设置决定。</p>

<p>空 <code>Source</code> 表示为由 {@link javax.xml.parsers.DocumentBuilder#newDocument()} 构造的空文档。空 <code>Source</code> 的转换结果取决于转换行为；结果不总为空 <code>Result</code>。</p>

@param xmlSource 要转换的 XML 输入。
@param outputTarget 转换 <code>xmlSource</code> 的 <code>Result</code>。

@throws TransformerException 如果转换过程中发生不可恢复的错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.transform.Transformer.setParameter(String name, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加一个转换参数。

<p>以两部分字符串形式传递限定名称，即用花括号括起来的名称空间 URI，后跟本地名称。如果名称中有 null URL，则 String 只包含本地名称。应用程序可以通过测试安全地检查非 null URI，以查看名称的首字符是否为 '{' 字符。</p>
<p>例如，如果 URI 和本地名称是从通过 &lt;xyz:foo xmlns:xyz=&quot;http://xyz.foo.com/yada/baz.html&quot;/&gt; 定义的元素获取的，则限定名称将为 &quot;{http://xyz.foo.com/yada/baz.html}foo&quot;。注意，不使用前缀。</p>

@param name 参数名称，它可以以花括号（{}）中的名称空间 URI 开始。
@param value 值对象。它可以为任何有效的 Java 对象。处理器负责提供正确的对象 coersion，或只传递在扩展中使用的对象。

@throws NullPointerException 如果值为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.Object javax.xml.transform.Transformer.getParameter(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取通过 setParameter 显式设置的参数。

<p>此方法不返回默认参数值，默认参数值直到在转换过程中计算了节点上下文后才能确定。

@param name 要获取的 <code>Object</code>
@return 已通过 setParameter 设置的参数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.transform.Transformer.clearParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->
清除所有通过 setParameter 设置的参数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.transform.Transformer.setURIResolver(URIResolver resolver)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置将用于解析在 document() 中使用的 URI 的对象。

<p>如果解析器参数为 null，则将清除 URIResolver 值，且转换器将不再拥有解析器。</p>

@param resolver 实现 URIResolver 接口的对象，或为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.transform.URIResolver javax.xml.transform.Transformer.getURIResolver()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取将用于解析在 document() 中使用的 URI 的对象。

@return 实现 URIResolver 接口的对象，或返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.transform.Transformer.setOutputProperties(Properties oformat)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置转换的输出属性。这些属性将重写通过 xsl:output 在 Templates 中设置的属性。

<p>如果此函数的参数为 null，则移除任何以前设置的属性，且值将恢复为 templates 对象中定义的值。</p>

<p>以两部分字符串形式传递限定属性，即用花括号括起来的名称空间 URI，后跟本地名称。如果名称中有 null URL，则 String 只包含本地名称。应用程序可以通过测试安全地检查非 null URI，以查看名称的首字符是否为 '{' 字符。</p>
<p>例如，如果 URI 和本地名称是从通过 &lt;xyz:foo xmlns:xyz=&quot;http://xyz.foo.com/yada/baz.html&quot;/&gt; 定义的元素获取的，则限定名称将为 &quot;{http://xyz.foo.com/yada/baz.html}foo&quot;。注意，不使用前缀。</p>
如果任何参数键不能被识别且不是名称空间限定的，则抛出 <code>IllegalArgumentException</code>。

@param oformat 将用于重写在实际转换中任何相同属性的输出属性集。

@throws IllegalArgumentException 当键无法识别且不是限定于名称空间的键时。

@see javax.xml.transform.OutputKeys
@see java.util.Properties

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Properties javax.xml.transform.Transformer.getOutputProperties()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取转换的输出属性的副本。</p>

<p>返回的属性应包含由用户设置的属性，以及通过样式表设置的属性，且这些属性将 <a href="http://www.w3.org/TR/xslt#output">section 16 of the XSL Transformations (XSLT) W3C Recommendation</a> 指定的默认属性作为&ldquo;默认值&rdquo;。由用户或通过样式表特定设置的属性应位于基本 Properties 列表中，而未特定设置的 XSLT 默认属性应位于默认的 Properties 列表中。因此，getOutputProperties().getProperty(String key) 将包含通过 {@link #setOutputProperty}、{@link #setOutputProperties} 设置的任何属性，或者在样式表<em>或</em> 默认属性中设置的任何属性，而 getOutputProperties().get(String key) 将只检索通过 {@link #setOutputProperty}、{@link #setOutputProperties} 显式设置的属性，或在样式表中显式设置的属性。</p>

<p>注意返回的 Properties 对象的变化将不影响转换器所包含的属性。</p>

<p>如果任何参数键不能被识别且不是名称空间限定的键，则属性将被忽略且不返回。换句话说，行为与 {@link #setOutputProperties setOutputProperties} 无关。</p>

@return 下一个实际转换中的输出属性集的副本。

@see javax.xml.transform.OutputKeys
@see java.util.Properties
@see <a href="http://www.w3.org/TR/xslt#output">XSL Transformations (XSLT) Version 1.0</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.transform.Transformer.setOutputProperty(String name, String value) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置转换中实际的输出属性。

<p>以两部分字符串形式传递限定属性名称，即用花括号括起来的名称空间 URI，后跟本地名称。如果名称中有 null URL，则 String 只包含本地名称。应用程序可以通过测试安全地检查非 null URI，以查看名称的首字符是否为 '{' 字符。</p>
<p>例如，如果 URI 和本地名称是从通过 &lt;xyz:foo xmlns:xyz=&quot;http://xyz.foo.com/yada/baz.html&quot;/&gt; 定义的元素获取的，则限定名称将为 &quot;{http://xyz.foo.com/yada/baz.html}foo&quot;。注意，不使用前缀。</p>

<p>传递给 {@link #setOutputProperties} 的 Properties 对象不会受到调用此方法的影响。</p>

@param name 指定了输出属性名称的非 null String，它可以是名称空间限定的。
@param value 输出属性的非 null 字符串值。

@throws IllegalArgumentException 如果不支持属性，且该属性没有限定于某一名称空间。

@see javax.xml.transform.OutputKeys

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String javax.xml.transform.Transformer.getOutputProperty(String name) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取对转换器有效的输出属性。</p>

<p>如果已经使用 {@link #setOutputProperty} 设置了属性，则返回所设置的值。如果在样式表中显式地指定了属性，则返回所指定的值。如果使用默认属性值，即没有使用 {@link #setOutputProperty} 或在样式表中显式地设置了任何值，则结果将随实现以及输入样式表而改变。</p>

@param name 指定了输出属性名称的非 null String，它可以是名称空间限定的。

@return 输出属性的字符串值，如果找不到属性，则返回 null。

@throws IllegalArgumentException 如果不支持属性。

@see javax.xml.transform.OutputKeys

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.transform.Transformer.setErrorListener(ErrorListener listener) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置转换的实际错误事件侦听器。

@param listener 新错误侦听器。
@throws IllegalArgumentException 如果侦听器为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.transform.ErrorListener javax.xml.transform.Transformer.getErrorListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取转换的实际错误事件处理程序。实现必须提供默认错误侦听器。

@return 当前错误处理程序，它永远不应为 null。

<!-- END DATA -->
