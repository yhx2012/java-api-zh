<!-- BEGIN KEY -->
javax.xml.transform.dom
<!-- END KEY -->
<!-- BEGIN DATA -->

<p>此包实现特定于 DOM 的转换 API。</p>
<p>{@link javax.xml.transform.dom.DOMSource} 类允许实现此 API 的客户端将 DOM {@link org.w3c.dom.Node} 指定为输入树的源。Transformer 如何处理与 <A href="http://www.w3.org/TR/xslt#data-model">XSLT 数据模型</A> 或其他数据模型不匹配的 DOM 树的模型超出了本文档的讨论范围。从 {@link org.w3c.dom.Node} 派生的任何节点均是合法输入。</p>
<p>{@link javax.xml.transform.dom.DOMResult} 类允许指定 {@link org.w3c.dom.Node}，其中结果 DOM 节点将被追加到 {@link org.w3c.dom.Node}。如果未指定输出节点，则转换器将使用 {@link javax.xml.parsers.DocumentBuilder#newDocument} 来创建输出 {@link org.w3c.dom.Document} 节点。如果指定了节点，则它应为以下之一：{@link org.w3c.dom.Document}、{@link org.w3c.dom.Element} 或 {@link org.w3c.dom.DocumentFragment}。任何其他节点类型规范均与实现有关且未由此 API 定义。如果结果为 {@link org.w3c.dom.Document}，则转换的输出必须具有一个设置为文档元素的单个元素根。</p>
<p>可以将 {@link javax.xml.transform.dom.DOMLocator} 节点传递到 {@link javax.xml.transform.TransformerException} 对象，并可以通过尝试强制转换 {@link javax.xml.transform.TransformerException#getLocator()} 方法的结果来检索它。实现不负责使用 DOMLocator 来替代 {@link javax.xml.transform.SourceLocator}（通过行数且这种可能性对于 DOM 无太大意义），因此必须总是通过 instanceof 来测试 getLocator 的结果。</p>

<!-- END DATA -->
