<!-- BEGIN KEY -->
public class javax.xml.transform.stream.StreamResult extends java.lang.Object implements javax.xml.transform.Result
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>充当转换结果的持有者，可以为 XML、纯文本、HTML 或某些其他格式的标记。</p>

@author <a href="Jeff.Suttor@Sun.com">Jeff Suttor</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.stream.StreamResult.FEATURE
<!-- END KEY -->
<!-- BEGIN DATA -->
当将此值作为参数传递时，如果 {@link javax.xml.transform.TransformerFactory#getFeature} 返回 true，则 Transformer 支持此类型的 Result 输出。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stream.StreamResult()
<!-- END KEY -->
<!-- BEGIN DATA -->
零参数的默认构造方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stream.StreamResult(OutputStream outputStream)
<!-- END KEY -->
<!-- BEGIN DATA -->
从字节流构造 StreamResult。通常，应使用流而不是 reader，以便转换器可以使用转换指令中包含的指令来控制编码。

@param outputStream 有效的 OutputStream 引用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stream.StreamResult(Writer writer)
<!-- END KEY -->
<!-- BEGIN DATA -->
从字符流构造 StreamResult。通常，应使用流而不是 reader，以便转换器可以使用转换指令中包含的指令来控制编码。但是，有时写入字符流是很有用的，例如当使用 StringWriter 时。

@param writer  有效的 Writer 引用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stream.StreamResult(String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
从 URL 构造 StreamResult。

@param systemId 必须为遵守 URI 语法的 String。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stream.StreamResult(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
从 File 构造 StreamResult。

@param f 必须为非 null File 引用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.stream.StreamResult.setOutputStream(OutputStream outputStream)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置要写入的 ByteStream。通常，应使用流而不是 reader，以便转换器可以使用转换指令中包含的指令来控制编码。

@param outputStream 有效的 OutputStream 引用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.OutputStream javax.xml.transform.stream.StreamResult.getOutputStream()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取通过 setOutputStream 设置的字节流。

@return 通过 setOutputStream 设置的字节流，如果未调用 setOutputStream 或 ByteStream 构造方法，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.stream.StreamResult.setWriter(Writer writer)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置要接收结果的 writer。通常，应使用流而不是 writer，以便转换器可以使用转换指令中包含的指令来控制编码。但是，有时写入 writer 是很有用的，例如当使用 StringWriter 时。

@param writer  有效的 Writer 引用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Writer javax.xml.transform.stream.StreamResult.getWriter()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取通过 setWriter 设置的字符流。

@return 通过 setWriter 设置的字符流，如果未调用 setWriter 或 Writer 构造方法，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.stream.StreamResult.setSystemId(String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置可以与字节流或字符流关联使用的 systemID，如果未设置，则使用此值作为 writeable URI（可能是文件名）。

@param systemId URI 字符串形式的系统标识符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.stream.StreamResult.setSystemId(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>设置来自 <code>File</code> 引用的系统 ID。</p>
 
@param f 必须为非 null File 引用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.transform.stream.StreamResult.getSystemId()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取通过 setSystemId 设置的系统标识符。

@return 通过 setSystemId 设置的系统标识符，如果未调用 setSystemId，则返回 null。

<!-- END DATA -->
