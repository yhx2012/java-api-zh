<!-- BEGIN KEY -->
public class javax.xml.transform.stream.StreamSource extends java.lang.Object implements javax.xml.transform.Source
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>以 XML 标记流的形式充当转换 Source 的持有者。</p>

<p><em>注：</em> 由于内部使用了 {@link Reader} 或 {@link InputStream} 实例的缘故，<code>StreamSource</code> 实例只能使用一次。</p>

@author <a href="Jeff.Suttor@Sun.com">Jeff Suttor</a>
@version $Revision: 1.2 $, $Date: 2006-08-31 06:56:20 $

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.stream.StreamSource.FEATURE
<!-- END KEY -->
<!-- BEGIN DATA -->
当将此值作为参数传递时，如果 {@link javax.xml.transform.TransformerFactory#getFeature} 返回 true，则 Transformer 支持此类型的 Source。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stream.StreamSource()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>零参数的默认构造方法。如果使用了此构造方法，且未使用 {@link #setInputStream(java.io.InputStream inputStream)} 或 {@link #setReader(java.io.Reader reader)} 设置 Stream 源，则 <code>Transformer</code> 将使用 {@link java.io.InputStream#InputStream() new InputStream()} 创建空的源 {@link java.io.InputStream}。</p>
 
@see javax.xml.transform.Transformer#transform(Source xmlSource, Result outputTarget)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stream.StreamSource(InputStream inputStream)
<!-- END KEY -->
<!-- BEGIN DATA -->
从字节流构造 StreamSource。通常，应使用流而不是 reader，以便 XML 解析器可以解析 XML 声明所指定的字符编码。

<p>如果此构造方法用于处理 stylesheet，通常还应调用 setSystemId，以便可以解析相对 URI 引用。</p>

@param inputStream 对 XML 流的有效 InputStream 引用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stream.StreamSource(InputStream inputStream, String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
从字节流构造 StreamSource。通常，应使用流而不是 reader，以便 XML 解析器可以解析 XML 声明所指定的字符编码。

<p>此构造方法除允许设置输入流外，还允许设置 systemID，从而允许处理相对 URI。</p>

@param inputStream 对 XML 流的有效 InputStream 引用。
@param systemId 必须为遵守 URI 语法的 String。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stream.StreamSource(Reader reader)
<!-- END KEY -->
<!-- BEGIN DATA -->
从字符 reader 构造 StreamSource。通常，应使用流而不是 reader，以便 XML 解析器可以解析 XML 声明所指定的字符编码。但是，许多情况下输入流编码已得到解析，例如从 StringReader 读取 XML 的情况。

@param reader 对 XML 字符流的有效 Reader 引用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stream.StreamSource(Reader reader, String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
从字符 reader 构造 StreamSource。通常，应使用流而不是 reader，以便 XML 解析器可以解析 XML 声明所指定的字符编码。但是，许多情况下输入流编码已得到解析，例如从 StringReader 读取 XML 的情况。

@param reader 对 XML 字符流的有效 Reader 引用。
@param systemId 必须为遵守 URI 语法的 String。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stream.StreamSource(String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
从 URL 构造 StreamSource。

@param systemId 必须为遵守 URI 语法的 String。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stream.StreamSource(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
从 File 构造 StreamSource。

@param f 必须为非 null File 引用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.stream.StreamSource.setInputStream(InputStream inputStream)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置要用作输入的字节流。通常，应使用流而不是 reader，以便 XML 解析器可以解析 XML 声明所指定的字符编码。

<p>如果此 Source 对象用于处理 stylesheet，通常还应调用 setSystemId，以便可以解析相对 URL 引用。</p>

@param inputStream 对 XML 流的有效 InputStream 引用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream javax.xml.transform.stream.StreamSource.getInputStream()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取通过 setByteStream 设置的字节流。

@return 通过 setByteStream 设置的字节流，如果未调用 setByteStream 或 ByteStream 构造方法，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.stream.StreamSource.setReader(Reader reader)
<!-- END KEY -->
<!-- BEGIN DATA -->
调用要作为字符 reader 的输入。通常，应使用流而不是 reader，以便 XML 解析器可以解析 XML 声明所指定的字符编码。但是，许多情况下输入流编码已得到解析，例如从 StringReader 读取 XML 的情况。

@param reader 对 XML CharacterStream 的有效 Reader 引用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Reader javax.xml.transform.stream.StreamSource.getReader()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取通过 setReader 设置的字符流。

@return 通过 setReader 设置字符流，如果未调用 setReader 或 Reader 构造方法，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.stream.StreamSource.setPublicId(String publicId)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 Source 的公共标识符。

<p>公共标识符总是可选的：如果应用程序 writer 包含一个公共标识符，则它将作为本地信息的一部分来提供。</p>

@param publicId 字符串形式的公共标识符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.transform.stream.StreamSource.getPublicId()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取通过 setPublicId 设置的公共标识符。

@return 通过 setPublicId 设置的公共标识符，如果未调用 setPublicId，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.stream.StreamSource.setSystemId(String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 Source 的系统标识符。

<p>如果有字节流或字符流，则系统标识符是可选的，但提供系统标识符仍然很有用，因为应用程序可以用它来解析相对 URI，并可以将它包括在错误消息和警告中（仅当未指定字节流或字符流时，解析器才尝试打开到 URI 的连接）。</p>

@param systemId URL 字符串形式的系统标识符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.transform.stream.StreamSource.getSystemId()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取通过 setSystemId 设置的系统标识符。

@return 通过 setSystemId 设置的系统标识符，如果未调用 setSystemId，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.stream.StreamSource.setSystemId(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置来自 File 引用的系统 ID。

@param f 必须为非 null File 引用。

<!-- END DATA -->
