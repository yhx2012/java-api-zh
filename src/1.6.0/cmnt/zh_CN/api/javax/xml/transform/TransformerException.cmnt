<!-- BEGIN KEY -->
public class javax.xml.transform.TransformerException extends java.lang.Exception
<!-- END KEY -->
<!-- BEGIN DATA -->
此类指定了转换过程中发生的异常条件。
	
<!-- END DATA -->
<!-- BEGIN KEY -->
 javax.xml.transform.SourceLocator javax.xml.transform.TransformerException.locator
<!-- END KEY -->
<!-- BEGIN DATA -->
Field locator specifies where the error occured
<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.Throwable javax.xml.transform.TransformerException.containedException
<!-- END KEY -->
<!-- BEGIN DATA -->
containedException 字段指定了一个包装的异常。可以 null。
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.TransformerException(String message)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 TransformerException。

@param message 错误或警告消息。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.TransformerException(Throwable e)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个包装了现有异常的新 TransformerException。

@param e 要包装的异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.TransformerException(String message, Throwable e)
<!-- END KEY -->
<!-- BEGIN DATA -->
包装 TransformerException 中的一个现有异常。

<p>这用于在开始处理之前抛出处理器异常。</p>

@param message 错误或警告消息，当要使用来自嵌入异常的消息时为 null。
@param e 任何异常

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.TransformerException(String message, SourceLocator locator)
<!-- END KEY -->
<!-- BEGIN DATA -->
从消息和 Locator 创建一个新 TransformerException。

<p>当应用程序从 DocumentHandler 回调中创建其自己的异常时，此构造方法特别有用。</p>

@param message 错误或警告消息。
@param locator 错误或警告的定位符对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.TransformerException(String message, SourceLocator locator, Throwable e)
<!-- END KEY -->
<!-- BEGIN DATA -->
包装了 TransformerException 中的现有异常。

@param message 错误或警告消息，当要使用来自嵌入异常的消息时为 null。
@param locator 错误或警告的定位符对象。
@param e 任何异常

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.SourceLocator javax.xml.transform.TransformerException.getLocator()
<!-- END KEY -->
<!-- BEGIN DATA -->
getLocator 方法检索 SourceLocator 对象的实例，此对象指定了错误发生的位置。

@return SourceLocator 对象，如果未指定，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.TransformerException.setLocator(SourceLocator location)
<!-- END KEY -->
<!-- BEGIN DATA -->
setLocator 方法设置 SourceLocator 对象的实例，此对象指定了错误发生的位置。

@param location SourceLocator 对象，或为 null 以清除位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Throwable javax.xml.transform.TransformerException.getException()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法检索此异常所包装的异常。

@return Throwable 对象，或返回 null。
@see #getCause

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Throwable javax.xml.transform.TransformerException.getCause()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此抛出对象的原因，如果原因不存在或未知，则返回 <code>null</code>。（原因是抛出此抛出对象引起的抛出对象。）

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Throwable javax.xml.transform.TransformerException.initCause(Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此抛出对象的<i>原因</i> 初始化为指定值。（原因是抛出此抛出对象引起的抛出对象。）

<p>此方法至多可以调用一次。此方法通常从构造方法中调用，或者在创建抛出对象后立即调用。如果此抛出对象通过 {@link #TransformerException(Throwable)} 或 {@link #TransformerException(String,Throwable)} 创建，则此方法甚至一次也不能调用。

@param cause cause（保存此 cause，以便以后通过 {@link #getCause()} 方法检索它）。（允许 <code>null</code> 值，指出原因是不存在的或是未知的。）
@return  对此 <code>Throwable</code> 实例的引用。
@throws IllegalArgumentException 如果 <code>cause</code> 是此抛出对象。（抛出对象不能是它自己的原因。）
@throws IllegalStateException 如果此抛出对象通过 {@link #TransformerException(Throwable)} 或 {@link #TransformerException(String,Throwable)} 创建，或者此方法已经在此抛出对象上进行调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.transform.TransformerException.getMessageAndLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取带有追加的位置信息的错误消息。

@return 表示带有追加的位置信息的错误消息的 <code>String</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.transform.TransformerException.getLocationAsString()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取字符串形式的位置信息。

@return 带有位置信息的字符串，如果没有位置信息，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.TransformerException.printStackTrace()
<!-- END KEY -->
<!-- BEGIN DATA -->
打印从中产生错误的方法跟踪。这将跟踪所有嵌套的异常对象，包括此对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.TransformerException.printStackTrace(PrintStream s)
<!-- END KEY -->
<!-- BEGIN DATA -->
打印从中产生错误的方法跟踪。这将跟踪所有嵌套的异常对象，包括此对象。
@param s 将从中发送转储的流。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.TransformerException.printStackTrace(PrintWriter s)
<!-- END KEY -->
<!-- BEGIN DATA -->
打印从中产生错误的方法跟踪。这将跟踪所有嵌套的异常对象，包括此对象。
@param s 将从中发送转储的 writer。

<!-- END DATA -->
