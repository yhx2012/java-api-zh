<!-- BEGIN KEY -->
public interface javax.xml.stream.XMLEventWriter extends javax.xml.stream.util.XMLEventConsumer
<!-- END KEY -->
<!-- BEGIN DATA -->

此类是用于编写 XML 文档的顶层接口。此接口的实例不需要验证 XML 的格式。  

@version 1.0
@author Copyright (c) 2003 by BEA Systems.All Rights Reserved.
@see XMLEventReader
@see javax.xml.stream.events.XMLEvent
@see javax.xml.stream.events.Characters
@see javax.xml.stream.events.ProcessingInstruction
@see javax.xml.stream.events.StartElement
@see javax.xml.stream.events.EndElement
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.stream.XMLEventWriter.flush() throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
将所有缓存事件写入到底层输出机制。
@throws XMLStreamException

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.stream.XMLEventWriter.close() throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
释放所有与此流关联的资源。
@throws XMLStreamException

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.stream.XMLEventWriter.add(XMLEvent event) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
向输出流添加事件。添加 START_ELEMENT 将打开新的名称空间作用域，它将在写入相应的 END_ELEMENT 时被关闭。
 <table border="2" rules="all" cellpadding="4">
   <thead>
     <tr>
       <th align="center" colspan="2">
添加到 writer 的事件的必需字段和可选字段
       </th>
     </tr>
   </thead>
   <tbody>
     <tr>
<th>事件类型</th>
<th>必需字段</th>
<th>可选字段</th>
<th>必需行为</th>
     </tr>
     <tr>
<td> START_ELEMENT</td>
<td> QName name </td>
<td> namespace、attribute</td>
<td> 通过用 XML 1.0 中对 START_ELEMENT 有效的语法写入事件的名称、名称空间和属性来编写 START_ELEMENT。名称是通过查找名称空间 URI 的前缀写入的。writer 可以配置为考虑 QName 的前缀。如果 writer 考虑前缀，则它必须使用在 QName 中设置的前缀。默认行为是在 EventWriter 的内部名称空间上下文中查找前缀的值。每个属性（如果有）使用在此表的属性部分所指定的行为写入。每个名称空间（如果有）使用在此表的名称空间部分所指定的行为写入。 
       </td>
     </tr>
     <tr>
<td> END_ELEMENT  </td>
<td> Qname name  </td>
<td> 无</td>
<td> 写入一个格式良好的 END_ELEMENT 标记。名称是通过查找名称空间 URI 的前缀写入的。writer 可以配置为考虑 QName 的前缀。如果 writer 考虑前缀，则它必须使用在 QName 中设置的前缀。默认行为是在 EventWriter 的内部名称空间上下文中查找前缀的值。如果 END_ELEMENT 名称和 START_ELEMENT 名称不匹配，则抛出 XMLStreamException。
       </td>
     </tr>
     <tr>
<td> ATTRIBUTE  </td>
<td> QName name、String value</td>
<td> QName type </td>
<td> 使用同样的算法写入属性，以根据 START_ELEMENT 中使用的词法查找词法格式。默认行为是使用双引号将属性值括起来并转义出现在值中的所有双引号。类型值被忽略。
       </td>
     </tr>
     <tr>
<td> NAMESPACE  </td>
<td> String prefix、String namespaceURI、boolean isDefaultNamespaceDeclaration
      </td>
<td> 无</td>
<td> 写入一个名称空间声明。如果名称空间是默认名称空间声明（isDefault 为 true），则写入 xmlns=&quot;$namespaceURI&quot;，前缀是可选项。如果 isDefault 为 false，则必须声明前缀，writer 必须将 xmlns 附加为前缀并写出一个标准前缀声明。
      </td>
     </tr>
     <tr>
<td> PROCESSING_INSTRUCTION</td>
<td>   无</td>
<td>   String target、String data</td>
<td>   数据不需要附加前缀，可以为 null。目标是必需的，不可以为 null。writer 将直接在目标之后编写数据部分，并用合适的 XML 1.0 语法封闭起来
      </td>
     </tr>
     <tr>
<td> COMMENT  </td>
<td> 无</td>
<td> String comment  </td>
<td> 如果存在注释（不为 null），则写入该注释，否则写入一个空注释
      </td>
     </tr>
     <tr>
<td> START_DOCUMENT</td>
<td> 无</td>
<td> String encoding、boolean standalone、String version  </td>
<td> 不需要将 START_DOCUMENT 事件写入流。如果存在，则属性以适当的 XML 声明语法写入
      </td>
     </tr>
     <tr>
<td> END_DOCUMENT  </td>
<td> 无</td>
<td> 无</td>
<td> 不向输出写入任何内容</td>
     </tr>
     <tr>
<td> DTD</td>
<td> String DocumentTypeDefinition  </td>
<td> 无</td>
<td> DocumentTypeDefinition 被写入输出</td>
     </tr>
   </tbody>
 </table>
@param event 要被添加的事件
@throws XMLStreamException

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.stream.XMLEventWriter.add(XMLEventReader reader) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
将整个流添加到输出流，在 hasNext() 返回 false 前对 inputStream 参数调用 next()。此方法应被视为一个便捷方法，它将在事件 reader 中的所有事件中执行以下循环，并对每个事件上调用 add。

@param reader 要添加到输出的事件流
@throws XMLStreamException

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.stream.XMLEventWriter.getPrefix(String uri) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取绑定 URI 的前缀。
@param uri 要查找的 URI
@throws XMLStreamException

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.stream.XMLEventWriter.setPrefix(String prefix, String uri) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置绑定 URI 的前缀。前缀在当前 START_ELEMENT / END_ELEMENT 对的范围内绑定。如果在写入 START_ELEMENT 之前调用此方法，则前缀在根范围内绑定。
@param prefix 要绑定到 URI 的前缀
@param uri 要绑定到前缀的 URI
@throws XMLStreamException

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.stream.XMLEventWriter.setDefaultNamespace(String uri) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 URI 绑定到默认名称空间。此 URI 在当前 START_ELEMENT / END_ELEMENT 对的范围内绑定。如果在写入 START_ELEMENT 之前调用此方法，则 URI 在根范围内绑定。
@param uri 要绑定到默认名称空间的 URI
@throws XMLStreamException

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.stream.XMLEventWriter.setNamespaceContext(NamespaceContext context) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置前缀的当前名称空间上下文和 URI 绑定。此上下文成为用于写入的根名称空间上下文，并将替换当前的根名称空间上下文。对 setPrefix 和 setDefaultNamespace 的后续调用将使用作为解析名称空间的根上下文传递到此方法的上下文来绑定名称空间。
@param context 要用于此 writer 的名称空间上下文
@throws XMLStreamException

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.namespace.NamespaceContext javax.xml.stream.XMLEventWriter.getNamespaceContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前名称空间上下文。
@return 当前名称空间上下文

<!-- END DATA -->


