<!-- BEGIN KEY -->
public abstract class javax.xml.stream.XMLOutputFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
定义用于获取 XMLEventWriter 和 XMLStreamWriter 的工厂抽象实现。下表定义此规范的标准属性。每个属性随每个实现所要求的支持级别的不同而不同。所要求的支持级别在&ldquo;必需&rdquo;栏中做了描述。

     <table border="2" rules="all" cellpadding="4">
     <thead>
      <tr>
        <th align="center" colspan="2">
配置参数
        </th>
      </tr>
    </thead>
    <tbody>
      <tr>
<th>属性名</th>
<th>行为</th>
<th>返回类型</th>
<th>默认值</th>
<th>必需</th>
              </tr>
<tr><td>javax.xml.stream.isRepairingNamespaces</td><td>默认输出端前缀</td><td>Boolean</td><td>False</td><td>是</td></tr>
      </tbody>
   </table>

<p>以下段落描述了名称空间和前缀修复算法：</p>

<p>属性可以使用以下代码行进行设置：<code>setProperty(&quot;javax.xml.stream.isRepairingNamespaces&quot;,new Boolean(true|false));</code></p>
 
<p>此属性指定 writer 默认名称空间前缀声明。默认值为 false。 </p>

<p>如果 writer 是 RepairingNamespaces，则对于任何当前在范围内不具有名称空间声明的属性，它都将在当前的 StartElement 上创建名称空间声明。如果 StartElement 具有 URI，但没有指定前缀，则为其分配一个前缀；如果前缀未在当前 StartElement 的父级中声明，则它将在当前的 StartElement 上声明。如果 defaultNamespace 被绑定，而且在范围内默认名称空间与属性的 URI 或 StartElement QName 相匹配，则不分配任何前缀。</p>

<p>如果元素或属性名称具有前缀，但没有绑定到任何名称空间 URI，则前缀将在序列化时被删除。</p> 

<p>如果同一个开始或空元素标记中的元素和/或属性名称被绑定到不同的名称空间 URI，而且使用相同的前缀，则元素或第一个出现的属性将保留原始前缀，而在它之后的属性将用绑定到这些属性名称空间 URI 的新前缀替换它们的前缀。 </p>

<p>如果元素或属性名称使用一个绑定到 URI 的前缀，而该 URI 不是从该元素父级的名称空间上下文中继承的，并且在当前元素的上下文中没有名称空间声明，那么将添加一个这样的名称空间声明。 </p>

<p>如果元素或属性名称被绑定到一个前缀，而且有一个将此前缀绑定到不同 RUI 的名称空间声明，那么该名称空间声明将被删除（如果从该元素的父上下文中继承了正确的映射），或者被更改为使用该前缀的元素或属性的名称空间 URI。</p> 

@version 1.0
@author Copyright (c) 2003 by BEA Systems.All Rights Reserved.
@see XMLInputFactory
@see XMLEventWriter
@see XMLStreamWriter
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.stream.XMLOutputFactory.IS_REPAIRING_NAMESPACES
<!-- END KEY -->
<!-- BEGIN DATA -->

用于设置输出端上默认前缀的属性。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.stream.XMLOutputFactory javax.xml.stream.XMLOutputFactory.newInstance() throws javax.xml.stream.FactoryConfigurationError
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的工厂实例。
@throws FactoryConfigurationError 如果此工厂的实例无法加载

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.stream.XMLInputFactory javax.xml.stream.XMLOutputFactory.newInstance(String factoryId, ClassLoader classLoader) throws javax.xml.stream.FactoryConfigurationError
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个的新工厂实例。 

@param factoryId  要查找的工厂的名称，与属性名称相同
@param classLoader 要使用的类加载器
@return 工厂实现
@throws FactoryConfigurationError 如果此工厂的实例无法加载

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamWriter javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(Writer stream) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个写入到 writer 的新 XMLStreamWriter。
@param stream 要向其写入 XMLStreamWriter 的 writer
@throws XMLStreamException

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamWriter javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(OutputStream stream) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个写入到流的新 XMLStreamWriter。
@param stream 要向其写入 XMLStreamWriter 的流
@throws XMLStreamException

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamWriter javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(OutputStream stream, String encoding) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个写入到流的新 XMLStreamWriter。
@param stream 要向其写入 XMLStreamWriter 的流
@param encoding 要使用的编码
@throws XMLStreamException

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamWriter javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(Result result) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个写入到 JAXP 结果的新 XMLStreamWriter。此方法是可选的。
@param result 要向其写入 XMLStreamWriter 的结果
@throws UnsupportedOperationException 如果此 XMLOutputFactory 不支持此方法
@throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventWriter javax.xml.stream.XMLOutputFactory.createXMLEventWriter(Result result) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个写入到 JAXP 结果的新 XMLEventWriter。此方法是可选的。
@param result 要向其写入 XMLEventWriter 的结果
@throws UnsupportedOperationException 如果此 XMLOutputFactory 不支持此方法
@throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventWriter javax.xml.stream.XMLOutputFactory.createXMLEventWriter(OutputStream stream) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个写入到流的新 XMLEventWriter。
@param stream 要向其写入 XMLEventWriter 的流
@throws XMLStreamException

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventWriter javax.xml.stream.XMLOutputFactory.createXMLEventWriter(OutputStream stream, String encoding) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个写入到流的新 XMLEventWriter。
@param stream 要向其写入 XMLEventWriter 的流
@param encoding 要使用的编码
@throws XMLStreamException

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventWriter javax.xml.stream.XMLOutputFactory.createXMLEventWriter(Writer stream) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个写入到 writer 的新 XMLEventWriter。
@param stream 要向其写入 XMLEventWriter 的流
@throws XMLStreamException

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.stream.XMLOutputFactory.setProperty(String name, Object value) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
允许用户在底层实现上设置特定功能/属性。
@param name 属性的名称
@param value 属性的值
@throws java.lang.IllegalArgumentException 如果属性不受支持

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.Object javax.xml.stream.XMLOutputFactory.getProperty(String name) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取底层实现上的功能/属性
@param name 属性的名称
@return 属性的值
@throws java.lang.IllegalArgumentException 如果属性不受支持

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.xml.stream.XMLOutputFactory.isPropertySupported(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
查询此工厂支持的属性集合。

@param name 属性的名称（不可以为 null）
@return 如果此属性受支持，则返回 true，否则返回 false

<!-- END DATA -->
