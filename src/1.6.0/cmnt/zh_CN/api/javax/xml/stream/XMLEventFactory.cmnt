<!-- BEGIN KEY -->
public abstract class javax.xml.stream.XMLEventFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
此接口定义一个创建 XMLEvent 实例的实用工具类。
@version 1.0
@author Copyright (c) 2003 by BEA Systems.All Rights Reserved.
@see javax.xml.stream.events.StartElement
@see javax.xml.stream.events.EndElement
@see javax.xml.stream.events.ProcessingInstruction
@see javax.xml.stream.events.Comment
@see javax.xml.stream.events.Characters
@see javax.xml.stream.events.StartDocument
@see javax.xml.stream.events.EndDocument
@see javax.xml.stream.events.DTD
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.stream.XMLEventFactory javax.xml.stream.XMLEventFactory.newInstance() throws javax.xml.stream.FactoryConfigurationError
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的工厂实例。
@throws FactoryConfigurationError 如果无法加载此工厂的实例

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.stream.XMLEventFactory javax.xml.stream.XMLEventFactory.newInstance(String factoryId, ClassLoader classLoader) throws javax.xml.stream.FactoryConfigurationError
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的工厂实例。

@param factoryId  要查找的工厂的名称，与属性名称相同
@param classLoader 要使用的类加载器
@return 工厂实现
@throws FactoryConfigurationError 如果此工厂的实例无法加载

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.stream.XMLEventFactory.setLocation(Location location)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法允许对此工厂创建的每个事件设置 Location。这些值被复制到此工厂创建的事件中。若要重置位置信息，可将 location 设置为 null。
@param location 要对每个创建的事件设置的位置

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.Attribute javax.xml.stream.XMLEventFactory.createAttribute(String prefix, String namespaceURI, String localName, String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新 Attribute。
@param prefix 此属性的前缀，不可以为 null
@param namespaceURI 被设置为此值的属性值，不可以为 null
@param localName 属性 XML 名称的本地名称，localName 不可以为 null
@param value 要设置的属性值，不可以为 null
@return 带有指定值的 Attribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.Attribute javax.xml.stream.XMLEventFactory.createAttribute(String localName, String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新 Attribute。
@param localName 属性 XML 名称的本地名称，localName 不可以为 null
@param value 要设置的属性值，不可以为 null
@return 带有指定值的 Attribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.Attribute javax.xml.stream.XMLEventFactory.createAttribute(QName name, String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新 Attribute。
@param name 属性的限定名，不可以为 null
@param value 要设置的属性值，不可以为 unll
@return 带有指定值的 Attribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.Namespace javax.xml.stream.XMLEventFactory.createNamespace(String namespaceURI)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的默认 Namespace。
@param namespaceURI 默认名称空间 URI
@return 带有指定值的 Namespace

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.Namespace javax.xml.stream.XMLEventFactory.createNamespace(String prefix, String namespaceUri)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 Namespace。
@param prefix 此名称空间的前缀，不可以为 null
@param namespaceUri 被设置为此值的属性值，不可以为 null
@return 带有指定值的 Namespace

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.StartElement javax.xml.stream.XMLEventFactory.createStartElement(QName name, java.util.Iterator attributes, java.util.Iterator namespaces)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新 StartElement。通过传入一个迭代 Namespace 接口集合的 Iterator，可以将名称空间添加到此 StartElement。通过传入一个迭代 Attribute 接口集合的 Iterator，可以将属性添加到此 StartElement。

@param name 属性的限定名，不可以为 null
@param attributes 要添加到新 StartElement 的可选无序对象集合，这些对象均实现 Attribute，该参数可以为 null
@param namespaces 要添加到新 StartElement 的可选无序对象集合，这些对象均实现 Namespace，该参数可以为 null
@return 请求的 StartElement 的实例

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.StartElement javax.xml.stream.XMLEventFactory.createStartElement(String prefix, String namespaceUri, String localName)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新 StartElement。此方法默认 NamespaceContext 为空 NamespaceContext。查询此事件的名称空间或属性将导致返回空的迭代器。

@param namespaceUri 新 StartElement QName 的 URI
@param localName 新 StartElement QName 的本地名称
@param prefix 新 StartElement QName 的前缀
@return 请求的 StartElement 的实例

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.StartElement javax.xml.stream.XMLEventFactory.createStartElement(String prefix, String namespaceUri, String localName, java.util.Iterator attributes, java.util.Iterator namespaces)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新 StartElement。通过传入一个迭代 Namespace 接口集合的 Iterator，可以将名称空间添加到此 StartElement。通过传入一个迭代 Attribute 接口集合的 Iterator，可以将属性添加到此 StartElement。

@param namespaceUri 新 StartElement QName 的 URI
@param localName 新 StartElement QName 的本地名称
@param prefix 新 StartElement QName 的前缀
@param attributes 要添加到新 StartElement 的无序对象集合，这些对象均实现 Attribute
@param namespaces 要添加到新 StartElement 的无序对象集合，这些对象均实现 Namespace
@return 请求的 StartElement 的实例

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.StartElement javax.xml.stream.XMLEventFactory.createStartElement(String prefix, String namespaceUri, String localName, java.util.Iterator attributes, java.util.Iterator namespaces, NamespaceContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新 StartElement。通过传入一个迭代 Namespace 接口集合的 Iterator，可以将名称空间添加到此 StartElement。通过传入一个迭代 Attribute 接口集合的 Iterator，可以将属性添加到此 StartElement。

@param namespaceUri 新 StartElement QName 的 URI 
@param localName 新 StartElement QName 的本地名称 
@param prefix 新 StartElemente QName 的前缀
@param attributes 要添加到新 StartElement 的无序对象集合，这些对象均实现 Attribute，可以为 null
@param namespaces 要添加到新 StartElement 的无序对象集合，这些对象均实现 Namespace，可以为 null
@param context 此元素的名称空间上下文
@return 请求的 StartElement 的实例

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.EndElement javax.xml.stream.XMLEventFactory.createEndElement(QName name, java.util.Iterator namespaces)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新 EndElement。
@param name EndElement 的限定名
@param namespaces 超出范围的无序对象集合，这些对象均实现 Namespace，该参数可以为 null
@return 请求的 EndElement 的实例

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.EndElement javax.xml.stream.XMLEventFactory.createEndElement(String prefix, String namespaceUri, String localName)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新 EndElement。
@param namespaceUri 新 StartElement QName 的 URI 
@param localName 新 StartElement QName 的本地名称 
@param prefix 新 StartElement QName 的前缀 
@return 请求的 EndElement 的实例

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.EndElement javax.xml.stream.XMLEventFactory.createEndElement(String prefix, String namespaceUri, String localName, java.util.Iterator namespaces)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新 EndElement。
@param namespaceUri 新 StartElement QName 的 URI
@param localName 新 StartElement QName 的本地名称
@param prefix 新 StartElement QName 的前缀
@param namespaces 超出范围的无序对象集合，这些对象均实现 Namespace，该参数可以为 null
@return 请求的 EndElement 的实例

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.Characters javax.xml.stream.XMLEventFactory.createCharacters(String content)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 Character 事件，此方法不检查内容是否全部为空白。使用 #createSpace(String) 创建一个空间事件。
@param content 要创建的字符串
@return 一个 Character 事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.Characters javax.xml.stream.XMLEventFactory.createCData(String content)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 CData 标记设置为 true 的 Character 事件。
@param content 要创建的字符串
@return 一个 Character 事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.Characters javax.xml.stream.XMLEventFactory.createSpace(String content)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 isSpace 标记设置为 true 的 Character 事件。
@param content 要创建的空间的内容
@return 一个 Character 事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.Characters javax.xml.stream.XMLEventFactory.createIgnorableSpace(String content)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个可忽略的空间。
@param content 要创建的空间
@return 一个 Character 事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.StartDocument javax.xml.stream.XMLEventFactory.createStartDocument()
<!-- END KEY -->
<!-- BEGIN DATA -->

创建一个 StartDocument 事件的新实例。
@return 一个 StartDocument 事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.StartDocument javax.xml.stream.XMLEventFactory.createStartDocument(String encoding, String version, boolean standalone)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建一个 StartDocument 事件的新实例。

@param encoding 编码样式
@param version XML 的版本
@param standalone 独立的状态，可以设置为 &quot;true&quot; 或 &quot;false&quot;
@return 一个 StartDocument 事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.StartDocument javax.xml.stream.XMLEventFactory.createStartDocument(String encoding, String version)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建一个 StartDocument 事件的新实例。

@param encoding 编码样式
@param XML 的版本
@return 一个 StartDocument 事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.StartDocument javax.xml.stream.XMLEventFactory.createStartDocument(String encoding)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建一个 StartDocument 事件的新实例。

@param encoding 编码样式
@return 一个 StartDocument 事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.EndDocument javax.xml.stream.XMLEventFactory.createEndDocument()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 EndDocument 事件的新实例。
@return 一个 EndDocument 事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.EntityReference javax.xml.stream.XMLEventFactory.createEntityReference(String name, EntityDeclaration declaration)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 EntityReference 事件的新实例。

@param name 引用的名称
@param declaration 事件的声明
@return 一个 EntityReference 事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.Comment javax.xml.stream.XMLEventFactory.createComment(String text)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个注释。
@param text Comment 事件的注释文本

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.ProcessingInstruction javax.xml.stream.XMLEventFactory.createProcessingInstruction(String target, String data)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个处理指令。
@param target 处理指令的目标
@param data 处理指令的文本
@return 一个 ProcessingInstruction 事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.DTD javax.xml.stream.XMLEventFactory.createDTD(String dtd)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个文档类型定义事件。此字符串包含与 XML 1.0 规范中的 doctypedecl 相匹配的整个文档类型声明。
@param dtd 文档类型定义的文本
@return 一个 DTD 事件

<!-- END DATA -->
