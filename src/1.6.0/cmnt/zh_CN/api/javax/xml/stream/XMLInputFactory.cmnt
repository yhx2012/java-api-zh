<!-- BEGIN KEY -->
public abstract class javax.xml.stream.XMLInputFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
定义用于获取流的工厂的抽象实现。下表定义此规范的标准属性。每个属性随每个实现所要求的支持级别的不同而不同。所要求的支持级别在&ldquo;必需&rdquo;栏中做了描述。

   <table border="2" rules="all" cellpadding="4">
    <thead>
      <tr>
        <th align="center" colspan="5">
配置参数
        </th>
      </tr>
    </thead>
    <tbody>
      <tr>
<th>属性名</th>
<th>行为</th>
<th>返回类型</th>
<th>默认值</th>
<th>必需</th>
      </tr>
<tr><td>javax.xml.stream.isValidating</td><td>开启/关闭特定于实现的 DTD 验证</td><td>Boolean</td><td>False</td><td>否</td></tr>
<tr><td>javax.xml.stream.isNamespaceAware</td><td>开启/关闭用于支持 XML 1.0 的名称空间处理</td><td>Boolean</td><td>True</td><td>True（必需）/ False （可选）</td></tr>
<tr><td>javax.xml.stream.isCoalescing</td><td>要求处理器组合相临的字符数据</td><td>Boolean</td><td>False</td><td>是</td></tr>
<tr><td>javax.xml.stream.isReplacingEntityReferences</td><td>用它们的替换文本替换内部实体引用并将它们作为字符报告</td><td>Boolean</td><td>True</td><td>是</td></tr>
<tr><td>javax.xml.stream.isSupportingExternalEntities</td><td>解析外部解析的实体</td><td>Boolean</td><td>未指定</td><td>是</td></tr>
<tr><td>javax.xml.stream.supportDTD</td><td>使用此属性请求不支持 DTD 的处理器</td><td>Boolean</td><td>True</td><td>是</td></tr>
<tr><td>javax.xml.stream.reporter</td><td>设置/获取 XMLReporter 的 impl</td><td>javax.xml.stream.XMLReporter</td><td>Null</td><td>是</td></tr>
<tr><td>javax.xml.stream.resolver</td><td>设置/获取 XMLResolver 接口的 impl</td><td>javax.xml.stream.XMLResolver</td><td>Null</td><td>是</td></tr>
<tr><td>javax.xml.stream.allocator</td><td>设置/获取 XMLEventAllocator 接口的 impl</td><td>javax.xml.stream.util.XMLEventAllocator</td><td>Null</td><td>是</td></tr>
    </tbody>
  </table>


@version 1.0
@author Copyright (c) 2003 by BEA Systems.All Rights Reserved.
@see XMLOutputFactory
@see XMLEventReader
@see XMLStreamReader
@see EventFilter
@see XMLReporter
@see XMLResolver
@see javax.xml.stream.util.XMLEventAllocator
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.stream.XMLInputFactory.IS_NAMESPACE_AWARE
<!-- END KEY -->
<!-- BEGIN DATA -->

用于开启/关闭名称空间支持的属性，该属性用于支持 XML 1.0 文档，只有 true 设置是必须受支持的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.stream.XMLInputFactory.IS_VALIDATING
<!-- END KEY -->
<!-- BEGIN DATA -->

用于开启/关闭特定于实现的验证的属性。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.stream.XMLInputFactory.IS_COALESCING
<!-- END KEY -->
<!-- BEGIN DATA -->

要求解析器组合相邻字符数据部分的属性。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.stream.XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES
<!-- END KEY -->
<!-- BEGIN DATA -->

要求解析器用它们的替换文本替换内部实体引用并将它们报告为字符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.stream.XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES
<!-- END KEY -->
<!-- BEGIN DATA -->

要求解析器解析外部解析实体的属性。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.stream.XMLInputFactory.SUPPORT_DTD
<!-- END KEY -->
<!-- BEGIN DATA -->

要求解析器支持 DTD 的属性。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.stream.XMLInputFactory.REPORTER
<!-- END KEY -->
<!-- BEGIN DATA -->
用于设置/获取 XMLReporter 接口实现的属性。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.stream.XMLInputFactory.RESOLVER
<!-- END KEY -->
<!-- BEGIN DATA -->
用于设置/获取 XMLResolver 实现的属性。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.stream.XMLInputFactory.ALLOCATOR
<!-- END KEY -->
<!-- BEGIN DATA -->
用于设置/获取分配器实现的属性。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory.newInstance() throws javax.xml.stream.FactoryConfigurationError
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的工厂实例。此 static 方法创建一个新的工厂实例。此方法按照以下查找过程顺序来确定要加载的 XMLInputFactory 实现类：使用 javax.xml.stream.XMLInputFactory 系统属性。使用 JRE 目录中的属性文件 &quot;lib/stax.properties&quot;。此配置文件是标准的 java.util.Properties 格式，且包含实现类的完全限定名，其中实现类的键是上文定义的系统属性。如果 Services API（在 JAR 规范中进行了详细描述）可用，可以使用它来确定类名称。Services API 将在运行时可用的 jar 文件 META-INF/services/javax.xml.stream.XMLInputFactory 中查找类名称。平台默认的 XMLInputFactory 实例。应用程序获取对 XMLInputFactory 的引用后，它可以使用工厂来配置和获取流实例。 

@throws FactoryConfigurationError 如果此工厂的实例无法加载

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory.newInstance(String factoryId, ClassLoader classLoader) throws javax.xml.stream.FactoryConfigurationError
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的工厂实例。 

@param factoryId  要查找的工厂的名称，与属性名称相同
@param classLoader 要使用的类加载器
@return 工厂实现
@throws FactoryConfigurationError 如果此工厂的实例无法加载

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamReader javax.xml.stream.XMLInputFactory.createXMLStreamReader(Reader reader) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 reader 创建一个新 XMLStreamReader。
@param reader 要从中读取 XMLStreamReader 的 XML 数据
@throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamReader javax.xml.stream.XMLInputFactory.createXMLStreamReader(Source source) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 JAXP 源创建一个新 XMLStreamReader。此方法是可选的。
@param source 要从中读取 XMLStreamReader 的源
@throws UnsupportedOperationException 如果 XMLInputFactory 不支持此方法
@throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamReader javax.xml.stream.XMLInputFactory.createXMLStreamReader(InputStream stream) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 java.io.InputStream 创建一个新 XMLStreamReader。
@param stream 要从中读取 XMLStreamReader 的 InputStream
@throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamReader javax.xml.stream.XMLInputFactory.createXMLStreamReader(InputStream stream, String encoding) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 java.io.InputStream 创建一个新 XMLStreamReader。
@param stream 要从中读取 XMLStreamReader 的 InputStream
@param encoding 流的字符编码
@throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamReader javax.xml.stream.XMLInputFactory.createXMLStreamReader(String systemId, InputStream stream) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 java.io.InputStream 创建一个新 XMLStreamReader。
@param systemId 流的系统 ID
@param stream 要从中读取 XMLStreamReader 的 InputStream

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamReader javax.xml.stream.XMLInputFactory.createXMLStreamReader(String systemId, Reader reader) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 java.io.InputStream 创建一个新 XMLStreamReader。
@param systemId 流的系统 ID
@param reader 要从中读取 XMLStreamReader 的 InputStream

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventReader javax.xml.stream.XMLInputFactory.createXMLEventReader(Reader reader) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 reader 创建一个新 XMLEventReader。
@param reader 要从中读取 XMLEventReader 的 XML 数据
@throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventReader javax.xml.stream.XMLInputFactory.createXMLEventReader(String systemId, Reader reader) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 reader 创建一个新 XMLEventReader。
@param systemId 输入的系统 ID
@param reader 要从中读取 XMLEventReader 的 XML 数据
@throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventReader javax.xml.stream.XMLInputFactory.createXMLEventReader(XMLStreamReader reader) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 XMLStreamReader 创建一个新 XMLEventReader。在被用来构造此方法返回的 XMLEventReader 实例后，MLStreamReader 不得再次使用。
@param reader 要从中读取数据的 XMLStreamReader （不能修改）
@return 新 XMLEventReader
@throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventReader javax.xml.stream.XMLInputFactory.createXMLEventReader(Source source) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 JAXP 源创建一个新 XMLEventReader。对此方法的支持是可选的。
@param source 要从中读取 XMLEventReader 的源
@throws UnsupportedOperationException 如果此 XMLInputFactory 不支持此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventReader javax.xml.stream.XMLInputFactory.createXMLEventReader(InputStream stream) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 java.io.InputStream 创建一个新 XMLEventReader。
@param stream 要从中读取 XMLEventReader 的 InputStream
@throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventReader javax.xml.stream.XMLInputFactory.createXMLEventReader(InputStream stream, String encoding) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 java.io.InputStream 创建一个新 XMLEventReader。
@param stream 要从中读取 XMLEventReader 的 InputStream
@param encoding 流的字符编码
@throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventReader javax.xml.stream.XMLInputFactory.createXMLEventReader(String systemId, InputStream stream) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 java.io.InputStream 创建一个新 XMLEventReader。
@param systemId 流的系统 ID
@param stream 要从中读取 XMLEventReader 的 InputStream
@throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamReader javax.xml.stream.XMLInputFactory.createFilteredReader(XMLStreamReader reader, StreamFilter filter) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建过滤的 reader，它用过滤器包装 reader。
@param reader 要过滤的 reader
@param filter 要应用到 reader 的过滤器
@throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventReader javax.xml.stream.XMLInputFactory.createFilteredReader(XMLEventReader reader, EventFilter filter) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建过滤的事件 reader，它用过滤器包装事件 reader。
@param reader 要包装的事件 reader
@param filter 要应用到事件 reader 的过滤器
@throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLResolver javax.xml.stream.XMLInputFactory.getXMLResolver()
<!-- END KEY -->
<!-- BEGIN DATA -->
要在此工厂实例创建的任何 XMLStreamReader 或 XMLEventReader 上进行设置的解析器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.stream.XMLInputFactory.setXMLResolver(XMLResolver resolver)
<!-- END KEY -->
<!-- BEGIN DATA -->
要在此工厂实例创建的任何 XMLStreamReader 或 XMLEventReader 上进行设置的解析器。
@param resolver 要用于解析引用的解析器

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLReporter javax.xml.stream.XMLInputFactory.getXMLReporter()
<!-- END KEY -->
<!-- BEGIN DATA -->
要在此工厂实例创建的任何 XMLStreamReader 或 XMLEventReader 上进行设置的报告器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.stream.XMLInputFactory.setXMLReporter(XMLReporter reporter)
<!-- END KEY -->
<!-- BEGIN DATA -->
要在此工厂实例创建的任何 XMLStreamReader 或 XMLEventReader 上进行设置的报告器。
@param reporter 要用来报告非严重错误的解析器

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.stream.XMLInputFactory.setProperty(String name, Object value) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
允许用户在底层实现上设置特定功能/属性。底层实现不需要支持规范中每个属性的每个设置，可以使用 IllegalArgumentException 来表示一个不受支持的属性不能用指定的值进行设置。
@param name 属性的名称（不可以为 null）
@param value 属性的值
@throws java.lang.IllegalArgumentException 如果属性不受支持

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.Object javax.xml.stream.XMLInputFactory.getProperty(String name) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
从底层实现获取功能/属性的值。
@param name 属性的名称（不可以为 null）
@return 属性的值
@throws IllegalArgumentException 如果属性不受支持

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.xml.stream.XMLInputFactory.isPropertySupported(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
查询此工厂支持的属性集合。

@param name 属性的名称（不可以为 null）
@return 如果此属性受支持，则返回 true，否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.stream.XMLInputFactory.setEventAllocator(XMLEventAllocator allocator)
<!-- END KEY -->
<!-- BEGIN DATA -->
为事件设置一个用户定义的事件分配器。
@param allocator 用户定义的分配器

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.util.XMLEventAllocator javax.xml.stream.XMLInputFactory.getEventAllocator()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取用此工厂创建的流所使用的分配器。

<!-- END DATA -->
