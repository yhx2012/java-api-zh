<!-- BEGIN KEY -->
public abstract class javax.xml.soap.MessageFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 <code>SOAPMessage</code> 对象的工厂。
 <P>
SAAJ 客户端可以使用方法 <code>newInstance</code> 创建 <code>MessageFactory</code> 对象，如以下代码行所示。
 <PRE>
MessageFactory mf = MessageFactory.newInstance();
MessageFactory mf12 = MessageFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL);
 </PRE>
 <P>
默认情况下，所有 <code>MessageFactory</code> 对象（无论它们是如何创建的）都将生成具有以下元素的 <code>SOAPMessage</code> 对象：
 <UL>
<LI>一个 <code>SOAPPart</code> 对象
<LI>一个 <code>SOAPEnvelope</code> 对象
<LI>一个 <code>SOAPBody</code> 对象
<LI>一个 <code>SOAPHeader</code> 对象
 </UL>
在某些情况下，可以获取特殊的 MessageFactory 对象来生成用 <code>SOAPHeader</code> 对象和 <code>SOAPBody</code> 对象中的附加条目预填充的消息。新的 <code>SOAPMessage</code> 对象的内容取决于使用两种 <code>MessageFactory</code> 方法中的哪一种创建该对象。
 <UL>
<LI><code>createMessage()</code> <BR> 这是客户端通常用来创建请求消息的方法。
<LI><code>createMessage(MimeHeaders, java.io.InputStream)</code> -- 消息的内容取自 <code>InputStream</code> 对象，头取自 <code>MimeHeaders</code> 对象。 <BR> 此方法可以供服务实现在内部用来创建响应请求的消息。
 </UL>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.soap.MessageFactory javax.xml.soap.MessageFactory.newInstance() throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的 <code>MessageFactory</code> 对象，该对象是默认实现 (SOAP 1.1) 的实例。

此方法使用以下查找过程顺序来确定要加载的 MessageFactory 实现类：
 <UL>
<LI> 使用 javax.xml.soap.MessageFactory 系统属性。
<LI> 使用 JRE 文件夹中的属性文件 &quot;lib/jaxm.properties&quot;。此配置文件格式是标准的 java.util.Properties 格式且包含实现类的完全限定名，其中实现类的键是上文定义的系统属性。
<LI> 如果 Services API（在 JAR 规范中进行了详细描述）可用，可以使用它来确定类名称。Services API 将查找在运行时可用的 jar 中 META-INF/services/javax.xml.soap.MessageFactory 文件中的类名称。
<LI> 使用 SAAJMetaFactory 实例来定位 MessageFactory 实现类。
 </UL>


@return 新的 <code>MessageFactory</code> 实例

@exception SOAPException 如果创建默认的 <code>MessageFactory</code> 实现时存在错误。
@see SAAJMetaFactory

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.soap.MessageFactory javax.xml.soap.MessageFactory.newInstance(String protocol) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的 <code>MessageFactory</code> 对象，该对象是指定实现的实例。可以是动态消息工厂、SOAP 1.1 消息工厂或 SOAP 1.2 消息工厂。动态消息工厂根据作为 <code>createMessage</code> 方法参数指定的 MIME 头创建消息。此方法使用 SAAJMetaFactory 来定位实现类并创建 MessageFactory 实例。
 
@return 新的 <code>MessageFactory</code> 实例

@param protocol  字符串常量，表示指定消息工厂实现的类。可以是 <code>DYNAMIC_SOAP_PROTOCOL</code>、<code>DEFAULT_SOAP_PROTOCOL</code>（等同于 <code>SOAP_1_1_PROTOCOL</code>）或 <code>SOAP_1_2_PROTOCOL</code>。

@exception SOAPException 如果创建指定的 <code>MessageFactory</code> 实例时存在错误。
@see SAAJMetaFactory
@since SAAJ 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.soap.SOAPMessage javax.xml.soap.MessageFactory.createMessage() throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认的 <code>SOAPPart</code>、<code>SOAPEnvelope</code>、<code>SOAPBody</code> 和 <code>SOAPHeader</code> 对象创建新的 <code>SOAPMessage</code> 对象。特定于配置文件的消息工厂可以选择用特定于配置文件的头预填充 <code>SOAPMessage</code> 对象。
 <P>
可以向此消息的 <code>SOAPPart</code> 对象添加内容，如果一个只包含 SOAP 部分的消息便已足够，则可以按&ldquo;原样&rdquo;发送消息。否则，<code>SOAPMessage</code> 对象需要创建一个或多个 <code>AttachmentPart</code> 对象并将其添加到自身。任何非 XML 格式的内容必须在 <code>AttachmentPart</code> 对象中。

@return 一个新的 <code>SOAPMessage</code> 对象
@exception SOAPException 如果发生 SOAP 错误
@exception UnsupportedOperationException 如果此 <code>MessageFactory</code> 实例的协议是 <code>DYNAMIC_SOAP_PROTOCOL</code> 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.soap.SOAPMessage javax.xml.soap.MessageFactory.createMessage(MimeHeaders headers, InputStream in) throws java.io.IOException, javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定 <code>InputStream</code> 对象的内容内部化到新的 <code>SOAPMessage</code> 对象，并返回该 <code>SOAPMessage</code> 对象。

@param in 包含消息数据的 <code>InputStream</code> 对象
@param headers 用于创建消息的特定于传输的头，使用与传输无关的方式传递给消息
@return 一个新的 <code>SOAPMessage</code> 对象，包含给定 <code>InputStream</code> 对象的数据

@exception IOException 如果读取输入流的数据时存在错误

@exception SOAPException 消息无效时抛出
 
@exception IllegalArgumentException 如果 <code>MessageFactory</code> 需要一个或多个 MIME 头存在于 <code>headers</code> 参数中，但是它们丢失了。<code>SOAP_1_1_PROTOCOL</code> 或 <code>SOAP_1_2_PROTOCOL</code> 的 <code>MessageFactory</code> 实现不得因此抛出 <code>IllegalArgumentException</code>。   

<!-- END DATA -->
