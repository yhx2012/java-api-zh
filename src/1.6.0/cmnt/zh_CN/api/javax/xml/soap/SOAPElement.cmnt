<!-- BEGIN KEY -->
public interface javax.xml.soap.SOAPElement extends javax.xml.soap.Node, org.w3c.dom.Element
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 SOAP 规范允许使用但未特别规定的 SOAP 消息元素的对象。此接口充当 SOAP 规范特别规定的那些对象的基本接口。
 <p>
此接口中要求返回特定于 SAAJ 的对象的那些方法可以&ldquo;安静地&rdquo;替换树中的节点，以便按要求成功返回正确类型的对象。有关详细信息，请参见 {@link #getChildElements()} 和 {@link <a HREF="package-summary.html#package_description">javax.xml.soap<a>}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.soap.SOAPElement javax.xml.soap.SOAPElement.addChildElement(Name name) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建使用给定 <code>Name</code> 对象初始化的新 <code>SOAPElement</code> 对象，并将该新元素添加到此 <code>SOAPElement</code> 对象。
 <P>
此方法在以后的 SAAJ 版本中可能会被废弃，并用 addChildElement(javax.xml.namespace.QName) 取代。

@param name <code>Name</code> 对象，带有新元素的 XML 名称

@return 创建的新 <code>SOAPElement</code> 对象
@exception SOAPException 如果在创建 <code>SOAPElement</code> 对象时发生错误
@see SOAPElement#addChildElement(javax.xml.namespace.QName)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.soap.SOAPElement javax.xml.soap.SOAPElement.addChildElement(QName qname) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建使用给定 <code>QName</code> 对象初始化的新 <code>SOAPElement</code> 对象，并将该新元素添加到此 <code>SOAPElement</code> 对象。新 <code>SOAPElement</code> 的 <i>namespace</i>、<i>localname</i> 和 <i>prefix</i> 都取自 <code>qname</code> 参数。
 
@param qname <code>QName</code> 对象，带有新元素的 XML 名称

@return 创建的新 <code>SOAPElement</code> 对象
@exception SOAPException 如果在创建 <code>SOAPElement</code> 对象时发生错误
@see SOAPElement#addChildElement(Name)
@since SAAJ 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.soap.SOAPElement javax.xml.soap.SOAPElement.addChildElement(String localName) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建使用指定本地名称初始化的新 <code>SOAPElement</code> 对象，并将该新元素添加到此 <code>SOAPElement</code> 对象。新的 <code>SOAPElement</code> 继承任何作用域内的默认名称空间。

@param localName 给出元素本地名称的 <code>String</code>
@return 创建的新 <code>SOAPElement</code> 对象
@exception SOAPException 如果在创建 <code>SOAPElement</code> 对象时发生错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.soap.SOAPElement javax.xml.soap.SOAPElement.addChildElement(String localName, String prefix) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建使用指定本地名称和前缀初始化的新 <code>SOAPElement</code> 对象，并将该新元素添加到此 <code>SOAPElement</code> 对象。
 
@param localName 给出新元素本地名称的 <code>String</code>
@param prefix 给出新元素名称空间前缀的 <code>String</code>

@return 创建的新 <code>SOAPElement</code> 对象
@exception SOAPException 如果 <code>prefix</code> 在此 <code>SOAPElement</code> 上下文中无效，或者在创建 <code>SOAPElement</code> 对象时发生错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.soap.SOAPElement javax.xml.soap.SOAPElement.addChildElement(String localName, String prefix, String uri) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建使用指定本地名称、前缀和 URI 初始化的新 <code>SOAPElement</code> 对象，并将该新元素添加到此 <code>SOAPElement</code> 对象。

@param localName 给出新元素本地名称的 <code>String</code>
@param prefix 给出新元素名称空间前缀的 <code>String</code>
@param uri 给出新元素所属空间名称 URI 的 <code>String</code>

@return 创建的新 <code>SOAPElement</code> 对象
@exception SOAPException 如果在创建 <code>SOAPElement</code> 对象时发生错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.soap.SOAPElement javax.xml.soap.SOAPElement.addChildElement(SOAPElement element) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>SOAPElement</code> 作为此 <code>SOAPElement</code> 实例的子级添加。应该由 <code>SOAPFactory</code> 来创建 <code>SOAPElement</code>。调用者不应依靠此方式添加到 XML 树的元素实例。实现最后可以将传递的 <code>SOAPElement</code> 的内容复制到一个不同 <code>SOAPElement</code> 实现的实例中。例如，如果对 <code>SOAPHeader</code> 调用 <code>addChildElement()</code>，则 <code>element</code> 将被复制到 <code>SOAPHeaderElement</code> 的实例中。

<P>以 <code>element</code> 为根的片段将作为一个整体添加，如果发生错误，则不添加。

<P>以 <code>element</code> 为根的片段不能包含名为 &quot;Envelope&quot;、&quot;Header&quot; 或 &quot;Body&quot; 且属于 SOAP 名称空间的元素。片段中出现的任何名称空间前缀都应该使用片段本身中适当的名称空间声明来完整解析。

@param element 要作为新子级添加的 <code>SOAPElement</code>

@exception SOAPException 如果在作为子级添加此元素时出现错误

@return 一个实例，表示实际添加到树的新 SOAP 元素。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.soap.SOAPElement.removeContents()
<!-- END KEY -->
<!-- BEGIN DATA -->
分离此 <code>SOAPElement</code> 的所有子级。
 <p>
此方法对回滚部分完成的 <code>SOAPHeaders</code> 和 <code>SOAPBodys</code> 的构造很有用，便于准备在检测到错误条件时发送错误。它对于回收 SOAP 消息中的文档各部分也很有用。
 
@since SAAJ 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.soap.SOAPElement javax.xml.soap.SOAPElement.addTextNode(String text) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建使用给定 <code>String</code> 初始化的新 <code>Text</code> 对象，并将其添加到此 <code>SOAPElement</code> 对象。

@param text 带有要添加文本内容的 <code>String</code> 对象

@return 将插入新 <code>Text</code> 对象的 <code>SOAPElement</code> 对象
@exception SOAPException 如果在创建新 <code>Text</code> 时发生错误，或者将它作为子级附加到此 <code>SOAPElement</code> 不合法

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.soap.SOAPElement javax.xml.soap.SOAPElement.addAttribute(Name name, String value) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
将带有指定名称和值的属性添加到此 <code>SOAPElement</code> 对象。

@param name 带有属性名称的 <code>Name</code> 对象
@param value 给出属性值的 <code>String</code>
@return 将插入属性的 <code>SOAPElement</code> 对象

@exception SOAPException 如果在创建属性时发生错误，或者在此 SOAPElement 上设置带有 <code>Name</code> <code>name</code> 的属性无效。
@see SOAPElement#addAttribute(javax.xml.namespace.QName, String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.soap.SOAPElement javax.xml.soap.SOAPElement.addAttribute(QName qname, String value) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
将带有指定名称和值的属性添加到此 <code>SOAPElement</code> 对象。

@param qname 带有属性名称的 <code>QName</code> 对象
@param value 给出属性值的 <code>String</code>
@return 将插入属性的 <code>SOAPElement</code> 对象

@exception SOAPException 如果在创建属性时出现错误，如果在此 SOAPElement 上设置带有 <code>QName</code> <code>qname</code> 的属性无效。
@see SOAPElement#addAttribute(Name, String)
@since SAAJ 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.soap.SOAPElement javax.xml.soap.SOAPElement.addNamespaceDeclaration(String prefix, String uri) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
将带有指定前缀和 URI 的名称空间声明添加到此 <code>SOAPElement</code> 对象。

@param prefix 给出名称空间前缀的 <code>String</code>
@param uri 给出名称空间 URI 的 <code>String</code>
@return 将插入名称空间声明的 <code>SOAPElement</code> 对象。

@exception SOAPException 如果在创建名称空间时发生错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.soap.SOAPElement.getAttributeValue(Name name)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回带有指定名称的属性值。

@param name 带有属性名称的 <code>Name</code> 对象
@return 给出指定属性值的 <code>String</code>，如果没有这种属性，则返回 Null
@see SOAPElement#getAttributeValue(javax.xml.namespace.QName)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.soap.SOAPElement.getAttributeValue(QName qname)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回带有指定 qname 的属性值。

@param qname 带有属性 qname 的 <code>QName</code> 对象
@return 给出指定属性值的 <code>String</code>，如果没有这种属性，则返回 Null
@see SOAPElement#getAttributeValue(Name)
@since SAAJ 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator javax.xml.soap.SOAPElement.getAllAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回可在此 <code>SOAPElement</code> 对象中所有属性 <code>Name</code> 对象上进行迭代的 <code>Iterator</code>。迭代器可以用于获取属性名称，然后可将这些名称传递给方法 <code>getAttributeValue</code> 以检索每个属性的值。

@see SOAPElement#getAllAttributesAsQNames()
@return 在属性名称上进行迭代的迭代器

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator javax.xml.soap.SOAPElement.getAllAttributesAsQNames()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回可在此 <code>SOAPElement</code> 对象（以 <code>QName</code> 对象的形式）中的所有属性上进行迭代的 <code>Iterator</code>。迭代器可以用于获取属性 QName，然后可将这些名称传递给方法 <code>getAttributeValue</code> 以检索每个属性的值。

 @return 在属性的 QNames 上进行迭代的迭代器
 @see SOAPElement#getAllAttributes()
 @since SAAJ 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.soap.SOAPElement.getNamespaceURI(String prefix)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回带有给定前缀的名称空间的 URI。

@param prefix 一个 <code>String</code>，给出用来搜索的名称空间前缀
@return 一个 <code>String</code>，带有给定前缀名称空间的 URI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator javax.xml.soap.SOAPElement.getNamespacePrefixes()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回可在此元素声明的名称空间前缀 <code>String</code> 上进行迭代的 <code>Iterator</code>。由此迭代器返回的前缀可以传递给方法 <code>getNamespaceURI</code>，以检索每个名称空间的 URI。

@return 在此 <code>SOAPElement</code> 对象的名称空间前缀上进行迭代的迭代器

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator javax.xml.soap.SOAPElement.getVisibleNamespacePrefixes()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在此元素可见的名称空间前缀 <code>String</code> 上进行迭代的 <code>Iterator</code>。由此迭代器返回的前缀可以传递给方法 <code>getNamespaceURI</code>，以检索每个名称空间的 URI。

@return 在此 <code>SOAPElement</code> 对象作用域内的名称空间前缀上进行迭代的迭代器
 
@since SAAJ 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.namespace.QName javax.xml.soap.SOAPElement.createQName(String localName, String prefix) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>QName</code>，其名称空间 URI 应与此 <code>SOAPElement</code> 上下文中的参数、<code>prefix</code> 相关联。新 <code>QName</code> 的其余元素都直接取自参数、<code>localName</code> 和 <code>prefix</code>。 
 
@param localName 包含名称本地部分的 <code>String</code>。
@param prefix 包含名称前缀的 <code>String</code>。
 
@return 一个 <code>QName</code>，带有指定的 <code>localName</code> 和 <code>prefix</code>，以及与此 <code>SOAPElement</code> 上下文中的 <code>prefix</code> 关联的名称空间。如果将 <code>prefix</code> 作为参数提供给 <code>{@link #getNamespaceURI(String)}</code>，则此名称空间将与该方法返回的名称空间相同。
 
@exception SOAPException 如果无法创建 <code>QName</code>。
 
@since SAAJ 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.soap.Name javax.xml.soap.SOAPElement.getElementName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>SOAPElement</code> 对象的名称。

@return 具有此 <code>SOAPElement</code> 对象名称的 <code>Name</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.namespace.QName javax.xml.soap.SOAPElement.getElementQName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>SOAPElement</code> 对象的 qname。

@return 具有此 <code>SOAPElement</code> 对象 qname 的 <code>QName</code> 对象
@see SOAPElement#getElementName()
@since SAAJ 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.soap.SOAPElement javax.xml.soap.SOAPElement.setElementQName(QName newName) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果可能，将此 <code>Element</code> 的名称更改为 <code>newName</code>。SOAP 定义的元素，如 SOAPEnvelope、SOAPHeader、SOAPBody 等，都无法使用此方法更改它们的名称。任何此类尝试都会导致抛出 SOAPException。
<P>
调用者不应依靠按此方式重命名的元素实例。实现最后可以将 <code>SOAPElement</code> 的内容复制到重命名实例。
 
@param newName <code>Element</code> 的新名称。
 
@exception SOAPException 如果不允许更改此 <code>Element</code> 的名称。
@return 重命名的节点
 
@since SAAJ 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.xml.soap.SOAPElement.removeAttribute(Name name)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除带有指定名称的属性。

@param name <code>Name</code> 对象，带有要移除属性的名称
@return 如果成功移除了属性，则返回 <code>true</code>；否则返回 <code>false</code>
@see SOAPElement#removeAttribute(javax.xml.namespace.QName)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.xml.soap.SOAPElement.removeAttribute(QName qname)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除带有指定 qname 的属性。

@param qname <code>QName</code> 对象，带有要移除属性的 qname
@return 如果成功移除了属性，则返回 <code>true</code>；否则返回 <code>false</code>
@see SOAPElement#removeAttribute(Name)
@since SAAJ 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.xml.soap.SOAPElement.removeNamespaceDeclaration(String prefix)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除对应于给定前缀的名称空间声明。

@param prefix 一个 <code>String</code>，给出用来搜索的前缀
@return 如果成功移除了名称空间声明，则返回 <code>true</code>；否则返回 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator javax.xml.soap.SOAPElement.getChildElements()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回可在此元素的所有直接子 {@link Node} 上进行迭代的 <code>Iterator</code>。这包括 <code>javax.xml.soap.Text</code> 对象以及 <code>SOAPElement</code> 对象。
 <p>
调用此方法可能导致子 <code>Element</code>、<code>SOAPElement</code> 和 <code>org.w3c.dom.Text</code> 节点被适合于此父节点类型的 <code>SOAPElement</code>、<code>SOAPHeaderElement</code>、<code>SOAPBodyElement</code> 或 <code>javax.xml.soap.Text</code> 节点替换。因此，调用的应用程序必须将任何现有的对通过 DOM API 获取的那些子节点的引用视为无效，并将其丢弃或用此 <code>Iterator</code> 返回的值进行更新。可以通过调用等效的 DOM API 来避免此行为。有关更多信息，请参阅 {@link <a HREF="package-summary.html#package_description">javax.xml.soap<a>}。

@return 带有此 <code>SOAPElement</code> 对象内容的迭代器

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator javax.xml.soap.SOAPElement.getChildElements(Name name)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回可在带有指定名称的此元素所有直接子 {@link Node} 上进行迭代的 <code>Iterator</code>。所有这些子节点都将是 <code>SOAPElement</code> 节点。
 <p>
调用此方法可能导致子 <code>Element</code>、<code>SOAPElement</code> 和 <code>org.w3c.dom.Text</code> 节点被适合于此父节点类型的 <code>SOAPElement</code>、<code>SOAPHeaderElement</code>、<code>SOAPBodyElement</code> 或 <code>javax.xml.soap.Text</code> 节点替换。因此，调用的应用程序必须将任何现有的对通过 DOM API 获取的那些子节点的引用视为无效，并将其丢弃或用此 <code>Iterator</code> 返回的值进行更新。可以通过调用等效的 DOM API 来避免此行为。有关更多信息，请参阅 {@link <a HREF="package-summary.html#package_description">javax.xml.soap<a>}。
 
@param name <code>Name</code> 对象，带有要返回的子元素的名称

@return 在带有指定名称的此 <code>SOAPElement</code> 对象的所有元素上进行迭代的 <code>Iterator</code> 对象
@see SOAPElement#getChildElements(javax.xml.namespace.QName)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator javax.xml.soap.SOAPElement.getChildElements(QName qname)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回可在带有指定 qname 的此元素所有直接子 {@link Node} 上进行迭代的 <code>Iterator</code>。所有这些子节点都将是 <code>SOAPElement</code> 节点。
 <p>
调用此方法可能导致子 <code>Element</code>、<code>SOAPElement</code> 和 <code>org.w3c.dom.Text</code> 节点被适合于此父节点类型的 <code>SOAPElement</code>、<code>SOAPHeaderElement</code>、<code>SOAPBodyElement</code> 或 <code>javax.xml.soap.Text</code> 节点替换。因此，调用的应用程序必须将任何现有的对通过 DOM API 获取的那些子节点的引用视为无效，并将其丢弃或用此 <code>Iterator</code> 返回的值进行更新。可以通过调用等效的 DOM API 来避免此行为。有关更多信息，请参阅 {@link <a HREF="package-summary.html#package_description">javax.xml.soap<a>}。
 
@param qname <code>QName</code> 对象，带有要返回的子元素的 qname

@return 在带有指定 qname 的此 <code>SOAPElement</code> 对象的所有元素上进行迭代的 <code>Iterator</code> 对象
@see SOAPElement#getChildElements(Name)
@since SAAJ 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.soap.SOAPElement.setEncodingStyle(String encodingStyle) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>SOAPElement</code> 对象的编码样式设置为指定样式。

@param encodingStyle 给出编码样式的 <code>String</code>

@exception IllegalArgumentException 如果在设置编码样式时出现问题。
@exception SOAPException 如果为此 SOAPElement 设置的编码样式无效。
@see #getEncodingStyle

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.soap.SOAPElement.getEncodingStyle()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>SOAPElement</code> 对象的编码样式。

@return 给出编码样式的 <code>String</code>

@see #setEncodingStyle

<!-- END DATA -->
