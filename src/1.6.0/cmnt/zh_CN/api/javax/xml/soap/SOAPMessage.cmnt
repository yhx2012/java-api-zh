<!-- BEGIN KEY -->
public abstract class javax.xml.soap.SOAPMessage extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
所有 SOAP 消息的根类。因为 SOAP 消息是通过&ldquo;导线&rdquo;传输的，所以它是 XML 文档或第一个正文部分为 XML/SOAP 文档的 MIME 消息。
 <P>
<code>SOAPMessage</code> 对象由一个 SOAP 部分和一个或多个附件部分（可选）组成。<code>SOAPMessage</code> 对象的 SOAP 部分是一个 <code>SOAPPart</code> 对象，包含了用于消息路由和标识的信息，并可以包含特定于应用程序的内容。消息 SOAP 部分中的所有数据都必须是 XML 格式。
 <P>
默认情况下，新的 <code>SOAPMessage</code> 对象包含以下对象：
 <UL>
<LI>一个 <code>SOAPPart</code> 对象
<LI>一个 <code>SOAPEnvelope</code> 对象
<LI>一个 <code>SOAPBody</code> 对象
<LI>一个 <code>SOAPHeader</code> 对象
 </UL>
可以通过调用方法 <code>SOAPMessage.getSOAPPart()</code> 检索消息的 SOAP 部分。<code>SOAPEnvelope</code> 对象是从 <code>SOAPPart</code> 对象检索的，<code>SOAPEnvelope</code> 对象用于检索 <code>SOAPBody</code> 和 <code>SOAPHeader</code> 对象。

 <PRE>
SOAPPart sp = message.getSOAPPart();
SOAPEnvelope se = sp.getEnvelope();
SOAPBody sb = se.getBody();
SOAPHeader sh = se.getHeader();
 </PRE>

 <P>
除强制性 <code>SOAPPart</code> 对象之外，<code>SOAPMessage</code> 对象还可以包含零个或多个 <code>AttachmentPart</code> 对象，每个 AttachmentPart 对象都包含特定于应用程序的数据。<code>SOAPMessage</code> 接口提供了一些用于创建 <code>AttachmentPart</code> 对象的方法，以及一些将它们添加到 <code>SOAPMessage</code> 对象的方法。收到 <code>SOAPMessage</code> 对象的一方可以通过检索各个附件部分来检查消息内容。
 <P>
与 SOAP 消息的其余部分不同，附件不需要是 XML 格式，因此可以是简单文本或图像文件等任何形式。因此，任何非 XML 格式的消息内容必须在 <code>AttachmentPart</code> 对象中。
 <P>
<code>MessageFactory</code> 对象可以创建行为特定于具体 SAAJ 实现或应用程序的 <code>SOAPMessage</code> 对象。例如，<code>MessageFactory</code> 对象可以生成符合特定配置文件（如 ebXML）的 <code>SOAPMessage</code> 对象。在这种情况下，<code>MessageFactory</code> 对象可以生成使用 ebXML 头初始化的 <code>SOAPMessage</code> 对象。
 <P>
为了确保与后向源的兼容性，在 SAAJ 规范的 1.1 版本之后添加到此类的方法都是具体而非抽象的，它们都具有默认实现。除在 JavaDocs 中有对这些方法的另行说明外，默认实现只是抛出 <code>UnsupportedOperationException</code>，并且 SAAJ 实现代码必须使用提供指定行为的方法重写它们。但是，只要没有声明符合初始版本之后的某些更高版本规范，遗留客户端代码就没有这种限制。可以根据 SAAJ API 的未修改后续版本来编译和/或运行扩展 SOAPMessage 类的遗留类。如果正确实现了这样的类，则对于规范的更高版本（相对于初始版本）来说，该类将继续有效。

@see MessageFactory
@see AttachmentPart

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.soap.SOAPMessage.CHARACTER_SET_ENCODING
<!-- END KEY -->
<!-- BEGIN DATA -->
指定 SOAP Message 的字符类型编码。有效值包括 &quot;utf-8&quot; 和 &quot;utf-16&quot;。有关其他受支持的值，请参阅供应商文档。默认值是 &quot;utf-8&quot;。

@see SOAPMessage#setProperty(String, Object) SOAPMessage.setProperty
@since SAAJ 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.soap.SOAPMessage.WRITE_XML_DECLARATION
<!-- END KEY -->
<!-- BEGIN DATA -->
指定 SOAP Message 在发送时是否包含 XML 声明。仅有的有效值为 &quot;true&quot; 和 &quot;false&quot;。默认值为 &quot;false&quot;。

@see SOAPMessage#setProperty(String, Object) SOAPMessage.setProperty
@since SAAJ 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.soap.SOAPMessage.setContentDescription(String description)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定描述设置此 <code>SOAPMessage</code> 对象内容的描述。

@param description 描述此消息内容的 <code>String</code>
@see #getContentDescription

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String javax.xml.soap.SOAPMessage.getContentDescription()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>SOAPMessage</code> 对象内容的描述。

@return 描述此消息内容的 <code>String</code>，如果没有设置描述，则返回 <code>null</code>
@see #setContentDescription

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.soap.SOAPPart javax.xml.soap.SOAPMessage.getSOAPPart()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>SOAPMessage</code> 对象的 SOAP 部分。
 <P>
<code>SOAPMessage</code> 对象包含一个或多个附件，SOAP 部分必须是消息中的第一个 MIME 正文部分。

@return 此 <code>SOAPMessage</code> 对象的 <code>SOAPPart</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.soap.SOAPBody javax.xml.soap.SOAPMessage.getSOAPBody() throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>SOAPMessage</code> 对象中包含的 SOAP Body。
 <p>

@return 此 <code>SOAPMessage</code> 对象包含的 <code>SOAPBody</code> 对象
@exception SOAPException 如果 SOAP Body 不存在或无法被检索
@since SAAJ 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.soap.SOAPHeader javax.xml.soap.SOAPMessage.getSOAPHeader() throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>SOAPMessage</code> 对象中包含的 SOAP Header。
 <p>

@return 此 <code>SOAPMessage</code> 对象包含的 <code>SOAPHeader</code> 对象
@exception SOAPException 如果 SOAP Header 不存在或无法被检索
@since SAAJ 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.soap.SOAPMessage.removeAllAttachments()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除所有已经添加到此 <code>SOAPMessage</code> 对象的 <code>AttachmentPart</code> 对象。
 <P>
此方法不接触 SOAP 部分。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.xml.soap.SOAPMessage.countAttachments()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此消息中附件数量的计数。此计数不包括 SOAP 部分。

@return 作为此 <code>SOAPMessage</code> 对象一部分的 <code>AttachmentPart</code> 对象的数量

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Iterator javax.xml.soap.SOAPMessage.getAttachments()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索所有作为此 <code>SOAPMessage</code> 对象一部分的 <code>AttachmentPart</code> 对象。

@return 可在此消息中所有附件上进行迭代的迭代器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Iterator javax.xml.soap.SOAPMessage.getAttachments(MimeHeaders headers)
<!-- END KEY -->
<!-- BEGIN DATA -->
检索所有头条目匹配指定头的 <code>AttachmentPart</code> 对象。注意，返回的附件除指定的头之外，还可以有其他头。

@param headers 包含要搜索的 MIME 头的 <code>MimeHeaders</code> 对象
@return 一个迭代器，可在所有头匹配任一给定头的附件上进行迭代

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.soap.SOAPMessage.removeAttachments(MimeHeaders headers)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除所有头条目匹配指定头的 <code>AttachmentPart</code> 对象。注意，移除的附件除指定的头之外，还可以有其他头。

@param headers 包含要搜索的 MIME 头的 <code>MimeHeaders</code> 对象
@since SAAJ 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.soap.AttachmentPart javax.xml.soap.SOAPMessage.getAttachment(SOAPElement element) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>SOAPElement</code> 引用的附件关联的 <code>AttachmentPart</code> 对象，如果不存在此类附件，则返回 <code>null</code>。可以通过 {@link <a href="http://www.w3.org/TR/SOAP-attachments#SOAPReferenceToAttachements">SOAP Messages with Attachments</a>} 中描述的 <code>href</code> 属性，或者包含 WS-I Attachments Profile 1.0（用于模式类型 <i>ref:swaRef</i>({@link <a href=http://www.ws-i.org/Profiles/AttachmentsProfile-1.0-2004-08-24.html&quot;>ref:swaRef</a>}) 的元素）中所描述的 URI 的一个 <code>Text</code> 子节点来进行引用。必须支持这两种机制。支持通过 <code>href</code> 属性获取引用同时意味着，对于作为 <i>xop:Include</i> 元素 ({@link <a  href=&quot;http://www.w3.org/2000/xp/Group/3/06/Attachments/XOP.html&quot;>XOP</a>}) 的元素也应该支持此方法。其他引用机制可以由此标准的各个实现支持。有关详细信息，请与您的供应商联系。

@param  element 包含对附件引用的 <code>SOAPElement</code>
@return 引用的 <code>AttachmentPart</code>；如果不存在此类 <code>AttachmentPart</code> 或在此 <code>SOAPElement</code> 中找不到引用，则返回 null。
@throws SOAPException 如果尝试访问附件时出现错误

@since SAAJ 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.soap.SOAPMessage.addAttachmentPart(AttachmentPart AttachmentPart)
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定的 <code>AttachmentPart</code>  对象添加到此 <code>SOAPMessage</code>
 对象。必须先创建 <code>AttachmentPart</code> 对象，然后才能将其添加到消息。

@param AttachmentPart 将作为此 <code>SOAPMessage</code> 对象一部分的 <code>AttachmentPart</code> 对象
@exception IllegalArgumentException

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.soap.AttachmentPart javax.xml.soap.SOAPMessage.createAttachmentPart()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的空 <code>AttachmentPart</code> 对象。注意，调用方法 <code>addAttachmentPart</code> 时必须将此新 <code>AttachmentPart</code> 对象作为参数，以便该对象成为此 <code>SOAPMessage</code> 对象的附件。

@return 可以填充并添加到此 <code>SOAPMessage</code> 对象的新的 <code>AttachmentPart</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.soap.AttachmentPart javax.xml.soap.SOAPMessage.createAttachmentPart(DataHandler dataHandler)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 <code>AttachmentPart</code> 对象并使用给定的 <code>DataHandler</code> 对象填充。

@param dataHandler 将生成此 <code>SOAPMessage</code> 对象内容的 <code>javax.activation.DataHandler</code> 对象
@return 包含给定 <code>DataHandler</code> 对象生成数据的新的 <code>AttachmentPart</code> 对象
@exception IllegalArgumentException 如果指定的 <code>DataHandler</code> 对象存在问题
@see javax.activation.DataHandler
@see javax.activation.DataContentHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.soap.MimeHeaders javax.xml.soap.SOAPMessage.getMimeHeaders()
<!-- END KEY -->
<!-- BEGIN DATA -->
以与传输无关的方式返回此 <code>SOAPMessage</code> 对象所有特定于传输的 MIME 头。

@return 包含 <code>MimeHeader</code> 对象的 <code>MimeHeaders</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.soap.AttachmentPart javax.xml.soap.SOAPMessage.createAttachmentPart(Object content, String contentType)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 <code>AttachmentPart</code> 对象并使用指定内容类型的指定数据填充。<code>Object</code> 的类型应该对应于指定给 <code>Content-Type</code> 的值。

@param content 包含要创建的 <code>AttachmentPart</code> 对象内容的 <code>Object</code>
@param contentType 给出内容类型的 <code>String</code> 对象；例如 &quot;text/xml&quot;、&quot;text/plain&quot; 和 &quot;image/jpeg&quot;
@return 包含给定数据的新的 <code>AttachmentPart</code> 对象
@exception IllegalArgumentException 如果 contentType 不匹配内容对象的类型，或者没有给定内容对象的 <code>DataContentHandler</code> 对象时抛出
@see javax.activation.DataHandler
@see javax.activation.DataContentHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.soap.SOAPMessage.saveChanges() throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用对其所作的所有更改更新此 <code>SOAPMessage</code> 对象。调用 {@link SOAPMessage#writeTo(OutputStream)} 时自动调用此方法。但是，如果是对已收到或已发送的消息进行更改，则需要显式调用方法 <code>saveChanges</code> 保存这些更改。方法 <code>saveChanges</code> 还生成任何可以回读的更改（例如，支持消息 id 的配置文件中 MessageId）。只有在调用 <code>saveChanges</code> 之后，才能保证为发送而创建的消息中的所有 MIME 头具有有效值。<P> 此外，此方法标记了位置点，取自所有 <code>AttachmentPart</code> 对象组件的数据在该点处被拉入消息。<P>

@exception <code>SOAPException</code> 如果在保存此消息的更改时出现问题。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.xml.soap.SOAPMessage.saveRequired()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示是否此 <code>SOAPMessage</code> 对象需要调用方法 <code>saveChanges</code>。

@return 如果需要调用 <code>saveChanges</code>，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.soap.SOAPMessage.writeTo(OutputStream out) throws javax.xml.soap.SOAPException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>SOAPMessage</code> 对象写入给定输出流。具体化格式在 SOAP 1.1 with Attachments 规范中定义。<P> 如果没有附件，则只写出 XML 流。对于有附件的消息，<code>writeTo</code> 写出 MIME 编码的字节流。<P> 注意，此方法不写出特定于传输的消息的 MIME Header

@param out <code>SOAPMessage</code> 对象将写入的 <code>OutputStream</code> 对象
@exception IOException 如果发生 I/O 错误
@exception SOAPException 在具体化此 SOAP 消息时出现问题

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.soap.SOAPMessage.setProperty(String property, Object value) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定值与指定属性关联。如果已经有与此属性关联的值，则替换旧值。<p> 有效属性名包括 {@link SOAPMessage#WRITE_XML_DECLARATION} 和 {@link SOAPMessage#CHARACTER_SET_ENCODING}。所有这些标准 SAAJ 属性都以 &quot;javax.xml.soap&quot; 为前缀。供应商也可以添加特定于实现的属性。这些属性必须以供应商所独有的包名称为前缀。<p> 将属性 <code>WRITE_XML_DECLARATION</code> 设置为 <code>&quot;true&quot;</code> 会导致在 SOAP 消息的起始处写出 XML Declaration。默认值 &quot;false&quot; 表示取消此声明。<p> 属性 <code>CHARACTER_SET_ENCODING</code> 默认为值 <code>&quot;utf-8&quot;</code>，该值将导致使用 UTF-8 编码 SOAP 消息。将 <code>CHARACTER_SET_ENCODING</code> 设置为 <code>&quot;utf-16&quot;</code> 将导致使用 UTF-16 编码 SOAP 消息。 <p> 某些实现可能允许除 UTF-8 和 UTF-16 之外的编码。有关详细信息，请参阅供应商文档。

@param property 要关联指定值的属性。
@param value 要与指定属性关联的值
@exception SOAPException 如果无法识别属性名。
@since SAAJ 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.xml.soap.SOAPMessage.getProperty(String property) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
检索指定属性的值。

@param property 要检索的属性名称
@return 与指定属性关联的值；如果不存在此类属性，则返回 <code>null</code>。
@exception SOAPException 如果无法识别属性名。
@since SAAJ 1.2

<!-- END DATA -->
