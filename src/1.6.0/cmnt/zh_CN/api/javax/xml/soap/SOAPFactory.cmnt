<!-- BEGIN KEY -->
public abstract class javax.xml.soap.SOAPFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SOAPFactory</code> 是用来创建存在于 SOAP XML 树中的各种对象的工厂。<code>SOAPFactory</code> 可以用于创建最终成为 SOAP 部分的 XML 片段。这些片段可以作为 {@link SOAPHeaderElement}、{@link SOAPBodyElement}、{@link SOAPEnvelope} 或其他 {@link SOAPElement} 对象的子级插入。<code>SOAPFactory</code> 还具有创建 <code>javax.xml.soap.Detail</code> 对象以及 <code>java.xml.soap.Name</code> 对象的方法。


<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.soap.SOAPElement javax.xml.soap.SOAPFactory.createElement(Element domElement) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据现有的 DOM <code>Element</code> 创建 <code>SOAPElement</code> 对象。如果作为参数传入的 DOM <code>Element</code> 已经是一个 <code>SOAPElement</code>，那么此方法必须不作任何修改地返回该参数。否则，会创建新的 <code>SOAPElement</code> 并进行此 <code>domElement</code> 参数的深层复制。返回值的具体类型将取决于 <code>domElement</code> 参数的名称。如果以 <code>domElement</code> 为根的树的任何部分违背了 SOAP 规则，则会抛出 <code>SOAPException</code>。
 
@param domElement 要复制的 <code>Element</code>。
 
@return 一个新的 <code>SOAPElement</code>，它是 <code>domElement</code> 的副本。
 
@exception SOAPException 如果在创建 <code>SOAPElement</code> 对象时存在错误
 
@since SAAJ 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.soap.SOAPElement javax.xml.soap.SOAPFactory.createElement(Name name) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建使用给定 <code>Name</code> 对象初始化的 <code>SOAPElement</code> 对象。返回值的具体类型将取决于提供给新 <code>SOAPElement</code> 的名称。例如，一个带有名称 &quot;{http://www.w3.org/2003/05/soap-envelope}Envelope&quot; 的新 <code>SOAPElement</code> 会导致创建支持 SOAP 1.2 行为的 <code>SOAPEnvelope</code>。

@param name 带有新元素 XML 名称的 <code>Name</code> 对象

@return 创建的新 <code>SOAPElement</code> 对象

@exception SOAPException 如果在创建 <code>SOAPElement</code> 对象时出现错误
@see SOAPFactory#createElement(javax.xml.namespace.QName)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.soap.SOAPElement javax.xml.soap.SOAPFactory.createElement(QName qname) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建使用给定 <code>QName</code> 对象初始化的 <code>SOAPElement</code> 对象。返回值的具体类型将取决于提供给新 <code>SOAPElement</code> 的名称。例如，一个带有名称 &quot;{http://www.w3.org/2003/05/soap-envelope}Envelope&quot; 的新 <code>SOAPElement</code> 会导致创建支持 SOAP 1.2 行为的 <code>SOAPEnvelope</code>。

@param qname 带有新元素 XML 名称的 <code>QName</code> 对象

@return 创建的新 <code>SOAPElement</code> 对象

@exception SOAPException 如果在创建 <code>SOAPElement</code> 对象时出现错误
@see SOAPFactory#createElement(Name)
@since SAAJ 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.soap.SOAPElement javax.xml.soap.SOAPFactory.createElement(String localName) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建使用给定本地名称初始化的 <code>SOAPElement</code> 对象。 

@param localName 给出新元素本地名称的 <code>String</code>

@return 创建的新 <code>SOAPElement</code> 对象

@exception SOAPException 如果在创建 <code>SOAPElement</code> 对象时存在错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.soap.SOAPElement javax.xml.soap.SOAPFactory.createElement(String localName, String prefix, String uri) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用本地名称、前缀和 URI 创建新的 <code>SOAPElement</code> 对象。返回值的具体类型将取决于提供给新 <code>SOAPElement</code> 的名称。例如，一个带有名称 &quot;{http://www.w3.org/2003/05/soap-envelope}Envelope&quot; 的新 <code>SOAPElement</code> 会导致创建支持 SOAP 1.2 行为的 <code>SOAPEnvelope</code>。

@param localName 给出新元素本地名称的 <code>String</code>
@param prefix 此 <code>SOAPElement</code> 的前缀
@param uri 给出新元素所属名称空间 URI 的 <code>String</code>

@exception SOAPException 如果在创建 <code>SOAPElement</code> 对象时存在错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.soap.Detail javax.xml.soap.SOAPFactory.createDetail() throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建充当 <code>DetailEntry</code> 对象容器的新 <code>Detail</code> 对象。
 <P>
此工厂方法创建 <code>Detail</code> 对象，用于不可能使用 <code>SOAPFault</code> 抽象的情况。

@return 一个 <code>Detail</code> 对象
@throws SOAPException 如果存在 SOAP 错误
@throws UnsupportedOperationException 如果为 SOAPFactory 指定的协议是 <code>DYNAMIC_SOAP_PROTOCOL</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.soap.SOAPFault javax.xml.soap.SOAPFactory.createFault(String reasonText, QName faultCode) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建使用给定 <code>reasonText</code> 和 <code>faultCode</code> 初始化的新 <code>SOAPFault</code> 对象
@param reasonText 错误的 ReasonText/FaultString
@param faultCode 错误的 FaultCode
@return 一个 <code>SOAPFault</code> 对象
@throws SOAPException 如果存在 SOAP 错误
@since SAAJ 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.soap.SOAPFault javax.xml.soap.SOAPFactory.createFault() throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的默认 <code>SOAPFault</code> 对象
@return 一个 <code>SOAPFault</code> 对象
@throws SOAPException 如果存在 SOAP 错误
@since SAAJ 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.soap.Name javax.xml.soap.SOAPFactory.createName(String localName, String prefix, String uri) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建使用给定本地名称、名称空间前缀和名称空间 URI 初始化的新 <code>Name</code> 对象。
 <P>
此工厂方法创建 <code>Name</code> 对象，用于不可能使用 <code>SOAPEnvelope</code> 抽象的情况。

@param localName 给出本地名称的 <code>String</code>
@param prefix 给出名称空间前缀的 <code>String</code>
@param uri 给出名称空间 URI 的 <code>String</code>
@return 使用给定本地名称、名称空间前缀和名称空间 URI 初始化的 <code>Name</code> 对象
@throws SOAPException 如果存在 SOAP 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.soap.Name javax.xml.soap.SOAPFactory.createName(String localName) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建使用给定本地名称初始化的新 <code>Name</code> 对象。
 <P>
此工厂方法创建 <code>Name</code> 对象，用于不可能使用 <code>SOAPEnvelope</code> 抽象的情况。 

@param localName 给出本地名称的 <code>String</code>
@return 使用给定本地名称初始化的 <code>Name</code> 对象
@throws SOAPException 如果存在 SOAP 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.soap.SOAPFactory javax.xml.soap.SOAPFactory.newInstance() throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的 <code>SOAPFactory</code> 对象，该对象是默认实现 (SOAP 1.1) 的实例。

此方法使用以下查找过程顺序来确定要加载的 SOAPFactory 实现类：
 <UL>
<LI> 使用 javax.xml.soap.SOAPFactory 系统属性。
<LI> 使用 JRE 文件夹中的属性文件 &quot;lib/jaxm.properties&quot;。此配置文件格式是标准的 java.util.Properties 格式且包含实现类的完全限定名，其中实现类的键是上文定义的系统属性。
<LI> 如果 Services API（在 JAR 规范中进行了详细描述）可用，可以使用它来确定类名称。Services API 将查找在运行时可用的 jar 中 META-INF/services/javax.xml.soap.SOAPFactory 文件中的类名称。
<LI> 使用 SAAJMetaFactory 实例来定位 SOAPFactory 实现类。
 </UL>

@return 新的 <code>SOAPFactory</code> 实例

@exception SOAPException 如果在创建默认 <code>SOAPFactory</code> 时出现错误
@see SAAJMetaFactory

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.soap.SOAPFactory javax.xml.soap.SOAPFactory.newInstance(String protocol) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的 <code>SOAPFactory</code> 对象，该对象是指定实现的实例，此方法使用 SAAJMetaFactory 来定位实现类并创建 SOAPFactory 实例。

@return 新的 <code>SOAPFactory</code> 实例

@param protocol  字符串常量，表示指定 SOAP 工厂实现的协议。可以是 <code>DYNAMIC_SOAP_PROTOCOL</code>、<code>DEFAULT_SOAP_PROTOCOL</code>（等同于 <code>SOAP_1_1_PROTOCOL</code>）或 <code>SOAP_1_2_PROTOCOL</code>。

@exception SOAPException 如果在创建指定 <code>SOAPFactory</code> 时出现错误
@see SAAJMetaFactory
@since SAAJ 1.3

<!-- END DATA -->
