<!-- BEGIN KEY -->
public abstract class javax.xml.soap.SOAPPart extends java.lang.Object implements org.w3c.dom.Document, javax.xml.soap.Node
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SOAPMessage</code> 对象中特定于 SOAP 部分的容器。所有消息都必须有一个 SOAP 部分，因此 <code>SOAPMessage</code> 对象在创建之后将自动获得一个 <code>SOAPPart</code> 对象。
<P>
<code>SOAPPart</code> 对象是一个 MIME 部分，并具有 MIME 头 Content-Id、Content-Location 和 Content-Type。因为 Content-Type 的值必须为 &quot;text/xml&quot;，所以 <code>SOAPPart</code> 对象自动获得 Content-Type 的 MIME 头，且 Content-Type 值已设置为 &quot;text/xml&quot;。消息 SOAP 部分中的所有数据都必须是 XML 格式，因此值必须为 &quot;text/xml&quot;。不是 &quot;text/xml&quot; 类型的内容不能在 <code>SOAPPart</code> 对象中，而必须在 <code>AttachmentPart</code> 对象中。
 <P>
发送消息时，其 SOAP 部分必须将 MIME 头 Content-Type 设置为 &quot;text/xml&quot;。或者换个角度来说，已收到消息的 SOAP 部分必须具有值为 &quot;text/xml&quot; 的 MIME 头 Content-Type。
 <P>
客户端可以通过调用方法 <code>SOAPMessage.getSOAPPart</code> 来访问 <code>SOAPMessage</code> 对象的 <code>SOAPPart</code> 对象。以下代码行（其中 <code>message</code> 是一个 <code>SOAPMessage</code> 对象）检索消息的 SOAP 部分。
 <PRE>
SOAPPart soapPart = message.getSOAPPart();
 </PRE>
 <P>
<code>SOAPPart</code> 对象包含一个 <code>SOAPEnvelope</code> 对象，<code>SOAPEnvelope</code> 对象包含一个 <code>SOAPBody</code> 对象和一个 <code>SOAPHeader</code> 对象。<code>SOAPPart</code> 的 <code>getEnvelope</code> 方法可以用于检索 <code>SOAPEnvelope</code> 对象。
 <P>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.soap.SOAPEnvelope javax.xml.soap.SOAPPart.getEnvelope() throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 <code>SOAPPart</code> 对象关联的 <code>SOAPEnvelope</code> 对象。获取 SOAP 信封后，可以用此方法来获取它的内容。

@return 此 <code>SOAPPart</code> 对象的 <code>SOAPEnvelope</code> 对象
@exception SOAPException 如果存在 SOAP 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.soap.SOAPPart.getContentId()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索名为 &quot;Content-Id&quot; 的 MIME 头的值。

@return 一个 <code>String</code>，给出名为 &quot;Content-Id&quot; 的 MIME 头的值
@see #setContentId

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.soap.SOAPPart.getContentLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索名为 &quot;Content-Location&quot; 的 MIME 头的值。

@return 一个 <code>String</code>，给出名为 &quot;Content-Location&quot; 的 MIME 头的值
@see #setContentLocation

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.soap.SOAPPart.setContentId(String contentId)
<!-- END KEY -->
<!-- BEGIN DATA -->
将名为 &quot;Content-Id&quot; 的 MIME 头的值设置为给定 <code>String</code>。

@param contentId 一个 <code>String</code>，给出 MIME 头 &quot;Content-Id&quot; 的值

@exception IllegalArgumentException 如果在设置内容 id 时出现问题
@see #getContentId

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.soap.SOAPPart.setContentLocation(String contentLocation)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 MIME 头 &quot;Content-Location&quot; 的值设置为给定 <code>String</code>。

@param contentLocation 一个 <code>String</code>，给出 MIME 头 &quot;Content-Location&quot; 的值
@exception IllegalArgumentException 如果在设置内容位置时出现问题。
@see #getContentLocation

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.soap.SOAPPart.removeMimeHeader(String header)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除所有与给定名称匹配的 MIME 头。

@param header 一个 <code>String</code>，给出要移除的 MIME 头的名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.soap.SOAPPart.removeAllMimeHeaders()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除此 <code>SOAPEnvelope</code> 对象的所有 <code>MimeHeader</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String[] javax.xml.soap.SOAPPart.getMimeHeader(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>SOAPPart</code> 对象中所有由给定 <code>String</code> 标识的 <code>MimeHeader</code> 对象的值。

@param name 头的名称；示例：&quot;Content-Type&quot;
@return 一个 <code>String</code> 数组，给出所有指定头的值
@see #setMimeHeader

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.soap.SOAPPart.setMimeHeader(String name, String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
将与给定头名称匹配的第一个头条目的值更改为给定值，如果现有头都不匹配，则添加一个带有给定名称和值的新头。如果有匹配的头，则此方法清除第一个匹配头的所有现有值，并设置为给定的值。如果多个头都具有给定名称，则此方法移除第一个匹配头之后的所有匹配头。
 <P>
注意，RFC822 头只能包含 US-ASCII 字符。

@param   name    一个 <code>String</code>，给出要搜索的头的名称 
@param   value 一个 <code>String</code>，给出要设置的值。此值将替换第一个匹配头（如果有）的当前值。如果没有匹配的头，则此值将是新 <code>MimeHeader</code> 对象的值。

@exception IllegalArgumentException 如果指定的 mime 头名称或值存在问题
@see #getMimeHeader

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.soap.SOAPPart.addMimeHeader(String name, String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定名称和值创建 <code>MimeHeader</code> 对象，并将其添加到此 <code>SOAPPart</code> 对象。如果已经存在带有指定名称的 <code>MimeHeader</code>，则此方法将指定值添加到已经存在的值中。
 <P>
注意，RFC822 头只能包含 US-ASCII 字符。

@param   name    一个 <code>String</code>，给出头名称 
@param   value   一个 <code>String</code>，给出要设置或要添加的值 
@exception IllegalArgumentException 如果指定的 mime 头名称或值存在问题

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Iterator javax.xml.soap.SOAPPart.getAllMimeHeaders()
<!-- END KEY -->
<!-- BEGIN DATA -->
以可在 <code>MimeHeader</code> 对象上进行迭代的迭代器形式，检索此 <code>SOAPPart</code> 对象的所有头。

@return  一个 <code>Iterator</code> 对象，具有此 <code>SOAPPart</code> 对象的所有 Mime 头

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Iterator javax.xml.soap.SOAPPart.getMatchingMimeHeaders(java.lang.String[] names)
<!-- END KEY -->
<!-- BEGIN DATA -->
检索与给定数组中的名称匹配的所有 <code>MimeHeader</code> 对象。

@param names 一个 <code>String</code> 数组，带有要返回的 Mime 头的名称 
@return  以 <code>Iterator</code> 对象形式返回的与给定数组中任一名称匹配的所有 MIME 头

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Iterator javax.xml.soap.SOAPPart.getNonMatchingMimeHeaders(java.lang.String[] names)
<!-- END KEY -->
<!-- BEGIN DATA -->
检索名称与给定数组中任一名称不匹配的所有 <code>MimeHeader</code> 对象。

@param names 一个 <code>String</code> 数组，带有不要返回的 Mime 头的名称 
@return  此 <code>SOAPPart</code> 对象中与给定数组中任一名称匹配的 MIME 头之外的所有 MIME 头。以 <code>Iterator</code> 对象的形式返回不匹配的 MIME 头。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.soap.SOAPPart.setContent(Source source) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用取自给定 <code>Source</code> 对象的数据设置 <code>SOAPEnvelope</code> 对象的内容。此 <code>Source</code> 必须包含一个有效的 SOAP 文档。

@param source <code>javax.xml.transform.Source</code> 对象，带有要发送的数据

@exception SOAPException 如果在设置源时出现错误。
@see #getContent

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.transform.Source javax.xml.soap.SOAPPart.getContent() throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 JAXP <code>Source</code> 对象的形式返回 SOAPEnvelope 的内容。

@return <code>javax.xml.transform.Source</code> 对象形式的内容

@exception SOAPException 如果实现无法转换指定的 <code>Source</code> 对象
@see #setContent

<!-- END DATA -->
