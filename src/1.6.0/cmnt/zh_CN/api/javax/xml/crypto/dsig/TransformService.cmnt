<!-- BEGIN KEY -->
public abstract class javax.xml.crypto.dsig.TransformService extends java.lang.Object implements javax.xml.crypto.dsig.Transform
<!-- END KEY -->
<!-- BEGIN DATA -->
转换算法和规范算法的服务提供者接口。

<p>每个 <code>TransformService</code> 实例都支持一个特定的转换或规范算法以及 XML 机制类型。要创建 <code>TransformService</code>，需要调用一个静态 {@link #getInstance getInstance} 方法，并传入所需的算法 URI 和 XML 机制类型，例如：

<blockquote><code>TransformService ts = TransformService.getInstance(Transform.XPATH2, &quot;DOM&quot;);</code></blockquote>

<p>使用 {@link java.security.Provider} 机制来注册和加载 <code>TransformService</code> 实现。每个 <code>TransformService</code> 服务提供者实现都应该包括一个 <code>MechanismType</code> 服务属性，用它来标识所支持的 XML 机制类型。如果未指定该属性，则假定 XML 机制类型为 &ldquo;DOM&rdquo;。例如，支持 XPath Filter 2 Transform 和 DOM 机制的服务提供者将在 <code>Provider</code> 子类中指定，如下所示：
 <pre>
put(&quot;TransformService.&quot;+ Transform.XPATH2,
&quot;org.example.XPath2TransformService&quot;);
put(&quot;TransformService.&quot;+ Transform.XPATH2 + &quot; MechanismType&quot;, &quot;DOM&quot;);
 </pre>
支持 DOM 机制类型的 <code>TransformService</code> 实现必须遵守 DOM 互操作性要求，正如 API 概述中 <a href="../../../../../technotes/guides/security/xmldsig/overview.html#DOM Mechanism Requirements">DOM Mechanism Requirements</a> 部分的定义。参见 API 概述的 <a href="../../../../../technotes/guides/security/xmldsig/overview.html#Service Provider">Service Providers</a> 部分的标准机制类型列表。
 <p>
一旦创建了 <code>TransformService</code>，就可以使用它来处理 <code>Transform</code> 或 <code>CanonicalizationMethod</code> 对象。如果 <code>Transform</code> 或 <code>CanonicalizationMethod</code> 以 XML 形式存在（例如，在验证现有的 <code>XMLSignature</code> 时），则必须先调用 {@link #init(XMLStructure, XMLCryptoContext)} 方法来初始化该转换并提供文档上下文（即使没有参数）。此外，如果从头创建 <code>Transform</code> 或 <code>CanonicalizationMethod</code>，则将调用 {@link #init(TransformParameterSpec)} 方法来初始化带参数的转换，并调用 {@link #marshalParams marshalParams} 方法将参数编组到 XML 且提供带文档上下文的转换。最后，调用 {@link #transform transform} 方法来执行转换。
 <p>
<b>并发访问</b>
<p>可保证此类的静态方法是线程安全的。多个线程可以并发调用此类中所定义的静态方法，而不会产生不良效果。

<p>但是，对于此类所定义的非静态方法并非如此。除非具体的提供者另行指定，否则需要并发访问单个 <code>TransformService</code> 实例的多个线程应该在它们之间实现同步并提供所需的锁定。对于每个线程都操作一个不同 <code>TransformService</code> 实例的多个线程而言，无需实现同步。

@author Sean Mullan
@author JSR 105 Expert Group
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.xml.crypto.dsig.TransformService()
<!-- END KEY -->
<!-- BEGIN DATA -->
默认的构造方法，由子类调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.crypto.dsig.TransformService javax.xml.crypto.dsig.TransformService.getInstance(String algorithm, String mechanismType) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回支持指定算法 URI 的 <code>TransformService</code>（比如：{@link Transform#XPATH2}）和机制类型（比如：DOM）。

<p>此方法使用标准的 JCA 提供者查找机制来查找并实例化所需算法的 <code>TransformService</code> 实现和 <code>MechanismType</code> 服务属性。它将从首选的 <code>Provider</code> 开始，遍历已注册的安全 <code>Provider</code> 列表。返回取自第一个支持指定算法和机制类型的 <code>Provider</code> 的新 <code>TransformService</code> 对象。 
 
<p> 注意，已注册提供者的列表可以通过 {@link Security#getProviders() Security.getProviders()} 方法获得。 

@param algorithm 算法的 URI
@param mechanismType XML 处理机制和表示形式的类型
@return 新的 <code>TransformService</code>
@throws NullPointerException 如果 <code>algorithm</code> 或 <code>mechanismType</code> 为 <code>null</code>
@throws NoSuchAlgorithmException 如果没有 <code>Provider</code> 支持指定算法和机制类型的 <code>TransformService</code> 实现
@see Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.crypto.dsig.TransformService javax.xml.crypto.dsig.TransformService.getInstance(String algorithm, String mechanismType, Provider provider) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回支持指定算法 URI（比如：{@link Transform#XPATH2}）和机制类型（比如：DOM）的 <code>TransformService</code>，由指定提供者提供。注意，指定的 <code>Provider</code> 对象不必已经在提供者列表中注册。 

@param algorithm 算法的 URI
@param mechanismType XML 处理机制和表示形式的类型
@param provider <code>Provider</code> 对象
@return 新的 <code>TransformService</code>
@throws NullPointerException 如果 <code>provider</code>、<code>algorithm</code> 或 <code>mechanismType</code> 为 <code>null</code>
@throws NoSuchAlgorithmException 如果不能从指定的 <code>Provider</code> 对象得到指定算法和机制类型的 <code>TransformService</code> 实现
@see Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.crypto.dsig.TransformService javax.xml.crypto.dsig.TransformService.getInstance(String algorithm, String mechanismType, String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回支持指定算法 URI（比如：{@link Transform#XPATH2}）和机制类型（比如：DOM）的 <code>TransformService</code>，由指定提供者提供。指定的提供者必须是已在安全提供者列表中注册的。 

<p>注意，已注册提供者的列表可以通过 {@link Security#getProviders() Security.getProviders()} 方法获得。

@param algorithm 算法的 URI
@param mechanismType XML 处理机制和表示形式的类型
@param provider 提供者的字符串名称
@return 新的 <code>TransformService</code>
@throws NoSuchProviderException 如果指定的提供者没有在安全提供者列表中注册
@throws NullPointerException 如果 <code>provider</code>、<code>mechanismType</code> 或 <code>algorithm</code> 为 <code>null</code>
@throws NoSuchAlgorithmException 如果不能从指定的提供者得到指定算法和机制类型的 <code>TransformService</code> 实现
@see Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.xml.crypto.dsig.TransformService.getMechanismType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>TransformService</code> 支持的机制类型。

@return 机制类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.xml.crypto.dsig.TransformService.getAlgorithm()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>TransformService</code> 支持的算法 URI。

@return 算法 URI

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider javax.xml.crypto.dsig.TransformService.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>TransformService</code> 的提供者。

@return 提供者

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.crypto.dsig.TransformService.init(TransformParameterSpec params) throws java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的参数初始化此 <code>TransformService</code>。

<p>如果参数以 XML 形式存在，则应该使用 {@link #init(XMLStructure, XMLCryptoContext)} 方法初始化 <code>TransformService</code>。

@param params 算法参数（如果该参数不是必需的或是可选的，则为 <code>null</code>）
@throws InvalidAlgorithmParameterException 如果指定参数对于此算法无效

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.crypto.dsig.TransformService.marshalParams(XMLStructure parent, XMLCryptoContext context) throws javax.xml.crypto.MarshalException
<!-- END KEY -->
<!-- BEGIN DATA -->
对特定于算法的参数进行编组。如果没有要编组的参数，则此方法将返回且不会抛出异常。

@param parent 特定于机制的结构，包含应追加到已编组参数中的父节点
@param context 包含其他上下文的 <code>XMLCryptoContext</code>（如果不适用，则该参数为 <code>null</code>）
@throws ClassCastException 如果 <code>parent</code> 类型或 <code>context</code> 类型与此 <code>TransformService</code> 不兼容
@throws NullPointerException 如果 <code>parent</code> 为 <code>null</code>
@throws MarshalException 如果无法对参数进行编组

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.crypto.dsig.TransformService.init(XMLStructure parent, XMLCryptoContext context) throws java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的参数和文档上下文初始化此 <code>TransformService</code>。 

@param parent 包含父结构的特定于机制的结构
@param context 包含其他上下文的 <code>XMLCryptoContext</code> （如果不适用，则该参数为 <code>null</code>）
@throws ClassCastException 如果 <code>parent</code> 类型或 <code>context</code> 类型与此 <code>TransformService</code> 不兼容
@throws NullPointerException 如果 <code>parent</code> 为 <code>null</code>
@throws InvalidAlgorithmParameterException 如果指定参数对于此算法无效

<!-- END DATA -->
