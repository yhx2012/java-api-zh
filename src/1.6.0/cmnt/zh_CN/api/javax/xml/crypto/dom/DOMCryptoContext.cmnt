<!-- BEGIN KEY -->
public class javax.xml.crypto.dom.DOMCryptoContext extends java.lang.Object implements javax.xml.crypto.XMLCryptoContext
<!-- END KEY -->
<!-- BEGIN DATA -->
此类提供 {@link XMLCryptoContext} 接口特定于 DOM 的实现。它还包括特定于基于 DOM 的实现的其他方法，用于注册和检索包含类型 ID 的属性的元素。

@author Sean Mullan
@author JSR 105 Expert Group
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.xml.crypto.dom.DOMCryptoContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
默认的构造方法。（由子类构造方法调用）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.crypto.dom.DOMCryptoContext.getNamespacePrefix(String namespaceURI, String defaultPrefix)
<!-- END KEY -->
<!-- BEGIN DATA -->
此实现使用内部 {@link HashMap} 来获取指定 URI 所映射的前缀。如果指定的 URI 映射到 <code>null</code>，则返回 <code>defaultPrefix</code>。

@throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.crypto.dom.DOMCryptoContext.putNamespacePrefix(String namespaceURI, String prefix)
<!-- END KEY -->
<!-- BEGIN DATA -->
此实现使用内部 {@link HashMap} 将 URI 映射到指定的前缀。

@throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.crypto.dom.DOMCryptoContext.setBaseURI(String baseURI)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.xml.crypto.dom.DOMCryptoContext.getProperty(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
此实现使用内部 {@link HashMap} 获取指定名称所映射的对象。 

@throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.xml.crypto.dom.DOMCryptoContext.setProperty(String name, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
此实现使用内部 {@link HashMap} 将名称映射到指定对象。

@throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Element javax.xml.crypto.dom.DOMCryptoContext.getElementById(String idValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回具有指定 ID 属性值的 <code>Element</code>。

<p>此实现使用内部 {@link HashMap} 获取指定属性值所映射的元素。 

@param idValue ID 值
@return 具有指定 ID 属性值的 <code>Element</code>；如果没有，则返回 <code>null</code>。
@throws NullPointerException 如果 <code>idValue</code> 为 <code>null</code>
@see #setIdAttributeNS

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.crypto.dom.DOMCryptoContext.setIdAttributeNS(Element element, String namespaceURI, String localName)
<!-- END KEY -->
<!-- BEGIN DATA -->
将名称空间 URI 和本地名称指定的元素属性注册为类型 ID。该属性必须有一个非空值。

<p>此实现使用内部 {@link HashMap} 将属性值映射到指定元素。

@param element 元素
@param namespaceURI 属性的名称空间 URI（如果不适用，则指定 <code>null</code>）
@param localName 属性的本地名称
@throws IllegalArgumentException 如果 <code>localName</code> 不是指定元素的属性，或者它不包含特定值
@throws NullPointerException 如果 <code>element</code> 或 <code>localName</code> 为 <code>null</code>
@see #getElementById

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator javax.xml.crypto.dom.DOMCryptoContext.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回可在此 <code>DOMCryptoContext</code> 的 Id/Element 映射集上进行迭代的只读迭代器。试图通过 {@link Iterator#remove} 方法修改该映射集将导致抛出 <code>UnsupportedOperationException</code>。返回的映射没有特定的顺序。迭代的每个元素都被表示为一个 {@link java.util.Map.Entry}。如果在进行迭代期间修改了 <code>DOMCryptoContext</code>，则迭代的结果是不确定的。

@return 可在映射集上进行迭代的只读迭代器

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.xml.crypto.dom.DOMCryptoContext.get(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
此实现使用内部 {@link HashMap} 获取指定键所映射的对象。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.xml.crypto.dom.DOMCryptoContext.put(Object key, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
此实现使用内部 {@link HashMap} 将键映射到指定的对象。

@throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
