<!-- BEGIN KEY -->
public interface javax.xml.crypto.XMLCryptoContext
<!-- END KEY -->
<!-- BEGIN DATA -->
包含用于 XML 加密操作的通用上下文信息。

<p>此接口包含一些方法可用来设置和检索那些影响 XML 签名或 XML 加密结构处理的属性。

<p>注意，<code>XMLCryptoContext</code> 实例可以包含特定于所使用的 XML 加密结构的信息和状态。如果 <code>XMLCryptoContext</code> 使用多个结构（例如，不应该使用相同的 {@link javax.xml.crypto.dsig.XMLValidateContext} 实例来验证两个不同的 {@link javax.xml.crypto.dsig.XMLSignature} 对象），则结果是不可预知的。 

@author Sean Mullan
@author JSR 105 Expert Group
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.crypto.XMLCryptoContext.getBaseURI()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回基本 URI。

@return 基本 URI；如果未指定，则返回 <code>null</code>
@see #setBaseURI(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.crypto.XMLCryptoContext.setBaseURI(String baseURI)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置基本 URI。

@param baseURI 基本 URI；或者为 <code>null</code>，表示移除当前值
@throws IllegalArgumentException 如果 <code>baseURI</code> 与 RFC 2396 不兼容
@see #getBaseURI

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.crypto.KeySelector javax.xml.crypto.XMLCryptoContext.getKeySelector()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于查找某个密钥的密钥选择器。

@return 密钥选择器；如果未指定，则返回 <code>null</code>
@see #setKeySelector(KeySelector)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.crypto.XMLCryptoContext.setKeySelector(KeySelector ks)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于查找某个密钥的密钥选择器。

@param ks 密钥选择器；或者为 <code>null</code>，表示移除当前设置
@see #getKeySelector

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.crypto.URIDereferencer javax.xml.crypto.XMLCryptoContext.getURIDereferencer()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用来取消引用 {@link URIReference} 的 <code>URIDereferencer</code>。

@return <code>URIDereferencer</code>；如果未指定，则返回 <code>null</code>
@see #setURIDereferencer(URIDereferencer)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.crypto.XMLCryptoContext.setURIDereferencer(URIDereferencer dereferencer)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用来取消引用 {@link URIReference} 的 <code>URIDereferencer</code>。使用指定的 <code>URIDereferencer</code> 来代替某一实现的默认 <code>URIDereferencer</code>。

@param dereferencer <code>URIDereferencer</code>；或者为 <code>null</code>，表示移除任何当前设置
@see #getURIDereferencer

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.crypto.XMLCryptoContext.getNamespacePrefix(String namespaceURI, String defaultPrefix)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与指定的名称空间 URI 关联的名称空间前缀。如果没有将指定的名称空间 URI 绑定到某一前缀，则返回指定的默认前缀。要将名称空间 URI 绑定到某一前缀，请调用 {@link #putNamespacePrefix putNamespacePrefix} 方法。

@param namespaceURI 名称空间 URI
@param defaultPrefix 在没有将指定的名称空间 URI 绑定到某一前缀的情况下将被返回的前缀。
@return 与指定的名称空间 URI 相关联的前缀，如果没有注册 URI，则返回 <code>defaultPrefix</code>。如果已注册名称空间 URI，但没有前缀，则返回一个空字符串 (<code>&quot;&quot;</code>)。
@throws NullPointerException 如果 <code>namespaceURI</code> 为 <code>null</code>
@see #putNamespacePrefix(String, String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.crypto.XMLCryptoContext.putNamespacePrefix(String namespaceURI, String prefix)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的名称空间 URI 映射到指定的前缀。如果已经存在与指定的名称空间 URI 关联的前缀，则用指定前缀替换以前使用的前缀。

@param namespaceURI 名称空间 URI
@param prefix 名称空间前缀（或者为 <code>null</code>，表示移除所有现有映射）。指定空字符串 (<code>&quot;&quot;</code>) 则表示不将任何前缀绑定到名称空间 URI。
@return 与指定的名称空间 URI 关联以前使用的前缀，如果没有任何前缀，则返回 <code>null</code>
@throws NullPointerException 如果 <code>namespaceURI</code> 为 <code>null</code>
@see #getNamespacePrefix(String, String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.crypto.XMLCryptoContext.getDefaultNamespacePrefix()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回默认名称空间前缀。默认的名称空间前缀是用于所有名称空间 URI 的前缀，该前缀未通过 {@link #putNamespacePrefix putNamespacePrefix} 方法显式设置。

@return 默认的名称空间前缀；如果未设置任何前缀，则返回 <code>null</code>。
@see #setDefaultNamespacePrefix(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.crypto.XMLCryptoContext.setDefaultNamespacePrefix(String defaultPrefix)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置默认的名称空间前缀。此方法可设置用于所有没有通过 {@link #putNamespacePrefix putNamespacePrefix} 方法显式设置的名称空间 URI 的名称空间前缀。

@param defaultPrefix 默认的名称空间前缀；或者为 <code>null</code>，表示移除当前设置。指定空字符串 (<code>&quot;&quot;</code>) 则表示不绑定任何前缀。
@see #getDefaultNamespacePrefix

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.xml.crypto.XMLCryptoContext.setProperty(String name, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置指定的属性。

@param name 属性名称
@param value 要设置的属性值
@return 指定属性的先前值；如果没有这样值，则返回 <code>null</code>
@throws NullPointerException 如果 <code>name</code> 为 <code>null</code>
@see #getProperty(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.xml.crypto.XMLCryptoContext.getProperty(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定属性的值。

@param name 属性名称
@return 指定的属性的当前值；如果没有这样的值，则返回 <code>null</code>
@throws NullPointerException 如果 <code>name</code> 为 <code>null</code>
@see #setProperty(String, Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.xml.crypto.XMLCryptoContext.get(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此上下文将指定键映射到的值。

<p>更正式地说，如果此上下文包含键 <code>k</code> 到值 <code>v</code> 的映射关系：<code>(key==null ? k==null :key.equals(k))</code>，则此方法返回 <code>v</code>；否则返回 <code>null</code>。（最多只能有一个这样的映射关系）。

<p>对于检索特定于使用此上下文的加密操作的任意信息，此方法很有用。 

@param key 关联值将被返回的键
@return 此上下文将指定键映射到的值；如果没有与该键有关的映射关系，则返回 <code>null</code>
@see #put(Object, Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.xml.crypto.XMLCryptoContext.put(Object key, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定值与此上下文中的指定键关联。如果此上下文中以前包含一个此键的映射关系，则用指定值替换原来的值。

<p>对于存储特定于使用此上下文的加密操作的任意信息，此方法很有用。 

@param key 将与指定值关联的键
@param value 将与指定键关联的值
@return 与指定键关联的以前的值；如果没有与该键有关的映射关系，则返回 <code>null</code>
@throws IllegalArgumentException 如果此键或值的某个方面阻止它存储在此上下文中
@see #get(Object)

<!-- END DATA -->
