<!-- BEGIN KEY -->
public class javax.xml.crypto.dsig.dom.DOMSignContext extends javax.xml.crypto.dom.DOMCryptoContext implements javax.xml.crypto.dsig.XMLSignContext
<!-- END KEY -->
<!-- BEGIN DATA -->
特定于 DOM 的 {@link XMLSignContext}。此类包含一些其他方法，用来指定生成签名时被编组的 {@link XMLSignature} 对象在 DOM 树中的位置。

<p>注意，<code>DOMSignContext</code> 实例可以包含特定于与其一起使用的 XML 签名结构的信息和状态。如果 <code>DOMSignContext</code> 与不同的签名结构一起使用（例如，不应该使用相同的 <code>DOMSignContext</code> 实例对两个不同的 {@link XMLSignature} 对象进行签名），则结果是不可预料的。

@author Sean Mullan
@author JSR 105 Expert Group
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.crypto.dsig.dom.DOMSignContext(Key signingKey, Node parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带有指定签名密钥和父节点的 <code>DOMSignContext</code>。签名密钥存储在 {@link #getKeySelector getKeySelector} 方法返回的 {@link KeySelector#singletonKeySelector singleton KeySelector} 中。已编组的 <code>XMLSignature</code> 将被添加为指定父节点的最后一个子元素，除非调用 {@link #setNextSibling setNextSibling} 方法指定了下一个兄弟节点。

@param signingKey 签名密钥
@param parent 父节点
@throws NullPointerException 如果 <code>signingKey</code> 或 <code>parent</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.crypto.dsig.dom.DOMSignContext(Key signingKey, Node parent, Node nextSibling)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带有指定的签名密钥、父节点和下一个兄弟节点的 <code>DOMSignContext</code>。签名密钥存储在 {@link #getKeySelector getKeySelector} 方法返回的 {@link KeySelector#singletonKeySelector singleton KeySelector} 中。已编组的 <code>XMLSignature</code> 将插入为指定父节点的一个子元素，且位于指定的下一个兄弟节点前面。

@param signingKey 签名密钥
@param parent 父节点
@param nextSibling 下一个兄弟节点
@throws NullPointerException 如果 <code>signingKey</code>、<code>parent</code> 或 <code>nextSibling</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.crypto.dsig.dom.DOMSignContext(KeySelector ks, Node parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带有指定密钥选择器和父节点的 <code>DOMSignContext</code>。已编组的 <code>XMLSignature</code> 将添加为指定父节点的最后一个子元素，除非调用 {@link #setNextSibling setNextSibling} 方法指定了下一个兄弟节点。

@param ks 密钥选择器
@param parent 父节点
@throws NullPointerException 如果 <code>ks</code> 或 <code>parent</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.crypto.dsig.dom.DOMSignContext(KeySelector ks, Node parent, Node nextSibling)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带有指定密钥选择器、父节点和下一个兄弟节点的 <code>DOMSignContext</code>。已编组的 <code>XMLSignature</code> 将插入为指定父节点的一个子元素，且位于指定的下一个兄弟节点前面。

@param ks 密钥选择器
@param parent 父节点
@param nextSibling 下一个兄弟节点
@throws NullPointerException 如果 <code>ks</code>、<code>parent</code> 或 <code>nextSibling</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.crypto.dsig.dom.DOMSignContext.setParent(Node parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置父节点。

@param parent 父节点。已编组的 <code>XMLSignature</code> 将添加为此节点的子元素。
@throws NullPointerException 如果 <code>parent</code> 为 <code>null</code>
@see #getParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.crypto.dsig.dom.DOMSignContext.setNextSibling(Node nextSibling)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置下一个兄弟节点。 

@param nextSibling 下一个兄弟节点。已编组的 <code>XMLSignature</code> 将插入到此节点的前面。指定 <code>null</code> 表示移除当前设置。
@see #getNextSibling

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node javax.xml.crypto.dsig.dom.DOMSignContext.getParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回父节点。

@return 父节点（不能为 <code>null</code>）
@see #setParent(Node)

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node javax.xml.crypto.dsig.dom.DOMSignContext.getNextSibling()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 nextSibling 节点。

@return nextSibling 节点；如果没有指定，则返回 <code>null</code>。
@see #setNextSibling(Node)

<!-- END DATA -->
