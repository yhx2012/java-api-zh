<!-- BEGIN KEY -->
public class javax.xml.crypto.dsig.dom.DOMValidateContext extends javax.xml.crypto.dom.DOMCryptoContext implements javax.xml.crypto.dsig.XMLValidateContext
<!-- END KEY -->
<!-- BEGIN DATA -->
特定于 DOM 的 {@link XMLValidateContext}。此类包含一些其他方法，用来指定在 DOM 树中对 {@link XMLSignature} 进行解组和验证的位置。

<p>注意，如果调用者在创建 <code>XMLSignature</code> 之后对底层 DOM 树的内容进行修改，则已解组 <code>XMLSignature</code> 的行为是不确定的。

<p>还要注意的是，<code>DOMValidateContext</code> 实例可以包含特定于与其一起使用的 XML 签名结构的信息和状态。如果 <code>DOMValidateContext</code> 与不同的签名结构一起使用（例如，不应该使用相同的 <code>DOMValidateContext</code> 实例来验证两个不同的 {@link XMLSignature} 对象），则结果是不可预料的。

@author Sean Mullan
@author JSR 105 Expert Group
@since 1.6
@see XMLSignatureFactory#unmarshalXMLSignature(XMLValidateContext)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.crypto.dsig.dom.DOMValidateContext(KeySelector ks, Node node)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建包含指定密钥选择器和节点的 <code>DOMValidateContext</code>。

@param ks 用于查找验证密钥的密钥选择器
@param node 节点
@throws NullPointerException 如果 <code>ks</code> 或 <code>node</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.crypto.dsig.dom.DOMValidateContext(Key validatingKey, Node node)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建包含指定密钥和节点的 <code>DOMValidateContext</code>。验证密钥将存储在调用 {@link #getKeySelector getKeySelector} 方法时返回的 {@link KeySelector#singletonKeySelector singleton KeySelector} 中。

@param validatingKey 验证密钥
@param node 节点
@throws NullPointerException 如果 <code>validatingKey</code> 或 <code>node</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.crypto.dsig.dom.DOMValidateContext.setNode(Node node)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置节点。

@param node 节点
@throws NullPointerException 如果 <code>node</code> 为 <code>null</code>
@see #getNode

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node javax.xml.crypto.dsig.dom.DOMValidateContext.getNode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回节点。

@return 节点（不能为 <code>null</code>）
@see #setNode(Node)

<!-- END DATA -->
