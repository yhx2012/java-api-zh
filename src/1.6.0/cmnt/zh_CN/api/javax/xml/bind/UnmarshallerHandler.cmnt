<!-- BEGIN KEY -->
public interface javax.xml.bind.UnmarshallerHandler extends org.xml.sax.ContentHandler
<!-- END KEY -->
<!-- BEGIN DATA -->
作为 SAX ContentHandler 实现的 Unmarshaller。
 
 <p>
应用程序可以使用此接口将其 JAXB 提供者用作 XML 管线中的一个组件。例如：
 
 <pre>
JAXBContext context = JAXBContext.newInstance( &quot;org.acme.foo&quot; );

Unmarshaller unmarshaller = context.createUnmarshaller();
 
UnmarshallerHandler unmarshallerHandler = unmarshaller.getUnmarshallerHandler();

SAXParserFactory spf = SAXParserFactory.newInstance();
spf.setNamespaceAware( true );
 
XMLReader xmlReader = spf.newSAXParser().getXMLReader();
xmlReader.setContentHandler( unmarshallerHandler );
xmlReader.parse(new InputSource( new FileInputStream( XML_FILE ) ) );

MyObject myObject= (MyObject)unmarshallerHandler.getResult();                          
 </pre>
 
 <p>
此接口是可重用的：即使用户解组某一对象时失败，她/他仍可开始新一轮的解组。
 
@author<ul><li>Kohsuke KAWAGUCHI, Sun Microsystems, Inc.</li></ul>
@version $Revision: 1.5 $ $Date: 2006-09-18 09:02:25 $
@see Unmarshaller#getUnmarshallerHandler()
@since JAXB1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.xml.bind.UnmarshallerHandler.getResult() throws javax.xml.bind.JAXBException, java.lang.IllegalStateException
<!-- END KEY -->
<!-- BEGIN DATA -->
获得解组的结果。此方法只能在此处理程序接收 endDocument SAX 事件之后调用。
 
@exception IllegalStateException 如果在此处理程序接收 endDocument 事件之前调用此方法。
 
@exception JAXBException 如果出现任何解组错误。注意，允许该实现在解析错误期间抛出 SAXException。
 
@return 总是返回被解组的非 null 有效对象。

<!-- END DATA -->
