<!-- BEGIN KEY -->
public abstract static class javax.xml.bind.Unmarshaller.Listener extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p/>
向 {@link Unmarshaller} 注册此类的一个实现的实例，以便外部侦听解组事件。
 <p/>
 <p/>
此类可以在将 XML 数据解组到 JAXB 映射类中时启用对 JAXB 映射类实例的预处理和后处理。在将 XML 内容解组到 JAXBElement 实例或表示复杂类型定义的 JAXB 映射类中时，将调用事件回调。解组到表示简单类型定义的 Java 数据类型的实例时，不需要调用事件回调。
 <p/>
 <p/>
外部侦听器是用于定义解组事件回调的两个不同机制之一。请参阅 <a href="Unmarshaller.html#unmarshalEventCallback">Unmarshal Event Callbacks</a> 获得对这方面的概括。
 <p/>
(@link #setListener(Listener)} (@link #getListener()}

@since JAXB2.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.bind.Unmarshaller.Listener.beforeUnmarshal(Object target, Object parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p/>
在解组到 <tt>target</tt> 之前调用的回调方法。
 <p/>
 <p/>
在创建 <tt>target</tt> 之后且在开始解组此对象之前立即调用此方法。注意，如果 <tt>target</tt> 的类定义了自己的 <tt>beforeUnmarshal</tt> 方法，则在调用此方法之前调用特定于类的回调方法。

@param target 解组之前的 JAXB 映射类的非 null 实例。
@param parent 将最终引用 <tt>target</tt> 的 JAXB 映射类的实例。当 <tt>target</tt> 是根元素时，该参数为 <tt>null</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.bind.Unmarshaller.Listener.afterUnmarshal(Object target, Object parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p/>
将 XML 数据解组到 <tt>target</tt> 之后调用的回调方法。
 <p/>
 <p/>
在将所有属性（IDREF 除外）解组到 <tt>target</tt> 之后、但在将 <tt>target</tt> 设置为其 <tt>parent</tt> 对象之前调用此方法。注意，如果 <tt>target</tt> 的类定义了自己的 <tt>afterUnmarshal</tt> 方法，则在调用此方法之前调用特定于类的回调方法。

@param target 解组之前的 JAXB 映射类的非 null 实例。
@param parent 将引用 <tt>target</tt> 的 JAXB 映射类的实例。当 <tt>target</tt> 是根元素时，该参数为 <tt>null</tt>。

<!-- END DATA -->
