<!-- BEGIN KEY -->
public interface javax.xml.bind.DatatypeConverterInterface
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
该 DatatypeConverterInterface 仅适用于 JAXB 提供者。JAXB 提供者必须提供一个实现此接口的类。JAXB 提供者需要在第一次执行编组或解组操作之前（可能在调用 JAXBContext.newInstance 期间）的某个时间点调用 {@link DatatypeConverter#setDatatypeConverter(DatatypeConverterInterface) DatatypeConverter.setDatatypeConverter}。要配置用于执行打印和解析功能的转换器，这一步是必需的。重复调用此 api 是无效的，传入第一个调用中的 DatatypeConverter 实例将是将从那时起有效的实例。
 </p>

 <p>
此接口定义了一些 parse 和 print 方法。在 JAXB 规范的默认绑定 Table 5-1 中指定的每个 XML 模式数据类型都有一个 parse 和 print 方法。 
 </p>

 <p>
此处定义的 parse 和 print 方法由 {@link DatatypeConverter DatatypeConverter} 类中定义的静态 parse 和 print 方法调用。
 </p>

 <p>
XML 模式数据类型的 parse 方法必须能够将 XML 模式数据类型的任何词汇表示形式（由 <a href="http://www.w3.org/TR/xmlschema-2/"> XML Schema Part 2: Datatypes specification</a> 指定）转换为 XML 模式数据类型的值空间中的值。如果在转换期间发生错误，则该方法将抛出 IllegalArgumentException，或者抛出 IllegalArgumentException 的子类。
  
 </p>

 <p>
XML 模式数据类型的 print 方法可以输出对于 XML 模式数据类型有效的任何词汇表示形式。如果在转换期间发生错误，则该方法将抛出 IllegalArgumentException，或者抛出 IllegalArgumentException 的子类。
 </p>

前缀 xsd：用于引用 XML 模式数据类型 <a href="http://www.w3.org/TR/xmlschema-2/"> XML Schema Part 2: Datatypes specification</a>。
  
 <p>
@author<ul><li>Sekhar Vajjhala, Sun Microsystems, Inc.</li><li>Joe Fialli, Sun Microsystems Inc.</li><li>Kohsuke Kawaguchi, Sun Microsystems, Inc.</li><li>Ryan Shoemaker,Sun Microsystems Inc.</li></ul>
@version $Revision: 1.5 $
@see DatatypeConverter
@see ParseConversionEvent
@see PrintConversionEvent
@since JAXB1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.parseString(String lexicalXSDString)
<!-- END KEY -->
<!-- BEGIN DATA -->

 <p>
将字符串参数转换为一个字符串。
@param lexicalXSDString XML 模式数据类型 xsd:string 的词汇表示形式
@return 与输入字符串相同的字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.BigInteger javax.xml.bind.DatatypeConverterInterface.parseInteger(String lexicalXSDInteger)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字符串参数转换为一个 BigInteger 值。
@param lexicalXSDInteger 包含 xsd:integer 的词汇表示形式的字符串。
@return 字符串参数表示的 BigInteger 值。
@throws NumberFormatException 如果 <code>lexicalXSDInteger</code> 不是 {@link java.math.BigInteger} 值的有效字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.xml.bind.DatatypeConverterInterface.parseInt(String lexicalXSDInt)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字符串参数转换为一个 int 值。
@param lexicalXSDInt 包含 xsd:int 的词汇表示形式的字符串。
@return 字符串参数表示的 int 值。
@throws NumberFormatException 如果 <code>lexicalXSDInt</code> 不是 <code>int</code> 值的有效字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.xml.bind.DatatypeConverterInterface.parseLong(String lexicalXSDLong)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字符串参数转换为一个 long 值。
@param lexicalXSDLong 包含 xsd:long 的词汇表示形式的字符串。
@return 字符串参数表示的 long 值。
@throws NumberFormatException 如果 <code>lexicalXSDLong</code> 不是 <code>long</code> 值的有效字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public short javax.xml.bind.DatatypeConverterInterface.parseShort(String lexicalXSDShort)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字符串参数转换为一个 short 值。
@param lexicalXSDShort 包含 xsd:short 的词汇表示形式的字符串。
@return 字符串参数表示的 short 值。
@throws NumberFormatException 如果 <code>lexicalXSDShort</code> 不是 <code>short</code> 值的有效字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.BigDecimal javax.xml.bind.DatatypeConverterInterface.parseDecimal(String lexicalXSDDecimal)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字符串参数转换为一个 BigDecimal 值。
@param lexicalXSDDecimal 包含 xsd:decimal 的词汇表示形式的字符串。
@return 字符串参数表示的 BigDecimal 值。
@throws NumberFormatException 如果 <code>lexicalXSDDecimal</code> 不是 {@link java.math.BigDecimal} 的有效字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.xml.bind.DatatypeConverterInterface.parseFloat(String lexicalXSDFloat)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字符串参数转换为一个 float 值。
@param lexicalXSDFloat 包含 xsd:float 的词汇表示形式的字符串。
@return 字符串参数表示的 float 值。
@throws NumberFormatException 如果 <code>lexicalXSDFloat</code> 不是 <code>float</code> 值的有效字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public double javax.xml.bind.DatatypeConverterInterface.parseDouble(String lexicalXSDDouble)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字符串参数转换为一个 double 值。
@param lexicalXSDDouble 包含 xsd:double 的词汇表示形式的字符串。
@return 字符串参数表示的 double 值。
@throws NumberFormatException 如果 <code>lexicalXSDDouble</code> 不是 <code>double</code> 值的有效字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.xml.bind.DatatypeConverterInterface.parseBoolean(String lexicalXSDBoolean)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字符串参数转换为一个 boolean 值。
@param lexicalXSDBoolean 包含 xsd:boolean 的词汇表示形式的字符串。
@return 字符串参数表示的 boolean 值。
@throws IllegalArgumentException 如果字符串参数不符合 XML Schema Part 2: Datatypes for xsd:boolean 中定义的词汇值空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte javax.xml.bind.DatatypeConverterInterface.parseByte(String lexicalXSDByte)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字符串参数转换为一个 byte 值。
@param lexicalXSDByte 包含 xsd:byte 的词汇表示形式的字符串。
@return 字符串参数表示的 byte 值。
@throws NumberFormatException 如果 <code>lexicalXSDByte</code> 不包含可解析的字节。
@throws IllegalArgumentException 如果字符串参数不符合 XML Schema Part 2: Datatypes for xsd:byte 中定义的词汇值空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.namespace.QName javax.xml.bind.DatatypeConverterInterface.parseQName(String lexicalXSDQName, NamespaceContext nsc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字符串参数转换为一个 QName 值。

 <p>
字符串参数 <tt>lexicalXSDQname</tt> 必须符合 <a href="http://www.w3.org/TR/xmlschema-2/#QName">XML Schema Part 2: Datatypes specification:QNames</a> 中指定的词汇值空间。
 
@param lexicalXSDQName 包含 xsd:QName 的词汇表示形式的字符串。
@param nsc 解释 QName 中前缀的名称空间上下文。
@return 字符串参数表示的 QName 值。
@throws IllegalArgumentException 如果字符串参数不符合 XML Schema Part 2 规范，或者 <tt>lexicalXSDQname</tt> 的名称空间前缀未绑定到 NamespaceContext <tt>nsc</tt> 中的 URI。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Calendar javax.xml.bind.DatatypeConverterInterface.parseDateTime(String lexicalXSDDateTime)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字符串参数转换为一个 Calendar 值。
@param lexicalXSDDateTime 包含 xsd:datetime 的词汇表示形式的字符串。
@return 字符串参数表示的 Calendar 对象。
@throws IllegalArgumentException 如果字符串参数不符合 XML Schema Part 2: Datatypes for xsd:dateTime 中定义的词汇值空间。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] javax.xml.bind.DatatypeConverterInterface.parseBase64Binary(String lexicalXSDBase64Binary)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字符串参数转换为一个字节数组。
@param lexicalXSDBase64Binary 包含 xsd:base64Binary 的词汇表示形式的字符串。
@return 字符串参数表示的字节数组。
@throws IllegalArgumentException 如果字符串参数不符合 XML Schema Part 2: Datatypes for xsd:base64Binary 中定义的词汇值空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] javax.xml.bind.DatatypeConverterInterface.parseHexBinary(String lexicalXSDHexBinary)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字符串参数转换为一个字节数组。
@param lexicalXSDHexBinary 包含 xsd:hexBinary 的词汇表示形式的字符串。
@return 字符串参数表示的字节数组。
@throws IllegalArgumentException 如果字符串参数不符合 XML Schema Part 2: Datatypes for xsd:hexBinary 中定义的词汇值空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.xml.bind.DatatypeConverterInterface.parseUnsignedInt(String lexicalXSDUnsignedInt)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字符串参数转换为一个 long 值。
@param lexicalXSDUnsignedInt 包含 xsd:unsignedInt 的词汇表示形式的字符串。
@return 字符串参数表示的 long 值。
@throws NumberFormatException 如果不能将字符串参数解析为 <tt>long</tt> 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.xml.bind.DatatypeConverterInterface.parseUnsignedShort(String lexicalXSDUnsignedShort)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字符串参数转换为一个 int 值。
@param lexicalXSDUnsignedShort 包含 xsd:unsignedShort 的词汇表示形式的字符串。
@return 字符串参数表示的 int 值。
@throws NumberFormatException 如果不能将字符串参数解析为 <tt>int</tt> 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Calendar javax.xml.bind.DatatypeConverterInterface.parseTime(String lexicalXSDTime)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字符串参数转换为一个 Calendar 值。
@param lexicalXSDTime 包含 xsd:Time 的词汇表示形式的字符串。
@return 字符串参数表示的 Calendar 值。
@throws IllegalArgumentException 如果字符串参数不符合 XML Schema Part 2: Datatypes for xsd:Time 中定义的词汇值空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Calendar javax.xml.bind.DatatypeConverterInterface.parseDate(String lexicalXSDDate)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字符串参数转换为一个 Calendar 值。
@param lexicalXSDDate 包含 xsd:Date 的词汇表示形式的字符串。
@return 字符串参数表示的 Calendar 值。
@throws IllegalArgumentException 如果字符串参数不符合 XML Schema Part 2: Datatypes for xsd:Time 中定义的词汇值空间。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.parseAnySimpleType(String lexicalXSDAnySimpleType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
返回包含简单类型的词汇表示形式的字符串。
@param lexicalXSDAnySimpleType 包含简单类型的词汇表示形式的字符串。
@return 包含简单类型的词汇表示形式的字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.printString(String val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字符串参数转换为一个字符串。
@param val 字符串值。
@return 包含 xsd:string 的词汇表示形式的字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.printInteger(BigInteger val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将 BigInteger 值转换为一个字符串。
@param val 一个 BigInteger 值
@return 包含 xsd:integer 的词汇表示形式的字符串
@throws IllegalArgumentException 如果 <tt>val</tt> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.printInt(int val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将 int 值转换为一个字符串。
@param val 一个 int 值
@return 包含 xsd:int 的词汇表示形式的字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.printLong(long val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将 long 值转换为一个字符串。
@param val 一个 long 值
@return 包含 xsd:long 的词汇表示形式的字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.printShort(short val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将 short 值转换为一个字符串。
@param val 一个 short 值
@return 包含 xsd:short 的词汇表示形式的字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.printDecimal(BigDecimal val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将 BigDecimal 值转换为一个字符串。
@param val 一个 BigDecimal 值
@return 包含 xsd:decimal 的词汇表示形式的字符串
@throws IllegalArgumentException 如果 <tt>val</tt> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.printFloat(float val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将 float 值转换为一个字符串。
@param val 一个 float 值
@return 包含 xsd:float 的词汇表示形式的字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.printDouble(double val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将 double 值转换为一个字符串。
@param val 一个 double 值
@return 包含 xsd:double 的词汇表示形式的字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.printBoolean(boolean val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将 boolean 值转换为一个字符串。
@param val 一个 boolean 值
@return 包含 xsd:boolean 的词汇表示形式的字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.printByte(byte val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将 byte 值转换为一个字符串。
@param val 一个 byte 值
@return 包含 xsd:byte 的词汇表示形式的字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.printQName(QName val, NamespaceContext nsc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将 QName 实例转换为一个字符串。
@param val 一个 QName 值
@param nsc 解释 QName 中前缀的名称空间上下文。
@return 包含 QName 的词汇表示形式的字符串
@throws IllegalArgumentException 如果 <tt>val</tt> 为 null、<tt>nsc</tt> 为非 null 或 <tt>nsc.getPrefix(nsprefixFromVal)</tt> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.printDateTime(Calendar val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将 Calendar 值转换为一个字符串。
@param val 一个 Calendar 值
@return 包含 xsd:dateTime 的词汇表示形式的字符串
@throws IllegalArgumentException 如果 <tt>val</tt> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.printBase64Binary(byte[] val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字节数组转换为一个字符串。
@param val 一个字节数组
@return 包含 xsd:base64Binary 的词汇表示形式的字符串
@throws IllegalArgumentException 如果 <tt>val</tt> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.printHexBinary(byte[] val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字节数组转换为一个字符串。
@param val 一个字节数组
@return 包含 xsd:hexBinary 的词汇表示形式的字符串
@throws IllegalArgumentException 如果 <tt>val</tt> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.printUnsignedInt(long val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将 long 值转换为一个字符串。
@param val 一个 long 值
@return 包含 xsd:unsignedInt 的词汇表示形式的字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.printUnsignedShort(int val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将 int 值转换为一个字符串。
@param val 一个 int 值
@return 包含 xsd:unsignedShort 的词汇表示形式的字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.printTime(Calendar val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将 Calendar 值转换为一个字符串。
@param val 一个 Calendar 值
@return 包含 xsd:time 的词汇表示形式的字符串
@throws IllegalArgumentException 如果 <tt>val</tt> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.printDate(Calendar val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将 Calendar 值转换为一个字符串。
@param val 一个 Calendar 值
@return 包含 xsd:date 的词汇表示形式的字符串
@throws IllegalArgumentException 如果 <tt>val</tt> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.DatatypeConverterInterface.printAnySimpleType(String val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将字符串值转换为一个字符串。
@param val 字符串值
@return 包含 xsd:AnySimpleType 的词汇表示形式的字符串

<!-- END DATA -->
