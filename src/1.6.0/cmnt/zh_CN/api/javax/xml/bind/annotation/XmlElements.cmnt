<!-- BEGIN KEY -->
public interface class javax.xml.bind.annotation.XmlElements implements java.lang.annotation.Annotation
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
多个 @{@link XmlElement} 注释的容器。

在一个程序元素上不允许使用多个相同类型的注释。因此此注释用于充当多个 @XmlElements 的容器注释，如下所示：

 <pre>
 &#64;XmlElements({ @XmlElement(...),@XmlElement(...) })
 </pre>

<p><tt>@XmlElements</tt> 注释可以与以下程序元素一起使用： </p>
 <ul>
<li> JavaBean 属性 </li>
<li> 非 static、非 transient 字段 </li>
 </ul>

此注释用于注释 JavaBean 集合属性（如列表）。 

<p><b>用法</b></p>

<p>用法受到以下约束的限制：
 <ul>

<li> 此注释可与以下注释一起使用：@{@link XmlIDREF} 和 @{@link XmlElementWrapper}。 </li>
<li> 如果将 @XmlIDREF 也指定到 JavaBean 属性，那么每个 @XmlElement.type() 都必须包含使用 <tt>@XmlID</tt> 注释的 JavaBean 属性。</li>
 </ul>

<p>有关其他公共信息，请参阅 javax.xml.bind.package javadoc 中的&ldquo;包规范&rdquo;。</p>

 <hr>
 
<p><b>示例 1：</b>映射到元素列表</p>
 <pre>
    
    // Mapped code fragment
    public class Foo {
        &#64;XmlElements(
            &#64;XmlElement(name="A", type=Integer.class),
            &#64;XmlElement(name="B", type=Float.class)
         }
         public List items;
    }

    &lt;!-- XML Representation for a List of {1,2.5} 
            XML output is not wrapped using another element -->
    ...
    <A> 1 </A>
    <B> 2.5 </B>
    ...

    &lt;!-- XML Schema fragment -->
    &lt;xs:complexType name="Foo">
      &lt;xs:sequence>
        &lt;xs:choice minOccurs="0" maxOccurs="unbounded">
          &lt;xs:element name="A" type="xs:int"/>
          &lt;xs:element name="B" type="xs:float"/>
        &lt;xs:choice>
      &lt;/xs:sequence>
    &lt;/xs:complexType>

 </pre>

<p><b>示例 2：</b>映射到使用另一个元素包装的元素列表
 </p>
 <pre>
 
    // Mapped code fragment
    public class Foo {
        &#64;XmlElementWrapper(name="bar")
        &#64;XmlElements(
            &#64;XmlElement(name="A", type=Integer.class),
            &#64;XmlElement(name="B", type=Float.class)
        }
        public List items;
    }

    &lt;!-- XML Schema fragment -->
    &lt;xs:complexType name="Foo">
      &lt;xs:sequence>
        &lt;xs:element name="bar">
          &lt;xs:complexType>
            &lt;xs:choice minOccurs="0" maxOccurs="unbounded">
              &lt;xs:element name="A" type="xs:int"/>
              &lt;xs:element name="B" type="xs:float"/>
            &lt;/xs:choice>
          &lt;/xs:complexType>
        &lt;/xs:element>
      &lt;/xs:sequence>
    &lt;/xs:complexType>
 </pre>


 <p><b>示例 3：</b>根据类型使用适配器更改元素名称。
 </p>
 <pre>
    class Foo {
       &#64;XmlJavaTypeAdapter(QtoPAdapter.class)
       &#64;XmlElements({
           &#64;XmlElement(name="A",type=PX.class),
           &#64;XmlElement(name="B",type=PY.class)
       })
       Q bar;
    }
 
    &#64;XmlType abstract class P {...}
    &#64;XmlType(name="PX") class PX extends P {...}
    &#64;XmlType(name="PY") class PY extends P {...}

    &lt;!-- XML Schema fragment -->
    &lt;xs:complexType name="Foo">
      &lt;xs:sequence>
        &lt;xs:element name="bar">
          &lt;xs:complexType>
            &lt;xs:choice minOccurs="0" maxOccurs="unbounded">
              &lt;xs:element name="A" type="PX"/>
              &lt;xs:element name="B" type="PY"/>
            &lt;/xs:choice>
          &lt;/xs:complexType>
        &lt;/xs:element>
      &lt;/xs:sequence>
    &lt;/xs:complexType>
 </pre>


@author <ul><li>Kohsuke Kawaguchi, Sun Microsystems, Inc.</li><li>Sekhar Vajjhala, Sun Microsystems, Inc.</li></ul>
@see XmlElement
@see XmlElementRef
@see XmlElementRefs
@see XmlJavaTypeAdapter
@since JAXB2.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.bind.annotation.XmlElement[] javax.xml.bind.annotation.XmlElements.value()
<!-- END KEY -->
<!-- BEGIN DATA -->
 &#64;{@link XmlElement} 注释的集合。

<!-- END DATA -->
