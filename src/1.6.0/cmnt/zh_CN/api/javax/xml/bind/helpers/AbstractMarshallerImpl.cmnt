<!-- BEGIN KEY -->
public abstract class javax.xml.bind.helpers.AbstractMarshallerImpl extends java.lang.Object implements javax.xml.bind.Marshaller
<!-- END KEY -->
<!-- BEGIN DATA -->
部分默认 <tt>Marshaller</tt> 实现。
 
 <p>
此类提供 {@link javax.xml.bind.Marshaller} 接口的部分默认实现。
 
 <p>
JAXB 提供者必须实现的方法只有 {@link Marshaller#marshal(Object, javax.xml.transform.Result) marshal(Object, javax.xml.transform.Result)}、{@link Marshaller#marshal(Object, javax.xml.transform.Result) marshal(Object, javax.xml.stream.XMLStreamWriter)} 和 {@link Marshaller#marshal(Object, javax.xml.transform.Result) marshal(Object, javax.xml.stream.XMLEventWriter)}。

@author<ul><li>Kohsuke Kawaguchi, Sun Microsystems, Inc.</li></ul>
<<<<<<< AbstractMarshallerImpl.cmnt
@version $Revision: 1.5 $ $Date: 2006-10-23 09:14:12 $ 
@see javax.xml.bind.Marshaller
=======
@version $Revision: 1.5 $ $Date: 2006-10-23 09:14:12 $ 
@see javax.xml.bind.Marshaller
>>>>>>> 1.3
@since JAXB1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node javax.xml.bind.helpers.AbstractMarshallerImpl.getNode(Object obj) throws javax.xml.bind.JAXBException
<!-- END KEY -->
<!-- BEGIN DATA -->
默认情况下，getNode 方法不受支持并抛出 {@link java.lang.UnsupportedOperationException}。
 
选择支持此方法的实现必须重写此方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.xml.bind.helpers.AbstractMarshallerImpl.getEncoding()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取当前输出编码的便捷方法。
 
@return 当前的编码，如果没有设置编码，则返回 &quot;UTF-8&quot;。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.xml.bind.helpers.AbstractMarshallerImpl.setEncoding(String encoding)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置输出编码的便捷方法。
 
@param encoding Marshaller 类文档中指定的有效编码

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.xml.bind.helpers.AbstractMarshallerImpl.getSchemaLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取当前 schemaLocation 的便捷方法。
 
@return 当前的 schemaLocation，如果没有设置 schemaLocation，则返回 null

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.xml.bind.helpers.AbstractMarshallerImpl.setSchemaLocation(String location)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 schemaLocation 的便捷方法。
 
@param location schemaLocation 值

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.xml.bind.helpers.AbstractMarshallerImpl.getNoNSSchemaLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取当前 noNamespaceSchemaLocation 的便捷方法。
 
@return 当前的 noNamespaceSchemaLocation；如果没有设置 noNamespaceSchemaLocation，则返回 null

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.xml.bind.helpers.AbstractMarshallerImpl.setNoNSSchemaLocation(String location)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 noNamespaceSchemaLocation 的便捷方法。
 
@param location noNamespaceSchemaLocation 值

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.xml.bind.helpers.AbstractMarshallerImpl.isFormattedOutput()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取格式化输出标志的便捷方法。
 
@return 格式化输出标志的当前值；如果没有设置该值，则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.xml.bind.helpers.AbstractMarshallerImpl.setFormattedOutput(boolean v)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置格式化输出标志的便捷方法。
 
@param v 格式化输出标志的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.xml.bind.helpers.AbstractMarshallerImpl.isFragment()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取片段标志的便捷方法。

@return 片段标志的当前值；如果没有设置该值，则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.xml.bind.helpers.AbstractMarshallerImpl.setFragment(boolean v)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置片段标志的便捷方法。

@param v 片段标志的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.xml.bind.helpers.AbstractMarshallerImpl.getJavaEncoding(String encoding) throws java.io.UnsupportedEncodingException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 IANA 名称获取相应的 Java 编码名称。
 
此方法是派生类用来转换编码名称的 helper 方法。
 
@exception UnsupportedEncodingException 如果此实现无法找到 Java 编码名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.bind.helpers.AbstractMarshallerImpl.setProperty(String name, Object value) throws javax.xml.bind.PropertyException
<!-- END KEY -->
<!-- BEGIN DATA -->
setProperty 方法的默认实现处理 Marshaller 中 4 个已定义的属性。如果提供者需要处理其他属性，则应该在派生类中重写此方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.xml.bind.helpers.AbstractMarshallerImpl.getProperty(String name) throws javax.xml.bind.PropertyException
<!-- END KEY -->
<!-- BEGIN DATA -->
getProperty 方法的默认实现处理 Marshaller 中 4 个已定义的属性。如果提供者需要支持特定于其他提供者的属性，则应该在派生类中重写此方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.bind.ValidationEventHandler javax.xml.bind.helpers.AbstractMarshallerImpl.getEventHandler() throws javax.xml.bind.JAXBException
<!-- END KEY -->
<!-- BEGIN DATA -->
@see javax.xml.bind.Marshaller#getEventHandler()

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.bind.helpers.AbstractMarshallerImpl.setEventHandler(ValidationEventHandler handler) throws javax.xml.bind.JAXBException
<!-- END KEY -->
<!-- BEGIN DATA -->
@see javax.xml.bind.Marshaller#setEventHandler(ValidationEventHandler)

<!-- END DATA -->
