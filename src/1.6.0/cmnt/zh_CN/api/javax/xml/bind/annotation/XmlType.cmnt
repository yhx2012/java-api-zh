<!-- BEGIN KEY -->
public interface class javax.xml.bind.annotation.XmlType implements java.lang.annotation.Annotation
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将类或枚举类型映射到 XML 模式类型。

<p><b>用法</b></p>
<p> <tt>@XmlType</tt> 注释可以与以下程序元素一起使用：
 <ul>
<li> 顶层类 </li>
<li> 枚举类型 </li>
 </ul>

<p>有关其他公共信息，请参阅 javax.xml.bind.package javadoc 中的&ldquo;包规范&rdquo;。</p>

<h3> 映射一个类 </h3> 
 <p>
将一个类映射到 XML 模式类型。类是通过属性和字段表示的值的数据容器。模式类型是一个数据容器，用于模式类型的内容模式中的模式组件（如模型组件、属性等）所表示的值。
<p> 要被映射，类必须拥有一个不带参数的公共构造方法，或者一个静态的不带参数的工厂方法。静态工厂方法可以使用 <tt>factoryMethod()</tt> 和 <tt>factoryClass()</tt> 注释元素来指定。在解组过程中将使用静态工厂方法或不带参数的构造方法来创建此类的实例。如果两者同时存在，则静态工厂方法将重写不带参数的构造方法。
 <p>
将类映射到 XML 模式复杂类型或 XML 模式简单类型。XML 模式类型是基于类中包含的 JavaBean 属性和字段的映射派生出来的。类将要映射到的模式类型可以是已命名的，也可以是匿名的。通过使用 <tt>@(name=&quot;&quot;)</tt> 对类进行注释，可以将该类映射到匿名模式类型。 
 <p>
全局元素、本地元素或本地属性都可以与匿名类型关联，如下所示：
 <ul>
<li><b>全局元素：</b>通过使用 @{@link XmlRootElement} 对类进行注释，可以派生出一个匿名类型的全局元素。请参阅下文示例 3。 </li> 

<li><b>本地元素：</b> JavaBean 属性，引用使用 @XmlType(name=&quot;&quot;) 注释的类且映射到与匿名类型关联的某一元素。请参阅下文示例 4。</li> 

<li><b>属性：</b> JavaBean 属性，引用使用 @XmlType(name="") 注释的类且映射到与匿名类型关联的某一属性。请参阅下文示例 5。 </li>
 </ul>
<b> 映射到 XML 模式复杂类型 </b>
 <ul>
<li>如果使用 <tt>@XmlType(name=&quot;&quot;) </tt> 对类进行注释，那么该类将被映射到匿名类型。否则将类名称映射到复杂类型名称。可以使用 <tt>XmlName()</tt> 注释元素来自定义名称。</li>  

<li> 映射到元素的属性和字段将映射到复杂类型中的内容模式。可以使用注释元素 <tt>propOrder()</tt> 将内容模式自定义为 <tt>xs:all</tt> 或 <tt>xs:sequence</tt>，还可以使用该元素指定 <tt>xs:sequence</tt> 中 XML 元素的顺序。 </li> 

<li> 可以映射到复杂类型中的属性的属性和字段。  </li>

<li> XML 模式类型的 targetnamespace 可以使用注释元素 <tt>namespace()</tt> 自定义。 </li>
 </ul>

 <p>
<b> 将类映射到 XML 模式简单类型 </b>
 <p>
可以使用 <tt>@XmlValue</tt> 注释将类映射到 XML 模式简单类型。有关其他详细信息和示例，请参阅 @{@link XmlValue} 注释类型。
 <p>
下表显示了类到 XML 模式复杂类型或简单类型的映射。表中使用的标志符号是：
 <ul>
<li> -&gt;    : 代表一个映射 </li>
<li> [x]+  :x 出现一次或多次 </li>
<li> [ <tt>@XmlValue</tt> property ]:使用 <tt>@XmlValue</tt> 注释的 JavaBean 属性</li>
<li> X     :任意
 </ul>
 <blockquote>
   <table border="1" cellpadding="4" cellspacing="3">
     <tbody>
       <tr>
         <td><b>Target</b></td>
         <td><b>propOrder</b></td>
         <td><b>ClassBody</b></td>
         <td><b>ComplexType</b></td>
         <td><b>SimpleType</b></td>
       </tr>
 
       <tr valign="top">
         <td>Class</td>
         <td>{}</td>
         <td>[property]+ -> elements</td>
         <td>complexcontent<br>xs:all</td>
         <td> </td>
       </tr>
 
       <tr valign="top">
         <td>Class</td>
         <td>non empty</td>
         <td>[property]+ -> elements</td>
         <td>complexcontent<br>xs:sequence</td>
         <td> </td>
       </tr>
 
       <tr valign="top">
         <td>Class</td>
         <td>X</td>
         <td>no property -> element</td>
         <td>complexcontent<br>empty sequence</td>
         <td> </td>
       </tr>
 
       <tr valign="top">
         <td>Class</td>
         <td>X</td>
         <td>1 [ <tt>@XmlValue</tt> property] && <br> [property]+
             ->attributes</td> 
         <td>simplecontent</td>
         <td> </td>
       </tr>
 
       <tr valign="top">
         <td>Class</td>
         <td>X</td>
         <td>1 [ <tt>@XmlValue</tt> property ]&& <br> no properties
         -> attribute</td> 
         <td> </td>
         <td>simpletype</td>
         <td> </td>
       </tr>
     </tbody>
   </table>
 </blockquote>
 
<h3> 映射一个枚举类型 </h3>
 
将枚举类型映射到带有 enumeration facet 的 XML 模式简单类型。由于没有意义，以下注释元素将被忽略：<tt>propOrder()</tt>、<tt>factoryMethod()</tt> 和 <tt>factoryClass()</tt>。

<h3>与其他注释一起使用的方法</h3>
 <p>此类可与以下注释一起使用： 
 {@link XmlRootElement}、{@link XmlAccessorOrder}、{@link XmlAccessorType}、
 {@link XmlEnum}。但是，当此注释用于枚举类型时，将忽略 {@link
 XmlAccessorOrder} 和 {@link XmlAccessorType}。
 
<p> <b> 示例 1：</b>将类映射到具有 xs:sequence 属性和自定义的 JavaBean 排序的复杂类型。 
 </p>

  <pre>
   &#64;XmlType(propOrder={"street", "city" , "state", "zip", "name" })
   public class USAddress {
     String getName() {..};
     void setName(String) {..};
 
     String getStreet() {..};
     void setStreet(String) {..};

     String getCity() {..}; 
     void setCity(String) {..};
 
     String getState() {..};
     void setState(String) {..};

     java.math.BigDecimal getZip() {..};
     void setZip(java.math.BigDecimal) {..};
   }

   &lt;!-- XML Schema mapping for USAddress -->
   &lt;xs:complexType name="USAddress">
     &lt;xs:sequence>
       &lt;xs:element name="street" type="xs:string"/>
       &lt;xs:element name="city" type="xs:string"/>
       &lt;xs:element name="state" type="xs:string"/>
       &lt;xs:element name="zip" type="xs:decimal"/>
       &lt;xs:element name="name" type="xs:string"/>
     &lt;/xs:all>
   &lt;/xs:complexType> 
 </pre>

<p> <b>示例 2：</b>将类映射到具有 xs:all 属性的复杂类型 </p>
 <pre>
 &#64;XmlType(propOrder={})
 public class USAddress { ...}
 
 &lt;!-- XML Schema mapping for USAddress -->
 &lt;xs:complexType name="USAddress">
   &lt;xs:all>
     &lt;xs:element name="name" type="xs:string"/>
     &lt;xs:element name="street" type="xs:string"/>
     &lt;xs:element name="city" type="xs:string"/>
     &lt;xs:element name="state" type="xs:string"/>
     &lt;xs:element name="zip" type="xs:decimal"/>
   &lt;/xs:sequence>
 &lt;/xs:complexType>
</pre>

<p> <b>示例 3：</b>将类映射到具有匿名类型的全局元素。 
 </p>
  <pre>
   &#64;XmlRootElement
   &#64;XmlType(name="")
   public class USAddress { ...}

   &lt;!-- XML Schema mapping for USAddress -->
   &lt;xs:element name="USAddress">
     &lt;xs:complexType>
       &lt;xs:sequence>
         &lt;xs:element name="name" type="xs:string"/>
         &lt;xs:element name="street" type="xs:string"/>
         &lt;xs:element name="city" type="xs:string"/>
         &lt;xs:element name="state" type="xs:string"/>
         &lt;xs:element name="zip" type="xs:decimal"/>
       &lt;/xs:sequence>
     &lt;/xs:complexType>
   &lt;/xs:element>
 </pre>


<p> <b>示例 4：</b>将属性映射到具有匿名类型的本地元素。 
  <pre>
   //Example: Code fragment
   public class Invoice {
       USAddress addr;
           ...
       }

   &#64;XmlType(name="")
   public class USAddress { ... }
   } 

   &lt;!-- XML Schema mapping for USAddress -->
   &lt;xs:complexType name="Invoice">
     &lt;xs:sequence>
       &lt;xs:element name="addr">
         &lt;xs:complexType>
           &lt;xs:element name="name", type="xs:string"/>
           &lt;xs:element name="city", type="xs:string"/>
           &lt;xs:element name="city" type="xs:string"/>
           &lt;xs:element name="state" type="xs:string"/>
           &lt;xs:element name="zip" type="xs:decimal"/>
         &lt;/xs:complexType>
       ...
     &lt;/xs:sequence>
   &lt;/xs:complexType> 
 </pre>


<p> <b>示例 5：</b>将属性映射到具有匿名类型的属性。
 
 <pre>

     //Example: Code fragment
     public class Item {
         public String name;
         &#64;XmlAttribute 
         public USPrice price;
     }
    
     // map class to anonymous simple type. 
     &#64;XmlType(name="")
     public class USPrice { 
         &#64;XmlValue
         public java.math.BigDecimal price;
     }

     &lt;!-- Example: XML Schema fragment -->
     &lt;xs:complexType name="Item">
       &lt;xs:sequence>
         &lt;xs:element name="name" type="xs:string"/>
         &lt;xs:attribute name="price">
           &lt;xs:simpleType>
             &lt;xs:restriction base="xs:decimal"/>
           &lt;/xs:simpleType>
         &lt;/xs:attribute>
       &lt;/xs:sequence>
     &lt;/xs:complexType>
 </pre>



  <p> <b>示例 6: </b>定义 factoryClass 和 factoryMethod

 <pre> 
      &#64;XmlType(name="USAddressType", factoryClass=USAddressFactory.class,
      factoryMethod="getUSAddress")
      public class USAddress {

          private String city;
          private String name;
          private String state;
          private String street;
          private int    zip;

      public USAddress(String name, String street, String city, 
          String state, int zip) {
          this.name = name;
          this.street = street;
          this.city = city;
          this.state = state;
          this.zip = zip;
      }
  }

  public class USAddressFactory {
      public static USAddress getUSAddress(){
       return new USAddress("Mark Baker", "23 Elm St", 
          "Dayton", "OH", 90952);
  }

 </pre>

  <p> <b>示例 7：</b>定义 factoryMethod 并使用默认 factoryClass
 
  <pre>
      &#64;XmlType(name="USAddressType", factoryMethod="getNewInstance")
      public class USAddress {

          private String city;
          private String name;
          private String state;
          private String street;
          private int    zip;

          private USAddress() {}

          public static USAddress getNewInstance(){
              return new USAddress();
          }
      }
 </pre>

@author Sekhar Vajjhala, Sun Microsystems, Inc.
@see XmlElement
@see XmlAttribute
@see XmlValue
@see XmlSchema
@since JAXB2.0
@version $Revision: 1.4 $

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.annotation.XmlType.name()
<!-- END KEY -->
<!-- BEGIN DATA -->
类被映射到的 XML 模式类型名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] javax.xml.bind.annotation.XmlType.propOrder()
<!-- END KEY -->
<!-- BEGIN DATA -->
在将类映射到 XML 模式复杂类型时，指定 XML 模式元素的顺序。
 
<p> 有关 propOrder 影响类映射的方式，请参见上表。</p>
 
<p> propOrder 是类中 JavaBean 属性的名称列表。列表中的每个名称都是 JavaBean 属性的 Java 标识符的名称。JavaBean 属性被列出的顺序是 JavaBean 属性映射到 XML 模式元素的顺序。 </p>
<p> 必须列出所有映射到 XML 模式元素的 JavaBean 属性。
<p> 以 propOrder 顺序列出的 JavaBean 属性或字段不得为 transient 或使用 <tt>@XmlTransient</tt> 注释。 
<p> JavaBean 属性的默认顺序由 @{@link XmlAccessorOrder} 确定。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.annotation.XmlType.namespace()
<!-- END KEY -->
<!-- BEGIN DATA -->
XML 模式类型的目标名称空间名。默认情况下，这是包含类的包将被映射到的目标名称空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class javax.xml.bind.annotation.XmlType.factoryClass()
<!-- END KEY -->
<!-- BEGIN DATA -->
包含用来创建此类实例的不带参数的工厂方法的类。默认值为此类。

 <p>如果 <tt>factoryClass</tt> 为 DEFAULT.class 且 
 <tt>factoryMethod</tt> 为 ""，则没有静态工厂方法。
 
 <p>如果 <tt>factoryClass</tt> 为 DEFAULT.class 且
 <tt>factoryMethod</tt> 不为 ""，则 <tt>factoryMethod</tt> 是此类中静态工厂方法的名称。

 <p>如果 <tt>factoryClass</tt> 不是 DEFAULT.class，则 
 <tt>factoryMethod</tt> 不得为 ""，且必须是 <tt>factoryClass</tt> 中指定的静态工厂方法的名称。


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.annotation.XmlType.factoryMethod()
<!-- END KEY -->
<!-- BEGIN DATA -->
一个不带参数的构造方法的名称，该构造方法在 <tt>factoryClass</tt> factoryClass() 所指定的类。
 

<!-- END DATA -->


