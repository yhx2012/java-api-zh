<!-- BEGIN KEY -->
public interface class javax.xml.bind.annotation.XmlIDREF implements java.lang.annotation.Annotation
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
将 JavaBean 属性映射到 XML IDREF。
 
 <p>
要在 XML 序列化然后反序列化这一过程中保持对象图形的引用完整性，需要通过使用引用或容器适当地对对象引用进行编组。注释 <tt>@XmlID</tt> 和 <tt>@XmlIDREF</tt> 一起使用时允许通过容器或引用来实现 JavaBean 属性类型的自定义映射。 

<p><b>用法</b> </p>
<tt>@XmlIDREF</tt> 注释能够与以下程序元素一起使用： 
 <ul> 
<li> JavaBean 属性 </li>
<li> 非 static、非 transient 字段 </li>
 </ul>
 
<p>有关其他公共消息，请参阅 javax.xml.bind.package javadoc 中的&ldquo;包规范&rdquo;。</p>

<p> 用法受到以下约束的限制：
 <ul>

   <li> 如果字段或属性的类型是一个 collection 类型，则集合项类型必须包含一个用 <tt>&#64;XmlID</tt> 注释的属性或字段。</li> 
   <li> 如果字段或属性的类型是 single valued，则属性或字段的类型必须包含一个用 <tt>&#64;XmlID</tt> 注释的属性或字段。
        <p>注：如果集合项类型或属性的类型（用于非 collection 类型）是 java.lang.Object，则该实例必须包含一个用 <tt>&#64;XmlID</tt> 属性注释的属性/字段。
        </li>
   <li> 此注释可与以下注释一起使用：{@link XmlElement}、{@link XmlAttribute}、{@link XmlList} 和 {@link XmlElements}。</li>  

 </ul>
<p><b>示例：</b>将 JavaBean 属性映射到 <tt>xs:IDREF</tt>（即通过引用而不是通过包含）。</p>
 <pre>

   //EXAMPLE: Code fragment
   public class Shipping {
       &#64;XmlIDREF public Customer getCustomer();
       public void setCustomer(Customer customer);
       ....
    }

   &lt;!-- Example: XML Schema fragment -->
   &lt;xs:complexType name="Shipping">
     &lt;xs:complexContent>
       &lt;xs:sequence>
         &lt;xs:element name="customer" type="xs:IDREF"/>
         ....
       &lt;/xs:sequence>
     &lt;/xs:complexContent>
   &lt;/xs:complexType>

 </pre>

<p><b>示例 2：</b>以下是一个对比容器与引用的完整示例。
 
 <pre>
    // By default, Customer maps to complex type <tt>xs:Customer</tt>
    public class Customer {
        
        // map JavaBean property type to <tt>xs:ID</tt>
        &#64;XmlID public String getCustomerID();
        public void setCustomerID(String id);

        // .... other properties not shown 
    }


   // By default, Invoice maps to a complex type <tt>xs:Invoice</tt> 
   public class Invoice {
    
       // map by reference
       &#64;XmlIDREF public Customer getCustomer();       
       public void setCustomer(Customer customer);

      // .... other properties not shown here
   }

   // By default, Shipping maps to complex type <tt>xs:Shipping</tt>
   public class Shipping {

       // map by reference
       &#64;XmlIDREF public Customer getCustomer();       
       public void setCustomer(Customer customer);
   }

   // at least one class must reference Customer by containment;
   // Customer instances won't be marshalled.
   &#64;XmlElement(name="CustomerData")
   public class CustomerData {
       // map reference to Customer by containment by default.
       public Customer getCustomer();

       // maps reference to Shipping by containment by default. 
       public Shipping getShipping();     

       // maps reference to Invoice by containment by default. 
       public Invoice getInvoice();     
   }

   &lt;!-- XML Schema mapping for above code frament -->

   &lt;xs:complexType name="Invoice">
     &lt;xs:complexContent>
       &lt;xs:sequence>
         &lt;xs:element name="customer" type="xs:IDREF"/>
         ....
       &lt;/xs:sequence>
     &lt;/xs:complexContent>
   &lt;/xs:complexType>

   &lt;xs:complexType name="Shipping">
     &lt;xs:complexContent>
       &lt;xs:sequence>
         &lt;xs:element name="customer" type="xs:IDREF"/>
         ....
       &lt;/xs:sequence>
     &lt;/xs:complexContent>
   &lt;/xs:complexType>

   &lt;xs:complexType name="Customer">
     &lt;xs:complexContent>
       &lt;xs:sequence>
         ....
       &lt;/xs:sequence>
       &lt;xs:attribute name="CustomerID" type="xs:ID"/>
     &lt;/xs:complexContent>
   &lt;/xs:complexType>

   &lt;xs:complexType name="CustomerData">
     &lt;xs:complexContent>
       &lt;xs:sequence>
         &lt;xs:element name="customer" type="xs:Customer"/>
         &lt;xs:element name="shipping" type="xs:Shipping"/>
         &lt;xs:element name="invoice"  type="xs:Invoice"/>
       &lt;/xs:sequence>
     &lt;/xs:complexContent>
   &lt;/xs:complexType>

   &lt;xs:element name"customerData" type="xs:CustomerData"/>

   &lt;!-- Instance document conforming to the above XML Schema -->
    &lt;customerData>
       &lt;customer customerID="Alice">
           ....
       &lt;/customer>

       &lt;shipping customer="Alice">
           ....
       &lt;/shipping>
         
       &lt;invoice customer="Alice">
           ....
       &lt;/invoice>
   &lt;/customerData>

 </pre>

<p><b>示例 3：</b>将列表映射到 IDREF 类型的重复元素。
 <pre>
     // Code fragment
     public class Shipping {
         &#64;XmlIDREF
         &#64;XmlElement(name="Alice")
             public List customers;
     }

     &lt;!-- XML schema fragment -->
     &lt;xs:complexType name="Shipping">
       &lt;xs:sequence>
         &lt;xs:choice minOccurs="0" maxOccurs="unbounded">
           &lt;xs:element name="Alice" type="xs:IDREF"/>
         &lt;/xs:choice>
       &lt;/xs:sequence>
     &lt;/xs:complexType> 
 </pre>


<p><b>示例 4：</b>将列表映射到 IDREF 类型的元素列表。
<pre>
     //Code fragment
     public class Shipping {
         &#64;XmlIDREF
         &#64;XmlElements(
             &#64;XmlElement(name="Alice", type="Customer.class")
              &#64;XmlElement(name="John", type="InternationalCustomer.class")
         public List customers;
     }

     &lt;!-- XML Schema fragment -->
     &lt;xs:complexType name="Shipping">
       &lt;xs:sequence>
         &lt;xs:choice minOccurs="0" maxOccurs="unbounded">
           &lt;xs:element name="Alice" type="xs:IDREF"/>
           &lt;xs:element name="John" type="xs:IDREF"/>
         &lt;/xs:choice>
       &lt;/xs:sequence>
     &lt;/xs:complexType> 
 </pre>
@author Sekhar Vajjhala, Sun Microsystems, Inc.
@see XmlID
@since JAXB2.0
@version $Revision: 1.4 $

<!-- END DATA -->
