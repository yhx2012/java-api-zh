<!-- BEGIN KEY -->
public interface class javax.xml.bind.annotation.XmlElementRef implements java.lang.annotation.Annotation
<!-- END KEY -->
<!-- BEGIN DATA -->

 <p>
将 JavaBean 属性映射到派生于属性类型的 XML 元素。
 <p>
<b>用法</b>
 <p>
<tt>@XmlElementRef</tt> 注释可以与 JavaBean 属性一起使用或在 {@link XmlElementRefs} 中使用。
 <p>
此注释将 XML 元素名称与 JavaBean 属性动态关联起来。当 JavaBean 属性使用 {@link XmlElement} 进行注释时，XML 元素名称以静态方式派生于 JavaBean 属性名称。但是，在使用此注释时，XML 元素名称派生于运行时的 JavaBean 属性类型的实例。

<h3> XML 模式替换组支持 </h3>
XML 模式允许 XML 文档作者使用 XML 元素名称，这里的名称指没有在使用替换组的模式的内容模式中静态指定的名称。模式派生代码为使用<i>元素属性</i>的替换组提供了支持（请参阅 JAXB 2.0 规范的第 5.5.5 节：“元素属性”）。元素属性方法签名的形式如下：
 <pre><xmp>
public void setTerm(JAXBElement<? extends Operator>);
public JAXBElement<? extends Operator> getTerm();
 </xmp></pre>
 <p>
用 {@link XmlElementDecl} 注释的元素工厂方法用于创建包含 XML 元素名称的 <tt>JAXBElement</tt> 实例。元素属性中出现 @XmlElementRef 注释则表示使用取自 <tt>JAXBElement</tt> 实例的元素名称，而不是从 JavaBean 属性名称中派生一个 XML 元素名称。
 
 <p>
<ul>
<li>如果集合条目类型（用于集合属性）或属性类型（用于单个赋值属性）是 {@link javax.xml.bind.JAXBElement}，则 <tt>&#64;XmlElementRef}.name()</tt> 和 <tt>&#64;XmlElementRef.namespace()</tt> 必须指向一个元素工厂方法，并在使用 @XmlRegistry 注释的类中存在一个 @XmlElementDecl 注释（通常 ObjectFactory 类由模式编译器生成）：
        <ul>
            <li> @XmlElementDecl.name() 必须等于 @XmlElementRef.name()  </li>
            <li> @XmlElementDecl.namespace() 必须等于 @XmlElementRef.namespace()。 </li>
        </ul>
   </li>
   <li> 如果集合条目类型（用于集合属性）或属性类型（用于单个赋值属性）不是 {@link javax.xml.bind.JAXBElement}，则由属性或字段引用的类型必须是使用 {@link XmlRootElement} 注释的。</li>
   <li> 此注释可以与以下注释一起使用：{@link XmlElementWrapper} 和 {@link XmlJavaTypeAdapter}。</li>
 </ul>

<p>有关其他公共信息，请参阅 javax.xml.bind.package javadoc 中的&ldquo;包规范&rdquo;。</p>

<p><b>示例 1：Ant 任务示例</b></p>
以下 Java 类层次结构建立了 Ant 构建脚本模型。Ant 任务对应于类层次结构中的类。Ant 任务的 XML 元素名称由其对应类上的 @XmlRootElement 注释指示。
 <pre>
     &#64;XmlRootElement(name="target")
     class Target {
         // The presence of &#64;XmlElementRef indicates that the XML
         // element name will be derived from the &#64;XmlRootElement 
         // annotation on the type (for e.g. "jar" for JarTask). 
         &#64;XmlElementRef
         List&lt;Task> tasks;
     }

     abstract class Task {
     }

     &#64;XmlRootElement(name="jar")
     class JarTask extends Task {
         ...
     }

     &#64;XmlRootElement(name="javac")
     class JavacTask extends Task {
         ...
     }

     &lt;!-- XML Schema fragment -->
     &lt;xs:element name="target" type="Target">
     &lt;xs:complexType name="Target">
       &lt;xs:sequence>
         &lt;xs:choice maxOccurs="unbounded">
           &lt;xs:element ref="jar">
           &lt;xs:element ref="javac">
         &lt;/xs:choice>
       &lt;/xs:sequence>
     &lt;/xs:complexType>

 </pre>
 <p>
因此下列代码片段
 <pre>
Target target = new Target();
target.tasks.add(new JarTask());
target.tasks.add(new JavacTask());
marshal(target);
 </pre>
将生成以下 XML 输出：
 <pre><xmp>
     <target>
       <jar>
         ....
       </jar>
       <javac>
         ....
       </javac>
     </target>
 </xmp></pre>
 <p>
有一个类扩展了不具有 {@link XmlRootElement} 的 <tt>Task</tt> 并不是一个错误。但是这些类将无法出现在 XML 实例中（因为它们没有 XML 元素名称）。

<p><b>示例 2：XML 模式替换组支持</b>
<p> 以下示例显示用于 XML 模式替换组的注释。注释和 ObjectFactory 都派生于模式。
 
 <pre>
     &#64;XmlElement
     class Math {
         //  The value of {@link #type()}is 
         //  JAXBElement.class , which indicates the XML
         //  element name ObjectFactory - in general a class marked
         //  with &#64;XmlRegistry. (See ObjectFactory below)
         //  
         //  The {@link #name()} is "operator", a pointer to a
         // factory method annotated with a
         //  {@link XmlElementDecl} with the name "operator". Since
         //  "operator" is the head of a substitution group that
         //  contains elements "add" and "sub" elements, "operator"
         //  element can be substituted in an instance document by
         //  elements "add" or "sub". At runtime, JAXBElement
         //  instance contains the element name that has been
         //  substituted in the XML document.
         // 
         &#64;XmlElementRef(type=JAXBElement.class,name="operator")
         JAXBElement&lt;? extends Operator> term;
     }

     &#64;XmlRegistry
     class ObjectFactory {
         &#64;XmlElementDecl(name="operator")
         JAXBElement&lt;Operator> createOperator(Operator o) {...}
         &#64;XmlElementDecl(name="add",substitutionHeadName="operator")
         JAXBElement&lt;Operator> createAdd(Operator o) {...}
         &#64;XmlElementDecl(name="sub",substitutionHeadName="operator")
         JAXBElement&lt;Operator> createSub(Operator o) {...}
     }

     class Operator {
         ...
     }
 </pre>
 <p>
因此以下代码片段
 <pre>
Math m = new Math();
m.term = new ObjectFactory().createAdd(new Operator());
marshal(m);
 </pre>
将生成以下 XML 输出：
 <pre>
&lt;math&gt;
&lt;add&gt;...&lt;/add&gt;
&lt;/math&gt;
 </pre>

 
@author<ul><li>Kohsuke Kawaguchi, Sun Microsystems,Inc.</li><li>Sekhar Vajjhala, Sun Microsystems, Inc.</li></ul>
@see XmlElementRefs
@since JAXB 2.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class javax.xml.bind.annotation.XmlElementRef.type()
<!-- END KEY -->
<!-- BEGIN DATA -->
被引用的 Java 类型。
 <p>
如果该值为 DEFAULT.class，则可以从 JavaBean 属性类型推导出该类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.annotation.XmlElementRef.namespace()
<!-- END KEY -->
<!-- BEGIN DATA -->
可以使用此参数和 {@link #name()} 来确定 JavaBean 属性的 XML 元素。

<p> 如果 <tt>type()</tt> 是 <tt>JAXBElement.class</tt>，那么 <tt>namespace()</tt> 和 <tt>name()</tt> 指向带有 {@link XmlElementDecl} 的工厂方法。XML 元素名称是工厂方法的 {@link XmlElementDecl} 注释的元素名称，如果取自其替换组中的元素（替换组的头元素）在 XML 文档中已被替换，则 XML 元素名称取自替换元素的 {@link XmlElementDecl}。

<p> 如果 {@link #type()} 不是 <tt>JAXBElement.class</tt>，那么 XML 元素名称是与使用该类型上的 {@link XmlRootElement} 注释的类型静态关联的 XML 元素名称。如果没有使用 {@link XmlElementDecl} 注释该类型，那么它是一个错误。

<p> 如果 <tt>type()</tt> 不是 <tt>JAXBElement.class</tt>，那么此值必须是 &quot;&quot;。 


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.annotation.XmlElementRef.name()
<!-- END KEY -->
<!-- BEGIN DATA -->

@see #namespace()

<!-- END DATA -->
