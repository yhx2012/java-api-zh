<!-- BEGIN KEY -->
public interface class javax.xml.bind.annotation.XmlElement implements java.lang.annotation.Annotation
<!-- END KEY -->
<!-- BEGIN DATA -->
将 JavaBean 属性映射到派生于属性名称的 XML 元素。

<p> <b>用法</b> </p>
 <p>
<tt>@XmlElement</tt> 注释可以与以下程序元素一起使用： 
 <ul> 
<li> JavaBean 属性 </li>
<li> 非 static、非 transient 字段 </li>
<li> {@link XmlElements} 中的程序元素
 <p>

 </ul>
 
用法受到以下约束的限制：
 <ul> 
<li> 此注释可与以下注释一起使用：{@link XmlID}、{@link XmlIDREF}、{@link XmlList}、{@link XmlSchemaType}、{@link XmlValue}、{@link XmlAttachmentRef}、{@link XmlMimeType}、{@link XmlInlineBinaryData}、{@link XmlElementWrapper} 和 {@link XmlJavaTypeAdapter}。</li>
<li> 如果 JavaBean 属性的类型是数组的集合类型、索引 (indexed) 属性或参数化列表，并且此注释与 {@link XmlElements} 一起使用，那么 <tt>@XmlElement.type()</tt> 在集合条目类型已知的情况下必须是 DEFAULT.class。 </li>
 </ul>

 <p>
在使用 @XmlElement 注释进行注释时，JavaBean 属性被映射到 XML 模式复杂类型中的本地元素，包含的类被映射到此 XML 模式复杂类型。
 
 <p>
<b>示例 1：</b>将 public 非 static 非 final 字段映射到本地元素。
 <pre>
     //Example: Code fragment
     public class USPrice {
         &#64;XmlElement(name="itemprice")
         public java.math.BigDecimal price;
     }

     &lt;!-- Example: Local XML Schema element -->
     &lt;xs:complexType name="USPrice"/>
       &lt;xs:sequence>
         &lt;xs:element name="itemprice" type="xs:decimal" minOccurs="0"/>
       &lt;/sequence>
     &lt;/xs:complexType>
   </pre>
 <p>
 
<b>示例 2：</b>将字段映射到 nillable 元素。
   <pre>

     //Example: Code fragment
     public class USPrice {
         &#64;XmlElement(nillable=true)
         public java.math.BigDecimal price;
     }

     &lt;!-- Example: Local XML Schema element -->
     &lt;xs:complexType name="USPrice">
       &lt;xs:sequence>
         &lt;xs:element name="price" type="xs:decimal" nillable="true" minOccurs="0"/>
       &lt;/sequence>
     &lt;/xs:complexType>
   </pre>
 <p>
 <b> 示例 3: </b>将字段映射到 nillable、required 元素。
   <pre>

     //Example: Code fragment
     public class USPrice {
         &#64;XmlElement(nillable=true, required=true)
         public java.math.BigDecimal price;
     }

     &lt;!-- Example: Local XML Schema element -->
     &lt;xs:complexType name="USPrice">
       &lt;xs:sequence>
         &lt;xs:element name="price" type="xs:decimal" nillable="true" minOccurs="1"/>
       &lt;/sequence>
     &lt;/xs:complexType>
   </pre>
 <p>
 
<p> <b>示例 4：</b>将 JavaBean 属性映射到具有匿名类型的 XML 元素。</p> 
 <p>
请参阅 @{@link XmlType} 中的示例 6。
  
 <p> 
@author Sekhar Vajjhala, Sun Microsystems, Inc.
@since JAXB 2.0
@version $Revision: 1.5 $

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.annotation.XmlElement.name()
<!-- END KEY -->
<!-- BEGIN DATA -->

XML 模式元素的名称。 
<p> 如果值为 &quot;##default&quot;，那么元素名称派生于 JavaBean 属性名称。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.xml.bind.annotation.XmlElement.nillable()
<!-- END KEY -->
<!-- BEGIN DATA -->
将元素声明自定义为 nillable。 
<p>如果 nillable() 为 true，那么 JavaBean 属性被映射到 XML 模式 nillable 元素声明。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.xml.bind.annotation.XmlElement.required()
<!-- END KEY -->
<!-- BEGIN DATA -->
 自定义所需的元素声明。
 <p>如果 required() 为 true，则将 Javabean 属性映射到一个 minOccurs="1" 的 XML 模式元素声明。maxOccurs 为 "1" 表示单个赋值的属性，maxOccurs 为 "unbounded" 则表示多个赋值的属性。
 <p>如果 required() 为 false，则将 Javabean 属性映射到一个 minOccurs="0" 的 XML 模式元素声明。maxOccurs 为 "1" 表示单个赋值的属性，maxOccurs 为 "unbounded" 则表示多个赋值的属性。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.annotation.XmlElement.namespace()
<!-- END KEY -->
<!-- BEGIN DATA -->
XML 模式元素的 XML 目标名称空间。
 <p>
 如果该值为 "##default"，则名称空间通过以下方式确定：
 <ol>
  <li>
  如果封闭包中包含 {@link XmlSchema} 注释，并且其 {@link XmlSchema#elementFormDefault() elementFormDefault}
  为 {@link XmlNsForm#QUALIFIED QUALIFIED}，则名称空间为封闭类的名称空间。

  <li>
  否则名称空间为 ""（这将导致在默认名称空间中生成非限定元素）。
 </ol>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.annotation.XmlElement.defaultValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
此元素的默认值。

 <p>
作为此注释元素的默认值指定的 '' 值被用作 null 的替代，从而允许识别 'no default value' 状态。  

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class javax.xml.bind.annotation.XmlElement.type()
<!-- END KEY -->
<!-- BEGIN DATA -->
正被引用的 Java 类。

<!-- END DATA -->
