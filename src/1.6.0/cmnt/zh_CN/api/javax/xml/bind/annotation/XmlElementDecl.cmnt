<!-- BEGIN KEY -->
public interface class javax.xml.bind.annotation.XmlElementDecl implements java.lang.annotation.Annotation
<!-- END KEY -->
<!-- BEGIN DATA -->
将工厂方法映射到 XML 元素。

<p> <b>用法</b> </p>

该注释在 XML 模式元素声明与<i>元素工厂方法</i>之间创建了映射关系，元素工厂方法返回表示元素声明的 JAXBElement 实例。通常，元素工厂方法是根据 Java 包的 ObjectFactory 类中的模式生成（并注解）的，它表示元素声明的目标名称空间的绑定。因此，当注释语法允许在任何方法上使用 @XmlElementDecl 时，从语义上说，它的使用受限于元素工厂方法的注释。 

用法受到以下约束的限制：
 
 <ul>
<li> 包含使用 @XmlElementDecl 注释的元素工厂方法的类必须使用 {@link XmlRegistry} 标记。 </li> 
<li> 元素工厂方法必须采用一个可分配给 {@link Object} 的参数。</li> 
 </ul>

<p><b>示例 1：</b>工厂方法上的注释
 <pre>
     // Example: code fragment
     &#64;XmlRegistry
     class ObjectFactory {
         &#64;XmlElementDecl(name="foo")
         JAXBElement&lt;String> createFoo(String s) { ... }
     }
 </pre>
 <pre><xmp> 
     <!-- XML input -->
       <foo>string</foo>

     // Example: code fragment corresponding to XML input
     JAXBElement<String> o =
     (JAXBElement<String>)unmarshaller.unmarshal(aboveDocument);
     // print JAXBElement instance to show values
     System.out.println(o.getName());   // prints  "{}foo"
     System.out.println(o.getValue());  // prints  "string"
     System.out.println(o.getValue().getClass()); // prints "java.lang.String"

     <!-- Example: XML schema definition -->
     <xs:element name="foo" type="xs:string"/>
 </xmp></pre>

<p><b>示例 2：</b>具有非本地作用域的元素声明
 <p>
以下示例演示了如何在模式派生代码的元素声明绑定中使用作用域注释参数。 
 <p>
在此 javadoc 以后的版本中可能会替换以下示例。
 
 <pre><xmp>
     <!-- Example: XML schema definition -->
     <xs:schema>
       <xs:complexType name="pea">
         <xs:choice maxOccurs="unbounded">
           <xs:element name="foo" type="xs:string"/>
           <xs:element name="bar" type="xs:string"/>
         </xs:choice>
       </xs:complexType> 
       <xs:element name="foo" type="xs:int"/>
     </xs:schema>
 </xmp></pre> 
 <pre>
     // Example: expected default binding
     class Pea {
         &#64;XmlElementRefs({
             &#64;XmlElementRef(name="foo",type=JAXBElement.class)
             &#64;XmlElementRef(name="bar",type=JAXBElement.class)
         })
         List&lt;JAXBElement&lt;String>> fooOrBar;
     }
 
     &#64;XmlRegistry
     class ObjectFactory {
         &#64;XmlElementDecl(scope=Pea.class,name="foo")
         JAXBElement<String> createPeaFoo(String s);
 
         &#64;XmlElementDecl(scope=Pea.class,name="bar")
         JAXBElement<String> createPeaBar(String s);
 
         &#64;XmlElementDecl(name="foo")
         JAXBElement<Integer> createFoo(Integer i);
     }
 
 </pre>
没有作用域，createFoo 和 createPeaFoo 将变得不明确，因为它们两个都使用相同的本地名称 &quot;foo&quot; 映射到 XML 模式元素。 

@see XmlRegistry
@since JAXB 2.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class javax.xml.bind.annotation.XmlElementDecl.scope()
<!-- END KEY -->
<!-- BEGIN DATA -->
映射的作用域。

 <p>
如果此值不是 {@link XmlElementDecl.GLOBAL}，那么此元素声明映射只有在指定类中才是活动的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.annotation.XmlElementDecl.namespace()
<!-- END KEY -->
<!-- BEGIN DATA -->
XML 元素的名称空间名。
 <p>
如果值是 &quot;##default&quot;，那么该值是实现包含此工厂方法类的包的名称空间名。

@see #name()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.annotation.XmlElementDecl.name()
<!-- END KEY -->
<!-- BEGIN DATA -->
XML 元素的本地名称。

 <p>
<b>审阅者的注释：</b>没有默认名称；因为注释是在工厂方法上，所以能否从工厂方法名称派生方法名称不是很清楚。
@see #namespace()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.annotation.XmlElementDecl.substitutionHeadNamespace()
<!-- END KEY -->
<!-- BEGIN DATA -->
替换组的头 XML 元素的名称空间名。
 <p>
此值指定本地名称由 <tt>substitutionHeadName()</tt> 指定的 XML 元素的名称空间名。
 <p> 
如果 <tt>susbtitutionHeadName()</tt> 为 &quot;&quot;，则此值只能是 &quot;##default&quot;。但该值被忽略，因为在 <tt>susbstitutionHeadName()</tt> 的值是 &quot;&quot; 时，此元素不是替换组的一部分。
 <p>
如果 <tt>susbtitutionHeadName()</tt> 不是 &quot;&quot;，并且值为 &quot;##default&quot;，那么名称空间名是包含用 {@link XmlRegistry } 标记的类的包所映射到的名称空间名。
 <p>
如果 <tt>susbtitutionHeadName()</tt> 不是 &quot;&quot; 并且值不是 &quot;##default&quot;，那么该值是名称空间名。

@see #substitutionHeadName()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.annotation.XmlElementDecl.substitutionHeadName()
<!-- END KEY -->
<!-- BEGIN DATA -->
替换组的头元素的 XML 本地名称。
 <p>
如果值是 &quot;&quot;，那么此元素不是任何替换组的一部分。

@see #substitutionHeadNamespace()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.annotation.XmlElementDecl.defaultValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
此元素的默认值。

 <p>
作为此注释元素的默认值指定的 '' 值被用作 null 的替代，从而允许识别 'no default value' 状态。

<!-- END DATA -->
