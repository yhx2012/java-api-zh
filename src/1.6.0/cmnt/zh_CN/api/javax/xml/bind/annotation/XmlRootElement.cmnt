<!-- BEGIN KEY -->
public interface class javax.xml.bind.annotation.XmlRootElement implements java.lang.annotation.Annotation
<!-- END KEY -->
<!-- BEGIN DATA -->
将类或枚举类型映射到 XML 元素。

<p> <b>用法</b> </p>
 <p> &#64;XmlRootElement 注释可以与以下程序元素一起使用： 
 <ul> 
<li> 顶层类 </li>
<li> 枚举类型 </li>
 </ul>

<p>有关其他公共信息，请参阅 javax.xml.bind.package javadoc 中的&ldquo;包规范&rdquo;。</p>
 
 <p>
当使用 @XmlRootElement 注释对顶层类或枚举类型进行注释时，类型值被表示为 XML 文档中的 XML 元素。

<p> 此注释可与以下注释一起使用：
 {@link XmlType}、{@link XmlEnum}、{@link XmlAccessorType}、
 {@link XmlAccessorOrder}。
 <p>

 <p>
<b>示例 1：</b>将元素与 XML 模式类型关联
 <pre>
     // Example: Code fragment
     &#64;XmlRootElement
     class Point {
        int x;
        int y;
        Point(int _x,int _y) {x=_x;y=_y;}
     }
 </pre>

 <pre>
     //Example: Code fragment corresponding to XML output
     marshal( new Point(3,5), System.out);
 </pre>

 <pre><xmp>
     <!-- Example: XML output -->
     <point>
       <x> 3 </x>
       <y> 5 </y>
     </point>
 </xmp></pre>


该注释会导致在模式中生成全局元素声明。全局元素声明与类映射到的 XML 模式类型关联。

 <pre><xmp>
&lt;!-- Example:XML schema definition --&gt;
     <xs:element name="point" type="point"/>
     <xs:complexType name="point">
       <xs:sequence>
         <xs:element name="x" type="xs:int"/>
         <xs:element name="y" type="xs:int"/>
       </xs:sequence>
     </xs:complexType>
 </xmp></pre>

 <p>

<b>示例 2：类型继承的正交性</b>
 
 <p>
某一类型上注释的元素声明不会被其派生类型继承。以下示例显示了这一点：
 <pre>
     // Example: Code fragment
     &#64;XmlRootElement
     class Point3D extends Point {
         int z;
         Point3D(int _x,int _y,int _z) {super(_x,_y);z=_z;}
     }

     //Example: Code fragment corresponding to XML output * 
     marshal( new Point3D(3,5,0), System.out );

     &lt;!-- Example: XML output -->
     &lt;!-- The element name is point3D not point -->
     &lt;point3D>
       &lt;x>3&lt;/x>
       &lt;y>5&lt;/y>
       &lt;z>0&lt;/z>
     &lt;/point3D>

     &lt;!-- Example: XML schema definition -->
     &lt;xs:element name="point3D" type="point3D"/>
     &lt;xs:complexType name="point3D">
       &lt;xs:complexContent>
         &lt;xs:extension base="point">
           &lt;xs:sequence>
             &lt;xs:element name="z" type="xs:int"/>
           &lt;/xs:sequence>
         &lt;/xs:extension>
       &lt;/xs:complexContent>
     &lt;/xs:complexType>
 </pre>


<b>示例 3：</b>将全局元素与该类映射到的 XML 模式类型关联。
 <pre>
     //Example: Code fragment
     &#64;XmlRootElement(name="PriceElement")
     public class USPrice {
         &#64;XmlElement
         public java.math.BigDecimal price;
     }

     &lt;!-- Example: XML schema definition -->
     &lt;xs:element name="PriceElement" type="USPrice"/>
     &lt;xs:complexType name="USPrice">
       &lt;xs:sequence>
         &lt;xs:element name="price" type="xs:decimal"/>
       &lt;/sequence>
     &lt;/xs:complexType>
 </pre>


@author Sekhar Vajjhala, Sun Microsystems, Inc.
@since JAXB2.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.annotation.XmlRootElement.namespace()
<!-- END KEY -->
<!-- BEGIN DATA -->
XML 元素的名称空间名。
 <p>
如果该值为 &quot;##default&quot;，那么 XML 名称空间名派生于类 ({@link XmlSchema}) 的包。如果没有对包命名，那么 XML 名称空间是默认的空名称空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.bind.annotation.XmlRootElement.name()
<!-- END KEY -->
<!-- BEGIN DATA -->
XML 元素的本地名称。
 <p>
如果值为 &quot;##default&quot;，则名称派生于类名称。 


<!-- END DATA -->
