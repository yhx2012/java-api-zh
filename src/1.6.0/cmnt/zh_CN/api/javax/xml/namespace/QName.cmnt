<!-- BEGIN KEY -->
public class javax.xml.namespace.QName extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->

<p><code>QName</code> 表示 XML 规范中定义的<strong>限定名称</strong>：<a
 href="http://www.w3.org/TR/xmlschema-2/#QName">XML 模式第二部分：Datatypes specification</a>、<a
 href="http://www.w3.org/TR/REC-xml-names/#ns-qualnames">Namespaces in XML</a>、<a
 href="http://www.w3.org/XML/xml-names-19990114-errata">Namespaces in XML 勘误表</a>。</p>

<p><code>QName</code> 的值包含<strong>名称空间 URI</strong>、<strong>本地部分</strong>和<strong>前缀</strong>。</p>

<p><code>QName</code> 中包括前缀，以保留词汇信息（当在 {@link javax.xml.transform.Source XML 输入源}中<strong><em>存在</em></strong> 时）。前缀<strong><em>不</em></strong> 用于 {@link #equals(Object) QName.equals(Object)} 或计算 {@link #hashCode() QName.hashCode()}。<strong><em>仅</em></strong> 使用名称空间 URI 和本地部分定义相等性和哈希码。</p>

<p>如果没有指定名称空间 URI，则将其设置为 {@link javax.xml.XMLConstants#NULL_NS_URI XMLConstants.NULL_NS_URI}。如果没有指定前缀，则将其设置为 {@link javax.xml.XMLConstants#DEFAULT_NS_PREFIX XMLConstants.DEFAULT_NS_PREFIX}。</p>

<p><code>QName</code> 是不可变的。</p>

@author <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
@version $Revision: 1.4 $, $Date: 2006-09-18 09:03:18 $
@see <a href="http://www.w3.org/TR/xmlschema-2/#QName">
  XML 模式第二部分：Datatypes specification</a>
@see <a href="http://www.w3.org/TR/REC-xml-names/#ns-qualnames">
  Namespaces in XML</a>
@see <a href="http://www.w3.org/XML/xml-names-19990114-errata">
  Namespaces in XML 勘误表</a>
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.String javax.xml.namespace.QName.namespaceURI
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>此 <code>QName</code> 的名称空间 URI。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.String javax.xml.namespace.QName.localPart
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>此 <code>QName</code> 的本地部分。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.String javax.xml.namespace.QName.prefix
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>此 <code>QName</code> 的前缀。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.namespace.QName(String namespaceURI, String localPart)
<!-- END KEY -->
<!-- BEGIN DATA -->

<p>指定名称空间 URI 和本地部分的 <code>QName</code> 构造方法。</p>

<p>如果名称空间 URI 为 <code>null</code>，则将它设置为 {@link javax.xml.XMLConstants#NULL_NS_URI XMLConstants.NULL_NS_URI}。此值表示非显式定义的名称空间，在 <a
 href="http://www.w3.org/TR/REC-xml-names/#ns-qualnames">Namespaces in XML</a> 规范中定义。此操作保持了与 QName 1.0 兼容的行为。显式提供 {@link javax.xml.XMLConstants#NULL_NS_URI XMLConstants.NULL_NS_URI} 值是首选的编码风格。</p>

<p>如果本地部分为 <code>null</code>，则抛出 <code>IllegalArgumentException</code>。允许 &quot;&quot; 的本地部分保持与 QName 1.0 的兼容行为。 </p>

<p>当使用此构造方法时，将前缀设置为 {@link javax.xml.XMLConstants#DEFAULT_NS_PREFIX XMLConstants.DEFAULT_NS_PREFIX}。</p>

<p>名称空间 URI 不根据 <a href="http://www.ietf.org/rfc/rfc2396.txt">URI 参考</a>验证。没有按 <a href="http://www.w3.org/TR/REC-xml-names/">Namespaces in XML</a> 中的指定将本地部分作为 <a href="http://www.w3.org/TR/REC-xml-names/#NT-NCName">NCName</a> 来验证。</p>

@param namespaceURI <code>QName</code> 的名称空间 URI
@param localPart   <code>QName</code> 的本地部分
@throws  IllegalArgumentException 当 <code>localPart</code> 为 <code>null</code> 时
 
@see #QName(String namespaceURI, String localPart, String prefix) QName(String namespaceURI, String localPart, String prefix)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.namespace.QName(String namespaceURI, String localPart, String prefix)
<!-- END KEY -->
<!-- BEGIN DATA -->

<p>指定名称空间 URI、本地部分和前缀的 <code>QName</code> 构造方法。</p>

<p>如果名称空间 URI 为 <code>null</code>，则将它设置为 {@link javax.xml.XMLConstants#NULL_NS_URI XMLConstants.NULL_NS_URI}。此值表示非显式定义的名称空间，在 <a  href="http://www.w3.org/TR/REC-xml-names/#ns-qualnames">Namespaces in XML</a> 规范中定义。此操作保持了与 QName 1.0 兼容的行为。显式提供 {@link javax.xml.XMLConstants#NULL_NS_URI XMLConstants.NULL_NS_URI} 值是首选的编码风格。</p>
 
<p>如果本地部分为 <code>null</code>，则抛出 <code>IllegalArgumentException</code>。允许 &quot;&quot; 的本地部分保持与 QName 1.0 的兼容行为。</p>
 
<p>如果前缀为 <code>null</code>，则抛出 <code>IllegalArgumentException</code>。使用 {@link javax.xml.XMLConstants#DEFAULT_NS_PREFIX XMLConstants.DEFAULT_NS_PREFIX} 显式指示不存在任何前缀或前缀是不相关的。</p>

<p>名称空间 URI 不根据 <a href="http://www.ietf.org/rfc/rfc2396.txt">URI 参考</a>验证。没有按 <a href="http://www.w3.org/TR/REC-xml-names/">Namespaces in XML</a> 中的指定将本地部分和前缀作为 <a href="http://www.w3.org/TR/REC-xml-names/#NT-NCName">NCName</a> 来验证。</p>

@param namespaceURI  <code>QName</code> 的名称空间 URI
@param localPart   <code>QName</code> 的本地部分
@param prefix  <code>QName</code> 的前缀
@throws  IllegalArgumentException 当 <code>localPart</code> 或 <code>prefix</code> 为 <code>null</code> 时

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.namespace.QName(String localPart)
<!-- END KEY -->
<!-- BEGIN DATA -->

<p>指定本地部分的 <code>QName</code> 构造方法。</p>

<p>如果本地部分为 <code>null</code>，则抛出 <code>IllegalArgumentException</code>。允许 &quot;&quot; 的本地部分保持与 QName 1.0 的兼容行为。 </p>

<p>使用此构造方法时，将名称空间 URI 设置为 {@link javax.xml.XMLConstants#NULL_NS_URI XMLConstants.NULL_NS_URI}，并将前缀设置为 {@link javax.xml.XMLConstants#DEFAULT_NS_PREFIX XMLConstants.DEFAULT_NS_PREFIX}。</p>

<p><em>在 XML 上下文中，所有元素和属性名称都存在于名称空间的上下文中。在构造 <code>QName</code> 的过程中，使其显式存在有助于避免诊断 XML 有效性错误的难度。优先使用构造方法 {@link #QName(String namespaceURI, String localPart) QName(String namespaceURI, String localPart)} 和 {@link #QName(String namespaceURI, String localPart, String prefix)}。</em></p>
 
<p>没有按 <a href="http://www.w3.org/TR/REC-xml-names/">Namespaces in XML</a> 中的指定将本地部分作为 <a href="http://www.w3.org/TR/REC-xml-names/#NT-NCName">NCName</a> 来验证。</p>

@param localPart  <code>QName</code> 的本地部分
@throws  IllegalArgumentException 当 <code>localPart</code> 为 <code>null</code> 时

@see #QName(String namespaceURI, String localPart) QName(String namespaceURI, String localPart)
@see #QName(String namespaceURI, String localPart, String prefix) QName(String namespaceURI, String localPart, String prefix)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.namespace.QName.getNamespaceURI()
<!-- END KEY -->
<!-- BEGIN DATA -->

<p>获取此 <code>QName</code> 的名称空间 URI。</p>

@return 此 <code>QName</code> 的名称空间 URI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.namespace.QName.getLocalPart()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取此 <code>QName</code> 的本地部分。</p>

@return 此 <code>QName</code> 的本地部分

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.namespace.QName.getPrefix()
<!-- END KEY -->
<!-- BEGIN DATA -->

<p>获取此 <code>QName</code> 的前缀。</p>

<p>分配给 <code>QName</code> 的前缀在其他上下文中可能<strong><em>无</em></strong> 效。例如，可以在解析文档的上下文中为 <code>QName</code> 分配一个前缀，但是，该前缀可能在其他文档的上下文中无效。</p>

@return 此 <code>QName</code> 的前缀

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean javax.xml.namespace.QName.equals(Object objectToTest)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>测试此 <code>QName</code> 与另一个 <code>Object</code> 的相等性。</p>

<p>如果要测试的 <code>Object</code> 不是 <code>QName</code>，或为 <code>null</code>，那么此方法返回 <code>false</code>。</p>

<p>当且仅当名称空间 URI 和本地部分相等时，才认为两个 <code>QName</code> 相等。此方法使用 <code>String.equals()</code> 检查名称空间 URI 和本地部分的相等性。前缀<strong><em>不能</em></strong> 用于确定相等性。</p>

<p>此方法满足 {@link java.lang.Object#equals(Object) Object.equals(Object)} 的常规协定。</p>

@param objectToTest 要测试与此 <code>QName</code> 相等性的 <code>Object</code> 
@return  如果给定的 <code>Object</code> 等于此 <code>QName</code>，则返回 <code>true</code>，否则返回 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.xml.namespace.QName.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>生成此 <code>QName</code> 的哈希码。</p>

<p>使用 <code>QName</code> 的名称空间 URI 和本地部分计算哈希码。前缀<strong><em>不能</em></strong> 用于计算哈希码。</p>

<p>此方法满足 {@link java.lang.Object#hashCode() Object.hashCode()} 的常规协定。</p>

@return 此 <code>QName</code> <code>Object</code> 的哈希码

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.namespace.QName.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->

<p>此 <code>QName</code> 的 <code>String</code> 表示形式。</p>

<p>James Clark <a href="http://jclark.com/xml/xmlns.htm">定义</a>了将 <code>QName</code> 表示为 <code>String</code> 的公认方法。虽然这不是<em>标准</em> 规范，但其使用很频繁，例如 {@link javax.xml.transform.Transformer#setParameter(String name, Object value)}。此实现将 <code>QName</code> 表示为：&quot;{&quot; + Namespace URI + &quot;}&quot; + 本地部分。如果名称空间 URI <code>.equals(XMLConstants.NULL_NS_URI)</code>，则仅返回本地部分。此方法适用于调试或记录人为消耗。</p>

<p>注：前缀值<strong><em>不能</em></strong> 作为 <code>String</code> 表示形式的一部分返回。</p>
  
<p>此方法满足 {@link java.lang.Object#toString() Object.toString()} 的常规协定。</p>

@return  此 <code>QName</code> 的 <code>String</code> 表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.namespace.QName javax.xml.namespace.QName.valueOf(String qNameAsString)
<!-- END KEY -->
<!-- BEGIN DATA -->

<p>从解析格式化 <code>String</code> 中派生的 <code>QName</code>。</p>

<p>如果 <code>String</code> 为 <code>null</code>，或者不符合 {@link #toString() QName.toString()} 格式，则抛出 <code>IllegalArgumentException</code>。</p>
  
<p><em><code>String</code> <strong>必须</strong> 是 {@link #toString() QName.toString()}</em> 返回的格式。</p>

<p>James Clark <a href="http://jclark.com/xml/xmlns.htm">定义</a>了将 <code>QName</code> 表示为 <code>String</code> 的公认方法。虽然这不是<em>标准</em> 规范，但其使用很频繁，例如 {@link javax.xml.transform.Transformer#setParameter(String name, Object value)}。此实现将 <code>String</code> 解析为以下格式：&quot;{&quot; + Namespace URI + &quot;}&quot; + 本地部分。如果名称空间 URI <code>.equals(XMLConstants.NULL_NS_URI)</code>，则仅提供本地部分。</p>

<p><strong><em>不能</em></strong> 用 <code>String</code> 表示前缀值，并将它设置为 {@link javax.xml.XMLConstants#DEFAULT_NS_PREFIX XMLConstants.DEFAULT_NS_PREFIX}。</p>

<p>此方法不能完全验证生成的 <code>QName</code>。 
<p>名称空间 URI 不根据 <a href="http://www.ietf.org/rfc/rfc2396.txt">URI 参考</a>验证。没有按 <a href="http://www.w3.org/TR/REC-xml-names/">Namespaces in XML</a> 中的指定将本地部分作为 <a href="http://www.w3.org/TR/REC-xml-names/#NT-NCName">NCName</a> 来验证。</p>

@param qNameAsString <code>QName</code> 的 <code>String</code> 表示形式
@throws  IllegalArgumentException 当 <code>qNameAsString</code> 为 <code>null</code> 或出错时
@return 与给定 <code>String</code> 对应的 <code>QName</code>
@see #toString() QName.toString()

<!-- END DATA -->
