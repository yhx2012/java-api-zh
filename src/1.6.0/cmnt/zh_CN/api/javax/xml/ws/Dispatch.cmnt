<!-- BEGIN KEY -->
public interface javax.xml.ws.Dispatch extends javax.xml.ws.BindingProvider
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Dispatch</code> 接口提供对动态调用服务端点操作的支持。<code>javax.xml.ws.Service</code> 接口作为创建 <code>Dispatch</code> 实例的工厂。

@since JAX-WS 2.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public T javax.xml.ws.Dispatch.invoke(T msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
同步调用服务操作。
 
客户端负责确保在编组 <code>msg</code> 对象时根据所用协议绑定的要求形成它们。

@param msg 一个对象，将形成用来调用操作的消息或消息负载。
@return 用来调用操作的响应消息或消息负载。
@throws WebServiceException 如果在与服务通信的过程中发生故障
@throws WebServiceException 如果在配置 <code>Dispatch</code> 实例时出现任何错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.ws.Response<T> javax.xml.ws.Dispatch.invokeAsync(T msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
异步调用服务操作。该方法无需等待对操作调用的响应即可返回，操作的结果可以通过轮询返回的 <code>Response</code> 获得。
 
客户端负责确保在编组 <code>msg</code> 对象时根据所用协议绑定的要求形成它们。

@param msg 一个对象，将形成用来调用操作的消息或消息负载。
@return 用来调用操作的响应消息或消息负载。
@throws WebServiceException 如果在配置 <code>Dispatch</code> 实例时出现任何错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.Future<?> javax.xml.ws.Dispatch.invokeAsync(T msg, javax.xml.ws.AsyncHandler<T> handler)
<!-- END KEY -->
<!-- BEGIN DATA -->
异步调用服务操作。该方法无需等待对操作调用的响应即可返回，操作的结果可以通过传入的处理程序与客户端进行通信。
 
客户端负责确保在编组 <code>msg</code> 对象时根据所用协议绑定的要求形成它们。

@param msg 一个对象，将形成用来调用操作的消息或消息负载。
@param handler 将接收对操作调用的响应的处理程序对象。
@return 一个 <code>Future</code> 对象，可以用来检查操作调用的状态。此对象不得用来尝试获得操作的结果 - 从 <code>Future&lt;?&gt;.get()</code> 返回的对象与实现有关，并且使用该对象将导致不可移植的行为。
@throws WebServiceException 如果在配置 <code>Dispatch</code> 实例时出现任何错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.ws.Dispatch.invokeOneWay(T msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用单向交互模式调用服务操作。该操作调用逻辑上是非阻塞的，受到底层协议功能的限制，不返回结果。当使用的协议为 SOAP/HTTP 时，在收到 HTTP 响应代码或发生错误前，此方法必须阻塞。

客户端负责确保在编组 <code>msg</code> 对象时根据所用协议绑定的要求形成它们。

@param msg 一个对象，将形成用于调用操作的消息或消息负载。
@throws WebServiceException 如果在配置 <code>Dispatch</code> 实例时出现任何错误，或者在调用过程中发生错误。

<!-- END DATA -->
