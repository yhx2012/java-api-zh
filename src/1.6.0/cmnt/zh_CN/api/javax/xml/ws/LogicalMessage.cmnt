<!-- BEGIN KEY -->
public interface javax.xml.ws.LogicalMessage
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>LogicalMessage</code> 接口表示协议无关的 (protocol agnostic) XML 消息，并包含一些方法提供对消息负载的访问。

@since JAX-WS 2.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.Source javax.xml.ws.LogicalMessage.getPayload()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 XML 源的形式获取消息负载，可以在相同的 LogicalMessage 实例上多次调用，总是返回可以用来检索整个消息负载的新的 Source。

<p>如果返回的 Source 是 DOMSource 的实例，则对封装的 DOM 树的修改现场更改消息负载，不需要随后调用 <code>setPayload</code>。其他类型的 Source 只提供对消息负载的读取访问。

@return 所含的消息负载；如果此消息中没有净荷，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.ws.LogicalMessage.setPayload(Source payload)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置消息负载

@param  payload 消息负载
@throws WebServiceException 如果在此消息中设置净荷过程中发生任何错误
@throws java.lang.UnsupportedOperationException 如果不支持该操作

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.xml.ws.LogicalMessage.getPayload(JAXBContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 JAXB 对象的形式获取消息负载。注意，返回的对象和消息负载之间没有任何连接，更改净荷需要调用 <code>setPayload</code>。

@param  context 应该用来解组消息负载的 JAXBContext
@return 所含的消息负载；如果此消息中没有净荷，则返回 null
@throws WebServiceException 如果使用提供的 JAXBContext 解组净荷时发生错误。WebServiceException 的 cause 是初始 JAXBException。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.ws.LogicalMessage.setPayload(Object payload, JAXBContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置消息负载

@param  payload 消息负载
@param  context 应该用来对净荷进行编组的 JAXBContext
@throws java.lang.UnsupportedOperationException 如果不支持此操作
@throws WebServiceException 如果在使用提供的 JAXBContext 对净荷进行编组时发生错误。WebServiceException 的 cause 是初始 JAXBException。

<!-- END DATA -->
