<!-- BEGIN KEY -->
public interface javax.xml.ws.Provider
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>服务端点可以将 <code>Provider</code> 接口作为 SEI 的动态替代方法实现。

<p>实现要求支持 <code>Provider&lt;Source&gt;</code>、<code>Provider&lt;SOAPMessage&gt;</code> 和 <code>Provider&lt;DataSource&gt;</code>，具体取决于使用的绑定和服务模式。

<p><code>ServiceMode</code> 注释可以用来控制 <code>Provider</code> 实例是收到整个协议消息还是只收到消息负载。

@since JAX-WS 2.0

@see javax.xml.transform.Source
@see javax.xml.soap.SOAPMessage
@see javax.xml.ws.ServiceMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public T javax.xml.ws.Provider.invoke(T request)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据请求消息的内容调用操作。

@param  request 请求消息或消息负载。
@return 响应消息或消息负载。如果没有响应，则为 null。
@throws WebServiceException 如果在处理请求的过程中发生错误。WebServiceException 的 cause 可以设置为 ProtocolException 的子类，以控制异常的协议级别表示形式。
@see javax.xml.ws.handler.MessageContext
@see javax.xml.ws.ProtocolException

<!-- END DATA -->
