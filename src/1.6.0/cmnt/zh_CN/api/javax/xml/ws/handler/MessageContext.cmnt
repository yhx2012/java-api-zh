<!-- BEGIN KEY -->
public interface javax.xml.ws.handler.MessageContext extends java.util.Map
<!-- END KEY -->
<!-- BEGIN DATA -->
接口 <code>MessageContext</code> 抽象化由 <code>handle</code> 方法中的处理程序处理的消息上下文。 

<p><code>MessageContext</code> 接口提供管理属性集的方法。<code>MessageContext</code> 属性使处理程序链中的处理程序能够共享相关处理状态。
 
@since JAX-WS 2.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.ws.handler.MessageContext.MESSAGE_OUTBOUND_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
标准属性：消息方向，对于出站消息为 <code>true</code>，对于入站消息为 <code>false</code>。
<p>类型：boolean

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.ws.handler.MessageContext.INBOUND_MESSAGE_ATTACHMENTS
<!-- END KEY -->
<!-- BEGIN DATA -->
标准属性：用于入站消息的消息附件的映射，键为 MIME Content-ID，值为 DataHandler。
<p>类型：java.util.Map<String,DataHandler>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.ws.handler.MessageContext.OUTBOUND_MESSAGE_ATTACHMENTS
<!-- END KEY -->
<!-- BEGIN DATA -->
标准属性: 用于出站消息的消息附件的映射，键为 MIME Content-ID，值为 DataHandler。
<p>类型：java.util.Map<String,DataHandler>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.ws.handler.MessageContext.WSDL_DESCRIPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
标准属性：WSDL 文档的输入源。
<p>类型：org.xml.sax.InputSource

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.ws.handler.MessageContext.WSDL_SERVICE
<!-- END KEY -->
<!-- BEGIN DATA -->
标准属性：WSDL 服务的名称。
<p>类型：javax.xml.namespace.QName

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.ws.handler.MessageContext.WSDL_PORT
<!-- END KEY -->
<!-- BEGIN DATA -->
标准属性：WSDL 端口的名称。
<p>类型：javax.xml.namespace.QName

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.ws.handler.MessageContext.WSDL_INTERFACE
<!-- END KEY -->
<!-- BEGIN DATA -->
标准属性：wsdl 接口 (2.0) 或端口类型 (1.1) 的名称。 
<p>类型：javax.xml.namespace.QName

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.ws.handler.MessageContext.WSDL_OPERATION
<!-- END KEY -->
<!-- BEGIN DATA -->
标准属性：WSDL 操作的名称。
<p>类型：javax.xml.namespace.QName

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.ws.handler.MessageContext.HTTP_RESPONSE_CODE
<!-- END KEY -->
<!-- BEGIN DATA -->
标准属性：HTTP 响应状态代码。
<p>类型：java.lang.Integer

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.ws.handler.MessageContext.HTTP_REQUEST_HEADERS
<!-- END KEY -->
<!-- BEGIN DATA -->
标准属性：HTTP 请求头。
<p>类型：java.util.Map<java.lang.String, java.util.List<java.lang.String>&gt;

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.ws.handler.MessageContext.HTTP_RESPONSE_HEADERS
<!-- END KEY -->
<!-- BEGIN DATA -->
标准属性：HTTP 响应头。
<p>类型：java.util.Map<java.lang.String, java.util.List<java.lang.String>&gt;

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.ws.handler.MessageContext.HTTP_REQUEST_METHOD
<!-- END KEY -->
<!-- BEGIN DATA -->
标准属性：HTTP 请求方法。
<p>类型：java.lang.String

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.ws.handler.MessageContext.SERVLET_REQUEST
<!-- END KEY -->
<!-- BEGIN DATA -->
标准属性：servlet 请求对象。
<p>类型：javax.servlet.http.HttpServletRequest

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.ws.handler.MessageContext.SERVLET_RESPONSE
<!-- END KEY -->
<!-- BEGIN DATA -->
标准属性：servlet 响应对象。
<p>类型：javax.servlet.http.HttpServletResponse

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.ws.handler.MessageContext.SERVLET_CONTEXT
<!-- END KEY -->
<!-- BEGIN DATA -->
标准属性：servlet 上下文对象
<p>类型：javax.servlet.ServletContext

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.ws.handler.MessageContext.QUERY_STRING
<!-- END KEY -->
<!-- BEGIN DATA -->
标准属性：请求的查询字符串。
<p>类型：String

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.ws.handler.MessageContext.PATH_INFO
<!-- END KEY -->
<!-- BEGIN DATA -->
标准属性：请求路径信息
<p>类型：String

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.ws.handler.MessageContext.setScope(String name, MessageContext.Scope scope)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置属性的作用域。

@param name 与 <code>MessageContext</code> 关联的属性的名称
@param scope 所需的属性作用域
@throws java.lang.IllegalArgumentException 如果指定的属性名称不合法
             

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.ws.handler.MessageContext.Scope javax.xml.ws.handler.MessageContext.getScope(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
获得属性的作用域。

@param name 属性的名称
@return 属性的作用域
@throws java.lang.IllegalArgumentException 如果指定的属性名称不存在
             

<!-- END DATA -->


