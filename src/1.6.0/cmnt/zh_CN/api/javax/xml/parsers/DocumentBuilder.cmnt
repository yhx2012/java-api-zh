<!-- BEGIN KEY -->
public abstract class javax.xml.parsers.DocumentBuilder extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
定义 API， 使其从 XML 文档获取 DOM 文档实例。使用此类，应用程序员可以从 XML 获取一个 {@link Document}。<p>

此类的实例可以从 {@link DocumentBuilderFactory#newDocumentBuilder()} 方法获取。获取此类的实例之后，将可以从各种输入源解析 XML。
这些输入源有 InputStreams、Files、URL 和 SAX InputSources。<p>

注意，此类重用了 SAX API 中的一些类。这并不要求底层 DOM 实现的实现者使用 SAX 解析器将 XML 文档解析为 <code>Document</code>。它仅要求该实现使用这些现有的 API 与应用程序交流。

@author <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
@version $Revision: 1.3 $, $Date: 2006-09-14 09:53:13 $

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.xml.parsers.DocumentBuilder()
<!-- END KEY -->
<!-- BEGIN DATA -->
受保护的构造方法
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.DocumentBuilder.reset()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>将此 <code>DocumentBuilder</code> 重置为其原始配置。</p>
 
<p><code>DocumentBuilder</code> 被重置为使用 {@link DocumentBuilderFactory#newDocumentBuilder()} 创建它时的状态。设计 <code>reset()</code> 旨在允许重用现有的 <code>DocumentBuilder</code>，从而节省与创建新的 <code>DocumentBuilder</code> 相关的资源。</p>
 
<p>重置的 <code>DocumentBuilder</code> 不能保证具有相同的 {@link EntityResolver} 或 {@link ErrorHandler} <code>Object</code>，如 {@link Object#equals(Object obj)}。可以保证具有功能相等的 <code>EntityResolver</code> 和 <code>ErrorHandler</code>。</p>
 
@throws UnsupportedOperationException 当实现没有重写此方法时。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Document javax.xml.parsers.DocumentBuilder.parse(InputStream is) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定 <code>InputStream</code> 的内容解析为一个 XML 文档，并且返回一个新的 DOM {@link Document} 对象。如果 <code>InputStream</code> 为 null，则抛出 <code>IllegalArgumentException</code>。

@param is 包含要解析内容的 InputStream。
@return 解析 <code>InputStream</code> 的 <code>Document</code> 结果。
@throws IOException 如果发生任何 IO 错误。
@throws SAXException 如果发生任何解析错误。
@throws  IllegalArgumentException 当 <code>is</code> 为 <code>null</code> 时
@see org.xml.sax.DocumentHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Document javax.xml.parsers.DocumentBuilder.parse(InputStream is, String systemId) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定 <code>InputStream</code> 的内容解析为一个 XML 文档，并且返回一个新的 DOM {@link Document} 对象。如果 <code>InputStream</code> 为 null，则抛出 <code>IllegalArgumentException</code>。

@param is 包含要解析内容的 InputStream。
@param systemId 提供一个与解析相关的 URI 的基础。
@return 一个新的 DOM Document 对象。
@throws IOException 如果发生任何 IO 错误。
@throws SAXException 如果发生任何解析错误。
@throws  IllegalArgumentException 当 <code>is</code> 为 <code>null</code> 时
@see org.xml.sax.DocumentHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Document javax.xml.parsers.DocumentBuilder.parse(String uri) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定 URI 的内容解析为一个 XML 文档，并且返回一个新的 DOM {@link Document} 对象。如果 URI 为 <code>null</code>，则抛出 <code>IllegalArgumentException</code>。

@param uri 要解析的内容的位置。
@return 一个新的 DOM Document 对象。
@throws IOException 如果发生任何 IO 错误。
@throws SAXException 如果发生任何解析错误。
@throws  IllegalArgumentException 当 <code>uri</code> 为 <code>null</code> 时
@see org.xml.sax.DocumentHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Document javax.xml.parsers.DocumentBuilder.parse(File f) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定文件的内容解析为一个 XML 文档，并且返回一个新的 DOM {@link Document} 对象。如果 <code>File</code> 为 <code>null</code>，则抛出 <code>IllegalArgumentException</code>。

@param f 包含要解析的 XML 的文件。
@throws IOException 如果发生任何 IO 错误。
@throws SAXException 如果发生任何解析错误。
@throws  IllegalArgumentException 当 <code>f</code> 为 <code>null</code> 时
@see org.xml.sax.DocumentHandler
@return 一个新的 DOM Document 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.w3c.dom.Document javax.xml.parsers.DocumentBuilder.parse(InputSource is) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定输入源的内容解析为一个 XML 文档，并且返回一个新的 DOM {@link Document} 对象。如果 <code>InputSource</code> 为 <code>null</code>，则抛出 <code>IllegalArgumentException</code>。

@param is 包含要解析内容的 InputSource。
@return 一个新的 DOM Document 对象。
@throws IOException 如果发生任何 IO 错误。
@throws SAXException 如果发生任何解析错误。
@throws  IllegalArgumentException 当 <code>is</code> 为 <code>null</code> 时

@see org.xml.sax.DocumentHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.xml.parsers.DocumentBuilder.isNamespaceAware()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此解析器是否被配置为可识别名称空间。

@return 如果此解析器被配置为可识别名称空间，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.xml.parsers.DocumentBuilder.isValidating()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此解析器是否被配置为验证 XML 文档。

@return 此解析器被配置为验证 XML 文档，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.parsers.DocumentBuilder.setEntityResolver(EntityResolver er)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定使用 {@link EntityResolver} 解析要解析的 XML 文档中存在的实体。将其设置为 <code>null</code> 将会导致底层实现使用其自身的默认实现和行为。

@param er <code>EntityResolver</code>，用于解析要解析的 XML 文档中存在的实体。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.parsers.DocumentBuilder.setErrorHandler(ErrorHandler eh)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定解析器要使用的 {@link ErrorHandler}。将其设置为 <code>null</code> 将会导致底层实现使用其自身的默认实现和行为。

@param eh 解析器将要使用的 <code>ErrorHandler</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.w3c.dom.Document javax.xml.parsers.DocumentBuilder.newDocument()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 DOM {@link Document} 对象的一个新实例来生成一个 DOM 树。

@return DOM Document 对象的一个新实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.w3c.dom.DOMImplementation javax.xml.parsers.DocumentBuilder.getDOMImplementation()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 {@link DOMImplementation} 对象的一个实例。

@return 新的 <code>DOMImplementation</code> 实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.validation.Schema javax.xml.parsers.DocumentBuilder.getSchema()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取由 XML 处理器使用的 {@link Schema} 的引用。</p>

<p>如果没有使用 schema，则返回 <code>null</code>。</p>

@return 返回正在使用的 {@link Schema}，如果一个也没有使用，则返回 <code>null</code>
 
@throws UnsupportedOperationException 当实现没有重写此方法时
 
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.xml.parsers.DocumentBuilder.isXIncludeAware()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取此解析器的 XInclude 处理模式。</p>
 
@return 当从工厂创建此解析器时，返回 {@link DocumentBuilderFactory#isXIncludeAware()} 的返回值。
 
@throws UnsupportedOperationException 当实现没有重写此方法时
 
@since 1.5
 
@see DocumentBuilderFactory#setXIncludeAware(boolean)

<!-- END DATA -->
