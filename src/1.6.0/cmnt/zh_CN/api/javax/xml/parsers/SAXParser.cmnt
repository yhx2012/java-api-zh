<!-- BEGIN KEY -->
public abstract class javax.xml.parsers.SAXParser extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
定义包装 {@link org.xml.sax.XMLReader} 实现类的 API。在 JAXP 1.0 中，此类包装 {@link org.xml.sax.Parser} 接口，但是此接口由 {@link org.xml.sax.XMLReader} 取代。为了便于过渡，此类继续支持相同的名称和接口，并支持新方法。

此类的实例可以从 {@link javax.xml.parsers.SAXParserFactory#newSAXParser()} 方法获得。获取此类的实例之后，将可以从各种输入源解析 XML。这些输入源为 InputStream、File、URL 和 SAX InputSource。<p>

此静态方法根据系统属性设置创建新的工厂实例，如果未定义属性，则使用平台默认值。<p>

控制创建哪个工厂实现的系统属性名为 <code>&quot;javax.xml.parsers.SAXParserFactory&quot;</code>。此属性指定一个类，该类为此抽象类的具体子类。如果未定义属性，将使用默认的平台。</p>

由于内容由底层解析器解析，因此将调用给定 {@link org.xml.sax.HandlerBase} 或 {@link org.xml.sax.helpers.DefaultHandler} 的方法。<p>

包装底层实现的此类的实现程序可以考虑使用 {@link org.xml.sax.helpers.ParserAdapter} 类，从而使其 SAX1 实现最初在此修订类下工作。

@author <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
@version $Revision: 1.3 $, $Date: 2006-09-14 09:53:13 $

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.xml.parsers.SAXParser()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>将阻止实例化的受保护构造方法。使用 {@link javax.xml.parsers.SAXParserFactory#newSAXParser()}。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.SAXParser.reset()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>将此 <code>SAXParser</code> 重置为其原始配置。</p>
 
<p><code>SAXParser</code> 被重置为使用 {@link SAXParserFactory#newSAXParser()} 创建它时的状态。设计 <code>reset()</code> 旨在允许重用现有的 <code>SAXParser</code>，从而节省与创建新的 <code>SAXParser</code> 相关的资源。</p>
 
<p>重置的 <code>SAXParser</code> 不能保证具有相同的 {@link Schema} <code>Object</code>，如 {@link Object#equals(Object obj)}。可以保证具有功能相等的 <code>Schema</code>。</p>
@throws UnsupportedOperationException 当这些实现没有重写此方法时
 
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.SAXParser.parse(InputStream is, HandlerBase hb) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>使用指定的 {@link org.xml.sax.HandlerBase} 将给定的 {@link java.io.InputStream} 实例的内容解析为 XML。<i>建议使用此方法的 DefaultHandler 版本，因为 HandlerBase 类在 SAX 2.0 中已过时</i>。</p>

@param is 包含要解析内容的 InputStream。
@param hb 要使用的 SAX HandlerBase。
 
@throws IllegalArgumentException  如果给定的 InputStream 为 null。
@throws SAXException 如果解析产生 SAX 错误。
@throws IOException 如果在与 <code>InputStream</code> 的交互过程中发生 IO 错误。
 
@see org.xml.sax.DocumentHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.SAXParser.parse(InputStream is, HandlerBase hb, String systemId) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>使用指定的 {@link org.xml.sax.HandlerBase} 将给定的 {@link java.io.InputStream} 实例的内容解析为 XML。<i>建议使用此方法的 DefaultHandler 版本，因为 HandlerBase 类在 SAX 2.0 中已过时</i>。</p>

@param is 包含要解析内容的 InputStream。
@param hb 要使用的 SAX HandlerBase。
@param systemId 解析相关 URI 所需的 systemId。
 
@exception IllegalArgumentException 如果给定的 <code>InputStream</code> 为 <code>null</code>。
@throws IOException 如果在与 <code>InputStream</code> 的交互过程中发生任何 IO 错误。
@throws SAXException 如果在处理过程中发生任何 SAX 错误。
 
@see org.xml.sax.DocumentHandler 中的此方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.SAXParser.parse(InputStream is, DefaultHandler dh) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的 {@link org.xml.sax.helpers.DefaultHandler} 将给定的 {@link java.io.InputStream} 实例的内容解析为 XML。

@param is 包含要解析内容的 InputStream。
@param dh 要使用的 SAX DefaultHandler。
 
@throws IllegalArgumentException  如果给定的 InputStream 为 null。
@throws IOException 如果发生任何 IO 错误。
@throws SAXException 如果在处理过程中发生任何 SAX 错误。
 
@see org.xml.sax.DocumentHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.SAXParser.parse(InputStream is, DefaultHandler dh, String systemId) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的 {@link org.xml.sax.helpers.DefaultHandler} 将给定的 {@link java.io.InputStream} 实例的内容解析为 XML。

@param is 包含要解析内容的 InputStream。
@param dh 要使用的 SAX DefaultHandler。
@param systemId 解析相关 URL 所需的 systemId。
 
@throws IllegalArgumentException  如果给定的 InputStream 为 null。
@throws IOException 如果发生任何 IO 错误。
@throws SAXException 如果在处理过程中发生任何 SAX 错误。
 
@see 此方法的 org.xml.sax.DocumentHandler 版本。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.SAXParser.parse(String uri, HandlerBase hb) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的 {@link org.xml.sax.HandlerBase} 将给定统一资源标识符 (URI) 描述的内容解析为 XML。<i>建议使用此方法的 DefaultHandler 版本，因为 <code>HandlerBase</code> 类在 SAX 2.0 中已过时</i>

@param uri 要解析的内容的位置。
@param hb 要使用的 SAX HandlerBase。
 
@throws IllegalArgumentException 如果 uri 为 null。
@throws IOException 如果发生任何 IO 错误。
@throws SAXException 如果在处理过程中发生任何 SAX 错误。
 
@see org.xml.sax.DocumentHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.SAXParser.parse(String uri, DefaultHandler dh) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的 {@link org.xml.sax.helpers.DefaultHandler} 将给定统一资源标识符 (URI) 描述的内容解析为 XML。

@param uri 要解析的内容的位置。
@param dh 要使用的 SAX DefaultHandler。
 
@throws IllegalArgumentException 如果 uri 为 null。
@throws IOException 如果发生任何 IO 错误。
@throws SAXException 如果在处理过程中发生任何 SAX 错误。
 
@see org.xml.sax.DocumentHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.SAXParser.parse(File f, HandlerBase hb) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的 {@link org.xml.sax.HandlerBase} 将指定文件的内容解析为 XML。<i> 建议使用此方法的 DefaultHandler 版本，因为 HandlerBase 类在 SAX 2.0 中已过时。</i>

@param f 包含要解析的 XML 的文件
@param hb 要使用的 SAX HandlerBase。
 
@throws IllegalArgumentException  如果 File 对象为 null。
@throws IOException 如果发生任何 IO 错误。
@throws SAXException 如果在处理过程中发生任何 SAX 错误。
 
@see org.xml.sax.DocumentHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.SAXParser.parse(File f, DefaultHandler dh) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的 {@link org.xml.sax.helpers.DefaultHandler} 将指定文件的内容解析为 XML。

@param f 包含要解析的 XML 的文件
@param dh 要使用的 SAX DefaultHandler。
 
@throws IllegalArgumentException  如果 File 对象为 null。
@throws IOException 如果发生任何 IO 错误。
@throws SAXException 如果在处理过程中发生任何 SAX 错误。
 
@see org.xml.sax.DocumentHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.SAXParser.parse(InputSource is, HandlerBase hb) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的 {@link org.xml.sax.HandlerBase} 将给定 {@link org.xml.sax.InputSource} 的内容解析为 XML。<i>建议使用此方法的 DefaultHandler 版本，因为 HandlerBase 类在 SAX 2.0 中已过时。</i>

@param is 包含要解析内容的 InputSource。
@param hb 要使用的 SAX HandlerBase。
 
@throws IllegalArgumentException 如果 <code>InputSource</code> 对象为 <code>null</code>。
@throws IOException 如果发生任何 IO 错误。
@throws SAXException 如果在处理过程中发生任何 SAX 错误。
 
@see org.xml.sax.DocumentHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.SAXParser.parse(InputSource is, DefaultHandler dh) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的 {@link org.xml.sax.helpers.DefaultHandler} 将给定 {@link org.xml.sax.InputSource} 的内容解析为 XML。

@param is 包含要解析内容的 InputSource。
@param dh 要使用的 SAX DefaultHandler。
 
@throws IllegalArgumentException 如果 <code>InputSource</code> 对象为 <code>null</code>。
@throws IOException 如果发生任何 IO 错误。
@throws SAXException 如果在处理过程中发生任何 SAX 错误。
 
@see org.xml.sax.DocumentHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.xml.sax.Parser javax.xml.parsers.SAXParser.getParser() throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由此类的实现封装的 SAX 解析器。

@return 由此类的实现封装的 SAX 解析器。
 
@throws SAXException 如果在处理过程中发生任何 SAX 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.xml.sax.XMLReader javax.xml.parsers.SAXParser.getXMLReader() throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由此类的实现封装的 {@link org.xml.sax.XMLReader}。

@return 由此类的实现封装的 XMLReader。
 
@throws SAXException 如果在处理过程中发生任何 SAX 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.xml.parsers.SAXParser.isNamespaceAware()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此解析器是否被配置为可识别名称空间。

@return 如果此解析器被配置为可识别名称空间，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.xml.parsers.SAXParser.isValidating()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此解析器是否被配置为验证 XML 文档。

@return 此解析器被配置为验证 XML 文档，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.parsers.SAXParser.setProperty(String name, Object value) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>设置 {@link org.xml.sax.XMLReader} 的底层实现中的特定属性。核心功能和属性列表可以在 <a href="http://sax.sourceforge.net/?selected=get-set">http://sax.sourceforge.net/?selected=get-set</a> 中找到。</p>

@param name 要设置的属性的名称。
@param value 要设置的属性的值。
 
@throws SAXNotRecognizedException 当底层 XMLReader 不能识别属性名称时。
@throws SAXNotSupportedException 当底层 XMLReader 可以识别属性名称，但不支持该属性时。

@see org.xml.sax.XMLReader#setProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.Object javax.xml.parsers.SAXParser.getProperty(String name) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回 {@link org.xml.sax.XMLReader} 的底层实现中请求的特定属性。</p>

@param name 要检索的属性的名称。
@return 所请求属性的值。

@throws SAXNotRecognizedException 当底层 XMLReader 不能识别属性名称时。
@throws SAXNotSupportedException 当底层 XMLReader 可以识别属性名称，但不支持该属性时。

@see org.xml.sax.XMLReader#getProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.validation.Schema javax.xml.parsers.SAXParser.getSchema()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取对 XML 处理器使用的 {@link Schema} 的引用。</p>

<p>如果没有使用 schema，则返回 <code>null</code>。</p>

@return 返回正在使用的 {@link Schema}，如果一个也没有使用，则返回 <code>null</code>
 
@throws UnsupportedOperationException 当该实现没有重写此方法时 
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.xml.parsers.SAXParser.isXIncludeAware()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取此解析器的 XInclude 处理模式。</p>
 
@return 当从工厂创建此解析器时，返回 {@link SAXParserFactory#isXIncludeAware()} 的返回值。
 
@throws UnsupportedOperationException 当该实现没有重写此方法时
 
@since 1.5
 
@see SAXParserFactory#setXIncludeAware(boolean)

<!-- END DATA -->
