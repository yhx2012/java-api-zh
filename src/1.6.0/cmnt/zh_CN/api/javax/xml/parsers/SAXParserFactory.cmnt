<!-- BEGIN KEY -->
public abstract class javax.xml.parsers.SAXParserFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
定义工厂 API，使应用程序能够配置和获取基于 SAX 的解析器以解析 XML 文档。

 @author <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
 @author <a href="mailto:Neeraj.Bajaj@sun.com">Neeraj Bajaj</a>

 @version $Revision: 1.4 $, $Date: 2006-09-18 09:03:31 $

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.xml.parsers.SAXParserFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>受保护构造方法，以强制使用 {@link #newInstance()}。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.parsers.SAXParserFactory javax.xml.parsers.SAXParserFactory.newInstance()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>SAXParserFactory</code> 的一个新实例。此静态方法创建一个新的工厂实例，此方法按照以下查找过程顺序来确定要加载的 <code>SAXParserFactory</code> 实例类：
 <ul>
 <li>
使用 <code>javax.xml.parsers.SAXParserFactory</code> 系统属性。
 </li>
 <li>
使用 JRE 文件夹中的属性文件 &quot;lib/jaxp.properties&quot;。此配置文件格式为标准的 <code>java.util.Properties</code> 且包含实现类的完全限定名，其中实现类的键是上述定义的系统属性。
 
JAXP 实现只读取一次 jaxp.properties 文件，然后缓存其值供以后使用。如果首次尝试读取文件时，文件不存在，则不会再次尝试检查该文件是否存在。首次读取 jaxp.properties 后，其中的属性值不能再更改。
 </li>
 <li>
如果可以，使用 Services API（在 JAR 规范中进行了详细描述）来确定类名称。Services API 将查找在运行时可用的 jar 中 <code>META-INF/services/javax.xml.parsers.SAXParserFactory</code> 文件中的类名。
 </li>
 <li>
平台默认的 <code>SAXParserFactory</code> 实例。
 </li>
 </ul>

在应用程序获取对 <code>SAXParserFactory</code> 的引用后，它可以使用工厂来配置和获取解析器实例。
   
<h2>疑难解答提示</h2>
<p>设置 <code>jaxp.debug</code> 系统属性将导致此方法将许多调试消息打印到 <code>System.err</code>，以说明其执行的操作以及在何处查找。</p>
 
<p>如果加载 {@link DocumentBuilder} 有问题，请尝试：</p>
 <pre>
 java -Djaxp.debug=1 YourProgram ....
 </pre>
  
@return 新的 SAXParserFactory 实例。

@throws FactoryConfigurationError 如果该实现不可用，或者无法被实例化。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.parsers.SAXParserFactory javax.xml.parsers.SAXParserFactory.newInstance(String factoryClassName, ClassLoader classLoader)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>从类名称中获取新的 <code>SAXParserFactory</code> 实例。此函数在类路径中有多个提供者时很有用。它可以对应用程序提供更多的控制，因为它可以指定应该加载哪个提供者。</p>     

 <p>在应用程序获取对 <code>SAXParserFactory</code> 的引用后，它可以使用工厂来配置和获取解析器实例。</p>
 
 
 <h2>疑难解答提示</h2>
 <p>设置 <code>jaxp.debug</code> 系统属性将导致此方法将许多调试消息打印到 <code>System.err</code>，这些消息说明了正在执行的操作以及何处可以找到它。</p>
 
 <p>如有问题，可尝试使用以下代码：</p>
 <pre>
 java -Djaxp.debug=1 YourProgram ....
 </pre>
 
 @param factoryClassName 提供 <code>javax.xml.parsers.SAXParserFactory</code> 的实现的完全限定工厂类名称。

 @param classLoader 用来加载工厂类的 <code>ClassLoader</code>。如果该参数为 <code>null</code>，则使用当前 <code>Thread</code> 的上下文类加载器来加载工厂类。

 @return 新的 <code>SAXParserFactory</code> 实例

 @throws FactoryConfigurationError 如果 <code>factoryClassName</code> 为 <code>null</code>，或者无法加载和实例化工厂类。

 @see #newInstance()

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.parsers.SAXParser javax.xml.parsers.SAXParserFactory.newSAXParser() throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>使用当前配置的工厂参数创建 SAXParser 的一个新实例。</p>

@return 新的 SAXParser 实例。

@throws ParserConfigurationException 如果无法创建满足所请求配置的解析器，将抛出该异常。
@throws SAXException 用于 SAX 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.SAXParserFactory.setNamespaceAware(boolean awareness)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定由此代码生成的解析器将提供对 XML 名称空间的支持。默认情况下，其值设置为 <code>false</code>。

@param awareness 如果由此代码生成的解析器将提供对 XML 名称空间的支持，则为 true；否则为 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.SAXParserFactory.setValidating(boolean validating)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定由此代码生成的解析器将验证被解析的文档。默认情况下，其值设置为 <code>false</code>。
 
 <p>
注意，此处“验证”是指 XML 规范中定义的<a href="http://www.w3.org/TR/REC-xml#proc-types">验证解析器</a>。换句话说，它实际上仅控制 DTD 验证。（JAXP 1.2 中定义的两个遗留属性除外。）
 </p>
 
 <p>
要使用现代模式语言（如 W3C XML Schema 或 RELAX NG）而不使用 DTD，您可以将解析器配置为非验证解析器，方法是将 {@link #setValidating(boolean)} 方法保留为 <code>false</code>，然后使用 {@link #setSchema(Schema)} 方法将一个模式与解析器关联。
 </p>

@param validating 如果由此代码生成的解析器在解析文档时验证文档，则为 true；否则为 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.xml.parsers.SAXParserFactory.isNamespaceAware()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示是否将工厂配置为生成具有感知名称空间功能的解析器。

@return 如果将工厂配置为生成具有感知名称空间功能的解析器，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.xml.parsers.SAXParserFactory.isValidating()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示是否将工厂配置为生成解析器，该解析器在解析时验证 XML 内容。

@return 如果将工厂配置为生成在解析时验证 XML 内容的解析器，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.parsers.SAXParserFactory.setFeature(String name, boolean value) throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->

<p>在 org.xml.sax.XMLReader 的底层实现中设置特定的功能。核心功能和属性列表可以在 <a href="http://www.saxproject.org/">http://www.saxproject.org/</a> 中找到。</p>

<p>所有实现必须支持 {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} 功能。当功能为以下情况时：</p>
 <ul>
   <li>
<code>true</code>：该实现将限制 XML 处理遵守实现限制。示例包括实体扩展限制和将使用大量资源的 XML 模式构造。如果出于安全原因限制 XML 处理，将通过调用注册的 {@link org.xml.sax.ErrorHandler#fatalError(SAXParseException exception)} 进行报告。请参见处理程序规范的 {@link SAXParser} <code>parse</code> 方法。
   </li>
   <li>
当该功能为 <code>false</code> 时，该实现将根据 XML 规范处理 XML，而无需考虑可能的实现限制。
   </li>
 </ul>
 
@param name 要设置的功能的名称。
@param value 要设置的功能值。
 
@throws ParserConfigurationException 如果无法创建满足所请求配置的解析器。
@throws SAXNotRecognizedException 当底层 XMLReader 不能识别属性名称时。
@throws SAXNotSupportedException 当底层 XMLReader 可以识别属性名称，但不支持该属性时。
@throws NullPointerException 如果 <code>name</code> 参数为 null。

@see org.xml.sax.XMLReader#setFeature

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.xml.parsers.SAXParserFactory.getFeature(String name) throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->

<p>返回 org.xml.sax.XMLReader 的底层实现中请求的特定属性。</p>

@param name 要检索的属性的名称。
 
@return 所请求属性的值。

@throws ParserConfigurationException 如果无法创建满足所请求配置的解析器，将抛出该异常。
@throws SAXNotRecognizedException 当底层 XMLReader 不能识别属性名称时。
@throws SAXNotSupportedException 当底层 XMLReader 可以识别属性名称，但不支持该属性时。


@see org.xml.sax.XMLReader#getProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.validation.Schema javax.xml.parsers.SAXParserFactory.getSchema()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取通过 {@link #setSchema(Schema schema)} 方法指定的 {@link Schema} 对象。
 
 
@throws UnsupportedOperationException 当该实现没有重写此方法时
 
@return 最后通过 {@link #setSchema(Schema)} 方法设置的 {@link Schema} 对象，如果该方法由于创建了 {@link SAXParserFactory} 而没有被调用，则返回 null。
 
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.SAXParserFactory.setSchema(Schema schema)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>设置将由解析器使用的 {@link Schema}，该解析器从此工厂创建。</p>
 
<p>如果 {@link Schema} 为非 null，则在将信息向下传递到应用程序之前，解析器将使用从中创建的验证器来验证文档。</p>
 
<p>在验证器发现警告/错误/致命错误时，解析器必须处理它们，就好像这些错误是由解析器自己发现的一样。换句话说，如果设置了用户指定的 {@link org.xml.sax.ErrorHandler}，则它必须接收这些错误，否则，必须根据特定于实现的默认错误处理规则来处理它们。
 
<p>验证器可以修改 SAX 事件流（例如，通过添加在文档中缺少的默认值），解析器负责确保应用程序将接收这些修改的事件流。</p>  
 
<p>最初，<code>null</code> 被设置为 {@link Schema}。</p> 
 
<p>即使 {@link #isValidating()} 方法返回 <code>false</code>，此过程也将生效。
 
<p>将 <code>http://java.sun.com/xml/jaxp/properties/schemaSource</code> 属性和/或 <code>http://java.sun.com/xml/jaxp/properties/schemaLanguage</code> 属性与非 null {@link Schema} 对象一起使用将发生错误。当在 {@link SAXParser} 上设置这些属性时，此类配置将导致 {@link SAXException} 异常。</p>
 
<h4>实现者请注意：</h4>
 <p>
解析器必须能够与任何 {@link Schema} 实现一起使用。但是，只要能够产生规范中描述的结果，就允许解析器和模式使用特定于实现的自定义机制。
 </p>
 
@param schema 要使用的 <code>Schema</code>，如果移除一个模式，则为 <code>null</code>。
 
@throws UnsupportedOperationException 当该实现没有重写此方法时 
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.SAXParserFactory.setXIncludeAware(boolean state)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>设置 XInclude 处理的状态。</p>
 
<p>如果在文档实例中发现 XInclude 标记，则应按 <a href="http://www.w3.org/TR/xinclude/">XML Inclusions (XInclude) Version 1.0</a> 中指定的方式处理。</p>
 
<p>XInclude 处理默认为 <code>false</code>。</p>
 
@param state 将 XInclude 处理设置为 <code>true</code> 或 <code>false</code>
 
@throws UnsupportedOperationException 当该实现没有重写此方法时
 
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.xml.parsers.SAXParserFactory.isXIncludeAware()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取 XInclude 处理的状态。</p>
 
@return XInclude 处理的当前状态
 
@throws UnsupportedOperationException 当实现没有重写此方法时 
@since 1.5

<!-- END DATA -->
