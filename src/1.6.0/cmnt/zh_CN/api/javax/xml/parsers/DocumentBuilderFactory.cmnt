<!-- BEGIN KEY -->
public abstract class javax.xml.parsers.DocumentBuilderFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
定义工厂 API，使应用程序能够从 XML 文档获取生成 DOM 对象树的解析器。

 @author <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
 @author <a href="mailto:Neeraj.Bajaj@sun.com">Neeraj Bajaj</a>

 @version $Revision: 1.4 $, $Date: 2006-09-18 09:03:31 $


<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.xml.parsers.DocumentBuilderFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>用于阻止实例化的受保护构造方法。请使用 {@link #newInstance()}。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.parsers.DocumentBuilderFactory javax.xml.parsers.DocumentBuilderFactory.newInstance()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>DocumentBuilderFactory</code> 的新实例。此 static 方法创建一个新的工厂实例。此方法使用以下查找过程顺序来确定要加载的 <code>DocumentBuilderFactory</code> 实现类：
 <ul>
 <li>
使用 <code>javax.xml.parsers.DocumentBuilderFactory</code> 系统属性。
 </li>
 <li>
使用 JRE 文件夹中的属性文件 &quot;lib/jaxp.properties&quot;。此配置文件格式为标准的 <code>java.util.Properties</code> 且包含实现类的完全限定名，其中实现类的键是上述定义的系统属性。
 
JAXP 实现只读取一次 jaxp.properties 文件，然后缓存其值供以后使用。如果首次尝试读取文件时，文件不存在，则不会再次尝试检查该文件是否存在。首次读取 jaxp.properties 后，其中的属性值不能再更改。
 </li>
 <li>
如果可以，使用 Services API（在 JAR 规范中进行了详细描述）来确定类名称。Services API 将查找在运行时可用的 jar 中 <code>META-INF/services/javax.xml.parsers.DocumentBuilderFactory</code> 文件中的类名。
 </li>
 <li>
平台默认的 <code>DocumentBuilderFactory</code> 实例。
 </li>
 </ul>

在应用程序获取对 <code>DocumentBuilderFactory</code> 的引用后，它可以使用工厂来配置和获取解析器实例。
  
<h2>疑难解答提示</h2>
<p>设置 <code>jaxp.debug</code> 系统属性将导致此方法将许多调试消息打印到 <code>System.err</code>，以说明其执行的操作以及在何处查找。</p>
 
<p> 如果加载 {@link DocumentBuilder} 有问题，请尝试：</p>
 <pre>
 java -Djaxp.debug=1 YourProgram ....
 </pre>
 
@return 新的 <code>DocumentBuilderFactory</code> 实例

@throws FactoryConfigurationError 如果该实现不可用，或者无法实例化。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.parsers.DocumentBuilderFactory javax.xml.parsers.DocumentBuilderFactory.newInstance(String factoryClassName, ClassLoader classLoader)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>从类名称中获取新的 <code>DocumentBuilderFactory</code> 实例。此函数在类路径中有多个提供者时很有用。它可以对应用程序提供更多的控制，因为它可以指定应该加载哪个提供者。</p>

 <p>在应用程序获取对 <code>DocumentBuilderFactory</code> 的引用后，它可以使用工厂来配置和获取解析器实例。</p>
 
 
 <h2>疑难解答提示</h2>
 <p>设置 <code>jaxp.debug</code> 系统属性将导致此方法将许多调试消息打印到 <code>System.err</code>，这些消息说明了正在执行的操作以及何处可以找到它。</p>
 
 <p>如有问题，可尝试使用以下代码：</p>
 <pre>
 java -Djaxp.debug=1 YourProgram ....
 </pre>
 
 @param factoryClassName 提供 <code>javax.xml.parsers.DocumentBuilderFactory</code> 的实现的完全限定工厂类名称。

 @param classLoader 用来加载工厂类的 <code>ClassLoader</code>。如果该参数为 <code>null</code>，则使用当前 <code>Thread</code> 的上下文类加载器来加载工厂类。

 @return 新的 <code>DocumentBuilderFactory</code> 实例

 @throws FactoryConfigurationError 如果 <code>factoryClassName</code> 为 <code>null</code>，或者无法加载和实例化工厂类。

 @see #newInstance()

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.parsers.DocumentBuilder javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder() throws javax.xml.parsers.ParserConfigurationException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用当前配置的参数创建一个新的 {@link javax.xml.parsers.DocumentBuilder} 实例。

@throws ParserConfigurationException 如果无法创建满足所请求配置的 DocumentBuilder，将抛出该异常。
@return 新的 DocumentBuilder 实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean awareness)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定由此代码生成的解析器将提供对 XML 名称空间的支持。默认情况下，其值设置为 <code>false</code>。

@param awareness 如果生成的解析器将提供对 XML 名称空间的支持，则为 true；否则为 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.DocumentBuilderFactory.setValidating(boolean validating)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定由此代码生成的解析器将验证被解析的文档。默认情况下，其值设置为 <code>false</code>。
 
 <p>
注意，此处“验证”是指 XML 规范中定义的<a href="http://www.w3.org/TR/REC-xml#proc-types">验证解析器</a>。换句话说，它实际上仅控制 DTD 验证。（JAXP 1.2 中定义的两个遗留属性除外。）
 </p>
 
 <p>
要使用现代模式语言（如 W3C XML Schema 或 RELAX NG）而不使用 DTD，您可以将解析器配置为非验证解析器，方法是将 {@link #setValidating(boolean)} 方法保留为 <code>false</code>，然后使用 {@link #setSchema(Schema)} 方法将一个模式与解析器关联。
 </p>
 
@param validating 如果由此代码生成的解析器在解析文档时验证文档，则为 true；否则为 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.DocumentBuilderFactory.setIgnoringElementContentWhitespace(boolean whitespace)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定由此工厂创建的解析器在解析 XML 文档时，必须删除元素内容中的空格（有时也可以称作“可忽略空格”，请参阅 XML Rec 2.10）。注意，只有在空格直接包含在元素内容中，并且该元素内容是只有一个元素的内容模式时，才能删除空格（请参阅 XML Rec 3.2.1）。由于依赖于内容模式，因此此设置要求解析器处于验证模式。默认情况下，其值设置为 <code>false</code>。

@param whitespace 如果创建的解析器在解析 XML 文档时必须删除元素内容中的空格，则为 true；否则为 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.DocumentBuilderFactory.setExpandEntityReferences(boolean expandEntityRef)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定由此代码生成的解析器将扩展实体引用节点。默认情况下，此值设置为 <code>true</code>。

@param expandEntityRef 如果生成的解析器将扩展实体引用节点，则为 true；否则为 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.DocumentBuilderFactory.setIgnoringComments(boolean ignoreComments)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>指定由此代码生成的解析器将忽略注释。默认情况下，其值设置为 <code>false</code>。</p>
 
@param ignoreComments 在处理过程中忽略注释的 <code>boolean</code> 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.DocumentBuilderFactory.setCoalescing(boolean coalescing)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定由此代码生成的解析器将把 CDATA 节点转换为 Text 节点，并将其附加到相邻（如果有）的 Text 节点。默认情况下，其值设置为 <code>false</code>。

@param coalescing  生成的解析器将把 CDATA 节点转换为 Text 节点，并将其附加到相邻（如果有）的文本节点，则为 true；否则为 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.xml.parsers.DocumentBuilderFactory.isNamespaceAware()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示是否将工厂配置为生成具有感知名称空间功能的解析器。

@return 如果将工厂配置为生成具有感知名称空间功能的解析器，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.xml.parsers.DocumentBuilderFactory.isValidating()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示是否将工厂配置为生成解析器，该解析器在解析时验证 XML 内容。

@return 如果将工厂配置为生成在解析时验证 XML 内容的解析器，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.xml.parsers.DocumentBuilderFactory.isIgnoringElementContentWhitespace()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示是否将工厂配置为生成解析器，该解析器忽略元素内容中的可忽略空格。

@return  如果将工厂配置为生成忽略元素内容中可忽略空格的解析器，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.xml.parsers.DocumentBuilderFactory.isExpandEntityReferences()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示是否将工厂配置为生成扩展实体引用节点的解析器。

@return  如果将工厂配置为生成扩展实体引用节点的解析器，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.xml.parsers.DocumentBuilderFactory.isIgnoringComments()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示是否将工厂配置为生成忽略注释的解析器。

@return 如果将工厂配置为生成忽略注释的解析器，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.xml.parsers.DocumentBuilderFactory.isCoalescing()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示是否将工厂配置为生成满足以下条件的解析器：该解析器将 CDATA 节点转换为 Text 节点，并将其附加到相邻（如果有）的 Text 节点。

@return  将工厂配置为满足以下条件的解析器：该解析器将 CDATA 节点转换为 Text 节点，并将其附加到相邻（如果有）的 Text 节点，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.parsers.DocumentBuilderFactory.setAttribute(String name, Object value) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
允许用户在底层实现上设置特定属性。
@param name 属性名称。
@param value 属性值。
@throws IllegalArgumentException 如果底层实现无法识别该属性，则抛出该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.Object javax.xml.parsers.DocumentBuilderFactory.getAttribute(String name) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
允许用户在底层实现上检索特定属性。
@param name 属性名称。
@return value 属性值。
@throws IllegalArgumentException 如果底层实现无法识别该属性，则抛出该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.parsers.DocumentBuilderFactory.setFeature(String name, boolean value) throws javax.xml.parsers.ParserConfigurationException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>设置由此工厂创建的此 <code>DocumentBuilderFactory</code> 和 <code>DocumentBuilder</code> 的功能。</p>
 
 <p>
功能名称是完全限定的 {@link java.net.URI}。实现可以定义它们自己的功能。如果此 <code>DocumentBuilderFactory</code> 或其创建的 <code>DocumentBuilder</code> 不支持该功能，则抛出 {@link ParserConfigurationException}。<code>DocumentBuilderFactory</code> 可以公开一个功能值，但无法更改其状态。
 </p>
 
 <p>
所有实现必须支持 {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} 功能。当功能为以下情况时：</p>
 <ul>
   <li>
<code>true</code>：该实现将限制 XML 处理遵守实现限制。示例包括实体扩展限制和将使用大量资源的 XML 模式构造。如果出于安全原因限制 XML 处理，将通过调用注册的 {@link org.xml.sax.ErrorHandler#fatalError(SAXParseException exception)} 进行报告。请参阅 {@link  DocumentBuilder#setErrorHandler(org.xml.sax.ErrorHandler errorHandler)}。
   </li>
   <li>
<code>false</code>：实现将根据 XML 规范来处理 XML，而无需考虑可能的实现限制。
   </li>
 </ul>
 
@param name 功能名称。
@param value 功能状态为 <code>true</code> 或 <code>false</code>。
  
@throws ParserConfigurationException 如果此 <code>DocumentBuilderFactory</code> 或其创建的 <code>DocumentBuilder</code> 不能支持此功能。
@throws NullPointerException 如果 <code>name</code> 参数为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.xml.parsers.DocumentBuilderFactory.getFeature(String name) throws javax.xml.parsers.ParserConfigurationException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取指定功能的状态。</p>
 
 <p>
功能名称是完全限定的 {@link java.net.URI}。实现可以定义它们自己的功能。如果此 <code>DocumentBuilderFactory</code> 或其创建的 <code>DocumentBuilder</code> 不支持该功能，则抛出 {@link ParserConfigurationException}。<code>DocumentBuilderFactory</code> 可以公开一个功能值，但无法更改其状态。
 </p>
 
@param name 功能名称。
 
@return 指定功能的状态。
 
@throws ParserConfigurationException 如果此 <code>DocumentBuilderFactory</code> 或其创建的 <code>DocumentBuilder</code> 不能支持此功能。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.validation.Schema javax.xml.parsers.DocumentBuilderFactory.getSchema()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取通过 {@link #setSchema(Schema schema)} 方法指定的 {@link Schema} 对象。
  
@return 最后通过 {@link #setSchema(Schema)} 方法设置的 {@link Schema} 对象，如果由于创建了 {@link DocumentBuilderFactory} 而没有调用该方法，则返回 null。

@throws UnsupportedOperationException 当实现没有重写此方法时。
 
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.DocumentBuilderFactory.setSchema(Schema schema)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>设置将由解析器使用的 {@link Schema}，该解析器从此工厂创建。
 
 <p>
如果 {@link Schema} 为非 null，则在将信息向下传递到应用程序之前，解析器将使用从中创建的验证器来验证文档。
 
<p>验证器发现错误后，解析器负责向用户指定的 {@link org.xml.sax.ErrorHandler} 报告这些错误（如果未设置错误处理程序，则忽略或抛出这些错误），就像由解析器本身发现的其他任何错误一样。换句话说，如果设置了用户指定的 {@link org.xml.sax.ErrorHandler}，则它必须接收这些错误，否则，必须根据特定于实现的默认错误处理规则来处理它们。
 
 <p>
验证器可以修改解析器的结果（例如，通过在文档中添加丢失的默认值），解析器负责确保应用程序接收修改的 DOM 树。  
 
 <p>
最初，null 被设置为 {@link Schema}。 
 
 <p>
即使 {@link #isValidating()} 方法返回 <code>false</code>，此过程也将生效。
 
<p>将 <code>http://java.sun.com/xml/jaxp/properties/schemaSource</code> 属性和/或 <code>http://java.sun.com/xml/jaxp/properties/schemaLanguage</code> 属性与 {@link Schema} 对象一起使用将发生错误。这些配置将导致在调用 {@link #newDocumentBuilder()} 时出现 {@link ParserConfigurationException} 异常。</p>
  
<h4>实现者请注意：</h4>
 <p>
解析器必须能够与任何 {@link Schema} 实现一起使用。但是，只要能够生成规范中描述的结果，就允许解析器和模式使用特定于实现的自定义机制。
 
@param schema 要使用的 <code>Schema</code>，或者为 <code>null</code>，表示移除一个模式。
 
@throws UnsupportedOperationException 当实现没有重写此方法时。
 
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.parsers.DocumentBuilderFactory.setXIncludeAware(boolean state)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>设置 XInclude 处理的状态。</p>
 
<p>如果在文档实例中发现 XInclude 标记，则应按 <a href="http://www.w3.org/TR/xinclude/">XML Inclusions (XInclude) Version 1.0</a> 中指定的方式处理。</p>
 
<p>XInclude 处理默认为 <code>false</code>。</p>
 
@param state 将 XInclude 处理设置为 <code>true</code> 或 <code>false</code>
 
@throws UnsupportedOperationException 当实现没有重写此方法时。
 
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.xml.parsers.DocumentBuilderFactory.isXIncludeAware()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取 XInclude 处理的状态。</p>
 
@return XInclude 处理的当前状态
 
@throws UnsupportedOperationException 当实现没有重写此方法时。
 
@since 1.5

<!-- END DATA -->
