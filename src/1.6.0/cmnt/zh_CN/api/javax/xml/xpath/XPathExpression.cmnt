<!-- BEGIN KEY -->
public interface javax.xml.xpath.XPathExpression
<!-- END KEY -->
<!-- BEGIN DATA -->
<p><code>XPathExpression</code> 提供了对编译后的 XPath 表达式的访问。</p>

 <a name="XPathExpression-evaluation"/>
 <table border="1" cellpadding="2">
   <thead>
     <tr>
<th colspan="2">XPath 表达式的计算。</th>
     </tr>
   </thead>
   <tbody>
     <tr>
<td>上下文</td>
       <td>
如果在没有上下文项的情况下请求计算表达式，则将使用一个空文档节点作为上下文。为计算 XPath 表达式，应将 DocumentFragment 视为 Document 节点。
      </td>
    </tr>
    <tr>
<td>变量</td>
      <td>
如果表达式包含变量引用，则其值将通过 {@link XPathVariableResolver} 找到。如果变量解析器未定义或解析器对变量返回 <code>null</code>，则引发 {@link XPathExpressionException}。在任何单个计算过程中，变量的值必须是不可变的。</p>
      </td>
    </tr>
    <tr>
<td>函数</td>
      <td>
如果表达式包含函数引用，则函数将通过 {@link XPathFunctionResolver} 找到。如果函数解析器未定义或解析器为函数返回 <code>null</code>，则引发 {@link XPathExpressionException}。</p>
      </td>
    </tr>
    <tr>
      <td>QNames</td>
      <td>
表达式中的 QNames 根据 XPath 名称空间上下文来解析。
      </td>
    </tr>
    <tr>
<td>结果</td>
      <td>
将计算表达式的结果转换为所需的返回类型的实例。{@link XPathConstants} 中定义了有效的返回类型。转换到返回类型的过程遵守 XPath 转换规则。</p>
      </td>
    </tr>
 </table>

 <p>XPath 表达式不是线程安全的，也不能重入。换句话说，应用程序负责确保在任意给定时刻不能有多个线程使用一个 {@link XPathExpression} 对象，且当调用 <code>evaluate</code> 方法时，应用程序不能以递归方式调用 <code>evaluate</code> 方法。
 <p>


@author  <a href="mailto:Norman.Walsh@Sun.com">Norman Walsh</a>
@author  <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
@version $Revision: 1.4 $, $Date: 2006-09-15 06:59:06 $
@see <a href="http://www.w3.org/TR/xpath#section-Expressions">XML Path Language (XPath) Version 1.0, Expressions</a>
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.xml.xpath.XPathExpression.evaluate(Object item, QName returnType) throws javax.xml.xpath.XPathExpressionException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>计算指定上下文中的 XPath 表达式并返回指定类型的结果。</p>

<p>有关上下文项计算、变量、函数和 QName 解析，以及返回类型转换，请参阅 <a href="#XPathExpression-evaluation">XPath 表达式的计算</a>。</p>
 
<p>如果 <code>returnType</code> 不是 {@link XPathConstants} 中定义的类型之一，则抛出 <code>IllegalArgumentException</code>。</p>
 
<p>如果为 <code>item</code> 提供了 <code>null</code> 值，则将使用一个空文档作为上下文。如果 <code>returnType</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。</p> 

@param item 开始上下文（例如节点）。
@param returnType 所需的返回类型。
 
@return 计算表达式并将计算结果转换为 <code>returnType</code> 所得到的结果 <code>Object</code>。
 
@throws XPathExpressionException 如果不能计算表达式。
@throws IllegalArgumentException 如果 <code>returnType</code> 不是 {@link XPathConstants} 中定义的类型之一。
@throws NullPointerException 如果 <code>returnType</code> 为 <code>null</code>。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.xpath.XPathExpression.evaluate(Object item) throws javax.xml.xpath.XPathExpressionException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>计算指定上下文中编译后的 XPath 表达式并以 <code>String</code> 形式返回结果。</p>

<p>此方法调用 {@link #evaluate(Object item, QName returnType)}，其中 <code>returnType</code> 为 {@link XPathConstants#STRING}。</p>
 
<p>有关上下文项计算、变量、函数和 QName 解析，以及返回类型转换，请参阅 <a href="#XPathExpression-evaluation">XPath 表达式的计算</a>。</p>
 
<p>如果为 <code>item</code> 为 <code>null</code> 值，则将使用一个空文档作为上下文。

@param item 开始上下文（例如节点）。
 
@return 计算表达式并将计算结果转换为 <code>String</code> 所得到的结果 <code>String</code>。
 
@throws XPathExpressionException 如果不能计算表达式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.xml.xpath.XPathExpression.evaluate(InputSource source, QName returnType) throws javax.xml.xpath.XPathExpressionException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>计算指定 <code>InputSource</code> 上下文中编译后的 XPath 表达式并返回指定类型的结果。</p>

<p>此方法构建 {@link InputSource} 的数据模型，然后对所得文档对象调用 {@link #evaluate(Object item, QName returnType)}。</p>
 
<p>有关上下文项计算、变量、函数和 QName 解析，以及返回类型转换，请参阅 <a href="#XPathExpression-evaluation">XPath 表达式的计算</a>。</p>
 
<p>如果 <code>returnType</code> 不是 {@link XPathConstants} 中定义的类型之一，则抛出 <code>IllegalArgumentException</code>。</p>
 
<p>如果 <code>source</code> 或 <code>returnType</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。</p> 

@param source 要对其计算的文档的 <code>InputSource</code>。
@param returnType 所需的返回类型。
 
@return 计算表达式并将计算结果转换为 <code>returnType</code> 所得到的结果 <code>Object</code>。
 
@throws XPathExpressionException 如果不能计算表达式。
@throws IllegalArgumentException 如果 <code>returnType</code> 不是 {@link XPathConstants} 中定义的类型之一。
@throws NullPointerException 如果  <code>source</code> 或 <code>returnType</code> 为 <code>null</code>。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.xpath.XPathExpression.evaluate(InputSource source) throws javax.xml.xpath.XPathExpressionException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>计算指定 <code>InputSource</code> 上下文中编译后的 XPath 表达式并以 <code>String</code> 形式返回结果。</p>

<p>此方法调用 {@link #evaluate(InputSource source, QName returnType)}，其中 <code>returnType</code> 为 {@link XPathConstants#STRING}。</p>
 
<p>有关上下文项计算、变量、函数和 QName 解析，以及返回类型转换，请参阅 <a href="#XPathExpression-evaluation">XPath 表达式的计算</a>。</p>
 
<p>如果 <code>source</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。</p> 

@param source 要对其计算的文档的 <code>InputSource</code>。
 
@return 计算表达式并将计算结果转换为 <code>String</code> 所得到的结果 <code>String</code>。
 
@throws XPathExpressionException 如果不能计算表达式。
@throws NullPointerException 如果  <code>source</code> 为 <code>null</code>。 

<!-- END DATA -->
