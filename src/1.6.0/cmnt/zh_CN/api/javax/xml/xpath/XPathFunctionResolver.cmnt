<!-- BEGIN KEY -->
public interface javax.xml.xpath.XPathFunctionResolver
<!-- END KEY -->
<!-- BEGIN DATA -->
<p><code>XPathFunctionResolver</code> 提供了对用户定义的 <code>XPathFunction</code> 集的访问。</p>

<p>XPath 函数通过名称和 arity 解析。XPath 的内置函数无需解析器，且解析器<strong><em>不能</em> </strong>用于重写这些函数。</p>

<p>尤其是，解析器仅供另一个名称空间中的函数（带有显式前缀的函数）调用。这意味着不能使用 <code>XPathFunctionResolver</code> 来实现像 <a href="http://www.w3.org/TR/xmldsig-core/">XML-Signature Syntax and Processing</a> 这样的规范（此规范在相同名称空间中扩充了 XPath 1.0 的函数库）。这是解析器的设计结果。</p>

<p>如果要实现额外的内置函数，必须直接扩展基础实现。</p>

@author  <a href="mailto:Norman.Walsh@Sun.com">Norman Walsh</a>
@author  <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
@version $Revision: 1.2 $, $Date: 2006-08-30 10:12:27 $
@see <a href="http://www.w3.org/TR/xpath#corelib">XML Path Language (XPath) Version 1.0, Core Function Library</a>
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.xpath.XPathFunction javax.xml.xpath.XPathFunctionResolver.resolveFunction(QName functionName, int arity)
<!-- END KEY -->
<!-- BEGIN DATA -->

<p>在可用的函数集中查找函数。</p>
 
<p>如果 <code>functionName</code> 或 <code>arity</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。</p>

@param functionName 函数名称。
@param arity 返回的函数必须接受的参数数量。
 
@return 函数，如果不存在带有 <code>arity</code> 个参数的命名为 <code>functionName</code> 的函数，则返回 <code>null</code>。
 
@throws NullPointerException 如果 <code>functionName</code> 或 <code>arity</code> 为 <code>null</code>。

<!-- END DATA -->
