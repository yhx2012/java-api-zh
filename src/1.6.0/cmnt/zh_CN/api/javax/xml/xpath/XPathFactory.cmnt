<!-- BEGIN KEY -->
public abstract class javax.xml.xpath.XPathFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<p><code>XPathFactory</code> 实例可用于创建 {@link javax.xml.xpath.XPath} 对象。</p>

<p>有关查找机制，请参阅 {@link #newInstance(String uri)}。</p>

 <p>{@link XPathFactory} 类不是线程安全的。换句话说，应用程序负责确保任意给定时刻最多只有一个线程使用 {@link XPathFactory} 对象。建议实现将方法标记为 <code>synchronized</code> 以保护客户端不至于崩溃。

 <p>{@link XPathFactory} 不可重入。当正在调用某个 <code>newInstance</code> 方法时，应用程序不能试图以递归方式调用 <code>newInstance</code> 方法，即使是从相同的线程调用。

@author  <a href="mailto:Norman.Walsh@Sun.com">Norman Walsh</a>
@author  <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
@version $Revision: 1.4 $, $Date: 2006-10-23 09:14:18 $
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.xpath.XPathFactory.DEFAULT_PROPERTY_NAME
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>遵守 JAXP 规范的默认属性名称。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.xpath.XPathFactory.DEFAULT_OBJECT_MODEL_URI
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>默认 Object Model URI。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.xml.xpath.XPathFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>应使用 {@link #newInstance()}、{@link #newInstance(String uri)} 或 {@link #newInstance(String uri, String factoryClassName, ClassLoader classLoader)} 之类的受保护构造方法创建 <code>XPathFactory</code> 的新实例。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.xml.xpath.XPathFactory javax.xml.xpath.XPathFactory.newInstance()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取使用默认对象模型 {@link #DEFAULT_OBJECT_MODEL_URI}（即 W3C DOM）的新 <code>XPathFactory</code> 实例。</p>
 
<p>此方法的功能等效于：</p>
 <pre>
   newInstance(DEFAULT_OBJECT_MODEL_URI)
 </pre>
 
<p>因为 W3C DOM 的实现总是可用的，因此此方法永远不会失败。</p> 
 
@return <code>XPathFactory</code> 的实例。

@throws RuntimeException 创建默认对象模型的 <code>XPathFactory</code> 遇到故障时。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.xml.xpath.XPathFactory javax.xml.xpath.XPathFactory.newInstance(String uri) throws javax.xml.xpath.XPathFactoryConfigurationException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取使用指定对象模型的新 <code>XPathFactory</code> 实例。</p>
 
<p>为了查找 <code>XPathFactory</code> 对象，此方法按以下顺序查找以下位置，其中&ldquo;类加载器&rdquo;指上下文类加载器：</p>
 <ol>
   <li>
如果存在系统属性 {@link #DEFAULT_PROPERTY_NAME} + &quot;:uri&quot;（其中 uri 是此方法的参数），则其值作为类名称读取。该方法将试图通过使用类加载器创建此类的新实例，如果创建成功，则返回它。
   </li>
   <li>
读取 ${java.home}/lib/jaxp.properties，并查找与作为系统属性的键关联的值。如果存在，则按上面的方式处理该值。
   </li>
   <li>
类加载器要求服务提供者的提供者配置文件与资源目录 META-INF/services 中的 <code>javax.xml.xpath.XPathFactory</code> 匹配。有关文件格式和解析规则，请参阅 JAR File Specification。每个可能的服务提供者均要实现该方法：
     <pre>
       {@link #isObjectModelSupported(String objectModel)}
     </pre>
返回支持指定对象模型的类加载器顺序中的第一个服务提供者。
   </li>
   <li>
以特定于平台的方式来定位平台默认的 <code>XPathFactory</code>。必须存在 W3C DOM 的平台默认 的 XPathFactory，即 {@link #DEFAULT_OBJECT_MODEL_URI}。
   </li>
 </ol>
<p>如果这些都失败，则抛出 <code>XPathFactoryConfigurationException</code>。</p>
 
<p>疑难解答提示：</p>
<p>有关如何精确解析属性文件的信息，请参阅 {@link java.util.Properties#load(java.io.InputStream)}。尤其是，冒号 ':'在属性文件中需要转义，因此要确保 URI 在其中进行正确转义。例如：</p>
 <pre>
   http\://java.sun.com/jaxp/xpath/dom=org.acme.DomXPathFactory
 </pre>
 
@param uri 标识底层对象模型。规范只定义了 URI {@link #DEFAULT_OBJECT_MODEL_URI}、用于 W3C DOM 的 <code>http://java.sun.com/jaxp/xpath/dom</code>、org.w3c.dom 包。至于其他对象模型，实现可随意引入其他 URI。
 
@return <code>XPathFactory</code> 的实例。
 
@throws XPathFactoryConfigurationException 如果指定的对象模型不可用。
@throws NullPointerException 如果 <code>uri</code> 为 <code>null</code>。
@throws IllegalArgumentException 如果 <code>uri</code> 为 <code>null</code> 或 <code>uri.length() == 0</code>。


<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.xpath.XPathFactory javax.xml.xpath.XPathFactory.newInstance(String uri, String factoryClassName, ClassLoader classLoader) throws javax.xml.xpath.XPathFactoryConfigurationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>根据工厂类名称获取一个新 <code>XPathFactory</code> 实例。如果指定的工厂类支持指定的对象模型，则返回 <code>XPathFactory</code>。当类路径中有多个提供者时此函数很有用。它给了应用程序更多的控制权，因为它能指定应该加载哪个提供者。</p>
     

 <h2>疑难解答提示</h2>
 <p>设置 <code>jaxp.debug</code> 系统属性将导致此方法将许多调试消息打印到 <code>System.err</code>，以说明正在执行的操作以及在何处查找。</p>
 
 <p> 如有问题，请尝试：</p>
 <pre>
 java -Djaxp.debug=1 YourProgram ....
 </pre>

 @param uri         标识底层对象模型。规范只定义了 URI {@link #DEFAULT_OBJECT_MODEL_URI}、用于 W3C DOM 的 <code>http://java.sun.com/jaxp/xpath/dom</code>、org.w3c.dom 包。至于其他对象模型，实现可随意引入其他 URI。


 @param factoryClassName 完全限定工厂类名称，提供 <code>javax.xml.xpath.XPathFactory</code> 的实现。
                     
 @param classLoader 用来加载工厂类的 <code>ClassLoader</code>。如果为 <code>null</code>，则使用当前 <code>Thread</code> 的上下文 classLoader 来加载工厂类。
                     

 @return 新的 <code>XPathFactory</code> 实例

 @throws XPathFactoryConfigurationException 
                   如果 <code>factoryClassName</code> 为 <code>null</code>、工厂类不能被加载或实例化、工厂类不支持 <code>uri</code> 参数中指定的对象模型。

 @throws NullPointerException 如果 <code>uri</code> 为 <code>null</code>。
 @throws IllegalArgumentException 如果 <code>uri</code> 为 <code>null</code> 或 <code>uri.length() == 0</code>。

 @see #newInstance()
 @see #newInstance(String uri)

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.xml.xpath.XPathFactory.isObjectModelSupported(String objectModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>此 <code>XPathFactory</code> 是否支持指定的对象模型</p>
 
@param objectModel 指定返回的 <code>XPathFactory</code> 理解的对象模型。
  
@return 如果 <code>XPathFactory</code> 支持 <code>objectModel</code>，则返回 <code>true</code>，否则返回 <code>false</code>。
 
@throws NullPointerException 如果 <code>objectModel</code> 为 <code>null</code>。
@throws IllegalArgumentException 如果 <code>objectModel.length() == 0</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.xpath.XPathFactory.setFeature(String name, boolean value) throws javax.xml.xpath.XPathFactoryConfigurationException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>设置此工厂所创建的此 <code>XPathFactory</code> 和 <code>XPath</code> 的功能。</p>
 
 <p>
功能名称是完全限定的 {@link java.net.URI}。实现可以定义它们自己的功能。如果此 <code>XPathFactory</code> 或其创建的 <code>XPath</code> 不支持该功能，则抛出 {@link XPathFactoryConfigurationException}。<code>XPathFactory</code> 可以公开功能值，但不能更改其状态。
 </p>
 
 <p>
所有实现必须支持 {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} 功能。当功能为 <code>true</code> 时，任何对外部函数的引用均是错误的。在这些条件下，实现不能调用 {@link XPathFunctionResolver} 且必须抛出 {@link XPathFunctionException}。
 </p>
 
@param name 功能名称。
@param value 功能状态为 <code>true</code> 或 <code>false</code>。
  
@throws XPathFactoryConfigurationException 如果此 <code>XPathFactory</code> 或其创建的 <code>XPath</code> 不支持此功能。
@throws NullPointerException 如果 <code>name</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.xml.xpath.XPathFactory.getFeature(String name) throws javax.xml.xpath.XPathFactoryConfigurationException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获取指定功能的状态。</p>
 
 <p>
功能名称是完全限定的 {@link java.net.URI}。实现可以定义它们自己的功能。如果此 <code>XPath</code> 或其创建的 <code>XPathFactory</code> 不支持该功能，则抛出 {@link XPathFactoryConfigurationException}。<code>XPathFactory</code> 可以公开功能值，但不能更改其状态。
 </p>
 
@param name 功能名称。
 
@return 指定功能的状态。
 
@throws XPathFactoryConfigurationException 如果此 <code>XPathFactory</code> 或其创建的 <code>XPath</code> 不支持此功能。
@throws NullPointerException 如果 <code>name</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.xpath.XPathFactory.setXPathVariableResolver(XPathVariableResolver resolver)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>建立默认变量解析器。</p>

<p>从此工厂构造的任何 <code>XPath</code> 对象将默认使用指定的解析器。</p>
 
<p>如果 <code>resolver</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。</p>
 
@param resolver 变量解析器。
 
@throws NullPointerException 如果 <code>resolver</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.xpath.XPathFactory.setXPathFunctionResolver(XPathFunctionResolver resolver)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>建立默认函数解析器。</p>
 
<p>从此工厂构造的任何 <code>XPath</code> 对象将默认使用指定的解析器。</p>

<p>如果 <code>resolver</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。</p>
 
@param resolver XPath 函数解析器。
 
@throws NullPointerException 如果 <code>resolver</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.xpath.XPath javax.xml.xpath.XPathFactory.newXPath()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回使用实例化 <code>XPathFactory</code> 时确定的底层对象模型的新 <code>XPath</code>。</p>
 
@return  <code>XPath</code> 的新实例。

<!-- END DATA -->
