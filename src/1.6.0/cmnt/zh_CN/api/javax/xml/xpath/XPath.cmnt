<!-- BEGIN KEY -->
public interface javax.xml.xpath.XPath
<!-- END KEY -->
<!-- BEGIN DATA -->
<p><code>XPath</code> 提供了对 XPath 计算环境和表达式的访问。</p>

<a name="XPath-evaluation"/>
 <table border="1" cellpadding="2">
   <thead>
     <tr>
<th colspan="2">XPath 表达式的计算。</th>
     </tr>
   </thead>
   <tbody>
     <tr>
<td>上下文</td>
       <td>
如果在没有上下文项的情况下请求计算表达式，则将使用一个空文档节点作为上下文。为计算 XPath 表达式，应将 DocumentFragment 视为 Document 节点。
      </td>
    </tr>
    <tr>
<td>变量</td>
      <td>
如果表达式包含变量引用，则其值将通过 {@link XPathVariableResolver} 找到，其中 {@link XPathVariableResolver} 是通过 {@link #setXPathVariableResolver(XPathVariableResolver resolver)} 设置的。如果变量解析器未定义或解析器对变量返回 <code>null</code>，则引发 {@link XPathExpressionException}。在任何单个计算过程中，变量的值必须是不可变的。</p>
      </td>
    </tr>
    <tr>
<td>函数</td>
      <td>
如果表达式包含函数引用，则函数将通过 {@link XPathFunctionResolver} 找到，其中 {@link XPathFunctionResolver} 是通过 {@link #setXPathFunctionResolver(XPathFunctionResolver resolver)} 设置的。如果函数解析器未定义或解析器为函数返回 <code>null</code>，则引发 {@link XPathExpressionException}。</p>
      </td>
    </tr>
    <tr>
      <td>QNames</td>
      <td>
表达式中的 QNames 根据通过 {@link #setNamespaceContext(NamespaceContext nsContext)} 设置的 XPath 名称空间上下文来解析。
      </td>
    </tr>
    <tr>
<td>结果</td>
      <td>
将计算表达式的结果转换为所需的返回类型的实例。{@link XPathConstants} 中定义了有效的返回类型。到返回类型的转换遵守 XPath 转换规则。</p>
      </td>
    </tr>
 </table>

 <p>XPath 对象不是线程安全的，也不能重入。换句话说，应用程序负责确保在任意给定时刻不能有多个线程使用一个 {@link XPath} 对象，且当调用 <code>evaluate</code> 方法时，应用程序不能以递归方式调用 <code>evaluate</code> 方法。
 <p>
 
@author  <a href="Norman.Walsh@Sun.com">Norman Walsh</a>
@author  <a href="Jeff.Suttor@Sun.com">Jeff Suttor</a>
@version $Revision: 1.3 $, $Date: 2006-09-14 09:54:56 $
@see <a href="http://www.w3.org/TR/xpath">XML Path Language (XPath) Version 1.0</a>
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.xpath.XPath.reset()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>将此 <code>XPath</code> 重置为其初始配置。</p>
 
<p><code>XPath</code> 被重置为通过 {@link XPathFactory#newXPath()} 创建它时的状态。设计 <code>reset()</code> 旨在允许重用现有的 <code>XPath</code>，从而节省与创建新 <code>XPath</code> 相关的资源。</p>
 
<p>不保证重置的 <code>XPath</code> 具有相同的 {@link XPathFunctionResolver}、{@link XPathVariableResolver} 或 {@link NamespaceContext} <code>Object</code>，例如 {@link Object#equals(Object obj)}。但保证具有功能相同的 <code>XPathFunctionResolver</code>、<code>XPathVariableResolver</code> 和 <code>NamespaceContext</code>。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.xpath.XPath.setXPathVariableResolver(XPathVariableResolver resolver)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>建立变量解析器。</p>
 
<p>如果 <code>resolver</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。</p>
 
@param resolver 变量解析器。
 
@throws NullPointerException 如果 <code>resolver</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.xpath.XPathVariableResolver javax.xml.xpath.XPath.getXPathVariableResolver()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回当前的变量解析器。</p>
 
<p>如果不存在有效的变量解析器，则返回 <code>null</code>。</p>
  
@return 当前的变量解析器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.xpath.XPath.setXPathFunctionResolver(XPathFunctionResolver resolver)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>建立函数解析器。</p>
 
<p>如果 <code>resolver</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。</p>
 
@param resolver XPath 函数解析器。
 
@throws NullPointerException 如果 <code>resolver</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.xpath.XPathFunctionResolver javax.xml.xpath.XPath.getXPathFunctionResolver()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回当前的函数解析器。</p>
 
<p>如果不存在有效的变量解析器，则返回 <code>null</code>。</p>
 
@return 当前的函数解析器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.xpath.XPath.setNamespaceContext(NamespaceContext nsContext)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>建立名称空间上下文。</p>
 
<p>如果 <code>nsContext</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。</p>
 
@param nsContext 要使用的名称空间上下文。
 
@throws NullPointerException 如果 <code>nsContext</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.namespace.NamespaceContext javax.xml.xpath.XPath.getNamespaceContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回当前的名称空间上下文。</p>
 
<p>如果不存在有效的名称空间上下文，则返回 <code>null</code>。</p>
 
@return 当前的 Namespace 上下文。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.xpath.XPathExpression javax.xml.xpath.XPath.compile(String expression) throws javax.xml.xpath.XPathExpressionException
<!-- END KEY -->
<!-- BEGIN DATA -->

<p>编译 XPath 表达式供以后计算使用。</p>
 
<p>如果 <code>expression</code> 包含任何 {@link XPathFunction}，则它们必须可以通过 {@link XPathFunctionResolver} 获取。如果不能通过 <code>XPathFunctionResolver</code> 解析 <code>XPathFunction</code>，则将抛出 {@link XPathExpressionException}。</p>

<p>如果 <code>expression</code> 包含任何变量，则将使用<strong>在编译时</strong>有效的 {@link XPathVariableResolver} 来解析这些变量。</p>
  
<p>如果 <code>expression</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。</p> 

@param expression XPath 表达式。
 
@return 编译后的 XPath 表达式。

@throws XPathExpressionException 如果不能编译 <code>expression</code>。
@throws NullPointerException 如果 <code>expression</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.xml.xpath.XPath.evaluate(String expression, Object item, QName returnType) throws javax.xml.xpath.XPathExpressionException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>计算指定上下文中的 <code>XPath</code> 表达式并返回指定类型的结果。</p>

<p>有关上下文项计算、变量、函数和 <code>QName</code> 解析，以及返回类型转换，请参阅 <a href="#XPath-evaluation">Evaluation of XPath Expressions</a>。</p>
 
<p>如果 <code>returnType</code> 不是 {@link XPathConstants} ({@link XPathConstants#NUMBER NUMBER}、{@link XPathConstants#STRING STRING}、{@link XPathConstants#BOOLEAN BOOLEAN}、{@link XPathConstants#NODE NODE} 或 {@link XPathConstants#NODESET NODESET}) 中定义的某种类型，则抛出 <code>IllegalArgumentException</code>。</p>
 
<p>如果 <code>item</code> 为 <code>null</code> 值，则将使用一个空文档作为上下文。如果 <code>expression</code> 或 <code>returnType</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。</p>

@param expression XPath 表达式。
@param item 开始上下文（例如节点）。
@param returnType 所需的返回类型。
 
@return 以 <code>returnType</code> 的 <code>Object</code> 形式返回 XPath 表达式的计算结果。
 
@throws XPathExpressionException 如果不能计算 <code>expression</code>。
@throws IllegalArgumentException 如果 <code>returnType</code> 不是 {@link XPathConstants} 中定义的类型之一。
@throws NullPointerException 如果 <code>expression</code> 或 <code>returnType</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.xpath.XPath.evaluate(String expression, Object item) throws javax.xml.xpath.XPathExpressionException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>计算指定上下文中的 XPath 表达式并返回 <code>String</code> 形式的结果。</p>

<p>此方法通过 {@link XPathConstants#STRING} 的 <code>returnType</code> 调用 {@link #evaluate(String expression, Object item, QName returnType)}。</p>
 
<p>有关上下文项计算、变量、函数和 QName 解析，以及返回类型转换，请参阅 <a href="#XPath-evaluation">Evaluation of XPath Expressions</a>。</p>

<p>如果为 <code>item</code> 为 <code>null</code> 值，则将使用一个空文档作为上下文。如果 <code>expression</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。</p>
 
@param expression XPath 表达式。
@param item 开始上下文（例如节点）。
 
@return 计算表达式并将计算结果转换为 <code>String</code> 所得到的结果 <code>String</code>。
 
@throws XPathExpressionException 如果不能计算 <code>expression</code>。
@throws NullPointerException 如果 <code>expression</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.xml.xpath.XPath.evaluate(String expression, InputSource source, QName returnType) throws javax.xml.xpath.XPathExpressionException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>计算指定 <code>InputSource</code> 上下文中的 XPath 表达式并返回指定类型的结果。</p>

<p>此方法构建 {@link InputSource} 的数据模型并调用得到的文档对象上的 {@link #evaluate(String expression, Object item, QName returnType)}。</p>

<p>有关上下文项计算、变量、函数和 QName 解析，以及返回类型转换，请参阅 <a href="#XPath-evaluation">Evaluation of XPath Expressions</a>。</p>
 
<p>如果 <code>returnType</code> 不是 {@link XPathConstants} 中定义的类型之一，则抛出 <code>IllegalArgumentException</code>。</p>
 
<p>如果 <code>expression</code>、<code>source</code> 或 <code>returnType</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。</p>
 
@param expression XPath 表达式。
@param source 要对其计算的文档的输入源。
@param returnType 所需的返回类型。
 
@return 封装了表达式计算结果的 <code>Object</code>。
 
@throws XPathExpressionException 如果不能计算表达式。
@throws IllegalArgumentException 如果 <code>returnType</code> 不是 {@link XPathConstants} 中定义的类型之一。
@throws NullPointerException 如果 <code>expression</code>、<code>source</code> 或 <code>returnType</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.xpath.XPath.evaluate(String expression, InputSource source) throws javax.xml.xpath.XPathExpressionException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>计算指定 <code>InputSource</code> 上下文中的 XPath 表达式并返回 <code>String</code> 形式的结果。</p>

<p>此方法通过 {@link XPathConstants#STRING} 的 <code>returnType</code> 调用 {@link #evaluate(String expression, InputSource source, QName returnType)}。</p>

<p>有关上下文项计算、变量、函数和 QName 解析，以及返回类型转换，请参阅 <a href="#XPath-evaluation">Evaluation of XPath Expressions</a>。</p>
 
<p>如果 <code>expression</code> 或 <code>source</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。</p>
 
@param expression XPath 表达式。
@param source 要对其计算的文档的 <code>InputSource</code>。
 
@return 计算表达式并将计算结果转换为 <code>String</code> 所得到的结果 <code>String</code>。
 
@throws XPathExpressionException 如果不能计算表达式。
@throws NullPointerException 如果 <code>expression</code> 或 <code>source</code> 为 <code>null</code>。

<!-- END DATA -->
