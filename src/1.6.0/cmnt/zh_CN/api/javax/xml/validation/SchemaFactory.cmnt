<!-- BEGIN KEY -->
public abstract class javax.xml.validation.SchemaFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 {@link Schema} 对象的工厂。验证 API 的入口点。

 <p>
{@link SchemaFactory} 是一个模式编译器。它读取模式的外部表示形式并准备验证它们。
 
 <p>
{@link SchemaFactory} 类不是线程安全的。换句话说，应用程序负责确保任意给定时刻至多只有一个线程使用 {@link SchemaFactory} 对象。鼓励实现将方法标记为 <code>synchronized</code>，以保护客户机不至于崩溃。
 
 <p>
{@link SchemaFactory} 不是重入（re-entrant）方法。当正在调用某个 <code>newSchema</code> 方法时，应用程序不能试图以递归方式调用 <code>newSchema</code> 方法，甚至不能从相同线程调用该方法。
 
<h2><a name="schemaLanguage"></a>模式语言</h2>
 <p>
此规范使用名称空间 URI 来指定模式语言。下表显示了此规范定义的值。
 <p>
要遵守此规范，实现只需支持 W3C XML 模式 1.0 即可。但是，如果实现选择支持其他模式语言，那么它必须遵守此规范中所描述的相关行为。
 
 <p>
此处未列出的模式语言应引用它们自己的 URI 来表示它们本身。{@link SchemaFactory} 类能够在运行时定位其他模式语言的其他实现。
 
 <p>
注意，因为 XML DTD 与解析过程有紧密联系，并对解析过程产生很大影响，因此不能将 DTD 验证定义为与解析无关的过程。出于此原因，此规范不定义 XML DTD 的语义。这并不限制实现者以他们了解的合适方式来实现它，但<em>这里提醒用户，此接口上实现的任何 DTD 验证必然偏离 XML 1.0 中所定义的 XML DTD 语义</em>。
 
 <table border="1" cellpadding="2">
   <thead>
     <tr>
<th>值</th>
<th>语言</th>
     </tr>
   </thead>
   <tbody>
     <tr>
       <td>{@link javax.xml.XMLConstants#W3C_XML_SCHEMA_NS_URI} (&quot;<code>http://www.w3.org/2001/XMLSchema</code>&quot;)</td>
       <td><a href="http://www.w3.org/TR/xmlschema-1">W3C XML Schema 1.0</a></td>
     </tr>
     <tr>
       <td>{@link javax.xml.XMLConstants#RELAXNG_NS_URI} (&quot;<code>http://relaxng.org/ns/structure/1.0</code>&quot;)</td>
       <td><a href="http://www.relaxng.org/">RELAX NG 1.0</a></td>
     </tr>
   </tbody>
 </table>
 
@author  <a href="mailto:Kohsuke.Kawaguchi@Sun.com">Kohsuke Kawaguchi</a>
@author  <a href="mailto:Neeraj.Bajaj@sun.com">Neeraj Bajaj</a>

@version $Revision: 1.5 $, $Date: 2006-10-23 09:14:17 $
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.xml.validation.SchemaFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>派生类的构造方法。</p>
 
<p>构造方法不执行任何动作。</p>
 
<p>派生类必须创建具有 <code>null</code> {@link ErrorHandler} 和 <code>null</code> {@link LSResourceResolver} 的 {@link SchemaFactory} 对象。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.xml.validation.SchemaFactory javax.xml.validation.SchemaFactory.newInstance(String schemaLanguage)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>查找支持指定模式语言的 <code>SchemaFactory</code> 的实现并返回它。</p>
 
<p>为了查找给定模式语言的 <code>SchemaFactory</code> 对象，此方法按照以下顺序查找以下位置，其中&ldquo;类加载器&rdquo;指上下文类加载器：</p>
 <ol>
  <li>
如果系统属性 <code>&quot;javax.xml.validation.SchemaFactory:<i>schemaLanguage</i>&quot;</code> 存在（其中 <i>schemaLanguage</i> 是此方法的参数），那么可以将它的值作为类名称来读取。该方法试图通过使用类加载器来创建此类的新实例，如果创建成功，则返回它。
   </li>
   <li>
读取 <code>$java.home/lib/jaxp.properties</code>，并查找与作为系统属性的键关联的值。如果存在这样的值，则按上面的方式处理该值。
   </li>
   <li>
<p>类加载器要求服务提供者的提供者配置文件与资源目录 META-INF/services 中的 <code>javax.xml.validation.SchemaFactory</code> 匹配。参见文件格式和解析规则的 JAR File Specification。每个可能的服务提供者均要实现以下方法：</p>
     <pre>
        {@link #isSchemaLanguageSupported(String schemaLanguage)}
     </pre> 
返回支持指定模式语言的类加载器顺序中的第一个服务提供者。
   </li>
   <li>
以特定于实现的方式来定位平台默认的 <code>SchemaFactory</code>。必须存在 W3C XML 模式的平台默认 <code>SchemaFactory</code>。
   </li>
 </ol>
 
<p>如果这些都失败，则将抛出 {@link IllegalArgumentException}。</p>
 
<p><strong>疑难解答提示：</strong></p>
<p>有关如何精确解析属性文件的信息，请参阅 {@link java.util.Properties#load(java.io.InputStream)}。尤其要指出的是，冒号 ':'在属性文件中需要转义，因此要确保模式语言 URI 在其中进行正确转义。例如：</p>
 <pre>
 http\://www.w3.org/2001/XMLSchema=org.acme.foo.XSSchemaFactory
 </pre>
 
@param schemaLanguage 指定返回的 SchemaFactory 理解的模式语言。有关可能的值，请参阅 <a href="#schemaLanguage">可用模式语言列表</a>。
 
@return 新的 <code>SchemaFactory</code> 实例
 
@throws IllegalArgumentException 如果没有可用的模式语言实现。
 
@throws NullPointerException 如果 <code>schemaLanguage</code> 参数为 null。

@see #newInstance(String schemaLanguage, String factoryClassName, ClassLoader classLoader)


<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.validation.SchemaFactory javax.xml.validation.SchemaFactory.newInstance(String schemaLanguage, String factoryClassName, ClassLoader classLoader)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>根据类名称获得一个新 <code>SchemaFactory</code> 实例。如果指定的工厂类支持指定的模式语言，则返回 <code>SchemaFactory</code>。当类路径中有多个提供者时此功能很有用。它给了应用程序更多的控制权，因为它能指定应该加载哪个提供者。</p>
     
 <h2>疑难解答提示</h2>
 <p>设置 <code>jaxp.debug</code> 系统属性将导致此方法将许多调试消息打印到 <code>System.err</code>，以说明它执行的操作以及在何处查找这些操作。</p>
 
 <p> 如有问题，请尝试：</p>
 <pre>
 java -Djaxp.debug=1 YourProgram ....
 </pre>

 @param schemaLanguage 指定返回的 <code>SchemaFactory</code> 理解的模式语言。有关可能的值，请参阅 <a href="#schemaLanguage">the list of available schema languages</a>。

 @param factoryClassName 完全限定工厂类名称，提供 <code>javax.xml.validation.SchemaFactory</code> 的实现。

 @param classLoader 用来加载工厂类的 <code>ClassLoader</code>。如果为 <code>null</code>，则使用当前 <code>Thread</code> 的上下文 classLoader 来加载工厂类。

 @return 新的 <code>SchemaFactory</code> 实例

 @throws IllegalArgumentException
                   如果 <code>factoryClassName</code> 为 <code>null</code>、工厂类不能被加载或实例化、工厂类不支持 <code>schemLanguage</code> 参数中指定的模式语言。

 @throws NullPointerException
      如果 <code>schemaLanguage</code> 参数为 null。

 @see #newInstance(String schemaLanguage)

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.xml.validation.SchemaFactory.isSchemaLanguageSupported(String schemaLanguage)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>此 <code>SchemaFactory</code> 支持指定的模式吗？</p>
 
@param schemaLanguage 指定返回的 <code>SchemaFactory</code> 理解的模式语言。<code>schemaLanguage</code> 必须指定<a href="#schemaLanguage">有效的</a>模式语言。
 
@return 如果 <code>SchemaFactory</code> 支持 <code>schemaLanguage</code>，则返回 <code>true</code>，否则返回 <code>false</code>。
 
@throws NullPointerException 如果 <code>schemaLanguage</code> 为 <code>null</code>。
@throws IllegalArgumentException 如果 <code>schemaLanguage.length() == 0</code> 或 <code>schemaLanguage</code> 未指定<a href="#schemaLanguage">有效的</a>模式语言。  

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.xml.validation.SchemaFactory.getFeature(String name) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
查找功能标志的值。

<p>功能名称是任何完全限定的 URI。{@link SchemaFactory} 有可能识别功能名称，但暂时不能返回其值。

<p>实现者可随意选择（鼓励）创建自己的功能，方法是使用在它们自己的 URI 上构建的名称。</p>

@param name 功能名称，它是非 null 的完全限定 URI。

@return 功能的当前值（true 或 false）。

@throws SAXNotRecognizedException 如果不能分配或检索功能值。
@throws SAXNotSupportedException 当 {@link SchemaFactory} 可以识别功能名称但不能确定它此时的值时。
@throws NullPointerException 如果 <code>name</code> 为 <code>null</code>。

@see #setFeature(String, boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.validation.SchemaFactory.setFeature(String name, boolean value) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>设置此 <code>SchemaFactory</code> 的特性，{@link Schema} 由此工厂创建，更进一步说，{@link Validator} 和 {@link ValidatorHandler} 由这些 {@link Schema} 创建。
 </p>

 <p>实现者和开发人员应该特别注意 {@link #newSchema()} 返回的特殊 {@link Schema} 对象是如何处理的。在某些情况下，例如，当 <code>SchemaFactory</code> 和类实际上加载来自不同实现的模式时，<code>SchemaFactory</code> 特性将无法自动继承。开发人员应该确保在两个地方都显式地设置了特性（如安全处理）。</p>

<p>功能名称是任何完全限定的 URI。{@link SchemaFactory} 有可能公开功能值，但不能更改当前值。</p>

<p>所有实现必须支持 {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} 功能。当功能为以下情况时：</p>
 <ul>
   <li>
<code>true</code>：该实现将限制 XML 处理遵守实现限制。示例包括实体扩展限制和将使用大量资源的 XML 模式构造。如果由于安全原因 XML 处理受到限制，则将通过调用注册的 {@link ErrorHandler#fatalError(SAXParseException exception)} 来报告此情况。参见 {@link  #setErrorHandler(ErrorHandler errorHandler)}。
   </li>
   <li>
<code>false</code>：实现将根据 XML 规范来处理 XML，而不管可能的实现限制。
   </li>
 </ul>
 
@param name 功能名称，它是非 null 的完全限定 URI。
@param value 所请求的功能值（true 或 false）。
 
@throws SAXNotRecognizedException 如果不能分配或检索功能值。
@throws SAXNotSupportedException 当 {@link SchemaFactory} 可以识别功能名称，但不能设置请求的值时。
@throws NullPointerException 如果 <code>name</code> 为 <code>null</code>。
 
@see #getFeature(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.validation.SchemaFactory.setProperty(String name, Object object) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置属性值。

<p>属性名称是任何完全限定的 URI。{@link SchemaFactory} 有可能识别属性名称，但不能更改当前值。</p>

<p>{@link SchemaFactory} 无需识别设置任何特定的属性名称。</p>

@param name 属性名称，它是非 null 的完全限定 URI。
@param object 所请求的属性值。
@throws SAXNotRecognizedException 如果不能分配或检索属性值。
@throws SAXNotSupportedException 当 {@link SchemaFactory} 可以识别属性名称，但不能设置请求的值时。
@exception NullPointerException 如果 <code>name</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.xml.validation.SchemaFactory.getProperty(String name) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
查找属性值。

<p>属性名称是任何完全限定的 URI。{@link SchemaFactory} 有可能识别属性名称，但暂时不能返回其值。</p>

<p>{@link SchemaFactory} 无需识别任何特定的属性名称。</p>

<p>实现者可随意选择（鼓励）创建自己的属性，方法是使用在它们自己的 URI 上构建的名称。</p>

@param name 属性名称，它是非 null 的完全限定 URI。
@return 属性的当前值。
@throws SAXNotRecognizedException 如果不能分配或检索属性值。
@throws SAXNotSupportedException 当 XMLReader 可以识别属性名称，但不能确定它此时的值时。
@throws  NullPointerException 如果 <code>name</code> 为 <code>null</code>。
@see #setProperty(String, Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.validation.SchemaFactory.setErrorHandler(ErrorHandler errorHandler)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 {@link ErrorHandler} 以接收在 <code>newSchema</code> 方法调用期间遇到的错误。
 
 <p>
错误处理程序可用于自定义模式解析期间的错误处理过程。当设置 {@link ErrorHandler} 时，模式解析期间发现的错误将首先发送到 {@link ErrorHandler}。
 
 <p>
通过抛出处理程序中的 {@link SAXException}，错误处理程序可以立即中止模式的解析。例如，它可以将错误打印到屏幕上，并尝试通过从 {@link ErrorHandler} 正常返回来继续该过程。
 
 <p>
如果从 {@link ErrorHandler} 抛出任何 {@link Throwable}（或其派生类的实例），则 <code>newSchema</code> 方法的调用者将接收相同的 {@link Throwable} 对象。
 
 <p>
在 {@link SchemaFactory} 没有先向 {@link ErrorHandler} 报告之前，不能抛出 {@link SAXException}。
 
 <p>
甚至正在解析 {@link Schema} 期间，应用程序也可以调用此方法。 
 
 <p>
当 {@link ErrorHandler} 为 null 时，实现的行为就好像设置了以下 {@link ErrorHandler} 一样。
 <pre>
 class DraconianErrorHandler implements {@link ErrorHandler} {
     public void fatalError( {@link org.xml.sax.SAXParseException} e ) throws {@link SAXException} {
         throw e;
     }
     public void error( {@link org.xml.sax.SAXParseException} e ) throws {@link SAXException} {
         throw e;
     }
     public void warning( {@link org.xml.sax.SAXParseException} e ) throws {@link SAXException} {
         // noop
     }
 }
 </pre>
 
 <p>
当创建新 {@link SchemaFactory} 对象时，此字段在初始化时被设置为 null。<em>不要</em> 将此字段继承给从此 {@link SchemaFactory} 创建的 {@link Schema}、{@link Validator} 或 {@link ValidatorHandler}。
 
@param   errorHandler 要设置的新错误处理程序。此参数可以为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.xml.sax.ErrorHandler javax.xml.validation.SchemaFactory.getErrorHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取设置为此 {@link SchemaFactory} 的当前 {@link ErrorHandler}。
 
@return 此方法返回通过 {@link #setErrorHandler(ErrorHandler)} 方法设置的最后一个对象，如果自从创建此 {@link SchemaFactory} 以来一直未调用该方法，则返回 null。
 
@see #setErrorHandler(ErrorHandler)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.validation.SchemaFactory.setResourceResolver(LSResourceResolver resourceResolver)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 {@link LSResourceResolver} 以自定义解析模式时的资源解析。
 
 <p>
在模式解析中，{@link SchemaFactory} 在需要查找外部资源时使用 {@link LSResourceResolver}，虽然&ldquo;查找外部资源&rdquo;的准确含义取决于每个模式语言。例如，对于 W3C XML Schema，这包括文件 <code>&lt;include></code>d 或 <code>&lt;import></code>ed，以及从模式文件引用的 DTD 等。
 
 <p>
甚至正在解析 {@link Schema} 期间，应用程序也可以调用此方法。 
 
 <p>
当 {@link LSResourceResolver} 为 null 时，实现的行为就好像设置了以下 {@link LSResourceResolver} 一样：
 <pre>
 class DumbDOMResourceResolver implements {@link LSResourceResolver} {
     public {@link org.w3c.dom.ls.LSInput} resolveResource(
         String publicId, String systemId, String baseURI) {
         
         return null; // always return null
     }
 }
 </pre>
 
 <p>
如果 {@link LSResourceResolver} 抛出 {@link RuntimeException}（或其派生类的实例），则 {@link SchemaFactory} 将中止解析，且 <code>newSchema</code> 方法的调用者将接收相同的 {@link RuntimeException}。 
 
 <p>
当创建新 {@link SchemaFactory} 对象时，此字段在初始化时被设置为 null。<em>不要</em> 将此字段继承给从此 {@link SchemaFactory} 创建的 {@link Schema}、{@link Validator} 或 {@link ValidatorHandler}。
 
@param   resourceResolver 要设置的新资源解析器。此参数可以为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.w3c.dom.ls.LSResourceResolver javax.xml.validation.SchemaFactory.getResourceResolver()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取设置为此 {@link SchemaFactory} 的当前 {@link LSResourceResolver}。
 
@return 此方法返回通过 {@link #setResourceResolver(LSResourceResolver)} 方法设置的最后一个对象，如果自从创建此 {@link SchemaFactory} 以来一直未调用该方法，则返回 null。
 
@see #setErrorHandler(ErrorHandler)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.validation.Schema javax.xml.validation.SchemaFactory.newSchema(Source schema) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>解析作为模式的指定源并以模式形式返回它。</p>
 
<p>这是一个针对 {@link #newSchema(Source[] schemas)} 的便捷方法。</p>
 
@param schema 表示模式的源。
 
@return 从解析 <code>schema</code> 得到的新 <code>Schema</code>。
 
@throws SAXException 如果解析期间发生 SAX 错误。
@throws NullPointerException 如果 <code>schema</code> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.validation.Schema javax.xml.validation.SchemaFactory.newSchema(File schema) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>解析作为模式的指定 <code>File</code> 并以 <code>Schema</code> 的形式返回它。</p>
 
<p>这是一个针对 {@link #newSchema(Source schema)} 的便捷方法。</p>
 
@param schema 表示模式的 File。
 
@return 从解析 <code>schema</code> 得到的新 <code>Schema</code>。
 
@throws SAXException 如果解析期间发生 SAX 错误。
@throws NullPointerException 如果 <code>schema</code> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.validation.Schema javax.xml.validation.SchemaFactory.newSchema(URL schema) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>解析作为模式的指定 <code>URL</code> 并以 <code>Schema</code> 形式返回它。</p>
 
<p>这是一个针对 {@link #newSchema(Source schema)} 的便捷方法。</p>
 
@param schema 表示模式的 <code>URL</code>。
 
@return 从解析 <code>schema</code> 得到的新 <code>Schema</code>。
 
@throws SAXException 如果解析期间发生 SAX 错误。
@throws NullPointerException 如果 <code>schema</code> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.validation.Schema javax.xml.validation.SchemaFactory.newSchema(javax.xml.transform.Source[] schemas) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
解析作为模式的指定源（或多个源），并以模式形式返回它。
 
 <p>
被调用者将读取所有 {@link Source} 并将它们组合到一个模式中。组合的精确语义取决于此 {@link SchemaFactory} 对象为其创建的模式语言。
 
 <p>
当设置 {@link ErrorHandler} 时，被调用者将向处理程序报告源中发现的所有错误。如果处理程序执行异常，则它将中止模式组合，且将从此方法抛出相同的异常。同样，向处理程序报告错误后，允许被调用者通过抛出该错误来中止下一步处理。如果未设置错误处理程序，则被调用者将抛出在源中发现的第一个错误。   
 
 <h2>W3C XML 模式 1.0</h2>
 <p>
得到的模式包含来自指定源的组件。如果使用合适的 schemaLocation 值和名称空间值将所有这些源导入具有不同 targetNamespace 且没有其自己组件的单个模式文档中，如果以与源相同的顺序给定导入元素，则将得到相同结果。XML 模式建议的第 4.2.3 节描述了处理器关于这方面的选项。当处理器应与其 JAXP 模式源和 XML 模式导入的处理一致时，JAXP 兼容的解析器之间的行为可能不同，特别是解析器可能选择忽略所有给定名称空间的 &lt;import&gt;（第一个除外），而不管 schemaLocation 中所提供的信息。
 
 <p>
如果解析后的模式集包含 XML 模式规范第 5.1 节指定的错误（或多个错误），则必须将错误报告给 {@link ErrorHandler}。
 
 <h2>RELAX NG</h2>
 
<p>对于 RELAX NG，如果 <code>schemas.length!=1</code>，则此方法必须抛出 {@link UnsupportedOperationException}。 
  
 
@param schemas 要解析的输入。{@link SchemaFactory} 必须识别 {@link javax.xml.transform.sax.SAXSource}、{@link StreamSource}、{@link javax.xml.transform.stax.StAXSource} 和 {@link javax.xml.transform.dom.DOMSource}。输入模式必须是 XML 文档或 XML 元素，并且不得为 null。为了向后兼容，传递文档或元素以外的任何内容的所得结果都由实现决定。实现必须能识别并处理输入，否则将抛出 IllegalArgumentException。
 
@return 总返回非 null 的有效 {@link Schema} 对象。注意，当已报告错误后，不保证返回的 {@link Schema} 对象有意义。
 
@throws SAXException 如果在处理指定输入期间发现错误。当设置 {@link ErrorHandler} 时，首先将错误报告到该处。参见 {@link #setErrorHandler(ErrorHandler)}。
@throws NullPointerException 如果 <code>schemas</code> 参数本身为 null，或数组中的任何项为 null。
@throws IllegalArgumentException 如果此方法不识别数组中的任何项。
@throws UnsupportedOperationException 如果模式语言不支持此操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.validation.Schema javax.xml.validation.SchemaFactory.newSchema() throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建特殊的 {@link Schema} 对象。
 
 <p>
返回的 {@link Schema} 对象的精确语义取决于此 {@link SchemaFactory} 为其创建的模式语言。
 
 <p>
同样，允许实现使用特定于实现的属性/功能来更改此方法的语义。</p>

 <p>实现者和开发人员应该特别注意此 {@link SchemaFactory} 上设置的特性是如何由此特殊 {@link Schema} 对象处理的。在某些情况下，例如，当 {@link SchemaFactory} 和类实际上加载来自不同实现的模式时，{@link SchemaFactory} 特性将无法自动继承。开发人员应该确保在两个地方都显式地设置了特性（如安全处理）。</p>
 
 
 <h2>W3C XML 模式 1.0</h2>
 <p>
对于 XML 模式，此方法创建 {@link Schema} 对象，该对象通过使用文档中指定的位置提示来执行验证。
 
 <p>
返回的 {@link Schema} 对象假定如果文档指向模式位置提示中的相同 URL，则它们将总是解析为相同的模式文档。此假定允许实现重用解析后的模式文档结果，以便相对于相同模式的多个验证可以更快地运行。
 
 <p>
注意，模式位置提示的使用引入了恶意的拒绝服务攻击。 
   
 <h2>RELAX NG</h2>
 <p>
RELAX NG 不支持此操作。 
 
@return 总返回非 null 的有效 {@link Schema} 对象。
 
@throws UnsupportedOperationException 如果被调用者不支持此操作。
@throws SAXException 如果此操作受支持但由于某种原因而失败。

<!-- END DATA -->
