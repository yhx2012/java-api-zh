<!-- BEGIN KEY -->
javax.xml.validation
<!-- END KEY -->
<!-- BEGIN DATA -->

		<p>
此包提供了用于 XML 文档验证的 API。<em>Validation</em> 是验证 XML 文档是否为指定 XML <em>schema</em> 的实例的过程。XML 模式定义了其实例文档将表示的内容模式（也称为 <em>grammar</em> 或 <em>vocabulary</em>）。
        </p>
        <p>
有多种流行的技术用于创建 XML 模式。最流行的技术包括：
</p>
            <ul>
<li><strong>Document Type Definition (DTD)</strong> －－ XML 的内置模式语言。</li>
<li><strong><a href="http://www.w3.org/XML/Schema">W3C XML Schema (WXS)</a></strong> －－ 面向对象的 XML 模式语言。WXS 还提供了用于约束 XML 文档的字符数据的类型系统。WXS 通过 <a href="http://www.w3.org">World Wide Web Consortium (W3C)</a> 维护，它是 W3C Recommendation（即公认的 W3C 标准规范）。</li>
<li><strong><a href="http://www.relaxng.org">RELAX NG (RNG)</a></strong> －－ 基于模式的、用户友好的 XML 模式语言。RNG 模式也可以使用类型来约束 XML 字符数据。RNG 通过 <a href="http://www.oasis-open.org">Organization for the Advancement of Structured Information Standards (OASIS)</a> 维护，它既是 OASIS 标准也是 <a href="http://www.iso.org">ISO (International Organization for Standardization)</a> 标准。</li>
<li><strong><a href="http://www.schematron.com/">Schematron</a></strong> －－ 基于规则的 XML 模式语言。相对于 DTD、WXS 和 RNG 是用于表示内容模式的结构而言，Schematron 的设计是为了实施难以或不能通过其他模式语言表示的个别规则。Schematron 是为了补充以结构化模式语言（例如 aforementioned）编写的模式。Schematron 正在成为一项 ISO 标准。</li>
            </ul>
                <p>
以前的 JAXP 版本支持作为 XML 解析器的功能的验证，要么通过 {@link javax.xml.parsers.SAXParser} 实例，要么通过 {@link javax.xml.parsers.DocumentBuilder} 实例来表示。
        </p>
        <p>
		    JAXP 验证 API 从 XML 文档解析中分离出实例文档的验证。这具有几种优点，一些原因包括：
</p>
		    <ul>
		        <li><strong>支持额外的模式语言。</strong> 从 JDK 1.5 开始，两种最流行的 JAXP 解析器实现（Crimson 和 Xerces）仅支持可用的 XML 模式语言的子集。Validation API 提供了标准的机制，应用程序通过此机制可利用支持额外模式语言的规范验证库。</li>
		        <li><strong>简单的 XML 实例与模式的运行时耦合。</strong> 指定要用于通过 JAXP 解析器验证的模式位置可能易于混淆。Validation API 使此过程变得简单（参见以下<a href="#example-1">示例</a>）。</li>
          </ul>
			<p>
<a name="example-1"><strong>用例</strong>。</a>以下示例演示了通过 Validation API 验证 XML 文档（为了方便阅读，此例未显示某些异常处理）：
</p>
            <pre>
            
    // parse an XML document into a DOM tree
    DocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();
    Document document = parser.parse(new File(&quot;instance.xml&quot;));

    // create a SchemaFactory capable of understanding WXS schemas
    SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);

    // load a WXS schema, represented by a Schema instance
    Source schemaFile = new StreamSource(new File(&quot;mySchema.xsd&quot;));
    Schema schema = factory.newSchema(schemaFile);

    // create a Validator instance, which can be used to validate an instance document
    Validator validator = schema.newValidator();

    // validate the DOM tree
    try {
        validator.validate(new DOMSource(document));
    } catch (SAXException e) {
        // instance document is invalid!
    }
</pre>
			<p>
		    JAXP 解析 API 已经与验证 API 进行了集成。应用程序可以通过验证 API 创建 {@link javax.xml.validation.Schema}，并通过使用 {@link javax.xml.parsers.DocumentBuilderFactory#setSchema(Schema)} 和 {@link javax.xml.parsers.SAXParserFactory#setSchema(Schema)} 方法将其与 {@link javax.xml.parsers.DocumentBuilderFactory} 或 {@link javax.xml.parsers.SAXParserFactory} 实例进行关联。<strong>您不能</strong>既设置模式，又调用解析器工厂上的 <code>setValidating(true)</code>。前者的技术将导致解析器使用新的验证 API，后者将导致解析器使用它们自己的内部验证工具。<strong>同时调整这两个选项将导致冗余行为或错误条件。</strong>
        </p>
<!-- END DATA -->
