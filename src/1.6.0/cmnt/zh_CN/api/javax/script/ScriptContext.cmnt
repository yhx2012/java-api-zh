<!-- BEGIN KEY -->
public interface javax.script.ScriptContext
<!-- END KEY -->
<!-- BEGIN DATA -->
该接口的实现类被用来连接 Script Engines 和宿主应用程序中的对象（如有范围的 Bindings）。每个范围都是一个指定属性集，这些属性的值可以使用 <code>ScriptContext</code> 方法设置和获取。ScriptContext 还公开可由 ScriptEngine 用于输入和输出的 Reader 和 Writer。

@author Mike Grogan
@version 1.0
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.script.ScriptContext.ENGINE_SCOPE
<!-- END KEY -->
<!-- BEGIN DATA -->
EngineScope 属性在单个 <code>ScriptEngine</code> 的生存期是可见的，并为每个引擎维护一个属性集。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.script.ScriptContext.GLOBAL_SCOPE
<!-- END KEY -->
<!-- BEGIN DATA -->
GlobalScope 属性对于同一 ScriptEngineFactory 创建的所有引擎都是可见的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.ScriptContext.setBindings(Bindings bindings, int scope)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>Bindings</code> 实例与此 <code>ScriptContext</code> 中的特定范围关联。<code>getAttribute</code> 和 <code>setAttribute</code> 方法的调用必须映射到指定范围的 <code>Bindings</code> 的 <code>get</code> 和 <code>put</code> 方法。

@param  bindings 与给定范围关联的 <code>Bindings</code>
@param scope 范围

@throws IllegalArgumentException 如果没有为此类型 ScriptContext 中的指定范围值定义 <code>Bindings</code>。
@throws NullPointerException 如果 scope 的值为 <code>ENGINE_SCOPE</code> 并且指定的 <code>Bindings</code> 为 null。


<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.script.Bindings javax.script.ScriptContext.getBindings(int scope)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 <code>ScriptContext</code> 中的给定范围关联的 <code>Bindings</code>。

@return 关联的 <code>Bindings</code>。如果尚未设置，则返回 <code>null</code>。

@throws IllegalArgumentException 如果没有为此类型的 <code>ScriptContext</code> 中的指定范围值定义 <code>Bindings</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.ScriptContext.setAttribute(String name, Object value, int scope)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置给定范围中某一属性的值。

@param name 要设置的属性的名称
@param value 属性值
@param scope 属性的设置范围

@throws IllegalArgumentException 如果 name 为空，或者 scope 无效。
@throws NullPointerException 如果 name 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.ScriptContext.getAttribute(String name, int scope)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取给定范围中某一属性的值。

@param name 要获取的属性名称。
@param scope 将在其中获取属性的范围。
@return 属性值。返回 <code>null</code> 表示 name 不存在于给定范围中。

@throws IllegalArgumentException 如果 name 为空，或者 scope 的值无效。
@throws NullPointerException 如果 name 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.ScriptContext.removeAttribute(String name, int scope)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除给定范围中的某一属性。

@param name 要移除的属性的名称
@param scope 移除属性的范围

@return 移除的值。
@throws IllegalArgumentException 如果 name 为空，或者 scope 无效。
@throws NullPointerException 如果 name 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.ScriptContext.getAttribute(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取范围中按搜索顺序最早出现的具有给定名称的属性的值。搜索顺序由范围参数的数值确定（从最小的范围值开始）。

@param name 要获取的属性的名称。
@return 具有给定名称的属性的值，该属性位于定义它的最小范围中。如果任何范围中都不存在具有该名称的属性，则返回 null。
@throws NullPointerException 如果 name 为 null。
@throws IllegalArgumentException 如果 name 为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.script.ScriptContext.getAttributesScope(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取定义了某个属性的最小范围。
@param name 属性的名称。
@return 最小范围。如果在任何范围内都没有定义具有给定名称的属性，则返回 -1。
@throws NullPointerException 如果 name 为 null。
@throws IllegalArgumentException 如果 name 为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Writer javax.script.ScriptContext.getWriter()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回脚本的 <code>Writer</code>，以便在显示输出时使用。

@return <code>Writer</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Writer javax.script.ScriptContext.getErrorWriter()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用来显示错误输出的 <code>Writer</code>。

@return <code>Writer</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.ScriptContext.setWriter(Writer writer)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置脚本的 <code>Writer</code>，以便在显示输出时使用。

@param writer 新的 <code>Writer</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.ScriptContext.setErrorWriter(Writer writer)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用来显示错误输出的 <code>Writer</code>。

@param writer <code>Writer</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Reader javax.script.ScriptContext.getReader()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回脚本用来读取输入的 <code>Reader</code>。

@return <code>Reader</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.ScriptContext.setReader(Reader reader)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置脚本的 <code>Reader</code>，以读取输入。
@param reader 新的 <code>Reader</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.lang.Integer> javax.script.ScriptContext.getScopes()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 ScriptContext 中所有有效范围值的不可变 <code>List</code>。

@return 范围值列表

<!-- END DATA -->
