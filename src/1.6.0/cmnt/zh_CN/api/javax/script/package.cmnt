<!-- BEGIN KEY -->
javax.script
<!-- END KEY -->
<!-- BEGIN DATA -->

<p>脚本 API 由定义 Java <font size=1><sup>TM</sup></font> Scripting Engines 的接口和类组成，并为它们在 Java 应用程序中的使用提供框架。此 API 供那些希望在其 Java 应用程序中执行用脚本语言编写的程序的应用程序编程人员使用。脚本语言程序通常由应用程序的终端用户提供。 
</p>
<p><code>javax.script</code> 包的主要功能有： 
</p>
<ol>
	<li><p><b>脚本执行</b>：脚本是用作脚本引擎所执行程序的源的字符流。脚本执行使用 {@link javax.script.ScriptEngine ScriptEngine} 的 {@link javax.script.ScriptEngine#eval eval} 方法和 {@link javax.script.Invocable Invocable} 接口的方法。 
	</p>
	<li><p><b>绑定</b>：此功能允许将 Java 对象作为指定变量公开给脚本程序。{@link javax.script.Bindings Bindings} 和 {@link javax.script.ScriptContext ScriptContext} 类用于此目的。 
	</p>
	<li><p><b>编译</b>：此功能允许反复存储和执行脚本引擎前端所生成的中间代码。这有利于多次执行相同脚本的应用程序。引擎的前端只需要对每个脚本执行一次，而不是每次脚本执行都执行一次，因此这些应用程序可以获得高效率。注意，此功能是可选的，脚本引擎可以选择不实现它。调用者需要使用 <I>instanceof</I> 来检查 {@link javax.script.Compilable Compilable} 接口的可用性。 
	</p>
	<li><p><b>调用</b>：此功能允许重用脚本引擎前端所生成的中间代码。编译功能允许重执行中间代码所表示的整个脚本，而调用功能允许重执行脚本中的个别程序/方法。因为对于编译而言，并非所有的脚本引擎都需要提供此功能。调用者必须检查 {@link javax.script.Invocable Invocable} 的可用性。 
	</p>
	<li><p><b>脚本引擎发现和元数据</b>：为脚本 API 编写的应用程序可能对脚本引擎有特定的要求。一些可能需要特定的脚本语言和/或版本，而另一些可能需要特定的实现引擎和/或版本。脚本引擎是以指定方式打包的，从而可以在运行时被发现，并可以查询属性。Engine 发现机制基于 <b>Jar 文件规范</b>中描述的 Service 发现机制。脚本引擎实现类打包在 jar 文件中，这些文件包含一个名为 <b>META-INF/services/javax.script.ScriptEngineFactory</b> 的文本资源。此资源必须为打包在 jar 文件中的每个 {@link javax.script.ScriptEngineFactory ScriptEngineFactory} 包含一个行。{@link javax.script.ScriptEngineManager ScriptEngineManager} 包括 {@link javax.script.ScriptEngineManager#getEngineFactories getEngineFactories} 方法，该方法用于获取所有使用此机制发现的 {@link javax.script.ScriptEngineFactory ScriptEngineFactory} 实例。<code>ScriptEngineFactory</code> 拥有用于查询关于脚本引擎的属性的方法。
	</p>
</ol>

@since 1.6


<!-- END DATA -->
