<!-- BEGIN KEY -->
public class javax.script.SimpleScriptContext extends java.lang.Object implements javax.script.ScriptContext
<!-- END KEY -->
<!-- BEGIN DATA -->
ScriptContext 的简单实现。

@author Mike Grogan
@version 1.0
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.io.Writer javax.script.SimpleScriptContext.writer
<!-- END KEY -->
<!-- BEGIN DATA -->
此字段是用于脚本输出的 writer。默认情况下，使用基于 <code>System.out</code> 的 <code>PrintWriter</code>。可使用存取方法 getWriter 和 setWriter 来管理此字段。
@see java.lang.System#out
@see java.io.PrintWriter

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.io.Writer javax.script.SimpleScriptContext.errorWriter
<!-- END KEY -->
<!-- BEGIN DATA -->
此字段是用于脚本输出错误的 writer。默认情况下，使用基于 <code>System.err</code> 的 <code>PrintWriter</code>。可使用存取方法 getErrorWriter 和 setErrorWriter 来管理此字段。
@see java.lang.System#err
@see java.io.PrintWriter

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.io.Reader javax.script.SimpleScriptContext.reader
<!-- END KEY -->
<!-- BEGIN DATA -->
此字段是用于脚本输入的 reader。默认情况下，此 reader 使用基于 <code>System.in</code> 的 <code>InputStreamReader</code> 和默认字符集。可使用存取方法 getReader 和 setReader 来管理此字段。
@see java.lang.System#in
@see java.io.InputStreamReader

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.script.Bindings javax.script.SimpleScriptContext.engineScope
<!-- END KEY -->
<!-- BEGIN DATA -->
此字段是引擎范围 bindings。默认情况下，使用 <code>SimpleBindings</code>。可使用存取方法 setBindings 和 getBindings 来管理此字段。
@see SimpleBindings

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.script.Bindings javax.script.SimpleScriptContext.globalScope
<!-- END KEY -->
<!-- BEGIN DATA -->
此字段是全局范围 bindings。默认情况下，使用 null 值（表示没有全局范围）。可使用存取方法 setBindings 和 getBindings 来管理此字段。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.SimpleScriptContext.setBindings(Bindings bindings, int scope)
<!-- END KEY -->
<!-- BEGIN DATA -->
针对给定范围设置属性的 <code>Bindings</code>。如果范围值为 <code>ENGINE_SCOPE</code>，则使用给定 <code>Bindings</code> 替代 <code>engineScope</code> 字段。如果范围值为 <code>GLOBAL_SCOPE</code>，则使用给定 <code>Bindings</code> 替换 <code>globalScope</code> 字段。

@param bindings 要设置的属性的 <code>Bindings</code>。
@param scope 范围值，将在该范围中设置属性。

@throws IllegalArgumentException 如果 scope 无效。
@throws NullPointerException 如果 scope 的值为 <code>ENGINE_SCOPE</code> 并且指定的 <code>Bindings</code> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.SimpleScriptContext.getAttribute(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取范围中按搜索顺序最早出现的具有给定名称的属性的值。搜索顺序由范围参数的数值确定（从最小的范围值开始）。

@param name 要获取的属性的名称。
@return 具有给定名称的属性的值，该属性位于定义它的最小范围中。如果任何范围中都不存在具有该名称的属性，则返回 null。
@throws NullPointerException 如果 name 为 null。
@throws IllegalArgumentException 如果 name 为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.SimpleScriptContext.getAttribute(String name, int scope)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取给定范围中某一属性的值。

@param name 要获取的属性名称。
@param scope 将在其中获取属性的范围。
@return 属性值。返回 <code>null</code> 表示 name 不存在于给定范围中。

@throws IllegalArgumentException 如果 name 为空，或者 scope 的值无效。
@throws NullPointerException 如果 name 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.SimpleScriptContext.removeAttribute(String name, int scope)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除给定范围中的某一属性。

@param name 要移除的属性的名称
@param scope 移除属性的范围

@return 移除的值。
@throws IllegalArgumentException 如果 name 为空，或者 scope 无效。
@throws NullPointerException 如果 name 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.SimpleScriptContext.setAttribute(String name, Object value, int scope)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置给定范围中某一属性的值。

@param name 要设置的属性的名称
@param value 属性值
@param scope 属性的设置范围

@throws IllegalArgumentException 如果 name 为空，或者 scope 无效。
@throws NullPointerException 如果 name 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Writer javax.script.SimpleScriptContext.getWriter()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Reader javax.script.SimpleScriptContext.getReader()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.SimpleScriptContext.setReader(Reader reader)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.SimpleScriptContext.setWriter(Writer writer)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Writer javax.script.SimpleScriptContext.getErrorWriter()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.SimpleScriptContext.setErrorWriter(Writer writer)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.script.SimpleScriptContext.getAttributesScope(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取用来定义属性的最小范围。
@param name 属性的名称。
@return 最小范围。如果在任何范围内都没有定义具有给定名称的属性，则返回 -1。
@throws NullPointerException 如果 name 为 null。
@throws IllegalArgumentException 如果 name 为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.script.Bindings javax.script.SimpleScriptContext.getBindings(int scope)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果指定范围为 <code>ENGINE_SCOPE</code>，则返回 <code>engineScope</code> 字段的值。如果指定范围为 <code>GLOBAL_SCOPE</code>，则返回 <code>globalScope</code> 字段的值。

@param scope 指定范围
@return <code>engineScope</code> 或 <code>globalScope</code> 字段的值。
@throws IllegalArgumentException 如果 scope 的值无效。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.lang.Integer> javax.script.SimpleScriptContext.getScopes()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
<!-- END DATA -->
