<!-- BEGIN KEY -->
public abstract class javax.script.AbstractScriptEngine extends java.lang.Object implements javax.script.ScriptEngine
<!-- END KEY -->
<!-- BEGIN DATA -->
为几个 <code>eval</code> 方法的变体提供标准实现。<br><br> <code><b>eval(Reader)</b></code><p><code><b>eval(String)</b></code><p>
<code><b>eval(String, Bindings)</b></code><p><code><b>eval(Reader, Bindings)</b></code> <br><br> 是使用带有 <code>SimpleScriptContext</code> 的抽象方法 <br><br> <code><b>eval(Reader,ScriptContext)</b></code> 或 <code><b>eval(String, ScriptContext)</b></code> <br><br> 实现的。<br><br> <code>SimpleScriptContext</code> 被用作 <code>AbstractScriptEngine</code> 的默认 <code>ScriptContext</code>。

@author Mike Grogan
@version 1.0
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.script.ScriptContext javax.script.AbstractScriptEngine.context
<!-- END KEY -->
<!-- BEGIN DATA -->
此 <code>AbstractScriptEngine</code> 的默认 <code>ScriptContext</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.script.AbstractScriptEngine()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 AbstractScriptEngine 实例，使用 <code>SimpleScriptContext</code> 作为其默认 <code>ScriptContext</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.script.AbstractScriptEngine(Bindings n)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新实例，使用指定 <code>Bindings</code> 作为受保护 <code>context</code> 字段中的 <code>ENGINE_SCOPE</code> <code>Bindings</code>。

@param n 指定的 <code>Bindings</code>。
@throws NullPointerException 如果 n 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.AbstractScriptEngine.setContext(ScriptContext ctxt)
<!-- END KEY -->
<!-- BEGIN DATA -->
将受保护 <code>context</code> 字段的值设置为指定的 <code>ScriptContext</code>。

@param ctxt 指定的 <code>ScriptContext</code>。
@throws NullPointerException 如果 ctxt 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.script.ScriptContext javax.script.AbstractScriptEngine.getContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回受保护 <code>context</code> 字段的值。

@return 受保护 <code>context</code> 字段的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.script.Bindings javax.script.AbstractScriptEngine.getBindings(int scope)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回受保护 <code>context</code> 字段中具有指定范围值的 <code>Bindings</code>。

@param scope 指定的范围

@return 相应的 <code>Bindings</code>。

@throws IllegalArgumentException 如果范围值对于受保护 <code>context</code> 字段的类型无效。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.AbstractScriptEngine.setBindings(Bindings bindings, int scope)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 <code>context</code> 字段中的相应范围值设置 <code>Bindings</code>。

@param bindings 指定的 <code>Bindings</code>。
@param scope 指定的范围。

@throws IllegalArgumentException 如果范围值对于 <code>context</code> 字段的类型无效。
@throws NullPointerException 如果 bindings 为 null 且 scope 为 <code>ScriptContext.ENGINE_SCOPE</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.AbstractScriptEngine.put(String key, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用受保护 <code>context</code> 字段的 <code>ENGINE_SCOPE</code> <code>Bindings</code> 中的指定键设置指定的值。

@param key 指定的键。
@param value 指定的值。

@throws NullPointerException 如果 key 为 null。
@throws IllegalArgumentException 如果 key 为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.AbstractScriptEngine.get(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取受保护 <code>context</code> 字段的 <code>ENGINE_SCOPE</code> 中指定键的值。

@return 指定键的值。

@throws NullPointerException 如果 key 为 null。
@throws IllegalArgumentException 如果 key 为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.AbstractScriptEngine.eval(Reader reader, Bindings bindings) throws javax.script.ScriptException
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>eval(Reader, Bindings)</code> 调用抽象 <code>eval(Reader, ScriptContext)</code> 方法，并传递一个 <code>ScriptContext</code> 给它，对于 <code>ENGINE_SCOPE</code> 以外的范围，该 <code>ScriptContext</code> 的 Reader、Writer 和 Bindings 等同于受保护 <code>context</code> 字段的 Reader、Writer 和 Bindings。使用指定的 <code>Bindings</code>，而不是

 <code>context</code> 字段的 <code>ENGINE_SCOPE</code> <code>Bindings</code>。

@param reader 包含脚本的源的 <code>Reader</code>。
@param bindings 执行脚本时用于 <code>ENGINE_SCOPE</code> 的 <code>Bindings</code>。

@return <code>eval(Reader, ScriptContext)</code> 的返回值
@throws ScriptException 如果脚本发生错误。
@throws NullPointerException 如果任何参数为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.AbstractScriptEngine.eval(String script, Bindings bindings) throws javax.script.ScriptException
<!-- END KEY -->
<!-- BEGIN DATA -->
除使用抽象 <code>eval(String, ScriptContext)</code> 之外，与 <code>eval(Reader, Bindings)</code> 相同。

@param script 包含脚本的源的 <code>String</code>。

@param bindings 执行脚本时用作 <code>ENGINE_SCOPE</code> 的 <code>Bindings</code>。

@return <code>eval(String, ScriptContext)</code> 的返回值
@throws ScriptException 如果脚本发生错误。
@throws NullPointerException 如果任何参数为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.AbstractScriptEngine.eval(Reader reader) throws javax.script.ScriptException
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>eval(Reader)</code> 调用抽象 <code>eval(Reader, ScriptContext)</code>，并传递 <code>context</code> 字段的值给它。

@param reader 包含脚本的源的 <code>Reader</code>。
@return <code>eval(Reader, ScriptContext)</code> 的返回值
@throws ScriptException 如果脚本发生错误。
@throws NullPointerException 如果任何参数为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.AbstractScriptEngine.eval(String script) throws javax.script.ScriptException
<!-- END KEY -->
<!-- BEGIN DATA -->
除使用抽象 <code>eval(String, ScriptContext)</code> 之外，与 <code>eval(Reader)</code> 相同。

@param script 包含脚本的源的 <code>String</code>。
@return <code>eval(String, ScriptContext)</code> 的返回值
@throws ScriptException 如果脚本发生错误。
@throws NullPointerException 如果任何参数为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.script.ScriptContext javax.script.AbstractScriptEngine.getScriptContext(Bindings nn)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>SimpleScriptContext</code>。该 <code>SimpleScriptContext</code>： <br><br>
 <ul>
<li>将指定的 <code>Bindings</code> 用于其 <code>ENGINE_SCOPE</code>
 </li>
<li>将抽象 <code>getGlobalScope</code> 方法返回的 <code>Bindings</code> 用作其 <code>GLOBAL_SCOPE</code>
 </li>
<li>使用此 <code>ScriptEngine</code> 的默认 <code>ScriptContext</code> 中的 Reader 和 Writer
 </li>
 </ul>
<br><br> 此方法返回的 <code>SimpleScriptContext</code> 被用来实现使用抽象 <code>eval(Reader,Bindings)</code> 和 <code>eval(String,Bindings)</code> 的 eval 方法。

@param nn 用于 <code>ENGINE_SCOPE</code> 的 Bindings
@return <code>SimpleScriptContext</code>

<!-- END DATA -->
