<!-- BEGIN KEY -->
public abstract class javax.script.CompiledScript extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
存储编译结果的类扩展自此类。状态能够以 Java 类、Java 类文件或脚本语言操作码的形式存储。脚本可以反复执行而无需重新解析。<br><br> 每个 <code>CompiledScript</code> 都与一个 <code>ScriptEngine</code> 关联，调用 <code>CompiledScript</code> 的 <code>eval</code> 方法将导致 <code>ScriptEngine</code> 执行脚本。执行 <code>CompiledScript</code> 引起的 <code>ScriptEngine</code> 状态的更改在随后引擎执行脚本期间可见。

@author Mike Grogan
@version 1.0
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.Object javax.script.CompiledScript.eval(ScriptContext context) throws javax.script.ScriptException
<!-- END KEY -->
<!-- BEGIN DATA -->
执行存储在此 <code>CompiledScript</code> 对象中的程序。

@param context 一个 <code>ScriptContext</code>，它的使用方式与传递给 <code>ScriptEngine</code> <code>eval</code> 方法的 <code>ScriptContext</code> 相同。

@return 执行脚本所返回的值（如果有）。如果执行脚本没有返回任何值，则应返回 <code>null</code>。

@throws ScriptException 如果发生错误。
@throws NullPointerException 如果 context 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.CompiledScript.eval(Bindings bindings) throws javax.script.ScriptException
<!-- END KEY -->
<!-- BEGIN DATA -->
执行存储在 <code>CompiledScript</code> 对象中的程序，脚本执行期间使用所提供的属性的 <code>Bindings</code> 作为关联 <code>ScriptEngine</code> 的 <code>ENGINE_SCOPE</code>。如果 bindings 为 null，则调用此方法的效果等同于调用 eval(getEngine().getContext())。
<p>. 使用与关联 <code>ScriptEngine</code> 的默认 <code>ScriptContext</code> 关联的 <code>GLOBAL_SCOPE</code> <code>Bindings</code>、<code>Reader</code> 和 <code>Writer</code>。

@param bindings 用于 <code>ENGINE_SCOPE</code> 的属性的 bindings。

@return 执行脚本所返回的值

@throws ScriptException 如果发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.CompiledScript.eval() throws javax.script.ScriptException
<!-- END KEY -->
<!-- BEGIN DATA -->
执行存储在 <code>CompiledScript</code> 对象中的程序。使用关联 <code>ScriptEngine</code> 的默认 <code>ScriptContext</code>。调用此方法的效果等同于调用 eval(getEngine().getContext())。

@return 执行脚本所返回的值

@throws ScriptException 如果发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.script.ScriptEngine javax.script.CompiledScript.getEngine()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用 <code>compile</code> 方法创建了此 <code>CompiledScript</code> 的 <code>ScriptEngine</code>。<code>CompiledScript</code> 将在此引擎中执行。

@return 创建了此 <code>CompiledScript</code> 的 <code>ScriptEngine</code>

<!-- END DATA -->
