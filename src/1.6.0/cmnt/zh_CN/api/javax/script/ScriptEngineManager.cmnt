<!-- BEGIN KEY -->
public class javax.script.ScriptEngineManager extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>ScriptEngineManager</code> 为 <code>ScriptEngine</code> 类实现一个发现和实例化机制，还维护一个键/值对集合来存储所有 Manager 创建的引擎所共享的状态。此类使用<a href="../../../technotes/guides/jar/jar.html#Service%20Provider">服务提供者</a>机制枚举所有的 <code>ScriptEngineFactory</code> 实现。<br><br> <code>ScriptEngineManager</code> 提供了一个方法，可以返回一个所有工厂实现和基于语言名称、文件扩展名和 mime 类型查找工厂的实用方法所组成的数组。
 <p>
键/值对的 <code>Bindings</code>（即由管理器维护的 &quot;Global Scope&quot;）对于 <code>ScriptEngineManager</code> 创建的所有 <code>ScriptEngine</code> 实例都是可用的。<code>Bindings</code> 中的值通常公开于所有脚本中。

@author Mike Grogan
@author A. Sundararajan
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.script.ScriptEngineManager()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果调用者可访问线程上下文 ClassLoader，则调用此构造方法的效果与调用 <code>ScriptEngineManager(Thread.currentThread().getContextClassLoader())</code> 相同。否则，效果与调用 <code>ScriptEngineManager(null)</code> 相同。

@see java.lang.Thread#getContextClassLoader

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.script.ScriptEngineManager(ClassLoader loader)
<!-- END KEY -->
<!-- BEGIN DATA -->
此构造方法使用<a href="../../../technotes/guides/jar/jar.html#Service%20Provider">服务调用者</a>机制加载对于给定 <code>ClassLoader</code> 可见的 <code>ScriptEngineFactory</code> 实现。<br><br>如果 loader 为 <code>null</code>，则加载与平台打包在一起的脚本引擎工厂，以及常用扩展目录（已安装的扩展）中的脚本引擎工厂。 <br><br>

@param loader 用来发现脚本引擎工厂的 ClassLoader。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.ScriptEngineManager.setBindings(Bindings bindings)
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>setBindings</code> 存储 <code>globalScope</code> 字段中的指定 <code>Bindings</code>。ScriptEngineManager 将此 <code>Bindings</code> 设置为由它创建的 <code>ScriptEngine</code> 对象的全局 bindings。

@param bindings 指定的 <code>Bindings</code>
@throws IllegalArgumentException 如果 bindings 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.script.Bindings javax.script.ScriptEngineManager.getBindings()
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>getBindings</code> 返回 <code>globalScope</code> 字段的值。ScriptEngineManager 将此 <code>Bindings</code> 设置为由它创建的 <code>ScriptEngine</code> 对象的全局 bindings。

@return globalScope 字段。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.ScriptEngineManager.put(String key, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 Global Scope 中指定的键/值对。
@param key 要设置的键
@param value 要设置的值。
@throws NullPointerException 如果 key 为 null。
@throws IllegalArgumentException 如果 key 为空字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.ScriptEngineManager.get(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 Global Scope 中指定键的值。
@param key 将返回其值的键。
@return 指定键的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.script.ScriptEngine javax.script.ScriptEngineManager.getEngineByName(String shortName)
<!-- END KEY -->
<!-- BEGIN DATA -->
查找并创建一个给定名称的 <code>ScriptEngine</code>。该算法首先查找一个 <code>ScriptEngineFactory</code>，该 <code>ScriptEngineFactory</code> 已经针对给定名称使用 <code>registerEngineName</code> 方法注册为处理程序。<br><br> 如果没有找到这样的 ScriptEngineFactory，则搜索构造方法存储的 <code>ScriptEngineFactory</code> 实例数组，以获得具有指定名称的 ScriptEngineFactory。如果通过这两种方法之一找到了一个 <code>ScriptEngineFactory</code>，则用它来创建 <code>ScriptEngine</code> 实例。
@param shortName <code>ScriptEngine</code> 实现的短名称，由其 <code>ScriptEngineFactory</code> 的 <code>getNames</code> 方法返回。
@return 搜索到的工厂所创建的 <code>ScriptEngine</code>。如果没有找到这样的工厂，则返回 null。<code>ScriptEngineManager</code> 将它自己的 <code>globalScope</code> <code>Bindings</code> 设置为新建 <code>ScriptEngine</code> 的 <code>GLOBAL_SCOPE</code> <code>Bindings</code>。
@throws NullPointerException 如果 shortName 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.script.ScriptEngine javax.script.ScriptEngineManager.getEngineByExtension(String extension)
<!-- END KEY -->
<!-- BEGIN DATA -->
查找并创建一个给定扩展的 <code>ScriptEngine</code>。使用 <code>getEngineByName</code> 所使用的算法，不同之处在于搜索从查找已使用 <code>registerEngineExtension</code> 注册以处理给定扩展的 <code>ScriptEngineFactory</code> 开始。
@param extension 给定扩展
@return 用来处理具有此扩展的引擎。如果没有找到这样的引擎，则返回 <code>null</code>。
@throws NullPointerException 如果 extension 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.script.ScriptEngine javax.script.ScriptEngineManager.getEngineByMimeType(String mimeType)
<!-- END KEY -->
<!-- BEGIN DATA -->
查找并创建一个给定 mime 类型的 <code>ScriptEngine</code>。使用 <code>getEngineByName</code> 所使用的算法，不同之处在于搜索从查找已使用 <code>registerEngineMimeType</code> 注册以处理给定 mime 类型的 <code>ScriptEngineFactory</code> 开始。
@param mimeType 给定 mime 类型
@return 用来处理具有此 mime 类型的脚本的引擎。如果没有找到这样的引擎，则返回 <code>null</code>。
@throws NullPointerException 如果 mimeType 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<javax.script.ScriptEngineFactory> javax.script.ScriptEngineManager.getEngineFactories()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个数组，该数组的元素是发现机制找到的所有 <code>ScriptEngineFactory</code> 类的实例。
@return 所有已发现 <code>ScriptEngineFactory</code> 所组成的列表。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.ScriptEngineManager.registerEngineName(String name, ScriptEngineFactory factory)
<!-- END KEY -->
<!-- BEGIN DATA -->
注册一个 <code>ScriptEngineFactory</code> 来处理语言名称。重写所有使用发现机制找到的这类关联。
@param name 要与 <code>ScriptEngineFactory</code> 关联的名称。
@param factory 要与给定名称关联的类。
@throws NullPointerException 如果任何参数为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.ScriptEngineManager.registerEngineMimeType(String type, ScriptEngineFactory factory)
<!-- END KEY -->
<!-- BEGIN DATA -->
注册一个 <code>ScriptEngineFactory</code> 来处理 mime 类型。重写所有使用发现机制找到的这类关联。

@param type 要与 <code>ScriptEngineFactory</code> 关联的 mime 类型。

@param factory 要与给定 mime 类型关联的类。
@throws NullPointerException 如果任何参数为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.ScriptEngineManager.registerEngineExtension(String extension, ScriptEngineFactory factory)
<!-- END KEY -->
<!-- BEGIN DATA -->
注册一个 <code>ScriptEngineFactory</code> 来处理扩展。重写所有使用发现机制找到的这类关联。

@param extension 要与 <code>ScriptEngineFactory</code> 关联的扩展类型。
@param factory 要与给定扩展关联的类。
@throws NullPointerException 如果任何参数为 null。

<!-- END DATA -->
