<!-- BEGIN KEY -->
public class javax.management.Query extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>构造查询对象约束。提供的 static 方法返回可用来列出和枚举 MBean 的查询表达式。每种约束构造方法仅允许使用适当的类型作为参数。如下例所述，混合调用可以构造约束的随意嵌套：</p>

 <pre>
 QueryExp exp = Query.and(Query.gt(Query.attr(&quot;age&quot;),Query.value(5)),
                          Query.match(Query.attr(&quot;name&quot;),
                                      Query.value(&quot;Smith&quot;)));
 </pre>

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.management.Query.GT
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 {@link Query#gt} 查询的代码。此方法主要用于序列化形式的查询。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.management.Query.LT
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 {@link Query#lt} 查询的代码。此方法主要用于序列化形式的查询。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.management.Query.GE
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 {@link Query#geq} 查询的代码。此方法主要用于序列化形式的查询。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.management.Query.LE
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 {@link Query#leq} 查询的代码。此方法主要用于序列化形式的查询。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.management.Query.EQ
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 {@link Query#eq} 查询的代码。此方法主要用于序列化形式的查询。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.management.Query.PLUS
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 {@link Query#plus} 表达式的代码。此方法主要用于序列化形式的查询。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.management.Query.MINUS
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 {@link Query#minus} 表达式的代码。此方法主要用于序列化形式的查询。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.management.Query.TIMES
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 {@link Query#times} 表达式的代码。此方法主要用于序列化形式的查询。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.management.Query.DIV
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 {@link Query#div} 表达式的代码。此方法主要用于序列化形式的查询。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.Query()
<!-- END KEY -->
<!-- BEGIN DATA -->
基本构造方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.QueryExp javax.management.Query.and(QueryExp q1, QueryExp q2)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个查询表达式，它是其他两个查询表达式的&ldquo;与&rdquo;。

@param q1 查询表达式。
@param q2 另一个查询表达式。

@return  两个参数的&ldquo;与&rdquo;。返回对象将被序列化为非公共类 {@link <a href="../../serialized-form.html#javax.management.AndQueryExp">javax.management.AndQueryExp</a>} 的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.QueryExp javax.management.Query.or(QueryExp q1, QueryExp q2)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个查询表达式，它是其他两个查询表达式的&ldquo;或&rdquo;。

@param q1 查询表达式。
@param q2 另一个查询表达式。

@return  两个参数的&ldquo;或&rdquo;。返回对象将被序列化为非公共类 {@link <a href="../../serialized-form.html#javax.management.OrQueryExp">javax.management.OrQueryExp</a>} 的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.QueryExp javax.management.Query.gt(ValueExp v1, ValueExp v2)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个查询表达式，表示基于两个值的&ldquo;大于&rdquo;约束条件。

@param v1 值表达式。
@param v2 另一个值表达式。

@return  基于参数的&ldquo;大于&rdquo;约束条件。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.BinaryRelQueryExp">javax.management.BinaryRelQueryExp</a>} 的实例，其中 {@code relOp} 等于 {@link #GT}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.QueryExp javax.management.Query.geq(ValueExp v1, ValueExp v2)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个查询表达式，表示基于两个值的&ldquo;大于或等于&rdquo;约束条件。

@param v1 值表达式。
@param v2 另一个值表达式。

@return  基于参数的&ldquo;大于或等于&rdquo;约束条件。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.BinaryRelQueryExp">javax.management.BinaryRelQueryExp</a>} 的实例，其中 {@code relOp} 等于 {@link #GE}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.QueryExp javax.management.Query.leq(ValueExp v1, ValueExp v2)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个查询表达式，表示基于两个值的&ldquo;小于或等于&rdquo;约束条件。

@param v1 值表达式。
@param v2 另一个值表达式。

@return  基于参数的&ldquo;小于或等于&rdquo;约束条件。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.BinaryRelQueryExp">javax.management.BinaryRelQueryExp</a>} 的实例，其中 {@code relOp} 等于 {@link #LE}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.QueryExp javax.management.Query.lt(ValueExp v1, ValueExp v2)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个查询表达式，表示 基于两个值的&ldquo;小于&rdquo;约束条件。

@param v1 值表达式。
@param v2 另一个值表达式。

@return  基于参数的&ldquo;小于&rdquo;约束条件。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.BinaryRelQueryExp">javax.management.BinaryRelQueryExp</a>} 的实例，其中 {@code relOp} 等于 {@link #LT}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.QueryExp javax.management.Query.eq(ValueExp v1, ValueExp v2)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个查询表达式，表示基于两个值的等于约束条件。

@param v1 值表达式。
@param v2 另一个值表达式。

@return  基于参数的&ldquo;等于&rdquo;约束条件。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.BinaryRelQueryExp">javax.management.BinaryRelQueryExp</a>} 的实例，其中 {@code relOp} 等于 {@link #EQ}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.QueryExp javax.management.Query.between(ValueExp v1, ValueExp v2, ValueExp v3)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个查询表达式，表示一个值在其他两个值之间的约束条件。

@param v1 在 v2 和 v3&ldquo;之间&rdquo;的值表达式。
@param v2 表示约束条件范围的值表达式。
@param v3 表示约束条件范围的值表达式。

@return  v1 在 v2 和 v3 之间的约束条件。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.BetweenQueryExp">javax.management.BetweenQueryExp</a>} 的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.QueryExp javax.management.Query.match(AttributeValueExp a, StringValueExp s)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个查询表达式，表示基于字符串参数的匹配约束条件。匹配的语法与文件 globbing 一致：支持 &quot;<code>?</code>&quot;、&quot;<code>*</code>&quot; 和 &quot;<code>[</code>&quot;，其中的每一项都可以使用 &quot;<code>\</code>&quot; 转义；字符类可以使用 &quot;<code>!</code>&quot; 来否定，使用 &quot;<code>-</code>&quot; 来划定范围。(<code>*</code> 用于任何字符序列，<code>?</code> 用于任意单个字符，<code>[...]</code> 用于字符序列）。例如：与 <code>a*b?c</code> 匹配的将是以字符 <code>a</code> 开头，后跟任意数量的字符，再接 <code>b</code>、任意单个字符，然后接 <code>c</code> 的一个字符串。

@param a 属性表达式
@param s 表示匹配约束条件的字符串值表达式

@return  一个查询表达式，表示基于字符串参数的匹配约束条件。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.MatchQueryExp">javax.management.MatchQueryExp</a>} 的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.AttributeValueExp javax.management.Query.attr(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回新的属性表达式。</p>

<p>针对给定的 <code>objectName</code> 计算此表达式，包括执行 {@link MBeanServer#getAttribute MBeanServer.getAttribute（objectName、name）}。</p>

@param name 属性的名称。

@return  指定名称的属性的属性表达式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.AttributeValueExp javax.management.Query.attr(String className, String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回新的限定属性表达式。</p>

<p>针对给定的 <code>objectName</code> 计算此表达式，包括执行 {@link MBeanServer#getObjectInstance MBeanServer.getObjectInstance(objectName)} 和 {@link MBeanServer#getAttribute MBeanServer.getAttribute（objectName、name）}。</p>

@param className 拥有属性的类的名称。
@param name 属性的名称。

@return  指定名称的属性的属性表达式。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.QualifiedAttributeValueExp">javax.management.QualifiedAttributeValueExp</a>} 的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.AttributeValueExp javax.management.Query.classattr()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回一个新的类属性表达式，该表达式可用于任何希望获得 ValueExp 的 Query 调用中。</p>

<p>针对给定的 <code>objectName</code> 计算此表达式，包括执行 {@link MBeanServer#getObjectInstance MBeanServer.getObjectInstance(objectName)}。</p>

@return  类属性表达式。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.ClassAttributeValueExp">javax.management.ClassAttributeValueExp</a>} 的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.QueryExp javax.management.Query.not(QueryExp queryExp)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个与其参数相反的约束条件。

@param queryExp 将要&ldquo;求反&rdquo;的约束条件。

@return  已&ldquo;求反&rdquo;的约束条件。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.NotQueryExp">javax.management.NotQueryExp</a>} 的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.QueryExp javax.management.Query.in(ValueExp val, javax.management.ValueExp[] valueList)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个表达式，限制某个值为显式列表中的一项。
      
@param val 要限制的值。
@param valueList ValueExp 数组。

@return  一个表示约束条件的 QueryExp。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.InQueryExp">javax.management.InQueryExp</a>} 的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.StringValueExp javax.management.Query.value(String val)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个新的字符串表达式。

@param val 字符串值。

@return  包含字符串参数的 ValueExp 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.ValueExp javax.management.Query.value(Number val)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个数值表达式，该表达式可用于任何希望获得 ValueExp 的 Query 调用中。

@param val Number 的实例。

@return  包含参数的 ValueExp 对象。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.NumericValueExp">javax.management.NumericValueExp</a>} 的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.ValueExp javax.management.Query.value(int val)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个数值表达式，该表达式可用于任何希望获得 ValueExp 的 Query 调用中。

@param val 一个 int 值。

@return  包含参数的 ValueExp 对象。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.NumericValueExp">javax.management.NumericValueExp</a>} 的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.ValueExp javax.management.Query.value(long val)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个数值表达式，该表达式可用于任何希望获得 ValueExp 的 Query 调用中。

@param val 一个 long 值。

@return  包含参数的 ValueExp 对象。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.NumericValueExp">javax.management.NumericValueExp</a>} 的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.ValueExp javax.management.Query.value(float val)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个数值表达式，该表达式可用于任何希望获得 ValueExp 的 Query 调用中。

@param val 一个 float 值。

@return  包含参数的 ValueExp 对象。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.NumericValueExp">javax.management.NumericValueExp</a>} 的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.ValueExp javax.management.Query.value(double val)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个数值表达式，该表达式可用于任何希望获得 ValueExp 的 Query 调用中。

@param val 一个 double 值。

@return  包含参数的 ValueExp 对象。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.NumericValueExp">javax.management.NumericValueExp</a>} 的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.ValueExp javax.management.Query.value(boolean val)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 boolean 值表达式，该表达式可用于任何希望获得 ValueExp 的 Query 调用中。

@param val 一个 boolean 值。

@return  包含参数的 ValueExp 对象。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.BooleanValueExp">javax.management.BooleanValueExp</a>} 的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.ValueExp javax.management.Query.plus(ValueExp value1, ValueExp value2)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个二进制表达式，表示两个数值的和，或者两个字符串值的串接。

@param value1 第一个 '+' 操作数。
@param value2 第二个 '+' 操作数。

@return 表示两个参数的和或者它们的串接的 ValueExp。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.BinaryOpValueExp">javax.management.BinaryOpValueExp</a>} 的实例，其中 {@code op} 等于 {@link #PLUS}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.ValueExp javax.management.Query.times(ValueExp value1, ValueExp value2)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个二进制表达式，表示两个数值的乘积。

@param value1 第一个 '*' 操作数。
@param value2 第二个 '*' 操作数。

@return  表示乘积的 ValueExp。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.BinaryOpValueExp">javax.management.BinaryOpValueExp</a>} 的实例，其中 {@code op} 等于 {@link #TIMES}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.ValueExp javax.management.Query.minus(ValueExp value1, ValueExp value2)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个二进制表达式，表示两个数值的差。

@param value1 第一个 '-' 操作数。
@param value2 第二个 '-' 操作数。

@return  表示两个参数的差的 ValueExp。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.BinaryOpValueExp">javax.management.BinaryOpValueExp</a>} 的实例，其中 {@code op} 等于 {@link #MINUS}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.ValueExp javax.management.Query.div(ValueExp value1, ValueExp value2)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个二进制表达式，表示两个数值的商。

@param value1 第一个 '/' 操作数。
@param value2 第二个 '/' 操作数。

@return  表示两个参数的商的 ValueExp。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.BinaryOpValueExp">javax.management.BinaryOpValueExp</a>} 的实例，其中 {@code op} 等于 {@link #DIV}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.QueryExp javax.management.Query.initialSubString(AttributeValueExp a, StringValueExp s)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个查询表达式，表示基于字符串参数的约束条件。该值必须以给定的字面值字符串值开头。
      
@param a 属性表达式。
@param s 表示以字符串值开头的字符串值表达式。      

@return  a 与 s 匹配这一约束条件。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.MatchQueryExp">javax.management.MatchQueryExp</a>} 的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.QueryExp javax.management.Query.anySubString(AttributeValueExp a, StringValueExp s)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个查询表达式，表示基于字符串参数的约束条件。该值必须包含给定的字符串值。

@param a 属性表达式。
@param s 表示子字符串的字符串值表达式。

@return  a 与 s 匹配这一约束条件。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.MatchQueryExp">javax.management.MatchQueryExp</a>} 的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.QueryExp javax.management.Query.finalSubString(AttributeValueExp a, StringValueExp s)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个查询表达式，表示基于字符串参数的约束条件。该值必须包含给定的字面值字符串值。

@param a 属性表达式。
@param s 表示以字符串值结束的字符串值表达式。

@return  a 与 s 匹配这一约束条件。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.MatchQueryExp">javax.management.MatchQueryExp</a>} 的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.QueryExp javax.management.Query.isInstanceOf(StringValueExp classNameValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回一个查询表达式，表示基于 MBean 类的继承约束条件。
 <p>示例：要找到作为 {@link NotificationBroadcaster} 实例的 MBean，使用 {@code Query.isInstanceOf(Query.value(NotificationBroadcaster.class.getName()))}。
 </p>
 <p>针对给定的 <code>objectName</code> 计算此表达式，包括执行 {@link MBeanServer#isInstanceOf MBeanServer.isInstanceOf(objectName, ((StringValueExp)classNameValue.apply(objectName)).getValue()}。</p>

 @param classNameValue {@link StringValueExp}，返回所选 MBean 应该是一个实例的类的名称。
 @return 一个查询表达式，表示基于 MBean 类的继承约束条件。返回对象将被序列化为非公共类 {@link <a  href="../../serialized-form.html#javax.management.InstanceOfQueryExp">javax.management.InstanceOfQueryExp</a>} 的实例。
 @since 1.6

<!-- END DATA -->
