<!-- BEGIN KEY -->
public class javax.management.openmbean.CompositeType extends javax.management.openmbean.OpenType
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>CompositeType</code> 类是<i>开放类型</i> 类，它的实例描述了 {@link CompositeData <code>CompositeData</code>} 值的类型。

@version     3.32  06/05/03
@author      Sun Microsystems, Inc.

@since 1.5
@since.unbundled JMX 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.util.TreeMap<java.lang.String, java.lang.String> javax.management.openmbean.CompositeType.nameToDescription
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial 项名称到其描述的有序映射

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.util.TreeMap<java.lang.String, javax.management.openmbean.OpenType<?>> javax.management.openmbean.CompositeType.nameToType
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial 项名称到其开放类型的有序映射

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.CompositeType(String typeName, String description, java.lang.String[] itemNames, java.lang.String[] itemDescriptions, javax.management.openmbean.OpenType[] itemTypes) throws javax.management.openmbean.OpenDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>CompositeType</code> 实例，检查给定参数的有效性。下面描述了每个参数的有效性约束。 
 <p>
注意，三个数组参数（<var>itemNames</var>、<var>itemDescriptions</var> 和 <var>itemTypes</var>）的内容是内部复制的，因此此构造方法的调用者对这些数组的任何后续修改不会影响构造的 <code>CompositeType</code> 实例。
 <p>
此复合类型表示的复合数据值的 Java 类名（即 {@link OpenType#getClassName() getClassName} 方法返回的类名）设置为 <code>CompositeData.class.getName()</code> 返回的字符串值。
 <p>
@param  typeName  为此实例表示的复合类型给出的名称；不可以为 null 或空字符串。<br>&nbsp;
@param  description  此实例表示的复合类型的可读描述；不可以为 null 或空字符串。<br>&nbsp;
@param  itemNames  此 <code>CompositeType</code> 实例描述的复合数据值中包含的项名称；不可以为 null，并且至少应包含一个元素；任何元素不可以为 null 或空字符串。注意，所给出的项名称的顺序对于区分 <code>CompositeType</code> 实例并不重要；项名称按升序字典顺序排序进行内部存储。<br>&nbsp;
@param  itemDescriptions  此 <code>CompositeType</code> 实例描述的复合数据值中已包含项的描述（与 <var>itemNames</var> 的顺序相同）；应与 <var>itemNames</var> 的大小相同；任何元素不可以为 null 或空字符串。<br>&nbsp;
@param  itemTypes  描述此 <code>CompositeType</code> 实例描述的复合数据值中已包含项的开放类型实例（与 <var>itemNames</var> 的顺序相同）；应与 <var>itemNames</var> 的大小相同；任何元素不可以为 null。<br>&nbsp;
@throws IllegalArgumentException  如果 <var>typeName</var> 或 <var>description</var> 为 null 或空字符串；如果 <var>itemNames</var>、<var>itemDescriptions</var> 或 <var>itemTypes</var> 为 null；如果 <var>itemNames</var> 或 <var>itemDescriptions</var> 的任何元素为 null 或空字符串；如果 <var>itemTypes</var> 的任何元素为 null；如果 <var>itemNames</var>、<var>itemDescriptions</var> 或 <var>itemTypes</var> 的大小不同。<br>&nbsp;
@throws OpenDataException  如果 <var>itemNames</var> 包含重复的项名称（区分大小写，但是移除了前导和尾部空格）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.CompositeType.containsKey(String itemName)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 <code>CompositeType</code> 实例定义了名称为 <var>itemName</var> 的项，则返回 <code>true</code>。

@param itemName 项的名称。

@return 如果此名称的项存在，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.openmbean.CompositeType.getDescription(String itemName)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回名称是 <var>itemName</var> 的项的描述，如果此 <code>CompositeType</code> 实例未定义任何名称是 <var>itemName</var> 的项，则返回 <code>null</code>。

@param itemName 项的名称。

@return 描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.OpenType<?> javax.management.openmbean.CompositeType.getType(String itemName)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回名称是 <var>itemName</var> 的项的<i>开放类型</i>，如果 <code>CompositeType</code> 实例未定义任何名称是 <var>itemName</var> 的项，则返回 <code>null</code>。

@param itemName 项的名称。

@return 类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.lang.String> javax.management.openmbean.CompositeType.keySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>CompositeType</code> 实例定义的所有项名称的不可修改的 Set 视图。集合的迭代器将按升序返回项名称。 

@return  {@link String} 的 {@link Set}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.CompositeType.isValue(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试 <var>obj</var> 是否为此 <code>CompositeType</code> 实例可以描述的值。
 <p>
如果 <var>obj</var> 为 null，或者不是 <code>javax.management.openmbean.CompositeData</code> 的实例，则 <code>isValue</code> 返回 <code>false</code>。</p>

 <p>如果 <var>obj</var> 是 <code>javax.management.openmbean.CompositeData</code> 的实例，然后设 {@code ct} 为其 {@code CompositeType}（由 {@link CompositeData#getCompositeType()} 返回）。那么如果 {@code this} <em>可以通过 {@code ct} 进行分配</em>，则结果为 true。可以通过 {@code ct} 进行分配的含义是：</p>

 <ul>
 <li>{@link #getTypeName() this.getTypeName()} 等于 {@code ct.getTypeName()}
 <li>{@code this} 中不存在的项名称在 {@code ct} 中也不存在
 <li>对于 {@code this} 中每一项，其类型都可以通过 {@code ct} 中的对应项进行分配
 </ul>

 <p>如果 {@linkplain TabularType#getTypeName() typeName} 和{@linkplain TabularType#getIndexNames() 索引名称列表}相同，且前者的{@linkplain TabularType#getRowType() 行类型}可以通过后者的行类型进行分配，则 {@code TabularType} 可以通过另一个 {@code TabularType} 进行分配。

 <p>如果{@linkplain ArrayType#getDimension() 维数}相同；都是{@linkplain ArrayType#isPrimitiveArray() 基本数组}或者都不是；前者的{@linkplain ArrayType#getElementOpenType() 元素类型}可以通过后者的元素类型进行分配，则 {@code ArrayType} 可以通过另一个 {@code ArrayType} 进行分配。

 <p>在其他情况下，只有两者相等时 {@code OpenType} 才可以通过另一个 {@code OpenType} 进行分配。</p>

 <p>这些规则意味着，可以将额外的项添加到 {@code CompositeData} 中，而不会使之对于没有这些项的 {@code CompositeType} 无效。</p>

@param  obj  要测试其开放类型与此 <code>CompositeType</code> 的相等性的值。

@return  如果 <var>obj</var> 是此复合类型的值，则返回 <code>true</code>，否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.CompositeType.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较指定的 <code>obj</code> 参数与此 <code>CompositeType</code> 实例的相等性。 
 <p>
当且仅当以下所有语句为 true 时，两个 <code>CompositeType</code> 实例才相等：
 <ul>
<li>它们的类型名称相同</li>
<li>它们的项名称和类型相同</li>
 </ul>
<br>&nbsp;
@param  obj  与此 <code>CompositeType</code> 实例比较相等性的对象；如果 <var>obj</var> 为 <code>null</code>，则 <code>equals</code> 返回 <code>false</code>。
 
@return 如果指定的对象等于此 <code>CompositeType</code> 实例，则返回 <code>true</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.openmbean.CompositeType.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>CompositeType</code> 实例的哈希码值。 
 <p>
<code>CompositeType</code> 实例的哈希码是在 <code>equals</code> 比较中使用的所有信息元素的哈希码的总和（即名称、项名称和项类型）。这确保了 <code>t1.equals(t2)</code> 意味着对于任何两个 <code>CompositeType</code> 实例 <code>t1</code> 和 <code>t2</code> 而言，都存在 <code>t21.hashCode()==t2.hashCode()</code>，这是方法 {@link Object#hashCode() Object.hashCode()} 的通用协定所要求的。
 <p>
由于 <code>CompositeType</code> 实例是不可变的，此实例的哈希码在首次调用 <code>hashCode</code> 时被计算一次，然后对后续调用返回相同的值。

@return  此 <code>CompositeType</code> 实例的哈希码值

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.openmbean.CompositeType.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>CompositeType</code> 实例的字符串表示形式。 
 <p>
字符串表示形式由此类（即 <code>javax.management.openmbean.CompositeType</code>）的名称、此实例的类型名称和项名称的列表以及此实例的类型字符串表示形式组成。
 <p>
由于 <code>CompositeType</code> 实例是不可变的，此实例的字符串表示形式在首次调用 <code>toString</code> 时被计算一次，然后对后续调用返回相同的值。
 
@return  此 <code>CompositeType</code> 实例的字符串表示形式

<!-- END DATA -->
