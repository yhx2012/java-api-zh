<!-- BEGIN KEY -->
public interface javax.management.openmbean.TabularData
<!-- END KEY -->
<!-- BEGIN DATA -->
<tt>TabularData</tt> 接口指定特定类型的复杂<i>开放数据</i> 对象的行为，该对象表示了<i>表格数据</i> 结构。

@version     3.21  05/11/17
@author      Sun Microsystems, Inc.

@since 1.5
@since.unbundled JMX 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.TabularType javax.management.openmbean.TabularData.getTabularType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述此 <tt>TabularData</tt> 实例的<i>表格类型</i>。

@return 表格类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] javax.management.openmbean.TabularData.calculateIndex(CompositeData value)
<!-- END KEY -->
<!-- BEGIN DATA -->
计算将在此 <tt>TabularData</tt> 实例中使用的索引，以便在指定的复合数据 <var>value</var> 参数添加到此实例中后引用该参数。此方法检查指定 <var>value</var> 的类型有效性，但不检查计算的索引是否已用于引用此 <tt>TabularData</tt> 实例中的值。

@param  value	要计算其在此 <tt>TabularData</tt> 实例中索引的复合数据值；必须是与此实例的行类型相同的复合类型；而且不可以为 null。

@return 此 <tt>TabularData</tt> 实例中指定的 <var>value</var> 将具有的索引。
 
@throws NullPointerException       如果 <var>value</var> 为 <tt>null</tt>
 
@throws InvalidOpenTypeException   如果 <var>value</var> 不符合此 <tt>TabularData</tt> 实例的行类型定义。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.openmbean.TabularData.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <tt>TabularData</tt> 实例中包含的 <tt>CompositeData</tt> 值的数目（即行数）。

@return 包含的值的数目。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.TabularData.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 <tt>TabularData</tt> 实例中包含的 <tt>CompositeData</tt> 值的数目（即行数）为零，则返回 <tt>true</tt>。

@return 如果此 <tt>TabularData</tt> 为空，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.TabularData.containsKey(java.lang.Object[] key)
<!-- END KEY -->
<!-- BEGIN DATA -->
当且仅当此 <tt>TabularData</tt> 实例包含其索引为指定 <var>key</var> 的 <tt>CompositeData</tt> 值（即行）时，才返回 <tt>true</tt>。如果 <var>key</var> 为 <tt>null</tt> 或者不符合此 <tt>TabularData</tt> 实例的 <tt>TabularType</tt> 定义，则此方法仅返回 <tt>false</tt>。
 
@param  key  将测试其是否存在于此 <tt>TabularData</tt> 实例中的索引值。

@return  如果此 <tt>TabularData</tt> 使用指定的键来索引一个行值，则返回 <tt>true</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.TabularData.containsValue(CompositeData value)
<!-- END KEY -->
<!-- BEGIN DATA -->
当且仅当此 <tt>TabularData</tt> 实例包含指定的 <tt>CompositeData</tt> 值时才返回 <tt>true</tt>。如果 <var>value</var> 为 <tt>null</tt> 或者不符合此 <tt>TabularData</tt> 实例的行类型定义，则此方法仅返回 <tt>false</tt>。

@param  value  将测试其在此 <tt>TabularData</tt> 实例中的存在性的行值。

@return 如果此 <tt>TabularData</tt> 实例包含指定的行值，则返回 <tt>true</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.CompositeData javax.management.openmbean.TabularData.get(java.lang.Object[] key)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <tt>TabularData</tt> 实例中其索引为 <var>key</var> 的 <tt>CompositeData</tt> 值，如果没有映射到 <var>key</var> 的值，则返回 <tt>null</tt>。

@param key 要返回的行的键。

@return 与 <var>key</var> 对应的值。

@throws NullPointerException 如果 <var>key</var> 为 <tt>null</tt>
@throws InvalidKeyException 如果 <var>key</var> 不符合此 <tt>TabularData</tt> 实例的 * <tt>TabularType</tt> 定义

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.openmbean.TabularData.put(CompositeData value)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <var>value</var> 添加到此 <tt>TabularData</tt> 实例。<var>value</var> 的复合类型必须与此实例的行类型（即 <tt>this.getTabularType().{@link TabularType#getRowType getRowType()}</tt> 返回的复合类型）相同，并且此 <tt>TabularData</tt> 实例中现有值的索引不能与要添加的 <var>value</var> 计算的索引相同。<var>value</var> 的索引是根据此 <tt>TabularData</tt> 实例的 <tt>TabularType</tt> 定义计算的（请参见 <tt>TabularType.{@link TabularType#getIndexNames getIndexNames()}</tt>）。


@param  value			  要作为新行添加到此 <tt>TabularData</tt> 实例中的复合数据值；必须是与此实例的行类型相同的复合类型；并且不可以为 null。

@throws NullPointerException       如果 <var>value</var> 为 <tt>null</tt>
@throws InvalidOpenTypeException   如果 <var>value</var> 不符合此 <tt>TabularData</tt> 实例的行类型定义。
@throws KeyAlreadyExistsException  如果根据此 <tt>TabularData</tt> 实例的 <tt>TabularType</tt> 定义计算的 <var>value</var> 的索引已经映射到基础 HashMap 中现有的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.CompositeData javax.management.openmbean.TabularData.remove(java.lang.Object[] key)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此 <tt>TabularData</tt> 实例中移除其索引为 <var>key</var> 的 <tt>CompositeData</tt> 值，并返回被移除的值，如果不存在索引为 <var>key</var> 的值，则返回 <tt>null</tt>。

@param  key  要获取的此 <tt>TabularData</tt> 实例中值的索引；必须对此 <tt>TabularData</tt> 实例的行类型定义有效；并且不可以为 null。
 
@return 以前与指定键相关联的值，如果没有该键的映射关系，则返回 <tt>null</tt>。  

@throws NullPointerException 如果 <var>key</var> 为 <tt>null</tt>
@throws InvalidKeyException 如果 <var>key</var> 不符合此 <tt>TabularData</tt> 实例的 <tt>TabularType</tt> 定义

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.openmbean.TabularData.putAll(javax.management.openmbean.CompositeData[] values)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <var>values</var> 中的所有元素添加到此 <tt>TabularData</tt> 实例。如果根据此 <tt>TabularData</tt> 实例的 <tt>TabularType</tt> 定义计算的 <var>values</var> 中的任何元素都不满足 {@link #put(CompositeData) <tt>put</tt>} 中定义的约束，或者 <var>values</var> 中的任何两个元素具有相同的索引，则抛出一个描述失败的异常，并且不添加 <var>values</var> 的任何元素，因此，此 <tt>TabularData</tt> 实例保持不变。

@param  values  作为新行添加到此 <tt>TabularData</tt> 实例的复合数据值的数组；如果 <var>values</var> 为 <tt>null</tt> 或者为空，则此方法直接返回且不执行任何操作。
 
@throws NullPointerException       如果 <var>values</var> 的一个元素为 <tt>null</tt>
@throws InvalidOpenTypeException   如果 <var>values</var> 的某个元素不符合此 <tt>TabularData</tt> 实例的行类型定义
@throws KeyAlreadyExistsException  如果根据此 <tt>TabularData</tt> 实例的 <tt>TabularType</tt> 定义计算的 <var>values</var> 的某个元素的索引已经映射到此实例中现有的值，或者 <var>values</var> 的两个元素具有相同的索引。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.openmbean.TabularData.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
从此 <tt>TabularData</tt> 实例中移除所有 <tt>CompositeData</tt> 值（即各行）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<?> javax.management.openmbean.TabularData.keySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 {@code TabularData} 实例中包含的 {@code CompositeData} 值（即各行）的键（即索引值）的 set 视图。返回的 {@code Set} 是一个 {@code Set<List<?>>}，但出于兼容性原因被声明为 {@code Set<?>}。然后可以使用返回的 Set 对键进行迭代。

@return 此 {@code TabularData} 实例中使用的索引值的 set 视图 ({@code Set<List<?>>})。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Collection<?> javax.management.openmbean.TabularData.values()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 {@code TabularData} 实例中包含的 {@code CompositeData} 值（即各行）的 collection 视图。返回的 {@code Collection} 是一个 {@code Collection<CompositeData><?>>}，但出于兼容性原因被声明为 {@code Collection<?>}。然后可以使用返回的 collection 对值进行迭代。

@return 此 {@code TabularData} 实例中包含的行的 collection 视图 ({@code Collection<CompositeData>})。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.TabularData.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较指定的 <var>obj</var> 参数与此 <code>TabularData</code> 实例的相等性。 
 <p>
当且仅当下面的所有语句均为 true 时，才返回 <tt>true</tt>：
 <ul>
<li><var>obj</var> 为非 null</li>
<li><var>obj</var> 还实现 <code>TabularData</code> 接口</li>
<li>它们的行类型相同</li>
<li>它们的内容（即值映射的索引）相等</li>
 </ul>
这确保了此 <tt>equals</tt> 方法对作为 <code>TabularData</code> 接口的不同实现的 <var>obj</var> 参数正常工作。<br>&nbsp;
@param  obj  与此 <code>TabularData</code> 实例进行相等性比较的对象。
 
@return 如果指定的对象等于此 <code>TabularData</code> 实例，则返回 <code>true</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.openmbean.TabularData.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>TabularData</code> 实例的哈希码值。 
 <p>
<code>TabularData</code> 实例的哈希码是在 <code>equals</code> 比较中使用的信息的所有元素的哈希码总和（即其<i>表格类型</i> 及其内容，其中内容被定义为值映射的所有索引）。  
 <p>
这确保 <code>t1.equals(t2)</code> 意味着对于任何两个 <code>TabularDataSupport</code> 实例 <code>t1</code> 和 <code>t2</code> 而言，都存在 <code>t1.hashCode()==t2.hashCode()</code>，这是方法 {@link Object#hashCode() Object.hashCode()} 的通用协定所要求的。

@return 此 <code>TabularDataSupport</code> 实例的哈希码值

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.openmbean.TabularData.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>TabularData</code> 实例的字符串表示形式。 
 <p>
该字符串表示形式由实现类的名称和此实例的表格类型组成。
 
@return  此 <code>TabularData</code> 实例的字符串表示形式

<!-- END DATA -->
