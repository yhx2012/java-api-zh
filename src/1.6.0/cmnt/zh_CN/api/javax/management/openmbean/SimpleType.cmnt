<!-- BEGIN KEY -->
public final class javax.management.openmbean.SimpleType extends javax.management.openmbean.OpenType
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SimpleType</code> 类是<i>开放类型</i> 类，其实例描述所有<i>开放数据</i> 值，这些值既不是数组，也不是 {@link CompositeData <code>CompositeData</code>} 值，更不是 {@link TabularData <code>TabularData</code>} 值。它将其所有可能的实例预定义为 static 字段，而且没有 public 构造方法。 
 <p>
给定一个 <code>SimpleType</code> 实例，该实例描述其 Java 类名称为 <i>className</i> 的值，与此 <code>SimpleType</code> 实例的名称和描述相对应的内部字段也设置为 <i>className</i>。换句话说，其方法 <code>getClassName</code>、<code>getTypeName</code> 和 <code>getDescription</code> 都返回相同的字符串值 <i>className</i>。

@version     3.26  05/11/17
@author      Sun Microsystems, Inc.

@since 1.5
@since.unbundled JMX 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.management.openmbean.SimpleType<java.lang.Void> javax.management.openmbean.SimpleType.VOID
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SimpleType</code> 实例描述其 Java 类名称为 <code>java.lang.Void</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.management.openmbean.SimpleType<java.lang.Boolean> javax.management.openmbean.SimpleType.BOOLEAN
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SimpleType</code> 实例，该实例描述其 Java 类名称为 <code>java.lang.Boolean</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.management.openmbean.SimpleType<java.lang.Character> javax.management.openmbean.SimpleType.CHARACTER
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SimpleType</code> 实例，该实例描述其 Java 类名称为 <code>java.lang.Character</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.management.openmbean.SimpleType<java.lang.Byte> javax.management.openmbean.SimpleType.BYTE
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SimpleType</code> 实例，该实例描述其 Java 类名称为 <code>java.lang.Byte</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.management.openmbean.SimpleType<java.lang.Short> javax.management.openmbean.SimpleType.SHORT
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SimpleType</code> 实例，该实例描述其 Java 类名称为 <code>java.lang.Short</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.management.openmbean.SimpleType<java.lang.Integer> javax.management.openmbean.SimpleType.INTEGER
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SimpleType</code> 实例，该实例描述其 Java 类名称为 <code>java.lang.Integer</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.management.openmbean.SimpleType<java.lang.Long> javax.management.openmbean.SimpleType.LONG
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SimpleType</code> 实例，该实例描述其 Java 类名称为 <code>java.lang.Long</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.management.openmbean.SimpleType<java.lang.Float> javax.management.openmbean.SimpleType.FLOAT
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SimpleType</code> 实例，该实例描述其 Java 类名称为 <code>java.lang.Float</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.management.openmbean.SimpleType<java.lang.Double> javax.management.openmbean.SimpleType.DOUBLE
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SimpleType</code> 实例，该实例描述其 Java 类名称为 <code>java.lang.Double</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.management.openmbean.SimpleType<java.lang.String> javax.management.openmbean.SimpleType.STRING
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SimpleType</code> 实例，该实例描述其 Java 类名称为 <code>java.lang.String</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.management.openmbean.SimpleType<java.math.BigDecimal> javax.management.openmbean.SimpleType.BIGDECIMAL
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SimpleType</code> 实例，该实例描述其 Java 类名称为 <code>java.math.BigDecimal</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.management.openmbean.SimpleType<java.math.BigInteger> javax.management.openmbean.SimpleType.BIGINTEGER
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SimpleType</code> 实例，该实例描述其 Java 类名称为 <code>java.math.BigInteger</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.management.openmbean.SimpleType<java.util.Date> javax.management.openmbean.SimpleType.DATE
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SimpleType</code> 实例，该实例描述其 Java 类名称为 <code>java.util.Date</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.management.openmbean.SimpleType<javax.management.ObjectName> javax.management.openmbean.SimpleType.OBJECTNAME
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>SimpleType</code> 实例，该实例描述其 Java 类名称为 <code>javax.management.ObjectName</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.SimpleType.isValue(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试 <var>obj</var> 是否为此 <code>SimpleType</code> 实例的值。<p> 当且仅当 <var>obj</var> 不为 null，并且 <var>obj</var> 的类名称与为此 <code>SimpleType</code> 实例定义的 className 字段相同（即 {@link OpenType#getClassName() getClassName} 方法返回的类名称）时，此方法返回 <code>true</code>。

@param obj 要测试的对象。

@return 如果 <var>obj</var> 是此 <code>SimpleType</code> 实例的一个值，则返回 <code>true</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.SimpleType.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较指定 <code>obj</code> 参数与此 <code>SimpleType</code> 实例的相等性。 
 <p>
当且仅当两个 <code>SimpleType</code> 实例的 {@link OpenType#getClassName() getClassName} 方法返回相同的值时，这两个实例才相等。
 
@param  obj  与此 <code>SimpleType</code> 实例进行相等性比较的对象；如果 <var>obj</var> 为 <code>null</code> 或者不是类 <code>SimpleType</code> 的实例，则 <code>equals</code> 返回 <code>false</code>。
 
@return 如果指定的对象等于此 <code>SimpleType</code> 实例，则返回 <code>true</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.openmbean.SimpleType.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>SimpleType</code> 实例的哈希码值。<code>SimpleType</code> 实例的哈希码是 {@link OpenType#getClassName() getClassName} 方法返回的字符串值的哈希码。
 <p>
由于 <code>SimpleType</code> 实例是不可变的，此实例的哈希码在首次调用 <code>hashCode</code> 时计算一次，然后对于后续的调用返回相同的值。

@return 此 <code>SimpleType</code> 实例的哈希码值

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.openmbean.SimpleType.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>SimpleType</code> 实例的字符串表示形式。
 <p>
该字符串表示形式由此类的名称（即 <code>javax.management.openmbean.SimpleType</code>）和此实例的类型名称（即此 <code>SimpleType</code> 实例表示的值的 Java 类名称）组成。
 <p>
由于 <code>SimpleType</code> 实例是不可变的，此实例的字符串表示形式在首次调用 <code>toString</code> 时计算一次，然后对于后续的调用返回相同的值。
 
@return  此 <code>SimpleType</code> 实例的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.openmbean.SimpleType.readResolve() throws java.io.ObjectStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用该值的唯一实例替换从 {@link java.io.ObjectInputStream} 读取的对象。

@return 替换对象。

@exception ObjectStreamException 如果读取对象不能被解析。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.openmbean.SimpleType.readResolve() throws java.io.ObjectStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用该值的唯一实例替换从 {@link java.io.ObjectInputStream} 读取的对象。

@return 替换对象。

@exception ObjectStreamException 如果读取对象不能被解析。

<!-- END DATA -->
