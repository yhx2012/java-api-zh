<!-- BEGIN KEY -->
public abstract class javax.management.openmbean.OpenType extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>OpenType</code> 类是所有类的父抽象类，它描述开放数据值的实际<i>开放类型</i>。 
 <p>
<i>开放类型</i> 定义如下：
 <ul>
<li>此类型描述的开放数据值的完全限定的 Java 类名；注意，对于开放数据值，仅考虑有限的 Java 类集合（请参阅 {@link #ALLOWED_CLASSNAMES LIST ALLOWED_CLASSNAMES LIST}）。</li>
<li>开放类型的名称。</li>
<li>开放类型的描述。</li>
 </ul>
 @param <T> Java 类型，本类描述的实例必须具有这一类型。例如，{@link SimpleType#INTEGER} 是 {@code SimpleType<Integer>}，而后者是 {@code OpenType<Integer>} 的子类，这意味着描述为 {@code SimpleType.INTEGER} 的属性、参数或者返回值必须具有 Java 类型 {@link Integer}。

 @version     3.37  06/05/03
@author      Sun Microsystems, Inc.

@since 1.5
@since.unbundled JMX 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.List<java.lang.String> javax.management.openmbean.OpenType.ALLOWED_CLASSNAMES_LIST
<!-- END KEY -->
<!-- BEGIN DATA -->
开放数据值允许的 Java 类的完全限定名称的列表。这些类的任何一个类的多维数组也是开放数据值允许的数组。
 
       <pre>ALLOWED_CLASSNAMES_LIST = { 
        &quot;java.lang.Void&quot;,
        &quot;java.lang.Boolean&quot;,
        &quot;java.lang.Character&quot;,
        &quot;java.lang.Byte&quot;,
        &quot;java.lang.Short&quot;,
        &quot;java.lang.Integer&quot;,
&quot;java.lang.Long&quot;,
        &quot;java.lang.Float&quot;,
        &quot;java.lang.Double&quot;,
        &quot;java.lang.String&quot;,
        &quot;java.math.BigDecimal&quot;,
        &quot;java.math.BigInteger&quot;,
        &quot;java.util.Date&quot;,
        &quot;javax.management.ObjectName&quot;,
        CompositeData.class.getName(),
        TabularData.class.getName() } ;
       </pre>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String[] javax.management.openmbean.OpenType.ALLOWED_CLASSNAMES
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated 使用 {@link #ALLOWED_CLASSNAMES_LIST ALLOWED_CLASSNAMES_LIST} 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.management.openmbean.OpenType.className
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial 此类型描述的开放数据值的完全限定的 Java 类名。

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.management.openmbean.OpenType.description
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial 类型描述（不应为 null 或空）。

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.management.openmbean.OpenType.typeName
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial 为此类型提供的名称（不应为 null 或空）。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.management.openmbean.OpenType(String className, String typeName, String description) throws javax.management.openmbean.OpenDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>OpenType</code> 实例（实际上是一个子类实例，因为 <code>OpenType</code> 是抽象的），检查给定参数的有效性。下面描述了每个参数的有效性约束。<br>&nbsp;
@param  className  此开放类型描述的开放数据值的完全限定的 Java 类名。在 {@link #ALLOWED_CLASSNAMES_LIST ALLOWED_CLASSNAMES_LIST} 中列出了开放数据值允许的有效 Java 类名。这些类或其相应的基本类型中任何一个类的多维数组也是一个允许的类，在这种情况下，类名遵循 <code>java.lang.Class</code> 的 {@link Class#getName() getName()} 方法定义的规则。例如，字符串的 3 维数组的类名是 &quot;<code>[[[Ljava.lang.String;</code>&quot;（不带引号）。<br>&nbsp;
@param  typeName  为此实例表示的开放类型给出的名称；不可为 null 或空字符串。<br>&nbsp;
@param  description  此实例表示的开放类型的可读描述；不可为 null 或空字符串。<br>&nbsp;
@throws IllegalArgumentException  如果 <var>className</var>、<var>typeName</var> 或 <var>description</var> 为 null 或空字符串 <br>&nbsp;
@throws OpenDataException  如果 <var>className</var> 不是开放数据允许的 Java 类名之一

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.openmbean.OpenType.getClassName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此开放类型描述的开放数据值的完全限定的 Java 类名。在 {@link #ALLOWED_CLASSNAMES_LIST ALLOWED_CLASSNAMES_LIST} 中仅列出了开放数据值可能的 Java 类名。这些类或其相应的基本类型中任何一个类的多维数组也是一个允许的类，在这种情况下，类名遵循 <code>java.lang.Class</code> 的 {@link Class#getName() getName()} 方法定义的规则。例如，一个 String 三维数组的类名是 "<code>[[[Ljava.lang.String;</code>"（不包括引号）；一个 Integer 三维数组的类名是 "<code>[[[Ljava.lang.Integer;</code>"（不包括引号）；一个 int 三维数组的类名是 "<code>[[[I</code>"（不包括引号）。

@return 类名。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.openmbean.OpenType.getTypeName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>OpenType</code> 实例的名称。

@return 类型名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.openmbean.OpenType.getDescription()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>OpenType</code> 实例的文本描述。

@return 描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.OpenType.isArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此开放类型描述的开放数据值是数组，则返回 <code>true</code>，否则返回 <code>false</code>。

@return 如果这是一个数组类型，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.management.openmbean.OpenType.isValue(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试 <var>obj</var> 是否为此开放类型的值。

@param obj 要测试其有效性的对象。

@return  如果 <var>obj</var> 是此开放类型的值，则返回 <code>true</code>，否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.management.openmbean.OpenType.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较指定的 <code>obj</code> 参数与此开放类型实例的相等性。

@param obj 要比较的对象。

@return 如果此对象与 <code>obj</code> 相等，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String javax.management.openmbean.OpenType.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此开放类型实例的字符串表示形式。

@return 字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.openmbean.OpenType.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 {@link ObjectInputStream} 反序列化 {@link java.io.OpenType}。

<!-- END DATA -->
