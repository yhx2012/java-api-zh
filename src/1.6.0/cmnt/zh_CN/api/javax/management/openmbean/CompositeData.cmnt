<!-- BEGIN KEY -->
public interface javax.management.openmbean.CompositeData
<!-- END KEY -->
<!-- BEGIN DATA -->
<tt>CompositeData</tt> 接口指定表示<i>复合数据</i> 结构的复杂<i>开放数据</i> 对象的特定类型的行为。

@version     3.25  05/11/17
@author      Sun Microsystems, Inc.

@since 1.5
@since.unbundled JMX 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.CompositeType javax.management.openmbean.CompositeData.getCompositeType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此<i>复合数据</i> 实例的<i>复合类型</i>。

@return 此 CompositeData 的类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.openmbean.CompositeData.get(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回名称为 <tt>key</tt> 的项的值。

@param key 项的名称。

@return 与此键关联的值。

@throws IllegalArgumentException  如果 <tt>key</tt> 为 null 或空字符串。

@throws InvalidKeyException  如果 <tt>key</tt> 不是此 <tt>CompositeData</tt> 实例的现有项的名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] javax.management.openmbean.CompositeData.getAll(java.lang.String[] keys)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回通过 <tt>keys</tt> 指定其项名称的值组成的数组，值排列的顺序与 <tt>keys</tt> 相同。

@param key 项的名称。

@return 与键对应的值。

@throws IllegalArgumentException  如果 <tt>keys</tt> 中的元素为 null 或空字符串。

@throws InvalidKeyException  如果 <tt>keys</tt> 中的元素不是此 <tt>CompositeData</tt> 实例的现有项的名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.CompositeData.containsKey(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 当且仅当此 <tt>CompositeData</tt> 实例包含名称为 <tt>key</tt> 的项时，返回 <tt>true</tt>。如果 <tt>key</tt> 为 null 或空字符串，则此方法只返回 false。

@param key 要测试的键。

@return 如果此 <tt>CompositeData</tt> 包含该键，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.CompositeData.containsValue(Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
当且仅当此 <tt>CompositeData</tt> 实例包含值为 <tt>value</tt> 的项时，返回 <tt>true</tt>。

@param value 要测试的值。

@return 如果此 <tt>CompositeData</tt> 包含该值，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Collection<?> javax.management.openmbean.CompositeData.values()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <tt>CompositeData</tt> 实例中所包含项值的不可修改的 Collection 视图。返回集合的迭代器将按相应项名称的升序字典顺序返回值。 

@return 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.CompositeData.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较指定 <var>obj</var> 参数与此 <code>CompositeData</code> 实例的相等性。 
 <p>
当且仅当下面的所有语句均为 true 时，才返回 <tt>true</tt>：
 <ul>
<li><var>obj</var> 为非 null，</li>
<li><var>obj</var> 还实现 <code>CompositeData</code> 接口</li>
<li>它们的复合类型相等</li>
<li>它们的内容（即（名称，值）对）相等。如果内容中包含的值是一个数组，则对于对象引用类型数组，值比较操作的执行方式类似于调用 {@link java.util.Arrays#deepEquals(Object[], Object[]) deepEquals} 方法；对于基本类型数组，则类似于调用恰当的 {@code Arrays.equals(e1,e2)} 重载形式。</li>
 </ul>
<p>
这确保了此 <tt>equals</tt> 方法对 <var>obj</var> 参数正常工作，该参数是 <code>CompositeData</code> 接口的不同实现，具有 <tt>java.util.Collection</tt> 接口的 {@link java.util.Collection#equals(Object) equals} 方法中提到的约束限制。

@param  obj  与此 <code>CompositeData</code> 实例进行相等性比较的对象。
 
@return 如果指定的对象等于此 <code>CompositeData</code> 实例，则返回 <code>true</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.openmbean.CompositeData.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>CompositeData</code> 实例的哈希码值。 
 <p>
 <code>CompositeData</code> 实例的哈希码是在 <code>equals</code> 比较中使用的所有信息元素的哈希码的总和（即其<i>复合类型</i> 和所有项值）。  
 <p>
这确保了 <code>t1.equals(t2)</code> 意味着对于任何两个 <code>CompositeData</code> 实例 <code>t1</code> 和 <code>t2</code> 而言，都存在 <code>t1.hashCode()==t2.hashCode()</code>，这是方法 {@link Object#hashCode() Object.hashCode()} 的通用协定所要求的。
 <p>
每项值的哈希码将被添加到返回的哈希码中。如果项值是一个数组，则对于对象引用类型数组，其哈希码的获取方式类似于调用 {@link java.util.Arrays#deepHashCode(Object[]) deepHashCode} 方法；对于基本类型数组，则类似于调用恰当的 {@code Arrays.hashCode(e)} 重载形式。

@return  此 <code>CompositeData</code> 实例的哈希码值

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.openmbean.CompositeData.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>CompositeData</code> 实例的字符串表示形式。 
 <p>
字符串表示形式由实现类的名称、此实例的复合类型的字符串表示形式以及内容的字符串表示形式组成，即列出 itemName=itemValue 映射关系。
 
@return  此 <code>CompositeData</code> 实例的字符串表示形式

<!-- END DATA -->
