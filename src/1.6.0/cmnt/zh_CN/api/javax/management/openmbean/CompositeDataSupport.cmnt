<!-- BEGIN KEY -->
public class javax.management.openmbean.CompositeDataSupport extends java.lang.Object implements javax.management.openmbean.CompositeData, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<tt>CompositeDataSupport</tt> 类是实现 <tt>CompositeData</tt> 接口的<i>开放数据</i> 类。
	
@version     3.34  05/11/17
@author      Sun Microsystems, Inc.

@since 1.5
@since.unbundled JMX 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.util.SortedMap<java.lang.String, java.lang.Object> javax.management.openmbean.CompositeDataSupport.contents
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial 它们各自值的项名称的映射关系的内部表示形式。{@link SortedMap} 用于较快速的元素检索。

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.management.openmbean.CompositeType javax.management.openmbean.CompositeDataSupport.compositeType
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial 此<i>复合数据</i> 实例的<i>复合类型</i>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.CompositeDataSupport(CompositeType compositeType, java.lang.String[] itemNames, java.lang.Object[] itemValues) throws javax.management.openmbean.OpenDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
使用指定的 <tt>compositeType</tt>（其项值由 <tt>itemValues[]</tt> 按照与 <tt>itemNames[]</tt> 中相同的顺序指定）构造一个 <tt>CompositeDataSupport</tt> 实例。由于 <tt>CompositeType</tt> 未对其项指定任何顺序，所以使用 <tt>itemNames[]</tt> 参数指定在 <tt>itemValues[]</tt> 中给出的值的顺序。此 <tt>CompositeDataSupport</tt> 实例中包含的项内部存储在 <tt>TreeMap</tt> 中，并且按它们名称的升序字典顺序进行存储，以便于对各个项值进行较快速的检索。
 <p>
构造方法检查是否满足下面为每个参数列出的所有约束条件，如果无法满足，则抛出适当的异常。
 <p>
@param  compositeType  此<i>复合数据</i> 实例的<i>复合类型</i>；不可以为 null。
 <p>
@param  itemNames  <tt>itemNames</tt> 必须以任一顺序列出在 <tt>compositeType</tt> 中定义的所有项名称；使用列出名称的顺序来匹配 <tt>itemValues[]</tt> 中的值；不可以为 null 或空。 
 <p>
@param  itemValues  按与 <tt>itemNames</tt> 中它们各自名称相同的顺序列出的项的值；每个项值可以为 null，但是，如果为非 null，则它必须是在 <tt>compositeType</tt> 中为对应的项定义的开放类型的有效值；大小必须与 <tt>itemNames</tt> 相同；不可以为 null 或空。
 <p>
@throws  IllegalArgumentException  <tt>compositeType</tt> 为 null，或者 <tt>itemNames[]</tt> 或 <tt>itemValues[]</tt> 为 null 或空，或者 <tt>itemNames[]</tt> 中的元素之一为 null 或空字符串，或者 <tt>itemNames[]</tt> 和 <tt>itemValues[]</tt> 的大小不相同。
 <p>
@throws  OpenDataException  <tt>itemNames[]</tt> 或 <tt>itemValues[]</tt> 的大小与 <tt>compositeType</tt> 中定义的项数不同，或者 <tt>itemNames[]</tt> 中的元素之一不作为在 <tt>compositeType</tt> 中定义的项名称存在，或者 <tt>itemValues[]</tt> 中的元素之一不是 <tt>compositeType</tt> 中定义的相应项的有效值。
 <p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.CompositeDataSupport(CompositeType compositeType, java.util.Map<java.lang.String, ?> items) throws javax.management.openmbean.OpenDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
使用指定的 <tt>compositeType</tt>（其项名称和对应值由 <tt>items</tt> 映射中的映射关系给出）构造一个 <tt>CompositeDataSupport</tt> 实例。此构造方法将键转换为一个字符串数组，将值转换为一个对象数组，并调用 <tt>CompositeDataSupport(javax.management.openmbean.CompositeType, java.lang.String[], java.lang.Object[])</tt>。
 <p>
@param  compositeType  此<i>复合数据</i> 实例的<i>复合类型</i>；不可以为 null。
 <p>
@param  items  所有项名称到它们的值的映射；<tt>items</tt> 必须包含 <tt>compositeType</tt> 中定义的所有项名称；不可以为 null 或空。 
 <p>
@throws  IllegalArgumentException  <tt>compositeType</tt> 为 null，或者 <tt>items</tt> 为 null 或空，或者 <tt>items</tt> 中的键之一为 null 或空字符串，或者 <tt>items</tt> 中的值之一为 null。
 <p>
@throws  OpenDataException  <tt>items</tt> 的大小与 <tt>compositeType</tt> 中定义的项数不同，或者 <tt>items</tt> 中的键之一不作为 <tt>compositeType</tt> 中定义的项名称存在，或者 <tt>items</tt> 中的值之一不是 <tt>compositeType</tt> 中定义的相应项的有效值。
 <p>
@throws ArrayStoreException  <tt>items</tt> 中的一个或多个键不是 <tt>java.lang.String</tt> 类。
 <p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.CompositeType javax.management.openmbean.CompositeDataSupport.getCompositeType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此<i>复合数据</i> 实例的<i>复合类型</i>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.openmbean.CompositeDataSupport.get(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回其名称是 <tt>key</tt> 的项的值。

@throws IllegalArgumentException 如果 <tt>key</tt> 为 null 或空字符串。

@throws InvalidKeyException  如果 <tt>key</tt> 不是此 <tt>CompositeData</tt> 实例的现有项名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] javax.management.openmbean.CompositeDataSupport.getAll(java.lang.String[] keys)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由 <tt>keys</tt> 指定其项名称的值的数组，顺序与 <tt>keys</tt> 相同。

@throws IllegalArgumentException  如果 <tt>keys</tt> 中的元素为 null 或空字符串。

@throws InvalidKeyException  如果 <tt>keys</tt> 中的元素不是此 <tt>CompositeData</tt> 实例的现有项名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.CompositeDataSupport.containsKey(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
当且仅当此 <tt>CompositeData</tt> 实例包含名称是 <tt>key</tt> 的项时，才返回 <tt>true</tt>。如果 <tt>key</tt> 为 null 或空字符串，则此方法只返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.CompositeDataSupport.containsValue(Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
当且仅当此 <tt>CompositeData</tt> 实例包含其值是 <tt>value</tt> 的项时，返回 <tt>true</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Collection<?> javax.management.openmbean.CompositeDataSupport.values()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <tt>CompositeData</tt> 实例中包含的项值的不可修改的 Collection 视图。返回集合的迭代器将按相应项名称的升序字典顺序返回该值。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.CompositeDataSupport.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较指定的 <var>obj</var> 参数与此 <code>CompositeDataSupport</code> 实例的相等性。 
 <p>
当且仅当下面的所有语句均为 true 时，才返回 <tt>true</tt>：
 <ul>
<li><var>obj</var> 为非 null，</li>
<li><var>obj</var> 还实现 <code>CompositeData</code> 接口，</li>
<li>它们的复合类型相等</li>
<li>它们的内容（即（名称，值）对）相等。如果内容中包含的值是一个数组，则对于对象引用类型数组，值比较操作的执行方式类似于调用 {@link java.util.Arrays#deepEquals(Object[], Object[]) deepEquals} 方法；对于基本类型数组，则类似于调用恰当的 {@code Arrays.equals(e1,e2)} 重载形式。 </li>
 </ul>
<p>
这确保了此 <tt>equals</tt> 方法对 <var>obj</var> 参数正常工作，该参数是 <code>CompositeData</code> 接口（具有 <tt>java.util.Collection</tt> 接口的 {@link java.util.Collection#equals(Object) equals} 方法中提到的限制）的不同实现。

@param  obj  与此 <code>CompositeDataSupport</code> 实例进行相等性比较的对象；
 
@return 如果指定的对象等于此 <code>CompositeDataSupport</code> 实例，则返回 <code>true</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.openmbean.CompositeDataSupport.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>CompositeDataSupport</code> 实例的哈希码值。 
 <p>
 <code>CompositeDataSupport</code> 实例的哈希码是在 <code>equals</code> 比较中使用的所有信息元素的哈希码的总和（即其<i>复合类型</i> 和所有项值）。  
 <p>
这确保了 <code>t1.equals(t2)</code> 意味着对于任何两个 <code>CompositeDataSupport</code> 实例 <code>t1</code> 和 <code>t2</code> 而言，都存在 <code>t1.hashCode()==t2.hashCode()</code>，这是方法 {@link Object#hashCode() Object.hashCode()} 的通用协定所要求的。
 <p>
每项值的哈希码将被添加到返回的哈希码中。如果项值是一个数组，则对于对象引用类型数组，其哈希码的获取方式类似于调用 {@link java.util.Arrays#deepHashCode(Object[]) deepHashCode} 方法；对于基本类型数组，则类似于调用恰当的 {@code Arrays.hashCode(e)} 重载形式。

@return  此 <code>CompositeDataSupport</code> 实例的哈希码值

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.openmbean.CompositeDataSupport.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>CompositeDataSupport</code> 实例的字符串表示形式。 
 <p>
字符串表示形式由此类（即<code>javax.management.openmbean.CompositeDataSupport</code>）的名称、此实例的复合类型的字符串表示形式以及内容（即列出 itemName=itemValue 映射关系）的字符串表示形式组成。
 
@return  此 <code>CompositeDataSupport</code> 实例的字符串表示形式

<!-- END DATA -->
