<!-- BEGIN KEY -->
public class javax.management.openmbean.OpenMBeanAttributeInfoSupport extends javax.management.MBeanAttributeInfo implements javax.management.openmbean.OpenMBeanAttributeInfo
<!-- END KEY -->
<!-- BEGIN DATA -->
描述 open MBean 的一个属性。

@version     3.43  06/03/15
@author      Sun Microsystems, Inc.

@since 1.5
@since.unbundled JMX 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.management.openmbean.OpenType<?> javax.management.openmbean.OpenMBeanAttributeInfoSupport.openType
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial open mbean 属性的<i>开放类型</i>

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.Object javax.management.openmbean.OpenMBeanAttributeInfoSupport.defaultValue
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial open mbean 属性的默认值

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.Set<?> javax.management.openmbean.OpenMBeanAttributeInfoSupport.legalValues
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial open mbean 属性的合法值。此 {@link Set} 是不可修改的。

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.Comparable javax.management.openmbean.OpenMBeanAttributeInfoSupport.minValue
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial open mbean 属性的最小值

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.Comparable javax.management.openmbean.OpenMBeanAttributeInfoSupport.maxValue
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial open mbean 属性的最大值

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.OpenMBeanAttributeInfoSupport(String name, String description, javax.management.openmbean.OpenType<?> openType, boolean isReadable, boolean isWritable, boolean isIs)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 {@code OpenMBeanAttributeInfoSupport} 实例，该实例使用指定的 {@code name}、<{@code openType} 和 {@code
 description} 以及指定的读/写访问属性来描述 open MBean 的属性。

@param name  不可以为 null 或空字符串。

@param description  不可以为 null 或空字符串。

@param openType  不可以为 null。

@param isReadable  如果该属性有一个为了便于管理而公开的获取方法，则此参数为 {@code true}。

@param isWritable  如果该属性有一个为了便于管理而公开的设置方法，则此参数为 {@code true}。

@param isIs 如果该属性的获取方法的形式是 <tt>is<i>XXX</i></tt>，则此参数为 {@code true}。

@throws IllegalArgumentException  如果 {@code name} 或 {@code
 description} 为 null 或空字符串，或者 {@code openType} 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.OpenMBeanAttributeInfoSupport(String name, String description, javax.management.openmbean.OpenType<?> openType, boolean isReadable, boolean isWritable, boolean isIs, Descriptor descriptor)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>构造一个 {@code OpenMBeanAttributeInfoSupport} 实例，该实例使用指定的 {@code name}、{@code openType}、{@code
 description}、读/写访问属性和 {@code Descriptor} 来描述 open MBean 的属性。</p>

 <p>正如{@link <a href="package-summary.html#constraints">包描述</a>}中所解释的，{@code descriptor} 可以包含那些定义此类某些方法的返回值的项。

@param name  不可以为 null 或空字符串。

@param description  不可以为 null 或空字符串。

@param openType  不可以为 null。

@param isReadable  如果该属性有一个为了便于管理而公开的获取方法，则此参数为 {@code true}。 

@param isWritable  如果该属性有一个为了便于管理而公开的设置方法，则此参数为 {@code true}。

@param isIs 如果该属性的获取方法的形式是 <tt>is<i>XXX</i></tt>，则此参数为 {@code true}。

@param descriptor 属性的描述符。此参数可以为 null，它等效于一个空描述符。

@throws IllegalArgumentException 如果 {@code name} 或 {@code description} 为 null 或空字符串；或者 {@code openType} 为 null；或者根据{@link <a href="package-summary.html#constraints">包描述</a>}中的描述，描述符项无效。

@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.OpenMBeanAttributeInfoSupport(String name, String description, javax.management.openmbean.OpenType<T> openType, boolean isReadable, boolean isWritable, boolean isIs, T defaultValue) throws javax.management.openmbean.OpenDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 {@code OpenMBeanAttributeInfoSupport} 实例，该实例使用指定的 {@code name}、{@code openType}、{@code description}、{@code defaultValue}，以及制定的读/写访问属性来描述 open MBean 的属性。

@param name  不可以为 null 或空字符串。

@param description  不可以为 null 或空字符串。

@param openType  不可以为 null。

@param isReadable  如果该属性有一个为了便于管理而公开的获取方法，则此参数为 {@code true}。 

@param isWritable  如果该属性有一个为了便于管理而公开的设置方法，则此参数为 {@code true}。

@param isIs 如果该属性的获取方法的形式是 <tt>is<i>XXX</i></tt>，则此参数为 {@code true}。

@param defaultValue  必须是为此属性指定的 @code
 openType} 的有效值；默认值不支持 {@code ArrayType} 和 {@code TabularType}；可以为 null，在这种情况下，它意味着不设置任何默认值。

@param <T> 允许编译器查看 {@code defaultValue}（如果不为 null）是否具有对应 {@code openType} 的正确 Java 类型。

@throws IllegalArgumentException 如果 {@code name} 或 {@code description} 为 null 或空字符串，或者 {@code openType} 为 null。

@throws OpenDataException 如果 {@code defaultValue} 不是指定 {@code openType} 的有效值，或者 {@code defaultValue} 不为 null 且 {@code openType} 为 {@code ArrayType} 或 {@code TabularType}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.OpenMBeanAttributeInfoSupport(String name, String description, javax.management.openmbean.OpenType<T> openType, boolean isReadable, boolean isWritable, boolean isIs, T defaultValue, T[] legalValues) throws javax.management.openmbean.OpenDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>构造一个 {@code OpenMBeanAttributeInfoSupport} 实例，该实例使用指定的 {@code name}、{@code openType}、{@code description}、{@code defaultValue}、{@code legalValues}，以及指定的读/写访问属性来描述 open MBean 的属性。</p>

 <p>复制 {@code legalValues} 的内容，因此对 {@code legalValues} 引用的数组进行后续修改不会影响此 {@code OpenMBeanAttributeInfoSupport} 实例。</p>

@param name  不可以为 null 或空字符串。

 @param description  不可以为 null 或空字符串。

 @param openType  不可以为 null。

 @param isReadable 如果该属性有一个为了便于管理而公开的获取方法，则此参数为 {@code true}。

 @param isWritable 如果该属性有一个为了便于管理而公开的设置方法，则此参数为 {@code true}。

 @param isIs 如果该属性的获取方法的形式是 <tt>is<i>XXX</i></tt>，则此参数为 {@code true}。

 @param defaultValue 必须是为此属性指定的 {@code openType} 的有效值；默认值不支持 {@code ArrayType} 和 {@code TabularType}；可以为 null，在这种情况下，它意味着不设置任何默认值。

 @param legalValues 包含的每个值对于为此属性指定的 {@code openType} 必须是有效的；{@code ArrayType} 和 {@code TabularType} 不支持的合法值；可以为 null 或空。

 @param <T> 允许编译器查看 {@code defaultValue} 和 {@code legalValues}（如果不为 null）是否具有对应 {@code openType} 的正确 Java 类型。

 @throws IllegalArgumentException 如果 {@code name} 或 {@code description} 为 null 或空字符串，或者 {@code openType} 为 null。

 @throws OpenDataException 如果 {@code defaultValue} 对指定的 {@code openType} 无效；如果 {@code legalValues} 中的一个值对指定的 {@code openType} 无效；如果 {@code defaultValue} 为非 null 且 {@code openType} 为 {@code ArrayType} 或 {@code TabularType}；如果 {@code legalValues} 为非 null 和非空且 {@code openType} 为 {@code ArrayType} 或 {@code TabularType}；如果 {@code legalValues} 为非 null 和非空且 {@code legalValues} 中不包含 {@code defaultValue}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.OpenMBeanAttributeInfoSupport(String name, String description, javax.management.openmbean.OpenType<T> openType, boolean isReadable, boolean isWritable, boolean isIs, T defaultValue, java.lang.Comparable<T> minValue, java.lang.Comparable<T> maxValue) throws javax.management.openmbean.OpenDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 {@code OpenMBeanAttributeInfoSupport} 实例，该实例使用指定的 {@code name}、{@code openType}、{@code description}、{@code defaultValue}、{@code minValue} 和 {@code maxValue} 来描述 open MBean 的属性。只有值为 {@code Comparable} 的开放类型才能指定最小值和最大值。

@param name  不可以为 null 或空字符串。

@param description  不可以为 null 或空字符串。

@param openType  不可以为 null。

@param isReadable  如果该属性有一个为了便于管理而公开的获取方法，则此参数为 {@code true}。 

@param isWritable  如果该属性有一个为了便于管理而公开的设置方法，则此参数为 {@code true}。

@param isIs 如果该属性的获取方法的形式是 <tt>is<i>XXX</i></tt>，则此参数为 {@code true}。

@param defaultValue  必须是为此属性指定的 {@code openType} 的有效值；默认值不支持 {@code ArrayType} 和 {@code TabularType}；可以为 null，在这种情况下，它意味着不设置任何默认值。

@param minValue   对于为此属性指定的 {@code openType} 必须有效；可以为 null，在这种情况下，它意味着不设置任何最小值。

@param maxValue   对于为此属性指定的 {@code openType} 必须有效；可以为 null，在这种情况下，它意味着不设置任何最大值。

@param <T> 允许编译器查看 {@code defaultValue}、{@code minValue} 和 {@code maxValue}（如果不为 null）是否具有对应 {@code openType} 的正确 Java 类型。

@throws IllegalArgumentException  如果 {@code name} 或 {@code description} 为 null 或空字符串，或者 {@code openType} 为 null。

@throws OpenDataException 如果 {@code defaultValue}、{@code minValue} 或 {@code maxValue} 不是对应指定 {@code openType} 的有效值；如果 {@code defaultValue} 不为 null 且 {@code openType} 是 {@code ArrayType} 或 {@code TabularType}；如果 {@code minValue} 和 {@code maxValue} 都不为 null 且 {@code minValue.compareTo(maxValue) > 0} 为 {@code true}；如果 {@code defaultValue} 和 {@code minValue} 都不为 null 且 {@code minValue.compareTo(defaultValue) > 0} 为 {@code true}；如果 {@code defaultValue} 和 {@code maxValue} 都不为 null 且 {@code defaultValue.compareTo(maxValue) > 0} 为 {@code true}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.OpenType<?> javax.management.openmbean.OpenMBeanAttributeInfoSupport.getOpenType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 {@code OpenMBeanAttributeInfoSupport} 实例描述的属性值的开放类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.openmbean.OpenMBeanAttributeInfoSupport.getDefaultValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 {@code OpenMBeanAttributeInfoSupport} 实例描述的属性的默认值（如果已指定），否则返回 {@code null}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<?> javax.management.openmbean.OpenMBeanAttributeInfoSupport.getLegalValues()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 {@code OpenMBeanAttributeInfoSupport} 实例描述的属性的合法值的不可修改的 Set（如果已指定），否则返回 {@code null}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Comparable<?> javax.management.openmbean.OpenMBeanAttributeInfoSupport.getMinValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 {@code OpenMBeanAttributeInfoSupport} 实例描述的属性的最小值（如果已指定），否则返回 {@code null}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Comparable<?> javax.management.openmbean.OpenMBeanAttributeInfoSupport.getMaxValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 {@code OpenMBeanAttributeInfoSupport} 实例描述的属性的最大值（如果已指定），否则返回 {@code null}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.OpenMBeanAttributeInfoSupport.hasDefaultValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 {@code
 OpenMBeanAttributeInfoSupport} 实例指定所描述属性的非 null 默认值，则返回 {@code true}，否则返回 {@code false}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.OpenMBeanAttributeInfoSupport.hasLegalValues()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 {@code
 OpenMBeanAttributeInfoSupport} 实例指定所描述属性的非 null 的合法值集，则返回 {@code true}，否则返回 {@code false}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.OpenMBeanAttributeInfoSupport.hasMinValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 {@code
 OpenMBeanAttributeInfoSupport} 实例指定所描述属性的非 null 的最小值，则返回 {@code true}，否则返回 {@code false}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.OpenMBeanAttributeInfoSupport.hasMaxValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 {@code
 OpenMBeanAttributeInfoSupport} 实例指定所描述属性的非 null 的最大值，则返回 {@code true}，否则返回 {@code false}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.OpenMBeanAttributeInfoSupport.isValue(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试 {@code obj} 是否为此 {@code
 OpenMBeanAttributeInfoSupport} 实例描述的属性的有效值。

@param obj 要测试的对象。

@return 如果 {@code obj} 是此 {@code
 OpenMBeanAttributeInfoSupport} 实例描述的参数的有效值，则返回 <code>true</code>，否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.OpenMBeanAttributeInfoSupport.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较指定 {@code obj} 参数与此 {@code OpenMBeanAttributeInfoSupport} 实例的相等性。 
 <p>
当且仅当下面的所有语句均为 true 时，才返回 {@code true}：
 <ul>
<li>{@code obj} 为非 null，</li>
<li>{@code obj} 还实现 {@code OpenMBeanAttributeInfo} 接口，</li>
<li>它们的名称相等</li>
<li>它们的开放类型相等</li>
<li>它们的访问属性（isReadable、isWritable 和 isIs）相等</li>
<li>它们的默认值、最小值、最大值和合法值相等。</li>
 </ul>
这确保了此 {@code equals} 方法对作为 {@code OpenMBeanAttributeInfo} 接口的不同实现的 {@code obj} 参数正常工作。

<p>如果 {@code obj} 还实现 {@link DescriptorRead}，则其 {@link DescriptorRead#getDescriptor() getDescriptor()} 必须为此对象返回相同的值。</p>

@param  obj  与此 {@code OpenMBeanAttributeInfoSupport} 实例进行相等性比较的对象。
 
@return  如果指定的对象等于此 {@code OpenMBeanAttributeInfoSupport} 实例，则返回 {@code true}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.openmbean.OpenMBeanAttributeInfoSupport.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回此 {@code OpenMBeanAttributeInfoSupport} 实例的哈希码值。</p>
 
 <p>
 {@code OpenMBeanAttributeInfoSupport} 实例的哈希码是在 {@code equals} 比较中使用的所有信息元素的哈希码的总和（即它的名称、<i>开放类型</i>、默认值、最小值、最大值、合法值和 Descriptor）。  
 <p>
这确保 {@code t1.equals(t2)} 意味着对于任何两个 {@code OpenMBeanAttributeInfoSupport} 实例 {@code t1} 和 {@code t2} 而言，都存在 {@code t1.hashCode()==t2.hashCode()}，这是方法 {@link Object#hashCode() Object.hashCode()} 的通用协定所要求的。
 <p>
不过请注意，根据 {@link #equals(java.lang.Object)} 中的定义，实现 {@code OpenMBeanAttributeInfo} 接口的类的其他实例可能与此 {@code OpenMBeanAttributeInfoSupport} 实例相等，但是如果它的计算方法不同，可能会有不同的哈希码。
 <p>
由于 {@code OpenMBeanAttributeInfoSupport} 实例是不可变的，此实例的哈希码在首次调用 {@code hashCode} 时被计算一次，然后对后续调用返回相同的值。

@return  此 {@code OpenMBeanAttributeInfoSupport} 实例的哈希码值

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.openmbean.OpenMBeanAttributeInfoSupport.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 {@code OpenMBeanAttributeInfoSupport} 实例的字符串表示形式。 
 <p>
字符串表示形式由此类（即 {@code javax.management.openmbean.OpenMBeanAttributeInfoSupport}）的名称、名称的字符串表示形式和描述参数的开放类型，以及它的默认值、最小值、最大值和合法值和描述符的字符串表示形式组成。
 <p>
由于 {@code OpenMBeanAttributeInfoSupport} 实例是不可变的，所以此实例的字符串表示形式在首次调用 {@code toString} 时被计算一次，然后对后续调用返回相同的值。
 
@return  此 {@code OpenMBeanAttributeInfoSupport} 实例的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Object javax.management.openmbean.OpenMBeanAttributeInfoSupport.readResolve()
<!-- END KEY -->
<!-- BEGIN DATA -->
 在 Descriptor 被添加到此类之前，用此版本的 API 进行序列化的对象的 Descriptor 将为空或 null。
 为了与此版本的操作保持一致，必须使用另一个对象取代该对象，用来取代的那个对象的 Descriptor 应该反映 openType、defaultValue 等等的值。

<!-- END DATA -->
