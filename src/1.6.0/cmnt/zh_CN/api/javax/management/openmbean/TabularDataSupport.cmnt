<!-- BEGIN KEY -->
public class javax.management.openmbean.TabularDataSupport extends java.lang.Object implements javax.management.openmbean.TabularData, java.util.Map, java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<tt>TabularDataSupport</tt> 类是实现 <tt>TabularData</tt> 和 <tt>Map</tt> 接口的<i>开放数据</i> 类，并且在内部它是基于哈希映射数据结构的。

@version     3.36  06/03/29
@author      Sun Microsystems, Inc.

@since 1.5
@since.unbundled JMX 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.util.Map<java.lang.Object, javax.management.openmbean.CompositeData> javax.management.openmbean.TabularDataSupport.dataMap
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial 此表格数据实例的内容：一个 {@link HashMap}

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.management.openmbean.TabularType javax.management.openmbean.TabularDataSupport.tabularType
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial 此表格数据实例的表格类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.TabularDataSupport(TabularType tabularType)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个空 <tt>TabularDataSupport</tt> 实例，其开放类型是 <var>tabularType</var>，并且它的基础 <tt>HashMap</tt> 具有默认初始容量 (101) 和默认加载因子 (0.75)。
 <p>
此构造方法仅调用 <tt>this(tabularType, 101, 0.75f);</tt>

@param  tabularType	描述此 <tt>TabularData</tt> 实例的<i>表格类型</i>；不可以为 null。

@throws IllegalArgumentException  如果表格类型为 null。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.TabularDataSupport(TabularType tabularType, int initialCapacity, float loadFactor)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个空 <tt>TabularDataSupport</tt> 实例，其开放类型为 <var>tabularType</var>，它的基础 <tt>HashMap</tt> 具有指定的初始容量和加载因子。

@param  tabularType	   描述此 <tt>TabularData</tt> 实例的<i>表格类型</i>；不可以为 null。

@param  initialCapacity   HashMap 的初始容量。
 
@param  loadFactor        HashMap 的加载因子
 
@throws IllegalArgumentException  如果初始容量小于零或者加载因子为非正数，或者表格类型为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.TabularType javax.management.openmbean.TabularDataSupport.getTabularType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述此 <tt>TabularData</tt> 实例的<i>表格类型</i>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] javax.management.openmbean.TabularDataSupport.calculateIndex(CompositeData value)
<!-- END KEY -->
<!-- BEGIN DATA -->
计算将在此 <tt>TabularData</tt> 实例中使用的索引，以便在指定的复合数据 <var>value</var> 参数添加到此实例后引用该参数。此方法检查指定 <var>value</var> 的类型有效性，但不检查计算的索引是否已用于引用此 <tt>TabularData</tt> 实例中的值。


@param  value			  要计算其在此 <tt>TabularData</tt> 实例中的索引的复合数据值；必须是与此实例的行类型相同的复合类型；而且不可以为 null。

@return 此 <tt>TabularData</tt> 实例中指定的 <var>value</var> 将具有的索引。
 
@throws NullPointerException       如果 <var>value</var> 为 <tt>null</tt>。 
 
@throws InvalidOpenTypeException   如果 <var>value</var> 不符合此 <tt>TabularData</tt> 实例的行类型定义。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.TabularDataSupport.containsKey(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
当且仅当此 <tt>TabularData</tt> 实例包含索引为指定 <var>key</var> 的 <tt>CompositeData</tt> 值（即行）时，才返回 <tt>true</tt>。如果 <var>key</var> 不能被强制转换成 Object 实例的一维数组，则此方法仅返回 <tt>false</tt>；否则此方法返回对 <tt>this.containsKey((Object[]) key)</tt> 调用的结果。
 
@param  key  将测试其是否存在于此 <tt>TabularData</tt> 实例中的索引值。

@return  如果此 <tt>TabularData</tt> 使用指定的键索引一个行值，则返回 <tt>true</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.TabularDataSupport.containsKey(java.lang.Object[] key)
<!-- END KEY -->
<!-- BEGIN DATA -->
当且仅当此 <tt>TabularData</tt> 实例包含索引为指定 <var>key</var> 的 <tt>CompositeData</tt> 值（即行）时，才返回 <tt>true</tt>。如果 <var>key</var> 为 <tt>null</tt> 或者不符合此 <tt>TabularData</tt> 实例的 <tt>TabularType</tt> 定义，则此方法仅返回 <tt>false</tt>。
 
@param  key  将测试其是否存在于此 <tt>TabularData</tt> 实例中的索引值。

@return  如果此 <tt>TabularData</tt> 使用指定的键来索引一个行值，则返回 <tt>true</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.TabularDataSupport.containsValue(CompositeData value)
<!-- END KEY -->
<!-- BEGIN DATA -->
当且仅当此 <tt>TabularData</tt> 实例包含指定的 <tt>CompositeData</tt> 值时才返回 <tt>true</tt>。如果 <var>value</var> 为 <tt>null</tt> 或者不符合此 <tt>TabularData</tt> 实例的行类型定义，则此方法仅返回 <tt>false</tt>。

@param  value  将测试其是否存在于此 <tt>TabularData</tt> 实例中的行值。

@return 如果此 <tt>TabularData</tt> 实例包含指定的行值，则返回 <tt>true</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.TabularDataSupport.containsValue(Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
当且仅当此 <tt>TabularData</tt> 实例包含指定的值时，才返回 <tt>true</tt>。

@param  value  将测试其是否存在于此 <tt>TabularData</tt> 实例中的行值。

@return 如果此 <tt>TabularData</tt> 实例包含指定的行值，则返回 <tt>true</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.openmbean.TabularDataSupport.get(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法仅调用 <tt>get((Object[]) key)</tt>。

@throws NullPointerException  如果 <var>key</var> 为 <tt>null</tt>
@throws ClassCastException    如果 <var>key</var> 不属于 <tt>Object[]</tt> 类型
@throws InvalidKeyException   如果 <var>key</var> 不符合此 <tt>TabularData</tt> 实例的 <tt>TabularType</tt> 定义。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.CompositeData javax.management.openmbean.TabularDataSupport.get(java.lang.Object[] key)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <tt>TabularData</tt> 实例中索引为 <var>key</var> 的 <tt>CompositeData</tt> 值，如果没有映射到 <var>key</var> 的值，则返回 <tt>null</tt>。

@param key 要获取的此 <tt>TabularData</tt> 实例中值的索引；*必须对此 <tt>TabularData</tt> 实例的行类型定义有效；*并且不可以为 null。

@return 与 <var>key</var> 对应的值。
 
@throws NullPointerException  如果 <var>key</var> 为 <tt>null</tt>
@throws InvalidKeyException   如果 <var>key</var> 不符合此 <tt>TabularData</tt> 实例的 <tt>TabularType</tt> 类型定义。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.openmbean.TabularDataSupport.put(Object key, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法仅调用 <tt>put((CompositeData) value)</tt>，因此忽略其可能为 <tt>null</tt> 的 <var>key</var> 参数。

@param key 被忽略的参数。
@param value 要放入的 {@link CompositeData}。

@return 被放入的值

@throws NullPointerException  如果 <var>value</var> 为 <tt>null</tt>
@throws ClassCastException    如果 <var>value</var> 不属于 <tt>CompositeData</tt> 类型
@throws InvalidOpenTypeException   如果 <var>value</var> 不符合此 <tt>TabularData</tt> 实例的 <tt>TabularType</tt> 定义
@throws KeyAlreadyExistsException   如果根据此 <tt>TabularData</tt> 实例的 <tt>TabularType</tt> 定义计算的 <var>value</var> 参数的键已经映射到一个现有的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.openmbean.TabularDataSupport.remove(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法仅调用 <tt>remove((Object[]) key)</tt>。

@param key 表示要移除键的 <tt>Object[]</tt>。

@return 以前与指定键相关联的值，如果没有该键的映射关系，则返回 <tt>null</tt>。  

@throws NullPointerException  如果 <var>key</var> 为 <tt>null</tt>
@throws ClassCastException    如果 <var>key</var> 不属于 <tt>Object[]</tt> 类型
@throws InvalidKeyException   如果 <var>key</var> 不符合此 <tt>TabularData</tt> 实例的 <tt>TabularType</tt> 定义。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.CompositeData javax.management.openmbean.TabularDataSupport.remove(java.lang.Object[] key)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此 <tt>TabularData</tt> 实例中移除索引为 <var>key</var> 的 <tt>CompositeData</tt> 值，并返回被移除的值，如果不存在索引为 <var>key</var> 的值，则返回 <tt>null</tt>。

@param  key  要获取的此 <tt>TabularData</tt> 实例中值的索引；必须对此 <tt>TabularData</tt> 实例的行类型定义有效；并且不可以为 null。
 
@return 以前与指定键相关联的值，如果没有该键的映射关系，则返回 <tt>null</tt>。  

@throws NullPointerException 如果 <var>key</var> 为 <tt>null</tt>
@throws InvalidKeyException 如果 <var>key</var> 不符合此 <tt>TabularData</tt> 实例的 <tt>TabularType</tt> 定义

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.openmbean.TabularDataSupport.putAll(java.util.Map<?, ?> t)
<!-- END KEY -->
<!-- BEGIN DATA -->
将包含在指定映射 <var>t</var> 中的所有值添加到此 <tt>TabularData</tt> 实例。此方法把包含在此映射中的值的集合转换为 <tt>CompositeData</tt> 值的数组（如果可能），然后调用方法 <tt>putAll(CompositeData[])</tt>。注意，在指定映射 <var>t</var> 中使用的键被忽略。例如，此方法允许将具有相同行类型（但是可能有不同的索引名称）的其他 <tt>TabularData</tt> 实例的内容添加到此实例中。

@param  t  其值作为新行添加到此 <tt>TabularData</tt> 实例中的映射；如果 <var>t</var> 为 <tt>null</tt> 或空，则此方法直接返回而不执行任何操作。
 
@throws NullPointerException  如果 <var>t</var> 中的值为 <tt>null</tt>。
@throws ClassCastException    如果 <var>t</var> 中的值不是 <tt>CompositeData</tt> 的实例。
@throws InvalidOpenTypeException   如果 <var>t</var> 中的值不符合此 <tt>TabularData</tt> 实例的行类型定义。
@throws KeyAlreadyExistsException 如果根据此 <tt>TabularData</tt> 实例的 <tt>TabularType</tt> 定义计算的 <var>t</var> 中的值的索引已经映射到此实例中现有的值，或者 <var>t</var> 中的两个值具有相同的索引。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.openmbean.TabularDataSupport.putAll(javax.management.openmbean.CompositeData[] values)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <var>values</var> 中的所有元素添加到此 <tt>TabularData</tt> 实例。如果根据此 <tt>TabularData</tt> 实例的 <tt>TabularType</tt> 定义计算的 <var>values</var> 中的任何元素都不满足 {@link #put(CompositeData) <tt>put</tt>} 中定义的约束，或者 <var>values</var> 中的任何两个元素具有相同的索引，则抛出一个描述失败的异常，并且不添加 <var>values</var> 的任何元素，因此，此 <tt>TabularData</tt> 实例保持不变。

@param  values  作为新行添加到此 <tt>TabularData</tt> 实例的复合数据值的数组；如果 <var>values</var> 为 <tt>null</tt> 或者为空，则此方法直接返回且不执行任何操作。
 
@throws NullPointerException       如果 <var>values</var> 的一个元素为 <tt>null</tt>
@throws InvalidOpenTypeException   如果 <var>values</var> 的某个元素不符合此 <tt>TabularData</tt> 实例的行类型定义（即其 <tt>TabularType</tt> 定义）
@throws KeyAlreadyExistsException  如果根据此 <tt>TabularData</tt> 实例的 <tt>TabularType</tt> 定义计算的 <var>values</var> 的某个元素的索引已经映射到此实例中现有的值，或者 <var>values</var> 的两个元素具有相同的索引

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.openmbean.TabularDataSupport.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
从此 <code>TabularDataSupport</code> 实例中移除所有行。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.openmbean.TabularDataSupport.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>TabularDataSupport</code> 实例中的行数。

@return 此 <code>TabularDatasupport</code> 实例中的行数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.TabularDataSupport.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 <code>TabularDataSupport</code> 实例不包含任何行，则返回 <tt>true</tt>。

@return 如果此 <code>TabularDataSupport</code> 实例不包含任何行，则返回 <tt>true</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.lang.Object> javax.management.openmbean.TabularDataSupport.keySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含在此 {@code TabularDataSupport} 实例的基础映射中的键的 set 视图，并用于索引行。此 {@code Set} 中包含的每个键都是一个不可修改的 {@code List<?>}。因此返回的 set 示图是一个 {@code Set<List<?>>}，但出于兼容性原因被声明为 {@code Set<Object>}。该 set 受此 {@code TabularDataSupport} 实例的基础映射支持，所以对 {@code TabularDataSupport} 实例的更改可在此 set 中反映出来，反之亦然。该 set 支持元素的移除，通过 {@link Iterator#remove}、{@link Set#remove}、{@link Set#removeAll、{@link Set#retainAll} 和 {@link Set#clear} 操作，从此 {@code TabularDataSupport} 实例中移除相应的行。它不支持 {@link Set#add} 或 {@link Set#addAll} 操作。

@return 用于对此 {@code TabularDataSupport} 实例的行进行索引的键的 set 视图 ({@code Set<List<?>>})。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Collection<java.lang.Object> javax.management.openmbean.TabularDataSupport.values()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含在此 {@code TabularDataSupport} 实例中的行的 collection 视图。返回的 {@code Collection} 是一个 {@code Collection<CompositeData><?>>}，但出于兼容性原因被声明为 {@code Collection<?>}。该 collection 受基础映射支持，所以对 {@code TabularDataSupport} 实例的更改可在此 collection 中反映出来，反之亦然。

该集合支持元素的移除，通过 {@link Iterator#remove}、{@link Collection#remove}、{@link Collection#removeAll}、{@link Collection#retainAll} 和 {@link Collection#clear} 操作，从此 {@code TabularDataSupport} 实例中移除相应的行映射索引。它不支持 {@link Collection#add} 或 {@link Collection#addAll} 操作。

@return 此 {@code TabularDataSupport} 实例中包含的值的 collection 视图 ({@code Collection<CompositeData>})。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> javax.management.openmbean.TabularDataSupport.entrySet()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 {@code TabularDataSupport} 实例中包含的行映射的索引的 collection 视图。在返回的集合中，每个元素都是一个 {@code Map.Entry<List<?>,CompositeData>}，但出于兼容性原因被声明为 {@code Map.Entry<Object,Object>}。 每个映射项键都是一个不可修改的 {@code List<?>}。该 collection 受此 {@code TabularDataSupport} 实例的基础映射支持，因此对 {@code TabularDataSupport} 实例的更改会在该集合中反映出来，反之亦然。该集合支持元素的移除，通过 {@link Iterator#remove}、{@link Collection#remove}、{@link Collection#removeAll}、{@link Collection#retainAll} 和 {@link Collection#clear} 操作，从该映射中移除相应的映射关系。它不支持 {@link Collection#add} 或 {@link Collection#addAll} 操作。
 <p>
<b>重要注意事项</b>：不要使用返回的 collection 视图中包含的 {@code Map.Entry} 元素的 {@code setValue} 方法。这样做会破坏此 {@code TabularDataSupport} 实例中包含的行映射的索引。
 <p>

@return 此映射所包含的映射关系的 collection 视图 ({@code Set<Map.Entry<List<?>,CompositeData>>})。
@see java.util.Map.Entry

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.openmbean.TabularDataSupport.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>TabularDataSupport</code> 实例的一个副本：通过调用 <tt>super.clone()</tt>，然后副本此基础映射，即可得到该副本。仅对此基础映射进行浅表复制，也就是说，由于索引和行值是不可改变的，因此不复制它们。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.TabularDataSupport.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较指定的 <var>obj</var> 参数与此 <code>TabularDataSupport</code> 实例的相等性。 
 <p>
当且仅当下面的所有语句均为 true 时，才返回 <tt>true</tt>：
 <ul>
<li><var>obj</var> 为非 null</li>
<li><var>obj</var> 还实现 <code>TabularData</code> 接口</li>
<li>它们的表格类型相同</li>
<li>它们的内容（即所有的 CompositeData 值）相等</li>
 </ul>
这确保了此 <tt>equals</tt> 方法对作为 <code>TabularData</code> 接口的不同实现的 <var>obj</var> 参数正常工作。<br>&#xA0;
@param  obj  与此 <code>TabularDataSupport</code> 实例进行相等性比较的对象。
 
@return 如果指定的对象等于此 <code>TabularDataSupport</code> 实例，则返回 <code>true</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.openmbean.TabularDataSupport.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>TabularDataSupport</code> 实例的哈希码值。
 <p>
<code>TabularDataSupport</code> 实例的哈希码是 <code>equals</code> 比较中使用的信息的所有元素的哈希码总和（即其<i>表格类型</i> 和内容，其中内容被定义为所有 CompositeData 值）。  
 <p>
这确保 <code>t1.equals(t2)</code> 意味着对于任何两个 <code>TabularDataSupport</code> 实例 <code>t1</code> 和 <code>t2</code> 而言，都存在 <code>t1.hashCode()==t2.hashCode()</code>，这是方法 {@link Object#hashCode() Object.hashCode()} 的通用协定所要求的。
 <p>
不过请注意，根据 {@link #equals} 中的定义，实现 <code>TabularData</code> 接口的类的其他实例可能与此 <code>TabularDataSupport</code> 实例相等，但是如果它的计算方法不同，可能会有不同的哈希码。

@return 此 <code>TabularDataSupport</code> 实例的哈希码值

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.openmbean.TabularDataSupport.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>TabularDataSupport</code> 实例的字符串表示形式。 
 <p>
该字符串表示形式由此类（即 <code>javax.management.openmbean.TabularDataSupport</code>）的名称、此实例的表格类型的字符串表示形式、内容的字符串表示形式（即列出按照对 <tt>dataMap.</tt>{@link java.util.HashMap#toString() toString()} 的调用所返回的 key=value 映射关系）组成。
 
@return  此 <code>TabularDataSupport</code> 实例的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.openmbean.TabularDataSupport.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 {@link ObjectInputStream} 反序列化 {@link TabularDataSupport}。

<!-- END DATA -->
