<!-- BEGIN KEY -->
public class javax.management.openmbean.OpenMBeanOperationInfoSupport extends javax.management.MBeanOperationInfo implements javax.management.openmbean.OpenMBeanOperationInfo
<!-- END KEY -->
<!-- BEGIN DATA -->
描述 Open MBean 的一个操作。

@version     3.25  03/12/19
@author      Sun Microsystems, Inc.

@since 1.5
@since.unbundled JMX 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.management.openmbean.OpenType<?> javax.management.openmbean.OpenMBeanOperationInfoSupport.returnOpenType
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial  此 {@link OpenMBeanOperationInfo} 实例描述的操作所返回的值的<i>开放类型</i>。


<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.OpenMBeanOperationInfoSupport(String name, String description, javax.management.openmbean.OpenMBeanParameterInfo[] signature, javax.management.openmbean.OpenType<?> returnOpenType, int impact)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>构造一个 {@code OpenMBeanOperationInfoSupport} 实例，该实例使用指定的 {@code name}、{@code description}、{@code signature}、{@code returnOpenType} 和 {@code
 impact} 描述 open MBeans 的类的操作。</p>
 <p>
{@code signature} 数组参数是被内部复制的，因此对 {@code signature} 引用的数组的后续更改不影响此实例。</p>

@param name  不可以为 null 或空字符串。

@param description  不可以为 null 或空字符串。

@param signature  如果没有要描述的任何参数，可以为 null 或空。

@param returnOpenType  不可以为 null：将 {@code
 SimpleType.VOID} 用于不返回任何内容的操作。

@param impact 只能是 {@code ACTION}、{@code
 ACTION_INFO}、{@code INFO} 或 {@code UNKNOWN} 之一。

@throws IllegalArgumentException  如果 {@code name} 或 {@code
 description} 为 null 或空字符串；如果 {@code
 returnOpenType} 为 null；如果 {@code impact} 不是 {@code
 ACTION}、{@code ACTION_INFO}、{@code INFO} 或 {@code UNKNOWN} 之一。

@throws ArrayStoreException  如果 {@code signature} 不是 {@code MBeanParameterInfo} 的子类实例的数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.OpenMBeanOperationInfoSupport(String name, String description, javax.management.openmbean.OpenMBeanParameterInfo[] signature, javax.management.openmbean.OpenType<?> returnOpenType, int impact, Descriptor descriptor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>构造一个 {@code OpenMBeanOperationInfoSupport} 实例，该实例使用指定的 {@code name}、{@code description}、{@code signature}、{@code returnOpenType}、{@code impact} 和 {@code descriptor} 来描述 open MBean 类的操作。</p>

 <p>{@code signature} 数组参数是被内部复制的，因此对 {@code signature} 引用的数组的后续更改不影响此实例。</p>

 @param name 不可以为 null 或空字符串。

 @param description 不可以为 null 或空字符串。

 @param signature 如果没有要描述的任何参数，可以为 null 或空。

 @param returnOpenType 不可以为 null：将 {@code SimpleType.VOID} 用于不返回任何内容的操作。

 @param impact 必须为 {@code ACTION}、{@code ACTION_INFO}、{@code INFO} 或 {@code UNKNOWN} 之一。

 @param descriptor 操作的描述符。此参数可以为 null，其等效于一个空描述符。

 @throws IllegalArgumentException 如果 {@code name} 或 {@code description} 为 null 或 空字符串；如果 {@code returnOpenType} 为 null；如果 {@code impact} 不是 {@code ACTION}、{@code ACTION_INFO}、{@code INFO} 或 {@code UNKNOWN} 之一。

 @throws ArrayStoreException 如果 {@code signature} 不是 {@code MBeanParameterInfo} 的子类实例的数组。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.OpenType<?> javax.management.openmbean.OpenMBeanOperationInfoSupport.getReturnOpenType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 {@code OpenMBeanOperationInfo} 实例描述的操作所返回的值的<i>开放类型</i>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.OpenMBeanOperationInfoSupport.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较指定的 {@code obj} 参数与此 {@code OpenMBeanOperationInfoSupport} 实例的相等性。 
 <p>
当且仅当下面的所有语句均为 true 时，才返回 {@code true}：
 <ul>
<li>{@code obj} 为非 null，</li>
<li>{@code obj} 还实现 {@code OpenMBeanOperationInfo} 接口，</li>
<li>它们的名称相等</li>
<li>它们的签名相等</li>
<li>它们的返回开放类型相等</li>
<li>它们的效果相等</li>
 </ul>
这确保了此 {@code equals} 方法对作为 {@code OpenMBeanOperationInfo} 接口的不同实现的 {@code obj} 参数正常工作。<br>&#xA0;
@param  obj  与此 {@code OpenMBeanOperationInfoSupport} 实例进行相等性比较的对象；
 
@return 如果指定的对象等于此 {@code OpenMBeanOperationInfoSupport} 实例，则返回 {@code true}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.openmbean.OpenMBeanOperationInfoSupport.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回此 {@code OpenMBeanOperationInfoSupport} 实例的哈希码值。</p> 
 <p>
{@code OpenMBeanOperationInfoSupport} 实例的哈希码是在 {@code equals} 比较中使用的所有信息元素的哈希码的总和（即它的名称、返回开放类型、效果和签名，其中签名哈希码通过调用 {@code java.util.Arrays.asList(this.getSignature).hashCode()} 来计算）。 </p> 
 <p>
这确保 {@code t1.equals(t2)} 意味着对于任何两个 {@code OpenMBeanOperationInfoSupport} 实例 {@code t1} 和 {@code t2} 而言，都存在 {@code t1.hashCode()==t2.hashCode()}，这是方法 {@link Object#hashCode() Object.hashCode()} 的通用协定所要求的。</p>
 <p>
不过请注意，根据 {@link #equals(java.lang.Object)} 中的定义，实现 {@code OpenMBeanOperationInfo} 接口的类的其他实例可能与此 {@code OpenMBeanOperationInfoSupport} 实例相等，但是如果它的计算方法不同，可能会有不同的哈希码。</p>
 <p>
由于 {@code OpenMBeanOperationInfoSupport} 实例是不可变的，此实例的哈希码在首次调用 {@code hashCode} 时被计算，因此对后续调用返回相同的值。</p>

@return  此 {@code OpenMBeanOperationInfoSupport} 实例的哈希码值

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.openmbean.OpenMBeanOperationInfoSupport.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回此 {@code OpenMBeanOperationInfoSupport} 实例的字符串表示形式。</p> 
 <p>
字符串表示形式由此类（即 {@code
 javax.management.openmbean.OpenMBeanOperationInfoSupport}）的名称和所描述操作的名称、签名、返回开放类型和效果组成。</p>
 <p>
由于 {@code OpenMBeanOperationInfoSupport} 实例是不可变的，此实例的字符串表示形式在首次调用 {@code toString} 时被计算一次，然后对后续调用返回相同的值。</p>
 
@return  此 {@code OpenMBeanOperationInfoSupport} 实例的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Object javax.management.openmbean.OpenMBeanOperationInfoSupport.readResolve()
<!-- END KEY -->
<!-- BEGIN DATA -->
 An object serialized in a version of the API before Descriptors were
 added to this class will have an empty or null Descriptor.
 For consistency with our
 behavior in this version, we must replace the object with one
 where the Descriptors reflect the same value of returned openType.

<!-- END DATA -->
