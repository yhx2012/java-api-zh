<!-- BEGIN KEY -->
public interface javax.management.monitor.CounterMonitorMBean extends javax.management.monitor.MonitorMBean
<!-- END KEY -->
<!-- BEGIN DATA -->
公开计数器监视器 MBean 的远程管理接口。

@version     4.27     11/17/05
@author      Sun Microsystems, Inc.

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.management.monitor.CounterMonitorMBean.getDerivedGauge()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取派生的尺度。

@return 派生的尺度。
@deprecated 从 JMX 1.2 开始，由 {@link #getDerivedGauge(ObjectName)} 取代

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.management.monitor.CounterMonitorMBean.getDerivedGaugeTimeStamp()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取派生的尺度时间戳。

@return 派生的尺度时间戳。
@deprecated 从 JMX 1.2 开始，由 {@link #getDerivedGaugeTimeStamp(ObjectName)} 取代

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.management.monitor.CounterMonitorMBean.getThreshold()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取阈值。

@return 阈值。

@see #setThreshold(Number)

@deprecated 从 JMX 1.2 开始，由 {@link #getThreshold(ObjectName)} 取代

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.monitor.CounterMonitorMBean.setThreshold(Number value) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置阈值。

@see #getThreshold()

@param value 阈值。
@exception java.lang.IllegalArgumentException 指定的阈值为 null，或者阈值小于零。
@deprecated 从 JMX 1.2 开始，由 {@link #setInitThreshold} 取代

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.management.monitor.CounterMonitorMBean.getDerivedGauge(ObjectName object)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定的 MBean 的派生尺度。

@param object 将为其返回派生尺度的 MBean
@return 如果指定的 MBean 在所观察的 MBean 集中，则返回该 MBeans 的派生尺度，否则，返回 <code>null</code>。

@since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.management.monitor.CounterMonitorMBean.getDerivedGaugeTimeStamp(ObjectName object)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定 MBean 的派生尺度时间戳。

@param object 将为其返回派生的尺度时间戳的 MBean
@return 如果指定的 MBean 在所观察的 MBean 集中，则返回该 MBeans 的派生尺度时间戳，否则返回 <code>null</code>。

@since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.management.monitor.CounterMonitorMBean.getThreshold(ObjectName object)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定 MBean 的阈值。

@param object 将为其返回阈值的 MBean
@return 如果指定 MBean 在所观察的 MBean 集中，则返回该 MBeans 的阈值，否则返回 <code>null</code>。

@see #setThreshold

@since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.management.monitor.CounterMonitorMBean.getInitThreshold()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取所有 observed 对象的公共初始阈值。

@return 初始阈值。

@see #setInitThreshold

@since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.monitor.CounterMonitorMBean.setInitThreshold(Number value) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置所有观察到的 MBeans 的公共初始阈值。

@param value 初始阈值。
@exception java.lang.IllegalArgumentException 指定的阈值为 null，或者阈值小于零。

@see #getInitThreshold

@since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.management.monitor.CounterMonitorMBean.getOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取偏移值。

@see #setOffset(Number)

@return 偏移量值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.monitor.CounterMonitorMBean.setOffset(Number value) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置偏移量值。

@param value 偏移量值。
@exception java.lang.IllegalArgumentException 指定的偏移量值为 null，或者该偏移量值小于零。

@see #getOffset()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.management.monitor.CounterMonitorMBean.getModulus()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取模值。

@return 模值。

@see #setModulus

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.monitor.CounterMonitorMBean.setModulus(Number value) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置模值。

@param value 模值。
@exception java.lang.IllegalArgumentException 指定的模为 null，或者该模小于零。

@see #getModulus

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.monitor.CounterMonitorMBean.getNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取通知的开/关切换值。

@return 如果超出阈值时计数器监视器发出通知，则返回 <CODE>true</CODE>，否则返回 <CODE>false</CODE>。

@see #setNotify

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.monitor.CounterMonitorMBean.setNotify(boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置通知的开/关切换值。

@param value 通知的开/关切换值。

@see #getNotify

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.monitor.CounterMonitorMBean.getDifferenceMode()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取差分模式标志值。

@return 如果使用了差分模式，则返回 <CODE>true</CODE>；否则返回 <CODE>false</CODE>。

@see #setDifferenceMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.monitor.CounterMonitorMBean.setDifferenceMode(boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置差分模式标志值。

@param value 差分模式标志值。

@see #getDifferenceMode

<!-- END DATA -->
