<!-- BEGIN KEY -->
javax.management.monitor
<!-- END KEY -->
<!-- BEGIN DATA -->

<p>提供 monitor 类的定义。Monitor 是一个 MBeans，它定期观察一个或多个其他 MBeans 中的属性值。如果某个属性满足特定的条件，则 Monitor 将发出一个 {@link javax.management.monitor.MonitorNotification MonitorNotification}。当监视器 MBean 定期调用 {@link javax.management.MBeanServer#getAttribute getAttribute} 检索被监视的属性值时，它在 {@link javax.management.monitor.Monitor#start} 调用者的访问控制上下文中执行该操作。</p>


<p>被监视的值可以是一个包含在复合类型中的简单值。例如，<tt>java.lang.management</tt> 中定义的 {@link java.lang.management.MemoryMXBean MemoryMXBean} 具有一个类型为 {@link java.lang.management.MemoryUsage MemoryUsage} 的 <tt>HeapMemoryUsage</tt> 属性。要监视<i>已用</i> 内存量（由 <tt>MemoryUsage</tt> 的 <tt>used</tt> 属性描述），您可以监视 "<tt>HeapMemoryUsage.used</tt>"。该字符串应该做为 {@link javax.management.monitor.MonitorMBean#setObservedAttribute(String) setObservedAttribute} 的参数。</p>

<p>用来解释 <tt>"HeapMemoryUsage.used"</tt> 之类的 <tt>ObservedAttribute</tt> 的规则如下。假设字符串为 <i>A.e</i>（因此在该例中 <i>A</i> 为 <tt>"HeapMemoryUsage"</tt>，<i>e</i> 为 <tt>"used"</tt>）。</p>

<p>首先获得属性 <i>A</i> 的值。称之为 <i>v</i>。按以下方式从 <i>v</i> 中提取值 <i>x</i>：</p>

      <ul>
      <li>如果 <i>v</i> 为 {@link javax.management.openmbean.CompositeData CompositeData} 且 <i>v</i>.{@link javax.management.openmbean.CompositeData#get(String) get}(<i>e</i>) 返回一个值，则 <i>x</i> 就是返回的那个值。</li>
      <li>如果 <i>v</i> 是数组且 <i>e</i> 为字符串 <tt>"length"</tt>，则 <i>x</i> 为该数组的长度。</li>
      <li>如果以上规则无法生成一个值，且类 <i>v</i> (<i>v</i>.<tt>getClass()</tt>) {@link java.beans.Introspector#getBeanInfo(Class) Introspector.getBeanInfo} 包含一个具有名称 <i>e</i> 的 {@link java.beans.PropertyDescriptor PropertyDescriptor}，则 <i>x</i> 为对 <i>v</i> 调用属性{@link java.beans.PropertyDescriptor#getReadMethod() 读取方法}的结果。</li>
      </ul>

      <p>第三个规则意味着，如果属性 <tt>HeapMemoryUsage</tt> 为 <tt>MemoryUsage</tt>，则监视 <tt>"HeapMemoryUsage.used"</tt> 将获得调用 <tt>MemoryUsage.getUsed()</tt> 观察到的值。</p>

      <p>如果 <tt>ObservedAttribute</tt> 包含一个以上的句号 (".")，例如 <tt>"ConnectionPool.connectionStats.length"</tt>，则迭代地应用上述规则。其中 <i>v</i> 最初是属性 <tt>ConnectionPool</tt> 的值，<i>x</i> 是在 <i>e</i> 等于 <tt>"connectionStats"</tt> 的情况下应用上述规则导出的。然后 <i>v</i> 将被设置为此 <i>x</i>，并将在 <i>e</i> 等于 <tt>"length"</tt> 的情况下导出一个新的 <i>x</i>。</p>

      <p>建议使用有效的 Java 标识符作为属性名称，但将属性取名为 <tt>HeapMemoryUsage.used</tt> 也是可能的。这意味着作为 <tt>HeapMemoryUsage.used</tt> 的 <tt>ObservedAttribute</tt> 表示要观察的值可能是该名称的属性，也可能是一个名为 <tt>HeapMemoryUsage</tt> 的属性内部的属性 <tt>used</tt>。故出于兼容性原因，当 <tt>ObservedAttribute</tt> 包含一个句号 (<tt>.</tt>) 时，监视器将检查是否存在一个名称为完整 <tt>ObservedAttribute</tt> 字符串（示例中的 <tt>HeapMemoryUsage.used</tt>）的属性。它实现这一点的方式如下：对被观察的 MBean 调用 {@link javax.management.MBeanServer#getMBeanInfo(javax.management.ObjectName) getMBeanInfo}，并使用给定名称查询被包含的 {@link javax.management.MBeanAttributeInfo MBeanAttributeInfo}。如果能找到，则它就是被监视的内容。如果正观察多个 MBean，且其中一些有 <tt>HeapMemoryUsage.used</tt> 属性而另一些却没有时，行为是不确定的。在这种情况下，一个实现可能因此只对其中一个 MBean 调用 <tt>getMBeanInfo</tt>。如果在监视器激活的情况下检查的结果发生更改，则行为也是不确定的。</p>

<p>《<a href="#spec">JMX 规范</a>》中详细叙述了监视器的具体行为。下面是有关的概述。</p>

<p>共有三种监视器：</p>

      <ul>
	<li>

	  <p>{@link javax.management.monitor.CounterMonitor CounterMonitor} 观察整数类型的属性。假定这些属性为非负数，并且单调递增（以指定的<em>模</em> 进行的可能<em>回滚</em> 除外）。每个 observed 属性都具有相关的<em>阈值</em>。当属性超过其阈值时将发出一个通知。</p>
	  
	  <p>可以指定一个<em>偏移量</em> 值。当被观察值超过其阈值时，该阈值应按偏移量递增，或者按偏移量的倍数递增，以使其阈值足大于新的被观察值。</p>

	  <p><code>CounterMonitor</code> 可以在<em>不同的模式</em> 下操作。在本模式中，与阈值比较所得的值就是对属性的两次连续观察值之间的差分。</p>
	  
	</li>
	<li>

	  <p>{@link javax.management.monitor.GaugeMonitor GaugeMonitor} 观察数字类型的属性。每个被观察属性都具有相关的<em>高阈值</em> 和<em>低阈值</em>。</p>

	  <p>当 observed 属性超过高阈值时，如果 <em>notify high</em> 标记为 true，则发送一个通知。在尺度值变得小于或等于低阈值之前，后续的超出高阈值的情况不会触发更多的通知。</p>

	  <p>当 observed 属性低于低阈值时，如果 <em>notify low</em> 标记为 true，则发送一个通知。在尺度值变得小于或等于高阈值之前，后续的超出低阈值的情况不会触发更多的通知。</p>

	  <p>一般情况下，仅设置 notify high 和 notify low 标志中的一个。使用其他阈值来提供<em>滞后</em> 机制，以避免属性值在阈值附近进行小幅度摆动时重复触发通知。</p>

	  <p><code>GaugeMonitor</code> 可以在<em>不同的模式</em> 操作。在本模式中，与高、低阈值相比得出的值就是对属性的两次连续观察值之间的差分。</p>

	</li>
	<li>

	  <p>{@link javax.management.monitor.StringMonitor StringMonitor} 观察类型为 <code>String</code> 的属性。当 observed 属性变得等于和/或不等于指定的字符串时，将发出一个通知。</p>

	</li>
      </ul>

<p id="spec">
    @see <a href="{@docRoot}/../technotes/guides/jmx/">
      Java SE 6 Platform documentation on JMX technology</a>，
    特别是 
    <a href="{@docRoot}/../technotes/guides/jmx/JMX_1_4_specification.pdf">
      JMX Specification, version 1.4(pdf)。</a>

@since 1.5


<!-- END DATA -->
