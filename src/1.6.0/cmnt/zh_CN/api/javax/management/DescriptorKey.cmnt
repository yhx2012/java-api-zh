<!-- BEGIN KEY -->
public interface class javax.management.DescriptorKey implements java.lang.annotation.Annotation
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>描述注释元素与 {@link Descriptor} 中字段之间关联方式的元注释。它可以是 MBean 的 Descriptor，也可以是 MBean 中属性、操作或构造方法的 Descriptor，还可以是操作或构造方法的参数的 Descriptor。</p>

<p>考虑下例中的注释：</p>

 <pre>
 &#64;Documented
 &#64;Target(ElementType.METHOD)
 &#64;Retention(RetentionPolicy.RUNTIME)
 public &#64;interface Units {
     <b>&#64;DescriptorKey("units")</b>
     String value();
 }
 </pre>

<p>以及注释的这种用法：</p>

 <pre>
public interface CacheControlMBean {
<b>@Units(&quot;bytes&quot;)</b>
public long getCacheSize();
 }
 </pre>

<p>当 Standard MBean 由 {@code CacheControlMBean} 生成时，通常的规则意味着它将有一个称为 {@code CacheSize} 的类型为 {@code long} 的属性。在给定上述定义的情况下，{@code @Units} 属性将确保此属性的 {@link MBeanAttributeInfo} 将具有一个 {@code Descriptor}，该 {@code Descriptor} 有一个称为 {@code units} 的字段，且其相应的值为 {@code bytes}。</p>

<p>类似地，如果注释的形式如下：</p>

 <pre>
 &#64;Documented
 &#64;Target(ElementType.METHOD)
 &#64;Retention(RetentionPolicy.RUNTIME)
 public &#64;interface Units {
     <b>&#64;DescriptorKey("units")</b>
     String value();

     <b>&#64;DescriptorKey("descriptionResourceKey")</b>
     String resourceKey() default "";

     <b>&#64;DescriptorKey("descriptionResourceBundleBaseName")</b>
     String resourceBundleBaseName() default "";
 }
 </pre>

<p>且用法如下：</p>

 <pre>
public interface CacheControlMBean {
<b>@Units(&quot;bytes&quot;,
resourceKey=&quot;bytes.key&quot;,
resourceBundleBaseName=&quot;com.example.foo.MBeanResources&quot;)</b>
public long getCacheSize();
 }
 </pre>

<p>则得到的 {@code Descriptor} 将包含以下字段：</p>

 <table border="2">
<tr><th>名称</th><th>值</th></tr>
<tr><td>units</td><td>&quot;bytes&quot;</td></tr>
<tr><td>descriptionResourceKey</td><td>&quot;bytes.key&quot;</td></tr>
<tr><td>descriptionResourceBundleBaseName</td>
<td>&quot;com.example.foo.MBeanResources&quot;</td></tr>
 </table>

<p>{@code @Units} 之类的注释可以应用于：</p>

 <ul>
<li>Standard MBean 或 MXBean 接口；
<li>此类接口中的方法；
<li>当某方法是一个操作（不是属性的获取方法或设置方法）时，Standard MBean 或 MXBean 接口中该方法的参数；
<li>在实现 Standard MBean 或 MXBean 的类中的公共构造方法；
<li>此类构造方法中的参数。
 </ul>

<p>忽略注释的其他用途。</p>

<p>只在定义 Standard MBean 或 MXBean 的管理接口的具体接口上检查接口注释，而不在其父接口上检查。只在方法出现的最具体的接口中检查方法注释；换句话说，如果子接口重写了父接口中的方法，则只考虑子接口中该方法中的 {@code @DescriptorKey} 注释。

<p>由同一个程序元素上的不同注释提供的 Descriptor 字段必须一致。也就是说，两个不同注释或同一注释的两个成员不得为同一 Descriptor 字段定义不同的值。获取方法上的注释字段也必须与相应设置方法上的注释字段一致。</p>

<p>从这些注释中得到的 Descriptor 将与实现提供的任何 Descriptor 字段合并，如 MBean 的 <a href="Descriptor.html#immutableInfo">{@code immutableInfo}</a> 字段。注释中的字段必须与实现提供的这些字段一致。</p>

<p>要转换为描述符字段的注释元素可以是 Java 语言允许的任何类型，注释或注释数组除外。字段值由以下注释元素的值导出：</p>

 <table border="2">
<tr><th>注释元素</th><th>描述符字段</th></tr>
<tr><td>基本类型值（{@code 5}、{@code false} 等）</td>
<td>包装值（{@code Integer.valueOf(5)}、{@code Boolean.FALSE} 等）</td></tr>
<tr><td>类常量（如 {@code Thread.class}）</td>
<td>{@link Class#getName()} 得到的类名称（如 {@code &quot;java.lang.Thread&quot;}）</td></tr>
<tr><td>枚举常量（如 {@link ElementType#FIELD}）</td>
<td>{@link Enum#name()} 得到的常量名称（如 {@code &quot;FIELD&quot;}）</td></tr>
<tr><td>类常量或枚举常量组成的数组</td>
<td>将这些规则应用于每个元素而派生的字符串数组</td></tr>
<tr><td>任何其他类型的值<br>（{@code String}、{@code String[]}、{@code int[]} 等）</td>
<td>相同的值</td></tr>
 </table>

@since 1.6

<!-- END DATA -->


