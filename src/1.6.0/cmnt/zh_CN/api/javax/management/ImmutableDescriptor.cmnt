<!-- BEGIN KEY -->
public class javax.management.ImmutableDescriptor extends java.lang.Object implements javax.management.Descriptor
<!-- END KEY -->
<!-- BEGIN DATA -->
不可变的描述符。
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.management.ImmutableDescriptor javax.management.ImmutableDescriptor.EMPTY_DESCRIPTOR
<!-- END KEY -->
<!-- BEGIN DATA -->
空描述符。

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.String[] javax.management.ImmutableDescriptor.names
<!-- END KEY -->
<!-- BEGIN DATA -->
此 ImmutableDescriptor 中具有其原始大小写的字段名称。名称必须按 
{@link String#CASE_INSENSITIVE_ORDER} 确定的方式以字母顺序排列。

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.Object[] javax.management.ImmutableDescriptor.values
<!-- END KEY -->
<!-- BEGIN DATA -->
此 ImmutableDescriptor 中字段的值。此数组中的元素与 
{@code names} 数组中的相应元素匹配。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.ImmutableDescriptor(java.lang.String[] fieldNames, java.lang.Object[] fieldValues)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造包含给定字段和值的描述符。

@throws IllegalArgumentException  如果数组为 null、数组的大小不同、字段名称为 null 或空，或者相同的字段名称出现多次。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.ImmutableDescriptor(java.lang.String[] fields)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造包含给定字段的描述符。每个 String 都必须是 {@code fieldName=fieldValue} 的形式。字段名称在第一个 {@code =} 字符处结束；例如，如果 String 为 {@code a=b=c}，则字段名称为 {@code a} 且其值为 {@code b=c}。

@throws IllegalArgumentException  如果参数为 null、字段名称为空、相同字段名称出现多次或者其中一个字符串不包含 {@code =} 字符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.ImmutableDescriptor(java.util.Map<java.lang.String, ?> fields)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>构造一个描述符，其中字段名称和值是给定 Map 的键和值。</p>

@throws IllegalArgumentException  如果参数为 null、字段名称为 null 或空，或者相同字段名称出现多次（可能因为字段名称不区分大小写所致）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.ImmutableDescriptor javax.management.ImmutableDescriptor.union(javax.management.Descriptor[] descriptors)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回一个 {@code ImmutableDescriptor}，其内容是给定描述符的并集。出现在任何描述符中的每个字段名称都将出现在结果中，并具有调用方法时字段名称所具有的值。对任何描述符的后续更改不影响此处返回的 ImmutableDescriptor。</p>

<p>在最简单的情况下，只有一个描述符，且返回的 {@code ImmutableDescriptor} 是在调用此方法时该描述符中字段的副本：</p>

 <pre>
Descriptor d = something();
ImmutableDescriptor copy = ImmutableDescriptor.union(d);
 </pre>

@param descriptors  要合并的描述符。任何描述符都可以为 null，在此情况下可以将其跳过。

@return  作为给定描述符并集的 {@code ImmutableDescriptor}。如果它是一个包含所有所需字段的 ImmutableDescriptor，则返回的对象可以与某个输入描述符相同。

@throws IllegalArgumentException  如果两个 Descriptor 包含具有不同关联值的相同字段名称。如果基本类型数组值是具有相同元素的同一类型的值，则将其视为相同。如果 {@link Arrays#deepEquals(Object[],Object[])} 返回 true，则将对象数组值视为相同。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.ImmutableDescriptor.equals(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此描述符与给定对象进行比较。如果给定对象也是一个 Descriptor，并且两个 Descriptor 具有相同的字段名（可能有不同的情况）且有相同的关联值，则对象相等。如果具备下列条件，则两个 Descriptor 中字段的各个值都相等：</p>
 
 <ul>
<li>如果一个值为 null，则其他值也必须为 null。</li>
<li>如果一个值是基本类型数组，则其他值必须是同一类型的基本类型数组，且具有相同的元素。</li>
<li>如果一个值是对象数组，则其他值也必须是对象数组，并且 {@link Arrays#deepEquals(Object[],Object[])} 必须返回 true。</li>
<li>其他情况下，{@link Object#equals(Object)} 必须返回 true。</li>
 </ul>

@param o 要与之比较的对象。

@return 如果对象相等，则返回 {@code true}；否则返回 {@code false}。


<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.ImmutableDescriptor.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回此描述符的哈希码值。该哈希码是描述符中每个字段的哈希码的总和。名称为 {@code n} 且值为 {@code v} 的字段的哈希码是 {@code n.toLowerCase().hashCode() ^ h}。这里的 {@code h} 是 {@code v} 的哈希码，计算方式如下：</p>
 
 <ul>
<li>如果 {@code v} 为 null，则 {@code h} 为 0。</li>
<li>如果 {@code v} 是基本类型数组，则使用 {@code java.util.Arrays.hashCode} 的适当重载形式计算 {@code h}。</li>
<li>如果 {@code v} 是对象数组，则使用 {@link Arrays#deepHashCode(Object[])} 计算 {@code h}。</li>
<li>否则，{@code h} 为 {@code v.hashCode()}。</li>
 </ul>

@return 此对象的哈希码值。


<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.ImmutableDescriptor.isValid()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果所有字段在给定其名称的情况下都有合法值，则返回 true。此方法总是返回 true，但子类可以重写它，以便在适当的时候返回 false。
 
@return 如果值是合法的，则返回 true。
 
@exception RuntimeOperationsException 如果有效性检查失败。如果描述符无效，则该方法返回 false，但如果尝试确定有效性失败，则将抛出此异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.Descriptor javax.management.ImmutableDescriptor.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回一个与此描述符相等的描述符。对返回的描述符进行的更改不影响此描述符，反之亦然。</p>

<p>此方法返回它调用的对象。子类可以重写此方法，以便在符合条件的情况下返回另一个对象。

@exception RuntimeOperationsException 如果 Names 或 Values 字段的值为非法值。如果描述符构造由于任何原因而失败，都将抛出此异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.management.ImmutableDescriptor.setFields(java.lang.String[] fieldNames, java.lang.Object[] fieldValues) throws javax.management.RuntimeOperationsException
<!-- END KEY -->
<!-- BEGIN DATA -->
因为此类不可变，所以不支持此操作。如果此调用此方法会更改具有相同内容的可变描述符，则抛出包装 {@link UnsupportedOperationException} 的 {@link RuntimeOperationsException}。否则，其行为将与可变描述符的行为相同：要么因为非法参数而抛出异常，要么无效。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.management.ImmutableDescriptor.setField(String fieldName, Object fieldValue) throws javax.management.RuntimeOperationsException
<!-- END KEY -->
<!-- BEGIN DATA -->
因为此类不可变，所以不支持此操作。如果此调用此方法会更改具有相同内容的可变描述符，则抛出包装 {@link UnsupportedOperationException} 的 {@link RuntimeOperationsException}。否则，其行为将与可变描述符的行为相同：要么因为非法参数而抛出异常，要么无效。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.management.ImmutableDescriptor.removeField(String fieldName)
<!-- END KEY -->
<!-- BEGIN DATA -->
从描述符移除字段。

@param fieldName 要移除的字段的 String 名称。如果字段名不合法或找不到字段，则不抛出任何异常。

@exception RuntimeOperationsException 如果存在给定名称的字段且描述符不可变。包装的异常将是一个 {@link UnsupportedOperationException}。

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Object javax.management.ImmutableDescriptor.readResolve() throws java.io.InvalidObjectException
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法可以使用另一个实例替换此类的反序列化实例。例如，它可以使用 {@link #EMPTY_DESCRIPTOR} 替换反序列化的空 ImmutableDescriptor。

@return 替换对象，可以为 {@code this}。

@throws InvalidObjectException 如果读取的对象包含无效字段。

<!-- END DATA -->
