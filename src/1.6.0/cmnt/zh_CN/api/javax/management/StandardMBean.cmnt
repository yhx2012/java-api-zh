<!-- BEGIN KEY -->
public class javax.management.StandardMBean extends java.lang.Object implements javax.management.DynamicMBean, javax.management.MBeanRegistration
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>一个管理接口由 Java 接口上的反射确定的 MBean。</p>

<p>在 Standard MBean 的使用中，此类为&ldquo;管理接口&rdquo;这一概念提供了更多灵活性。直接使用 JMX 规范中介绍的 Standard MBean 模式意味着在 MBean 的实现类与其管理接口之间存在着固定的关系（即如果实现类是 Thing，则管理接口必须是 ThingMBean）。此类能够保留指定带有 Java 接口的管理接口这一便捷性，同时无需在实现与接口类之间存在任何命名关系。</p>

<p>通过从 MBean 中生成 DynamicMBean，此类能够选择任何由 MBean 实现的接口作为其管理接口，但前提是它必须遵守 JMX 模式（即由获取方法/设置方法等定义的属性）。</p>

<p> 此类还提供了一些钩子，从而能够为由 DynamicMBean 接口返回的 {@link MBeanInfo} 提供自定义描述和名称。</p>

<p>通过使用此类，可以使用以下两种常规方法之一创建 MBean，使用任何实现类名 <i>Impl</i>、由任何接口 <i>Intf</i> 定义的管理接口（就当前 Standard MBean 而言）作为参数：</p>

 <ul>

<li>使用公共构造方法 {@link #StandardMBean(java.lang.Object, java.lang.Class, boolean) StandardMBean（impl、interface）}：
     <pre>
     MBeanServer mbs;
     ...
     Impl impl = new Impl(...);
     StandardMBean mbean = new StandardMBean(impl, Intf.class, false);
     mbs.registerMBean(mbean, objectName);
     </pre></li>

<li>创建 StandardMBean 子类：
     <pre>
     public class Impl extends StandardMBean implements Intf {
        public Impl() {
         super(Intf.class, false);
       }
       // implement methods of Intf
     }

     [...]

     MBeanServer mbs;
     ....
     Impl impl = new Impl();
     mbs.registerMBean(impl, objectName);
     </pre></li>

 </ul>

<p>在任何一种情况下，类 <i>Impl</i> 都必须实现接口 <i>Intf</i>。</p>

<p>当然，基于实现和接口类之间的命名关系的 Standard MBean 仍然可用。</p>

 <p>此类也可以用来构造 MXBean。用法与构造 Standard MBean 完全相同，唯一的不同之处在于，上例中的构造方法或 {@code super(...)} 调用使用的是 {@code false} 参数，而不是 {@code true} 参数。</p>

@since 1.5
@since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.StandardMBean(T implementation, java.lang.Class<T> mbeanInterface) throws javax.management.NotCompliantMBeanException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>使用指定的 <var>mbeanInterface</var> 类从对象 <var>implementation</var> 中生成 DynamicMBean。</p>

@param implementation 此 MBean 的实现。
@param mbeanInterface 由此 MBean 实现导出的管理接口。如果为 <code>null</code>，则此对象将使用标准 JMX 设计模式来确定与指定实现关联的管理接口。
@param <T> 允许编译器检查 {@code implementation} 是否确实实现了 {@code mbeanInterface} 描述的类。编译器只在 {@code mbeanInterface} 是 {@code MyMBean.class} 之类的类字面值时才能进行检查。

@exception IllegalArgumentException 如果给定的 <var>implementation</var> 为 null
@exception NotCompliantMBeanException 如果 <var>mbeanInterface</var> 不遵守管理接口的 JMX 设计模式，或者给定的 <var>implementation</var> 没有实现指定的接口。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.management.StandardMBean(java.lang.Class<?> mbeanInterface) throws javax.management.NotCompliantMBeanException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>使用指定的 <var>mbeanInterface</var> 类从 <var>this</var> 中生成 DynamicMBean。</p>

<p>调用 {@link #StandardMBean（java.lang.Object、java.lang.Class） this（this、mbeanInterface）}。此构造方法是为子类保留的。</p>

@param mbeanInterface 由此 MBean 导出的管理接口。

@exception NotCompliantMBeanException 如果 <var>mbeanInterface</var> 不遵从管理接口的 JMX 设计模式，或者 <var>this</var> 没有实现指定的接口。


<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.StandardMBean(T implementation, java.lang.Class<T> mbeanInterface, boolean isMXBean)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>使用指定的 <var>mbeanInterface</var> 类从对象 <var>implementation</var> 中生成 DynamicMBean。此构造方法可以用来生成 Standard MBean 或 MXBean。与构造方法 {@link #StandardMBean(Object, Class)} 不同，它不抛出 NotCompliantMBeanException。</p>

 @param implementation 此 MBean 的实现。
 @param mbeanInterface 由此 MBean 实现导出的管理接口。如果为 <code>null</code>，则此对象将使用标准 JMX 设计模式来确定与指定实现关联的管理接口。
 @param isMXBean 如果为 true，则 {@code mbeanInterface} 参数表示 MXBean 接口，得到的 MBean 是一个 MXBean。
 @param <T> 允许编译器查看 {@code implementation} 是否确实实现了 {@code mbeanInterface} 描述的类。编译器只在 {@code mbeanInterface} 是 {@code MyMBean.class} 之类的类字面值时才能进行检查。

 @exception IllegalArgumentException 如果给定的 <var>implementation</var> 为 null；或者 <var>mbeanInterface</var> 不遵守管理接口的 JMX 设计模式；或者给定的 <var>implementation</var> 没有实现指定的接口。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.management.StandardMBean(java.lang.Class<?> mbeanInterface, boolean isMXBean)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>使用指定的 <var>mbeanInterface</var> 类从 <var>this</var> 中生成 DynamicMBean。此构造方法可以用来生成 Standard MBean 或 MXBean。与构造方法 {@link #StandardMBean(Object, Class)} 不同，它不抛出 NotCompliantMBeanException。</p>

 <p>调用 {@link #StandardMBean(java.lang.Object, java.lang.Class, boolean) this(this, mbeanInterface, isMXBean)}。此构造方法是为子类保留的。</p>

 @param mbeanInterface 由此 MBean 导出的管理接口。
 @param isMXBean 如果为 true，则 {@code mbeanInterface} 参数表示 MXBean 接口，得到的 MBean 是一个 MXBean。

 @exception IllegalArgumentException 如果 <var>mbeanInterface</var> 不遵从管理接口的 JMX 设计模式，或者 <var>this</var> 没有实现指定的接口。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.StandardMBean.setImplementation(Object implementation) throws javax.management.NotCompliantMBeanException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>替换包装在此对象中的实现对象。</p>

@param implementation 此 Standard MBean（或 MXBean）的新实现。<code>implementation</code> 对象必须实现构造此 <code>StandardMBean</code> 时提供的 Standard MBean（或 MXBean）接口。

@exception IllegalArgumentException 如果给定的 <var>implementation</var> 为 null

@exception NotCompliantMBeanException 如果给定的 <var>implementation</var> 没有实现构造时提供的 Standard MBean（或 MXBean）接口。

@see #getImplementation

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.StandardMBean.getImplementation()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 Standard MBean（或 MXBean）的实现。
@return 此 Standard MBean（或 MXBean）的实现。

@see #setImplementation

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.Class<?> javax.management.StandardMBean.getMBeanInterface()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 Standard MBean（或 MXBean）的管理接口。
@return 此 Standard MBean（或 MXBean）的管理接口。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class<?> javax.management.StandardMBean.getImplementationClass()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 Standard MBean（或 MXBean）的实现类。
@return 此 Standard MBean（或 MXBean）的实现类。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.MBeanInfo javax.management.StandardMBean.getMBeanInfo()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 MBean 的 {@link MBeanInfo}。
 <p>
此方法实现了 {@link javax.management.DynamicMBean#getMBeanInfo() DynamicMBean.getMBeanInfo()}。
 <p>
此方法首先调用 {@link #getCachedMBeanInfo()}，以便检索此 MBean 的缓存 MBeanInfo（如果有）。如果由 {@link #getCachedMBeanInfo()} 返回的 MBeanInfo 不为 null，则将其返回。<br>否则，此方法将使用为此 MBean 指定的管理接口构建此 MBean 的默认 MBeanInfo。
 <p>
在构建 MBeanInfo 时，此方法将调用一些自定义钩子，这些钩子使子类能够提供其自定义描述、参数名称等。<br>最后，它将调用 {@link #cacheMBeanInfo(javax.management.MBeanInfo) cacheMBeanInfo()}，以便缓存新的 MBeanInfo。
@return 如果不为 null，则返回缓存的该 MBean 的 MBeanInfo，如果没有缓存它，则返回新构建的 MBeanInfo。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.management.StandardMBean.getClassName(MBeanInfo info)
<!-- END KEY -->
<!-- BEGIN DATA -->
自定义钩子：获取将在由此 MBean 返回的 MBeanInfo 中使用的 className。<br>子类可以重定义此方法来提供其自定义类名称。默认实现返回 {@link MBeanInfo#getClassName() info.getClassName()}。
@param info 通过反射派生的默认 MBeanInfo。
@return 新 MBeanInfo 的类名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.management.StandardMBean.getDescription(MBeanInfo info)
<!-- END KEY -->
<!-- BEGIN DATA -->
自定义钩子：获取将在由此 MBean 返回的 MBeanInfo 中使用的描述。<br>子类可以重定义此方法来提供其自定义 MBean 描述。默认实现返回 {@link MBeanInfo#getDescription() info.getDescription()}。
@param info 通过反射派生的默认 MBeanInfo。
@return 对新 MBeanInfo 的描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.management.StandardMBean.getDescription(MBeanFeatureInfo info)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>自定义钩子：获取将在由此 MBean 返回的 MBeanFeatureInfo 中使用的描述。</p>

<p>子类可以重定义此方法来提供其自定义描述。默认实现返回 {@link MBeanFeatureInfo#getDescription() info.getDescription()}。</p>

<p>此方法将由 {@link #getDescription(MBeanAttributeInfo)}、{@link #getDescription(MBeanOperationInfo)}、{@link #getDescription(MBeanConstructorInfo)} 调用。</p>

@param info 通过反射派生的默认 MBeanFeatureInfo。
@return 对给定 MBeanFeatureInfo 的描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.management.StandardMBean.getDescription(MBeanAttributeInfo info)
<!-- END KEY -->
<!-- BEGIN DATA -->
自定义钩子：获取将在由此 MBean 返回的 MBeanAttributeInfo 中使用的描述。

<p>子类可以重定义此方法来提供其自定义描述。默认实现返回 {@link #getDescription(MBeanFeatureInfo) getDescription((MBeanFeatureInfo) info)}。
@param info 通过反射派生的默认 MBeanAttributeInfo。
@return 对给定 MBeanAttributeInfo 的描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.management.StandardMBean.getDescription(MBeanConstructorInfo info)
<!-- END KEY -->
<!-- BEGIN DATA -->
自定义钩子：获取将在由此 MBean 返回的 MBeanConstructorInfo 中使用的描述。<br>子类可以重定义此方法来提供其自定义描述。默认实现返回 {@link #getDescription(MBeanFeatureInfo) getDescription((MBeanFeatureInfo) info)}。
@param info 通过反射派生的默认 MBeanConstructorInfo。
@return 对给定 MBeanConstructorInfo 的描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.management.StandardMBean.getDescription(MBeanConstructorInfo ctor, MBeanParameterInfo param, int sequence)
<!-- END KEY -->
<!-- BEGIN DATA -->
自定义钩子：获取将用于由此 MBean 返回的 MBeanConstructorInfo 的第 <var>sequence</var> 个 BeanParameterInfo 的描述。<br> 子类可以重定义此方法来提供其自定义描述。默认实现返回 {@link MBeanParameterInfo#getDescription() param.getDescription()}。
 
@param ctor  通过反射派生的默认 MBeanConstructorInfo。
@param param 通过反射派生的默认 MBeanParameterInfo。
@param sequence 要考虑的参数序列号（&quot;0&quot; 是第一个参数，&quot;1&quot; 是第二个参数，依此类推）。
@return 对给定 MBeanParameterInfo 的描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.management.StandardMBean.getParameterName(MBeanConstructorInfo ctor, MBeanParameterInfo param, int sequence)
<!-- END KEY -->
<!-- BEGIN DATA -->
自定义钩子：获取将用于由此 MBean 返回的 MBeanConstructorInfo 的第 <var>sequence</var> 个 BeanParameterInfo 的名称。<br> 子类可以重定义此方法来提供其自定义参数名称。默认实现返回 {@link MBeanParameterInfo#getName() param.getName()}。
  
@param ctor  通过反射派生的默认 MBeanConstructorInfo。
@param param 通过反射派生的默认 MBeanParameterInfo。
@param sequence 要考虑的参数序列号（&quot;0&quot; 是第一个参数，&quot;1&quot; 是第二个参数，依此类推）。
@return 给定 MBeanParameterInfo 的名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.management.StandardMBean.getDescription(MBeanOperationInfo info)
<!-- END KEY -->
<!-- BEGIN DATA -->
自定义钩子：获取将在由此 MBean 返回的 MBeanOperationInfo 中使用的描述。<br> 子类可以重定义此方法来提供其自定义描述。默认实现返回 {@link #getDescription(MBeanFeatureInfo) getDescription((MBeanFeatureInfo) info)}。
@param info 通过反射派生的默认 MBeanOperationInfo。
@return 对给定 MBeanOperationInfo 的描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.management.StandardMBean.getImpact(MBeanOperationInfo info)
<!-- END KEY -->
<!-- BEGIN DATA -->
自定义钩子：获取将在由此 MBean 返回的 MBeanOperationInfo 中使用的操作的 <var>impact</var> 标志。<br> 子类可重定义此方法来提供其自定义 impact 标志。默认实现返回 {@link MBeanOperationInfo#getImpact() info.getImpact()}。
@param info 通过反射派生的默认 MBeanOperationInfo。
@return 给定 MBeanOperationInfo 的 impact 标志。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.management.StandardMBean.getParameterName(MBeanOperationInfo op, MBeanParameterInfo param, int sequence)
<!-- END KEY -->
<!-- BEGIN DATA -->
自定义钩子：获取将用于由此 MBean 返回的 MBeanOperationInfo 的第 <var>sequence</var> 个 MBeanParameterInfo 的名称。<br> 子类可以重定义此方法来提供其自定义参数名称。默认实现返回 {@link MBeanParameterInfo#getName() param.getName()}。
  
@param op    通过反射派生的默认 MBeanOperationInfo。
@param param 通过反射派生的默认 MBeanParameterInfo。
@param sequence 要考虑的参数序列号（&quot;0&quot; 是第一个参数，&quot;1&quot; 是第二个参数，依此类推）。
@return 将用于给定 MBeanParameterInfo 的名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.management.StandardMBean.getDescription(MBeanOperationInfo op, MBeanParameterInfo param, int sequence)
<!-- END KEY -->
<!-- BEGIN DATA -->
自定义钩子：获取将用于由此 MBean 返回的 MBeanOperationInfo 的第 <var>sequence</var> 个 MBeanParameterInfo 的描述。<br> 子类可以重定义此方法来提供其自定义描述。默认实现返回 {@link MBeanParameterInfo#getDescription() param.getDescription()}。
  
@param op    通过反射派生的默认 MBeanOperationInfo。
@param param 通过反射派生的默认 MBeanParameterInfo。
@param sequence 要考虑的参数序列号（&quot;0&quot; 是第一个参数，&quot;1&quot; 是第二个参数，依此类推）。
@return 对给定 MBeanParameterInfo 的描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.management.MBeanConstructorInfo[] javax.management.StandardMBean.getConstructors(javax.management.MBeanConstructorInfo[] ctors, Object impl)
<!-- END KEY -->
<!-- BEGIN DATA -->
自定义钩子：获取将在由此 MBean 返回的 MBeanInfo 中使用的 MBeanConstructorInfo[]。<br> 默认情况下，如果包装实现不是 <var>this</var>，则此方法返回 <code>null</code>。实际上，如果包装实现不是此对象自身，则不可能通过 <code>MBeanServer.createMBean(...)</code> 调用实现构造方法来重新创建一个包装实现。<br>换句话说，如果包装实现为 <var>this</var>，则返回 <var>ctors</var>。<br> 子类可以重新定义此方法来修改此行为（如果需要）。
@param ctors 通过反射派生的默认 MBeanConstructorInfo[]。
@param impl  包装实现。如果传递了 <code>null</code>，则包装实现将被忽略，并且返回 <var>ctors</var>。
@return 新 MBeanInfo 的 MBeanConstructorInfo[]。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.management.MBeanInfo javax.management.StandardMBean.getCachedMBeanInfo()
<!-- END KEY -->
<!-- BEGIN DATA -->
自定义钩子：返回为此对象缓存的 MBeanInfo。

<p>子类可以重定义此方法来实现自己的缓存策略。默认实现为每个实例存储一个 {@link MBeanInfo} 对象。

@return 缓存的 MBeanInfo，如果没有缓存 MBeanInfo，则返回 null。


@see #cacheMBeanInfo(MBeanInfo)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.management.StandardMBean.cacheMBeanInfo(MBeanInfo info)
<!-- END KEY -->
<!-- BEGIN DATA -->
自定义钩子：缓存为此对象构建的 MBeanInfo。

<p>子类可以重定义此方法来实现自己的缓存策略。默认实现将 <code>info</code> 存储在此实例中。子类可以定义其他策略，如不保存 <code>info</code>（从而每次调用 {@link #getMBeanInfo()} 时都将重新构造它）或者当几个 <code>StandardMBean</code> 实例具有相等的 {@link MBeanInfo} 值时共享唯一的 {@link MBeanInfo} 对象。

@param info 要缓存的新 <code>MBeanInfo</code>。丢弃任何以前缓存的值。此参数可以为 null，在此情况下，没有任何新的缓存值。


<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.ObjectName javax.management.StandardMBean.preRegister(MBeanServer server, ObjectName name) throws java.lang.Exception
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>允许 MBean 在 MBean 服务器中注册之前执行任何它所需要的操作。如果未指定 MBean 的名称，则该 MBean 可以提供一个注册名称。如果引发任何异常，则该 MBean 不会被注册到 MBean 服务器中。</p>

 <p>此方法的默认实现返回默认 {@code name} 参数。对于 Standard MBean，它不再执行其他操作。对于 MXBean，它记录 {@code MBeanServer} 和 {@code ObjectName} 参数，以供转换内部 MXBean 引用时使用。</p>

 <p>对于子类，一个很好的做法是重写此方法，从而通过 {@code super.preRegister(...)} 调用重写的方法。如果此对象是其他 MXBean 中的属性或操作所引用的 MXBean，则此操作是必需的。</p>
 
 @param server 将在其中注册该 MBean 的 MBean 服务器。
 
 @param name MBean 的对象名。如果 {@link MBeanServer} 接口中的某个 <code>createMBean</code> 方法或 <code>registerMBean</code> 方法的 name 参数为 null，则此 name 也为 null。在这种情况下，此方法必须为新 MBean 返回非 null 的 ObjectName。
 
 @return MBean 要被注册的名称。此值不得为 null。如果 <code>name</code> 参数不为 null，则它通常（但并非一定）为返回值。
 
 @throws IllegalArgumentException 如果此对象为 MXBean 且 {@code name} 为 null。

 @throws InstanceAlreadyExistsException 如果此对象为 MXBean，且已经用（此 MBean Server 或其他 MBean Server 中的）另一个名称注册。

 @throws Exception 此方法不抛出其他经过检查的异常，在这里声明 {@code Exception} 是为了供子类重写该方法并抛出它们的异常。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.StandardMBean.postRegister(Boolean registrationDone)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>允许 MBean 在已注册到 MBean 服务器之后或注册已失败之后执行任何它所需要的操作。</p>

 <p>对于 Standard MBean，此方法的默认实现不再执行任何操作。对于 MXBean，如果注册失败，它取消所有 {@link #preRegister preRegister} 已完成的操作。</p>

 <p>对于子类，一个很好的做法是重写此方法，从而通过 {@code super.postRegister(...)} 调用重写的方法。
 如果此对象是其他 MXBean 中的属性或操作所引用的 MXBean，则此操作是必需的。</p>
 
 @param registrationDone 指示该 MBean 是否已在 MBean 服务器中成功注册。false 值意味着注册阶段已失败。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.StandardMBean.preDeregister() throws java.lang.Exception
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>允许 MBean 由 MBean 服务器取消注册前执行任何它所需要的操作。</p>

 <p>此方法的默认实现不执行任何操作。</p>

 <p>对于子类，一个很好的做法是重写此方法，从而通过 {@code super.preDeegister(...)} 调用重写的方法。</p>
 
 @throws Exception 此方法不抛出经过检查的异常，这里声明 {@code Exception} 是为了供子类重写该方法并抛出它们的异常。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.StandardMBean.postDeregister()
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>允许 MBean 在 MBean 服务器中取消注册后执行任何它所需要的操作。</p>

 <p>对于 Standard MBean，此方法的默认实现不再执行任何操作。对于 MXBean，它移除 {@link #preRegister preRegister} 方法记录的所有信息。</p>

 <p>对于子类，一个很好的做法是重写此方法，从而通过 {@code super.postRegister(...)} 调用重写的方法。如果此对象是其他 MXBean 中的属性或操作所引用的 MXBean，则此操作是必需的。</p>

 @since 1.6

<!-- END DATA -->
