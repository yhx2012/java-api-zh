<!-- BEGIN KEY -->
public class javax.management.MBeanFeatureInfo extends java.lang.Object implements java.io.Serializable, javax.management.DescriptorRead
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>提供 MBean 描述符对象的常规信息。所描述的功能可以是属性、操作、参数或通知。此类的实例是不可变的。子类可以是可变的，但是不推荐使用此功能。</p>

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.management.MBeanFeatureInfo.name
<!-- END KEY -->
<!-- BEGIN DATA -->
该功能的名称。推荐子类调用 {@link #getName} 方法，而不是读取此字段，并且子类不能更改该字段。

@serial 该功能的名称。  

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.management.MBeanFeatureInfo.description
<!-- END KEY -->
<!-- BEGIN DATA -->
该功能的可读描述。推荐子类调用 {@link #getDescription} 方法，而不是读取此字段，并且子类不能更改该字段。

@serial 该功能的可读描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.MBeanFeatureInfo(String name, String description)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个 <CODE>MBeanFeatureInfo</CODE> 对象。此构造方法等同于 {@code MBeanFeatureInfo(name, description, (Descriptor) null}。

 @param name 该功能的名称。
 @param description 该功能的可读描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.MBeanFeatureInfo(String name, String description, Descriptor descriptor)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <CODE>MBeanFeatureInfo</CODE> 对象。

@param name 该功能的名称。
@param description 该功能的可读描述。 
@param descriptor 该功能的描述符。此参数可以为 null，它等效于一个空描述符。

@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.MBeanFeatureInfo.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该功能的名称。  

@return 该功能的名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.MBeanFeatureInfo.getDescription()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该功能的可读描述。

@return 该功能的可读描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.Descriptor javax.management.MBeanFeatureInfo.getDescriptor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回该功能的描述符。更改返回值对原描述符没有影响。

 @return 一个描述符，可能是不可变的，也可能是原描述符的副本。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.MBeanFeatureInfo.equals(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较此 MBeanFeatureInfo 与另一个 MBeanFeatureInfo。

@param o 要比较的对象。

@return 当且仅当 <code>o</code> 是一个 MBeanFeatureInfo，其 {@link #getName()}、{@link #getDescription()} 和 {@link #getDescriptor()}值与此 MBeanFeatureInfo 的这些值相等（不必完全一样）时，才返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.MBeanFeatureInfo.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 根据 {@link ObjectInputStream} 反序列化 {@link MBeanFeatureInfo}。
 @serialData
 For compatibility reasons, an object of this class is deserialized as follows.
 <ul>
 The method {@link ObjectInputStream#defaultReadObject defaultReadObject()}
 is called first to deserialize the object except the field
 {@code descriptor}, which is not serialized in the default way. Then the method
 {@link ObjectInputStream#read read()} is called to read a byte, the field
 {@code descriptor} is deserialized according to the value of the byte value:
    <ul>
    <li>1. The method {@link ObjectInputStream#readObject readObject()}
       is called twice to obtain the field names (a {@code String[]}) and
       the field values (a {@code Object[]}) of the {@code descriptor}.
       The two obtained values then are used to construct
       an {@link ImmutableDescriptor} instance for the field
       {@code descriptor};</li>
    <li>0. The value for the field {@code descriptor} is obtained directly
       by calling the method {@link ObjectInputStream#readObject readObject()}.
       If the obtained value is null, the field {@code descriptor} is set to
       {@link ImmutableDescriptor#EMPTY_DESCRIPTOR EMPTY_DESCRIPTOR};</li>
    <li>-1. This means that there is no byte to read and that the object is from
       an earlier version of the JMX API. The field {@code descriptor} is set
       to {@link ImmutableDescriptor#EMPTY_DESCRIPTOR EMPTY_DESCRIPTOR}</li>
    <li>Any other value. A {@link StreamCorruptedException} is thrown.</li>
    </ul>
 </ul>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.MBeanFeatureInfo.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将 {@link MBeanFeatureInfo} 序列化为 {@link ObjectOutputStream}。
 @serialData
 For compatibility reasons, an object of this class is serialized as follows.
 <ul>
 The method {@link ObjectOutputStream#defaultWriteObject defaultWriteObject()}
 is called first to serialize the object except the field {@code descriptor}
 which is declared as transient. The field {@code descriptor} is serialized
 as follows:
     <ul>
     <li>If {@code descriptor} is an instance of the class
        {@link ImmutableDescriptor}, the method {@link ObjectOutputStream#write
        write(int val)} is called to write a byte with the value {@code 1},
        then the method {@link ObjectOutputStream#writeObject writeObject(Object obj)}
        is called twice to serialize the field names and the field values of the
        {@code descriptor}, respectively as a {@code String[]} and an
        {@code Object[]};</li>
     <li>Otherwise, the method {@link ObjectOutputStream#write write(int val)}
 is called to write a byte with the value {@code 0}, then the method
 {@link ObjectOutputStream#writeObject writeObject(Object obj)} is called
 to serialize directly the field {@code descriptor}.
     </ul>
 </ul>
 @since 1.6

<!-- END DATA -->
