<!-- BEGIN KEY -->
public class javax.management.relation.RelationNotification extends javax.management.Notification
<!-- END KEY -->
<!-- BEGIN DATA -->
Relation Service（关系服务）中的更改通知。当通过 Relation Service 创建关系时，或者在 Relation Service 中作为关系添加 MBean 时，或者在关系中更新角色时，或者从 Relation Service 移除关系时，将发送 RelationNotification 通知。

 <p>此类的 <b>serialVersionUID</b> 为 <code>-6871117877523310399L</code>。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.management.relation.RelationNotification.RELATION_BASIC_CREATION
<!-- END KEY -->
<!-- BEGIN DATA -->
内部关系的创建类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.management.relation.RelationNotification.RELATION_MBEAN_CREATION
<!-- END KEY -->
<!-- BEGIN DATA -->
添加到 Relation Service 中的关系 MBean 的类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.management.relation.RelationNotification.RELATION_BASIC_UPDATE
<!-- END KEY -->
<!-- BEGIN DATA -->
内部关系的更新类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.management.relation.RelationNotification.RELATION_MBEAN_UPDATE
<!-- END KEY -->
<!-- BEGIN DATA -->
关系 MBean 的更新类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.management.relation.RelationNotification.RELATION_BASIC_REMOVAL
<!-- END KEY -->
<!-- BEGIN DATA -->
从内部关系的 Relation Service 中移除的类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.management.relation.RelationNotification.RELATION_MBEAN_REMOVAL
<!-- END KEY -->
<!-- BEGIN DATA -->
从关系 MBean 的 Relation Service 中移除的类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] javax.management.relation.RelationNotification.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
@serialField relationId String Relation identifier of created/removed/updated relation
@serialField relationTypeName String Relation type name of created/removed/updated relation
@serialField relationObjName ObjectName {@link ObjectName} of the relation MBean of created/removed/updated relation (only if the relation is represented by an MBean)
@serialField unregisterMBeanList List List of {@link ObjectName}s of referenced MBeans to be unregistered due to relation removal
@serialField roleName String Name of updated role (only for role update)
@serialField oldRoleValue List Old role value ({@link ArrayList} of {@link ObjectName}s) (only for role update)
@serialField newRoleValue List New role value ({@link ArrayList} of {@link ObjectName}s) (only for role update)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RelationNotification(String notifType, Object sourceObj, long sequence, long timeStamp, String message, String id, String typeName, ObjectName objectName, java.util.List<javax.management.ObjectName> unregMBeanList) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个关系创建通知（在 Relation Service 中内部创建的 RelationSupport 对象，或者作为关系添加的 MBean），或创建一个从 Relation Service 进行关系移除的通知。

@param   notifType   通知的类型；以下几种皆可：
<P>- RELATION_BASIC_CREATION
<P>- RELATION_MBEAN_CREATION
<P>- RELATION_BASIC_REMOVAL
<P>- RELATION_MBEAN_REMOVAL
@param   sourceObj   发送通知的源对象。此参数要么是 ObjectName 对象，要么是 RelationService 对象。在后一种情况下，它必须是发出通知的 MBean；MBean Server 将把源对象重写为注册 MBean 的 ObjectName。
@param   sequence   要标识通知的序列号
@param   timeStamp   时间戳
@param   message   描述通知的可读消息
@param   id   在 Relation Service 中标识关系的关系 id
@param   typeName   关系类型的名称
@param   objectName   如果它是 MBean，则是该关系对象的 ObjectName（对于由 Relation Service 内部处理的关系，则为 null）
@param   unregMBeanList   因为关系移除而需要注销的引用 MBean 的 ObjectName 列表（仅限于因 CIM 限定符进行的移除，可以为 null）

@exception   IllegalArgumentException   如果：
<P>- 通知类型没有值
<P>- 通知类型不是 RELATION_BASIC_CREATION、RELATION_MBEAN_CREATION、RELATION_BASIC_REMOVAL 或 RELATION_MBEAN_REMOVAL
<P>- 没有源对象
<P>- 源对象不是 Relation Service
<P>- 没有关系 id
<P>- 没有关系类型名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RelationNotification(String notifType, Object sourceObj, long sequence, long timeStamp, String message, String id, String typeName, ObjectName objectName, String name, java.util.List<javax.management.ObjectName> newValue, java.util.List<javax.management.ObjectName> oldValue) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
为关系中的角色更新创建通知。

@param   notifType   通知的类型；以下几种皆可：
 <P>- RELATION_BASIC_UPDATE
<P>- RELATION_MBEAN_UPDATE
@param   sourceObj   发送通知的源对象。此参数要么是 ObjectName 对象，要么是 RelationService 对象。在后一种情况下，它必须是发出通知的 MBean；MBean Server 将把源对象重写为注册 MBean 的 ObjectName。
@param   sequence   要标识通知的序列号
@param   timeStamp   时间戳
@param   message   描述通知的可读消息
@param   id   在 Relation Service 中标识关系的关系 id
@param   typeName   关系类型的名称
@param   objectName   如果它是 MBean，则是该关系对象的 ObjectName（对于由 Relation Service 内部处理的关系，则为 null）
@param   name   更新的角色名称
@param   newValue   新角色值（ObjectName 对象的列表）
@param   oldValue   旧角色值（ObjectName 对象的列表）

@exception   IllegalArgumentException   如果是 null 参数

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RelationNotification.getRelationId()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回创建/移除/更新的关系的关系标识符。

@return   关系 id。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RelationNotification.getRelationTypeName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回创建/移除/更新的关系的关系类型名称。

@return   关系类型名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.ObjectName javax.management.relation.RelationNotification.getObjectName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回创建/移除/更新的关系的 ObjectName。

@return   如果关系是 MBean，则返回 ObjectName；否则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<javax.management.ObjectName> javax.management.relation.RelationNotification.getMBeansToUnregister()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回因为关系移除而需要注销的 MBean 的 ObjectName 列表（仅限于关系移除）。

@return   {@link ObjectName} 的 {@link List}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RelationNotification.getRoleName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回更新关系的更新角色的名称（仅限于角色更新）。

@return   更新的角色名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<javax.management.ObjectName> javax.management.relation.RelationNotification.getOldRoleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回更新的角色的旧值（仅限于角色更新）。

@return   更新的角色的旧值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<javax.management.ObjectName> javax.management.relation.RelationNotification.getNewRoleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回更新的角色的新值（仅限于角色更新）。

@return   更新的角色的新值。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.RelationNotification.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 {@link ObjectInputStream} 反序列化 {@link RelationNotification}。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.RelationNotification.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 {@link RelationNotification} 序列化为 {@link ObjectOutputStream}。

<!-- END DATA -->
