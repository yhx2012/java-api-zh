<!-- BEGIN KEY -->
public class javax.management.relation.MBeanServerNotificationFilter extends javax.management.NotificationFilterSupport
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link MBeanServerNotification} 的过滤器。此过滤器通过选择感兴趣的 ObjectName 和感兴趣的操作（包括注册和注销）（对应于通知类型）对 MBeanServerNotification 通知进行过滤。
<p>此类的 <b>serialVersionUID</b> 为 <code>2605900539589789736L</code>。

<p>此类的 <b>serialVersionUID</b> 为 <code>2605900539589789736L</code>。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] javax.management.relation.MBeanServerNotificationFilter.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
@serialField selectedNames List List of {@link ObjectName}s of interest
         <ul>
<li><code>null</code> 意味着隐式选中所有 {@link ObjectName}（复选表示显式取消选择）</li>
<li>空向量意味着没有任何 {@link ObjectName} 被显式选中。</li>
         </ul>

@serialField deselectedNames List List of {@link ObjectName}s with no interest
         <ul>
<li><code>null</code> 意味着隐式地取消选中所有 {@link ObjectName}（复选表示显式选择）</li>
<li>空向量意味着没有任何 {@link ObjectName} 被显式取消选中。</li>
         </ul>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.MBeanServerNotificationFilter()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个选中所有 ObjectName 的所有 MBeanServerNotification 通知的过滤器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.relation.MBeanServerNotificationFilter.disableAllObjectNames()
<!-- END KEY -->
<!-- BEGIN DATA -->
禁用任何 MBeanServerNotification（取消选中所有的 ObjectName）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.relation.MBeanServerNotificationFilter.disableObjectName(ObjectName objectName) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
禁用与给定 ObjectName 有关的 MBeanServerNotification。

@param   objectName   不再感兴趣的 ObjectName

@exception IllegalArgumentException   如果给定的 ObjectName 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.relation.MBeanServerNotificationFilter.enableAllObjectNames()
<!-- END KEY -->
<!-- BEGIN DATA -->
启用所有 MBeanServerNotification（选中所有 ObjectName）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.relation.MBeanServerNotificationFilter.enableObjectName(ObjectName objectName) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
启用与给定 ObjectName 有关的 MBeanServerNotification。

@param   objectName   感兴趣的 ObjectName

@exception IllegalArgumentException   如果给定的 ObjectName 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.util.Vector<javax.management.ObjectName> javax.management.relation.MBeanServerNotificationFilter.getEnabledObjectNames()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取所有已启用的 ObjectName。

@return   ObjectName 的向量：
<P>- null 意味着隐式选中所有 ObjectName，除了显式取消选中的 ObjectName 之外
<P>- 空意味着取消选中所有 ObjectName，即不选中任何 ObjectName。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.util.Vector<javax.management.ObjectName> javax.management.relation.MBeanServerNotificationFilter.getDisabledObjectNames()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取禁用的所有 ObjectName。

@return   ObjectName 的向量：
<P>- null 意味着隐式取消选中所有 ObjectName，除了显式选中的 ObjectName 之外
<P>- 空意味着选中所有 ObjectName，即不取消选中任何 ObjectName。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean javax.management.relation.MBeanServerNotificationFilter.isNotificationEnabled(Notification notif) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
向侦听器发送指定通知之前调用。
<P>如果：
<P>- 选中与 MBean 相关的 ObjectName（显式，或者（隐式但不显式地取消选中））
<P>并且
<P>- 选中操作类型（注册或注销）
<P>则向侦听器发送通知。

@param   notif   将发送的通知。

@return   如果必须将通知发送到侦听器，则返回 true；否则，返回 false。

@exception   IllegalArgumentException   如果是 null 参数

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.MBeanServerNotificationFilter.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 {@link ObjectInputStream} 反序列化 {@link MBeanServerNotificationFilter}。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.MBeanServerNotificationFilter.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 {@link MBeanServerNotificationFilter} 序列化为 {@link ObjectOutputStream}。

<!-- END DATA -->
