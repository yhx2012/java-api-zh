<!-- BEGIN KEY -->
public interface javax.management.relation.RelationServiceMBean
<!-- END KEY -->
<!-- BEGIN DATA -->
Relation Service 负责创建和删除关系类型和关系，还负责处理一致性和提供查询机制。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RelationServiceMBean.isActive() throws javax.management.relation.RelationServiceNotRegisteredException
<!-- END KEY -->
<!-- BEGIN DATA -->
检查该 Relation Service 是否处于活动状态。当前的条件是，Relation Service 必须在 MBean Server 中注册。

@exception   RelationServiceNotRegisteredException   如果尚未注册 Relation Service

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.relation.RelationServiceMBean.getPurgeFlag()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个标志，以指示注销关系中引用的 MBean 时是否接收到通知，是否必须执行关系的直接&ldquo;肃清&rdquo;（查找不再有效的关系），或者是否只在显式调用 purgeRelations 方法时执行该操作。
 <P>true 表示立即肃清。

@return   如果是直接肃清，则返回 true。

@see #setPurgeFlag

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RelationServiceMBean.setPurgeFlag(boolean purgeFlag)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置一个标志，以指示注销关系中引用的 MBean 时是否接收到通知，是否必须执行关系的直接&ldquo;肃清&rdquo;（查找不再有效的关系），或者是否只在显式调用 purgeRelations 方法时执行该操作。
 <P>true 表示立即肃清。

@param   purgeFlag   标志


@see #getPurgeFlag

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RelationServiceMBean.createRelationType(String relationTypeName, javax.management.relation.RoleInfo[] roleInfoArray) throws java.lang.IllegalArgumentException, javax.management.relation.InvalidRelationTypeException
<!-- END KEY -->
<!-- BEGIN DATA -->
用给定的角色信息（由 RoleInfo 对象提供）创建一个关系类型（RelationTypeSupport 对象），并将其添加到 Relation Service 中。


@param   relationTypeName   关系类型的名称
@param   roleInfoArray   角色信息的数组


@exception   IllegalArgumentException   如果参数为 null
@exception   InvalidRelationTypeException   如果：
 <P>- 具有该名称的关系类型已经存在
 <P>- 两个不同的角色信息使用了同一个名称
 <P>- 未提供角色信息
 <P>- 提供了一个 null 角色信息

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RelationServiceMBean.addRelationType(RelationType relationTypeObj) throws java.lang.IllegalArgumentException, javax.management.relation.InvalidRelationTypeException
<!-- END KEY -->
<!-- BEGIN DATA -->
作为关系类型添加给定的对象。该对象期望实现 RelationType 接口。


@param   relationTypeObj   关系类型对象（实现该 RelationType 接口）


@exception   IllegalArgumentException   如果参数为 null或者 {@link RelationType#getRelationTypeName
 relationTypeObj.getRelationTypeName()} 返回 null。
@exception   InvalidRelationTypeException   如果已经存在具有该名称的关系类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.lang.String> javax.management.relation.RelationServiceMBean.getAllRelationTypeNames()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索所有已知关系类型的名称。

@return   关系类型名称的 ArrayList（字符串）

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<javax.management.relation.RoleInfo> javax.management.relation.RelationServiceMBean.getRoleInfos(String relationTypeName) throws java.lang.IllegalArgumentException, javax.management.relation.RelationTypeNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
检索给定关系类型的角色信息（RoleInfo 对象）的列表。

@param   relationTypeName   关系类型的名称

@return   RoleInfo 的 ArrayList。

@exception   IllegalArgumentException   如果参数为 null
@exception   RelationTypeNotFoundException   如果不存在具有该名称的关系类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleInfo javax.management.relation.RelationServiceMBean.getRoleInfo(String relationTypeName, String roleInfoName) throws java.lang.IllegalArgumentException, javax.management.relation.RelationTypeNotFoundException, javax.management.relation.RoleInfoNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
检索给定关系类型的给定角色的角色信息。

@param   relationTypeName   关系类型的名称
@param   roleInfoName   角色的名称

@return   RoleInfo 对象。


@exception   IllegalArgumentException   如果参数为 null
@exception   RelationTypeNotFoundException   如果在 Relation Service 中的关系类型未知
@exception   RoleInfoNotFoundException   如果该角色不是该关系类型的一部分。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RelationServiceMBean.removeRelationType(String relationTypeName) throws javax.management.relation.RelationServiceNotRegisteredException, java.lang.IllegalArgumentException, javax.management.relation.RelationTypeNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 Relation Service 中移除给定的关系类型。
 <P>此类型的关系对象将从 Relation Service 中移除。

@param   relationTypeName   要移除的关系类型名称

@exception   RelationServiceNotRegisteredException   如果 Relation Service 未在 MBean Server 中注册
@exception   IllegalArgumentException   如果参数为 null
@exception   RelationTypeNotFoundException   如果不存在具有该名称的关系类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RelationServiceMBean.createRelation(String relationId, String relationTypeName, RoleList roleList) throws javax.management.relation.RelationServiceNotRegisteredException, java.lang.IllegalArgumentException, javax.management.relation.RoleNotFoundException, javax.management.relation.InvalidRelationIdException, javax.management.relation.RelationTypeNotFoundException, javax.management.relation.InvalidRoleValueException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建给定关系类型的简单关系（由 RelationSupport 对象表示），并将其添加到 Relation Service 中。
 <P>按照在参数中提供的角色列表初始化角色。将未按此方法初始化的角色设置为 ObjectName 的空 ArrayList。
 <P>发送带类型 RELATION_BASIC_CREATION 的 RelationNotification。

@param relationId   关系标识符，用来唯一地标识 Relation Service 中的关系
@param   relationTypeName   关系类型的名称（必须在 Relation Service 中创建）
@param   roleList 要初始化该关系的角色的角色列表（可以为 null）。

@exception   RelationServiceNotRegisteredException   如果 Relation Service 未在 MBean Server 中注册
@exception   IllegalArgumentException   如果参数为 null
@exception   RoleNotFoundException   如果为关系类型中不存在的角色提供值
@exception   InvalidRelationIdException   如果关系 id 已经使用
@exception   RelationTypeNotFoundException   如果在 Relation Service 中关系类型是未知的
@exception   InvalidRoleValueException   如果：
 <P>- 两个不同的角色使用了同一个角色名称
 <P>- 给定值中引用的 MBean 数小于期望的最小程度
 <P>- 提供的值中引用的 MBean 数超过期望的最大程度
 <P>- 该值中引用的 MBean 的一个对象不是该角色期望的 MBean 类的对象
 <P>- 如果不存在为该角色提供的 MBean

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RelationServiceMBean.addRelation(ObjectName relationObjectName) throws java.lang.IllegalArgumentException, javax.management.relation.RelationServiceNotRegisteredException, java.lang.NoSuchMethodException, javax.management.relation.InvalidRelationIdException, javax.management.InstanceNotFoundException, javax.management.relation.InvalidRelationServiceException, javax.management.relation.RelationTypeNotFoundException, javax.management.relation.RoleNotFoundException, javax.management.relation.InvalidRoleValueException
<!-- END KEY -->
<!-- BEGIN DATA -->
作为 Relation Service 中的关系添加由用户创建（且由其在 MBean Server 中注册）的 MBean。
 <P>要作为关系添加 MBean，其必须遵循以下做法：
 <P>- 实现该 Relation 接口
 <P>- 具有 RelationService ObjectName，即当前 Relation Service 的 ObjectName
 <P>- 具有在当前 Relation Service 中唯一且未使用的关系 id
 <P>- 具有关系类型，即在 Relation Service 中创建的关系类型
 <P>- 具有遵循在关系类型中提供的角色信息的角色。

@param   relationObjectName   要添加的关系 MBean 的 ObjectName。

@exception   IllegalArgumentException   如果参数为 null
@exception   RelationServiceNotRegisteredException   如果 Relation Service 未在 MBean Server 中注册
@exception   NoSuchMethodException   如果 MBean 未实现 Relation 接口
@exception   InvalidRelationIdException   如果：
 <P>- MBean 中没有关系标识符
 <P>- 在 Relation Service 中已经使用关系标识符
@exception   InstanceNotFoundException   如果尚未注册给定 ObjectName 的 MBean
@exception   InvalidRelationServiceException  如果：
 <P>- MBean 中没有 Relation Service 名称
 <P>- MBean 中的 Relation Service 名称不是当前 Relation Service 的名称
@exception   RelationTypeNotFoundException   如果：
 <P>- MBean 中没有关系类型名称
 <P>- MBean 中的关系类型名称与 Relation Service 中创建的关系类型不对应
@exception   InvalidRoleValueException   如果：
 <P>- 角色中引用的 MBean 数小于期望的最小程度
 <P>- 角色中引用的 MBean 数超过期望的最大程度
 <P>- 该值中引用的 MBean 的一个对象不是该角色期望的 MBean 类的对象
 <P>- 为角色提供的 MBean 不存在
@exception   RoleNotFoundException   如果为关系类型中不存在的角色提供了值

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.ObjectName javax.management.relation.RelationServiceMBean.isRelationMBean(String relationId) throws java.lang.IllegalArgumentException, javax.management.relation.RelationNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果用 MBean 表示关系（由用户创建且作为 Relation Service 中的关系添加），则返回该 MBean 的 ObjectName。

@param   relationId   标识关系的关系 id

@return   相应关系 MBean 的 ObjectName；如果该关系不是 MBean，则返回 null。

@exception   IllegalArgumentException  如果参数为 null
@exception   RelationNotFoundException   如果不存在与该 id 相关的关系

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RelationServiceMBean.isRelation(ObjectName objectName) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 Relation Service 中作为关系添加 MBean，则返回与给定 ObjectName 相关的关系 id。

@param   objectName   假定关系的 ObjectName

@return   关系 id（字符串）；或返回 null（如果 ObjectName 不是由 Relation Service 处理的关系）

@exception   IllegalArgumentException   如果参数为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Boolean javax.management.relation.RelationServiceMBean.hasRelation(String relationId) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
用给定的关系 id 检查是否存在 Relation Service 中标识的关系。

@param   relationId   标识关系的关系 id

@return boolean： 如果存在关系，则返回 true；否则返回 false

@exception   IllegalArgumentException   如果参数为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.lang.String> javax.management.relation.RelationServiceMBean.getAllRelationIds()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由 Relation Service 处理的所有关系的所有关系 id。

@return   String 的 ArrayList

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Integer javax.management.relation.RelationServiceMBean.checkRoleReading(String roleName, String relationTypeName) throws java.lang.IllegalArgumentException, javax.management.relation.RelationTypeNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
检查给定 Role 能否在给定类型的关系中读取。

@param   roleName   要检查的角色名称
@param   relationTypeName   关系类型的名称

@return   包装整数的 Integer，该整数对应于 RoleUnresolved 中用常量表示的可能问题：
 <P>- 如果角色可读，则用 0 表示
 <P>- 对应于 RoleStatus.NO_ROLE_WITH_NAME 的整数
 <P>- 对应于 RoleStatus.ROLE_NOT_READABLE 的整数

@exception   IllegalArgumentException   如果参数为 null
@exception   RelationTypeNotFoundException   如果 Relation Service 中的关系类型是未知的

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Integer javax.management.relation.RelationServiceMBean.checkRoleWriting(Role role, String relationTypeName, Boolean initFlag) throws java.lang.IllegalArgumentException, javax.management.relation.RelationTypeNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
检查给定 Role 能否在给定类型的关系中设置。

@param   role   要检查的角色
@param   relationTypeName   关系类型的名称
@param   initFlg   指定已完成角色的初始化检查，并且不验证写入访问的标志。

@return   包装整数的 Integer，该整数对应于 RoleUnresolved 中用常量表示的可能问题：
 <P>- 如果角色可以设置，则用 0 表示
 <P>- 对应于 RoleStatus.NO_ROLE_WITH_NAME 的整数
 <P>- 对应于 RoleStatus.ROLE_NOT_WRITABLE 的整数
 <P>- 对应于 RoleStatus.LESS_THAN_MIN_ROLE_DEGREE 的整数
 <P>- 对应于 RoleStatus.MORE_THAN_MAX_ROLE_DEGREE 的整数
 <P>- 对应于 RoleStatus.REF_MBEAN_OF_INCORRECT_CLASS 的整数
 <P>- 对应于 RoleStatus.REF_MBEAN_NOT_REGISTERED 的整数

@exception   IllegalArgumentException   如果参数为 null
@exception   RelationTypeNotFoundException   如果是未知关系类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RelationServiceMBean.sendRelationCreationNotification(String relationId) throws java.lang.IllegalArgumentException, javax.management.relation.RelationNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
发送关系创建通知 (RelationNotification)。通知类型是：
 <P>- RelationNotification.RELATION_BASIC_CREATION，如果该关系是 Relation Service 内部的一个对象
 <P>- RelationNotification.RELATION_MBEAN_CREATION，如果该关系是作为关系添加的 MBean。
 <P>源对象是 Relation Service 本身。
 <P>它在 Relation Service createRelation() 和 addRelation() 方法中调用。

@param   relationId   更新的关系的关系标识符

@exception   IllegalArgumentException   如果参数为 null
@exception   RelationNotFoundException   如果不存在给定关系 id 的关系

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RelationServiceMBean.sendRoleUpdateNotification(String relationId, Role newRole, java.util.List<javax.management.ObjectName> oldRoleValue) throws java.lang.IllegalArgumentException, javax.management.relation.RelationNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
发送给定关系中的角色更新通知 (RelationNotification)。通知类型是：
 <P>- RelationNotification.RELATION_BASIC_UPDATE，如果该关系是 Relation Service 内部的一个对象
 <P>- RelationNotification.RELATION_MBEAN_UPDATE，如果该关系是作为关系添加的 MBean。
 <P>源对象是 Relation Service 本身。
 <P>它在关系 MBean setRole()（针对给定角色）和 setRoles()（针对每个角色）方法（RelationSupport 类中提供的实现）中调用。
 <P>它还在 Relation Service setRole()（针对给定角色）和 setRoles()（针对每个角色）方法中调用。

@param   relationId   更新的关系的关系标识符
@param   newRole   新的角色（名称和新的值）
@param   oldRoleValue   旧角色值（ObjectName 对象的列表）

@exception   IllegalArgumentException   如果参数为 null
@exception   RelationNotFoundException   如果不存在给定关系 id 的关系

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RelationServiceMBean.sendRelationRemovalNotification(String relationId, java.util.List<javax.management.ObjectName> unregMBeanList) throws java.lang.IllegalArgumentException, javax.management.relation.RelationNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
发送关系移除通知 (RelationNotification)。通知类型是：
 <P>- RelationNotification.RELATION_BASIC_REMOVAL，如果该关系是 Relation Service 内部的一个对象
 <P>- RelationNotification.RELATION_MBEAN_REMOVAL，如果该关系是作为关系添加的 MBean。
 <P>源对象是 Relation Service 本身。
 <P>它在 Relation Service removeRelation() 方法中调用。

@param   relationId   更新的关系的关系标识符
@param   unregMBeanList   期望因为关系移除而注销的 MBean 的 ObjectName 列表（可以为 null）

@exception   IllegalArgumentException   如果参数为 null
@exception   RelationNotFoundException   如果不存在给定关系 id 的关系

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RelationServiceMBean.updateRoleMap(String relationId, Role newRole, java.util.List<javax.management.ObjectName> oldRoleValue) throws java.lang.IllegalArgumentException, javax.management.relation.RelationServiceNotRegisteredException, javax.management.relation.RelationNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
针对给定关系中给定角色的更新来处理 Relation Service 角色映射的更新。
 <P>它在关系 MBean setRole()（针对给定角色）和 setRoles()（针对每个角色）方法（RelationSupport 类中提供的实现）中调用。
 <P>它还在 Relation Service setRole()（针对给定角色）和 setRoles()（针对每个角色）方法中调用。
 <P>为了允许 Relation Service 维护一致性（MBean 注销时）以及能够执行查询，更新角色时必须调用此方法。

@param   relationId   已更新关系的关系标识符
@param   newRole   新的角色（名称和新值）
@param   oldRoleValue   旧角色值（ObjectName 对象的列表）

@exception   IllegalArgumentException   如果参数为 null
@exception   RelationServiceNotRegisteredException   如果 Relation Service 未在 MBean Server 中注册
@exception   RelationNotFoundException   如果没有给定 id 的关系。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RelationServiceMBean.removeRelation(String relationId) throws javax.management.relation.RelationServiceNotRegisteredException, java.lang.IllegalArgumentException, javax.management.relation.RelationNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 Relation Service 移除给定的关系。
 <P>发送 RelationNotification 通知，其类型是：
 <P>- RelationNotification.RELATION_BASIC_REMOVAL，如果该关系只在 Relation Service 内部
 <P>- RelationNotification.RELATION_MBEAN_REMOVAL，如果该关系作为 MBean 注册。
 <P>对于在这样的关系中引用的 MBean，将不执行任何操作，

@param   relationId   要移除的关系的关系 id

@exception   RelationServiceNotRegisteredException   如果 Relation Service 未在 MBean Server 中注册
@exception   IllegalArgumentException   如果参数为 null
@exception   RelationNotFoundException   如果没有对应于给定关系 id 的关系

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RelationServiceMBean.purgeRelations() throws javax.management.relation.RelationServiceNotRegisteredException
<!-- END KEY -->
<!-- BEGIN DATA -->
肃清关系。

 <P>根据 purgeFlag 值，此方法即可以在接收到关系中引用的 MBean 的注销通知时自动调用（如果将该标志设置为 true），也可以不调用（如果将该标志设置为 false）。
 <P>在此情况下，用户负责调用它来维护关系的一致性。一定要记住：如果注销 MBean 但没立即执行肃清，这时如果重新使用 ObjectName 并将其指派给关系中另一个引用的 MBean，那么手动调用此 purgeRelations() 就会出现问题，因为这样会认为此 ObjectName 就是已注销的 MBean，不把它看作新的 MBean。

 <P>该行为取决于在其中引用注销的 MBean 的角色数量：
 <P>- 如果移除角色中的一个 MBean 引用使其引用数少于最小程度，则必须移除该关系。
 <P>- 如果移除 MBean 引用后剩余的引用数仍然在该容量范围内，则保持该关系并在调用其 handleMBeanUnregistration() 回调时更新。

@exception   RelationServiceNotRegisteredException   如果该 Relation Service 未在 MBean Server 中注册。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map<java.lang.String, java.util.List<java.lang.String>> javax.management.relation.RelationServiceMBean.findReferencingRelations(ObjectName mbeanName, String relationTypeName, String roleName) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
检索在其中引用给定 MBean 的关系。
 <P>这对应于 CIM &quot;Reference&quot; 和 &quot;ReferenceName&quot; 操作。

@param   mbeanName   MBean 的 ObjectName
@param   relationTypeName  可以为 null；如果已指定，则将只在搜索时考虑该类型的关系。其他情况下将考虑所有关系类型。
@param   roleName   可以为 null；如果已指定，则只返回将在该角色中引用的 MBean 关系。其他情况要考虑所有角色。

@return   HashMap，密钥为在其中引用 MBean 的关系的关系 id，并且每个密钥的值是角色名称的 ArrayList（因为 MBean 可以在同一关系中的几个角色中引用）。

@exception   IllegalArgumentException   如果参数为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map<javax.management.ObjectName, java.util.List<java.lang.String>> javax.management.relation.RelationServiceMBean.findAssociatedMBeans(ObjectName mbeanName, String relationTypeName, String roleName) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
检索与关系中给定关系相关的 MBean。
 <P>这对应于 CIM Associator 和 AssociatorName 操作。


@param   mbeanName   MBean 的 ObjectName
@param   relationTypeName  可以为 null；如果已指定，则将只在搜索时考虑该类型的关系。其他情况下将考虑所有关系类型。
@param   roleName   可以为 null；如果已指定，则只返回将在该角色中引用的 MBean 关系。其他情况要考虑所有角色。


@return   HashMap，密钥是与给定 MBean 相关的 MBean 的 ObjectName，而对于每个密钥而言，该值是这种关系的关系 id 的 ArrayList：密钥 MBean 与给定的 MBean 相关（因为它们可以与几个不同的关系相关）。


@exception   IllegalArgumentException   如果参数为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.lang.String> javax.management.relation.RelationServiceMBean.findRelationsOfType(String relationTypeName) throws java.lang.IllegalArgumentException, javax.management.relation.RelationTypeNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定类型的关系的关系 id。


@param   relationTypeName   关系类型名称


@return   关系 id 的 ArrayList。


@exception   IllegalArgumentException   如果参数为 null
@exception   RelationTypeNotFoundException   如果不存在具有该名称的关系类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<javax.management.ObjectName> javax.management.relation.RelationServiceMBean.getRole(String relationId, String roleName) throws javax.management.relation.RelationServiceNotRegisteredException, java.lang.IllegalArgumentException, javax.management.relation.RelationNotFoundException, javax.management.relation.RoleNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
检索给定关系中给定角色名称的角色值。

@param   relationId   关系 id
@param   roleName   角色名称

@return   作为角色值的 ObjectName 对象的 ArrayList

@exception   RelationServiceNotRegisteredException   如果 Relation Service 未注册
@exception   IllegalArgumentException   如果参数为 null
@exception   RelationNotFoundException   如果没有带给定 id 的关系
@exception   RoleNotFoundException   如果：
 <P>- 不存在具有给定名称的角色
<P>或者
 <P>- 角色不可读。

@see #setRole

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleResult javax.management.relation.RelationServiceMBean.getRoles(String relationId, java.lang.String[] roleNameArray) throws javax.management.relation.RelationServiceNotRegisteredException, java.lang.IllegalArgumentException, javax.management.relation.RelationNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
检索给定关系中具有给定名称的角色值。

@param   relationId   关系 id
@param   roleNameArray   要检索的角色名称的数组

@return   RoleResult 对象，包括一个 RoleList（针对成功检索到的角色）和一个 RoleUnresolvedList（针对未检索到的角色）。

@exception   RelationServiceNotRegisteredException   如果 Relation Service 未在 MBean Server 中注册
@exception   IllegalArgumentException   如果参数为 null
@exception   RelationNotFoundException   如果没有带给定 id 的关系

@see #setRoles

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleResult javax.management.relation.RelationServiceMBean.getAllRoles(String relationId) throws java.lang.IllegalArgumentException, javax.management.relation.RelationNotFoundException, javax.management.relation.RelationServiceNotRegisteredException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回关系中存在的所有角色。

@param   relationId   关系 id

@return   RoleResult 对象，该对象包括一个 RoleList（针对成功检索到的角色）和一个 RoleUnresolvedList（针对不可读的角色）。

@exception   IllegalArgumentException   如果参数为 null
@exception   RelationNotFoundException  如果没有指定 id 的关系
@exception   RelationServiceNotRegisteredException   如果 Relation Service 未在 MBean Server 中注册

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Integer javax.management.relation.RelationServiceMBean.getRoleCardinality(String relationId, String roleName) throws java.lang.IllegalArgumentException, javax.management.relation.RelationNotFoundException, javax.management.relation.RoleNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
检索给定角色中当前引用的 MBean 数。

@param   relationId   关系 id
@param   roleName   角色名称

@return   当前在此角色中引用的 MBean 数

@exception   IllegalArgumentException   如果参数为 null
@exception   RelationNotFoundException   如果没有带指定 id 的关系
@exception   RoleNotFoundException  如果不存在具有指定名称的角色

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RelationServiceMBean.setRole(String relationId, Role role) throws javax.management.relation.RelationServiceNotRegisteredException, java.lang.IllegalArgumentException, javax.management.relation.RelationNotFoundException, javax.management.relation.RoleNotFoundException, javax.management.relation.InvalidRoleValueException, javax.management.relation.RelationTypeNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
以给定关系设置给定角色。
 <P>将按照其在关系的关系类型中提供的相应角色定义检查角色
 <P>通过处理引用的 MBean 注销，Relation Service 将跟踪更改来保持关系的一致性。

@param   relationId   关系 id
@param   role   要设置的角色（名称和新值）

@exception   RelationServiceNotRegisteredException   如果 Relation Service 未在 MBean Server 中注册
@exception   IllegalArgumentException   如果参数为 null
@exception   RelationNotFoundException   如果没有带给定 id 的关系
@exception   RoleNotFoundException   如果：
 <P>- 内部关系
<P>以及
 <P>- 角色不存在或不可写
@exception   InvalidRoleValueException   如果为内部关系且为角色提供的值无效：
 <P>- 给定值中引用的 MBean 数小于期望的最小程度
<P>或者
 <P>- 提供的值中引用的 MBean 数超过期望的最大程度
<P>或者
 <P>- 该值中引用的 MBean 的一个对象不是该角色期望的 MBean 类的对象
<P>或者
 <P>- 为该角色提供的 MBean 不存在
@exception   RelationTypeNotFoundException   如果为未知关系类型

@see #getRole

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleResult javax.management.relation.RelationServiceMBean.setRoles(String relationId, RoleList roleList) throws javax.management.relation.RelationServiceNotRegisteredException, java.lang.IllegalArgumentException, javax.management.relation.RelationNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
以给定关系设置给定角色。
 <P>将按照其在关系的关系类型中提供的相应角色定义检查角色
 <P>通过处理引用的 MBean 注销，Relation Service 跟踪更改来保持关系的一致性。

@param   relationId   关系 id
@param   roleList   要设置的角色列表

@return   RoleResult 对象，该对象包括一个 RoleList（针对成功设置的角色）和一个 RoleUnresolvedList（针对未成功设置的角色）。


@exception   RelationServiceNotRegisteredException   如果 Relation Service 未在 MBean Server 中注册
@exception   IllegalArgumentException   如果参数为 null
@exception   RelationNotFoundException   如果没有带给定 id 的关系

@see #getRoles

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map<javax.management.ObjectName, java.util.List<java.lang.String>> javax.management.relation.RelationServiceMBean.getReferencedMBeans(String relationId) throws java.lang.IllegalArgumentException, javax.management.relation.RelationNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
检索关系的各种角色中引用的 MBean。

@param   relationId   关系 id

@return   一个 HashMap 映射：
 <P> ObjectName -&gt; ArrayList of String（角色名）

@exception   IllegalArgumentException   如果参数为 null
@exception   RelationNotFoundException   如果不存在给定关系 id 的关系

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RelationServiceMBean.getRelationTypeName(String relationId) throws java.lang.IllegalArgumentException, javax.management.relation.RelationNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定关系的相关关系类型的名称。

@param   relationId   关系 id

@return   相关关系类型的名称。

@exception   IllegalArgumentException   如果参数为 null
@exception   RelationNotFoundException   如果不存在给定关系 id 的关系

<!-- END DATA -->
