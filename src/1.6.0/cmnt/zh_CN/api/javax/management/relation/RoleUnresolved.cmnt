<!-- BEGIN KEY -->
public class javax.management.relation.RoleUnresolved extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
表示未解析的角色：由于存在问题而无法从关系中检索到的角色。它提供该角色名称、值（如果试图设置该角色时出现问题）和定义问题的整数（在 RoleStatus 中定义的常量）。

<p>此类的 <b>serialVersionUID</b> 为 <code>-48350262537070138L</code>。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] javax.management.relation.RoleUnresolved.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
@serialField roleName String Role name
@serialField roleValue List Role value ({@link List} of {@link ObjectName} objects)
@serialField problemType int Problem type

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleUnresolved(String name, java.util.List<javax.management.ObjectName> value, int pbType) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造方法。

@param name  角色的名称；
@param value  角色的值（设置角色时是否存在问题）；
@param pbType  问题的类型（依据已知的问题类型，作为静态最终成员列出）。
@exception IllegalArgumentException  如果参数为 null 或问题类型不正确
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RoleUnresolved.getRoleName()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索角色名称。

@return   角色名称。

@see #setRoleName

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<javax.management.ObjectName> javax.management.relation.RoleUnresolved.getRoleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索角色值。

@return   ObjectName 对象的 ArrayList，即将在给定角色中进行设置的一个数组列表。如果读取访问返回未解析的角色，则返回 null。

@see #setRoleValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.relation.RoleUnresolved.getProblemType()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索问题类型。

@return   对应于问题的整数，即描述为当前类的静态最终成员的整数。

@see #setProblemType

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RoleUnresolved.setRoleName(String name) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置角色名称。

@param   name   新角色名称。

@exception   IllegalArgumentException   如果是 null 参数

@see #getRoleName

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RoleUnresolved.setRoleValue(java.util.List<javax.management.ObjectName> value)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置角色值。

@param   value   未在角色中设置的引用 MBean 的 ObjectName 对象列表。

@see #getRoleValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RoleUnresolved.setProblemType(int pbType) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置问题类型。

@param   pbType   对应于问题的整数。必须是描述为当前类的静态最终成员的某个整数。

@exception   IllegalArgumentException   如果问题类型不正确

@see #getProblemType

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.relation.RoleUnresolved.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
复制此对象。

@return   独立的副本。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RoleUnresolved.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述此对象的字符串。

@return   此 RoleUnresolved 对象的描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.RoleUnresolved.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 {@link ObjectInputStream} 反序列化 {@link RoleUnresolved}。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.RoleUnresolved.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 {@link RoleUnresolved} 序列化为 {@link ObjectOutputStream}。

<!-- END DATA -->
