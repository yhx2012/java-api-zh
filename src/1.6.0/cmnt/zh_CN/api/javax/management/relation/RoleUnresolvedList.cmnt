<!-- BEGIN KEY -->
public class javax.management.relation.RoleUnresolvedList extends java.util.ArrayList
<!-- END KEY -->
<!-- BEGIN DATA -->
RoleUnresolvedList 表示 RoleUnresolved 对象的列表，这些对象代表在试图访问角色（进行读取或写入）时遇到问题而无法从关系检索到的角色。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleUnresolvedList()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个空的 RoleUnresolvedList。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleUnresolvedList(int initialCapacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有指定初始容量的空 RoleUnresolvedList。

@param   initialCapacity   初始容量

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleUnresolvedList(java.util.List<javax.management.relation.RoleUnresolved> list) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个包含指定 {@code List} 元素的 {@code RoleUnresolvedList}，这些元素按 {@code List} 迭代器返回的顺序排列。{@code RoleUnresolvedList} 实例的初始容量是指定 {@code List} 大小的 110％。

@param   list   定义新 {@code RoleUnresolvedList} 初始内容的 {@code List}。

@exception   IllegalArgumentException   如果 {@code list} 参数为 {@code null} 或者 {@code list} 参数包含任何非 RoleUnresolved 对象。

@see ArrayList#ArrayList(java.util.Collection)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<javax.management.relation.RoleUnresolved> javax.management.relation.RoleUnresolvedList.asList()
<!-- END KEY -->
<!-- BEGIN DATA -->
 以 {@code List<RoleUnresolved>} 的形式返回此列表的视图。对返回值的更改将通过对原 {@code RoleUnresolvedList} 的更改反映出来，反之亦然。

 @return 一个 {@code List<RoleUnresolved>}，其内容反映此 {@code RoleUnresolvedList} 的内容。

 <p>如果曾经对给定的 {@code RoleUnresolvedList} 实例调用过此方法，则之后试图对该实例添加非 {@code RoleUnresolved} 对象的操作将会失败，并抛出 {@code IllegalArgumentException}。出于兼容性原因，允许向从未调用过此方法的 {@code RoleUnresolvedList} 添加非 {@code RoleUnresolved} 对象。</p>

 @throws IllegalArgumentException 如果此 {@code RoleUnresolvedList} 包含非 {@code RoleUnresolved} 元素。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RoleUnresolvedList.add(RoleUnresolved role) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定为列表中最后一个元素的 RoleUnresolved。

@param   role - 要添加的未解析角色。

@exception   IllegalArgumentException   如果未解析角色为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RoleUnresolvedList.add(int index, RoleUnresolved role) throws java.lang.IllegalArgumentException, java.lang.IndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
在指定位置处插入指定为元素的未解析角色。将其索引大于或等于当前位置的元素上移。

@param   index - 在列表中要插入新 RoleUnresolved 对象的位置。
@param   role - 要插入的 RoleUnresolved 对象。

@exception   IllegalArgumentException   如果未解析角色为 null。
@exception IndexOutOfBoundsException 如果索引不在 (<code>index &lt; 0 || index &gt; size()</code>) 范围内。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RoleUnresolvedList.set(int index, RoleUnresolved role) throws java.lang.IllegalArgumentException, java.lang.IndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定位置处的元素设置为指定的未解析角色。丢弃该位置以前的元素。

@param   index - 指定的位置。
@param   role - 应该将未解析角色元素设置成的值。

@exception   IllegalArgumentException   如果未解析角色为 null。
@exception IndexOutOfBoundsException 如果索引不在 (<code>index &lt; 0 || index &gt; size()</code>) 范围内。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.relation.RoleUnresolvedList.addAll(RoleUnresolvedList roleList) throws java.lang.IndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定 RoleUnresolvedList 中的所有元素追加到列表末尾，这些元素按指定 RoleUnresolvedList 的迭代器返回的顺序排列。

@param   roleList 要插入到列表中的元素（可以为 null）。

@return   如果此列表由于调用而更改，则返回 true。

@exception   IndexOutOfBoundsException   如果用列表外面的索引访问。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.relation.RoleUnresolvedList.addAll(int index, RoleUnresolvedList roleList) throws java.lang.IllegalArgumentException, java.lang.IndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
从指定位置开始，将指定 RoleUnresolvedList 中的所有元素插入此列表，这些元素按指定 RoleUnresolvedList 的迭代器返回的顺序排列。

@param   index  插入指定 RoleUnresolvedList 中第一个元素的位置。
@param   roleList  要插入该列表的元素。

@return   如果此列表由于调用而更改，则返回 true。

@exception   IllegalArgumentException   如果角色为 null。
@exception IndexOutOfBoundsException 如果索引不在 (<code>index &lt; 0 || index &gt; size()</code>) 范围内。

<!-- END DATA -->
