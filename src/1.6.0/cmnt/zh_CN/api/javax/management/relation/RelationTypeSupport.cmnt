<!-- BEGIN KEY -->
public class javax.management.relation.RelationTypeSupport extends java.lang.Object implements javax.management.relation.RelationType
<!-- END KEY -->
<!-- BEGIN DATA -->
RelationTypeSupport 对象实现 RelationType 接口。
<P>它表示一个关系类型，提供期望在该类型的每个关系中受支持的各角色的角色实现。
 
<P>关系类型包括关系类型名称和角色信息（由 RoleInfo 对象表示）的列表。

<P>关系类型必须在 Relation Service（关系服务）中声明：
<P>- 可以使用 createRelationType() 方法，在此情况下，将在 Relation Service 中创建和保存 RelationTypeSupport 对象
<P>- 也可以使用 addRelationType() 方法，在此情况下，用户必须创建一个实现 RelationType 接口的对象，并将此对象用于表示 Relation Service 中的关系类型。

 <p>此类的 <b>serialVersionUID</b> 为 <code>4611072955724144607L</code>。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] javax.management.relation.RelationTypeSupport.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
@serialField typeName String Relation type name
@serialField roleName2InfoMap Map {@link Map} holding the mapping: &lt;role name ({@link String})&gt; -&gt; &lt;role info ({@link RoleInfo} object)&gt;
@serialField isInRelationService boolean Flag specifying whether the relation type has been declared in the Relation Service (so can no longer be updated)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RelationTypeSupport(String relationTypeName, javax.management.relation.RoleInfo[] roleInfoArray) throws java.lang.IllegalArgumentException, javax.management.relation.InvalidRelationTypeException
<!-- END KEY -->
<!-- BEGIN DATA -->
所有角色定义在其中动态创建并作为参数传递的构造方法。

@param   relationTypeName   关系类型的名称
@param   roleInfoArray   角色定义（RoleInfo 对象）的列表

@exception   IllegalArgumentException   如果是 null 参数
@exception   InvalidRelationTypeException   如果：
<P>- 两个不同的角色用了同一个名称
<P>- 未提供角色信息
<P>- 提供了一个 null 角色信息

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.management.relation.RelationTypeSupport(String relationTypeName)
<!-- END KEY -->
<!-- BEGIN DATA -->
用于子类的构造方法。

@param   relationTypeName   关系类型的名称。

@exception   IllegalArgumentException   如果是 null 参数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RelationTypeSupport.getRelationTypeName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回关系类型名称。

@return   关系类型名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<javax.management.relation.RoleInfo> javax.management.relation.RelationTypeSupport.getRoleInfos()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回角色定义的列表（RoleInfo 对象的 ArrayList）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleInfo javax.management.relation.RelationTypeSupport.getRoleInfo(String roleInfoName) throws java.lang.IllegalArgumentException, javax.management.relation.RoleInfoNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定角色信息名称的角色信息（RoleInfo 对象）（如果找不到，则返回 null）。

@param   roleInfoName   角色信息名称

@return  如果提供角色定义的对象不存在，则返回 RoleInfo 对象

@exception   IllegalArgumentException   如果是 null 参数
@exception   RoleInfoNotFoundException   如果在关系类型中没有带该名称的角色信息。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.management.relation.RelationTypeSupport.addRoleInfo(RoleInfo roleInfo) throws java.lang.IllegalArgumentException, javax.management.relation.InvalidRelationTypeException
<!-- END KEY -->
<!-- BEGIN DATA -->
添加角色信息。创建关系类型后当然不应使用此方法，因为更新这种关系类型将无效，已创建的与该类型关联的关系仍然遵循这种关系类型。如果试图更新在 Relation Service 中声明的关系类型，则可能抛出 RuntimeException。

@param   roleInfo   要添加的角色信息。

@exception   IllegalArgumentException   如果是 null 参数。
@exception   InvalidRelationTypeException   如果在当前具有同一名称的关系类型中已经存在角色信息。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.RelationTypeSupport.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 {@link ObjectInputStream} 反序列化 {@link RelationTypeSupport}。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.RelationTypeSupport.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 {@link RelationTypeSupport} 序列化为 {@link ObjectOutputStream}。

<!-- END DATA -->
