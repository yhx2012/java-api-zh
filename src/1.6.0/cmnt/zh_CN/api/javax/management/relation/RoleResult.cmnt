<!-- BEGIN KEY -->
public class javax.management.relation.RoleResult extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
表示对一个关系的几个角色多个访问的结果（可以是读取，也可以是写入）。

<p>此类的 <b>serialVersionUID</b> 为 <code>-6304063118040985512L</code>。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] javax.management.relation.RoleResult.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
@serialField roleList RoleList List of roles successfully accessed
@serialField unresolvedRoleList RoleUnresolvedList List of roles unsuccessfully accessed

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleResult(RoleList list, RoleUnresolvedList unresolvedList)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造方法。

@param   list   成功访问的角色列表。
@param   unresolvedList   未成功访问的角色列表（具有问题描述）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleList javax.management.relation.RoleResult.getRoles()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索成功访问的角色列表。

@return   一个 RoleList

@see #setRoles

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleUnresolvedList javax.management.relation.RoleResult.getRolesUnresolved()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索未成功访问的角色列表。

@return   一个 RoleUnresolvedList。

@see #setRolesUnresolved

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RoleResult.setRoles(RoleList list)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置成功访问的角色列表。

@param   list   成功访问的角色列表

@see #getRoles

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RoleResult.setRolesUnresolved(RoleUnresolvedList unresolvedList)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置未成功访问的角色列表。

@param   unresolvedList   未成功访问的角色列表

@see #getRolesUnresolved

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.RoleResult.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 {@link ObjectInputStream} 反序列化 {@link RoleResult}。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.RoleResult.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 {@link RoleResult} 序列化为 {@link ObjectOutputStream}。

<!-- END DATA -->
