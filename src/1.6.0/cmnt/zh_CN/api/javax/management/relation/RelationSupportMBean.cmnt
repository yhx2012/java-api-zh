<!-- BEGIN KEY -->
public interface javax.management.relation.RelationSupportMBean extends javax.management.relation.Relation
<!-- END KEY -->
<!-- BEGIN DATA -->
RelationSupport 对象由 Relation Service 内部使用，表示任何关系类型的具有无限量角色的简单关系（只有角色，没有属性或方法）。作为内部表示形式，它不会向用户公开。
<P>RelationSupport 类遵循标准的 MBean 设计模式。因此，用户可以决定将 RelationSupport 对象本身实例化为 MBean（因为它遵循 MBean 设计模式），以便在 MBean Server 中注册，然后将其添加到 Relation Service 中。
<P>用户还可以在创建自己的 MBean 关系类时让其扩展 RelationSupport，以检索所需接口的实现（请参见下面内容）。
<P>它还可以在用户关系 MBean 类中让一个成员成为 RelationSupport 对象，并通过将所有接口委托给此成员来实现所需接口。
<P> RelationSupport 实现 Relation 接口（将由 Relation Service 处理）。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Boolean javax.management.relation.RelationSupportMBean.isInRelationService()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定该对象是否仍然由 Relation Service 处理的内部标志。

@return   如果该对象仍然由 Relation Service 处理，则返回等于 {@link Boolean#TRUE} 的 Boolean 值；否则，返回等于 {@link Boolean#FALSE} 的 Boolean 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RelationSupportMBean.setRelationServiceManagementFlag(Boolean flag) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>指定此关系是否由 Relation Service 处理。</p>
<P>注意，当 Relation Service 通过其管理接口访问该关系时，此方法必须公开。强烈建议不要使用此方法。使用此方法不影响 Relation Service 中的关系对象的注册，但会提供有关它的错误信息！

@param   flag   该关系是否由 Relation Service 处理的标志。
 
@exception   IllegalArgumentException   如果是 null 参数

<!-- END DATA -->
