<!-- BEGIN KEY -->
public class javax.management.relation.RoleList extends java.util.ArrayList
<!-- END KEY -->
<!-- BEGIN DATA -->
RoleList 表示角色（Role 对象）的列表。它在创建关系和试图在关系中设置几个角色（通过 'setRoles()'方法）时用作参数。它将作为 RoleResult 的一部分返回，以提供成功检索的角色。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleList()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个空的 RoleList。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleList(int initialCapacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有指定初始容量的空 RoleList。

@param   initialCapacity   初始容量

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleList(java.util.List<javax.management.relation.Role> list) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个包含指定 {@code List} 元素的 {@code RoleList}，这些元素按 {@code List} 迭代器返回的顺序排列。{@code RoleList} 实例的初始容量是指定 {@code List} 大小的 110％。

@param   list   定义新 {@code RoleList} 初始内容的 {@code List}。

@exception   IllegalArgumentException   如果 {@code list} 参数为 {@code null} 或者 {@code list} 参数包含任何非 Role 对象。

@see ArrayList#ArrayList(java.util.Collection)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<javax.management.relation.Role> javax.management.relation.RoleList.asList()
<!-- END KEY -->
<!-- BEGIN DATA -->
 以 {@code List<Role>} 的形式返回此列表的示图。对返回值的更改将通过对原 {@code RoleList} 的更改反映出来，反之亦然。

 @return 一个 {@code List<Role>}，其内容反映此 {@code RoleList} 的内容。

 <p>如果曾经对给定的 {@code RoleList} 实例调用过此方法，则之后试图对该实例添加非 {@code Role} 对象的操作将会失败，并抛出 {@code IllegalArgumentException}。出于兼容性原因，允许向从未调用过此方法的 {@code RoleList} 添加非 {@code Role} 对象。</p>

 @throws IllegalArgumentException 如果此 {@code RoleList} 包含非 {@code Role} 元素。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RoleList.add(Role role) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定为列表中最后一个元素的 Role。

@param   role   要添加的角色。

@exception   IllegalArgumentException   如果角色为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RoleList.add(int index, Role role) throws java.lang.IllegalArgumentException, java.lang.IndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
插入指定为指定位置处的元素的角色。将其索引大于或等于当前位置的元素上移。

@param   index   在列表中要插入新 Role 对象的位置。
@param   role   要插入的 Role 对象。

@exception   IllegalArgumentException   如果角色为 null。
@exception   IndexOutOfBoundsException   如果用列表之外的索引访问。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RoleList.set(int index, Role role) throws java.lang.IllegalArgumentException, java.lang.IndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定位置处的元素设置为指定角色。丢弃该位置以前的元素。

@param   index   指定的位置。
@param   role   角色元素应该设置为的值。

@exception   IllegalArgumentException   如果角色为 null。
@exception   IndexOutOfBoundsException   如果用列表之外的索引访问。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.relation.RoleList.addAll(RoleList roleList) throws java.lang.IndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定 RoleList 中的所有元素追加到列表末尾，这些元素按指定 RoleList 的迭代器返回的顺序排列。

@param   roleList   要插入列表的元素（可以为 null）

@return   如果此列表由于调用而更改，则返回 true。

@exception   IndexOutOfBoundsException   如果用列表之外的索引访问。


@see ArrayList#addAll(Collection)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.relation.RoleList.addAll(int index, RoleList roleList) throws java.lang.IllegalArgumentException, java.lang.IndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
从指定位置开始，将指定 RoleList 中的所有元素插入此列表，这些元素按指定 RoleList 的迭代器返回的顺序排列。

@param   index   插入指定 RoleList 中第一个元素的位置。
@param   roleList   要插入该列表的元素。

@return   如果此列表由于调用而更改，则返回 true。

@exception   IllegalArgumentException   如果角色为 null。
@exception   IndexOutOfBoundsException   如果用列表之外的索引访问。

@see ArrayList#addAll(int, Collection)

<!-- END DATA -->
