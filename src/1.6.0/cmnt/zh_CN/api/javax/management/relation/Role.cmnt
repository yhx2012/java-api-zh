<!-- BEGIN KEY -->
public class javax.management.relation.Role extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
表示角色：包括角色名称和引用的 MBean（通过其 ObjectName）。角色值总是表示为 ObjectName 的 ArrayList 集合，以均衡访问。

<p>此类的 <b>serialVersionUID</b> 为 <code>-279985518429862552L</code>。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] javax.management.relation.Role.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
@serialField name String Role name
@serialField objectNameList List {@link List} of {@link ObjectName}s of referenced MBeans

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.Role(String roleName, java.util.List<javax.management.ObjectName> roleValue) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>创建一个新的 Role 对象。不用检查角色值中的 ObjectName 是否在 MBean 服务器中存在。在关系中设置角色时将进行该项检查。

@param   roleName   角色名称
@param   roleValue   角色值（ObjectName 对象的列表）

@exception   IllegalArgumentException   如果是 null 参数

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.Role.getRoleName()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索角色名称。

@return   角色名称。

@see #setRoleName

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<javax.management.ObjectName> javax.management.relation.Role.getRoleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索角色值。

@return   引用的 MBean 的 ObjectName 对象的 ArrayList。

@see #setRoleValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.Role.setRoleName(String roleName) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置角色名称。

@param   roleName   角色名称

@exception   IllegalArgumentException   如果是 null 参数

@see #getRoleName

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.Role.setRoleValue(java.util.List<javax.management.ObjectName> roleValue) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置角色值。

@param   roleValue   引用的 MBean 的 ObjectName 对象的列表。

@exception   IllegalArgumentException   如果是 null 参数

@see #getRoleValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.Role.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述角色的字符串。

@return   角色的描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.relation.Role.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
复制角色对象。

@return   当前 Role 对象的独立副本的 Role。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String javax.management.relation.Role.roleValueToString(java.util.List<javax.management.ObjectName> roleValue) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定角色值的字符串。

@param   roleValue   ObjectName 对象的列表

@return   由新行 (\n) 分隔的 ObjectName 组成的字符串。

@exception   IllegalArgumentException   如果是 null 参数

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.Role.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 {@link ObjectInputStream} 反序列化 {@link Role}。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.Role.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 {@link Role} 序列化为 {@link ObjectOutputStream}。

<!-- END DATA -->
