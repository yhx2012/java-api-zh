<!-- BEGIN KEY -->
public class javax.management.relation.RoleInfo extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
RoleInfo 概括介绍关系类型中的角色。

<p>此类的 <b>serialVersionUID</b> 为 <code>2504952983494636987L</code>。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.management.relation.RoleInfo.ROLE_CARDINALITY_INFINITY
<!-- END KEY -->
<!-- BEGIN DATA -->
指定无限的容量。

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] javax.management.relation.RoleInfo.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
@serialField name String Role name
@serialField isReadable boolean Read access mode: <code>true</code> if role is readable
@serialField isWritable boolean Write access mode: <code>true</code> if role is writable
@serialField description String Role description
@serialField minDegree int Minimum degree (i.e. minimum number of referenced MBeans in corresponding role)
@serialField maxDegree int Maximum degree (i.e. maximum number of referenced MBeans in corresponding role)
@serialField referencedMBeanClassName String Name of class of MBean(s) expected to be referenced in corresponding role

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleInfo(String roleName, String mbeanClassName, boolean read, boolean write, int min, int max, String descr) throws java.lang.IllegalArgumentException, javax.management.relation.InvalidRoleInfoException, java.lang.ClassNotFoundException, javax.management.NotCompliantMBeanException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造方法。

@param   roleName   角色的名称。
@param   mbeanClassName   期望在相应角色中引用的 MBean 的类名称。如果 MBean <em>M</em> 在此角色中，则对于 {@link MBeanServer#isInstanceOf isInstanceOf(M, mbeanClassName)}，MBean 服务器必须返回 true。
@param   read   指示相应角色是否可读的标志
@param   write   指示相应角色是否可设置的标志
@param   min   角色的最小程度，即要在相应角色提供的 MBean 的最小数必须小于或等于 <tt>max</tt>。（ROLE_CARDINALITY_INFINITY 不受限制）
@param   max   角色的最大程度，即要在相应角色中提供的 MBean 的最大数必须大于或等于 <tt>min</tt>（ROLE_CARDINALITY_INFINITY 不受限制）
@param   descr   角色的描述（可以为 null）

@exception   IllegalArgumentException  如果参数为 null
@exception   InvalidRoleInfoException  如果最小程度大于最大程度。
@exception   ClassNotFoundException   从 JMX 1.2 开始，不再抛出此异常。它将保留在此类的声明中，以便与现有代码兼容。
@exception   NotCompliantMBeanException   如果类 mbeanClassName 不是 MBean 类。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleInfo(String roleName, String mbeanClassName, boolean read, boolean write) throws java.lang.IllegalArgumentException, java.lang.ClassNotFoundException, javax.management.NotCompliantMBeanException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造方法。

@param   roleName   角色的名称
@param   mbeanClassName   期望在相应角色中引用的 MBean 的类名称。如果 MBean <em>M</em> 在此角色中，则对于 {@link MBeanServer#isInstanceOf isInstanceOf(M, mbeanClassName)}，MBean 服务器必须返回 true。
@param   read   指示相应角色是否可读的标志
@param   write   指示相应角色是否可设置的标志

<P>默认为 1 的最小和最大程度。
<P>默认为 null 的角色描述。

@exception   IllegalArgumentException   如果参数为 null
@exception   ClassNotFoundException   从 JMX 1.2 开始，不再抛出此异常。它将保留在此类的声明中，以便与现有代码兼容。
@exception   NotCompliantMBeanException   从 JMX 1.2 开始，不再抛出此异常。它将保留在此类的声明中，以便与现有代码兼容。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleInfo(String roleName, String mbeanClassName) throws java.lang.IllegalArgumentException, java.lang.ClassNotFoundException, javax.management.NotCompliantMBeanException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造方法。

@param   roleName   角色的名称
@param   mbeanClassName   期望在相应角色中引用的 MBean 的类名称。如果 MBean <em>M</em> 在此角色中，则对于 {@link MBeanServer#isInstanceOf isInstanceOf(M, mbeanClassName)}，MBean 服务器必须返回 true。

<P>默认为 true 的 IsReadable 和 IsWritable。
<P>默认为 1 的最小和最大程度。
<P>默认为 null 的角色描述。

@exception   IllegalArgumentException   如果参数为 null
@exception   ClassNotFoundException   从 JMX 1.2 开始，不再抛出此异常。它将保留在此类的声明中，以便与现有代码兼容。
@exception   NotCompliantMBeanException   从 JMX 1.2 开始，不再抛出此异常。它将保留在此类的声明中，以便与现有代码兼容。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleInfo(RoleInfo roleInfo) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
复制构造方法。

@param   roleInfo   要复制的 <tt>RoleInfo</tt> 实例。

@exception   IllegalArgumentException   如果参数为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RoleInfo.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回角色名称。

@return   角色名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.relation.RoleInfo.isReadable()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回角色的读取访问模式（如果可读，则返回 true）。

@return   如果角色可读，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.relation.RoleInfo.isWritable()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回角色的写入访问模式（如果可写，则返回 true）。

@return   如果角色可写，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RoleInfo.getDescription()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回角色的描述文本。

@return   角色的描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.relation.RoleInfo.getMinDegree()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回相应角色引用的最小程度。

@return   最小程度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.relation.RoleInfo.getMaxDegree()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回相应角色引用的最大程度。

@return   最大程度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RoleInfo.getRefMBeanClassName()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回期望在相应角色中引用的 MBean 的类型名称。</p>

@return   引用的类型名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.relation.RoleInfo.checkMinDegree(int value)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <tt>value</tt> 参数大于或等于期望的最小程度，则返回 true；否则返回 false。

@param   value  要检查的值

@return   如果大于或等于最小程度，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.relation.RoleInfo.checkMaxDegree(int value)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <tt>value</tt> 参数小于或等于期望的最大程度，则返回 true；否则返回 false。

@param   value  要检查的值

@return   如果小于或等于最大程度，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RoleInfo.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述角色信息的字符串。

@return   角色信息的描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.RoleInfo.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 {@link ObjectInputStream} 反序列化 {@link RoleInfo}。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.RoleInfo.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 {@link RoleInfo} 序列化为 {@link ObjectOutputStream}。

<!-- END DATA -->
