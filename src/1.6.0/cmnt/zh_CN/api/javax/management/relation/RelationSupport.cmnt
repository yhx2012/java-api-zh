<!-- BEGIN KEY -->
public class javax.management.relation.RelationSupport extends java.lang.Object implements javax.management.relation.RelationSupportMBean, javax.management.MBeanRegistration
<!-- END KEY -->
<!-- BEGIN DATA -->
RelationSupport 对象由 Relation Service 内部使用，表示任何关系型的具有不限数量的角色的简单关系（只有角色，没有属性或方法）。作为内部表示形式，不会向用户公开它。
 <P>RelationSupport 类遵循标准的 MBean 设计模式。因此，用户可以决定将 RelationSupport 对象本身实例化为 MBean（因为它遵循 MBean 设计模式），以便在 MBean Server 中注册，然后将其添加到 Relation Service 中。
 <P>用户还可以在创建自己的 MBean 关系类时让其扩展 RelationSupport，以检索所需接口的实现（请参见下面内容）。
 <P>它还可以在用户关系 MBean 类中让一个成员成为 RelationSupport 对象，并通过将所有接口委托给此成员来实现所需接口。
 <P> RelationSupport 实现 Relation 接口（将由 Relation Service 处理）。
 <P>它还实现 MBeanRegistration 接口，以便能够检索它在其中注册的 MBean Server（如果注册为 MBean），从而访问其 Relation Service。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RelationSupport(String relationId, ObjectName relationServiceName, String relationTypeName, RoleList list) throws javax.management.relation.InvalidRoleValueException, java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 {@code RelationSupport} 对象。
 <P>在用户要将 RelationSupport 对象注册为 MBean 时，或者在创建扩展 RelationSupport 的用户关系 MBean 类时，必须使用此构造方法。
 <P>在 Relation Service 级别不执行任何操作，既不向 {@code RelationService} 添加 {@code RelationSupport} 对象，也不查看提供的值是否正确。始终创建该对象，除以下情况外：
 <P>- 任何所需的参数为 {@code null}。
 <P>- 两个角色使用了同一名称。
 <P>为了将该对象作为关系处理，务必使用 Relation Service 方法 addRelation() 将 {@code RelationSupport} 对象添加到 Relation Service 中。


@param relationId   关系标识符，用来在 Relation Service 中标识关系。
 <P>期望在给定的 Relation Service 中唯一。
@param relationServiceName   将在其中注册关系的 Relation Service 的 ObjectName。
 <P>此参数是必需的，因为这是知道给定关系的关系类型定义的 Relation Service，所以将能够检查更新操作（集）。
@param   relationTypeName   关系类型的名称。
 <P>期望已在给定的 Relation Service 中创建。
@param   list   要初始化关系的角色（Role 对象）的列表。可以为 {@code null}。
 <P>期望遵循相关关系类型中的关系信息。

@exception   InvalidRoleValueException   如果两个角色使用了同一个名称。
@exception   IllegalArgumentException   如果任何所需参数（关系 id、关系服务 ObjectName、关系服务 MBeanServer 或者关系类型名称）为 {@code null}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RelationSupport(String relationId, ObjectName relationServiceName, MBeanServer relationServiceMBeanServer, String relationTypeName, RoleList list) throws javax.management.relation.InvalidRoleValueException, java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 {@code RelationSupport} 对象。
 <P>在用户关系 MBean 实现期望通过委托给 RelationSupport 对象受关系支持的接口时，务必使用此构造方法。
 <P>此对象需要知道期望处理该关系的 Relation Service。所以它必须知道 Relation Service 在其中注册的 MBean Server。
 <P>按照限制，必须像期望处理它的 Relation Service 一样在同一 MBean Server 中注册关系 MBean。所以必须创建并注册用户关系 MBean，然后可以使用标识的 MBean Server 创建包装的 RelationSupport 对象。
 <P>在 Relation Service 级别不执行任何操作，既不向 {@code RelationService} 添加 {@code RelationSupport} 对象，也不查看提供的值是否正确。始终创建该对象，除以下情况外：
 <P>- 任何所需的参数为 {@code null}。
 <P>- 两个角色使用了同一个名称。
 <P>为了将该对象作为关系处理，务必使用 Relation Service 方法 addRelation() 将 {@code RelationSupport} 对象添加到 Relation Service 中。


@param relationId   关系标识符，用来在 Relation Service 中标识关系。
 <P>期望在给定的 Relation Service 中唯一。
@param relationServiceName   将在其中注册关系的 Relation Service 的 ObjectName。
 <P>此参数是必需的，因为这是知道给定关系的关系类型定义的 Relation Service，所以将能够检查更新操作（集合）。
@param   relationServiceMBeanServer   该包装 MBean 在其中或将在其中注册的 MBean Server。
 <P>期望是 Relation Service 在其中或将在其中注册的 MBean Server。
@param   relationTypeName   关系类型的名称。
 <P>期望已在给定的 Relation Service 中创建该名称。
@param   list   要初始化关系的角色（Role 对象）的列表。可以为 {@code null}。
 <P>期望遵循相关关系类型中的关系信息。

@exception   InvalidRoleValueException   如果两个角色使用了同一个名称。
@exception   IllegalArgumentException   如果任何所需参数（关系 id、关系服务 ObjectName 或者关系类型名称）为 {@code null}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<javax.management.ObjectName> javax.management.relation.RelationSupport.getRole(String roleName) throws java.lang.IllegalArgumentException, javax.management.relation.RoleNotFoundException, javax.management.relation.RelationServiceNotRegisteredException
<!-- END KEY -->
<!-- BEGIN DATA -->
检索给定角色名称的角色值。
 <P>按照关系类型检查角色是否存在以及是否可读。

@param   roleName   角色名称

@return   作为角色值的 ObjectName 对象的 ArrayList

@exception   IllegalArgumentException   如果为 null 角色名称
@exception   RoleNotFoundException   如果：
 <P>- 不存在具有给定名称的角色
 <P>- 角色不可读。
@exception   RelationServiceNotRegisteredException   如果 Relation Service 未在 MBean Server 中注册

@see #setRole

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleResult javax.management.relation.RelationSupport.getRoles(java.lang.String[] roleNameArray) throws java.lang.IllegalArgumentException, javax.management.relation.RelationServiceNotRegisteredException
<!-- END KEY -->
<!-- BEGIN DATA -->
检索具有给定名称的角色值。
 <P>按照关系类型检查每个角色是否存在以及是否可读。

@param   roleNameArray   要检索的角色名称的数组

@return   RoleResult 对象，包括一个 RoleList（针对成功检索到的角色）和一个 RoleUnresolvedList（针对未检索到的角色）。

@exception   IllegalArgumentException  如果角色名称为 null
@exception   RelationServiceNotRegisteredException  如果 Relation Service 未在 MBean Server 中注册。

@see #setRoles

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleResult javax.management.relation.RelationSupport.getAllRoles() throws javax.management.relation.RelationServiceNotRegisteredException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回关系中存在的所有角色。


@return   RoleResult 对象，该对象包括一个 RoleList（针对成功检索到的角色）和一个 RoleUnresolvedList（针对不可读的角色）。


@exception   RelationServiceNotRegisteredException   如果 Relation Service 未在 MBean Server 中注册

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleList javax.management.relation.RelationSupport.retrieveAllRoles()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回关系中的所有角色，不检查读取模式。


@return   一个 RoleList

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Integer javax.management.relation.RelationSupport.getRoleCardinality(String roleName) throws java.lang.IllegalArgumentException, javax.management.relation.RoleNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前在给定角色中引用的 MBean 数。

@param   roleName   角色名称

@return   当前在此角色中引用的 MBean 数

@exception   IllegalArgumentException   如果角色名称为 null
@exception   RoleNotFoundException   如果不存在具有给定名称的角色

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RelationSupport.setRole(Role role) throws java.lang.IllegalArgumentException, javax.management.relation.RoleNotFoundException, javax.management.relation.RelationTypeNotFoundException, javax.management.relation.InvalidRoleValueException, javax.management.relation.RelationServiceNotRegisteredException, javax.management.relation.RelationNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置给定的角色。
 <P>将按照其在关系的关系类型中提供的相应角色定义检查角色
 <P>将发送通知（带类型 RELATION_BASIC_UPDATE 或 RELATION_MBEAN_UPDATE 的 RelationNotification，具体取决于该关系是否为 MBean）

@param   role   要设置的角色（名称和新值）

@exception   IllegalArgumentException   如果角色是 null
@exception   RoleNotFoundException   如果不存在具有指定名称的角色，或者该角色不可写该角色不可写（初始化角色时未执行写入访问模式测试）
@exception   InvalidRoleValueException   如果为角色提供的值无效，即
 <P>- 给定值中引用的 MBean 数小于期望的最小程度
 <P>- 提供的值中引用的 MBean 数超过期望的最大程度
 <P>- 该值中引用的 MBean 的一个对象不是该角色期望的 MBean 类的对象
 <P>- 不存在为该角色提供的 MBean
@exception   RelationServiceNotRegisteredException   如果 Relation Service 未在 MBean Server 中注册
@exception   RelationTypeNotFoundException   如果尚未在 Relation Service 中声明该关系类型
@exception   RelationNotFoundException   如果尚未在 Relation Service 中添加关系。


@see #getRole

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleResult javax.management.relation.RelationSupport.setRoles(RoleList list) throws java.lang.IllegalArgumentException, javax.management.relation.RelationServiceNotRegisteredException, javax.management.relation.RelationTypeNotFoundException, javax.management.relation.RelationNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置给定的角色。
 <P>将按照其在关系的关系类型中提供的相应角色定义检查角色。
 <P>每个更新的角色将发送一个通知（带类型 RELATION_BASIC_UPDATE 或 RELATION_MBEAN_UPDATE 的 RelationNotification，具体取决于该关系是否为 MBean）。


@param   list   要设置的角色列表


@return   RoleResult 对象，该对象包括一个 RoleList（针对成功设置的角色）和一个 RoleUnresolvedList（针对未成功设置的角色）。


@exception   IllegalArgumentException   如果角色列表为 null
@exception   RelationServiceNotRegisteredException   如果 Relation Service 未在 MBean Server 中注册
@exception   RelationTypeNotFoundException   如果在 Relation Service 中尚未声明该关系类型。
@exception   RelationNotFoundException   如果尚未在 Relation Service 中添加关系 MBean。

@see #getRoles

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RelationSupport.handleMBeanUnregistration(ObjectName objectName, String roleName) throws java.lang.IllegalArgumentException, javax.management.relation.RoleNotFoundException, javax.management.relation.InvalidRoleValueException, javax.management.relation.RelationServiceNotRegisteredException, javax.management.relation.RelationTypeNotFoundException, javax.management.relation.RelationNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
在注销角色中引用的 MBean 时由 Relation Service 使用的回调。
 <P>Relation Service 将调用此方法，以让该关系采取行动来反映这种注销的影响。
 <P>小心，不要期望用户调用此方法。
 <P>当前实现是为了用其当前值（引用的 MBean 的 ObjectName 列表）而不用注销的值设置角色。

@param   objectName   注销的 MBean 的 ObjectName
@param   roleName   在其中引用 MBean 的角色名称

@exception   IllegalArgumentException   如果参数为 null 
@exception   RoleNotFoundException   如果角色不在关系中或不可写
@exception   InvalidRoleValueException   如果角色值不遵循相关角色信息（这永远不会在从 Relation Service 中调用时发生）
@exception   RelationServiceNotRegisteredException   如果 Relation Service 未在 MBean Server 注册
@exception   RelationTypeNotFoundException   如果在 Relation Service 中尚未声明该关系类型。
@exception   RelationNotFoundException   如果未在 Relation Service 中添加的关系 MBean 调用此方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map<javax.management.ObjectName, java.util.List<java.lang.String>> javax.management.relation.RelationSupport.getReferencedMBeans()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索在该关系的各种角色中引用的 MBean。

@return   一个 HashMap 映射：
 <P> ObjectName -&gt; String 的 ArrayList（角色名）

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RelationSupport.getRelationTypeName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回相关关系类型的名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.ObjectName javax.management.relation.RelationSupport.getRelationServiceName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回处理关系的 Relation Service 的 ObjectName。

@return   Relation Service 的 ObjectName。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RelationSupport.getRelationId()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回关系标识符（用于唯一标识 Relation Service 中的关系）。


@return   关系 id。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Boolean javax.management.relation.RelationSupport.isInRelationService()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定该对象是否仍然由 Relation Service 处理的内部标志。

<!-- END DATA -->
