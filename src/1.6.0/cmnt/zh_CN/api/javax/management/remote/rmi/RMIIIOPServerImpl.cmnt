<!-- BEGIN KEY -->
public class javax.management.remote.rmi.RMIIIOPServerImpl extends javax.management.remote.rmi.RMIServerImpl
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>一个 {@link RMIServerImpl}，它通过 IIOP 导出，并可创建如同由 IIOP 导出的 RMI 对象的客户端连接。用户代码不经常直接引用此类。</p>

@see RMIServerImpl

@since 1.5
@since.unbundled 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.remote.rmi.RMIIIOPServerImpl(java.util.Map<java.lang.String, ?> env) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>创建新的 {@link RMIServerImpl}。</p>

@param env 包含新的 <code>RMIServerImpl</code> 属性的环境。可以为 null，它等效于一个空映射。

@exception IOException 如果无法创建 RMI 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.Remote javax.management.remote.rmi.RMIIIOPServerImpl.toStub() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回一个 IIOP stub。</p>
此 stub 可能还无法连接到 ORB。只有当 stub 连接到 ORB 时，它才变得可序列化。
@return 一个 IIOP stub。
@exception IOException 如果无法创建 stub，例如 RMIIIOPServerImpl 尚未导出。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.management.remote.rmi.RMIConnection javax.management.remote.rmi.RMIIIOPServerImpl.makeClient(String connectionId, Subject subject) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>创建一个如同从 IIOP 导出的 RMI 对象的新客户端连接。

@param connectionId 新连接的 ID。由此连接器服务器打开的每个连接将具有不同的 ID。如果此参数为 null，则行为不明确。

@param subject 经验证的主题。可以为 null。

@return 新创建的 <code>RMIConnection</code>。

@exception IOException 如果无法创建或导出新的客户端对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.management.remote.rmi.RMIIIOPServerImpl.closeServer() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>由 {@link #close()} 调用以通过取消导出此对象关闭连接器服务器。从此方法返回后，连接器服务器不接受任何新的连接。</p>

@exception IOException 如果关闭连接器服务器的尝试失败。

<!-- END DATA -->
