<!-- BEGIN KEY -->
public class javax.management.remote.NotificationResult extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>缓存的通知的查询结果。通知缓存中的通知具有正的、单调递增的序列号。通知查询的结果包含以下元素：</p>

 <ul>

<li>缓存中保留的最早的通知的序列号。

<li>下一个可供查询使用的通知的序列号。这将是下一个通知查询的起始序列号。

<li>与返回的通知和相应的侦听器对应的 (Notification,listenerID) 对的数组。

 </ul>

<p><code>nextSequenceNumber</code> 不能小于 <code>earliestSequenceNumber</code>。如果小于早先的序列号，这表明介于两个号之间的通知可能已丢失。</p>

@since 1.5
@since.unbundled 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.remote.NotificationResult(long earliestSequenceNumber, long nextSequenceNumber, javax.management.remote.TargetedNotification[] targetedNotifications)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>构造一个通知查询结果。</p>

@param earliestSequenceNumber 缓存中仍保留的最早通知的序列号。
@param nextSequenceNumber 下一个可供查询使用的通知的序列号。
@param targetedNotifications 查询得到的通知以及相应的侦听器。此数组可以为空。

@exception IllegalArgumentException 如果 <code>targetedNotifications</code> 为 null，或者 <code>earliestSequenceNumber</code> 或 <code>nextSequenceNumber</code> 为负。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.management.remote.NotificationResult.getEarliestSequenceNumber()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回缓存中保留的最早通知的序列号。

@return 缓存中保留的最早通知的序列号。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.management.remote.NotificationResult.getNextSequenceNumber()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回下一个可供查询使用的通知的序列号。

@return  下一个可供查询使用的通知的序列号。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.remote.TargetedNotification[] javax.management.remote.NotificationResult.getTargetedNotifications()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回查询到的通知以及相应的侦听器。

@return 查询得到的通知以及相应的侦听器。此数组可以为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.remote.NotificationResult.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该对象的字符串表示形式。结果应是一个简明而丰富的表示形式，它方便人们阅读。

@return  该对象的字符串表示形式。

<!-- END DATA -->
