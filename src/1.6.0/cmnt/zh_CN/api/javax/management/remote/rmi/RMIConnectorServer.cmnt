<!-- BEGIN KEY -->
public class javax.management.remote.rmi.RMIConnectorServer extends javax.management.remote.JMXConnectorServer
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>JMX API 连接器服务器，用于从远程客户端创建基于 RMI 的连接。通常情况下，使用 {@link javax.management.remote.JMXConnectorServerFactory JMXConnectorServerFactory} 建立这样的连接器服务器。但是，专门的应用程序可直接使用此类，例如使用 {@link RMIServerImpl} 对象。</p>

@since 1.5
@since.unbundled 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.management.remote.rmi.RMIConnectorServer.JNDI_REBIND_ATTRIBUTE
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>属性名称，它指定代表 RMI 连接器服务器的 {@link RMIServer} stub 是否应重写位于同一地址的现有 stub。与此属性关联的值（如果有）应为与 <code>&quot;true&quot;</code> 或 <code>&quot;false&quot;</code> 相等（忽略大小写）的字符串。默认值为 false。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.management.remote.rmi.RMIConnectorServer.RMI_CLIENT_SOCKET_FACTORY_ATTRIBUTE
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>属性名称，它指定了与此连接器一起创建的 RMI 对象的 {@link RMIClientSocketFactory}。与此属性关联的值的类型必须为 <code>RMIClientSocketFactory</code>，并且只能在创建连接器服务器时提供的 <code>Map</code> 参数中指定。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.management.remote.rmi.RMIConnectorServer.RMI_SERVER_SOCKET_FACTORY_ATTRIBUTE
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>属性名称，它指定了与此连接器一起创建的 RMI 对象的 {@link RMIServerSocketFactory}。与此属性关联的值的类型必须为 <code>RMIServerSocketFactory</code>，并且只能在创建连接器服务器时提供的 <code>Map</code> 参数中指定。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.remote.rmi.RMIConnectorServer(JMXServiceURL url, java.util.Map<java.lang.String, ?> environment) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>建立 <code>RMIConnectorServer</code>。此方法与调用 {@link #RMIConnectorServer( JMXServiceURL,Map,RMIServerImpl,MBeanServer) RMIConnectorServer(directoryURL,environment,null,null)} 具有相同的效果。</p>

@param url 一个定义如何创建连接器服务器的 URL。不能为 null。

@param environment 控制着 RMI 对象的创建和存储的属性。可以为 null，它等效于一个空映射。

@exception IllegalArgumentException 如果 <code>url</code> 为 null。

@exception MalformedURLException 如果 <code>url</code> 不符合 RMI 连接器的语法，或者其协议不能由此实现识别。使用此构造方法时，只有 &quot;rmi&quot; 和 &quot;iiop&quot; 为有效的。

@exception IOException 如果出于某种原因无法创建连接器服务器，或者其 {@link #start() start} 方法不可避免地失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.remote.rmi.RMIConnectorServer(JMXServiceURL url, java.util.Map<java.lang.String, ?> environment, MBeanServer mbeanServer) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>为给定的 MBean 服务器建立一个 <code>RMIConnectorServer</code>。此方法与调用 {@link #RMIConnectorServer( JMXServiceURL,Map,RMIServerImpl,MBeanServer) RMIConnectorServer(directoryURL,environment,null,mbeanServer)} 具有相同的效果。</p>

@param url 一个定义如何创建连接器服务器的 URL。不能为 null。

@param environment 控制着 RMI 对象的创建和存储的属性。可以为 null，它等效于一个空映射。

@param mbeanServer 新的连接器服务器将与其连接的 MBean 服务器，或者如果它将通过注册为 MBean 服务器中的一个 MBean 进行连接，则为 null。

@exception IllegalArgumentException 如果 <code>url</code> 为 null。

@exception MalformedURLException 如果 <code>url</code> 不符合 RMI 连接器的语法，或者其协议不能由此实现识别。使用此构造方法时，只有 &quot;rmi&quot; 和 &quot;iiop&quot; 为有效的。

@exception IOException 如果出于某种原因无法创建连接器服务器，或者其 {@link #start() start} 方法不可避免地失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.remote.rmi.RMIConnectorServer(JMXServiceURL url, java.util.Map<java.lang.String, ?> environment, RMIServerImpl rmiServerImpl, MBeanServer mbeanServer) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>为给定的 MBean 服务器建立一个 <code>RMIConnectorServer</code>。</p>

@param url 一个定义如何创建连接器服务器的 URL。不能为 null。

@param environment 控制着 RMI 对象的创建和存储的属性。可以为 null，它等效于一个空映射。

@param rmiServerImpl RMIServer 接口的一个实现，与 <var>url</var> 中指定的协议类型一致。如果此参数为非 null，则 <var>url</var> 指定的协议类型没有约束，假定其为有效。否则，将只识别 &quot;rmi&quot; 和 &quot;iiop&quot;。 

@param mbeanServer 新的连接器服务器将与其连接的 MBean 服务器，或者如果它将通过注册为 MBean 服务器中的一个 MBean 进行连接，则为 null。

@exception IllegalArgumentException 如果 <code>url</code> 为 null。

@exception MalformedURLException 如果 <code>url</code> 不符合 RMI 连接器的语法，或者其协议不能由此实现识别。在 <var>rmiServerImpl</var> 为 null 时，只能识别 &quot;rmi&quot; 和 &quot;iiop&quot;。

@exception IOException 如果出于某种原因无法创建连接器服务器，或者其 {@link #start() start} 方法不可避免地失败。

@see #start

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.remote.JMXConnector javax.management.remote.rmi.RMIConnectorServer.toJMXConnector(java.util.Map<java.lang.String, ?> env) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回此连接器服务器的客户端 stub。客户端 stub 为一个可序列化的对象，其 {@link JMXConnector#connect(Map) connect} 方法可用于建立一个到此连接器服务器的新连接。</p>

@param env 客户端连接参数，与提供给 {@link JMXConnector#connect(Map) JMXConnector.connect(Map)} 的参数具有相同的类型。可以为 null，它等效于一个空映射。

@return 可用于建立到此连接器服务器的新连接的客户端 stub。

@exception UnsupportedOperationException 如果此连接器服务器不支持生成客户端 stub。

@exception IllegalStateException 如果未启动 JMXConnectorServer（请参阅 {@link #isActive()}）。

@exception IOException 如果存在通信问题而导致无法创建 stub。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.remote.rmi.RMIConnectorServer.start() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>激活连接器服务器，即启动对客户端连接的侦听。在连接器服务器已激活时，调用此方法没有任何作用。在连接器服务器已停止时，调用此方法将生成 <code>IOException</code>。</p>

<p>此方法第一次调用时的行为取决于构造时提供的如下所示的参数。</p>

<p>首先，需要一个 {@link RMIServerImpl} 的子类的对象，以便将连接器服务器从 RMI 导出：</p>

 <ul>

<li>如果原先为构造方法提供了一个 <code>RMIServerImpl</code>，则使用该值。

<li>否则，如果为构造方法提供的 <code>JMXServiceURL</code> 的协议部分为 <code>iiop</code>，则创建一个 {@link RMIIIOPServerImpl} 类型的对象。

<li>否则，如果 <code>JMXServiceURL</code> 为 null，或者其协议部分为 <code>rmi</code>，则创建一个类型为 {@link RMIJRMPServerImpl} 的对象。

<li>否则，此实现可能创建一个特定于实现的 {@link RMIServerImpl}，或者抛出 {@link MalformedURLException}。

 </ul>

<p>如果给定的地址包含一个 JNDI 目录 URL（如在 {@link javax.management.remote.rmi} 的包文档中的指定），则该 <code>RMIConnectorServer</code> 通过将 <code>RMIServerImpl</code> 绑定到给定地址进行引导。</p>

<p>如果 <code>JMXServiceURL</code> 的 URL 路径部分为空或一个单独的斜线 (<code>/</code>)，则 RMI 对象将不会绑定到一个目录。相反，RMIConnectorServer 地址（由 {@link #getAddress()} 返回）的 URL 路径中将包含一个对它的引用的编码。{@link javax.management.remote.rmi} 的包文档中有对 <code>rmi</code> 和 <code>iiop</code> 的编码的描述。</p>

<p>当 URL 路径既不为空又不是一个 JNDI 目录 URL，或者当协议既不是 <code>rmi</code> 又不是 <code>iiop</code> 时的行为由实现定义，并且在创建或启动连接器服务器时可能包含抛出 {@link MalformedURLException} 的行为。</p>

@exception IllegalStateException 如果此连接器服务器尚未连接到 MBean 服务器。
@exception IOException 如果连接器服务器无法启动。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.remote.rmi.RMIConnectorServer.stop() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>取消激活连接器服务器，即停止对客户端连接的侦听。调用此方法还将关闭所有由此服务器建立的客户端连接。返回此方法后，无论正常返回还是抛出异常，连接器服务器都不再创建任何新的客户端连接。</p>

<p>连接器服务器一旦停止就无法再启动。</p>

<p>在连接器服务器已停止时，调用此方法没有任何效果。在连接器服务器尚未启动时调用此方法将永久禁用连接器服务器对象。</p>

<p>如果关闭客户端连接导致异常，则该异常不会从此方法抛出。而会从 MBean 发出一个 {@link JMXConnectionNotification}，同时显示无法关闭的连接的连接 ID。</p>

<p>关闭连接器服务器是一个潜在的慢操作。例如，如果具有打开连接的客户端发生崩溃，则关闭操作不得不等待网络协议超时。不希望关闭操作出现阻塞的调用者应在单独的线程中处理关闭。</p>

<p>此方法在连接器服务器的 <code>RMIServerImpl</code> 对象上调用 {@link RMIServerImpl#close() close} 方法。</p>

<p>如果 <code>RMIServerImpl</code> 由 {@link #start() start} 方法绑定到 JNDI 目录，则该方法可解除到目录的绑定。</p>

@exception IOException 如果无法完全关闭服务器，或者如果无法从目录解除 <code>RMIServerImpl</code> 的绑定。抛出此异常时，服务器已经尝试适当地关闭所有的客户端连接、调用 {@link RMIServerImpl#close()} 并解除 <code>RMIServerImpl</code> 到其目录的绑定。除了那些服务器尝试将它们关闭时生成异常的连接，所有的客户端连接都被关闭。

<!-- END DATA -->
