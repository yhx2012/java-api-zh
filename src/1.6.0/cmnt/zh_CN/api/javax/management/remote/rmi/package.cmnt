<!-- BEGIN KEY -->
javax.management.remote.rmi
<!-- END KEY -->
<!-- BEGIN DATA -->

    <p>RMI 连接器是供 JMX Remote API 使用的一种连接器，后者使用 RMI 将客户端请求传输到远程 MBean 服务器。此包定义了 RMI 连接器的用户直接引用客户端和服务器方所需的类。它还定义了其他一些类，用户虽然不经常直接引用这些类，但还是必须定义它们，主要是为 RMI 连接器的不同实现之间实现互操作。</p>

    <p>RMI 连接器支持 RMI 的 JRMP 和 IIOP 传输方式。</p>

    <p>与 JMX Remote API 中的多数连接器类似，RMI 连接器通常有一个地址，它是一个 {@link javax.management.remote.JMXServiceURL JMXServiceURL}。对于使用默认 RMI 传输方式 (JRMP) 的连接器，此地址的协议部分为 <code>rmi</code>；对于使用 RMI/IIOP 的连接器，地址的协议部分为 <code>iiop</code>。</p>

    <p>RMI 连接器地址有两种形式：</p>

    <ul>
      <li>
	在 <em>JNDI 形式</em> 中，URL 指示<em>查找连接器的 RMI 桩模块 (stub) 的位置</em>。此 RMI 桩模块是一个类型为 {@link javax.management.remote.rmi.RMIServer RMIServer} 的 Java 对象，它提供了对连接器服务器的远程访问。使用这种地址形式，可从包含在 URL 中的外部目录条目获取 RMI 桩模块。外部目录是指可由 {@link javax.naming JNDI} 识别的任何目录，通常是 RMI 注册表、LDAP 或 CORBA 命名服务 (COS Naming)。

      <li>
	在<em>编码形式</em> 中，URL 直接包括了连接到连接器服务器所需的信息。使用 RMI/JRMP 时，编码形式是服务器对象的序列化 RMI 桩模块，它采用 BASE64 编码，未嵌入换行。使用 RMI/IIOP 时，编码形式是服务器对象的 CORBA IOR。
    </ul>
    
    <p>以下内容更详细地介绍了地址。</p>


    <h3>创建 RMI 连接器服务器</h3>

    <p>创建 RMI 连接器服务器的一般方法是为方法 {@link javax.management.remote.JMXConnectorServerFactory#newJMXConnectorServer JMXConnectorServerFactory.newJMXConnectorServer} 提供一个 RMI 连接器地址。将与连接器服务器连接的 MBean 服务器可作为该方法的一个参数指定。或者，也可以将连接器服务器注册为该 MBean 服务器中的 MBean。</p>

    <p>还可以通过构造 {@link javax.management.remote.rmi.RMIConnectorServer RMIConnectorServer} 的实例（显式或使用 MBean 服务器的 <code>createMBean</code> 方法）来创建 RMI 连接器服务器。</p>

    <h4>选择 RMI 传输方式</h4>

    <p>在创建连接器服务器时，通过在 <code>serviceURL</code> 的 <code><em>protocol</em></code> 部分指定 <code>rmi</code> 或 <code>iiop</code>，您可以选择 RMI 传输方式（JRMP 或 IIOP）。通过实例化 {@link javax.management.remote.rmi.RMIServerImpl RMIServerImpl} 的一个适当的子类并将其提供给 <code>RMIConnectorServer</code> 构造方法，还可以创建特殊的连接器服务器。</p>


    <h4><a name="servergen">服务器生成的连接器地址</a></h4>

    <p>如果您指定的 <code>serviceURL</code> 包含空 URL 路径（在可选的主机和端口后），或者未指定 <code>serviceURL</code>，则连接器服务器将创建一个可供客户端连接使用的新 <code>JMXServiceURL</code>：</p>

    <ul>

      <li><p>如果 <code>serviceURL</code> 如下所示：</p>

	<pre>
	<code>service:jmx:rmi://<em>host</em>:<em>port</em></code>
	</pre>

	<p>则连接器服务器将生成一个 {@link javax.management.remote.rmi.RMIJRMPServerImpl RMIJRMPServerImpl}，且返回如下所示的 <code>JMXServiceURL</code>：</p>

	<pre>
	<code>service:jmx:rmi://<em>host</em>:<em>port</em>/stub/<em>XXXX</em></code>
	</pre>

	<p>其中，<code><em>XXXX</em></code> 为所生成对象的桩模块的序列化形式，其编码采用 BASE64，不带换行。</p>

      <li><p>如果 <code>serviceURL</code> 如下所示：</p>

	<pre>
	<code>service:jmx:iiop://<em>host</em>:<em>port</em></code>
	</pre>
	
	<p>则连接器服务器将生成一个 {@link javax.management.remote.rmi.RMIIIOPServerImpl RMIIIOPServerImpl} ，且返回如下所示的 <code>JMXServiceURL</code>：</p>

	<pre>
	<code>service:jmx:iiop://<em>host</em>:<em>port</em>/ior/IOR:<em>XXXX</em></code>
	</pre>

	<p>其中，<code>IOR:<em>XXXX</em></code> 为所生成对象的互操作对象引用 (Interoperable Object Reference) 的标准 CORBA 编码。</p>

      <li><p>如果没有 <code>serviceURL</code>，则必须有一个用户提供的 <code>RMIServerImpl</code>。如果在此对象上调用 {@link javax.management.remote.rmi.RMIServerImpl#toStub toStub} 方法返回 {@link javax.rmi.CORBA.Stub} 的实例，则连接器服务器将用上述的 <code>iiop</code> 形式生成 <code>JMXServiceURL</code>。否则，它将用 <code>rmi</code> 形式生成 <code>JMXServiceURL</code>。</p>

    </ul>

    <p>用户提供的 <code>serviceURL</code> 中的 <code><em>host</em></code> 为可选项。如果有这一项，则将其复制到生成的 <code>JMXServiceURL</code> 中，但是其他方面会忽略此项。如果没有这一项，则生成的 <code>JXMServiceURL</code> 将包括本地主机名。</p>

    <p>用户提供的 <code>serviceURL</code> 中的 <code><em>port</em></code> 也是一个可选项。如果有这一项，则同样将其复制到生成的 <code>JMXServiceURL</code> 中；否则，生成的 <code>JMXServiceURL</code> 不带端口。对于使用 <code>rmi</code> 协议的 <code>serviceURL</code>，如果有 <code><em>port</em></code>，则它指示生成的远程对象应在该端口上导出。它没有任何其他作用。</p>

    <p>如果用户提供了 <code>RMIServerImpl</code> 而不是 <code>JMXServiceURL</code>，则生成的 <code>JMXServiceURL</code> 将在其 <code><em>host</em></code> 部分包含本地主机名并且不带 <code><em>port</em></code>。</p>


    <h4><a name="directory">基于目录条目的连接器地址</a></h4>

    <p>作为刚才介绍的生成地址的另外一种情况，创建连接器服务器时提供的 <code>serviceURL</code> 地址指定的是<em>目录地址</em>，其中可存储提供的或生成的 <code>RMIServer</code> 桩模块。然后客户端和服务器都可以使用此目录地址。</p>

    <p>这种情况下，<code>serviceURL</code> 具有如下两种形式之一：</p>

    <pre>
    <code>service:jmx:rmi://<em>host</em>:<em>port</em>/jndi/<em>jndi-name</em></code>
    <code>service:jmx:iiop://<em>host</em>:<em>port</em>/jndi/<em>jndi-name</em></code>
    </pre>

    <p>其中 <code><em>jndi-name</em></code> 是一个可提供给 {@link javax.naming.InitialContext#bind javax.naming.InitialContext.bind} 的字符串。</p>

    <p>同样，<code><em>host</em></code> 和 <code>:<em>port</em></code> 均可忽略。</p>

    <p>连接器服务器将基于协议（<code>rmi</code> 或 <code>iiop</code>），对于 <code>rmi</code>，还包括 <code><em>port</em></code>（如果有）生成 <code>RMIServerImpl</code>。连接器服务器启动后，它将从此对象使用其 {@link javax.management.remote.rmi.RMIServerImpl#toStub toStub} 方法派生一个桩模块并使用给定的 <code><em>jndi-name</em></code> 保存该对象。同样也要参考由 JNDI API 定义的属性。</p>

    <p>例如，假设 <code>JMXServiceURL</code> 为：

      <pre>
      <code>service:jmx:rmi://ignoredhost/jndi/rmi://myhost/myname</code>
      </pre>

      则连接器服务器将生成 <code>RMIJRMPServerImpl</code> 并使用该 JNDI 名称保存其桩模块

      <pre>
      <code>rmi://myhost/myname</code>
      </pre>

      它表示运行在主机 <code>myhost</code> 的默认端口上 RMI 注册表中的 <code>myname</code> 项。注意，RMI 注册表只允许从本地主机注册。因此在这种情况下，<code>myhost</code> 必须是运行连接器服务器的主机名。</p>

    <p>在此 <code>JMXServiceURL</code> 中，第一个 <code>rmi:</code> 指定 RMI 连接器，第二个 <code>rmi:</code> 指定 RMI 注册表。</p>

    <p>另举一个例子，如果 <code>JMXServiceURL</code> 为：

      <pre>
      <code>service:jmx:iiop://ignoredhost/jndi/ldap://dirhost:9999/cn=this,ou=that</code>
      </pre>

      则该连接器服务器将生成 <code>RMIIIOPServerImpl</code> 并使用该 JNDI 名称保存其桩模块

      <pre>
      <code>ldap://dirhost:9999/cn=this,ou=that</code>
      </pre>

      它表示 LDAP 目录中的 <code>cn=this,ou=that</code> 条目，该目录在运行主机 <code>dirhost</code> 的端口 9999 上。</p>

<p>如果 <code>JMXServiceURL</code> 为：

      <pre>
      <code>service:jmx:iiop://ignoredhost/jndi/cn=this,ou=that</code>
      </pre>

      则该连接器服务器将生成 <code>RMIIIOPServerImpl</code> 并使用该 JNDI 名称保存其桩模块

      <pre>
      <code>cn=this,ou=that</code>
      </pre>

      要在这种情况下正常工作，JNDI API 必须经过适当配置，以提供有关要使用的目录的信息。</p>

    <p>这些示例中，主机名 <code>ignoredhost</code> 未被连接器服务器或其客户端使用。可将其忽略，例如：</p>

      <pre>
      <code>service:jmx:iiop:///jndi/cn=this,ou=that</code>
      </pre>

    <p>但是，在连接器服务器运行的主机上使用主机名是一个不错的做法。主机名通常不同于目录主机的名称。</p>


    <h4>连接器服务器的属性</h4>

    <p>使用默认的 JRMP 传输方式时，可使用为 <code>RMIConnectorServer</code> 构造方法给定的 <code>environment</code> 中的 <code>jmx.remote.rmi.client.socket.factory</code> 和 <code>jmx.remote.rmi.server.socket.factory</code> 属性指定 RMI 套接字工厂。这些属性的值的类型必须分别为 {@link java.rmi.server.RMIClientSocketFactory} 和 {@link java.rmi.server.RMIServerSocketFactory}。这些工厂在创建与连接器关联的 RMI 对象时使用。</p>

    <h3>创建 RMI 连接器客户端</h3>

    <p>RMI 连接器客户端通常使用 {@link javax.management.remote.JMXConnectorFactory} 且具有协议 <code>rmi</code> 或 <code>iiop</code> 的 <code>JMXServiceURL</code> 进行构造。</p>

    <p>如果 <code>JMXServiceURL</code> 由服务器生成，如上文中的<a href="#servergen">&ldquo;服务器生成的连接器地址&rdquo;</a>所述，则客户端将需要直接或间接地从服务器获取该值。通常，服务器将 <code>JMXServiceURL</code> 存储在一个文件或查找服务中以便于使用。</p>

    <p>如果 <code>JMXServiceURL</code> 使用目录语法，如上文中的<a href="#directory">&ldquo;基于目录条目的连接器地址&rdquo;</a>所述，则客户端可用刚刚介绍的方法获取该值，或者客户端和服务器可能都知道要使用的适当目录条目。例如，如果 Whatsit 代理的连接器服务器使用主机 <code>myhost</code> 上 RMI 注册表中的 <code>whatsit-agent-connector</code> 条目，则客户端和服务器都知道适当的 <code>JMXServiceURL</code> 为：</p>

    <pre>
    <code>service:jmx:rmi:///jndi/rmi://myhost/whatsit-agent-connector</code>
    </pre>

    <p>如果 RMI 桩模块的类型为 {@link javax.management.remote.rmi.RMIServer RMIServer}，则可以使用 {@link javax.management.remote.rmi.RMIConnector RMIConnector} 的适当构造方法直接构造 RMI 连接。</p>

    <h3>为 RMI/IIOP 连接器指定一个 ORB</h3>

    <p>使用 IIOP 传输方式时，客户端和服务器可使用属性 <code>java.naming.corba.orb</code> 指定要使用的 ORB。连接器服务器连接到 ORB 的动作发生时间为 {@link javax.management.remote.rmi.RMIConnectorServer#start() start}，连接器客户端连接到 ORB 的动作发生时间为 {@link javax.management.remote.rmi.RMIConnector#connect(java.util.Map) connect}。如果 <code>java.naming.corba.orb</code> 属性包含在环境 Map 中，则其值（一个 {@link org.omg.CORBA.ORB ORB}）将用于连接 IIOP Stub。否则，将通过调用 {@link org.omg.CORBA.ORB org.omg.CORBA.ORB.init((String[])null,(Properties)null)} 创建一个新的 org.omg.CORBA.ORB。位于同一 JVM 中的后续 RMI 连接器客户端或服务器可重用此 ORB，或者可用同样的方式创建另一个 ORB。</p>

     <p>如果指定了 <code>java.naming.corba.orb</code> 属性但它并不指向一个 {@link org.omg.CORBA.ORB ORB}，则将抛出 <code>{@link java.lang.IllegalArgumentException}</code>。</p>

     <p>当 IIOP 远程对象（Stub 或 Server）在被传入到 RMIConnector 和 RMIConnectorServer 之前通过手动创建和连接到 ORB 时，这里描述的机制将不适用。</p>

    <h3>动态代码下载</h3>

    <p>如果 RMI 连接器客户端或服务器从其同级设备收到一个无法识别的类实例，并且动态代码下载此时可以进行 RMI 连接，则可以从同级设备指定的代码基下载类。文章 <a     href="{@docRoot}/../technotes/guides/rmi/codebase.html"><em>Dynamic code downloading using Java RMI</em></a> 对此进行了详细解释。</p>

@see <a href="{@docRoot}/../technotes/guides/rmi/index.html">
	Java<sup><font size="-1">TM</font></sup> Remote Method
	Invocation (RMI)</a>

@see <a href="{@docRoot}/../technotes/guides/jndi/index.html">
	Java Naming and Directory Interface<sup><font
	size="-1">TM</font></sup> (JNDI)</a>
   
@see <a href="http://www.ietf.org/rfc/rfc2045.txt">RFC 2045, section 6.8, &quot;Base64 Content-Transfer-Encoding&quot;</a>

@since 1.5

  
<!-- END DATA -->
