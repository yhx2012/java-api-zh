<!-- BEGIN KEY -->
public interface javax.management.remote.JMXConnector extends java.io.Closeable
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>JMX API 连接器的客户端。使用此类型的对象可建立到连接器服务器的连接。</p>

<p>新创建的此类型对象尚未连接。在此对象能够使用之前，必须调用其 {@link #connect connect} 方法。但是，由 {@link JMXConnectorFactory#connect(JMXServiceURL, Map) JMXConnectorFactory.connect} 创建的对象已经连接。</p>

@since 1.5
@since.unbundled 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.management.remote.JMXConnector.CREDENTIALS
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>属性的名称，它指定了连接过程中发送给连接器服务器的凭据。与此属性关联的值（如果有）为服务器的 {@link JMXAuthenticator} 的具有适当类型的可序列化的对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.remote.JMXConnector.connect() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>建立到连接器服务器的连接。此方法等效于 {@link #connect(Map) connect(null)}。</p>

@exception IOException 如果由于存在通信问题而导致无法建立连接。

@exception SecurityException 如果由于安全原因而无法建立连接。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.remote.JMXConnector.connect(java.util.Map<java.lang.String, ?> env) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>建立到连接器服务器的连接。</p>

<p>如果已在该对象上成功调用了 <code>connect</code>，则再次调用将没有任何作用。但是，如果 {@link #close} 是在调用 <code>connect</code> 之后调用的，则新的 <code>connect</code> 将抛出 <code>IOException</code>。<p>

<p>否则，在此对象上未调用过任何一个 <code>connect</code>，或者虽然调用过但生成了一个异常。然后对 <code>connect</code> 的调用将试图建立到连接器服务器的连接。</p>

@param env 连接的属性。此映射中的属性重写创建 <code>JMXConnector</code> 时指定的映射中的属性（如果有）。此参数可以为 null，其等效于一个空映射。

@exception IOException 如果由于存在通信问题而导致无法建立连接。

@exception SecurityException 如果由于安全原因而无法建立连接。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.MBeanServerConnection javax.management.remote.JMXConnector.getMBeanServerConnection() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回一个代表远程 MBean 服务器的 <code>MBeanServerConnection</code> 对象。对于给定的 <code>JMXConnector</code>，对此方法两次成功的调用通常将返回相同的 <code>MBeanServerConnection</code> 对象，尽管不需要这样做。</p>

<p>对于返回的 <code>MBeanServerConnection</code> 中的每个方法，调用该方法将导致调用远程 MBean 服务器中的相应方法。MBean 服务器方法返回的值就是返回给客户端的值。如果 MBean 服务器方法生成了 <code>Exception</code>，则客户端上也会出现相同的 <code>Exception</code>。如果 MBean 服务器方法（或尝试对它的调用）生成了 <code>Error</code>，则该 <code>Error</code> 将包装在 {@link JMXServerErrorException} 中，从客户端能够看到该错误。</p>

<p>调用该方法等效于调用 {@link #getMBeanServerConnection(Subject) getMBeanServerConnection(null)}，这意味着未指定任何委托主题并且在 <code>MBeanServerConnection</code> 上调用的所有操作必须使用经验证的主题（如果有）。</p>

@return 一个通过将其方法转发到远程 MBean 服务器而实现 <code>MBeanServerConnection</code> 接口的对象。

@exception IOException 如果无法创建有效的 <code>MBeanServerConnection</code>，例如，由于尚未建立到远程 MBean 服务器的连接（用 {@link #connect(Map) connect} 方法），或者连接已关闭，或者连接已断开。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.MBeanServerConnection javax.management.remote.JMXConnector.getMBeanServerConnection(Subject delegationSubject) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回 <code>MBeanServerConnection</code> 对象，它表示在其上执行代表提供的委托主题操作的远程 MBean 服务器。对于给定的 <code>JMXConnector</code> 和 <code>Subject</code>，对此方法两次成功的调用通常将返回相同的 <code>MBeanServerConnection</code> 对象，尽管不需要这样做。</p>

<p>对于返回的 <code>MBeanServerConnection</code> 中的每个方法，调用此方法导致调用代表给定委托主题，而不是经验证主题的远程 MBean 服务器上的对应方法。MBean 服务器方法返回的值就是返回给客户端的值。如果 MBean 服务器方法生成了 <code>Exception</code>，则客户端上也会出现相同的 <code>Exception</code>。如果 MBean 服务器方法（或尝试对它的调用）生成了 <code>Error</code>，则该 <code>Error</code> 将包装在 {@link JMXServerErrorException} 中，从客户端能够看到该错误。</p>

@param delegationSubject 代表将执行何种请求的 <code>Subject</code>。可以为 null，这种情况下执行请求表示经验证的 Subject（如果有）。

@return 一个通过将其方法转发到代表给定委托主题的远程 MBean 服务器而实现 <code>MBeanServerConnection</code> 接口的对象。

@exception IOException 如果无法创建有效的 <code>MBeanServerConnection</code>，例如，由于尚未建立到远程 MBean 服务器的连接（用 {@link #connect(Map) connect} 方法），或者连接已关闭，或者连接已断开。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.remote.JMXConnector.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>关闭客户端到其服务器的连接。任何正在进行中的或新的使用由 {@link #getMBeanServerConnection()} 返回的 MBeanServerConnection 的请求将获得一个 <code>IOException</code>。</p>

<p>如果已在该对象上成功调用了 <code>close</code>，则再次调用将没有任何作用。如果从未调用过 <code>close</code>，或者调用过但生成了异常，则将尝试关闭该连接。此尝试可能成功，此时 <code>close</code> 将正常返回，也可能生成一个异常。</p>

<p>关闭连接是一个潜在的慢操作。例如，假设服务器已崩溃，则关闭操作可能不得不等待网络协议超时。不希望关闭操作出现阻塞的调用者应在单独的线程中处理关闭。</p>

@exception IOException 如果无法完全关闭连接。如果抛出此异常，连接的服务器端是否已完全关闭为未知。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.remote.JMXConnector.addConnectionNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>添加一个接收连接状态改变的侦听器。该侦听器将接收 {@link JMXConnectionNotification} 类型的通知。实现也可发送任何其他类型的通知。</p>

<p>使用此方法可添加任意个数的侦听器。相同的侦听器可使用相同或不同的 filter 和 handback 值多次添加。不对重复的条目进行任何特殊处理。例如，假设侦听器两次注册均为不带 filter，则将为每个通知调用两次其 <code>handleNotification</code> 方法。</p>

@param listener 用于接收连接状态通知的侦听器。
@param filter 用于选择要发送给侦听器的通知的过滤器，如果将发送所有的通知，则为 null。
@param handback 将随每个通知提供给侦听器的对象。可以为 null。

@exception NullPointerException 如果 <code>listener</code> 为 null。

@see #removeConnectionNotificationListener
@see javax.management.NotificationBroadcaster#addNotificationListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.remote.JMXConnector.removeConnectionNotificationListener(NotificationListener listener) throws javax.management.ListenerNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>将一个用于接收状态更改通知的侦听器从列表中移除。此侦听器必须在以前已经添加。如果有多个匹配的侦听器，则移除所有匹配的侦听器。</p>

@param listener 用于接收连接状态通知的侦听器。

@exception NullPointerException 如果 <code>listener</code> 为 null。

@exception ListenerNotFoundException 如果侦听器未用此 <code>JMXConnector</code> 注册。

@see #removeConnectionNotificationListener(NotificationListener, NotificationFilter, Object)
@see #addConnectionNotificationListener
@see javax.management.NotificationEmitter#removeNotificationListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.remote.JMXConnector.removeConnectionNotificationListener(NotificationListener l, NotificationFilter f, Object handback) throws javax.management.ListenerNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>将一个用于接收状态更改通知的侦听器从列表中移除。该侦听器必须在以前已经用相同的三个参数添加。如果有多个匹配的侦听器，则只移除一个匹配的侦听器。</p>

@param l 用于接收连接状态通知的侦听器。
@param f 用于选择发送给侦听器通知的过滤器。可以为 null。
@param handback 将随每个通知提供给侦听器的对象。可以为 null。

@exception ListenerNotFoundException 如果侦听器未用此 <code>JMXConnector</code> 注册，或者未用给定的 filter 和 handback 注册。

@see #removeConnectionNotificationListener(NotificationListener)
@see #addConnectionNotificationListener
@see javax.management.NotificationEmitter#removeNotificationListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.remote.JMXConnector.getConnectionId() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>获得来自连接器服务器的连接 ID。对于给定的连接器服务器，每个连接将具有一个在连接的整个生命周期中都不改变的唯一 ID。</p>

@return 此连接的唯一 ID。这与连接器服务器包含在其 {@link JMXConnectionNotification} 中的 ID 相同。{@link javax.management.remote package description} 描述了连接 ID 的约定。

@exception IOException 如果无法获得连接 ID，例如在连接关闭或断开的情况下。

<!-- END DATA -->
