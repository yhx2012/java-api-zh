<!-- BEGIN KEY -->
public interface javax.management.loading.ClassLoaderRepository
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>此接口的实例用于保持在 MBean Server 中注册的 ClassLoader 的列表。它们提供了使用注册的 ClassLoader 来加载类所必需的方法。</p>

<p><code>ClassLoaderRepository</code> 中的首个 ClassLoader 始终是 MBean Server 本身的 ClassLoader。</p>

<p>当在 MBean Server 中注册 MBean 时，如果它是 {@link java.lang.ClassLoader} 的一个子类，并且它不实现 {@link PrivateClassLoader} 接口，那么将它添加到 MBean Server 的 <code>ClassLoaderRepository</code> 的末尾。如果以后从 MBean Server 注销它，则它将从 <code>ClassLoaderRepository</code> 中移除。</p>

<p><code>ClassLoaderRepository</code> 中的 MBean 顺序是很重要的。对于 <code>ClassLoaderRepository</code> 中的任意两个 MBean <em>X</em> 和 <em>Y</em>，如果在 <em>Y</em> 的注册开始之前已完成 <em>X</em> 的注册，则 <em>X</em> 必须出现在 <em>Y</em> 的前面。如果 <em>X</em> 和 <em>Y</em> 是同时注册的，则它们的顺序是不确定的。注册 MBean 对应于调用 {@link MBeanServer#registerMBean} 或某个 {@link MBeanServer}<code>.createMBean</code> 方法。</p>

@see javax.management.MBeanServerFactory

@since 1.5
@since.unbundled JMX 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class<?> javax.management.loading.ClassLoaderRepository.loadClass(String className) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>通过类加载器列表加载给定的类名称。依次请求 ClassLoaderRepository 的每个 ClassLoader 通过其 {@link ClassLoader#loadClass(String)} 方法来加载类。如果它成功返回一个 {@link Class} 对象，则该对象就是此方法的结果。如果抛出 {@link ClassNotFoundException}，则继续搜索下一个 ClassLoader。如果抛出另一个异常，则从此方法传播该异常。如果到达列表的末尾，则抛出 {@link ClassNotFoundException}。</p>

@param className 要被加载的类名称。

@return 加载的类。

@exception ClassNotFoundException 如果找不到指定的类。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class<?> javax.management.loading.ClassLoaderRepository.loadClassWithout(ClassLoader exclude, String className) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>通过类加载器列表加载给定的类名称，不包括某个给定的类加载器。依次请求 ClassLoaderRepository 的每个 ClassLoader（除 <code>exclude</code> 之外）通过其 {@link ClassLoader#loadClass(String)} 方法来加载类。如果它成功返回一个 {@link Class} 对象，则该对象就是此方法的结果。如果抛出 {@link ClassNotFoundException}，则继续搜索下一个 ClassLoader。如果抛出另一个异常，则从此方法传播该异常。如果到达列表的末尾，则抛出 {@link ClassNotFoundException}。</p>

<p>注意，如果 ClassLoaderRepository 中的某个 ClassLoader 从其 {@link ClassLoader#loadClass(String) loadClass} 方法调用此方法，那么如果 ClassLoaderRepository 中的另一个 ClassLoader 同时也在执行相同操作，则该 ClassLoader 将发生死锁。推荐使用 {@link #loadClassBefore} 方法以避免死锁风险。</p>

@param className 要被加载的类名称。
@param exclude 不包括的类加载器。可能为 null，在这种情况下此方法等效于 {@link #loadClass loadClass(className)}。

@return 加载的类。

@exception ClassNotFoundException 如果找不到指定的类。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class<?> javax.management.loading.ClassLoaderRepository.loadClassBefore(ClassLoader stop, String className) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>通过类加载器列表加载给定的类名称，在某个给定的类加载器处停止。依次请求 ClassLoaderRepository 的每个 ClassLoader 通过其 {@link ClassLoader#loadClass(String)} 方法来加载类。如果它成功返回一个 {@link Class} 对象，则该对象就是此方法的结果。如果抛出 {@link ClassNotFoundException}，则继续搜索下一个 ClassLoader。如果抛出另一个异常，则从此方法传播该异常。如果搜索到达 <code>stop</code> 或列表的末尾，则抛出 {@link ClassNotFoundException}。</p>

<p>通常从 <code>stop</code> 处的 {@link ClassLoader#loadClass(String) loadClass} 方法调用此方法，以参考 <code>ClassLoaderRepository</code> 中出现在它之前的的加载器。一旦遇到 <code>stop</code>，搜索立即停止，这样就避免了可能出现的并发类加载死锁。</p>

@param className 要被加载的类名称。
@param stop 停止处的类加载器。可能为 null，在这种情况下此方法等效于 {@link #loadClass(String) loadClass(className)}。

@return 加载的类。

@exception ClassNotFoundException 如果找不到指定的类。

@since.unbundled JMX 1.2

<!-- END DATA -->
