<!-- BEGIN KEY -->
public interface javax.management.loading.MLetMBean
<!-- END KEY -->
<!-- BEGIN DATA -->
公开 MLet MBean 的远程管理接口。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.lang.Object> javax.management.loading.MLetMBean.getMBeansFromURL(String url) throws javax.management.ServiceNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
加载包含 MLET 标记的文本文件，这些标记定义了要添加到 MBean 服务器的 MBean。文本文件的位置由 URL 指定。使用 UTF-8 编码来读取文本文件。MLET 文件中指定的 MBean 将被实例化并在 MBean 服务器中注册。

@param url 以 String 对象形式加载的文本文件的 URL。

@return  一个集合，在所加载的 m-let 文本文件中，每个 MLET 标记都对应该集合中的一项。每一项要么指定了所创建的 MBean 的 ObjectInstance，要么在无法创建 MBean 时指定一个 throwable 对象（即一个错误或异常）。

@exception ServiceNotFoundException 如果发生以下错误之一：m-let 文本文件不包含 MLET 标记；未找到 m-let 文本文件；未指定 MLET 标记的必需的属性；url 的值错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.lang.Object> javax.management.loading.MLetMBean.getMBeansFromURL(URL url) throws javax.management.ServiceNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
加载包含 MLET 标记的文本文件，这些标记定义了要添加到 MBean 服务器的 MBean。文本文件的位置由 URL 指定。使用 UTF-8 编码来读取文本文件。MLET 文件中指定的 MBean 将被实例化并在 MBean 服务器中注册。

@param url 以 URL 对象形式加载的文本文件的 URL。

@return  一个集合，在所加载的 m-let 文本文件中，每个 MLET 标记都对应该集合中的一项。每一项要么指定了所创建的 MBean 的 ObjectInstance，要么在无法创建 MBean 时指定一个 throwable 对象（即一个错误或异常）。

@exception ServiceNotFoundException 如果发生以下错误之一：m-let 文本文件不包含 MLET 标记；未找到 m-let 文本文件；未指定 MLET 标记的必需的属性；url 的值为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.loading.MLetMBean.addURL(URL url)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的 URL 追加到 URL 列表中，以便搜索类和资源。

@param url 要添加的 URL。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.loading.MLetMBean.addURL(String url) throws javax.management.ServiceNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的 URL 追加到 URL 列表中，以便搜索类和资源。

@param url 要添加的 URL。

@exception ServiceNotFoundException 如果指定的 URL 不正确。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL[] javax.management.loading.MLetMBean.getURLs()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于加载类和资源的 URL 搜索路径。这包括为构造方法指定的原始 URL 列表，以及 addURL() 方法后来添加的 URL。

@return URL 列表。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL javax.management.loading.MLetMBean.getResource(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
查找具有给定名称的资源。资源是能够用与代码基无关的方式通过类代码访问的一些数据（图像、声音、文本等）。资源名称是以 '/' 分隔的标识资源的路径名称。

@param  name 资源名称

@return  读取资源的 URL，如果找不到该资源或者调用程序没有获取该资源的足够权限，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream javax.management.loading.MLetMBean.getResourceAsStream(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回读取指定资源的输入流。getResource(String) 的文档中描述了搜索顺序。

@param  name 资源名称
 
@return  用于读取资源的输入流，如果找不到该资源，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<java.net.URL> javax.management.loading.MLetMBean.getResources(String name) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
查找所有具有给定名称的资源。资源是能够用与代码基无关的方式通过类代码访问的一些数据（图像、声音、文本等）。资源名称是以 '/' 分隔的标识资源的路径名称。

@param  name 资源名称。

@return 指向资源的 URL 的枚举。如果找不到资源，则枚举为空。无法访问的资源将不在枚举中。

@exception IOException 如果搜索资源时发生 I/O 异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.loading.MLetMBean.getLibraryDirectory()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取在将本机库加载到内存中之前库加载器用来存储这些本机库的当前目录。

@return 库加载器使用的当前目录。

@see #setLibraryDirectory

@throws UnsupportedOperationException 如果此实现不支持以这种方式存储本机库。
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.loading.MLetMBean.setLibraryDirectory(String libdir)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置在将本机库加载到内存中之前库加载器用来存储这些本机库的目录。

@param libdir 库加载器使用的目录。

@see #getLibraryDirectory

@throws UnsupportedOperationException 如果此实现不支持以这种方式存储本机库。

<!-- END DATA -->
