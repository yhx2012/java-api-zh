<!-- BEGIN KEY -->
public class javax.management.loading.PrivateMLet extends javax.management.loading.MLet implements javax.management.loading.PrivateClassLoader
<!-- END KEY -->
<!-- BEGIN DATA -->
不添加到 {@link ClassLoaderRepository} 的 MLet。此类的行为除一点之外，其余行为与其父类 {@link MLet} 完全相同。当在 MBean 服务器中注册 PrivateMLet 时，不将它添加到该 MBean 服务器的 {@link ClassLoaderRepository} 中。这是因为此类实现了 {@link PrivateClassLoader} 接口。

@since 1.5
@since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.loading.PrivateMLet(java.net.URL[] urls, boolean delegateToCLR)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认的委托父 ClassLoader 为指定的 URL 构造新 PrivateMLet。首先在父类加载器中搜索 URL，然后按照为类和资源指定的顺序搜索 URL。

@param urls 从其位置加载类和资源的 URL。
@param  delegateToCLR  当某个类在父 ClassLoader 或 URL 中均未找到时，如果 MLet 应该委托给其包含的 MBeanServer 的 {@link ClassLoaderRepository}，则为 true。


<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.loading.PrivateMLet(java.net.URL[] urls, ClassLoader parent, boolean delegateToCLR)
<!-- END KEY -->
<!-- BEGIN DATA -->
为给定的 URL 构造新 PrivateMLet。首先在指定的父类加载器中搜索 URL，然后按照为类和资源指定的顺序搜索 URL。该父参数将用作委托的父类加载器。

@param urls 从其位置加载类和资源的 URL。
@param  parent 委托的父类加载器。
@param  delegateToCLR 当某个类在父 ClassLoader 或 URL 中均未找到时，如果 MLet 应该委托给其包含的 MBeanServer 的 {@link ClassLoaderRepository}，则为 true。


<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.loading.PrivateMLet(java.net.URL[] urls, ClassLoader parent, URLStreamHandlerFactory factory, boolean delegateToCLR)
<!-- END KEY -->
<!-- BEGIN DATA -->
为指定的 URL、父类加载器和 URLStreamHandlerFactory 构造新 PrivateMLet。该父参数将用作委托的父类加载器。该工厂参数将用作创建新 URL 时获取协议处理程序的流处理程序工厂。

@param urls 从其位置加载类和资源的 URL。
@param  parent 委托的父类加载器。
@param  factory  创建 URL 时要使用的 URLStreamHandlerFactory。
@param  delegateToCLR  当某个类在父 ClassLoader 或 URL 中均未找到时，如果 MLet 应该委托给其包含的 MBeanServer 的 {@link ClassLoaderRepository}，则为 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.loading.MLet.readExternal(ObjectInput in) throws java.io.IOException, java.lang.ClassNotFoundException, java.lang.UnsupportedOperationException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>从给定的 {@link ObjectInput} 恢复此 MLet 的内容。不是所有的实现都支持此方法。不支持此方法的实现将抛出 {@link UnsupportedOperationException}。子类可以重写此方法以支持它或更改读取数据的格式。</p>

<p>读取数据的格式是未指定的，但如果某个实现支持 {@link #readExternal}，则它必须也支持 {@link #writeExternal}，以便前者可以读取后者所写入的内容。</p>

@param in 要从中读取的对象输入流。

@exception IOException 如果在读取时出现问题。
@exception ClassNotFoundException 如果找不到要恢复的对象的类。
@exception UnsupportedOperationException 如果此实现不支持此操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.loading.MLet.writeExternal(ObjectOutput out) throws java.io.IOException, java.lang.UnsupportedOperationException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>将此 MLet 的内容保存到给定的 {@link ObjectOutput}。不是所有的实现都支持此方法。不支持此方法的实现将抛出 {@link UnsupportedOperationException}。子类可以重写此方法以支持它或更改写入数据的格式。</p>

<p>写入数据的格式是未指定的，但如果某个实现支持 {@link #writeExternal}，则它必须也支持 {@link #readExternal}，以便后者可以读取前者所写入的内容。</p>

@param out 要写入的对象输出流。

@exception IOException 如果在写入时发生问题。
@exception UnsupportedOperationException 如果此实现不支持此操作。

<!-- END DATA -->
