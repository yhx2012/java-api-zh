<!-- BEGIN KEY -->
javax.management.loading
<!-- END KEY -->
<!-- BEGIN DATA -->

<p>提供实现高级动态加载的类。请参阅 <a href="#spec">JMX 规范</a>中的<em>高级动态加载</em> 一章。</p>

<p>作为 {@link java.lang.ClassLoader} 子类的 MBean 可用作类加载器，它通过 {@link javax.management.MBeanServer#createMBean(String, ObjectName, ObjectName, Object[], String[])} 方法创建其他 MBean，并且通过 {@link javax.management.MBeanServer#instantiate(String, ObjectName, Object[], String[])} 方法实例化任意对象。{@link javax.management.loading.MLet MLet} 类是这种 MBean 的一个示例。因为它是一个 {@link java.net.URLClassLoader URLClassLoader}，所以可以配置将从哪个 URL 列表加载类。</p>

<p>此外，<code>MLet</code> 可以读取一个配置文件，该文件指定了将在 <code>MLet</code> 所在的相同 MBean Server 中注册的 MBean 集合。</p>

<p>每个 MBean Server 都有一个包含注册到该 MBean Server 中的所有 MBean 的<em>类加载器存储库</em>，该 MBean Server 是 {@link java.lang.ClassLoader} 的子类。类加载器存储库是以 {@link javax.management.MBeanServer MBeanServer} 接口中的 <code>createMBean</code> 和 <code>instantiate</code> 方法的形式被使用，该接口没有显式的加载器参数。当在自己的 URL 集中找不到类时，还可以通过 <code>MLet</code> 类使用类加载器存储库。</p>

<p>如果某个 MBean 实现了 {@link javax.management.loading.PrivateClassLoader PrivateClassLoader} 接口，那么不用将它添加到类加载器存储库中。{@link javax.management.loading.PrivateMLet PrivateMLet} 类是实现了 <code>PrivateClassLoader</code> 的 <code>MLet</code> 的一个子类。</p>

 <p id="spec">
@see <a href="{@docRoot}/../technotes/guides/jmx/">
      Java SE 6 Platform documentation on JMX technology</a>，
    特别是 
    <a href="{@docRoot}/../technotes/guides/jmx/JMX_1_4_specification.pdf">
      JMX Specification, version 1.4(pdf)。</a>

@since 1.5

<!-- END DATA -->
