<!-- BEGIN KEY -->
public class javax.management.loading.MLet extends java.net.URLClassLoader implements javax.management.loading.MLetMBean, javax.management.MBeanRegistration, java.io.Externalizable
<!-- END KEY -->
<!-- BEGIN DATA -->
允许实例化和注册来自远程 URL 的 MBean 服务器中一个或几个 MBean。M-let 是管理 applet 的捷径。m-let 服务通过加载一个 m-let 文本文件来实现此功能，该文本文件指定了要获取的 MBean 上的信息。每个 MBean 上的信息都是在某个标记的单个实例中指定的，该标记称为 MLET 标记。m-let 文本文件的位置由 URL 指定。 
 <p>
<CODE>MLET</CODE> 标记具有以下语法：
 <p>
 &lt;<CODE>MLET</CODE><BR> <CODE>CODE = </CODE><VAR>class</VAR><CODE> | OBJECT = </CODE><VAR>serfile</VAR><BR> <CODE>ARCHIVE = &quot;</CODE><VAR>archiveList</VAR><CODE>&quot;</CODE><BR> <CODE>[CODEBASE = </CODE><VAR>codebaseURL</VAR><CODE>]</CODE><BR> <CODE>[NAME = </CODE><VAR>mbeanname</VAR><CODE>]</CODE><BR> <CODE>[VERSION = </CODE><VAR>version</VAR><CODE>]</CODE><BR> &gt;<BR> <CODE>[</CODE><VAR>arglist</VAR><CODE>]</CODE><BR> &lt;<CODE>/MLET</CODE>&gt;
 <p>
其中：
 <DL>
 <DT><CODE>CODE = </CODE><VAR>class</VAR></DT>
 <DD>
此属性指定了要获取的 MBean 的 Java 类的全名，包括包名称。编译后的 MBean 的 <CODE>.class</CODE> 文件必须包含在 <CODE>ARCHIVE</CODE> 属性指定的 <CODE>.jar</CODE> 文件中。<CODE>CODE</CODE> 或 <CODE>OBJECT</CODE> 必须存在。
 </DD>
 <DT><CODE>OBJECT = </CODE><VAR>serfile</VAR></DT>
 <DD>
此属性指定了 <CODE>.ser</CODE> 文件，该文件包含要获取的 MBean 的序列化表示形式。此文件必须包含在 <CODE>ARCHIVE</CODE> 属性指定的 <CODE>.jar</CODE> 文件中。如果 <CODE>.jar</CODE> 文件包含目录层次结构，则需要指定此层次结构中的文件路径。否则将找不到匹配项。<CODE>CODE</CODE> 或 <CODE>OBJECT</CODE> 必须存在。
 </DD>
 <DT><CODE>ARCHIVE = &quot;</CODE><VAR>archiveList</VAR><CODE>&quot;</CODE></DT>
 <DD>
此属性是必需的，它指定了一个或多个 <CODE>.jar</CODE> 文件，这些文件包含要获取的 MBean 使用的 MBean 或其他资源。<CODE>.jar</CODE> 文件之一必须包含 <CODE>CODE</CODE> 或 <CODE>OBJECT</CODE> 属性所指定的文件。如果 archivelist 包含多个文件：
 <UL>
<LI>必须用逗号 (,) 将每个文件与它后面的文件隔开。
<LI><VAR>archivelist</VAR> 必须用双引号引起来。
 </UL>
<VAR>archivelist</VAR> 中的所有 <CODE>.jar</CODE> 文件必须存储在代码基 URL 指定的目录中。
 </DD>
 <DT><CODE>CODEBASE = </CODE><VAR>codebaseURL</VAR></DT>
 <DD>
此可选属性指定了要获取的 MBean 的代码基 URL。它标识了包含 <CODE>ARCHIVE</CODE> 指定的 <CODE>.jar</CODE> 文件的目录。仅当 <CODE>.jar</CODE> 文件与 m-let 文本文件不在同一目录中时，指定此属性。如果不指定此属性，则使用 m-let 文本文件的基本 URL。
 </DD>
 <DT><CODE>NAME = </CODE><VAR>mbeanname</VAR></DT>
 <DD>
当 m-let 已注册 MBean 实例时，此可选属性指定了要分配给 MBean 实例的对象名称。如果 <VAR>mbeanname</VAR> 以冒号字符 (:) 开始，则对象名称的域部分是 MBean 服务器的默认域，可由 {@link javax.management.MBeanServer#getDefaultDomain()} 返回。
 </DD>
 <DT><CODE>VERSION = </CODE><VAR>version</VAR></DT>
 <DD>
此可选属性指定了要获取的 MBean 版本号和关联的 <CODE>.jar</CODE> 文件。此版本号可用于指定从服务器加载 <CODE>.jar</CODE> 文件，以便在下次调用 m-let 文本文件时更新存储在本地缓存中的文件。<VAR>version</VAR> 必须是一系列非负的十进制整数，每个整数都通过句点与它前面的整数隔开。
 </DD>
 <DT><VAR>arglist</VAR></DT>
 <DD>
此可选属性指定了将被实例化的 MBean 的一个或多个参数的列表。此列表描述了要传递给 MBean 的构造方法的参数。使用以下语法指定 <VAR>arglist</VAR> 中的每一项：</DD>
 <DL>
 <P>
 <DT>&lt;<CODE>ARG TYPE=</CODE><VAR>argumentType</VAR> <CODE>VALUE=</CODE><VAR>value</VAR>&gt;</DT>
 <P>
<DD>其中：</DD>
 <UL>
<LI><VAR>argumentType</VAR> 是将作为参数传递给 MBean 的构造方法的参数类型。</UL>
 </DL>
<P>参数列表中的参数类型应为 Java 基本类型（<CODE>java.lang.Boolean、java.lang.Byte、 java.lang.Short、java.lang.Long、java.lang.Integer、java.lang.Float、java.lang.Double 和 java.lang.String</CODE>）。
 </DL>

当加载一个 m-let 文本文件时，创建并注册该文件中所指定的每个 MBean 的实例。
 <P>
m-let 服务扩展了 <CODE>java.net.URLClassLoader</CODE>，可以用它加载代理的 VM 中的远程类和 jar 文件。
<p><STRONG>注意 － </STRONG> <CODE>MLet</CODE> 类加载器使用 {@link javax.management.MBeanServerFactory#getClassLoaderRepository(javax.management.MBeanServer)} 来加载在已加载 jar 文件中找不到的类。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.loading.MLet()
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认的代理父类加载器构造新的 MLet。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.loading.MLet(java.net.URL[] urls)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认的代理父类加载器为指定的 URL 构造新的 MLet。首先在父类加载器中搜索 URL，然后按照为类和资源指定的顺序搜索 URL。

@param urls 从其位置加载类和资源的 URL。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.loading.MLet(java.net.URL[] urls, ClassLoader parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
为给定的 URL 构造新的 MLet。首先在指定的父类加载器中搜索 URL，然后按照为类和资源指定的顺序搜索 URL。该父参数将用作代理的父类加载器。

@param urls 从其指示的位置加载类和资源的 URL。
@param  parent 代理的父类加载器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.loading.MLet(java.net.URL[] urls, ClassLoader parent, URLStreamHandlerFactory factory)
<!-- END KEY -->
<!-- BEGIN DATA -->
为指定的 URL、父类加载器和 URLStreamHandlerFactory 构造新的 MLet。该父参数将用作代理的父类加载器。在创建新 URL 时，该工厂参数将用作获取协议处理程序的流处理程序工厂。

@param urls 从其指示的位置加载类和资源的 URL。
@param  parent 代理的父类加载器。
@param  factory  创建 URL 时要使用的 URLStreamHandlerFactory。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.loading.MLet(java.net.URL[] urls, boolean delegateToCLR)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认的代理父类加载器为指定的 URL 构造新的 MLet。首先在父类加载器中搜索 URL，然后按照为类和资源指定的顺序搜索 URL。

@param urls 从其指示的位置加载类和资源的 URL。
@param  delegateToCLR  如果该参数为 true，则当在父类加载器或 URL 中均未找到某个类时，MLet 应该委托给该类的包含 MBeanServer 的 {@link ClassLoaderRepository}。

@since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.loading.MLet(java.net.URL[] urls, ClassLoader parent, boolean delegateToCLR)
<!-- END KEY -->
<!-- BEGIN DATA -->
为给定的 URL 构造新的 MLet。首先在指定的父类加载器中搜索 URL，然后按照为类和资源指定的顺序搜索 URL。该父参数将用作代理的父类加载器。

@param urls 从其指示的位置加载类和资源的 URL。
@param  parent 代理的父类加载器。
@param  delegateToCLR  如果该参数为 true，则当在父类加载器或 URL 中均未找到某个类时，MLet 应该委托给该类的包含 MBeanServer 的 {@link ClassLoaderRepository}。

@since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.loading.MLet(java.net.URL[] urls, ClassLoader parent, URLStreamHandlerFactory factory, boolean delegateToCLR)
<!-- END KEY -->
<!-- BEGIN DATA -->
为指定的 URL、父类加载器和 URLStreamHandlerFactory 构造新的 MLet。该父参数将用作代理的父类加载器。在创建新 URL 时，该工厂参数将用作获取协议处理程序的流处理程序工厂。

@param urls 从其指示的位置加载类和资源的 URL。
@param  parent 代理的父类加载器。
@param  factory  创建 URL 时要使用的 URLStreamHandlerFactory。
@param  delegateToCLR  如果该参数为 true，则当在父类加载器或 URL 中均未找到某个类时，MLet 应该委托给该类的包含 MBeanServer 的 {@link ClassLoaderRepository}。

@since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.loading.MLet.addURL(URL url)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的 URL 追加到 URL 列表中，以便搜索类和资源。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.loading.MLet.addURL(String url) throws javax.management.ServiceNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的 URL 追加到 URL 列表中，以便搜索类和资源。
@exception ServiceNotFoundException 如果指定的 URL 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL[] javax.management.loading.MLet.getURLs()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于加载类和资源的 URL 搜索路径。这包括为构造方法指定的原始 URL 列表，以及 addURL() 方法后来添加的 URL。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.lang.Object> javax.management.loading.MLet.getMBeansFromURL(URL url) throws javax.management.ServiceNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
加载一个包含 MLET 标记的文本文件，这些标记定义了要添加到 MBean 服务器的 MBean。文本文件的位置由 URL 指定。MLET 文件中指定的 MBean 将被实例化并在 MBean 服务器中注册。

@param url 以 URL 对象形式加载的文本文件的 URL。

@return  一个集合，在所加载的 m-let 文本文件中，每个 MLET 标记都对应该集合中的一项。每一项要么指定了所创建的 MBean 的 ObjectInstance，要么在无法创建 MBean 时指定一个 throwable 对象（即一个错误或异常）。
       
@exception ServiceNotFoundException 如果发生以下错误之一：m-let 文本文件不包含 MLET 标记；未找到 m-let 文本文件；未指定 MLET 标记的必需的属性；url 的值为 null。
@exception IllegalStateException 如果没有在 MBeanServer 中注册 MLet MBean。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.lang.Object> javax.management.loading.MLet.getMBeansFromURL(String url) throws javax.management.ServiceNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
加载一个包含 MLET 标记的文本文件，这些标记定义了要添加到 MBean 服务器的 MBean。文本文件的位置由 URL 指定。MLET 文件中指定的 MBean 将被实例化并在 MBean 服务器中注册。

@param url 以 String 对象形式加载的文本文件的 URL。

@return  一个集合，在所加载的 m-let 文本文件中，每个 MLET 标记都对应该集合中的一项。每一项要么指定了所创建的 MBean 的 ObjectInstance，要么在无法创建 MBean 时指定一个 throwable 对象（即一个错误或异常）。
       
@exception ServiceNotFoundException 如果发生以下错误之一：m-let 文本文件不包含 MLET 标记；未找到 m-let 文本文件；未指定 MLET 标记的必需的属性，url 错误。
@exception IllegalStateException 如果没有在 MBeanServer 中注册 MLet MBean。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String javax.management.loading.MLet.getLibraryDirectory()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取库加载器在将本机库加载到内存中之前用于存储这些本机库的当前目录。

@return 库加载器使用的当前目录。

@see #setLibraryDirectory

@throws UnsupportedOperationException 如果此实现不支持以这种方式存储本机库。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.loading.MLet.setLibraryDirectory(String libdir)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置在将本机库加载到内存中之前库加载器用来存储这些本机库的目录。

@param libdir 库加载器使用的目录。

@see #getLibraryDirectory

@throws UnsupportedOperationException 如果此实现不支持以这种方式存储本机库。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.ObjectName javax.management.loading.MLet.preRegister(MBeanServer server, ObjectName name) throws java.lang.Exception
<!-- END KEY -->
<!-- BEGIN DATA -->
允许在将 m-let 注册到 MBean 之前执行任何所需要的操作。如果 ObjectName 为 null，则 m-let 为它的注册 &lt;defaultDomain&gt;:type=MLet 提供了一个默认名称。

@param server 将在其中注册 m-let 的 MBean 服务器。
@param name m-let 的对象名称。

@return  所注册的 m-let 名称。

@exception java.lang.Exception 此异常应由 MBean 服务器捕获，并以 MBeanRegistrationException 的形式重新抛出。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.loading.MLet.postRegister(Boolean registrationDone)
<!-- END KEY -->
<!-- BEGIN DATA -->
允许 m-let 在已注册到 MBean 服务器之后或注册失败之后执行任何所需要的操作。

@param registrationDone 指示 m-let 是否已经成功注册到 MBean 服务器。值 false 意味着注册失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.loading.MLet.preDeregister() throws java.lang.Exception
<!-- END KEY -->
<!-- BEGIN DATA -->
允许 m-let 在由 MBean 服务器注销之前执行任何所需要的操作。

@exception  java.langException 此异常应由 MBean 服务器捕获，并以 MBeanRegistrationException 的形式重新抛出它。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.loading.MLet.postDeregister()
<!-- END KEY -->
<!-- BEGIN DATA -->
允许 m-let 在已从 MBean 服务器注销之后执行任何所需要的操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.loading.MLet.writeExternal(ObjectOutput out) throws java.io.IOException, java.lang.UnsupportedOperationException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>将此 MLet 的内容保存到给定的 {@link ObjectOutput}。不是所有的实现都支持此方法。不支持此方法的实现将抛出 {@link UnsupportedOperationException}。子类可以重写此方法来支持它，或更改写入数据的格式。</p>

<p>写入数据的格式是未指定的，但如果某个实现支持 {@link #writeExternal}，则它必须也支持 {@link #readExternal}，以便后者可以读取前者所写入的内容。</p>

@param out 要写入的对象输出流。

@exception IOException 如果在写入时出现问题。
@exception UnsupportedOperationException 如果此实现不支持此操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.loading.MLet.readExternal(ObjectInput in) throws java.io.IOException, java.lang.ClassNotFoundException, java.lang.UnsupportedOperationException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>从给定的 {@link ObjectInput} 恢复此 MLet 的内容。不是所有的实现都支持此方法。不支持此方法的实现将抛出 {@link UnsupportedOperationException}。子类可以重写此方法来支持它，或更改读取数据的格式。</p>

<p>读取数据的格式是未指定的，但如果某个实现支持 {@link #readExternal}，则它必须也支持 {@link #writeExternal}，以便前者可以读取后者所写入的内容。</p>

@param in 要从中读取的对象输入流。

@exception IOException 如果在读取时出现问题。
@exception ClassNotFoundException 如果找不到正在被恢复的对象的类。
@exception UnsupportedOperationException 如果此实现不支持此操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Class<?> javax.management.loading.MLet.loadClass(String name, ClassLoaderRepository clr) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>如果在此 MLet 的 URL 中找不到某个类，则使用给定的 {@link ClassLoaderRepository} 加载该类。给定的 ClassLoaderRepository 可以为 null，在这种情况下, 如果在此 MLet 的 URL 中找不到该类，则立即发生 {@link ClassNotFoundException}。</p>

@param name 想要加载的类名称。
@param clr  在此类加载器中未找到给定类时用于搜索给定类的 ClassLoaderRepository。可以为 null。
@return  得到的 Class 对象。
@exception ClassNotFoundException 如果在此类加载器和给定的 ClassLoaderRepository 中均找不到指定的类。

@since.unbundled JMX 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Class<?> javax.management.loading.MLet.findClass(String name) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
这是要重新定义的类加载器的主要方法。

@param name 类的名称。

@return  得到的 Class 对象。

@throws  ClassNotFoundException 如果找不到指定的类。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.management.loading.MLet.findLibrary(String libname)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回本机库的绝对路径名称。虚拟机 (VM) 调用此方法查找属于利用此类加载器加载的类的本机库。首先只使用第一个本机库名称在 JAR 文件中搜索库，如果未找到这样的本机库，则使用本机库名称连同特定于架构的路径名（<code>OSName/OSArch/OSVersion/lib/nativelibname</code>）来搜索，即
 <p>
Solaris SPARC 5.7 上的库 stat 将按照以下方式在 JAR 文件中进行搜索：
 <OL>
 <LI>libstat.so
 <LI>SunOS/sparc/5.7/lib/libstat.so
 </OL>
Windows NT 4.0 上的库 stat 将按照以下方式在 JAR 文件中进行搜索：
 <OL>
 <LI>stat.dll
 <LI>WindowsNT/x86/4.0/lib/stat.dll
 </OL>
 <p>更明确地说，可以设 <em>{@code nativelibname}</em> 为 {@link System#mapLibraryName(java.lang.String) System.mapLibraryName}{@code (libname)} 的结果。这样将在 JAR 文件中依次搜索以下名称：<br>
 <em>{@code nativelibname}</em><br>
 {@code <os.name>/<os.arch>/<os.version>/lib/}<em>{@code nativelibname}</em><br>
 其中 {@code <X>} 表示 {@code System.getProperty(X)}（结果中不带空格）；{@code /} 代表文件分隔符 ({@link File#separator})。
 <p>
如果此方法返回 <code>null</code>，即在任何使用此类加载器加载的 JAR 文件中都找不到库，则 VM 根据指定为 <code>java.library.path</code> 属性的路径搜索库。

@param  libname 库名称。

@return 本机库的绝对路径。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.net.URL javax.management.loading.MLet.check(String version, URL codebase, String jarfile, MLetContent mlet) throws java.lang.Exception
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>当扩展此服务来支持缓存和版本控制时，要重写此方法。当已经从 MLet 文件提取出版本、代码基和 jarfile 时，从 {@link #getMBeansFromURL getMBeansFromURL} 调用此方法，可以用它验证是否可以正确加载给定的 MBean，或者用不同的 URL 替换给定的 URL。</p>

<p>此方法的默认实现返回未更改的 <code>codebase</code>。</p>

@param version 本地存储的 <CODE>.jar</CODE> 文件的版本号。
@param codebase 远程 <CODE>.jar</CODE> 文件的基本 URL。
@param jarfile 要加载的 <CODE>.jar</CODE> 文件名称。
@param mlet 表示 <CODE>MLET</CODE> 标记的 <CODE>MLetContent</CODE> 实例。

@return 用于已加载 MBean 的代码基。返回值应该不为 null。

@exception Exception 如果由于某种原因未加载 MBean。该异常将被添加到 {@link #getMBeansFromURL getMBeansFromURL} 返回的集合中。

@since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.loading.MLet.readExternal(ObjectInput in) throws java.io.IOException, java.lang.ClassNotFoundException, java.lang.UnsupportedOperationException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>从给定的 {@link ObjectInput} 恢复此 MLet 的内容。不是所有的实现都支持此方法。不支持此方法的实现将抛出 {@link UnsupportedOperationException}。子类可以重写此方法以支持它或更改读取数据的格式。</p>

<p>读取数据的格式是未指定的，但如果某个实现支持 {@link #readExternal}，则它必须也支持 {@link #writeExternal}，以便前者可以读取后者所写入的内容。</p>

@param in 要从中读取的对象输入流。

@exception IOException 如果在读取时出现问题。
@exception ClassNotFoundException 如果找不到要被恢复的对象的类。
@exception UnsupportedOperationException 如果此实现不支持此操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.loading.MLet.writeExternal(ObjectOutput out) throws java.io.IOException, java.lang.UnsupportedOperationException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>将此 MLet 的内容保存到给定的 {@link ObjectOutput}。不是所有的实现都支持此方法。不支持此方法的实现将抛出 {@link UnsupportedOperationException}。子类可以重写此方法来支持它，或更改写入数据的格式。</p>

<p>写入数据的格式是未指定的，但如果某个实现支持 {@link #writeExternal}，则它必须也支持 {@link #readExternal}，以便后者可以读取前者所写入的内容。</p>

@param out 要写入的对象输出流。

@exception IOException 如果在写入时出现问题。
@exception UnsupportedOperationException 如果此实现不支持此操作。

<!-- END DATA -->
