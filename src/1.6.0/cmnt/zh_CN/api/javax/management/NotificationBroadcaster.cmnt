<!-- BEGIN KEY -->
public interface javax.management.NotificationBroadcaster
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>由发出 Notifications 的 MBean 实现的接口。它允许某个侦听器在该 MBean 中注册为通知侦听器。</p>

 <h3>通知调度</h3>

 <p>MBean 发出通知时，它会考虑每个已经使用 {@link #addNotificationListener addNotificationListener} 添加、且之后没有使用 {@link #removeNotificationListener removeNotificationListener} 移除的侦听器。如果该侦听器同时提供一个过滤器，且过滤器的 {@link NotificationFilter#isNotificationEnabled isNotificationEnabled} 方法返回 false，则忽略该侦听器。否则，将利用通知调用侦听器的 {@link NotificationListener#handleNotification handleNotification} 方法，同时向 {@code addNotificationListener} 提供 handback 对象。</p>

 <p>如果多次添加同一个侦听器，则认为该侦听器被添加的次数等于实际被添加的次数。在添加相同的侦听器的同时使用不同的过滤器或 handback 对象常常很有用。</p>

 <p>根据调用过滤器和侦听器方法的线程，此接口的实现可能有所不同。</p>

 <p>如果过滤器或侦听器的方法调用抛出 {@link Exception}，则该异常不应该阻止调用其他侦听器。但是，如果方法调用抛出 {@link Error}，则建议在此处停止对通知的处理，如果 {@code Error} 可以传播到通知的发送方，则更应该这样做。</p>

<p>新的代码应该使用 {@link NotificationEmitter} 接口。</p>

<p>应该注意保持此接口的实现与 {@code NotificationEmitter} 的实现之间同步。需要特别指出的是，让某个实现在调用侦听器时持有锁不是一个好主意。侦听器列表在调度通知时可能发生更改，处理这种可能性的一个好的策略是对列表使用 {@link CopyOnWriteArrayList}。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.NotificationBroadcaster.addNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
在此 MBean 中添加一个侦听器。

@param listener 将处理广播者发出的通知的侦听器对象。
@param filter 过滤器对象。如果 filter 为 null，则处理通知前不执行过滤。
@param handback 发出通知时要发送回侦听器的不透明对象。Notification 广播者对象不能使用此对象。应该将通知不作更改地重新发送到侦听器。

@exception IllegalArgumentException 如果 Listener 参数为 null。

@see #removeNotificationListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.NotificationBroadcaster.removeNotificationListener(NotificationListener listener) throws javax.management.ListenerNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从此 MBean 移除一个侦听器。如果已向不同的 handback 对象或通知过滤器注册了该侦听器，则移除与该侦听器有关的所有项。

@param listener 以前添加到此 MBean 中的侦听器。

@exception ListenerNotFoundException 如果没有在 MBean 中注册该侦听器。

@see #addNotificationListener
@see NotificationEmitter#removeNotificationListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.MBeanNotificationInfo[] javax.management.NotificationBroadcaster.getNotificationInfo()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回一个数组，指示此 MBean 可能发送的每个通知的 Java 类名和通知类型。</p>

<p>MBean 发送此数组中未描述的通知是合法的。但是，某些 MBean 服务器的客户端要想正常运行，可能要依赖完整的数组。</p>

@return 可能的通知数组。

<!-- END DATA -->
