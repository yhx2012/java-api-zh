<!-- BEGIN KEY -->
public class javax.management.Notification extends java.util.EventObject
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>Notification 类表示 MBean 所发出的通知。它包含对源 MBean 的引用：如果已通过 MBean 服务器转发了该通知，且该通知的初始源是对发出通知的 MBean 对象的引用，则 MBean 服务器根据该 MBean 的 ObjectName 来替换初始源。如果已直接使用 MBean 注册了侦听器，则初始源要么是该 MBean 的 ObjectName，要么是对该 MBean 的直接引用。</p>

<p>强烈建议该通知的发送方使用 MBean 的 ObjectName 而不是对该 MBean 对象的引用来作为通知的源。</p>
<p>此类的 <b>serialVersionUID</b> 为 <code>-7516092053498031989L</code>。
 
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object javax.management.Notification.source
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>此域隐藏了父类中的 {@link EventObject#source} 域，使其成为非 transient 的，并因此成为序列化形式的一部分。</p>

@serial 最初发生通知的对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] javax.management.Notification.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
@serialField type String 通知类型。用和 Java 属性类似的点标注法表示的 string。通知类型的示例：network.alarm.router
@serialField sequenceNumber long 通知序列号。序列号在通知源的上下文中标识特定的通知实例。
@serialField timeStamp long 通知时间戳。指示通知的生成时间
@serialField userData Object 通知的用户数据。用于通知源希望与其使用者所交流的所有其他数据
@serialField message String 通知消息。
@serialField source Object 最初发生通知的对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.Notification(String type, Object source, long sequenceNumber)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 Notification 对象。将通知的 timeStamp 设置为当前日期。

@param type 通知类型。
@param source 通知源。
@param sequenceNumber 源对象内的通知序列号。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.Notification(String type, Object source, long sequenceNumber, String message)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 Notification 对象。将通知的 timeStamp 设置为当前日期。

@param type 通知类型。
@param source 通知源。
@param sequenceNumber 源对象内的通知序列号。
@param message 详细消息。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.Notification(String type, Object source, long sequenceNumber, long timeStamp)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 Notification 对象。

@param type 通知类型。
@param source 通知源。
@param sequenceNumber 源对象内的通知序列号。
@param timeStamp 通知发出日期。   

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.Notification(String type, Object source, long sequenceNumber, long timeStamp, String message)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 Notification 对象。

@param type 通知类型。
@param source 通知源。
@param sequenceNumber 源对象内的通知序列号。
@param timeStamp 通知发出日期。
@param message 详细消息。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.Notification.setSource(Object source)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置源。

@param source 此对象的新源。

@see EventObject#getSource

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.management.Notification.getSequenceNumber()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得通知序列号。

@return 源对象内的通知序列号。这是在通知源上下文中标识特定通知实例的序列号。通知模型并不假定会以和发送通知时相同的顺序接收这些通知。该序列号可帮助侦听器对接收到的通知进行排序。

@see #setSequenceNumber

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.Notification.setSequenceNumber(long sequenceNumber)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置通知序列号。

@param sequenceNumber 源对象内的通知序列号。这是标识在通知源的上下文中的特定通知实例的序列号。

@see #getSequenceNumber

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.Notification.getType()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得通知类型。

@return 通知类型。这是用和 Java 属性类似的点标注法所表示的 string。通知类型示例：network.alarm.router。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.management.Notification.getTimeStamp()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得通知时间戳。

@return 通知时间戳。

@see #setTimeStamp

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.Notification.setTimeStamp(long timeStamp)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置通知时间戳。

@param timeStamp 通知时间戳。它指示通知的生成时间。

@see #getTimeStamp

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.Notification.getMessage()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得通知消息。

@return 此通知对象的消息字符串。该消息包含在一个字符串中，可以是显示给用户的通知解释。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.Notification.getUserData()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得用户数据。

@return 用户数据对象。它用于通知源希望与其使用者所交流的所有其他数据。

@see #setUserData

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.Notification.setUserData(Object userData)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用户数据。

@param userData 用户数据对象。它用于通知源希望与其使用者所交流的所有其他数据。

@see #getUserData

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.Notification.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此通知的字符串表示形式。

@return 此通知的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.Notification.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 {@link ObjectInputStream} 中反序列化 {@link Notification}。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.Notification.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 {@link Notification} 序列化为 {@link ObjectOutputStream}。

<!-- END DATA -->
