<!-- BEGIN KEY -->
public class javax.management.MBeanInfo extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable, javax.management.DescriptorRead
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>描述由 MBean 公开的管理接口；即描述为管理操作所提供的属性和操作的集合。此类的实例是不可变的。子类可以是可变的，但是不推荐使用此功能。</p>

<p>Dynamic MBean 的 <code>MBeanInfo</code> 内容由其 {@link DynamicMBean#getMBeanInfo getMBeanInfo()} 方法确定。这包括 Open MBean 和 Model MBean，它们都属于 Dynamic MBean。</p>

<p>Standard MBean 的 <code>MBeanInfo</code> 内容由 MBean 服务器按如下方式确定：</p>

 <ul>

<li>{@link #getClassName()} 返回 MBean 对象的 Java 类名；

<li>{@link #getConstructors()} 返回该对象中所有公共构造方法的列表；

<li>{@link #getAttributes()} 返回所有属性的列表，这些属性的存在是根据 MBean 接口中是否存在 <code>get<i>Name</i></code>、<code>is<i>Name</i></code> 或 <code>set<i>Name</i></code> 方法（符合 Standard MBean 的约定）来推断的；

<li>{@link #getOperations()} 返回 MBean 接口中不表示属性的所有方法的列表；

<li>如果 MBean 未实现 {@link NotificationBroadcaster} 接口，则 {@link #getNotifications()} 返回一个空数组；否则它返回在该接口上调用 {@link NotificationBroadcaster#getNotificationInfo()} 的结果；

 <li>{@link #getDescriptor()} 返回一个描述符，其包含的内容是 MBean 接口中的所有描述符注释。
 </ul>

 <p>{@link #getDescription()} 返回的描述以及所含属性和操作的描述由相应的 <!-- link here --> Description 注释（如果有）确定；其他情况下，其内容没有指定。</p>

<p>没有指定 Standard MBean 的 <code>MBeanInfo</code> 的其余细节。这包括所有包含的构造方法、通知的描述；构造方法和操作的参数的名称，以及构造方法参数的描述。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.String javax.management.MBeanInfo.description
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial The human readable description of the class.

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.String javax.management.MBeanInfo.className
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial The MBean qualified name.

<!-- END DATA -->
<!-- BEGIN KEY -->
private final javax.management.MBeanAttributeInfo[] javax.management.MBeanInfo.attributes
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial The MBean attribute descriptors.

<!-- END DATA -->
<!-- BEGIN KEY -->
private final javax.management.MBeanOperationInfo[] javax.management.MBeanInfo.operations
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial The MBean operation descriptors.

<!-- END DATA -->
<!-- BEGIN KEY -->
private final javax.management.MBeanConstructorInfo[] javax.management.MBeanInfo.constructors
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial The MBean constructor descriptors.

<!-- END DATA -->
<!-- BEGIN KEY -->
private final javax.management.MBeanNotificationInfo[] javax.management.MBeanInfo.notifications
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial The MBean notification descriptors.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.MBeanInfo(String className, String description, javax.management.MBeanAttributeInfo[] attributes, javax.management.MBeanConstructorInfo[] constructors, javax.management.MBeanOperationInfo[] operations, javax.management.MBeanNotificationInfo[] notifications) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <CODE>MBeanInfo</CODE>。

@param className 此 <CODE>MBeanInfo</CODE> 所描述的 MBean 的 Java 类名。此值可以是任何语法上合法的 Java 类名。它不必是 MBean 服务器或 MBean 的 ClassLoader 已知的 Java 类。如果它是 MBean 的 ClassLoader 已知的 Java 类，则建议但并不要求该类的公共方法包括此 MBeanInfo 中的属性和操作，而这些属性和操作将出现在 Standard MBean 实现中。
@param description MBean 的可读描述（可选）。
@param attributes MBean 已公开的属性的列表。此参数可以为 null，与零长度数组的效果相同。
@param constructors MBean 的公共构造方法列表。此参数可以为 null，与零长度数组的效果相同。
@param operations MBean 的操作列表。此参数可以为 null，与零长度数组的效果相同。
@param notifications 已发出的那些通知的列表。此参数可以为 null，与零长度数组的效果相同。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.MBeanInfo(String className, String description, javax.management.MBeanAttributeInfo[] attributes, javax.management.MBeanConstructorInfo[] constructors, javax.management.MBeanOperationInfo[] operations, javax.management.MBeanNotificationInfo[] notifications, Descriptor descriptor) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个 <CODE>MBeanInfo</CODE>。

 @param className 此 <CODE>MBeanInfo</CODE> 所描述的 MBean 的 Java 类名。此值可以是任何语法上合法的 Java 类名。它不必是 MBean 服务器或 MBean 的 ClassLoader 已知的 Java 类。如果它是 MBean 的 ClassLoader 已知的 Java 类，则建议但并不要求该类的公共方法包括此 MBeanInfo 中的属性和操作，而这些属性和操作将出现在 Standard MBean 实现中。
 @param description MBean 的可读描述（可选）。
 @param attributes MBean 已公开的属性的列表。此参数可以为 null，与零长度数组的效果相同。
 @param constructors MBean 的公共构造方法列表。此参数可以为 null，与零长度数组的效果相同。
 @param operations MBean 的操作列表。此参数可以为 null，与零长度数组的效果相同。
 @param notifications 已发出的那些通知的列表。此参数可以为 null，与零长度数组的效果相同。
 @param descriptor MBean 的描述符。此参数可以为 null，其等效于一个空描述符。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.MBeanInfo.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回此实例的浅表副本。可通过调用 <tt>super.clone()</tt> 来获得该副本，因此要调用 <tt>Object.clone()</tt> 所实现的默认本机浅表复制机制。不进行任何内部字段的更深层复制。</p>

<p>因为此类是不可变的，所以主要针对子类使用该 clone 方法。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.MBeanInfo.getClassName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <CODE>MBeanInfo</CODE> 描述的 MBean 的 Java 类名。

@return 类名。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.MBeanInfo.getDescription()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该 MBean 的可读描述。

@return 描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.MBeanAttributeInfo[] javax.management.MBeanInfo.getAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回为了便于管理而公开的属性的列表。每个属性由一个 <CODE>MBeanAttributeInfo</CODE> 对象描述。返回的数组是内部数组的一个浅表副本，这意味着它是 <CODE>MBeanAttributeInfo</CODE> 对象引用的一个内部数组副本，但它没有复制每个被引用的 <CODE>MBeanAttributeInfo</CODE> 对象。

@return <CODE>MBeanAttributeInfo</CODE> 对象的数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.MBeanOperationInfo[] javax.management.MBeanInfo.getOperations()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 MBean 的操作列表。每个操作由一个 <CODE>MBeanOperationInfo</CODE> 对象描述。返回的数组是内部数组的一个浅表副本，这意味着它是 <CODE>MBeanOperationInfo</CODE> 对象引用的一个内部数组副本，但它没有复制每个被引用的 <CODE>MBeanOperationInfo</CODE> 对象。

@return <CODE>MBeanOperationInfo</CODE> 对象的数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.MBeanConstructorInfo[] javax.management.MBeanInfo.getConstructors()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回 MBean 的公共构造方法列表。每个构造方法都由一个 <CODE>MBeanConstructorInfo</CODE> 对象描述。</p>

<p>返回的数组是内部数组的一个浅表副本，这意味着它是 <CODE>MBeanConstructorInfo</CODE> 对象引用的一个内部数组副本，但它没有复制每个被引用的 <CODE>MBeanConstructorInfo</CODE> 对象。</p>

<p>该返回的列表不必包括全部的构造方法。也就是说，该 MBean 具有的公共构造方法可能不在该列表中。在这种情况下，MBean 服务器可以使用该构造方法构造此 MBean 类的另一个实例，即使该构造方法不在列表中也是如此。</p>

@return <CODE>MBeanConstructorInfo</CODE> 对象的数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.MBeanNotificationInfo[] javax.management.MBeanInfo.getNotifications()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 MBean 所发出的通知列表。每个通知由一个 <CODE>MBeanNotificationInfo</CODE> 对象描述。返回的数组是内部数组的一个浅表副本，这意味着它是 <CODE>MBeanNotificationInfo</CODE> 对象引用的一个内部数组副本，但它没有复制每个被引用的 <CODE>MBeanNotificationInfo</CODE> 对象。

@return <CODE>MBeanNotificationInfo</CODE> 对象的数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.Descriptor javax.management.MBeanInfo.getDescriptor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 获取此 MBean 的描述符。更改返回值对原描述符没有影响。

 @return 一个描述符，可能是不可变的，也可能是原描述符的副本。


 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.MBeanInfo.equals(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>比较此 MBeanInfo 与另一个 MBeanInfo。当且仅当两个 MBeanInfo 对象的 {@link #getClassName()}、{@link #getDescription()} 和 {@link #getDescriptor()} 返回相等值，并且两个对象的 {@link #getAttributes()}、{@link #getOperations()}、{@link #getConstructors()} 和 {@link #getNotifications()} 所返回的数组是成对相等时，这两个 MBeanInfo 才是相等的。其中&ldquo;相等&rdquo;指的是 {@link Object#equals(Object)}，而不是相同。</p>

<p>如果两个 MBeanInfo 对象返回的数组中的值相同，但是顺序不同，则这两个对象不是相等的。</p>

@param o 要比较的对象。

@return 当且仅当根据上述规则 <code>o</code> 等于此 MBeanInfo 时才返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.MBeanInfo.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 从 {@link ObjectInputStream} 反序列化 {@link MBeanInfo}。
 @serialData
 For compatibility reasons, an object of this class is deserialized as follows.
 <ul>
 The method {@link ObjectInputStream#defaultReadObject defaultReadObject()}
 is called first to deserialize the object except the field
 {@code descriptor}, which is not serialized in the default way. Then the method
 {@link ObjectInputStream#read read()} is called to read a byte, the field
 {@code descriptor} is deserialized according to the value of the byte value:
    <ul>
    <li>1. The method {@link ObjectInputStream#readObject readObject()}
       is called twice to obtain the field names (a {@code String[]}) and
       the field values (a {@code Object[]}) of the {@code descriptor}.
       The two obtained values then are used to construct
       an {@link ImmutableDescriptor} instance for the field
       {@code descriptor};</li>
    <li>0. The value for the field {@code descriptor} is obtained directly
       by calling the method {@link ObjectInputStream#readObject readObject()}.
       If the obtained value is null, the field {@code descriptor} is set to
       {@link ImmutableDescriptor#EMPTY_DESCRIPTOR EMPTY_DESCRIPTOR};</li>
    <li>-1. This means that there is no byte to read and that the object is from
       an earlier version of the JMX API. The field {@code descriptor} is set to
       {@link ImmutableDescriptor#EMPTY_DESCRIPTOR EMPTY_DESCRIPTOR}.</li>
    <li>Any other value. A {@link StreamCorruptedException} is thrown.</li>
    </ul>
 </ul>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.MBeanInfo.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将 {@link MBeanInfo} 序列化为 {@link ObjectOutputStream}。
 @serialData
 For compatibility reasons, an object of this class is serialized as follows.
 <ul>
 The method {@link ObjectOutputStream#defaultWriteObject defaultWriteObject()}
 is called first to serialize the object except the field {@code descriptor}
 which is declared as transient. The field {@code descriptor} is serialized
 as follows:
     <ul>
     <li> If {@code descriptor} is an instance of the class
        {@link ImmutableDescriptor}, the method {@link ObjectOutputStream#write
        write(int val)} is called to write a byte with the value {@code 1},
        then the method {@link ObjectOutputStream#writeObject writeObject(Object obj)}
        is called twice to serialize the field names and the field values of the
        {@code descriptor}, respectively as a {@code String[]} and an
        {@code Object[]};</li>
     <li> Otherwise, the method {@link ObjectOutputStream#write write(int val)}
        is called to write a byte with the value {@code 0}, then the method
        {@link ObjectOutputStream#writeObject writeObject(Object obj)} is called
        to serialize the field {@code descriptor} directly.
     </ul>
 </ul>
 @since 1.6

<!-- END DATA -->
