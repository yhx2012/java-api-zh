<!-- BEGIN KEY -->
public class javax.management.MBeanPermission extends java.security.Permission
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>权限控制对 MBeanServer 操作的访问。如果已使用 {@link System#setSecurityManager} 设置了安全管理器，则 MBeanServer 上的多数操作都需要调用者的权限隐含了适用于该操作的 MBeanPermission。{@link MBeanServer} 接口的文档中对此进行了详细描述。</p>

<p>与其他 {@link Permission} 对象一样，MBeanPermission 可以表示所<em>拥有</em> 的权限，或者是所<em>需要</em> 的权限。当检查某个敏感操作的权限时，会构造一个表示所需权限的 MBeanPermission。仅在所拥有的权限{@link #implies 隐含}所需的权限时才允许该操作。</p>

<p>MBeanPermission 包含四项信息：</p>

 <ul>

<li><p><em>操作</em>。对于所需的权限，这是<a
 href="#action-list">下面</a>列表中的某种操作。对于所拥有的权限，则是这些操作的列表，各项以逗号分隔，或者是 <code>*</code>，表示所有操作。</p>

<p>通过 {@link #getActions()} 返回操作。</p>

<li><p><em>类名</em>。</p>

<p>对于所需的权限，这是正在访问的 MBean 的类名，正如 {@link MBeanServer#getMBeanInfo(ObjectName) MBeanServer.getMBeanInfo(name)} 和 {@link MBeanInfo#getClassName() getClassName()} 所返回的一样。某些操作不引用类名，在这种情况下类名为 null。</p>

<p>对于所拥有的权限，这是空或一个<em>类名模式</em>。类名模式是一个服从 Java 对点分类名约定的 string。该模式可以以 &quot;<code>.*</code>&quot; 结尾，意味着该权限允许对名称以 &quot;<code>.*</code>&quot; 前面的字符串开始的类的访问。例如，&quot;<code>javax.management.*</code>&quot; 允许对其他类中的 <code>javax.management.MBeanServerDelegate</code> 和 <code>javax.management.timer.Timer</code> 进行访问。</p>

<p>类名模式也可以为空，或者只有单个字符 &quot;<code>*</code>&quot;，这两种情况都允许对任何类的访问。</p>

<li><p><em>成员</em>。</p>

<p>对于所需的权限，这是正在访问的属性或操作名。对于没有引用属性或操作的操作，该成员为 null。</p>

<p>对于所拥有的权限，这要么是可以访问的属性或操作名，要么是空或单个字符 &quot;<code>*</code>&quot;，后面这两种情况都允许对任意成员的访问。</p>

<li><p><em>对象名</em>。</p>

<p>对于所需的权限，这是正在访问的 MBean 的 {@link ObjectName}。对于不引用单个 MBean 的操作而言，对象名为 null。它永远不会是对象名模式。</p>

<p>对于所拥有的权限，这是可访问的 MBean 或 MBeans 的 {@link ObjectName}。可以是一个对象名模式，以允许访问其名称匹配该模式的所有 MBean。还可以为空，这样可访问所有 MBean 而不管其名称是什么。</p>

 </ul>

<p>如果拥有 MBeanPermission，则它只允许这四项都匹配的操作。</p>

<p>可将类名、成员和对象名一同写入单个字符串，这就是此权限的<em>名称</em>。权限的名称是 {@link Permission#getName() getName()} 所返回的字符串。该字符串的格式为：</p>

 <blockquote>
 <code>className#member[objectName]</code>
 </blockquote>

<p>使用常规的 {@link ObjectName} 语法写对象名称。它可包含任意合法字符，包括 <code>]</code>。由字符串中最后一个 <code>]</code> 字符终止该字符串。</p>

<p>可省略一个或多个 <code>className</code>、<code>member</code> 或 <code>objectName</code>。如果省略的 <code>member</code>，则 <code>#</code> 也可省略（但并非必须如此）。如果省略 <code>objectName</code>，则 <code>[]</code> 也可省略（但并非必须如此）。省略所有三项是不合法的，也就是说只有一个空字符串的<em>名称</em> 是不合法的。</p>

<p><code>className</code>、<code>member</code> 或 <code>objectName</code> 中的一个或多个可以是字符 &quot;<code>-</code>&quot;，这等同于 null 值。任意值隐含 null 值（包括另一个 null 值），但是 null 值并不隐含任意其他值。</p>

<p><a name="action-list">可能的操作有：</a></p>

 <ul>
 <li>addNotificationListener</li>
 <li>getAttribute</li>
 <li>getClassLoader</li>
 <li>getClassLoaderFor</li>
 <li>getClassLoaderRepository</li>
 <li>getDomains</li>
 <li>getMBeanInfo</li>
 <li>getObjectInstance</li>
 <li>instantiate</li>
 <li>invoke</li>
 <li>isInstanceOf</li>
 <li>queryMBeans</li>
 <li>queryNames</li>
 <li>registerMBean</li>
 <li>removeNotificationListener</li>
 <li>setAttribute</li>
 <li>unregisterMBean</li>
 </ul>

<p>在逗号分隔的操作列表中，每个操作的前后允许有空格。</p>

@since 1.5
@since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.management.MBeanPermission.actions
<!-- END KEY -->
<!-- BEGIN DATA -->
操作字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.MBeanPermission(String name, String actions)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>创建具有指定目标名称和操作的新 MBeanPermission 对象。</p>

<p>目标名称的形式为 &quot;<code>className#member[objectName]</code>&quot;，其中每部分都是可选的。不可以为空或 null。</p>

<p>actions 参数包含在目标名称上所允许的所需操作列表，该列表用逗号分隔。不可以为空或 null。</p>

@param name 三部分的 &quot;className#member[objectName]&quot;。
@param actions 操作字符串。

@exception IllegalArgumentException 如果 <code>name</code> 或 <code>actions</code> 无效。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.MBeanPermission(String className, String member, ObjectName objectName, String actions)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>创建具有指定目标名称（类名、成员、对象名）和操作的 MBeanPermission 对象。</p>

<p>className、member、objectName 参数定义了 &quot;<code>className#member[objectName]</code>&quot; 形式的目标名称，其中每个部分都是可选的。这将是在结果 MBeanPermission 上调用 {@link #getName()} 得到的结果。</p>

<p>actions 参数包含在目标名称上所允许的所需操作列表，该列表用逗号分隔。不可以为空或 null。</p>

@param className 应用此权限的类名。可以为 null 或 <code>&quot;-&quot;</code>，这表示一个由任何类名所隐含的类名，但是并不隐含任意其他类名。
@param member 应用此权限的成员。可以为 null 或 <code>&quot;-&quot;</code>，这表示一个由任何成员所隐含的成员，但是并不隐含任意其他成员。
@param objectName 应用此权限的对象名。可以为 null，这表示一个由任何对象名所隐含的对象名，但是并不隐含任意其他对象名。
@param actions 操作字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.MBeanPermission.getActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回操作的&ldquo;规范化字符串表示形式&rdquo;。也就是说，此方法总是以字母顺序返回存在的操作：

@return 操作的规范化字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.MBeanPermission.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象的哈希码值。

@return 此对象的哈希码值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.MBeanPermission.implies(Permission p)
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>检查此 MBeanPermission 对象是否&ldquo;隐含&rdquo;指定的权限。</p>

<p>更明确地说，如果此方法满足以下条件，则返回 true：</p>

 <ul>

<li> <i>p</i> 是 MBeanPermission 的一个实例；并且</li>

<li> <i>p</i> 具有 null className 或者 <i>p</i> 的 className 与此对象的 className 相符；并且</li>

<li> <i>p</i> 具有 null 成员或者 <i>p</i> 的成员与此对象的成员相符；并且</li>

<li> <i>p</i> 具有 null 对象名或者 <i>p</i> 的对象名与此对象的 对象名相符；并且</li>

<li> <i>p</i> 的动作是此对象动作的一个子集</li>

 </ul>

<p>如果此对象的 className 是 &quot;<code>*</code>&quot;，则 <i>p</i> 的 className 始终与其相符。如果是 &quot;<code>a.*</code>&quot;，则 <i>p</i> 的 className 与开头是 &quot;<code>a.</code>&quot; 的 className 相符。</p>

<p>如果此对象的成员是 &quot;<code>*</code>&quot;，则 <i>p</i> 的成员始终与其相符。</p>

<p>如果此对象的 objectName <i>n1</i> 是一个对象名模式，则在 {@link ObjectName#equals <i>n1</i>.equals(<i>n2</i>)} 或者 {@link ObjectName#apply <i>n1</i>.apply(<i>n2</i>)} 的情况下，<i>p</i> 的 objectName <i>n2</i> 与其相符。</p>

<p>将包括 <code>queryMBeans</code> 操作的权限视为还包括 <code>queryNames</code>。</p>

@param p 所要检查的权限。
@return 如果此对象隐含指定的权限，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.MBeanPermission.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查两个 MBeanPermission 对象的相等性。检查 <i>obj</i> 是否为一个 MBeanPermission，并且检查是否和此对象具有相同的名称和操作。
 <P>
@param obj 要与此对象进行相等性测试的对象。
@return 如果 obj 是一个 MBeanPermission，并且与此 MBeanPermission 对象具有相同的名称和操作，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.MBeanPermission.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据此对象的名称和操作反序列化它。

<!-- END DATA -->
