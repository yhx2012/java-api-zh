<!-- BEGIN KEY -->
public class javax.management.ObjectName extends java.lang.Object implements java.lang.Comparable, javax.management.QueryExp
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>表示 MBean 的对象名，或者能够与多个 MBean 名称相匹配的模式。此类的实例是不可变的。</p>

<p>可使用此类的实例表示：</p> 
 <ul>
<li> 对象名</li>
<li> 查询的上下文中的对象名模式</li>
 </ul></p>

<p>由两部分（域和键属性）组成的对象名。</p>

<p><em>域</em> 是一个不包括冒号字符 (<code>:</code>) 的由字符组成的字符串。建议域不要包含字符串 "{@code //}"，该字符串保留供将来使用。

<p>如果域至少包括一个通配符星号 (<code>*</code>) 或问号 (<code>?</code>)，则该对象名就是一个模式。星号匹配任意零或多个字符的序列，而问号则匹配任意单个字符。</p>

<p>如果域为空，则由 MBean 服务器（在其中使用 ObjectName）的<em>默认域</em> 在特定的上下文中替换它。</p>

<p><em>键属性</em> 是一个无序的键和关联值的集合。</p>

<p>每个<em>键</em> 都是一个由字符组成的非空字符串，不可以包含任何逗号 (<code>,</code>)、等号 (<code>=</code>)、冒号、星号或问号字符。在一个给定的 ObjectName 中，同一个键不能出现两次。</p>

<p>每个与键关联的<em>值</em> 都是由字符组成的字符串，或者由引号括起来或者不括起来。</p>

<p><em>无引号值</em> 可能是一个空的字符串，不包含任意逗号、等号、冒号和引号。</p>

 <p>如果<em>无引号值</em> 包括至少一个通配符星号或问号，则该对象名就是一个<em>属性值模式</em>。</p>

<p><em>有引号值</em> 由一个引号 (<code>&quot;</code>)，后跟可能为空的字符串，然后是另一个引号所组成。在字符串中，反斜线 (<code>\</code>) 具有特殊的含义，它后面必须是下列某个字符：</p>

 <ul>
<li>另一个反斜线。第二个反斜线不具有特殊的含义，两个字符表示单个反斜线。</li>

<li>字符 'n'。这两个字符表示新行（Java 中的 '\n'）。</li>
\Z
<li>引号。这两个字符表示一个引号，并且不将该引号视为有引号值的终止。为了使有引号值有效，必须有结束的闭合引号。</li>

<li>问号 (?) 或星号 (*)。这两个字符分别表示一个问号或一个星号。</li>
 </ul>

<p>引号可能不出现在有引号值中，但紧跟在奇数个连续反斜线后的情况除外。</p>

<p>括住有引号值的引号和该值中的所有反斜线都被视为该值的一部分。</p>

 <p>如果<em>引号值</em> 包括至少一个星号或问号，且星号或问号之前没有反斜杠，则将其视为通配符，并且该对象名是一个<em>属性值模式</em>。星号匹配任意零或多个字符的序列，而问号则匹配任意单个字符。</p>

<p>ObjectName 可能是一种<em>属性列表模式</em>。在这种情况下，它可以有零个或多个键和关联值。它与非模式的 ObjectName 匹配，该 ObjectName 的域与相同的键和关联值匹配且包含它们，并且可能包括其他键和值。</p>
 
<p>当至少有一个 ObjectName 的<em>有引号</em> 或<em>无引号</em> 键属性值包含通配符星号或问号（如上所述）时，ObjectName 是一个<em>属性值模式</em>。在这种情况下，它有一个或多个键以及关联值，并至少有一个值包含通配符。它与一个无模式 ObjectName 相匹配，该 ObjectName 的域与之匹配，或者包含值与之匹配的相同键；如果属性值模式也是属性列表模式，则无模式 ObjectName 也可以包含其他键和值。</p>

<p>如果 ObjectName 是<em>属性列表模式</em> 或<em>属性值模式</em>，或者两者都是，则它是一个<em>属性模式</em>。</p>

<p>如果某个 ObjectName 的域包含通配符或者 ObjectName 是一个属性模式，则该 ObjectName 是一个模式。</p>

<p>如果某个 ObjectName 不是一个模式，那么它必须至少包含一个键及其关联值。</p>
 
<p>ObjectName 模式的示例有：</p>

 <ul>
 <li>{@code *:type=Foo,name=Bar} 匹配键的具体设置为 {@code type=Foo,name=Bar} 的任何域中的名称。</li>
 <li>{@code d:type=Foo,name=Bar,*}  匹配具有键 {@code type=Foo,name=Bar} 以及 0 或其他键的域 {@code d} 中的名称。</li>
 <li>{@code *:type=Foo,name=Bar,*} 匹配具有键 {@code type=Foo,name=Bar} 以及 0 或其他键的域中的名称。</li>
 <li>{@code d:type=F?o,name=Bar} 将与诸如 {@code d:type=Foo,name=Bar} 和 {@code d:type=Fro,name=Bar} 之类的键和名称匹配。</li>
 <li>{@code d:type=F*o,name=Bar} 将与诸如 {@code d:type=Fo,name=Bar} 和 {@code d:type=Frodo,name=Bar} 之类的键和名称匹配。</li>
 <li>{@code d:type=Foo,name="B*"} 将与诸如 {@code d:type=Foo,name="Bling"} 之类的键和名称匹配。通配符在引号中也能被识别，并且像其他特殊字符一样可以使用 {@code \} 转义。</li>
 </ul>

<p>按顺序使用下列元素可将 ObjectName 写为 String：</p>

 <ul>
<li>域。
<li>一个冒号 (<code>:</code>)。
<li>如下定义的键属性列表。
 </ul>

<p>写为 String 的键属性列表是一个逗号分隔的元素列表。每个元素都是一个星号或一个键属性。键属性由键、等号 (<code>=</code>) 和关联值组成。</p>

<p>键属性列表中最多只能有一个元素为星号。如果键属性列表包含星号元素，则该 ObjectName 是一个属性列表模式。</p>

<p>在表示 ObjectName 的 String 中，空格没有任何特殊含意。例如，String：
 <pre>
 domain: key1 = value1 , key2 = value2
 </pre>
表示具有两个键的 ObjectName。每个键的名字包含 6 个字符，其中第一个和最后一个都是空格。与键 <code>&quot;&nbsp;key1&nbsp;&quot;</code> 相关联的值同样以空格开头和结尾。</p>

<p>除了上述提及的字符限制外，ObjectName 的任何部分都不能包含换行符 (<code>'\n'</code>)，无论这些部分是域、键还是值（无引号值和有引号值）。可使用序列 <code>\n</code> 将换行符表示为有引号值。

<p>不管使用何种构造方法构建 ObjectName，关于特殊字符和引号的规则都适用。</p>

<p>为了避免不同供应商所提供的 MBean 之间出现冲突，提供了一个有用的约定：域名由指定该 MBean 的企业的反向 DNS 名开始，后跟一个句点和一个字符串，由该企业决定该字符串的解释。例如，由 Sun Microsystems Inc.（DNS 名是 <code>sun.com</code>）所指定的 MBean 将有 <code>com.sun.MyDomain</code> 这样的域。这基本上与 Java 语言包名的约定相同。</p>

<p>此类的 <b>serialVersionUID</b> 为 <code>1081892073854801359L</code>。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.management.ObjectName javax.management.ObjectName.WILDCARD
<!-- END KEY -->
<!-- BEGIN DATA -->
 定义通配符 "*:*" ObjectName。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.ObjectName(String name) throws javax.management.MalformedObjectNameException, java.lang.NullPointerException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据给定的字符串构造一个对象名。

@param name 对象名的字符串表示形式。

@exception MalformedObjectNameException 如果作为参数传递的字符串格式不正确。
@exception NullPointerException 如果 <code>name</code> 参数为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.ObjectName(String domain, String key, String value) throws javax.management.MalformedObjectNameException, java.lang.NullPointerException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造只具有一个键属性的对象名。

@param domain 对象名的域部分。
@param key 对象名键属性中的属性。
@param value 对象名键属性中的值。

@exception MalformedObjectNameException 如果 <code>domain</code>、<code>key</code> 或 <code>value</code> 包含非法字符，如果 <code>value</code> 未遵循有关引号使用的规则。
@exception NullPointerException 如果某个参数为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.ObjectName(String domain, java.util.Hashtable<java.lang.String, java.lang.String> table) throws javax.management.MalformedObjectNameException, java.lang.NullPointerException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个对象名，它具有根据哈希表获得的多个键属性。

@param domain 对象名的域部分。
@param table 包含一个或多个键属性的哈希表。表中每项的键都是对象名中键属性的键。表中的关联值是对象名中的关联值。

@exception MalformedObjectNameException 如果 <code>domain</code> 包含非法字符，或者 <code>table</code> 中的某个键或值包含非法字符，或者 <code>table</code> 中的某个值未遵循有关引号使用的规则。
@exception NullPointerException 如果某个参数为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.ObjectName javax.management.ObjectName.getInstance(String name) throws javax.management.MalformedObjectNameException, java.lang.NullPointerException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回 ObjectName 的实例，该 ObjectName 可用于任何使用 {@link #ObjectName(String) new ObjectName(name)} 获得的对象可以使用的地方。返回的对象可以是 ObjectName 的子类。使用相同的参数调用此方法两次可能会返回相同的对象，或者两个等效但是不同的对象。</p>

@param name 对象名的字符串表示形式。

@return 与给定 String 相对应的 ObjectName。

@exception MalformedObjectNameException 如果作为参数传递的字符串格式不正确。
@exception NullPointerException 如果 <code>name</code> 参数为 null。

@since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.ObjectName javax.management.ObjectName.getInstance(String domain, String key, String value) throws javax.management.MalformedObjectNameException, java.lang.NullPointerException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回 ObjectName 的实例，该 ObjectName 可用于任何使用 {@link #ObjectName(String, String, String) new ObjectName(domain, key, value)} 获得的对象可以使用的地方。返回的对象可以是 ObjectName 的子类。使用相同的参数调用此方法两次可能会返回相同的对象，或者两个等效但是不同的对象。</p>

@param domain 对象名的域部分。
@param key 对象名键属性中的属性。
@param value 对象名键属性中的值。

@return 与给定域、键和值相对应的 ObjectName。

@exception MalformedObjectNameException 如果 <code>domain</code>、<code>key</code> 或 <code>value</code> 包含非法字符，如果 <code>value</code> 未遵循有关引号使用的规则。
@exception NullPointerException 如果某个参数为 null。

@since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.ObjectName javax.management.ObjectName.getInstance(String domain, java.util.Hashtable<java.lang.String, java.lang.String> table) throws javax.management.MalformedObjectNameException, java.lang.NullPointerException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回 ObjectName 的实例，该 ObjectName 可用于任何使用 {@link #ObjectName(String, Hashtable) new ObjectName(domain, table)} 获得的对象可以使用的地方。返回的对象可以是 ObjectName 的子类。使用相同的参数调用此方法两次可能会返回相同的对象，或者两个等效但是不同的对象。</p>

@param domain 对象名的域部分。
@param table 包含一个或多个键属性的哈希表。表中每项的键都是对象名中键属性的键。表中的关联值是对象名中的关联值。

@return 与给定域和键映射关系相对应的 ObjectName。

@exception MalformedObjectNameException 如果 <code>domain</code> 包含非法字符，或者 <code>table</code> 中的某个键或值包含非法字符，或者 <code>table</code> 中的某个值未遵循有关引号使用的规则。
@exception NullPointerException 如果某个参数为 null。

@since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.management.ObjectName javax.management.ObjectName.getInstance(ObjectName name) throws java.lang.NullPointerException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回 ObjectName 的实例，该 ObjectName 可用于任何可使用给定对象的地方。返回的对象可以是 ObjectName 的子类。如果 <code>name</code> 是 ObjectName 子类的名称，则无法保证返回的对象属于同一个类。</p>

<p>返回的值可能与 <code>name</code> 相同，也可能不相同。使用相同的参数调用此方法两次可能会返回相同的对象，或者两个等效但是不同的对象。</p>

<p>因为 ObjectName 是不可变的，所以制作 ObjectName 的副本通常没有用。此方法的主要用途是用于防止恶意的调用者，它可能向敏感代码传递具有可疑行为的子类实例。这种代码可以调用此方法来获得一个已知没有可疑行为的 ObjectName。</p>

@param name ObjectName 类或子类的一个实例
 
@return ObjectName 或已知具有相同语义的子类的实例。如果 <code>name</code> 符合 ObjectName 的语义，则返回的对象等于（尽管不必相同）<code>name</code>。

@exception NullPointerException 如果 <code>name</code> 为 null。

@since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.ObjectName.isPattern()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查该对象名是否为一个模式。
<p>如果某个对象名的域包含通配符或者它是一个属性模式，则该对象名是一个模式。

@return 如果该名称是一个模式，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.ObjectName.isDomainPattern()
<!-- END KEY -->
<!-- BEGIN DATA -->
根据对象名的域部分检查对象名是否为一个模式。

@return 如果该名称是一个域模式，则返回 true；否则返回 false。

@since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.ObjectName.isPropertyPattern()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查对象名是否为一个键属性模式。

 <p>
 如果对象名是键属性列表模式（例如 "d:k=v,*"）或属性值模式（例如 "d:k=*"），或者两者都是（例如 "d:k=*,*"），则它是一个键属性模式。

 @return 如果该名称是一个属性模式，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.ObjectName.isPropertyListPattern()
<!-- END KEY -->
<!-- BEGIN DATA -->
 检查对象名是否为一个键属性列表模式。
 <p>
 例如，"d:k=v,*" 和 "d:k=*,*" 是键属性列表模式，而 "d:k=*" 则不是。

 @return  如果该名称是一个属性列表模式，则返回 true；否则返回 false。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.ObjectName.isPropertyValuePattern()
<!-- END KEY -->
<!-- BEGIN DATA -->
 检查对象名是否为值部分至少有一个键属性的模式。
 <p>
 例如，"d:k=*" 和 "d:k=*,*" 是属性值模式，而 "d:k=*" 则不是。

 @return  如果该名称是一个属性值模式，则返回 true；否则返回 false。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.ObjectName.isPropertyValuePattern(String property) throws java.lang.NullPointerException, java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 检查键属性中与值关联的值是否为一个模式。

 @param property 要检查值的属性。

 @return 如果与给定键关联的值是一个模式，则返回 true；否则返回 false。

 @exception NullPointerException 如果 <code>property</code> 为 null。
 @exception IllegalArgumentException 如果 <code>property</code> 对于此 ObjectName 不是有效值。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.ObjectName.getCanonicalName()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回该名称的规范形式；也就是说，一种字符串表示形式，其中属性按词汇顺序排序。</p>

<p>更准确地说，该名称的规范形式是一个由<em>域部分</em>、冒号 (<code>:</code>)、<em>规范的键属性列表</em> 和一个<em>模式指示</em> 组成的 String。</p>

<p><em>规范的键属性列表</em> 是与 {@link #getCanonicalKeyPropertyListString()} 所述相同的字符串。</p>

<p><em>模式指示</em> 是：
 <ul>
<li>对于不是属性列表模式的 ObjectName 而言为空；
<li>对于是属性列表模式但没有键的 ObjectName 而言是一个星号；或者
<li>对于是属性列表模式并且至少有一个键的 ObjectName 而言是逗号和星号 (<code>,*</code>)。
 </ul></p>

@return 该名称的规范形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.ObjectName.getDomain()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回域部分。

@return 域。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.ObjectName.getKeyProperty(String property) throws java.lang.NullPointerException
<!-- END KEY -->
<!-- BEGIN DATA -->
获得与键属性中某个键相关联的值。

@param property 要返回其值的属性。

@return 属性值，如果此 ObjectName 中没有此种属性，则返回 null。

@exception NullPointerException 如果 <code>property</code> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Hashtable<java.lang.String, java.lang.String> javax.management.ObjectName.getKeyPropertyList()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>以哈希表的形式返回键属性。返回值是一个哈希表，其中每个键是 ObjectName 的键属性列表中的键，并且每个值都是与键关联的值。</p>

<p>返回值可以是不可修改的。如果是可修改的，则更改它对此 ObjectName 没有影响。</p>

@return 键属性表。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.ObjectName.getKeyPropertyListString()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回创建时指定的键属性列表的字符串表示形式。如果使用构造方法 {@link #ObjectName(String)} 构造了此 ObjectName，则返回 String 中的键属性顺序与该构造方法参数中的顺序相同。</p>

@return 键属性列表字符串。此字符串与 ObjectName 是否为模式无关。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.ObjectName.getCanonicalKeyPropertyListString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回键属性列表的字符串表示形式，其中键属性按词汇顺序排序。为了根据 MBean 的键属性列表来选择 MBean，在执行字典式比较中使用此方法。词汇顺序就是 {@link String#compareTo(String) String.compareTo(String)} 所暗指的顺序。

@return 规范的键属性列表字符串。此字符串与 ObjectName 是否为模式无关。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.ObjectName.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回该对象名的字符串表示形式。未指定此字符串的格式，但是当且仅当两个 ObjectName 相等时才会返回相同的字符串。</p>

@return 此对象名的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.ObjectName.equals(Object object)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较当前的对象名与另一个对象名是否相等。当且仅当两个 ObjectName 实例的规范形式相等时它们才相等。规范形式是 {@link #getCanonicalName()} 所描述的字符串。

@param object 要与当前对象名进行比较的对象名。

@return 如果 <code>object</code> 是一个 ObjectName 并且其规范形式与此 ObjectName 的规范形式相同，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.ObjectName.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 ObjectName 的哈希码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String javax.management.ObjectName.quote(String s) throws java.lang.NullPointerException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回给定 String 的有引号形式，使之适合包含在 ObjectName 中。返回的值可用作与 ObjectName 中某个键相关联的值。String <code>s</code> 可包含任何字符。适当使用引号可确保返回的值在 ObjectName 中是合法的。</p>

<p>返回值由引号 ('&quot;')、对应于 <code>s</code> 中字符的字符序列和另一个引号所组成。<code>s</code> 中的字符会不加更改地出现在返回值中，但下列内容除外：</p>

 <ul>
<li>引号 ('&quot;') 被一个反斜线 (\) 后跟一个引号所替换。</li>
<li>星号 ('*') 由一个反斜线 (\) 后跟一个星号所替换。</li>
<li>问号 ('?') 由一个反斜线 (\) 后跟一个问号所替换。</li>
<li>反斜线 ('\') 由两个反斜线所替换</li>。
<li>换行符（Java 中的 字符 '\n'）由一个反斜线后跟字符 '\n' 所替换。
 </ul>

@param S 要用引号形式表示的 String。

@return 有引号形式的 String。

@exception NullPointerException 如果 <code>s</code> 为 null。

@since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String javax.management.ObjectName.unquote(String q) throws java.lang.IllegalArgumentException, java.lang.NullPointerException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回给定 String 的无引号形式，如果 <code>q</code> 是 {@link #quote quote(s)} 返回的 String，则 <code>unquote(q).equals(s)</code>。如果没有满足 <code>quote(s).equals(q)</code> 的 String <code>s</code>，则 unquote(q) 抛出 IllegalArgumentException。</p>

<p>这些规则意味着在有引号和无引号形式之间存在一对一的映射关系。</p>

@param q 要用无引号形式表示的 String。

@return 无引号形式的 String。

@exception IllegalArgumentException 如果不能由 {@link #quote} 方法返回 <code>q</code>，例如它没有以引号 (&quot;) 开始和结束。

@exception NullPointerException 如果 <code>q</code> 为 null。

@since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.ObjectName.apply(ObjectName name) throws java.lang.NullPointerException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>测试此 ObjectName（可以是一个模式）是否与另一个 ObjectName 匹配。如果 <code>name</code> 是一个模式，则结果是 false。如果此 ObjectName 是一个模式，则当且仅当 <code>name</code> 与该模式匹配时结果才是 true。如果此 ObjectName 和 <code>name</code> 都不是模式，则当且仅当两个 ObjectName 按 {@link #equals(Object)} 方法的描述相等时结果才是 true。</p>

@param name 要进行比较的 MBean 名。

@return 如果 <code>name</code> 与此 ObjectName 匹配，则返回 true。

@exception NullPointerException 如果 <code>name</code> 为 null。

@since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.ObjectName.compareTo(ObjectName name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>比较两个 ObjectName 实例。没有完整地指定 ObjectName 之间的顺序关系，但是存储的 ObjectName 列表一般按照便于阅读的顺序出现。</p>

 <p>特别要指出的是，如果两个 ObjectName 实例的域不同，则其顺序为域的字典顺序。键属性列表的顺序仍然没有指定。</p>

 <p>例如，以下 ObjectName 实例：</p>
 <ul>
 <li>Shapes:type=Square,name=3</li>
 <li>Colors:type=Red,name=2</li>
 <li>Shapes:type=Triangle,side=isosceles,name=2</li>
 <li>Colors:type=Red,name=1</li>
 <li>Shapes:type=Square,name=1</li>
 <li>Colors:type=Blue,name=1</li>
 <li>Shapes:type=Square,name=2</li>
 <li>JMImplementation:type=MBeanServerDelegate</li>
 <li>Shapes:type=Triangle,side=scalene,name=1</li>
 </ul>
 <p>将按以下方式排序：</p>
 <ul>
 <li>Colors:type=Blue,name=1</li>
 <li>Colors:type=Red,name=1</li>
 <li>Colors:type=Red,name=2</li>
 <li>JMImplementation:type=MBeanServerDelegate</li>
 <li>Shapes:type=Square,name=1</li>
 <li>Shapes:type=Square,name=2</li>
 <li>Shapes:type=Square,name=3</li>
 <li>Shapes:type=Triangle,side=scalene,name=1</li>
 <li>Shapes:type=Triangle,side=isosceles,name=2</li>
 </ul>

 @param name 要比较的 ObjectName。

 @return 根据此 ObjectName 小于、等于或大于给定 ObjectName 分别返回负整数、零或正整数。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.ObjectName.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 {@link ObjectInputStream} 反序列化 {@link ObjectName}。
@serialData <ul>
<li>在目前的序列形式中（属性 <code>jmx.serial.form</code> 的值不是 <code>1.0</code>）：字符串 &quot;&lt;域&gt;:&lt;属性&gt;&lt;通配符&gt;&quot;，其中： <ul>
<li>&lt;域&gt; 表示 {@link ObjectName} 的域部分</li>
<li>&lt;属性&gt; 表示属性列表，由 {@link #getKeyPropertyListString} 所返回
<li>如果 <code>isPropertyPattern</code> 返回 false，则 &lt;通配符&gt; 为空；如果 <code>isPropertyPattern</code> 和 &lt;属性&gt; 为空，则 &lt;通配符&gt; 为字符 &quot;<code>*</code>&quot;；如果 <code>isPropertyPattern</code> 和 &lt;属性&gt; 不为空，则 &lt;通配符&gt; 为 &quot;<code>,*</code>&quot;。
                            </li>
                          </ul>
目的是可将此字符串提供给 {@link #ObjectName(String)} 构造方法，以生成等效的 {@link ObjectName}。
               </li>
<li>在旧的序列形式中（属性 <code>jmx.serial.form</code> 的值是 <code>1.0</code>）：&lt;域&gt; &lt;属性列表&gt; &lt;属性列表 String&gt; &lt;规范名&gt; &lt;模式&gt; &lt;属性模式&gt;，其中： <ul>
<li>&lt;域&gt; 表示 {@link ObjectName} 的域部分</li>
<li>&lt;属性列表&gt; 是包含此 {@link ObjectName} 所有键值对的 {@link Hashtable}</li>
<li>&lt;属性列表 String&gt; 是以任意顺序出现的属性列表的 {@link String} 表示形式（并不强制使用规范的表示形式）
                                </li>
<li>&lt;规范名&gt; 是包含此 {@link ObjectName} 的规范名称的 {@link String}</li>
<li>&lt;模式&gt; 是一个 boolean 值，如果此 {@link ObjectName} 包含模式，则为 <code>true</code></li>
<li>&lt;属性模式&gt; 是一个 boolean 值，如果此 {@link ObjectName} 在属性列表中包含模式，则为 <code>true</code></li>
                          </ul>
               </li>
             </ul>

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.ObjectName.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 {@link ObjectName} 序列化为 {@link ObjectOutputStream}。
@serialData <ul>
<li>在目前的序列形式中（属性 <code>jmx.serial.form</code> 的值不是 <code>1.0</code>）：字符串 &quot;&lt;域&gt;:&lt;属性&gt;&lt;通配符&gt;&quot;，其中：<ul>
<li>&lt;域&gt; 表示 {@link ObjectName} 的域部分</li>
<li>&lt;属性&gt; 表示属性列表，由 {@link #getKeyPropertyListString} 所返回
<li>如果 <code>isPropertyPattern</code> 返回 false，则 &lt;通配符&gt; 为空；如果此 <code>isPropertyPattern</code> 和 &lt;属性&gt; 为空，则 &lt;通配符&gt; 为字符 &quot;<code>*</code>&quot;；如果 <code>isPropertyPattern</code> 和 &lt;属性&gt; 不为空，则 &lt;通配符&gt; 为 &quot;<code>,*</code>&quot;。
                            </li>
                          </ul>
目的是可将此字符串提供给 {@link #ObjectName(String)} 构造方法，以生成等效的 {@link ObjectName}。
               </li>
<li>在旧的序列形式中（属性 <code>jmx.serial.form</code> 的值是 <code>1.0</code>）：&lt;域&gt; &lt;属性列表&gt; &lt;属性列表 String&gt; &lt;规范名&gt; &lt;模式&gt; &lt;属性模式&gt;，其中： <ul>
<li>&lt;域&gt; 表示 {@link ObjectName} 的域部分</li>
<li>&lt;属性列表&gt; 是包含此 {@link ObjectName} 所有键值对的 {@link Hashtable}</li>
<li>&lt;属性列表 String&gt; 是以任意顺序出现的属性列表的 {@link String} 表示形式（并不强制使用规范的表示形式）
                                </li>
<li>&lt;规范名&gt; 是包含此 {@link ObjectName} 的规范名称的 {@link String}</li>
<li>&lt;模式&gt; 是一个 boolean 值，如果此 {@link ObjectName} 包含模式，则为 <code>true</code></li>
<li>&lt;属性模式&gt; 是一个 boolean 值，如果此 {@link ObjectName} 在属性列表中包含模式，则为 <code>true</code></li>
                          </ul>
               </li>
             </ul>

<!-- END DATA -->
