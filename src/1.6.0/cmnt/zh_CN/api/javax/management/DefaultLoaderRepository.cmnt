<!-- BEGIN KEY -->
public class javax.management.DefaultLoaderRepository extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>保存 MBean 服务器中已注册的 Class Loader 列表。它提供了必需的方法，以便使用已注册的 Class Loader 加载类。</p>

<p>维护这个过时的类是出于兼容性考虑。在以前的 JMX API 版本中，有一个所有 MBean 服务器共享的 <code>DefaultLoaderRepository</code>。从 JMX API 1.2 开始，该功能近似于使用 {@link MBeanServerFactory#findMBeanServer} 来查找所有已知的 MBean 服务器，并参考每个服务器的 {@link ClassLoaderRepository}。强烈推荐重写引用 <code>DefaultLoaderRepository</code> 的代码。</p>

@deprecated 使用 {@link javax.management.MBeanServer#getClassLoaderRepository()} 取代。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Class javax.management.DefaultLoaderRepository.loadClass(String className) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
仔细检查类加载器列表，并尝试加载所请求的类。一旦找到该类，就立即停止此方法。如果找不到该类，则此方法将抛出 <CODE>ClassNotFoundException</CODE> 异常。

@param className 要被加载的类名称。

@return 加载的类。

@throws  ClassNotFoundException 如果找不到指定的类。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Class javax.management.DefaultLoaderRepository.loadClassWithout(ClassLoader loader, String className) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
仔细检查除了给定类加载器之外的类加载器列表，然后尝试加载所请求的类。一旦找到该类，就立即停止此方法。如果找不到该类，则此方法将抛出 <CODE>ClassNotFoundException</CODE> 异常。

@param className 要被加载的类名称。
@param loader 不包括的类加载器。

@return 加载的类。

@exception ClassNotFoundException 如果找不到指定的类。

<!-- END DATA -->
