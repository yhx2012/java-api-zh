<!-- BEGIN KEY -->
public class javax.management.modelmbean.ModelMBeanNotificationInfo extends javax.management.MBeanNotificationInfo implements javax.management.DescriptorAccess
<!-- END KEY -->
<!-- BEGIN DATA -->
ModelMBeanNotificationInfo 对象描述了由 ModelMBean 发出的通知。它是 MBeanNotificationInfo 的一个子类，添加了关联的 Descriptor 和 Descriptor 接口的实现
 <P>
描述符中的字段定义如下，但不限于此： 
 <PRE>
name           :通知名称
descriptorType :必须为 &quot;notification&quot;
severity       :0-6，其中 0：未知；1：不可恢复的；
                2: 关键的，失败；3：主要的，严重的；
                4: 次要的，边缘的，错误；5：警告：
                6: 正常的、清楚的、丰富的
messageID      :消息文本的唯一键（允许转换，分析）              
messageText    :通知文本
log            :T － 记录消息 F － 不记录消息
logfile        :字符串完全限定文件名，适用于：操作系统
visibility     :1-4，其中 1：总是可见 4：几乎不可见
presentationString :允许数据呈现的 xml 格式的字符串
 </PRE>
默认的描述符包含 name、descriptorType、displayName 和 severity(=6) 字段。
<p>此类的 <b>serialVersionUID</b> 为 <code>-7445681389570207141L</code>。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] javax.management.modelmbean.ModelMBeanNotificationInfo.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
@serialField notificationDescriptor Descriptor 包含此实例的适当元数据的描述符

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.ModelMBeanNotificationInfo(java.lang.String[] notifTypes, String name, String description)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带有默认描述符的 ModelMBeanNotificationInfo 对象。

@param notifTypes 包含可以发送的通知类型的字符串（以点表示法）数组。
@param name Notification 类的名称。
@param description Notification 的可读描述。可选的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.ModelMBeanNotificationInfo(java.lang.String[] notifTypes, String name, String description, Descriptor descriptor)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造 ModelMBeanNotificationInfo 对象。

@param notifTypes 包含可以发送的通知类型的字符串（以点表示法）数组。
@param name Notification 类的名称。
@param description  Notification 的可读描述。可选的。
@param descriptor 包含此 MBeanNotificationInfo 的实例的适当元数据的 Descriptor 实例。如果它为 null，则将创建默认描述符。如果描述符不包含 &quot;displayName&quot; 或 &quot;severity&quot; 字段，则以默认值将这些字段添加到描述符中。

@exception RuntimeOperationsException 包装了一个 {@link IllegalArgumentException}。描述符无效，或者描述符 &quot;name&quot; 字段不等于参数名称，或者描述符 &quot;DescriptorType&quot; 字段不等于 &quot;notification&quot;。


<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.ModelMBeanNotificationInfo(ModelMBeanNotificationInfo inInfo)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此 ModelMBeanNotfication Object 构造新 ModelMBeanNotificationInfo 对象。

@param inInfo 要被复制的 ModelMBeanNotificationInfo


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.modelmbean.ModelMBeanNotificationInfo.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回新 ModelMBeanNotificationInfo，它是此 ModelMBeanNotificationInfo 的副本。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.Descriptor javax.management.modelmbean.ModelMBeanNotificationInfo.getDescriptor()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回 ModelMBeanNotificationInfo 的关联 Descriptor 的副本。

@return 与 ModelMBeanNotificationInfo 对象关联的 Descriptor。

@see #setDescriptor

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.modelmbean.ModelMBeanNotificationInfo.setDescriptor(Descriptor inDescriptor)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置 ModelMBeanNotificationInfo 的关联 Descriptor（完全替换）。如果新 Descriptor 为 null，则关联 Descriptor 恢复为默认描述符。分配 Descriptor 之前验证它。如果新 Descriptor 无效，则抛出一个包装 IllegalArgumentException 的 RuntimeOperationsException。

@param inDescriptor 替换与 ModelMBeanNotification 接口关联的 Descriptor

@exception RuntimeOperationsException 包装了无效 Descriptor 的 {@link IllegalArgumentException}。

@see #getDescriptor

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.modelmbean.ModelMBeanNotificationInfo.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回包含 ModelMBeanNotificationInfo 的可读字符串。

@return 描述此对象的字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.modelmbean.ModelMBeanNotificationInfo.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 {@link ObjectInputStream} 反序列化 {@link ModelMBeanNotificationInfo}。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.modelmbean.ModelMBeanNotificationInfo.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 {@link ModelMBeanNotificationInfo} 序列化为 {@link ObjectOutputStream}。

<!-- END DATA -->
