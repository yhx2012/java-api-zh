<!-- BEGIN KEY -->
public class javax.management.modelmbean.DescriptorSupport extends java.lang.Object implements javax.management.Descriptor
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示 ModelMBean 元素的元数据集。描述符是 ModelMBeanInfo、ModelMBeanNotificationInfo、ModelMBeanAttributeInfo、ModelMBeanConstructorInfo 和 ModelMBeanParameterInfo 的一部分。
 <P>
描述符由字段集合组成。每个字段都采用 fieldname=fieldvalue 格式。字段名称是不区分大小写的，在字段值上将保留大小写。
 <P>
所有字段名称和值都不是预定义的。任何程序都可以定义和添加新字段。出于实现一致性考虑，某些字段已预定义，并受 ModelMBeanInfo、ModelMBeanAttributeInfo、ModelMBeanConstructorInfo、ModelMBeanNotificationInfo、ModelMBeanOperationInfo 和 ModelMBean 类的支持。

<p>此类的 <b>serialVersionUID</b> 为 <code>-6292969195866300415L</code>。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] javax.management.modelmbean.DescriptorSupport.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
@serialField descriptor HashMap 表示此描述符的字段的集合

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.DescriptorSupport()
<!-- END KEY -->
<!-- BEGIN DATA -->
描述符默认的构造方法。默认的初始描述符大小为 20。此大小会根据需要而增加。<br>注意，创建的空描述符不是有效的描述符（{@link #isValid isValid} 方法返回 <CODE>false</CODE>）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.DescriptorSupport(int initNumFields) throws javax.management.MBeanException, javax.management.RuntimeOperationsException
<!-- END KEY -->
<!-- BEGIN DATA -->
描述符构造方法。它使用存储 descriptor 字段的 Map 的初始容量作为参数。容量将根据需要而增加。<br>注意，创建的空描述符不是有效的描述符（{@link #isValid isValid} 方法返回 <CODE>false</CODE>）。

@param initNumFields 存储 descriptor 字段的 Map 的初始容量。

@exception RuntimeOperationsException 如果 initNumField 的值是非法值 (&lt;= 0)
@exception MBeanException 如果包装了一个分布式通信异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.DescriptorSupport(DescriptorSupport inDescr)
<!-- END KEY -->
<!-- BEGIN DATA -->
采用 Descriptor 作为参数的描述符构造方法。创建新描述符，它被初始化为传入参数中的描述符的值。

@param inDescr 描述符，用于初始化所构造的描述符。如果该参数为 null 或不包含 descriptor 字段，则将创建一个空 Descriptor。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.DescriptorSupport(String inStr) throws javax.management.MBeanException, javax.management.RuntimeOperationsException, javax.management.modelmbean.XMLParseException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>Descriptor 构造方法带有一个 XML String。</p>

<p>XML 字符串的格式是未定义的，但实现必须确保在使用此构造方法进行实例化时，能够使用现有描述符上的 {@link #toXMLString() toXMLString()} 返回的字符串来实例化一个等效的描述符。</p>

<p>在此实现中，所有字段值都将以 String 形式创建。如果字段值不是 String 形式的，则程序员必须重置或正确转换这些字段。</p>

@param inStr 用于填充此 Descriptor 的 XML 格式的字符串。格式是未定义的，但任何实现必须确保在使用此构造方法进行实例化时，能够使用现有描述符上的 {@link #toXMLString toXMLString} 方法返回的字符串来实例化一个等效的描述符。

@exception RuntimeOperationsException 如果传递到参数中的 String inStr 为 null
@exception XMLParseException 如果解析输入 String 时发生 XML 解析问题
@exception MBeanException 如果包装了一个分布式通信异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.DescriptorSupport(java.lang.String[] fieldNames, java.lang.Object[] fieldValues) throws javax.management.RuntimeOperationsException
<!-- END KEY -->
<!-- BEGIN DATA -->
带有字段名称和字段值的构造方法。两个数组都不可以为 null。

@param fieldNames 字段名称的 String 数组。此数组的所有元素都不可以为 null。
@param fieldValues 对应字段值的 Object 数组。此数组的元素可以为 null。<code>fieldValue</code> 对于 <code>fieldName</code> 必须是有效的（正如 {@link #isValid isValid} 方法中所定义的那样）。

<p>注：参数的数组大小应是匹配的。如果两个数组均为空，则创建一个空描述符。</p>

@exception RuntimeOperationsException 如果 Names 或 Values 字段的值为非法值。数组长度必须相等。如果因为某种原因导致描述符构造失败，则将抛出此异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.DescriptorSupport(java.lang.String[] fields)
<!-- END KEY -->
<!-- BEGIN DATA -->
带有 <i>fieldName=fieldValue</i> 格式的字段的构造方法。

@param fields 每个元素包含一个字段名称和字段值的 String 数组。如果此数组为 null 或空，则将执行默认的构造方法。忽略 null 字符串或空字符串。

<p>所有字段值都应是 String。如果字段值不是 String，则程序员必须重置或正确转换这些字段。

<p>注：每个字符串都应为 <i>fieldName=fieldValue</i> 形式。字段名称到第一个 {@code =} 字符结束；例如，如果 String 为 {@code a=b=c} 则字段名称为 {@code a}，其值为 {@code b=c}。

@exception RuntimeOperationsException 如果 Names 或 Values 字段的值为非法值。字段必须包含 &quot;=&quot;。&quot;=fieldValue&quot;、&quot;fieldName&quot; 和 &quot;fieldValue&quot; 是非法的。FieldName 不可以为 null。&quot;fieldName=&quot; 将使该值为 null。如果因为某种原因导致描述符构造失败，则将抛出此异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Object javax.management.modelmbean.DescriptorSupport.clone() throws javax.management.RuntimeOperationsException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回作为 Descriptor 副本的新 Descriptor。

@exception RuntimeOperationsException 如果 Names 或 Values 字段的值为非法值。如果因为某种原因导致描述符构造失败，则将抛出此异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean javax.management.modelmbean.DescriptorSupport.equals(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 将此描述符与给定对象比较。如果给定对象也是一个 Descriptor，并且两个 Descriptor 具有相同的字段名称（有时是不同的）和关联值，则两个对象相等。如果满足以下情况，则两个 Descriptor 字段的各个值相等：</p>
 
 <ul>
 <li>如果一个值为 null，则另一值也必须为 null。</li>
 <li>如果一个值是基本类型数组，则另一个值必须是相同类型的基本类型数组，并且具有相同的元素。</li>
 <li>如果一个值是对象数组，则另一个值也必须是对象数组，且 {@link java.util.Arrays#deepEquals(Object[],Object[]) Arrays.deepEquals} 必须返回 true。</li>
 <li>其他情况下，{@link Object#equals(Object)} 必须返回 true。</li>
 </ul>

 @param o 要与之比较的对象。

 @return 如果对象相同，则返回 {@code true}；否则返回 {@code false}。


<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int javax.management.modelmbean.DescriptorSupport.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>返回此描述符的哈希码值。该哈希码是描述符每个字段的哈希码的总和。名为 {@code n} 且值为 {@code v} 的字段的哈希码为 {@code n.toLowerCase().hashCode() ^ h}。这里的 {@code h} 是 {@code v} 的哈希码，计算方式如下：</p>
 
 <ul>
 <li>如果 {@code v} 为 null，则 {@code h} 为 0。</li>
 <li>如果 {@code v} 是基本类型数组，则使用恰当重载形式的 {@code java.util.Arrays.hashCode} 计算 {@code h}。</li>
 <li>如果 {@code v} 是对象数组，则使用 {@link java.util.Arrays#deepHashCode(Object[]) Arrays.deepHashCode} 计算 {@code h}。</li>
 <li>其他情况下，{@code h} 为 {@code v.hashCode()}。</li>
 </ul>

 @return 此对象的哈希码值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean javax.management.modelmbean.DescriptorSupport.isValid() throws javax.management.RuntimeOperationsException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果所有给定名称的字段都有合法值，则返回 true。
 <P>
此实现不支持与目录或查找服务进行互操作。因此，根据规范，将不对 <i>&quot;export&quot;</i> 字段进行检查。
 <P>
否则，在以下情况下此实现返回 false：
 <P>
 <UL>
<LI> 名称和 descriptorType fieldNames 尚未定义，或者为 null、空或不是 String
<LI> 类、角色、getMethod、setMethod fieldNames（如果已定义）为 null 或不是 String
<LI> persistPeriod、currencyTimeLimit、lastUpdatedTimeStamp、lastReturnedTimeStamp（如果已定义）为 null，或者不是 Numeric String 或 Numeric Value（其值 &gt;= -1）
<LI> log fieldName（如果已定义）为 null，或者不是 Boolean，或者不是值为 &quot;t&quot;、&quot;f&quot;、&quot;true&quot;、&quot;false&quot; 的 String 。这些 String 值不能是区分大小写的。
<LI> visibility fieldName（如果已定义）为 null，或者不是 Numeric String 或 Numeric Value（其值 &gt;= 1 且 &lt;= 4）
<LI> severity fieldName（如果已定义）为 null，或不为 Numeric String 或 Numeric Value（其值 &gt;= 0 且 &lt;= 6）<br>
<LI> persistPolicy fieldName（如果已定义）为 null，或不是以下字符串之一：<br>&quot;OnUpdate&quot;、&quot;OnTimer&quot;、&quot;NoMoreOftenThan&quot;、"OnUnregister"、&quot;Always&quot;、&quot;Never&quot;。这些 String 值不能是区分大小写的。<br>
 </UL>

@exception RuntimeOperationsException 如果因为某种原因导致验证检查失败，则将抛出此异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String javax.management.modelmbean.DescriptorSupport.toXMLString()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回表示描述符的 XML 字符串。</p>

<p>格式是未定义的，但实现应确保在使用构造方法 {@link #DescriptorSupport(String) DescriptorSupport(String inStr)} 进行实例化时，能够使用此方法返回的字符串来构造一个等效描述符。</p>

<p>对于不是 String 对象的字段，可以调用 toString() 来创建值。该值将用括号括起来。不保证能够重新构造这些对象，除非它们已经过特殊设置以有意义的格式支持 toString()，并且具有接受相同格式的 String 的匹配构造方法。</p>

<p>如果描述符为空，则返回以下 String：&lt;Descriptor&gt;&lt;/Descriptor&gt;</p>

@return XML 字符串。

@exception RuntimeOperationsException 如果 Names 或 Values 字段的值为非法值。如果因为某种原因导致 XML 格式的字符串构造失败，则将抛出此异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String javax.management.modelmbean.DescriptorSupport.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回<pv>表示描述符的可读字符串</pv>。该字符串的格式将为 &quot;fieldName=fieldValue,fieldName2=fieldValue2,...&quot;<br>

如果描述符中没有字段，则返回一个空 String。<br>

如果 fieldValue 是一个对象，则对它调用 toString() 方法，其返回值用作括号中的字段值。

@exception RuntimeOperationsException 如果 Names 或 Values 字段的值为非法值。如果因为某种原因导致描述符字符串出错，则将抛出此异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.modelmbean.DescriptorSupport.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 {@link ObjectInputStream} 反序列化 {@link DescriptorSupport}。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.modelmbean.DescriptorSupport.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 {@link DescriptorSupport} 序列化为 {@link ObjectOutputStream}。

<!-- END DATA -->
