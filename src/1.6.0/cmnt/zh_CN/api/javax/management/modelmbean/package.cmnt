<!-- BEGIN KEY -->
javax.management.modelmbean
<!-- END KEY -->
<!-- BEGIN DATA -->

<p>提供了 ModelMBean 类的定义。Model MBean 是充当管理接口与底层托管资源之间桥梁的 MBean。管理接口和托管资源都指定为 Java 对象。不同管理接口和托管资源可以多次重用相同的 Model MBean 实现，它可以提供诸如持久存储和缓存这样常见的功能。</p>

<p>Model MBean 实现 {@link javax.management.modelmbean.ModelMBean ModelMBean} 接口。它是一个 {@link javax.management.DynamicMBean DynamicMBean} 接口，该接口的 {@link javax.management.DynamicMBean#getMBeanInfo() getMBeanInfo} 方法返回实现 {@link javax.management.modelmbean.ModelMBeanInfo ModelMBeanInfo} 的对象。</p>

<p>每个 MBean 都有一个 {@link javax.management.MBeanInfo MBeanInfo}，它包含关于 MBean 本身、其属性、操作、构造方法和通知的信息。Model MBean 用 {@link javax.management.Descriptor Descriptor} 来扩充此 <code>MBeanInfo</code>，这里 {@link javax.management.Descriptor Descriptor} 通过 (key,value) 对的形式对其他信息进行编码。通常，<code>Descriptor</code> 是 {@link javax.management.modelmbean.DescriptorSupport DescriptorSupport} 的实例。</p>

<p>{@link javax.management.modelmbean.RequiredModelMBean RequiredModelMBean} 类提供了标准的 Model MBean 实现。</p>

<p>以下显示了一个 Model MBean 的示例，它使我们可以通过 MBean 服务器管理 <code>HashMap</code> 的 <code>get</code> 方法。其他方法不能通过 MBean 服务器进行管理。这里 <code>HashMap</code> 没有特殊的地方。任何公共类的公共方法都可以通过相同方式进行管理。</p>

    <pre>
import java.lang.reflect.Method;
import java.util.HashMap;
import javax.management.*;
import javax.management.modelmbean.*;

// ...

MBeanServer mbs = MBeanServerFactory.createMBeanServer();
// The MBean Server

HashMap map = new HashMap();
// The resource that will be managed

// Construct the management interface for the Model MBean
Method getMethod = HashMap.class.getMethod(&quot;get&quot;, new Class[] {Object.class});
ModelMBeanOperationInfo getInfo =
    new ModelMBeanOperationInfo(&quot;Get value for key&quot;, getMethod);
ModelMBeanInfo mmbi =
    new ModelMBeanInfoSupport(HashMap.class.getName(),
			      &quot;Map of keys and values&quot;,
			      null,  // no attributes
			      null,  // no constructors
			      new ModelMBeanOperationInfo[] {getInfo},
			      null); // no notifications

// Make the Model MBean and link it to the resource
ModelMBean mmb = new RequiredModelMBean(mmbi);
mmb.setManagedResource(map, &quot;ObjectReference&quot;);

// Register the Model MBean in the MBean Server
ObjectName mapName = new ObjectName(&quot;:type=Map,name=whatever&quot;);
mbs.registerMBean(mmb, mapName);

// Resource can evolve independently of the MBean
map.put(&quot;key&quot;, &quot;value&quot;);

// Can access the &quot;get&quot; method through the MBean Server
mbs.invoke(mapName, &quot;get&quot;, new Object[] {&quot;key&quot;}, new String[] {Object.class.getName()});
// returns &quot;value&quot;
    </pre>

<h2><a name="spec">包规范</a></h2>

    <ul>
<li>参见<a href="{@docRoot}/../technotes/guides/jmx/">有关 JMX 的 Java SE 6 Platform 文档</a>中可用的 <i>JMX 1.3 规范</i> 的 PDF 文档。
    </ul>

@since 1.5

  
<!-- END DATA -->
