<!-- BEGIN KEY -->
public class javax.management.modelmbean.ModelMBeanOperationInfo extends javax.management.MBeanOperationInfo implements javax.management.DescriptorAccess
<!-- END KEY -->
<!-- BEGIN DATA -->
ModelMBeanOperationInfo 对象描述了 ModelMBean 的管理操作。它是 MBeanOperationInfo 的一个子类，添加了关联的 Descriptor 和 DescriptorAccess 接口实现。
 <P>
 <PRE>
描述符中的字段定义如下，但不限于此： 
 name           : 操作的名称 
 descriptorType : 必须为 &quot;operation&quot;  
 class          : 其中定义了方法（完全限定）的类
 role           : 必须为 &quot;operation&quot;、&quot;getter&quot; 或 &quot;setter&quot;
 targetObject   : 将在其上执行此方法的对象
 targetType     : targetObject 的对象引用类型可以为：ObjectReference | Handle | EJBHandle | IOR | MIReference。
 value          : 操作的缓存值
 currencyTimeLimit : 缓存值的有效时间
 lastUpdatedTimeStamp : 当设置缓存值时
 visibility            : 1-4，其中 1 表示总是可见；4 表示几乎不可见
 presentationString : 用于描述如何呈现操作的 xml 格式的字符串
 </PRE>
默认的描述符包含 name、descriptorType、displayName 和 role 字段。

<p><b>注：</b>由于与此规范的以前版本不一致，因此对于 <code>currencyTimeLimit</code>，建议不要使用负值或零。要指示某个缓存的值永远无效，请忽略 <code>currencyTimeLimit</code> 字段。要指示它总是有效，请为此字段使用一个非常大的值。</p>

<p>此类的 <b>serialVersionUID</b> 为 <code>6532732096650090465L</code>。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] javax.management.modelmbean.ModelMBeanOperationInfo.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
@serialField operationDescriptor Descriptor 包含此实例的适当元数据的描述符

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.ModelMBeanOperationInfo(String description, Method operationMethod)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带有默认描述符的 ModelMBeanOperationInfo 对象。已构造对象的 {@link Descriptor} 包括 {@code Method} 对象（包含 {@link DescriptorKey} 元注释）生成的字段。

@param operationMethod 描述 MBean 操作的 java.lang.reflect.Method 对象。
@param description 操作的可读描述。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.ModelMBeanOperationInfo(String description, Method operationMethod, Descriptor descriptor)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造 ModelMBeanOperationInfo 对象。已构造对象的 {@link Descriptor} 包括 {@code Method} 对象（包含 {@link DescriptorKey} 元注释）生成的字段。

@param operationMethod 描述 MBean 操作的 java.lang.reflect.Method 对象。
@param description 操作的可读描述。
@param descriptor 包含此 ModelMBeanOperationInfo 实例的适当元数据的 Descriptor 的一个实例。如果该参数为 null，则将创建默认描述符。如果描述符不包含 &quot;displayName&quot; 或 &quot;role&quot; 字段，则以默认值将这些字段添加到描述符中。

@exception RuntimeOperationsException 包装一个 IllegalArgumentException。描述符无效；描述符 "name" 字段不等于操作名称；描述符 "DescriptorType" 字段不等于 "operation"；描述符 "role" 字段不等于 "operation"、"getter" 或 "setter"。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.ModelMBeanOperationInfo(String name, String description, javax.management.MBeanParameterInfo[] signature, String type, int impact)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带有默认描述符的 ModelMBeanOperationInfo 对象。

@param name 方法名称。
@param description 操作的可读描述。
@param signature 描述方法的参数的 MBeanParameterInfo 对象。
@param type 方法返回值的类型。
@param impact 方法的影响，为 INFO、ACTION、ACTION_INFO、UNKNOWN 之一。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.ModelMBeanOperationInfo(String name, String description, javax.management.MBeanParameterInfo[] signature, String type, int impact, Descriptor descriptor)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造 ModelMBeanOperationInfo 对象。

@param name 方法名称。
@param description 操作的可读描述。
@param signature 描述方法的参数的 MBeanParameterInfo 对象。
@param type 方法返回值的类型。
@param impact 方法的影响，为 INFO、ACTION、ACTION_INFO、UNKNOWN 之一。
@param descriptor 包含此 MBeanOperationInfo 实例的适当元数据的 Descriptor 的实例。如果该参数为 null，是将创建默认描述符。如果描述符不包含 &quot;displayName&quot; 或 &quot;role&quot; 字段，则以默认值将这些字段添加到描述符中。

@exception RuntimeOperationsException 包装一个 IllegalArgumentException。描述符无效；描述符 "name" 字段不等于操作名称；描述符 "DescriptorType" 字段不等于 "operation"；描述符 "role" 字段不等于 "operation"、"getter" 或 "setter"。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.ModelMBeanOperationInfo(ModelMBeanOperationInfo inInfo)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据此 ModelMBeanOperation Object 构造新的 ModelMBeanOperationInfo 对象。

@param inInfo 要复制的 ModelMBeanOperationInfo

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.modelmbean.ModelMBeanOperationInfo.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回新的 ModelMBeanOperationInfo，它是此 ModelMBeanOperationInfo 的副本。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.Descriptor javax.management.modelmbean.ModelMBeanOperationInfo.getDescriptor()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回 ModelMBeanOperationInfo 的关联 Descriptor 的副本。

@return 与 ModelMBeanOperationInfo 对象关联的 Descriptor。

@see #setDescriptor

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.modelmbean.ModelMBeanOperationInfo.setDescriptor(Descriptor inDescriptor)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 ModelMBeanOperationInfo 的关联 Descriptor（完全取代）。如果新 Descriptor 为 null，则该关联 Descriptor 恢复为默认描述符。在分配 Descriptor 之前先验证它。如果新 Descriptor 无效，则抛出包装 IllegalArgumentException 的 RuntimeOperationsException。

@param inDescriptor 替换与 ModelMBeanOperation 关联的 Descriptor。	 	 

@exception RuntimeOperationsException 包装一个无效 Descriptor 的 IllegalArgumentException。

@see #getDescriptor

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.modelmbean.ModelMBeanOperationInfo.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
以可读形式返回包含 ModelMBeanOperationInfo 全部内容的字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.modelmbean.ModelMBeanOperationInfo.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 {@link ObjectInputStream} 反序列化 {@link ModelMBeanOperationInfo}。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.modelmbean.ModelMBeanOperationInfo.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 {@link ModelMBeanOperationInfo} 序列化为 {@link ObjectOutputStream}。

<!-- END DATA -->
