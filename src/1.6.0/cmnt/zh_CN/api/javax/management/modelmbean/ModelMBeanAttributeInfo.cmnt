<!-- BEGIN KEY -->
public class javax.management.modelmbean.ModelMBeanAttributeInfo extends javax.management.MBeanAttributeInfo implements javax.management.DescriptorAccess
<!-- END KEY -->
<!-- BEGIN DATA -->
ModelMBeanAttributeInfo 对象描述了 ModelMBean 的属性。它是 MBeanAttributeInfo 的一个子类，添加了关联的 Descriptor 和 DescriptorAccess 接口实现。
 <P>
描述符中的字段定义如下，但不限于此： <P>
 <PRE>
 name           : 属性名称 
 descriptorType : 必须为 &quot;attribute&quot;   
 value          : 属性的当前值
 default        : 属性的默认值
 displayName    : 将在显示中使用的属性名称
 getMethod      : get 方法的操作描述符名称
 setMethod      : set 方法的操作描述符名称
 protocolMap    : 实现 Descriptor 接口的对象：映射关系必须适用于该属性并且项可以在运行时进行更新或扩充。
 persistPolicy  : OnUpdate|OnTimer|NoMoreOftenThan|OnUnregister|Always|Never  
 persistPeriod  : 秒数 － 持续周期的频率。当 persistPolicy 为 &quot;OnTimer&quot; 或 &quot;NoMoreOftenThan&quot; 时使用。  
 currencyTimeLimit : 值保持有效的时间，&lt;0 表示无效，=0 表示总是有效，&gt;0 表示有效的秒数
 lastUpdatedTimeStamp : 当设置值时
 visibility     : 1-4，其中 1 表示总是可见；4 表示几乎不可见
 presentationString : 允许数据呈现的 xml 格式的字符串
 </PRE>
默认的描述符包含 name、descriptorType 和 displayName 字段。

<p><b>注：</b>由于与此规范的以前版本不一致，因此对于 <code>currencyTimeLimit</code>，建议不使用负值或零。要指示某个缓存的值永远无效，请忽略 <code>currencyTimeLimit</code> 字段。要指示它总是有效，请对此字段使用一个非常大的值。</p>

<p>此类的 <b>serialVersionUID</b> 为 <code>6181543027787327345L</code>。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] javax.management.modelmbean.ModelMBeanAttributeInfo.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
@serialField attrDescriptor Descriptor 包含对应于此属性的元数据的 {@link Descriptor}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.ModelMBeanAttributeInfo(String name, String description, Method getter, Method setter) throws javax.management.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有默认描述符的 ModelMBeanAttributeInfo 对象。已构造对象的 {@link Descriptor} 包括 {@code Method} 对象（包含 {@link DescriptorKey} 元注释）生成的字段。

@param name 属性名称。
@param description 属性的可读描述。它是可选的。
@param getter 用于读取属性值的方法。如果该属性是只写的，则此参数可以为 null。
@param setter 用于写入属性值的方法。如果该属性是只读的，则此参数可以为 null。
@exception IntrospectionException 如果此属性的定义中存在一致性问题。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.ModelMBeanAttributeInfo(String name, String description, Method getter, Method setter, Descriptor descriptor) throws javax.management.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造 ModelMBeanAttributeInfo 对象。已构造对象的 {@link Descriptor} 包括 {@code Method} 对象（包含 {@link DescriptorKey} 元注释）生成的字段。 

@param name 属性名称。
@param description 属性的可读描述。它是可选的。
@param getter 用于读取属性值的方法。如果该属性是只写的，则此参数可以为 null。
@param setter 用于写入属性值的方法。如果该属性是只读的，则此参数可以为 null。
@param descriptor 包含此 Attribute 实例的适当元数据的 Descriptor 的实例。如果此参数为 null，则将创建默认描述符。如果描述符不包含 &quot;displayName&quot; 字段，则用默认值将此字段添加到描述符中。

@exception IntrospectionException 如果此属性的定义中存在一致性问题。
@exception RuntimeOperationsException 包装一个 IllegalArgumentException。描述符无效，或者描述符 &quot;name&quot; 字段不等于 name 参数，或者描述符字段 &quot;DescriptorType&quot; 不等于 &quot;attribute&quot;。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.ModelMBeanAttributeInfo(String name, String type, String description, boolean isReadable, boolean isWritable, boolean isIs)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有默认描述符的 ModelMBeanAttributeInfo 对象。

@param name 属性名称
@param type 属性的类型名称或类名称
@param description 属性的可读描述。
@param isReadable 如果属性有获取方法，则该参数为 true，否则为 false。
@param isWritable 如果属性有设置方法，则该参数为 true，否则为 false。
@param isIs 如果属性有一个 &quot;is&quot; 获取方法，则该参数为 true，否则为 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.ModelMBeanAttributeInfo(String name, String type, String description, boolean isReadable, boolean isWritable, boolean isIs, Descriptor descriptor)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有默认描述符的 ModelMBeanAttributeInfo 对象。

@param name 属性名称
@param type 属性的类型名称或类名称
@param description 属性的可读描述。
@param isReadable 如果属性有获取方法，则该参数为 true，否则为 false。
@param isWritable 如果属性有设置方法，则该参数为 true，否则为 false。
@param isIs 如果属性有一个 &quot;is&quot; 获取方法，则为 true，否则为 false。
@param descriptor 包含此 Attribute 实例的适当元数据的 Descriptor 的一个实例。如果它为 null，则将创建默认描述符。如果描述符不包含 &quot;displayName&quot; 字段，则用默认值将此字段添加到描述符中。

@exception RuntimeOperationsException 包装一个 IllegalArgumentException。描述符无效，或者描述符 &quot;name&quot; 字段不等于 name 参数，或者描述符字段 &quot;DescriptorType&quot; 不等于 &quot;attribute&quot;。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.ModelMBeanAttributeInfo(ModelMBeanAttributeInfo inInfo)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据此 ModelMBeanAttributeInfo Object 构造新的 ModelMBeanAttributeInfo 对象。这将创建一个默认描述符。

@param inInfo 将被复制的 ModelMBeanAttributeInfo

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.Descriptor javax.management.modelmbean.ModelMBeanAttributeInfo.getDescriptor()
<!-- END KEY -->
<!-- BEGIN DATA -->

获取 ModelMBeanAttributeInfo 的关联 Descriptor 的副本。

@return 与 ModelMBeanAttributeInfo 对象关联的 Descriptor。

@see #setDescriptor

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.modelmbean.ModelMBeanAttributeInfo.setDescriptor(Descriptor inDescriptor)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置 ModelMBeanAttributeDescriptor 的关联 Descriptor（完全取代）。如果新 Descriptor 为 null，则关联的 Descriptor 恢复为默认描述符。在分配 Descriptor 之前验证它。如果新 Descriptor 无效，则抛出一个包装 IllegalArgumentException 的 RuntimeOperationsException。

@param inDescriptor 替换与 ModelMBeanAttributeInfo 关联的 Descriptor
 
@exception RuntimeOperationsException 包装无效 Descriptor 的 IllegalArgumentException

@see #getDescriptor

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.modelmbean.ModelMBeanAttributeInfo.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回新的 ModelMBeanAttributeInfo，它是此 ModelMBeanAttributeInfo 的副本。

@exception RuntimeOperationsException 如果 Names 或 Values 字段的值为非法值。如果因为某种原因导致描述符构造失败，则将抛出此异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.modelmbean.ModelMBeanAttributeInfo.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 ModelMBeanAttributeInfo 实例的可读版本。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.modelmbean.ModelMBeanAttributeInfo.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 {@link ObjectInputStream} 反序列化 {@link ModelMBeanAttributeInfo}。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.modelmbean.ModelMBeanAttributeInfo.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 {@link ModelMBeanAttributeInfo} 序列化为 {@link ObjectOutputStream}。

<!-- END DATA -->
