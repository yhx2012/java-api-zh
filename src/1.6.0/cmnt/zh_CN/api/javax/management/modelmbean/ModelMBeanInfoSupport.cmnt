<!-- BEGIN KEY -->
public class javax.management.modelmbean.ModelMBeanInfoSupport extends javax.management.MBeanInfo implements javax.management.modelmbean.ModelMBeanInfo
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示 ModelMBean 的元数据。描述符已被添加到元数据对象上。
 <P>
Java 资源使用 MBeanServer 的 createMBean 方法来实例化 ModelMBean，以便具有可管理性。然后该资源设置 ModelMBean 实例的 ModelMBeanInfo 和 Descriptor。通过 ModelMBean 的 ModelMBeanInfo 公开的属性和操作像其他 MBean 一样可以从 MBean、连接器/适配器进行访问。通过使用 Descriptor，可以定义托管应用程序中的值和方法，并且可以将它们映射到 ModelMBean 的属性和操作。此映射可以在文件的开发过程中定义，也可以以编程方式在运行时动态定义。 
 <P>
MBeanServer 中实例化的每个 ModelMBean 都是可管理的：通过连接到该 MBeanServer 的连接器/适配器，可以远程访问其属性和操作。如果 Java 对象不是兼容 JMX 的 MBean，那么它不能在 MBeanServer 中进行注册。通过实例化 ModelMBean，资源得到保证，因此 MBean 是有效的。每个公共方法必须抛出 MBeanException 和 RuntimeOperationsException。这允许包装来自分布式通信（RMI、EJB 等）的异常。

<p>此类的 <b>serialVersionUID</b> 为 <code>-1935722590756516193L</code>。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] javax.management.modelmbean.ModelMBeanInfoSupport.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
@serialField modelMBeanDescriptor Descriptor 包含 MBean 级策略的描述符
@serialField modelMBeanAttributes ModelMBeanAttributeInfo[] 带有描述符的 {@link ModelMBeanAttributeInfo} 对象数组
@serialField modelMBeanConstructors MBeanConstructorInfo[] 带有描述符的 {@link ModelMBeanConstructorInfo} 对象数组
@serialField modelMBeanNotifications MBeanNotificationInfo[] 带有描述符的 {@link ModelMBeanNotificationInfo} 对象数组
@serialField modelMBeanOperations MBeanOperationInfo[] 带有描述符的 {@link ModelMBeanOperationInfo} 对象数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.ModelMBeanInfoSupport(ModelMBeanInfo mbi)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造作为给定 ModelMBeanInfoSupport 副本的 ModelMBeanInfoSupport。返回对象是给定对象的浅表复制。Descriptor 或所包含的数组（@code ModelMBeanAttributeInfo[]} 等）都不会被复制。此方法的主要作用是通过 {@link #setDescriptor setDescriptor} 修改返回实例的 Descriptor，而不影响原对象的 Descriptor。

@param mbi ModelMBeanInfo 实例，正在创建的 ModelMBeanInfo 从该实例进行实例化。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.ModelMBeanInfoSupport(String className, String description, javax.management.modelmbean.ModelMBeanAttributeInfo[] attributes, javax.management.modelmbean.ModelMBeanConstructorInfo[] constructors, javax.management.modelmbean.ModelMBeanOperationInfo[] operations, javax.management.modelmbean.ModelMBeanNotificationInfo[] notifications)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带有所提供的信息、但描述符为默认描述符的 ModelMBeanInfoSupport。默认描述符为：name=mbeanName、descriptorType=mbean、displayName=ClassName、persistPolicy=never、log=F 和 visibility=1。

@param className MBean 的类名称
@param description ModelMBean 的可读描述
@param attributes 带有描述符的 ModelMBeanAttributeInfo 对象数组
@param constructors 带有描述符的 ModelMBeanConstructorInfo 对象数组
@param operations 带有描述符的 ModelMBeanOperationInfo 对象数组
@param notifications 带有描述符的 ModelMBeanNotificationInfo 对象数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.ModelMBeanInfoSupport(String className, String description, javax.management.modelmbean.ModelMBeanAttributeInfo[] attributes, javax.management.modelmbean.ModelMBeanConstructorInfo[] constructors, javax.management.modelmbean.ModelMBeanOperationInfo[] operations, javax.management.modelmbean.ModelMBeanNotificationInfo[] notifications, Descriptor mbeandescriptor)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带有所提供的信息和参数中给出的描述符的 ModelMBeanInfoSupport。

@param className MBean 的类名称
@param description ModelMBean 的可读描述
@param attributes 带有描述符的 ModelMBeanAttributeInfo 对象数组
@param constructors 带有描述符的 ModelMBeanConstructorInfo 对象数组
@param operations 带有描述符的 ModelMBeanOperationInfo 对象数组
@param notifications 带有描述符的 ModelMBeanNotificationInfo 对象数组如果描述符为 null，则将构造默认描述符。默认描述符为：name=className、descriptorType=mbean、displayName=className、persistPolicy=never、log=F 和 visibility=1。如果描述符不包含所有这些字段，则将用默认值添加它们。

@exception RuntimeOperationsException 包装了针对传入参数中的无效描述符的 IllegalArgumentException。（有关有效 MBean 描述符的定义，请参见 {@link #getMBeanDescriptor getMBeanDescriptor}）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.modelmbean.ModelMBeanInfoSupport.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回此实例的浅表复制。Descriptor 或所包含的数组（@code ModelMBeanAttributeInfo[]} 等）都不会被复制。此方法的主要作用是通过 {@link #setDescriptor setDescriptor} 修改副本的 Descriptor，而不影响原对象的 Descriptor。

 @return 此实例的浅表复制。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.Descriptor javax.management.modelmbean.ModelMBeanInfoSupport.getDescriptor(String inDescriptorName) throws javax.management.MBeanException, javax.management.RuntimeOperationsException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回通过名称请求的 Descriptor。

@param inDescriptorName 描述符名称。

@return 包含具有相同名称的 ModelMBean 描述符的 Descriptor。如果未找到该描述符，则返回 null。

@exception MBeanException 包装了一个分布式通信异常。
@exception RuntimeOperationsException 包装了针对 null 名称的 IllegalArgumentException。 

@see #setDescriptor

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.modelmbean.ModelMBeanConstructorInfo javax.management.modelmbean.ModelMBeanInfoSupport.getConstructor(String inName) throws javax.management.MBeanException, javax.management.RuntimeOperationsException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回通过名称请求的 ModelMBeanConstructorInfo。如果不存在具有此名称的 ModelMBeanConstructorInfo，则返回 null。

@param inName 构造方法名称。

@return 指定构造方法的构造方法信息，如果没有这类信息，则返回 null。

@exception MBeanException 包装了一个分布式通信异常。
@exception RuntimeOperationsException 包装了针对 null 构造方法名称的 IllegalArgumentException。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.Descriptor javax.management.modelmbean.ModelMBeanInfoSupport.getDescriptor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.modelmbean.ModelMBeanInfoSupport.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 {@link ObjectInputStream} 反序列化 {@link ModelMBeanInfoSupport}。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.modelmbean.ModelMBeanInfoSupport.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 {@link ModelMBeanInfoSupport} 序列化为 {@link ObjectOutputStream}。

<!-- END DATA -->
