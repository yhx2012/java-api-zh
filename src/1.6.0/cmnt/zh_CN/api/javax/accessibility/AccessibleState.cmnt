<!-- BEGIN KEY -->
public class javax.accessibility.AccessibleState extends javax.accessibility.AccessibleBundle
<!-- END KEY -->
<!-- BEGIN DATA -->
<P>AccessibleState 类描述了组件的特殊状态。组件的实际状态定义为 AccessibleStateSet，它是由 AccessibleState 组成的集合。
<p>toDisplayString 方法允许从此类中定义的键的预定义 ResourceBundle 获取与语言环境无关的键的本地化字符串。
<p>此类中的常量表示公共对象职责的强类型的枚举。此类的公共构造方法已被有意忽略，应用程序应该使用此类的一个常量。如果此类中没有足够的常量来描述对象的职责，则应从此类生成一个子类，此子类应以类似的方式提供常量。

@version     1.38 04/15/04
@author      Willie Walker
@author      Peter Korn

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.ACTIVE
<!-- END KEY -->
<!-- BEGIN DATA -->
指示某个窗口当前是活动窗口。这包括窗口、对话框、窗体等等。此外，此状态用于指示组件（例如列表、表或树）的当前活动子级。例如，列表的活动子级是周围绘制了矩形框的子级。
@see AccessibleRole#WINDOW
@see AccessibleRole#FRAME
@see AccessibleRole#DIALOG

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.PRESSED
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此对象当前是按下的。这通常与按钮相关，它指示当鼠标指针停留在按钮上时，用户已按下鼠标按钮，并且尚未释放鼠标按钮。
@see AccessibleRole#PUSH_BUTTON

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.ARMED
<!-- END KEY -->
<!-- BEGIN DATA -->
指示选中了此对象。这通常用于已按下且尚未释放，并且鼠标指针仍然停留在其上的按钮。
@see AccessibleRole#PUSH_BUTTON

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.BUSY
<!-- END KEY -->
<!-- BEGIN DATA -->
指示当前对象忙。这通常用于进度条、滑块或滚动条这之类的对象，以指示这些对象正处于过渡状态。
@see AccessibleRole#PROGRESS_BAR
@see AccessibleRole#SCROLL_BAR
@see AccessibleRole#SLIDER

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.CHECKED
<!-- END KEY -->
<!-- BEGIN DATA -->

指示此对象当前被选中。这通常用于切换按钮、单选按钮和复选框之类的对象。
@see AccessibleRole#TOGGLE_BUTTON
@see AccessibleRole#RADIO_BUTTON
@see AccessibleRole#CHECK_BOX

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.EDITABLE
<!-- END KEY -->
<!-- BEGIN DATA -->
指示用户可以更改此对象的内容。这通常主要用于允许用户输入文本的对象。对于其他对象（例如滚动条和滑块），如果它们是启用的，则它们自动是可编辑的。
@see #ENABLED

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.EXPANDABLE
<!-- END KEY -->
<!-- BEGIN DATA -->

指示此对象允许逐步显示其子级。这通常用于诸如树之类的分层对象，并通常与 EXPANDED 或 COLLAPSED 状态成对使用。
@see #EXPANDED
@see #COLLAPSED
@see AccessibleRole#TREE

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.COLLAPSED
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此对象是折叠的。这通常与 EXPANDABLE 状态成对使用，用于诸如树之类的提供逐步显示功能的对象。
@see #EXPANDABLE
@see #EXPANDED
@see AccessibleRole#TREE

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.EXPANDED
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此对象是展开的。这通常与 EXPANDABLE 状态成对使用，用于诸如树之类的提供逐步显示功能的对象。
@see #EXPANDABLE
@see #COLLAPSED
@see AccessibleRole#TREE

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.ENABLED
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此对象是启用的。如果对象的状态集中没有此状态，则指示此对象是未启用的。用户不能操作未启用的对象。在图形显示中，它通常呈现灰色。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.FOCUSABLE
<!-- END KEY -->
<!-- BEGIN DATA -->

指示此对象可以接受键盘焦点，这意味着当它具有焦点时，由键盘上的键入操作所产生的所有事件将被传递到此对象。
@see #FOCUSED

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.FOCUSED
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此对象当前具有键盘焦点。
@see #FOCUSABLE

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.ICONIFIED
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此对象是最小化的，并只通过一个图标来表示。这通常只与窗体和内部窗体关联。
@see AccessibleRole#FRAME
@see AccessibleRole#INTERNAL_FRAME

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.MODAL
<!-- END KEY -->
<!-- BEGIN DATA -->

指示在用户可以与不同窗口中的某个对象交互之前，必须对此对象采取某些操作。这通常只与对话框关联。
@see AccessibleRole#DIALOG

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.OPAQUE
<!-- END KEY -->
<!-- BEGIN DATA -->

指示此对象在其矩形区域内绘制每个像素。透明的组件则仅绘制其中某些像素，允许其下面的像素&ldquo;透视出来&rdquo;。因此，没有完全绘制其像素的组件则提供了一定程度的透明度。
@see Accessible#getAccessibleContext
@see AccessibleContext#getAccessibleComponent
@see AccessibleComponent#getBounds

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.RESIZABLE
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此对象的大小不固定。
@see Accessible#getAccessibleContext
@see AccessibleContext#getAccessibleComponent
@see AccessibleComponent#getSize
@see AccessibleComponent#setSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.MULTISELECTABLE
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此对象允许同时选定多个子级。
@see Accessible#getAccessibleContext
@see AccessibleContext#getAccessibleSelection
@see AccessibleSelection

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.SELECTABLE
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此对象是某个允许选择子级的对象的子对象，并且此子对象就是这些可以被选择的子对象之一。
@see #SELECTED
@see Accessible#getAccessibleContext
@see AccessibleContext#getAccessibleSelection
@see AccessibleSelection

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.SELECTED
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此对象是某个允许选择子级的对象的子对象，且此子对象是已被选定的子对象之一。
@see #SELECTABLE
@see Accessible#getAccessibleContext
@see AccessibleContext#getAccessibleSelection
@see AccessibleSelection

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.SHOWING
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此对象、此对象的父对象、其父对象的父对象等都是可见的。注意，这不一定意味着在屏幕上绘制此对象。它可能包括在其他正在显示的对象中。
@see #VISIBLE

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.VISIBLE
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此对象是可见的。注：这意味着该对象是可见的；但是，它实际上不显示在屏幕上，因为包含此对象的对象中的一个对象不可见。
@see #SHOWING

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.VERTICAL
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此对象的方向为垂直方向。这通常与滚动条、滑块和进度条之类的对象关联。
@see #VERTICAL
@see AccessibleRole#SCROLL_BAR
@see AccessibleRole#SLIDER
@see AccessibleRole#PROGRESS_BAR

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.HORIZONTAL
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此对象的方向为水平方向。这通常与滚动条、滑块和进度条之类的对象关联。
@see #HORIZONTAL
@see AccessibleRole#SCROLL_BAR
@see AccessibleRole#SLIDER
@see AccessibleRole#PROGRESS_BAR

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.SINGLE_LINE
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此（文本）对象只能包含单行文本

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.MULTI_LINE
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此（文本）对象可以包含多行文本

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.TRANSIENT
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此对象是临时的。辅助技术不应将 PropertyChange 侦听器添加到具有临时状态的对象中 ，因为该对象永远不会生成任何事件。  创建临时对象的目的通常是为了应答 Java Accessibility 方法查询，否则不保持到底层对象的链接（例如，Swing 中的列表、表和树的下级对象，这里只有一个实际的 UI Component 为实际列表/表/树元素下的所有数据对象执行共享呈现职责）。

@since 1.5
 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.MANAGES_DESCENDANTS
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此对象负责管理其子组件。这通常用于带有大量子组件的树和表，并且只在需要对象时才创建对象，否则保持虚拟的状态。应用程序不应直接管理子组件。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.INDETERMINATE
<!-- END KEY -->
<!-- BEGIN DATA -->
指示对象状态是不确定的。例如，部分为粗体，部分不为粗体的选定文本。在这种情况下，与选定文本关联的属性是不确定的。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.accessibility.AccessibleState javax.accessibility.AccessibleState.TRUNCATED
<!-- END KEY -->
<!-- BEGIN DATA -->
该状态指示文本被边界矩形截取，并且有些文本不显示在屏幕上。例如电子表格单元格中被单元格边界所截取的文本。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.accessibility.AccessibleState(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的与语言环境无关的键创建新的 AccessibleState。此方法不应该是公共方法。相反，它用于创建此文件中的常量以使其成为强类型的枚举。此类的子类应强制执行类似的策略。
 <p>
String 键应该是针对状态的与语言环境无关的键。它不打算用作实际的 String 显示给用户。要获得本地化字符串，请使用 toDisplayString。

@param key 状态的与语言环境无关的名称。
@see AccessibleBundle#toDisplayString

<!-- END DATA -->
