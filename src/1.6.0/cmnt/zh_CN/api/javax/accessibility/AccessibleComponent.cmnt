<!-- BEGIN KEY -->
public interface javax.accessibility.AccessibleComponent
<!-- END KEY -->
<!-- BEGIN DATA -->
屏幕上呈现的任何对象都应该支持 AccessibleComponent 接口。此接口为辅助技术提供了标准机制，以确定和设置对象的图形表示形式。应用程序通过先获取某个对象的 AccessibleContext，然后调用 {@link AccessibleContext#getAccessibleComponent} 方法，能够确定该对象是否支持 AccessibleComponent 接口。如果返回值不为 null，则该对象支持此接口。

@see Accessible
@see Accessible#getAccessibleContext
@see AccessibleContext
@see AccessibleContext#getAccessibleComponent

@version     1.7 10/05/99 14:00:28
@author	Peter Korn
@author	Hans Muller
@author      Willie Walker

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.accessibility.AccessibleComponent.getBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的背景色。

@return 如果支持的话，返回对象的背景色；否则返回 null
@see #setBackground

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.accessibility.AccessibleComponent.setBackground(Color c)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的背景色。

@param c 新的背景 Color
@see #setBackground

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.accessibility.AccessibleComponent.getForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的前景色。

@return 如果支持的话，返回对象的前景色；否则返回 null
@see #setForeground

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.accessibility.AccessibleComponent.setForeground(Color c)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的前景色。

@param c 新的前景 Color
@see #getForeground

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Cursor javax.accessibility.AccessibleComponent.getCursor()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的 Cursor。

@return 如果支持的话，返回对象的 Cursor；否则返回 null
@see #setCursor

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.accessibility.AccessibleComponent.setCursor(Cursor cursor)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的 Cursor。

@param cursor 对象的新 Cursor
@see #getCursor

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font javax.accessibility.AccessibleComponent.getFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的 Font。

@return 如果支持的话，返回对象的 Font；否则返回 null
@see #setFont

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.accessibility.AccessibleComponent.setFont(Font f)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的 Font。

@param f 对象的新 Font
@see #getFont

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FontMetrics javax.accessibility.AccessibleComponent.getFontMetrics(Font f)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的 FontMetrics。

@param f Font
@return 如果支持的话，返回对象的 FontMetrics；否则返回 null
@see #getFont

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.accessibility.AccessibleComponent.isEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定是否已启用该对象。启用的对象在其 AccessibleStateSet 中也将具有 AccessibleState.ENABLED 状态设置。

@return 如果已启用对象，则返回 true；否则返回 false
@see #setEnabled
@see AccessibleContext#getAccessibleStateSet
@see AccessibleState#ENABLED
@see AccessibleStateSet

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.accessibility.AccessibleComponent.setEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置对象的启用状态。

@param b 如果为 true，则启用此对象；否则禁用它
@see #isEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.accessibility.AccessibleComponent.isVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此对象是否可见。注：这意味着该对象多半是可见的；但是因为包含此对象的对象之一目前不可见，所以可能在屏幕上不显示它。要确定对象是否在屏幕上显示，需要使用 isShowing()。
<p>可见的对象在其 AccessibleStateSet 中也将具有 AccessibleState.VISIBLE 状态设置。

@return 如果对象可见，则返回 true；否则返回 false
@see #setVisible
@see AccessibleContext#getAccessibleStateSet
@see AccessibleState#VISIBLE
@see AccessibleStateSet

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.accessibility.AccessibleComponent.setVisible(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置对象的可见状态。

@param b 如果为 true，则显示此对象；否则隐藏它
@see #isVisible

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.accessibility.AccessibleComponent.isShowing()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定是否正显示对象。通过检查该对象和祖先的可见性可确定这一点。注：即使该对象被另一对象屏蔽（例如，它是下拉菜单的下级），仍然返回 true。

@return 如果正在显示对象，则返回 true；否则，返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.accessibility.AccessibleComponent.contains(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->

检查指定点是否位于此对象的边界内，其中该点的 X 坐标和 Y 坐标是相对于对象的坐标系统定义的。 

@param p 相对于对象的坐标系统的 Point
@return 如果对象包含 Point，则返回 true；否则返回 false
@see #getBounds

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point javax.accessibility.AccessibleComponent.getLocationOnScreen()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回对象在屏幕上的位置。

@return 返回对象在屏幕上的位置；如果此对象不在屏幕上，则返回 null
@see #getBounds
@see #getLocation

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point javax.accessibility.AccessibleComponent.getLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->

获得此对象相对于父对象的位置，返回值是一个点对象，它指定对象左上角在屏幕坐标空间内的位置。

@return Point 的实例，该点表示屏幕坐标空间中对象边界的左上角 ；如果此对象或其父级不在屏幕上，则返回 null
@see #getBounds
@see #getLocationOnScreen

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.accessibility.AccessibleComponent.setLocation(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置对象相对于父级的位置。
@param p 左上角的新位置
@see #getLocation

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.accessibility.AccessibleComponent.getBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->

获取 Rectangle 对象形式的此对象的边界。该边界指定此对象的宽、高，以及相对于父对象的位置。 

@return 返回指示此组件的边界的矩形；如果此对象不在屏幕上，则返回 null。
@see #contains

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.accessibility.AccessibleComponent.setBounds(Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置 Rectangle 对象形式的此对象的边界。该边界指定此对象的宽、高，以及相对于父对象的位置。
	
@param r 指示此组件边界的矩形
@see #getBounds

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.accessibility.AccessibleComponent.getSize()
<!-- END KEY -->
<!-- BEGIN DATA -->

以 Dimension 对象的形式返回此对象的大小。Dimension 对象的 height 字段包含此对象的高度，Dimension 对象的 width 字段包含此对象的宽度。 

@return 返回指示此组件大小的 Dimension 对象；如果此对象不在屏幕上，则返回 null
@see #setSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.accessibility.AccessibleComponent.setSize(Dimension d)
<!-- END KEY -->
<!-- BEGIN DATA -->

调整此对象，使其具有高度和宽度。
	
@param d  指定对象新大小的维数。
@see #getSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.accessibility.AccessibleComponent.getAccessibleAt(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回本地坐标 Point 包含的可访问子级（如果存在）。

@param p 相对于此对象坐标系统的 point。
@return 如果存在，则返回指定位置处的 Accessible；否则返回 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.accessibility.AccessibleComponent.isFocusTraversable()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象是否可以接受焦点。可以接受焦点的对象也将具有在其 AccessibleStateSet 中设置的 AccessibleState.FOCUSABLE 状态。

@return 如果对象可以接受焦点，则返回 true；否则返回 false
@see AccessibleContext#getAccessibleStateSet
@see AccessibleState#FOCUSABLE
@see AccessibleState#FOCUSED
@see AccessibleStateSet

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.accessibility.AccessibleComponent.requestFocus()
<!-- END KEY -->
<!-- BEGIN DATA -->
请求此对象的焦点。如果此对象不能接受焦点，则不执行任何操作。否则，对象将尝试接受焦点。
@see #isFocusTraversable

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.accessibility.AccessibleComponent.addFocusListener(FocusListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定的焦点侦听器，以接收来自此组件的焦点事件。

@param l 焦点侦听器
@see #removeFocusListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.accessibility.AccessibleComponent.removeFocusListener(FocusListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定的焦点侦听器，使其不再接收来自此组件的焦点事件。

@param l 焦点侦听器
@see #addFocusListener

<!-- END DATA -->
