<!-- BEGIN KEY -->
public class javax.accessibility.AccessibleRelation extends javax.accessibility.AccessibleBundle
<!-- END KEY -->
<!-- BEGIN DATA -->
<P>AccessibleRelation 类描述了实现 AccessibleRelation 的对象与一个或多个其他对象之间的关系。某个对象与其他对象所具有的实际关系被定义为 AccessibleRelationSet，它是由 AccessibleRelation 组成的集合。
<p>toDisplayString 方法允许从此类中定义的键的预定义 ResourceBundle 获得与语言环境无关的键的本地化字符串。
<p>此类中的常量存在一个公共对象职责的强类型的枚举。如果此类中没有足够的常量来描述对象的职责，则应从此类生成一个子类，此子类应以类似的方式提供常量。

@version     1.14 04/15/04
@author      Lynn Monsanto
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.LABEL_FOR
<!-- END KEY -->
<!-- BEGIN DATA -->
指示某个对象是一个或多个目标对象的标签。
 
@see #getTarget
@see #CONTROLLER_FOR
@see #CONTROLLED_BY
@see #LABELED_BY
@see #MEMBER_OF

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.LABELED_BY
<!-- END KEY -->
<!-- BEGIN DATA -->
指示一个或多个目标对象作为某个对象的标签。
 
@see #getTarget
@see #CONTROLLER_FOR
@see #CONTROLLED_BY
@see #LABEL_FOR
@see #MEMBER_OF

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.MEMBER_OF
<!-- END KEY -->
<!-- BEGIN DATA -->
指示某个对象是一个或多个目标对象集合的成员。
 
@see #getTarget
@see #CONTROLLER_FOR
@see #CONTROLLED_BY
@see #LABEL_FOR
@see #LABELED_BY

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.CONTROLLER_FOR
<!-- END KEY -->
<!-- BEGIN DATA -->
指示某个对象是一个或多个目标对象的控制器。
 
@see #getTarget
@see #CONTROLLED_BY
@see #LABEL_FOR
@see #LABELED_BY
@see #MEMBER_OF

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.CONTROLLED_BY
<!-- END KEY -->
<!-- BEGIN DATA -->
指示某个对象由一个或多个目标对象控制。
 
@see #getTarget
@see #CONTROLLER_FOR
@see #LABEL_FOR
@see #LABELED_BY
@see #MEMBER_OF

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.FLOWS_TO
<!-- END KEY -->
<!-- BEGIN DATA -->
指示某个对象与第二个对象在逻辑上是连续的，其中第二个对象在该对象后面出现。例如，一个文本段落到达一页的末尾，并继续在下页呈现，两页之间带有文本脚注和/或文本标题。此段落的两个部分是独立的文本元素，但因为第二个元素是第一个元素的继续而产生联系。换句话说，第一个元素&ldquo;流向&rdquo;第二个元素。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.FLOWS_FROM
<!-- END KEY -->
<!-- BEGIN DATA -->
指示某个对象与第二个对象在逻辑上是连续的，其中第二个对象出现在该对象前面。例如，一个文本段落到达一页的末尾，并继续在下页呈现，两页之间带有文本脚注和/或文本标题。此段落的两个部分是独立的文本元素，但因为第二个元素是第一个元素的继续而产生联系。换句话说，第一个元素从第二个元素&ldquo;流出&rdquo;。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.SUBWINDOW_OF
<!-- END KEY -->
<!-- BEGIN DATA -->
指示某个对象是一个或多个对象的子窗口。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.PARENT_WINDOW_OF
<!-- END KEY -->
<!-- BEGIN DATA -->
指示某个对象是一个或多个对象的父窗口。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.EMBEDS
<!-- END KEY -->
<!-- BEGIN DATA -->
指示某个对象具有一个或多个嵌入它的对象。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.EMBEDDED_BY
<!-- END KEY -->
<!-- BEGIN DATA -->
指示某个对象嵌入一个或多个对象。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.CHILD_NODE_OF
<!-- END KEY -->
<!-- BEGIN DATA -->
指示某个对象是一个或多个对象的子节点。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.LABEL_FOR_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->

标识某个标签的目标组已更改

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.LABELED_BY_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->

标识正在进行标签操作的对象已更改

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.MEMBER_OF_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->

标识组成员已更改。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.CONTROLLER_FOR_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->

标识目标对象的控制器已更改

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.CONTROLLED_BY_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->

标识正在进行控制操作的目标对象已更改

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.FLOWS_TO_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
指示两个对象之间的 FLOWS_TO 关系已更改。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.FLOWS_FROM_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
指示两个对象之间的 FLOWS_FROM 关系已更改。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.SUBWINDOW_OF_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
指示两个或多个对象之间的 SUBWINDOW_OF 关系已更改。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.PARENT_WINDOW_OF_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
指示两个或多个对象之间的 PARENT_WINDOW_OF 关系已更改。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.EMBEDS_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
指示两个或多个对象之间的 EMBEDS 关系已更改。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.EMBEDDED_BY_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
指示两个或多个对象之间的 EMBEDDED_BY 关系已更改。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.accessibility.AccessibleRelation.CHILD_NODE_OF_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
指示两个或多个对象之间的 CHILD_NODE_OF 关系已更改。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleRelation(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的与语言环境无关的键创建新的 AccessibleRelation。String 键应是针对关系的与语言环境无关的键。它不是用作实际的 String 显示给用户的。要获取本地化字符串，请使用 toDisplayString。

@param key 关系的与语言环境无关的名称。
@see AccessibleBundle#toDisplayString

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleRelation(String key, Object target)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的与语言环境无关的键创建新的 AccessibleRelation。String 键应是针对关系的与语言环境无关的键。它不是用作实际的 String 显示给用户的。要获取本地化字符串，请使用 toDisplayString。

@param key 关系的与语言环境无关的名称。
@param target 此关系的目标对象
@see AccessibleBundle#toDisplayString

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleRelation(String key, java.lang.Object[] target)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的与语言环境无关的键创建新的 AccessibleRelation。String 键应是针对关系的与语言环境无关的键。它不是用作实际的 String 显示给用户的。要获取本地化字符串，请使用 toDisplayString。

@param key 关系的与语言环境无关的名称。
@param target 此关系的目标对象（或多个目标对象）
@see AccessibleBundle#toDisplayString

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.accessibility.AccessibleRelation.getKey()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此关系的键

@return 此关系的键
 

@see #CONTROLLER_FOR
@see #CONTROLLED_BY
@see #LABEL_FOR
@see #LABELED_BY
@see #MEMBER_OF

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] javax.accessibility.AccessibleRelation.getTarget()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此关系的目标对象

@return 包含此关系的目标对象的数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.accessibility.AccessibleRelation.setTarget(Object target)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此关系的目标对象

@param target 此关系的目标对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.accessibility.AccessibleRelation.setTarget(java.lang.Object[] target)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此关系的目标对象

@param target 包含此关系的目标对象的数组

<!-- END DATA -->
