<!-- BEGIN KEY -->
javax.accessibility
<!-- END KEY -->
<!-- BEGIN DATA -->

定义了用户界面组件与提供对这些组件进行访问的辅助技术之间的协定。如果 Java 应用程序完全支持 Java Accessibility API，则它应该与屏幕读取器、屏幕放大器这样的辅助技术保持兼容和友好。使用完全支持 Java Accessibility API 的 Java 应用程序，将不再需要离屏模型的屏幕读取器 ，因为该 API 提供了离屏模型中通常所包含的所有信息。

<P>Java Accessibility API 包由 8 个 Java 编程语言接口和 6 个 Java 编程语言类组成。以下是对这些接口和类的描述。
<H3>
<A NAME="Accessible"></A><A HREF="Accessible.html">Interface Accessible</A></H3>
<A HREF="Accessible.html">Interface Accessible</A> 是 Java Accessibility API 的主接口。所有支持 Java Accessibility API 的组件都必须实现此接口。它包含单个方法 <TT>getAccessibleContext</TT>，此方法返回 <A HREF="#AccessibleContext">AccessibleContext</A> 类的一个实例。Sun 认为，如果 Java 应用程序要与辅助技术兼容，则对于作为该程序用户界面的一部分的每个对象来说，实现此接口是绝对的最低需求。
<H3>
<A NAME="AccessibleContext"></A><A HREF="AccessibleContext.html">Class AccessibleContext</A></H3>
<A HREF="AccessibleContext.html">AccessibleContext</A> 表示所有可访问对象所返回的最少信息，它是通过调用实现 <A HREF="#Accessible">Accessible</A> 接口的对象上的 <TT>getAccessibleContext</TT> 方法获得的。此信息包括对象的可访问名称、描述、<A HREF="#AccessibleRole">职责</A>和<A HREF="#AccessibleState">状态</A>，以及关于该对象的父对象和子对象的信息。此外，还包括对 JavaBeans <SUP><FONT SIZE=-2>TM</FONT></SUP> 属性更改的支持，从而当可访问的属性值发生更改时，辅助技术能够获悉。AccessibleContext 还包含用于获取更多关于组件的特定可访问信息的方法。如果组件支持它，则这些方法将返回实现以下一个或多个接口的对象：
<UL>
<LI>
<B><A HREF="#AccessibleAction">AccessibleAction</A></B> － 可以执行一个或多个动作的对象。此接口为辅助技术提供了标准机制，以确定这些动作并通知对象执行它们。当调用 AccessibleContext 上的 <TT>getAccessibleAction</TT> 方法时，任何可以操作的对象都应返回实现此接口的对象。</LI>

<LI>
<B><A HREF="#AccessibleComponent">AccessibleComponent</A></B> － 具有图形表示形式的对象。此接口为辅助技术提供了标准机制，以确定和设置对象的图形表示形式。当调用 AccessibleContext 上的 <TT>getAccessibleComponent</TT> 方法时，任何在屏幕上呈现的对象都应返回实现此接口的对象。</LI>

<LI>
<B><A HREF="#AccessibleSelection">AccessibleSelection</A></B> － 允许选择其子对象的对象。此接口为辅助技术提供了标准机制，以确定当前选定的子对象，并修改选择设置。当调用 AccessibleContext 上的 <TT>getAccessibleSelection</TT> 方法时，任何具有可选子对象的对象都应返回实现此接口的对象。</LI>

<LI>
<B><A HREF="#AccessibleText">AccessibleText</A></B> － 在显示器上显示可编辑文本信息的对象。此接口为辅助技术提供了标准机制，用于通过文本的内容、属性和空间位置来访问该文本。当调用 AccessibleContext 上的 <TT>getAccessibleText</TT> 方法时，任何包含可编辑文本的对象都应返回实现此接口的对象。</LI>

<LI>
<B><A HREF="#AccessibleHypertext">AccessibleHypertext</A></B> － 在显示器上显示超文本信息的对象。此接口为辅助技术提供了标准机制，用于通过超文本的内容、属性和空间位置来访问该超文本。当调用 AccessibleContext 上的 <TT>getAccessibleText</TT> 方法时，任何包含超文本的对象都应返回实现此接口的对象。</LI>

<LI>
<B><A HREF="#AccessibleValue">AccessibleValue</A></B> － 支持数字值的对象。此接口为辅助技术提供了标准机制，以确定和设置对象的当前值，以及最小值和最大值。当调用 AccessibleContext 上的 <TT>getAccessibleValue</TT> 方法时，任何支持数字值的对象都应返回实现此接口的对象。</LI>
</UL>

<H3>
<A NAME="AccessibleRole"></A><A HREF="AccessibleRole.html">Class AccessibleRole</A></H3>
此类封装了 Accessible 对象职责，该类通过调用 <A HREF="#AccessibleContext">AccessibleContext</A> 上的 <TT>getAccessibleRole</TT> 方法获得。可访问的职责包括 &ldquo;复选框&rdquo;、&ldquo;菜单项&rdquo;、&ldquo;面板&rdquo;等等。这些职责由此类中的常量（如 <TT>AccessibleRole.CHECK_BOX、AccessibleRole.MENU_ITEM</TT> 和 <TT>AccessibleRole.PANEL</TT>）来标识。此类中的常量存在一个公共对象职责的强类型的枚举。我们有意忽略了此类的公共构造方法，应用程序应使用此类的一个常量。虽然此类预定义了一个大的标准职责列表，但它是可扩展的，这样可以在将来添加其他程序员所定义的职责，而无需修改基类。

<H3>
<A NAME="AccessibleState"></A><A HREF="AccessibleState.html">Class AccessibleState</A></H3>
此类封装了 Accessible 对象的特殊状态。可访问的状态包括 &quot;Armed&quot;、&quot;Busy&quot;、&quot;Checked&quot;、&quot;Focused&quot;等等。这些职责由此类的常量（如 <TT>AccessibleState.ARMED、AccessibleState.BUSY、AccessibleState.CHECKED</TT> 和 <TT>AccessibleState.FOCUSED</TT>）来标识。Accessible 对象的所有状态的集合称为 <A HREF="#AccessibleStateSet">AccessibleStateSet</A>，它可以通过调用 <A HREF="#AccessibleContext">AccessibleContext</A> 上的 <TT>getAccessibleStateSet</TT> 方法获得。

<P>此类中的常量存在一个公共对象职责的强类型的枚举。我们有意忽略了此类的公共构造方法，应用程序应使用此类的一个常量。虽然此类预定义了一个大的标准职责列表，但它是可扩展的，这样可以在将来添加其他程序员所定义的职责，而无需修改基类。

<H3>
<A NAME="AccessibleStateSet"></A><A HREF="AccessibleStateSet.html">Class AccessibleStateSet</A></H3>
此类封装了 Accessible 对象的状态集合，此类通过调用 <A HREF="#AccessibleContext">AccessibleContext</A> 上的 <TT>getAccessibleStateSet</TT> 方法获得。因为一个对象可能有多个状态（例如，它可能同时处于 &quot;Checked&quot; 和 &quot;Focused&quot; 状态），因此此类需要封装这些状态的集合。此类中的方法可以在状态集上检索单个 <A HREF="#AccessibleState">AccessibleStates</A> 。
<H3>
<A NAME="AccessibleBundle"></A><A HREF="AccessibleBundle.html">Class AccessibleBundle</A></H3>
此类用于维护强类型枚举。它是 <A HREF="#AccessibleRole">AccessibleRole</A> 和 <A HREF="#AccessibleState">AccessibleState</A> 类的超类。程序员一般不与此类直接进行交互，而是使用 <A HREF="#AccessibleRole">AccessibleRole</A> 和 <A HREF="#AccessibleState">AccessibleState</A> 类。

<H3>
<A NAME="AccessibleAction"></A><A HREF="AccessibleAction.html">Interface AccessibleAction</A></H3>
任何能够执行一个或多个动作的对象都应支持 <A HREF="AccessibleAction.html">AccessibleAction</A> 接口。此接口为辅助技术提供了标准机制，以确定这些动作并通知对象执行它们。任何可以操作的对象都应支持此接口。

<P>应用程序通过先获取某个对象的 <A HREF="#AccessibleContext">AccessibleContext</A>（参见 <A HREF="#Accessible">Accessible</A>），然后调用 <A HREF="#AccessibleContext">AccessibleContext</A> 上的 <TT>getAccessibleAction</TT> 方法，能够确定该对象是否支持 AccessibleAction 接口。如果返回值不为 null，则该对象支持此接口。
<H3>
<A NAME="AccessibleComponent"></A><A HREF="AccessibleComponent.html">Interface AccessibleComponent</A></H3>
任何在屏幕上呈现的对象都应支持 <A HREF="AccessibleComponent.html">AccessibleComponent</A> 接口。此接口为辅助技术提供了标准机制，以确定和设置对象的图形表示形式。

<P>应用程序通过先调用某个对象的 <A HREF="#AccessibleContext">AccessibleContext</A>（参见 <A HREF="#Accessible">Accessible</A>），然后调用 <A HREF="#AccessibleContext">AccessibleContext</A> 上的 <TT>getAccessibleComponent</TT> 方法，能够确定该对象是否支持 AccessibleComponent 接口。如果返回值不为 null，则该对象支持此接口。
<H3>
<A NAME="AccessibleSelection"></A><A HREF="AccessibleSelection.html">Interface AccessibleSelection</A></H3>
<A HREF="AccessibleSelection.html">AccessibleSelection</A> 接口为辅助技术提供了标准机制，以确定当前选定了哪些子对象，并修改选择设置。任何具有可选子对象的对象都应支持 AccessibleSelection 接口。

<P>应用程序通过先获取某个对象的 <A HREF="#AccessibleContext">AccessibleContext</A>（参见 <A HREF="#Accessible">Accessible</A>），然后调用 <A HREF="#AccessibleContext">AccessibleContext</A> 上的 <TT>getAccessibleSelection</TT> 方法，能够确定该对象是否支持 AccessibleSelection 接口。如果返回值不为 null，则该对象支持此接口。
<H3>
<A NAME="AccessibleText"></A><A HREF="AccessibleText.html">Interface AccessibleText</A></H3>
<A HREF="AccessibleText.html">AccessibleText</A> 接口是针对生成丰富的、可编辑的文本 Accessible 的协定。并不是屏幕上显示的所有文本都是富文本和可编辑的（例如对于按钮、标签和菜单中所包含的文本，用户就不能对其进行操作）。但是，如果包含可编辑文本的对象要与辅助技术进行互操作，则它们必须实现 AccessibleText 接口。

<P>此接口支持在像素坐标和给定像素坐标处的文本之间进行转换，以及检索文本中给定位置处、给定位置前或给定位置后的字母、单词和句子。此接口支持对文本中给定位置处的字符属性（字体、字体大小、样式，等等）进行检索，以及获得选中的文本（如果有）、文本长度和文本插入符位置。

<P>应用程序通过先获取某个对象的 <A HREF="#AccessibleContext">AccessibleContext</A>（参见 <A HREF="#Accessible">Accessible</A>），然后调用 <A HREF="#AccessibleContext">AccessibleContext</A> 的 <TT>getAccessibleText</TT> 方法，能够确定该对象是否支持 AccessibleText 接口。如果返回值不为 null，则该对象支持此接口。
<H3><A NAME="AccessibleHypertext"></A> <A HREF="AccessibleHypertext.html">Interface AccessibleHypertext</A></H3>
任何在显示器上显示超文本信息的对象都应支持 <A HREF="AccessibleHypertext.html">AccessibleHypertext</A> 接口。此接口为辅助技术提供了标准机制，用于通过文本的内容、属性和空间位置来访问该文本。它还提供了操作<A HREF="#AccessibleHyperlink">超链接</A>的标准机制。应用程序通过先获取某个对象的 <A HREF="#AccessibleContext">AccessibleContext</A>（参见 <A HREF="#Accessible">Accessible</A>），然后调用 <A HREF="#AccessibleContext">AccessibleContext</A> 的 AccessibleContext.getAccessibleText() 方法，能够确定该对象是否支持 AccessibleHypertext 接口。如果返回值是一个扩展了 AccessibleHypertext 的类，则该对象支持 AccessibleHypertext。
<H3>
<A NAME="AccessibleHyperlink"></A><A HREF="AccessibleHyperlink.html">Interface AccessibleHyperlink</A></H3>
超链接对象应支持 <A HREF="AccessibleHyperlink.html">AccessibleHyperlink</A> 接口。通过调用 <A HREF="#AccessibleHypertext">AccessibleHypertext</A> 对象上的 getLink 方法将返回实现此接口的对象。
<H3>
<A NAME="AccessibleValue"></A><A HREF="AccessibleValue.html">Interface AccessibleValue</A></H3>
任何支持数字值的对象（例如滚动条）都应支持 <A HREF="AccessibleValue.html">AccessibleValue</A> 接口。此接口为辅助技术提供了标准机制，以确定和设置数字值，以及获取最小值和最大值。

<P>应用程序通过先获取某对象的 <A HREF="#AccessibleContext">AccessibleContext</A>（参见 <A HREF="#Accessible">Accessible</A>），然后调用 <A HREF="#AccessibleContext">AccessibleContext</A> 的 <TT>getAccessibleValue</TT> 方法，能够确定该对象是否支持 AccessibleValue 接口。如果返回值不为 null，则该对象支持此接口。

@since 1.2

<!-- END DATA -->
