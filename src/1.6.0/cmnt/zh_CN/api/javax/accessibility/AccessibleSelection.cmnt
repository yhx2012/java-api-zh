<!-- BEGIN KEY -->
public interface javax.accessibility.AccessibleSelection
<!-- END KEY -->
<!-- BEGIN DATA -->
此 AccessibleSelection 接口提供了辅助技术的标准机制，以确定当前选定了哪些子级，以及修改选项集合。任何具有可以选择的子级的对象都应支持 AccessibleSelection 接口。应用程序通过先获取某个对象的 AccessibleContext（参见 {@link Accessible}），然后调用 {@link AccessibleContext#getAccessibleSelection} 方法，能够确定该对象是否支持 AccessibleSelection 接口。如果返回值不为 null，则该对象支持此接口。

@see Accessible
@see Accessible#getAccessibleContext
@see AccessibleContext
@see AccessibleContext#getAccessibleSelection

@version     1.7 08/26/98 21:14:11
@author	Peter Korn
@author      Hans Muller
@author      Willie Walker

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.accessibility.AccessibleSelection.getAccessibleSelectionCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前选中的 Accessible 子级数。如果没有选定子对象，那么返回的值将为 0。

@return 当前选定的项数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.accessibility.AccessibleSelection.getAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示指定的所选对象子级的 Accessible。如果没有选择，或者所选子级数少于传入的整数，则返回值为 null。
<p>注意，该索引表示第 i 个选定的子对象，它不同于第 i 个子对象。

@param i 所选子对象的从零开始的索引
@return 第 i 个选定的子对象
@see #getAccessibleSelectionCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.accessibility.AccessibleSelection.isAccessibleChildSelected(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此对象的当前子级是否已选中。

@return 如果此对象的当前子级已选中，则返回 true；否则返回 false。
@param i 此 Accessible 对象的子对象的从零开始的索引。
@see AccessibleContext#getAccessibleChild

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.accessibility.AccessibleSelection.addAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
将对象的指定 Accessible 子级添加到该对象的选项中。如果该对象支持多项选择，则将指定的子对象添加到任何现有选项中，否则，它会替换该对象中的任何现有选项。如果指定的子对象已被选定，则此方法无效。

@param i 子对象的从零开始的索引
@see AccessibleContext#getAccessibleChild

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.accessibility.AccessibleSelection.removeAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
从对象的选项中移除该对象的指定子对象。如果当前没有选择指定的项，则此方法无效。

@param i 子对象的从零开始的索引
@see AccessibleContext#getAccessibleChild

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.accessibility.AccessibleSelection.clearAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
清除对象中的选项，使该对象中没有选中的子对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.accessibility.AccessibleSelection.selectAllAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果该对象支持多项选择，则会导致该对象的每个子对象都被选中。

<!-- END DATA -->
