<!-- BEGIN KEY -->
public interface javax.net.ssl.SSLSessionContext
<!-- END KEY -->
<!-- BEGIN DATA -->

<code>SSLSessionContext</code> 表示与单个实体关联的 <code>SSLSession</code>。例如，它可以与同时参与多个会话的服务器或客户端相关联。
 <p>
不是所有的环境都包含会话上下文。
 <p>
下面是影响会话的存储方式的 <code>SSLSessionContext</code> 参数：
 <UL>
<LI>可以将会话设置为经过指定的时间限制后终止。
<LI>可以限制可以存储在上下文中的会话数。
 </UL>
可以根据会话的 id 获取会话，<code>SSLSessionContext</code> 中的所有会话 id 可以被列入表中。

@see SSLSession

@since 1.4
@author Nathan Abramson
@author David Brownell
@version 1.13

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.SSLSession javax.net.ssl.SSLSessionContext.getSession(byte[] sessionId)
<!-- END KEY -->
<!-- BEGIN DATA -->

返回绑定到指定会话 id 的 <code>SSLSession</code>。

@param sessionId Session 标识符
@return <code>SSLSession</code>；如果指定的会话 id 没有指向有效的 SLSession，则返回 null。
@throws NullPointerException 如果 <code>sessionId</code> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration javax.net.ssl.SSLSessionContext.getIds()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回在此 <code>SSLSessionContext</code> 下分组的所有会话 id 的 Enumeration。

@return 所有 Session id 枚举。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.net.ssl.SSLSessionContext.setSessionTimeout(int seconds) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->

设置在此 <code>SSLSessionContext</code> 下分组的 <code>SSLSession</code> 对象的超时值限制。
 <p>
如果把超时值限制设置为't' 秒，则在会话创建 't' 秒后超过超时值限制。当已经超过会话的超时值限制时，<code>SSLSession</code> 对象将变成无效的并且后来的连接不能恢复和重新加入此会话。当此 <code>SSLSessionContext</code> 的超时值改变时，将立即检查会话是否超过超时值。

@param seconds 以秒为单位的新的会话超时值；零表示没有限制。

@exception IllegalArgumentException 如果指定的超时值 &lt; 0。
@see #getSessionTimeout

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.net.ssl.SSLSessionContext.getSessionTimeout()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回在此 <code>SSLSessionContext</code> 下分组的 <code>SSLSession</code> 对象的超时值限制。
 <p>
如果把超时值限制设置为't' 秒，则在会话创建 't' 秒后超过超时值限制。当已经超过会话的超时值限制时，<code>SSLSession</code> 对象将变成无效的并且后来的连接不能恢复和重新加入此会话。当此 <code>SSLSessionContext</code> 的超时值改变时，将立即检查会话是否超过超时值。

@return 以秒为单位的会话超时值；零表示没有限制。
@see #setSessionTimeout

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.net.ssl.SSLSessionContext.setSessionCacheSize(int size) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->

设置用来存储在此 <code>SSLSessionContext</code> 下分组的 <code>SSLSession</code> 对象的缓存大小。

@param size 新的会话缓存大小限制；零表示没有限制。
@exception IllegalArgumentException 如果指定的大小 &lt; 0。
@see #getSessionCacheSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.net.ssl.SSLSessionContext.getSessionCacheSize()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回用来存储在此 <code>SSLSessionContext</code> 下分组的 <code>SSLSession</code> 对象的缓存大小。

@return 会话缓存大小；零表示没有大小限制。
@see #setSessionCacheSize

<!-- END DATA -->
