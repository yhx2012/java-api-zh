<!-- BEGIN KEY -->
public abstract class javax.net.ssl.SSLEngine extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

此类允许使用安全套接字层 (SSL) 或 <A HREF="http://www.ietf.org/rfc/rfc2246.txt">IETF RFC 2246 &quot;Transport Layer Security&quot; (TLS)</A> 协议进行安全通信，但它与传输无关。
 <P>
安全的通信模式包括： <UL>

	<LI> <em>完整性保护</em>。SSL/TLS 保护报文不被主动的窃听者修改。

	<LI> <em>验证</em>。在多数模式下，SSL/TLS 提供对等验证。服务器通常要进行验证，客户端也可在服务器的请求下进行验证。

	<LI> <em>机密性（私有性保护）</em>。在多数模式下，SSL/TLS 加密在客户端和服务器之间发送的数据。这保护了数据的机密性，所以被动的窃听者不能看到各种类型的敏感数据，如财务信息或个人信息。

	</UL>

这些类型的保护由一个&ldquo;密码套件&rdquo;指定，&ldquo;密码套件&rdquo;是由给定的 SSL 连接使用的加密算法组合。在协商过程中，两个端点必须对在双方的环境中都可用的密码套件达成一致。如果不存在这种公共的套件，就不能建立 SSL 连接，也不能交换数据。
 <P>
通过称为&ldquo;握手&rdquo;的协商过程来建立所用的密码套件。此过程的目的是创建或重新加入一个&ldquo;会话&rdquo;，&ldquo;会话&rdquo;可以保护很多会话过程中的连接。握手结束后，可以使用 {@link #getSession()} 方法访问会话的属性。
 <P>
<code>SSLSocket</code> 类提供很多相同的安全功能，但是所有的入站和出站数据都是使用底层 {@link java.net.Socket Socket} 自动地传输，底层 Socket 设计为使用阻塞模型。虽然这适合于很多应用程序，但是此模型却不提供大型服务器所需的可伸缩性。
 <P>
<code>SSLEngine</code> 的主要特征是它在入站和出站的字节流上操作，与传输机制无关。安排到同位体可靠的 I/O 传输是 <code>SSLEngine</code> 用户的职责。通过从 I/O 传输机制中分离出 SSL/TLS 抽象，<code>SSLEngine</code> 可以被用于各种 I/O 类型，例如 {@link java.nio.channels.spi.AbstractSelectableChannel#configureBlocking(boolean) non-blocking I/O (polling)}、{@link java.nio.channels.Selector selectable non-blocking I/O}、 {@link java.net.Socket Socket} 和传统的 Input/OutputStreams、本地的 {@link java.nio.ByteBuffer ByteBuffers} 或字节数组、<A
 HREF="http://www.jcp.org/en/jsr/detail?id=203">未来的异步 I/O 模型</A>等等。
 <P>
从较高的层次上看，<code>SSLEngine</code> 表示为如下：

 <pre>
                   app data

                |           ^
                |     |     |
                v     |     |
           +----+-----|-----+----+
           |          |          |
           |       SSL|Engine    |
   wrap()  |          |          |  unwrap()
           | OUTBOUND | INBOUND  |
           |          |          |
           +----+-----|-----+----+
                |     |     ^
                |     |     |
                v           |

                   net data
 </pre>
应用程序数据（也称为纯文本或明文）是应用程序生成或使用的数据。它的对应物是网络数据，它由握手和/或密文（加密的）数据组成，并且注定要通过 I/O 机制传输。入站数据指的是从同位体接收的数据，出站数据是去往同位体的数据。
 <P>
（在 <code>SSLEngine</code> 上下文中，术语&ldquo;握手数据&rdquo;的意思是所有用来建立和控制安全连接的已交换数据。握手数据包括 SSL/TLS 消息 &quot;alert&quot;、&quot;change_cipher_spec&quot; 和 &quot;handshake。&quot;）
 <P>
<code>SSLEngine</code> 有五种不同的阶段。

 <OL>
<li> 创建 - 已经创建和初始化 <code>SSLEngine</code>，但尚未被使用。在此阶段，应用程序可以设置任何特定于 <code>SSLEngine</code> 的设置（启用密码套件、<code>SSLEngine</code> 应该以客户端还是服务器模式握手等等）。一旦握手开始，任何新的设置（除了客户端/服务器模式，见下文）将在下一次握手时才被使用。

<li> 初始握手 - 初始握手是两个同位体交换通信参数，直到建立 SSLSession 为止的过程。在此阶段不能发送应用程序数据。

<li> 应用程序数据 - 一旦通信参数建立起来且握手完成，就可以通过 <code>SSLEngine</code> 传输应用程序数据。出站的应用程序报文被加密并进行完整性保护，入站的报文进行相反的过程。

<li>  重新握手 - 在应用程序数据阶段的任何时间，每一方都可以请求重新协商会话。新的握手数据可以混入到应用程序数据中。在开始重新握手阶段之前，应用程序可以重置 SSL/TLS 通信参数，例如已启用的密码套件列表和是否使用客户端验证，但是不能更改客户端/服务器模式。如前所述，一旦握手开始，任何新的 <code>SSLEngine</code> 配置设置都将在下一次握手时才被使用。

<li>  关闭 - 当不再需要连接时，应用程序应该关闭 <code>SSLEngine</code>，并且也应该在关闭底层传输机制之前发送/接收所有剩余的报文到同位体。一旦引擎关闭，它就是不可重用的：必须创建一个新的 <code>SSLEngine</code>。
 </OL>
根据已初始化的 <code>SSLContext</code> 来调用 {@link SSLContext#createSSLEngine()} 即可创建 <code>SSLEngine</code>。在第一次调用 <code>wrap()</code>、<code>unwrap()</code> 或 <code>beginHandshake()</code> 之前应该设置所有的配置参数。这些方法都能触发初始握手。
 <P>
分别对出站或入站数据调用 {@link #wrap(ByteBuffer, ByteBuffer) wrap()} 或 {@link #unwrap(ByteBuffer, ByteBuffer) unwrap()} 可使数据通过引擎。根据 <code>SSLEngine</code> 的状态，对 <code>wrap()</code> 的调用可能使用源缓冲区的应用程序数据，并且可能在目标缓冲区内生成网络数据。出站数据可以包含应用程序和/或握手数据。对 <code>unwrap()</code> 的调用将检查源缓冲区，如果数据是握手信息，则可能提前握手；如果数据是应用程序数据，则将其放入目标缓冲区中。底层 SSL/TLS 算法的状态将决定何时使用和生成数据。
 <P>
调用 <code>wrap()</code> 和 <code>unwrap()</code> 返回 <code>SSLEngineResult</code>，它指示操作的状态以及（可选的）如何与引擎交互以取得进展。
 <P>
<code>SSLEngine</code> 只是生成/使用完整的 SSL/TLS 包，它不在 <code>wrap()/unwrap()</code> 的调用之间内部存储应用程序数据。因此输入和输出 <code>ByteBuffer</code> 必须设为合适的大小以便容纳可能生成的最多记录。要确定合适的缓冲区大小，应该调用 {@link SSLSession#getPacketBufferSize()} 和 {@link SSLSession#getApplicationBufferSize()}。通常无需考虑出站应用程序数据缓冲区的大小。如果缓冲区的状况不允许正确地使用/生成数据，则应用程序必须加以确定（通过 {@link SSLEngineResult}）并纠正问题，然后再尝试调用一次。
 <P>
例如，如果引擎确定没有足够的目标缓冲区空间可用，则 <code>unwrap()</code> 将返回 {@link SSLEngineResult.Status#BUFFER_OVERFLOW} 结果。应用程序应该调用 {@link SSLSession#getApplicationBufferSize()} 并将该值与目标缓冲区中的可用空间进行比较，如有必要，可以扩大该缓冲区。类似地，如果 <code>unwrap()</code> 返回 {@link SSLEngineResult.Status#BUFFER_UNDERFLOW}，则应用程序应调用 {@link SSLSession#getPacketBufferSize()} 以确保源缓冲区有足够的空间来容纳记录（如有必要，可以扩大该缓冲区），然后获得更多的入站数据。

 <pre>
   SSLEngineResult r = engine.unwrap(src, dst);
   switch (r.getStatus()) {
   BUFFER_OVERFLOW:
       // Could attempt to drain the dst buffer of any already obtained
       // data, but we'll just increase it to the size needed.
       int appSize = engine.getSession().getApplicationBufferSize();
       ByteBuffer b = ByteBuffer.allocate(appSize + dst.position());
       dst.flip();
       b.put(dst);
       dst = b;
       // retry the operation.
       break;
   BUFFER_UNDERFLOW:
       int netSize = engine.getSession().getPacketBufferSize();
       // Resize buffer if needed.
       if (netSize > dst.capacity()) {
           ByteBuffer b = ByteBuffer.allocate(netSize);
           src.flip();
           b.put(src);
           src = b;
       }
       // Obtain more inbound network data for src,
       // then retry the operation.
       break;
   // other cases: CLOSED, OK.
   }
 </pre>

 <P>
与 <code>SSLSocket</code> 不同，SSLEngine 的所有方法都是非阻塞的。<code>SSLEngine</code> 实现所需的任务结果可能需要经过很长的时间才能获得，甚至可能被阻塞。例如，TrustManager 可能需要连接到远程的证书验证服务，或者 KeyManager 可能需要提示用户来确定将哪个证书用作客户端验证部分。另外，创建加密的签名和验证它们可能很慢，就好像阻塞一样。
 <P>
对于任何可能阻塞的操作，<code>SSLEngine</code> 将创建 {@link java.lang.Runnable} 委托任务。当 <code>SSLEngineResult</code> 指示需要一个委托任务结果时，应用程序必须调用 {@link #getDelegatedTask()} 来获取一个未执行的委托任务并调用其 {@link java.lang.Runnable#run() run()} 方法（根据计算策略的不同，可能要使用不同的线程）。应用程序应该继续获取委托任务，直到没有为止，然后再尝试执行最初的操作。
 <P>
在通信会话的结尾，应用程序应该正确地关闭 SSL/TLS 链接。SSL/TLS 协议有关闭握手报文，这些报文应该在释放 <code>SSLEngine</code> 并关闭底层传输机制之前传送到同位体。通过以下某个方法可发起关闭：SSLException、入站的关闭握手报文或某种 close 方法。在所有情况下，关闭握手报文由引擎生成，在 <code>SSLEngineResult</code> 的状态返回 &quot;CLOSED&quot;，或者 {@link #isOutboundDone()} 返回 true 之前应该重复调用 <code>wrap()</code>。从 <code>wrap()</code> 方法获得的所有数据都应该发送到同位体。
 <P>
使用 {@link #closeOutbound()} 通知引擎该应用程序将不再发送任何其他数据了。
 <P>
同位体通过发送它自己的关闭握手报文来通知它的关闭意图。在此报文被本地 <code>SSLEngine</code> 的 <code>unwrap()</code> 调用接收和处理后，应用程序可检测关闭，方法是调用 <code>unwrap()</code> 并寻找带有状态 &quot;CLOSED&quot; 的 <code>SSLEngineResult</code>，或者是 {@link #isInboundDone()} 返回 true。如果由于某些原因使同位体关闭通信链接但没有发送正确的 SSL/TLS 关闭报文，则应用程序可以检测流的末尾并且能够通过 {@link #closeInbound()} 来通知引擎没有更多的入站报文需要处理。某些应用程序可能选择要求同位体传送有序的关闭报文，在这种情况下，它们能够检查出关闭是由握手报文生成的，而不是由流的末尾这种情况引起的。
 <P>
有两组密码套件是您在管理密码套件时需要知道的：

 <UL>
	<LI> <em>支持的</em>密码套件：SSL 实现支持的所有套件。使用 {@link #getSupportedCipherSuites()} 来报告此列表。

	<LI> <em>启用的</em>密码套件，它可少于完整的支持套件集。使用 {@link #setEnabledCipherSuites(String [])} 方法设置此组套件，使用 {@link #getEnabledCipherSuites()} 方法查询它们。最初，在一个新引擎上启用默认的密码套件集，表示最低的建议配置。
 </UL>

实现默认要求，默认只启用那些可对服务器进行验证并提供机密性的密码套件。只有双方明确同意可进行无需验证和/或非私有的（未加密的）通信时才选择这种密码套件。
 <P>
每个 SSL/TLS 连接都必须有一个客户端和一个服务器，因此每一端必须决定担任哪种角色。这种选择决定了谁来开始握手过程以及每一方应该发送哪种类型的报文。方法 {@link #setUseClientMode(boolean)} 可配置模式。一旦初始握手开始，<code>SSLEngine</code> 就不能在客户端和服务器模式间转换，甚至在执行重新协商时也不能。
 <P>
应用程序可能选择在不同的线程中处理委托任务。当创建一个 <code>SSLEngine</code> 时，当前的 {@link java.security.AccessControlContext} 被保存。所有以后的委托任务都将使用此上下文来处理：也就是说，所有的访问控制决定都使用创建引擎时所捕获的上下文来做出。
 <P>
 <HR>

<B>并发性要点</B>：下面是需要知道的两种并发性问题：

 <OL>
	<li><code>wrap()</code> 和 <code>unwrap()</code> 方法可以互相并发执行。

	<li> SSL/TLS 协议使用有序的包。应用程序必须小心保证生成的包按顺序传递。如果包无序到达，则可能出现不可预料的或灾难性的结果。
 <P>
例如：
 <P>
	<pre>
		synchronized (outboundLock) {
		    sslEngine.wrap(src, dst);
		    outboundQueue.put(dst);
		}
	</pre>

	做为必然的结果，两个线程必须不能试图并发地调用相同的方法（<code>wrap()</code> 或 <code>unwrap()</code>），因为没有方法保证最后包的排序。
 </OL>

@see SSLContext
@see SSLSocket
@see SSLServerSocket
@see SSLSession
@see java.net.Socket

@since 1.5
@version 1.14
@author Brad R. Wetmore

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.net.ssl.SSLEngine()
<!-- END KEY -->
<!-- BEGIN DATA -->

<code>SSLEngine</code> 的构造方法，该构造方法不为内部会话重用策略提供提示。

@see	SSLContext#createSSLEngine()
@see	SSLSessionContext

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.net.ssl.SSLEngine(String peerHost, int peerPort)
<!-- END KEY -->
<!-- BEGIN DATA -->

<code>SSLEngine</code> 的构造方法。
 <P>
<code>SSLEngine</code> 实现可以使用 <code>peerHost</code> 和 <code>peerPort</code> 参数作为其内部会话重用策略的提示。
 <P>
某些密码套件（例如 Kerberos）需要远程主机名信息。为了使用 Kerberos，此类的实现应该使用这种构造方法。
 <P>
该参数不由 <code>SSLEngine</code> 进行验证。

@param	peerHost 同位体主机的名称
@param	peerPort 同位体的端口号
@see	SSLContext#createSSLEngine(String, int)
@see	SSLSessionContext

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.net.ssl.SSLEngine.getPeerHost()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回同位体的主机名。
 <P>
注意，该值未经验证，不应该依赖它。

@return	同位体的主机名；如果没有可供使用的主机名，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.net.ssl.SSLEngine.getPeerPort()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回同位体的端口号。
 <P>
注意，该值未经验证，不应该依赖它。

@return	同位体的端口号；如果没有可供使用的端口号，则返回 -1。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.SSLEngineResult javax.net.ssl.SSLEngine.wrap(ByteBuffer src, ByteBuffer dst) throws javax.net.ssl.SSLException
<!-- END KEY -->
<!-- BEGIN DATA -->

试图把缓冲区的纯文本应用程序数据编码成 SSL/TLS 网络数据。
 <P>
调用此方法与调用下面的方法产生的行为完全相同：
 <blockquote><pre>
 {@link #wrap(ByteBuffer [], int, int, ByteBuffer)
     engine.wrap(new ByteBuffer [] { src }, 0, 1, dst);}
 </pre></blockquote>

@param src 包含出站应用程序数据的 <code>ByteBuffer</code>
@param dst 保存出站网络数据的 <code>ByteBuffer</code>
@return 描述此次操作结果的 <code>SSLEngineResult</code>。
@throws SSLException 如果处理数据时遇到的问题导致 <code>SSLEngine</code> 中止。关于引擎关闭的更多信息，请参见该类的描述。
@throws	ReadOnlyBufferException 如果 <code>dst</code> 缓冲区是只读的。
@throws	IllegalArgumentException 如果 <code>src</code> 或 <code>dst</code> 为 null。
@throws	IllegalStateException 如果没有设置客户端/服务器模式。
@see	#wrap(ByteBuffer [], int, int, ByteBuffer)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.SSLEngineResult javax.net.ssl.SSLEngine.wrap(java.nio.ByteBuffer[] srcs, ByteBuffer dst) throws javax.net.ssl.SSLException
<!-- END KEY -->
<!-- BEGIN DATA -->

尝试把数据缓冲区序列中的纯文本字节编码成 SSL/TLS 网络数据。
 <P>
调用此方法与调用下面的方法产生的行为完全相同：
 <blockquote><pre>
 {@link #wrap(ByteBuffer [], int, int, ByteBuffer)
     engine.wrap(srcs, 0, srcs.length, dst);}
 </pre></blockquote>

@param srcs 包含出站应用程序数据的 <code>ByteBuffers</code> 数组
@param dst 保存出站网络数据的 <code>ByteBuffer</code>
@return 描述此次操作结果的 <code>SSLEngineResult</code>。
@throws SSLException 如果处理数据时遇到的问题导致 <code>SSLEngine</code> 中止。关于引擎关闭的更多信息，请参见该类的描述。
@throws	ReadOnlyBufferException 如果 <code>dst</code> 缓冲区是只读的。
@throws	IllegalArgumentException 如果 <code>srcs</code> 或 <code>dst</code> 为 null，或者 <code>srcs</code> 中的任何元素为 null。
@throws	IllegalStateException 如果没有设置客户端/服务器模式。
@see	#wrap(ByteBuffer [], int, int, ByteBuffer)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.net.ssl.SSLEngineResult javax.net.ssl.SSLEngine.wrap(java.nio.ByteBuffer[] srcs, int offset, int length, ByteBuffer dst) throws javax.net.ssl.SSLException
<!-- END KEY -->
<!-- BEGIN DATA -->

尝试把数据缓冲区字序列中的纯文本字节编码成 SSL/TLS 网络数据。此<i>&ldquo;集中&rdquo;</i> 操作可在单个调用中对来自一个或多个给定缓冲区序列的字节序列进行编码。集中包装通常在实现网络协议或文件格式时很有用，例如将数据分组放入段中（这些段由一个或多个长度固定的头，后跟长度可变的正文组成）。关于集中的更多信息，请参见 {@link java.nio.channels.GatheringByteChannel}，有关子序列行为的更多信息，请参见 {@link java.nio.channels.GatheringByteChannel#write(ByteBuffer[], int, int)}。
 <P>
根据 SSLEngine 的状态，此方法可能生成网络数据而不使用任何应用程序数据（例如，它可能生成握手数据）。
 <P>
应用程序负责把网络数据可靠地传输到同位体，同时也保证将多次调用 wrap() 所创建的数据以和它生成时相同的顺序传输。应用程序必须正确地同步对此方法的多次调用。
 <P>
如果此 <code>SSLEngine</code> 还没有开始它的初始握手，则此方法将自动开始进行握手。
 <P>
此方法将尝试生成一个 SSL/TLS 包，并使用尽可能多的源数据，但是使用的数据将从不会超过每个缓冲区中剩余字节的总和。会更新每个 <code>ByteBuffer</code> 的位置，以反映使用或生成的数据量。界限保持不变。
 <P>
由 <code>srcs</code> 和 <code>dst ByteBuffer</code> 使用的底层内存必须不能相同。
 <P>
关于引擎关闭的更多信息，请参见该类的描述。

@param srcs 包含出站应用程序数据的 <code>ByteBuffers</code> 数组
@param	offset 第一个缓冲区（要获取该缓冲区中的字节）在缓冲区数组中的偏移量；必须为非负数并且不能大于 <code>srcs.length</code>
@param	length 要访问的最大缓冲区编号；它必须为非负和不能大于 <code>srcs.length</code>&nbsp;-&nbsp;<code>offset</code>
@param dst 保存出站网络数据的 <code>ByteBuffer</code>
@return  描述此次操作结果的 <code>SSLEngineResult</code>。
@throws SSLException 如果处理数据时遇到的问题导致 <code>SSLEngine</code> 中止。关于引擎关闭的更多信息，请参见该类的描述。
@throws	IndexOutOfBoundsException 如果关于 <code>offset</code> 和 <code>length</code> 参数的前提不成立。
@throws	ReadOnlyBufferException 如果 <code>dst</code> 缓冲区是只读的。
@throws	IllegalArgumentException 如果 <code>srcs</code> 或 <code>dst</code> 为 null， 或者指定的 <code>srcs</code> 子序列中的任何元素为 null。
@throws	IllegalStateException 如果没有设置客户端/服务器模式。
@see	java.nio.channels.GatheringByteChannel
@see	java.nio.channels.GatheringByteChannel#write( ByteBuffer[], int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.SSLEngineResult javax.net.ssl.SSLEngine.unwrap(ByteBuffer src, ByteBuffer dst) throws javax.net.ssl.SSLException
<!-- END KEY -->
<!-- BEGIN DATA -->

尝试把 SSL/TLS 网络数据解码到纯文本应用程序数据缓冲区中。
 <P>
调用此方法与调用下面的方法产生的行为完全相同：
 <blockquote><pre>
 {@link #unwrap(ByteBuffer, ByteBuffer [], int, int)
     engine.unwrap(src, new ByteBuffer [] { dst }, 0, 1);}
 </pre></blockquote>

@param src 包含入站网络数据的 <code>ByteBuffer</code>。
@param dst 保存入站应用程序数据的 <code>ByteBuffer</code>。
@return 描述此次操作结果的 <code>SSLEngineResult</code>。
@throws SSLException 如果处理数据时遇到的问题导致 <code>SSLEngine</code> 中止。关于引擎关闭的更多信息，请参见该类的描述。
@throws	ReadOnlyBufferException 如果 <code>dst</code> 缓冲区是只读的。
@throws	IllegalArgumentException 如果 <code>src</code> 或 <code>dst</code> 为 null。
@throws	IllegalStateException 如果没有设置客户端/服务器模式。
@see	#unwrap(ByteBuffer, ByteBuffer [], int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.SSLEngineResult javax.net.ssl.SSLEngine.unwrap(ByteBuffer src, java.nio.ByteBuffer[] dsts) throws javax.net.ssl.SSLException
<!-- END KEY -->
<!-- BEGIN DATA -->

尝试把 SSL/TLS 网络数据解码到纯文本应用程序数据缓冲区序列中。
 <P>
调用此方法与调用下面的方法产生的行为完全相同：
 <blockquote><pre>
 {@link #unwrap(ByteBuffer, ByteBuffer [], int, int)
     engine.unwrap(src, dsts, 0, dsts.length);}
 </pre></blockquote>

@param src 包含入站网络数据的 <code>ByteBuffer</code>。
@param dsts 保存入站应用程序数据的 <code>ByteBuffer</code> 数组。
@return 描述此次操作结果的 <code>SSLEngineResult</code>。
@throws SSLException 如果处理数据时遇到的问题导致 <code>SSLEngine</code> 中止。关于引擎关闭的更多信息，请参见该类的描述。
@throws	ReadOnlyBufferException 如果任何一个 <code>dst</code> 缓冲区是只读的。
@throws	IllegalArgumentException 如果 <code>src</code> 或 <code>dsts</code> 为 null，或者 <code>dsts</code> 中的任何元素为 null。
@throws	IllegalStateException 如果没有设置客户端/服务器模式。
@see	#unwrap(ByteBuffer, ByteBuffer [], int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.net.ssl.SSLEngineResult javax.net.ssl.SSLEngine.unwrap(ByteBuffer src, java.nio.ByteBuffer[] dsts, int offset, int length) throws javax.net.ssl.SSLException
<!-- END KEY -->
<!-- BEGIN DATA -->

尝试把 SSL/TLS 网络数据解码到纯文本应用程序数据缓冲区子序列中。此<i>&ldquo;分散&rdquo;</i> 操作可在单个调用中把字节序列解码到一个或多个给定缓冲区序列中。分散解包通常在实现网络协议或文件格式时很有用，例如将数据分组放入段中（这些段由一个或多个长度固定的头，后跟长度可变的正文组成）。关于分散的更多信息，请参见 {@link java.nio.channels.ScatteringByteChannel}，有关子序列行为的更多信息，请参见 { {@link java.nio.channels.ScatteringByteChannel#read(ByteBuffer[], int, int)}。
 <P>
根据 SSLEngine 的状态，此方法可能使用网络数据而不生成任何应用程序数据（例如，它可能使用握手数据）。
 <P>
应用程序负责从同位体可靠地获取网络数据，并且负责以数据接收时的顺序对数据调用 unwrap()。应用程序必须正确地同步对此方法的多次调用。
 <P>
如果此 <code>SSLEngine</code> 还没有开始它的初始握手，则此方法将自动开始进行握手。
 <P>
此方法将尝试使用一个完整的 SSL/TLS 网络包，但使用的数据从不超过缓冲区中剩余字节的总和。会更新每个 <code>ByteBuffer</code> 的位置，以反映使用或生成的数据量。界限保持不变。
 <P>
由 <code>src</code> 和 <code>dsts ByteBuffer</code> 使用的底层内存必须不能相同。
 <P>
由于入站网络缓冲区可能由于调用而被修改：因此，如果由于某些次要目的而需要网络数据包，则在调用此方法前应该复制该数据。注：网络数据对第二个 SSLEngine 将不再有用，因为每个 SSLEngine 包含唯一的随机状态，该状态影响 SSL/TLS 报文。
 <P>
关于引擎关闭的更多信息，请参见该类的描述。

@param src 包含入站网络数据的 <code>ByteBuffer</code>。
@param dsts 保存入站应用程序数据的 <code>ByteBuffer</code> 数组。
@param	offset 第一个缓冲区（要传递该缓冲区中的字节）在缓冲区数组中的偏移量；必须为非负数并且不能大于 <code>dsts.length</code>。
@param	length 要访问的最大缓冲区数；必须为非负数并且不能大于 <code>dsts.length</code>&nbsp;-&nbsp;<code>offset</code>。
@return 描述此次操作结果的 <code>SSLEngineResult</code>。
@throws SSLException 如果处理数据时遇到的问题导致 <code>SSLEngine</code> 中止。关于引擎关闭的更多信息，请参见该类的描述。
@throws IndexOutOfBoundsException 如果关于 <code>offset</code> 和 <code>length</code> 参数的前提不成立。
@throws	ReadOnlyBufferException 如果任何一个 <code>dst</code> 缓冲区是只读的。
@throws	IllegalArgumentException 如果 <code>src</code> 或 <code>dsts</code> 为 null，或者指定的 <code>dsts</code> 子序列中的任何元素为 null。
@throws	IllegalStateException 如果没有设置客户端/服务器模式。
@see	java.nio.channels.ScatteringByteChannel
@see	java.nio.channels.ScatteringByteChannel#read( ByteBuffer[], int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.Runnable javax.net.ssl.SSLEngine.getDelegatedTask()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>SSLEngine</code> 的一个委托 <code>Runnable</code> 任务。
 <P>
<code>SSLEngine</code> 操作可能需要阻塞操作的结果，或者可能花费很长的时间才能完成。此方法用来获取一个未完成的 {@link java.lang.Runnable} 操作（任务）。必须分配给每个任务一个线程（可能是当前的）来执行 {@link java.lang.Runnable#run() run} 操作。一旦 <code>run</code> 方法返回，则不再需要 <code>Runnable</code> 对象，它可能被丢弃。
 <P>
当创建此对象时，委托任务在 <code>AccessControlContext</code> 中的适当位置运行。
 <P>
对此方法的一次调用恰好返回每个未完成的任务一次。
 <P>
多个委托任务可以并行运行。

@return	一个委托 <code>Runnable</code> 任务；如果没有则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.net.ssl.SSLEngine.closeInbound() throws javax.net.ssl.SSLException
<!-- END KEY -->
<!-- BEGIN DATA -->

通知没有更多的入站网络数据将发送到此 <code>SSLEngine</code>。
 <P>
如果应用程序通过调用 {@link #closeOutbound()} 发起关闭进程，则在某些情况下不要求发起方等待同位体的相应关闭报文。（有关等待关闭报警的更改信息，请参见 TLS 规范的 7.2.1 节 (<A
 HREF="http://www.ietf.org/rfc/rfc2246.txt">RFC 2246</A>)。）在这种情况下，不需要调用此方法。
 <P>
但是如果应用程序没有发起关闭进程，如果上面的情况不适用，则每当到达 SSL/TLS 数据流的末尾时就应该调用此方法。这保证了入站端的关闭，也检查该同位体是否正确地遵循 SSL/TLS 关闭过程，从而检测可能的截断攻击。
 <P>
此方法是幂等的：如果入站端已经关闭，则此方法不执行任何操作。
 <P>
应该调用 {@link #wrap(ByteBuffer, ByteBuffer) wrap()} 来刷新任何剩余的握手数据。

@throws	SSLException 如果此引擎没有从同位体接收到正确的 SSL/TLS 关闭通知报文。

@see	#isInboundDone()
@see	#isOutboundDone()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.net.ssl.SSLEngine.isInboundDone()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回 {@link #unwrap(ByteBuffer, ByteBuffer)} 是否再接受更多的入站数据报文。

@return 如果 <code>SSLEngine</code> 不再使用任何网络数据（同时也暗含不再生成任何应用程序数据），则返回 true。
@see	#closeInbound()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.net.ssl.SSLEngine.closeOutbound()
<!-- END KEY -->
<!-- BEGIN DATA -->

通知没有更多的出站应用程序数据将在此 <code>SSLEngine</code> 上发送。
 <P>
此方法是幂等的：如果出站端已经关闭，则此方法不执行任何操作。
 <P>
应该调用 {@link #wrap(ByteBuffer, ByteBuffer)} 来刷新任何剩余的握手数据。

@see	#isOutboundDone()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.net.ssl.SSLEngine.isOutboundDone()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回 {@link #wrap(ByteBuffer, ByteBuffer)} 是否再生成更多的出站数据报文。
 <P>
注意，在关闭阶段，<code>SSLEngine</code> 可能生成必须发送到同位体的握手关闭数据。必须调用 <code>wrap()</code> 来生成此数据。当此方法返回 true 时，将不再创建出站数据。

@return 如果 <code>SSLEngine</code> 不再生成任何网络数据，则返回 true

@see	#closeOutbound()
@see	#closeInbound()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String[] javax.net.ssl.SSLEngine.getSupportedCipherSuites()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回为了在此引擎上使用而可以启用的密码套件名称。通常，因为此列表可能包括无法满足默认服务质量要求的密码套件，所以默认情况下实际启动的是这些密码套件的子集。这种密码套件在特殊的应用程序中可能很有用。

@return	密码套件名称的数组
@see	#getEnabledCipherSuites()
@see	#setEnabledCipherSuites(String [])

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String[] javax.net.ssl.SSLEngine.getEnabledCipherSuites()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回为了在此引擎上使用而当前已启用的 SSL 密码套件名称。当首次创建 SSLEngine 时，所有启用的密码套件都支持最低的服务质量。因此，在某些环境中此值可能为空。
 <P>
即使密码套件已经被启用，它也可能从不被使用。（例如，同位体不支持它、密码套件必须的证书/私钥不可用，或者启用了匿名的密码套件但需要进行验证。）

@return	密码套件名称的数组
@see	#getSupportedCipherSuites()
@see	#setEnabledCipherSuites(String [])

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.net.ssl.SSLEngine.setEnabledCipherSuites(java.lang.String[] suites)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置密码套件为启用，以便在此引擎上使用。
 <P>
<code>suites</code> 参数中的每个密码套件都必须由 getSupportedCipherSuites() 列出，否则该方法会失败。在成功调用此方法之后，仅启用了在 <code>suites</code> 参数中列出的套件以便使用。
 <P>
有关为什么一个密码套件在引擎上从来不被使用的更多信息，请参见 {@link #getEnabledCipherSuites()}。

@param	suites 要启用的所有密码套件的名称
@throws	IllegalArgumentException 当一个或多个由参数命名的密码套件不被支持时，或参数为 null 时。
@see	#getSupportedCipherSuites()
@see	#getEnabledCipherSuites()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String[] javax.net.ssl.SSLEngine.getSupportedProtocols()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回能够被启用，以便让 <code>SSLEngine</code> 可使用的协议的名称。

@return	所支持的协议的数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String[] javax.net.ssl.SSLEngine.getEnabledProtocols()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回当前已启用的，以便让 <code>SSLEngine</code> 使用的协议版本的名称。

@return	协议的数组
@see	#setEnabledProtocols(String [])

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.net.ssl.SSLEngine.setEnabledProtocols(java.lang.String[] protocols)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置为了在此引擎上使用而启用的协议版本。
 <P>
该协议必须已经由 getSupportedProtocols() 将其作为受支持的协议列出。在成功调用此方法之后，仅启用了在 <code>protocols</code> 参数中列出的协议以便使用。

@param	protocols 要启用的所有协议的名称。
@throws	IllegalArgumentException 当一个或多个由参数命名的协议不被支持时，或 protocols 参数为 null 时。
@see	#getEnabledProtocols()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.net.ssl.SSLSession javax.net.ssl.SSLEngine.getSession()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>SSLEngine</code> 中使用的 <code>SSLSession</code>。
 <P>
这些 SSLSession 可以是持久的，并且通常对应于某个用户的整个登录会话过程。该会话指定了会话中所有连接主动使用的特定密码套件，以及该会话的客户端和服务器标识。
 <P>
与 {@link SSLSocket#getSession()} 不同，此方法在握手完成之后才阻塞。
 <P>
在初始握手结束之前，此方法返回一个会话对象，它报告 &quot;SSL_NULL_WITH_NULL_NULL&quot; 形式的无效密码套件。

@return	此 <code>SSLEngine</code> 的 <code>SSLSession</code>
@see	SSLSession

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.net.ssl.SSLEngine.beginHandshake() throws javax.net.ssl.SSLException
<!-- END KEY -->
<!-- BEGIN DATA -->

在此 SSLEngine 上发起握手（初始的或重新协商）。
 <P>
初始握手不需要此方法，因为如果握手尚未开始，<code>wrap()</code> 和 <code>unwrap()</code> 方法将隐式地调用此方法。
 <P>
注意，会话的同位体也可以通过发送适当的会话重新协商握手报文来请求与此 <code>SSLEngine</code> 进行会话重新协商。
 <P>
与 {@link SSLSocket#startHandshake() SSLSocket#startHandshake()} 方法不同，此方法在握手完成之后才阻塞。
 <P>
为了强迫一个完整的 SSL/TLS 会话重新协商，调用此方法之前应该使当前的会话无效。
 <P>
某些协议可能不支持在一个现有引擎上的多次握手，可能抛出 <code>SSLException</code>。

@throws	SSLException 如果通知 <code>SSLEngine</code> 开始新的握手时遇到了问题。关于引擎关闭的更多信息，请参见该类的描述。
@throws	IllegalStateException 如果没有设置客户端/服务器模式。
@see	SSLSession#invalidate()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.net.ssl.SSLEngineResult.HandshakeStatus javax.net.ssl.SSLEngine.getHandshakeStatus()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>SSLEngine</code> 的当前握手状态。

@return	当前的 <code>SSLEngineResult.HandshakeStatus</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.net.ssl.SSLEngine.setUseClientMode(boolean mode)
<!-- END KEY -->
<!-- BEGIN DATA -->

配置引擎在握手时使用客户端（或服务器）模式。
 <P>
必须在任何握手出现之前调用此方法。一旦握手开始，在此引擎的生命周期内就无法重置该模式。
 <P>
服务器通常对其自己进行验证，不要求客户端也这么做。

@param	mode 如果引擎应该以&ldquo;客户端&rdquo;模式开始它的握手，则为 true
@throws	IllegalArgumentException 如果在初始握手开始后试图更改模式。
@see	#getUseClientMode()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.net.ssl.SSLEngine.getUseClientMode()
<!-- END KEY -->
<!-- BEGIN DATA -->

如果引擎设置为在握手时使用客户端模式，则返回 true。

@return	如果引擎应该以&ldquo;客户端&rdquo;模式进行握手，则返回 true
@see	#setUseClientMode(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.net.ssl.SSLEngine.setNeedClientAuth(boolean need)
<!-- END KEY -->
<!-- BEGIN DATA -->

配置引擎<i>要求</i> 客户端进行验证。此选项只对服务器模式的引擎有用。
 <P>
引擎的客户端验证设置是以下三种之一:
 <ul>
<li> 必须的客户端验证
<li> 请求的客户端验证
<li> 不需要客户端验证
 </ul>
 <P>
与 {@link #setWantClientAuth(boolean)} 不同，如果设置了此选项并且客户端选择不提供其自身的验证信息，<i>则协商将会停止且引擎将开始它的关闭过程</i>。
 <P>
调用此方法会重写由此方法或 {@link #setWantClientAuth(boolean)} 以前所做的任何设置。

@param	need 如果要求进行客户端验证，则设置为 true；如果不需要客户端验证，则设置为 false。
@see	#getNeedClientAuth()
@see	#setWantClientAuth(boolean)
@see	#getWantClientAuth()
@see	#setUseClientMode(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.net.ssl.SSLEngine.getNeedClientAuth()
<!-- END KEY -->
<!-- BEGIN DATA -->

如果引擎<i>要求</i> 客户端验证，则返回 true。此选项只对服务器模式的引擎有用。

@return	如果要求进行客户端验证，返回 true；如果不需要客户端验证，则返回 false。
@see	#setNeedClientAuth(boolean)
@see	#setWantClientAuth(boolean)
@see	#getWantClientAuth()
@see	#setUseClientMode(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.net.ssl.SSLEngine.setWantClientAuth(boolean want)
<!-- END KEY -->
<!-- BEGIN DATA -->

配置引擎<i>请求</i> 客户端验证。此选项只对服务器模式的引擎有用。
 <P>
引擎的客户端验证设置是以下三种之一:
 <ul>
<li> 必须的客户端验证
<li> 请求的客户端验证
<li> 不需要客户端验证
 </ul>
 <P>
与 {@link #setNeedClientAuth(boolean)} 不同，如果设置了此选项并且客户端选择不提供其自身的验证信息，<i>则协商将会继续</i>。
 <P>
调用此方法会重写由此方法或 {@link #setNeedClientAuth(boolean)} 以前所做的任何设置。

@param	want 如果请求进行客户端验证，则设置为 true；如果不需要客户端验证，则设置为 false。
@see	#getWantClientAuth()
@see	#setNeedClientAuth(boolean)
@see	#getNeedClientAuth()
@see	#setUseClientMode(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.net.ssl.SSLEngine.getWantClientAuth()
<!-- END KEY -->
<!-- BEGIN DATA -->

如果引擎<i>请求</i> 客户端验证，则返回 true。此选项只对服务器模式的引擎有用。

@return	如果请求进行客户端验证，则返回 true；如果不需要客户端验证，则返回 false。
@see	#setNeedClientAuth(boolean)
@see	#getNeedClientAuth()
@see	#setWantClientAuth(boolean)
@see	#setUseClientMode(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.net.ssl.SSLEngine.setEnableSessionCreation(boolean flag)
<!-- END KEY -->
<!-- BEGIN DATA -->

控制是否可以由此引擎建立新的 SSL 会话。如果不允许创建会话，也没有可以恢复的现有会话，则不会有成功的握手。

@param	flag 为 true 时指示可以创建会话；这是默认的。为 false 时指示必须恢复现有会话
@see	#getEnableSessionCreation()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.net.ssl.SSLEngine.getEnableSessionCreation()
<!-- END KEY -->
<!-- BEGIN DATA -->

如果可以由此引擎建立新的 SSL 会话，则返回 true。

@return	返回值为 true 时指示可以创建会话；这是默认的。为 false 时指示必须恢复现有会话
@see	#setEnableSessionCreation(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.SSLParameters javax.net.ssl.SSLEngine.getSSLParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->

 返回对此 SSLEngine 有效的 SSLParameters。返回的 SSLParameters 的密码套件和协议始终为非 null。

 @return 对此 SSLEngine 有效的 SSLParameters。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.net.ssl.SSLEngine.setSSLParameters(SSLParameters params)
<!-- END KEY -->
<!-- BEGIN DATA -->

 对此引擎应用 SSLParameters。

 <p>这意味着：
 <ul>
 <li>如果 <code>params.getCipherSuites()</code> 不为 null，则使用该值调用 <code>setEnabledCipherSuites()</code>
 <li>如果 <code>params.getProtocols()</code> 不为 null，则使用该值调用 <code>setEnabledProtocols()</code> 
 <li>如果 <code>params.getNeedClientAuth()</code> 或 <code>params.getWantClientAuth()</code> 返回 <code>true</code>，则分别调用 <code>setNeedClientAuth(true)</code> 和 <code>setWantClientAuth(true)</code>；否则调用 <code>setWantClientAuth(false)</code>。
 </ul>

 @param params 参数
 @throws IllegalArgumentException 如果 setEnabledCipherSuites() 或 setEnabledProtocols() 调用失败
 @since 1.6

<!-- END DATA -->
