<!-- BEGIN KEY -->
public abstract class javax.net.ssl.SSLContextSpi extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

此类为 <code>SSLContext</code> 类定义了<i>服务提供者接口</i> (<b>SPI</b>)。

<p> 此类中的所有抽象方法都必须由每个想要提供实现特定 SSL 上下文的加密服务提供者实现。

@since 1.4
@see SSLContext
@version 1.14

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void javax.net.ssl.SSLContextSpi.engineInit(javax.net.ssl.KeyManager[] km, javax.net.ssl.TrustManager[] tm, SecureRandom sr) throws java.security.KeyManagementException
<!-- END KEY -->
<!-- BEGIN DATA -->

初始化此上下文。

@param km 验证密钥源
@param tm 同位体验证信任决策源或
@param sr 随机源
@throws KeyManagementException 如果此操作失败
@see SSLContext#init(KeyManager [], TrustManager [], SecureRandom)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract javax.net.ssl.SSLSocketFactory javax.net.ssl.SSLContextSpi.engineGetSocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此上下文的 <code>SocketFactory</code> 对象。

@return <code>SocketFactory</code> 对象
@throws IllegalStateException 如果 SSLContextImpl 需要初始化并且尚未调用 <code>engineInit()</code>
@see javax.net.ssl.SSLContext#getSocketFactory()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract javax.net.ssl.SSLServerSocketFactory javax.net.ssl.SSLContextSpi.engineGetServerSocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此上下文的 <code>ServerSocketFactory</code> 对象。

@return <code>ServerSocketFactory</code> 对象
@throws IllegalStateException 如果 SSLContextImpl 需要初始化并且尚未调用 <code>engineInit()</code>
@see javax.net.ssl.SSLContext#getServerSocketFactory()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract javax.net.ssl.SSLEngine javax.net.ssl.SSLContextSpi.engineCreateSSLEngine()
<!-- END KEY -->
<!-- BEGIN DATA -->

使用此上下文创建新的 <code>SSLEngine</code>。
 <P>
使用此工厂方法的应用程序不为内部会话重用策略提供提示。如果需要提示，则应该使用 {@link #engineCreateSSLEngine(String, int)}。
 <P>
某些密码套件（例如 Kerberos）需要远程主机名信息，在这种情况下不应该使用此工厂方法。

@return <code>SSLEngine</code> 对象
@throws IllegalStateException 如果 SSLContextImpl 需要初始化并且尚未调用 <code>engineInit()</code>

@see     SSLContext#createSSLEngine()

@since   1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract javax.net.ssl.SSLEngine javax.net.ssl.SSLContextSpi.engineCreateSSLEngine(String host, int port)
<!-- END KEY -->
<!-- BEGIN DATA -->

使用此上下文创建 <code>SSLEngine</code>。
 <P>
使用此工厂方法的应用程序为内部会话重用策略提供提示。
 <P>
某些密码套件（例如 Kerberos）需要远程主机名信息，在这种情况下需要指定 peerHost。

@param host 主机的非授权名
@param port 非授权端口号
@return <code>SSLEngine</code> 对象
@throws IllegalStateException 如果 SSLContextImpl 需要初始化并且尚未调用 <code>engineInit()</code>

@see     SSLContext#createSSLEngine(String, int)

@since   1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract javax.net.ssl.SSLSessionContext javax.net.ssl.SSLContextSpi.engineGetServerSessionContext()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此上下文的服务器 <code>SSLSessionContext</code> 对象。

@return <code>SSLSessionContext</code> 对象
@see javax.net.ssl.SSLContext#getServerSessionContext()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract javax.net.ssl.SSLSessionContext javax.net.ssl.SSLContextSpi.engineGetClientSessionContext()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此上下文的客户端 <code>SSLSessionContext</code> 对象。

@return <code>SSLSessionContext</code> 对象
@see javax.net.ssl.SSLContext#getClientSessionContext()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.net.ssl.SSLParameters javax.net.ssl.SSLContextSpi.engineGetDefaultSSLParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->

 返回表示此 SSL 上下文默认设置的 SSLParameters 的副本。

 <p>该参数将始终具有密码套件和设置为非 null 值的协议数组。

 <p>默认实现从通过调用此上下文 SocketFactory 的 {@linkplain javax.net.SocketFactory#createSocket
 SocketFactory.createSocket()} 方法所创建的 SSLSocket 获得该参数。

 @return 具有默认设置的 SSLParameters 对象的副本
 @throws UnsupportedOperationException 如果不能获得默认的 SSL 参数。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.net.ssl.SSLParameters javax.net.ssl.SSLContextSpi.engineGetSupportedSSLParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->

 返回表示此 SSL 上下文最大受支持设置的 SSLParameters 的副本。

 <p>该参数将始终具有密码套件和设置为非 null 值的协议数组。

 <p>默认实现从通过调用此上下文 SocketFactory 的 {@linkplain javax.net.SocketFactory#createSocket
 SocketFactory.createSocket()} 方法所创建的 SSLSocket 获得该参数。

 @return 具有最大受支持设置的 SSLParameters 对象的副本
 @throws UnsupportedOperationException 如果不能获得受支持的 SSL 参数。

 @since 1.6

<!-- END DATA -->
