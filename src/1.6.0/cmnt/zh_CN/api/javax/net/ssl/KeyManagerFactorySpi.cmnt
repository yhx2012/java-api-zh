<!-- BEGIN KEY -->
public abstract class javax.net.ssl.KeyManagerFactorySpi extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

此类为 <code>KeyManagerFactory</code> 类定义了<i>服务提供者接口</i> (<b>SPI</b>)。

<p> 此类中的所有抽象方法都必须由希望提供特定密钥管理器工厂实现的每个加密服务提供者来实现。

@since 1.4
@see KeyManagerFactory
@see KeyManager
@version 1.13

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void javax.net.ssl.KeyManagerFactorySpi.engineInit(KeyStore ks, char[] password) throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->

使用密钥内容源初始化此工厂。

@param ks KeyStore 或 null
@param password 用来恢复密钥的密码
@throws KeyStoreException 如果此操作失败
@throws NoSuchAlgorithmException 如果指定的提供者中的指定算法不可用。
@throws UnrecoverableKeyException 如果不能恢复密钥
@see KeyManagerFactory#init(KeyStore, char[])

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void javax.net.ssl.KeyManagerFactorySpi.engineInit(ManagerFactoryParameters spec) throws java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->

使用密钥内容源初始化此工厂。
 <P>
在某些情况下，提供者可能需要除 keystore 和密码以外的其他初始化参数。期望由该特定提供者的用户传递由提供者定义的适当 <CODE>ManagerFactoryParameters</CODE> 实现。然后提供者可以调用 ManagerFactoryParameters 实现中指定的方法来获取所需的信息。

@param spec 一个特定于提供者的参数规范实现
@throws InvalidAlgorithmParameterException 如果参数有问题
@see KeyManagerFactory#init(ManagerFactoryParameters spec)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract javax.net.ssl.KeyManager[] javax.net.ssl.KeyManagerFactorySpi.engineGetKeyManagers()
<!-- END KEY -->
<!-- BEGIN DATA -->

为每类密钥内容返回一个密钥管理器。

@return 密钥管理器
@throws IllegalStateException
         如果 KeyManagerFactorySpi 没有被初始化

<!-- END DATA -->
