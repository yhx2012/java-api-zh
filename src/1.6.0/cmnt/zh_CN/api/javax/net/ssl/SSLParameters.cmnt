<!-- BEGIN KEY -->
public class javax.net.ssl.SSLParameters extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

封装 SSL/TLS 连接的参数。参数是 SSL/TLS 握手中接受的密码套件列表、允许的协议列表，以及 SSL/TLS 服务器是否应该请求或要求客户机验证。

<p>通过此类的构造方法可以创建 SSLParameters。使用 {@link SSLSocket#getSSLParameters SSLSocket} 和 {@link SSLEngine#getSSLParameters SSLEngine} 中的 <code>getSSLParameters()</code> 方法或者 <code>SSLContext</code> 中的 {@link SSLContext#getDefaultSSLParameters getDefaultSSLParameters()} 和 {@link SSLContext#getSupportedSSLParameters getSupportedSSLParameters()} 方法，还可以获取对象。

<P>通过 {@link SSLSocket#setSSLParameters SSLSocket.setSSLParameters()} 和 {@link SSLEngine#setSSLParameters SSLEngine.getSSLParameters()} 方法可以将 SSLParameters 应用到连接。

@see SSLSocket
@see SSLEngine
@see SSLContext

@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.SSLParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->

构造 SSLParameters。

<p>cipherSuites 和协议值被设置为 <code>null</code>，wantClientAuth 和 needClientAuth 被设置为 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.SSLParameters(java.lang.String[] cipherSuites)
<!-- END KEY -->
<!-- BEGIN DATA -->

根据指定的密码套件数组构造 SSLParameters。调用此构造方法等效于先调用无参数构造方法，再调用 <code>setCipherSuites(cipherSuites)</code>。

@param cipherSuites 密码套件数组（或 null）

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.SSLParameters(java.lang.String[] cipherSuites, java.lang.String[] protocols)
<!-- END KEY -->
<!-- BEGIN DATA -->

根据指定的密码套件数组和协议数组构造 SSLParameters。调用此构造方法等效于先调用无参数构造方法，再调用 <code>setCipherSuites(cipherSuites)</code> 和 <code>setProtocols(protocols)</code>。

@param cipherSuites 密码套件数组（或 null）
@param protocols 协议数组（或 null）

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] javax.net.ssl.SSLParameters.getCipherSuites()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回密码套件数组的副本；如果未设置，则返回 null。

@return 密码套件数组的副本；如果未设置，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.net.ssl.SSLParameters.setCipherSuites(java.lang.String[] cipherSuites)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置密码套件数组。

@param cipherSuites 密码套件数组（或 null）

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] javax.net.ssl.SSLParameters.getProtocols()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回协议数组的副本；如果未设置，则返回 null。

@return 协议数组的副本；如果未设置，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.net.ssl.SSLParameters.setProtocols(java.lang.String[] protocols)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置协议数组。

@param protocols 协议数组（或 null）

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.net.ssl.SSLParameters.getWantClientAuth()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回是否应该请求客户机验证。

@return 是否应该请求客户机验证。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.net.ssl.SSLParameters.setWantClientAuth(boolean wantClientAuth)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置是否应该请求客户机验证。调用此方法将清除 <code>needClientAuth</code> 标志。

@param wantClientAuth 是否应该请求客户机验证

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.net.ssl.SSLParameters.getNeedClientAuth()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回是否应该要求客户机验证。

@return 是否应该要求客户机验证。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.net.ssl.SSLParameters.setNeedClientAuth(boolean needClientAuth)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置是否应该要求客户机验证。调用此方法将清除 <code>wantClientAuth</code> 标志。

@param needClientAuth 是否应该要求客户机验证

<!-- END DATA -->
