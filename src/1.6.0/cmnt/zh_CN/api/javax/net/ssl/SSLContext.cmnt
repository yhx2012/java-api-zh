<!-- BEGIN KEY -->
public class javax.net.ssl.SSLContext extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

此类的实例表示安全套接字协议的实现，它充当用于安全套接字工厂或 <code>SSLEngine</code> 的工厂。用可选的一组密钥和信任管理器及安全随机字节源初始化此类。

@since 1.4
@version 1.26, 02/11/04

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.net.ssl.SSLContext(SSLContextSpi contextSpi, Provider provider, String protocol)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建 SSLContext 对象。

@param contextSpi 代理
@param provider 提供者
@param protocol 协议

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized javax.net.ssl.SSLContext javax.net.ssl.SSLContext.getDefault() throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回默认的 SSL 上下文。

<p>如果默认上下文是使用 {@link #setDefault SSLContext.setDefault()} 方法设置的，则返回该上下文。否则，第一次调用此方法将触发调用 <code>SSLContext.getInstance("Default")</code>。如果成功，则该对象成为默认的 SSL 上下文并返回。

 <p>默认上下文立即可用并且无需{@linkplain #init 初始化}。

 @return 默认的 SSL 上下文
 @throws NoSuchAlgorithmException 如果 {@link SSLContext#getInstance SSLContext.getInstance()} 调用失败
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized void javax.net.ssl.SSLContext.setDefault(SSLContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->

 设置默认的 SSL 上下文。它由对 {@link #getDefault} 的后续调用返回。默认上下文必须立即可用并且无需{@linkplain #init 初始化}。

 @param context SSLContext
 @throws	NullPointerException 如果 context 为 null
 @throws	SecurityException 如果安全管理器存在并且其 <code>checkPermission</code> 方法不允许 <code>SSLPermission("setDefaultSSLContext")</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.net.ssl.SSLContext javax.net.ssl.SSLContext.getInstance(String protocol) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回实现指定安全套接字协议的 <code>SSLContext</code> 对象。

 <p> 此方法从首选提供者开始遍历已注册安全提供者列表。返回一个封装 SSLContextSpi 实现的新 SSLContext 对象，该实现取自支持指定协议的第一个提供者。

 <p> 注意，可以通过 {@link Security#getProviders() Security.getProviders()} 方法获取已注册提供者列表。

 @param protocol 所请求协议的标准名称。有关标准协议名称的信息，请参见 <a href=
	"http://java.sun.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html#AppA">
		Java Secure Socket Extension Reference Guide </a> 的附录 A。

 @return 新的 <code>SSLContext</code> 对象。

 @exception NoSuchAlgorithmException 如果没有提供者支持指定协议的 TrustManagerFactorySpi 实现。

 @see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.net.ssl.SSLContext javax.net.ssl.SSLContext.getInstance(String protocol, String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回实现指定安全套接字协议的 <code>SSLContext</code> 对象。

 <p> 返回一个封装 SSLContextSpi 实现的新 SSLContext 对象，该实现取自指定的提供者。指定的提供者必须在安全提供者列表中注册。

 <p> 注意，可以通过 {@link Security#getProviders() Security.getProviders()} 方法获取已注册提供者列表。

 @param protocol 所请求协议的标准名称。有关标准协议名称的信息，请参见 <a href=
	"http://java.sun.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html#AppA">
		Java Secure Socket Extension Reference Guide </a> 的附录 A。

 @param provider 提供者的名称。

 @return 新的 <code>SSLContext</code> 对象。

 @throws NoSuchAlgorithmException 如果不能从指定提供者获得指定协议的 SSLContextSpi 实现。

 @throws NoSuchProviderException 如果指定提供者未在安全提供者列表中注册。

 @throws IllegalArgumentException 如果提供者的名称为 null 或空。

 @see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.net.ssl.SSLContext javax.net.ssl.SSLContext.getInstance(String protocol, Provider provider) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回实现指定安全套接字协议的 <code>SSLContext</code> 对象。

 <p> 返回一个封装 SSLContextSpi 实现的新 SSLContext 对象，该实现取自指定的 Provider 对象。 注意，指定的 Provider 对象无需在提供者列表中注册。

 @param protocol 所请求协议的标准名称。有关标准协议名称的信息，请参见 <a href=
	"http://java.sun.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html#AppA">
		Java Secure Socket Extension Reference Guide </a> 的附录 A。

 @param provider 提供者的实例。

 @return 新的 <code>SSLContext</code> 对象。

 @throws NoSuchAlgorithmException 如果不能从指定 Provider 对象获得指定协议的 KeyManagerFactorySpi 实现。

 @throws IllegalArgumentException 如果提供者的名称为 null。

 @see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.net.ssl.SSLContext.getProtocol()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>SSLContext</code> 对象的协议名称。

<p>这与创建此 <code>SSLContext</code> 对象的某个 <code>getInstance</code> 调用中所指定的名称相同。

@return 此 <code>SSLContext</code> 对象的协议名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider javax.net.ssl.SSLContext.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>SSLContext</code> 对象的提供者。

@return 此 <code>SSLContext</code> 对象的提供者

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.net.ssl.SSLContext.init(javax.net.ssl.KeyManager[] km, javax.net.ssl.TrustManager[] tm, SecureRandom random) throws java.security.KeyManagementException
<!-- END KEY -->
<!-- BEGIN DATA -->

初始化此上下文。前两个参数都可以为 null，在这种情况下将搜索装入的安全提供者来寻找适当工厂的最高优先级实现。同样，安全的 random 参数也可以为 null，在这种情况下将使用默认的实现。
 <P>
只有数组中的第一个特定密钥和/或信任管理器实现类型的实例被使用。（例如，只有数组中的第一个 javax.net.ssl.X509KeyManager 被使用。）

@param km 验证密钥源或 null
@param tm 同位体验证信任决策源或 null
@param random 此生成器的随机源或 null
@throws KeyManagementException 如果此操作失败

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.net.ssl.SSLSocketFactory javax.net.ssl.SSLContext.getSocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此上下文的 <code>SocketFactory</code> 对象。

@return <code>SocketFactory</code> 对象
@throws IllegalStateException 如果 SSLContextImpl 需要初始化并且尚未调用 <code>init()</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.net.ssl.SSLServerSocketFactory javax.net.ssl.SSLContext.getServerSocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此上下文的 <code>ServerSocketFactory</code> 对象。

@return <code>ServerSocketFactory</code> 对象
@throws IllegalStateException 如果 SSLContextImpl 需要初始化并且尚未调用 <code>init()</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.net.ssl.SSLEngine javax.net.ssl.SSLContext.createSSLEngine()
<!-- END KEY -->
<!-- BEGIN DATA -->

使用此上下文创建新的 <code>SSLEngine</code>。
 <P>
使用此工厂方法的应用程序不为内部会话重用策略提供提示。如果需要提示，则应该使用 {@link #createSSLEngine(String, int)}。
 <P>
某些密码套件（例如 Kerberos）需要远程主机名信息，在这种情况下不应该使用此工厂方法。

@return	 <code>SSLEngine</code> 对象
@throws	UnsupportedOperationException 如果底层提供者不实现该操作。
@throws  IllegalStateException 如果 SSLContextImpl 需要初始化并且尚未调用 <code>init()</code>
@since   1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.net.ssl.SSLEngine javax.net.ssl.SSLContext.createSSLEngine(String peerHost, int peerPort)
<!-- END KEY -->
<!-- BEGIN DATA -->

使用此上下文创建新的 <code>SSLEngine</code>，该上下文使用劝告同位体信息。
 <P>
使用此工厂方法的应用程序为内部会话重用策略提供提示。
 <P>
某些密码套件（例如 Kerberos）需要远程主机名信息，在这种情况下需要指定 peerHost。

@param	peerHost 主机的非授权名
@param	peerPort 非授权端口
@return	新的 <code>SSLEngine</code> 对象
@throws	UnsupportedOperationException 如果底层提供者不实现该操作。
@throws  IllegalStateException 如果 SSLContextImpl 需要初始化并且尚未调用 <code>init()</code>
@since   1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.net.ssl.SSLSessionContext javax.net.ssl.SSLContext.getServerSessionContext()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回服务器会话上下文，它表示可供服务器端 SSL 套接字握手阶段所使用的 SSL 会话集。
 <P>
此上下文在一些环境下可能不可用，在这种情况下此方法返回 null。例如，当底层 SSL 提供者不提供 SSLSessionContext 接口实现时，此方法返回 null。否则返回非 null 会话上下文。

@return 绑定到此 SSL 上下文的服务器会话上下文

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.net.ssl.SSLSessionContext javax.net.ssl.SSLContext.getClientSessionContext()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回客户端会话上下文，它表示可供客户端 SSL 套接字握手阶段所使用的 SSL 会话集。
 <P>
此上下文在一些环境下可能不可用，在这种情况下此方法返回 null。例如，当底层 SSL 提供者不提供 SSLSessionContext 接口实现时，此方法返回 null。否则返回非 null 会话上下文。

@return 绑定到此 SSL 上下文的客户端会话上下文

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.net.ssl.SSLParameters javax.net.ssl.SSLContext.getDefaultSSLParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->

 返回表示此 SSL 上下文默认设置的 SSLParameters 的副本。

 <p>该参数将始终具有密码套件和设置为非 null 值的协议数组。

 @return 具有默认设置的 SSLParameters 对象的副本
 @throws UnsupportedOperationException 如果不能获得默认的 SSL 参数。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.net.ssl.SSLParameters javax.net.ssl.SSLContext.getSupportedSSLParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->

 返回表示此 SSL 上下文受支持设置的 SSLParameters 的副本。

 <p>该参数将始终具有密码套件和设置为非 null 值的协议数组。

 @return 具有受支持设置的 SSLParameters 对象的副本
 @throws UnsupportedOperationException 如果不能获得受支持的 SSL 参数。
 @since 1.6

<!-- END DATA -->
