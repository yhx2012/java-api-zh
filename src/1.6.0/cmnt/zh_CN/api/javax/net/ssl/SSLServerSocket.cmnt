<!-- BEGIN KEY -->
public abstract class javax.net.ssl.SSLServerSocket extends java.net.ServerSocket
<!-- END KEY -->
<!-- BEGIN DATA -->

 此类扩展了 <code>ServerSocket</code> 并且提供使用像 Secure Sockets Layer (SSL) 或 Transport Layer Security (TLS) 协议的安全服务器套接字。
 <P>
 此类的实例通常使用 <code>SSLServerSocketFactory</code> 来创建。<code>SSLServerSocket</code> 的主要功能是通过<code>接受</code>连接来创建 <code>SSLSocket</code>。
 <P>
 <code>SSLServerSocket</code> 包含了一些状态数据，这些数据在创建套接字时由 <code>SSLSocket</code> 继承。它们包括启用的密码套件和协议、客户端验证是否必需，以及创建的套接字应该以客户端模式还是服务器模式开始握手。可以通过调用适当的方法重写由创建的 <code>SSLSocket</code> 所继承的状态。

@see java.net.ServerSocket
@see SSLSocket

@since 1.4
@version 1.25
@author David Brownell

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.net.ssl.SSLServerSocket() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 仅供子类使用。
 <P>
 使用默认的验证上下文创建未绑定的 TCP 服务器套接字。

@exception  IOException  如果创建套接字时发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.net.ssl.SSLServerSocket(int port) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 仅供子类使用。
 <P>
 使用默认的验证上下文在端口上创建 TCP 服务器套接字。连接 backlog 默认为最多可有五十个连接排队，超过此数，系统将拒绝新的连接请求。

@param port  侦听的端口
@throws IOException 当创建套接字时出现 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.net.ssl.SSLServerSocket(int port, int backlog) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 仅供子类使用。
 <P>
 使用默认的验证上下文和指定的连接 backlog 在端口上创建 TCP 服务器套接字。

@param port 侦听的端口号
@param backlog 在系统应该开始拒绝新的请求前可以挂起的连接数
@throws IOException 如果创建套接字时出现 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.net.ssl.SSLServerSocket(int port, int backlog, InetAddress address) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 仅供子类使用。
 <P>
 使用默认的验证上下文、指定的连接 backlog 和指定的网络接口在端口上创建 TCP 服务器套接字。此构造方法用在多宿主机（像那些用作防火墙或路由器的主机）上以控制通过哪一个接口提供网络服务。

@param port 侦听的端口号
@param backlog 在系统应该开始拒绝新的请求前可以挂起的连接数
@param address 网络接口的地址，通过此地址接受连接
@throws IOException 如果创建套接字时出现 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String[] javax.net.ssl.SSLServerSocket.getEnabledCipherSuites()
<!-- END KEY -->
<!-- BEGIN DATA -->

 返回当前被启用以供新接受的连接使用的密码套件列表。
 <P>
 如果没有显式修改此列表，则系统提供的默认值在所有启用的密码套件中保证最低的服务质量。
 <P>
 实际上不使用启用的密码套件有多个原因。例如：  服务器套接字可能没有适当的私钥供它使用或者密码套件可能是匿名的，阻止使用客户端验证，而服务器套接字已经被告知需要那种验证。

@return 启用的密码套件的数组
@see #getSupportedCipherSuites()
@see #setEnabledCipherSuites(String [])

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.net.ssl.SSLServerSocket.setEnabledCipherSuites(java.lang.String[] suites)
<!-- END KEY -->
<!-- BEGIN DATA -->

 把密码套件设置为启用的以供接受的连接使用。
 <P>
 这些密码套件必须已经由 getSupportedCipherSuites() 作为支持套件列出。在成功调用此方法之后，只有在 <code>suites</code> 参数中列出的套件才会被启用以供连接使用。
 <P>
 对于需要验证信息但这些信息在此 ServerSocket 的验证上下文中不存在的套件，即使已经启用，任何情况下也不会使用它。
 <P>
 从 <code>accept()</code> 返回的 <code>SSLSocket</code> 继承此设置。

@param suites 要启用的所有密码套件名称
@exception IllegalArgumentException 当一个或多个由参数命名的密码套件不被支持时，或参数为 null 时。
@see #getSupportedCipherSuites()
@see #getEnabledCipherSuites()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String[] javax.net.ssl.SSLServerSocket.getSupportedCipherSuites()
<!-- END KEY -->
<!-- BEGIN DATA -->

 返回可以启用以供 SSL 连接使用的密码套件的名称。
 <P>
 通常，因为此列表可能包括无法满足默认服务质量要求的密码套件，所以默认情况下实际启动的是这些密码套件的子集。这种密码套件在专门的应用程序中才能有用。

@return 密码套件名称的数组
@see #getEnabledCipherSuites()
@see #setEnabledCipherSuites(String [])

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String[] javax.net.ssl.SSLServerSocket.getSupportedProtocols()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回可以启用的协议的名称。

@return 支持的协议名称的数组
@see #getEnabledProtocols()
@see #setEnabledProtocols(String [])

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String[] javax.net.ssl.SSLServerSocket.getEnabledProtocols()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回当前新接受的连接启用的协议的名称。

@return 协议名称的数组
@see #getSupportedProtocols()
@see #setEnabledProtocols(String [])

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.net.ssl.SSLServerSocket.setEnabledProtocols(java.lang.String[] protocols)
<!-- END KEY -->
<!-- BEGIN DATA -->

 控制启用哪些特定的协议以供接受的连接使用。
 <P>
 该协议必须已经由 getSupportedProtocols() 将其作为受支持的协议列出。在成功调用此方法之后，仅启用了在 <code>protocols</code> 参数中列出的协议以便使用。
 <P>
 从 <code>accept()</code> 返回的 <code>SSLSocket</code> 继承此设置。

@param protocols 要启用的所有协议的名称。
@exception IllegalArgumentException 当一个或多个由参数命名的协议不受支持时，或 protocols 参数为 null时。
@see #getEnabledProtocols()
@see #getSupportedProtocols()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.net.ssl.SSLServerSocket.setNeedClientAuth(boolean need)
<!-- END KEY -->
<!-- BEGIN DATA -->

 控制<code>接受的</code>服务器模式 <code>SSLSocket</code> 是否将在开始时配置为<i>要求</i> 客户端验证。
 <P>
 套接字的客户端验证设置是下面的其中之一:
 <ul>
 <li> 必需的客户端验证
 <li> 请求的客户端验证
 <li> 不需要客户端验证
 </ul>
 <P>
 与 {@link #setWantClientAuth(boolean)} 不同，如果设置了接受的套接字的选项并且客户端选择不提供关于自己的验证信息，<i>协商将会停止且连接将被终止</i>。
 <P>
 调用此方法会重写由此方法或 {@link #setWantClientAuth(boolean)} 以前所做的任何设置。
 <P>
 最初继承的设置可以通过调用 {@link SSLSocket#setNeedClientAuth(boolean)} 或 {@link SSLSocket#setWantClientAuth(boolean)} 来重写。

@param	need 如果要求进行客户端验证，则设置为 true；如果不需要客户端验证，则设置为 false。
@see #getNeedClientAuth()
@see #setWantClientAuth(boolean)
@see #getWantClientAuth()
@see #setUseClientMode(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.net.ssl.SSLServerSocket.getNeedClientAuth()
<!-- END KEY -->
<!-- BEGIN DATA -->

 如果新 <code>accept</code> 的服务器模式的 <code>SSLSocket</code> <i>要求</i> 客户端验证，则返回 true。
 <P>
 最初继承的设置可以通过调用 {@link SSLSocket#setNeedClientAuth(boolean)} 或 {@link SSLSocket#setWantClientAuth(boolean)} 来重写。

@return	如果要求进行客户端验证，返回 true；如果不需要客户端验证，则返回 false。
@see #setNeedClientAuth(boolean)
@see #setWantClientAuth(boolean)
@see #getWantClientAuth()
@see #setUseClientMode(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.net.ssl.SSLServerSocket.setWantClientAuth(boolean want)
<!-- END KEY -->
<!-- BEGIN DATA -->

 控制 <code>accept</code> 服务器模式的 <code>SSLSockets</code> 是否将在开始时配置为<i>请求</i> 客户端验证。
 <P>
 套接字的客户端验证设置是下面的其中之一:
 <ul>
 <li> 必需的客户端验证
 <li> 请求的客户端验证
 <li> 不需要客户端验证
 </ul>
 <P>
 与 {@link #setNeedClientAuth(boolean)} 不同，如果设置了接受的套接字的选项并且客户端选择不提供关于自己的验证信息，则<i>协商将会继续</i>。
 <P>
 调用此方法会重写由此方法或 {@link #setNeedClientAuth(boolean)} 以前所做的任何设置。
 <P>
 最初继承的设置可以通过调用 {@link SSLSocket#setNeedClientAuth(boolean)} 或 {@link SSLSocket#setWantClientAuth(boolean)} 来重写。

@param	want 如果请求进行客户端验证，则设置为 true；如果不需要客户端验证，则设置为 false。
@see #getWantClientAuth()
@see #setNeedClientAuth(boolean)
@see #getNeedClientAuth()
@see #setUseClientMode(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.net.ssl.SSLServerSocket.getWantClientAuth()
<!-- END KEY -->
<!-- BEGIN DATA -->

 如果新接受的服务器模式的连接<i>请求</i> 客户端验证，则返回 true。
 <P>
 最初继承的设置可以通过调用 {@link SSLSocket#setNeedClientAuth(boolean)} 或 {@link SSLSocket#setWantClientAuth(boolean)} 来重写。

@return	如果请求进行客户端验证，则返回 true；如果不需要客户端验证，则返回 false。
@see #setWantClientAuth(boolean)
@see #setNeedClientAuth(boolean)
@see #getNeedClientAuth()
@see #setUseClientMode(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.net.ssl.SSLServerSocket.setUseClientMode(boolean mode)
<!-- END KEY -->
<!-- BEGIN DATA -->

 控制接受的连接是以（默认的）SSL 服务器模式还是在 SSL 客户端模式工作。
 <P>
 服务器通常对其自己进行验证，不要求客户端也这么做。
 <P>
 有时，TCP 服务器需要以SSL 客户端模式处理新接受的连接，但这种情况比较少见。例如，FTP 客户端在获得服务器套接字的同时侦听是否有来自服务器的反向连接。FTP 客户端将使用 &quot;client&quot; 模式的 SSLServerSocket 来接受反向的连接，而 FTP 服务器使用禁止 &quot;client&quot; 模式的 SSLSocket 来启动连接。在联络期间，可以重用已存在的 SSL 会话。
 <P>
 从 <code>accept()</code> 返回的 <code>SSLSocket</code> 继承此设置。

@param mode 如果新接受的连接应该使用 SSL 客户端模式，则此参数为 true。
@see #getUseClientMode()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.net.ssl.SSLServerSocket.getUseClientMode()
<!-- END KEY -->
<!-- BEGIN DATA -->

 如果接受的连接处于 SSL 客户端模式，则返回 true。

@see #setUseClientMode(boolean)
@return 如果连接应该使用 SSL 客户端模式，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.net.ssl.SSLServerSocket.setEnableSessionCreation(boolean flag)
<!-- END KEY -->
<!-- BEGIN DATA -->

 控制新 SSL 会话是否可以通过此服务器套接字创建的套接字建立。
 <P>
 从 <code>accept()</code> 返回的 <code>SSLSocket</code> 继承此设置。

@param flag 为 true 时指示可以创建会话，这是默认的；为 false 时指示必须恢复现有的会话。
@see #getEnableSessionCreation()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.net.ssl.SSLServerSocket.getEnableSessionCreation()
<!-- END KEY -->
<!-- BEGIN DATA -->

 如果新 SSL 会话可以通过此服务器套接字创建的套接字建立，则返回 true。

@return 为 true 时指示可以创建会话，这是默认的；为 false 时指示必须恢复现有的会话。
@see #setEnableSessionCreation(boolean)

<!-- END DATA -->
