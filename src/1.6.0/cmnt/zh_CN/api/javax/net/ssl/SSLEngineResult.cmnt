<!-- BEGIN KEY -->
public class javax.net.ssl.SSLEngineResult extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

<code>SSLEngine</code> I/O 调用所生成的结果状态的封装。

<p> <code>SSLEngine</code> 提供了在两个同位体之间建立安全通信会话的方式。<code>SSLEngine</code> 操作通常使用输入缓冲区中的字节，并在输出缓冲区生成字节。此类提供了描述 <code>SSLEngine</code> 状态的操作结果值，其中包括为了结束正在进行的握手而需要何种操作的指示。最后，它报告此操作使用和生成的字节数。

@see SSLEngine
@see SSLEngine#wrap(ByteBuffer, ByteBuffer)
@see SSLEngine#unwrap(ByteBuffer, ByteBuffer)

@author Brad R. Wetmore
@version 1.5, 04/04/19
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.SSLEngineResult(SSLEngineResult.Status status, SSLEngineResult.HandshakeStatus handshakeStatus, int bytesConsumed, int bytesProduced)
<!-- END KEY -->
<!-- BEGIN DATA -->

初始化此类的一个新实例。

@param	status 该操作的返回值。

@param	handshakeStatus 当前的握手状态。

@param	bytesConsumed 使用的源 ByteBuffer 中的字节数。

@param	bytesProduced 放入目标 ByteBuffer 中的字节数

@throws	IllegalArgumentException 如果 <code>status</code> 或 <code>handshakeStatus</code> 参数为 null，如果 &lt;&lt;code&gt;bytesConsumed</code> 或 <code>bytesProduced</code> 为负。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.net.ssl.SSLEngineResult.Status javax.net.ssl.SSLEngineResult.getStatus()
<!-- END KEY -->
<!-- BEGIN DATA -->

获得此 <code>SSLEngine</code> 操作的返回值。

@return 返回值

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.net.ssl.SSLEngineResult.HandshakeStatus javax.net.ssl.SSLEngineResult.getHandshakeStatus()
<!-- END KEY -->
<!-- BEGIN DATA -->

获得此 <code>SSLEngine</code> 操作的握手状态。

@return 握手状态

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.net.ssl.SSLEngineResult.bytesConsumed()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回使用的输入缓冲区中的字节数。

@return 使用的字节数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.net.ssl.SSLEngineResult.bytesProduced()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回写入到输出缓冲区中的字节数。

@return 生成的字节数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.net.ssl.SSLEngineResult.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此对象的字符串表示形式。

<!-- END DATA -->
