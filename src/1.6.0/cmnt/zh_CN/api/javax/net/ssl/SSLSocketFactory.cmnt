<!-- BEGIN KEY -->
public abstract class javax.net.ssl.SSLSocketFactory extends javax.net.SocketFactory
<!-- END KEY -->
<!-- BEGIN DATA -->

<code>SSLSocketFactory</code> 创建 <code>SSLSocket</code>。

@since 1.4
@see SSLSocket
@version 1.20
@author David Brownell

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.SSLSocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->

构造方法仅供子类使用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized javax.net.SocketFactory javax.net.ssl.SSLSocketFactory.getDefault()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回默认的 SSL 套接字工厂。

<p>第一次调用此方法时，将检查安全属性 "ssl.SocketFactory.provider"。如果它不为 null，则加载并实例化使用该名称的类。如果成功并且该对象是 SSLSocketFactory 的实例，则它成为默认的 SSL 套接字工厂。

<p>否则，此方法返回 <code>SSLContext.getDefault().getSocketFactory()</code>。 如果该调用失败，则返回无效的工厂。

@return 默认的 <code>SocketFactory</code>
@see SSLContext#getDefault

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String[] javax.net.ssl.SSLSocketFactory.getDefaultCipherSuites()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回默认情况下启用的密码套件的列表。除非启用了不同的列表，否则 SSL 连接上的联络将使用这些密码套件中的一个。这些默认值的最低服务质量是要求保护机密性和服务器验证（也就是说没有匿名的密码套件）。

@see #getSupportedCipherSuites()
@return 默认情况下启用的密码套件的数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String[] javax.net.ssl.SSLSocketFactory.getSupportedCipherSuites()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回可以在 SSL 连接上启用的密码套件的名称。通常，因为此列表可能包含不能满足这些默认值的服务质量要求的密码套件，所以默认情况下只能实际启用它们的子集。这种密码套件在专门的应用程序中才能有用。

@see #getDefaultCipherSuites()
@return 密码套件名称的数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.net.Socket javax.net.ssl.SSLSocketFactory.createSocket(Socket s, String host, int port, boolean autoClose) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回在连接到指定主机的给定端口的现有套接字上分层的套接字。通过代理使用 SSL 或者协商在已有的套接字上使用 SSL 时可以使用此构造方法。主机和端口号指的是逻辑同位体目标。使用为此工厂建立的套接字选项来配置此套接字。

@param s 已有的套接字
@param host 服务器主机
@param port 服务器端口
@param autoClose 关闭此套接字时关闭底层套接字
@return 连接到指定主机和端口的套接字
@throws IOException 如果创建套接字时出现 I/O 错误
@throws UnknownHostException 如果不能识别主机

<!-- END DATA -->
