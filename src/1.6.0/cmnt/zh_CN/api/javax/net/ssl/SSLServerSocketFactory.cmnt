<!-- BEGIN KEY -->
public abstract class javax.net.ssl.SSLServerSocketFactory extends javax.net.ServerSocketFactory
<!-- END KEY -->
<!-- BEGIN DATA -->

<code>SSLServerSocketFactory</code> 创建 <code>SSLServerSocket</code>。

@since 1.4
@see SSLSocket
@see SSLServerSocket
@version 1.22
@author David Brownell

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.net.ssl.SSLServerSocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->

构造方法仅供子类使用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized javax.net.ServerSocketFactory javax.net.ssl.SSLServerSocketFactory.getDefault()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回默认的 SSL 服务器套接字工厂。

<p>第一次调用此方法时，将检查安全属性 "ssl.ServerSocketFactory.provider"。如果它不为 null，则加载并实例化使用该名称的类。如果成功并且该对象是 SSLServerSocketFactory 的实例，则它成为默认的 SSL 服务器套接字工厂。

<p>否则，此方法返回 <code>SSLContext.getDefault().getServerSocketFactory()</code>。如果该调用失败，则返回无效的工厂。

@return 默认的 <code>ServerSocketFactory</code>
@see SSLContext#getDefault

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String[] javax.net.ssl.SSLServerSocketFactory.getDefaultCipherSuites()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回默认情况下启用的密码套件的列表。除非启用了不同的列表，否则 SSL 连接上的联络将使用这些密码套件中的一个。这些默认值的最低服务质量是要求保护机密性和服务器验证（也就是说没有匿名的密码套件）。

@see #getSupportedCipherSuites()
@return 默认情况下启用的密码套件的数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String[] javax.net.ssl.SSLServerSocketFactory.getSupportedCipherSuites()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回可以在由此工厂创建的 SSL 连接上启用的密码套件的名称。通常，因为此列表可能包含不能满足这些默认值的服务质量要求的密码套件，所以默认情况下只能实际启用它们的子集。这种密码套件在专门的应用程序中才能有用。

@return 密码套件名称的数组
@see #getDefaultCipherSuites()

<!-- END DATA -->
