<!-- BEGIN KEY -->
public class javax.net.ssl.HandshakeCompletedEvent extends java.util.EventObject
<!-- END KEY -->
<!-- BEGIN DATA -->

此事件指示在给定的 SSL 连接上 SSL 握手结束。所有关于该握手结果的核心信息都通过 &quot;SSLSession&quot; 对象捕获。出于方便的考虑，此事件类提供对一些重要会话属性的直接访问。

<P> 此事件的源是在其上刚刚结束握手的 SSLSocket。

@see SSLSocket
@see HandshakeCompletedListener
@see SSLSession

@since 1.4
@version 1.23
@author David Brownell

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.HandshakeCompletedEvent(SSLSocket sock, SSLSession s)
<!-- END KEY -->
<!-- BEGIN DATA -->

构造一个新的 HandshakeCompletedEvent。

@param sock 作为事件源的 SSLSocket
@param s 与此事件相关联的 SSLSession

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.SSLSession javax.net.ssl.HandshakeCompletedEvent.getSession()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回触发此事件的会话。

@return 此握手的 <code>SSLSession</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.net.ssl.HandshakeCompletedEvent.getCipherSuite()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回由握手产生的会话所使用的密码套件。（这是从 SSLsession 获取密码套件的便捷方法。）

@return 在此会话期间协商的密码套件名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.Certificate[] javax.net.ssl.HandshakeCompletedEvent.getLocalCertificates()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回握手期间发送到同位体的证书。注：仅当使用基于证书的密码套件时此方法才有用。

当在一次握手中有多个证书可供使用时，实现选择它认为是&ldquo;最好的&rdquo;可用证书链，并把它传输到另一方。此方法允许调用者知道实际所使用的证书链。

@return 证书的有序数组，本地证书在前，后跟所有证书颁发机构。如果没有发送任何证书，则返回 null。
@see #getLocalPrincipal()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.Certificate[] javax.net.ssl.HandshakeCompletedEvent.getPeerCertificates() throws javax.net.ssl.SSLPeerUnverifiedException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回同位体的标识，同位体是作为定义会话的一部分而建立的。注：仅当使用基于证书的密码套件时才可以使用此方法；将它与非基于证书的密码套件（如 Kerberos）一起使用将抛出 SSLPeerUnverifiedException。

@return 同位体证书的有序数组，同位体自己的证书在前，后跟所有证书颁发机构。
@exception SSLPeerUnverifiedException 如果没有验证同位体。
@see #getPeerPrincipal()

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.cert.X509Certificate[] javax.net.ssl.HandshakeCompletedEvent.getPeerCertificateChain() throws javax.net.ssl.SSLPeerUnverifiedException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回同位体的标识，同位体是作为定义会话的一部分而标识的。注：仅当使用基于证书的密码套件时才可以使用此方法；将它与非基于证书的密码套件（如 Kerberos）一起使用将抛出 SSLPeerUnverifiedException。

<p><em>注：此方法存在是为了和以前的版本兼容。新的应用程序应该使用 {@link #getPeerCertificates}。</em></p>

@return 同位体 X.509 证书的有序数组，同位体自己的证书在前，后跟所有证书颁发机构。（证书的格式是初始的 JSSE {@link javax.security.cert.X509Certificate} 格式。）
@exception SSLPeerUnverifiedException 如果同位体未经验证。
@see #getPeerPrincipal()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.Principal javax.net.ssl.HandshakeCompletedEvent.getPeerPrincipal() throws javax.net.ssl.SSLPeerUnverifiedException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回同位体的标识，同位体是作为定义会话的一部分而建立的。

@return 同位体的主体。返回基于 X509 的密码套件的最终实体证书的 X500Principal，以及 Kerberos 的密码套件的 KerberosPrincipal。

@throws SSLPeerUnverifiedException 如果尚未验证同位体的标识

@see #getPeerCertificates()
@see #getLocalPrincipal()

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.Principal javax.net.ssl.HandshakeCompletedEvent.getLocalPrincipal()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回握手期间发送到同位体的主体。

@return 发送到同位体的主体。返回基于 X509 的密码套件的最终实体证书的 X500Principal，以及 Kerberos 的密码套件的 KerberosPrincipal。如果没有发送任何主体，则返回 null。

@see #getLocalCertificates()
@see #getPeerPrincipal()

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.SSLSocket javax.net.ssl.HandshakeCompletedEvent.getSocket()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回作为此事件源的套接字。（这是一个方便的功能，使应用程序无需进行强制类型转换即可写入代码。）

@return 返回在其上进行连接的套接字。

<!-- END DATA -->
