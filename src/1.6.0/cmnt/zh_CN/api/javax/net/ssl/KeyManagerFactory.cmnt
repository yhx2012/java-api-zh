<!-- BEGIN KEY -->
public class javax.net.ssl.KeyManagerFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

此类充当基于密钥内容源的密钥管理器的工厂。每个密钥管理器管理特定类型的、由安全套接字所使用的密钥内容。密钥内容是基于 KeyStore 和/或提供者特定的源。

@since 1.4
@see KeyManager
@version 1.17, 01/29/04

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.net.ssl.KeyManagerFactory(KeyManagerFactorySpi factorySpi, Provider provider, String algorithm)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建 KeyManagerFactory 对象。

@param factorySpi 委托
@param provider 提供者
@param algorithm 算法

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm()
<!-- END KEY -->
<!-- BEGIN DATA -->

获取默认的 KeyManagerFactory 算法名称。

<p>默认的算法可以在运行时改变，方法是通过把 &quot;ssl.KeyManagerFactory.algorithm&quot; 安全属性（在 Java 安全属性文件或通过调用 {@link java.security.Security#setProperty(java.lang.String, java.lang.String)} 来设置）的值设置为所需的算法名称。

@see java.security.Security#setProperty(java.lang.String, java.lang.String)
@return 在 Java 安全属性中指定的默认算法名称；如果不存在这种属性，则返回一个特定于实现的默认值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.net.ssl.KeyManagerFactory.getAlgorithm()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>KeyManagerFactory</code> 对象的算法名称。

<p>这与创建此 <code>KeyManagerFactory</code> 对象的某个 <code>getInstance</code> 调用中所指定的名称相同。

@return 此 <code>KeyManagerFactory</code> 对象的算法名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.net.ssl.KeyManagerFactory javax.net.ssl.KeyManagerFactory.getInstance(String algorithm) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

 返回充当密钥管理器工厂的 <code>KeyManagerFactory</code> 对象。

 <p> 此方法从首选 Provider 开始遍历已注册安全提供者列表。返回一个封装 KeyManagerFactorySpi 实现的新 KeyManagerFactory 对象，该实现取自支持指定算法的第一个 Provider。

 <p> 注意，可以通过 {@link Security#getProviders() Security.getProviders()} 方法获取已注册提供者列表。

 @param algorithm 所请求算法的标准名称。有关标准算法名称的信息，请参阅 <a href=
	"{@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html">
		Java Secure Socket Extension Reference Guide </a>。

 @return 新的 <code>KeyManagerFactory</code> 对象。

 @exception NoSuchAlgorithmException 如果没有 Provider 支持指定算法的 KeyManagerFactorySpi 实现。
 
 @see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.net.ssl.KeyManagerFactory javax.net.ssl.KeyManagerFactory.getInstance(String algorithm, String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->

 返回充当密钥管理器工厂的 <code>KeyManagerFactory</code> 对象。

 <p> 返回一个封装 KeyManagerFactorySpi 实现的新 KeyManagerFactory 对象，该实现取自指定的提供者。指定的提供者必须在安全提供者列表中注册。

 <p> 注意，可以通过 {@link Security#getProviders() Security.getProviders()} 方法获取已注册提供者列表。

 @param algorithm 所请求算法的标准名称。有关标准算法名称的信息，请参阅 <a href=
	"{@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html">
		Java Secure Socket Extension Reference Guide </a>。

 @param provider 提供者的名称。

 @return 新的 <code>KeyManagerFactory</code> 对象。

 @throws NoSuchAlgorithmException 如果不能从指定提供者获得指定算法的 KeyManagerFactorySpi 实现。

 @throws NoSuchProviderException 如果指定提供者未在安全提供者列表中注册。

 @throws IllegalArgumentException 如果提供者的名称为 null 或空。

 @see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.net.ssl.KeyManagerFactory javax.net.ssl.KeyManagerFactory.getInstance(String algorithm, Provider provider) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

 返回充当密钥管理器工厂的 <code>KeyManagerFactory</code> 对象。

 <p> 返回一个封装 KeyManagerFactorySpi 实现的新 KeyManagerFactory 对象，该实现取自指定的 Provider 对象。注意，指定的 Provider 对象无需在提供者列表中注册。

 @param algorithm 所请求算法的标准名称。有关标准算法名称的信息，请参阅 <a href=
	"{@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html">
		Java Secure Socket Extension Reference Guide </a>。

 @param provider 提供者的实例。

 @return 新的 <code>KeyManagerFactory</code> 对象。

 @throws NoSuchAlgorithmException 不能从指定 Provider 对象获得指定算法的 KeyManagerFactorySpi 实现。

 @throws IllegalArgumentException 如果 provider 为 null。

 @see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider javax.net.ssl.KeyManagerFactory.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>KeyManagerFactory</code> 对象的提供者。

@return 此 <code>KeyManagerFactory</code> 对象的提供者

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.net.ssl.KeyManagerFactory.init(KeyStore ks, char[] password) throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->

使用密钥内容源初始化此工厂。
 <P>
提供者通常使用 KeyStore 来获取在安全套接字协商期间所使用的密钥内容。KeyStore 通常是受密码保护的。
 <P>
有关更多灵活初始化的信息，请参见 {@link #init(ManagerFactoryParameters)}。
 <P>

@param ks KeyStore 或 null
@param password 用来恢复 KeyStore 中密钥的密码
@throws KeyStoreException 如果此操作失败
@throws NoSuchAlgorithmException 如果指定的提供者中的指定算法不可用。
@throws UnrecoverableKeyException 如果不能恢复密钥（例如给定的 password 是错误的）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.net.ssl.KeyManagerFactory.init(ManagerFactoryParameters spec) throws java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->

使用特定于提供者的密钥内容源初始化此工厂。
 <P>
在某些情况下，提供者可能需要除 keystore 和密码以外的其他初始化参数。期望由该特定提供者的用户传递由提供者定义的适当 <CODE>ManagerFactoryParameters</CODE> 实现。然后提供者可以调用 <CODE>ManagerFactoryParameters</CODE> 实现中指定的方法来获取所需的信息。

@param spec 特定于提供者的参数规范实现
@throws InvalidAlgorithmParameterException 如果遇到了错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.net.ssl.KeyManager[] javax.net.ssl.KeyManagerFactory.getKeyManagers()
<!-- END KEY -->
<!-- BEGIN DATA -->

为每类密钥内容返回一个密钥管理器。

@return 密钥管理器
@throws IllegalStateException 如果 KeyManagerFactory 未初始化

<!-- END DATA -->
