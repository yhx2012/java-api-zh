<!-- BEGIN KEY -->
public abstract class javax.net.ssl.TrustManagerFactorySpi extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

此类为 <code>TrustManagerFactory</code> 类定义了<i>服务提供者接口</i> (<b>SPI</b>)。

<p> 此类中的所有抽象方法都必须由希望提供特定信任管理器工厂实现的每个加密服务提供者来实现。

@since 1.4
@see TrustManagerFactory
@see TrustManager
@version 1.12

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void javax.net.ssl.TrustManagerFactorySpi.engineInit(KeyStore ks) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->

用证书授权源和相关的信任材料初始化此工厂。

@param ks 密钥仓库或 null
@throws KeyStoreException 如果此操作失败
@see TrustManagerFactory#init(KeyStore)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void javax.net.ssl.TrustManagerFactorySpi.engineInit(ManagerFactoryParameters spec) throws java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->

使用特定于提供者的密钥材料源初始化此工厂。
 <P>
在某些情况下，提供者可能需要初始化参数而不是密钥仓库。期望由该特定提供者的用户传递由提供者定义的适当 <CODE>ManagerFactoryParameters</CODE> 实现。然后提供者可以调用 <CODE>ManagerFactoryParameters</CODE> 实现中指定的方法来获取所需的信息。

@param spec 一个特定于提供者的参数规范的实现
@throws InvalidAlgorithmParameterException 如果参数有问题
@see TrustManagerFactory#init(ManagerFactoryParameters spec)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract javax.net.ssl.TrustManager[] javax.net.ssl.TrustManagerFactorySpi.engineGetTrustManagers()
<!-- END KEY -->
<!-- BEGIN DATA -->

为每种信任材料返回一个信任管理器。

@return 信任管理器

<!-- END DATA -->
