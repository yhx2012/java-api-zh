<!-- BEGIN KEY -->
public abstract class javax.net.SocketFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

此类创建套接字。它可以被其他工厂子类化，这些工厂创建特定的套接字子类，从而为其他的公共套接字级功能提供了通用框架。

<P> 套接字工厂是一种捕获与正被创建的套接字相关的各种策略的简单方式，以不需要对请求套接字的代码进行特殊配置的方式生成这种套接字。  <UL>

	<LI> 由于工厂和套接字的多态性，只要通过向应用程序代码传递不同种类的工厂，那么相同的应用程序代码就可使用不同种类的套接字。

	<LI> 可以使用构造套接字时所用的参数来自定义工厂本身。因此举例来说，可以自定义工厂返回带有不同网络超时或已经配置好的安全参数的套接字。

	<LI> 返回给应用程序的套接字可以是 java.net.Socket 的子类，这样它们可以直接为诸如压缩、安全性、记录标记、统计信息收集或防火墙隧道等特性公开新的 API。

	</UL>

<P> 工厂类由特定于环境的配置机制来指定。例如，<em>getDefault</em> 方法可以返回适合于特定用户或 applet 的工厂，框架可以使用为其自身目的所自定义的工厂。

@since 1.4
@see ServerSocketFactory

@version 1.17
@author David Brownell

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.net.SocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->

创建一个 <code>SocketFactory</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.net.SocketFactory javax.net.SocketFactory.getDefault()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回该环境默认套接字工厂的一个副本。

@return 默认的 <code>SocketFactory</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.Socket javax.net.SocketFactory.createSocket() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

创建一个未连接的套接字。

@return 未连接的套接字
@throws IOException 如果不能创建套接字
@see java.net.Socket#connect(java.net.SocketAddress)
@see java.net.Socket#connect(java.net.SocketAddress, int)
@see java.net.Socket#Socket()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.net.Socket javax.net.SocketFactory.createSocket(String host, int port) throws java.io.IOException, java.net.UnknownHostException
<!-- END KEY -->
<!-- BEGIN DATA -->

创建一个套接字并把它连接到指定远程主机上的指定远程端口。使用为此工厂建立的套接字选项来配置此套接字。

@param host 服务器主机
@param port 服务器端口
@return <code>Socket</code>
@throws IOException 如果创建套接字时出现 I/O 错误
@throws UnknownHostException 如果主机是未知的
@see java.net.Socket#Socket(String, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.net.Socket javax.net.SocketFactory.createSocket(String host, int port, InetAddress localHost, int localPort) throws java.io.IOException, java.net.UnknownHostException
<!-- END KEY -->
<!-- BEGIN DATA -->

创建一个套接字并把它连接到指定远程主机上的指定远程端口。套接字还会绑定到提供的本地地址和端口。使用为此工厂建立的套接字选项来配置此套接字。

@param host 服务器主机
@param port 服务器端口
@param localHost 套接字绑定到的本地地址
@param localPort 套接字绑定到的本地端口
@return <code>Socket</code>
@throws IOException 如果创建套接字时出现 I/O 错误
@throws UnknownHostException 如果主机是未知的
@see java.net.Socket#Socket(String, int, java.net.InetAddress, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.net.Socket javax.net.SocketFactory.createSocket(InetAddress host, int port) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

创建一个套接字并把它连接到指定地址上的指定端口号。使用为此工厂建立的套接字选项来配置此套接字。

@param host 服务器主机
@param port 服务器端口
@return <code>Socket</code>
@throws IOException 如果创建套接字时出现 I/O 错误
@see java.net.Socket#Socket(java.net.InetAddress, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.net.Socket javax.net.SocketFactory.createSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

创建一个套接字并把它连接到指定远程端口上的指定远程地址。套接字还会绑定到提供的本地地址和端口。使用为此工厂建立的套接字选项来配置此套接字。

@param address 服务器网络地址
@param port 服务器端口
@param localAddress 客户端网络地址
@param localPort 客户端端口
@return <code>Socket</code>
@throws IOException 如果创建套接字时出现 I/O 错误
@see java.net.Socket#Socket(java.net.InetAddress, int, java.net.InetAddress, int)

<!-- END DATA -->
