<!-- BEGIN KEY -->
public static interface javax.tools.JavaCompiler.CompilationTask extends java.util.concurrent.Callable
<!-- END KEY -->
<!-- BEGIN DATA -->
表示编译任务的 future 的接口。编译任务尚未开始。要开始任务，请调用 {@linkplain #call call} 方法。

<p>在调用 call 方法之前，还可以通过调用 {@linkplain #setProcessors setProcessors} 之类的方法配置任务的其他方面。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.tools.JavaCompiler.CompilationTask.setProcessors(java.lang.Iterable<? extends javax.annotation.processing.Processor> processors)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置处理器（用于注释处理）。这将绕过正常的发现机制。

@param processors 处理器（用于注释处理）
@throws IllegalStateException 如果任务已经开始

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.tools.JavaCompiler.CompilationTask.setLocale(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置格式化诊断和其他本地化数据时要应用的语言环境。

@param locale 要应用的语言环境；如果为 {@code null}，则表示没有应用语言环境
@throws IllegalStateException 如果任务已经开始

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Boolean javax.tools.JavaCompiler.CompilationTask.call()
<!-- END KEY -->
<!-- BEGIN DATA -->
执行此编译任务。编译只能被执行一次。此方法的后续调用将抛出 IllegalStateException。

@return 当且仅当编译了所有文件且没有出现错误时，返回 true；否则返回 false

@throws RuntimeException 如果在用户提供的组件中发生不可恢复的错误。{@linkplain Throwable#getCause() cause} 为用户代码中的错误。
@throws IllegalStateException 如果多次调用此方法

<!-- END DATA -->
