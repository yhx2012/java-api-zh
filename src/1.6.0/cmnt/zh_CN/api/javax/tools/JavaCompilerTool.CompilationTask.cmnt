<!-- BEGIN KEY -->
public static interface javax.tools.JavaCompilerTool.CompilationTask extends java.lang.Runnable
<!-- END KEY -->
<!-- BEGIN DATA -->
 Interface representing a future for a compilation task.  The
 compilation task has not yet started.  To start the task, call
 the {@linkplain #run run} method directly or indirectly.

 <p>Before calling the run method, additional aspects of the
 task can be configured, for example, by calling the {@linkplain
 #setProcessors setProcessors} method.

 <p><b>Warning regarding thread-safety:</b> although this
 interface extends Runnable there are no requirements on
 implementations to be thread-safe.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.tools.JavaCompilerTool.CompilationTask.setProcessors(java.lang.Iterable<? extends javax.annotation.processing.Processor> processors)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets processors (for annotation processing).  This will
 bypass the normal discovery mechanism.

 @param processors processors (for annotation processing)
 @throws IllegalStateException if the task has started

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.tools.JavaCompilerTool.CompilationTask.run()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Completes this compilation task.  The compilation will only
 be performed once.  Subsequent calls to this method have no
 effect.

 @throws RuntimeException if an unrecoverable error occurred
 in a user-supplied component.  The cause will be the error
 in user code.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.tools.JavaCompilerTool.CompilationTask.getResult()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the result of this compilation task.  The task
 will be completed before returning from this method by
 calling the {@linkplain #run run} method.

 @return true if and only all the files compiled without errors;
 false otherwise
 @throws RuntimeException if an unrecoverable error
 occurred in a user supplied component.  The cause will be the
 error in user code.

<!-- END DATA -->
