<!-- BEGIN KEY -->
public class javax.tools.SimpleJavaFileObject extends java.lang.Object implements javax.tools.JavaFileObject
<!-- END KEY -->
<!-- BEGIN DATA -->
为 JavaFileObject 中的大多数方法提供简单实现。应子类化此类并用作 JavaFileObject 实现的基础。子类可以重写此类任意方法的实现和规范，只要不违背 JavaFileObject 的常规协定。

@author Peter von der Ah&eacute;
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.net.URI javax.tools.SimpleJavaFileObject.uri
<!-- END KEY -->
<!-- BEGIN DATA -->
此文件对象的 URI。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final javax.tools.JavaFileObject.Kind javax.tools.SimpleJavaFileObject.kind
<!-- END KEY -->
<!-- BEGIN DATA -->
此文件对象的种类。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.tools.SimpleJavaFileObject(URI uri, JavaFileObject.Kind kind)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定 URI 构建给定种类的 SimpleJavaFileObject。

@param uri 此文件对象的 URI
@param kind 此文件对象的种类

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream javax.tools.SimpleJavaFileObject.openInputStream() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
此实现总是抛出 {@linkplain UnsupportedOperationException}。子类可以更改此行为，只要不违背 {@link FileObject} 的协定。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.OutputStream javax.tools.SimpleJavaFileObject.openOutputStream() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
此实现总是抛出 {@linkplain UnsupportedOperationException}。子类可以更改此行为，只要不违背 {@link FileObject} 的协定。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Reader javax.tools.SimpleJavaFileObject.openReader(boolean ignoreEncodingErrors) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
在 Reader 中包装 {@linkplain #getCharContent} 的结果。子类可以更改此行为，只要不违背 {@link FileObject} 的协定。

@param  ignoreEncodingErrors {@inheritDoc}
@return 包装 getCharContent 结果的 Reader
@throws IllegalStateException {@inheritDoc}
@throws UnsupportedOperationException {@inheritDoc}
@throws IOException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.CharSequence javax.tools.SimpleJavaFileObject.getCharContent(boolean ignoreEncodingErrors) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
此实现总是抛出 {@linkplain UnsupportedOperationException}。子类可以更改此行为，只要不违背 {@link FileObject} 的协定。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Writer javax.tools.SimpleJavaFileObject.openWriter() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
在 Writer 中包装 openOutputStream 的结果。子类可以更改此行为，只要不违背 {@link FileObject} 的协定。

@return 包装 openOutputStream 结果的 Writer
@throws IllegalStateException {@inheritDoc}
@throws UnsupportedOperationException {@inheritDoc}
@throws IOException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.tools.SimpleJavaFileObject.getLastModified()
<!-- END KEY -->
<!-- BEGIN DATA -->
此实现返回 {@code 0L}。子类可以更改此行为，只要不违背 {@link FileObject} 的协定。

@return {@code 0L}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.tools.SimpleJavaFileObject.delete()
<!-- END KEY -->
<!-- BEGIN DATA -->
此实现不执行任何操作。子类可以更改此行为，只要不违背 {@link FileObject} 的协定。

@return {@code false}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.tools.JavaFileObject.Kind javax.tools.SimpleJavaFileObject.getKind()
<!-- END KEY -->
<!-- BEGIN DATA -->
@return {@code this.kind}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.tools.SimpleJavaFileObject.isNameCompatible(String simpleName, JavaFileObject.Kind kind)
<!-- END KEY -->
<!-- BEGIN DATA -->
此实现对其 URI 路径和给定简单名称进行比较。如果给定种类等于此对象的种类，并且路径等于 {@code simpleName + kind.extension} 或者路径以 {@code &quot;/&quot; + simpleName + kind.extension} 结尾，则此方法返回 true。

<p>此方法调用 {@link #getKind} 和 {@link #toUri} 并且不直接访问 {@link #uri} 和 {@link #kind} 字段。

<p>子类可以更改此行为，只要不违背 {@link JavaFileObject} 的协定。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.element.NestingKind javax.tools.SimpleJavaFileObject.getNestingKind()
<!-- END KEY -->
<!-- BEGIN DATA -->
此实现返回 {@code null}。子类可以更改此行为，只要不违背 {@link JavaFileObject} 的协定。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.element.Modifier javax.tools.SimpleJavaFileObject.getAccessLevel()
<!-- END KEY -->
<!-- BEGIN DATA -->
此实现返回 {@code null}。子类可以更改此行为，只要不违背 {@link JavaFileObject} 的协定。

<!-- END DATA -->
