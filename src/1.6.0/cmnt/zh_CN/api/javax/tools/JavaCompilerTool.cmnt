<!-- BEGIN KEY -->
public interface javax.tools.JavaCompilerTool extends javax.tools.Tool, javax.tools.OptionChecker
<!-- END KEY -->
<!-- BEGIN DATA -->
 Interface to invoke Java compilers from Java programs.

 <p>The compiler might generate diagnostics during compilation (for
 example, error messages).  If a diagnostic listener is provided,
 the diagnostics will be supplied to the listener.  If no listener
 is provided, the diagnostics will be formatted in an unspecified
 format and written to the default output, which is {@code
 System.err} unless otherwise specified.  Even if a diagnostic
 listener is supplied, some diagnostics might not fit in a {@code
 Diagnostic} and will be written to the default output.

 <p>A compiler tool has an associated standard file manager, which
 is the file manager that is native to the tool (or built-in).  The
 standard file manager can be obtained by calling {@linkplain
 #getStandardFileManager getStandardFileManager}.

 <p>A compiler tool must function with any file manager as long as
 any additional requirements as detailed in the methods below are
 met.  If no file manager is provided, the compiler tool will use a
 standard file manager such as the one returned by {@linkplain
 #getStandardFileManager getStandardFileManager}.

 <p>An instance implementing this interface must conform to the Java
 Language Specification and generate class files conforming to the
 Java Virtual Machine specification.  The versions of these
 specifications are defined in the {@linkplain Tool} interface.

 <p>The compiler relies on two services: {@linkplain
 DiagnosticListener diagnostic listener} and {@linkplain
 JavaFileManager file manager}.  Although most classes and
 interfaces in this package defines an API for Java compilers (and
 tools in general) the interfaces {@linkplain DiagnosticListener},
 {@linkplain JavaFileManager}, {@linkplain FileObject}, and
 {@linkplain JavaFileObject} are not intended to be used in
 applications.  Instead these interfaces are intended to be
 implemented and used to provide customized services for a Java
 compiler and thus defines an SPI for Java compilers.

 <p>There are a number of classes and interfaces in this package
 which are designed to ease the implementation of the SPI to
 customize the behavior of a Java compiler:

 <dl>
   <dt>{@link StandardJavaFileManager}</dt>
   <dd>

     Every Java compiler which implements this interface provides a
     standard file manager for operating on regular {@linkplain
     java.io.File files}.  The StandardJavaFileManager interface
     defines additional methods for creating file objects from
     regular files.

     <p>The standard file manager serves two purposes:

     <ul>
       <li>basic building block for customizing how a compiler reads
       and writes files</li>
       <li>sharing between multiple compilation tasks</li>
     </ul>

     <p>Reusing a file manager can potentially reduce overhead of
     scanning the file system and reading jar files.  Although there
     might be no reduction in overhead, a standard file manager must
     work with multiple sequential compilations making the following
     example a recommended coding pattern:

     <pre>
       Files[] files1 = ... ; // input for first compilation task
       Files[] files2 = ... ; // input for second compilation task

       JavaCompilerTool compiler = ToolProvider.getSystemJavaCompilerTool();
       StandardJavaFileManager fileManager = compiler.getStandardFileManager(null);

       {@code Iterable<? extends JavaFileObject>} compilationUnits1 =
           fileManager.getJavaFileObjectsFromFiles({@linkplain java.util.Arrays#asList Arrays.asList}(files1));
       compiler.getTask(null, fileManager, null, null, null, compilationUnits1).run();

       {@code Iterable<? extends JavaFileObject>} compilationUnits2 =
           fileManager.getJavaFileObjectsFromFiles(Arrays.asList(files2));
       // reuse the same file manager to allow caching of jar files
       compiler.getTask(null, fileManager, null, null, null, compilationUnits2).run();

       fileManager.close();</pre>

   </dd>

   <dt>{@link DiagnosticCollector}</dt>
   <dd>
     Used to collect diagnostics in a list, for example:
     <pre>
       {@code Iterable<? extends JavaFileObject>} compilationUnits = ...;
       JavaCompilerTool compiler = ToolProvider.getSystemJavaCompilerTool();
       {@code DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<JavaFileObject>();}
       StandardJavaFileManager fileManager = compiler.getStandardFileManager(diagnostics);
       compiler.getTask(null, fileManager, diagnostics, null, null, compilationUnits).run();

       for (Diagnostic diagnostic : diagnostics.getDiagnostics())
           System.out.format("Error on line %d in %d%n",
                             diagnostic.getLineNumber()
                             diagnostic.getSource().toUri());

       fileManager.close();</pre>
   </dd>

   <dt>
     {@link ForwardingJavaFileManager}, {@link ForwardingFileObject}, and
     {@link ForwardingJavaFileObject}
   </dt>
   <dd>

     Subclassing is not available for overriding the behavior of a
     standard file manager as it is created by calling a method on a
     compiler, not by invoking a constructor.  Instead forwarding
     (or delegation) should be used.  These classes makes it easy to
     forward most calls to a given file manager or file object while
     allowing customizing behavior.  For example, consider how to
     log all calls to {@linkplain JavaFileManager#flush}:

     <pre>
       final {@linkplain java.util.logging.Logger Logger} logger = ...;
       {@code Iterable<? extends JavaFileObject>} compilationUnits = ...;
       JavaCompilerTool compiler = ToolProvider.getSystemJavaCompilerTool();
       StandardJavaFileManager stdFileManager = compiler.getStandardFileManager(null);
       JavaFileManager fileManager = new ForwardingJavaFileManager(stdFileManager) {
           public void flush() {
               logger.entering(StandardJavaFileManager.class.getName(), "flush");
               super.flush();
               logger.exiting(StandardJavaFileManager.class.getName(), "flush");
           }
       };
       compiler.getTask(null, fileManager, null, null, null, compilationUnits).run();</pre>
   </dd>

   <dt>{@link SimpleJavaFileObject}</dt>
   <dd>

     This class provides a basic file object implementation which
     can be used as building block for creating file objects.  For
     example, here is how to define a file object which represent
     source code stored in a string:

     <pre>
       /**
        * A file object used to represent source coming from a string.
        {@code *}/
       public class JavaSourceFromString extends SimpleJavaFileObject {
           /**
            * The source code of this "file".
            {@code *}/
           final String code;

           /**
            * Constructs a new JavaSourceFromString.
            * {@code @}param name the name of the compilation unit represented by this file object
            * {@code @}param code the source code for the compilation unit represented by this file object
            {@code *}/
           JavaSourceFromString(String name, String code) {
               super({@linkplain java.net.URI#create URI.create}("string:///" + name.replace('.','/') + Kind.SOURCE.extension),
                     Kind.SOURCE);
               this.code = code;
           }

           {@code @}Override
           public CharSequence getCharContent(boolean ignoreEncodingErrors) {
               return code;
           }
       }</pre>
   </dd>
 </dl>

 @author Peter von der Ah&eacute;
 @author Jonathan Gibbons
 @see DiagnosticListener
 @see Diagnostic
 @see JavaFileManager
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.tools.JavaCompilerTool.CompilationTask javax.tools.JavaCompilerTool.getTask(Writer out, JavaFileManager fileManager, javax.tools.DiagnosticListener<? super javax.tools.JavaFileObject> diagnosticListener, java.lang.Iterable<java.lang.String> options, java.lang.Iterable<java.lang.String> classes, java.lang.Iterable<? extends javax.tools.JavaFileObject> compilationUnits)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a future for a compilation task with the given
 components and arguments.  The compilation might not have
 completed as described in the CompilationTask interface.

 <p>If a file manager is provided, it must be able to handle all
 locations defined in {@link StandardLocation}.

 @param out a Writer for additional output from the compiler;
 use {@code System.err} if {@code null}
 @param fileManager a file manager; if {@code null} use the
 compiler's standard filemanager
 @param diagnosticListener a diagnostic listener; if {@code
 null} use the compiler's default method for reporting
 diagnostics
 @param options compiler options, {@code null} means no options
 @param classes class names (for annotation processing), {@code
 null} means no class names
 @param compilationUnits the compilation units to compile, {@code
 null} means no compilation units
 @return an object representing the compilation
 @throws RuntimeException if an unrecoverable error
 occurred in a user supplied component.  The cause will be the
 error in user code.
 @throws NullPointerException if any of the arguments options,
 classes, or compilationUnits contain {@code null} elements.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.tools.StandardJavaFileManager javax.tools.JavaCompilerTool.getStandardFileManager(javax.tools.DiagnosticListener<? super javax.tools.JavaFileObject> diagnosticListener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a new instance of the standard file manager implementation
 for this tool.  The file manager will use the given diagnostic
 listener for producing any non-fatal diagnostics.  Fatal errors
 will be signalled with the appropriate exceptions.

 <p>The standard file manager will be automatically reopened if
 it is accessed after calls to {@code flush} or {@code close}.
 The standard file manager must be usable with other tools.

 @param diagnosticListener a diagnostic listener for non-fatal
 diagnostics
 @return the standard file manager

<!-- END DATA -->
