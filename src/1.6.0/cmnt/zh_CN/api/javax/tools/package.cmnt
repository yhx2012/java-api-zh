<!-- BEGIN KEY -->
javax.tools
<!-- END KEY -->
<!-- BEGIN DATA -->
为能够从程序（例如，编译器）中调用的工具提供接口。

<p>要求这些接口和类作为 Java&trade;Platform, Standard Edition (Java SE) 的一部分，但是不要求提供任何实现它们的工具。

<p>除非明确允许，否则只要给定 {@code null} 参数或给定包含 {@code null} 元素的{@linkplain java.lang.Iterable 列表或集合}，此包中的所有方法都将抛出 {@linkplain java.lang.NullPointerException}。类似地，除非明确允许，否则所有方法都不可以返回 {@code null}。

<p>此包是 Java 编程语言编译器框架的主要部分。此框架允许框架的客户端查找并运行程序中的编译器。该框架还为结构化访问诊断（{@linkplain javax.tools.DiagnosticListener}）提供服务提供者接口（SPI），为重写文件访问提供文件抽象（{@linkplain javax.tools.JavaFileManager} 和 {@linkplain javax.tools.JavaFileObject}）。有关使用 SPI 的详细信息，请参阅 {@linkplain javax.tools.JavaCompiler}。

<p>运行时不需要编译器。然而，如果提供了默认编译器，则可以使用 {@linkplain javax.tools.ToolProvider} 查找它，例如：

<p>{@code JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();}

<p>可以通过{@linkplain java.util.ServiceLoader 服务提供者机制}提供可选编译器或工具。

<p>例如，如果 {@code com.vendor.VendorJavaCompiler} 是 {@code JavaCompiler} 工具的提供者，则其 jar 文件应包含 {@code META-INF/services/javax.tools.JavaCompiler} 文件。此文件将包含单行：

<p>{@code com.vendor.VendorJavaCompiler}

<p>如果 jar 文件在类路径上，则可以使用以下代码查找 VendorJavaCompiler：

<p>{@code JavaCompiler compiler = ServiceLoader.load(JavaCompiler.class).iterator().next();}

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6

<!-- END DATA -->
