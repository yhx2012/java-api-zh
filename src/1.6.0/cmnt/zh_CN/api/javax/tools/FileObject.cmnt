<!-- BEGIN KEY -->
public interface javax.tools.FileObject
<!-- END KEY -->
<!-- BEGIN DATA -->
工具的文件抽象。在这里，<em>文件</em> 是指常规文件和其他数据源的抽象。例如，文件对象可用于表示常规文件、内存缓存或数据库中的数据。

<p>如果发生安全异常，则此接口中的所有方法都将抛出 SecurityException。

<p>除非明确允许，否则只要给定 {@code null} 参数，此接口中的所有方法都将抛出 NullPointerException。

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URI javax.tools.FileObject.toUri()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回标识此文件对象的 URI。
@return URI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.tools.FileObject.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此文件对象的用户友好 (user-friendly) 的名称。没有指定返回的准确值，但是实现应该负责保存用户给定的名称。例如，如果用户在命令行中写入文件名 {@code &quot;BobsApp\Test.java&quot;}，则此方法应该返回 {@code &quot;BobsApp\Test.java&quot;}，而 {@linkplain #toUri toUri} 方法可能返回 {@code file:///C:/Documents%20and%20Settings/UncleBob/BobsApp/Test.java}。

@return 用户友好的名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream javax.tools.FileObject.openInputStream() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此文件对象的 InputStream。

@return InputStream
@throws IllegalStateException 如果此文件对象是为写入而打开的，不支持读取操作
@throws UnsupportedOperationException 如果这种文件对象不支持字节访问
@throws IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.OutputStream javax.tools.FileObject.openOutputStream() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此文件对象的 OutputStream。

@return OutputStream
@throws IllegalStateException 如果此文件对象是为读取而打开的，不支持写入操作
@throws UnsupportedOperationException 如果这种对象不支持字节访问
@throws IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Reader javax.tools.FileObject.openReader(boolean ignoreEncodingErrors) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的 reader。返回的 reader 将代替不能用默认转换字符解码的字节。此外，除非 {@code ignoreEncodingErrors} 为 true，否则 reader 可能报告一个诊断。

@param ignoreEncodingErrors 如果为 true，则忽略编码错误
@return Reader
@throws IllegalStateException 如果此文件对象是为写入而打开的，不支持读取操作
@throws UnsupportedOperationException 如果这种文件对象不支持字符访问
@throws IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.CharSequence javax.tools.FileObject.getCharContent(boolean ignoreEncodingErrors) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此文件对象的字符内容（如果有）。默认的转换字符将代替任何不能被解码的字节。此外，除非 {@code ignoreEncodingErrors} 为 true，否则可能报告一个诊断。

@param ignoreEncodingErrors 如果为 true，则忽略编码错误
@return CharSequence（如果有）；否则返回 {@code null}
@throws IllegalStateException 如果此文件对象是为写入而打开的，不支持读取操作
@throws UnsupportedOperationException 如果这种文件对象不支持字符访问
@throws IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Writer javax.tools.FileObject.openWriter() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此文件对象的 Writer。

@return Writer
@throws IllegalStateException 如果此文件对象是为读取而打开的，不支持写入操作
@throws UnsupportedOperationException 如果这种文件对象不支持字符访问
@throws IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.tools.FileObject.getLastModified()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取最后一次修改此文件对象的时间。该时间用距历元（1970 年 1 月 1 日 00:00:00，格林威治时间）的毫秒数计算。

@return 最后一次修改此文件对象的时间；如果该文件对象不存在，发生 I/O 错误或者不支持该操作，则返回 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.tools.FileObject.delete()
<!-- END KEY -->
<!-- BEGIN DATA -->
删除此文件对象。如果发生错误，则返回 false。
@return 当且仅当成功删除此文件对象时，返回 true；否则返回 false

<!-- END DATA -->
