<!-- BEGIN KEY -->
public class javax.tools.ForwardingJavaFileManager extends java.lang.Object implements javax.tools.JavaFileManager
<!-- END KEY -->
<!-- BEGIN DATA -->
将调用转发到给定的文件管理器。此类的子类可以重写其中某些方法，还可以提供附加字段和方法。

@param <M> 此对象将转发到的文件管理器的类型
@author Peter von der Ah&eacute;
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final M extends javax.tools.JavaFileManager javax.tools.ForwardingJavaFileManager.fileManager
<!-- END KEY -->
<!-- BEGIN DATA -->
一个文件管理器，所有方法都将委托给它。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.tools.ForwardingJavaFileManager(M fileManager)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 ForwardingJavaFileManager 的实例。
@param fileManager 委托给此文件管理器

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.ClassLoader javax.tools.ForwardingJavaFileManager.getClassLoader(JavaFileManager.Location location)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws SecurityException {@inheritDoc}
@throws IllegalStateException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Iterable<javax.tools.JavaFileObject> javax.tools.ForwardingJavaFileManager.list(JavaFileManager.Location location, String packageName, java.util.Set<javax.tools.JavaFileObject.Kind> kinds, boolean recurse) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws IOException {@inheritDoc}
@throws IllegalStateException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.tools.ForwardingJavaFileManager.inferBinaryName(JavaFileManager.Location location, JavaFileObject file)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws IllegalStateException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.tools.ForwardingJavaFileManager.isSameFile(FileObject a, FileObject b)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.tools.ForwardingJavaFileManager.handleOption(String current, java.util.Iterator<java.lang.String> remaining)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws IllegalArgumentException {@inheritDoc}
@throws IllegalStateException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.tools.JavaFileObject javax.tools.ForwardingJavaFileManager.getJavaFileForInput(JavaFileManager.Location location, String className, JavaFileObject.Kind kind) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws IllegalArgumentException {@inheritDoc}
@throws IllegalStateException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.tools.JavaFileObject javax.tools.ForwardingJavaFileManager.getJavaFileForOutput(JavaFileManager.Location location, String className, JavaFileObject.Kind kind, FileObject sibling) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws IllegalArgumentException {@inheritDoc}
@throws IllegalStateException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.tools.FileObject javax.tools.ForwardingJavaFileManager.getFileForInput(JavaFileManager.Location location, String packageName, String relativeName) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws IllegalArgumentException {@inheritDoc}
@throws IllegalStateException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.tools.FileObject javax.tools.ForwardingJavaFileManager.getFileForOutput(JavaFileManager.Location location, String packageName, String relativeName, FileObject sibling) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws IllegalArgumentException {@inheritDoc}
@throws IllegalStateException {@inheritDoc}

<!-- END DATA -->
