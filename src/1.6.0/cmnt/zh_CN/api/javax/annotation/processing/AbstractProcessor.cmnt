<!-- BEGIN KEY -->
public abstract class javax.annotation.processing.AbstractProcessor extends java.lang.Object implements javax.annotation.processing.Processor
<!-- END KEY -->
<!-- BEGIN DATA -->
旨在用作最具体注释 processor 的便捷超类的抽象注释 processor。此类检查注释值，以计算其子类型所支持的{@linkplain #getSupportedOptions 选项}、{@linkplain #getSupportedAnnotationTypes 注释}和{@linkplain #getSupportedSourceVersion 源版本}。

<p>在 processor 被{@linkplain #isInitialized 初始化}之后，获取方法可以使用可用设施来发出有关值得注意的条件的{@linkplain Messager#printMessage 警告}。
 
<p>只要遵守该方法的常规 {@link javax.annotation.processing.Processor Processor} 协定，子类可随意重写此类中任何方法的实现和规范。

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@version 1.8 06/07/17
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.annotation.processing.ProcessingEnvironment javax.annotation.processing.AbstractProcessor.processingEnv
<!-- END KEY -->
<!-- BEGIN DATA -->
工具框架提供的处理环境。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.annotation.processing.AbstractProcessor()
<!-- END KEY -->
<!-- BEGIN DATA -->
子类要调用的构造方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.lang.String> javax.annotation.processing.AbstractProcessor.getSupportedOptions()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 processor 类是使用 {@link SupportedOptions} 注释的，则返回一个不可修改的集合，该集合具有与注释相同的字符串集。如果类不是以这种方式注释的，则返回一个空集合。

@return 由此 processor 识别的选项；如果没有这样的选项，则返回一个空集合

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.lang.String> javax.annotation.processing.AbstractProcessor.getSupportedAnnotationTypes()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 processor 类是使用 {@link SupportedAnnotationTypes} 注释的，则返回一个不可修改的集合，该集合具有与注释相同的字符串集。如果类不是以这种方式注释的，则返回一个空集合。

@return 此 processor 所支持的注释类型的名称；如果没有这样的类型，则返回一个空集合

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.SourceVersion javax.annotation.processing.AbstractProcessor.getSupportedSourceVersion()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 processor 类是使用 {@link SupportedSourceVersion} 注释的，则返回注释中的源版本。如果类不是以这种方式注释的，则返回 {@link SourceVersion#RELEASE_6}。

@return 此 processor 所支持的最新的源版本

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.annotation.processing.AbstractProcessor.init(ProcessingEnvironment processingEnv)
<!-- END KEY -->
<!-- BEGIN DATA -->
用处理环境初始化 processor，方法是将 {@code processingEnv} 字段设置为 {@code processingEnv} 参数的值。如果在同一对象上多次调用此方法，则抛出 {@code IllegalStateException}。
 
@param processingEnv 用来访问工具框架提供给 processor 的设施的环境
@throws IllegalStateException 如果多次调用此方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.annotation.processing.AbstractProcessor.process(java.util.Set<? extends javax.lang.model.element.TypeElement> annotations, RoundEnvironment roundEnv)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Iterable<? extends javax.annotation.processing.Completion> javax.annotation.processing.AbstractProcessor.getCompletions(Element element, AnnotationMirror annotation, ExecutableElement member, String userText)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个空的 completion 迭代。

@param element {@inheritDoc}
@param annotation {@inheritDoc}
@param member {@inheritDoc}
@param userText {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized boolean javax.annotation.processing.AbstractProcessor.isInitialized()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此对象已被{@linkplain #init 初始化}，则返回 {@code true}，否则返回 {@code false}。

@return 如果此对象已被初始化，则返回 {@code true}，否则返回 {@code false}。

<!-- END DATA -->
