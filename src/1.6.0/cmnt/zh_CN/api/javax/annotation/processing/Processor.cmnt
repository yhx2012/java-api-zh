<!-- BEGIN KEY -->
public interface javax.annotation.processing.Processor
<!-- END KEY -->
<!-- BEGIN DATA -->
注释 Processor 的接口。

<p>注释处理是按照 {@linkplain javax.annotation.processing.RoundEnvironment round} 的顺序进行的。在每次进行 round 操作时，都会请求 Processor {@linkplain #process 处理}在前一个处理轮次生成的源文件和类文件上找到的注释子集。第一轮次处理的输入是工具运行的初始输入值；这些初始输入值可视为虚拟的第 0 轮次处理的输出。如果请求 Processor 在给定轮次上进行处理，那么它将被要求处理后续轮次，包括最后的轮次，即使没有要处理的注释也一样。工具框架可能还会请求 Processor 处理由工具的操作隐式生成的文件。

<p> {@code Processor} 的每次实现都必须提供一个公共的无参数构造方法，工具将使用该构造方法实例化 Processor。工具框架将与实现此接口的类交互，如下所示：

 <ol>

<li>如果不使用现有 {@code Processor} 对象，若要创建 Processor 实例，则工具将调用 Processor 类的无参数构造方法。

<li>接下来，工具调用具有适当 {@code ProcessingEnvironment} 的 {@link #init init} 方法。
 
<li>然后，工具调用 {@link #getSupportedAnnotationTypes getSupportedAnnotationTypes}、{@link #getSupportedOptions getSupportedOptions} 和 {@link #getSupportedSourceVersion getSupportedSourceVersion}。这些方法只在每次运行时调用一次，并非对每个处理轮次调用。

<li>在适当的时候，工具在 {@code Processor} 对象上调用 {@link #process process} 方法；<em>无需</em> 为每个处理轮次创建新的 {@code Processor} 对象。

 </ol>

如果创建了一个 Processor 对象，并在没有遵循上述协议的情况下使用它，那么该 Processor 的行为将不是由此接口规范所定义的。

<p> 该工具使用一个<i>搜索过程</i> 来查找注释 Processor，并确定是否应该运行它们。通过配置该工具，可以控制潜在的 Processor 集合。例如，对于 {@link javax.tools.JavaCompiler JavaCompiler}，要运行的候选 Processor 列表可以是{@linkplain javax.tools.JavaCompiler.CompilationTask#setProcessors 直接设置的}，也可以是通过用于{@linkplain java.util.ServiceLoader 服务样式}查找的{@linkplain javax.tools.StandardLocation#ANNOTATION_PROCESSOR_PATH 搜索路径}所控制的 Processor 列表。其他工具实现可能有不同的配置机制，比如命令行选项；有关详细信息，请参考特定工具的文档。工具请求{@linkplain #process 运行}哪一个 Processor 取决于{@linkplain RoundEnvironment#getRootElements 根元素}上出现哪些注释、{@linkplain #getSupportedAnnotationTypes Processor 处理哪些注释类型}以及 Processor 是否{@linkplain #process 声明它所处理的注释}。Processor 将被要求处理它所支持的注释类型的子集，该集合可能是一个空集。

对于给定的 round，工具计算根元素上的注释类型集。如果至少存在一个注释类型，那么当 Processor 声明注释类型时，将从不匹配的注释集移除它们。当该集合为空或者没有更多 Processor 可用时，round 将运行完成。如果不存在注释类型，注释处理仍然会发生，但只有支持处理 {@code "*"} 的<i>通用 Processor</i> 可以声明（空）注释类型集。

<p>注意，如果 Processor 支持 {@code "*"} 并返回 {@code true}，则声明所有注释。因此，通用 Processor（例如，用来实现其他有效性检查的通用 Processor）应该返回 {@code false}，以便允许运行其他这类检查器。

<p>如果 Processor 抛出一个未捕获的异常，那么工具可能停止其他活动的注释 Processor。如果某一 Processor 产生错误，那么当前 round 将运行完成，并且后续 round 将指示{@linkplain RoundEnvironment#errorRaised 产生了错误}。因为注释 Processor 是在协作环境下运行的，所以 Processor 只在错误恢复和报告都不可行的情况下才会抛出一个未捕获的异常。

<p>不要求工具环境支持以多线程方式访问环境资源（{@linkplain RoundEnvironment 每个 round} 或{@linkplain ProcessingEnvironment 跨 round}）的注释 Processor。
 
<p>如果返回有关注释 Processor 配置信息的方法返回 {@code null}、返回其他无效输入，或者抛出一个异常，则工具框架必须将此视为一种错误状态。

<p>为了可靠起见，当在不同工具实现中运行时，注释 Processor 应该具有以下属性：

 <ol>

<li>处理某一给定输入的结果不是其他输入存在或不存在的函数（正交性）。

<li>处理相同的输入将产生相同的输出（一致性）。

<li>处理输入 <i>A</i> 之后处理输入 <i>B</i> 等同于处理 <i>B</i> 然后处理 <i>A</i>（互换性）。

<li>处理输入并不依赖于其他注释 Processor 输出的存在（独立性）。

 </ol>

<p>{@link Filer} 接口讨论了关于 Processor 如何在文件上进行操作的限制。

<p>注意，此接口的实现者可能会发现扩展 {@link AbstractProcessor} 比直接实现此接口更便捷。
 
@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@version 1.13 06/08/28
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.lang.String> javax.annotation.processing.Processor.getSupportedOptions()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 Processor 识别的选项。处理工具的实现必须提供一种方式来传递特定于 Processor 的选项，这些选项不同于传递给工具自身的选项，请参见 {@link ProcessingEnvironment#getOptions getOptions}。

<p>集合中返回的每个字符串都必须是句点分隔的{@linkplain javax.lang.model.SourceVersion#isIdentifier 标识符}序列：

 <blockquote>
 <dl>
<dt><i>SupportedOptionString：</i>
<dd><i>标识符</i>
 <p>
<dt><i>标识符：</i>
<dd> <i>标识符</i>
<dd> <i>标识符</i> {@code .}<i>标识符</i>
 <p>
<dt><i>标识符：</i>
<dd>语法标识符，包括关键字和字面值
 </dl>
 </blockquote>

<p> 工具可以使用此信息来确定用户提供的任意选项是否无法被任何 Processor 识别，在这种情况下，可能希望它报告警报。

@return 此 Processor 识别的选项；如果没有这样的选项，则返回一个空集合
@see javax.annotation.processing.SupportedOptions

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.lang.String> javax.annotation.processing.Processor.getSupportedAnnotationTypes()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 Processor 支持的注释类型的名称。结果元素可能是某一受支持注释类型的规范（完全限定）名称。它也可能是 &quot;<tt><i>name</i>.*</tt>&quot; 形式的名称，表示所有以 &quot;<tt><i>name.</i></tt>&quot; 开头的规范名称的注释类型集合。最后，{@code "*"} 自身表示所有注释类型的集合，包括空集。注意，Processor 不应声明 {@code "*"}，除非它实际处理了所有文件；声明不必要的注释可能导致在某些环境中的性能下降。 

<p>集合中返回的每个字符串必须符合以下语法：

 <blockquote>
 <dl>
<dt><i>SupportedAnnotationTypeString:</i>
<dd><i>TypeName</i> <i>DotStar</i><sub><i>opt</i></sub>
 <dd><tt>*</tt>
 <p>
<dt><i>DotStar:</i>
 <dd><tt>.</tt> <tt>*</tt>
 </dl>
 </blockquote>

其中 <i>TypeName</i> 在 <i>Java 语言规范</i> 中定义。
 
@return 此 Processor 所支持的注释类型的名称
@see javax.annotation.processing.SupportedAnnotationTypes
@jls3 3.8 Identifiers
@jls3 6.5.5 Meaning of Type Names

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.SourceVersion javax.annotation.processing.Processor.getSupportedSourceVersion()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此注释 Processor 支持的最新的源版本。

@return 此注释 Processor 所支持的最新的源版本。
@see javax.annotation.processing.SupportedSourceVersion
@see ProcessingEnvironment#getSourceVersion

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.annotation.processing.Processor.init(ProcessingEnvironment processingEnv)
<!-- END KEY -->
<!-- BEGIN DATA -->
用处理环境初始化 Processor。
 
@param processingEnv 工具框架提供给 Processor 的设施的环境

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.annotation.processing.Processor.process(java.util.Set<? extends javax.lang.model.element.TypeElement> annotations, RoundEnvironment roundEnv)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理先前 round 产生的类型元素上的注释类型集，并返回这些注释是否由此 Processor 声明。如果返回 {@code true}，则这些注释已声明并且不要求后续 Processor 处理它们；如果返回 {@code false}，则这些注释未声明并且可能要求后续 Processor 处理它们。Processor 可能总是返回相同的 boolean 值，或者可能基于所选择的标准而返回不同的结果。

<p>如果 Processor 支持 {@code "*"} 并且根元素没有注释，则输入集合将为空。{@code Processor} 必须妥善处理空注释集。

@param annotations 请求处理的注释类型
@param roundEnv 有关当前和以前 round 的信息的环境
@return 注释集是否由此 Processor 声明

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Iterable<? extends javax.annotation.processing.Completion> javax.annotation.processing.Processor.getCompletions(Element element, AnnotationMirror annotation, ExecutableElement member, String userText)
<!-- END KEY -->
<!-- BEGIN DATA -->
向工具框架返回某一注释的建议 completion 迭代。因为要求 completion，所以提供的有关注释的信息可能是不完整的，就像用于源代码片段的信息一样。Processor 可能返回一个空迭代。注释 Processor 应该将其工作集中在提供注释成员的 completion 上，这些成员具有 Processor 已知的其他有效性约束，例如值应该在 1 和 10 之间的 {@code int} 成员，或者应该由已知语法识别的字符串成员，比如正则表达式或者 URL。

<p>因为将为不完整的程序建立模型，所以某些参数可能只有部分信息，或者可能为 {@code null}。{@code element} 和 {@code userText} 中必须至少有一个不为 {@code null}。如果 {@code element} 不为 {@code null}，则 {@code annotation} 和 {@code member} 可以为 {@code null}。如果某些参数为 {@code null}，Processor 可能不会抛出 {@code NullPointerException}；如果 Processor 基于所提供的信息不提供 completion，则可能返回一个空迭代。Processor 也可能返回一个具有空值字符串的单个 completion，以及描述不提供 completion 的原因的消息。

<p>completion 包含许多信息，它可以反映注释 Processor 执行的其他有效性检查。例如，考虑以下简单注释：

 <blockquote>
 <pre>@MersennePrime {
int value();
 }
 </pre>
 </blockquote>

（素数 Mersenne 是 2<sup><i>n</i></sup> - 1 形式的素数。)如果给定此注释类型的 {@code AnnotationMirror}，则可以返回 {@code int} 范围内所有这类素数的列表，而无需检查 {@code getCompletions} 的其他任何参数：

 <blockquote>
 <pre>
import static javax.annotation.processing.Completions.*;
 ...
return Arrays.asList({@link Completions#of(String) of}(&quot;3&quot;),
of(&quot;7&quot;),
of(&quot;31&quot;),
of(&quot;127&quot;),
of(&quot;8191&quot;),
of(&quot;131071&quot;),
of(&quot;524287&quot;),
of(&quot;2147483647&quot;));
 </pre>
 </blockquote>

包含更多信息的 completion 集合还包括每个素数的数量：

 <blockquote>
 <pre>
return Arrays.asList({@link Completions#of(String, String) of}(&quot;3&quot;,          &quot;M2&quot;),
of(&quot;7&quot;,          &quot;M3&quot;),
of(&quot;31&quot;,         &quot;M5&quot;),
of(&quot;127&quot;,        &quot;M7&quot;),
of(&quot;8191&quot;,       &quot;M13&quot;),
of(&quot;131071&quot;,     &quot;M17&quot;),
of(&quot;524287&quot;,     &quot;M19&quot;),
of(&quot;2147483647&quot;, &quot;M31&quot;));
 </pre>
 </blockquote>

不过，如果 {@code userText} 是可用的，则可以检查它，以查看是否只有素数 Mersenne 的子集是有效的。例如，如果用户键入了以下内容

 <blockquote>
<code>@MersennePrime(1</code>
 </blockquote>

则 {@code userText} 的值将是 {@code "1"}；并且只有两个素数可能是 completion：

 <blockquote>
 <pre>
return Arrays.asList(of(&quot;127&quot;,        &quot;M7&quot;),
of(&quot;131071&quot;,     &quot;M17&quot;));
 </pre>
 </blockquote>

有时可能不是有效的 completion。例如，范围内没有以 9 开头的 Mersenne 素数：

 <blockquote>
<code>@MersennePrime(9</code>
 </blockquote>

在这种情况下，适当的响应是返回一个空的 completion 列表，

 <blockquote>
 <pre>
return Collections.emptyList();
 </pre>
 </blockquote>

或者返回一个包含帮助消息的单个空 completion

 <blockquote>
 <pre>
return Arrays.asList(of(&quot;&quot;, &quot;No in-range Mersenne primes start with 9&quot;));
 </pre>
 </blockquote>

@param element 将被注释的元素
@param annotation 将应用于元素的注释（可能是一部分）
@param member 为其返回可能 completion 的注释成员
@param userText 将补充完整的源代码文本

@return 注释的建议 completion

<!-- END DATA -->
