<!-- BEGIN KEY -->
public class javax.imageio.stream.FileCacheImageOutputStream extends javax.imageio.stream.ImageOutputStreamImpl
<!-- END KEY -->
<!-- BEGIN DATA -->
将输出写入常规 <code>OutputStream</code> 中的 <code>ImageOutputStream</code> 的实现。在将数据刷新到输出流前用于缓存数据的文件。

@version 0.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.imageio.stream.FileCacheImageOutputStream(OutputStream stream, File cacheDir) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个将向给定 <code>outputStream</code> 进行写入的 <code>FileCacheImageOutputStream</code>。

<p> 将临时文件用作缓存。如果 <code>cacheDir</code> 不为 <code>null</code> 且是一个目录，则在该处创建文件。如果为 <code>null</code>，则将使用与系统相关的默认临时文件目录（有关详细资料，请参阅 <code>File.createTempFile</code> 的文档）。

@param stream 将写入到的 <code>OutputStream</code>。
@param cacheDir 一个指示缓存文件创建目录的 <code>File</code>；或 <code>null</code>，指示使用系统目录。

@exception IllegalArgumentException 如果 <code>stream</code> 为 <code>null</code>。
@exception IllegalArgumentException 如果 <code>cacheDir</code> 不为 <code>null</code> 但不是一个目录。
@exception IOException 如果无法创建缓存文件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.FileCacheImageOutputStream.seek(long pos) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置当前流位置并将位偏移量重置为 0。查找文件末尾的后面是合法的；仅当在该处执行读取时才抛出 <code>EOFException</code>。在执行写入前，文件长度不会增加。

@exception IndexOutOfBoundsException 如果 <code>pos</code> 小于刷新的位置。
@exception  IOException 如果发生任何其他 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.stream.FileCacheImageOutputStream.isCached()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>true</code>，因为此 <code>ImageOutputStream</code>为了允许逆向查找而缓存了数据。

@return <code>true</code>。

@see #isCachedMemory
@see #isCachedFile

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.stream.FileCacheImageOutputStream.isCachedFile()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>true</code>，因为此 <code>ImageOutputStream</code> 维护文件缓存。

@return <code>true</code>。

@see #isCached
@see #isCachedMemory

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.stream.FileCacheImageOutputStream.isCachedMemory()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>false</code>，因为此 <code>ImageOutputStream</code> 不维护主存缓存。

@return <code>false</code>。

@see #isCached
@see #isCachedFile

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.FileCacheImageOutputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此 <code>FileCacheImageOututStream</code>。所有的挂起数据都将被刷新到输出，关闭并移除该缓存。但不关闭目标 <code>OutputStream</code>。

@exception IOException if an error occurs.

<!-- END DATA -->
