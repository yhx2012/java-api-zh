<!-- BEGIN KEY -->
public class javax.imageio.stream.MemoryCacheImageOutputStream extends javax.imageio.stream.ImageOutputStreamImpl
<!-- END KEY -->
<!-- BEGIN DATA -->
将输出写入常规 <code>OutputStream</code> 中的 <code>ImageOutputStream</code> 的实现。内存缓冲区用于缓存（至少）丢弃位置和当前写入位置之间的数据。唯一的构造方法带有一个 <code>OutputStream</code>，因此此类不能用于读取/修改/写入操作。读取操作只能发生在那些已经被写入到缓存且尚未被刷新的流部分。

@version 0.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.imageio.stream.MemoryCacheImageOutputStream(OutputStream stream)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造将向给定 <code>OutputStream</code> 进行写入的 <code>MemoryCacheImageOutputStream</code>。

@param stream 将写入到的 <code>OutputStream</code>。

@exception IllegalArgumentException 如果 <code>stream</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.stream.MemoryCacheImageOutputStream.isCached()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>true</code>，因为此 <code>ImageOutputStream</code>为了允许逆向查找而缓存了数据。

@return <code>true</code>。

@see #isCachedMemory
@see #isCachedFile

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.stream.MemoryCacheImageOutputStream.isCachedFile()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>false</code>，因为此 <code>ImageOutputStream</code> 不维护文件缓存。

@return <code>false</code>。

@see #isCached
@see #isCachedMemory

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.stream.MemoryCacheImageOutputStream.isCachedMemory()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>true</code>，因为此 <code>ImageOutputStream</code> 维护主存缓存。

@return <code>true</code>。

@see #isCached
@see #isCachedFile

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.MemoryCacheImageOutputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此 <code>MemoryCacheImageOutputStream</code>。所有的挂起数据都将被刷新到输出，释放该缓存。但不关闭目标 <code>OutputStream</code>。

<!-- END DATA -->
