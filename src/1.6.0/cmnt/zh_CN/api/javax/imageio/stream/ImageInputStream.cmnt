<!-- BEGIN KEY -->
public interface javax.imageio.stream.ImageInputStream extends java.io.DataInput
<!-- END KEY -->
<!-- BEGIN DATA -->
供 <code>ImageReader</code> 使用的可查找输入流接口。各种输入源（如 <code>InputStream</code>、<code>File</code> 以及将来的快速 I/O 源）都可以通过此接口的恰当实现进行&ldquo;包装&rdquo;，供 Image I/O API 使用。

@see ImageInputStreamImpl
@see FileImageInputStream
@see FileCacheImageInputStream
@see MemoryCacheImageInputStream

@version 0.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.ImageInputStream.setByteOrder(ByteOrder byteOrder)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置希望以后从此流中读取数据值时使用的字节顺序。例如，如果以 4 字节整数形式读取字节序列 '0x01 0x02 0x03 0x04'，则使用网络字节顺序时结果为值 '0x01020304'，使用逆向字节顺序时为值 '0x04030201'。

<p> 枚举类 <code>java.nio.ByteOrder</code> 用于指定字节顺序。值 <code>ByteOrder.BIG_ENDIAN</code> 指定所谓的 big-endian 或网络字节顺序，该顺序中高位字节在前。Motorola 和 Sparc 处理器用此格式存储数据，而 Intel 处理器使用与之相反的 <code>ByteOrder.LITTLE_ENDIAN</code> 顺序存储数据。

<p> 字节顺序对 <code>readBits</code> 方法返回的结果（或 <code>ImageOutputStream.writeBits</code> 写入的值）没有任何影响。

@param byteOrder <code>ByteOrder.BIG_ENDIAN</code> 或 <code>java.nio.ByteOrder.LITTLE_ENDIAN</code>，指示以后读取时是使用网络顺序还是使用与之相反的顺序。

@see java.nio.ByteOrder
@see #getByteOrder
@see #readBits(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.nio.ByteOrder javax.imageio.stream.ImageInputStream.getByteOrder()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>java.nio.ByteOrder</code> 枚举实例的形式返回从此流中读取数据值时所使用的字节顺序。

@return <code>ByteOrder.BIG_ENDIAN</code> 或 <code>ByteOrder.LITTLE_ENDIAN</code>，指示要使用的字节顺序。

@see java.nio.ByteOrder
@see #setByteOrder

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.stream.ImageInputStream.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取单个字节，并以整数（0 到 255 之间）形式返回该字节。如果到达流末尾，则返回 -1。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@return 流中 int 形式的字节值；或者返回 -1，指示 EOF（文件结束标记）。

@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.stream.ImageInputStream.read(byte[] b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取至多 <code>b.length</code> 个字节，并将其存储到 <code>b</code> 中（从索引 0 开始）。返回读取的字节数。如果因到达流末尾而无法读取任何字节，则返回 -1。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@param b 用来接收写入的 byte 数组。

@return 实际读取的字节数；或者返回 <code>-1</code>，指示 EOF。

@exception  NullPointerException  如果 <code>b</code> 为 <code>null</code>。

@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.stream.ImageInputStream.read(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取至多 <code>len</code> 个字节，并将其存储到 <code>b</code> 中（从索引 <code>off</code> 开始）。返回读取的字节数。如果因到达流末尾而无法读取任何字节，则返回 <code>-1</code>。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@param b 用来接收写入的 byte 数组。
@param off 向 <code>b</code> 进行写入的开始位置。
@param len 要读取的最大 <code>byte</code> 数。

@return 实际读取的字节数；或者返回 <code>-1</code>，指示 EOF。

@exception  NullPointerException  如果 <code>b</code> 为 <code>null</code>。
@exception IndexOutOfBoundsException 如果 <code>off</code> 为负、<code>len</code> 为负或者 <code>off + len</code> 大于 <code>b.length</code>。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.ImageInputStream.readBytes(IIOByteBuffer buf, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取至多 <code>len</code> 个字节，并修改提供的 <code>IIOByteBuffer</code> 以指示可以找到数据的 byte 数组、偏移量和长度。调用者不应该试图修改 <code>IIOByteBuffer</code> 中找到的数据。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@param buf 要修改的 IIOByteBuffer 对象。
@param len 要读取的最大 <code>byte</code> 数。

@exception IndexOutOfBoundsException 如果 <code>len</code> 为负。
@exception NullPointerException 如果 <code>buf</code> 为 <code>null</code>。

@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.stream.ImageInputStream.readBoolean() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取一个字节，如果其不为 0，则返回 <code>boolean</code> 值 <code>true</code>；如果为 0，则返回 <code>false</code>。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@return 取自流的 boolean 值。

@exception EOFException 如果到达流末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte javax.imageio.stream.ImageInputStream.readByte() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取一个字节，并以 <code>byte</code> 值的形式返回该字节。<code>0x00</code> 到 <code>0x7f</code> 之间的字节值表示 <code>0</code> 到 <code>127</code> 之间的整数值。<code>0x80</code> 到 <code>0xff</code> 之间的字节值表示 <code>-128</code> 到 <code>-1</code> 之间的负整数值。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@return 取自流的单个字节值。

@exception EOFException 如果到达流末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.stream.ImageInputStream.readUnsignedByte() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取一个字节，将其转换为 int（概念上），使用 <code>0xff</code> 屏蔽以便去掉所有符号扩展位，然后以 <code>byte</code> 值的形式返回。

<p> 于是，<code>0x00</code> 到 <code>0x7f</code> 之间的字节值便作为 <code>0</code> 到 <code>127</code> 之间的整数值返回。<code>0x80</code> 到 <code>0xff</code> 之间的字节值通常表示为负的 <code>byte</code> 值，它们将被映射成 <code>128</code> 到 <code>255</code> 之间的正整数。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@return 取自流的无符号 byte 值。

@exception EOFException 如果到达流末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public short javax.imageio.stream.ImageInputStream.readShort() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取两个字节，根据当前字节顺序将其连接（概念上），然后以 <code>short</code> 值的形式返回结果。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@return 取自流的有符号 short 值。

@exception  EOFException  如果该流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

@see #getByteOrder

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.stream.ImageInputStream.readUnsignedShort() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取两个字节，根据当前字节顺序将其连接（概念上），将得到的值转换为 <code>int</code>，使用 <code>0xffff</code> 屏蔽以便去掉所有符号扩展位，然后以无符号 <code>int</code> 值的形式返回结果。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@return 取自流的无符号 short 值（int 形式）。

@exception  EOFException  如果该流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

@see #getByteOrder

<!-- END DATA -->
<!-- BEGIN KEY -->
public char javax.imageio.stream.ImageInputStream.readChar() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
与 <code>readUnsignedShort</code> 等效，唯一的不同在于它的结果使用 <code>char</code> 数据类型返回。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@return 取自流的无符号 char 值。

@exception  EOFException  如果该流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

@see #readUnsignedShort

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.stream.ImageInputStream.readInt() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取 4 个字节，根据当前字节顺序将其连接（概念上），然后以 <code>int</code> 值的形式返回结果。

<p> 忽略流中的位偏移量，将其视为 0。

@return 取自流的有符号 int 值。

@exception  EOFException  如果该流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

@see #getByteOrder

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.imageio.stream.ImageInputStream.readUnsignedInt() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取 4 个字节，根据当前字节顺序将其连接（概念上），将得到的值转换为 long，使用 <code>0xffffffffL</code> 屏蔽以便去掉所有符号扩展位，然后以无符号 <code>long</code> 值的形式返回结果。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@return 取自流的无符号 int 值（long 形式）。

@exception  EOFException  如果该流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

@see #getByteOrder

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.imageio.stream.ImageInputStream.readLong() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取 8 个字节，根据当前字节顺序将其连接（概念上），然后以 <code>long</code> 值的形式返回结果。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@return 取自流的有符号 long 值。

@exception  EOFException  如果该流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

@see #getByteOrder

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.imageio.stream.ImageInputStream.readFloat() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取 4 个字节，根据当前字节顺序将其连接（概念上），然后以 <code>float</code> 值的形式返回结果。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@return 取自流的 float 值。

@exception  EOFException  如果该流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

@see #getByteOrder

<!-- END DATA -->
<!-- BEGIN KEY -->
public double javax.imageio.stream.ImageInputStream.readDouble() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取 8 个字节，根据当前字节顺序将其连接（概念上），然后以 <code>double</code> 值的形式返回结果。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@return 取自流的 double 值。

@exception  EOFException  如果该流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

@see #getByteOrder

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.imageio.stream.ImageInputStream.readLine() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从输入流中读取文本的下一行。该方法读取连续的字节，将每个字节分别转换成一个字符，直到遇到行结尾符或文件结束标记；然后以 <code>String</code> 形式返回读取的字符。注意，因为此方法处理字符，所以它不支持整个 Unicode 字符集的输入。

<p> 如果在一个字节都没有读取的时候就遇到文件结束标记，则返回 <code>null</code>。否则，通过左侧补 0 将读取的每个字节转换成 <code>char</code> 类型的值。如果遇到字符 <code>'\n'</code>，则丢弃它并且停止读取。如果遇到字符 <code>'\r'</code>，则丢弃它；如果它后面的那个字节转变成字符 <code>'\n'</code>，则同样丢弃它，并且停止读取。如果在遇到字符 <code>'\n'</code> 和 <code>'\r'</code> 之一前遇到文件结束标记，则停止读取。一旦已停止读取，则返回一个 <code>String</code>，它按顺序包含所有已读取且未丢弃的字符。注意，此字符串中的每个字符的值都将小于 <code>\u0100</code>（即 <code>(char)256</code>）的值。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@return 一个 String，它包含取自流的一行文本。

@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.imageio.stream.ImageInputStream.readUTF() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读入一个已使用 <a href="../../../java/io/DataInput.html#modified-utf-8">UTF-8 修改版</a>格式编码的字符串。<code>readUTF</code> 的常规协定是：该方法读取使用 UTF-8 修改版格式编码的 Unicode 字符串的表示形式；然后以 <code>String</code> 的形式返回此字符串。

<p> 首先，读取两个字节并按 <code>readUnsignedShort</code> 方法的方式使用这两个字节构造一个无符号 16 位整数，使用的是网络字节顺序（无论当前设置的是哪种字节顺序）。该整数值被称为 <i>UTF 长度</i>，它指定要读取的额外字节数。然后成组地将这些字节转换为字符。每组的长度根据该组第一个字节的值计算。紧跟在某个组后面的字节（如果有）是下一组的第一个字节。

<p> 如果组的第一个字节与位模式 <code>0xxxxxxx</code>（其中 <code>x</code> 表示&ldquo;可能为 <code>0</code> 或 <code>1</code>&rdquo;）匹配，则该组只有这一个字节。该字节被左侧补 0，转换成一个字符。

<p> 如果组的第一个字节与位模式 <code>110xxxxx</code> 匹配，则该组只由字节 <code>a</code> 和另一个字节 <code>b</code> 组成。如果没有字节 <code>b</code>（因为字节 <code>a</code> 是要读取的最后一个字节），或者字节 <code>b</code> 与位模式 <code>10xxxxxx</code> 不匹配，则抛出 <code>UTFDataFormatException</code>。否则，将该组转换成字符：

 <p> <pre><code>
 (char)(((a&amp; 0x1F) &lt;&lt; 6) | (b &amp; 0x3F))
 </code></pre>

如果组的第一个字节与位模式 <code>1110xxxx</code> 匹配，则该组由字节 <code>a</code> 和另外两个字节 <code>b</code> 和 <code>c</code> 组成。如果没有字节 <code>c</code>（因为字节 <code>a</code> 是要读取的最后两个字节之一），或者字节 <code>b</code> 或字节 <code>c</code> 与位模式 <code>10xxxxxx</code> 不匹配，则抛出 <code>UTFDataFormatException</code>。否则，将该组转换成字符：

 <p> <pre><code>
 (char)(((a &amp; 0x0F) &lt;&lt; 12) | ((b &amp; 0x3F) &lt;&lt; 6) | (c &amp; 0x3F))
 </code></pre>

如果组的第一个字节与模式 <code>1111xxxx</code> 或模式 <code>10xxxxxx</code> 匹配，则抛出 <code>UTFDataFormatException</code>。

<p> 如果在整个执行过程中的任意时间遇到文件结束标记，则抛出 <code>EOFException</code>。

<p> 在通过此过程将每个组转换成字符后，按照从输入流中读取相应组的顺序，将这些字符收集在一起，形成一个 <code>String</code>，然后该字符串将被返回。

<p> 忽略当前设置的字节顺序。

<p> 在进行读取前，流中的位偏移量被重置为 0。

<p><strong>注：</strong>在使用标准 UTF-8 图像格式的实现中不应该使用此方法，因为此处使用的 UTF-8 修改版与标准 UTF-8 不兼容。

@return 从流中读取的 String。

@exception  EOFException  如果此流在读取所有字节之前到达末尾。
@exception  UTFDataFormatException  如果这些字节不表示一个有效的、UTF-8 修改版编码的字符串。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.ImageInputStream.readFully(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取 <code>len</code> 个字节，并将其存储到 <code>b</code> 中（从索引 <code>off</code> 开始）。如果到达流末尾，则将抛出 <code>EOFException</code>。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@param b 用来接收写入的 byte 数组。
@param off 向 <code>b</code> 进行写入的开始位置。
@param len 要读取的最大 <code>byte</code> 数。

@exception IndexOutOfBoundsException 如果 <code>off</code> 为负、<code>len</code> 为负或者 <code>off + len</code> 大于 <code>b.length</code>。
@exception  NullPointerException  如果 <code>b</code> 为 <code>null</code>。
@exception  EOFException  如果该流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.ImageInputStream.readFully(byte[] b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取 <code>b.length</code> 个字节，并将其存储到 <code>b</code> 中（从索引 <code>0</code> 开始）。如果到达流末尾，则将抛出 <code>EOFException</code>。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@param b 一个 <code>byte</code> 数组。

@exception  NullPointerException  如果 <code>b</code> 为 <code>null</code>。
@exception  EOFException  如果该流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.ImageInputStream.readFully(short[] s, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据当前字节顺序从流中读取 <code>len</code> 个 short（有符号 16 位整数），并将其存储到 <code>s</code> 中（从索引 <code>off</code> 开始）。如果到达流末尾，则将抛出 <code>EOFException</code>。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@param s 用来接收写入的 short 数组。
@param off 向 s 进行写入的开始位置。
@param len 要读取的最大 <code>short</code> 数。

@exception IndexOutOfBoundsException 如果 <code>off</code> 为负、<code>len</code> 为负或者 <code>off + len</code> 大于 <code>s.length</code>。
@exception NullPointerException 如果 <code>s</code> 为 <code>null</code>。
@exception  EOFException  如果该流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.ImageInputStream.readFully(char[] c, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据当前字节顺序从流中读取 <code>len</code> 个 char（无符号 16 位整数），并将其存储到 <code>c</code> 中（从索引 <code>off</code> 开始）。如果到达流末尾，则将抛出 <code>EOFException</code>。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@param c 用来接收写入的 char 数组。
@param off 向 c 进行写入的开始位置。
@param len 要读取的最大 <code>char</code> 数。

@exception IndexOutOfBoundsException 如果 <code>off</code> 为负、<code>len</code> 为负或者 <code>off + len</code> 大于 <code>c.length</code>。
@exception NullPointerException 如果 <code>c</code> 为 <code>null</code>。
@exception  EOFException  如果该流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.ImageInputStream.readFully(int[] i, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据当前字节顺序从流中读取 <code>len</code> 个 int（有符号 32 位整数），并将其存储到 <code>i</code> 中（从索引 <code>off</code> 开始）。如果到达流末尾，则将抛出 <code>EOFException</code>。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@param i 用来接收写入的 int 数组。
@param off 向 i 进行写入的开始位置。
@param len 要读取的最大 <code>int</code> 数。

@exception IndexOutOfBoundsException 如果 <code>off</code> 为负、<code>len</code> 为负或者 <code>off + len</code> 大于 <code>i.length</code>。
@exception NullPointerException 如果 <code>i</code> 为 <code>null</code>。
@exception  EOFException  如果该流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.ImageInputStream.readFully(long[] l, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据当前字节顺序从流中读取 <code>len</code> 个 long（有符号 64 位整数），并将其存储到 <code>l</code> 中（从索引 <code>off</code> 开始）。如果到达流末尾，则将抛出 <code>EOFException</code>。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@param l 用来接收写入的 long 数组。
@param off 向 l 进行写入的开始位置。
@param len 要读取的最大 <code>long</code> 数。

@exception IndexOutOfBoundsException 如果 <code>off</code> 为负、<code>len</code> 为负或者 <code>off + len</code> 大于 <code>l.length</code>。
@exception NullPointerException 如果 <code>l</code> 为 <code>null</code>。
@exception  EOFException  如果该流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.ImageInputStream.readFully(float[] f, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据当前字节顺序从流中读取 <code>len</code> 个 float（32 位 IEEE 单精度浮点值），并将其存储到 <code>f</code> 中（从索引 <code>off</code> 开始）。如果到达流末尾，则将抛出 <code>EOFException</code>。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@param f 用来接收写入的 float 数组。
@param off 向 f 进行写入的开始位置。
@param len 要读取的最大 <code>float</code> 数。

@exception IndexOutOfBoundsException 如果 <code>off</code> 为负、<code>len</code> 为负或者 <code>off + len</code> 大于 <code>f.length</code>。
@exception NullPointerException 如果 <code>f</code> 为 <code>null</code>。
@exception  EOFException  如果该流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.ImageInputStream.readFully(double[] d, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据当前字节顺序从流中读取 <code>len</code> 个 double（64 位 IEEE 双精度浮点值），并将其存储到 <code>d</code> 中（从索引 <code>off</code> 开始）。如果到达流末尾，则将抛出 <code>EOFException</code>。

<p> 在进行读取前，流中的位偏移量被重置为 0。

@param d 用来接收写入的 double 数组。
@param off 向 d 进行写入的开始位置。
@param len 要读取的最大 <code>double</code> 数。

@exception IndexOutOfBoundsException 如果 <code>off</code> 为负、<code>len</code> 为负或者 <code>off + len</code> 大于 <code>d.length</code>。
@exception NullPointerException 如果 <code>d</code> 为 <code>null</code>。
@exception  EOFException  如果该流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.imageio.stream.ImageInputStream.getStreamPosition() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回流的当前字节位置。下一次读取将从此偏移量开始。

@return 一个包含流位置 long 值。

@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.stream.ImageInputStream.getBitOffset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
以整数的形式返回当前位偏移量，该整数在 0 到 7 之间（包含两者）。位偏移量通过调用 <code>readBits</code> 方法隐式地更新。值 0 表示所读取字节的最高有效位，值 7 表示所读取字节的最低有效位。

<p> 第一次打开流时位偏移量被设置为 0，以后可以通过调用 <code>seek</code>、<code>skipBytes</code>、或者任何 <code>read</code> 或 <code>readFully</code> 方法将其重置为 0。

@return 一个 <code>int</code>，包含 0 到 7 之间（包含两者）的位偏移量。

@exception  IOException 如果发生 I/O 错误。

@see #setBitOffset

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.ImageInputStream.setBitOffset(int bitOffset) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将位偏移量设置为 0 到 7 之间（包含两者）的整数。不改变流中由 <code>getStreamPosition</code> 返回的位偏移量。值 0 表示所读取字节的最高有效位，值 7 表示所读取字节的最低有效位。

@param bitOffset 所需的偏移量，为 0 到 7 之间（包括两者）的 <code>int</code> 的形式。

@exception IllegalArgumentException 如果 <code>bitOffset</code> 不在 0 和 7（包括两者）之间。
@exception  IOException 如果发生 I/O 错误。

@see #getBitOffset

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.stream.ImageInputStream.readBit() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取单个字节，并以 <code>int</code>（<code>0</code> 或 <code>1</code>）的形式返回该字节。位偏移量将加 1，模数将减 8。

@return 一个 <code>int</code>，包含 <code>0</code> 或 <code>1</code>。

@exception  EOFException  如果该流在读取所有位之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.imageio.stream.ImageInputStream.readBits(int numBits) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取位串 (bitstring) 并以 <code>long</code> 的形式返回，使第一个读取的位成为输出的最高有效位。在 <code>getStreamPosition</code> 指示的字节中从 <code>getBitOffset</code> 给定的位开始读取。位偏移量将增加 <code>numBits</code>，模数将减 8。

<p> 流的字节顺序对此方法没有任何影响。此方法返回值的构造方式相当于每次读取一个位，然后将其移到返回值的右边。如以下伪代码所示：

 <pre>
 long accum = 0L;
 for (int i = 0; i &lt; numBits; i++) {
   accum &lt;&lt;= 1; // Shift left one bit to make room
   accum |= readBit();
 }
 </pre>

注意，如果使用了与网络字节顺序相反的顺序（即 <code>getByteOrder() == false</code>），那么 <code>readBits(32)</code> 的结果可能因此而不等于 <code>readInt()</code> 的结果。

<p> 如果在读取了所有位前遇到流末尾，则抛出 <code>EOFException</code>。

@param numBits 要读取的位数，为 0 到 64 之间（包含两者）的 <code>int</code> 形式。
@return <code>long</code> 形式的位串，最后读取的位存储在最低有效位中。

@exception IllegalArgumentException 如果 <code>numBits</code> 不在 0 和 64 之间（包括两者）。
@exception  EOFException  如果该流在读取所有位之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.imageio.stream.ImageInputStream.length() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回流的总长度（如果已知）。否则，返回 <code>-1</code>。

@return 一个 <code>long</code>，包含流的长度（如果已知）；否则返回 <code>-1</code>。

@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.stream.ImageInputStream.skipBytes(int n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将流位置向前移动给定的字节数。此方法向前跳过的字节数可能小于所请求的字节数，例如，在到达流末尾时。无论如何，将返回实际跳过的字节数。在推进位置前，位偏移量被设置为 0。

@param n 一个 <code>int</code>，它包含要跳过的字节数。

@return 一个 <code>int</code>，表示跳过的字节数。

@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.imageio.stream.ImageInputStream.skipBytes(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将流位置向前移动给定的字节数。此方法等同于 <code>skipBytes(int)</code>，唯一的不同在于它允许更大的跳跃距离。

@param n 一个 <code>long</code>，它包含要跳过的字节数。

@return 表示跳过的字节数的 <code>long</code>。

@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.ImageInputStream.seek(long pos) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将当前流位置设置为所需的位置。下一次读取将在此位置上进行。位偏移量被设置为 0。

<p> 如果 <code>pos</code> 小于刷新位置（由 <code>getflushedPosition</code> 返回），那么将抛出 <code>IndexOutOfBoundsException</code>。

<p> 查找文件结束标记的后面是合法的，只有在该处执行读取时才抛出 <code>EOFException</code>。

@param pos 一个 <code>long</code>，它包含所需的文件指针位置。

@exception IndexOutOfBoundsException 如果 <code>pos</code> 小于刷新位置。
@exception  IOException 如果发生任何 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.ImageInputStream.mark()
<!-- END KEY -->
<!-- BEGIN DATA -->
标记流中某个位置，供后续调用 <code>reset</code> 时返回。与标准 <code>InputStream</code> 不同的是，所有的 <code>ImageInputStream</code> 都支持标记操作。此外，还可以随意嵌套对 <code>mark</code> 和 <code>reset</code> 的调用。

<p> 与 <code>Reader</code> 和 <code>InputStream</code> 接口声明的 <code>mark</code> 方法不同，此方法不使用任何 <code>readLimit</code> 参数。调用 <code>mark</code> 后可以读取任意数量的数据。

<p> <code>readBits</code> 方法使用的位位置可通过每次调用 <code>mark</code> 和 <code>reset</code> 来保存和恢复。

<p> 注意，<code>ImageReader</code> 调用 <code>flushBefore</code> 作为读取操作的一部分是有效的。因此，如果应用程序向 <code>ImageReader</code> 传递该流前调用 <code>mark</code>，则应用程序不应该假定标记位置在读取操作完成后仍保持有效。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.ImageInputStream.reset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在最近一次非匹配地调用 <code>mark</code> 时指向上一个位置（包括位偏移量）的流指针。

<p> 调用 <code>reset</code> 而没有相应地调用 <code>mark</code> 没有任何效果。

<p> 如果上一个标记位置位于流的丢弃部分，则抛出 <code>IOException</code>。

@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.ImageInputStream.flushBefore(long pos) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
丢弃所指示位置之前的流初始部分。试图查找流的刷新部分中的偏移量将导致抛出 <code>IndexOutOfBoundsException</code>。

<p> 调用 <code>flushBefore</code> 可允许实现此接口的类释放存储流中的数据所使用的资源，如内存和磁盘空间。

@param pos 一个 <code>long</code>，它包含要刷新的流前缀的长度。

@exception IndexOutOfBoundsException 如果 <code>pos</code> 位于流的刷新部分或当前流位置的后面。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.ImageInputStream.flush() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
丢弃当前流位置之前的流初始部分。等效于 <code>flushBefore(getStreamPosition())</code>。

@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.imageio.stream.ImageInputStream.getFlushedPosition()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回流中可以执行查找的最早位置。返回值将是所有传入 <code>flushBefore</code> 上一次调用的值中的最大值。

@return 用于查找的最早的合法位置（<code>long</code> 形式）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.stream.ImageInputStream.isCached()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 <code>ImageInputStream</code> 本身为了允许逆向查找而缓存了数据，则返回 <code>true</code>。应用程序可以根据此方法来决定刷新的频率以及是否刷新以保留缓存资源。

@return 如果此 <code>ImageInputStream</code> 缓存数据，则返回 <code>true</code>。

@see #isCachedMemory
@see #isCachedFile

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.stream.ImageInputStream.isCachedMemory()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 <code>ImageInputStream</code> 本身为了允许逆向查找而缓存了数据，并将其保存在主存中，则返回 <code>true</code>。应用程序可以根据此方法来决定刷新的频率以及是否刷新以保留缓存资源。

@return 如果此 <code>ImageInputStream</code> 在主存中缓存数据，则返回 <code>true</code>。

@see #isCached
@see #isCachedFile

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.stream.ImageInputStream.isCachedFile()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 <code>ImageInputStream</code> 本身为了允许逆向查找而缓存了数据，并且将其保存在临时文件中，则返回 <code>true</code>。应用程序可以根据此方法来决定刷新的频率以及是否刷新以保留缓存资源。

@return 如果此 <code>ImageInputStream</code> 在临时文件中缓存数据，则返回 <code>true</code>。

@see #isCached
@see #isCachedMemory

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.ImageInputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭流。试图访问已经关闭的流将导致 <code>IOException</code> 或错误行为。调用此方法可允许实现此接口的类释放与流关联的资源，如内存、磁盘空间或文件描述符。

@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
