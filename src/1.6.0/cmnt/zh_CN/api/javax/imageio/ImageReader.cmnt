<!-- BEGIN KEY -->
public abstract class javax.imageio.ImageReader extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
用来解析和解码图像的抽象超类。在 Java Image I/O 框架的上下文中读入图像的类必须创建此类的子类。

<p> <code>ImageReader</code> 对象通常由特定格式的服务提供者接口 (SPI) 类实例化。服务提供者类（例如 <code>ImageReaderSpi</code> 的实例）向 <code>IIORegistry</code> 注册，后者使用前者进行格式识别和表示可用格式 reader 和 writer。

<p> 在设置输入源时（使用 <code>setInput</code> 方法），可以将它标记为&ldquo;只向前搜索&rdquo;。此设置意味着包含在输入源中的图像将只按顺序读取，可能允许 reader 避免缓存包含与以前已经读取的图像关联的数据的那些输入部分。

@see ImageWriter
@see javax.imageio.spi.IIORegistry
@see javax.imageio.spi.ImageReaderSpi

@version 0.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.imageio.spi.ImageReaderSpi javax.imageio.ImageReader.originatingProvider
<!-- END KEY -->
<!-- BEGIN DATA -->
实例化此对象的 <code>ImageReaderSpi</code>，如果其身份未知或不存在，则为 <code>null</code>。默认情况下初始化为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object javax.imageio.ImageReader.input
<!-- END KEY -->
<!-- BEGIN DATA -->
由 <code>setInput</code> 设置并由 <code>getInput</code> 获取的 <code>ImageInputStream</code> 或其他 <code>Object</code>。默认情况下初始化为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.imageio.ImageReader.seekForwardOnly
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前输入源已经被 <code>setInput</code> 标记为允许只向前搜索，则为 <code>true</code>。默认情况下，该值为 <code>false</code>。

@see #minIndex
@see #setInput

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.imageio.ImageReader.ignoreMetadata
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前输入源已经被 <code>setInput</code> 标记为允许忽略元数据，则为 <code>true</code>。默认情况下，该值为 <code>false</code>。

@see #setInput

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.imageio.ImageReader.minIndex
<!-- END KEY -->
<!-- BEGIN DATA -->
用来读取的最小有效索引，最初为 0。如果 <code>seekForwardOnly</code> 为 <code>true</code> ，各种方法在试图访问与拥有更低索引的图像关联的数据时将抛出 <code>IndexOutOfBoundsException</code>。

@see #seekForwardOnly
@see #setInput

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Locale[] javax.imageio.ImageReader.availableLocales
<!-- END KEY -->
<!-- BEGIN DATA -->
可以用来本地化警告消息的 <code>Locale</code> 组成的数组，如果不支持本地化，则为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Locale javax.imageio.ImageReader.locale
<!-- END KEY -->
<!-- BEGIN DATA -->
用于本地化的当前 <code>Locale</code>，如果没有设置，则为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.List<javax.imageio.event.IIOReadWarningListener> javax.imageio.ImageReader.warningListeners
<!-- END KEY -->
<!-- BEGIN DATA -->
当前已注册 <code>IIOReadWarningListener</code> 组成的 <code>List</code>，默认情况下初始化为 <code>null</code>，它与空 <code>List</code> 同义。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.List<java.util.Locale> javax.imageio.ImageReader.warningLocales
<!-- END KEY -->
<!-- BEGIN DATA -->
与每个当前已注册 <code>IIOReadWarningListener</code> 关联的 <code>Locale</code> 组成的 <code>List</code>，默认情况下初始化为 <code>null</code>，它与空 <code>List</code> 同义。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.List<javax.imageio.event.IIOReadProgressListener> javax.imageio.ImageReader.progressListeners
<!-- END KEY -->
<!-- BEGIN DATA -->
当前已注册 <code>IIOReadProgressListener</code> 组成的 <code>List</code>，默认情况下初始化为 <code>null</code>，它与空 <code>List</code> 同义。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.List<javax.imageio.event.IIOReadUpdateListener> javax.imageio.ImageReader.updateListeners
<!-- END KEY -->
<!-- BEGIN DATA -->
当前已注册 <code>IIOReadUpdateListener</code> 组成的 <code>List</code>，默认情况下初始化为 <code>null</code>，它与空 <code>List</code> 同义。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.imageio.ImageReader(ImageReaderSpi originatingProvider)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>ImageReader</code>，并将其 <code>originatingProvider</code> 字段设置为所提供的值。

<p> 利用扩展的子类应该为提供具有签名 <code>(ImageReaderSpi, Object)</code> 的构造方法来获取扩展对象。如果扩展对象不合适，则将抛出 <code>IllegalArgumentException</code>。

@param originatingProvider 调用此构造方法的 <code>ImageReaderSpi</code>，或者为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.imageio.ImageReader.getFormatName() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个标识输入源格式的 <code>String</code>。

<p> 默认实现返回 <code>originatingProvider.getFormatNames()[0]</code>。没有原始服务提供者的实现或者希望使用不同命名策略的实现应该重写此方法。

@exception  IOException  如果从输入源中读取信息时发生错误。

@return <code>String</code> 形式的格式名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.imageio.spi.ImageReaderSpi javax.imageio.ImageReader.getOriginatingProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回传入构造方法的 <code>ImageReaderSpi</code>。注意，此值可能为 <code>null</code>。

@return 一个 <code>ImageReaderSpi</code> 或 <code>null</code>。

@see ImageReaderSpi

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.ImageReader.setInput(Object input, boolean seekForwardOnly, boolean ignoreMetadata)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于给定的 <code>ImageInputStream</code> 或其他 <code>Object</code> 的输入源。输入源必须在使用任何查询或读取方法之前设置。如果 <code>input</code> 为 <code>null</code>，则将移除所有当前设置的输入源。无论是哪种情况，<code>minIndex</code> 的值都将被初始化为 0。

<p> <code>seekForwardOnly</code> 参数控制在读取每个图像（或者缩略图或图像元数据）时，由 <code>getMinIndex</code> 返回的值是否增加。如果 <code>seekForwardOnly</code> 为 true，则在 <code>index &lt; this.minIndex</code> 的情况下调用 <code>read(index)</code> 将抛出 <code>IndexOutOfBoundsException</code>；否则 <code>minIndex</code> 的值将被设置为 <code>index</code>。如果 <code>seekForwardOnly</code> 为 <code>false</code>，则 <code>minIndex</code> 的值将仍然为 0，不考虑任何读取操作。

<p> 如果将 <code>ignoreMetadata</code> 参数设置为 <code>true</code>，则允许 reader 忽略读取操作期间遇到的任何元数据。后续调用 <code>getStreamMetadata</code> 和 <code>getImageMetadata</code> 方法可能返回 <code>null</code>，从 <code>readAll</code> 返回的 <code>IIOImage</code> 的 <code>getMetadata</code> 方法可能返回 <code>null</code>。设置此参数可允许 reader 更有效地工作。reader 可以选择忽略此设置值，正常地返回元数据。

<p> 子类应该注意移除任何基于以前的流缓存的信息，比如标题信息或部分解码的图像数据。

<p> 直接与捕获设备或图像协议交互的 reader 应该使用一般的 <code>Object</code>，而不是 <code>ImageInputStream</code>。合法类的集合由 reader 的服务提供者的 <code>getInputTypes</code> 方法公开。大多数 reader 将返回一个只包含 <code>ImageInputStream.class</code> 的单元素数组，指示其只接受 <code>ImageInputStream</code>。

<p> 默认实现根据 <code>originatingProvider.getInputTypes()</code> 返回的列表检查 <code>input</code> 参数，如果该参数不是列表中某个类的实例，则操作失败。如果将原始提供者设置为 <code>null</code>，则只在 input 是一个 <code>ImageInputStream</code> 时接受输入。

@param input 将来解码时用到的 <code>ImageInputStream</code> 或其他 <code>Object</code>。
@param seekForwardOnly 如果为 <code>true</code>，则只能按升序从此输入源中读取图像和元数据。
@param ignoreMetadata 如果为 <code>true</code>，则可以在读取期间忽略元数据。

@exception IllegalArgumentException 如果 <code>input</code> 不是原始服务提供者的 <code>getInputTypes</code> 方法返回的某个类的实例，或者不是一个 <code>ImageInputStream</code>。

@see ImageInputStream
@see #getInput
@see javax.imageio.spi.ImageReaderSpi#getInputTypes

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.ImageReader.setInput(Object input, boolean seekForwardOnly)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于给定的 <code>ImageInputStream</code> 或其他 <code>Object</code> 的输入源。输入源必须在使用任何查询或读取方法之前设置。如果 <code>input</code> 为 <code>null</code>，则将移除所有当前设置的输入源。无论是哪种情况，<code>minIndex</code> 的值都将被初始化为 0。

<p> <code>seekForwardOnly</code> 参数控制在读取每个图像（或者缩略图或图像元数据）时，由 <code>getMinIndex</code> 返回的值是否增加。如果 <code>seekForwardOnly</code> 为 true，则在 <code>index &lt; this.minIndex</code> 的情况下调用 <code>read(index)</code> 将抛出 <code>IndexOutOfBoundsException</code>；否则 <code>minIndex</code> 的值将被设置为 <code>index</code>。如果 <code>seekForwardOnly</code> 为 <code>false</code>，则 <code>minIndex</code> 的值将仍然为 0，不考虑任何读取操作。

<p> 此方法等效于 <code>setInput(input, seekForwardOnly, false)</code>。

@param input 将来解码时用到的 <code>ImageInputStream</code> 或其他 <code>Object</code>。
@param seekForwardOnly 如果为 <code>true</code>，则只能按升序从此输入源中读取图像和元数据。

@exception IllegalArgumentException 如果 <code>input</code> 不是原始服务提供者的 <code>getInputTypes</code> 方法返回的某个类的实例，或者不是一个 <code>ImageInputStream</code>。

@see #getInput

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.ImageReader.setInput(Object input)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于给定的 <code>ImageInputStream</code> 或其他 <code>Object</code> 的输入源。输入源必须在使用任何查询或读取方法之前设置。如果 <code>input</code> 为 <code>null</code>，则将移除所有当前设置的输入源。无论是哪种情况，<code>minIndex</code> 的值都将被初始化为 0。

<p> 此方法等效于 <code>setInput(input, false, false)</code>。

@param input 将来解码时用到的 <code>ImageInputStream</code> 或其他 <code>Object</code>。

@exception IllegalArgumentException 如果 <code>input</code> 不是原始服务提供者的 <code>getInputTypes</code> 方法返回的某个类的实例，或者不是一个 <code>ImageInputStream</code>。

@see #getInput

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.imageio.ImageReader.getInput()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回以前设置为输入源的 <code>ImageInputStream</code> 或其他 <code>Object</code>。如果没有设置输入源，则返回 <code>null</code>。

@return 将来解码时用到的 <code>Object</code>；或者 <code>null</code>。

@see ImageInputStream
@see #setInput

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.ImageReader.isSeekForwardOnly()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果已经通过传递 <code>true</code> 作为 <code>setInput</code> 方法的 <code>seekForwardOnly</code> 参数将当前输入源标记为只向前搜索，则返回 <code>true</code>。

@return 如果输入源是只向前搜索的，则返回 <code>true</code>。


@see #setInput

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.ImageReader.isIgnoringMetadata()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果已经通过传递 <code>true</code> 作为 <code>setInput</code> 方法的 <code>ignoreMetadata</code> 参数将当前输入源标记为允许忽略元数据，则返回 <code>true</code>。

@return 如果可以忽略元数据，则返回 <code>true</code>。

@see #setInput

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.ImageReader.getMinIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于读取图像、缩略图或图像元数据的最低有效索引。如果 <code>seekForwardOnly()</code> 为 <code>false</code>，此值通常仍然为 0，指示可能进行随机访问。否则，它将包含最近一次访问的索引值，并单调递增。

@return 可读取的最小合法索引。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Locale[] javax.imageio.ImageReader.getAvailableLocales()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回可用来初始化警告侦听器和压缩设置值的 <code>Locale</code> 所组成的数组。返回 <code>null</code> 值指示不支持本地化。

<p> 如果 <code>availableLocales</code> 实例变量是非 <code>null</code> 的，则默认实现返回该变量的副本，否则返回 <code>null</code>。

@return 可以用作 <code>setLocale</code> 的参数的 <code>Locale</code> 所组成的数组，或者返回 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.ImageReader.setLocale(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>ImageReader</code> 的当前 <code>Locale</code> 设置为给定值。值为 <code>null</code> 则移除所有以前的设置值，并指示 reader 应该根据需要对其进行本地化。

@param locale 所需的 <code>Locale</code>，或者为 <code>null</code>。

@exception IllegalArgumentException 如果 <code>locale</code> 为非 <code>null</code>，但它不是 <code>getAvailableLocales</code> 返回的值之一。

@see #getLocale

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Locale javax.imageio.ImageReader.getLocale()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前设置的 <code>Locale</code>，如果没有设置 Locale，则返回 <code>null</code>。

@return 当前 <code>Locale</code> 或 <code>null</code>。

@see #setLocale

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.imageio.ImageReader.getNumImages(boolean allowSearch) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前输入源中可用的图像数，不包括缩略图。

<p> 注意，一些图像格式（比如动画 GIF）并不指定流中存在多少图像。因此，确定图像数就需要扫描整个流，并且可能需要内存用来缓冲。如果图像是按顺序处理的，则可能更有效的方法是：使用递增的索引来调用 <code>read</code>，直到抛出 <code>IndexOutOfBoundsException</code> 指示不再有图像可用。可以将 <code>allowSearch</code> 参数设置为 <code>false</code>，指示不需要进行彻底搜索；返回值为 <code>-1</code> 则指示搜索是必要的。如果已在 <code>seekForwardOnly</code> 设置为 <code>true</code> 的情况下指定输入，则此方法在 <code>allowSearch</code> 被设置为 <code>true</code> 时将抛出 <code>IllegalStateException</code>。

@param allowSearch 如果为 <code>true</code>，则将返回真实的图像数，即使需要进行搜索。如果该参数为 <code>false</code>，则 reader 返回 <code>-1</code>，不执行搜索。

@return <code>int</code> 形式的图像数，如果 <code>allowSearch</code> 为 <code>false</code>，则返回 <code>-1</code>，并且将需要搜索。

@exception IllegalStateException 如果没有设置输入源，或者已在 <code>seekForwardOnly</code> 设置为 <code>true</code> 的情况下指定了输入。
@exception  IOException  如果从输入源中读取信息时发生错误。

@see #setInput

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.imageio.ImageReader.getWidth(int imageIndex) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回输入源中的给定图像的宽度，以像素为单位。

<p> 如果可以将图像呈现为用户指定大小，则此方法将返回默认宽度。

@param imageIndex 要查询的图像的索引。

@return <code>int</code> 形式的图像宽度。

@exception IllegalStateException  如果尚未设置输入源。
@exception IndexOutOfBoundsException 如果所提供的索引超出范围。
@exception  IOException  如果从输入源中读取宽度信息时发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.imageio.ImageReader.getHeight(int imageIndex) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回输入源中的给定图像的高度，以像素为单位。

<p> 如果可以将图像呈现为用户指定大小，则此方法将返回默认高度。

@param imageIndex 要查询的图像的索引。

@return <code>int</code> 形式的图像高度。

@exception IllegalStateException  如果尚未设置输入源。
@exception IndexOutOfBoundsException 如果所提供的索引超出范围。
@exception  IOException  如果从输入源中读取高度信息时发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.ImageReader.isRandomAccessEasy(int imageIndex) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果给定图像的存储格式不会给像素的随机访问带来内在妨碍，则返回 <code>true</code>。对于大多数压缩格式（比如 JPEG），此方法应该返回 <code>false</code>，因为除了感兴趣的区域以外，可能还需要对图像的绝大部分进行解码。

<p> 对于希望更加有效的程序而言，这只是一个提示。所有 reader 必须能够读取在 <code>ImageReadParam</code> 中指定的任意区域。

<p> 注意，从此方法返回 <code>false</code> 的格式可能仍然允许进行平铺（<i>例如</i>，JPEG 格式的 Restart Marker），随机访问对于 tile 可能相当有效。参见 {@link #isImageTiled <code>isImageTiled</code>}。

<p> 对于保证所有图像都支持轻松随机访问或者都不支持轻松随机访问的 reader，分别返回 <code>true</code> 或 <code>false</code>，而不必访问任何图像数据。在这种情况下，即使输入源没有设置或者图像索引超出范围，也未必抛出异常。

<p> 默认实现返回 <code>false</code>。

@param imageIndex 要查询的图像的索引。

@return 如果读取给定图像的感兴趣区域可能是有效的，则返回 <code>true</code>。

@exception IllegalStateException 如果需要输入源来确定返回值，但没有设置输入源。
@exception IndexOutOfBoundsException 如果必须访问某一图像来确定返回值，但所提供的索引超出范围。
@exception IOException  如果在读取过程中发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.imageio.ImageReader.getAspectRatio(int imageIndex) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>float</code> 的形式返回给定图像的高宽比（即宽度除以高度）。对于本来就可以调整大小的图像，此方法提供了一个在已知所需高度的情况下确定适当宽度的方法，反之亦然。对于不可调整大小的图像，则使用真实宽度和高度。

<p> 默认实现只是返回 <code>(float)getWidth(imageIndex)/getHeight(imageIndex)</code>。

@param imageIndex 要查询的图像的索引。

@return 指示给定图像高宽比的 <code>float</code> 值。

@exception IllegalStateException  如果尚未设置输入源。
@exception IndexOutOfBoundsException 如果所提供的索引超出范围。
@exception IOException  如果在读取过程中发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.imageio.ImageTypeSpecifier javax.imageio.ImageReader.getRawImageType(int imageIndex) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>ImageTypeSpecifier</code>，指示最能代表图像&ldquo;原始&rdquo;内部格式的 <code>SampleModel</code> 和 <code>ColorModel</code>。例如，对于 JPEG 图像，原始类型可能有一个 YCbCr 颜色空间，即使该图像在显示之前会按照惯例被转换为一个 RGB 颜色空间。返回值还应该包含在 <code>getImageTypes</code> 返回的值所组成的列表中。

<p> 默认实现只返回 <code>getImageType</code> 所提供列表中的第一项。

@param imageIndex 要查询的图像的索引。

@return 一个 <code>ImageTypeSpecifier</code>。

@exception IllegalStateException  如果尚未设置输入源。
@exception IndexOutOfBoundsException 如果所提供的索引超出范围。
@exception  IOException  如果从输入源中读取格式信息时发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Iterator<javax.imageio.ImageTypeSpecifier> javax.imageio.ImageReader.getImageTypes(int imageIndex) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

以 <code>ImageTypeSpecifier</code> 形式返回包含可能的图像类型的 <code>Iterator</code>，给定图像可能被解码成这些类型。至少将返回一个合法图像类型。

<p> 迭代器的第一个元素应该是用于解码图像的最&ldquo;自然的&rdquo;类型，所带来的损失尽可能的少。例如，对于 JPEG 图像，第一项应该是 RGB 图像，即使图像数据内部存储在 YCbCr 颜色空间中。

@param imageIndex 将被 <code>retrieved</code> 的图像的索引。

@return 一个 <code>Iterator</code>，它至少包含一个表示用来解码当前给定图像的荐图像类型的 <code>ImageTypeSpecifier</code>。

@exception IllegalStateException  如果尚未设置输入源。
@exception IndexOutOfBoundsException 如果所提供的索引超出范围。
@exception  IOException  如果从输入源中读取格式信息时发生错误。

@see ImageReadParam#setDestination(BufferedImage)
@see ImageReadParam#setDestinationType(ImageTypeSpecifier)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.imageio.ImageReadParam javax.imageio.ImageReader.getDefaultReadParam()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个适合此格式的默认 <code>ImageReadParam</code> 对象。所有子类都应该定义一个用于所有参数的默认值集合，并使用此调用返回这些值。可以在设置输入源之前调用此方法。

<p> 默认实现构造并返回一个新的 <code>ImageReadParam</code> 对象，该对象不允许源进行缩放（<i>也就是说</i>，它返回 <code>new ImageReadParam()</code>）。

@return 一个可以使用一组默认设置控制解码过程的 <code>ImageReadParam</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.imageio.metadata.IIOMetadata javax.imageio.ImageReader.getStreamMetadata() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>IIOMetadata</code> 对象，它表示作为一个整体与输入源关联的元数据（即不与任何特定图像关联）；如果 reader 不支持读取元数据、被设置为忽略元数据，或者没有元数据可用，则返回 <code>null</code>。

@return <code>IIOMetadata</code> 对象或者 <code>null</code>。

@exception IOException  如果在读取过程中发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.imageio.metadata.IIOMetadata javax.imageio.ImageReader.getStreamMetadata(String formatName, java.util.Set<java.lang.String> nodeNames) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>IIOMetadata</code> 对象，它表示作为一个整体与输入源关联的元数据（即不与任何特定图像关联）。如果不存在这样的数据，则返回 <code>null</code>。

<p> 得到的元数据对象只负责以 <code>formatName</code> 指定的格式返回文档。在所有返回的文档中，只需要返回其名称是 <code>nodeNames</code> 成员的节点。这样，基于实际需要的信息，由 reader 处理的元数据数量可以保持在最低限度。

<p> 如果 <code>formatName</code> 不是受支持的元数据格式的名称，则返回 <code>null</code>。

<p> 在所有情况下，返回一个功能强于确实必需的元数据对象是合法的。格式名称和节点名称仅仅是用来减少 reader 工作负荷的提示。

<p> 默认实现在检查格式名称是否受支持之后返回调用 <code>getStreamMetadata()</code> 的结果。如果不受支持，则返回 <code>null</code>。

@param formatName 可用来从返回的 <code>IIOMetadata</code> 对象中获取文档的元数据格式名称。
@param nodeNames 包含可包含在获取到的文档中的节点名称所组成的 <code>Set</code>。

@return <code>IIOMetadata</code> 对象或者 <code>null</code>。

@exception IllegalArgumentException 如果 <code>formatName</code> 为 <code>null</code>。
@exception IllegalArgumentException 如果 <code>nodeNames</code> 为 <code>null</code>。
@exception IOException  如果在读取过程中发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.imageio.metadata.IIOMetadata javax.imageio.ImageReader.getImageMetadata(int imageIndex) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含与给定图像关联的元数据的 <code>IIOMetadata</code> 对象，如果 reader 不支持读取元数据、被设置为忽略元数据，或者没有元数据可用，则返回 <code>null</code>。

@param imageIndex 其元数据将被获取的图像的索引。 

@return <code>IIOMetadata</code> 对象或者 <code>null</code>。

@exception IllegalStateException  如果尚未设置输入源。
@exception IndexOutOfBoundsException 如果所提供的索引超出范围。
@exception IOException  如果在读取过程中发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.imageio.metadata.IIOMetadata javax.imageio.ImageReader.getImageMetadata(int imageIndex, String formatName, java.util.Set<java.lang.String> nodeNames) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示与给定图像关联的元数据的 <code>IIOMetadata</code> 对象，如果 reader 不支持读取元数据或者没有元数据可用，则返回 <code>null</code>。

<p> 得到的元数据对象只负责以 <code>formatName</code> 指定的格式返回文档。在所有返回的文档中，只需要返回其名称是 <code>nodeNames</code> 成员的节点。这样，基于实际需要的信息，由 reader 处理的元数据数量可以保持在最低限度。

<p> 如果 <code>formatName</code> 不是受支持的元数据格式的名称，则返回 <code>null</code>。

<p> 在所有情况下，返回一个功能强于确实必需的元数据对象是合法的。格式名称和节点名称仅仅是用来减少 reader 工作负荷的提示。

<p> 默认实现在检查格式名称是否受支持之后返回调用 <code>getImageMetadata(imageIndex)</code> 的结果。如果不受支持，则返回 <code>null</code>。

@param imageIndex 其元数据将被获取的图像的索引。
@param formatName 可用来从返回的 <code>IIOMetadata</code> 对象中获取文档的元数据格式名称。
@param nodeNames 包含可包含在获取到的文档中的节点名称所组成的 <code>Set</code>。

@return <code>IIOMetadata</code> 对象或者 <code>null</code>。

@exception IllegalStateException  如果尚未设置输入源。
@exception IndexOutOfBoundsException 如果所提供的索引超出范围。
@exception IllegalArgumentException 如果 <code>formatName</code> 为 <code>null</code>。
@exception IllegalArgumentException 如果 <code>nodeNames</code> 为 <code>null</code>。
@exception IOException  如果在读取过程中发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.BufferedImage javax.imageio.ImageReader.read(int imageIndex) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认 <code>ImageReadParam</code> 读取通过索引 <code>imageIndex</code> 指定的图像，并将其作为一个完整的 <code>BufferedImage</code> 返回。这是一个调用 <code>read(imageIndex, null)</code> 的便捷方法。

<p> 返回的图像将根据从 <code>getImageTypes</code> 中返回的第一个 <code>ImageTypeSpecifier</code> 进行格式化。

<p> 所有已注册的 <code>IIOReadProgressListener</code> 对象将通过以下方式获得通知：首先调用其 <code>imageStarted</code> 方法，然后在读取过程中调用其 <code>imageProgress</code> 方法。最后，将调用其 <code>imageComplete</code> 方法。解码像素时，<code>IIOReadUpdateListener</code> 对象可以在读取期间的其他时间更新。最后，<code>IIOReadWarningListener</code> 对象将接收解码期间发生的所有非致命警告。

@param imageIndex 将被获取的图像的索引。

@return <code>BufferedImage</code> 形式的所需图像部分。

@exception IllegalStateException  如果尚未设置输入源。
@exception IndexOutOfBoundsException 如果所提供的索引超出范围。
@exception IOException  如果在读取过程中发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.image.BufferedImage javax.imageio.ImageReader.read(int imageIndex, ImageReadParam param) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用所提供的 <code>ImageReadParam</code> 读取通过索引 <code>imageIndex</code> 指定的对象，并将它作为一个完整的 <code>BufferedImage</code> 返回。

<p> 实际返回的 <code>BufferedImage</code> 将使用 <code>getDestination</code> 方法定义的算法来选择。

<p> 所有已注册的 <code>IIOReadProgressListener</code> 对象将通过以下方式获得通知：首先调用其 <code>imageStarted</code> 方法，然后在读取过程中调用其 <code>imageProgress</code> 方法。最后，将调用其 <code>imageComplete</code> 方法。解码像素时，<code>IIOReadUpdateListener</code> 对象可以在读取期间的其他时间更新。最后，<code>IIOReadWarningListener</code> 对象将接收解码期间发生的所有非致命警告。

<p> 要读取的源 band 和要写入的目标 band 的集合通过在所提供的 <code>ImageReadParam</code> 上调用 <code>getSourceBands</code> 和 <code>getDestinationBands</code> 确定。如果这些方法返回的数组的长度不同、源 band 集合包含一个比最大可用源索引更大的索引，或者目标 band 集合包含一个比最大的合法目标索引更大的索引，则抛出 <code>IllegalArgumentException</code>。

<p> 如果所提供的 <code>ImageReadParam</code> 包含不受此 reader 支持的可选设置值（<i>例如</i> 源呈现大小或任何特定于格式的设置），则将忽略这些设置。

@param imageIndex 将被获取的图像的索引。
@param param 用来控制读取过程的 <code>ImageReadParam</code>，或者为 <code>null</code>。

@return <code>BufferedImage</code> 形式的所需图像部分。

@exception IllegalStateException  如果尚未设置输入源。
@exception IndexOutOfBoundsException 如果所提供的索引超出范围。
@exception IllegalArgumentException 如果由 <code>param.getSourceBands</code> 和 <code>param.getDestinationBands</code> 指定的源 band 和目标 band 的集合在长度上不同，或者包含超出范围的索引。
@exception IllegalArgumentException 如果所得图像的宽度或高度小于 1。
@exception IOException 如果读取期间发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.imageio.IIOImage javax.imageio.ImageReader.readAll(int imageIndex, ImageReadParam param) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用所提供的 <code>ImageReadParam</code> 读取通过索引 <code>imageIndex</code> 指定的图像，并返回包含图像、缩略图和相关图像元数据的 <code>IIOImage</code>。

<p> 由返回的 <code>IIOImage</code> 实际引用的 <code>BufferedImage</code> 将使用 <code>getDestination</code> 方法定义的算法来选择。

<p> 所有已注册的 <code>IIOReadProgressListener</code> 对象将通过以下方式获得通知：首先调用其 <code>imageStarted</code> 方法，然后在读取过程中调用其 <code>imageProgress</code> 方法。最后，将调用其 <code>imageComplete</code> 方法。解码像素时，<code>IIOReadUpdateListener</code> 对象可以在读取期间的其他时间更新。最后，<code>IIOReadWarningListener</code> 对象将接收解码期间发生的所有非致命警告。

<p> 要读取的源 band 和要写入的目标 band 的集合通过在所提供的 <code>ImageReadParam</code> 上调用 <code>getSourceBands</code> 和 <code>getDestinationBands</code> 确定。如果这些方法返回的数组的长度不同、源 band 集合包含一个比最大可用源索引更大的索引，或者目标 band 集合包含一个比最大的合法目标索引更大的索引，则抛出 <code>IllegalArgumentException</code>。

<p> 无论怎样设置区域，缩略图都将以其完整形式返回。

<p> 如果所提供的 <code>ImageReadParam</code> 包含不受此 reader 支持的可选设置值（<i>例如</i> 源呈现大小或任何特定于格式的设置），则将忽略这些设置。

@param imageIndex 将被获取的图像的索引。
@param param 用来控制读取过程的 <code>ImageReadParam</code>，或者为 <code>null</code>。

@return 一个 <code>IIOImage</code>，包含所需图像部分、一个缩略图集合和关联的图像元数据。

@exception IllegalStateException  如果尚未设置输入源。
@exception IndexOutOfBoundsException 如果所提供的索引超出范围。
@exception IllegalArgumentException 如果由 <code>param.getSourceBands</code> 和 <code>param.getDestinationBands</code> 指定的源 band 和目标 band 的集合在长度上不同，或者包含超出范围的索引。
@exception IllegalArgumentException 如果所得图像的宽度或高度小于 1。
@exception IOException 如果读取期间发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<javax.imageio.IIOImage> javax.imageio.ImageReader.readAll(java.util.Iterator<? extends javax.imageio.ImageReadParam> params) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>IIOImage</code> 对象形式返回包含输入源中所有图像、缩略图和元数据的 <code>Iterator</code>，从 <code>getMinIndex</code> 给定的索引开始。提供一个包含 <code>ImageReadParam</code> 对象的 <code>Iterator</code>，从输入源中读取的每个图像使用一个元素，直到不再有图像可用。如果 read 参数的 <code>Iterator</code> 超出了元素的范围，但输入源中仍然有更多的可用图像，则将默认 read 参数用于剩余的图像。

<p> 如果 <code>params</code> 为 <code>null</code>，则将默认 read 参数用于所有图像。

<p> 由返回的 <code>IIOImage</code> 实际引用的 <code>BufferedImage</code> 将使用 <code>getDestination</code> 方法定义的算法来选择。

<p> 所有已注册 <code>IIOReadProgressListener</code> 对象都将通过调用其 <code>sequenceStarted</code> 方法一次获得通知。然后，对于每个解码图像，都将调用 <code>imageStarted</code>，随后在读取过程中调用 <code>imageProgress</code>，最后调用 <code>imageComplete</code>。<code>sequenceComplete</code> 方法将在解码最后一幅图像后调用。解码像素时，<code>IIOReadUpdateListener</code> 对象可以在读取期间的其他时间更新。最后，<code>IIOReadWarningListener</code> 对象将接收解码期间发生的所有非致命警告。

<p> 要读取的源 band 和要写入的目标 band 的集合通过在所提供的 <code>ImageReadParam</code> 上调用 <code>getSourceBands</code> 和 <code>getDestinationBands</code> 确定。如果这些方法返回的数组的长度不同、源 band 集合包含一个比最大可用源索引更大的索引，或者目标 band 集合包含一个比最大的合法目标索引更大的索引，则抛出 <code>IllegalArgumentException</code>。

<p> 无论怎样设置区域，缩略图都将以其完整形式返回。

<p> 如果任何所提供的 <code>ImageReadParam</code> 都包含不受此 reader 支持的可选设置值（<i>例如</i> 源呈现大小或任何特定于格式的设置），则将忽略这些设置。

@param params 包含 <code>ImageReadParam</code> 对象的 <code>Iterator</code>。

@return 将输入源的内容表示为 <code>IIOImage</code> 的 <code>Iterator</code>。

@exception IllegalStateException  如果尚未设置输入源。
@exception IllegalArgumentException 如果 <code>params</code> 的非 <code>null</code> 元素不是一个 <code>ImageReadParam</code>。
@exception IllegalArgumentException 如果由 <code>param.getSourceBands</code> 和 <code>param.getDestinationBands</code> 指定的源 band 和目标 band 的集合在长度上不同，或者包含超出范围的索引。
@exception IllegalArgumentException 如果所得图像的宽度或高度小于 1。
@exception IOException 如果读取期间发生错误。

@see ImageReadParam
@see IIOImage

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.ImageReader.canReadRaster()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此插件支持只读取像素数据的 {@link java.awt.image.Raster <code>Raster</code>}，则返回 <code>true</code>。如果此方法返回 <code>false</code>，则调用 {@link #readRaster <code>readRaster</code>} 或 {@link #readTileRaster <code>readTileRaster</code>} 将抛出 <code>UnsupportedOperationException</code>。

<p> 默认实现返回 <code>false</code>。
 
@return 如果此插件支持读取原始 <code>Raster</code>，则返回 <code>true</code>。
 
@see #readRaster
@see #readTileRaster

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.Raster javax.imageio.ImageReader.readRaster(int imageIndex, ImageReadParam param) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含图像流中原始像素数据的新 <code>Raster</code> 对象，不应用任何颜色转换。应用程序必须确定如何通过其他方法解释像素数据。所提供的 <code>ImageReadParam</code> 对象中的任何 destination 或 image-type 参数都被忽略，但其他所有参数的使用与 {@link #read <code>read</code>} 方法完全相同，唯一的不同在于所有的目标偏移量被用作逻辑偏移量而不是物理偏移量。所返回的 <code>Raster</code> 的大小将始终是裁剪为实际图像的源区域大小。忽略流自身中的逻辑偏移量。

<p> 此方法允许使用通常应用颜色转换的格式（比如 JPEG）以及通常没有关联颜色空间的格式（比如遥感数据或医学成像数据）来提供对原始像素数据的访问。

<p> 所有已注册的 <code>readUpdateListener</code> 都被忽略，因为没有 <code>BufferedImage</code>，但会调用其他所有侦听器，就像将它们用于 {@link #read <code>read</code>} 方法那样。

<p> 如果 {@link #canReadRaster <code>canReadRaster()</code>} 返回 <code>false</code>，则此方法抛出 <code>UnsupportedOperationException</code>。

<p> 如果所提供的 <code>ImageReadParam</code> 包含不受此 reader 支持的可选设置值（<i>例如</i> 源呈现大小或任何特定于格式的设置），则将忽略这些设置。

<p> 默认的实现抛出 <code>UnsupportedOperationException</code>。

@param imageIndex 要读取的图像的索引。
@param param 用来控制读取过程的 <code>ImageReadParam</code>，或者为 <code>null</code>。

@return <code>Raster</code> 形式的所需图像部分。

@exception UnsupportedOperationException 如果此插件不支持读取原始 <code>Raster</code>。
@exception IllegalStateException 如果输入源尚未设置。
@exception IndexOutOfBoundsException 如果所提供的索引超出范围。
@exception IOException  如果在读取过程中发生错误。

@see #canReadRaster
@see #read
@see java.awt.image.Raster

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.ImageReader.isImageTiled(int imageIndex) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果图像被组织成 <i>tile</i>（即等大小的非重叠矩形），则返回 <code>true</code>。

<p> reader 插件可以选择是否将图像中出现的 tiling 按其存储时的原样公开。甚至可以选择图像中没有显式存在 tiling 时公开 tiling。通常，只有在对访问单独的 tile 有利（在速度或空间方面）时才应该公开 tiling。不管 reader 是否公开 tiling，它必须能够读取 <code>ImageReadParam</code> 中指定的任意矩形区域。

<p> 对于可以保证所有平铺所有图像或者不平铺图像的 reader，分别返回 <code>true</code> 或 <code>false</code>，而不必访问任何图像数据。在这种情况下，即使输入源没有设置或者图像索引超出范围，也未必抛出异常。

<p> 默认实现返回 <code>false</code>。

@param imageIndex 要查询的图像的索引。

@return 如果图像被平铺，则返回 <code>true</code>。

@exception IllegalStateException 如果需要输入源来确定返回值，但没有设置输入源。
@exception IndexOutOfBoundsException 如果必须访问某一图像来确定返回值，但所提供的索引超出范围。
@exception IOException  如果在读取过程中发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.ImageReader.getTileWidth(int imageIndex) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定图像中 tile 的宽度。

<p> 默认实现返回 <code>getWidth(imageIndex)</code>，对于非平铺图像也是如此。支持 tiling 的 reader 应该重写此方法。

@return  tile 的宽度。

@param imageIndex 要查询的图像的索引。

@exception IllegalStateException  如果尚未设置输入源。
@exception IndexOutOfBoundsException 如果所提供的索引超出范围。
@exception IOException  如果在读取过程中发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.ImageReader.getTileHeight(int imageIndex) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定图像中 tile 的高度。

<p> 默认实现返回 <code>getHeight(imageIndex)</code>，对于非平铺图像也是如此。支持 tiling 的 reader 应该重写此方法。

@return  tile 的高度。

@param imageIndex 要查询的图像的索引。

@exception IllegalStateException  如果尚未设置输入源。
@exception IndexOutOfBoundsException 如果所提供的索引超出范围。
@exception IOException  如果在读取过程中发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.ImageReader.getTileGridXOffset(int imageIndex) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定图像中 tile (0, 0) 的左上角的 X 坐标。

<p> 对于 tile 网格 X 偏移量总是具有相同值（通常为 0）的 reader，返回该值，而不必访问任何图像数据。在这种情况下，即使输入源没有设置或者图像索引超出范围，也未必抛出异常。

<p> 默认实现返回 0，对于大多数格式的非平铺图像和平铺图像也是如此。支持 tiling、具有非 (0, 0) 偏移量的 reader 应该重写此方法。

@return tile 网格的 X 偏移量。

@param imageIndex 要查询的图像的索引。

@exception IllegalStateException 如果需要输入源来确定返回值，但没有设置输入源。
@exception IndexOutOfBoundsException 如果必须访问某一图像来确定返回值，但所提供的索引超出范围。
@exception IOException  如果在读取过程中发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.ImageReader.getTileGridYOffset(int imageIndex) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定图像中 tile (0, 0) 的左上角的 Y 坐标。

<p> 对于 tile 网格 Y 偏移量总是具有相同值（通常为 0）的 reader，返回该值，而不必访问任何图像数据。在这种情况下，即使输入源没有设置或者图像索引超出范围，也未必抛出异常。

<p> 默认实现返回 0，对于大多数格式的非平铺图像和平铺图像也是如此。支持 tiling、具有非 (0, 0) 偏移量的 reader 应该重写此方法。

@return tile 网格的 Y 偏移量。

@param imageIndex 要查询的图像的索引。

@exception IllegalStateException 如果需要输入源来确定返回值，但没有设置输入源。
@exception IndexOutOfBoundsException 如果必须访问某一图像来确定返回值，但所提供的索引超出范围。
@exception IOException  如果在读取过程中发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.BufferedImage javax.imageio.ImageReader.readTile(int imageIndex, int tileX, int tileY) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取由 <code>tileX</code> 和 <code>tileY</code> 参数指示的 tile，并以 <code>BufferedImage</code> 形式返回。如果参数超出范围，则抛出 <code>IllegalArgumentException</code>。如果图像是非平铺的，则 0, 0 值将返回整个图像；其他值都将导致抛出 <code>IllegalArgumentException</code>。

<p> 此方法只是一个便捷方法，它等效于调用带有一个 read 参数的 <code>read(int, ImageReadParam)</code>，该参数指定源区域的偏移量为 <code>tileX*getTileWidth(imageIndex)</code>, <code>tileY*getTileHeight(imageIndex)</code>，宽度和高度为 <code>getTileWidth(imageIndex)</code> 和 <code>getTileHeight(imageIndex)</code>；并在因子为 1 和偏移量为 0 的情况下进行二次取样。要对 tile 进行二次取样，需要使用指定此区域的 read 参数和不同的二次取样参数调用 <code>read</code>。

<p> 默认实现在 <code>tileX</code> 和 <code>tileY</code> 为 0 时返回整个图像，其他情况则抛出 <code>IllegalArgumentException</code>。

@param imageIndex 将被获取的图像的索引。
@param tileX 将被获取的 tile 的列索引（从 0 开始）。
@param tileY 将被获取的 tile 的行索引（从 0 开始）。

@return <code>BufferedImage</code> 形式的 tile。

@exception IllegalStateException  如果尚未设置输入源。
@exception IndexOutOfBoundsException 如果 <code>imageIndex</code> 超出范围。
@exception IllegalArgumentException 如果 tile 的索引超出范围。
@exception IOException  如果在读取过程中发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.Raster javax.imageio.ImageReader.readTileRaster(int imageIndex, int tileX, int tileY) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含 tile 中的原始像素数据的新 <code>Raster</code> 对象，不应用任何颜色转换。应用程序必须确定如何通过其他方法解释像素数据。  

<p> 如果 {@link #canReadRaster <code>canReadRaster()</code>} 返回 <code>false</code>，则此方法抛出 <code>UnsupportedOperationException</code>。

<p> 默认实现检查是否支持读取 <code>Raster</code>，如果支持且 <code>tileX</code> 和 <code>tileY</code> 为 0，则调用 {@link #readRaster <code>readRaster(imageIndex, null)</code>}，否则抛出 <code>IllegalArgumentException</code>。

@param imageIndex 将被获取的图像的索引。
@param tileX 将被获取的 tile 的列索引（从 0 开始）。
@param tileY 将被获取的 tile 的行索引（从 0 开始）。

@return <code>Raster</code> 形式的 tile。

@exception UnsupportedOperationException 如果此插件不支持读取原始 <code>Raster</code>。
@exception IllegalArgumentException 如果 tile 索引超出范围。
@exception IllegalStateException  如果尚未设置输入源。
@exception IndexOutOfBoundsException 如果 <code>imageIndex</code> 超出范围。
@exception IOException  如果在读取过程中发生错误。

@see #readTile
@see #readRaster
@see java.awt.image.Raster

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.RenderedImage javax.imageio.ImageReader.readAsRenderedImage(int imageIndex, ImageReadParam param) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>RenderedImage</code> 对象，该对象包含通过索引 <code>imageIndex</code> 指定的图像的内容。默认情况下，返回的图像是由 <code>read(imageIndex, param)</code> 返回的 <code>BufferedImage</code>。

<p> 此方法的语义在某些方面可能不同于其他 <code>read</code> 方法的语义。首先，可以忽略 <code>ImageReadParam</code> 中设置的任何目标图像和/或图像类型。其次，不保证进行一般的侦听器调用，或者进行这些调用时不保证它们是有意义的。这是因为在返回时（甚至任何时候）返回的图像可能并不完全由像素数据填充。

<p> 如果所提供的 <code>ImageReadParam</code> 包含不受此 reader 支持的可选设置值（<i>例如</i> 源呈现大小或任何特定于格式的设置），则将忽略这些设置。

<p> 默认实现调用 {@link #read <code>read(imageIndex, param)</code>}。

@param imageIndex 将被获取的图像的索引。
@param param 用来控制读取过程的 <code>ImageReadParam</code>，或者为 <code>null</code>。

@return 提供图像视图的 <code>RenderedImage</code> 对象。

@exception IllegalStateException  如果尚未设置输入源。
@exception IndexOutOfBoundsException 如果所提供的索引超出范围。
@exception IllegalArgumentException 如果由 <code>param.getSourceBands</code> 和 <code>param.getDestinationBands</code> 指定的源 band 和目标 band 的集合在长度上不同，或者包含超出范围的索引。
@exception IllegalArgumentException 如果所得图像的宽度或高度小于 1。
@exception IOException 如果读取期间发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.ImageReader.readerSupportsThumbnails()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 reader 所理解的图像格式支持与之关联的缩略图预览图像，则返回 <code>true</code>。默认实现返回 <code>false</code>。

<p> 如果此方法返回 <code>false</code>，<code>hasThumbnails</code> 和 <code>getNumThumbnails</code> 将分别返回 <code>false</code> 和 <code>0</code>，而 <code>readThumbnail</code> 将抛出 <code>UnsupportedOperationException</code>（不管其参数如何）。

<p> 不支持缩略图的 reader 不需要实现任何与缩略图有关的方法。

@return 如果支持缩略图，则返回 <code>true</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.ImageReader.hasThumbnails(int imageIndex) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果给定图像具有与之关联的缩略图预览图像，则返回 <code>true</code>。如果该格式不支持缩略图（<code>readerSupportsThumbnails</code> 返回 <code>false</code>），则无论是否已经设置了输入源或者 <code>imageIndex</code> 是否在范围内，其都将将返回 <code>false</code>。

<p> 默认实现在 <code>getNumThumbnails</code> 的返回值大于 0 的情况下返回 <code>true</code>。

@param imageIndex 要查询的图像的索引。

@return 如果给定图像具有缩略图，则返回 <code>true</code>。

@exception IllegalStateException  如果 reader 支持缩略图但尚未设置输入源。
@exception IndexOutOfBoundsException 如果 reader 支持缩略图但 <code>imageIndex</code> 超出范围。
@exception IOException  如果在读取过程中发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.ImageReader.getNumThumbnails(int imageIndex) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与给定图像关联的缩略图预览图像的数量。如果该格式不支持缩略图（<code>readerSupportsThumbnails</code> 返回 <code>false</code>），则无论是否已经设置了输入源或者 <code>imageIndex</code> 是否在范围内，其都将将返回 <code>0</code>。

<p> 默认实现返回 0，不检查其参数。

@param imageIndex 要查询的图像的索引。

@return 与给定图像关联的缩略图的数量。

@exception IllegalStateException  如果 reader 支持缩略图但尚未设置输入源。
@exception IndexOutOfBoundsException 如果 reader 支持缩略图但 <code>imageIndex</code> 超出范围。
@exception IOException  如果在读取过程中发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.ImageReader.getThumbnailWidth(int imageIndex, int thumbnailIndex) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回通过索引 <code>thumbnailIndex</code> 指定的缩略图预览图像的宽度，其与通过索引 <code>ImageIndex</code> 指定的图像关联。

<p> 如果 reader 不支持缩略图（<code>readerSupportsThumbnails</code> 返回 <code>false</code>），则将抛出 <code>UnsupportedOperationException</code>。

<p> 默认实现返回 <code>readThumbnail(imageindex, thumbnailIndex).getWidth()</code>。所以，为了避免强行读取缩略图，子类应该重写此方法（如果有可能）。

@param imageIndex 将被获取的图像的索引。
@param thumbnailIndex 将被获取的缩略图的索引。

@return <code>int</code> 形式的所需缩略图宽度。

@exception UnsupportedOperationException 如果不支持缩略图。
@exception IllegalStateException  如果尚未设置输入源。
@exception IndexOutOfBoundsException 如果任何一个所提供的索引超出范围。
@exception IOException  如果在读取过程中发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.ImageReader.getThumbnailHeight(int imageIndex, int thumbnailIndex) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回通过索引 <code>thumbnailIndex</code> 指定的缩略图预览图像的高度，其与通过索引 <code>ImageIndex</code> 指定的图像关联。

<p> 如果 reader 不支持缩略图（<code>readerSupportsThumbnails</code> 返回 <code>false</code>），则将抛出 <code>UnsupportedOperationException</code>。

<p> 默认实现返回 <code>readThumbnail(imageindex, thumbnailIndex).getHeight()</code>。所以，为了避免强行读取缩略图，子类应该重写此方法（如果有可能）。

@param imageIndex 将被获取的图像的索引。
@param thumbnailIndex 将被获取的缩略图的索引。

@return <code>int</code> 形式的所需缩略图高度。
 
@exception UnsupportedOperationException 如果不支持缩略图。
@exception IllegalStateException  如果尚未设置输入源。
@exception IndexOutOfBoundsException 如果任何一个所提供的索引超出范围。
@exception IOException  如果在读取过程中发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.BufferedImage javax.imageio.ImageReader.readThumbnail(int imageIndex, int thumbnailIndex) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>BufferedImage</code> 形式返回通过索引 <code>thumbnailIndex</code> 指定的缩略图预览图像，其与通过索引 <code>ImageIndex</code> 指定的图像关联。

<p> 所有已注册 <code>IIOReadProgressListener</code> 对象都将通过调用其 <code>thumbnailStarted</code>、<code>thumbnailProgress</code> 和 <code>thumbnailComplete</code> 方法获得通知。

<p> 如果 reader 不支持缩略图（<code>readerSupportsThumbnails</code> 返回 <code>false</code>），则无论是否已经设置了输入源或者索引是否在范围内，其都将抛出 <code>UnsupportedOperationException</code>。

<p> 默认的实现抛出 <code>UnsupportedOperationException</code>。

@param imageIndex 将被获取的图像的索引。
@param thumbnailIndex 将被获取的缩略图的索引。

@return <code>BufferedImage</code> 形式的所需缩略图。

@exception UnsupportedOperationException 如果不支持缩略图。
@exception IllegalStateException  如果尚未设置输入源。
@exception IndexOutOfBoundsException 如果任何一个所提供的索引超出范围。
@exception IOException  如果在读取过程中发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.imageio.ImageReader.abort()
<!-- END KEY -->
<!-- BEGIN DATA -->
请求中止当前所有读取操作。中止后图像的内容将是不确定的。

<p> reader 应该在开始每个读取操作时调用 <code>clearAbortRequest</code>，并在读取期间定期轮询 <code>abortRequested</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized boolean javax.imageio.ImageReader.abortRequested()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果从实例化 reader 或调用 <code>clearAbortRequest</code> 时起，已经请求了中止当前读取操作，则返回 <code>true</code>。

@return 如果应该中止当前读取操作，则返回 <code>true</code>。

@see #abort
@see #clearAbortRequest

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void javax.imageio.ImageReader.clearAbortRequest()
<!-- END KEY -->
<!-- BEGIN DATA -->
清除任何以前的中止请求。在已调用此方法之后，<code>abortRequested</code> 将返回 <code>false</code>。

@see #abort
@see #abortRequested

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.ImageReader.addIIOReadWarningListener(IIOReadWarningListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>IIOReadWarningListener</code> 添加到已注册的警告侦听器的列表中。如果 <code>listener</code> 为 <code>null</code>，则不会抛出任何异常并且不执行任何操作。将本地化发送到给定侦听器的消息（如果可能）以匹配当前 <code>Locale</code>。如果没有设置 <code>Locale</code>，则可将警告消息本地化为适合 reader 的形式。

@param      listener   要注册的 <code>IIOReadWarningListener</code>。

@see #removeIIOReadWarningListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.ImageReader.removeIIOReadWarningListener(IIOReadWarningListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
从已注册的错误侦听器列表中移除 <code>IIOReadWarningListener</code>。如果以前没有注册侦听器，或者 <code>listener</code> 为 <code>null</code>，则不会抛出任何异常并且不执行任何操作。

@param      listener   要取消注册的 IIOReadWarningListener。

@see #addIIOReadWarningListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.ImageReader.removeAllIIOReadWarningListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除所有当前已注册的 <code>IIOReadWarningListener</code> 对象。

<p> 默认实现将 <code>warningListeners</code> 和 <code>warningLocales</code> 实例变量设置为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.ImageReader.addIIOReadProgressListener(IIOReadProgressListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>IIOReadProgressListener</code> 添加到已注册的进度侦听器列表中。如果 <code>listener</code> 为 <code>null</code>，则不会抛出任何异常并且不执行任何操作。

@param      listener   要注册的 IIOReadProgressListener。

@see #removeIIOReadProgressListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.ImageReader.removeIIOReadProgressListener(IIOReadProgressListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
从已注册的进度侦听器列表中移除 <code>IIOReadProgressListener</code>。如果以前没有注册侦听器，或者 <code>listener</code> 为 <code>null</code>，则不会抛出任何异常并且不执行任何操作。

@param      listener   要取消注册的 IIOReadProgressListener。

@see #addIIOReadProgressListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.ImageReader.removeAllIIOReadProgressListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除所有当前已注册的 <code>IIOReadProgressListener</code> 对象。

<p> 默认实现将 <code>progressListeners</code> 实例变量设置为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.ImageReader.addIIOReadUpdateListener(IIOReadUpdateListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>IIOReadUpdateListener</code> 添加到已注册的更新侦听器列表中。如果 <code>listener</code> 为 <code>null</code>，则不会抛出任何异常并且不执行任何操作。在解码图像和缩略图时，侦听器将接收像素更新的通知，该通知中包括逐步传递的起始处和结束处。

<p> 如果不存在更新侦听器，则 reader 可以选择对目标图像和/或缩略图的像素执行较少的更新，这能促使更加有效的解码。

<p> 例如，在逐步 JPEG 解码过程中，每个传递都包含对一个系数集合的更新数据，如果侦听器存在，则必须将这些系数变换成像素值并转换为用于每个传递的 RGB 颜色空间。如果不存在侦听器，则可以累计这些系数，并只变换最终结果和转换颜色一次。

<p> 无论是否执行中间的更新，解码的最终结果都相同。因此，如果只需要最终图像，则最好不注册任何 <code>IIOReadUpdateListener</code>。通常，在通过与本地 CPU 处理相比非常慢的网络连接获取图像时，逐步更新是最有效的；而通过快速连接时，逐步更新实际上会降低图像的显示速度。

@param      listener   要注册的 IIOReadUpdateListener。

@see #removeIIOReadUpdateListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.ImageReader.removeIIOReadUpdateListener(IIOReadUpdateListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
从已注册的更新侦听器列表中移除 <code>IIOReadUpdateListener</code>。如果以前没有注册侦听器，或者 <code>listener</code> 为 <code>null</code>，则不会抛出任何异常并且不执行任何操作。

@param      listener   要取消注册的 IIOReadUpdateListener。

@see #addIIOReadUpdateListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.ImageReader.removeAllIIOReadUpdateListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除所有当前已注册的 <code>IIOReadUpdateListener</code> 对象。

<p> 默认实现将 <code>updateListeners</code> 实例变量设置为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.ImageReader.processSequenceStarted(int minIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用所有已注册 <code>IIOReadProgressListener</code> 的 <code>sequenceStarted</code> 方法向其广播图像读取序列的起始处。子类可以将此方法用作一个便捷方法。

@param minIndex 将读取的最低索引。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.ImageReader.processSequenceComplete()
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用所有已注册 <code>IIOReadProgressListener</code> 的 <code>sequenceComplete</code> 方法向其广播图像读取序列的完成。子类可以将此方法用作一个便捷方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.ImageReader.processImageStarted(int imageIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用所有已注册 <code>IIOReadProgressListener</code> 的 <code>imageStarted</code> 方法向其广播图像读取起始处。子类可以将此方法用作一个便捷方法。

@param imageIndex 即将读取的图像的索引。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.ImageReader.processImageProgress(float percentageDone)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用所有已注册 <code>IIOReadProgressListener</code> 的 <code>imageProgress</code> 方法向其广播图像完成的当前百分比。子类可以将此方法用作一个便捷方法。

@param percentageDone <code>float</code> 值形式的当前完成百分比。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.ImageReader.processImageComplete()
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用所有已注册 <code>IIOReadProgressListener</code> 的 <code>imageComplete</code> 方法向其广播图像读取的完成。子类可以将此方法用作一个便捷方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.ImageReader.processThumbnailStarted(int imageIndex, int thumbnailIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用所有已注册 <code>IIOReadProgressListener</code> 的 <code>thumbnailStarted</code> 方法向其广播缩略图读取的起始处。子类可以将此方法用作一个便捷方法。

@param imageIndex 与该缩略图关联的图像的索引。
@param thumbnailIndex 缩略图的索引。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.ImageReader.processThumbnailProgress(float percentageDone)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用所有已注册 <code>IIOReadProgressListener</code> 的 <code>thumbnailProgress</code> 方法向其广播缩略图完成的当前百分比。子类可以将此方法用作一个便捷方法。

@param percentageDone <code>float</code> 值形式的当前完成百分比。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.ImageReader.processThumbnailComplete()
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用所有已注册 <code>IIOReadProgressListener</code> 的 <code>thumbnailComplete</code> 方法向其广播缩略图读取的完成。子类可以将此方法用作一个便捷方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.ImageReader.processReadAborted()
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用所有已注册 <code>IIOReadProgressListener</code> 的 <code>readAborted</code> 方法向其广播读取已经中止。子类可以将此方法用作一个便捷方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.ImageReader.processPassStarted(BufferedImage theImage, int pass, int minPass, int maxPass, int minX, int minY, int periodX, int periodY, int[] bands)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用所有已注册 <code>IIOReadUpdateListener</code> 的 <code>passStarted</code> 方法向其广播逐步传递的开始。子类可以将此方法用作一个便捷方法。

@param theImage 将被更新的 <code>BufferedImage</code>。
@param pass 当前传递的索引，从 0 开始。
@param minPass 将被解码的第一个传递的索引。
@param maxPass 将要解码的最后一个传递的索引。
@param minX 包含在该传递中的左上角像素的 X 坐标。
@param minY 包含在该传递中的左上角像素的 Y 坐标。
@param periodX 像素间的水平间距。
@param periodY 像素间的垂直间距。
@param bands 指示受影响目标 band 集合的 <code>int</code> 数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.ImageReader.processImageUpdate(BufferedImage theImage, int minX, int minY, int width, int height, int periodX, int periodY, int[] bands)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用所有已注册 <code>IIOReadUpdateListener</code> 的 <code>imageUpdate</code> 方法向其广播样本集合的更新。子类可以将此方法用作一个便捷方法。

@param theImage 将被更新的 <code>BufferedImage</code>。
@param minX 包含在该传递中的左上角像素的 X 坐标。
@param minY 包含在该传递中的左上角像素的 Y 坐标。
@param width 将被更新的区域的总宽度，包括将跳过的像素（如果 <code>periodX &gt; 1</code>）。
@param height 将被更新的区域的总高度，包括将跳过的像素（如果 <code>periodY &gt; 1</code>）。
@param periodX 像素间的水平间距。
@param periodY 像素间的垂直间距。
@param bands 指示受影响目标 band 集合的 <code>int</code> 数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.ImageReader.processPassComplete(BufferedImage theImage)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用所有已注册 <code>IIOReadUpdateListener</code> 的 <code>passComplete</code> 方法向其广播逐步传递的结束。子类可以将此方法用作一个便捷方法。

@param theImage 将被更新的 <code>BufferedImage</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.ImageReader.processThumbnailPassStarted(BufferedImage theThumbnail, int pass, int minPass, int maxPass, int minX, int minY, int periodX, int periodY, int[] bands)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用所有已注册 <code>IIOReadUpdateListener</code> 的 <code>thumbnailPassStarted</code> 方法向其广播缩略图逐步传递的开始。子类可以将此方法用作一个便捷方法。

@param theThumbnail 将被更新的 <code>BufferedImage</code> 缩略图。
@param pass 当前传递的索引，从 0 开始。
@param minPass 将被解码的第一个传递的索引。
@param maxPass 将要解码的最后一个传递的索引。
@param minX 包含在该传递中的左上角像素的 X 坐标。
@param minY 包含在该传递中的左上角像素的 Y 坐标。
@param periodX 像素间的水平间距。
@param periodY 像素间的垂直间距。
@param bands 指示受影响目标 band 集合的 <code>int</code> 数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.ImageReader.processThumbnailUpdate(BufferedImage theThumbnail, int minX, int minY, int width, int height, int periodX, int periodY, int[] bands)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用所有已注册 <code>IIOReadUpdateListener</code> 的 <code>thumbnailUpdate</code> 方法向其广播缩略图图像中样本集合的更新。子类可以将此方法用作一个便捷方法。

@param theThumbnail 将被更新的 <code>BufferedImage</code> 缩略图。
@param minX 包含在该传递中的左上角像素的 X 坐标。
@param minY 包含在该传递中的左上角像素的 Y 坐标。
@param width 将被更新的区域的总宽度，包括将跳过的像素（如果 <code>periodX &gt; 1</code>）。
@param height 将被更新的区域的总高度，包括将跳过的像素（如果 <code>periodY &gt; 1</code>）。
@param periodX 像素间的水平间距。
@param periodY 像素间的垂直间距。
@param bands 指示受影响目标 band 集合的 <code>int</code> 数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.ImageReader.processThumbnailPassComplete(BufferedImage theThumbnail)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用所有已注册 <code>IIOReadUpdateListener</code> 的 <code>thumbnailPassComplete</code> 方法向其广播缩略图逐步传递的结束。子类可以将此方法用作一个便捷方法。

@param theThumbnail 将被更新的 <code>BufferedImage</code> 缩略图。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.ImageReader.processWarningOccurred(String warning)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用所有已注册 <code>IIOReadWarningListener</code> 的 <code>warningOccurred</code> 方法向其广播警告消息。子类可以将此方法用作一个便捷方法。

@param warning 要发送的警告消息。

@exception IllegalArgumentException 如果 <code>warning</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.ImageReader.processWarningOccurred(String baseName, String keyword)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过使用取自 <code>ResourceBundle</code> 的字符串调用所有已注册 <code>IIOReadWarningListener</code> 的 <code>warningOccurred</code> 方法向其广播本地化警告消息。子类可以将此方法用作一个便捷方法。

@param baseName 包含本地化警告消息的 <code>ResourceBundle</code> 集合的基本名称。
@param keyword 用来搜索 <code>ResourceBundle</code> 集合中的警告消息的关键字。

@exception IllegalArgumentException 如果 <code>baseName</code> 为 <code>null</code>。
@exception IllegalArgumentException 如果 <code>keyword</code> 为 <code>null</code>。
@exception IllegalArgumentException 如果无法定位合适的 <code>ResourceBundle</code>。
@exception IllegalArgumentException 如果在定位的 <code>ResourceBundle</code> 中无法找到指定的资源。
@exception IllegalArgumentException 如果从 <code>ResourceBundle</code> 中获取到的对象不是 <code>String</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.ImageReader.reset()
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>ImageReader</code> 恢复到其初始状态。

<p> 默认实现调用 <code>setInput(null, false)</code>、<code>setLocale(null)</code>、<code>removeAllIIOReadUpdateListeners()</code>、<code>removeAllIIOReadWarningListeners()</code>、<code>removeAllIIOReadProgressListeners()</code> 和 <code>clearAbortRequest</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.ImageReader.dispose()
<!-- END KEY -->
<!-- BEGIN DATA -->
允许释放此对象占用的所有资源。在调用此方法后调用其他任何方法（<code>finalize</code> 除外）所产生的结果都是不确定的。

<p>应用程序在确信不再使用此 <code>ImageReader</code> 时，调用此方法非常重要。否则，reader 将继续无限期地占用这些资源。

<p>在超类中，此方法的默认实现不执行任何操作。子类实现应该确保所有资源（特别是本机资源）被释放。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static java.awt.Rectangle javax.imageio.ImageReader.getSourceRegion(ImageReadParam param, int srcWidth, int srcHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
reader 可用来计算应该读取的源图像区域的一个实用方法，计算时考虑任何源区域，并在所提供的 <code>ImageReadParam</code> 中对偏移量设置进行二次取样。实际二次取样因子、目标大小和目标偏移量都<em>没有</em> 考虑，因此必须进行进一步的裁剪。{@link #computeRegions <code>computeRegions</code>} 方法执行所有必要的裁剪。

@param param 将使用的 <code>ImageReadParam</code>，或者为 <code>null</code>。
@param srcWidth 源图像的宽度。
@param srcHeight 源图像的高度。

@return <code>Rectangle</code> 形式的源区域。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static void javax.imageio.ImageReader.computeRegions(ImageReadParam param, int srcWidth, int srcHeight, BufferedImage image, Rectangle srcRegion, Rectangle destRegion)
<!-- END KEY -->
<!-- BEGIN DATA -->
计算感兴趣的源区域和目标区域，将源图像的宽度和高度、可选目标图像和可选 <code>ImageReadParam</code> 都考虑在内。源区域从整个源图像开始。如果指定了一感兴趣的区域，则其将裁剪在 <code>ImageReadParam</code> 中指定的源区域。

<p> 如果任何区域的目标偏移量都为负，则裁剪源区域，使其左上部与目标图像的左上部一致，裁剪时将二次取样考虑在内。然后裁剪结果，使其与目标图像（如果指定了目标图像）右下部一致，将二次取样和目标偏移量考虑在内。

<p> 类似地，从源图像开始的目标区域被转换成 <code>ImageReadParam</code> 中给定的目标偏移量（如果有），并最终被裁剪成目标图像（如果有）。

<p> 如果源区域或目标区域的最终宽度或高度为 0，则抛出 <code>IllegalArgumentException</code>。

<p> 只有需要对源区域进行裁剪时，才能使用 {@link #getSourceRegion <code>getSourceRegion</code>} 方法。

@param param 一个 <code>ImageReadParam</code>，或者为 <code>null</code>。
@param srcWidth 源图像的宽度。
@param srcHeight 源图像的高度。
@param image 将成为目标图像的 <code>BufferedImage</code>，或者为 <code>null</code>。
@param srcRegion 将使用感兴趣的源区域填充的 <code>Rectangle</code>。
@param destRegion 将使用感兴趣的目标区域填充的 <code>Rectangle</code>。
@exception IllegalArgumentException 如果 <code>srcRegion</code> 为 <code>null</code>。
@exception IllegalArgumentException 如果 <code>dstRegion</code> 为 <code>null</code>。
@exception IllegalArgumentException 如果所得到的源区域或目标区域为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static void javax.imageio.ImageReader.checkReadParamBandSettings(ImageReadParam param, int numSrcBands, int numDstBands)
<!-- END KEY -->
<!-- BEGIN DATA -->
reader 可用来测试 <code>ImageReadParam</code> 的源和目标 band 设置的有效性的实用方法。只要 reader 一确定输入流中存在的目标图像的 band 数，以及将写入的目标图像的 band 数，就可以调用此方法。

<p> 该方法根据参数使用 <code>getSourceBands</code> 和 <code>getDestinationBands</code> 方法获取源和目标 band 设置值数组（如果 <code>param</code> 为 <code>null</code> ，则将其视为 <code>null</code>）。如果源 band 设置值数组为 <code>null</code>，则认为其等同于数组 <code>{ 0, 1, ..., numSrcBands - 1 }</code>，对于目标 band 设置值数组情况类似。

<p> 然后该方法测试两个数组的长度是否相等，以及是否两个数组都没有包含大于最大可用 band 索引的值。

<p> 任何失败都将导致抛出 <code>IllegalArgumentException</code>；而成功则导致方法正常返回。

@param param 将用来读取图像 <code>ImageReadParam</code>。
@param numSrcBands 输入源中存在的图像的 band 数。
@param numDstBands 将被写入的目标图像中的 band 数。

@exception IllegalArgumentException 如果 <code>param</code> 包含源和/或目标 band 子集的无效规范。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static java.awt.image.BufferedImage javax.imageio.ImageReader.getDestination(ImageReadParam param, java.util.Iterator<javax.imageio.ImageTypeSpecifier> imageTypes, int width, int height) throws javax.imageio.IIOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回应该在其中写入解码的像素数据的 <code>BufferedImage</code>。通过检查所提供的 <code>ImageReadParam</code>（如果非 <code>null</code>）来确定图像；如果其 <code>getDestination</code> 方法返回一个非 <code>null</code> 值，则返回该图像。否则，调用 <code>param.getDestinationType</code> 方法来确定是否指定了某一特定图像类型。如果已指定，则在检查其是否等于 <code>imageTypes</code> 中包含的类型之一后使用所返回的 <code>ImageTypeSpecifier</code>。

<p> 如果 <code>param</code> 为 <code>null</code> 或者上述步骤没有生成一幅图像或 <code>ImageTypeSpecifier</code>，则使用从 <code>imageTypes</code> 参数获得的第一个值。通常，调用者会将 <code>imageTypes</code> 设置为 <code>getImageTypes(imageIndex)</code> 的值。

<p> 接下来，通过调用 <code>computeRegions</code> 确定图像的维数。将被解码的图像的实际宽度和高度以 <code>width</code> 和 <code>height</code> 参数的形式传入。

@param param 将用来获得目标图像或图像类型的 <code>ImageReadParam</code>，或者为 <code>null</code>。
@param imageTypes 指示合法图像类型的 <code>ImageTypeSpecifier</code> 的 <code>Iterator</code>（默认类型最先使用）。
@param width 开始解码的图像或 tile 的实际宽度。
@param height 开始解码的图像或 tile 的实际高度。

@return 应该在其中写入解码的像素数据的 <code>BufferedImage</code>。

@exception IIOException 如果由 <code>param</code> 指定的 <code>ImageTypeSpecifier</code> 与来自 <code>imageTypes</code> 的任何合法类型不匹配。
@exception IllegalArgumentException 如果 <code>imageTypes</code> 为 <code>null</code> 或空，或者从中获取到的对象类型不是 <code>ImageTypeSpecifier</code>。
@exception IllegalArgumentException 如果得到的图像宽度或高度小于 1。
@exception IllegalArgumentException 如果 <code>width</code> 和 <code>height</code> 的值大于 <code>Integer.MAX_VALUE</code>。

<!-- END DATA -->
