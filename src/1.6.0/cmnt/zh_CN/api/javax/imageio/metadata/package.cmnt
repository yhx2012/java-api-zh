<!-- BEGIN KEY -->
javax.imageio.metadata
<!-- END KEY -->
<!-- BEGIN DATA -->

用于处理读写元数据的 Java Image I/O API 的包。

<p>

读取图像时，其每个流和每个图像元数据都可以作为 <code>IIOMetadata</code> 对象使用。此对象的内部特定于创建它的插件。其内容能够以作为 <code>IIOMetadataNode</code> 对象的树实现的 XML <code>Document</code> 的形式访问。

<p>

写入图像时，其元数据可以通过定义或修改 <code>IIOMetadata</code> 对象设置。这种对象可以从（<code>javax.imageio</code> 包中的）<code>ImageWriter</code> 或 <code>ImageTranscoder</code> 获得。获得这种对象后，就可以通过修改由 <code>IIOMetadataNode</code> 组成的 <code>Document</code> 来设置其内容。可以选择是否使用 <code>IIOMetadataFormat</code> 对象来描述文档格式。

<p>

XML <code>Document</code> 中所含元数据的格式由一个字符串标识，该字符串作为 <code>IIOMetadataNode</code> 对象的树的根节点出现。此字符串包含版本号，例如，&quot;javax_imageio_jpeg_image_1.0&quot;。Reader 和 writer 可能支持同一基本格式的多个版本号，Image I/O API 的方法可以通过将字符串传递给用于获取 <code>IIOMetadata</code> 对象的方法/构造方法来指定要使用的版本。在某些情况下，较新的版本可能与按较旧版本编写的程序不完全兼容（有关示例，请参见下文 JPEG 元数据用法说明的 Native Metadata Format 一节）。

<p>

插件可以选择支持<A
HREF="doc-files/standard_metadata.html">标准（插件无关）格式</A>。此格式不提供元数据的无损耗编码，但是允许以通用方式访问部分元数据。

<p>

每个标准插件都支持所谓的&ldquo;本机&rdquo;元数据格式，该格式以无损耗的方式编码其元数据：

<ul>
<li>
<A HREF="doc-files/gif_metadata.html">GIF 元数据</A>

<li>
<A HREF="doc-files/jpeg_metadata.html">JPEG 元数据</A>

<li>
<A HREF="doc-files/png_metadata.html">PNG 元数据</A>

<li>
<A HREF="doc-files/bmp_metadata.html">BMP 元数据</A>

<li>
<A HREF="doc-files/wbmp_metadata.html">WBMP 元数据</A>

</ul>

@since 1.4


<!-- END DATA -->
