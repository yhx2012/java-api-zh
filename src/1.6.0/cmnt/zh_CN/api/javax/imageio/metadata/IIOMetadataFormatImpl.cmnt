<!-- BEGIN KEY -->
public abstract class javax.imageio.metadata.IIOMetadataFormatImpl extends java.lang.Object implements javax.imageio.metadata.IIOMetadataFormat
<!-- END KEY -->
<!-- BEGIN DATA -->
提供 <code>IIOMetadataFormat</code> 接口的可重用实现的具体类。此外，通过 <code>getStandardFormatInstance</code> 方法提供一个表示标准的、插件无关的 <code>javax_imageio_1.0</code> 格式的静态实例。

<p> 为了提供元素和属性的本地化的描述，应该通过 <code>ResourceBundle.getBundle</code> 使用的常规机制来提供基本名称为 <code>this.getClass().getName() + &quot;Resources&quot;</code> 的 <code>ResourceBundle</code>。简单地说，子类根据命名约定（默认情况下为扩展 <code>IIMetadataFormatImpl</code> 的子类的完全限定名，加上字符串 &quot;Resources&quot;，加上国家/地区、语言和由下划线分隔的变体代码）提供一个或多个其他类。在运行期间，调用 <code>getElementDescription</code> 或 <code>getAttributeDescription</code> 将尝试根据提供的语言环境动态加载这些类，并将使用元素名称或者后跟 '/' 字符再后跟作为键的属性名的元素名称。此键将提供给 <code>ResourceBundle</code> 的 <code>getString</code> 方法，并返回所得到的节点或属性的本地化描述。

<p> 子类可以使用 <code>setResourceBaseName</code> 方法为资源包提供另外的基本名称。

<p> 在需要时，子类可以通过重写提供的 <code>getElementDescription</code> 和 <code>getAttributeDescription</code> 实现来选择它自己的本地化机制。

@see ResourceBundle#getBundle(String,Locale)

@version 0.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.imageio.metadata.IIOMetadataFormatImpl.standardMetadataFormatName
<!-- END KEY -->
<!-- BEGIN DATA -->
包含标准格式名称 <code>&quot;javax_imageio_1.0&quot;</code> 的 <code>String</code> 常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.imageio.metadata.IIOMetadataFormatImpl(String rootName, int childPolicy)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个空的 <code>IIOMetadataFormatImpl</code> 实例，使其具有给定根元素名称和子策略（<code>CHILD_POLICY_REPEAT</code> 除外）。其他元素及其属性以及 <code>Object</code> 引用信息可以使用各种 <code>add</code> 方法添加。

@param rootName 根元素的名称。
@param childPolicy <code>CHILD_POLICY_REPEAT</code> 之外的 <code>CHILD_POLICY_*</code> 常量之一。

@exception IllegalArgumentException 如果 <code>rootName</code> 为 <code>null</code>。
@exception IllegalArgumentException 如果 <code>childPolicy</code> 不是预定义的常量之一。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.imageio.metadata.IIOMetadataFormatImpl(String rootName, int minChildren, int maxChildren)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个空的 <code>IIOMetadataFormatImpl</code> 实例，使其具有给定根元素名称和子策略 <code>CHILD_POLICY_REPEAT</code>。其他元素及其属性以及 <code>Object</code> 引用信息可以使用各种 <code>add</code> 方法添加。

@param rootName 根元素的名称。
@param minChildren 节点的最小子节点数。
@param maxChildren 节点的最大子节点数。

@exception IllegalArgumentException 如果 <code>rootName</code> 为 <code>null</code>。
@exception IllegalArgumentException 如果 <code>minChildren</code> 为负或大于 <code>maxChildren</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.metadata.IIOMetadataFormatImpl.setResourceBaseName(String resourceBaseName)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于查找包含此格式的元素和属性描述的 <code>ResourceBundle</code> 新基本名称。

<p> 在首次调用此方法之前，基本名称将等于 <code>this.getClass().getName() + &quot;Resources&quot;</code>。

@param resourceBaseName 包含新基本名称的 <code>String</code>。

@exception IllegalArgumentException 如果 <code>resourceBaseName</code> 为 <code>null</code>。

@see #getResourceBaseName

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.imageio.metadata.IIOMetadataFormatImpl.getResourceBaseName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前设置的用于查找 <code>ResourceBundle</code> 的基本名称。

@return 包含基本名称的 <code>String</code>。

@see #setResourceBaseName

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.metadata.IIOMetadataFormatImpl.addElement(String elementName, String parentName, int childPolicy)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用某个子策略（<code>CHILD_POLICY_REPEAT</code> 除外）将新元素类型添加到此元数据文档格式中。

@param elementName 新元素的名称。
@param parentName 将作为新元素的父元素的元素的名称。
@param childPolicy <code>CHILD_POLICY_REPEAT</code> 之外的 <code>CHILD_POLICY_*</code> 常量之一，指示新元素的子策略。

@exception IllegalArgumentException 如果 <code>parentName</code> 为 <code>null</code> 或者不是此格式的合法元素名称。
@exception IllegalArgumentException 如果 <code>childPolicy</code> 不是预定义的常量之一。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.metadata.IIOMetadataFormatImpl.addElement(String elementName, String parentName, int minChildren, int maxChildren)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用子策略 <code>CHILD_POLICY_REPEAT</code> 将新元素类型添加到此元数据文档格式中。

@param elementName 新元素的名称。
@param parentName 将作为新元素的父元素的元素的名称。
@param minChildren 节点的最小子节点数。
@param maxChildren 节点的最大子节点数。

@exception IllegalArgumentException 如果 <code>parentName</code> 为 <code>null</code> 或者不是此格式的合法元素名称。
@exception IllegalArgumentException 如果 <code>minChildren</code> 为负或大于 <code>maxChildren</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.metadata.IIOMetadataFormatImpl.addChildElement(String elementName, String parentName)
<!-- END KEY -->
<!-- BEGIN DATA -->
将现有元素添加到给定父节点类型的合法子节点的列表中。

@param parentName 将作为元素的新父元素的元素的名称。
@param elementName 要作为子元素添加的元素的名称。

@exception IllegalArgumentException 如果 <code>elementName</code> 为 <code>null</code> 或者不是此格式的合法元素名称。
@exception IllegalArgumentException 如果 <code>parentName</code> 为 <code>null</code> 或者不是此格式的合法元素名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.metadata.IIOMetadataFormatImpl.removeElement(String elementName)
<!-- END KEY -->
<!-- BEGIN DATA -->
从格式中移除元素。如果不存在使用给定名字的元素，则不执行任何操作并且不会抛出任何异常。

@param elementName 要移除的元素的名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(String elementName, String attrName, int dataType, boolean required, String defaultValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
将新属性添加到以前定义的可以被设置为任意值的元素中。

@param elementName 元素的名称。
@param attrName 要添加的属性的名称。
@param dataType 属性的数据类型（字符串格式），<code>DATATYPE_*</code> 常量之一。
@param required 如果属性必须存在，则为 <code>true</code>。
@param defaultValue 属性的默认值，或者为 <code>null</code>。

@exception IllegalArgumentException 如果 <code>elementName</code> 为 <code>null</code> 或者不是此格式的合法元素名称。
@exception IllegalArgumentException 如果 <code>attrName</code> 为 <code>null</code>。
@exception IllegalArgumentException 如果 <code>dataType</code> 不是预定义的常量之一。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(String elementName, String attrName, int dataType, boolean required, String defaultValue, java.util.List<java.lang.String> enumeratedValues)
<!-- END KEY -->
<!-- BEGIN DATA -->
将新属性添加到以前定义的元素中，该元素将由一组枚举值定义。

@param elementName 元素的名称。
@param attrName 要添加的属性的名称。
@param dataType 属性的数据类型（字符串格式），<code>DATATYPE_*</code> 常量之一。
@param required 如果属性必须存在，则为 <code>true</code>。
@param defaultValue 属性的默认值，或者为 <code>null</code>。
@param enumeratedValues 包含属性合法值的 <code>String</code> 组成的 <code>List</code>。

@exception IllegalArgumentException 如果 <code>elementName</code> 为 <code>null</code> 或者不是此格式的合法元素名称。
@exception IllegalArgumentException 如果 <code>attrName</code> 为 <code>null</code>。
@exception IllegalArgumentException 如果 <code>dataType</code> 不是预定义的常量之一。
@exception IllegalArgumentException 如果 <code>enumeratedValues</code> 为 <code>null</code>。
@exception IllegalArgumentException 如果 <code>enumeratedValues</code> 不包含至少一项。
@exception IllegalArgumentException 如果 <code>enumeratedValues</code> 包含不为 <code>String</code> 的元素或者为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(String elementName, String attrName, int dataType, boolean required, String defaultValue, String minValue, String maxValue, boolean minInclusive, boolean maxInclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
将新属性添加到以前定义的元素中，该元素将由一系列值定义。

@param elementName 元素的名称。
@param attrName 要添加的属性的名称。
@param dataType 属性的数据类型（字符串格式），<code>DATATYPE_*</code> 常量之一。
@param required 如果属性必须存在，则为 <code>true</code>。
@param defaultValue 属性的默认值，或者为 <code>null</code>。
@param minValue 属性的最小（是否包括两端的值取决于 <code>minInclusive</code> 的值）合法值（<code>String</code> 形式）。
@param maxValue 属性的最大（是否包括两端的值取决于 <code>minInclusive</code> 的值）合法值（<code>String</code> 形式）。
@param minInclusive 如果包括 <code>minValue</code>，则为 <code>true</code>。
@param maxInclusive 如果包括 <code>maxValue</code>，则为 <code>true</code>。

@exception IllegalArgumentException 如果 <code>elementName</code> 为 <code>null</code> 或者不是此格式的合法元素名称。
@exception IllegalArgumentException 如果 <code>attrName</code> 为 <code>null</code>。
@exception IllegalArgumentException 如果 <code>dataType</code> 不是预定义的常量之一。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(String elementName, String attrName, int dataType, boolean required, int listMinLength, int listMaxLength)
<!-- END KEY -->
<!-- BEGIN DATA -->
将新属性添加到以前定义的元素中，该元素将由值的列表定义。

@param elementName 元素的名称。
@param attrName 要添加的属性的名称。
@param dataType 属性的数据类型（字符串格式），<code>DATATYPE_*</code> 常量之一。
@param required 如果属性必须存在，则为 <code>true</code>。
@param listMinLength 列表项的最小合法数。
@param listMaxLength 列表项的最大合法数。

@exception IllegalArgumentException 如果 <code>elementName</code> 为 <code>null</code> 或者不是此格式的合法元素名称。
@exception IllegalArgumentException 如果 <code>attrName</code> 为 <code>null</code>。
@exception IllegalArgumentException 如果 <code>dataType</code> 不是预定义的常量之一。
@exception IllegalArgumentException 如果 <code>listMinLength</code> 为负或大于 <code>listMaxLength</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.metadata.IIOMetadataFormatImpl.addBooleanAttribute(String elementName, String attrName, boolean hasDefaultValue, boolean defaultValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
将新属性添加到以前定义的元素中，该元素将由枚举值 <code>TRUE</code> 和 <code>FALSE</code> 定义，数据类型为 <code>DATATYPE_BOOLEAN</code>。

@param elementName 元素的名称。
@param attrName 要添加的属性的名称。
@param hasDefaultValue 如果默认值应该存在，则为 <code>true</code>。
@param defaultValue <code>boolean</code> 值形式的属性默认值；如果 <code>hasDefaultValue</code> 为 <code>false</code>，则忽略该参数。

@exception IllegalArgumentException 如果 <code>elementName</code> 为 <code>null</code> 或者不是此格式的合法元素名称。
@exception IllegalArgumentException 如果 <code>attrName</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.metadata.IIOMetadataFormatImpl.removeAttribute(String elementName, String attrName)
<!-- END KEY -->
<!-- BEGIN DATA -->
从以前定义的元素中移除属性。如果在给定元素中不存在使用给定名字的属性，则不执行任何操作并且不会抛出任何异常。

@param elementName 元素的名称。
@param attrName 要移除的属性的名称。

@exception IllegalArgumentException 如果 <code>elementName</code> 为 <code>null</code> 或者不是此格式的合法元素名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(String elementName, java.lang.Class<T> classType, boolean required, T defaultValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
允许将给定类类型的 <code>Object</code> 引用存储在实现指定元素的节点中。<code>Object</code> 的值是不受约束的（其类类型除外）。

<p> 如果以前允许 <code>Object</code> 引用，则重写以前的设置值。

@param elementName 元素的名称。
@param classType 指示对象值的合法类类型的 <code>Class</code> 变量。
@param required 如果对象值必须存在，则为 <code>true</code>。
@param defaultValue <code>Object</code> 引用的默认值，或者为 <code>null</code>。
 
@exception IllegalArgumentException 如果 <code>elementName</code> 为 <code>null</code> 或者不是此格式的合法元素名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(String elementName, java.lang.Class<T> classType, boolean required, T defaultValue, java.util.List<? extends T> enumeratedValues)
<!-- END KEY -->
<!-- BEGIN DATA -->
允许将给定类类型的 <code>Object</code> 引用存储在实现指定元素的节点中。<code>Object</code> 的值必须为 <code>enumeratedValues</code> 给出的值之一。

<p> 如果以前允许 <code>Object</code> 引用，则重写以前的设置值。

@param elementName 元素的名称。
@param classType 指示对象值的合法类类型的 <code>Class</code> 变量。
@param required 如果对象值必须存在，则为 <code>true</code>。
@param defaultValue <code>Object</code> 引用的默认值，或者为 <code>null</code>。
@param enumeratedValues 包含对象引用的合法值的 <code>Object</code> 组成的 <code>List</code>。
 
@exception IllegalArgumentException 如果 <code>elementName</code> 为 <code>null</code> 或者不是此格式的合法元素名称。
@exception IllegalArgumentException 如果 <code>enumeratedValues</code> 为 <code>null</code>。
@exception IllegalArgumentException 如果 <code>enumeratedValues</code> 不包含至少一项。
@exception IllegalArgumentException 如果 <code>enumeratedValues</code> 包含不为 <code>classType</code> 指定的类类型的实例或者为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(String elementName, java.lang.Class<T> classType, T defaultValue, java.lang.Comparable<? super T> minValue, java.lang.Comparable<? super T> maxValue, boolean minInclusive, boolean maxInclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
允许将给定类类型的 <code>Object</code> 引用存储在实现指定元素的节点中。<code>Object</code> 的值必须在 <code>minValue</code> 和 <code>maxValue</code> 给出的范围中。此外，类类型必须实现 <code>Comparable</code> 接口。

<p> 如果以前允许 <code>Object</code> 引用，则重写以前的设置值。

@param elementName 元素的名称。
@param classType 指示对象值的合法类类型的 <code>Class</code> 变量。
@param defaultValue 默认值
@param minValue 对象值的最小（是否包括两端的值取决于 <code>minInclusive</code> 的值）合法值（<code>String</code> 形式）。
@param maxValue 对象值的最大（是否包括两端的值取决于 <code>minInclusive</code> 的值）合法值（<code>String</code> 形式）。
@param minInclusive 如果包括 <code>minValue</code>，则为 <code>true</code>。
@param maxInclusive 如果包括 <code>maxValue</code>，则为 <code>true</code>。

@exception IllegalArgumentException 如果 <code>elementName</code> 为 <code>null</code> 或者不是此格式的合法元素名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(String elementName, java.lang.Class<?> classType, int arrayMinLength, int arrayMaxLength)
<!-- END KEY -->
<!-- BEGIN DATA -->
允许将给定类类型的 <code>Object</code> 引用存储在实现指定元素的节点中。<code>Object</code> 的值必须为 <code>classType</code> 给出的类类型的对象数组，该数组的元素至少为 <code>arrayMinLength</code> 至多为 <code>arrayMaxLength</code>。

<p> 如果以前允许 <code>Object</code> 引用，则重写以前的设置值。

@param elementName 元素的名称。
@param classType 指示对象值的合法类类型的 <code>Class</code> 变量。
@param arrayMinLength 数组的最小合法长度。
@param arrayMaxLength 数组的最大合法长度。

@exception IllegalArgumentException 如果 <code>elementName</code> 不是此格式的合法元素名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.metadata.IIOMetadataFormatImpl.removeObjectValue(String elementName)
<!-- END KEY -->
<!-- BEGIN DATA -->
禁止将 <code>Object</code> 引用存储在实现指定元素的节点中。

@param elementName 元素的名称。
 
@exception IllegalArgumentException 如果 <code>elementName</code> 不是此格式的合法元素名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.imageio.metadata.IIOMetadataFormatImpl.getElementDescription(String elementName, Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含指定元素的描述的 <code>String</code>，或者 <code>null</code>。如果可能，应将描述本地化为提供的 <code>Locale</code>。

<p> 默认实现利用在 <code>ResourceBundle.getBundle</code> 的注释中描述的应变机制 (fallback mechanism)，首先使用由 <code>setResourceBaseName</code> 设置的当前资源基本名称以及所提供的 <code>Locale</code> 查找 <code>ResourceBundle</code>。如果找到 <code>ResourceBundle</code>，则将元素名称用作其 <code>getString</code> 方法的键并返回结果。如果未找到 <code>ResourceBundle</code> 或者不存在这样的键，则返回 <code>null</code>。
 
<p> 如果 <code>locale</code> 为 <code>null</code>，则使用 <code>Locale.getLocale</code> 返回的当前默认 <code>Locale</code>。

@param elementName 元素的名称。
@param locale 尝试进行本地化的 <code>Locale</code>。

@return 元素描述。

@exception IllegalArgumentException 如果 <code>elementName</code> 为 <code>null</code> 或者不是此格式的合法元素名称。


@see #setResourceBaseName

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeDescription(String elementName, String attrName, Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含指定属性的描述的 <code>String</code>，或者 <code>null</code>。如果可能，应将描述本地化为提供的 <code>Locale</code>。

<p> 默认实现利用在 <code>ResourceBundle.getBundle</code> 的注释中描述的应变机制，首先使用由 <code>setResourceBaseName</code> 设置的当前资源基本名称以及所提供的 <code>Locale</code> 查找 <code>ResourceBundle</code>。如果找到 <code>ResourceBundle</code>，则将后跟 &quot;/&quot; 字符再后跟属性名 (<code>elementName + &quot;/&quot; + attrName</code>) 的元素名称用作其 <code>getString</code> 方法的键，并返回结果。如果未找到 <code>ResourceBundle</code> 或者不存在这样的键，则返回 <code>null</code>。
 
<p> 如果 <code>locale</code> 为 <code>null</code>，则使用 <code>Locale.getLocale</code> 返回的当前默认 <code>Locale</code>。

@param elementName 元素的名称。
@param attrName 属性的名称。
@param locale 尝试进行本地化的 <code>Locale</code>，或者为 <code>null</code>。

@return 属性描述。

@exception IllegalArgumentException 如果 <code>elementName</code> 为 <code>null</code> 或者不是此格式的合法元素名称。
@exception IllegalArgumentException 如果 <code>attrName</code> 为 <code>null</code> 或者不是此元素的合法属性名称。


@see #setResourceBaseName

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.imageio.metadata.IIOMetadataFormat javax.imageio.metadata.IIOMetadataFormatImpl.getStandardFormatInstance()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述标准、插件无关的 <code>javax.imageio_1.0</code> 元数据文档格式的 <code>IIOMetadataFormat</code> 对象，该文档格式在 <code>javax.imageio.metadata</code> 包的注释中描述。

@return 预定义的 <code>IIOMetadataFormat</code> 实例。

<!-- END DATA -->
