<!-- BEGIN KEY -->
public abstract class javax.imageio.spi.ImageWriterSpi extends javax.imageio.spi.ImageReaderWriterSpi
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 <code>ImageWriter</code> 的服务提供者接口 (SPI)。有关服务提供者类的更多信息，请参见 <code>IIORegistry</code> 类的注释。

<p> 每个 <code>ImageWriterSpi</code> 都提供了有关与之关联的 <code>ImageWriter</code> 类的几种类型的信息。

<p> 使用 <code>getVendorName</code>、<code>getDescription</code> 和 <code>getVersion</code> 方法可获得定义 SPI 类和此类简明描述的供应商的名称。可将这些方法进行国际化，以提供特对于语言环境的输出。这些方法主要用于提供可用于组织弹出菜单或其他列表的简短可写信息。

<p> 使用 <code>getFormatNames</code>、<code>getFileSuffixes</code> 和 <code>getMIMEType</code> 方法可获得与服务有关联的格式名称、文件后缀和 MIME 类型的列表。使用这些方法可识别候选 <code>ImageWriter</code>，从而基于手动格式选择、文件命名或 MIME 关联写入特定文件或流。

<p> <code>canEncodeImage</code> 方法提供了确定最有可能解析特定数据流的 <code>ImageWriter</code> 的更可靠途径。此方法允许服务提供者检查实际的图像内容。

<p> 最后，通过调用 <code>createWriterInstance</code> 方法，可获得与此服务提供者关联的 <code>ImageWriter</code> 类的实例。任何重量级的初始化，例如加载本地库或创建大的表，都应推迟，至少应该推迟到完成此方法的第一次调用。

@see IIORegistry
@see javax.imageio.ImageTypeSpecifier
@see javax.imageio.ImageWriter

@version 0.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Class[] javax.imageio.spi.ImageWriterSpi.STANDARD_OUTPUT_TYPE
<!-- END KEY -->
<!-- BEGIN DATA -->
从 <code>getInputTypes</code> 返回的单元素数组，该数组最初包含 <code>ImageInputStream.class</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Class[] javax.imageio.spi.ImageWriterSpi.outputTypes
<!-- END KEY -->
<!-- BEGIN DATA -->
将从 <code>getOutputTypes</code> 返回的 <code>Class</code> 对象的数组，该数组最初为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String[] javax.imageio.spi.ImageWriterSpi.readerSpiNames
<!-- END KEY -->
<!-- BEGIN DATA -->
将从 <code>getImageReaderSpiNames</code> 返回的字符串数组，该数组最初为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.imageio.spi.ImageWriterSpi()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个空的 <code>ImageWriterSpi</code>。为提供所有方法的可用版本，由子类负责初始化实例变量和/或重写方法实现。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.imageio.spi.ImageWriterSpi(String vendorName, String version, java.lang.String[] names, java.lang.String[] suffixes, java.lang.String[] MIMETypes, String writerClassName, java.lang.Class[] outputTypes, java.lang.String[] readerSpiNames, boolean supportsStandardStreamMetadataFormat, String nativeStreamMetadataFormatName, String nativeStreamMetadataFormatClassName, java.lang.String[] extraStreamMetadataFormatNames, java.lang.String[] extraStreamMetadataFormatClassNames, boolean supportsStandardImageMetadataFormat, String nativeImageMetadataFormatName, String nativeImageMetadataFormatClassName, java.lang.String[] extraImageMetadataFormatNames, java.lang.String[] extraImageMetadataFormatClassNames)
<!-- END KEY -->
<!-- BEGIN DATA -->
用给定的一组值构造 <code>ImageWriterSpi</code>。

@param vendorName 供应商名称，它是一个非 <code>null</code> 的 <code>String</code>。
@param version 版本标识符，它是一个非 <code>null</code> 的 <code>String</code>。
@param names 指示格式名称的一个非 <code>null</code> 的 <code>String</code> 数组。必须至少有一个项。
@param suffixes 指示常用文件后缀的 <code>String</code> 数组。如果没有定义后缀，则应指定为 <code>null</code>。长度为 0 的数组将被标准化为 <code>null</code>。
@param MIMETypes 指示格式的 MIME 类型的 <code>String</code> 数组。如果没有定义后缀，则应指定为 <code>null</code>。长度为 0 的数组将被标准化为 <code>null</code>。
@param writerClassName 所关联的 <code>ImageWriterSpi</code> 类的完全限定名，它为一个非 <code>null</code> 的 <code>String</code>。
@param outputTypes 指示合法的输出类型的长度至少为 1 的 <code>Class</code> 对象的数组。
@param readerSpiNames 命名所有与 <code>ImageReader</code> 关联的类的长度至少为 1 的 <code>String</code> 数组，或者为 <code>null</code>。长度为 0 的数组将被标准化为 <code>null</code>。
@param supportsStandardStreamMetadataFormat 一个 <code>boolean</code> 值，指示流元数据对象是否可使用由标准元数据格式描述的树。
@param nativeStreamMetadataFormatName 从 <code>getNativeStreamMetadataFormatName</code> 返回的一个 <code>String</code>，或者为 <code>null</code>。
@param nativeStreamMetadataFormatClassName 将用于实例化从 <code>getNativeStreamMetadataFormat</code> 返回的元数据格式对象的 <code>String</code>，或者为 <code>null</code>。
@param extraStreamMetadataFormatNames 从 <code>getExtraStreamMetadataFormatNames</code> 返回的 <code>String</code> 数组，或者为 <code>null</code>。长度为 0 的数组将被标准化为 <code>null</code>。
@param extraStreamMetadataFormatClassNames 用于实例化从 <code>getStreamMetadataFormat</code> 返回的元数据格式对象的 <code>String</code> 数组，或者为 <code>null</code>。长度为 0 的数组将被标准化为 <code>null</code>。
@param supportsStandardImageMetadataFormat 一个 <code>boolean</code> 值，指示图像元数据对象是否可使用由标准元数据格式描述的树。
@param nativeImageMetadataFormatName 从 <code>getNativeImageMetadataFormatName</code> 返回的一个 <code>String</code>，或者为 <code>null</code>。
@param nativeImageMetadataFormatClassName 用于实例化从 <code>getNativeImageMetadataFormat</code> 返回的元数据格式对象的 <code>String</code>，或者为 <code>null</code>。
@param extraImageMetadataFormatNames 从 <code>getExtraImageMetadataFormatNames</code> 返回的 <code>String</code> 数组。长度为 0 的数组将被标准化为 <code>null</code>。
@param extraImageMetadataFormatClassNames 用于实例化从 <code>getImageMetadataFormat</code> 返回的元数据格式对象的 <code>String</code> 数组，或者为 <code>null</code>。长度为 0 的数组将被标准化为 <code>null</code>。

@exception IllegalArgumentException 如果 <code>vendorName</code> 为 <code>null</code>。
@exception IllegalArgumentException 如果 <code>version</code> 为 <code>null</code>。
@exception IllegalArgumentException 如果 <code>names</code> 为 <code>null</code> 或长度为 0。
@exception IllegalArgumentException 如果 <code>writerClassName</code> 为 <code>null</code>。
@exception IllegalArgumentException 如果 <code>outputTypes</code> 为 <code>null</code> 或长度为 0。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.spi.ImageWriterSpi.isFormatLossless()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 writer 输出的格式准确保留了像素数据位，则返回 <code>true</code>。默认实现返回 <code>true</code>。

@return 如果格式完全保留了像素的准确性，则返回 <code>true</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class[] javax.imageio.spi.ImageWriterSpi.getOutputTypes()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>Class</code> 对象数组，指示可用作 <code>setOutput</code> 方法参数的对象类型。

<p> 对于大多数只输出到 <code>ImageOutputStream</code> 的 writer，应返回一个包含 <code>ImageOutputStream.class</code> 的单元素数组。

@return 长度至少为 1 的、非 <code>null</code> 的 <code>Class</code> 对象数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.imageio.spi.ImageWriterSpi.canEncodeImage(ImageTypeSpecifier type)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果与此服务提供者关联的 <code>ImageWriter</code> 实现能够使用给定的布局编码图像，则返回 <code>true</code>。布局（<i>即</i> 图像的 <code>SampleModel</code> 和 <code>ColorModel</code>）由 <code>ImageTypeSpecifier</code> 对象描述。

<p> 返回的值为 <code>true</code> 并不能绝对保证成功地编码；编码过程中仍有可能因为类似 I/O 错误、不一致或错误的数据结构等而产生错误。执行对图像的基本结构的合理检查是为了确定图像是否处在编码格式范围内。例如，如果要求一个只能编码灰度格式的服务提供者处理 RGB <code>BufferedImage</code>，将返回 <code>false</code>。类似地，能够编码 8 位 RGB 图像格式的服务提供者可能拒绝编码与 alpha 通道关联的图像。

<p> 不同的 <code>ImageWriter</code> 以及由此导致的不同的服务提供者，可以更严格或更松散。例如，即使为了存储而不得不减少每个图像的像素，从而使精度下降，也有可能接受预乘 alpha 的图像。

@param type 指定将要写入的图像的布局的 <code>ImageTypeSpecifier</code>。

@return 如果 writer 看起来能够按给定的布局编码此图像，则返回 <code>true</code>。

@exception IllegalArgumentException 如果 <code>type</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.spi.ImageWriterSpi.canEncodeImage(RenderedImage im)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果与此服务提供者关联的 <code>ImageWriter</code> 实现能够编码给定的 <code>RenderedImage</code> 实例，则返回 <code>true</code>。注意，这包括 <code>java.awt.image.BufferedImage</code> 的实例。

<p> 有关此方法的语义信息，请参见对 <code>canEncodeImage(ImageTypeSpecifier)</code> 的讨论。

@param im 要编码的 <code>RenderedImage</code> 的实例。

@return 如果 writer 看起来能够编码此图像，则返回 <code>true</code>。

@exception IllegalArgumentException 如果 <code>im</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.imageio.ImageWriter javax.imageio.spi.ImageWriterSpi.createWriterInstance() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此服务提供者关联的 <code>ImageWriter</code> 实现的实例。返回的对象最初处于初始状态，就像是调用过其 <code>reset</code> 方法。

<p> 默认实现只返回 <code>createWriterInstance(null)</code>。
     
@return 一个 <code>ImageWriter</code> 实例。

@exception IOException 如果加载或初始化 writer 类时发生错误，或在实例化或初始化 writer 对象时发生错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.imageio.ImageWriter javax.imageio.spi.ImageWriterSpi.createWriterInstance(Object extension) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此服务提供者关联的 <code>ImageWriter</code> 实现的实例。返回的对象最初处于初始状态，就像是调用过其 <code>reset</code> 方法。

<p> 可以在构造时向插件提供 <code>Object</code>。对象的本质完全由插件决定。

<p> 通常情况下，插件将使用类似 <code>return new MyImageWriter(this)</code> 的代码来实现此方法。

@param extension 特定于插件的扩展对象，该对象可为 <code>null</code>。

@return 一个 <code>ImageWriter</code> 实例。

@exception IOException 如果实例化此 writer 的尝试失败。
@exception IllegalArgumentException 如果 <code>ImageWriter</code> 的构造方法抛出一个 <code>IllegalArgumentException</code> 指示此扩展对象不适合在这里使用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.spi.ImageWriterSpi.isOwnWriter(ImageWriter writer)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果传入的 <code>ImageWriter</code> 对象是与此服务提供者关联的 <code>ImageWriter</code> 的实例，则返回 <code>true</code>。

@param writer 一个 <code>ImageWriter</code> 实例。

@return 如果 <code>writer</code> 可识别，则返回 <code>true</code>。

@exception IllegalArgumentException 如果 <code>writer</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] javax.imageio.spi.ImageWriterSpi.getImageReaderSpiNames()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>String</code> 数组，该数组包含所有能够理解由与此服务提供者关联的 <code>ImageWriter</code> 使用的内部元数据表示形式的 <code>ImageReaderSpi</code> 类的完全限定名。如果没有指定这样的 <code>ImageReaders</code>，则返回 <code>null</code>。如果返回了非 <code>null</code> 的值，则其长度一定不能为零。

<p> 数组中的第一项必须是&ldquo;首选&rdquo;reader 的服务提供者的名称，因为它将用于实例化由 <code>ImageIO.getImageReader(ImageWriter)</code> 返回的 <code>ImageReader</code>。

<p> 此机制可用于获取将以 <code>ImageWriter</code> 能够理解的结构生成非像素元数据的 <code>ImageReaders</code>（请参见 <code>IIOExtraDataInfo</code>）。通过读取此图像并从使用此方法获取的 <code>ImageReaders</code> 之一获取此数据并将其传给 <code>ImageWriter</code>，客户端程序可读取图像、进行某些修改并写回图像，同时保留所有的元数据，而不需要理解有关此元数据内部结构的任何事情，甚至图像的格式也不需知道。

@return 一个长度至少为 1 的、包含 <code>ImageReaderSpi</code> 名称的 <code>String</code> 数组，或者返回 <code>null</code>。

@see javax.imageio.ImageIO#getImageReader(ImageWriter)
@see ImageReaderSpi#getImageWriterSpiNames()

<!-- END DATA -->
