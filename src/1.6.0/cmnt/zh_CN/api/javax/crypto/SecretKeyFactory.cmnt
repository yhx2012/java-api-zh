<!-- BEGIN KEY -->
public class javax.crypto.SecretKeyFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示秘密密钥的工厂。

<P> 密钥工厂用来将<I>密钥</I>（类型 <code>Key</code> 的不透明加密密钥）转换为<I>密钥规范</I>（底层密钥材料的透明表示形式），反之亦然。秘密密钥工厂只对秘密（对称）密钥进行操作。

<P> 密钥工厂为双工模式，即其允许根据给定密钥规范（密钥材料）构建不透明密钥对象，或以适当格式获取密钥对象的底层密钥材料。

<P> 应用程序开发人员应参阅其提供者文档，找出 {@link #generateSecret(java.security.spec.KeySpec) generateSecret} 和 {@link #getKeySpec(javax.crypto.SecretKey, java.lang.Class) getKeySpec} 方法所支持的密钥规范。例如，&quot;SunJCE&quot; 提供者提供的 DES 秘密密钥工厂支持 <code>DESKeySpec</code> 作为 DES 密钥的透明表示形式，并且该提供者的 Triple DES 密钥的秘密密钥工厂支持 <code>DESedeKeySpec</code> 作为 Triple DES 密钥的透明表示形式。

@author Jan Luehe

@version 1.36, 10/29/03

@see SecretKey
@see javax.crypto.spec.DESKeySpec
@see javax.crypto.spec.DESedeKeySpec
@see javax.crypto.spec.PBEKeySpec
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.crypto.SecretKeyFactory(SecretKeyFactorySpi keyFacSpi, Provider provider, String algorithm)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建一个 SecretKeyFactory 对象。

@param  keyFacSpi  委托
@param  provider  提供者
@param  algorithm  秘密密钥算法

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.crypto.SecretKeyFactory javax.crypto.SecretKeyFactory.getInstance(String algorithm) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回转换指定算法的秘密密钥的 <code>SecretKeyFactory</code> 对象。

 <p>此方法从首选 Provider 开始遍历已注册安全提供者列表。返回一个封装 SecretKeyFactorySpi 实现的新 SecretKeyFactory 对象，该实现取自支持指定算法的第一个 Provider。

 <p> 注意，可以通过 {@link Security#getProviders() Security.getProviders()} 方法获取已注册提供者列表。

@param  algorithm  所请求的秘密密钥算法的标准名称。有关标准算法名称的信息，请参阅 <a href=
   "{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 中的附录 A。

@return  新的 <code>SecretKeyFactory</code> 对象。

@exception NullPointerException  如果指定的算法为 null。
@exception NoSuchAlgorithmException  如果没有任何 Provider 支持指定算法的 SecretKeyFactorySpi 实现。

@see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.crypto.SecretKeyFactory javax.crypto.SecretKeyFactory.getInstance(String algorithm, String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回转换指定算法的秘密密钥的 <code>SecretKeyFactory</code> 对象。

 <p> 返回一个封装 SecretKeyFactorySpi 实现的新 SecretKeyFactory 对象，该实现取自指定的提供者。指定提供者必须在安全提供者列表中注册。

 <p> 注意，可以通过 {@link Security#getProviders() Security.getProviders()} 方法获取已注册提供者列表。

@param  algorithm  所请求的秘密密钥算法的标准名称。有关标准算法名称的信息，请参阅 <a href=
   "{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 中的附录 A。
@param provider 提供者的名称。

@return  新的 <code>SecretKeyFactory</code> 对象。

@exception NoSuchAlgorithmException  如果不能从指定提供者获得指定算法的 SecretKeyFactorySpi 实现。

@exception NullPointerException  如果指定的算法为 null。
@throws NoSuchProviderException 如果指定提供者未在安全提供者列表中注册。

@exception IllegalArgumentException 如果 <code>provider</code> 为 null 或空。
@see java.security.Provider 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.crypto.SecretKeyFactory javax.crypto.SecretKeyFactory.getInstance(String algorithm, Provider provider) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回转换指定算法的秘密密钥的 <code>SecretKeyFactory</code> 对象。

 <p> 返回一个封装 SecretKeyFactorySpi 实现的新 SecretKeyFactory 对象，该实现取自指定的 Provider 对象。注意，指定 Provider 对象无需在提供者列表中注册。

@param  algorithm  所请求的秘密密钥算法的标准名称。有关标准算法名称的信息，请参阅 <a href=
   "{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 中的附录 A。
@param provider 提供者。

@return  新的 <code>SecretKeyFactory</code> 对象。

@exception NullPointerException  如果指定的算法为 null。
@exception NoSuchAlgorithmException  如果不能从指定的 Provider 对象获得指定算法的 SecretKeyFactorySpi 实现。
@exception IllegalArgumentException 如果 <code>provider</code> 为 null。
@see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider javax.crypto.SecretKeyFactory.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>SecretKeyFactory</code> 对象的提供者。
 
@return  此 <code>SecretKeyFactory</code> 对象的提供者

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.crypto.SecretKeyFactory.getAlgorithm()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>SecretKeyFactory</code> 对象的算法名称。

<p>此名称与在某个创建此 <code>SecretKeyFactory</code> 对象的 <code>getInstance</code> 调用中指定的名称相同。
 
@return  此 <code>SecretKeyFactory</code> 对象的算法名称。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.crypto.SecretKey javax.crypto.SecretKeyFactory.generateSecret(KeySpec keySpec) throws java.security.spec.InvalidKeySpecException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据提供的密钥规范（密钥材料）生成 <code>SecretKey</code> 对象。

@param  keySpec  秘密密钥的规范（密钥材料）

@return  秘密密钥

@exception InvalidKeySpecException  如果给定密钥规范不适合生成秘密密钥的秘密密钥工厂。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.spec.KeySpec javax.crypto.SecretKeyFactory.getKeySpec(SecretKey key, java.lang.Class keySpec) throws java.security.spec.InvalidKeySpecException
<!-- END KEY -->
<!-- BEGIN DATA -->

以请求的格式返回给定密钥对象的规范（密钥材料）。

@param  key  密钥
@param  keySpec 所请求的格式，密钥材料将以此格式返回

@return  所请求格式的底层密钥规范（密钥材料）

@exception InvalidKeySpecException 如果所请求的密钥规范不适合给定的密钥（例如，与 <code>key</code> 和 <code>keySpec</code> 关联的算法不匹配，或者 <code>key</code> 在加密硬件设备上引用一个密钥而 <code>keySpec</code> 是基于软件的密钥规范），或者无法处理给定的密钥（例如，给定的密钥具有此秘密密钥工厂不支持的算法或格式）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.crypto.SecretKey javax.crypto.SecretKeyFactory.translateKey(SecretKey key) throws java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个密钥对象（其提供者未知或可能不受信任）转换为此秘密密钥工厂的相应密钥对象。

@param  key  其提供者未知或不受信任的密钥

@return  已转换的密钥

@exception InvalidKeyException  如果此秘密密钥工厂无法处理给定的密钥。

<!-- END DATA -->
