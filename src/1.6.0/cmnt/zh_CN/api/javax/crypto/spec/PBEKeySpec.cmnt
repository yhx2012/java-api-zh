<!-- BEGIN KEY -->
public class javax.crypto.spec.PBEKeySpec extends java.lang.Object implements java.security.spec.KeySpec
<!-- END KEY -->
<!-- BEGIN DATA -->

可随同基于密码的加密法 (<i>PBE</i>) 使用的供用户选择的密码。

<p>可以将密码视为某种原始密钥内容，由此加密机制使用其导出一个密钥。

<p>不同的 PBE 机制可能对每一个密码字符使用不同的位数。例如，在 <a href="http://www.ietf.org/rfc/rfc2898.txt">PKCS #5</a> 中定义的 PEB 机制仅仅关注每一个字符的低 8 位，而 PKCS #12 关注每一个字符的全 16 位。

<p>通过创建一个合适的密钥工厂实例来将密码转换成为一个 PBE 密钥。例如，PKCS #5 的密钥工厂仅根据每个密码字符的低 8 位来构造 PBE 密钥，而 PKCS #12 的密钥工厂将使用每个字符的全 16 位。

<p>还要注意，此类以 char 数组而不是 <code>String</code> 对象的形式存储密码（这可能更具逻辑性），因为 String 类是不可变的，当不再需要存储在其中的密码时没有任何途径来重写其内部值。因此，此类需要以 char 数组作密码，以便在完成后进行重写。

@author Jan Luehe
@author Valerie Peng

@version 1.17, 06/03/04

@see javax.crypto.SecretKeyFactory
@see PBEParameterSpec
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.crypto.spec.PBEKeySpec(char[] password)
<!-- END KEY -->
<!-- BEGIN DATA -->

带有一个密码的构造方法。如果指定了 null,则使用一个空 char[]。

<p> 注：在将 <code>password</code> 存储进新的 <code>PBEKeySpec</code> 对象前将其复制。

@param password 密码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.crypto.spec.PBEKeySpec(char[] password, byte[] salt, int iterationCount, int keyLength)
<!-- END KEY -->
<!-- BEGIN DATA -->

带有生成可变密钥大小的 PBE 密码的 PBEKey 时使用的一个密码、salt、迭代计数以及导出密钥长度的构造方法。如果指定 <code>password</code> 为 null，则使用一个空 char[]。

<p> 注：在将 <code>password</code> 和 <code>salt</code> 存储进新的 <code>PBEKeySpec</code> 对象前将其复制。

@param password 密码。
@param salt salt。
@param iterationCount 迭代计数。
@param keyLength 要导出的密钥长度。
@exception NullPointerException 如果 <code>salt</code> 为 null。
@exception IllegalArgumentException 如果 <code>salt</code> 为空（即 0 长度）、<code>iterationCount</code> 或 <code>keyLength</code> 不为正。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.crypto.spec.PBEKeySpec(char[] password, byte[] salt, int iterationCount)
<!-- END KEY -->
<!-- BEGIN DATA -->

带有生成固定密钥大小的 PBE 密码的 PBEKey 时使用的一个密码、salt、迭代数的构造方法。如果指定 <code>password</code> 为 null，则使用一个空 char[]。

<p> 注：在将 <code>password</code> 和 <code>salt</code> 存储进新的 <code>PBEKeySpec</code> 对象前将其复制。

@param password 密码。
@param salt salt。
@param iterationCount 迭代计数。
@exception NullPointerException 如果 <code>salt</code> 为 null。
@exception IllegalArgumentException 如果 <code>salt</code> 为空（即 0 长度），或者 <code>iterationCount</code> 不为正。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.spec.PBEKeySpec.clearPassword()
<!-- END KEY -->
<!-- BEGIN DATA -->

清空密码的内部副本。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final char[] javax.crypto.spec.PBEKeySpec.getPassword()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回密码的一份副本。

<p> 注：此方法返回密码的一份副本。调用者负责在不再需要密码后清空密码信息。

@exception IllegalStateException 如果密码已通过调用 <code>clearPassword</code> 方法被清除。
@return 密码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte[] javax.crypto.spec.PBEKeySpec.getSalt()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回 salt 的一份副本，如果未指定则返回 null。

<p> 注：此方法应返回 salt 的一份副本。调用者负责在不再需要 salt 后清空 salt 信息。

@return salt。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.crypto.spec.PBEKeySpec.getIterationCount()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回迭代计数，如果未指定则返回 0。

@return 迭代计数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.crypto.spec.PBEKeySpec.getKeyLength()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回要导出的密钥长度，如果未指定则返回 0。

<p> 注：此方法用于指出可变密钥大小密码的首选密钥长度。实际的密钥大小依赖于每一个提供者的实现。

@return 要导出的密钥长度。

<!-- END DATA -->
