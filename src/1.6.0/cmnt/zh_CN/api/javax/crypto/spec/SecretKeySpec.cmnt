<!-- BEGIN KEY -->
public class javax.crypto.spec.SecretKeySpec extends java.lang.Object implements java.security.spec.KeySpec, javax.crypto.SecretKey
<!-- END KEY -->
<!-- BEGIN DATA -->

此类以与 provider 无关的方式指定一个密钥。

<p>可以使用此类来根据一个字节数组构造一个 <code>SecretKey</code>，而无须通过一个（基于 provider 的）<code>SecretKeyFactory</code>。

<p>此类仅对能表示为一个字节数组并且没有任何与之相关联的钥参数的原始密钥有用，如，DES 或者 Triple DES 密钥。

@author Jan Luehe

@version 1.24, 03/31/04

@see javax.crypto.SecretKey
@see javax.crypto.SecretKeyFactory
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private byte[] javax.crypto.spec.SecretKeySpec.key
<!-- END KEY -->
<!-- BEGIN DATA -->

密钥。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.crypto.spec.SecretKeySpec.algorithm
<!-- END KEY -->
<!-- BEGIN DATA -->

与此密钥关联的算法名称。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.crypto.spec.SecretKeySpec(byte[] key, String algorithm)
<!-- END KEY -->
<!-- BEGIN DATA -->

根据给定的字节数组构造一个密钥。

<p>此构造方法不检查给定的字节实际上是否指定了一个指定算法的密钥。例如，如果算法是 DES，此构造方法不检查 <code>key</code> 是否是 8 字节长，并且也不检查是否是全弱或者半弱密钥。为了执行这些检查，应当使用一个特定于算法的<i>密钥规范</i>（在此情况下是：{@link DESKeySpec DESKeySpec}）。 

@param key 密钥的密钥内容。复制该数组的内容来防止后续修改。
@param algorithm 与给定的密钥内容相关联的密钥算法的名称。有关标准算法名称的信息请参见 <a href=
   "{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 中的附录 A。
@exception IllegalArgumentException 如果 <code>algorithm</code> 为 null 或者 <code>key</code> 为 null 或空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.crypto.spec.SecretKeySpec(byte[] key, int offset, int len, String algorithm)
<!-- END KEY -->
<!-- BEGIN DATA -->

根据给定的字节数组构造一个密钥，使用 <code>key</code> 中的始于且包含 <code>offset</code> 的前 <code>len</code> 个字节。

<p> 组成密钥的字节在 <code>key[offset]</code> 和 <code>key[offset+len-1]</code> 范围内（包含两者）。

<p>此构造方法不检查给定的字节实际上是否指定了一个指定算法的密钥。例如，如果算法是 DES，此构造方法不检查 <code>key</code> 是否是 8 字节长，并且也不检查是否是全弱或者半弱密钥。为了执行这些检查，必须使用一个特定于算法的密钥规范（在此情况下是：{@link DESKeySpec DESKeySpec}）。 

@param key 密钥的密钥内容。复制该数组始于且包含 <code>offset</code> 的前 <code>len</code> 个字节来防止后续修改。
@param offset <code>key</code> 中的偏移量，密钥内容从此处开始。
@param len 密钥内容的长度。
@param algorithm 与给定的密钥内容相关联的密钥算法的名称。有关标准算法名称的信息请参见 <a href=
   "{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 中的附录 A。
@exception IllegalArgumentException 如果 <code>algorithm</code> 为 null 或者 <code>key</code> 为 null、空或太短（即 <code>key.length-offset 小于 len</code>）。
@exception ArrayIndexOutOfBoundsException 如果 <code>offset</code> 或者 <code>len</code> 索引字节在 <code>key</code> 范围外，则抛出该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.crypto.spec.SecretKeySpec.getAlgorithm()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回与此密钥关联的算法的名称。

@return 密钥算法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.crypto.spec.SecretKeySpec.getFormat()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此密钥编码格式的名称。

@return 字符串 &quot;RAW&quot;。

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] javax.crypto.spec.SecretKeySpec.getEncoded()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此密钥的密钥内容。

@return 密钥内容。每次调用此方法都返回一个新数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.crypto.spec.SecretKeySpec.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->

计算此对象的哈希码值。相等的对象也将具有相同的哈希码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.crypto.spec.SecretKeySpec.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->

测试给定对象与此对象的相等性。如果两个 SecretKeySpec 对象都是具有相同的区分大小写的算法名称和密钥编码的 SecretKey 实例，则认为这两者相等。

@param obj 要与此对象进行相等性测试的对象。

@return 如果认为对象相等则返回 true；如果 <code>obj</code> 为 null 或其他情况则返回 false。

<!-- END DATA -->
