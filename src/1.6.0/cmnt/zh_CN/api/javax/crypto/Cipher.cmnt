<!-- BEGIN KEY -->
public class javax.crypto.Cipher extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

此类为加密和解密提供密码功能。它构成了 Java Cryptographic Extension (JCE) 框架的核心。

<p>为创建 Cipher 对象，应用程序调用 Cipher 的 <code>getInstance</code> 方法并将所请求<i>转换</i> 的名称传递给它。还可以指定提供者的名称（可选）。

<p><i>转换</i> 是一个字符串，它描述为产生某种输出而在给定的输入上执行的操作（或一组操作）。转换始终包括加密算法的名称（例如，<i>DES</i>），后面可能跟有一个反馈模式和填充方案。

<p> 转换具有以下形式：<p>

 <ul>
<li>&ldquo;<i>算法/模式/填充</i>&rdquo;或
 <p>
<li>&ldquo;<i>算法</i>&rdquo;
 </ul>

<P>（后一种情况下，使用模式和填充方案特定于提供者的默认值）。例如，以下是有效的转换：<p>

 <pre>
     Cipher c = Cipher.getInstance(&quot;<i>DES/CBC/PKCS5Padding</i>&quot;);
 </pre>

使用 <code>CFB</code> 和 <code>OFB</code> 之类的模式，Cipher 块可以加密单元中小于该 Cipher 的实际块大小的数据。请求这样一个模式时，可以指定一次处理的位数（可选）：将此数添加到模式名称中，正如 "<code>DES/CFB8/NoPadding</code>" 和 "<code>DES/OFB32/PKCS5Padding</code>" 转换所示。如果未指定该数，则将使用特定于提供者的默认值。（例如，SunJCE 提供者对 DES 使用默认的 64 位）。因此，通过使用如 CFB8 或 OFB8 的 8 位模式，Cipher 块可以被转换为面向字节的 Cipher 流。
 
@author Jan Luehe

@version 1.123, 03/31/04

@see KeyGenerator
@see SecretKey
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.crypto.Cipher.ENCRYPT_MODE
<!-- END KEY -->
<!-- BEGIN DATA -->

用于将 Cipher 初始化为加密模式的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.crypto.Cipher.DECRYPT_MODE
<!-- END KEY -->
<!-- BEGIN DATA -->

用于将 Cipher 初始化为解密模式的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.crypto.Cipher.WRAP_MODE
<!-- END KEY -->
<!-- BEGIN DATA -->

用于将 Cipher 初始化为密钥包装模式的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.crypto.Cipher.UNWRAP_MODE
<!-- END KEY -->
<!-- BEGIN DATA -->

用于将 Cipher 初始化为密钥解包模式的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.crypto.Cipher.PUBLIC_KEY
<!-- END KEY -->
<!-- BEGIN DATA -->

用于表示要解包的密钥为&ldquo;公钥&rdquo;的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.crypto.Cipher.PRIVATE_KEY
<!-- END KEY -->
<!-- BEGIN DATA -->

用于表示要解包的密钥为&ldquo;私钥&rdquo;的常量。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.crypto.Cipher.SECRET_KEY
<!-- END KEY -->
<!-- BEGIN DATA -->

用于表示要解包的密钥为&ldquo;秘密密钥&rdquo;的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.crypto.Cipher(CipherSpi cipherSpi, Provider provider, String transformation)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建 Cipher 对象。

@param cipherSpi 代理
@param provider 提供者
@param transformation 转换

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.crypto.Cipher javax.crypto.Cipher.getInstance(String transformation) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回实现指定转换的 <code>Cipher</code> 对象。

<p>此方法从首选 Provider 开始遍历已注册安全提供者列表。返回一个封装 CipherSpi 实现的新 Cipher 对象，该实现取自支持指定算法的第一个 Provider。

<p> 注意，可以通过 {@link Security#getProviders() Security.getProviders()} 方法获取已注册提供者列表。

@param transformation 转换的名称，例如 <i>DES/CBC/PKCS5Padding</i>。有关标准转换名称的信息，请参见 <a href="{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 的附录 A。

@return 实现所请求转换的 Cipher。

@exception NoSuchAlgorithmException 如果 <code>transformation</code> 为 null、空、无效格式，或者没有 Provider 支持指定算法的 CipherSpi 实现。

@exception NoSuchPaddingException 如果 <code>transformation</code> 包含的填充方案不可用。

@see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.crypto.Cipher javax.crypto.Cipher.getInstance(String transformation, String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, javax.crypto.NoSuchPaddingException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回实现指定转换的 <code>Cipher</code> 对象。

<p> 返回一个封装 CipherSpi 实现的新 Cipher 对象，该实现取自指定提供者。指定提供者必须在安全提供者列表中注册。

<p> 注意，可以通过 {@link Security#getProviders() Security.getProviders()} 方法获取已注册提供者列表。

@param transformation 转换的名称，例如 <i>DES/CBC/PKCS5Padding</i>。有关标准转换名称的信息，请参见 <a href="{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 的附录 A。

@param provider 提供者的名称。

@return 实现所请求转换的 Cipher。

@exception NoSuchAlgorithmException 如果 <code>transformation</code> 为 null、空、无效格式，或者不能从指定提供者获得指定算法的 CipherSpi 实现。

@exception NoSuchProviderException 如果指定提供者未在安全提供者列表中注册。

@exception NoSuchPaddingException 如果 <code>transformation</code> 包含的填充方案不可用。

@exception IllegalArgumentException 如果 <code>provider</code> 为 null 或空。

@see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.crypto.Cipher javax.crypto.Cipher.getInstance(String transformation, Provider provider) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回实现指定转换的 <code>Cipher</code> 对象。

<p> 返回一个封装 CipherSpi 实现的新 Cipher 对象，该实现取自指定的 Provider 对象。 注意，指定的 Provider 对象无需在提供者列表中注册。

@param transformation 转换的名称，例如 <i>DES/CBC/PKCS5Padding</i>。有关标准转换名称的信息，请参见 <a href="{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 的附录 A。

@param provider 提供者。

@return 实现所请求转换的 Cipher。

@exception NoSuchAlgorithmException 如果 <code>transformation</code> 为 null、空、无效格式，或者不能从指定 Provider 对象获得指定算法的 CipherSpi 实现。

@exception NoSuchPaddingException 如果 <code>transformation</code> 包含的填充方案不可用。
@exception IllegalArgumentException 如果 <code>provider</code> 为 null。
@see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider javax.crypto.Cipher.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>Cipher</code> 对象的提供者。
 
@return 此 <code>Cipher</code> 对象的提供者

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.crypto.Cipher.getAlgorithm()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>Cipher</code> 对象的算法名称。

<p>这与创建此 <code>Cipher</code> 对象的 <code>getInstance</code> 调用之一指定的名称相同。

@return 此 <code>Cipher</code> 对象的算法名称。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.crypto.Cipher.getBlockSize()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回块的大小（以字节为单位）。

@return 块的大小（以字节为单位）；如果底层算法不是 Cipher 块，则返回 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.crypto.Cipher.getOutputSize(int inputLen)
<!-- END KEY -->
<!-- BEGIN DATA -->

根据给定的输入长度 <code>inputLen</code>（以字节为单位），返回保存下一个 <code>update</code> 或 <code>doFinal</code> 操作结果所需的输出缓冲区长度（以字节为单位）。

<p>此调用还考虑到任何取自上一个 <code>update</code> 调用的未处理（已缓存）数据和填充。

<p>下一个 <code>update</code> 或 <code>doFinal</code> 调用的实际输出长度可能小于此方法返回的长度。

@param inputLen 输入长度（以字节为单位）

@return 所需的输出缓冲区大小（以字节为单位）

@exception IllegalStateException 如果此 Cipher 处于错误的状态（例如，尚未初始化）

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte[] javax.crypto.Cipher.getIV()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回新缓冲区中的初始化向量 (IV)。

<p>在创建随机 IV 的情况下，或者在基于密码加密或解密的上下文中（其中，IV 派生自用户提供的密码）此方法很有用。 

@return 新缓冲区中的初始化向量；如果底层算法不使用 IV，或者 IV 尚未设置，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.AlgorithmParameters javax.crypto.Cipher.getParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 Cipher 使用的参数。

<p>返回的参数可能与初始化此 Cipher 所使用的参数相同；如果此 Cipher 需要算法参数但却未使用任何参数进行初始化，则返回的参数将由默认值和底层 Cipher 实现所使用的随机参数值组成。

@return 此 Cipher 使用的参数；如果此 Cipher 不使用任何参数，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.crypto.ExemptionMechanism javax.crypto.Cipher.getExemptionMechanism()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 Cipher 使用的豁免 (exemption) 机制对象。

@return 此 Cipher 使用的豁免机制对象，如果此 Cipher 不使用任何豁免机制，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.Cipher.init(int opmode, Key key) throws java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->

用密钥初始化此 Cipher。

<p>为以下 4 种操作之一初始化该 Cipher：加密、解密、密钥包装或密钥解包，具体取决于 <code>opmode</code> 的值。

<p>如果此 Cipher 需要任何无法从给定 <code>key</code> 派生的算法参数，则在为加密或密钥包装初始化时，底层 Cipher 实现应自己生成所需的参数（使用特定于提供者的默认值或随机值）；在为解密或密钥解包初始化时，将引发 <code>InvalidKeyException</code>。可以用 {@link #getParameters() getParameters} 或 {@link #getIV() getIV} 获取生成的参数（如果该参数为 IV）。

<p>如果此 Cipher（包括其底层反馈或填充方案）需要随机字节（例如，用于参数生成），那么它将使用具有最高优先级的已安装提供者的 {@link SecureRandom <code>SecureRandom</code>} 实现作为随机源获取这些字节。（如果已安装的提供者都不提供 SecureRandom 实现，则将使用系统提供的随机源）。

<p>注意，初始化 Cipher 对象时，它将失去所有以前获得的状态。换句话说，初始化 Cipher 相当于创建该 Cipher 的一个新实例并将其初始化。

@param opmode 此 Cipher 的操作模式（为以下之一：<code>ENCRYPT_MODE</code>、<code>DECRYPT_MODE</code>、<code>WRAP_MODE</code> 或 <code>UNWRAP_MODE</code>）
@param key 密钥

@exception InvalidKeyException 如果给定的 key 不适合初始化此 Cipher；如果此 Cipher 为解密初始化，并且所需算法参数无法从给定的 key 确定；如果给定 key 的键大小超出所允许的最大值（由已配置的仲裁策略文件确定）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.Cipher.init(int opmode, Key key, SecureRandom random) throws java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->

用密钥和随机源初始化此 Cipher。

<p>为以下 4 种操作之一初始化该 Cipher：加密、解密、密钥包装或密钥解包，具体取决于 <code>opmode</code> 的值。

<p>如果此 Cipher 需要算法参数，而参数无法从给定的 <code>key</code> 派生，则在为加密或密钥包装初始化时，底层 Cipher 实现应自己生成所需的参数（使用特定于提供者的默认值或随机值）；在为解密或密钥解包初始化时，将引发 <code>InvalidKeyException</code>。可以用 {@link #getParameters() getParameters} 或 {@link #getIV() getIV} 获取生成的参数（如果该参数为 IV）。

<p>如果此 Cipher（包括其底层反馈或填充方案）需要随机字节（例如，用于参数生成），那么它将从 <code>random</code> 获取这些随机字节。

<p>注意，初始化 Cipher 对象时，它将失去所有以前获得的状态。换句话说，初始化 Cipher 相当于创建该 Cipher 的一个新实例并将其初始化。

@param opmode 此 Cipher 的操作模式（为以下之一：<code>ENCRYPT_MODE</code>、<code>DECRYPT_MODE</code>、<code>WRAP_MODE</code> 或 <code>UNWRAP_MODE</code>）
@param key 加密密钥
@param random 随机源

@exception InvalidKeyException 如果给定的 key 不适合初始化此 Cipher；如果此 Cipher 为解密初始化，并且所需算法参数无法从给定的 key 确定；如果给定 key 的键大小超出所允许的最大值（由已配置的仲裁策略文件确定）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.Cipher.init(int opmode, Key key, AlgorithmParameterSpec params) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->

用密钥和一组算法参数初始化此 Cipher。

<p>为以下 4 种操作之一初始化该 Cipher：加密、解密、密钥包装或密钥解包，具体取决于 <code>opmode</code> 的值。

<p>如果此 Cipher 需要算法参数，而 <code>params</code> 为 null，则在为加密或密钥包装初始化时，底层 Cipher 实现应自己生成所需的参数（使用特定于提供者的默认值或随机值）；在为解密或密钥解包初始化时，将引发 <code>InvalidAlgorithmParameterException</code>。可以用 {@link #getParameters() getParameters} 或 {@link #getIV() getIV} 获取生成的参数（如果该参数为 IV）。

<p>如果此 Cipher（包括其底层反馈或填充方案）需要随机字节（例如，用于参数生成），那么它将使用具有最高优先级的已安装提供者的 {@link SecureRandom <code>SecureRandom</code>} 实现作为随机源来获取这些字节。（如果已安装的提供者都不提供 SecureRandom 实现，则将使用系统提供的随机源）。

<p>注意，初始化 Cipher 对象时，它将失去所有以前获得的状态。换句话说，初始化 Cipher 相当于创建该 Cipher 的一个新实例并将其初始化。

@param opmode 此 Cipher 的操作模式（为以下之一：<code>ENCRYPT_MODE</code>、<code>DECRYPT_MODE</code>、<code>WRAP_MODE</code> 或 <code>UNWRAP_MODE</code>）
@param key 加密密钥
@param params 算法参数

@exception InvalidKeyException 如果给定的 key 不适合初始化此 Cipher，或其它的键大小超出所允许的最大（由已配置的仲裁策略文件确定）。
@exception InvalidAlgorithmParameterException 如果给定的算法参数不适合此 Cipher；此 Cipher 为解密初始化，并且需要算法参数而 <code>params</code> 为 null；给定的算法参数所含的加密强度超出了合法限制（由已配置的仲裁策略文件确定）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.Cipher.init(int opmode, Key key, AlgorithmParameterSpec params, SecureRandom random) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->

用一个密钥、一组算法参数和一个随机源初始化此 Cipher。

<p>为以下 4 种操作之一初始化该 Cipher：加密、解密、密钥包装或密钥解包，具体取决于 <code>opmode</code> 的值。

<p>如果此 Cipher 需要算法参数，而 <code>params</code> 为 null，则在为加密或密钥包装初始化时，底层 Cipher 实现应自己生成所需的参数（使用特定于提供者的默认值或随机值）；在为解密或密钥解包初始化时，将引发 <code>InvalidAlgorithmParameterException</code>。可以用 {@link #getParameters() getParameters} 或 {@link #getIV() getIV} 获取生成的参数（如果该参数为 IV）。

<p>如果此 Cipher（包括其底层反馈或填充方案）需要随机字节（例如，用于参数生成），那么它将从 <code>random</code> 获取这些随机字节。

<p>注意，初始化 Cipher 对象时，它将失去所有以前获得的状态。换句话说，初始化 Cipher 相当于创建该 Cipher 的一个新实例并将其初始化。

@param opmode 此 Cipher 的操作模式（为以下之一：<code>ENCRYPT_MODE</code>、<code>DECRYPT_MODE</code>、<code>WRAP_MODE</code> 或 <code>UNWRAP_MODE</code>）
@param key 加密密钥
@param params 算法参数
@param random 随机源

@exception InvalidKeyException 如果给定的 key 不适合初始化此 Cipher，或其键大小超出所允许的最大值（由已配置的仲裁策略文件确定）。
@exception InvalidAlgorithmParameterException 如果给定的算法参数不适合此 Cipher；此 Cipher 为解密初始化，并且需要算法参数而 <code>params</code> 为 null；给定的算法参数所含的加密强度超出了合法限制（由已配置的仲裁策略文件确定）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.Cipher.init(int opmode, Key key, AlgorithmParameters params) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->

用密钥和一组算法参数初始化此 Cipher。

<p>为以下 4 种操作之一初始化该 Cipher：加密、解密、密钥包装或密钥解包，具体取决于 <code>opmode</code> 的值。

<p>如果此 Cipher 需要算法参数，而 <code>params</code> 为 null，则在为加密或密钥包装初始化时，底层 Cipher 实现应自己生成所需的参数（使用特定于提供者的默认值或随机值）；在初始化为解密或密钥解包时，将引发 <code>InvalidAlgorithmParameterException</code>。可以用 {@link #getParameters() getParameters} 或 {@link #getIV() getIV} 获取生成的参数（如果该参数为 IV）。

<p>如果此 Cipher（包括其底层反馈或填充方案）需要随机字节（例如，用于参数生成），那么它将使用具有最高优先级的已安装提供者的 {@link SecureRandom <code>SecureRandom</code>} 实现作为随机源来获取这些字节。（如果已安装的提供者都不提供 SecureRandom 实现，则将使用系统提供的随机源）。

<p>注意，初始化 Cipher 对象时，它将失去所有以前获得的状态。换句话说，初始化 Cipher 相当于创建该 Cipher 的一个新实例并将其初始化。

@param opmode 此 Cipher 的操作模式（为以下之一：<code>ENCRYPT_MODE</code>、<code>DECRYPT_MODE</code>、<code>WRAP_MODE</code> 或 <code>UNWRAP_MODE</code>）
@param key 加密密钥
@param params 算法参数

@exception InvalidKeyException 如果给定的 key 不适合初始化此 Cipher，或其键大小超出所允许的最大值（由已配置的仲裁策略文件确定）。
@exception InvalidAlgorithmParameterException 如果给定的算法参数不适合此 Cipher；此 Cipher 为解密初始化，并且需要算法参数而 <code>params</code> 为 null；给定的算法参数所含的加密强度超出了合法限制（由已配置的仲裁策略文件确定）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.Cipher.init(int opmode, Key key, AlgorithmParameters params, SecureRandom random) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->

用一个密钥、一组算法参数和一个随机源初始化此 Cipher。

<p>为以下 4 种操作之一初始化该 Cipher：加密、解密、密钥包装或密钥解包，具体取决于 <code>opmode</code> 的值。

<p>如果此 Cipher 需要算法参数，而 <code>params</code> 为 null，则在为加密或密钥包装初始化时，底层 Cipher 实现应自己生成所需的参数（使用特定于提供者的默认值或随机值）；在为解密或密钥解包初始化时，将引发 <code>InvalidAlgorithmParameterException</code>。可以用 {@link #getParameters() getParameters} 或 {@link #getIV() getIV} 获取生成的参数（如果该参数为 IV）。

<p>如果此 Cipher（包括其底层反馈或填充方案）需要随机字节（例如，用于参数生成），那么它将从 <code>random</code> 获取这些随机字节。

<p>注意，初始化 Cipher 对象时，它将失去所有以前获得的状态。换句话说，初始化 Cipher 相当于创建该 Cipher 的一个新实例并将其初始化。

@param opmode 此 Cipher 的操作模式（为以下之一：<code>ENCRYPT_MODE</code>、<code>DECRYPT_MODE</code>、<code>WRAP_MODE</code> 或 <code>UNWRAP_MODE</code>）
@param key 加密密钥
@param params 算法参数
@param random 随机源

@exception InvalidKeyException 如果给定的 key 不适合初始化此 Cipher，或其键大小超出所允许的最大值（由已配置的仲裁策略文件确定）。
@exception InvalidAlgorithmParameterException 如果给定的算法参数不适合此 Cipher；此 Cipher 为解密初始化，并且需要算法参数而 <code>params</code> 为 null；给定的算法参数所含的加密强度超出了合法限制（由已配置的仲裁策略文件确定）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.Cipher.init(int opmode, Certificate certificate) throws java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->

用取自给定证书的公钥初始化此 Cipher。
<p> 为以下 4 种操作之一初始化该 Cipher：加密、解密、密钥包装或密钥解包，具体取决于 <code>opmode</code> 的值。

<p>如果证书类型为 X.509 并有一个标记为关键的 <i>key usage</i> 扩展字段，且此 <i>key usage</i> 扩展字段的值表示在 <code>opmode</code> 值所代表的操作中不应该使用该证书中的公钥及其相应的私钥，则抛出 <code>InvalidKeyException</code>。

<p> 如果此 Cipher 需要算法参数，而此参数无法从给定证书中的公钥派生，则在为加密或密钥包装初始化时，底层 Cipher 实现应自己生成所需的参数（使用特定于提供者的默认值或随机值）；在为解密或密钥解包初始化时，将引发 <code>InvalidKeyException</code>。可以用 {@link #getParameters() getParameters} 或 {@link #getIV() getIV} 获取生成的参数（如果该参数为 IV）。

<p>如果此 Cipher（包括其底层反馈或填充方案）需要随机字节（例如，用于参数生成），那么它将使用具有最高优先级的已安装提供者的 <code>SecureRandom</code> 实现作为随机源获取这些字节。（如果已安装的提供者都不提供 SecureRandom 实现，则将使用系统提供的随机源）。

<p>注意，初始化 Cipher 对象时，它将失去所有以前获得的状态。换句话说，初始化 Cipher 相当于创建该 Cipher 的一个新实例并将其初始化。

@param opmode 此 Cipher 的操作模式（为以下之一：<code>ENCRYPT_MODE</code>、<code>DECRYPT_MODE</code>、<code>WRAP_MODE</code> 或 <code>UNWRAP_MODE</code>）
@param certificate 证书

@exception InvalidKeyException 如果给定证书中的公钥不适合初始化此 Cipher；此 Cipher 为解密或解包密钥初始化，并且所需算法参数无法通过给定证书的公钥确定；给定证书中公钥的键大小超出所允许的最大值（由已配置的仲裁策略文件确定）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.Cipher.init(int opmode, Certificate certificate, SecureRandom random) throws java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->

用取自给定证书的公钥和随机源初始化此 Cipher。

<p>为以下 4 种操作之一初始化该 Cipher：加密、解密、密钥包装或密钥解包，具体取决于 <code>opmode</code> 的值。

<p>如果证书类型为 X.509 并有一个标记为关键的 <i>key usage</i> 扩展字段，且此 <i>key usage</i> 扩展字段的值表示在 <code>opmode</code> 值所代表的操作中不应该使用该证书中的公钥及其相应的私钥，则抛出 <code>InvalidKeyException</code>。

<p>如果此 Cipher 需要算法参数，而此参数无法从给定 <code>certificate</code> 中的公钥派生，则在为加密或密钥包装初始化时，底层 Cipher 实现应自己生成所需的参数（使用特定于提供者的默认值或随机值）；在为解密或密钥解包初始化时，将引发 <code>InvalidKeyException</code>。可以用 {@link #getParameters() getParameters} 或 {@link #getIV() getIV} 获取生成的参数（如果该参数为 IV）。

<p>如果此 Cipher（包括其底层反馈或填充方案）需要随机字节（例如，用于参数生成），那么它将从 <code>random</code> 获取这些随机字节。

<p>注意，初始化 Cipher 对象时，它将失去所有以前获得的状态。换句话说，初始化 Cipher 相当于创建该 Cipher 的一个新实例并将其初始化。

@param opmode 此 Cipher 的操作模式（为以下之一：<code>ENCRYPT_MODE</code>、<code>DECRYPT_MODE</code>、<code>WRAP_MODE</code> 或 <code>UNWRAP_MODE</code>）
@param certificate 证书
@param random 随机源

@exception InvalidKeyException 如果给定证书中的公钥不适合初始化此 Cipher；此 Cipher 为解密或解包密钥初始化，并且所需算法参数无法通过给定证书的公钥确定；给定证书中公钥的键大小超出所允许的最大值（由已配置的仲裁策略文件确定）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte[] javax.crypto.Cipher.update(byte[] input)
<!-- END KEY -->
<!-- BEGIN DATA -->

继续多部分加密或解密操作（具体取决于此 Cipher 的初始化方式），以处理其他数据部分。

<p>处理 <code>input</code> 缓冲区中的字节，并将结果存储在新的缓冲区中。

<p>如果 <code>input</code> 长度为 0，则此方法返回 <code>null</code>。

@param input 输入缓冲区

@return 包含结果的新缓冲区；如果底层 Cipher 为 Cipher 块并且输入数据太短而无法形成新的块，则返回 null。

@exception IllegalStateException 如果此 Cipher 处于错误状态（例如，尚未初始化）

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte[] javax.crypto.Cipher.update(byte[] input, int inputOffset, int inputLen)
<!-- END KEY -->
<!-- BEGIN DATA -->

继续多部分加密或解密操作（具体取决于此 Cipher 的初始化方式），以处理其他数据部分。

<p>处理 <code>input</code> 缓冲区中从 <code>inputOffset</code> 开始（包含）的前 <code>inputLen</code> 个字节，并将结果存储在新的缓冲区中。

<p>如果 <code>inputLen</code> 为 0，则此方法返回 <code>null</code>。

@param input 输入缓冲区
@param inputOffset <code>input</code> 中输入起始处的偏移量
@param inputLen 输入长度

@return 包含结果的新缓冲区；如果底层 Cipher 为 Cipher 块并且输入数据太短而无法形成新的块，则返回 null。

@exception IllegalStateException 如果此 Cipher 处于错误状态（例如，尚未初始化）

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.crypto.Cipher.update(byte[] input, int inputOffset, int inputLen, byte[] output) throws javax.crypto.ShortBufferException
<!-- END KEY -->
<!-- BEGIN DATA -->

继续多部分加密或解密操作（具体取决于此 Cipher 的初始化方式），以处理其他数据部分。

<p>处理 <code>input</code> 缓冲区中从 <code>inputOffset</code> 开始（包含）的前 <code>inputLen</code> 个字节，并将结果存储在 <code>output</code> 缓冲区中。

<p>如果 <code>output</code> 缓冲区太小无法保存该结果，则抛出 <code>ShortBufferException</code>。这种情况下，使用一个稍大的缓冲区再次调用。使用 {@link #getOutputSize(int) getOutputSize} 确定输出缓冲区应为多大。

<p>如果 <code>inputLen</code> 为 0，则此方法返回的长度为 0。

<p>注：此方法应该是复制安全 (copy-safe) 的，这意味着 <code>input</code> 和 <code>output</code> 缓冲区可引用相同的 byte 数组，并且在将结果复制到输出缓冲区时，不会覆盖任何未处理的输入数据。

@param input 输入缓冲区
@param inputOffset <code>input</code> 中输入起始处的偏移量
@param inputLen 输入长度
@param output 保存结果的缓冲区

@return <code>output</code> 中存储的字节数

@exception IllegalStateException 如果此 Cipher 处于错误状态（例如，尚未初始化）
@exception ShortBufferException 如果给定的输出缓冲区太小而无法保存结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.crypto.Cipher.update(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) throws javax.crypto.ShortBufferException
<!-- END KEY -->
<!-- BEGIN DATA -->

继续多部分加密或解密操作（具体取决于此 Cipher 的初始化方式），以处理其他数据部分。

<p>处理 <code>input</code> 缓冲区中从 <code>inputOffset</code> 开始（包含）的前 <code>inputLen</code> 个字节，并将结果存储在 <code>output</code> 缓冲区中从 <code>outputOffset</code> 开始（包含）的位置。

<p>如果 <code>output</code> 缓冲区太小无法保存该结果，则抛出 <code>ShortBufferException</code>。这种情况下，使用一个稍大的缓冲区再次调用。使用 {@link #getOutputSize(int) getOutputSize} 确定输出缓冲区应为多大。

<p>如果 <code>inputLen</code> 为 0，则此方法返回的长度为 0。

<p>注：此方法应该是复制安全的，这意味着 <code>input</code> 和 <code>output</code> 缓冲区可引用相同的 byte 数组，并且在将结果复制到输出缓冲区时，不会覆盖任何未处理的输入数据。

@param input 输入缓冲区
@param inputOffset <code>input</code> 中输入起始处的偏移量
@param inputLen 输入长度
@param output 保存结果的缓冲区
@param outputOffset <code>output</code> 中存储结果处的偏移量

@return <code>output</code> 中存储的字节数

@exception IllegalStateException 如果此 Cipher 处于错误状态（例如，尚未初始化）
@exception ShortBufferException 如果给定的输出缓冲区太小而无法保存结果

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.crypto.Cipher.update(ByteBuffer input, ByteBuffer output) throws javax.crypto.ShortBufferException
<!-- END KEY -->
<!-- BEGIN DATA -->

继续多部分加密或解密操作（具体取决于此 Cipher 的初始化方式），以处理其他数据部分。

<p>处理从 <code>input.position()</code> 开始的所有 <code>input.remaining()</code> 个字节。将结果存储在输出缓冲区中。返回时，输入缓冲区的位置将等于其限制；其限制不变。输出缓冲区的位置将前移 n，其中 n 为此方法返回的值；输出缓冲区的限制不变。

<p>如果 <code>output.remaining()</code> 个字节还不够保存该结果，则抛出 <code>ShortBufferException</code>。这种情况下，使用一个稍大的缓冲区再次调用。使用 {@link #getOutputSize(int) getOutputSize} 确定输出缓冲区应为多大。

<p>注：此方法应该是复制安全的，这意味着 <code>input</code> 和 <code>output</code> 缓冲区可引用相同的内存块，并且在将结果复制到输出缓冲区时，不会覆盖任何未处理的输入数据。

@param input 输入 ByteBuffer
@param output 输出 ByteBuffer

@return <code>output</code> 中存储的字节数

@exception IllegalStateException 如果此 Cipher 处于错误状态（例如，尚未初始化）
@exception IllegalArgumentException 如果输入和输出为相同的对象
@exception ReadOnlyBufferException 如果输出缓冲区为只读
@exception ShortBufferException 如果输出缓冲区中没有足够的空间
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte[] javax.crypto.Cipher.doFinal() throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
<!-- END KEY -->
<!-- BEGIN DATA -->

结束多部分加密或解密操作（具体取决于此 Cipher 的初始化方式）。

<p>处理在上一次 <code>update</code> 操作中缓存的输入数据，其中应用了填充（如果请求）。结果将存储在新缓冲区中。

<p>结束时，此方法将此 Cipher 对象重置为上一次调用 <code>init</code> 初始化得到的状态。即该对象被重置，并可用于加密或解密（具体取决于调用 <code>init</code> 时指定的操作模式）更多的数据。 

<p>注：如果抛出了任何异常，则再次使用此 Cipher 对象前需要将其重置。 
 
@return 包含结果的新缓冲区

@exception IllegalStateException 如果此 Cipher 处于错误状态（例如，尚未初始化）
@exception IllegalBlockSizeException 如果此 Cipher 为 Cipher 块，未请求任何填充（只针对加密模式），并且由此 Cipher 处理的数据总输入长度不是块大小的倍数；如果此加密算法无法处理所提供的输入数据。
@exception BadPaddingException 如果此 Cipher 为解密模式，并且未请求填充（或不填充），但解密的数据没有用适当的填充字节进行限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.crypto.Cipher.doFinal(byte[] output, int outputOffset) throws javax.crypto.IllegalBlockSizeException, javax.crypto.ShortBufferException, javax.crypto.BadPaddingException
<!-- END KEY -->
<!-- BEGIN DATA -->

结束多部分加密或解密操作（具体取决于此 Cipher 的初始化方式）。

<p>处理在上一次 <code>update</code> 操作中缓存的输入数据，其中应用了填充（如果请求）。结果存储在 <code>output</code> 缓冲区中从 <code>outputOffset</code>（包含）开始的位置。

<p>如果 <code>output</code> 缓冲区太小无法保存该结果，则抛出 <code>ShortBufferException</code>。这种情况下，使用一个稍大的缓冲区再次调用。使用 {@link #getOutputSize(int) getOutputSize} 确定输出缓冲区应为多大。

<p>结束时，此方法将此 Cipher 对象重置为上一次调用 <code>init</code> 初始化得到的状态。即该对象被重置，并可用于加密或解密（具体取决于调用 <code>init</code> 时指定的操作模式）更多的数据。 

<p>注：如果抛出了任何异常，则再次使用此 Cipher 对象前需要将其重置。

@param output 用于保存结果的缓冲区
@param outputOffset <code>output</code> 中保存结果处的偏移量

@return <code>output</code> 中存储的字节数

@exception IllegalStateException 如果此 Cipher 处于错误状态（例如，尚未初始化）
@exception IllegalBlockSizeException 如果此 Cipher 为 Cipher 块，未请求任何填充（只针对加密模式），并且由此 Cipher 处理的数据总输入长度不是块大小的倍数；如果此加密算法无法处理所提供的输入数据。
@exception ShortBufferException 如果给定的输出缓冲区太小无法保存结果
@exception BadPaddingException 如果 Cipher 为解密模式，并且未请求填充（或不填充），但解密的数据没有用适当的填充字节进行限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte[] javax.crypto.Cipher.doFinal(byte[] input) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
<!-- END KEY -->
<!-- BEGIN DATA -->

按单部分操作加密或解密数据，或者结束一个多部分操作。数据将被加密或解密（具体取决于此 Cipher 的初始化方式）。

<p>处理 <code>input</code> 缓冲区中的字节以及在上一次 <code>update</code> 操作中缓存的任何输入字节，其中应用了填充（如果请求）。结果将存储在新缓冲区中。

<p>结束时，此方法将此 Cipher 对象重置为上一次调用 <code>init</code> 初始化得到的状态。即该对象被重置，并可用于加密或解密（具体取决于调用 <code>init</code> 时指定的操作模式）更多的数据。

<p>注：如果抛出了任何异常，则再次使用此 Cipher 对象前需要将其重置。

@param input 输入缓冲区

@return 包含结果的新缓冲区

@exception IllegalStateException 如果此 Cipher 处于错误状态（例如，尚未初始化）
@exception IllegalBlockSizeException 如果此 Cipher 为 Cipher 块，未请求任何填充（只针对加密模式），并且由此 Cipher 处理的数据总输入长度不是块大小的倍数；如果此加密算法无法处理所提供的输入数据。
@exception BadPaddingException 如果此 Cipher 为解密模式，并且未请求填充（或不填充），但解密的数据没有用适当的填充字节进行限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte[] javax.crypto.Cipher.doFinal(byte[] input, int inputOffset, int inputLen) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
<!-- END KEY -->
<!-- BEGIN DATA -->

按单部分操作加密或解密数据，或者结束一个多部分操作。数据将被加密或解密（具体取决于此 Cipher 的初始化方式）。

<p>处理 <code>input</code> 缓冲区中从 <code>inputOffset</code> 开始（包含）的前 <code>inputLen</code> 个字节，以及在上一次 <code>update</code> 操作过程中缓存的任何输入字节，其中应用了填充（如果需要）。结果将存储在新缓冲区中。

<p>结束时，此方法将此 Cipher 对象重置为上一次调用 <code>init</code> 初始化得到的状态。即该对象被重置，并可用于加密或解密（具体取决于调用 <code>init</code> 时指定的操作模式）更多的数据。

<p>注：如果抛出了任何异常，则再次使用此 Cipher 对象前需要将其重置。

@param input 输入缓冲区
@param inputOffset <code>input</code> 中输入起始处的偏移量
@param inputLen 输入长度

@return 包含结果的新缓冲区

@exception IllegalStateException 如果此 Cipher 处于错误状态（例如，尚未初始化）
@exception IllegalBlockSizeException 如果此 Cipher 为 Cipher 块，未请求任何填充（只针对加密模式），并且由此 Cipher 处理的数据总输入长度不是块大小的倍数；如果此加密算法无法处理所提供的输入数据。
@exception BadPaddingException 如果此 Cipher 为解密模式，并且未请求填充（或不填充），但解密的数据没有用适当的填充字节进行限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.crypto.Cipher.doFinal(byte[] input, int inputOffset, int inputLen, byte[] output) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
<!-- END KEY -->
<!-- BEGIN DATA -->

按单部分操作加密或解密数据，或者结束一个多部分操作。数据将被加密或解密（具体取决于此 Cipher 的初始化方式）。

<p>处理 <code>input</code> 缓冲区中从 <code>inputOffset</code> 开始（包含）的前 <code>inputLen</code> 个字节，以及在上一次 <code>update</code> 操作过程中缓存的任何输入字节，其中应用了填充（如果需要）。结果将存储在 <code>output</code> 缓冲区中。

<p>如果 <code>output</code> 缓冲区太小无法保存该结果，则抛出 <code>ShortBufferException</code>。这种情况下，使用一个稍大的缓冲区再次调用。使用 {@link #getOutputSize(int) getOutputSize} 确定输出缓冲区应为多大。

<p>结束时，此方法将此 Cipher 对象重置为上一次调用 <code>init</code> 初始化得到的状态。即该对象被重置，并可用于加密或解密（具体取决于调用 <code>init</code> 时指定的操作模式）更多的数据。

<p>注：如果抛出了任何异常，则再次使用此 Cipher 对象前需要将其重置。

<p>注：此方法应该是复制安全的，这意味着 <code>input</code> 和 <code>output</code> 缓冲区可引用相同的 byte 数组，并且在将结果复制到输出缓冲区时，不会覆盖任何未处理的输入数据。

@param input 输入缓冲区
@param inputOffset <code>input</code> 中输入起始处的偏移量
@param inputLen 输入长度
@param output 保存结果的缓冲区

@return <code>output</code> 中存储的字节数

@exception IllegalStateException 如果此 Cipher 处于错误状态（例如，尚未初始化）
@exception IllegalBlockSizeException 如果此 Cipher 为 Cipher 块，未请求任何填充（只针对加密模式），并且由此 Cipher 处理的数据总输入长度不是块大小的倍数；如果此加密算法无法处理所提供的输入数据。
@exception ShortBufferException 如果给定的输出缓冲区太小无法保存结果
@exception BadPaddingException 如果 Cipher 为解密模式，并且未请求填充（或不填充），但解密的数据没有用适当的填充字节进行限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.crypto.Cipher.doFinal(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
<!-- END KEY -->
<!-- BEGIN DATA -->

按单部分操作加密或解密数据，或者结束一个多部分操作。数据将被加密或解密（具体取决于此 Cipher 的初始化方式）。

<p>处理 <code>input</code> 缓冲区中从 <code>inputOffset</code> 开始（包含）的前 <code>inputLen</code> 个字节，以及在上一次 <code>update</code> 操作过程中缓存的任何输入字节，其中应用了填充（如果需要）。结果将存储在 <code>output</code> 缓冲区中从 <code>outputOffset</code>（包含）开始的位置。

<p>如果 <code>output</code> 缓冲区太小无法保存该结果，则抛出 <code>ShortBufferException</code>。这种情况下，使用一个稍大的缓冲区再次调用。使用 {@link #getOutputSize(int) getOutputSize} 确定输出缓冲区应为多大。

<p>结束时，此方法将此 Cipher 对象重置为上一次调用 <code>init</code> 初始化得到的状态。即该对象被重置，并可用于加密或解密（具体取决于调用 <code>init</code> 时指定的操作模式）更多的数据。

<p>注：如果抛出了任何异常，则再次使用此 Cipher 对象前需要将其重置。

<p>注：此方法应该是复制安全的，这意味着 <code>input</code> 和 <code>output</code> 缓冲区可引用相同的 byte 数组，并且在将结果复制到输出缓冲区时，不会覆盖任何未处理的输入数据。

@param input 输入缓冲区
@param inputOffset <code>input</code> 中输入起始处的偏移量
@param inputLen 输入长度
@param output 保存结果的缓冲区
@param outputOffset <code>output</code> 中存储结果处的偏移量

@return <code>output</code> 中存储的字节数

@exception IllegalStateException 如果此 Cipher 处于错误状态（例如，尚未初始化）
@exception IllegalBlockSizeException 如果此 Cipher 为 Cipher 块，未请求任何填充（只针对加密模式），并且由此 Cipher 处理的数据总输入长度不是块大小的倍数；如果此加密算法无法处理所提供的输入数据。
@exception ShortBufferException 如果给定的输出缓冲区太小无法保存结果
@exception BadPaddingException 如果 Cipher 为解密模式，并且未请求填充（或不填充），但解密的数据没有用适当的填充字节进行限制

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.crypto.Cipher.doFinal(ByteBuffer input, ByteBuffer output) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
<!-- END KEY -->
<!-- BEGIN DATA -->

按单部分操作加密或解密数据，或者结束一个多部分操作。数据将被加密或解密（具体取决于此 Cipher 的初始化方式）。

<p>处理从 <code>input.position()</code> 开始的所有 <code>input.remaining()</code> 个字节。结果将存储在输出缓冲区中。返回时，输入缓冲区的位置将等于其限制；其限制不变。输出缓冲区的位置将前移 n，其中 n 为此方法返回的值；输出缓冲区的限制不变。

<p>如果 <code>output.remaining()</code> 个字节还不够保存该结果，则抛出 <code>ShortBufferException</code>。这种情况下，使用一个稍大的缓冲区再次调用。使用 {@link #getOutputSize(int) getOutputSize} 确定输出缓冲区应为多大。

<p>结束时，此方法将此 Cipher 对象重置为上一次调用 <code>init</code> 初始化得到的状态。即该对象被重置，并可用于加密或解密（具体取决于调用 <code>init</code> 时指定的操作模式）更多的数据。

<p>注：如果抛出了任何异常，则再次使用此 Cipher 对象前需要将其重置。

<p>注：此方法应该是复制安全的，这意味着 <code>input</code> 和 <code>output</code> 缓冲区可引用相同的 byte 数组，并且在将结果复制到输出缓冲区时，不会覆盖任何未处理的输入数据。

@param input 输入 ByteBuffer
@param output 输出 ByteBuffer

@return <code>output</code> 中存储的字节数

@exception IllegalStateException 如果此 Cipher 处于错误状态（例如，尚未初始化）
@exception IllegalArgumentException 如果输入和输出为相同的对象
@exception ReadOnlyBufferException 如果输出缓冲区为只读
@exception IllegalBlockSizeException 如果此 Cipher 为 Cipher 块，未请求任何填充（只针对加密模式），并且由此 Cipher 处理的数据总输入长度不是块大小的倍数；如果此加密算法无法处理所提供的输入数据。
@exception ShortBufferException 如果输出缓冲区没有足够的空间
@exception BadPaddingException 如果 Cipher 为解密模式，并且未请求填充（或不填充），但解密的数据没有用适当的填充字节进行限制
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte[] javax.crypto.Cipher.wrap(Key key) throws javax.crypto.IllegalBlockSizeException, java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->

包装密钥。

@param key 要包装的密钥。

@return 已包装的密钥。

@exception IllegalStateException 如果此 Cipher 处于错误状态（例如，尚未初始化）

@exception IllegalBlockSizeException 如果此 Cipher 为 Cipher 块，未请求填充，并且要包装的密钥的编码长度不是块大小的倍数。

@exception InvalidKeyException 如果不能用此 Cipher 包装该密钥，或者这样做不安全（例如，将一个硬件保护的密钥传给只能用于软件保护的 Cipher）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Key javax.crypto.Cipher.unwrap(byte[] wrappedKey, String wrappedKeyAlgorithm, int wrappedKeyType) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

解包一个以前包装的密钥。

@param wrappedKey 要解包的密钥。

@param wrappedKeyAlgorithm 与此包装密钥关联的算法。

@param wrappedKeyType 已包装密钥的类型。此类型必须为 <code>SECRET_KEY</code>、<code>PRIVATE_KEY</code> 或 <code>PUBLIC_KEY</code> 之一。

@return 解包的密钥。

@exception IllegalStateException 如果此 Cipher 处于错误状态（例如，尚未初始化）

@exception NoSuchAlgorithmException 如果没有一个已安装的提供者能够针对 <code>wrappedKeyAlgorithm</code> 创建类型为 <code>wrappedKeyType</code> 的密钥。

@exception InvalidKeyException 如果 <code>wrappedKey</code> 不表示针对 <code>wrappedKeyAlgorithm</code> 的类型为 <code>wrappedKeyType</code> 的已包装密钥。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.crypto.Cipher.getMaxAllowedKeyLength(String transformation) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

根据所安装的 JCE 仲裁策略文件，返回指定转换的最大密钥长度。如果安装了 JCE 无限制强度仲裁策略文件，则返回 Integer.MAX_VALUE。有关 JCE 仲裁策略文件中的默认密钥大小的更多信息，请参见 <a href="{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppE">
 Java Cryptography Architecture Reference Guide</a> 中的附录 E。

@param transformation Cipher 转换。
@return 最大密钥长度（以位为单位） 或 Integer.MAX_VALUE。
@exception NullPointerException 如果 <code>transformation</code> 为 null。
@exception NoSuchAlgorithmException 如果 <code>transformation</code> 不是有效的转换，即格式不为&ldquo;算法&rdquo;或&ldquo;算法/模式/填充&rdquo;。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.security.spec.AlgorithmParameterSpec javax.crypto.Cipher.getMaxAllowedParameterSpec(String transformation) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

根据仲裁策略文件，返回包含最大 Cipher 参数值的 AlgorithmParameterSpec 对象。如果安装了 JCE 无限制强度仲裁策略文件，或者策略文件中对用于指定转换的参数没有最大限制，则返回 null。

@param transformation Cipher 转换。
@return 保存最大值的 AlgorithmParameterSpec，或者返回 null。
@exception NullPointerException 如果 <code>transformation</code> 为 null。
@exception NoSuchAlgorithmException 如果 <code>transformation</code> 不是有效的转换，即格式不为&ldquo;算法&rdquo;或&ldquo;算法/模式/填充&rdquo;。
@since 1.5

<!-- END DATA -->
