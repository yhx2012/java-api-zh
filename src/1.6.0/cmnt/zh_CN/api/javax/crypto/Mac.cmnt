<!-- BEGIN KEY -->
public class javax.crypto.Mac extends java.lang.Object implements java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->

 此类提供&ldquo;消息验证码&rdquo;（Message Authentication Code，MAC）算法的功能。

 <p> MAC 基于秘密密钥提供一种方式来检查在不可靠介质上进行传输或存储的信息的完整性。通常，消息验证码在共享秘密密钥的两个参与者之间使用，以验证这两者之间传输的信息。

 <p> 基于加密哈希函数的 MAC 机制也叫作 HMAC。结合秘密共享密钥，HMAC 可以用于任何加密哈希函数（如 MD5 或 SHA-1）。HMAC 在 RFC 2104 中指定。

@author Jan Luehe

@version 1.18, 04/30/03
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.crypto.Mac(MacSpi macSpi, Provider provider, String algorithm)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建一个 MAC 对象。

@param  macSpi  代理
@param  provider  提供者
@param  algorithm  算法

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.crypto.Mac.getAlgorithm()
<!-- END KEY -->
<!-- BEGIN DATA -->

 返回此 <code>Mac</code> 对象的算法名称。

 <p>此名称与创建此 <code>Mac</code> 对象的 <code>getInstance</code> 调用之一中指定的名称相同。
 
@return  此 <code>Mac</code> 对象的算法名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.crypto.Mac javax.crypto.Mac.getInstance(String algorithm) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回实现指定 MAC 算法的 <code>Mac</code> 对象。

 <p> 此方法从首选 Provider 开始遍历已注册安全提供者列表。返回一个封装 MacSpi 实现的新 Mac 对象，该实现取自支持指定算法的第一个 Provider。

 <p> 注意，可以通过 {@link Security#getProviders() Security.getProviders()} 方法获取已注册提供者列表。

@param  algorithm  所请求 MAC 算法的标准名称。有关标准算法名称的信息，请参阅 <a href=
   "{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 中的附录 A。

@return  新的 <code>Mac</code> 对象。

@exception NoSuchAlgorithmException 如果没有 Provider 支持指定算法的 MacSpi 实现。

@see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.crypto.Mac javax.crypto.Mac.getInstance(String algorithm, String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->

 返回实现指定 MAC 算法的 <code>Mac</code> 对象。

 <p> 返回一个封装 MacSpi 实现的新 Mac 对象，该实现自指定的提供者。指定提供者必须在安全提供者列表中注册。

 <p> 注意，可以通过 {@link Security#getProviders() Security.getProviders()} 方法获取已注册提供者列表。

@param  algorithm  所请求 MAC 算法的标准名称。有关标准算法名称的信息，请参阅 <a href=
   "{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 中的附录 A。
@param provider 提供者的名称。

@return  新的 <code>Mac</code> 对象。

@exception NoSuchAlgorithmException 如果不能从指定提供者获得指定算法的 MacSpi 实现。
@exception NoSuchProviderException 如果指定提供者未在安全提供者列表中注册。
@exception IllegalArgumentException 如果 <code>provider</code> 为 null 或空。
@see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.crypto.Mac javax.crypto.Mac.getInstance(String algorithm, Provider provider) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

 返回实现指定 MAC 算法的 <code>Mac</code> 对象。

 <p> 返回一个封装 MacSpi 实现的新 Mac 对象，该实现取自指定的 Provider 对象。注意，指定的 Provider 对象无需在提供者列表中注册。

@param  algorithm  所请求 MAC 算法的标准名称。有关标准算法名称的信息，请参阅 <a href=
   "{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 中的附录 A。
@param provider 提供者。

@return  新的 <code>Mac</code> 对象。

@exception NoSuchAlgorithmException 如果不能从指定 Provider 对象获得指定算法的 MacSpi 实现。
@exception IllegalArgumentException 如果 <code>provider</code> 为 null。
@see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider javax.crypto.Mac.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>Mac</code> 对象的提供者。
 
@return  此 <code>Mac</code> 对象的提供者。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.crypto.Mac.getMacLength()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回 MAC 的长度，以字节为单位。

@return  MAC 长度，以字节为单位。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.Mac.init(Key key) throws java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->

用给定的密钥初始化此 <code>Mac</code> 对象。

@param  key  密钥。

@exception InvalidKeyException  如果给定密钥不适合初始化此 MAC。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.Mac.init(Key key, AlgorithmParameterSpec params) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->

用给定的密钥和算法参数初始化此 <code>Mac</code> 对象。

@param  key  密钥。
@param  params  算法参数。

@exception InvalidKeyException  如果给定密钥不适合初始化此 MAC。
@exception InvalidAlgorithmParameterException  如果给定算法参数不适合此 MAC。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.Mac.update(byte input) throws java.lang.IllegalStateException
<!-- END KEY -->
<!-- BEGIN DATA -->

处理给定的字节。   
 
@param  input  要处理的输入字节。

@exception IllegalStateException  如果尚未初始化此 <code>Mac</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.Mac.update(byte[] input) throws java.lang.IllegalStateException
<!-- END KEY -->
<!-- BEGIN DATA -->

处理给定的 byte 数组。
 
@param  input  要处理的 byte 数组。

@exception IllegalStateException  如果尚未初始化此 <code>Mac</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.Mac.update(byte[] input, int offset, int len) throws java.lang.IllegalStateException
<!-- END KEY -->
<!-- BEGIN DATA -->

从 <code>offset</code>（包含）开始，处理 <code>input</code> 中的前 <code>len</code> 个字节。
 
@param  input  输入缓冲区。
@param  offset  <code>input</code> 中输入起始处的偏移量。
@param  len  要处理的字节数。

@exception IllegalStateException  如果尚未初始化此 <code>Mac</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.Mac.update(ByteBuffer input)
<!-- END KEY -->
<!-- BEGIN DATA -->

从 <code>input.position()</code> 开始，处理 ByteBuffer <code>input</code> 中的 <code>input.remaining()</code> 个字节。返回时，缓冲区的位置将等于其限制；其限制不变。

@param  input  ByteBuffer

@exception IllegalStateException  如果尚未初始化此 <code>Mac</code>。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte[] javax.crypto.Mac.doFinal() throws java.lang.IllegalStateException
<!-- END KEY -->
<!-- BEGIN DATA -->

 完成 MAC 操作。

 <p>对此方法的调用将此 <code>Mac</code> 对象重置为上一次调用 <code>init(Key)</code> 或 <code>init(Key, AlgorithmParameterSpec)</code> 初始化的状态。也就是说，该对象被重置，并可通过重新调用 <code>update</code> 和 <code>doFinal</code>（如果需要）从同一个密钥生成另一个 MAC。（若要用不同的密钥重用此 <code>Mac</code> 对象，则必须通过调用 <code>init(Key)</code> 或 <code>init(Key, AlgorithmParameterSpec)</code> 对其重新初始化）。

@return   MAC 的结果。

@exception IllegalStateException  如果尚未初始化此 <code>Mac</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.Mac.doFinal(byte[] output, int outOffset) throws javax.crypto.ShortBufferException, java.lang.IllegalStateException
<!-- END KEY -->
<!-- BEGIN DATA -->

完成 MAC 操作。

 <p>对此方法的调用将此 <code>Mac</code> 对象重置为上一次调用 <code>init(Key)</code> 或 <code>init(Key, AlgorithmParameterSpec)</code> 初始化的状态。也就是说，该对象被重置，并可通过重新调用 <code>update</code> 和 <code>doFinal</code>（如果需要）从同一个密钥生成另一个 MAC。（若要用不同的密钥重用此 <code>Mac</code> 对象，则必须通过调用 <code>init(Key)</code> 或 <code>init(Key, AlgorithmParameterSpec)</code> 对其重新初始化）。

 <p>MAC 结果将存储在 <code>output</code> 中，从 <code>outputOffset</code>（包含）开始。

@param  output  存储 MAC 结果的缓冲区
@param  outOffset  <code>output</code> 中存储 MAC 处的偏移量

@exception ShortBufferException  如果给定输出缓冲区太小不能存储该结果
@exception IllegalStateException  如果尚未初始化此 <code>Mac</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte[] javax.crypto.Mac.doFinal(byte[] input) throws java.lang.IllegalStateException
<!-- END KEY -->
<!-- BEGIN DATA -->

处理给定的 byte 数组并完成 MAC 操作。

 <p>对此方法的调用将此 <code>Mac</code> 对象重置为上一次调用 <code>init(Key)</code> 或 <code>init(Key, AlgorithmParameterSpec)</code> 初始化的状态。也就是说，该对象被重置，并可通过重新调用 <code>update</code> 和 <code>doFinal</code>（如果需要）从同一个密钥生成另一个 MAC。（若要用不同的密钥重用此 <code>Mac</code> 对象，则必须通过调用 <code>init(Key)</code> 或 <code>init(Key, AlgorithmParameterSpec)</code> 对其重新初始化）。

@param  input  字节中的数据
@return   MAC 的结果。

@exception IllegalStateException  如果尚未初始化此 <code>Mac</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.Mac.reset()
<!-- END KEY -->
<!-- BEGIN DATA -->

重置此 <code>Mac</code> 对象。

 <p>对此方法的调用将此 <code>Mac</code> 对象重置为上一次调用 <code>init(Key)</code> 或 <code>init(Key, AlgorithmParameterSpec)</code> 初始化的状态。也就是说，该对象被重置，并可通过重新调用 <code>update</code> 和 <code>doFinal</code>（如果需要）从同一个密钥生成另一个 MAC。（若要用不同的密钥重用此 <code>Mac</code> 对象，则必须通过调用 <code>init(Key)</code> 或 <code>init(Key, AlgorithmParameterSpec)</code> 对其重新初始化）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.Object javax.crypto.Mac.clone() throws java.lang.CloneNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->

如果提供者实现可以复制，则返回一个副本。   
 
@return  如果提供者实现可以复制，则返回一个副本。

@exception CloneNotSupportedException  如果对不支持 <code>Cloneable</code> 的代理调用此方法。

<!-- END DATA -->
