<!-- BEGIN KEY -->
public class javax.crypto.EncryptedPrivateKeyInfo extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

此类实现 <code>EncryptedPrivateKeyInfo</code> 类型，如在 PKCS #8 中定义的那样。
<p>它的 ASN.1 定义如下：

 <pre>
 EncryptedPrivateKeyInfo ::=  SEQUENCE {
     encryptionAlgorithm   AlgorithmIdentifier,
     encryptedData   OCTET STRING }
 
 AlgorithmIdentifier  ::=  SEQUENCE  {
     algorithm              OBJECT IDENTIFIER,
     parameters             ANY DEFINED BY algorithm OPTIONAL  }
 </pre>


@author Valerie Peng

@version 1.14, 04/01/14

@see java.security.spec.PKCS8EncodedKeySpec

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.crypto.EncryptedPrivateKeyInfo(byte[] encoded) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

根据其 ASN.1 编码构造（即解析）<code>EncryptedPrivateKeyInfo</code>。
@param encoded 此对象的 ASN.1 编码。该数组的内容被复制，以免后续修改。
@exception NullPointerException 如果 <code>encoded</code> 为 null。
@exception IOException 如果在解析 ASN.1 编码过程中出现错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.crypto.EncryptedPrivateKeyInfo(String algName, byte[] encryptedData) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

根据加密算法名称和加密数据构造 <code>EncryptedPrivateKeyInfo</code>。

<p>注：此构造方法将用 null 充当算法参数的值。如果加密算法所带的参数不为 null，则应换一种构造方法使用，例如，EncryptedPrivateKeyInfo(AlgorithmParameters, byte[])。

@param algName 加密算法名称。有关标准 Cipher 算法名称的信息，请参见  <a href=
   "{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 中的附录 A。
@param encryptedData 加密数据。<code>encrypedData</code> 的内容被复制，以免构造此对象时出现后续修改。
@exception NullPointerException 如果 <code>algName</code> 或 <code>encryptedData</code> 为 null。
@exception IllegalArgumentException 如果 <code>encryptedData</code> 为空，即长度为 0。
@exception NoSuchAlgorithmException 如果指定的 algName 不受支持。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.crypto.EncryptedPrivateKeyInfo(AlgorithmParameters algParams, byte[] encryptedData) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

根据加密算法参数和加密数据构造 <code>EncryptedPrivateKeyInfo</code>。

@param algParams 供加密算法使用的算法参数。<code>algParams.getEncoded()</code> 应返回 <code>EncryptedPrivateKeyInfo</code> 类型的 <code>AlgorithmIdentifer</code> 部分的 <code>parameters</code> 字段的 ASN.1 编码字节。
@param encryptedData 加密数据。<code>encrypedData</code> 的内容被复制，以免构造此对象时的后续修改。
@exception NullPointerException 如果 <code>algParams</code> 或 <code>encryptedData</code> 为 null。
@exception IllegalArgumentException 如果 <code>encryptedData</code> 为空，即长度为 0。
@exception NoSuchAlgorithmException 如果的指定的 <code>algParams</code> 参数的指定 algName 不受支持。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.crypto.EncryptedPrivateKeyInfo.getAlgName()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回加密算法。
<p>注：如果有这样的映射可用，则返回标准名称而不是指定的名称。有关标准 Cipher 算法名称的信息，请参见 <a href=
   "{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 中的附录 A。
 
@return 加密算法名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.AlgorithmParameters javax.crypto.EncryptedPrivateKeyInfo.getAlgParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回加密算法使用的算法参数。
@return 算法参数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] javax.crypto.EncryptedPrivateKeyInfo.getEncryptedData()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回加密的数据。
@return 加密的数据。每次调用此方法都返回一个新的数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.spec.PKCS8EncodedKeySpec javax.crypto.EncryptedPrivateKeyInfo.getKeySpec(Cipher cipher) throws java.security.spec.InvalidKeySpecException
<!-- END KEY -->
<!-- BEGIN DATA -->

将密封的 PKCS8EncodedKeySpec 对象从加密的数据中抽取出来并将其返回。<br>注：为成功获取该封闭的 PKCS8EncodedKeySpec 对象，需要使用与生成加密的数据时所用的密钥和参数相同的密钥和参数将 <code>cipher</code> 初始化为 Cipher.DECRYPT_MODE 或 Cipher.UNWRAP_MODE。

@param cipher 将用于对加密的数据进行解密的初始化密码对象。
@return PKCS8EncodedKeySpec 对象。
@exception NullPointerException 如果 <code>cipher</code> 为 null。
@exception InvalidKeySpecException 如果给定的密码不适合加密的数据，或者加密的数据已损坏，无法解密。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.spec.PKCS8EncodedKeySpec javax.crypto.EncryptedPrivateKeyInfo.getKeySpec(Key decryptKey) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->

将密封的 PKCS8EncodedKeySpec 对象从加密的数据中抽取出来并将其返回。
@param decryptKey 在对加密的数据进行解密时所使用的密钥。
@return PKCS8EncodedKeySpec 对象。
@exception NullPointerException 如果 <code>decryptKey</code> 为 null。
@exception NoSuchAlgorithmException 如果无法找到合适的密码对加密的数据进行解密。
@exception InvalidKeyException 如果无法用 <code>decryptKey</code> 对加密的数据进行解密，或者解密结果不是有效的 PKCS8KeySpec。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.spec.PKCS8EncodedKeySpec javax.crypto.EncryptedPrivateKeyInfo.getKeySpec(Key decryptKey, String providerName) throws java.security.NoSuchProviderException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->

将密封的 PKCS8EncodedKeySpec 对象从加密的数据中抽取出来并将其返回。
@param decryptKey 在对加密的数据进行解密时所使用的密钥。
@param providerName 其 Cipher 实现将被使用的提供者的名称。
@return PKCS8EncodedKeySpec 对象。
@exception NullPointerException 如果 <code>decryptKey</code> 或 <code>providerName</code> 为 null。
@exception NoSuchProviderException 如果没有注册任何名称为 <code>providerName</code> 的提供者。
@exception NoSuchAlgorithmException 如果无法找到合适的密码对加密的数据进行解密。
@exception InvalidKeyException 如果无法用 <code>decryptKey</code> 对加密的数据进行解密，或者解密结果不是有效的 PKCS8KeySpec。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.spec.PKCS8EncodedKeySpec javax.crypto.EncryptedPrivateKeyInfo.getKeySpec(Key decryptKey, Provider provider) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->

将密封的 PKCS8EncodedKeySpec 对象从加密的数据中抽取出来并将其返回。
@param decryptKey 在对加密的数据进行解密时所使用的密钥。
@param provider 其 Cipher 实现将被使用的提供者的名称。
@return PKCS8EncodedKeySpec 对象。
@exception NullPointerException 如果 <code>decryptKey</code> 或 <code>provider</code> 为 null。
@exception NoSuchAlgorithmException 如果在 <code>provider</code> 中无法找到合适的密码对加密的数据进行解密。
@exception InvalidKeyException 如果无法用 <code>decryptKey</code> 对加密的数据进行解密，或者解密结果不是有效的 PKCS8KeySpec。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] javax.crypto.EncryptedPrivateKeyInfo.getEncoded() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此对象的 ASN.1 编码。
@return ASN.1 编码。每次调用此方法都返回一个新的数组。
@exception IOException 如果在构造 ASN.1 编码过程中发生错误。

<!-- END DATA -->
