<!-- BEGIN KEY -->
public class javax.crypto.ExemptionMechanism extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

此类提供了豁免 (exemption) 机制的功能，例如，<i>密钥恢复</i>、<i>密钥唤醒</i> 和<i>密钥托管</i>。

<p>使用豁免机制的应用程序或 applet 比不使用豁免机制的应用程序或 applet 具有更强的加密性能。

@version 1.11, 11/30/03
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.crypto.ExemptionMechanism(ExemptionMechanismSpi exmechSpi, Provider provider, String mechanism)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建 ExemptionMechanism 对象。

@param exmechSpi 代理
@param provider 提供者
@param mechanism 豁免机制

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.crypto.ExemptionMechanism.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>ExemptionMechanism</code> 对象的豁免机制名称。

<p>这与创建此 <code>ExemptionMechanism</code> 对象的 <code>getInstance</code> 调用之一指定的名称相同。

@return 此 <code>ExemptionMechanism</code> 对象的豁免机制名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.crypto.ExemptionMechanism javax.crypto.ExemptionMechanism.getInstance(String algorithm) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回实现指定豁免机制算法的 <code>ExemptionMechanism</code> 对象。

<p> 此方法从首选 Provider 开始遍历已注册安全提供者列表。返回一个封装 ExemptionMechanismSpi 实现的新 ExemptionMechanism 对象，该实现取自支持指定算法的第一个 Provider。

<p> 注意，可以通过 {@link Security#getProviders() Security.getProviders()} 方法获取已注册提供者列表。

@param algorithm 所请求豁免机制的标准名称。有关标准豁免机制名称的信息，请参阅 <a href="{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 中的附录 A。

@return 新的 <code>ExemptionMechanism</code> 对象。

@exception NullPointerException 如果 <code>algorithm</code> 为 null。

@exception NoSuchAlgorithmException 如果没有 Provider 支持指定算法的 ExemptionMechanismSpi 实现。

@see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.crypto.ExemptionMechanism javax.crypto.ExemptionMechanism.getInstance(String algorithm, String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->

 返回实现指定豁免机制算法的 <code>ExemptionMechanism</code> 对象。

 <p> 返回一个封装 ExemptionMechanismSpi 实现的新 ExemptionMechanism 对象，该实现取自指定的提供者。指定提供者必须在安全提供者列表中注册。

 <p> 注意，可以通过 {@link Security#getProviders() Security.getProviders()} 方法获取已注册提供者列表。

 @param algorithm 所请求豁免机制的标准名称。有关标准豁免机制名称的信息，请参阅 <a href="{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 中的附录 A。

@param provider 提供者的名称。

@return 新的 <code>ExemptionMechanism</code> 对象。

@exception NullPointerException 如果 <code>algorithm</code> 为 null。

@exception NoSuchAlgorithmException 如果不能从指定提供者获得指定算法的 ExemptionMechanismSpi 实现。
@exception NoSuchProviderException 如果指定提供者未在安全提供者列表中注册。

@exception IllegalArgumentException 如果 <code>provider</code> 为 null 或空。

@see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.crypto.ExemptionMechanism javax.crypto.ExemptionMechanism.getInstance(String algorithm, Provider provider) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回实现指定豁免机制算法的 <code>ExemptionMechanism</code> 对象。

<p> 返回一个封装 ExemptionMechanismSpi 实现的新 ExemptionMechanism 对象，该实现取自指定的 Provider 对象。 注意，指定的 Provider 对象无需在提供者列表中注册。

@param algorithm 所请求豁免机制的标准名称。有关标准豁免机制名称的信息，请参阅 <a href=
   "{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 中的附录 A。
@param provider 提供者。

@return 新的 <code>ExemptionMechanism</code> 对象。

@exception NullPointerException 如果 <code>algorithm</code> 为 null。
@exception NoSuchAlgorithmException 如果不能从指定 Provider 对象获得指定算法的 ExemptionMechanismSpi 实现。
@exception IllegalArgumentException 如果 <code>provider</code> 为 null。
@see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider javax.crypto.ExemptionMechanism.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>ExemptionMechanism</code> 对象的提供者。

@return 此 <code>ExemptionMechanism</code> 对象的提供者。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean javax.crypto.ExemptionMechanism.isCryptoAllowed(Key key) throws javax.crypto.ExemptionMechanismException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此豁免机制是否已成功生成结果 blob。

<p>该方法还确保了传入的密钥与此豁免机制在初始化和生成阶段所使用的密钥相同。

@param key 加密将使用的密钥。

@return 此豁免机制是否已成功生成了相同密钥的结果 blob；如果 <code>key</code> 为 null，则返回 false。

@exception ExemptionMechanismException 如果在确定此豁免机制对象是否成功生成了结果 blob 的过程中遇到问题。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.crypto.ExemptionMechanism.getOutputSize(int inputLen) throws java.lang.IllegalStateException
<!-- END KEY -->
<!-- BEGIN DATA -->

根据给定的输入长度 <code>inputLen</code>（以字节为单位），返回保存下一个 {@link #genExemptionBlob(byte[]) genExemptionBlob} 操作结果所需的输出缓冲区长度（以字节为单位）。

<p>下一个 {@link #genExemptionBlob(byte[]) genExemptionBlob} 调用的实际输出长度可能小于此方法返回的长度。

@param inputLen 输入长度（以字节为单位）

@return 所需的输出缓冲区大小（以字节为单位）

@exception IllegalStateException 如果此豁免机制处于错误状态（例如，尚未初始化）

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.ExemptionMechanism.init(Key key) throws java.security.InvalidKeyException, javax.crypto.ExemptionMechanismException
<!-- END KEY -->
<!-- BEGIN DATA -->

用密钥初始化此豁免机制。

<p>如果此豁免机制需要算法参数，而参数无法从给定的 <code>key</code> 派生，则底层豁免机制实现应自己生成所需的参数（使用特定于提供者的默认值）；如果算法参数必须由调用者指定，则会引发 <code>InvalidKeyException</code>。

@param key 用于此豁免机制的密钥

@exception InvalidKeyException 如果给定的密钥不适合此豁免机制。
@exception ExemptionMechanismException 如果初始化过程中遇到问题。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.ExemptionMechanism.init(Key key, AlgorithmParameterSpec params) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException, javax.crypto.ExemptionMechanismException
<!-- END KEY -->
<!-- BEGIN DATA -->

用一个密钥和一组算法参数初始化此豁免机制。

<p>如果此豁免机制需要算法参数，而 <code>params</code> 为 null，则底层豁免机制实现应自己生成所需的参数（使用特定于提供者的默认值）；如果算法参数必须由调用者指定，则会引发 <code>InvalidAlgorithmParameterException</code>。

@param key 用于此豁免机制的密钥
@param params 算法参数

@exception InvalidKeyException 如果给定的密钥不适合此豁免机制。
@exception InvalidAlgorithmParameterException 如果给定的算法参数不适合此豁免机制。
@exception ExemptionMechanismException 如果初始化过程中遇到问题。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.ExemptionMechanism.init(Key key, AlgorithmParameters params) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException, javax.crypto.ExemptionMechanismException
<!-- END KEY -->
<!-- BEGIN DATA -->

用一个密钥和一组算法参数初始化此豁免机制。

<p>如果此豁免机制需要算法参数，而 <code>params</code> 为 null，则底层豁免机制实现应自己生成所需的参数（使用特定于提供者的默认值）；如果算法参数必须由调用者指定，则会引发 <code>InvalidAlgorithmParameterException</code>。

@param key 用于此豁免机制的密钥
@param params 算法参数

@exception InvalidKeyException 如果给定的密钥不适合此豁免机制。
@exception InvalidAlgorithmParameterException 如果给定的算法参数不适合此豁免机制。
@exception ExemptionMechanismException 如果初始化过程中遇到问题。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte[] javax.crypto.ExemptionMechanism.genExemptionBlob() throws java.lang.IllegalStateException, javax.crypto.ExemptionMechanismException
<!-- END KEY -->
<!-- BEGIN DATA -->

生成豁免机制密钥 blob。

@return 包含结果密钥 blob 的新缓冲区。

@exception IllegalStateException 如果此豁免机制处于错误状态（例如，尚未初始化）。
@exception ExemptionMechanismException 如果生成过程中遇到问题。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.crypto.ExemptionMechanism.genExemptionBlob(byte[] output) throws java.lang.IllegalStateException, javax.crypto.ShortBufferException, javax.crypto.ExemptionMechanismException
<!-- END KEY -->
<!-- BEGIN DATA -->

生成豁免机制密钥 blob，并将结果存储在 <code>output</code> 缓冲区中。

<p>如果 <code>output</code> 缓冲区太小无法保存该结果，则抛出 <code>ShortBufferException</code>。这种情况下，使用一个稍大的缓冲区再次调用。使用 {@link #getOutputSize(int) getOutputSize} 确定输出缓冲区应为多大。

@param output 用于保存结果的缓冲区

@return <code>output</code> 中存储的字节数

@exception IllegalStateException 如果此豁免机制处于错误状态（例如，尚未初始化）。
@exception ShortBufferException 如果给定的输出缓冲区太小无法保存该结果。
@exception ExemptionMechanismException 如果生成过程中遇到问题。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.crypto.ExemptionMechanism.genExemptionBlob(byte[] output, int outputOffset) throws java.lang.IllegalStateException, javax.crypto.ShortBufferException, javax.crypto.ExemptionMechanismException
<!-- END KEY -->
<!-- BEGIN DATA -->

生成豁免机制密钥 blob，并将结果存储在从 <code>outputOffset</code>（包括）开始的 <code>output</code> 缓冲区中。

<p>如果 <code>output</code> 缓冲区太小无法保存该结果，则抛出 <code>ShortBufferException</code>。这种情况下，使用一个稍大的缓冲区再次调用。使用 {@link #getOutputSize(int) getOutputSize} 确定输出缓冲区应为多大。

@param output 用于保存结果的缓冲区
@param outputOffset <code>output</code> 中存储结果处的偏移量

@return <code>output</code> 中存储的字节数

@exception IllegalStateException 如果此豁免机制处于错误状态（例如，尚未初始化）。
@exception ShortBufferException 如果给定的输出缓冲区太小无法保存该结果。
@exception ExemptionMechanismException 如果生成过程中遇到问题。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.crypto.ExemptionMechanism.finalize()
<!-- END KEY -->
<!-- BEGIN DATA -->

确保不存在对此 ExemptionMechanism 对象存储的密钥的引用时，该密钥将被除去。

<!-- END DATA -->
