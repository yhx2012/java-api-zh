<!-- BEGIN KEY -->
public abstract class javax.crypto.ExemptionMechanismSpi extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

此类为 <code>ExemptionMechanism</code> 类定义了<i>服务提供者接口</i> (<b>SPI</b>)。此类中的所有抽象方法都必须由希望提供特定豁免机制实现的各个加密服务提供者来实现。

@author Sharon Liu

@version 1.6, 07/23/01

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract int javax.crypto.ExemptionMechanismSpi.engineGetOutputSize(int inputLen)
<!-- END KEY -->
<!-- BEGIN DATA -->

给定了输入长度 <code>inputLen</code> （以字节为单位）的情况下，返回用于保存下一个 {@link #engineGenExemptionBlob(byte[], int) engineGenExemptionBlob} 操作结果所需的输出缓冲区长度的字节长度。

<p>下一个 {@link #engineGenExemptionBlob(byte[], int) engineGenExemptionBlob} 调用的实际输出长度可能小于此方法返回的长度。

@param inputLen 输入长度（以字节为单位）

@return 所需的输出缓冲区大小（以字节为单位）

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void javax.crypto.ExemptionMechanismSpi.engineInit(Key key) throws java.security.InvalidKeyException, javax.crypto.ExemptionMechanismException
<!-- END KEY -->
<!-- BEGIN DATA -->

用密钥初始化此豁免机制。

<p>如果此豁免机制需要的任何算法参数无法从给定的 <code>key</code> 派生，底层豁免机制实现将自己生成所需的参数（使用特定于提供者的默认值）；如果算法参数必须由调用者指定，则会引发 <code>InvalidKeyException</code> 异常。

@param key 用于此豁免机制的密钥
@exception InvalidKeyException 如果给定的密钥不适合此豁免机制。
@exception ExemptionMechanismException 如果初始化过程中出现问题。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void javax.crypto.ExemptionMechanismSpi.engineInit(Key key, AlgorithmParameterSpec params) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException, javax.crypto.ExemptionMechanismException
<!-- END KEY -->
<!-- BEGIN DATA -->

用一个密钥和一组算法参数初始化此豁免机制。

<p>如果此豁免机制需要使用任何算法参数，而 <code>params</code> 为 null，底层豁免机制实现将自己生成所需的参数（使用特定于提供者的默认值）；如果算法参数必须由调用者指定，则会引发 <code>InvalidAlgorithmParameterException</code> 异常。

@param key 用于此豁免机制的密钥
@param params 算法参数

@exception InvalidKeyException 如果给定的密钥不适合此豁免机制。
@exception InvalidAlgorithmParameterException 如果给定的算法参数不适合此豁免机制。
@exception ExemptionMechanismException 如果初始化过程中出现问题。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void javax.crypto.ExemptionMechanismSpi.engineInit(Key key, AlgorithmParameters params) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException, javax.crypto.ExemptionMechanismException
<!-- END KEY -->
<!-- BEGIN DATA -->

用一个密钥和一组算法参数初始化此豁免机制。

<p>如果此豁免机制需要使用任何算法参数，而 <code>params</code> 为 null，底层豁免机制实现将自己生成所需的参数（使用特定于提供者的默认值）；如果算法参数必须由调用者指定，则会引发 <code>InvalidAlgorithmParameterException</code> 异常。

@param key 用于此豁免机制的密钥
@param params 算法参数

@exception InvalidKeyException 如果给定的密钥不适合此豁免机制。
@exception InvalidAlgorithmParameterException 如果给定的算法参数不适合此豁免机制。
@exception ExemptionMechanismException 如果初始化过程中出现问题。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract byte[] javax.crypto.ExemptionMechanismSpi.engineGenExemptionBlob() throws javax.crypto.ExemptionMechanismException
<!-- END KEY -->
<!-- BEGIN DATA -->

生成豁免机制密钥 blob。

@return 具有结果密钥 blob 的新缓冲区。

@exception ExemptionMechanismException 如果生成过程中出现问题。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract int javax.crypto.ExemptionMechanismSpi.engineGenExemptionBlob(byte[] output, int outputOffset) throws javax.crypto.ShortBufferException, javax.crypto.ExemptionMechanismException
<!-- END KEY -->
<!-- BEGIN DATA -->

生成豁免机制密钥 blob 并将结果存储在从 <code>outputOffset</code>（包括）开始的 <code>output</code> 缓冲区中。

<p>如果 <code>output</code> 缓冲区太小无法保存该结果，则抛出 <code>ShortBufferException</code> 异常。这种情况下，使用一个稍大的缓冲区再次调用。使用 {@link #engineGetOutputSize(int) engineGetOutputSize} 确定输出缓冲区应为多大。

@param output 用于保存结果的缓冲区
@param outputOffset <code>output</code> 中的偏移量，即结果保存的位置

@return <code>output</code> 中存储的字节数

@exception ShortBufferException 如果给定的输出缓冲区太小无法保存该结果。
@exception ExemptionMechanismException 如果生成过程中出现问题。

<!-- END DATA -->
