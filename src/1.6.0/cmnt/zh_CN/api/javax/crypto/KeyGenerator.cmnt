<!-- BEGIN KEY -->
public class javax.crypto.KeyGenerator extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

此类提供（对称）密钥生成器的功能。

<p>密钥生成器是使用此类的某个 <code>getInstance</code> 类方法构造的。

<p>KeyGenerator 对象可重复使用，也就是说，在生成密钥后，可以重复使用同一个 KeyGenerator 对象来生成更多的密钥。

<p>生成密钥的方式有两种：与算法无关的方式和特定于算法的方式。两者之间的唯一不同是对象的初始化：
 
 <ul>
<li><b>与算法无关的初始化</b>
<p>所有密钥生成器都具有<i>密钥大小</i> 和<i>随机源</i> 的概念。此 KeyGenerator 类中有一个 {@link #init(int, java.security.SecureRandom) init} 方法，它带有这两个通用共享类型的参数。还有一个只带有 <code>keysize</code> 参数的 init 方法，它使用具有最高优先级的已安装提供者的 SecureRandom 实现作为随机源（如果已安装的提供者都不提供 SecureRandom 实现，则使用系统提供的随机源）。此 KeyGenerator 类还提供一个只带随机源参数的 inti 方法。
 
<p>因为调用上述与算法无关的 <code>init</code> 方法时未指定其他参数，所以由提供者决定如何处理要与每个密钥关联的特定于算法的参数（如果有）。
 <p>

<li><b>特定于算法的初始化</b>
<p>在已经存在特定于算法的参数集的情况下，有两个带 <code>AlgorithmParameterSpec</code> 参数的 {@link #init(java.security.spec.AlgorithmParameterSpec) init} 方法。其中一个方法还有一个 <code>SecureRandom</code> 参数，而另一个方法将具有高优先级的已安装提供者的 SecureRandom 实现作为随机源（如果安装的提供者都不提供 SecureRandom 实现，则使用系统提供的随机源）。
 </ul>

<p>如果客户端没有显式地初始化 KeyGenerator（通过调用 <code>init</code> 方法），那么每个提供者都必须提供（并记录）默认初始化。

@author Jan Luehe

@version 1.48, 10/29/03

@see SecretKey
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.crypto.KeyGenerator(KeyGeneratorSpi keyGenSpi, Provider provider, String algorithm)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建一个 KeyGenerator 对象。

@param  keyGenSpi  委托
@param  provider  提供者
@param  algorithm  算法

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.crypto.KeyGenerator.getAlgorithm()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>KeyGenerator</code> 对象的算法名称。

<p>此名称与创建此 <code>KeyGenerator</code> 对象的 <code>getInstance</code> 调用之一中指定的名称相同。
 
@return  此 <code>KeyGenerator</code> 对象的算法名称。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(String algorithm) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

 返回生成指定算法的秘密密钥的 <code>KeyGenerator</code> 对象。

 <p> 此方法从首选 Provider 开始遍历已注册安全提供者列表。返回一个封装 KeyGeneratorSpi 实现的新 KeyGenerator 对象，该实现取自支持指定算法的第一个 Provider。

 <p> 注意，可以通过 {@link Security#getProviders() Security.getProviders()} 方法获取已注册提供者列表。

@param  algorithm  所请求密钥算法的标准名称。有关标准算法名称的信息，请参阅 <a href=
   "{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 中的附录 A。

@return  新的 <code>KeyGenerator</code> 对象。

@exception NullPointerException  如果指定算法为 null。
@exception NoSuchAlgorithmException  如果没有 Provider 支持指定算法的 KeyGeneratorSpi 实现。

@see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(String algorithm, String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->

 返回生成指定算法的秘密密钥的 <code>KeyGenerator</code> 对象。

 <p> 返回一个封装 KeyGeneratorSpi 实现的新 KeyGenerator 对象，该实现取自指定的提供者。指定提供者必须在安全提供者列表中注册。

 <p> 注意，可以通过 {@link Security#getProviders() Security.getProviders()} 方法获取已注册提供者列表。

@param  algorithm  所请求密钥算法的标准名称。有关标准算法名称的信息，请参阅 <a href=
   "{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 中的附录 A。
@param  provider  提供者的名称。

@return  新的 <code>KeyGenerator</code> 对象。

@exception NullPointerException  如果指定算法为 null。
@exception NoSuchAlgorithmException  如果不能从指定提供者获得指定算法的 KeyGeneratorSpi 实现。
@exception NoSuchProviderException  如果指定提供者未在安全提供者列表中注册。
@exception IllegalArgumentException  如果 <code>provider</code> 为 null 或空。
@see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(String algorithm, Provider provider) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

 返回生成指定算法的秘密密钥的 <code>KeyGenerator</code> 对象。

 <p> 返回一个封装 KeyGeneratorSpi 实现的新 KeyGenerator 对象，该实现取自指定的 Provider 对象。 注意，指定的 Provider 对象无需在提供者列表中注册。

@param  algorithm  所请求密钥算法的标准名称。有关标准算法名称的信息，请参阅 <a href=
   "{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 中的附录 A。
@param  provider  提供者。

@return  新的 <code>KeyGenerator</code> 对象。

@exception NullPointerException  如果指定算法为 null。
@exception NoSuchAlgorithmException  如果不能从指定 Provider 对象获得指定算法的 KeyGeneratorSpi 实现。
@exception IllegalArgumentException  如果 <code>provider</code> 为 null。
@see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider javax.crypto.KeyGenerator.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>KeyGenerator</code> 对象的提供者。
 
@return  此 <code>KeyGenerator</code> 对象的提供者

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.KeyGenerator.init(SecureRandom random)
<!-- END KEY -->
<!-- BEGIN DATA -->

初始化此密钥生成器。
 
@param  random  此生成器的随机源

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.KeyGenerator.init(AlgorithmParameterSpec params) throws java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->

用指定参数集初始化此密钥生成器。

<p> 如果此密钥生成器需要随机字节，则它将使用具有最高优先级的已安装提供者的 {@link SecureRandom <code>SecureRandom</code>} 实现作为随机源来获取这些字节。（如果已安装的提供者都不提供 SecureRandom 实现，则将使用系统提供的随机源。）

@param  params  密钥生成参数

@exception InvalidAlgorithmParameterException  如果给定算法不适合此密钥生成器

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.KeyGenerator.init(AlgorithmParameterSpec params, SecureRandom random) throws java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->

用指定参数集和用户提供的随机源初始化此密钥生成器。

@param  params  密钥生成参数
@param  random  此密钥生成器的随机源

@exception InvalidAlgorithmParameterException  如果 <code>params</code> 不适合此密钥生成器

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.KeyGenerator.init(int keysize)
<!-- END KEY -->
<!-- BEGIN DATA -->

初始化此密钥生成器，使其具有确定的密钥大小。

<p> 如果此密钥生成器需要随机字节，则它将使用具有最高优先级的已安装提供者的 {@link SecureRandom <code>SecureRandom</code>} 实现作为随机源来获取这些字节。（如果已安装的提供者都不提供 SecureRandom 实现，则将使用系统提供的随机源。）

@param  keysize  密钥大小。这是特定于算法的一种规格，是以位数为单位指定的。

@exception InvalidParameterException  如果密钥大小错误或不受支持。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.KeyGenerator.init(int keysize, SecureRandom random)
<!-- END KEY -->
<!-- BEGIN DATA -->

使用用户提供的随机源初始化此密钥生成器，使其具有确定的密钥大小。

@param  keysize  密钥大小。这是特定于算法的一种规格，是以位数为单位指定的。
@param  random  此密钥生成器的随机源

@exception InvalidParameterException  如果密钥大小错误或不受支持。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.crypto.SecretKey javax.crypto.KeyGenerator.generateKey()
<!-- END KEY -->
<!-- BEGIN DATA -->

生成一个密钥。

@return  新的密钥

<!-- END DATA -->
