<!-- BEGIN KEY -->
public class javax.crypto.KeyAgreement extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

此类提供密钥协定（或密钥交换）协议的功能。
 <p>
建立共享秘密所涉及的密钥由某个密钥生成器（<code>KeyPairGenerator</code> 或 <code>KeyGenerator</code>）或一个 <code>KeyFactory</code> 来创建，或者在密钥协定协议的中间阶段创建。

<p>对于密钥交换中的每个相关方，需要调用 <code>doPhase</code>。例如，如果此密钥交换是与其他一个参与者进行的，则需要调用一次 <code>doPhase</code>，调用时将 <code>lastPhase</code> 标志设置为 <code>true</code>。如果此密钥交换是与其他两个参与者进行的，则需要调用两次 <code>doPhase</code>，第一次将 <code>lastPhase</code> 标志设置为 <code>false</code>，第二次将它设置为 <code>true</code>。密钥交换可以涉及任意数量的参与者。

@author Jan Luehe

@version 1.44, 10/29/03

@see KeyGenerator
@see SecretKey
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.crypto.KeyAgreement(KeyAgreementSpi keyAgreeSpi, Provider provider, String algorithm)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建一个 KeyAgreement 对象。

@param  keyAgreeSpi  委托
@param  provider  提供者
@param  algorithm  算法

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.crypto.KeyAgreement.getAlgorithm()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>KeyAgreement</code> 对象的算法名称。

<p>此名称与在某个创建此 <code>KeyAgreement</code> 对象的 <code>getInstance</code> 调用中指定的名称相同。
 
@return  此 <code>KeyAgreement</code> 对象的算法名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.crypto.KeyAgreement javax.crypto.KeyAgreement.getInstance(String algorithm) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回实现指定密钥协定算法的 <code>KeyAgreement</code> 对象。

<p> 此方法从首选 Provider 开始遍历已注册安全提供者列表。返回一个封装 KeyAgreementSpi 实现的新 KeyAgreement 对象，该实现取自支持指定算法的第一个 Provider。

<p> 注意，可以通过 {@link Security#getProviders() Security.getProviders()} 方法获取已注册提供者列表。

@param  algorithm  所请求密钥协定算法的标准名称。有关标准算法名称的信息，请参阅 <a href=
   "{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 中的附录 A。

@return  新的 <code>KeyAgreement</code> 对象。

@exception NullPointerException  如果指定的算法为 null。
@exception NoSuchAlgorithmException  如果没有 Provider 支持指定算法的 KeyAgreementSpi 实现。
@see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.crypto.KeyAgreement javax.crypto.KeyAgreement.getInstance(String algorithm, String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->

 返回实现指定密钥协定算法的 <code>KeyAgreement</code> 对象。

 <p> 返回一个封装 KeyAgreementSpi 实现的新 KeyAgreement 对象，该实现取自指定的提供者。指定提供者必须在安全提供者列表中注册。

 <p> 注意，可以通过 {@link Security#getProviders() Security.getProviders()} 方法获取已注册提供者列表。

@param  algorithm  所请求密钥协定算法的标准名称。有关标准算法名称的信息，请参阅 <a href=
   "{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 中的附录 A。
@param provider 提供者的名称。

@return  新的 <code>KeyAgreement</code> 对象。

@exception NullPointerException  如果指定的算法为 null。
@exception NoSuchAlgorithmException  如果不能从指定提供者获得指定算法的 KeyAgreementSpi 实现。
@exception NoSuchProviderException  如果指定提供者未在安全提供者列表中注册。
@exception IllegalArgumentException  如果 <code>provider</code> 为 null 或空。
@see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.crypto.KeyAgreement javax.crypto.KeyAgreement.getInstance(String algorithm, Provider provider) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

 返回实现指定密钥协定算法的 <code>KeyAgreement</code> 对象。

 <p> 返回一个封装 KeyAgreementSpi 实现的新 KeyAgreement 对象，该实现取自指定的 Provider 对象。 注意，指定的 Provider 对象无需在提供者列表中注册。

@param  algorithm  所请求密钥协定算法的标准名称。有关标准算法名称的信息，请参阅 <a href=
   "{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture Reference Guide</a> 中的附录 A。
@param provider 提供者。

@return  新的 <code>KeyAgreement</code> 对象。

@exception NullPointerException  如果指定的算法为 null。
@exception NoSuchAlgorithmException  如果不能从指定的 Provider 对象获得指定算法的 KeyAgreementSpi 实现。
@exception IllegalArgumentException  如果 <code>provider</code> 为 null。
@see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider javax.crypto.KeyAgreement.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>KeyAgreement</code> 对象的提供者。
 
@return  此 <code>KeyAgreement</code> 对象的提供者

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.KeyAgreement.init(Key key) throws java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->

用给定密钥初始化此密钥协定，给定密钥需要包含此密钥协定所需的所有算法参数。

<p> 如果此密钥协定需要随机字节，则它将使用具有高优先级的已安装提供者的 {@link SecureRandom <code>SecureRandom</code>} 实现获取它们以作为随机源。（如果已安装的提供者没有一个提供 SecureRandom 实现，则将使用系统提供的随机源。）

@param  key  参与者的私有信息。例如，对于 Diffie-Hellman 密钥协定，此参数将是参与者自己的 Diffie-Hellman 私钥。

@exception InvalidKeyException  如果给定的密钥不适合此密钥协定，例如，属于错误类型或算法类型不一致。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.KeyAgreement.init(Key key, SecureRandom random) throws java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->

用给定密钥和随机源初始化此密钥协议。给定密钥需要包含此密钥协议所需的所有算法参数。

<p> 如果该密钥协定算法需要随机字节，则从给定的随机源 <code>random</code> 中获取它们。但是，如果底层算法实现不需要任何随机字节，则忽略 <code>random</code>。

@param  key  参与者的私有信息。例如，对于 Diffie-Hellman 密钥协定，此参数将是参与者自己的 Diffie-Hellman 私钥。
@param  random  随机源

@exception InvalidKeyException  如果给定的密钥不适合此密钥协定，例如，属于错误类型或算法类型不一致。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.KeyAgreement.init(Key key, AlgorithmParameterSpec params) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->

用给定密钥和算法参数集初始化此密钥协定。

<p> 如果此密钥协定需要随机字节，则它将使用具有高优先级的已安装提供者的 {@link SecureRandom <code>SecureRandom</code>} 实现获取它们以作为随机源。（如果已安装的提供者没有一个提供 SecureRandom 实现，则将使用系统提供的随机源。）

@param  key  参与者的私有信息。例如，对于 Diffie-Hellman 密钥协定，此参数将是参与者自己的 Diffie-Hellman 私钥。
@param  params  密钥协定参数

@exception InvalidKeyException  如果给定的密钥不适合此密钥协定，例如，属于错误类型或算法类型不一致。
@exception InvalidAlgorithmParameterException  如果给定算法不适合此密钥协定。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.KeyAgreement.init(Key key, AlgorithmParameterSpec params, SecureRandom random) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->

用给定密钥、算法参数集和随机源初始化此密钥协定。

@param  key  参与者的私有信息。例如，对于 Diffie-Hellman 密钥协定，此参数将是参与者自己的 Diffie-Hellman 私钥。
@param  params  密钥协定参数
@param  random  随机源

@exception InvalidKeyException  如果给定的密钥不适合此密钥协定，例如，属于错误类型或算法类型不一致。
@exception InvalidAlgorithmParameterException  如果给定算法不适合此密钥协定。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Key javax.crypto.KeyAgreement.doPhase(Key key, boolean lastPhase) throws java.security.InvalidKeyException, java.lang.IllegalStateException
<!-- END KEY -->
<!-- BEGIN DATA -->

用给定密钥执行此密钥协定的下一个阶段，给定密钥是从此密钥协定所涉及的其他某个参与者那里接收的。

@param  key  此阶段的密钥。例如，对于两个参与者之间的 Diffie-Hellman，此密钥将是另一个参与者的 Diffie-Hellman 公钥。
@param  lastPhase  表示这是否是此密钥协定最后阶段的标志。

@return  从此阶段得到的（中间）密钥；如果此阶段不产生密钥，则返回 null

@exception InvalidKeyException  如果给定密钥不适合此阶段。
@exception IllegalStateException  如果尚未初始化此密钥协定。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte[] javax.crypto.KeyAgreement.generateSecret() throws java.lang.IllegalStateException
<!-- END KEY -->
<!-- BEGIN DATA -->

生成共享秘密并在新的缓冲区中返回它。

<p>此方法重置此 <code>KeyAgreement</code> 对象，以便能够将它重用于进一步的密钥协定。如果没有使用某个 <code>init</code> 方法重新初始化此密钥协定，则将相同的私有信息和算法参数用于后续密钥协定。

@return  包含共享秘密的新缓冲区

@exception IllegalStateException  如果尚未完成此密钥协定

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.crypto.KeyAgreement.generateSecret(byte[] sharedSecret, int offset) throws java.lang.IllegalStateException, javax.crypto.ShortBufferException
<!-- END KEY -->
<!-- BEGIN DATA -->

生成共享秘密，并将其放入缓冲区 <code>sharedSecret</code>，从 <code>offset</code>（包括）开始。

<p>如果 <code>sharedSecret</code> 缓冲区太小而无法保存该结果，则抛出 <code>ShortBufferException</code>。在此情况下，应该用更大的输出缓冲区再次调用此方法。 

<p>此方法重置此 <code>KeyAgreement</code> 对象，以便能够将它重用于进一步的密钥协定。如果没有使用某个 <code>init</code> 方法重新初始化此密钥协定，则将相同的私有信息和算法参数用于后续密钥协定。

@param  sharedSecret  共享秘密的缓冲区
@param  offset  <code>sharedSecret</code> 中将存储共享秘密处的偏移量

@return  放入 <code>sharedSecret</code> 中的字节数

@exception IllegalStateException  如果尚未完成此密钥协定
@exception ShortBufferException  如果给定输出缓冲区太小而无法保存该秘密

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.crypto.SecretKey javax.crypto.KeyAgreement.generateSecret(String algorithm) throws java.lang.IllegalStateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->

创建共享秘密并将其作为指定算法的 <code>SecretKey</code> 对象返回。

<p>此方法重置此 <code>KeyAgreement</code> 对象，以便能够将它重用于进一步的密钥协定。如果没有使用某个 <code>init</code> 方法重新初始化此密钥协定，则将相同的私有信息和算法参数用于后续密钥协定。

@param  algorithm  所请求秘密密钥的算法

@return  共享的秘密密钥

@exception IllegalStateException  如果尚未完成此密钥协定
@exception NoSuchAlgorithmException  如果指定的秘密密钥算法不可用
@exception InvalidKeyException  如果无法使用共享秘密密钥材料生成指定算法的秘密密钥（例如，密钥材料太短）

<!-- END DATA -->
