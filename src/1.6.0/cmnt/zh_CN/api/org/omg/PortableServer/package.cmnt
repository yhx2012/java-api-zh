<!-- BEGIN KEY -->
org.omg.PortableServer
<!-- END KEY -->
<!-- BEGIN DATA -->

提供一些类和接口，用来生成跨多个供应商 ORB 的可移植应用程序的服务器端。

<P>在 Java 中，基于可移植对象适配器（Portable Object Adaptor，POA）的动态框架接口（Dynamic Skeleton Interface，DSI）servant 继承自标准 <TT>DynamicImplementation</TT> 类，而该类继承自 <TT>Servant</TT> 类。本机 <TT>Servant</TT> 类型由 POA 的 <TT>PortableServer</TT> 模块定义。在 Java 中，<TT>Servant</TT> 类型被映射到 Java <TT>org.omg.PortableServer.Servant</TT> 类。它充当所有 POA servant 实现的基类，提供许多可由应用程序员调用的方法，以及可由 POA 本身调用（也可由用户重写）以控制 servant 行为各方面的方法。 
  
<H2>包规范</H2>
 
<P>有关 Java[tm] Platform, Standard Edition 6 遵守的官方 OMG 规范的受支持部分的明确列表，请参阅 <A 
HREF="../CORBA/doc-files/compliance.html">Official Specifications for CORBA support in Java[tm] SE 6</A>。
<p>

<H2>与 POA 相关的接口</H2>

<P><TT>PortableServer</TT> 模块定义以下与 POA 相关的接口：
<P>
<UL>
	<LI><TT>POA</TT>
	<LI><TT>POAManager</TT>
	<LI><TT>ServantManager</TT>
	<LI><TT>ServantActivator</TT>
	<LI><TT>ServantLocator</TT>
	<LI><TT>AdapterActivator</TT>
	<LI><TT>ThreadPolicy</TT>
	<LI><TT>LifespanPolicy</TT>
	<LI><TT>IdUniquenessPolicy</TT>
	<LI><TT>IdAssignmentPolicy</TT>
	<LI><TT>ImplicitActivationPolicy</TT>
	<LI><TT>ServantRetentionPolicy</TT>
	<LI><TT>RequestProcessingPolicy</TT>
	<LI><TT>Current</TT>
</UL>

<P>此外，POA 还定义 <TT>Servant</TT> 本机类型。

<H3>操作类</H3>

<P>上文列出的每个接口都有一个关联的 <code>Operations</code> 接口。<code>Operations</code> 接口由 <code>idlj</code> 编译器生成，其中包含一些方法签名，用于在与其关联的接口中定义的方法。<code>Operations</code> 接口可以通过客户端和服务器访问，而其关联的接口只能通过客户端调用。

<H3>值类</H3>

以后缀 <code>PolicyValue</code> 结尾的类提供了 <code>create_POA</code> 调用所使用的值，该调用可设置 POA 的策略。参见以下用来示范的<a href="#sampleserver">样本代码</a>。<code>PolicyValue</code> 文件包括以下内容：
<P>
<UL>
<LI><code>IdAssignmentPolicyValue</code> 
<LI><code>IdUniquenessPolicyValue</code>
<LI><code>ImplicitActivationPolicyValue</code>
<LI><code>LifespanPolicyValue</code>
<LI><code>RequestProcessingPolicyValue</code>
<LI><code>ServantRetentionPolicyValue</code>
<LI><code>ThreadPolicyValue</code>
</UL>

<H3>Helper 类</H3>

<P>Helper 类是为 OMG IDL 接口中所有用户定义类型生成的，提供操作这些类型所需的静态方法。Helper 类中只有一种供应用程序员使用的方法。<code>narrow</code> 方法。只有 IDL 接口所映射的 Java 接口才有包含 <code>narrow</code> 方法的 helper 类，因此在 <code>PortableServer</code> 包中，只有以下类才具有 <code>narrow</code> 方法：
<P>
<UL>
<LI><code>ForwardRequestHelper</code>
<LI><code>ServantActivatorHelper</code>
<LI><code>ServantLocatorHelper</code>
</UL>

<H3>POA 类</H3>

<P>POA 类用于实现 <code>ServantActivator</code> 或 <code>ServantLocator</code>。

<H3>异常</H3>

<P><code>ForwardRequest</code> 异常指示 ORB 负责将当前请求和后续 <code>ForwardRequest</code> 请求传递给异常的 <code>forward_reference</code> 成员所表示的对象。

<H3>应用程序员所实现的接口</H3>

<P><code>PortableServer</code> 执行的大部分操作对用户是透明的。因此程序员将只能使用一小部分上述接口。剩余的接口将由 ORB 实现提供。应用程序员所需的接口如下：
<P>
<ul>
	<LI><code>AdapterActivator</code>
	<P>适配器激活器与 POA 关联。适配器激活器提供具有随需创建子 POA 功能的 POA。产生这一需求可能是接受指定子 POA（或其中一个子 POA）的请求所带来的副作用，调用 <code>find_POA</code> 时将 activate 参数值设置为 <code>TRUE</code> 也需要创建子 POA。创建所有所需 POA 的应用服务器在刚开始执行时不需要使用或提供适配器激活器；只有在请求处理期间需要创建 POA 时才有必要这样做。
	<P>
	<LI><code>ServantLocator</code>
	<P>当 POA 具有 <code>NON_RETAIN</code> 策略时，使用 <code>ServantLocator</code> 这种 servant 管理器。
	<P>
	<LI><code>ServantActivator</code>
	<P>当 POA 具有 <code>RETAIN</code> 策略时，使用 <code>ServantActivator</code> 这种 servant 管理器。
</ul>


<H2><TT>org.omg.PortableServer.ServantLocatorPackage</TT> 包</H2>

<P>此包提供一个 <TT>CookieHolder</TT> 类，将 <TT>Cookie</TT> 类型作为 <code>out</code> 参数传递。<code>CookieHolder</code> 类与其他基本类型的 holder 类完全一样。

<H2>相关文档</H2>

<P>有关 Java IDL 概述，请参见：
<P>
<LI><A HREF="../../../../technotes/guides/idl/index.html">Java IDL 主页</A>。

<H2>代码示例</H2>
<a name="sampleserver"></a>
<H3>实例服务器代码</H3>
<P>
<PRE>
import javax.naming.InitialContext;
import javax.naming.Context;
import javax.rmi.PortableRemoteObject ;
import com.sun.corba.se.impl.poa.POAORB;
import org.omg.PortableServer.*;
import java.util.*;
import org.omg.CORBA.*;
import javax.rmi.CORBA.Stub;
import javax.rmi.CORBA.Util;



public class HelloServer {
    public HelloServer(String[] args) {
        try {
            Properties p = System.getProperties();
         //   p.put(&quot;org.omg.CORBA.ORBClass&quot;, &quot;com.sun.corba.ee.internal.POA.POAORB&quot;);
            ORB orb = ORB.init( args, p );

            POA rootPOA = (POA)orb.resolve_initial_references(&quot;RootPOA&quot;);
<strong>
Policy[] tpolicy = new Policy[3];
            tpolicy[0] = rootPOA.create_lifespan_policy(
                LifespanPolicyValue.TRANSIENT );
            tpolicy[1] = rootPOA.create_request_processing_policy(
                RequestProcessingPolicyValue.USE_ACTIVE_OBJECT_MAP_ONLY );
            tpolicy[2] = rootPOA.create_servant_retention_policy(
                ServantRetentionPolicyValue.RETAIN);
            POA tpoa = rootPOA.create_POA(&quot;MyTransientPOA&quot;, null, tpolicy);
</strong>

            String  ObjectId = &quot;MyObjectId&quot;;
            byte[] oid = ObjectId.getBytes();

            org.omg.CORBA.Object obj = tpoa.create_reference_with_id(oid,
                new _HelloImpl_Tie()._all_interfaces(tpoa, oid)[0]);
            HelloInterface helloRef = (HelloInterface)PortableRemoteObject.narrow(
                obj, HelloInterface.class );

            Context initialNamingContext = new InitialContext();
            initialNamingContext.rebind(&quot;HelloService&quot;, helloRef);
            System.out.println(&quot;Hello Server: Ready...&quot;);
            orb.run();
         } catch (Exception e) {
            System.out.println(&quot;Trouble:&quot; + e);
            e.printStackTrace();
         } 
     }


     public static void main(String args[]) {
         new HelloServer( args );
     }
}


</PRE>



<P>


@since 1.4 <br>
@serial exclude

<!-- END DATA -->
