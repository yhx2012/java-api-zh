<!-- BEGIN KEY -->
public interface org.omg.PortableServer.POAOperations
<!-- END KEY -->
<!-- BEGIN DATA -->
POA 对象管理对象集合的实现。POA 支持由 Object Id 标识的对象的名称空间。POA 也支持 POA 的名称空间。POA 都是作为现有 POA 的子 POA 创建的，这形成了始于根 POA 的分层结构。POA 对象不得输出到其他进程，也不得使用 ORB::object_to_string 具体化。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.PortableServer.POA org.omg.PortableServer.POAOperations.create_POA(String adapter_name, POAManager a_POAManager, org.omg.CORBA.Policy[] policies) throws org.omg.PortableServer.POAPackage.AdapterAlreadyExists, org.omg.PortableServer.POAPackage.InvalidPolicy
<!-- END KEY -->
<!-- BEGIN DATA -->
此操作创建一个新的 POA 作为目标 POA 的子 POA。
@param adapter_name 标识新的 POA（就其他具有相同父 POA 的 POA 而言）。
@param a_POAManager 指示与新 POA 关联的 POA 管理器。
@param policies 指示与将与 POA 关联以控制其行为的策略对象。
@exception AdapterAlreadyExists 指示目标 POA 已经有一个具有指定名称的子 POA。
@exception InvalidPolicy 策略对象中存在对 ORB 无效的策略、存在冲突，或要求未执行的管理动作时引发。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.PortableServer.POA org.omg.PortableServer.POAOperations.find_POA(String adapter_name, boolean activate_it) throws org.omg.PortableServer.POAPackage.AdapterNonExistent
<!-- END KEY -->
<!-- BEGIN DATA -->
如果目标 POA 是具有指定名称的子 POA（相对于目标 POA）的父 POA，则返回该子 POA。
@param adapter_name 要查找的 POA 名称。
@param activate_it 如果不存在具有指定名称的 POA，且 activate_it 参数的值为 TRUE，则将调用目标 POA 的 AdapterActivator（如果有）。
@return POA，如果有或由 AdapterActivator 激活。
@return AdapterNonExistent 具有指定名称的 POA 不存在或不能使用 AdapaterActivator 激活时引发。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.PortableServer.POAOperations.destroy(boolean etherealize_objects, boolean wait_for_completion)
<!-- END KEY -->
<!-- BEGIN DATA -->
此操作销毁 POA 及所有子代 POA。在销毁包含子代的 POA 前销毁（以递归形式）所有子代 POA。以此方式销毁的 POA（即具有其名称的 POA）以后可通过相同的过程重新创建。
@param etherealize_objects 指示是否需要对 servant 管理器调用 etherealize 操作的标记。
@param wait_for_completion 一个标记，指示 POA 及其子 POA 是否需要等待激活的请求和 etherealization 操作完成。


<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.PortableServer.ThreadPolicy org.omg.PortableServer.POAOperations.create_thread_policy(ThreadPolicyValue value)
<!-- END KEY -->
<!-- BEGIN DATA -->
每个这种操作都返回一个对具有指定值的策略对象的引用。
@param value 策略类型
@return ThreadPolcy 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.PortableServer.LifespanPolicy org.omg.PortableServer.POAOperations.create_lifespan_policy(LifespanPolicyValue value)
<!-- END KEY -->
<!-- BEGIN DATA -->
每个这类操作都返回一个对具有指定值的策略对象的引用。
@param value 策略类型
@return LifespanPolicy 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.PortableServer.IdUniquenessPolicy org.omg.PortableServer.POAOperations.create_id_uniqueness_policy(IdUniquenessPolicyValue value)
<!-- END KEY -->
<!-- BEGIN DATA -->
每个这类操作都返回一个对具有指定值的策略对象的引用。
@param value 策略类型
@return IdUniquenessPolicy 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.PortableServer.IdAssignmentPolicy org.omg.PortableServer.POAOperations.create_id_assignment_policy(IdAssignmentPolicyValue value)
<!-- END KEY -->
<!-- BEGIN DATA -->
每个这类操作都返回一个对具有指定值的策略对象的引用。
@param value 策略类型
@return IdAssignmentPolicy 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.PortableServer.ImplicitActivationPolicy org.omg.PortableServer.POAOperations.create_implicit_activation_policy(ImplicitActivationPolicyValue value)
<!-- END KEY -->
<!-- BEGIN DATA -->
每个这类操作都返回一个对具有指定值的策略对象的引用。
@param value 策略类型
@return ImplicitActivationPolicy 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.PortableServer.ServantRetentionPolicy org.omg.PortableServer.POAOperations.create_servant_retention_policy(ServantRetentionPolicyValue value)
<!-- END KEY -->
<!-- BEGIN DATA -->
每个这类操作都返回一个对具有指定值的策略对象的引用。
@param value 策略类型
@return ServantRetentionPolicy 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.PortableServer.RequestProcessingPolicy org.omg.PortableServer.POAOperations.create_request_processing_policy(RequestProcessingPolicyValue value)
<!-- END KEY -->
<!-- BEGIN DATA -->
每个这类操作都返回一个对具有指定值的策略对象的引用。
@param value 策略类型
@return RequestProcessingPolicy 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.omg.PortableServer.POAOperations.the_name()
<!-- END KEY -->
<!-- BEGIN DATA -->
此属性标识相对于其父 POA 的 POA。此名称在创建 POA 时分配。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.PortableServer.POA org.omg.PortableServer.POAOperations.the_parent()
<!-- END KEY -->
<!-- BEGIN DATA -->
此属性标识 POA 的父 POA。根 POA 的父 POA 为 null。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.PortableServer.POA[] org.omg.PortableServer.POAOperations.the_children()
<!-- END KEY -->
<!-- BEGIN DATA -->
此属性标识 POA 的所有子 POA 的当前设置。子 POA 的设置只包括 POA 的直接子 POA，不包括其直接子 POA 的子代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.PortableServer.POAManager org.omg.PortableServer.POAOperations.the_POAManager()
<!-- END KEY -->
<!-- BEGIN DATA -->
此属性标识与 POA 关联的 POA 管理器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.PortableServer.AdapterActivator org.omg.PortableServer.POAOperations.the_activator()
<!-- END KEY -->
<!-- BEGIN DATA -->
此属性标识与 POA 关联的适配器激活器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.PortableServer.POAOperations.the_activator(AdapterActivator newThe_activator)
<!-- END KEY -->
<!-- BEGIN DATA -->
此属性标识与 POA 关联的适配器激活器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.PortableServer.ServantManager org.omg.PortableServer.POAOperations.get_servant_manager() throws org.omg.PortableServer.POAPackage.WrongPolicy
<!-- END KEY -->
<!-- BEGIN DATA -->

如果 POA 的 ServantRetentionPolicy 为 RETAIN，则 ServantManager 参数 (imgr) 应该支持 ServantActivator 接口。对于 NON_RETAIN 策略，ServantManager 应该支持 ServantLocator 接口。如果参数为 nil 或不支持所需接口，则引发 OBJ_ADAPTER 异常。
@return 与 POA 关联的 ServantManager；如果不存在，则返回 null。
@exception WrongPolicy 未指定 USE_SERVANT_MANAGER 策略时引发。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.PortableServer.POAOperations.set_servant_manager(ServantManager imgr) throws org.omg.PortableServer.POAPackage.WrongPolicy
<!-- END KEY -->
<!-- BEGIN DATA -->

此操作设置与 POA 关联的默认 servant 管理器。此操作只能在创建了 POA 后调用一次。试图在已经设置了 servant 管理器后再次设置将导致引发 BAD_INV_ORDER 异常。
@param imgr 默认情况下使用的 servant 管理器。
@exception WrongPolicy 未指定 USE_SERVANT_MANAGER 策略时引发。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.PortableServer.Servant org.omg.PortableServer.POAOperations.get_servant() throws org.omg.PortableServer.POAPackage.NoServant, org.omg.PortableServer.POAPackage.WrongPolicy
<!-- END KEY -->
<!-- BEGIN DATA -->
此操作返回与 POA 关联的默认 servant。
@return p_servant 与 POA 关联的默认 servant。
@exception NoServant 没有与 POA 关联的默认 servant 时引发。
@exception WrongPolicy 未指定 USE_DEFAULT_SERVANT 策略时引发。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.PortableServer.POAOperations.set_servant(Servant p_servant) throws org.omg.PortableServer.POAPackage.WrongPolicy
<!-- END KEY -->
<!-- BEGIN DATA -->

此操作在 POA 中将指定的 servant 注册为默认 servant。此 servant 将用于所有在 Active Object Map 中没有对应 servant 的请求。
@param p_servant 默认情况下使用的 servant。
@exception WrongPolicy 未指定 USE_DEFAULT_SERVANT 策略时引发。

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] org.omg.PortableServer.POAOperations.activate_object(Servant p_servant) throws org.omg.PortableServer.POAPackage.ServantAlreadyActive, org.omg.PortableServer.POAPackage.WrongPolicy
<!-- END KEY -->
<!-- BEGIN DATA -->

此操作生成一个 Object Id，并将该 Object Id 和指定的 servant 输入 Active Object Map。
@param p_servant 要与将被激活的对象关联的 servant。
@return 生成对象 id 的 POA。
@exception ServantAlreadyActive 在 POA 具有 UNIQUE_ID 策略且 servant 已经存在于 Active Object Map 时引发。
@exception WrongPolicy 未指定 SYSTEM_ID 和 RETAIN 策略时引发。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.PortableServer.POAOperations.activate_object_with_id(byte[] id, Servant p_servant) throws org.omg.PortableServer.POAPackage.ServantAlreadyActive, org.omg.PortableServer.POAPackage.ObjectAlreadyActive, org.omg.PortableServer.POAPackage.WrongPolicy
<!-- END KEY -->
<!-- BEGIN DATA -->
此操作将指定 Object Id 与指定 servant 之间的关联输入 Active Object Map。
@param id 将被激活的对象的对象 id。
@param p_servant 将关联对象的 servant。
@exception ServantAlreadyActive 在 POA 具有 UNIQUE_ID 策略且 servant 已经存在于 Active Object Map 时引发。
@exception ObjectAlreadyActive 对象已经在 POA 中激活时引发。
@exception WrongPolicy 未指定 RETAIN 策略时引发。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.PortableServer.POAOperations.deactivate_object(byte[] oid) throws org.omg.PortableServer.POAPackage.ObjectNotActive, org.omg.PortableServer.POAPackage.WrongPolicy
<!-- END KEY -->
<!-- BEGIN DATA -->

此操作促使在 oid 参数中指定的 ObjectId 被取消激活。只要已取消激活的 ObjectId 中还存在激活的请求，该 ObjectId 将继续处理请求。当为停用的 ObjectId 执行的所有请求全部完成后，将从 Active Object Map 中移除该 ObjectId。
@param oid 将被停用的对象的 Object Id。
@exception ObjectNotActive 如果具有指定 oid 的对象不在 Active Object Map 中。
@exception WrongPolicy 未指定 RETAIN 策略时引发。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Object org.omg.PortableServer.POAOperations.create_reference(String intf) throws org.omg.PortableServer.POAPackage.WrongPolicy
<!-- END KEY -->
<!-- BEGIN DATA -->
此操作创建一个对象引用，该引用封装 POA 生成的 Object Id 值和指定的接口存储库 id。

@param intf 用来创建对象引用的 rep id。
@return 使用 intf 创建的对象引用。
@exception WrongPolicy 如果未指定 SYSTEM_ID 策略。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Object org.omg.PortableServer.POAOperations.create_reference_with_id(byte[] oid, String intf)
<!-- END KEY -->
<!-- BEGIN DATA -->
此操作创建一个对象引用，该引用封装指定的 Object Id 和接口存储库 Id 值。该操作不会导致发生激活。所得引用可以传递给客户端，从而后续对这些引用的请求将导致在必要时可激活对象，或者使用默认的 servant，具体取决于适用的策略。
@param oid 用来创建 objref 的对象 id
@param intf 用来创建 objref 的 rep id
@return 使用 oid 和 intf 创建的对象引用
@exception BAD_PARAM 如果 POA 具有 SYSTEM_ID 策略且它检测到系统或 POA 没有生成 Object Id 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] org.omg.PortableServer.POAOperations.servant_to_id(Servant p_servant) throws org.omg.PortableServer.POAPackage.ServantNotActive, org.omg.PortableServer.POAPackage.WrongPolicy
<!-- END KEY -->
<!-- BEGIN DATA -->
此操作有四种可能的行为。1. 如果 POA 具有 UNIQUE_ID 策略且指定的 servant 已激活，则返回与该 servant 关联的 Object Id。2. 如果 POA 具有 IMPLICIT_ACTIVATION 策略，并且 POA 具有 MULTIPLE_ID 策略或者指定的 servant 未激活，则使用 POA 生成的 Object Id 和与该 servant 关联的 Interface Id 激活 servant，并返回该 Object Id。3. 如果 POA 具有 USE_DEFAULT_SERVANT 策略，指定的 servant 为默认 servant，并将在执行请求的上下文中对默认 servant 调用该操作，则将返回关联当前调用的 ObjectId。4. 其他情况下引发 ServantNotActive 异常。

@param p_servant 为其返回对象 disi 的 servant。
@return 与 servant 关联的对象 id。
@exception ServantNotActive 如果不满足上述规则和策略组合。
@exception WrongPolicy 如果 USE_DEFAULT_SERVANT 策略或 RETAIN 策略的组合以及 UNIQUE_ID 或 IMPLICIT_ACTIVATION 策略不存在。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Object org.omg.PortableServer.POAOperations.servant_to_reference(Servant p_servant) throws org.omg.PortableServer.POAPackage.ServantNotActive, org.omg.PortableServer.POAPackage.WrongPolicy
<!-- END KEY -->
<!-- BEGIN DATA -->
如果在此 POA 指派的操作的上下文外调用此操作，则需要 RETAIN 策略以及 UNIQUE_ID 或 IMPLICIT_ACTIVATION 策略之一。它具有四种可能的行为。1. 如果 POA 同时具有 RETAIN 和 UNIQUE_ID 策略，且指定的 servant 是激活的，则返回一个封装激活 servant 时所用信息的对象引用。2. 如果 POA 同时具有 RETAIN 和 IMPLICIT_ACTIVATION 策略，并且 POA 具有 MULTIPLE_ID 策略或者指定的 servant 未激活，则使用 POA 生成的 Object Id 和与该 servant 关联的 Interface Id 激活 servant，并返回响应的对象引用。3. 如果该操作在执行请求的上下文中对指定的 servant 调用，则返回关联当前调用的引用。4. 其他情况下引发 ServantNotActive 异常。

@param p_servant 需要为其获取对象引用的 servant。
@return 与 servant 关联的对象引用。
@exception WrongPolicy 如果操作不是在对指定 servant 执行请求的上下文中调用的，且所需的策略不存在。
@exception ServantNotActive 如果不满足上述指定策略和规则。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.PortableServer.Servant org.omg.PortableServer.POAOperations.reference_to_servant(Object reference) throws org.omg.PortableServer.POAPackage.ObjectNotActive, org.omg.PortableServer.POAPackage.WrongPolicy, org.omg.PortableServer.POAPackage.WrongAdapter
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 POA 具有 RETAIN 策略并且指定的对象存在于 Active Object Map 中，则此操作返回与 Active Object Map 中该对象关联的 servant。如果 POA 具有 USE_DEFAULT_SERVANT 策略并且已经向 POA 注册了默认 servant，则此操作返回该默认 servant。如果此 POA 没有创建对象引用，则引发 WrongAdapter 异常。（与 POA.IDL 不一致的 OMG 问题。）

@param reference 为其返回 servant 的对象引用。
@return 与引用关联的 servant。
@exception WrongPolicy 如果 RETAIN 策略或 USE_DEFAULT_SERVANT 策略都不存在。
@exception ObjectNotActive 如果 servant 不存在于 Active Object Map 中（对于 RETAIN）或者没有注册默认 servant（对于 USE_DEFAULT_POLICY）。
@exception WrongAdapter 如果此 POA 实例没有创建引用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] org.omg.PortableServer.POAOperations.reference_to_id(Object reference) throws org.omg.PortableServer.POAPackage.WrongAdapter, org.omg.PortableServer.POAPackage.WrongPolicy
<!-- END KEY -->
<!-- BEGIN DATA -->
此操作返回指定引用封装的 Object Id 值。仅在引用是由将执行此操作的 POA 所创建的情况下，此操作才有效。引用表示的对象不是激活状态时此操作也能成功。

@param reference 对象引用，需要根据该引用返回对象 id。
@return 引用中封装的对象 id。
@exception WrongAdapter 如果引用不是由引用中指定的 POA 创建的。
@exception WrongPolicy 先声明，以用于以后扩展。 


<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.PortableServer.Servant org.omg.PortableServer.POAOperations.id_to_servant(byte[] oid) throws org.omg.PortableServer.POAPackage.ObjectNotActive, org.omg.PortableServer.POAPackage.WrongPolicy
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 POA 具有 RETAIN 策略并且指定的 ObjectId 存在于 Active Object Map 中，则此操作返回与 Active Object Map 中该对象关联的 servant。如果 POA 具有 USE_DEFAULT_SERVANT 策略并且已经向 POA 注册了默认 servant，则此操作返回该默认 servant。 

@param oid 为其返回 servant 的对象 id。
@return 与 oid 关联的 servant。
@exception ObjectNotActive 如果 ObjectId 不存在于 Active Object Map 中（对于 RETAIN 策略），或者没有注册默认 servant（对于 USE_DEFAULT_SERVANT 策略）。

@exception WrongPolicy 如果 RETAIN 策略或 USE_DEFAULT_SERVANT 策略不存在，则引发该异常。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Object org.omg.PortableServer.POAOperations.id_to_reference(byte[] oid) throws org.omg.PortableServer.POAPackage.ObjectNotActive, org.omg.PortableServer.POAPackage.WrongPolicy
<!-- END KEY -->
<!-- BEGIN DATA -->
如果具有指定 Object Id 值的对象当前不是激活状态，则返回一个封装激活该对象时所用信息的引用。 

@param oid 为其返回引用的对象 id。
@return 对象引用。

@exception ObjectNotActive 如果 POA 中的 Object Id 值未激活。
@exception WrongPolicy 如果不存在 RETAIN 策略。

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] org.omg.PortableServer.POAOperations.id()
<!-- END KEY -->
<!-- BEGIN DATA -->
此操作在 POA 的创建过程中返回该 POA 的唯一 id。该值由可移植的 interceptor 使用。
 <p>
此 id 在 POA 处理过程中的生命周期内保证是唯一的。对于持久 POA，这意味着如果在同一路径使用与另一个 POA 相同的名称创建一个 POA，则这两个 POA 是等同的，也因此具有相同的 id。对于瞬态 POA，每个 POA 均唯一。

<!-- END DATA -->
