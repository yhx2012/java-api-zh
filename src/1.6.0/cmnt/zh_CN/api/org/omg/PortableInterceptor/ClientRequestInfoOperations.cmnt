<!-- BEGIN KEY -->
public interface org.omg.PortableInterceptor.ClientRequestInfoOperations extends org.omg.PortableInterceptor.RequestInfoOperations
<!-- END KEY -->
<!-- BEGIN DATA -->
客户端请求 interceptor 可访问的请求信息。
 <p>
<code>ClientRequestInfo</code> 上的某些属性和操作并不是对所有的截取点都有效。下表展示了每个属性或操作的有效性。如果无效，则试图访问它将导致抛出 <code>BAD_INV_ORDER</code>，并带有标准次要代码 14。
 <p>

 <table border=1 summary="Shows the validity of each attribute or operation">
  <thead>
    <tr>
      <th>&nbsp;</th>
      <th id="send_req">send_request</th>
      <th id="send_poll">send_poll</th>
      <th id="rec_reply">receive_reply</th>
      <th id="rec_ex">receive_exception</th>
      <th id="rec_oth">receive_other</th>
    </tr>
  </thead>
  <tbody>

  <tr>
<td id="ri" colspan=6><i>继承自 RequestInfo：</i></td>
  </tr>
 
  <tr><th id="req_id"><p align="left">request_id</p></th>
<td headers="ri req_id send_req">是</td> 
<td headers="ri req_id send_poll">是</td> 
<td headers="ri req_id rec_reply">是</td> 
<td headers="ri req_id rec_ex">是</td> 
<td headers="ri req_id rec_oth">是</td></tr>
 
<tr><th id="op"><p align="left">operation</p></th>
<td headers="ri op send_req">是</td> 
<td headers="ri op send_poll">是</td> 
<td headers="ri op rec_reply">是</td> 
<td headers="ri op rec_ex">是</td> 
<td headers="ri op rec_oth">是</td></tr>

<tr><th id="arg"><p align="left">arguments</p></th>
<td headers="ri arg send_req">是<sub>1</sub></td>
<td headers="ri arg send_poll">否 </td> 
<td headers="ri arg rec_reply">是</td> 
<td headers="ri arg rec_ex">否 </td> 
<td headers="ri arg rec_oth">否 </td></tr>

<tr><th id="exc"><p align="left">exceptions</p></th>
<td headers="ri exc send_req">是</td> 
<td headers="ri exc send_poll">否 </td> 
<td headers="ri exc rec_reply">是</td> 
<td headers="ri exc rec_ex">是</td> 
<td headers="ri exc rec_oth">是</td></tr>

<tr><th id="con"><p align="left">contexts</p></th>
<td headers="ri con send_req">是</td> 
<td headers="ri con send_poll">否 </td> 
<td headers="ri con rec_reply">是</td> 
<td headers="ri con rec_ex">是</td> 
<td headers="ri con rec_oth">是</td></tr>

  <tr><th id="op_con"><p align="left">operation_context</p></th>
<td headers="ri op_con send_req">是</td> 
<td headers="ri op_con send_poll">否 </td> 
<td headers="ri op_con rec_reply">是</td> 
<td headers="ri op_con rec_ex">是</td> 
<td headers="ri op_con rec_oth">是</td>
  </tr>

<tr><th id="result"><p align="left">result</p></th>
<td headers="ri result send_req">否 </td> 
<td headers="ri result send_poll">否 </td> 
<td headers="ri result rec_reply">是</td> 
<td headers="ri result rec_ex">否 </td> 
<td headers="ri result rec_oth">否 </td>
  </tr>

  <tr><th id="res_exp"><p align="left">response_expected</p></th>
<td headers="ri res_exp send_req">是</td> 
<td headers="ri res_exp send_poll">是</td> 
<td headers="ri res_exp rec_reply">是</td> 
<td headers="ri res_exp rec_ex">是</td> 
<td headers="ri res_exp rec_oth">是</td></tr>

  <tr><th id="sync_sco"><p align="left">sync_scope</p></th>
<td headers="ri sync_sco send_req">是</td> 
<td headers="ri sync_sco send_poll">否 </td> 
<td headers="ri sync_sco rec_reply">是</td> 
<td headers="ri sync_sco rec_ex">是</td> 
<td headers="ri sync_sco rec_oth">是</td>
  </tr>

  <tr><th id="rep_stat"><p align="left">reply_status</p></th>
<td headers="ri rep_stat send_req">否 </td> 
<td headers="ri rep_stat send_poll">否 </td> 
<td headers="ri rep_stat rec_reply">是</td> 
<td headers="ri rep_stat rec_ex">是</td> 
<td headers="ri rep_stat rec_oth">是</td></tr>

  <tr><th id="for_ref"><p align="left">forward_reference</p></th>
<td headers="ri for_ref send_req">否 </td>
<td headers="ri for_ref send_poll">否 </td> 
<td headers="ri for_ref rec_reply">否 </td> 
<td headers="ri for_ref rec_ex">否 </td> 
<td headers="ri for_ref rec_oth">是<sub>2</sub>
  </td></tr>

  <tr><th id="get_slot"><p align="left">get_slot</p></th>
<td headers="ri get_slot send_req">是</td> 
<td headers="ri get_slot send_poll">是</td> 
<td headers="ri get_slot rec_reply">是</td> 
<td headers="ri get_slot rec_ex">是</td> 
<td headers="ri get_slot rec_oth">是</td></tr>

  <tr><th id="grsc"><p align="left">get_request_service_context</p></th>
<td headers="ri grsc send_req">是</td> 
<td headers="ri grsc send_poll">否 </td> 
<td headers="ri grsc rec_reply">是</td> 
<td headers="ri grsc rec_ex">是</td> 
<td headers="ri grsc rec_oth">是</td></tr>

  <tr><th id="gpsc"><p align="left">get_reply_service_context</p></th>
<td headers="ri gpsc send_req">否 </td> 
<td headers="ri gpsc send_poll">否 </td> 
<td headers="ri gpsc rec_reply">是</td> 
<td headers="ri gpsc rec_ex">是</td> 
<td headers="ri gpsc rec_oth">是</td>
  </tr>

  <tr>
<td id="cri" colspan=6><i>特定于 ClientRequestInfo：</i></td>
  </tr>

<tr><th id="target"><p align="left">target</p></th>
<td headers="cri target send_req">是</td> 
<td headers="cri target send_poll">是</td> 
<td headers="cri target rec_reply">是</td> 
<td headers="cri target rec_ex">是</td> 
<td headers="cri target rec_oth">是</td></tr>

  <tr><th id="eftarget"><p align="left">effective_target</p></th>
<td headers="cri eftarget send_req">是</td> 
<td headers="cri eftarget send_poll">是</td> 
<td headers="cri eftarget rec_reply">是</td> 
<td headers="cri eftarget rec_ex">是</td> 
<td headers="cri eftarget rec_oth">是</td>
  </tr>

  <tr><th id="efprof"><p align="left">effective_profile</p></th>
<td headers="cri efprof send_req">是</td> 
<td headers="cri efprof send_poll">是</td> 
<td headers="cri efprof rec_reply">是</td> 
<td headers="cri efprof rec_ex">是</td> 
<td headers="cri efprof rec_oth">是</td></tr>

  <tr><th id="rxp"><p align="left">received_exception</p></th>
<td headers="cri rxp send_req">否 </td> 
<td headers="cri rxp send_poll">否 </td> 
<td headers="cri rxp rec_reply">否 </td> 
<td headers="cri rxp rec_ex">是</td> 
<td headers="cri rxp rec_oth">否 </td></tr>

  <tr><th id="rei"><p align="left">received_exception_id</p></th>
<td headers="cri rei send_req">否 </td> 
<td headers="cri rei send_poll">否 </td> 
<td headers="cri rei rec_reply">否 </td> 
<td headers="cri rei rec_ex">是</td> 
<td headers="cri rei rec_oth">否 </td></tr>

  <tr><th id="gec"><p align="left">get_effective_component</p></th>
<td headers="cri gec send_req">是</td> 
<td headers="cri gec send_poll">否 </td> 
<td headers="cri gec rec_reply">是</td> 
<td headers="cri gec rec_ex">是</td> 
<td headers="cri gec rec_oth">是</td></tr>

  <tr><th id="gecs"><p align="left">get_effective_components</p></th>
<td headers="cri gecs send_req">是</td> 
<td headers="cri gecs send_poll">否 </td> 
<td headers="cri gecs rec_reply">是</td> 
<td headers="cri gecs rec_ex">是</td> 
<td headers="cri gecs rec_oth">是</td></tr>

  <tr><th id="grpcy"><p align="left">get_request_policy</p></th>
<td headers="cri grpcy send_req">是</td>
<td headers="cri grpcy send_poll">否 </td> 
<td headers="cri grpcy rec_reply">是</td> 
<td headers="cri grpcy rec_ex">是</td> 
<td headers="cri grpcy rec_oth">是</td></tr>

  <tr><th id="arsc"><p align="left">add_request_service_context</p></th>
<td headers="cri arsc send_req">是</td> 
<td headers="cri arsc send_poll">否 </td> 
<td headers="cri arsc rec_reply">否 </td> 
<td headers="cri arsc rec_ex">否 </td> 
<td headers="cri arsc rec_oth">否 </td></tr>

   </tbody>
 </table>

 <ol>
<li>将 <code>ClientRequestInfo</code> 传递给 <code>send_request</code> 时，对于每个参数（无论它是 in、inout 还是 out），列表中都有一个对应的条目。但只有 in 和 inout 参数可用。</li>
<li>如果 <code>reply_status</code> 属性不是 <code>LOCATION_FORWARD</code>，则访问此属性将抛出 <code>BAD_INV_ORDER</code>，并带有标准次要代码 14。</li>
 </ol>

@see ClientRequestInterceptor

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Object org.omg.PortableInterceptor.ClientRequestInfoOperations.target()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回客户端调用以执行操作的对象。 


@see #effective_target

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Object org.omg.PortableInterceptor.ClientRequestInfoOperations.effective_target()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回实际调用操作的对象。如果 <code>reply_status</code> 为 <code>LOCATION_FORWARD</code>，则后续请求中 <code>effective_target</code> 将包含转发的 IOR，而目标保持不变。 

@see #target

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.IOP.TaggedProfile org.omg.PortableInterceptor.ClientRequestInfoOperations.effective_profile()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回将用来发送请求的配置文件。如果此操作的对象发生了位置转发，并且该对象的配置文件因此而发生了更改，则此配置文件即为用来定位的配置文件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Any org.omg.PortableInterceptor.ClientRequestInfoOperations.received_exception()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回一个 any，它包含要向客户端返回的异常。 
 <p>
如果异常是不能插入 any 的用户异常（例如，该异常是未知的或绑定不提供 <code>TypeCode</code>），则此属性将是一个包含系统异常 <code>UNKNOWN</code> 并带有标准次要代码 (minor code) 1 的 any。但是，异常的存储库 id 在 <code>received_exception_id</code> 属性中可用。
 

@see #received_exception_id

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.omg.PortableInterceptor.ClientRequestInfoOperations.received_exception_id()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回将向客户端返回的异常的存储库 id。

@see #received_exception
@see <a href="package-summary.html#unimpl"><code>PortableInterceptor</code> 包中关于限制/未实现特性的注释</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.IOP.TaggedComponent org.omg.PortableInterceptor.ClientRequestInfoOperations.get_effective_component(int id)
<!-- END KEY -->
<!-- BEGIN DATA -->

返回为此请求选择的配置文件中带有给定 ID 的 <code>IOP.TaggedComponent</code>。 
 <p>
如果给定的组件 ID 对应多个组件，则此操作返回哪个组件是不确定的。如果给定的组件 ID 对应于多个组件，则应调用 <code>get_effective_components</code>。 
 
@param id 将返回的组件的组件 id。
@return 通过给定标识符获取的 <code>IOP.TaggedComponent</code>。
@exception BAD_PARAM 如果不存在对应于给定组件 ID 的组件，则抛出此异常，并带有标准次代码 28。
@see #get_effective_components

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.IOP.TaggedComponent[] org.omg.PortableInterceptor.ClientRequestInfoOperations.get_effective_components(int id)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回为此请求选择的配置文件中具有给定 ID 的带标记组件所组成的数组。 
 
@param id 将返回的组件的组件 id。
@return <code>TaggedComponent</code> 对象的数组，每个对象都包含给定标识符。
@exception BAD_PARAM 如果不存在对应于给定组件 ID 的组件，则抛出此异常，并带有标准次代码 28。
@see #get_effective_component

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Policy org.omg.PortableInterceptor.ClientRequestInfoOperations.get_request_policy(int type)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此操作实行的给定策略。 
 
@exception INV_POLICY 如果策略类型因为此 ORB 不支持指定类型或该类型的策略对象不与此 Object 关联而无效，则抛出此异常，并带有标准次代码 1。
@param type 指定将返回策略的策略类型。
@return 通过给定类型获取的 <code>CORBA.Policy</code>。
@see <a href="package-summary.html#unimpl"><code>PortableInterceptor</code> 包中关于限制/未实现特性的注释</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.PortableInterceptor.ClientRequestInfoOperations.add_request_service_context(ServiceContext service_context, boolean replace)
<!-- END KEY -->
<!-- BEGIN DATA -->

允许 Interceptor 将服务上下文添加到请求。 
 <p>
没有对服务上下文的顺序做出任何声明。它们可能按添加的顺序出现，也可能不是如此。 

@param service_context 将添加到请求的 <code>IOP.ServiceContext</code>。
@param replace 在已经存在具有给定 ID 的服务上下文时指示此操作的行为。如果为 false，则抛出 <code>BAD_INV_ORDER</code>，并带有标准次要代码 15。如果为 true，则用新服务上下文取代现有的服务上下文。

<!-- END DATA -->