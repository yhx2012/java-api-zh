<!-- BEGIN KEY -->
org.omg.PortableInterceptor
<!-- END KEY -->
<!-- BEGIN DATA -->


提供一个注册 ORB 钩子 (hook) 的机制，通过这些钩子 ORB 服务可以截取执行 ORB 的正常流。

<h2>Interceptor 类型</h2>
目前可以注册三种 interceptor 类型：
<ul>
<li>{@link org.omg.PortableInterceptor.IORInterceptor IORInterceptor} - 用于在 IOR 内部的配置文件中建立带标记的组件。</li>
<li>{@link org.omg.PortableInterceptor.ClientRequestInterceptor ClientRequestInterceptor} - 通过 ORB 在<i>客户端</i> 端截取请求/应答序列流。</li>
<li>{@link org.omg.PortableInterceptor.ServerRequestInterceptor ServerRequestInterceptor} - 通过 ORB 在<i>服务器</i> 端截取请求/应答序列流。</li>
</ul>
有关如何注册 interceptor，请参阅 <code>{@link org.omg.PortableInterceptor.ORBInitializer ORBInitializer}</code> 的 Java 文档。

<a name="unimpl"></a>
<h2><code>org.omg.PortableInterceptor</code> 包中已知的限制/未实现方法</h2>

<code>
<ul>
  <li>
    <b>RequestInfo</b>
    <ul>
      <li><b>sync_scope()</b>: 总是返回 SYNC_WITH_TRANSPORT</li>
<li><b>arguments()</b>: 只支持 DII/DSI 调用</li>
<li><b>exceptions()</b>: 只支持客户端的 DII 调用。不支持服务器端的调用。</li>
<li><b>contexts()</b>: 只支持客户端的 DII 调用。不支持服务器端的调用，因为用户的 ORB 不发送上下文。
          </li>
      <li><b>operation_context()</b>: 只支持客户端的 DII 调用。不支持服务器端的调用，因为 ORB 不发送上下文。</li>
<li><b>result()</b>:只支持 DII/DSI 调用</li>
    </ul>
  </li>
  <li>
    <b>ClientRequestInfo</b>
    <ul>
      <li><b>received_exception_id()</b>: 就 DII 而言总是返回 null</li>
      <li><b>get_request_policy(int type)</b>: 未实现。</li>
    </ul>
  </li>
  <li>
    <b>ServerRequestInfo</b>
    <ul>
      <li><b>sending_exception()</b>: 不支持非 DSI 情况下服务器端的用户异常。</li>
    </ul>
  </li>
</ul>
</code>

<h2>包规范</h2>
<P>有关 Java[tm] Platform, Standard Edition 6 遵守的官方 OMG 规范的受支持部分的明确列表，请参阅 <A 
HREF="../CORBA/doc-files/compliance.html">Official Specifications for CORBA support in Java SE 6</A>。 

@since 1.4 <br>
@serial exclude

<!-- END DATA -->
