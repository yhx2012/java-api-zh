<!-- BEGIN KEY -->
public interface org.omg.PortableInterceptor.IORInfoOperations
<!-- END KEY -->
<!-- BEGIN DATA -->
提供服务器端的 ORB 服务，该服务能够在构建 IOR 期间访问适用的策略并添加组件。ORB 将此接口实现的实例作为参数传递给 <code>IORInterceptor.establish_components</code>。

@see IORInterceptor

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Policy org.omg.PortableInterceptor.IORInfoOperations.get_effective_policy(int type)
<!-- END KEY -->
<!-- BEGIN DATA -->
允许 ORB 服务实现确定对将构造的 IOR 有效的特定类型服务器端策略。当将构造的 IOR 对应于使用 POA 实现的对象时，所有传递给创建该 POA 的 <code>PortableServer.POA.create_POA</code> 调用的 Policy 对象都可以通过 <code>get_effective_policy</code> 访问。 
 <p>
如果 ORB 已知给定类型的策略，则此操作将抛出 <code>INV_POLICY</code>，并带有标准次要代码 2。 
 
@param type 一个 int，指定要返回的策略的类型。
@return 所请求类型的有效 <code>CORBA.Policy</code> 对象。如果已知给定策略类型，但不存在有效的该类型策略，则此操作将返回 nil 对象引用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.PortableInterceptor.IORInfoOperations.add_ior_component(TaggedComponent tagged_component)
<!-- END KEY -->
<!-- BEGIN DATA -->
可移植 ORB 服务实现从其 <code>establish_components</code> 实现调用 <code>add_ior_component</code>，以便向构造 IOR 时要包括的设置添加带标记的组件。此设置中的组件将包括在所有的配置文件中。 
 <p>
可以存在任何数量具有相同 ID 的组件。
 
@param a_component 要添加的 IOP.TaggedComponent。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.PortableInterceptor.IORInfoOperations.add_ior_component_to_profile(TaggedComponent tagged_component, int profile_id)
<!-- END KEY -->
<!-- BEGIN DATA -->
可移植 ORB 服务实现从其 <code>establish_components</code> 实现调用 <code>add_ior_component_to_profile</code>，以便向构造 IOR 时要包括的设置添加带标记的组件。此设置中的组件将包括在指定的配置文件中。 
 <p>
可以存在任何数量具有相同 ID 的组件。
 
@param a_component 要添加的 <code>IOP.TaggedComponent</code>。
@param profile_id 将添加此组件的配置文件的配置文件 id。
@exception BAD_PARAM 如果给定配置文件 ID 没有定义已知配置文件或不能向该配置文件添加组件，则将抛出此异常，并带有标准次代码 29。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int org.omg.PortableInterceptor.IORInfoOperations.manager_id()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回刚创建并在 IOR interceptor 上运行的对象适配器的对象适配器管理器 id。

<!-- END DATA -->
<!-- BEGIN KEY -->
public short org.omg.PortableInterceptor.IORInfoOperations.state()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回刚创建并在 IOR interceptor 上运行的对象适配器的对象适配器状态。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.PortableInterceptor.ObjectReferenceTemplate org.omg.PortableInterceptor.IORInfoOperations.adapter_template()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回刚创建并在 IOR interceptor 上运行的对象适配器的对象引用模板。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.PortableInterceptor.ObjectReferenceFactory org.omg.PortableInterceptor.IORInfoOperations.current_factory()
<!-- END KEY -->
<!-- BEGIN DATA -->
读取时返回当前工厂，该工厂将用于创建对应于刚创建并在 IOR interceptor 上运行的对象适配器的对象引用。默认情况下，此工厂与 adapter_template 属性的值相同。current_factory 也可以设置为 IORInterceptor_3_0 中的另一个对象引用模板。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.PortableInterceptor.IORInfoOperations.current_factory(ObjectReferenceFactory newCurrent_factory)
<!-- END KEY -->
<!-- BEGIN DATA -->
读取时返回当前工厂，该工厂将用于创建对应于刚创建并在 IOR interceptor 上运行的对象适配器的对象引用。默认情况下，此工厂与 adapter_template 属性的值相同。current_factory 也可以设置为 IORInterceptor_3_0 中的另一个对象引用模板。

<!-- END DATA -->
