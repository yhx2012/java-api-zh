<!-- BEGIN KEY -->
public interface org.omg.PortableInterceptor.ServerRequestInterceptorOperations extends org.omg.PortableInterceptor.InterceptorOperations
<!-- END KEY -->
<!-- BEGIN DATA -->
服务器端的请求 interceptor。
 <p>
请求 Interceptor 用于通过 ORB 在指定点截取请求/应答序列流，以便服务能够查询请求信息并操作在客户端和服务器之间传播的服务上下文。请求 Interceptor 主要用途是使 ORB 服务能够在客户端和服务器之间传输上下文信息。请求 Interceptor 有两种类型：客户端和服务器端。 
 <p>
编写服务器端 Interceptor 需要实现 ServerRequestInterceptor 接口。

@see ServerRequestInfo

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.PortableInterceptor.ServerRequestInterceptorOperations.receive_request_service_contexts(ServerRequestInfo ri) throws org.omg.PortableInterceptor.ForwardRequest
<!-- END KEY -->
<!-- BEGIN DATA -->
允许 interceptor 处理服务上下文信息。
 <p>
在此截取点，Interceptor 必须从传入请求获取其服务上下文信息，并将其传输到 <code>PortableInterceptor.Current</code> 的槽 (slot)。  
 <p>
在调用 servant 管理器之前调用此截取点。此时操作参数尚未可用。此截取点可能执行与目标调用相同的线程，也可能不执行。 
 <p>
此截取点可能抛出系统异常。如果抛出异常，则不调用任何其他 Interceptor 的 <code>receive_request_service_contexts</code> 操作。移除那些 Flow Stack 上的 Interceptor 并调用其 <code>send_exception</code> 截取点。 
 <p>
此截取点同样可能抛出 <code>ForwardRequest</code> 异常。如果 Interceptor 抛出此异常，则不调用任何其他 Interceptor 的 <code>receive_request_service_contexts</code> 操作。移除那些 Flow Stack 上的 Interceptor 并调用其 <code>send_other</code> 截取点。 
 <p>
如果符合的 Interceptor 从此截取点抛出系统异常，则它们应该完全遵守 <code>completion_status</code> 语义。<code>completion_status</code> 应为 COMPLETED_NO。

@param ri 关于将被截取的当前请求的信息。
@exception ForwardRequest 抛出此异常指示 ORB 重试请求应该与异常中给定的新对象一起发生。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.PortableInterceptor.ServerRequestInterceptorOperations.receive_request(ServerRequestInfo ri) throws org.omg.PortableInterceptor.ForwardRequest
<!-- END KEY -->
<!-- BEGIN DATA -->
允许 Interceptor 在所有信息（包括操作参数）可用后查询信息。此截取点应该执行与目标调用相同的线程。
 <p>
在 DSI 模型中，因为在用户代码调用 <code>arguments</code> 时参数首次可用，所以将从 <code>arguments</code> 内部调用 <code>receive_request</code>。有可能不是在 DSI 模型中调用 <code>arguments</code>。目标可以在调用 <code>arguments</code> 之前调用 <code>set_exception</code>。ORB 应保证通过 <code>arguments</code> 或 <code>set_exception</code> 调用 <code>receive_request</code> 一次。如果通过 <code>set_exception</code> 调用，则请求参数将导致抛出 <code>NO_RESOURCES</code>，并带有标准次要代码 1。
 <p>
此截取点可能抛出系统异常。如果抛出异常，则不调用任何其他 Interceptor 的 <code>receive_request</code> 操作。移除那些 Flow Stack 上的 Interceptor 并调用其 <code>send_exception</code> 截取点。 
 <p>
此截取点同样可能抛出 <code>ForwardRequest</code> 异常。如果 Interceptor 抛出此异常，则不调用任何其他 Interceptor 的 <code>receive_request</code> 操作。移除那些 Flow Stack 上的 Interceptor 并调用其 <code>send_other</code> 截取点。
 <p>
如果符合的 Interceptor 从此截取点抛出系统异常，则它们应该完全遵守 <code>completion_status</code> 语义。<code>completion_status</code> 应为 <code>COMPLETED_NO</code>。

@param ri 关于将被截取的当前请求的信息。
@exception ForwardRequest 抛出此异常指示 ORB 重试请求应该与异常中给定的新对象一起发生。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.PortableInterceptor.ServerRequestInterceptorOperations.send_reply(ServerRequestInfo ri)
<!-- END KEY -->
<!-- BEGIN DATA -->
允许 Interceptor 在已调用目标操作后、向客户端返回应答前查询应答信息并修改应答服务上下文。此截取点应该执行与目标调用相同的线程。 
 <p>
此截取点可能抛出系统异常。如果抛出异常，则不调用任何其他 Interceptor 的 <code>send_reply</code> 操作。Flow Stack 中剩余的 Interceptor 将使其 <code>send_exception</code> 截取点被调用。 
 <p>
如果符合的 Interceptor 从此截取点抛出系统异常，则它们应该完全遵守 <code>completion_status</code> 语义。<code>completion_status</code> 应为 <code>COMPLETED_YES</code>。

@param ri 关于将被截取的当前请求的信息。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.PortableInterceptor.ServerRequestInterceptorOperations.send_exception(ServerRequestInfo ri) throws org.omg.PortableInterceptor.ForwardRequest
<!-- END KEY -->
<!-- BEGIN DATA -->
允许 Interceptor 在向客户端抛出异常前查询异常信息并修改应答服务上下文。当发生异常时，将调用此截取点。此截取点应该执行与目标调用相同的线程。 
 <p>
此截取点可能抛出系统异常。这可以更改连续 Interceptor（从 Flow Stack 中移除的）调用 <code>send_exception</code> 收到的异常。对客户端抛出的异常将是 Interceptor 抛出的最终异常或者原始异常（如果没有 Interceptor 更改了异常）。 
 <p>
此截取点同样可能抛出 <code>ForwardRequest</code> 异常。如果 Interceptor 抛出此异常，则不调用任何其他 Interceptor 的 <code>send_exception</code> 操作。将调用 Flow Stack 中剩余 Interceptor 的 <code>send_other</code> 截取点。 
 <p>
如果异常的 <code>completion_status</code> 不是 <code>COMPLETED_NO</code>，则此截取点抛出 <code>ForwardRequest</code> 异常是不恰当的。将失去请求的最多一次 (at-most-once) 语义。 
 <p>
如果符合的 Interceptor 从此截取点抛出系统异常，则它们应该完全遵守 <code>completion_status</code> 语义。如果原始异常为系统异常，则新异常的 <code>completion_status</code> 将与原始异常相同。如果原始异常为用户异常，则新异常的 <code>completion_status</code> 应为 <code>COMPLETED_YES</code>。

@param ri 关于将被截取的当前请求的信息。
@exception ForwardRequest 抛出此异常指示 ORB 重试请求应该与异常中给定的新对象一起发生。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.PortableInterceptor.ServerRequestInterceptorOperations.send_other(ServerRequestInfo ri) throws org.omg.PortableInterceptor.ForwardRequest
<!-- END KEY -->
<!-- BEGIN DATA -->
允许 Interceptor 在请求引起了正常应答和异常之外的情况时查询可用信息。例如，请求可以引起重试（例如，收到带有 <code>LOCATION_FORWARD</code> 状态的 GIOP 应答）。此截取点应该执行与目标调用相同的线程。 
 <p>
此截取点可能抛出系统异常。如果抛出异常，则不调用任何其他 Interceptor 的 <code>send_other</code> 操作。将调用 Flow Stack 中剩余 Interceptor 的 <code>send_exception</code> 截取点。 
 <p>
此截取点同样可能抛出 <code>ForwardRequest</code> 异常。如果 Interceptor 抛出此异常，则使用 <code>ForwardRequest</code> 异常提供的新信息调用连续 Interceptor 的 <code>send_other</code> 操作。 
 <p>
如果符合的 Interceptor 从此截取点抛出系统异常，则它们应该完全遵守 <code>completion_status</code> 语义。<code>completion_status</code> 应为 <code>COMPLETED_NO</code>。

@param ri 关于将被截取的当前请求的信息。
@exception ForwardRequest 抛出此异常指示 ORB 重试请求应该与异常中给定的新对象一起发生。

<!-- END DATA -->
