<!-- BEGIN KEY -->
public interface org.omg.PortableInterceptor.IORInterceptor_3_0Operations extends org.omg.PortableInterceptor.IORInterceptorOperations
<!-- END KEY -->
<!-- BEGIN DATA -->
org/omg/PortableInterceptor/IORInterceptor_3_0Operations.java。由 &quot;3.2&quot; 版的 IDL-to-Java 编译器（可移植）从 ../../../../src/share/classes/org/omg/PortableInterceptor/Interceptors.idl 生成，生成时间为 2006 年 6 月 30 日，星期五上午 12:40:10 (GMT-08:00)。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.PortableInterceptor.IORInterceptor_3_0Operations.components_established(IORInfo info)
<!-- END KEY -->
<!-- BEGIN DATA -->
在已经对所有已注册 IORInterceptor 实例调用 establish_components 方法后，对所有已注册 IORInterceptor_3_0 实例调用 components_established 方法。此调用中可将 adapter_template 用于 info。此调用中可使用 info 获取或设置 current_factory。
 <p>
此方法抛出的任何异常可由调用此 interceptor 的对象适配器处理。就 POA 而言，一个异常将导致带有 OMG 标准次代码 (minor code) 6 的 OBJ_ADAPTER 异常。
@param info 将创建的对象适配器的 IORInfo。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.PortableInterceptor.IORInterceptor_3_0Operations.adapter_manager_state_changed(int id, short state)
<!-- END KEY -->
<!-- BEGIN DATA -->
只要适配器管理器的状态更改时便调用此方法。对于 POA，指的是 POAManager。通过 <code>adapter_manager_state_changed</code> 报告的状态更改不会再通过 <code>adapter_state_changed</code> 报告。
@param id 更改状态的适配器管理器的适配器管理器 id
@param state 适配器管理器的新状态

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.PortableInterceptor.IORInterceptor_3_0Operations.adapter_state_changed(org.omg.PortableInterceptor.ObjectReferenceTemplate[] templates, short state)
<!-- END KEY -->
<!-- BEGIN DATA -->
只要对象适配器的状态发生更改，并且该状态更改不是由适配器管理器引起的，便调用此方法。向所有已注册 <code>IORInterceptor_3_0</code> 实例报告此类更改。
@param templates 发生此状态更改的 <code>ObjectReferenceTemplate</code> 实例序列。
@param state 由所有模板共享的新 <code>AdapterState</code>。

<!-- END DATA -->
