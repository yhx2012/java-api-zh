<!-- BEGIN KEY -->
public interface org.omg.PortableInterceptor.RequestInfoOperations
<!-- END KEY -->
<!-- BEGIN DATA -->
Interceptor 可访问的请求信息。
 <p>
每个截取点都给定了一个对象，Interceptor 可以通过该对象访问请求信息。客户端和服务器端的截取点关注不同的信息，因此有两种信息对象：<code>ClientRequestInfo</code> 传递给客户端的截取点，<code>ServerRequestInfo</code> 传递给服务器端的截取点。但也有两者都需要的信息，所以这两个接口继承自同一个接口：<code>RequestInfo</code>。

@see ClientRequestInfo
@see ServerRequestInfo

<!-- END DATA -->
<!-- BEGIN KEY -->
public int org.omg.PortableInterceptor.RequestInfoOperations.request_id()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回唯一地标识激活的请求/应答序列的 id。请求/应答序列一结束此 ID 即可重用。注意，此 id 不同于 GIOP <code>request_id</code>。如果使用的传送机制是 GIOP，则这些 ID 很可能是相同的，但是不保证也不要求如此。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.omg.PortableInterceptor.RequestInfoOperations.operation()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回将被调用的操作的名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.Dynamic.Parameter[] org.omg.PortableInterceptor.RequestInfoOperations.arguments()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>Parameter</code> 对象数组，包含将调用的操作上的参数。如果没有参数，则此属性将是一个 0 长度数组。 
 <p>
并非所有环境都提供对参数的访问。例如，使用 Java 可移植绑定时参数将不可用。在这些环境中访问此属性时，将抛出 <code>NO_RESOURCES</code>，并带有标准次要代码 1。
 <p>
<i>注：对于 DSI/DII 调用参数是可用的。</i>

@exception NO_RESOURCES 如果参数不可用。
@see <a href="package-summary.html#unimpl"><code>PortableInterceptor</code> 包中关于限制/未实现特性的注释</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.TypeCode[] org.omg.PortableInterceptor.RequestInfoOperations.exceptions()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>TypeCode</code> 对象数组，这些对象描述此操作调用可能抛出的用户异常的 <code>TypeCode</code>。如果没有用户异常，则此方法返回一个长度为 0 的数组。 
 <p>
并非所有环境都提供对异常列表的访问。例如，使用 Java 可移植绑定时异常列表将不可用。在这些环境中访问此属性时，将抛出 <code>NO_RESOURCES</code>，并带有标准次要代码 1。
 <p>
<i>注：异常对于 DSI/DII 调用是可用的。</i>

@exception NO_RESOURCES 如果异常不可用。
@see <a href="package-summary.html#unimpl"><code>PortableInterceptor</code> 包中关于限制/未实现特性的注释</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] org.omg.PortableInterceptor.RequestInfoOperations.contexts()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>String</code> 对象数组，这些对象描述可以在此操作调用上传递的上下文。如果没有上下文，则此方法返回一个长度为 0 的数组。 
 <p>
并非所有环境都提供对上下文列表的访问。例如，使用 Java 可移植绑定时上下文列表将不可用。在这些环境中访问此属性时，将抛出 <code>NO_RESOURCES</code>，并带有标准次要代码 1。
 <p>
<i>注：上下文对于 DSI/DII 调用是可用的。</i>

@exception NO_RESOURCES 如果上下文不可用。
@see <a href="package-summary.html#unimpl"><code>PortableInterceptor</code> 包中关于限制/未实现特性的注释</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] org.omg.PortableInterceptor.RequestInfoOperations.operation_context()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>String</code> 对象数组，这些对象包含将在请求上发送上下文。
 <p>
并非所有环境都提供对上下文的访问。例如，使用 Java 可移植绑定时上下文将不可用。在这些环境中访问此属性时，将抛出 NO_RESOURCES，并带有标准次代码 1。
 <p>
<i>注：<code>operation_context</code> 对于 DSI/DII 调用是可用的。</i>

@exception NO_RESOURCES 如果操作上下文不可用。
@see <a href="package-summary.html#unimpl"><code>PortableInterceptor</code> 包中关于限制/未实现特性的注释</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Any org.omg.PortableInterceptor.RequestInfoOperations.result()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 any，它包含该操作调用的结果。如果操作返回类型为空，则此属性将是包含 <code>TCKind</code> 值为 <code>tk_void</code> 的类型代码的 any，并且该 any 不包含任何值。 
 <p>
并非所有环境都提供对结果的访问。例如，使用 Java 可移植绑定时结果将不可用。在这些环境中访问此属性时，将抛出 <code>NO_RESOURCES</code>，并带有标准次要代码 1。
 <p>
<i>注：结果对于 DSI/DII 调用是可用的。</i>

@exception NO_RESOURCES 如果结果不可用。
@see <a href="package-summary.html#unimpl"><code>PortableInterceptor</code> 包中关于限制/未实现特性的注释</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.omg.PortableInterceptor.RequestInfoOperations.response_expected()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示是否希望响应。 
 <p>
对于客户端，当 <code>response_expected</code> 为 false 时不返回应答，因此不能调用 <code>receive_reply</code>。不发生异常时调用 <code>receive_other</code>，发生异常时调用 <code>receive_exception</code>。 
 <p>
此属性在客户端 <code>send_poll</code> 内部为 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public short org.omg.PortableInterceptor.RequestInfoOperations.sync_scope()
<!-- END KEY -->
<!-- BEGIN DATA -->
定义在控制信息返回到客户端前请求应前进的距离。这已在 Messaging 规范中定义，仅当 <code>response_expected</code> 为 false 时才相关。如果 <code>response_expected</code> 为 true，则 <code>sync_scope</code> 的值是不确定的。此属性可以是以下值之一： 
 <ul>
   <li><code>Messaging.SYNC_NONE</code></li>
   <li><code>Messaging.SYNC_WITH_TRANSPORT</code></li>
   <li><code>Messaging.SYNC_WITH_SERVER</code></li>
   <li><code>Messaging.SYNC_WITH_TARGET</code></li>
 </ul>
对于服务器所有的域而言，将从目标操作调用的返回中创建应答，但不会将该应答返回给客户端。尽管它不会返回给客户端，但确实发生了应答，因此将执行正常服务器端截取点（即 <code>receive_request_service_contexts</code>、<code>receive_request</code>、<code>send_reply</code> 或 <code>send_exception</code>）。 
 <p>
对于 <code>SYNC_WITH_SERVER</code> 和 <code>SYNC_WITH_TARGET</code>，在调用目标前，服务器将一个空应答发送回客户端。此应答将不会被服务器端的 Interceptor 截取。
 
@see <a href="package-summary.html#unimpl"><code>PortableInterceptor</code> 包中关于限制/未实现特性的注释</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public short org.omg.PortableInterceptor.RequestInfoOperations.reply_status()
<!-- END KEY -->
<!-- BEGIN DATA -->
描述操作调用结果的状态。返回值可以是以下值之一： 
 <ul>
   <li><code>PortableInterceptor.SUCCESSFUL</code></li>
   <li><code>PortableInterceptor.SYSTEM_EXCEPTION</code></li>
   <li><code>PortableInterceptor.USER_EXCEPTION</code></li>
   <li><code>PortableInterceptor.LOCATION_FORWARD</code></li>
   <li><code>PortableInterceptor.TRANSPORT_RETRY</code></li>
 </ul>
对于客户端：
 <ul>
<li>在 <code>receive_reply</code> 截取点内，此方法仅返回 <code>SUCCESSFUL</code></li>.
<li>在 <code>receive_exception</code> 截取点内，此方法将返回 <code>SYSTEM_EXCEPTION</code> 或 <code>USER_EXCEPTION</code>。</li>
<li>在 <code>receive_other</code> 截取点内，此方法将返回以下任意值：<code>SUCCESSFUL</code>、<code>LOCATION_FORWARD</code> 或 <code>TRANSPORT_RETRY</code>。<code>SUCCESSFUL</code> 表示成功返回了异步请求。<code>LOCATION_FORWARD</code> 表示返回了应答，并以 <code>LOCATION_FORWARD</code> 作为其状态。<code>TRANSPORT_RETRY</code> 表示传送机制指示重试 - 例如，带有 <code>NEEDS_ADDRESSING_MODE</code> 状态的 GIOP 应答。 </li>
 </ul>
对于服务器： 
 <ul>
<li>在 <code>send_reply</code> 截取点内，此方法仅返回 <code>SUCCESSFUL</code></li>
<li>在 <code>send_exception</code> 截取点内，此方法将返回 <code>SYSTEM_EXCEPTION</code> 或 <code>USER_EXCEPTION</code>。</li>
<li>在 <code>send_other</code> 截取点内，此属性将是以下任意值：<code>SUCCESSFUL</code> 或 <code>LOCATION_FORWARD</code>。<code>SUCCESSFUL</code> 表示成功返回了异步请求。<code>LOCATION_FORWARD</code> 表示返回了应答，并以 <code>LOCATION_FORWARD</code> 作为其状态。</li>
 </ul>
 
@see SUCCESSFUL
@see SYSTEM_EXCEPTION
@see USER_EXCEPTION
@see LOCATION_FORWARD
@see TRANSPORT_RETRY

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Object org.omg.PortableInterceptor.RequestInfoOperations.forward_reference()
<!-- END KEY -->
<!-- BEGIN DATA -->

如果 <code>reply_status</code> 属性为 <code>LOCATION_FORWARD</code>，则包含要将请求转发到的对象。转发的请求是否将实际发生是不确定的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Any org.omg.PortableInterceptor.RequestInfoOperations.get_slot(int id) throws org.omg.PortableInterceptor.InvalidSlot
<!-- END KEY -->
<!-- BEGIN DATA -->
返回请求域内 <code>PortableInterceptor.Current</code> 给定槽 (slot) 中的数据。 
 <p>
如果尚未设置给定槽，则返回一个包含 <code>TCKind</code> 值为 <code>tk_null</code> 的类型代码的 any。 

@param id 将返回的槽的 <code>SlotId</code>。
@return 使用给定标识符获取的槽数据，以 any 的形式存在。
@exception InvalidSlot 如果 ID 定义的不是已分配的槽，则抛出此异常。
@see Current

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.IOP.ServiceContext org.omg.PortableInterceptor.RequestInfoOperations.get_request_service_context(int id)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回具有给定 ID 的与请求关联的服务上下文复本。 
 <p>
@param id 将返回的服务上下文的 <code>IOP.ServiceId</code>。
@return 通过给定标识符获取的 <code>IOP.ServiceContext</code>。
@exception BAD_PARAM 如果请求的服务上下文不包含对应于该 ID 的条目，则抛出此异常，并带有标准次代码 26。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.IOP.ServiceContext org.omg.PortableInterceptor.RequestInfoOperations.get_reply_service_context(int id)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回具有给定 ID 的与应答关联的服务上下文复本。 
 
@param id 将返回的服务上下文的 <code>IOP.ServiceId</code>。
@return 具有给定标识符的 <code>IOP.ServiceContext</code>。
@exception BAD_PARAM 如果请求的服务上下文不包含对应于该 ID 的条目，则抛出此异常，并带有标准次要代码 26。

<!-- END DATA -->
