<!-- BEGIN KEY -->
public abstract class org.omg.CORBA.portable.ObjectImpl extends java.lang.Object implements org.omg.CORBA.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
所有 stub 类的公共基类；提供 <code>org.omg.CORBA.Object</code> 方法的默认实现。所有方法实现都被委托到 <code>ObjectImpl</code> 实例中存储的 <code>Delegate</code> 对象。<code>ObjectImpl</code> 允许可移植的 stub，因为 <code>Delegate</code> 可以由特定于不同供应商的 ORB 实现。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.portable.Delegate org.omg.CORBA.portable.ObjectImpl._get_delegate()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得对特定于供应商的 <code>Delegate</code> 对象的引用，此 <code>ObjectImpl</code> 对象将对其调用的所有方法委托给该对象。

@return 包含在此 ObjectImpl 实例中的 Delegate
@throws BAD_OPERATION 如果尚未设置委托
@see #_set_delegate

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.portable.ObjectImpl._set_delegate(Delegate delegate)
<!-- END KEY -->
<!-- BEGIN DATA -->

将此 <code>ObjectImpl</code> 实例的 Delegate 设置为给定的 <code>Delegate</code> 对象。对此 <code>ObjectImpl</code> 对象调用的所有方法将被委托到此 Delegate。

@param delegate <code>Delegate</code> 实例，对此 <code>ObjectImpl</code> 对象调用的所有方法都将被委托到该实例；可以由第三方 ORB 实现
@see #_get_delegate

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String[] org.omg.CORBA.portable.ObjectImpl._ids()
<!-- END KEY -->
<!-- BEGIN DATA -->

获得包含此 <code>ObjectImpl</code> 对象所支持的存储库标识符的字符串数组。例如，对于 sub，此方法返回所有关于该 stub 所支持的接口的信息。

@return 此 <code>ObjectImpl</code> 实例支持的所有存储库标识符所组成的数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Object org.omg.CORBA.portable.ObjectImpl._duplicate()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 <code>ObjectImpl</code> 对象的一个副本。

@return 作为此对象副本的 <code>orb.omg.CORBA.Object</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.portable.ObjectImpl._release()
<!-- END KEY -->
<!-- BEGIN DATA -->

释放与此 <code>ObjectImpl</code> 对象关联的资源。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.omg.CORBA.portable.ObjectImpl._is_a(String repository_id)
<!-- END KEY -->
<!-- BEGIN DATA -->

检查给定存储库标识符标识的对象是否是 <code>ObjectImpl</code> 对象。

@param repository_id 带有要检查的存储库标识符的 <code>String</code> 对象
@return 如果给定存储库 id 标识的对象是 <code>ObjectImpl</code> 的实例，则返回 <code>true</code>；否则返回 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.omg.CORBA.portable.ObjectImpl._is_equivalent(Object that)
<!-- END KEY -->
<!-- BEGIN DATA -->

检查给定的 <code>ObjectImpl</code> 对象是否等于此 <code>ObjectImpl</code> 对象。

@param that 要与此 <code>ObjectImpl</code> 对象比较的 <code>ObjectImpl</code> 实例
@return 如果给定对象等于此 <code>ObjectImpl</code> 对象，则返回 <code>true</code>；否则返回 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.omg.CORBA.portable.ObjectImpl._non_existent()
<!-- END KEY -->
<!-- BEGIN DATA -->

检查此 <code>ObjectImpl</code> 对象的 server 对象是否已经被销毁。
 
@return 如果 ORB 确信 server 对象不存在，则返回 <code>true</code>；否则返回 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int org.omg.CORBA.portable.ObjectImpl._hash(int maximum)
<!-- END KEY -->
<!-- BEGIN DATA -->

获得充当此 <code>ObjectImpl</code> 对象内部 ORB 标识符的哈希码。

@param maximum 一个 <code>int</code>，指示 ORB 返回的哈希码值上限
@return 表示此 <code>ObjectImpl</code> 对象哈希码的 <code>int</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Request org.omg.CORBA.portable.ObjectImpl._request(String operation)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>Request</code> 对象，使其包含可用于动态调用接口 (Dynamic Invocation Interface) 的给定方法。

@param operation 将由新 <code>Request</code> 对象调用的方法
@return 使用给定方法初始化的新 <code>Request</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Request org.omg.CORBA.portable.ObjectImpl._create_request(Context ctx, String operation, NVList arg_list, NamedValue result)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>Request</code> 对象，使其包含给定上下文、方法、参数列表，以及用于结果的容器。

@param ctx 请求的 Context
@param operation 新 <code>Request</code> 对象将调用的方法
@param arg_list 方法的参数；一个 <code>NVList</code>，其中每个参数都是 <code>NamedValue</code> 对象
@param result 一个 <code>NamedValue</code> 对象，用于返回执行请求的方法后所得的结果
@return 一个新的 <code>Request</code> 对象，使用给定的上下文、方法、参数列表，以及返回值的容器初始化。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Request org.omg.CORBA.portable.ObjectImpl._create_request(Context ctx, String operation, NVList arg_list, NamedValue result, ExceptionList exceptions, ContextList contexts)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>Request</code> 对象，使其包含给定的上下文、方法、参数列表、结果容器、异常，以及解析上下文字符串时将使用的属性名列表。此 <code>Request</code> 对象用于动态调用接口。

@param ctx 含有上下文字符串的 <code>Context</code> 对象，所包含的字符串必须在随同请求一起被发送前进行解析
@param operation 新 <code>Request</code> 对象将调用的方法
@param arg_list 方法的参数；一个 <code>NVList</code>，其中每个参数都是 <code>NamedValue</code> 对象
@param result 一个 <code>NamedValue</code> 对象，用来返回执行请求的方法所得的结果
@param exceptions 给定方法抛出的异常所组成的列表
@param contexts 在解析 <i>ctx</i> 中上下文时所需要的属性列表；<i>contexts</i> 中的字符串被用作 <code>Context.get_values</code> 方法的参数，该方法返回与给定属性关联的值
@return 一个新的 <code>Request</code> 对象，使用给定的要解析上下文字符串、方法、参数列表、结果容器、异常，以及解析上下文字符串时将使用的属性名列表进行初始化

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Object org.omg.CORBA.portable.ObjectImpl._get_interface_def()
<!-- END KEY -->
<!-- BEGIN DATA -->

获得此 <code>ObjectImpl</code> 对象的接口定义。

@return <code>org.omg.CORBA.Object</code> 实例，它是此 <code>ObjectImpl</code> 对象的接口定义

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.ORB org.omg.CORBA.portable.ObjectImpl._orb()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回对与此对象及其委托相关的 ORB 的引用。返回值是创建委托的 <code>ORB</code> 对象。

@return <code>ORB</code> 实例，它创建了包含在此 <code>ObjectImpl</code> 对象中的 <code>Delegate</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Policy org.omg.CORBA.portable.ObjectImpl._get_policy(int policy_type)
<!-- END KEY -->
<!-- BEGIN DATA -->
获得此 <code>ObjectImpl</code> 对象具有给定策略类型的 <code>Policy</code> 对象。

@param policy_type 指示策略类型的 int
@return 应用于此 <code>ObjectImpl</code> 对象并具有指定策略类型的 <code>Policy</code> 对象
@see org.omg.CORBA.PolicyOperations#policy_type

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.DomainManager[] org.omg.CORBA.portable.ObjectImpl._get_domain_managers()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得此 <code>ObjectImpl</code> 对象的域管理程序所组成的列表。

@return 一个数组，包含此 <code>ObjectImpl</code> 实例的 <code>DomainManager</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Object org.omg.CORBA.portable.ObjectImpl._set_policy_override(org.omg.CORBA.Policy[] policies, SetOverrideType set_add)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>ObjectImpl</code> 对象给定策略的重写类型设置为给定的 <code>SetOverrideType</code> 实例。
 
@param policies 一个 <code>Policy</code> 对象数组，具有取代当前策略或被添加到当前策略的策略
@param set_add 可能为 <code>SetOverrideType.SET_OVERRIDE</code>，指示给定策略将取代任何现存策略；也可能为 <code>SetOverrideType.ADD_OVERRIDE</code>，指示给定策略将被添加到任何现有策略
@return 一个 <code>Object</code>，给定策略取代或被添加到该对象以前的策略

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.omg.CORBA.portable.ObjectImpl._is_local()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查此 <code>ObjectImpl</code> 对象是否是由本地 servant 实现的。如果是，则可以使用本地调用 API 的 ObjectImpl 对象。 

@return 如果此对象由本地 servant 实现，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.portable.ServantObject org.omg.CORBA.portable.ObjectImpl._servant_preinvoke(String operation, java.lang.Class expectedType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对本地 servant 的 Java 引用，该引用应该被用来发送对指定方法的请求。如果此 <code>ObjectImpl</code> 对象是本地 stub，则在发送请求前它将调用 <code>_servant_preinvoke</code> 方法，以获取要使用的 <code>ServantObject</code> 实例。
 <P>
如果返回 <code>ServantObject</code> 对象，则其 <code>servant</code> 字段已经被设置为所期望类型的对象（注意：该对象可以是也可以不是实际的 servant 实例）。本地 stub 可以将 servant 字段强制转换为所需类型，然后直接调用操作。<code>ServantRequest</code> 对象只对一次调用有效，不能用于多次调用。

@param operation 一个包含要调用的方法名称的 <code>String</code>。此名称应该对应于将被编码入 GIOP 请求的方法名称。

@param expectedType 一个 <code>Class</code> 对象，表示返回的 servant 的预期类型。此预期类型是与 stub 接口的操作类有关的 <code>Class</code> 对象。例如，接口 <code>Foo</code> 的 stub 将传递用于 <code>FooOperations</code> 接口的 <code>Class</code> 对象。

@return (1) 一个 <code>ServantObject</code> 对象，可能是也可能不是实际 servant 实例，或者返回 (2) <code>null</code>，如果 (a) servant 不是本地的或 (b)由于 POA ServantManager 发出 ForwardRequest 使 servant 不再是本地的
@throws org.omg.CORBA.BAD_PARAM 如果 servant 不是预期类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.portable.ObjectImpl._servant_postinvoke(ServantObject servant)
<!-- END KEY -->
<!-- BEGIN DATA -->
本地 stub 在发起了对本地 servant（通过对 <code>_servant_preinvoke</code> 方法的调用得到）的一次操作后，再调用此方法。如果 <code>_servant_preinvoke</code> 方法返回非 null 值，则必须调用 <code>_servant_postinvoke</code> 方法，即使 servant 调用的方法抛出异常。因此，对 <code>_servant_postinvoke</code> 方法的调用应该置于 Java <code>finally</code> 子句中。

@param servant <code>_servant_preinvoke</code> 方法返回的 <code>ServantObject</code> 实例

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.portable.OutputStream org.omg.CORBA.portable.ObjectImpl._request(String operation, boolean responseExpected)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>OutputStream</code> 对象，该对象用于编组给定方法的参数。此方法由 stub 调用，必须指示是否希望响应，即调用是否是单向的。

@param operation         给出方法名称的 String。
@param responseExpected  一个 boolean 值，如果请求不是单向的（即希望获得响应），则该参数为 <code>true</code>
@return 用来分派请求的 <code>OutputStream</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.portable.InputStream org.omg.CORBA.portable.ObjectImpl._invoke(OutputStream output) throws org.omg.CORBA.portable.ApplicationException, org.omg.CORBA.portable.RemarshalException
<!-- END KEY -->
<!-- BEGIN DATA -->
调用某个操作并返回用来读取响应的 <code>InputStream</code> 对象。stub 提供以前调用 <code>_request</code> 方法所返回的 <code>OutputStream</code> 对象。以前调用时被指定为 <code>_request</code> 参数的方法就是此方法要调用的方法。
 <P>
如果发生异常，则 <code>_invoke</code> 方法将抛出 <code>ApplicationException</code> 对象，该对象包含一个 InputStream，可从中解组用户异常状态。

@param output  用来分派请求的 OutputStream 对象
@return 一个 <code>InputStream</code> 对象，包含已调用方法的编组响应
@throws ApplicationException 如果该调用遇到应用程序定义的异常
@throws RemarshalException 如果该调用导致重新编组错误
@see #_request

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.portable.ObjectImpl._releaseReply(InputStream input)
<!-- END KEY -->
<!-- BEGIN DATA -->
调用 <code>_invoke</code> 方法并且解组完成后，将给定的应答流释放回 ORB。对于 stub，调用此方法是可选的。
 
@param input  <code>_invoke</code> 方法或 <code>ApplicationException.getInputStream</code> 方法返回的 <code>InputStream</code> 对象；可以为 <code>null</code>，在这种情况下此方法不执行任何操作
@see #_invoke

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.omg.CORBA.portable.ObjectImpl.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此 <code>ObjectImpl</code> 对象的 <code>String</code> 对象。

@return 此对象的 <code>String</code> 表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
public int org.omg.CORBA.portable.ObjectImpl.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>ObjectImpl</code> 对象的哈希码。

@return 此对象的哈希代码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.omg.CORBA.portable.ObjectImpl.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较此 <code>ObjectImpl</code> 对象与给定对象是否相等。  

@param obj 要与此对象进行比较的对象
@return 如果两个对象相等，则返回 <code>true</code>；否则返回 <code>false</code>

<!-- END DATA -->
