<!-- BEGIN KEY -->
org.omg.CORBA
<!-- END KEY -->
<!-- BEGIN DATA -->

提供 OMG CORBA API 到 Java<SUP><FONT 
SIZE=-2>TM</FONT></SUP> 编程语言的映射，包括 <TT>ORB</TT> 类，如果已实现该类，则程序员可以使用此类作为全功能对象请求代理（Object Request Broker，ORB）。

<P>有关 Java[TM] Platform，Standard Edition 6 遵守的受支持官方 CORBA 规范部分的明确列表，请参阅 <A 
HREF="doc-files/compliance.html"><em>Official Specifications for CORBA support in Java[TM] SE 6</em></A>。


<H1>常规信息</H1>
这一节中的信息与编译接口定义语言（Interface Definition Language，IDL）文件以及使用 ORB 编写客户端和服务器的用户有关。

<P>这一节中描述的类和接口可分为四组：<tt>ORB</tt> 类、异常、<tt>Helper</tt> 类和 <tt>Holder</tt> 类。

<H2>
<tt>ORB</tt> 类</H2>

<P>ORB 处理（或代理）客户端与服务器上的方法实现之间的方法调用。因为客户端和服务器可能位于网络的任何地方，调用和实现可能以不同的编程语言编写，所以 ORB 在后台做了很多工作来实现此通信。

<P>ORB 所做的大部分工作对于用户而言是完全透明的，<TT>CORBA</TT> 包的主要部分由 ORB 在后台使用的类组成。因此大部分程序员将只直接使用此包的一小部分。实际上，大多数程序员仅使用 <TT>ORB</TT> 类和一些异常中的少数方法，偶尔也使用 holder 类中的少数方法。 
<H3>
<TT>ORB</TT> 方法</H3>

<P>在应用程序进入 CORBA 环境之前，它必须先执行以下操作： 
<P>
<UL>
<LI>被初始化为 ORB 环境，也可能是对象适配器 (POA) 环境。
<LI>获取对 ORB 对象的引用（在以后的 ORB 操作中使用），也可能获取对其他对象（包括根 POA 或一些 Object Adapter 对象）的引用。 
</UL>
<P>提供以下操作来初始化应用程序及获得适当的对象引用：
 <P>
 <UL>
<LI>这一节中将讨论的可访问 ORB 的操作。
<LI>可访问 Object Adapter、Interface Repository、Naming Service 和其他 Object Service 的操作。这些操作将在<a href="#adv"><em>其他类</em></a> 中描述。
 </UL>
 <P>
当应用程序需要 CORBA 环境时，它需要一个机制来获取 ORB 对象引用，也可能是 OA 对象引用（比如根 POA）。此机制有两个用途。第一个用途是将应用程序初始化为 ORB 和 OA 环境。第二个用途是将 ORB 对象引用和 OA 对象引用返回给应用程序，以便在以后的 ORB 和 OA 操作中使用。 

<P>若要获取 ORB 对象引用，应用程序应调用 <tt>ORB.init</tt> 操作。该调用的参数可能由 ORB 的标识符和 arg_list 组成，前者是对象引用所需要的，后者用于允许将特定于环境的数据传递给调用。 

<P>以下 <TT>ORB</TT> 方法可以访问 ORB：
<UL>
<LI>
<TT><bold>init</bold>()</TT> 

<LI>
<TT><bold>init</bold>(String [] args, Properties props)</TT>

<LI>
<TT><bold>init</bold>(Applet app, Properties props)</TT>
</UL>

<P>使用不带参数的 <tt>init()</tt> 方法可以实例化一个单件 ORB，它只能为创建 typecode 提供 <tt>any</tt>，在通过 <tt>idlj</tt> 在 Helper 类中生成的代码中需要这些 any。

<P>应用程序需要一个用来获得其初始对象引用的可移植方法。根 POA、POA Current、Interface Repository 和各种 Object Service 实例都需要引用。应用程序所需的功能类似于 Naming Service 提供的那些功能。但是，OMG 不应该要求 Naming Service 可用于所有应用程序以便能够以可移植方式初始化。因此，这一节中展示的操作提供了一个简化的本地 Naming Service，应用程序可以使用它来获取其操作所必须的一小组已定义对象引用。因为只期望从此机制中获得一小组定义良好的对象，所以命名上下文可能被简化为单一级别的名称空间。这种简化的结果是只定义两个操作来获得所需的功能。
  
<P>初始引用是通过 ORB 对象接口中提供的两个操作获得的，该接口中提供了一些设施来列出并解析初始对象引用。这些工具包括：
<UL>
<LI>
<TT><bold>resolve_initial_references</bold>(String name)</TT>
<LI>
<TT><bold>list_initial_services</bold>()</TT>
<LI>
<TT><bold>register_initial_reference</bold>(String id, org.omg.CORBA.Object obj)</TT>
</UL>

<P>使用其中一些方法的示例见 <A 
HREF="{@docRoot}/../technotes/guides/idl/GShome.html"><em>Java IDL 入门</em></A>。

<H2>
异常</H2>
Java IDL 中的异常类似于用 Java 编程语言编写的 any 代码中的那些异常。如果定义某一方法抛出异常，则使用该方法的 any 代码必须有一个 <TT>try</TT>/<TT>catch</TT> 块，并在该异常抛出时进行处理。

<P>关于 <A 
HREF="{@docRoot}/../technotes/guides/idl/jidlExceptions.html"><em>Java IDL 异常</em></A> 的文档中有更多信息，这些文档解释了系统异常和用户定义异常之间的不同。

<P>以下是包 <TT>org.omg.CORBA</TT> 中定义的系统异常的列表（这些异常是通过 <TT><a href="SystemException.html">org.omg.CORBA.SystemException</a></TT> 从 <TT>java.lang.RuntimeException</TT> 中继承的未经检查异常）：
<PRE><code>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BAD_CONTEXT
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BAD_INV_ORDER
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BAD_OPERATION
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BAD_PARAM
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BAD_TYPECODE
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COMM_FAILURE
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DATA_CONVERSION
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FREE_MEM
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IMP_LIMIT
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; INITIALIZE
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; INTERNAL
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; INTF_REPOS
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; INVALID_TRANSACTION
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; INV_FLAG
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; INV_IDENT
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; INV_OBJREF
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; INV_POLICY
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MARSHAL
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#NO_IMPLEMENT">NO_IMPLEMENT</a>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NO_MEMORY
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NO_PERMISSION
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NO_RESOURCES
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NO_RESPONSE
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OBJECT_NOT_EXIST
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OBJ_ADAPTER
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PERSIST_STORE
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TRANSACTION_REQUIRED
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TRANSACTION_ROLLEDBACK
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TRANSIENT
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UNKNOWN
</code></PRE>
<P>
以下是包 <TT>org.omg.CORBA</TT> 中定义的用户定义异常的列表。
<PRE><code>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bounds
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UnknownUserException
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WrongTransaction&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PolicyError
</code></PRE>

<H2>子包</H2>
<TT>CORBA</TT> 包中的一些包用 &quot;Package&quot; 作为其名称的一部分。这些包通常非常小，因为这些包要做的所有事情就是提供异常或类，以便 <TT>CORBA</TT> 包中的接口和类使用。

<P>例如，包 <TT><a href="TypeCodePackage/package-summary.html">org.omg.CORBA.TypeCodePackage</a></TT> 包含两个由 <TT>TypeCode</TT> 类中的方法抛出的异常。这些异常包括：
<UL>
<LI>
<TT>BadKind</TT>

<LI>
<TT>Bounds</TT>
</UL>
包 <TT><a href="ORBPackage/package-summary.html">org.omg.CORBA.ORBPackage</a></TT> 中包含以下两个异常：
<UL>
<LI>
<TT>InvalidName</TT>

<LI>
<TT>InconsistentTypeCode</TT>
</UL>

<P>另一个 <tt>CORBA</tt> 的子包是 <tt><a href="portable/package-summary.html">portable</a></tt> 包。该包提供了一组 ORB API，这些 API 使得某个供应商的 IDL 编译器所生成的代码能够在另一个供应商的 ORB 上运行。 



<H2>
Holder 类</H2>
 

<P>支持 out 和 inout 参数传递模式需要使用附加 <em><a href="doc-files/generatedfiles.html#holder">holder 类</a></em>。因为 Java 编程语言不支持 out 或 inout 参数，holder 类便作为一种可修改的传递参数方式出现。为了支持可移植 stub 和 skeleton，holder 类还实现了 <tt><a href="portable/Streamable.html">org.omg.CORBA.portable.Streamable</a></tt> 接口。
 
<P>Holder 类是通过将 &quot;Holder&quot; 追加到类型名称中来命名的。类型名称是指它在 Java 编程语言中的名称。例如，在 Java 编程语言中名为 <tt>Account</tt> 的接口所对应的 holder 类应该命名为 <tt>AccountHolder</tt>。


<P>Holder 类可用于 <tt>org.omg.CORBA</tt> 包中的所有基本 IDL 数据类型。因此，对于 <tt>LongHolder</tt>、<tt>ShortHolder</tt>、<tt>FloatHolder</tt> 等，都已经定义了相应的类。对于所有已命名用户定义的 IDL 类型（<tt>typedef</tt> 定义的除外），同样会生成一些类。（注意，在这种情况下，用户定义类型包括那些在 OMG 规范中定义的类型（如用于 Interface Repository 的那些类型）和其他 OMG 服务。） 


<P>每个 holder 类都包含：
<P>
<UL>
<LI>实例中的构造方法
<LI>默认构造方法
<LI>公共实例成员，类型化值的 <tt>value</tt> 
<LI>用来读取输入流并将内容分配给类型的 <tt>value</tt> 字段的方法
<LI>用来将 <tt>value</tt> 字段的值写入输出流的方法
<LI>用来获取类型的 typecode 的方法
</UL>

<P>对于 Java 语言定义的类型，默认构造方法将 value 字段设置为以下默认值： 
<P>
<UL>
<LI><tt>false</tt>，用于 boolean 值
<LI><tt>0</tt>，用于 numeric 和 char 类型
<LI><tt>null</tt>，用于字符串和对象引用
</UL>



<P>
举例来说，如果用 OMG IDL 定义的 <code>Account</code> 接口被映射到 Java 编程语言，则将生成以下 holder 类：
<PRE>
public final class AccountHolder implements 
    org.omg.CORBA.portable.Streamable
{
  // field that holds an Account object
  public Account value = null;

  // default constructor
  public AccountHolder ()
  {
  }
  
  // creates a new AccountHolder from initialValue
  public AccountHolder (Account initialValue)
  {
    value = initialValue;
  }
  
  // reads the contents of i and assigns the contents to value
  public void _read (org.omg.CORBA.portable.InputStream i)
  {
    value = AccountHelper.read (i);
  }

  // writes value to o
  public void _write (org.omg.CORBA.portable.OutputStream o)
  {
    AccountHelper.write (o, value);
  }
 
  // returns the typecode for Account
  public org.omg.CORBA.TypeCode _type ()
  {
    return AccountHelper.type ();
  }

}
</PRE>

<P>关于 Holder 类的更多信息，请参阅 <a href="http://cgi.omg.org/cgi-bin/doc?ptc/00-01-08"><em>OMG IDL to Java Language Mapping</em></a> 中的第 1.4 章 <em>Mapping for Basic Types</em>。<TT>org.omg.CORBA</TT> 包中定义的 Holder 类有：
<PRE>
&nbsp;&nbsp;&nbsp;&nbsp; <TT>AnyHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>AnySeqHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>BooleanHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>BooleanSeqHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>ByteHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>CharHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>CharSeqHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>CurrentHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>DoubleHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>DoubleSeqHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>FixedHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>FloatHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>FloatSeqHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>IntHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>LongHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>LongLongSeqHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>LongSeqHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>ObjectHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>OctetSeqHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>ParameterModeHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>PolicyErrorHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>PolicyListHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>PrincipalHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>ServiceInformationHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>ShortHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>ShortSeqHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>StringHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>StringSeqHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>TypeCodeHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>ULongLongSeqHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>ULongSeqHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>UnknownUserExceptionHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>UShortSeqHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>ValueBaseHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>WCharSeqHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>WrongTransactionHolder
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>WStringSeqHolder</TT>

</PRE>

<h2>Helper 类 </h2>
<P>Helper 文件提供了一些操作类型所需的静态方法。这些操作包括：
 <P>
 <UL>
<LI>对类型进行的 <tt>Any</tt> 插入和析取操作
<LI>获取存储库 id
<LI>获取 typecode
<LI>在流中读取和写入类型
<LI>实现 <code>ValueHelper</code> 接口（如果它是用户定义的 value 类型）
 </UL> 

<P>用于映射的 IDL 接口或抽象接口的 helper 类还包括收缩操作。静态收缩方法允许将 <tt>org.omg.CORBA.Object</tt> 收缩成更具体的某种类型的对象引用。如果因为该对象引用不支持所请求的类型而导致收缩失败，则将抛出 IDL 异常 <tt>CORBA.BAD_PARAM</tt>。引发不同的系统异常则指示存在其他种类的错误。尝试收缩 <tt>null</tt> 将总是可以成功，并返回 <tt>null</tt> 值。通常，应用程序编程人员唯一使用的 helper 方法是 <code>narrow</code> 方法。其他方法通常在后台使用，它们对于程序员是透明的。

<P>Helper 类分为两大类，即<a href="#value">用于 value 类型的 helper</a> 和<a href="#basic">用于非 value 类型的 helper</a>。因为一种类别中的所有 helper 类提供的都是相同的方法，所以这里只提供每种 helper 类的一般性解释。

<P>
在将 OMG IDL 映射到 Java 编程语言时，为每个用户定义的类型生成一个 &quot;helper&quot; 类。生成的这个类将具有用户定义类型的名称以及追加的 <code>Helper</code> 后缀。例如，如果接口 <code>Account</code> 是用 OMG IDL 定义的，则 <code>idlj</code> 编译器将自动生成一个名为 <code>AccountHelper</code> 的类。<code>AccountHelper</code> 类将包含操作类型实例所需的静态方法，这里的实例指 <code>Account</code> 对象。 


<a name="narrow"></a>
<h3><code>narrow</code> 方法</h3>
当某一对象是某个方法的返回值时，该对象是以常规对象的形式返回的，它可以是 <code>org.omg.CORBA.Object</code> 对象或者 <code>java.lang.Object</code> 对象。在可以对此对象执行操作之前，必须将该对象强制转换为其更具体的类型。例如，<code>Account</code> 对象将作为一般对象返回，并且必须收缩为 <code>Account</code> 对象，以便可以对该对象调用 <code>Account</code> 方法。
<P>
<code>narrow</code> 方法有两种形式，一种形式带有一个 <code>org.omg.CORBA.Object</code> 对象，另一种形式带有一个 <code>java.lang.Object</code> 对象。根据该接口是否是抽象的来确定其 helper 类将提供哪一种 <code>narrow</code> 方法。用于非抽象接口的 helper 类将有一个带 CORBA 对象的 <code>narrow</code> 方法，而用于抽象接口的 <code>narrow</code> 方法将带有 Java 编程语言中的一个对象。对于至少有一个抽象基本接口的非抽象接口，helper 类将同时提供两种形式的 <code>narrow</code> 方法。
<P><A HREF="{@docRoot}/../technotes/guides/idl/jidlExample.html"><em>Hello World</em></A> 教程使用的 <tt>narrow</tt> 方法如下所示：
<P>
<PRE>
        // create and initialize the ORB
	ORB orb = ORB.init(args, null);

        // get the root naming context
        org.omg.CORBA.Object objRef = 
	    orb.resolve_initial_references(&quot;NameService&quot;);
        // Use NamingContextExt instead of NamingContext.This is 
        // part of latest Inter-Operable naming Service.  
        NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
 
        // resolve the Object Reference in Naming
String name = &quot;Hello&quot;;
        helloImpl = HelloHelper.narrow(ncRef.resolve_str(name));
</PRE>

<a name="basic"></a>
<h3>基本 Helper 类的示例</h3>
对于本例，基本 helper 类具有每个 helper 类都会提供的方法，如果用 OMG IDL 定义的类型映射到 Java 编程语言中的接口，则它还包含一个 <code>narrow</code> 方法。非 value 类型的类型将有一个为它们生成的基本 helper 类。
<P>
例如，假设接口 <code>Account</code> 不是一个 value 类型的 IDL 类型也不是一个抽象接口，并且没有抽象基本接口，则其 <code>AccountHelper</code> 类将如下所示：
<PRE>
abstract public class AccountHelper
{
  private static String  _id = &quot;IDL:Account:1.0&quot;;

  // inserts an Account object into an Any object
  public static void insert (org.omg.CORBA.Any a, Account that)
  {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  // extracts an Account object from an Any object
  public static Account extract (org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  
  private static org.omg.CORBA.TypeCode __typeCode = null;
  // gets the typecode for this type
  synchronized public static org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      __typeCode = org.omg.CORBA.ORB.init ().create_interface_tc (AccountHelper.id (), &quot;Account&quot;);
    }
    return __typeCode;
  }

  // gets the repository id for this type
  public static String id ()
  {
    return _id;
  }

  // reads an Account object from an input stream
  public static Account read (org.omg.CORBA.portable.InputStream istream)
  {
    return narrow (istream.read_Object (_AccountStub.class));
  }

  // writes an Account object to an outputstream
  public static void write (org.omg.CORBA.portable.OutputStream ostream, Account value)
  {
    ostream.write_Object ((org.omg.CORBA.Object) value);
  }

  // converts (narrows) an Object to an Account object
  public static Account narrow (org.omg.CORBA.Object obj)
  {
    if (obj == null)
return null;
    else if (obj instanceof Account)
      return (Account)obj;
    else if (!obj._is_a (id ()))
      throw new org.omg.CORBA.BAD_PARAM ();
    else
    {
      org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl)obj)._get_delegate ();
      _AccountStub stub = new _AccountStub ();
      stub._set_delegate(delegate);
      return stub;
    }
  }

}
</PRE>
<P>

<h3>value 类型 Helper 类</h3>
用于 value 类型的 helper 类所包含的方法是为非 value 类型方法生成的方法的不同呈现。主要的不同在于 value 类型可以作为某一方法的参数值或返回值传递，这意味着它们必须是可序列化的。
<P>假设 <code>Address</code> 是 value 类型，则 <code>AddressHelper</code> 类将如下所示：
<pre>
abstract public class AddressHelper
{
  private static String  _id = &quot;IDL:Address:1.0&quot;;

  // same as for non-value type
  public static void insert (org.omg.CORBA.Any a, Address that)
  {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  // same as for non-value type
  public static Address extract (org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  private static org.omg.CORBA.TypeCode __typeCode = null;
  private static boolean __active = false;
  
  // getting the typecode for the type
  synchronized public static org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      synchronized (org.omg.CORBA.TypeCode.class)
      {
        if (__typeCode == null)
        {
          if (__active)
          {
            return org.omg.CORBA.ORB.init().create_recursive_tc ( _id );
          }
__active = true;
          org.omg.CORBA.ValueMember[] _members0 = new org.omg.CORBA.ValueMember[0];
          org.omg.CORBA.TypeCode _tcOf_members0 = null;
          __typeCode = org.omg.CORBA.ORB.init ().create_value_tc (_id, &quot;Address&quot;, org.omg.CORBA.VM_NONE.value, null, _members0);
__active = false;
        }
      }
    }
    return __typeCode;
  }

  // same as for non-value type
  public static String id ()
  {
    return _id;
  }

  // reads a serializable instance of Address from the given input stream
  public static Address read (org.omg.CORBA.portable.InputStream istream)
  {
    return (Address)((org.omg.CORBA_2_3.portable.InputStream) istream).read_value (id ());
  }

  // writes a serializable instance of Address to the given output stream
  public static void write (org.omg.CORBA.portable.OutputStream ostream, Address value)
  {
    ((org.omg.CORBA_2_3.portable.OutputStream) ostream).write_value (value, id ());
  }


}
</pre>

<P><TT>org.omg.CORBA</TT> 包中定义的 Helper 类有：
<PRE><code>
&nbsp;&nbsp;&nbsp;&nbsp; <TT>AnySeqHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>BooleanSeqHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>CharSeqHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>CompletionStatusHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>CurrentHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>DefinitionKindHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>DoubleSeqHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>FieldNameHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>FloatSeqHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>IdentifierHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>IDLTypeHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>LongLongSeqHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>LongSeqHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>NameValuePairHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>ObjectHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>OctetSeqHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>ParameterModeHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>PolicyErrorCodeHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>PolicyErrorHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>PolicyHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>PolicyListHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>PolicyTypeHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>RepositoryIdHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>ServiceDetailHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>ServiceInformationHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>SetOverrideTypeHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>ShortSeqHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>StringSeqHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>StringValueHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>StructMemberHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>ULongLongSeqHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>ULongSeqHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>UnionMemberHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>UnknownUserExceptionHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>UShortSeqHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>ValueBaseHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>ValueMemberHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>VersionSpecHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>VisibilityHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>WCharSeqHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>WrongTransactionHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>WStringSeqHelper
</TT>&nbsp;&nbsp;&nbsp;&nbsp; <TT>WStringValueHelper</TT>

</code></PRE>
<a name="adv"></a>
<H1>
其他类</H1>
<TT>CORBA</TT> 包中的其他类和接口都是在后台使用的，它们可分为四组。其中三组都以某种方式用于请求，第四组与 Interface Repository 有关，单独列为一类。
<H2>
ORB 创建的类</H2>
第一组中包含由 ORB 创建的类和请求操作中使用的信息。 
<UL>
<LI>
<TT>TCKind</TT> -- 指示 <TT>TypeCode</TT> 对象的种类（数据类型）

<LI>
<TT>TypeCode</TT> -- 指示数据类型，可能包括其他信息

<LI>
<TT>Any</TT> -- 包含一个值及其 typecode

<LI>
<TT>NamedValue</TT> -- 包含一个名称、一个 <TT>Any</TT> 对象和一个参数模式标志。<TT>NamedValue</TT> 对象包含关于方法参数、方法返回值或一个上下文的信息。

<LI>
<TT>ContextList</TT> -- 一个字符串列表，这些字符串描述需要被解析并随调用发送的上下文

<LI>
<TT>ExceptionList</TT> -- 一个 <TT>TypeCode</TT> 列表，这些 TypeCode 用于可能由某一方法抛出的异常

<LI>
<TT>Environment</TT> -- 方法调用期间抛出的异常的容器

<LI>
<TT>Context</TT> -- 一个 <TT>NamedValue</TT> 对象列表，这些对象用来将辅助信息从客户端传递到服务器

<LI>
<TT>NVList</TT> -- 一个 <TT>NamedValue</TT> 对象列表，这些对象用于传递参数或获取结果
</UL>

<H2>
处理请求的类</H2>
第二组类用于处理请求：
<UL>
<LI>
<TT>Object</TT> -- 所有 CORBA 对象引用的基类

<LI>
<TT>Request</TT> -- DII 中的主要类，它包含各种方法，有些用来给请求添加参数，有些用来访问有关被调用方法的信息（方法的名称、参数、抛出的异常等等），还有些用来对请求执行调用

<LI>
<TT>DynamicImplementation</TT> -- 用于使用 DSI 的服务器实现的基类。它包含方法 <TT>invoke</TT>，此类的一个实现可使用该方法确定 <TT>ServerRequest</TT> 对象的状态并设置其结果或异常

<LI>
<TT>ServerRequest</TT> -- 捕获针对动态框架接口 (Dynamic Skeleton Interface) 的请求的显式状态
</UL>

<H2>
用作常量的接口</H2>
第三组中包括用作常量的接口。IDL 到 Java 的映射强行将 IDL 枚举映射到 Java 类，并将枚举值表示为该类中的公共静态最终字段（如 DefinitionKind）。另一方面，IDL 接口外部定义的 IDL 常量被映射到 Java 接口（每个常量一个接口）。

<P>这就是为什么 <TT>org.omg.CORBA</TT> 包中的几个接口包含一个 <TT>value</TT> 字段的原因，该字段是一个 <TT>short</TT> 值。此字段是一个用于错误代码或值修饰符之类的常量。例如，<TT>BAD_POLICY</TT> 接口的 <TT>value</TT> 字段可能是抛出 <TT>PolicyError</TT> 异常的原因之一。要指定此错误代码，应使用 <TT>BAD_POLICY.value</TT>。

<P><TT>PolicyError</TT> 异常使用以下接口的 <TT>value</TT> 字段作为其可能的错误代码。
<UL>
<LI>
<TT>BAD_POLICY</TT>

<LI>
<TT>BAD_POLICY_TYPE</TT>

<LI>
<TT>BAD_POLICY_VALUE</TT>

<LI>
<TT>UNSUPPORTED_POLICY</TT>

<LI>
<TT>UNSUPPORTED_POLICY_VALUE</TT>
</UL>
<TT>TypeCode.type_modifier</TT> 方法返回以下某一接口的 <TT>value</TT> 字段。这些接口名称中的 <TT>VM</TT> 表示&ldquo;值修饰符&rdquo;。
<UL>
<LI>
<TT>VM_NONE</TT>

<LI>
<TT>VM_ABSTRACT</TT>

<LI>
<TT>VM_CUSTOM</TT>

<LI>
<TT>VM_TRUNCATABLE</TT>
</UL>
以下常量由 <code>ValueMember</code> 对象的访问方法返回，用于指示 <code>ValueMember</code> 对象的可见性。
<UL>
<LI>
<TT>PRIVATE_MEMBER</TT>

<LI>
<TT>PUBLIC_MEMBER</TT>
</UL>
以下接口中定义了 <TT>NamedValue</TT> 对象中使用的标志或用作方法参数的标志：
<UL>
<LI>
<TT>ARG_IN</TT>

<LI>
<TT>ARG_INOUT</TT>

<LI>
<TT>ARG_OUT</TT>

<LI>
<TT>CTX_RESTRICT_SCOPE</TT>
</UL>

<H2>
Interface Repository 接口和类</H2>
第四组中包含 Interface Repository 接口和类，它们由 <TT>idlj</TT> 编译器从 OMG IDL 接口 <TT>ir.idl</TT> 中生成。Interface Repository 的用途是标识存储在其中的接口，以便 ORB 可以访问它们。每个模块、类型、接口、属性、操作、参数、异常、常量等都完全由 Interface Repository API 描述。

<P>ORB 不需要接口存储库，Java IDL 也不包含接口存储库。尽管此版本不包括接口存储库的实现，但它包含以下 IR 类和接口，以创建 typecodes（参见 org.omg.CORBA.ORB 接口中的 create_value_tc、create_struct_tc、create_union_tc 和 create_exception_tc 方法）： <BR>&amp;nbs
<UL>
<LI>
IRObject

<LI>
IDLType

<LI>
DefinitionKind

<LI>
StructMember

<LI>
UnionMember

<LI>
ValueMember
</UL>
<!-- End Page Data -->
<HR>
<H1>
相关文档</H1>
有关概述、指南和教程，请参阅：
<UL>
<LI>
<A HREF="{@docRoot}/../technotes/guides/idl/index.html">Java&#xA0;IDL 主页</A>
</UL>



<P><A NAME="unimpl"></A>
<H1>
Java IDL 中没有实现的 CORBA 特性</H1>

<P><TT>org.omg</TT> 子包中包含的一些 API 是为了与当前 OMG CORBA 规范保持一致而提供的，但 Sun 的 JDK<SUP><FONT SIZE=-2>TM</FONT></SUP> 版本中没有实现它们。这使得其他 JDK 被许可人可以在标准扩展和产品中提供此 API 的实现。

<P><A NAME="NO_IMPLEMENT"></A>
<h2>抛出 NO_IMPLEMENT 的特性</h2>

<P><TT>org.omg</TT> 子包中包含的一些 API 会因为各种原因抛出 <tt>NO_IMPLEMENT</tt> 异常。其中一些原因是：
<P>
	<UL>
	<LI>在某些情况下，完成实现根据规范指示这些 API 应抛出 <tt>NO_IMPLEMENT</tt>，例如 <tt>LocalObject</tt>。
	<P>
	<LI>在多数情况下，抛出 <tt>NO_IMPLEMENT</tt> 的方法实际上是在 ORB 代码中其他某个地方的子类中实现的，例如 <tt>ORB.java</tt> 中的方法。
	<P>
	<LI>在某些情况下，API 确实尚未实现，例如 <tt>_get_interface_def()</tt> 和 <tt>_get_interface</tt>。
	</UL>



<H2>
此版本中未实现的特性和 API 的总结：</H2>

<UL>
<LI>
Interface Repository。Java IDL 的常规操作不需要 Interface Repository。

<LI>
Java IDL 不支持 <TT>long double</TT>。  


<LI>
策略 (<TT><a href="Policy.html">org.omg.CORBA.Policy</a></TT>) 及获取这些策略的方法未实现。

<LI>
域管理器 (<TT><a href="DomainManager.html">org.omg.CORBA.DomainManager</a></TT>) 及获取这些域管理器的方法未实现。

<LI>
服务信息 <TT><a href="ServiceInformation.html">org.omg.CORBA.ServiceInformation</a></TT> 和 ORB 方法 <TT>public boolean get_service_information(short service_type, ServiceInformationHolder service_info)</TT> 未实现。

<LI>支持单线程的 ORB 方法（<tt>perform_work</tt> 和 <tt>work_pending</tt>）未实现。

<LI>IDL 上下文。
</UL>

<HR>
<H2>
<TT>org.omg.CORBA</TT> 包中未实现特性的详细列表</H2>


<H3>
<TT>org.omg.CORBA</TT> 包中未实现的方法：</H3>

<UL>
<LI>
<TT>ORB</TT>

<UL>
<LI>
<TT>public org.omg.CORBA.Policy create_policy(int type, org.omg.CORBA.Any val)</TT>


<LI>
<TT>public void perform_work()</TT>

<LI>
<TT>public boolean work_pending()</TT>

<LI>
<TT>public org.omg.CORBA.Current get_current()</TT>

<LI>
<TT>create_operation_list</TT>

<LI>
<TT>get_default_context</TT>

<LI>
<TT>get_service_information</TT>

<LI>
废弃 <TT>DynAny</TT>（推荐使用 <tt>DynamicAny</tt> 包替代）


</UL>



</UL>
@since JDK1.2
@serial exclude

<!-- END DATA -->
