<!-- BEGIN KEY -->
public abstract class org.omg.CORBA.TypeCode extends java.lang.Object implements org.omg.CORBA.portable.IDLEntity
<!-- END KEY -->
<!-- BEGIN DATA -->
用于有关特定 CORBA 数据类型的信息的容器。
<P>
<code>TypeCode</code> 对象的作用包括：
 <UL>
<LI>在动态调用接口 (Dynamic Invocation Interface) 中，用于指示实际参数的类型或返回值的类型。<BR> <code>NamedValue</code> 对象用于表示参数和返回值。其中有一个组件是 <code>Any</code> 对象，该 Any 对象又有一个 <code>TypeCode</code> 对象作为其组件之一。
<LI>由接口存储库 (Interface Repository) 用来表示作为许多 OMG IDL 声明一部分的类型说明。
 </UL>
 <P>
<code>TypeCode</code> 对象的表示形式是不透明的，从理论上说，<code>TypeCode</code> 对象由以下内容组成：
 <UL>
<LI>一个 <code>kind</code> 字段，它被设置为 <code>TCKind</code> 类的一个实例
<LI>0 个或多个适用于特定种类的附加字段。例如，描述 OMG IDL 类型 <code>1ong</code> 的 <code>TypeCode</code> 对象所具有的种类为 <code>TCKind.tk_long</code>，没有附加字段。描述 OMG IDL 类型 <code>sequence&lt;boolean, 10&gt;</code> 的 <code>TypeCode</code> 具有一个值为 <code>TCKind.tk_sequence</code> 的 <code>kind</code> 字段，以及值为 <code>boolean</code> 和 <code>10</code>（用于序列元素的类型和序列的长度）的字段。 <p>
 </UL>

可以通过以下各种方式获得 <code>TypeCode</code> 对象：
 <OL>
<LI>通过调用 <code>Any.insert_X</code> 方法，其中 X 为基本 IDL 类型。此方法为类型 X 创建 <code>TypeCode</code> 对象，并将其分配给 <code>Any</code> 对象的 <code>type</code> 字段。
<LI>通过调用 ORB 类中的方法
<P>例如，以下代码为 <code>string</code>（最长为 30 个字符）创建 <code>TypeCode</code>：
 <PRE>
   org.omg.CORBA.TypeCode tcString = orb.create_string_tc(30);
 </PRE>
<P> 以下代码为由五个 <code>string</code> 组成的 <code>array</code> 创建 <code>TypeCode</code> 对象：
 <PRE>
   org.omg.CORBA.TypeCode tcArray = orb.create_array_tc(
                                       5, TCKind.tk_string);
 </PRE>
<P> 以下代码为名为 &quot;Account&quot; 的接口创建 <code>TypeCode</code> 对象：
 <PRE>
   org.omg.CORBA.TypeCode tcInterface = orb.create_interface_tc(
                                                 &quot;thisId&quot;, &quot;Account&quot;);
 </PRE>
<LI>作为用于用户定义 IDL 类型的 <code>Holder</code> 类中 <code>_type</code> 方法的返回值。这些 <code>Holder</code> 类由 <code>idltojava</code> 编译器生成。
<LI>从 CORBA 接口存储库中获取
 </OL>
 <P>
<code>TypeCode</code> 类中的大多数方法都是访问方法，包含在 <code>TypeCode</code> 对象中的信息是特定于特定类型的。所以，必须只在所应用类型代码的种类上调用这些方法。如果访问方法试图从不适当类型代码种类中访问信息，则将抛出异常 <code>TypeCodePackage.BadKind</code>。例如，如果在 <code>union</code> 以外的其他种类上调用 <code>discriminator_type</code> 方法，则将抛出 <code>BadKind</code> 异常，因为只有 <code>union</code> 具有鉴别符 (discriminator)。以下列表展示将哪些方法应用到哪些类型代码种类：
 <P>
以下方法可以在所有 <code>TypeCode</code> 种类上调用：
 <UL>
<LI><code>equal</code>
 <LI><code>kind</code>
 </UL>
 <P>
以下方法可以在 <code>objref</code>、<code>struct</code>、<code>union</code>、<code>enum</code>、<code>alias</code>、<code>exception</code>、<code>value</code>、<code>value_box</code>、<code>native</code> 和 <code>abstract_interface</code> 上调用：
 <UL>
 <LI><code>id</code>
<LI><code>name</code>
 </UL>
 <P>
以下方法可以在 <code>struct</code>、<code>union</code>、<code>enum</code> 和 <code>exception</code> 上调用：
 <UL>
 <LI><code>member_count</code>
 <LI><code>member_name</code>
 </UL>
 <P>
以下方法可以在 <code>struct</code>、<code>union</code> 和 <code>exception</code> 上调用：
 <UL>
 <LI><code>member_type(int index)</code>
 </UL>
 <P>
以下方法可以在 <code>union</code> 上调用：
 <UL>
 <LI><code>member_label</code>
 <LI><code>discriminator_type</code>
 <LI><code>default_index</code>
 </UL>
 <P>
以下方法可以在 <code>string</code>、<code>sequence</code> 和 <code>array</code> 上调用：
 <UL>
 <LI><code>length</code>
 </UL>
 <P>
以下方法可以在 <code>alias</code>、<code>sequence</code>、<code>array</code> 和 <code>value_box</code> 上调用：
 <UL>
 <LI><code>content_type</code>
 </UL>
 <P>
与其他 CORBA 伪对象不同，<code>TypeCode</code> 对象可以作为一般 IDL 参数传递。 <p>
不推荐使用 <code>parameter</code> 和 <code>param_count</code> 方法，所以未映射。  <p>

Java IDL 扩展了 CORBA 规范，以允许能在 <code>struct</code> <code>TypeCode</code> 上执行的所有操作同样能在 <code>exception</code> <code>TypeCode</code> 上执行。 <p>

@version 1.25 09/09/97

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean org.omg.CORBA.TypeCode.equal(TypeCode tc)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>TypeCode</code> 对象与给定对象比较，测试它们是否相等。如果两个 <code>TypeCode</code> 对象可以互换并在对它们应用 <code>TypeCode</code> 操作时返回相同的结果，则这两个对象相等。


@param tc		要与之比较的 <code>TypeCode</code> 对象
@return		如果类型代码相同，则返回 <code>true</code>；否则返回 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean org.omg.CORBA.TypeCode.equivalent(TypeCode tc)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试给定 <code>TypeCode</code> 对象是否等于此 <code>TypeCode</code> 对象。
 <P>
 

@param tc 将与此 typecode 比较的 typecode

@return 如果给定 typecode 等于此 typecode，则返回 <code>true</code>；否则返回 <code>false</code>
 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.TypeCode org.omg.CORBA.TypeCode.get_compact_typecode()
<!-- END KEY -->
<!-- BEGIN DATA -->
剔除所有可选名称和成员名称字段，但使所有别名 typecode 保留原样。
@return 一个 <code>TypeCode</code> 对象，已剔除可选名称和成员名称字段，但别名 typecode 保持不变
@see <a href="package-summary.html#unimpl"><code>CORBA</code> 包中有关未实现特性的注释</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.TCKind org.omg.CORBA.TypeCode.kind()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>TypeCode</code> 对象的种类。代码类型的种类可确定哪些 <code>TypeCode</code> 方法可以合法地在该种类之上进行调用。
 <P>
<code>kind</code> 方法可以在任何 <code>TypeCode</code> 对象上调用。

@return	指示此 <code>TypeCode</code> 对象 <code>kind</code> 字段值的 <code>TCKind</code> 实例

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String org.omg.CORBA.TypeCode.id() throws org.omg.CORBA.TypeCodePackage.BadKind
<!-- END KEY -->
<!-- BEGIN DATA -->
检索全局标识此 <code>TypeCode</code> 对象类型的 RepositoryId。
 <P>
<code>id</code> 方法可以在 object reference、structure、union、enumeration、alias、exception、valuetype、boxed valuetype、native 和 abstract interface 类型代码上调用。object reference、exception、valuetype、boxed valuetype、native 和 abstract interface <code>TypeCode</code> 对象总是有一个 RepositoryId。从接口存储库 (Interface Repository) 或方法 <code>ORB.create_operation_list</code> 中获得的 structure、union、enumeration 和 alias <code>TypeCode</code> 对象也总是有一个 RepositoryId。如果没有 RepositoryId，则该方法可以返回一个空字符串。

@return		此 <code>TypeCode</code> 对象的 RepositoryId，如果没有 RepositoryID，则返回一个空字符串
@throws org.omg.CORBA.TypeCodePackage.BadKind 如果在不适当的 <code>TypeCode</code> 对象种类上调用该方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String org.omg.CORBA.TypeCode.name() throws org.omg.CORBA.TypeCodePackage.BadKind
<!-- END KEY -->
<!-- BEGIN DATA -->
在 <code>TypeCode</code> 对象的封闭作用域内检索标识此对象的简单名称。因为这些名称对于 Repository 而言是本地的，所以从 <code>TypeCode</code> 对象返回的名称可能与任何特定 Repository 中的类型名称不匹配，甚至可能是一个空字符串。
 <P>
<code>name</code> 方法可以在 object reference、structure、union、enumeration、alias、exception、valuetype、boxed valuetype、native 和 abstract interface <code>TypeCode</code> 对象上调用。

@return		标识此 <code>TypeCode</code> 对象的名称或一个空字符串
@throws org.omg.CORBA.TypeCodePackage.BadKind 如果在不适当的 <code>TypeCode</code> 对象种类上调用该方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int org.omg.CORBA.TypeCode.member_count() throws org.omg.CORBA.TypeCodePackage.BadKind
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>TypeCode</code> 对象所描述类型中的成员数。
 <P>
<code>member_count</code> 方法可以在 structure、union 和 enumeration <code>TypeCode</code> 对象上调用。Java IDL 扩展了 CORBA 规范，允许此方法在异常上进行操作。

@return		组成此 <code>TypeCode</code> 对象所描述类型的成员数

@throws org.omg.CORBA.TypeCodePackage.BadKind 如果在不适当的 <code>TypeCode</code> 对象种类上调用该方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String org.omg.CORBA.TypeCode.member_name(int index) throws org.omg.CORBA.TypeCodePackage.BadKind, org.omg.CORBA.TypeCodePackage.Bounds
<!-- END KEY -->
<!-- BEGIN DATA -->
检索给定索引标识的成员的简单名称。因为这些名称对于 Repository 而言是本地的，所以从 <code>TypeCode</code> 对象返回的名称可能与任何特定 Repository 中的成员名称不匹配，甚至可能是一个空字符串。
 <P>
可以在 structure、union 和 enumeration <code>TypeCode</code> 对象上调用 <code>member_name</code> 方法。Java IDL 扩展了 CORBA 规范，允许此方法在异常上进行操作。


@param index	请求名称的成员的索引
@return		由索引标识的成员的简单名称，或者空字符串
@throws org.omg.CORBA.TypeCodePackage.Bounds 如果索引大于等于组成该类型的成员数
@throws org.omg.CORBA.TypeCodePackage.BadKind 如果在不适当的 <code>TypeCode</code> 对象种类上调用该方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.TypeCode org.omg.CORBA.TypeCode.member_type(int index) throws org.omg.CORBA.TypeCodePackage.BadKind, org.omg.CORBA.TypeCodePackage.Bounds
<!-- END KEY -->
<!-- BEGIN DATA -->
检索一个 <code>TypeCode</code> 对象，它描述给定索引所标识成员的类型。
 <P>
<code>member_type</code> 方法可以在 structure 和 union <code>TypeCode</code> 对象上调用。Java IDL 扩展了 CORBA 规范，允许此方法在异常上进行操作。


@param index	开始请求类型信息的成员的索引
@return		描述给定索引处成员的 <code>TypeCode</code> 对象
@throws org.omg.CORBA.TypeCodePackage.Bounds 如果索引大于等于组成该类型的成员数
@throws org.omg.CORBA.TypeCodePackage.BadKind 如果在不适当的 <code>TypeCode</code> 对象种类上调用该方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.Any org.omg.CORBA.TypeCode.member_label(int index) throws org.omg.CORBA.TypeCodePackage.BadKind, org.omg.CORBA.TypeCodePackage.Bounds
<!-- END KEY -->
<!-- BEGIN DATA -->
检索给定索引标识的 union 成员的标签。对于默认成员，该标签是 0 八位组 (zero octet)。
<P>
<code>member_label</code> 方法可以在 union <code>TypeCode</code> 对象上调用。


@param index	请求标签的 union 成员的索引
@return		描述所请求 union 成员标签的 <code>Any</code> 对象；对于默认成员，返回 0 八位组
@throws org.omg.CORBA.TypeCodePackage.Bounds 如果索引大于等于组成 union 的成员数
@throws org.omg.CORBA.TypeCodePackage.BadKind 如果在非 union <code>TypeCode</code> 对象上调用该方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.TypeCode org.omg.CORBA.TypeCode.discriminator_type() throws org.omg.CORBA.TypeCodePackage.BadKind
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述所有非默认成员标签的 <code>TypeCode</code> 对象。<code>discriminator_type</code> 方法只能在 union <code>TypeCode</code> 对象上调用。

@return		描述非默认成员标签的 <code>TypeCode</code> 对象
@throws org.omg.CORBA.TypeCodePackage.BadKind 如果在非 union <code>TypeCode</code> 对象上调用该方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int org.omg.CORBA.TypeCode.default_index() throws org.omg.CORBA.TypeCodePackage.BadKind
<!-- END KEY -->
<!-- BEGIN DATA -->
返回默认成员的索引，如果没有默认成员，则返回 -1。
 <P>
<code>default_index</code> 方法只能在 union <code>TypeCode</code> 对象上调用。

@return		默认成员的索引；如果没有默认成员，则返回 -1
@throws org.omg.CORBA.TypeCodePackage.BadKind 如果在非 union <code>TypeCode</code> 对象上调用该方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int org.omg.CORBA.TypeCode.length() throws org.omg.CORBA.TypeCodePackage.BadKind
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>TypeCode</code> 对象所描述类型中的成员数。对于 string 和 sequence，该方法返回一个范围，0 指示无界的 string 或 sequence。对于 array，此方法返回其成员数。
 <P>
<code>length</code> 方法可以在 string、sequence 和 array <code>TypeCode</code> 对象上调用。

@return		string 和 sequence 的范围，或者 array 的成员数
@throws org.omg.CORBA.TypeCodePackage.BadKind 如果在不适当的 <code>TypeCode</code> 对象种类上调用该方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.TypeCode org.omg.CORBA.TypeCode.content_type() throws org.omg.CORBA.TypeCodePackage.BadKind
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此 <code>TypeCode</code> 对象所描述成员 IDL 类型的 <code>TypeCode</code> 对象。对于 sequence 和 array，该方法返回元素类型。对于 alias，该方法返回原始类型。注意，多维 array 用嵌套 <code>TypeCode</code> 对象表示，每个维度一个对象。对于 boxed valuetype，该方法返回 boxed 类型。
<P>
<code>content_type</code> 方法可以在 sequence、array、alias 和 boxed valuetype <code>TypeCode</code> 对象上调用。

@return	一个 <code>TypeCode</code> 对象，它对于 sequence 和 array 表示元素类型；对于 alias 表示原始类型；对于 boxed valuetype 表示 boxed 类型。
@throws org.omg.CORBA.TypeCodePackage.BadKind 如果在不适当的 <code>TypeCode</code> 对象种类上调用该方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract short org.omg.CORBA.TypeCode.fixed_digits() throws org.omg.CORBA.TypeCodePackage.BadKind
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>TypeCode</code> 对象所描述的 fixed 类型中数字的数量。例如，数字 3000.275d 的 typecode 是 <code>fixed&lt;7,3&gt;</code>，其中 7 是精确度，3 是标度。

@return 数字的总数
@throws org.omg.CORBA.TypeCodePackage.BadKind 如果在不适当的 <code>TypeCode</code> 对象种类上调用该方法


<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract short org.omg.CORBA.TypeCode.fixed_scale() throws org.omg.CORBA.TypeCodePackage.BadKind
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>TypeCode</code> 对象所描述的 fixed 类型的标度。正数指示小数点右边的数字个数。例如，数字 3000d 的 typecode 是 <code>fixed&lt;4,0&gt;</code>，其中第一个数字是精度，第二个数字是标度。出现负数也是有可能的，在小数点的左边添加 0 即可。在这种情况下，<code>fixed&lt;1,-3&gt;</code> 是数字 3000d 的 typecode。

@return 此 <code>TypeCode</code> 对象所描述 fixed 类型的标度
@throws org.omg.CORBA.TypeCodePackage.BadKind 如果在不适当的 <code>TypeCode</code> 对象种类上调用该方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract short org.omg.CORBA.TypeCode.member_visibility(int index) throws org.omg.CORBA.TypeCodePackage.BadKind, org.omg.CORBA.TypeCodePackage.Bounds
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个常量，它指示位于给定索引处的成员的可见性。

此操作只能在非 boxed value <code>TypeCode</code> 对象上调用。

@param index 指示 value 中索引的 <code>int</code> 值
@return <code>PRIVATE_MEMBER.value</code> 或 <code>PUBLIC_MEMBER.value</code>
@throws org.omg.CORBA.TypeCodePackage.BadKind 如果在非 value 类型 <code>TypeCode</code> 对象上调用此方法
@throws org.omg.CORBA.TypeCodePackage.Bounds 如果给定索引超出范围
@see <a href="package-summary.html#unimpl"><code>CORBA</code> 包中有关未实现特性的注释</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract short org.omg.CORBA.TypeCode.type_modifier() throws org.omg.CORBA.TypeCodePackage.BadKind
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个常量，它指示此 <code>TypeCode</code> 对象所描述的 value 类型的修饰符。返回的常量必须是以下常量之一：<code>VM_NONE.value</code>、<code>VM_ABSTRACT.value</code>、<code>VM_CUSTOM.value</code> 或 <code>VM_TRUNCATABLE.value</code>。

@return 描述此 <code>TypeCode</code> 对象所描述 value 类型的常量
@throws org.omg.CORBA.TypeCodePackage.BadKind 如果在非 value 类型 <code>TypeCode</code> 对象上调用此方法
@see <a href="package-summary.html#unimpl"><code>CORBA</code> 包中有关未实现特性的注释</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.TypeCode org.omg.CORBA.TypeCode.concrete_base_type() throws org.omg.CORBA.TypeCodePackage.BadKind
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>TypeCode</code> 对象，它描述此 <code>TypeCode</code> 对象所描述 value 类型的具体基本类型。如果没有具体基本类型，则返回 null。

@return 一个 <code>TypeCode</code> 对象，它描述此 <code>TypeCode</code> 对象所描述 value 类型的具体基本类型
@throws org.omg.CORBA.TypeCodePackage.BadKind 如果在非 boxed value 类型 <code>TypeCode</code> 对象上调用此方法
@see <a href="package-summary.html#unimpl"><code>CORBA</code> 包中有关未实现特性的注释</a>

<!-- END DATA -->
