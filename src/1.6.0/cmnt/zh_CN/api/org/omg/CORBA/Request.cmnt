<!-- BEGIN KEY -->
public abstract class org.omg.CORBA.Request extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
包含调用某一方法所必需的信息的对象。此类是 ORB 动态调用接口（Dynamic Invocation Interface，DII）的基石，它允许动态创建并调用请求。服务器无法判断使用客户端 stub 的客户端调用与使用 DII 的请求之间的不同。
 <P>
<code>Request</code> 对象由以下内容组成：
 <UL>
<LI>将被调用的操作的名称
<LI>包含用于该操作的参数的 <code>NVList</code>。<BR>该列表中的每一项都是一个 <code>NamedValue</code> 对象，它由三部分组成：
  <OL>
<LI>参数的名称
<LI>参数值（以 <code>Any</code> 对象的形式存在）
<LI>指示该参数是用于输入、输出，还是同时用于这二者的参数模式标志
  </OL>
 </UL>
 <P>
<code>Request</code> 对象还可以包含附加信息，这取决于原始 IDL 接口定义中对操作的定义。例如，在合适的地方可以包含一个 <code>NamedValue</code> 对象来保存返回值、异常、上下文、可能异常的列表和需要解析的上下文字符串列表。
 <P>
新的 <code>Request</code> 对象是使用 <code>Object</code> 类中的 <code>create_request</code> 方法之一创建的。换句话说，<code>create_request</code> 方法是在将被调用的对象上执行的。

@see org.omg.CORBA.NamedValue

@version 1.13 09/09/97

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.Object org.omg.CORBA.Request.target()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索目标对象引用。

@return			对象引用，指向将被调用的方法的对象实现

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String org.omg.CORBA.Request.operation()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索将被调用的方法的名称。

@return			将被调用的方法的名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.NVList org.omg.CORBA.Request.arguments()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索包含将被调用方法的参数的 <code>NVList</code> 对象。列表中的元素都是 <code>NamedValue</code> 对象，每个元素描述该方法的一个参数。

@return	包含该方法的参数的 <code>NVList</code> 对象


<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.NamedValue org.omg.CORBA.Request.result()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索包含该方法的返回值的 <code>NamedValue</code> 对象。

@return		包含该方法的结果的 <code>NamedValue</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.Environment org.omg.CORBA.Request.env()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索用于此请求的 <code>Environment</code> 对象。它包含被调用的方法所抛出的异常（在调用返回之后）。


@return	用于此请求的 <code>Environment</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.ExceptionList org.omg.CORBA.Request.exceptions()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索用于此请求的 <code>ExceptionList</code> 对象。此列表包含 <code>TypeCode</code> 对象，这些对象描述将被调用的方法可能抛出的异常。

@return	<code>ExceptionList</code> 对象，该对象描述将被调用的方法可能抛出的异常

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.ContextList org.omg.CORBA.Request.contexts()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索用于此请求的 <code>ContextList</code> 对象。此列表包含需要解析并随调用发送的上下文 <code>String</code>。


@return			其值需要解析并随调用发送的上下文字符串所组成的列表。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.Context org.omg.CORBA.Request.ctx()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索用于此请求的 <code>Context</code> 对象。这是一个属性列表，提供有关客户端、环境或此请求的情况的信息。

@return		<code>Context</code> 对象，将使用该对象来解析任何其值需要与调用一起发送的上下文字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.Request.ctx(Context c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此请求的 <code>Context</code> 对象设置为给定对象。

@param c		将用来解析上下文字符串的新 <code>Context</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.Any org.omg.CORBA.Request.add_in_arg()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个输入参数，并将它添加到此 <code>Request</code> 对象中。

@return		一个 <code>Any</code> 对象，它包含所添加输入参数的值和 typecode

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.Any org.omg.CORBA.Request.add_named_in_arg(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定名称创建一个输入参数，并将它添加到此 <code>Request</code> 对象中。

@param name		将添加的参数的名称
@return		一个 <code>Any</code> 对象，它包含所添加输入参数的值和 typecode

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.Any org.omg.CORBA.Request.add_inout_arg()
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个输入/输出参数添加到此 <code>Request</code> 对象中。

@return		一个 <code>Any</code> 对象，它包含所添加输入/输出参数的值和 typecode

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.Any org.omg.CORBA.Request.add_named_inout_arg(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
将具有给定名称的输入/输出参数添加到此 <code>Request</code> 对象中。

@param name		将添加的参数的名称
@return		一个 <code>Any</code> 对象，它包含所添加输入/输出参数的值和 typecode

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.Any org.omg.CORBA.Request.add_out_arg()
<!-- END KEY -->
<!-- BEGIN DATA -->
将输出参数添加到此 <code>Request</code> 对象中。

@return		一个 <code>Any</code> 对象，它包含所添加输出参数的值和 typecode

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.Any org.omg.CORBA.Request.add_named_out_arg(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
将具有给定名称的输出参数添加到此 <code>Request</code> 对象中。

@param name		将添加的参数的名称
@return		一个 <code>Any</code> 对象，它包含所添加输出参数的值和 typecode

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.Request.set_return_type(TypeCode tc)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置该方法返回值的 typecode。


@param tc			包含返回值的类型信息的 <code>TypeCode</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.Any org.omg.CORBA.Request.return_value()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含方法结果值的 <code>Any</code> 对象。

@return			一个 <code>Any</code> 对象，它包含返回值的值和 typecode

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.Request.invoke()
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 <code>Request</code> 对象中的信息进行同步调用。异常信息放置在 <code>Request</code> 对象的环境对象中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.Request.send_oneway()
<!-- END KEY -->
<!-- BEGIN DATA -->
在请求上执行单向调用。换句话说，不期望（或等待）应答。注意，该操作即使没有在 IDL 声明中声明也可以使用。不返回任何响应或异常信息。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.Request.send_deferred()
<!-- END KEY -->
<!-- BEGIN DATA -->
对请求进行异步调用。换句话说，在向用户返回前不等待响应。用户稍后可以使用 <code>poll_response</code> 和 <code>get_response</code> 方法获取该调用的结果和异常信息。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean org.omg.CORBA.Request.poll_response()
<!-- END KEY -->
<!-- BEGIN DATA -->
允许用户确定是否已接收到之前使用 <code>send_deferred</code> 方法所触发调用的响应。

@return		如果已经接收到方法响应，则返回 <code>true</code>；否则返回 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.Request.get_response() throws org.omg.CORBA.WrongTransaction
<!-- END KEY -->
<!-- BEGIN DATA -->
允许用户访问之前使用 <code>send_deferred</code> 方法所触发调用的响应。

@exception WrongTransaction  如果从不同于最初发送请求的事务处理域中调用 <code>get_response</code> 方法。有关详细信息，请参阅 OMG 事务服务 (Transaction Service) 规范。

<!-- END DATA -->
