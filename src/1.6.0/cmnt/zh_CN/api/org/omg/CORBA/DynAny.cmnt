<!-- BEGIN KEY -->
public interface org.omg.CORBA.DynAny extends org.omg.CORBA.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
支持动态解释（遍历）和构造 <tt>org.omg.CORBA.Any</tt> 值。<tt>DynAny</tt> 对象与一个数据值关联，该值对应于插入 <tt>Any</tt> 的值的副本。<tt>DynAny</tt> API 允许在运行时遍历与 Any 关联的数据值，并提取数据值的基本成分。
@deprecated 使用新的 <a href="{@docRoot}/org/omg/DynamicAny/DynAny.html">DynAny</a> 替代

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.TypeCode org.omg.CORBA.DynAny.type()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回插入此 <code>DynAny</code> 对象的 <code>TypeCode</code>。

@return  <code>TypeCode</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.assign(DynAny dyn_any) throws org.omg.CORBA.DynAnyPackage.Invalid
<!-- END KEY -->
<!-- BEGIN DATA -->
将内容从一个 Dynamic Any 复制到另一个 Dynamic Any 中。

@param dyn_any 内容被分配给此 <code>DynAny</code> 的 <code>DynAny</code> 对象。
@throws Invalid 如果源 <code>DynAny</code> 无效 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.from_any(Any value) throws org.omg.CORBA.DynAnyPackage.Invalid
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 <code>Any</code> 对象生成一个 <code>DynAny</code> 对象。

@param value <code>Any</code> 对象。
@throws Invalid 如果源 <code>Any</code> 对象为空或损坏

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Any org.omg.CORBA.DynAny.to_any() throws org.omg.CORBA.DynAnyPackage.Invalid
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>DynAny</code> 对象转换成 <code>Any</code> 对象。

@return <code>Any</code> 对象。
@throws Invalid 如果此 <code>DynAny</code> 为空或损坏，或者创建的 DynAny 对象不包含任何有意义的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.destroy()
<!-- END KEY -->
<!-- BEGIN DATA -->
销毁此 <code>DynAny</code> 对象，释放用来表示与之关联的数据值的所有资源。此方法还销毁从对象获取的所有 <code>DynAny</code> 对象。
 <p>
销毁 <code>DynAny</code> 对象应小心处理，需要考虑如何处理与 <code>DynAny</code> 对象关联的数据值的表示形式。如果程序员要销毁 <code>DynAny</code> 对象，但还需要操作与其关联的数据值的某个组件，则应该首先为该组件创建一个 <code>DynAny</code> 对象，然后生成所创建的 <code>DynAny</code> 对象的副本。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.DynAny org.omg.CORBA.DynAny.copy()
<!-- END KEY -->
<!-- BEGIN DATA -->
克隆此 <code>DynAny</code> 对象。

@return 此 <code>DynAny</code> 对象的副本

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_boolean(boolean value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
插入给定 <code>boolean</code> 值作为此 <code>DynAny</code> 对象的值。

<p> 如果对已构造 <code>DynAny</code> 对象调用此方法，则该方法将初始化与此 <code>DynAny</code> 对象关联的已构造数据值的下一个组件。

@param value 插入此 <code>DynAny</code> 对象的 <code>boolean</code> 值
@throws org.omg.CORBA.DynAnyPackage.InvalidValue 如果插入值与此 <code>DynAny</code> 对象中被访问组件的类型不一致

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_octet(byte value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
插入给定 <code>byte</code> 值作为此 <code>DynAny</code> 对象的值。

<p> 如果对已构造 <code>DynAny</code> 对象调用此方法，则该方法将初始化与此 <code>DynAny</code> 对象关联的已构造数据值的下一个组件。

@param value 插入此 <code>DynAny</code> 对象的 <code>byte</code> 值
@throws org.omg.CORBA.DynAnyPackage.InvalidValue 如果插入值与此 <code>DynAny</code> 对象中被访问组件的类型不一致

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_char(char value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
插入给定 <code>char</code> 值作为此 <code>DynAny</code> 对象的值。

<p> 如果对已构造 <code>DynAny</code> 对象调用此方法，则该方法将初始化与此 <code>DynAny</code> 对象关联的已构造数据值的下一个组件。

@param value 插入此 <code>DynAny</code> 对象的 <code>char</code> 值
@throws org.omg.CORBA.DynAnyPackage.InvalidValue 如果插入值与此 <code>DynAny</code> 对象中被访问组件的类型不一致

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_short(short value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
插入给定 <code>short</code> 值作为此 <code>DynAny</code> 对象的值。

<p> 如果对已构造 <code>DynAny</code> 对象调用此方法，则该方法将初始化与此 <code>DynAny</code> 对象关联的已构造数据值的下一个组件。

@param value 插入此 <code>DynAny</code> 对象的 <code>short</code> 值
@throws org.omg.CORBA.DynAnyPackage.InvalidValue 如果插入值与此 <code>DynAny</code> 对象中被访问组件的类型不一致

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_ushort(short value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
插入给定 <code>short</code> 值作为此 <code>DynAny</code> 对象的值。

<p> 如果对已构造 <code>DynAny</code> 对象调用此方法，则该方法将初始化与此 <code>DynAny</code> 对象关联的已构造数据值的下一个组件。

@param value 插入此 <code>DynAny</code> 对象的 <code>short</code> 值
@throws org.omg.CORBA.DynAnyPackage.InvalidValue 如果插入值与此 <code>DynAny</code> 对象中被访问组件的类型不一致

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_long(int value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
插入给定 <code>int</code> 值作为此 <code>DynAny</code> 对象的值。

<p> 如果对已构造 <code>DynAny</code> 对象调用此方法，则该方法将初始化与此 <code>DynAny</code> 对象关联的已构造数据值的下一个组件。

@param value 插入此 <code>DynAny</code> 对象的 <code>int</code> 值
@throws org.omg.CORBA.DynAnyPackage.InvalidValue 如果插入值与此 <code>DynAny</code> 对象中被访问组件的类型不一致

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_ulong(int value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
插入给定 <code>int</code> 值作为此 <code>DynAny</code> 对象的值。

<p> 如果对已构造 <code>DynAny</code> 对象调用此方法，则该方法将初始化与此 <code>DynAny</code> 对象关联的已构造数据值的下一个组件。

@param value 插入此 <code>DynAny</code> 对象的 <code>int</code> 值
@throws org.omg.CORBA.DynAnyPackage.InvalidValue 如果插入值与此 <code>DynAny</code> 对象中被访问组件的类型不一致

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_float(float value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
插入给定 <code>float</code> 值作为此 <code>DynAny</code> 对象的值。

<p> 如果对已构造 <code>DynAny</code> 对象调用此方法，则该方法将初始化与此 <code>DynAny</code> 对象关联的已构造数据值的下一个组件。

@param value 插入此 <code>DynAny</code> 对象的 <code>float</code> 值
@throws org.omg.CORBA.DynAnyPackage.InvalidValue 如果插入值与此 <code>DynAny</code> 对象中被访问组件的类型不一致

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_double(double value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
插入给定 <code>double</code> 值作为此 <code>DynAny</code> 对象的值。

<p> 如果对已构造 <code>DynAny</code> 对象调用此方法，则该方法将初始化与此 <code>DynAny</code> 对象关联的已构造数据值的下一个组件。

@param value 插入此 <code>DynAny</code> 对象的 <code>double</code> 值
@throws org.omg.CORBA.DynAnyPackage.InvalidValue 如果插入值与此 <code>DynAny</code> 对象中被访问组件的类型不一致

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_string(String value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
插入给定 <code>String</code> 对象作为此 <code>DynAny</code> 对象的值。

<p> 如果对已构造 <code>DynAny</code> 对象调用此方法，则该方法将初始化与此 <code>DynAny</code> 对象关联的已构造数据值的下一个组件。

@param value 插入此 <code>DynAny</code> 对象的 <code>String</code> 值
@throws org.omg.CORBA.DynAnyPackage.InvalidValue 如果插入值与此 <code>DynAny</code> 对象中被访问组件的类型不一致

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_reference(Object value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
插入给定 <code>org.omg.CORBA.Object</code> 作为此 <code>DynAny</code> 对象的值。

<p> 如果对已构造 <code>DynAny</code> 对象调用此方法，则该方法将初始化与此 <code>DynAny</code> 对象关联的已构造数据值的下一个组件。

@param value 插入此 <code>DynAny</code> 对象的 <code>org.omg.CORBA.Object</code> 值
@throws org.omg.CORBA.DynAnyPackage.InvalidValue 如果插入值与此 <code>DynAny</code> 对象中被访问组件的类型不一致

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_typecode(TypeCode value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
插入给定 <code>org.omg.CORBA.TypeCode</code> 值作为此 <code>DynAny</code> 对象的值。

<p> 如果对已构造 <code>DynAny</code> 对象调用此方法，则该方法将初始化与此 <code>DynAny</code> 对象关联的已构造数据值的下一个组件。

@param value 插入此 <code>DynAny</code> 对象的 <code>org.omg.CORBA.TypeCode</code> 值
@throws org.omg.CORBA.DynAnyPackage.InvalidValue 如果插入值与此 <code>DynAny</code> 对象中被访问组件的类型不一致

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_longlong(long value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
插入给定 <code>long</code> 值作为此 <code>DynAny</code> 对象的值。

<p> 如果对已构造 <code>DynAny</code> 对象调用此方法，则该方法将初始化与此 <code>DynAny</code> 对象关联的已构造数据值的下一个组件。

@param value 插入此 <code>DynAny</code> 对象的 <code>long</code> 值
@throws org.omg.CORBA.DynAnyPackage.InvalidValue 如果插入值与此 <code>DynAny</code> 对象中被访问组件的类型不一致

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_ulonglong(long value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
插入给定 <code>long</code> 值作为此 <code>DynAny</code> 对象的值。

<p> 如果对已构造 <code>DynAny</code> 对象调用此方法，则该方法将初始化与此 <code>DynAny</code> 对象关联的已构造数据值的下一个组件。

@param value 插入此 <code>DynAny</code> 对象的 <code>long</code> 值
@throws org.omg.CORBA.DynAnyPackage.InvalidValue 如果插入值与此 <code>DynAny</code> 对象中被访问组件的类型不一致

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_wchar(char value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
插入给定 <code>char</code> 值作为此 <code>DynAny</code> 对象的值。

<p> 如果对已构造 <code>DynAny</code> 对象调用此方法，则该方法将初始化与此 <code>DynAny</code> 对象关联的已构造数据值的下一个组件。

@param value 插入此 <code>DynAny</code> 对象的 <code>char</code> 值
@throws org.omg.CORBA.DynAnyPackage.InvalidValue 如果插入值与此 <code>DynAny</code> 对象中被访问组件的类型不一致

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_wstring(String value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
插入给定 <code>String</code> 作为此 <code>DynAny</code> 对象的值。

<p> 如果对已构造 <code>DynAny</code> 对象调用此方法，则该方法将初始化与此 <code>DynAny</code> 对象关联的已构造数据值的下一个组件。

@param value 插入此 <code>DynAny</code> 对象的 <code>String</code> 值
@throws org.omg.CORBA.DynAnyPackage.InvalidValue 如果插入值与此 <code>DynAny</code> 对象中被访问组件的类型不一致

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_any(Any value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
插入给定 <code>org.omg.CORBA.Any</code> 对象作为此 <code>DynAny</code> 对象的值。

<p> 如果对已构造 <code>DynAny</code> 对象调用此方法，则该方法将初始化与此 <code>DynAny</code> 对象关联的已构造数据值的下一个组件。

@param value 插入此 <code>DynAny</code> 对象中的 <code>org.omg.CORBA.Any</code> 对象
@throws org.omg.CORBA.DynAnyPackage.InvalidValue 如果插入值与此 <code>DynAny</code> 对象中被访问组件的类型不一致

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_val(Serializable value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
插入给定 <code>java.io.Serializable</code> 对象作为此 <code>DynAny</code> 对象的值。

<p> 如果对已构造 <code>DynAny</code> 对象调用此方法，则该方法将初始化与此 <code>DynAny</code> 对象关联的已构造数据值的下一个组件。

@param value 插入此 <code>DynAny</code> 对象中的 <code>java.io.Serializable</code> 对象
@throws org.omg.CORBA.DynAnyPackage.InvalidValue 如果插入值与此 <code>DynAny</code> 对象中被访问组件的类型不一致

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Serializable org.omg.CORBA.DynAny.get_val() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>DynAny</code> 对象中包含的 <code>java.io.Serializable</code> 对象。

@return 作为此 <code>DynAny</code> 对象的值的 <code>java.io.Serializable</code> 对象
@throws org.omg.CORBA.DynAnyPackage.TypeMismatch 如果此 <code>DynAny</code> 对象中被访问组件的类型代码与 <code>java.io.Serializable</code> 对象的类型代码不同

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.omg.CORBA.DynAny.get_boolean() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>DynAny</code> 对象中包含的 <code>boolean</code> 值。

@return 作为此 <code>DynAny</code> 对象的值的 <code>boolean</code> 值
@throws org.omg.CORBA.DynAnyPackage.TypeMismatch 如果此 <code>DynAny</code> 对象中被访问组件的类型代码与该 <code>boolean</code> 值的类型代码不同

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte org.omg.CORBA.DynAny.get_octet() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>DynAny</code> 对象中包含的 <code>byte</code> 值。

@return 作为此 <code>DynAny</code> 对象的值的 <code>byte</code> 值
@throws org.omg.CORBA.DynAnyPackage.TypeMismatch 如果此 <code>DynAny</code> 对象中被访问组件的类型代码与该 <code>byte</code> 值的类型代码不同

<!-- END DATA -->
<!-- BEGIN KEY -->
public char org.omg.CORBA.DynAny.get_char() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>DynAny</code> 对象中包含的 <code>char</code> 值。

@return 作为此 <code>DynAny</code> 对象的值的 <code>char</code> 值
@throws org.omg.CORBA.DynAnyPackage.TypeMismatch 如果此 <code>DynAny</code> 对象中被访问组件的类型代码与该 <code>char</code> 值的类型代码不同

<!-- END DATA -->
<!-- BEGIN KEY -->
public short org.omg.CORBA.DynAny.get_short() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>DynAny</code> 对象中包含的 <code>short</code> 值。

@return 作为此 <code>DynAny</code> 对象的值的 <code>short</code> 值
@throws org.omg.CORBA.DynAnyPackage.TypeMismatch 如果此 <code>DynAny</code> 对象中被访问组件的类型代码与该 <code>short</code> 值的类型代码不同

<!-- END DATA -->
<!-- BEGIN KEY -->
public short org.omg.CORBA.DynAny.get_ushort() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>DynAny</code> 对象中包含的 <code>short</code> 值。

@return 作为此 <code>DynAny</code> 对象的值的 <code>short</code> 值
@throws org.omg.CORBA.DynAnyPackage.TypeMismatch 如果此 <code>DynAny</code> 对象中被访问组件的类型代码与该 <code>short</code> 值的类型代码不同

<!-- END DATA -->
<!-- BEGIN KEY -->
public int org.omg.CORBA.DynAny.get_long() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>DynAny</code> 对象中包含的 <code>int</code> 值。

@return 作为此 <code>DynAny</code> 对象的值的 <code>int</code> 值
@throws org.omg.CORBA.DynAnyPackage.TypeMismatch 如果此 <code>DynAny</code> 对象中被访问组件的类型代码与该 <code>int</code> 值的类型代码不同

<!-- END DATA -->
<!-- BEGIN KEY -->
public int org.omg.CORBA.DynAny.get_ulong() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>DynAny</code> 对象中包含的 <code>int</code> 值。

@return 作为此 <code>DynAny</code> 对象的值的 <code>int</code> 值
@throws org.omg.CORBA.DynAnyPackage.TypeMismatch 如果此 <code>DynAny</code> 对象中被访问组件的类型代码与该 <code>int</code> 值的类型代码不同

<!-- END DATA -->
<!-- BEGIN KEY -->
public float org.omg.CORBA.DynAny.get_float() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>DynAny</code> 对象中包含的 <code>float</code> 值。

@return 作为此 <code>DynAny</code> 对象的值的 <code>float</code> 值
@throws org.omg.CORBA.DynAnyPackage.TypeMismatch 如果此 <code>DynAny</code> 对象中被访问组件的类型代码与该 <code>float</code> 值的类型代码不同

<!-- END DATA -->
<!-- BEGIN KEY -->
public double org.omg.CORBA.DynAny.get_double() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>DynAny</code> 对象中包含的 <code>double</code> 值。

@return 作为此 <code>DynAny</code> 对象的值的 <code>double</code> 值
@throws org.omg.CORBA.DynAnyPackage.TypeMismatch 如果此 <code>DynAny</code> 对象中被访问组件的类型代码与该 <code>double</code> 值的类型代码不同

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.omg.CORBA.DynAny.get_string() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>DynAny</code> 对象中包含的 <code>String</code>。

@return 作为此 <code>DynAny</code> 对象的值的 <code>String</code>
@throws org.omg.CORBA.DynAnyPackage.TypeMismatch 如果此 <code>DynAny</code> 对象中被访问组件的类型代码与该 <code>String</code> 的类型代码不同

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Object org.omg.CORBA.DynAny.get_reference() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>DynAny</code> 对象中包含的 <code>org.omg.CORBA.Other</code>。

@return 作为此 <code>DynAny</code> 对象的值的 <code>org.omg.CORBA.Other</code>
@throws org.omg.CORBA.DynAnyPackage.TypeMismatch 如果此 <code>DynAny</code> 对象中被访问组件的类型代码与该 <code>org.omg.CORBA.Other</code> 的类型代码不同

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.TypeCode org.omg.CORBA.DynAny.get_typecode() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>DynAny</code> 对象中包含的 <code>org.omg.CORBA.TypeCode</code>。

@return 作为此 <code>DynAny</code> 对象的值的 <code>org.omg.CORBA.TypeCode</code>
@throws org.omg.CORBA.DynAnyPackage.TypeMismatch 如果此 <code>DynAny</code> 对象中被访问组件的类型代码与该 <code>org.omg.CORBA.TypeCode</code> 的类型代码不同

<!-- END DATA -->
<!-- BEGIN KEY -->
public long org.omg.CORBA.DynAny.get_longlong() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>DynAny</code> 对象中包含的 <code>long</code> 值。

@return 作为此 <code>DynAny</code> 对象的值的 <code>long</code> 值
@throws org.omg.CORBA.DynAnyPackage.TypeMismatch 如果此 <code>DynAny</code> 对象中被访问组件的类型代码与该 <code>long</code> 值的类型代码不同

<!-- END DATA -->
<!-- BEGIN KEY -->
public long org.omg.CORBA.DynAny.get_ulonglong() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>DynAny</code> 对象中包含的 <code>long</code> 值。

@return 作为此 <code>DynAny</code> 对象的值的 <code>long</code> 值
@throws org.omg.CORBA.DynAnyPackage.TypeMismatch 如果此 <code>DynAny</code> 对象中被访问组件的类型代码与该 <code>long</code> 值的类型代码不同

<!-- END DATA -->
<!-- BEGIN KEY -->
public char org.omg.CORBA.DynAny.get_wchar() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>DynAny</code> 对象中包含的 <code>char</code> 值。

@return 作为此 <code>DynAny</code> 对象的值的 <code>char</code> 值
@throws org.omg.CORBA.DynAnyPackage.TypeMismatch 如果此 <code>DynAny</code> 对象中被访问组件的类型代码与该 <code>char</code> 值的类型代码不同

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.omg.CORBA.DynAny.get_wstring() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>DynAny</code> 对象中包含的 <code>String</code>。

@return 作为此 <code>DynAny</code> 对象的值的 <code>String</code>
@throws org.omg.CORBA.DynAnyPackage.TypeMismatch 如果此 <code>DynAny</code> 对象中被访问组件的类型代码与该 <code>String</code> 的类型代码不同

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Any org.omg.CORBA.DynAny.get_any() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
检索此 <code>DynAny</code> 对象中包含的 <code>org.omg.CORBA.Any</code>。

@return 作为此 <code>DynAny</code> 对象的值的 <code>org.omg.CORBA.Any</code>
@throws org.omg.CORBA.DynAnyPackage.TypeMismatch 如果此 <code>DynAny</code> 对象中被访问组件的类型代码与该 <code>org.omg.CORBA.Any</code> 的类型代码不同

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.DynAny org.omg.CORBA.DynAny.current_component()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>DynAny</code> 对象引用，可用来获取/设置当前所访问组件的值。可在得到的 <code>DynAny</code> 对象上调用适当的 <code>insert</code> 方法来初始化该组件。可在得到的 <code>DynAny</code> 对象上调用适当的 <code>get</code> 方法来提取该组件的值。

@return <code>DynAny</code> 对象引用，可用来检索或设置当前所访问组件的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.omg.CORBA.DynAny.next()
<!-- END KEY -->
<!-- BEGIN DATA -->
移动到此 <code>DynAny</code> 对象的下一个组件。此方法用于在所构造类型的组件上进行迭代，有效地将指针从一个组件移动到下一个组件。在创建 <code>DynAny</code> 对象时，指针从第一个组件开始移动。

@return 如果指针指向某一组件，则返回 <code>true</code>；如果不再有组件或者此 <code>DynAny</code> 与基本类型相关而不是与所构造类型相关，则返回 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.omg.CORBA.DynAny.seek(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
将内部指针移动到给定索引。从逻辑上说，此方法为该指针设置了一个新偏移量。  

@param index 指示作为指针移动目标位置的 <code>int</code> 值。第一个位置为 0。
@return 如果指针指向某一组件，则返回 <code>true</code>；如果在指定索引处没有组件，则返回 <code>false</code>。如果此 <code>DynAny</code> 对象与基本类型关联，则此方法对 0 以外的任何索引都返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.rewind()
<!-- END KEY -->
<!-- BEGIN DATA -->
将内部指针移动到第一个组件。

<!-- END DATA -->
