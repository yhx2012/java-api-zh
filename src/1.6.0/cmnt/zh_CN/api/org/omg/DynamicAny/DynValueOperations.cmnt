<!-- BEGIN KEY -->
public interface org.omg.DynamicAny.DynValueOperations extends org.omg.DynamicAny.DynValueCommonOperations
<!-- END KEY -->
<!-- BEGIN DATA -->
DynValue 对象支持对 IDL 非装箱 (boxed) 值类型的支持。DynValue 接口可表示 null 和非 null 两种值类型。对于表示非 null 值类型的 DynValue，DynValue 的组件由该值类型的公共和专有成员组成，包括那些按照定义的顺序从具体基本值类型继承的成员。表示 null 值类型的 DynValue 没有组件，其当前位置为 -1。
<P>警告：不加区别地更改专有值类型成员的内容将导致值类型实现因违反内部约束而破坏。提供对专有成员的访问是为了支持 ORB 桥接和调试之类的活动，不应使用该权限任意违反值类型的封装。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.omg.DynamicAny.DynValueOperations.current_member_name() throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前位置上的成员的名称。此操作可能返回空字符串，因为所操作的值的 TypeCode 可能不包含成员名称。

@exception TypeMismatch 如果 DynValue 表示 null 值类型。
@exception InvalidValue 如果当前位置不指示成员

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.TCKind org.omg.DynamicAny.DynValueOperations.current_member_kind() throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与当前位置的成员关联的 TCKind。

@exception TypeMismatch 如果 DynValue 表示 null 值类型。
@exception InvalidValue 如果当前位置不指示成员

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.DynamicAny.NameValuePair[] org.omg.DynamicAny.DynValueOperations.get_members() throws org.omg.DynamicAny.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 NameValuePair 序列，这些 NameValuePair 描述该值类型的每个成员的名称和值。该序列所含成员的顺序与成员的声明顺序（由 DynValue 的 TypeCode 指示）相同。当前位置不受影响。如果 DynValue 的 TypeCode 不包含成员名称，则返回序列中的成员名称将为空字符串。

@exception InvalidValue 如果此对象表示 null 值类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.DynamicAny.DynValueOperations.set_members(org.omg.DynamicAny.NameValuePair[] value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 NameValuePair 序列初始化该值类型的成员。如果传递的序列长度不为 0，则操作将当前位置设置为 0。如果传递空序列，则将当前位置设置为 -1。使用此方法可以将 null 值类型初始化为非 null 值类型。
<P>根据 DynValue 的 TypeCode 的指示，成员在 NameValuePair 中必须按它们在值类型的 IDL 规范中的显示顺序显示，除非它们为空字符串。该操作不尝试根据成员名称分配成员值。

@exception TypeMismatch 如果所传递序列中提供的成员名称与 DynValue 的 TypeCode 中相应成员名称不匹配，并且它们都不是空字符串
@exception InvalidValue 如果所传递序列的元素数与 DynValue 的 TypeCode 指示的成员数不一致

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.DynamicAny.NameDynAnyPair[] org.omg.DynamicAny.DynValueOperations.get_members_as_dyn_any() throws org.omg.DynamicAny.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 NameDynAnyPair 序列，这些 NameDynAnyPair 描述该值类型中每个成员的名称和值。该序列所含成员的顺序与成员的声明顺序（由 DynValue 的 TypeCode 指示）相同。当前位置不受影响。如果 DynValue 的 TypeCode 不包含成员名称，则返回序列中的成员名称将为空字符串。

@exception InvalidValue 如果此对象表示 null 值类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.DynamicAny.DynValueOperations.set_members_as_dyn_any(org.omg.DynamicAny.NameDynAnyPair[] value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 NameDynAnyPair 序列初始化该值类型的成员。如果传递的序列长度不为 0，则操作将当前位置设置为 0。如果传递空序列，则将当前位置设置为 -1。使用此方法可以将 null 值类型初始化为非 null 值类型。
<P>根据 DynValue 的 TypeCode 的指示，成员在 NameDynAnyPair 中必须按它们在值类型的 IDL 规范中的显示顺序显示，除非它们为空字符串。该操作不尝试根据成员名称分配成员值。

@exception TypeMismatch 如果所传递序列中提供的成员名称与 DynValue 的 TypeCode 中相应成员名称不匹配，并且它们都不是空字符串
@exception InvalidValue 如果所传递序列的元素数与 DynValue 的 TypeCode 指示的成员数不一致

<!-- END DATA -->
