<!-- BEGIN KEY -->
org.omg.DynamicAny
<!-- END KEY -->
<!-- BEGIN DATA -->

<P>提供一些类和接口使得在运行时能够遍历与 <code>any</code> 有关联的数据值，并提取数据值的基本成分。


<P>可以将 <code>any</code> 传递给不具有任何有关 <code>any</code> 类型的静态信息的程序（由 IDL 编译器生成的该类型代码没有经过对象实现的编译）。结果，接收 <code>any</code> 的对象不具有使用它的可移植方法。

<P><code>DynAny</code> 允许在运行时遍历与 <code>any</code> 有关联的数据值，并提取数据值的基本成分。它在编写功能强大的常规服务器程序（支持过滤的桥梁、事件通道）时非常有用。类似地，此设施允许在运行时构造 <code>any</code>，无需具备其类型的静态知识。它在编写常规客户端程序（桥梁、浏览器、用户界面工具）时非常有用。

<P><code>Any</code> 值可以通过 <tt>DynAny</tt> 对象进行动态解释（遍历）和构造。<tt>DynAny</tt> 对象与对应于插入 <tt>Any</tt> 的值的副本的数据值相关联。<tt>DynAny</tt> 对象可视为 <tt>DynAny</tt> 组件的有序集合。对于表示基本类型（如 <code>long</code>）或不具有组件的类型（如空异常）的 <tt>DynAny</tt>，组件的有序集合为空。 

<P>每个 <tt>DynAny</tt> 对象在其 <tt>DynAny</tt> 组件集合中都有一个当前位置。当前位置由 0 到 n-1（其中 <em>n</em> 为组件数）的索引值标识。特殊索引值 -1 指示不指向任何位置的当前位置。对于不能有当前位置的值（如空异常），索引值始终为 -1。如果使用具有组件的值初始化 <code>DynAny</code>，则索引被初始化为 0。在创建未初始化的 <code>DynAny</code>（即不具有值但具有允许组件的 <code>TypeCode</code> 的 <code>DynAny</code>）之后，当前位置取决于由 <code>DynAny</code> 表示的值的类型。（将当前位置设置为 0 还是 -1 取决于新 <code>DynAny</code> 是否获取了其组件的默认值。）
 
 
<P>迭代操作 <code>rewind</code>、<code>seek</code> 和 <code>next</code> 可用于更改当前位置，<code>current_component</code> 操作返回当前位置的组件。<code>component_count</code> 操作返回 <code>DynAny</code> 的组件数。总体上说，这些操作都能在 <code>DynAny</code> 的组件上进行迭代，从而能够（例如）检查其内容（递归式）。
 
 
<P>已构造的 <code>DynAny</code> 对象是与构造类型关联的 <code>DynAny</code> 对象。还有一种从 <code>DynAny</code> 接口继承而来的接口，它与 IDL 中的每种构造类型（fixed、enum、struct、sequence、union、array、exception 和 value 类型）相关联。已构造的 <code>DynAny</code> 对象导出支持创建新 <code>DynAny</code> 对象的操作，每个对象都与已构造数据值的组件相关联。例如，<code>DynStruct</code> 与 <code>struct</code> 值相关联。这意味着 <code>DynStruct</code> 可视为拥有一个有序的组件集合，每个结构成员一个。<code>DynStruct</code> 对象导出支持创建新 <code>DynAny</code> 对象的操作，其中每个对象都与 <code>struct</code> 的成员有关联。
 
 
<P>如果 <code>DynAny</code> 对象是从另一个（已构造）<code>DynAny</code> 对象获取的（如表示从 <code>DynStruct</code> 创建的结构成员的 <code>DynAny</code>），则成员 <code>DynAny</code> 在逻辑上包含在 <code>DynStruct</code> 中。调用 <code>insert</code> 或 <code>get</code> 操作不更改当前位置。销毁顶级 <code>DynAny</code> 对象（不是作为另一个 <code>DynAny</code> 的组件获取的）将同时销毁从其获取的所有 <code>DynAny</code> 对象组件。销毁非顶级 <code>DynAny</code> 对象的操作没有任何效果。在已销毁的顶级 <code>DynAny</code> 或其任何子代上调用操作将引发 OBJECT_NOT_EXIST。如果程序员要销毁 <code>DynAny</code> 对象，但还需要操作与其关联的数据值的某个组件，则应该首先为该组件创建一个 <code>DynAny</code>，然后生成所创建的 <code>DynAny</code> 对象的副本。
 
 
<P>为了支持高效实现，根据分配的内存空间和存取速度定义 <code>DynAny</code> 对象的行为。<code>DynAny</code> 对象旨在用于遍历从 <code>any</code> 提取的值，或用于在运行时构造 <code>any</code> 的值。不建议将其用于其他目的。
  
 
<H2>处理 DynAny 对象</H2>
 
<P><code>Insert</code> 和 <code>get</code> 操作是处理基本 <code>DynAny</code> 对象所必需的，但是也可以使用它们来处理已构造的 <code>DynAny</code> 对象。将基本数据类型值插入已构造的 <code>DynAny</code> 对象意味着初始化与 <code>DynAny</code> 对象关联的已构造数据值的当前组件。例如，对 <code>DynStruct</code> 调用 <code>insert_boolean</code> 意味着在关联的 <code>struct</code> 数据值的当前位置插入 <code>boolean</code> 数据值。如果某个类型的 <code>TypeCode</code> 等效于 <code>DynAny</code> 中包含的 <code>TypeCode</code>，或者等效于处于当前位置的 <code>DynAny</code> 的 <code>TypeCode</code>（如果 <code>DynAny</code> 有组件），则该类型与插入值或提取值一致。
 
<P>基本操作包括：
 <P>
 <UL>
 	<LI>insert_boolean, get_boolean
 	<LI>insert_char, get_char
 	<LI>insert_short, get_short
 	<LI>insert_ushort, get_ushort
 	<LI>insert_long, get_long
 	<LI>insert_ulong, get_ulong
 	<LI>insert_double, get_double
 	<LI>insert_string, get_string
 	<LI>insert_reference, get_reference
 	<LI>insert_typecode, get_typecode
 	<LI>insert_longlong, get_longlong
 	<LI>insert_ulonglong, get_ulonglong
 	<LI>insert_longdouble, get_longdouble
 	<LI>insert_wchar, get_wchar
 	<LI>insert_wstring, get_wstring
 	<LI>insert_any, get_any
 	<LI>insert_dyn_any, get_dyn_any
 	<LI>insert_val, get_val
 	<LI>insert_octet, get_octet
 	<LI>insert_float, get_float
 	<LI>get_value
 	<LI>get_as_string
 	<LI>get_as_ulong
 	<LI>get_members
 	<LI>get_members_as_dyn_any
 	<LI>get_discriminator
 	<LI>get_length
 	<LI>get_elements
 	<LI>get_elements_as_dyn_any
 	<LI>get_boxed_value
 	<LI>get_boxed_value_as_dyn_any
 </UL>
 
 
<P><code>DynAny</code> 和 <code>DynAnyFactory</code> 对象对于创建和使用它们的进程而言是本地的。这意味着，不能将对 <code>DynAny</code> 和 <code>DynAnyFactory</code> 对象的引用导出到其他进程，也不能通过 <code>ORB.object_to_string()</code> 使其具体化。如果进行这样的尝试，则该违反规则的操作将引发 MARSHAL 系统异常。由于它们的接口是在 IDL 中指定的，所以 <code>DynAny</code> 对象导出在标准 <code>org.omg.CORBA.Object</code> 接口中定义的操作。但是，任何尝试调用通过 <code>Object</code> 接口导出的操作都会引发标准 NO_IMPLEMENT 异常。尝试使用带有 DII 的 <code>DynAny</code> 对象将引发 NO_IMPLEMENT 异常。
 



<P>


<H3>包规范</H3>
 
<P>有关 Java[tm] Platform, Standard Edition 6 ORB 遵守的官方规范的受支持部分的明确列表，请参阅 <A 
HREF="../CORBA/doc-files/compliance.html">Official Specifications for CORBA support in Java[tm] SE 6</A>。
<p>
@since 1.4 <br>
@serial exclude

<!-- END DATA -->
