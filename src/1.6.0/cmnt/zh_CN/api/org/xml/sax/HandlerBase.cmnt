<!-- BEGIN KEY -->
public class org.xml.sax.HandlerBase extends java.lang.Object implements org.xml.sax.EntityResolver, org.xml.sax.DTDHandler, org.xml.sax.DocumentHandler, org.xml.sax.ErrorHandler
<!-- END KEY -->
<!-- BEGIN DATA -->
处理程序的默认基类。

 <blockquote>
<em>此模块（包括源代码和文档）在公共域中，同时 <strong>没有担保</strong>。</em>有关更多信息，请参阅<a href='http://www.saxproject.org'>http://www.saxproject.org</a>。
 </blockquote>

<p>此类可实现以下四个 SAX1 接口的默认行为：EntityResolver、DTDHandler、DocumentHandler 和 ErrorHandler。此类现已过时，但它包括在 SAX2 中用来支持遗留的 SAX1 应用程序。而 SAX2 应用程序应该使用 {@link org.xml.sax.helpers.DefaultHandler DefaultHandler} 类。</p>

<p>应用程序编写者可以在他们仅需实现部分接口时扩展此类；当应用程序尚未提供其自己的处理程序时解析器编写者可通过实例化此类来提供默认的处理程序。</p>

<p>注意，使用此类是可选的。</p>

@deprecated 此类可可以与不推荐使用的 {@link org.xml.sax.DocumentHandler DocumentHandler} 接口一起工作。它已经被 SAX2 {@link org.xml.sax.helpers.DefaultHandler DefaultHandler} 类所取代。
@since SAX 1.0
@author David Megginson
@version 2.0.1 (sax2r2)
@see org.xml.sax.EntityResolver
@see org.xml.sax.DTDHandler
@see org.xml.sax.DocumentHandler
@see org.xml.sax.ErrorHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.InputSource org.xml.sax.HandlerBase.resolveEntity(String publicId, String systemId) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
解析外部实体。

<p>将始终返回 null，因此解析器将使用 XML 文档中提供的系统标识符。此方法实现 SAX 默认的行为：应用程序编写者可以在子类中重写它以便进行诸如目录查找或 URI 重定向之类的特定转换。</p>

@param publicId 公共标识符，如果没有可用的则为 null。
@param systemId XML 文档中提供的系统标识符。
@return 新的输入源，或返回 null以要求默认的行为。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.EntityResolver#resolveEntity

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.HandlerBase.notationDecl(String name, String publicId, String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
接收注释声明的通知。

<p>默认为不执行任何操作。如果应用程序编写者希望跟踪在文档中声明的注释，则可以在子类中重写此方法。</p>

@param name 注释名称。
@param publicId 注释公共标识符，如果没有可使用的则为 null。
@param systemId 注释系统标识符。
@see org.xml.sax.DTDHandler#notationDecl

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.HandlerBase.unparsedEntityDecl(String name, String publicId, String systemId, String notationName)
<!-- END KEY -->
<!-- BEGIN DATA -->
接收未解析的实体声明的通知。

<p>默认为不执行任何操作。应用程序编写者可以在子类中重写此方法，以便跟踪在文档中声明的未解析实体。</p>

@param name 实体名称。
@param publicId 实体公共标识符，如果不可用则为 null。
@param systemId 实体系统标识符。
@param notationName 相关注释的名称。
@see org.xml.sax.DTDHandler#unparsedEntityDecl

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.HandlerBase.setDocumentLocator(Locator locator)
<!-- END KEY -->
<!-- BEGIN DATA -->
接收文档事件的 Locator 对象。

<p>默认为不执行任何操作。如果应用程序编写者希望存储定位器以用于其他的文档事件，则可以在子类中重写此方法。</p>

@param locator 用于所有 SAX 文档事件的定位器。
@see org.xml.sax.DocumentHandler#setDocumentLocator
@see org.xml.sax.Locator

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.HandlerBase.startDocument() throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收文档开始的通知。

<p>默认为不执行任何操作。应用程序编写者可以在子类中重写此方法，以便在文档的开始采取特定的措施（如分配树的根节点或创建输出文件）。</p>

@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.DocumentHandler#startDocument

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.HandlerBase.endDocument() throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收文档结束的通知。

<p>默认为不执行任何操作。应用程序编写者可以在子类中重写此方法，以便在文档结束时采取特定的措施（如结束树或关闭输出文件）。</p>

@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.DocumentHandler#endDocument

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.HandlerBase.startElement(String name, AttributeList attributes) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收元素开始的通知。

<p>默认为不执行任何操作。应用程序编写者可以在子类中重写此方法，以便在每个元素开始时采取特定的措施（如向文件分配新的树节点或把输出写入到文件）。</p>

@param name 元素类型名称。
@param attributes 指定的或默认的属性。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.DocumentHandler#startElement

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.HandlerBase.endElement(String name) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收元素结束的通知。

<p>默认为不执行任何操作。应用程序编写者可以在子类中重写此方法，以便在每个元素结束时采取特定的措施（如结束树节点或将输出写入到文件中）。</p>

@param name 元素名称
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.DocumentHandler#endElement

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.HandlerBase.characters(char[] ch, int start, int length) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收元素内字符数据的通知。

<p>默认为不执行任何操作。应用程序编写者可以重写此方法，以便对每块字符数据采取特定的措施（如将该数据添加到节点或缓冲区，或者将该数据打印到文件）。</p>

@param ch 字符。
@param start 在字符数组中的起始位置。
@param length 从字符数组使用的字符个数。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.DocumentHandler#characters

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.HandlerBase.ignorableWhitespace(char[] ch, int start, int length) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收元素内容中可忽略的空白的通知。

<p>默认为不执行任何操作。应用程序编写者可以重写此方法，以便对每块可忽略的空白采取特定的措施（如将数据添加到节点或缓冲区，或者将数据打印到文件）。</p>

@param ch 空白字符。
@param start 在字符数组中的起始位置。
@param length 从字符数组使用的字符个数。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.DocumentHandler#ignorableWhitespace

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.HandlerBase.processingInstruction(String target, String data) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收处理指令的通知。

<p>默认为不执行任何操作。应用程序编写者可以在子类中重写此方法，以便对每个处理指令采取特定的措施，如设置状态变量或调用其他的方法。</p>

@param target 处理指令目标。
@param data 处理指令数据，如果未提供则为 null。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.DocumentHandler#processingInstruction

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.HandlerBase.warning(SAXParseException e) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收解析器警告的通知。

<p>默认实现不执行任何操作。应用程序编写者可以在子类中重写此方法，以便对每个警告采取特定的措施，如在日志文件中插入消息，或者将它打印到控制台。</p>

@param e 编码为异常的警告信息。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.ErrorHandler#warning
@see org.xml.sax.SAXParseException

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.HandlerBase.error(SAXParseException e) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收可恢复的解析器错误的通知。

<p>默认实现不执行任何操作。应用程序编写者可以在子类中重写此方法，以便对每个错误采取特定的措施，如在日志文件中插入消息，或者将它打印到控制台。</p>

@param e 编码为异常的警告信息。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.ErrorHandler#warning
@see org.xml.sax.SAXParseException

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.HandlerBase.fatalError(SAXParseException e) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
报告严重的 XML 解析错误。

<p>默认的实现抛出 SAXParseException。如果应用程序编写者需要对每个严重的错误采取特定的措施（如将所有的错误收集到一个报告中），则可以在子类中重写此方法：当调用此方法时，无论哪种情况，应用程序都必须停止所有的常规处理，这是因为文档已不再可靠，并且解析器再也不能报告解析事件。</p>

@param e 编码为异常的错误信息。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.ErrorHandler#fatalError
@see org.xml.sax.SAXParseException

<!-- END DATA -->
