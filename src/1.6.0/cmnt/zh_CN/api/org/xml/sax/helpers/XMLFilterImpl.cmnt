<!-- BEGIN KEY -->
public class org.xml.sax.helpers.XMLFilterImpl extends java.lang.Object implements org.xml.sax.XMLFilter, org.xml.sax.EntityResolver, org.xml.sax.DTDHandler, org.xml.sax.ContentHandler, org.xml.sax.ErrorHandler
<!-- END KEY -->
<!-- BEGIN DATA -->
派生 XML 过滤器的基类。

 <blockquote>
<em>此模块（包括源代码和文档）位于公共域中，对该模块<strong>不提供担保</strong>。</em>有关更多信息，请参阅<a href='http://www.saxproject.org'>http://www.saxproject.org</a>。。
 </blockquote>

<p>此类设计为位于 {@link org.xml.sax.XMLReader XMLReader} 和客户端应用程序的事件处理程序之间。默认情况下，除了将请求传递给阅读器和将事件传递给未修改的处理程序外，不执行其他操作。但是，子类可以重写特定方法在它们传递时修改事件流或配置请求。</p>

@since SAX 2.0
@author David Megginson
@version 2.0.1 (sax2r2)
@see org.xml.sax.XMLFilter
@see org.xml.sax.XMLReader
@see org.xml.sax.EntityResolver
@see org.xml.sax.DTDHandler
@see org.xml.sax.ContentHandler
@see org.xml.sax.ErrorHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.helpers.XMLFilterImpl()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个不带父过滤器的空 XML 过滤器。

<p>此过滤器将没有父过滤器：在使用 setFeature 或 setProperty 开始解析或执行任何操作之前您必须分配一个父过滤器，除非将其用作纯事件使用者而非 {@link XMLReader}。</p>

@see org.xml.sax.XMLReader#setFeature
@see org.xml.sax.XMLReader#setProperty
@see #setParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.helpers.XMLFilterImpl(XMLReader parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个带有特定父过滤器的 XML 过滤器。

@see #setParent
@see #getParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.setParent(XMLReader parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置父读取器。

<p>这是 {@link org.xml.sax.XMLReader XMLReader}，此过滤器将从其中获取它的事件并向其传递配置请求。父过滤器本身还有可能是其他过滤器。</p>

<p>如果没有设置父读取器，则解析、设置或获得功能或属性的任何尝试都不会成功。</p>

@param parent 父 XML 读取器。
@see #getParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.XMLReader org.xml.sax.helpers.XMLFilterImpl.getParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取父读取器。

@return 父 XML 读取器，如果未设置，则返回 null。
@see #setParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.setFeature(String name, boolean value) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置功能的值。

<p>如果父功能为 null，则始终会失败。</p>

@param name 功能名称。
@param value 请求的功能值。
@exception org.xml.sax.SAXNotRecognizedException 如果功能值不能从父功能分配或检索。
@exception org.xml.sax.SAXNotSupportedException 当父功能识别功名称，但不能设置请求的值时。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.xml.sax.helpers.XMLFilterImpl.getFeature(String name) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
查找功能值。

<p>如果父功能为 null，则始终会失败。</p>

@param name 功能名称。
@return 此功能的当前值。
@exception org.xml.sax.SAXNotRecognizedException 如果功能值不能从父功能分配或检索。
@exception org.xml.sax.SAXNotSupportedException 当父功能识别功能名称，但此时不能确定其值时。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.setProperty(String name, Object value) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置属性值。

<p>如果父属性为 null，则始终会失败。</p>

@param name 属性名。
@param value 请求的属性值。
@exception org.xml.sax.SAXNotRecognizedException 如果属性值不能从父属性分配或检索。
@exception org.xml.sax.SAXNotSupportedException 当父属性识别属性名称，但不能设置请求的值时。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object org.xml.sax.helpers.XMLFilterImpl.getProperty(String name) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
查找属性值。

@param name 属性名。
@return 属性的当前值。
@exception org.xml.sax.SAXNotRecognizedException 如果属性值不能从父属性分配或检索。
@exception org.xml.sax.SAXNotSupportedException 当父属性识别属性名称，但此时不能确定其值时。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.setEntityResolver(EntityResolver resolver)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置实体解析器。

@param resolver 新实体解析器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.EntityResolver org.xml.sax.helpers.XMLFilterImpl.getEntityResolver()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取当前实体解析器。

@return 当前实体解析器，如果未设置，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.setDTDHandler(DTDHandler handler)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 DTD 事件处理程序。

@param handler 新的 DTD 处理程序。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.DTDHandler org.xml.sax.helpers.XMLFilterImpl.getDTDHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取当前 DTD 事件处理程序。

@return 当前 DTD 处理程序，如果未设置，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.setContentHandler(ContentHandler handler)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置内容事件处理程序。

@param handler 新的内容处理程序

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.ContentHandler org.xml.sax.helpers.XMLFilterImpl.getContentHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取内容事件处理程序。

@return 当前内容处理程序，如果未设置，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.setErrorHandler(ErrorHandler handler)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置错误事件处理程序。

@param handler 新的错误处理程序

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.ErrorHandler org.xml.sax.helpers.XMLFilterImpl.getErrorHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取当前错误事件处理程序。

@return 当前错误处理程序，如果未设置，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.parse(InputSource input) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
解析一个文档。

@param input 文档实体的输入源。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@exception java.io.IOException 来自解析器的 IO 异常，可能来自应用程序提供的字节流或字符流。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.parse(String systemId) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
解析一个文档。

@param systemId 作为完全限定 URI 的系统标识符。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@exception java.io.IOException 来自解析器的 IO 异常，可能来自应用程序提供的字节流或字符流。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.InputSource org.xml.sax.helpers.XMLFilterImpl.resolveEntity(String publicId, String systemId) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤一个外部实体解析。

@param publicId 实体的公开标识符，或者为 null。
@param systemId 实体的系统标识符。
@return 新的 InputSource，默认返回 null。
@exception org.xml.sax.SAXException 客户端可以在处理过程中抛出一个异常。
@exception java.io.IOException 客户端可以在获取新 InputSource 的同时抛出一个与 I/O 相关的异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.notationDecl(String name, String publicId, String systemId) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤一个注释声明事件。

@param name 注释名称。
@param publicId 注释的公开标识符，或者为 null。
@param systemId 注释的系统标识符，或者 null。
@exception org.xml.sax.SAXException 客户端可以在处理过程中抛出一个异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.unparsedEntityDecl(String name, String publicId, String systemId, String notationName) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤一个未解析实体声明事件。

@param name 实体名称。
@param publicId 实体的公开标识符，或者为 null。
@param systemId 实体的系统标识符，或者 null。
@param notationName 相关联的注释的名称。
@exception org.xml.sax.SAXException 客户端可以在处理过程中抛出一个异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.setDocumentLocator(Locator locator)
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤一个新的文档定位器事件。

@param locator 文档定位器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.startDocument() throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤一个开始文档事件。

@exception org.xml.sax.SAXException 客户端可以在处理过程中抛出一个异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.endDocument() throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤一个结束文档事件。

@exception org.xml.sax.SAXException 客户端可以在处理过程中抛出一个异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.startPrefixMapping(String prefix, String uri) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤一个开始名称空间前缀映射事件。

@param prefix 名称空间前缀。
@param uri 名称空间 URI。
@exception org.xml.sax.SAXException 客户端可以在处理过程中抛出一个异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.endPrefixMapping(String prefix) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤一个结束名称空间前缀映射事件。

@param prefix 名称空间前缀。
@exception org.xml.sax.SAXException 客户端可以在处理过程中抛出一个异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.startElement(String uri, String localName, String qName, Attributes atts) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤一个开始元素事件。

@param uri 元素的名称空间 URI，或者空字符串。
@param localName 元素的本地名称，或者空字符串。
@param qName 元素的限定（带前缀的）名称，或者空字符串。
@param atts 元素的属性。
@exception org.xml.sax.SAXException 客户端可以在处理过程中抛出一个异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.endElement(String uri, String localName, String qName) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤一个结束元素事件。

@param uri 元素的名称空间 URI，或者空字符串。
@param localName 元素的本地名称，或者空字符串。
@param qName 元素的限定（带前缀的）名称，或者空字符串。
@exception org.xml.sax.SAXException 客户端可以在处理过程中抛出一个异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.characters(char[] ch, int start, int length) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤一个字符数据事件。

@param ch 字符数组。
@param start 数组中的开始位置。
@param length 从数组中使用的字符数。
@exception org.xml.sax.SAXException 客户端可以在处理过程中抛出一个异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.ignorableWhitespace(char[] ch, int start, int length) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤一个可忽略空格的事件。

@param ch 字符数组。
@param start 数组中的开始位置。
@param length 从数组中使用的字符数。
@exception org.xml.sax.SAXException 客户端可以在处理过程中抛出一个异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.processingInstruction(String target, String data) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤一个处理指令事件。

@param target 处理指令目标。
@param data 目标后跟随的文本。
@exception org.xml.sax.SAXException 客户端可以在处理过程中抛出一个异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.skippedEntity(String name) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤一个跳过的实体事件。

@param name 跳过的实体的名称。
@exception org.xml.sax.SAXException 客户端可以在处理过程中抛出一个异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.warning(SAXParseException e) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤一个警告事件。

@param e 作为异常的警告。
@exception org.xml.sax.SAXException 客户端可以在处理过程中抛出一个异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.error(SAXParseException e) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤一个错误事件。

@param e 作为异常的错误。
@exception org.xml.sax.SAXException 客户端可以在处理过程中抛出一个异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.fatalError(SAXParseException e) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤一个严重的错误事件。

@param e 作为异常的错误。
@exception org.xml.sax.SAXException 客户端可以在处理过程中抛出一个异常。

<!-- END DATA -->
