<!-- BEGIN KEY -->
public class org.xml.sax.helpers.ParserAdapter extends java.lang.Object implements org.xml.sax.XMLReader, org.xml.sax.DocumentHandler
<!-- END KEY -->
<!-- BEGIN DATA -->
将 SAX1 Parser 适配为 SAX2 XMLReader。

 <blockquote>
<em>此模块（包括源代码和文档）位于公共域中，对该模块<strong>不提供担保</strong>。</em>有关更多信息，请参阅<a href='http://www.saxproject.org'>http://www.saxproject.org</a>。
 </blockquote>

<p>此类包装 SAX1 {@link org.xml.sax.Parser Parser}，并使其充当带有功能、属性和名称空间支持的 SAX2 {@link org.xml.sax.XMLReader XMLReader}。注意，不可能报告 {@link org.xml.sax.ContentHandler#skippedEntity skippedEntity} 事件，因为 SAX1 不提供该信息。</p>

<p>此适配器不对重复的名称空间限定的属性进行测试。</p>

@since SAX 2.0
@author David Megginson
@version 2.0.1 (sax2r2)
@see org.xml.sax.helpers.XMLReaderAdapter
@see org.xml.sax.XMLReader
@see org.xml.sax.Parser

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.helpers.ParserAdapter() throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新解析器适配器。

<p>使用 &quot;org.xml.sax.parser&quot; 属性查找嵌入的 SAX1 驱动程序。</p>

@exception SAXException 如果不能实例化嵌入的驱动程序，或者未指定 org.xml.sax.parser 属性。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.helpers.ParserAdapter(Parser parser)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的解析器适配器。

<p>注意，一旦创建适配器，将不能更改嵌入的解析器；要嵌入不同的解析器，应分配一个新的 ParserAdapter。</p>

@param parser 要嵌入的 SAX1 解析器。
@exception java.lang.NullPointerException 如果解析器参数为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.ParserAdapter.setFeature(String name, boolean value) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
为解析器设置功能标志。

<p>能识别的功能仅为名称空间和名称前缀。</p>

@param name 功能名称，作为一个完整的 URI。
@param value 请求的功能值。
@exception SAXNotRecognizedException 如果无法分配或检索该功能。
@exception SAXNotSupportedException 如果不能把该值分配给功能。
@see org.xml.sax.XMLReader#setFeature

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.xml.sax.helpers.ParserAdapter.getFeature(String name) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
检查解析器功能标志。

<p>能识别的功能仅为名称空间和名称前缀。</p>

@param name 功能名称，作为一个完整的 URI。
@return 当前功能值。
@exception SAXNotRecognizedException 如果无法分配或检索功能值。
@exception SAXNotSupportedException 如果该功能当前不可读。
@see org.xml.sax.XMLReader#setFeature

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.ParserAdapter.setProperty(String name, Object value) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置解析器属性。

<p>当前未识别任何属性。</p>

@param name 属性名。
@param value 属性值。
@exception SAXNotRecognizedException 如果无法分配或检索属性值。
@exception SAXNotSupportedException 如果不能把该值分配给属性。
@see org.xml.sax.XMLReader#setProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object org.xml.sax.helpers.ParserAdapter.getProperty(String name) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取解析器属性。

<p>当前未识别任何属性。</p>

@param name 属性名。
@return 属性值。
@exception SAXNotRecognizedException 如果无法分配或检索属性值。
@exception SAXNotSupportedException 如果属性值当前不可读。
@see org.xml.sax.XMLReader#getProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.ParserAdapter.setEntityResolver(EntityResolver resolver)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置实体解析器。

@param resolver 新实体解析器。
@see org.xml.sax.XMLReader#setEntityResolver

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.EntityResolver org.xml.sax.helpers.ParserAdapter.getEntityResolver()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前实体解析器。

@return 当前实体解析器，如果未提供，则返回 null。
@see org.xml.sax.XMLReader#getEntityResolver

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.ParserAdapter.setDTDHandler(DTDHandler handler)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 DTD 处理程序。


@param handler the new DTD handler
@see org.xml.sax.XMLReader#setEntityResolver

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.DTDHandler org.xml.sax.helpers.ParserAdapter.getDTDHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前 DTD 处理程序。

@return 当前 DTD 处理程序，如果未提供，则返回 null
@see org.xml.sax.XMLReader#getEntityResolver

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.ParserAdapter.setContentHandler(ContentHandler handler)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置内容处理程序。

@param handler the new content handler
@see org.xml.sax.XMLReader#setEntityResolver

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.ContentHandler org.xml.sax.helpers.ParserAdapter.getContentHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前内容处理程序。

@return 当前内容处理程序，如果未提供，则返回 null。
@see org.xml.sax.XMLReader#getEntityResolver

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.ParserAdapter.setErrorHandler(ErrorHandler handler)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置错误处理程序。

@param handler 新的错误处理程序。
@see org.xml.sax.XMLReader#setEntityResolver

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.ErrorHandler org.xml.sax.helpers.ParserAdapter.getErrorHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前错误处理程序。

@return 当前错误处理程序，如果未提供，则返回 null。
@see org.xml.sax.XMLReader#getEntityResolver

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.ParserAdapter.parse(String systemId) throws java.io.IOException, org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
解析 XML 文档。

@param systemId 文档的绝对 URL。
@exception java.io.IOException 如果在读取文档的原始内容时存在问题。
@exception SAXException 如果在处理文档时存在问题。
@see #parse(org.xml.sax.InputSource)
@see org.xml.sax.Parser#parse(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.ParserAdapter.parse(InputSource input) throws java.io.IOException, org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
解析 XML 文档。

@param input 文档的输入源。
@exception java.io.IOException 如果在读取文档的原始内容时存在问题。
@exception SAXException 如果在处理文档时存在问题。
@see #parse(java.lang.String)
@see org.xml.sax.Parser#parse(org.xml.sax.InputSource)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.ParserAdapter.setDocumentLocator(Locator locator)
<!-- END KEY -->
<!-- BEGIN DATA -->
适配器实现方法；不调用。适配 SAX1 文档定位器事件。

@param locator 文档定位器。
@see org.xml.sax.ContentHandler#setDocumentLocator

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.ParserAdapter.startDocument() throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
适配器实现方法；不调用。适配 SAX1 开始文档事件。

@exception SAXException 客户端可能引发处理异常。
@see org.xml.sax.DocumentHandler#startDocument

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.ParserAdapter.endDocument() throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
适配器实现方法；不调用。适配 SAX1 结束文档事件。

@exception SAXException 客户端可能引发处理异常。
@see org.xml.sax.DocumentHandler#endDocument

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.ParserAdapter.startElement(String qName, AttributeList qAtts) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
适配器实现方法；不调用。适配 SAX1 startElement 事件。

<p>如果必要，则执行 Namespace 处理。</p>

@param qName 限定的（前缀）名称。
@param qAtts XML 属性列表（带 qnames）。
@exception SAXException 客户端可能引发处理异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.ParserAdapter.endElement(String qName) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
适配器实现方法；不调用。适配 SAX1 结束元素事件。

@param qName 限定的（前缀）名称。
@exception SAXException 客户端可能引发处理异常。
@see org.xml.sax.DocumentHandler#endElement

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.ParserAdapter.characters(char[] ch, int start, int length) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
适配器实现方法；不调用。适配 SAX1 字符事件。

@param ch 一个字符数组。
@param start 数组中的开始位置。
@param length 要使用的字符数。
@exception SAXException 客户端可能引发处理异常。
@see org.xml.sax.DocumentHandler#characters

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.ParserAdapter.ignorableWhitespace(char[] ch, int start, int length) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
适配器实现方法；不调用。适配 SAX1 可忽略空白事件。

@param ch 字符数组。
@param start 数组中的开始位置。
@param length 要使用的字符数。
@exception SAXException 客户端可能引发处理异常。
@see org.xml.sax.DocumentHandler#ignorableWhitespace

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.ParserAdapter.processingInstruction(String target, String data) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
适配器实现方法；不调用。适配 SAX1 处理指令事件。

@param target 处理指令目标。
@param data 处理指令的剩余部分
@exception SAXException 客户端可能引发处理异常。
@see org.xml.sax.DocumentHandler#processingInstruction

<!-- END DATA -->
