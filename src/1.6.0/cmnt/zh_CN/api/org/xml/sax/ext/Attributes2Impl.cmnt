<!-- BEGIN KEY -->
public class org.xml.sax.ext.Attributes2Impl extends org.xml.sax.helpers.AttributesImpl implements org.xml.sax.ext.Attributes2
<!-- END KEY -->
<!-- BEGIN DATA -->
用于附加的 Attributes 信息的、实现 {@link Attributes2} 接口的 SAX2 扩展帮助器。

 <blockquote>
<em>此模块（包括源代码和文档）在公共域中，同时 <strong>没有担保</strong>。</em>
 </blockquote>

<p>这不是仅核心 SAX2 分发的一部分。</p>

<p>每个属性的<em>指定的</em> 标志将总为 true，除非使用副本构造方法或 {@link #setSpecified} 将它设置为 false。类似地，每个属性的<em>声明的</em> 标志将总为 false，默认的属性（<em>指定为</em> false)、非 CDATA 属性或使用 {@link #setDeclared} 将其设置为 true 时除外。如果手工更改属性的类型，则为了相符可能需要修改其<em>声明的</em> 标志。 
 </p>

@since SAX 2.0 (extensions 1.1 alpha)
@author David Brownell
@version TBS

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.ext.Attributes2Impl()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的空 Attributes2Impl 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.ext.Attributes2Impl(Attributes atts)
<!-- END KEY -->
<!-- BEGIN DATA -->
复制现有属性或 Attributes2 对象。如果对象实现 Attributes2，则复制每个属性的<em>指定的</em> 和<em>声明的</em> 标志的值。否则，标志值默认假定没有使用任何 DTD，除非有相反证据(例如，属性具有除 CDATA 之外的类型，但它们必须已经<em>声明</em>）。

<p>在 {@link org.xml.sax.ContentHandler#startElement startElement} 事件中，此构造方法特别有用。</p>

@param atts 现有 Attributes 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.xml.sax.ext.Attributes2Impl.isDeclared(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回属性的&ldquo;声明的&rdquo;标志的当前值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.xml.sax.ext.Attributes2Impl.isDeclared(String uri, String localName)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回属性的&ldquo;声明的&rdquo;标志的当前值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.xml.sax.ext.Attributes2Impl.isDeclared(String qName)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回属性的&ldquo;声明的&rdquo;标志的当前值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.xml.sax.ext.Attributes2Impl.isSpecified(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回属性的&ldquo;指定的&rdquo;标志的当前值。

@param index 属性索引（从零开始）。
@return 当前的标志值
@exception java.lang.ArrayIndexOutOfBoundsException 当提供的索引不标识属性时。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.xml.sax.ext.Attributes2Impl.isSpecified(String uri, String localName)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回属性的&ldquo;指定的&rdquo;标志的当前值。

@param uri 名称空间 URI，如果该名称没有名称空间 URI，则为空字符串。
@param localName 属性的本地名称。
@return 当前标志值
@exception java.lang.IllegalArgumentException 当提供的名称不标识属性时。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.xml.sax.ext.Attributes2Impl.isSpecified(String qName)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回属性的&ldquo;指定的&rdquo;标志的当前值。

@param qName XML 限定（加前缀的）名称。
@return 当前标志值
@exception java.lang.IllegalArgumentException 当提供的名称不标识属性时。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.ext.Attributes2Impl.setAttributes(Attributes atts)
<!-- END KEY -->
<!-- BEGIN DATA -->
复制整个属性对象。将 true 分配给&ldquo;指定的&rdquo;标志，将 false 分配给&ldquo;声明的&rdquo;标志（属性的类型不是 CDATA 时除外），除非对象是 Attributes2 对象。在此情况下，完全复制这些标志值。

@see AttributesImpl#setAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.ext.Attributes2Impl.addAttribute(String uri, String localName, String qName, String type, String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
将属性添回到列表的末尾，将其&ldquo;指定的&rdquo;标志设置为 true。要将标志的值设置为 false，使用 {@link #setSpecified}。

<p>除非属性<em>类型</em> 是 CDATA，才按照 DTD 中声明的那样标记此属性。要将该标志值设置为 true，使用 {@link #setDeclared}。

@see AttributesImpl#addAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.ext.Attributes2Impl.setDeclared(int index, boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
将值分配给特定属性的&ldquo;声明的&rdquo;标志。通常，仅有类型 CDATA 的属性需要此操作，包括其类型更改为 CDATA 或从 CDATA 更改来的属性。

@param index 属性的索引（从零开始）。
@param value 需要的标志值。
@exception java.lang.ArrayIndexOutOfBoundsException 当提供的索引不标识属性时。
@see #setType

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.ext.Attributes2Impl.setSpecified(int index, boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
将值分配给特定属性的&ldquo;指定的&rdquo;标志。这是能够清除此标志的唯一方法，使用复制构造方法通过初始化进行的清除除外。

@param index 属性的索引（从零开始）。
@param value 需要的标志值。
@exception java.lang.ArrayIndexOutOfBoundsException 当提供的索引不标识属性时。

<!-- END DATA -->
