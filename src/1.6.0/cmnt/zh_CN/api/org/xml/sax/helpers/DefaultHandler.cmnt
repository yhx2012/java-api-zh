<!-- BEGIN KEY -->
public class org.xml.sax.helpers.DefaultHandler extends java.lang.Object implements org.xml.sax.EntityResolver, org.xml.sax.DTDHandler, org.xml.sax.ContentHandler, org.xml.sax.ErrorHandler
<!-- END KEY -->
<!-- BEGIN DATA -->
SAX2 事件处理程序的默认基类。

 <blockquote>
<em>此模块（包括源代码和文档）位于公共域中，对该模块<strong>不提供担保</strong>。</em>有关更多信息，请参阅<a href='http://www.saxproject.org'>http://www.saxproject.org</a>。
 </blockquote>

<p>此类可用作 SAX2 应用程序的有用基类：它提供四个核心 SAX2 处理程序类中的所有回调的默认实现：</p>

 <ul>
 <li>{@link org.xml.sax.EntityResolver EntityResolver}</li>
 <li>{@link org.xml.sax.DTDHandler DTDHandler}</li>
 <li>{@link org.xml.sax.ContentHandler ContentHandler}</li>
 <li>{@link org.xml.sax.ErrorHandler ErrorHandler}</li>
 </ul>

<p>应用程序编写者可以在他们仅需实现部分接口时扩展此类；当应用程序尚未提供其自己的处理程序时解析器编写者可通过实例化此类来提供默认的处理程序。</p>

<p>此类替换不推荐使用的 SAX1 {@link org.xml.sax.HandlerBase HandlerBase} 类。</p>

@since SAX 2.0
@author David Megginson,
@version 2.0.1 (sax2r2)
@see org.xml.sax.EntityResolver
@see org.xml.sax.DTDHandler
@see org.xml.sax.ContentHandler
@see org.xml.sax.ErrorHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.InputSource org.xml.sax.helpers.DefaultHandler.resolveEntity(String publicId, String systemId) throws java.io.IOException, org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
解析外部实体。

<p>将始终返回 null，因此解析器将使用 XML 文档中提供的系统标识符。此方法实现 SAX 默认的行为：应用程序编写者可以在子类中重写它以便进行诸如目录查找或 URI 重定向之类的特定转换。</p>

@param publicId 公共标识符，如果没有可用的，则为 null。
@param systemId 在 XML 文档中提供的系统标识符。
@return 新的输入源，或返回 null，以要求默认的行为。
@exception java.io.IOException 如果在设置新的输入源时发生错误。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.EntityResolver#resolveEntity

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.DefaultHandler.notationDecl(String name, String publicId, String systemId) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收注释声明的通知。

<p>默认情况下，不执行任何操作。如果应用程序编写者希望跟踪在文档中声明的注释，则可以在子类中重写此方法。</p>

@param name 注释名称。
@param publicId 注释公共标识符，如果没有可使用的则为 null。
@param systemId 注释系统标识符。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.DTDHandler#notationDecl

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.DefaultHandler.unparsedEntityDecl(String name, String publicId, String systemId, String notationName) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收未解析实体声明的通知。

<p>默认情况下，不执行任何操作。应用程序编写者可以在子类中重写此方法，以便跟踪在文档中声明的未解析实体。</p>

@param name 实体名称。
@param publicId 实体公共标识符，如果不可用，则为 null。
@param systemId 实体系统标识符。
@param notationName 相关联的注释的名称。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.DTDHandler#unparsedEntityDecl

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.DefaultHandler.setDocumentLocator(Locator locator)
<!-- END KEY -->
<!-- BEGIN DATA -->
接收文档事件的 Locator 对象。

<p>默认情况下，不执行任何操作。如果应用程序编写者希望存储定位器以用于其他的文档事件，则可以在子类中重写此方法。</p>

@param locator  用于所有 SAX 文档事件的定位器。
@see org.xml.sax.ContentHandler#setDocumentLocator
@see org.xml.sax.Locator

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.DefaultHandler.startDocument() throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收文档开始的通知。

<p>默认情况下，不执行任何操作。应用程序编写者可以在子类中重写此方法，以便在文档的开始采取特定的措施（如分配树的根节点或创建输出文件）。</p>

@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.ContentHandler#startDocument

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.DefaultHandler.endDocument() throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收文档结束的通知。

<p>默认情况下，不执行任何操作。应用程序编写者可以在子类中重写此方法，以便在文档的结束处采取特定的操作（如，结束树或关闭输出文件）。</p>

@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.ContentHandler#endDocument

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.DefaultHandler.startPrefixMapping(String prefix, String uri) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收名称空间映射开始的通知。

<p>默认情况下，不执行任何操作。应用程序编写者可以在子类中重写此方法，以便在每个名称空间前缀范围的开始处采取特定的操作（如存储前缀映射）。</p>

@param prefix 正在声明的名称空间前缀。
@param uri 映射到前缀的名称空间 URI。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.ContentHandler#startPrefixMapping

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.DefaultHandler.endPrefixMapping(String prefix) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收名称空间映射结束的通知。

<p>默认情况下，不执行任何操作。应用程序编写者可以在子类中重写此方法，以便在每个前缀映射的结束处采取特定的操作。</p>

@param prefix 正在声明的名称空间前缀。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.ContentHandler#endPrefixMapping

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.DefaultHandler.startElement(String uri, String localName, String qName, Attributes attributes) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收元素开始的通知。

<p>默认情况下，不执行任何操作。应用程序编写者可以在子类中重写此方法，以便在每个元素的开始处采取特定的操作（如，分配新的树节点或将输出写入文件）。</p>

@param uri 名称空间 URI，如果元素没有任何名称空间 URI，或者没有正在执行名称空间处理，则为空字符串。
@param localName 本地名称（不带前缀），如果没有正在执行名称空间处理，则为空字符串。
@param qName 限定的名称（带有前缀），如果限定的名称不可用，则为空字符串。
@param attributes 附加到元素的属性。如果没有属性，则它将是空的 Attributes 对象。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.ContentHandler#startElement

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.DefaultHandler.endElement(String uri, String localName, String qName) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收元素结束的通知。

<p>默认情况下，不执行任何操作。应用程序编写者可以在子类中重写此方法，以便在每个元素的结束处采取特定的操作（如，结束树节点或将输出写入文件）。</p>

@param uri 名称空间 URI，如果元素没有任何名称空间 URI，或者没有正在执行名称空间处理，则为空字符串。
@param localName 本地名称（不带前缀），如果没有正在执行名称空间处理，则为空字符串。
@param qName 限定的名称（带有前缀），如果限定的名称不可用，则为空字符串。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.ContentHandler#endElement

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.DefaultHandler.characters(char[] ch, int start, int length) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收元素中字符数据的通知。

<p>默认情况下，不执行任何操作。应用程序编写者可以重写此方法，以便对每块字符数据采取特定的措施（如将该数据添加到节点或缓冲区，或者将该数据打印到文件）。</p>

@param ch 字符。
@param start 字符数组中的开始位置。
@param length 从字符数组中使用的字符数。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.ContentHandler#characters

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.DefaultHandler.ignorableWhitespace(char[] ch, int start, int length) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收元素内容中可忽略空白的通知。

<p>默认情况下，不执行任何操作。应用程序编写者可以重写此方法，以便对每块可忽略的空白采取特定的措施（如将数据添加到节点或缓冲区，或者将数据打印到文件）。</p>

@param ch 空白字符。
@param start 字符数组中的开始位置。
@param length 从字符数组中使用的字符数。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.ContentHandler#ignorableWhitespace

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.DefaultHandler.processingInstruction(String target, String data) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收处理指令的通知。

<p>默认情况下，不执行任何操作。应用程序编写者可以在子类中重写此方法，以便对每个处理指令采取特定的措施，如设置状态变量或调用其他的方法。</p>

@param target 处理指令目标。
@param data 处理指令数据，如果未提供，则为 null。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.ContentHandler#processingInstruction

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.DefaultHandler.skippedEntity(String name) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收跳过的实体的通知。

<p>默认情况下，不执行任何操作。应用程序编写者可以在子类中重写此方法，以便对每个处理指令采取特定的措施，如设置状态变量或调用其他的方法。</p>

@param name 跳过的实体的名称。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.ContentHandler#processingInstruction

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.DefaultHandler.warning(SAXParseException e) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收解析器警告的通知。

<p>默认实现不执行任何操作。应用程序编写者可以在子类中重写此方法，以便对每个警告采取特定的措施，如在日志文件中插入消息，或者将它打印到控制台。</p>

@param e 被编码为异常的警告信息。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.ErrorHandler#warning
@see org.xml.sax.SAXParseException

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.DefaultHandler.error(SAXParseException e) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收可恢复的解析器错误的通知。

<p>默认实现不执行任何操作。应用程序编写者可以在子类中重写此方法，以便对每个错误采取特定的措施，如在日志文件中插入消息，或者将它打印到控制台。</p>

@param e 被编码为异常的错误信息。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.ErrorHandler#warning
@see org.xml.sax.SAXParseException

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.DefaultHandler.fatalError(SAXParseException e) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
 报告严重的 XML 解析错误。

<p>默认的实现抛出 SAXParseException。如果应用程序编写者需要对每个严重的错误采取特定的措施（如将所有的错误收集到一个报告中），则可以在子类中重写此方法：当调用此方法时，无论哪种情况，应用程序都必须停止所有的常规处理，这是因为文档已不再可靠，并且解析器再也不能报告解析事件。</p>

@param e 被编码为异常的错误信息。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@see org.xml.sax.ErrorHandler#fatalError
@see org.xml.sax.SAXParseException

<!-- END DATA -->
