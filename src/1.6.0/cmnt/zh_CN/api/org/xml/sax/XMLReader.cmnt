<!-- BEGIN KEY -->
public interface org.xml.sax.XMLReader
<!-- END KEY -->
<!-- BEGIN DATA -->
用于使用回调读取 XML 文档的接口。

 <blockquote>
<em>此模块（包括源代码和文档）在公共域中，同时 <strong>没有担保</strong>。</em>有关更多信息，请参阅 <a href='http://www.saxproject.org'>http://www.saxproject.org</a>。
 </blockquote>

<p><strong>注：</strong>不管其名称如何，此接口<em>不</em> 扩展标准的 Java {@link java.io.Reader Reader} 接口，因为读取 XML 是一个与读取字符数据完全不同的活动。</p>

<p>XMLReader 是 XML 解析器的 SAX2 驱动程序必须实现的接口。此接口允许应用程序设置和查询解析器中的功能和属性，注册文档处理的事件处理程序，以及开始文档解析。</p>

<p>所有的 SAX 接口都假定为是同步的：必须在完成分解后返回 {@link #parse parse} 方法，并且阅读器必须等待事件处理程序回调返回后才能报告下一个事件。</p>

<p>此接口取代了（现在不推荐） SAX 1.0 {@link org.xml.sax.Parser Parser} 接口。与旧的解析器接口（和某些监控器接口）相比，XMLReader 接口具有两大重要增强：</p>

 <ol>
<li>它增加了查询和设置功能和属性的标准方法；并且</li>
<li>增加了对名称空间的支持，这是许多高层的 XML 标准所必需的。</li>
 </ol>

<p>存在将 SAX1 解析器转换为 SAX2 XMLReader 的适配器并且反之亦然。</p>

@since SAX 2.0
@author David Megginson
@version 2.0.1+ (sax2r3pre1)
@see org.xml.sax.XMLFilter
@see org.xml.sax.helpers.ParserAdapter
@see org.xml.sax.helpers.XMLReaderAdapter 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.xml.sax.XMLReader.getFeature(String name) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
查找功能标志的值。

<p>功能名称是任何完全限定 URI。XMLReader 识别功能名称是可能的，但暂时不能返回它的值。有些功能值仅在特定的上下文中可用，例如在解析之前、期间或之后。另外，有些功能值不能以编程方式访问。（如果是用于 SAX1 {@link Parser} 的适配器，则将没有独立于实现的方法来公开基础解析器是否在执行验证，是否展开外部实体等。） </p>

<p>要求所有的 XMLReaders 都能识别 http://xml.org/sax/features/namespaces 和 http://xml.org/sax/features/namespace-prefixes 功能名称。</p>

<p>典型用途如下：</p>

 <pre>
 XMLReader r = new MySAXDriver();

                         // try to activate validation
 try {
   r.setFeature(&quot;http://xml.org/sax/features/validation&quot;, true);
 } catch (SAXException e) {
   System.err.println(&quot;Cannot activate validation.&quot;); 
 }

                         // register event handlers
 r.setContentHandler(new MyContentHandler());
 r.setErrorHandler(new MyErrorHandler());

                         // parse the first document
 try {
   r.parse(&quot;http://www.foo.com/mydoc.xml&quot;);
 } catch (IOException e) {
   System.err.println(&quot;I/O exception reading XML document&quot;);
 } catch (SAXException e) {
   System.err.println(&quot;XML exception reading document.&quot;);
 }
 </pre>

<p>通过使用在其自己的 URI 上构建的名称，实现可以随意（建议）设计其自己的功能。</p>

@param name 功能名称，它是一个完全限定 URI。
@return 该功能的当前值（true 或 false）。
@exception org.xml.sax.SAXNotRecognizedException 如果功能值不能分配或检索。
@exception org.xml.sax.SAXNotSupportedException 当 XMLReader 能够识别功能名称但此时却无法确定其值时。
@see #setFeature

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.XMLReader.setFeature(String name, boolean value) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置功能标志的值。

<p>功能名称是任何完全限定 URI。XMLReader 可以公开功能值，但却无法改变当前值。有些功能值仅在特定的上下文中不可改变或可以改变，例如在解析之前、期间或之后。</p>

<p>要求所有的 XMLReaders 支持把 http://xml.org/sax/features/namespaces 设置为 true，把 http://xml.org/sax/features/namespace-prefixes 设置为 false。</p>

@param name 功能名称，它是一个完全限定 URI。
@param value 请求的功能值（true 或 false）。
@exception org.xml.sax.SAXNotRecognizedException 如果功能值不能分配或检索。
@exception org.xml.sax.SAXNotSupportedException 当 XMLReader 能够识别功能名称但不能设置请求的值时。
@see #getFeature

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object org.xml.sax.XMLReader.getProperty(String name) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
查找属性的值。

<p>属性名称是任何完全限定 URI。XMLReader 可以识别属性名称，但暂时不能返回其值。有些属性值仅在特定的上下文中可用，例如在解析之前、期间或之后。</p>

<p>不要求 XMLReaders 能够识别任何特定的属性名称，但要记录 SAX2 的初始核心集。</p>

<p>使用在其自己的 URI 上构建的名称，实现可以随意（并且推荐）设计其自己的属性。</p>

@param name 属性名称，它是一个完全限定 URI。
@return 属性的当前值。
@exception org.xml.sax.SAXNotRecognizedException 如果属性值不能分配或检索。
@exception org.xml.sax.SAXNotSupportedException 当 XMLReader 能够识别属性名称但此时却不能确定其值时。
@see #setProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.XMLReader.setProperty(String name, Object value) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置属性的值。

<p>属性名称是任何完全限定 URI。XMLReader 可以识别属性名称，但却不能改变当前值。有些属性值仅在特定的上下文中不可改变或可以改变，例如在解析之前、期间或之后。</p>

<p>不要求 XMLReaders 知道设置任何特定的属性名称，尽管 SAX2 定义了核心集。</p>

<p>此方法还是用于设置扩展的处理程序的标准机制。</p>

@param name 属性名称，它是一个完全限定 URI。
@param value 请求的属性值。
@exception org.xml.sax.SAXNotRecognizedException 如果属性值不能分配或检索。
@exception org.xml.sax.SAXNotSupportedException 当 XMLReader 能够识别属性名称但却不能设置请求的值时。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.XMLReader.setEntityResolver(EntityResolver resolver)
<!-- END KEY -->
<!-- BEGIN DATA -->
允许应用程序注册实体解析器。

<p>如果应用程序不注册实体解析器，则 XMLReader 将执行其自己默认的解析。</p>

<p>应用程序还可以在解析期间注册新的或不同的解析器，并且 SAX 解析器必须立即开始使用新的解析器。</p>

@param resolver 实体解析器。
@see #getEntityResolver

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.EntityResolver org.xml.sax.XMLReader.getEntityResolver()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前的实体解析器。

@return 当前的实体解析器，如果尚未注册，则返回 null。
@see #setEntityResolver

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.XMLReader.setDTDHandler(DTDHandler handler)
<!-- END KEY -->
<!-- BEGIN DATA -->
允许应用程序注册 DTD 事件处理程序。

<p>如果应用程序不注册 DTD 处理程序，则将默默地忽略由 SAX 解析器报告的所有 DTD 事件。</p>

<p>应用程序还可以在解析期间注册新的或不同的处理程序，并且 SAX 解析器必须立即开始使用新的处理程序。</p>

@param handler DTD 处理程序。
@see #getDTDHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.DTDHandler org.xml.sax.XMLReader.getDTDHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前的 DTD 处理程序。

@return 当前的 DTD 处理程序，如果尚未注册，则返回 null。
@see #setDTDHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.XMLReader.setContentHandler(ContentHandler handler)
<!-- END KEY -->
<!-- BEGIN DATA -->
允许应用程序注册内容事件处理程序。

<p>如果应用程序不注册内容处理程序，则将默默地忽略由 SAX 解析器报告的所有内容事件。</p>

<p>应用程序还可以在解析期间注册新的或不同的处理程序，并且 SAX 解析器必须立即开始使用新的处理程序。</p>

@param handler 内容处理程序。
@see #getContentHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.ContentHandler org.xml.sax.XMLReader.getContentHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前的内容处理程序。

@return 当前的内容处理程序，如果尚未注册，则返回 null。
@see #setContentHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.XMLReader.setErrorHandler(ErrorHandler handler)
<!-- END KEY -->
<!-- BEGIN DATA -->
允许应用程序注册错误事件处理程序。

<p>如果应用程序不注册错误处理程序，则将默默地忽略由 SAX 解析器报告的所有错误事件；但是不能继续进行常规处理。强烈建议所有的 SAX 应用程序实现错误处理程序，以避免出现不可预料的故障。</p>

<p>应用程序还可以在解析期间注册新的或不同的处理程序，并且 SAX 解析器必须立即开始使用新的处理程序。</p>

@param handler 错误处理程序。
@see #getErrorHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.ErrorHandler org.xml.sax.XMLReader.getErrorHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前的错误处理程序。

@return 当前的错误处理程序，如果尚未注册，则返回 null。
@see #setErrorHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.XMLReader.parse(InputSource input) throws java.io.IOException, org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
解析 XML 文档。

<p>应用程序可以使用此方法指导 XML reader 开始解析来自任何有效输入源（字符流、字节流或 URI）的 XML 文档。</p>

<p>在解析正在进行时，应用程序不能调用此方法（它们必须为每个嵌套的 XML 文档创建新的 XMLReader）。一旦完成了解析，应用程序就可以重新使用同一个 XMLReader 对象（可能带有不同的输入源）。在完成解析之前对 XMLReader 对象的配置（例如为功能标记和属性建立的处理程序绑定和值）是不可改变的，除非配置在此方面的定义显式指定了其他行为。（例如，公开被解析的文档的特征的功能标记或属性。）
 </p>

<p>在解析期间，XMLReader 通过已注册的事件处理程序提供关于 XML 文档的信息。</p>

<p>此方法是同步的：它直到解析结束后才返回。如果客户端应用程序希望提前终止解析，则它应该抛出一个异常。</p>

@param input XML 文档的顶层的输入源。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@exception java.io.IOException 解析器发出的 IO 异常，可能来自应用程序提供的字节流或字符流。
@see org.xml.sax.InputSource
@see #parse(java.lang.String)
@see #setEntityResolver
@see #setDTDHandler
@see #setContentHandler
@see #setErrorHandler 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.XMLReader.parse(String systemId) throws java.io.IOException, org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
从系统标识符 (URI) 解析 XML 文档。

<p>此方法是从系统标识符读取文档这一常见情形的捷径。它完全等效于以下方法：</p>

 <pre>
 parse(new InputSource(systemId));
 </pre>

<p>如果系统标识符是 URL，则在将它传递到解析器之前必须由应用程序对它进行完整的解析。</p>

@param systemId 系统标识符 (URI)。
@exception org.xml.sax.SAXException 任何 SAX 异常，可能包装另外的异常。
@exception java.io.IOException 解析器发出的 IO 异常，可能来自应用程序提供的字节流或字符流。
@see #parse(org.xml.sax.InputSource)

<!-- END DATA -->
