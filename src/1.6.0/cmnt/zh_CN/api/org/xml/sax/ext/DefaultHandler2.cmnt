<!-- BEGIN KEY -->
public class org.xml.sax.ext.DefaultHandler2 extends org.xml.sax.helpers.DefaultHandler implements org.xml.sax.ext.LexicalHandler, org.xml.sax.ext.DeclHandler, org.xml.sax.ext.EntityResolver2
<!-- END KEY -->
<!-- BEGIN DATA -->
此类扩展 SAX2 基本处理程序类，以支持 SAX2 {@link LexicalHandler}、{@link DeclHandler} 和 {@link EntityResolver2} 扩展。除了重写原始 SAX1 {@link DefaultHandler#resolveEntity resolveEntity()} 方法之外，仅返回添加的处理程序方法。子类可能在逐个方法的基础上重写每个事情。

 <blockquote>
<em>此模块（包括源代码和文档）在公共域中，同时 <strong>没有担保</strong>。</em>
 </blockquote>

<p> <em>注：</em>此类可能仍知道 <em>ContentHandler.setDocumentLocator()</em> 调用可能被传递一个 {@link Locator2} 对象，并且 <em>ContentHandler.startElement()</em> 调用被传递一个 {@link Attributes2} 对象。

@since SAX 2.0 (extensions 1.1 alpha)
@author David Brownell
@version TBS

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.ext.DefaultHandler2()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造忽略所有解析事件的处理程序。
<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.InputSource org.xml.sax.ext.DefaultHandler2.getExternalSubset(String name, String baseURI) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
告知解析器如果在文档文本中没有声明任何外部子集，则不应使用任何外部子集。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.InputSource org.xml.sax.ext.DefaultHandler2.resolveEntity(String name, String publicId, String baseURI, String systemId) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 告知解析器根据 baseURI 解析 systemId，并从产生的绝对 URI 读取实体文本。注意，因为是重写旧的 {@link DefaultHandler#resolveEntity DefaultHandler.resolveEntity()} 方法以调用此方法，所以有时可以使用 null <em>名称</em> 和 <em>baseURI</em> 以及已经绝对化的 <em>systemId</em> 调用此方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.InputSource org.xml.sax.ext.DefaultHandler2.resolveEntity(String publicId, String systemId) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 null 实体名称和基 URI 调用 {@link EntityResolver2#resolveEntity EntityResolver2.resolveEntity()}。为使用此类，只需重写该方法。

<!-- END DATA -->
