<!-- BEGIN KEY -->
public class org.xml.sax.helpers.AttributesImpl extends java.lang.Object implements org.xml.sax.Attributes
<!-- END KEY -->
<!-- BEGIN DATA -->
Attributes 接口的默认实现。

 <blockquote>
<em>此模块（包括源代码和文档）位于公共域中，对该模块<strong>不提供担保</strong>。</em>有关更多信息，请参阅<a href='http://www.saxproject.org'>http://www.saxproject.org</a>。
 </blockquote>

<p>此类提供 SAX2 {@link org.xml.sax.Attributes Attributes} 接口的默认实现，并附带操纵器，以便可以修改或重用列表。</p>

<p>此类有两种典型的用途：</p>

 <ol>
<li>在 {@link org.xml.sax.ContentHandler#startElement startElement} 事件中捕获 Attributes 对象的持久快照；或</li>
<li>在 SAX2 驱动程序或过滤器中构造或修改 Attributes 对象。</li>
 </ol>

<p>此类可以替换现已不推荐使用的 SAX1 {@link org.xml.sax.helpers.AttributeListImpl AttributeListImpl} 类；除了支持更新的 Attributes 接口（而不是不推荐使用的 {@link org.xml.sax.AttributeList AttributeList} 接口）外，它还包括使用单个数组（而不是向量集）更加有效的实现。</p>

@since SAX 2.0
@author David Megginson
@version 2.0.1 (sax2r2)

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.helpers.AttributesImpl()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的空 AttributesImpl 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.helpers.AttributesImpl(Attributes atts)
<!-- END KEY -->
<!-- BEGIN DATA -->
复制现有 Attributes 对象。

<p>在 {@link org.xml.sax.ContentHandler#startElement startElement} 事件中，此构造方法特别有用。</p>

@param atts 现有 Attributes 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int org.xml.sax.helpers.AttributesImpl.getLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回列表中的属性个数。

@return 此列表中的属性个数。
@see org.xml.sax.Attributes#getLength

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.xml.sax.helpers.AttributesImpl.getURI(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回属性的名称空间 URI。

@param index 属性的索引（从零开始）。
@return 名称空间 URI，如果没有可用的，则返回空字符串；如果索引超出范围，则返回 null。
@see org.xml.sax.Attributes#getURI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.xml.sax.helpers.AttributesImpl.getLocalName(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回属性的本地名称。

@param index 属性的索引（从零开始）。
@return 属性的本地名称，如果没有，则返回空字符串；如果索引超出范围，则返回 null。
@see org.xml.sax.Attributes#getLocalName

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.xml.sax.helpers.AttributesImpl.getQName(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回属性的限定（加前缀的）名称。

@param index 属性的索引（从零开始）。
@return 属性的限定名称，如果没有可用的，则返回空字符串；如果索引超出范围，则返回 null。
@see org.xml.sax.Attributes#getQName

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.xml.sax.helpers.AttributesImpl.getType(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过索引返回属性的类型。

@param index 属性的索引（从零开始）。
@return 属性的类型，如果类型是未知的，则返回 &quot;CDATA&quot;；如果索引超出范围，则返回 null。
@see org.xml.sax.Attributes#getType(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.xml.sax.helpers.AttributesImpl.getValue(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过索引返回属性的值。

@param index 属性的索引（从零开始）。
@return 属性的值，如果索引超出范围，则返回 null。
@see org.xml.sax.Attributes#getValue(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int org.xml.sax.helpers.AttributesImpl.getIndex(String uri, String localName)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过名称空间名称查找属性的索引。

<p>在许多情况下，查找一次名称并使用索引查询方法而不重复使用名称查询方法是非常有效的。</p>

@param uri 属性的名称空间 URI，如果没有可用的，则为空字符串。
@param localName 属性的本地名称。
@return 属性的索引，如果没有任何内容相匹配，则返回 -1。
@see org.xml.sax.Attributes#getIndex(java.lang.String,java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int org.xml.sax.helpers.AttributesImpl.getIndex(String qName)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过限定（加前缀的）名称查找属性的索引。

@param qName 限定的名称。
@return 属性的索引，如果没有任何内容相匹配，则返回 -1。
@see org.xml.sax.Attributes#getIndex(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.xml.sax.helpers.AttributesImpl.getType(String uri, String localName)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过限定名称空间的名称查找属性的类型。

@param uri 名称空间 URI，对于不带显式的名称空间 URI 的名称，则为空字符串。
@param localName 本地名称。
@return 属性的类型，如果没有任何匹配的属性，则为 null。
@see org.xml.sax.Attributes#getType(java.lang.String,java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.xml.sax.helpers.AttributesImpl.getType(String qName)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过限定（加前缀的）名称查找属性的类型。

@param qName 限定的名称。
@return 属性的类型，如果没有任何匹配的属性，则为 null。
@see org.xml.sax.Attributes#getType(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.xml.sax.helpers.AttributesImpl.getValue(String uri, String localName)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过限定名称空间的名称查找属性的值。

@param uri 名称空间 URI，对于不带显式名称空间 URI 的名称，则为空字符串。
@param localName 本地名称。
@return 属性的值，如果没有任何匹配的属性，则为 null。
@see org.xml.sax.Attributes#getValue(java.lang.String,java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.xml.sax.helpers.AttributesImpl.getValue(String qName)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过限定（加前缀的）名称查找属性的值。

@param qName 限定的名称。
@return 属性的值，如果没有任何匹配的属性，则为 null。
@see org.xml.sax.Attributes#getValue(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.AttributesImpl.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
为了重用而清除属性列表。

<p>注意，此调用几乎不释放内存：保存当前数组，以便重用。</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.AttributesImpl.setAttributes(Attributes atts)
<!-- END KEY -->
<!-- BEGIN DATA -->
复制整个 Attributes 对象。

<p>重用现有对象比不断分配新对象更高效。</p>
 
@param atts 要复制的属性。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.AttributesImpl.addAttribute(String uri, String localName, String qName, String type, String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
将属性添加到列表的末尾。

<p>由于速度的原因，此方法将不进行检查以查看属性是否已在列表中：这由应用程序负责。</p>

@param uri 名称空间 URI，如果没有可用的，或不是正在执行名称空间处理，则为空字符串。
@param localName 本地名称，如果不是正在执行名称空间处理，则为空字符串。
@param qName 限定（加前缀的）名称，如果限定名称不可用，则为空字符串。
@param type 字符串形式的属性类型。
@param value 属性值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.AttributesImpl.setAttribute(int index, String uri, String localName, String qName, String type, String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
在列表中设置属性。

<p>由于速度的原因，此方法不检查名称是否冲突或格式是否良好：此类检查由应用程序负责。</p>

@param index 属性的索引（从零开始）。
@param uri 名称空间 URI，如果没有，或不是正在执行名称空间处理，则为空字符串。
@param localName 本地名称，如果不是正在执行名称空间处理，则为空字符串。
@param qName 限定的名称，如果限定的名称不可用，则为空字符串。
@param type 字符串形式的属性类型。
@param value 属性值。
@exception java.lang.ArrayIndexOutOfBoundsException 当提供的索引不指向列表中的属性时。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.AttributesImpl.removeAttribute(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
从列表移除属性。

@param index 属性的索引（从零开始）。
@exception java.lang.ArrayIndexOutOfBoundsException 当提供的索引不指向列表中的属性时。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.AttributesImpl.setURI(int index, String uri)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置特定属性的名称空间 URI。

@param index 属性的索引（从零开始）。
@param uri 属性的名称空间 URI，如果没有，则为空字符串。
@exception java.lang.ArrayIndexOutOfBoundsException 当提供的索引不指向列表中的属性时。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.AttributesImpl.setLocalName(int index, String localName)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置特定属性的本地名称。

@param index 属性的索引（从零开始）。
@param localName 属性的本地名称，如果没有，则为空字符串。
@exception java.lang.ArrayIndexOutOfBoundsException 当提供的索引不指向列表中的属性时。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.AttributesImpl.setQName(int index, String qName)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置特定属性的限定名称。

@param index 属性的索引（从零开始）。
@param qName 属性的限定名称，如果没有，则为空字符串。
@exception java.lang.ArrayIndexOutOfBoundsException 当提供的索引不指向列表中的属性时。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.AttributesImpl.setType(int index, String type)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置特定属性的类型。

@param index 属性的索引（从零开始）。
@param type 属性的类型。
@exception java.lang.ArrayIndexOutOfBoundsException 当提供的索引不指向列表中的属性时。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.AttributesImpl.setValue(int index, String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置特定属性的值。

@param index 属性的索引（从零开始）。
@param value 属性的值。
@exception java.lang.ArrayIndexOutOfBoundsException 当提供的索引不指向列表中的属性时。

<!-- END DATA -->
