<!-- BEGIN KEY -->
public interface org.w3c.dom.Attr extends org.w3c.dom.Node
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Attr</code> 接口表示 <code>Element</code> 对象中的属性。通常该属性所允许的值定义在与文档相关的模式中。
<p><code>Attr</code> 对象继承 <code>Node</code> 接口，但由于它们实际上不是它们描述的元素的子节点，DOM 不会将它们看作文档树的一部分。因此，<code>Node</code> 的属性 <code>parentNode</code>、<code>previousSibling</code> 和 <code>nextSibling</code> 具有用于 <code>Attr</code> 对象的 <code>null</code> 值。DOM 认为元素的属性是其特性，而不是一个来自于它们所关联的元素的独立的身份；这应该使实现把这种特征作为与所有给定类型的元素相关联的默认属性更为有效。此外，<code>Attr</code> 节点不可以是 <code>DocumentFragment</code> 的直接子节点。不过，它们可以与包含在 <code>DocumentFragment</code> 内的 <code>Element</code> 节点相关联。简而言之，DOM 的用户和实现者需要知道 <code>Attr</code> 节点与从 <code>Node</code> 接口继承的其他对象有些共同之处，但它们还是截然不同的。
<p>该属性的有效值按如下方式确定：如果为此属性明确分配了任何值，则此值为该属性的有效值；否则，如果声明了此属性，且该声明包括默认值，则该默认值为属性的有效值；否则，直到明确添加了属性，该属性才会存在于结构模型中的这一元素上。注意，<code>Attr</code> 实例上的 <code>Node.nodeValue</code> 属性还可以用于检索该属性值的字符串版本。
<p> 如果该属性未在实例文档中明确给定值，但有与文档相关的模式提供的一个默认值，则创建属性节点时把 <code>specified</code> 设置为 <code>false</code>。移除在模式中为其定义了默认值的属性节点将生成一个具有默认值和 <code>specified</code> 设置为 <code>false</code> 的新属性节点。如果调用 <code>Document.normalizeDocument()</code> 时出现确认，则按照由模式提供的默认属性值重新计算 <code>specified</code> 等于 <code>false</code> 的属性节点。如果没有默认值与模式中的这一属性相关联，则该属性节点被丢弃。 
<p>在 XML 中，属性值可以包含实体引用，<code>Attr</code> 节点的子节点可以是 <code>Text</code> 或 <code>EntityReference</code> 节点（当使用这些节点时；有关讨论，请参阅 <code>EntityReference</code> 的描述）。 
<p>DOM Core 表示作为简单字符串的所有属性值，即使与文档相关联的 DTD 或模式声明它们是某个特定类型（如 tokenized）。 
<p>由 DOM 实现执行的属性值规范化的方式取决于该实现对使用的模式的了解程度。通常，<code>Attr</code> 节点的 <code>value</code> 和 <code>nodeValue</code> 属性最初返回由解析器给定的标准化值。调用 <code>Document.normalizeDocument()</code> 之后的情况也是这样（假定设置了正确的选项）。但变化后可能不是这样，与是通过直接设置字符串值还是通过更改 <code>Attr</code> 子节点执行变化无关。特别是，当涉及 <a href='http://www.w3.org/TR/2004/REC-xml-20040204#dt-charref'>character references</a> 时、给出那些不在 DOM 中表示的和影响属性值标准化的时是这种情况，另一方面，如果该实现知道更改属性值时使用的模式，且它与 CDATA 属于不同的类型，则它可以在该时再一次对其执行标准化。对于特殊的 DOM 实现（如 SVG DOM 实现）而言尤其如此，这些实现都会以不同于字符串的内部形式存储属性值。
<p>下表给出了一些示例，表示初始文档中的属性（已解析的属性）值、在 DOM 中公开的值和序列化的值之间的关系： 
 <table border='1' cellpadding='3'>
 <tr>
<th>以下是例子</th>
<th>已解析的属性值</th>
<th>初始 <code>Attr.value</code></th>
<th>已序列化的属性值</th>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'>
字符引用</td>
 <td valign='top' rowspan='1' colspan='1'>
 <pre>&quot;x&#178;=5&quot;</pre>
 </td>
 <td valign='top' rowspan='1' colspan='1'>
 <pre>&quot;x?=5&quot;</pre>
 </td>
 <td valign='top' rowspan='1' colspan='1'>
 <pre>&quot;x&#178;=5&quot;</pre>
 </td>
 </tr>
 <tr>
<td valign='top' rowspan='1' colspan='1'>内置的字符实体</td>
 <td valign='top' rowspan='1' colspan='1'>
 <pre>&quot;y&lt;6&quot;</pre>
 </td>
 <td valign='top' rowspan='1' colspan='1'>
 <pre>&quot;y&lt;6&quot;</pre>
 </td>
 <td valign='top' rowspan='1' colspan='1'>
 <pre>&quot;y&lt;6&quot;</pre>
 </td>
 </tr>
 <tr>
<td valign='top' rowspan='1' colspan='1'>以下值之间的字面值新行</td>
 <td valign='top' rowspan='1' colspan='1'>
 <pre>
 &quot;x=5&#10;y=6&quot;</pre>
 </td>
 <td valign='top' rowspan='1' colspan='1'>
 <pre>&quot;x=5 y=6&quot;</pre>
 </td>
 <td valign='top' rowspan='1' colspan='1'>
 <pre>&quot;x=5&#10;y=6&quot;</pre>
 </td>
 </tr>
 <tr>
<td valign='top' rowspan='1' colspan='1'>以下值之间的已标准化新行</td>
 <td valign='top' rowspan='1' colspan='1'>
 <pre>&quot;x=5 
 y=6&quot;</pre>
 </td>
 <td valign='top' rowspan='1' colspan='1'>
 <pre>&quot;x=5 y=6&quot;</pre>
 </td>
 <td valign='top' rowspan='1' colspan='1'>
 <pre>&quot;x=5 y=6&quot;</pre>
 </td>
 </tr>
 <tr>
<td valign='top' rowspan='1' colspan='1'>具有字面值新行的实体 <code>e</code></td>
 <td valign='top' rowspan='1' colspan='1'>
 <pre>
 &lt;!ENTITY e '...&#10;...'&gt; [...]&gt; &quot;x=5&e;y=6&quot;</pre>
 </td>
<td valign='top' rowspan='1' colspan='1'><em>对实现和加载选项的依赖性</em></td>
<td valign='top' rowspan='1' colspan='1'><em>对实现和加载/保存选项的依赖性</em></td>
 </tr>
 </table>
<p>另请参见 <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.Attr.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此属性的名称。如果 <code>Node.localName</code> 与 <code>null</code> 不同，则此属性是一个限定名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.Attr.getSpecified()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果在实例文档中显式给此属性一个值，则为 <code>True</code>；否则为 <code>false</code>。如果应用程序更改了此属性节点的值（即使它在结尾时有与默认值相同的值），则将它设置为 <code>true</code>。类似地，该实现可以根据其他模式处理具有默认值的属性，但应用程序应该使用 <code>Document.normalizeDocument()</code> 来保证此信息最新。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.Attr.getValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
检索时，该属性值以字符串形式返回。字符和常规实体引用将使用其值替换。另请参见 <code>Element</code> 接口上的方法 <code>getAttribute</code>。<br>设置时，此方法使用该字符串的未解析的内容创建 <code>Text</code> 节点，即将 XML 处理器识别为标记的所有字符视为字面值文本。另请参见方法 <code>Element.setAttribute()</code>。<br> 有些特殊的实现（如一些 [<a href='http://www.w3.org/TR/2003/REC-SVG11-20030114/'>SVG 1.1</a>] 实现）可以自动执行标准化，即使变化后也一样；在此情况下，检索的值可以与设置的值不同。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.Attr.setValue(String value) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
检索时，该属性值以字符串形式返回。字符和常规实体引用将使用其值替换。另请参见 <code>Element</code> 接口上的方法 <code>getAttribute</code>。<br>设置时，此方法使用该字符串的未解析的内容创建 <code>Text</code> 节点，即将 XML 处理器识别为标记的所有字符视为字面值文本。另请参见方法 <code>Element.setAttribute()</code>。<br> 有些特殊的实现（如一些 [<a href='http://www.w3.org/TR/2003/REC-SVG11-20030114/'>SVG 1.1</a>] 实现）可以自动执行标准化，即使变化后也一样；在此情况下，检索的值可以与设置的值不同。
@exception DOMException NO_MODIFICATION_ALLOWED_ERR:当节点为只读的时引发此异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Element org.w3c.dom.Attr.getOwnerElement()
<!-- END KEY -->
<!-- BEGIN DATA -->
此属性连接到的 <code>Element</code> 节点；如果未使用此属性，则为 <code>null</code>。
@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.TypeInfo org.w3c.dom.Attr.getSchemaTypeInfo()
<!-- END KEY -->
<!-- BEGIN DATA -->
与此属性相关联的类型信息。在加载文档或调用 <code>Document.normalizeDocument()</code> 之后保证此属性中包含的类型信息正确时，如果节点被移动，则 <code>schemaTypeInfo</code> 不能不可靠。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.Attr.isId()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回是否此属性属于类型 ID（即包含其所有者元素的标识符）。如果是且其值是唯一的，则可以使用方法 <code>Document.getElementById</code> 检索此属性的 <code>ownerElement</code>。实现可以使用几种方法确定是否知道属性节点包含标识符： 
 <ul>
<li> 如果在加载文档或调用 <code>Document.normalizeDocument()</code> 时出现使用 XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>] 的验证，则使用后模式验证信息集贡献（PSVI 贡献）值确定此属性是否是使用 [<a href='http://www.w3.org/TR/2003/REC-xptr-framework-20030325/'>XPointer</a>] 中的 <a href='http://www.w3.org/TR/2003/REC-xptr-framework-20030325/#term-sdi'>schema-determined ID</a> 定义的模式确定的 ID 属性。 
 </li>
<li> 如果在加载文档或在调用 <code>Document.normalizeDocument()</code> 时使用 DTD 进行验证，则使用信息集 <b>[type definition]</b> 值确定此属性是否是使用 [<a href='http://www.w3.org/TR/2003/REC-xptr-framework-20030325/'>XPointer</a>] 中的 <a href='http://www.w3.org/TR/2003/REC-xptr-framework-20030325/#term-ddi'>DTD-determined ID</a> 定义的 DTD 确定的 ID 属性。 
 </li>
<li> 使用方法 <code>Element.setIdAttribute()</code>、<code>Element.setIdAttributeNS()</code> 或 <code>Element.setIdAttributeNode()</code> 的属性，即它是用户确定的 ID 属性；
<p ><b>注：</b> XPointer 框架（参阅 [<a href='http://www.w3.org/TR/2003/REC-xptr-framework-20030325/'>XPointer</a>] 中的 3.2 节）将 DOM 用户确定的 ID 属性视为 XPointer 外部确定的 ID 定义的一部分。 
 </li>
<li> 使用此规范范围之外的机制，则它是外部确定的 ID 属性。这包括使用与 XML 模式和 DTD 不同的模式语言。 
 </li>
 </ul>
<br> 如果在调用 <code>Document.normalizeDocument()</code> 时出现确认，则重置所有用户确定的 ID 属性，然后重新评诂所有属性节点 ID 信息与使用的模式是否一致。因此，如果 <code>Attr.schemaTypeInfo</code> 属性包含 ID 类型，则 <code>isId</code> 将始终返回 true。
@since DOM Level 3

<!-- END DATA -->
