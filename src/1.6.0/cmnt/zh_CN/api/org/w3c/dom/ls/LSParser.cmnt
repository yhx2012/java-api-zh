<!-- BEGIN KEY -->
public interface org.w3c.dom.ls.LSParser
<!-- END KEY -->
<!-- BEGIN DATA -->
可以构建的对象接口，或者参数、来自各种输入源的 DOM 树。 
<p> <code>LSParser</code> 提供了用于解析 XML 和构建相应的 DOM 文档结构的 API。<code>LSParser</code> 实例可以通过调用 <code>DOMImplementationLS.createLSParser()</code> 方法获取。 
<p> 如 [<a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>DOM Level 3 Core</a>] 中指定的那样，当通过 LSParser 第一次使文档可供使用时：
 <ul>
<li> 从不会有两个 NODE_TEXT 类型的相邻节点，并且从不会有空的文本节点。 
 </li>
<li> 期望 <code>Attr</code> 节点的 <code>value</code> 和 <code>nodeValue</code> 属性最初返回《<a href='http://www.w3.org/TR/2004/REC-xml-20040204#AVNormalize'>XML 1.0 normalized value</a>》。但是，如果参数《<a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-validate-if-schema'>validate-if-schema</a>》和《<a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-datatype-normalization'>datatype-normalization</a>》被设置为 <code>true</code>，由于属性值依赖于所使用的属性标准化，所以该值会不同于通过 XML 1.0 属性标准化而获得的值。如果把参数《<a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-datatype-normalization'>datatype-normalization</a>》设置为 <code>false</code>，则可以保证进行 XML 1.0 属性标准化，如果属性列表不包括名称空间声明，则 <code>Element</code> 字节上的 <code>attributes</code> 属性表示在 [<a href='http://www.w3.org/TR/2004/REC-xml-infoset-20040204/'>XML Information Set</a>] 中定义的属性 <b>[attributes]</b>。 
 </li>
 </ul>
<p> 期望异步 <code>LSParser</code> 对象也实现 <code>events::EventTarget</code> 接口，以便事件侦听器能够在异步 <code>LSParser</code> 对象上注册。 
<p> 异步 <code>LSParser</code> 对象所支持的事件包括： 
 <dl>
 <dt>load</dt>
 <dd>
<code>LSParser</code> 完成对文档的加载。另请参见 <code>LSLoadEvent</code> 接口的定义。 </dd>
 <dt>progress</dt>
<dd> 在解析数据时 <code>LSParser</code> 通知进度情况。此规范并不尝试精确定义应该何时调度进度事件。而是有意让其具有实现依赖性。下面是一个应用程序如何调度进度事件的示例：一旦解析器开始接收数据，则将调度进度事件，以表示解析已开始。从这时起，为接收和处理的每 4096 个字节数据调度进度事件。但这只是一个示例，实现可以在解析期间的任何时间选择调度进度事件，或者根本不调度这些事件。另请参见 <code>LSProgressEvent</code> 接口的定义。</dd>
 </dl>
<p ><b>注：</b>此规范中定义的所有事件都使用名称空间 URI <code>&quot;http://www.w3.org/2002/DOMLS&quot;</code>。 
<p> 在解析输入源时，通过错误处理程序（<code>LSParser.domConfig</code> 的 &quot;<a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler'>error-handler</a>&quot; 参数）将错误报告给应用程序。此规范决不尝试定义解析 XML 或者其他任何标记时所有可能发生的错误，但对一些常见的错误情形做了定义。此规范定义的错误和警告类型 (<code>DOMError.type</code>) 包括： 
 <dl>
 <dt> 
 <code>&quot;check-character-normalization-failure&quot; [error]</code> </dt>
<dd> 如果参数 &quot;<a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-check-character-normalization'>check-character-normalization</a>&quot; 设置为 true 并且碰到标准化检查失败的字符串，则将引发此错误。 </dd>
 <dt><code>&quot;doctype-not-allowed&quot; [fatal]</code></dt>
<dd> 如果配置参数 &quot;disallow-doctype&quot; 设置为 <code>true</code> 并且遇到了 doctype，则将引发此错误。 </dd>
 <dt><code>&quot;no-input-specified&quot; [fatal]</code></dt>
 <dd> 
当加载文档并且未在 <code>LSInput</code> 对象中指定输入时引发此错误。 </dd>
 <dt>
 <code>&quot;pi-base-uri-not-preserved&quot; [warning]</code></dt>
<dd> 如果在不能保留处理指令的基 URI 位置遇到处理指令，则引发此警告。将引发此警告的一种情况示例是：配置参数 &quot;<a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-entities'>entities</a>&quot; 被设置为 <code>false</code> 并且将解析下面的 XML 文件： 
 <pre>
 &lt;!DOCTYPE root [ &lt;!ENTITY e SYSTEM 'subdir/myentity.ent' ]&gt; 
 &lt;root&gt; &e; &lt;/root&gt;</pre>
<code>subdir/myentity.ent</code> 包括： 
 <pre>&lt;one&gt; &lt;two/&gt; &lt;/one&gt; &lt;?pi 3.14159?&gt; 
 &lt;more/&gt;</pre>
 </dd>
 <dt><code>&quot;unbound-prefix-in-entity&quot; [warning]</code></dt>
<dd> 这是一个独立于实现的警告，如果配置参数 &quot;<a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-namespaces'>namespaces</a>&quot; 设置为 <code>true</code> 并且在实体的替换文本中碰到了未绑定的名称空间前缀时,可以引发此警告。并非强制引发此警告，因为有些现有的解析器不能在实体的替换文本中识别未绑定的名称空间前缀。 </dd>
 <dt>
 <code>&quot;unknown-character-denormalization&quot; [fatal]</code></dt>
<dd> 如果配置参数 &quot;ignore-unknown-character-denormalizations&quot; 设置为 <code>false</code> 并且遇到了处理器无法为其确定标准化属性的字符，则引发此错误。 </dd>
 <dt>
 <code>&quot;unsupported-encoding&quot; [fatal]</code></dt>
<dd> 如果遇到了不支持的编码，则引发此错误。 </dd>
 <dt><code>&quot;unsupported-media-type&quot; [fatal]</code></dt>
 <dd> 
如果配置参数 &quot;supported-media-types-only&quot; 设置为 <code>true</code> 并且遇到了不支持的媒体类型，则引发此错误。 </dd>
 </dl> 
<p> 除了引发定义的错误和警告之外，期望实现应该对其他任何错误和警告情况，例如 IO 错误（未找到文件，权限被拒绝）、XML 格式良好性错误等引发特定于实现的错误和警告。 
<p>另请参见《<a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407'>Document Object Model (DOM) Level 3 Load and Save Specification</a>》。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.ls.LSParser.ACTION_APPEND_AS_CHILDREN
<!-- END KEY -->
<!-- BEGIN DATA -->
将解析操作的结果追加为上下文节点的子节点。为了使此动作起作用，上下文节点必须是 <code>Element</code> 或 <code>DocumentFragment</code>。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.ls.LSParser.ACTION_REPLACE_CHILDREN
<!-- END KEY -->
<!-- BEGIN DATA -->
用解析操作的结果替换上下文节点的所有子节点。为了使此动作有效，上下文节点必须是 <code>Element</code>、<code>Document</code> 或 <code>DocumentFragment</code>。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.ls.LSParser.ACTION_INSERT_BEFORE
<!-- END KEY -->
<!-- BEGIN DATA -->
把解析操作的结果作为上下文节点的直接前置兄弟节点插入。为了使此操作有效，上下文节点的父节点必须是 <code>Element</code> 或 <code>DocumentFragment</code>。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.ls.LSParser.ACTION_INSERT_AFTER
<!-- END KEY -->
<!-- BEGIN DATA -->
把解析操作的结果作为上下文节点的直接后续兄弟节点插入。为了使此操作有效，上下文节点的父节点必须是 <code>Element</code> 或 <code>DocumentFragment</code>。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.ls.LSParser.ACTION_REPLACE
<!-- END KEY -->
<!-- BEGIN DATA -->
用解析操作的结果替换上下文节点。为了使此操作有效，上下文节点必须具有父节点，并且父节点必须是 <code>Element</code> 或 <code>DocumentFragment</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.DOMConfiguration org.w3c.dom.ls.LSParser.getDomConfig()
<!-- END KEY -->
<!-- BEGIN DATA -->
解析输入源时使用的 <code>DOMConfiguration</code> 对象。此 <code>DOMConfiguration</code> 特定于解析操作。在由解析操作创建或使用的 <code>Document</code> 上，没有参数值从此 <code>DOMConfiguration</code> 对象被自动传递到 <code>DOMConfiguration</code> 对象。DOM 应用程序负责将任何所需的参数值从此 <code>DOMConfiguration</code> 对象传递到由 <code>Document</code> 对象引用的 <code>DOMConfiguration</code> 对象。<br> 除在 &quot;<a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMConfiguration'>DOMConfiguration</a>&quot; 接口（在 [<a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>DOM Level 3 Core</a>] 中定义）上识别的参数之外，针对 <code>LSParser</code> 的 <code>DOMConfiguration</code> 对象还可以添加或修改以下参数： 
 <dl>
 <dt>
 <code>&quot;charset-overrides-xml-encoding&quot;</code></dt>
 <dd>
 <dl>
<dt><code>true</code></dt>
<dd>[<em>可选</em>]（<em>默认</em>）如果高层协议（如 HTTP）[<a href='http://www.ietf.org/rfc/rfc2616.txt'>IETF RFC 2616</a>] 提供了对正被处理的输入流的字符编码的指示，则将重写在 XML 声明或 Text 声明中指定的任何编码（另请参见 [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>] 中的 4.3.3 节 &quot;Character Encoding in Entities&quot;）。显式在 <code>LSInput</code> 中设置编码将重写协议中的任何编码。</dd>
<dt><code>false</code></dt>
<dd>[<em>必需</em>] 解析器将忽略高层协议的任何字符集编码信息。 </dd>
 </dl></dd>
 <dt><code>&quot;disallow-doctype&quot;</code></dt>
 <dd>
 <dl>
 <dt>
<code>true</code></dt>
<dd>[<em>可选</em>] 如果在解析文档时出现了 doctype 节点，则将抛出严重的 <b>&quot;doctype-not-allowed&quot;</b> 错误。这在处理诸如 SOAP 信封之类的不允许有 doctype 节点的文档时非常有用。 </dd>
<dt><code>false</code></dt>
<dd>[<em>必需</em>]（<em>默认</em>）允许文档中的 doctype 节点。 </dd>
 </dl></dd>
 <dt>
 <code>&quot;ignore-unknown-character-denormalizations&quot;</code></dt>
 <dd>
 <dl>
 <dt>
<code>true</code></dt>
<dd>[<em>必需</em>]（<em>默认</em>）如果在检验完全标准化时 [<a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1</a>] 受支持，处理器遇到不能为其确定标准化属性的字符时，则处理器将忽略由这些字符导致的任何反向标准化。[<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>]将忽略此参数。 </dd>
 <dt>
<code>false</code></dt>
<dd>[<em>可选</em>] 如果遇到了处理器不能确定其标准化属性的字符，则报告严重的 <b>&quot;unknown-character-denormalization&quot;</b> 错误。 </dd>
 </dl></dd>
 <dt><code>&quot;infoset&quot;</code></dt>
<dd> 关于此参数的描述请参见 <code>DOMConfiguration</code> 的定义。与在 [<a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>DOM Level 3 Core</a>] 中不同，对于 <code>LSParser</code>，此参数将默认为 <code>true</code>。 </dd>
 <dt><code>&quot;namespaces&quot;</code></dt>
 <dd>
 <dl>
<dt><code>true</code></dt>
<dd>[<em>必需</em>]（<em>默认</em>）执行在 [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>] 和 [<a href='http://www.w3.org/TR/2004/REC-xml-names11-20040204/'>XML Namespaces 1.1</a>] 中定义的名称空间处理。</dd>
<dt><code>false</code></dt>
<dd>[<em>可选</em>] 不执行名称空间处理。 </dd>
 </dl></dd>
 <dt>
 <code>&quot;resource-resolver&quot;</code></dt>
<dd>[<em>必需</em>] 对 <code>LSResourceResolver</code> 对象的引用，或为 null。如果遇到外部资源（如外部 XML 实体或 XML 模式位置）时此参数的值不为 null，则实现将请求在此参数中引用的 <code>LSResourceResolver</code> 解析该资源。 </dd>
 <dt><code>&quot;supported-media-types-only&quot;</code></dt>
 <dd>
 <dl>
 <dt>
<code>true</code></dt>
<dd>[<em>可选</em>] 检查被解析资源的媒体类型是否为被支持的媒体类型。如果遇到了不支持的媒体类型，则将引发类型 <b>&quot;unsupported-media-type&quot;</b> 的严重错误。必须总是接受在 [<a href='http://www.ietf.org/rfc/rfc3023.txt'>IETF RFC 3023</a>] 中定义的媒体类型。 </dd>
<dt><code>false</code></dt>
<dd>[<em>必需</em>]（<em>默认</em>）接受任何媒体类型。 </dd>
 </dl></dd>
 <dt><code>&quot;validate&quot;</code></dt>
<dd> 关于此参数的描述请参见 <code>DOMConfiguration</code> 的定义。与在 [<a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>DOM Level 3 Core</a>] 中不同，总是要完成对内部子集的处理，即使此参数设置为 <code>false</code>。 </dd>
 <dt>
 <code>&quot;validate-if-schema&quot;</code></dt>
<dd> 关于此参数的描述请参见 <code>DOMConfiguration</code> 的定义。与在 [<a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>DOM Level 3 Core</a>] 中不同，总是要完成对内部子集的处理，即使此参数设置为 <code>false</code>。</dd>
 <dt>
 <code>&quot;well-formed&quot;</code></dt>
<dd> 关于此参数的描述请参见 <code>DOMConfiguration</code> 的定义。与在 [<a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>DOM Level 3 Core</a>] 中不同，不能将此参数设置为 <code>false</code>。 </dd>
 </dl>

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.ls.LSParserFilter org.w3c.dom.ls.LSParser.getFilter()
<!-- END KEY -->
<!-- BEGIN DATA -->
当提供过滤器时，实现将在构建 DOM 树结构时调出该过滤器。过滤器可以选择从正在构建的文档中删除一些元素，或提前终止解析。<br> 过滤器将在应用了 <code>DOMConfiguration</code> 参数请求的操作后调用。例如，如果 &quot;<a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-validate'>validate</a>&quot; 设置为 <code>true</code>，则在调用过滤器前进行验证。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.ls.LSParser.setFilter(LSParserFilter filter)
<!-- END KEY -->
<!-- BEGIN DATA -->
当提供过滤器时，实现将在构建 DOM 树结构时调出该过滤器。过滤器可以选择从构建的文档中删除一些元素，或提前终止解析。<br> 过滤器将在使用了 <code>DOMConfiguration</code> 参数请求的操作后调用。例如，如果 &quot;<a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-validate'>validate</a>&quot; 设置为 <code>true</code>，则在调用过滤器前进行验证。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.ls.LSParser.getAsync()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>LSParser</code> 是异步的，为 <code>true</code>，如果它是同步的，则为 <code>false</code>。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.ls.LSParser.getBusy()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>LSParser</code> 当前正忙于加载文档，则为 <code>true</code>，否则为 <code>false</code>。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Document org.w3c.dom.ls.LSParser.parse(LSInput input) throws org.w3c.dom.DOMException, org.w3c.dom.ls.LSException
<!-- END KEY -->
<!-- BEGIN DATA -->
从通过 <code>LSInput</code> 标识的资源中解析 XML 文档。
@param input 从其中读取文档的源的 <code>LSInput</code>。
@return 如果 <code>LSParser</code> 是同步 <code>LSParser</code>，则将返回新创建并填充的 <code>Document</code>。如果 <code>LSParser</code> 是异步的，则返回 <code>null</code>，因为当此方法返回时，还不能构建该文档对象。
@exception DOMException INVALID_STATE_ERR:如果 <code>LSParser</code> 的 <code>LSParser.busy</code> 属性为 <code>true</code>，则引发此异常。
@exception LSException PARSE_ERR:如果 <code>LSParser</code> 无法加载 XML 文档，则引发此异常。如果 DOM 应用程序想获得关于错误的详细信息，则它必须附加一个使用参数 &quot;<a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler'>error-handler</a>&quot; 的 <code>DOMErrorHandler</code>。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Document org.w3c.dom.ls.LSParser.parseURI(String uri) throws org.w3c.dom.DOMException, org.w3c.dom.ls.LSException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 URI 引用 [<a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396</a>] 标识的位置解析 XML 文档。如果 URI 包括片段标识符（参见 [<a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396</a>] 中的 4.1 节），则该行为不是由此规范定义的，此规范的未来版本可能会定义该行为。
@param uri 将读取的 XML 文档的位置。
@return 如果 <code>LSParser</code> 是同步 <code>LSParser</code>，则将返回新创建并已填充的 <code>Document</code>，如果发生错误，则返回 <code>null</code>。如果 <code>LSParser</code> 是异步的，则返回 <code>null</code>，因为当此方法返回时，还不可以构建该文档对象。
@exception DOMException INVALID_STATE_ERR:如果 <code>LSParser.busy</code> 属性为 <code>true</code>，则将引发此异常。
@exception LSException PARSE_ERR:如果 <code>LSParser</code> 无法加载 XML 文档，则将引发此异常。如果 DOM 应用程序想获得关于错误的详细信息，则它必须附加一个使用参数 &quot;<a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler'>error-handler</a>&quot; 的 <code>DOMErrorHandler</code>。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node org.w3c.dom.ls.LSParser.parseWithContext(LSInput input, Node contextArg, short action) throws org.w3c.dom.DOMException, org.w3c.dom.ls.LSException
<!-- END KEY -->
<!-- BEGIN DATA -->
从通过 <code>LSInput</code> 标识的资源中解析 XML 片段，并将其内容插入到用 <code>context</code> 和 <code>action</code> 参数指定的位置的现有文档。当解析输入流时，上下文节点（或其父节点，取决于在哪里将结果插入）用于解析未绑定的名称空间前缀。上下文节点的 <code>ownerDocument</code> 节点（如果是类型 <code>DOCUMENT_NODE</code> 的节点，则为节点本身）用来解析默认属性和实体引用。<br>因为新的数据插入到文档，所以通过上下文节点的直接子节点或兄弟节点将触发至少一个 mutation 事件。<br>如果上下文节点是 <code>Document</code> 节点并且动作是 <code>ACTION_REPLACE_CHILDREN</code>，则作为上下文节点传递的文档将被更改，以便将其 <code>xmlEncoding</code>、<code>documentURI</code>、<code>xmlVersion</code>、<code>inputEncoding</code>、<code>xmlStandalone</code> 以及所有其他的此类属性都设置为它们将被设置的值（如果使用 <code>LSParser.parse()</code> 解析输入源时）。<br>此方法始终是同步方法，即使 <code>LSParser</code> 是异步时（<code>LSParser.async</code> 为 <code>true</code>）也是如此。<br>如果在解析过程中出现错误，则将通过与 <code>DOMConfiguration</code> 的 &quot;<a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler'>error-handler</a>&quot; 参数相关联的 <code>ErrorHandler</code> 实例通知调用者。<br>当调用 <code>parseWithContext</code> 时，将忽略以下配置参数的值，而是始终使用其默认值：&quot;&quot;<a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-validate'>validate</a>&quot;、&quot;<a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-validate-if-schema'>validate-if-schema</a>&quot; 和 &quot;<a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-element-content-whitespace'>element-content-whitespace</a>&quot;。将正常对待其他参数，期望解析器调用 <code>LSParserFilter</code>就像整个文档被解析一样。
@param input 从中读取源文档的 <code>LSInput</code>。源文档必须是 XML 片段，即除完整的 XML 文档之外的任何文档片段（除了上下文节点的类型为 <code>DOCUMENT_NODE</code>、操作为 <code>ACTION_REPLACE_CHILDREN</code> 的情况）、DOCTYPE（内部子集）、实体声明、符号声明、XML 或文本声明。
@param contextArg 用作正被解析的数据的上下文的节点。此节点必须是 <code>Document</code> 节点、<code>DocumentFragment</code> 节点或允许作为 <code>Element</code> 节点的子节点的类型的节点，例如它不能是 <code>Attribute</code> 节点。
@param action 此参数描述了在新插入节点的集合与现有的上下文节点的子节点之间应该采取什么动作。可能的动作集在上面的 <code>ACTION_TYPES</code> 中进行定义。
@return 返回作为解析操作结果的节点。如果结果超过一个顶级节点，则返回第一个节点。
@exception DOMException HIERARCHY_REQUEST_ERR:如果内容不能替换、插入到上下文节点的前面、后面或作为它的子节点（另请参见 [<a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>DOM Level 3 Core</a>] 中的 <code>Node.insertBefore</code> 或 <code>Node.replaceChild</code>），则引发此异常。 <br> NOT_SUPPORTED_ERR:如果 <code>LSParser</code> 不支持此方法，或者上下文节点是类型 <code>Document</code>，并且 DOM 实现不支持替换 <code>DocumentType</code> 子节点或 <code>Element</code> 子节点，则引发此异常。 <br> NO_MODIFICATION_ALLOWED_ERR:如果上下文节点是只读节点，并且将内容追加到了其子列表中，或者上下文节点的父节点是只读节点并且将内容插入到了其子列表中，则将引发此异常。 <br> INVALID_STATE_ERR:如果 <code>LSParser.busy</code> 属性为 <code>true</code>，则将引发此异常。
@exception LSException PARSE_ERR:如果 <code>LSParser</code> 无法加载 XML 片段，则将引发此异常。如果 DOM 应用程序想获得关于错误的详细信息，则它必须附加一个使用参数 &quot;<a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler'>error-handler</a>&quot; 的 <code>DOMErrorHandler</code>。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.ls.LSParser.abort()
<!-- END KEY -->
<!-- BEGIN DATA -->
中断对当前由 <code>LSParser</code> 加载的文档的加载。如果当前 <code>LSParser</code> 不忙，则调用此方法无效。 

<!-- END DATA -->
