<!-- BEGIN KEY -->
public interface org.w3c.dom.Document extends org.w3c.dom.Node
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Document</code> 接口表示整个 HTML 或 XML 文档。从概念上讲，它是文档树的根，并提供对文档数据的基本访问。
<p>因为元素、文本节点、注释、处理指令等不能存在于 <code>Document</code> 的上下文之外，所以 <code>Document</code> 接口还包含所需的创建这些对象的工厂方法。所创建的 <code>Node</code> 对象具有 <code>ownerDocument</code> 属性，该属性将 <code>Node</code> 对象与创建这些对象时的上下文所属的 <code>Document</code> 关联起来。
<p>另请参见 <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.DocumentType org.w3c.dom.Document.getDoctype()
<!-- END KEY -->
<!-- BEGIN DATA -->
与此文档相关的文档类型声明（参见 <code>DocumentType</code>）。对于没有文档类型声明的 XML 文档，此方法返回 <code>null</code>。对于 HTML 文档，可以返回 <code>DocumentType</code> 对象，与 HTML 文档中是否有文档类型声明无关。<br>这提供对 <code>Document</code> 的子节点 <code>DocumentType</code> 节点的直接访问。此节点可以在文档创建时设置，以后可以通过使用子节点操作方法（如 <code>Node.insertBefore</code> 或 <code>Node.replaceChild</code>）进行更改。不过要注意的是，根据创建时指定的 <code>DocumentType</code>，在有些实现可以实例化不同类型的 <code>Document</code> 对象（支持 &quot;Core&quot; 之外的其他功能，如 &quot;HTML&quot; [<a href='http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109'>DOM Level 2 HTML</a>]）时，以后对它的更改很可能会导致所支持功能的不可更改。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.DOMImplementation org.w3c.dom.Document.getImplementation()
<!-- END KEY -->
<!-- BEGIN DATA -->
处理此文档的 <code>DOMImplementation</code> 对象。DOM 应用程序可以使用多个实现中的对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Element org.w3c.dom.Document.getDocumentElement()
<!-- END KEY -->
<!-- BEGIN DATA -->
这是一种便捷属性，该属性允许直接访问文档的文档元素的子节点。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Element org.w3c.dom.Document.createElement(String tagName) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建指定类型的元素。注意，返回的实例实现 <code>Element</code> 接口，所以可以直接在返回的对象上指定属性。<br>此外，如果存在具有默认值的已知属性，则自动创建表示它们的 <code>Attr</code> 节点，并将其连接到该元素。<br>要创建具有限定名称和名称空间 URI 的元素，使用 <code>createElementNS</code> 方法。
@param tagName 要实例化的元素类型名称。对于 XML，tagName 参数是区分大小写的；而对于其他文档，则取决于所使用标记语言的大小写敏感性。在该情况下，可通过 DOM 实现将该名称映射到该标记的规范形式。
@return 新的 <code>Element</code> 对象，该对象具有设置为 <code>tagName</code> 的 <code>nodeName</code> 属性以及设置为 <code>null</code> 的 <code>localName</code>、<code>prefix</code> 和 <code>namespaceURI</code>。
@exception DOMException INVALID_CHARACTER_ERR：如果指定的名称是不遵循所使用的 XML 版本（在 <code>Document.xmlVersion</code> 属性中指定）的 XML 名称，则引发此异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.DocumentFragment org.w3c.dom.Document.createDocumentFragment()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建空 <code>DocumentFragment</code> 对象。
@return 新的 <code>DocumentFragment</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Text org.w3c.dom.Document.createTextNode(String data)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建给定指定字符串的 <code>Text</code> 节点。
@param data 该节点的数据。
@return 新 <code>Text</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Comment org.w3c.dom.Document.createComment(String data)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建给定指定字符串的 <code>Comment</code> 节点。
@param data 该节点的数据。
@return 新 <code>Comment</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.CDATASection org.w3c.dom.Document.createCDATASection(String data) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建其值为指定字符串的 <code>CDATASection</code> 节点。
@param data <code>CDATASection</code> 内容的数据。
@return 新 <code>CDATASection</code> 对象。
@exception DOMException NOT_SUPPORTED_ERR:如果此文档为 HTML 文档，则引发该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.ProcessingInstruction org.w3c.dom.Document.createProcessingInstruction(String target, String data) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建给定指定名称和数据字符串的 <code>ProcessingInstruction</code> 节点。
@param target 处理指令的目标部分。与 <code>Document.createElementNS</code> 或 <code>Document.createAttributeNS</code> 不同，此方法不检查目标名称是否为格式良好的名称空间。为了确保目标名称是格式良好的名称空间，应用程序应该使用设置为 <code>true</code> 的参数 &quot;namespaces&quot; 调用 <code>Document.normalizeDocument()</code>。
@param data 该节点的数据。
@return 新 <code>ProcessingInstruction</code> 对象。
@exception DOMException INVALID_CHARACTER_ERR:如果指定的目标是不遵循在 <code>Document.xmlVersion</code> 属性中指定的使用中的 XML 版本的 XML 名称，则引发此异常。 <br>NOT_SUPPORTED_ERR:如果此文档为 HTML 文档，则引发此异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Attr org.w3c.dom.Document.createAttribute(String name) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建给定名称的 <code>Attr</code>。注意，然后可以使用 <code>setAttributeNode</code> 方法在 <code>Element</code> 上设置 <code>Attr</code>。<br>要创建具有限定名称和名称空间 URI 的属性，使用 <code>createAttributeNS</code> 方法。
@param name 属性名称。
@return 新的 <code>Attr</code> 对象，该对象具有设置为 <code>name</code> 的 <code>nodeName</code> 属性以及设置为 <code>null</code> 的 <code>localName</code>、<code>prefix</code> 和 <code>namespaceURI</code>。该属性的值为空字符串。
@exception DOMException INVALID_CHARACTER_ERR:如果指定的名称是不遵循在 <code>Document.xmlVersion</code> 属性中指定的使用中的 XML 版本的 XML 名称，则引发此异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.EntityReference org.w3c.dom.Document.createEntityReference(String name) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 <code>EntityReference</code> 对象。此外，如果引用的实体是已知的，则使 <code>EntityReference</code> 节点的子列表与相应 <code>Entity</code> 节点的子列表相同。
<p ><b>注：</b> 如果任何 <code>Entity</code> 节点的后代具有未绑定的名称空间前缀，则相应的所创建的 <code>EntityReference</code> 节点的后代也未绑定；（其 <code>namespaceURI</code> 为 <code>null</code>）。DOM Level 2 和 3 不支持在此情况下解析名称空间前缀的任何机制。
@param name 要引用的实体的名称。与 <code>Document.createElementNS</code> 或 <code>Document.createAttributeNS</code> 不同，不在实体名称上检查名称空间是否为格式良好的。为了确保实体名称是格式良好的名称空间，应用程序应该使用设置为 <code>true</code> 的参数 &quot;namespaces&quot; 调用 <code>Document.normalizeDocument()</code>。
@return 新的 <code>EntityReference</code> 对象。
@exception DOMException INVALID_CHARACTER_ERR:如果指定的名称是不遵循在 <code>Document.xmlVersion</code> 属性中指定的使用中的 XML 版本的 XML 名称，则引发此异常。 <br>NOT_SUPPORTED_ERR:如果此文档为 HTML 文档，则引发该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.NodeList org.w3c.dom.Document.getElementsByTagName(String tagname)
<!-- END KEY -->
<!-- BEGIN DATA -->
按文档顺序返回包含在文档中且具有给定标记名称的所有 <code>Element</code> 的 <code>NodeList</code>。
@param tagname 要匹配的标记的名称。特殊值 &quot;*&quot; 匹配所有标记。对于 XML ，<code>tagname</code> 参数是区分大小写的，否则它将依靠正在使用的标记语言的大小写敏感性。
@return 包含所有匹配的 <code>Elements</code> 的新 <code>NodeList</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node org.w3c.dom.Document.importNode(Node importedNode, boolean deep) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
从另一文档向此文档导入节点，而不改变或移除原始文档中的源节点；此方法创建源节点的一个新副本。返回的节点没有父节点；（<code>parentNode</code> 为 <code>null</code>）。<br>对于所有节点而言，导入节点创建由导入文档所有的节点对象，属性值等同于源节点的 <code>nodeName</code> 和 <code>nodeType</code>，加上与名称空间相关的属性（<code>prefix</code>、<code>localName</code> 和 <code>namespaceURI</code>）。与在 <code>cloneNode</code> 操作中一样，源节点没有改变。与导入的节点相关的用户数据不可继续使用。不过，如果随相关数据一起指定了任何 <code>UserDataHandlers</code>，则将在此方法返回之前用适当的参数调用这些处理程序。<br>其他信息按相应的 <code>nodeType</code> 复制，在从一个文档向另一文档复制 XML 或 HTML 源的分段时试图镜像所需的行为，并认识到两个方法可以在 XML 实例中具有不同的 DTD。下表描述了每种类型节点的细节。 
 <dl>
 <dt>ATTRIBUTE_NODE</dt>
<dd>在生成的 <code>Attr</code> 上，将 <code>ownerElement</code> 属性设置为 <code>null</code> 并将 <code>specified</code> 标志设置为 <code>true</code>。递归地导入源 <code>Attr</code> 的后代，并且重新集合得到的节点来构造相应的子树。注意，<code>deep</code> 参数对 <code>Attr</code> 节点无效；它们总是在导入时带着子节点。</dd>
 <dt>DOCUMENT_FRAGMENT_NODE</dt>
<dd>如果将 <code>deep</code> 选项设置为 <code>true</code>，则递归地导入源 <code>DocumentFragment</code> 的后代，并在导入的 <code>DocumentFragment</code> 下重新集合得到的节点以构造相应的子树。否则，此操作仅生成一个空 <code>DocumentFragment</code>。</dd>
 <dt>DOCUMENT_NODE</dt>
<dd>不能导入 <code>Document</code> 节点。</dd>
 <dt>DOCUMENT_TYPE_NODE</dt>
<dd>不能导入 <code>DocumentType</code> 节点。</dd>
 <dt>ELEMENT_NODE</dt>
<dd>导入源元素的<em>指定的</em> 属性节点，并将生成的 <code>Attr</code> 节点连接到生成的 <code>Element</code>。默认属性是<em>不</em> 被复制的，不过，如果被导入的文档定义了此元素名称的默认属性，则分配这些属性。如果将 <code>importNode</code> <code>deep</code> 参数设置为 <code>true</code>，则递归地导入源元素的后代并集合得到的节点，以构造相应的子树。</dd>
 <dt>ENTITY_NODE</dt>
<dd>可以导入 <code>Entity</code> 节点，但在当前版本的 DOM 中，<code>DocumentType</code> 是只读的。将考虑在以后版本的 DOM 中包含将这些导入的节点添加到 <code>DocumentType</code> 中这一功能。导入时，将复制 <code>publicId</code>、<code>systemId</code> 和 <code>notationName</code> 属性。如果请求 <code>deep</code> 导入，则递归地导入源 <code>Entity</code> 的后代，并重新集合得到的节点以构造相应的子树。</dd>
 <dt>
 ENTITY_REFERENCE_NODE</dt>
<dd>即使请求 <code>deep</code> 导入，也只复制 <code>EntityReference</code> 本身，因为源和目标文档可能以不同方式定义实体。如果正在导入的文档提供对此实体名称的定义，则它的值得以分配。</dd>
 <dt>NOTATION_NODE</dt>
 <dd>
可以导入 <code>Notation</code> 节点，但在当前版本的 DOM 中，<code>DocumentType</code> 是只读的。能够将这些导入的节点添加到 <code>DocumentType</code> 将被认为是以后版本的 DOM 的附加功能。导入时，复制 <code>publicId</code> 和 <code>systemId</code> 属性。注意，<code>deep</code> 参数对此类型的节点无效，因为它们不能有任何子节点。</dd>
 <dt>
 PROCESSING_INSTRUCTION_NODE</dt>
<dd>导入的节点从源节点中复制其 <code>target</code> 和 <code>data</code> 值。注意，该 <code>deep</code> 参数对此类型的节点无效，因为它们不能有任何子节点。</dd>
 <dt>TEXT_NODE、CDATA_SECTION_NODE、COMMENT_NODE</dt>
<dd>继承自 <code>CharacterData</code> 的这三种类型的节点从源节点复制其 <code>data</code> 和 <code>length</code> 属性。注意，<code>deep</code> 参数对这三种类型的节点无效，因为它们不能有任何子节点。</dd>
 </dl> 
@param importedNode 要导入的节点。
@param deep 如果为 <code>true</code>，则递归地导入在指定节点下的子树；如果为 <code>false</code>，则仅导入节点本身，如上面的解释。这对不能有任何子节点的节点、对 <code>Attr</code> 和 <code>EntityReference</code> 节点都无效。
@return 导入的、属于此 <code>Document</code> 的节点。
@exception DOMException NOT_SUPPORTED_ERR:如果不支持正在导入的该类型的节点，则引发此异常。 <br>INVALID_CHARACTER_ERR:如果导入的一个名称是不遵循在 <code>Document.xmlVersion</code> 属性中指定的使用中的 XML 版本的 XML 名称，则引发此异常。例如，将 XML 1.1 [<a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1</a>] 元素导入 XML 1.0 文档时可能引发此异常。
@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Element org.w3c.dom.Document.createElementNS(String namespaceURI, String qualifiedName) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建给定的限定名称和名称空间 URI 的元素。<br>依据 [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]，如果应用程序不希望使用名称空间，则必须将 <code>null</code> 作为方法的 namespaceURI 参数的值。
@param namespaceURI  要创建的元素的名称空间 URI。
@param qualifiedName 要实例化的元素类型的限定名称。
@return 具有以下属性的新 <code>Element</code> 对象：
 <table border='1' cellpadding='3'>
 <tr>
<th>属性</th>
<th>值</th>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'><code>Node.nodeName</code></td>
 <td valign='top' rowspan='1' colspan='1'>
   <code>qualifiedName</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'><code>Node.namespaceURI</code></td>
 <td valign='top' rowspan='1' colspan='1'>
   <code>namespaceURI</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'><code>Node.prefix</code></td>
<td valign='top' rowspan='1' colspan='1'>前缀，从 <code>qualifiedName</code> 中提取的；如果没有前缀，则为 <code>null</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'><code>Node.localName</code></td>
<td valign='top' rowspan='1' colspan='1'>本地名称，从 <code>qualifiedName</code> 提取的</td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'><code>Element.tagName</code></td>
 <td valign='top' rowspan='1' colspan='1'>
   <code>qualifiedName</code></td>
 </tr>
 </table>

@exception DOMException INVALID_CHARACTER_ERR:如果指定的 <code>qualifiedName</code> 是不遵循在 <code>Document.xmlVersion</code> 属性中指定的使用中的 XML 版本的 XML 名称，则引发此异常。 <br>NAMESPACE_ERR:下列情况引发此异常：如果 <code>qualifiedName</code> 是错误格式的限制名称；如果 <code>qualifiedName</code> 具有前缀且 <code>namespaceURI</code> 为 <code>null</code>；或者如果 <code>qualifiedName</code> 具有前缀 &quot;xml&quot; 且该 <code>namespaceURI</code> 不同于 &quot;<a href='http://www.w3.org/XML/1998/namespace'>http://www.w3.org/XML/1998/namespace</a>&quot; [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]；或者如果 <code>qualifiedName</code> 或其前缀为 &quot;xmlns&quot; 且该 <code>namespaceURI</code> 不同于 &quot;<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>&quot;；或者如果 <code>namespaceURI</code> 为 &quot;<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>&quot; 且 <code>qualifiedName</code> 及其前缀都不是 &quot;xmlns&quot;。 <br>NOT_SUPPORTED_ERR:由于 XML 定义了名称空间，如果当前文档不支持 <code>&quot;XML&quot;</code> 特性，则总是抛出此异常。
@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Attr org.w3c.dom.Document.createAttributeNS(String namespaceURI, String qualifiedName) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
 创建给定的限定名称和名称空间 URI 的属性。<br>对于每个 [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]，如果应用程序希望没有名称空间，则它们必须将 <code>null</code> 作为方法的 <code>namespaceURI</code> 参数的值。
@param namespaceURI 要创建的属性的名称空间 URI。
@param qualifiedName 要实例化的属性的限定名称。
@return 具有以下属性的新 <code>Attr</code> 对象：
 <table border='1' cellpadding='3'>
 <tr>
 <th>
属性</th>
<th>值</th>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'><code>Node.nodeName</code></td>
 <td valign='top' rowspan='1' colspan='1'>qualifiedName</td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'>
   <code>Node.namespaceURI</code></td>
 <td valign='top' rowspan='1' colspan='1'><code>namespaceURI</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'>
   <code>Node.prefix</code></td>
<td valign='top' rowspan='1' colspan='1'>前缀，从 <code>qualifiedName</code> 中提取的；如果没有前缀，则为 <code>null</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'><code>Node.localName</code></td>
<td valign='top' rowspan='1' colspan='1'>本地名称，从 <code>qualifiedName</code> 提取的</td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'><code>Attr.name</code></td>
 <td valign='top' rowspan='1' colspan='1'>
   <code>qualifiedName</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'><code>Node.nodeValue</code></td>
<td valign='top' rowspan='1' colspan='1'>空字符串</td>
 </tr>
 </table>

@exception DOMException INVALID_CHARACTER_ERR:如果指定的 <code>qualifiedName</code> 是不遵循在 <code>Document.xmlVersion</code> 属性中指定的使用中的 XML 版本的 XML 名称，则引发此异常。 <br>NAMESPACE_ERR:在以下情况下引发此异常：如果 <code>qualifiedName</code> 为错误格式的限定名称；如果 <code>qualifiedName</code> 有前缀且 <code>namespaceURI</code> 为 <code>null</code>；如果 <code>qualifiedName</code> 有前缀 &quot;xml&quot; 且 <code>namespaceURI</code> 不同于 &quot;<a href='http://www.w3.org/XML/1998/namespace'>http://www.w3.org/XML/1998/namespace</a>&quot;；如果 <code>qualifiedName</code> 或其前缀为 &quot;xmlns&quot; 且 <code>namespaceURI</code> 不同于 &quot;<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>&quot;；或者 <code>namespaceURI</code> 为 &quot;<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>&quot; 且 <code>qualifiedName</code> 及其前缀都不是 &quot;xmlns&quot;。 <br>NOT_SUPPORTED_ERR:由于 XML 定义了名称空间，如果当前文档不支持 <code>&quot;XML&quot;</code> 特性，则总是抛出此异常。
@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.NodeList org.w3c.dom.Document.getElementsByTagNameNS(String namespaceURI, String localName)
<!-- END KEY -->
<!-- BEGIN DATA -->
以文档顺序返回具有给定本地名称和名称空间 URI 的所有 <code>Elements</code> 的 <code>NodeList</code>。
@param namespaceURI 要匹配的元素的名称空间 URI。特殊值 <code>&quot;*&quot;</code> 匹配所有名称空间。
@param localName 要匹配的元素的本地名称。特殊值 &quot;*&quot; 匹配所有本地名称。
@return 包含所有匹配的 <code>Elements</code> 的新 <code>NodeList</code> 对象。
@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Element org.w3c.dom.Document.getElementById(String elementId)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回具有带给定值的 ID 属性的 <code>Element</code>。如果不存在此类元素，则此方法返回 <code>null</code>。如果一个以上的元素具有带该值的 ID 属性，返回哪一个元素是不确定的。<br> 期望 DOM 实现使用属性 <code>Attr.isId</code> 来确定属性是否属于类型 ID。
<p ><b>注：</b> 具有名称 &quot;ID&quot; 或 &quot;id&quot; 的属性不属于类型 ID，除非这样定义。
@param elementId 元素的唯一 <code>id</code> 值。
@return 匹配的元素；如果不存在任何匹配元素，则返回 <code>null</code>。
@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.Document.getInputEncoding()
<!-- END KEY -->
<!-- BEGIN DATA -->
指定解析时此文档使用的编码的属性。如果此属性未知（如在内存中创建 <code>Document</code> 时），则为 <code>null</code>。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.Document.getXmlEncoding()
<!-- END KEY -->
<!-- BEGIN DATA -->
作为 <a href='http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl'>XML 声明</a>的一部分，指定此文档编码的属性。在未指定或未知时，如在内存中创建 <code>Document</code> 时，此属性为 <code>null</code>。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.Document.getXmlStandalone()
<!-- END KEY -->
<!-- BEGIN DATA -->
作为 <a href='http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl'>XML 声明</a>的一部分，指定此文档是否为独立文档的属性。未指定时，此属性为 <code>false</code>。
<p ><b>注：</b> 设置此属性时不对此值进行任何验证。应用程序应该使用带有 &quot;validate&quot; 参数的 <code>Document.normalizeDocument()</code> 验证该值是否匹配在 [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>] 中定义的<a href='http://www.w3.org/TR/2004/REC-xml-20040204#sec-rmd'>有关独立文档声明的有效性约束</a>（）。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.Document.setXmlStandalone(boolean xmlStandalone) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
作为 <a href='http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl'>XML 声明</a> 的一部分指定此文档是否是单独的的属性。未指定时，此属性为 <code>false</code>。
<p ><b>注：</b> 设置此属性时不对此值进行任何验证。应用程序应该使用带有 &quot;validate&quot; 参数的 <code>Document.normalizeDocument()</code> 验证该值是否匹配 <a href='http://www.w3.org/TR/2004/REC-xml-20040204#sec-rmd'>validity constraint for standalone document declaration</a>（在 [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>] 中定义）。
@exception DOMException NOT_SUPPORTED_ERR:如果此文档不支持 &quot;XML&quot; 特性，则引发此异常。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.Document.getXmlVersion()
<!-- END KEY -->
<!-- BEGIN DATA -->
作为 <a href='http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl'>XML 声明</a> 的一部分指定此文档版本号的属性。如果没有声明，或如果此文档支持 &quot;XML&quot; 特性，则该值为 <code>&quot;1.0&quot;</code>。如果此文档不支持 &quot;XML&quot; 特性，则该值始终为 <code>null</code>。更改此属性将影响在 XML 名称中检查无效字符的方法。应用程序应该调用 <code>Document.normalizeDocument()</code> 来检查在已经是此 <code>Document</code> 一部分的 <code>Node</code> 中的无效字符。<br> DOM 应用程序可以使用参数值分别为 &quot;XMLVersion&quot; 和 &quot;1.0&quot;的 <code>DOMImplementation.hasFeature(feature, version)</code> 方法来确定实现是否支持 [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>]。DOM 应用程序还可以使用参数值分别为 &quot;XMLVersion&quot; 和 &quot;1.1&quot;的同一方法来确定实现是否支持 [<a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1</a>]。在这两种情况下，为了支持 XML，实现还必须支持在此规范中定义的 &quot;XML&quot; 特性。支持某版本的 &quot;XMLVersion&quot; 特性的 <code>Document</code> 对象不能在使用 <code>Document.xmlVersion</code> 时对相同版本号引发 <code>NOT_SUPPORTED_ERR</code> 异常。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.Document.setXmlVersion(String xmlVersion) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
作为 <a href='http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl'>XML 声明</a> 的一部分指定此文档版本号的属性。如果没有声明，或如果此文档支持 &quot;XML&quot; 特性，则该值为 <code>&quot;1.0&quot;</code>。如果此文档不支持 &quot;XML&quot; 特性，则该值始终为 <code>null</code>。更改此属性将影响在 XML 名称中检查无效字符的方法。应用程序应该调用 <code>Document.normalizeDocument()</code> 来检查在已经是此 <code>Document</code> 一部分的 <code>Node</code> 中的无效字符。<br> DOM 应用程序可以使用参数值分别为 &quot;XMLVersion&quot; 和 &quot;1.0&quot;的 <code>DOMImplementation.hasFeature(feature, version)</code> 方法来确定实现是否支持 [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>]。DOM 应用程序还可以使用参数值分别为 &quot;XMLVersion&quot; 和 &quot;1.1&quot;的同一方法来确定实现是否支持 [<a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1</a>]。在这两种情况下，为了支持 XML，实现还必须支持在此规范中定义的 &quot;XML&quot; 特性。支持某版本的 &quot;XMLVersion&quot; 特性的 <code>Document</code> 对象不能在使用 <code>Document.xmlVersion</code> 时对相同版本号引发 <code>NOT_SUPPORTED_ERR</code> 异常。
@exception DOMException NOT_SUPPORTED_ERR:如果将该版本设置为此 <code>Document</code> 不支持的值，或此文档不支持 &quot;XML&quot; 特性，则引发此异常。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.Document.getStrictErrorChecking()
<!-- END KEY -->
<!-- BEGIN DATA -->
指定是否强制执行错误检查的属性。设置为 <code>false</code> 时，该实现可以不测试通常在 DOM 操作上定义的每个可能的错误情形，可以不在 DOM 操作上引发任何 <code>DOMException</code>，也可以不在使用 <code>Document.normalizeDocument()</code> 时报告错误。如果发生错误，则该行为将会不确定。此属性默认为 <code>true</code>。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.Document.setStrictErrorChecking(boolean strictErrorChecking)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定是否强制执行错误检查的属性。设置为 <code>false</code> 时，该实现不会随意测试通常在 DOM 操作上定义的每个可能的错误情形，不会在 DOM 操作上引发任何 <code>DOMException</code>，也不会在使用 <code>Document.normalizeDocument()</code> 时报告错误。如果发生错误，则该行为不确定。此属性默认为 <code>true</code>。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.Document.getDocumentURI()
<!-- END KEY -->
<!-- BEGIN DATA -->
文档的位置，如果未定义或 <code>Document</code> 是使用 <code>DOMImplementation.createDocument</code> 创建的，则为 <code>null</code>。设置此属性时不执行任何词汇检查；这可能导致在使用 <code>Node.baseURI</code> 时返回 <code>null</code> 值。<br> 请注意，如果 <code>Document</code> 支持 &quot;HTML&quot; [<a href='http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109'>DOM Level 2 HTML</a>] 特性，则计算 <code>Node.baseURI</code> 时 HTML BASE 元素的 href 属性优先于此属性。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.Document.setDocumentURI(String documentURI)
<!-- END KEY -->
<!-- BEGIN DATA -->
文档的位置，如果未定义或 <code>Document</code> 是使用 <code>DOMImplementation.createDocument</code> 创建的，则为 <code>null</code>。设置此属性时不执行任何词汇检查；这可能导致在使用 <code>Node.baseURI</code> 时返回 <code>null</code> 值。<br> 请注意，如果 <code>Document</code> 支持 &quot;HTML&quot; [<a href='http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109'>DOM Level 2 HTML</a>] 特性，则计算 <code>Node.baseURI</code> 时 HTML BASE 元素的 href 属性优先于此属性。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node org.w3c.dom.Document.adoptNode(Node source) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
试图把另一文档中的节点采用到此文档。如果受支持，则它将更改源节点的 <code>ownerDocument</code>、它的子节点以及连接的属性节点（如果有）。如果源节点有父节点，则首先从其父节点的子节点列表中移除它。此方法允许将子树从一个文档移动到另一个文档（与 <code>importNode()</code> 不同，后者创建源节点副本，而不是移动子树）。失败时，应用程序应该改为使用 <code>Document.importNode()</code>。注意，如果采用的节点已经是此文档的一部分（即源文档和目标文档相同），此方法仍可有效地从其父节点（如果有）的子列表移除源节点。下表描述了每种类型节点的细节。 
 <dl>
 <dt>ATTRIBUTE_NODE</dt>
<dd>在采用的 <code>Attr</code> 上，将 <code>ownerElement</code> 属性设置为 <code>null</code> 并将 <code>specified</code> 标志设置为 <code>true</code>。递归地采用源 <code>Attr</code> 的后代。</dd>
 <dt>DOCUMENT_FRAGMENT_NODE</dt>
<dd>递归地采用源节点的后代。</dd>
 <dt>DOCUMENT_NODE</dt>
 <dd>
不能采用 <code>Document</code> 节点。</dd>
 <dt>DOCUMENT_TYPE_NODE</dt>
 <dd>
不能采用 <code>DocumentType</code> 节点。</dd>
 <dt>ELEMENT_NODE</dt>
<dd>采用源元素的 <em>Specified</em> 属性节点。丢弃默认属性，不过，如果被采用的文档定义了此元素名称的默认属性，则分配这些属性。递归地采用源元素的后代。</dd>
 <dt>ENTITY_NODE</dt>
 <dd>
不能采用 <code>Entity</code> 节点。</dd>
 <dt>ENTITY_REFERENCE_NODE</dt>
<dd>只采用 <code>EntityReference</code> 节点本身并丢弃其后代，因为源文档和目标文档可能以不同方式定义实体。如果要导入的文档提供了对此实体名称的定义，则分配其值。</dd>
 <dt>NOTATION_NODE</dt>
<dd>不能采用 <code>Notation</code> 节点。</dd>
 <dt>PROCESSING_INSTRUCTION_NODE, TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE</dt>
<dd>这些节点均可以采用。无特殊说明。</dd>
 </dl> 
<p ><b>注：</b> 由于它与 <code>Document.importNode()</code> 方法不同，不创建新的节点，因此此方法不引发 <code>INVALID_CHARACTER_ERR</code> 异常，并且应用程序应该使用 <code>Document.normalizeDocument()</code> 方法来检查导入的名称是否是遵循正在使用的 XML 版本的 XML 名称。
@param  source  要移入此文档的节点。
@return  采用的节点，如果此操作失败（例如源节点来自不同实现时），则返回 <code>null</code>。
@exception DOMException NOT_SUPPORTED_ERR:如果源节点属于 <code>DOCUMENT</code>、<code>DOCUMENT_TYPE</code> 类型，则引发此异常。 <br>NO_MODIFICATION_ALLOWED_ERR:源节点为只读的时引发此异常。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.DOMConfiguration org.w3c.dom.Document.getDomConfig()
<!-- END KEY -->
<!-- BEGIN DATA -->
调用 <code>Document.normalizeDocument()</code> 时使用的配置。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.Document.normalizeDocument()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法的行为如同使文档通过一个保存和加载的过程，而将其置为 &quot;normal（标准）&quot; 形式。因此，此方法更新 <code>EntityReference</code> 节点的替换树并规范化 <code>Text</code> 节点，如在方法 <code>Node.normalize()</code> 中定义的那样。<br> 否则，实际结果取决于在 <code>Document.domConfig</code> 对象上设置的、控制哪个操作实际发生的特性。值得注意的是，此方法还可以按照其中描述的算法使文档名称空间格式良好、检查字符规范化、移除 <code>CDATASection</code> 节点，等等。有关详细信息请参见 <code>DOMConfiguration</code>。 
 <pre>// Keep in the document 
 the information defined // in the XML Information Set (Java example) 
 DOMConfiguration docConfig = myDocument.getDomConfig(); 
 docConfig.setParameter(&quot;infoset&quot;, Boolean.TRUE); 
 myDocument.normalizeDocument();</pre>
 
<br>生成改变事件（当被支持时）来反映在该文档上发生的更改。<br> 如果在调用此方法期间发生错误（如试图更新只读节点）或按照正在使用的 XML 版本 <code>Node.nodeName</code> 包含无效字符，则将使用与 &quot;error-handler&quot; 参数相关联的 <code>DOMErrorHandler</code> 对象报告错误或警告（<code>DOMError.SEVERITY_ERROR</code> 或 <code>DOMError.SEVERITY_WARNING</code>）。注意，如果实现无法从错误中恢复，则此方法还可能报告严重错误（<code>DOMError.SEVERITY_FATAL_ERROR</code>）。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node org.w3c.dom.Document.renameNode(Node n, String namespaceURI, String qualifiedName) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
重命名 <code>ELEMENT_NODE</code> 或 <code>ATTRIBUTE_NODE</code> 类型的现有节点。<br>如有可能，此方法只更改给定节点的名称；否则此方法将创建一个具有指定名称的新节点，并将现有节点替换为新节点，如下所述。<br>如果只更改给定节点的名称是不可能的，则执行以下操作：创建新节点；在新节点上注册任何已注册的事件侦听器；从旧节点移除连接到该节点的任何用户数据；从旧节点的父节点（如果有）将其移除；将子节点移到新节点；如果重命名的节点为 <code>Element</code>，则其属性移动到新节点；将新节点插入旧节点原来在其父（如果有）的子节点列表中的位置；将连接到旧节点的用户数据连接到新节点。<br>当正被重命名的节点为 <code>Element</code> 时，只移动指定的属性，源于 DTD 的默认属性按照新的元素名称更新。此外，实现还可以更新源自其他模式的默认属性。应用程序应该使用 <code>Document.normalizeDocument()</code> 来保证这些属性是最新的。<br>当正被重命名的节点是连接到 <code>Element</code> 的 <code>Attr</code> 时，则首先从 <code>Element</code> 属性映射中移除该节点。然后，一旦通过修改现有节点或创建新节点（如上所述）重命名，则将它放回原处。<br>此外，
 <ul>
<li> 可触发用户数据事件 <code>NODE_RENAMED</code>, 
 </li>
 <li> 
当实现支持 &quot;MutationNameEvents&quot; 特性时，此方法中包含的每个改变操作都将触发相应的事件，最后将触发事件 { <code>http://www.w3.org/2001/xml-events</code> <code>DOMElementNameChanged</code>} 或 { <code>http://www.w3.org/2001/xml-events</code> <code>DOMAttributeNameChanged</code>}。 
 </li>
 </ul>
@param n 要重命名的节点。
@param namespaceURI 新的名称空间 URI。
@param qualifiedName 新的限定名称。
@return 重命名的节点。这可以是指定的节点，也可以是用来替换指定节点而创建的新节点。
@exception DOMException NOT_SUPPORTED_ERR:当指定节点的类型不是 <code>ELEMENT_NODE</code>，也不是 <code>ATTRIBUTE_NODE</code> 时，或者如果实现不支持重命名文档元素，则引发此异常。 <br>INVALID_CHARACTER_ERR:如果新的限定名称不是遵循正在使用的在 <code>Document.xmlVersion</code> 属性中指定的 XML 版本的 XML 名称，则引发此异常。 <br>WRONG_DOCUMENT_ERR:当从与此文档不同的另一个文档创建指定节点时，引发此异常。 <br>NAMESPACE_ERR:在以下情况下引发此异常：如果 <code>qualifiedName</code> 为错误格式的限定名称；如果 <code>qualifiedName</code> 有前缀且 <code>namespaceURI</code> 为 <code>null</code>；或者如果 <code>qualifiedName</code> 有前缀 &quot;xml&quot; 且 <code>namespaceURI</code> 不同于 &quot;<a href='http://www.w3.org/XML/1998/namespace'>http://www.w3.org/XML/1998/namespace</a>&quot; [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]。当正被重命名的节点为一属性时，如果 <code>qualifiedName</code> 或其前缀为 &quot;xmlns&quot; 且 <code>namespaceURI</code> 不同于 &quot;<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>&quot;，也引发此异常。
@since DOM Level 3

<!-- END DATA -->
