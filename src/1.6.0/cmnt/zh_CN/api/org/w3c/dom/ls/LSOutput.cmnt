<!-- BEGIN KEY -->
public interface org.w3c.dom.ls.LSOutput
<!-- END KEY -->
<!-- BEGIN DATA -->
此接口表示数据的输出目标。 
<p> 此接口允许应用程序封装有关单个对象中的输出目标的信息，它可包括 URI、字节流（可能带有指定的编码）、基 URI 和/或字符流。 
<p> 对字节流和字符流的精确定义具有绑定依赖性。 
<p> 当需要这种对象时，期望应用程序提供实现此接口的对象。应用程序既可以提供自己的实现此接口的对象，也可以使用一般的工厂方法 <code>DOMImplementationLS.createLSOutput()</code> 来创建实现此接口的对象。 
<p> <code>LSSerializer</code> 将使用 <code>LSOutput</code> 对象来确定将输出序列化到何处。<code>LSSerializer</code> 将按照下面的顺序查看在 <code>LSOutput</code> 中指定的不同输出，以了解输出到哪个当中，将使用不为 null 并且不是空字符串的第一个输出： 
 <ol>
 <li> <code>LSOutput.characterStream</code> 
 </li>
 <li> 
 <code>LSOutput.byteStream</code> 
 </li>
 <li> <code>LSOutput.systemId</code> 
 </li>
 </ol> 
<p> <code>LSOutput</code> 对象属于该应用程序。DOM 实现永远不会修改这些对象（尽管可在必要时制做副本和修改副本）。 
<p>另请参见《<a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407'>Document Object Model (DOM) Level 3 Load and Save Specification</a>》。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Writer org.w3c.dom.ls.LSOutput.getCharacterStream()
<!-- END KEY -->
<!-- BEGIN DATA -->
具有语言和绑定依赖性类型的属性，它表示可向其输出 16 位单元的可写流。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.ls.LSOutput.setCharacterStream(Writer characterStream)
<!-- END KEY -->
<!-- BEGIN DATA -->
具有语言和绑定依赖性类型的属性，它表示可向其输出 16 位单元的可写流。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.OutputStream org.w3c.dom.ls.LSOutput.getByteStream()
<!-- END KEY -->
<!-- BEGIN DATA -->
具有语言和绑定依赖性类型的属性，表示字节的可写流。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.ls.LSOutput.setByteStream(OutputStream byteStream)
<!-- END KEY -->
<!-- BEGIN DATA -->
具有语言和绑定依赖性类型的属性，表示字节的可写流。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.ls.LSOutput.getSystemId()
<!-- END KEY -->
<!-- BEGIN DATA -->
系统标识符，它是此输出目标的 URI 引用 [<a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396</a>]。<br> 如果系统 ID 是相对 URI 引用（参见 [<a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396</a>] 中的 5 节），则该行为具有实现依赖性。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.ls.LSOutput.setSystemId(String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
系统标识符，它是此输出目标的 URI 引用 [<a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396</a>]。<br> 如果系统 ID 是相对 URI 引用（参见 [<a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396</a>] 中的 5 节），则该行为具有实现依赖性。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.ls.LSOutput.getEncoding()
<!-- END KEY -->
<!-- BEGIN DATA -->
用于输出的字符编码。编码必须是 XML 编码声明（[<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>] 的 4.3.3 节 &quot;Character Encoding in Entities&quot;）可接受的字符串，建议在&ldquo;国际因特网地址分配委员会&rdquo;[<a href='ftp://ftp.isi.edu/in-notes/iana/assignments/character-sets'>IANA-CHARSETS</a>] 注册的字符编码应该使用它们的注册名称来引用。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.ls.LSOutput.setEncoding(String encoding)
<!-- END KEY -->
<!-- BEGIN DATA -->
用于输出的字符编码。编码必须是 XML 编码声明（[<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>] 的 4.3.3 节 &quot;Character Encoding in Entities&quot;）可接受的字符串，建议在&ldquo;国际因特网地址分配委员会&rdquo;[<a href='ftp://ftp.isi.edu/in-notes/iana/assignments/character-sets'>IANA-CHARSETS</a>] 中注册的字符编码使用它们的注册名称来引用。 

<!-- END DATA -->
