<!-- BEGIN KEY -->
public interface org.w3c.dom.DOMConfiguration
<!-- END KEY -->
<!-- BEGIN DATA -->
该 <code>DOMConfiguration</code> 接口表示文档的配置，并维护一个可识别的参数表。使用该配置，能够更改 <code>Document.normalizeDocument()</code> 行为，如将 <code>CDATASection</code> 节点替换为 <code>Text</code> 节点或指定在请求验证 <code>Document</code> 时必须使用的模式类型。<code>DOMConfiguration</code> 对象也可用于 <code>DOMParser</code> 和 <code>DOMSerializer</code> 接口中的 [<a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407'>DOM Level 3 Load and Save</a>]。 
<p> 由 <code>DOMConfiguration</code> 对象使用的参数名称可在整个 DOM Level 3 规范中定义。名称不区分大小写。要避免可能的冲突，根据惯例，应该使指向在 DOM 规范之外定义的参数的名称唯一。因为参数要作为属性公开，所以建议名称遵循 5.16 节带有字符 '-'（连字符号）的&ldquo;[Unicode] 标识符&rdquo;，但它不是由 DOM 实现强制执行的。要求 DOM Level 3 核心实现来识别在此规范中定义的所有参数。也可能要求某些参数值接受该实现的支持。若要知道一个值是否必须被支持，请参阅参数的定义。 
<p ><b>注：</b>参数类似于在 SAX2 [<a href='http://www.saxproject.org/'>SAX</a>] 中使用的功能和属性。 
<p> 下面是在 DOM 中定义的参数列表： 
 <dl>
 <dt>
 <code>&quot;canonical-form&quot;</code></dt>
 <dd>
 <dl>
<dt><code>true</code></dt>
<dd>[<em>optional</em>] 根据在 [<a href='http://www.w3.org/TR/2001/REC-xml-c14n-20010315'>Canonical XML</a>] 指定的规则规范化文档，如从树中移除 <code>DocumentType</code> 节点（如果有），或从每个元素移除多余的名称空间声明。注意，这限于可以在 DOM 中表示的内容；需要特别指出的是，无法指定 DOM 中的属性的顺序。此外，将此参数设置为 <code>true</code> 还要设置下面列出的参数的状态。以后对这些参数中某个的状态的更改都会将&ldquo;规范形式&rdquo;转换回 <code>false</code>。设置为 <code>false</code> 的参数：&quot;entities&quot;、&quot; normalize-characters&quot;、&quot;cdata-sections&quot;。设置为 <code>true</code> 的参数：&quot;namespaces&quot;、&quot;namespace-declarations&quot;、&quot;well-formed&quot;、&quot;element-content-whitespace&quot;。其他参数只有在参数描述中显式地指定时才更改。</dd>
 <dt>
<code>false</code></dt>
<dd>[<em>需要</em>]（<em>默认</em>）不规范化文档。</dd>
 </dl></dd>
 <dt><code>&quot;cdata-sections&quot;</code></dt>
 <dd>
 <dl>
 <dt>
<code>true</code></dt>
<dd>[<em>需要</em>]（<em>默认</em>）保留文档中的 <code>CDATASection</code> 节点。</dd>
<dt><code>false</code></dt>
<dd>[<em>需要</em>]将文档中的 <code>CDATASection</code> 节点转换为 <code>Text</code> 节点。然后将新的 <code>Text</code> 节点与任何相邻 <code>Text</code> 节点合并起来。</dd>
 </dl></dd>
 <dt>
 <code>&quot;check-character-normalization&quot;</code></dt>
 <dd>
 <dl>
<dt><code>true</code></dt>
<dd>[<em>可选</em>] 检查文档中的字符是否是 <a href='http://www.w3.org/TR/2004/REC-xml11-20040204/#dt-fullnorm'>完全规范化</a>，如在 [<a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1</a>] 的附录 B 中定义的那样。当遇到规范化检查失败的字符序列时，将发生带有 <code>DOMError.type</code>（等于 &quot;check-character-normalization-failure&quot;）的错误。 </dd>
<dt><code>false</code></dt>
<dd>[<em>需要</em>]（<em>默认</em>）不检查字符是否规范化。</dd>
 </dl></dd>
 <dt><code>&quot;comments&quot;</code></dt>
 <dd>
 <dl>
 <dt>
<code>true</code></dt>
<dd>[<em>需要</em>]（<em>默认</em>）保留文档中的 <code>Comment</code> 节点。</dd>
<dt><code>false</code></dt>
<dd>[<em>需要</em>]丢弃文档中的 <code>Comment</code> 节点。</dd>
 </dl></dd>
 <dt>
 <code>&quot;datatype-normalization&quot;</code></dt>
 <dd>
 <dl>
<dt><code>true</code></dt>
<dd>[<em>optional</em>] 公开树中的模式标准化值，如 XML 模式中的 <a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#key-nv'>XML 模式标准化值</a>。由于此参数要求有模式信息，所以还要将 &quot;validate&quot; 参数设置为 <code>true</code>。&quot;validate&quot; 为 <code>false</code> 时激活此参数无效，且不发生模式规范化。 
<p ><b>注：</b>由于文档包含 XML 1.0 处理的结果，所以此参数不会像在 [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>] 的 3.3.3 节中定义的那样应用于属性值规范化，而只用于除文档类型定义 (DTD) 之外的模式语言。 </dd>
 <dt>
<code>false</code></dt>
<dd>[<em>需要</em>]（<em>默认</em>）不执行对树的模式规范化。 </dd>
 </dl></dd>
 <dt>
 <code>&quot;element-content-whitespace&quot;</code></dt>
 <dd>
 <dl>
<dt><code>true</code></dt>
<dd>[<em>需要</em>]（<em>默认</em>）保留文档中的所有空格。</dd>
<dt><code>false</code></dt>
<dd>[<em>可选</em>] 丢弃在元素内容中包含空格的所有 <code>Text</code> 节点，如在 <a href='http://www.w3.org/TR/2004/REC-xml-infoset-20040204#infoitem.character'>[element content whitespace]</a> 中描述的那样。期望该实现使用属性 <code>Text.isElementContentWhitespace</code> 来确定是否应该丢弃 <code>Text</code> 节点。</dd>
 </dl></dd>
 <dt><code>&quot;entities&quot;</code></dt>
 <dd>
 <dl>
 <dt>
<code>true</code></dt>
<dd>[<em>需要</em>]（<em>默认</em>）保留文档中的 <code>EntityReference</code> 节点。</dd>
 <dt>
<code>false</code></dt>
<dd>[<em>需要</em>] 从文档中移除所有 <code>EntityReference</code> 节点，并直接将实体扩展放入适当位置。按 <code>Node.normalize</code> 中定义的那样，标准化 <code>Text</code> 节点。文档中只保留 <a href='http://www.w3.org/TR/2004/REC-xml-infoset-20040204/#infoitem.rse'>未扩展的实体引用</a>。 </dd>
 </dl>
<p ><b>注：</b>此参数不影响 <code>Entity</code> 节点。 </dd>
 <dt>
 <code>&quot;error-handler&quot;</code></dt>
<dd>[<em>需要</em>] 包含 <code>DOMErrorHandler</code> 对象。如果在文档中遇到错误，则该实现将回调使用此参数注册的 <code>DOMErrorHandler</code>。该实现可以提供默认的 <code>DOMErrorHandler</code> 对象。调用时，<code>DOMError.relatedData</code> 将包含离发生错误的位置最近的节点。如果该实现不能确定发生错误的节点，则 <code>DOMError.relatedData</code> 将包含 <code>Document</code> 节点。从错误处理程序内部对文档的修改将导致与实现有关的行为。 </dd>
 <dt><code>&quot;infoset&quot;</code></dt>
 <dd>
 <dl>
 <dt>
<code>true</code></dt>
<dd>[<em>需要</em>] 在文档中保留在 XML 信息集合 [<a href='http://www.w3.org/TR/2004/REC-xml-infoset-20040204/'>XML Information Set</a>] 中定义的信息。这样做强迫以下参数为 <code>false</code>：&quot;validate-if-schema&quot;、&quot;entities&quot;、&quot;datatype-normalization&quot;、&quot;cdata-sections&quot;。这迫使以下参数为 <code>true</code>：&quot;namespace-declarations&quot;、&quot;well-formed&quot;、&quot;element-content-whitespace&quot;、&quot; comments&quot;、&quot;namespaces&quot;。其他参数只有在参数的描述中显式指定时才能更改。注意，只有在适当设置以上指定的单个参数时，使用 <code>getParameter</code> 查询此参数才能返回 <code>true</code>。</dd>
<dt><code>false</code></dt>
<dd>将 <code>infoset</code> 设置为 <code>false</code> 无效。</dd>
 </dl></dd>
 <dt><code>&quot;namespaces&quot;</code></dt>
 <dd>
 <dl>
 <dt>
<code>true</code></dt>
<dd>[<em>需要</em>]（<em>默认</em>）按以下定义方式执行名称空间处理。 </dd>
<dt><code>false</code></dt>
<dd>[<em>可选</em>] 不执行名称空间处理。 </dd>
 </dl></dd>
 <dt>
 <code>&quot;namespace-declarations&quot;</code></dt>
<dd> 如果将参数 &quot;namespaces&quot; 设置为 <code>false</code>，则此参数无效。 
 <dl>
<dt><code>true</code></dt>
<dd>[<em>需要</em>]（<em>默认</em>）包括在文档中模式指定或默认的名称空间声明属性。另请参见 [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>] 和 [<a href='http://www.w3.org/TR/2004/REC-xml-names11-20040204/'>XML Namespaces 1.1</a>] 中的&ldquo;声明名称空间&rdquo;各节。</dd>
<dt><code>false</code></dt>
<dd>[<em>需要</em>] 丢弃所有名称空间声明属性。保留名称空间前缀 (<code>Node.prefix</code>)，即使此参数设置为 <code>false</code>。</dd>
 </dl></dd>
 <dt><code>&quot;normalize-characters&quot;</code></dt>
 <dd>
 <dl>
<dt><code>true</code></dt>
<dd>[<em>可选</em>] <a href='http://www.w3.org/TR/2004/REC-xml11-20040204/#dt-fullnorm'>完全标准化</a>文档中的字符，如 [<a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1</a>] 的附录 B 中定义的那样。 </dd>
 <dt>
<code>false</code></dt>
<dd>[<em>需要</em>]（<em>默认</em>）不执行字符规范化。</dd>
 </dl></dd>
 <dt><code>&quot;schema-location&quot;</code></dt>
<dd>[<em>可选</em>] 表示包含 URI 列表的 <code>DOMString</code> 对象，由空格分隔（与在 [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>] 第 2.3 节定义的 <a href='http://www.w3.org/TR/2004/REC-xml-20040204#NT-S'>nonterminal production S</a> 匹配的字符），它表示对其进行验证的模式，即当前模式。此列表中引用的模式类型必须匹配用 <code>schema-type</code> 指定的类型，否则实现的行为不确定。使用此属性指定的模式优先于在文档本身中指定的模式信息。对于名称空间感知的模式而言，如果使用此属性指定的模式和模式文档（例如使用 <code>schemaLocation</code> 属性）中在文档实例中（例如使用模式 <code>import</code> 机制）指定的模式共享同一 <code>targetNamespace</code>，则将使用由用户使用此属性指定的模式。如果使用此属性指定的两个模式共享同一 <code>targetNamespace</code>，或不存在名称空间，则该行为与实现有关。如果未提供任何位置，则此参数为 <code>null</code>。 
<p ><b>注：</b>忽略 <code>&quot;schema-location&quot;</code> 参数，除非设置了 &quot;schema-type&quot; 参数值。强烈建议设置 <code>Document.documentURI</code>，以便实现可以成功解析所引用的所有外部实体。 </dd>
 <dt>
 <code>&quot;schema-type&quot;</code></dt>
<dd>[<em>可选</em>] 表示一个 <code>DOMString</code> 对象，该对象包含绝对 URI 且表示用于对其验证文档的模式语言类型。注意，不对绝对 URI 进行词汇检查。如果未设置此参数，则该实现可以根据支持的模式语言和加载时使用的模式语言提供默认值。如果未提供任何值，则此参数为 <code>null</code>。 
<p ><b>注：</b>对于 XML 模式 [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]，应用程序必须使用值 <code>&quot;http://www.w3.org/2001/XMLSchema&quot;</code>。对于 XML DTD [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>]，应用程序必须使用值 <code>&quot;http://www.w3.org/TR/REC-xml&quot;</code>。其他模式语言在 W3C 的作用域之外，因此为了使用此方法应该建议绝对 URI。 </dd>
 <dt><code>&quot;split-cdata-sections&quot;</code></dt>
 <dd>
 <dl>
 <dt>
<code>true</code></dt>
<dd>[<em>需要</em>]（<em>默认</em>）拆分包含 CDATA 节终止标志 ']]&gt;' 的 CDATA 节。拆分 CDATA 节时，将发出警告，<code>DOMError.type</code> 等于 <code>&quot;cdata-sections-splitted&quot;</code>，<code>DOMError.relatedData</code> 等于从该拆分得到的文档顺序的第一个 <code>CDATASection</code> 节点。</dd>
 <dt>
<code>false</code></dt>
<dd>[<em>需要</em>]如果 <code>CDATASection</code> 包含不可表示的字符时发出错误通知。</dd>
 </dl></dd>
 <dt><code>&quot;validate&quot;</code></dt>
 <dd>
 <dl>
<dt><code>true</code></dt>
<dd>[<em>可选</em>] 当它按 [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>] 定义的方式进行标准化时，要求验证文档的模式（例如 XML 模式、DTD、任何其他类型或表示形式的模式）。如果发现验证错误，或未发现任何模式，则通知错误处理程序。按照使用的模式，将不公开模式标准化值，除非参数 &quot;datatype-normalization&quot; 为 <code>true</code>。此参数将重新评诂： 
 <ul>
<li> 具有 <code>Attr.specified</code> 等于 <code>false</code> 的属性节点，如在 <code>Attr</code> 接口的描述中指定的那样；
 </li>
<li> 所有 <code>Text</code> 节点的属性 <code>Text.isElementContentWhitespace</code> 的值；
 </li>
<li> 所有 <code>Attr</code> 节点的属性 <code>Attr.isId</code> 的值；
 </li>
<li> 属性 <code>Element.schemaTypeInfo</code> 和 <code>Attr.schemaTypeInfo</code>。 
 </li>
 </ul>
<p ><b>注：</b>&quot;validate-if-schema&quot; 和 &quot;validate&quot; 互斥，将其中一个设置为 <code>true</code> 就要将另一个设置为 <code>false</code>。应用程序还应该考虑将参数 &quot;well-formed&quot; 设置为 <code>true</code>，这是验证该文档时该选项的默认值。 </dd>
<dt><code>false</code></dt>
<dd>[<em>需要</em>]（<em>默认</em>）不实现模式处理，包括内部子集处理。保留默认属性值信息。注意，如果 &quot;validate-if-schema&quot; 为 <code>true</code>，则仍可能进行验证。 </dd>
 </dl></dd>
 <dt><code>&quot;validate-if-schema&quot;</code></dt>
 <dd>
 <dl>
<dt><code>true</code></dt>
<dd>[<em>可选</em>]仅当可以在模式（与找到的位置无关，即 XML 模式、DTD 或模式的任何其他类型或表示形式）中找到文档元素的声明时启用验证。如果启用验证，则此参数的行为与设置为 <code>true</code> 的参数 &quot;validate&quot; 的行为相同。 
<p ><b>注：</b>&quot;validate-if-schema&quot; 和 &quot;validate&quot; 互斥，将其中一个设置为 <code>true</code> 就要将另一个设置为 <code>false</code>。 </dd>
<dt><code>false</code></dt>
<dd>[<em>需要</em>]（<em>默认</em>）如果文档有模式，则不应该执行任何模式处理，包括内部子集处理。保留默认属性值信息。注意，如果 &quot;validate&quot; 为 <code>true</code>，则仍必须进行验证。 </dd>
 </dl></dd>
 <dt><code>&quot;well-formed&quot;</code></dt>
 <dd>
 <dl>
<dt><code>true</code></dt>
<dd>[<em>需要</em>]（<em>默认</em>）按照在 <code>Document.xmlVersion</code> 中使用的 XML 版本检查所有节点是否是良好格式的 XML： 
 <ul>
<li> 按照其节点类型检查属性 <code>Node.nodeName</code> 是否包含无效字符；是否生成类型 <code>&quot;wf-invalid-character-in-node-name&quot;</code> 的 <code>DOMError</code>（必要时带有 <code>DOMError.SEVERITY_ERROR</code> severity）；
 </li>
<li> 检查 <code>Attr</code>、<code>Element</code>、<code>Comment</code>、<code>Text</code>、<code>CDATASection</code> 节点内的文本内容是否包含无效字符，是否生成类型 <code>&quot;wf-invalid-character&quot;</code> 的 <code>DOMError</code>（必要时带有 <code>DOMError.SEVERITY_ERROR</code> severity）；
 </li>
<li> 检查 <code>ProcessingInstruction</code> 节点内的数据是否包含无效字符，是否生成类型 <code>&quot;wf-invalid-character&quot;</code> 的 <code>DOMError</code>（必要时带有 <code>DOMError.SEVERITY_ERROR</code> severity）；
 </li>
 </ul></dd>
 <dt>
<code>false</code></dt>
<dd>[<em>可选</em>] 不检查 XML 的格式良好性。 </dd>
 </dl></dd>
 </dl>
<p> 使用 <code>Document.documentURI</code> 解析与实体相关的系统标识符。但是，当 DOM 实现支持在 [<a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407'>DOM Level 3 Load and Save</a>] 中定义的功能 &quot;LS&quot; 时，参数 &quot;resource-resolver&quot; 还可以在连接到 <code>Document</code> 节点的 <code>DOMConfiguration</code> 上使用。如果已设置了此参数，则 <code>Document.normalizeDocument()</code> 将调用资源解析程序，而不是使用 <code>Document.documentURI</code>。 
<p>另请参见 <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.DOMConfiguration.setParameter(String name, Object value) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置参数的值。
@param name 要设置的参数的名称。
@param value 新的值，如果用户希望取消设置该参数则为 <code>null</code>。当将值参数的类型定义为 <code>DOMUserData</code> 时，对象类型必须匹配由参数的定义所定义的类型。例如，如果参数为 &quot;error-handler&quot;，则该值必须是 <code>DOMErrorHandler</code> 类型。
@exception DOMException NOT_FOUND_ERR: 参数名称不可识别时，引发此异常。<br>NOT_SUPPORTED_ERR: 当参数名称可以识别但不能设置请求的值时，引发此异常。<br>TYPE_MISMATCH_ERR:如果此参数名称的值类型与期望的值类型不兼容，则引发此异常。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object org.w3c.dom.DOMConfiguration.getParameter(String name) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果已知，则返回参数的值。
@param name 参数的名称。
@return  返回与指定参数相关的当前对象；如果没有任何相关的对象，或如果参数不被支持，则返回 <code>null</code>。
@exception DOMException NOT_FOUND_ERR:参数名称不可识别时，引发此异常。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.DOMConfiguration.canSetParameter(String name, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查是否支持将参数设置为特定值。
@param name 要检查的参数的名称。
@param value 一个对象。如果为 <code>null</code>，则返回的值为 <code>true</code>。
@return 如果可以成功地将参数设置为特定的值，则返回 <code>true</code>；如果参数不可识别或请求的值不受支持，则返回 <code>false</code>。这样不会更改参数本身的当前值。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.DOMStringList org.w3c.dom.DOMConfiguration.getParameterNames()
<!-- END KEY -->
<!-- BEGIN DATA -->
此 <code>DOMConfiguration</code> 对象支持的参数列表，并且应用程序至少可以为其设置一个值。注意，此列表还可以包含在此规范之外定义的参数名称。 

<!-- END DATA -->
