<!-- BEGIN KEY -->
public interface org.w3c.dom.ls.LSInput
<!-- END KEY -->
<!-- BEGIN DATA -->
此接口表示数据的输入源。 
<p> 此接口允许应用程序封装有关单个对象中的输入源的信息，它可包括公共标识符、系统标识符、字节流（可能带有指定的编码）、基本 URI 和/ 或字符流。 
<p> 对字节流和字符流的精确定义具有绑定依赖性。 
<p> 当需要这种对象时，期望应用程序提供实现此接口的对象。应用程序既可以提供自己的实现此接口的对象，也可以使用一般的工厂方法 <code>DOMImplementationLS.createLSInput()</code> 来创建实现此接口的对象。 
<p> <code>LSParser</code> 将使用 <code>LSInput</code> 对象来确定如何读取数据。<code>LSParser</code> 将按照下面的顺序查看在 <code>LSInput</code> 中指定的不同输入，以便知道将从哪个输入中读取数据，将使用不为 null 并且不是空字符串的第一个输入： 
 <ol>
 <li> <code>LSInput.characterStream</code> 
 </li>
 <li> 
 <code>LSInput.byteStream</code> 
 </li>
 <li> <code>LSInput.stringData</code> 
 </li>
 <li> 
 <code>LSInput.systemId</code> 
 </li>
 <li> <code>LSInput.publicId</code> 
 </li>
 </ol> 
<p> 如果所有的输入都为 null，<code>LSParser</code> 将报告有 <code>DOMError</code>，其 <code>DOMError.type</code> 被设置为 <code>&quot;no-input-specified&quot;</code>，其 <code>DOMError.severity</code> 被设置为 <code>DOMError.SEVERITY_FATAL_ERROR</code>。 
<p> <code>LSInput</code> 对象属于应用程序。DOM 实现永远不会修改这些对象（尽管可在必要时制作副本和修改副本）。 
<p>另请参见《<a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407'>Document Object Model (DOM) Level 3 Load and Save Specification</a>》。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Reader org.w3c.dom.ls.LSInput.getCharacterStream()
<!-- END KEY -->
<!-- BEGIN DATA -->
依赖于语言和绑定类型的属性，表示 16 位单元流。应用程序必须使用 UTF-16（在 [Unicode] 和 [ISO/IEC 10646] 中定义）编码流。当使用字符流时，不必具有 XML 声明。如果有 XML 声明，将忽略编码属性的值。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.ls.LSInput.setCharacterStream(Reader characterStream)
<!-- END KEY -->
<!-- BEGIN DATA -->
依赖于语言和绑定类型的属性，表示 16 位单元的流。应用程序必须使用 UTF-16（在 [Unicode] 和 [ISO/IEC 10646] 中定义）编码流。当使用字符流时，不必具有 XML 声明。如果有 XML 声明，将忽略编码属性的值。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream org.w3c.dom.ls.LSInput.getByteStream()
<!-- END KEY -->
<!-- BEGIN DATA -->
依赖于语言和绑定类型的属性，表示字节的流。<br>如果应用程序知道字节流的字符编码，则必须设置编码属性。用此方法设置编码将重写在数据的 XML 声明中指定的任何编码。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.ls.LSInput.setByteStream(InputStream byteStream)
<!-- END KEY -->
<!-- BEGIN DATA -->
依赖于语言和绑定类型的属性，表示字节流。<br>如果应用程序知道字节流的字符编码，则必须设置编码属性。用此方法设置编码将重写在数据的 XML 声明中指定的任何编码。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.ls.LSInput.getStringData()
<!-- END KEY -->
<!-- BEGIN DATA -->
要解析的字符串数据。如果提供了字符串数据，将始终将此视为 16 位单元序列（UTF-16 编码字符）。当使用 <code>stringData</code> 时，不必具有 XML 声明。如果有 XML 声明，将忽略编码属性的值。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.ls.LSInput.setStringData(String stringData)
<!-- END KEY -->
<!-- BEGIN DATA -->
要解析的字符串数据。如果提供了字符串数据，将始终将此视为 16 位单元序列（UTF-16 编码的字符）。当使用 <code>stringData</code> 时，不必具有 XML 声明。如果有 XML 声明，将忽略编码属性的值。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.ls.LSInput.getSystemId()
<!-- END KEY -->
<!-- BEGIN DATA -->
系统标识符，它是此输入源的 URI 引用 [<a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396</a>]。如果有字节流、字符流或字符串数据，则系统标识符将为可选项。提供一项非常有用，因为应用程序将使用它来解析任何相对 URI，并可将它包含到错误消息和警告中。（如果在输入源中没有其他的输入可供使用，则 LSParser 将只尝试获取由 URI 引用标识的资源。）<br>如果应用程序知道系统标识符所指向的对象的字符编码，则可以使用 <code>encoding</code> 属性来设置编码。<br>如果指定的系统 ID 是相对 URI 引用（请参阅 [<a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396</a>] 中的 5 节），则 DOM 实现将尝试以 <code>baseURI</code> 为基解析相对 URI，如果尝试失败，则表示该行为具有实现依赖性。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.ls.LSInput.setSystemId(String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
系统标识符，它是此输入源的 URI 引用 [<a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396</a>]。如果有字节流、字符流或字符串数据，则系统标识符将为可选项。提供一项仍非常有用，因为应用程序将使用它来解析任何相对 URI，并可将它包含到错误消息和警告中。（如果在输入源中没有其他的输入可供使用，则 LSParser 将只尝试获取由 URI 引用标识的资源。）<br>如果应用程序知道系统标识符所指向的对象的字符编码，则可以使用 <code>encoding</code> 属性来设置编码。<br>如果指定的系统 ID 是相对 URI 引用（请参阅 [<a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396</a>] 中的 5 节），则 DOM 实现将尝试以 <code>baseURI</code> 为基解析相对 URI，如果尝试失败，则表示该行为与实现有关。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.ls.LSInput.getPublicId()
<!-- END KEY -->
<!-- BEGIN DATA -->
此输入源的公共标识符。可以使用依赖于实现的机制（如目录或其他映射）将它映射到一个输入源。当报告错误时，也可以将公共标识符（如果已指定）作为位置信息的一部分来报告。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.ls.LSInput.setPublicId(String publicId)
<!-- END KEY -->
<!-- BEGIN DATA -->
此输入源的公共标识符。可以使用具有实现依赖性的机制（如目录或其他映射）将它映射到一个输入源。当报告错误时，还可以将公共标识符（如果已指定）作为位置信息的一部分来报告。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.ls.LSInput.getBaseURI()
<!-- END KEY -->
<!-- BEGIN DATA -->
基 URI（请参阅 [<a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396</a>]中的 5.1.4 节），它用来解析绝对 URI 的相对 <code>systemId</code>。<br>如果使用时基 URI 本身是相对 URI、空字符串或 null，则表示该行为具有实现依赖性。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.ls.LSInput.setBaseURI(String baseURI)
<!-- END KEY -->
<!-- BEGIN DATA -->
基 URI（请参阅 [<a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396</a>])中的 5.1.4 节），它用来解析绝对 URI 的相对 <code>systemId</code>。<br>如果使用时基 URI 本身是相对 URI、空字符串或 null，则该行为具有实现依赖性。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.ls.LSInput.getEncoding()
<!-- END KEY -->
<!-- BEGIN DATA -->
字符编码（如果已知）。编码必须是 XML 编码声明（[<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>] 的 4.3.3 节 &quot;Character Encoding in Entities&quot;）可接受的字符串。<br>当应用程序提供字符流或字符串数据时，此属性无效。对于其他的输入源，通过此属性指定的编码将重写在 XML 声明或 Text 声明中指定的任何编码，或者从高层协议中获取的编码，如 HTTP [<a href='http://www.ietf.org/rfc/rfc2616.txt'>IETF RFC 2616</a>]。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.ls.LSInput.setEncoding(String encoding)
<!-- END KEY -->
<!-- BEGIN DATA -->
字符串编码（如果已知）。编码必须是 XML 编码声明（[<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>] 的 4.3.3 节 &quot;Character Encoding in Entities&quot;）可接受的字符串。<br>当应用程序提供字符流或字符串数据时，此属性无效。对于其他的输入源，通过此属性指定的编码将重写在 XML 声明或 Text 声明中指定的任何编码，或者从高层协议中获取的编码，如 HTTP [<a href='http://www.ietf.org/rfc/rfc2616.txt'>IETF RFC 2616</a>]。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.ls.LSInput.getCertifiedText()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果设置为 true，则假定解析 [<a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1</a>] 时对输入进行认证（请参阅 [<a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1</a>] 中的 2.13 节）。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.ls.LSInput.setCertifiedText(boolean certifiedText)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果设置为 true，则假定解析 [<a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1</a>] 时对输入进行验证（请参阅 [<a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1</a>] 中的 2.13 节）。 

<!-- END DATA -->
