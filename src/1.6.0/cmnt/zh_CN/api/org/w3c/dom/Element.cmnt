<!-- BEGIN KEY -->
public interface org.w3c.dom.Element extends org.w3c.dom.Node
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Element</code> 接口表示 HTML 或 XML 文档中的一个元素。元素可能有与它们相关的属性；由于 <code>Element</code> 接口继承自 <code>Node</code>，所以可以使用一般 <code>Node</code> 接口属性 <code>attributes</code> 来获得元素所有属性的集合。<code>Element</code> 接口上有通过名称获得 <code>Attr</code> 对象或通过名称获得属性值的方法。在 XML 中（其中的属性值可能包含实体引用），应该获得 <code>Attr</code> 对象来检查表示属性值的可能相当复杂的子树。另一方面，在 HTML 中（其中的所有属性都有简单的字符串值），可以使用直接访问属性值的方法，这既安全又便捷。
<p ><b>注：</b>在 DOM Level 2 中，方法 <code>normalize</code> 是从转移到的 <code>Node</code> 接口继承的。
<p>另请参见 <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.Element.getTagName()
<!-- END KEY -->
<!-- BEGIN DATA -->
元素的名称。如果 <code>Node.localName</code> 与 <code>null</code> 不同，则此属性为一个限定名称。例如，在以下示例中： 
 <pre> &lt;elementExample id=&quot;demo&quot;&gt; ... 
 &lt;/elementExample&gt; , </pre>
<code>tagName</code> 具有值 <code>&quot;elementExample&quot;</code>。注意，这在 XML 中是保留大小写的，DOM 中的所有操作也是这样。HTML DOM 以规范的大写形式返回 HTML 元素的 <code>tagName</code>，而不考虑源 HTML 文档中的大小写形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.Element.getAttribute(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过名称获得属性值。
@param name 要获得的属性名称。
@return 字符串形式的 <code>Attr</code> 值；如果该属性没有指定值或默认值，则返回空字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.Element.setAttribute(String name, String value) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
添加一个新属性。如果具有该名称的属性已经出现在元素中，则将其值更改为值参数的值。此值为简单的字符串；在设置它时没有对它进行解析。因此，将任何标记（如作为实体引用而被识别的语法）视为字面值文本，并且需要在写出时由实现适当转义。为了分配包含实体引用的属性值，用户必须创建一个 <code>Attr</code> 节点，加上所有 <code>Text</code> 和 <code>EntityReference</code> 节点，构建适当的子树，并将它作为属性值，通过 <code>setAttributeNode</code> 方法来分配。<br>要设置具有限定名称和名称空间 URI 的属性，使用 <code>setAttributeNS</code> 方法。
@param name 要创建或更改的属性名称。
@param value 以字符串形式设置的值。
@exception DOMException INVALID_CHARACTER_ERR: 根据在 <code>Document.xmlVersion</code> 属性中指定的正在使用的 XML 版本，如果指定名称不是 XML 名称，则引发此异常。<br>NO_MODIFICATION_ALLOWED_ERR: 如果此节点为只读的，则引发此异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.Element.removeAttribute(String name) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
通过名称移除一个属性。如果被移除属性的默认值在 DTD 中定义，则新的属性值将在可用时随该默认值以及相应名称空间 URI、本地名称和前缀立即出现。类似地，实现可以处理其他模式的默认值，但应用程序应该使用 <code>Document.normalizeDocument()</code> 来保证此信息最新。<br>如果找不到具有此名称的属性，则此方法无效。<br>要通过本地名称和名称空间 URI 移除属性，使用 <code>removeAttributeNS</code> 方法。
@param name 要移除的属性的名称。
@exception DOMException NO_MODIFICATION_ALLOWED_ERR: 如果此节点为只读的，则引发此异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Attr org.w3c.dom.Element.getAttributeNode(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过名称获得属性节点。<br>要通过限定名称和名称空间 URI 获得属性节点，使用 <code>getAttributeNodeNS</code> 方法。
@param name 要获得的属性名称 (<code>nodeName</code>)。
@return 返回具有指定名称 (<code>nodeName</code>) 的 <code>Attr</code> 节点；如果没有这样的属性，则返回 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Attr org.w3c.dom.Element.setAttributeNode(Attr newAttr) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
添加新的属性节点。如果具有该名称 (<code>nodeName</code>) 的属性已经出现在元素中，则用新属性替换它。用自身替换属性节点无效。<br>要添加具有限定名称和名称空间 URI 的新属性节点，使用 <code>setAttributeNodeNS</code> 方法。
@param newAttr 要添加到属性列表的 <code>Attr</code> 节点。
@return 如果用 <code>newAttr</code> 属性替换现有属性，则返回被替换的 <code>Attr</code> 节点；否则返回 <code>null</code>。
@exception DOMException WRONG_DOCUMENT_ERR: 如果 <code>newAttr</code> 是从不同的文档创建的，不是从创建该元素的文档创建的，则引发此异常。<br>NO_MODIFICATION_ALLOWED_ERR: 如果此节点为只读的，则引发此异常。<br>INUSE_ATTRIBUTE_ERR: 如果 <code>newAttr</code> 已经是另一个 <code>Element</code> 对象的属性，则引发此异常。DOM 用户必须显式地克隆 <code>Attr</code> 节点，以便在其他元素中重新使用它们。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Attr org.w3c.dom.Element.removeAttributeNode(Attr oldAttr) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定的属性节点。如果在 DTD 中定义了被移除 <code>Attr</code> 节点的默认值，则新的节点将在可用时随该默认值以及相应名称空间 URI、本地名称和前缀一起立即出现。类似地，实现可以处理其他模式的默认值，但应用程序应该使用 <code>Document.normalizeDocument()</code> 来保证此信息最新。
@param oldAttr 从属性列表中移除的 <code>Attr</code> 节点。
@return 被移除的 <code>Attr</code> 节点。
@exception DOMException NO_MODIFICATION_ALLOWED_ERR: 如果此节点为只读的，则引发此异常。<br>NOT_FOUND_ERR: 如果 <code>oldAttr</code> 不是该元素的属性，则引发此异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.NodeList org.w3c.dom.Element.getElementsByTagName(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
以文档顺序返回具有给定标记名称的所有后代 <code>Elements</code> 的 <code>NodeList</code>。
@param name 要匹配的标记的名称。特殊值 &quot;*&quot; 匹配所有标记。
@return 匹配的 <code>Element</code> 节点列表。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.Element.getAttributeNS(String namespaceURI, String localName) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
通过本地名称和名称空间 URI 获得属性值。<br>按照 [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]，如果应用程序希望没有名称空间，则它们必须将值 <code>null</code> 用作方法的 <code>namespaceURI</code> 参数。
@param namespaceURI 要获得的属性的名称空间 URI。
@param localName 要获得的属性的本地名称。
@return 字符串形式的 <code>Attr</code> 值；如果该属性没有指定值或默认值，则返回空字符串。
@exception DOMException NOT_SUPPORTED_ERR: 如果实现不支持功能 <code>&quot;XML&quot;</code> 且文档中公开的语言不支持 XML 名称空间（例如 [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]），则可能引发此异常。
@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.Element.setAttributeNS(String namespaceURI, String qualifiedName, String value) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
添加新属性。如果具有相同本地名称和名称空间 URI 的属性已经出现在元素上，则将其前缀更改为 <code>qualifiedName</code> 的前缀部分，并将其值更改为 <code>value</code> 参数。此值为简单的字符串；在设置它时没有对它进行解析。因此，将任何标记（如作为实体引用识别的语法）视为字面值文本，并且需要在写出时由实现适当转义。为了分配包含实体引用的属性值，用户必须创建一个 <code>Attr</code> 节点，加上所有 <code>Text</code> 和 <code>EntityReference</code> 节点，构建适当的子树，并使用 <code>setAttributeNodeNS</code> 或 <code>setAttributeNode</code> 作为属性的值分配它。<br>按照 [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]，如果应用程序希望没有名称空间，则它们必须将值 <code>null</code> 用作方法的 <code>namespaceURI</code> 参数。
@param namespaceURI 要创建或更改的属性的名称空间 URI。
@param qualifiedName 要创建或更改的属性的限定名称。
@param value 以字符串形式设置的值。
@exception DOMException INVALID_CHARACTER_ERR: 根据在 <code>Document.xmlVersion</code> 属性中指定的正在使用的 XML 版本,如果指定名称不是 XML 名称，则引发此异常。<br>NO_MODIFICATION_ALLOWED_ERR:如果此节点为只读的，则引发此异常。<br>NAMESPACE_ERR: 在以下情况下引发此异常：如果根据 XML 规范中的名称空间，<code>qualifiedName</code> 是错误格式的；如果 <code>qualifiedName</code> 有前缀且 <code>namespaceURI</code> 为 <code>null</code>；如果 <code>qualifiedName</code> 有名为 &quot;xml&quot; 的前缀且 <code>namespaceURI</code> 不同于 &quot;<a href='http://www.w3.org/XML/1998/namespace'>http://www.w3.org/XML/1998/namespace</a>&quot;；如果 <code>qualifiedName</code> 或其前缀为 &quot;xmlns&quot; 且 <code>namespaceURI</code> 不同于 &quot;<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>&quot;；或者如果 <code>namespaceURI</code> 为 &quot;<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>&quot; 且 <code>qualifiedName</code> 及其前缀都不是 &quot;xmlns&quot;。 <br>NOT_SUPPORTED_ERR:如果实现不支持功能 <code>&quot;XML&quot;</code> 且文档中公开的语言不支持 XML 名称空间（例如 [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]），则可能引发此异常。
@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.Element.removeAttributeNS(String namespaceURI, String localName) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
通过本地名称和名称空间 URI 移除属性值。如果被移除属性的默认值在 DTD 中定义，则新的属性值将在可用时随该默认值以及相应名称空间 URI、本地名称和前缀立即出现。类似地，实现可以处理其他模式的默认值，但应用程序应该使用 <code>Document.normalizeDocument()</code> 来保证此信息最新。<br>如果找不到具有此本地名称和名称空间 URI 的属性，则此方法无效。<br>按照 [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]，如果应用程序希望没有名称空间，则它们必须将值 <code>null</code> 用作方法的 <code>namespaceURI</code> 参数。
@param namespaceURI 要移除的属性的名称空间 URI。
@param localName 要移除的属性的本地名称。
@exception DOMException NO_MODIFICATION_ALLOWED_ERR: 如果此节点为只读的，则引发此异常。<br>NOT_SUPPORTED_ERR: 如果实现不支持功能 <code>&quot;XML&quot;</code> 且文档中公开的语言不支持 XML 名称空间（例如 [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]），则可能引发此异常。
@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Attr org.w3c.dom.Element.getAttributeNodeNS(String namespaceURI, String localName) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
通过本地名称和名称空间 URI 获得 <code>Attr</code> 节点。<br>按照 [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]，如果应用程序希望没有名称空间，则它们必须将值 <code>null</code> 用作方法的 <code>namespaceURI</code> 参数。
@param namespaceURI 要获得的属性的名称空间 URI。
@param localName 要获得的属性的本地名称。
@return 具有特定属性名称和名称空间 URI 的 <code>Attr</code> 节点；如果没有这样的属性，则返回 <code>null</code>。
@exception DOMException NOT_SUPPORTED_ERR: 如果实现不支持功能 <code>&quot;XML&quot;</code> 且文档中公开的语言不支持 XML 名称空间（例如 [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]），则可能引发此异常。
@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Attr org.w3c.dom.Element.setAttributeNodeNS(Attr newAttr) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
添加新属性。如果具有该本地名称和该名称空间 URI 的属性已经出现在元素中，则用新的属性替换它。用自身替换属性节点无效。<br>按照 [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]，如果应用程序希望没有名称空间，则它们必须将值 <code>null</code> 用作方法的 <code>namespaceURI</code> 参数。
@param newAttr 要添加到属性列表的 <code>Attr</code> 节点。
@return 如果用 <code>newAttr</code> 属性替换具有相同本地名称和名称空间 URI 的现有属性，则返回被替换的 <code>Attr</code> 节点；否则返回 <code>null</code>。
@exception DOMException WRONG_DOCUMENT_ERR: 如果 <code>newAttr</code> 是从不同的文档创建的，不是从创建该元素的文档创建的，则引发此异常。<br>NO_MODIFICATION_ALLOWED_ERR:如果此节点为只读的，则引发此异常。<br>INUSE_ATTRIBUTE_ERR: 如果 <code>newAttr</code> 已经是另一个 <code>Element</code> 对象的属性，则引发此异常。DOM 用户必须显式地克隆 <code>Attr</code> 节点，以便在其他元素中重新使用它们。<br>NOT_SUPPORTED_ERR: 如果实现不支持功能 <code>&quot;XML&quot;</code> 且文档中公开的语言不支持 XML 名称空间（例如 [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]），则可能引发此异常。
@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.NodeList org.w3c.dom.Element.getElementsByTagNameNS(String namespaceURI, String localName) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
以文档顺序返回具有给定本地名称和名称空间 URI 的所有后代 <code>Elements</code> 的 <code>NodeList</code>。
@param namespaceURI 要匹配的元素的名称空间 URI。特殊值 &quot;*&quot; 匹配所有名称空间。
@param localName 要匹配的元素的本地名称。特殊值 &quot;*&quot; 匹配所有本地名称。
@return 包含所有匹配的 <code>Elements</code> 的新 <code>NodeList</code> 对象。
@exception DOMException NOT_SUPPORTED_ERR: 如果实现不支持功能 <code>&quot;XML&quot;</code> 且文档中公开的语言不支持 XML 名称空间（例如 [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]），则可能引发此异常。
@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.Element.hasAttribute(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
当具有给定名称的属性在此元素上被指定一个值或具有默认值时，返回 <code>true</code>；否则返回 <code>false</code>。
@param name 要查找的属性名称。
@return 如果具有给定名称的属性在此元素上被指定一个值或具有默认值，则返回 <code>true</code>；否则返回 <code>false</code>。
@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.Element.hasAttributeNS(String namespaceURI, String localName) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
当具有给定本地名称和名称空间 URI 的属性在此元素上被指定一个值或具有默认值时，返回 <code>true</code>；否则返回 <code>false</code>。<br>按照 [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]，如果应用程序希望没有名称空间，则它们必须将值 <code>null</code> 用作方法的 <code>namespaceURI</code> 参数。
@param namespaceURI 要查找的属性的名称空间 URI。
@param localName 要查找的属性的本地名称。
@return 如果具有给定本地名称和名称空间 URI 的属性在此元素上被指定一个值或具有默认值，则返回 <code>true</code>；否则返回 <code>false</code>。
@exception DOMException NOT_SUPPORTED_ERR:如果实现不支持功能 <code>&quot;XML&quot;</code> 且文档中公开的语言不支持 XML 名称空间（例如 [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]），则可能引发此异常。
@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.TypeInfo org.w3c.dom.Element.getSchemaTypeInfo()
<!-- END KEY -->
<!-- BEGIN DATA -->
与此元素相关的类型信息。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.Element.setIdAttribute(String name, boolean isId) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果参数 <code>isId</code> 为 <code>true</code>，则此方法将指定的属性声明为用于确定用户的 ID 属性。此方法影响 <code>Attr.isId</code> 的值和 <code>Document.getElementById</code> 的行为，但不更改可能正在使用的任何模式；需要特别指出的是，此方法不影响指定 <code>Attr</code> 节点的 <code>Attr.schemaTypeInfo</code>。使用参数 <code>isId</code> 的值 <code>false</code> 来取消将属性声明为用户确定的 ID 属性。<br> 要通过本地名称和名称空间 URI 指定属性，使用 <code>setIdAttributeNS</code> 方法。
@param name 属性名称。
@param isId 属性是否是 ID 类型。
@exception DOMException NO_MODIFICATION_ALLOWED_ERR:如果此节点为只读的，则引发此异常。 <br>NOT_FOUND_ERR:如果指定的节点不是此元素的属性，则引发此异常。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.Element.setIdAttributeNS(String namespaceURI, String localName, boolean isId) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果参数 <code>isId</code> 为 <code>true</code>，则此方法将指定的属性声明为用户确定的 ID 属性。此方法影响 <code>Attr.isId</code> 的值和 <code>Document.getElementById</code> 的行为，但不更改可能正在使用的任何模式；需要特别指出的是，此方法不影响指定 <code>Attr</code> 节点的 <code>Attr.schemaTypeInfo</code>。使用参数 <code>isId</code> 的值 <code>false</code> 来取消将属性声明为用户确定的 ID 属性。
@param namespaceURI 属性的名称空间 URI。
@param name 属性的本地名称。
@param isId 属性是否是 ID 类型。
@exception DOMException NO_MODIFICATION_ALLOWED_ERR:如果此节点为只读的，则引发此异常。<br>NOT_FOUND_ERR: 如果指定的节点不是此元素的属性，则引发此异常。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.Element.setIdAttributeNode(Attr idAttr, boolean isId) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果参数 <code>isId</code> 为 <code>true</code>，则此方法将指定的属性声明为用户确定的 ID 属性。此方法影响 <code>Attr.isId</code> 的值和 <code>Document.getElementById</code> 的行为，但不更改可能正在使用的任何模式；需要特别指出的是，此方法不影响指定 <code>Attr</code> 节点的 <code>Attr.schemaTypeInfo</code>。使用参数 <code>isId</code> 的值 <code>false</code> 来取消将属性声明为用户确定的 ID 属性。
@param idAttr 属性节点。
@param isId 属性是否是 ID 类型。
@exception DOMException NO_MODIFICATION_ALLOWED_ERR: 如果此节点为只读的，则引发此异常。<br>NOT_FOUND_ERR: 如果指定的节点不是此元素的属性，则引发此异常。
@since DOM Level 3

<!-- END DATA -->
