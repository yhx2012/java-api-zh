<!-- BEGIN KEY -->
public interface org.w3c.dom.events.MouseEvent extends org.w3c.dom.events.UIEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>MouseEvent</code> 接口提供与鼠标事件相关联的特定上下文信息。
<p>从 <code>UIEvent</code> 继承的 <code>detail</code> 属性指示在用户操作期间同一屏幕位置上鼠标按键被按下和释放的次数。用户开始此操作时属性值为 1，对每个完整的按下和释放序列增加 1。如果用户在 mousedown 和 mouseup 之间移动鼠标，则将值设置为 0，指示没有进行单击操作。
<p>就嵌套元素来说，鼠标事件的目标始终是最里层的嵌套元素。目标元素的祖先可以使用 bubbling 来获得在其后代元素内发生的鼠标事件的通知。
<p>另请参见 <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113'>Document Object Model (DOM) Level 2 Events Specification</a>。
@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int org.w3c.dom.events.MouseEvent.getScreenX()
<!-- END KEY -->
<!-- BEGIN DATA -->
相对于屏幕坐标系统原点的水平坐标(事件发生在此处)。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int org.w3c.dom.events.MouseEvent.getScreenY()
<!-- END KEY -->
<!-- BEGIN DATA -->
相对于屏幕坐标系统原点的垂直坐标(事件发生在此处)。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int org.w3c.dom.events.MouseEvent.getClientX()
<!-- END KEY -->
<!-- BEGIN DATA -->
相对于 DOM 实现的客户区域的水平坐标(事件发生在此处)。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int org.w3c.dom.events.MouseEvent.getClientY()
<!-- END KEY -->
<!-- BEGIN DATA -->
相对于 DOM 实现的客户区域的垂直坐标(事件发生在此处)。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.events.MouseEvent.getCtrlKey()
<!-- END KEY -->
<!-- BEGIN DATA -->
用于指示在触发事件事件期间是否按下 'ctrl' 键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.events.MouseEvent.getShiftKey()
<!-- END KEY -->
<!-- BEGIN DATA -->
 用于指示在触发事件期间是否按下 'shift' 键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.events.MouseEvent.getAltKey()
<!-- END KEY -->
<!-- BEGIN DATA -->
用于指示在触发事件期间是否按下 'alt' 键。在有些平台上，此键可能映射为一个替代键名。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.events.MouseEvent.getMetaKey()
<!-- END KEY -->
<!-- BEGIN DATA -->
用于指示在触发事件期间是否按下 'meta' 键。在有些平台上，此键可能映射为一个替代键名。

<!-- END DATA -->
<!-- BEGIN KEY -->
public short org.w3c.dom.events.MouseEvent.getButton()
<!-- END KEY -->
<!-- BEGIN DATA -->
在由按下或释放鼠标的按键引起的鼠标事件期间，<code>button</code> 用于指示哪一个鼠标按键改变了状态。<code>button</code> 值的范围为 0 （指示鼠标的左键）、1（指示中间键（如果有））和 2（指示右键）。对于为左手使用而配置的鼠标，鼠标按键操作正好相反，值改为从右向左读取。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.events.EventTarget org.w3c.dom.events.MouseEvent.getRelatedTarget()
<!-- END KEY -->
<!-- BEGIN DATA -->
用于识别与 UI 事件相关的辅助 <code>EventTarget</code>。目前此属性和 mouseover 事件一起使用来指示指点设备退出的 <code>EventTarget</code>，和 mouseout 事件一起使用指示指点设备进入的 <code>EventTarget</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.events.MouseEvent.initMouseEvent(String typeArg, boolean canBubbleArg, boolean cancelableArg, AbstractView viewArg, int detailArg, int screenXArg, int screenYArg, int clientXArg, int clientYArg, boolean ctrlKeyArg, boolean altKeyArg, boolean shiftKeyArg, boolean metaKeyArg, short buttonArg, EventTarget relatedTargetArg)
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>initMouseEvent</code> 方法用于初始化通过 <code>DocumentEvent</code> 接口创建的 <code>MouseEvent</code> 的值。此方法只能在通过 <code>dispatchEvent</code> 方法指派 <code>MouseEvent</code> 之前调用，尽管在该阶段可以多次调用它（如有必要）。如果被多次调用，则最后一次调用优先。
@param typeArg 指定事件类型。
@param canBubbleArg 指定该事件是否可以 bubble。
@param cancelableArg 指定是否可以阻止事件的默认操作。
@param viewArg 指定 <code>Event</code> 的 <code>AbstractView</code>。
@param detailArg 指定 <code>Event</code> 的鼠标单击量。
@param screenXArg 指定 <code>Event</code> 的屏幕 x 坐标
@param screenYArg 指定 <code>Event</code> 的屏幕 y 坐标
@param clientXArg 指定 <code>Event</code> 的客户机 x 坐标
@param clientYArg 指定 <code>Event</code> 的客户机 y 坐标
@param ctrlKeyArg 指定是否在 <code>Event</code> 期间按下 control 键。
@param altKeyArg 指定是否在 <code>Event</code> 期间按下 alt 键。
@param shiftKeyArg 指定是否在 <code>Event</code> 期间按下 shift 键。
@param metaKeyArg 指定是否在 <code>Event</code> 期间按下 meta 键。
@param buttonArg 指定 <code>Event</code> 的鼠标按键。
@param relatedTargetArg 指定 <code>Event</code> 的相关 <code>EventTarget</code>。

<!-- END DATA -->
