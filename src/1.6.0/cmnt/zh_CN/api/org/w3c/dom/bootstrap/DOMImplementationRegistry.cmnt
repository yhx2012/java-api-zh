<!-- BEGIN KEY -->
public final class org.w3c.dom.bootstrap.DOMImplementationRegistry extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
启用应用程序来获得 <code>DOMImplementation</code> 实例的工厂。

 <p>
示例：
 </p>

 <pre class='example'>
  // get an instance of the DOMImplementation registry
  DOMImplementationRegistry registry =
       DOMImplementationRegistry.newInstance();
  // get a DOM implementation the Level 3 XML module
  DOMImplementation domImpl =
       registry.getDOMImplementation(&quot;XML 3.0&quot;);
 </pre>

 <p>
这提供了一个带有与实现无关的开始点的应用程序。DOM 实现可以修改此类以满足新的安全标准，或为 DOMImplementationSource 列表提供 *附加的* 回退。
 </p>

@see DOMImplementation
@see DOMImplementationSource
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String org.w3c.dom.bootstrap.DOMImplementationRegistry.PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
指定 DOMImplementationSource 类名称的系统属性。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static org.w3c.dom.bootstrap.DOMImplementationRegistry org.w3c.dom.bootstrap.DOMImplementationRegistry.newInstance() throws java.lang.ClassNotFoundException, java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.ClassCastException
<!-- END KEY -->
<!-- BEGIN DATA -->
获得 <code>DOMImplementationRegistry</code> 的新实例。

<code>DOMImplementationRegistry</code> 是由应用程序还是实现进行初始化，这取决于上下文，首先检查 Java 系统属性 <code>org.w3c.dom.DOMImplementationSourceList</code> 的值和服务提供者(其内容位于 &quot;<code>META_INF/services/org.w3c.dom.DOMImplementationSourceList</code>&quot; )。此属性的值是一个由空格分隔的实现 <code>DOMImplementationSource</code> 接口的可供使用的类名称列表。列表在类名称列表中的每个类都实例化，并将遇到的所有异常抛给应用程序。

@return 已初始化的 DOMImplementationRegistry 实例
@throws ClassNotFoundException 如果无法找到任何指定的类
@throws InstantiationException 如果任何指定的类是接口或抽象类
@throws IllegalAccessException 如果指定类的默认构造方法不可访问 
@throws  ClassCastException 如果任何指定的类没有实现 <code>DOMImplementationSource</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.DOMImplementation org.w3c.dom.bootstrap.DOMImplementationRegistry.getDOMImplementation(String features)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回第一个具有所需功能的实现；如果找不到具有所需功能的任何实现，则返回 <code>null</code>。

@param features 指定所需功能的字符串。这是一个空格分隔的列表，列表中每个功能都由其名称指定，可以选择后面跟随一个空格和版本号。此列表的形式类似如下：&quot;XML 1.0 Traversal +Events 2.0&quot;
@return 具有所需功能的实现；如果找不到具有所需功能的任何实现，则返回 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.DOMImplementationList org.w3c.dom.bootstrap.DOMImplementationRegistry.getDOMImplementationList(String features)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回支持所需功能的实现列表。

@param features 指定所需功能的字符串。这是一个空格分隔的列表，列表中每个功能都由其名称指定，可以选择后面跟随一个空格和版本号。此列表的形式类似如下：&quot;XML 1.0 Traversal +Events 2.0&quot;
@return 支持所需功能的 DOMImplementation 列表。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.bootstrap.DOMImplementationRegistry.addSource(DOMImplementationSource s)
<!-- END KEY -->
<!-- BEGIN DATA -->
注册实现。

@param s 要注册的源，不可以为 <code>null</code>

<!-- END DATA -->
