<!-- BEGIN KEY -->
public interface org.w3c.dom.events.EventTarget
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>EventTarget</code> 接口由支持 DOM Event Model 的实现中的所有 <code>Nodes</code> 实现。因此，此接口可以通过在 <code>Node</code> 接口的实例上使用特定于绑定的强制转换方法获得。该接口允许在 <code>EventTarget</code> 上注册和移除 <code>EventListeners</code>，并将事件指派给 <code>EventTarget</code>。
<p>另请参见《<a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113'>Document Object Model (DOM) Level 2 Events Specification</a>》。
@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.events.EventTarget.addEventListener(String type, EventListener listener, boolean useCapture)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法允许在事件目标上注册事件侦听器。如果在处理事件时将 <code>EventListener</code> 添加到 <code>EventTarget</code>，则该事件将不会通过当前操作触发，但可以在事件流后面的阶段（如 bubbling 阶段）触发。<br> 如果使用同样的参数在同一个 <code>EventTarget</code> 上注册多个相同的 <code>EventListener</code>，则丢弃重复的实例。它们不会引起两次调用 <code>EventListener</code>，并且由于被丢弃，它们不需要使用 <code>removeEventListener</code> 方法移除。
@param type 用户正在注册的事件类型
@param listener <code>listener</code> 参数采用由用户实现的接口，该接口包含事件发生时要调用的方法。
@param useCapture 如果为 true，则 <code>useCapture</code> 指示用户希望启动捕获。启动捕获后，所有指定类型的事件将在被指派到树中其下面的任何 <code>EventTargets</code> 之前指派给已注册的 <code>EventListener</code>。正在通过树向上 bubbling 的事件将不触发指定的使用捕获的 <code>EventListener</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.events.EventTarget.removeEventListener(String type, EventListener listener, boolean useCapture)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法允许从事件目标移除事件侦听器。如果 <code>EventListener</code> 在处理事件时从 <code>EventTarget</code> 移除，则它不会由当前操作触发。<code>EventListener</code> 永远不能在移除后被调用。<br>用不标识在 <code>EventTarget</code> 上的任何当前已注册的 <code>EventListener</code> 的参数调用 <code>removeEventListener</code> 时无效。
@param type 指定正在被移除的 <code>EventListener</code> 的事件类型。
@param listener 该 <code>EventListener</code> 参数指示要被移除的 <code>EventListener </code>。
@param useCapture 指定正被移除的 <code>EventListener</code> 是否是作为捕获侦听器注册的。如果一个侦听器注册了两次，一次带有捕获，一次不带捕获，每次都必须单独移除。移除捕获侦听器不影响同一侦听器的非捕获版本，反之亦然。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.events.EventTarget.dispatchEvent(Event evt) throws org.w3c.dom.events.EventException
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法允许将事件指派到实现事件模型。以此方式指派的事件将与直接由实现指派的事件有相同的捕获和 bubbling 行为。事件的目标是在其上调用 <code>dispatchEvent</code> 的 <code> EventTarget</code>。
@param evt 指定用于处理事件的事件类型、行为或上下文信息。
@return <code>dispatchEvent</code> 的返回值指示处理事件的任何一个侦听器是否调用了 <code>preventDefault</code>。如果调用了 <code>preventDefault</code>，则值为 false；否则该值为 true。
@exception EventException UNSPECIFIED_EVENT_TYPE_ERR: 如果 <code>Event</code> 的类型不是在调用 <code>dispatchEvent</code> 之前通过初始化该事件指定的，则引发该异常。把 <code>Event</code> 的类型指定为 <code>null</code> 或空字符串也会触发此异常。

<!-- END DATA -->
