<!-- BEGIN KEY -->
public interface org.w3c.dom.DOMImplementation
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>DOMImplementation</code> 接口为执行独立于文档对象模型的任何特定实例的操作提供了许多方法。
<p>另请参见 <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.DOMImplementation.hasFeature(String feature, String version)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试 DOM 实现是否实现在 <a href="http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMFeatures">DOM Features</a> 中指定的特定特性和版本。
@param feature 要测试的特性的名称。
@param version 这是要测试的特性的版本号。
@return 如果在指定的版本中实现该特性，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.DocumentType org.w3c.dom.DOMImplementation.createDocumentType(String qualifiedName, String publicId, String systemId) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建空 <code>DocumentType</code> 节点。无法使实体声明和表示法可用。不发生实体引用扩展和默认属性添加。
@param qualifiedName 要创建的文档类型的限定名称。
@param publicId 外部子集的公共标识符。
@param systemId 外部子集的系统标识符。
@return 具有设置为 <code>null</code> 的 <code>Node.ownerDocument</code> 的新 <code>DocumentType</code> 节点。
@exception DOMException INVALID_CHARACTER_ERR:如果指定的限定名称不是遵循 [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>] 的 XML 名称，则引发此异常。<br>NAMESPACE_ERR: 如果 <code>qualifiedName</code> 是错误格式的，则引发此异常。<br>NOT_SUPPORTED_ERR: 如果实现不支持功能 &quot;XML&quot; 且文档公开的语言不支持 XML 名称空间（如 [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]），则可能引发此异常。
@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Document org.w3c.dom.DOMImplementation.createDocument(String namespaceURI, String qualifiedName, DocumentType doctype) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有文档元素的指定类型的 DOM Document 对象。<br>注意，基于给定的 <code>DocumentType</code> 创建文档，该实现可以实例化特定的 <code>Document</code> 对象，这些对象可支持 &quot;Core&quot; 之外的其他特性，如 &quot;HTML&quot; [<a href='http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109'>DOM Level 2 HTML</a>]。而在创建文档之后再设置 <code>DocumentType</code>，可能使得此操作很难实现。此外，特定的 <code>Document</code> 创建方法（例如 <code>createHTMLDocument</code> [<a href='http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109'>DOM Level 2 HTML</a>]）可用于获取特定类型的 <code>Document</code> 对象。
@param namespaceURI 要创建的文档元素的名称空间 URI 或 <code>null</code>。
@param qualifiedName 要创建的文档元素的限定名称或 <code>null</code>。
@param doctype 要创建的文档的类型或 <code>null</code>。当 <code>doctype</code> 不是 <code>null</code> 时，其 <code>Node.ownerDocument</code> 属性将被设置为正在创建的文档。
@return 具有文档元素的新 <code>Document</code> 对象。如果 <code>NamespaceURI</code>、<code>qualifiedName</code> 和 <code>doctype</code> 为 <code>null</code>，则返回的 <code>Document</code> 为空的，不带有文档元素。
@exception DOMException INVALID_CHARACTER_ERR:如果指定的限定名称不是遵循 [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>] 的 XML 名称，则引发此异常。<br>NAMESPACE_ERR: 在以下情况下引发此异常：如果 <code>qualifiedName</code> 是错误格式的；如果 <code>qualifiedName</code> 有前缀且 <code>namespaceURI</code> 为 <code>null</code>；或者如果 <code>qualifiedName</code> 为 <code>null</code> 且 <code>namespaceURI</code> 不同于 <code>null</code>；或者如果 <code>qualifiedName</code> 有名为 &quot;xml&quot; 的前缀且 <code>namespaceURI</code> 不同于 &quot;<a href='http://www.w3.org/XML/1998/namespace'>http://www.w3.org/XML/1998/namespace</a>&quot; [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]；或者如果 DOM 实现不支持 <code>&quot;XML&quot;</code> 功能但提供非 null 名称空间 URI，因为名称空间由 XML 定义。<br>WRONG_DOCUMENT_ERR: 如果 <code>doctype</code> 已经用于不同文档或者从不同的实现创建，则引发此异常。<br>NOT_SUPPORTED_ERR: 如果实现不支持功能 &quot;XML&quot; 且文档公开的语言不支持 XML 名称空间（如 [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]），则可能引发此异常。
@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object org.w3c.dom.DOMImplementation.getFeature(String feature, String version)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回一个特定的对象，该对象实现了 <a href="http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMFeatures">DOM Features</a> 中所指定的特定特性或版本的特殊 API。该特殊对象也可以通过使用特定于绑定的强制转换方法获得，但不是必须期望这样做，正如文中讨论的那样。此方法还允许实现提供不支持 <code>DOMImplementation</code> 接口的特殊对象。
@param feature 所请求的功能的名称。注意，追加到功能的名称的任何加号 &quot;+&quot; 将被忽略，因为它在此方法的上下文中无关紧要。
@param version 这是要测试的功能的版本号。
@return 返回实现指定的特性和版本的特殊 API 的对象（如果有）；如果不存在实现与此特性相关的接口的对象，则返回 <code>null</code>。如果此方法返回的 <code>DOMObject</code> 实现 <code>DOMImplementation</code> 接口，则它必须委托给主要核心实现 <code>DOMImplementation</code> 且不返回与该主要核心 <code>DOMImplementation</code> 不一致的结果，如 <code>hasFeature</code>、<code>getFeature</code>、等等。
@since DOM Level 3

<!-- END DATA -->
