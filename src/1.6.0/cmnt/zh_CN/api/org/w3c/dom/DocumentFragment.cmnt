<!-- BEGIN KEY -->
public interface org.w3c.dom.DocumentFragment extends org.w3c.dom.Node
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>DocumentFragment</code> 是&ldquo;轻量级&rdquo;或&ldquo;最小&rdquo;<code>Document</code> 对象。希望能够提取文档树的一部分或创建文档的新片段是很常见的。设想实现像剪切这样的用户命令或通过来回移动片段重新安排文档。需要有一个可以保存此类片段的对象，很自然出于此目要使用一个 Node。当 <code>Document</code> 对象真正可以完成此职责时，<code>Document</code> 对象可能为重量级对象，具体取决于基础实现。此操作真正需要的是非常轻量级的对象。<code>DocumentFragment</code> 就是这样的对象。
<p>此外，多种操作（如作为另一个 <code>Node</code> 的子节点插入节点）可能将 <code>DocumentFragment</code> 对象作为参数；这样会导致将 <code>DocumentFragment</code> 的所有子节点移动到此节点的子列表。
<p><code>DocumentFragment</code> 节点的子节点为 0 或表示定义文档结构的所有子树顶部的多个节点。<code>DocumentFragment</code> 节点不需要是格式良好的 XML 文档（尽管它们需要遵循强加给格式良好的 XML 已解析实体的规则，这些实体可以有多个顶部节点）。例如，<code>DocumentFragment</code> 可能只有一个子节点，并且该子节点可以是 <code>Text</code>。这样的结构模型表示的既不是 HTML 文档，也不是格式良好的 XML 文档。
<p>将 <code>DocumentFragment</code> 插入 <code>Document</code>（确切地说是可以接受子节点的任何其他 <code>Node</code>）时，将 <code>DocumentFragment</code> 的子节点而不是将 <code>DocumentFragment</code> 本身插入 <code>Node</code>。这使得 <code>DocumentFragment</code> 在用户希望创建兄弟节点时非常有用；该 <code>DocumentFragment</code> 充当这些节点的父节点，所以用户可以使用 <code>Node</code> 接口中的标准方法，如 <code>Node.insertBefore</code> 和 <code>Node.appendChild</code>。
<p>另请参见 <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>。

<!-- END DATA -->
