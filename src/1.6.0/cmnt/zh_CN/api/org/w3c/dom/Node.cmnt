<!-- BEGIN KEY -->
public interface org.w3c.dom.Node
<!-- END KEY -->
<!-- BEGIN DATA -->
该 <code>Node</code> 接口是整个文档对象模型的主要数据类型。它表示该文档树中的单个节点。当实现 <code>Node</code> 接口的所有对象公开处理子节点的方法时，不是实现 <code>Node</code> 接口的所有对象都有子节点。例如，<code>Text</code> 节点可能没有子节点，且将子节点添加到这样的节点将导致引发 <code>DOMException</code>。
<p>包括属性 <code>nodeName</code>、<code>nodeValue</code> 和 <code>attributes</code> 作为一种获取节点信息的机制，无需向下强制转换为特定的派生接口。在没有对特定的 <code>nodeType</code>（如 <code>Element</code> 的 <code>nodeValue</code> 或 <code>Comment</code> 的 <code>attributes</code>）的属性的明显映射的情况下，这将返回 <code>null</code>。注意，特定的接口可能包含其他更方便的机制来获取和设置相关信息。
<p><code>nodeName</code>、<code>nodeValue</code> 和 <code>attributes</code> 的值将根据以下节点类型的不同而不同。 
 <table border='1' cellpadding='3'>
 <tr>
 <th>Interface</th>
 <th>nodeName</th>
 <th>nodeValue</th>
 <th>attributes</th>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'>
 <code>Attr</code></td>
<td valign='top' rowspan='1' colspan='1'>与 <code>Attr.name</code> 相同</td>
<td valign='top' rowspan='1' colspan='1'>与 <code>Attr.value</code> 相同</td>
 <td valign='top' rowspan='1' colspan='1'><code>null</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'><code>CDATASection</code></td>
 <td valign='top' rowspan='1' colspan='1'>
 <code>&quot;#cdata-section&quot;</code></td>
<td valign='top' rowspan='1' colspan='1'>与 <code>CharacterData.data</code> 相同，CDATA 节的内容</td>
 <td valign='top' rowspan='1' colspan='1'><code>null</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'><code>Comment</code></td>
 <td valign='top' rowspan='1' colspan='1'>
 <code>&quot;#comment&quot;</code></td>
<td valign='top' rowspan='1' colspan='1'>与 <code>CharacterData.data</code> 相同，该注释的内容</td>
 <td valign='top' rowspan='1' colspan='1'><code>null</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'><code>Document</code></td>
 <td valign='top' rowspan='1' colspan='1'>
 <code>&quot;#document&quot;</code></td>
 <td valign='top' rowspan='1' colspan='1'><code>null</code></td>
 <td valign='top' rowspan='1' colspan='1'><code>null</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'>
 <code>DocumentFragment</code></td>
 <td valign='top' rowspan='1' colspan='1'><code>&quot;#document-fragment&quot;</code></td>
 <td valign='top' rowspan='1' colspan='1'>
 <code>null</code></td>
 <td valign='top' rowspan='1' colspan='1'><code>null</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'><code>DocumentType</code></td>
<td valign='top' rowspan='1' colspan='1'>与 <code>DocumentType.name</code> 相同</td>
 <td valign='top' rowspan='1' colspan='1'><code>null</code></td>
 <td valign='top' rowspan='1' colspan='1'><code>null</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'>
 <code>Element</code></td>
<td valign='top' rowspan='1' colspan='1'>与 <code>Element.tagName</code> 相同</td>
 <td valign='top' rowspan='1' colspan='1'><code>null</code></td>
 <td valign='top' rowspan='1' colspan='1'>
 <code>NamedNodeMap</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'><code>Entity</code></td>
 <td valign='top' rowspan='1' colspan='1'>entity name</td>
 <td valign='top' rowspan='1' colspan='1'><code>null</code></td>
 <td valign='top' rowspan='1' colspan='1'>
 <code>null</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'><code>EntityReference</code></td>
<td valign='top' rowspan='1' colspan='1'>引用的实体名称</td>
 <td valign='top' rowspan='1' colspan='1'>
 <code>null</code></td>
 <td valign='top' rowspan='1' colspan='1'><code>null</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'><code>Notation</code></td>
 <td valign='top' rowspan='1' colspan='1'>notation name</td>
 <td valign='top' rowspan='1' colspan='1'>
 <code>null</code></td>
 <td valign='top' rowspan='1' colspan='1'><code>null</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'><code>ProcessingInstruction</code></td>
<td valign='top' rowspan='1' colspan='1'>与 <code>ProcessingInstruction.target</code> 相同</td>
<td valign='top' rowspan='1' colspan='1'>与 <code>ProcessingInstruction.data</code> 相同</td>
 <td valign='top' rowspan='1' colspan='1'><code>null</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'><code>Text</code></td>
 <td valign='top' rowspan='1' colspan='1'>
 <code>&quot;#text&quot;</code></td>
<td valign='top' rowspan='1' colspan='1'>与 <code>CharacterData.data</code> 相同，该文本节点的内容</td>
 <td valign='top' rowspan='1' colspan='1'><code>null</code></td>
 </tr>
 </table> 
<p>另请参见 <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.Node.ELEMENT_NODE
<!-- END KEY -->
<!-- BEGIN DATA -->
该节点为 <code>Element</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.Node.ATTRIBUTE_NODE
<!-- END KEY -->
<!-- BEGIN DATA -->
该节点为 <code>Attr</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.Node.TEXT_NODE
<!-- END KEY -->
<!-- BEGIN DATA -->
该节点为 <code>Text</code> 节点。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.Node.CDATA_SECTION_NODE
<!-- END KEY -->
<!-- BEGIN DATA -->
该节点为 <code>CDATASection</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.Node.ENTITY_REFERENCE_NODE
<!-- END KEY -->
<!-- BEGIN DATA -->
该节点为 <code>EntityReference</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.Node.ENTITY_NODE
<!-- END KEY -->
<!-- BEGIN DATA -->
该节点为 <code>Entity</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE
<!-- END KEY -->
<!-- BEGIN DATA -->
该节点为 <code>ProcessingInstruction</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.Node.COMMENT_NODE
<!-- END KEY -->
<!-- BEGIN DATA -->
该节点为 <code>Comment</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.Node.DOCUMENT_NODE
<!-- END KEY -->
<!-- BEGIN DATA -->
该节点为 <code>Document</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.Node.DOCUMENT_TYPE_NODE
<!-- END KEY -->
<!-- BEGIN DATA -->
该节点为 <code>DocumentType</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.Node.DOCUMENT_FRAGMENT_NODE
<!-- END KEY -->
<!-- BEGIN DATA -->
该节点为 <code>DocumentFragment</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.Node.NOTATION_NODE
<!-- END KEY -->
<!-- BEGIN DATA -->
该节点为 <code>Notation</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.Node.DOCUMENT_POSITION_DISCONNECTED
<!-- END KEY -->
<!-- BEGIN DATA -->
两个节点断开连接。断开连接的节点之间的顺序始终特定于实现。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.Node.DOCUMENT_POSITION_PRECEDING
<!-- END KEY -->
<!-- BEGIN DATA -->
第二个节点在引用节点之前。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.Node.DOCUMENT_POSITION_FOLLOWING
<!-- END KEY -->
<!-- BEGIN DATA -->
该节点在引用节点之后。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.Node.DOCUMENT_POSITION_CONTAINS
<!-- END KEY -->
<!-- BEGIN DATA -->
该节点包含引用节点。包含的节点也总是在前面。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.Node.DOCUMENT_POSITION_CONTAINED_BY
<!-- END KEY -->
<!-- BEGIN DATA -->
引用节点包含该节点。包含的节点也总是在后面。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC
<!-- END KEY -->
<!-- BEGIN DATA -->
对前后位置的确定是特定于实现的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.Node.getNodeName()
<!-- END KEY -->
<!-- BEGIN DATA -->
此节点的名称，取决于其类型；参见上表。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.Node.getNodeValue() throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
此节点的值，取决于其类型；参见上表。当将它定义为 <code>null</code> 时，设置它无效，包括节点为只读的情况。
@exception DOMException DOMSTRING_SIZE_ERR: 在它返回的字符多于实现平台上 <code>DOMString</code> 变量中适合的字符时引发此异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.Node.setNodeValue(String nodeValue) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
此节点的值，取决于其类型；参见上表。当将它定义为 <code>null</code> 时，设置它无效，包括节点为只读的情况。
@exception DOMException NO_MODIFICATION_ALLOWED_ERR: 当节点为只读且未将它定义为 <code>null</code> 时引发此异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public short org.w3c.dom.Node.getNodeType()
<!-- END KEY -->
<!-- BEGIN DATA -->
表示基础对象的类型的节点，如上所述。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node org.w3c.dom.Node.getParentNode()
<!-- END KEY -->
<!-- BEGIN DATA -->
此节点的父节点。所有节点（除 <code>Attr</code>、<code>Document</code>、<code>DocumentFragment</code>、<code>Entity</code> 和 <code>Notation</code>）都可以有父节点。但是，如果刚创建节点且尚未添加到树，或如果已经从树中移除了它，此值为 <code>null</code>。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.NodeList org.w3c.dom.Node.getChildNodes()
<!-- END KEY -->
<!-- BEGIN DATA -->
包含此节点的所有子节点的 <code>NodeList</code>。如果不存在子节点，则这是不包含节点的 <code>NodeList</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node org.w3c.dom.Node.getFirstChild()
<!-- END KEY -->
<!-- BEGIN DATA -->
此节点的第一个子节点。如果没有这样的节点，则返回 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node org.w3c.dom.Node.getLastChild()
<!-- END KEY -->
<!-- BEGIN DATA -->
此节点的最后一个节点。如果没有这样的节点，则返回 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node org.w3c.dom.Node.getPreviousSibling()
<!-- END KEY -->
<!-- BEGIN DATA -->
直接在此节点之前的节点。如果没有这样的节点，则返回 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node org.w3c.dom.Node.getNextSibling()
<!-- END KEY -->
<!-- BEGIN DATA -->
直接在此节点之后的节点。如果没有这样的节点，则返回 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.NamedNodeMap org.w3c.dom.Node.getAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
包含此节点的属性的 <code>NamedNodeMap</code>（如果它是 <code>Element</code>）；否则为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Document org.w3c.dom.Node.getOwnerDocument()
<!-- END KEY -->
<!-- BEGIN DATA -->
与此节点相关的 <code>Document</code> 对象。这也是用于创建新节点的 <code>Document</code> 对象。当此节点为 <code>Document</code> 或未与任何 <code>Document</code> 一起使用的 <code>DocumentType</code> 时，返回 <code>null</code>。

@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node org.w3c.dom.Node.insertBefore(Node newChild, Node refChild) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
在现有子节点 <code>refChild</code> 之前插入节点 <code>newChild</code>。如果 <code>refChild</code> 为 <code>null</code>，则将 <code>newChild</code> 插入到子节点列表的末尾。<br>如果 <code>newChild</code> 为 <code>DocumentFragment</code> 对象，则以同样的顺序将其所有节点插入 <code>refChild</code> 之前。如果 <code>newChild</code> 已经存在于树中，则首先移除它。
<p ><b>注：</b>将一个节点插入本身之前与实现有关。
@param newChild 要插入的节点。
@param refChild 引用节点，即必须在其前插入新节点的节点。
@return 要插入的节点。
@exception DOMException HIERARCHY_REQUEST_ERR:在以下情况下引发此异常：如果此节点为不允许 <code>newChild</code> 节点类型的子节点的类型；或者如果要插入的节点为此节点的一个祖先或此节点本身；或者如果此节点为 <code>Document</code> 类型且 DOM 应用程序试图插入第二个 <code>DocumentType</code> 或 <code>Element</code> 节点。 <br>WRONG_DOCUMENT_ERR:如果 <code>newChild</code> 是从不同的文档创建的，不是从创建此节点的文档创建的，则引发此异常。 <br>NO_MODIFICATION_ALLOWED_ERR:如果此节点为只读的，或者如果要插入的节点的父节点为只读的，则引发此异常。 <br>NOT_FOUND_ERR: 如果 <code>refChild</code> 不是此节点的子节点。<br>NOT_SUPPORTED_ERR: 如果此节点为 <code>Document</code> 类型，如果 DOM 实现不支持插入 <code>DocumentType</code> 或 <code>Element</code> 节点，则可能引发此异常。

@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node org.w3c.dom.Node.replaceChild(Node newChild, Node oldChild) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
将子节点列表中的子节点 <code>oldChild</code> 替换为 <code>newChild</code>，并返回 <code>oldChild</code> 节点。<br>如果 <code>newChild</code> 为 <code>DocumentFragment</code> 对象，则将 <code>oldChild</code> 替换为所有 <code>DocumentFragment</code> 子节点，它们都以相同的顺序插入。如果 <code>newChild</code> 已经存在于树中，则首先移除它。
<p><b>注：</b>将节点替换为它本身与实现有关。
@param newChild 要在子节点列表中放入的新节点。
@param oldChild 列表中被替换的节点。
@return 替换的节点。
@exception DOMException HIERARCHY_REQUEST_ERR: 在以下情况下引发此异常：如果此节点为不允许 <code>newChild</code> 节点类型的子节点的类型；或者如果要放入的节点为此节点的一个祖先或此节点本身；或者如果此节点为 <code>Document</code> 类型且替换操作的结果将第二个 <code>DocumentType</code> 或 <code>Element</code> 添加到 <code>Document</code> 上。 <br>WRONG_DOCUMENT_ERR: 如果 <code>newChild</code> 是从不同的文档创建的，不是从创建此节点的文档创建的，则引发此异常。 <br>NO_MODIFICATION_ALLOWED_ERR: 如果此节点或新节点的父节点为只读的，则引发此异常。<br>NOT_FOUND_ERR: 如果 <code>oldChild</code> 不是此节点的子节点，则引发此异常。<br>NOT_SUPPORTED_ERR: 如果此节点为 <code>Document</code> 类型，则如果 DOM 实现不支持替换 <code>DocumentType</code> 子节点或 <code>Element</code> 子节点，则可能引发此异常。

@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node org.w3c.dom.Node.removeChild(Node oldChild) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
从子节点列表中移除 <code>oldChild</code> 所指示的子节点，并将其返回。
@param oldChild 移除的节点。
@return 移除的节点。
@exception DOMException NO_MODIFICATION_ALLOWED_ERR: 如果此节点为只读的，则引发此异常。<br>NOT_FOUND_ERR: 如果 <code>oldChild</code> 不是此节点的子节点。<br>NOT_SUPPORTED_ERR: 如果此节点为 <code>Document</code> 类型，则如果 DOM 实现不支持移除 <code>DocumentType</code> 子节点或 <code>Element</code> 子节点，则可能引发此异常。

@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node org.w3c.dom.Node.appendChild(Node newChild) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
将节点 <code>newChild</code> 添加到此节点的子节点列表的末尾。如果 <code>newChild</code> 已经存在于树中，则首先移除它。
@param newChild 要添加的节点。如果它是 <code>DocumentFragment</code> 对象，则将文档片段的整个内容移动到此节点的子列表中
@return 添加的节点。
@exception DOMException HIERARCHY_REQUEST_ERR: 在以下情况下引发此异常：如果此节点为不允许 <code>newChild</code> 节点类型的子节点的类型；或者如果要追加的节点为此节点的一个祖先或此节点本身；或者如果此节点为 <code>Document</code> 类型且 DOM 应用程序试图追加第二个 <code>DocumentType</code> 或 <code>Element</code> 节点。<br>WRONG_DOCUMENT_ERR: 如果 <code>newChild</code> 是从不同的文档创建的，不是从创建此节点的文档创建的，则引发此异常。 <br>NO_MODIFICATION_ALLOWED_ERR:如果此节点为只读的，或者如果要插入的节点以前的父节点为只读的，则引发此异常。<br>NOT_SUPPORTED_ERR: 如果 <code>newChild</code> 节点为 <code>Document</code> 节点的子节点，则如果 DOM 实现不支持移除 <code>DocumentType</code> 子节点或 <code>Element</code> 子节点，则可能引发此异常。

@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.Node.hasChildNodes()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此节点是否具有任何子节点。
@return 如果此节点没有任何子节点，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node org.w3c.dom.Node.cloneNode(boolean deep)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此节点的副本，即允当节点的一般复制构造方法。副本节点没有父节点（<code>parentNode</code> 为 <code>null</code>），且没有用户数据。与导入的节点相关的用户数据不携带过来。但是，如果随相关数据一起指定了任何 <code>UserDataHandlers</code>，则将在此方法返回之前用适当的参数调用这些处理程序。<br>克隆一个 <code>Element</code> 将复制所有属性及其值，包括由 XML 处理器生成的用来表示默认属性的那些属性和值，但此方法不复制它包含的任何子节点，除非它是一个深层克隆。这包括此 <code>Element</code> 所包含的文本，因为该文本包含在子 <code>Text</code> 节点中。直接克隆 <code>Attr</code>（相对于作为 <code>Element</code> 克隆操作的一部分进行的克隆）将返回指定的属性（<code>specified</code> 为 <code>true</code>）。克隆一个 <code>Attr</code> 总是要克隆其子节点，因为它们表示其值，不管这是否是深层克隆。如果相应的 <code>Entity</code> 可用，则克隆 <code>EntityReference</code> 将自动构造其子树，不管这是否是深层克隆。克隆任何其他类型的节点只返回此节点的副本。<br>注意，克隆一个不可变子树会导致可变副本，但 <code>EntityReference</code> 克隆的子节点应为只读的。此外，还要指定未指定的 <code>Attr</code> 节点的克隆。并且，克隆 <code>Document</code>、<code>DocumentType</code>、<code>Entity</code> 和 <code>Notation</code> 节点与实现有关。
@param deep 如果为 <code>true</code>，则在指定节点下递归式克隆子树；如果为 <code>false</code>，则仅克隆节点本身（及其属性，如果它是 <code>Element</code>）。
@return 副本节点。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.Node.normalize()
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Node</code> 之下完整的深层子树中所有 <code>Text</code> 节点（包括属性节点）放入只有结构（如元素、注释、处理指令、CDATA 节和实体引用）分隔 <code>Text</code> 节点的&ldquo;常规&rdquo;形式，也就是说，既没有相邻的 <code>Text</code> 节点，也没有空 <code>Text</code> 节点。这可以用于确保一个文档的 DOM 视图相同，好像它是保存和重新加载的一样，并且在使用依赖特定文档树结构的操作（如 XPointer [<a href='http://www.w3.org/TR/2003/REC-xptr-framework-20030325/'>XPointer</a>] 查询）时此方法非常有用。如果连接到 <code>Node.ownerDocument</code> 的 <code>DOMConfiguration</code> 对象的参数 &quot;normalize-characters&quot; 为 <code>true</code>，则此方法还将完全标准化 <code>Text</code> 节点的字符。 
<p><b>注：</b>在文档包含 <code>CDATASections</code> 的情况下，单独的标准化操作可能不充分，因为 XPointer 不区分 <code>Text</code> 节点和 <code>CDATASection</code> 节点。

@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.Node.isSupported(String feature, String version)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试 DOM 实现是否实现特定功能，且该功能是否受此节点支持，如下所述。
@param feature 要测试的功能的名称。
@param version 这是要测试的功能的版本号。
@return 如果在此节点上支持指定的功能，则返回 <code>true</code>；否则，返回 <code>false</code>。

@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.Node.getNamespaceURI()
<!-- END KEY -->
<!-- BEGIN DATA -->
此节点的名称空间 URI；如果它未被指定，则返回 <code>null</code>（参见）。<br>这不是计算的值，计算的值是基于检查范围内名称空间声明的名称空间查询的结果。它只是创建时给定的名称空间 URI。<br>对于除 <code>ELEMENT_NODE</code> 和 <code>ATTRIBUTE_NODE</code> 之外的任何类型的节点以及使用 DOM Level 1 方法创建的节点，如 <code>Document.createElement()</code>，这始终为 <code>null</code>。
<p ><b>注：</b>根据 <em>Namespaces in XML</em> 规范 [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]，属性不从它连接到的元素继承其名称空间。如果未显式给定一个属性名称空间，则它只是没有名称空间。

@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.Node.getPrefix()
<!-- END KEY -->
<!-- BEGIN DATA -->
此节点的名称空间前缀；如果它未被指定，则为 <code>null</code>。当将它定义为 <code>null</code> 时，设置它无效，包括节点为只读的情况。<br>注意，在允许时设置此属性将更改 <code>nodeName</code> 属性，它将在可用时保存限定名称，以及 <code>Element</code> 和 <code>Attr</code> 接口的 <code>tagName</code> 和 <code>name</code> 属性。<br>将前缀设置为 <code>null</code> 会使它不被指定，将它设置为空字符串与实现有关。<br>还要注意，更改已知具有默认值的属性的前缀不会使具有默认值和初始前缀的新属性出现，因为 <code>namespaceURI</code> 和 <code>localName</code> 没有发生变化。<br>对于除 <code>ELEMENT_NODE</code> 和 <code>ATTRIBUTE_NODE</code> 之外的任何类型的节点以及使用 DOM Level 1 方法创建的节点，如 <code>Document</code> 接口中的 <code>createElement</code>，这始终为 <code>null</code>。

@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.Node.setPrefix(String prefix) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
此节点的名称空间前缀；如果未指定，则为 <code>null</code>。当将它定义为 <code>null</code> 时，设置它无效，包括节点为只读的情况。<br>注意，在允许时设置此属性将更改 <code>nodeName</code> 属性，它将在可用时保存限定名称，以及 <code>Element</code> 和 <code>Attr</code> 接口的 <code>tagName</code> 和 <code>name</code> 属性。<br>将前缀设置为 <code>null</code> 会使它不被指定，将它设置为空字符串与实现有关。<br>还要注意，更改已知具有默认值的属性的前缀不会使具有默认值和初始前缀的新属性出现，因为 <code>namespaceURI</code> 和 <code>localName</code> 不发生变化。<br>对于除 <code>ELEMENT_NODE</code> 和 <code>ATTRIBUTE_NODE</code> 之外的任何类型的节点以及使用 DOM Level 1 方法创建的节点，如 <code>Document</code> 接口中的 <code>createElement</code>，这始终为 <code>null</code>。
@exception DOMException INVALID_CHARACTER_ERR: 根据在 <code>Document.xmlVersion</code> 属性中指定的正在使用的 XML 版本，如果指定的前缀包含非法字符，则引发此异常。<br>NO_MODIFICATION_ALLOWED_ERR: 如果此节点为只读，则引发此异常。<br>NAMESPACE_ERR:在以下情况下引发此异常：如果按照 XML 规范中的名称空间，指定的 <code>prefix</code> 格式错误；如果此节点的 <code>namespaceURI</code> 为 <code>null</code>；如果指定的前缀为 &quot;xml&quot; 且此节点的 <code>namespaceURI</code> 不同于 &quot;<a href='http://www.w3.org/XML/1998/namespace'>http://www.w3.org/XML/1998/namespace</a>&quot;；如果此节点为属性，指定前缀为 &quot;xmlns&quot; 且此节点的 <code>namespaceURI</code> 不同于 &quot;<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>&quot;；或者如果此节点为属性且此节点的 <code>qualifiedName</code> 为 &quot;xmlns&quot; [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]。

@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.Node.getLocalName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此节点限定名称的本地部分。<br>对于除 <code>ELEMENT_NODE</code> 和 <code>ATTRIBUTE_NODE</code> 之外的任何类型的节点以及使用 DOM Level 1 方法创建的节点，如 <code>Document.createElement()</code>，这始终为 <code>null</code>。

@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.Node.hasAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此节点（如果它是一个元素）是否具有任何属性。
@return 如果此节点具有任何属性，则返回 <code>true</code>；否则返回 <code>false</code>。

@since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.Node.getBaseURI()
<!-- END KEY -->
<!-- BEGIN DATA -->
此节点的绝对基 URI；如果实现不能获得绝对 URI，则为 <code>null</code>。此值如描述的那样计算。但是，当 <code>Document</code> 支持功能 &quot;HTML&quot; [<a href='http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109'>DOM Level 2 HTML</a>] 时，首先使用 HTML BASE 元素（如果有）的 href 属性的值计算基 URI；否则，使用 <code>Document</code> 接口中的 <code>documentURI</code> 属性的值计算。

@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public short org.w3c.dom.Node.compareDocumentPosition(Node other) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
就节点在文档中的位置并按照文档的顺序，比较引用节点（即在其上调用此方法的节点）与作为参数传递的节点。
@param other 与引用节点比较的节点。
@return 返回相对于引用节点如何定位节点。
@exception DOMException NOT_SUPPORTED_ERR: 当被比较的节点来自不同的 DOM 实现，未调整该 DOM 实现以返回一致的特定于实现的结果时。

@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.Node.getTextContent() throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
此属性返回此节点及其后代的文本内容。将它定义为 <code>null</code> 时，设置它无效。设置后，移除此节点可能有的任何可能的子节点，并且如果新字符串不为空或 <code>null</code>，则用包含此属性设置的字符串的单个 <code>Text</code> 节点替换。<br> 获取后，不执行序列化，且返回的字符串不包含任何标记。不执行空白规范化且在元素内容中返回的字符串不包含空白（参见属性 <code>Text.isElementContentWhitespace</code>）。类似地，设置后，也不执行解析，且以纯文本内容形式采用输入字符串。<br>根据下面定义的节点类型，返回的字符串由此节点的文本内容生成： 
 <table border='1' cellpadding='3'>
 <tr>
<th>节点类型</th>
<th>内容</th>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'>
 ELEMENT_NODE, ATTRIBUTE_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE, DOCUMENT_FRAGMENT_NODE</td>
<td valign='top' rowspan='1' colspan='1'>串接每个子节点的 <code>textContent</code> 属性值，不包括 COMMENT_NODE 和 PROCESSING_INSTRUCTION_NODE 节点。如果该节点没有子节点，则这是空字符串。</td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'>TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE, PROCESSING_INSTRUCTION_NODE</td>
 <td valign='top' rowspan='1' colspan='1'><code>nodeValue</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'>DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE</td>
 <td valign='top' rowspan='1' colspan='1'><em>null</em></td>
 </tr>
 </table>

@exception DOMException DOMSTRING_SIZE_ERR:在它返回的字符多于实现平台上 <code>DOMString</code> 变量中适合的字符时引发此异常。

@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.Node.setTextContent(String textContent) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
此属性返回此节点及其后代的文本内容。将它定义为 <code>null</code> 时，设置它无效。设置后，移除此节点可能有的任何可能的子节点，并且，如果新字符串不为空或 <code>null</code>，则用包含此属性设置的字符串的单个 <code>Text</code> 节点替换。<br> 获取后，不执行序列化，且返回的字符串不包含任何标记。不执行空白规范化，且返回的字符串在元素内容中不包含空白（参见属性 <code>Text.isElementContentWhitespace</code>）。类似地，设置后，也不执行解析，且以纯文本内容形式采用输入字符串。<br>根据下面定义的节点类型，返回的字符串由此节点的文本内容生成： 
 <table border='1' cellpadding='3'>
 <tr>
<th>节点类型</th>
<th>内容</th>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'>
 ELEMENT_NODE, ATTRIBUTE_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE, DOCUMENT_FRAGMENT_NODE</td>
<td valign='top' rowspan='1' colspan='1'>串接每个子节点的 <code>textContent</code> 属性值，不包括 COMMENT_NODE 和 PROCESSING_INSTRUCTION_NODE 节点。如果该节点没有子节点，则这是空字符串。</td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'>TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE, PROCESSING_INSTRUCTION_NODE</td>
 <td valign='top' rowspan='1' colspan='1'><code>nodeValue</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'>DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE</td>
 <td valign='top' rowspan='1' colspan='1'><em>null</em></td>
 </tr>
 </table>

@exception DOMException NO_MODIFICATION_ALLOWED_ERR: 节点为只读的时引发此异常。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.Node.isSameNode(Node other)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此节点是否是与给定节点相同的节点。<br>此方法提供一种方法来确定由实现返回的两个 <code>Node</code> 引用是否引用同一个对象。当两个 <code>Node</code> 引用引用同一个对象时，即使是通过代理，也可能完全可交换地使用这些引用，例如所有属性都有相同的值且在任何引用上调用同一个 DOM 方法总是起完全相同的作用。
@param other 要测试的节点。
@return 如果节点相同，则返回 <code>true</code>；否则，返回 <code>false</code>。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.Node.lookupPrefix(String namespaceURI)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此节点开始，查找与给定名称空间 URI 相关的前缀。此方法忽略默认名称空间声明。<br>参见此方法使用的算法的详细信息。
@param namespaceURI 要查找的名称空间 URI。
@return 如果已找到，则返回相关的名称空间前缀；如果未找到任何前缀，则返回 <code>null</code>。如果一个以上的前缀与名称空间前缀相关，则返回的名称空间前缀与实现有关。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.Node.isDefaultNamespace(String namespaceURI)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法检查指定的 <code>namespaceURI</code> 是否是默认名称空间。
@param namespaceURI 要查找的名称空间 URI。
@return 如果指定的 <code>namespaceURI</code> 为默认名称空间，则返回 <code>true</code>；否则，返回 <code>false</code>。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.w3c.dom.Node.lookupNamespaceURI(String prefix)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此节点开始，查找与给定前缀相关的名称空间 URI。<br>有关此方法使用的算法的详细信息，请参见。
@param prefix 要查找的前缀。如果此参数为 <code>null</code>，则此方法将返回默认的名称空间 URI（如果有）。
@return 返回相关的名称空间 URI；如果未找到，则返回 <code>null</code>。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.w3c.dom.Node.isEqualNode(Node arg)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试两个节点是否相等。<br>此方法测试节点的相等性，不是测试是否相同（即两个节点是否为对同一对象的引用），相同性可以使用 <code>Node.isSameNode()</code> 测试。所有相同的节点也将相等，尽管反之则不然。<br>当且仅当满足以下条件时，两个节点才相等： 
 <ul>
<li>这两个节点属于同一类型。
 </li>
<li>以下字符串属性相等：<code>nodeName</code>、<code>localName</code>、<code>namespaceURI</code>、<code>prefix</code>、<code>nodeValue</code>。也就是说：它们都为 <code>null</code>，或者它们具有相同的长度且是字符相等的字符。
 </li>
<li><code>attributes</code> <code>NamedNodeMaps</code> 相等。也就是说：它们都为 <code>null</code>，或者它们具有相同的长度，且对于一个映射中存在的每个节点来说，相应在另一个映射中有一个节点并且相等，尽管不是必须在同一个索引处。
 </li>
<li><code>childNodes</code> <code>NodeLists</code> 相等。也就是说：它们都为 <code>null</code>，或者它们具有相同的长度且在同一索引处包含相等的节点。注意，规范化可以影响相等性；要避免这种情况，应该在比较之前标准化这些节点。
 </li>
 </ul> 
<br>两个 <code>DocumentType</code> 节点要是相等，还必须满足以下条件： 
 <ul>
<li>以下字符串属性相等：<code>publicId</code>、<code>systemId</code>、<code>internalSubset</code>。
 </li>
<li><code>entities</code> <code>NamedNodeMaps</code> 相等。
 </li>
<li><code>notations</code> <code>NamedNodeMaps</code> 相等。
 </li>
 </ul> 
<br>另一方面，以下内容不影响相等性：<code>ownerDocument</code>、<code>baseURI</code> 和 <code>parentNode</code> 属性；<code>Attr</code> 节点的 <code>specified</code> 属性；<code>Attr</code> 和 <code>Element</code> 节点的 <code>schemaTypeInfo</code> 属性；<code>Text</code> 节点的 <code>Text.isElementContentWhitespace</code> 属性；以及在节点上注册的任何用户数据和事件侦听器。 
<p ><b>注：</b>通常，在相等性检查的考虑中，上面描述中未提到的任何情况都是无关紧要的。注意，此规范的未来版本可能考虑更多属性，并且期望遵守此规范的实现进行相应的更新。
@param arg 与其比较相等性的节点。
@return 如果节点相等，则返回 <code>true</code>；否则，返回 <code>false</code>。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object org.w3c.dom.Node.getFeature(String feature, String version)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回一个特定的对象，该对象实现指定功能或版本的特定 API，如下所述。该特殊对象也可以通过使用特定于绑定的强制转换方法获得，但不是必须期望这样，如文中讨论的那样。此方法还允许实现提供不支持 <code>Node</code> 接口的特殊对象。
@param feature 所请求的功能的名称。注意，追加到功能名称的任何加号 &quot;+&quot; 将被忽略，因为它在此方法的上下文中无关紧要。
@param version 这是要测试的功能版本号。
@return 返回实现指定功能和版本的特定 API 的对象（如果有）；如果不存在实现与该功能相关的接口的对象，则返回 <code>null</code>。如果此方法返回的 <code>DOMObject</code> 实现 <code>Node</code> 接口，则它必须委托给主要核心 <code>Node</code> 且不返回与主要核心 <code>Node</code> 不一致的结果，如属性、子节点，等等。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object org.w3c.dom.Node.setUserData(String key, Object data, UserDataHandler handler)
<!-- END KEY -->
<!-- BEGIN DATA -->
将对象与此节点上的键相关联。该对象以后可以通过使用相同键的调用 <code>getUserData</code> 从此节点检索到。
@param key 将该对象与其关联的键。
@param data 与给定键相关联的对象；为 <code>null</code> 时表示移除与任何现有的与该键的关联。
@param handler 与该键关联的处理程序，或 <code>null</code>。
@return 返回以前与此节点上的给定键关联的 <code>DOMUserData</code>；如果没有，则返回 <code>null</code>。
@since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object org.w3c.dom.Node.getUserData(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
检索与此节点上的某个键相关联的对象。必须首先通过使用相同键的调用 <code>setUserData</code> 将该对象设置到此节点。
@param key 该对象所关联的键。
@return 返回与此节点上的给定键关联的 <code>DOMUserData</code>；如果没有，则返回 <code>null</code>。
@since DOM Level 3

<!-- END DATA -->
