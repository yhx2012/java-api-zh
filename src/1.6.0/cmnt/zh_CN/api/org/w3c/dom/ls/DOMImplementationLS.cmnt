<!-- BEGIN KEY -->
public interface org.w3c.dom.ls.DOMImplementationLS
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>DOMImplementationLS</code> 包括创建 Load 和 Save 对象的工厂方法。
<p> 期望在 <code>DOMImplementation</code> 接口的实例上使用特定于绑定的 casting 方法获取 <code>DOMImplementationLS</code> 接口的实例，或者如果 <code>Document</code> 支持在 [<a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>DOM Level 3 Core</a>] 中定义的功能 <code>&quot;Core&quot;</code> 版本 <code>&quot;3.0&quot;</code> ，通过分别使用带有参数值 <code>&quot;LS&quot;</code>（或 <code>&quot;LS-Async&quot;</code>）和 <code>&quot;3.0&quot;</code> 的 <code>DOMImplementation.getFeature</code> 方法来获取。 
<p>另请参见《<a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407'>Document Object Model (DOM) Level 3 Load and Save Specification</a>》。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.ls.DOMImplementationLS.MODE_SYNCHRONOUS
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个同步 <code>LSParser</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.ls.DOMImplementationLS.MODE_ASYNCHRONOUS
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个异步 <code>LSParser</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.ls.LSParser org.w3c.dom.ls.DOMImplementationLS.createLSParser(short mode, String schemaType) throws org.w3c.dom.DOMException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 <code>LSParser</code>。然后新构建的解析器可以通过其 <code>DOMConfiguration</code> 对象得以配置，并通过其 <code>parse</code> 方法用来解析文档。
@param mode <code>mode</code> 参数是 <code>MODE_SYNCHRONOUS</code> 或 <code>MODE_ASYNCHRONOUS</code>，如果 <code>mode</code> 是 <code>MODE_SYNCHRONOUS</code>，则所创建的 <code>LSParser</code> 将以同步模式操作，如果它是 <code>MODE_ASYNCHRONOUS</code>，则所创建的 <code>LSParser</code> 将以异步模式操作。
@param schemaType 绝对 URI，表示在使用新创建的 <code>LSParser</code> 加载 <code>Document</code> 期间所使用的模式语言的类型。注意，不对绝对 URI 执行词法检查。为任何种类的模式类型创建 <code>LSParser</code>（即 LSParser 将自由使用找到的模式），使用 <code>null</code> 值。 
<p ><b>注：</b>对于 W3C XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]，应用程序必须使用值 <code>&quot;http://www.w3.org/2001/XMLSchema&quot;</code>。对于 XML DTD [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>]，应用程序必须使用值 <code>&quot;http://www.w3.org/TR/REC-xml&quot;</code>。其他的模式语言在 W3C 范围之外，因此为了使用此方法，应当推荐绝对 URI。
@return 新创建的 <code>LSParser</code> 对象。此 <code>LSParser</code> 或者是同步的或者是异步的，具体取决于 <code>mode</code> 参数的值。 
<p ><b>注：</b>默认情况下，新创建的 <code>LSParser</code> 不包含 <code>DOMErrorHandler</code>，即 &quot;<a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler'>error-handler</a>&quot; 配置参数的值为 <code>null</code>。但是，创建时实现可以提供默认的错误处理程序。在这种情况下，在新的 <code>LSParser</code> 对象上的 <code>&quot;error-handler&quot;</code> 配置参数的初始值包含对默认错误处理程序的引用。
@exception DOMException NOT_SUPPORTED_ERR: 如果请求的模式类型不受支持，将引发此异常。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.ls.LSSerializer org.w3c.dom.ls.DOMImplementationLS.createLSSerializer()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的 <code>LSSerializer</code> 对象。
@return 新创建的 <code>LSSerializer</code> 对象。
<p ><b>注：</b>默认情况下，新创建的 <code>LSSerializer</code> 没有 <code>DOMErrorHandler</code>，即 <code>&quot;error-handler&quot;</code> 配置参数的值为 <code>null</code>。但是，创建时实现可以提供默认的错误处理程序。在这种情况下，在新的 <code>LSSerializer</code> 对象上的 <code>&quot;error-handler&quot;</code> 配置参数的初始值包括对默认的错误处理程序的引用。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.ls.LSInput org.w3c.dom.ls.DOMImplementationLS.createLSInput()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的空输入源对象，其中，<code>LSInput.characterStream</code>、<code>LSInput.byteStream</code>、<code>LSInput.stringData</code> <code>LSInput.systemId</code>、<code>LSInput.publicId</code>、<code>LSInput.baseURI</code> 和 <code>LSInput.encoding</code> 为 null，<code>LSInput.certifiedText</code> 为 false。
@return 新创建的输入对象。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.ls.LSOutput org.w3c.dom.ls.DOMImplementationLS.createLSOutput()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的空输出目标对象，其中，<code>LSOutput.characterStream</code>、<code>LSOutput.byteStream</code>、<code>LSOutput.systemId</code> 和 <code>LSOutput.encoding</code> 为 null。
@return 新创建的输出对象。 

<!-- END DATA -->
