<!-- BEGIN KEY -->
public abstract class org.ietf.jgss.GSSManager extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

此类作为其他重要 GSS-API 类的工厂，并且还提供有关受支持的机制的信息。它可以创建实现以下三个 GSS-API 接口的类的实例：{@link GSSName GSSName}、{@link GSSCredential GSSCredential} 和 {@link GSSContext GSSContext}。它还具有一些查询可用的机制列表和每个机制支持的名称类型的方法。<p>

默认的 <code>GSSManager</code> 子类的实例可以通过静态方法 {@link #getInstance() getInstance} 获取，但应用程序可以随意实例化 <code>GSSManager</code> 的其他字类。除其他机制外，默认的 <code>GSSManager</code> 实例还支持 Kerberos v5 GSS-API 机制。此机制由 Oid &quot;1.2.840.113554.1.2.2&quot; 标识，并在 RFC 1964 中定义。<p>

扩展 <code>GSSManager</code> 抽象类的子类可以实现为基于模块化的提供者层，该层可利用一些人们熟知的服务提供者规范。<code>GSSManager</code> API 允许应用程序设置此类实现的首选的提供者。这些方法还允许实现抛出经过定义明确的异常，以防基于提供者的配置不受支持。那些希望移植的应用程序必须意识到这一点，并能够通过捕获异常进行彻底恢复。<p>

预计将有三种使用提供者的最常见方法：<p>
 <ol>
<li> 应用程序并不关心使用什么提供者（默认情况下）。
<li> 应用程序希望优先使用特定的提供者，或者针对特定的机制，或者始终如此，与机制无关。
<li> 应用程序希望尽可能使用本地配置的提供者，但是，如果失去了对一个或多个机制的支持，则应用程序就会回调它自己的提供者。
</ol><p>

<code>GSSManager</code> 类有两种支持这些使用模式的方法：{@link #addProviderAtFront(Provider, Oid) addProviderAtFront} 和 {@link #addProviderAtEnd(Provider, Oid) addProviderAtEnd}。这两种方法可以创建 <i>&lt;provider, oid&gt;</i> 对的有序列表，其中的每个对都指示指定 oid 的一个首选提供者。<p>

需要注意的一点是，在由 GSSManager 创建的不同的 GSS-API 对象之间存在着一定的交互，其中，用于特定机制的提供者可能需要对所有的对象保持一致。例如，如果 GSSCredential 包含来自机制 <i>m</i> 的提供者 <i>p</i> 中的元素，则通常要将它传递给一个将使用机制 <i>m</i> 的提供者 <i>p</i> 的 GSSContext。实现最大可移植性的简单经验就是，不要混合从不同的 GSSManager 中创建的对象，如果应用程序想在已经创建了对象的 GSSManager 上调用 <code>addProviderAtFront</code> 方法，在可能的情况下，则必须创建不同的 GSSManager 实例。<p>

下面是一些示例代码，它显示了如何使用 GSSManager： <p>
 <pre>
     GSSManager manager = GSSManager.getInstance();

     Oid krb5Mechanism = new Oid(&quot;1.2.840.113554.1.2.2&quot;);
     Oid krb5PrincipalNameType = new Oid(&quot;1.2.840.113554.1.2.2.1&quot;);

     // Identify who the client wishes to be
     GSSName userName = manager.createName(&quot;duke&quot;, GSSName.NT_USER_NAME);

     // Identify the name of the server. This uses a Kerberos specific
     // name format.
     GSSName serverName = manager.createName(&quot;nfs/foo.sun.com&quot;, 
                                             krb5PrincipalNameType);

     // Acquire credentials for the user
     GSSCredential userCreds = manager.createCredential(userName,
                                             GSSCredential.DEFAULT_LIFETIME,
                                             krb5Mechanism,
                                             GSSCredential.INITIATE_ONLY);

     // Instantiate and initialize a security context that will be
     // established with the server
     GSSContext context = manager.createContext(serverName,
                                                krb5Mechanism,
                                                userCreds,
                                                GSSContext.DEFAULT_LIFETIME);
 </pre><p>

服务器端可能会使用此源的以下变量：<p>

 <pre>
     // Acquire credentials for the server
     GSSCredential serverCreds = manager.createCredential(serverName, 
                                             GSSCredential.DEFAULT_LIFETIME, 
                                             krb5Mechanism, 
                                             GSSCredential.ACCEPT_ONLY); 
 
     // Instantiate and initialize a security context that will
     // wait for an establishment request token from the client
     GSSContext context = manager.createContext(serverCreds);
 </pre> 

@author Mayank Upadhyay
@version 1.10, 11/17/05
@see GSSName
@see GSSCredential
@see GSSContext
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static org.ietf.jgss.GSSManager org.ietf.jgss.GSSManager.getInstance()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回默认的 GSSManager 实现。
 
@return GSSManager 实现

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.ietf.jgss.Oid[] org.ietf.jgss.GSSManager.getMechs()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个可通过此 GSSManager 提供给 GSS-API 调用者的机制列表。从 {@link #getInstance() getInstance()} 方法中获取的默认 GSSManager 将 Oid &quot;1.2.840.113554.1.2.2&quot; 放在了其列表中。此 Oid 可确定已在 RFC 1964 中定义的 Kerberos v5 GSS-API 机制。

@return 一些与可用的机制对应的 Oid 对象。当没有机制可用时（例如正在动态配置机制，并且当前未设置任何机制），将返回 <code>null</code> 值

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.ietf.jgss.Oid[] org.ietf.jgss.GSSManager.getNamesForMech(Oid mech) throws org.ietf.jgss.GSSException
<!-- END KEY -->
<!-- BEGIN DATA -->
然后返回由指定的机制所支持的名称类型。<p>

默认的 GSSManager 实例包括对 Kerberos v5 机制的支持。当指定此机制 (&quot;1.2.840.113554.1.2.2&quot;) 时，返回的列表至少将包括以下名称类型：{@link GSSName#NT_HOSTBASED_SERVICE GSSName.NT_HOSTBASED_SERVICE}、{@link GSSName#NT_EXPORT_NAME GSSName.NT_EXPORT_NAME} 和特定于 Kerberos v5 的 Oid &quot;1.2.840.113554.1.2.2.1&quot;。Oid &quot;1.2.840.113554.1.2.2.1&quot; 的名称空间在 RFC 1964 中进行了定义。

@return 一些与该机制支持的名称类型对应的 Oid 对象。
@param mech 将查询的机制 Oid

@see #getMechsForName(Oid)

@throws GSSException，包含以下主要错误代码：{@link GSSException#UNAVAILABLE GSSException.UNAVAILABLE}、{@link GSSException#FAILURE GSSException.FAILURE}

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.ietf.jgss.Oid[] org.ietf.jgss.GSSManager.getMechsForName(Oid nameType)
<!-- END KEY -->
<!-- BEGIN DATA -->

返回支持指定的名称类型的机制的列表。<p>

当指定的名称类型是 {@link GSSName#NT_HOSTBASED_SERVICE GSSName.NT_HOSTBASED_SERVICE}、{@link GSSName#NT_EXPORT_NAME GSSName.NT_EXPORT_NAME} 或 &quot;1.2.840.113554.1.2.2.1&quot; 这三者之一时，在此列表中将始终返回 Kerberos v5 机制 (&quot;1.2.840.113554.1.2.2&quot;)。
 
@return 一些与支持指定的名称类型的机制对应的 Oid 对象。当没有机制支持指定的名称类型时，将返回 <code>null</code>。
@param nameType 要查找的名称类型的 Oid

@see #getNamesForMech(Oid)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.ietf.jgss.GSSName org.ietf.jgss.GSSManager.createName(String nameStr, Oid nameType) throws org.ietf.jgss.GSSException
<!-- END KEY -->
<!-- BEGIN DATA -->

将字符串名称从指定的名称空间转换到 GSSName 对象的 Factory 方法。通常，创建的 <code>GSSName</code> 对象包括该名称的多种表示形式，每个受支持的机制都有一种表示形式；此种情况的两个例外示例是：名称空间类型参数指示为 NT_EXPORT_NAME 或 GSS-API 实现不是多机制。建议不要将此方法用于 NT_EXPORT_NAME 类型，因为将以前导出的名称（由任意字节构成）表示为 String 可能会导致字符编码方案问题。在此情形下，建议将字节直接传入 {@link #createName(byte[], Oid) createName} 这一方法的重载形式。

@param nameStr 表示要创建的名称的可打印形式的字符串。
@param nameType 指定所提供的可打印名称的名称空间的 Oid。<code>null</code> 可以用来指定，特定于机制的默认可打印语法应该根据每个检查 nameStr 的机制进行假定。建议不要将名称类型 NT_EXPORT_NAME 用于此方法。
@return 一个表示所指定主体的 GSSName

@see GSSName
@see GSSName#NT_EXPORT_NAME

@throws GSSException，包含以下主要错误代码：{@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE}、{@link GSSException#BAD_NAME GSSException.BAD_NAME}、{@link GSSException#BAD_MECH GSSException.BAD_MECH}、{@link GSSException#FAILURE GSSException.FAILURE}

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.ietf.jgss.GSSName org.ietf.jgss.GSSManager.createName(byte[] name, Oid nameType) throws org.ietf.jgss.GSSException
<!-- END KEY -->
<!-- BEGIN DATA -->
将包含名称的字节数组从指定的名称空间转换到 GSSName 对象的 Factory 方法。通常，创建的 <code>GSSName</code> 对象包括该名称的多种表示形式，每个受支持的机制都有一种表示形式；此种情况的两个例外示例是：名称空间类型参数指示为 NT_EXPORT_NAME 或 GSS-API 实现不是多机制。传入的字节将由每种基础机制根据它所选择的编码方案针对指定的命名类型进行解释。

@param name 包含要创建的名称的字节数组
@param nameType 指定在字节数组中提供的名称的名称空间的 Oid。<code>null</code>可用来指定，特定于机制的默认可打印语法应该根据每个检查字节数组的机制进行假定。
@return 一个表示所指定主体的 GSSName

@see GSSName
@see GSSName#NT_EXPORT_NAME

@throws GSSException，包含以下主要错误代码：{@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE}、{@link GSSException#BAD_NAME GSSException.BAD_NAME}、{@link GSSException#BAD_MECH GSSException.BAD_MECH}、{@link GSSException#FAILURE GSSException.FAILURE}

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.ietf.jgss.GSSName org.ietf.jgss.GSSManager.createName(String nameStr, Oid nameType, Oid mech) throws org.ietf.jgss.GSSException
<!-- END KEY -->
<!-- BEGIN DATA -->

将字符串名称从指定的名称空间转换到 GSSName 对象并同时针对机制对其进行规范化的 Factory 方法。换句话说，此方法是一种实用程序，它执行以下两个步骤的等效步骤：首先是 {@link #createName(String, Oid) createName}，然后是 {@link GSSName#canonicalize(Oid) GSSName.canonicalize}。

@param nameStr 表示要创建的名称的可打印形式的字符串。
@param nameType 指定所提供的可打印名称的名称空间的 Oid。<code>null</code> 可以用来指定，特定于机制的默认可打印语法应该根据每个检查 nameStr 的机制进行假定。建议不要将名称类型 NT_EXPORT_NAME 用于此方法。
@param mech 指定应该为其规范化名称的机制的 Oid
@return 一个表示指定的主体的 GSSName

@see GSSName#canonicalize(Oid)
@see GSSName#NT_EXPORT_NAME

@throws GSSException，包含以下主要错误代码：{@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE}、{@link GSSException#BAD_NAME GSSException.BAD_NAME}、{@link GSSException#BAD_MECH GSSException.BAD_MECH}、{@link GSSException#FAILURE GSSException.FAILURE}

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.ietf.jgss.GSSName org.ietf.jgss.GSSManager.createName(byte[] name, Oid nameType, Oid mech) throws org.ietf.jgss.GSSException
<!-- END KEY -->
<!-- BEGIN DATA -->

将包含名称的字符串数组从指定的名称空间转换到 GSSName 对象并同时针对机制对其进行规范化的 Factory 方法。换句话说，此方法是一种实用程序，它执行以下两个步骤的等效步骤：首先是 {@link #createName(byte[], Oid) createName}，然后是 {@link GSSName#canonicalize(Oid) GSSName.canonicalize}。

@param name 包含要创建的名称的字节数组
@param nameType 指定在字节数组中提供的名称的名称空间的 Oid。<code>null</code>可用来指定，特定于机制的默认可打印语法应该根据每个检查字节数组的机制进行假定。
@param mech 指定应该为其规范化名称的机制的 Oid
@return 一个表示指定的主体的 GSSName

@see GSSName#canonicalize(Oid)
@see GSSName#NT_EXPORT_NAME

@throws GSSException，包含以下主要错误代码：{@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE}、{@link GSSException#BAD_NAME GSSException.BAD_NAME}、{@link GSSException#BAD_MECH GSSException.BAD_MECH}、{@link GSSException#FAILURE GSSException.FAILURE}

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.ietf.jgss.GSSCredential org.ietf.jgss.GSSManager.createCredential(int usage) throws org.ietf.jgss.GSSException
<!-- END KEY -->
<!-- BEGIN DATA -->

获取默认凭据的 Factory 方法。这会导致 GSS-API 将特定于系统的默认实现用于机制、名称和生存期的 set。<p>

GSS-API 机制提供商必须对调用者实施本地访问控制策略施，以防止未经授权的调用者获取他们无权获取的凭据。不同机制提供商需要的权限种类将以机制为单位记录在文档中。失败的权限检查可能会导致从此方法中抛出 {@link java.lang.SecurityException SecurityException}。

@param usage 此凭据对象的预期用途。此参数的值必须是下列值之一：{@link GSSCredential#INITIATE_AND_ACCEPT GSSCredential.INITIATE_AND_ACCEPT}、{@link GSSCredential#ACCEPT_ONLY GSSCredential.ACCEPT_ONLY} 和 {@link GSSCredential#INITIATE_ONLY GSSCredential.INITIATE_ONLY}。
@return 所请求类型的 GSSCredential。

@see GSSCredential

@throws GSSException，包含以下主要错误代码：{@link GSSException#BAD_MECH GSSException.BAD_MECH}、{@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE}、{@link GSSException#BAD_NAME GSSException.BAD_NAME}、{@link GSSException#CREDENTIALS_EXPIRED GSSException.CREDENTIALS_EXPIRED}、{@link GSSException#NO_CRED GSSException.NO_CRED}、{@link GSSException#FAILURE GSSException.FAILURE}

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.ietf.jgss.GSSCredential org.ietf.jgss.GSSManager.createCredential(GSSName name, int lifetime, Oid mech, int usage) throws org.ietf.jgss.GSSException
<!-- END KEY -->
<!-- BEGIN DATA -->

获取单个机制凭据的 Factory 方法。<p>

GSS-API 机制提供商必须对调用者实施本地访问控制策略施，以防止未经授权的调用者获取他们无权获取的凭据。不同机制提供商需要的权限种类将以机制为单位记录在文档中。失败的权限检查可能会导致从此方法中抛出 {@link java.lang.SecurityException SecurityException}。 <p>

生存期的非默认值并不总能得到基础机制的认可，因此，应用程序必须随时准备根据返回的凭据调用 {@link GSSCredential#getRemainingLifetime() getRemainingLifetime}。<p>

@param name 将为其获取此凭据的主体的名称。使用 <code>null</code> 来指定默认的主体。
@param lifetime 凭据应该保持有效的秒数。使用 {@link GSSCredential#INDEFINITE_LIFETIME GSSCredential.INDEFINITE_LIFETIME} 请求证书具有最大允许生存期。使用 {@link GSSCredential#DEFAULT_LIFETIME GSSCredential.DEFAULT_LIFETIME} 请求默认的凭据生存期。
@param mech 所需机制的 Oid。使用 <code>(Oid) null</code> 来请求默认的机制。
@param usage 此凭据对象的预期用途。此参数的值必须是下列值之一：{@link GSSCredential#INITIATE_AND_ACCEPT GSSCredential.INITIATE_AND_ACCEPT}、{@link GSSCredential#ACCEPT_ONLY GSSCredential.ACCEPT_ONLY} 和 {@link GSSCredential#INITIATE_ONLY GSSCredential.INITIATE_ONLY}。
@return 所请求类型的 GSSCredential。

@see GSSCredential

@throws GSSException，包含以下主要错误代码：{@link GSSException#BAD_MECH GSSException.BAD_MECH}、{@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE}、{@link GSSException#BAD_NAME GSSException.BAD_NAME}、{@link GSSException#CREDENTIALS_EXPIRED GSSException.CREDENTIALS_EXPIRED}、{@link GSSException#NO_CRED GSSException.NO_CRED}、{@link GSSException#FAILURE GSSException.FAILURE}

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.ietf.jgss.GSSCredential org.ietf.jgss.GSSManager.createCredential(GSSName name, int lifetime, org.ietf.jgss.Oid[] mechs, int usage) throws org.ietf.jgss.GSSException
<!-- END KEY -->
<!-- BEGIN DATA -->

通过一套机制获取凭据的 Factory 方法。此方法尝试为在称为 mechs 的数组中指定的每个机制获取凭据。若要确定成功为其获取凭据的机制列表，调用者应该使用 {@link GSSCredential#getMechs() GSSCredential.getMechs} 方法。<p>

GSS-API 机制提供商必须对调用者实施本地访问控制策略施，以防止未经授权的调用者获取他们无权获取的凭据。不同机制提供商需要的权限种类将以机制为单位记录在文档中。失败的权限检查可能会导致从此方法中抛出 {@link java.lang.SecurityException SecurityException}。<p>

生存期的非默认值并不总能得到基础机制的认可，因此，应用程序必须随时准备根据返回的凭据调用 {@link GSSCredential#getRemainingLifetime() getRemainingLifetime}。<p>

@param name 将为其获取此凭据的主体的名称。使用 <code>null</code> 来指定默认的主体。
@param lifetime 凭据应该保持有效的秒数。使用 {@link GSSCredential#INDEFINITE_LIFETIME GSSCredential.INDEFINITE_LIFETIME} 请求证书具有最大允许生存期。使用 {@link GSSCredential#DEFAULT_LIFETIME GSSCredential.DEFAULT_LIFETIME} 请求默认的凭据生存期。
@param mechs Oid 组成的数组，指示获取凭据的机制。使用 <code>(Oid[]) null</code> 请求机制特定于系统的默认 set。
@param usage 此凭据对象的预期用途。此参数的值必须是下列值之一：{@link GSSCredential#INITIATE_AND_ACCEPT GSSCredential.INITIATE_AND_ACCEPT}、{@link GSSCredential#ACCEPT_ONLY GSSCredential.ACCEPT_ONLY} 和 {@link GSSCredential#INITIATE_ONLY GSSCredential.INITIATE_ONLY}。
@return 所请求类型的 GSSCredential。

@see GSSCredential

@throws GSSException，包含以下主要错误代码：{@link GSSException#BAD_MECH GSSException.BAD_MECH}、{@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE}、{@link GSSException#BAD_NAME GSSException.BAD_NAME}、{@link GSSException#CREDENTIALS_EXPIRED GSSException.CREDENTIALS_EXPIRED}、{@link GSSException#NO_CRED GSSException.NO_CRED}、{@link GSSException#FAILURE GSSException.FAILURE}

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.ietf.jgss.GSSContext org.ietf.jgss.GSSManager.createContext(GSSName peer, Oid mech, GSSCredential myCred, int lifetime) throws org.ietf.jgss.GSSException
<!-- END KEY -->
<!-- BEGIN DATA -->

在初始端一方创建上下文的 Factory 方法。

有些机制提供商可能会要求调用者授予初始化安全上下文的权限。失败的权限检查可能会导致从此方法中抛出 {@link java.lang.SecurityException SecurityException}。<p>

生存期的非默认值并不总能得到基础机制的认可，因此，应用程序必须随时准备根据返回的上下文调用 {@link GSSContext#getLifetime() getLifetime}。<p>

@param peer 目标同位体的名称。
@param mech 所需机制的 Oid。使用 <code>null</code> 来请求默认的机制。
@param myCred 初始端的凭据。将 <code>null</code> 用作默认的初始端主体。
@param lifetime 为上下文请求的以秒为单位的生存期。使用 {@link GSSContext#INDEFINITE_LIFETIME GSSContext.INDEFINITE_LIFETIME} 请求上下文具有最大允许的生存期。使用 {@link GSSContext#DEFAULT_LIFETIME GSSContext.DEFAULT_LIFETIME} 请求上下文的默认生存期。
@return 未创建的 GSSContext

@see GSSContext

@throws GSSException，包含以下主要错误代码：{@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN}、{@link GSSException#BAD_MIC GSSException.BAD_MIC}、{@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED}、{@link GSSException#FAILURE GSSException.FAILURE}

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.ietf.jgss.GSSContext org.ietf.jgss.GSSManager.createContext(GSSCredential myCred) throws org.ietf.jgss.GSSException
<!-- END KEY -->
<!-- BEGIN DATA -->

为接受端一方创建上下文的 Factory 方法。上下文的属性将通过提供给 accept 方法的输入标记来确定。

有些机制提供商可能会要求调用者授予接受安全上下文的权限。失败的权限检查可能会导致从此方法中抛出 {@link java.lang.SecurityException SecurityException}。

@param myCred 接受端的凭据。将 <code>null</code> 用作默认的接受端主体。
@return 未创建的 GSSContext

@see GSSContext

@throws GSSException，包含以下主要错误代码：{@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN}、{@link GSSException#BAD_MIC GSSException.BAD_MIC}、{@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED}、{@link GSSException#FAILURE GSSException.FAILURE}

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.ietf.jgss.GSSContext org.ietf.jgss.GSSManager.createContext(byte[] interProcessToken) throws org.ietf.jgss.GSSException
<!-- END KEY -->
<!-- BEGIN DATA -->

创建以前导出的上下文的 Factory 方法。上下文属性将通过输入标记来确定，并且不能通过 set 方法进行修改。<p>

不要求实现支持安全上下文的进程间的传输。在导出文本前，调用 {@link GSSContext#isTransferable() GSSContext.isTransferable} 将表示上下文是否可传输。在不支持它的实现中调用此方法会导致 <code>GSSException</code>，并带有错误代码 {@link GSSException#UNAVAILABLE GSSException.UNAVAILABLE}。

有些机制提供商可能会要求调用者授予初始化或接受安全上下文的权限。失败的权限检查可能会导致从此方法中抛出 {@link java.lang.SecurityException SecurityException}。

@param interProcessToken 以前从导出方法中发出的标记。
@return 以前创建的 GSSContext

@see GSSContext

@throws GSSException，包含以下主要错误代码：{@link GSSException#NO_CONTEXT GSSException.NO_CONTEXT}、{@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN}、{@link GSSException#UNAVAILABLE GSSException.UNAVAILABLE}、{@link GSSException#UNAUTHORIZED GSSException.UNAUTHORIZED}、{@link GSSException#FAILURE GSSException.FAILURE}

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.ietf.jgss.GSSManager.addProviderAtFront(Provider p, Oid mech) throws org.ietf.jgss.GSSException
<!-- END KEY -->
<!-- BEGIN DATA -->

此方法用来向 GSSManager 表示，当支持是指定的机制所需要的支持时，应用程序希望优先于其他所有提供者使用特定的提供者。当将 null （而不是 <code>Oid</code>）一值用于机制时，GSSManager 必须优先于其他提供者而使用指示的提供者，而不管机制是什么。仅当指示的提供者不支持所需的机制时，才应将 GSSManager 移动到另外的提供者上。<p>

重复调用此方法可以保存较旧的设置，但这会降低它们的优先级，从而在顶端形成一个提供者和 <code>Oid</code> 对有序列表。<p>

调用带有 null <code>Oid</code> 的 addProviderAtFront 将移除在 GSSManager 实例中为此提供者设置的所有原来的优先级。调用带有非 null <code>Oid</code> 的 addProviderAtFront 将移除使用此机制和此提供者一起设置的任何原来的优先级。<p> 

如果 GSSManager 实现不支持带有可插入提供者体系结构的 SPI，则必须抛出 GSSException，并带有状态码 GSSException.UNAVAILABLE，以表示操作不可用。<p>

假设应用程序希望提供者 A 在任何机制需要时都始终第一个接受检查，则它将调用：<p>
 <pre>
         GSSManager mgr = GSSManager.getInstance();
         // mgr may at this point have its own pre-configured list
         // of provider preferences. The following will prepend to
         // any such list:

         mgr.addProviderAtFront(A, null);
 </pre>
现在，如果它还希望在对原来的 set A 进行检查之前始终能从提供者 B 中获取机制 Oid m1，则它将调用：<p>
 <pre>
         mgr.addProviderAtFront(B, m1);
 </pre>
这时，如果需要 m1，GSSManager 将首先检查 B。万一 B 未提供对 m1 的支持，GSSManager 将继续检查 A。如果需要机制 m2（其中 m2 不同于 m1），则 GSSManager 将跳过 B 而直接检查 A。<p>

假设后来对同一 GSSManager 实例又进行了以下调用：<p>
 <pre>
         mgr.addProviderAtFront(B, null)
 </pre>
那么将包含原来具有 (B, m1) 对的设置，该设置应该移除。实际上，优先级列表现在变成了 {(B, null), (A, null), ...//后面是预配置的列表。<p>

不过，请注意下面的调用：
 <pre>
         mgr.addProviderAtFront(A, m3)
 </pre>
并不包括原来的设置 (A, null)，并且列表实际上将变为 {(A, m3), (B, null), (A, null), ...}

@param p 当 mech 需要支持时应该使用的提供者实例。
@param mech 将为之设置提供者的机制

@throws GSSException，包含以下主要错误代码：{@link GSSException#UNAVAILABLE GSSException.UNAVAILABLE}、{@link GSSException#FAILURE GSSException.FAILURE}

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.ietf.jgss.GSSManager.addProviderAtEnd(Provider p, Oid mech) throws org.ietf.jgss.GSSException
<!-- END KEY -->
<!-- BEGIN DATA -->

此方法用于向 GSSManager 指示，如果没有其他的提供者支持指定的机制，则应用程序将使用特定的提供者。当将 null（而不是 Oid）一值用于机制时，GSSManager 必须将指示的提供者用于任何机制。<p>

重复调用此方法可以保存较旧的设置，但这会使它们的优先级高于新的设置，从而在底端形成一个提供者和 Oid 对有序列表。因此，在利用此提供者设置之前将首先利用较旧的提供者设置。<p>

如果存在与现有设置的优先级冲突的原有优先级，则 GSSManager 必须忽略此请求。<p>

如果 GSSManager 实现不支持带有可插入提供者体系结构的 SPI，则必须抛出 GSSException，并带有状态码 GSSException.UNAVAILABLE，以表示操作不可用。<p>

假设应用程序希望，在需要设置 Oid m1 时，始终第一个检查系统默认的提供者，并且仅在它们不支持 m1 时才检查提供者 A。则它将调用：<p>
 <pre>
         GSSManager mgr = GSSManager.getInstance();
         mgr.addProviderAtEnd(A, m1);
 </pre>
现在，如果它还希望在检查完所有配置的提供者之后，针对所有的机制检查提供者 B，则它将调用：<p>
 <pre>
         mgr.addProviderAtEnd(B, null);
 </pre>
实际上，优先级列表现在变成了 {..., (A, m1), (B, null)}。<p>

假设后来对同一 GSSManager 实例又进行了以下调用：<p>
 <pre>
         mgr.addProviderAtEnd(B, m2)
 </pre>
那么将包含原来具有 (B, null) 对的设置，因此应该忽略此请求。如果向已经存在的 (A, m1) 或 (B, null) 对 发出请求，也会出现同样的情况。<p>

不过，请注意下面的调用：<p>
 <pre>
         mgr.addProviderAtEnd(A, null)
 </pre>
并不包括原来的设置 (A, m1)，并且该列表实际上将变为 {..., (A, m1), (B, null), (A, null)}

@param p 当 mech 需要支持时应该使用的提供者实例。
@param mech 将为之设置提供者的机制

@throws GSSException，包含以下主要错误代码：{@link GSSException#UNAVAILABLE GSSException.UNAVAILABLE}、{@link GSSException#FAILURE GSSException.FAILURE}

<!-- END DATA -->
