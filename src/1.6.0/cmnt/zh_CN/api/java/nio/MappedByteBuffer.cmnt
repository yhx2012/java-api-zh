<!-- BEGIN KEY -->
public abstract class java.nio.MappedByteBuffer extends java.nio.ByteBuffer
<!-- END KEY -->
<!-- BEGIN DATA -->
直接字节缓冲区，其内容是文件的内存映射区域。

<p> 映射的字节缓冲区是通过 {@link java.nio.channels.FileChannel#map FileChannel.map} 方法创建的。此类用特定于内存映射文件区域的操作扩展 {@link ByteBuffer} 类。
 
<p> 映射的字节缓冲区和它所表示的文件映射关系在该缓冲区本身成为垃圾回收缓冲区之前一直保持有效。

<p> 映射的字节缓冲区的内容可以随时更改，例如，在此程序或另一个程序更改了对应的映射文件区域的内容的情况下。这些更改是否发生（以及何时发生）与操作系统无关，因此是未指定的。
 
<a name="inaccess"><p> 全部或部分映射的字节缓冲区可能随时成为不可访问的，例如，如果我们截取映射的文件。试图访问映射的字节缓冲区的不可访问区域将不会更改缓冲区的内容，并导致在访问时或访问后的某个时刻抛出未指定的异常。因此强烈推荐采取适当的预防措施，以避免此程序或另一个同时运行的程序对映射的文件执行操作（读写文件内容除外）。

<p> 除此之外，映射的字节缓冲区的功能与普通的直接字节缓冲区完全相同。 </p>

@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.23, 03/12/19
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.nio.MappedByteBuffer.isLoaded()
<!-- END KEY -->
<!-- BEGIN DATA -->
判断此缓冲区的内容是否位于物理内存中。

<p> 返回值为 <tt>true</tt> 意味着此缓冲区中所有数据极有可能都位于物理内存中，因此是可访问的，不会导致任何虚拟内存页错误，也无需任何 I/O 操作。返回值为 <tt>false</tt> 不一定意味着缓冲区的内容不位于物理内存中。

<p> 返回值是一个提示，而不是保证，因为在此方法的调用返回之前，底层操作系统可能已经移出某些缓冲区数据。  </p>

@return  如果此缓冲区内容可能位于物理内存中，则返回 <tt>true</tt> 

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.nio.MappedByteBuffer java.nio.MappedByteBuffer.load()
<!-- END KEY -->
<!-- BEGIN DATA -->
将此缓冲区内容加载到物理内存中。

<p> 此方法最大限度地确保在它返回时此缓冲区内容位于物理内存中。调用此方法可能导致一些页面错误，并导致发生 I/O 操作。 </p>

@return  此缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.nio.MappedByteBuffer java.nio.MappedByteBuffer.force()
<!-- END KEY -->
<!-- BEGIN DATA -->
将此缓冲区所做的内容更改强制写入包含映射文件的存储设备中。

<p> 如果映射到此缓冲区中的文件位于本地存储设备上，那么当此方法返回时，可以保证自此缓冲区创建以来，或自最后一次调用此方法以来，已经将对缓冲区所做的所有更改写入到该设备。

<p> 如果文件不在本地设备上，则无法作出这样的保证。

<p> 如果此缓冲区不是以读/写模式 ({@link java.nio.channels.FileChannel.MapMode#READ_WRITE}) 映射的，则调用此方法无效。 </p>

@return  此缓冲区

<!-- END DATA -->
