<!-- BEGIN KEY -->
java.nio
<!-- END KEY -->
<!-- BEGIN DATA -->


定义作为数据容器的缓冲区，并提供其他 NIO 包的概述。


<p> NIO API 的集中抽象为： </p>

<ul>

<li><p> <a href="#buffers"><i>缓冲区</i></a>，它们是数据容器；
  </p></li>

<li><p> <a href="charset/package-summary.html"><i>字符集</i></a> 及其相关<i>解码器</i> 和<i>编码器</i>，<br> 它们在字节和 Unicode 字符之间进行转换；</p></li>

<li><p> 各种类型的<a href="channels/package-summary.html"><i>通道</i></a>，它们表示到能够执行 IO 操作的<br>实体的连接；以及<i>选择器</i> 和<i>选择键</i>，它们与<br><i>可选择信道</i> 一起定义了<a
  href="channels/package-summary.html#multiplex">多路的、无阻塞的 <br> I/O</a> 设施。 </p></li>

</ul>

<p> <tt>java.nio</tt> 包定义了缓冲区类，这些类用于所有 NIO API。{@link java.nio.charset} 包中定义了字符集 API，{@link java.nio.channels} 包中定义了信道和选择器 API。每个子包都具有自己的服务提供者接口 (SPI) 子包，SPI 子包的内容可用于扩展平台的默认实现或构造替代实现。

<a name="buffers">

<blockquote><table cellspacing=1 cellpadding=0 summary="Description of the various buffers">
<tr><th><p align="left">缓冲区</p></th><th><p align="left">描述</p></th></tr> 
  <tr><td valign=top><tt>&nbsp;&nbsp;{@link java.nio.Buffer}</tt></td>
<td>位置，界限和容量；<br>清除，反转，重绕和标记/重置</td></tr>
  <tr><td valign=top><tt>&nbsp;&nbsp;{@link java.nio.ByteBuffer}</tt></td>
<td>Get/put，压缩，查看；分配，包装</td></tr>
  <tr><td valign=top><tt>&nbsp;&nbsp;{@link java.nio.MappedByteBuffer}&nbsp;&nbsp;</tt></td>
<td>映射到文件的字节缓冲区</td></tr>
  <tr><td valign=top><tt>&nbsp;&nbsp;{@link java.nio.CharBuffer}</tt></td>
<td>Get/put，压缩；分配，包装</td></tr>
  <tr><td valign=top><tt>&nbsp;&nbsp;{@link java.nio.DoubleBuffer}</tt></td>
      <td>&nbsp;&nbsp;&nbsp;&nbsp;'&nbsp;'</td></tr>
  <tr><td valign=top><tt>&nbsp;&nbsp;{@link java.nio.FloatBuffer}</tt></td>
      <td>&nbsp;&nbsp;&nbsp;&nbsp;'&nbsp;'</td></tr>
  <tr><td valign=top><tt>&nbsp;&nbsp;{@link java.nio.IntBuffer}</tt></td>
      <td>&nbsp;&nbsp;&nbsp;&nbsp;'&nbsp;'</td></tr>
  <tr><td valign=top><tt>&nbsp;&nbsp;{@link java.nio.LongBuffer}</tt></td>
      <td>&nbsp;&nbsp;&nbsp;&nbsp;'&nbsp;'</td></tr>
  <tr><td valign=top><tt>&nbsp;&nbsp;{@link java.nio.ShortBuffer}</tt></td>
      <td>&nbsp;&nbsp;&nbsp;&nbsp;'&nbsp;'</td></tr>
  <tr><td valign=top><tt>&nbsp;&nbsp;{@link java.nio.ByteOrder}</tt></td>
<td>字节顺序的类型安全的枚举</td></tr>
</table></blockquote>

<p> <i>缓冲区</i> 是一个固定数据量的指定基本类型的数据容器。除内容之外，缓冲区还具有<i>位置</i> 和<i>界限</i>，其中位置是要读写的下一个元素的索引，界限是第一个应该读写的元素的索引。基本 {@link java.nio.Buffer} 类定义了这些属性以及<i>清除</i>、<i>反转</i> 和<i>重绕</i> 方法，用以<i>标记</i> 当前位置，以及将当前位置<i>重置</i> 为前一个标记处。

<p> 每个非布尔基本类型都有一个缓冲区类。每个类定义了一系列用于将数据移出或移入缓冲区的 <i>get</i> 和 <i>put</i> 方法，用于<i>压缩</i>、<i>复制</i> 和<i>切片</i> 缓冲区的方法，以及用于<i>分配</i> 新缓冲区和将现有数组<i>包装</i> 到缓冲区中的静态方法。

<p> 因为字节缓冲区可以用作 I/O 操作的源缓冲区和目标缓冲区，所以可以对它们加以区分。它们还支持其他缓冲区类所没有的几个特性：

<ul>

<li><p> 可以将字节缓冲区分配为一个<a href="ByteBuffer.html#direct"><i>直接</i></a> 缓冲区，在这种情况下，Java 虚拟机将最大限度地直接在缓冲区上执行本机 I/O 操作。  </p></li>

<li><p> 可以通过 {@link java.nio.channels.FileChannel#map </code><i>mapping</i><code>} 将文件区域直接包装到内存中来创建字节缓冲区，在这种情况下，可以使用 {@link java.nio.MappedByteBuffer} 类中定义的几个其他文件相关的操作。  </p></li>

<li><p> 字节缓冲区提供了对其内容的访问（其内容作为任何非布尔基本类型的异类或同类<a href="ByteBuffer.html#bin">二进制数据</i></a>序列），访问要么是以 big-endian 字节顺序进行，要么是以 little-endian <a
  href="ByteOrder.html">字节顺序</a>进行。</p></li>

</ul>

<p> 除非另有说明，否则向此包的任何类或接口中的构造方法或方法传递 <tt>null</tt> 变量，都会抛出 {@link java.lang.NullPointerException NullPointerException}。

@since 1.4
@version 1.15, 04/01/12
@author Mark Reinhold
@author JSR-51 Expert Group

<!-- END DATA -->
