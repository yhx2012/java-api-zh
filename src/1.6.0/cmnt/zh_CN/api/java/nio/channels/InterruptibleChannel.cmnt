<!-- BEGIN KEY -->
public interface java.nio.channels.InterruptibleChannel extends java.nio.channels.Channel
<!-- END KEY -->
<!-- BEGIN DATA -->
可被异步关闭和中断的通道。

<p> 实现此接口的通道是<i>可异步关闭的：</i>如果某个线程阻塞于可中断通道上的 I/O 操作中，则另一个线程可调用该通道的 {@link #close close} 方法。这将导致已阻塞线程接收到 {@link AsynchronousCloseException}。

<p> 实现此接口的通道也是<i>可中断的：</i>如果某个线程阻塞于可中断通道上的 I/O 操作中，则另一个线程可调用该阻塞线程的 {@link Thread#interrupt() interrupt} 方法。这将导致该通道被关闭，已阻塞线程接收到 {@link ClosedByInterruptException}，并且设置已阻塞线程的中断状态。

<p> 如果已设置某个线程的中断状态并且它在通道上调用某个阻塞的 I/O 操作，则该通道将关闭并且该线程立即接收到 {@link ClosedByInterruptException}；并仍然设置其中断状态。

<p> 当且仅当某个通道实现此接口时，该通道才支持异步关闭和中断。如有必要，可在运行时通过 <tt>instanceof</tt> 操作符进行测试。

@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.5, 03/12/19
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.nio.channels.InterruptibleChannel.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此通道。

<p> 所有当前阻塞于此通道上的 I/O 操作中的线程都将接收到 {@link AsynchronousCloseException}。

<p> 此方法的行为与 {@link Channel#close Channel} 接口所指定的行为完全相同。  </p>

@throws IOException 如果发生 I/O 错误

<!-- END DATA -->
