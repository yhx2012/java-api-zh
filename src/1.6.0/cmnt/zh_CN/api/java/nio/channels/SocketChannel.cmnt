<!-- BEGIN KEY -->
public abstract class java.nio.channels.SocketChannel extends java.nio.channels.spi.AbstractSelectableChannel implements java.nio.channels.ByteChannel, java.nio.channels.ScatteringByteChannel, java.nio.channels.GatheringByteChannel
<!-- END KEY -->
<!-- BEGIN DATA -->
针对面向流的连接套接字的可选择通道。
 
<p> 套接字通道不是连接网络套接字的完整抽象。必须通过调用 {@link #socket() socket} 方法所获得的关联 {@link java.net.Socket} 对象来完成对套接字选项的绑定、关闭和操作。不可能为任意的已有套接字创建通道，也不可能指定与套接字通道关联的套接字所使用的 {@link java.net.SocketImpl} 对象。

<p> 通过调用此类的某个 {@link #open open} 方法创建套接字通道。新创建的套接字通道已打开，但尚未连接。试图在未连接的通道上调用 I/O 操作将导致抛出 {@link NotYetConnectedException}。可通过调用套接字通道的 {@link #connect connect} 方法连接该通道；一旦连接后，关闭套接字通道之前它会一直保持已连接状态。可通过调用套接字通道的 {@link #isConnected isConnected} 方法来确定套接字通道是否已连接。

<p> 套接字通道支持<i>非阻塞连接：</i>可创建一个套接字通道，并且通过 {@link #connect connect} 方法可以发起到远程套接字的连接，之后通过 {@link #finishConnect finishConnect} 方法完成该连接。可通过调用 {@link #isConnectionPending isConnectionPending} 方法来确定是否正在进行连接操作。

<p> 可单独地<i>关闭</i> 套接字通道的输入端和输出端，而无需实际关闭该通道。调用关联套接字对象的 {@link java.net.Socket#shutdownInput shutdownInput} 方法来关闭某个通道的输入端将导致该通道上的后续读取操作返回 <tt>-1</tt>（指示流的末尾）。调用关联套接字对象的 {@link java.net.Socket#shutdownOutput shutdownOutput} 方法来关闭通道的输出端将导致该通道上的后续写入操作抛出 {@link ClosedChannelException}。

<p> 套接字通道支持<i>异步关闭</i>，这与 {@link Channel} 类中所指定的异步 close 操作类似。如果一个线程关闭了某个套接字的输入端，而同时另一个线程被阻塞在该套接字通道上的读取操作中，那么处于阻塞线程中的读取操作将完成，而不读取任何字节且返回 <tt>-1</tt>。I如果一个线程关闭了某个套接字的输出端，而同时另一个线程被阻塞在该套接字通道上的写入操作中，那么阻塞线程将收到 {@link AsynchronousCloseException}。

<p> 多个并发线程可安全地使用套接字通道。尽管在任意给定时刻最多只能有一个线程进行读取和写入操作，但数据报通道支持并发的读写。{@link #connect connect} 和 {@link #finishConnect finishConnect} 方法是相互同步的，如果正在调用其中某个方法的同时试图发起读取或写入操作，则在该调用完成之前该操作被阻塞。  </p>

@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.33, 03/12/19
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.nio.channels.SocketChannel(SelectorProvider provider)
<!-- END KEY -->
<!-- BEGIN DATA -->
初始化此类的一个新实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.channels.SocketChannel java.nio.channels.SocketChannel.open() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
打开套接字通道。

<p> 通过调用系统级默认 {@link java.nio.channels.spi.SelectorProvider} 对象的 {@link java.nio.channels.spi.SelectorProvider#openSocketChannel openSocketChannel} 方法来创建新的通道。  </p>

@return 新的套接字通道

@throws IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.channels.SocketChannel java.nio.channels.SocketChannel.open(SocketAddress remote) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
打开套接字通道并将其连接到远程地址。

<p> 这种便捷方法的工作方式就像以下过程一样：调用 {@link #open()} 方法、在得到的套接字通道上调用 {@link #connect(SocketAddress) connect} 方法、向其传递 <tt>remote</tt>，然后返回该通道。  </p>

@param remote 与新通道连接的远程地址

@throws AsynchronousCloseException 如果正在进行连接操作时另一个线程关闭了此通道

@throws  ClosedByInterruptException 如果正在进行连接操作时另一个线程中断了当前线程，因此关闭了该通道并将当前线程设置为中断状态

@throws UnresolvedAddressException 如果无法完全解析给定的远程地址

@throws UnsupportedAddressTypeException 如果不支持给定的远程地址类型

@throws SecurityException 如果已安装安全管理器并且它不允许对给定远程端点进行访问

@throws IOException 如果发生其他 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.nio.channels.SocketChannel.validOps()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个操作集，标识此通道所支持的操作。

<p> 套接字通道支持连接、读取和写入，所以此方法返回 <tt>(</tt>{@link SelectionKey#OP_CONNECT} <tt>|</tt>&#xA0;{@link SelectionKey#OP_READ} <tt>|</tt>&#xA0;{@link SelectionKey#OP_WRITE}<tt>)</tt>。  </p>

@return 有效操作集

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.net.Socket java.nio.channels.SocketChannel.socket()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此通道关联的套接字。

<p> 返回的对象不会声明任何在 {@link java.net.Socket} 类中未声明的公共方法。  </p>

@return 与此通道关联的套接字

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.nio.channels.SocketChannel.isConnected()
<!-- END KEY -->
<!-- BEGIN DATA -->
判断是否已连接此通道的网络套接字。  </p>

@return 当且仅当已连接此通道的网络套接字时才返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.nio.channels.SocketChannel.isConnectionPending()
<!-- END KEY -->
<!-- BEGIN DATA -->
判断此通道上是否正在进行连接操作。  </p>

@return 当且仅当已在此通道上发起连接操作，但是尚未通过调用 {@link #finishConnect finishConnect} 方法完成连接时才返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.nio.channels.SocketChannel.connect(SocketAddress remote) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
连接此通道的套接字。

<p> 如果此通道处于非阻塞模式，则调用此方法会发起一个非阻塞连接操作。如果立即建立连接（使用本地连接时就是如此），则此方法返回 <tt>true</tt>。否则此方法返回 <tt>false</tt>，并且必须在以后通过调用 {@link #finishConnect finishConnect} 方法来完成该连接操作。

<p> 如果此通道处于阻塞模式，则在建立连接或发生 I/O 错误之前将阻塞此方法的调用。

<p> 此方法执行与 {@link java.net.Socket} 类完全相同的安全检查。也就是说，如果已安装了安全管理器，则此方法验证其 {@link java.lang.SecurityManager#checkConnect checkConnect} 方法是否允许连接到给定远程端点的地址和端口号。

<p> 可在任意时间调用此方法。如果正在调用此方法时在此通道上调用读取或写入操作，则在此调用完成前将首先阻塞该操作。如果试图发起连接但失败了，也就是说如果调用此方法抛出经过检查的异常，则关闭此通道。  </p>

@param  remote 与此通道连接的远程地址

@return 如果已建立连接，则返回 <tt>true</tt>，如果此通道处于非阻塞模式并且正在进行连接操作，则返回 <tt>false</tt>

@throws AlreadyConnectedException 如果已连接此通道

@throws ConnectionPendingException 如果已在此通道上进行非阻塞连接操作

@throws ClosedChannelException 如果此通道已关闭

@throws AsynchronousCloseException 如果正在进行连接操作时另一个线程关闭了此通道

@throws  ClosedByInterruptException 如果正在进行连接操作时另一个线程中断了当前线程，因此关闭了该通道并将当前线程设置为中断状态

@throws UnresolvedAddressException 如果没有完全解析给定的远程地址

@throws UnsupportedAddressTypeException 如果不支持给定的远程地址类型

@throws SecurityException 如果已安装安全管理器并且它不允许对给定远程端点进行访问

@throws IOException 如果发生其他 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.nio.channels.SocketChannel.finishConnect() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 完成套接字通道的连接过程。

<p> 通过将套接字通道置于非阻塞模式，然后调用其 {@link #connect connect} 方法来发起非阻塞连接操作。一旦建立了连接，或者尝试已失败，该套接字通道就变为可连接的，并且可调用此方法完成连接序列。如果连接操作失败，则调用此方法将导致抛出合适的 {@link java.io.IOException}。

<p> 如果已连接了此通道，则不阻塞此方法并且立即返回 <tt>true</tt>。如果此通道处于非阻塞模式，那么当连接过程尚未完成时，此方法将返回 <tt>false</tt>。如果此通道处于阻塞模式，则在连接完成或失败之前将阻塞此方法，并且总是返回 <tt>true</tt> 或抛出描述该失败的、经过检查的异常。

<p> 可在任意时间调用此方法。如果正在调用此方法时在此通道上调用读取或写入操作，则在此调用完成前将首先阻塞该操作。如果试图发起连接但失败了，也就是说如果调用此方法导致抛出经过检查的异常，则关闭此通道。  </p>

@return 当且仅当已连接此通道的套接字时才返回 <tt>true</tt>

@throws NoConnectionPendingException 如果未连接此通道并且尚未发起连接操作

@throws ClosedChannelException 如果此通道已关闭

@throws AsynchronousCloseException 如果正在进行连接操作时另一个线程关闭了此通道

@throws  ClosedByInterruptException 如果正在进行连接操作时另一个线程中断了当前线程，因此关闭了该通道并将当前线程设置为中断状态

@throws IOException 如果发生其他 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.nio.channels.SocketChannel.read(ByteBuffer dst) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NotYetConnectedException 如果尚未连接此通道

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract long java.nio.channels.SocketChannel.read(java.nio.ByteBuffer[] dsts, int offset, int length) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NotYetConnectedException 如果尚未连接此通道

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.nio.channels.SocketChannel.read(java.nio.ByteBuffer[] dsts) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NotYetConnectedException 如果尚未连接此通道

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.nio.channels.SocketChannel.write(ByteBuffer src) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NotYetConnectedException 如果尚未连接此通道

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract long java.nio.channels.SocketChannel.write(java.nio.ByteBuffer[] srcs, int offset, int length) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NotYetConnectedException 如果尚未连接此通道

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.nio.channels.SocketChannel.write(java.nio.ByteBuffer[] srcs) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NotYetConnectedException 如果尚未连接此通道

<!-- END DATA -->
