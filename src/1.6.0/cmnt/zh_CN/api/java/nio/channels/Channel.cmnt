<!-- BEGIN KEY -->
public interface java.nio.channels.Channel extends java.io.Closeable
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 I/O 操作的连接。

<p> 通道表示到实体，如硬件设备、文件、网络套接字或可以执行一个或多个不同 I/O 操作（如读取或写入）的程序组件的开放的连接。

<p> 通道可处于打开或关闭状态。创建通道时它处于打开状态，一旦将其关闭，则保持关闭状态。一旦关闭了某个通道，试图对其调用 I/O 操作就会导致 {@link ClosedChannelException} 被抛出。通过调用通道的 {@link #isOpen isOpen} 方法可测试通道是否处于打开状态。

<p> 正如扩展和实现此接口的各个接口和类规范中所描述的，一般情况下通道对于多线程的访问是安全的。

@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.18, 03/12/19
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.nio.channels.Channel.isOpen()
<!-- END KEY -->
<!-- BEGIN DATA -->
判断此通道是否处于打开状态。  </p>

@return 当且仅当此通道处于打开状态时才返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.nio.channels.Channel.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此通道。

<p> 关闭某个通道后，试图对其调用 I/O 操作就会导致 {@link ClosedChannelException} 被抛出。

<p> 如果此通道已经关闭，则调用此方法无效。

<p> 可在任意时间调用此方法。但是如果其他某个线程已调用此方法，那么在第一个调用完成前另一个调用将被阻塞，之后该方法将返回，不受任何影响。 </p>

@throws IOException 如果发生 I/O 错误

<!-- END DATA -->
