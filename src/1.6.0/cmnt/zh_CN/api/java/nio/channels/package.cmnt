<!-- BEGIN KEY -->
java.nio.channels
<!-- END KEY -->
<!-- BEGIN DATA -->

定义了各种通道，这些通道表示到能够执行 I/O 操作的实体（如文件和套接字）的连接；定义了用于多路复用的、非阻塞 I/O 操作的选择器。

<a name="channels">

<blockquote><table cellspacing=1 cellpadding=0 summary="Lists channels and their descriptions">
<tr><th><p align="left">通道</p></th><th><p align="left">描述</p></th></tr>
  <tr><td valign=top><tt><i>{@link java.nio.channels.Channel}</i></tt></td>
<td>用于 I/O 操作的连接</td></tr>
  <tr><td valign=top><tt>&nbsp;&nbsp;<i>{@link java.nio.channels.ReadableByteChannel}</i></tt></td>
<td>可以将内容读入缓冲区</td></tr>
  <tr><td valign=top><tt>&nbsp;&nbsp;&nbsp;&nbsp;<i>{@link java.nio.channels.ScatteringByteChannel}&nbsp;&nbsp;</i></tt></td>
<td>可以将内容读入缓冲区序列</td></tr>
  <tr><td valign=top><tt>&nbsp;&nbsp;<i>{@link java.nio.channels.WritableByteChannel}</i></tt></td>
<td>可以从缓冲区中写入内容</td></tr>
  <tr><td valign=top><tt>&nbsp;&nbsp;&nbsp;&nbsp;<i>{@link java.nio.channels.GatheringByteChannel}</i></tt></td>
<td>可以从缓冲区序列中写入内容</td></tr>
  <tr><td valign=top><tt>&nbsp;&nbsp;<i>{@link java.nio.channels.ByteChannel}</i></tt></td>
<td>可以从缓冲区读取内容或向其写入内容</td></tr>
  <tr><td valign=top><tt>{@link java.nio.channels.Channels}</tt></td>
<td>用于通道/流进行互操作的实用工具方法</td></tr>
</table></blockquote>

<p> <i>通道</i> 表示到实体（如硬件设备、文件、网络套接字或者可以执行一个或多个诸如读取或写入之类的不同 I/O 操作的程序组件）的开放连接。正如在 {@link java.nio.channels.Channel} 接口中所指定的，通道可以处于打开或关闭状态，并且它们既是<i>可异步关闭的</i>，又是<i>可中断的</i>。

<p> 多个其他接口扩展了 {@link java.nio.channels.Channel} 接口，这些接口都指定了新的 I/O 操作。

<p> {@link java.nio.channels.ReadableByteChannel} 接口指定了 {@link java.nio.channels.ReadableByteChannel#read read} 方法，可将字节从通道读取到缓冲区；类似地，{@link java.nio.channels.WritableByteChannel} 接口指定了 {@link java.nio.channels.WritableByteChannel#write write} 方法，可将字节从缓冲区写入通道。{@link java.nio.channels.ByteChannel} 接口为可读取和写入字节的常见通道统一了这两个接口。

<p> {@link java.nio.channels.ScatteringByteChannel} 和 {@link java.nio.channels.GatheringByteChannel} 接口分别扩展了 {@link java.nio.channels.ReadableByteChannel} 和 {@link java.nio.channels.WritableByteChannel} 接口，添加的 {@link java.nio.channels.ScatteringByteChannel#read read} 和 {@link java.nio.channels.GatheringByteChannel#write write} 方法采用的是缓冲区序列，而不只是单个缓冲区。

<p> {@link java.nio.channels.Channels} 实用工具类定义了各种静态方法，这些方法支持 <tt>{@link java.io}</tt> 包的流类和此包通道类的互操作。可根据 {@link java.io.InputStream} 或 {@link java.io.OutputStream} 构造合适的通道，反之可根据通道构造 {@link java.io.InputStream} 或 {@link java.io.OutputStream}。可构造 {@link java.io.Reader} 来使用给定的字符集对取自给定可读取字节通道的字节进行解码，反之可构造 {@link java.io.Writer} 来使用给定的字符集将字符编码到字节中，并将该字节写入给定的可写入字节通道。

<blockquote><table cellspacing=1 cellpadding=0 summary="Lists file channels and their descriptions">
<tr><th><p align="left">文件通道</p></th><th><p align="left">描述</p></th></tr>
  <tr><td valign=top><tt>{@link java.nio.channels.FileChannel}</tt></td>
<td>读取、写入、映射和操作文件</td></tr>
  <tr><td valign=top><tt>{@link java.nio.channels.FileLock}</tt></td>
<td>对文件（文件区域）的锁定</td></tr>
  <tr><td valign=top><tt>{@link java.nio.MappedByteBuffer}&nbsp;&nbsp;</tt></td>
<td>映射到文件区域的直接字节缓冲区</td></tr>
</table></blockquote>

<p> {@link java.nio.channels.FileChannel} 类支持从连接到文件的通道读取字节或向其写入字节，以及查询和修改当前的文件位置和将文件截取为指定大小等常见操作。它定义了在整个文件或具体文件区域上获取锁定的方法；这些方法返回 {@link java.nio.channels.FileLock} 类的实例。最后，它定义了对要写入到存储设备的文件进行强行更新的方法、在文件和其他通道之间高效传输字节的方法，以及将文件区域直接映射到内存中的方法。最后一个操作创建 {@link java.nio.MappedByteBuffer} 类的实例，该实例扩展了 {@link java.nio.ByteBuffer} 类，具有多种文件相关的操作。

<p> 已经向 <tt>{@link java.io java.io}</tt> 包的每个 {@link java.io.FileInputStream#getChannel FileInputStream}、{@link java.io.FileOutputStream#getChannel FileOutputStream} 和 {@link java.io.RandomAccessFile#getChannel RandomAccessFile} 类添加了 <tt>getChannel</tt> 方法。在这些类的某个类的实例上调用此方法将返回一个连接到底层文件的文件通道。

<a name="multiplex">

<blockquote><table cellspacing=1 cellpadding=0 summary="Lists multiplexed, non-blocking channels and their descriptions">
<tr><th><p align="left">多路复用，非阻塞 I/O</p></th><th><p align="left">描述</p></th></tr>
<tr><td valign=top><tt>{@link java.nio.channels.SelectableChannel}</tt></td>
<td>可实现多路复用的通道</td></tr>
  <tr><td valign=top><tt>&nbsp;&nbsp;{@link java.nio.channels.DatagramChannel}</tt></td>
<td>{@link java.net.DatagramSocket java.net.DatagramSocket} 通道</td></tr>
  <tr><td valign=top><tt>&nbsp;&nbsp;{@link java.nio.channels.Pipe.SinkChannel}</tt></td>
<td>对管道的写入结束</td></tr>
  <tr><td valign=top><tt>&nbsp;&nbsp;{@link java.nio.channels.Pipe.SourceChannel}</tt></td>
<td>对管道的读取结束</td></tr>
  <tr><td valign=top><tt>&nbsp;&nbsp;{@link java.nio.channels.ServerSocketChannel}&nbsp;&nbsp;</tt></td>
<td>{@link java.net.ServerSocket java.net.ServerSocket} 通道</td></tr>
  <tr><td valign=top><tt>&nbsp;&nbsp;{@link java.nio.channels.SocketChannel}</tt></td>
<td>{@link java.net.Socket java.net.Socket} 通道</td></tr>
  <tr><td valign=top><tt>{@link java.nio.channels.Selector}</tt></td>
<td>可选择通道的多路复用器</td></tr>
  <tr><td valign=top><tt>{@link java.nio.channels.SelectionKey}</tt></td>
<td>表示通道注册到选择器的标记<br></td></tr>
  <tr><td valign=top><tt>{@link java.nio.channels.Pipe}</tt></td>
<td>形成单向管道的两个通道</td></tr>
</table></blockquote>

<p> 多路复用的非阻塞 I/O 比面向线程的阻塞 I/O 的可伸缩性更好，由<i>选择器</i>、<i>可选择通道</i> 和<i>选择键</i> 提供。

<p> <a href="Selector.html"><i>选择器</i></a> 是<a
href="SelectableChannel.html"><i>可选择通道</i></a> 的多路复用器，它是可被置于<a
href="SelectableChannel.html#bm"><i>非阻塞模式</i></a> 的特殊类型的通道。要执行多路复用的 I/O 操作，首先要创建一个或多个可选择通道、将其置于非阻塞模式，并将{@link java.nio.channels.SelectableChannel#register </code><i>注册</i><code>} 到选择器注册一个通道会指定一组由选择器测试其是否准备就绪的 I/O 操作，并返回一个表示该注册的<a
href="SelectionKey.html"><i>选择键</i></a>。

<p> 一旦已经向选择器注册了通道，就可执行<a
href="Selector.html#selop"><i>选择操作</i></a> 以发现哪些通道（如果有）已经准备好执行先前已声明感兴趣的一个或多个操作。如果某个通道已准备就绪，则将注册时所返回的键添加到该选择器的<i>已选择键集</i>中。为了确定每个通道已准备好执行哪些操作，可以检查该键集和其中的键。为了执行所需的任何 I/O 操作，可根据每个键获取相应的通道。

<p> 指示其通道对某个操作已准备就绪的选择键只是一个提示，并不保证线程执行此种操作而不导致被阻塞。为了在这些提示证明不正确时忽略这些提示，则要强制写入负责执行多路复用 I/O 操作的代码。

<p> 此包定义了与 <tt>{@link java.net}</tt> 包中定义的 {@link java.net.DatagramSocket}、{@link java.net.ServerSocket} 和 {@link java.net.Socket} 类相对应的可选择通道类。为了支持与通道相关的套接字，已经对这些类进行了较小的更改。此包还定义了实现单向管道的简单类。在所有情况下，都是通过调用相应类的静态 <tt>open</tt> 方法来创建新的可选择通道。如果某个通道需要一个关联的套接字，则此操作同时也创建一个套接字。

<p> 可通过&ldquo;插入&rdquo;一个在 <tt>{@link java.nio.channels.spi}</tt> 包中定义的 {@link java.nio.channels.spi.SelectorProvider} 类的替代定义或实例来替换选择器、可选通道和选择键的实现。并不期望很多开发人员都会实际使用这些设施；提供它的主要目的是为了在需要极高的性能时，能够让经验丰富的用户能充分利用特定于操作系统的 I/O 多路复用机制。

<p> 实现多路复用 I/O 抽象所要求的很多簿记和同步任务由 <tt>{@link java.nio.channels.spi}</tt> 包中的 {@link java.nio.channels.spi.AbstractInterruptibleChannel}、{@link java.nio.channels.spi.AbstractSelectableChannel}、{@link java.nio.channels.spi.AbstractSelectionKey} 和 {@link java.nio.channels.spi.AbstractSelector} 类来执行。在定义一个自定义的选择器提供者时，应该只直接扩展 {@link java.nio.channels.spi.AbstractSelector} 和 {@link java.nio.channels.spi.AbstractSelectionKey} 类；自定义通道类应该扩展此包中定义的适当 {@link java.nio.channels.SelectableChannel} 子类。

<p> 除非另行说明，否则将 <tt>null</tt> 参数传递给此包中任何类或接口的构造方法或方法将会导致抛出 {@link
java.lang.NullPointerException NullPointerException}。


@since 1.4
@version 1.7, 05/05/22
@author Mark Reinhold
@author JSR-51 Expert Group

<!-- END DATA -->
