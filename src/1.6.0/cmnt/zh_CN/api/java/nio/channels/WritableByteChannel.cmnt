<!-- BEGIN KEY -->
public interface java.nio.channels.WritableByteChannel extends java.nio.channels.Channel
<!-- END KEY -->
<!-- BEGIN DATA -->
可写入字节的通道。

<p> 在任意给定时刻，一个可写入通道上只能进行一个写入操作。如果某个线程在通道上发起写入操作，那么在第一个操作完成之前，将阻塞其他所有试图发起另一个写入操作的线程。其他种类的 I/O 操作是否继续与写入操作并发执行则取决于该通道的类型。 </p>

@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.15, 03/12/19
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.nio.channels.WritableByteChannel.write(ByteBuffer src) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字节序列从给定的缓冲区中写入此通道。

<p> 尝试最多向该通道中写入 <i>r</i> 个字节，其中 <i>r</i> 是调用此方法时缓冲区中剩余的字节数，即 <tt>src.remaining()</tt>。

<p> 假定写入长度为 <i>n</i> 的字节序列，其中 <tt>0</tt>&nbsp;<tt>&lt;=</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;<i>r</i>。从缓冲区的索引 <i>p</i> 处开始传输该字节，其中 <i>p</i> 是调用此方法时该缓冲区的位置；最后写入的字节索引是 <i>p</i>&nbsp;<tt>+</tt>&nbsp;<i>n</i>&nbsp;<tt>-</tt>&nbsp;<tt>1</tt>。返回时，该缓冲区的位置将等于 <i>p</i>&#xA0;<tt>+</tt>&#xA0;<i>n</i>；其限制不会更改。

<p> 除非另行指定，否则仅在写入所有请求的 <i>r</i> 个字节后 write 操作才会返回。有些类型的通道（取决于它们的状态）可能仅写入某些字节或者可能根本不写入。例如，处于非阻塞模式的套接字通道只能写入该套接字输出缓冲区中的字节。

<p> 可在任意时间调用此方法。但是如果另一个线程已经在此通道上发起了一个写入操作，则在该操作完成前此方法的调用被阻塞。 </p>

@param src 要从中获取字节的缓冲区

@return 写入的字节数，可能为零

@throws NonWritableChannelException 如果此通道未对写入打开

@throws ClosedChannelException 如果此通道已关闭

@throws AsynchronousCloseException 如果正在进行写入操作时另一个线程关闭了此通道

@throws  ClosedByInterruptException 如果正在进行写入操作时另一个线程中断了当前线程，因此关闭了该通道并将当前线程的状态设置为中断

@throws IOException 如果发生其他 I/O 错误

<!-- END DATA -->
