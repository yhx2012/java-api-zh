<!-- BEGIN KEY -->
public interface java.nio.channels.GatheringByteChannel extends java.nio.channels.WritableByteChannel
<!-- END KEY -->
<!-- BEGIN DATA -->
可从缓冲区序列写入字节的通道。

<p> <i>集中</i> 写入操作可在单个调用中写入来自一个或多个给定缓冲区序列的字节序列。集中写入通常在实现网络协议或文件格式时很有用，例如将数据分组放入段中（这些段由一个或多个长度固定的头，后跟长度可变的正文组成）。在 {@link ScatteringByteChannel} 接口中定义了类似的<i>分散</i> 读取操作。  </p>

@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.12, 03/12/19
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.nio.channels.GatheringByteChannel.write(java.nio.ByteBuffer[] srcs, int offset, int length) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字节序列从给定缓冲区的子序列写入此通道。

<p> 尝试最多向此通道中写入 <i>r</i> 个字节，其中 <i>r</i> 是给定缓冲区数组的指定子序列中剩余的字节数，也就是

 <blockquote><pre>
 srcs[offset].remaining()
     + srcs[offset+1].remaining()
     + ... + srcs[offset+length-1].remaining()</pre></blockquote>

<p> 假定写入长度为 <i>n</i> 的字节序列，其中 <tt>0</tt>&nbsp;<tt>&lt;=</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;<i>r</i>。从缓冲区 <tt>srcs[offset]</tt> 中写入此序列的前 <tt>srcs[offset].remaining()</tt> 个字节，然后从缓冲区 <tt>srcs[offset+1]</tt> 中写入后面的 <tt>srcs[offset+1].remaining()</tt> 个字节，依此类推，直到写入整个字节序列。从每个缓冲区中写入尽可能多的字节，因为要保证每个已更新缓冲区（最后一个已更新缓冲区除外）的最终位置等于该缓冲区的限制。

<p> 除非另行指定，否则仅在写入所有请求的 <i>r</i> 个字节后 write 操作才会返回。有些类型的通道（取决于它们的状态）可能仅写入某些字节或者可能根本不写入。例如，处于非阻塞模式的套接字通道无法写入超出该套接字输出缓冲区剩余空间的字节。

<p> 可在任意时间调用此方法。但是如果另一个线程已经在此通道上发起了一个写入操作，则在该操作完成前此方法的调用被阻塞。 </p>
@param src 要获取其中字节的缓冲区
@param offset 第一个缓冲区（要获取该缓冲区中的字节）在缓冲区数组中的偏移量；必须为非负数并且不能大于 <tt>srcs.length</tt>
@param length 要访问的最大缓冲区数；必须为非负数并且不能大于 <tt>srcs.length</tt>&nbsp;-&nbsp;<tt>offset</tt>

@return 写入的字节数，可能为零

@throws  IndexOutOfBoundsException 如果关于 <tt>offset</tt> 和 <tt>length</tt> 参数的前提不成立

@throws  NonWritableChannelException 如果不允许对此通道进行写入操作

@throws ClosedChannelException 如果此通道已关闭

@throws AsynchronousCloseException 如果正在进行写入操作时另一个线程关闭了此通道

@throws  ClosedByInterruptException 如果正在进行写入操作时另一个线程中断了当前线程，因此关闭了该通道并将当前线程的状态设置为中断

@throws IOException 如果发生其他 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.nio.channels.GatheringByteChannel.write(java.nio.ByteBuffer[] srcs) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字节序列从给定的缓冲区写入此通道。

<p> 调用此方法的形式为 <tt>c.write(srcs)</tt> ，该调用与以下调用完全相同：

 <blockquote><pre>
 c.write(srcs, 0, srcs.length);</pre></blockquote>

@param src 要获取其中字节的缓冲区

@return 写入的字节数，可能为零

@throws  NonWritableChannelException 如果不允许对此通道进行写入操作

@throws ClosedChannelException 如果此通道已关闭

@throws AsynchronousCloseException 如果正在进行写入操作时另一个线程关闭了此通道

@throws  ClosedByInterruptException 如果正在进行写入操作时另一个线程中断了当前线程，因此关闭了该通道并将当前线程的状态设置为中断

@throws IOException 如果发生其他 I/O 错误

<!-- END DATA -->
