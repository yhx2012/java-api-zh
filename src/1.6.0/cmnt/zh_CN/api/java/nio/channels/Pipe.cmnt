<!-- BEGIN KEY -->
public abstract class java.nio.channels.Pipe extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
实现单向管道传送的通道对。

<p> 管道由一对通道组成：一个可写入的 {@link Pipe.SinkChannel </code>sink<code>} 通道和一个可读取的 {@link Pipe.SourceChannel </code>source<code>} 通道。一旦将某些字节写入接收器通道，就可以按照与写入时完全相同的顺序从源通道中读取这些字节。

<p> 在另一个线程从管道中读取这些字节或先前已写入的字节之前，是否阻塞将该字节写入管道的线程是与系统相关的，因此是未指定的。很多管道实现都对接收器和源通道之间一定数量的字节进行缓冲，但是不应假定会进行这种缓冲。</p>

@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.20, 03/12/19
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.nio.channels.Pipe()
<!-- END KEY -->
<!-- BEGIN DATA -->
初始化此类的一个新实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.channels.Pipe.SourceChannel java.nio.channels.Pipe.source()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此管道的源通道。</p>

@return 此管道的源通道

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.channels.Pipe.SinkChannel java.nio.channels.Pipe.sink()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此管道的接收器通道。</p>

@return 此管道的接收器通道

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.channels.Pipe java.nio.channels.Pipe.open() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
打开一个管道。

<p> 通过调用系统级默认 {@link java.nio.channels.spi.SelectorProvider} 对象的 {@link java.nio.channels.spi.SelectorProvider#openPipe openPipe} 方法来创建新管道。</p>

@return 新管道

@throws IOException 如果发生 I/O 错误

<!-- END DATA -->
