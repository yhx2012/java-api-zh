<!-- BEGIN KEY -->
public abstract class java.nio.channels.Selector extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link SelectableChannel} 对象的多路复用器。

<p> 可通过调用此类的 {@link #open open} 方法创建选择器，该方法将使用系统的默认{@link java.nio.channels.spi.SelectorProvider </code>选择器提供者<code>}创建新的选择器。也可通过调用自定义选择器提供者的 {@link java.nio.channels.spi.SelectorProvider#openSelector openSelector} 方法来创建选择器。通过选择器的 {@link #close close} 方法关闭选择器之前，它一直保持打开状态。

 <a name="ks">

<p> 通过 {@link SelectionKey} 对象来表示可选择通道到选择器的注册。选择器维护了三种选择键集：

 <ul>

<li><p> <i>键集</i> 包含的键表示当前通道到此选择器的注册。此集合由 {@link #keys() keys} 方法返回。 </p></li>

<li><p> <i>已选择键集</i> 是这样一种键的集合，即在前一次选择操作期间，检测每个键的通道是否已经至少为该键的相关操作集所标识的一个操作准备就绪。此集合由 {@link #selectedKeys() selectedKeys} 方法返回。已选择键集始终是键集的一个子集。 </p></li>

<li><p> <i>已取消键集</i> 是已被取消但其通道尚未注销的键的集合。不可直接访问此集合。已取消键集始终是键集的一个子集。 </p></li>

 </ul>

<p> 在新创建的选择器中，这三个集合都是空集合。

<p> 通过某个通道的 {@link SelectableChannel#register(Selector,int) register} 方法注册该通道时，所带来的副作用是向选择器的键集中添加了一个键。在选择操作期间从键集中移除已取消的键。键集本身是不可直接修改的。

<p> 不管是通过关闭某个键的通道还是调用该键的 {@link SelectionKey#cancel cancel} 方法来取消键，该键都被添加到其选择器的已取消键集中。取消某个键会导致在下一次选择操作期间注销该键的通道，而在注销时将从所有选择器的键集中移除该键。

<a name="sks"><p> 通过选择操作将键添加到已选择键集中。可通过调用已选择键集的 {@link java.util.Set#remove(java.lang.Object) remove} 方法，或者通过调用从该键集获得的 {@link java.util.Iterator </code>iterator<code>} 的 {@link java.util.Iterator#remove() remove} 方法直接移除某个键。通过任何其他方式从不会将键从已选择键集中移除；特别是，它们不会因为影响选择操作而被移除。不能将键直接添加到已选择键集中。 </p>

 <a name="selop">
<h4>选择</h4>

<p> 在每次选择操作期间，都可以将键添加到选择器的已选择键集以及从中将其移除，并且可以从其键集和已取消键集中将其移除。选择是由 {@link #select()}、{@link #select(long)} 和 {@link #selectNow()} 方法执行的，执行涉及三个步骤：
 </p>

 <ol>

<li><p> 将已取消键集中的每个键从所有键集中移除（如果该键是键集的成员），并注销其通道。此步骤使已取消键集成为空集。 </p></li>

<li><p> 在开始进行选择操作时，应查询基础操作系统来更新每个剩余通道的准备就绪信息，以执行由其键的相关集合所标识的任意操作。对于已为至少一个这样的操作准备就绪的通道，执行以下两种操作之一： </p>

   <ol type=a>

<li><p> 如果该通道的键尚未在已选择键集中，则将其添加到该集合中，并修改其准备就绪操作集，以准确地标识那些通道现在已报告为之准备就绪的操作。丢弃准备就绪操作集中以前记录的所有准备就绪信息。  </p></li>

<li><p> 如果该通道的键已经在已选择键集中，则修改其准备就绪操作集，以准确地标识所有通道已报告为之准备就绪的新操作。保留准备就绪操作集以前记录的所有准备就绪信息；换句话说，基础系统所返回的准备就绪操作集是和该键的当前准备就绪操作集按位分开 (bitwise-disjoined) 的。 </p></li>

   </ol></li>

如果在此步骤开始时键集中的所有键都有空的相关集合，则不会更新已选择键集和任意键的准备就绪操作集。

<li><p> 如果在步骤 (2) 的执行过程中要将任意键添加到已取消键集中，则处理过程如步骤 (1)。 </p></li>

 </ol>

<p> 是否阻塞选择操作以等待一个或多个通道准备就绪，如果这样做的话，要等待多久，这是三种选择方法之间的唯一本质差别。 </p>


<h4>并发性</h4>

<p> 选择器自身可由多个并发线程安全使用，但是其键集并非如此。

<p> 选择操作在选择器本身上、在键集上和在已选择键集上是同步的，顺序也与此顺序相同。在执行上面的步骤 (1) 和 (3) 时，它们在已取消键集上也是同步的。

<p> 在执行选择操作的过程中，更改选择器键的相关集合对该操作没有影响；进行下一次选择操作才会看到此更改。

<p> 可在任意时间取消键和关闭通道。因此，在一个或多个选择器的键集中出现某个键并不意味着该键是有效的，也不意味着其通道处于打开状态。如果存在另一个线程取消某个键或关闭某个通道的可能性，那么应用程序代码进行同步时应该小心，并且必要时应该检查这些条件。

<p> 阻塞在 {@link #select()} 或 {@link #select(long)} 方法之一中的某个线程可能被其他线程以下列三种方式之一中断：

 <ul>

<li><p> 通过调用选择器的 {@link #wakeup wakeup} 方法，
   </p></li>

<li><p> 通过调用选择器的 {@link #close close} 方法，或者
   </p></li>

<li><p> 在通过调用已阻塞线程的 {@link java.lang.Thread#interrupt() interrupt} 方法的情况下，将设置其中断状态并且将调用该选择器的 {@link #wakeup wakeup} 方法。 </p></li>

 </ul>

<p> {@link #close close} 方法在选择器上是同步的，并且所有三个键集都与选择操作中的顺序相同。

 <a name="ksc">

<p> 一般情况下，选择器的键和已选择键集由多个并发线程使用是不安全的。如果这样的线程可以直接修改这些键集之一，那么应该通过对该键集本身进行同步来控制访问。这些键集的 {@link java.util.Set#iterator() iterator} 方法所返回的迭代器是<i>快速失败</i> 的：如果在创建迭代器后以任何方式（调用迭代器自身的 {@link java.util.Iterator#remove() remove} 方法除外）修改键集，则会抛出 {@link java.util.ConcurrentModificationException}。 </p>

@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.37, 04/05/05
@since 1.4

@see SelectableChannel
@see SelectionKey

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.nio.channels.Selector()
<!-- END KEY -->
<!-- BEGIN DATA -->
初始化此类的一个新实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.channels.Selector java.nio.channels.Selector.open() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
打开一个选择器。

<p> 通过调用系统级默认 {@link java.nio.channels.spi.SelectorProvider} 对象的 {@link java.nio.channels.spi.SelectorProvider#openSelector openSelector} 方法来创建新的选择器。  </p>

@return 新的选择器

@throws IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.nio.channels.Selector.isOpen()
<!-- END KEY -->
<!-- BEGIN DATA -->
告知此选择器是否已打开。  </p>

@return 当且仅当此选择器已打开时才返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.channels.spi.SelectorProvider java.nio.channels.Selector.provider()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回创建此通道的提供者。  </p>

@return 创建此通道的提供者

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Set<java.nio.channels.SelectionKey> java.nio.channels.Selector.keys()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此选择器的键集。

<p> 不可直接修改键集。仅在已取消某个键并且已注销其通道后才移除该键。试图修改键集会导致抛出 {@link UnsupportedOperationException}。

<p> 键集是<a href="#ksc">非线程安全的</a>。 </p>

@return 此选择器的键集

@throws ClosedSelectorException 如果此选择器已关闭

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Set<java.nio.channels.SelectionKey> java.nio.channels.Selector.selectedKeys()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此选择器的已选择键集。

<p> 可从已选择键集中移除键，但是无法直接添加键。试图向该键集中添加对象会导致抛出 {@link UnsupportedOperationException}。

<p> 已选择键集是<a href="#ksc">非线程安全的</a>。 </p>

@return 此选择器的已选择键集

@throws ClosedSelectorException 如果此选择器已关闭

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.nio.channels.Selector.selectNow() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
选择一组键，其相应的通道已为 I/O 操作准备就绪。

<p> 此方法执行非阻塞的<a href="#selop">选择操作</a>。如果自从前一次选择操作后，没有通道变成可选择的，则此方法直接返回零。

<p> 调用此方法会清除所有以前调用 {@link #wakeup wakeup} 方法所得的结果。  </p>

@return 由选择操作更新其准备就绪操作集的键的数目，该数目可能为零

@throws IOException 如果发生 I/O 错误

@throws ClosedSelectorException 如果此选择器已关闭

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.nio.channels.Selector.select(long timeout) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
选择一组键，其相应的通道已为 I/O 操作准备就绪。

<p> 此方法执行处于阻塞模式的<a href="#selop">选择操作</a>。仅在至少选择一个通道、调用此选择器的 {@link #wakeup wakeup} 方法、当前的线程已中断，或者给定的超时期满（以先到者为准）后此方法才返回。

<p> 此方法不提供实时保证：它安排了超时时间，就像调用 {@link Object#wait(long)} 方法一样。 </p>

@param timeout 如果为正，则在等待某个通道准备就绪时最多阻塞 <tt>timeout</tt> 毫秒；如果为零，则无限期地阻塞；必须为非负数

@return 已更新其准备就绪操作集的键的数目，该数目可能为零

@throws IOException 如果发生 I/O 错误

@throws ClosedSelectorException 如果此选择器已关闭

@throws IllegalArgumentException 如果 timeout 参数的值为负

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.nio.channels.Selector.select() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
选择一组键，其相应的通道已为 I/O 操作准备就绪。

<p> 此方法执行处于阻塞模式的<a href="#selop">选择操作</a>。仅在至少选择一个通道、调用此选择器的 {@link #wakeup wakeup} 方法，或者当前的线程已中断（以先到者为准）后此方法才返回。  </p>

@return 已更新其准备就绪操作集的键的数目，该数目可能为零

@throws IOException 如果发生 I/O 错误

@throws ClosedSelectorException 如果此选择器已关闭

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.channels.Selector java.nio.channels.Selector.wakeup()
<!-- END KEY -->
<!-- BEGIN DATA -->
使尚未返回的第一个选择操作立即返回。

<p> 如果另一个线程目前正阻塞在 {@link #select()} 或 {@link #select(long)} 方法的调用中，则该调用将立即返回。如果当前未进行选择操作，那么在没有同时调用 {@link #selectNow()} 方法的情况下，对上述方法的下一次调用将立即返回。在任一情况下，该调用返回的值可能是非零的。如果未同时再次调用此方法，则照常阻塞 {@link #select()} 或 {@link #select(long)} 方法的后续调用。

<p> 在两个连续的选择操作之间多次调用此方法与只调用一次的效果相同。  </p>

@return 此选择器

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.nio.channels.Selector.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此选择器。

<p> 如果某个线程目前正阻塞在此选择器的某个选择方法中，则中断该线程，如同调用该选择器的 {@link #wakeup wakeup} 方法那样。

<p> 所有仍与此选择器关联的未取消键已无效、其通道已注销，并且与此选择器关联的所有其他资源已释放。

<p> 如果此选择器已经关闭，则调用此方法无效。

<p> 关闭选择器后，除了调用此方法或 {@link #wakeup wakeup} 方法外，以任何其他方式继续使用它都将导致抛出 {@link ClosedSelectorException}。 </p>

@throws IOException 如果发生 I/O 错误

<!-- END DATA -->
