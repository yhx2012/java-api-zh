<!-- BEGIN KEY -->
public abstract class java.nio.ByteBuffer extends java.nio.Buffer implements java.lang.Comparable
<!-- END KEY -->
<!-- BEGIN DATA -->
字节缓冲区。

<p> 此类针对字节缓冲区定义了以下六类操作：

 <ul>

<li><p> 读写单个字节的绝对和相对 {@link #get() </code><i>get</i><code>} 和 {@link #put(byte) </code><i>put</i><code>} 方法； </p></li>

<li><p> 将此缓冲区的连续字节序列传输到数组中的相对{@link #get(byte[]) </code><i>批量 get</i><code>} 方法； </p></li>

<li><p> 将 byte 数组或其他字节缓冲区中的连续字节序列传输到此缓冲区的相对{@link #put(byte[]) </code><i>批量 put</i><code>} 方法； </p></li>

<li><p> 读写其他基本类型值，并按照特定的字节顺序在字节序列之间转换这些值的绝对和相对 {@link #getChar() </code><i>get</i><code>} 和 {@link #putChar(char) </code><i>put</i><code>} 方法； </p></li>

<li><p> 创建<i><a href="#views">视图缓冲区</a></i> 的方法，这些方法允许将字节缓冲区视为包含其他基本类型值的缓冲区； </p></li>

<li><p> 对字节缓冲区进行 {@link #compact </code>compacting<code>}、{@link #duplicate </code>duplicating<code>} 和 {@link #slice </code>slicing<code>} 的方法。  </p></li>

 </ul>

<p> 字节缓冲区可以通过 {@link #allocate </code><i>allocation</i><code>} 方法创建，此方法为该缓冲区的内容分配空间，或通过 {@link #wrap(byte[]) </code><i>wrapping</i><code>} 方法将现有的 byte 数组包装到缓冲区中来创建。
 <a name="direct">
<h4> 直接<i>与</i> 非直接缓冲区 </h4>

<p> 字节缓冲区要么是<i>直接的</i>，要么是<i>非直接的</i>。如果为直接字节缓冲区，则 Java 虚拟机会尽最大努力直接在此缓冲区上执行本机 I/O 操作。也就是说，在每次调用基础操作系统的一个本机 I/O 操作之前（或之后），虚拟机都会尽量避免将缓冲区的内容复制到中间缓冲区中（或从中间缓冲区中复制内容）。

<p> 直接字节缓冲区可以通过调用此类的 {@link #allocateDirect(int) allocateDirect} 工厂方法来创建。此方法返回的缓冲区进行分配和取消分配所需成本通常高于非直接缓冲区。直接缓冲区的内容可以驻留在常规的垃圾回收堆之外，因此，它们对应用程序的内存需求量造成的影响可能并不明显。所以，建议将直接缓冲区主要分配给那些易受基础系统的本机 I/O 操作影响的大型、持久的缓冲区。一般情况下，最好仅在直接缓冲区能在程序性能方面带来明显好处时分配它们。

<p> 直接字节缓冲区还可以通过 {@link java.nio.channels.FileChannel#map </code>mapping<code>} 将文件区域直接映射到内存中来创建。Java 平台的实现有助于通过 JNI 从本机代码创建直接字节缓冲区。如果以上这些缓冲区中的某个缓冲区实例指的是不可访问的内存区域，则试图访问该区域不会更改该缓冲区的内容，并且将会在访问期间或稍后的某个时间导致抛出不确定的异常。

<p> 字节缓冲区是直接缓冲区还是非直接缓冲区可通过调用其 {@link #isDirect isDirect} 方法来确定。提供此方法是为了能够在性能关键型代码中执行显式缓冲区管理。

 <a name="bin">
<h4> 访问二进制数据 </h4>

<p> 此类定义了除 <tt>boolean</tt> 之外，读写所有其他基本类型值的方法。这些基本值可以根据缓冲区的当前字节顺序与字节序列互相进行转换，并可以通过 {@link #order order} 方法获取和修改。特定的字节顺序由 {@link ByteOrder} 类的实例表示。字节缓冲区的初始顺序始终是 {@link ByteOrder#BIG_ENDIAN BIG_ENDIAN}。

<p> 为了访问异类二进制数据（即其他类型的值的序列），此类还针对每种类型定义了一系列绝对和相对的 <i>get</i> 和 <i>put</i> 方法。例如，对于 32 位浮点值，此类定义了以下方法：

 <blockquote><pre>
 float  {@link #getFloat()}
 float  {@link #getFloat(int) getFloat(int index)}
  void  {@link #putFloat(float) putFloat(float f)}
  void  {@link #putFloat(int,float) putFloat(int index, float f)}</pre></blockquote>

<p> 并针对 <tt>char</tt>、<tt>short</tt>、<tt>int</tt>、<tt>long</tt> 和 <tt>double</tt> 等类型定义了相应的方法。绝对 <i>get</i> 和 <i>put</i> 方法的 index 参数是根据字节定义的，而不是根据所读写的类型定义的。

 <a name="views">

<p> 为了访问同类二进制数据（即相同类型的值的序列），此类还定义了可以为指定类型的缓冲区创建<i>视图</i> 的方法。<i>视图缓冲区</i> 只是其内容受该字节缓冲区支持的另一种缓冲区。字节缓冲区内容的更改在视图缓冲区中是可见的，反之亦然；这两种缓冲区的位置、限制和标记值都是独立的。例如，{@link #asFloatBuffer() asFloatBuffer} 方法将创建 {@link FloatBuffer} 类的一个实例，该类受在其上调用该方法的字节缓冲区的支持。该类将为 <tt>char</tt>、<tt>short</tt>、<tt>int</tt>、<tt>long</tt> 和 <tt>double</tt> 等类型定义相应的视图创建方法。

<p> 与上述特定于类型的 <i>get</i> 和 <i>put</i> 方法系列相比，视图缓冲区有以下三大主要优势：

 <ul>

<li><p> 视图缓冲区不是根据字节进行索引，而是根据其特定于类型的值的大小进行索引；</p></li>

<li><p> 视图缓冲区提供了相对批量 <i>get</i> 和 <i>put</i> 方法，这些方法可在缓冲区和数组或相同类型的其他缓冲区之间传输值的连续序列；  </p></li>

<li><p> 视图缓冲区可能更高效，这是因为，当且仅当其支持的字节缓冲区为直接缓冲区时它才是直接缓冲区。  </p></li>

 </ul>

<p> 视图缓冲区的字节顺序固定为创建该视图时其字节缓冲区的字节顺序。  </p>

<h4> 调用的链接 </h4>


<p> 指定此类中的方法（它们不返回其他值），以返回这些方法被调用时所在的缓冲区。这允许对方法调用进行链接。


例如，语句序列

 <blockquote><pre>
 bb.putInt(0xCAFEBABE);
 bb.putShort(3);
 bb.putShort(45);</pre></blockquote>

可以由以下单个语句替换

 <blockquote><pre>
 bb.putInt(0xCAFEBABE).putShort(3).putShort(45);</pre></blockquote>
 
@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.56, 04/07/16
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.ByteBuffer java.nio.ByteBuffer.allocateDirect(int capacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
分配新的直接字节缓冲区。

<p> 新缓冲区的位置将为零，其界限将为其容量，其标记是不确定的。无论它是否具有{@link #hasArray </code>底层实现数组<code>}，其标记都是不确定的。  </p>

@param  capacity 新缓冲区的容量，以字节为单位

@return  新的字节缓冲区

@throws  IllegalArgumentException 如果 <tt>capacity</tt> 为负整数

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.ByteBuffer java.nio.ByteBuffer.allocate(int capacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
分配一个新的字节缓冲区。

<p> 新缓冲区的位置将为零，其界限将为其容量，其标记是不确定的。它将具有一个{@link #array </code>底层实现数组<code>}，且其 {@link #arrayOffset </code>数组偏移量<code>}将为零。

@param  capacity 新缓冲区的容量，以字节为单位

@return  新的字节缓冲区

@throws  IllegalArgumentException 如果 <tt>capacity</tt> 为负整数

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.ByteBuffer java.nio.ByteBuffer.wrap(byte[] array, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 byte 数组包装到缓冲区中。

<p> 新的缓冲区将由给定的 byte 数组支持；也就是说，缓冲区修改将导致数组修改，反之亦然。新缓冲区的容量将为 <tt>array.length</tt>，其位置将为 <tt>offset</tt>，其界限将为 <tt>offset + length</tt>，其标记是不确定的。其{@link #array </code>底层实现数组<code>}将为给定数组，并且其{@link #arrayOffset </code>数组偏移量<code>}将为零。  </p>

@param  array 支持新缓冲区的数组

@param  offset 要使用的子数组的偏移量；必须为非负且不大于 <tt>array.length</tt>。将新缓冲区的位置设置为此值。

@param  length 要使用的子数组的长度；必须为非负且不大于 <tt>array.length - offset</tt>。将新缓冲区的界限设置为 <tt>offset + length</tt>。

@return  新的字节缓冲区

@throws  IndexOutOfBoundsException 如果关于 <tt>offset</tt> 和 <tt>length</tt> 参数的前提不成立

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.ByteBuffer java.nio.ByteBuffer.wrap(byte[] array)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 byte 数组包装到缓冲区中。

<p> 新的缓冲区将由给定的 byte 数组支持；也就是说，缓冲区修改将导致数组修改，反之亦然。新缓冲区的容量和界限将为 <tt>array.length</tt>，其位置将为零，其标记是不确定的。其{@link #array </code>底层实现数组<code>}将为给定数组，并且其{@link #arrayOffset </code>数组偏移量<code>}将为零。  </p> 

@param  array 实现此缓冲区的数组

@return  新的字节缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ByteBuffer java.nio.ByteBuffer.slice()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的字节缓冲区，其内容是此缓冲区内容的共享子序列。

<p> 新缓冲区的内容将从此缓冲区的当前位置开始。此缓冲区内容的更改在新缓冲区中是可见的，反之亦然；这两个缓冲区的位置、界限和标记值是相互独立的。

<p> 新缓冲区的位置将为零，其容量和界限将为此缓冲区中所剩余的字节数量，其标记是不确定的。当且仅当此缓冲区为直接时，新缓冲区才是直接的，当且仅当此缓冲区为只读时，新缓冲区才是只读的。  </p>

@return  新的字节缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ByteBuffer java.nio.ByteBuffer.duplicate()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建共享此缓冲区内容的新的字节缓冲区。

<p> 新缓冲区的内容将为此缓冲区的内容。此缓冲区内容的更改在新缓冲区中是可见的，反之亦然；这两个缓冲区的位置、界限和标记值是相互独立的。

<p> 新缓冲区的容量、界限、位置和标记值将与此缓冲区相同。当且仅当此缓冲区为直接时，新缓冲区才是直接的，当且仅当此缓冲区为只读时，新缓冲区才是只读的。  </p>

@return  新的字节缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ByteBuffer java.nio.ByteBuffer.asReadOnlyBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建共享此缓冲区内容的新的只读字节缓冲区。

<p> 新缓冲区的内容将为此缓冲区的内容。此缓冲区内容的更改在新缓冲区中是可见的，但新缓冲区将是只读的并且不允许修改共享内容。两个缓冲区的位置、界限和标记值是相互独立的。

<p> 新缓冲区的容量、界限、位置和标记值将与此缓冲区相同。

<p> 如果此缓冲区本身是只读的，则此方法与 {@link #duplicate duplicate} 方法完全相同。  </p>

@return  新的只读字节缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract byte java.nio.ByteBuffer.get()
<!-- END KEY -->
<!-- BEGIN DATA -->
相对 <i>get</i> 方法。读取此缓冲区当前位置的字节，然后该位置递增。 </p>

@return  缓冲区当前位置的字节

@throws  BufferUnderflowException 如果该缓冲区的当前位置不小于其界限

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ByteBuffer java.nio.ByteBuffer.put(byte b)
<!-- END KEY -->
<!-- BEGIN DATA -->
相对 <i>put</i> 方法<i>（可选操作）</i>。
 
<p> 将给定的字节写入此缓冲区的当前位置，然后该位置递增。 </p>

@param  b 要写入的字节

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区的当前位置不小于其界限

@throws  ReadOnlyBufferException 如果此缓冲区是只读缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract byte java.nio.ByteBuffer.get(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
绝对 <i>get</i> 方法。读取指定索引处的字节。 </p>

@param  index 将从中读取该字节的索引

@return  给定索引处的字节

@throws  IndexOutOfBoundsException 如果 <tt>index</tt> 为负或不小于缓冲区界限

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ByteBuffer java.nio.ByteBuffer.put(int index, byte b)
<!-- END KEY -->
<!-- BEGIN DATA -->
绝对 <i>put</i> 方法<i>（可选操作）</i>。
 
<p> 将给定字节写入此缓冲区的给定索引处。 </p>

@param  index 将在该位置写入字节的索引

@param  b 要写入的字节值

@return  此缓冲区

@throws  IndexOutOfBoundsException 如果 <tt>index</tt> 为负或不小于缓冲区界限

@throws  ReadOnlyBufferException 如果此缓冲区是只读缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.nio.ByteBuffer java.nio.ByteBuffer.get(byte[] dst, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
相对批量 <i>get</i> 方法。

<p> 此方法将此缓冲区的字节传输到给定的目标数组中。如果此缓冲中剩余的字节少于满足请求所需的字节（即如果 <tt>length</tt>&nbsp;<tt>&gt;</tt>&nbsp;<tt>remaining()</tt>），则不传输字节且抛出 {@link BufferUnderflowException}。

<p> 否则，此方法将此缓冲区中的 <tt>length</tt> 个字节复制到给定数组中，从此缓冲区的当前位置和数组中的给定偏移量位置开始复制。然后此缓冲区的位置将增加 <tt>length</tt>。

<p> 换句话说，调用此方法的形式为 <tt>src.get(dst,&nbsp;off,&nbsp;len)</tt>，效果与以下循环语句完全相同：

 <pre>
     for (int i = off; i &lt; off + len; i++)
         dst[i] = src.get(); </pre>

区别在于它首先检查此缓冲区中是否具有足够的字节，这样可能效率更高。 </p>

@param  dst 向其中写入字节的数组

@param  offset 要写入的第一个字节在数组中的偏移量；必须为非负且不大于 <tt>dst.length</tt>

@param  length 要写入到给定数组中的字节的最大数量；必须为非负且不大于 <tt>dst.length - offset</tt>

@return  此缓冲区

@throws  BufferUnderflowException 如果此缓冲区中的剩余字节少于 <tt>length</tt>

@throws  IndexOutOfBoundsException 如果关于 <tt>offset</tt> 和 <tt>length</tt> 参数的前提不成立

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.nio.ByteBuffer java.nio.ByteBuffer.get(byte[] dst)
<!-- END KEY -->
<!-- BEGIN DATA -->
相对批量 <i>get</i> 方法。

<p> 此方法将此缓冲区的字节传输到给定的目标数组中。调用此方法的形式为 <tt>src.get(a)</tt>，该调用与以下调用完全相同：

 <pre>
     src.get(a, 0, a.length) </pre>

@return  此缓冲区

@throws  BufferUnderflowException 如果此缓冲区中的剩余字节少于 <tt>length</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.nio.ByteBuffer java.nio.ByteBuffer.put(ByteBuffer src)
<!-- END KEY -->
<!-- BEGIN DATA -->
相对批量 <i>put</i> 方法<i>（可选操作）</i>。

<p> 此方法将给定源缓冲区中的剩余字节传输到此缓冲区中。如果源缓冲区中的剩余字节多于此缓冲区中的剩余字节，即如果 <tt>src.remaining()</tt>&nbsp;<tt>&gt;</tt>&nbsp;<tt>remaining()</tt>，则不传输字节且抛出 {@link BufferOverflowException}。

<p> 否则，此方法将给定缓冲区中的 <i>n</i>&nbsp;=&nbsp;<tt>src.remaining()</tt> 个字节复制到此缓冲区中，从每个缓冲区的当前位置开始复制。然后这两个缓冲区的位置都增加 <i>n</i>。

<p> 换句话说，调用此方法的形式为 <tt>dst.put(src)</tt>，效果与以下循环语句完全相同：

 <pre>
     while (src.hasRemaining())
         dst.put(src.get()); </pre>

区别在于它首先检查此缓冲区中是否有足够空间，这样可能效率更高。 </p>

@param  src 要从中读取字节的源缓冲区；不能为此缓冲区

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区没有足够的空间来容纳源缓冲区中剩余的字节

@throws  IllegalArgumentException 如果源缓冲区是此缓冲区

@throws  ReadOnlyBufferException 如果此缓冲区是只读缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.nio.ByteBuffer java.nio.ByteBuffer.put(byte[] src, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
相对批量 <i>put</i> 方法<i>（可选操作）</i>。

<p> 此方法将把给定源数组中的字节字传输到此缓冲区中。如果要从该数组中复制的字节多于此缓冲区中的剩余字节，即如果 <tt>length</tt>&nbsp;<tt>&gt;</tt>&nbsp;<tt>remaining()</tt>），则不传输字节且将抛出 {@link BufferOverflowException}。

<p> 否则，此方法将给定数组中的 <tt>length</tt> 个字节复制到此缓冲区中，从数组中给定偏移量位置和此缓冲区的当前位置开始复制。然后此缓冲区的位置将增加 <tt>length</tt>。

<p> 换句话说，调用此方法的形式为 <tt>dst.put(src,&#xA0;off,&#xA0;len)</tt>，效果与以下循环语句完全相同：

 <pre>
     for (int i = off; i &lt; off + len; i++)
         dst.put(a[i]); </pre>

区别在于它首先检查此缓冲区中是否有足够空间，这样可能效率更高。 </p>

@param  src 要从中读取字节的数组

@param  offset 要读取的第一个字节在数组中的偏移量；必须为非负且不大于 <tt>array.length</tt>

@param  length 要从给定数组读取的字节的数量；必须为非负且不大于 <tt>array.length - offset</tt>

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区没有足够空间

@throws  IndexOutOfBoundsException 如果关于 <tt>offset</tt> 和 <tt>length</tt> 参数的前提不成立

@throws  ReadOnlyBufferException 如果此缓冲区是只读缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.nio.ByteBuffer java.nio.ByteBuffer.put(byte[] src)
<!-- END KEY -->
<!-- BEGIN DATA -->
相对批量 <i>put</i> 方法<i>（可选操作）</i>。

<p> 此方法将给定的源 byte 数组的所有内容传输到此缓冲区中。调用此方法的形式为 <tt>dst.put(a)</tt>，该调用与以下调用完全相同：

 <pre>
     dst.put(a, 0, a.length) </pre>

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区没有足够空间

@throws  ReadOnlyBufferException 如果此缓冲区是只读缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.nio.ByteBuffer.hasArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
判断是否可通过一个可访问的 byte 数组实现此缓冲区。

<p> 如果此方法返回 <tt>true</tt>，则可以安全地调用 {@link #array() array} 和 {@link #arrayOffset() arrayOffset} 方法。
 </p>

@return  当且仅当存在实现此缓冲区的数组，并且此缓冲区不是只读缓冲区时，返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte[] java.nio.ByteBuffer.array()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回实现此缓冲区的 byte 数组<i>（可选操作）</i>。

<p> 此缓冲区的内容修改将导致返回的数组内容修改，反之亦然。

<p> 调用此方法之前要调用 {@link #hasArray hasArray} 方法，以确保此缓冲区具有可访问的底层实现数组。  </p>

@return  实现此缓冲区的数组

@throws  ReadOnlyBufferException 如果存在实现此缓冲区的数组，但缓冲区是只读的

@throws  UnsupportedOperationException 如果不存在某个可访问的数组实现此缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.nio.ByteBuffer.arrayOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此缓冲区中的第一个元素在缓冲区的底层实现数组中的偏移量<i>（可选操作）</i>。

<p> 如果存在实现此缓冲区的数组，则缓冲区位置 <i>p</i> 对应于数组索引 <i>p</i>&#xA0;+&#xA0;<tt>arrayOffset()</tt>。

<p> 调用此方法之前要调用 {@link #hasArray hasArray} 方法，以确保此缓冲区具有可访问的底层实现数组。</p>

@return  此缓冲区的第一个元素在缓冲区数组中的偏移量

@throws  ReadOnlyBufferException 如果存在实现此缓冲区的数组，但缓冲区是只读的

@throws  UnsupportedOperationException 如果不存在某个可访问的数组实现此缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ByteBuffer java.nio.ByteBuffer.compact()
<!-- END KEY -->
<!-- BEGIN DATA -->
压缩此缓冲区<i>（可选操作）</i>。

<p> 将缓冲区的当前位置和界限之间的字节（如果有）复制到缓冲区的开始处。即将索引 <i>p</i>&nbsp;=&nbsp;<tt>position()</tt> 处的字节复制到索引 0 处，将索引 <i>p</i>&#xA0;+&#xA0;1 处的字节复制到索引 1 处，依此类推，直到将索引 <tt>limit()</tt>&nbsp;-&nbsp;1 处的字节复制到索引 <i>n</i>&nbsp;=&nbsp;<tt>limit()</tt>&nbsp;-&nbsp;<tt>1</tt>&nbsp;-&nbsp;<i>p</i> 处。然后将缓冲区的位置设置为 <i>n+1</i>，并将其界限设置为其容量。如果已定义了标记，则丢弃它。

<p> 将缓冲区的位置设置为复制的字节数，而不是零，以便调用此方法后可以紧接着调用另一个相对 <i>put</i> 方法。 </p>


<p> 从缓冲区写入数据之后调用此方法，以防写入不完整。例如，以下循环语句通过 <tt>buf</tt> 缓冲区将字节从一个信道复制到另一个信道：

 <blockquote><pre>
 buf.clear();          // Prepare buffer for use
  while (in.read(buf) >= 0 || buf.position != 0) {
     buf.flip();
     out.write(buf);
     buf.compact();    // In case of partial write
 }</pre></blockquote>
 

@return  此缓冲区

@throws  ReadOnlyBufferException 如果此缓冲区是只读缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.nio.ByteBuffer.isDirect()
<!-- END KEY -->
<!-- BEGIN DATA -->
判断此字节缓冲区是否为直接的。 </p>

@return  当且仅当此缓冲区为直接时，返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.nio.ByteBuffer.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回汇总了此缓冲区状态的字符串。  </p>

@return  一个汇总字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.nio.ByteBuffer.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此缓冲区的当前哈希码。

<p> 字节缓冲区的哈希码仅取决于其中剩余的元素；也就是说，取决于从 <tt>position()</tt> 开始一直到（包括）<tt>limit()</tt>&nbsp;-&nbsp;<tt>1</tt> 处的元素。

<p> 因为缓冲区哈希码与内容有关，因此建议不要在哈希映射或其他类似数据结构中将缓冲区用作键，除非知道其内容不会发生更改。  </p>

@return 此缓冲区的当前哈希码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.nio.ByteBuffer.equals(Object ob)
<!-- END KEY -->
<!-- BEGIN DATA -->
判断此缓冲区是否与另一个对象相同。

<p> 当且仅当满足以下条件时两个字节缓冲区相同：

 <p><ol>

<li><p> 它们具有相同的元素类型，  </p></li>

<li><p> 它们具有相同数量的剩余元素，并且
   </p></li>

<li><p> 两个剩余元素序列（与它们的起始位置无关）逐点相同。
   </p></li>

 </ol>

<p> 字节缓冲区与任何其他类型的对象都不同。  </p>

@param  ob  此缓冲区要比较的对象

@return  当且仅当此缓冲区与给定对象相同时，返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.nio.ByteBuffer.compareTo(ByteBuffer that)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此缓冲区与另一个缓冲区进行比较。

<p> 比较两个字节缓冲区的方法是按字典顺序比较它们的剩余元素序列，而不考虑每个序列在其对应缓冲区中的起始位置。

<p> 字节缓冲区不能与任何其他类型的对象进行比较。

@return  当此缓冲区小于、等于或大于给定缓冲区时，返回负整数、零或正整数

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.nio.ByteOrder java.nio.ByteBuffer.order()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此缓冲区的字节顺序。

<p> 在读写多字节值以及为此字节缓冲区创建视图时使用该字节顺序。新创建的字节缓冲区的顺序始终为 {@link ByteOrder#BIG_ENDIAN BIG_ENDIAN}。  </p>

@return  此缓冲区的字节顺序

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.nio.ByteBuffer java.nio.ByteBuffer.order(ByteOrder bo)
<!-- END KEY -->
<!-- BEGIN DATA -->
修改此缓冲区的字节顺序。  </p>

@param  bo 新的字节顺序，要么是 {@link ByteOrder#BIG_ENDIAN BIG_ENDIAN}，要么是 {@link ByteOrder#LITTLE_ENDIAN LITTLE_ENDIAN}

@return  此缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract char java.nio.ByteBuffer.getChar()
<!-- END KEY -->
<!-- BEGIN DATA -->
用于读取 char 值的相对 <i>get</i> 方法。

<p> 读取此缓冲区的当前位置之后的两个字节，根据当前的字节顺序将它们组成 char 值，然后将该位置增加 2。  </p>

@return  缓冲区当前位置的 char 值

@throws  BufferUnderflowException 如果此缓冲区中的剩余字节数少于 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ByteBuffer java.nio.ByteBuffer.putChar(char value)
<!-- END KEY -->
<!-- BEGIN DATA -->
用来写入 char 值的相对 <i>put</i> 方法<i>（可选操作）</i>。

<p> 将两个包含指定 char 值的字节按照当前的字节顺序写入到此缓冲区的当前位置，然后将该位置增加 2。  </p>

@param  value 要写入的 char 值

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区中的剩余字节数少于 2

@throws  ReadOnlyBufferException 如果此缓冲区是只读缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract char java.nio.ByteBuffer.getChar(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
用于读取 char 值的绝对 <i>get</i> 方法。

<p> 读取给定索引处的两个字节，并根据当前的字节顺序将它们组成 char 值。  </p>

@param  index 将从该位置读取字节的索引

@return  给定索引处的 char 值

@throws  IndexOutOfBoundsException 如果 <tt>index</tt> 为负数，或者不小于该缓冲区的界限 - 1 所得的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ByteBuffer java.nio.ByteBuffer.putChar(int index, char value)
<!-- END KEY -->
<!-- BEGIN DATA -->
用于写入 char 值的绝对 <i>put</i> 方法<i>（可选操作）</i>。

<p> 将两个包含给定 char 值的字节按照当前的字节顺序写入到此缓冲区的给定索引处。  </p>

@param  index 将在该位置写入字节的索引

@param  value 要写入的 char 值

@return  此缓冲区

@throws  IndexOutOfBoundsException 如果 <tt>index</tt> 为负数，或者不小于该缓冲区的界限 - 1 所得的值

@throws  ReadOnlyBufferException 如果此缓冲区是只读缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.CharBuffer java.nio.ByteBuffer.asCharBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建此字节缓冲区的视图，作为 char 缓冲区。

<p> 新缓冲区的内容将从此缓冲区的当前位置开始。此缓冲区内容的更改在新缓冲区中是可见的，反之亦然；这两个缓冲区的位置、界限和标记值是相互独立的。

<p> 新缓冲区的位置将为零，其容量和界限将为此缓冲区中所剩余的字节数的二分之一，其标记是不确定的。当且仅当此缓冲区为直接时，新缓冲区才是直接的，当且仅当此缓冲区为只读时，新缓冲区才是只读的。  </p>

@return  新的 char 缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract short java.nio.ByteBuffer.getShort()
<!-- END KEY -->
<!-- BEGIN DATA -->
用于读取 short 值的相对 <i>get</i> 方法。

<p> 读取此缓冲区的当前位置之后的两个字节，根据当前的字节顺序将它们组成 short 值，然后将该位置增加 2。  </p>

@return  缓冲区当前位置的 short 值

@throws  BufferUnderflowException 如果此缓冲区中的剩余字节数少于 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ByteBuffer java.nio.ByteBuffer.putShort(short value)
<!-- END KEY -->
<!-- BEGIN DATA -->
用于写入 short 值的相对 <i>put</i> 方法<i>（可选操作）</i>。

<p> 将两个包含指定 short 值的字节按照当前的字节顺序写入到此缓冲区的当前位置，然后将该位置增加 2。  </p>

@param  value 要写入的 short 值

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区中的剩余字节数少于 2

@throws  ReadOnlyBufferException 如果此缓冲区是只读缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract short java.nio.ByteBuffer.getShort(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
用于读取 short 值的绝对 <i>get</i> 方法。

<p> 读取给定索引处的两个字节，根据当前的字节顺序将它们组成 short 值。  </p>

@param  index 将从该位置读取字节的索引

@return  给定索引处的 short 值

@throws  IndexOutOfBoundsException 如果 <tt>index</tt> 为负数，或者不小于该缓冲区的界限 - 1 所得的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ByteBuffer java.nio.ByteBuffer.putShort(int index, short value)
<!-- END KEY -->
<!-- BEGIN DATA -->
用于写入 short 值的绝对 <i>put</i> 方法<i>（可选操作）</i>。

<p> 将两个包含给定 short 值的字节按照当前的字节顺序写入到此缓冲区的给定索引处。  </p>

@param  index 将在该位置写入字节的索引

@param  value 要写入的 short 值

@return  此缓冲区

@throws  IndexOutOfBoundsException 如果 <tt>index</tt> 为负数，或者不小于该缓冲区的界限 - 1 所得的值

@throws  ReadOnlyBufferException 如果此缓冲区是只读缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ShortBuffer java.nio.ByteBuffer.asShortBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建此字节缓冲区的视图，作为 short 缓冲区。

<p> 新缓冲区的内容将从此缓冲区的当前位置开始。此缓冲区内容的更改在新缓冲区中是可见的，反之亦然；这两个缓冲区的位置、界限和标记值是相互独立的。

<p> 新缓冲区的位置将为零，其容量和界限将为此缓冲区中所剩余的字节数的二分之一，其标记是不确定的。当且仅当此缓冲区为直接时，新缓冲区才是直接的，当且仅当此缓冲区为只读时，新缓冲区才是只读的。  </p>

@return  新的 short 缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.nio.ByteBuffer.getInt()
<!-- END KEY -->
<!-- BEGIN DATA -->
用于读取 int 值的相对 <i>get</i> 方法。

<p> 读取此缓冲区的当前位置之后的 4 个字节，根据当前的字节顺序将它们组成 int 值，然后将该位置增加 4。  </p>

@return  缓冲区当前位置的 int 值

@throws  BufferUnderflowException 如果此缓冲区中的剩余字节数少于 4

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ByteBuffer java.nio.ByteBuffer.putInt(int value)
<!-- END KEY -->
<!-- BEGIN DATA -->
用于写入 int 值的相对 <i>put</i> 方法<i>（可选操作）</i>。

<p> 将 4 个包含给定 int 值的字节按照当前的字节顺序写入到此缓冲区的当前位置，然后将该位置增加 4。  </p>

@param  value 要写入的 int 值

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区中的剩余字节数少于 4

@throws  ReadOnlyBufferException 如果此缓冲区是只读缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.nio.ByteBuffer.getInt(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
用于读取 int 值的绝对 <i>get</i> 方法。

<p> 读取给定索引处的 4 个字节，根据当前的字节顺序将它们组成 int 值。 </p>

@param  index 将从该位置读取字节的索引

@return  给定索引处的 int 值

@throws  IndexOutOfBoundsException 如果 <tt>index</tt> 为负数，或者不小于该缓冲区的界限 - 3 所得的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ByteBuffer java.nio.ByteBuffer.putInt(int index, int value)
<!-- END KEY -->
<!-- BEGIN DATA -->
用于写入 int 值的绝对 <i>put</i> 方法<i>（可选操作）</i>。

<p> 将 4 个包含给定 int 值的字节按照当前的字节顺序写入到此缓冲区的给定索引处。  </p>

@param  index 将在该位置写入字节的索引

@param  value 要写入的 int 值

@return  此缓冲区

@throws  IndexOutOfBoundsException 如果 <tt>index</tt> 为负数，或者不小于该缓冲区的界限 - 3 所得的值

@throws  ReadOnlyBufferException 如果此缓冲区是只读缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.IntBuffer java.nio.ByteBuffer.asIntBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建此字节缓冲区的视图，作为 int 缓冲区。

<p> 新缓冲区的内容将从此缓冲区的当前位置开始。此缓冲区内容的更改在新缓冲区中是可见的，反之亦然；这两个缓冲区的位置、界限和标记值是相互独立的。

<p> 新缓冲区的位置将为零，其容量和界限将为此缓冲区中所剩余的字节数的四分之一，其标记是不确定的。当且仅当此缓冲区为直接时，新缓冲区才是直接的，当且仅当此缓冲区为只读时，新缓冲区才是只读的。  </p>

@return  新的 int 缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract long java.nio.ByteBuffer.getLong()
<!-- END KEY -->
<!-- BEGIN DATA -->
用于读取 long 值的相对 <i>get</i> 方法。

<p> 读取此缓冲区的当前位置之后的 8 个字节，根据当前的字节顺序将它们组成 long 值，然后将该位置增加 8。  </p>

@return  缓冲区当前位置的 long 值

@throws  BufferUnderflowException 如果此缓冲区中的剩余字节数少于 8

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ByteBuffer java.nio.ByteBuffer.putLong(long value)
<!-- END KEY -->
<!-- BEGIN DATA -->
用于写入 long 值<i>（可先操作）</i> 的相对 <i>put</i> 方法。

<p> 将 8 个包含给定 long 值的字节按照当前的字节顺序写入到此缓冲区的当前位置，然后将该位置增加 8。  </p>

@param  value 要写入的 long 值

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区中的剩余字节数少于 8

@throws  ReadOnlyBufferException 如果此缓冲区是只读缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract long java.nio.ByteBuffer.getLong(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
用于读取 long 值的绝对 <i>get</i> 方法。

<p> 读取给定索引处的 8 个字节，根据当前的字节顺序将它们组成 long 值。  </p>

@param  index 将从该位置读取字节的索引

@return 给定索引处的 long 值

@throws  IndexOutOfBoundsException 如果 <tt>index</tt> 为负数，或者不小于该缓冲区的界限 - 7 所得的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ByteBuffer java.nio.ByteBuffer.putLong(int index, long value)
<!-- END KEY -->
<!-- BEGIN DATA -->
用于写入 long 值的绝对 <i>put</i> 方法<i>（可选操作）</i>。

<p> 将 8 个包含给定 long 值的字节按照当前的字节顺序写入到此缓冲区的给定索引处。  </p>

@param  index 将在该位置写入字节的索引

@param  value 要写入的 long 值

@return  此缓冲区

@throws  IndexOutOfBoundsException 如果 <tt>index</tt> 为负数，或者不小于该缓冲区的界限 - 7 所得的值

@throws  ReadOnlyBufferException 如果此缓冲区是只读缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.LongBuffer java.nio.ByteBuffer.asLongBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建此字节缓冲区的视图，作为 long 缓冲区。

<p> 新缓冲区的内容将从此缓冲区的当前位置开始。此缓冲区内容的更改在新缓冲区中是可见的，反之亦然；这两个缓冲区的位置、界限和标记值是相互独立的。

<p> 新缓冲区的位置将为零，其容量和界限将为此缓冲区中所剩余的字节数的八分之一，其标记是不确定的。当且仅当此缓冲区为直接时，新缓冲区才是直接的，当且仅当此缓冲区为只读时，新缓冲区才是只读的。  </p>

@return  新的 long 缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float java.nio.ByteBuffer.getFloat()
<!-- END KEY -->
<!-- BEGIN DATA -->
用于读取 float 值的相对 <i>get</i> 方法。

<p> 读取此缓冲区的当前位置之后的 4 个字节，根据当前的字节顺序将它们组成 float 值，然后将该位置增加 4。  </p>

@return  缓冲区当前位置的 float 值

@throws  BufferUnderflowException 如果此缓冲区中的剩余字节数少于 4

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ByteBuffer java.nio.ByteBuffer.putFloat(float value)
<!-- END KEY -->
<!-- BEGIN DATA -->
用于写入 float 值的相对 <i>put</i> 方法<i>（可选操作）</i>。

<p> 将 4 个包含给定 float 值的字节按照当前的字节顺序写入到此缓冲区的当前位置，然后然后将该位置增加 4。  </p>

@param  value 要写入的 float 值

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区中的剩余字节数少于 4

@throws  ReadOnlyBufferException 如果此缓冲区是只读缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float java.nio.ByteBuffer.getFloat(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
用于读取 float 值的绝对 <i>get</i> 方法。

<p> 读取给定索引处的 4 个字节，根据当前的字节顺序将它们组成 float 值。  </p>

@param  index 将从该位置读取字节的索引

@return  给定索引处的 float 值

@throws  IndexOutOfBoundsException 如果 <tt>index</tt> 为负数，或者不小于该缓冲区的界限 - 3 所得的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ByteBuffer java.nio.ByteBuffer.putFloat(int index, float value)
<!-- END KEY -->
<!-- BEGIN DATA -->
用于写入 float 值的绝对 <i>put</i> 方法<i>（可选操作）</i>。

<p> 将 4 个包含给定 float 值的字节按照当前的字节顺序写入到此缓冲区的给定索引处。  </p>

@param  index 将在该位置写入字节的索引

@param  value 要写入的 float 值

@return  此缓冲区

@throws  IndexOutOfBoundsException 如果 <tt>index</tt> 为负数，或者不小于该缓冲区的界限 - 3 所得的值

@throws  ReadOnlyBufferException 如果此缓冲区是只读缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.FloatBuffer java.nio.ByteBuffer.asFloatBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建此字节缓冲区的视图，作为 float 缓冲区。

<p> 新缓冲区的内容将从此缓冲区的当前位置开始。此缓冲区内容的更改在新缓冲区中是可见的，反之亦然；这两个缓冲区的位置、界限和标记值是相互独立的。

<p> 新缓冲区的位置将为零，其容量和其界限将为此缓冲区中剩余字节数的四分之一，其标记是不确定的。当且仅当此缓冲区为直接时，新缓冲区才是直接的，当且仅当此缓冲区为只读时，新缓冲区才是只读的。  </p>

@return  新的 float 缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.nio.ByteBuffer.getDouble()
<!-- END KEY -->
<!-- BEGIN DATA -->
用于读取 double 值的相对 <i>get</i> 方法。

<p> 读取此缓冲区的当前位置之后的 8 个字节，根据当前的字节顺序将它们组成 double 值，然后将该位置增加 8。  </p>

@return  缓冲区当前位置的 double 值

@throws  BufferUnderflowException 如果此缓冲区中的剩余字节数少于 8

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ByteBuffer java.nio.ByteBuffer.putDouble(double value)
<!-- END KEY -->
<!-- BEGIN DATA -->
用于写入 double 值的相对 <i>put</i> 方法<i>（可选操作）</i>。

<p> 将 8 个包含给定 double 值的字节按照当前的字节顺序写入到此缓冲区的当前位置，然后将该位置增加 8。  </p>

@param  value 要写入的 double 值

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区中的剩余字节数少于 8

@throws  ReadOnlyBufferException 如果此缓冲区是只读缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.nio.ByteBuffer.getDouble(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
用于读取 double 值的绝对 <i>get</i> 方法。

<p> 读取给定索引处的 8 个字节，根据当前的字节顺序将它们组成 double 值。  </p>

@param  index 将从该位置读取字节的索引

@return  给定索引处的 double 值

@throws  IndexOutOfBoundsException 如果 <tt>index</tt> 为负数，或者不小于该缓冲区的界限 - 7 所得的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ByteBuffer java.nio.ByteBuffer.putDouble(int index, double value)
<!-- END KEY -->
<!-- BEGIN DATA -->
用于写入 double 值的绝对 <i>put</i> 方法<i>（可选操作）</i>。

<p> 将 8 个包含给定 double 值的字节按照当前的字节顺序写入到此缓冲区的给定索引处。  </p>

@param  index 将在该位置写入字节的索引

@param  value 要写入的 double 值

@return  此缓冲区

@throws  IndexOutOfBoundsException 如果 <tt>index</tt> 为负数，或者不小于该缓冲区的界限 - 7 所得的值

@throws  ReadOnlyBufferException 如果此缓冲区是只读缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.DoubleBuffer java.nio.ByteBuffer.asDoubleBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建此字节缓冲区的视图，作为 double 缓冲区。

<p> 新缓冲区的内容将从此缓冲区的当前位置开始。此缓冲区内容的更改在新缓冲区中是可见的，反之亦然；这两个缓冲区的位置、界限和标记值是相互独立的。

<p> 新缓冲区的位置将为零，其容量和界限将为此缓冲区中所剩余的字节数的八分之一，其标记是不确定的。当且仅当此缓冲区为直接时，新缓冲区才是直接的，当且仅当此缓冲区为只读时，新缓冲区才是只读的。  </p>

@return  新的 double 缓冲区

<!-- END DATA -->
