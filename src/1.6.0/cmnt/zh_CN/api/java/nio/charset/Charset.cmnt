<!-- BEGIN KEY -->
public abstract class java.nio.charset.Charset extends java.lang.Object implements java.lang.Comparable
<!-- END KEY -->
<!-- BEGIN DATA -->
16 位的 Unicode <a href="../../lang/Character.html#unicode">代码单元</a>序列和字节序列之间的指定映射关系。此类定义了用于创建解码器和编码器以及获取与 charset 关联的各种名称的方法。此类的实例是不可变的。

<p> 此类也定义了用于测试是否支持特定 charset 的静态方法、通过名称查找 charset 实例的静态方法，以及构造一个包含目前 Java 虚拟机支持的每个 charset 的映射静态方法。通过类 {@link java.nio.charset.spi.CharsetProvider} 中定义的服务提供者接口可以添加对新 charset 的支持。

<p> 此类中定义的所有方法用于多个并发线程是安全的。


 <a name="names"><a name="charenc">
<h4>Charset 名称</h4>

<p> 通过以下字符所组成的字符串来命名 Charset：

 <ul>

<li> 大写字母 <tt>'A'</tt> 到 <tt>'Z'</tt>（<tt>'\u0041'</tt>&nbsp;到&nbsp;<tt>'\u005a'</tt>），
 
<li> 小写字母 <tt>'a'</tt> 到 <tt>'z'</tt>（<tt>'=pos; </tt>&#xA0;到 &#xA0;<tt>' apos;</tt>），
 
<li> 数字 <tt>'0'</tt> 到 <tt>'9'</tt>（<tt>'\u0030'</tt>&#xA0; 到 &#xA0;<tt>'\u0039'</tt>），
 
<li> 短划线字符 <tt>'-'</tt>（<tt>'\u002d'</tt>，<small>连词符号</small>），

<li> 句点字符 <tt>'.'</tt>(<tt>'\u002e'</tt>，<small>句点</small>），
 
<li> 冒号字符 <tt>':'</tt>(<tt>'\u003a'</tt>，<small>冒号</small>），和
 
<li> 下划线字符 <tt>'_'</tt>（<tt>'\u005f'</tt>，<small>下划线</small>）。
 
 </ul>

Charset 名称必须以字母或数字开头。空字符串不是合法的 charset 名称。Charset 名称是大小写不敏感的，也就是当比较 charset 名称时总是忽略大小写。Charset 名称通常遵循 <a
 href="http://ietf.org/rfc/rfc2278.txt"><i>RFC2278:IANA Charset Registration Procedures</i></a> 中所记录的约定。

<p> 每个 charset 有一个<i>规范名称</i>，也可能有一个或多个<i>别名</i>。规范名称由此类的 {@link #name() name} 方法返回。根据约定，规范名称通常是大写的。charset 的别名由 {@link #aliases() aliases} 方法返回。

 <a name="hn">

<p> 一些 charset 有一个<i>历史名称</i>，定义这个名称是为了和以前版本的 Java 平台兼容。charset 的历史名称既可以是它的规范名称，也可以是它的某个别名。历史名称由 {@link java.io.InputStreamReader#getEncoding InputStreamReader} 和 {@link java.io.OutputStreamWriter#getEncoding OutputStreamWriter} 类的 <tt>getEncoding()</tt> 方法返回。

 <a name="iana">

<p> 如果 Java 平台的实现支持列于 <a
 href="http://www.iana.org/assignments/character-sets"><i>IANA Charset Registry</i></a> 中的 charset，那么它的规范名称必须是注册表中列出的名字。很多 charset 在注册表中给出不止一个名称，在这种情况下注册表将某个名称标识为<i> MIME 首选的</i>。如果 charset 有多个注册表名称，那么它的规范名称必须是 MIME 首选的名称，并且注册表中的其他名称必须是合法的别名。如果支持的 charset 没有列在 IANA 注册表中，那么它的规范名称必须以字符串 <tt>&quot;X-&quot;</tt> 或 <tt>&quot;x-&quot;</tt> 中的一个开头。

<p> IANA charset 注册表不断进行更改，所以特定 charset 的规范名称和别名也会随之更改。为了确保兼容性，推荐不要删除 charset 的别名，如果更改了 charset 的规范名称，那么可将以前的规范名称作为别名。

<h4>标准 charset</h4>

<p> Java 平台的每一种实现都需要支持以下标准 charset。请参考该实现的版本文档，查看是否支持其他 charset。这些可选 charset 的行为在不同的实现之间可能有所不同。
 
 <blockquote><table width="80%" summary="Description of standard charsets">
<tr><th><p align="left">Charset</p></th><th><p align="left">描述</p></th></tr>
 <tr><td valign=top><tt>US-ASCII</tt></td>
<td>7 位 ASCII 字符，也叫作 <tt>ISO646-US</tt>、Unicode 字符集的基本拉丁块</td></tr>
 <tr><td valign=top><tt>ISO-8859-1&nbsp;&nbsp;</tt></td>
<td>ISO 拉丁字母表 No.1，也叫作 <tt>ISO-LATIN-1</tt></td></tr>
<tr><td valign=top><tt>UTF-8</tt></td>
<td>8 位 UCS 转换格式</td></tr>
 <tr><td valign=top><tt>UTF-16BE</tt></td>
<td>16 位 UCS 转换格式，Big Endian（最低地址存放高位字节）字节顺序</td></tr>
 <tr><td valign=top><tt>UTF-16LE</tt></td>
<td>16 位 UCS 转换格式，Little-endian（最高地址存放低位字节）字节顺序</td></tr>
 <tr><td valign=top><tt>UTF-16</tt></td>
<td>16 位 UCS 转换格式，字节顺序由可选的字节顺序标记来标识</td></tr>
 </table></blockquote>
 
<p> <tt>UTF-8</tt> charset 在 <a
 href="http://ietf.org/rfc/rfc2279.txt"><i>RFC&nbsp;2279</i></a> 中指定；它所基于的转换格式在 ISO&nbsp;10646-1 的 Amendment 2 中指定，并在 <a
 href="http://www.unicode.org/unicode/standard/standard.html"><i>Unicode Standard</i></a> 中也有所描述。

<p> <tt>UTF-16</tt> charset 在 <a
 href="http://ietf.org/rfc/rfc2781.txt"><i>RFC&nbsp;2781</i></a> 中指定；它们基于的转换格式在 ISO10646-1 的 Amendment 1 中指定，并在 <a
 href="http://www.unicode.org/unicode/standard/standard.html"><i>Unicode Standard</i></a> 中也有所描述。

<p> <tt>UTF-16</tt> charset 使用 16 位量，因此对字节顺序敏感。在这些编码中，流的字节顺序可以由 Unicode 字符 <tt>'FF'</tt> 所表示的初始<i>字节顺序标记</i> 来指示。按以下方式处理字节顺序标记：

 <ul>

<li><p> 进行解码时，<tt>UTF-16BE</tt> 和 <tt>UTF-16LE</tt> charset 忽略字节顺序标记；进行编码时，不写入字节顺序标记。 </p></li>

<li><p> 进行解码时，<tt>UTF-16</tt> charset 解释字节顺序标记，以指示流的字节顺序，但是如果没有字节顺序标记，则默认使用 Big Endian；进行编码时，使用 Big Endian 字节顺序并写入 Big Endian 字节顺序标记。 </p></li>

 </ul>

在任何情况中，在解码操作的开始读取字节顺序标记时，将在结果字符序列中忽略该标记。字节顺序标记出现在输入序列的第一个元素之后时，由于使用相同的代码表示<small>零宽度不间断空格</small>，所以不忽略该标记。

<p> Java 虚拟机的每个实例都有默认的 charset，它可能是也可能不是某个标准 charset。默认 charset 在虚拟机启动时决定，通常根据语言环境和底层操作系统使用的 charset 来确定。 </p>


<h4>术语</h4>

<p> 此类的名称取自 <a href=&quot;http://ietf.org/rfc/rfc2278.txt&quot;&quot;><i>RFC&nbsp;2278</i></a> 中使用的术语。在该文档中，<i>charset</i> 被定义为编码字符集和字符编码方案的组合。

<p><i>编码字符集</i> 是抽象字符集合和整数集合之间的映射关系。US-ASCII、ISO&nbsp;8859-1、JIS&nbsp;X&nbsp;0201 和与 ISO 10646-1 相同的完整 Unicode 都是编码字符集示例。

<p><i>字符编码方案</i> 是编码字符集和八位组（八位字节）序列集合之间的映射关系。UTF-8、UCS-2、UTF-16、ISO&nbsp;2022 和 EUC 是一些字符编码方案示例。编码方案通常与特定的编码字符集相关联；例如，UTF-8 只用来编码 Unicode。但是，一些方案与多个字符集相关联；例如，EUC 可用于编码各种亚洲字符集中的字符。

<p>当编码字符集专门用于一个字符编码方案时，相应的 charset 通常使用字符集合命名；否则 charset 使用编码方案命名，很有可能使用它所支持的字符集的语言环境来命名。因此 <tt>US-ASCII</tt> 是 US-ASCII charset 名称，而 <tt>EUC-JP</tt> 是编码 JIS&nbsp;X&nbsp;0201、JIS&nbsp;X&nbsp;0208 和 JIS&nbsp;X&nbsp;0212 字符集的 charset 名称。

<p>Java 编程语言的本机字符编码方案是 UTF-16。因此 Java 平台的 charset 定义了 16 位 UTF-16 代码单元序列和字节序列之间的映射关系。</p>

@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.53, 06/06/28
@since 1.4

@see CharsetDecoder
@see CharsetEncoder
@see java.nio.charset.spi.CharsetProvider
@see java.lang.Character

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.nio.charset.Charset(String canonicalName, java.lang.String[] aliases)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的规范名称和别名集合初始化新 charset。</p>

@param canonicalName 此 charset 的规范名称

@param aliases 此 charset 别名的数组，如果没有别名则为 null

@throws IllegalCharsetNameException 如果规范名称和任何一个别名非法

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.nio.charset.Charset.isSupported(String charsetName)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知是否支持指定的 charset。</p>

@param charsetName 请求的 charset 名称；可能是规范名称或别名

@return 当且仅当当前 Java 虚拟机支持指定的 charset 时才返回 <tt>true</tt>

@throws IllegalCharsetNameException 如果给定的 charset 名称是非法的

@throws  IllegalArgumentException 如果给定的 <tt>charsetName</tt> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.charset.Charset java.nio.charset.Charset.forName(String charsetName)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 charset 的 charset 对象。</p>

@param charsetName 请求的 charset 名称；可能是规范名称或别名

@return 指定 charset 的 charset 对象

@throws IllegalCharsetNameException 如果给定的 charset 名称是非法的

@throws  IllegalArgumentException 如果给定的 <tt>charsetName</tt> 为 null

@throws UnsupportedCharsetException 如果此 Java 虚拟机的实例不支持指定 charset

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.SortedMap<java.lang.String, java.nio.charset.Charset> java.nio.charset.Charset.availableCharsets()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造从规范 charset 名称到 charset 对象的有序映射。

<p>此方法返回的映射对每个 charset 都有一项，当前 Java 虚拟机是支持这些 charset 的。如果所支持的两个或多个 charset 具有相同的规范名称，则结果映射中只包含它们中的一个；包含哪一个没有指定。</p>

<p> 对此方法的调用，以及对结果映射的后续使用可能导致出现耗时的磁盘或网络 I/O 操作。为需要枚举所有可用 charset 的应用程序提供此方法，例如允许用户选择 charset。{@link #forName forName} 方法不使用此方法，而是使用一种高效的增量查找算法。

<p> 如果新的 charset 提供者可供当前 Java 虚拟机动态使用，则此方法可能在不同的时间返回不同的结果。如果没有这种改变，则此方法返回的 charset 恰好是那些可以通过 {@link #forName forName} 方法获取的 charset。</p>

@return 规范 charset 名称到 charset 对象的不可变的、大小写不敏感的映射

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.charset.Charset java.nio.charset.Charset.defaultCharset()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 Java 虚拟机的默认 charset。

<p> 默认 charset 在虚拟机启动时决定，通常根据语言环境和底层操作系统的 charset 来确定。

@return 默认 charset 的 charset 对象

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.nio.charset.Charset.name()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 charset 的规范名称。</p>

@return 此 charset 的规范名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.util.Set<java.lang.String> java.nio.charset.Charset.aliases()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含此 charset 各个别名的集合。</p>

@return 此 charset 不可变的别名集合

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.nio.charset.Charset.displayName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 charset 用于默认语言环境的可读名称。

<p> 此方法的默认实现只返回此 charset 的规范名称。为了提供本地化的显示名称，此类的具体子类可以重写此方法。</p>

@return 默认语言环境下此 charset 的显示名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.nio.charset.Charset.isRegistered()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知此 charset 是否已在 <a href=&quot;http://www.iana.org/assignments/character-sets&quot;>IANA Charset Registry</a> 中注册。</p>

@return 当且仅当此 charset 的实现程序知道此 charset 已向 IANA 注册时才返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.nio.charset.Charset.displayName(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 charset 用于给定语言环境的可读名称。

<p> 此方法的默认实现只返回此 charset 的规范名称。为了提供本地化的显示名称，此类的具体子类可以重写此方法。</p>

@param locale 要为其获取显示名称的语言环境

@return 给定语言环境下此 charset 的显示名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.nio.charset.Charset.contains(Charset cs)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知此 charset 是否包含给定的 charset。

<p> 当且仅当在 charset <i>D</i> 中可表示的每个字符，在字符集 <i>C</i> 中也是可表示的时，才能说 <i>C</i> <i>包含</i> <i>D</i>。如果存在这种关系，就能保证可在 <i>D</i> 进行编码的所有字符串不用执行任何替换就可在 <i>C</i> 中进行编码。

<p> <i>C</i> 包含 <i>D</i> 不表示 <i>C</i> 中以特定字节序列可表示的每个字符在 <i>D</i> 中也以相同的字节序列表示，尽管有时是这种情况。

<p> 每个 charset 包含其自身。

<p> 此方法计算近似的包含关系：如果返回 <tt>true</tt>，则已知给定的 charset 包含在此 charset 中；但是如果返回 <tt>false</tt>，则不一定说明给定的 charset 不包含在此 charset 中。

@return 如果给定的 charset 包含在此 charset 中，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.charset.CharsetDecoder java.nio.charset.Charset.newDecoder()
<!-- END KEY -->
<!-- BEGIN DATA -->
为此 charset 构造新的解码器。</p>

@return 此 charset 的新解码器

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.charset.CharsetEncoder java.nio.charset.Charset.newEncoder()
<!-- END KEY -->
<!-- BEGIN DATA -->
为此 charset 构造新的编码器。</p>

@return 此 charset 的新编码器

@throws UnsupportedOperationException 如果此 charset 不支持编码

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.nio.charset.Charset.canEncode()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知此 charset 是否支持编码。

<p> 几乎所有的 charset 都支持编码。常见的例外是专用的<i>自动检测</i> charset，它的解码器通过检查输入字节序列，就能够确定正在使用多个可能编码方案中的哪一个。此类 charset 不支持编码是由于无法确定输出时应该使用哪种编码。此类 charset 的实现应该重写此方法以返回 <tt>false</tt>。</p>

@return 当且仅当此 charset 支持编码时才返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.nio.CharBuffer java.nio.charset.Charset.decode(ByteBuffer bb)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 charset 中的字节解码成 Unicode 字符的便捷方法。

<p> 在 charset <tt>cs</tt> 上调用此方法，会返回和下面表达式相同的结果

 <pre> cs.newDecoder() .onMalformedInput(CodingErrorAction.REPLACE) .onUnmappableCharacter(CodingErrorAction.REPLACE) .decode(bb); </pre>

除此之外它可能更为高效，因为它能在两次连续的调用之间缓存解码器。

<p> 此方法总是用此 charset 的默认替换 byte 数组替换错误输入和不可映射的字符序列。为了检测此种序列，可直接使用 {@link CharsetDecoder#decode(java.nio.ByteBuffer)} 方法。</p>

@param bb 要解码的 byte 缓冲区

@return 包含已解码字符的 char 缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.nio.ByteBuffer java.nio.charset.Charset.encode(CharBuffer cb)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 charset 中的 Unicode 字符编码成字节的便捷方法。

<p> 在 charset <tt>cs</tt> 上调用此方法，会返回和下面表达式相同的结果

 <pre> cs.newEncoder() .onMalformedInput(CodingErrorAction.REPLACE) .onUnmappableCharacter(CodingErrorAction.REPLACE) .encode(bb); </pre>

除此之外它可能更为高效，因为它能在两次连续的调用之间缓存编码器。

<p> 此方法总是用此 charset 的默认替换字符串替换错误输入和不可映射的字符序列。为了检测此种序列，可直接使用 {@link CharsetEncoder#encode(java.nio.CharBuffer)} 方法。</p>

@param cb 要编码的 char 缓冲区

@return 包含已编码字符的 byte 缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.nio.ByteBuffer java.nio.charset.Charset.encode(String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 charset 中的字符串编码成字节的便捷方法。

<p> 在 charset <tt>cs</tt> 上调用此方法，会返回和下面表达式相同的结果

 <pre> cs.encode(CharBuffer.wrap(s)); </pre>

@param str 要编码的字符串

@return 包含已编码字符的 byte 缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.nio.charset.Charset.compareTo(Charset that)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较此 charset 与其他 charset。

<p> charset 根据它们的规范名称排序，而不考虑大小写。</p>

@param that 和此 charset 进行比较的 charset

@return 如果此 charset 小于、等于或大于指定的 charset，则分别返回负整数、零或正整数

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.nio.charset.Charset.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
计算此 charset 的哈希码。</p>

@return 整数哈希码

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.nio.charset.Charset.equals(Object ob)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知此对象是否和其他对象相等。

<p> 当且仅当两个 charset 具有相同的规范名称时它们才相等。一个 charset 从来不和任何其他类型的对象相等。</p>

@return 当且仅当此 charset 等于给定对象时才返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.nio.charset.Charset.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述此 charset 的字符串。</p>

@return 描述此 charset 的字符串

<!-- END DATA -->
