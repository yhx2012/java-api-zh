<!-- BEGIN KEY -->
public class java.nio.charset.CoderResult extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
coder 结果状态的描述。

<p> charset coder（即解码器或编码器）使用输入缓冲区中的字节（或字符）、对它们进行转换，并将结果字符（或字节）写入输出缓冲区。编码进程终止的原因是以下四类之一，这些原因由此类的实例描述：

 <ul>

<li><p> 当没有更多的输入要处理时，或者当现有的输入不足而需要其他的输入时报告<i>下溢（Underflow）</i>。这种情况用唯一的结果对象 {@link #UNDERFLOW} 表示，该对象的 {@link #isUnderflow() isUnderflow} 方法返回 <tt>true</tt>。  </p></li>

<li><p> 当输出缓冲区没有足够的剩余空间时报告<i>溢出（Overflow）</i>。这种情况用唯一的结果对象 {@link #OVERFLOW} 表示，该对象的 {@link #isOverflow() isOverflow} 方法返回 <tt>true</tt>。  </p></li>

<li><p> 当输入单元序列不是格式良好时报告<i>错误的输入错误</i>。这种错误用此类的实例来描述，该类的 {@link #isMalformed() isMalformed} 方法返回 <tt>true</tt>，该类的 {@link #length() length} 方法返回错误序列的长度。对所有的给定长度的错误输入错误，有此类的一个唯一实例描述。  </p></li>

<li><p> 当表示一个字符的输入单元序列不能在输出 charset 中表示时报告<i>不可映射的字符错误</i>。这种错误用此类的实例描述，该类的 {@link #isUnmappable() isUnmappable} 方法返回 <tt>true</tt>，该类的 {@link #length() length} 方法返回表示不可映射的字符的输入序列的长度。对所有的给定长度的不可映射的字符错误，有此类的一个唯一实例描述。
   </p></li>

 </ul>

为了方便，{@link #isError() isError} 方法为描述错误输入和不可映射的字符错误的结果对象返回 <tt>true</tt>，但是为那些描述下溢或溢出情况的结果对象返回 <tt>false</tt>。  </p>

@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.8, 03/12/19
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.nio.charset.CoderResult java.nio.charset.CoderResult.UNDERFLOW
<!-- END KEY -->
<!-- BEGIN DATA -->
指示下溢的结果对象，意味着输入缓冲区中的输入被用完，或者如果输入缓冲区不是空的，但还需要其他的输入。  </p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.nio.charset.CoderResult java.nio.charset.CoderResult.OVERFLOW
<!-- END KEY -->
<!-- BEGIN DATA -->
指示溢出的结果对象，意味着输出缓冲区没有足够的空间。  </p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.nio.charset.CoderResult.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述此 CoderResult 的字符串。

@return 一个描述字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.nio.charset.CoderResult.isUnderflow()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知此对象是否描述下溢情况。  </p>

@return 当且仅当此对象表示下溢时才返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.nio.charset.CoderResult.isOverflow()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知此对象是否描述溢出情况。  </p>

@return 当且仅当此对象表示溢出时才返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.nio.charset.CoderResult.isError()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知此对象是否描述错误情况。  </p>

@return 当且仅当此对象表示错误输入错误或不可映射的字符错误时才返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.nio.charset.CoderResult.isMalformed()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知此对象是否描述错误输入错误。
 </p>

@return 当且仅当此对象表示一个错误输入错误时才返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.nio.charset.CoderResult.isUnmappable()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知此对象是否描述不可映射的字符错误。  </p>

@return 当且仅当此对象表示一个不可映射的字符错误时才返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.nio.charset.CoderResult.length()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象描述的错误输入的长度<i>（可选操作）</i>。  </p>

@return 错误输入的长度，一个正整数

@throws UnsupportedOperationException 如果此对象没有描述错误情况，也就是如果 {@link #isError() isError} 没有返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.charset.CoderResult java.nio.charset.CoderResult.malformedForLength(int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
静态工厂方法，返回描述给定长度的错误输入错误的唯一对象。  </p>

@return 请求的 CoderResult 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.charset.CoderResult java.nio.charset.CoderResult.unmappableForLength(int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
静态工厂方法，返回描述给定长度的不可映射的字符错误的唯一对象。  </p>

@return 请求的 CoderResult 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.nio.charset.CoderResult.throwException() throws java.nio.charset.CharacterCodingException
<!-- END KEY -->
<!-- BEGIN DATA -->
抛出相应于此对象描述的结果的异常。
 </p>

@throws BufferUnderflowException 如果此对象是 {@link #UNDERFLOW}

@throws BufferOverflowException 如果此对象是 {@link #OVERFLOW}

@throws MalformedInputException 如果此对象表示一个错误输入错误；该异常的长度值是此对象的长度值

@throws UnmappableCharacterException 如果此对象表示一个不可映射的字符错误；该异常的长度值是此对象的长度值

<!-- END DATA -->
