<!-- BEGIN KEY -->
java.nio.charset
<!-- END KEY -->
<!-- BEGIN DATA -->

定义用来在字节和 Unicode 字符之间转换的 charset、解码器和编码器。

<blockquote><table cellspacing=1 cellpadding=0 summary="Summary of charsets, decoders, and encoders in this package">
<tr><th><p align="left">类名</p></th><th><p align="left">描述</p></th></tr>
  <tr><td valign=top><tt>{@link java.nio.charset.Charset}</tt></td>
<td>字符和字节之间的指定映射关系<br></td></tr>
  <tr><td valign=top><tt>{@link java.nio.charset.CharsetDecoder}</tt></td>
<td>把字节解码为字符</td></tr>
  <tr><td valign=top><tt>{@link java.nio.charset.CharsetEncoder}&nbsp;&nbsp;</tt></td>
<td>把字符编码为字节</td></tr>
  <tr><td valign=top><tt>{@link java.nio.charset.CoderResult}&nbsp;&nbsp;</tt></td>
<td>描述 coder 的结果</td></tr>
  <tr><td valign=top><tt>{@link java.nio.charset.CodingErrorAction}&nbsp;&nbsp;</tt></td>
<td>描述检测到编码错误时所采取的操作<br></td></tr>

</table></blockquote>

<p> <i>charset</i> 是 16 位 Unicode 字符序列和字节序列之间的指定映射关系，从某种意义上来说，在 <a
href="http://ietf.org/rfc/rfc2278.txt"><i>RFC&nbsp;2278</i></a> 中对其进行了定义。<i>解码器</i> 是把一个特定 charset 中的字节转换成字符的引擎，<i>编码器</i> 是把字符转换成字节的引擎。编码器和解码器在字节和字符缓冲区上操作。它们共同被称为 <i>coder</i>。

<p> {@link java.nio.charset.Charset} 类定义了为给定的 charset 创建 coder 的方法和获取与某个 charset 相关的名称的方法。它还定义了用于测试是否支持特定 charset 的静态方法、通过名称查找 charset 实例的静态方法，以及构造一个包含目前 Java 虚拟机支持的每个 charset 的映射静态方法。

<p> 大多数用户不直接使用这些类；他们使用 {@link java.lang.String} 类中存在的和 charset 有关的构造方法和方法，一起使用的还有 {@link java.io.InputStreamReader} 和 {@link java.io.OutputStreamWriter} 类，为了利用此包中定义的 charset 设施，所有这些类的实现都被重写。为了在构造这些类的实例时显式地指定 charset 对象，已经对 {@link java.io.InputStreamReader} 和 {@link java.io.OutputStreamWriter} 类做了一些更改。

<p> 通过在 <tt>{@link java.nio.charset.spi}</tt> 包中的 {@link java.nio.charset.spi.CharsetProvider} 类中定义的接口，可提供对新 charset 的支持。

<p> 除非另行说明，否则将 <tt>null</tt> 参数传递给此包中任何类或接口的构造方法或方法将会导致抛出 {@link
java.lang.NullPointerException NullPointerException}。


@since 1.4
@version 1.5, 05/05/22
@author Mark Reinhold
@author JSR-51 Expert Group

<!-- END DATA -->
