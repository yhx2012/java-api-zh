<!-- BEGIN KEY -->
public abstract class java.nio.charset.spi.CharsetProvider extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
Charset 服务提供者类。

<p> charset 提供者是此类的一个具体子类，具有零参数的构造方法和一些相关的 charset 实现类。Charset 提供者可以作为扩展装入到 Java 平台的实例中，也就是把 jar 文件放入任意常用的扩展目录中。通过把提供者加入到 applet 或应用程序类路径中，或者通过某些特定于平台的其他方式来使提供者可用。通过当前线程的{@link java.lang.Thread#getContextClassLoader() </code>上下文类加载器<code>}来查找 Charset 提供者。

<p> charset 提供者使用资源目录 <tt>META-INF/services</tt> 下的名称为 <tt>java.nio.charset.spi.CharsetProvider</tt> 的提供者配置文件标识它自己。该文件应该包含一个完全限定的具体 charset 提供者类名的列表，每行一个类名。通过下列字符之一表示某行已终止：换行 (<tt>'\n'</tt>)、回车 (<tt>'\r'</tt>) 或回车后直接跟着换行。忽略各名称周围的空格字符和制表符以及空行。注释字符为 <tt>'#'</tt> (<tt>'\u0023'</tt>)；将忽略每行的第一个注释字符后面的所有字符。文件必须使用 UTF-8 编码。

<p> 如果在多个配置文件中命名了一个特定的具体 charset 提供者类，或在同一配置文件中多次对其命名，则忽略重复的命名。命名特定提供者的配置文件不必像提供者本身一样位于同一个 jar 文件或其他的分布式单元中。提供者必须是从同一个类加载器可访问的，为了查找配置文件而在开始时查询该类加载器；这不必是装载文件的类加载器。 </p>

@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.15, 04/05/05
@since 1.4

@see java.nio.charset.Charset

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.nio.charset.spi.CharsetProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->
初始化新的 charset 提供者。 </p>

@throws SecurityException 如果已安装安全管理器并且它拒绝 {@link RuntimePermission}<tt>(&quot;charsetProvider&quot;)</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Iterator<java.nio.charset.Charset> java.nio.charset.spi.CharsetProvider.charsets()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建在此提供者所支持的 charset 上进行迭代的迭代器。在 {@link java.nio.charset.Charset#availableCharsets Charset.availableCharsets} 方法的实现中使用此方法。 </p>

@return 新迭代器

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.charset.Charset java.nio.charset.spi.CharsetProvider.charsetForName(String charsetName)
<!-- END KEY -->
<!-- BEGIN DATA -->
用给定的 charset 名称获取 charset。 </p>

@param charsetName 请求的 charset 的名称；可以是规范名称或别名

@return 指定 charset 的 charset 对象；如果此提供者不支持该指定 charset，则返回 <tt>null</tt>

<!-- END DATA -->
