<!-- BEGIN KEY -->
public abstract class java.nio.CharBuffer extends java.nio.Buffer implements java.lang.Comparable, java.lang.Appendable, java.lang.CharSequence, java.lang.Readable
<!-- END KEY -->
<!-- BEGIN DATA -->
字符缓冲区。

<p> 此类定义了字符缓冲区上的四类操作：

 <ul>

<li><p> 读写单个字符的绝对和相对 {@link #get() </code><i>get</i><code>} 和 {@link #put(char) </code><i>put</i><code>} 方法； </p></li>

<li><p> 将此缓冲区中的连续字符序列传输到数组中的相对{@link #get(char[]) </code><i>批量 get</i><code>} 方法；</p></li>

<li><p> 将字符数组、字符串或其他字符缓冲区中的连续字符序列传输到此缓冲区的相对{@link #put(char[]) </code><i>批量 put</i><code>} 方法；以及 </p></li>
<li><p> 字符缓冲区的 {@link #compact </code>compacting<code>}、{@link #duplicate </code>duplicating<code>} 和 {@link #slice </code>slicing<code>} 方法。  </p></li>

 </ul>

<p> 字符缓冲区可以通过 {@link #allocate </code><i>allocation</i><code>} 方法创建，此方法通过 {@link #wrap(char[]) </code><i>wrapping</i><code>} 将一个现有字符数组或字符串包装到缓冲区中来为缓冲区内容分配空间，或者通过创建现有字节缓冲区的<a href="ByteBuffer.html#views"><i>视图</i></a>来创建。

<p> 像字节缓冲区一样，字符缓冲区要么是<i>直接的</i>，要么是<i>非直接的</i></a>。通过此类的 <tt>wrap</tt> 方法创建的字符缓冲区将是非直接的。当且仅当字节缓冲区本身为直接时，作为字节缓冲区的视图创建的字符缓冲区才是直接的。通过调用 {@link #isDirect isDirect} 方法可以确定字符缓冲区是否为直接的。  </p>
<p> 此类实现 {@link CharSequence} 接口，以便字符缓冲区可以用于任何接受字符序列的地方，例如，在正则表达式包 <tt>{@link java.util.regex}</tt> 中。
 </p>

<p> 指定此类中不返回其他值的那些方法返回它们被调用时所在的缓冲区。这允许对方法调用进行链接。
例如，语句序列

 <blockquote><pre>
 cb.put(&quot;text/&quot;);
 cb.put(subtype);
 cb.put(&quot;; charset=&quot;);
 cb.put(enc);</pre></blockquote>

可以由以下单个语句替换

 <blockquote><pre>
 cb.put(&quot;text/&quot;).put(subtype).put(&quot;; charset=&quot;).put(enc);</pre></blockquote>

@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.56, 04/07/16
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.CharBuffer java.nio.CharBuffer.allocate(int capacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
分配新的字符缓冲区。

<p> 新缓冲区的位置将为零，其界限将为其容量，其标记是未定义的。它将具有一个{@link #array </code>底层实现数组<code>}，且其{@link #arrayOffset </code>数组偏移量<code>}将为零。

@param  capacity 新缓冲区的容量，以字符为单位

@return  新的字符缓冲区

@throws  IllegalArgumentException 如果 <tt>capacity</tt> 为负整数

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.CharBuffer java.nio.CharBuffer.wrap(char[] array, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符数组包装到缓冲区中。

<p> 给定的字符数组将支持新缓冲区；即缓冲区修改将导致数组修改，反之亦然。新缓冲区的容量将为 <tt>array.length</tt>，其位置将为 <tt>offset</tt>，其界限将为 <tt>offset + length</tt>，其标记是未定义的。其{@link #array </code>底层实现数组<code>}将为给定数组，并且其{@link #arrayOffset </code>数组偏移量<code>}将为零。  </p>

@param  array 支持新缓冲区的数组

@param  offset 要使用的子数组的偏移量；必须为非负且不大于 <tt>array.length</tt>。将新缓冲区的位置设置为此值。

@param  length 要使用的子数组的长度；必须为非负且不大于 <tt>array.length - offset</tt>。新缓冲区的界限将被设置为 <tt>offset + length</tt>。

@return  新的字符缓冲区

@throws  IndexOutOfBoundsException 如果关于 <tt>offset</tt> 和 <tt>length</tt> 参数的前提不成立

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.CharBuffer java.nio.CharBuffer.wrap(char[] array)
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符数组包装到缓冲区中。

<p> 给定的字符数组将支持新缓冲区；即缓冲区修改将导致数组修改，反之亦然。新缓冲区的容量和界限将为 <tt>array.length</tt>，其位置将为零，其标记是未定义的。其{@link #array </code>底层实现数组<code>}将为给定数组，并且其{@link #arrayOffset </code>数组偏移量<code>}将为零。</p> 

@param  array 实现此缓冲区的数组

@return  新的字符缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.nio.CharBuffer.read(CharBuffer target) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
试图将字符读入指定的字符缓冲区。缓冲区可照原样用作字符的存储库：所做的唯一更改是 put 操作的结果。不对缓冲区执行翻转或重绕操作。

@param target 要将字符读入的缓冲区
@return 添加到缓冲区的字符数量，如果此字符源位于缓冲区末端，则返回 -1
@throws IOException 如果发生 I/O 错误
@throws NullPointerException 如果目标为空
@throws ReadOnlyBufferException 如果目标是一个只读缓冲区
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.CharBuffer java.nio.CharBuffer.wrap(CharSequence csq, int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符序列包装到缓冲区中。

<p> 新的只读缓冲区的内容将为给定字符序列的内容。缓冲区的容量将为 <tt>csq.length()</tt>，其位置将为 <tt>start</tt>，其界限将为 <tt>end</tt>，其标记是未定义的。  </p>

@param  csq 字符序列，新的字符缓冲区将从中创建

@param  start 要使用的第一个字符的索引；必须为非负且不大于 <tt>csq.length()</tt>。新缓冲区的位置将被设置为此值。

@param  end 要使用的最后一个字符后面的字符的索引；必须不小于 <tt>start</tt> 且不大于 <tt>csq.length()</tt>。将新缓冲区的界限设置为此值。

@return  新的字符缓冲区

@throws  IndexOutOfBoundsException 如果关于 <tt>offset</tt> 和 <tt>length</tt> 参数的前提不成立

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.CharBuffer java.nio.CharBuffer.wrap(CharSequence csq)
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符序列包装到缓冲区中。
 
<p> 新的只读缓冲区的内容将为给定字符序列的内容。新缓冲区的容量和界限将为 <tt>csq.length()</tt>，其位置将为零，其标记是未定义的。  </p>

@param  csq 新的字符缓冲区要从其创建的字符序列

@return  新的字符缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.CharBuffer java.nio.CharBuffer.slice()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的字符缓冲区，其内容为此缓冲区内容的共享子序列。

<p> 新缓冲区的内容将从此缓冲区的当前位置开始。此缓冲区内容的更改在新缓冲区中是可见的，反之亦然；这两个缓冲区的位置、界限和标记值是相互独立的。

<p> 新缓冲区的位置将为零，其容量和界限将为此缓冲区中所剩余的字符数量，其标记是未定义的。当且仅当此缓冲区为直接时，新缓冲区才是直接的，当且仅当此缓冲区为只读时，新缓冲区才是只读的。  </p>

@return  新的字符缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.CharBuffer java.nio.CharBuffer.duplicate()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建共享此缓冲区内容的新的字符缓冲区。

<p> 新缓冲区的内容将为此缓冲区的内容。此缓冲区内容的更改在新缓冲区中是可见的，反之亦然；这两个缓冲区的位置、界限和标记值是相互独立的。

<p> 新缓冲区的容量、界限、位置和标记值将与此缓冲区相同。当且仅当此缓冲区为直接时，新缓冲区才是直接的，当且仅当此缓冲区为只读时，新缓冲区才是只读的。  </p>

@return  新的字符缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.CharBuffer java.nio.CharBuffer.asReadOnlyBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建共享此缓冲区内容的新的只读字符缓冲区。

<p> 新缓冲区的内容将为此缓冲区的内容。此缓冲区的更改在新缓冲区中是可见的，但新缓冲区将是只读的并且不允许修改共享内容。两个缓冲区的位置、界限和标记值是相互独立的。

<p> 新缓冲区的容量、界限、位置和标记值将与此缓冲区相同。

<p> 如果此缓冲区本身是只读的，则此方法与 {@link #duplicate duplicate} 方法完全相同。  </p>

@return  新的只读字符缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract char java.nio.CharBuffer.get()
<!-- END KEY -->
<!-- BEGIN DATA -->
相对 <i>get</i> 方法。读取此缓冲区当前位置的字符，然后该位置递增。 </p>

@return  缓冲区当前位置的字符

@throws  BufferUnderflowException 如果缓冲区当前位置不小于其界限

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.CharBuffer java.nio.CharBuffer.put(char c)
<!-- END KEY -->
<!-- BEGIN DATA -->
相对 <i>put</i> 方法<i>（可选操作）</i>。
 
<p> 将给定字符写入此缓冲区的当前位置，然后该位置递增。 </p>

@param  c 要写入的字符

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区的当前位置不小于界限

@throws  ReadOnlyBufferException 如果此缓冲区是只读的

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract char java.nio.CharBuffer.get(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
绝对 <i>get</i> 方法。读取给定索引处的字符。 </p>

@param  index 将读取字符的位置的索引

@return  给定索引处的字符

@throws  IndexOutOfBoundsException 如果 <tt>index</tt> 为负或不小于缓冲区界限

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.CharBuffer java.nio.CharBuffer.put(int index, char c)
<!-- END KEY -->
<!-- BEGIN DATA -->
绝对 <i>put</i> 方法<i>（可选操作）</i>。
 
<p> 将给定字符写入此缓冲区的给定索引处。 </p>

@param  index 将在该位置写入字符

@param  c 要写入的字符值

@return  此缓冲区

@throws  IndexOutOfBoundsException 如果 <tt>index</tt> 为负或不小于缓冲区界限

@throws  ReadOnlyBufferException 如果此缓冲区是只读的

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.nio.CharBuffer java.nio.CharBuffer.get(char[] dst, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
相对批量 <i>get</i> 方法。

<p> 此方法将此缓冲区中的字符传输到给定的目标数组中。如果缓冲区中剩余的字符少于满足请求所需的字符，即如果 <tt>length</tt>&nbsp;<tt>&gt;</tt>&nbsp;<tt>remaining()</tt>，则不传输字符且抛出 {@link BufferUnderflowException}。

<p> 否则，此方法将此缓冲区中的 <tt>length</tt> 个字符复制到给定数组中，从此缓冲区的当前位置和数组中的给定偏移量位置开始复制。然后此缓冲区的位置递增 <tt>length</tt>。

<p> 换句话说，调用此方法的形式为 <tt>src.get(dst,&#xA0;off,&#xA0;len)</tt>，效果与以下循环语句完全相同：

 <pre>
     for (int i = off; i &lt; off + len; i++)
         dst[i] = src.get(); </pre>

区别在于它首先检查此缓冲区中是否具有足够的字符，这样可能效率更高。 </p>

@param  dst 要写入字符的数组

@param  offset 要写入的第一个字符在数组中的偏移量；必须为非负且不大于 <tt>dst.length</tt>

@param  length 要写入给定数组中的字符的最大数量；必须为非负且不大于 <tt>dst.length - offset</tt>

@return  此缓冲区

@throws  BufferUnderflowException 如果此缓冲区中的剩余字符少于 <tt>length</tt>

@throws  IndexOutOfBoundsException 如果关于 <tt>offset</tt> 和 <tt>length</tt> 参数的前提不成立

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.nio.CharBuffer java.nio.CharBuffer.get(char[] dst)
<!-- END KEY -->
<!-- BEGIN DATA -->
相对批量 <i>get</i> 方法。

<p> 此方法将此缓冲区的字符传输到给定的目标数组中。调用此方法的形式为 <tt>src.get(a)</tt>，该调用与以下调用完全相同：

 <pre>
     src.get(a, 0, a.length) </pre>

@return  此缓冲区

@throws  BufferUnderflowException 如果此缓冲区中的剩余字符少于 <tt>length</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.nio.CharBuffer java.nio.CharBuffer.put(CharBuffer src)
<!-- END KEY -->
<!-- BEGIN DATA -->
相对批量 <i>put</i> 方法<i>（可选操作）</i>。

<p> 此方法将给定源缓冲区中的剩余字符传输到此缓冲区中。如果源缓冲区中的剩余字符多于此缓冲区的剩余字符空间，即 <tt>src.remaining()</tt>&nbsp;<tt>&gt;</tt>&nbsp;<tt>remaining()</tt>，则不传输字符且抛出 {@link BufferOverflowException}。

<p> 否则，此方法将给定缓冲区中的 <i>n</i>&nbsp;=&nbsp;<tt>src.remaining()</tt> 个字符复制到此缓冲区中，从每个缓冲区的当前位置开始复制。然后这两个缓冲区的位置均递增 <i>n</i>。

<p> 换句话说，调用此方法的形式为 <tt>dst.put(src)</tt>，效果与以下循环语句完全相同：

 <pre>
     while (src.hasRemaining())
         dst.put(src.get()); </pre>

区别在于它首先检查此缓冲区中是否有足够空间，这样可能效率更高。 </p>

@param  src 要从中读取字符的源缓冲区；不能为此缓冲区

@return  此缓冲区

@throws  BufferOverflowException 如果对于源缓冲区中剩余的字符，此缓冲区没有足够空间

@throws  IllegalArgumentException 如果源缓冲区为此缓冲区

@throws  ReadOnlyBufferException 如果此缓冲区是只读的

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.nio.CharBuffer java.nio.CharBuffer.put(char[] src, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
相对批量 <i>put</i> 方法<i>（可选操作）</i>。

<p> 此方法将给定源数组中的字符传输到此缓冲区中。如果要从数组复制的字符多于此缓冲区中的剩余字符空间，即如果 <tt>length</tt>&nbsp;<tt>&gt;</tt>&nbsp;<tt>remaining()</tt>，则不传输字符且抛出 {@link BufferOverflowException}。

<p> 否则，此方法将给定数组中的 <tt>length</tt> 个字符复制到此缓冲区中，从数组中给定偏移量位置和此缓冲区的当前位置开始复制。然后此缓冲区的位置递增 <tt>length</tt>。

<p> 换句话说，调用此方法的形式为 <tt>dst.put(src,&#xA0;off,&#xA0;len)</tt>，效果与以下循环语句完全相同：

 <pre>
     for (int i = off; i &lt; off + len; i++)
         dst.put(a[i]); </pre>

区别在于它首先检查此缓冲区中是否有足够空间，这样可能效率更高。 </p>

@param  src 要从中读取字符的数组

@param  offset 要读取的第一个字符在数组中的偏移量；必须为非负且不大于 <tt>array.length</tt>

@param  length 要从给定数组读取的字符数量；必须为非负且不大于 <tt>array.length - offset</tt>

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区没有足够空间

@throws  IndexOutOfBoundsException 如果关于 <tt>offset</tt> 和 <tt>length</tt> 参数的前提不成立

@throws  ReadOnlyBufferException 如果此缓冲区是只读的

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.nio.CharBuffer java.nio.CharBuffer.put(char[] src)
<!-- END KEY -->
<!-- BEGIN DATA -->
相对批量 <i>put</i> 方法<i>（可选操作）</i>。

<p> 此方法将给定源字符数组的所有内容传输到此缓冲区中。调用此方法的形式为 <tt>dst.put(a)</tt>，该调用与以下调用完全相同：

 <pre>
     dst.put(a, 0, a.length) </pre>

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区没有足够空间

@throws  ReadOnlyBufferException 如果此缓冲区是只读的

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.nio.CharBuffer java.nio.CharBuffer.put(String src, int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
相对批量 <i>put</i> 方法<i>（可选操作）</i>。

<p> 此方法将给定字符串中的字符传输到此缓冲区中。如果要从字符串复制的字符多于此缓冲区中的剩余字符空间，即如果 <tt>end&nbsp;-&nbsp;start</tt>&nbsp;<tt>&gt;</tt>&nbsp;<tt>remaining()</tt>，则不传输字符且抛出 {@link BufferOverflowException}。

<p> 否则，此方法将给定字符串的 <i>n</i>&nbsp;=&nbsp;<tt>end</tt>&nbsp;-&nbsp;<tt>start</tt> 个字符复制到此缓冲区中，从给定的 <tt>start</tt> 索引处和此缓冲区的当前位置开始复制。然后此缓冲区的位置递增 <i>n</i>。

<p> 换句话说，调用此方法的形式为 <tt>dst.put(src,&nbsp;start,&nbsp;end)</tt>，效果与以下循环语句完全相同：

 <pre>
     for (int i = start; i &lt; end; i++)
         dst.put(src.charAt(i)); </pre>

区别在于它首先检查此缓冲区中是否有足够空间，这样可能效率更高。 </p>

@param  src 要从中读取字符的字符串

@param  start 要读取的第一个字符在字符串中的偏移量；必须为非负且不大于 <tt>string.length()</tt>

@param  end 要读取的最后一个字符在字符串中的偏移量加上 1；必须为非负且不大于 <tt>string.length()</tt>

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区没有足够空间

@throws  IndexOutOfBoundsException 如果关于 <tt>start</tt> 和 <tt>end</tt> 参数的前提不成立

@throws  ReadOnlyBufferException 如果此缓冲区是只读的

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.nio.CharBuffer java.nio.CharBuffer.put(String src)
<!-- END KEY -->
<!-- BEGIN DATA -->
相对批量 <i>put</i> 方法<i>（可选操作）</i>。

<p> 此方法将给定源字符串中的所有内容传输到此缓冲区中。调用此方法的形式为 <tt>dst.put(s)</tt>，该调用与以下调用完全相同：

 <pre>
     dst.put(s, 0, s.length()) </pre>

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区没有足够空间

@throws  ReadOnlyBufferException 如果此缓冲区是只读的

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.nio.CharBuffer.hasArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
判断该缓冲区是否可通过一个可访问的字符数组实现。

<p> 如果此方法返回 <tt>true</tt>，则可以安全地调用 {@link #array() array} 和 {@link #arrayOffset() arrayOffset} 方法。
 </p>

@return  当且仅当存在实现此缓冲区的数组，并且此缓冲区不是只读缓冲区时，返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final char[] java.nio.CharBuffer.array()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回实现此缓冲区的字符数组<i>（可选操作）</i>。

<p> 此缓冲区的内容修改将导致返回的数组内容修改，反之亦然。

<p> 调用此方法之前要调用 {@link #hasArray hasArray} 方法，以确保此缓冲区具有可访问的底层实现数组。  </p>

@return  实现此缓冲区的数组

@throws  ReadOnlyBufferException 如果存在实现此缓冲区的数组，但缓冲区是只读的

@throws  UnsupportedOperationException 如果不存在某个可访问的数组实现此缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.nio.CharBuffer.arrayOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此缓冲区中的第一个元素在缓冲区的底层实现数组中的偏移量<i>（可选操作）</i>。

<p> 如果存在实现此缓冲区的数组，则缓冲区位置 <i>p</i> 对应于数组索引 <i>p</i>&nbsp;+&nbsp;<tt>arrayOffset()</tt>。

<p> 调用此方法之前要调用 {@link #hasArray hasArray} 方法，以确保此缓冲区具有可访问的底层实现数组。  </p>

@return  此缓冲区的第一个元素在缓冲区数组中的偏移量

@throws  ReadOnlyBufferException 如果存在实现此缓冲区的数组，但缓冲区是只读的

@throws  UnsupportedOperationException 如果不存在某个可访问的数组实现此缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.CharBuffer java.nio.CharBuffer.compact()
<!-- END KEY -->
<!-- BEGIN DATA -->
压缩此缓冲区<i>（可选操作）</i>。

<p> 将缓冲区当前位置和界限之间的字符（如果有）复制到缓冲区的开始处。即将索引 <i>p</i>&nbsp;=&nbsp;<tt>position()</tt> 处的字符复制到索引 0 处，将索引 <i>p</i>&nbsp;+&nbsp;1 处的字符复制到索引 1 处，依此类推，直到将索引 <tt>limit()</tt>&nbsp;-&nbsp;1 处的字符复制到索引 <i>n</i>&nbsp;=&nbsp;<tt>limit()</tt>&nbsp;-&nbsp;<tt>1</tt>&nbsp;-&nbsp;<i>p</i> 处。然后将缓冲区的位置设置为 <i>n+1</i>，并将其界限设置为其容量。如果已定义了标记，则丢弃它。

<p> 将缓冲区的位置设置为复制的字符数，而不是零，以便调用此方法后可以紧接着调用另一个相对 <i>put</i> 方法。 </p>

@return  此缓冲区

@throws  ReadOnlyBufferException 如果此缓冲区是只读的

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.nio.CharBuffer.isDirect()
<!-- END KEY -->
<!-- BEGIN DATA -->
判断此字符缓冲区是否为直接的。 </p>

@return  当且仅当此缓冲区为直接时，返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.nio.CharBuffer.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此缓冲区的当前哈希码。

<p> 字符缓冲区的哈希码只取决于其剩余元素；即取决于从 <tt>position()</tt> 开始一直到（包括） <tt>limit()</tt>&nbsp;-&nbsp;<tt>1</tt> 处的元素。

<p> 因为缓冲区哈希码与内容有关，因此建议不要在哈希映射或其他类似数据结构中将缓冲区用作键，除非知道其内容不会发生更改。  </p>

@return  此缓冲区的当前哈希码

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.nio.CharBuffer.equals(Object ob)
<!-- END KEY -->
<!-- BEGIN DATA -->
判断此缓冲区是否与另一个对象相同。

<p> 两个字符缓冲区是相同的，当且仅当：

 <p><ol>

<li><p> 它们具有相同的元素类型， </p></li>

<li><p> 它们具有相同数量的剩余元素，并且
   </p></li>

<li><p> 两个剩余元素序列（与它们的起始位置无关）逐点相同。
   </p></li>

 </ol>

<p> 字符缓冲区与任何其他类型的对象都不同。  </p>

@param  ob  此缓冲区要比较的对象

@return  当且仅当此缓冲区与给定对象相同时，返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.nio.CharBuffer.compareTo(CharBuffer that)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此缓冲区与另一个缓冲区进行比较。

<p> 比较两个字符缓冲区的方法是按字典顺序比较它们的剩余元素序列，而不考虑每个序列在其对应缓冲区中的起始位置。

<p> 字符缓冲区不能与任何其他类型的对象进行比较。

@return  如果此缓冲区小于、等于或大于给定缓冲区，则相应返回负整数、零或正整数

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.nio.CharBuffer.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含此缓冲区中字符的字符串。

<p> 所得字符串的第一个字符将为此缓冲区位置处的字符，最后一个字符将为索引 <tt>limit()</tt>&nbsp;-&nbsp;1 处的字符。调用此方法不更改缓冲区的位置。 </p>

@return 指定的字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.nio.CharBuffer.length()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此字符缓冲区的长度。

<p> 当将字符缓冲区视为字符序列时，长度只是该位置（包括）和界限（不包括）之间的字符数；即长度等效于 <tt>remaining()</tt>。 </p>

@return  此字符缓冲区的长度

<!-- END DATA -->
<!-- BEGIN KEY -->
public final char java.nio.CharBuffer.charAt(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
读取相对于当前位置的给定索引处的字符。 </p>

@param  index 要读取的相对于该位置的字符的索引；必须为非负且小于 <tt>remaining()</tt>

@return  索引 <tt>position()&nbsp;+&nbsp;index</tt> 处的字符

@throws  IndexOutOfBoundsException 如果关于 <tt>index</tt> 的前提不成立

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.CharSequence java.nio.CharBuffer.subSequence(int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建表示此缓冲区的指定序列、相对于当前位置的新字符缓冲区。

<p> 新缓冲区将共享此缓冲区的内容；即如果此缓冲区的内容是可变的，则修改一个缓冲区将导致另一个缓冲区被修改。新缓冲区的容量将为此缓冲区的容量，其位置将为 <tt>position()</tt>&nbsp;+&nbsp;<tt>start</tt>，其界限将为 <tt>position()</tt>&nbsp;+&nbsp;<tt>end</tt>。当且仅当此缓冲区为直接时，新缓冲区才是直接的，当且仅当此缓冲区为只读时，新缓冲区才是只读的。  </p>

@param  start 子序列中第一个字符相对于当前位置的索引；必须为非负且不大于 <tt>remaining()</tt>

@param  end 子序列中最后一个字符后面的字符相对于当前位置的索引；必须不小于 <tt>start</tt> 且不大于 <tt>remaining()</tt>

@return  新的字符序列

@throws  IndexOutOfBoundsException 如果关于 <tt>start</tt> 和 <tt>end</tt> 的前提不成立

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.nio.CharBuffer java.nio.CharBuffer.append(CharSequence csq)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的字符序列添加到此缓冲区<i>（可选操作）</i>。
 
<p> 调用此方法的形式为 <tt>dst.append(csq)</tt>，该调用与以下调用完全相同：

 <pre>
     dst.put(csq.toString()) </pre>

<p> 可能没有添加整个序列，这取决于针对字符序列 <tt>csq</tt> 的 <tt>toString</tt> 规范。例如，调用字符缓冲区的 {@link CharBuffer#toString() toString} 方法将返回一个子序列，其内容取决于缓冲区的位置和界限。

@param  csq 要添加的字符序列。如果 <tt>csq</tt> 为 <tt>null</tt>，则向此字符缓冲区添加四个字符 <tt>&quot;null&quot;</tt>。

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区没有足够空间

@throws  ReadOnlyBufferException 如果此缓冲区是只读的

@since  1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.nio.CharBuffer java.nio.CharBuffer.append(CharSequence csq, int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定字符序列的子序列添加到此缓冲区<i>（可选操作）</i>。
 
<p> 当 <tt>csq</tt> 不为 <tt>null</tt> 时，调用此方法的形式为 <tt>dst.append(csq, start, end)</tt>，该调用与以下调用完全相同：

 <pre>
     dst.put(csq.subSequence(start, end).toString()) </pre>

@param  csq 要添加其子序列的字符序列。如果 <tt>csq</tt> 为 <tt>null</tt>，则按 <tt>csq</tt> 包含四个字符 <tt>&quot;null&quot;</tt> 的方式添加这些字符。

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区没有足够空间

@throws  IndexOutOfBoundsException 如果 <tt>start</tt> 或 <tt>end</tt> 为负，而 <tt>start</tt> 大于 <tt>end</tt> 或者 <tt>end</tt> 大于 <tt>csq.length()</tt>

@throws  ReadOnlyBufferException 如果此缓冲区是只读的

@since  1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.nio.CharBuffer java.nio.CharBuffer.append(char c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定字符添加到此缓冲区<i>（可选操作）</i>。
 
<p> 调用此方法的形式为 <tt>dst.append(c)</tt>，该调用与以下调用完全相同：

 <pre>
     dst.put(c) </pre>

@param  c 要添加的 16 位字符

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区没有足够空间

@throws  ReadOnlyBufferException 如果此缓冲区是只读的

@since  1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ByteOrder java.nio.CharBuffer.order()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此缓冲区的字节顺序。

<p> 通过分配或通过包装现有 <tt>char</tt> 数组而创建的字符缓冲区的字节顺序是底层硬件的 {@link ByteOrder#nativeOrder </code>native order<code>}。作为字节缓冲区的<a
 href="ByteBuffer.html#views">视图</a>而创建的字符缓冲区的字节顺序是创建视图时字节缓冲区的字节顺序。  </p>

@return  此缓冲区的字节顺序

<!-- END DATA -->
