<!-- BEGIN KEY -->
public abstract class java.nio.ShortBuffer extends java.nio.Buffer implements java.lang.Comparable
<!-- END KEY -->
<!-- BEGIN DATA -->
short 缓冲区。

<p> 此类定义了 short 缓冲区上的四类操作：

<li><p> 读写单个 short 的绝对和相对 {@link #get() </code><i>get</i><code>} 和 {@link #put(short) </code><i>put</i><code>} 方法。 </p></li>

<li><p> 将此缓冲区的连续 short 序列传输到数组中的相对{@link #get(short[]) </code><i>批量 get</i><code>} 方法；</p></li>

<li><p> 将 short 数组或其他 short 缓冲区中的连续 short 序列传输到此缓冲区的相对{@link #put(short[]) </code><i>批量 put</i><code>} 方法；以及</p></li>
<li><p> short 缓冲区的 {@link #compact </code>compacting<code>}、{@link #duplicate </code>duplicating<code>} 和 {@link #slice </code>slicing<code>} 方法。 </p></li>

<p> short 缓冲区可以通过 {@link #allocate </code><i>allocation</i><code>} 创建，此方法通过 {@link #wrap(short[]) </code><i>wrapping</i><code>} 将一个现有 short 数组包装到缓冲区中来为缓冲区内容分配空间，或者通过创建现有字节缓冲区的<a href="ByteBuffer.html#views"><i>视图</i></a>来创建。

<p> 像字节缓冲区一样，short 缓冲区要么是<a  href="ByteBuffer.html#direct"><i>直接的</i>，要么是<i>非直接的</i></a>。通过此类的 <tt>wrap</tt> 方法创建的 short 缓冲区将是非直接的。当且仅当字节缓冲区本身为直接时，作为字节缓冲区的视图创建的 short 缓冲区才是直接的。通过调用 {@link #isDirect isDirect} 方法可以确定 short 缓冲区是否为直接的。  </p>

<p> 指定此类中的方法（它们不返回其他值），以返回这些方法被调用时所在的缓冲区。这允许对方法调用进行链接。

@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.56, 04/07/16
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.ShortBuffer java.nio.ShortBuffer.allocate(int capacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
分配新的 short 缓冲区。

<p> 新缓冲区的位置将为零，其界限将为其容量，其标记是未定义的。它将具有一个{@link #array </code>底层实现数组<code>}，且其{@link #arrayOffset </code>数组偏移量<code>}将为零。

@param  capacity 新缓冲区的容量，以 short 为单位

@return  新的 short 缓冲区

@throws  IllegalArgumentException 如果 <tt>capacity</tt> 为负整数

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.ShortBuffer java.nio.ShortBuffer.wrap(short[] array, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 short 数组包装到缓冲区中。

<p> 给定的 short 数组将支持新缓冲区；即缓冲区修改将导致数组修改，反之亦然。新缓冲区的容量将为 <tt>array.length</tt>，其位置将为 <tt>offset</tt>，其界限将为 <tt>offset + length</tt>，其标记是未定义的。其{@link #array </code>底层实现数组<code>}将为给定数组，并且其{@link #arrayOffset </code>数组偏移量<code>}将为零。  </p>

@param  array 支持新缓冲区的数组

@param  offset 要使用的子数组的偏移量；必须为非负且不大于 <tt>array.length</tt>。将新缓冲区的位置设置为此值。

@param  length 要使用的子数组的长度；必须为非负且不大于 <tt>array.length - offset</tt>。将新缓冲区的界限设置为 <tt>offset + length</tt>。

@return  新的 short 缓冲区

@throws  IndexOutOfBoundsException 如果关于 <tt>offset</tt> 和 <tt>length</tt> 参数的前提不成立

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.ShortBuffer java.nio.ShortBuffer.wrap(short[] array)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 short 数组包装到缓冲区中。

<p> 给定的 short 数组将支持新缓冲区；即缓冲区修改将导致数组修改，反之亦然。新缓冲区的容量和界限将为 <tt>array.length</tt>，其位置将为零，其标记是未定义的。其{@link #array </code>底层实现数组<code>}将为给定数组，并且其{@link #arrayOffset </code>数组偏移量<code>}将为零。  </p> 

@param  array 实现此缓冲区的数组

@return  新的 short 缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ShortBuffer java.nio.ShortBuffer.slice()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的 short 缓冲区，其内容是此缓冲区内容的共享子序列。

<p> 新缓冲区的内容将从此缓冲区的当前位置开始。此缓冲区内容的更改在新缓冲区中是可见的，反之亦然；这两个缓冲区的位置、界限和标记值是相互独立的。

<p> 新缓冲区的位置将为零，其容量和界限将为此缓冲区中所剩余的 short 数量，其标记是未定义的。当且仅当此缓冲区为直接时，新缓冲区才是直接的，当且仅当此缓冲区为只读时，新缓冲区才是只读的。  </p>

@return  新的 short 缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ShortBuffer java.nio.ShortBuffer.duplicate()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建共享此缓冲区内容的新的 short 缓冲区。

<p> 新缓冲区的内容将为此缓冲区的内容。此缓冲区内容的更改在新缓冲区中是可见的，反之亦然；这两个缓冲区的位置、界限和标记值是相互独立的。

<p> 新缓冲区的容量、界限、位置和标记值将与此缓冲区相同。当且仅当此缓冲区为直接时，新缓冲区才是直接的，当且仅当此缓冲区为只读时，新缓冲区才是只读的。  </p>

@return  新的 short 缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ShortBuffer java.nio.ShortBuffer.asReadOnlyBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建共享此缓冲区内容的新的只读 short 缓冲区。

<p> 新缓冲区的内容将为此缓冲区的内容。此缓冲区内容的更改在新缓冲区中是可见的，但新缓冲区将是只读的并且不允许修改共享内容。两个缓冲区的位置、界限和标记值是相互独立的。

<p> 新缓冲区的容量、界限、位置和标记值将与此缓冲区相同。

<p> 如果此缓冲区本身是只读的，则此方法与 {@link #duplicate duplicate} 方法完全相同。  </p>

@return  新的只读 short 缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract short java.nio.ShortBuffer.get()
<!-- END KEY -->
<!-- BEGIN DATA -->
相对 <i>get</i> 方法。读取此缓冲区当前位置的 short，然后该位置递增。 </p>

@return  缓冲区当前位置的 short 

@throws  BufferUnderflowException 如果缓冲区当前位置不小于其界限

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ShortBuffer java.nio.ShortBuffer.put(short s)
<!-- END KEY -->
<!-- BEGIN DATA -->
相对 <i>put</i> 方法<i>（可选操作）</i>。
 
<p> 将给定 short 写入此缓冲区的当前位置，然后该位置递增。 </p>

@param s 要写入的 short

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区的当前位置不小于界限

@throws  ReadOnlyBufferException 如果此缓冲区是只读的

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract short java.nio.ShortBuffer.get(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
绝对 <i>get</i> 方法。读取给定索引处的 short。 </p>

@param  index 将读取 short 的位置的索引

@return  给定索引处的 short

@throws  IndexOutOfBoundsException 如果 <tt>index</tt> 为负或不小于缓冲区界限

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ShortBuffer java.nio.ShortBuffer.put(int index, short s)
<!-- END KEY -->
<!-- BEGIN DATA -->
绝对 <i>put</i> 方法<i>（可选操作）</i>。
 
<p> 将给定 short 写入此缓冲区的给定索引处。 </p>

@param  index  将在该位置写入 short

@param s 要写入的 short 值

@return  此缓冲区

@throws  IndexOutOfBoundsException 如果 <tt>index</tt> 为负或不小于缓冲区界限

@throws  ReadOnlyBufferException 如果此缓冲区是只读的

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.nio.ShortBuffer java.nio.ShortBuffer.get(short[] dst, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
相对批量 <i>get</i> 方法。

<p> 此方法将此缓冲区的 short 传输到给定的目标数组中。如果缓冲区中剩余的 short 少于满足请求所需的 short，即如果 <tt>length</tt>&#xA0;<tt>&gt;</tt>&#xA0;<tt>remaining()</tt>，则不传输 short 且抛出 {@link BufferUnderflowException}。

<p> 否则，此方法将此缓冲区中的 <tt>length</tt> 个 short 复制到给定数组中，从此缓冲区的当前位置和数组中的给定偏移量位置开始复制。然后此缓冲区的位置递增 <tt>length</tt>。

<p> 换句话说，调用此方法的形式为 <tt>src.get(dst,&#xA0;off,&#xA0;len)</tt>，效果与以下循环语句完全相同：

 <pre>
     for (int i = off; i &lt; off + len; i++)
         dst[i] = src.get(); </pre>

区别在于它首先检查此缓冲区中是否具有足够的 short，这样可能效率更高。 </p>

@param  dst   要写入 short 的数组

@param  offset 要写入的第一个 short 在数组中的偏移量；必须为非负且不大于 <tt>dst.length</tt>

@param  length 要写入给定数组中的 short 的最大数量；必须为非负且不大于 <tt>dst.length - offset</tt>

@return  此缓冲区

@throws  BufferUnderflowException 如果此缓冲区中的剩余 short 少于 <tt>length</tt>

@throws  IndexOutOfBoundsException 如果关于 <tt>offset</tt> 和 <tt>length</tt> 参数的前提不成立

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.nio.ShortBuffer java.nio.ShortBuffer.get(short[] dst)
<!-- END KEY -->
<!-- BEGIN DATA -->
相对批量 <i>get</i> 方法。

<p> 此方法将此缓冲区的 short 传输到给定的目标数组中。调用此方法的形式为 <tt>src.get(a)</tt>，该调用与以下调用完全相同：

 <pre>
     src.get(a, 0, a.length) </pre>

@return  此缓冲区

@throws  BufferUnderflowException 如果此缓冲区中的剩余 short 少于 <tt>length</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.nio.ShortBuffer java.nio.ShortBuffer.put(ShortBuffer src)
<!-- END KEY -->
<!-- BEGIN DATA -->
相对批量 <i>put</i> 方法<i>（可选操作）</i>。

<p> 此方法将给定源缓冲区中的剩余 short 传输到此缓冲区中。如果源缓冲区中的剩余 short 多于此缓冲区中的剩余 short 空间，即 <tt>src.remaining()</tt>&#xA0;<tt>&gt;</tt>&#xA0;<tt>remaining()</tt>，则不传输 short 且抛出 {@link BufferOverflowException}。

<p> 否则，此方法将给定缓冲区中的 <i>n</i>&#xA0;=&#xA0;<tt>src.remaining()</tt> 个 short 复制到此缓冲区中，从每个缓冲区的当前位置开始复制。然后这两个缓冲区的位置均递增 <i>n</i>。

<p> 换句话说，调用此方法的形式为 <tt>dst.put(src)</tt>，效果与以下循环语句完全相同：

 <pre>
     while (src.hasRemaining())
         dst.put(src.get()); </pre>

区别在于它首先检查此缓冲区中是否有足够空间，这样可能效率更高。 </p>

@param  src 要从中读取 short 的源缓冲区；不能为此缓冲区

@return  此缓冲区

@throws  BufferOverflowException 如果对于源缓冲区中剩余的 short，此缓冲区没有足够空间

@throws  IllegalArgumentException 如果源缓冲区是此缓冲区

@throws  ReadOnlyBufferException 如果此缓冲区是只读的

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.nio.ShortBuffer java.nio.ShortBuffer.put(short[] src, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
相对批量 <i>put</i> 方法<i>（可选操作）</i>。

<p> 此方法将给定源数组中的 short 传输到此缓冲区中。如果要从数组复制的 short 多于此缓冲区中的剩余 short 空间，即如果 <tt>length</tt>&#xA0;<tt>&gt;</tt>&#xA0;<tt>remaining()</tt>，则不传输 short 且抛出 {@link BufferOverflowException}。

<p> 否则，此方法将给定数组中的 <tt>length</tt> 个 short 复制到此缓冲区中，从数组中给定偏移量位置和此缓冲区的当前位置开始复制。然后此缓冲区的位置递增 <tt>length</tt>。

<p> 换句话说，调用此方法的形式为 <tt>dst.put(src,&#xA0;off,&#xA0;len)</tt>，效果与以下循环语句完全相同：

 <pre>
     for (int i = off; i &lt; off + len; i++)
         dst.put(a[i]); </pre>

区别在于它首先检查此缓冲区中是否有足够空间，这样可能效率更高。 </p>

@param  src 要从中读取 short 的数组

@param  offset 要读取的第一个 short 在数组中的偏移量；必须为非负且不大于 <tt>array.length</tt>

@param  length 要从给定数组读取的 short 数量；必须为非负且不大于 <tt>array.length - offset</tt>

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区没有足够空间

@throws  IndexOutOfBoundsException 如果关于 <tt>offset</tt> 和 <tt>length</tt> 参数的前提不成立

@throws  ReadOnlyBufferException 如果此缓冲区是只读的

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.nio.ShortBuffer java.nio.ShortBuffer.put(short[] src)
<!-- END KEY -->
<!-- BEGIN DATA -->
相对批量 <i>put</i> 方法<i>（可选操作）</i>。

<p> 此方法将给定源 short 数组中的所有内容传输到此缓冲区中。调用此方法的形式为 <tt>dst.put(a)</tt>，该调用与以下调用完全相同：

 <pre>
     dst.put(a, 0, a.length) </pre>

@return  此缓冲区

@throws  BufferOverflowException 如果此缓冲区没有足够空间

@throws  ReadOnlyBufferException 如果此缓冲区是只读的

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.nio.ShortBuffer.hasArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
判断是否可通过一个可访问的 short 数组实现此缓冲区。

<p> 如果此方法返回 <tt>true</tt>，则可以安全地调用 {@link #array() array} 和 {@link #arrayOffset() arrayOffset} 方法。
 </p>

@return  当且仅当存在实现此缓冲区的数组，并且此缓冲区不是只读缓冲区时，返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final short[] java.nio.ShortBuffer.array()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回实现此缓冲区的 short 数组<i>（可选操作）</i>。

<p> 此缓冲区的内容修改将导致返回的数组内容修改，反之亦然。

<p> 调用此方法之前要调用 {@link #hasArray hasArray} 方法，以确保此缓冲区具有可访问的底层实现数组。  </p>

@return  实现此缓冲区的数组

@throws  ReadOnlyBufferException 如果存在实现此缓冲区的数组，但缓冲区是只读的

@throws  UnsupportedOperationException 如果不存在某个可访问的数组实现此缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.nio.ShortBuffer.arrayOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此缓冲区的第一个元素在缓冲区的底层实现数组中的偏移量<i>（可选操作）</i>。

<p> 如果存在实现此缓冲区的数组，则缓冲区位置 <i>p</i> 对应于数组索引 <i>p</i>&#xA0;+&#xA0;<tt>arrayOffset()</tt>。

<p> 调用此方法之前要调用 {@link #hasArray hasArray} 方法，以确保此缓冲区具有可访问的底层实现数组。  </p>

@return  此缓冲区的第一个元素在缓冲区数组中的偏移量

@throws  ReadOnlyBufferException 如果存在实现此缓冲区的数组，但缓冲区是只读的

@throws  UnsupportedOperationException 如果不存在某个可访问的数组实现此缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ShortBuffer java.nio.ShortBuffer.compact()
<!-- END KEY -->
<!-- BEGIN DATA -->
压缩此缓冲区<i>（可选操作）</i>。

<p> 将缓冲区当前位置和界限之间的 short（如果有）复制到缓冲区的开始处。即将索引 <i>p</i>&#xA0;=&#xA0;<tt>position()</tt> 处的 short 复制到索引 0 处，将索引 <i>p</i>&#xA0;+&#xA0;1 处的 short 复制到索引 1 处，依此类推，直到将索引 <tt>limit()</tt>&#xA0;-&#xA0;1 处的 short 复制到索引 <i>n</i>&#xA0;=&#xA0;<tt>limit()</tt>&#xA0;-&#xA0;<tt>1</tt>&#xA0;-&#xA0;<i>p</i> 处。然后将缓冲区的位置设置为 <i>n+1</i>，并将其界限设置为其容量。如果已定义了标记，则丢弃它。

<p> 将缓冲区的位置设置为复制的 short 的数量，而不是零，以便调用此方法后可以紧接着调用另一个相对 <i>put</i> 方法。 </p>

@return  此缓冲区

@throws  ReadOnlyBufferException 如果此缓冲区是只读的

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.nio.ShortBuffer.isDirect()
<!-- END KEY -->
<!-- BEGIN DATA -->
判断此 short 缓冲区是否为直接的。 </p>

@return  当且仅当此缓冲区为直接时，返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.nio.ShortBuffer.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回总结了此缓冲区状态的字符串。  </p>

@return  一个总结字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.nio.ShortBuffer.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此缓冲区的当前哈希码。

<p> short 缓冲区的哈希码只取决于其剩余元素；即取决于从 <tt>position()</tt> 开始一直到（包括） <tt>limit()</tt>&#xA0;-&#xA0;<tt>1</tt> 处的元素。

<p> 因为缓冲区哈希码与内容有关，因此建议不要在哈希映射或类似数据结构中将缓冲区用作键，除非知道它们的内容不会发生更改。  </p>

@return  此缓冲区的当前哈希码

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.nio.ShortBuffer.equals(Object ob)
<!-- END KEY -->
<!-- BEGIN DATA -->
判断此缓冲区是否与另一个对象相同。

<p> 两个 short 缓冲区是相同的，当且仅当：

 <p><ol>

<li><p> 它们具有相同的元素类型，  </p></li>

<li><p> 它们具有相同数量的剩余元素，并且
   </p></li>

<li><p> 两个剩余元素序列（与它们的起始位置无关）逐点相同。
   </p></li>

 </ol>

<p> short 缓冲区与任何其他类型的对象都不同。  </p>

@param  ob  此缓冲区要比较的对象

@return  当且仅当此缓冲区与给定对象相同时，返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.nio.ShortBuffer.compareTo(ShortBuffer that)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此缓冲区与另一个缓冲区进行比较。

<p> 比较两个 short 缓冲区的方法是按字典顺序比较它们的剩余元素序列，而不考虑每个序列在其对应缓冲区中的起始位置。

<p> short 缓冲区不能与任何其他类型的对象进行比较。

@return  如果此缓冲区小于、等于或大于给定缓冲区，则相应返回负整数、零或正整数

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.nio.ByteOrder java.nio.ShortBuffer.order()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此缓冲区的字节顺序。

<p> 通过分配或通过包装现有 <tt>short</tt> 数组而创建的 short 缓冲区的字节顺序是底层硬件的{@link ByteOrder#nativeOrder </code>本机顺序<code>}。作为字节缓冲区的<a  href="ByteBuffer.html#views">视图</a>而创建的 short 缓冲区的字节顺序是创建视图时字节缓冲区的字节顺序。  </p>

@return  此缓冲区的字节顺序

<!-- END DATA -->
