<!-- BEGIN KEY -->
public final class java.net.NetworkInterface extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示一个由名称和分配给此接口的 IP 地址列表组成的网络接口。它用于标识加入多播组的本地接口。 

接口通常是按名称（如 &quot;le0&quot;）区分的。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.NetworkInterface.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此网络接口的名称。

@return 此网络接口的名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<java.net.InetAddress> java.net.NetworkInterface.getInetAddresses()
<!-- END KEY -->
<!-- BEGIN DATA -->
一个便捷方法，返回一个具有绑定到此网络接口全部或部分 InetAddress 的 Enumeration。
 <p>
如果存在安全管理器，则对每个 InetAddress 调用其 <code>checkConnect</code> 方法。只有 <code>checkConnect</code> 不抛出 SecurityException 的 InetAddress 才会在 Enumeration 中返回。
@return 一个 Enumeration 对象，具有绑定到此网络接口的全部或部分 InetAddress

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.net.InterfaceAddress> java.net.NetworkInterface.getInterfaceAddresses()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此网络接口的全部或部分 <code>InterfaceAddresses</code> 所组成的列表。
 <p>
如果存在安全管理器，则使用 InetAddress 对每个 InterfaceAddress 调用其 <code>checkConnect</code> 方法。只有 <code>checkConnect</code> 不抛出 SecurityException 的 InterfaceAddresses 才会在列表中返回。

 @return 一个 <code>List</code> 对象，具有此网络接口的全部或部分 InterfaceAddresss 
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<java.net.NetworkInterface> java.net.NetworkInterface.getSubInterfaces()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取具有连接到此网络接口的所有子接口（也称虚拟接口）的 Enumeration。
 <p>
 例如，eth0:1 是 eth0 的子接口。

 @return 一个 Enumeration 对象，具有此网络接口的所有子接口。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.NetworkInterface java.net.NetworkInterface.getParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此接口是子接口，则返回它的父 NetworkInterface；如果它是物理（非虚拟）接口或没有父接口，则返回 <code>null</code>。

 @return 此接口连接到的 <code>NetworkInterface</code>。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.NetworkInterface.getDisplayName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此网络接口的显示名称。显示名称是描述网络设备的可读字符串。

@return 此网络接口的显示名称；如果不存在可用的显示名称，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.net.NetworkInterface java.net.NetworkInterface.getByName(String name) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
搜索具有指定名称的网络接口。

@param   name 网络接口的名称。

@return  具有指定名称的 <tt>NetworkInterface</tt>；如果不存在具有指定名称的网络接口，则返回 <tt>null</tt>。

@throws	SocketException 如果发生 I/O 错误。

@throws  NullPointerException 如果指定的名称为 <tt>null</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.net.NetworkInterface java.net.NetworkInterface.getByInetAddress(InetAddress addr) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
一个便捷方法，搜索绑定了指定 Internet 协议 (IP) 地址的网络接口。
 <p>
如果指定的 IP 地址被绑定到多个网络接口，则返回哪个网络接口是不确定的。

@param   addr 用于搜索的 <tt>InetAddress</tt>。

@return  <tt>NetworkInterface</tt>；如果不存在具有指定 IP 地址的网络接口，则返回 <tt>null</tt>。

@throws  SocketException 如果发生 I/O 错误。 

@throws  NullPointerException 如果指定的地址为 <tt>null</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Enumeration<java.net.NetworkInterface> java.net.NetworkInterface.getNetworkInterfaces() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此机器上的所有接口。如果在此机器上找不到任何网络接口，则返回 null。
 
注：可以使用 getNetworkInterfaces()+getInetAddresses() 来获取此节点的所有 IP 地址。

@return 此机器上的 NetworkInterface 的 Enumeration
@exception  SocketException  如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.NetworkInterface.isUp() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回网络接口是否已经开启并运行。

 @return	如果接口已经开启并运行，则返回 <code>true</code>。
 @exception	SocketException 如果发生 I/O 错误。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.NetworkInterface.isLoopback() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回网络接口是否是回送接口。

 @return	如果接口是回送接口，则返回 <code>true</code>。
 @exception	SocketException 如果发生 I/O 错误。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.NetworkInterface.isPointToPoint() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回网络接口是否是点对点接口。典型的点对点接口是通过调制解调器进行 PPP 连接的。

 @return	如果接口是点对点接口，则返回 <code>true</code>。
 @exception	SocketException 如果发生 I/O 错误。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.NetworkInterface.supportsMulticast() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回网络接口是否支持多址广播。

 @return	如果接口支持多址广播，则返回 <code>true</code>。
 @exception	SocketException 如果发生 I/O 错误。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] java.net.NetworkInterface.getHardwareAddress() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果存在硬件地址并可以使用给定的当前权限访问，则返回该硬件地址（通常是 MAC）。

 @return	包含硬件地址的 byte 数组；如果地址不存在或不可访问，则返回 <code>null</code>。
 @exception	SocketException 如果发生 I/O 错误。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.net.NetworkInterface.getMTU() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回此接口的最大传输单元（Maximum Transmission Unit，MTU）。
 
 @return 该接口的 MTU 值。
 @exception	SocketException 如果发生 I/O 错误。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.NetworkInterface.isVirtual()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此接口是否是虚拟接口（也称为子接口）。
在某些系统上，虚拟接口作为物理接口的子接口创建，并给予不同的设置（如地址或 MTU）。通常，接口的名称将是父接口的名称加上冒号 (:)，再加上标识该子接口的编号，因为一个物理接口可以存在多个虚拟接口。

 @return 如果此接口是虚拟接口，则返回 <code>true</code>。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.NetworkInterface.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此对象与指定对象比较。当且仅当参数不为 <code>null</code>，并且它表示与此对象相同的 NetworkInterface 时，结果才为 <code>true</code>。
 <p>
如果 <code>NetworkInterface</code> 两个实例的名称和地址都相同，则它们表示相同的 NetworkInterface。

@param obj 要与之比较的对象。
@return  如果对象相同，则返回 <code>true</code>；否则，返回 <code>false</code>。
@see     java.net.InetAddress#getAddress()

<!-- END DATA -->
