<!-- BEGIN KEY -->
public abstract class java.net.SecureCacheResponse extends java.net.CacheResponse
<!-- END KEY -->
<!-- BEGIN DATA -->
表示最初通过安全方法（如 TLS）获得的缓存响应。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String java.net.SecureCacheResponse.getCipherSuite()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回正在获得了网络资源的初始连接上使用的密码套件。

@return 表示密码套件的字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.List<java.security.cert.Certificate> java.net.SecureCacheResponse.getLocalCertificateChain()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在获得了网络资源的初始连接的联络期间发送到服务器的证书链。注：仅当使用基于证书的密码套件时此方法才有用。

@return 表示发送到服务器的证书链的不可变证书列表。如果没有发送任何证书链，则返回 null。
@see #getLocalPrincipal()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.List<java.security.cert.Certificate> java.net.SecureCacheResponse.getServerCertificateChain() throws javax.net.ssl.SSLPeerUnverifiedException
<!-- END KEY -->
<!-- BEGIN DATA -->
从缓存返回服务器的证书链，该证书链是作为在获得了网络资源的初始连接中定义会话的一部分建立的。注：仅当使用基于证书的密码套件时才可以使用此方法；将它与非基于证书的密码套件（如 Kerberos）一起使用将抛出 SSLPeerUnverifiedException。

@return 表示服务器的证书链的不可变证书列表。
@throws SSLPeerUnverifiedException 如果没有验证同位体。
@see #getPeerPrincipal()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.Principal java.net.SecureCacheResponse.getPeerPrincipal() throws javax.net.ssl.SSLPeerUnverifiedException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回服务器的主体，该主体是作为在获得了网络资源的初始连接期间定义会话的一部分建立的。

@return 服务器的主体。返回基于 X509 的密码套件的最终实体证书的 X500Principal，以及 Kerberos 的密码套件的 KerberosPrincipal。

@throws SSLPeerUnverifiedException 如果没有验证同位体。

@see #getServerCertificateChain()
@see #getLocalPrincipal()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.Principal java.net.SecureCacheResponse.getLocalPrincipal()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在获得了网络资源的初始连接中的联络期间发送到服务器的主体。

@return 发送到服务器的主体。返回基于 X509 的密码套件的最终实体证书的 X500Principal，以及 Kerberos 的密码套件的 KerberosPrincipal。如果没有发送任何主体，则返回 null。

@see #getLocalCertificateChain()
@see #getPeerPrincipal()

<!-- END DATA -->
