<!-- BEGIN KEY -->
public class java.net.Proxy extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示代理设置，通常为类型（http、socks）和套接字地址。<code>Proxy</code> 是不可变对象。

@version 1.3, 08/09/03
@see     java.net.ProxySelector
@author Yingxian Wang
@author Jean-Christophe Collet
@since   1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.net.Proxy java.net.Proxy.NO_PROXY
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 <code>DIRECT</code> 连接的代理设置，主要通知协议处理程序不使用任何代理。例如，用于创建绕过所有其他全局代理设置（如 SOCKS）的套接字：
 <P>
 <code>Socket s = new Socket(Proxy.NO_PROXY);</code><br>
 <P>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.Proxy(Proxy.Type type, SocketAddress sa)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建表示 PROXY 连接的条目。某些组合是非法的。例如，对于类型 Http 和 Socks，<b>必须</b>提供 SocketAddress。 
 <P>
使用 <code>Proxy.NO_PROXY</code> 常量表示直接连接。

@param type 代理的 <code>Type</code>
@param sa 该代理的 <code>SocketAddress</code>
@throws IllegalArgumentException 当类型和地址不兼容时

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.Proxy.Type java.net.Proxy.type()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回代理类型。

@return 表示代理类型的类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.SocketAddress java.net.Proxy.address()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回代理的套接字地址，如果其为直接连接，则返回 <code>null</code>。

@return 表示代理的套接字端点的 <code>SocketAddress</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.Proxy.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造此代理的字符串表示形式。如果其类型不为 <code>DIRECT</code>，那么此 String 是通过在其类型上调用 toString()，并连接 "@" 和从其地址产生的 toString() 构造。

@return  此对象的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.net.Proxy.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此对象与指定对象比较。当且仅当参数不为 <code>null</code>，并且它表示与此对象相同的代理时，结果才为 <code>true</code>。
 <p>
如果 <code>Proxy</code> 的两个实例的 SocketAddress 和类型都相等，则它们表示同一个地址。

@param obj 要与之比较的对象。
@return  如果对象相同，则返回 <code>true</code>；否则，返回 <code>false</code>。
@see java.net.InetSocketAddress#equals(java.lang.Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.net.Proxy.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此代理的哈希码。

@return  此代理的哈希码值。

<!-- END DATA -->
