<!-- BEGIN KEY -->
public abstract class java.net.SocketImpl extends java.lang.Object implements java.net.SocketOptions
<!-- END KEY -->
<!-- BEGIN DATA -->
抽象类 <code>SocketImpl</code> 是实际实现套接字的所有类的通用超类。创建客户端和服务器套接字都可以使用它。 
 <p>
&ldquo;普通&rdquo;套接字严格按描述实现这些方法，无需尝试通过防火墙或代理。 

@author  unascribed
@version 1.42, 03/25/04
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.io.FileDescriptor java.net.SocketImpl.fd
<!-- END KEY -->
<!-- BEGIN DATA -->
此套接字的文件描述符对象。 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.net.InetAddress java.net.SocketImpl.address
<!-- END KEY -->
<!-- BEGIN DATA -->
此套接字的远程端点的 IP 地址。 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.net.SocketImpl.port
<!-- END KEY -->
<!-- BEGIN DATA -->
此套接字连接到的远程主机的端口号。 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.net.SocketImpl.localport
<!-- END KEY -->
<!-- BEGIN DATA -->
此套接字连接到的本地端口号。 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.SocketImpl.create(boolean stream) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个流或数据报套接字。 

@param      stream    如果为 <code>true</code>，则创建流套接字；否则创建数据报套接字。
@exception  IOException  如果创建套接字时发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.SocketImpl.connect(String host, int port) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此套接字连接到指定主机上的指定端口。 

@param      host   远程主机名。
@param   port     端口号。
@exception  IOException  如果连接到远程主机时发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.SocketImpl.connect(InetAddress address, int port) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此套接字连接到指定主机上的指定端口号。

@param      address   远程主机的 IP 地址。
@param   port     端口号。
@exception  IOException  如果尝试连接时发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.SocketImpl.connect(SocketAddress address, int timeout) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此套接字连接到指定主机上的指定端口号。超时值零被解释为无限超时。在建立连接或者发生错误之前，连接一直处于阻塞状态。

@param      address   远程主机的 Socket 地址。
@param	  timeout  以毫秒为单位的超时值；或者为零，表示没有超时值。
@exception  IOException  如果尝试连接时发生 I/O 错误。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.SocketImpl.bind(InetAddress host, int port) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此套接字绑定到指定的本地 IP 地址和端口号。

@param      host   属于本地接口的 IP 地址。
@param   port     端口号。
@exception  IOException  如果绑定此套接字时发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.SocketImpl.listen(int backlog) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将传入连接指示（连接请求）的最大队列长度设置为 <code>count</code> 参数。如果队列满时收到连接指示，则拒绝该连接。 

@param      backlog  队列的最大长度。
@exception  IOException  如果创建队列时发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.SocketImpl.accept(SocketImpl s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
接受连接。 

@param      s   接受的连接。
@exception  IOException  如果接受连接时发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract java.io.InputStream java.net.SocketImpl.getInputStream() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此套接字的输入流。

@return     从此套接字读取内容的流。
@exception  IOException  如果创建输入流时发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract java.io.OutputStream java.net.SocketImpl.getOutputStream() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此套接字的输出流。

@return     写入此套接字的输出流。
@exception  IOException  如果创建输出流时发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract int java.net.SocketImpl.available() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回可以不受阻塞地从此套接字中读取的字节数。

@return     不受阻塞地从此套接字读取的字节数。
@exception  IOException  如果确定可用字节数时发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.SocketImpl.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此套接字。 

@exception  IOException  如果关闭此套接字时发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.net.SocketImpl.shutdownInput() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此套接字的输入流置于&ldquo;流的末尾&rdquo;。发送到此套接字的任何数据都会被接收到然后悄悄被丢弃。

如果在套接字上调用 shutdownInput() 后从套接字输入流读取内容，则流将返回 EOF（文件结束符）。

@exception  IOException  如果关闭此套接字时发生 I/O 错误。
@see java.net.Socket#shutdownOutput()
@see java.net.Socket#close()
@see java.net.Socket#setSoLinger(boolean, int)
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.net.SocketImpl.shutdownOutput() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
禁用此套接字的输出流。对于 TCP 套接字，任何以前写入的数据都将被发送，并且后跟 TCP 的正常连接终止序列。

如果在套接字上调用 shutdownOutput() 后写入套接字输出流，则该流将抛出 IOException。

@exception  IOException  如果关闭此套接字时发生 I/O 错误。
@see java.net.Socket#shutdownInput()
@see java.net.Socket#close()
@see java.net.Socket#setSoLinger(boolean, int)
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.io.FileDescriptor java.net.SocketImpl.getFileDescriptor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此套接字的 <code>fd</code> 字段的值。

@return  此套接字的 <code>fd</code> 字段的值。
@see     java.net.SocketImpl#fd

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.net.InetAddress java.net.SocketImpl.getInetAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此套接字的 <code>address</code> 字段的值。

@return  此套接字的 <code>address</code> 字段的值。
@see     java.net.SocketImpl#address

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.net.SocketImpl.getPort()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此套接字的 <code>port</code> 字段的值。

@return  此套接字的 <code>port</code> 字段的值。
@see     java.net.SocketImpl#port

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.net.SocketImpl.supportsUrgentData()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 SocketImpl 是否支持发送紧急数据。默认情况下返回 false，除非在子类中重写了该方法。

@return  如果紧急数据受支持，则返回 true
@see     java.net.SocketImpl#address
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.SocketImpl.sendUrgentData(int data) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
在套接字上发送一个紧急数据字节。要发送的字节是参数的八个低位
@param data 要发送的数据的字节
@exception IOException 如果在发送数据时发生错误。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.net.SocketImpl.getLocalPort()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此套接字的 <code>localport</code> 字段的值。

@return  此套接字的 <code>localport</code> 字段的值。
@see     java.net.SocketImpl#localport

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.SocketImpl.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>String</code> 的形式返回此套接字的地址和端口。

@return  此套接字的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.net.SocketImpl.setPerformancePreferences(int connectionTime, int latency, int bandwidth)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此套接字的性能偏好 (performance preferences)。

<p> 默认情况下套接字使用 TCP/IP 协议。有些实现可能提供与 TCP/IP 具有不同性能特征的替换协议。此方法允许应用程序在实现从可用协议中作出选择时表达它自己关于应该如何进行折衷的偏好。

<p> 性能偏好由三个整数描述，它们的值分别指示短连接时间、低延迟和高带宽的相对重要性。这些整数的绝对值没有意义；为了选择协议，需要简单比较它们的值，较大的值指示更强的偏好。负值表示的优先级低于正值。例如，如果应用程序相对于低延迟和高带宽更偏好短连接时间，则其可以使用值 <tt>(1, 0, 0)</tt> 调用此方法。如果应用程序相对于低延迟更偏好高带宽，而相对于短连接时间更偏好低延迟，则其可以使用值 <tt>(0, 1, 2)</tt> 调用此方法。

默认情况下此方法不执行任何操作，除非在子类中重写该方法。

@param  connectionTime 表达短连接时间的相对重要性的 <tt>int</tt>

@param  latency 表达低延迟的相对重要性的 <tt>int</tt>

@param  bandwidth 表达高带宽的相对重要性的 <tt>int</tt>
  
@since 1.5

<!-- END DATA -->
