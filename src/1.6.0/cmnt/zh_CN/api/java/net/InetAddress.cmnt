<!-- BEGIN KEY -->
public class java.net.InetAddress extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示互联网协议 (IP) 地址。

<p> IP 地址是 IP 使用的 32 位或 128 位无符号数字，它是一种低级协议，UDP 和 TCP 协议都是在它的基础上构建的。IP 地址的体系结构是由 <a
 href="http://www.ietf.org/rfc/rfc790.txt"><i>RFC&nbsp;790:Assigned Numbers</i></a>、<a
 href="http://www.ietf.org/rfc/rfc1918.txt"> <i>RFC&nbsp;1918:Address Allocation for Private Internets</i></a>、<a
 href="http://www.ietf.org/rfc/rfc2365.txt"><i>RFC&nbsp;2365:Administratively Scoped IP Multicast</i></a> 和 <a
 href="http://www.ietf.org/rfc/rfc2373.txt"><i>RFC&nbsp;2373:IP Version 6 Addressing Architecture</i></a> 定义的。InetAddress 的实例包含 IP 地址，还可能包含相应的主机名（取决于它是否用主机名构造或者是否已执行反向主机名解析）。

<h4> 地址类型 </h4>

 <blockquote><table cellspacing=2 summary="Description of unicast and multicast address types">
<tr><th valign=top><i>单播</i></th>
<td>单个接口的标识符。发送到单播地址的数据包被交付给由该地址标识的接口。

<p> 多播地址：也称为 anylocal 地址或通配符地址。一定不能将其分配给任何节点。它指示缺少地址。它的一个使用示例是可以作为绑定的目标，这允许服务器在服务器主机有多个接口的情况下接收任何接口上的客户端连接。

<p> <i>未指定</i> 地址一定不能用作 IP 数据包的目标地址。
        
<p> <i>回送</i> 地址：它是分配给回送接口的地址。发送到此 IP 地址的任何内容都将返回并作为本地主机上的 IP 输入。此地址常常在测试客户机时使用。</td></tr>
<tr><th valign=top><i>多播</i></th>
<td>一组接口（通常属于不同的节点）的标识符。发送到多播地址的数据包被交付给由该地址标识的所有接口。</td></tr>
 </table></blockquote>

<h4> IP 地址范围 </h4>

<p> <i>链接本地</i> 地址设计用于在单个链接上寻址以解决诸如自动地址配置、邻居发现 (neighbor discovery) 或没有路由器时的问题。 

<p> <i>站点本地</i> 地址设计用于在不需要全局前缀时站点内部寻址。

<p> <i>全局</i> 地址在 Internet 中是唯一的。

<h4> IP 地址的文本表示形式 </h4>
 
IP 地址的文本表示形式是特定于地址系列的。

 <p>

有关 IPv4 地址格式，请参阅 <A
 HREF="Inet4Address.html#format">Inet4Address#format</A>，有关 IPv6 地址格式，请参阅 <A
 HREF="Inet6Address.html#format">Inet6Address#format</A>。

<h4> 主机名解析 </h4>
 
主机名到 IP 地址的<i>解析</i> 通过使用本地机器配置信息和网络命名服务（如域名系统（Domain Name System，DNS）和网络信息服务（Network Information Service，NIS））来实现。要使用的特定命名服务默认情况下是本地机器配置的那个。对于任何主机名称，都返回其相应的 IP 地址。

<p> <i>反向名称解析</i> 意味着对于任何 IP 地址，都返回与 IP 地址关联的主机。

<p> InetAddress 类提供将主机名解析为其 IP 地址（或反之）的方法。

<h4> InetAddress 缓存 </h4>

InetAddress 类具有一个缓存，用于存储成功及不成功的主机名解析。

<p> 默认情况下，当为了防止 DNS 哄骗攻击安装了安全管理器时，正主机名解析的结果会永远缓存。当未安装安全管理器时，默认行为将缓存一段有限（与实现相关）时间的条目。不成功主机名解析的结果缓存非常短的时间（10 秒）以提高性能。

<p> 如果不需要默认行为，则可以将 Java 安全属性设置为另外的 Time-to-live (TTL) 值来进行正缓存。类似地，系统管理员在需要时可以配置另外的负缓存 TTL 值。

<p> 两个 Java 安全属性控制着用于正负主机名解析缓存的 TTL 值：
 
 <blockquote>
 <dl>
<dt><b>networkaddress.cache.ttl</b></dt>
<dd>指示从名称服务进行成功名称查找的缓存策略。该值被指定为整数，指示缓存成功查找的秒数。默认设置将在某个特定于实现的时间内缓存。
 <p>
值 -1 指示&ldquo;永远缓存&rdquo;。
 </dd>
 <p>
<dt><b>networkaddress.cache.negative.ttl</b>（默认值：10）</dt>
<dd>指示从名称服务进行不成功名称查找的缓存策略。该值被指定为整数，指示缓存不成功查找故障的秒数。
 <p>
值 0 指示&ldquo;永远不缓存&rdquo;。值 -1 指示&ldquo;永远缓存&rdquo;。
 </dd>
 </dl>
 </blockquote>

@author  Chris Warth
@version 1.115, 07/26/06
@see     java.net.InetAddress#getByAddress(byte[])
@see     java.net.InetAddress#getByAddress(java.lang.String, byte[])
@see     java.net.InetAddress#getAllByName(java.lang.String)
@see     java.net.InetAddress#getByName(java.lang.String)
@see     java.net.InetAddress#getLocalHost()
@since JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String java.net.InetAddress.hostName
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.net.InetAddress.address
<!-- END KEY -->
<!-- BEGIN DATA -->
保存 32 位的 IPv4 地址。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.net.InetAddress.family
<!-- END KEY -->
<!-- BEGIN DATA -->
指定地址系统类型，例如，'1' 代表 IPv4 地址，'2' 代表 IPv6 地址。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.InetAddress.isMulticastAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查 InetAddress 是否是 IP 多播地址的实用例行程序。
@return 指示 InetAddress 是否是 IP 多播地址的 <code>boolean</code> 值
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.InetAddress.isAnyLocalAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查 InetAddress 是否是通配符地址的实用例行程序。
@return 指示 Inetaddress 是否是通配符地址的 <code>boolean</code> 值
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.InetAddress.isLoopbackAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查 InetAddress 是否是回送地址的实用例行程序。 

@return 指示 InetAddress 是否是回送地址的 <code>boolean</code> 值；否则返回 false。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.InetAddress.isLinkLocalAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查 InetAddress 是否是链接本地地址的实用例行程序。 

@return 指示 InetAddress 是否是本地链接地址的 <code>boolean</code> 值；如果地址不是链接本地单播地址，则返回 false。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.InetAddress.isSiteLocalAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查 InetAddress 是否是站点本地地址的实用例行程序。 

@return 指示 InetAddress 是否是站点本地地址的 <code>boolean</code> 值；如果地址不是站点本地单播地址，则返回 false。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.InetAddress.isMCGlobal()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查多播地址是否具有全局域的实用例行程序。

@return 指示地址是否是全局域多播地址的 <code>boolean</code> 值；如果它不是全局域或多播地址，则返回 false
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.InetAddress.isMCNodeLocal()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查多播地址是否具有节点范围的实用例行程序。

@return 指示地址是否是节点本地范围多播地址的 <code>boolean</code> 值；如果它不是节点本地范围或多播地址，则返回 false
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.InetAddress.isMCLinkLocal()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查多播地址是否具有链接范围的实用例行程序。

@return 指示地址是否是链接本地范围多播地址的 <code>boolean</code> 值；如果它不是链接本地范围或多播地址，则返回 false
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.InetAddress.isMCSiteLocal()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查多播地址是否具有站点范围的实用例行程序。

@return 指示地址是否是站点本地范围多播地址的 <code>boolean</code>；如果它不是站点本地范围或多播地址，则返回 false
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.InetAddress.isMCOrgLocal()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查多播地址是否具有组织范围的实用例行程序。

@return 指示地址是否是组织本地范围多播地址的 <code>boolean</code> 值；如果它不是组织本地范围或多播地址，则返回 false
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.InetAddress.isReachable(int timeout) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
测试是否可以达到该地址。实现尽最大努力试图到达主机，但防火墙和服务器配置可能阻塞请求，使其在某些特定的端口可以访问时处于不可到达状态。如果可以获得权限，则典型实现将使用 ICMP ECHO REQUEST；否则它将试图在目标主机的端口 7 (Echo) 上建立 TCP 连接。
 <p>
超时值（以毫秒为单位）指示尝试应该使用的最大时间量。如果在获取应答前操作超时了，则视为主机不可到达。负值将导致抛出 IllegalArgumentException。

@param	timeout	调用中止前的时间（以毫秒为单位）
@return 指示地址是否可到达的 <code>boolean</code> 值。
@throws IOException 如果发生网络错误
@throws  IllegalArgumentException 如果 <code>timeout</code> 为负。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.InetAddress.isReachable(NetworkInterface netif, int ttl, int timeout) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
测试是否可以达到该地址。实现尽最大努力试图到达主机，但防火墙和服务器配置可能阻塞请求，使其在某些特定的端口可以访问时处于不可到达状态。如果可以获得权限，则典型实现将使用 ICMP ECHO REQUEST；否则它将试图在目标主机的端口 7 (Echo) 上建立 TCP 连接。
 <p>
<code>network interface</code> 和 <code>ttl</code> 参数允许调用方指定测试将遍历的网络接口和数据包将遍历的最大跳数。<code>ttl</code> 为负值将导致抛出 IllegalArgumentException。
 <p>
超时值（以毫秒为单位）指示尝试应该使用的最大时间量。如果在获取应答前操作超时了，则视为主机不可到达。负值将导致抛出 IllegalArgumentException。

@param	netif   将用于完成测试的 NetworkInterface；或者用于任何接口的 null
@param	ttl	要尝试的最大跳数或默认值 0
@param	timeout	调用中止前的时间（以毫秒为单位）
@throws  IllegalArgumentException 如果 <code>timeout</code> 或 <code>ttl</code> 为负。
@return 指示地址是否可到达的 <code>boolean</code> 值。
@throws IOException 如果发生网络错误
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.InetAddress.getHostName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 IP 地址的主机名。

<p>如果此 InetAddress 是用主机名创建的，则记忆并返回主机名；否则，将执行反向名称查找并基于系统配置的名称查找服务返回结果。如果需要查找名称服务，则调用 {@link #getCanonicalHostName() getCanonicalHostName}。

<p>如果有安全管理器，则首先使用主机名和 <code>-1</code> 作为参数来调用其 <code>checkConnect</code> 方法，以查看是否允许该操作。如果不允许该操作，则其返回 IP 地址的文本表示形式。

@return  此 IP 地址的主机名；如果安全检查不允许操作，则返回 IP 地址的文本表示形式。
 
@see InetAddress#getCanonicalHostName
@see SecurityManager#checkConnect

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.InetAddress.getCanonicalHostName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 IP 地址的完全限定域名。最大努力方法，意味着根据底层系统配置可能不能返回 FQDN。

<p>如果有安全管理器，则此方法首先使用主机名和 <code>-1</code> 作为参数调用其 <code>checkConnect</code> 方法，来查看是否允许调用代码知道此 IP 地址的主机名（即是否允许连接到该主机）。如果不允许该操作，则其返回 IP 地址的文本表示形式。
 
@return  此 IP 地址的安全限定域名；如果安全检查不允许操作，则返回 IP 地址的文本表示形式。

@see SecurityManager#checkConnect

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] java.net.InetAddress.getAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>InetAddress</code> 对象的原始 IP 地址。结果按网络字节顺序：地址的高位字节位于 <code>getAddress()[0]</code> 中。

@return 此对象的原始 IP 地址。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.InetAddress.getHostAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 IP 地址字符串（以文本表现形式）。

@return  字符串格式的原始 IP 地址。
@since   JDK1.0.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.net.InetAddress.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 IP 地址的哈希码。

@return 此 IP 地址的哈希码值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.InetAddress.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此对象与指定对象比较。当且仅当参数不为 <code>null</code>，并且它表示与此对象相同的 IP 地址时，结果才为 <code>true</code>。
 <p>
如果 <code>getAddress</code> 对两个 <code>InetAddress</code> 返回的 byte 数组长度相同并且 byte 数组的每个数组元素也都相同，则这两个 <code>InetAddress</code> 的实例表示相同的 IP 地址。

@param obj 要与之比较的对象。
@return  如果对象相同，则返回 <code>true</code>；否则，返回 <code>false</code>。
@see     java.net.InetAddress#getAddress()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.InetAddress.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 IP 地址转换为 <code>String</code>。返回的字符串具有以下形式：主机名/字面值 IP 地址。

如果主机名是未解析的，则不执行反向名称服务查找。主机名部分将由一个空字符串表示。

@return  此 IP 地址的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.net.InetAddress java.net.InetAddress.getByAddress(String host, byte[] addr) throws java.net.UnknownHostException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据提供的主机名和 IP 地址创建 InetAddress。不检查名称服务的地址有效性。 

<p> 主机名可以是机器名（如 &quot;<code>java.sun.com</code>&quot;），也可以是其 IP 地址的文本表示形式。
<p> 也不在主机名上执行有效性检查。

<p> 如果 addr 指定 IPv4 地址，则返回 Inet4Address 的实例；否则将返回 Inet6Address 的实例。

<p> IPv4 地址 byte 数组的长度必须为 4 个字节，IPv6  byte 数组的长度必须为 16 个字节

@param host 指定主机
@param addr 网络字节顺序的原始 IP 地址
@return 根据原始 IP 地址创建的 InetAddress 对象。
@exception  UnknownHostException  如果 IP 地址的长度非法
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.net.InetAddress java.net.InetAddress.getByName(String host) throws java.net.UnknownHostException
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定主机名的情况下确定主机的 IP 地址。

<p> 主机名可以是机器名（如 &quot;<code>java.sun.com</code>&quot;），也可以是其 IP 地址的文本表示形式。如果提供字面值 IP 地址，则仅检查地址格式的有效性。

<p> 对于以字面值 IPv6 地址指定的 <code>host</code>，在 RFC 2732 中定义的形式或在 RFC 2373 中定义的字面值 IPv6 地址格式都可以接受。IPv6 范围地址也受支持。有关 IPv6 范围地址的描述，请参见<a href="Inet6Address.html#scoped">这里</a>。

<p> 如果主机为 <tt>null</tt>，则返回表示回送接口地址的 <tt>InetAddress</tt>。请参阅 <a href="http://www.ietf.org/rfc/rfc3330.txt">RFC&nbsp;3330</a> 的第 2 节和 <a href="http://www.ietf.org/rfc/rfc2373.txt">RFC&nbsp;2373</a> 的第 2.5.3 节。 </p>

@param      host   指定的主机，或 <code>null</code>。
@return     给定主机名的 IP 地址。
@exception  UnknownHostException  如果找不到 <code>host</code> 的 IP 地址，或者 scope_id 是为全局 IPv6 地址指定的。
@exception  SecurityException 如果安全管理器存在并且其 checkConnect 方法不允许进行该操作

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.net.InetAddress[] java.net.InetAddress.getAllByName(String host) throws java.net.UnknownHostException
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定主机名的情况下，根据系统上配置的名称服务返回其 IP 地址所组成的数组。
 
<p> 主机名可以是机器名（如 &quot;<code>java.sun.com</code>&quot;），也可以是其 IP 地址的文本表示形式。如果提供字面值 IP 地址，则仅检查地址格式的有效性。

<p> 对于以<i>字面值 IPv6 地址</i> 指定的 <code>host</code>，在 RFC 2732 中定义的形式或在 RFC 2373 中定义的字面值 IPv6 地址格式都可以接受。字面值 IPv6 地址还可以通过追加范围时区标识符或 scope_id 来限定。scope_id 的语法和用法在<a href="Inet6Address.html#scoped">这里</a>描述。
<p> 如果主机为 <tt>null</tt>，则返回表示回送接口地址的 <tt>InetAddress</tt>。请参阅 <a href="http://www.ietf.org/rfc/rfc3330.txt">RFC&#xA0;3330</a> 的第 2 节和 <a href="http://www.ietf.org/rfc/rfc2373.txt">RFC&#xA0;2373</a> 的第 2.5.3 节。 </p>

<p> 如果有安全管理器，并且 <code>host</code> 非 null，<code>host.length() </code> 不等于零，则使用主机名和 <code>-1</code> 作为参数调用安全管理器的 <code>checkConnect</code> 方法，来查看是否允许该操作。

@param      host   主机名，或 <code>null</code>。
@return     给定主机名的所有 IP 地址所组成的数组。
 
@exception  UnknownHostException  如果找不到 <code>host</code> 的 IP 地址，或者 scope_id 是为全局 IPv6 地址指定的。
@exception  SecurityException 如果安全管理器存在并且其 <code>checkConnect</code> 方法不允许进行该操作。
 
@see SecurityManager#checkConnect

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.net.InetAddress java.net.InetAddress.getByAddress(byte[] addr) throws java.net.UnknownHostException
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定原始 IP 地址的情况下，返回 <code>InetAddress</code> 对象。参数按网络字节顺序：地址的高位字节位于 <code>getAddress()[0]</code> 中。

<p> 此方法不会阻塞，即不执行任何反向名称服务查找操作。

<p> IPv4 地址 byte 数组的长度必须为 4 个字节，IPv6 byte 数组的长度必须为 16 个字节

@param addr 网络字节顺序的原始 IP 地址
@return 根据原始 IP 地址创建的 InetAddress 对象。
@exception  UnknownHostException  如果 IP 地址的长度非法
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.net.InetAddress java.net.InetAddress.getLocalHost() throws java.net.UnknownHostException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回本地主机。

<p>如果有安全管理器，则使用本地主机名和 <code>-1</code> 作为参数来调用其 <code>checkConnect</code> 方法，以查看是否允许该操作。如果不允许该操作，则返回表示回送地址的 InetAddress。

@return     本地主机的 IP 地址。
 
@exception  UnknownHostException  如果找不到 <code>host</code> 的任何 IP 地址。
 
@see SecurityManager#checkConnect

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Object java.net.InetAddress.readResolve() throws java.io.ObjectStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
用 Inet4Address 对象取代反序列化对象。

@return 要反序列化的对象的替换对象。

@throws ObjectStreamException 如果无法创建取代此对象的新对象

<!-- END DATA -->
