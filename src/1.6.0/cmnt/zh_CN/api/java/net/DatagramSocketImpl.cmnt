<!-- BEGIN KEY -->
public abstract class java.net.DatagramSocketImpl extends java.lang.Object implements java.net.SocketOptions
<!-- END KEY -->
<!-- BEGIN DATA -->
数据报和多播套接字实现的抽象基类。
@author Pavani Diwanji
@since  JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.net.DatagramSocketImpl.localPort
<!-- END KEY -->
<!-- BEGIN DATA -->
本地端口号。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.io.FileDescriptor java.net.DatagramSocketImpl.fd
<!-- END KEY -->
<!-- BEGIN DATA -->
文件描述符对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.DatagramSocketImpl.create() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建数据报套接字。
@exception SocketException  如果底层协议出现错误，例如 TCP 错误。 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.DatagramSocketImpl.bind(int lport, InetAddress laddr) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
将数据报套接字绑定到本地端口和地址。
@param lport 本地端口 
@param laddr 本地地址
@exception SocketException 如果底层协议出现错误，例如 TCP 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.DatagramSocketImpl.send(DatagramPacket p) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
发送数据报包。包包含数据和要将包发往的目的地址。
@param p 将发送的包。
@exception IOException 如果发送数据报包时出现 I/O 异常。
@exception  PortUnreachableException  套接字连接到当前不可达的目标时可能抛出。注意，不能保证一定抛出该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.net.DatagramSocketImpl.connect(InetAddress address, int port) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
将数据报套接字连接到远程目标。此方法使本地套接字和远程地址相关联，从而数据报只能被发送到此目标并只能从此目标被接收。可以重写此方法来调用本机系统连接。 

<p>如果套接字要连接的远程目标不存在或不可到达，并且收到了该地址的目标不可达 ICMP 包，那么后续发送和接收的调用可能会抛出 PortUnreachableException。注意，不能保证一定抛出该异常。
@param address 要连接的远程 InetAddress
@param port 远程端口号
@exception   SocketException 套接字不能连接到远程目标时可能抛出
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.net.DatagramSocketImpl.disconnect()
<!-- END KEY -->
<!-- BEGIN DATA -->
断开数据报套接字和远程目标的连接。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract int java.net.DatagramSocketImpl.peek(InetAddress i) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
查看包来自哪里。将指定的 <code>InetAddress</code> 更新为发送包的地址。
@param i InetAddress 对象
@return 发送包的端口号。
@exception IOException 如果发生 /O 异常
@exception  PortUnreachableException 套接字连接到当前不可到达的目标时可能抛出。注意，不能保证一定抛出该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract int java.net.DatagramSocketImpl.peekData(DatagramPacket p) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
查看包来自哪里。数据被复制到指定的 <code>DatagramPacket</code>。数据返回，但不用掉，以便后续 peekData/receive 操作能看到相同的数据。
@param p 收到的包。
@return 发送包的端口号。
@exception IOException 如果出现 /O 异常
@exception  PortUnreachableException 套接字连接到当前不可到达的目标时可能抛出。注意，不能保证一定抛出该异常。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.DatagramSocketImpl.receive(DatagramPacket p) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
接收数据报包。
@param p 收到的包。
@exception IOException 如果接收数据报包时发生 I/O 异常。
@exception  PortUnreachableException 套接字连接到当前不可达的目标时可能抛出。注意，不能保证一定抛出该异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.DatagramSocketImpl.setTTL(byte ttl) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 TTL（生存时间）选项。
@param ttl 指定 TTL 值的 byte。

@deprecated 使用 setTimeToLive 代替。
@exception IOException 如果设置生存时间选项时发生 I/O 异常。
@see #getTTL()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract byte java.net.DatagramSocketImpl.getTTL() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 TTL（生存时间）选项。

@exception IOException 如果获取生存时间选项时发生 I/O 异常
@deprecated 使用 getTimeToLive 代替。
@return 表示 TTL 值的字节
@see #setTTL(byte)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.DatagramSocketImpl.setTimeToLive(int ttl) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 TTL （生存时间）选项。
@param ttl 指定生存时间的 <tt>int</tt> 值
@exception IOException 如果设置生存时间选项时发生 I/O 异常。
@see #getTimeToLive()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract int java.net.DatagramSocketImpl.getTimeToLive() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 TTL （生存时间）选项。
@exception IOException 如果获取生存时间选项时发生 I/O 异常。
@return 表示生存时间的 <tt>int</tt> 值
@see #setTimeToLive(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.DatagramSocketImpl.join(InetAddress inetaddr) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
加入多播组。
@param inetaddr 要加入的多播地址。
@exception IOException 如果加入多播组时发生 I/O 异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.DatagramSocketImpl.leave(InetAddress inetaddr) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
退出多播组。
@param inetaddr 要退出的多播地址。
@exception IOException 如果退出多播组时出现 I/O 异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.DatagramSocketImpl.joinGroup(SocketAddress mcastaddr, NetworkInterface netIf) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
加入多播组。
@param mcastaddr 要加入的地址。
@param netIf 指定接收多播数据报包的本地接口
@throws IOException 如果加入多播组时出现 I/O 异常
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.DatagramSocketImpl.leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
退出多播组。
@param mcastaddr 要退出的地址。
@param netIf 指定的退出组的本地接口 throws IOException 如果退出多播组时出现 I/O 异常
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.DatagramSocketImpl.close()
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭套接字。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.net.DatagramSocketImpl.getLocalPort()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取本地端口。
@return 表示本地端口值的 <tt>int</tt> 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.io.FileDescriptor java.net.DatagramSocketImpl.getFileDescriptor()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取数据报套接字文件描述符。
@return 表示数据报套接字文件描述符的 <tt>FileDescriptor</tt> 对象。

<!-- END DATA -->
