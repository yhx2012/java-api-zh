<!-- BEGIN KEY -->
public class java.net.URLClassLoader extends java.security.SecureClassLoader
<!-- END KEY -->
<!-- BEGIN DATA -->
该类加载器用于从指向 JAR 文件和目录的 URL 的搜索路径加载类和资源。这里假定任何以 '/' 结束的 URL 都是指向目录的。如果不是以该字符结束，则认为该 URL 指向一个将根据需要打开的 JAR 文件。
 <p>
创建 URLClassLoader 实例的 AccessControlContext 线程将在后续加载类和资源时使用。
 <p>
为加载的类默认授予只能访问 URLClassLoader 创建时指定的 URL 的权限。

@author  David Connelly
@version 1.85, 08/02/04
@since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URLClassLoader(java.net.URL[] urls, ClassLoader parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
为给定的 URL 构造新 URLClassLoader。首先在指定的父类加载器中搜索 URL，然后按照为类和资源指定的顺序搜索 URL。这里假定任何以 '/' 结束的 URL 都是指向目录的。如果不是以该字符结束，则认为该 URL 指向一个将根据需要下载和打开的 JAR 文件。

<p>如果有安全管理器，该方法首先调用安全管理器的 <code>checkCreateClassLoader</code> 方法以确保允许创建类加载器。
 
@param urls 从其位置加载类和资源的 UR
@param parent 用于委托的父类加载器
@exception  SecurityException  如果存在安全管理器，且其 <code>checkCreateClassLoader</code> 方法不允许创建类加载器。
@see SecurityManager#checkCreateClassLoader

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URLClassLoader(java.net.URL[] urls)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认的委托父 <code>ClassLoader</code> 为指定的 URL 构造一个新 URLClassLoader。首先在父类加载器中搜索 URL，然后按照为类和资源指定的顺序搜索 URL。这里假定任何以 '/' 结束的 URL 都是指向目录的。如果不是以该字符结束，则认为该 URL 指向一个将根据需要下载和打开的 JAR 文件。

<p>如果有安全管理器，该方法首先调用安全管理器的 <code>checkCreateClassLoader</code> 方法以确保允许创建类加载器。
 
@param urls 从其位置加载类和资源的 URL

@exception  SecurityException  如果安全管理器存在并且其 <code>checkCreateClassLoader</code> 方法不允许创建类加载器。
@see SecurityManager#checkCreateClassLoader

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URLClassLoader(java.net.URL[] urls, ClassLoader parent, URLStreamHandlerFactory factory)
<!-- END KEY -->
<!-- BEGIN DATA -->
为指定的 URL、父类加载器和 URLStreamHandlerFactory 创建新 URLClassLoader。该父参数将充当委托的父类加载器。该工厂参数将充当创建新 jar URL 时获取协议处理程序的流处理程序工厂。

<p>如果有安全管理器，该方法首先调用安全管理器的 <code>checkCreateClassLoader</code> 方法以确保允许创建类加载器。

@param urls 从其位置加载类和资源的 URL
@param parent 用于委托的父类加载器
@param factory 创建 URL 时使用的 URLStreamHandlerFactory

@exception  SecurityException  如果安全管理器存在并且其 <code>checkCreateClassLoader</code> 方法不允许创建类加载器。
@see SecurityManager#checkCreateClassLoader

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.net.URLClassLoader.addURL(URL url)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的 URL 添加到 URL 列表中，以便搜索类和资源。

@param url 将添加到 URL 搜索路径中的 URL

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL[] java.net.URLClassLoader.getURLs()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于加载类和资源的 URL 搜索路径。这包括为构造方法指定的原始 URL 列表，以及由 addURL() 方法后续添加的 URL。
@return 用于加载类和资源的 URL 搜索路径。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Class<?> java.net.URLClassLoader.findClass(String name) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
通过 URL 搜索路径查找并加载具有指定名称的类。只有在找到该类后，才能根据需要加载和打开任何指向 JAR 文件的 URL。

@param name 类的名称
@return 结果类
@exception ClassNotFoundException 如果无法找到该类

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Package java.net.URLClassLoader.definePackage(String name, Manifest man, URL url) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
用该 ClassLoader 中的名称定义一个新包。该指定的 Manifest 中包含的属性将用于包含包版本和密封信息。对于密封的包，此附加 URL 从加载该包的 URL 指定代码源 URL。

@param name  包的名称
@param man   包含包的版本和密封信息的 Manifest
@param url   包的代码源 url，或者如果没有，则为 null
@exception   IllegalArgumentException 如果包的名称与该类加载器或其祖先之一中现有的包重名
@return 新定义的 Package 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL java.net.URLClassLoader.findResource(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
在 URL 搜索路径中查找具有指定名称的资源。

@param name 资源的名称
@return 资源的 <code>URL</code>，或者如果无法找到该资源，则返回 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<java.net.URL> java.net.URLClassLoader.findResources(String name) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示 URL 搜索路径中具有指定名称的所有资源的 URL 枚举。

@param name 资源名称
@exception IOException 如果发生 I/O 异常
@return <code>URL</code> 的<code>枚举</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.PermissionCollection java.net.URLClassLoader.getPermissions(CodeSource codesource)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定 codesource 对象的权限。该方法的实现首先调用 super.getPermissions，然后基于 codesource 的 URL 添加权限。
 <p>
如果此 URL 的协议为 "jar"，那么授予的权限将基于 Jar 文件 URL 所请求的权限。
 <p>
如果协议为 &quot;file&quot;，并且路径指定了某个文件，则要授予对该文件的读权限。如果协议为 &quot;file&quot;，并且路径是一个目录，则要授予该目录中的所有文件及其（递归）子目录中包含的所有文件读权限。
 <p>
如果协议不是 &quot;file&quot;，则允许连接到和接收来自 URL 主机的连接。
@param codesource codesource
@return 授予 codesource 的权限

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.net.URLClassLoader java.net.URLClassLoader.newInstance(java.net.URL[] urls, ClassLoader parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
为指定的 URL 和父类加载器创建新 URLClassLoader 实例。如果安装了安全管理器，该方法返回的 URLClassLoader 的 <code>loadClass</code> 方法将在加载该类之前调用 <code>SecurityManager.checkPackageAccess</code> 方法。

@param urls 用于搜索类和资源的 URL
@param parent 用于委托的父类加载器
@return 结果类加载器

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.net.URLClassLoader java.net.URLClassLoader.newInstance(java.net.URL[] urls)
<!-- END KEY -->
<!-- BEGIN DATA -->
为指定的 URL 和默认的父类加载器创建新 URLClassLoader 实例。如果安装了安全管理器，该方法返回的 URLClassLoader 的 <code>loadClass</code> 方法将在加载该类之前调用 <code>SecurityManager.checkPackageAccess</code>。

@param urls 用于搜索类和资源的 URL
@return 结果类加载器

<!-- END DATA -->
