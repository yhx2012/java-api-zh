<!-- BEGIN KEY -->
public final class java.net.Inet6Address extends java.net.InetAddress
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示互联网协议第 6 版 (IPv6) 地址。此类由 <a href="http://www.ietf.org/rfc/rfc2373.txt"><i>RFC&#xA0;2373:IP Version 6 Addressing Architecture</i></a> 定义。

<h4> <A NAME="format">IP 地址的文本表示形式</a> </h4>

用作方法输入的 IPv6 地址的文本表示形式采取以下形式之一：
 
 <ol>
<li><p> <A NAME="lform">首选形式</a>为 x:x:x:x:x:x:x:x，其中这些 'x' 是八个 16 位地址段的十六进制值。这是完整形式。例如，

   <blockquote><table cellpadding=0 cellspacing=0 summary="layout">
<tr><td><tt>1080:0:0:0:8:800:200C:417A</tt><td></tr>
   </table></blockquote>

<p> 注意，在个别字段中不必写出前导零。但是，在每个字段中至少必须存在一个数字，以下描述的情况除外。</li>

<li><p> 由于某些分配确定的 IPv6 地址样式的方法，地址经常包含零位的长字符串。为了更方便地写入包含零位的地址，可以使用特殊语法压缩这些零位。使用 &quot;::&quot;指示多个零的 16 位组。&quot;::&quot;只能在地址中出现一次。&quot;::&quot; 还可用于压缩地址中的前导和/或尾部零。例如，

   <blockquote><table cellpadding=0 cellspacing=0 summary="layout">
   <tr><td><tt>1080::8:800:200C:417A</tt><td></tr>
   </table></blockquote>

<li><p> 处理 IPv4 和 IPv6 节点的混合环境时，有一种有时更为方便的替换形式是 x:x:x:x:x:x:d.d.d.d ，其中 'x' 为六个高位 16 位地址段的十六进制值，'d' 为四个低位 8 位标准 IPv4 表示形式地址段的十进制值，例如，

   <blockquote><table cellpadding=0 cellspacing=0 summary="layout">
<tr><td><tt>::FFFF:129.144.52.38</tt><td></tr>
   <tr><td><tt>::129.144.52.38</tt><td></tr>
   </table></blockquote>

<p> 其中，&quot;::FFFF:d.d.d.d&quot; 和 &quot;::d.d.d.d&quot; 分别为映射 IPv4 的 IPv6 地址 (IPv4-mapped IPv6 address) 和与 IPv4 兼容的 IPv6 地址 (IPv4-compatible IPv6 address) 的一般形式。注意，IPv4 部分必须为 &quot;d.d.d.d&quot; 形式。以下形式是无效的：

   <blockquote><table cellpadding=0 cellspacing=0 summary="layout">
   <tr><td><tt>::FFFF:d.d.d</tt><td></tr>
   <tr><td><tt>::FFFF:d.d</tt><td></tr>
   <tr><td><tt>::d.d.d</tt><td></tr>
   <tr><td><tt>::d.d</tt><td></tr>
   </table></blockquote>

<p> 以下形式：

   <blockquote><table cellpadding=0 cellspacing=0 summary="layout">
<tr><td><tt>::FFFF:d</tt><td></tr>
   </table></blockquote>

<p> 有效，不过它是与 IPv4 兼容的 IPv6 地址的非传统表示形式：

   <blockquote><table cellpadding=0 cellspacing=0 summary="layout">
<tr><td><tt>::255.255.0.d</tt><td></tr>
   </table></blockquote>

<p> 在 &quot;::d&quot; 对应于一般 IPv6 地址 &quot;0:0:0:0:0:0:0:d&quot; 时。</li>
 </ol>

<p> 对于以输出值形式返回文本表示形式作的方法，使用完整形式。Inet6Address 将返回完整形式，因为在与其他文本数据组合时它是明确的。

<h4> 特殊 IPv6 地址 </h4>

 <blockquote>
<table cellspacing=2 summary="Description of IPv4-mapped address"> <tr><th valign=top><i>映射 IPv4 的地址</i></th>
<td>其形式为 ::ffff:w.x.y.z，此 IPv6 地址用于表示 IPv4 地址。与 IPv4 和 IPv6 节点通信时，它允许本机程序使用相同的地址数据结构和相同的套接字。

<p>在 InetAddress 和 Inet6Address 中，它用于内部表示形式；没有任何功能职责。Java 永远不返回映射 IPv4 的地址。这些类可以使用映射 IPv4 的地址，作为 byte 数组和文本表示形式的输入。但是，它将被转换为 IPv4 地址。</td></tr>
 </table></blockquote>
 <p>
<h4> <A NAME="scoped">IPv6 范围地址的文本表示形式</a> </h4>
 <p>
可以扩展上述 IPv6 地址的文本表示形式来指定 IPv6 范围的地址。在 [draft-ietf-ipngwg-scoping-arch-04.txt] 中描述了这种对基本地址体系结构的扩展。
 <p>
因为链接本地和站点本地地址都是非全球的，所以不同的主机可能具有相同的目标地址并且可能通过相同始发系统上的不同接口到达。在此情况下，视为将始发系统连接到同一范围的多个时区。为了确定哪一个才是真正意义上的目标时区，可以将时区标识符（或 <i>scope_id</i>）添加到 IPv6 地址上。
 <p>
指定 <i>scope_id</i> 的一般格式如下所示：
<p><blockquote><i>IPv6-address</i>%<i>scope_id</i></blockquote>
<p> IPv6 地址就是上述字面值 IPv6 地址。<i>scope_id</i> 指的是本地系统上的接口，它可以使用两种方式指定。
<p><ol><li><i>作为数字标识符。</i> 它必须是一个系统理解的指定特定接口和范围的正整数。通常，可以通过系统上的管理工具确定这些数字值。每个接口可能具有多个值，每个范围一个。如果没有指定范围，则使用的默认值为零。</li><p>
<li><i>作为字符串。</i> 它必须是相关特定接口的 {@link java.net.NetworkInterface#getName()} 所返回的确切字符串。如果以此方式创建 Inet6Address，则数字 scope-id 在创建该对象时通过查询相关 NetworkInterface 来确定。</li>
 </ol><p>
另外注意，可以从 NetworkInterface 类返回的 Inet6Address 实例获取数字 <i>scope_id</i>。这一点可用于找出在系统上配置的当前范围 id。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
 byte[] java.net.Inet6Address.ipaddress
<!-- END KEY -->
<!-- BEGIN DATA -->
保存 128 位（16 字节）的 IPv6 地址。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.net.Inet6Address.scope_id
<!-- END KEY -->
<!-- BEGIN DATA -->
scope_id。创建对象时指定的范围。如果对象是使用接口名称创建的，则到需要时才确定 scope_id。

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean java.net.Inet6Address.scope_id_set
<!-- END KEY -->
<!-- BEGIN DATA -->
当 scope_id 字段包含有效的整数 scope_id 时，将其设置为 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean java.net.Inet6Address.scope_ifname_set
<!-- END KEY -->
<!-- BEGIN DATA -->
在使用范围接口而不是数字范围 id 构造对象时设置。

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.net.Inet6Address.ifname
<!-- END KEY -->
<!-- BEGIN DATA -->
仅在序列化/反序列化期间才使用后跟字段

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.net.Inet6Address java.net.Inet6Address.getByAddress(String host, byte[] addr, NetworkInterface nif) throws java.net.UnknownHostException
<!-- END KEY -->
<!-- BEGIN DATA -->
完全按照 {@link InetAddress#getByAddress(String,byte[])} 的方式创建 Inet6Address，唯一的不同是将 IPv6 scope_id 设置为与在 <code>addr</code> 中指定地址类型的给定接口相对应的值。如果给定接口不具有为给定地址类型（例如，链接本地或站点本地）分配的数字 scope_id，则调用将失败并抛出 UnknownHostException。有关 IPv6 范围地址的描述，请参见<a href="Inet6Address.html#scoped">这里</a>。

@param host 指定主机
@param addr 网络字节顺序的原始 IP 地址
@param nif 必须与此地址关联的接口。
@return  根据原始 IP 地址创建的 Inet6Address 对象。
@exception  UnknownHostException  如果 IP 地址的长度非法或者接口不具有为给定地址类型分配的数字 scope_id。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.net.Inet6Address java.net.Inet6Address.getByAddress(String host, byte[] addr, int scope_id) throws java.net.UnknownHostException
<!-- END KEY -->
<!-- BEGIN DATA -->
完全按照 {@link InetAddress#getByAddress(String,byte[])} 的方式创建 Inet6Address，唯一的不同是将 IPv6 scope_id 设置为给定的数字值。不会检查 scope_id 以确定其是否与系统上的任何接口相对应。有关 IPv6 范围地址的描述，请参见<a href="Inet6Address.html#scoped">这里</a>。

@param host 指定主机
@param addr 网络字节顺序的原始 IP 地址
@param scope_id 地址的数字 scope_id。
@return  根据原始 IP 地址创建的 Inet6Address 对象。
@exception  UnknownHostException  如果 IP 地址的长度非法。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet6Address.isMulticastAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查 InetAddress 是否 IP 多播地址的实用例行程序。地址开头的 11111111 标识着该地址是一个多播地址。

@return 指示 InetAddress 是否是 IP 多播地址的 <code>boolean</code> 值
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet6Address.isAnyLocalAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查 InetAddress 是否是通配符地址的实用例行程序。
@return 指示 Inetaddress 是否是通配符地址的 <code>boolean</code> 值
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet6Address.isLoopbackAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查 InetAddress 是否是回送地址中的实用例行程序。

@return 指示 InetAddress 是否是回送地址的 <code>boolean</code> 值；否则返回 false。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet6Address.isLinkLocalAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查 InetAddress 是否是链接本地地址的实用例行程序。

@return 指示 InetAddress 是否是本地链接地址的 <code>boolean</code> 值；如果地址不是链接本地单播地址，则返回 false。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet6Address.isSiteLocalAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查 InetAddress 是否是站点本地地址的实用例行程序。

@return 指示 InetAddress 是否是站点本地地址的 <code>boolean</code> 值；如果地址不是站点本地单播地址，则返回 false。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet6Address.isMCGlobal()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查多播地址是否具有全球范围的实用例行程序。

@return 指示地址是否是全球范围多播地址的 <code>boolean</code> 值；如果它不是全球范围或多播地址，则返回 false
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet6Address.isMCNodeLocal()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查多播地址是否具有节点范围的实用例行程序。

@return 指示地址是否是节点本地范围多播地址的 <code>boolean</code> 值；如果它不是节点本地范围或多播地址，则返回 false
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet6Address.isMCLinkLocal()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查多播地址是否具有链接范围的实用例行程序。

@return 指示地址是否是链接本地范围多播地址的 <code>boolean</code> 值；如果它不是链接本地范围或多播地址，则返回 false
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet6Address.isMCSiteLocal()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查多播地址是否具有站点范围的实用例行程序。

@return 指示地址是否是站点本地范围多播地址的 <code>boolean</code> 值；如果它不是站点本地范围或多播地址，则返回 false
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet6Address.isMCOrgLocal()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查多播地址是否具有组织范围的实用例行程序。

@return 指示地址是否是组织本地范围多播地址的 <code>boolean</code> 值；如果它不是组织本地范围或多播地址，则返回 false
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] java.net.Inet6Address.getAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>InetAddress</code> 对象的原始 IP 地址。结果按网络字节顺序：地址的高位字节位于 <code>getAddress()[0]</code> 中。

@return 此对象的原始 IP 地址。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.net.Inet6Address.getScopeId()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此实例与接口关联，则返回数字 scoped_id。如果没有设置任何 scoped_id，则返回值为零。

@return scopeId；如果没有设置，则返回零。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.NetworkInterface java.net.Inet6Address.getScopedInterface()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此实例是使用范围接口创建的，则返回范围接口。

@return 范围接口；如果没有设置，则返回 null。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.Inet6Address.getHostAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 IP 地址字符串（以文本表现形式）。如果创建的实例指定了范围标识符，则将一个前带 &quot;%&quot;（百分比）符号的范围 id 添加到 IP 地址上。它可以是数字值，也可以是字符串，具体取决于创建实例使用的是哪一种。

@return  字符串格式的原始 IP 地址。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.net.Inet6Address.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 IP 地址的哈希码。

@return 此 IP 地址的哈希码值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet6Address.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此对象与指定对象比较。当且仅当参数不为 <code>null</code>，并且它表示与此对象相同的 IP 地址时，结果才为 <code>true</code>。
 <p>
如果 <code>getAddress</code> 对两个 <code>InetAddress</code> 返回的 byte 数组长度相同并且 byte 数组的每个数组元素也都相同，则这两个 <code>InetAddress</code> 的实例表示相同的 IP 地址。

@param obj 要与之比较的对象。
@return  如果对象相同，则返回 <code>true</code>；否则，返回 <code>false</code>。
@see     java.net.InetAddress#getAddress()

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet6Address.isIPv4CompatibleAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查 InetAddress 是否是与 IPv4 兼容的 IPv6 地址的实用例行程序。

@return 指示 InetAddress 是否是与 IPv4 兼容的 IPv6 地址的 <code>boolean</code> 值；如果地址为 IPv4 地址，则返回 false。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.net.Inet6Address.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
仅当范围接口名称在此系统上有效时，从包括范围信息的流还原此对象的状态。

<!-- END DATA -->
<!-- BEGIN KEY -->
private synchronized void java.net.Inet6Address.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
重写默认行为以便以 String 的形式，而不是以不可序列化的 NetworkInterface 的形式写入 scope_ifname 字段。

<!-- END DATA -->
