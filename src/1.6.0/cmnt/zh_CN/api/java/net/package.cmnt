<!-- BEGIN KEY -->
java.net
<!-- END KEY -->
<!-- BEGIN DATA -->

为实现网络应用程序提供类。

<p> java.net 包可以大致分为两个部分：</p>
<ul>
<li> <p><i>低级 API</i>，用于处理以下抽象：</p></li>
    <ul>
<li><p><i>地址</i>，也就是网络标识符，如 IP 地址。</p></li>
<li><p><i>套接字</i>，也就是基本双向数据通信机制。</p></li>
<li><p><i>接口</i>，用于描述网络接口。 </p></li>
    </ul>
<li> <p><i>高级 API</i>，用于处理以下抽象：</p></li>
    <ul>
<li><p><i>URI</i>，表示统一资源标识符。</p></li>
<li><p><i>URL</i>，表示统一资源定位符。</p></li>
<li><p><i>连接</i>，表示到 <i>URL</i> 所指向资源的连接。</p></li>
      </ul>
</ul>
<h2>地址</h2>
<p>在整个 java.net API 中，地址或者用作主机标识符或者用作套接字端点标识符。</p>
<p>{@link java.net.InetAddress} 类是表示 IP（Internet 协议）地址的抽象。它拥有两个子类：
<ul>
<li>用于 IPv4 地址的 {@link java.net.Inet4Address}。</li>
<li>用于 IPv6 地址的 {@link java.net.Inet6Address}。</li>
</ul>
<p>但是，在大多数情况下，不必直接处理子类，因为 InetAddress 抽象应该覆盖大多数必需的功能。</p>
<h3><b>关于 IPv6</b></h3>
<p>并非所有系统都支持 IPv6 协议，而当 Java 网络连接堆栈尝试检测它并在可用时透明地使用它时，还可以利用系统属性禁用它。在 IPv6 不可用或被显式禁用的情况下，Inet6Address 对大多数网络连接操作都不再是有效参数。虽然可以保证在查找主机名时 {@link java.net.InetAddress.getByName} 之类的方法不返回 Inet6Address，但仍然可能通过传递字面值来创建此类对象。在此情况下，大多数方法在使用 Inet6Address 调用时都将抛出异常。</p>
<h2>套接字</h2>
<p>套接字是在网络上建立机器之间的通信链接的方法。java.net 包提供 4 种套接字：</p>
<ul>
<li>{@link java.net.Socket} 是 TCP 客户端 API，通常用于{@linkplain java.net.Socket#connect(SocketAddress) 连接}远程主机。</li>
<li>{@link java.net.ServerSocket} 是 TCP 服务器 API，通常{@linkplain java.net.ServerSocket#accept 接受}源于客户端套接字的连接。</li>
<li>{@link java.net.DatagramSocket} 是 UDP 端点 API，用于{@linkplain java.net.DatagramSocket#send 发送}和{@linkplain java.net.DatagramSocket#receive 接收}{@linkplain java.net.DatagramPacket 数据包}</li>
<li>{@link java.net.MulticastSocket} 是 {@code DatagramSocket} 的子类，在处理多播组时使用。</li>
</ul>
<p>使用 TCP 套接字的发送和接收操作需要借助 InputStream 和 OutputStream 来完成，这两者是通过 {@link java.net.Socket#getInputStream} 和 {@link java.net.Socket#getOutputStream} 方法获取的。</p>
<h2>接口</h2>
<p>{@link java.net.NetworkInterface} 类提供 API 以浏览和查询本地机器的所有网络接口（例如，以太网连接或 PPP 端点）。只有通过该类才可以检查是否将所有本地接口都配置为支持 IPv6。</p>

<h2>高级 API</h2>
<p>java.net 包中的许多类可以提供更加高级的抽象，允许方便地访问网络上的资源。这些类为：
<ul>
<li>{@link java.net.URI} 是表示在 RFC 2396 中指定的统一资料标识符的类。顾名思义，它只是一个标识符，不直接提供访问资源的方法。</li>
<li>{@link java.net.URL} 是表示统一资源定位符的类，它既是 URI 的旧式概念又是访问资源的方法。</li>
<li>{@link java.net.URLConnection} 是根据 URL 创建的，是用于访问 URL 所指向资源的通信链接。此抽象类将大多数工作委托给底层协议处理程序，如 http 或 ftp。</li>
<li>{@link java.net.HttpURLConnection} 是 URLConnection 的子类，提供一些特定于 HTTP 协议的附加功能。</li>
</ul>
<p>建议的用法是使用 {@link java.net.URI} 指定资源，然后在访问资源时将其转换为 {@link java.net.URL}。从该 URL 可以获取 {@link java.net.URLConnection} 以进行良好控制，也可以直接获取 InputStream。<p>
<p>下面是一个示例：</p>
<p><code>URI uri = new URI(&quot;http://java.sun.com/&quot;);<br> URL url = uri.toURL();<br> InputStream in = url.openStream();</code></p>
<h2>协议处理程序</h2>
如上所述，URL 和 URLConnection 都依赖于协议处理程序，所以协议处理程序必须存在；否则将抛出异常。此为与 URI 的主要不同点，URI 仅标识资源，所以不必访问协议处理程序。因此，尽管可能利用任何种类的协议方案（例如，<code>myproto://myhost.mydomain/resource/</code>）创建 URI，但类似的 URL 仍将试图实例化指定协议的处理程序；如果指定协议的处理程序不存在，则抛出异常。</p>
<p>默认情况下，协议处理程序从默认位置动态加载。但是，通过设置 <code>java.protocol.handler.pkgs</code> 系统属性也可能增加搜索路径。例如，如果将其设置为 <code>myapp.protocols</code>，则 URL 代码将首先尝试（对于 http 而言）加载 <code>myapp.protocols.http.Handler</code>，然后，如果失败，则尝试从默认位置加载 <code>http.Handler</code>。<p>
<p>注意，处理程序类<b>必须</b>为抽象类 {@link java.net.URLStreamHandler} 的子类。</p>
<!--
<h2>Package Specification</h2>

##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT #####
<ul>
  <li><a href="">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a>
</ul>

<h2>Related Documentation</h2>

For overviews, tutorials, examples, guides, and tool documentation, please see:
<ul>
  <li><a href="">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a>
</ul>

-->

@since JDK1.0

<!-- END DATA -->
