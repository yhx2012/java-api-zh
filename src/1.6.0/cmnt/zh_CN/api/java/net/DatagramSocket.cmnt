<!-- BEGIN KEY -->
public class java.net.DatagramSocket extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示用来发送和接收数据报包的套接字。

<p>数据报套接字是包投递服务的发送或接收点。每个在数据报套接字上发送或接收的包都是单独编址和路由的。从一台机器发送到另一台机器的多个包可能选择不同的路由，也可能按不同的顺序到达。

<p>在 DatagramSocket 上总是启用 UDP 广播发送。为了接收广播包，应该将 DatagramSocket 绑定到通配符地址。在某些实现中，将 DatagramSocket 绑定到一个更加具体的地址时广播包也可以被接收。
 <p>
示例：<code>DatagramSocket s = new DatagramSocket(null); s.bind(new InetSocketAddress(8888));</code> 这等价于：<code>DatagramSocket s = new DatagramSocket(8888);</code> 两个例子都能创建能够在 UDP 8888 端口上接收广播的 DatagramSocket。

@author  Pavani Diwanji
@version 1.101, 06/08/06
@see     java.net.DatagramPacket
@see     java.nio.channels.DatagramChannel
@since JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.DatagramSocket() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造数据报套接字并将其绑定到本地主机上任何可用的端口。套接字将被绑定到通配符地址，IP 地址由内核来选择。
 
<p>如果有安全管理器，则首先使用 0 作为变量来调用其 <code>checkListen</code> 方法，以确保允许该操作。这可能会导致 SecurityException 异常。

@exception  SocketException  如果套接字不能被打开，或不能将其绑定到指定的本地端口。
@throws  SecurityException 如果安全管理器存在并且其 <code>checkListen</code> 方法不允许进行该操作。
 
@see SecurityManager#checkListen

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.net.DatagramSocket(DatagramSocketImpl impl)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带有指定 DatagramSocketImpl 的未绑定数据报套接字。

@param impl 子类希望在 DatagramSocket 上使用的 <B>DatagramSocketImpl</B> 的实例。
@since   1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.DatagramSocket(SocketAddress bindaddr) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建数据报套接字，将其绑定到指定的本地套接字地址。
 <p>
如果地址为 <code>null</code>，创建未绑定的套接字。
 <p>
<p>如果有安全管理器，则首先使用套接字中的端口作为变量来调用其 <code>checkListen</code> 方法，以确保允许该操作。这可能会导致 SecurityException 异常。
 
@param bindaddr 要绑定的本地套接字地址，对于未绑定的套接字为 <code>null</code>。
 
@exception  SocketException  如果套接字不能被打开，或不能将其绑定到指定的本地端口。
@throws  SecurityException 如果安全管理器存在并且其 <code>checkListen</code> 方法不允许进行该操作。
 
@see SecurityManager#checkListen
@since   1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.DatagramSocket(int port) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建数据报套接字并将其绑定到本地主机上的指定端口。套接字将被绑定到通配符地址，IP 地址由内核来选择。
 
<p>如果存在安全管理器，则首先使用 <code>port</code> 参数作为参数调用其 <code>checkListen</code> 方法，以确保允许该操作。这可能会导致 SecurityException 异常。

@param      port 要使用的端口。
@exception  SocketException  如果套接字不能被打开，或不能将其绑定到指定的本地端口。
@throws  SecurityException 如果安全管理器存在并且其 <code>checkListen</code> 方法不允许进行该操作。
 
@see SecurityManager#checkListen

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.DatagramSocket(int port, InetAddress laddr) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建数据报套接字，将其绑定到指定的本地地址。本地端口必须在 0 到 65535 之间（包括两者）。如果 IP 地址为 0.0.0.0，套接字将被绑定到通配符地址，IP 地址由内核选择。
 
<p>如果存在安全管理器，则首先使用 <code>port</code> 参数作为参数调用其 <code>checkListen</code> 方法，以确保允许该操作。这可能会导致 SecurityException 异常。
 
@param port 要使用的本地端口
@param laddr 要绑定的本地地址
 
@exception  SocketException  如果套接字不能被打开，或不能将其绑定到指定的本地端口。
@throws  SecurityException 如果安全管理器存在并且其 <code>checkListen</code> 方法不允许进行该操作。
 
@see SecurityManager#checkListen
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.net.DatagramSocket.bind(SocketAddress addr) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 DatagramSocket 绑定到特定的地址和端口。
 <p>
如果地址为 <code>null</code>，则系统将挑选一个临时端口和一个有效本地地址来绑定套接字。
<p>
@param	addr 要绑定的地址和端口。
@throws	SocketException 如果绑定过程中发生错误，或者套接字已经被绑定。
@throws	 SecurityException 如果安全管理器存在并且其 <code>checkListen</code> 方法不允许进行该操作。
@throws IllegalArgumentException 如果 addr 是不受此套接字支持的 SocketAddress 子类。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.DatagramSocket.connect(InetAddress address, int port)
<!-- END KEY -->
<!-- BEGIN DATA -->

将套接字连接到此套接字的远程地址。当套接字连接到远程地址时，包就只能从该地址发送或接收。默认情况下不连接数据报套接字。

<p>如果套接字要连接的远程目标不存在或不可到达，并且收到了该地址的目标不可达 ICMP 包，那么后续发送和接收的调用可能会抛出 PortUnreachableException。注意，不能保证一定抛出该异常。

<p>在连接时检查调用者对给定主机和端口的发送和接收数据报权限。当连接建立起来后，接收和发送除了对包和套接字的地址和端口进行匹配外，对传入和传出的包<b>将不再执行任何安全性检查</b>。对于发送操作，如果设置了包的地址并且包的地址和套接字的地址不匹配，则将抛出 IllegalArgumentException。连接到多播地址的套接字只能用于发送包。

@param address 套接字的远程地址。

@param port 套接字的远程端口。

@exception IllegalArgumentException 如果地址为 null，或端口超出了范围。

@exception SecurityException 如果不允许调用者向此地址和端口发送也不允许从此地址接收数据报。

@see #disconnect
@see #send
@see #receive 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.DatagramSocket.connect(SocketAddress addr) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此套接字连接到远程套接字地址（IP 地址 + 端口号）。
 <p>
@param	addr	远程地址。
@throws	SocketException 如果连接失败
@throws	IllegalArgumentException 如果 addr 为 null 或者 addr 是不受此套接字支持的 SocketAddress 子类。
@since 1.4
@see #connect

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.DatagramSocket.disconnect()
<!-- END KEY -->
<!-- BEGIN DATA -->

断开套接字的连接。如果套接字没有连接，则此方法不执行任何操作。

@see #connect

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.DatagramSocket.isBound()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回套接字的绑定状态。

@return 如果将套接字成功地绑定到一个地址，则返回 true
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.DatagramSocket.isConnected()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回套接字的连接状态。

@return 如果将套接字成功地连接到服务器，则为 true。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.InetAddress java.net.DatagramSocket.getInetAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此套接字连接的地址。如果套接字未连接，则返回 null。

@return 此套接字连接的地址。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.net.DatagramSocket.getPort()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此套接字的端口。如果套接字未连接，则返回 -1。

@return 此套接字连接的端口。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.SocketAddress java.net.DatagramSocket.getRemoteSocketAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此套接字连接的端点的地址，如果未连接则返回 <code>null</code>。
@return 表示此套接字远程端点的 <code>SocketAddress</code>，如果尚未连接则返回 <code>null</code>。
@see #getInetAddress()
@see #getPort()
@see #connect(SocketAddress)
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.SocketAddress java.net.DatagramSocket.getLocalSocketAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此套接字绑定的端点的地址，如果尚未绑定则返回 <code>null</code>。

@return 表示此套接字的本地端点的 <code>SocketAddress</code>，如果尚未绑定则返回 <code>null</code>。
@see #getLocalAddress()
@see #getLocalPort()
@see #bind(SocketAddress)
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.DatagramSocket.send(DatagramPacket p) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从此套接字发送数据报包。<code>DatagramPacket</code> 包含的信息指示：将要发送的数据、其长度、远程主机的 IP 地址和远程主机的端口号。

<p>如果存在安全管理器，且套接字当前没有连接到远程地址，则此方法首先执行某些安全性检查。首先，如果 <code>p.getAddress().isMulticastAddress()</code> 为 true，则此方法以 <code>p.getAddress()</code> 作为参数调用安全管理器的 <code>checkMulticast</code> 方法。如果该表达式的值为 false，此方法改为调用安全管理器的以 <code>p.getAddress().getHostAddress()</code> 和 <code>p.getPort()</code> 为参数的 <code>checkConnect</code> 方法。如果不允许该操作，则每次调用安全管理器方法都会导致 SecurityException。
 
@param      p   将要发送的 <code>DatagramPacket</code>。
 
@exception  IOException 如果发生 I/O 错误。
@throws  SecurityException 如果安全管理器存在并且其 <code>checkMulticast</code> 或 <code>checkConnect</code> 方法不允许进行发送。
@exception  PortUnreachableException 套接字连接到当前不可达的目标时可能抛出。注意，不能保证一定抛出该异常。
@exception  java.nio.channels.IllegalBlockingModeException 如果此套接字具有相关联的通道，且通道处于非阻塞模式。
 
@see        java.net.DatagramPacket
@see        SecurityManager#checkMulticast(InetAddress)
@see        SecurityManager#checkConnect
@revised 1.4
@spec JSR-51

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.net.DatagramSocket.receive(DatagramPacket p) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从此套接字接收数据报包。当此方法返回时，<code>DatagramPacket</code> 的缓冲区填充了接收的数据。数据报包也包含发送方的 IP 地址和发送方机器上的端口号。
 <p>
此方法在接收到数据报前一直阻塞。数据报包对象的 <code>length</code> 字段包含所接收信息的长度。如果信息比包的长度长，该信息将被截短。
 <p>
如果存在安全管理器，而安全管理器的 <code>checkAccept</code> 方法不允许接收操作，则包不能被接收。
 
@param      p   要放置传入数据的 <code>DatagramPacket</code>。
@exception  IOException 如果发生 I/O 错误。
@exception  SocketTimeoutException  如果先前调用了 setSoTimeout 且超时值已过。
@exception  PortUnreachableException 套接字连接到当前不可达的目标时可能抛出。注意，不能保证一定抛出该异常。
@exception  java.nio.channels.IllegalBlockingModeException 如果此套接字具有相关联的通道，且通道处于非阻塞模式。
@see        java.net.DatagramPacket
@see        java.net.DatagramSocket
@revised 1.4
@spec JSR-51

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.InetAddress java.net.DatagramSocket.getLocalAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取套接字绑定的本地地址。

<p>如果存在安全管理器，则首先使用主机地址和 <code>-1</code> 作为参数调用其 <code>checkConnect</code> 方法，以查看是否允许该操作。

@see SecurityManager#checkConnect
@return  套接字绑定的本地地址，如果套接字没有绑定或安全管理器的 <code>checkConnect</code> 方法不允许该操作，则返回表示任何本地地址的 <code>InetAddress</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.net.DatagramSocket.getLocalPort()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此套接字绑定的本地主机上的端口号。

@return  此套接字绑定的本地主机上的端口。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.net.DatagramSocket.setSoTimeout(int timeout) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
启用/禁用带有指定超时值的 SO_TIMEOUT，以毫秒为单位。将此选项设为非零的超时值时，对此 DatagramSocket 调用 receive() 将只阻塞此时间长度。如果超过超时值，将引发 <B>java.net.SocketTimeoutException</B>，虽然 DatagramSocket 仍旧有效。选项<B>必须</B>在进入阻塞操作前被启用才能生效。超时值必须是 &gt; 0 的数。超时值为 0 被解释为无穷大超时值。

@param timeout 指定的以毫秒为单位的超时值。
@throws SocketException 如果底层协议出现错误，例如 UDP 错误。
@since   JDK1.1
@see #getSoTimeout()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.net.DatagramSocket.getSoTimeout() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 SO_TIMEOUT 的设置。返回 0 意味着禁用了选项（即无穷大的超时值）。

@return SO_TIMEOUT 的设置。
@throws SocketException 如果底层协议出现错误，例如 UDP 错误。
@since   JDK1.1
@see #setSoTimeout(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.net.DatagramSocket.setSendBufferSize(int size) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <tt>DatagramSocket</tt> 的 SO_SNDBUF 选项设置为指定的值。网络实现使用 SO_SNDBUF 选项作为设置底层网络 I/O 缓冲区大小的提示。网络实现也可以使用 SO_SNDBUF 设置来决定在此套接字上可以传送的包的最大大小。
 <p>
由于 SO_SNDBUF 是一种提示，想要验证缓冲区大小的应用程序应该调用 {@link #getSendBufferSize()}。
 <p>
当发送率很高时，增大缓冲区的大小可以允许网络实现对多个传出包进行排队。 
 <p>
注：如果使用 {@link #send(DatagramPacket)} 来发送比 SO_SNDBUF 设置大的 <code>DatagramPacket</code>，包是被发送还是被丢弃是特定于实现的。

@param size 将设置的发送缓冲区大小。此值必须大于 0。

@exception SocketException 如果底层协议出现错误，例如 UDP 错误。
@exception  IllegalArgumentException      如果值为 0 或负。
@see #getSendBufferSize()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.net.DatagramSocket.getSendBufferSize() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <tt>DatagramSocket</tt> 的 SO_SNDBUF 选项的值，该值是平台在 <tt>DatagramSocket</tt> 上输出时使用的缓冲区大小。

@return 此 <tt>DatagramSocket</tt> 的 SO_SNDBUF 选项的值。
@exception SocketException 如果底层协议出现错误，例如 UDP 错误。
@see #setSendBufferSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.net.DatagramSocket.setReceiveBufferSize(int size) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <tt>DatagramSocket</tt> 的 SO_RCVBUF 选项设置为指定的值。网络实现使用 SO_RCVBUF 选项作为设置底层网络 I/O 缓冲区大小的提示。网络实现也可以使用 SO_RCVBUF 设置来决定在此套接字上可以接收的包的最大大小。
 <p>
由于 SO_RCVBUF 是一种提示，想要验证缓冲区设置大小的应用程序应该调用 {@link #getReceiveBufferSize()}。
 <p>
当包到达的速度快于使用 {@link #receive(DatagramPacket)} 接收包的速度时，增大 SO_RCVBUF 可以允许网络实现缓存多个包。
 <p>
注：是否能接收大于 SO_RCVBUF 的包是特定于实现的。

@param size 要设置的接收缓冲区大小。此值必须大于 0。

@exception SocketException 如果底层协议出现错误，例如 UDP 错误。
@exception  IllegalArgumentException  如果值为 0 或负。
@see #getReceiveBufferSize()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.net.DatagramSocket.getReceiveBufferSize() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <tt>DatagramSocket</tt> 的 SO_RCVBUF 选项的值，该值是平台在 <tt>DatagramSocket</tt> 上输入时使用的缓冲区大小。

@return 此 <tt>DatagramSocket</tt> 的 SO_RCVBUF 选项的值。
@exception SocketException 如果底层协议出现错误，例如 UDP 错误。
@see #setReceiveBufferSize(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.net.DatagramSocket.setReuseAddress(boolean on) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
启用/禁用 SO_REUSEADDR 套接字选项。
 <p>
对于 UDP 套接字可能有必要把超过一个的套接字绑定到相同的套接字地址。这样做的目的通常是为了接收多播包。（请参阅 {@link java.net.MulticastSocket}）。如果在使用 {@link #bind(SocketAddress)} 绑定套接字之前启用 <tt>SO_REUSEADDR</tt> 套接字选项，则 <tt>SO_REUSEADDR</tt> 套接字选项允许将多个套接字绑定到相同的套结字地址。
 <p>
注意：所有现有平台都不支持此功能，因此不管是否将忽略此选项，它都是特定于实现的。但是，如果此功能不受支持，则 {@link #getReuseAddress()} 将始终返回 <code>false</code>。
 <p>
当创建 <tt>DatagramSocket</tt> 时，禁用 <tt>SO_REUSEADDR</tt> 的初始设置。
 <p>
在绑定套接字（请参阅 {@link #isBound()}）后启用或禁用 <tt>SO_REUSEADDR</tt> 时的行为是不确定的。
 
@param on 是否启用 SO_REUSEADDR 套接字选项
@exception 如果启用或禁用 <tt>SO_RESUEADDR</tt> 套接字选项时发生错误，或者关闭了套接字。
@since 1.4
@see #getReuseAddress()
@see #bind(SocketAddress)
@see #isBound()
@see #isClosed()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.net.DatagramSocket.getReuseAddress() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
检测是否启用了 SO_REUSEADDR。

@return 指示是否启用 SO_REUSEADDR 的 <code>boolean</code> 值。
@exception SocketException 如果底层协议出现错误，例如 UDP 错误。
@since   1.4
@see #setReuseAddress(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.net.DatagramSocket.setBroadcast(boolean on) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
启用/禁用 SO_BROADCAST。
@param on     是否开启广播。
@exception SocketException 如果底层协议出现错误，例如 UDP 错误。
@since 1.4
@see #getBroadcast()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.net.DatagramSocket.getBroadcast() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
检测是否启用了 SO_BROADCAST。
@return 指示是否启用 SO_BROADCAST 的 <code>boolean</code> 值。
@exception SocketException 如果底层协议出现错误，例如 UDP 错误。
@since 1.4
@see #setBroadcast(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.net.DatagramSocket.setTrafficClass(int tc) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
为从此 DatagramSocket 上发送的数据报在 IP 数据报头中设置流量类别 (traffic class) 或服务类型八位组 (type-of-service octet)。由于底层网络实现可能忽略此值，应用程序应该将其视为一种提示。

<P> tc 的值<B>必须</B>在<code> 0 &lt;= tc &lt;= 255</code> 范围内，否则将抛出 IllegalArgumentException。
<p>注：
<p> 对于 Internet Protocol v4 该值由包含优先级和 TOS 字段的八位组组成，这在 RFC 1349 中有详细叙述。TOS 字段是由以下逐位或所得值创建的位集：
 <p>
 <UL>
 <LI><CODE>IPTOS_LOWCOST (0x02)</CODE></LI>
 <LI><CODE>IPTOS_RELIABILITY (0x04)</CODE></LI>
 <LI><CODE>IPTOS_THROUGHPUT (0x08)</CODE></LI>
 <LI><CODE>IPTOS_LOWDELAY (0x10)</CODE></LI>
 </UL>
末尾的最低位常常被忽略，因为该位对应于 MBZ（必须为 0）位。
 <p>
设置优先级字段中的位可能导致 SocketException，指示不允许该操作。
 <p>
对于 Internet Protocol v6 <code>tc</code> 是将被放置到 IP 头部的 sin6_flowinfo 字段中的值。

@param tc	此位集的 <code>int</code> 值。
@throws SocketException 如果设置流量类别或服务类型时出现错误
@since 1.4
@see #getTrafficClass

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.net.DatagramSocket.getTrafficClass() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
为从此 DatagramSocket 上发送的包获取 IP 数据报头中的流量类别或服务类型。
 <p>
由于底层网络实现可能忽略使用 {@link #setTrafficClass(int)} 设置的流量类别或服务类型，因而此方法可能返回一个不同于以前用 {@link #setTrafficClass(int)} 在此 DatagramSocket 上设置的值。

@return 已经设置的流量类别或服务类型
@throws SocketException 如果获得流量类别或服务类型值时出现错误。
@since 1.4
@see #setTrafficClass(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.DatagramSocket.close()
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此数据报套接字。
 <p>
在此套接字上 {@link #receive} 中所有当前阻塞的线程将会抛出 {@link SocketException}。

<p> 如果此套接字有一个与之关联的通道，则关闭该通道。

@revised 1.4
@spec JSR-51

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.DatagramSocket.isClosed()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回是否关闭了套接字。

@return 如果已经关闭了套接字，则返回 true
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.nio.channels.DatagramChannel java.net.DatagramSocket.getChannel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此数据报套接字关联的唯一 {@link java.nio.channels.DatagramChannel} 对象（如果有）。

<p> 当且仅当通过 {@link java.nio.channels.DatagramChannel#open DatagramChannel.open} 方法创建了通道本身时，数据报套接字才具有一个通道。

@return  与此数据报套接字关联的数据报通道，如果没有为通道创建套接字，则返回 <tt>null</tt>。

@since 1.4
@spec JSR-51

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized void java.net.DatagramSocket.setDatagramSocketImplFactory(DatagramSocketImplFactory fac) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
为应用程序设置数据报套接字实现工厂。工厂只能指定一次。
 <p>
当应用程序创建新的数据报套接字时，调用套接字实现工厂的 <code>createDatagramSocketImpl</code> 方法创建实际的数据报套接字实现。
 <p>
除非已经设置了工厂，否则向该方法传递 <code>null</code> 是无操作。
 
<p>如果存在安全管理器，此方法首先调用安全管理器的 <code>checkSetFactory</code> 方法，确保允许该操作。这可能会导致 SecurityException 异常。

@param      fac   所需的工厂。
@exception  IOException  如果设置数据报套接字工厂时发生 I/O 错误。
@exception  SocketException  如果已经定义该工厂。
@throws  SecurityException 如果安全管理器存在并且其 <code>checkSetFactory</code> 方法不允许进行该操作。
@see java.net.DatagramSocketImplFactory#createDatagramSocketImpl()
@see       SecurityManager#checkSetFactory
@since 1.3

<!-- END DATA -->
