<!-- BEGIN KEY -->
public final class java.net.Inet4Address extends java.net.InetAddress
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示 Internet Protocol version 4 (IPv4) 地址。此类是由 <a href="http://www.ietf.org/rfc/rfc790.txt"><i>RFC&nbsp;790:Assigned Numbers</i></a>、<a href="http://www.ietf.org/rfc/rfc1918.txt"><i>RFC&nbsp;1918:Address Allocation for Private Internets</i></a> 和 <a href="http://www.ietf.org/rfc/rfc2365.txt"><i>RFC&nbsp;2365:Administratively Scoped IP Multicast</i></a> 定义的。

<h4> <A NAME="format">IP 地址的文本表示形式</a> </h4>

用作方法输入的 IPv4 地址的文本表示形式采取以下形式之一：

 <blockquote><table cellpadding=0 cellspacing=0 summary="layout">
 <tr><td><tt>d.d.d.d</tt></td></tr>
 <tr><td><tt>d.d.d</tt></td></tr>
 <tr><td><tt>d.d</tt></td></tr>
<tr><td><tt>d</tt></td></tr>
 </table></blockquote>

<p> 当指定四个部分时，将每个部分解释为一个数据字节，并从左到右分配给 IPv4 地址的四个字节。

<p> 当指定三部分地址时，将最后一个部分解释为 16 位量，并放置在网络地址的最右边两个字节。这使得三部分地址格式便于将 Class B 网络地址指定为 128.net.host。

<p> 当提供两部分地址时，将最后一个部分解释为 24 位量，并放置在网络地址的最右边三个字节。这使得两部分地址格式便于将 Class A 网络地址指定为 net.host。

<p> 当仅给出一个部分时，值被直接存储在网络地址中，无需进行字节重排。

<p> 对于将文本表示形式作为输出值返回的方法而言，使用第一种形式，即使用以点分隔的四个字符串。

<h4> 多播地址的范围 </h4>
 
在历史上，IP 头中的 IPv4 生存时间 (Time To Live, TTL) 字段已作为多播范围字段增大了一倍：TTL 为 0 表示节点本地 (node-local)，1 表示链接本地 (link-local)，32 表示站点本地 (site-local)，64 表示地区本地 (region-local)，128 表示大陆本地 (continent-local)，255 表示全球。但是，首选范围是行政管理范围 (administrative scoping）。请参阅 <a href="http://www.ietf.org/rfc/rfc2365.txt"><i>RFC&nbsp;2365:Administratively Scoped IP Multicast</i></a>
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet4Address.isMulticastAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查 InetAddress 是否是 IP 多播地址的实用例行程序。IP 多播地址是 Class D 地址，也就是说，第一个四位地址为 1110。
@return 指示 InetAddress 是否是 IP 多播地址的 <code>boolean</code> 值
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet4Address.isAnyLocalAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查 InetAddress 是否是通配符地址的实用例行程序。
@return 指示 Inetaddress 是否是通配符地址的 <code>boolean</code> 值
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet4Address.isLinkLocalAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查 InetAddress 是否是链接本地地址的实用例行程序。 

@return 指示 InetAddress 是否是本地链接地址的 <code>boolean</code> 值；如果地址不是链接本地单播地址，则返回 false。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet4Address.isSiteLocalAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查 InetAddress 是否是站点本地地址的实用例行程序。 

@return 指示 InetAddress 是否是站点本地地址的 <code>boolean</code> 值；如果地址不是站点本地单播地址，则返回 false。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet4Address.isMCGlobal()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查多播地址是否具有全局范围的实用例行程序。

@return 指示地址是否是全局范围多播地址的 <code>boolean</code> 值；如果它不是全局范围或多播地址，则返回 false
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet4Address.isMCNodeLocal()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查多播地址是否具有节点范围的实用例行程序。

@return 指示地址是否是节点本地范围多播地址的 <code>boolean</code> 值；如果它不是节点本地范围或多播地址，则返回 false
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet4Address.isMCLinkLocal()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查多播地址是否具有链接范围的实用例行程序。

@return 指示地址是否是链接本地范围多播地址的 <code>boolean</code> 值；如果它不是链接本地范围或多播地址，则返回 false
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet4Address.isMCSiteLocal()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查多播地址是否具有站点范围的实用例行程序。

@return 指示地址是否是站点本地范围多播地址的 <code>boolean</code>；如果它不是站点本地范围或多播地址，则返回 false
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet4Address.isMCOrgLocal()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查多播地址是否具有组织范围的实用例程。

@return 指示地址是否是组织本地范围多播地址的 <code>boolean</code>；如果它不是组织本地范围或多播地址，则返回 false
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] java.net.Inet4Address.getAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>InetAddress</code> 对象的原始 IP 地址。结果按网络字节顺序：地址的高位字节位于 <code>getAddress()[0]</code> 中。

@return 此对象的原始 IP 地址。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.Inet4Address.getHostAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 IP 地址字符串（以文本表现形式）。

@return  字符串格式的原始 IP 地址。
@since   JDK1.0.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.net.Inet4Address.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 IP 地址的哈希码。

@return 此 IP 地址的哈希码值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.Inet4Address.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此对象与指定对象比较。当且仅当参数不为 <code>null</code>，并且它表示与此对象相同的 IP 地址时，结果才为 <code>true</code>。
 <p>
如果 <code>getAddress</code> 对两个 <code>InetAddress</code> 返回的 byte 数组长度相同并且 byte 数组的每个数组元素也都相同，则这两个 <code>InetAddress</code> 的实例表示相同的 IP 地址。

@param obj 要与之比较的对象。
@return  如果对象相同，则返回 <code>true</code>；否则，返回 <code>false</code>。
@see     java.net.InetAddress#getAddress()

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Object java.net.Inet4Address.writeReplace() throws java.io.ObjectStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
用 InetAddress 对象取代要序列化的对象。

@return 要序列化的对象的替换对象。

@throws ObjectStreamException 如果无法创建取代此对象的新对象

<!-- END DATA -->
