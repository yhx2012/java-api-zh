<!-- BEGIN KEY -->
public abstract class java.net.HttpURLConnection extends java.net.URLConnection
<!-- END KEY -->
<!-- BEGIN DATA -->
支持 HTTP 特定功能的 URLConnection。有关详细信息，请参阅 <A HREF="http://www.w3.org/pub/WWW/Protocols/"> the spec </A>。
 <p>
 
每个 HttpURLConnection 实例都可用于生成单个请求，但是其他实例可以透明地共享连接到 HTTP 服务器的基础网络。请求后在 HttpURLConnection 的 InputStream 或 OutputStream 上调用 close() 方法可以释放与此实例关联的网络资源，但对共享的持久连接没有任何影响。如果在调用 disconnect() 时持久连接空闲，则可能关闭基础套接字。
 
@see     java.net.HttpURLConnection#disconnect()
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.net.HttpURLConnection.method
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 方法（GET、POST、PUT 等）。 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.net.HttpURLConnection.chunkLength
<!-- END KEY -->
<!-- BEGIN DATA -->

使用存储块编码流模式进行输出时的存储块长度。值 <code>-1</code> 表示对输出禁用存储块编码。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.net.HttpURLConnection.fixedContentLength
<!-- END KEY -->
<!-- BEGIN DATA -->
使用固定长度流模式时的固定内容长度。值 <code>-1</code> 表示对输出禁用固定长度流模式。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.net.HttpURLConnection.responseCode
<!-- END KEY -->
<!-- BEGIN DATA -->
表示三位字数的 HTTP 状态码 (Status-Code) 的 <code>int</code>。
 <ul>
<li> 1xx:Informational
<li> 2xx:Success
<li> 3xx:Redirection
<li> 4xx:Client Error
<li> 5xx:Server Error
 </ul>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.net.HttpURLConnection.responseMessage
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 响应消息。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.net.HttpURLConnection.instanceFollowRedirects
<!-- END KEY -->
<!-- BEGIN DATA -->
如果为 <code>true</code>，则协议自动执行重定向。如果为 <code>false</code>，则协议不会自动执行重定向。
 <p>
此字段由 <code>setInstanceFollowRedirects</code> 方法设置。其值由 <code>getInstanceFollowRedirects</code> 方法返回。
 <p>
其默认值基于构造 HttpURLConnection 时静态 followRedirects 的值。

@see     java.net.HttpURLConnection#setInstanceFollowRedirects(boolean)
@see     java.net.HttpURLConnection#getInstanceFollowRedirects()
@see     java.net.HttpURLConnection#setFollowRedirects(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_OK
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 200：OK。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_CREATED
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 201：Created。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_ACCEPTED
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 202：Accepted。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_NOT_AUTHORITATIVE
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 203：Non-Authoritative Information。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_NO_CONTENT
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 204：No Content。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_RESET
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 205：Reset Content。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_PARTIAL
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 206：Partial Content。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_MULT_CHOICE
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 300：Multiple Choices。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_MOVED_PERM
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 301：Moved Permanently。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_MOVED_TEMP
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 302：Temporary Redirect。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_SEE_OTHER
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 303：See Other。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_NOT_MODIFIED
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 304：Not Modified。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_USE_PROXY
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 305：Use Proxy。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_BAD_REQUEST
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 400：Bad Request。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_UNAUTHORIZED
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 401：Unauthorized。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_PAYMENT_REQUIRED
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 402：Payment Required。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_FORBIDDEN
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 403：Forbidden。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_NOT_FOUND
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 404：Not Found。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_BAD_METHOD
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 405：Method Not Allowed。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_NOT_ACCEPTABLE
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 406：Not Acceptable。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_PROXY_AUTH
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 407：Proxy Authentication Required。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_CLIENT_TIMEOUT
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 408：Request Time-Out。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_CONFLICT
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 409：Conflict。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_GONE
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 410：Gone。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_LENGTH_REQUIRED
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 411：Length Required。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_PRECON_FAILED
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 412：Precondition Failed。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_ENTITY_TOO_LARGE
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 413：Request Entity Too Large。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_REQ_TOO_LONG
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 414：Request-URI Too Large。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_UNSUPPORTED_TYPE
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 415：Unsupported Media Type。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_SERVER_ERROR
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 500：Internal Server Error。
@deprecated   放错了位置，它不应该存在。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_INTERNAL_ERROR
<!-- END KEY -->
<!-- BEGIN DATA -->

HTTP 状态码 500：Internal Server Error。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_NOT_IMPLEMENTED
<!-- END KEY -->
<!-- BEGIN DATA -->

HTTP 状态码 501：Not Implemented。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_BAD_GATEWAY
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 502：Bad Gateway。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_UNAVAILABLE
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 503：Service Unavailable。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_GATEWAY_TIMEOUT
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 504：Gateway Timeout。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_VERSION
<!-- END KEY -->
<!-- BEGIN DATA -->
HTTP 状态码 505：HTTP Version Not Supported。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.net.HttpURLConnection(URL u)
<!-- END KEY -->
<!-- BEGIN DATA -->
HttpURLConnection 的构造方法。
@param u URL

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.HttpURLConnection.getHeaderFieldKey(int n)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>n</code><sup>th</sup> 头字段的键。有些实现可能将 <code>0</code><sup>th</sup> 头字段视为特殊状态行，即由 HTTP 服务器返回的状态行。在此情况下，{@link #getHeaderField(int) getHeaderField(0)} 返回状态行，而 <code>getHeaderFieldKey(0)</code> 返回 null。

@param   n   索引，其中 n &gt;=0。
@return  <code>n</code><sup>th</sup> 头字段的键；如果键不存在，则返回 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.HttpURLConnection.setFixedLengthStreamingMode(int contentLength)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法用于在预先已知内容长度时启用没有进行内部缓冲的 HTTP 请求正文的流。 
 <p>
如果应用程序尝试写入的数据多于指示的内容长度，或者应用程序在写入指示的内容长度前关闭了 OutputStream，将抛出异常。
 <p>
启用输出流时，不能自动处理验证和重定向。如果需要验证和重定向，则在读取响应时将抛出 HttpRetryException。可以查询此异常以获取错误的详细信息。
 <p>
该方法必须在连接 URLConnection 前调用。

@param   contentLength 将写入 OutputStream 的字节数。

@throws  IllegalStateException 如果已连接 URLConnection 或者已启用另外的流模式。

@throws  IllegalArgumentException 如果指定的内容长度小于零。

@see     #setChunkedStreamingMode(int)
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.HttpURLConnection.setChunkedStreamingMode(int chunklen)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法用于在预先<b>不</b>知道内容长度时启用没有进行内部缓冲的 HTTP 请求正文的流。在此模式下，使用存储块传输编码发送请求正文。注意，并非所有 HTTP 服务器都支持此模式。
 <p>
启用输出流时，不能自动处理验证和重定向。如果需要验证和重定向，则在读取响应时将抛出 HttpRetryException。可以查询此异常以获取错误的详细信息。
 <p>
该方法必须在连接 URLConnection 前调用。

@param   chunklen 要写入每个存储块的字节数。如果 chunklen 小于或等于零，则使用默认值。

@throws  IllegalStateException 如果已连接 URLConnection 或者已启用其他流模式。

@see     #setFixedLengthStreamingMode(int)
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.HttpURLConnection.getHeaderField(int n)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>n</code><sup>th</sup> 头字段的值。有些实现可能将 <code>0</code><sup>th</sup> 头字段视为特殊状态行，即由 HTTP 服务器返回的状态行。 
 <p>
此方法可以与 {@link #getHeaderFieldKey getHeaderFieldKey} 方法一起使用来迭代消息中的所有头。 

@param   n   索引，其中 n&gt;=0。
@return  <code>n</code><sup>th</sup> 头字段的值；如果值不存在，则返回 <code>null</code>。
@see     java.net.HttpURLConnection#getHeaderFieldKey(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.net.HttpURLConnection.setFollowRedirects(boolean set)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此类是否应该自动执行 HTTP 重定向（响应代码为 3xx 的请求）。默认情况下为 true。Applet 不能更改此变量。
 <p>
如果存在安全管理器，则此方法首先调用安全管理器的 <code>checkSetFactory</code> 方法来确保允许操作。这可能会导致 SecurityException 异常。
 
@param set 指示是否进行 HTTP 重定向的 <code>boolean</code> 值。
@exception  SecurityException 如果安全管理器存在并且其 <code>checkSetFactory</code> 方法不允许进行此操作。
@see        SecurityManager#checkSetFactory
@see #getFollowRedirects()

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.net.HttpURLConnection.getFollowRedirects()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指示是否应该自动执行 HTTP 重定向 (3xx) 的 <code>boolean</code> 值。

@return 如果应该自动执行 HTTP 重定向，则返回 <code>true</code>；否则返回 <tt>false</tt>。
@see #setFollowRedirects(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.HttpURLConnection.setInstanceFollowRedirects(boolean followRedirects)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 <code>HttpURLConnection</code> 实例是否应该自动执行 HTTP 重定向（响应代码为 3xx 的请求）。
 <p>
默认值来自 followRedirects，其默认情况下为 true。

@param followRedirects 指示是否执行 HTTP 重定向的 <code>boolean</code> 值。

@see java.net.HttpURLConnection#instanceFollowRedirects
@see #getInstanceFollowRedirects
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.HttpURLConnection.getInstanceFollowRedirects()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>HttpURLConnection</code> 的 <code>instanceFollowRedirects</code> 字段的值。

@return  此 <code>HttpURLConnection</code> 的 <code>instanceFollowRedirects</code> 字段的值。
@see     java.net.HttpURLConnection#instanceFollowRedirects
@see #setInstanceFollowRedirects(boolean)
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.HttpURLConnection.setRequestMethod(String method) throws java.net.ProtocolException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 URL 请求的方法，
 <UL>
  <LI>GET
  <LI>POST
  <LI>HEAD
  <LI>OPTIONS
  <LI>PUT
  <LI>DELETE
  <LI>TRACE
</UL> 以上方法之一是合法的，具体取决于协议的限制。默认方法为 GET。
 
@param method HTTP 方法
@exception ProtocolException 如果无法重置方法或者请求的方法对 HTTP 无效。
@see #getRequestMethod()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.HttpURLConnection.getRequestMethod()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取请求方法。
@return HTTP 请求方法
@see #setRequestMethod(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.net.HttpURLConnection.getResponseCode() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 HTTP 响应消息获取状态码。例如，就以下状态行来说：
 <PRE>
 HTTP/1.0 200 OK
 HTTP/1.0 401 Unauthorized
 </PRE>
将分别返回 200 和 401。如果无法从响应中识别任何代码（即响应不是有效的 HTTP），则返回 -1。
@throws IOException 如果连接到服务器时发生错误。
@return HTTP 状态码或 -1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.HttpURLConnection.getResponseMessage() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与来自服务器的响应代码一起返回的 HTTP 响应消息（如果有）。对于如下响应：
 <PRE>
 HTTP/1.0 200 OK
 HTTP/1.0 404 Not Found
 </PRE>
分别提取 String &quot;OK&quot; 和 &quot;Not Found&quot;。如果无法从响应识别任何字符（结果不是有效的 HTTP），则返回 null。
@throws IOException 如果连接到服务器时发生错误。
@return HTTP 响应消息或 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.net.HttpURLConnection.disconnect()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示近期服务器不太可能有其他请求。调用 disconnect() 并不意味着可以对其他请求重用此 HttpURLConnection 实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.net.HttpURLConnection.usingProxy()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示连接是否通过代理。
@return 指示连接是否使用代理的 boolean 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream java.net.HttpURLConnection.getErrorStream()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果连接失败但服务器仍然发送了有用数据，则返回错误流。典型示例是，当 HTTP 服务器使用 404 响应时，将导致在连接中抛出 FileNotFoundException，但是服务器同时还会发送建议如何操作的 HTML 帮助页。

<p>此方法不会导致启用连接。如果没有建立连接，或者在连接时服务器没有发生错误，或服务器出错但没有发送错误数据，则此方法返回 null。这是默认设置。

@return 错误流（如果存在）；如果没有发生错误、没有建立连接或服务器没有发送有用数据，则返回 null。

<!-- END DATA -->
