<!-- BEGIN KEY -->
public abstract class java.net.CookieHandler extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
CookieHandler 对象提供一种回调机制以将 HTTP 状态管理策略实现挂钩到 HTTP 协议处理程序。HTTP 状态管理机制利用 HTTP 请求和响应指定创建有状态的会话的方式。

<p>可以通过执行 CookieHandler.setDefault(CookieHandler) 来注册 HTTP 协议处理程序要使用的系统级 CookieHandler。调用 CookieHandler.getDefault() 可以获取当前注册的 CookieHandler。

有关 HTTP 状态管理的更多信息，请参见  <a
 href="http://www.ietf.org/rfc/rfc2965.txt""><i>RFC&nbsp;2965: HTTP 状态管理机制</i></a>

@version 1.4, 03/08/09
@author Yingxian Wang
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.net.CookieHandler java.net.CookieHandler.getDefault()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取系统级 cookie 处理程序。

@return 系统级 cookie 处理程序；返回 null 表示当前没有设置任何系统级 cookie 处理程序。
@throws SecurityException 如果安装了安全管理器并且它拒绝 {@link NetPermission}&lt;tt&gt;(&quot;getCookieHandler&quot;)&lt;/tt&gt;
@see #setDefault(CookieHandler)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized void java.net.CookieHandler.setDefault(CookieHandler cHandler)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置（或取消设置）系统级 cookie 处理程序。
 
注：非标准 http 协议处理程序可能忽略此设置。

@param cHandler HTTP cookie 处理程序；或者 &lt;code&gt;null&lt;/code&gt;，表示取消设置。
@throws SecurityException 如果安装了安全管理器并且它拒绝 {@link NetPermission}&lt;tt&gt;(&quot;setCookieHandler&quot;)&lt;/tt&gt;
@see #getDefault()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Map<java.lang.String, java.util.List<java.lang.String>> java.net.CookieHandler.get(URI uri, java.util.Map<java.lang.String, java.util.List<java.lang.String>> requestHeaders) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从请求头中指定 uri 的 cookie 缓存中获取所有可用的 cookie。

HTTP 协议实现程序应该确保在添加所有与选择 cookie 相关的请求头之后且在发送请求之前调用此方法。

@param uri 作为请求中 cookie 发送目标的 &lt;code&gt;URI&lt;/code&gt;
@param requestHeaders 从请求头字段名到表示当前请求头的字段值列表的 Map
@return 从字段名为 &quot;Cookie&quot; 或 &quot;Cookie2&quot; 的状态管理头到包含状态信息的 cookie 列表的映射

@throws IOException 如果发生 I/O * 错误
@throws IllegalArgumentException 如果其中任意一个参数为 null
@see #put(URI, Map)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.net.CookieHandler.put(URI uri, java.util.Map<java.lang.String, java.util.List<java.lang.String>> responseHeaders) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将响应头中出现的所有可用 cookie（例如名为 Set-Cookie2 的响应头字段）设置到 cookie 缓存中。

@param uri &lt;code&gt;URI&lt;/code&gt;，cookie 来自其中
@param responseHeaders 从字段名到表示返回的响应头字段的字段值列表的不可变映射
@throws  IOException 如果发生 I/O 错误
@throws  IllegalArgumentException 如果其中任意一个参数为 null
@see #get(URI, Map)

<!-- END DATA -->
