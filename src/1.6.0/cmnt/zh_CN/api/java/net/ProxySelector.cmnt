<!-- BEGIN KEY -->
public abstract class java.net.ProxySelector extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
连接到 URL 引用的网络资源时选择要使用的代理服务器（如果有）。代理选择器是此类的具体子类，通过调用 {@link java.net.ProxySelector#setDefault setDefault} 方法注册。当前注册的代理选择器可以通过调用 {@link java.net.ProxySelector#getDefault getDefault} 方法获得。
 
<p> 例如，注册代理选择器时，URLConnection 类的子类应该调用每个 URL 请求的 {@link #select select} 方法，这样代理选择器便可以决定应该使用直接连接还是代理连接。{@link #select select} 方法返回使用首选连接方法的连接上的迭代器。

<p> 如果无法建立到代理（PROXY 或 SOCKS）服务器的连接，则调用方应该调用代理选择器的 {@link #connectFailed connectFailed} 方法来通知代理选择器，代理服务器不可用。 </p>

@version 1.3, 03/08/09
@author Yingxian Wang
@author Jean-Christophe Collet
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.net.ProxySelector java.net.ProxySelector.getDefault()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取系统级代理选择器。

@throws  SecurityException 如果已安装安全管理器并且它拒绝 {@link NetPermission}<tt>(&quot;getProxySelector&quot;)</tt>
@see #setDefault(ProxySelector)
@return 系统级 <code>ProxySelector</code>
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.net.ProxySelector.setDefault(ProxySelector ps)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置（或取消设置）系统级代理选择器。

注：非标准协议处理程序可能忽略此设置。

@param ps HTTP 代理选择器，或者为 <code>null</code>，表示取消设置代理选择器。

@throws  SecurityException 如果已安装安全管理器并且它拒绝 {@link NetPermission}<tt>(&quot;setProxySelector&quot;)</tt>

@see #getDefault()
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.List<java.net.Proxy> java.net.ProxySelector.select(URI uri)
<!-- END KEY -->
<!-- BEGIN DATA -->
基于访问资源所需的协议和访问资源的目标地址选择所有可用的代理。URI 的格式定义如下：
 <UL>
<LI>http URI 用于 http 连接</LI>
<LI>https URI 用于 https 连接
<LI>ftp URI 用于 ftp 连接</LI>
<LI><code>socket://host:port</code><br> 用于 tcp 客户端套接字连接</LI>
 </UL>

@param	uri 所需连接的 URI

@return	代理列表。列表中的所有元素都是 {@link java.net.Proxy Proxy} 类型；当不存在可用代理时，列表将包含一个 {@link java.net.Proxy Proxy} 类型的元素，该元素表示直接连接。
@throws IllegalArgumentException 如果任何一个参数为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.net.ProxySelector.connectFailed(URI uri, SocketAddress sa, IOException ioe)
<!-- END KEY -->
<!-- BEGIN DATA -->
调用此方法来指示无法建立到代理/socks 服务器的连接。此方法的实现可以使用给定的地址和 IOException 的种类暂时移除或重新排序 select(String, String) 所返回的代理序列。

@param   uri 位于 sa 的代理未能提供服务的 URI。
@param	sa 代理/SOCKS 服务器的套接字地址

@param	ioe 连接失败时抛出的 I/O 异常。
@throws IllegalArgumentException  如果任何一个参数为 null

<!-- END DATA -->
