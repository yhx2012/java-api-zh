<!-- BEGIN KEY -->
public abstract class java.net.URLStreamHandler extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
抽象类 <code>URLStreamHandler</code> 是所有流协议处理程序的通用超类。流协议处理程序知道如何为特定的协议类型，如 <code>http</code>、<code>ftp</code> 或 <code>gopher</code> 进行连接。
 <p>
在大多数情况下，<code>URLStreamHandler</code> 子类的实例都不是由应用程序直接创建的。而是在构造 <code>URL</code> 过程中第一次遇到协议名称时，自动加载适当的流协议处理程序。

@author  James Gosling
@version 1.68, 05/18/04
@see     java.net.URL#URL(java.lang.String, java.lang.String, int, java.lang.String)
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract java.net.URLConnection java.net.URLStreamHandler.openConnection(URL u) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
打开一个到 <code>URL</code> 参数引用的对象的连接。此方法应该由子类重写。

<p>如果对应处理程序的协议（例如，HTTP 或 JAR）存在属于以下包或其子包之一的公共、专用 URLConnection 子类：java.lang、java.io、java.util、java.net，返回的连接将为该子类的类型。例如，对于 HTTP，将返回 HttpURLConnection，对于 JAR，将返回 JarURLConnection。

@param      u   所连接的 URL。
@return     对应于 <code>URL</code> 的 <code>URLConnection</code> 对象。
@exception  IOException  如果打开连接时发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.net.URLConnection java.net.URLStreamHandler.openConnection(URL u, Proxy p) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
与 openConnection(URL) 相同，不同点在于：通过指定的代理进行连接；不支持代理方式的协议处理程序将忽略该代理参数并进行正常的连接。

调用该方法会提示系统的默认 ProxySelector 设置。
 
@param      u   所连接的 URL。
@param      p   进行连接所通过的代理。如果希望使用直接连接，则应指定 Proxy.NO_PROXY。
@return     对应于 <code>URL</code> 的 <code>URLConnection</code> 对象。
@exception  IOException  如果打开连接时发生 I/O 错误。
@exception  IllegalArgumentException 如果 u 或 p 为 null，或者 p 包含错误的类型。
@exception  UnsupportedOperationException 如果实现该协议的子类不支持该方法。
@since      1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.net.URLStreamHandler.parseURL(URL u, String spec, int start, int limit)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>URL</code> 的字符表示形式解析为 <code>URL</code> 对象。
 <p>
如果有任何继承的上下文，则已将其复制到 <code>URL</code> 参数中。
 <p>
<code>URLStreamHandler</code> 的 <code>parseURL</code> 方法按照 <code>http</code> 规范解析该字符串表示形式。多数 URL 协议家族的解析都很相似。具有不同语法的协议的流协议处理程序必须重写该例程。

@param   u       用于接收解析规范的结果的 <code>URL</code>。
@param   spec    代表必须解析的 URL 的 <code>String</code>。
@param   start   解析开始处的字符索引。其只传递 '<code>:</code>'（如果有一个），用来指定确定的协议名称。
@param   limit   停止解析的字符位置。这是字符串的结束或 &quot;<code>#</code>&quot; 字符位置（如果有）。井号之后的所有信息都指示一个定位点。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.net.URLStreamHandler.getDefaultPort()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由该处理程序解析的 URL 的默认端口。具有默认端口号的处理程序应重写此方法。
@return 由该处理程序解析的 <code>URL</code> 的默认端口。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.net.URLStreamHandler.equals(URL u1, URL u2)
<!-- END KEY -->
<!-- BEGIN DATA -->
提供默认的 equals 计算。它可能由其他协议所用的处理程序重写，这些协议对 equals() 有不同要求。该方法要求所有参数都不为 null。因为它只能由 java.net.URL 类调用，所以参数都不为 null，这一点可以得到保证。
@param u1 URL 对象
@param u2 URL 对象
@return 如果两个 url 被视为相等（即它们引用的是同一文件中的相同片段），则返回 <tt>true</tt>。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.net.URLStreamHandler.hashCode(URL u)
<!-- END KEY -->
<!-- BEGIN DATA -->
提供默认的哈希计算。它可能由其他协议所用的处理程序重写，这些协议对 hashCode 计算有不同要求。
@param u URL 对象
@return 适用于哈希表索引的 <tt>int</tt>
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.net.URLStreamHandler.sameFile(URL u1, URL u2)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较两个 url 以确定它们是否引用相同的文件（即具有相同的协议、主机、端口和路径）。该方法要求所有参数都不为 null。因为它只能由 java.net.URL 类间接调用，所以参数都不为 null，这一点可以得到保证。
@param u1 URL 对象
@param u2 URL 对象
@return 如果 u1 和 u2 引用的是同一文件，则返回 true
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized java.net.InetAddress java.net.URLStreamHandler.getHostAddress(URL u)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取主机的 IP 地址。如果主机字段为空或出现 DNS 错误，则会返回 null。

@param u URL 对象
@return 表示主机 IP 地址的 <code>InetAddress</code>。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.net.URLStreamHandler.hostsEqual(URL u1, URL u2)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较两个 URL 的主机组件。
@param u1 要比较的第一个主机的 URL
@param u2 要比较的第二个主机的 URL
@return  当且仅当它们相等时，返回 <tt>true</tt>，否则返回 <tt>false</tt>。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.net.URLStreamHandler.toExternalForm(URL u)
<!-- END KEY -->
<!-- BEGIN DATA -->
将特定协议的 <code>URL</code> 转换为 <code>String</code>。

@param   u   URL
@return  <code>URL</code> 参数的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.net.URLStreamHandler.setURL(URL u, String protocol, String host, int port, String authority, String userInfo, String path, String query, String ref)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>URL</code> 参数的字段设置为指示的值。只有从 URLStreamHandler 派生的类才能够在 URL 上调用 set 方法。

@param   u         要修改的 URL。
@param   protocol  协议名称。
@param   host      对应 URL 的远程主机值。
@param   port      远程机器上的端口。
@param   authority  URL 的授权部分。
@param   userInfo URL 的 userInfo 部分。
@param   path      URL 的 path 部分。
@param   query     URL 的 query 部分。
@param   ref       引用。
@exception	SecurityException	如果该 URL 的协议处理程序与这一个不同
@see     java.net.URL#set(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String)
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.net.URLStreamHandler.setURL(URL u, String protocol, String host, int port, String file, String ref)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>URL</code> 参数的字段设置为指示的值。只有从 URLStreamHandler 派生的类才能够在 URL 上调用 set 方法。

@param   u         要修改的 URL。
@param   protocol  协议名称。从 1.2 开始，忽略了该值。
@param   host      对应 URL 的远程主机值。
@param   port      远程机器上的端口。
@param   file      文件。
@param   ref       引用。
@exception	SecurityException  如果该 URL 的协议处理程序与这一个不同
@deprecated 使用 setURL(URL, String, String, int, String, String, String, String);

<!-- END DATA -->
