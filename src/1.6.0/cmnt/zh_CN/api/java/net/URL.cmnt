<!-- BEGIN KEY -->
public final class java.net.URL extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
类 <code>URL</code> 代表一个统一资源定位符，它是指向互联网&ldquo;资源&rdquo;的指针。资源可以是简单的文件或目录，也可以是对更为复杂的对象的引用，例如对数据库或搜索引擎的查询。有关 URL 的类型和格式的更多信息，可从以下位置找到：
 <blockquote>
     <a href="http://www.socs.uts.edu.au/MosaicDocs-old/url-primer.html"><i>http://www.socs.uts.edu.au/MosaicDocs-old/url-primer.html</i></a>
 </blockquote>
 <p>
通常，URL 可分成几个部分。上面的 URL 示例指示使用的协议为 <code>http</code> （超文本传输协议）并且该信息驻留在一台名为 <code>www.socs.uts.edu.au</code> 的主机上。主机上的信息名称为 <code>/MosaicDocs-old/url-primer.html</code>。主机上此名称的准确含义取决于协议和主机。该信息一般存储在文件中，但可以随时生成。该 URL 的这一部分称为<i>路径</i> 部分。
 <p>
URL 可选择指定一个&ldquo;端口&rdquo;，它是用于建立到远程主机 TCP 连接的端口号。如果未指定该端口号，则使用协议默认的端口。例如，<code>http</code> 协议的默认端口为 <code>80</code>。还可以指定一个备用端口，如下所示：
 <blockquote><pre>
     http://www.socs.uts.edu.au:80/MosaicDocs-old/url-primer.html
 </pre></blockquote>
 <p>
<code>URL</code> 的语法由此文档定义：<a
 href="http://www.ietf.org/rfc/rfc2396.txt"><i>RFC&nbsp;2396:Uniform Resource Identifiers (URI):Generic Syntax</i></a>；在此文件中对其内容又进行了修正：<a  href="http://www.ietf.org/rfc/rfc2732.txt"><i>RFC&#xA0;2732:Format for Literal IPv6 Addresses in URLs</i></a>。字面值 IPv6 地址格式还支持 scope_id。scope_id 的语法和用法在<a href="Inet6Address.html#scoped">此处</a>进行了描述。
 <p>
URL 后面可能还跟有一个&ldquo;片段&rdquo;，也称为&ldquo;引用&rdquo;。该片段由井字符 &quot;#&quot; 指示，后面跟有更多的字符。例如，
 <blockquote><pre>
     http://java.sun.com/index.html#chapter1
 </pre></blockquote>
 <p>
从技术角度来讲，URL 并不需要包含此片段。但是，使用此片段的目的在于表明，在获取到指定的资源后，应用程序需要使用文档中附加有 <code>chapter1</code> 标记的部分。标记的含义特定于资源。
 <p>
应用程序也可以指定一个&ldquo;相对 URL&rdquo;，它只包含到达相对于另一个 URL 的资源的足够信息。HTML 页面中经常使用相对 URL。例如，假设 URL 的内容是：
 <blockquote><pre>
     http://java.sun.com/index.html
 </pre></blockquote>
其中包含的相对 URL：
 <blockquote><pre>
     FAQ.html
 </pre></blockquote>
为以下形式的缩写：
 <blockquote><pre>
     http://java.sun.com/FAQ.html
 </pre></blockquote>
 <p>
相对 URL 不需要指定 URL 的所有组成部分。如果缺少协议、主机名称或端口号，这些值将从完整指定的 URL 中继承。但是，必须指定文件部分。可选的片段部分不继承。
 <p>
URL 类自身并不根据 RFC2396 中定义的转义机制编码或解码任何 URL 部分。由调用方对任何需要在调用 URL 前进行转义的字段进行编码，并对从 URL 返回的任何经过转义的字段进行解码。进一步而言，由于 URL 不懂 URL 转义，所以它不会识别同一 URL 的对等编码和解码形式。例如，对于这两个 URL：<br>
<pre>    http://foo.com/hello world/ 和 http://foo.com/hello%20world</pre>
将被视为互不相等。
 <p>
注意，{@link java.net.URI} 类在某些特定情况下对其组成字段执行转义。建议使用 {@link java.net.URI} 管理 URL 的编码和解码，并使用 {@link #toURI()} 和 {@link URI#toURL()} 实现这两个类之间的转换。
 <p>
也可以使用 {@link URLEncoder} 和 {@link URLDecoder} 类，但是只适用于 HTML 形式的编码，它与 RFC2396 中定义的编码机制不同。

@author  James Gosling
@version 1.129, 01/27/04
@since JDK1.0 

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.net.URL.protocol
<!-- END KEY -->
<!-- BEGIN DATA -->
要使用的协议（ftp、http、nntp，...等）。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.net.URL.host
<!-- END KEY -->
<!-- BEGIN DATA -->
要连接的主机名。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.net.URL.port
<!-- END KEY -->
<!-- BEGIN DATA -->
要连接的协议端口。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.net.URL.file
<!-- END KEY -->
<!-- BEGIN DATA -->
相应主机上的指定文件名。<code>file</code> 定义的格式为 <code>path[?query]</code>
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.net.URL.authority
<!-- END KEY -->
<!-- BEGIN DATA -->
此 URL 的授权部分。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.net.URL.ref
<!-- END KEY -->
<!-- BEGIN DATA -->
# 引用。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL(String protocol, String host, int port, String file) throws java.net.MalformedURLException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定 <code>protocol</code>、<code>host</code>、<code>port</code> 号和 <code>file</code> 创建 <code>URL</code> 对象。<p>

<code>host</code> 可用主机名或字面值 IP 地址表示。如果使用 IPv6 字面值地址，则应将其括在方括号（<tt>'['</tt> 和 <tt>']'</tt>）中，如 <a
 href="http://www.ietf.org/rfc/rfc2732.txt">RFC&nbsp;2732</a> 中指定的那样；但是，在以下文档中定义的字面值 IPv6 地址格式也可以接受：<a
 href="http://www.ietf.org/rfc/rfc2373.txt"><i>RFC&nbsp;2373:IP Version 6 Addressing Architecture</i></a>。<p>

指定 <code>port</code> 号为 <code>-1</code> 指示 URL 应使用协议的默认端口。<p>

如果这是用指定协议创建的第一个 URL 对象，则还会为该协议创建一个<i>流协议处理程序</i> 对象（类 <code>URLStreamHandler</code> 的一个实例）：
 <ol>
<li>如果该应用程序已经预先设置了一个 <code>URLStreamHandlerFactory</code> 的实例作为流处理程序工厂，则将调用该实例的 <code>createURLStreamHandler</code> 方法（协议字符串为其中的一个参数）以创建流协议处理程序。
<li>如果尚未建立 <code>URLStreamHandlerFactory</code>，或者该工厂的 <code>createURLStreamHandler</code> 方法返回 <code>null</code>，则该构造方法将查找如下系统属性的值：
     <blockquote><pre>
         java.protocol.handler.pkgs
     </pre></blockquote>
如果该系统属性的值为非 <code>null</code>，则它被转换为一个由垂直线字符 '<code>|</code>'分隔的包列表。构造方法尝试加载如下名称的类：
     <blockquote><pre>
         &lt;<i>package</i>&gt;.&lt;<i>protocol</i>&gt;.Handler
     </pre></blockquote>
其中，&lt;<i>package</i>&gt; 用包的名称替换，&lt;<i>protocol</i>&gt; 用协议的名称替换。如果不存在此类，或者此类存在但它不是 <code>URLStreamHandler</code> 的子类，则尝试列表中的下一个包。
<li>如果上面的步骤中未找到协议处理程序，则构造方法将尝试从系统默认包加载。
     <blockquote><pre>
         &lt;<i>system default package</i>&gt;.&lt;<i>protocol</i>&gt;.Handler
     </pre></blockquote>
如果不存在此类，或者该类存在但它不是 <code>URLStreamHandler</code> 的子类，则抛出 <code>MalformedURLException</code>。
 </ol>

<p>应确保搜索路径中包含以下协议的协议处理程序：
 <blockquote><pre>
http、https、ftp、file 和 jar
 </pre></blockquote>
还可以有其他协议的协议处理程序。

<p>此构造方法不执行对输入的验证。

@param      protocol   要使用的协议名称。
@param      host       主机名称。
@param      port       主机端口号。
@param      file       主机上的文件
@exception  MalformedURLException  如果指定了未知协议。
@see        java.lang.System#getProperty(java.lang.String)
@see        java.net.URL#setURLStreamHandlerFactory( java.net.URLStreamHandlerFactory)
@see        java.net.URLStreamHandler
@see        java.net.URLStreamHandlerFactory#createURLStreamHandler( java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL(String protocol, String host, String file) throws java.net.MalformedURLException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定的 <code>protocol</code> 名称、<code>host</code> 名称和 <code>file</code> 名称创建 URL。使用指定协议的默认端口。
 <p>
此方法等同于调用带四个参数的构造方法，四个参数为 <code>protocol</code>、<code>host</code>、<code>-1</code> 和 <code>file</code>。

此构造方法不执行对输入的验证。

@param      protocol   要使用的协议名称。
@param      host       主机名称。
@param      file       主机上的文件。
@exception  MalformedURLException  如果指定了未知协议。
@see        java.net.URL#URL(java.lang.String, java.lang.String, int, java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL(String protocol, String host, int port, String file, URLStreamHandler handler) throws java.net.MalformedURLException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定的 <code>protocol</code>、<code>host</code>、<code>port</code> 号、<code>file</code> 和 <code>handler</code> 创建 <code>URL</code> 对象。指定 <code>port</code> 号为 <code>-1</code> 指示 URL 应使用协议的默认端口。指定 <code>handler</code> 为 <code>null</code> 指示 URL 应使用协议的默认流处理程序，大致如下：java.net.URL#URL(java.lang.String, java.lang.String, int, java.lang.String)

<p>如果处理程序为非 null，并且有安全管理器，则使用 <code>NetPermission(&quot;specifyStreamHandler&quot;)</code> 权限调用安全管理器的 <code>checkPermission</code> 方法。结果可能是一个 SecurityException 异常。

此构造方法不执行对输入的验证。

@param      protocol   要使用的协议名称。
@param      host       主机名称。
@param      port       主机端口号。
@param      file       主机上的文件
@param	   handler    URL 的流处理程序。
@exception  MalformedURLException  如果指定了未知协议。
@exception  SecurityException  如果安全管理器存在并且其 <code>checkPermission</code> 方法不允许显式指定流处理程序。
@see        java.lang.System#getProperty(java.lang.String)
@see        java.net.URL#setURLStreamHandlerFactory( java.net.URLStreamHandlerFactory)
@see        java.net.URLStreamHandler
@see        java.net.URLStreamHandlerFactory#createURLStreamHandler( java.lang.String)
@see        SecurityManager#checkPermission
@see        java.net.NetPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL(String spec) throws java.net.MalformedURLException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 <code>String</code> 表示形式创建 <code>URL</code> 对象。
 <p>
此构造方法等同于调用两个参数的构造方法，其中，第一个参数为 <code>null</code>。

@param      spec   将作为 URL 解析的 <code>String</code>。
@exception  MalformedURLException  如果字符串指定未知协议。
@see        java.net.URL#URL(java.net.URL, java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL(URL context, String spec) throws java.net.MalformedURLException
<!-- END KEY -->
<!-- BEGIN DATA -->
通过在指定的上下文中对给定的 spec 进行解析创建 URL。

新的 URL 从给定的上下文 URL 和 spec 参数创建，这在以下文档中进行了描述：RFC2396 &quot;Uniform Resource Identifiers : Generic * Syntax&quot;:
 <blockquote><pre>
          &lt;scheme&gt;://&lt;authority&gt;&lt;path&gt;?&lt;query&gt;#&lt;fragment&gt;
 </pre></blockquote>
该引用被解析为方案、授权、路径、查询和片段部分。如果路径部分为空，方案、授权和查询部分未定义，则新的 URL 为对当前文档的引用。否则，新的 URL 中将使用 spec 中出现的片段和查询部分。
 <p>
如果给定的 spec 中定义了方案部分，但与上下文的方案不匹配，则只根据 spec 创建新的绝对 URL。否则，方案部分从上下文 URL 继承。
 <p>
如果 spec 中有授权部分，则将该 spec 视为绝对的，并用 spec 的授权和路径替换上下文授权和路径。如果 spec 中没有授权部分，则新的 URL 的授权将从上下文继承。
 <p>
如果 spec 的路径部分以斜线字符 &quot;/&quot; 开始，则将该路径视为绝对的，并用 spec 的路径替换上下文路径。
 <p>
否则，如 RFC2396 中所述，该路径将被视为相对路径，并被添加到上下文路径中。此外，在这种情况下，还将通过删除由 &quot;..&quot; 和 &quot;.&quot; 产生的目录更改对路径进行规范化处理。
 <p>
有关 URL 解析的更详细的描述，请参考 RFC2396。

@param      context   要在其中解析规范的上下文。
@param      spec   将作为 URL 解析的 <code>String</code>。
@exception  MalformedURLException  如果未指定任何协议，或者找到了未知协议。
@see        java.net.URL#URL(java.lang.String, java.lang.String, int, java.lang.String)
@see        java.net.URLStreamHandler
@see        java.net.URLStreamHandler#parseURL(java.net.URL, java.lang.String, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL(URL context, String spec, URLStreamHandler handler) throws java.net.MalformedURLException
<!-- END KEY -->
<!-- BEGIN DATA -->
通过在指定的上下文中用指定的处理程序对给定的 spec 进行解析来创建 URL。如果处理程序为 null，则使用两参数构造方法进行解析。

@param      context   要在其中解析规范的上下文。
@param      spec   将作为 URL 解析的 <code>String</code>。
@param	   handler    URL 的流处理程序。
@exception  MalformedURLException  如果未指定任何协议，或者找到了未知协议。
@exception  SecurityException 如果安全管理器存在并且其 <code>checkPermission</code> 方法不允许指定流处理程序。
@see        java.net.URL#URL(java.lang.String, java.lang.String, int, java.lang.String)
@see        java.net.URLStreamHandler
@see        java.net.URLStreamHandler#parseURL(java.net.URL, java.lang.String, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.net.URL.set(String protocol, String host, int port, String file, String ref)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 URL 的字段。这不是一个公共方法，所以只有 URLStreamHandler 才能修改 URL 字段。其他情况下，URL 为常量。

@param protocol 要使用的协议名称
@param host 主机名称
@param port 主机端口号
@param file 主机上的文件
@param ref URL 中的内部引用

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.net.URL.set(String protocol, String host, int port, String authority, String userInfo, String path, String query, String ref)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 URL 的指定的 8 个字段。这不是一个公共方法，所以只有 URLStreamHandler 才能修改 URL 字段。其他情况下，URL 为常量。

@param protocol 要使用的协议名称
@param host 主机名称
@param port 主机上的端口号
@param authority url 的授权部分
@param userInfo 用户名和密码
@param path 主机上的文件
@param ref URL 中的内部引用
@param query 此 URL 的查询部分
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.URL.getQuery()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>URL</code> 的查询部分。

@return  此 <code>URL</code> 的查询，如果没有查询，则返回 <CODE>null</CODE>
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.URL.getPath()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>URL</code> 的路径部分。

@return  此 <code>URL</code> 的路径部分，如果没有路径，则返回一个空字符串
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.URL.getUserInfo()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>URL</code> 的 userInfo 部分。

@return  此 <code>URL</code> 的 userInfo 部分，如果没有用户信息，则返回 <CODE>null</CODE>
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.URL.getAuthority()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>URL</code> 的授权部分。

@return  此 <code>URL</code> 的授权部分
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.net.URL.getPort()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>URL</code> 的端口号。

@return  端口号，如果未设置端口号，则返回 -1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.net.URL.getDefaultPort()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 <code>URL</code> 关联协议的默认端口号。如果 URL 方案或 URL 的 URLStreamHandler 未定义默认的端口号，则返回 -1。

@return  端口号
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.URL.getProtocol()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>URL</code> 的协议名称。

@return  此 <code>URL</code> 的协议。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.URL.getHost()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>URL</code> 的主机名（如果适用）。主机的格式遵守 RFC 2732，即对于一个字面值 IPv6 地址，该方法将返回括在方括号 (<tt>'['</tt> 和 <tt>']'</tt>) 中的 IPv6 地址。

@return  此 <code>URL</code> 的主机名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.URL.getFile()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>URL</code> 的文件名。返回的文件部分将与 <CODE>getPath()</CODE> 相同，再加上 <CODE>getQuery()</CODE> 值的规范化形式（如果有）。如果没有查询部分，此方法和 <CODE>getPath()</CODE> 将返回相同的结果。

@return  此 <code>URL</code> 的文件名，如果没有文件名，则返回一个空字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.URL.getRef()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>URL</code> 的锚点（也称为&ldquo;引用&rdquo;）。

@return  此 <code>URL</code> 的锚点（也称为&ldquo;引用&rdquo;），如果没有锚点，则返回 <CODE>null</CODE>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.URL.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较此 URL 是否等于另一个对象。<p>

如果给定的对象不是一个 URL，则此方法立即返回 <code>false</code>。<p>

如果两个 URL 具有相同的协议，引用相同的主机，主机上具有相同的端口号，文件相同，片段也都相同，则这两个 URL 对象相等。<p>

如果两个主机名可解析为同一 IP 地址，则认为两个主机相同；如果有一个主机名无法解析，但两个主机名相等（不区分大小写），或者两个主机名都为 null，则也认为这两个主机相同。<p>

由于主机比较需要进行名称解析，所以此操作为阻塞操作。 <p>

注：<code>equals</code> 定义的行为已知与 HTTP 的虚拟主机行为不一致。

@param   obj   要与其比较的 URL。
@return  如果对象相同，则返回 <code>true</code>；否则，返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.net.URL.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个适合哈希表索引的整数。<p>
 
哈希码基于所有与 URL 比较相关的 URL 部分。因此，此操作为阻塞操作。<p>

@return  此 <code>URL</code> 的哈希码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.URL.sameFile(URL other)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较两个 URL，不包括片段部分。<p>

如果此 <code>URL</code> 和 <code>other</code> 参数相等，则返回 <code>true</code>，不考虑片段部分。

@param   other   要与其比较的 <code>URL</code>。
@return  如果它们引用相同的远程对象，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.URL.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造此 <code>URL</code> 的字符串表示形式。字符串是通过调用此对象的流协议处理程序的 <code>toExternalForm</code> 方法创建的。

@return  此对象的字符串表示形式。
@see     java.net.URL#URL(java.lang.String, java.lang.String, int, java.lang.String)
@see     java.net.URLStreamHandler#toExternalForm(java.net.URL)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.URL.toExternalForm()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造此 <code>URL</code> 的字符串表示形式。字符串是通过调用此对象的流协议处理程序的 <code>toExternalForm</code> 方法创建的。

@return  此对象的字符串表示形式。
@see     java.net.URL#URL(java.lang.String, java.lang.String, int, java.lang.String)
@see     java.net.URLStreamHandler#toExternalForm(java.net.URL)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URI java.net.URL.toURI() throws java.net.URISyntaxException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 URL 等效的 {@link java.net.URI}。此方法的作用与 <code>new URI (this.toString())</code> 相同。
<p>注意，任何 URL 实例只要遵守 RFC 2396 就可以转化为 URI。但是，有些未严格遵守该规则的 URL 将无法转化为 URI。

@exception URISyntaxException 如果由于该 URL 格式未严格遵守 RFC2396 而无法转化为 URI。

@return    与此 URL 等效的 URI 实例。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URLConnection java.net.URL.openConnection() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>URLConnection</code> 对象，它表示到 <code>URL</code> 所引用的远程对象的连接。

<p>每次调用此 URL 的协议处理程序的 <code>openConnection</code> 方法都打开一个新的连接。

<p>如果 URL 的协议（例如，HTTP 或 JAR）存在属于以下包或其子包之一的公共、专用 URLConnection 子类：java.lang、java.io、java.util、java.net，返回的连接将为该子类的类型。例如，对于 HTTP，将返回 HttpURLConnection，对于 JAR，将返回 JarURLConnection。

@return     到该 URL 的 <code>URLConnection</code>。
@exception  IOException 如果发生 I/O 异常。
@see        java.net.URL#URL(java.lang.String, java.lang.String, int, java.lang.String)
@see        java.net.URLConnection
@see java.net.URLStreamHandler#openConnection(java.net.URL)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URLConnection java.net.URL.openConnection(Proxy proxy) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
与 openConnection() 类似，所不同是连接通过指定的代理建立；不支持代理方式的协议处理程序将忽略该代理参数并建立正常的连接。

调用此方法会提示系统的默认 ProxySelector 设置。

@param      proxy 进行此连接所需的代理。如果希望使用直接连接，则应指定 Proxy.NO_PROXY。
@return     到该 URL 的 <code>URLConnection</code>。
@exception  IOException 如果发生 I/O 异常。
@exception  SecurityException 如果有安全管理器并且调用方没有连接到代理的权限。
@exception  IllegalArgumentException 如果代理为 null，或代理的类型错误
@exception  UnsupportedOperationException 如果实现该协议处理程序的子类不支持此方法。
@see        java.net.URL#URL(java.lang.String, java.lang.String, int, java.lang.String)
@see        java.net.URLConnection
@see        java.net.URLStreamHandler#openConnection(java.net.URL, java.net.Proxy)
@since      1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.io.InputStream java.net.URL.openStream() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
打开到此 <code>URL</code> 的连接并返回一个用于从该连接读入的 <code>InputStream</code>。此方法是下面方法的缩写：
 <blockquote><pre>
     openConnection().getInputStream()
 </pre></blockquote>

@return     从 URL 连接读入的输入流。
@exception  IOException 如果发生 I/O 异常。
@see        java.net.URL#openConnection()
@see        java.net.URLConnection#getInputStream()

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.Object java.net.URL.getContent() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 URL 的内容。此方法是下面方法的缩写：
 <blockquote><pre>
     openConnection().getContent()
 </pre></blockquote>

@return     此 URL 的内容。
@exception  IOException 如果发生 I/O 异常。
@see        java.net.URLConnection#getContent()

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.Object java.net.URL.getContent(java.lang.Class[] classes) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 URL 的内容。此方法是下面方法的缩写：
 <blockquote><pre>
     openConnection().getContent(Class[])
 </pre></blockquote>

@param classes Java 类型的数组
@return    此 URL 的内容对象，它为 classes 数组中指定的类型的第一个匹配项。如果所有请求类型都不受支持，则返回 null。
@exception  IOException 如果发生 I/O 异常。
@see        java.net.URLConnection#getContent(Class[])
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.net.URL.setURLStreamHandlerFactory(URLStreamHandlerFactory fac)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置应用程序的 <code>URLStreamHandlerFactory</code>。在一个给定的 Java 虚拟机中，此方法最多只能调用一次。

<p> <code>URLStreamHandlerFactory</code> 实例用于从协议名称构造流协议处理程序。

<p> 如果有安全管理器，此方法首先调用安全管理器的 <code>checkSetFactory</code> 方法以确保允许该操作。这可能会导致 SecurityException 异常。

@param      fac   需要的工厂。
@exception  Error  如果应用程序已经设置了工厂。
@exception  SecurityException  如果安全管理器存在并且其 <code>checkSetFactory</code> 方法不允许进行此操作。
@see        java.net.URL#URL(java.lang.String, java.lang.String, int, java.lang.String)
@see        java.net.URLStreamHandlerFactory
@see        SecurityManager#checkSetFactory

<!-- END DATA -->
<!-- BEGIN KEY -->
private synchronized void java.net.URL.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
调用 readObject，以便从流中恢复 URL 的状态。它读取 URL 的各个组成部分并查找本地流处理程序。

<!-- END DATA -->
<!-- BEGIN KEY -->
private synchronized void java.net.URL.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
调用 WriteObject，将 URL 的状态保存到 ObjectOutputStream 中。不保存该处理程序，因为它特定于此系统。

@serialData 默认的写入对象的值。当读取返回时，reader 必须确保调用的具有协议变量的 getURLStreamHandler 返回有效的 URLStreamHandler，如果返回无效的 URLStreamHandler，则抛出 IOException 异常。

<!-- END DATA -->
