<!-- BEGIN KEY -->
public final class java.net.DatagramPacket extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示数据报包。 
 <p>
数据报包用来实现无连接包投递服务。每条报文仅根据该包中包含的信息从一台机器路由到另一台机器。从一台机器发送到另一台机器的多个包可能选择不同的路由，也可能按不同的顺序到达。不对包投递做出保证。

@author  Pavani Diwanji
@author  Benjamin Renaud
@version 1.43, 12/19/03
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.DatagramPacket(byte[] buf, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造 <code>DatagramPacket</code>，用来接收长度为 <code>length</code> 的包，在缓冲区中指定了偏移量。
 <p>
<code>length</code> 参数必须小于等于 <code>buf.length</code>。 

@param   buf      保存传入数据报的缓冲区。
@param   offset   缓冲区的偏移量
@param   length   读取的字节数。

@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.DatagramPacket(byte[] buf, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造 <code>DatagramPacket</code>，用来接收长度为 <code>length</code> 的数据包。 
 <p>
<code>length</code> 参数必须小于等于 <code>buf.length</code>。 

@param   buf  保存传入数据报的缓冲区。
@param   len   要读取的字节数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.DatagramPacket(byte[] buf, int offset, int length, InetAddress address, int port)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造数据报包，用来将长度为 <code>length</code> 偏移量为 <code>offset</code> 的包发送到指定主机上的指定端口号。<code>length</code> 参数必须小于等于 <code>buf.length</code>。

@param   buf  包数据。
@param   offset   包数据偏移量。
@param   length   包数据长度。
@param   address  目的地址。
@param   port     目的端口号。
@see java.net.InetAddress

@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.DatagramPacket(byte[] buf, int offset, int length, SocketAddress address) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造数据报包，用来将长度为 <code>length</code> 偏移量为 <code>offset</code> 的包发送到指定主机上的指定端口号。<code>length</code> 参数必须小于等于 <code>buf.length</code>。

@param   buf  包数据。
@param   offset   包数据偏移量。
@param   length   包数据长度。
@param   address  目的套接字地址。
@throws  IllegalArgumentException 如果地址类型不受支持
@see java.net.InetAddress

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.DatagramPacket(byte[] buf, int length, InetAddress address, int port)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造数据报包，用来将长度为 <code>length</code> 的包发送到指定主机上的指定端口号。<code>length</code> 参数必须小于等于 <code>buf.length</code>。 

@param   buf  包数据。
@param   length   包长度。
@param   address  目的地址。
@param   port     目的端口号。
@see     java.net.InetAddress

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.DatagramPacket(byte[] buf, int length, SocketAddress address) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造数据报包，用来将长度为 <code>length</code> 的包发送到指定主机上的指定端口号。<code>length</code> 参数必须小于等于 <code>buf.length</code>。 

@param   buf  包数据。
@param   length   包长度。
@param   address  目的地址。
@throws  IllegalArgumentException 如果地址类型不受支持
@since 1.4
@see     java.net.InetAddress

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.net.InetAddress java.net.DatagramPacket.getAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回某台机器的 IP 地址，此数据报将要发往该机器或者是从该机器接收到的。

@return  某台机器的 IP 地址，此数据报将要发往该机器或者是从该机器接收到的。
@see     java.net.InetAddress
@see #setAddress(java.net.InetAddress)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.net.DatagramPacket.getPort()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回某台远程主机的端口号，此数据报将要发往该主机或者是从该主机接收到的。

@return  返回某台远程主机的端口号，此数据报将要发往该主机或者是从该主机接收到的。
@see #setPort(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized byte[] java.net.DatagramPacket.getData()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回数据缓冲区。接收到的或将要发送的数据从缓冲区中的偏移量 <code>offset</code> 处开始，持续 <code>length</code> 长度。

@return  用来接收或发送数据的缓冲区
@see #setData(byte[], int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.net.DatagramPacket.getOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回将要发送或接收到的数据的偏移量。

@return  将要发送或接收到的数据的偏移量。

@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.net.DatagramPacket.getLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回将要发送或接收到的数据的长度。

@return  将要发送或接收到的数据的长度。
@see #setLength(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.net.DatagramPacket.setData(byte[] buf, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->

为此包设置数据缓冲区。此方法设置包的数据、长度和偏移量。

@param buf 要为此包设置的缓冲区。

@param offset 数据中的偏移量

@param length 数据的长度和/或用来接收数据的缓冲区长度。

@exception NullPointerException 如果参数为 null。

@see #getData
@see #getOffset
@see #getLength

@since 1.2 

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.net.DatagramPacket.setAddress(InetAddress iaddr)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置要将此数据报发往的那台机器的 IP 地址。
@param iaddr <code>InetAddress</code>
@since   JDK1.1
@see #getAddress()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.net.DatagramPacket.setPort(int iport)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置要将此数据报发往的远程主机上的端口号。
@param iport 端口号
@since   JDK1.1
@see #getPort()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.net.DatagramPacket.setSocketAddress(SocketAddress address)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置要将此数据报发往的远程主机的 SocketAddress（通常为 IP 地址 + 端口号）。

@param address <code>SocketAddress</code>
@throws  IllegalArgumentException 如果地址为 null 或为不受此套接字支持的 SocketAddress 子类。
 
@since 1.4
@see #getSocketAddress

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.net.SocketAddress java.net.DatagramPacket.getSocketAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取要将此包发送到的或发出此数据报的远程主机的 SocketAddress（通常为 IP 地址 + 端口号）。

@return <code>SocketAddress</code>
@since 1.4
@see #setSocketAddress

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.net.DatagramPacket.setData(byte[] buf)
<!-- END KEY -->
<!-- BEGIN DATA -->

为此包设置数据缓冲区。将此 DatagramPacket 的偏移量设置为 0，长度设置为 <code>buf</code> 的长度。

@param buf 要为此包设置的缓冲区。

@exception NullPointerException 如果参数为 null。

@see #getLength
@see #getData

@since JDK1.1 

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.net.DatagramPacket.setLength(int length)
<!-- END KEY -->
<!-- BEGIN DATA -->

为此包设置长度。包的长度是指包数据缓冲区中将要发送的字节数，或用来接收数据的包数据缓冲区的字节数。长度必须小于等于偏移量与包缓冲区长度之和。

@param length 要为此包设置的长度。
 
@exception IllegalArgumentException 如果长度为负或大于包数据缓冲区长度。

@see #getLength
@see #setData

@since JDK1.1 

<!-- END DATA -->
