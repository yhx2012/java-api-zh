<!-- BEGIN KEY -->
public class java.sql.SQLWarning extends java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
<P>提供关于数据库访问警告信息的异常。这些警告直接链接到导致报告警告的方法所在的对象。  
 <P>
警告可以从 <code>Connection</code>、<code>Statement</code> 和 <code>ResultSet</code> 对象中获得。试图在已经关闭的连接上获取警告将导致抛出异常。类似地，试图在已经关闭的语句上或已经关闭的结果集上获取警告也将导致抛出异常。注意，关闭语句时还会关闭它可能生成的结果集。

@see Connection#getWarnings
@see Statement#getWarnings
@see ResultSet#getWarnings 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLWarning(String reason, String SQLState, int vendorCode)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有给定 <code>reason</code>、<code>SQLState</code> 和 <code>vendorCode</code> 的 <code>SQLWarning</code> 对象。<code>cause</code> 没有初始化，随后可以调用 {@link Throwable#initCause(java.lang.Throwable)} 方法初始化。
 <p>
@param reason 对警告的描述
@param SQLState 标识警告的 XOPEN 或 SQL:2003 代码
@param vendorCode 特定于数据库供应商的警告代码

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLWarning(String reason, String SQLState)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个具有给定 <code>reason</code> 和 <code>SQLState</code> 的 <code>SQLWarning</code> 对象。<code>cause</code> 没有初始化，随后可以调用 {@link Throwable#initCause(java.lang.Throwable)} 方法初始化。供应商代码被初始化为 0。
 <p>
 @param reason 对警告的描述
 @param SQLState 标识警告的 XOPEN 或 SQL 2003 代码

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLWarning(String reason)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个具有给定 <code>reason</code> 的 <code>SQLWarning</code> 对象。<code>SQLState</code> 被初始化为 <code>null</code>，供应商代码被初始化为 0。<code>cause</code> 没有初始化，随后可以调用 {@link Throwable#initCause(java.lang.Throwable)} 方法初始化。
 <p>
 @param reason 对警告的描述 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLWarning()
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个 <code>SQLWarning</code> 对象。<code>reason</code> 和 <code>SQLState</code> 被初始化为 <code>null</code>，供应商代码被初始化为 0。<code>cause</code> 没有初始化，随后可以调用 {@link Throwable#initCause(java.lang.Throwable)} 方法初始化。
 <p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLWarning(Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个具有给定 <code>cause</code> 的 <code>SQLWarning</code> 对象。<code>SQLState</code> 被初始化为 <code>null</code>，供应商代码被初始化为 0。如果 <code>cause==null</code>，则 <code>reason</code> 被初始化为 <code>null</code>；如果 <code>cause!=null</code>，则初始化为 <code>cause.toString()</code>。
 <p>
 @param cause 导致此 <code>SQLWarning</code> 的底层原因（保存该 cause，以供以后通过 <code>getCause()</code> 方法获取）；此参数可以为 null，指示 cause 不存在或未知。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLWarning(String reason, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个具有给定 <code>reason</code> 和 <code>cause</code> 的 <code>SQLWarning</code> 对象。<code>SQLState</code> 被初始化为 <code>null</code>，供应商代码被初始化为 0。
 <p>
 @param reason 对警告的描述
 @param cause  导致此 <code>SQLWarning</code> 的底层原因（保存该 cause，以供以后通过 <code>getCause()</code> 方法获取）；此参数可以为 null，指示 cause 不存在或未知。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLWarning(String reason, String SQLState, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个具有给定 <code>reason</code>、<code>SQLState</code> 和 <code>cause</code> 的 <code>SQLWarning</code> 对象。供应商代码被初始化为 0。
 <p>
 @param reason 对警告的描述
 @param SQLState 标识警告的 XOPEN 或 SQL:2003 代码
 @param cause 导致此 <code>SQLWarning</code> 的底层原因（保存该 cause，以供以后通过 <code>getCause()</code> 方法获取）；此参数可以为 null，指示 cause 不存在或未知。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLWarning(String reason, String SQLState, int vendorCode, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个具有给定 <code>reason</code>、<code>SQLState</code>、<code>vendorCode</code> 和 <code>cause</code> 的 <code>SQLWarning</code> 对象。
 <p>
 @param reason 对警告的描述
 @param SQLState 标识警告的 XOPEN 或 SQL:2003 代码
 @param vendorCode 特定于数据库供应商的警告代码
 @param cause 导致此 <code>SQLWarning</code> 的底层原因（保存该 cause，以供以后通过 <code>getCause()</code> 方法获取）；此参数可以为 null，指示 cause 不存在或未知。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLWarning java.sql.SQLWarning.getNextWarning()
<!-- END KEY -->
<!-- BEGIN DATA -->
通过 <code>setNextWarning</code> 获取链接到此 <code>SQLWarning</code> 对象的警告。

@return 链接中的下一个 <code>SQLException</code> 对象；如果不存在，则返回 <code>null</code>
@see #setNextWarning

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLWarning.setNextWarning(SQLWarning w)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>SQLWarning</code> 对象添加到链接的末尾。

@param w <code>SQLException</code> 链接的新末尾
@see #getNextWarning

<!-- END DATA -->
