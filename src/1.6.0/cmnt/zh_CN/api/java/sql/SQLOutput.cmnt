<!-- BEGIN KEY -->
public interface java.sql.SQLOutput
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将用户定义类型的属性写回数据库的输出流。此接口（仅用于自定义映射关系）供应用程序使用，程序员永远不能直接调用其方法。
<p>将实现接口 <code>SQLData</code> 的类的对象作为参数传递给 SQL 语句时，JDBC 驱动程序将调用方法 <code>SQLData.getSQLType</code> 来确定要传递到数据库的 SQL 数据的种类。然后，驱动程序创建 <code>SQLOutput</code> 的实例并将其传递给方法 <code>SQLData.writeSQL</code>。方法 <code>writeSQL</code> 依次调用适当的 <code>SQLOutput</code> <i>writer</i> 方法（<code>writeBoolean</code>、<code>writeCharacterStream</code> 等），将数据作为 SQL 用户定义类型的表示形式从 <code>SQLData</code> 对象写入 <code>SQLOutput</code> 输出流。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeString(String x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将下一个属性作为 Java 编程语言中的 <code>String</code> 写入流中。

@param x 传递给数据库的值
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeBoolean(boolean x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将下一个属性作为 Java boolean 值写入流。将下一个属性作为 Java 编程语言中的 <code>String</code> 写入流中。

@param x 传递给数据库的值
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeByte(byte x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将下一个属性作为 Java byte 值写入流中。将下一个属性作为 Java 编程语言中的 <code>String</code> 写入流中。

@param x 传递给数据库的值
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeShort(short x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将下一个属性作为 Java short 值写入流中。将下一个属性作为 Java 编程语言中的 <code>String</code> 写入流中。

@param x 传递给数据库的值
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeInt(int x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将下一个属性作为 Java int 值写入流中。将下一个属性作为 Java 编程语言中的 <code>String</code> 写入流中。

@param x 传递给数据库的值
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeLong(long x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将下一个属性作为 Java long 值写入流中。将下一个属性作为 Java 编程语言中的 <code>String</code> 写入流中。

@param x 传递给数据库的值
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeFloat(float x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将下一个属性作为 Java float 值写入流中。将下一个属性作为 Java 编程语言中的 <code>String</code> 写入流中。

@param x 传递给数据库的值
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeDouble(double x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将下一个属性作为 Java double 值写入流中。将下一个属性作为 Java 编程语言中的 <code>String</code> 写入流中。

@param x 传递给数据库的值
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeBigDecimal(BigDecimal x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将下一个属性作为 java.math.BigDecimal 对象写入流中。将下一个属性作为 Java 编程语言中的 <code>String</code> 写入流中。

@param x 传递给数据库的值
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeBytes(byte[] x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将下一个属性作为字节数组写入流中。将下一个属性作为 Java 编程语言中的 <code>String</code> 写入流中。

@param x 传递给数据库的值
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeDate(Date x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将下一个属性作为 java.sql.Date 对象写入流中。将下一个属性作为 Java 编程语言中的 <code>java.sql.Date</code> 对象写入流中。

@param x 传递给数据库的值
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeTime(Time x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将下一个属性作为 java.sql.Time 对象写入流中。将下一个属性作为 Java 编程语言中的 <code>java.sql.Date</code> 对象写入流中。

@param x 传递给数据库的值
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeTimestamp(Timestamp x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将下一个属性作为 java.sql.Timestamp 对象写入流中。将下一个属性作为 Java 编程语言中的 <code>java.sql.Date</code> 对象写入流中。

@param x 传递给数据库的值
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeCharacterStream(Reader x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将下一个属性作为 Unicode 字符的流写入流中。

@param x 传递给数据库的值
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeAsciiStream(InputStream x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将下一个属性作为 ASCII 字符流写入流中。

@param x 传递给数据库的值
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeBinaryStream(InputStream x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将下一个属性作为未解释字节流写入流中。

@param x 传递给数据库的值
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeObject(SQLData x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定 <code>SQLData</code> 对象中包含的数据写入流中。当 <code>SQLData</code> 对象为 <code>null</code> 时，此方法将 SQL <code>NULL</code> 写入流中。否则，它将调用给定对象的 <code>SQLData.writeSQL</code> 方法，该方法将对象的属性写入流中。方法 <code>SQLData.writeSQ</code> 的实现调用适当的 <code>SQLOutput</code> writer 方法，依次写入对象的每个属性。从 <code>SQLInput</code> 输入流读取属性和将属性写入 <code>SQLOutput</code> 输出流都必须按照在用户定义类型的 SQL 定义中将它们列出的顺序进行。
 
@param x 表示 SQL 结构或不同类型的数据的对象
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeRef(Ref x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 SQL <code>REF</code> 值写入流中。

@param x 表示 SQL 的数据的 <code>Ref</code> 对象 <code>REF</code> value
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeBlob(Blob x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 SQL <code>BLOB</code> 值写入流中。

@param x 表示 SQL <code>BLOB</code> 值的数据的 <code>Blob</code> 对象

@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeClob(Clob x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 SQL <code>CLOB</code> 值写入流中。

@param x 表示 SQL <code>CLOB</code> 值的数据的 <code>Clob</code> 对象

@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeStruct(Struct x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 SQL 结构类型值写入流中。

@param x 表示 SQL 结构类型的数据的 <code>Struct</code> 对象 

@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeArray(Array x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 SQL <code>ARRAY</code> 值写入流中。

@param x 表示 SQL <code>ARRAY</code> 类型的数据的 <code>Array</code> 对象

@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeURL(URL x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->

将 SQL <code>DATALINK</code> 值写入流中。

@param x 表示 SQL DATALINK 类型的数据的 <code>java.net.URL</code> 对象

@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeNString(String x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将下一个属性以 Java 编程语言中 <code>String</code> 的形式写入流中。在将该属性发送给流时，驱动程序将其转换为 SQL <code>NCHAR</code>、<code>NVARCHAR</code> 或 <code>LONGNVARCHAR</code> 值（具体取决于该参数相对于驱动程序在 <code>NVARCHAR</code> 值上的限制的大小）。

 @param x 传递给数据库的值
 @exception SQLException 如果发生数据库访问错误
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeNClob(NClob x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将 SQL <code>NCLOB</code> 值写入流中。

 @param x 表示 SQL <code>NCLOB</code> 值数据的 <code>NClob</code> 对象

 @exception SQLException 如果发生数据库访问错误
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeRowId(RowId x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将 SQL <code>ROWID</code> 值写入流中。

 @param x 表示 SQL <code>ROWID</code> 值的数据的 <code>RowId</code> 对象

 @exception SQLException 如果发生数据库访问错误
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLOutput.writeSQLXML(SQLXML x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 SQL <code>XML</code> 值写入流中。

@param x 表示 SQL <code>XML</code> 值数据的 <code>SQLXML</code> 对象

@throws SQLException 如果发生数据库访问错误，如果没有为 <code>SQLXML</code> 对象关闭 <code>java.xml.transform.Result</code>、<code>Writer</code> 或 <code>OutputStream</code>，或者在处理 XML 值的过程中发生错误。异常的 <code>getCause</code> 方法可以提供更详细的异常信息，例如，如果该流不包含有效的 XML。
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.6

<!-- END DATA -->
