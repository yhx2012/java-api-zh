<!-- BEGIN KEY -->
public interface java.sql.SQLInput
<!-- END KEY -->
<!-- BEGIN DATA -->
一个输入流，它包含表示 SQL 结构化类型或 SQL 不同类型的实例的值组成的流。此接口（仅用于自定义映射关系）供应用程序在后台使用，程序员永远不能直接调用 <code>SQLInput</code> 方法。<i>reader</i> 方法（<code>readLong</code>、<code>readBytes</code> 等）为 <code>SQLData</code> 接口的实现提供了读取 <code>SQLInput</code> 对象值的一种方式。根据 <code>SQLData</code> 中的描述，必须按照其相应属性在类型的 SQL 定义中出现的顺序调用 reader 方法。方法 <code>wasNull</code> 用于确定读取的最后一个值是否是 SQL <code>NULL</code>。
<P>当用实现接口 <code>SQLData</code> 的类的对象调用方法 <code>getObject</code> 时，JDBC 驱动程序调用方法 <code>SQLData.getSQLType</code> 来确定要自定义映射的用户定义类型 (UDT) 的 SQL 类型。驱动程序创建一个 <code>SQLInput</code> 实例，并用 UDT 的属性填充它。然后，驱动程序将输入流传递给方法 <code>SQLData.readSQL</code>，而该方法在其从输入流读取属性的实现中依次调用 <code>SQLInput</code> reader 方法。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.sql.SQLInput.readString() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取流中的下一个属性并将其作为 Java 编程语言中的 <code>String</code> 返回。

@return 属性；如果值为 SQL <code>NULL</code>，则返回 <code>null</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.SQLInput.readBoolean() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取流中的下一个属性并将其作为 Java 编程语言中的 <code>boolean</code> 返回。

@return 属性；如果值为 SQL <code>NULL</code>，则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte java.sql.SQLInput.readByte() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取流中的下一个属性并将其作为 Java 编程语言中的 <code>byte</code> 返回。

@return 属性；如果值为 SQL <code>NULL</code>，则返回 <code>0</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public short java.sql.SQLInput.readShort() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取流中的下一个属性并将其作为 Java 编程语言中的 <code>short</code> 返回。

@return 属性；如果值为 SQL <code>NULL</code>，则返回 <code>0</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.SQLInput.readInt() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取流中的下一个属性并将其作为 Java 编程语言中的 <code>int</code> 返回。

@return 属性；如果值为 SQL <code>NULL</code>，则返回 <code>0</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.sql.SQLInput.readLong() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取流中的下一个属性并将其作为 Java 编程语言中的 <code>long</code> 返回。

@return 属性；如果值为 SQL <code>NULL</code>，则返回 <code>0</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.sql.SQLInput.readFloat() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取流中的下一个属性并将其作为 Java 编程语言中的 <code>float</code> 返回。

@return 属性；如果值为 SQL <code>NULL</code>，则返回 <code>0</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.sql.SQLInput.readDouble() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取流中的下一个属性并将其作为 Java 编程语言中的 <code>double</code> 返回。

@return 属性；如果值为 SQL <code>NULL</code>，则返回 <code>0</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.BigDecimal java.sql.SQLInput.readBigDecimal() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取流中的下一个属性并将其作为 Java 编程语言中的 <code>java.math.BigDecimal</code> 对象返回。

@return 属性；如果值为 SQL <code>NULL</code>，则返回 <code>null</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] java.sql.SQLInput.readBytes() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取流中的下一个属性并将其作为 Java 编程语言中的字节数组返回。

@return 属性；如果值为 SQL <code>NULL</code>，则返回 <code>null</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Date java.sql.SQLInput.readDate() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取流中的下一个属性并将其作为 <code>java.sql.Date</code> 对象返回。

@return 属性；如果值为 SQL <code>NULL</code>，则返回 <code>null</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Time java.sql.SQLInput.readTime() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取流中的下一个属性并将其作为 <code>java.sql.Time</code> 对象返回。

@return 属性；如果值为 SQL <code>NULL</code>，则返回 <code>null</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Timestamp java.sql.SQLInput.readTimestamp() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取流中的下一个属性并将其作为 <code>java.sql.Timestamp</code> 对象返回。

@return 属性；如果值为 SQL <code>NULL</code>，则返回 <code>null</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Reader java.sql.SQLInput.readCharacterStream() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取流中的下一个属性并将其作为 Unicode 字符流返回。

@return 属性；如果值为 SQL <code>NULL</code>，则返回 <code>null</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream java.sql.SQLInput.readAsciiStream() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取流中的下一个属性并将其作为 ASCII 字符流返回。

@return 属性；如果值为 SQL <code>NULL</code>，则返回 <code>null</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream java.sql.SQLInput.readBinaryStream() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取流中的下一个属性并将其作为未解释的字节流返回。

@return 属性；如果值为 SQL <code>NULL</code>，则返回 <code>null</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.sql.SQLInput.readObject() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取流头中的下一个属性并将其作为 Java 编程语言中的 <code>Object</code> 返回。返回对象的实际类型由默认类型映射关系和此流的类型映射表中存在的自定义设置来确定。

<P>类型映射表在将流传递给应用程序前通过 JDBC 驱动程序在流中注册。

<P>当流的头 (head of the stream) 中的数据为 SQL <code>NULL</code> 时，该方法返回 <code>null</code>。如果数据为 SQL 结构化类型或不同类型，则该方法确定了流的头中的数据的 SQL 类型。如果流的类型映射表具有该 SQL 类型的项，则驱动程序将构造相应类的对象，并对该对象调用 <code>SQLData.readSQL</code> 方法，该方法使用为它描述的协议从流读取其他数据。

@return 作为 Java 编程语言中的 <code>Object</code> 返回流的头中的数据；如果数据为 SQL <code>NULL</code>，则返回 <code>null</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Ref java.sql.SQLInput.readRef() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流读取 SQL <code>REF</code> 值并将其作为 Java 编程语言中的 <code>Ref</code> 对象返回。

@return 表示流的头中的 SQL <code>REF</code> 值的 <code>Ref</code> 对象；如果读取的值为 SQL <code>NULL</code>，则返回 <code>null</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Blob java.sql.SQLInput.readBlob() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取 SQL <code>BLOB</code> 值并将其作为 Java 编程语言中的 <code>Blob</code> 对象返回。

@return 表示流的头中的 SQL <code>BLOB</code> 值数据的 <code>Blob</code> 对象；如果读取的值为 SQL <code>NULL</code>，则返回 <code>null</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Clob java.sql.SQLInput.readClob() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取 SQL <code>CLOB</code> 值并将其作为 Java 编程语言中的 <code>Clob</code> 对象返回。

@return 表示流的头中的 SQL <code>CLOB</code> 值数据的 <code>Clob</code> 对象；如果读取的值为 SQL <code>NULL</code>，则返回 <code>null</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Array java.sql.SQLInput.readArray() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取 SQL <code>ARRAY</code> 值并将其作为 Java 编程语言中的 <code>Array</code> 对象返回。

@return 表示流的头中的 SQL <code>ARRAY</code> 值数据的 <code>Array</code> 对象；如果读取的值为 SQL <code>NULL</code>，则返回 <code>null</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.SQLInput.wasNull() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取最后一个读取的值是否为 SQL <code>NULL</code>。
 
@return 如果最近读取的 SQL 值为 SQL <code>NULL</code>，则返回 <code>true</code>；否则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL java.sql.SQLInput.readURL() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取 SQL <code>DATALINK</code> 值并将其作为 Java 编程语言中的 <code>java.net.URL</code> 对象返回。
 
@return <code>java.net.URL</code> 对象。
@exception SQLException 如果发生数据库访问错误或者 URL 是错误的
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.NClob java.sql.SQLInput.readNClob() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 从流中读取一个 SQL <code>NCLOB</code> 值，并以 Java 编程语言中 <code>NCLOB</code> 对象的形式返回。

 @return 表示流的头中的 SQL <code>NCLOB</code> 值数据的 <code>NClob</code> 对象；如果读取的值为 SQL <code>NULL</code>，则返回 <code>null</code>
 @exception SQLException 如果发生数据库访问错误
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.sql.SQLInput.readNString() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取流中的下一个属性，并以 Java 编程语言中 <code>String</code> 的形式返回。此方法用于访问 <code>NCHAR</code>、<code>NVARCHAR</code> 和 <code>LONGNVARCHAR</code> 列时。

 @return 属性；如果该值为 SQL <code>NULL</code>，则返回 <code>null</code>
 @exception SQLException 如果发生数据库访问错误
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLXML java.sql.SQLInput.readSQLXML() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 从流中读取一个 SQL <code>XML</code> 值，并以 Java 编程语言中 <code>SQLXML</code> 对象的形式返回。

 @return 表示流的头中的 SQL <code>XML</code> 值数据的 <code>SQLXML</code> 对象；如果读取的值为 SQL <code>NULL</code>，则返回 <code>null</code>
 @exception SQLException 如果发生数据库访问错误
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.RowId java.sql.SQLInput.readRowId() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 从流中读取一个 SQL <code>ROWID</code> 值，并以 Java 编程语言中 <code>RowId</code> 对象的形式返回。 

 @return 表示流的头中的 SQL <code>ROWID</code> 值数据的 <code>RowId</code> 对象；如果读取的值为 SQL <code>NULL</code>，则返回 <code>null</code>
 @exception SQLException 如果发生数据库访问错误
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
