<!-- BEGIN KEY -->
public class java.sql.BatchUpdateException extends java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
进行批量更新操作期间发生错误时抛出的 {@link SQLException} 子类。除了 {@link SQLException} 提供的信息以外，<code>BatchUpdateException</code> 还提供批量更新期间成功执行的所有命令的更新计数，也就是发生错误之前执行的所有命令的更新计数。更新计数数组中元素的顺序对应于将命令添加到批处理中的顺序。
 <P>
批量更新中的命令无法正确执行并抛出 <code>BatchUpdateException</code> 之后，驱动程序可以继续处理批处理中的剩余命令，也可以不再进行处理。如果驱动程序在失败后继续进行处理，那么批处理的每个命令在 <code>BatchUpdateException.getUpdateCounts</code> 方法返回的数组中都有一个对应的元素，而不仅仅是发生错误前成功执行的命令才有对应的元素。在驱动程序继续处理命令的情况下，所有执行失败的命令对应的数组元素都是 <code>Statement.EXECUTE_FAILED</code>。
 <P>
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private int[] java.sql.BatchUpdateException.updateCounts
<!-- END KEY -->
<!-- BEGIN DATA -->
描述批处理执行结果的数组。
 @serial
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.BatchUpdateException(String reason, String SQLState, int vendorCode, int[] updateCounts)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个使用给定 <code>reason</code>、<code>SQLState</code>、<code>vendorCode</code> 和 <code>updateCounts</code> 初始化的 <code>BatchUpdateException</code> 对象。<code>cause</code> 没有初始化，随后可以调用 {@link Throwable#initCause(java.lang.Throwable)} 方法进行初始化。
<p>
 @param reason 对错误的描述
 @param SQLState 标识异常的 XOPEN 或 SQL:2003 代码
 @param vendorCode 供特定数据库供应商使用的异常代码
 @param updateCounts 一个 <code>int</code> 数组，对于命令失败后继续进行处理的 JDBC 驱动程序，每个数组元素对应批处理中的每个 SQL 命令，指示更新计数、<code>Statement.SUCCESS_NO_INFO</code> 或 <code>Statement.EXECUTE_FAILED</code>；对于命令失败后停止处理的 JDBC 驱动程序，每个数组元素对应失败之前批处理中的每个 SQL 命令，指示更新计数或 <code>Statement.SUCCESS_NO_INFO</code>
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.BatchUpdateException(String reason, String SQLState, int[] updateCounts)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个使用给定 <code>reason</code>、<code>SQLState</code> 和 <code>updateCounts</code> 初始化的 <code>BatchUpdateException</code> 对象。<code>cause</code> 没有初始化，随后可调用 {@link Throwable#initCause(java.lang.Throwable)} 方法进行初始化。供应商代码被初始化为 0。
<p>
 @param reason 对异常的描述
 @param SQLState 标识异常的 XOPEN 或 SQL:2003 代码
 @param updateCounts 一个 <code>int</code> 数组，对于命令失败后继续进行处理的 JDBC 驱动程序，每个数组元素对应批处理中的每个 SQL 命令，指示更新计数、<code>Statement.SUCCESS_NO_INFO</code> 或 <code>Statement.EXECUTE_FAILED</code>；对于命令失败后停止处理的 JDBC 驱动程序，每个数组元素对应失败之前批处理中的每个 SQL 命令，指示更新计数或 <code>Statement.SUCCESS_NO_INFO</code>

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.BatchUpdateException(String reason, int[] updateCounts)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个使用给定 <code>reason</code> 和 <code>updateCounts</code> 初始化的 <code>BatchUpdateException</code> 对象。<code>cause</code> 没有初始化，随后可调用 {@link Throwable#initCause(java.lang.Throwable)} 方法进行初始化。<code>SQLState</code> 被初始化为 <code>null</code>，供应商代码被初始化为 0。
<p>
 @param reason 对异常的描述
 @param updateCounts 一个 <code>int</code> 数组，对于命令失败后继续进行处理的 JDBC 驱动程序，每个数组元素对应批处理中的每个 SQL 命令，指示更新计数、<code>Statement.SUCCESS_NO_INFO</code> 或 <code>Statement.EXECUTE_FAILED</code>；对于命令失败后停止处理的 JDBC 驱动程序，每个数组元素对应失败之前批处理中的每个 SQL 命令，指示更新计数或 <code>Statement.SUCCESS_NO_INFO</code>

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.BatchUpdateException(int[] updateCounts)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个使用给定 <code>updateCounts</code> 初始化的 <code>BatchUpdateException</code> 对象。<code>cause</code> 没有初始化，随后可调用 {@link Throwable#initCause(java.lang.Throwable)} 方法进行初始化。<code>reason</code> 和 <code>SQLState</code> 被初始化为 null，供应商代码被初始化为 0。
<p>
 @param updateCounts 一个 <code>int</code> 数组，对于命令失败后继续进行处理的 JDBC 驱动程序，每个数组元素对应批处理中的每个 SQL 命令，指示更新计数、<code>Statement.SUCCESS_NO_INFO</code> 或 <code>Statement.EXECUTE_FAILED</code>；对于命令失败后停止处理的 JDBC 驱动程序，每个数组元素对应失败之前批处理中的每个 SQL 命令，指示更新计数或 <code>Statement.SUCCESS_NO_INFO</code>

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.BatchUpdateException()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>BatchUpdateException</code> 对象。<code>reason</code>、<code>SQLState</code> 和 <code>updateCounts</code> 被初始化为 <code>null</code>，供应商代码被初始化为 0。<code>cause</code> 没有初始化，随后可调用 {@link Throwable#initCause(java.lang.Throwable)} 方法进行初始化。
<p>
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.BatchUpdateException(Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个使用给定 <code>cause</code> 初始化的 <code>BatchUpdateException</code> 对象。<code>SQLState</code> 和 <code>updateCounts</code> 被初始化为 <code>null</code>，供应商代码被初始化为 0。如果 <code>cause==null</code>，那么 <code>reason</code> 被初始化为 <code>null</code>；如果 <code>cause!=null</code>，则初始化为 <code>cause.toString()</code>。
 
@param cause 导致此 <code>SQLException</code> 的底层原因（保存该 cause，以供以后通过 <code>getCause()</code> 方法获取）；此参数可以为 null，指示 cause 不存在或未知。
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.BatchUpdateException(int[] updateCounts, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个使用给定 <code>cause</code> 和 <code>updateCounts</code> 初始化的 <code>BatchUpdateException</code> 对象。<code>SQLState</code> 被初始化为 <code>null</code>，供应商代码被初始化为 0。如果 <code>cause==null</code>，那么 <code>reason</code> 被初始化为 <code>null</code>；如果 <code>cause!=null</code>，则初始化为 <code>cause.toString()</code>。

 @param updateCounts  一个 <code>int</code> 数组，对于命令失败后继续进行处理的 JDBC 驱动程序，每个数组元素对应批处理中的每个 SQL 命令，指示更新计数、<code>Statement.SUCCESS_NO_INFO</code> 或 <code>Statement.EXECUTE_FAILED</code>；对于命令失败后停止处理的 JDBC 驱动程序，每个数组元素对应失败之前批处理中的每个 SQL 命令，指示更新计数或 <code>Statement.SUCCESS_NO_INFO</code>

 @param cause 导致此 <code>SQLException</code> 的底层原因（保存该 cause，以供以后通过 <code>getCause()</code> 方法获取）；此参数可以为 null，指示 cause 不存在或未知。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.BatchUpdateException(String reason, int[] updateCounts, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个使用给定 <code>reason</code>、<code>cause</code> 和 <code>updateCounts</code> 构造的 <code>BatchUpdateException</code> 对象。<code>SQLState</code> 被初始化为 <code>null</code>，供应商代码被初始化为 0。

 @param reason 对异常的描述
 @param updateCounts  一个 <code>int</code> 数组，对于命令失败后继续进行处理的 JDBC 驱动程序，每个数组元素对应批处理中的每个 SQL 命令，指示更新计数、<code>Statement.SUCCESS_NO_INFO</code> 或 <code>Statement.EXECUTE_FAILED</code>；对于命令失败后停止处理的 JDBC 驱动程序，每个数组元素对应失败之前批处理中的每个 SQL 命令，指示更新计数或 <code>Statement.SUCCESS_NO_INFO</code>

 @param cause 导致此 <code>SQLException</code> 的底层原因（保存该 cause，以供以后通过 <code>getCause()</code> 方法获取）；此参数可以为 null，指示 cause 不存在或未知。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.BatchUpdateException(String reason, String SQLState, int[] updateCounts, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个使用给定 <code>reason</code>、<code>SQLState</code>、<code>cause</code> 和 <code>updateCounts</code> 初始化的 <code>BatchUpdateException</code> 对象。供应商代码被初始化为 0。    

 @param reason 对异常的描述
 @param SQLState 标识异常的 XOPEN 或 SQL:2003 代码
 @param updateCounts  一个 <code>int</code> 数组，对于命令失败后继续进行处理的 JDBC 驱动程序，每个数组元素对应批处理中的每个 SQL 命令，指示更新计数、<code>Statement.SUCCESS_NO_INFO</code> 或 <code>Statement.EXECUTE_FAILED</code>；对于命令失败后停止处理的 JDBC 驱动程序，每个数组元素对应失败之前批处理中的每个 SQL 命令，指示更新计数或 <code>Statement.SUCCESS_NO_INFO</code>

 @param cause 导致此 <code>SQLException</code> 的底层原因（保存该 cause，以供以后通过 <code>getCause()</code> 方法获取）；此参数可以为 null，指示 cause 不存在或未知。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.BatchUpdateException(String reason, String SQLState, int vendorCode, int[] updateCounts, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个使用给定 <code>reason</code>、<code>SQLState</code>、<code>vendorCode</code>、<code>cause</code> 和 <code>updateCounts</code> 初始化的 <code>BatchUpdateException</code> 对象。

 @param reason 对异常的描述
 @param SQLState 标识异常的 XOPEN 或 SQL:2003 代码
 @param vendorCode 由特定数据库供应商使用的异常代码 
@param updateCounts  一个 <code>int</code> 数组，对于命令失败后继续进行处理的 JDBC 驱动程序，每个数组元素对应批处理中的每个 SQL 命令，指示更新计数、<code>Statement.SUCCESS_NO_INFO</code> 或 <code>Statement.EXECUTE_FAILED</code>；对于命令失败后停止处理的 JDBC 驱动程序，每个数组元素对应失败之前批处理中的每个 SQL 命令，指示更新计数或 <code>Statement.SUCCESS_NO_INFO</code>

 @param cause 导致此 <code>SQLException</code> 的底层原因（保存该 cause，以供以后通过 <code>getCause()</code> 方法获取）；此参数可以为 null，指示 cause 不存在或未知。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.sql.BatchUpdateException.getUpdateCounts()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取发生此异常前批量更新中成功执行的每个更新语句的更新计数。在某一命令无法正确执行时，实现批量更新的驱动程序可以继续处理批处理中的剩余命令，也可以不再进行处理。如果驱动程序继续处理命令，那么此方法返回的数组所拥有的元素数量将与批处理中的命令数量相同；否则，该数组将包含抛出 <code>BatchUpdateException</code> 之前成功执行的每条命令的更新计数。
<P>
此方法的可能返回值是在 Java 2 SDK 标准版 1.3 版中修改的。这样做是为了使其适应在抛出了 <code>BatchUpdateException</code> 对象之后仍然能够继续处理批量更新中的命令这一新选项。

@return 一个 <code>int</code> 数组，该数组包含发生此错误前成功执行的更新的更新计数。如果驱动程序在发生错误之后仍然继续处理命令，则对批处理中的每条命令返回以下内容之一：
 <OL>
<LI>更新计数
<LI><code>Statement.SUCCESS_NO_INFO</code>，指示成功执行了命令，但受影响的行数是未知的
<LI><code>Statement.EXECUTE_FAILED</code>，指示没有成功地执行命令
 </OL>
@since 1.3

<!-- END DATA -->
