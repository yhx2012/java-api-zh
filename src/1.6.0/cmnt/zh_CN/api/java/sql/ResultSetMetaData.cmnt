<!-- BEGIN KEY -->
public interface java.sql.ResultSetMetaData extends java.sql.Wrapper
<!-- END KEY -->
<!-- BEGIN DATA -->
可用于获取关于 <code>ResultSet</code> 对象中列的类型和属性信息的对象。以下代码片段创建 <code>ResultSet</code> 对象 rs，创建 <code>ResultSetMetaData</code> 对象 rsmd，并使用 rsmd 查找 rs 有多少列，以及 rs 中的第一列是否可以在 <code>WHERE</code> 子句中使用。
 <PRE>

     ResultSet rs = stmt.executeQuery(&quot;SELECT a, b, c FROM TABLE2&quot;);
     ResultSetMetaData rsmd = rs.getMetaData();
     int numberOfColumns = rsmd.getColumnCount();
     boolean b = rsmd.isSearchable(1);

 </PRE>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.ResultSetMetaData.columnNoNulls
<!-- END KEY -->
<!-- BEGIN DATA -->
指示列不允许使用 <code>NULL</code> 值的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.ResultSetMetaData.columnNullable
<!-- END KEY -->
<!-- BEGIN DATA -->
指示列允许使用 <code>NULL</code> 值的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.ResultSetMetaData.columnNullableUnknown
<!-- END KEY -->
<!-- BEGIN DATA -->
指示不知道列的值是否可为 null 的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.ResultSetMetaData.getColumnCount() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>ResultSet</code> 对象中的列数。

@return 列数
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.ResultSetMetaData.isAutoIncrement(int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
指示是否自动为指定列进行编号。

@param column 第一列是 1，第二个列是 2，……
@return 如果是这样，则返回 <code>true</code>；否则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.ResultSetMetaData.isCaseSensitive(int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
指示列的大小写是否有关系。

@param column 第一列是 1，第二个列是 2，……
@return 如果是这样，则返回 <code>true</code>；否则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.ResultSetMetaData.isSearchable(int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
指示是否可以在 where 子句中使用指定的列。

@param column 第一列是 1，第二个列是 2，……
@return 如果是这样，则返回 <code>true</code>；否则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.ResultSetMetaData.isCurrency(int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
指示指定的列是否是一个哈希代码值。

@param column 第一列是 1，第二个列是 2，……
@return 如果是这样，则返回 <code>true</code>；否则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.ResultSetMetaData.isNullable(int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
指示指定列中的值是否可以为 null。		

@param column 第一列是 1，第二个列是 2，……
@return 给定列的状态是否可以为 null 的判断，此状态值是 <code>columnNoNulls</code>、<code>columnNullable</code> 或 <code>columnNullableUnknown</code> 之一
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.ResultSetMetaData.isSigned(int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
指示指定列中的值是否带正负号。

@param column 第一列是 1，第二个列是 2，……
@return 如果是这样，则返回 <code>true</code>；否则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.ResultSetMetaData.getColumnDisplaySize(int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
指示指定列的最大标准宽度，以字符为单位。

@param column 第一列是 1，第二个列是 2，……
@return 允许作为指定列宽度的最大标准字符数
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.sql.ResultSetMetaData.getColumnLabel(int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取用于打印输出和显示的指定列的建议标题。建议标题通常由 SQL <code>AS</code> 子句来指定。如果未指定 SQL <code>AS</code>，则从 <code>getColumnLabel</code> 返回的值将和 <code>getColumnName</code> 方法返回的值相同。

@param column 第一列是 1，第二个列是 2，……
@return 建立列标题
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.sql.ResultSetMetaData.getColumnName(int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定列的名称。

@param column 第一列是 1，第二个列是 2，……
@return 列名称
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.sql.ResultSetMetaData.getSchemaName(int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定列的表模式。

@param column 第一列是 1，第二个列是 2，……
@return 模式名称；如果没有可应用的名称，则返回 &quot;&quot;
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.ResultSetMetaData.getPrecision(int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定列的指定列宽。对于数值型数据，是指最大精度。对于字符型数据，是指字符串长度。对于日期时间的数据类型，是指 String 表示形式的字符串长度（假定为最大允许的小数秒组件）。对于二进制型数据，是指字节长度。对于 ROWID 数据类型，是指字节长度。对于其列大小不可用的数据类型，则返回 0。 
@param column 第一列是 1，第二个列是 2，……
@return 精度
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.ResultSetMetaData.getScale(int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定列的小数点右边的位数。对于其标度不可用的数据类型，则返回 0。

@param column 第一列是 1，第二个列是 2，……
@return 标度
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.sql.ResultSetMetaData.getTableName(int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定列的名称。

@param column 第一列是 1，第二个列是 2，……
@return 表名称；如果没有可应用的名称，则返回 &quot;&quot;
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.sql.ResultSetMetaData.getCatalogName(int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定列的表目录名称。

@param column 第一列是 1，第二个列是 2，……
@return 在其中显示给定列的表的目录名称；如果可应用的名称，则返回 &quot;&quot;
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.ResultSetMetaData.getColumnType(int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定列的 SQL 类型。

@param column 第一列是 1，第二个列是 2，……
@return 来自 java.sql.Types 的 SQL 类型
@exception SQLException 如果发生数据库访问错误
@see Types

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.sql.ResultSetMetaData.getColumnTypeName(int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定列的数据库特定的类型名称。

@param column 第一列是 1，第二个列是 2，……
@return 数据库使用的类型名称。如果列类型是用户定义的类型，则返回完全限定的类型名称。
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.ResultSetMetaData.isReadOnly(int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
指示指定的列是否明确不可写入。

@param column 第一列是 1，第二个列是 2，……
@return 如果是这样，则返回 <code>true</code>；否则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.ResultSetMetaData.isWritable(int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
指示在指定的列上进行写操作是否可以获得成功。

@param column 第一列是 1，第二个列是 2，……
@return 如果是这样，则返回 <code>true</code>；否则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.ResultSetMetaData.isDefinitelyWritable(int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
指示在指定的列上进行写操作是否明确可以获得成功。	

@param column 第一列是 1，第二个列是 2，……
@return 如果是这样，则返回 <code>true</code>；否则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.sql.ResultSetMetaData.getColumnClassName(int column) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>如果调用方法 <code>ResultSet.getObject</code> 从列中获取值，则返回构造其实例的 Java 类的完全限定名称。<code>ResultSet.getObject</code> 可能返回此方法所返回的类的子类。

@param column 第一列是 1，第二个列是 2，……
@return Java 编程语言中类的完全限定名称，方法 <code>ResultSet.getObject</code> 将使用该名称获取指定列中的值。此名称为用于自定义映射关系的类名称。
@exception SQLException 如果发生数据库访问错误
@since 1.2

<!-- END DATA -->
