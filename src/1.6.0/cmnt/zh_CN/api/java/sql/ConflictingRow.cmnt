<!-- BEGIN KEY -->
public interface java.sql.ConflictingRow
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <code>ConflictingRow</code> object is obtained by iterating over a
 <code>DataSetResolver</code> object.  Each <code>ConflictingRow</code> 
 object represents a row whose update could not be propagated to the underlying
 data store by an invocation of the method <code>DataSet.sync</code>.
 <p> 
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public T java.sql.ConflictingRow.getRow()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves an object representing a row within the 
 <code>DataSet</code> which could not be successfully updated in the 
 underlying data source.

 @return a row of type T
 @throws SQLRuntimeException if an error occurs retrieving the row
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.DataSetSyncStatus java.sql.ConflictingRow.getDataSetSyncStatus()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the conflict status of the current row of this <code>ConflictingRow</code>,
 which indicates the operation the <code>DataSet.sync</code> was
 attempting when the conflict occured.

 @return The status indicting the reason for the conflict for the 
 current row.
 @throws SQLRuntimeException if an error occurs retrieving the row
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.lang.String> java.sql.ConflictingRow.getConflictedColumnNames()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the list of column names for the current row
 of this <code>ConflictingRow</code> object 
 that caused a conflict on a call to <code>DataSet.sync</code>

 @return the value of the designated column in the current row of
 this <code>ConflictingRow</code> object
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.sql.ConflictingRow.getConflictedValue(String columnName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the value in the designated column in the current row
 of this <code>ConflictingRow</code> object 
 that caused a conflict on a call to <code>DataSet.sync</code>

 @param columnName  the column name containing the value to be  resolved
 @return the value of the designated column in the current row of
 this <code>ConflictingRow</code> object
 @throws SQLRuntimeException if an invalid column name is specified or
 database access error occurs
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.ConflictingRow.setResolvedValue(String columnName, Object newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Specifies the new value for the column <code>columnName</code> in the current
 row of the <code>ConflictingRow</code> object that caused the conflict during
 a call to <code>DataSet.sync</code>

 @param columnName  the column name to be  resolved
 @param newValue the value that is to be used to resolve the conflict for 
 the specified column
 @throws SQLRuntimeException if a database access error occurs,
  an invalid column name is specified or 
 a problem occurs setting the resolved value.
 @since 1.6

<!-- END DATA -->
