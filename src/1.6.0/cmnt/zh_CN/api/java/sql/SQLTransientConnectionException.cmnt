<!-- BEGIN KEY -->
public class java.sql.SQLTransientConnectionException extends java.sql.SQLTransientException
<!-- END KEY -->
<!-- BEGIN DATA -->
SQLState 类值为&ldquo;<i>08</i>&rdquo;时抛出的 {@link SQLException} 子类，表示在没有进行任何应用程序级更改的情况下重试操作时，失败的连接操作可以成功。
<p>
 
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLTransientConnectionException()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>SQLTransientConnectionException</code> 对象。<code>reason</code> 和 <code>SQLState</code> 初始化为 <code>null</code>，供应商代码初始化为 0。

<code>cause</code> 没有初始化，随后可以调用 {@link Throwable#initCause(java.lang.Throwable)} 方法初始化。
 <p>
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLTransientConnectionException(String reason)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个带有给定 <code>reason</code> 的 <code>SQLTransientConnectionException</code> 对象。<code>SQLState</code> 初始化为 <code>null</code>，供应商代码初始化为 0。

<code>cause</code> 没有初始化，随后可以调用 {@link Throwable#initCause(java.lang.Throwable)} 方法初始化。
 <p>
@param reason 对异常的描述
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLTransientConnectionException(String reason, String SQLState)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个带有给定 <code>reason</code> 和 <code>SQLState</code> 的 <code>SQLTransientConnectionException</code> 对象。

<code>cause</code> 没有初始化，随后可以调用 {@link Throwable#initCause(java.lang.Throwable)} 方法初始化。供应商代码初始化为 0。
 <p>
@param reason 对异常的描述
@param SQLState 标识异常的 XOPEN 或 SQL:2003 代码
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLTransientConnectionException(String reason, String SQLState, int vendorCode)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个带有给定 <code>reason</code>、<code>SQLState</code> 和 <code>vendorCode</code> 的 <code>SQLTransientConnectionException</code> 对象。

<code>cause</code> 没有初始化，随后可以调用 {@link Throwable#initCause(java.lang.Throwable)} 方法初始化。
 <p>
@param reason 对异常的描述
@param SQLState 标识异常的 XOPEN 或 SQL:2003 代码
@param vendorCode 特定于数据库供应商的异常代码
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLTransientConnectionException(Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个带有给定 <code>cause</code> 的 <code>SQLTransientConnectionException</code> 对象。<code>SQLState</code> 初始化为 <code>null</code>，供应商代码初始化为 0。如果 <code>cause==null</code>，那么 <code>reason</code> 初始化为 <code>null</code>；如果 <code>cause!=null</code>，则初始化为 <code>cause.toString()</code>。
 <p>
@param cause 此 <code>SQLException</code> 的底层原因（保存此原因，以供以后通过 <code>getCause()</code> 方法获取）；可以为 null，表示 cause 不存在或未知。
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLTransientConnectionException(String reason, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个带有给定 <code>reason</code> 和 <code>cause</code> 的 <code>SQLTransientConnectionException</code> 对象。<code>SQLState</code> 初始化为 <code>null</code>，供应商代码初始化为 0。
 <p>
@param reason 对异常的描述。
@param cause 此 <code>SQLException</code> 的底层原因（保存此原因，以供以后通过 <code>getCause()</code> 方法获取）；可以为 null，表示 cause 不存在或未知。
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLTransientConnectionException(String reason, String SQLState, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个带有给定 <code>reason</code>、<code>SQLState</code> 和 <code>cause</code> 的 <code>SQLTransientConnectionException</code> 对象。供应商代码初始化为 0。
 <p>
@param reason 对异常的描述。
@param SQLState 标识异常的 XOPEN 或 SQL:2003 代码
@param cause 此 <code>SQLException</code> 的底层原因（保存此原因，以供以后通过 <code>getCause()</code> 方法获取）；可以为 null，表示 cause 不存在或未知。
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLTransientConnectionException(String reason, String SQLState, int vendorCode, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个带有给定 <code>reason</code>、<code>SQLState</code>、<code>vendorCode</code> 和 <code>cause</code> 的 <code>SQLTransientConnectionException</code> 对象。  
 <p>
@param reason 对异常的描述
@param SQLState 标识异常的 XOPEN 或 SQL:2003 代码
@param vendorCode 特定于数据库供应商的异常代码
@param cause 此 <code>SQLException</code> 的底层原因（保存此原因，以供以后通过 <code>getCause()</code> 方法获取）；可以为 null，表示 cause 不存在或未知。
@since 1.6

<!-- END DATA -->
