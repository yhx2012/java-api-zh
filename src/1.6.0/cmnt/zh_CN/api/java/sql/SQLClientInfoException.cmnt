<!-- BEGIN KEY -->
public class java.sql.SQLClientInfoException extends java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
当无法在 <code>Connection</code> 上设置一个或多个客户端信息属性时，抛出此 {@link SQLException} 的子类。除了 <code>SQLException</code> 提供的信息外，<code>SQLClientInfoException</code> 还提供未设置的客户端信息属性列表。
 
某些数据库不允许一次设置多个客户端信息属性。对于这些数据库，即使 <code>Connection.setClientInfo</code> 方法抛出异常，可能也已经设置了一些客户端信息属性。应用程序可以使用 <code>getFailedProperties </code> 方法获取未设置的客户端信息属性列表。通过将 <code>Map&lt;String,ClientInfoStatus&gt;</code> 传递给适当的 <code>SQLClientInfoException</code> 构造方法来标识属性。
 <p>
@see ClientInfoStatus
@see Connection#setClientInfo
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLClientInfoException()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>SQLClientInfoException</code> 对象。<code>reason</code>、<code>SQLState</code> 和 failedProperties 列表初始化为 <code> null</code>，供应商代码初始化为 0。<code>cause</code> 没有初始化，随后可以通过调用 {@link Throwable#initCause(java.lang.Throwable)} 方法来初始化。
 <p>
 
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLClientInfoException(java.util.Map<java.lang.String, java.sql.ClientInfoStatus> failedProperties)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个使用给定 <code>failedProperties</code> 初始化的 <code>SQLClientInfoException</code> 对象。<code>reason</code> 和 <code>SQLState</code> 初始化为 <code>null</code>，供应商代码初始化为 0。
 
<code>cause</code> 没有初始化，随后可以通过调用 {@link Throwable#initCause(java.lang.Throwable)} 方法来初始化。
 <p>
 
@param failedProperties		包含无法设置的属性值的 Map。Map 中的键包含无法设置的客户端信息属性名称，值包含 <code>ClientInfoStatus</code> 中定义的某一原因代码
 <p>
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLClientInfoException(java.util.Map<java.lang.String, java.sql.ClientInfoStatus> failedProperties, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个使用给定 <code>cause</code> 和 <code>failedProperties</code> 初始化的 <code>SQLClientInfoException</code> 对象。 
 
如果 <code>cause==null</code>，则 <code>reason</code> 初始化为 <code>null</code>；如果 <code>cause!=null</code>，则 <code>reason</code> 初始化为 <code>cause.toString()</code>，供应商代码初始化为 0。
 
 <p>
 
@param failedProperties		包含无法设置的属性值的 Map。Map 中的键包含无法设置的客户端信息属性名称，值包含 <code>ClientInfoStatus</code> 中定义的某一原因代码
@param cause	此 SQLClientInfoException 的底层原因（保存此 cause，以供以后通过 <code>getCause()</code> 方法获取）；可以为 null，表示 cause 不存在或未知。
 <p>
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLClientInfoException(String reason, java.util.Map<java.lang.String, java.sql.ClientInfoStatus> failedProperties)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个使用给定 <code>reason</code> 和 <code>failedProperties</code> 初始化的 <code>SQLClientInfoException</code> 对象。<code>SQLState</code> 初始化为 <code>null</code>，供应商代码初始化为 0。
 
<code>cause</code> 没有初始化，随后可以通过调用 {@link Throwable#initCause(java.lang.Throwable)} 方法来初始化。
 <p>
 
@param reason				对异常的描述
@param failedProperties		包含无法设置的属性值的 Map。Map 中的键包含无法设置的客户端信息属性名称，值包含 <code>ClientInfoStatus</code> 中定义的某一原因代码
 <p>
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLClientInfoException(String reason, java.util.Map<java.lang.String, java.sql.ClientInfoStatus> failedProperties, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个使用给定 <code>reason</code>、<code>cause</code> 和 <code>failedProperties</code> 初始化的 <code>SQLClientInfoException</code> 对象。<code>SQLState</code> 初始化为 <code>null</code>，供应商代码初始化为 0。
 <p>
 
@param reason				对异常的描述
@param failedProperties		包含无法设置的属性值的 Map。Map 中的键包含无法设置的客户端信息属性名称，值包含 <code>ClientInfoStatus</code> 中定义的某一原因代码
@param cause					此 <code>SQLException</code> 的底层原因（保存此原因，以供以后通过 <code>getCause()</code> 方法获取）；可以为 null，表示 cause 不存在或未知。
 <p>
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLClientInfoException(String reason, String SQLState, java.util.Map<java.lang.String, java.sql.ClientInfoStatus> failedProperties)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个使用给定 <code>reason</code>、<code>SQLState</code> 和 <code>failedProperties</code> 初始化的 <code>SQLClientInfoException</code> 对象。<code>cause</code> 没有初始化，随后可以通过调用 {@link Throwable#initCause(java.lang.Throwable)} 方法来初始化。供应商代码初始化为 0。
 <p> 
 
@param reason				对异常的描述
@param SQLState				标识异常的 XOPEN 或 SQL:2003 代码
@param failedProperties		包含无法设置的属性值的 Map。Map 中的键包含无法设置的客户端信息属性名称，值包含 <code>ClientInfoStatus</code> 中定义的某一原因代码
 <p>
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLClientInfoException(String reason, String SQLState, java.util.Map<java.lang.String, java.sql.ClientInfoStatus> failedProperties, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个使用给定 <code>reason</code>、<code>SQLState</code>、<code>cause</code> 和 <code>failedProperties</code> 初始化的 <code>SQLClientInfoException</code> 对象。供应商代码初始化为 0。
 <p>
 
@param reason				对异常的描述
@param SQLState				标识异常的 XOPEN 或 SQL:2003 代码
@param failedProperties		包含无法设置的属性值的 Map。Map 中的键包含无法设置的客户端信息属性名称，值包含 <code>ClientInfoStatus</code> 中定义的某一原因代码
@param cause					此 <code>SQLException</code> 的底层原因（保存此原因，以供以后通过 <code>getCause()</code> 方法获取）；可以为 null，表示 cause 不存在或未知。
 <p>
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLClientInfoException(String reason, String SQLState, int vendorCode, java.util.Map<java.lang.String, java.sql.ClientInfoStatus> failedProperties)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个使用给定 <code>reason</code>、<code>SQLState</code>、<code>vendorCode</code> 和 <code>failedProperties</code> 初始化的 <code>SQLClientInfoException</code> 对象。<code>cause</code> 没有初始化，随后可以通过调用 {@link Throwable#initCause(java.lang.Throwable)} 方法来初始化。
 <p> 
 
@param reason				对异常的描述
@param SQLState				标识异常的 XOPEN 或 SQL:2003 代码
@param vendorCode			特定于数据库供应商的异常代码
@param failedProperties		包含无法设置的属性值的 Map。Map 中的键包含无法设置的客户端信息属性名称，值包含 <code>ClientInfoStatus</code> 中定义的某一原因代码
 <p>
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLClientInfoException(String reason, String SQLState, int vendorCode, java.util.Map<java.lang.String, java.sql.ClientInfoStatus> failedProperties, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个使用给定 <code>reason</code>、<code>SQLState</code>、<code>cause</code>、<code>vendorCode</code> 和 <code>failedProperties</code> 初始化的 <code>SQLClientInfoException</code> 对象。
 <p>
 
@param reason				对异常的描述
@param SQLState				标识异常的 XOPEN 或 SQL:2003 代码
@param vendorCode			特定于数据库供应商的异常代码
@param failedProperties		包含无法设置的属性值的 Map。Map 中的键包含无法设置的客户端信息属性名称，值包含 <code>ClientInfoStatus</code> 中定义的某一原因代码
@param cause			此 <code>SQLException</code> 的底层原因（保存此原因，以供以后通过 <code>getCause()</code> 方法获取）；可以为 null，表示 cause 不存在或未知。
 <p>
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map<java.lang.String, java.sql.ClientInfoStatus> java.sql.SQLClientInfoException.getFailedProperties()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回无法设置的客户端信息属性列表。Map 中的键包含无法设置的客户端信息属性名称，值包含 <code>ClientInfoStatus</code> 中定义的某一原因代码
 <p>
 
@return 包含无法设置的客户端信息属性的 Map 列表
 <p>
@since 1.6

<!-- END DATA -->
