<!-- BEGIN KEY -->
public class java.sql.SQLException extends java.lang.Exception implements java.lang.Iterable
<!-- END KEY -->
<!-- BEGIN DATA -->
<P>提供关于数据库访问错误或其他错误信息的异常。

<P>每个 <code>SQLException</code> 都可提供以下多种消息： 
 <UL>
<LI> 描述错误的字符串。此字符串用作 Java Exception 消息，可以通过方法 <code>getMessage</code> 获得。
<LI> &quot;SQLstate&quot; 字符串，该字符串遵守 XOPEN SQLstate 约定或 SQL:2003 约定。SQLState 字符串的值在适当的规范中描述。<code>DatabaseMetaData</code> 的方法 <code>getSQLStateType</code> 可用于确定驱动程序返回 XOPEN 类型还是 SQL:2003 类型。
<LI> 特定于每个供应商的整数错误代码。通常，这将是底层数据库返回的实际错误代码。
<LI> 到下一个 Exception 的链接。可以使用此链接提供其他错误信息。
<LI> 因果关系，如果存在任何导致此 <code>SQLException</code> 的原因。
 </UL>

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.sql.SQLException.SQLState
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.sql.SQLException.vendorCode
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private volatile java.sql.SQLException java.sql.SQLException.next
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLException(String reason, String SQLState, int vendorCode)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有给定 <code>reason</code>、<code>SQLState</code> 和 <code>vendorCode</code> 的 <code>SQLException</code> 对象。<code>cause</code> 没有初始化，随后可调用 {@link Throwable#initCause(java.lang.Throwable)} 方法初始化。
 <p>  

@param reason 对异常的描述
@param SQLState 标识异常的 XOPEN 或 SQL:2003 代码
@param vendorCode 特定于数据库供应商的异常代码

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLException(String reason, String SQLState)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有给定 <code>reason</code> 和 <code>SQLState</code> 的 <code>SQLException</code> 对象。<code>cause</code> 没有初始化，随后可调用 {@link Throwable#initCause(java.lang.Throwable)} 方法初始化。供应商代码被初始化为 0。
 <p>

@param reason 对异常的描述
@param SQLState 标识异常的 XOPEN 或 SQL:2003 代码

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLException(String reason)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有给定 <code>reason</code> 的 <code>SQLException</code> 对象。<code>SQLState</code> 被初始化为 <code>null</code>，供应商代码被初始化为 0。<code>cause</code> 没有初始化，随后可调用 {@link Throwable#initCause(java.lang.Throwable)} 方法初始化。
 <p>

@param reason 对异常的描述

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLException()
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个 <code>SQLException</code> 对象。<code>reason</code> 和 <code>SQLState</code> 被初始化为 <code>null</code>，供应商代码被初始化为 0。<code>cause</code> 没有初始化，随后可调用 {@link Throwable#initCause(java.lang.Throwable)} 方法初始化。
 <p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLException(Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
  构造一个具有给定 <code>cause</code> 的 <code>SQLException</code> 对象。<code>SQLState</code> 被初始化为 <code>null</code>，供应商代码被初始化为 0。如果 <code>cause==null</code>，则 <code>reason</code> 被初始化为 <code>null</code>；如果 <code>cause!=null</code>，则初始化为 <code>cause.toString()</code>。
 <p>
 @param cause 导致此 <code>SQLException</code> 的底层原因（保存此 cause，以供以后通过 <code>getCause()</code> 方法获取）；此参数可以为 null，指示 cause 不存在或未知。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLException(String reason, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个具有给定 <code>reason</code> 和 <code>cause</code> 的 <code>SQLException</code> 对象。<code>SQLState</code> 被初始化为 <code>null</code>，供应商代码被初始化为 0。
 <p>
 @param reason 对异常的描述。
 @param cause 导致此 <code>SQLException</code> 的底层原因（保存此 cause，以供以后通过 <code>getCause()</code> 方法获取）；此参数可以为 null，指示 cause 不存在或未知。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLException(String reason, String sqlState, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个具有给定 <code>reason</code>、<code>SQLState</code> 和 <code>cause</code> 的 <code>SQLException</code> 对象。供应商代码被初始化为 0。
 <p>  
 @param reason 对异常的描述。
 @param sqlState 标识异常的 XOPEN 或 SQL:2003 代码 
@param cause 导致此 <code>SQLException</code> 的底层原因（保存此 cause，以供以后通过 <code>getCause()</code> 方法获取）；此参数可以为 null，指示 cause 不存在或未知。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLException(String reason, String sqlState, int vendorCode, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个具有给定 <code>reason</code>、<code>SQLState</code>、<code>vendorCode</code> 和 <code>cause</code> 的 <code>SQLException</code> 对象。
 <p> 
 @param reason 对异常的描述
 @param sqlState 标识异常的 XOPEN 或 SQL:2003 代码
 @param vendorCode 特定于数据库供应商的异常代码
 @param cause 导致此 <code>SQLException</code> 的底层原因（保存此 cause，以供以后通过 <code>getCause()</code> 方法获取）；此参数可以为 null，指示 cause 不存在或未知。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.sql.SQLException.getSQLState()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>SQLException</code> 对象的 SQLState。

@return SQLState 值

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.SQLException.getErrorCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>SQLException</code> 对象的特定于供应商的异常代码。

@return 供应商的错误代码

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLException java.sql.SQLException.getNextException()
<!-- END KEY -->
<!-- BEGIN DATA -->
通过 setNextException(SQLException ex) 获取链接到此 <code>SQLException</code> 对象的异常。

@return 链接中的 <code>SQLException</code> 对象；如果不存在，则返回 <code>null</code>
@see #setNextException

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLException.setNextException(SQLException ex)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>SQLException</code> 对象添加到链接的末尾。

@param ex 将添加到 <code>SQLException</code> 链接末尾的新异常
@see #getNextException

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<java.lang.Throwable> java.sql.SQLException.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回在链接的 SQLExceptions 上进行迭代的迭代器。该迭代器将用来在每个 SQLException 及其底层 cause（如果有）进行迭代。

 @return 以适当的顺序在链接的 SQLExceptions 和 cause 上进行迭代的迭代器

 @since 1.6

<!-- END DATA -->
