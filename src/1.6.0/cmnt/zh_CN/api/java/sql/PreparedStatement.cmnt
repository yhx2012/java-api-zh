<!-- BEGIN KEY -->
public interface java.sql.PreparedStatement extends java.sql.Statement
<!-- END KEY -->
<!-- BEGIN DATA -->
表示预编译的 SQL 语句的对象。
<P>SQL 语句被预编译并存储在 <code>PreparedStatement</code> 对象中。然后可以使用此对象多次高效地执行该语句。 

<P><B>注：</B>用于设置 IN 参数值的设置方法（<code>setShort</code>、<code>setString</code> 等等）必须指定与输入参数的已定义 SQL 类型兼容的类型。例如，如果 IN 参数具有 SQL 类型 <code>INTEGER</code>，那么应该使用 <code>setInt</code> 方法。

<p>如果需要任意参数类型转换，使用 <code>setObject</code> 方法时应该将目标 SQL 类型作为其参数。
 <P>
在以下设置参数的示例中，<code>con</code> 表示一个活动连接：  
 <PRE>
   PreparedStatement pstmt = con.prepareStatement(&quot;UPDATE EMPLOYEES
                                     SET SALARY = ? WHERE ID = ?&quot;);
   pstmt.setBigDecimal(1, 153833.00)
   pstmt.setInt(2, 110592)
 </PRE>

@see Connection#prepareStatement
@see ResultSet 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.ResultSet java.sql.PreparedStatement.executeQuery() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
在此 <code>PreparedStatement</code> 对象中执行 SQL 查询，并返回该查询生成的 <code>ResultSet</code> 对象。

@return 包含该查询生成的数据的 <code>ResultSet</code> 对象；不会返回 <code>null</code>
@exception SQLException 如果发生数据库访问错误，在关闭的 <code>PreparedStatement</code> 上调用此方法，或者 SQL 语句没有返回 <code>ResultSet</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.PreparedStatement.executeUpdate() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
在此 <code>PreparedStatement</code> 对象中执行 SQL 语句，该语句必须是一个 SQL 数据操作语言（Data Manipulation Language，DML）语句，比如 <code>INSERT</code>、<code>UPDATE</code> 或 <code>DELETE</code> 语句；或者是无返回内容的 SQL 语句，比如 DDL 语句。

@return (1) SQL 数据操作语言 (DML) 语句的行数 (2) 对于无返回内容的 SQL 语句，返回 0
@exception SQLException 如果发生数据库访问错误，在关闭的 <code>PreparedStatement</code> 上调用此方法，或者 SQL 语句返回一个 <code>ResultSet</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setNull(int parameterIndex, int sqlType) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为 SQL <code>NULL</code>。

<P><B>注：</B>必须指定参数的 SQL 类型。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param sqlType <code>java.sql.Types</code> 中定义的 SQL 类型代码
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法 
@exception SQLFeatureNotSupportedException 如果 <code>sqlType</code> 是 <code>ARRAY</code>、<code>BLOB</code>、<code>CLOB</code>、<code>DATALINK</code>、<code>JAVA_OBJECT</code>、<code>NCHAR</code>、<code>NCLOB</code>、<code>NVARCHAR</code>、<code>LONGNVARCHAR</code>、<code>REF</code>、<code>ROWID</code>、<code>SQLXML</code> 或 <code>STRUCT</code> 数据类型之一并且 JDBC 驱动程序不支持此数据类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setBoolean(int parameterIndex, boolean x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定 Java <code>boolean</code> 值。在将此值发送到数据库时，驱动程序将它转换成一个 SQL <code>BIT</code> 或 <code>BOOLEAN</code> 值。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 参数值
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setByte(int parameterIndex, byte x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定 Java <code>byte</code> 值。在将此值发送到数据库时，驱动程序将它转换成一个 SQL <code>TINYINT</code> 值。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 参数值
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setShort(int parameterIndex, short x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定 Java <code>short</code> 值。在将此值发送到数据库时，驱动程序将它转换成一个 SQL <code>SMALLINT</code> 值。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 参数值
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setInt(int parameterIndex, int x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定 Java <code>int</code> 值。在将此值发送到数据库时，驱动程序将它转换成一个 SQL <code>INTEGER</code> 值。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 参数值
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setLong(int parameterIndex, long x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定 Java <code>long</code> 值。在将此值发送到数据库时，驱动程序将它转换成一个 SQL <code>BIGINT</code> 值。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 参数值
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setFloat(int parameterIndex, float x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定 Java <code>REAL</code> 值。在将此值发送到数据库时，驱动程序将它转换成一个 SQL <code>FLOAT</code> 值。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 参数值
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setDouble(int parameterIndex, double x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定 Java <code>double</code> 值。在将此值发送到数据库时，驱动程序将它转换成一个 SQL <code>DOUBLE</code> 值。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 参数值
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setBigDecimal(int parameterIndex, BigDecimal x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定 <code>java.math.BigDecimal</code> 值。在将此值发送到数据库时，驱动程序将它转换成一个 SQL <code>NUMERIC</code> 值。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 参数值
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setString(int parameterIndex, String x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定 Java <code>String</code> 值。在将此值发送给数据库时，驱动程序将它转换成一个 SQL <code>VARCHAR</code> 或 <code>LONGVARCHAR</code> 值（取决于该参数相对于驱动程序在 <code>VARCHAR</code> 值上的限制的大小）。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 参数值
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setBytes(int parameterIndex, byte[] x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定 Java byte 数组。在将此值发送给数据库时，驱动程序将它转换成一个 SQL <code>VARBINARY</code> 或 <code>LONGVARBINARY</code> 值（取决于该参数相对于驱动程序在 <code>VARBINARY</code> 值上的限制的大小）。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 参数值
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setDate(int parameterIndex, Date x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用运行应用程序的虚拟机的默认时区将指定参数设置为给定 <code>java.sql.Date</code> 值。在将此值发送到数据库时，驱动程序将它转换成一个 SQL <code>DATE</code> 值。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 参数值
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setTime(int parameterIndex, Time x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定 <code>java.sql.Time</code> 值。在将此值发送到数据库时，驱动程序将它转换成一个 SQL <code>TIME</code> 值。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 参数值
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setTimestamp(int parameterIndex, Timestamp x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定 <code>java.sql.Timestamp</code> 值。在将此值发送到数据库时，驱动程序将它转换成一个 SQL <code>TIMESTAMP</code> 值。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 参数值
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setAsciiStream(int parameterIndex, InputStream x, int length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定输入流，该输入流将具有给定字节数。在将一个非常大的 ASCII 值输入到 <code>LONGVARCHAR</code> 参数时，通过 <code>java.io.InputStream</code> 发送它可能更为实际。将根据需要从流中读取数据，一直读取到文件末尾。JDBC 驱动程序将执行从 ASCII 到数据库 char 格式的任何必要转换。
 
<P><B>注：</B>此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 包含 ASCII 参数值的 Java 输入流
@param length 流中的字节数
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setUnicodeStream(int parameterIndex, InputStream x, int length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定输入流，该输入流将具有给定字节数。在将一个非常大的 Unicode 值输入到 <code>LONGVARCHAR</code> 参数时，通过 <code>java.io.InputStream</code> 对象发送它可能更为实际。将根据需要从流中读取数据，一直读取到文件末尾。JDBC 驱动程序将执行从 Unicode 到数据库 char 格式的任何必要转换。根据 Java 虚拟机规范中的定义，Unicode 流的字节格式必须是 Java UTF-8。
 
<P><B>注：</B>此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 包含 Unicode 参数值的 <code>java.io.InputStream</code> 对象
@param length 流中的字节数
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@deprecated

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setBinaryStream(int parameterIndex, InputStream x, int length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定输入流，该输入流将具有给定字节数。在将一个非常大的二进制值输入到 <code>LONGVARBINARY</code> 参数时，通过 <code>java.io.InputStream</code> 对象发送它可能更为实际。将根据需要从流中读取数据，一直读取到文件末尾。
 
<P><B>注：</B>此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 包含二进制参数值的 Java 输入流
@param length 流中的字节数
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.clearParameters() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
立即清除当前参数值。
<P>通常参数值对语句的重复使用仍然有效。设置一个参数值会自动清除其以前的值。不过，在某些情况下，直接释放当前参数值使用的资源也是很有用的；这可以通过调用 <code>clearParameters</code> 方法实现。

@exception SQLException 如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setObject(int parameterIndex, Object x, int targetSqlType) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定对象设置指定参数的值。除了假定 scale 为 0，此方法类似于上面的 <code>setObject</code> 方法。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 包含输入参数值的对象
@param targetSqlType 将发送给数据库的 SQL 类型（定义于 java.sql.Types 中）
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法 
@exception SQLFeatureNotSupportedException 如果 <code>targetSqlType</code> 是 <code>ARRAY</code>、<code>BLOB</code>、<code>CLOB</code>、<code>DATALINK</code>、<code>JAVA_OBJECT</code>、<code>NCHAR</code>、<code>NCLOB</code>、<code>NVARCHAR</code>、<code>LONGNVARCHAR</code>、<code>REF</code>、<code>ROWID</code>、<code>SQLXML</code> 或 <code>STRUCT</code> 数据类型之一并且 JDBC 驱动程序不支持此数据类型
@see Types

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setObject(int parameterIndex, Object x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>使用给定对象设置指定参数的值。第二个参数必须是 <code>Object</code> 类型；所以，应该对内置类型使用 <code>java.lang</code> 的等效对象。

<p>JDBC 规范指定了一个从 Java <code>Object</code> 类型到 SQL 类型的标准映射关系。在发送到数据库之前，给定参数将被转换为相应 SQL 类型。

<p>注意，通过使用特定于驱动程序的 Java 类型，此方法可用于传递特定于数据库的抽象数据类型。如果对象是实现 <code>SQLData</code> 接口的类，则 JDBC 驱动程序应该调用 <code>SQLData.writeSQL</code> 方法将它写入 SQL 数据流中。另一方面，如果该对象是实现 <code>Ref</code>、<code>Blob</code>、<code>Clob</code>、<code>NClob</code>、<code>Struct</code>、<code>java.net.URL</code>、<code>RowId</code>、<code>SQLXML</code> 或 <code>Array</code> 的类，则驱动程序应该将它作为相应 SQL 类型的值传递给数据库。
 <P>
<b>注：</b>并非所有的数据库都允许将非类型 Null 发送给后端。为了获得最大的可移植性，应该使用 <code>setNull</code> 或 <code>setObject(int parameterIndex, Object x, int sqlType)</code> 方法替代 <code>setObject(int parameterIndex, Object x)</code>。
<p>
 <b>注：</b>如果出现混淆，例如，如果该对象是实现多个上述指定接口的类，则此方法抛出异常。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 包含输入参数值的对象
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误；在关闭的 <code>PreparedStatement</code> 上调用此方法，或者给定对象的类型不明确

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.PreparedStatement.execute() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
在此 <code>PreparedStatement</code> 对象中执行 SQL 语句，该语句可以是任何种类的 SQL 语句。一些预处理过的语句返回多个结果，<code>execute</code> 方法处理这些复杂的语句，<code>executeQuery</code> 和 <code>executeUpdate</code> 处理形式更简单的语句。
 <P>
<code>execute</code> 方法返回一个 <code>boolean</code> 值，指示第一个结果的形式。必须调用 <code>getResultSet</code> 或 <code>getUpdateCount</code> 方法获取该结果，必须调用 <code>getMoreResults</code> 获取任何后续结果。

@return 如果第一个结果是 <code>ResultSet</code> 对象，则返回 <code>true</code>；如果第一个结果是更新计数或者没有结果，则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误；在关闭的 <code>PreparedStatement</code> 上调用此方法，或者为此方法提供了参数
@see Statement#execute
@see Statement#getResultSet
@see Statement#getUpdateCount
@see Statement#getMoreResults

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.addBatch() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将一组参数添加到此 <code>PreparedStatement</code> 对象的批处理命令中。
 
@exception SQLException 如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
@see Statement#addBatch
@since 1.2 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setCharacterStream(int parameterIndex, Reader reader, int length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定参数设置为给定 <code>Reader</code> 对象，该对象具有给定字符数长度。在将一个非常大的 UNICODE 值输入到 <code>LONGVARCHAR</code> 参数时，通过 <code>java.io.Reader</code> 对象发送它可能更为实际。将根据需要从流中读取数据，一直读取到文件末尾。JDBC 驱动程序将执行从 UNICODE 到数据库 char 格式的任何必要转换。
 
<P><B>注：</B>此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param reader 包含 Unicode 数据的 <code>java.io.Reader</code> 对象
@param length 流中的字符数
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setRef(int parameterIndex, Ref x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定 <code>REF(&lt;structured-type&gt;)</code> 值。在将此值发送到数据库时，驱动程序将它转换成一个 SQL <code>REF</code> 值。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 一个 SQL <code>REF</code> 值
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
@throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setBlob(int parameterIndex, Blob x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定 <code>java.sql.Blob</code> 对象。在将此对象发送到数据库时，驱动程序将它转换成一个 SQL <code>BLOB</code> 值。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 一个映射 SQL <code>BLOB</code> 值的 <code>Blob</code> 对象
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
@throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setClob(int parameterIndex, Clob x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定 <code>java.sql.Clob</code> 对象。在将此对象发送到数据库时，驱动程序将它转换成一个 SQL <code>CLOB</code> 值。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 一个映射 SQL <code>Clob</code> 值的 <code>Clob</code> 对象
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
@throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setArray(int parameterIndex, Array x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定 <code>java.sql.Array</code> 对象。在将此对象发送到数据库时，驱动程序将它转换成一个 SQL <code>ARRAY</code> 值。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 一个映射 SQL <code>Array</code> 值的 <code>Array</code> 对象
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
@throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.ResultSetMetaData java.sql.PreparedStatement.getMetaData() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取包含有关 <code>ResultSet</code> 对象列信息的 <code>ResultSetMetaData</code> 对象，<code>ResultSet</code> 对象将在执行此 <code>PreparedStatement</code> 对象时返回。
 <P>
因为 <code>PreparedStatement</code> 对象被预编译，所以不必执行就可以知道它将返回的 <code>ResultSet</code> 对象。因此，可以对 <code>PreparedStatement</code> 对象调用 <code>getMetaData</code> 方法，而不必等待执行该对象，然后再对返回的 <code>ResultSet</code> 对象调用 <code>ResultSet.getMetaData</code> 方法。
 <P>
<B>注：</B>对于某些缺乏底层 DBMS 支持的驱动程序，使用此方法开销可能很大。

@return <code>ResultSet</code> 对象列的描述；如果驱动程序无法返回一个 <code>ResultSetMetaData</code> 对象，则返回 <code>null</code>
@exception SQLException 如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
@throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setDate(int parameterIndex, Date x, Calendar cal) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的 <code>Calendar</code> 对象将指定参数设置为给定 <code>java.sql.Date</code> 值。驱动程序使用 <code>Calendar</code> 对象构造一个 SQL <code>DATE</code> 值，该值随后被驱动程序发送给数据库。利用 <code>Calendar</code> 对象，驱动程序可以在考虑自定义时区的情况下计算日期。如果没有指定任何 <code>Calendar</code> 对象，那么驱动程序将使用默认时区，该时区是运行应用程序的虚拟机所在的时区。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 参数值
@param cal 驱动程序将用来构造日期的 <code>Calendar</code> 对象
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setTime(int parameterIndex, Time x, Calendar cal) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的 <code>Calendar</code> 对象将指定参数设置为给定 <code>java.sql.Time</code> 值。驱动程序使用 <code>Calendar</code> 对象构造一个 SQL <code>TIME</code> 值，该值随后被驱动程序发送给数据库。利用 <code>Calendar</code> 对象，驱动程序可以在考虑自定义时区的情况下计算时间。如果没有指定任何 <code>Calendar</code> 对象，那么驱动程序将使用默认时区，该时区是运行应用程序的虚拟机所在的时区。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 参数值
@param cal 驱动程序将用来构造时间的 <code>Calendar</code> 对象
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的 <code>Calendar</code> 对象将指定参数设置为给定 <code>java.sql.Timestamp</code> 值。驱动程序使用 <code>Calendar</code> 对象构造一个 SQL <code>TIMESTAMP</code> 值，该值随后被驱动程序发送给数据库。利用 <code>Calendar</code> 对象，驱动程序可以在考虑自定义时区的情况下计算时间戳。如果没有指定任何 <code>Calendar</code> 对象，那么驱动程序将使用默认时区，该时区是运行应用程序的虚拟机所在的时区。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 参数值
@param cal 驱动程序将用来构造时间戳的 <code>Calendar</code> 对象
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setNull(int parameterIndex, int sqlType, String typeName) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为 SQL <code>NULL</code>。这种形式的 <code>setNull</code> 方法应该用于用户定义的类型或 REF 类型参数。用户定义类型的示例有：STRUCT、DISTINCT、JAVA_OBJECT 和指定的数组类型。

<P><B>注：</B>为了便于移植，在指定 NULL 用户定义参数或 REF 参数时，应用程序必须提供 SQL 类型代码和完全限定的 SQL 类型名称。对于户定义类型，名称是参数本身的类型名称。对于 REF 参数，名称是所引用类型的类型名称。如果 JDBC 驱动程序不需要类型代码和类型名称信息，则可以忽略这些信息。尽管此方法是供用户定义的参数和 Ref 参数使用的，但也可以使用其设置任何 JDBC 类型的 null 参数。如果该参数没有用户定义的类型或 REF 类型，则忽略给定的 typeName。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param sqlType 取自 <code>java.sql.Types</code> 的一个值
@param typeName SQL 用户定义类型的完全限定名称；如果该参数不是用户定义类型或 REF，则忽略它
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
@exception SQLFeatureNotSupportedException 如果 <code>sqlType</code> 是 <code>ARRAY</code>、<code>BLOB</code>、<code>CLOB</code>、<code>DATALINK</code>、<code>JAVA_OBJECT</code>、<code>NCHAR</code>、<code>NCLOB</code>、<code>NVARCHAR</code>、<code>LONGNVARCHAR</code>、<code>REF</code>、<code>ROWID</code>、<code>SQLXML</code> 或 <code>STRUCT</code> 数据类型之一并且 JDBC 驱动程序不支持此数据类型，或者 JDBC 驱动程序不支持此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setURL(int parameterIndex, URL x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定 <code>java.net.URL</code> 值。在将此值发送到数据库时，驱动程序将它转换成一个 SQL <code>DATALINK</code> 值。

@param parameterIndex 第一个参数是 1，第二个参数是 2，……
@param x 要设置的 <code>java.net.URL</code> 对象
@exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
@throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.ParameterMetaData java.sql.PreparedStatement.getParameterMetaData() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>PreparedStatement</code> 对象的参数的编号、类型和属性。

@return 一个 <code>ParameterMetaData</code> 对象，它包含有关此 <code>PreparedStatement</code> 对象的每个参数标记的编号、类型和属性的信息
@exception SQLException 如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
@see ParameterMetaData
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setRowId(int parameterIndex, RowId x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为给定 <code>java.sql.RowId</code> 对象。在将此对象发送到数据库时，驱动程序将它转换成一个 SQL <code>ROWID</code> 值。

 @param parameterIndex 第一个参数是 1，第二个参数是 2，……
 @param x 参数值
 @throws SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setNString(int parameterIndex, String value) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为给定 <code>String</code> 对象。在将此对象发送给数据库时，驱动程序将它转换成一个 SQL <code>NCHAR</code>、<code>NVARCHAR</code> 或 <code>LONGNVARCHAR</code> 值（取决于该参数相对于驱动程序在 <code>NVARCHAR</code> 值上的限制的大小）。

 @param parameterIndex 第一个参数是 1，第二个参数是 2，……
 @param value 参数值
 @throws 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果驱动程序不支持国家字符 (national character) 集；如果驱动程序检测到可能发生数据转换错误；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setNCharacterStream(int parameterIndex, Reader value, long length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为 <code>Reader</code> 对象。<code>Reader</code> 将读取数据，直到到达文件末尾。驱动程序执行从 Java 字符格式到数据库中国家字符集的必要转换。
 @param parameterIndex 第一个参数是 1，第二个参数是 2，……
 @param value 参数值
 @param length 参数数据中的字符数。
 @throws SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果驱动程序不支持国家字符集；如果驱动程序检测到可能发生数据转换错误；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setNClob(int parameterIndex, NClob value) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为 <code>java.sql.NClob</code> 对象。在将此对象发送到数据库时，驱动程序将它转换成一个 SQL <code>NCLOB</code> 值。
 @param parameterIndex 第一个参数是 1，第二个参数是 2，……
 @param value 参数值
 @throws SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果驱动程序不支持国家字符集；如果驱动程序检测到可能发生数据转换错误；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setClob(int parameterIndex, Reader reader, long length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为 <code>Reader</code> 对象。Reader 必须包含 length 指定的字符数，否则在执行 <code>PreparedStatement</code> 时将生成一个 <code>SQLException</code>。此方法不同于 <code>setCharacterStream (int, Reader, int)</code> 方法，因为它会通知驱动程序应该将参数值作为 <code>CLOB</code> 发送给服务器。在使用 <code>setCharacterStream</code> 方法时，驱动程序可能必须做一些额外的工作，以确定应该将参数数据作为 <code>LONGVARCHAR</code> 还是 <code>CLOB</code> 发送给服务器。
 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2，……
 @param reader 包含用于设置参数值的数据的对象。
 @param length 参数数据中的字符数。
 @throws SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误；在关闭的 <code>PreparedStatement</code> 上调用此方法，如果指定的长度小于 0。

 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setBlob(int parameterIndex, InputStream inputStream, long length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为 <code>InputStream</code> 对象。Inputstream 必须包含 length 指定的字符数，否则在执行 <code>PreparedStatement</code> 时将生成一个 <code>SQLException</code>。此方法不同于 <code>setBinaryStream (int, InputStream, int)</code> 方法，因为它会通知驱动程序应该将参数值作为 <code>BLOB</code> 发送给服务器。在使用 <code>setBinaryStream</code> 方法时，驱动程序可能必须做一些额外的工作，以确定应该将参数数据作为 <code>LONGVARBINARY</code> 还是 <code>BLOB</code> 发送给服务器。
 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2，……
 @param inputStream 包含用于设置参数值的数据的对象。
 @param length 参数数据中的字节数。
 @throws SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误；在关闭的 <code>PreparedStatement</code> 上调用此方法，如果指定长度小于 0，或者输入流中的字节数与指定长度不匹配。
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setNClob(int parameterIndex, Reader reader, long length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为 <code>Reader</code> 对象。Reader 必须包含 length 指定的字符数，否则在执行 <code>PreparedStatement</code> 时将生成一个 <code>SQLException</code>。此方法不同于 <code>setCharacterStream (int, Reader, int)</code> 方法，因为它会通知驱动程序应该将参数值作为 <code>NCLOB</code> 发送给服务器。在使用 <code>setCharacterStream</code> 方法时，驱动程序可能必须做一些额外的工作，以确定应该将参数数据作为 <code>LONGNVARCHAR</code> 还是 <code>NCLOB</code> 发送给服务器。
 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2，……
 @param reader 包含用于设置参数值的数据的对象。
 @param length 参数数据中的字符数。
 @throws SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果指定长度小于 0；如果驱动程序不支持国家字符集；如果驱动程序检测到可能发生数据转换错误；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setSQLXML(int parameterIndex, SQLXML xmlObject) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为给定 <code>java.sql.SQLXML</code> 对象。在将此对象发送到数据库时，驱动程序将它转换成一个 SQL <code>XML</code> 值。
 <p>

 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2，……
 @param xmlObject 映射 SQL <code>XML</code> 值的 <code>SQLXML</code> 对象
 @throws SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误；或者在关闭的 <code>PreparedStatement</code> 上调用此方法，或者 <code>java.xml.transform.Result</code>、<code>Writer</code> 或 <code>OutputStream</code> 已经关闭（对于 <code>SQLXML</code> 对象）
 @throws SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>使用给定对象设置指定参数的值。第二个参数必须是一个对象类型；对于整数值，应该使用 <code>java.lang</code> 的等效对象。

 如果第二个参数是一个 <code>InputStream</code>，则该流必须包含 scaleOrLength 指定的字节数。如果第二个参数是一个 <code>Reader</code>，则该 Reader 必须包含 scaleOrLength 指定的字符数。如果这些条件不满足，则驱动程序在执行准备好的语句时将生成一个 <code>SQLException</code>。

 <p>在发送到数据库之前，给定 Java 对象将被转换为给定 targetSqlType。

 如果对象具有自定义映射关系（属于实现 <code>SQLData</code> 接口的类），那么 JDBC 驱动程序应该调用 <code>SQLData.writeSQL</code> 方法将它写入 SQL 数据流。另一方面，如果该对象是实现 <code>Ref</code>、<code>Blob</code>、<code>Clob</code>、<code>NClob</code>、<code>Struct</code>、<code>java.net.URL</code> 或 <code>Array</code> 的类，那么驱动程序应该将它作为相应 SQL 类型的值传递给数据库。

 <p>注意，此方法可用于传递特定于数据库的抽象数据类型。

 @param parameterIndex 第一个参数是 1，第二个参数是 2，……
 @param x 包含输入参数值的对象
 @param targetSqlType 将发送给数据库的 SQL 类型（定义于 java.sql.Types 中）。scale 参数可以进一步限定此类型。
 @param scaleOrLength 对于 <code>java.sql.Types.DECIMAL</code> 或 <code>java.sql.Types.NUMERIC</code> 类型，此值是小数点后的位数。对于 Java Object 类型 <code>InputStream</code> 和 <code>Reader</code>，此值是流或 Reader 中数据的长度。对于所有其他类型，忽略此值。
 @exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误；如果在关闭的 <code>PreparedStatement</code> 上调用此方法，或者 x 指定的 Java Object 是一个 InputStream 或 Reader 对象，并且 scale 参数的值小于 0
 @exception SQLFeatureNotSupportedException 如果 <code>targetSqlType</code> 是 <code>ARRAY</code>、<code>BLOB</code>、<code>CLOB</code>、<code>DATALINK</code>、<code>JAVA_OBJECT</code>、<code>NCHAR</code>、<code>NCLOB</code>、<code>NVARCHAR</code>、<code>LONGNVARCHAR</code>、<code>REF</code>、<code>ROWID</code>、<code>SQLXML</code> 或 <code>STRUCT</code> 数据类型之一，并且 JDBC 驱动程序不支持此数据类型
 @see Types

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setAsciiStream(int parameterIndex, InputStream x, long length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为给定输入流，该输入流将具有指定字节数。在将一个非常大的 ASCII 值输入到 <code>LONGVARCHAR</code> 参数时，通过 <code>java.io.InputStream</code> 发送它可能更为实际。将根据需要从流中读取数据，一直读取到文件末尾。JDBC 驱动程序将执行从 ASCII 到数据库 char 格式的任何必要转换。
 
 <P><B>注：</B>此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。

 @param parameterIndex 第一个参数是 1，第二个参数是 2，……
 @param x 包含 ASCII 参数值的 Java 输入流
 @param length 流中的字节数
 @exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setBinaryStream(int parameterIndex, InputStream x, long length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为给定输入流，该输入流将具有指定字节数。在将一个非常大的二进制值输入到 <code>LONGVARBINARY</code> 参数时，通过 <code>java.io.InputStream</code> 对象发送它可能更为实际。将根据需要从流中读取数据，一直读取到文件末尾。

 <P><B>注：</B>此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。

 @param parameterIndex 第一个参数是 1，第二个参数是 2，……
 @param x 包含二进制参数值的 java 输入流
 @param length 流中的字节数
 @exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setCharacterStream(int parameterIndex, Reader reader, long length) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为给定 <code>Reader</code> 对象，该对象具有给定字符数长度。在将一个非常大的 UNICODE 值输入给 <code>LONGVARCHAR</code> 参数时，通过 <code>java.io.Reader</code> 对象发送它可能更为实际。将根据需要从流中读取数据，一直读取到文件末尾。JDBC 驱动程序将执行从 UNICODE 到数据库 char 格式的任何必要转换。
 
 <P><B>注：</B>此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。

 @param parameterIndex 第一个参数是 1，第二个参数是 2，……
 @param reader 包含 Unicode 数据的 <code>java.io.Reader</code> 对象
 @param length 流中的字符数 
 @exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setAsciiStream(int parameterIndex, InputStream x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为给定输入流。在将一个非常大的 ASCII 值输入到 <code>LONGVARCHAR</code> 参数时，通过 <code>java.io.InputStream</code> 发送它可能更为实际。将根据需要从流中读取数据，一直读取到文件末尾。JDBC 驱动程序将执行从 ASCII 到数据库 char 格式的任何必要转换。
 
 <P><B>注：</B>此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。
 <P><B>注：</B>查询 JDBC 驱动程序文档，以确定使用带 length 参数的 <code>setAsciiStream</code> 是否更有效。

 @param parameterIndex 第一个参数是 1，第二个参数是 2，……
 @param x 包含 ASCII 参数值的 Java 输入流
 @exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setBinaryStream(int parameterIndex, InputStream x) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为给定输入流。在将一个非常大的二进制值输入到 <code>LONGVARBINARY</code> 参数时，通过 <code>java.io.InputStream</code> 对象发送它可能更为实际。将根据需要从流中读取数据，一直读取到文件末尾。
 
 <P><B>注：</B>此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。
 <P><B>注：</B>查询 JDBC 驱动程序文档，以确定使用带 length 参数的 <code>setBinaryStream</code> 是否更有效。

 @param parameterIndex 第一个参数是 1，第二个参数是 2，……
 @param x 包含二进制参数值的 java 输入流
 @exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setCharacterStream(int parameterIndex, Reader reader) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定参数设置为给定 <code>Reader</code> 对象。在将一个非常大的 UNICODE 值输入到 <code>LONGVARCHAR</code> 参数时，通过 <code>java.io.Reader</code> 对象发送它可能更为实际。将根据需要从流中读取数据，一直读取到文件末尾。JDBC 驱动程序将执行从 UNICODE 到数据库 char 格式的任何必要转换。
 
 <P><B>注：</B>此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。
 <P><B>注：</B>查询 JDBC 驱动程序文档，以确定使用带 length 参数的 <code>setCharacterStream</code> 是否更有效。

 @param parameterIndex 第一个参数是 1，第二个参数是 2，……
 @param reader 包含 Unicode 数据的 <code>java.io.Reader</code> 对象
 @exception SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setNCharacterStream(int parameterIndex, Reader value) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为 <code>Reader</code> 对象。<code>Reader</code> 将读取数据，直到到达文件末尾。驱动程序执行从 Java 字符格式到数据库中国家字符集的必要转换。

 <P><B>注：</B>此流对象既可以是一个标准 Java 流对象，也可以是实现标准接口的用户自己的子类。
 <P><B>注：</B>查询 JDBC 驱动程序文档，以确定使用带 length 参数的 <code>setNCharacterStream</code> 是否更有效。
      
 @param parameterIndex 第一个参数是 1，第二个参数是 2，……
 @param value 参数值
 @throws SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果驱动程序不支持国家字符集；如果驱动程序检测到可能发生数据转换错误；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setClob(int parameterIndex, Reader reader) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为 <code>Reader</code> 对象。此方法不同于 <code>setCharacterStream (int, Reader)</code> 方法，因为它会通知驱动程序应该将参数值作为 <code>CLOB</code> 发送给服务器。在使用 <code>setCharacterStream</code> 方法时，驱动程序可能必须做一些额外的工作，以确定应该将参数数据作为 <code>LONGVARCHAR</code> 还是 <code>CLOB</code> 发送给服务器。
 
 <P><B>注：</B>查询 JDBC 驱动程序文档，以确定使用带 length 参数的 <code>setClob</code> 是否更有效。

 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2，……
 @param reader 包含用于设置参数值的数据的对象。
 @throws SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误；在关闭的 <code>PreparedStatement</code> 上调用此方法

 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setBlob(int parameterIndex, InputStream inputStream) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为 <code>InputStream</code> 对象。此方法不同于 <code>setBinaryStream (int, InputStream)</code> 方法，因为它会通知驱动程序应该将参数值作为 <code>BLOB</code> 发送给服务器。在使用 <code>setBinaryStream</code> 方法时，驱动程序可能必须做一些额外的工作，以确定应该将参数数据作为 <code>LONGVARBINARY</code> 还是 <code>BLOB</code> 发送给服务器。

 <P><B>注：</B>查询 JDBC 驱动程序文档，以确定使用带 length 参数的 <code>setBlob</code> 是否更有效。

 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2，……
 @param inputStream 包含用于设置参数值的数据的对象。
 @throws SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果发生数据库访问错误；在关闭的 <code>PreparedStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.PreparedStatement.setNClob(int parameterIndex, Reader reader) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定参数设置为 <code>Reader</code> 对象。此方法不同于 <code>setCharacterStream (int, Reader)</code> 方法，因为它会通知驱动程序应该将参数值作为 <code>NCLOB</code> 发送给服务器。在使用 <code>setCharacterStream</code> 方法时，驱动程序可能必须做一些额外的工作，以确定应该将参数数据作为 <code>LONGNVARCHAR</code> 还是 <code>NCLOB</code> 发送给服务器。
 <P><B>注：</B>查询 JDBC 驱动程序文档，以确定使用带 length 参数的 <code>setNClob</code> 是否更有效。

 @param parameterIndex 第一个参数的索引是 1，第二个参数的索引是 2，……
 @param reader 包含用于设置参数值的数据的对象。
 @throws SQLException 如果 parameterIndex 不对应于 SQL 语句中的参数标记；如果驱动程序不支持国家字符集；如果驱动程序检测到可能发生数据转换错误；如果发生数据库访问错误，或者在关闭的 <code>PreparedStatement</code> 上调用此方法
 @throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法

 @since 1.6

<!-- END DATA -->
