<!-- BEGIN KEY -->
java.sql
<!-- END KEY -->
<!-- BEGIN DATA -->

提供使用 Java<sup><font size=-2>TM</font></sup> 编程语言访问并处理存储在数据源（通常是一个关系数据库）中的数据的 API。此 API 包括一个框架，凭借此框架可以动态地安装不同驱动程序来访问不同数据源。尽管 JDBC<sup><font size=-2>TM</font></sup> API 主要用于将 SQL 语句传递给数据库，但它还可以用于以表格方式从任何数据源中读写数据。通过接口的 <code>javax.sql.RowSet</code> 组可以使用的 reader/writer 实用程序，可以被定制以使用和更新来自电子表格、纯文本文件或其他任何表格式数据源的数据。
<P>
<h2>JDBC<sup><font size=-2>TM</font></sup> 4.0 API 中包括的内容</h2>
JDBC<sup><font size=-2>TM</font></sup> 4.0 API 中包括 <code>java.sql</code> 包，被称为 JDBC 核心 API，和 <code>javax.sql</code> 包，被称为 JDBC Optional Package API。完整的 JDBC API 包含在 Java<sup><font size=-2>TM</font></sup> 标准版 (Java SE<sup><font size=-2>TM</font></sup>) 6 版中。<code>javax.sql</code> 包扩展了 JDBC API 的功能，将它从客户端 API 扩展到服务器端 API，该包是 Java<sup><font size=-2>TM</font></sup>、企业版 (Java<sup><font size=-2>TM</font></sup>) 技术的重要部分。
<P>
<h2>版本</h2>
JDBC 4.0 API 综合了以前所有 JDBC API 版本：
<UL>
<LI> JDBC 3.0 API
<LI> JDBC 2.1 核心 API
<LI> JDBC 2.0 Optional Package API<br>（注意，JDBC 2.1 核心 API 和 JDBC 2.0 Optional Package API 组合在一起被称为 JDBC 2.0 API。）
 <LI> The JDBC 1.2 API
 <LI> The JDBC 1.0 API
</UL>
<P>
类、接口、方法、字段、构造方法和异常都有以下 &quot;since&quot; 标记，以指示它们何时被引入 Java 平台。当将这些 &quot;since&quot; 标记用于 JDBC API 的 Javadoc<sup><font size=-2>TM</font></sup> 注释时，它们指示以下内容：
<UL>
<LI>Since 1.6：JDBC 4.0 API 中的新内容和 Java SE 平台 6 版的部分内容
<LI>Since 1.4：JDBC 3.0 API 中的新内容和 J2SE 平台 1.4 版的部分内容
<LI>Since 1.2：JDBC 2.0 API 中的新内容和 J2SE 平台 1.2 版的部分内容
<LI>Since 1.1 或者没有 &quot;since&quot; 标记：原始 JDBC 1.0 API 和 JDK<sup><font size=-2>TM</font></sup> 1.1 版的部分内容
</UL>
<P>
<b>注：</b>许多新特性都是可选的，因此，在这些版本支持的驱动程序和特性中有一些变体。在尝试使用它之前,总是检查驱动程序的文档，以查看它是否支持某一特性。
<P>
<b>注：</b><code>SQLPermission</code> 类被添加到 Java<sup><font size=-2>TM</font></sup> 2 SDK 标准版 1.3 版中。此类用于防止对与 <code>DriverManager</code> 相关联的记录流进行无授权访问，该流可以包含诸如表名称、列数据等信息。
<p>

<h2><code>java.sql</code> Package 包含的内容</h2>
<code>java.sql</code> 包中包含用于以下方面的 API：
<UL>
<LI>通过 <code>DriverManager</code> 实用程序建立与数据库的连接
  <UL>
	 <LI><code>DriverManager</code> 类：建立与驱动程序的连接
	 <LI><code>SQLPermission</code> 类：当代码在 Security Manager（比如 applet）中运行时提供权限，试图通过 <code>DriverManager</code> 设置一个记录流
	 <LI><code>Driver</code> 接口：提供用来注册和连接基于 JDBC 技术（&ldquo;JDBC 驱动程序&rdquo;）的驱动程序的 API，通常仅由 <code>DriverManager</code> 类使用
	 <LI><code>DriverPropertyInfo</code> 类：提供 JDBC 驱动程序的属性，不是供一般用户使用的
  </UL>
<LI>向数据库发送 SQL 语句
  <UL>
	 <LI><code>Statement</code>：用于发送基本 SQL 语句
	 <LI><code>PreparedStatement</code>：用于发送准备好的语句或基本 SQL 语句（派生自 <code>Statement</code>）
	 <LI><code>CallableStatement</code>：用于调用数据库存储过程（派生自 <code>PreparedStatement</code>）
	 <LI><code>Connection</code> 接口：提供创建语句以及管理连接及其属性的方法
	 <LI><code>Savepoint</code>：在事务中提供保存点

  </UL>
<LI>获取和更新查询的结果
  <UL>
	 <LI><code>ResultSet</code> 接口
  </UL>
<LI>SQL 类型到 Java 编程语言中的类和接口的标准映射关系
  <UL>
	 <LI><code>Array</code> 接口：SQL <code>ARRAY</code> 的映射关系
	 <LI><code>Blob</code> 接口：SQL <code>BLOB</code> 的映射关系
	 <LI><code>Clob</code> 接口：SQL <code>CLOB</code> 的映射关系
	 <LI><code>Date</code> 类：SQL <code>DATE</code> 的映射关系
	  <LI><code>NClob</code> 接口：SQL <code>NCLOB</code> 的映射关系
	 <LI><code>Ref</code> 接口：SQL <code>REF</code> 的映射关系
	  <LI><code>RowId</code> 接口：SQL <code>ROWID</code> 的映射关系
	 <LI><code>Struct</code> 接口：SQL <code>STRUCT</code> 的映射关系
	  <LI><code>SQLXML</code> 接口：SQL <code>XML</code> 的映射关系
	 <LI><code>Time</code> 类：SQL <code>TIME</code> 的映射关系
	 <LI><code>Timestamp</code> 类：SQL <code>TIMESTAMP</code> 的映射关系
	 <LI><code>Types</code> 类：提供用于 SQL 类型的常量
  </UL>
<LI>自定义映射 SQL 用户定义类型 (UDT) 到 Java 编程语言中的类
  <UL>
	 <LI><code>SQLData</code> 接口：指定 UDT 到此类的一个实例的映射关系
	 <LI><code>SQLInput</code> 接口：提供用来从流中读取 UDT 属性的方法
	 <LI><code>SQLOutput</code> 接口：提供用来将 UDT 属性写回流中的方法
  </UL>
<LI>元数据
  <UL>
	 <LI><code>DatabaseMetaData</code> 接口：提供有关数据库的信息
	 <LI><code>ResultSetMetaData</code> 接口：提供有关 <code>ResultSet</code> 对象的列的信息
	 <LI><code>ParameterMetaData</code> 接口：提供有关 <code>PreparedStatement</code> 命令的参数的信息
  </UL>
<LI>异常
	<UL>
	  <LI><code>SQLException</code>：由大多数方法在访问数据出问题时抛出，以及因为其他原因由其他一些方法抛出 
	  <LI><code>SQLWarning</code>：为了指示一个警告而抛出
	  <LI><code>DataTruncation</code>：为了指示数据可能已经被截断而抛出
	  <LI><code>BatchUpdateException</code>：为了指示并不是批量更新中的所有命令都成功执行而抛出
	</UL>
</UL>
<P>
<h3>JDBC 4.0 API 中引入的 <code>java.sql</code> 和 <code>javax.sql</code> 特性</h3>
<UL>
  <LI>自动 java.sql.Driver 发现：不再需要通过 <code>Class.forName</code> 来加载 <code>java.sql.Driver</code> 类
 <LI>添加了国家字符集 (National Character Set) 支持
 <li>为 SQL:2003 XML 数据类型添加的支持
 <lI>SQLException 增强：为原因链添加的支持；为公用 SQLState 类值代码添加新 SQLException
 <li>增强的 Blob/Clob 功能：提供创建和释放 Blob/Clob 实例以及为了提高可访问性所添加的一些其他方法
 <li>为访问 SQL ROWID 添加的支持
 <li>添加的支持，允许 JDBC 应用程序访问已被供应商包装的 JDBC 资源实例，通常在一个应用程序服务器或连接池环境中。
 <li>当与 <code>PooledConnection</code> 关联的 <code>PreparedStatement</code> 已关闭或驱动程序确定为无效时要通知的可用性 
 
</UL>
<P>
<P>
<h3>JDBC 3.0 API 中引入的 <code>java.sql</code> 和 <code>javax.sql</code> 特性</h3>
<UL>
<LI>入池语句 (pooled statement)：重新使用与某个已入池的连接 (pooled connection) 相关的语句
<LI>保存点：允许将事务回滚到某一指定保存点
<LI>为 <code>ConnectionPoolDataSource</code> 定义的属性：指定将连接入池的方法
<LI><code>PreparedStatement</code> 对象的参数的元数据
<LI>从自动生成的列中获取值的能力
<LI>使从 <code>CallableStatement</code> 对象中返回的多个 <code>ResultSet</code> 对象同时打开的能力
<LI>通过名称和索引标识 <code>CallableStatement</code> 对象的参数的能力
<LI><code>ResultSet</code> 可保存性：指定是否应该让游标在某一事务结束时保持打开或关闭状态的能力
<LI>获取和更新 <code>Ref</code> 对象引用的 SQL 结构化类型实例的能力
<LI>通过编程方式更新 <code>BLOB</code>、<code>CLOB</code>、<code>ARRAY</code> 和 <code>REF</code> 值的能力。
<LI><code>java.sql.Types.DATALINK</code> 数据类型的添加：允许 JDBC 驱动程序访问数据源以外的地方存储的对象
<LI>用于获取 SQL 类型分层结构的元数据的添加
</UL>
<P>
<h3>JDBC 2.1 Core API 中引入的 <code>java.sql</code> 特性</h3>
<UL>
<LI>可滚动的结果集：使用 <code>ResultSet</code> 接口中的新方法，这些方法允许将光标移动到某一特定行，或者移动到其当前位置的某一相对位置
<LI>批量更新
<LI>编程式更新：使用 <code>ResultSet</code> updater 方法
<LI>新数据类型：映射 SQL3 数据类型的接口
<LI>用户定义类型 (UDT) 的自定义映射关系
<LI>其他特性，包括性能提示、字符流的使用、<code>java.math.BigDecimal</code> 值的完全精度、其他安全性，以及对日期、时间和时间戳值中的时区的支持。 
</UL>
<P>
<h3>JDBC 2.0 Package API 中引入的 <code>javax.sql</code> 特性</h3>
<UL>
<LI><code>DataSource</code> 接口被认为是建立连接的一种方式。Java Naming 和 Directory Interface<sup><font size=-2>TM</font></sup> (JNDI) 用于向命名服务注册一个 <code>DataSource</code> 对象和获取该对象。
<LI>入池连接：允许使用和重新使用连接
<LI>分布式事务：允许事务跨越不同的 DBMS 服务器
<LI><code>RowSet</code> 技术：提供一个处理和传递数据的便捷方法
</UL>
<P>
<P>
<h3>UDT 的自定义映射关系</h3>
可以将 SQL 中定义的用户定义类型 (UDT) 映射到 Java 编程语言中的类。SQL 结构化类型或 SQL <code>DISTINCT</code> 类型是可以自定义映射的 UDT。以下三个步骤设置了一个自定义映射关系：
<ol>
<li>在 SQL 中定义 SQL 结构化类型或 <code>DISTINCT</code> 类型
<li>定义 Java 编程语言中的类，SQL UDT 将映射到该类。此类必须实现 <code>SQLData</code> 接口。
<li>在 <code>Connection</code> 对象的类型映射表中创建一个项，该项包含两项内容：
   <ul>
<li>UDT 的完全限定 SQL 名称
<li>实现 <code>SQLData</code> 接口的类的 <code>Class</code> 对象
   </ul>
</ol>
<p>
为 UDT 准备好这些之后，在该 UDT 上调用 <code>ResultSet.getObject</code> 或 <code>CallableStatement.getObject</code> 方法将自动获取该 UDT 的自定义映射关系。此外，<code>PreparedStatement.setObject</code> 方法会自动将该对象映射回其 SQL 类型，以便将它存储在数据源中。

<h2>包规范</h2>

<ul>
  <li><a href="http://java.sun.com/products/jdbc/download.html"> JDBC 4.0 API 规范</a>
</ul>

<h2>相关文档</h2>

<ul>
<li><a href="../../../guide/jdbc/getstart/GettingStartedTOC.fm.html">Getting Started</a>：主要接口的概述
<P>
<li><a href="http://java.sun.com/docs/books/tutorial/jdbc">Chapters on the JDBC API</a>：取自 <i>The Java Tutorial Continued</i> 的在线版本
<P>
  <li><a href="http://java.sun.com/docs/books/jdbc"><i>JDBC<sup><font size=-2>TM</font></sup>API Tutorial and Reference, Third Edition</i></a>：JDBC 3.0 API 的完整参考和指南
</ul>
<P>
@since 1.1

<!-- END DATA -->
