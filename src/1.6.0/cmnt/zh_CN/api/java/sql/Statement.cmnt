<!-- BEGIN KEY -->
public interface java.sql.Statement extends java.sql.Wrapper
<!-- END KEY -->
<!-- BEGIN DATA -->
<P>用于执行静态 SQL 语句并返回它所生成结果的对象。
 <P>
在默认情况下，同一时间每个 <code>Statement</code> 对象在只能打开一个 <code>ResultSet</code> 对象。因此，如果读取一个 <code>ResultSet</code> 对象与读取另一个交叉，则这两个对象必须是由不同的 <code>Statement</code> 对象生成的。如果存在某个语句的打开的当前 <code>ResultSet</code> 对象，则 <code>Statement</code> 接口中的所有执行方法都会隐式关闭它。

@see Connection#createStatement
@see ResultSet 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.Statement.CLOSE_CURRENT_RESULT
<!-- END KEY -->
<!-- BEGIN DATA -->

该常量指示调用 <code>getMoreResults</code> 时应该关闭当前 <code>ResultSet</code> 对象。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.Statement.KEEP_CURRENT_RESULT
<!-- END KEY -->
<!-- BEGIN DATA -->
该常量指示调用 <code>getMoreResults</code> 时应该关闭当前 <code>ResultSet</code> 对象。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.Statement.CLOSE_ALL_RESULTS
<!-- END KEY -->
<!-- BEGIN DATA -->
该常量指示调用 <code>getMoreResults</code> 时应该关闭以前一直打开的所有 <code>ResultSet</code> 对象。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.Statement.SUCCESS_NO_INFO
<!-- END KEY -->
<!-- BEGIN DATA -->
该常量指示批量语句执行成功但不存在受影响的可用行数计数。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.Statement.EXECUTE_FAILED
<!-- END KEY -->
<!-- BEGIN DATA -->
该常量指示在执行批量语句时发生错误。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.Statement.RETURN_GENERATED_KEYS
<!-- END KEY -->
<!-- BEGIN DATA -->
该常量指示生成的键应该可用于获取。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.Statement.NO_GENERATED_KEYS
<!-- END KEY -->
<!-- BEGIN DATA -->
该常量指示生成的键应该不可用于获取。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.ResultSet java.sql.Statement.executeQuery(String sql) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
执行给定的 SQL 语句，该语句返回单个 <code>ResultSet</code> 对象。

@param sql 要发送给数据库的 SQL 语句，通常为静态 SQL <code>SELECT</code> 语句
@return 包含给定查询所生成数据的 <code>ResultSet</code> 对象；永远不能为 <code>null</code>
@exception SQLException 如果发生数据库访问错误，在已关闭的 <code>Statement</code> 上调用此方法，或者给定 SQL 语句生成单个 <code>ResultSet</code> 对象之外的任何其他内容

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.Statement.executeUpdate(String sql) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
执行给定 SQL 语句，该语句可能为 <code>INSERT</code>、<code>UPDATE</code> 或 <code>DELETE</code> 语句，或者不返回任何内容的 SQL 语句（如 SQL DDL 语句）。

@param sql SQL 数据操作语言（Data Manipulation Language，DML）语句，如 <code>INSERT</code>、<code>UPDATE</code> 或 <code>DELETE</code>；或者不返回任何内容的 SQL 语句，如 DDL 语句。

@return (1) 对于 SQL 数据操作语言 (DML) 语句，返回行计数 (2) 对于什么都不返回的 SQL 语句，返回 0

@exception SQLException 如果发生数据库访问错误，在已关闭的 <code>Statement</code> 上调用此方法，或者给定的 SQL 语句生成 <code>ResultSet</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Statement.close() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
立即释放此 <code>Statement</code> 对象的数据库和 JDBC 资源，而不是等待该对象自动关闭时发生此操作。一般来说，使用完后立即释放资源是一个好习惯，这样可以避免对数据库资源的占用。
 <P>
在已经关闭的 <code>Statement</code> 对象上调用 <code>close</code> 方法无效。
 <P>
<B>注：</B>关闭 <code>Statement</code> 对象时，还将同时关闭其当前的 <code>ResultSet</code> 对象（如果有）。  

@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.Statement.getMaxFieldSize() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取可以为此 <code>Statement</code> 对象所生成 <code>ResultSet</code> 对象中的字符和二进制列值返回的最大字节数。此限制仅应用于 <code>BINARY</code>、<code>VARBINARY</code>、<code>LONGVARBINARY</code>、<code>CHAR</code>、<code>VARCHAR</code>、<code>NCHAR</code>、<code>NVARCHAR</code>、<code>LONGNVARCHAR</code> 和 <code>LONGVARCHAR</code> 列。如果超过了该限制，则直接丢弃多出的数据。

@return 存储字符和二进制值的列的当前列大小限制；0 表示没有任何限制
@exception SQLException 如果发生数据库访问错误，或者在已关闭的 <code>Statement</code> 上调用此方法
@see #setMaxFieldSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Statement.setMaxFieldSize(int max) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 <code>Statement</code> 对象生成的 <code>ResultSet</code> 对象中字符和二进制列值可以返回的最大字节数限制。此限制仅应用于 <code>BINARY</code>、<code>VARBINARY</code>、<code>LONGVARBINARY</code>、<code>CHAR</code>、<code>VARCHAR</code>、<code>NCHAR</code>、<code>NVARCHAR</code>、<code>LONGNVARCHAR</code> 和 <code>LONGVARCHAR</code> 字段。如果超过了该限制，则直接丢弃多出的数据。为了获得最大的可移植性，应该使用大于 256 的值。

@param max 以字节为单位的新列大小限制；0 表示没有任何限制
@exception SQLException 如果发生数据库访问错误，在已关闭的 <code>Statement</code> 上调用此方法，或者不满足条件 max &gt;= 0
@see #getMaxFieldSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.Statement.getMaxRows() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取由此 <code>Statement</code> 对象生成的 <code>ResultSet</code> 对象可以包含的最大行数。如果超过了此限制，则直接撤消多出的行。

@return 由此 <code>Statement</code> 对象生成的 <code>ResultSet</code> 对象的当前最大行数；0 表示不存在任何限制
@exception SQLException 如果发生数据库访问错误，或者在已关闭的 <code>Statement</code> 上调用此方法
@see #setMaxRows

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Statement.setMaxRows(int max) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Statement</code> 对象生成的所有 <code>ResultSet</code> 对象可以包含的最大行数限制设置为给定数。如果超过了该限制，则直接撤消多出的行。

@param max 新的最大行数限制；0 表示没有任何限制
@exception SQLException 如果发生数据库访问错误，在已关闭的 <code>Statement</code> 上调用此方法，或者不满足条件 max &gt;= 0
@see #getMaxRows

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Statement.setEscapeProcessing(boolean enable) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将转义处理设置为开或关。如果转义扫描为开启（默认值），则驱动程序在将 SQL 语句发送到数据库之前执行转义替换。注：因为准备的语句通常在进行此调用之前解析，所以对 <code>PreparedStatements</code> 对象禁用转义处理无效。

@param enable 为 <code>true</code> 表示启用转义处理；为 <code>false</code> 表示禁用转义处理
@exception SQLException 如果发生数据库访问错误，或者在已关闭的 <code>Statement</code> 上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.Statement.getQueryTimeout() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取驱动程序等待 <code>Statement</code> 对象执行的秒数。如果超过该限制，则抛出 <code>SQLException</code>。

@return 以秒为单位的当前查询超时限制；0 表示不存在任何限制
@exception SQLException 如果发生数据库访问错误，或者在已关闭的 <code>Statement</code> 上调用此方法
@see #setQueryTimeout

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Statement.setQueryTimeout(int seconds) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将驱动程序等待 <code>Statement</code> 对象执行的秒数设置为给定秒数。如果超过该限制，则抛出 <code>SQLException</code>。JDBC 驱动程序必须将此限制应用于 <code>execute</code>、<code>executeQuery</code> 和 <code>executeUpdate</code> 方法。JDBC 驱动程序实现也可以将此限制应用于 <code>ResultSet</code> 方法（有关详细信息，请参考驱动程序供应商文档）。

@param seconds 以秒为单位的查询超时限制；0 表示没有任何限制
@exception SQLException 如果发生数据库访问错误，在已关闭的 <code>Statement</code> 上调用此方法，或者不满足条件 seconds &gt;= 0
@see #getQueryTimeout

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Statement.cancel() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 DBMS 和驱动程序都支持中止 SQL 语句，则取消此 <code>Statement</code> 对象。一个线程可以使用此方法取消另一个线程正在执行的语句。

@exception SQLException 如果发生数据库访问错误，或者在已关闭的 <code>Statement</code> 上调用此方法
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLWarning java.sql.Statement.getWarnings() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>Statement</code> 对象上的调用报告的第一个警告。后续的 <code>Statement</code> 对象警告将链接到此 <code>SQLWarning</code> 对象上。

<p>每次（重新）执行语句时，都会自动清除警告链。不可以在关闭的 <code>Statement</code> 对象上调用此方法，这样做将导致抛出 <code>SQLException</code>。

<P><B>注：</B>如果要处理 <code>ResultSet</code> 对象，则与该 <code>ResultSet</code> 对象上的读操作相关联的所有警告都链接到它上面，而不是链接到生成它的 <code>Statement</code> 对象上。

@return 第一个 <code>SQLWarning</code> 对象；如果不存在任何警告，则返回 <code>null</code>
@exception SQLException 如果发生数据库访问错误，或者在已关闭的 <code>Statement</code> 上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Statement.clearWarnings() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
清除在此 <code>Statement</code> 对象上报告的所有警告。调用此方法后，在为此 <code>Statement</code> 对象报告新的警告之前，<code>getWarnings</code> 方法将一直返回 <code>null</code>。  

@exception SQLException 如果发生数据库访问错误，或者在已关闭的 <code>Statement</code> 上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Statement.setCursorName(String name) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 SQL 指针名称设置为给定的 <code>String</code>，后续 <code>Statement</code> 对象的 <code>execute</code> 方法将使用此字符串。然后，可以在 SQL 位置更新或删除语句中使用该名称来标识由此语句生成的 <code>ResultSet</code> 对象中的当前行。如果数据库不支持位置更新/删除，则此方法为无操作 (noop)。为了确保指针具有支持更新的适当隔离级别，指针的 <code>SELECT</code> 语句的形式应该为 <code>SELECT FOR UPDATE</code>。如果 <code>FOR UPDATE</code> 不存在，则位置更新可能失败。

<P><B>注：</B>按照定义，位置更新和删除必须由生成的用于放置的 <code>ResultSet</code> 对象之外的某个 <code>Statement</code> 对象来执行。此外，在连接中指针名称还必须是唯一的。

@param name 新指针名称，该名称在连接中必须是唯一的
@exception SQLException 如果发生数据库访问错误，或者在已关闭的 <code>Statement</code> 上调用此方法
@throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.Statement.execute(String sql) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
执行给定的 SQL 语句，该语句可能返回多个结果。在某些（不常见）情形下，单个 SQL 语句可能返回多个结果集合和/或更新计数。这一点通常可以忽略，除非正在 (1) 执行已知可能返回多个结果的存储过程或者 (2) 动态执行未知 SQL 字符串。  
 <P>
<code>execute</code> 方法执行 SQL 语句并指示第一个结果的形式。然后，必须使用方法 <code>getResultSet</code> 或 <code>getUpdateCount</code> 来获取结果，使用 <code>getMoreResults</code> 来移动后续结果。

@param sql 任何 SQL 语句
@return 如果第一个结果为 <code>ResultSet</code> 对象，则返回 <code>true</code>；如果其为更新计数或者不存在任何结果，则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误，或者在已关闭的 <code>Statement</code> 上调用此方法
@see #getResultSet
@see #getUpdateCount
@see #getMoreResults 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.ResultSet java.sql.Statement.getResultSet() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>ResultSet</code> 对象的形式获取当前结果。每个结果只应调用一次此方法。

@return 以 <code>ResultSet</code> 对象的形式返回当前结果；如果结果是更新计数或没有更多的结果，则返回 <code>null</code>
@exception SQLException 如果发生数据库访问错误，或者在已关闭的 <code>Statement</code> 上调用此方法
@see #execute 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.Statement.getUpdateCount() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
以更新计数的形式获取当前结果；如果结果为 <code>ResultSet</code> 对象或没有更多结果，则返回 -1。每个结果只应调用一次此方法。
 
@return 以更新计数的形式返回当前结果；如果当前结果为 <code>ResultSet</code> 对象或没有更多结果，则返回 -1
@exception SQLException 如果发生数据库访问错误，或者在已关闭的 <code>Statement</code> 上调用此方法
@see #execute 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.Statement.getMoreResults() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
移动到此 <code>Statement</code> 对象的下一个结果，如果其为 <code>ResultSet</code> 对象，则返回 <code>true</code>，并隐式关闭利用方法 <code>getResultSet</code> 获取的所有当前 <code>ResultSet</code> 对象。

<P>当以下表达式为 true 时没有更多结果：
 <PRE>
     // stmt is a Statement object
     ((stmt.getMoreResults() == false) &amp;&amp; (stmt.getUpdateCount() == -1))
 </PRE>

@return 如果下一个结果为 <code>ResultSet</code> 对象，则返回 <code>true</code>；如果其为更新计数或不存在更多结果，则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误，或者在已关闭的 <code>Statement</code> 上调用此方法
@see #execute 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Statement.setFetchDirection(int direction) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
向驱动程序提供关于方向的提示，在使用此 <code>Statement</code> 对象创建的 <code>ResultSet</code> 对象中将按该方向处理行。默认值为 <code>ResultSet.FETCH_FORWARD</code>。
 <P>
注意，此方法为此 <code>Statement</code> 对象生成的结果集合设置默认获取方向。每个结果集合都具有它自己用于获取和设置其自身获取方向的方法。

@param direction 用于处理行的初始方向
@exception SQLException 如果发生数据库访问错误，在已关闭的 <code>Statement</code> 上调用此方法，或者给定的方向不是 <code>ResultSet.FETCH_FORWARD</code>、<code>ResultSet.FETCH_REVERSE</code> 和 <code>ResultSet.FETCH_UNKNOWN</code> 之一
@since 1.2
@see #getFetchDirection

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.Statement.getFetchDirection() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取从数据库表获取行的方向，该方向是根据此 <code>Statement</code> 对象生成的结果集合的默认值。如果此 <code>Statement</code> 对象没有通过调用方法 <code>setFetchDirection</code> 设置获取方向，则返回值是特定于实现的。

@return 根据此 <code>Statement</code> 对象生成的结果集合的默认获取方向
@exception SQLException 如果发生数据库访问错误，或者在已关闭的 <code>Statement</code> 上调用此方法
@since 1.2
@see #setFetchDirection

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Statement.setFetchSize(int rows) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
为 JDBC 驱动程序提供一个提示，它提示此 <code>Statement</code> 生成的 <code>ResultSet</code> 对象需要更多行时应该从数据库获取的行数。指定的行数仅影响使用此语句创建的结果集合。如果指定的值为 0，则忽略该提示。默认值为 0。

@param rows 要获取的行数
@exception SQLException 如果发生数据库访问错误，在已关闭的 <code>Statement</code> 上调用此方法，或者不满足条件 <code>rows >= 0</code>。
@since 1.2
@see #getFetchSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.Statement.getFetchSize() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取结果集合的行数，该数是根据此 <code>Statement</code> 对象生成的 <code>ResultSet</code> 对象的默认获取大小。如果此 <code>Statement</code> 对象没有通过调用方法 <code>setFetchSize</code> 设置获取大小，则返回值是特定于实现的。

@return 根据此 <code>Statement</code> 对象生成的结果集合的默认获取大小
@exception SQLException 如果发生数据库访问错误，或者在已关闭的 <code>Statement</code> 上调用此方法
@since 1.2
@see #setFetchSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.Statement.getResultSetConcurrency() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>Statement</code> 对象生成的 <code>ResultSet</code> 对象的结果集合并发性。

@return <code>ResultSet.CONCUR_READ_ONLY</code> 或 <code>ResultSet.CONCUR_UPDATABLE</code>
@exception SQLException 如果发生数据库访问错误，或者在已关闭的 <code>Statement</code> 上调用此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.Statement.getResultSetType() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>Statement</code> 对象生成的 <code>ResultSet</code> 对象的结果集合类型。

@return <code>ResultSet.TYPE_FORWARD_ONLY</code>、<code>ResultSet.TYPE_SCROLL_INSENSITIVE</code> 或 <code>ResultSet.TYPE_SCROLL_SENSITIVE</code> 之一
@exception SQLException 如果发生数据库访问错误，或者在已关闭的 <code>Statement</code> 上调用此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Statement.addBatch(String sql) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定的 SQL 命令添加到此 <code>Statement</code> 对象的当前命令列表中。通过调用方法 <code>executeBatch</code> 可以批量执行此列表中的命令。
 <P>

@param sql 通常此参数为 SQL <code>INSERT</code> 或 <code>UPDATE</code> 语句
@exception SQLException 如果发生数据库访问错误，在已关闭的 <code>Statement</code> 上调用此方法，或者驱动程序不支持批量更新
@see #executeBatch
@see DatabaseMetaData#supportsBatchUpdates
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Statement.clearBatch() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
清空此 <code>Statement</code> 对象的当前 SQL 命令列表。
 <P>
@exception SQLException 如果发生数据库访问错误，在已关闭的 <code>Statement</code> 上调用此方法，或者驱动程序不支持批量更新
@see #addBatch
@see DatabaseMetaData#supportsBatchUpdates
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.sql.Statement.executeBatch() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将一批命令提交给数据库来执行，如果全部命令执行成功，则返回更新计数组成的数组。返回数组的 <code>int</code> 元素的排序对应于批中的命令，批中的命令根据被添加到批中的顺序排序。方法 <code>executeBatch</code> 返回的数组中的元素可能为以下元素之一：
 <OL>
<LI>大于等于 0 的数 - 指示成功处理了命令，是给出执行命令所影响数据库中行数的更新计数
<LI><code>SUCCESS_NO_INFO</code> 的值 - 指示成功执行了命令，但受影响的行数是未知的
 <P> 
如果批量更新中的命令之一无法正确执行，则此方法抛出 <code>BatchUpdateException</code>，并且 JDBC 驱动程序可能继续处理批处理中的剩余命令，也可能不执行。无论如何，驱动程序的行为必须与特定的 DBMS 一致，要么始终继续处理命令，要么永远不继续处理命令。如果驱动程序在某一次失败后继续进行处理，则 <code>BatchUpdateException.getUpdateCounts</code> 方法返回的数组将包含的元素与批中存在的命令一样多，并且其中至少有一个元素将为：
 <P> 
<LI><code>EXECUTE_FAILED</code> 的值 - 指示未能成功执行命令，仅当命令失败后驱动程序继续处理命令时出现
 </OL>
 <P>
在 Java 2 SDK, Standard Edition, 1.3 版中已经修改了可能的实现和返回值，以适应抛出 <code>BatchUpdateException</code> 对象后在批量更新中继续处理命令的选项。

@return 包含批中每个命令的一个元素的更新计数所组成的数组。数组的元素根据将命令添加到批中的顺序排序。
@exception SQLException 如果发生数据库访问错误，在已关闭的 <code>Statement</code> 上调用此方法，或者驱动程序不支持批量语句。如果未能正确执行发送到数据库的命令之一或者尝试返回结果集合，则抛出 {@link BatchUpdateException}（<code>SQLException</code> 的子类）。


@see #addBatch    
@see DatabaseMetaData#supportsBatchUpdates
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Connection java.sql.Statement.getConnection() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取生成此 <code>Statement</code> 对象的 <code>Connection</code> 对象。
@return 此语句生成的连接
@exception SQLException 如果发生数据库访问错误，或者在已关闭的 <code>Statement</code> 上调用此方法
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.Statement.getMoreResults(int current) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Statement</code> 对象移动到下一个结果，根据给定标志指定的指令处理所有当前 <code>ResultSet</code> 对象；如果下一个结果为 <code>ResultSet</code> 对象，则返回 <code>true</code>。

<P>当以下表达式为 true 时没有更多结果：
 <PRE>
     // stmt is a Statement object
     ((stmt.getMoreResults(current) == false) &amp;&amp; (stmt.getUpdateCount() == -1))
 </PRE>

@param current 下列 <code>Statement</code> 常量之一，这些常量指示将对使用 <code>getResultSet</code> 方法获取的当前 <code>ResultSet</code> 对象发生的操作：<code>Statement.CLOSE_CURRENT_RESULT</code>、<code>Statement.KEEP_CURRENT_RESULT</code> 或 <code>Statement.CLOSE_ALL_RESULTS</code>
@return 如果下一个结果为 <code>ResultSet</code> 对象，则返回 <code>true</code>；如果其为更新计数或者不存在更多的结果，则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误，在已关闭的 <code>Statement</code> 上调用此方法，或者提供的参数不是以下参数之一：<code>Statement.CLOSE_CURRENT_RESULT</code>、<code>Statement.KEEP_CURRENT_RESULT</code> 或 <code>Statement.CLOSE_ALL_RESULTS</code>
@exception SQLFeatureNotSupportedException 如果 <code>DatabaseMetaData.supportsMultipleOpenResults</code> 返回 <code>false</code>，并且 <code>Statement.KEEP_CURRENT_RESULT</code> 或 <code>Statement.CLOSE_ALL_RESULTS</code> 作为参数提供。
@since 1.4
@see #execute

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.ResultSet java.sql.Statement.getGeneratedKeys() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取由于执行此 <code>Statement</code> 对象而创建的所有自动生成的键。如果此 <code>Statement</code> 对象没有生成任何键，则返回空的 <code>ResultSet</code> 对象。

<p><B>注：</B>如果未指定表示自动生成键的列，则 JDBC 驱动程序实现将确定最能表示自动生成键的列。

@return 包含通过执行此 <code>Statement</code> 对象自动生成的键的 <code>ResultSet</code> 对象
@exception SQLException 如果发生数据库访问错误，或者在已关闭的 <code>Statement</code> 上调用此方法
@throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.Statement.executeUpdate(String sql, int autoGeneratedKeys) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
执行给定的 SQL 语句，并用给定标志通知驱动程序由此 <code>Statement</code> 生成的自动生成键是否可用于获取。如果该 SQL 语句不是 <code>INSERT</code> 语句，或者不是可以返回自动生成键的 SQL 语句（这些语句的列表是特定于供应商的），则驱动程序将忽略该标志。

@param sql SQL 数据操作语言（Data Manipulation Language，DML）语句，如 <code>INSERT</code>、<code>UPDATE</code> 或 <code>DELETE</code>；或者是不返回任何内容的 SQL 语句，如 DDL 语句。

@param autoGeneratedKeys 指示自动生成的键是否可用于获取的标志；以下常量之一：<code>Statement.RETURN_GENERATED_KEYS</code> <code>Statement.NO_GENERATED_KEYS</code>
@return (1) 对于 SQL 数据操作语言 (DML) 语句，返回行计数 (2) 对于不返回任何内容的 SQL 语句，返回 0

@exception SQLException 如果发生数据库访问错误，在已关闭的 <code>Statement</code> 上调用此方法，给定的 SQL 语句返回 <code>ResultSet</code> 对象，或者给定的常量不是允许的常量之一
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持带 Statement.RETURN_GENERATED_KEYS 常量的此方法
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.Statement.executeUpdate(String sql, int[] columnIndexes) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
执行给定的 SQL 语句，并通知驱动程序在给定数组中指示的自动生成的键应该可用于获取。此数组包含目标表中的列的索引，该目标表包含应该可获取的自动生成的键。如果该 SQL 语句不是 <code>INSERT</code> 语句，或者不是可以返回自动生成键的 SQL 语句（这些语句的列表是特定于供应商的），则驱动程序将忽略该数组。

@param sql SQL 数据操作语言 (DML) 语句，如 <code>INSERT</code>、<code>UPDATE</code> 或 <code>DELETE</code>；或者不返回任何内容的 SQL 语句，如 DDL 语句。
@param columnIndexes 指示应该从插入行返回列的列索引数组
@return (1) 对于 SQL 数据操作语言 (DML) 语句，返回行计数 (2) 对于不返回任何内容的 SQL 语句，返回 0

@exception SQLException 如果发生数据库访问错误，在已关闭的 <code>Statement</code> 上调用此方法，SQL 语句返回 <code>ResultSet</code> 对象，或者提供给此方法的第二个参数不是其元素为有效列索引的 <code>int</code> 数组
@throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.Statement.executeUpdate(String sql, java.lang.String[] columnNames) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
执行给定的 SQL 语句，并通知驱动程序在给定数组中指示的自动生成的键应该可用于获取。此数组包含目标表中的列的名称，该目标表包含应该可获取的自动生成的键。如果该 SQL 语句不是 <code>INSERT</code> 语句，或者不是可以返回自动生成键的 SQL 语句（这些语句的列表是特定于供应商的），则驱动程序将忽略该数组。

@param sql SQL 数据操作语言 (DML) 语句，如 <code>INSERT</code>、<code>UPDATE</code> 或 <code>DELETE</code>；或者不返回任何内容的 SQL 语句，如 DDL 语句。
@param columnNames 应该从插入行返回的列的名称数组
@return 或者为 <code>INSERT</code>、<code>UPDATE</code> 或 <code>DELETE</code> 语句，或者为 0，表示不返回任何内容的 SQL 语句
@exception SQLException 如果发生数据库访问错误，在已关闭的 <code>Statement</code> 上调用此方法，SQL 语句返回 <code>ResultSet</code> 对象，或者提供给此方法的第二个参数不是其元素为有效列名称的 <code>String</code> 数组

@throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.Statement.execute(String sql, int autoGeneratedKeys) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
执行给定的 SQL 语句（该语句可能返回多个结果），并通知驱动程序所有自动生成的键都应该可用于获取。如果该 SQL 语句不是 <code>INSERT</code> 语句，或者不是可以返回自动生成键的 SQL 语句（这些语句的列表是特定于供应商的），则驱动程序将忽略此信号。
 <P>
在某些（不常见）情形下，单个 SQL 语句可能返回多个结果集合和/或更新计数。这一点通常可以忽略，除非正在 (1) 执行已知可能返回多个结果的存储过程或者 (2) 动态执行未知 SQL 字符串。
 <P>
<code>execute</code> 方法执行 SQL 语句并指示第一个结果的形式。然后，必须使用方法 <code>getResultSet</code> 或 <code>getUpdateCount</code> 来获取结果，使用 <code>getMoreResults</code> 来移动后续结果。

@param sql 任何 SQL 语句
@param autoGeneratedKeys 指示是否应该使用 <code>getGeneratedKeys</code> 方法使自动生成的键可用于获取的常量；以下常量之一：<code>Statement.RETURN_GENERATED_KEYS</code> 或 <code>Statement.NO_GENERATED_KEYS</code>
@return 如果第一个结果为 <code>ResultSet</code> 对象，则返回 <code>true</code>；如果其为更新计数或者不存在任何结果，则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误，在已关闭的 <code>Statement</code> 上调用此方法，或者提供给此方法的第二个参数不是 <code>Statement.RETURN_GENERATED_KEYS</code> 或 <code>Statement.NO_GENERATED_KEYS</code>。
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持带 Statement.RETURN_GENERATED_KEYS 常量的此方法
@see #getResultSet
@see #getUpdateCount
@see #getMoreResults
@see #getGeneratedKeys

@since 1.4 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.Statement.execute(String sql, int[] columnIndexes) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
执行给定的 SQL 语句（该语句可能返回多个结果），并通知驱动程序在给定数组中指示的自动生成的键应该可用于获取。此数组包含目标表中的列的索引，而该目标表包含应该使其可用的自动生成的键。如果该 SQL 语句不是 <code>INSERT</code> 语句，或者不是可以返回自动生成键的 SQL 语句（这些语句的列表是特定于供应商的），则驱动程序将忽略该数组。
 <P>
在某些（不常见）情形下，单个 SQL 语句可能返回多个结果集合和/或更新计数。这一点通常可以忽略，除非正在 (1) 执行已知可能返回多个结果的存储过程或者 (2) 动态执行未知 SQL 字符串。  
 <P>
<code>execute</code> 方法执行 SQL 语句并指示第一个结果的形式。然后，必须使用方法 <code>getResultSet</code> 或 <code>getUpdateCount</code> 来获取结果，使用 <code>getMoreResults</code> 来移动后续结果。

@param sql 任何 SQL 语句
@param columnIndexes 通过调用方法 <code>getGeneratedKeys</code> 应该可用于获取的插入行中的列索引数组
@return 如果第一个结果为 <code>ResultSet</code> 对象，则返回 <code>true</code>；如果其为更新计数或者不存在任何结果，则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误，在已关闭的 <code>Statement</code> 上调用此方法，或者传递给此方法的 <code>int</code> 数组中的元素不是有效的列索引
@throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
@see #getResultSet
@see #getUpdateCount
@see #getMoreResults

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.Statement.execute(String sql, java.lang.String[] columnNames) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
执行给定的 SQL 语句（该语句可能返回多个结果），并通知驱动程序在给定数组中指示的自动生成的键应该可用于获取。此数组包含目标表中的列的名称，而该目标表包含应该使其可用的自动生成的键。如果该 SQL 语句不是 <code>INSERT</code> 语句，或者不是可以返回自动生成键的 SQL 语句（这些语句的列表是特定于供应商的），则驱动程序将忽略该数组。
 <P>
在某些（不常见）情形下，单个 SQL 语句可能返回多个结果集合和/或更新计数。这一点通常可以忽略，除非正在 (1) 执行已知可能返回多个结果的存储过程或者 (2) 动态执行未知 SQL 字符串。  
 <P>
<code>execute</code> 方法执行 SQL 语句并指示第一个结果的形式。然后，必须使用方法 <code>getResultSet</code> 或 <code>getUpdateCount</code> 来获取结果，使用 <code>getMoreResults</code> 来移动后续结果。

@param sql 任何 SQL 语句
@param columnNames 通过调用方法 <code>getGeneratedKeys</code> 应该可用于获取的插入行中的列名称数组
@return 如果下一个结果为 <code>ResultSet</code> 对象，则返回 <code>true</code>；如果其为更新计数或者不存在更多结果，则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误，在已关闭的 <code>Statement</code> 上调用此方法，或者传递给此方法的 <code>String</code> 数组的元素不是有效的列名称
@throws SQLFeatureNotSupportedException  如果 JDBC 驱动程序不支持此方法
@see #getResultSet
@see #getUpdateCount
@see #getMoreResults
@see #getGeneratedKeys

@since 1.4 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.Statement.getResultSetHoldability() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>Statement</code> 对象生成的 <code>ResultSet</code> 对象的结果集合可保存性。

@return <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> 或 <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
@exception SQLException 如果发生数据库访问错误，或者在已关闭的 <code>Statement</code> 上调用此方法

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.Statement.isClosed() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 获取是否已关闭了此 <code>Statement</code> 对象。如果已经对它调用了 close 方法，或者它自动关闭，则 <code>Statement</code> 已关闭。
 @return 如果此 <code>Statement</code> 对象关闭，则返回 true；如果它仍是打开的，则返回 false
 @throws SQLException 如果发生数据库访问错误
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Statement.setPoolable(boolean poolable) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
请求将 <code>Statement</code> 池化或非池化。指定值是语句池实现的一个提示，指示应用程序是否希望语句被池化。关于是否使用该提示，由语句池管理器决定。
 <p>
语句的可池化的值对驱动程序实现的内部语句缓存以及应用程序服务器和其他应用程序实现的外部语句缓存都适用。
 <p>
默认情况下，<code>Statement</code> 在创建时不是可池化的，而 <code>PreparedStatement</code> 和 <code>CallableStatement</code> 在创建时是可池化的。
 <p>
 @param poolable		如果为 true，则请求将语句池化；如果为 false，则不池化语句
 <p>
 @throws SQLException 如果在已关闭的 <code>Statement</code> 上调用此方法
 <p>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.Statement.isPoolable() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回指示 <code>Statement</code> 是否是可池化的值。
 <p>
 @return		如果 <code>Statement</code> 是可池化的，则返回 <code>true</code>；否则返回 <code>false</code> 
 <p>
 @throws SQLException 如果在已关闭的 <code>Statement</code> 上调用此方法
 <p>
 @since 1.6
 <p>
 @see java.sql.Statement#setPoolable(boolean) setPoolable(boolean)

<!-- END DATA -->
