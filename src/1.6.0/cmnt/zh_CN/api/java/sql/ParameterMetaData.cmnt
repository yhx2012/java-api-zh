<!-- BEGIN KEY -->
public interface java.sql.ParameterMetaData extends java.sql.Wrapper
<!-- END KEY -->
<!-- BEGIN DATA -->
可用于获取关于 <code>PreparedStatement</code> 对象中每个参数标记的类型和属性信息的对象。对于某些查询和驱动程序实现，由 <code>ParameterMetaData</code> 对象返回的数据在 <code>PreparedStatement</code> 执行前可能不可用。
<p>
某些驱动程序实现无法提供关于 <code>CallableStatement</code> 对象中每个参数标记的类型和属性的信息。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.ParameterMetaData.parameterNoNulls
<!-- END KEY -->
<!-- BEGIN DATA -->
指示某一参数将不允许使用 <code>NULL</code> 值的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.ParameterMetaData.parameterNullable
<!-- END KEY -->
<!-- BEGIN DATA -->
指示某一参数将允许使用 <code>NULL</code> 值的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.ParameterMetaData.parameterNullableUnknown
<!-- END KEY -->
<!-- BEGIN DATA -->
指示不知道某一参数是否可为 null 的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.ParameterMetaData.parameterModeUnknown
<!-- END KEY -->
<!-- BEGIN DATA -->
指示参数模式是未知的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.ParameterMetaData.parameterModeIn
<!-- END KEY -->
<!-- BEGIN DATA -->
指示参数模式为 IN 的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.ParameterMetaData.parameterModeInOut
<!-- END KEY -->
<!-- BEGIN DATA -->
指示参数模式为 INOUT 的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.ParameterMetaData.parameterModeOut
<!-- END KEY -->
<!-- BEGIN DATA -->
指示参数模式为 OUT 的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.ParameterMetaData.getParameterCount() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>PreparedStatement</code> 对象中的参数的数量，此 <code>ParameterMetaData</code> 对象包含了该对象的信息。

@return 参数的数量
@exception SQLException 如果发生数据库访问错误
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.ParameterMetaData.isNullable(int param) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取是否允许在指定参数中使用 null 值。

@param param 第一个参数是 1，第二个参数是 2，……
@return 给定参数的状态是否可为 null，该状态值是 <code>ParameterMetaData.parameterNoNulls</code>、<code>ParameterMetaData.parameterNullable</code> 或 <code>ParameterMetaData.parameterNullableUnknown</code> 之一
@exception SQLException 如果发生数据库访问错误
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.ParameterMetaData.isSigned(int param) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定参数的值是否可以是带符号的数字。

@param param 第一个参数是 1，第二个参数是 2，……
@return 如果是这样，则返回 <code>true</code>；否则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.ParameterMetaData.getPrecision(int param) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定参数的指定列大小。

 <P>返回值表示给定参数的最大列大小。对于数值数据，这是最大精度。对于字符数据，这是字符长度。对于日期时间数据类型，这是 String 表示形式的字符长度（假定允许的最大小数秒组件的精度）。对于二进制数据，这是字节长度。对于 ROWID 数据类型，这是字节长度。对于列大小不可用的数据类型，则返回 0。 

@param param 第一个参数是 1，第二个参数是 2，……
@return 精度
@exception SQLException 如果发生数据库访问错误
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.ParameterMetaData.getScale(int param) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定参数的小数点右边的位数。对于标度不可用的数据类型，则返回 0。 

@param param 第一个参数是 1，第二个参数是 2，……
@return 精度
@exception SQLException 如果发生数据库访问错误
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.ParameterMetaData.getParameterType(int param) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定参数的 SQL 类型。

@param param 第一个参数是 1，第二个参数是 2，……
@return 来自 <code>java.sql.Types</code> 的 SQL 类型
@exception SQLException 如果发生数据库访问错误
@since 1.4
@see Types

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.sql.ParameterMetaData.getParameterTypeName(int param) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定参数的特定于数据库的类型名称。

@param param 第一个参数是 1，第二个参数是 2，……
@return 数据库使用的类型名称。如果参数类型是用户定义的类型，则返回完全限定的类型名称。
@exception SQLException 如果发生数据库访问错误
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.sql.ParameterMetaData.getParameterClassName(int param) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 Java 类的完全限定名称，该类的实例应该传递给 <code>PreparedStatement.setObject</code> 方法。

@param param 第一个参数是 1，第二个参数是 2，……
@return Java 编程语言中的类的完全限定名称，方法 <code>PreparedStatement.setObject</code> 将使用该名称设置指定参数中的值。此为用于自定义映射关系的类名称。
@exception SQLException 如果发生数据库访问错误
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.ParameterMetaData.getParameterMode(int param) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定参数的模式。

@param param 第一个参数是 1，第二个参数是 2，……
@return 参数的模式，该模式是 <code>ParameterMetaData.parameterModeIn</code>、<code>ParameterMetaData.parameterModeOut</code>、<code>ParameterMetaData.parameterModeInOut</code> 或 <code>ParameterMetaData.parameterModeUnknown</code> 之一。
@exception SQLException 如果发生数据库访问错误
@since 1.4

<!-- END DATA -->
