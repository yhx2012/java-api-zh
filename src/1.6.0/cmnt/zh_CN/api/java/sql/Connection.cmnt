<!-- BEGIN KEY -->
public interface java.sql.Connection extends java.sql.Wrapper
<!-- END KEY -->
<!-- BEGIN DATA -->
<P>与特定数据库的连接（会话）。在连接上下文中执行 SQL 语句并返回结果。
 <P>
<code>Connection</code> 对象的数据库能够提供描述其表、所支持的 SQL 语法、存储过程、此连接功能等等的信息。此信息是使用 <code>getMetaData</code> 方法获得的。

 <P><B>注：</B>在配置 <code>Connection</code> 时，JDBC 应用程序应该使用适当的 <code>Connection</code> 方法，比如 <code>setAutoCommit</code> 或 <code>setTransactionIsolation</code>。在有可用的 JDBC 方法时，应用程序不能直接调用 SQL 命令更改连接的配置。默认情况下，<code>Connection</code> 对象处于自动提交模式下，这意味着它在执行每个语句后都会自动提交更改。如果禁用了自动提交模式，那么要提交更改就必须显式调用 <code>commit</code> 方法；否则无法保存数据库更改。
 <P>
使用 JDBC 2.1 核心 API 创建的新 <code>Connection</code> 对象有一个与之关联的最初为空的类型映射。用户可以为此类型映射中的 UDT 输入一个自定义映射关系。在使用 <code>ResultSet.getObject</code> 方法从数据源中获取 UDT 时，<code>getObject</code> 方法将检查该连接的类型映射是否有对应该 UDT 的条目。如果有，那么 <code>getObject</code> 方法将该 UDT 映射到所指示的类。如果没有条目，则使用标准映射关系映射该 UDT。
 <p>
用户可以创建一个新的类型映射，该映射是一个 <code>java.util.Map</code> 对象，可在其中创建一个条目，并将该条目传递给可以执行自定义映射关系的 <code>java.sql</code> 方法。在这种情况下，该方法将使用给定的类型映射，而不是与连接关联的映射。
 <p>
例如，以下代码片段指定 SQL 类型 <code>ATHLETES</code> 将被映射到 Java 编程语言中的 <code>Athletes</code> 类。该代码片段为 <code>Connection</code> 对象 <code>con</code> 获取类型映射，并在其中插入条目，然后使用新的条目将该类型映射设置为连接的类型映射。
 <pre>
      java.util.Map map = con.getTypeMap();
      map.put(&quot;mySchemaName.ATHLETES&quot;, Class.forName(&quot;Athletes&quot;));
      con.setTypeMap(map);
 </pre>

@see DriverManager#getConnection
@see Statement
@see ResultSet
@see DatabaseMetaData

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.Connection.TRANSACTION_NONE
<!-- END KEY -->
<!-- BEGIN DATA -->
指示事务不受支持的常量。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.Connection.TRANSACTION_READ_UNCOMMITTED
<!-- END KEY -->
<!-- BEGIN DATA -->
指示可以发生脏读 (dirty read)、不可重复读和虚读 (phantom read) 的常量。此级别允许被某一事务更改的行在已提交该行所有更改之前被另一个事务读取（&ldquo;脏读&rdquo;）。如果所有更改都被回滚，则第二个事务将获取无效的行。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.Connection.TRANSACTION_READ_COMMITTED
<!-- END KEY -->
<!-- BEGIN DATA -->
指示不可以发生脏读的常量；不可重复读和虚读可以发生。此级别只禁止事务读取其中带有未提交更改的行。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.Connection.TRANSACTION_REPEATABLE_READ
<!-- END KEY -->
<!-- BEGIN DATA -->
指示不可以发生脏读和不可重复读的常量；虚读可以发生。此级别禁止事务读取带有未提交更改的行，它还禁止这种情况：一个事务读取某一行，而另一个事务更改该行，第一个事务重新读取该行，并在第二次读取时获得不同的值（&ldquo;不可重复读&rdquo;）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.sql.Connection.TRANSACTION_SERIALIZABLE
<!-- END KEY -->
<!-- BEGIN DATA -->
指示不可以发生脏读、不可重复读和虚读的常量。此级别包括 <code>TRANSACTION_REPEATABLE_READ</code> 中禁止的事项，同时还禁止出现这种情况：某一事务读取所有满足 <code>WHERE</code> 条件的行，另一个事务插入一个满足 <code>WHERE</code> 条件的行，第一个事务重新读取满足相同条件的行，并在第二次读取时获得额外的&ldquo;虚&rdquo;行。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Statement java.sql.Connection.createStatement() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>Statement</code> 对象来将 SQL 语句发送到数据库。不带参数的 SQL 语句通常使用 <code>Statement</code> 对象执行。如果多次执行相同的 SQL 语句，使用 <code>PreparedStatement</code> 对象可能更有效。
 <P>
使用返回的 <code>Statement</code> 对象创建的结果集在默认情况下类型为 <code>TYPE_FORWARD_ONLY</code>，并带有 <code>CONCUR_READ_ONLY</code> 并发级别。已创建结果集的可保存性可调用 {@link #getHoldability} 确定。

@return 一个新的默认 <code>Statement</code> 对象
@exception SQLException 如果发生数据库访问错误，或者在关闭的连接上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.PreparedStatement java.sql.Connection.prepareStatement(String sql) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>PreparedStatement</code> 对象来将参数化的 SQL 语句发送到数据库。
 <P>
带有 IN 参数或不带有 IN 参数的 SQL 语句都可以被预编译并存储在 <code>PreparedStatement</code> 对象中。然后可以有效地使用此对象来多次执行该语句。

<P><B>注：</B>为了处理受益于预编译的带参数 SQL 语句，此方法进行了优化。如果驱动程序支持预编译，则 <code>prepareStatement</code> 方法将该语句发送给数据库进行预编译。一些驱动程序可能不支持预编译。在这种情况下，执行 <code>PreparedStatement</code> 对象之前无法将语句发送给数据库。这对用户没有直接影响；但它的确会影响哪些方法将抛出某些 <code>SQLException</code> 对象。
 <P>
使用返回的 <code>PreparedStatement</code> 对象创建的结果集在默认情况下类型为 <code>TYPE_FORWARD_ONLY</code>，并带有 <code>CONCUR_READ_ONLY</code> 并发级别。已创建结果集的可保存性可调用 {@link #getHoldability} 确定。

@param sql 可能包含一个或多个 '?' IN 参数占位符的 SQL 语句
@return 包含预编译 SQL 语句的新的默认 <code>PreparedStatement</code> 对象
@exception SQLException 如果发生数据库访问错误，或者在关闭的连接上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.CallableStatement java.sql.Connection.prepareCall(String sql) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>CallableStatement</code> 对象来调用数据库存储过程。<code>CallableStatement</code> 对象提供了设置其 IN 和 OUT 参数的方法，以及用来执行调用存储过程的方法。

<P><B>注：</B>为了处理存储过程调用语句，此方法进行了优化。某些驱动程序可以在调用 <code>prepareCall</code> 方法后将调用语句发送给数据库；另一些则直到执行了 <code>CallableStatement</code> 对象后才可以发送。这对用户没有直接影响；但它的确会影响哪些方法将抛出某些 SQLException。
 <P>
使用返回的 <code>CallableStatement</code> 对象创建的结果集在默认情况下类型为 <code>TYPE_FORWARD_ONLY</code>，并带有 <code>CONCUR_READ_ONLY</code> 并发级别。已创建结果集的可保存性可调用 {@link #getHoldability} 确定。

@param sql 可以包含一个或多个 '?' 参数占位符的 SQL 语句。通常此语句是使用 JDBC 调用转义语法指定的。
@return 包含预编译 SQL 语句的新的默认 <code>CallableStatement</code> 对象
@exception SQLException 如果发生数据库访问错误，或者在关闭的连接上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.sql.Connection.nativeSQL(String sql) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定的 SQL 语句转换成系统本机 SQL 语法。在发送 JDBC SQL 语法之前，驱动程序可以将其转换成其系统本机 SQL 语法。此方法返回驱动程序将发送的语句的本机形式。

@param sql 可以包含一个或多个 '?' 参数占位符的 SQL 语句
@return 此语句的本机形式
@exception SQLException 如果发生数据库访问错误，或者在关闭的连接上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Connection.setAutoCommit(boolean autoCommit) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此连接的自动提交模式设置为给定状态。如果连接处于自动提交模式下，则它的所有 SQL 语句将被执行并作为单个事务提交。否则，它的 SQL 语句将聚集到事务中，直到调用 <code>commit</code> 方法或 <code>rollback</code> 方法为止。默认情况下，新连接处于自动提交模式。
 <P>
 提交发生在语句完成时。语句完成的时间取决于 SQL 语句的类型：<ul>
 <li>对于 DML 语句（比如 Insert、Update 或 Delete）和 DDL 语句，语句在执行完毕时完成。
 <li>对于 Select 语句，语句在关联结果集关闭时完成。
 <li>对于 <code>CallableStatement</code> 对象或者返回多个结果的语句，语句在所有关联结果集关闭并且已获得所有更新计数和输出参数时完成。
</ul>
 <P>
 <B>注：</B>如果在事务和自动提交模式更改期间调用此方法，则提交该事务。如果调用 <code>setAutoCommit</code> 而自动提交模式未更改，则该调用无操作（no-op）。

@param autoCommit 为 <code>true</code> 表示启用自动提交模式；为 <code>false</code> 表示禁用自动提交模式
@exception SQLException 如果发生数据库访问错误，在参与分布式事务的同时调用 setAutoCommit(true)，或者在关闭的连接上调用此方法
@see #getAutoCommit

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.Connection.getAutoCommit() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>Connection</code> 对象的当前自动提交模式。

@return 此 <code>Connection</code> 对象的自动提交模式的当前状态
@exception SQLException 如果发生数据库访问错误，或者在关闭的连接上调用此方法
@see #getAutoCommit
@see #setAutoCommit 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Connection.commit() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
使所有上一次提交/回滚后进行的更改成为持久更改，并释放此 <code>Connection</code> 对象当前持有的所有数据库锁。此方法只应该在已禁用自动提交模式时使用。

@exception SQLException 如果发生数据库访问错误，在参与分布式事务的同时调用此方法，在关闭的连接上调用此方法，或者此 <code>Connection</code> 对象处于自动提交模式
@see #setAutoCommit 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Connection.rollback() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
取消在当前事务中进行的所有更改，并释放此 <code>Connection</code> 对象当前持有的所有数据库锁。此方法只应该在已禁用自动提交模式时使用。

@exception SQLException 如果发生数据库访问错误，在参与分布式事务的同时调用此方法，在关闭的连接上调用此方法，或者此 <code>Connection</code> 对象处于自动提交模式
@see #setAutoCommit 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Connection.close() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
立即释放此 <code>Connection</code> 对象的数据库和 JDBC 资源，而不是等待它们被自动释放。
 <P>
在已经关闭的 <code>Connection</code> 对象上调用 <code>close</code> 方法无操作 (no-op)。
 <P>
<b>建议最好</b>在调用 <code>close</code> 方法之前，应用程序显式提交或回滚一个活动事务。如果调用 <code>close</code> 方法并且有一个活动事务，那么结果将由实现定义。

@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.Connection.isClosed() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
查询此 <code>Connection</code> 对象是否已经被关闭。如果在连接上调用了 <code>close</code> 方法或者发生某些严重的错误，则连接被关闭。只有在调用了 <code>Connection.close</code> 方法之后被调用时，此方法才保证返回 <code>true</code>。
 <P>
通常不能调用此方法确定到数据库的连接是有效的还是无效的。通过捕获在试图进行某一操作时可能抛出的异常，典型的客户端可以确定某一连接是无效的。

@return 如果此 <code>Connection</code> 对象是关闭的，则返回 <code>true</code>；如果它仍然处于打开状态，则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.DatabaseMetaData java.sql.Connection.getMetaData() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取一个 <code>DatabaseMetaData</code> 对象，该对象包含关于此 <code>Connection</code> 对象所连接的数据库的元数据。元数据包括关于数据库的表、受支持的 SQL 语法、存储过程、此连接功能等等的信息。

@return 此 <code>Connection</code> 对象的一个 <code>DatabaseMetaData</code> 对象
@exception SQLException 如果发生数据库访问错误，或者在关闭的连接上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Connection.setReadOnly(boolean readOnly) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此连接设置为只读模式，作为驱动程序启用数据库优化的提示。

<P><B>注：</B>此方法不能在事务处理期间调用。

@param readOnly 为 <code>true</code> 表示启用只读模式；为 <code>false</code> 表示禁用只读模式
@exception SQLException 如果发生数据库访问错误，在关闭的连接上调用此方法，或者在事务处理期间调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.Connection.isReadOnly() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
查询此 <code>Connection</code> 对象是否处于只读模式。

@return 如果此 <code>Connection</code> 对象是只读的，则返回 <code>true</code>；否则返回 <code>false</code>
@exception SQLException 如果发生数据库访问错误，或者在关闭的连接上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Connection.setCatalog(String catalog) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置给定目录名称，以便选择要在其中进行工作的此 <code>Connection</code> 对象数据库的子空间。
 <P>
如果驱动程序不支持这些目录，那么它将直接忽略此请求。

@param catalog 在其中进行工作的目录（此 <code>Connection</code> 对象的数据库的子空间）的名称
@exception SQLException 如果发生数据库访问错误，或者在关闭的连接上调用此方法
@see #getCatalog

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.sql.Connection.getCatalog() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>Connection</code> 对象的当前目录名称。

@return 当前目录名称；如果不存在，则返回 <code>null</code>
@exception SQLException 如果发生数据库访问错误，或者在关闭的连接上调用此方法
@see #setCatalog

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Connection.setTransactionIsolation(int level) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
试图将此 <code>Connection</code> 对象的事务隔离级别更改为给定的级别。可能的事务隔离级别是 <code>Connection</code> 接口中定义的常量。
 <P>
<B>注：</B>如果在事务处理期间调用此方法，则结果由实现定义。

@param level 以下 <code>Connection</code> 常量之一：<code>Connection.TRANSACTION_READ_UNCOMMITTED</code>、<code>Connection.TRANSACTION_READ_COMMITTED</code>、<code>Connection.TRANSACTION_REPEATABLE_READ</code> 或 <code>Connection.TRANSACTION_SERIALIZABLE</code>。（注意，不能使用 <code>Connection.TRANSACTION_NONE</code>，因为它指定了不受支持的事务。）
@exception SQLException 如果发生数据库访问错误，在关闭的连接上调用此方法，或者给定参数不是 <code>Connection</code> 常量之一
@see DatabaseMetaData#supportsTransactionIsolationLevel
@see #getTransactionIsolation

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.Connection.getTransactionIsolation() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>Connection</code> 对象的当前事务隔离级别。

@return 当前事务隔离级别，它将是以下常量之一：<code>Connection.TRANSACTION_READ_UNCOMMITTED</code>、<code>Connection.TRANSACTION_READ_COMMITTED</code>、<code>Connection.TRANSACTION_REPEATABLE_READ</code>、<code>Connection.TRANSACTION_SERIALIZABLE</code> 或 <code>Connection.TRANSACTION_NONE</code>。
@exception SQLException 如果发生数据库访问错误，或者在关闭的连接上调用此方法
@see #setTransactionIsolation

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLWarning java.sql.Connection.getWarnings() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>Connection</code> 对象上的调用报告的第一个警告。如果有多个警告，则后续警告将被链接到第一个警告，可以通过对之前获得的警告调用 <code>SQLWarning.getNextWarning</code> 方法获取。
 <P>
不可以在关闭的连接上调用此方法，这样做将导致抛出 <code>SQLException</code>。

<P><B>注：</B>后续警告将被链接到此 SQLWarning。

@return 第一个 <code>SQLWarning</code> 对象；如果不存在，则返回 <code>null</code>
@exception SQLException 如果发生数据库访问错误，或者在关闭的连接上调用此方法
@see SQLWarning

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Connection.clearWarnings() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
清除为此 <code>Connection</code> 对象报告的所有警告。调用此方法后，在为此 <code>Connection</code> 对象报告新的警告前，<code>getWarnings</code> 方法将返回 <code>null</code>。  

@exception SQLException 如果发生数据库访问错误，或者在关闭的连接上调用此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Statement java.sql.Connection.createStatement(int resultSetType, int resultSetConcurrency) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>Statement</code> 对象，该对象将生成具有给定类型和并发性的 <code>ResultSet</code> 对象。此方法与上述 <code>createStatement</code> 方法相同，但它允许重写默认结果集类型和并发性。已创建结果集的可保存性可调用 {@link #getHoldability} 确定。

@param resultSetType 结果集类型，它是 <code>ResultSet.TYPE_FORWARD_ONLY</code>、<code>ResultSet.TYPE_SCROLL_INSENSITIVE</code> 或 <code>ResultSet.TYPE_SCROLL_SENSITIVE</code> 之一
@param resultSetConcurrency 并发类型；它是 <code>ResultSet.CONCUR_READ_ONLY</code> 或 <code>ResultSet.CONCUR_UPDATABLE</code> 之一
@return 一个新的 <code>Statement</code> 对象，该对象将生成具有给定类型和并发性的 <code>ResultSet</code> 对象
@exception SQLException 如果发生数据库访问错误，在关闭的连接上调用此方法，或者给定参数不是指示类型和并发性的 <code>ResultSet</code> 常量
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法，或者对于指定的结果集类型和结果集并发性，此方法不受支持。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.PreparedStatement java.sql.Connection.prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->

创建一个 <code>PreparedStatement</code> 对象，该对象将生成具有给定类型和并发性的 <code>ResultSet</code> 对象。此方法与上述 <code>prepareStatement</code> 方法相同，但它允许重写默认结果集类型和并发性。已创建结果集的可保存性可调用 {@link #getHoldability} 确定。

@param sql 一个 <code>String</code> 对象，它是将被发送到数据库的 SQL 语句，可以包含一个或多个 '?' IN 参数
@param resultSetType 结果集类型，它是 <code>ResultSet.TYPE_FORWARD_ONLY</code>、<code>ResultSet.TYPE_SCROLL_INSENSITIVE</code> 或 <code>ResultSet.TYPE_SCROLL_SENSITIVE</code> 之一
@param resultSetConcurrency 并发类型，它是 <code>ResultSet.CONCUR_READ_ONLY</code> 或 <code>ResultSet.CONCUR_UPDATABLE</code> 之一
@return 包含预编译的 SQL 语句的新 PreparedStatement 对象，该对象将生成具有给定类型和并发性的 <code>ResultSet</code> 对象
@exception SQLException 如果发生数据库访问错误，在关闭的连接上调用此方法，或者给定参数不是指示类型和并发性的 <code>ResultSet</code> 常量
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法，或者对于指定的结果集类型和结果集并发性此方法不受支持。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.CallableStatement java.sql.Connection.prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>CallableStatement</code> 对象，该对象将生成具有给定类型和并发性的 <code>ResultSet</code> 对象。此方法与上述 <code>prepareCall</code> 方法相同，但它允许重写默认结果集类型和并发性。已创建结果集的可保存性可调用 {@link #getHoldability} 确定。

@param sql 一个 <code>String</code> 对象，它是将被发送给数据库的 SQL 语句，可以包含一个或多个 '?' 参数
@param resultSetType 结果集类型，它是 <code>ResultSet.TYPE_FORWARD_ONLY</code>、<code>ResultSet.TYPE_SCROLL_INSENSITIVE</code> 或 <code>ResultSet.TYPE_SCROLL_SENSITIVE</code> 之一
@param resultSetConcurrency 并发类型，它是 <code>ResultSet.CONCUR_READ_ONLY</code> 或 <code>ResultSet.CONCUR_UPDATABLE</code> 之一
@return 一个包含预编译的 SQL 语句的新 <code>CallableStatement</code> 对象，该对象将生成具有给定类型和并发性的 <code>ResultSet</code> 对象
@exception SQLException 如果发生数据库访问错误，在关闭的连接上调用此方法，或者给定参数不是指示类型和并发性的 <code>ResultSet</code> 常量
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法，或者或者对于指定的结果集类型和结果集并发性此方法不受支持。

@since 1.2


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map<java.lang.String, java.lang.Class<?>> java.sql.Connection.getTypeMap() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 <code>Connection</code> 对象关联的 <code>Map</code> 对象。除非应用程序已经添加了一个条目，否则返回的类型映射将为空。

@return 与此 <code>Connection</code> 对象关联的 <code>java.util.Map</code> 对象
@exception SQLException 如果发生数据库访问错误，或者在关闭的连接上调用此方法
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2
@see #setTypeMap

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Connection.setTypeMap(java.util.Map<java.lang.String, java.lang.Class<?>> map) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定的 <code>TypeMap</code> 对象安装为此 <code>Connection</code> 对象的类型映射。该映射将用于 SQL 结构类型和独特类型的自定义映射。

@param map 将作为此 <code>Connection</code> 对象默认类型映射的替代安装的 <code>java.util.Map</code> 对象
@exception SQLException 如果发生数据库访问错误，在关闭的连接上调用此方法，或者给定参数不是 <code>java.util.Map</code> 对象
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.2
@see #getTypeMap


<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Connection.setHoldability(int holdability) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
将使用此 <code>Connection</code> 对象创建的 <code>ResultSet</code> 对象的默认可保存性 (holdability) 更改为给定可保存性。<code>ResultSet</code> 对象的默认可保存性可调用 {@link DatabaseMetaData#getResultSetHoldability} 确定。

@param holdability <code>ResultSet</code> 的可保存性常量，它是 <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> 或 <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code> 之一
@throws SQLException 如果发生数据库访问错误，在关闭的连接上调用此方法，或者给定参数不是指示可保存性的 <code>ResultSet</code> 常量
@exception SQLFeatureNotSupportedException 如果给定可保存性不受支持
@see #getHoldability
@see DatabaseMetaData#getResultSetHoldability
@see ResultSet
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.Connection.getHoldability() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取使用此 <code>Connection</code> 对象创建的 <code>ResultSet</code> 对象的当前可保存性。

@return 可保存性，它是 <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> 或 <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code> 之一
@throws SQLException 如果发生数据库访问错误，或者在关闭的连接上调用此方法
@see #setHoldability
@see DatabaseMetaData#getResultSetHoldability
@see ResultSet
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Savepoint java.sql.Connection.setSavepoint() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
在当前事务中创建一个未命名的保存点 (savepoint)，并返回表示它的新 <code>Savepoint</code> 对象。
<p> 如果在活动事务范围之外调用 setSavepoint，则将在新创建的保存点上启动事务。

@return 新的 <code>Savepoint</code> 对象
@exception SQLException 如果发生数据库访问错误，在参与分布式事务的同时调用此方法，在关闭的连接上调用此方法，或者此 <code>Connection</code> 对象当前处于自动提交模式
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@see Savepoint
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Savepoint java.sql.Connection.setSavepoint(String name) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
在当前事务中创建一个具有给定名称的保存点，并返回表示它的新 <code>Savepoint</code> 对象。
<p> 如果在活动事务范围之外调用 setSavepoint，则将在新创建的保存点上启动事务。

@param name 包含保存点名称的 <code>String</code>
@return 新的 <code>Savepoint</code> 对象
@exception SQLException 如果发生数据库访问错误，在参与分布式事务的同时调用此方法，在关闭的连接上调用此方法，或者此 <code>Connection</code> 对象当前处于自动提交模式下
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@see Savepoint
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Connection.rollback(Savepoint savepoint) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
取消所有设置给定 <code>Savepoint</code> 对象之后进行的更改。 
 <P>
此方法只应该在已禁用自动提交时使用。

@param savepoint 要回滚到的 <code>Savepoint</code> 对象
@exception SQLException 如果发生数据库访问错误，在参与分布式事务的同时调用此方法，在关闭的连接上调用此方法，<code>Savepoint</code> 对象不再有效，或者此 <code>Connection</code> 对象当前处于自动提交模式
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@see Savepoint
@see #rollback
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Connection.releaseSavepoint(Savepoint savepoint) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
从当前事务中移除指定的 <code>Savepoint</code> 和后续 <code>Savepoint</code> 对象。在已移除保存点之后，对该保存点的任何引用都会导致抛出 <code>SQLException</code>。

@param savepoint 将移除的 <code>Savepoint</code> 对象
@exception SQLException 如果发生数据库访问错误，在关闭的连接上调用此方法，或者给定 <code>Savepoint</code> 对象在当前事务中不是一个有效的保存点
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Statement java.sql.Connection.createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>Statement</code> 对象，该对象将生成具有给定类型、并发性和可保存性的 <code>ResultSet</code> 对象。此方法与上述 <code>createStatement</code> 方法相同，但它允许重写默认结果集类型、并发性和可保存性。

@param resultSetType 以下 <code>ResultSet</code> 常量之一：<code>ResultSet.TYPE_FORWARD_ONLY</code>、<code>ResultSet.TYPE_SCROLL_INSENSITIVE</code> 或 <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@param resultSetConcurrency 以下 <code>ResultSet</code> 常量之一：<code>ResultSet.CONCUR_READ_ONLY</code> 或 <code>ResultSet.CONCUR_UPDATABLE</code>
@param resultSetHoldability 以下 <code>ResultSet</code> 常量之一：<code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> 或 <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
@return 一个新的 <code>Statement</code> 对象，该对象将生成具有给定类型、并发性和可保存性的 <code>ResultSet</code> 对象
@exception SQLException 如果发生数据库访问错误，在关闭的连接上调用此方法，或者给定参数不是指定类型、并发性和可保存性的 <code>ResultSet</code> 常量
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法，或者对于指定结果集类型、结果集可保存性和结果集并发性，此方法不受支持。
@see ResultSet
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.PreparedStatement java.sql.Connection.prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>PreparedStatement</code> 对象，该对象将生成具有给定类型、并发性和可保存性的 <code>ResultSet</code> 对象。
 <P>
此方法与上述 <code>prepareStatement</code> 方法相同，但它允许重写默认结果集类型、并发性和可保存性。

@param sql 一个 <code>String</code> 对象，它是将被发送到数据库的 SQL 语句，可以包含一个或多个 '?' IN 参数
@param resultSetType 以下 <code>ResultSet</code> 常量之一：<code>ResultSet.TYPE_FORWARD_ONLY</code>、<code>ResultSet.TYPE_SCROLL_INSENSITIVE</code> 或 <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@param resultSetConcurrency 以下 <code>ResultSet</code> 常量之一：<code>ResultSet.CONCUR_READ_ONLY</code> 或 <code>ResultSet.CONCUR_UPDATABLE</code>
@param resultSetHoldability 以下 <code>ResultSet</code> 常量之一：<code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> 或 <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
@return 一个包含预编译 SQL 语句的新 <code>PreparedStatement</code> 对象，该对象将生成具有给定类型、并发性和可保存性的 <code>ResultSet</code> 对象
@exception SQLException 如果发生数据库访问错误，在关闭的连接上调用此方法，或者给定参数不是指示类型、并发性和可保存性的 <code>ResultSet</code> 常量
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法，或者对于指定结果集类型、结果集可保存性和结果集并发性，此方法不受支持。
@see ResultSet
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.CallableStatement java.sql.Connection.prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>CallableStatement</code> 对象，该对象将生成具有给定类型和并发性的 <code>ResultSet</code> 对象。此方法与上述 <code>prepareCall</code> 方法相同，但它允许重写默认结果集类型、结果集并发性类型和可保存性。

@param sql 一个 <code>String</code> 对象，它是将被发送到数据库的 SQL 语句，可以包含一个或多个 '?' 参数
@param resultSetType 以下 <code>ResultSet</code> 常量之一：<code>ResultSet.TYPE_FORWARD_ONLY</code>、<code>ResultSet.TYPE_SCROLL_INSENSITIVE</code> 或 <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@param resultSetConcurrency 以下 <code>ResultSet</code> 常量之一：<code>ResultSet.CONCUR_READ_ONLY</code> 或 <code>ResultSet.CONCUR_UPDATABLE</code>
@param resultSetHoldability 以下 <code>ResultSet</code> 常量之一：<code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> 或 <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
@return 一个包含预编译 SQL 语句的新 <code>CallableStatement</code> 对象，该对象将生成具有给定类型、并发性和可保存性的 <code>ResultSet</code> 对象
@exception SQLException 如果发生数据库访问错误，在关闭的连接上调用此方法，或者给定参数不是指示类型、并发性和可保存性的 <code>ResultSet</code> 常量
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法，或者对于指定结果集类型、结果集可保存性和结果集并发性，此方法不受支持。
@see ResultSet
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.PreparedStatement java.sql.Connection.prepareStatement(String sql, int autoGeneratedKeys) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个默认 <code>PreparedStatement</code> 对象，该对象能获取自动生成的键。给定常量告知驱动程序是否可以获取自动生成的键。如果 SQL 语句不是一条 <code>INSERT</code> 语句，或者 SQL 语句能够返回自动生成的键（这类语句的列表是特定于供应商的），则忽略此参数。
 <P>
<B>注：</B>为了处理受益于预编译的带参数 SQL 语句，此方法进行了优化。如果驱动程序支持预编译，则 <code>prepareStatement</code> 方法将该语句发送给数据库进行预编译。一些驱动程序可能不支持预编译。在这种情况下，执行 <code>PreparedStatement</code> 对象之前无法将语句发送给数据库。这对用户没有直接影响；但它的确会影响哪些方法将抛出某些 SQLException。
 <P>
使用返回的 <code>PreparedStatement</code> 对象创建的结果集在默认情况下类型为 <code>TYPE_FORWARD_ONLY</code>，并带有 <code>CONCUR_READ_ONLY</code> 并发级别。已创建结果集的可保存性可调用 {@link #getHoldability} 确定。

@param sql 可能包含一个或多个 '?' IN 参数占位符的 SQL 语句
@param autoGeneratedKeys 指示是否应该返回自动生成的键的标志，它是 <code>Statement.RETURN_GENERATED_KEYS</code> 或 <code>Statement.NO_GENERATED_KEYS</code> 之一
@return 一个包含预编译 SQL 语句的新 <code>PreparedStatement</code> 对象，该对象能够返回自动生成的键
@exception SQLException 如果发生数据库访问错误，在关闭的连接上调用此方法，或者给定参数不是指示是否应该返回自动生成键的 <code>Statement</code> 常量
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持带有 Statement.RETURN_GENERATED_KEYS 常量的此方法
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.PreparedStatement java.sql.Connection.prepareStatement(String sql, int[] columnIndexes) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个能返回由给定数组指定的自动生成键的默认 <code>PreparedStatement</code> 对象。此数组包含目标表中列的索引，而目标表包含应该可返回的自动生成的键。如果 SQL 语句不是 <code>INSERT</code> 语句，或者 SQL 语言能够返回自动生成的键（这类语句的列表是特定于供应商的），则驱动程序将忽略该数组。
 <P>
带 IN 参数或不带 IN 参数的 SQL 语句都可以被预编辑并存储在 <code>PreparedStatement</code> 对象中。然后可以使用此对象多次有效地执行该语句。
 <P>
<B>注：</B>为了处理受益于预编译的带参数 SQL 语句，此方法进行了优化。如果驱动程序支持预编译，则 <code>prepareStatement</code> 方法将该语句发送给数据库进行预编译。一些驱动程序可能不支持预编译。在这种情况下，执行 <code>PreparedStatement</code> 对象之前无法将语句发送给数据库。这对用户没有直接影响；但它的确会影响哪些方法将抛出某些 SQLException。
 <P>
使用返回的 <code>PreparedStatement</code> 对象创建的结果集在默认情况下类型为 <code>TYPE_FORWARD_ONLY</code>，并带有 <code>CONCUR_READ_ONLY</code> 并发级别。已创建结果集的可保存性可调用 {@link #getHoldability} 确定。

@param sql 可能包含一个或多个 '?' IN 参数占位符的 SQL 语句
@param columnIndexes 列索引数组，这些索引指示应该从一个或多个插入行中返回的那些列
@return 一个包含预编译语句的新 <code>PreparedStatement</code> 对象，该对象能够返回由给定列索引数组指定的自动生成键
@exception SQLException 如果发生数据库访问错误，或者在关闭的连接上调用此方法
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.PreparedStatement java.sql.Connection.prepareStatement(String sql, java.lang.String[] columnNames) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个能返回由给定数组指定的自动生成键的默认 <code>PreparedStatement</code> 对象。此数组包含目标表中列的名称，而目标表包含应该返回的自动生成键。如果 SQL 语句不是 <code>INSERT</code> 语句，或者 SQL 语言能够返回自动生成的键（这类语句的列表是特定于供应商的），则驱动程序将忽略该数组。
 <P>
带 IN 参数或不带 IN 参数的 SQL 语句都可以被预编辑并存储在 <code>PreparedStatement</code> 对象中。然后可以使用此对象多次有效地执行该语句。
 <P>
<B>注：</B>为了处理受益于预编译的带参数 SQL 语句，此方法进行了优化。如果驱动程序支持预编译，则 <code>prepareStatement</code> 方法将该语句发送给数据库进行预编译。一些驱动程序可能不支持预编译。在这种情况下，执行 <code>PreparedStatement</code> 对象之前无法将语句发送给数据库。这对用户没有直接影响；但它的确会影响哪些方法将抛出某些 SQLException。
 <P>
使用返回的 <code>PreparedStatement</code> 对象创建的结果集在默认情况下类型为 <code>TYPE_FORWARD_ONLY</code>，并带有 <code>CONCUR_READ_ONLY</code> 并发级别。已创建结果集的可保存性可调用 {@link #getHoldability} 确定。

@param sql 可能包含一个或多个 '?' IN 参数占位符的 SQL 语句
@param columnNames 列名称数组，这些名称指示应该从一个或多个插入行中返回的那些列
@return 一个包含预编译语句的新 <code>PreparedStatement</code> 对象，该对象能够返回由给定列名称数组指定的自动生成键
@exception SQLException 如果发生数据库访问错误，或者在关闭的连接上调用此方法
@exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此方法

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Clob java.sql.Connection.createClob() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造实现 <code>Clob</code> 接口的对象。返回的对象最初不包含任何数据。<code>Clob</code> 接口的 <code>setAsciiStream</code>、<code>setCharacterStream</code> 和 <code>setString</code> 方法可用来向 <code>Clob</code> 添加数据。
 @return 实现 <code>Clob</code> 接口的对象
 @throws SQLException 如果无法构造实现 <code>Clob</code> 接口的对象，在关闭的连接上调用此方法，或者发生数据库访问错误。
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此数据类型

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Blob java.sql.Connection.createBlob() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造实现 <code>Blob</code> 接口的对象。返回的对象最初不包含任何数据。<code>Blob</code> 接口的 <code>setBinaryStream</code> 和 <code>setBytes</code> 方法可用来向 <code>Blob</code> 添加数据。
 @return  实现 <code>Blob</code> 接口的对象
 @throws SQLException 如果无法构造实现 <code>Blob</code> 接口的对象，在关闭的连接上调用此方法，或者发生数据库访问错误。
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此数据类型

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.NClob java.sql.Connection.createNClob() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造实现 <code>NClob</code> 接口的对象。返回的对象最初不包含任何数据。<code>NClob</code> 接口的 <code>setAsciiStream</code>、<code>setCharacterStream</code> 和 <code>setString</code> 方法可用来向 <code>NClob</code> 添加数据。
 @return 实现 <code>NClob</code> 接口的对象
 @throws SQLException 如果无法构造实现 <code>NClob</code> 接口的对象，在关闭的连接上调用此方法，或者发生数据库访问错误。
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此数据类型

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLXML java.sql.Connection.createSQLXML() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造实现 <code>SQLXML</code> 接口的对象。返回的对象最初不包含任何数据。<code>SQLXML</code> 接口的 <code>createXmlStreamWriter</code> 和 <code>setString</code> 方法可用来向 <code>SQLXML</code> 对象添加数据。
 @return 实现 <code>SQLXML</code> 接口的对象
 @throws SQLException 如果无法构造实现 <code>SQLXML</code> 接口的对象，在关闭的连接上调用此方法，或者发生数据库访问错误。
 @exception SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此数据类型
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.Connection.isValid(int timeout) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 如果连接尚未关闭并且仍然有效，则返回 true。驱动程序将提交一个关于该连接的查询，或者使用其他某种能确切验证在调用此方法时连接是否仍然有效的机制。
 <p>
 由驱动程序提交的用来验证该连接的查询将在当前事务的上下文中执行。
 
 @param timeout 等待用来验证连接是否完成的数据库操作的时间，以秒为单位。如果在操作完成之前超时期满，则此方法返回 false。0 值表示不对数据库操作应用超时值。
 <p>
 @return 如果连接有效，则返回 true，否则返回 false
 @exception SQLException 如果为 <code>timeout</code> 提供的值小于 0
 @since 1.6
 <p>
 @see java.sql.DatabaseMetaData#getClientInfoProperties

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Connection.setClientInfo(String name, String value) throws java.sql.SQLClientInfoException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将 name 指定的客户端信息属性的值设置为 value 指定的值。  
 <p>
 应用程序可以使用 <code>DatabaseMetaData.getClientInfoProperties</code> 方法确定驱动程序支持的客户端信息属性，以及为每个属性指定的最大长度。
 <p>
 驱动程序存储数据库中合适位置上指定的值。例如，在特殊注册表 (special register)、会话参数 (session parameter) 或者系统表 (system table) 列中。为了提高效率，驱动程序可以将设置数据库中的值推迟到下一次执行语句或者准备执行语句时。除了在数据库中的适当位置存储客户端信息之外，这些方法不能以任何方式改变连接的行为。为这些方法提供的值只能用于计数、诊断和调试目的。
 <p>
 如果指定的客户端属性名称不被驱动程序所识别，那么该驱动程序将生成一个警告。
 <p>
 如果为此方法指定的值大于该属性的最大长度，则驱动程序可能截取该值并生成一个警告，或者生成一个 <code>SQLClientInfoException</code>。如果驱动程序生成一个 <code>SQLClientInfoException</code>，则指定的值不是在连接上设置的。
 <p>
 以下是标准的客户端信息属性。不过，如果驱动程序支持可由某个标准属性描述的客户端信息属性，则驱动程序无需支持这些属性，应该使用标准属性名称。
 <p>
 <ul>
 <li>ApplicationName	-	当前正在使用连接的应用程序的名称</li>
 <li>ClientUser		-	用户名，正在使用连接的应用程序将为该用户执行工作。这与建立连接所使用的用户名可能不同。</li>
 <li>ClientHostname	-	计算机的主机名，正使用连接的应用程序将在该计算机上运行。</li>
 </ul>
 <p>
 @param name		要设置的客户端信息属性名称 
 @param value		要设置为客户端信息属性的值。如果该值为 null，则清除指定属性的当前值。
 <p>
 @throws SQLClientInfoException 如果在数据库服务器上设置客户端信息值时数据库服务器返回一个错误，或者在关闭的连接上调用此方法
 <p>
 @since 1.6	

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Connection.setClientInfo(Properties properties) throws java.sql.SQLClientInfoException
<!-- END KEY -->
<!-- BEGIN DATA -->
 设置连接的客户端信息属性的值。<code>Properties</code> 对象包含将要设置的客户端属性的名称和值。包含在属性列表中的客户端信息属性集将替换连接上的当前客户端信息属性集。如果当前在连接上设置的某个属性不在属性列表中，则清除该属性。指定一个空属性列表将清除连接上的所有属性。有关更多信息，请参阅 <code>setClientInfo (String, String)</code>。
 <p>  
 如果在设置任何客户端信息属性时发生错误，则抛出 <code>SQLClientInfoException</code>。<code>SQLClientInfoException</code> 包含指示未设置的客户端信息属性的信息。客户端信息的状态是未知的，因为某些数据库不允许自动设置多个客户端信息属性。对于这些数据库，在错误发生之前已经设置了一个或多个属性。
 <p>
 
 @param properties		要设置的客户端信息属性列表
 <p>
 @see java.sql.Connection#setClientInfo(String, String) setClientInfo(String, String)
 @since 1.6
 <p>
 @throws SQLClientInfoException 如果在数据库服务器上设置 clientInfo 值时数据库服务器返回一个错误，或者在关闭的连接上调用此方法
 <p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.sql.Connection.getClientInfo(String name) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回通过名称指定的客户端信息属性的值。如果指定的客户端信息属性尚未设置并且没有默认值，那么此方法返回 null。如果指定客户端信息属性名称不受驱动程序支持，那么此方法也将返回 null。
 <p>
 应用程序可以使用 <code>DatabaseMetaData.getClientInfoProperties</code> 方法确定受驱动程序支持的客户端信息属性。
 <p>
 @param name		要获取的客户端信息属性的名称
 <p>
 @return 			指定的客户端信息属性的值
 <p>
 @throws SQLException		如果在从数据库中获取客户端信息值时数据库服务器返回一个错误，或者在关闭的连接上调用此方法
 <p>
 @since 1.6
 <p>
 @see java.sql.DatabaseMetaData#getClientInfoProperties

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Properties java.sql.Connection.getClientInfo() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回一个列表，它包含驱动程序支持的每个客户端信息属性的名称和当前值。如果客户端信息属性尚未设置并且没有默认值，那么客户端信息属性的值为 null。
 <p>
 @return	一个 <code>Properties</code> 对象，它包含驱动程序支持的每个客户端信息属性的名称和当前值。
 <p>
 @throws 	SQLException 如果在从数据库中获取客户端信息值时数据库服务器返回一个错误，或者在关闭的连接上调用此方法
 <p>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Array java.sql.Connection.createArrayOf(String typeName, java.lang.Object[] elements) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 创建 Array 对象的工厂方法。
<p>
 <b>注：</b>当使用 <code>createArrayOf</code> 创建映射到基本数据类型的数组对象时，则 <code>Array</code> 对象是基本数据类型数组还是 <code>Object</code> 数组将由实现来定义。
 <p>
 <b>注：</b>JDBC 驱动程序负责将元素 <code>Object</code> 数组映射到 java.sql.Types 中为 <code>Object</code> 的给定类定义的默认 JDBC SQL 类型。默认映射关系是在 JDBC 规范的附录 B 中指定的。如果得到的 JDBC 类型对于给定 typeName 而言不是合适的类型，则抛出 <code>SQLException</code> 还是驱动程序支持得到的转换将由实现来定义。

 @param typeName 数组元素将映射到的类型的 SQL 名称。typeName 是特定于数据库的名称，它可能是内置类、用户定义类型或此数据库支持的标准 SQL 类型的名称。该参数是 <code>Array.getBaseTypeName</code> 返回的值
 @param elements 填充所返回对象的元素
 @return 其元素映射到指定 SQL 类型的 Array 对象
 @throws SQLException 如果发生数据库错误，JDBC 类型对于 typeName 不是合适类型并且该转换不受支持，typeName 为 null，或者在关闭的连接上调用此方法
 @throws SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此数据类型
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Struct java.sql.Connection.createStruct(String typeName, java.lang.Object[] attributes) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 创建 Struct 对象的工厂方法。

 @param typeName 此 <code>Struct</code> 对象将映射到的 SQL 构造类型的 SQL 类型名称。typeName 是为此数据库定义的用户定义类型的名称。该参数是 <code>Struct.getSQLTypeName</code> 返回的值。

 @param attributes 填充所返回对象的属性
 @return 映射到给定 SQL 类型的 Struct 对象，该对象将使用给定属性填充
 @throws SQLException 如果发生数据库错误，typeName 为 null，或者在关闭的连接上调用此方法
 @throws SQLFeatureNotSupportedException 如果 JDBC 驱动程序不支持此数据类型
 @since 1.6

<!-- END DATA -->
