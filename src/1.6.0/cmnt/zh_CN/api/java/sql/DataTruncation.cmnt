<!-- BEGIN KEY -->
public class java.sql.DataTruncation extends java.sql.SQLWarning
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>DataTruncation</code> 异常形式抛出的异常（写入时），或者由于除数据值超出 <code>MaxFieldSize</code> 之外的某种原因意外地截断该数据值时以 <code>DataTruncation</code> 警告形式报告的异常（读取时）。

<P>读取期间 <code>DataTruncation</code> 的 SQLstate 为 <code>01004</code>。
<P>写入期间 <code>DataTruncation</code> 的 SQLstate 为 <code>22001</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.sql.DataTruncation.index
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean java.sql.DataTruncation.parameter
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean java.sql.DataTruncation.read
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.sql.DataTruncation.dataSize
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.sql.DataTruncation.transferSize
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.DataTruncation(int index, boolean parameter, boolean read, int dataSize, int transferSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>DataTruncation</code> 对象，当 <code>read</code> 被设置为 <code>true</code> 时，该对象的 SQLState 初始化为 01004，当 <code>read</code> 被设置为 <code>false</code> 时，则初始化为 22001，reason 被设置为 "Data truncation"，供应商代码被设置为 0，其他字段被设置为给定值。<code>cause</code> 尚未进行初始化，随后可通过调用 {@link Throwable#initCause(java.lang.Throwable)} 方法初始化。
<p>

@param index 参数或列值的索引
@param parameter 如果参数值被截断，则该参数为 true
@param read 如果某一 read 字段被截断，则该参数为 true
@param dataSize 数据的原始大小
@param transferSize 截断后的大小


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.DataTruncation(int index, boolean parameter, boolean read, int dataSize, int transferSize, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>DataTruncation</code> 对象，当 <code>read</code> 被设置为 <code>true</code> 时，该对象的 SQLState 初始化为 01004，当 <code>read</code> 被设置为 <code>false</code> 时，则初始化为 22001，reason 被设置为 "Data truncation"，供应商代码被设置为 0，其他字段被设置为给定值。
 <p>

 @param index 参数或列值的索引
 @param parameter 如果参数值被截断，则该参数为 true
 @param read 如果某一 read 字段被截断，则该参数为 true
 @param dataSize 数据的原始大小
 @param transferSize 截断后的大小
 @param cause 此 <code>DataTruncation</code> 的底层原因（保存此原因，以便以后通过 <code>getCause()</code> 方法获取）；可以为 null，表示该原因不存在或未知。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.DataTruncation.getIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取被截断的列或参数的索引。

<P>如果列或参数索引是未知的，返回值可能为 -1，在这种情况下，应该忽略 <code>parameter</code> 和 <code>read</code> 字段。

@return 截断的参数或列值的索引

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.DataTruncation.getParameter()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示被截断的值是一个参数值还是一个列值。

@return 如果被截断的值是一个参数，则返回 <code>true</code>；如果被截断的值是一个列值，则返回 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.sql.DataTruncation.getRead()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示该值是否在读取时被截断。

@return 如果该值在从数据库中读取时被截断，则返回 <code>true</code>；如果该值在写入时被截断，则返回 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.DataTruncation.getDataSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得应该传输的数据字节数。如果执行了数据转换，则该数可能是一个近似数。如果大小是未知的，则该值可能为 <code>-1</code>。

@return 应该传输的数据字节数

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.DataTruncation.getTransferSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得实际传输的数据字节数。如果大小是未知的，则该值可能为 <code>-1</code>。

@return 实际传输的数据字节数

<!-- END DATA -->
