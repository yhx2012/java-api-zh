<!-- BEGIN KEY -->
public interface class java.sql.Update implements java.lang.annotation.Annotation
<!-- END KEY -->
<!-- BEGIN DATA -->
 Annotation used to decorate a method in a Query interface with a SQL statement
 that can return an update count or can return auto generated keys.  The 
 <code>Update</code> annotation must not be used in-conjunction with a SQL statement
 that returns a <code>ResultSet</code>.
 <p> 

A Query interface may contain zero, one or more methods decorated with an <code>Update</code>
annotation.
 <p>
  The following provides an example of using the <code>Update</code> annotation.
<p>
 <pre>
 // Define DataSet type
 public class Mammal {
     public String name;
     public String description;
     public int age;
     public int weight;
 }
 // Define the interface containing the methods representing SQL statements
 // that can be invoked.
 
 interface MyQueries extends BaseQuery {    
    <code>@Select</code>("select name, description, age from mammal")
    DataSet&lt;Mammal&gt; getAllMammals();
 
    <code>@</code>Update("delete  from mammal")
    int deleteAllMammals();
 }
 </pre>

 To invoke the <code>deleteAllMammals()</code> method, an instance of
 the <code>MyQueries</code> interface must be created by invoking either the
 <code>Connnection.createQueryObject</code> or <code>DataSource.createQueryObject</code>
 method.
 
 <pre>
 MyQueries mq = con.createQueryObject(MyQueries.class);
 int success = mq.deleteAllMammals();
 </pre>
 <p>
 
<h4>Using a Parameterized sql annotation element</h4>

 The <code>sql</code> annotation element allows developers to specify parameter markers
 similar to <code>PreparedStatements</code>.  Parameter markers are defined as:
 <ul>
 <li>A String  value designated by a question mark(?) prefix follwed by an
 integer.
 <li>The numbering for parameter markers starts at 1.  For example ?1.
 <li>The number of distinct parameter marks must not exceed the number of
 method parameters for the method that was decorated by the <code>Update</code> 
 annotation.  If this occurs, a <code>SQLRuntimeException</code> will be thrown.
 <li>A parameter marker may be specfied more than once in a <code>sql</code> 
 annotation element.
 </ul>
<p>
 <pre>
 interface MyQueries extends BaseQuery {    
 
    <code>@</code>Update(sql="update mammal set description= ?1 where age <10")
    int setDescription(String desc);
 }
 </pre>

 <p>
 
 <pre>
 MyQueries mq = con.createQueryObject(MyQueries.class);
 int success = mq.setDescription("a young mammal");
 </pre>
 
 <p>
 When the <code>setDescription()</code> method is invoked, the value specified
  for the parameter <i>desc</i> will be used as the value for the parameter 
  marker.
 <p>
 
 <h4>Returning Auto-Generated keys</h4>
 
 The <code>AutoGeneratedKeys</code> annotation is used
 to indicate that a <code>Dataset</code> <i>data class</i> will be used to store
 any auto generated keys that occur as the result of executing a method decorated
 with an <code>Update</code> annotation.  The <i>data class</i> may contain one or more fields
 that comprise the auto generated key.  The <code>Update</code> annotation element
 <code>keys</code> would be set to a value of 
 <code>GeneratedKeys.RETURNED_KEYS_DRIVER_DEFINED</code> to indicate that the
 JDBC driver will determine the columns to return to represent the auto-generated keys.
 A value of <code>GeneratedKeys.RETURNED_KEYS_COLUMNS_SPECIFIED</code> for the 
 <code>keys</code> annotation element indicates that  the columns contained in
 the <i>data class</i> decorated by the <code>AutoGeneratedKeys</code> annotation
 are returned as the auto generated keys from the method invocation.
<p>
  
 <pre>
 public class TabKeys {
     public String col1;

 }
 public interface MyQueries extends BaseQuery{
   <code>@</code>Update(sql="insert into tabName(?1, ?2)",
    keys=GeneratedKeys.RETURNED_KEYS_DRIVER_DEFINED) 
   DatSet&lt;TabKeys&gt; addPerson(String name, int age);
 }
 </pre>
 
 In the above example, the <code>MyQueries.addPerson</code> method  indicates that
 it can return auto generated keys upon its execution.  The returned auto generated
 keys may be accessed as follows:
<p>
 <pre>
 MyQueries mq = con.createQueryObject(MyQueries.class);
 DataSet&lt;TabKeys&gt; keys = mq.addPerson("Jane Doe", 29);
 for (TabKeys key : keys) {
      System.out.println("Key=" + key.col1 );
 }
 </pre>
 </ul>
 
 <h4>Returning an Update Count</h4>
 A method decorated by an <code>Update</code> annotation can return the number of
 rows affected by the method invocation by specifying a return type of <code>int</code>.
 If a return type of <code>void</code> is specified, an update count will not be
 returned.
 <p>
 
 <pre>
 interface MyQueries extends BaseQuery {
     <code>@</code>Update(sql="update mammal set weight = 5 where weight > ?1}")
     int shrinkBigMammals(int weight);
 }
 </pre>
 <p>
 A returned value of <code>0</code> indicates that no rows were updated. A returned
 value greater than <code>0</code> indicates that <code>1</code> or more rows were affected
 by the method invocation.
 <p>
 
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.sql.Update.sql()
<!-- END KEY -->
<!-- BEGIN DATA -->
 The SQL command to execute.  The SQL command that is specified can return
 an update count.  The SQL command must not return a result set.

 <p><B>Note</B>: If the <code>sql</code> and the <code>value</code> annotation
 element are specified at the same time, a <code>SQLRuntimeException</code> will
 be thrown. 
 @return a <code>String</code> representation of the SQL command.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.GeneratedKeys java.sql.Update.keys()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines whether auto-generated keys are returned or not
 
 @return <code>GeneratedKeys.NO_KEYS_RETURNED</code> if auto-generated 
 keys have not been requested;  <code>GeneratedKey.RETURNED_KEYS_DRIVER_DEFINED</code> 
 or <code>GeneratedKey.RETURNED_KEYS_COLUMNS_SPECIFIED</code> otherwise.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.sql.Update.value()
<!-- END KEY -->
<!-- BEGIN DATA -->
 The SQL command to execute.  The SQL command that is specified can return
 an update count.  The SQL command must not return a result set.

 <p><B>Note</B>: If the <code>sql</code> and the <code>value</code> annotation
 element are specified at the same time, a <code>SQLRuntimeException</code> will
 be thrown. 
 @return a <code>String</code> representation of the SQL command.
 @since 1.6

<!-- END DATA -->
