<!-- BEGIN KEY -->
public class java.sql.DriverManager extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<P>管理一组 JDBC 驱动程序的基本服务。<br><B>注：</B>{@link <code>DataSource</code>} 接口是 JDBC 2.0 API 中的新增内容，它提供了连接到数据源的另一种方法。使用 <code>DataSource</code> 对象是连接到数据源的首选方法。 

<P>作为初始化的一部分，<code>DriverManager</code> 类会尝试加载在 &quot;jdbc.drivers&quot; 系统属性中引用的驱动程序类。这允许用户定制由他们的应用程序使用的 JDBC Driver。例如，在 ~/.hotjava/properties 文件中，用户可以指定：
 <pre>
 <CODE>jdbc.drivers=foo.bah.Driver:wombat.sql.Driver:bad.taste.ourDriver</CODE>
 </pre>
<P> <code>DriverManager</code> 类的方法 <code>getConnection</code> 和 <code>getDrivers</code> 已经得到提高以支持 Java Standard Edition
 <a href="../../../technotes/guides/jar/jar.html#Service%20Provider">Service Provider</a> 机制。 JDBC 4.0 Drivers 必须包括 <code>META-INF/services/java.sql.Driver</code> 文件。此文件包含 <code>java.sql.Driver</code> 的 JDBC 驱动程序实现的名称。例如，要加载 <code>my.sql.Driver</code> 类，<code>META-INF/services/java.sql.Driver</code> 文件需要包含下面的条目：
 <pre>
 <code>my.sql.Driver</code>
 </pre>

 <P>应用程序不再需要使用 <code>Class.forName()</code> 显式地加载 JDBC 驱动程序。当前使用 <code>Class.forName()</code> 加载 JDBC 驱动程序的现有程序将在不作修改的情况下继续工作。

<P>在调用 <code>getConnection</code> 方法时，<code>DriverManager</code> 会试着从初始化时加载的那些驱动程序以及使用与当前 applet 或应用程序相同的类加载器显式加载的那些驱动程序中查找合适的驱动程序。
 
<P>
从 Java 2 SDK 标准版本 1.3 版开始，只有当已授予适当权限时设置日志流。通常这将使用工具 PolicyTool 完成，该工具可用于授予 <code>permission java.sql.SQLPermission &quot;setLog&quot;</code> 权限。
@see Driver
@see Connection 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.io.PrintWriter java.sql.DriverManager.getLogWriter()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取日志 writer。应该使用 <code>getLogWriter</code> 和 <code>setLogWriter</code> 方法，而不是使用 <code>get/setlogStream</code> 方法，后者已不建议使用。
@return <code>java.io.PrintWriter</code> 对象
@see #setLogWriter
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.sql.DriverManager.setLogWriter(PrintWriter out)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置由 <code>DriverManager</code> 和所有驱动程序使用的日志/追踪 <code>PrintWriter</code> 对象。
 <P>
存在一个因为引入 <code>setLogWriter</code> 方法而导致的次版本问题。<code>setLogWriter</code> 方法无法创建将由 <code>getLogStream</code> 返回的 <code>PrintStream</code> 对象，Java 版本不提供后向转换。结果，使用 <code>setLogWriter</code> 的新应用程序以及仍然使用利用 <code>getLogStream</code> 的 JDBC 1.0 驱动程序的新程序很可能将无法查看由该驱动程序写入的调试信息。
<P>
从 Java 2 SDK 标准版 1.3 版开始，此方法将查看设置日志流之前是否有 <code>SQLPermission</code> 对象。如果存在 <code>SecurityManager</code> 并且其 <code>checkPermission</code> 方法拒绝设置日志 writer，则此方法将抛出 <code>java.lang.SecurityException</code>。

@param out 新的日志/追踪 <code>PrintStream</code> 对象；<code>null</code> 表示禁止日志和追踪
@throws SecurityException 如果安全管理器存在并且其 <code>checkPermission</code> 方法拒绝设置日志 writer

@see SecurityManager#checkPermission
@see #getLogWriter
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.sql.Connection java.sql.DriverManager.getConnection(String url, Properties info) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
试图建立到给定数据库 URL 的连接。<code>DriverManager</code> 试图从已注册的 JDBC 驱动程序集中选择一个适当的驱动程序。

@param url <code> jdbc:<em>subprotocol</em>:<em>subname</em></code> 形式的数据库 url
@param info 作为连接参数的任意字符串标记/值对的列表；通常至少应该包括 &quot;user&quot; 和 &quot;password&quot; 属性
@return a 到 URL 的连接
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.sql.Connection java.sql.DriverManager.getConnection(String url, String user, String password) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
试图建立到给定数据库 URL 的连接。<code>DriverManager</code> 试图从已注册的 JDBC 驱动程序集中选择一个适当的驱动程序。

@param url <code>jdbc:<em>subprotocol</em>:<em>subname</em></code> 形式的数据库 url
@param user 数据库用户，连接是为该用户建立的
@param password 用户的密码
@return 到 URL 的连接
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.sql.Connection java.sql.DriverManager.getConnection(String url) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
试图建立到给定数据库 URL 的连接。<code>DriverManager</code> 试图从已注册的 JDBC 驱动程序集中选择一个适当的驱动程序。

@param url <code> jdbc:<em>subprotocol</em>:<em>subname</em></code> 形式的数据库 url
@return 到 URL 的连接
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.sql.Driver java.sql.DriverManager.getDriver(String url) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
试图查找能理解给定 URL 的驱动程序。<code>DriverManager</code> 试图从已注册的 JDBC 驱动程序集中选择一个适当的驱动程序。 

@param url <code> jdbc:<em>subprotocol</em>:<em>subname</em></code> 形式的数据库 URL
@return 表示可以连接到给定 URL 的驱动程序的 <code>Driver</code> 对象
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized void java.sql.DriverManager.registerDriver(Driver driver) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
向 <code>DriverManager</code> 注册给定驱动程序。新加载的驱动程序类应该调用 <code>registerDriver</code> 方法让 <code>DriverManager</code> 知道自己。

@param driver 将向 <code>DriverManager</code> 注册的新的 JDBC Driver
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized void java.sql.DriverManager.deregisterDriver(Driver driver) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
从 <code>DriverManager</code> 的列表中删除一个驱动程序。applet 只能注销取自其自身的类加载器的驱动程序。

@param driver 要删除的 JDBC Driver
@exception SQLException 如果发生数据库访问错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Enumeration<java.sql.Driver> java.sql.DriverManager.getDrivers()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取带有当前调用者可以访问的所有当前已加载 JDBC 驱动程序的 Enumeration。

<P><B>注：</B>驱动程序的类名称可以使用 <CODE>d.getClass().getName()</CODE> 得到

@return 由调用者的类加载器加载的 JDBC Driver 组成的列表

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.sql.DriverManager.setLoginTimeout(int seconds)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置驱动程序试图连接到某一数据库时将等待的最长时间，以秒为单位。

@param seconds 登录时间限制，以秒为单位；0 表示没有限制
@see #getLoginTimeout

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.sql.DriverManager.getLoginTimeout()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取驱动程序试图登录到某一数据库时可以等待的最长时间，以秒为单位。

@return 驱动程序登录时间限制，以秒为单位
@see #setLoginTimeout

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.sql.DriverManager.setLogStream(PrintStream out)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置由 <code>DriverManager</code> 和所有驱动程序使用的日志/追踪 PrintStream。
<P>
在 Java 2 SDK 标准版 1.3 版中，此方法将查看设置日志流之前是否有 <code>SQLPermission</code> 对象。如果存在 <code>SecurityManager</code> 并且其 <code>checkPermission</code> 方法拒绝设置日志 writer，则此方法将抛出 <code>java.lang.SecurityException</code>。

@param out 新的日志/追踪 PrintStream；要禁止日志和追踪，可将该参数设置为 <code>null</code>
@deprecated
@throws SecurityException 如果安全管理器存在并且其 <code>checkPermission</code> 方法拒绝设置日志流

@see SecurityManager#checkPermission
@see #getLogStream

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.io.PrintStream java.sql.DriverManager.getLogStream()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取由 <code>DriverManager</code> 和所有驱动程序使用的日志/追踪 PrintStream。

@return 日志/追踪 PrintStream；如果禁止日志和追踪，则返回 <code>null</code>
@deprecated
@see #setLogStream

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.sql.DriverManager.println(String message)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一条消息打印到当前 JDBC 日志流中。

@param message 一条日志或追踪消息

<!-- END DATA -->
