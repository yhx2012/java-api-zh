<!-- BEGIN KEY -->
public class java.text.Annotation extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
如果文本属性具有 annotation 特征，则 Annotation 对象用作文本属性值的包装器。这些特征是：
 <ul>
<li>属性所应用的文本范围对范围语义至关重要。这意味着，属性不能应用于其所应用的文本范围的子范围，并且，如果两个相邻的文本范围针对此属性具有相同的值，此属性也不能将此值应用于整体的复合范围。
<li>当底层文本改变时，属性或其值通常不再适用。
 </ul>

一个例子是与句子相关联的语法信息：在上面的句子中，您可以说&ldquo;一个例子&rdquo;是主语，但您不能说&ldquo;一个&rdquo;、&ldquo;例子&rdquo;或者&ldquo;一个例&rdquo;也是。当文本改变时，语法信息通常变成无效的了。另一个例子是日语阅读信息 (yomi)。

 <p>
将属性值包装在一个 Annotation 对象中保证了既使属性值相等，相邻的文本不会合并，并且指示文本容器如果属性值下面的文本修改了，则应该丢弃属性。

@see AttributedCharacterIterator
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.Annotation(Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一条具有给定值（可能为 null）的 annotation 记录。
@param value 属性值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.text.Annotation.getValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回属性值，可能为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.text.Annotation.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 Annotation 的 String 表示形式。

<!-- END DATA -->
