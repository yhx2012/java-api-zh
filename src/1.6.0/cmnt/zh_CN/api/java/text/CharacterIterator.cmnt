<!-- BEGIN KEY -->
public interface java.text.CharacterIterator extends java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
此接口定义了对文本进行双向迭代的协议。迭代器对有界字符序列进行迭代。这些字符使用从 getBeginIndex() 返回的值开始，一直到 getEndIndex()-1 返回的值结束之间的值进行索引。
 <p>
迭代器维护当前的字符索引，索引值的有效范围是从 getBeginIndex() 到 getEndIndex()；出于历史原因，包括了值 getEndIndex() 以允许处理零长度的文本范围。可以通过调用 getIndex() 获取当前索引，还可以通过调用 setIndex()、first() 和 last() 直接设置当前索引。
 <p>
使用方法 previous() 和 next() 进行迭代。如果方法进行到从 getBeginIndex() 到 getEndIndex() -1 的范围之外，则返回 DONE，指示迭代器已经到达序列末尾。DONE 还可以由其他方法返回，以指示当前索引超出了此范围。

<P>示例：<P>

从前往后遍历文本
 <pre>
 public void traverseForward(CharacterIterator iter) {
     for(char c = iter.first(); c != CharacterIterator.DONE; c = iter.next()) {
         processChar(c);
     }
 }
 </pre>

从后往前逆向遍历文本
 <pre>
 public void traverseBackward(CharacterIterator iter) {
     for(char c = iter.last(); c != CharacterIterator.DONE; c = iter.previous()) {
         processChar(c);
     }
 }
 </pre>

从文本中给定的位置进行正向和逆向遍历。在此例中调用 notBoundary() 表示某个附加的停止遍历的标准。
 <pre>
 public void traverseOut(CharacterIterator iter, int pos) {
     for (char c = iter.setIndex(pos);
              c != CharacterIterator.DONE &amp;&amp; notBoundary(c);
              c = iter.next()) {
     }
     int end = iter.getIndex();
     for (char c = iter.setIndex(pos);
             c != CharacterIterator.DONE &amp;&amp; notBoundary(c);
             c = iter.previous()) {
     }
     int start = iter.getIndex();
     processSection(start, end);
 }
 </pre>

@see StringCharacterIterator
@see AttributedCharacterIterator

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final char java.text.CharacterIterator.DONE
<!-- END KEY -->
<!-- BEGIN DATA -->
当迭代器已到达文本末尾或开始处时返回的常量。其值为 '\\uFFFF'，即不应该出现在任何有效 Unicode 字符串中的 &quot;not a character&quot; 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.CharacterIterator.first()
<!-- END KEY -->
<!-- BEGIN DATA -->
将位置设置为 getBeginIndex()，并返回该位置的字符。
@return 文本中的第一个字符，如果文本为空，则返回 DONE
@see #getBeginIndex()

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.CharacterIterator.last()
<!-- END KEY -->
<!-- BEGIN DATA -->
将位置设置为 getEndIndex()-1（如果文本为空，则为 getEndIndex()），并返回该位置的字符。
@return 文本中的最后一个字符，如果文本为空，则返回 DONE
@see #getEndIndex()

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.CharacterIterator.current()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取当前位置（由 getIndex() 返回）的字符。
@return 当前位置的字符；如果当前位置已超出文本末尾，则返回 DONE。
@see #getIndex()

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.CharacterIterator.next()
<!-- END KEY -->
<!-- BEGIN DATA -->
将迭代器的索引加一，并返回新索引处的字符。如果得到的索引大于等于 getEndIndex()，则将当前索引重置为 getEndIndex()，并返回值 DONE。
@return 新位置的索引；如果该新位置已超出文本范围的末尾，则返回 DONE。

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.CharacterIterator.previous()
<!-- END KEY -->
<!-- BEGIN DATA -->
将迭代器的索引减一，并返回新索引处的字符。如果当前索引为 getBeginIndex()，则新索引仍为 getBeginIndex()，并返回值 DONE。
@return 新位置的字符；如果当前位置等于 getBeginIndex()，则返回 DONE。

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.CharacterIterator.setIndex(int position)
<!-- END KEY -->
<!-- BEGIN DATA -->
将位置设置为文本中的指定位置，并返回该字符。
@param position 文本中的位置。从 getBeginIndex() 到 getEndIndex() 的有效值。如果提供了无效值，则抛出 IllegalArgumentException。
@return 指定位置的字符；如果指定位置等于 getEndIndex()，则返回 DONE

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.text.CharacterIterator.getBeginIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回文本的起始索引。
@return 文本开始处的索引。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.text.CharacterIterator.getEndIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回文本的结束索引。此索引是文本末尾后面第一个字符的索引。
@return 文本中最后一个字符后面的索引

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.text.CharacterIterator.getIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前索引。
@return 当前索引。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.text.CharacterIterator.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建此迭代器的一个副本
@return 迭代器的副本

<!-- END DATA -->
