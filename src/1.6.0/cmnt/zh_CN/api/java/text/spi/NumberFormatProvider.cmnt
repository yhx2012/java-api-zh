<!-- BEGIN KEY -->
public abstract class java.text.spi.NumberFormatProvider extends java.util.spi.LocaleServiceProvider
<!-- END KEY -->
<!-- BEGIN DATA -->
提供 {@link java.text.NumberFormat NumberFormat} 类具体实现的服务提供者的抽象类。

@since        1.6
@version     
@(#)NumberFormatProvider.java	1.2 05/11/17

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.text.spi.NumberFormatProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->
唯一的构造方法。（由子类构造方法调用，通常是隐式的）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.text.NumberFormat java.text.spi.NumberFormatProvider.getCurrencyInstance(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回新的 <code>NumberFormat</code> 实例，此实例为指定的语言环境格式化货币价值。

@param locale 所需的语言环境。
@exception NullPointerException 如果 <code>locale</code> 为 null
@exception IllegalArgumentException 如果 <code>locale</code> 不是 {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()} 返回的语言环境之一。
@return 货币格式器
@see java.text.NumberFormat#getCurrencyInstance(java.util.Locale)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.text.NumberFormat java.text.spi.NumberFormatProvider.getIntegerInstance(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回新的 <code>NumberFormat</code> 实例，此实例为指定的语言环境格式化整数值。返回的数的格式使用四舍五入算法（参见 {@link java.math.BigDecimal#ROUND_HALF_EVEN ROUND_HALF_EVEN}）将浮点数字舍入为最接近的整数，并只解析输入字符串的整数部分（参见 {@link #isParseIntegerOnly isParseIntegerOnly}）。

@param locale 所需的语言环境
@exception NullPointerException 如果 <code>locale</code> 为 null
@exception IllegalArgumentException 如果 <code>locale</code> 不是 {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()} 返回的语言环境之一。
@return 整数值的数字格式
@see java.text.NumberFormat#getIntegerInstance(java.util.Locale)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.text.NumberFormat java.text.spi.NumberFormatProvider.getNumberInstance(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
为指定语言环境返回新的通用 <code>NumberFormat</code> 实例。

@param locale 所需的语言环境
@exception NullPointerException 如果 <code>locale</code> 为 null
@exception IllegalArgumentException 如果 <code>locale</code> 不是 {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()} 返回的语言环境之一。
@return 通用的数字格式器
@see java.text.NumberFormat#getNumberInstance(java.util.Locale)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.text.NumberFormat java.text.spi.NumberFormatProvider.getPercentInstance(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回新的 <code>NumberFormat</code> 实例，此实例为指定语言环境格式化百分比值。

@param locale 所需的语言环境
@exception NullPointerException 如果 <code>locale</code> 为 null
@exception IllegalArgumentException 如果 <code>locale</code> 不是 {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() getAvailableLocales()} 返回的语言环境之一。
@return 百分比格式器
@see java.text.NumberFormat#getPercentInstance(java.util.Locale)

<!-- END DATA -->
