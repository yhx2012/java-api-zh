<!-- BEGIN KEY -->
public class java.text.DecimalFormatSymbols extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示了 <code>DecimalFormat</code> 格式化数字所需的符号集（如小数点、组分隔符等等）。<code>DecimalFormat</code> 根据其语言环境数据为其自身创建一个 <code>DecimalFormatSymbols</code> 实例。如果需要更改这些符号，可从 <code>DecimalFormat</code> 获得 <code>DecimalFormatSymbols</code> 对象并修改它。

@see          java.util.Locale
@see          DecimalFormat
@version      1.46, 02/27/06
@author       Mark Davis
@author       Alan Liu

<!-- END DATA -->
<!-- BEGIN KEY -->
private char java.text.DecimalFormatSymbols.zeroDigit
<!-- END KEY -->
<!-- BEGIN DATA -->
用于零的字符。

@serial
@see #getZeroDigit

<!-- END DATA -->
<!-- BEGIN KEY -->
private char java.text.DecimalFormatSymbols.groupingSeparator
<!-- END KEY -->
<!-- BEGIN DATA -->
用于千位分隔符的字符。

@serial
@see #getGroupingSeparator

<!-- END DATA -->
<!-- BEGIN KEY -->
private char java.text.DecimalFormatSymbols.decimalSeparator
<!-- END KEY -->
<!-- BEGIN DATA -->
用于十进制符号的字符。

@serial
@see #getDecimalSeparator

<!-- END DATA -->
<!-- BEGIN KEY -->
private char java.text.DecimalFormatSymbols.perMill
<!-- END KEY -->
<!-- BEGIN DATA -->
用于千分数符号的字符。

@serial
@see #getPerMill

<!-- END DATA -->
<!-- BEGIN KEY -->
private char java.text.DecimalFormatSymbols.percent
<!-- END KEY -->
<!-- BEGIN DATA -->
用于百分数符号的字符。
@serial
@see #getPercent

<!-- END DATA -->
<!-- BEGIN KEY -->
private char java.text.DecimalFormatSymbols.digit
<!-- END KEY -->
<!-- BEGIN DATA -->
用于某种模式中数字的字符。

@serial
@see #getDigit

<!-- END DATA -->
<!-- BEGIN KEY -->
private char java.text.DecimalFormatSymbols.patternSeparator
<!-- END KEY -->
<!-- BEGIN DATA -->
用于在模式中分隔正数和负数子模式的字符。

@serial
@see #getPatternSeparator

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.text.DecimalFormatSymbols.infinity
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示无穷大的字符串。
@serial
@see #getInfinity

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.text.DecimalFormatSymbols.NaN
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示&ldquo;非数字&rdquo;的字符串。
@serial
@see #getNaN

<!-- END DATA -->
<!-- BEGIN KEY -->
private char java.text.DecimalFormatSymbols.minusSign
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示减号的字符。
@serial
@see #getMinusSign

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.text.DecimalFormatSymbols.currencySymbol
<!-- END KEY -->
<!-- BEGIN DATA -->
表示本地货币的字符串，如 &quot;$&quot;。
@serial
@see #getCurrencySymbol

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.text.DecimalFormatSymbols.intlCurrencySymbol
<!-- END KEY -->
<!-- BEGIN DATA -->
表示本地货币的 ISO 4217 货币代码，如 &quot;USD&quot;。
@serial
@see #getInternationalCurrencySymbol

<!-- END DATA -->
<!-- BEGIN KEY -->
private char java.text.DecimalFormatSymbols.monetarySeparator
<!-- END KEY -->
<!-- BEGIN DATA -->
格式化货币值时使用的小数点。
@serial
@since JDK 1.1.6
@see #getMonetaryDecimalSeparator

<!-- END DATA -->
<!-- BEGIN KEY -->
private char java.text.DecimalFormatSymbols.exponential
<!-- END KEY -->
<!-- BEGIN DATA -->
用于以指数计数法格式化数字时，区分数字中指数的字符，例如像数字 &quot;1.23E45&quot; 中的 'E'。
 <p>
注意，公共的 API 没有提供设置此字段的方法，即使实现和流格式支持该设置也是如此。在以后会将该功能添加到 API 中。

@serial
@since JDK 1.1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.text.DecimalFormatSymbols.exponentialSeparator
<!-- END KEY -->
<!-- BEGIN DATA -->
 用于分隔尾数和指数的字符串。示例：1.23x10^4 中的 "x10^"，1.23E4 中的 "E"。 
 <p>
 如果 <code>exponential</code> 和 <code>exponentialSeparator</code> 都存在，则优先使用此 <code>exponentialSeparator</code>。

 @serial
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.util.Locale java.text.DecimalFormatSymbols.locale
<!-- END KEY -->
<!-- BEGIN DATA -->
这些货币格式符号的语言环境。

@serial
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.text.DecimalFormatSymbols.serialVersionOnStream
<!-- END KEY -->
<!-- BEGIN DATA -->
描述流中存在的 <code>DecimalFormatSymbols</code> 的版本。可能的值为：
 <ul>
<li><b>0</b>（或未初始化的）：JDK 1.1.6 之前的版本。

<li><b>1</b>：使用 JDK 1.1.6 或更高版本所编写，包括两个新字段：<code>monetarySeparator</code> 和 <code>exponential</code>。
<li><b>2</b>：使用 J2SE 1.4 或更高版本所编写，包括新的 <code>locale</code> 字段。
<li><b>3</b>: 使用 J2SE 1.6 或更高版本所编写，包括新的 <code>exponentialSeparator</code> 字段。
 </ul>
流出 <code>DecimalFormatSymbols</code> 时，总是写入最新的格式（对应于允许的最高 <code>serialVersionOnStream</code>）。

@serial
@since JDK 1.1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.DecimalFormatSymbols()
<!-- END KEY -->
<!-- BEGIN DATA -->
为默认的语言环境创建一个 DecimalFormatSymbols 对象。此构造方法只能为 Java 运行时环境所支持的语言环境构造实例，而不能为那些已安装的 {@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider} 实现所支持的语言环境构造实例。要覆盖所有语言环境，请使用 {@link #getInstance(Locale) getInstance} 方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.DecimalFormatSymbols(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
为给定的语言环境创建一个 DecimalFormatSymbols 对象。此构造方法只能为 Java 运行时环境所支持的语言环境构造实例，而不能为那些已安装的 {@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider} 实现所支持的语言环境构造实例。要覆盖所有语言环境，请使用 {@link #getInstance(Locale) getInstance} 方法。

@exception NullPointerException 如果 <code>locale</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Locale[] java.text.DecimalFormatSymbols.getAvailableLocales()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个数组，它包括所有此类的 <code>getInstance</code> 方法可为之返回本地化实例的语言环境。返回的数组表示 Java 运行时和已安装的 {@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider} 实现所支持的语言环境的并集。返回的数组必须至少包含一个等同于 {@link java.util.Locale#US Locale.US} 的 <code>Locale</code> 实例。

 @return 可获得其本地化 <code>DecimalFormatSymbols</code> 实例的语言环境数组。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.text.DecimalFormatSymbols java.text.DecimalFormatSymbols.getInstance()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取默认语言环境的 <code>DecimalFormatSymbols</code> 实例。此方法为 Java 运行时本身以及已安装的 {@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider} 实现所支持的语言环境提供对 <code>DecimalFormatSymbols</code> 实例的访问。
 @return 一个 <code>DecimalFormatSymbols</code> 实例。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.text.DecimalFormatSymbols java.text.DecimalFormatSymbols.getInstance(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定语言环境的 <code>DecimalFormatSymbols</code> 实例。此方法为 Java 运行时本身以及已安装的 {@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider} 实现所支持的语言环境提供对 <code>DecimalFormatSymbols</code> 实例的访问。
 @param locale 所需的语言环境。
 @return 一个 <code>DecimalFormatSymbols</code> 实例。
 @exception NullPointerException 如果 <code>locale</code> 为 null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.DecimalFormatSymbols.getZeroDigit()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得用于零的字符。用于阿拉伯语等的该字符不同。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setZeroDigit(char zeroDigit)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于零的字符。用于阿拉伯语等的该字符不同。

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.DecimalFormatSymbols.getGroupingSeparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得用于千位分隔符的字符。用于法语等的该字符不同。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setGroupingSeparator(char groupingSeparator)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于千位分隔符的字符。用于法语等的该字符不同。

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.DecimalFormatSymbols.getDecimalSeparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得用于十进制符号的字符。用于法语等的该字符不同。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setDecimalSeparator(char decimalSeparator)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于十进制符号的字符。用于法语等的该字符不同。

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.DecimalFormatSymbols.getPerMill()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得用于千分数符号的字符。用于阿拉伯语等的该字符不同。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setPerMill(char perMill)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于千分数符号的字符。用于阿拉伯语等的该字符不同。

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.DecimalFormatSymbols.getPercent()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得用于百分数符号的字符。用于阿拉伯语等的该字符不同。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setPercent(char percent)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于百分数符号的字符。用于阿拉伯语等的该字符不同。

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.DecimalFormatSymbols.getDigit()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得用于某种模式中数字的字符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setDigit(char digit)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于某种模式中数字的字符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.DecimalFormatSymbols.getPatternSeparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得用于在模式中分隔正数和负数子模式的字符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setPatternSeparator(char patternSeparator)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于在模式中分隔正数和负数子模式的字符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.text.DecimalFormatSymbols.getInfinity()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得用于表示无穷大的字符串。几乎总是保持不变。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setInfinity(String infinity)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于表示无穷大的字符串。几乎总是保持不变。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.text.DecimalFormatSymbols.getNaN()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得用于表示&ldquo;非数字&rdquo;的字符串。几乎总是保持不变。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setNaN(String NaN)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于表示&ldquo;非数字&rdquo;的字符串。几乎总是保持不变。

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.DecimalFormatSymbols.getMinusSign()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得用于表示减号的字符。如果未指定显式的负数格式，则通过将 minusSign 作为正数格式的前缀来形成一个负数格式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setMinusSign(char minusSign)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于表示减号的字符。如果未指定显式的负数格式，则通过将 minusSign 作为正数格式的前缀来形成一个负数格式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.text.DecimalFormatSymbols.getCurrencySymbol()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回这些 DecimalFormatSymbols 货币在其语言环境中的货币符号。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setCurrencySymbol(String currency)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置这些 DecimalFormatSymbols 货币在其语言环境中的货币符号。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.text.DecimalFormatSymbols.getInternationalCurrencySymbol()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回这些 DecimalFormatSymbols 货币的 ISO 4217 货币代码。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setInternationalCurrencySymbol(String currencyCode)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置这些 DecimalFormatSymbols 货币的 ISO 4217 货币代码。如果货币代码有效（如 {@link java.util.Currency#getInstance(java.lang.String) Currency.getInstance} 所定义的），则此方法还为相应的 Currency 实例设置货币属性，并为 DecimalFormatSymbols 语言环境中的货币符号设置货币符号属性。如果货币代码无效，则将货币属性设置为 null，并且不修改货币符号属性。

@see #setCurrency
@see #setCurrencySymbol
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Currency java.text.DecimalFormatSymbols.getCurrency()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得这些 DecimalFormatSymbols 的货币。如果以前将货币符号属性设置为不是有效 ISO 4217 货币代码的值，则可能为 null。

@return 使用的货币，或者为 null
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setCurrency(Currency currency)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置这些 DecimalFormatSymbols 的货币。这还为 DecimalFormatSymbols 语言环境中的货币符号设置了货币符号属性，并为该货币的 ISO 4217 货币代码设置了国际货币符号。

@param currency 要使用的新货币
@exception NullPointerException 如果 <code>currency</code> 为 null
@since 1.4
@see #setCurrencySymbol
@see #setInternationalCurrencySymbol

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.DecimalFormatSymbols.getMonetaryDecimalSeparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回货币小数点分隔符。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setMonetaryDecimalSeparator(char sep)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置货币小数点分隔符。	
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.text.DecimalFormatSymbols.getExponentSeparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回用于分隔尾数和指数的字符串。示例：1.23x10^4 中的 "x10^"，1.23E4 中的 "E" 。

 @return 指数分隔符字符串
 @see #setExponentSeparator(java.lang.String)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setExponentSeparator(String exp)
<!-- END KEY -->
<!-- BEGIN DATA -->
 设置用于分隔尾数和指数的字符串。示例：1.23x10^4 中的 "x10^"，1.23E4 中的 "E" 。

 @param exp 指数分隔符字符串
 @exception NullPointerException 如果 <code>exp</code> 为 null
 @see #getExponentSeparator()
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.text.DecimalFormatSymbols.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
标准重写。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.text.DecimalFormatSymbols.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 equals。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.text.DecimalFormatSymbols.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 hashCode。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.text.DecimalFormatSymbols.readObject(ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取默认的可序列化字段、为较旧系列版本的对象提供默认值，并对不可序列化的字段进行初始化。如果 <code>serialVersionOnStream</code> 小于 1，则将 <code>monetarySeparator</code> 初始化为与 <code>decimalSeparator</code> 相同，并将 <code>exponential</code> 初始化为 'E'。如果 <code>serialVersionOnStream</code> 小于 2，则将 <code>locale</code> 初始化为根语言环境。如果 <code>serialVersionOnStream</code> 小于 3，则它使用 <code>exponential</code> 初始化 <code>exponentialSeparator</code>。如果再次流出此对象，则可将 <code>serialVersionOnStream</code> 设置回最大的允许值，以使默认的序列化可以正常工作。根据 intlCurrencySymbol 字段来初始化货币。

@since JDK 1.1.6

<!-- END DATA -->
