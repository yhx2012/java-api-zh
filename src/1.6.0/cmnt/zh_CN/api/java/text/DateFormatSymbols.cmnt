<!-- BEGIN KEY -->
public class java.text.DateFormatSymbols extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>DateFormatSymbols</code> 是一个公共类，用于封装可本地化的日期-时间格式化数据，如月名、星期几的名称和时区数据。<code>DateFormat</code> 和 <code>SimpleDateFormat</code> 都使用 <code>DateFormatSymbols</code> 封装此信息。

 <p>
通常不应直接使用 <code>DateFormatSymbols</code>。建议最好使用 <code>DateFormat</code> 类的工厂方法创建日期-时间格式器 (formatter)：<code>getTimeInstance</code>、<code>getDateInstance</code> 或 <code>getDateTimeInstance</code>。这些方法自动为格式器创建一个 <code>DateFormatSymbols</code>，所以用户就不必再创建了。创建了格式器后，可使用 <code>setPattern</code> 方法修改它的格式模式。有关使用 <code>DateFormat</code> 的工厂方法创建格式器的更多信息，请参阅 {@link DateFormat}。

 <p>
如果要为特定语言环境创建具有特定格式模式的日期-时间格式器，可使用以下语句实现：
 <blockquote>
 <pre>
 new SimpleDateFormat(aPattern, DateFormatSymbols.getInstance(aLocale)).
 </pre>
 </blockquote>

 <p>
<code>DateFormatSymbols</code> 对象是可复制的。获得一个 <code>DateFormatSymbols</code> 对象后，可随意修改日期-时间格式化数据。例如，可以使用便于记忆的字符替换本地化的日期-时间格式模式字符。也可以将有代表性的城市更改为最喜欢的城市。

 <p>
要为其他语言环境进行日期-时间格式化，可添加新的 <code>DateFormatSymbols</code> 子类以支持 <code>SimpleDateFormat</code>。

@see          DateFormat
@see          SimpleDateFormat
@see          java.util.SimpleTimeZone
@version      1.48 04/25/06
@author       Chen-Lieh Huang

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String[] java.text.DateFormatSymbols.eras
<!-- END KEY -->
<!-- BEGIN DATA -->
年代字符串。例如：&quot;AD&quot; 和 &quot;BC&quot;。2 个字符串的数组，通过 <code>Calendar.BC</code> 和 <code>Calendar.AD</code> 进行索引。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String[] java.text.DateFormatSymbols.months
<!-- END KEY -->
<!-- BEGIN DATA -->
月份字符串。例如：&quot;January&quot;、&quot;February&quot; 等等。13 个字符串的数组（某些日历有 13 个月），通过 <code>Calendar.JANUARY</code>、<code>Calendar.FEBRUARY</code> 等进行索引。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String[] java.text.DateFormatSymbols.shortMonths
<!-- END KEY -->
<!-- BEGIN DATA -->
简写的月份字符串。例如：&quot;Jan&quot;、&quot;Feb&quot; 等等。13 个字符串的数组（某些日历有 13 个月），通过 <code>Calendar.JANUARY</code>、<code>Calendar.FEBRUARY</code> 等进行索引。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String[] java.text.DateFormatSymbols.weekdays
<!-- END KEY -->
<!-- BEGIN DATA -->
星期几字符串。例如：&quot;Sunday&quot;、&quot;Monday&quot; 等等。8 个字符串的数组，通过 <code>Calendar.SUNDAY</code>、<code>Calendar.MONDAY</code> 等进行索引。忽略元素 <code>weekdays[0]</code>。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String[] java.text.DateFormatSymbols.shortWeekdays
<!-- END KEY -->
<!-- BEGIN DATA -->
简写的星期几字符串。例如：&quot;Sun&quot;、&quot;Mon&quot; 等等。8 个字符串的数组，通过 <code>Calendar.SUNDAY</code>、<code>Calendar.MONDAY</code> 等进行索引。忽略元素 <code>shortWeekdays[0]</code> 。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String[] java.text.DateFormatSymbols.ampms
<!-- END KEY -->
<!-- BEGIN DATA -->
AM 和 PM 字符串。例如：&quot;AM&quot; 和 &quot;PM&quot;。2 个字符串的数组，通过 <code>Calendar.AM</code> 和 <code>Calendar.PM</code> 进行索引。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String[][] java.text.DateFormatSymbols.zoneStrings
<!-- END KEY -->
<!-- BEGIN DATA -->
此语言环境中本地化的时区名。这是一个二维的字符串数字，其大小为 <em>n</em> &times; <em>m</em>，其中 <em>m</em> 至少为 5。<em>n</em> 行中每一行都是一个包含单个 <code>TimeZone</code> 本地化名称的条目。这样的行包含（<code>i</code> 的范围是从 0 到 <em>n</em>-1）：
 <ul>
<li><code>zoneStrings[i][0]</code> - 时区 ID</li>
<li><code>zoneStrings[i][1]</code> - 标准时间中时区的长名称</li>
<li><code>zoneStrings[i][2]</code> - 标准时间中时区的短名称</li>
<li><code>zoneStrings[i][3]</code> - 夏令时中时区的长名称</li>
<li><code>zoneStrings[i][4]</code> - 夏令时中时区的短名称</li>
 </ul>
时区 ID <em>没有</em> 被本地化；它是 {@link java.util.TimeZone TimeZone} 类的有效 ID 之一，但不是<a href="../java/util/TimeZone.html#CustomID">自定义 ID</a>。其他所有条目都是本地化名称。
@see java.util.TimeZone
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String java.text.DateFormatSymbols.localPatternChars
<!-- END KEY -->
<!-- BEGIN DATA -->
本地化日期-时间模式字符。例如，某个语言环境可能需要在其日期格式模式字符串中使用 'u' 而不是 'y' 来表示年。该字符串必须正好为 18 个字符长，通过 <code>DateFormat.ERA_FIELD</code>、<code>DateFormat.YEAR_FIELD</code> 等来描述字符的索引。因此，如果该字符串为 &quot;Xz...&quot;，则本地化模式将使用 'X' 表示年代，使用 'z' 表示年。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.util.Locale java.text.DateFormatSymbols.locale
<!-- END KEY -->
<!-- BEGIN DATA -->
 用来初始化此 DateFormatSymbols 对象的语言环境。

 @since 1.6
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.DateFormatSymbols()
<!-- END KEY -->
<!-- BEGIN DATA -->
通过从默认语言环境资源加载格式数据，构造一个 DateFormatSymbols 对象。此构造方法只能构造 Java 运行时环境所支持的语言环境实例，不能构造已安装的 {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider} 实现所支持的语言环境实例。要覆盖所有的语言环境，可使用 {@link #getInstance(Locale) getInstance} 方法。

 @see #getInstance()

@exception  java.util.MissingResourceException 如果无法找到或加载默认语言环境的资源。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.DateFormatSymbols(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过从给定语言环境资源加载格式数据，构造一个 DateFormatSymbols 对象。此构造方法只能构造 Java 运行时环境所支持的语言环境实例，不能构造已安装的 {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider} 实现所支持的语言环境实例。要覆盖所有的语言环境，可使用 {@link #getInstance(Locale) getInstance} 方法。

 @see #getInstance(Locale)

@exception  java.util.MissingResourceException 如果无法找到或加载指定语言环境的资源。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Locale[] java.text.DateFormatSymbols.getAvailableLocales()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回一个数组，它由此类的 <code>getInstance</code> 方法可为之返回本地化实例的所有语言环境组成。返回的数组表示 Java 运行时所支持的语言环境和已安装的 {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider} 实现所支持的语言环境的并集。 它至少必须包含一个等于 {@link java.util.Locale#US Locale.US} 的 <code>Locale</code> 实例。


 @return 一个语言环境数组，可获取这些语言环境的本地化 <code>DateFormatSymbols</code> 实例。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.text.DateFormatSymbols java.text.DateFormatSymbols.getInstance()
<!-- END KEY -->
<!-- BEGIN DATA -->
 获取默认语言环境的 <code>DateFormatSymbols</code> 实例。此方法可访问 Java 运行时本身以及已安装 {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider} 实现所支持的语言环境的 <code>DateFormatSymbols</code> 实例。
 @return 一个 <code>DateFormatSymbols</code> 实例。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.text.DateFormatSymbols java.text.DateFormatSymbols.getInstance(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
 获取指定语言环境的 <code>DateFormatSymbols</code> 实例。此方法可访问 Java 运行时本身以及已安装 {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider} 实现所支持的语言环境的 <code>DateFormatSymbols</code> 实例。
 @param 给定的语言环境
 @return 一个 <code>DateFormatSymbols</code> 实例。
 @exception 如果 <code>locale</code> 为 null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] java.text.DateFormatSymbols.getEras()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取年代字符串。例如：&quot;AD&quot; 和 &quot;BC&quot;。
@return 年代字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DateFormatSymbols.setEras(java.lang.String[] newEras)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置年代字符串。例如：&quot;AD&quot; 和 &quot;BC&quot;。
@param newEras 新的年代字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] java.text.DateFormatSymbols.getMonths()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取月份字符串。例如：&quot;January&quot;、&quot;February&quot; 等等。
@return 月份字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DateFormatSymbols.setMonths(java.lang.String[] newMonths)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置月份字符串。例如：&quot;January&quot;、&quot;February&quot; 等等。
@param newMonths 新的月份字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] java.text.DateFormatSymbols.getShortMonths()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取简短形式的月份字符串。例如：&quot;Jan&quot;、&quot;Feb&quot; 等等。
@return 简短形式的月份字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DateFormatSymbols.setShortMonths(java.lang.String[] newShortMonths)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置简短形式的月份字符串。例如：&quot;Jan&quot;、&quot;Feb&quot; 等等
@param newShortMonths 新的简写形式的月份字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] java.text.DateFormatSymbols.getWeekdays()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取星期字符串。例如：&quot;Sunday&quot;、&quot;Monday&quot; 等等。
@return 星期字符串。使用 <code>Calendar.SUNDAY</code>、<code>Calendar.MONDAY</code> 等指出所得数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DateFormatSymbols.setWeekdays(java.lang.String[] newWeekdays)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置星期字符串。例如：&quot;Sunday&quot;、&quot;Monday&quot; 等等。
@param newWeekdays 新的星期字符串。应该通过 <code>Calendar.SUNDAY</code>、<code>Calendar.MONDAY</code> 等指出该数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] java.text.DateFormatSymbols.getShortWeekdays()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取简短形式的星期字符串。例如：&quot;Sun&quot;、&quot;Mon&quot; 等等。
@return 简短形式的星期字符串。使用 <code>Calendar.SUNDAY</code>、<code>Calendar.MONDAY</code> 等指出所得数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DateFormatSymbols.setShortWeekdays(java.lang.String[] newShortWeekdays)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置简短形式的星期字符串。例如：&quot;Sun&quot;、&quot;Mon&quot; 等等。
@param newShortWeekdays 新的简短形式星期字符串。应该通过 <code>Calendar.SUNDAY</code>、<code>Calendar.MONDAY</code> 等指出该数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] java.text.DateFormatSymbols.getAmPmStrings()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 ampm 字符串。例如：&quot;AM&quot; 和 &quot;PM&quot;。
@return ampm 字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DateFormatSymbols.setAmPmStrings(java.lang.String[] newAmpms)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 ampm 字符串。例如：&quot;AM&quot; 和 &quot;PM&quot;。
@param newAmpms 新的 ampm 字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[][] java.text.DateFormatSymbols.getZoneStrings()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取时区字符串。不建议使用此方法；可以使用 {@link java.util.TimeZone#getDisplayName() TimeZone.getDisplayName()} 替代。
 <p>
 返回值是一个二维字符串数字，其大小为 <em>n</em> × <em>m</em>，其中 <em>m</em> 至少为 5。每个 <em>n</em> 行都是一个包含单个 <code>TimeZone</code> 本地化名称的条目。每个这样的行包含（<code>i</code> 的范围从 0 到 <em>n</em>-1）：
 <ul>
 <li><code>zoneStrings[i][0]</code> - 时区 ID</li>
 <li><code>zoneStrings[i][1]</code> - 标准时时区的长名称</li>
 <li><code>zoneStrings[i][2]</code> - 标准时时区的短名称</li>
 <li><code>zoneStrings[i][3]</code> - 夏令时时区的长名称</li>
 <li><code>zoneStrings[i][4]</code> - 夏令时时区的短名称</li>
 </ul>
 时区 ID <em>没有</em> 被本地化；它是 {@link java.util.TimeZone TimeZone} 类的有效 ID 之一，但不是<a href="../util/TimeZone.html#CustomID">自定义 ID</a>。其他所有条目都是本地化名称。如果某个时区没有实现夏令时，则不能使用夏令时名称。
 <p>
 如果没有在此 <code>DateFormatSymbols</code> 实例上调用 {@link #setZoneStrings(String[][]) setZoneStrings}，则返回该调用提供的字符串。否则，返回的数组包含 Java 运行时和已安装的 {@link java.util.spi.TimeZoneNameProvider TimeZoneNameProvider} 实现所提供的名称。 
 
 @return 时区字符串。
 @see #setZoneStrings(String[][])

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DateFormatSymbols.setZoneStrings(java.lang.String[][] newZoneStrings)
<!-- END KEY -->
<!-- BEGIN DATA -->
 设置时区字符串。该参数必须是一个二维字符串数组，其大小为 <em>n</em> × <em>m</em>，其中 <em>m</em> 至少为 5。每个 <em>n</em> 行都是一个包含单个 <code>TimeZone</code> 本地化名称的条目。每个这样的行包含（<code>i</code> 的范围从 0 到 <em>n</em>-1）：
 <ul>
 <li><code>zoneStrings[i][0]</code> - 时区 ID</li>
 <li><code>zoneStrings[i][1]</code> - 标准时时区的长名称</li>
 <li><code>zoneStrings[i][2]</code> - 标准时时区的短名称</li>
 <li><code>zoneStrings[i][3]</code> - 夏令时时区的长名称</li>
 <li><code>zoneStrings[i][4]</code> - 夏令时时区的短名称</li>
 </ul>
 时区 ID <em>没有</em> 被本地化；它是 {@link java.util.TimeZone TimeZone} 类的有效 ID 之一，但不是<a href="../util/TimeZone.html#CustomID">自定义 ID</a>。其他所有条目都是本地化名称。

 @param newZoneStrings 新的时区字符串。
 @exception IllegalArgumentException 如果 <code>newZoneStrings</code> 中任何行的长度小于 5
 @exception NullPointerException 如果 <code>newZoneStrings</code> 为 null
 @see #getZoneStrings()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.text.DateFormatSymbols.getLocalPatternChars()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取本地化的日期-时间模式字符。例如：'u'、't' 等等。
@return 本地化的日期-时间模式字符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DateFormatSymbols.setLocalPatternChars(String newLocalPatternChars)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置本地化的日期-时间模式字符。例如：'u'、't' 等等。
@param newLocalPatternChars 新的本地化的日期-时间模式字符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.text.DateFormatSymbols.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 Cloneable。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.text.DateFormatSymbols.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 hashCode。生成 DateFormatSymbols 对象的哈希码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.text.DateFormatSymbols.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 equals。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.text.DateFormatSymbols.writeObject(ObjectOutputStream stream) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 为了确保向后兼容性，在确保 <code>zoneStrings</code> 字段被初始化之后写出默认可序列化数据。

 @since 1.6


<!-- END DATA -->
