<!-- BEGIN KEY -->
public abstract class java.text.DateFormat extends java.text.Format
<!-- END KEY -->
<!-- BEGIN DATA -->
DateFormat 是日期/时间格式化子类的抽象类，它以与语言无关的方式格式化并解析日期或时间。日期/时间格式化子类（如 SimpleDateFormat）允许进行格式化（也就是日期 -&gt; 文本）、解析（文本-&gt; 日期）和标准化。将日期表示为 <code>Date</code> 对象，或者表示为从 GMT（格林尼治标准时间）1970 年 1 月 1 日 00:00:00 这一刻开始的毫秒数。

<p>DateFormat 提供了很多类方法，以获得基于默认或给定语言环境和多种格式化风格的默认日期/时间 Formatter。格式化风格包括 FULL、LONG、MEDIUM 和 SHORT。方法描述中提供了使用这些风格的更多细节和示例。

<p>DateFormat 可帮助进行格式化并解析任何语言环境的日期。对于月、星期，甚至日历格式（阴历和阳历），其代码可完全与语言环境的约定无关。

<p>要格式化一个当前语言环境下的日期，可使用某个静态工厂方法：
 <pre>
  myString = DateFormat.getDateInstance().format(myDate);
 </pre>
<p>如果格式化多个日期，那么获取该格式并多次使用它是更为高效的做法，这样系统就不必多次获取有关环境语言和国家/地区约定的信息了。
 <pre>
  DateFormat df = DateFormat.getDateInstance();
  for (int i = 0; i &lt; myDate.length; ++i) {
    output.println(df.format(myDate[i]) + &quot;; &quot;);
  }
 </pre>
<p>要格式化不同语言环境的日期，可在 getDateInstance() 的调用中指定它。
 <pre>
  DateFormat df = DateFormat.getDateInstance(DateFormat.LONG, Locale.FRANCE);
 </pre>
<p>还可使用 DateFormat 进行解析。
 <pre>
  myDate = df.parse(myString);
 </pre>
<p>使用 getDateInstance 来获取该国家/地区的标准日期格式。另外还提供了一些其他静态工厂方法。使用 getTimeInstance 可获取该国家/地区的时间格式。使用 getDateTimeInstance 可获取日期和时间格式。可以将不同选项传入这些工厂方法，以控制结果的长度（从 SHORT 到 MEDIUM 到 LONG 再到 FULL）。确切的结果取决于语言环境，但是通常：
<ul><li>SHORT 完全为数字，如 12.13.52 或 3:30pm
<li>MEDIUM 较长，如 Jan 12, 1952
<li>LONG 更长，如 January 12, 1952 或 3:30:32pm
<li>FULL 是完全指定，如 Tuesday、April 12、1952 AD 或 3:30:42pm PST。
 </ul>

<p>如果愿意，还可以在格式上设置时区。如果想对格式化或解析施加更多的控制（或者给予用户更多的控制），可以尝试将从工厂方法所获取的 DateFormat 强制转换为 SimpleDateFormat。这适用于大多数国家/地区；只是要记住将其放入一个 try 代码块中，以防遇到特殊的格式。

<p>还可以使用借助 ParsePosition 和 FieldPosition 的解析和格式化方法形式来
<ul><li>逐步地解析字符串的各部分。
<li>对齐任意特定的字段，或者找出字符串在屏幕上的选择位置。
 </ul>

<h4><a name="synchronization">同步</a></h4>

 <p>
日期格式不是同步的。建议为每个线程创建独立的格式实例。如果多个线程同时访问一个格式，则它必须保持外部同步。

@see          Format
@see          NumberFormat
@see          SimpleDateFormat
@see          java.util.Calendar
@see          java.util.GregorianCalendar
@see          java.util.TimeZone
@version      1.57 11/17/05
@author       Mark Davis, Chen-Lieh Huang, Alan Liu

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Calendar java.text.DateFormat.calendar
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>DateFormat</code> 使用 calendar 来生成实现日期和时间格式化所需的时间字段值。子类应将此 calendar 初始化为适合于与此 <code>DateFormat</code> 关联的语言环境的日历。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.text.NumberFormat java.text.DateFormat.numberFormat
<!-- END KEY -->
<!-- BEGIN DATA -->
数字格式器，<code>DateFormat</code> 用其来格式化日期和时间中的数字。子类应将此数字格式器初始化为适合于与此 <code>DateFormat</code> 关联的语言环境的数字格式。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.ERA_FIELD
<!-- END KEY -->
<!-- BEGIN DATA -->
用于对齐 ERA 字段的有用常量。用于日期/时间格式化的 FieldPosition 中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.YEAR_FIELD
<!-- END KEY -->
<!-- BEGIN DATA -->
用于对齐 YEAR 字段的有用常量。用于日期/时间格式化的 FieldPosition 中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.MONTH_FIELD
<!-- END KEY -->
<!-- BEGIN DATA -->
用于对齐 MONTH 字段的有用常量。用于日期/时间格式化的 FieldPosition 中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.DATE_FIELD
<!-- END KEY -->
<!-- BEGIN DATA -->
用于对齐 DATE 字段的有用常量。用于日期/时间格式化的 FieldPosition 中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.HOUR_OF_DAY1_FIELD
<!-- END KEY -->
<!-- BEGIN DATA -->
用于对齐从 1 开始的 HOUR_OF_DAY 字段的有用常量。用于日期/时间格式化的 FieldPosition 中。HOUR_OF_DAY1_FIELD 用于从 1 开始的 24 小时时钟。例如，23:59 ＋ 01:00 的结果是 24:59。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.HOUR_OF_DAY0_FIELD
<!-- END KEY -->
<!-- BEGIN DATA -->
用于对齐从 0 开始的 HOUR_OF_DAY 字段的有用常量。用于日期/时间格式化的 FieldPosition 中。HOUR_OF_DAY0_FIELD 用于从 0 开始的 24 小时时钟。例如，23:59 ＋ 01:00 的结果是 00:59。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.MINUTE_FIELD
<!-- END KEY -->
<!-- BEGIN DATA -->
用于对齐 MINUTE 字段的有用常量。用于日期/时间格式化的 FieldPosition 中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.SECOND_FIELD
<!-- END KEY -->
<!-- BEGIN DATA -->
用于对齐 SECOND 字段的有用常量。用于日期/时间格式化的 FieldPosition 中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.MILLISECOND_FIELD
<!-- END KEY -->
<!-- BEGIN DATA -->
用于对齐 MILLISECOND 字段的有用常量。用于日期/时间格式化的 FieldPosition 中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.DAY_OF_WEEK_FIELD
<!-- END KEY -->
<!-- BEGIN DATA -->
用于对齐 DAY_OF_WEEK 字段的有用常量。用于日期/时间格式化的 FieldPosition 中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.DAY_OF_YEAR_FIELD
<!-- END KEY -->
<!-- BEGIN DATA -->
用于对齐 DAY_OF_YEAR 字段的有用常量。用于日期/时间格式化的 FieldPosition 中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.DAY_OF_WEEK_IN_MONTH_FIELD
<!-- END KEY -->
<!-- BEGIN DATA -->
用于对齐 DAY_OF_WEEK_IN_MONTH 字段的有用常量。用于日期/时间格式化的 FieldPosition 中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.WEEK_OF_YEAR_FIELD
<!-- END KEY -->
<!-- BEGIN DATA -->
用于对齐 WEEK_OF_YEAR 字段的有用常量。用于日期/时间格式化的 FieldPosition 中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.WEEK_OF_MONTH_FIELD
<!-- END KEY -->
<!-- BEGIN DATA -->
用于对齐 WEEK_OF_MONTH 字段的有用常量。用于日期/时间格式化的 FieldPosition 中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.AM_PM_FIELD
<!-- END KEY -->
<!-- BEGIN DATA -->
用于对齐 AM_PM 字段的有用常量。用于日期/时间格式化的 FieldPosition 中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.HOUR1_FIELD
<!-- END KEY -->
<!-- BEGIN DATA -->
用于对齐从 1 开始的 HOUR 字段的有用常量。用于日期/时间格式化的 FieldPosition 中。HOUR1_FIELD 用于从 1 开始的 12 小时时钟。例如，11:30 PM ＋ 1 小时的结果是 12:30 AM。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.HOUR0_FIELD
<!-- END KEY -->
<!-- BEGIN DATA -->
用于对齐从 0 开始的 HOUR 字段的有用常量。用于日期/时间格式化的 FieldPosition 中。HOUR0_FIELD 用于从 0 开始的 12 小时时钟。例如，11:30 PM ＋ 1 小时的结果是 00:30 AM。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.TIMEZONE_FIELD
<!-- END KEY -->
<!-- BEGIN DATA -->
用于对齐 TIMEZONE 字段的有用常量。用于日期/时间格式化的 FieldPosition 中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.FULL
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 FULL 模式的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.LONG
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 LONG 模式的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.MEDIUM
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 MEDIUM 模式的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.SHORT
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 SHORT 模式的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.text.DateFormat.DEFAULT
<!-- END KEY -->
<!-- BEGIN DATA -->
用于默认模式的常量。其值为 MEDIUM。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.text.DateFormat()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 DateFormat。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.StringBuffer java.text.DateFormat.format(Object obj, StringBuffer toAppendTo, FieldPosition fieldPosition)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 Format。将时间对象格式化为时间字符串。时间对象的示例有以毫秒表示的时间值和 Date 对象。
@param obj 必须为 Number 或 Date。
@param toAppendTo 用于返回的时间字符串的字符串缓冲区。
@return 作为 toAppendTo 进行传入的字符串缓冲区，添加上已格式化的文本。
@param fieldPosition 跟踪返回字符串中字段的位置。输入时：如果需要，是一个对齐字段。输出时：对齐字段的偏移量。例如，在给定时间文本 &quot;1996.07.10 AD at 15:08:56 PDT&quot; 的情况下，如果给定的 fieldPosition 是 DateFormat.YEAR_FIELD，则将 fieldPosition 的开始索引和结束索引分别设置为 0 和 4。注意，如果在一个模式中多次出现同一时间字段，则为第一次出现的该时间字段设置 fieldPosition。例如，使用模式 &quot;h a z (zzzz)&quot; 和对齐字段 DateFormat.TIMEZONE_FIELD 将某个 Date 格式化为时间字符串 &quot;1 PM PDT (Pacific Daylight Time)&quot; 时，针对时区模式字符 'z' 的首个匹配项，将 fieldPosition 的开始索引和结束索引分别设置为 5 和 8。
@see java.text.Format

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.StringBuffer java.text.DateFormat.format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 Date 格式化为日期/时间字符串。
@param date 要格式化为日期/时间字符串的 Date。
@param toAppendTo 用于返回的日期/时间字符串的字符串缓冲区。
@param fieldPosition 跟踪返回字符串中字段的位置。输入时：如果需要，是一个对齐字段。输出时：对齐字段的偏移量。例如，在给定时间文本 &quot;1996.07.10 AD at 15:08:56 PDT&quot; 的情况下，如果给定的 fieldPosition 是 DateFormat.YEAR_FIELD，则将 fieldPosition 的开始索引和结束索引分别设置为 0 和 4。注意，如果在一个模式中多次出现同一时间字段，则为该时间字段的首个匹配项设置 fieldPosition。例如，使用模式 &quot;h a z (zzzz)&quot; 和对齐字段 DateFormat.TIMEZONE_FIELD 将某个 Date 格式化为时间字符串 &quot;1 PM PDT (Pacific Daylight Time)&quot; 时，针对时区模式字符 'z' 的首个匹配项，将 fieldPosition 的开始索引和结束索引分别设置为 5 和 8。
@return 作为 toAppendTo 进行传入的字符串缓冲区，添加上已格式化的文件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.text.DateFormat.format(Date date)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 Date 格式化为日期/时间字符串。
@param date 要格式化为时间字符串的时间值。
@return 已格式化的时间字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Date java.text.DateFormat.parse(String source) throws java.text.ParseException
<!-- END KEY -->
<!-- BEGIN DATA -->
从给定字符串的开始解析文本，以生成一个日期。该方法不使用给定字符串的整个文本。
 <p>
有关日期解析的更多信息，请参阅 {@link #parse(String, ParsePosition)} 方法。

@param source 一个 <code>String</code>，应从其开始处进行解析。
@return 解析字符串得到的 <code>Date</code>。
@exception ParseException 如果无法解析指定字符串的开始处。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Date java.text.DateFormat.parse(String source, ParsePosition pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据给定的解析位置开始解析日期/时间字符串。例如，时间文本 &quot;07/10/96 4:5 PM, PDT&quot; 会解析成等同于 Date(837039928046) 的 Date。

<p>在默认情况下，进行的解析是不严格的：如果输入的形式不是此对象的格式化方法使用的形式，但仍可作为日期进行解析，则解析将获得成功。客户端可能通过调用 setLenient(false) 来强调严格遵守该格式。

@see java.text.DateFormat#setLenient(boolean)

@param source  要解析的日期/时间字符串

@param pos   输入时，是开始进行解析的位置；输出时，是解析终止的位置，如果解析失败，则为开始位置。

@return      一个 Date，如果无法解析输入，则为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.text.DateFormat.parseObject(String source, ParsePosition pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
解析字符串中的文本，以生成一个 <code>Date</code>。
 <p>
该方法试图从 <code>pos</code> 所给定的索引处开始解析文本。如果解析成功，则将 <code>pos</code> 的索引更新为所用最后一个字符后面的索引（解析过程不一定使用到字符串末尾为止的所有字符），并返回解析得到的日期。可以使用更新后的 <code>pos</code> 指示下一次调用此方法的开始点。如果发生错误，则不更改 <code>pos</code> 的索引，并将 <code>pos</code> 的错误索引设置为发生错误处的字符索引，并且返回 null。
 <p>
有关日期解析的更多信息，请参阅 {@link #parse(String, ParsePosition)} 方法。

@param source 一个 <code>String</code>，应解析其中的部分内容。
@param pos 具有索引和上述错误索引信息的 <code>ParsePosition</code> 对象。
@return 解析字符串得到的 <code>Date</code>。在出现错误的情况下返回 null。
@exception NullPointerException 如果 <code>pos</code> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.text.DateFormat java.text.DateFormat.getTimeInstance()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取时间格式器，该格式器具有默认语言环境的默认格式化风格。
@return 时间格式器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.text.DateFormat java.text.DateFormat.getTimeInstance(int style)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取时间格式器，该格式器具有默认语言环境的给定格式化风格。
@param style 给定的格式化风格。例如，SHORT 用于 US 语言环境中的 &quot;h:mm a&quot;。
@return 时间格式器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.text.DateFormat java.text.DateFormat.getTimeInstance(int style, Locale aLocale)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取时间格式器，该格式器具有给定语言环境的给定格式化风格。
@param style 给定的格式化风格。例如，SHORT 用于 US 语言环境中的 &quot;h:mm a&quot;。
@param aLocale 给定的语言环境。
@return 时间格式器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.text.DateFormat java.text.DateFormat.getDateInstance()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取日期格式器，该格式器具有默认语言环境的默认格式化风格。
@return 日期格式器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.text.DateFormat java.text.DateFormat.getDateInstance(int style)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取日期格式器，该格式器具有默认语言环境的给定格式化风格。
@param style 给定的格式化风格。例如，SHORT 用于 US 语言环境中的 &quot;M/d/yy&quot;。
@return 日期格式器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.text.DateFormat java.text.DateFormat.getDateInstance(int style, Locale aLocale)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取日期格式器，该格式器具有给定语言环境的给定格式化风格。
@param style 给定的格式化风格。例如，SHORT 用于 US 语言环境中的 &quot;M/d/yy&quot;。
@param aLocale 给定的语言环境。
@return 日期格式器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.text.DateFormat java.text.DateFormat.getDateTimeInstance()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取日期/时间格式器，该格式器具有默认语言环境的默认格式化风格。
@return 日期/时间格式器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.text.DateFormat java.text.DateFormat.getDateTimeInstance(int dateStyle, int timeStyle)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取日期/时间格式器，该格式器具有默认语言环境的给定日期和时间格式化风格。
@param dateStyle 给定的日期格式化风格。例如，SHORT 用于 US 语言环境中的 &quot;M/d/yy&quot;。
@param timeStyle 给定的时间格式化风格。例如，SHORT 用于 US 语言环境中的 &quot;h:mm a&quot;。
@return 日期/时间格式器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.text.DateFormat java.text.DateFormat.getDateTimeInstance(int dateStyle, int timeStyle, Locale aLocale)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取日期/时间格式器，该格式器具有给定语言环境的给定格式化风格。
@param dateStyle 给定的日期格式化风格。
@param timeStyle 给定的时间格式化风格。
@param aLocale 给定的语言环境。
@return 日期/时间格式器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.text.DateFormat java.text.DateFormat.getInstance()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取为日期和时间使用 SHORT 风格的默认日期/时间格式器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Locale[] java.text.DateFormat.getAvailableLocales()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回所有语言环境的数组，此类的 <code>get*Instance</code> 方法可以为其返回已本地化的实例。返回的数组代表 Java 运行时和已安装的 {@link java.text.spi.DateFormatProvider DateFormatProvider} 实现所支持的语言环境的联合。它至少必须包含一个等同于 {@link java.util.Locale#US Locale.US} 的 <code>Locale</code> 实例。

@return 一个语言环境数组，为这些语言环境提供了已本地化的 <code>DateFormat</code> 实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DateFormat.setCalendar(Calendar newCalendar)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此日期格式所使用的日历。最初为指定或默认的语言环境使用默认的日历。
@param newCalendar 该日期格式所使用的新 Calendar

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Calendar java.text.DateFormat.getCalendar()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此日期/时间格式器关联的日历。
@return 与此日期/时间格式器关联的日历。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DateFormat.setNumberFormat(NumberFormat newNumberFormat)
<!-- END KEY -->
<!-- BEGIN DATA -->
允许用户设置数字格式器。
@param newNumberFormat 给定的新 NumberFormat。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.NumberFormat java.text.DateFormat.getNumberFormat()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此日期/时间格式器用于格式化和解析时间的数字格式器。
@return 此日期/时间格式器使用的数字格式器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DateFormat.setTimeZone(TimeZone zone)
<!-- END KEY -->
<!-- BEGIN DATA -->
为此 DateFormat 对象的日历设置时区。
@param zone 给定的新时区。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.TimeZone java.text.DateFormat.getTimeZone()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取时区。
@return 与此 DateFormat 的日历相关联的时区。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DateFormat.setLenient(boolean lenient)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定日期/时间解析是否不严格。进行不严格解析时，解析程序可以使用启发式的方法来解释与此对象的格式不精确匹配的输入。进行严格解析时，输入必须匹配此对象的格式。
@param lenient 为 true 时，解析过程是不严格的
@see java.util.Calendar#setLenient

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.text.DateFormat.isLenient()
<!-- END KEY -->
<!-- BEGIN DATA -->
判断日期/时间解析是否为不严格的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.text.DateFormat.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 hashCode

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.text.DateFormat.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 equals

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.text.DateFormat.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 Cloneable

<!-- END DATA -->
