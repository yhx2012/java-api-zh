<!-- BEGIN KEY -->
public class java.text.MessageFormat extends java.text.Format
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>MessageFormat</code> 提供了以与语言无关方式生成连接消息的方式。使用此方法构造向终端用户显示的消息。

 <p>
<code>MessageFormat</code> 获取一组对象，格式化这些对象，然后将格式化后的字符串插入到模式中的适当位置。

 <p>
<strong>注：</strong><code>MessageFormat</code> 不同于其他 <code>Format</code> 类，因为 <code>MessageFormat</code> 对象是用其构造方法之一创建的（而不是使用 <code>getInstance</code> 样式的工厂方法创建的）。工厂方法不是必需的，因为 <code>MessageFormat</code> 本身不实现特定于语言环境的行为。特定于语言环境的行为是由所提供的模式和用于已插入参数的子格式来定义的。

<h4><a name="patterns">模式及其解释</a></h4>

<code>MessageFormat</code> 使用以下形式的模式：
 <blockquote><pre>
 <i>MessageFormatPattern:</i>
         <i>String</i>
         <i>MessageFormatPattern</i> <i>FormatElement</i> <i>String</i>

 <i>FormatElement:</i>
         { <i>ArgumentIndex</i> }
         { <i>ArgumentIndex</i> , <i>FormatType</i> }
         { <i>ArgumentIndex</i> , <i>FormatType</i> , <i>FormatStyle</i> }

 <i>FormatType: one of </i>
         number date time choice

 <i>FormatStyle:</i>
         short
         medium
         long
         full
         integer
         currency
         percent
         <i>SubformatPattern</i>

 <i>String:</i>
         <i>StringPart<sub>opt</sub></i>
         <i>String</i> <i>StringPart</i>

 <i>StringPart:</i>
         ''
         ' <i>QuotedString</i> '
         <i>UnquotedString</i>

 <i>SubformatPattern:</i>
         <i>SubformatPatternPart<sub>opt</sub></i>
         <i>SubformatPattern</i> <i>SubformatPatternPart</i>

 <i>SubFormatPatternPart:</i>
         ' <i>QuotedPattern</i> '
         <i>UnquotedPattern</i>
 </pre></blockquote>

 <p>
在 <i>String</i> 中，<code>&quot;''&quot;</code> 表示单引号。<i>QuotedString</i> 可以包含除单引号之外的任意字符；围绕的单引号被移除。<i>UnquotedString</i> 可以包含除单引号和左花括号之外的任意字符。因此，格式化后消息字符串为 &quot;'{0}'&quot; 的字符串可以写作 <code>&quot;'''{'0}''&quot;</code> 或 <code>&quot;'''{0}'''&quot;</code>。
 <p>
在 <i>SubformatPattern</i> 中，应用了不同的规则。<i>QuotedPattern</i> 可包含除单引号之外的任意字符，但<strong>不</strong> 移除围绕的单引号，因此它们可以由子格式解释。例如，<code>&quot;{1,number,$'#',##}&quot;</code> 将产生一个带井号的数字格式，结果如：&quot;$#31,45&quot;&#x3002; <i>UnquotedPattern</i> 可以包含除单引号之外的任意字符，但其中的花括号必须成对出现。例如，<code>&quot;ab {0} de&quot;</code> 和 <code>&quot;ab '}' de&quot;</code> 是有效的子格式模式，而 <code>&quot;ab {0'}' de&quot;</code> 和 <code>&quot;ab } de&quot;</code> 则是无效的。
 <p>
<dl><dt><b>警告：</b><dd>不过，在消息格式模式中使用引号的规则在一定程度上显示混乱。尤其是，本地化程序并不总是清楚单引号是否需要成对。要确保通知本地化程序关于规则的信息，并告诉它们（例如，通过使用资源包源文件中的注释）MessageFormat 将处理哪些字符串。注意，本地化程序在转换后的字符串中必须使用单引号，其中原始版本不包含单引号。
 </dl>
 <p>
<i>ArgumentIndex</i> 值是使用数字 '0' 到 '9' 表示的非负整数，它表示传递给 <code>format</code> 方法的 <code>arguments</code> 数组的一个索引，或者表示由 <code>parse</code> 方法返回的结果数组的一个索引。
 <p>
<i>FormatType</i> 和 <i>FormatStyle</i> 值用来创建格式元素的 <code>Format</code> 实例。下表显示了值如何映射到 Format 实例。表中没有显示的组合是非法的。<i>SubformatPattern</i> 必须是所使用的 Format 子类的一个有效的模式字符串。
 <p>
 <table border=1 summary="Shows how FormatType and FormatStyle values map to Format instances">
    <tr>
<th id="ft">格式类型
<th id="fs">格式样式
<th id="sc">创建的子格式
    <tr>
<td headers="ft"><i>无</i>
<td headers="fs"><i>无</i>
       <td headers="sc"><code>null</code>
    <tr>
       <td headers="ft" rowspan=5><code>number</code>
<td headers="fs"><i>无</i>
       <td headers="sc"><code>NumberFormat.getInstance(getLocale())</code>
    <tr>
       <td headers="fs"><code>integer</code>
       <td headers="sc"><code>NumberFormat.getIntegerInstance(getLocale())</code>
    <tr>
       <td headers="fs"><code>currency</code>
       <td headers="sc"><code>NumberFormat.getCurrencyInstance(getLocale())</code>
    <tr>
       <td headers="fs"><code>percent</code>
       <td headers="sc"><code>NumberFormat.getPercentInstance(getLocale())</code>
    <tr>
       <td headers="fs"><i>SubformatPattern</i>
       <td headers="sc"><code>new DecimalFormat(subformatPattern, DecimalFormatSymbols.getInstance(getLocale()))</code>
    <tr>
       <td headers="ft" rowspan=6><code>date</code>
<td headers="fs"><i>无</i>
       <td headers="sc"><code>DateFormat.getDateInstance(DateFormat.DEFAULT, getLocale())</code>
    <tr>
       <td headers="fs"><code>short</code>
       <td headers="sc"><code>DateFormat.getDateInstance(DateFormat.SHORT, getLocale())</code>
    <tr>
       <td headers="fs"><code>medium</code>
       <td headers="sc"><code>DateFormat.getDateInstance(DateFormat.DEFAULT, getLocale())</code>
    <tr>
       <td headers="fs"><code>long</code>
       <td headers="sc"><code>DateFormat.getDateInstance(DateFormat.LONG, getLocale())</code>
    <tr>
       <td headers="fs"><code>full</code>
       <td headers="sc"><code>DateFormat.getDateInstance(DateFormat.FULL, getLocale())</code>
    <tr>
       <td headers="fs"><i>SubformatPattern</i>
       <td headers="sc"><code>new SimpleDateFormat(subformatPattern, getLocale()) </code>
    <tr>
       <td headers="ft" rowspan=6><code>time</code>
<td headers="fs"><i>无</i>
       <td headers="sc"><code>DateFormat.getTimeInstance(DateFormat.DEFAULT, getLocale())</code>
    <tr>
       <td headers="fs"><code>short</code>
       <td headers="sc"><code>DateFormat.getTimeInstance(DateFormat.SHORT, getLocale())</code>
    <tr>
       <td headers="fs"><code>medium</code>
       <td headers="sc"><code>DateFormat.getTimeInstance(DateFormat.DEFAULT, getLocale())</code>
    <tr>
       <td headers="fs"><code>long</code>
       <td headers="sc"><code>DateFormat.getTimeInstance(DateFormat.LONG, getLocale())</code>
    <tr>
       <td headers="fs"><code>full</code>
       <td headers="sc"><code>DateFormat.getTimeInstance(DateFormat.FULL, getLocale())</code>
    <tr>
       <td headers="fs"><i>SubformatPattern</i>
       <td headers="sc"><code>new SimpleDateFormat(subformatPattern, getLocale()) </code>
    <tr>
       <td headers="ft"><code>choice</code>
       <td headers="fs"><i>SubformatPattern</i>
       <td headers="sc"><code>new ChoiceFormat(subformatPattern)</code>
 </table>
 <p>

<h4>用法信息</h4>

 <p>
下面给出一些用法例子。当然，在实际的国际化程序中，消息格式模式和其他静态字符串将从资源包中获取。其他参数在运行时动态确定。
 <p>
第一个例子使用静态的方法 <code>MessageFormat.format</code>，它在内部创建一个只使用一次的 <code>MessageFormat</code>：
 <blockquote><pre>
 int planet = 7;
 String event = &quot;a disturbance in the Force&quot;;

 String result = MessageFormat.format(
     &quot;At {1,time} on {1,date}, there was {2} on planet {0,number,integer}.&quot;,
     planet, new Date(), event);
 </pre></blockquote>
输出为：
 <blockquote><pre>
 At 12:30 PM on Jul 3, 2053, there was a disturbance in the Force on planet 7.
 </pre></blockquote>

 <p>
下面的例子创建了一个可以重复使用的 <code>MessageFormat</code> 实例：
 <blockquote><pre>
 int fileCount = 1273;
 String diskName = &quot;MyDisk&quot;;
 Object[] testArgs = {new Long(fileCount), diskName};

 MessageFormat form = new MessageFormat(
     &quot;The disk \&quot;{1}\&quot; contains {0} file(s).&quot;);

 System.out.println(form.format(testArgs));
 </pre></blockquote>
不同 <code>fileCount</code> 值的输出：
 <blockquote><pre>
 The disk &quot;MyDisk&quot; contains 0 file(s).
 The disk &quot;MyDisk&quot; contains 1 file(s).
 The disk &quot;MyDisk&quot; contains 1,273 file(s).
 </pre></blockquote>

 <p>
对于更复杂的模式，可以使用 <code>ChoiceFormat</code> 来生成正确的单数和复数形式：
 <blockquote><pre>
 MessageFormat form = new MessageFormat(&quot;The disk \&quot;{1}\&quot; contains {0}.&quot;);
 double[] filelimits = {0,1,2};
 String[] filepart = {&quot;no files&quot;,&quot;one file&quot;,&quot;{0,number} files&quot;};
 ChoiceFormat fileform = new ChoiceFormat(filelimits, filepart);
 form.setFormatByArgumentIndex(0, fileform);

 int fileCount = 1273;
 String diskName = &quot;MyDisk&quot;;
 Object[] testArgs = {new Long(fileCount), diskName};

 System.out.println(form.format(testArgs));
 </pre></blockquote>
不同的 <code>fileCount</code> 值的输出：
 <blockquote><pre>
 The disk &quot;MyDisk&quot; contains no files.
 The disk &quot;MyDisk&quot; contains one file.
 The disk &quot;MyDisk&quot; contains 1,273 files.
 </pre></blockquote>

 <p>
如上例所示，可以以编程方式来创建 <code>ChoiceFormat</code>，或使用模式创建。有关更多信息，请参阅 {@link ChoiceFormat}。
 <blockquote><pre>
 form.applyPattern(
    &quot;There {0,choice,0#are no files|1#is one file|1&lt;are {0,number,integer} files}.&quot;);
 </pre></blockquote>

 <p>
<strong>注：</strong>从上面的例子可以看到，由 <code>MessageFormat</code> 中的 <code>ChoiceFormat</code> 所生成的字符串要进行特殊处理；'{' 的出现用来指示子格式，并导致递归。如果 <code>MessageFormat</code> 和 <code>ChoiceFormat</code> 都是以编程方式创建的（而不是使用字符串模式），那么要注意不要生成对其自身进行递归的格式，这将导致无限循环。
 <p>
当一个参数在字符串中被多次解析时，最后的匹配将是解析的最终结果。例如，
 <blockquote><pre>
 MessageFormat mf = new MessageFormat(&quot;{0,number,#.##}, {0,number,#.#}&quot;);
 Object[] objs = {new Double(3.1415)};
 String result = mf.format( objs );
 // result now equals &quot;3.14, 3.1&quot;
 objs = null;
 objs = mf.parse(result, new ParsePosition(0));
 // objs now equals {new Double(3.1)}
 </pre></blockquote>

 <p>
同样，使用包含同一参数多个匹配项的模式对 MessageFormat 对象进行解析时将返回最后的匹配。例如，
 <blockquote><pre>
 MessageFormat mf = new MessageFormat(&quot;{0}, {0}, {0}&quot;);
 String forParsing = &quot;x, y, z&quot;;
 Object[] objs = mf.parse(forParsing, new ParsePosition(0));
 // result now equals {new String(&quot;z&quot;)}
 </pre></blockquote>

<h4><a name="synchronization">同步</a></h4>

 <p>
消息格式不是同步的。建议为每个线程创建独立的格式实例。如果多个线程同时访问一个格式，则它必须是外部同步的。

@see          java.util.Locale
@see          Format
@see          NumberFormat
@see          DecimalFormat
@see          ChoiceFormat
@version      1.56, 12/19/03
@author       Mark Davis

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.util.Locale java.text.MessageFormat.locale
<!-- END KEY -->
<!-- BEGIN DATA -->
用于格式化数字和日期的语言环境。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.text.MessageFormat.pattern
<!-- END KEY -->
<!-- BEGIN DATA -->
要插入格式化后的值的字符串。换句话说，这是对所有取出的 {} 表达式进行构造所提供的方法。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.text.Format[] java.text.MessageFormat.formats
<!-- END KEY -->
<!-- BEGIN DATA -->
格式器数组，它们用于对参数进行格式化。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int[] java.text.MessageFormat.offsets
<!-- END KEY -->
<!-- BEGIN DATA -->
每个参数格式化结果要插入到模式中的位置。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int[] java.text.MessageFormat.argumentNumbers
<!-- END KEY -->
<!-- BEGIN DATA -->
对应于每个格式器的参数个数。（格式器按照它们在模式中出现的顺序进行存储，而不是按照参数被指定的顺序）。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.text.MessageFormat.maxOffset
<!-- END KEY -->
<!-- BEGIN DATA -->
比 <code>offsets</code> 中的条目数少 1。也可以看作正被使用的 <code>offsets</code> 中的最高数字的元素的索引。所有这些数组必须具有与 <code>offsets</code> 相同个数的元素，因此该变量能够告知我们数组中有多少个条目。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.MessageFormat(String pattern)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造默认语言环境和指定模式的 MessageFormat。构造方法首先设置语言环境，然后解析模式，并为其包含的格式元素创建子格式列表。在<a href="#patterns">类描述</a>中指定了模式及其解释。

@param pattern 此消息格式的模式
@exception IllegalArgumentException 如果模式无效

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.MessageFormat(String pattern, Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造指定语言环境和模式的 MessageFormat。构造方法首先设置语言环境，然后解析模式，并为其包含的格式元素创建子格式列表。在<a href="#patterns">类描述</a>中指定了模式及其解释。

@param pattern 此消息格式的模式
@param locale 此消息格式的语言环境
@exception IllegalArgumentException 如果模式无效
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.MessageFormat.setLocale(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置创建或比较子格式时要使用的语言环境。 这将影响对下面方法的后续调用
 <ul>
 <li> 对 {@link #applyPattern applyPattern} 和 {@link #toPattern toPattern} 方法的后续调用，如果格式元素指定了格式类型并且因此具有在 <code>applyPattern</code> 方法中创建的子格式，以及
 <li> 对 <code>format</code> 和 {@link #formatToCharacterIterator formatToCharacterIterator} 方法的后续调用，如果格式元素未指定格式类型并且因此具有在格式化方法中创建的子格式。
 </ul>
 不影响已经创建的子格式。

@param locale 创建或比较子格式时所使用的语言环境

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Locale java.text.MessageFormat.getLocale()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取创建或比较子格式时所使用的语言环境。

@return 创建或比较子格式时所使用的语言环境

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.MessageFormat.applyPattern(String pattern)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此消息格式所使用的模式。此方法对模式进行解析，并为其所包含的格式元素创建子格式列表。在<a href="#patterns">类描述</a>中指定了模式及其解释。
 
@param pattern 此消息格式的模式
@exception IllegalArgumentException 如果模式无效

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.text.MessageFormat.toPattern()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示消息格式当前状态的模式。字符串是从内部信息创建的，因此不需要与以前应用的模式相等。 

@return 表示消息格式当前状态的模式

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.MessageFormat.setFormatsByArgumentIndex(java.text.Format[] newFormats)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置传递给 <code>format</code> 方法或从 <code>parse</code> 方法返回的值使用的格式。<code>newFormats</code> 中元素的索引对应于以前设置的模式字符串中使用的参数索引。因此，<code>newFormats</code> 中的格式顺序对应于传递给 <code>format</code> 方法的 <code>arguments</code> 数组或从 <code>parse</code> 方法返回的结果数组中的元素顺序。
 <p>
如果一个参数索引用于模式字符串中的多个格式元素，那么对应的新的格式将用于所有这样的格式元素。如果参数索引不用于模式字符串的任何一个格式元素，那么对应的新的格式将被忽略。如果提供的格式少于所需的格式，那么只替换其参数索引小于 <code>newFormats.length</code> 的格式。

@param newFormats 要使用的新格式
@exception NullPointerException 如果 <code>newFormats</code> 为 null
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.MessageFormat.setFormats(java.text.Format[] newFormats)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于以前所设置的模式字符串中格式元素的格式。<code>newFormats</code> 中的格式顺序对应于模式字符串中的格式元素的顺序。
 <p>
如果提供的格式多于模式字符串所需的格式，那么剩余的格式将被忽略。如果提供的格式少于所需的格式，那么只替换前 <code>newFormats.length</code> 个格式。
 <p>
由于在本地化期间，模式字符串中的格式元素顺序经常发生变化，因此最好使用 {@link #setFormatsByArgumentIndex setFormatsByArgumentIndex} 方法，此方法假定格式顺序对应于传递给 <code>format</code> 方法或从 <code>parse</code> 方法返回的结果数组的 <code>arguments</code> 数组中的元素顺序。

@param newFormats 要使用的新格式
@exception NullPointerException 如果 <code>newFormats</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.MessageFormat.setFormatByArgumentIndex(int argumentIndex, Format newFormat)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于以前所设置的模式字符串中格式元素的格式，其中以前的模式字符串是用给定的参数索引设置的。参数索引是格式元素定义的一部分，它表示传递给 <code>format</code> 方法或从 <code>parse</code> 方法返回的结果数组的 <code>arguments</code> 数组的索引。
 <p>
如果参数索引用于模式字符串中的多个格式元素，那么新的格式将用于所有这样的格式元素。如果参数索引没有用于模式字符串的任何格式元素，那么新的格式将被忽略。

@param argumentIndex 要用于新的格式的参数索引
@param newFormat 要使用的新格式
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.MessageFormat.setFormat(int formatElementIndex, Format newFormat)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用在以前设置的模式字符串中给定的格式元素索引来设置格式元素使用的格式。格式元素索引是从模式字符串起始位置开始计数的、从 0 开始的数字。
 <p>
由于在本地化期间，模式字符串中的格式元素的顺序经常发生变化，因此最好使用 {@link #setFormatByArgumentIndex setFormatByArgumentIndex} 方法，此方法根据它们所指定的参数索引来访问格式元素。

@param formatElementIndex 模式中的格式元素的索引
@param newFormat 要用于指定格式元素的格式
@exception ArrayIndexOutOfBoundsException 如果 formatElementIndex 等于或大于模式字符串中格式元素的个数

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.Format[] java.text.MessageFormat.getFormatsByArgumentIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取传递给 <code>format</code> 方法或从 <code>parse</code> 方法返回的值的格式。返回的数组中的元素的索引对应于以前设置模式字符串中所使用的参数索引。因此，返回的数组中的格式顺序对应于传递给 <code>format</code> 方法或从 <code>parse</code> 方法返回的 <code>arguments</code> 数组中的元素顺序。
 <p>
如果一个参数索引用于模式字符串中的多个格式元素，那么在数组中将返回用于最后一个这样的元素的格式。如果参数索引不用于模式字符串中的任何一个格式元素，那么在数组中将返回 null。

@return 用于模式中参数的格式
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.Format[] java.text.MessageFormat.getFormats()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取用于以前所设置的模式字符串中格式元素的格式。返回的数组中的格式顺序对应于模式字符串中的格式元素顺序。
 <p>
由于在本地化期间，模式字符串中的格式元素的顺序经常发生变化，因此最好使用 {@link #getFormatsByArgumentIndex getFormatsByArgumentIndex} 方法，此方法假定格式的顺序对应于传递给 <code>format</code> 方法的 <code>arguments</code> 数组或从 <code>parse</code> 方法返回的结果数组中的元素顺序。

@return 用于模式中格式元素的格式

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.StringBuffer java.text.MessageFormat.format(java.lang.Object[] arguments, StringBuffer result, FieldPosition pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
格式化一个对象数组，并将 <code>MessageFormat</code> 的模式添加到所提供的 <code>StringBuffer</code>，用格式化后的对象替换格式元素。
 <p>
替换个别格式元素的文本从格式元素和位于格式元素参数索引处的 <code>arguments</code> 元素的当前子格式中派生出来，如下表中第一个匹配行所示。如果 <code>arguments</code> 为 <code>null</code>，或者元素的个数少于 argumentIndex+1，则参数是<i>不可用的</i>。
 <p>
 <table border=1 summary="Examples of subformat,argument,and formatted text">
    <tr>
<th>子格式
<th>参数
<th>格式化文本
    <tr>
<td><i>所有</i>
<td><i>不可用</i>
       <td><code>&quot;{&quot; + argumentIndex + &quot;}&quot;</code>
    <tr>
<td><i>所有</i>
       <td><code>null</code>
       <td><code>&quot;null&quot;</code>
    <tr>
       <td><code>instanceof ChoiceFormat</code>
<td><i>所有</i>
       <td><code>subformat.format(argument).indexOf('{') &gt;= 0 ?<br> (new MessageFormat(subformat.format(argument), getLocale())).format(argument) : subformat.format(argument)</code>
    <tr>
       <td><code>!= null</code>
<td><i>所有</i>
       <td><code>subformat.format(argument)</code>
    <tr>
       <td><code>null</code>
       <td><code>instanceof Number</code>
       <td><code>NumberFormat.getInstance(getLocale()).format(argument)</code>
    <tr>
       <td><code>null</code>
       <td><code>instanceof Date</code>
       <td><code>DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, getLocale()).format(argument)</code>
    <tr>
       <td><code>null</code>
       <td><code>instanceof String</code>
       <td><code>argument</code>
    <tr>
       <td><code>null</code>
<td><i>所有</i>
       <td><code>argument.toString()</code>
 </table>
 <p>
如果 <code>pos</code> 不为 null，且引用 <code>Field.ARGUMENT</code>，那么将返回第一个格式化字符串的位置。

@param arguments 要被格式化和替换的对象数组。
@param result 添加文本的位置。
@param pos 输入时：如果需要，是一个对齐字段。输出时：为对齐字段的偏移量。
@exception IllegalArgumentException 如果 <code>arguments</code> 数组中的参数不是使用该参数的格式元素期望的类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.text.MessageFormat.format(String pattern, java.lang.Object[] arguments)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有给定模式的 MessageFormat，并用它来格式化给定的参数。这等效于
 <blockquote>
     <code>(new {@link #MessageFormat(String) MessageFormat}(pattern)).{@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}(arguments, new StringBuffer(), null).toString()</code>
 </blockquote>

@exception IllegalArgumentException 如果模式无效，或者 <code>arguments</code> 数组中的参数不是使用该参数的格式元素期望的类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.StringBuffer java.text.MessageFormat.format(Object arguments, StringBuffer result, FieldPosition pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
格式化一个对象数组，并将 <code>MessageFormat</code> 的模式添加到所提供的 <code>StringBuffer</code>，用格式化后的对象替换格式元素。这等效于
 <blockquote>
     <code>{@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}((Object[]) arguments, result, pos)</code>
 </blockquote>

@param arguments 要被格式化和替换的对象数组。
@param result 添加文本的位置。
@param pos 输入时：如果需要，是一个对齐字段。输出时：为对齐字段的偏移量。
@exception IllegalArgumentException 如果 <code>arguments</code> 数组中的参数不是使用该参数的格式元素期望的类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.AttributedCharacterIterator java.text.MessageFormat.formatToCharacterIterator(Object arguments)
<!-- END KEY -->
<!-- BEGIN DATA -->
格式化一个对象数组，并将它们插入 <code>MessageFormat</code> 的模式中，生成一个 <code>AttributedCharacterIterator</code>。可以使用返回的 <code>AttributedCharacterIterator</code> 来生成得到的字符串，以及确定关于得到字符串的信息。
 <p>
返回的 <code>AttributedCharacterIterator</code> 的文本与以下语句返回的结果相同
 <blockquote>
     <code>{@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}(arguments, new StringBuffer(), null).toString()</code>
 </blockquote>
 <p>
此外，<code>AttributedCharacterIterator</code> 至少包含一些属性，指示从 <code>arguments</code> 数组的某个参数生成文本的位置。这些属性的键是 <code>MessageFormat.Field</code> 类型的，其值是 <code>Integer</code> 对象，指示参数的 <code>arguments</code> 数组中的索引，其中文本是从此索引生成的。
 <p>
 <code>MessageFormat</code> 所使用的底层 <code>Format</code> 实例的属性/值也将存放在得到的 <code>AttributedCharacterIterator</code> 中。这不仅允许查找参数被存放在得到的 String 中的位置，而且允许查找它依次包含哪些字段。

@param arguments 要被格式化和替换的对象数组。
@return 描述格式化后的值的 AttributedCharacterIterator。
@exception NullPointerException 如果 <code>arguments</code> 为 null。
@exception IllegalArgumentException 如果 <code>arguments</code> 数组中的参数不是使用该参数的格式元素期望的类型。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.text.MessageFormat.parse(String source, ParsePosition pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
解析字符串。

<p>警告：在许多情况下解析可能失败。例如：
 <ul>
<li>如果某个参数未出现在模式中。
<li>如果丢失了参数的格式信息，例如对于一个格式化选项，其中一个大数格式化为 &quot;many&quot;。
<li>尚未处理递归（其中替换后的字符串包含 {n} 引用）。
<li>当解析的某个部分不明确时，将不能总找到一个匹配（或者正确的匹配）。例如，如果模式 &quot;{1},{2}&quot; 用于字符串参数 {&quot;a,b&quot;, &quot;c&quot;}，它将格式化为 &quot;a,b,c&quot;。当解析结果时，它将返回 {&quot;a&quot;, &quot;b,c&quot;}。
<li>如果字符串中的参数被解析多次，那么将保留最后一次的解析结果。
 </ul>
当解析失败时，使用 ParsePosition.getErrorIndex() 来查找字符串的哪个位置导致了解析失败。返回的错误索引是要用来与字符串比较的子模式的起始偏移量。例如，如果解析的字符串 &quot;AAA {0} BBB&quot; 与模式 &quot;AAD {0} BBB&quot; 进行比较，则错误索引为 0。当发生错误时，对此方法的调用将返回 null。如果源为 null，则返回一个空数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.text.MessageFormat.parse(String source) throws java.text.ParseException
<!-- END KEY -->
<!-- BEGIN DATA -->
从给定字符串的开始位置解析文本，以生成一个对象数组。此方法不可以使用给定字符串的全部文本。
 <p>
有关消息解析的更多信息，请参阅 {@link #parse(String, ParsePosition)} 方法。

@param source 必须解析其开头的 <code>String</code>。
@return 从字符串进行解析的 <code>Object</code> 数组。
@exception ParseException 如果无法解析指定字符串的开头。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.text.MessageFormat.parseObject(String source, ParsePosition pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
解析字符串文本，生成一个对象数组。
 <p>
此方法试图解析从 <code>pos</code> 给定的索引处开始的文本。如果解析成功，则将 <code>pos</code> 的索引更新到所解析的最后一个字符后面的索引（不必对直到字符串结尾的所有字符进行解析），并返回解析后的对象数组。更新的 <code>pos</code> 可以用来指示下次调用此方法的起始点。如果发生错误，则不更改 <code>pos</code> 的索引，并将 <code>pos</code> 的错误索引设置为发生错误处的字符索引，并且返回 null。
 <p>
有关消息解析的更多信息，请参阅 {@link #parse(String, ParsePosition)} 方法。

@param source 应该解析其中一部分的 <code>String</code>。
@param pos 具有以上所述的索引和错误索引信息的 <code>ParsePosition</code> 对象。
@return 从字符串进行解析的 <code>Object</code> 数组。如果发生错误，则返回 null。
@exception NullPointerException 如果 <code>pos</code> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.text.MessageFormat.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回此对象的一个副本。

@return 此实例的一个副本。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.text.MessageFormat.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
两个消息格式对象之间的相等性比较

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.text.MessageFormat.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
生成此消息格式对象的哈希码。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.text.MessageFormat.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从输入流中读取一个对象后，进行简单的验证以维护类常量。
@throws InvalidObjectException 如果从流读入的对象无效。

<!-- END DATA -->
