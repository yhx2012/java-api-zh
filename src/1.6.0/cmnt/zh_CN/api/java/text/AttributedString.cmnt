<!-- BEGIN KEY -->
public class java.text.AttributedString extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
AttributedString 保存文本及相关属性信息。在文本 reader 希望通过 AttributedCharacterIterator 接口访问属性文本的情况下，它可用于存储实际数据。

 <p>
属性是一个键/值对，由键来标识。给定字符上的两个属性不能有相同的键。

<p>属性的值是不变的，或者必须由客户端或存储来更换。它们始终由引用来传递，但是不进行复制。

@see AttributedCharacterIterator
@see Annotation
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.AttributedString(String text)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带给定文本的 AttributedString 实例。
@param text 此属性字符串的文本。
@exception NullPointerException 如果 <code>text</code> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.AttributedString(String text, java.util.Map<? extends java.text.AttributedCharacterIterator.Attribute, ?> attributes)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带给定文本和属性的 AttributedString。
@param text 此属性字符串的文本。
@param attributes 应用于整个字符串的属性。
@exception NullPointerException 如果 <code>text</code> 或 <code>attributes</code> 为 null。
@exception IllegalArgumentException 如果文本长度为 0 且属性参数不是一个空 Map（属性不能应用于 0 长度范围文本）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.AttributedString(AttributedCharacterIterator text)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带有 AttributedCharacterIterator 表示的给定属性文本的 AttributedString。
@param text 此属性字符串的文本。
@exception NullPointerException 如果 <code>text</code> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.AttributedString(AttributedCharacterIterator text, int beginIndex, int endIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带有 AttributedCharacterIterator 表示的给定属性文本子范围的 AttributedString。如果给定的范围产生一个空文本，所有的属性将被丢弃。注意，对于初始属性范围的子范围，Annotation 对象包装的任何属性都被丢弃。

@param text 此属性字符串的文本。
@param beginIndex 该范围的第一个字符的索引。
@param endIndex 范围最后一个字符之后紧邻字符的索引。
@exception NullPointerException 如果 <code>text</code> 为 null。
@exception IllegalArgumentException 如果 beginIndex 和 endIndex 给出的子范围超出文本范围。
@see java.text.Annotation

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.AttributedString(AttributedCharacterIterator text, int beginIndex, int endIndex, java.text.AttributedCharacterIterator.Attribute[] attributes)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有 AttributedCharacterIterator 表示的给定属性文本子范围的 AttributedString。只有属性与给定的属性匹配时才被合并进该实例。如果指定的范围产生一个空文本，所有的属性将被丢弃。注意，对于初始属性范围的子范围，Annotation 对象包装的任何属性都被丢弃。

@param text 此属性字符串的文本。
@param beginIndex 该范围的第一个字符的索引。
@param endIndex 范围最后一个字符之后紧邻字符的索引。
@param attributes 指定要从文本中提取出来的属性。如果指定为 null，则用到所有可用属性。
@exception NullPointerException 如果 <code>text</code> 或 <code>attributes</code> 为 null。
@exception IllegalArgumentException 如果 beginIndex 和 endIndex 给出的子范围超出文本范围。
@see java.text.Annotation

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.AttributedString.addAttribute(AttributedCharacterIterator.Attribute attribute, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个属性添加到整个字符串中。
@param attribute 属性键
@param value 属性值；可以为 null
@exception NullPointerException 如果 <code>attribute</code> 为 null。
@exception IllegalArgumentException 如果 AttributedString 长度为 0（属性不能应用于 0 长度范围文本）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.AttributedString.addAttribute(AttributedCharacterIterator.Attribute attribute, Object value, int beginIndex, int endIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个属性添加到字符串的子范围。
@param attribute 属性键
@param value 属性值。可以为 null。
@param beginIndex 该范围的第一个字符的索引。
@param endIndex 范围最后一个字符之后紧邻字符的索引。
@exception NullPointerException 如果 <code>attribute</code> 为 null。
@exception IllegalArgumentException 如果 beginIndex 小于 0，endIndex 大于字符串的长度，或者 beginIndex 和 endIndex 一起未定义字符串的非空子范围。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.AttributedString.addAttributes(java.util.Map<? extends java.text.AttributedCharacterIterator.Attribute, ?> attributes, int beginIndex, int endIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
将属性集添加到字符串的子范围。
@param attributes 要添加到字符串的属性。
@param beginIndex 该范围的第一个字符的索引。
@param endIndex 范围最后一个字符之后紧邻字符的索引。
@exception NullPointerException 如果 <code>attribute</code> 为 null。
@exception IllegalArgumentException 如果 beginIndex 小于 0，endIndex 大于字符串的长度，或者 beginIndex 和 endIndex 一起未定义字符串的非空子范围，且属性参数不是一个空 Map。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.AttributedCharacterIterator java.text.AttributedString.getIterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 AttributedCharacterIterator 实例，提供对整个字符串内容的访问。

@return 提供访问文本及其属性的迭代器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.AttributedCharacterIterator java.text.AttributedString.getIterator(java.text.AttributedCharacterIterator.Attribute[] attributes)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 AttributedCharacterIterator 实例，提供对字符串选定内容的访问。实现者不必让没有列于属性中的属性信息通过迭代器可访问。如果列表为 null，则应该让所有可用的属性信息都可访问。

@param attributes 客户端感兴趣的属性列表
@return 提供访问整个文本及其选定属性的迭代器

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.AttributedCharacterIterator java.text.AttributedString.getIterator(java.text.AttributedCharacterIterator.Attribute[] attributes, int beginIndex, int endIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 AttributedCharacterIterator 实例，提供对字符串选定内容的访问。实现者不必让没有列于属性中的属性信息通过迭代器可访问。如果列表为 null，则应该让所有可用的属性信息都可访问。

@param attributes 客户端感兴趣的属性列表
@param beginIndex 第一个字符的索引
@param endIndex 最后一个字符之后紧邻字符的索引
@return  提供访问文本及其属性的迭代器
@exception IllegalArgumentException 如果 beginIndex 小于 0，endIndex 大于字符串的长度，或者 beginIndex 大于 endIndex。

<!-- END DATA -->
