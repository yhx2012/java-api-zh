<!-- BEGIN KEY -->
public final class java.lang.Short extends java.lang.Number implements java.lang.Comparable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Short</code> 类在对象中包装基本类型 <code>short</code> 的值。一个 <code>Short</code> 类型的对象只包含一个 <code>short</code> 类型的字段。

<p>

另外，该类提供了多个方法，可以将 <code>short</code> 转换为 <code>String</code>，将 <code>String</code> 转换为 <code>short</code>，同时还提供了其他一些处理 <code>short</code> 时有用的常量和方法。

@author  Nakul Saraiya
@version 1.43, 05/11/04
@see     java.lang.Number
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short java.lang.Short.MIN_VALUE
<!-- END KEY -->
<!-- BEGIN DATA -->
保存 <code>short</code> 可取的最小值的常量，最小值为 -2<sup>15</sup>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short java.lang.Short.MAX_VALUE
<!-- END KEY -->
<!-- BEGIN DATA -->
保存 <code>short</code> 可取的最大值的常量，最大值为 2<sup>15</sup>-1。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Class<java.lang.Short> java.lang.Short.TYPE
<!-- END KEY -->
<!-- BEGIN DATA -->
表示基本类型 <code>short</code> 的 <code>Class</code> 实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.Short.SIZE
<!-- END KEY -->
<!-- BEGIN DATA -->
用来以二进制补码形式表示 <tt>short</tt> 值的位数。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private final short java.lang.Short.value
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Short</code> 值。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Short(short value)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新分配的 <code>Short</code> 对象，用来表示指定的 <code>short</code> 值。

@param value<code>Short</code> 所表示的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Short(String s) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新分配的 <code>Short</code> 对象，用来表示 <code>String</code> 参数所指示的 <code>short</code> 值。将字符串转换为 <code>short</code> 值，转换方式与基数为 10 的 <code>parseShort</code> 方法所用的方式完全相同。

@param s		要转换为 <code>Short</code> 的 <code>String</code>
@exception	NumberFormatException 如果 <code>String</code> 不包含可解析的 <code>short</code>。
@see        java.lang.Short#parseShort(java.lang.String, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.Short.toString(short s)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示指定 <code>short</code> 的一个新 <code>String</code> 对象。假定用十进制表示。

@param s 所要转换的 <code>short</code>
@return 表示指定 <code>short</code> 的字符串
@see java.lang.Integer#toString(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static short java.lang.Short.parseShort(String s) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符串参数解析为有符号的十进制 <code>short</code>。该字符串中的字符必须都是十进制数字，除非第一个字符是表示负值的 ASCII 符号中的负号 <code>'-'</code> (<code>'\u002D'</code>)。返回得到的 <code>short</code> 值，此值与用该参数和基数 10 作为参数的 {@link #parseShort(java.lang.String, int)} 方法得到的值相同。

@param s		包含要解析的 <code>short</code> 表示形式的 <code>String</code>
@return         参数（十进制）表示的 <code>short</code> 值。
@exception	NumberFormatException 如果该字符串不包含可解析的 <code>short</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static short java.lang.Short.parseShort(String s, int radix) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符串参数解析为由第二个参数指定的基数中的有符号的 <code>short</code>。该字符串中的字符必须都是指定基数（这取决于 {@link java.lang.Character#digit(char, int)} 是否返回非负值）的数字，除非第一个字符是表示负值的 ASCII 符号中的负号 <code>&ldquo;-&rdquo;</code> (<code>'\u002D'</code>)。返回得到的 <code>byte</code> 值。
<p>
如果出现以下情形之一，则抛出 <code>NumberFormatException</code> 类型的异常：
<ul>
<li> 第一个参数是 <code>null</code> 或零长度的字符串。

<li> 基数小于 {@link java.lang.Character#MIN_RADIX} 或大于 {@link java.lang.Character#MAX_RADIX}。

<li> 除了在字符串长度超过 1 的情况下第一个字符可能是负号 <code>&ldquo;-&rdquo;</code> (<code>'\u002D'</code>) 之外，字符串的任何字符都不是指定基数的数字。

<li> 字符串所表示的值不是 <code>short</code> 类型的值。
</ul>

@param s		包含要解析的 <code>short</code> 表示形式的 <code>String</code>
@param radix	将在解析 <code>s</code> 时使用的基数 
@return	由指定基数中的字符串参数表示的 <code>short</code>。
@exception	NumberFormatException 如果 <code>String</code> 不包含可解析的 <code>short</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Short java.lang.Short.valueOf(String s, int radix) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>Short</code> 对象，该对象保持从指定的 <code>String</code> 中提取的值，该值是在使用第二个参数给出的基数对指定字符串进行解析时提取的。第一个参数被解释为表示在使用第二个参数所指定基数时的一个有符号的 <code>short</code>，此值与用该参数作为参数的 {@link #parseShort(java.lang.String, int)} 方法得到的值相同。结果是一个表示该字符串所指定的 <code>short</code> 值的 <code>Short</code> 对象。
<p> 换句话说，此方法返回一个 <code>Short</code> 对象，它的值等于：

<blockquote><code>new Short(Short.parseShort(s, radix))</code></blockquote>

@param s		要解析的字符串
@param radix	将在解释 <code>s</code> 时使用的基数
@return          保持指定基数中的字符串参数所表示的值的 <code>Short</code> 对象。
@exception	NumberFormatException 如果 <code>String</code> 不包含可解析的 <code>short</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Short java.lang.Short.valueOf(String s) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个保持指定 <code>String</code> 所给出的值的 <code>Short</code> 对象。该参数被解释为表示一个有符号的十进制 <code>short</code>，此值与用该参数作为参数的 {@link #parseLong(java.lang.String)} 方法得到的值相同。结果是一个表示该字符串所指定的 <code>short</code> 值的 <code>Short</code> 对象。<p> 换句话说，此方法返回一个 <code>Short</code> 对象，它的值等于：

 <blockquote><code>new Short(Short.parseShort(s))</code></blockquote>

@param s		要解析的字符串
@return          保持字符串参数所表示的值的 <code>Short</code> 对象
@exception	NumberFormatException 如果 <code>String</code> 不包含可解析的 <code>short</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Short java.lang.Short.valueOf(short s)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示指定 <tt>short</tt> 值的 <tt>Short</tt> 实例。如果不需要新的 <tt>Short</tt> 实例，则通常应该优先采用此方法，而不是构造方法 {@link #Short(short)}，因为此方法很可能通过缓存经常请求的值来显著提高空间和时间性能。

@param  s 一个 short 值。
@return 表示 <tt>s</tt> 的 <tt>Short</tt> 实例。
@since  1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Short java.lang.Short.decode(String nm) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>String</code> 解码为 <code>Short</code>。接受通过以下语法给出的十进制、十六进制和八进制数：

 <blockquote>
 <dl>
 <dt><i>DecodableString:</i>
 <dd><i>Sign<sub>opt</sub> DecimalNumeral</i>
 <dd><i>Sign<sub>opt</sub></i> <code>0x</code> <i>HexDigits</i>
 <dd><i>Sign<sub>opt</sub></i> <code>0X</code> <i>HexDigits</i>
 <dd><i>Sign<sub>opt</sub></i> <code>#</code> <i>HexDigits</i>
 <dd><i>Sign<sub>opt</sub></i> <code>0</code> <i>OctalDigits</i>
 <p>
 <dt><i>Sign:</i>
 <dd><code>-</code>
 </dl>
 </blockquote>

<i>DecimalNumeral</i>、<i>HexDigits</i> 和 <i>OctalDigits</i> 在 <a href="http://java.sun.com/docs/books/jls/html/">Java Language Specification</a> 的 <a href="http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#48282">&sect;3.10.1</a> 中已经定义。
<p>
对（可选）负号和/或基数说明符（&ldquo;<code>0x</code>&rdquo;、&ldquo;<code>0X</code>&rdquo;、&ldquo;<code>#</code>&rdquo; 或前导零）后面的字符序列进行解析就如同用 <code>Short.parseByte</code> 方法来解析指定的基数（10、16 或 8）一样。该字符序列必须表示为一个正值，否则将抛出 {@link NumberFormatException}。如果指定 <code>String</code> 的第一个字符是减号，则结果无效。<code>String</code> 中不允许出现空白字符。

@param     nm 要解码的 <code>String</code>。
@return	  保持 <code>nm</code> 所表示的 <code>short</code> 值的 <code>Short</code> 对象
@exception NumberFormatException  如果 <code>String</code> 不包含可解析的 <code>short</code>。
@see java.lang.Short#parseShort(java.lang.String, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte java.lang.Short.byteValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>byte</code> 形式返回此 <code>Short</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public short java.lang.Short.shortValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>short</code> 形式返回此 <code>Short</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.Short.intValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>int</code> 形式返回此 <code>Short</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.lang.Short.longValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>Long</code> 形式返回此 <code>Short</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.lang.Short.floatValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>float</code> 形式返回此 <code>Short</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.lang.Short.doubleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 形式返回此 <code>Short</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.Short.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此 <code>Short</code> 的值的 <code>String</code> 对象。该值被转换成有符号的十进制表示形式，并作为一个字符串返回，正如将 <code>short</code> 值作为一个参数指定给 {@link java.lang.Short#toString(short)} 方法所得到的值那样。

@return  该对象值（十进制）的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.Short.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Short</code> 的哈希码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.Short.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此对象与指定对象比较。当且仅当参数不是 <code>null</code>，而是一个与该对象一样包含相同 <code>short</code> 值的 <code>Short</code> 对象时，结果才为 <code>true</code>。

@param obj	将与之进行比较的对象。
@return		如果这些对象相同，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.Short.compareTo(Short anotherShort)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较两个 <code>Short</code> 对象所表示的数值。

@param   anotherShort   要比较的 <code>Short</code>。
@return	如果该 <code>Short</code> 等于参数 <code>Short</code>，则返回 <code>0</code>；如果该 <code>Short</code> 数值小于参数 <code>Short</code>，则返回小于 <code>0</code> 的值；如果该 <code>Short</code> 数值大于参数 <code>Short</code>，则返回大于 <code>0</code> 的值（有符号比较）。
@since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static short java.lang.Short.reverseBytes(short i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回通过反转指定 <tt>short</tt> 值的二进制补码表示形式中字节的顺序而获得的值。

@return 返回通过反转（或者交换，效果相同）指定 <tt>short</tt> 值中的字节而获得的值。
@since 1.5

<!-- END DATA -->
