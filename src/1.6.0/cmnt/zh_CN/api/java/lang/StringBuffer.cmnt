<!-- BEGIN KEY -->
public final class java.lang.StringBuffer extends java.lang.AbstractStringBuilder implements java.io.Serializable, java.lang.CharSequence
<!-- END KEY -->
<!-- BEGIN DATA -->
线程安全的可变字符序列。一个类似于 {@link String} 的字符串缓冲区，但不能修改。虽然在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。
 <p>
可将字符串缓冲区安全地用于多个线程。可以在必要时对这些方法进行同步，因此任意特定实例上的所有操作就好像是以串行顺序发生的，该顺序与所涉及的每个线程进行的方法调用顺序一致。
 <p>
 <code>StringBuffer</code> 上的主要操作是 <code>append</code> 和 <code>insert</code> 方法，可重载这些方法，以接受任意类型的数据。每个方法都能有效地将给定的数据转换成字符串，然后将该字符串的字符添加或插入到字符串缓冲区中。<code>append</code> 方法始终将这些字符添加到缓冲区的末端；而 <code>insert</code> 方法则在指定的点添加字符。
 <p>
例如，如果 <code>z</code> 引用一个当前内容是&ldquo;<code>start</code>&rdquo;的字符串缓冲区对象，则此方法调用 <code>z.append(&quot;le&quot;)</code> 会使字符串缓冲区包含&ldquo;<code>startle</code>&rdquo;，而 <code>z.insert(4, &quot;le&quot;)</code> 将更改字符串缓冲区，使之包含&ldquo;<code>starlet</code>&rdquo;。
 <p>
通常，如果 sb 引用 <code>StringBuilder</code> 的一个实例，则 <code>sb.append(x)</code> 和 <code>sb.insert(sb.length(),&#xA0;x)</code> 具有相同的效果。
 <p>
只要发生有关源序列（如在源序列中添加或插入）的操作，该类就只在执行此操作的字符串缓冲区上而不是在源上实现同步。
 <p>
每个字符串缓冲区都有一定的容量。只要字符串缓冲区所包含的字符序列的长度没有超出此容量，就无需分配新的内部缓冲区数组。如果内部缓冲区溢出，则此容量自动增大。从 JDK 5 开始，为该类补充了一个单个线程使用的等价类，即 {@link StringBuilder}。与该类相比，通常应该优先使用 <tt>StringBuilder</tt> 类，因为它支持所有相同的操作，但由于它不执行同步，所以速度更快。

@author	Arthur van Hoff
@version 	1.99, 07/15/04
@see     java.lang.StringBuilder
@see     java.lang.String
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] java.lang.StringBuffer.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
StringBuffer 的可序列化字段。
 
@serialField value  char[] 该 StringBuffer 的底层字符数组。
@serialField count int 该 StringBuffer 中的字符数。
@serialField shared  boolean 指示是否共享底层数组的标志。在反序列化时忽略该值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个其中不带字符的字符串缓冲区，初始容量为 16 个字符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer(int capacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个不带字符，但具有指定初始容量的字符串缓冲区。

@param      capacity  初始容量。
@exception  NegativeArraySizeException  如果 <code>capacity</code> 参数小于 <code>0</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer(String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个字符串缓冲区，并将其内容初始化为指定的字符串内容。该字符串的初始容量为 <code>16 </code> 加上字符串参数的长度。

@param   str   缓冲区的初始内容。
@exception NullPointerException 如果 <code>str</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer(CharSequence seq)
<!-- END KEY -->
<!-- BEGIN DATA -->
public java.lang.StringBuilder(CharSequence seq) 构造一个字符串缓冲区，它包含与指定的 <code>CharSequence</code> 相同的字符。该字符串缓冲区的初始容量为 <code>16</code> 加上 <code>CharSequence</code> 参数的长度。
 <p>
如果指定的 <code>CharSequence</code> 的长度小于或等于 0，则返回容量为 <code>16</code> 的空缓冲区。

@param      seq   要复制的序列。
@exception NullPointerException 如果 <code>seq</code> 为 <code>null</code>
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.lang.StringBuffer.trimToSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
@since      1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.lang.StringBuffer.setLength(int newLength)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws IndexOutOfBoundsException {@inheritDoc}
@see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized char java.lang.StringBuffer.charAt(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws IndexOutOfBoundsException {@inheritDoc}
@see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.lang.StringBuffer.codePointAt(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
@since      1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.lang.StringBuffer.codePointBefore(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
@since     1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.lang.StringBuffer.codePointCount(int beginIndex, int endIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
@since     1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.lang.StringBuffer.offsetByCodePoints(int index, int codePointOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
@since     1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.lang.StringBuffer.getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NullPointerException {@inheritDoc}
@throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.lang.StringBuffer.setCharAt(int index, char ch)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws IndexOutOfBoundsException {@inheritDoc}
@see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
@see     java.lang.String#valueOf(java.lang.Object)
@see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(StringBuffer sb)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的 <tt>StringBuffer</tt> 添加到此序列中。
 <p>
按顺序将 <tt>StringBuffer</tt> 参数中的字符添加到此 <tt>StringBuffer</tt> 中，并使 <tt>StringBuffer</tt> 在长度上增加该参数的长度。如果 <tt>sb</tt> 为 <tt>null</tt>，则将 4 个 <tt>&quot;null&quot;</tt> 字符添加到此 <tt>StringBuffer</tt> 中。
 <p>
在执行 <tt>append</tt> 方法前，让 <tt>StringBuffer</tt> 中包含的原有字符序列的长度为 <i>n</i>。如果 <i>k</i> 小于 <i>n</i>，则新字符序列中索引 <i>k</i> 处的字符等于原有字符序列中索引 <i>k</i> 处的字符；否则它等于参数 <code>sb</code> 中索引 <i>k-n</i> 处的字符。
 <p>
该方法在 <code>this</code>（目标）对象上实现同步，但不在源上（<code>sb</code>）实现同步。

@param   sb   要添加的 <tt>StringBuffer</tt>。
@return  该对象的一个引用。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer java.lang.StringBuffer.append(CharSequence s)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的 <code>CharSequence</code> 添加到该序列。
 <p>
按顺序将 <code>CharSequence</code> 参数中的字符添加到该序列中，使该序列增加该参数的长度。

<p>该方法的结果与调用 this.append(s, 0, s.length()) 完全相同；
 
<p>该方法在 this（目标）对象上实现同步，但不在源上（<code>s</code>）实现同步。

<p>如果 <code>s</code> 为 <code>null</code>，则添加 4 个 <code>&quot;null&quot;</code> 字符。

@param   s 要添加的 <code>CharSequence</code>。
@return  此对象的一个引用。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(CharSequence s, int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws IndexOutOfBoundsException {@inheritDoc}
@since      1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
@see     java.lang.String#valueOf(boolean)
@see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
@see     java.lang.String#valueOf(int)
@see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.appendCodePoint(int codePoint)
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(long lng)
<!-- END KEY -->
<!-- BEGIN DATA -->
@see     java.lang.String#valueOf(long)
@see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(float f)
<!-- END KEY -->
<!-- BEGIN DATA -->
@see     java.lang.String#valueOf(float)
@see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(double d)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see     java.lang.String#valueOf(double)
 @see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.delete(int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @since      1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.deleteCharAt(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @since      1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.replace(int start, int end, String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @since      1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String java.lang.StringBuffer.substring(int start)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @since      1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.CharSequence java.lang.StringBuffer.subSequence(int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IndexOutOfBoundsException {@inheritDoc}
 @since      1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String java.lang.StringBuffer.substring(int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @since      1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int index, char[] str, int offset, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @since      1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int offset, Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(java.lang.Object)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int offset, String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int offset, char[] str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer java.lang.StringBuffer.insert(int dstOffset, CharSequence s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IndexOutOfBoundsException {@inheritDoc}
 @since      1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int dstOffset, CharSequence s, int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IndexOutOfBoundsException {@inheritDoc}
 @since      1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer java.lang.StringBuffer.insert(int offset, boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(boolean)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int offset, char c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IndexOutOfBoundsException {@inheritDoc}
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer java.lang.StringBuffer.insert(int offset, int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(int)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer java.lang.StringBuffer.insert(int offset, long l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(long)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer java.lang.StringBuffer.insert(int offset, float f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(float)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer java.lang.StringBuffer.insert(int offset, double d)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(double)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.StringBuffer.indexOf(String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @since      1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.lang.StringBuffer.indexOf(String str, int fromIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @since      1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.StringBuffer.lastIndexOf(String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @since      1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.lang.StringBuffer.lastIndexOf(String str, int fromIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @since      1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.reverse()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since   JDK1.0.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.lang.StringBuffer.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
调用 readObject，从流中恢复 StringBuffer 的状态。

<!-- END DATA -->
<!-- BEGIN KEY -->
private synchronized void java.lang.StringBuffer.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
调用 readObject，从流中恢复 StringBuffer 的状态。

<!-- END DATA -->
