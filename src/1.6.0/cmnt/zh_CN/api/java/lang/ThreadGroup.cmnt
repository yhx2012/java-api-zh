<!-- BEGIN KEY -->
public class java.lang.ThreadGroup extends java.lang.Object implements java.lang.Thread.UncaughtExceptionHandler
<!-- END KEY -->
<!-- BEGIN DATA -->
线程组表示一个线程的集合。此外，线程组也可以包含其他线程组。线程组构成一棵树，在树中，除了初始线程组外，每个线程组都有一个父线程组。
 <p>
允许线程访问有关自己的线程组的信息，但是不允许它访问有关其线程组的父线程组或其他任何线程组的信息。

@author  unascribed
@version 1.63, 06/17/04
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.ThreadGroup(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新线程组。新线程组的父线程组是目前正在运行线程的线程组。
 <p>
不使用任何参数调用父线程组的 <code>checkAccess</code> 方法；这可能导致一个安全性异常。

@param   name   新线程组的名称。
@exception  SecurityException  如果当前线程不能在指定的线程组中创建线程。
@see     java.lang.ThreadGroup#checkAccess()
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.ThreadGroup(ThreadGroup parent, String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新线程组。新线程组的父线程组是指定的线程组。
 <p>
不使用任何参数调用父线程组的 <code>checkAccess</code> 方法；这可能导致一个安全性异常。

@param     parent   父线程组。
@param     name   新线程组的名称。
@exception NullPointerException 如果线程组参数为 <code>null</code>。
@exception  SecurityException  如果当前线程不能在指定的线程组中创建线程。
@see     java.lang.SecurityException
@see     java.lang.ThreadGroup#checkAccess()
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.lang.ThreadGroup.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此线程组的名称。

@return  此线程组的名称。
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.ThreadGroup java.lang.ThreadGroup.getParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此线程组的父线程组。
 <p>
首先，如果父线程组不为 <code>null</code>，则不使用任何参数直接调用父线程组的 <code>checkAccess</code> 方法；这可能导致一个安全性异常。

@return  线程组的父线程组。顶级线程组仅为那些父线程组为 <code>null</code> 的线程组。
@exception  SecurityException  如果当前线程无法修改此线程组。
@see        java.lang.ThreadGroup#checkAccess()
@see        java.lang.SecurityException
@see        java.lang.RuntimePermission
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.lang.ThreadGroup.getMaxPriority()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此线程组的最高优先级。作为此线程组一部分的线程不能拥有比最高优先级更高的优先级。

@return  此线程组中的线程可拥有的最高优先级。
@see     #setMaxPriority
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.lang.ThreadGroup.isDaemon()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试此线程组是否为一个后台程序线程组。在停止后台程序线程组的最后一个线程或销毁其最后一个线程组时，自动销毁这个后台程序线程组。 

@return  如果此线程组是一个后台程序线程组，则返回 <code>true</code>；否则返回 <code>false</code>。
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.lang.ThreadGroup.isDestroyed()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试此线程组是否已经被销毁。

@return  如果此对象被销毁，则返回 true
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.lang.ThreadGroup.setDaemon(boolean daemon)
<!-- END KEY -->
<!-- BEGIN DATA -->
更改此线程组的后台程序状态。
 <p>
首先，不使用任何参数调用此线程组的 <code>checkAccess</code> 方法；这可能导致一个安全性异常。
 <p>
在停止后台程序线程组的最后一个线程或销毁其最后一个线程组时，自动销毁此后台程序线程组。

@param      daemon   如果为 <code>true</code>，则表示此线程组是一个后台程序线程组；否则，表示此线程组是一个普通线程组。
@exception  SecurityException  如果当前线程无法修改此线程组。
@see        java.lang.SecurityException
@see        java.lang.ThreadGroup#checkAccess()
@since      JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.lang.ThreadGroup.setMaxPriority(int pri)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置线程组的最高优先级。线程组中已有较高优先级的线程不受影响。
 <p>
首先，不使用任何参数调用此线程组的 <code>checkAccess</code> 方法；这可能导致一个安全性异常。
 <p>
如果 <code>pri</code> 参数小于 {@link Thread#MIN_PRIORITY} 或大于 {@link Thread#MAX_PRIORITY}，则线程组的最高优先级保持不变。
 <p>
否则，此 ThreadGroup 对象的优先级被设置为比指定的 <code>pri</code> 参数更小，所允许的最高优先级是此线程组的父线程组的优先级。（如果此线程组是系统线程组，没有父线程组，那么只需将最高优先级设置为 <code>pri</code> 即可。）然后使用 <code>pri</code> 作为此方法的参数，以递归的方式对属于此线程组的每个线程组调用此方法。

@param   pri    线程组的新优先级。
@exception  SecurityException  如果当前线程无法修改此线程组。
@see        #getMaxPriority
@see        java.lang.SecurityException
@see        java.lang.ThreadGroup#checkAccess()
@since      JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.lang.ThreadGroup.parentOf(ThreadGroup g)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试此线程组是否为线程组参数或其祖先线程组之一。

@param   g   一个线程组。
@return  如果此线程组是线程组参数或其祖先线程组之一，则返回 <code>true</code>；否则返回 <code>false</code>。
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.lang.ThreadGroup.checkAccess()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定当前运行的线程是否有权修改此线程组。
 <p>
如果有安全管理器，则用此线程组作为其参数调用 <code>checkAccess</code> 方法。结果可能是抛出一个 <code>SecurityException</code>。

@exception  SecurityException  如果不允许当前线程访问此线程组。
@see        java.lang.SecurityManager#checkAccess(java.lang.ThreadGroup)
@since      JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.ThreadGroup.activeCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此线程组中活动线程的估计数。结果并不能反映并发活动，并且可能受某些系统线程的存在状态的影响。
 <p>
由于结果所固有的不精确特性，建议只将此方法用于信息目的。

@return  此线程组和将此线程组作为其祖先的其他线程组中活动线程的估计数。
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.ThreadGroup.enumerate(java.lang.Thread[] list)
<!-- END KEY -->
<!-- BEGIN DATA -->
把此线程组及其子组中的所有活动线程复制到指定数组中。
 <p>
首先，不使用任何参数调用此线程组的 <code>checkAccess</code> 方法；这可能导致一个安全性异常。
 <p>
应用程序可以使用 <code>activeCount</code> 方法获取数组大小的估计数，但是，<i>如果数组太小而无法保持所有线程，则忽略额外的线程</i>。如果获得此线程组及其子组中的所有活动线程非常重要，则调用方应该验证返回的 int 值是否严格小于 <tt>list</tt> 的长度。
 <p>
由于使用此方法所固有的竞争条件，建议只将此方法用于信息目的。

@param   list   放置线程列表的数组。
@return  放入数组中的线程数。
@exception  SecurityException  如果不允许当前线程枚举此线程组。
@see     java.lang.ThreadGroup#activeCount()
@see     java.lang.ThreadGroup#checkAccess()
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.ThreadGroup.enumerate(java.lang.Thread[] list, boolean recurse)
<!-- END KEY -->
<!-- BEGIN DATA -->
把此线程组中的所有活动线程复制到指定数组中。如果 <code>recurse</code> 标志为 <code>true</code>，则还包括对此线程的子组中的所有活动线程的引用。如果数组太小而无法保持所有线程，则忽略额外的线程。
 <p>
首先，不使用任何参数调用此线程组的 <code>checkAccess</code> 方法；这可能导致一个安全性异常。
 <p>
应用程序可以使用 <code>activeCount</code> 获取数组大小的估计数，但是，<i>如果数组太小而无法保持所有线程，则忽略额外的线程</i>。如果获得此线程组中的所有活动线程非常重要，则调用方应该验证返回的整数值是否确实小于 <tt>list</tt> 的长度。
 <p>
由于使用此方法所固有的竞争条件，建议只将此方法用于信息目的。

@param   list   放置线程列表的数组。
@param   recurse   一个标记，指示是否还包括作为此线程组的子组的线程组中的线程。
@return  放入数组中的线程数。
@exception  SecurityException  如果不允许当前线程枚举此线程组。
@see     java.lang.ThreadGroup#activeCount()
@see     java.lang.ThreadGroup#checkAccess()
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.ThreadGroup.activeGroupCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此线程组中活动线程组的估计数。结果并不能反映并发活动。
 <p>
由于结果所固有的不精确特性，建议只将此方法用于信息目的。

@return  将此线程组作为祖先线程组的活动线程组的数量。
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.ThreadGroup.enumerate(java.lang.ThreadGroup[] list)
<!-- END KEY -->
<!-- BEGIN DATA -->
把对此线程组中的所有活动子组的引用复制到指定数组中。
 <p>
首先，不使用任何参数调用此线程组的 <code>checkAccess</code> 方法；这可能导致一个安全性异常。
 <p>
应用程序可以使用 <code>activeGroupCount</code> 获取数组大小的估计数，但是，<i>如果数组太小而无法保持所有线程组，则忽略额外的线程组</i>。如果获得此线程组中的所有活动子组非常重要，则调用方应该验证返回的整数值是否确实小于 <tt>list</tt> 的长度。
 <p>
由于使用此方法所固有的竞争条件，建议只将此方法用于信息目的。

@param   list   放置线程组列表的数组。
@return  放入数组中的线程组的数量。
@exception  SecurityException  如果不允许当前线程枚举此线程组。
@see     java.lang.ThreadGroup#activeGroupCount()
@see     java.lang.ThreadGroup#checkAccess()
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.ThreadGroup.enumerate(java.lang.ThreadGroup[] list, boolean recurse)
<!-- END KEY -->
<!-- BEGIN DATA -->
把对此线程组中的所有活动子组的引用复制到指定数组中。如果 <code>recurse</code> 标志为 <code>true</code>，则还包括对子组的所有活动子组的引用，等等。 
 <p>
首先，不使用任何参数调用此线程组的 <code>checkAccess</code> 方法；这可能导致一个安全性异常。
 <p>
应用程序可以使用 <code>activeGroupCount</code> 获取数组大小的估计数，但是，<i>如果数组太小而无法保持所有线程组，则忽略额外的线程组</i>。如果获得此线程组中的所有活动子组非常重要，则调用方应该验证返回的整数值是否确实小于 <tt>list</tt> 的长度。
 <p>
由于使用此方法所固有的竞争条件，建议只将此方法用于信息目的。

@param   list   放置线程列表的数组。
@param   recurse   一个标记，指示是否以递归的方式枚举所有已包含的线程组。
@return  放入数组中的线程组的数量。
@exception  SecurityException  如果不允许当前线程枚举此线程组。
@see     java.lang.ThreadGroup#activeGroupCount()
@see     java.lang.ThreadGroup#checkAccess()
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.lang.ThreadGroup.stop()
<!-- END KEY -->
<!-- BEGIN DATA -->
停止此线程组中的所有线程。
 <p>
首先，不使用任何参数调用此线程组的 <code>checkAccess</code> 方法；这可能导致一个安全性异常。
 <p>
然后，此方法将对此线程组及其所有子组中的所有线程调用 <code>stop</code> 方法。

@exception  SecurityException  如果不允许当前线程访问此线程组或线程组中的任何线程。
@see        java.lang.SecurityException
@see        java.lang.Thread#stop()
@see        java.lang.ThreadGroup#checkAccess()
@since      JDK1.0
@deprecated    此方法具有固有的不安全性。有关详细信息，请参阅 {@link Thread#stop}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.lang.ThreadGroup.interrupt()
<!-- END KEY -->
<!-- BEGIN DATA -->
中断此线程组中的所有线程。
 <p>
首先，不使用任何参数调用此线程组的 <code>checkAccess</code> 方法；这可能导致一个安全性异常。 
 <p>
然后，此方法将对此线程组及其所有子组中的所有线程调用 <code>interrupt</code> 方法。

@exception  SecurityException  如果不允许当前线程访问此线程组或线程组中的任何线程。
@see        java.lang.Thread#interrupt()
@see        java.lang.SecurityException
@see        java.lang.ThreadGroup#checkAccess()
@since      1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.lang.ThreadGroup.suspend()
<!-- END KEY -->
<!-- BEGIN DATA -->
挂起此线程组中的所有线程。
 <p>
首先，不使用任何参数调用此线程组的 <code>checkAccess</code> 方法；这可能导致一个安全性异常。 
 <p>
然后，此方法将对该线程组及其所有子组中的所有线程调用 <code>suspend</code> 方法。

@exception  SecurityException  如果不允许当前线程访问此线程组或线程组中的任何线程。
@see        java.lang.Thread#suspend()
@see        java.lang.SecurityException
@see        java.lang.ThreadGroup#checkAccess()
@since      JDK1.0
@deprecated    此方法容易导致死锁。有关详细信息，请参阅 {@link Thread#suspend}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.lang.ThreadGroup.resume()
<!-- END KEY -->
<!-- BEGIN DATA -->
继续此线程组中的所有线程。
 <p>
首先，不使用任何参数调用此线程组的 <code>checkAccess</code> 方法；这可能导致一个安全性异常。
 <p>
然后，此方法将对该线程组及其所有子组中的所有线程调用 <code>resume</code> 方法。

@exception  SecurityException  如果不允许当前线程访问此线程组或线程组中的任何线程。
@see        java.lang.SecurityException
@see        java.lang.Thread#resume()
@see        java.lang.ThreadGroup#checkAccess()
@since      JDK1.0 
@deprecated    此方法只用于联合 <tt>Thread.suspend</tt> 和 <tt>ThreadGroup.suspend</tt> 时，因为它们所固有的容易导致死锁的特性，所以两者都已废弃。有关详细信息，请参阅 {@link Thread#suspend}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.lang.ThreadGroup.destroy()
<!-- END KEY -->
<!-- BEGIN DATA -->
销毁此线程组及其所有子组。此线程组必须为空，指示此线程组中的所有线程都已停止执行。
 <p>
首先，不使用任何参数调用此线程组的 <code>checkAccess</code> 方法；这可能导致一个安全性异常。

@exception  IllegalThreadStateException  如果线程组不为空，或者线程组已经被销毁。
@exception  SecurityException  如果当前线程不能修改此线程组。
@see        java.lang.ThreadGroup#checkAccess()
@since      JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.ThreadGroup.list()
<!-- END KEY -->
<!-- BEGIN DATA -->
将有关此线程组的信息打印到标准输出。此方法只对调试有用。

@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.ThreadGroup.uncaughtException(Thread t, Throwable e)
<!-- END KEY -->
<!-- BEGIN DATA -->
当此线程组中的线程因为一个未捕获的异常而停止，并且线程没有安装特定 {@link Thread.UncaughtExceptionHandler} 时，由 Java Virtual Machine 调用此方法。
 <p>
<code>ThreadGroup</code> 的 <code>uncaughtException</code> 方法执行以下操作：
 <ul>
<li>如果此线程组有一个父线程组，那么调用此父线程组的 <code>uncaughtException</code> 方法时带有两个相同的参数。
<li>否则，此方法将查看是否安装了{@linkplain Thread#getDefaultUncaughtExceptionHandler 默认的未捕获异常处理程序}，如果是，则在调用其 <code>uncaughtException</code> 方法时带有两个相同的参数。
<li>否则，此方法将确认 <code>Throwable</code> 参数是否为一个 {@link ThreadDeath} 实例。如果是，则不会做任何特殊的操作。否则，在从线程的 {@link Thread#getName getName} 方法返回时，会使用 <code>Throwable</code> 的 {@link Throwable#printStackTrace printStackTrace} 方法，将包含线程名称的消息和堆栈跟踪信息输出到{@linkplain System#err 标准错误流}。
 </ul>
 <p>
应用程序可以重写 <code>ThreadGroup</code> 的子类中的方法，以提供处理未捕获异常的替代办法。

@param   t   即将退出的线程。
@param   e   未捕获的异常。
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.ThreadGroup.allowThreadSuspension(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
由 VM 用于控制内存不足时的隐式挂起。

@param b 允许或不允许挂起时的布尔值
@return 如果成功，则返回 true
@since   JDK1.1
@deprecated 此调用的定义取决于 {@link #suspend}，它被废弃了。更进一步地说，此调用的行为从不被指定。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.ThreadGroup.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此线程组的字符串表示形式。

@return  此线程组的字符串表示形式。
@since   JDK1.0

<!-- END DATA -->
