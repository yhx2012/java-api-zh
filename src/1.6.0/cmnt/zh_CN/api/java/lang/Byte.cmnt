<!-- BEGIN KEY -->
public final class java.lang.Byte extends java.lang.Number implements java.lang.Comparable
<!-- END KEY -->
<!-- BEGIN DATA -->

<code>Byte</code> 类将基本类型 <code>byte</code> 的值包装在一个对象中。一个 <code>Byte</code> 类型的对象只包含一个类型为 <code>byte</code> 的字段。

 <p>

此外，该类还为 <code>byte</code> 和 <code>String</code> 的相互转换提供了几种方法，并提供了处理 <code>byte</code> 时非常有用的其他一些常量和方法。

@author  Nakul Saraiya 
@version 1.40, 05/11/04 
@see     java.lang.Number 
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final byte java.lang.Byte.MIN_VALUE
<!-- END KEY -->
<!-- BEGIN DATA -->
一个常量，保存 <code>byte</code> 类型可取的最小值，即 -2<sup>7</sup>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final byte java.lang.Byte.MAX_VALUE
<!-- END KEY -->
<!-- BEGIN DATA -->
一个常量，保存 <code>byte</code> 类型可取的最大值，即 2<sup>7</sup>-1。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Class<java.lang.Byte> java.lang.Byte.TYPE
<!-- END KEY -->
<!-- BEGIN DATA -->
表示基本类型 <code>byte</code> 的 <code>Class</code> 实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.Byte.SIZE
<!-- END KEY -->
<!-- BEGIN DATA -->
用于以二进制补码形式表示 <tt>byte</tt> 值的位数。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private final byte java.lang.Byte.value
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Byte</code> 的值。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Byte(byte value)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新分配的 <code>Byte</code> 对象，以表示指定的 <code>byte</code> 值。

@param value	 <code>Byte</code> 对象所表示的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Byte(String s) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新分配的 <code>Byte</code> 对象，以表示 <code>String</code> 参数所指示的 <code>byte</code> 值。该字符串以使用基数 10 的 <code>parseByte</code> 方法所使用的方式被转换成一个 <code>byte</code> 值。

@param s		要转换成 <code>Byte</code> 的 <code>String</code> 
@exception	NumberFormatException 如果 <code>String</code> 不包含一个可解析的 <code>byte</code>。
@see        java.lang.Byte#parseByte(java.lang.String, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.Byte.toString(byte b)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示指定 <code>byte</code> 的一个新 <code>String</code> 对象。假定基数为 10。

@param b	要转换的 <code>byte</code> 
@return 指定 <code>byte</code> 的字符串表示形式 
@see java.lang.Integer#toString(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Byte java.lang.Byte.valueOf(byte b)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示指定 <tt>byte</tt> 值的一个 <tt>Byte</tt> 实例。如果不需要新的 <tt>Byte</tt> 实例，则通常应优先使用此方法，而不是构造方法 {@link #Byte(byte)}，因为该方法有可能通过缓存经常请求的值来显著提高空间和时间性能。

@param  b 一个 byte 值。
@return 表示 <tt>b</tt> 的 <tt>Byte</tt> 实例。
@since  1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static byte java.lang.Byte.parseByte(String s) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 string 参数解析为有符号的十进制 <code>byte</code>。除了第一个字符可以是表示负值的 ASCII 负号 <code>'-'</code> (<code>'\u002D'</code>) 之外，该字符串中的字符必须都是十进制数字。返回得到的 <code>byte</code> 值与以该 string 参数和基数 10 为参数的 {@link #parseByte(java.lang.String, int)} 方法所返回的值一样。

@param s		要解析的包含 <code>byte</code> 表示形式的 <code>String</code>  
@return		以十进制的参数表示的 <code>byte</code> 值 
@exception	NumberFormatException 如果该 string 不包含一个可解析的 <code>byte</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static byte java.lang.Byte.parseByte(String s, int radix) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 string 参数解析为一个有符号的 <code>byte</code>，其基数由第二个参数指定。除了第一个字符可以是表示负值的 ASCII 负号 <code>'-'</code> (<code>'\u002D'</code>) 之外（这取决于 {@link java.lang.Character#digit(char, int)} 是否返回非负值），该 string 中的字符必须都是指定基数的数字。返回得到的 <code>byte</code> 值。
 <p>
如果出现下列任何一种情况，则抛出一个 <code>NumberFormatException</code> 类型的异常：
 <ul>
<li> 第一个参数为 <code>null</code> 或是一个长度为零的字符串。

<li> 基数小于 {@link java.lang.Character#MIN_RADIX} 或者大于 {@link java.lang.Character#MAX_RADIX}。

<li> 字符串的任一字符不是指定基数的数字，第一个字符是负号 <code>'-'</code> (<code>'&#92;u002D'</code>) 的情况除外（但此时字符串的长度应超过 1）。

<li> 字符串所表示的值不是 <code>byte</code> 类型的值。
 </ul>

@param s		要解析的包含 <code>byte</code> 表示形式的 <code>String</code>  
@param radix	在解析 <code>s</code> 时使用的基数 
@return		以指定基数表示的 string 参数所表示的 <code>byte</code> 值 
@exception	NumberFormatException 如果该 string 不包含一个可解析的 <code>byte</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Byte java.lang.Byte.valueOf(String s, int radix) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>Byte</code> 对象，该对象保持从指定的 <code>String</code> 中提取的值，该值是在用第二个参数所给定的基数对指定字符串进行解析时提取的。第一个参数被解释为用第二个参数所指定的基数表示一个有符号的 <code>byte</code>，正如将该参数指定给 {@link #parseByte(java.lang.String, int)} 方法一样。结果是一个表示该 string 所指定的 <code>byte</code> 值的 <code>Byte</code> 对象。
<p> 换句话说，该方法返回一个等于以下代码的值的 <code>Byte</code> 对象： <blockquote><code>new Byte(Byte.parseByte(s, radix))</code></blockquote> 

@param s		要解析的字符串 
@param radix	在解释 <code>s</code> 时使用的基数 
@return		保持用指定基数表示的字符串参数所表示的值的 <code>Byte</code> 对象。
@exception	NumberFormatException 如果 <code>String</code> 不包含一个可解析的 <code>byte</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Byte java.lang.Byte.valueOf(String s) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个保持指定 <code>String</code> 所给出的值的 <code>Byte</code> 对象。参数被解释为表示一个有符号的十进制的 <code>byte</code>，正如将该参数指定给 {@link #parseByte(java.lang.String)} 方法一样。结果是一个表示该 string 所指定的 <code>byte</code> 值的 <code>Byte</code> 对象。
<p> 换句话说，该方法返回一个等于以下代码的值的 <code>Byte</code> 对象： <blockquote><code>new Byte(Byte.parseByte(s))</code></blockquote> 

 

@param s		要解析的字符串 
@return		保持 string 参数所表示的值的 <code>Byte</code> 对象 
@exception	NumberFormatException 如果该 <code>String</code> 不包含一个可解析的 <code>byte</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Byte java.lang.Byte.decode(String nm) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>String</code> 解码为 <code>Byte</code>。接受按下列语法给出的十进制、十六进制和八进制数：

<blockquote>
<dl>
<dt><i>DecodableString:</i>
<dd><i>Sign<sub>opt</sub> DecimalNumeral</i>
<dd><i>Sign<sub>opt</sub></i> <code>0x</code> <i>HexDigits</i>
<dd><i>Sign<sub>opt</sub></i> <code>0X</code> <i>HexDigits</i>
<dd><i>Sign<sub>opt</sub></i> <code>#</code> <i>HexDigits</i>
<dd><i>Sign<sub>opt</sub></i> <code>0</code> <i>OctalDigits</i>

<dt><i>Sign:</i>
<dd><code>-</code>
</dl>
</blockquote>

<a href="http://java.sun.com/docs/books/jls/html/">Java Language Specification</a> 的 <a href="http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#48282">&sect;3.10.1</a> 中给出了 <i>DecimalNumeral</i>、<i>HexDigits</i> 和 <i>OctalDigits</i> 的定义。
 <p>
对（可选）负号和/或基数说明符（&ldquo;<code>0x</code>&rdquo;、&ldquo;<code>0X</code>&rdquo;、&ldquo;<code>#</code>&rdquo; 或前导零）后面的字符序列进行解析就如同使用带指定基数（10、16 或 8）的 <code>Byte.parseByte</code> 方法一样。该字符序列必须表示一个正值，否则将抛出 {@link NumberFormatException}。如果指定 <code>String</code> 的第一个字符是负号，则结果将被求反。该 <code>String</code> 中不允许出现空白字符。

@param     nm 要解码的 <code>String</code>。
@return	 保持由 <code>nm</code> 表示的 <code>byte</code> 值的 <code>Byte</code> 对象 
@exception NumberFormatException  如果 <code>String</code> 不包含一个可解析的 <code>byte</code>。
@see java.lang.Byte#parseByte(java.lang.String, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte java.lang.Byte.byteValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
作为一个 <code>byte</code> 返回此 <code>Byte</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public short java.lang.Byte.shortValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
作为一个 <code>short</code> 返回此 <code>Byte</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.Byte.intValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
作为一个 <code>int</code> 返回此 <code>Byte</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.lang.Byte.longValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
作为一个 <code>long</code> 返回此 <code>Byte</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.lang.Byte.floatValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
作为一个 <code>float</code> 返回此 <code>Byte</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.lang.Byte.doubleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
作为一个 <code>double</code> 返回此 <code>Byte</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.Byte.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此 <code>Byte</code> 的值的 <code>String</code> 对象。该值被转换成有符号的十进制表示形式，并作为一个 string 返回，正如将 <code>byte</code> 值作为一个参数指定给 {@link java.lang.Byte#toString(byte)} 方法所返回的一样。

@return  以基数 10 表示的此对象值的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.Byte.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Byte</code> 的哈希码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.Byte.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此对象与指定对象比较。当且仅当参数不为 <code>null</code>，而是一个与此对象一样包含相同 <code>Byte</code> 值的 <code>byte</code> 对象时，结果才为 <code>true</code>。

@param obj	要进行比较的对象 
@return		如果这些对象相同，则为 <code>true</code>；否则为 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.Byte.compareTo(Byte anotherByte)
<!-- END KEY -->
<!-- BEGIN DATA -->
在数字上比较两个 <code>Byte</code> 对象。

@param   anotherByte   要比较的 <code>Byte</code>。
@return	如果此 <code>Byte</code> 等于参数 <code>Byte</code>，则返回 <code>0</code>；如果此 <code>Byte</code> 在数字上小于参数 <code>Byte</code>，则返回小于 <code>0</code> 的值；如果此 <code>Byte</code> 在数字上大于参数 <code>Byte</code>，则返回大于 <code>0</code> 的值（有符号比较）。
@since   1.2

<!-- END DATA -->
