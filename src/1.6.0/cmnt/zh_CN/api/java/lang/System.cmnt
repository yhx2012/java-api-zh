<!-- BEGIN KEY -->
public final class java.lang.System extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>System</code> 类包含一些有用的类字段和方法。它不能被实例化。

<p>在 <code>System</code> 类提供的设施中，有标准输入、标准输出和错误输出流；对外部定义的属性和环境变量的访问；加载文件和库的方法；还有快速复制数组的一部分的实用方法。

@author  unascribed
@version 1.158, 03/13/06
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.io.InputStream java.lang.System.in
<!-- END KEY -->
<!-- BEGIN DATA -->
&ldquo;标准&rdquo;输入流。此流已打开并准备提供输入数据。通常，此流对应于键盘输入或者由主机环境或用户指定的另一个输入源。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.io.PrintStream java.lang.System.out
<!-- END KEY -->
<!-- BEGIN DATA -->
&ldquo;标准&rdquo;输出流。此流已打开并准备接受输出数据。通常，此流对应于显示器输出或者由主机环境或用户指定的另一个输出目标。
 <p>
对于简单独立的 Java 应用程序，编写一行输出数据的典型方式是：
 <blockquote><pre>
     System.out.println(data)
 </pre></blockquote>
 <p>
请参阅 <code>PrintStream</code> 类中的 <code>println</code> 方法。

@see     java.io.PrintStream#println()
@see     java.io.PrintStream#println(boolean)
@see     java.io.PrintStream#println(char)
@see     java.io.PrintStream#println(char[])
@see     java.io.PrintStream#println(double)
@see     java.io.PrintStream#println(float)
@see     java.io.PrintStream#println(int)
@see     java.io.PrintStream#println(long)
@see     java.io.PrintStream#println(java.lang.Object)
@see     java.io.PrintStream#println(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.io.PrintStream java.lang.System.err
<!-- END KEY -->
<!-- BEGIN DATA -->
&ldquo;标准&rdquo;错误输出流。此流已打开并准备接受输出数据。
 <p>
通常，此流对应于显示器输出或者由主机环境或用户指定的另一个输出目标。按照惯例，此输出流用于显示错误消息，或者显示那些即使用户输出流（变量 <code>out</code> 的值）已经重定向到通常不被连续监视的某一文件或其他目标，也应该立刻引起用户注意的其他信息。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.lang.System.setIn(InputStream in)
<!-- END KEY -->
<!-- BEGIN DATA -->
重新分配&ldquo;标准&rdquo;输入流。

<p>首先，如果有安全管理器，则通过 <code>RuntimePermission(&quot;setIO&quot;)</code> 权限调用其 <code>checkPermission</code> 方法，查看是否可以重新分配&ldquo;标准&rdquo;输入流。
 <p>

@param in 新的标准输出流。

@throws  SecurityException 如果安全管理器存在并且其 <code>checkPermission</code> 方法不允许重新分配标准输入流。

@see SecurityManager#checkPermission
@see java.lang.RuntimePermission

@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.lang.System.setOut(PrintStream out)
<!-- END KEY -->
<!-- BEGIN DATA -->
重新分配&ldquo;标准&rdquo;输出流。

<p>首先，如果有安全管理器，则通过 <code>RuntimePermission(&quot;setIO&quot;)</code> 权限调用其 <code>checkPermission</code> 方法，查看是否可以重新分配&ldquo;标准&rdquo;输出流。

@param out 新的标准输出流

@throws  SecurityException 如果安全管理器存在并且其 <code>checkPermission</code> 方法不允许重新分配标准输出流。

@see SecurityManager#checkPermission
@see java.lang.RuntimePermission

@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.lang.System.setErr(PrintStream err)
<!-- END KEY -->
<!-- BEGIN DATA -->
重新分配&ldquo;标准&rdquo;错误输出流。

<p>首先，如果有安全管理器，则通过 <code>RuntimePermission(&quot;setIO&quot;)</code> 权限调用其 <code>checkPermission</code> 方法，查看是否可以重新分配&ldquo;标准&rdquo;输出流。

@param err 新的标准错误输出流

@throws  SecurityException 如果安全管理器存在并且其 <code>checkPermission</code> 方法不允许重新分配标准错误输出流。

@see SecurityManager#checkPermission
@see java.lang.RuntimePermission
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.io.Console java.lang.System.console()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与当前 Java 虚拟机关联的唯一 {@link java.io.Console Console} 对象（如果有）。

@return  系统控制台（如果有），否则返回 <tt>null</tt>。

@since   1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.channels.Channel java.lang.System.inheritedChannel() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回从创建此 Java 虚拟机的实体中继承的信道。

<p> 此方法返回通过调用系统级默认 {@link java.nio.channels.spi.SelectorProvider} 对象的 {@link java.nio.channels.spi.SelectorProvider#inheritedChannel inheritedChannel} 方法获得的信道。 </p>

<p> 除了 {@link java.nio.channels.spi.SelectorProvider#inheritedChannel inheritedChannel} 中描述的面向网络的信道之外，此方法以后还可能返回其他种类的信道。

 @return	继承的信道（如果有），否则返回 <tt>null</tt>。

 @throws	IOException 如果发生 I/O 错误

 @throws	SecurityException 如果安全管理器存在并且它不允许访问信道。

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.lang.System.setSecurityManager(SecurityManager s)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置系统安全性。

<p> 如果已经安装了安全管理器，则此方法首先通过 <code>RuntimePermission(&quot;setSecurityManager&quot;)</code> 权限调用安全管理器的 <code>checkPermission</code> 方法，以确保可以替换现有的安全管理器。这可能导致抛出一个 <code>SecurityException</code> 异常。

<p> 否则，将该参数作为当前安全管理器建立。如果参数为 <code>null</code> 并且没有建立安全管理器，则不执行任何操作，并且该方法将自行返回。

@param      s   安全管理器。
@exception  SecurityException  如果安全管理器已经设置并且其 <code>checkPermission</code> 方法不允许替换该设置。
@see #getSecurityManager
@see SecurityManager#checkPermission
@see java.lang.RuntimePermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.SecurityManager java.lang.System.getSecurityManager()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取系统安全接口。

@return  如果已经为当前应用程序建立了安全管理器，则返回此安全管理器；否则，返回 <code>null</code>。
@see     #setSecurityManager

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native long java.lang.System.currentTimeMillis()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回以毫秒为单位的当前时间。注意，当返回值的时间单位是毫秒时，值的粒度取决于底层操作系统，并且粒度可能更大。例如，许多操作系统以几十毫秒为单位测量时间。

<p> 请参阅 <code>Date</code> 类的描述，了解可能发生在&ldquo;计算机时间&rdquo;和协调世界时（UTC）之间的细微差异的讨论。

@return  当前时间与协调世界时 1970 年 1 月 1 日午夜之间的时间差（以毫秒为单位测量）。
@see     java.util.Date

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native long java.lang.System.nanoTime()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最准确的可用系统计时器的当前值，以毫微秒为单位。

<p>此方法只能用于测量已过的时间，与系统或钟表时间的其他任何时间概念无关。返回值表示从某一固定但任意的时间算起的毫微秒数（或许从以后算起，所以该值可能为负）。此方法提供毫微秒的精度，但不是必要的毫微秒的准确度。它对于值的更改频率没有作出保证。在取值范围大于约 292 年（2<sup>63</sup> 毫微秒）的连续调用的不同点在于：由于数字溢出，将无法准确计算已过的时间。

<p> 例如，测试某些代码执行的时间长度：
 <pre>
   long startTime = System.nanoTime();
   // ... the code being measured ...
   long estimatedTime = System.nanoTime() - startTime;
 </pre>
 
@return 系统计时器的当前值，以毫微秒为单位。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native void java.lang.System.arraycopy(Object src, int srcPos, Object dest, int destPos, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
从指定源数组中复制一个数组，复制从指定的位置开始，到目标数组的指定位置结束。从 <code>src</code> 引用的源数组到 <code>dest</code> 引用的目标数组，数组组件的一个子序列被复制下来。被复制的组件的编号等于 <code>length</code> 参数。源数组中位置在 <code>srcPos</code> 到 <code>srcPos+length-1</code> 之间的组件被分别复制到目标数组中的 <code>destPos</code> 到 <code>destPos+length-1</code> 位置。
 <p>
如果参数 <code>src</code> 和 <code>dest</code> 引用相同的数组对象，则复制的执行过程就好像首先将 <code>srcPos</code> 到 <code>srcPos+length-1</code> 位置的组件复制到一个带有 <code>length</code> 组件的临时数组，然后再将此临时数组的内容复制到目标数组的 <code>destPos</code> 到  <code>destPos+length-1</code> 位置一样。
 <p>
 If 如果 <code>dest</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code> 异常。
 <p>
如果 <code>src</code> 为 <code>null</code>, 则抛出 <code>NullPointerException</code> 异常，并且不会修改目标数组。
 <p>
否则，只要下列任何情况为真，则抛出 <code>ArrayStoreException</code> 异常并且不会修改目标数组：
 <ul>
<li><code>src</code> 参数指的是非数组对象。
<li><code>dest</code> 参数指的是非数组对象。
<li><code>src</code> 参数和 <code>dest</code> 参数指的是那些其组件类型为不同基本类型的数组。
<li><code>src</code> 参数指的是具有基本组件类型的数组且 <code>dest</code> 参数指的是具有引用组件类型的数组。
 <li><code>src</code> 参数指的是具有引用组件类型的数组且 <code>dest</code> 参数指的是具有基本组件类型的数组。
 </ul>
 <p>
否则，只要下列任何情况为真，则抛出 <code>IndexOutOfBoundsException</code> 异常，并且不会修改目标数组：
 <ul>
<li><code>srcPos</code> 参数为负。
 <li><code>destPos</code> 参数为负。
 <li><code>length</code> 参数为负。
<li><code>srcPos+length</code> 大于 <code>src.length</code>，即源数组的长度。
<li><code>destPos+length</code> 大于 <code>dest.length</code>，即目标数组的长度。
 </ul>
 <p>
否则，如果源数组中 <code>srcPos</code> 到 <code>srcPos+length-1</code> 位置上的实际组件通过分配转换并不能转换成目标数组的组件类型，则抛出 <code>ArrayStoreException</code> 异常。在这种情况下，将 <b><i>k</i></b> 设置为比长度小的最小非负整数，这样就无法将 <code>src[srcPos+</code><i>k</i><code>]</code> 转换为目标数组的组件类型；当抛出异常时，从 <code>srcPos</code> 到 <code>srcPos+</code><i>k</i><code>-1</code> 位置上的源数组组件已经被复制到目标数组中的 <code>destPos</code> 到 <code>destPos+</code><i>k</I><code>-1</code> 位置，而目标数组中的其他位置不会被修改。（因为已经详细说明过的那些限制，只能将此段落有效地应用于两个数组都有引用类型的组件类型的情况。）

@param      src      源数组。
@param      srcPos   源数组中的起始位置。
@param      dest     目标数组。
@param      destPos  目标数据中的起始位置。
@param      length   要复制的数组元素的数量。
@exception  IndexOutOfBoundsException  如果复制会导致对数组范围以外的数据的访问。
@exception  ArrayStoreException  如果因为类型不匹配而使得无法将 <code>src</code> 数组中的元素存储到 <code>dest</code> 数组中。
@exception  NullPointerException 如果 <code>src</code> 或 <code>dest</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native int java.lang.System.identityHashCode(Object x)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定对象的哈希码，该代码与默认的方法 hashCode() 返回的代码一样，无论给定对象的类是否重写 hashCode()。null 引用的哈希码为 0。

@param x 要计算其哈希码的对象
@return  哈希码
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Properties java.lang.System.getProperties()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定当前的系统属性。
 <p>
首先，如果有安全管理器，则不带参数直接调用其 <code>checkPropertiesAccess</code> 方法。这可能导致一个安全性异常。
 <p>
将 {@link #getProperty(String)} 方法使用的当前系统属性集合作为 <code>Properties</code> 对象返回。如果没有当前系统属性集合，则先创建并初始化一个系统属性集合。这个系统属性集合总是包含以下键的值： 
 <table summary="Shows property keys and associated values">
 <tr><th>键</th>
     <th>相关值的描述</th></tr>
 <tr><td><code>java.version</code></td>
     <td>Java 运行时环境版本</td></tr>
 <tr><td><code>java.vendor</code></td>
     <td>Java 运行时环境供应商</td></tr
 <tr><td><code>java.vendor.url</code></td>
     <td>Java 供应商的 URL</td></tr>
 <tr><td><code>java.home</code></td>
    <td>Java 安装目录</td></tr>
 <tr><td><code>java.vm.specification.version</code></td>
     <td>Java 虚拟机规范版本</td></tr>
 <tr><td><code>java.vm.specification.vendor</code></td>
     <td>Java 虚拟机规范供应商</td></tr>
 <tr><td><code>java.vm.specification.name</code></td>
     <td>Java 虚拟机规范名称</td></tr>
 <tr><td><code>java.vm.version</code></td>
     <td>Java 虚拟机实现版本</td></tr>
 <tr><td><code>java.vm.vendor</code></td>
     <td>Java 虚拟机实现供应商</td></tr>
 <tr><td><code>java.vm.name</code></td>
     <td>Java 虚拟机实现名称</td></tr>
 <tr><td><code>java.specification.version</code></td>
     <td>Java 运行时环境规范版本</td></tr>
 <tr><td><code>java.specification.vendor</code></td>
     <td>Java 运行时环境规范供应商</td></tr>
 <tr><td><code>java.specification.name</code></td>
     <td>Java 运行时环境规范名称</td></tr>
 <tr><td><code>java.class.version</code></td>
     <td>Java 类格式版本号</td></tr>
 <tr><td><code>java.class.path</code></td>
     <td>Java 类路径</td></tr>
 <tr><td><code>java.library.path</code></td>
     <td>加载库时搜索的路径列表</td></tr>
 <tr><td><code>java.io.tmpdir</code></td>
     <td>默认的临时文件路径</td></tr>
 <tr><td><code>java.compiler</code></td>
     <td>要使用的 JIT 编译器的名称</td></tr>
 <tr><td><code>java.ext.dirs</code></td>
     <td>一个或多个扩展目录的路径</td></tr>
 <tr><td><code>os.name</code></td>
     <td>操作系统的名称</td></tr>
 <tr><td><code>os.arch</code></td>
     <td>操作系统的架构</td></tr>
 <tr><td><code>os.version</code></td>
     <td>操作系统的版本</td></tr>
 <tr><td><code>file.separator</code></td>
     <td>文件分隔符（在 UNIX 系统中是&ldquo;/&rdquo;）</td></tr>
 <tr><td><code>path.separator</code></td>
     <td>路径分隔符（在 UNIX 系统中是&ldquo;:&rdquo;）</td></tr>
 <tr><td><code>line.separator</code></td>
     <td>行分隔符（在 UNIX 系统中是&ldquo;/n&rdquo;）</td></tr>
 <tr><td><code>user.name</code></td>
     <td>用户的账户名称</td></tr>
 <tr><td><code>user.home</code></td>
     <td>用户的主目录</td></tr>
 <tr><td><code>user.dir</code></td>
     <td>用户的当前工作目录</td></tr>
 </table>
 <p>
系统属性值中的多个路径是用平台的路径分隔符分隔的。
 <p>
注意，即使安全管理器不允许执行 <code>getProperties</code> 操作，它可能也会选择允许执行 {@link #getProperty(String)} 操作。

@return     系统属性
@exception  SecurityException  如果安全管理器存在并且其 <code>checkPropertiesAccess</code> 方法不允许访问系统属性。
@see        #setProperties
@see        java.lang.SecurityException
@see        java.lang.SecurityManager#checkPropertiesAccess()
@see        java.util.Properties

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.lang.System.setProperties(Properties props)
<!-- END KEY -->
<!-- BEGIN DATA -->
将系统属性设置为 <code>Properties</code> 参数。
 <p>
首先，如果有安全管理器，则不带参数直接调用其 <code>checkPropertiesAccess</code> 方法。这可能导致一个安全性异常。
 <p>
参数是 {@link #getProperty(String)} 方法使用的当前系统属性的集合。如果参数为 <code>null</code>，则忽略当前系统属性的集合。

@param      props   新的系统属性。
@exception  SecurityException  如果安全管理器存在并且其 <code>checkPropertiesAccess</code> 方法不允许访问系统属性。
@see        #getProperties
@see        java.util.Properties
@see        java.lang.SecurityException
@see        java.lang.SecurityManager#checkPropertiesAccess()

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.System.getProperty(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定键指示的系统属性。
 <p>
首先，如果有安全管理器，则用该键作为其参数来调用 <code>checkPropertyAccess</code> 方法。结果可能导致 SecurityException。
 <p>
如果没有当前系统属性的集合，则首先用与 <code>getProperties</code> 方法相同的方式创建并初始化系统属性的集合。

@param      key   系统属性的名称。
@return    系统属性的字符串值，如果没有带有此键的属性，则返回 <code>null</code>。

@exception  SecurityException  如果安全管理器存在并且其 <code>checkPropertyAccess</code> 方法不允许访问指定的系统属性。
@exception  NullPointerException 如果 <code>key</code> 为 <code>null</code>。
@exception  IllegalArgumentException  如果 <code>key</code> 为空。
@see        #setProperty
@see        java.lang.SecurityException
@see        java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see        java.lang.System#getProperties()

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.System.getProperty(String key, String def)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取用指定键描述的系统属性。
 <p>
首先，如果有安全管理器，则用该 <code>key</code> 作为参数调用 <code>checkPropertyAccess</code> 方法。
 <p>
如果没有当前系统属性的集合，将用与 <code>getProperties</code> 方法相同的方式首先创建并初始化系统属性的集合。

@param     key   系统属性的名称。
@param     def   默认值。
@return    系统属性的字符串值，如果没有带有此键的属性，则返回默认值。

@exception  SecurityException  如果安全管理器存在并且其 <code>checkPropertyAccess</code> 方法不允许访问指定的系统属性。
@exception  NullPointerException 如果 <code>key</code> 为 <code>null</code>。
@exception  IllegalArgumentException  如果 <code>key</code> 为空。
@see        #setProperty
@see        java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see        java.lang.System#getProperties()

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.System.setProperty(String key, String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置指定键指示的系统属性。
 <p>
首先，如果安全管理器存在，则通过 <code>PropertyPermission(key, &quot;write&quot;)</code> 权限调用其 <code>SecurityManager.checkPermission</code> 方法。这可能导致抛出 SecurityException。如果没有抛出异常，则将指定属性设置为给定值。
 <p>

@param      key   系统属性的名称。
@param      value  系统属性的值。
@return     系统属性以前的值，如果没有以前的值，则返回 <code>null</code>。

@exception  SecurityException  如果安全管理器存在并且其 <code>checkPermission</code> 方法不允许设置指定属性。
@exception  NullPointerException 如果 <code>key</code> 或 <code>value</code> 为 <code>null</code>。
@exception  IllegalArgumentException  如果 <code>key</code> 为空。
@see        #getProperty
@see        java.lang.System#getProperty(java.lang.String)
@see        java.lang.System#getProperty(java.lang.String, java.lang.String)
@see        java.util.PropertyPermission
@see        SecurityManager#checkPermission
@since      1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.System.clearProperty(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定键指示的系统属性。
 <p>
首先，如果安全管理器存在，则通过 <code>PropertyPermission(key, &quot;write&quot;)</code> 权限调用其 <code>SecurityManager.checkPermission</code> 方法。这可能导致抛出 SecurityException。如果没有抛出异常，则移除指定的属性。
 <p>

@param     key   要移除的系统属性的名称。
@return    系统属性以前的字符串值，如果带有此键的属性不存在，则返回 <code>null</code>。

@exception  SecurityException  如果安全管理器存在并且其 <code>checkPropertyAccess</code> 方法不允许访问指定的系统属性。
@exception  NullPointerException 如果 <code>key</code> 为 <code>null</code>。
@exception  IllegalArgumentException  如果 <code>key</code> 为空。
@see        #getProperty
@see        #setProperty
@see        java.util.Properties
@see        java.lang.SecurityException
@see        java.lang.SecurityManager#checkPropertiesAccess()
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.System.getenv(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定的环境变量值。环境变量是一个取决于系统的外部指定的值。

<p>如果安全管理器存在，则通过 <code>{@link RuntimePermission}(&quot;getenv.&quot;+name)</code> 的权限调用其 {@link SecurityManager#checkPermission checkPermission} 方法。这可能导致抛出 {@link SecurityException}。如果没有抛出异常，则返回变量 <code>name</code> 的值。

<p><a name="EnvironmentVSSystemProperties">从概念上讲，<i>系统属性</i> 和<i>环境变量</i></a> 都是名称与值之间的映射。两种机制都能用来将用户定义的信息传递给 Java 进程。环境变量产生更多的全局效应，因为它们不仅对紧接着出现的 Java 子进程可见，而且对于定义它们的进程的所有子进程都是可见的。在不同的操作系统上，它们的语义有细微的差别，比如，不区分大小写。因为这些原因，环境变量更可能有意料不到的副作用。最好在可能的地方使用系统属性。环境变量应该在需要全局效应的时候使用，或者在外部系统接口要求使用环境变量时使用（比如 <code>PATH</code>）。

<p>在 UNIX 系统中，<code>name</code> 的字母大小写通常很重要，而在 Microsoft Windows 系统中，这通常不重要。例如，表达式 <code>System.getenv(&quot;FOO&quot;).equals(System.getenv(&quot;foo&quot;))</code> 在 Microsoft Windows 中可能为真。

@param  name 环境变量的名称
@return 变量的字符串值，如果变量不是在系统环境中定义的，则返回 <code>null</code>
@throws NullPointerException 如果 <code>name</code> 为 <code>null</code>
@throws SecurityException 如果安全管理器存在并且其 {@link SecurityManager#checkPermission checkPermission} 方法不允许访问环境变量 <code>name</code>
@see    #getenv()
@see    ProcessBuilder#environment()

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Map<java.lang.String, java.lang.String> java.lang.System.getenv()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个不能修改的当前系统环境的字符串映射视图。该环境是一个取决于系统的从名称到值的映射，它从父进程传递给子进程。

<p>如果系统不支持环境变量，则返回一个空映射。

<p>返回的映射永远不会包含 null 键或 Null 值。如果试图查询 null 键或 Null 值的存在，则会抛出 {@link NullPointerException}。如果试图查询不是 {@link String} 类型的键或值的存在，则会抛出 {@link ClassCastException}。

<p>返回的映射及其集合视图可能没有遵守 {@link Object#equals} 和 {@link Object#hashCode} 方法的通用协定。

<p>在所有的平台上，返回的映射通常都是区分大小写的。

<p>如果安全管理器存在，则通过 <code>{@link RuntimePermission}(&quot;getenv.*&quot;)</code> 权限调用 {@link SecurityManager#checkPermission checkPermission} 方法。这可能导致抛出 {@link SecurityException}。

<p>将信息传递给 Java 子进程时，<a href=#EnvironmentVSSystemProperties>系统属性</a>一般优先于环境变量。

@return 作为变量名称到值的映射的环境
@throws SecurityException  如果安全管理器存在并且其 {@link SecurityManager#checkPermission checkPermission} 方法不允许访问进程环境
@see    #getenv(String)
@see    ProcessBuilder#environment()
@since  1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.lang.System.exit(int status)
<!-- END KEY -->
<!-- BEGIN DATA -->
终止当前正在运行的 Java 虚拟机。参数用作状态码；根据惯例，非 0 的状态码表示异常终止。
 <p>
该方法调用 <code>Runtime</code> 类中的 <code>exit</code> 方法。该方法永远不会正常返回。
 <p>
调用 <code>System.exit(n)</code> 实际上等效于调用：
 <blockquote><pre>
 Runtime.getRuntime().exit(n)
 </pre></blockquote>

@param  status 退出状态。
@throws  SecurityException 如果安全管理器存在并且其 <code>checkExit</code> 方法不允许以指定状态退出。
@see        java.lang.Runtime#exit(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.lang.System.gc()
<!-- END KEY -->
<!-- BEGIN DATA -->
运行垃圾回收器。
 <p>
调用 <code>gc</code> 方法暗示着 Java 虚拟机做了一些努力来回收未用对象，以便能够快速地重用这些对象当前占用的内存。当控制权从方法调用中返回时，虚拟机已经尽最大努力从所有丢弃的对象中回收了空间。
 <p>
调用 <code>System.gc()</code> 实际上等效于调用：
 <blockquote><pre>
 Runtime.getRuntime().gc()
 </pre></blockquote>

 @see     java.lang.Runtime#gc()

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.lang.System.runFinalization()
<!-- END KEY -->
<!-- BEGIN DATA -->
运行处于挂起终止状态的所有对象的终止方法。
 <p>
调用该方法说明 Java 虚拟机做了一些努力运行已被丢弃对象的 <code>finalize</code> 方法，但是这些对象的 <code>finalize</code> 方法至今尚未运行。当控制权从方法调用中返回时，Java 虚拟机已经尽最大努力去完成所有未执行的终止方法。
 <p>
调用 <code>System.runFinalization()</code> 实际上等效于调用：
 <blockquote><pre>
 Runtime.getRuntime().runFinalization()
 </pre></blockquote>

 @see     java.lang.Runtime#runFinalization()

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.lang.System.runFinalizersOnExit(boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
在退出时启用或禁用终结；这样做可指定，拥有未被自动调用终结方法的所有对象的终结方法在退出 Java 运行库前运行。默认情况下，禁用退出时终结。

<p>如果有安全管理器，则首先使用 0 作为参数来调用其 <code>checkExit</code> 方法，以确保允许退出。这可能导致抛出 SecurityException。

@deprecated 该方法具有固有的不安全性。它可能对正在使用的对象调用终结方法，而其他线程同时正在操作这些对象，从而导致不正确的行为或死锁。
@param value  指示启用或禁用终止操作的值
@throws  SecurityException 如果安全管理器存在并且其 <code>checkExit</code> 方法不允许退出。

@see     java.lang.Runtime#exit(int)
@see     java.lang.Runtime#gc()
@see     java.lang.SecurityManager#checkExit(int)
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.lang.System.load(String filename)
<!-- END KEY -->
<!-- BEGIN DATA -->
从作为动态库的本地文件系统中以指定的文件名加载代码文件。文件名参数必须是完整的路径名。
 <p>
调用 <code>System.load(name)</code> 实际上等效于调用：
 <blockquote><pre>
 Runtime.getRuntime().load(name)
 </pre></blockquote>

@param      filename   要加载的文件。
@exception  SecurityException  如果安全管理器存在并且其 <code>checkLink</code> 方法不允许加载指定的动态库。
@exception  UnsatisfiedLinkError  如果文件不存在。
@exception  NullPointerException 如果 <code>filename</code> 为 <code>null</code>
@see        java.lang.Runtime#load(java.lang.String)
@see        java.lang.SecurityManager#checkLink(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.lang.System.loadLibrary(String libname)
<!-- END KEY -->
<!-- BEGIN DATA -->
加载由 <code>libname</code> 参数指定的系统库。将库名映射到实际系统库的方法取决于系统。
 <p>
调用 <code>System.loadLibrary(name)</code> 实际上等效于调用：
 <blockquote><pre>
 Runtime.getRuntime().loadLibrary(name)
 </pre></blockquote>

@param      libname   库名。
@exception  SecurityException  如果安全管理器存在并且其 <code>checkLink</code> 方法不允许加载指定的动态库。
@exception  UnsatisfiedLinkError  如果库不存在。
@exception  NullPointerException 如果 <code>libname</code> 为 <code>null</code>
@see        java.lang.Runtime#loadLibrary(java.lang.String)
@see        java.lang.SecurityException
@see        java.lang.SecurityManager#checkLink(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native java.lang.String java.lang.System.mapLibraryName(String libname)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个库名称映射到特定于平台的、表示本机库的字符串中。

@param      libname   库名。
@return     取决于平台的本机库名称。
@exception  NullPointerException 如果 <code>libname</code> 为 <code>null</code>。
@see        java.lang.System#loadLibrary(java.lang.String) 
@see        java.lang.ClassLoader#findLibrary(java.lang.String) 
@since      1.2

<!-- END DATA -->
