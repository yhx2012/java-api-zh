<!-- BEGIN KEY -->
public final class java.lang.Long extends java.lang.Number implements java.lang.Comparable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Long</code> 类在对象中包装了基本类型 <code>long</code> 的值。每个 <code>Long</code> 类型的对象都包含一个 <code>long</code> 类型的字段。

<p> 

此外，该类提供了多个方法，可以将 <code>long</code> 转换为 <code>String</code>，将 <code>String</code> 转换为 <code>long</code>，除此之外，还提供了其他一些处理 <code>long</code> 时有用的常量和方法。

<p>实现注意事项：&quot;bit twiddling&quot; 方法（如 {@link #highestOneBit(long) highestOneBit} 和 {@link #numberOfTrailingZeros(long) numberOfTrailingZeros}）的实现基于 Henry S. Warren 和 Jr. 撰写的 <i>Hacker's Delight</i> (Addison Wesley, 2002) 一书中的资料。

@author  Lee Boynton 
@author  Arthur van Hoff 
@author  Josh Bloch 
@version 1.79, 05/11/04 
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.lang.Long.MIN_VALUE
<!-- END KEY -->
<!-- BEGIN DATA -->
保持 <code>long</code> 类型的最小值的常量，该值为 -2<sup>63</sup>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.lang.Long.MAX_VALUE
<!-- END KEY -->
<!-- BEGIN DATA -->
保持 <code>long</code> 类型的最大值的常量，该值为 2<sup>63</sup>-1。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Class<java.lang.Long> java.lang.Long.TYPE
<!-- END KEY -->
<!-- BEGIN DATA -->
表示基本类型 <code>long</code> 的 <code>Class</code> 实例。

@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.Long.SIZE
<!-- END KEY -->
<!-- BEGIN DATA -->
用来以二进制补码形式表示 <tt>long</tt> 值的位数。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private final long java.lang.Long.value
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Long</code> 的值。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Long(long value)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造新分配的 <code>Long</code> 对象，表示指定的 <code>long</code> 参数。

@param   value   <code>Long</code> 对象表示的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Long(String s) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造新分配的 <code>Long</code> 对象，表示由 <code>String</code> 参数指示的 <code>long</code> 值。该字符串被转换为 <code>long</code> 值，其方式与 radix 参数为 10 的 <code>parseLong</code> 方法所使用的方式一致。

@param      s   要转换为 <code>Long</code> 的 <code>String</code>。
@exception  NumberFormatException  如果 <code>String</code> 不包含可解析的 <code>long</code>。
@see        java.lang.Long#parseLong(java.lang.String, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.Long.toString(long i, int radix)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在使用第二个参数指定的基数时第一个参数的字符串表示形式。
 <p>
如果该基数小于 <code>Character.MIN_RADIX</code>，或大于 <code>Character.MAX_RADIX</code>，则使用基数 <code>10</code>。
 <p>
如果第一个参数是负数，则结果的第一个元素是 ASCII 字符的减号 <code>'-'</code> (<code>'\u002d'</code>)。如果第一个参数非负，则结果中不会出现符号字符。
 <p>
结果的其余字符表示第一个参数的大小。如果大小为零，则用单个零字符 <code>'0'</code> 表示它 (<code>'\u0030'</code>)；否则大小表示形式中的第一个字符将不是零字符。以下 ASCII 字符均被用作数字：
 <blockquote><pre>
0123456789abcdefghijklmnopqrstuvwxyz
 </pre></blockquote>
这些是从 <code>'\u0030'</code> 到 <code>'\u0039'</code> 和从 <code>'\u0061'</code> 到 <code>'\u007a'</code> 的字符。如果 <code>radix</code> 是 <var>N</var>，则这些字符的第一个 <var>N</var> 用作显示顺序中基数 <var>N</var> 的数字。因此，该数字的十六进制（基数 16）表示形式为 <code>0123456789abcdef</code>。如果需要使用大写字母，则可以在结果上调用 {@link java.lang.String#toUpperCase()} 方法：
 <blockquote><pre>
Long.toString(n, 16).toUpperCase()
 </pre></blockquote>
 
@param   i       要转换为字符串的 <code>long</code>。
@param   radix   将在字符串表示形式中使用的基数。
@return  指定基数中参数的字符串表示形式。
@see     java.lang.Character#MAX_RADIX 
@see     java.lang.Character#MIN_RADIX

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.Long.toHexString(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
以十六进制无符号整数形式返回 <code>long</code> 参数的字符串表示形式。
 <p>
如果参数为负，则无符号 <code>long</code> 值为该参数加上 2<sup>64</sup>；否则，它等于该参数。此值将被转换为不带附加前导 <code>0</code> 的十六进制（基数 16）ASCII 数字字符串。如果无符号大小为零，则该数字由单个零字符 <code>'0'</code> 表示 (<code>'\u0030'</code>)；否则，无符号大小表示形式中的第一个字符将不是零字符。下列字符都被用作十六进制数字：
 <blockquote><pre>
0123456789abcdef
 </pre></blockquote>
这些是从 <code>'\u0030'</code> 到 <code>'\u0039'</code> 和从 <code>'\u0061'</code> 到 <code>'\u0066'</code> 的字符。如果需要使用大写字母，则可以在结果上调用 {@link java.lang.String#toUpperCase()} 方法：
 <blockquote><pre>
Long.toHexString(n).toUpperCase()
 </pre></blockquote>

@param   i       要转换为字符串的 <code>long</code>。
@return  十六进制（基数 16）参数表示的无符号 <code>long</code> 值的字符串表示形式。
@since   JDK 1.0.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.Long.toOctalString(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
以八进制无符号整数形式返回 <code>long</code> 参数的字符串表示形式。
 <p>
如果参数为负，则无符号 <code>long</code> 值为该参数加上 2<sup>64</sup>；否则，它等于该参数。此值将被转换为不带附加前导 <code>0</code> 的八进制（基数 8）ASCII 数字字符串。
 <p>
如果无符号大小为零，则该数字用单个零字符 <code>'0'</code> (<code>'\u0030'</code>) 表示，否则无符号大小表示形式中的第一个字符将不是零字符。以下字符都用作八进制数字：
 <blockquote><pre>
 01234567
 </pre></blockquote>
这些是从 <code>'\u0030'</code> 到 <code>'\u0037'</code> 的字符。 

@param   i       要转换为字符串的 <code>long</code>。
@return  八进制（基数 8）参数表示的无符号 <code>long</code> 值的字符串表示形式。
@since   JDK 1.0.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.Long.toBinaryString(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
以二进制无符号整数形式返回 <code>long</code> 参数的字符串表示形式。
 <p>
如果参数为负数，则无符号 <code>long</code> 值为该参数加上 2<sup>64</sup>；否则，它等于该参数。此值将被转换为不带附加前导 <code>0</code> 的二进制（基数 2）ASCII 数字字符串。如果无符号大小为零，则用单个零字符 <code>'0'</code> 表示它 (<code>'\u0030'</code>)；否则，无符号大小表示形式中的第一个字符将不是零字符。字符 <code>'0'</code> (<code>'\u0030'</code>) 和 <code>'1'</code> (<code>'\u0031'</code>) 被用作二进制位。

@param   i       要转换为字符串的 <code>long</code>。
@return  二进制 (base 2) 参数表示的无符号 <code>long</code> 值的字符串表示形式。
@since   JDK 1.0.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.Long.toString(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示指定 <code>long</code> 的 <code>String</code> 对象。该参数被转换为有符号的十进制表示形式，并作为字符串返回，该字符串与用该参数和基数 10 作为参数的 {@link #toString(long, int)} 方法所得到的值非常相似。

@param   i   要转换的 <code>long</code>。
@return  十进制参数的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Long.parseLong(String s, int radix) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 string 参数解析为有符号的 <code>long</code>，基数由第二个参数指定。字符串中的字符必须为指定基数中的数字（由 {@link java.lang.Character#digit(char, int)} 是否返回一个非负值来确定），除非第一个字符为 ASCII 字符的减号 <code>'-'</code> (<code>'\u002D'</code>)，它表示一个负值。返回得到的 <code>long</code> 值。
 <p>
注意，不允许将字符 <code>L</code> (<code>'\u004C'</code>) 和 <code>l</code> (<code>'\u006C'</code>) 作为类型指示符出现在字符串的结尾处，而这一点在 Java 编程语言源代码中是允许的&mdash;&mdash;除非 <code>L</code> 或 <code>l</code> 以大于 22 的基数形式出现。
 <p>
如果出现以下情形之一，则抛出 <code>NumberFormatException</code> 类型的异常：
 <ul>
<li>第一个参数是 <code>null</code> 或零长度的字符串。
<li><code>radix</code> 小于 {@link java.lang.Character#MIN_RADIX} 或者大于 {@link java.lang.Character#MAX_RADIX}。
<li>任何字符串的字符都不是指定基数的数字，除非第一个字符是减号 <code>'-'</code> (<code>'\u002d'</code>)，假定字符串的长度大于 1。
<li>字符串表示的值不是 <code>long</code> 类型的值。 
</ul><p>
示例：
<blockquote><pre>
parseLong(&quot;0&quot;, 10) returns 0L
parseLong(&quot;473&quot;, 10) returns 473L
parseLong(&quot;-0&quot;, 10) returns 0L
parseLong(&quot;-FF&quot;, 16) returns -255L
parseLong(&quot;1100110&quot;, 2) returns 102L
parseLong(&quot;99&quot;, 8) returns NumberFormatException
parseLong(&quot;Hazelnut&quot;, 10) returns NumberFormatException
parseLong(&quot;Hazelnut&quot;, 36) returns 1356099454469L
</pre></blockquote>
 
@param      s       包含要解析的 <code>long</code> 表示形式的 <code>String</code>。
@param      radix   将在解析 <code>s</code> 时使用的基数。
@return     由指定基数中的字符串参数表示的 <code>long</code>。
@exception  NumberFormatException  如果字符串不包含可解析的 <code>long</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Long.parseLong(String s) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 string 参数解析为有符号十进制 <code>long</code>。字符串中的字符必须都是十进制数字，除非第一个字符是 ASCII 字符的减号 <code>'-'</code> (<code>\u002D'</code>)，它表示一个负值。返回得到的 <code>long</code> 值，该值与用该参数和基数 <code>10</code> 作为参数的 {@link #parseLong(java.lang.String, int)} 方法得到的值非常相似。
 <p>
注意，不允许将字符 <code>L</code> (<code>'\u004C'</code>) 和 <code>l</code> (<code>'\u006C'</code>) 作为类型指示符出现在字符串的结尾处，这一点在 Java 编程语言源代码中是允许的。

@param      s   包含要解析的 <code>long</code> 表示形式的 <code>String</code> 
@return     十进制参数表示的 <code>long</code>。
@exception  NumberFormatException  如果字符串不包含可解析的 <code>long</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Long java.lang.Long.valueOf(String s, int radix) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
当使用第二个参数给出的基数进行解析时，返回保持从指定 <code>String</code> 中提取的值的 <code>Long</code> 对象。第一个参数被解释为有符号的 <code>long</code>，基数由第二个参数指定，该值与用该参数作为参数的 {@link #parseLong(java.lang.String, int)} 方法得到的值非常类似。结果是表示字符串指定的 <code>long</code> 值的 <code>Long</code> 对象。
 <p>
换句话说，此方法返回一个 <code>Long</code> 对象，它的值等于：

<blockquote><code>new Long(Long.parseLong(s, radix))</code></blockquote>

@param      s       要解析的字符串 
@param      radix   将在解释 <code>s</code> 时使用的基数 
@return     保持由指定基数中的字符串参数表示的值的 <code>Long</code> 对象。
@exception  NumberFormatException  如果 <code>String</code> 不包含可解析的 <code>long</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Long java.lang.Long.valueOf(String s) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回保持指定 <code>String</code> 的值的 <code>Long</code> 对象。该参数被解释为表示一个有符号的十进制 <code>long</code>，该值与用该参数作为参数的 {@link #parseLong(java.lang.String)} 方法得到的值非常相似。结果是表示由字符串指定的整数值的 <code>Long</code> 对象。
 <p>
换句话说，此方法返回一个 <code>Long</code> 对象，它的值等于：

 <blockquote><pre>
new Long(Long.parseLong(s))
 </pre></blockquote>

@param      s   要解析的字符串。
@return     包含由字符串参数表示的值的 <code>Long</code> 对象。
@exception  NumberFormatException  如果不能将字符串解析为 <code>long</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Long java.lang.Long.valueOf(long l)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示指定 <tt>long</tt> 值的 <tt>Long</tt> 实例。如果不需要新的 <tt>Long</tt> 实例，则通常优先使用此方法，而不是使用构造方法 {@link #Long(long)}，因为此方法通过缓存频繁请求的值，可以显著提高时间和空间性能。

@param  l long 值。
@return 表示 <tt>l</tt> 的 <tt>Long</tt> 实例。
@since  1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Long java.lang.Long.decode(String nm) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>String</code> 解码成 <code>Long</code>。接受通过以下语法给出的十进制、十六进制和八进制数：

<blockquote>
<dl>
<dt><i>DecodableString:</i>
<dd><i>Sign<sub>opt</sub> DecimalNumeral</i>
<dd><i>Sign<sub>opt</sub></i> <code>0x</code> <i>HexDigits</i>
<dd><i>Sign<sub>opt</sub></i> <code>0X</code> <i>HexDigits</i>
<dd><i>Sign<sub>opt</sub></i> <code>#</code> <i>HexDigits</i>
<dd><i>Sign<sub>opt</sub></i> <code>0</code> <i>OctalDigits</i>
<p>
<dt><i>Sign:</i>
<dd><code>-</code>
</dl>
</blockquote>

<i>DecimalNumeral</i>、<i>HexDigits</i> 和 <i>OctalDigits</i> 在 <a href="http://java.sun.com/docs/books/jls/html/">Java Language Specification</a> 中的<a href="http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#48282">&sect;3.10.1</a> 中已经定义。
<p>
跟在（可选）负号和/或基数说明符（&quot;<code>0x</code>&quot;、&quot;<code>0X</code>&quot;、&quot;<code>#</code>&quot; 或前导零）后面的字符的顺序由 <code>Long.parseLong</code> 方法通过指示的基数（10、16 或 8）来解析。字符的顺序必须表示为一个正值，否则将抛出 {@link NumberFormatException}。如果指定 <code>String</code> 的第一个字符是减号，则结果无效。<code>String</code> 中不允许出现空白字符。

@param     nm 要解码的 <code>String</code>。
@return    保持由 <code>nm</code> 表示的 <code>long</code> 值的 <code>Long</code> 对象
@exception NumberFormatException  如果 <code>String</code> 不包含可解析的 <code>long</code>。
@see java.lang.Long#parseLong(String, int) 
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte java.lang.Long.byteValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>byte</code> 形式返回此 <code>Long</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public short java.lang.Long.shortValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>short</code> 形式返回此 <code>Long</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.Long.intValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>int</code> 形式返回此 <code>Long</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.lang.Long.longValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>long</code> 值的形式返回此 <code>Long</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.lang.Long.floatValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>float</code> 形式返回此 <code>Long</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.lang.Long.doubleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 形式返回此 <code>Long</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.Long.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示 <code>Long</code> 值的 <code>String</code> 对象。该值被转换为有符号十进制表示形式，并作为字符串返回，该字符串与用 <code>long</code> 值作为参数的 {@link java.lang.Long#toString(long)} 方法得到的字符串非常相似。

@return  十进制对象值的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.Long.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>Long</code> 的哈希码。结果是此 <code>Long</code> 对象保持的基本 <code>long</code> 值的两个部分的异或 (XOR)。也就是说，哈希码就是表达式的值：
 <blockquote><pre>
(int)(this.longValue()^(this.longValue()&gt;&gt;&gt;32))
 </pre></blockquote>

@return  此对象的哈希码值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.Long.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此对象与指定对象进行比较。当且仅当该参数不是 <code>null</code>，且 <code>Long</code> 对象与此对象包含相同的 <code>long</code> 值时，结果才为 <code>true</code>。

@param   obj   要与之进行比较的对象。
@return  如果对象相同，则返回 <code>true</code>；否则，返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Long java.lang.Long.getLong(String nm)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定具有指定名称的系统属性的 <code>long</code> 值。
<p>
第一个参数被视为系统属性的名称。通过 {@link java.lang.System#getProperty(java.lang.String)} 方法可以访问该系统属性。然后，以 <code>long</code> 值的形式解释此属性的字符串值，并返回表示此值的 <code>Long</code> 对象。在 <code>getProperty</code> 的定义中可以找到可能的数字格式的详细信息。
<p>
如果指定名称没有属性，或者指定名称为空或 <code>null</code>，抑或属性不具有正确的数字格式时，则返回 <code>null</code>。
<p>
换句话说，此方法返回一个 <code>Long</code> 对象，它的值等于：
<blockquote><code>getLong(nm, null)</code></blockquote>

@param   nm   属性名。
@return  属性的 <code>Long</code> 值。
@see     java.lang.System#getProperty(java.lang.String) 
@see     java.lang.System#getProperty(java.lang.String, java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Long java.lang.Long.getLong(String nm, long val)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定名称确定系统属性的 <code>long</code> 值。
 <p>
第一个参数被视为系统属性的名称。通过 {@link java.lang.System#getProperty(java.lang.String)} 方法可以访问该系统属性。然后，以 <code>long</code> 值的形式解释此属性的字符串值，并返回表示此值的 <code>Long</code> 对象。在 <code>getProperty</code> 的定义中可以找到可能的数字格式的详细信息。
 <p>
第二个参数是默认值。如果指定的名称没有属性，或者该属性不具备正确的数字格式，抑或指定名称为空或 null，则返回表示第二个参数的值的 <code>Long</code> 对象。
 <p>
换句话说，此方法返回一个 <code>Long</code> 对象，它的值等于：
<blockquote><code>getLong(nm, new Long(val))</code></blockquote>
但是实际上，它可能通过以下方式实现： 
 <blockquote><pre>
Long result = getLong(nm, null);
return (result == null) ? new Long(val) :result;
 </pre></blockquote>
这样可以避免不需要默认值时进行的不必要的 <code>Long</code> 对象分配。 

@param   nm   属性名。
@param   val   默认值。
@return  属性的 <code>Long</code> 值。
@see     java.lang.System#getProperty(java.lang.String) 
@see     java.lang.System#getProperty(java.lang.String, java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Long java.lang.Long.getLong(String nm, Long val)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定名称返回系统属性的 <code>long</code> 值。第一个参数被视为系统属性的名称。通过 {@link java.lang.System#getProperty(java.lang.String)} 方法可以访问该系统属性。然后，以 <code>long</code> 值的形式解释此属性的字符串值，并且按照 <code>Long.decode</code> 方法返回表示此值的 <code>Long</code> 对象。
 <p><ul>
<li>如果该属性值以两个 ASCII 字符 <code>0x</code> 或 ASCII 字符 <code>#</code> 开头，后面没有跟减号，则将该属性的其余部分解析为一个十六进制整数，该值与调用参数 radix 为 16 的 {@link #valueOf(java.lang.String, int)} 方法得到的值非常相似。
<li>如果该属性值以 ASCII 字符 <code>0</code> 开头，后跟别的字符，则将它解析为一个八进制整数，该值与调用参数 radix 为 8 的 {@link #valueOf(java.lang.String, int)} 方法得到的值非常相似。
<li>否则，将属性值解析为一个十进制整数，该值与调用参数 radix 为 10 的 {@link #valueOf(java.lang.String, int)} 方法得到的值非常相似。
 </ul>
 <p>
注意，在所有情况下，都不允许将 <code>L</code> (<code>'\u004C'</code>) 和 <code>l</code> (<code>'\u006C'</code>) 作为类型指示符出现在属性值的结尾处，这一点在 Java 编程语言源代码中是允许的。
 <p>
第二个参数是默认值。如果指定的名称没有属性，或者属性不具有正确的数字格式，抑或指定名称为空或 <code>null</code>，则返回默认值。

@param   nm   属性名。
@param   val   默认值。
@return  属性的 <code>Long</code> 值。
@see     java.lang.System#getProperty(java.lang.String) 
@see java.lang.System#getProperty(java.lang.String, java.lang.String) 
@see java.lang.Long#decode

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.Long.compareTo(Long anotherLong)
<!-- END KEY -->
<!-- BEGIN DATA -->
在数字上比较两个 <code>Long</code> 对象。

@param   anotherLong   要比较的 <code>Long</code>。
@return	如果 <code>Long</code> 等于参数 <code>Long</code>，则返回 <code>0</code> 值；如果 <code>Long</code> 在数字上小于参数 <code>Long</code>，则返回小于 <code>0</code> 的值；如果 <code>Long</code> 在数字上大于参数 <code>Long</code>，则返回大于 <code>0</code> 的值（有符号比较）。
@since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Long.highestOneBit(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回至多有一个 1 位的 <tt>long</tt> 值，在指定的 <tt>long</tt> 值中最高位（最左边）的 1 位的位置。如果指定值在其二进制补码表示形式中没有 1 位，即等于零，则返回零。

@return 返回具有单个 1 位的 <tt>long</tt> 值，在指定值中最高位的 1 位的位置；否则，如果指定值本身等于零，则返回零。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Long.lowestOneBit(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回至多有一个 1 位的 <tt>long</tt> 值，在指定的 <tt>long</tt> 值中最低位（最右边）的 1 位的位置。如果指定值在其二进制补码表示形式中没有 1 位，即等于零，则返回零。

@return 返回具有单个 1 位的 <tt>long</tt> 值，在指定值中最低位的 1 位的位置；否则，如果指定值本身等于零，则返回零。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Long.numberOfLeadingZeros(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
在指定 <tt>long</tt> 值的二进制补码表示形式中最高位（最左边）的 1 位之前，返回零位的数量。如果指定值在其二进制补码表示形式中不存在 1 位，换句话说，如果它等于零，则返回 64。

<p>注意，此方法与二进制对数密切相关。对于所有的正 <tt>long</tt> 值 x：
 <ul>
<li>floor(log<sub>2</sub>(x)) = <tt>63 - numberOfLeadingZeros(x)</tt>
<li>ceil(log<sub>2</sub>(x)) = <tt>64 - numberOfLeadingZeros(x - 1)</tt>
 </ul>

@return 返回在指定 <tt>long</tt> 值的二进制补码表示形式中最高位（最左边）的 1 位之前的零位的数量；否则，如果该值等于零，则返回 64。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Long.numberOfTrailingZeros(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在指定 <tt>long</tt> 值的二进制补码表示形式中最低位（最右边）的 1 位之后的零位的数量。如果指定值在其二进制补码表示形式中不存在 1 位，换句话说，如果它等于零，则返回 64。

@return 返回在指定 <tt>long</tt> 值的二进制补码表示形式中最低位（最右边）的 1 位之后零位的数量；否则，如果该值等于零，则返回 64。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Long.bitCount(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 <tt>long</tt> 值的二进制补码表示形式中的 1 位的数量。此功能有时被称为<i>填充计算</i>。

@return 返回指定 <tt>long</tt> 值的二进制补码表示形式的 1 位的数量。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Long.rotateLeft(long i, int distance)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回根据指定的位数循环左移指定的 <tt>long</tt> 值的二进制补码表示形式而得到的值。（位是从左边（即高位）移出，从右边（即低位）再进入）

<p>注意，使用负距离的左循环等同于右循环：<tt>rotateLeft(val, -distance) == rotateRight(val, distance)</tt>。另请注意，使用 64 的倍数循环无效，因此除了最后六位，所有循环距离都可以忽略，即使距离是负值：<tt>rotateLeft(val, distance) == rotateLeft(val, distance &amp; 0x3F)</tt>。


@return 返回根据指定的位数循环左移指定的 <tt>long</tt> 值的二进制补码表示形式而得到的值。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Long.rotateRight(long i, int distance)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回根据指定的位数循环右移指定的 <tt>long</tt> 值的二进制补码表示形式而得到的值。（位是从右边（即低位）移出，从左边（即高位）再进入）


<p>注意，使用负距离右循环等于左循环：<tt>rotateRight(val, -distance) == rotateLeft(val, distance)</tt>。另请注意，使用 64 的倍数循环无效，因此除了最后六位，所有循环距离都可以忽略，即使距离是负值：<tt>rotateRight(val, distance) == rotateRight(val, distance &amp; 0x3F)</tt>。


@return 返回根据指定的位数循环右移指定的 <tt>long</tt> 值的二进制补码表示形式而得到的值。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Long.reverse(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回通过反转指定 <tt>long</tt> 值的二进制补码表示形式中位的顺序而获得的值。

@return 返回通过反转指定 <tt>long</tt> 值中位的顺序而获得的值。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Long.signum(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 <tt>long</tt> 值的符号函数。（如果指定值为负，则返回值 -1；如果指定值为零，则返回 0；如果指定值为正，则返回 1。）

@return 返回指定 <tt>long</tt> 值的符号函数。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Long.reverseBytes(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回通过反转指定 <tt>long</tt> 值的二进制补码表示形式中字节的顺序而获得的值。

@return 返回通过反转指定 <tt>long</tt> 值中的字节而获得的值。
@since 1.5

<!-- END DATA -->
