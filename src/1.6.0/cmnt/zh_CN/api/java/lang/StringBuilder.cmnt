<!-- BEGIN KEY -->
public final class java.lang.StringBuilder extends java.lang.AbstractStringBuilder implements java.io.Serializable, java.lang.CharSequence
<!-- END KEY -->
<!-- BEGIN DATA -->
一个可变的字符序列。此类提供一个与 <code>StringBuffer</code> 兼容的 API，但不保证同步。该类被设计用作 <code>StringBuffer</code> 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。如果可能，建议优先采用该类，因为在大多数实现中，它比 <code>StringBuffer</code> 要快。
 
<p>在 <code>StringBuilder</code> 上的主要操作是 <code>append</code> 和 <code>insert</code> 方法，可重载这些方法，以接受任意类型的数据。每个方法都能有效地将给定的数据转换成字符串，然后将该字符串的字符添加或插入到字符串生成器中。<code>append</code> 方法始终将这些字符添加到生成器的末端；而 <code>insert</code> 方法则在指定的点添加字符。
 <p>
例如，如果 <code>z</code> 引用一个当前内容为&ldquo;<code>start</code>&rdquo;的字符串生成器对象，则该方法调用 <code>z.append(&quot;le&quot;)</code> 将使字符串生成器包含&ldquo;<code>startle</code>&rdquo;，而 <code>z.insert(4, &quot;le&quot;)</code> 将更改字符串生成器，使之包含&ldquo;<code>starlet</code>&rdquo;。
 <p>
通常，如果 sb 引用 <code>StringBuilder</code> 的实例，则 <code>sb.append(x)</code> 和 <code>sb.insert(sb.length(),&nbsp;x)</code> 具有相同的效果。

每个字符串生成器都有一定的容量。只要字符串生成器所包含的字符序列的长度没有超出此容量，就无需分配新的内部缓冲区。如果内部缓冲区溢出，则此容量自动增大。

<p>将 <code>StringBuilder</code> 的实例用于多个线程是不安全的。如果需要这样的同步，则建议使用 {@link java.lang.StringBuffer}。

@author      Michael McCloskey
@version     1.9, 07/16/04
@see         java.lang.StringBuffer
@see         java.lang.String
@since	      1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个其中不带字符的字符串生成器，初始容量为 16 个字符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder(int capacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个其中不带字符的字符串生成器，初始容量由 <code>capacity</code> 参数指定。

@param      capacity  初始容量。
@throws     NegativeArraySizeException  如果 <code>capacity</code> 参数小于 <code>0</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder(String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个字符串生成器，并初始化为指定的字符串内容。该字符串生成器的初始容量为 <code>16</code> 加上字符串参数的长度。

@param     str   缓冲区的初始内容。
@throws    NullPointerException 如果 <code>str</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder(CharSequence seq)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个字符串生成器，包含与指定的 <code>CharSequence</code> 相同的字符。该字符串生成器的初始容量为 <code>16</code> 加上 <code>CharSequence</code> 参数的长度。

@param     seq   要复制的序列。
@throws    NullPointerException 如果 <code>seq</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.append(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
@see     java.lang.String#valueOf(java.lang.Object)
@see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.append(StringBuffer sb)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的 <tt>StringBuffer</tt> 添加到此序列。
 <p>
按顺序将 <tt>StringBuffer </tt>参数中的字符添加到该序列中，使该序列在长度上增加该参数的长度。如果 <tt>sb</tt> 为 <tt>null</tt>，则向该序列中添加 4 个 <tt>&quot;null&quot;</tt> 字符。
 <p>
在执行 <tt>append</tt> 方法前，让此字符序列的长度为 <i>n</i>。如果 <i>k</i> 小于 <i>n</i>，则新字符序列中索引 <i>k</i> 处的字符等于原有序列中索引 <i>k</i> 处的字符；否则它等于参数 <code>sb</code> 中索引 <i>k-n</i> 处的字符。

@param   sb   要添加的 <tt>StringBuffer</tt>。
@return  此对象的一个引用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.append(CharSequence s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.append(CharSequence s, int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws     IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.append(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see     java.lang.String#valueOf(boolean)
 @see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.append(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see     java.lang.String#valueOf(int)
 @see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.append(long lng)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see     java.lang.String#valueOf(long)
 @see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.append(float f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see     java.lang.String#valueOf(float)
 @see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.append(double d)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see     java.lang.String#valueOf(double)
 @see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.appendCodePoint(int codePoint)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.delete(int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.deleteCharAt(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.replace(int start, int end, String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int index, char[] str, int offset, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int offset, Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(java.lang.Object)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int offset, String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int offset, char[] str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int dstOffset, CharSequence s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int dstOffset, CharSequence s, int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int offset, boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(boolean)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int offset, char c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IndexOutOfBoundsException {@inheritDoc}
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int offset, int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(int)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int offset, long l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(long)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int offset, float f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(float)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int offset, double d)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(double)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.StringBuilder.indexOf(String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.StringBuilder.indexOf(String str, int fromIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.StringBuilder.lastIndexOf(String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.StringBuilder.lastIndexOf(String str, int fromIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.lang.StringBuilder.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
调用 readObject，从流中恢复 StringBuffer 的状态。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.lang.StringBuilder.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <tt>StringBuilder</tt> 实例的状态保存到流中（也就是将其序列化）。

@serialData 当前存储在字符串生成器中的字符数（<tt>int</tt>），后跟字符串生成器中的字符（<tt>char[]</tt>）。<tt>char</tt> 数组的长度可能大于当前存储在字符串生成器中的字符数，在这种情况下，将忽略多出的字符。

<!-- END DATA -->
