<!-- BEGIN KEY -->
public final class java.lang.StackTraceElement extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
堆栈跟踪中的元素，它由 {@link Throwable#getStackTrace()} 返回。每个元素表示单独的一个堆栈帧。所有的堆栈帧（堆栈顶部的那个堆栈帧除外）都表示一个方法调用。堆栈顶部的帧表示生成堆栈跟踪的执行点。通常，这是创建对应于堆栈跟踪的 throwable 的点。

@since  1.4
@author Josh Bloch

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StackTraceElement(String declaringClass, String methodName, String fileName, int lineNumber)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建表示指定执行点的堆栈跟踪元素。

@param declaringClass 类的完全限定名，该类包含由堆栈跟踪元素所表示的执行点
@param methodName 方法名，该方法包含由堆栈跟踪元素所表示的执行点
@param fileName 文件名，该文件包含由堆栈跟踪元素所表示的执行点；如果该信息不可用，则该参数为 <tt>null</tt>
@param lineNumber 源代码行的行号，该代码行包含由堆栈跟踪元素所表示的执行点；如果此信息不可用，则该参数为负数。值 -2 表示包含执行点的方法是一个本机方法  
@throws NullPointerException 如果 <tt>declaringClass</tt> 或 <tt>methodName</tt> 为 null
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.StackTraceElement.getFileName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回源文件名，该文件包含由该堆栈跟踪元素所表示的执行点。通常，这对应于相关 <tt>class</tt> 文件的 <tt>SourceFile</tt> 属性（根据 <i>The Java Virtual Machine Specification</i> 中的第 4.7.7 小节）。在某些系统中，该名称可能指的是源代码单元而不是某个文件，如源存储库中的某个项。

@return 文件名，该文件包含由该堆栈跟踪元素所表示的执行点；如果该信息不可用，则返回 <tt>null</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.StackTraceElement.getLineNumber()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回源行的行号，该行包含由该堆栈该跟踪元素所表示的执行点。通常，该方法派生自相关 <tt>class</tt> 文件的 <tt>LineNumberTable</tt> 属性（根据 <i>The Java Virtual Machine Specification</i> 中的第 4.7.8 小节）。

@return 源代码行的行号，该代码行包含由该堆栈跟踪元素所表示的执行点；如果该信息不可用，则返回负数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.StackTraceElement.getClassName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回类的完全限定名，该类包含由该堆栈跟踪元素所表示的执行点。

@return <tt>Class</tt> 的完全限定名，该类包含由该堆栈跟踪元素所表示的执行点。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.StackTraceElement.getMethodName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回方法名，此方法包含由该堆栈跟踪元素所表示的执行点。如果执行点包含在某个实例或类初始化程序中，则此方法将返回适当的<i>特殊方法名</i>：<tt>&lt;init&gt;</tt> 或 <tt>&lt;clinit&gt;</tt>（根据 <i>The Java Virtual Machine Specification</i> 中的第 3.9 节）。

@return 方法名，该方法包含由该堆栈跟踪元素所表示的执行点。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.StackTraceElement.isNativeMethod()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果包含由该堆栈跟踪元素所表示的执行点的方法是一个本机方法，则返回 true。

@return 如果包含由该堆栈跟踪元素所表示的执行点的方法是一个本机方法，则返回 <tt>true</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.StackTraceElement.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示该堆栈跟踪元素的字符串。该字符串的格式取决于实现，但是可将以下示例格式视为典型的格式：
 <ul>
 <li>
<tt>&quot;MyClass.mash(MyClass.java:9)&quot;</tt> - 其中，<tt>&quot;MyClass&quot;</tt> 是类的<i>完全限定名</i>，该类包含由该堆栈跟踪元素所表示的执行点；<tt>&quot;mash&quot;</tt> 是包含执行点的方法的名字；<tt>&quot;MyClass.java&quot;</tt> 是包含执行点的源文件；<tt>&quot;9&quot;</tt> 是包含执行点的源行的行号。
 <li>
<tt>&quot;MyClass.mash(MyClass.java)&quot;</tt> - 同上，但是行号不可用。
 <li>
<tt>&quot;MyClass.mash(Unknown Source)&quot;</tt> - 同上，但是文件名和行号都不可用。
 <li>
<tt>&quot;MyClass.mash(Native Method)&quot;</tt> - 同上，但是文件名和行号都不可用，并且已知包含执行点的方法是本机方法。
 </ul>
 @see    Throwable#printStackTrace()

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.StackTraceElement.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果指定的对象是另一个 <tt>StackTraceElement</tt> 实例，并且该对象表示的执行点与该实例的相同，则返回 ture。当且仅当满足下列条件时，堆栈跟踪元素 <tt>a</tt> 和 <tt>b</tt> 相同：
 <pre>
     equals(a.getFileName(), b.getFileName()) &&
     a.getLineNumber() == b.getLineNumber()) &&
     equals(a.getClassName(), b.getClassName()) &&
     equals(a.getMethodName(), b.getMethodName())
 </pre>
其中定义 <tt>equals</tt> 为：
 <pre>
     static boolean equals(Object a, Object b) {
         return a==b || (a != null &amp;&amp; a.equals(b));
     }
 </pre>
 
@param  obj 要与该堆栈跟踪元素相比较的对象。
@return 如果指定的对象是另一个 <tt>StackTraceElement</tt> 实例，并且该对象表示的执行点与该实例的相同，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.StackTraceElement.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此堆栈跟踪元素的哈希码值。

<!-- END DATA -->
