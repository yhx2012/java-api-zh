<!-- BEGIN KEY -->
public final class java.lang.Compiler extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Compiler</code> 类主要支持 Java 到本机代码的编译器及相关服务。根据设计，<code>Compiler</code> 类不做任何事情，它充当一个 JIT 编译器实现的占位符。
<p>
当第一次启动 Java 虚拟机时，它将确定系统属性 <code>java.compiler</code> 是否存在。（系统属性可通过 <code>System</code> 类定义的 <code>getProperty</code> 方法来访问。）如果存在，它将被假定为一个库名（带有特定于平台的确切位置和类型）；可以调用 <code>System</code> 类中的 <code>loadLibrary</code> 方法来加载此库。如果加载成功，则调用该库中名为 <code>java_lang_Compiler_start()</code> 的函数。
<p>
如果没有可用的编译器，那么上述这些方法不执行任何操作。

@author  Frank Yellin
@version 1.20, 05/05/04
@see     java.lang.System#getProperty(java.lang.String)
@see     java.lang.System#getProperty(java.lang.String, java.lang.String)
@see     java.lang.System#loadLibrary(java.lang.String)
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native boolean java.lang.Compiler.compileClass(java.lang.Class<?> clazz)
<!-- END KEY -->
<!-- BEGIN DATA -->
编译指定的类。

@param   clazz   一个类。
@return  如果编译成功，则返回 <code>true</code>；如果编译失败或没有可用的编译器，则返回 <code>false</code>。
@exception NullPointerException 如果 <code>clazz</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native boolean java.lang.Compiler.compileClasses(String string)
<!-- END KEY -->
<!-- BEGIN DATA -->
编译那些名称与指定字符串相匹配的所有类。

@param   string   要编译的类的名称。
@return  如果编译成功，则返回 <code>true</code>；如果编译失败或没有可用的编译器，则返回 <code>false</code>。
@exception NullPointerException 如果 <code>string</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native java.lang.Object java.lang.Compiler.command(Object any)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查参数类型及其字段，并执行一些文档操作。不需要指定特殊操作。

@param   any   参数。
@return  特定于编译器的值；如果没有可用编译器，则返回 <code>null</code>。
@exception NullPointerException 如果 <code>any</code> 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native void java.lang.Compiler.enable()
<!-- END KEY -->
<!-- BEGIN DATA -->
使编译器恢复操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native void java.lang.Compiler.disable()
<!-- END KEY -->
<!-- BEGIN DATA -->
使编译器停止操作。

<!-- END DATA -->
