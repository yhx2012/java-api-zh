<!-- BEGIN KEY -->
public class java.lang.Throwable extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Throwable</code> 类是 Java 语言中所有错误或异常的超类。只有当对象是此类（或其子类之一）的实例时，才能通过 Java 虚拟机或者 Java <code>throw</code> 语句抛出。类似地，只有此类或其子类之一才可以是 <code>catch</code> 子句中的参数类型。

<p>两个子类的实例，{@link java.lang.Error} 和 {@link java.lang.Exception}，通常用于指示发生了异常情况。通常，这些实例是在异常情况的上下文中新近创建的，因此包含了相关的信息（比如堆栈跟踪数据）。
 
<p>Throwable 包含了其线程创建时线程执行堆栈的快照。它还包含了给出有关错误更多信息的消息字符串。最后，它还可以包含 <i>cause（原因）</i>：另一个导致此 throwable 抛出的 throwable。此 cause 设施在 1.4 版本中首次出现。它也称为<i>异常链</i> 设施，因为 cause 自身也会有 cause，依此类推，就形成了异常链，每个异常都是由另一个异常引起的。

<p>导致 throwable cause 的一个理由是，抛出它的类构建在低层抽象之中，而高层操作由于低层操作的失败而失败。让低层抛出的 throwable 向外传播是一种糟糕的设计方法，因为它通常与高层提供的抽象不相关。此外，这样做将高层 API 与其实现细节关联起来，假定低层异常是经过检查的异常。抛出&ldquo;经过包装的异常&rdquo;（即包含 cause 的异常）允许高层与其调用方交流失败详细信息，而不会招致上述任何一个缺点。这种方式保留了改变高层实现而不改变其 API 的灵活性（尤其是，异常集合通过其方法抛出）。

<p>导致 throwable cause 的另一个 cause 是，抛出它的方法必须符合通用接口，而通用接口不允许方法直接抛出 cause。例如，假定持久集合符合 {@link java.util.Collection} 接口，而其持久性在 <tt>java.io</tt> 的基础上实现。假定 <tt>add</tt> 方法的内部可以抛出 {@link java.io.IOException IOException}。实现可以与其调用方交流 <tt>IOException</tt> 的详细消息，同时通过以一种合适的未检查的异常来包装 <tt>IOException</tt>，使其符合 <tt>Collection</tt> 接口。（持久集合的规范应该指示它能够抛出这种异常。）

<p>Cause 可以通过两种方式与 throwable 关联起来：通过一个将 cause 看作参数的构造方法；或者通过 {@link #initCause(Throwable)} 方法。对于那些希望将 cause 与其关联起来的新 throwable 类，应该提供带有 cause 的构造方法，并委托（可能间接）给一个带有 cause 的 <tt>Throwable</tt> 构造方法。例如：
 <pre>
     try {
         lowLevelOp();
     } catch (LowLevelException le) {
         throw new HighLevelException(le);  // Chaining-aware constructor
     }
 </pre>
因为 <tt>initCause</tt> 方法是公共的，它允许 cause 与任何 throwable 相关联，甚至包括&ldquo;遗留 throwable&rdquo;，它的实现提前将异常链机制的附件应用到 <tt>Throwable</tt>。例如：
 <pre>
     try {
         lowLevelOp();
     } catch (LowLevelException le) {
         throw (HighLevelException)
                 new HighLevelException().initCause(le);  // Legacy constructor
     }
 </pre>

<p>在版本 1.4 之前，许多 throwable 有自己的非标准异常链机制（
{@link ExceptionInInitializerError}、
{@link ClassNotFoundException}、
{@link java.lang.reflect.UndeclaredThrowableException}、
{@link java.lang.reflect.InvocationTargetException}、
{@link java.io.WriteAbortedException}、
{@link java.security.PrivilegedActionException}、
{@link java.awt.print.PrinterIOException}、
{@link java.rmi.RemoteException} 和 {@link javax.naming.NamingException}）。所有这些 throwable 都已经更新过，可以使用标准异常链机制，同时继续实现其&ldquo;遗留&rdquo;链机制，以保持兼容性。

<p>此外，从版本 1.4 开始，许多通用的 <tt>Throwable</tt> 类（例如，{@link Exception}、{@link RuntimeException}、{@link Error}）都已经更新，具有带 cause 的构造方法。由于有 <tt>initCause</tt> 方法存在，这不是严格要求的，但它更方便，也更形象地委托给一个带有 cause 的构造方法。
 
<p>根据惯例，<code>Throwable</code> 类及其子类有两个构造方法，一个不带参数，另一个带有 <code>String</code> 参数，此参数可用于生成详细消息。此外，这些子类很可能有与其相关联的 cause，因此也应有两个构造方法，一个带 <code>Throwable</code> (cause)，一个带 <code>String</code>（详细消息）和 <code>Throwable</code> (cause)。

<p>在版本 1.4 中还引入了 {@link #getStackTrace()} 方法，它允许通过各种形式的 {@link #printStackTrace()} 方法编程访问堆栈跟踪信息，这些信息以前只能以文本形式使用。此信息已经添加到该类的<i>序列化表示形式</i>，因此 <tt>getStackTrace</tt> 和 <tt>printStackTrace</tt> 将可在反序列化时获得的 throwable 上正确操作。

@author  unascribed
@author  Josh Bloch (Added exception chaining and programmatic access to stack trace in 1.4.)
@version 1.53, 12/19/03
@since JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.lang.Throwable.detailMessage
<!-- END KEY -->
<!-- BEGIN DATA -->
有关 Throwable 的详细信息。例如，对于 <tt>FileNotFoundException</tt>，这包含了无法找到的文件名称。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Throwable java.lang.Throwable.cause
<!-- END KEY -->
<!-- BEGIN DATA -->
由此 throwable 引起的 throwable 被抛出，如果 throwable 未由其他 throwable 引起，或作为 cause 的 throwable 未知，则为空。如果此字段等于该 throwable 本身，它表示该 throwable 的 cause 尚未初始化。

@serial
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.StackTraceElement[] java.lang.Throwable.stackTrace
<!-- END KEY -->
<!-- BEGIN DATA -->
堆栈跟踪，由 {@link #getStackTrace()} 返回。

@serial
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Throwable()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个将 <code>null</code> 作为其详细消息的新 throwable。Cause 尚未进行初始化，可在以后通过调用 {@link #initCause} 来初始化。

<p>调用 {@link #fillInStackTrace()} 方法来初始化新创建的 throwable 中的堆栈跟踪数据。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Throwable(String message)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带指定详细消息的新 throwable。Cause 尚未进行初始化，可在以后通过调用 {@link #initCause} 来初始化。

<p>调用 {@link #fillInStackTrace()} 方法来初始化新创建的 throwable 中的堆栈跟踪数据。

@param   message   详细消息。保存这个详细消息，以便以后通过 {@link #getMessage()} 方法对其进行获取。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Throwable(String message, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个带指定详细消息和 cause 的新 throwable。<p>注意，与 <code>cause</code> 相关的详细消息<i>不是</i> 自动合并到这个 throwable 的详细消息中的。

<p>调用 {@link #fillInStackTrace()} 方法来初始化新创建的 throwable 中的堆栈跟踪数据。

@param  message 详细消息（保存此消息，以便以后通过 {@link #getMessage()} 方法获取它）。
@param  cause 原因（保存此 cause，以便以后通过 {@link #getCause()} 方法获取它）。（允许 <tt>null</tt> 值，指出 cause 是不存在的或是未知的。）
@since  1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Throwable(Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个带指定 cause 和 <tt>(cause==null &#063; null :cause.toString())</tt>（它通常包含类和 <tt>cause</tt> 的详细消息）的详细消息的新 throwable。此构造方法对于那些与其他 throwable（例如，{@link java.security.PrivilegedActionException}）的包装器相同的 throwable 来说是有用的。

<p>调用 {@link #fillInStackTrace()} 方法来初始化新创建的 throwable 中的堆栈跟踪数据。

@param  cause 原因（保存此 cause，以便以后通过 {@link #getCause()} 方法获取它）。（允许 <tt>null</tt> 值，指出 cause 是不存在的或是未知的。）
@since  1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.Throwable.getMessage()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 throwable 的详细消息字符串。

@return  此 <tt>Throwable</tt> 实例（可以为 <tt>null</tt>）的详细消息字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.Throwable.getLocalizedMessage()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建此 throwable 的本地化描述。子类可以重写此方法，以便生成特定于语言环境的消息。对于不重写此方法的子类，默认实现返回与 <code>getMessage()</code> 相同的结果。

@return  此 throwable 的本地化描述。
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Throwable java.lang.Throwable.getCause()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 throwable 的 cause；如果 cause 不存在或未知，则返回 <code>null</code>。（该 Cause 是导致抛出此 throwable 的throwable。）

<p>此实现返回由一个需要 <tt>Throwable</tt> 的构造方法提供的 cause，或者在创建之后通过 {@link #initCause(Throwable)} 方法进行设置的 cause。虽然通常不需要重写此方法，但子类可以重写它，以返回一个通过某些其他方式设置的 cause。这适用于在异常链（异常嵌套）机制被加入到 <tt>Throwable</tt> 之前存在&ldquo;遗留 Throwable 链机制&rdquo;的情况。注意，<i>不必</i> 重写任何 <tt>PrintStackTrace</tt> 方法，所有方法都调用 <tt>getCause</tt> 方法来确定 throwable 的 cause。

@return 此 throwable 的 cause，如果 cause 不存在或是未知的，则返回 <code>null</code>。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Throwable java.lang.Throwable.initCause(Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 throwable 的 <i>cause</i> 初始化为指定值。（该 Cause 是导致抛出此 throwable 的throwable。）

<p>此方法至多可以调用一次。此方法通常从构造方法中调用，或者在创建 throwable 后立即调用。如果此 throwable 通过 {@link #Throwable(Throwable)} 或 {@link #Throwable(String,Throwable)} 创建，此方法甚至一次也不能调用。

@param  cause 原因（保存此 cause，以便以后通过 {@link #getCause()} 方法获取它）。（允许 <tt>null</tt> 值，指出 cause 是不存在的或是未知的。）
@return  对此 <code>Throwable</code> 实例的引用。
@throws IllegalArgumentException 如果 <code>cause</code> 是此 throwable。（throwable 不能是它自己的 cause。）
@throws IllegalStateException 如果此 throwable 通过 {@link #Throwable(Throwable)} 或 {@link #Throwable(String,Throwable)} 创建，或者此方法已经在此 throwable 上进行调用。 
@since  1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.Throwable.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 throwable 的简短描述。结果是以下字符串的串联： 
<ul>
<li>此对象的类的 {@linkplain Class#getName() name}
<li>&quot;: &quot;（冒号和一个空格）
<li>调用此对象 {@link #getLocalizedMessage} 方法的结果
</ul>
如果 <tt>getLocalizedMessage</tt> 返回 <tt>null</tt>，则只返回类名称。
@return  该 throwable 的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.Throwable.printStackTrace()
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 throwable 及其追踪输出至标准错误流。此方法将此 <code>Throwable</code> 对象的堆栈跟踪输出至错误输出流，作为字段 <code>System.err</code> 的值。输出的第一行包含此对象的 {@link #toString()} 方法的结果。剩余行表示以前由方法 {@link #fillInStackTrace()} 记录的数据。此信息的格式取决于实现，但以下示例是最常见的：
 <blockquote><pre>
 java.lang.NullPointerException
         at MyClass.mash(MyClass.java:9)
         at MyClass.crunch(MyClass.java:6)
         at MyClass.main(MyClass.java:3)
 </pre></blockquote>
本示例通过运行以下程序生成： 
 <pre>
 class MyClass {
     public static void main(String[] args) {
         crunch(null);
     }
     static void crunch(int[] a) {
         mash(a);
     }
     static void mash(int[] b) {
         System.out.println(b[0]);
     }
 }
 </pre>
对于带初始化非空 cause 的 throwable 的追踪，通常应该包括 cause 的追踪。此信息的格式取决于实现，但以下示例是最常见的：
 <pre>
 HighLevelException: MidLevelException: LowLevelException
         at Junk.a(Junk.java:13)
         at Junk.main(Junk.java:4)
 Caused by: MidLevelException: LowLevelException
         at Junk.c(Junk.java:23)
         at Junk.b(Junk.java:17)
         at Junk.a(Junk.java:11)
         ... 1 more
 Caused by: LowLevelException
         at Junk.e(Junk.java:30)
         at Junk.d(Junk.java:27)
         at Junk.c(Junk.java:21)
         ... 3 more
 </pre>
注意，存在包含字符 <tt>&quot;...&quot;</tt> 的行。这些行指示此异常的椎栈跟踪的其余部分匹配来自异常（由 &quot;enclosing&quot; 异常引起）的堆栈跟踪底部的指定数量的帧。这种简便方法可以大大缩短通常情况下的输出长度，这里抛出了包装的异常，其方法与捕获&ldquo;作为 cause 的异常&rdquo;的方法相同。上述示例通过运行以下程序生成：
 <pre>
 public class Junk {
     public static void main(String args[]) { 
         try {
             a();
         } catch(HighLevelException e) {
             e.printStackTrace();
         }
     }
     static void a() throws HighLevelException {
         try {
             b();
         } catch(MidLevelException e) {
             throw new HighLevelException(e);
         }
     }
     static void b() throws MidLevelException {
         c();
     }   
     static void c() throws MidLevelException {
         try {
             d();
         } catch(LowLevelException e) {
             throw new MidLevelException(e);
         }
     }
     static void d() throws LowLevelException { 
        e();
     }
     static void e() throws LowLevelException {
         throw new LowLevelException();
     }
 }

 class HighLevelException extends Exception {
     HighLevelException(Throwable cause) { super(cause); }
 }

 class MidLevelException extends Exception {
     MidLevelException(Throwable cause)  { super(cause); }
 }
 
 class LowLevelException extends Exception {
 }
 </pre>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.Throwable.printStackTrace(PrintStream s)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 throwable 及其追踪输出到指定的输出流。

@param s 用于输出的 <code>PrintStream</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.Throwable.printStackTrace(PrintWriter s)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 throwable 及其追踪输出到指定的 PrintWriter。

@param s 用于输出的 <code>PrintWriter</code>
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized native java.lang.Throwable java.lang.Throwable.fillInStackTrace()
<!-- END KEY -->
<!-- BEGIN DATA -->
在异常堆栈跟踪中填充。此方法在 <code>Throwable</code> 对象信息中记录有关当前线程堆栈帧的当前状态。

@return  对此 <code>Throwable</code> 实例的引用。
@see     java.lang.Throwable#printStackTrace()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
<!-- END KEY -->
<!-- BEGIN DATA -->
提供编程访问由 {@link #printStackTrace()} 输出的堆栈跟踪信息。返回堆栈跟踪元素的数组，每个元素表示一个堆栈帧。数组的第零个元素（假定数据的长度为非零）表示堆栈顶部，它是序列中最后的方法调用。通常，这是创建和抛出该 throwable 的地方。数组的最后元素（假定数据的长度为非零）表示堆栈底部，它是序列中第一个方法调用。

<p>某些虚拟机在某些情况下可能会从堆栈跟踪中省略一个或多个堆栈帧。在极端情况下，没有该 throwable 堆栈跟踪信息的虚拟机可以从该方法返回一个零长度数组。一般说来，由此方法返回的数组将包含由 <tt>printStackTrace</tt> 输出的每帧的一个元素。

@return 堆栈跟踪元素的数组，表示与此 throwable 相关的堆栈跟踪。
@since  1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[] stackTrace)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置将由 {@link #getStackTrace()} 返回，并由 {@link #printStackTrace()} 和相关方法输出的堆栈跟踪元素。

此方法设计用于 RPC 框架和其他高级系统，允许客户端重写默认堆栈跟踪，这些默认堆栈跟踪要么在构造 throwable 时由 {@link #fillInStackTrace()} 生成，要么在从序列化流读取 throwable 时反序列化。

@param   stackTrace 要与此 <code>Throwable</code> 关联的堆栈跟踪元素。指定的数组由此调用复制；在方法调用返回后，指定数组中的改变将不会对此 <code>Throwable</code> 的堆栈跟踪产生影响。

@throws NullPointerException 如果 <code>stackTrace</code> 为 <code>null</code>，或者 <code>stackTrace</code> 中的任何元素为 <code>null</code>

@since  1.4

<!-- END DATA -->
