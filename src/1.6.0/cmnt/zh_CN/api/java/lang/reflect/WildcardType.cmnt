<!-- BEGIN KEY -->
public interface java.lang.reflect.WildcardType extends java.lang.reflect.Type
<!-- END KEY -->
<!-- BEGIN DATA -->
WildcardType 表示一个通配符类型表达式，如 <tt>&#063;</tt>、<tt>&#063; extends Number</tt> 或 <tt>&#063; super Integer</tt>。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.reflect.Type[] java.lang.reflect.WildcardType.getUpperBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此类型变量上边界的 <tt>Type</tt> 对象的数组。注意，如果不存在显式声明的上边界，则上边界为 <tt>Object</tt>。

<p>对于每个上边界 B：
<ul>
<li>如果 B 是一个参数化类型或一个类型变量，则会创建它（有关创建参数化类型过程的详细信息，请参阅 {@link java.lang.reflect.ParameterizedType ParameterizedType}）。
<li>否则，B 将被解析。 
</ul>

@return 表示此类型变量上边界的类型的数组
@throws TypeNotPresentException 如果任一边界引用不存在的类型声明
@throws MalformedParameterizedTypeException 如果任一边界引用出于某种原因不能被实例化的参数化类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.reflect.Type[] java.lang.reflect.WildcardType.getLowerBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此类型变量下边界的 <tt>Type</tt> 对象的数组。注意，如果不存在显式声明的下边界，则下边界为类型 <tt>null</tt>。在此情况下，将返回长度为零的数组。
 
<p>对于每个下边界 B：
<ul>
<li>如果 B 是一个参数化类型或一个类型变量，则会创建它（有关创建参数化类型过程的详细信息，请参阅 {@link java.lang.reflect.ParameterizedType ParameterizedType}）。
<li>否则，B 将被解析。
</ul>

@return 表示此类型变量下边界的类型的数组
@throws TypeNotPresentException 如果任一边界引用不存在的类型声明
@throws MalformedParameterizedTypeException 如果任一边界引用出于某种原因不能被实例化的参数化类型

<!-- END DATA -->
