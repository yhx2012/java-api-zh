<!-- BEGIN KEY -->
public final class java.lang.reflect.Method extends java.lang.reflect.AccessibleObject implements java.lang.reflect.GenericDeclaration, java.lang.reflect.Member
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Method</code> 提供关于类或接口上单独某个方法（以及如何访问该方法）的信息。所反映的方法可能是类方法或实例方法（包括抽象方法）。

<p><code>Method</code> 允许在匹配要调用的实参与底层方法的形参时进行扩展转换；但如果要进行收缩转换，则会抛出 <code>IllegalArgumentException</code>。

@see Member
@see java.lang.Class
@see java.lang.Class#getMethods()
@see java.lang.Class#getMethod(String, Class[])
@see java.lang.Class#getDeclaredMethods()
@see java.lang.Class#getDeclaredMethod(String, Class[])

@author Kenneth Russell
@author Nakul Saraiya

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class<?> java.lang.reflect.Method.getDeclaringClass()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示声明由此 <code>Method</code> 对象表示的方法的类或接口的 <code>Class</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.reflect.Method.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>String</code> 形式返回此 <code>Method</code> 对象表示的方法名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.reflect.Method.getModifiers()
<!-- END KEY -->
<!-- BEGIN DATA -->
以整数形式返回此 <code>Method</code> 对象所表示方法的 Java 语言修饰符。应该使用 <code>Modifier</code> 类对修饰符进行解码。

@see Modifier

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.reflect.TypeVariable[] java.lang.reflect.Method.getTypeParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <tt>TypeVariable</tt> 对象的数组，这些对象描述了由 <tt>GenericDeclaration</tt> 对象表示的一般声明按声明顺序来声明的类型变量。如果底层一般声明没有声明类型变量，则返回长度为 0 的数组。

@return  <tt>TypeVariable</tt> 对象的数组，这些对象描述了通过一般声明来声明的类型变量
@throws GenericSignatureFormatError 如果此一般声明的一般签名不符合 Java Virtual Machine Specification, 3rd edition 中指定的格式
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class<?> java.lang.reflect.Method.getReturnType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>Class</code> 对象，该对象描述了此 <code>Method</code> 对象所表示的方法的正式返回类型。
 
@return 此对象所表示的方法的返回类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.reflect.Type java.lang.reflect.Method.getGenericReturnType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示由此 <tt>Method</tt> 对象所表示方法的正式返回类型的 <tt>Type</tt> 对象。
 
<p>如果返回类型是参数化类型，则返回的 <tt>Type</tt> 对象必须实际反映源代码中所用参数的实际类型。
 
<p>如果返回类型是类型变量或参数化类型，则创建它。否则将解析它。

@return  表示底层方法的正式返回类型的 <tt>Type</tt> 对象
@throws GenericSignatureFormatError 如果一般方法签名不符合 Java Virtual Machine Specification, 3rd edition 中指定的格式
@throws TypeNotPresentException 如果底层方法的返回类型引用不存在的类型声明
@throws MalformedParameterizedTypeException 如果底层方法的返回类型引用无论如何都无法实例化的参数化类型
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class[] java.lang.reflect.Method.getParameterTypes()
<!-- END KEY -->
<!-- BEGIN DATA -->
按照声明顺序返回 <code>Class</code> 对象的数组，这些对象描述了此 <code>Method</code> 对象所表示的方法的形参类型。如果底层方法不带参数，则返回长度为 0 的数组。
 
@return 此对象所表示的方法的参数类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericParameterTypes()
<!-- END KEY -->
<!-- BEGIN DATA -->
按照声明顺序返回 <tt>Type</tt> 对象的数组，这些对象描述了此 <tt>Method</tt> 对象所表示的方法的形参类型的。如果底层方法不带参数，则返回长度为 0 的数组。
 
<p>如果形参类型是参数化类型，则为其返回的 <tt>Type</tt> 对象必须实际反映源代码中使用的实际类型参数。

<p>如果形参类型是类型变量或参数化类型，则创建它。否则将解析它。

@return 按照声明顺序返回表示底层方法的形参类型的 Type 对象数组
@throws GenericSignatureFormatError 如果一般方法签名不符合 Java Virtual Machine Specification, 3rd edition 中指定的格式
@throws TypeNotPresentException 如果底层方法的所有参数类型都引用不存在的类型声明
@throws MalformedParameterizedTypeException 如果所有底层方法的参数类型引用无论如何都无法实例化的参数化类型
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class[] java.lang.reflect.Method.getExceptionTypes()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回  <code>Class</code> 对象的数组，这些对象描述了声明将此 <code>Method</code> 对象表示的底层方法抛出的异常类型。如果此方法没有在其 <code>throws</code> 子句中声明异常，则返回长度为 0 的数组。
 
@return 声明由此对象表示的方法抛出的异常类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericExceptionTypes()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <tt>Type</tt> 对象数组，这些对象描述了声明由此 <tt>Method</tt> 对象抛出的异常。如果底层方法没有在其 <tt>throws</tt> 子句中声明异常，则返回长度为 0 的数组。  
 
<p>如果异常类型是参数化的类型，那么为它返回的 <tt>Type</tt> 对象必须实际反映源代码中所用参数的实际类型。

<p>如果异常类型是类型变量或参数化类型，则创建它。否则将解析它。

@return 表示由底层方法抛出的异常类型的 Type 数组
@throws GenericSignatureFormatError 如果一般方法签名不符合 Java Virtual Machine Specification, 3rd edition 中指定的格式
@throws TypeNotPresentException 如果底层方法的 <tt>throws</tt> 子句引用不存在的类型声明
@throws MalformedParameterizedTypeException 如果底层方法的 <tt>throws</tt> 子句引用无论如何都无法实例化的参数化类型
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.reflect.Method.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Method</code> 与指定对象进行比较。如果对象相同，则返回 true。如果它们由相同的类声明，具有相同的名称、形参类型和返回类型，则两个 <code>Method</code> 相同。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.reflect.Method.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Method</code> 的哈希码。哈希码按底层方法的声明类名称和方法名称的哈希码的异或计算。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.reflect.Method.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述此 <code>Method</code> 的字符串。该字符串被格式化为方法访问修饰符（如果有），后面依次跟着方法返回类型、空格、声明方法的类、句点、方法名、括号以及由逗号分隔的方法的形参类型列表。如果方法抛出检查异常，则参数列表后跟着空格、单词 throws 以及由逗号分隔的抛出异常类型的列表。例如：
 <pre>
    public boolean java.lang.Object.equals(java.lang.Object)
 </pre>

<p>访问修饰符按照由 "The Java Language Specification" 指定的规范化顺序放置。首先是 <tt>public</tt>，<tt>protected</tt> 或 <tt>private</tt>，接着是按以下顺序的其他修饰符：<tt>abstract</tt>、<tt>static</tt>、<tt>final</tt>、<tt>synchronized</tt>、<tt>native</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.reflect.Method.toGenericString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述此 <code>Method</code> 的字符串，包括类型参数。该字符串被格式化为方法访问修饰符（如果有），依次后跟用尖括号括起来的由逗号分隔的方法类型参数列表（如果有）、方法的一般返回类型、空格、声明方法的类、句点、方法名、括号以及由逗号分隔的方法的一般形参类型列表。空格用于将访问修饰符和类型参数或返回类型互相分隔开。如果不存在类型参数，则类型参数列表会被省略；如果类型参数列表存在，则用空格将列表与类名分隔开。如果声明方法以抛出异常，则参数列表后跟空格、单词 throws 以及由逗号分隔开的抛出一般异常类型的列表。如果不存在类型参数，则类型参数列表会被省略。

<p>访问修饰符按照 "The Java Language Specification" 指定的规范化顺序放置。首先是 <tt>public</tt>，<tt>protected</tt> 或 <tt>private</tt>，接着是按以下顺序的其他修饰符：<tt>abstract</tt>、<tt>static</tt>、<tt>final</tt>、<tt>synchronized</tt> <tt>native</tt>。

@return 描述此 <code>Method</code> 方法的字符串，包括类型参数

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.lang.reflect.Method.invoke(Object obj, java.lang.Object[] args) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException
<!-- END KEY -->
<!-- BEGIN DATA -->
对带有指定参数的指定对象调用由此 <code>Method</code> 对象表示的底层方法。个别参数被自动解包，以便与基本形参相匹配，基本参数和引用参数都随需服从方法调用转换。

<p>如果底层方法是静态的，那么可以忽略指定的 <code>obj</code> 参数。该参数可以为 null。

<p>如果底层方法所需的形参数为 0，则所提供的 <code>args</code> 数组长度可以为 0 或 null。

<p>如果底层方法是实例方法，则使用动态方法查找来调用它，这一点记录在 Java Language Specification, Second Edition 的第 15.12.4.4 节中；在发生基于目标对象的运行时类型的重写时更应该这样做。

<p>如果底层方法是静态的，并且尚未初始化声明此方法的类，则会将其初始化。

<p>如果方法正常完成，则将该方法返回的值返回给调用者；如果该值为基本类型，则首先适当地将其包装在对象中。但是，如果该值的类型为一组基本类型，则数组元素<i>不</i> 被包装在对象中；换句话说，将返回基本类型的数组。如果底层方法返回类型为 void，则该调用返回 null。

@param obj 从中调用底层方法的对象
@param args 用于方法调用的参数
@return 使用参数 <code>args</code> 在 <code>obj</code> 上指派该对象所表示方法的结果
@exception IllegalAccessException    如果此 <code>Method</code> 对象强制执行 Java 语言访问控制，并且底层方法是不可访问的。
@exception IllegalArgumentException 如果该方法是实例方法，且指定对象参数不是声明底层方法的类或接口（或其中的子类或实现程序）的实例；如果实参和形参的数量不相同；如果基本参数的解包转换失败；如果在解包后，无法通过方法调用转换将参数值转换为相应的形参类型。
@exception InvocationTargetException 如果底层方法抛出异常。
@exception NullPointerException      如果指定对象为 null，且该方法是一个实例方法。
@exception ExceptionInInitializerError 如果由此方法引起的初始化失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.reflect.Method.isBridge()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此方法是 bridge 方法，则返回 <tt>true</tt>；否则，返回 <tt>false</tt>。

@return 当且仅当此方法是由 Java Language Specification 定义的 bridge 方法时，才返回 true。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.reflect.Method.isVarArgs()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果将此方法声明为带有可变数量的参数，则返回 <tt>true</tt>；否则，返回 <tt>false</tt>。

@return 当且仅当将此方法声明为带有可变数量的参数时，才返回 <tt>true</tt>。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.reflect.Method.isSynthetic()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此方法为复合方法，则返回 <tt>true</tt>；否则，返回 <tt>false</tt>。

@return 当且仅当此方法是由 Java Language Specification 定义的复合方法时，才返回 true。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public T extends java.lang.annotation.Annotation java.lang.reflect.Method.getAnnotation(java.lang.Class<T> annotationClass)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.annotation.Annotation[] java.lang.reflect.Method.getDeclaredAnnotations()
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.lang.reflect.Method.getDefaultValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由此 <tt>Method</tt> 实例表示的注释成员的默认值。如果该成员为基本类型，则返回相应包装器类型的实例。如果不存在与该成员关联的默认值或者该成员实例不表示注释类型的声明成员，则返回 null。

@return 由此 <tt>Method</tt> 实例表示的注释成员的默认值。
@throws TypeNotPresentException 如果注释类型是 {@link Class} 且找不到默认类值的定义。
@since  1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.annotation.Annotation[][] java.lang.reflect.Method.getParameterAnnotations()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示按照声明顺序对此 <tt>Method</tt> 对象所表示方法的形参进行注释的那个数组的数组。（如果底层方法没有参数，则返回长度为零的数组。如果该方法有一个或多个参数，则为每个不带注释的参数返回长度为零的嵌套数组。）返回数组中包含的注释对象是可序列化的。此方法的调用者可以随意修改返回的数组；这不会对其他调用者返回的数组产生任何影响。

@return 表示按声明顺序对此 Method 对象所表示方法的形参进行注释的那个数组的数组
@since 1.5

<!-- END DATA -->
