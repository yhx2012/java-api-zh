<!-- BEGIN KEY -->
public final class java.lang.reflect.Constructor extends java.lang.reflect.AccessibleObject implements java.lang.reflect.GenericDeclaration, java.lang.reflect.Member
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Constructor</code> 提供关于类的单个构造方法的信息以及对它的访问权限。

<p><code>Constructor</code> 允许在将实参与带有底层构造方法的形参的 newInstance() 匹配时进行扩展转换，但是如果发生收缩转换，则抛出 <code>IllegalArgumentException</code>。

@param <T> 在其中声明构造方法的类。

@see Member
@see java.lang.Class
@see java.lang.Class#getConstructors()
@see java.lang.Class#getConstructor(Class[])
@see java.lang.Class#getDeclaredConstructors()

@author	Kenneth Russell
@author	Nakul Saraiya

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class<T> java.lang.reflect.Constructor.getDeclaringClass()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>Class</code> 对象，该对象表示声明由此 <code>Constructor</code> 对象表示的构造方法的类。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.reflect.Constructor.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
以字符串形式返回此构造方法的名称。它总是与构造方法的声明类的简单名称相同。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.reflect.Constructor.getModifiers()
<!-- END KEY -->
<!-- BEGIN DATA -->
以整数形式返回此 <code>Constructor</code> 对象所表示构造方法的 Java 语言修饰符。应该使用 <code>Modifier</code> 类对这些修饰符进行解码。

@see Modifier

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.reflect.TypeVariable[] java.lang.reflect.Constructor.getTypeParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->
按照声明顺序返回一组 <tt>TypeVariable</tt> 对象，这些对象表示通过此 <tt>GenericDeclaration</tt> 对象所表示的一般声明来声明的类型变量。如果底层一般声明未声明任何类型的变量，则返回一个长度为 0 的数组。

@return 表示通过此一般声明来声明的类型变量的一组 <tt>TypeVariable</tt> 对象
@throws GenericSignatureFormatError 如果此一般声明的一般签名不符合 Java Virtual Machine Specification, 3rd edition 指定的格式
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class[] java.lang.reflect.Constructor.getParameterTypes()
<!-- END KEY -->
<!-- BEGIN DATA -->
按照声明顺序返回一组 <code>Class</code> 对象，这些对象表示此 <code>Constructor</code> 对象所表示构造方法的形参类型。如果底层构造方法不带任何参数，则返回一个长度为 0 的数组。

@return 此对象表示的构造方法的参数类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.reflect.Type[] java.lang.reflect.Constructor.getGenericParameterTypes()
<!-- END KEY -->
<!-- BEGIN DATA -->
按照声明顺序返回一组 <tt>Type</tt> 对象，这些对象表示此 <tt>Constructor</tt> 对象所表示的方法的形参类型。如果底层方法不带任何参数，则返回一个长度为 0 的数组。
 
<p>如果形参类型是一个参数化类型，那么为它返回的 <tt>Type</tt> 对象必须准确地反映源代码中使用的实际类型参数。

<p>如果形参类型是一个类型变量或者是一个参数化类型，则创建它。否则将解析它。

@return 按照声明顺序返回一组 <tt>Type</tt> 对象，该对象表示底层方法的形参类型
@throws GenericSignatureFormatError 如果这个一般方法的签名不符合 Java Virtual Machine Specification, 3rd edition 指定的格式
@throws TypeNotPresentException 如果任何底层方法的参数类型引用了不存在的类型声明
@throws MalformedParameterizedTypeException  如果任何底层方法的参数类型引用了因某种原因而无法实例化的参数化类型
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class[] java.lang.reflect.Constructor.getExceptionTypes()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一组表示声明要抛出的异常类型的 <code>Class</code> 对象，这些异常是由此 <code>Constructor</code> 对象表示的底层构造方法抛出的。如果该构造方法声明其 <code>throws</code> 子句中没有任何异常，则返回一个长度为 0 的数组。

@return 声明由此对象表示的构造方法抛出的异常类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.reflect.Type[] java.lang.reflect.Constructor.getGenericExceptionTypes()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一组 <tt>Type</tt> 对象，这些对象表示声明要由此 <tt>Constructor</tt> 对象抛出的异常。如果底层方法声明其 <tt>throws</tt> 子句中没有任何异常，则返回一个长度为 0 的数组。
 
<p>如果异常类型是一个参数化类型，那么为它返回的 <tt>Type</tt> 对象必须准确地反映源代码中使用的实际类型参数。

<p>如果异常的类型是一个类型变量或是一个参数化类型，则创建它。否则将解析它。

@return 表示底层方法抛出的异常类型的一组 Type 对象
@throws GenericSignatureFormatError 如果一般方法的签名不符合 Java Virtual Machine Specification, 3rd edition 指定的格式
@throws TypeNotPresentException 如果底层方法的 <tt>throws</tt> 子句引用了不存在的类型声明
@throws MalformedParameterizedTypeException  如果底层方法的 <tt>throws</tt> 子句引用了因某种原因而无法实例化的参数化类型
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.reflect.Constructor.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Constructor</code> 对象与指定的对象进行比较。如果对象相同，则返回 true。如果由相同的类声明并且具有相同的形参类型，那么这两个 <code>Constructor</code> 对象是相同的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.reflect.Constructor.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Constructor</code> 的哈希码。该哈希码与底层构造方法的声明类名的哈希码相同。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.reflect.Constructor.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述此 <code>Constructor</code> 的字符串。该字符串是作为构造方法访问修饰符（如果有）格式化的，其后面是声明类的完全限定名，再往后是构造方法形参类型的加括号的、逗号分隔的列表。例如：
 <pre>
    public java.util.Hashtable(int,float)
 </pre>

<p>构造方法唯一可能的修饰符是访问修饰符 <tt>public</tt>、<tt>protected</tt> 或 <tt>private</tt>。这些修饰符只能出现一个，或者一个也不出现（如果构造方法具有默认（包）访问权）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.reflect.Constructor.toGenericString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述此 <code>Constructor</code> 的字符串，其中包括类型参数。该字符串是作为构造方法访问修饰符（如果有）格式化的，其后面是构造方法的类型参数（如果有）的加尖括号的、逗号分隔的列表，再往后是声明类的完全限定名，再往后是该构造方法的一般形参类型的加括号的、逗号分隔的列表。空格用来分隔访问修饰符与访问修饰符，以及访问修饰符与类型参数或返回值。如果没有类型参数，则省略类型参数列表；如果存在类型参数列表，则用空格分隔列表与类名。如果声明构造方法抛出异常，则参数列表后跟着一个空格，再往后是单词 &quot;<tt>throws</tt>&quot; ，再往后是用逗号分隔的所抛出异常类型的列表。

<p>构造方法唯一可能的修饰符是访问修饰符 <tt>public</tt>、<tt>protected</tt> 或 <tt>private</tt>。这些修饰符只能出现一个，或者一个也不出现（如果构造方法具有默认（包）访问权）。

@return 描述此 <code>Constructor</code> 的字符串，其中包括类型参数

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public T java.lang.reflect.Constructor.newInstance(java.lang.Object[] initargs) throws java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用此 <code>Constructor</code> 对象表示的构造方法来创建该构造方法的声明类的新实例，并用指定的初始化参数初始化该实例。个别参数会自动解包，以匹配基本形参，必要时，基本参数和引用参数都要进行方法调用转换。

<p>如果底层构造方法所需形参数为 0，则所提供的 <code>initargs</code> 数组的长度可能为 0 或 null。

<p>如果构造方法的声明类是非静态上下文的内部类，则构造方法的第一个参数需要是封闭实例；请参阅<i>Java 语言规范</i> 第 15.9.3 节。

<p>如果所需的访问检查和参数检查获得成功并且实例化继续进行，这时构造方法的声明类尚未初始化，则初始化这个类。

<p>如果构造方法正常完成，则返回新创建且已初始化的实例。

@param initargs 将作为变量传递给构造方法调用的对象数组；基本类型的值被包装在适当类型的包装器对象（如 {@link java.lang.Float Float} 中的 <tt>float</tt>）中。

@return 通过调用此对象表示的构造方法来创建的新对象
 
@exception IllegalAccessException    如果此 <code>Constructor</code> 对象实施 Java 语言访问控制并且底层构造方法是不可访问的。
@exception IllegalArgumentException  如果实参和形参的数量不同；如果基本参数的解包转换失败；如果在可能的解包后，无法通过方法调用转换将参数值转换为相应的形参类型；如果此构造方法属于枚举类型。
@exception InstantiationException    如果声明底层构造方法的类表示抽象类。
@exception InvocationTargetException 如果底层构造方法抛出异常。
@exception ExceptionInInitializerError 如果此方法引发的初始化失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.reflect.Constructor.isVarArgs()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果声明此构造方法可以带可变数量的参数，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

@return 当且仅当声明此构造方法可以带可变数量的参数时才返回 <tt>true</tt>。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.reflect.Constructor.isSynthetic()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此构造方法是一个复合构造方法，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

@return 当且仅当此构造方法是按照 Java Language Specification 定义的复合构造方法时才返回 true。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public T extends java.lang.annotation.Annotation java.lang.reflect.Constructor.getAnnotation(java.lang.Class<T> annotationClass)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.annotation.Annotation[] java.lang.reflect.Constructor.getDeclaredAnnotations()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.annotation.Annotation[][] java.lang.reflect.Constructor.getParameterAnnotations()
<!-- END KEY -->
<!-- BEGIN DATA -->
按照声明顺序返回一组数组，这些数组表示通过此 <tt>Constructor</tt> 对象表示的方法的形参上的注释。（如果底层方法没有参数，则返回一个长度为零的数组。如果该方法有一个或多个参数，则为每个不带注释的参数返回一个长度为零的嵌套数组。）包含在返回数组中的注释对象是可序列化的。此方法的调用者可以自由地修改返回的数组；它对返回给其他调用者的数组没有影响。

@return  按照声明顺序返回的一组数组，这些数组表示此 Constructor 对象表示的方法的形参上的注释
@since 1.5

<!-- END DATA -->
