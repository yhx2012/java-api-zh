<!-- BEGIN KEY -->
public class java.lang.reflect.Proxy extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Proxy</code> 提供用于创建动态代理类和实例的静态方法，它还是由这些方法创建的所有动态代理类的超类。

<p>创建某一接口 <code>Foo</code> 的代理：
 <pre>
     InvocationHandler handler = new MyInvocationHandler(...);
     Class proxyClass = Proxy.getProxyClass(
         Foo.class.getClassLoader(), new Class[] { Foo.class });
     Foo f = (Foo) proxyClass.
         getConstructor(new Class[] { InvocationHandler.class }).
         newInstance(new Object[] { handler });
 </pre>
或使用以下更简单的方法：
 <pre>
     Foo f = (Foo) Proxy.newProxyInstance(Foo.class.getClassLoader(),
                                          new Class[] { Foo.class },
                                          handler);
 </pre>

<p><i>动态代理类</i>（以下简称为<i>代理类</i>）是一个实现在创建类时在运行时指定的接口列表的类，该类具有下面描述的行为。

<i>代理接口</i> 是代理类实现的一个接口。

<i>代理实例</i> 是代理类的一个实例。

每个代理实例都有一个关联的<i>调用处理程序</i> 对象，它可以实现接口 {@link InvocationHandler}。通过其中一个代理接口的代理实例上的方法调用将被指派到实例的调用处理程序的 {@link InvocationHandler#invoke Invoke} 方法，并传递代理实例、识别调用方法的 <code>java.lang.reflect.Method</code> 对象以及包含参数的 <code>Object</code> 类型的数组。调用处理程序以适当的方式处理编码的方法调用，并且它返回的结果将作为代理实例上方法调用的结果返回。

<p>代理类具用以下属性：

<ul>
<li>代理类是公共的、最终的，而不是抽象的。

<li>未指定代理类的非限定名称。但是，以字符串 <code>"$Proxy"</code> 开头的类名空间应该为代理类保留。

<li>代理类扩展 <code>java.lang.reflect.Proxy</code>。

<li>代理类会按同一顺序准确地实现其创建时指定的接口。

<li>如果代理类实现了非公共接口，那么它将在与该接口相同的包中定义。否则，代理类的包也是未指定的。注意，包密封将不阻止代理类在运行时在特定包中的成功定义，也不会阻止相同类加载器和带有特定签名的包所定义的类。

<li>由于代理类将实现所有在其创建时指定的接口，所以对其 <code>Class</code> 对象调用 <code>getInterfaces</code> 将返回一个包含相同接口列表的数组（按其创建时指定的顺序），对其 <code>Class</code> 对象调用 <code>getMethods</code> 将返回一个包括这些接口中所有方法的 <code>Method</code> 对象的数组，并且调用 <code>getMethod</code> 将会在代理接口中找到期望的一些方法。

<li>如果 {@link Proxy#isProxyClass Proxy.isProxyClass} 方法传递代理类（由 <code>Proxy.getProxyClass</code> 返回的类，或由 <code>Proxy.newProxyInstance</code> 返回的对象的类），则该方法返回 true，否则返回 false。

<li>代理类的 <code>java.security.ProtectionDomain</code> 与由引导类加载器（如 <code>java.lang.Object</code>）加载的系统类相同，原因是代理类的代码由受信任的系统代码生成。此保护域通常被授予 <code>java.security.AllPermission</code>。

<li>每个代理类都有一个可以带一个参数（接口 {@link InvocationHandler} 的实现）的公共构造方法，用于设置代理实例的调用处理程序。并非必须使用反射 API 才能访问公共构造方法，通过调用 {@link Proxy#newProxyInstance Proxy.newInstance} 方法（将调用 {@link Proxy#getProxyClass Proxy.getProxyClass} 的操作和调用带有调用处理程序的构造方法结合在一起）也可以创建代理实例。
 </ul>

<p>代理实例具有以下属性：

 <ul>
<li>提供代理实例 <code>proxy</code> 和一个由其代理类 <code>Foo</code> 实现的接口，以下表达式将返回 true：
 <pre>
     <code>proxy instanceof Foo</code>
 </pre>
并且以下的强制转换操作将会成功（而不抛出 <code>ClassCastException</code>）：
 <pre>
     <code>(Foo) proxy</code>
 </pre>

<li>每个代理实例都有一个关联的调用处理程序，它会被传递到其构造方法中。静态 {@link Proxy#getInvocationHandler Proxy.getInvocationHandler} 方法将返回与作为其参数传递的代理实例相关的调用处理程序。

<li>代理实例上的接口方法调用将按照该方法的文档描述进行编码，并被指派到调用处理程序的 {@link InvocationHandler#invoke Invoke} 方法。

<li>在代理实例上的 <code>java.lang.Object</code> 中声明的 <code>hashCode</code>、<code>equals</code> 或 <code>toString</code> 方法的调用将按照与编码和指派接口方法调用相同的方式进行编码，并被指派到调用处理程序的 <code>invoke</code> 方法，如上所述。传递到 <code>invoke</code> 的 <code>Method</code> 对象的声明类是 <code>java.lang.Object</code>。代理类不重写从 <code>java.lang.Object</code> 继承的代理实例的其他公共方法，所以这些方法的调用行为与其对 <code>java.lang.Object</code> 实例的操作一样。
 </ul>

<h3>在多代理接口中重复的方法</h3>

<p>当代理类的两个或多个接口包含一个具有相同名称和参数签名的方法时，代理类的接口顺序变得非常重要。在代理实例上调用<i>重复方法</i> 时，传递到调用处理程序的 <code>Method</code> 对象没有必要成为其声明类可以从接口（通过该接口调用代理方法）的引用类型指派的对象。此限制存在的原因是，生成的代理类中的相应方法实现无法确定它通过哪一个接口调用。因此，在代理实例上调用重复方法时，第一个接口中的方法的 <code>Method</code> 对象包含接口的代理类列表中的方法（直接或通过超级接口继承），该对象会传递到调用处理程序的 <code>invoke</code> 方法，无论该方法调用通过哪一种引用类型发生。

<p>如果代理接口包含某一方法，它的名称和参数签名与 <code>java.lang.Object</code> 的 <code>hashCode</code>、<code>equals</code> 或 <code>toString</code> 方法相同，那么在代理实例上调用这样的方法时，传递到调用处理程序的 <code>Method</code> 对象将使 <code>java.lang.Object</code> 成为其声明类。换句话说，<code>java.lang.Object</code> 公共的非最终方法理论上在所有代理接口之前，以便确定哪一个 <code>Method</code> 对象传递到调用处理程序。

<p>还要注意，当重复方法被指派到调用处理程序时，<code>invoke</code> 方法只可以抛出经过检查的异常类型，该异常类型可以使用<i>所有</i> 代理接口（可以通过它调用）中方法的 <code>throws</code> 子句指派一种异常类型。如果 <code>invoke</code> 方法抛出一个经过检查的异常，该异常没有指派给任何由一个代理接口（可以通过它调用）中的方法声明的异常类型，那么该代理实例上的调用将抛出一个未经检查的 <code>UndeclaredThrowableException</code>。此限制表示并非所有的由传递到 <code>invoke</code> 方法的 <code>Method</code> 对象上调用 <code>getExceptionTypes</code> 返回的异常类型都可以由 <code>invoke</code> 方法成功抛出。

@author	Peter Jones
@version	1.20, 04/04/20
@see		InvocationHandler
@since	       1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.reflect.InvocationHandler java.lang.reflect.Proxy.h
<!-- END KEY -->
<!-- BEGIN DATA -->
此代理实例的调用处理程序。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.reflect.Proxy(InvocationHandler h)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用其调用处理程序的指定值从子类（通常为动态代理类）构建新的 <code>Proxy</code> 实例。

@param   h 此代理实例的调用处理程序

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Class<?> java.lang.reflect.Proxy.getProxyClass(ClassLoader loader, java.lang.Class[] interfaces) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回代理类的 <code>java.lang.Class</code> 对象，并向其提供类加载器和接口数组。该代理类将由指定的类加载器定义，并将实现提供的所有接口。如果类加载器已经定义了具有相同排列接口的代理类，那么现有的代理类将被返回；否则，类加载器将动态生成并定义这些接口的代理类。

<p>对可以传递给 <code>Proxy.getProxyClass</code> 的参数有以下几个限制：

 <ul>
<li><code>interfaces</code> 数组中的所有 <code>Class</code> 对象必须表示接口，而不能表示类或基本类型。

<li><code>interfaces</code> 数组中的两个元素不能引用同一 <code>Class</code> 对象。

<li>所有接口类型的名称通过特定的类加载器必须可见。换句话说，对于类加载器 <code>cl</code> 和所有接口 <code>i</code>，以下表达式必须为 true：
 <pre>
     Class.forName(i.getName(), false, cl) == i
 </pre>

<li>所有非公共接口必须位于同一包中；否则，该代理类将不可能实现所有的接口，无论它在哪一个包中定义。

<li>对于有相同签名的指定接口中任何成员方法集：
<ul>
<li>如果任何方法的返回类型是基本类型或 void，那么所有的方法必须具有与此相同的返回类型。
<li>否则，该方法之一必须是返回类型，它可以指派给该方法其余的所有返回类型。
</ul>

<li>得到的代理类必须不超过虚拟机在类上施加的任何限制。例如，虚拟机可以限制某一类实现至多 65535 的接口数；在这种情况下，<code>interfaces</code> 数组的大小必须不超过 65535。
</ul>

<p>如果违反了这些限制，<code>Proxy.getProxyClass</code> 将抛出 <code>IllegalArgumentException</code>。如果 <code>interfaces</code> 数组参数或其任何元素为 <code>null</code>，则将抛出 <code>NullPointerException</code>。

<p>注意，指定的代理接口的顺序非常重要：对接口组合相同但顺序不同的代理类的两个请求会导致两个不同的代理类。

@param  	loader 定义代理类的类加载器
@param	       interfaces 代理类要实现的接口列表
@return	用指定的类加载器定义的代理类，它可以实现指定的接口
@throws	IllegalArgumentException 如果违反传递到 <code>getProxyClass</code> 的参数上的任何限制
@throws	NullPointerException 如果 <code>interfaces</code> 数组参数或其任何元素为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Object java.lang.reflect.Proxy.newProxyInstance(ClassLoader loader, java.lang.Class[] interfaces, InvocationHandler h) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个指定接口的代理类实例，该接口可以将方法调用指派到指定的调用处理程序。此方法相当于：
 <pre>
     Proxy.getProxyClass(loader, interfaces).
         getConstructor(new Class[] { InvocationHandler.class }).
         newInstance(new Object[] { handler });
 </pre>

<p><code>Proxy.newProxyInstance</code> 抛出 <code>IllegalArgumentException</code>，原因与 <code>Proxy.getProxyClass</code> 相同。

@param 	loader 定义代理类的类加载器
@param	       interfaces 代理类要实现的接口列表
@param        h 指派方法调用的调用处理程序
@return	一个带有代理类的指定调用处理程序的代理实例，它由指定的类加载器定义，并实现指定的接口
@throws	IllegalArgumentException 如果违反传递到 <code>getProxyClass</code> 的参数上的任何限制
@throws	NullPointerException 如果 <code>interfaces</code> 数组参数或其任何元素为 <code>null</code>，或如果调用处理程序 <code>h</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Proxy.isProxyClass(java.lang.Class<?> cl)
<!-- END KEY -->
<!-- BEGIN DATA -->
当且仅当指定的类通过 <code>getProxyClass</code> 方法或 <code>newProxyInstance</code> 方法动态生成为代理类时，返回 true。

<p>此方法的可靠性对于使用它做出安全决策而言非常重要，所以此方法的实现不应仅测试相关的类是否可以扩展 <code>Proxy</code>。

@param 	cl 要测试的类
@return       如该类为代理类，则为 <code>true</code>，否则为 <code>false</code>
@throws	NullPointerException 如果 <code>cl</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.reflect.InvocationHandler java.lang.reflect.Proxy.getInvocationHandler(Object proxy) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定代理实例的调用处理程序。

@param 	proxy 返回调用处理程序的代理实例
@return	代理实例的调用处理程序
@throws	IllegalArgumentException 如果参数不是一个代理实例

<!-- END DATA -->
