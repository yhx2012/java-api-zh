<!-- BEGIN KEY -->
public interface java.lang.reflect.TypeVariable extends java.lang.reflect.Type
<!-- END KEY -->
<!-- BEGIN DATA -->
TypeVariable 是各种类型变量的公共高级接口。类型变量在反射方法首次需要时创建（在此包中指定）。如果类型变量 t 由类型（即类、接口或注释类型）T 引用，而且 T 由 T 的第 n 个封闭类声明（请参见 JLS 8.1.2），那么创建 t 需要解析（请参见 JVMS 5）T 的第 i 个封闭类，其中 i = 0 到 n（包含）。创建某个类型变量决不能导致创建其边界。重复创建类型变量没有效果。
 
<p>可以在运行时将多个对象实例化，以表示一个给定的类型变量。尽管类型变量仅创建一次，这并不意味着任何缓存实例的要求都表示类型变量。不过，表示类型变量的所有实例彼此必须相等 (equal())。因此，使用类型变量的用户决不能依靠实现此接口的类实例的身份。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.reflect.Type[] java.lang.reflect.TypeVariable.getBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此类型变量上边界的 <tt>Type</tt> 对象的数组。注意，如果未显式声明上边界，则上边界为 <tt>Object</tt>。

<p>对于每个上边界 B：<ul> <li>如果 B 是一个参数化类型或一个类型变量，则会创建它（请参见 {@link java.lang.reflect.ParameterizedType ParameterizedType}，了解创建参数化类型过程的详细信息）。
<li>否则，B 将被解析。</ul>

@throws TypeNotPresentException  如果任一边界引用不存在的类型声明
@throws MalformedParameterizedTypeException 如果任一边界引用出于某种原因不能被实例化的参数化类型
@return 表示此类型变量的上边界的 <tt>Type</tt> 的数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public D extends java.lang.reflect.GenericDeclaration java.lang.reflect.TypeVariable.getGenericDeclaration()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <tt>GenericDeclaration</tt> 对象，该对象表示声明此类型变量的一般声明。

@return 为此类型变量声明的一般声明。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.reflect.TypeVariable.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此类型变量的名称，它出现在源代码中。

@return 此类型变量的名称，它出现在源代码中

<!-- END DATA -->
