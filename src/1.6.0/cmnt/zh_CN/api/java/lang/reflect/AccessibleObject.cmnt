<!-- BEGIN KEY -->
public class java.lang.reflect.AccessibleObject extends java.lang.Object implements java.lang.reflect.AnnotatedElement
<!-- END KEY -->
<!-- BEGIN DATA -->
AccessibleObject 类是 Field、Method 和 Constructor 对象的基类。它提供了将反射的对象标记为在使用时取消默认 Java 语言访问控制检查的能力。对于公共成员、默认（打包）访问成员、受保护成员和私有成员，在分别使用 Field、Method 或 Constructor 对象来设置或获取字段、调用方法，或者创建和初始化类的新实例的时候，会执行访问检查。

<p>在反射对象中设置 <tt>accessible</tt> 标志允许具有足够特权的复杂应用程序（比如 Java Object Serialization 或其他持久性机制）以某种通常禁止使用的方式来操作对象。

@see Field
@see Method
@see Constructor
@see ReflectPermission

@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.reflect.AccessibleObject()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造方法：仅供 Java 虚拟机使用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[] array, boolean flag) throws java.lang.SecurityException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用单一安全性检查（为了提高效率）为一组对象设置 <tt>accessible</tt> 标志的便捷方法。

<p>首先，如果存在安全管理器，则在 <code>ReflectPermission("suppressAccessChecks")</code> 权限下调用 <code>checkPermission</code> 方法。

<p>如果 <code>flag</code> 为 <code>true</code>，但是不能更改输入 <code>array</code> 的任何元素的可访问性（例如，如果元素对象是 {@link java.lang.Class} 类的 {@link Constructor} 对象），则会引发 <code>SecurityException</code>。如果发生 SecurityException，对于少于（不包括）发生异常的元素的数组元素，可以将对象的可访问性设置为 <code>flag</code>；对于超出（包括）引发异常的元素的那些元素，则不更改其可访问性。

@param array AccessibleObjects 的数组
@param flag  每个对象中的 <tt>accessible</tt> 标志的新值
@throws SecurityException 如果请求被拒绝。
@see SecurityManager#checkPermission
@see java.lang.RuntimePermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.reflect.AccessibleObject.setAccessible(boolean flag) throws java.lang.SecurityException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此对象的 <tt>accessible</tt> 标志设置为指示的布尔值。值为 <tt>true</tt> 则指示反射的对象在使用时应该取消 Java 语言访问检查。值为 <tt>false</tt> 则指示反射的对象应该实施 Java 语言访问检查。

<p>首先，如果存在安全管理器，则在 <code>ReflectPermission("suppressAccessChecks")</code> 权限下调用 <code>checkPermission</code> 方法。
 
<p>如果 <code>flag</code> 为 <code>true</code>，并且不能更改此对象的可访问性（例如，如果此元素对象是 {@link java.lang.Class} 类的 {@link Constructor} 对象），则会引发 <code>SecurityException</code>。

<p>如果此对象是 <code>java.lang.Class</code> 类的 {@link java.lang.reflect.Constructor} 对象，并且 <code>flag</code> 为 true，则会引发 <code>SecurityException</code>。

@param flag <tt>accessible</tt> 标志的新值
@throws SecurityException 如果请求被拒绝。
@see SecurityManager#checkPermission
@see java.lang.RuntimePermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.reflect.AccessibleObject.isAccessible()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的 <tt>accessible</tt> 标志的值。

@return 此对象的 <tt>accessible</tt> 标志的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public T extends java.lang.annotation.Annotation java.lang.reflect.AccessibleObject.getAnnotation(java.lang.Class<T> annotationClass)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation> annotationClass)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getAnnotations()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getDeclaredAnnotations()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.5

<!-- END DATA -->
