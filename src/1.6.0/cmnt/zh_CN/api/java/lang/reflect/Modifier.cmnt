<!-- BEGIN KEY -->
public class java.lang.reflect.Modifier extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
Modifier 类提供了 <code>static</code> 方法和常量，对类和成员访问修饰符进行解码。修饰符集被表示为整数，用不同的位位置 (bit position) 表示不同的修饰符。表示修饰符的常量值取自于 <a href="http://java.sun.com/docs/books/vmspec/2nd-edition/html/VMSpecTOC.doc.html"><i>The Java</i><sup><small>TM</small></sup> <i>Virtual Machine Specification, Second edition</i></a> 的表 <a href="http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#75734">4.1</a>、<a href="http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#88358">4.4</a>、<a href="http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#75568">4.5</a> 和 <a href="http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#88478">4.7</a>。


@see Class#getModifiers()
@see Member#getModifiers()

@author Nakul Saraiya
@author Kenneth Russell

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.PUBLIC
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 <code>public</code> 修饰符的 <code>int</code> 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.PRIVATE
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 <code>private</code> 修饰符的 <code>int</code> 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.PROTECTED
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 <code>protected</code> 修饰符的 <code>int</code> 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.STATIC
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 <code>static</code> 修饰符的 <code>int</code> 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.FINAL
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 <code>final</code> 修饰符的 <code>int</code> 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.SYNCHRONIZED
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 <code>synchronized</code> 修饰符的 <code>int</code> 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.VOLATILE
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 <code>volatile</code> 修饰符的 <code>int</code> 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.TRANSIENT
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 <code>transient</code> 修饰符的 <code>int</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.NATIVE
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 <code>native</code> 修饰符的 <code>int</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.INTERFACE
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 <code>interface</code> 修饰符的 <code>int</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.ABSTRACT
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 <code>abstract</code> 修饰符的 <code>int</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.STRICT
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 <code>strictfp</code> 修饰符的 <code>int</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isPublic(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果整数参数包括 <tt>public</tt> 修饰符，则返回 <tt>true</tt>，否则返回 <tt>false</tt>。

@param	mod 修饰符集
@return 如果 <code>mod</code> 包括 <tt>public</tt> 修饰符，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isPrivate(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果整数参数包括 <tt>private</tt> 修饰符，则返回 <tt>true</tt>，否则返回 <tt>false</tt>。

@param	mod 修饰符集
@return 如果 <code>mod</code> 包括 <tt>private</tt> 修饰符，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isProtected(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果整数参数包括 <tt>protected</tt> 修饰符，则返回 <tt>true</tt>，否则返回 <tt>false</tt>。

@param	mod 修饰符集
@return 如果 <code>mod</code> 包括 <tt>protected</tt> 修饰符，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isStatic(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果整数参数包括 <tt>static</tt> 修饰符，则返回 <tt>true</tt>，否则返回 <tt>false</tt>。

@param	mod 修饰符集
@return 如果 <code>mod</code> 包括 <tt>static</tt> 修饰符，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isFinal(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果整数参数包括 <tt>final</tt> 修饰符，则返回 <tt>true</tt>，否则返回 <tt>false</tt>。

@param	mod 修饰符集
@return 如果 <code>mod</code> 包括 <tt>final</tt> 修饰符，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isSynchronized(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果整数参数包括 <tt>synchronized</tt> 修饰符，则返回 <tt>true</tt>，否则返回 <tt>false</tt>。

@param	mod 修饰符集
@return 如果 <code>mod</code> 包括 <tt>synchronized</tt> 修饰符，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isVolatile(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果整数参数包括 <tt>volatile</tt> 修饰符，则返回 <tt>true</tt>，否则返回 <tt>false</tt>。

@param	mod 修饰符集
@return 如果 <code>mod</code> 包括 <tt>volatile</tt> 修饰符，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isTransient(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果整数参数包括 <tt>transient</tt> 修饰符，则返回 <tt>true</tt>，否则返回 <tt>false</tt>。

@param	mod 修饰符集
@return 如果 <code>mod</code> 包括 <tt>transient</tt> 修饰符，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isNative(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果整数参数包括 <tt>native</tt> 修饰符，则返回 <tt>true</tt>，否则返回 <tt>false</tt>。

@param	mod 修饰符集
@return 如果 <code>mod</code> 包括 <tt>native</tt> 修饰符，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isInterface(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果整数参数包括 <tt>interface</tt> 修饰符，则返回 <tt>true</tt>，否则返回 <tt>false</tt>。

@param	mod 修饰符集
@return 如果 <code>mod</code> 包括 <tt>interface</tt> 修饰符，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isAbstract(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果整数参数包括 <tt>abstract</tt> 修饰符，则返回 <tt>true</tt>，否则返回 <tt>false</tt>。

@param	mod 修饰符集
@return 如果 <code>mod</code> 包括 <tt>abstract</tt> 修饰符，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isStrict(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果整数参数包括 <tt>strictfp</tt> 修饰符，则返回 <tt>true</tt>，否则返回 <tt>false</tt>。

@param	mod 修饰符集
@return 如果 <code>mod</code> 包括 <tt>strictfp</tt> 修饰符，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.reflect.Modifier.toString(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述指定修饰符中的访问修饰符标志的字符串。例如：
 <blockquote><pre>
    public final synchronized strictfp
 </pre></blockquote>
返回的修饰符名称的顺序与 <a href="http://java.sun.com/docs/books/jls/second_edition/html/j.title.doc.html"><em>The Java Language Specification, Second Edition</em></a> 的<a href="http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#21613">&sect;8.1.1</a>、<a href="http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#78091">&sect;8.3.1</a>、<a href="http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#78188">&sect;8.4.3</a>、<a href="http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#42018">&sect;8.8.3</a> 和 <a href="http://java.sun.com/docs/books/jls/second_edition/html/interfaces.doc.html#235947">&sect;9.1.1</a> 中给出的建议修饰符排序是一致的。此方法使用的完整修饰符排序是：
 <blockquote> <code>public protected private abstract static final transient volatile synchronized native strictfp interface </code> </blockquote> 
这个类中讨论的 <code>interface</code> 修饰符不是真正的 Java 语言修饰符，它将出现在此方法列出的其他所有修饰符的后面。此方法可能返回一个不是有效 Java 实体修饰符的修饰符；换句话说，它没有对该输入表示的可能有效的组合修饰符进行检查。

@param	       mod 修饰符集
@return	<code>mod</code> 表示的修饰符集的字符串表示形式

<!-- END DATA -->
