<!-- BEGIN KEY -->
public final class java.lang.reflect.Field extends java.lang.reflect.AccessibleObject implements java.lang.reflect.Member
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Field</code> 提供有关类或接口的单个字段的信息，以及对它的动态访问权限。反射的字段可能是一个类（静态）字段或实例字段。

<p><code>Array</code> 允许在执行 get 或 set 访问操作期间进行扩展转换，但如果将发生收缩转换，则抛出一个 <code>IllegalArgumentException</code>。

@see Member
@see java.lang.Class
@see java.lang.Class#getFields()
@see java.lang.Class#getField(String)
@see java.lang.Class#getDeclaredFields()
@see java.lang.Class#getDeclaredField(String)

@author Kenneth Russell
@author Nakul Saraiya

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class<?> java.lang.reflect.Field.getDeclaringClass()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示类或接口的 <code>Class</code> 对象，该类或接口声明由此 <code>Field</code> 对象表示的字段。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.reflect.Field.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Field</code> 对象表示的字段的名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.reflect.Field.getModifiers()
<!-- END KEY -->
<!-- BEGIN DATA -->
以整数形式返回由此 <code>Field</code> 对象表示的字段的 Java 语言修饰符。应该使用 <code>Modifier</code> 类对这些修饰符进行解码。

@see Modifier

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.reflect.Field.isEnumConstant()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此字段表示枚举类型的元素，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

@return 当且仅当此字段表示一个枚举类型的元素时，才返回 <tt>true</tt>。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.reflect.Field.isSynthetic()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此字段是复合字段，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

@return 当且仅当此字段是一个按 Java Language Specification 定义的复合字段时，才返回 true。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class<?> java.lang.reflect.Field.getType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>Class</code> 对象，它标识了此 <code>Field</code> 对象所表示字段的声明类型。

@return 标识此对象所表示字段的声明类型的 <code>Class</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.reflect.Type java.lang.reflect.Field.getGenericType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <tt>Type</tt> 对象，它表示此 <tt>Field</tt> 对象所表示字段的声明类型。
 
<p>如果 <tt>Type</tt> 是一个参数化类型，则返回的 <tt>Type</tt> 对象必须准确地反映源代码中使用的实际类型参数。
 
<p>如果底层字段的类型是一个类型变量或者是一个参数化类型，则创建它。否则将解析它。

@return 返回表示此 <code>Field</code> 对象所表示字段的声明类型的 <tt>Type</tt> 对象
@throws GenericSignatureFormatError 如果一般字段签名不符合 Java Virtual Machine Specification, 3rd edition 中指定的格式
@throws TypeNotPresentException 如果底层字段的一般类型签名引用了不存在的类型声明
@throws MalformedParameterizedTypeException 如果底层字段的一般签名引用了一个因某种原因而无法实例化的参数化类型
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.reflect.Field.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Field</code> 与指定对象比较。如果对象是相同的，则返回 true。如果由相同的类声明并且具有相同的名称和类型，那么这两个 <code>Field</code> 对象是相同的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.reflect.Field.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该 <code>Field</code> 的哈希码。这作为底层字段的声明类名及其名称的哈希码的异或进行计算。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.reflect.Field.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个描述此 <code>Field</code> 的字符串。格式是：该字段（如果存在的话）的访问修饰符，后面跟着字段类型和一个空格，再后面是声明该字段的类的完全限定名，后面跟着一个句点，最后是字段的名称。例如：
 <pre>
    public static final int java.lang.Thread.MIN_PRIORITY
    private int java.io.FileDescriptor.fd
 </pre>

<p>修饰符是按照 "The Java Language Specification" 中指定的规范化顺序放置的。<tt>public</tt>、<tt>protected</tt> 或 <tt>private</tt> 的修饰符放在最前面，然后按以下顺序放置其他修饰符：<tt>static</tt>、<tt>final</tt>、<tt>transient</tt> 和 <tt>volatile</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.reflect.Field.toGenericString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个描述此 <code>Field</code>（包括其一般类型）的字符串。格式是：该字段（如果存在的话）的访问修饰符，后面跟着一般字段类型和一个空格，再后面是声明该字段的类的完全限定名，后面跟着一个句点，最后是字段的名称。

<p>修饰符是按照 "The Java Language Specification" 中指定的规范化顺序放置的。<tt>public</tt>、<tt>protected</tt> 或 <tt>private</tt> 的修饰符放在最前面，然后按以下顺序放置其他修饰符：<tt>static</tt>、<tt>final</tt>、<tt>transient</tt> 和 <tt>volatile</tt>。

@return 描述此 <code>Field</code>（包括其一般类型）的字符串

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.lang.reflect.Field.get(Object obj) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定对象上此 <code>Field</code> 表示的字段的值。如果该值是一个基本类型值，则自动将其包装在一个对象中。

<p>底层字段的值是按以下方式获得的：

<p>如果底层字段是一个静态字段，则忽略 <code>obj</code> 变量；它可能为 null。

<p>否则，底层字段是一个实例字段。如果指定的 <code>obj</code> 变量为 null，则该方法将抛出一个 <code>NullPointerException</code>。如果指定对象不是声明底层字段的类或接口的实例，则该方法将抛出一个 <code>IllegalArgumentException</code>。

<p>如果此 <code>Field</code> 对象强制实施 Java 语言访问控制，并且底层字段是不可访问的，则该方法将抛出一个 <code>IllegalAccessException</code>。如果底层字段是静态的，并且声明该字段的类尚未初始化，则初始化这个类。

<p>否则，从底层实例字段或静态字段中获取该值。如果该字段是一个基本类型字段，则在返回前将该值包装在一个对象中，否则照原样返回。

<p>如果字段隐藏在 <code>obj</code> 的类型中，则根据前面的规则获得字段的值。

@param obj 从中提取所表示字段的值的对象
@return 对象 <tt>obj</tt> 中的所表示字段的值；在返回之前，基值包装在一个适当的对象中

@exception IllegalAccessException    如果底层字段是不可访问的。
@exception IllegalArgumentException  如果指定对象不是声明底层字段（或者其子类或实现者）的类或接口的实例。
@exception NullPointerException      如果指定对象为 null 并且字段是一个实例字段。
@exception ExceptionInInitializerError 如果此方法引起的初始化失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.reflect.Field.getBoolean(Object obj) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取一个静态或实例 <code>boolean</code> 字段的值。

@param obj 从中提取 <code>boolean</code> 值的对象
@return <code>boolean</code> 字段的值

@exception IllegalAccessException    如果底层字段是不可访问的。
@exception IllegalArgumentException  如果指定对象不是声明底层字段（或者其子类或实现者）的类或接口的实例，或者无法通过扩展转换将字段值转换为 <code>boolean</code> 类型。
@exception NullPointerException      如果指定对象为 null 并且字段是一个实例字段。
@exception ExceptionInInitializerError 如果此方法引起的初始化失败。
@see       Field#get

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte java.lang.reflect.Field.getByte(Object obj) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取一个静态或实例 <code>byte</code> 字段的值。

@param obj 从中提取 <code>byte</code> 值的对象
@return <code>byte</code> 字段的值

@exception IllegalAccessException    如果底层字段是不可访问的。
@exception IllegalArgumentException  如果指定对象不是声明底层字段（或者其子类或实现者）的类或接口的实例，或者无法通过扩展转换将字段值转换为 <code>byte</code> 类型。
@exception NullPointerException      如果指定对象为 null 并且字段是一个实例字段。
@exception ExceptionInInitializerError 如果此方法引起的初始化失败。
@see       Field#get

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.lang.reflect.Field.getChar(Object obj) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>char</code> 类型或另一个通过扩展转换可以转换为 <code>char</code> 类型的基本类型的静态或实例字段的值。

@param obj 从中提取 <code>char</code> 值的对象
@return 转换为 <code>char</code> 类型的字段的值

@exception IllegalAccessException    如果底层字段是不可访问的。
@exception IllegalArgumentException  如果指定对象不是声明底层字段（或者其子类或实现者）的类或接口的实例，或者无法通过扩展转换将字段值转换为 <code>char</code> 类型。
@exception NullPointerException      如果指定对象为 null 并且字段是一个实例字段。
@exception ExceptionInInitializerError 如果此方法引起的初始化失败。
@see Field#get

<!-- END DATA -->
<!-- BEGIN KEY -->
public short java.lang.reflect.Field.getShort(Object obj) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>short</code> 类型或另一个通过扩展转换可以转换为 <code>short</code> 类型的基本类型的静态或实例字段的值。

@param obj 从中提取 <code>short</code> 值的对象
@return 转换为 <code>short</code> 类型的字段的值

@exception IllegalAccessException    如果底层字段是不可访问的。
@exception IllegalArgumentException  如果指定对象不是声明底层字段（或者其子类或实现者）的类或接口的实例，或者无法通过扩展转换将字段值转换为 <code>short</code> 类型。
@exception NullPointerException      如果指定对象为 null 并且字段是一个实例字段。
@exception ExceptionInInitializerError 如果此方法引起的初始化失败。
@see       Field#get

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.reflect.Field.getInt(Object obj) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>int</code> 类型或另一个通过扩展转换可以转换为 <code>int</code> 类型的基本类型的静态或实例字段的值。

@param obj 从中提取 <code>int</code> 值的对象
@return 转换为 <code>int</code> 类型的字段的值

@exception IllegalAccessException    如果底层字段是不可访问的。
@exception IllegalArgumentException  如果指定对象不是声明底层字段（或者其子类或实现者）的类或接口的实例，或者无法通过扩展转换将字段值转换为 <code>int</code> 类型。
@exception NullPointerException      如果指定对象为 null 并且字段是一个实例字段。
@exception ExceptionInInitializerError 如果此方法引起的初始化失败。
@see       Field#get

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.lang.reflect.Field.getLong(Object obj) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>long</code> 类型或另一个通过扩展转换可以转换为 <code>long</code> 类型的基本类型的静态或实例字段的值。

@param obj 从中提取 <code>long</code> 值的对象
@return 转换为 <code>long</code> 类型的字段的值

@exception IllegalAccessException    如果底层字段是不可访问的。
@exception IllegalArgumentException  如果指定对象不是声明底层字段（或者其子类或实现者）的类或接口的实例，或者无法通过扩展转换将字段值转换为 <code>long</code> 类型。
@exception NullPointerException      如果指定对象为 null 并且字段是一个实例字段。
@exception ExceptionInInitializerError 如果此方法引起的初始化失败。
@see       Field#get

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.lang.reflect.Field.getFloat(Object obj) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>float</code> 类型或另一个通过扩展转换可以转换为 <code>float</code> 类型的基本类型的静态或实例字段的值。

@param obj 从中提取 <code>float</code> 值的对象
@return 转换为 <code>float</code> 类型的字段的值

@exception IllegalAccessException    如果底层字段是不可访问的。
@exception IllegalArgumentException  如果指定对象不是声明底层字段（或者其子类或实现者）的类或接口的实例，或者无法通过扩展转换将字段值转换为 <code>float</code> 类型。
@exception NullPointerException      如果指定对象为 null 并且字段是一个实例字段。
@exception ExceptionInInitializerError 如果此方法引起的初始化失败。
@see Field#get

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.lang.reflect.Field.getDouble(Object obj) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 <code>double</code> 类型或另一个通过扩展转换可以转换为 <code>double</code> 类型的基本类型的静态或实例字段的值。

@param obj 从中提取 <code>double</code> 值的对象
@return 转换为 <code>double</code> 类型的字段的值

@exception IllegalAccessException    如果底层字段是不可访问的。
@exception IllegalArgumentException  如果指定对象不是声明底层字段（或者其子类或实现者）的类或接口的实例，或者无法通过扩展转换将字段值转换为 <code>double</code> 类型。
@exception NullPointerException      如果指定对象为 null 并且字段是一个实例字段。
@exception ExceptionInInitializerError 如果此方法引起的初始化失败。
@see       Field#get

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.reflect.Field.set(Object obj, Object value) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定对象变量上此 <code>Field</code> 对象表示的字段设置为指定的新值。如果底层字段的类型为基本类型，则对新值进行自动解包。

<p>进行此操作的方式如下：

<p>如果底层字段是静态字段，则忽略 <code>obj</code> 变量；它可能为 null。

<p>否则底层字段是一个实例字段。如果指定对象变量为 null，则该方法将抛出一个 <code>NullPointerException</code>。如果指定对象变量不是声明底层字段的类或接口的实例，则该方法将抛出一个 <code>IllegalArgumentException</code>。

<p>如果此 <code>Field</code> 对象实施 Java 语言访问控制，并且底层字段是不可访问的，则该方法将抛出一个 <code>IllegalAccessException</code>。

<p>如果底层字段为 final 字段，则该方法将抛出一个 <code>IllegalAccessException</code>，除非 <code>setAccessible(true)</code> 已经继承该字段并且该字段是一个非静态字段。在通过程序的其他部分可以访问类的实例之前，只有使用空白 final 字段反序列化或重构类的实例期间，以这种方式设置 final 字段才有意义。在其他任何上下文中使用该方法都可能会有不可预知的结果，包括程序的其他部分继续使用该字段的原始值的情况。

<p>如果底层字段的类型为某一基本类型，则可以尝试使用解包转换将新值转换为基本类型的值。如果该尝试失败，则此方法将抛出一个 <code>IllegalArgumentException</code>。

<p>如果在进行可能的解包之后，无法通过某一标识或扩展转换将新值转换为底层字段的类型，则此方法将抛出一个 <code>IllegalArgumentException</code>。

<p>如果底层字段是静态的，并且声明该字段的类尚未初始化，则初始化这个类。

<p>字段被设置为可能已解包并扩大的新值。

<p>如果字段隐藏在 <code>obj</code> 的类型中，则根据前面的规则设置字段的值。

@param obj 应该修改其字段的对象
@param value 正被修改的 <code>obj</code> 的字段的新值
 
@exception IllegalAccessException    如果底层字段是不可访问的。
@exception IllegalArgumentException  如果指定对象不是声明底层字段（或者其子类或实现者）的类或接口的实例，或者解包转换失败。
@exception NullPointerException      如果指定对象为 null 并且字段是一个实例字段。
@exception ExceptionInInitializerError 如果此方法引起的初始化失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.reflect.Field.setBoolean(Object obj, boolean z) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字段的值设置为指定对象上的一个 <code>boolean</code> 值。该方法等同于 <code>set(obj, zObj)</code>，其中 <code>zObj</code> 是一个 <code>Boolean</code> 对象，并且 <code>zObj.booleanValue() == z</code>。

@param obj 应该修改其字段的对象
@param z 正被修改的 <code>obj</code> 的字段的新值
 
@exception IllegalAccessException    如果底层字段是不可访问的。
@exception IllegalArgumentException  如果指定对象不是声明底层字段（或者其子类或实现者）的类或接口的实例，或者解包转换失败。
@exception NullPointerException      如果指定对象为 null 并且字段是一个实例字段。
@exception ExceptionInInitializerError 如果此方法引起的初始化失败。
@see       Field#set

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.reflect.Field.setByte(Object obj, byte b) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字段的值设置为指定对象上的一个 <code>byte</code> 值。该方法等同于 <code>set(obj, bObj)</code>，其中 <code>bObj</code> 是一个 <code>Byte</code> 对象，并且 <code>bObj.byteValue() == b</code>。

@param obj 应该修改其字段的对象
@param b 正被修改的 <code>obj</code> 的字段的新值
 
@exception IllegalAccessException    如果底层字段是不可访问的。
@exception IllegalArgumentException  如果指定对象不是声明底层字段（或者其子类或实现者）的类或接口的实例，或者解包转换失败。
@exception NullPointerException      如果指定对象为 null 并且字段是一个实例字段。
@exception ExceptionInInitializerError 如果此方法引起的初始化失败。
@see       Field#set

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.reflect.Field.setChar(Object obj, char c) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字段的值设置为指定对象上的一个 <code>char</code> 值。该方法等同于 <code>set(obj, cObj)</code>，其中 <code>cObj</code> 是一个 <code>Character</code> 对象，并且 <code>cObj.charValue() == c</code>。

@param obj 应该修改其字段的对象
@param c 正被修改的 <code>obj</code> 的字段的新值
 
@exception IllegalAccessException    如果底层字段是不可访问的。
@exception IllegalArgumentException  如果指定对象不是声明底层字段（或者其子类或实现者）的类或接口的实例，或者解包转换失败。
@exception NullPointerException      如果指定对象为 null 并且字段是一个实例字段。
@exception ExceptionInInitializerError 如果此方法引起的初始化失败。
@see       Field#set

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.reflect.Field.setShort(Object obj, short s) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字段的值设置为指定对象上的一个 <code>short</code> 值。该方法等同于 <code>set(obj, sObj)</code>，其中 <code>sObj</code> 是一个 <code>Short</code> 对象，并且 <code>sObj.shortValue() == s</code>。

@param obj 应该修改其字段的对象
@param s   正被修改的 <code>obj</code> 的字段的新值
 
@exception IllegalAccessException    如果底层字段是不可访问的。
@exception IllegalArgumentException  如果指定对象不是声明底层字段（或者其子类或实现者）的类或接口的实例，或者解包转换失败。
@exception NullPointerException      如果指定对象为 null 并且字段是一个实例字段。
@exception ExceptionInInitializerError 如果此方法引起的初始化失败。
@see       Field#set

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.reflect.Field.setInt(Object obj, int i) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字段的值设置为指定对象上的一个 <code>int</code> 值。该方法等同于 <code>set(obj, iObj)</code>，其中 <code>iObj</code> 是一个 <code>Integer</code> 对象，并且 <code>iObj.intValue() == i</code>。

@param obj 应该修改其字段的对象
@param i 正被修改的 <code>obj</code> 的字段的新值
 
@exception IllegalAccessException    如果底层字段是不可访问的。
@exception IllegalArgumentException  如果指定对象不是声明底层字段（或者其子类或实现者）的类或接口的实例，或者解包转换失败。
@exception NullPointerException      如果指定对象为 null 并且字段是一个实例字段。
@exception ExceptionInInitializerError 如果此方法引起的初始化失败。
@see       Field#set

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.reflect.Field.setLong(Object obj, long l) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字段的值设置为指定对象上的一个 <code>long</code> 值。该方法等同于 <code>set(obj, lObj)</code>，其中 <code>lObj</code> 是一个 <code>Long</code> 对象，并且 <code>lObj.longValue() == l</code>。

@param obj 应该修改其字段的对象
@param l 正被修改的 <code>obj</code> 的字段的新值
 
@exception IllegalAccessException    如果底层字段是不可访问的。
@exception IllegalArgumentException  如果指定对象不是声明底层字段（或者其子类或实现者）的类或接口的实例，或者解包转换失败。
@exception NullPointerException      如果指定对象为 null 并且字段是一个实例字段。
@exception ExceptionInInitializerError 如果此方法引起的初始化失败。
@see       Field#set

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.reflect.Field.setFloat(Object obj, float f) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字段的值设置为指定对象上的一个 <code>float</code> 值。该方法等同于 <code>set(obj, fObj)</code>，其中 <code>fObj</code> 是一个 <code>Float</code> 对象，并且 <code>fObj.floatValue() == f</code>。

@param obj 应该修改其字段的对象
@param f   正被修改的 <code>obj</code> 的字段的新值
 
@exception IllegalAccessException    如果底层字段是不可访问的。
@exception IllegalArgumentException  如果指定对象不是声明底层字段（或者其子类或实现者）的类或接口的实例，或者解包转换失败。
@exception NullPointerException      如果指定对象为 null 并且字段是一个实例字段。
@exception ExceptionInInitializerError 如果此方法引起的初始化失败。
@see       Field#set

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.reflect.Field.setDouble(Object obj, double d) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字段的值设置为指定对象上的一个 <code>double</code> 值。该方法等同于 <code>set(obj, dObj)</code>，其中 <code>dObj</code> 是一个 <code>Double</code> 对象，并且 <code>dObj.doubleValue() == d</code>。

@param obj 应该修改其字段的对象
@param d   正被修改的 <code>obj</code> 的字段的新值
 
@exception IllegalAccessException    如果底层字段是不可访问的。
@exception IllegalArgumentException 如果指定对象不是声明底层字段（或者其子类或实现者）的类或接口的实例，或者解包转换失败。
@exception NullPointerException      如果指定对象为 null 并且字段是一个实例字段。
@exception ExceptionInInitializerError 如果此方法引起的初始化失败。
@see       Field#set

<!-- END DATA -->
<!-- BEGIN KEY -->
public T extends java.lang.annotation.Annotation java.lang.reflect.Field.getAnnotation(java.lang.Class<T> annotationClass)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.annotation.Annotation[] java.lang.reflect.Field.getDeclaredAnnotations()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.5

<!-- END DATA -->
