<!-- BEGIN KEY -->
public interface java.lang.reflect.InvocationHandler
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>InvocationHandler</code> 是代理实例的<i>调用处理程序</i> 实现的接口。

<p>每个代理实例都具有一个关联的调用处理程序。对代理实例调用方法时，将对方法调用进行编码并将其指派到它的调用处理程序的 <code>invoke</code> 方法。

@author	Peter Jones
@version	1.9, 03/12/19
@see		Proxy
@since	1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.lang.reflect.InvocationHandler.invoke(Object proxy, Method method, java.lang.Object[] args) throws java.lang.Throwable
<!-- END KEY -->
<!-- BEGIN DATA -->
在代理实例上处理方法调用并返回结果。在与方法关联的代理实例上调用方法时，将在调用处理程序上调用此方法。

@param	proxy 在其上调用方法的代理实例

@param	method 对应于在代理实例上调用的接口方法的 <code>Method</code> 实例。<code>Method</code> 对象的声明类将是在其中声明方法的接口，该接口可以是代理类赖以继承方法的代理接口的超接口。

@param	args 包含传入代理实例上方法调用的参数值的对象数组，如果接口方法不使用参数，则为 <code>null</code>。基本类型的参数被包装在适当基本包装器类（如 <code>java.lang.Integer</code> 或 <code>java.lang.Boolean</code>）的实例中。

@return	从代理实例的方法调用返回的值。如果接口方法的声明返回类型是基本类型，则此方法返回的值一定是相应基本包装对象类的实例；否则，它一定是可分配到声明返回类型的类型。如果此方法返回的值为 <code>null</code> 并且接口方法的返回类型是基本类型，则代理实例上的方法调用将抛出 <code>NullPointerException</code>。否则，如果此方法返回的值与上述接口方法的声明返回类型不兼容，则代理实例上的方法调用将抛出 <code>ClassCastException</code>。

@throws	Throwable 从代理实例上的方法调用抛出的异常。该异常的类型必须可以分配到在接口方法的 <code>throws</code> 子句中声明的任一异常类型或未经检查的异常类型 <code>java.lang.RuntimeException</code> 或 <code>java.lang.Error</code>。如果此方法抛出经过检查的异常，该异常不可分配到在接口方法的 <code>throws</code> 子句中声明的任一异常类型，代理实例的方法调用将抛出包含此方法曾抛出的异常的 {@link UndeclaredThrowableException}。

@see	UndeclaredThrowableException

<!-- END DATA -->
