<!-- BEGIN KEY -->
public class java.lang.reflect.UndeclaredThrowableException extends java.lang.RuntimeException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果代理实例的调用处理程序的 {@link InvocationHandler#invoke invoke} 方法抛出一个经过检查的异常（不可分配给 <code>RuntimeException</code> 或 <code>Error</code> 的 <code>Throwable</code>），且该异常不可分配给该方法（在代理实例上调用该方法，并将其指派到调用处理程序）的 <code>throws</code> 子句中声明的任何异常类，则由代理实例上的方法调用抛出此异常。

<p><code>UndeclaredThrowableException</code> 实例包含由调用处理程序抛出的经过检查的未声明异常，而且可以使用 <code>getUndeclaredThrowable()</code> 方法获取。<code>UndeclaredThrowableException</code> 扩展了 <code>RuntimeException</code>，因此它是一个包装已检查异常的未经检查的异常。

<p>从版本 1.4 开始，此异常已经更新，符合常用的异常链机制。“由调用处理程序抛出的经过检查的未声明异常”可以在构造的时候提供，并且可以通过 {@link #getUndeclaredThrowable()} 方法访问，这类对象目前被认为是导致异常的<i>原因</i>，可以通过 {@link Throwable#getCause()} 方法以及前面提到的“遗留方法”访问它。

@author	Peter Jones
@version	1.13, 04/02/19
@see		InvocationHandler
@since	1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Throwable java.lang.reflect.UndeclaredThrowableException.undeclaredThrowable
<!-- END KEY -->
<!-- BEGIN DATA -->
抛出的经过检查的未声明异常
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.reflect.UndeclaredThrowableException(Throwable undeclaredThrowable)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定的 <code>Throwable</code> 构造一个 <code>UndeclaredThrowableException</code>。

@param	undeclaredThrowable 抛出的经过检查的未声明异常

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.reflect.UndeclaredThrowableException(Throwable undeclaredThrowable, String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定的 <code>Throwable</code> 和详细消息构造 <code>UndeclaredThrowableException</code>。

@param	     undeclaredThrowable 抛出的经过检查的未声明异常
@param	     s 详细消息

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Throwable java.lang.reflect.UndeclaredThrowableException.getUndeclaredThrowable()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>UndeclaredThrowableException</code> 中包装的 <code>Throwable</code> 实例，它可能为 <tt>null</tt>。

<p>该方法早于通用异常链设施。{@link Throwable#getCause()} 方法现在是获得此信息的首选方法。

@return 抛出的经过检查的未声明异常

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Throwable java.lang.reflect.UndeclaredThrowableException.getCause()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此异常的原因（此 <code>UndeclaredThrowableException</code> 中包装的 <code>Throwable</code> 实例，可能为 <tt>null</tt>）。

@return  此异常的原因。
@since   1.4

<!-- END DATA -->
