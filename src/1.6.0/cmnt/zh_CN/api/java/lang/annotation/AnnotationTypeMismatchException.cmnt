<!-- BEGIN KEY -->
public class java.lang.annotation.AnnotationTypeMismatchException extends java.lang.RuntimeException
<!-- END KEY -->
<!-- BEGIN DATA -->
若某个注释的类型在对该注释进行编译（或序列化）后发生了更改，而程序试图访问该注释的元素时，抛出此异常。

@author  Josh Bloch
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.reflect.Method java.lang.annotation.AnnotationTypeMismatchException.element
<!-- END KEY -->
<!-- BEGIN DATA -->
注释元素的 <tt>Method</tt> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.String java.lang.annotation.AnnotationTypeMismatchException.foundType
<!-- END KEY -->
<!-- BEGIN DATA -->
在注释中找到的数据（错误）类型。该字符串可以，但不一定包含该值。字符串的确切格式没有指定。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.annotation.AnnotationTypeMismatchException(Method element, String foundType)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造针对指定的注释类型元素和找到的数据类型的 AnnotationTypeMismatchException。

@param element 注释元素的 <tt>Method</tt> 对象
@param foundType 在注释中找到的数据的（错误）类型。此字符串可以，但不一定包含该值。没有指定字符串的确切格式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.reflect.Method java.lang.annotation.AnnotationTypeMismatchException.element()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回类型不正确的元素的 <tt>Method</tt> 对象。

@return 类型不正确的元素的 <tt>Method</tt> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.annotation.AnnotationTypeMismatchException.foundType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在类型不正确的元素中找到的数据类型。返回的字符串可以，但不一定包含该值。字符串的确切格式没有指定。

@return 在类型不正确的元素中找到的数据类型

<!-- END DATA -->
