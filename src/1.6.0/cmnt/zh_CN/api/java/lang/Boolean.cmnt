<!-- BEGIN KEY -->
public final class java.lang.Boolean extends java.lang.Object implements java.io.Serializable, java.lang.Comparable
<!-- END KEY -->
<!-- BEGIN DATA -->
Boolean 类将基本类型为 <code>boolean</code> 的值包装在一个对象中。一个 <code>Boolean</code> 类型的对象只包含一个类型为 <code>boolean</code> 的字段。 
 <p>
此外，此类还为 <code>boolean</code> 和 <code>String</code> 的相互转换提供了许多方法，并提供了处理 <code>boolean</code> 时非常有用的其他一些常量和方法。 

@author  Arthur van Hoff 
@version 1.53, 11/17/05 
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Boolean java.lang.Boolean.TRUE
<!-- END KEY -->
<!-- BEGIN DATA -->

对应基值 <code>true</code> 的 <code>Boolean</code> 对象。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Boolean java.lang.Boolean.FALSE
<!-- END KEY -->
<!-- BEGIN DATA -->

对应基值 <code>false</code> 的 <code>Boolean</code> 对象。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Class<java.lang.Boolean> java.lang.Boolean.TYPE
<!-- END KEY -->
<!-- BEGIN DATA -->
表示基本类型 boolean 的 Class 对象。

@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
private final boolean java.lang.Boolean.value
<!-- END KEY -->
<!-- BEGIN DATA -->
布尔值。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Boolean(boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
分配一个表示 <code>value</code> 参数的 <code>Boolean</code> 对象。 

 <p><b>注：一般情况下都不宜使用该构造方法。若不需要<i>新</i> 的实例，则静态工厂 {@link #valueOf(boolean)} 通常是一个更好的选择。这有可能显著提高空间和时间性能。</b>
 
@param   value   <code>Boolean</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Boolean(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 String 参数不为 <code>null</code> 且在忽略大小写时等于 {@code "true"}，则分配一个表示 <code>true</code> 值的 <code>Boolean</code> 对象。否则分配一个表示 <code>false</code> 值的 <code>Boolean</code> 对象。示例：<p>
{@code new Boolean("True")} 生成一个表示 <tt>true</tt> 的 <tt>Boolean</tt> 对象。<br> 
{@code new Boolean("yes")} 生成一个表示 <tt>false</tt> 的 <tt>Boolean</tt> 对象。

@param   s   要转换为 <code>Boolean</code> 的字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.Boolean.parseBoolean(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符串参数解析为 boolean 值。如果 String 参数不是 <code>null</code> 且在忽略大小写时等于 {@code "true"}，则返回的 <code>boolean</code> 表示 true 值。<p>
示例：{@code Boolean.parseBoolean("True")} 返回 <tt>true</tt>。<br>
示例：{@code Boolean.parseBoolean("yes")} 返回 <tt>false</tt>。

@param      s   包含要解析的布尔表达式的 <code>String</code>   
@return     String 参数所表示的布尔值 
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.Boolean.booleanValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <tt>Boolean</tt> 对象的值作为基本布尔值返回。

@return  此对象的基本 <code>boolean</code> 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Boolean java.lang.Boolean.valueOf(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个表示指定 <tt>boolean</tt> 值的 <tt>Boolean</tt> 实例。如果指定的 <tt>boolean</tt> 值为 <tt>true</tt>，则此方法返回 <tt>Boolean.TRUE</tt>；如果为 <tt>false</tt>，则返回 <tt>Boolean.FALSE</tt>。如果不需要新的 <tt>Boolean</tt> 实例，则应优先使用此方法，而不是构造方法 {@link #Boolean(boolean)}，因为此方法有可能大大提高空间和时间性能。

@param  b 布尔值。
@return 一个表示 <tt>b</tt> 的 <tt>Boolean</tt> 实例。
@since  1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Boolean java.lang.Boolean.valueOf(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个用指定的字符串表示值的 <code>Boolean</code> 值。如果字符串参数不为 <code>null</code> 且在忽略大小写时等于 {@code "true"}，则返回的 <code>Boolean</code> 表示 true 值。

@param   s   字符串。
@return  该字符串所表示的 <code>Boolean</code> 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.Boolean.toString(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个表示指定布尔值的 <tt>String</tt> 对象。如果指定布尔值为 <code>true</code>，则将返回字符串 {@code "true"}，否则将返回字符串 {@code "false"}。

@param b	要转换的布尔值 
@return 指定 <code>boolean</code> 值的字符串表达式 
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.Boolean.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示该布尔值的 <tt>String</tt> 对象。如果该对象表示 <code>true</code> 值，则返回等于 {@code "true"} 的字符串。否则返回等于 {@code "false"} 的字符串。

@return  此对象的字符串表示形式。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.Boolean.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该 <tt>Boolean</tt> 对象的哈希码。

@return  如果此对象表示 <tt>true</tt> 则返回整数 <tt>1231</tt>；如果表示 <tt>false</tt> 则返回整数 <tt>1237</tt>。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.Boolean.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
当且仅当参数不是 <code>null</code>，而是一个与此对象一样，都表示同一个 <code>Boolean</code> 值的 <code>boolean</code> 对象时，才返回 <code>true</code>。 

@param   obj   比较的对象。
@return  如果这些布尔对象表示相同的值，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.Boolean.getBoolean(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
当且仅当以参数命名的系统属性存在，且等于 {@code "true"} 字符串时，才返回 <code>true</code>。（从 Java<small><sup>TM</sup></small> 平台的 1.0.2 版本开始，字符串的测试不再区分大小写。）通过 <code>getProperty</code> 方法可访问系统属性，此方法由 <code>System</code> 类定义。
 <p>
如果没有以指定名称命名的属性或者指定名称为空或 null，则返回 <code>false</code>。

@param   name   系统属性名。
@return  系统属性的 <code>boolean</code> 值。
@see     java.lang.System#getProperty(java.lang.String) 
@see     java.lang.System#getProperty(java.lang.String, java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.Boolean.compareTo(Boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <tt>Boolean</tt> 实例与其他实例进行比较。

@param   b 要进行比较的 <tt>Boolean</tt> 实例 
@return  如果对象与参数表示的布尔值相同，则返回零；如果此对象表示 true，参数表示 false，则返回一个正值；如果此对象表示 false，参数表示 true，则返回一个负值 
@throws  NullPointerException 如果参数为 <tt>null</tt> 
@see     Comparable 
@since  1.5

<!-- END DATA -->
