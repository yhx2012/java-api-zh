<!-- BEGIN KEY -->
public interface java.lang.management.RuntimeMXBean
<!-- END KEY -->
<!-- BEGIN DATA -->
Java 虚拟机的运行时系统的管理接口。

<p> Java 虚拟机具有此接口的实现类的单一实例。实现此接口的实例是一个 <a href="ManagementFactory.html#MXBean">MXBean</a>，它可以通过调用 {@link ManagementFactory#getRuntimeMXBean} 方法或从{@link ManagementFactory#getPlatformMBeanServer 平台 <tt>MBeanServer</tt>} 方法获得。

<p>在 MBeanServer 中唯一标识运行时系统的 MXBean 的 <tt>ObjectName</tt> 为：
 <blockquote>
    {@link ManagementFactory#RUNTIME_MXBEAN_NAME <tt>java.lang:type=Runtime</tt>}
 </blockquote>

<p> 此接口定义了几种便捷的方法，可用于访问有关 Java 虚拟机的系统属性。  

@see <a href="../../../javax/management/package-summary.html">JMX Specification.</a>
@see <a href="package-summary.html#examples">访问 MXBeans 的方式</a>

@author  Mandy Chung
@version 1.13, 04/20/04
@since   1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.management.RuntimeMXBean.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示正在运行的 Java 虚拟机的名称。返回的名称字符串可以为任何任意字符串，Java 虚拟机实现可以选择在返回的名称字符串中嵌入特定于平台的有用信息。每个正在的运行的虚拟机可以具有不同的名称。
 
@return 表示正在运行的 Java 虚拟机的名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.management.RuntimeMXBean.getVmName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Java 虚拟机实现名称。此方法等效于 {@link System#getProperty System.getProperty("java.vm.name")}。

@return Java 虚拟机实现名称。

@throws  java.lang.SecurityException 如果安全管理器存在并且其 <code>checkPropertiesAccess</code> 方法不允许访问此系统属性。
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.management.RuntimeMXBean.getVmVendor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Java 虚拟机实现供应商。此方法等效于 {@link System#getProperty System.getProperty("java.vm.vendor")}。

@return Java 虚拟机实现供应商。

@throws  java.lang.SecurityException 如果安全管理器存在并且其 <code>checkPropertiesAccess</code> 方法不允许访问此系统属性。
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.management.RuntimeMXBean.getVmVersion()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Java 虚拟机实现版本。此方法等效于 {@link System#getProperty System.getProperty("java.vm.version")}。

@return Java 虚拟机实现版本。

@throws  java.lang.SecurityException 如果安全管理器存在并且其 <code>checkPropertiesAccess</code> 方法不允许访问此系统属性。
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.management.RuntimeMXBean.getSpecName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Java 虚拟机规范名称。此方法等效于 {@link System#getProperty System.getProperty("java.vm.specification.name")}。

@return Java 虚拟机规范名称。

@throws  java.lang.SecurityException 如果安全管理器存在并且其 <code>checkPropertiesAccess</code> 方法不允许访问此系统属性。
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.management.RuntimeMXBean.getSpecVendor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Java 虚拟机规范供应商。此方法等效于 {@link System#getProperty System.getProperty("java.vm.specification.vendor")}。

@return Java 虚拟机规范供应商。

@throws  java.lang.SecurityException 如果安全管理器存在并且其 <code>checkPropertiesAccess</code> 方法不允许访问此系统属性。
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.management.RuntimeMXBean.getSpecVersion()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Java 虚拟机规范版本。此方法等效于 {@link System#getProperty System.getProperty(&quot;java.vm.specification.version&quot;)}。

@return Java 虚拟机规范版本。

@throws  java.lang.SecurityException 如果安全管理器存在并且其 <code>checkPropertiesAccess</code> 方法不允许访问此系统属性。
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.management.RuntimeMXBean.getManagementSpecVersion()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回正在运行的 Java 虚拟机实现的管理接口的规范版本。

@return 正在运行的 Java 虚拟机实现的管理接口的规范版本。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.management.RuntimeMXBean.getClassPath()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回系统类加载器用于搜索类文件的 Java 类路径。此方法等效于 {@link System#getProperty System.getProperty("java.class.path")}。

<p> Java 类路径中的多个路径由所监视的 Java 虚拟机平台的路径分隔符字符进行分隔。

@return Java 类路径。

@throws  java.lang.SecurityException 如果安全管理器存在并且其 <code>checkPropertiesAccess</code> 方法不允许访问此系统属性。
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.management.RuntimeMXBean.getLibraryPath()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Java 库路径。此方法等效于 {@link System#getProperty System.getProperty("java.library.path")}。

<p> Java 库路径中的多个路径由所监视的 Java 虚拟机平台的路径分隔符字符进行分隔。

@return Java 库路径。

@throws  java.lang.SecurityException 如果安全管理器存在并且其 <code>checkPropertiesAccess</code> 方法不允许访问此系统属性。
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.management.RuntimeMXBean.isBootClassPathSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试 Java 虚拟机是否支持由引导类加载器用于搜索类文件的引导类路径机制。

@return 如果 Java 虚拟机支持此类路径机制，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.management.RuntimeMXBean.getBootClassPath()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由引导类加载器用于搜索类文件的引导类路径。

<p> 引导类路径中的多个路径由平台（Java 虚拟机在其上运行）的路径分隔符字符进行分隔。

<p>Java 虚拟机实现可能不支持引导类加载器用于搜索类文件的引导类路径机制。{@link #isBootClassPathSupported} 方法可用于确定 Java 虚拟机是否支持此方法。

@return 引导类路径。

@throws java.lang.UnsupportedOperationException 如果 Java 虚拟机不支持此操作。

@throws  java.lang.SecurityException 如果存在安全管理器，且调用方不具有 ManagementPermission(&quot;monitor&quot;)。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.lang.String> java.lang.management.RuntimeMXBean.getInputArguments()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回传递给 Java 虚拟机的输入变量，其中不包括传递给 <tt>main</tt> 方法的变量。如果没有传递给 Java 虚拟机的输入变量，则此方法将返回一个空列表。
 <p>
有些 Java 虚拟机实现可能从多个不同源获取输入变量：例如，从启动 Java 虚拟机的应用程序传递的变量，如&ldquo;java&rdquo;命令、环境变量、配置文件等。
 <p>
通常，并非所有的&ldquo;java&rdquo;命令的命令行选项都会传递给 Java 虚拟机。因此，返回的输入变量中可能不包括所有命令行选项。

 <p>
<b>MBeanServer 访问</b>：<br><tt>List<String></tt> 的映射类型为 <tt>String[]</tt>。

@return  <tt>String</tt> 对象列表；每个元素都是传递给 Java 虚拟机的变量。

@throws  java.lang.SecurityException 如果存在安全管理器，且调用方不具有 ManagementPermission(&quot;monitor&quot;)。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.lang.management.RuntimeMXBean.getUptime()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Java 虚拟机的正常运行时间（以毫秒为单位）。

@return Java 虚拟机的正常运行时间（以毫秒为单位）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.lang.management.RuntimeMXBean.getStartTime()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Java 虚拟机的启动时间（以毫秒为单位）。此方法返回 Java 虚拟机启动的近似时间。

@return Java 虚拟机的启动时间（以毫秒为单位）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map<java.lang.String, java.lang.String> java.lang.management.RuntimeMXBean.getSystemProperties()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回所有系统属性的名称和值的映射。此方法将调用 {@link System#getProperties} 来获取所有系统属性。省略名称或值不为 <tt>String</tt> 的属性。

 <p>
<b>MBeanServer 访问</b>：<br><tt>Map<String,String></tt> 的映射类型为每行具有两个项的 {@link javax.management.openmbean.TabularData TabularData}，如下所示：
<blockquote>
<table border>
<tr>
  <th>项名称</th>
  <th>项类型</th>
  </tr>
 <tr>
   <td><tt>key</tt></td>
   <td><tt>String</tt></td>
   </tr>
 <tr>
   <td><tt>value</tt></td>
   <td><tt>String</tt></td>
   </tr>
 </table>
 </blockquote>

@return 所有系统属性的名称和值的映射。

@throws  java.lang.SecurityException 如果安全管理器存在并且其 <code>checkPropertiesAccess</code> 方法不允许访问系统属性。

<!-- END DATA -->
