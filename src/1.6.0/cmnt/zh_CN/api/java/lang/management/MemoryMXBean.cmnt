<!-- BEGIN KEY -->
public interface java.lang.management.MemoryMXBean
<!-- END KEY -->
<!-- BEGIN DATA -->
Java 虚拟机内存系统的管理接口。

<p> Java 虚拟机具有此接口的实现类的单一实例。实现此接口的实例是一个 <a href="ManagementFactory.html#MXBean">MXBean</a>，可以通过调用 {@link ManagementFactory#getMemoryMXBean} 方法或从{@link ManagementFactory#getPlatformMBeanServer 平台 <tt>MBeanServer</tt>} 方法获得。

<p>在 MBeanServer 中唯一标识内存系统的 MXBean 的 <tt>ObjectName</tt> 为：
 <blockquote>
    {@link ManagementFactory#MEMORY_MXBEAN_NAME <tt>java.lang:type=Memory</tt>}
 </blockquote>

<h4> 内存 </h4>
Java 虚拟机的内存系统管理以下类型的内存：

<h4> 1. 堆 </h4>
Java 虚拟机具有一个<i>堆</i>，堆是运行时数据区域，所有类实例和数组的内存均从此处分配。堆是在 Java 虚拟机启动时创建的。对象的堆内存由称为<i>垃圾回收器</i> 的自动内存管理系统回收。

<p>堆的大小可以固定，也可以扩大和缩小。堆的内存不需要是连续空间。

<h4> 2. 非堆内存</h4>
Java 虚拟机管理堆之外的内存（称为<i>非堆内存</i>）。
 
<p> Java 虚拟机具有一个由所有线程共享的<i>方法区</i>。方法区属于非堆内存。它存储每个类结构，如运行时常量池、字段和方法数据，以及方法和构造方法的代码。它是在 Java 虚拟机启动时创建的。
 
<p> 方法区在逻辑上是堆的一部分，但 Java 虚拟机实现可以选择不对其进行回收或压缩。与堆类似，方法区的大小可以固定，也可以扩大和缩小。方法区的内存不需要是连续空间。

<p>除了方法区外，Java 虚拟机实现可能需要用于内部处理或优化的内存，这种内存也是非堆内存。例如，JIT 编译器需要内存来存储从 Java 虚拟机代码转换而来的本机代码，从而获得高性能。

<h4>内存池和内存管理器</h4>
{@link MemoryPoolMXBean 内存池}和{@link MemoryManagerMXBean 内存管理器}都是抽象实体，对 Java 虚拟机的内存系统进行监视和管理。

<p>内存池表示 Java 虚拟机管理的内存区域。Java 虚拟机至少有一个内存池，而且可以在执行期间创建或删除内存池。内存池可以是堆内存，也可以是非堆内存。 
 
<p>内存管理器负责管理一个或多个内存池。垃圾回收器就是一种内存管理器，负责回收不可到达对象占用的内存。Java 虚拟机可以有一个或多个内存管理器。可以在运行期间添加或删除内存管理器。一个内存池可以由多个内存管理器进行管理。

<h4>内存使用量监视</h4>

对于内存系统而言，内存使用量是一个非常重要的监视属性。例如，内存使用量可以指示：
<ul>
  <li>应用程序的内存使用量，</li>
  <li>自动内存管理系统上的工作负载，</li>
  <li>潜在的内存泄漏。</li>
</ul>

<p>
可以采用三种方式监视内存使用量：
<ul>
  <li>轮询</li>
  <li>使用量阈值通知</li>
  <li>集合使用量阈值通知</li>
</ul>

具体细节在 {@link MemoryPoolMXBean} 接口中指定。

<p>内存使用量监视机制旨在用于负载平衡或工作负载分布。例如，应用程序在其内存使用量超过特定阈值时，将会停止接收任何新的工作负载。它不适合用于供应用程序进行检测并从低内存情况恢复。

<h4>通知</h4>

<p>此 <tt>MemoryMXBean</tt> 是一个 {@link javax.management.NotificationEmitter NotificationEmitter}，如果任何一个内存池支持<a href="MemoryPoolMXBean.html#UsageThreshold">使用量阈值</a>或<a href="MemoryPoolMXBean.html#CollectionThreshold">集合使用量阈值</a>（可以通过调用 {@link MemoryPoolMXBean#isUsageThresholdSupported} 和 {@link MemoryPoolMXBean#isCollectionUsageThresholdSupported} 方法确定），它将发出两种类型的{@link javax.management.Notification 通知}。 
 <ul>
<li>{@link MemoryNotificationInfo#MEMORY_THRESHOLD_EXCEEDED 使用量阈值超过通知 } - 用于通知内存池的内存使用量增加，已达到或超过其<a href="MemoryPoolMXBean.html#UsageThreshold">使用量阈值</a>。
       </li>
<li>{@link MemoryNotificationInfo#MEMORY_COLLECTION_THRESHOLD_EXCEEDED 集合使用量阈值超过通知} - 用于通知在 Java 虚拟机对内存池中不使用的对象进行了回收工作之后，该内存池的内存使用量已大于或等于其<a href="MemoryPoolMXBean.html#CollectionThreshold">集合使用量阈值</a>。</li>
 </ul>

 <p>
发出的通知是一个 {@link javax.management.Notification} 实例，其{@link javax.management.Notification#setUserData 用户数据}设置为 {@link CompositeData CompositeData}（表示包含构造该通知时内存池信息的 {@link MemoryNotificationInfo} 对象）。<tt>CompositeData</tt> 包含 {@link MemoryNotificationInfo#from MemoryNotificationInfo} 中描述的各个属性。

 <hr>
 <h4>NotificationEmitter</h4>
{@link ManagementFactory#getMemoryMXBean} 返回的 <tt>MemoryMXBean</tt> 对象实现了 {@link javax.management.NotificationEmitter NotificationEmitter} 接口，该接口允许在 <tt>MemoryMXBean</tt> 中将侦听器注册为通知侦听器。  
 
以下示例代码将注册 <tt>MyListener</tt> 以处理 <tt>MemoryMXBean</tt> 发出的通知。 

 <blockquote><pre>
 class MyListener implements javax.management.NotificationListener {
     public void handleNotification(Notification notif, Object handback) {
         // handle notification
         ....
     }
 }

 MemoryMXBean mbean = ManagementFactory.getMemoryMXBean();
 NotificationEmitter emitter = (NotificationEmitter) mbean;
 MyListener listener = new MyListener();
 emitter.addNotificationListener(listener, null, null);
 </pre></blockquote>

@see <a href="../../../javax/management/package-summary.html">JMX Specification.</a>
@see <a href="package-summary.html#examples">Ways to Access MXBeans</a>

@author  Mandy Chung
@version 1.14, 04/20/04
@since   1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.management.MemoryMXBean.getObjectPendingFinalizationCount()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回其终止被挂起的对象的近似数目。

@return 其终止被挂起的对象的近似数目。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.management.MemoryUsage java.lang.management.MemoryMXBean.getHeapMemoryUsage()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回用于对象分配的堆的当前内存使用量。堆由一个或多个内存池组成。返回的内存使用量中的<tt>已使用</tt>大小和<tt>已提交</tt>大小为所有堆内存池的对应值的总和，而返回的内存使用量中表示堆内存设置的<tt>初始</tt>大小和<tt>最大</tt>大小则可能不等于所有堆内存池对应值的总和。
<p>
返回的内存使用量中已使用内存量为活动对象和尚未回收的垃圾对象（如果有）所占用内存的总量。

 <p>
<b>MBeanServer 访问</b>：<br><tt>MemoryUsage</tt> 的映射类型为 <tt>CompositeData</tt>，具有 {@link MemoryUsage#from MemoryUsage} 中指定的属性。

@return 表示堆内存使用量的 {@link MemoryUsage} 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.management.MemoryUsage java.lang.management.MemoryMXBean.getNonHeapMemoryUsage()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回 Java 虚拟机使用的非堆内存的当前内存使用量。非堆内存由一个或多个内存池组成。返回的内存使用量中的<tt>已使用</tt>大小和<tt>已提交</tt>大小为所有非堆内存池的对应值的总和，而返回的内存使用量中表示非堆内存设置的<tt>初始</tt>大小和<tt>最大</tt>大小则可能不等于所有非堆内存池对应值的总和。

<p>
<b>MBeanServer 访问</b>：<br><tt>MemoryUsage</tt> 的映射类型为 <tt>CompositeData</tt>，具有 {@link MemoryUsage#from MemoryUsage} 中指定的属性。

@return 表示非堆内存使用量的 {@link MemoryUsage} 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.management.MemoryMXBean.isVerbose()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试内存系统的 verbose 输出是否已启用。

@return 如果启用了内存系统的 verbose 输出，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.management.MemoryMXBean.setVerbose(boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
启用或禁用内存系统的 verbose 输出。verbose 输出信息和 verbose 信息发送到的输出流都与实现有关。通常，只要垃圾回收时释放了内存，Java 虚拟机实现就会输出一条消息。 

<p>
此方法的每次调用都会全局启用或禁用 verbose 输出。

@param value 为 <tt>true</tt> 将启用 verbose 输出；为 <tt>false</tt> 将禁用输出。

@exception  java.lang.SecurityException 如果存在安全管理器，且调用方不具有 ManagementPermission("control")。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.management.MemoryMXBean.gc()
<!-- END KEY -->
<!-- BEGIN DATA -->
运行垃圾回收器。调用 <code>gc()</code> 实际上等同于调用：
 <blockquote><pre>
 System.gc()
 </pre></blockquote>

@see     java.lang.System#gc()

<!-- END DATA -->
