<!-- BEGIN KEY -->
public final class java.lang.management.ManagementPermission extends java.security.BasicPermission
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 SecurityManager 运行的代码调用 Java 平台的管理接口中定义的方法时，SecurityManager 将要检查的权限。
<P>
下表提供了权限所允许的操作的简要说明，并讨论了授权代码权限的风险。
<P>

<table border=1 cellpadding=5 summary="Table shows permission target name, wh
at the permission allows, and associated risks">
<tr>
<th>权限目标名称</th>
<th>权限所允许的操作</th>
<th>允许此权限所带来的风险</th>
</tr>

<tr>
  <td>control</td>
  <td>可以控制 Java 虚拟机的运行时特征，例如，设置 -verbose:gc 和 -verbose:class 标志，设置内存池的阈值，以及启用和禁用线程争用监视支持。 
  </td>
  <td>这允许攻击者控制 Java 虚拟机的运行时特征，会导致系统行为不正常。
  </td>
</tr>
<tr>
  <td>monitor</td>
  <td>可以获取 Java 虚拟机的运行时信息，如线程堆栈跟踪、所有已加载类名称的列表以及 Java 虚拟机的输入参数。</td>
  <td>这允许恶意代码监视运行时信息，从而发现系统漏洞。</td>
</tr>

</table>

 <p>
程序员通常不会直接创建 ManagementPermission 对象。这些对象由安全策略代码根据读取的安全策略文件创建。

@author  Mandy Chung
@version 1.5, 04/21/06
@since   1.5

@see java.security.BasicPermission
@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection
@see java.lang.SecurityManager


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.management.ManagementPermission(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定名称的 ManagementPermission。

@param name 权限名称。必须为 "monitor" 或 "control"。

@throws NullPointerException 如果 <code>name</code> 为 <code>null</code>。
@throws IllegalArgumentException 如果 <code>name</code> 为空或无效。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.management.ManagementPermission(String name, String actions) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造新的 ManagementPermission 对象。

@param name 权限名称。必须为 "monitor" 或 "control"。
@param actions 必须为 null 或空字符串。

@throws NullPointerException 如果 <code>name</code> 为 <code>null</code>。
@throws IllegalArgumentException 如果 <code>name</code> 为空或者参数无效。

<!-- END DATA -->
