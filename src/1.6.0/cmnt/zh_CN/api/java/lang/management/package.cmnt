<!-- BEGIN KEY -->
java.lang.management
<!-- END KEY -->
<!-- BEGIN DATA -->


提供管理接口，用于监视和管理 Java 虚拟机以及 Java 虚拟机在其上运行的操作系统。它同时允许从本地和远程对正在运行的 Java 虚拟机进行监视和管理。

<h4>平台 MXBean</h4>

此包定义以下组件的管理接口：

<blockquote>
<table cellspacing=1 summary="Description of the MBeans">
<tr>
<th><p align="left">管理接口</p></th>
<th><p align="left">描述</p></th>
</tr>
<tr>
<td> <tt>{@link java.lang.management.ClassLoadingMXBean}</tt> </td>
<td> Java 虚拟机的类加载系统。</td>
</tr>
<tr>
<td> <tt>{@link java.lang.management.CompilationMXBean}</tt> </td>
<td> Java 虚拟机的编译系统。</td>
</tr>
<tr>
<td> <tt>{@link java.lang.management.MemoryMXBean}</tt> </td>
<td> Java 虚拟机的内存系统。</td>
</tr>
<tr>
<td> <tt>{@link java.lang.management.ThreadMXBean}</tt> </td>
<td> Java 虚拟机的线程系统。</td>
</tr>
<tr>
<td> <tt>{@link java.lang.management.RuntimeMXBean}</tt> </td>
<td> Java 虚拟机的运行时系统。</td>
</tr>
<tr>
<td> <tt>{@link java.lang.management.OperatingSystemMXBean}</tt> </td>
<td> Java 虚拟机在其上运行的操作系统。</td>
</tr>
<tr>
<td> <tt>{@link java.lang.management.GarbageCollectorMXBean}</tt> </td>
<td> Java 虚拟机中的垃圾回收器。</td>
</tr>
<tr>
<td> <tt>{@link java.lang.management.MemoryManagerMXBean}</tt> </td>
<td> Java 虚拟机中的内存管理器。</td>
</tr>
<tr>
<td> <tt>{@link java.lang.management.MemoryPoolMXBean}</tt> </td>
<td> Java 虚拟机中的内存池。</td>
</tr>
</table>
</blockquote>

<p>
平台 MXBean 是一种<i>管理 Bean</i>，它定义平台一个组件的管理接口，在 <a href="ManagementFactory.html#MXBean">ManagementFactory</a> 类中定义。

<p>应用程序可以采用以下方式监视 Java 虚拟机的监测和管理特定的特征：
<ul>
<li><i>直接访问 MXBean 接口</i>
    <ol type="a">
    <li>通过静态工厂方法获取 MXBean 实例，从本地访问正在运行的虚拟机的 MXBean 接口。</li>
    <li>构造 MXBean 代理实例，通过调用 {@link java.lang.management.ManagementFactory#newPlatformMXBeanProxy ManagementFactory.newPlatformMXBeanProxy} 将方法调用转发到给定的 {@link javax.management.MBeanServer MBeanServer}。代理通常构造为远程访问另一个正在运行的虚拟机的 MXBean。</li>
    </ol></li>
<li><i>通过 {@link javax.management.MBeanServer MBeanServer} 接口间接访问</i>
    <ol type="a">
    <li>通过 {@link java.lang.management.ManagementFactory#getPlatformMBeanServer platform MBeanServer} 从本地访问 MXBean 或通过特定的 <tt>MBeanServerConnection</tt> 远程访问 MXBean。MXBean 的属性和操作仅使用 <em>JMX 开放类型</em>，包括在 {@link javax.management.openmbean.OpenType OpenType} 中的定义的基本数据类型、{@link javax.management.openmbean.CompositeData CompositeData} 和 {@link javax.management.openmbean.TabularData TabularData}。
       </li>
    </ol></li>
</ul>

以下给出了一些采用不同方式访问 MXBean 的<a href="#examples">示例</a>。

<h4>ManagementFactory</h4>

{@link java.lang.management.ManagementFactory} 类是 Java 平台的管理工厂类。此类提供了一组静态工厂方法，用以获得 Java 平台的 MXBean，从而允许应用程序直接访问 MXBean。

<p>使用 {@link java.lang.management.ManagementFactory#getPlatformMBeanServer getPlatformMBeanServer} 方法可以访问<em>平台 MBeanServer</em>。第一次调用此方法时，它将创建平台 MBeanServer 并注册所有的平台 MXBean，包括在其他包（如 {@link java.util.logging.LoggingMXBean}）中定义的平台 MXBean。每个平台 MXBean 均使用用于构造 {@link javax.management.ObjectName ObjectName} 的 {@link java.lang.management.ManagementFactory ManagementFactory} 类中定义的唯一名称进行注册。这是唯一可以由在相同 Java 虚拟机内运行的不同管理组件共享的 MBeanServer。
 
<h4>互操作性</h4>

管理应用程序和正在运行的虚拟机的平台 MBeanServer 可以进行互操作，而无需平台 MXBean 接口使用的类。JMX 连接器服务器和连接器客户端之间传送的数据类型为 JMX {@link javax.management.openmbean.OpenType 开放类型}，这就允许跨版本的互操作。

<p>当通过 MBeanServer 接口进行访问时，MXBean 接口使用的数据类型将映射为开放类型。数据类型映射在 {@link java.lang.management.ManagementFactory ManagementFactory} 类中指定。

<h4><a name="examples">访问 MXBean 的方法</a></h4>

有三种访问管理接口的方法。 

<p>
<ol>
<li>直接调用同一 Java 虚拟机内的 MXBean 中的方法。
<blockquote><pre>
   RuntimeMXBean mxbean = ManagementFactory.getRuntimeMXBean();

   // Get the standard attribute &quot;VmVendor&quot;
   String vendor = mxbean.getVmVendor();

</pre>
</blockquote>
</li>

<li>通过一个连接到正在运行的虚拟机的<tt>平台 MBeanServer</tt> 的 <tt>MBeanServerConnection</tt>。</li>
<blockquote><pre>
   MBeanServerConnection mbs;

   // Connect to a running JVM (or itself) and get MBeanServerConnection
   // that has the JVM MXBeans registered in it
   ...

   try {
       // Assuming the RuntimeMXBean has been registered in mbs
       ObjectName oname = new ObjectName(ManagementFactory.RUNTIME_MXBEAN_NAME);
    
       // Get standard attribute &quot;VmVendor&quot;
       String vendor = (String) mbs.getAttribute(oname, &quot;VmVendor&quot;);
   } catch (....) {
       // Catch the exceptions thrown by ObjectName constructor
       // and MBeanServer.getAttribute method
       ...
   }

</pre></blockquote>

<li>使用 MXBean 代理。</li>
<blockquote><pre>
   MBeanServerConnection mbs;

   // Connect to a running JVM (or itself) and get MBeanServerConnection
   // that has the JVM MBeans registered in it
   ...

   // Get a MBean proxy for RuntimeMXBean interface
   RuntimeMXBean proxy = 
       ManagementFactory.newPlatformMXBeanProxy(mbs,
                                                ManagementFactory.RUNTIME_MXBEAN_NAME,
                                                RuntimeMXBean.class);
   // Get standard attribute "VmVendor"
   String vendor = proxy.getVmVendor();
</pre></blockquote>
</ol>


<h4><a name="extension">平台扩展</a></h4>

Java 虚拟机实现通过定义与平台有关的接口（它扩展了标准管理接口，以包括特定于平台的规格和管理操作），可以将其平台扩展添加到管理接口。<tt>ManagementFactory</tt> 类中的静态工厂方法将返回具有平台扩展的 MBean。

<p>
建议使用特定于供应商的前缀（如供应商的名称）对特定于平台的属性进行命名，以避免标准管理接口的未来扩展与平台扩展之间的属性名称冲突。如果标准管理接口的未来扩展为管理接口定义了一个新属性，而该属性名称碰巧与某个特定于供应商的属性的名称相同，则必须修改访问该特定于供应商的属性的应用程序，以处理版本控制和兼容性问题。

<p>以下示例演示了如何访问 Sun 的 <tt>RuntimeMXBean</tt> 实现中的特定于平台的属性。

<p>
1) 直接访问特定于 Sun 的 MXBean 接口
<blockquote><pre>
   com.sun.management.RuntimeMXBean mxbean = 
       (com.sun.management.RuntimeMXBean) ManagementFactory.getRuntimeMXBean();

   // Get the standard attribute "VmVendor"
   String vendor = mxbean.getVmVendor();

   // Get the platform-specific attribute "Bar"
   BarType bar = mxbean.getBar();

</pre>
</blockquote>

<p>
2) 通过 <tt>MBeanServer</tt> 访问特定于 Sun 的 MXBean 接口

<blockquote><pre>
   MBeanServerConnection mbs;

   // Connect to a running JVM (or itself) and get MBeanServerConnection
   // that has the JVM MXBeans registered in it
   ...

   try {
       // Assuming the RuntimeMXBean has been registered in mbs
       ObjectName oname = new ObjectName(ManagementFactory.RUNTIME_MXBEAN_NAME);
    
       // Get standard attribute "VmVendor"
       String vendor = (String) mbs.getAttribute(oname, "VmVendor");

       // Check if this MXBean contains Sun's extension
       if (mbs.isInstanceOf(oname, "com.sun.management.RuntimeMXBean")) {
           // Get platform-specific attribute &quot;Bar&quot;
           BarType bar = (String) mbs.getAttribute(oname, "Bar");
       }
   } catch (....) {
       // Catch the exceptions thrown by ObjectName constructor
       // and MBeanServer methods
       ...
   }

</pre></blockquote>

<p> 除非另有说明，向此包的任何类或接口中的构造方法或方法传递 <tt>null</tt> 变量，将会抛出 {@link java.lang.NullPointerException NullPointerException}。

<p> java.lang.management API 是线程安全的。

@see <a href="../../../javax/management/package-summary.html">JMX 规范。</a>

@author  Mandy Chung
@version 1.11, 04/20/04
@since   1.5

<!-- END DATA -->
