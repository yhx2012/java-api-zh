<!-- BEGIN KEY -->
public class java.lang.management.ThreadInfo extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
线程信息。<tt>ThreadInfo</tt> 包含有关线程的信息，包括：
<h4>常规线程信息</h4>
<ul>
  <li>线程 ID。</li>
  <li>线程名称。</li>
</ul>

<h4>执行信息</h4>
<ul>
  <li>线程状态。</li>
    <li>由于以下原因阻塞线程的对象：
       <ul>
       <li>等待进入同步块/方法，或者</li>
       <li>等待 {@link Object#wait Object.wait} 方法的通知，或者</li>
       <li>由于 {@link java.util.concurrent.locks.LockSupport#park
           LockSupport.park} 调用而暂停。</li>
       </ul>
   </li>
  <li>拥有阻塞线程对象的线程的 ID。</li>
  <li>线程的堆栈跟踪。</li>
   <li>线程锁定的对象监视器列表。</li>
   <li>线程锁定的<a href="LockInfo.html#OwnableSynchronizer">可拥有同步器</a>列表。</li>
</ul>

<h4><a name="SyncStats">同步统计数据</a></h4>
<ul>
  <li>由于同步或等待通知而阻塞线程的次数。</li>
  <li>从启动{@link ThreadMXBean#setThreadContentionMonitoringEnabled 
       线程争用监视}开始，由于同步或等待通知而阻塞线程的累计时间。某些 Java 虚拟机实现可能不支持此功能。{@link ThreadMXBean#isThreadContentionMonitoringSupported()} 方法可用于确定 Java 虚拟机是否支持此功能。</li>
</ul>

<p>此线程信息类设计用于监视系统，不用于同步控制。

<h4>MXBean 映射</h4>
<tt>ThreadInfo</tt> 映射到一个具有 {@link #from from} 方法中指定属性的 {@link CompositeData CompositeData}。

 @see ThreadMXBean#getThreadInfo
 @see ThreadMXBean#dumpAllThreads

@author  Mandy Chung
@version 1.16, 04/18/04
@since   1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.lang.management.ThreadInfo.getThreadId()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <tt>ThreadInfo</tt> 关联的线程的 ID。

@return 关联线程的 ID。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.management.ThreadInfo.getThreadName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <tt>ThreadInfo</tt> 关联的线程的名称。

@return 关联线程的名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Thread.State java.lang.management.ThreadInfo.getThreadState()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <tt>ThreadInfo</tt> 关联的线程的状态。

@return 关联线程的 <tt>Thread.State</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.lang.management.ThreadInfo.getBlockedTime()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回自从启用线程争用监视以来，与此 <tt>ThreadInfo</tt> 关联的线程被阻塞进入或重进入监视器的近似累计时间（以毫秒为单位）。即自从上次启用线程争用监视以来，线程处于 {@link java.lang.Thread.State#BLOCKED BLOCKED} 状态的总累计时间。如果线程争用监视被禁用，此方法将返回 <tt>-1</tt>。

<p>Java 虚拟机可能会使用高精度计时器测量时间。当重新启用线程争用监视时，将重置这个统计数据。

@return 线程进入 <tt>BLOCKED</tt> 状态的近似累计时间（以毫秒为单位）；如果禁用了线程争用监视，则返回 <tt>-1</tt>。

@throws java.lang.UnsupportedOperationException 如果 Java 虚拟机不支持此操作。

@see ThreadMXBean#isThreadContentionMonitoringSupported
@see ThreadMXBean#setThreadContentionMonitoringEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.lang.management.ThreadInfo.getBlockedCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <tt>ThreadInfo</tt> 关联的线程被阻塞进入或重进入监视器的总次数。即线程为 {@link java.lang.Thread.State#BLOCKED BLOCKED} 状态的次数。 

@return 线程进入 <tt>BLOCKED</tt> 状态的总次数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.lang.management.ThreadInfo.getWaitedTime()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回自从启用线程争用监视以来,与此 <tt>ThreadInfo</tt> 关联的线程等待通知的近似累计时间（以毫秒为单位）。即自从启用线程争用监视以来，线程处于 {@link java.lang.Thread.State#WAITING WAITING} 或 {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} 状态的总累计时间。如果线程争用监视被禁用，此方法将返回 <tt>-1</tt>。

<p>Java 虚拟机可能会使用高精度计时器测量时间。当重新启用线程争用监视时，将重置这个统计数据。
 
@return 线程为 <tt>WAITING</tt> 或 <tt>TIMED_WAITING</tt> 状态的近似累计时间（以毫秒为单位）；如果禁用了线程争用监视，则返回 <tt>-1</tt>。

@throws java.lang.UnsupportedOperationException 如果 Java 虚拟机不支持此操作。

@see ThreadMXBean#isThreadContentionMonitoringSupported
@see ThreadMXBean#setThreadContentionMonitoringEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.lang.management.ThreadInfo.getWaitedCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <tt>ThreadInfo</tt> 关联的线程等待通知的总次数。即线程处于 {@link java.lang.Thread.State#WAITING WAITING} 或 {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} 状态的次数。

@return 线程处于 <tt>WAITING</tt> 或 <tt>TIMED_WAITING</tt> 状态的总次数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.management.LockInfo java.lang.management.ThreadInfo.getLockInfo()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对象的 <tt>LockInfo</tt>，与此 <tt>ThreadInfo</tt> 关联的线程被阻塞并等待该对象。
线程可以被阻塞并等待以下内容之一：
 <ul>
 <li>进入或重进入同步块/方法所需的对象监视器。
     <br>线程处于 {@link java.lang.Thread.State#BLOCKED BLOCKED} 状态，等待进入 <tt>synchronized</tt> 语句或方法。
     <p></li> 
 <li>被另一个线程通知的对象监视器。
     <br>由于调用 {@link Object#wait Object.wait} 方法，线程处于 {@link java.lang.Thread.State#WAITING WAITING}
     或 {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} 状态。
     <p></li>
 <li>导致线程暂停的同步对象。
     <br>由于调用 {@link java.util.concurrent.locks.LockSupport#park(Object)
     LockSupport.park} 方法，线程处于 {@link java.lang.Thread.State#WAITING WAITING}
     或 {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} 状态。同步对象是从 {@link java.util.concurrent.locks.LockSupport#getBlocker
     LockSupport.getBlocker} 方法返回的对象。通常，它是一个<a href="LockInfo.html#OwnableSynchronizer">可拥有同步器</a>或 {@link java.util.concurrent.locks.Condition Condition}。
</li>
 </ul>

 <p>如果线程不处于以上任何状态之一，那么此方法返回 <tt>null</tt>。

 @return 对象的 <tt>LockInfo</tt>，线程将锁定并等待该对象（如果有）；否则返回 <tt>null</tt>。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.management.ThreadInfo.getLockName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对象的{@link LockInfo#toString 字符串表示形式}，与此 <tt>ThreadInfo</tt> 关联的线程被锁定并等待该对象。此方法等效于调用：
 <blockquote>
 <pre>
  getLockInfo().toString()
 </pre></blockquote>


<p>如果此线程没有被阻塞并等待任何对象，或者没有任何线程拥有该对象，那么此方法将返回 <tt>null</tt>。

@return 对象的字符串表示形式，线程在该对象上被阻塞（如果有）；否则返回 <tt>null</tt>。
@see #getLockInfo


<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.lang.management.ThreadInfo.getLockOwnerId()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回拥有对象的线程的 ID，与此 <tt>ThreadInfo</tt> 关联的线程被阻塞并等待该对象。如果此线程没有被阻塞并等待任何对象，或者没有任何线程拥有该对象，那么此方法将返回 <tt>-1</tt>。

@return 对象（此线程在其上阻塞）所有者线程的线程 ID；如果此线程没有被阻塞，或者没有任何线程拥有该对象，则返回 <tt>-1</tt>。

@see #getLockInfo

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.management.ThreadInfo.getLockOwnerName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回拥有对象的线程的名称，与此 <tt>ThreadInfo</tt> 关联的线程被阻塞并等待该对象。如果此线程没有被阻塞并等待任何对象，或者没有任何线程拥有该对象，那么此方法将返回 <tt>null</tt>。

@return 拥有对象（此线程在其上阻塞）的线程的名称；如果此线程没有被阻塞，或者没有任何线程拥有该对象，则返回 <tt>null</tt>。


@see #getLockInfo

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StackTraceElement[] java.lang.management.ThreadInfo.getStackTrace()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <tt>ThreadInfo</tt> 关联的线程的堆栈跟踪。如果没有为此线程信息请求堆栈跟踪，此方法将返回长度为 0 的数组。若返回的数组不是长度为 0 的数组，则其第一个元素代表堆栈顶，它是该序列中最新的方法调用。最后一个元素代表堆栈底，是该序列中最旧的方法调用。

<p>某些 Java 虚拟机在某些情况下可能会从堆栈跟踪中忽略一个或多个堆栈帧。在极端情况下，没有关于此 <tt>ThreadInfo</tt> 关联线程堆栈跟踪信息的虚拟机可以从此方法返回一个长度为 0 的数组。

@return 线程的 <tt>StackTraceElement</tt> 对象数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.management.ThreadInfo.isSuspended()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试与此 <tt>ThreadInfo</tt> 关联的线程是否被挂起。如果已经调用了 {@link Thread#suspend} 方法，此方法将返回 <tt>true</tt>。

@return 如果线程被挂起，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.management.ThreadInfo.isInNative()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试与此 <tt>ThreadInfo</tt> 关联的线程是否通过 Java 本机接口 (JNI) 执行本机代码。JNI 本机代码不包括虚拟机支持代码或由虚拟机生成的已编译本机代码。

@return 如果线程执行本机代码，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.management.ThreadInfo.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此线程信息的字符串表示形式。此字符串的格式取决于实现。
返回的字符串通常包括{@linkplain #getThreadName 线程名}、{@linkplain #getThreadId 线程 ID}、它的{@linkplain #getThreadState 状态}、{@linkplain #getStackTrace 堆栈跟踪}（如果有）。

@return 此线程信息的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.management.ThreadInfo java.lang.management.ThreadInfo.from(CompositeData cd)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由给定 <tt>CompositeData</tt> 表示的 <tt>ThreadInfo</tt> 对象。除非上文另行指定，否则给定的 <tt>CompositeData</tt> 必须包含以下属性：
<blockquote>
<table border>
<tr>
  <th align=left>属性名称</th>
  <th align=left>类型</th>
</tr>
<tr>
  <td>threadId</td>
  <td><tt>java.lang.Long</tt></td>
</tr>
<tr>
  <td>threadName</td>
  <td><tt>java.lang.String</tt></td>
</tr>
<tr>
  <td>threadState</td>
  <td><tt>java.lang.String</tt></td>
</tr>
<tr>
  <td>suspended</td>
  <td><tt>java.lang.Boolean</tt></td>
</tr>
<tr>
  <td>inNative</td>
  <td><tt>java.lang.Boolean</tt></td>
</tr>
<tr>
  <td>blockedCount</td>
  <td><tt>java.lang.Long</tt></td>
</tr>
<tr>
  <td>blockedTime</td>
  <td><tt>java.lang.Long</tt></td>
</tr>
<tr>
  <td>waitedCount</td>
  <td><tt>java.lang.Long</tt></td>
</tr>
<tr>
  <td>waitedTime</td>
  <td><tt>java.lang.Long</tt></td>
</tr>
<tr>
   <td>lockInfo</td>
   <td><tt>javax.management.openmbean.CompositeData</tt>
       - {@linkplain javax.management.MXBean MXBean} <a href="../../../javax/management/MXBean.html#mapping-rules">
       类型映射规则</a>中指定的 {@link LockInfo} 的映射类型。
       <p>
       如果 <tt>cd</tt> 不包含此属性，则将根据 <tt>lockName</tt> 属性的值构造 <tt>LockInfo</tt> 对象。</td>
 </tr>
 <tr>
  <td>lockName</td>
  <td><tt>java.lang.String</tt></td>
</tr>
<tr>
  <td>lockOwnerId</td>
  <td><tt>java.lang.Long</tt></td>
</tr>
<tr>
  <td>lockOwnerName</td>
  <td><tt>java.lang.String</tt></td>
</tr>
<tr>
     <td><a name="StackTrace">stackTrace</a></td>
  <td><tt>javax.management.openmbean.CompositeData[]</tt>
       <p>
每个元素都是表示 StackTraceElement 的 <tt>CompositeData</tt>，包含以下属性：
       <blockquote>
       <table cellspacing=1 cellpadding=0>
       <tr>
<th align=left>属性名称</th>
<th align=left>类型</th>
       </tr>
       <tr>
         <td>className</td>
         <td><tt>java.lang.String</tt></td>
       </tr>
       <tr>
         <td>methodName</td>
         <td><tt>java.lang.String</tt></td>
       </tr>
       <tr>
         <td>fileName</td>
         <td><tt>java.lang.String</tt></td>
       </tr>
       <tr>
         <td>lineNumber</td>
         <td><tt>java.lang.Integer</tt></td>
       </tr>
       <tr>
         <td>nativeMethod</td>
         <td><tt>java.lang.Boolean</tt></td>
       </tr>
       </table>
       </blockquote>
   </td>
 </tr>
 <tr>
   <td>lockedMonitors</td>
   <td><tt>javax.management.openmbean.CompositeData[]</tt>，其元素类型是 {@link MonitorInfo} 的映射类型，MonitorInfo 在 {@link MonitorInfo#from Monitor.from} 方法中指定。
       <p>
       如果 <tt>cd</tt> 不包含此属性，那么此属性将被设置为空数组。</td>
 </tr>
 <tr>
   <td>lockedSynchronizers</td>
   <td><tt>javax.management.openmbean.CompositeData[]</tt>，其元素是 {@link LockInfo} 的映射类型，LockInfo 在 {@linkplain javax.management.MXBean MXBean} 的<a href="../../../javax/management/MXBean.html#mapping-rules">类型映射规则</a>中指定。
       <p>
       如果 <tt>cd</tt> 不包含此属性，那么此属性将被设置为空数组。</td>
 </tr>
 </table>
 </blockquote>

@param cd 表示 <tt>ThreadInfo</tt> 的 <tt>CompositeData</tt>

@throws IllegalArgumentException 如果 <tt>cd</tt> 不表示具有上述属性的 <tt>ThreadInfo</tt>。

@return 如果 <tt>cd</tt> 不为 <tt>null</tt>，则返回由 <tt>cd</tt> 表示的 <tt>ThreadInfo</tt> 对象；否则返回 <tt>null</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.management.MonitorInfo[] java.lang.management.ThreadInfo.getLockedMonitors()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 {@link MonitorInfo} 对象数组，每个数组元素表示关联此 <tt>ThreadInfo</tt> 的线程当前锁定的对象监视器。
如果没有为此线程信息请求任何锁定的监视器，或者线程没有锁定任何监视器，那么此方法返回长度为 0 的数组。

 @return <tt>MonitorInfo</tt> 对象数组，表示线程锁定的对象监视器。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.management.LockInfo[] java.lang.management.ThreadInfo.getLockedSynchronizers()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 {@link LockInfo} 对象数组，每个数组元素表示关联此 <tt>ThreadInfo</tt> 的线程当前锁定的<a href="LockInfo.html#OwnableSynchronizer">可拥有同步器</a>。
如果没有为此线程信息请求任何锁定的同步器，或者线程没有锁定任何同步器，那么此方法返回长度为 0 的数组。

 @return <tt>LockInfo</tt> 对象数组，表示线程锁定的可拥有同步器。

 @since 1.6

<!-- END DATA -->
