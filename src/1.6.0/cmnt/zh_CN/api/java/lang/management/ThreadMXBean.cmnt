<!-- BEGIN KEY -->
public interface java.lang.management.ThreadMXBean
<!-- END KEY -->
<!-- BEGIN DATA -->
Java 虚拟机线程系统的管理接口。

<p> Java 虚拟机具有此接口的实现类的单一实例。实现此接口的实例是一个 <a href="ManagementFactory.html#MXBean">MXBean</a>，可以通过调用 {@link ManagementFactory#getThreadMXBean} 方法或从{@link ManagementFactory#getPlatformMBeanServer 平台 <tt>MBeanServer</tt>} 方法获得它。

<p>在 MBeanServer 内唯一标识线程系统的 MXBean 的 <tt>ObjectName</tt> 是：
 <blockquote>
    {@link ManagementFactory#THREAD_MXBEAN_NAME <tt>java.lang:type=Threading</tt>}
 </blockquote>

<h4>线程 ID</h4>
线程 ID 是一个通过调用线程的 {@link java.lang.Thread#getId} 方法返回的 long 型正值。线程 ID 在其生存期间是唯一的。线程终止时，该线程 ID 可以被重新使用。

<p> 此接口中的某些方法将线程 ID 或线程 ID 数组作为输入参数，并返回每个线程的信息。

<h4>线程 CPU 时间</h4>
Java 虚拟机实现可能支持测量当前线程的 CPU 时间、测量任何线程的 CPU 时间，或者有可能不测量任何线程的 CPU 时间。

<p>
{@link #isThreadCpuTimeSupported} 方法可用于确定 Java 虚拟机是否支持测量任何线程的 CPU 时间。{@link #isCurrentThreadCpuTimeSupported} 方法可用于确定 Java 虚拟机是否支持测量当前线程的 CPU 时间。支持任何线程 CPU 时间测量的 Java 虚拟机实现也支持当前线程的 CPU 时间测量。

<p> 此接口提供的 CPU 时间具有毫微秒精度，但并不具有毫微秒的准确性。

<p>
Java 虚拟机可能默认禁用 CPU 时间测量。{@link #isThreadCpuTimeEnabled} 和 {@link #setThreadCpuTimeEnabled} 方法可用于测试是否启用 CPU 时间测量，并且可以分别启用/禁用此支持。启用线程 CPU 测量在某些 Java 虚拟机实现中可能开销很大。

<h4>线程争用监视</h4>
某些 Java 虚拟机可能支持线程争用监视。当启用线程争用监视时，将收集由于同步而受阻塞的线程累积时间和等待通知的线程累积时间，并在 <a href="ThreadInfo.html#SyncStats"><tt>ThreadInfo</tt></a> 对象中返回它们。
 <p>
{@link #isThreadContentionMonitoringSupported} 方法可用于确定 Java 虚拟机是否支持线程争用监视。默认情况下，线程争用监视是禁用的。{@link #setThreadContentionMonitoringEnabled} 方法可用于启用线程争用监视。

 <h4>同步信息和死锁检测</h4>
一些 Java 虚拟机可以支持{@linkplain #isObjectMonitorUsageSupported 使用对象监视器}和{@linkplain #isSynchronizerUsageSupported 使用可拥有同步器}的监视。{@link #getThreadInfo(long[], boolean, boolean)} 和 {@link #dumpAllThreads} 方法可以用来获取线程堆栈跟踪和同步信息，这些信息包括在获得线程时被哪一个{@linkplain LockInfo <i>锁</i>}阻塞或者正在等待哪一个锁，以及线程当前拥有哪些锁。
 <p>
 <tt>ThreadMXBean</tt> 接口提供 {@link #findMonitorDeadlockedThreads} 和 {@link #findDeadlockedThreads} 方法，这些方法用于在运行的应用程序中查找死锁。

@see <a href="../../../javax/management/package-summary.html">JMX Specification.</a>
@see <a href="package-summary.html#examples">访问 MXBeans 的方式</a>

@author  Mandy Chung
@version 1.14, 04/29/04
@since   1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.management.ThreadMXBean.getThreadCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回活动线程的当前数目，包括守护线程和非守护线程。

@return 活动线程的当前数目。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.management.ThreadMXBean.getPeakThreadCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回自从 Java 虚拟机启动或峰值重置以来峰值活动线程计数。

@return 峰值活动线程计数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.lang.management.ThreadMXBean.getTotalStartedThreadCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回自从 Java 虚拟机启动以来创建和启动的线程总数目。

@return 已启动的线程的总数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.management.ThreadMXBean.getDaemonThreadCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回活动守护线程的当前数目。

@return 活动守护线程的当前数目。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long[] java.lang.management.ThreadMXBean.getAllThreadIds()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回活动线程 ID。在返回的数组中包含的某些线程可能在此方法返回时已经终止。

@return <tt>long</tt> 数组，每个成员都是线程 ID。

@throws  java.lang.SecurityException 如果存在安全管理器，且调用方不具有 ManagementPermission("monitor")。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.management.ThreadInfo java.lang.management.ThreadMXBean.getThreadInfo(long id)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 <tt>id</tt> 的不具有堆栈跟踪的线程的线程信息。此方法等效于调用：
 <blockquote>
   {@link #getThreadInfo(long, int) getThreadInfo(id, 0);}
 </blockquote>

 <p>
此方法返回表示指定 ID 的线程的线程信息的 <tt>ThreadInfo</tt> 对象。返回的 <tt>ThreadInfo</tt> 对象中的堆栈跟踪、锁定的监视器、锁定的同步器将为空。

如果给定 ID 的线程没有处于活动状态，或不存在，则此方法将返回 <tt>null</tt>。如果线程已经启动且尚未终止，则该线程处于活动状态。

<p>
<b>MBeanServer 访问</b>：<br><tt>ThreadInfo</tt> 的映射类型为 <tt>CompositeData</tt>，并具有 {@link ThreadInfo#from ThreadInfo.from} 方法指定的那些属性。

@param id 线程的线程 ID。必须为正数。

@return 给定 ID 的线程的 {@link ThreadInfo} 对象，不带堆栈跟踪、锁定的监视器和同步器信息；如果给定 ID 的线程没有处于活动状态，或不存在，则返回 <tt>null</tt>。

@throws  IllegalArgumentException 如果 <tt>id &lt= 0</tt>。
@throws  java.lang.SecurityException 如果存在安全管理器，且调用方不具有 ManagementPermission("monitor")。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.management.ThreadInfo[] java.lang.management.ThreadMXBean.getThreadInfo(long[] ids)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回其 ID 在输出数组 <tt>ids</tt> 中的每个线程的线程信息，这些线程不具有堆栈跟踪。此方法等效于调用：
 <blockquote><pre>
   {@link #getThreadInfo(long[], int) getThreadInfo}(ids, 0);
 </pre></blockquote>

<p>
此方法返回 <tt>ThreadInfo</tt> 对象数组。每个 <tt>ThreadInfo</tt> 对象中的堆栈跟踪、锁定的监视器、锁定的同步器将为空。


如果给定 ID 的线程没有处于活动状态，或不存在，则返回数组中的对应元素将包含 <tt>null</tt>。如果线程已经启动且尚未终止，则该线程处于活动状态。

<p>
<b>MBeanServer 访问</b>：<br><tt>ThreadInfo</tt> 的映射类型为 <tt>CompositeData</tt>，具有 {@link ThreadInfo#from ThreadInfo.from} 方法指定的那些属性。

@param ids 线程 ID 数组。
@return 一个 {@link ThreadInfo} 对象的数组，每个数组元素均包含关于线程的信息，该线程 ID 在 ID 输入数组的对应元素中，不带堆栈跟踪、锁定的监视器和同步器信息。

@throws IllegalArgumentException 如果输入数组 <tt>ids</tt> 中的任何元素 <tt>&lt= 0</tt>。
@throws java.lang.SecurityException 如果存在安全管理器，且调用方不具有 ManagementPermission("monitor")。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.management.ThreadInfo java.lang.management.ThreadMXBean.getThreadInfo(long id, int maxDepth)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 <tt>id</tt> 的线程的线程信息，并带有指定堆栈追踪元素数的堆栈追踪。<tt>maxDepth</tt> 参数指示可从堆栈跟踪获取的  {@link StackTraceElement} 的最大数目。如果 <tt>maxDepth == Integer.MAX_VALUE</tt>，则将转储线程的整个堆栈跟踪。如果 <tt>maxDepth == 0</tt>，则不转储线程的任何堆栈跟踪。此方法不获取线程的锁定的监视器和锁定同步器。
<p>
当 Java 虚拟机没有关于线程的堆栈跟踪信息或 <tt>maxDepth == 0</tt> 时，<tt>ThreadInfo</tt> 对象中的堆栈跟踪将为空的 <tt>StackTraceElement</tt> 数组。

<p>
如果给定 ID 的线程没有处于活动状态，或不存在，则此方法将返回 <tt>null</tt>。如果线程已经启动且尚未终止，则该线程处于活动状态。

<p>
<b>MBeanServer 访问</b>：<br><tt>ThreadInfo</tt> 的映射类型为 <tt>CompositeData</tt>，具有 {@link ThreadInfo#from ThreadInfo.from} 方法指定的那些属性。

@param id 线程的线程 ID。必须为正数。
@param maxDepth 要转储的堆栈跟踪中的最大项数。<tt>Integer.MAX_VALUE</tt> 可用于请求将整个堆栈转储。
 
@return 给定 ID 的线程的 {@link ThreadInfo}，不带锁定的监视器和同步器信息。如果给定 ID 的线程没有处于活动状态，或不存在，则返回 <tt>null</tt>。

@throws IllegalArgumentException 如果 <tt>id &lt= 0</tt>。
@throws IllegalArgumentException 如果 <tt>maxDepth 为负数</tt>。
@throws java.lang.SecurityException 如果存在安全管理器，且调用方不具有 ManagementPermission("monitor")。


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.management.ThreadInfo[] java.lang.management.ThreadMXBean.getThreadInfo(long[] ids, int maxDepth)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回其 ID 在输入数组 <tt>ids</tt> 中的每个线程的线程信息，并带有指定堆栈追踪元素数的堆栈追踪。<tt>maxDepth</tt> 参数指示可从堆栈跟踪获取的 {@link StackTraceElement} 的最大数目。如果 <tt>maxDepth == Integer.MAX_VALUE</tt>，则将转储线程的整个堆栈跟踪。如果 <tt>maxDepth == 0</tt>，则不转储线程的任何堆栈跟踪。此方法不获取线程的锁定的监视器和锁定同步器。
<p>
当 Java 虚拟机没有关于线程的堆栈跟踪信息或 <tt>maxDepth == 0</tt> 时，<tt>ThreadInfo</tt> 对象中的堆栈跟踪将为空的 <tt>StackTraceElement</tt> 数组。
<p>
此方法返回一个 <tt>ThreadInfo</tt> 对象的数组，其每个成员均为关于线程的线程信息，索引顺序与 <tt>ids</tt> 数组中索引相同。如果给定 ID 的线程没有处于活动状态，或不存在，则返回数组中的对应元素将设置为 <tt>null</tt>。如果线程已经启动且尚未终止，则该线程处于活动状态。

<p>
<b>MBeanServer 访问</b>：<br><tt>ThreadInfo</tt> 的映射类型为 <tt>CompositeData</tt>，具有 {@link ThreadInfo#from ThreadInfo.from} 方法指定的那些属性。

@param ids 线程 ID 数组
@param maxDepth 要转储的堆栈跟踪中的最大项数。<tt>Integer.MAX_VALUE</tt> 可用于请求将整个堆栈转储。

@return 一个 {@link ThreadInfo} 对象组成的数组，每个数组元素均包含关于线程的信息，该线程 ID 在 ID 输入数组的对应元素中，不带锁定的监视器和同步器信息。


@throws IllegalArgumentException 如果 <tt>maxDepth</tt> 为负数。
@throws IllegalArgumentException 如果输入数组 <tt>ids</tt> 中的任何元素 <tt>&lt= 0</tt>。
@throws java.lang.SecurityException 如果存在安全管理器，且调用方不具有 ManagementPermission("monitor")。


<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.management.ThreadMXBean.isThreadContentionMonitoringSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试 Java 虚拟机是否支持线程争用监视。

@return 如果 Java 虚拟机支持线程争用监视，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.management.ThreadMXBean.isThreadContentionMonitoringEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试是否启用了线程争用监视。

@return 如果启用了线程争用监视，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

@throws java.lang.UnsupportedOperationException 如果 Java 虚拟机不支持线程争用监视。

@see #isThreadContentionMonitoringSupported

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.management.ThreadMXBean.setThreadContentionMonitoringEnabled(boolean enable)
<!-- END KEY -->
<!-- BEGIN DATA -->
启用或禁用线程争用监视。默认情况下，线程争用监视是被禁用的。

@param enable 为 <tt>true</tt> 则启用；为 <tt>false</tt> 则禁用。

@throws java.lang.UnsupportedOperationException 如果 Java 虚拟机不支持线程争用监视。

@throws java.lang.SecurityException 如果存在安全管理器，且调用方不具有 ManagementPermission("control")。

@see #isThreadContentionMonitoringSupported

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.lang.management.ThreadMXBean.getCurrentThreadCpuTime()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前线程的总 CPU 时间（以毫微秒为单位）。返回的值具有毫微秒的精度，但不具有毫微秒的准确度。如果实现对用户模式时间和系统模式时间加以区别，则返回的 CPU 时间为当前线程在用户模式或系统模式中执行的时间总量。

<p>
这是一个便于局部管理的方法，等效于调用：
 <blockquote><pre>
   {@link #getThreadCpuTime getThreadCpuTime}(Thread.currentThread().getId());
 </pre></blockquote>

@return 如果启用了 CPU 时间测量，则返回当前线程的总 CPU 时间；否则返回 <tt>-1</tt>。

@throws java.lang.UnsupportedOperationException 如果 Java 虚拟机不支持当前线程的 CPU 时间测量。

@see #getCurrentThreadUserTime
@see #isCurrentThreadCpuTimeSupported
@see #isThreadCpuTimeEnabled
@see #setThreadCpuTimeEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.lang.management.ThreadMXBean.getCurrentThreadUserTime()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前线程在用户模式中执行的 CPU 时间（以毫微秒为单位）。返回的具有毫微秒的精度，但不具有毫微秒的准确度。

<p>
这是一个便于局部管理的方法，等效于调用：
 <blockquote><pre>
   {@link #getThreadUserTime getThreadUserTime}(Thread.currentThread().getId());
 </pre></blockquote>

@return 如果启用了 CPU 时间测量，则返回当前线程的用户级 CPU 时间；否则返回 <tt>-1</tt>。

@throws java.lang.UnsupportedOperationException 如果 Java 虚拟机不支持当前线程的 CPU 时间测量。

@see #getCurrentThreadCpuTime
@see #isCurrentThreadCpuTimeSupported
@see #isThreadCpuTimeEnabled
@see #setThreadCpuTimeEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.lang.management.ThreadMXBean.getThreadCpuTime(long id)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 ID 的线程的总 CPU 时间（以毫微秒为单位）。返回的值具有毫微秒的精度，但不具有毫微秒的准确度。如果实现对用户模式时间和系统模式时间加以区别，返回的 CPU 时间则为线程在用户模式或系统模式中执行的时间总量。

<p>
如果指定 ID 的线程没有处于活动状态，或不存在，则此方法将返回 <tt>-1</tt>。如果 CPU 时间测量，此方法将返回 <tt>-1</tt>。如果线程已经启动且尚未终止，则该线程处于活动状态。
<p>
如果线程启动后启用了 CPU 时间测量，Java 虚拟机实现可能选择任何时间作为启动 CPU 时间测量的时间，包括启用此功能的时间。

@param id 线程的线程 ID
@return 如果指定的 ID 存在，线程为活动状态，且启用了 CPU 时间测量，则返回指定 ID 的线程的总 CPU 时间；否则返回 <tt>-1</tt>。
@throws IllegalArgumentException 如果 <tt>id &lt= 0</tt>。
@throws java.lang.UnsupportedOperationException 如果 Java 虚拟机不支持其他线程的 CPU 时间测定。

@see #getThreadUserTime
@see #isThreadCpuTimeSupported
@see #isThreadCpuTimeEnabled
@see #setThreadCpuTimeEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.lang.management.ThreadMXBean.getThreadUserTime(long id)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 ID 的线程在用户模式中执行的 CPU 时间（以毫微秒为单位）。返回的值具有毫微秒的精度，但未必具有毫微秒的准确度。

<p>
如果指定 ID 的线程没有处于活动状态，或不存在，则此方法将返回 <tt>-1</tt>。如果禁用 CPU 时间测量，此方法将返回 <tt>-1</tt>。如果线程已经启动且尚未终止，则该线程处于活动状态。
<p>
如果线程启动后启用了 CPU 时间测量，Java 虚拟机实现可能选择任何时间作为启动 CPU 时间测量的时间，包括启用此功能的时间。

@param id 线程的线程 ID
@return 如果指定的 ID 存在，线程为活动状态，且启用了 CPU 时间测量，则返回指定 ID 的线程的用户级 CPU 时间；否则返回 <tt>-1</tt>。

@throws IllegalArgumentException 如果 <tt>id &lt= 0</tt>。
@throws java.lang.UnsupportedOperationException 如果 Java 虚拟机不支持其他线程的 CPU 时间测定。

@see #getThreadCpuTime
@see #isThreadCpuTimeSupported
@see #isThreadCpuTimeEnabled
@see #setThreadCpuTimeEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.management.ThreadMXBean.isThreadCpuTimeSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试 Java 虚拟机实现是否支持任何线程的 CPU 时间测量。支持任何线程 CPU 时间测定的 Java 虚拟机实现也支持当前线程的 CPU 时间测定。

@return 如果 Java 虚拟机支持任何线程的 CPU 时间测量，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.management.ThreadMXBean.isCurrentThreadCpuTimeSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试 Java 虚拟机是否支持当前线程的 CPU 时间测量。如果 {@link #isThreadCpuTimeSupported} 返回 <tt>true</tt>，此方法将返回 <tt>true</tt>。

@return 如果 Java 虚拟机支持当前线程的 CPU 时间测量，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.management.ThreadMXBean.isThreadCpuTimeEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试是否启用了线程 CPU 时间测量。

@return 如果启用了线程 CPU 时间测量，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

@throws java.lang.UnsupportedOperationException 如果 Java 虚拟机不支持其他线程或当前线程的 CPU 时间测量。

@see #isThreadCpuTimeSupported
@see #isCurrentThreadCpuTimeSupported

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.management.ThreadMXBean.setThreadCpuTimeEnabled(boolean enable)
<!-- END KEY -->
<!-- BEGIN DATA -->
启用或禁用线程 CPU 时间测量。此默认值与平台有关。

@param enable 为 <tt>true</tt> 则启用；为 <tt>false</tt> 则禁用。

@throws java.lang.UnsupportedOperationException 如果 Java 虚拟机不支持任何线程或当前线程的 CPU 时间测量。

@throws java.lang.SecurityException 如果存在安全管理器，且调用方不具有 ManagementPermission("control")。

@see #isThreadCpuTimeSupported
@see #isCurrentThreadCpuTimeSupported

<!-- END DATA -->
<!-- BEGIN KEY -->
public long[] java.lang.management.ThreadMXBean.findMonitorDeadlockedThreads()
<!-- END KEY -->
<!-- BEGIN DATA -->
找到处于死锁状态（等待获取对象监视器）的线程的周期。即线程被阻塞，等待进入同步块或在 {@link Object#wait Object.wait} 调用后等待重新进入同步块，此时每个线程拥有一个监视器，且同时试图获取已经由周期中的另一个线程拥有的另一个监视器。
<p>
更正式地说，如果线程属于某个周期，处于“等待已被占用的对象监视器”的关系中，则该线程处于<em>监视器死锁</em> 状态。在最简单的情况下，线程 A 被阻塞，在等待线程 B 拥有的监视器，而线程 B 也被阻塞，在等待线程 A 拥有的监视器。
<p>
此方法设计用于进行故障排除，但不适合进行同步控制。它可能成为开销很大的操作。
 <p>
此方法只查找涉及对象监视器的死锁。要查找涉及对象监视器和<a href="LockInfo.html#OwnableSynchronizer">可拥有同步器</a>的死锁，应该使用 {@link #findDeadlockedThreads findDeadlockedThreads} 方法。

@return 处于监视器死锁状态的线程（如果有）的 ID 数组；否则返回 <tt>null</tt>。

@throws java.lang.SecurityException 如果存在安全管理器，且调用方不具有 ManagementPermission("monitor")。
@see #findDeadlockedThreads

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.management.ThreadMXBean.resetPeakThreadCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
将峰值线程计数重置为当前活动线程的数量。

@throws java.lang.SecurityException 如果存在安全管理器，且调用方不具有 ManagementPermission(("control")。

@see #getPeakThreadCount
@see #getThreadCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public long[] java.lang.management.ThreadMXBean.findDeadlockedThreads()
<!-- END KEY -->
<!-- BEGIN DATA -->
查找因为等待获得对象监视器或<a href="LockInfo.html#OwnableSynchronizer">可拥有同步器</a>而处于死锁状态的线程循环。如果每个线程拥有一个锁，当试图从另一个处于循环中的线程获取其持有的锁时，线程会在循环中处于<em>死锁</em> 状态，等待这两种锁。
 <p>
此方法设计用于故障排除，不用于异常控制。它是一个开销很大的操作。

 @return 线程的 ID 数组，该线程处于死锁状态，等待对象监视器或可拥有同步器（如果有）；否则返回 <tt>null</tt>。

 @throws java.lang.SecurityException 如果安全管理器存在，且调用者没有 ManagementPermission("monitor")。
 @throws java.lang.UnsupportedOperationException 如果 Java 虚拟机不支持使用可拥有同步器的监视。

 @see #isSynchronizerUsageSupported
 @see #findMonitorDeadlockedThreads
 @since 1.6 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.management.ThreadMXBean.isObjectMonitorUsageSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试 Java 虚拟机是否支持使用对象监视器的监视。

 @return
如果 Java 虚拟机支持使用对象监视器的监视，则返回 <tt>true</tt>；否则返回 <tt>false</tt>。

 @see #dumpAllThreads
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.management.ThreadMXBean.isSynchronizerUsageSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试 Java 虚拟机是否支持使用<a href="LockInfo.html#OwnableSynchronizer">
可拥有同步器</a>的监视。

 @return
如果 Java 虚拟机支持使用可拥有同步器的监视，则返回 <tt>true</tt>；否则返回<tt>false</tt>。
 @see #dumpAllThreads
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.management.ThreadInfo[] java.lang.management.ThreadMXBean.getThreadInfo(long[] ids, boolean lockedMonitors, boolean lockedSynchronizers)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回每个线程的线程信息，线程 ID 位于输入数组 <tt>ids</tt> 中，带有堆栈跟踪和同步信息。

 <p>
此方法获取每个线程的线程信息快照，包括：
 <ul>
    <li>整个堆栈跟踪</li>
    <li>线程当前锁定的对象监视器（如果 <tt>lockedMonitors</tt> 为 <tt>true</tt>）</li>
    <li>线程当前锁定的<a href="LockInfo.html#OwnableSynchronizer">
        可拥有同步器</a>（如果 <tt>lockedSynchronizers</tt> 为 <tt>true</tt>）</li>
 </ul>
 <p>
此方法返回 <tt>ThreadInfo</tt> 对象数组，每个数组元素是关于线程的线程信息，该线程带有与 <tt>ids</tt> 数组中相同的索引。如果给定 ID 的线程没有处于活动状态，或不存在，则返回数组中的对应元素将被设置为 <tt>null</tt>。如果一个线程已经启动且尚未关闭，则称该线程是活动的。
 <p>
如果线程没有锁定任何对象监视器或 <tt>lockedMonitors</tt> 为 <tt>false</tt>，那么返回的 <tt>ThreadInfo</tt> 对象将有一个空 <tt>MonitorInfo</tt> 数组。类似地，如果线程没有锁定任何同步器或 <tt>lockedSynchronizers</tt> 为 <tt>false</tt>，那么返回的 <tt>ThreadInfo</tt> 对象将有一个空 <tt>LockInfo</tt> 数组。

 <p>
当 <tt>lockedMonitors</tt> 和 <tt>lockedSynchronizers</tt>
 参数均为 <tt>false</tt> 时，它等效于调用： 
 <blockquote><pre>
     {@link #getThreadInfo(long[], int)  getThreadInfo(ids, Integer.MAX_VALUE)}
 </pre></blockquote>
 
 <p>
 此方法设计用于故障排除，不用于异常控制。它是一个开销很大的操作。

 <p>
 <b>MBeanServer 访问</b>：<br>
<tt>ThreadInfo</tt> 的映射类型为 <tt>CompositeData</tt>，并带有 {@link ThreadInfo#from ThreadInfo.from} 方法指定的属性。

 @param  ids 线程 ID 数组。
 @param  lockedMonitors 如果为 <tt>true</tt>，则获取所有锁定的监视器。
 @param  lockedSynchronizers 如果为 <tt>true</tt>，则获取所有锁定的可拥有同步器。

 @return {@link ThreadInfo} 对象数组，每个数组元素包含有关线程的信息，该线程的 ID 在 ID 输入数组的对应元素中。

 @throws java.lang.SecurityException 如果安全管理器存在，且调用者没有 ManagementPermission("monitor")。
 @throws java.lang.UnsupportedOperationException 
         <ul>
           <li>如果 <tt>lockedMonitors</tt> 为 <tt>true</tt>，但 Java 虚拟机不支持{@linkplain #isObjectMonitorUsageSupported
              使用对象监视器}的监视；或者</li>
           <li>如果 <tt>lockedSynchronizers</tt> 为 <tt>true</tt>，但 Java 虚拟机不支持 {@linkplain #isSynchronizerUsageSupported
              使用可拥有同步器}的监视</li>
         </ul>

 @see #isObjectMonitorUsageSupported
 @see #isSynchronizerUsageSupported

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.management.ThreadInfo[] java.lang.management.ThreadMXBean.dumpAllThreads(boolean lockedMonitors, boolean lockedSynchronizers)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回所有活动线程的线程信息，并带有堆栈跟踪和同步信息。
当此方法返回时，返回数组中包含的一些线程可能已经终止。

 <p>
此方法返回 {@link ThreadInfo} 对象数组，ThreadInfo 对象是使用 {@link #getThreadInfo(long[], boolean, boolean)} 方法指定的。

 @param  lockedMonitors 如果为 <tt>true</tt>，则转储所有锁定的监视器。
 @param  lockedSynchronizers 如果为 <tt>true</tt>，则转储所有锁定的可拥有同步器。
             
 @return 所有活动线程的 {@link ThreadInfo} 数组。

 @throws java.lang.SecurityException 如果安全管理器存在，且调用者没有 ManagementPermission("monitor")。
 @throws java.lang.UnsupportedOperationException 
         <ul>
           <li>如果 <tt>lockedMonitors</tt> 为 <tt>true</tt>，但 Java 虚拟机不支持{@linkplain #isObjectMonitorUsageSupported
              使用对象监视器}的监视；或者</li>
           <li>如果 <tt>lockedSynchronizers</tt> 为 <tt>true</tt>，但 Java 虚拟机不支持 {@linkplain #isSynchronizerUsageSupported
              使用可拥有同步器}的监视</li>
         </ul>

 @see #isObjectMonitorUsageSupported
 @see #isSynchronizerUsageSupported

 @since 1.6

<!-- END DATA -->
