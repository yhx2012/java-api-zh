<!-- BEGIN KEY -->
public interface java.lang.management.OperatingSystemMXBean
<!-- END KEY -->
<!-- BEGIN DATA -->
用于操作系统的管理接口，Java 虚拟机在此操作系统上运行。

<p> Java 虚拟机具有此接口的实现类的单一实例。实现此接口的实例是一个 <a href="ManagementFactory.html#MXBean">MXBean</a>，可以通过调用 {@link ManagementFactory#getOperatingSystemMXBean} 方法或从{@link ManagementFactory#getPlatformMBeanServer 平台 <tt>MBeanServer</tt>} 方法获得。

<p>用于在 MBeanServer 中唯一标识操作系统的 MXBean 的 <tt>ObjectName</tt> 为：
 <blockquote>
    {@link ManagementFactory#OPERATING_SYSTEM_MXBEAN_NAME
      <tt>java.lang:type=OperatingSystem</tt>}
 </blockquote>

<p> 此接口定义了几种便捷方法，可使用这些方法访问关于操作系统（Java 虚拟机在其上运行）的系统属性。

@see <a href="../../../javax/management/package-summary.html">JMX Specification.</a>
@see <a href="package-summary.html#examples">访问 MXBeans 的方式</a>

@author  Mandy Chung
@version 1.11, 12/09/05
@since   1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.management.OperatingSystemMXBean.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回操作系统名称。此方法等效于 <tt>System.getProperty("os.name")</tt>。

@return 操作系统名称。

@throws  java.lang.SecurityException 如果安全管理器存在并且其 <code>checkPropertiesAccess</code> 方法不允许访问此系统属性。
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.management.OperatingSystemMXBean.getArch()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回操作系统的架构。此方法等效于 <tt>System.getProperty("os.arch")</tt>。

@return 操作系统的架构。

@throws  java.lang.SecurityException 如果安全管理器存在并且其 <code>checkPropertiesAccess</code> 方法不允许访问此系统属性。
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.management.OperatingSystemMXBean.getVersion()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回操作系统的版本。此方法等效于 <tt>System.getProperty("os.version")</tt>。

@return 操作系统的版本。

@throws  java.lang.SecurityException 如果安全管理器存在并且其 <code>checkPropertiesAccess</code> 方法不允许访问此系统属性。
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.management.OperatingSystemMXBean.getAvailableProcessors()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Java 虚拟机可以使用的处理器数目。此方法等效于 {@link Runtime#availableProcessors()} 方法。
<p> 该值在特定的虚拟机调用期间可能发生更改。

@return  虚拟机可用的处理器数目；不能小于 1。

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.lang.management.OperatingSystemMXBean.getSystemLoadAverage()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最后一分钟内系统加载平均值。系统加载平均值是排队到{@linkplain #getAvailableProcessors 可用处理器}的可运行实体数目与可用处理器上可运行实体数目的总和在某一段时间进行平均的结果。计算加载平均值的方式是特定于操作系统的，但通常是衰减的与时间相关的平均值。  
 <p>
如果加载平均值不可用，则返回负值。
 <p>
设计此方法的目的是提供关于系统加载的提示，还可以频繁地查询此方法。加载平均值在某些平台上可能是不可用的，在这些平台上实现此方法代价太高。

@return 系统加载平均值；如果加载平均值不可用，则返回负值。

@since 1.6

<!-- END DATA -->
