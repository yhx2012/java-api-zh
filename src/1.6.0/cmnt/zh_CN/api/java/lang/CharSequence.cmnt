<!-- BEGIN KEY -->
public interface java.lang.CharSequence
<!-- END KEY -->
<!-- BEGIN DATA -->
<tt>CharSequence</tt> 是 <code>char</code> 值的一个可读序列。此接口对许多不同种类的 <code>char</code> 序列提供统一的只读访问。<code>char</code> 值表示 <i>Basic Multilingual Plane (BMP)</i> 或代理项中的一个字符。有关详细信息，请参阅 <a href="Character.html#unicode">Unicode 字符表示形式</a>。

<p> 此接口不修改 {@link java.lang.Object#equals(java.lang.Object) equals} 和 {@link java.lang.Object#hashCode() hashCode} 方法的常规协定。因此，通常未定义比较实现 <tt>CharSequence</tt> 的两个对象的结果。每个对象都可以通过一个不同的类实现，而且不能保证每个类能够测试其实例与其他类的实例的相等性。因此，使用任意 <tt>CharSequence</tt> 实例作为集合中的元素或映射中的键是不合适的。</p>

@author Mike McCloskey
@version 1.8 03/12/19
@since 1.4
@spec JSR-51

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.CharSequence.length()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此字符序列的长度。该长度是序列中的 16 位 <code>char</code> 数。</p>

@return  此序列中的 <code>char</code> 数

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.lang.CharSequence.charAt(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定索引的 <code>char</code> 值。索引范围是从零到 <tt>length() - 1</tt>。对于数组索引，序列的第一个 <code>char</code> 值是索引零，下一个是索引一，依此类推。</p>

<p>如果索引指定的 <code>char</code> 值是<a href="Character.html#unicode">代理项</a>，则返回代理项的值。

@param   index   要返回的 <code>char</code> 值的索引

@return  指定的 <code>char</code> 值

@throws  IndexOutOfBoundsException 如果 <tt>index</tt> 参数为负或不小于 <tt>length()</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.CharSequence java.lang.CharSequence.subSequence(int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个新的 <code>CharSequence</code>，它是此序列的子序列。子序列从指定序列的 <code>char</code> 值开始，并在索引 <tt>end - 1</tt> 的 <code>char</code> 值结束。返回序列的长度（<code>char</code> 中）是 <tt>end - start</tt>，因此，如果 <tt>start == end</tt>，则返回一个空序列。</p>
 
@param   start   开始索引（包括）
@param   end     结束索引（不包括）

@return  指定的子序列

@throws  IndexOutOfBoundsException 如果 <tt>start</tt> 或 <tt>end</tt> 为负，<tt>end</tt> 大于 <tt>length()</tt> 或者 <tt>start</tt> 大于 <tt>end</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.CharSequence.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个包含此序列中字符的字符串，该字符串与此序列的顺序相同。字符串的长度就是此序列的长度。</p>

@return  一个完全由此序列的字符组成的字符串

<!-- END DATA -->
