<!-- BEGIN KEY -->
public abstract class java.lang.ClassLoader extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
类加载器是负责加载类的对象。<tt>ClassLoader</tt> 类是一个抽象类。如果给定类的<a href="#name">二进制名称</a>，那么类加载器会试图查找或生成构成类定义的数据。一般策略是将名称转换为某个文件名，然后从文件系统读取该名称的&ldquo;类文件&rdquo;。

<p> 每个 {@link Class <tt>Class</tt>} 对象都包含一个对定义它的 <tt>ClassLoader</tt> 的{@link Class#getClassLoader() 引用}。

<p> 数组类的 <tt>Class</tt> 对象不是由类加载器创建的，而是由 Java 运行时根据需要自动创建。数组类的类加载器由 {@link Class#getClassLoader()} 返回，该加载器与其元素类型的类加载器是相同的；如果该元素类型是基本类型，则该数组类没有类加载器。

<p> 应用程序需要实现 <tt>ClassLoader</tt> 的子类，以扩展 Java 虚拟机动态加载类的方式。

<p> 类加载器通常由安全管理器使用，用于指示安全域。

<p> <tt>ClassLoader</tt> 类使用委托模型来搜索类和资源。每个 <tt>ClassLoader</tt> 实例都有一个相关的父类加载器。需要查找类或资源时，<tt>ClassLoader</tt> 实例会在试图亲自查找类或资源之前，将搜索类或资源的任务委托给其父类加载器。虚拟机的内置类加载器（称为 "bootstrap class loader"）本身没有父类加载器，但是可以将它用作 <tt>ClassLoader</tt> 实例的父类加载器。

<p> 通常情况下，Java 虚拟机以与平台有关的方式，从本地文件系统中加载类。例如，在 UNIX 系统中，虚拟机从 <tt>CLASSPATH</tt> 环境变量定义的目录中加载类。

<p> 然而，有些类可能并非源自一个文件；它们可能源自其他来源（如网络），也可能是由应用程序构造的。{@link #defineClass(String, byte[], int, int) <tt>defineClass</tt>} 方法将一个 byte 数组转换为 <tt>Class</tt> 类的实例。这种新定义的类的实例可以使用 {@link Class#newInstance <tt>Class.newInstance</tt>} 来创建。

<p> 类加载器所创建对象的方法和构造方法可以引用其他类。为了确定引用的类，Java 虚拟机将调用最初创建该类的类加载器的 {@link #loadClass <tt>loadClass</tt>} 方法。

<p> 例如，应用程序可以创建一个网络类加载器，从服务器中下载类文件。示例代码如下所示：

 <blockquote><pre>
   ClassLoader loader&nbsp;= new NetworkClassLoader(host,&nbsp;port);
   Object main&nbsp;= loader.loadClass(&quot;Main&quot;, true).newInstance();
	 &nbsp;.&nbsp;.&nbsp;.
 </pre></blockquote>

<p> 网络类加载器子类必须定义方法 {@link #findClass <tt>findClass</tt>} 和 <tt>loadClassData</tt>，以实现从网络加载类。下载组成该类的字节后，它应该使用方法 {@link #defineClass <tt>defineClass</tt>} 来创建类实例。示例实现如下：

 <blockquote><pre>
     class NetworkClassLoader extends ClassLoader {
         String host;
         int port;

         public Class findClass(String name) {
             byte[] b = loadClassData(name);
             return defineClass(name, b, 0, b.length);
         }

         private byte[] loadClassData(String name) {
             // load the class data from the connection
             &nbsp;.&nbsp;.&nbsp;.
         }
     }
 </pre></blockquote>

<h4> <a name="name">二进制名称</a> </h4>

<p> 按照《<a href="http://java.sun.com/docs/books/jls/">Java Language Specification</a>》的定义，任何作为 {@link String} 类型参数传递给 <tt>ClassLoader</tt> 中方法的类名称都必须是一个二进制名称。

<p> 有效类名称的示例包括：
 <blockquote><pre>
   "java.lang.String"
   "javax.swing.JSpinner$DefaultEditor"
   "java.security.KeyStore$Builder$FileBuilder$1"
   "java.net.URLClassLoader$3$1"
 </pre></blockquote>

@version  1.185, 07/13/04
@see      #resolveClass(Class)
@since 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.ClassLoader(ClassLoader parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的、用于委托操作的父类加载器创建新的类加载器。

<p> 如果存在安全管理器，则调用其 {@link SecurityManager#checkCreateClassLoader() <tt>checkCreateClassLoader</tt>} 方法。这可能导致安全性异常。  </p>

@param  parent 父类加载器

@throws  SecurityException 如果存在安全管理器并且其 <tt>checkCreateClassLoader</tt> 方法不允许创建新的类加载器。

@since  1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.ClassLoader()
<!-- END KEY -->
<!-- BEGIN DATA -->
使用方法 {@link #getSystemClassLoader() <tt>getSystemClassLoader()</tt>} 返回的 <tt>ClassLoader</tt> 创建一个新的类加载器，将该加载器作为父类加载器。

<p> 如果存在安全管理器，则调用其 {@link SecurityManager#checkCreateClassLoader() <tt>checkCreateClassLoader</tt>} 方法。这可能导致安全性异常。  </p>

@throws  SecurityException 如果存在安全管理器并且其 <tt>checkCreateClassLoader</tt> 方法不允许创建新的类加载器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class<?> java.lang.ClassLoader.loadClass(String name) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的<a href="#name">二进制名称</a>来加载类。此方法使用与 {@link #loadClass(String, boolean)} 方法相同的方式搜索类。Java 虚拟机调用它来分析类引用。调用此方法等效于调用 {@link #loadClass(String, boolean) <tt>loadClass(name, false)</tt>}。</p>

@param  name 类的<a href="#name">二进制名称</a>

@return  得到的 <tt>Class</tt> 对象

@throws  ClassNotFoundException 如果没有找到类

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized java.lang.Class<?> java.lang.ClassLoader.loadClass(String name, boolean resolve) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的<a href="#name">二进制名称</a>来加载类。此方法的默认实现将按以下顺序搜索类：

 <p><ol>

<li><p> 调用 {@link #findLoadedClass(String)} 来检查是否已经加载类。</p></li>

<li><p> 在父类加载器上调用 {@link #loadClass(String) <tt>loadClass</tt>} 方法。如果父类加载器为 <tt>null</tt>，则使用虚拟机的内置类加载器。  </p></li>

<li><p> 调用 {@link #findClass(String)} 方法查找类。</p></li>

 </ol>

<p> 如果使用上述步骤找到类，并且 <tt>resolve</tt> 标志为真，则此方法将在得到的 <tt>Class</tt> 对象上调用 {@link #resolveClass(Class)} 方法。

<p> 鼓励用 <tt>ClassLoader</tt> 的子类重写 {@link #findClass(String)}，而不是使用此方法。</p>

@param  name 类的<a href="#name">二进制名称</a>

@param  resolve 如果该参数为 <tt>true</tt>，则分析这个类

@return  得到的 <tt>Class</tt> 对象

@throws  ClassNotFoundException 如果无法找到类

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Class<?> java.lang.ClassLoader.findClass(String name) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的<a href="#name">二进制名称</a>查找类。此方法应该被类加载器的实现重写，该实现按照委托模型来加载类。在通过父类加载器检查所请求的类后，此方法将被 {@link #loadClass <tt>loadClass</tt>} 方法调用。默认实现抛出一个 <tt>ClassNotFoundException</tt>。  </p>

@param  name 类的<a href="#name">二进制名称</a>

@return  得到的 <tt>Class</tt> 对象

@throws  ClassNotFoundException 如果无法找到类

@since  1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.lang.Class<?> java.lang.ClassLoader.defineClass(byte[] b, int off, int len) throws java.lang.ClassFormatError
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 byte 数组转换为 <tt>Class</tt> 类的实例。必须分析 <tt>Class</tt>，然后才能使用它。此方法已废弃，新版本将<a
 href="#name">二进制名称</a>作为该类的第一个参数，后者更加安全。

@param   b 组成类数据的字节。<tt>off</tt> 与 <tt>off+len-1</tt> 之间的字节应该具有《<a
         href="http://java.sun.com/docs/books/vmspec/">Java Virtual Machine Specification</a>》定义的有效类文件的格式。

@param   off 类数据的 <tt>b</tt> 中的起始偏移量

@param   len 类数据的长度

@return  从指定类数据创建的 <tt>Class</tt> 对象

@throws  ClassFormatError 如果数据不包含有效类

@throws  IndexOutOfBoundsException 如果 <tt>off</tt> 或 <tt>len</tt> 为负，或者 <tt>off+len</tt> 大于 <tt>b.length</tt>。

@see  #loadClass(String, boolean)
@see  #resolveClass(Class)
@deprecated  由 {@link #defineClass(String, byte[], int, int) defineClass(String, byte[], int, int)} 取代

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.lang.Class<?> java.lang.ClassLoader.defineClass(String name, byte[] b, int off, int len) throws java.lang.ClassFormatError
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 byte 数组转换为 <tt>Class</tt> 类的实例。必须分析 <tt>Class</tt>，然后才能使用它。

<p> 此方法将默认的 {@link java.security.ProtectionDomain <tt>ProtectionDomain</tt>} 分配给新定义的类。调用 {@link java.security.Policy#getPermissions(java.security.CodeSource) <tt>Policy.getPolicy().getPermissions(new CodeSource(null, null))</tt>} 时，<tt>ProtectionDomain</tt> 被有效授予所返回的相同权限集。默认域在第一次调用 {@link #defineClass(String, byte[], int, int) <tt>defineClass</tt>} 时创建，并在后续调用时被重用。

<p> 要将特定的 <tt>ProtectionDomain</tt> 分配给类，需要使用 {@link #defineClass(String, byte[], int, int, java.security.ProtectionDomain) <tt>defineClass</tt>} 方法，该方法将 <tt>ProtectionDomain</tt> 用作其参数之一。  </p>

@param  name 所需要的类的<a href="#name">二进制名称</a>，如果不知道此名称，则该参数为 <tt>null</tt>

@param   b 组成类数据的字节。<tt>off</tt> 与 <tt>off+len-1</tt> 之间的字节应该具有《<a href="http://java.sun.com/docs/books/vmspec/">Java Virtual Machine Specification</a>》定义的有效类文件的格式。

@param   off 类数据的 <tt>b</tt> 中的起始偏移量

@param   len 类数据的长度

@return  从指定类数据中创建的 <tt>Class</tt> 对象。

@throws  ClassFormatError 如果数据不包含有效类

@throws  IndexOutOfBoundsException 如果 <tt>off</tt> 或 <tt>len</tt> 为负，或者 <tt>off+len</tt> 大于 <tt>b.length</tt>。

@throws  SecurityException 如果试图将此类添加到包含由不同证书集签名的类（而不是此类，此类未签名）的包中，或者 <tt>name</tt> 以 "<tt>java.</tt>" 开头。

@see  #loadClass(String, boolean)
@see  #resolveClass(Class)
@see  java.security.CodeSource
@see  java.security.SecureClassLoader

@since  1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.lang.Class<?> java.lang.ClassLoader.defineClass(String name, byte[] b, int off, int len, ProtectionDomain protectionDomain) throws java.lang.ClassFormatError
<!-- END KEY -->
<!-- BEGIN DATA -->
使用可选的 <tt>ProtectionDomain</tt> 将一个 byte 数组转换为 <tt>Class</tt> 类的实例。如果该域为 <tt>null</tt>，则将默认域分配给 {@link #defineClass(String, byte[], int, int)} 的文档中指定的类。这个类必须分析后才能使用。

<p> 包中定义的第一个类确定在该包中定义的所有后续类必须包含的证书的确切集合。从该类的 <tt>ProtectionDomain</tt> 中的 {@link java.security.CodeSource <tt>CodeSource</tt>} 可以获得类的证书集合。添加到该包中的任何类都必须包含相同的证书集合，否则抛出 <tt>SecurityException</tt> 异常。注意，如果 <tt>name</tt> 为 <tt>null</tt>，则不执行该检查。应该始终传入要定义的类的<a href="#name">二进制名称</a>以及字节。这可确保定义该类的正确性。

<p> 指定的 <tt>name</tt> 不能以 "<tt>java.</tt>" 开头，因为 &quot;<tt>java.*</tt>&quot; 包中的所有类都只能由引导类加载器定义。如果 <tt>name</tt> 不是 <tt>null</tt>，则它必定等于由 byte 数组 &quot;<tt>b</tt>&quot; 指定的类的<a href="#name">二进制名称</a>，否则将抛出 {@link <tt>NoClassDefFoundError</tt>}。  </p>

@param   name 所需类的<a href="#name">二进制名称</a>，如果不知道此名称，则该参数为 <tt>null</tt>

@param   b 组成类数据的字节。从 <tt>off</tt> 到 <tt>off+len-1</tt> 的字节应该具有由《<a href="http://java.sun.com/docs/books/vmspec/">Java Virtual Machine Specification</a>》定义的有效类文件的格式。

@param   off 类数据的 <tt>b</tt> 中的起始偏移量

@param   len 类数据的长度

@param   protectionDomain 类的 ProtectionDomain

@return  从数据中创建的 <tt>Class</tt> 对象和可选的 <tt>ProtectionDomain</tt>。

@throws  ClassFormatError 如果数据不包含有效的类

@throws  NoClassDefFoundError 如果 <tt>name</tt> 不等于 <tt>b</tt> 指定的类的<a href="#name">二进制名称</a>。

@throws  IndexOutOfBoundsException 如果 <tt>off</tt> 或者 <tt>len</tt> 为负，或者 <tt>off+len</tt> 大于 <tt>b.length</tt>。

@throws  SecurityException 如果试图将此类添加到某个包中，而这个包中包含由不同证书集合（而不是该类）签名的类，或者 <tt>name</tt> 以 "<tt>java.</tt>" 开头。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.lang.Class<?> java.lang.ClassLoader.defineClass(String name, ByteBuffer b, ProtectionDomain protectionDomain) throws java.lang.ClassFormatError
<!-- END KEY -->
<!-- BEGIN DATA -->
使用可选的 <tt>ProtectionDomain</tt> 将 {@link java.nio.ByteBuffer <tt>ByteBuffer</tt>} 转换为 <tt>Class</tt> 类的实例。如果该域为 <tt>null</tt>，则将默认域分配给 {@link #defineClass(String, byte[], int, int)} 的文档中指定的类。这个类必须分析后才能使用。

<p>有关包中定义的第一个类（它确定了包的证书集合）的规则，以及对类名称的限制，都与 {@link #defineClass(String, byte[], int, int, ProtectionDomain)} 的文档中指定的相同。

<p> 调用形式为 <i>cl</i><tt>.defineClass(</tt><i>name</i><tt>,</tt> <i>bBuffer</i><tt>,</tt> <i>pd</i><tt>)</tt> 的此方法所产生的结果与以下语句产生的结果相同

 <blockquote><tt>
 ...<br>
 byte[] temp = new byte[</tt><i>bBuffer</i><tt>.{@link java.nio.ByteBuffer#remaining
 remaining}()];<br>
 	   </tt><i>bBuffer</i><tt>.{@link java.nio.ByteBuffer#get(byte[])
 get}(temp);<br>
     return {@link #defineClass(String, byte[], int, int, ProtectionDomain)
 </tt><i>cl</i><tt>.defineClass}(</tt><i>name</i><tt>, temp, 0, temp.length, </tt><i>pd</i><tt>);<br>
 </tt></blockquote>

@param  name 所需要的类的<a href="#name">二进制名称</a>，如果不知道此名称，则该参数为 <tt>null</tt>

@param  b 组成类数据的字节。从 <tt>b.position</tt> 到 <tt>b.position() + b.limit() -1 </tt> 的字节应该具有由《<a          href="http://java.sun.com/docs/books/vmspec/">Java Virtual Machine Specification</a>》定义的有效类文件的格式。

@param  protectionDomain 类的 ProtectionDomain，或为 <tt>null</tt>。

@return  从数据中创建的 <tt>Class</tt> 对象和可选的 <tt>ProtectionDomain</tt>。

@throws  ClassFormatError 如果数据不包含有效的类。

@throws  NoClassDefFoundError 如果 <tt>name</tt> 不等于 <tt>b</tt> 指定的类的<a href="#name">二进制名称</a>。

@throws  SecurityException 如果试图将此类添加到某个包中，而这个包中包含由不同证书集合（而不是该类）签名的类，或者 <tt>name</tt> 以 "<tt>java.</tt>" 开头。

@see      #defineClass(String, byte[], int, int, ProtectionDomain)

@since  1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void java.lang.ClassLoader.resolveClass(java.lang.Class<?> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
链接指定的类。类加载器可以使用此方法（其名称容易使人误解）来链接类。如果已经链接类 <tt>c</tt>，则仅返回此方法。否则，该类就按《<a
 href="http://java.sun.com/docs/books/jls/">Java Language Specification</a>》中 "Execution" 一章所描述的进行链接。
 </p>

@param  c 要链接的类

@throws  NullPointerException 如果 <tt>c</tt> 为 <tt>null</tt>。

@see  #defineClass(String, byte[], int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.lang.Class<?> java.lang.ClassLoader.findSystemClass(String name) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
查找具有指定的<a href="#name">二进制名称</a>的类，必要时加载它。

<p> 此方法通过系统类加载器（参见 {@link #getSystemClassLoader()}）来加载该类。返回的 <tt>Class</tt> 对象具有多个与之相关联的 <tt>ClassLoader</tt>。<tt>ClassLoader</tt> 的子类通常不必调用此方法，因为大多数类加载器只需重写 {@link #findClass(String)} 即可。</p>

@param  name 类的<a href="#name">二进制名称</a>

@return  指定 <tt>name</tt> 的 <tt>Class</tt> 对象

@throws  ClassNotFoundException 如果找不到类

@see  #ClassLoader(ClassLoader)
@see  #getParent()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.lang.Class<?> java.lang.ClassLoader.findLoadedClass(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 Java 虚拟机已将此加载器记录为具有给定<a href="#name">二进制名称</a>的某个类的启动加载器，则返回该<a href="#name">二进制名称</a>的类。否则，返回 <tt>null</tt>。</p>

@param  name 类的<a href="#name">二进制名称</a>

@return <tt>Class</tt> 对象，如果类没有被加载，则返回 <tt>null</tt>

@since  1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void java.lang.ClassLoader.setSigners(java.lang.Class<?> c, java.lang.Object[] signers)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置类的签署者。应该在定义类后调用此方法。</p>

@param  c <tt>Class</tt> 对象

@param  signers 类的签署者

@since  1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL java.lang.ClassLoader.getResource(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
查找具有给定名称的资源。资源是可以通过类代码以与代码基无关的方式访问的一些数据（图像、声音、文本等）。

<p> 资源名称是以 '<tt>/</tt>' 分隔的标识资源的路径名称。

<p> 此方法首先搜索资源的父类加载器；如果父类加载器为 <tt>null</tt>，则搜索的路径就是虚拟机的内置类加载器的路径。如果搜索失败，则此方法将调用 {@link #findResource(String)} 来查找资源。</p>

@param  name 资源名称

@return  读取资源的 <tt>URL</tt> 对象；如果找不到该资源，或者调用者没有足够的权限获取该资源，则返回 <tt>null</tt>。

@since  1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<java.net.URL> java.lang.ClassLoader.getResources(String name) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
查找所有给定名称的资源。资源是可以通过类代码以与代码基无关的方式访问的某些数据（图像、声音、文本等）。

<p>资源名称是以 '<tt>/</tt>' 分隔的标识资源的路径名称。

<p>{@link #getResource(String)} 的文档中描述了搜索顺序。</p>

@param  name 资源名称

@return  资源的 {@link java.net.URL <tt>URL</tt>} 对象的枚举。如果找不到资源，则该枚举将为空。类加载器无权访问的资源不在此枚举中。

@throws  IOException 如果发生 I/O 错误

@see  #findResources(String)

@since  1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.net.URL java.lang.ClassLoader.findResource(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
查找具有给定名称的资源。类加载器实现应该重写此方法，以指定从何处查找资源。</p>

@param  name 资源名称

@return  用于读取资源的 <tt>URL</tt> 对象；如果无法找到资源，则返回 <tt>null</tt>

@since  1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Enumeration<java.net.URL> java.lang.ClassLoader.findResources(String name) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示所有具有给定名称的资源的 {@link java.net.URL <tt>URL</tt>} 对象的枚举。类加载器实现应该重写此方法，以指定从何处加载资源。</p>

@param  name 资源名称

@return  资源的 {@link java.net.URL <tt>URL</tt>} 对象的枚举

@throws  IOException 如果发生 I/O 错误

@since  1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.net.URL java.lang.ClassLoader.getSystemResource(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
从用来加载类的搜索路径中查找具有指定名称的资源。此方法通过系统类加载器（参见 {@link #getSystemClassLoader()}）来查找资源。</p>

@param  name 资源名称

@return 用于读取资源的 {@link java.net.URL <tt>URL</tt>} 对象，如果找不到资源，则返回 <tt>null</tt>

@since  1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Enumeration<java.net.URL> java.lang.ClassLoader.getSystemResources(String name) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从用来加载类的搜索路径中查找所有具有指定名称的资源。找到的资源作为 {@link java.net.URL <tt>URL</tt>} 对象的 {@link java.util.Enumeration <tt>Enumeration</tt>} 返回。

<p> {@link #getSystemResource(String)} 的文档中描述了搜索顺序。</p>

@param  name 资源名称

@return 资源 {@link java.net.URL <tt>URL</tt>} 对象的枚举

@throws  IOException 如果发生 I/O 错误

@since  1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream java.lang.ClassLoader.getResourceAsStream(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回读取指定资源的输入流。

<p> {@link #getResource(String)} 的文档中描述了搜索顺序。</p>

@param  name 资源名称

@return  用于读取资源的输入流，如果无法找到资源，则返回 <tt>null</tt>

@since  1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.io.InputStream java.lang.ClassLoader.getSystemResourceAsStream(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
从用来加载类的搜索路径打开具有指定名称的资源，以读取该资源。此方法通过系统类加载器（参见 {@link #getSystemClassLoader()}）来查找资源。</p>

@param  name 资源名称

@return  用于读取资源的输入流，如果无法找到资源，则返回 <tt>null</tt>

@since  1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.ClassLoader java.lang.ClassLoader.getParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回委托的父类加载器。一些实现可能使用 <tt>null</tt> 来表示引导类加载器。如果类加载器的父类加载器就是引导类加载器，则此方法将在这样的实现中返回 <tt>null</tt>。

<p> 如果存在安全管理器，且调用者的类加载器既不是 <tt>null</tt>，也不是此类加载器的祖先，那么此方法将使用 {@link RuntimePermission#RuntimePermission(String) <tt>RuntimePermission(&quot;getClassLoader&quot;)</tt>} 权限调用安全管理器的 {@link SecurityManager#checkPermission(java.security.Permission) <tt>checkPermission</tt>} 方法，以检验是否允许访问该类的父类加载器。如果无此权限，则抛出 <tt>SecurityException</tt> 异常。  </p>

@return  父级 <tt>ClassLoader</tt>

@throws  SecurityException 如果存在安全管理器，并且其 <tt>checkPermission</tt> 方法不允许访问此类加载器的父类加载器。

@since  1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.ClassLoader java.lang.ClassLoader.getSystemClassLoader()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回委托的系统类加载器。该加载器是新的 <tt>ClassLoader</tt> 实例的默认委托父类加载器，通常是用来启动应用程序的类加载器。

<p> 在运行时启动序列的早期首先调用此方法，这时会创建系统类加载器并将其设置为调用 <tt>Thread</tt> 的上下文类加载器。

<p> 默认的系统类加载器是此类的一个与实现有关的实例。

<p> 如果在第一次调用此方法时定义系统属性 "<tt>java.system.class.loader</tt>"，那么该属性的值就是将作为系统类加载器返回的那个类的名称。该类是使用默认系统类加载器进行加载的，它必须定义一个公共的构造方法，此构造方法带有用作委托父类加载器的 <tt>ClassLoader</tt> 类型的单个参数。然后可以使用将默认系统类加载器用作参数的此构造方法创建一个实例。得到的类加载器被定义为系统类加载器。

<p> 如果存在安全管理器，且调用者的类加载器既不是 <tt>null</tt>，也不同于或不是系统类加载器的祖先，那么该方法将使用 {@link RuntimePermission#RuntimePermission(String) <tt>RuntimePermission(&quot;getClassLoader&quot;)</tt>} 权限调用安全管理器的 {@link SecurityManager#checkPermission(java.security.Permission) <tt>checkPermission</tt>} 方法，以检验系统类加载器的访问权。如果无此权限，则抛出 <tt>SecurityException</tt> 异常。</p>

@return  委托的系统 <tt>ClassLoader</tt>，如果没有这样的类加载器，则返回 <tt>null</tt>

@throws  SecurityException 如果存在安全管理器，且其 <tt>checkPermission</tt> 方法不允许访问系统类加载器。

@throws  IllegalStateException 如果在构造由 "<tt>java.system.class.loader</tt>" 属性指定的类加载器期间进行递归调用。

@throws  Error 如果定义了系统属性 "<tt>java.system.class.loader</tt>"，但是无法加载指定的类，提供者类没有定义所需的构造方法，或者在调用该构造方法时抛出异常。可以通过 {@link Throwable#getCause()} 方法找出导致该错误的基本原因。

@revised  1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Package java.lang.ClassLoader.definePackage(String name, String specTitle, String specVersion, String specVendor, String implTitle, String implVersion, String implVendor, URL sealBase) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 name 在此 <tt>ClassLoader</tt> 中定义包。这允许类加载器定义用于它们的类的包。包必须在定义类之前创建，包名在类加载器中必须惟一，并且一旦创建就不能重新定义或更改。</p>

@param  name 包名

@param  specTitle 规范标题

@param  specVersion 规范版本

@param  specVendor 规范供应商

@param  implTitle 实现标题

@param  implVersion 实现版本

@param  implVendor 实现供应商

@param  sealBase 如果不为 <tt>null</tt>，那么将此包对于给定代码源 {@link java.net.URL <tt>URL</tt>} 对象是密封的。否则，不密封此包。

@return 新定义的 <tt>Package</tt> 对象

@throws  IllegalArgumentException 如果包名与此类加载器或其某个祖先中的现有包的名称重复

@since  1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Package java.lang.ClassLoader.getPackage(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由此类加载器或其任何祖先所定义的 <tt>Package</tt>。</p>

@param  name 包名

@return 与给定名称相对应的 <tt>Package</tt>；如果没有这样的包，则返回 <tt>null</tt>

@since  1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Package[] java.lang.ClassLoader.getPackages()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此类加载器及其祖先所定义的所有 <tt>Package</tt>。</p>

@return  此 <tt>ClassLoader</tt> 定义的 <tt>Package</tt> 对象的数组

@since  1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.lang.ClassLoader.findLibrary(String libname)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回本机库的绝对路径名。虚拟机 (VM) 调用此方法来查找那些属于利用此类加载器加载的类的本机库。如果此方法返回 <tt>null</tt>，则虚拟机沿指定为 "<tt>java.library.path</tt>" 属性的路径搜索该库。</p>

@param  libname 库名称

@return 本机库的绝对路径

@see  System#loadLibrary(String)
@see  System#mapLibraryName(String)

@since  1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.lang.ClassLoader.setDefaultAssertionStatus(boolean enabled)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此类加载器的默认断言状态。此设置确定由此类加载器加载并在将来初始化的类在默认情况下是启用还是禁用断言。通过调用 {@link #setPackageAssertionStatus(String, boolean)} 或 {@link #setClassAssertionStatus(String, boolean)}，在每个包或每个类上重写此设置。</p>

@param  enabled 如果由此类加载器加载的类将默认为启用断言，则该参数为 <tt>true</tt>；如果默认为禁用断言，则该参数为 <tt>false</tt>。

@since  1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.lang.ClassLoader.setPackageAssertionStatus(String packageName, boolean enabled)
<!-- END KEY -->
<!-- BEGIN DATA -->
为指定包设置默认断言状态。包的默认断言状态确定了以后初始化属于指定包或其子包的类的断言状态。

<p> 名为 p 的包的子包是所有名称以 "<tt>p.</tt>" 开头的包。例如，<tt>javax.swing.text</tt> 是 <tt>javax.swing</tt> 的子包，<tt>java.util</tt> 和 <tt>java.lang.reflect</tt> 是 <tt>java</tt> 的子包。

<p> 如果默认情况下多个包可应用于一个给定类，则默认与最特殊的包相关的包拥有高于其他包的优先级。例如，如果 <tt>javax.lang</tt> 和 <tt>javax.lang.reflect</tt> 都具有与之相关的默认包，则将后者应用于 <tt>javax.lang.reflect</tt> 中的类。

<p> 包的优先级默认情况下高于类加载器的默认断言状态，并且可以通过调用 {@link #setClassAssertionStatus(String, boolean)} 在每个类的基础上进行重写。  </p>

@param  packageName 要设置其默认包断言状态的包名。<tt>null</tt> 值指示未命名的包为“当前”状态（<a
         href="http://java.sun.com/docs/books/jls/">Java Language Specification</a> 的第 7.4.2 节）。

@param  enabled 如果由此类加载器加载并属于指定包或其子包的类在默认情况下启用断言，则该参数为 <tt>true</tt>；如果在默认情况下禁用断言，则该参数为 <tt>false</tt>。

@since  1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.lang.ClassLoader.setClassAssertionStatus(String className, boolean enabled)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置在此类加载器及其包含的嵌套类中指定的最高层类所需的断言状态。该设置的优先级高于类加载器的默认断言状态以及可用的任何包的默认值。如果已经初始化指定类，则此方法无效。（初始化类后，其断言状态无法再改变。）

<p> 如果指定类不是最高层的类，则此调用对任何类的实际断言都无效。</p>

@param  className 将要设置其断言状态的最高层类的完全限定类名。

@param  enabled 如果指定类在初始化时启用断言，则该参数为<tt>true</tt>；如果该类禁用断言，则该参数为<tt>false</tt>。

@since  1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.lang.ClassLoader.clearAssertionStatus()
<!-- END KEY -->
<!-- BEGIN DATA -->
将此类加载器的默认断言状态设置为 <tt>false</tt>，并放弃与此类加载器关联的所有默认包或类断言状态设置。提供此方法可以让类加载器忽略任何命令行或持久断言状态设置，并且“无不良记录”。
 </p>

@since  1.4

<!-- END DATA -->
