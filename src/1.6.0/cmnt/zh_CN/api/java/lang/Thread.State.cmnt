<!-- BEGIN KEY -->
public static final class java.lang.Thread.State extends java.lang.Enum
<!-- END KEY -->
<!-- BEGIN DATA -->
线程状态。线程可以处于下列状态之一：
 <ul>
<li>{@link #NEW}<br> 至今尚未启动的线程处于这种状态。
     </li>
<li>{@link #RUNNABLE}<br> 正在 Java 虚拟机中执行的线程处于这种状态。
     </li>
<li>{@link #BLOCKED}<br> 受阻塞并等待某个监视器锁的线程处于这种状态。
     </li>
<li>{@link #WAITING}<br> 无限期地等待另一个线程来执行某一特定操作的线程处于这种状态。
     </li>
<li>{@link #TIMED_WAITING}<br> 等待另一个线程来执行取决于指定等待时间的操作的线程处于这种状态。
     </li>
<li>{@link #TERMINATED}<br> 已退出的线程处于这种状态。
     </li>
 </ul>

<p>
在给定时间点上，一个线程只能处于一种状态。这些状态是虚拟机状态，它们并没有反映所有操作系统线程状态。
 
@since   1.5
@see #getState

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Thread.State java.lang.Thread.State.NEW
<!-- END KEY -->
<!-- BEGIN DATA -->
至今尚未启动的线程的状态。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Thread.State java.lang.Thread.State.RUNNABLE
<!-- END KEY -->
<!-- BEGIN DATA -->
可运行线程的线程状态。处于可运行状态的某一线程正在 Java 虚拟机中运行，但它可能正在等待操作系统中的其他资源，比如处理器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Thread.State java.lang.Thread.State.BLOCKED
<!-- END KEY -->
<!-- BEGIN DATA -->
受阻塞并且正在等待监视器锁的某一线程的线程状态。处于受阻塞状态的某一线程正在等待监视器锁，以便进入一个同步的块/方法，或者在调用 {@link Object#wait() Object.wait} 之后再次进入同步的块/方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Thread.State java.lang.Thread.State.WAITING
<!-- END KEY -->
<!-- BEGIN DATA -->
某一等待线程的线程状态。某一线程因为调用下列方法之一而处于等待状态：
<ul>
  <li>不带超时值的 {@link Object#wait() Object.wait}</li>
  <li>不带超时值的 {@link #join() Thread.join}</li>
  <li>{@link LockSupport#park() LockSupport.park}</li>
 </ul>
 
<p>处于等待状态的线程正等待另一个线程，以执行特定操作。

例如，已经在某一对象上调用了 <tt>Object.wait()</tt> 的线程正等待另一个线程，以便在该对象上调用 <tt>Object.notify()</tt> 或 <tt>Object.notifyAll()</tt>。已经调用了 <tt>Thread.join()</tt> 的线程正在等待指定线程终止。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Thread.State java.lang.Thread.State.TIMED_WAITING
<!-- END KEY -->
<!-- BEGIN DATA -->
具有指定等待时间的某一等待线程的线程状态。某一线程因为调用以下带有指定正等待时间的方法之一而处于定时等待状态：
 <ul>
   <li>{@link #sleep Thread.sleep}</li>
   <li>带有超时值的 {@link Object#wait(long) Object.wait}</li>
   <li>带有超时值的 {@link #join(long) Thread.join}</li>
   <li>{@link LockSupport#parkNanos LockSupport.parkNanos}</li>
   <li>{@link LockSupport#parkUntil LockSupport.parkUntil}</li>
 </ul>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Thread.State java.lang.Thread.State.TERMINATED
<!-- END KEY -->
<!-- BEGIN DATA -->
已终止线程的线程状态。线程已经结束执行。

<!-- END DATA -->
