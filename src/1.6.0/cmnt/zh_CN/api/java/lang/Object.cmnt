<!-- BEGIN KEY -->
public class java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
类 <code>Object</code> 是类层次结构的根类。每个类都使用 <code>Object</code> 作为超类。所有对象（包括数组）都实现这个类的方法。 

@author  unascribed 
@version 1.73, 03/30/06
@see     java.lang.Class 
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public final native java.lang.Class<?> java.lang.Object.getClass()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 {@code Object} 的运行时类。返回的 {@code Class} 对象是由所表示类的 {@code static synchronized} 方法锁定的对象。

<p><b>实际结果类型是 {@code Class<? extends |X|>}，其中 {@code |X|} 表示清除表达式中的静态类型，该表达式调用 {@code getClass}。</b> 例如，以下代码片段中不需要强制转换：</p>

<p>
 {@code Number n = 0;                             }<br>
 {@code Class<? extends Number> c = n.getClass(); }
</p>

@return 表示此对象运行时类的 {@code Class} 对象。
@see    <a href="http://java.sun.com/docs/books/jls/">The Java Language Specification, Third Edition (15.8.2 Class Literals)</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public native int java.lang.Object.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该对象的哈希码值。支持此方法是为了提高哈希表（例如 <code>java.util.Hashtable</code> 提供的哈希表）的性能。 
 <p>
<code>hashCode</code> 的常规协定是： 
 <ul>
<li>在 Java 应用程序执行期间，在对同一对象多次调用 <tt>hashCode</tt> 方法时，必须一致地返回相同的整数，前提是将对象进行 <tt>equals</tt> 比较时所用的信息没有被修改。从某一应用程序的一次执行到同一应用程序的另一次执行，该整数无需保持一致。 
<li>如果根据 <tt>equals(Object)</tt> 方法，两个对象是相等的，那么对这两个对象中的每个对象调用 <code>hashCode</code> 方法都必须生成相同的整数结果。 
<li>如果根据 {@link java.lang.Object#equals(java.lang.Object)} 方法，两个对象不相等，那么对这两个对象中的任一对象上调用 <tt>hashCode</tt> 方法<em>不</em> 要求一定生成不同的整数结果。但是，程序员应该意识到，为不相等的对象生成不同整数结果可以提高哈希表的性能。
 </ul>
 <p>
实际上，由 <tt>Object</tt> 类定义的 hashCode 方法确实会针对不同的对象返回不同的整数。（这一般是通过将该对象的内部地址转换成一个整数来实现的，但是 Java<font size="-2"><sup>TM</sup></font> 编程语言不需要这种实现技巧。）

@return  此对象的一个哈希码值。
@see     java.lang.Object#equals(java.lang.Object) 
@see     java.util.Hashtable

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.Object.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
指示其他某个对象是否与此对象“相等”。
 <p>
<code>equals</code> 方法在非空对象引用上实现相等关系：
 <ul>
<li><i>自反性</i>：对于任何非空引用值 <code>x</code>，<code>x.equals(x)</code> 都应返回 <code>true</code>。
<li><i>对称性</i>：对于任何非空引用值 <code>x</code> 和 <code>y</code>，当且仅当 <code>y.equals(x)</code> 返回 <code>true</code> 时，<code>x.equals(y)</code> 才应返回 <code>true</code>。
<li><i>传递性</i>：对于任何非空引用值 <code>x</code>、<code>y</code> 和 <code>z</code>，如果 <code>x.equals(y)</code> 返回 <code>true</code>，并且 <code>y.equals(z)</code> 返回 <code>true</code>，那么 <code>x.equals(z)</code> 应返回 <code>true</code>。
<li><i>一致性</i>：对于任何非空引用值 <code>x</code> 和 <code>y</code>，多次调用 <tt>x.equals(y)</tt> 始终返回 <code>true</code> 或始终返回 <code>false</code>，前提是对象上 <code>equals</code> 比较中所用的信息没有被修改。
<li>对于任何非空引用值 <code>x</code>，<code>x.equals(null)</code> 都应返回 <code>false</code>。
 </ul>
 <p>
<code>Object</code> 类的 <tt>equals</tt> 方法实现对象上差别可能性最大的相等关系；即，对于任何非空引用值 <code>x</code> 和 <code>y</code>，当且仅当 <code>x</code> 和 <code>y</code> 引用同一个对象时，此方法才返回 <code>true</code>（<code>x == y</code> 具有值 <code>true</code>）。
 <p>
注意：当此方法被重写时，通常有必要重写 <tt>hashCode</tt> 方法，以维护 <tt>hashCode</tt> 方法的常规协定，该协定声明相等对象必须具有相等的哈希码。 

@param   obj   要与之比较的引用对象。
@return  如果此对象与 obj 参数相同，则返回 <code>true</code>；否则返回 <code>false</code>。
@see     #hashCode() 
@see     java.util.Hashtable

<!-- END DATA -->
<!-- BEGIN KEY -->
protected native java.lang.Object java.lang.Object.clone() throws java.lang.CloneNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回此对象的一个副本。“副本”的准确含义可能依赖于对象的类。这样做的目的是，对于任何对象 <tt>x</tt>，表达式：
 <blockquote>
 <pre>
x.clone() != x</pre></blockquote>
为 true，表达式：
 <blockquote>
 <pre>
x.clone().getClass() == x.getClass()</pre></blockquote>
也为 <tt>true</tt>，但这些并非必须要满足的要求。一般情况下：
 <blockquote>
 <pre>
x.clone().equals(x)</pre></blockquote>
为 <tt>true</tt>，但这并非必须要满足的要求。 
 <p>
按照惯例，返回的对象应该通过调用 <tt>super.clone</tt> 获得。如果一个类及其所有的超类（<tt>Object</tt> 除外）都遵守此约定，则 <tt>x.clone().getClass() == x.getClass()</tt>。
 <p>
按照惯例，此方法返回的对象应该独立于该对象（正被复制的对象）。要获得此独立性，在 <tt>super.clone</tt> 返回对象之前，有必要对该对象的一个或多个字段进行修改。这通常意味着要复制包含正在被复制对象的内部“深层结构”的所有可变对象，并使用对副本的引用替换对这些对象的引用。如果一个类只包含基本字段或对不变对象的引用，那么通常不需要修改 <tt>super.clone</tt> 返回的对象中的字段。
 <p>
<tt>Object</tt> 类的 <tt>clone</tt> 方法执行特定的复制操作。首先，如果此对象的类不能实现接口 <tt>Cloneable</tt>，则会抛出 <tt>CloneNotSupportedException</tt>。注意，所有的数组都被视为实现接口 <tt>Cloneable</tt>。否则，此方法会创建此对象的类的一个新实例，并像通过分配那样，严格使用此对象相应字段的内容初始化该对象的所有字段；这些字段的内容没有被自我复制。所以，此方法执行的是该对象的“浅表复制”，而不“深层复制”操作。
 <p>
<tt>Object</tt> 类本身不实现接口 <tt>Cloneable</tt>，所以在类为 <tt>Object</tt> 的对象上调用 <tt>clone</tt> 方法将会导致在运行时抛出异常。

@return     此实例的一个副本。
@exception  CloneNotSupportedException  如果对象的类不支持 <code>Cloneable</code> 接口，则重写 <code>clone</code> 方法的子类也会抛出此异常，以指示无法复制某个实例。
@see java.lang.Cloneable

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.Object.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该对象的字符串表示。通常，<code>toString</code> 方法会返回一个“以文本方式表示”此对象的字符串。结果应是一个简明但易于读懂的信息表达式。建议所有子类都重写此方法。
 <p>
<code>Object</code> 类的 <code>toString</code> 方法返回一个字符串，该字符串由类名（对象是该类的一个实例）、at 标记符&ldquo;<code>@</code>&rdquo;和此对象哈希码的无符号十六进制表示组成。换句话说，该方法返回一个字符串，它的值等于：
 <blockquote>
 <pre>
getClass().getName() + '@' + Integer.toHexString(hashCode())
 </pre></blockquote>

@return  该对象的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final native void java.lang.Object.notify()
<!-- END KEY -->
<!-- BEGIN DATA -->
唤醒在此对象监视器上等待的单个线程。如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。选择是任意性的，并在对实现做出决定时发生。线程通过调用其中一个 <code>wait</code> 方法，在对象的监视器上等待。
 <p>
直到当前线程放弃此对象上的锁定，才能继续执行被唤醒的线程。被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争；例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。
 <p>
此方法只应由作为此对象监视器的所有者的线程来调用。通过以下三种方法之一，线程可以成为此对象监视器的所有者： 
 <ul>
<li>通过执行此对象的同步实例方法。 
<li>通过执行在此对象上进行同步的 <code>synchronized</code> 语句的正文。 
<li>对于 <code>Class</code> 类型的对象，可以通过执行该类的同步静态方法。 
 </ul>
 <p>
一次只能有一个线程拥有对象的监视器。 

@exception  IllegalMonitorStateException  如果当前线程不是此对象监视器的所有者。
@see        java.lang.Object#notifyAll() 
@see        java.lang.Object#wait()

<!-- END DATA -->
<!-- BEGIN KEY -->
public final native void java.lang.Object.notifyAll()
<!-- END KEY -->
<!-- BEGIN DATA -->
唤醒在此对象监视器上等待的所有线程。线程通过调用其中一个 <code>wait</code> 方法，在对象的监视器上等待。
 <p>
直到当前线程放弃此对象上的锁定，才能继续执行被唤醒的线程。被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争；例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。
 <p>
此方法只应由作为此对象监视器的所有者的线程来调用。有关线程能够成为监视器所有者的方法的描述，请参阅 <code>notify</code> 方法。 

@exception  IllegalMonitorStateException  如果当前线程不是此对象监视器的所有者。
@see        java.lang.Object#notify() 
@see        java.lang.Object#wait()

<!-- END DATA -->
<!-- BEGIN KEY -->
public final native void java.lang.Object.wait(long timeout) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
在其他线程调用此对象的 {@link java.lang.Object#notify()} 方法或 {@link java.lang.Object#notifyAll()} 方法，或者超过指定的时间量前，导致当前线程等待。 
 <p>
当前线程必须拥有此对象监视器。 
 <p>
此方法导致当前线程（称之为 <var>T</var>）将其自身放置在对象的等待集中，然后放弃此对象上的所有同步要求。出于线程调度目的，在发生以下四种情况之一前，线程 <var>T</var> 被禁用，且处于休眠状态：
<ul>
<li>其他某个线程调用此对象的 <tt>notify</tt> 方法，并且线程 <var>T</var> 碰巧被任选为被唤醒的线程。 
<li>其他某个线程调用此对象的 <tt>notifyAll</tt> 方法。 
<li>其他某个线程{@linkplain Thread#interrupt() 中断}线程 <var>T</var>。 
<li>大约已经到达指定的实际时间。但是，如果 <tt>timeout</tt> 为零，则不考虑实际时间，在获得通知前该线程将一直等待。 
 </ul>
然后，从对象的等待集中删除线程 <var>T</var>，并重新进行线程调度。然后，该线程以常规方式与其他线程竞争，以获得在该对象上同步的权利；一旦获得对该对象的控制权，该对象上的所有其同步声明都将被恢复到以前的状态，这就是调用 <tt>wait</tt> 方法时的情况。然后，线程 <var>T</var> 从 <tt>wait</tt> 方法的调用中返回。所以，从 <tt>wait</tt> 方法返回时，该对象和线程 <tt>T</tt> 的同步状态与调用 <tt>wait</tt> 方法时的情况完全相同。 
 <p>
在没有被通知、中断或超时的情况下，线程还可以唤醒一个所谓的<i>虚假唤醒</i> (spurious wakeup)。虽然这种情况在实践中很少发生，但是应用程序必须通过以下方式防止其发生，即对应该导致该线程被提醒的条件进行测试，如果不满足该条件，则继续等待。换句话说，等待应总是发生在循环中，如下面的示例：
 <pre>
synchronized (obj) {
while (&lt;condition does not hold&gt;)
obj.wait(timeout);
... // Perform action appropriate to condition
     }
 </pre>
（有关这一主题的更多信息，请参阅 Doug Lea 撰写的 Concurrent Programming in Java (Second Edition) (Addison-Wesley, 2000) 中的第 3.2.3 节或 Joshua Bloch 撰写的 Effective Java Programming Language Guide (Addison-Wesley, 2001) 中的第 50 项。
 
<p>如果当前线程在等待之前或在等待时被任何线程{@linkplain java.lang.Thread#interrupt() 中断}，则会抛出 <tt>InterruptedException</tt>。在按上述形式恢复此对象的锁定状态时才会抛出此异常。

 <p>
注意，由于 <tt>wait</tt> 方法将当前线程放入了对象的等待集中，所以它只能解除此对象的锁定；可以同步当前线程的任何其他对象在线程等待时仍处于锁定状态。
 <p>
此方法只应由作为此对象监视器的所有者的线程来调用。有关线程能够成为监视器所有者的方法的描述，请参阅 <code>notify</code> 方法。 

@param      timeout   要等待的最长时间（以毫秒为单位）。
@exception  IllegalArgumentException      如果超时值为负。
@exception  IllegalMonitorStateException  如果当前线程不是此对象监视器的所有者。
@exception  InterruptedException 如果在当前线程等待通知之前或者正在等待通知时，任何线程中断了当前线程。在抛出此异常时，当前线程的<i>中断状态</i> 被清除。
@see        java.lang.Object#notify() 
@see        java.lang.Object#notifyAll()

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.lang.Object.wait(long timeout, int nanos) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
在其他线程调用此对象的 {@link java.lang.Object#notify()} 方法或 {@link java.lang.Object#notifyAll()} 方法，或者其他某个线程中断当前线程，或者已超过某个实际时间量前，导致当前线程等待。 
 <p>
此方法类似于一个参数的 <code>wait</code> 方法，但它允许更好地控制在放弃之前等待通知的时间量。用毫微秒度量的实际时间量可以通过以下公式计算出来：
 <blockquote>
 <pre>
1000000*timeout+nanos</pre></blockquote>
 <p>
在其他所有方面，此方法执行的操作与带有一个参数的 {@link #wait(long)} 方法相同。需要特别指出的是，<tt>wait(0, 0)</tt> 与 <tt>wait(0)</tt> 相同。
 <p>
当前线程必须拥有此对象监视器。该线程发布对此监视器的所有权，并等待下面两个条件之一发生： 
 <ul>
<li>其他线程通过调用 <code>notify</code> 方法，或 <code>notifyAll</code> 方法通知在此对象的监视器上等待的线程醒来。 
<li><code>timeout</code> 毫秒值与 <code>nanos</code> 毫微秒参数值之和指定的超时时间已用完。 
 </ul>
 <p>
然后，该线程等到重新获得对监视器的所有权后才能继续执行。
 <p>
对于某一个参数的版本，实现中断和虚假唤醒是有可能的，并且此方法应始终在循环中使用：
 <pre>
synchronized (obj) {
while (&lt;condition does not hold&gt;)
obj.wait(timeout, nanos);
... // Perform action appropriate to condition
     }
 </pre>
此方法只应由作为此对象监视器的所有者的线程来调用。有关线程能够成为监视器所有者的方法的描述，请参阅 <code>notify</code> 方法。 

@param      timeout   要等待的最长时间（以毫秒为单位）。
@param      nanos      额外时间（以毫微秒为单位，范围是 0-999999）。
@exception  IllegalArgumentException      如果超时值是负数，或者毫微秒值不在 0-999999 范围内。
@exception  IllegalMonitorStateException  如果当前线程不是此对象监视器的所有者。
@exception  InterruptedException 如果在当前线程等待通知之前或者正在等待通知时，任何线程中断了当前线程。在抛出此异常时，当前线程的<i>中断状态</i> 被清除。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.lang.Object.wait() throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
在其他线程调用此对象的 {@link java.lang.Object#notify()} 方法或 {@link java.lang.Object#notifyAll()} 方法前，导致当前线程等待。换句话说，此方法的行为就好像它仅执行 <tt>wait(0)</tt> 调用一样。
 <p>
当前线程必须拥有此对象监视器。该线程发布对此监视器的所有权并等待，直到其他线程通过调用 <code>notify</code> 方法，或 <code>notifyAll</code> 方法通知在此对象的监视器上等待的线程醒来。然后该线程将等到重新获得对监视器的所有权后才能继续执行。 
 <p>
对于某一个参数的版本，实现中断和虚假唤醒是可能的，而且此方法应始终在循环中使用：
 <pre>
synchronized (obj) {
while (&lt;condition does not hold&gt;)
obj.wait();
... // Perform action appropriate to condition
     }
 </pre>
此方法只应由作为此对象监视器的所有者的线程来调用。有关线程能够成为监视器所有者的方法的描述，请参阅 <code>notify</code> 方法。 

@exception  IllegalMonitorStateException  如果当前线程不是此对象监视器的所有者。
@exception  InterruptedException 如果在当前线程等待通知之前或者正在等待通知时，任何线程中断了当前线程。在抛出此异常时，当前线程的<i>中断状态</i> 被清除。
@see        java.lang.Object#notify() 
@see        java.lang.Object#notifyAll()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.lang.Object.finalize() throws java.lang.Throwable
<!-- END KEY -->
<!-- BEGIN DATA -->
当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。子类重写 <code>finalize</code> 方法，以配置系统资源或执行其他清除。 
 <p>
<tt>finalize</tt> 的常规协定是：当 Java<font size="-2"><sup>TM</sup></font> 虚拟机已确定尚未终止的任何线程无法再通过任何方法访问此对象时，将调用此方法，除非由于准备终止的其他某个对象或类的终结操作执行了某个操作。<tt>finalize</tt> 方法可以采取任何操作，其中包括再次使此对象对其他线程可用；不过，<tt>finalize</tt> 的主要目的是在不可撤消地丢弃对象之前执行清除操作。例如，表示输入/输出连接的对象的 finalize 方法可执行显式 I/O 事务，以便在永久丢弃对象之前中断连接。 
 <p>
<tt>Object</tt> 类的 <tt>finalize</tt> 方法执行非特殊性操作；它仅执行一些常规返回。<tt>Object</tt> 的子类可以重写此定义。
 <p>
Java 编程语言不保证哪个线程将调用某个给定对象的 <tt>finalize</tt> 方法。但可以保证在调用 finalize 时，调用 finalize 的线程将不会持有任何用户可见的同步锁定。如果 finalize 方法抛出未捕获的异常，那么该异常将被忽略，并且该对象的终结操作将终止。
 <p>
在启用某个对象的 <tt>finalize</tt> 方法后，将不会执行进一步操作，直到 Java 虚拟机再次确定尚未终止的任何线程无法再通过任何方法访问此对象，其中包括由准备终止的其他对象或类执行的可能操作，在执行该操作时，对象可能被丢弃。
 <p>
对于任何给定对象，Java 虚拟机最多只调用一次 <tt>finalize</tt> 方法。
 <p>
<code>finalize</code> 方法抛出的任何异常都会导致此对象的终结操作停止，但可以通过其他方法忽略它。 

@throws Throwable 此方法抛出的 <code>Exception</code>

<!-- END DATA -->
