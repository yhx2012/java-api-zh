<!-- BEGIN KEY -->
java.lang.ref
<!-- END KEY -->
<!-- BEGIN DATA -->

提供了引用对象类，支持在某种程度上与垃圾回收器之间的交互。程序可以使用一个引用对象来维持对另外某一对象的引用，所采用的方式是使后者仍然可以被回收器回收。程序还可以安排在回收器确定某一给定对象的可到达性已经更改之后的某个时间得到通知。


<h2>包规范</h2>

<em>引用对象</em> 封装了对另一个对象的引用，这样就可以像其他任何对象一样检查和操作引用自身。有三种类型的引用对象，按从弱到强依次为：<em>软</em> 引用、<em>弱</em> 引用和<em>虚</em> 引用。正如下面定义的那样，每种类型对应于一个不同的可到达性级别。软引用适用于实现内存敏感的缓存，弱引用适用于实现无法防止其键（或值）被回收的规范化映射，而虚引用则适用于以某种比 Java 终结机制更灵活的方式调度 pre-mortem 清除操作。

<p> 每种引用对象类型都是通过抽象的基本 <code>{@link java.lang.ref.Reference}</code> 类的一个子类实现的。其中一个子类的实例封装了对特定对象的引用，该对象名为<em>指示对象</em>。每个引用对象都提供了获取和清除该引用的方法。引用对象是不可变的，因此，除了清除操作之外，没有提供 <code>set</code> 操作。通过添加任何所需的字段和方法，程序可以为这些子类进一步创建子类，或者可以不加更改地使用这些子类。


<h3>通知</h3>

在创建引用对象时，通过向<em>引用队列</em><em>注册</em> 一个适当的引用对象，程序可以请求在对象可到达性更改时获得通知。在垃圾回收器确定引用的可到达性已经更改为对应于引用类型的值之后的某一时间，它会将引用添加到相关的队列中。此时，该引用被认为是<em>已加入队列的</em>。通过轮询或阻塞，直到获得了引用，程序才可以从队列中移除引用。引用队列是通过 <code>{@link java.lang.ref.ReferenceQueue}</code> 类实现的。

<p> 已注册的引用对象及其队列之间的关系是单向的。也就是说，队列不会追踪那些向它注册的引用。如果一个已注册的引用本身变得不可到达，则永远不会将它加入到队列中。使用引用对象的程序的责任是，确保对象是可达到的，只要程序对其指示对象感兴趣。

<p> 虽然某些程序会选择专门使用一个线程从一个或多个队列中移除引用对象并处理它们，但这是绝对没有必要的。一种通常很有用的策略是：在执行另一个相当频繁的操作期间检查引用队列。例如，使用弱引用来实现弱键的哈希表能在每次访问表时轮询其引用队列。这就是 <code>{@link java.util.WeakHashMap}</code> 类的工作方式。因为 <code>{@link java.lang.ref.ReferenceQueue#poll ReferenceQueue.poll}</code> 方法仅仅检查内部数据结构，此检查只为哈希表访问方法增加了很小的系统开销。


<h3>自动清除引用</h3>

在将软引用和弱引用添加到向其注册的队列（如果有）之前，回收器将自动清除这些引用。所以，软引用和弱引用不需要向队列注册即可使用，而虚引用则需要这样做。通过虚引用可到达的对象将仍然保持原状，直到清除所有这类引用或者它们本身变得不可到达。


<a name="reachability"></a>
<h3>可到达性</h3>

从最强到最弱，不同的可到达性级别反映了对象的生命周期。在操作上，可将它们定义如下：

<ul>

<li> 如果某一线程可以不必遍历所有引用对象而直接到达一个对象，则该对象是<em>强可到达</em> 对象。新创建的对象对于创建它的线程而言是强可到达对象。

<li> 如果一个对象不是强可到达对象，但通过遍历某一软引用可以到达它，则该对象是<em>软可到达</em> 对象。

<li> 如果一个对象既不是强可到达对象，也不是软可到达对象，但通过遍历弱引用可以到达它，则该对象是<em>弱可到达</em> 对象。当清除对某一弱可到达对象的弱引用时，便可以终止此对象了。

<li> 如果一个对象既不是强可到达对象，也不是软可到达对象或弱可到达对象，它已经终止，并且某个虚引用在引用它，则该对象是<em>虚可到达</em> 对象。

<li> 最后，当不能以上述任何方法到达某一对象时，该对象是<em>不可到达</em> 对象，因此可以回收此对象。

</ul>


@version  1.10, 12/19/03
@author	  Mark Reinhold
@since	  1.2

<!--
<h2>相关文档</h2>

有关概述、教程、示例、指南和工具文档，请参阅：
<ul>
  <li><a href="">##### 这里指向非规范的文档 #####</a>
</ul>
-->

<!-- END DATA -->
