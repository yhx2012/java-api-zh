<!-- BEGIN KEY -->
public class java.lang.ref.ReferenceQueue extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
引用队列，在检测到适当的可到达性更改后，垃圾回收器将已注册的引用对象添加到该队列中。

@version  1.23, 12/19/03
@author   Mark Reinhold
@since    1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.ref.ReferenceQueue()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的引用对象队列。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.ref.Reference<? extends T> java.lang.ref.ReferenceQueue.poll()
<!-- END KEY -->
<!-- BEGIN DATA -->
轮询此队列，查看是否存在可用的引用对象。如果存在一个立即可用的对象，则从该队列中移除此对象并返回。否则此方法立即返回 <tt>null</tt>。

@return  如果存在一个立即可用的对象，则返回该对象。否则返回 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.ref.Reference<? extends T> java.lang.ref.ReferenceQueue.remove(long timeout) throws java.lang.IllegalArgumentException, java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
移除此队列中的下一个引用对象，阻塞到有一个对象变得可用或者给定的超时期满了为止。

<p> 此方法不提供实时保证：它安排了超时时间，就像调用 {@link Object#wait(long)} 方法一样。

@param  timeout  如果为正，则在等待要在此队列中添加的引用时会阻塞 <code>timeout</code> 毫秒。如果超时值为零，则无限期地阻塞。

@return  如果在指定的超时期内有一个引用对象可用，则返回该对象；否则返回 <code>null</code>。

@throws  IllegalArgumentException      如果超时参数的值为负。

@throws  InterruptedException 如果超时等待被中断

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.ref.Reference<? extends T> java.lang.ref.ReferenceQueue.remove() throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
移除此队列中的下一个引用对象，阻塞到某个对象变得可用为止。

@return 某个引用对象，阻塞到某个对象变得可用为止。
@throws  InterruptedException  如果等待被中断

<!-- END DATA -->
