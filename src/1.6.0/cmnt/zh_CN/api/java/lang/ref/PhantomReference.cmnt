<!-- BEGIN KEY -->
public class java.lang.ref.PhantomReference extends java.lang.ref.Reference
<!-- END KEY -->
<!-- BEGIN DATA -->
虚引用对象，在回收器确定其指示对象可另外回收之后，被加入队列。虚引用最常见的用法是以某种可能比使用 Java 终结机制更灵活的方式来指派 pre-mortem 清除动作。

<p> 如果垃圾回收器确定在某一特定时间点上虚引用的指示对象是<a href="package-summary.html#reachability">虚可到达对象</a>，那么在那时或者在以后的某一时间，它会将该引用加入队列。

<p> 为了确保可回收的对象仍然保持原状，虚引用的指示对象不能被获取：虚引用的 <code>get</code> 方法总是返回 <code>null</code>。

<p> 与软引用和弱引用不同，虚引用在加入队列时并没有通过垃圾回收器自动清除。通过虚引用可到达的对象将仍然保持原状，直到所有这类引用都被清除，或者它们都变得不可到达。

@version  1.19, 12/19/03
@author   Mark Reinhold
@since    1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.ref.PhantomReference(T referent, java.lang.ref.ReferenceQueue<? super T> q)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个引用给定对象的新的虚引用，并向给定队列注册它。

<p> 可能用一个 <tt>null</tt> 队列创建虚引用，但这样的引用是完全无用的：其 <tt>get</tt> 方法将总是返回 null，同时，因为它没有队列，所以将永远无法把它加入队列中。

@param referent 新的虚引用将引用的对象
@param q 将向其注册引用的队列，如果不需要注册，则返回 <tt>null</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public T java.lang.ref.PhantomReference.get()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此引用对象的指示对象。因为虚引用的指示对象总是不可到达的，所以此方法总是返回 <code>null</code>。

@return  <code>null</code>

<!-- END DATA -->
