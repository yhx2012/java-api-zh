<!-- BEGIN KEY -->
public class java.lang.ref.SoftReference extends java.lang.ref.Reference
<!-- END KEY -->
<!-- BEGIN DATA -->
软引用对象，在响应内存需要时，由垃圾回收器决定是否清除此对象。软引用对象最常用于实现内存敏感的缓存。

<p> 假定垃圾回收器确定在某一时间点某个对象是<a href="package-summary.html#reachability">软可到达对象</a>。这时，它可以选择自动清除针对该对象的所有软引用，以及通过强引用链，从其可以到达该对象的针对任何其他软可到达对象的所有软引用。在同一时间或晚些时候，它会将那些已经向引用队列注册的新清除的软引用加入队列。

<p> 软可到达对象的所有软引用都要保证在虚拟机抛出 <code>OutOfMemoryError</code> 之前已经被清除。否则，清除软引用的时间或者清除不同对象的一组此类引用的顺序将不受任何约束。然而，虚拟机实现不鼓励清除最近访问或使用过的软引用。

<p> 此类的直接实例可用于实现简单缓存；该类或其派生的子类还可用于更大型的数据结构，以实现更复杂的缓存。只要软引用的指示对象是强可到达对象，即正在实际使用的对象，就不会清除软引用。例如，通过保持最近使用的项的强指示对象，并由垃圾回收器决定是否放弃剩余的项，复杂的缓存可以防止放弃最近使用的项。

@version  1.34, 12/19/03
@author   Mark Reinhold
@since    1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.ref.SoftReference(T referent)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建引用给定对象的新的软引用。新的引用没有向任何队列注册。

@param referent 新的软引用将引用的对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.ref.SoftReference(T referent, java.lang.ref.ReferenceQueue<? super T> q)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个引用给定对象的新的软引用，并向给定队列注册该引用。

@param referent 新的软引用将引用的对象
@param q 该引用向其注册的队列，如果不需要注册，则为 <tt>null</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public T java.lang.ref.SoftReference.get()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此引用对象的指示对象。如果此引用对象已经由程序或垃圾回收器清除，则此方法将返回 <code>null</code>。

@return  此引用所引用的对象；如果此引用对象已经清除，则返回 <code>null</code>。

<!-- END DATA -->
