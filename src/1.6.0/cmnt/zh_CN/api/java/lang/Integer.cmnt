<!-- BEGIN KEY -->
public final class java.lang.Integer extends java.lang.Number implements java.lang.Comparable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Integer</code> 类在对象中包装了一个基本类型 <code>int</code> 的值。<code>Integer</code> 类型的对象包含一个 <code>int</code> 类型的字段。

<p>
 
此外，该类提供了多个方法，能在 <code>int</code> 类型和 <code>String</code> 类型之间互相转换，还提供了处理 <code>int</code> 类型时非常有用的其他一些常量和方法。

<p>实现注意事项：&ldquo;bit twiddling&rdquo;方法（如 {@link #highestOneBit(int) highestOneBit} 和 {@link #numberOfTrailingZeros(int) numberOfTrailingZeros}）的实现基于 Henry S. Warren, Jr.撰写的 <i>Hacker's Delight</i>（Addison Wesley, 2002）中的一些有关材料。

@author  Lee Boynton
@author  Arthur van Hoff
@author  Josh Bloch
@version 1.90, 05/11/04
@since JDK1.0


<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.Integer.MIN_VALUE
<!-- END KEY -->
<!-- BEGIN DATA -->
值为 －2<sup>31</sup> 的常量，它表示 <code>int</code> 类型能够表示的最小值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.Integer.MAX_VALUE
<!-- END KEY -->
<!-- BEGIN DATA -->
值为 2<sup>31</sup>－1 的常量，它表示 <code>int</code> 类型能够表示的最大值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Class<java.lang.Integer> java.lang.Integer.TYPE
<!-- END KEY -->
<!-- BEGIN DATA -->
表示基本类型 <code>int</code> 的 <code>Class</code> 实例。

@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.Integer.SIZE
<!-- END KEY -->
<!-- BEGIN DATA -->
用来以二进制补码形式表示 <tt>int</tt> 值的比特位数。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private final int java.lang.Integer.value
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Integer</code> 的值。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Integer(int value)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新分配的 <code>Integer</code> 对象，它表示指定的 <code>int</code> 值。

@param   value   <code>Integer</code> 对象表示的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Integer(String s) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新分配的 <code>Integer</code> 对象，它表示 <code>String</code> 参数所指示的 <code>int</code> 值。使用与 <code>parseInt</code> 方法（对基数为 10 的值）相同的方式将该字符串转换成 <code>int</code> 值。

@param      s   要转换为 <code>Integer</code> 的 <code>String</code>。
@exception  NumberFormatException  如果 <code>String</code> 不包含可解析的整数。
@see        java.lang.Integer#parseInt(java.lang.String, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.Integer.toString(int i, int radix)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用第二个参数指定基数表示的第一个参数的字符串表示形式。
 <p>
如果基数小于 <code>Character.MIN_RADIX</code> 或者大于 <code>Character.MAX_RADIX</code>，则改用基数 <code>10</code>。
 <p>
如果第一个参数为负，则结果中的第一个元素为 ASCII 的减号 <code>'-'</code> (<code>'\u002D'</code>)。如果第一个参数为非负，则没有符号字符出现在结果中。
 <p>
结果中的剩余字符表示第一个参数的大小。如果大小为零，则用一个零字符 <code>'0'</code> (<code>'\u0030'</code>) 表示；否则，大小的表示形式中的第一个字符将不是零字符。用以下 ASCII 字符作为数字：
 <blockquote><pre>
   0123456789abcdefghijklmnopqrstuvwxyz
 </pre></blockquote>
其范围是从 <code>'\u0030'</code> 到 <code>'\u0039'</code> 和从 <code>'\u0061'</code> 到 <code>'\u007A'</code>。如果 <code>radix</code> 为 <var>N</var>, 则按照所示顺序，使用这些字符中的前 <var>N</var> 个作为其数字。因此，十六进制（基数为 16）的数字是 <code>0123456789abcdef</code>。如果希望得到大写字母，则可以在结果上调用 {@link java.lang.String#toUpperCase()} 方法：
 <blockquote><pre>
 Integer.toString(n, 16).toUpperCase()
 </pre></blockquote>

@param   i       要转换成字符串的整数。
@param   radix   用于字符串表示形式的基数。
@return  使用指定基数的参数的字符串表示形式。
@see     java.lang.Character#MAX_RADIX
@see     java.lang.Character#MIN_RADIX

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.Integer.toHexString(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
以十六进制（基数 16）无符号整数形式返回一个整数参数的字符串表示形式。
 <p>
如果参数为负，那么无符号整数值为参数加上 2<sup>32</sup>；否则等于该参数。将该值转换为十六进制（基数 16）的无前导 <code>0</code> 的 ASCII 数字字符串。如果无符号数的大小值为零，则用一个零字符 <code>'0'</code> (<code>&rsquo;\u0030&rsquo;</code>) 表示它；否则，无符号数大小的表示形式中的第一个字符将不是零字符。用以下字符作为十六进制数字：
 <blockquote><pre>
 0123456789abcdef
 </pre></blockquote>
这些字符的范围是从 <code>'\u0030'</code> 到 <code>'\u0039'</code> 和从 <code>'\u0061'</code> 到 <code>'\u0066'</code>。如果希望得到大写字母，可以在结果上调用 {@link java.lang.String#toUpperCase()} 方法：
 <blockquote><pre>
 Integer.toHexString(n).toUpperCase()
 </pre></blockquote>

@param   i   要转换成字符串的整数。
@return  参数的十六进制（基数 16）无符号整数值的字符串表示形式。
@since   JDK1.0.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.Integer.toOctalString(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
以八进制（基数 8）无符号整数形式返回一个整数参数的字符串表示形式。
<p>
如果参数为负，该无符号整数值为参数加上 2<sup>32</sup>；否则等于该参数。该值被转换成八进制（基数 8）ASCII 数字的字符串，且没有附加前导 <code>0</code>。
<p>
如果无符号数大小为零，则用一个零字符 <code>'0'</code> (<code>'\u0030'</code>) 表示它；否则，无符号数大小的表示形式中的第一个字符将不是零字符。用以下字符作为八进制数字：
<blockquote><pre>
01234567
</pre></blockquote>
它们是从 <code>'\u0030'</code> 到 <code>'\u0037'</code> 的字符。

@param   i   要转换成字符串的整数。
@return  用八进制参数（基数 8）表示的无符号整数值的字符串表示形式。
@since   JDK1.0.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.Integer.toBinaryString(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
以二进制（基数 2）无符号整数形式返回一个整数参数的字符串表示形式。
 <p>
如果参数为负，该无符号整数值为参数加上 2<sup>32</sup>；否则等于该参数。将该值转换为二进制（基数 2）形式的无前导 <code>0</code> 的 ASCII 数字字符串。如果无符号数的大小为零，则用一个零字符 <code>'0'</code> (<code>&rsquo;\u0030&rsquo;</code>) 表示它；否则，无符号数大小的表示形式中的第一个字符将不是零字符。字符 <code>'0'</code> (<code>'\u0030'</code>) 和 <code>'1'</code> (<code>'\u0031'</code>) 被用作二进制数字。

@param   i   要转换为字符串的整数。
@return  用二进制（基数 2）参数表示的无符号整数值的字符串表示形式。
@since   JDK1.0.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.Integer.toString(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个表示指定整数的 <code>String</code> 对象。将该参数转换为有符号的十进制表示形式，以字符串形式返回它，就好像将参数和基数 10 作为参数赋予 {@link #toString(int, int)} 方法。

@param   i   要转换的整数。
@return  十进制（基数 10）参数的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Integer.parseInt(String s, int radix) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用第二个参数指定的基数，将字符串参数解析为有符号的整数。除了第一个字符可以是用来表示负值的 ASCII 减号 <code>'-'</code> (<code>'\u002D&rsquo;</code>)外，字符串中的字符必须都是指定基数的数字（通过 {@link java.lang.Character#digit(char, int)} 是否返回一个负值确定）。返回得到的整数值。 
 <p>
如果发生以下任意一种情况，则抛出一个 <code>NumberFormatException</code> 类型的异常：
 <ul>
<li>第一个参数为 <code>null</code> 或一个长度为零的字符串。
<li>基数小于 {@link java.lang.Character#MIN_RADIX} 或者大于 {@link java.lang.Character#MAX_RADIX}。 
<li>假如字符串的长度超过 1，那么除了第一个字符可以是减号 <code>'-'</code> (<code>'u002D&rsquo;</code>) 外，字符串中存在任意不是由指定基数的数字表示的字符。
<li>字符串表示的值不是 <code>int</code> 类型的值。
 </ul><p>
示例：
<blockquote><pre>
parseInt("0", 10) 返回 0
parseInt("473", 10) 返回 473
parseInt("-0", 10) 返回 0
parseInt("-FF", 16) 返回 -255
parseInt("1100110", 2) 返回 102
parseInt("2147483647", 10) 返回 2147483647
parseInt("-2147483648", 10) 返回 -2147483648
parseInt("2147483648", 10) 抛出 NumberFormatException
parseInt("99", 8) 抛出 NumberFormatException
parseInt("Kona", 10) 抛出 NumberFormatException
parseInt("Kona", 27) 返回 411787
</pre></blockquote>

@param      s   包含要解析的整数表示形式的 <code>String</code>
@param      radix   解析 <code>s</code> 时使用的基数。
@return     使用指定基数的字符串参数表示的整数。
@exception  NumberFormatException 如果 <code>String</code> 不包含可解析的 <code>int</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Integer.parseInt(String s) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符串参数作为有符号的十进制整数进行解析。除了第一个字符可以是用来表示负值的 ASCII 减号 <code>'-'</code> (<code>'\u002D'</code>) 外，字符串中的字符都必须是十进制数字。返回得到的整数值，就好像将该参数和基数 10 作为参数赋予 {@link #parseInt(java.lang.String, int)} 方法一样。

@param s	   包含要解析的 <code>int</code> 表示形式的 <code>String</code>。
@return      用十进制参数表示的整数值。
@exception  NumberFormatException  如果字符串不包含可解析的整数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Integer java.lang.Integer.valueOf(String s, int radix) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>Integer</code> 对象，该对象中保存了用第二个参数提供的基数进行解析时从指定的 <code>String</code> 中提取的值。将第一个参数解释为用第二个参数指定的基数表示的有符号整数，就好像将这些参数赋予 {@link #parseInt(java.lang.String, int)} 方法一样。结果是一个表示字符串指定的整数值的 <code>Integer</code> 对象。
<p>
换句话说，该方法返回一个等于以下值的 <code>Integer</code> 对象：

<blockquote><code>new Integer(Integer.parseInt(s, radix))</code></blockquote>

@param      s   要解析的字符串。
@param      radix 解释 <code>s</code> 时使用的基数。
@return    一个 <code>Integer</code> 对象，它含有字符串参数（以指定的基数）所表示的数值。
@exception NumberFormatException 如果 <code>String</code> 不包含可解析的 <code>int</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Integer java.lang.Integer.valueOf(String s) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回保存指定的 <code>String</code> 的值的 <code>Integer</code> 对象。将该参数解释为表示一个有符号的十进制整数, 就好像将该参数赋予 {@link #parseInt(java.lang.String)} 方法一样。结果是一个表示字符串指定的整数值的 <code>Integer</code> 对象。
<p>
换句话说，该方法返回一个等于以下值的 <code>Integer</code> 对象：

<blockquote><code>new Integer(Integer.parseInt(s))</code></blockquote>

@param      s   要解析的字符串。
@return     保存字符串参数表示的值的 <code>Integer</code> 对象。
@exception  NumberFormatException   如果字符串不能解析为一个整数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Integer java.lang.Integer.valueOf(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个表示指定的 <tt>int</tt> 值的 <tt>Integer</tt> 实例。如果不需要新的 <tt>Integer</tt> 实例，则通常应优先使用该方法，而不是构造方法 {@link #Integer(int)}，因为该方法有可能通过缓存经常请求的值而显著提高空间和时间性能。

@param  i 一个 <code>int</code> 值。
@return 表示 <tt>i</tt> 的 <tt>Integer</tt> 实例。
@since  1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte java.lang.Integer.byteValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>byte</code> 类型返回该 <code>Integer</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public short java.lang.Integer.shortValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>short</code> 类型返回该 <code>Integer</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.Integer.intValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>int</code> 类型返回该 <code>Integer</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.lang.Integer.longValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>long</code> 类型返回该 <code>Integer</code> 的值。
<p>
<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.lang.Integer.floatValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>float</code> 类型返回该 <code>Integer</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.lang.Integer.doubleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 类型返回该 <code>Integer</code> 的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.Integer.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个表示该 <code>Integer</code> 值的 <code>String</code> 对象。将该参数转换为有符号的十进制表示形式，并以字符串的形式返回它，就好像将该整数值作为参数赋予 {@link java.lang.Integer#toString(int)} 方法一样。

@return  该对象的值（基数 10）的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.Integer.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Integer</code> 的哈希码。

@return  该对象的哈希码值，它的值即为该 <code>Integer</code> 对象表示的基本 <code>int</code> 类型的数值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.Integer.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较此对象与指定对象。当且仅当参数不为 <code>null</code>，并且是一个与该对象包含相同 <code>int</code> 值的 <code>Integer</code> 对象时，结果为 <code>true</code>。

@param   obj   要比较的对象。
@return   如果对象相同，则返回 <code>true</code>，否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Integer java.lang.Integer.getInteger(String nm)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定具有指定名称的系统属性的整数值。
 <p>
第一个参数被视为系统属性的名称。通过 {@link java.lang.System#getProperty(java.lang.String)} 方法可以访问系统属性。然后，将该属性的字符串值解释为一个整数值，并返回表示该值的 <code>Integer</code> 对象。使用 <code>getProperty</code> 的定义可以找到可能出现的数字格式的详细信息。 
 <p>
如果没有具有指定名称的属性，或者指定名称为空或 <code>null</code>，或者属性的数字格式不正确，则返回 <code>null</code>。
 <p>
 换句话说，该方法返回一个等于以下值的 <code>Integer</code> 对象：

<blockquote><code>getInteger(nm, null)</code></blockquote>

@param   nm   属性名。
@return  属性的 <code>Integer</code> 值。
@see     java.lang.System#getProperty(java.lang.String)
@see     java.lang.System#getProperty(java.lang.String, java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Integer java.lang.Integer.getInteger(String nm, int val)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定具有指定名称的系统属性的整数值。
 <p>
第一个参数被视为系统属性的名称。通过 {@link java.lang.System#getProperty(java.lang.String)} 方法可以访问系统属性。然后，将该属性的字符串值解释为一个整数值，并返回表示该值的 <code>Integer</code> 对象。使用 <code>getProperty</code> 的定义可以找到可能出现的数字格式的详细信息。 
 <p>
第二个参数是默认值。如果未具有指定名称的属性，或者属性的数字格式不正确，或者指定名称为空或 <code>null</code>，则返回一个表示第二个参数的值的 <code>Integer</code> 对象。
 <p>
 换句话说，该方法返回一个等于以下值的 <code>Integer</code> 对象：
 <blockquote><code>getInteger(nm, new Integer(val))</code></blockquote>
但在实践中可能会用以下类似方式实现它：
 <blockquote><pre>
 Integer result = getInteger(nm, null);
 return (result == null) ? new Integer(val) : result;
 </pre></blockquote>
从而避免在无需默认值时分配不必要的 <code>Integer</code> 对象。 

@param   nm   属性名。
@param   val   默认值。
@return  属性的 <code>Integer</code> 值。
@see     java.lang.System#getProperty(java.lang.String)
@see     java.lang.System#getProperty(java.lang.String, java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Integer java.lang.Integer.getInteger(String nm, Integer val)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回具有指定名称的系统属性的整数值。第一个参数被视为系统属性的名称。通过 {@link java.lang.System#getProperty(java.lang.String)} 方法可以访问系统属性。然后，根据每个 <code>Integer.decode</code> 方法，将该属性的字符串值解释为一个整数值，并返回一个表示该值的 <code>Integer</code> 对象。
 <p>
<ul><li>如果属性值以两个 ASCII 字符 <code>0x</code> 或者 ASCII 字符 <code>#</code> 开始，并且后面没有减号，则将它的剩余部分解析为十六进制整数，就好像以 16 为基数调用 {@link #valueOf(java.lang.String, int)} 方法一样。
<li>如果属性值以 ASCII 字符 <code>0</code> 开始，后面还有其他字符，则将它解析为八进制整数，就好像以 8 为基数调用 {@link #valueOf(java.lang.String, int)} 方法一样。
<li>否则，将属性值解析为十进制整数，就好像以 10 为基数调用 {@link #valueOf(java.lang.String, int)} 方法一样。
 </ul><p>
第二个参数是默认值。如果未具有指定名称的属性，或者属性的数字格式不正确，或者指定名称为空或 <code>null</code>，则返回默认值。

@param   nm   属性名。
@param   val   默认值。
@return  属性的 <code>Integer</code> 值。
@see     java.lang.System#getProperty(java.lang.String)
@see java.lang.System#getProperty(java.lang.String, java.lang.String)
@see java.lang.Integer#decode

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Integer java.lang.Integer.decode(String nm) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>String</code> 解码为 <code>Integer</code>。接受通过以下语法给出的十进制、十六进制和八进制数字：

 <blockquote>
 <dl>
 <dt><i>DecodableString:</i>
 <dd><i>Sign<sub>opt</sub> DecimalNumeral</i>
 <dd><i>Sign<sub>opt</sub></i> <code>0x</code> <i>HexDigits</i>
 <dd><i>Sign<sub>opt</sub></i> <code>0X</code> <i>HexDigits</i>
 <dd><i>Sign<sub>opt</sub></i> <code>#</code> <i>HexDigits</i>
 <dd><i>Sign<sub>opt</sub></i> <code>0</code> <i>OctalDigits</i>
 <p>
 <dt><i>Sign:</i>
 <dd><code>-</code>
 </dl>
 </blockquote>

<a href="http://java.sun.com/docs/books/jls/html/">Java Language Specification</a> 的第 <a href="http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#48282">&sect;3.10.1</a> 节中有 <i>DecimalNumeral</i>、<i>HexDigits</i> 和 <i>OctalDigits</i> 的定义。
<p>
跟在（可选）负号和/或基数说明符（&ldquo;<code>0x</code>&rdquo;、&ldquo;<code>0X</code>&rdquo;、&ldquo;<code>#</code>&rdquo;或前导零）后面的字符序列是使用指示的基数（10、16 或 8）通过 <code>Integer.parseInt</code> 方法解析的。字符序列必须表示一个正值，否则会抛出 {@link NumberFormatException}。如果指定的 <code>String</code> 的第一个字符是减号，则对结果求反。<code>String</code> 中不允许出现空白字符。

@param     nm 要解码的 <code>String</code>。
@return    保存 <code>nm</code> 所表示的 <code>int</code> 值的 <code>Integer</code> 对象。
@exception NumberFormatException  如果 <code>String</code> 不包含可解析整数。
@see java.lang.Integer#parseInt(java.lang.String, int)
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.Integer.compareTo(Integer anotherInteger)
<!-- END KEY -->
<!-- BEGIN DATA -->
在数字上比较两个 <code>Integer</code> 对象。

@param   anotherInteger   要比较的 <code>Integer</code>。
@return	如果该 <code>Integer</code> 等于 <code>Integer</code> 参数，则返回 <code>0</code> 值；如果该 <code>Integer</code> 在数字上小于 <code>Integer</code> 参数，则返回小于 <code>0</code> 的值；如果 <code>Integer</code> 在数字上大于 <code>Integer</code> 参数，则返回大于 <code>0</code> 的值（有符号的比较）。
@since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Integer.highestOneBit(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回具有至多单个 1 位的 <tt>int</tt> 值，在指定的 <tt>int</tt> 值中最高位（最左边）的 1 位的位置。如果指定的值在其二进制补码表示形式中不具有 1 位，即它等于零，则返回零。

@return 返回具有单个 1 位的 <tt>int</tt> 值, 在指定值中最高位的 1 位的位置，否则，如果指定值本身等于零，则返回零。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Integer.lowestOneBit(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回具有至多单个 1 位的 <tt>int</tt> 值，在指定的 <tt>int</tt> 值中最低位（最右边）的 1 位的位置。如果指定的值在其二进制补码表示形式中不具有 1 位，即它等于零，则返回零。

@return 返回具有单个 1 位的 <tt>int</tt> 值, 在指定值中最低位的 1 位的位置，否则，如果指定值本身等于零，则返回零。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Integer.numberOfLeadingZeros(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
在指定 <tt>int</tt> 值的二进制补码表示形式中最高位（最左边）的 1 位之前，返回零位的数量。如果指定值在其二进制补码表示形式中不存在 1 位，换句话说，如果它等于零，则返回 32。

<p>注意，此方法与基数为 2 的对数密切相关。对于所有的正 <tt>int</tt> 值 x：
 <ul>
 <li>floor(log<sub>2</sub>(x)) = <tt>31 - numberOfLeadingZeros(x)</tt>
 <li>ceil(log<sub>2</sub>(x)) = <tt>32 - numberOfLeadingZeros(x - 1)</tt>
 </ul>

@return 返回在指定 <tt>int</tt> 值的二进制补码表示形式中最高位（最左边）的 1 位之前的零位的数量；否则，如果该值等于零，则返回 32。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Integer.numberOfTrailingZeros(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定的 <tt>int</tt> 值的二进制补码表示形式中最低（&ldquo;最右边&rdquo;）的为 1 的位后面的零位个数。如果指定值在它的二进制补码表示形式中没有为 1 的位，即它的值为零，则返回 32。
<p>
@return 返回在指定 <tt>int</tt> 值的二进制补码表示形式中最低位（最右边）的 1 位之后零位的数量；否则，如果该值等于零，则返回 32。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Integer.bitCount(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 <tt>int</tt> 值的二进制补码表示形式的 1 位的数量。此函数有时用于<i>人口普查</i>。

@return 返回指定 <tt>int</tt> 值的二进制补码表示形式的 1 位的数量。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Integer.rotateLeft(int i, int distance)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回根据指定的位数循环左移指定的 <tt>int</tt> 值的二进制补码表示形式而得到的值。（位是从左边（即高位）移出，从右边（即低位）再进入）

<p>注意，使用负距离的左循环等同于右循环：<tt>rotateLeft(val, -distance) == rotateRight(val, distance)</tt>。还要注意的是，以 32 的任何倍数进行的循环都是无操作指令，因此，即使距离为负，除了最后五位外，其余所有循环距离都可以忽略：<tt>rotateLeft(val, distance) == rotateLeft(val, distance &amp; 0x1F)</tt>。

@return 返回根据指定的位数循环左移指定的 <tt>int</tt> 值的二进制补码表示形式而得到的值。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Integer.rotateRight(int i, int distance)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回根据指定的位数循环右移指定的 <tt>int</tt> 值的二进制补码表示形式而得到的值。（位是从右边（即低位）移出，从左边（即高位）再进入）

<p>注意，使用负距离的右循环等同于左循环：<tt>rotateRight(val, -distance) == rotateLeft(val, distance)</tt>。还要注意的是，以 32 的任何倍数进行的循环都是无操作指令，因此，即使距离为负，除了最后五位外，其余所有循环距离都可以忽略：<tt>rotateRight(val, distance) == rotateRight(val, distance &amp; 0x1F)</tt>。

@return 返回根据指定的位数循环右移指定的 <tt>int</tt> 值的二进制补码表示形式而得到的值。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Integer.reverse(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回通过反转指定 <tt>int</tt> 值的二进制补码表示形式中位的顺序而获得的值。

@return 返回通过反转指定 <tt>int</tt> 值中位的顺序而获得的值。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Integer.signum(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 <tt>int</tt> 值的符号函数。（如果指定值为负，则返回 －1；如果指定值为零，则返回 0；如果指定的值为正，则返回 1。）

@return 返回指定 <tt>int</tt> 值的符号函数。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Integer.reverseBytes(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回通过反转指定 <tt>int</tt> 值的二进制补码表示形式中字节的顺序而获得的值。

@return 返回通过反转指定 <tt>int</tt> 值的字节而获得的值。
@since 1.5

<!-- END DATA -->
