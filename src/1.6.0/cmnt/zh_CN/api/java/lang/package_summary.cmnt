<!-- BEGIN KEY -->
java.lang
<!-- END KEY -->
<!-- BEGIN DATA -->


提供利用 Java 编程语言进行程序设计的基础类。最重要的类是 <code>Object</code>（它是类层次结构的根）和 <code>Class</code>（它的实例表示正在运行的应用程序中的类）。
<p>
把基本类型的值当成一个对象来表示通常很有必要。包装器类 <code>Boolean</code>、<code>Character</code>、<code>Integer</code>、<code>Long</code>、<code>Float</code> 和 <code>Double</code> 就是用于这个目的。例如，一个 <code>Double</code> 类型的对象包含了一个类型为 double 的字段，这表示如果引用某个值，则可以将该值存储在引用类型的变量中。这些类还提供了大量用于转换基值的方法，并支持一些标准方法，比如 equals 和 hashCode。<code>Void</code> 类是一个非实例化的类，它保持一个对表示基本类型 void 的 <code>Class</code> 对象的引用。
<p>
类 <code>Math</code> 提供了常用的数学函数，比如正弦、余弦和平方根。类似地，类 <code>String</code> 和 <code>StringBuffer</code> 提供了常用的字符串操作。
<p>
类 <code>ClassLoader</code>、<code>Process</code>、<code>Runtime</code>、<code>SecurityManager</code> 和 <code>System</code> 提供了管理类的动态加载、外部进程创建、主机环境查询（比如时间）和安全策略实施等&ldquo;系统操作&rdquo;。
<p>
类 <code>Throwable</code> 包含了可能由 throw 语句抛出的对象(&sect;14.16)。<code>Throwable</code> 的子类表示错误和异常。
<p>
<h2>包规范</h2>


<a name="charenc"></a>
<h3>字符编码</h3>

{@link java.nio.charset.Charset java.nio.charset.Charset} 类的规范描述了字符编码的命名约定，以及每个 Java 平台实现必须支持的标准编码集。


<!--
<ul>
  <li><a href="">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a>
</ul>

<h2>Related Documentation</h2>

For overviews, tutorials, examples, guides, and tool documentation, please see:
<ul>
  <li><a href="">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a>
</ul>
-->

@since JDK1.0

<!-- END DATA -->