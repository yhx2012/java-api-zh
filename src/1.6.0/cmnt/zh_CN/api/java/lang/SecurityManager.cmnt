<!-- BEGIN KEY -->
public class java.lang.SecurityManager extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
安全管理器是一个允许应用程序实现安全策略的类。它允许应用程序在执行一个可能不安全或敏感的操作前确定该操作是什么，以及是否是在允许执行该操作的安全上下文中执行它。应用程序可以允许或不允许该操作。
 <p>
<code>SecurityManager</code> 类包含了很多名称以单词 <code>check</code> 开头的方法。Java 库中的各种方法在执行某些潜在的敏感操作前可以调用这些方法。对 <code>check</code> 方法的典型调用如下：
 <p><blockquote><pre>
     SecurityManager security = System.getSecurityManager();
     if (security != null) {
         security.check<i>XXX</i>(argument, &nbsp;.&nbsp;.&nbsp;.&nbsp;);
     }
 </pre></blockquote>
 <p>
因此，安全管理器通过抛出异常来提供阻止操作完成的机会。如果允许执行该操作，则安全管理器例程只是简单地返回，但如果不允许执行该操作，则抛出一个 <code>SecurityException</code>。该约定的唯一例外是 <code>checkTopLevelWindow</code>，它返回 <code>boolean</code> 值。
 <p>
当前的安全管理器由 <code>System</code> 类中的 <code>setSecurityManager</code> 方法设置。当前的安全管理器由 <code>getSecurityManager</code> 方法获得。
 <p> 
特殊方法 {@link SecurityManager#checkPermission(java.security.Permission)} 确定是应该允许还是拒绝由指定权限所指示的访问请求。默认的实现调用
 
 <pre>
   AccessController.checkPermission(perm);
 </pre>

 <p> 
如果允许访问请求，则安静地返回 <code>checkPermission</code>。如果拒绝访问请求，则抛出 <code>SecurityException</code>。 
 <p>
从 Java 2 SDK v1.2 开始，<code>SecurityManager</code> 中其他所有 <code>check</code> 方法的默认实现都是调用 <code>SecurityManager checkPermission</code> 方法来确定调用线程是否具有执行所请求操作的权限。
 <p> 
注意，只带有单个权限参数的 <code>checkPermission</code> 方法总是在当前执行的线程上下文中执行安全检查。有时，应该在给定上下文中进行的安全检查实际上需要在<i>不同</i> 的上下文（例如，在一个辅助线程中）中进行。Java 为这种情况提供了包含有上下文参数的 {@link SecurityManager#getSecurityContext getSecurityContext} 方法和 {@link SecurityManager#checkPermission(java.security.Permission, java.lang.Object) checkPermission} 方法。<code>getSecurityContext</code> 方法返回当前调用上下文的一个&ldquo;快照&rdquo;（默认的实现返回一个 AccessControlContext 对象）。下面是一个示例调用：
 
 <pre>
   Object context = null;
   SecurityManager sm = System.getSecurityManager();
   if (sm != null) context = sm.getSecurityContext(); 
 </pre>
 
 <p>
<code>checkPermission</code> 方法使用一个上下文对象，以及根据该上下文而不是当前执行线程的上下文作出访问决策的权限。因此另一个上下文中的代码可以调用此方法，传递权限和以前保存的上下文对象。下面是一个示例调用，它使用了以前示例中获得的 SecurityManager <code>sm</code>：
 
 <pre>
   if (sm != null) sm.checkPermission(permission, context);
 </pre> 

<p>权限分为以下类别：文件、套接字、网络、安全性、运行时、属性、AWT、反射和可序列化。管理各种权限类别的类是 <code>java.io.FilePermission</code>、<code>java.net.SocketPermission</code>、<code>java.net.NetPermission</code>、<code>java.security.SecurityPermission</code>、<code>java.lang.RuntimePermission</code>、<code>java.util.PropertyPermission</code>、<code>java.awt.AWTPermission</code>、<code>java.lang.reflect.ReflectPermission</code> 和 <code>java.io.SerializablePermission</code>。 
 
<p>除前两个（FilePermission 和 SocketPermission）类以外的所有类都是 <code>java.security.BasicPermission</code> 的子类，而 <code>java.security.BasicPermission</code> 类又是顶级权限类 <code>java.security.Permission</code> 的抽象子类。BasicPermission 定义了所有权限所需的功能，这些功能的名称遵从分层属性命名惯例（例如&ldquo;exitVM&rdquo;、&ldquo;setFactory&rdquo;、&ldquo;queuePrintJob&rdquo;等等）。在名称的末尾可能出现一个星号，前面是&ldquo;.&rdquo;或星号，这表示通配符匹配。例如：&ldquo;a.*&rdquo;、&ldquo;*&rdquo;是有效的，而&ldquo;*a&rdquo;或&ldquo;a*b&rdquo;是无效的。

<p>FilePermission 和 SocketPermission 是顶级权限类 (<code>java.security.Permission</code>) 的子类。像这些命名语法比 BasicPermission 所用的语法更为复杂的类都直接是 Permission 的子类，而不是 BasicPermission 的子类。例如，对于 <code>java.io.FilePermission</code> 对象而言，权限名就是文件（或目录）的路径名。

<p>某些权限类具有一个&ldquo;动作&rdquo;列表，告知允许对象所执行的动作。例如，对于 <code>java.io.FilePermission</code> 对象，动作列表（如&ldquo;读、写&rdquo;）指定了允许对指定文件（或指定目录中的文件）执行哪些动作。
 
<p>其他权限类是&ldquo;指定的&rdquo;权限 - 有名称但没有动作列表的类；您也许有指定的权限，也许没有。
 
<p>注：还有一个暗指所有权限的 <code>java.security.AllPermission</code> 权限。该权限是为了简化系统管理员的工作而存在的，因为管理员可能需要执行很多需要所有（或许多）权限的任务。
 <p>
有关权限相关的信息，请参阅 <a href ="../../../technotes/guides/security/permissions.html">。例如，本文档包括一个列出各种 SecurityManager 的 <code>check</code> 方法和每个方法的默认实现所需的权限表。它还包含了版本 1.2 方法所需权限和每个方法需要哪些权限的表。
 <p>
有关 JDK 中对 <code>SecurityManager</code> 所作更改的更多信息和关于 1.1 风格安全管理器移植的建议，请参阅 <a href="../../../technotes/guides/security/index.html">security documentation</a>。

@author  Arthur van Hoff
@author  Roland Schemers


@version 1.136, 06/28/04
@see     java.lang.ClassLoader
@see     java.lang.SecurityException
@see     java.lang.SecurityManager#checkTopLevelWindow(java.lang.Object) checkTopLevelWindow
@see     java.lang.System#getSecurityManager() getSecurityManager
@see     java.lang.System#setSecurityManager(java.lang.SecurityManager) setSecurityManager
@see     java.security.AccessController AccessController
@see     java.security.AccessControlContext AccessControlContext
@see     java.security.AccessControlException AccessControlException
@see     java.security.Permission
@see     java.security.BasicPermission
@see     java.io.FilePermission
@see     java.net.SocketPermission
@see     java.util.PropertyPermission
@see     java.lang.RuntimePermission
@see     java.awt.AWTPermission
@see     java.security.Policy Policy
@see     java.security.SecurityPermission SecurityPermission
@see     java.security.ProtectionDomain


@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.lang.SecurityManager.inCheck
<!-- END KEY -->
<!-- BEGIN DATA -->
如果安全检查正在进行，则该字段为 <code>true</code>；否则为 <code>false</code>。

@deprecated 建议不使用该类型的安全检查。建议使用 <code>checkPermission</code> 调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.SecurityManager()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的 <code>SecurityManager</code>。

<p> 如果已经安装了一个安全管理器，则此方法首先用 <code>RuntimePermission("createSecurityManager")</code> 权限调用此安全管理器的 <code>checkPermission</code> 方法，确保调用线程具有创建新安全管理器的权限。这可能导致抛出 <code>SecurityException</code>。

@exception  java.lang.SecurityException 如果安全管理器已存在，并且其 <code>checkPermission</code> 方法不允许创建新安全管理器。
@see        java.lang.System#getSecurityManager()
@see        #checkPermission(java.security.Permission) checkPermission
@see java.lang.RuntimePermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.SecurityManager.getInCheck()
<!-- END KEY -->
<!-- BEGIN DATA -->

测试安全检查是否正在进行。

@return  <code>inCheck</code> 字段的值。如果安全检查正在进行，则该字段应该为 <code>true</code>，否则应该为 <code>false</code>。
@see     java.lang.SecurityManager#inCheck
@deprecated 建议不使用该类安全检查。建议使用 <code>checkPermission</code> 调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected native java.lang.Class[] java.lang.SecurityManager.getClassContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
以类数组的形式返回当前执行堆栈。 
 <p>
数组的长度是执行堆栈中的方法数。索引 <code>0</code> 指定的元素是当前执行方法的类，索引 <code>1</code> 指定的元素是该方法调用方的类，依此类推。 

@return  执行堆栈。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.ClassLoader java.lang.SecurityManager.currentClassLoader()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最近执行的、使用非系统类加载器定义的类方法的类加载器。非系统类加载器被定义为一种不同于系统类加载器（由 {@link ClassLoader#getSystemClassLoader} 返回）或其祖先之一的类加载器。
 <p>
在以下三种情况中，此方法将返回 <code>null</code>：<p>
 <ol>
<li>执行堆栈中的所有方法都来自于使用系统类加载器或其祖先之一所定义的类。

<li>在执行堆栈中，直到第一个&ldquo;特权&rdquo;调用方（参见 {@link java.security.AccessController#doPrivileged}）为止的所有方法都来自于使用系统类加载器或其祖先之一所定义的类。

<li> 使用 <code>java.security.AllPermission</code> 调用 <code>checkPermission</code> 不会导致 SecurityException。 

 </ol>

@return  最近执行的、使用非系统类加载器定义的类方法堆栈中的类加载器。

@deprecated 建议不使用该类安全检查。建议使用 <code>checkPermission</code> 调用。
 
@see  java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader
@see  #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Class<?> java.lang.SecurityManager.currentLoadedClass()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最近执行的、使用非系统类加载器定义的类方法的类。非系统类加载器被定义为一种不同于系统类加载器（由 {@link ClassLoader#getSystemClassLoader} 返回）或其祖先之一的类加载器。
 <p>
在以下三种情况中，此方法将返回 <code>null</code>：<p>
 <ol>
<li>执行堆栈中的所有方法都来自于使用系统类加载器或其祖先之一所定义的类。

<li>在执行堆栈中，直到第一个&ldquo;特权&rdquo;调用方（参见 {@link java.security.AccessController#doPrivileged}）为止的所有方法都来自于使用系统类加载器或其祖先之一所定义的类。

<li> 使用 <code>java.security.AllPermission</code> 调用 <code>checkPermission</code> 不会导致 SecurityException。 

 </ol>

@return  最近出现的、使用非系统类加载器定义的类方法堆栈中的类。

@deprecated 建议不使用该类安全检查。建议使用 <code>checkPermission</code> 调用。
 

@see  java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader
@see  #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
protected native int java.lang.SecurityManager.classDepth(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定类的堆栈深度。 

@param   name   要查找的类的完全限定名。
@return  在指定名称的类中第一个方法出现的堆栈帧深度；如未找到这样的帧，则返回 <code>-1</code>。
@deprecated 建议不使用该类安全检查。建议使用 <code>checkPermission</code> 调用。


<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.lang.SecurityManager.classLoaderDepth()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最近执行的、使用非系统类加载器定义的类方法的堆栈深度。非系统类加载器被定义为一种不同于系统类加载器（由 {@link ClassLoader#getSystemClassLoader} 返回）或其祖先之一的类加载器。
 <p>
在以下三种情况中，此方法将返回 -1：<p>
 <ol>
<li>执行堆栈中的所有方法都来自于使用系统类加载器或其祖先之一所定义的类。

<li>在执行堆栈中，直到第一个&ldquo;特权&rdquo;调用方（参见 {@link java.security.AccessController#doPrivileged}）为止的所有方法都来自于使用系统类加载器或其祖先之一所定义的类。

<li> 使用 <code>java.security.AllPermission</code> 调用 <code>checkPermission</code> 不会导致 SecurityException。

 </ol>

@return  最近出现的、使用非系统类加载器定义的类方法的堆栈帧深度。

@deprecated 建议不使用该类安全检查。建议使用 <code>checkPermission</code> 调用。
 

@see   java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader
@see   #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.lang.SecurityManager.inClass(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试具有指定名称的类方法是否处于执行堆栈中。

@param   name   该类的完全限定名。
@return 如果具有指定名称的类方法处于执行堆栈中，则返回 <code>true</code>；否则返回 <code>false</code>。
@deprecated 建议不使用该类安全检查。建议使用 <code>checkPermission</code> 调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.lang.SecurityManager.inClassLoader()
<!-- END KEY -->
<!-- BEGIN DATA -->
主要是测试某个使用类加载器定义的类方法是否处于执行堆栈中。

@return  如果调用 <code>currentClassLoader</code> 具有非 null 的返回值，则返回 <code>true</code>。
@deprecated 建议不使用该类安全检查。建议使用 <code>checkPermission</code> 调用。
@see        #currentClassLoader() currentClassLoader 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.lang.SecurityManager.getSecurityContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个封装当前执行环境的对象。例如，此方法的结果由带有三参数的 <code>checkConnect</code> 方法和带有两参数的 <code>checkRead</code> 方法使用。这些方法是必需的，因为一个受信任的方法可能代表另一方法被调用，以读取一个文件或打开一个套接字。受信任的方法需要确定是否允许另一个方法（可能不受信任）独自执行该操作。   
<p> 此方法的默认实现是返回 <code>AccessControlContext</code> 对象。

@return  一个取决于实现的对象，该对象封装了有关当前执行环境的足够信息，这些信息用于稍后执行某些安全检查。
@see     java.lang.SecurityManager#checkConnect(java.lang.String, int, java.lang.Object) checkConnect
@see     java.lang.SecurityManager#checkRead(java.lang.String, java.lang.Object) checkRead
@see     java.security.AccessControlContext AccessControlContext

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkPermission(Permission perm)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果基于当前有效的安全策略，不允许执行根据给定权限所指定的请求访问，则抛出 <code>SecurityException</code>。
 <p>
此方法使用给定的权限调用 <code>AccessController.checkPermission</code>。

@param     perm   请求的权限。
@exception SecurityException 如果根据当前的安全策略不允许进行访问。
@exception NullPointerException 如果 permission 参数为 <code>null</code>。
@since     1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkPermission(Permission perm, Object context)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果拒绝指定的安全上下文访问由给定权限所指定的资源，则抛出 <code>SecurityException</code>。该上下文必须是一个通过以前调用 <code>getSecurityContext</code> 所返回的安全上下文，并且应该根据为该安全上下文所配置的安全策略来作出访问控制决策。
 <p>
如果 <code>context</code> 是 <code>AccessControlContext</code> 的一个实例，则用指定的权限调用 <code>AccessControlContext.checkPermission</code> 方法。
 <p>
如果 <code>context</code> 不是 <code>AccessControlContext</code> 的一个实例，则抛出 <code>SecurityException</code>。 

@param      perm      指定的权限。
@param      context   一个取决于系统的安全上下文。
@exception  SecurityException  如果指定的安全上下文不是 <code>AccessControlContext</code> 的一个实例（如为 <code>null</code>），或者访问由给定权限所指定的资源时被拒绝。
@exception NullPointerException 如果权限参数为 <code>null</code>。
@see        java.lang.SecurityManager#getSecurityContext()
@see java.security.AccessControlContext#checkPermission(java.security.Permission)
@since      1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkCreateClassLoader()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程创建新的类加载器，则抛出 <code>SecurityException</code>。 
 <p>
此方法用 <code>RuntimePermission(&quot;createClassLoader&quot;)</code> 权限调用 <code>checkPermission</code>。
 <p>
如果重写此方法，那么应该在已重写方法通常将要抛出异常时调用 <code>super.checkCreateClassLoader</code>。

@exception SecurityException 如果调用线程没有创建新类加载器的权限。
@see        java.lang.ClassLoader#ClassLoader()
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkAccess(Thread t)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程修改 thread 参数，则抛出 <code>SecurityException</code>。
 <p>
由 <code>Thread</code> 类的 <code>stop</code>、<code>suspend</code>、<code>resume</code>、<code>setPriority</code>、<code>setName</code> 和 <code>setDaemon</code> 方法为当前的安全管理器调用此方法。
 <p>
如果 thread 参数是一个系统线程（属于具有一个 <code>null</code> 父线程的线程组），那么此方法使用 <code>RuntimePermission(&quot;modifyThread&quot;)</code> 权限调用 <code>checkPermission</code>。如果 thread 参数<i>不</i> 是一个系统线程，则此方法不执行任何操作。
 <p>
希望具有更为严格策略的应用程序应该重写此方法。如果重写此方法，那么重写它的方法应该进行额外的检查，查看调用线程是否具有 <code>RuntimePermission(&quot;modifyThread&quot;)</code> 权限，如果是，则此方法不执行任何操作。这样做是为了确保允许那些被授予该权限的代码（如 JDK 本身）能够操作所有线程。
 <p>
如果重写此方法，那么应该由已重写方法中的第一条语句调用 <code>super.checkAccess</code>，或者应该在已重写方法中放入等效的安全检查代码。

@param      t   要检查的线程。
@exception  SecurityException  如果调用线程没有修改线程的权限。
@exception NullPointerException 如果线程参数为 <code>null</code>。
@see        java.lang.Thread#resume() resume
@see        java.lang.Thread#setDaemon(boolean) setDaemon
@see        java.lang.Thread#setName(java.lang.String) setName
@see        java.lang.Thread#setPriority(int) setPriority
@see        java.lang.Thread#stop() stop
@see        java.lang.Thread#suspend() suspend
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkAccess(ThreadGroup g)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程修改线程组参数，则抛出 <code>SecurityException</code>。
 <p>
当创建新的子线程或子线程组时，由 <code>ThreadGroup</code> 类的 <code>setDaemon</code>、<code>setMaxPriority</code>、<code>stop</code>、<code>suspend</code>、<code>resume</code> 和 <code>destroy</code> 方法为当前的安全管理器调用此方法。
 <p>
如果该线程组是一个系统线程组（具有 <code>null</code> 父线程），那么此方法使用 <code>RuntimePermission(&quot;modifyThreadGroup&quot;)</code> 权限调用 <code>checkPermission</code>。如果该线程组<i>不</i> 是一个系统线程组，则此方法不执行任何操作。
 <p>
希望具有更为严格策略的应用程序应该重写此方法。如果重写此方法，那么重写它的方法应该进行额外的检查，查看调用线程是否具有 <code>RuntimePermission(&quot;modifyThreadGroup&quot;)</code> 权限，如果是，则此方法不执行任何操作。这样做是为了确保允许那些被授予该权限的代码（如 JDK 本身）能够操作所有线程。
 <p>
如果重写此方法，那么应该由已重写方法中的第一条语句调用 <code>super.checkAccess</code>，或者应该在已重写方法中放入等效的安全检查。

@param      g   要检查的线程组。
@exception  SecurityException  如果调用线程没有修改线程组的权限。
@exception NullPointerException 如果线程组参数为 <code>null</code>。
@see        java.lang.ThreadGroup#destroy() destroy
@see        java.lang.ThreadGroup#resume() resume
@see        java.lang.ThreadGroup#setDaemon(boolean) setDaemon
@see        java.lang.ThreadGroup#setMaxPriority(int) setMaxPriority
@see        java.lang.ThreadGroup#stop() stop
@see        java.lang.ThreadGroup#suspend() suspend
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkExit(int status)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程使用特定的状态码暂停 Java 虚拟机，则抛出 <code>SecurityException</code>。
 <p>
由 <code>Runtime</code> 类的 <code>exit</code> 方法为当前的安全管理器调用此方法。状态 <code>0</code> 表示成功，其他值则表示各种错误。
 <p>
此方法用 <code>RuntimePermission("exitVM."+status)</code> 权限调用 <code>checkPermission</code>。
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkExit</code>。

@param      status   退出状态。
@exception SecurityException 如果调用线程没有用指定的状态暂停 Java 虚拟机的权限。
@see        java.lang.Runtime#exit(int) exit
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkExec(String cmd)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程创建一个子进程，则抛出 <code>SecurityException</code>。
 <p>
由 <code>Runtime</code> 类的 <code>exec</code> 方法为当前的安全管理器调用此方法。
 <p>
如果 cmd 是绝对路径，那么此方法使用 <code>FilePermission(cmd,&quot;execute&quot;)</code> 权限调用 <code>checkPermission</code>，否则用 <code>FilePermission(&quot;&lt;&lt;ALL FILES&gt;&gt;&quot;,&quot;execute&quot;)</code> 权限调用 <code>checkPermission</code>。
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkExec</code>。

@param      cmd   指定的系统命令。
@exception  SecurityException 如果调用线程没有创建子进程的权限。
@exception  NullPointerException 如果 <code>cmd</code> 参数为 <code>null</code>。
@see     java.lang.Runtime#exec(java.lang.String)
@see     java.lang.Runtime#exec(java.lang.String, java.lang.String[])
@see     java.lang.Runtime#exec(java.lang.String[])
@see     java.lang.Runtime#exec(java.lang.String[], java.lang.String[])
@see     #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkLink(String lib)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程动态链接由字符串参数文件指定的库代码，则抛出 <code>SecurityException</code>。此方法中的参数可以是一个简单的库名，或者是一个完整的文件名。
 <p>
由 <code>Runtime</code> 类的 <code>load</code> 和 <code>loadLibrary</code> 方法为当前的安全管理器调用此方法。
 <p>
此方法用 <code>RuntimePermission(&quot;loadLibrary.&quot;+lib)</code> 权限调用 <code>checkPermission</code>。
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkLink</code>。

@param      lib   库名。
@exception  SecurityException 如果调用线程没有动态地链接该库的权限。
@exception  NullPointerException 如果 <code>lib</code> 参数为 <code>null</code>。
@see        java.lang.Runtime#load(java.lang.String)
@see        java.lang.Runtime#loadLibrary(java.lang.String)
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkRead(FileDescriptor fd)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程从指定的文件描述符进行读取，则抛出 <code>SecurityException</code>。
 <p>
此方法用 <code>RuntimePermission(&quot;readFileDescriptor&quot;)</code> 权限调用 <code>checkPermission</code>。
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkRead</code>。

@param      fd   取决于系统的文件描述符。
@exception  SecurityException  如果调用线程没有访问指定文件描述符的权限。
@exception  NullPointerException 如果文件描述符参数为 <code>null</code>。
@see        java.io.FileDescriptor
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkRead(String file)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程读取由字符串参数指定的文件，则抛出 <code>SecurityException</code>。
 <p>
此方法用 <code>FilePermission(file,&quot;read&quot;)</code> 权限调用 <code>checkPermission</code>。
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkRead</code>。

@param      file   取决于系统的文件名。
@exception  SecurityException 如果调用线程没有访问指定文件的权限。
@exception  NullPointerException 如果 <code>file</code> 参数为 <code>null</code>。
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkRead(String file, Object context)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许指定的安全上下文读取由字符串参数所指定的文件，则抛出 <code>SecurityException</code>。该上下文必须是以前调用 <code>getSecurityContext</code> 所返回的安全上下文。 
<p> 如果 <code>context</code> 是 <code>AccessControlContext</code> 的一个实例，则用 <code>FilePermission(file,&quot;read&quot;)</code> 权限调用 <code>AccessControlContext.checkPermission</code> 方法。
<p> 如果 <code>context</code> 不是 <code>AccessControlContext</code> 的一个实例，则抛出 <code>SecurityException</code>。
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkRead</code>。

@param      file   取决于系统的文件名。
@param      context   取决于系统的安全上下文。
@exception  SecurityException  如果指定的安全上下文不是 <code>AccessControlContext</code> 的一个实例（如为 <code>null</code>），或者没有读取指定文件的权限。
@exception  NullPointerException 如果 <code>file</code> 参数为 <code>null</code>。
@see        java.lang.SecurityManager#getSecurityContext()
@see        java.security.AccessControlContext#checkPermission(java.security.Permission)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkWrite(FileDescriptor fd)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程写入指定的文件描述符，则抛出 <code>SecurityException</code>。
 <p>
此方法用 <code>RuntimePermission(&quot;writeFileDescriptor&quot;)</code> 权限调用 <code>checkPermission</code>。
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkWrite</code>。

@param      fd   取决于系统的文件描述符。
@exception SecurityException  如果调用的方法没有访问指定文件描述符的权限。
@exception  NullPointerException 如果文件描述符参数为 <code>null</code>。
@see        java.io.FileDescriptor
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkWrite(String file)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程写由字符串参数指定的文件，则抛出 <code>SecurityException</code>。
 <p>
此方法用 <code>FilePermission(file,&quot;write&quot;)</code> 权限调用 <code>checkPermission</code>。
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkWrite</code>。

@param      file   取决于系统的文件名。
@exception  SecurityException 如果调用线程没有访问指定文件的权限。
@exception  NullPointerException 如果 <code>file</code> 参数为 <code>null</code>。
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkDelete(String file)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程删除指定的文件，则抛出 <code>SecurityException</code>。
 <p>
由 <code>File</code> 类的 <code>delete</code> 方法为当前的安全管理器调用此方法。
 <p>
此方法用 <code>FilePermission(file,&quot;delete&quot;)</code> 权限调用 <code>checkPermission</code>。
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkDelete</code>。

@param      file   取决于系统的文件名。
@exception  SecurityException  如果调用线程没有删除文件的权限。
@exception  NullPointerException 如果 <code>file</code> 参数为 <code>null</code>。
@see        java.io.File#delete()
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkConnect(String host, int port)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程打开到指定主机和端口号的套接字连接，则抛出 <code>SecurityException</code>。
 <p>
端口号 <code>-1</code> 表示调用的方法正在试图确定指定主机名的 IP 地址。
 <p>
如果端口号不等于 -1，则此方法用 <code>SocketPermission(host+&quot;:&quot;+port,&quot;connect&quot;)</code> 权限调用 <code>checkPermission</code>。如果端口号等于 -1，则用 <code>SocketPermission(host,&quot;resolve&quot;)</code> 权限调用 <code>checkPermission</code>。
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkConnect</code>。

@param      host   要连接的主机名端口。
@param      port   要连接的协议端口。
@exception  SecurityException  如果不允许调用线程打开与指定 <code>host</code> 和 <code>port</code> 的套接字连接。
@exception  NullPointerException 如果 <code>host</code> 参数为 <code>null</code>。
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkConnect(String host, int port, Object context)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许指定的安全上下文打开与指定主机和端口号的套接字连接，则抛出 <code>SecurityException</code>。
 <p>
端口号 <code>-1</code> 表示调用的方法正试图确定指定主机名的 IP 地址。
<p> 如果 <code>context</code> 不是 <code>AccessControlContext</code> 的一个实例，则抛出 <code>SecurityException</code>。
 <p>
否则就检查端口号。如果端口号不等于 -1，则用 <code>SocketPermission(host+&quot;:&quot;+port,&quot;connect&quot;)</code> 权限调用 <code>context</code> 的 <code>checkPermission</code> 方法。如果端口号等于 -1，则用 <code>SocketPermission(host,&quot;resolve&quot;)</code> 权限调用 <code>context</code> 的 <code>checkPermission</code> 方法。
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkConnect</code>。

@param      host   要连接的主机名端口。
@param      port   要连接的协议端口。
@param      context   取决于系统的安全上下文。
@exception  SecurityException 如果指定的安全上下文不是 <code>AccessControlContext</code>的一个实例（如为 <code>null</code>），或者不允许打开与指定 <code>host</code> 和 <code>port</code> 套接字连接。
@exception  NullPointerException 如果 <code>host</code> 参数为 <code>null</code>。
@see        java.lang.SecurityManager#getSecurityContext()
@see        java.security.AccessControlContext#checkPermission(java.security.Permission)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkListen(int port)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程等待与指定本地端口号进行连接的请求，则抛出 <code>SecurityException</code>。
 <p>
如果端口号不是 0，则此方法用 <code>SocketPermission(&quot;localhost:&quot;+port,&quot;listen&quot;)</code> 调用 <code>checkPermission</code>。如果端口号是 0，则此方法用 <code>SocketPermission(&quot;localhost:1024-&quot;,&quot;listen&quot;)</code> 调用 <code>checkPermission</code>。
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkListen</code>。

@param      port   本地端口。
@exception  SecurityException  如果调用的方法没有侦听指定端口的权限。
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkAccept(String host, int port)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程从指定的主机和端口号接受套接字连接，则抛出 <code>SecurityException</code>。
 <p>
由 <code>ServerSocket</code> 类的 <code>accept</code> 方法为当前的安全管理器调用此方法。
 <p>
此方法用 <code>SocketPermission(host+&quot;:&quot;+port,&quot;accept&quot;)</code> 权限调用 <code>checkPermission</code>。
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkAccept</code>。

@param      host   套接字连接的主机名。
@param      port   套接字连接的端口号。
@exception  SecurityException  如果调用线程没有接受连接的权限。
@exception  NullPointerException 如果 <code>host</code> 参数为 <code>null</code>。
@see        java.net.ServerSocket#accept()
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkMulticast(InetAddress maddr)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程使用（加入/离开/发送/接收）IP 多址广播，则抛出 <code>SecurityException</code>。
 <p>
此方法使用 <code>java.net.SocketPermission(maddr.getHostAddress(), &quot;accept,connect&quot;)</code> 权限调用 <code>checkPermission</code>。
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkMulticast</code>。

@param      maddr  要使用的 Internet 组地址。
@exception  SecurityException  如果不允许调用线程使用（加入/离开/发送/接收）IP 多址广播。
@exception  NullPointerException 如果地址参数为 <code>null</code>。
@since      JDK1.1
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkMulticast(InetAddress maddr, byte ttl)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程使用（加入/离开/发送/接收）IP 多址广播，则抛出 <code>SecurityException</code>。
 <p>
此方法用 <code>java.net.SocketPermission(maddr.getHostAddress(), &quot;accept,connect&quot;)</code> 权限调用 <code>checkPermission</code>。 
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkMulticast</code>。

@param      maddr  要使用的 Internet 组地址。
@param      ttl      正在使用的值，如果是用多址广播发送的话。注：此特定实现不使用 ttl 参数。
@exception  SecurityException  如果不允许调用线程使用（加入/离开/发送/接收）IP 多址广播。
@exception  NullPointerException 如果地址参数为 <code>null</code>。
@since      JDK1.1
@deprecated 由 #checkPermission(java.security.Permission) 取代
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkPropertiesAccess()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程访问或修改系统属性，则抛出 <code>SecurityException</code>。
 <p>
由 <code>System</code> 类的 <code>getProperties</code> 和 <code>setProperties</code> 方法使用此方法。
 <p>
此方法用 <code>PropertyPermission(&quot;*&quot;, &quot;read,write&quot;)</code> 权限调用 <code>checkPermission</code>。
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkPropertiesAccess</code>。
 <p>

@exception SecurityException  如果调用线程没有访问或修改系统属性的权限。
@see        java.lang.System#getProperties()
@see        java.lang.System#setProperties(java.util.Properties)
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkPropertyAccess(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程访问具有指定的 <code>key</code> 名的系统属性，则抛出 <code>SecurityException</code>。
 <p>
由 <code>System</code> 类的 <code>getProperty</code> 方法使用此方法。
 <p>
此方法用 <code>PropertyPermission(key, &quot;read&quot;)</code> 权限调用 <code>checkPermission</code>。
 <p>
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkPropertyAccess</code>。

@param      key   系统属性键。

@exception  SecurityException 如果调用线程没有访问指定系统属性的权限。
@exception  NullPointerException 如果 <code>key</code> 参数为 <code>null</code>。
@exception  IllegalArgumentException 如果 <code>key</code> 为空。


@see        java.lang.System#getProperty(java.lang.String)
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.SecurityManager.checkTopLevelWindow(Object window)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不受信任的调用线程调出由 <code>window</code> 参数指出的顶层窗口，则返回 <code>false</code>。在这种情况下，调用方仍然可以决定显示窗口，但窗口应包括某些可视的警告。如果此方法返回 <code>true</code>，则窗口的显示没有任何特殊的限制。
 <p>
有关受信任和不受信任窗口的更多信息，请参见 <code>Window</code> 类。
 <p>
此方法用 <code>AWTPermission(&quot;showWindowWithoutWarningBanner&quot;)</code> 权限调用 <code>checkPermission</code>，并且如果未抛出 SecurityException，则返回 <code>true</code>，否则返回 <code>false</code>。
 <p>
如果重写此方法，那么通常应该在已重写方法将要返回 <code>false</code> 时调用 <code>super.checkTopLevelWindow</code>，并且应该返回 <code>super.checkTopLevelWindow</code> 值。

@param      window   所创建的新窗口。
@return     如果信任的调用线程弹出顶层窗口，则返回 <code>true</code>，否则返回 <code>false</code>。
@exception  NullPointerException 如果 <code>window</code> 参数为 <code>null</code>。
@see        java.awt.Window
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkPrintJobAccess()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程发起一个打印作业请求，则抛出 <code>SecurityException</code>。
 <p>
此方法用 <code>RuntimePermission(&quot;queuePrintJob&quot;)</code> 权限调用 <code>checkPermission</code>。
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkPrintJobAccess</code>。
 <p>

@exception  SecurityException 如果调用线程没有发起打印作业请求的权限。
@since   JDK1.1
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkSystemClipboardAccess()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程访问系统剪贴板，则抛出 <code>SecurityException</code>。
 <p>
此方法用 <code>AWTPermission(&quot;accessClipboard&quot;)</code> 权限调用 <code>checkPermission</code>。
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkSystemClipboardAccess</code>。

@since   JDK1.1
@exception  SecurityException  如果调用线程没有访问系统剪贴板的权限。
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkAwtEventQueueAccess()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程访问 AWT 事件队列，则抛出 <code>SecurityException</code>。
 <p>
此方法用 <code>AWTPermission(&quot;accessEventQueue&quot;)</code> 权限调用 <code>checkPermission</code>。
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkAwtEventQueueAccess</code>。

@since   JDK1.1
@exception  SecurityException  如果调用线程没有访问 AWT 事件队列的权限。
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkPackageAccess(String pkg)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程访问由参数指定的包，则抛出 <code>SecurityException</code>。
 <p>
由类加载器的 <code>loadClass</code> 方法使用此方法。
 <p>
此方法首先获取受限制包的列表，方法是从对 <code>java.security.Security.getProperty(&quot;package.access&quot;)</code> 的调用中获得一个逗号分隔的列表，并查看受限制包是否以 <code>pkg</code> 开头或等于该字符。如果是，则用 <code>RuntimePermission(&quot;accessClassInPackage.&quot;+pkg)</code> 权限调用 <code>checkPermission</code>。
 <p>
如果重写了此方法，则应在已重写方法的首行调用 <code>super.checkPackageAccess</code>。

@param      pkg   包名。
@exception  SecurityException  如果调用线程没有访问指定包的权限。
@exception  NullPointerException 如果包名参数为 <code>null</code>。
@see        java.lang.ClassLoader#loadClass(java.lang.String, boolean) loadClass
@see        java.security.Security#getProperty getProperty
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkPackageDefinition(String pkg)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程在参数指定的包中定义类，则抛出 <code>SecurityException</code>。
 <p>
由类加载器的 <code>loadClass</code> 方法使用此方法。
 <p>
此方法首先获取受限制包的列表，方法是从对 <code>java.security.Security.getProperty(&quot;package.definition&quot;)</code> 的调用中获得一个逗号分隔的列表，并查看受限制包是否以 <code>pkg</code> 开头或等于该字符。如果是，则用 <code>RuntimePermission(&quot;defineClassInPackage.&quot;+pkg)</code> 权限调用 <code>checkPermission</code>。
 <p>
如果重写了此方法，则应在已重写方法的首行调用 <code>super.checkPackageDefinition</code>。

@param      pkg   包名。
@exception  SecurityException  如果调用线程没有在指定包中定义类的权限。
@see        java.lang.ClassLoader#loadClass(java.lang.String, boolean)
@see        java.security.Security#getProperty getProperty
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkSetFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程设置由 <code>ServerSocket</code> 或 <code>Socket</code> 使用的套接字工厂，或者由 <code>URL</code> 使用的流处理程序工厂，则抛出 <code>SecurityException</code>。
 <p>
此方法用 <code>RuntimePermission(&quot;setFactory&quot;)</code> 权限调用 <code>checkPermission</code>。
 <p>
如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkSetFactory</code>。
 <p>

@exception  SecurityException  如果调用线程没有指定套接字工厂或流处理程序工厂的权限。


@see        java.net.ServerSocket#setSocketFactory(java.net.SocketImplFactory) setSocketFactory
@see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory) setSocketImplFactory
@see        java.net.URL#setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory) setURLStreamHandlerFactory
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkMemberAccess(java.lang.Class<?> clazz, int which)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果不允许调用线程访问程序，则抛出 <code>SecurityException</code>。
 <p>
默认的策略是允许访问 PUBLIC 成员，以及访问具有与调用方相同类加载器的类。在所有其他情况下，此方法用 <code>RuntimePermission(&quot;accessDeclaredMembers&quot;)</code> 权限调用 <code>checkPermission</code>。
 <p>
如果重写此方法，则不能调用 <code>super.checkMemberAccess</code>，因为 <code>checkMemberAccess</code> 的默认实现依赖于堆栈深度为 4 时检查的代码。
 
@param clazz 要执行反射的类。

@param which 访问类型，PUBLIC 或 DECLARED。

@exception  SecurityException 如果调用方没有访问成员的权限。
@exception  NullPointerException 如果 <code>clazz</code> 参数为 <code>null</code>。
@see java.lang.reflect.Member
@since JDK1.1
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.SecurityManager.checkSecurityAccess(String target)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定是应该允许还是拒绝具有指定权限目标名的权限。

<p> 如果允许请求的权限，则此方法不执行任何操作。如果拒绝，则引发 SecurityException。

<p> 此方法为给定权限的目标名创建一个 <code>SecurityPermission</code> 对象并用该对象调用 <code>checkPermission</code> 。

<p> 有关可用权限目标名的列表，请参阅 <code>{@link java.security.SecurityPermission}</code> 的文档。
 
<p> 如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 <code>super.checkSecurityAccess</code>。

@param target <code>SecurityPermission</code> 的目标名。

@exception SecurityException 如果调用线程没有所请求访问的权限。
@exception NullPointerException 如果 <code>target</code> 为 null。
@exception IllegalArgumentException 如果 <code>target</code> 为空。


@since   JDK1.1
@see        #checkPermission(java.security.Permission) checkPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.ThreadGroup java.lang.SecurityManager.getThreadGroup()
<!-- END KEY -->
<!-- BEGIN DATA -->
调用此方法时，返回所有新创建的线程实例化后所在的线程组。默认情况下，返回当前线程所在的线程组。应该由指定的安全管理器重写此方法，以返回适当的线程组。

@return  ThreadGroup 新线程被实例化后所在的线程组
@since   JDK1.1
@see     java.lang.ThreadGroup

<!-- END DATA -->
