<!-- BEGIN KEY -->
public abstract class java.lang.Process extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link ProcessBuilder#start()} 和 {@link Runtime#exec(String[],String[],File) Runtime.exec} 方法创建一个本机进程，并返回 <code>Process</code> 子类的一个实例，该实例可用来控制进程并获得相关信息。<code>Process</code> 类提供了执行从进程输入、执行输出到进程、等待进程完成、检查进程的退出状态以及销毁（杀掉）进程的方法。

 <p>
创建进程的方法可能无法针对某些本机平台上的特定进程很好地工作，比如，本机窗口进程，守护进程，Microsoft Windows 上的 Win16/DOS 进程，或者 shell 脚本。创建的子进程没有自己的终端或控制台。它的所有标准 io（即 stdin、stdout 和 stderr）操作都将通过三个流 ({@link #getOutputStream()}、{@link #getInputStream()} 和 {@link #getErrorStream()}) 重定向到父进程。父进程使用这些流来提供到子进程的输入和获得从子进程的输出。因为有些本机平台仅针对标准输入和输出流提供有限的缓冲区大小，如果读写子进程的输出流或输入流迅速出现失败，则可能导致子进程阻塞，甚至产生死锁。

 <p>
当没有 <code>Process</code> 对象的更多引用时，不是删掉子进程，而是继续异步执行子进程。

 <p>
对于带有 <code>Process</code> 对象的 Java 进程，没有必要异步或并发执行由 <code>Process</code> 对象表示的进程。

@author  unascribed 
@version 1.23, 12/19/03 
@see     ProcessBuilder 
@see     Runtime#exec(String[], String[], File) 
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.io.OutputStream java.lang.Process.getOutputStream()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取子进程的输出流。输出流被传送给由该 <code>Process</code> 对象表示的进程的标准输入流。 
 <p>
实现注意事项：对输出流进行缓冲是一个好主意。

@return  连接到子进程正常输入的输出流。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.io.InputStream java.lang.Process.getInputStream()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取子进程的输入流。输入流获得由该 <code>Process</code> 对象表示的进程的标准输出流。 
 <p>
实现注意事项：对输入流进行缓冲是一个好主意。

@return  连接到子进程正常输出的输入流。
@see ProcessBuilder#redirectErrorStream()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.io.InputStream java.lang.Process.getErrorStream()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取子进程的错误流。错误流获得由该 <code>Process</code> 对象表示的进程的错误输出流传送的数据。 
 <p>
实现注意事项：对输入流进行缓冲是一个好主意。

@return  连接到子进程错误流的输入流。
@see ProcessBuilder#redirectErrorStream()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.lang.Process.waitFor() throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
导致当前线程等待，如有必要，一直要等到由该 <code>Process</code> 对象表示的进程已经终止。如果已终止该子进程，此方法立即返回。如果没有终止该子进程，调用的线程将被阻塞，直到退出子进程。

@return     进程的出口值。根据惯例，<code>0</code> 表示正常终止。
@exception  InterruptedException  如果当前线程在等待时被另一线程{@linkplain Thread#interrupt() 中断}，则停止等待，抛出 {@link InterruptedException}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.lang.Process.exitValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回子进程的出口值。

@return  此 <code>Process</code> 对象表示的子进程的出口值。根据惯例，值 <code>0</code> 表示正常终止。
@exception  IllegalThreadStateException  如果此 <code>Process</code> 对象表示的子进程尚未终止。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.lang.Process.destroy()
<!-- END KEY -->
<!-- BEGIN DATA -->
杀掉子进程。强制终止此 <code>Process</code> 对象表示的子进程。

<!-- END DATA -->
