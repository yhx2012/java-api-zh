<!-- BEGIN KEY -->
public final class java.lang.Double extends java.lang.Number implements java.lang.Comparable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Double</code> 类在对象中包装一个基本类型 <code>double</code> 的值。每个 <code>Double</code> 类型的对象都包含一个 <code>double</code> 类型的字段。
 <p>
此外，该类还提供多个方法，可以将 <code>double</code> 转换为 <code>String</code>，将 <code>String</code> 转换为 <code>double</code>，也提供了其他一些处理 <code>double</code> 时有用的常量和方法。


@author  Lee Boynton
@author  Arthur van Hoff
@author  Joseph D. Darcy
@version 1.100, 04/07/06
@since JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final double java.lang.Double.POSITIVE_INFINITY
<!-- END KEY -->
<!-- BEGIN DATA -->
保存 <code>double</code> 类型的正无穷大值的常量。它等于 <code>Double.longBitsToDouble(0x7ff0000000000000L)</code> 返回的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final double java.lang.Double.NEGATIVE_INFINITY
<!-- END KEY -->
<!-- BEGIN DATA -->
保存 <code>double</code> 类型的负无穷大值的常量。它等于 <code>Double.longBitsToDouble(0xfff0000000000000L)</code> 返回的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final double java.lang.Double.NaN
<!-- END KEY -->
<!-- BEGIN DATA -->

保存 <code>double</code> 类型的 NaN 值的常量。它等于 <code>Double.longBitsToDouble(0x7ff8000000000000L)</code> 返回的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final double java.lang.Double.MAX_VALUE
<!-- END KEY -->
<!-- BEGIN DATA -->
保存 <code>double</code> 类型的最大正有限值的常量，最大正有限值为 (2-2<sup>-52</sup>)&middot;2<sup>1023</sup>。它等于十六进制的浮点字面值 <code>0x1.fffffffffffffP+1023</code>，也等于 <code>Double.longBitsToDouble(0x7fefffffffffffffL)</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final double java.lang.Double.MIN_NORMAL
<!-- END KEY -->
<!-- BEGIN DATA -->
保存 {@code double} 类型的最小正标准值的常量，最小正标准值为 2<sup>-1022</sup>。它等于十六进制的浮点字面值 {@code 0x1.0p-1022}，也等于 {@code Double.longBitsToDouble(0x0010000000000000L)}。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final double java.lang.Double.MIN_VALUE
<!-- END KEY -->
<!-- BEGIN DATA -->
保存 <code>double</code> 类型的最小正非零值的常量，最小正非零值为 2<sup>-1074</sup>。它等于十六进制的浮点字面值 <code>0x0.0000000000001P-1022</code>，也等于 <code>Double.longBitsToDouble(0x1L)</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.Double.MAX_EXPONENT
<!-- END KEY -->
<!-- BEGIN DATA -->
有限 {@code double} 变量可能具有的最大指数。它等于 {@code Math.getExponent(Double.MAX_VALUE)} 返回的值。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.Double.MIN_EXPONENT
<!-- END KEY -->
<!-- BEGIN DATA -->
标准化 {@code double} 变量可能具有的最小指数。它等于 {@code Math.getExponent(Double.MIN_NORMAL)} 返回的值。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.Double.SIZE
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示 <tt>double</tt> 值的位数。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Class<java.lang.Double> java.lang.Double.TYPE
<!-- END KEY -->
<!-- BEGIN DATA -->
表示基本类型 <code>double</code> 的 <code>Class</code> 实例。


@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
private final double java.lang.Double.value
<!-- END KEY -->
<!-- BEGIN DATA -->
Double 的值。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Double(double value)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新分配的 <code>Double</code> 对象，它表示基本的 <code>double</code> 参数。

@param   value   用 <code>Double</code> 表示的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Double(String s) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新分配的 <code>Double</code> 对象，表示用字符串表示的 <code>double</code> 类型的浮点值。该方法与 <code>valueOf</code> 方法一样，可将字符串转换为 <code>double</code> 值。

@param      s   要转换为 <code>Double</code> 的字符串。
@exception  NumberFormatException  如果字符串不包含可解析的数字。
@see        java.lang.Double#valueOf(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.Double.toString(double d)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>double</code> 参数的字符串表示形式。下面提到的所有字符都是 ASCII 字符。
 <ul>
<li>如果参数为 NaN，那么结果为字符串 &quot;<code>NaN</code>&quot;。
<li>否则，结果是表示参数符号和数值（绝对值）的字符串。如果符号为负，那么结果的第一个字符是 '<code>-</code>' (<code>'\u002D'</code>)；如果符号为正，那么结果中不显示符号字符。对于数值 <i>m</i>：
 <ul>
<li>如果 <i>m</i> 为无穷大，则用字符 <code>&quot;Infinity&quot;</code> 表示；因此，正无穷大生成结果 <code>&quot;Infinity&quot;</code>，负无穷大生成结果 <code>&quot;-Infinity&quot;</code>。

<li>如果 <i>m</i> 为 0，则用字符 <code>&quot;0.0&quot;</code> 表示；因此，负 0 生成结果 <code>&quot;-0.0&quot;</code>，正 0 生成结果 <code>&quot;0.0&quot;</code>。

<li>如果 <i>m</i> 大于或者等于 10<sup>-3</sup>，但小于 10<sup>7</sup>，则采用不带前导 0 的十进制形式，用 <i>m</i> 的整数部分表示，后跟 '<code>.</code>' (<code>'\u002E'</code>)，再后面是表示 <i>m</i> 小数部分的一个或多个十进制数字。

<li>如果 <i>m</i> 小于 10<sup>-3</sup> 或大于等于 10<sup>7</sup>，则使用所谓的&ldquo;计算机科学记数法&rdquo;表示。设 <i>n</i> 为满足 10<sup><i>n</i></sup> &lt;= <i>m</i> &lt; 10<sup><i>n</i>+1</sup> 的唯一整数；然后设 <i>a</i> 为 <i>m</i> 与 10<sup><i>n</i></sup> 的精确算术商，从而 1 &lt;= <i>a</i> &lt; 10。那么，数值便表示为 <i>a</i> 的整数部分，其形式为：一个十进制数字，后跟 '<code>.</code>' (<code>'\u002E'</code>)，接着是表示 <i>a</i> 小数部分的十进制数字，再后面是字母 '<code>E</code>' (<code>'\u0045'</code>)，最后是用十进制整数形式表示的 <i>n</i>，这与方法 {@link Integer#toString(int)} 生成的结果一样。
 </ul>
 </ul>
必须为 <i>m</i> 或 <i>a</i> 的小数部分显示多少位呢？至少必须有一位数来表示小数部分，除此之外，需要更多（但只能和需要的一样多）位数来唯一地区分参数值和 <code>double</code> 类型的邻近值。这就是说，假设 <i>x</i> 是用十进制表示法表示的精确算术值，是通过对有限非 0 参数 <i>d</i> 调用此方法生成的。那么 <i>d</i> 一定是最接近 <i>x</i> 的 <code>double</code> 值；如果两个 <code>double</code> 值都同等地接近 <i>x</i>，那么 <i>d</i> 必须是其中之一，并且 <i>d</i> 的有效数字的最低有效位必须是 <code>0</code>。
 <p>
要创建浮点值的本地化字符串表示形式，请使用 {@link java.text.NumberFormat} 的子类。

@param   d   要转换的 <code>double</code> 值。
@return 参数的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.Double.toHexString(double d)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>double</code> 参数的十六进制字符串表示形式。下面提到的所有字符都是 ASCII 字符。

 <ul>
<li>如果参数为 NaN，那么结果为字符串 &quot;<code>NaN</code>&quot;。
<li>否则，结果是表示参数符号和数值的字符串。如果符号为负，那么结果的第一个字符是 '<code>-</code>' (<code>'\u002D'</code>)；如果符号为正，那么结果中不显示符号字符。对于数值 <i>m</i>：

 <ul> 
<li>如果 <i>m</i> 为无穷大，则用字符串 <code>&quot;Infinity&quot;</code> 表示；因此，正无穷大生成结果 <code>&quot;Infinity&quot;</code>，负无穷大生成结果 <code>&quot;-Infinity&quot;</code>。

<li>如果 <i>m</i> 为 0，则用字符串 <code>&quot;0x0.0p0&quot;</code> 表示；因此，负 0 生成结果 <code>&quot;-0x0.0p0&quot;</code>，正 0 生成结果 <code>&quot;0x0.0p0&quot;</code>。

<li>如果 <i>m</i> 是具有标准化表示形式的 <code>double</code> 值，则使用子字符串表示有效数字和指数字段。有效数字用字符 <code>&quot;0x1.&quot;</code> 表示，后跟该有效数字剩余小数部分的小写十六进制表示形式。除非所有位数都为 0，否则移除十六进制表示中的尾部 0，在所有位数都为零的情况下，可以用一个 0 表示。接下来用 <code>&quot;p&quot;</code> 表示指数，后跟无偏指数的十进制字符串，该值与通过对指数值调用 {@link Integer#toString(int) Integer.toString} 生成的值相同。

<li>如果 <i>m</i> 是非标准表示形式的 <code>double</code> 值，则用字符 <code>&quot;0x0.&quot;</code> 表示有效数字，后跟该有效数字剩余小数部分的十六进制表示形式。移除十六进制表示中的尾部 0。然后用 <code>&quot;p-1022&quot;</code> 表示指数。注意，在非标准有效数字中，必须至少有一个非 0 数字。

 </ul>
 
 </ul>

 <table border>
<caption><h3>示例</h3></caption>
<tr><th>浮点值</th><th>十六进制字符串</th>
 <tr><td><code>1.0</code></td>	<td><code>0x1.0p0</code></td>
 <tr><td><code>-1.0</code></td>	<td><code>-0x1.0p0</code></td>
 <tr><td><code>2.0</code></td>	<td><code>0x1.0p1</code></td>
 <tr><td><code>3.0</code></td>	<td><code>0x1.8p1</code></td>
 <tr><td><code>0.5</code></td>	<td><code>0x1.0p-1</code></td>
 <tr><td><code>0.25</code></td>	<td><code>0x1.0p-2</code></td>
 <tr><td><code>Double.MAX_VALUE</code></td>
     <td><code>0x1.fffffffffffffp1023</code></td>
 <tr><td><code>Minimum Normal Value</code></td>
     <td><code>0x1.0p-1022</code></td>
 <tr><td><code>Maximum Subnormal Value</code></td>
     <td><code>0x0.fffffffffffffp-1022</code></td>
 <tr><td><code>Double.MIN_VALUE</code></td>
     <td><code>0x0.0000000000001p-1022</code></td>
 </table>
@param   d   要转换的 <code>double</code> 值。
@return 参数的十六进制字符串表示形式。
@since 1.5
@author Joseph D. Darcy

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Double java.lang.Double.valueOf(String s) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回保存用参数字符串 <code>s</code> 表示的 <code>double</code> 值的 <code>Double</code> 对象。
 
<p>如果 <code>s</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code> 异常。

<p>忽略 <code>s</code> 中的前导空白字符和尾部空白字符。就像调用 {@link String#trim} 方法那样移除空白；这就是说，ASCII 空格和控制字符都要移除。<code>s</code> 的其余部分应该按词法语法规则所描述的那样构成一个 <i>FloatValue</i>：

 <blockquote>
 <dl>
 <dt><i>FloatValue:</i>
 <dd><i>Sign<sub>opt</sub></i> <code>NaN</code>
 <dd><i>Sign<sub>opt</sub></i> <code>Infinity</code>
 <dd><i>Sign<sub>opt</sub> FloatingPointLiteral</i>
 <dd><i>Sign<sub>opt</sub> HexFloatingPointLiteral</i>
 <dd><i>SignedInteger</i>
 </dl>

 <p>

 <dl>
 <dt><i>HexFloatingPointLiteral</i>:
 <dd> <i>HexSignificand BinaryExponent FloatTypeSuffix<sub>opt</sub></i>
 </dl>

 <p>

 <dl>
 <dt><i>HexSignificand:</i>
 <dd><i>HexNumeral</i>
 <dd><i>HexNumeral</i> <code>.</code>
 <dd><code>0x</code> <i>HexDigits<sub>opt</sub></i><code>.</code><i> HexDigits</i>
 <dd><code>0X</code><i> HexDigits<sub>opt</sub></i><code>.</code> <i>HexDigits</i>
 </dl>

 <p>

 <dl>
 <dt><i>BinaryExponent:</i>
 <dd><i>BinaryExponentIndicator SignedInteger</i>
 </dl>

 <p>

 <dl>
 <dt><i>BinaryExponentIndicator:</i>
 <dd><code>p</code>
 <dd><code>P</code>
 </dl>

 </blockquote>

其中 <i>Sign</i>、<i>FloatingPointLiteral</i>、<i>HexNumeral</i>、<i>HexDigits</i>、<i>SignedInteger</i> 和 <i>FloatTypeSuffix</i> 与 <a  href="http://java.sun.com/docs/books/jls/html/">Java Language Specification</a> 的词法结构部分中定义的相同。如果 <code>s</code> 不具有 <i>FloatValue</i> 的形式，则抛出 <code>NumberFormatException</code>。否则，可以认为 <code>s</code> 是一个以常用的&ldquo;计算机科学记数法&rdquo;表示的精确十进制值，或者是一个精确的十六进制值；在概念上，这个精确的数值将被转换为一个&ldquo;无限精确的&rdquo;二进制值，然后根据常用的 IEEE 754 浮点算法的&ldquo;舍入为最接近的数&rdquo;规则，将该值舍入为 <code>double</code> 类型，其中包括保留 0 值的符号。最后，返回表示此 <code>double</code> 值的 <code>Double</code> 对象。

<p> 要解释浮点值的本地化字符串表示形式，请使用 {@link java.text.NumberFormat} 的子类。

<p>注意，尾部格式说明符、确定浮点字面值类型的说明符（<code>1.0f</code> 是一个 <code>float</code> 值；<code>1.0d</code> 是一个 <code>double</code> 值）<em>不会</em> 影响此方法的结果。换句话说，输入字符串的数值被直接转换为目标浮点类型。分两步的转换（先将字符串转换为 <code>float</code>，然后将 <code>float</code> 转换为 <code>double</code>）<em>不</em> 同于直接将字符串转换为 <code>double</code>。例如，<code>float</code> 字面值 <code>0.1f</code> 等于 <code>double</code> 值 <code>0.10000000149011612</code>；<code>float</code> 字面值 <code>0.1f</code> 表示与 <code>double</code> 字面值 <code>0.1</code> 不同的数值。（数值 0.1 无法用二进制浮点数准确表示。)

<p>为了避免因为对无效字符串调用此方法而导致抛出 <code>NumberFormatException</code>，可以使用以下正则表达式作为输入到屏幕的字符串：

 <code>
 <pre>
	final String Digits	= &quot;(\\p{Digit}+)&quot;;
  final String HexDigits  = &quot;(\\p{XDigit}+)&quot;;
	// an exponent is 'e' or 'E' followed by an optionally 
	// .
	final String Exp	= &quot;[eE][+-]?&quot;+Digits;
	final String fpRegex	=
	    (&quot;[\\x00-\\x20]*&quot;+	// Optional leading &quot;whitespace&quot;
	     &quot;[+-]?(&quot; +	// Optional sign character
	     &quot;NaN|&quot; +		// &quot;NaN&quot; string
	     &quot;Infinity|&quot; +	// &quot;Infinity&quot; string

	     // A decimal floating-point string representing a finite positive
	     // number without a leading sign has at most five basic pieces:
	     // Digits . Digits ExponentPart FloatTypeSuffix
	     // 
	     // Since this method allows integer-only strings as input
	     // in addition to strings of floating-point literals, the
	     // two sub-patterns below are simplifications of the grammar
	     // productions from the Java Language Specification, 2nd 
	     // edition, section 3.10.2.

	     // Digits ._opt Digits_opt ExponentPart_opt FloatTypeSuffix_opt
	     &quot;(((&quot;+Digits+&quot;(\\.)?(&quot;+Digits+&quot;?)(&quot;+Exp+&quot;)?)|&quot;+

	     // . Digits ExponentPart_opt FloatTypeSuffix_opt
	     &quot;(\\.(&quot;+Digits+&quot;)(&quot;+Exp+&quot;)?)|&quot;+

       // Hexadecimal strings
       &quot;((&quot; +
        // 0[xX] HexDigits ._opt BinaryExponent FloatTypeSuffix_opt
        &quot;(0[xX]&quot; + HexDigits + &quot;(\\.)?)|&quot; +

        // 0[xX] HexDigits_opt . HexDigits BinaryExponent FloatTypeSuffix_opt
        &quot;(0[xX]&quot; + HexDigits + &quot;?(\\.)&quot; + HexDigits + &quot;)&quot; +

        &quot;)[pP][+-]?&quot; + Digits + &quot;))&quot; +
	     &quot;[fFdD]?))&quot; +
	     &quot;[\\x00-\\x20]*&quot;);// Optional trailing &quot;whitespace&quot;
	    
  if (Pattern.matches(fpRegex, myString))
	    Double.valueOf(myString); // Will not throw NumberFormatException
	else {
	    // Perform suitable alternative action
	}
 </pre>
 </code>

@param      s   要解析的字符串。
@return     保存用 <code>String</code> 参数表示的值的 <code>Double</code> 对象。
@exception  NumberFormatException  如果字符串不包含可解析的数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Double java.lang.Double.valueOf(double d)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示指定的 <tt>double</tt> 值的 <tt>Double</tt> 实例。如果不需要新的 <tt>Double</tt> 实例，则通常应优先使用此方法，而不是构造方法 {@link #Double(double)}，因为此方法可能通过缓存经常请求的值来显著提高空间和时间性能。

@param  d 一个 double  值。
@return 表示 <tt>d</tt> 的 <tt>Double</tt> 实例。
@since  1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Double.parseDouble(String s) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个新的 <code>double</code> 值，该值被初始化为用指定 <code>String</code> 表示的值，这与 <code>Double</code> 类的 <code>valueOf</code> 方法一样。

@param      s   要解析的字符串。
@return 由字符串参数表示的 <code>double</code> 值。
@exception NumberFormatException 如果字符串不包含可解析的 <code>double</code> 值。
@see        java.lang.Double#valueOf(String)
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.Double.isNaN(double v)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果指定的数是一个 NaN 值，则返回 <code>true</code>；否则返回 <code>false</code>。

@param   v   要测试的值。
@return 如果参数值为 NaN，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.Double.isInfinite(double v)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果指定数在数值上为无穷大，则返回 <code>true</code>；否则返回 <code>false</code>。

@param   v   要测试的值。
@return  如果参数值是正无穷大或负无穷大，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.Double.isNaN()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 <code>Double</code> 值是非数字（NaN）值，则返回 <code>true</code>；否则返回 <code>false</code>。

@return 如果此对象表示的值为 NaN，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.Double.isInfinite()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 <code>Double</code> 值在数值上为无穷大，则返回 <code>true</code>；否则返回 <code>false</code>。

@return  如果此对象所表示的值是正无穷大或负无穷大，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.Double.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Double</code> 对象的字符串表示形式。使用此对象表示的基本 <code>double</code> 值被转换为一个字符串，这与带一个参数的 <code>toString</code> 方法完全一样。

@return  此对象的 <code>String</code> 表示形式。
@see java.lang.Double#toString(double)

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte java.lang.Double.byteValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>byte</code> 形式返回此 <code>Double</code> 的值（通过强制转换为 <code>byte</code>）。

@return  转换为 <code>byte</code> 类型的由此对象所表示的 <code>double</code> 值
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public short java.lang.Double.shortValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>short</code> 形式返回此 <code>Double</code> 的值（通过强制转换为 <code>short</code>）。

@return  转换为 <code>short</code> 类型的由此对象所表示的 <code>double</code> 值
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.Double.intValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>int</code> 形式返回此 <code>Double</code> 的值（通过强制转换为 <code>int</code> 类型）。

@return  转换为 <code>int</code> 类型的由此对象所表示的 <code>double</code> 值

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.lang.Double.longValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>long</code> 形式返回此 <code>Double</code> 的值（通过强制转换为 <code>long</code>  类型）。

@return  转换为 <code>long</code> 类型的由此对象所表示的 <code>double</code> 值

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.lang.Double.floatValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Double</code> 对象的 <code>float</code> 值。

@return  转换为 <code>float</code> 类型的由此对象所表示的 <code>double</code> 值
@since JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.lang.Double.doubleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Double</code> 对象的 <code>double</code> 值。

@return 此对象所表示的 <code>double</code> 值

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.Double.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Double</code> 对象的哈希码。结果是此 <code>Double</code> 对象所表示的基本 <code>double</code> 值的 <code>long</code> 整数位表示形式（与 {@link #doubleToLongBits(double)} 方法生成的结果完全一样）两部分整数之间的异或 (XOR)。也就是说，哈希码就是以下表达式的值：
 <blockquote><pre>
 (int)(v^(v&gt;&gt;&gt;32))
 </pre></blockquote>
其中 <code>v</code> 的定义为： 
 <blockquote><pre>
 long v = Double.doubleToLongBits(this.doubleValue());
 </pre></blockquote>

@return  此对象的 <code>hashCode</code> 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.Double.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此对象与指定对象比较。当且仅当参数不是 <code>null</code> 而是 <code>Double</code> 对象，且表示的 <code>Double</code> 值与此对象表示的 <code>double</code> 值相同时，结果为 <code>true</code>。为此，当且仅当将方法 {@link #doubleToLongBits(double)} 应用于两个值所返回的 <code>long</code> 值相同时，才认为这两个 <code>double</code> 值相同。
 <p> 
注意，在大多数情况下，对于 <code>Double</code> 类的两个实例 <code>d1</code> 和 <code>d2</code>，当且仅当
 <blockquote><pre>
   d1.doubleValue()&nbsp;== d2.doubleValue()
 </pre></blockquote>
 <p>
为 <code>true</code> 时，<code>d1.equals(d2)</code> 的值才为 <code>true</code>。但是，有以下两种例外情况：
 <ul>
<li>如果 <code>d1</code> 和 <code>d2</code> 都表示 <code>Double.NaN</code>，那么即使 <code>Double.NaN==Double.NaN</code> 值为 <code>false</code>，<code>equals</code> 方法也将返回 <code>true</code>。
<li>如果 <code>d1</code> 表示 <code>+0.0</code> 而 <code>d2</code> 表示 <code>-0.0</code>，或者相反，那么即使 <code>+0.0==-0.0</code> 值为 <code>true</code>，<code>equals</code> 测试也将返回 <code>false</code>。
 </ul>
此定义使得哈希表得以正确操作。
@param   obj   要与之进行比较的对象。
@return  如果对象相同，则返回 <code>true</code>；否则返回 <code>false</code>。
@see java.lang.Double#doubleToLongBits(double)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Double.doubleToLongBits(double value)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 IEEE 754 浮点双精度格式 (&quot;double format&quot;) 位布局，返回指定浮点值的表示形式。
 <p>
第 63 位（掩码 <code>0x8000000000000000L</code> 选定的位）表示浮点数的符号。第 62-52 位（掩码 <code>0x7ff0000000000000L</code> 选定的位）表示指数。第 51-0 位（掩码 <code>0x000fffffffffffffL</code> 选定的位）表示浮点数的有效数字（有时也称为尾数）。
 <p>
如果参数是正无穷大，则结果为 <code>0x7ff0000000000000L</code>。
 <p>
如果参数是负无穷大，则结果为 <code>0xfff0000000000000L</code>。
 <p>
如果参数是 NaN，则结果为 <code>0x7ff8000000000000L</code>。 
 <p>
在所有情况下，结果都是一个 <code>long</code> 整数，将其赋予 {@link #longBitsToDouble(long)} 方法将生成一个与 <code>doubleToLongBits</code> 的参数相同的浮点值（所有 NaN 值被压缩成一个&ldquo;规范&rdquo;NaN 值时除外）。

@param   value   <code>双</code>精度 (double) 浮点数。
@return 表示浮点数的位。  

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native long java.lang.Double.doubleToRawLongBits(double value)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 IEEE 754 浮点&ldquo;双精度格式&rdquo;位布局，返回指定浮点值的表示形式，并保留 NaN 值。
 <p>
第 63 位（掩码 <code>0x8000000000000000L</code> 选定的位）表示浮点数的符号。第 62-52 位（掩码 <code>0x7ff0000000000000L</code> 选定的位）表示指数。第 51-0 位（掩码 <code>0x000fffffffffffffL</code> 选定的位）表示浮点数的有效数字（有时也称为尾数）。 
 <p>
如果参数是正无穷大，则结果为 <code>0x7ff0000000000000L</code>。
 <p>
如果参数是负无穷大，则结果为 <code>0xfff0000000000000L</code>。
 <p>
如果参数是 NaN，则结果是表示实际 NaN 值的 <code>long</code> 整数。与 <code>doubleToLongBits</code> 方法不同，<code>doubleToRawLongBits</code> 并没有压缩那些将 NaN 编码为一个&ldquo;规范的&rdquo;NaN 值的所有位模式。
 <p>
在所有情况下，结果都是一个 <code>long</code> 整数，将其赋予 {@link #longBitsToDouble(long)} 方法将生成一个与 <code>doubleToRawLongBits</code> 的参数相同的浮点值。

@param   value   <code>双</code>精度 (double) 浮点数。
@return 表示浮点数的位。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native double java.lang.Double.longBitsToDouble(long bits)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对应于给定位表示形式的 <code>double</code> 值。根据 IEEE 754 浮点&ldquo;双精度格式&rdquo;位布局，参数被视为浮点值表示形式。
 <p>
如果参数是 <code>0x7ff0000000000000L</code>，则结果为正无穷大。 
 <p>
如果参数是 <code>0xfff0000000000000L</code>，则结果为负无穷大。 
 <p>
如果参数值在 <code>0x7ff0000000000001L</code> 到 <code>0x7fffffffffffffffL</code> 之间或者在 <code>0xfff0000000000001L</code> 到 <code>0xffffffffffffffffL</code> 之间，则结果为 NaN。Java 提供的任何 IEEE 754 浮点操作都不能区分具有不同位模式的两个同类型 NaN 值。不同的 NaN 值只能使用 <code>Double.doubleToRawLongBits</code> 方法区分。
 <p>
在所有其他情况下，设 <i>s</i>、<i>e</i> 和 <i>m</i> 为可以通过以下参数计算的三个值：
 <blockquote><pre>
 int s = ((bits &gt;&gt; 63) == 0) ? 1 : -1;
 int e = (int)((bits &gt;&gt; 52) &amp; 0x7ffL);
 long m = (e == 0) ?
                 (bits &amp; 0xfffffffffffffL) &lt;&lt; 1 :
                 (bits &amp; 0xfffffffffffffL) | 0x10000000000000L;
 </pre></blockquote>
那么浮点结果等于算术表达式 <i>s</i>&middot;<i>m</i>&middot;2<sup><i>e</i>-1075</sup> 的值。
<p>
注意，此方法不能返回与 <code>long</code> 参数具有完全相同位模式的 <code>double</code> NaN。IEEE 754 区分了两种 NaN：quiet NaN 和 <i>signaling NaN</i>。这两种 NaN 之间的差别在 Java 中通常是不可见的。对 signaling NaN 进行的算术运算将它们转换为具有不同（但通常类似）位模式的 quiet NaN。但是在某些处理器上，只复制 signaling NaN 也执行这种转换。特别是在复制 signaling NaN 以将其返回给调用方法时，可能会执行这种转换。因此，<code>longBitsToDouble</code> 可能无法返回具有 signaling NaN 位模式的 <code>double</code> 值。所以，对于某些 <code>long</code> 值，<code>doubleToRawLongBits(longBitsToDouble(start))</code> 可能<i>不</i> 等于 <code>start</code>。此外，尽管所有 NaN 位模式（不管是 quiet NaN 还是 signaling NaN）都必须在上面提到的 NaN 范围内，但表示 signaling NaN 的特定位模式与平台有关。

@param   bits   任意 <code>long</code> 整数。
@return  具有相同位模式的 <code>double</code> 浮点值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.Double.compareTo(Double anotherDouble)
<!-- END KEY -->
<!-- BEGIN DATA -->
对两个 <code>Double</code> 对象所表示的数值进行比较。在应用到基本 <code>double</code> 值时，有两种方法可以比较执行此方法生成的值与执行 Java 语言数字比较运算符（<code>&lt;、&lt;=、== 和 &gt;= &gt;</code>）生成的值之间的区别：
 <ul><li>
		此方法认为 <code>Double.NaN</code> 等于它自身，且大于其他所有 <code>double</code> 值（包括 <code>Double.POSITIVE_INFINITY</code>）。
 <li>
		此方法认为 <code>0.0d</code> 大于 <code>-0.0d</code>。
 </ul>
这可以确保受此方法影响的 <tt>Double</tt> 对象的<i>自然顺序</i><i>与 equals 一致</i>。

@param   anotherDouble   要比较的 <code>Double</code> 值。
@return  如果 <code>anotherDouble</code> 在数字上等于此 <code>Double</code>，则返回 <code>0</code>；如果此 <code>Double</code> 在数字上小于 <code>anotherDouble</code>，则返回小于 <code>0</code> 的值；如果此 <code>Double</code> 在数字上大于此 <code>anotherDouble</code>，则返回大于 <code>0</code> 的值。
		
@since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Double.compare(double d1, double d2)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较两个指定的 <code>double</code> 值。返回整数值的符号与以下调用返回的整数的符号相同：
 <pre>
    new Double(d1).compareTo(new Double(d2))
 </pre>

@param   d1        要比较的第一个 <code>double</code>
@param   d2        要比较的第二个 <code>double</code>
@return  如果 <code>d1</code> 在数字上等于 <code>d2</code>，则返回 <code>0</code>；如果 <code>d1</code> 在数字上小于 <code>d2</code>，则返回小于 <code>0</code> 的值；如果 <code>d1</code> 在数字上大于<code>d2</code>，则返回大于 <code>0</code> 的值。
@since 1.4

<!-- END DATA -->

