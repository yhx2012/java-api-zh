<!-- BEGIN KEY -->
public class java.lang.ThreadLocal extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
该类提供了线程局部 (thread-local) 变量。这些变量不同于它们的普通对应物，因为访问某个变量（通过其 <tt>get</tt> 或 <tt>set</tt> 方法）的每个线程都有自己的局部变量，它独立于变量的初始化副本。<tt>ThreadLocal</tt> 实例通常是类中的 private static 字段，它们希望将状态与某一个线程（例如，用户 ID 或事务 ID）相关联。

<p>例如，以下类生成对每个线程唯一的局部标识符。
线程 ID 是在第一次调用 <tt>UniqueThreadIdGenerator.getCurrentThreadId()</tt> 时分配的，在后续调用中不会更改。
 <pre>
  import java.util.concurrent.atomic.AtomicInteger;

 public class UniqueThreadIdGenerator {

     private static final AtomicInteger uniqueId = new AtomicInteger(0);

     private static final ThreadLocal &lt; Integer > uniqueNum = 
         new ThreadLocal &lt; Integer > () {
             &#64;Override protected Integer initialValue() {
                 return uniqueId.getAndIncrement();
         }
     };
 
     public static int getCurrentThreadId() {
         return uniqueId.get();
     }
 } // UniqueThreadIdGenerator
 </pre>

<p>每个线程都保持对其线程局部变量副本的隐式引用，只要线程是活动的并且 <tt>ThreadLocal</tt> 实例是可访问的；在线程消失之后，其线程局部实例的所有副本都会被垃圾回收（除非存在对这些副本的其他引用）。

@author  Josh Bloch and Doug Lea
@version 1.33, 02/19/04
@since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.ThreadLocal()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个线程本地变量。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected T java.lang.ThreadLocal.initialValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此线程局部变量的当前线程的“初始值”。线程第一次使用 {@link #get} 方法访问变量时将调用此方法，但如果线程之前调用了 {@link #set} 方法，则不会对该线程再调用 <tt>initialValue</tt> 方法。通常，此方法对每个线程最多调用一次，但如果在调用 {@link #get} 后又调用了 {@link #remove}，则可能再次调用此方法。

<p>该实现返回 <tt>null</tt>；如果程序员希望线程局部变量具有 <tt>null</tt> 以外的值，则必须为 <tt>ThreadLocal</tt> 创建子类，并重写此方法。通常将使用匿名内部类完成此操作。

@return 返回此线程局部变量的初始值

<!-- END DATA -->
<!-- BEGIN KEY -->
public T java.lang.ThreadLocal.get()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此线程局部变量的当前线程副本中的值。如果变量没有用于当前线程的值，则先将其初始化为调用 {@link #initialValue} 方法返回的值。

@return 此线程局部变量的当前线程的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.ThreadLocal.set(T value)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此线程局部变量的当前线程副本中的值设置为指定值。大部分子类不需要重写此方法，它们只依靠 {@link #initialValue} 方法来设置线程局部变量的值。

@param value 存储在此线程局部变量的当前线程副本中的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.ThreadLocal.remove()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除此线程局部变量当前线程的值。如果此线程局部变量随后被当前线程{@linkplain #get 读取}，且这期间当前线程没有{@linkplain #set 设置}其值，则将调用其 {@link #initialValue} 方法重新初始化其值。这将导致在当前线程多次调用 <tt>initialValue</tt> 方法。
@since 1.5

<!-- END DATA -->
