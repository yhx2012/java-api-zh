<!-- BEGIN KEY -->
public final class java.lang.Math extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Math</code> 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。
 
<p>与 <code>StrictMath</code> 类的某些数学方法不同，并非 <code>Math</code> 类所有等价函数的实现都定义为返回逐位相同的结果。此类在不需要严格重复的地方可以得到更好的执行。
 
<p>默认情况下，很多 <code>Math</code> 方法仅调用 <code>StrictMath</code> 中的等价方法来完成它们的实现。建议代码生成器使用特定于平台的本机库或者微处理器指令（可用时）来提供 <code>Math</code> 方法更高性能的实现。这种更高性能的实现仍然必须遵守 <code>Math</code> 的规范。
 
<p>实现规范的质量涉及到两种属性，即返回结果的准确性和方法的单调性。浮点 <code>Math</code> 方法的准确性根据 <i>ulp</i>（units in the last place，最后一位的进退位）来衡量。对于给定的浮点格式，特定实数值的 ulp 是包括该数值的两个浮点值的差。当作为一个整体而不是针对具体参数讨论方法的准确性时，引入的 ulp 数用于任何参数最差情况下的误差。如果一个方法的误差总是小于 0.5 ulp，那么该方法始终返回最接近准确结果的浮点数；这种方法就是<i>正确舍入</i>。一个正确舍入的方法通常能得到最佳的浮点近似值；然而，对于许多浮点方法，进行正确舍入有些不切实际。相反，对于 <code>Math</code> 类，某些方法允许误差在 1 或 2 ulp 的范围内。非正式地，对于 1 ulp 的误差范围，当准确结果是可表示的数值时，应该按照计算结果返回准确结果；否则，返回包括准确结果的两个浮点值中的一个。对于值很大的准确结果，括号的一端可以是无穷大。除了个别参数的准确性之外，维护不同参数的方法之间的正确关系也很重要。因此，大多数误差大于 0.5 ulp 的方法都要求是<i>半单调的</i>：只要数学函数是非递减的，浮点近似值就是非递减的；同样，只要数学函数是非递增的，浮点近似值就是非递增的。并非所有准确性为 1 ulp 的近似值都能自动满足单调性要求。

@author  unascribed
@author  Joseph D. Darcy
@version 1.69, 06/14/04
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final double java.lang.Math.E
<!-- END KEY -->
<!-- BEGIN DATA -->
比任何其他值都更接近 <i>e</i>（即自然对数的底数）的 <code>double</code> 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final double java.lang.Math.PI
<!-- END KEY -->
<!-- BEGIN DATA -->
比任何其他值都更接近 <i>pi</i>（即圆的周长与直径之比）的 <code>double</code> 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.sin(double a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回角的三角正弦。特殊情况如下：
<ul><li>如果参数为 NaN 或无穷大，那么结果为 NaN。
<li>如果参数为 0，那么结果为 0，符号与参数符号相同。</ul>
 
<p>计算结果必须在准确结果的 1 ulp 范围内。结果必须具有半单调性。

@param   a   以弧度表示的角。
@return  参数的正弦。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.cos(double a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回角的三角余弦。特殊情况如下：
<ul><li>如果参数为 NaN 或无穷大，那么结果为 NaN。</ul>
 
<p>计算结果必须在准确结果的 1 ulp 范围内。结果必须具有半单调性。

@param   a   以弧度表示的角。
@return  参数的余弦。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.tan(double a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回角的三角正切。特殊情况如下：
<ul><li>如果参数为 NaN 或无穷大，那么结果为 NaN。
<li>如果参数为 0，那么结果为 0，符号与参数符号相同。</ul>
 
<p>计算结果必须在准确结果的 1 ulp 范围内。结果必须具有半单调性。

@param   a   以弧度表示的角。
@return  参数的正切。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.asin(double a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个值的反正弦；返回的角度范围在 -<i>pi</i>/2 到 <i>pi</i>/2 之间。特殊情况如下：
<ul><li>如果参数为 NaN 或它的绝对值大于 1，那么结果为 NaN。
<li>如果参数为 0，那么结果为 0，符号与参数符号相同。</ul>
 
<p>计算结果必须在准确结果的 1 ulp 范围内。结果必须具有半单调性。

@param   a   要返回其反正弦的值。
@return  参数的反正弦。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.acos(double a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个值的反余弦；返回的角度范围在 0.0 到 <i>pi</i> 之间。特殊情况如下：
<ul><li>如果参数为 NaN 或它的绝对值大于 1，那么结果为 NaN。</ul>
 
<p>计算结果必须在准确结果的 1 ulp 范围内。结果必须具有半单调性。

@param   a   要返回其反余弦的值。
@return  参数的反余弦。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.atan(double a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个值的反正切；返回的角度范围在 -<i>pi</i>/2 到 <i>pi</i>/2 之间。特殊情况如下： 
<ul><li>如果参数为 NaN，那么结果为 NaN。
<li>如果参数为 0，那么结果为 0，符号与参数符号相同。</ul>
 
<p>计算结果必须在准确结果的 1 ulp 范围内。结果必须具有半单调性。

@param   a   要返回其反正切的值。
@return  参数的反正切。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.toRadians(double angdeg)
<!-- END KEY -->
<!-- BEGIN DATA -->
将用角度表示的角转换为近似相等的用弧度表示的角。从角度到弧度的转换通常是不精确的。

@param   angdeg   用角度表示的角
@return 角 <code>angrad</code> 用弧度表示的值。
@since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.toDegrees(double angrad)
<!-- END KEY -->
<!-- BEGIN DATA -->
将用弧度表示的角转换为近似相等的用角度表示的角。从弧度到角度的转换通常是不精确的；用户<i>不</i> 应该期望 <code>cos(toRadians(90.0))</code> 与 <code>0.0</code> 完全相等。

@param   angrad   用弧度表示的角。
@return  角 <code>angrad</code> 用角度表示的值。
@since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.exp(double a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回欧拉数 <i>e</i> 的 <code>double</code> 次幂的值。特殊情况如下：
<ul><li>如果参数为 NaN，那么结果为 NaN。
<li>如果参数为正无穷大，那么结果为正无穷大。
<li>如果参数为负无穷大，那么结果为正 0。</ul>
 
<p>计算结果必须在准确结果的 1 ulp 范围内。结果必须具有半单调性。

@param   a   <i>e</i> 的指数。
@return  值 <i>e</i><sup><code>a</code></sup>，其中 <i>e</i> 是自然对数的底数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.log(double a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>double</code> 值的自然对数（底数是 <i>e</i>）。特殊情况如下：
<ul><li>如果参数为 NaN 或小于 0，那么结果为 NaN。
<li>如果参数为正无穷大，那么结果为正无穷大。
<li>如果参数为正 0 或负 0，那么结果为负无穷大。</ul>
 
<p>计算结果必须在准确结果的 1 ulp 范围内。结果必须具有半单调性。

@param   a   一个值
@return  ln&nbsp;<code>a</code> 的值，即 <code>a</code> 的自然对数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.log10(double a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>double</code> 值的底数为 10 的对数。特殊情况如下：

<ul><li>如果参数为 NaN 或小于 0，那么结果为 NaN。
<li>如果参数为正无穷大，那么结果为正无穷大。
<li>如果参数为正 0 或负 0，那么结果为负无穷大。
<li> 如果参数等于 10 <sup><i>n</i></sup>（<i>n</i> 为整数），那么结果为 <i>n</i>。
</ul>
 
<p>计算结果必须在准确结果的 1 ulp 范围内。结果必须具有半单调性。

@param   a   一个值
@return  <code>a</code> 的底数为 10 的对数。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.sqrt(double a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回正确舍入的 <code>double</code> 值的正平方根。特殊情况如下：
<ul><li>如果参数为 NaN 或小于 0，那么结果为 NaN。
<li>如果参数为正无穷大，那么结果为正无穷大。
<li>如果参数为正 0 或负 0，那么结果与参数相同。</ul>
否则，结果为最接近该参数值的实际数学平方根的 <code>double</code> 值。
 
@param   a   一个值。
@return  <code>a</code> 的正平方根。
如果参数为 NaN 或小于 0，那么结果为 NaN。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.cbrt(double a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>double</code> 值的立方根。对于正的有限值 <code>x</code>，<code>cbrt(-x) == -cbrt(x)</code>；也就是说，负值的立方根是该值数值的负立方根。特殊情况如下： 

<ul>
 
<li>如果参数为 NaN，那么结果为 NaN。

<li>如果参数为无穷大，那么结果为无穷大，符号与参数符号相同。

<li>如果参数为 0，那么结果为 0，符号与参数符号相同。
 
</ul>

<p>计算结果必须在准确结果的 1 ulp 范围内。
 
@param   a   一个值。
@return  <code>a</code> 的立方根。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.IEEEremainder(double f1, double f2)
<!-- END KEY -->
<!-- BEGIN DATA -->
按照 IEEE 754 标准的规定，对两个参数进行余数运算。余数的算术值等于 <code>f1&nbsp;-&nbsp;f2</code>&nbsp;&times;&nbsp;<i>n</i>，其中 <i>n</i> 是最接近商 <code>f1/f2</code> 准确算术值的整数，如果两个整数都同样接近 <code>f1/f2</code>，那么 <i>n</i> 是其中的偶数。如果余数是 0，那么它的符号与第一个参数的符号相同。特殊情况如下：
<ul><li>如果两个参数都为 NaN，或者第一个参数为无穷大，或者第二个参数为正 0 或负 0，那么结果为 NaN。
<li>如果第一个参数为有限值，第二个参数为无穷大，那么结果与第一个参数相同。</ul>

@param   f1   被除数。
@param   f2   除数。
@return  <code>f1</code> 除以 <code>f2</code> 的余数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.ceil(double a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最小的（最接近负无穷大）<code>double</code> 值，该值大于等于参数，并等于某个整数。特殊情况如下：
<ul><li>如果参数值已经等于某个整数，那么结果与该参数相同。<li>如果参数为 NaN、无穷大、正 0 或负 0，那么结果与参数相同。
<li>如果参数值小于 0，但是大于 -1.0，那么结果为负 0。</ul> 注意，<code>Math.ceil(x)</code> 的值与 <code>-Math.floor(-x)</code> 的值完全相同。
<p>

@param   a   一个值。
@return  最小（最接近负无穷大）浮点值，该值大于等于该参数，并等于某个整数。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.floor(double a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最大的（最接近正无穷大）<code>double</code> 值，该值小于等于参数，并等于某个整数。特殊情况如下：
<ul><li>如果参数值已经等于某个整数，那么结果与该参数相同。<li>如果参数为 NaN、无穷大、正 0 或负 0，那么结果与参数相同。</ul>

@param   a   一个值。
@return  最大（最接近正无穷大）浮点值，该值小于等于该参数，并等于某个整数。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.rint(double a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最接近参数并等于某一整数的 <code>double</code> 值。如果两个同为整数的 <code>double</code> 值都同样接近，那么结果取偶数。特殊情况如下：
<ul><li>如果参数值已经是整数，那么结果与参数相同。 
<li>如果参数为 NaN、无穷大、正 0 或负 0，那么结果与参数相同。</ul>

@param   a   <code>double</code> 值。
@return  最接近 <code>a</code> 的整数浮点值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.atan2(double y, double x)
<!-- END KEY -->
<!-- BEGIN DATA -->
将矩形坐标 (<code>x</code>,&nbsp;<code>y</code>) 转换成极坐标 (r,&nbsp;<i>theta</i>)，返回所得角 <i>theta</i>。该方法通过计算 <code>y/x</code> 的反正切值来计算相角 <i>theta</i>，范围为从 -<i>pi</i> 到 <i>pi</i>。特殊情况如下：
<ul><li>如果任一参数为 NaN，那么结果为 NaN。 
<li>如果第一个参数为正 0，第二个参数为正数；或者第一个参数为正的有限值，第二个参数为正无穷大，那么结果为正 0。 
<li>如果第一个参数为负 0，第二个参数为正数；或者第一个参数为负的有限值，第二个参数为正无穷大，那么结果为负 0。 
<li>如果第一个参数为正 0，第二个参数为负数；或者第一个参数为正的有限值，第二个参数为负无穷大，那么结果为最接近 <i>pi</i> 的 <code>double</code> 值。 
<li>如果第一个参数为负 0，第二个参数为负数；或者第一个参数为负的有限值，第二个参数为负无穷大，那么结果为最接近 <i>pi</i> 的 <code>double</code> 值。 
<li>如果第一个参数为正数，第二个参数为正 0 或负 0；或者第一个参数为正无穷大，第二个参数为有限值，那么结果为最接近 <i>pi</i>/2 的 <code>double</code> 值。
<li>如果第一个参数为负数，第二个参数为正 0 或负 0；或者第一个参数为负无穷大，第二个参数为有限值，那么结果为最接近 -<i>pi</i>/2 的 <code>double</code> 值。
<li>如果两个参数都为正无穷大，那么结果为最接近 <i>pi</i>/4 的 <code>double</code> 值。
<li>如果第一个参数为正无穷大，第二个参数为负无穷大，那么结果为最接近 3*<i>pi</i>/4 的 <code>double</code> 值。
<li>如果第一个参数为负无穷大，第二个参数为正无穷大，那么结果为最接近 -<i>pi</i>/4 的 <code>double</code> 值。
<li>如果两个参数都为负无穷大，那么结果为最接近 -3*<i>pi</i>/4 的 <code>double</code> 值。</ul>
 
<p>计算结果必须在准确结果的 2 ulp 范围内。结果必须具有半单调性。

@param   y   纵坐标
@param   x   横坐标
@return 与笛卡儿坐标中点 (<i>x</i>,&nbsp;<i>y</i>) 对应的极坐标中点 (<i>r</i>,&nbsp;<i>theta</i>) 的 <i>theta</i> 组件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.pow(double a, double b)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回第一个参数的第二个参数次幂的值。特殊情况如下：

<ul><li>如果第二个参数为正 0 或负 0，那么结果为 1.0。
<li>如果第二个参数为 1.0，那么结果与第一个参数相同。
<li>如果第二个参数为 NaN，那么结果为 NaN。
<li>如果第一个参数为 NaN，第二个参数非 0，那么结果为 NaN。

<li>如果
<ul>
<li>第一个参数的绝对值大于 1，并且第二个参数为正无穷大，或者
<li>第一个参数的绝对值小于 1，并且第二个参数为负无穷大，
</ul>
那么结果为正无穷大。

<li>如果
<ul>
<li>第一个参数的绝对值大于 1，并且第二个参数为负无穷大，或者
<li>第一个参数的绝对值小于 1，并且第二个参数为正无穷大，
</ul>
那么结果为正 0。

<li>如果第一个参数的绝对值等于1，并且第二个参数为无穷大，那么结果为 NaN。

<li>如果
<ul>
<li>第一个参数为正 0，并且第二个参数大于 0，或者
<li>第一个参数为正无穷大，并且第二个参数小于 0，
</ul>
那么结果为正 0。

<li>如果
<ul>
<li>第一个参数为正 0，并且第二个参数小于 0，或者
<li>第一个参数为正无穷大，并且第二个参数大于 0，
</ul>
那么结果为正无穷大。

<li>如果
<ul>
<li>如果第一个参数为负 0，并且第二个参数大于 0 但不是有限的奇数整数，或者
<li>第一个参数为负无穷大，并且第二个参数小于 0 但不是有限的奇数整数，
</ul>
那么结果为正 0。

<li>如果
<ul>
<li>第一个参数为负 0，并且第二个参数为正的有限奇数整数，或者
<li>第一个参数为负无穷大，并且第二个参数为负的有限奇数整数，
</ul>
那么结果为负 0。

<li>如果
<ul>
<li>如果第一个参数为负 0，并且第二个参数小于 0 但不是有限的奇数整数，或者
<li>第一个参数为负无穷大，并且第二个参数大于 0 但不是有限的奇数整数，
</ul>
那么结果为正无穷大。

<li>如果
<ul>
<li>第一个参数为负 0，并且第二个参数为负的有限奇数整数，或者
<li>第一个参数为负无穷大，并且第二个参数为正的有限奇数整数，
</ul>
那么结果为负无穷大。

<li>如果第一个参数为小于 0 的有限值，
<ul>
<li>如果第二个参数为有限的偶数整数，那么结果等于第一个参数绝对值的第二个参数次幂的结果。

<li>如果第二个参数为有限的奇数整数，那么结果等于负的第一个参数绝对值的第二个参数次幂的结果。

<li>如果第二个参数为有限的非整数值，那么结果为 NaN。
</ul>

<li>如果两个参数都为整数，并且结果恰好可以表示为一个 <code>double</code> 值，那么该结果恰好等于第一个参数的第二个参数次幂的算术结果。</ul>
 
<p>（在前面的描述中，当且仅当浮点数为有限值并且是方法 {@link #ceil <tt>ceil</tt>} 的定点数，或者是方法 {@link #floor <tt>floor</tt>} 的定点数时，才可以认为浮点值是整数。当且仅当将某个单参数方法应用到某个值的结果等于该值时，该值才是这个方法的定点值。）

<p>计算结果必须在准确结果的 1 ulp 范围内。结果必须具有半单调性。

@param   a   底数。
@param   b   指数。
@return  值 <code>a<sup>b</sup></code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Math.round(float a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最接近参数的 <code>int</code>。结果将舍入为整数：加上 1/2，对结果调用 floor 并将所得结果强制转换为 <code>int</code> 类型。换句话说，结果等于以下表达式的值：
<p><pre>(int)Math.floor(a + 0.5f)</pre>
<p>
特殊情况如下：
<ul><li>如果参数为 NaN，那么结果为 0。
<li>如果结果为负无穷大或任何小于等于 <code>Integer.MIN_VALUE</code> 的值，那么结果等于 <code>Integer.MIN_VALUE</code> 的值。
<li>如果参数为正无穷大或任何大于等于 <code>Integer.MAX_VALUE</code> 的值，那么结果等于 <code>Integer.MAX_VALUE</code> 的值。</ul> 

@param   a   要舍入为整数的浮点值。
@return  舍入为最接近的 <code>int</code> 值的参数值。
@see     java.lang.Integer#MAX_VALUE
@see     java.lang.Integer#MIN_VALUE

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Math.round(double a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最接近参数的 <code>long</code>。结果将舍入为整数：加上 1/2，对结果调用 floor 并将所得结果强制转换为 <code>long</code> 类型。换句话说，结果等于以下表达式的值：
<p><pre>(long)Math.floor(a + 0.5d)</pre>
<p>
特殊情况如下：
<ul><li>如果参数为 NaN，那么结果为 0。
<li>如果结果为负无穷大或任何小于等于 <code>Long.MIN_VALUE</code> 的值，那么结果等于 <code>Long.MIN_VALUE</code> 的值。
<li>如果参数为正无穷大或任何大于等于 <code>Long.MAX_VALUE</code> 的值，那么结果等于 <code>Long.MAX_VALUE</code> 的值。</ul>

@param   a   舍入为 <code>long</code> 的浮点值。
@return  舍入为最接近的 <code>long</code> 值的参数值。
@see     java.lang.Long#MAX_VALUE
@see     java.lang.Long#MIN_VALUE

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.random()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回带正号的 <code>double</code> 值，该值大于等于 <code>0.0</code> 且小于 <code>1.0</code>。返回值是一个伪随机选择的数，在该范围内（近似）均匀分布。
 
<p>第一次调用该方法时，它将创建一个新的伪随机数生成器，与以下表达式完全相同
<blockquote><pre>new java.util.Random</pre></blockquote> 之后，新的伪随机数生成器可用于此方法的所有调用，但不能用于其他地方。
 
<p>此方法是完全同步的，可允许多个线程使用而不出现错误。但是，如果许多线程需要以极高的速率生成伪随机数，那么这可能会减少每个线程对拥有自己伪随机数生成器的争用。
  
@return  大于等于 <code>0.0</code> 且小于 <code>1.0</code> 的伪随机 <code>double</code> 值。
@see     java.util.Random#nextDouble()

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Math.abs(int a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>int</code> 值的绝对值。如果参数为非负数，则返回该参数。如果参数为负数，则返回该参数的相反数。
 
<p>注意，如果参数等于 <code>Integer.MIN_VALUE</code> 的值（即能够表示的最小负 <code>int</code> 值），那么结果与该值相同且为负。

@param   a   要确定绝对值的参数。
@return  参数的绝对值。
@see     java.lang.Integer#MIN_VALUE

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Math.abs(long a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>long</code> 值的绝对值。如果参数为非负数，则返回该参数。如果参数为负数，则返回该参数的相反数。
 
<p>注意，如果参数等于 <code>Long.MIN_VALUE</code> 的值（即能够表示的最小负 <code>long</code> 值），则结果与该值相同且为负。

@param   a   要确定绝对值的参数。
@return  参数的绝对值。
@see     java.lang.Long#MIN_VALUE

<!-- END DATA -->
<!-- BEGIN KEY -->
public static float java.lang.Math.abs(float a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>float</code> 值的绝对值。如果参数为非负数，则返回该参数。如果参数为负数，则返回该参数的相反数。特殊情况如下：
<ul><li>如果参数为正 0 或负 0，那么结果为正 0。
<li>如果参数为无穷大，那么结果为正无穷大。
<li>如果参数为 NaN，那么结果为 NaN。</ul>
换句话说，结果等于以下表达式的值：
<p><pre>Float.intBitsToFloat(0x7fffffff &amp; Float.floatToIntBits(a))</pre>

@param   a   要确定绝对值的参数。
@return  参数的绝对值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.abs(double a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>double</code> 值的绝对值。如果参数为非负数，则返回该参数。如果参数为负数，则返回该参数的相反数。特殊情况如下：
<ul><li>如果参数为正 0 或负 0，那么结果为正 0。
<li>如果参数为无穷大，那么结果为正无穷大。
<li>如果参数为 NaN，那么结果为 NaN。</ul>
换句话说，结果等于以下表达式的值：
<p><code>Double.longBitsToDouble((Double.doubleToLongBits(a)&lt;&lt;1)&gt;&gt;&gt;1)</code> 

@param   a   要确定绝对值的参数。
@return  参数的绝对值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Math.max(int a, int b)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回两个 <code>int</code> 值中较大的一个。也就是说，结果为更接近 <code>Integer.MAX_VALUE</code> 值的参数。如果参数值相同，那么结果也是同一个值。

@param   a   参数。
@param   b   另一个参数。
@return  <code>a</code> 和 <code>b</code> 中的较大者。
@see     java.lang.Long#MAX_VALUE

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Math.max(long a, long b)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回两个 <code>long</code> 值中较大的一个。也就是说，结果为更接近 <code>Long.MAX_VALUE</code> 值的参数。如果参数值相同，那么结果也是同一个值。

@param   a   参数。
@param   b   另一个参数。
@return  <code>a</code> 和 <code>b</code> 中的较大者。
@see     java.lang.Long#MAX_VALUE

<!-- END DATA -->
<!-- BEGIN KEY -->
public static float java.lang.Math.max(float a, float b)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回两个 <code>float</code> 值中较大的一个。也就是说，结果为更接近正无穷大的参数。如果参数值相同，那么结果也是同一个值。如果任一值为 NaN，那么结果为 NaN。与数值比较运算不同，此方法认为负 0 严格小于正 0。如果一个参数为正 0，另一个参数为负 0，那么结果为正 0。

@param   a   参数。
@param   b   另一个参数。
@return  <code>a</code> 和 <code>b</code> 中的较大者。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.max(double a, double b)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回两个 <code>double</code> 值中较大的一个。也就是说，结果为更接近正无穷大的参数。如果参数值相同，那么结果也是同一个值。如果任一值为 NaN，那么结果为 NaN。与数值比较运算不同，该方法认为负 0 严格小于正 0。如果一个参数为正 0，另一个参数为负 0，那么结果为正 0。

@param   a   参数。
@param   b   另一个参数。
@return  <code>a</code> 和 <code>b</code> 中的较大者。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Math.min(int a, int b)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回两个 <code>int</code> 值中较小的一个。也就是说，结果为更接近 <code>Integer.MIN_VALUE</code> 值的参数。如果参数值相同，那么结果也是同一个值。

@param   a   参数。
@param   b   另一个参数。
@return  <code>a</code> 和 <code>b</code> 中的较小者。
@see     java.lang.Long#MIN_VALUE

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Math.min(long a, long b)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回两个 <code>long</code> 值中较小的一个。也就是说，结果为更接近 <code>Long.MIN_VALUE</code> 值的参数。如果参数值相同，那么结果也是同一个值。

@param   a   参数。
@param   b   另一个参数。
@return   <code>a</code> 和 <code>b</code> 中的较小者。
@see     java.lang.Long#MIN_VALUE

<!-- END DATA -->
<!-- BEGIN KEY -->
public static float java.lang.Math.min(float a, float b)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回两个 <code>float</code> 值中较小的一个。也就是说，结果为更接近负无穷大的值。如果参数值相同，那么结果也是同一个值。如果任一值为 NaN，那么结果为 NaN。与数值比较运算不同，该方法认为负 0 严格小于正 0。如果一个参数为正 0，另一个参数为负 0，那么结果为负 0。

@param   a   参数。
@param   b   另一个参数。
@return  <code>a</code> 和 <code>b</code> 中的较小者。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.min(double a, double b)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回两个 <code>double</code> 值中较小的一个。也就是说，结果为更接近负无穷大的值。如果参数值相同，那么结果也是同一个值。如果任一值为 NaN，那么结果为 NaN。与数值比较运算不同，该方法认为负 0 严格小于正 0。如果一个参数为正 0，另一个参数为负 0，那么结果为负 0。

@param   a   参数。
@param   b   另一个参数。
@return   <code>a</code> 和 <code>b</code> 中的较小者。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.ulp(double d)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回参数的 ulp 大小。<code>double</code> 值的 ulp 是此浮点值与下一个数值较大的 <code>double</code> 值之间的正距离。注意，对于非 NaN <i>x</i>，<code>ulp(-<i>x</i>) == ulp(<i>x</i>)</code>。
 
<p>特殊情况如下：
<ul>
<li> 如果参数为 NaN，那么结果为 NaN。
<li> 如果参数为正的或负的无穷大，那么结果为正无穷大。
<li> 如果参数为正 0 或负 0，那么结果为 <code>Double.MIN_VALUE</code>。
<li> 如果参数为 &plusmn;<code>Double.MAX_VALUE</code>，那么结果等于 2<sup>971</sup>。
</ul>

@param d 要返回 ulp 的浮点值
@return 参数的 ulp 大小
@author Joseph D. Darcy
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static float java.lang.Math.ulp(float f)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回参数的 ulp 大小。<code>float</code> 值的 ulp 是该浮点值与下一个数值较大的 <code>float</code> 值之间的正距离。注意，对于非 NaN <i>x</i>，<code>ulp(-<i>x</i>) == ulp(<i>x</i>)</code>。
 
<p>特殊情况如下：
<ul>
<li> 如果参数为 NaN，那么结果为 NaN。
<li> 如果参数为正的或负的无穷大，那么结果为正无穷大。
<li> 如果参数为正 0 或负 0，那么结果为 <code>Float.MIN_VALUE</code>。
<li> 如果参数为 &plusmn;<code>Float.MAX_VALUE</code>，那么结果等于 2<sup>104</sup>。
</ul>

@param f 要返回 ulp 的浮点值
@return 参数的 ulp 大小
@author Joseph D. Darcy
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.signum(double d)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回参数的符号函数；如果参数为 0，则返回 0；如果参数大于 0，则返回 1.0；如果参数小于 0，则返回 -1.0。

<p>特殊情况如下：
<ul>
<li> 如果参数为 NaN，那么结果为 NaN。
<li> 如果参数为正 0 或负 0，那么结果与参数相同。
</ul>

@param d 要返回符号函数的浮点值
@return 参数的符号函数
@author Joseph D. Darcy
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static float java.lang.Math.signum(float f)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回参数的符号函数；如果参数为 0，则返回 0；如果参数大于 0，则返回 1.0；如果参数小于 0，则返回 -1.0。

<p>特殊情况如下：
<ul>
<li> 如果参数为 NaN，那么结果为 NaN。
<li> 如果参数为正 0 或负 0，那么结果与参数相同。
</ul>

@param f 要返回符号函数的浮点值
@return 参数的符号函数
@author Joseph D. Darcy
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.sinh(double x)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>double</code> 值的双曲线正弦。<i>x</i> 双曲线正弦的定义是 (<i>e<sup>x</sup>&nbsp;-&nbsp;e<sup>-x</sup></i>)/2，其中 <i>e</i> 是{@linkplain Math#E 欧拉数}。

<p>特殊情况如下：
<ul>

<li>如果参数为 NaN，那么结果为 NaN。

<li>如果参数为无穷大，那么结果为无穷大，符号与参数符号相同。

<li>如果参数为 0，那么结果为 0，符号与参数符号相同。

</ul>

<p>计算结果必须在准确结果的 2.5 ulp 范围内。

@param   x 要返回其双曲线正弦的数字。
@return  <code>x</code> 的双曲线正弦。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.cosh(double x)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>double</code> 值的双曲线余弦。<i>x</i> 的双曲线余弦的定义是 (<i>e<sup>x</sup>&nbsp;+&nbsp;e<sup>-x</sup></i>)/2，其中 <i>e</i> 是{@linkplain Math#E 欧拉数}。

<p>特殊情况如下：
<ul>

<li>如果参数为 NaN，那么结果为 NaN。

<li>如果参数为无穷大，那么结果为正无穷大。

<li>如果参数为 0，那么结果为 <code>1.0</code>。

</ul>

<p>计算结果必须在准确结果的 2.5 ulp 范围内。

@param   x 要返回其双曲线余弦的数字。
@return  <code>x</code> 的双曲线余弦。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.tanh(double x)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>double</code> 值的双曲线余弦。<i>x</i> 的双曲线正切的定义是 (<i>e<sup>x</sup>&nbsp;-&nbsp;e<sup>-x</sup></i>)/(<i>e<sup>x</sup>&nbsp;+&nbsp;e<sup>-x</sup></i>)，即 {@linkplain Math#sinh sinh(<i>x</i>)}/{@linkplain Math#cosh cosh(<i>x</i>)}。注意，准确的 tanh 绝对值始终小于 1。

<p>特殊情况如下：
<ul>

<li>如果参数为 NaN，那么结果为 NaN。

<li>如果参数为 0，那么结果为 0，符号与参数符号相同。

<li>如果参数为正无穷大，那么结果为 <code>+1.0</code>。

<li>如果参数为负无穷大，那么结果为 <code>-1.0</code>。
  
</ul>

<p>计算结果必须在准确结果的 2.5 ulp 范围内。任何有限输入值的 <code>tanh</code> 结果的绝对值必定小于等于 1。注意，一旦准确的 tanh 结果在极限值 &plusmn;1 的 1/2 ulp 内，则应该返回有正确符号的 &plusmn;<code>1.0</code>。

@param   x 要返回其双曲线正切的数字。
@return  <code>x</code> 的双曲线正切。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.hypot(double x, double y)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)，没有中间溢出或下溢。

<p>特殊情况如下：
<ul>

<li> 如果两个参数都为无穷大，那么结果为正无穷大。

<li> 如果两个参数都为 NaN 且都不是无穷大，那么结果为 NaN。

</ul>

<p>计算结果必须在准确结果的 1 ulp 范围内。如果一个参数保持常量，那么在另一个参数中，结果必须具有半单调性。

@param x 一个值
@param y 一个值
@return 没有中间溢出或下溢的 sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.expm1(double x)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <i>e</i><sup>x</sup>&nbsp;-1。注意，对于接近 0 的 <i>x</i> 值，<code>expm1(x)</code>&nbsp;+&nbsp;1 的准确和比 <code>exp(x)</code> 更接近 <i>e</i><sup>x</sup> 的真实结果。

<p>特殊情况如下：
<ul>
<li>如果参数为 NaN，那么结果为 NaN。

<li>如果参数为正无穷大，那么结果为正无穷大。

<li>如果参数为负无穷大，那么结果为 -1.0。

<li>如果参数为 0，那么结果为 0，符号与参数符号相同。

</ul>

<p>计算结果必须在准确结果的 1 ulp 范围内。结果必须具有半单调性。任何有限输入值的 <code>expm1</code> 的结果一定大于或等于 <code>-1.0</code>。注意，一旦 <i>e</i><sup><code>x</code></sup>&nbsp;-&nbsp;1 的准确结果在极限值 -1 的 1/2 ulp 范围内，则应该返回 <code>-1.0</code>。

@param   x   在 <i>e</i><sup><code>x</code></sup>&nbsp;-1 的计算中 <i>e</i> 的指数。
@return 值 <i>e</i><sup><code>x</code></sup>&nbsp;-&nbsp;1。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.log1p(double x)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回参数与 1 之和的自然对数。注意，对于小的 <code>x</code> 值，<code>log1p(x)</code> 的结果比 <code>log(1.0+x)</code> 的浮点计算结果更接近 ln(1 + <code>x</code>) 的实际结果。

<p>特殊情况如下：

<ul>

<li>如果参数为 NaN 或小于 -1，那么结果为 NaN。

<li>如果参数为正无穷大，那么结果为正无穷大。

<li>如果参数为负数，那么结果为负无穷大。

<li>如果参数为 0，那么结果为 0，符号与参数符号相同。

</ul>

<p>计算结果必须在准确结果的 1 ulp 范围内。结果必须具有半单调性。

@param   x   一个值
@return   值 ln(<code>x</code>&nbsp;+&nbsp;1)，即 <code>x</code>&nbsp;+&nbsp;1 的自然对数
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.copySign(double magnitude, double sign)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回带有第二个浮点参数符号的第一个浮点参数。注意，与 {@link
 StrictMath#copySign(double, double) StrictMath.copySign} 方法不同，此方法不要求将 NaN <code>sign</code> 参数视为正值；允许实现将某些 NaN 参数视为正，将另一些视为负，以获得更好的性能。

 @param magnitude  提供结果数值的参数
 @param sign   提供结果符号的参数
 @return 一个值，带有 <code>magnitude</code> 的数值，<code>sign</code> 的符号。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static float java.lang.Math.copySign(float magnitude, float sign)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回带有第二个浮点参数符号的第一个浮点参数。注意，与 {@link
 StrictMath#copySign(double, double) StrictMath.copySign} 方法不同，此方法不要求将 NaN <code>sign</code> 参数视为正值；允许实现将某些 NaN 参数视为正，将另一些视为负，以获得更好的性能。

 @param magnitude  提供结果数值的参数
 @param sign   提供结果符号的参数
 @return 一个值，带有 <code>magnitude</code> 的数值，<code>sign</code> 的符号。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Math.getExponent(float f)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 {@code float} 表示形式中使用的无偏指数。特殊情况如下：

 <ul>
 <li>如果参数为 NaN 或无穷大，那么结果为 {@link Float#MAX_EXPONENT} + 1。
 <li>如果参数为 0 或 subnormal，那么结果为 {@link Float#MIN_EXPONENT} -1。
 </ul>
 @param f 一个 {@code float} 值
 @return 参数的无偏指数
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Math.getExponent(double d)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 {@code double} 表示形式中使用的无偏指数。特殊情况如下：  

 <ul>
 <li>如果参数为 NaN 或无穷大，那么结果为 {@link Double#MAX_EXPONENT} + 1。
 <li>如果参数为 0 或 subnormal，那么结果为 {@link Double#MIN_EXPONENT} -1。

 </ul>
 @param d {@code double} 值
 @return 参数的无偏指数
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.nextAfter(double start, double direction)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回第一个参数和第二个参数之间与第一个参数相邻的浮点数。如果两个参数比较起来相等，则返回第二个参数。

 <p>
特殊情况如下：
 <ul>
 <li>如果任一参数为 NaN，则返回 NaN。

 <li>如果两个参数都为有符号的 0，则不做更改地返回 {@code direction}（根据要求，如果参数比较起来相等，将返回第二个参数）。

 <li>如果 {@code start} 为 &plusmn;{@link Double#MIN_VALUE}，而 {@code direction} 的值要求结果为一个比 {@code start} 小的数值，那么将返回 0，并带有与 {@code start} 相同的符号。

 <li>如果 {@code start} 为无穷大，而 {@code direction} 的值要求结果为一个比 {@code start} 小的数值，则返回 {@link Double#MAX_VALUE}，并带有与 {@code start} 相同的符号。

 <li>如果 {@code start} 等于 &plusmn;{@link Double#MAX_VALUE}，而 {@code direction} 的值要求结果为一个比 {@code start} 大的数值，则返回无穷大，并带有与 {@code start} 相同的符号。
</ul>

 @param start  起始浮点值。
 @param direction 一个值，指示应返回 {@code start} 的某个邻数还是 {@code start}。
 @return {@code start} 和 {@code direction} 之间与 {@code start} 相邻的浮点数。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static float java.lang.Math.nextAfter(float start, double direction)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回第一个参数和第二个参数之间与第一个参数相邻的浮点数。如果两个参数比较起来相等，则返回一个与第二个参数相等的值。

 <p>
 特殊情况如下：
 <ul>
 <li>如果任一参数为 NaN，则返回 NaN。

 <li>如果两个参数都为有符号的 0，则返回等于 {@code direction} 的值。

 <li>如果 {@code start} 为 &plusmn;{@link Float#MIN_VALUE}，而 {@code direction} 的值要求结果为一个比 {@code start} 小的数值，那么将返回 0，并带有与 {@code start} 相同的符号。

 <li>如果 {@code start} 为无穷大，而 {@code direction} 的值要求结果为一个比 {@code start} 小的数值，则返回 {@link Float#MAX_VALUE}，并带有与 {@code start} 相同的符号。

 <li>如果 {@code start} 等于 &plusmn;{@link Float#MAX_VALUE}，而 {@code direction} 的值要求结果为一个比 {@code start} 大的数值，则返回无穷大，并带有与 {@code start} 相同的符号。
 </ul>

 @param start  起始浮点值。
 @param direction 一个值，指示应返回 {@code start} 的某个邻数还是 {@code start}。
 @return {@code start} 和 {@code direction} 之间与 {@code start} 相邻的浮点数。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.nextUp(double d)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 {@code d} 和正无穷大之间与 {@code d} 相邻的浮点值。此方法在语义上等同于 {@code nextAfter(d, Double.POSITIVE_INFINITY)}；但是，{@code nextUp} 实现的返回速度可能比其等价 {@code nextAfter} 调用快。

 <p>特殊情况如下：
 <ul>
 <li>如果参数为 NaN，那么结果为 NaN。

 <li>如果参数为正无穷大，那么结果为正无穷大。

 <li>如果参数为 0，那么结果为 {@link Double#MIN_VALUE}。

 </ul>

 @param d 起始浮点值。
 @return 离正无穷大较近的相邻浮点值。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static float java.lang.Math.nextUp(float f)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 {@code f} 和正无穷大之间与 {@code f} 相邻的浮点值。此方法在语义上等同于 {@code nextAfter(f, Float.POSITIVE_INFINITY)}；但是，{@code nextUp} 实现的返回速度可能比其等价 {@code nextAfter} 调用快。

 <p>特殊情况如下：
 <ul>
 <li> 如果参数为 NaN，那么结果为 NaN。

 <li> 如果参数为正无穷大，那么结果为正无穷大。

 <li> 如果参数为 0，那么结果为 {@link Float#MIN_VALUE}

 </ul>

 @param f 起始浮点值
 @return 离正无穷大较近的相邻浮点值。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.lang.Math.scalb(double d, int scaleFactor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回 {@code d} &times;
 2<sup>{@code scaleFactor}</sup>，其舍入方式如同将一个正确舍入的浮点值乘以 double 值集合中的一个值。有关浮点值集合的讨论，请参阅 Java 语言规范。如果结果的指数在 {@link Double#MIN_EXPONENT} 和 {@link Double#MAX_EXPONENT} 之间，则可以正确地计算答案；如果结果的指数大于 {@code Double.MAX_EXPONENT}，则返回无穷大。注意，如果结果为 subnormal，则可能丢失精度；也就是说，{@code scalb(x, n)} 为 subnormal 时，{@code scalb(scalb(x, n), -n)} 可能不等于 <i>x</i>。结果为非 NaN 时，结果的符号将与 {@code d} 相同。

<p>
 特殊情况如下：
 <ul>
 <li> 如果第一个参数为 NaN，则返回 NaN。
 <li> 如果第一个参数为无穷大，则返回带有相同符号的无穷大。
 <li> 如果第一个参数为 0，则返回带有相同符号的 0。
 </ul>

 @param d 要使用 2 的次幂缩放的数。
 @param scaleFactor 用来缩放 {@code d} 的 2 的次幂
 @return {@code d} &times; 2<sup>{@code scaleFactor}</sup>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static float java.lang.Math.scalb(float f, int scaleFactor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回 {@code f} &times;
 2<sup>{@code scaleFactor}</sup>，其舍入方式如同将一个正确舍入的浮点值乘以 float 值集合中的一个值。有关浮点值集合的讨论，请参阅 Java 语言规范。如果结果的指数在 {@link Float#MIN_EXPONENT} 和 {@link Float#MAX_EXPONENT} 之间，则可以正确地计算答案；如果结果的指数大于 {@code Float.MAX_EXPONENT}，则返回无穷大。注意，如果结果为 subnormal，则可能丢失精度；也就是说，{@code scalb(x, n)} 为 subnormal 时，{@code scalb(scalb(x, n), -n)} 可能不等于 <i>x</i>。结果为非 NaN 时，结果的符号将与 {@code f} 相同。

<p>
 特殊情况如下：
 <ul>
 <li> 如果第一个参数为 NaN，则返回 NaN。
 <li> 如果第一个参数为无穷大，则返回带有相同符号的无穷大。
 <li> 如果第一个参数为 0，则返回带有相同符号的 0。
 </ul>

 @param f 要使用 2 的次幂缩放的数。
 @param scaleFactor 用来缩放 {@code f} 的 2 的次幂
 @return {@code f} &times; 2<sup>{@code scaleFactor}</sup>
 @since 1.6

<!-- END DATA -->
