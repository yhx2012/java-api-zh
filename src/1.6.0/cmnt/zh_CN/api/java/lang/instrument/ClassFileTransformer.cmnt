<!-- BEGIN KEY -->
public interface java.lang.instrument.ClassFileTransformer
<!-- END KEY -->
<!-- BEGIN DATA -->
一个提供此接口的实现以转换类文件的代理。转换在 JVM 定义类之前发生。
 <P>
注意，根据 <i>The Java Virtual Machine Specification</i> 的 <a href="http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#80959">The class File Format</a> 一章中的定义使用术语<i>类文件</i>，它指以类文件格式表示的字节序列，无论这些字符是否驻留在文件中。

@see     java.lang.instrument.Instrumentation
@see     java.lang.instrument.Instrumentation#addTransformer
@see     java.lang.instrument.Instrumentation#removeTransformer
@since   1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] java.lang.instrument.ClassFileTransformer.transform(ClassLoader loader, String className, java.lang.Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws java.lang.instrument.IllegalClassFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法的实现可以转换提供的类文件，并返回一个新的替换类文件。

<P>
有两种装换器，由 {@link java.lang.instrument.Instrumentation#addTransformer(ClassFileTransformer,boolean)} 的 <code>canRetransform</code> 参数确定：
  <ul>
    <li><i>可重转换</i> 转换器，将 <code>canRetransform</code> 设为 true 可添加这种转换器
    </li>
    <li><i>不可重转换</i> 转换器，将 <code>canRetransform</code> 设为 false 或者使用 {@link java.lang.instrument.Instrumentation#addTransformer(ClassFileTransformer)} 可添加这种转换器
    </li>
  </ul>

<P>
在转换器使用 {@link java.lang.instrument.Instrumentation#addTransformer(ClassFileTransformer,boolean)
 addTransformer} 注册之后，每次定义新类和重定义类时都将调用该转换器。每次重转换类时还将调用可重转换转换器。对新类定义的请求通过 {@link java.lang.ClassLoader#defineClass ClassLoader.defineClass} 或其本机等价方法进行。对类重定义的请求通过 {@link java.lang.instrument.Instrumentation#redefineClasses Instrumentation.redefineClasses} 或其本机等价方法进行。对类重转换的请求将通过 {@link java.lang.instrument.Instrumentation#retransformClasses Instrumentation.retransformClasses} 或其本机等价方法进行。转换器是在验证或应用类文件字节之前的请求处理过程中调用的。
 当存在多个转换器时，转换将由 <code>transform</code> 调用链组成。
也就是说，一个 <code>transform</code> 调用返回的 byte 数组将成为下一个调用的输入（通过 <code>classfileBuffer</code> 参数）。

 <P>
 转换将按以下顺序应用：
  <ul>
    <li>不可重转换转换器
    </li>
    <li>不可重转换本机转换器
    </li>
    <li>可重转换转换器
    </li>
    <li>可重转换本机转换器
    </li>
  </ul>

 <P>
对于重转换，不会调用不可重转换转换器，而是重用前一个转换的结果。对于所有其他情况，调用此方法。在每个这种调用组中，转换器将按照注册的顺序调用。本机转换器由 Java 虚拟机 Tool 接口中的 <code>ClassFileLoadHook</code> 事件提供。

 <P>
第一个转换器的输入（通过 <code>classfileBuffer</code> 参数）如下：
  <ul>
    <li>对于新的类定义，是传递给 <code>ClassLoader.defineClass</code> 的 byte
    </li>
    <li>对于类重定义，是 <code>definitions.getDefinitionClassFile()</code>，其中 <code>definitions</code> 是 {@link java.lang.instrument.Instrumentation#redefineClasses
         Instrumentation.redefineClasses} 的参数
    </li>
    <li>对于类重转换，是传递给新类定义的 byte，或者是最后一个重定义（如果有重定义），所有不可转换转换器进行的转换都将自动重新应用并保持不变；有关细节，请参阅 {@link java.lang.instrument.Instrumentation#retransformClasses
          Instrumentation.retransformClasses}
    </li>
  </ul>

 <P>
如果实现方法确定不需要进行转换，则应返回 <code>null</code>。否则，它将创建一个新的 <code>byte[]</code> 数组，将输入 <code>classfileBuffer</code> 连同所有需要的转换复制到其中，并返回这个新数组。不得修改输入 <code>classfileBuffer</code>。

 <P>
在重转换和重定义中，转换器必须支持重定义语义：如果转换器在初始定义期间更改的类在以后要重转换或重定义，那么转换器必须确保第二个输出类文件是第一个输出类文件的合法重定义文件。

 <P>
如果转换器抛出异常（未捕获的异常），后续转换器仍然将被调用并加载，仍然将尝试重定义或重转换。因此，抛出异常与返回 <code>null</code> 的效果相同。若要使用转换器代码在生成未检验异常时防止不希望发生的行为，可以让转换器捕获 <code>Throwable</code>。
如果转换器认为 <code>classFileBuffer</code> 不表示一个有效格式的类文件，则将抛出 <code>IllegalClassFormatException</code>；尽管这与返回 null 的效果相同，但它便于对格式毁坏进行记录或调试。

@param loader                定义要转换的类加载器；如果是引导加载器，则为 <code>null</code>
@param className             完全限定类内部形式的类名称和 <i>The Java Virtual Machine Specification</i> 中定义的接口名称。例如，<code>&quot;java/util/List&quot;</code>。
@param classBeingRedefined   如果是被重定义或重转换触发，则为重定义或重转换的类；如果是类加载，则为 <code>null</code> 
@param protectionDomain      要定义或重定义的类的保护域 
@param classfileBuffer       类文件格式的输入字节缓冲区（不得修改）

@throws IllegalClassFormatException 如果输入不表示一个格式良好的类文件
@return  一个格式良好的类文件缓冲区（转换的结果），如果未执行转换,则返回 <code>null</code>。
@see Instrumentation#redefineClasses

<!-- END DATA -->
