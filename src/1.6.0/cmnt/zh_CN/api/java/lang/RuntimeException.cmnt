<!-- BEGIN KEY -->
public class java.lang.RuntimeException extends java.lang.Exception
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>RuntimeException</code> 是那些可能在 Java 虚拟机正常运行期间抛出的异常的超类。 
 <p>
可能在执行方法期间抛出但未被捕获的 <code>RuntimeException</code> 的任何子类都无需在 <code>throws</code> 子句中进行声明。 


 @author  Frank Yellin
 @version 1.13, 12/19/03
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.RuntimeException()
<!-- END KEY -->
<!-- BEGIN DATA -->
用 <code>null</code> 作为其详细消息构造一个新的运行时异常。原因尚未被初始化，可在以后通过调用 {@link #initCause} 对其进行初始化。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.RuntimeException(String message)
<!-- END KEY -->
<!-- BEGIN DATA -->
用指定的详细消息构造一个新的运行时异常。原因尚未被初始化，可在以后通过调用 {@link #initCause} 对其进行初始化。

@param   message   详细消息。保存详细消息以便以后通过 {@link #getMessage()} 方法获取它。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.RuntimeException(String message, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
用指定的详细消息和原因构造一个新的运行时异常。<p>注意，与 <code>cause</code> 相关的详细消息<i>不</i> 会自动地合并到此运行时异常的详细消息中。

 @param  message 详细消息（保存此消息，以便以后通过 {@link #getMessage()} 方法获取它)。
 @param  cause 原因（保存此原因，以便以后通过 {@link #getCause()} 方法获取它）。（允许使用 <tt>null</tt> 值，这表明原因不存在或是未知的。）
 @since  1.4
         

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.RuntimeException(Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
用指定的原因和详细消息 <tt>(cause==null &#063; null :cause.toString()）</tt> 构造一个新的运行时异常（它通常包含类和 <tt>cause</tt> 的详细消息）。该构造方法对于那些与其他可抛出异常的包装器一样的运行时异常来说很有用。

 @param  cause  原因（保存此原因，以便以后通过 {@link #getCause()} 方法获取它）。（允许使用 <tt>null</tt> 值，这表明原因不存在或是未知的。）
 @since  1.4
         

<!-- END DATA -->
