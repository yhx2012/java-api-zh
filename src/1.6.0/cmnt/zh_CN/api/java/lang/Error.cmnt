<!-- BEGIN KEY -->
public class java.lang.Error extends java.lang.Throwable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Error</code> 是 <code>Throwable</code> 的子类，用于指示合理的应用程序不应该试图捕获的严重问题。大多数这样的错误都是异常条件。虽然 <code>ThreadDeath</code> 错误是一个&ldquo;正规&rdquo;的条件，但它也是 <code>Error</code> 的子类，因为大多数应用程序都不应该试图捕获它。 
 <p>
在执行该方法期间，无需在其 <code>throws</code> 子句中声明可能抛出但是未能捕获的 <code>Error</code> 的任何子类，因为这些错误可能是再也不会发生的异常条件。 

@author  Frank Yellin
@version 1.16, 12/19/03
@see     java.lang.ThreadDeath
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Error()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造详细消息为 <code>null</code> 的新错误。原因尚未进行初始化，可在以后通过调用 {@link #initCause} 对其进行初始化。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Error(String message)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带指定详细消息的新错误。原因尚未进行初始化，可在以后通过调用 {@link #initCause} 对其进行初始化。

@param   message  详细消息。保存详细消息，以便以后通过 {@link #getMessage()} 方法获取它。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Error(String message, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带指定详细消息和原因的新错误。<p>注意，与 <code>cause</code> 相关的详细消息<i>不是</i> 自动合并到这个错误的详细消息中的。

@param  message  详细消息（保存此消息，以便以后通过 {@link #getMessage()} 方法获取它）。
@param  cause  原因（保存此原因，以便以后通过 {@link #getCause()} 方法获取它）。
（允许该参数为 <tt>null</tt> 值，指出原因是不存在的或是未知的。）
@since  1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Error(Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定的原因和 <tt>(cause==null ? null :cause.toString())</tt> 的详细消息来构造新的错误（通常包含 <tt>cause</tt> 的类和详细消息）。对于错误而言，此构造方法与其他 throwable 的包装器一样有用。

@param  cause  原因（保存此原因，以便以后通过 {@link #getCause()} 方法获取它）。
（允许该参数为 <tt>null</tt> 值，指出原因是不存在的或是未知的。）
@since  1.4

<!-- END DATA -->
