<!-- BEGIN KEY -->
public interface java.util.Map
<!-- END KEY -->
<!-- BEGIN DATA -->
将键映射到值的对象。一个映射不能包含重复的键；每个键最多只能映射到一个值。

<p>此接口取代 <tt>Dictionary</tt> 类，后者完全是一个抽象类，而不是一个接口。

<p><tt>Map</tt> 接口提供三种<i>collection 视图</i>，允许以键集、值集或键-值映射关系集的形式查看某个映射的内容。映射<i>顺序</i> 定义为迭代器在映射的 collection 视图上返回其元素的顺序。某些映射实现可明确保证其顺序，如 <tt>TreeMap</tt> 类；另一些映射实现则不保证顺序，如 <tt>HashMap</tt> 类。

<p>注：将可变对象用作映射键时必须格外小心。当对象是映射中某个键时，如果以影响 <tt>equals</tt> 比较的方式更改了对象的值，则映射的行为将是不确定的。此项禁止的一种特殊情况是不允许某个映射将自身作为一个键包含。虽然允许某个映射将自身作为值包含，但请格外小心：在这样的映射上 <tt>equals</tt> 和 <tt>hashCode</tt> 方法的定义将不再是明确的。

<p>所有通用的映射实现类应该提供两个“标准的”构造方法：一个 void（无参数）构造方法，用于创建空映射；一个是带有单个 <tt>Map</tt> 类型参数的构造方法，用于创建一个与其参数具有相同键-值映射关系的新映射。实际上，后一个构造方法允许用户复制任意映射，生成所需类的一个等价映射。尽管无法强制执行此建议（因为接口不能包含构造方法），但是 JDK 中所有通用的映射实现都遵从它。

<p>此接口中包含的“破坏”方法可修改其操作的映射，如果此映射不支持该操作，这些方法将抛出 <tt>UnsupportedOperationException</tt>。如果是这样，那么在调用对映射无效时，这些方法可以（但不要求）抛出 <tt>UnsupportedOperationException</tt>。例如，如果某个不可修改的映射（其映射关系是“重叠”的）为空，则对该映射调用 {@link #putAll(Map)} 方法时，可以（但不要求）抛出异常。

<p>某些映射实现对可能包含的键和值有所限制。例如，某些实现禁止 null 键和值，另一些则对其键的类型有限制。尝试插入不合格的键或值将抛出一个未经检查的异常，通常是 <tt>NullPointerException</tt> 或 <tt>ClassCastException</tt>。试图查询是否存在不合格的键或值可能抛出异常，或者返回 false；某些实现将表现出前一种行为，而另一些则表现后一种。一般来说，试图对不合格的键或值执行操作且该操作的完成不会导致不合格的元素被插入映射中时，将可能抛出一个异常，也可能操作成功，这取决于实现本身。这样的异常在此接口的规范中标记为“可选”。

<p>此接口是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

<p>Collections Framework 接口中的很多方法是根据 {@link Object#equals(Object) equals} 方法定义的。例如，{@link #containsKey(Object) containsKey(Object key)} 方法的规范中写道：“当且仅当此映射包含针对满足 <tt>(key==null ? k==null : key.equals(k))</tt> 的键 <tt>k</tt> 的映射关系时，返回 <tt>true</tt>”。<i>不</i> 应将此规范解释为：调用具有非空参数 <tt>key</tt> 的 <tt>Map.containsKey</tt> 将导致对任意的键 <tt>k</tt> 调用 <tt>key.equals(k)</tt>。实现可随意进行优化，以避免调用 <tt>equals</tt>，例如，可首先比较两个键的哈希码（{@link Object#hashCode()} 规范保证哈希码不相等的两个对象不会相等）。一般来说，只要实现者认为合适，各种 Collections Framework 接口的实现可随意利用底层 {@link Object} 方法的指定行为。

@param <K> 此映射所维护的键的类型
@param <V> 映射值的类型

@author  Josh Bloch
@version 1.56, 04/21/06
@see HashMap
@see TreeMap
@see Hashtable
@see SortedMap
@see Collection
@see Set
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.Map.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射中的键-值映射关系数。如果该映射包含的元素大于 <tt>Integer.MAX_VALUE</tt>，则返回 <tt>Integer.MAX_VALUE</tt>。

@return 此映射中的键-值映射关系数

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.Map.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此映射未包含键-值映射关系，则返回 <tt>true</tt>。

@return 如果此映射未包含键-值映射关系，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.Map.containsKey(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此映射包含指定键的映射关系，则返回 <tt>true</tt>。更确切地讲，当且仅当此映射包含针对满足 <tt>(key==null ? k==null : key.equals(k))</tt> 的键 <tt>k</tt> 的映射关系时，返回 <tt>true</tt>。（最多只能有一个这样的映射关系）。

@param key 测试是否存在于此映射中的键
@return 如果此映射包含指定键的映射关系，则返回 <tt>true</tt>
@throws ClassCastException 如果该键对于此映射是不合适的类型（可选）
@throws NullPointerException 如果指定键为 null 并且此映射不允许 null 键（可选）

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.Map.containsValue(Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此映射将一个或多个键映射到指定值，则返回 <tt>true</tt>。更确切地讲，当且仅当此映射至少包含一个对满足 <tt>(value==null ? v==null : value.equals(v))</tt> 的值 <tt>v</tt> 的映射关系时，返回 <tt>true</tt>。对于大多数 <tt>Map</tt> 接口的实现而言，此操作需要的时间可能与映射大小呈线性关系。

@param value 测试是否存在于此映射中的值
@return 如果此映射将一个或多个键映射到指定值，则返回 <tt>true</tt>
@throws ClassCastException 如果该值对于此映射是不合适的类型（可选）
@throws NullPointerException 如果指定值为 null 并且此映射不允许 null 值（可选）

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.Map.get(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定键所映射的值；如果此映射不包含该键的映射关系，则返回 {@code null}。

<p>更确切地讲，如果此映射包含满足 {@code (key==null ? k==null :
key.equals(k))} 的键 {@code k} 到值 {@code v} 的映射关系，则此方法返回 {@code v}；否则返回 {@code null}。（最多只能有一个这样的映射关系）。

<p>如果此映射允许 null 值，则返回 {@code null} 值并不<i>一定</i> 表示该映射不包含该键的映射关系；也可能该映射将该键显示地映射到 {@code null}。使用 {@link #containsKey containsKey} 操作可区分这两种情况。

@param key 要返回其关联值的键
@return 指定键所映射的值；如果此映射不包含该键的映射关系，则返回 {@code null}
@throws ClassCastException 如果该键对于此映射是不合适的类型（可选）
@throws NullPointerException 如果指定键为 null 并且此映射不允许 null 键（可选）

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.Map.put(K key, V value)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的值与此映射中的指定键关联（可选操作）。如果此映射以前包含一个该键的映射关系，则用指定值替换旧值（当且仅当 {@link #containsKey(Object) m.containsKey(k)} 返回 <tt>true</tt> 时，才能说映射 <tt>m</tt> 包含键 <tt>k</tt> 的映射关系）。

@param key 与指定值关联的键
@param value 与指定键关联的值
@return 以前与 <tt>key</tt> 关联的值，如果没有针对 <tt>key</tt> 的映射关系，则返回 <tt>null</tt>。（如果该实现支持 <tt>null</tt> 值，则返回 <tt>null</tt> 也可能表示此映射以前将 <tt>null</tt> 与 <tt>key</tt> 关联）。
@throws UnsupportedOperationException 如果此映射不支持 <tt>put</tt> 操作
@throws ClassCastException 如果指定键或值的类不允许将其存储在此映射中
@throws NullPointerException 如果指定键或值为 null，并且此映射不允许 null 键或值
@throws IllegalArgumentException 如果指定键或值的某些属性不允许将其存储在此映射中

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.Map.remove(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果存在一个键的映射关系，则将其从此映射中移除（可选操作）。更确切地讲，如果此映射包含从满足 <code>(key==null ? k==null :key.equals(k))</code> 的键 <tt>k</tt> 到值 <tt>v</tt> 的映射关系，则移除该映射关系。（该映射最多只能包含一个这样的映射关系。）

<p>返回此映射中以前关联该键的值，如果此映射不包含该键的映射关系，则返回 <tt>null</tt>。

<p>如果此映射允许 null 值，则返回 <tt>null</tt> 值并不<i>一定</i> 表示该映射不包含该键的映射关系；也可能该映射将该键显示地映射到 <tt>null</tt>。

<p>调用返回后，此映射将不再包含指定键的映射关系。

@param key 从映射中移除其映射关系的键
@return 以前与 <tt>key</tt> 关联的值；如果没有 <tt>key</tt> 的映射关系，则返回 <tt>null</tt>。
@throws UnsupportedOperationException 如果此映射不支持 <tt>remove</tt> 操作
@throws ClassCastException 如果该键对于此映射是不合适的类型（可选）
@throws NullPointerException 如果指定键为 null 并且此映射不允许 null 键（可选）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.Map.putAll(java.util.Map<? extends K, ? extends V> m)
<!-- END KEY -->
<!-- BEGIN DATA -->
从指定映射中将所有映射关系复制到此映射中（可选操作）。对于指定映射中的每个键 <tt>k</tt> 到值 <tt>v</tt> 的映射关系，此调用等效于对此映射调用一次 {@link #put(Object,Object) put(k, v)}。如果正在进行此操作的同时修改了指定的映射，则此操作的行为是不确定的。

@param m 要存储在此映射中的映射关系
@throws UnsupportedOperationException 如果此映射不支持 <tt>putAll</tt> 操作
@throws ClassCastException 如果指定映射中的键或值的类不允许将其存储在此映射中
@throws NullPointerException 如果指定映射为 null，或者此映射不允许 null 键或值，并且指定的映射包含 null 键或值
@throws IllegalArgumentException 如果指定映射中的键或值的某些属性不允许将其存储在此映射中

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.Map.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
从此映射中移除所有映射关系（可选操作）。此调用返回后，该映射将为空。

@throws UnsupportedOperationException 如果此映射不支持 <tt>clear</tt> 操作

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<K> java.util.Map.keySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射中包含的键的 {@link Set} 视图。该 set 受映射支持，所以对映射的更改可在此 set 中反映出来，反之亦然。如果对该 set 进行迭代的同时修改了映射（通过迭代器自己的 <tt>remove</tt> 操作除外），则迭代结果是不确定的。set 支持元素移除，通过 <tt>Iterator.remove</tt>、<tt>Set.remove</tt>、<tt>removeAll</tt>、<tt>retainAll</tt> 和 <tt>clear</tt> 操作可从映射中移除相应的映射关系。它不支持 <tt>add</tt> 或 <tt>addAll</tt> 操作。

@return 此映射中包含的键的 set 视图

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Collection<V> java.util.Map.values()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射中包含的值的 {@link Collection} 视图。该 collection 受映射支持，所以对映射的更改可在此 collection 中反映出来，反之亦然。如果对该 collection 进行迭代的同时修改了映射（通过迭代器自己的 <tt>remove</tt> 操作除外），则迭代结果是不确定的。collection 支持元素移除，通过 <tt>Iterator.remove</tt>、<tt>Collection.remove</tt>、<tt>removeAll</tt>、<tt>retainAll</tt> 和 <tt>clear</tt> 操作可从映射中移除相应的映射关系。它不支持 <tt>add</tt> 或 <tt>addAll</tt> 操作。

@return 此映射中包含的值的 collection 视图

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.util.Map.Entry<K, V>> java.util.Map.entrySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射中包含的映射关系的 {@link Set} 视图。该 set 受映射支持，所以对映射的更改可在此 set 中反映出来，反之亦然。如果对该 set 进行迭代的同时修改了映射（通过迭代器自己的 <tt>remove</tt> 操作，或者通过对迭代器返回的映射项执行 <tt>setValue</tt> 操作除外），则迭代结果是不确定的。set 支持元素移除，通过 <tt>Iterator.remove</tt>、<tt>Set.remove</tt>、<tt>removeAll</tt>、<tt>retainAll</tt> 和 <tt>clear</tt> 操作可从映射中移除相应的映射关系。它不支持 <tt>add</tt> 或 <tt>addAll</tt> 操作。

@return 此映射中包含的映射关系的 set 视图

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.Map.equals(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较指定的对象与此映射是否相等。如果给定的对象也是一个映射，并且这两个映射表示相同的映射关系，则返回 <tt>true</tt>。更确切地讲，如果 <tt>m1.entrySet().equals(m2.entrySet())</tt>，则两个映射 <tt>m1</tt> 和 <tt>m2</tt> 表示相同的映射关系。这可以确保 <tt>equals</tt> 方法在不同的 <tt>Map</tt> 接口实现间运行正常。

@param o 要与此映射进行相等性比较的对象
@return 如果指定的对象等于此映射，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.Map.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射的哈希码值。映射的哈希码定义为此映射 <tt>entrySet()</tt> 视图中每个项的哈希码之和。这确保 <tt>m1.equals(m2)</tt> 对于任意两个映射 <tt>m1</tt> 和 <tt>m2</tt> 而言，都意味着 <tt>m1.hashCode()==m2.hashCode()</tt>，正如 {@link Object#hashCode} 常规协定的要求。

@return 此映射的哈希码值
@see Map.Entry#hashCode()
@see Object#equals(Object)
@see #equals(Object)

<!-- END DATA -->
