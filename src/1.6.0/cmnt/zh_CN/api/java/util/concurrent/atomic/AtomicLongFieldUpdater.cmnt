<!-- BEGIN KEY -->
public abstract class java.util.concurrent.atomic.AtomicLongFieldUpdater extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
基于反射的实用工具，可以对指定类的指定 {@code volatile long} 字段进行原子更新。此类用于原子数据结构，该结构中同一节点的几个字段都独立受原子更新控制。

<p> 注意，此类中 {@code compareAndSet} 方法的保证弱于其他原子类中该方法的保证。因为此类不能确保所有使用的字段都适合于原子访问目的，所以对于 <tt>compareAndSet</tt> 和 <tt>set</tt> 的其他调用，它仅可以保证原子性和可变语义。

@since 1.5
@author Doug Lea
@param <T> 保持可更新字段的对象类型

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.concurrent.atomic.AtomicLongFieldUpdater()
<!-- END KEY -->
<!-- BEGIN DATA -->
受保护的无操作构造方法，供子类使用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.concurrent.atomic.AtomicLongFieldUpdater<U> java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater(java.lang.Class<U> tclass, String fieldName)
<!-- END KEY -->
<!-- BEGIN DATA -->
为对象创建并返回一个具有给定字段的更新器。需要 Class 参数检查反射类型和一般类型是否匹配。
@param tclass 保持字段的对象类
@param fieldName 要更新的字段名称
@return 更新器
@throws IllegalArgumentException 如果该字段不是可变的 long 类型
@throws RuntimeException 如果该类不保持字段，或者是错误的类型，将抛出 RuntimeException 和一个嵌套的基于反射的异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.util.concurrent.atomic.AtomicLongFieldUpdater.compareAndSet(T obj, long expect, long update)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前值 {@code ==} 预期值，则以原子方式将此更新器所管理的给定对象的字段设置为给定的更新值。对 {@code compareAndSet} 和 {@code set} 的其他调用，此方法可以确保原子性，但对于字段中的其他更改则不一定确保原子性。
@param obj 有条件地设置其字段的对象
@param expect 预期值
@param update 新值
@return 如果成功，则返回 true。
@throws ClassCastException 如果 {@code obj} 不是类的实例（该类处理在构造方法中建立的字段）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.util.concurrent.atomic.AtomicLongFieldUpdater.weakCompareAndSet(T obj, long expect, long update)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前值 {@code ==} 预期值，则以原子方式将此更新器所管理的给定对象的字段设置为给定的更新值。对 {@code compareAndSet} 和 {@code set} 的其他调用，此方法可以确保原子性，但对于字段中的其他更改则不一定确保原子性。

<p>可能<a href="package-summary.html#Spurious">意外失败</a>并且不提供排序保证，所以只有在很少的情况下才对 {@code compareAndSet} 进行适当地选择。

@param obj 有条件地设置其字段的对象
@param expect 预期值
@param update 新值
@return 如果成功，则返回 true。
@throws ClassCastException 如果 {@code obj} 不是类的实例（该类处理在构造方法中建立的字段）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.util.concurrent.atomic.AtomicLongFieldUpdater.set(T obj, long newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此更新器管理的给定对象的字段设置为给定更新值。对于 {@code compareAndSet} 的后续调用，此操作可以确保充当可变存储。
@param obj 要设置其字段的对象
@param newValue 新值


<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.util.concurrent.atomic.AtomicLongFieldUpdater.lazySet(T obj, long newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 最后将此更新器管理的给定对象的字段设置为给定更新值。

 @param obj 要设置其字段的对象
 @param newValue 新值
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract long java.util.concurrent.atomic.AtomicLongFieldUpdater.get(T obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此更新器管理的在给定对象的字段中保持的当前值。
@param obj 要获取其字段的对象
@return 当前值

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndSet(T obj, long newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此更新器管理的给定对象的字段以原子方式设置为给定值，并返回旧值。

@param obj 要获取并设置其字段的对象
@param newValue 新值
@return 以前的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndIncrement(T obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
以原子方式将此更新器管理的给定对象字段的当前值加 1。
@param obj 要获取并设置其字段的对象
@return 以前的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndDecrement(T obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
以原子方式将此更新器管理的给定对象字段当前值减 1。
@param obj 要获取并设置其字段的对象
@return 以前的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndAdd(T obj, long delta)
<!-- END KEY -->
<!-- BEGIN DATA -->
以原子方式将给定值添加到此更新器管理的给定对象的字段的当前值。
@param obj 要获取并设置其字段的对象
@param delta 要添加的值
@return 以前的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.concurrent.atomic.AtomicLongFieldUpdater.incrementAndGet(T obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
以原子方式将此更新器管理的给定对象字段当前值加 1。
@param obj 要获取并设置其字段的对象
@return 更新的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.concurrent.atomic.AtomicLongFieldUpdater.decrementAndGet(T obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
以原子方式将此更新器管理的给定对象字段当前值减 1。
@param obj 要获取并设置其字段的对象
@return 更新的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.concurrent.atomic.AtomicLongFieldUpdater.addAndGet(T obj, long delta)
<!-- END KEY -->
<!-- BEGIN DATA -->
以原子方式将给定值添加到此更新器管理的给定对象的字段的当前值。
@param obj 要获取并设置其字段的对象
@param delta 要添加的值
@return 更新的值

<!-- END DATA -->
