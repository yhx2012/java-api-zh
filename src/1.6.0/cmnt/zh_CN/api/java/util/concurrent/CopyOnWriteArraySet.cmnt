<!-- BEGIN KEY -->
public class java.util.concurrent.CopyOnWriteArraySet extends java.util.AbstractSet implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
对其所有操作使用内部 {@link CopyOnWriteArrayList} 的 {@link java.util.Set}。因此，它共享以下相同的基本属性：
 <ul>
<li>它最适合于具有以下特征的应用程序：set 大小通常保持很小，只读操作远多于可变操作，需要在遍历期间防止线程间的冲突。
<li>它是线程安全的。
<li>因为通常需要复制整个基础数组，所以可变操作（<tt>add</tt>、<tt>set</tt> 和 <tt>remove</tt> 等等）的开销很大。
<li>迭代器不支持可变 <tt>remove</tt> 操作。
<li>使用迭代器进行遍历的速度很快，并且不会与其他线程发生冲突。在构造迭代器时，迭代器依赖于不变的数组快照。
 </ul>

<p> <b>示例用法。</b> 以下代码使用一个写时复制（copy-on-write）的 set，以维护在状态更新时执行某项操作的一组 Handler 对象。 

 <pre>
 class Handler { void handle(); ... }

 class X {
    private final CopyOnWriteArraySet&lt;Handler&gt; handlers = new CopyOnWriteArraySet&lt;Handler&gt;();
    public void addHandler(Handler h) { handlers.add(h); }

    private long internalState;
    private synchronized void changeState() { internalState = ...; }

    public void update() {
       changeState();
       for (Handler handler : handlers)
           handler.handle();
    }
 }
 </pre>

<p>此类是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

@see CopyOnWriteArrayList
@since 1.5
@author Doug Lea
@param <E> 此 collection 中所保存元素的类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.CopyOnWriteArraySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个空 set。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.CopyOnWriteArraySet(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个包含指定 collection 所有元素的 set。
@param c 最初包含元素的 collection
@throws NullPointerException 如果指定 collection 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.CopyOnWriteArraySet.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回此 set 中的元素数目。

 @return 此 set 中的元素数

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.CopyOnWriteArraySet.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
 如果此 set 不包含任何元素，则返回 <tt>true</tt>。

 @return 如果此 set 不包含任何元素，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.CopyOnWriteArraySet.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 如果此 set 包含指定元素，则返回 <tt>true</tt>。更确切地讲，当且仅当此 set 包含满足 <tt>(o==null ? e==null : o.equals(e))</tt> 的元素 <tt>e</tt> 时，返回 <tt>true</tt>。

 @param o 将测试其是否存在于此 set 中的元素
 @return 如果此 set 包含指定元素，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.util.concurrent.CopyOnWriteArraySet.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回一个包含此 set 所有元素的数组。如果此 set 对其迭代器返回的元素的顺序做出了某些保证，那么此方法必须以相同的顺序返回这些元素。

 <p>不维护对返回数组的任何引用，因而它将是“安全的”。（换句话说，即使 set 受到数组的支持，此方法也必须分配一个新的数组）。因此，调用这可以随意修改返回的数组。

 <p>此方法充当基于数组的 API 与基于 collection 的 API 之间的桥梁。

 @return 包含此 set 所有元素的数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.util.concurrent.CopyOnWriteArraySet.toArray(T[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回一个包含此 set 所有元素的数组；返回数组的运行时类型是指定数组的类型。如果指定的数组能容纳该 set，则将 set 返回此处。否则，将分配一个具有指定数组的运行时类型和此 set 大小的新数组。

 <p>如果指定的数组能容纳 set，并有剩余的空间（即数组的元素比 set 多），那么会将接 set 尾部的元素设置为 <tt>null</tt>。（<i>仅</i> 当调用者知道此 set 不包含任何 null 元素时，才可使用此方法来确定此 set 的长度。）

 <p>如果此 set 对其迭代器返回的元素顺序做出了某些保证，那么此方法必须以相同的顺序返回这些元素。

 <p>像 {@link #toArray()} 方法一样，此方法充当基于数组 的 API 与基于 collection 的 API 之间的桥梁。更进一步说，此方法允许对输出数组的运行时类型进行精确控制，在某些情况下，可以用来节省分配开销。

 <p>假定 <tt>x</tt> 是只包含字符串的一个已知 set。以下代码用来将该 set 转储到一个新分配的 <tt>String</tt> 数组：

 <pre>
     String[] y = x.toArray(new String[0]);</pre>

 注意，<tt>toArray(new Object[0])</tt> 和 <tt>toArray()</tt> 在功能上是相同的。

 @param 存储此 set 元素的数组（如果该数组足够大）；否则为此分配一个具有相同运行时类型的新数组
 @return 包含此 set 所有元素的数组
 @throws ArrayStoreException 如果指定数组的运行时类型不是此 set 每个元素的运行时类型的超类型
 @throws NullPointerException 如果指定数组为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.CopyOnWriteArraySet.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 移除此 set 中的所有元素。在此调用返回之后，set 将为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.CopyOnWriteArraySet.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 如果指定元素存在于此 set 中，则将其移除。更确切地讲，如果此 set 中包含满足 <tt>(o==null ?  e==null : o.equals(e))</tt> 的元素 <tt>e</tt>，则移除它。如果此 set 包含指定元素（或者此 set 由于调用而发生更改），则返回 <tt>true</tt>。（调用返回后，则此 set 便不再包含这样的元素。）

 @param o 要从此 set 移除的对象（如果存在）
 @return 如果此 set 包含指定元素，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.CopyOnWriteArraySet.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 如果指定元素并不存在于此 set 中，则添加它。更确切地讲，如果此 set 不包含满足 <tt>(e==null ? e2==null : e.equals(e2))</tt> 的元素 <tt>e2</tt>，则将指定元素 <tt>e</tt> 添加到此 set 中。如果此 set 已经包含这样的元素，则该调用不改变此 set 并返回 <tt>false</tt>。

 @param e 要添加到此 set 的元素
 @return 如果此 set 并未包含指定元素，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.CopyOnWriteArraySet.containsAll(java.util.Collection<?> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 如果此 set 包含指定 collection 的所有元素，则返回 <tt>true</tt>。如果指定的 collection 也是一个 set，那么当该 collection 是此 set 的<i>子集</i> 时，此方法返回 <tt>true</tt>。

 @param  c 将被检查是否存在于此 set 的 collection
 @return 如果此 set 包含指定 collection 的所有元素，则返回 <tt>true</tt>
 @throws NullPointerException 如果指定 collection 为 null
 @see #contains(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.CopyOnWriteArraySet.addAll(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 如果此 set 中没有指定 collection 中的所有元素，则将它们都添加到此 set 中。如果指定的 collection 也是一个 set，则 <tt>addAll</tt> 操作会实际修改此 set，从而它的值是两个 set 的一个<i>并集</i>。如果指定 collection 在操作过程中被修改，则此操作的行为是不确定的。

 @param  c 包含将添加到此 set 中的元素的 collection
 @return 如果此 set 由于调用而发生更改，则返回 <tt>true</tt>
 @throws NullPointerException 如果指定 collection 为 null
 @see #add(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.CopyOnWriteArraySet.removeAll(java.util.Collection<?> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 移除此 set 中包含在指定 collection 中的所有元素。如果指定的 collection 也是一个 set，则此操作会实际修改此 set，从而其值是两个 set 的一个<i>不对称差集</i>。

 @param  c 包含将从此 set 中移除的元素的 collection
 @return 如果此 set 由于调用而发生更改，则返回 <tt>true</tt>
 @throws ClassCastException 如果此 set 的元素的类与指定 collection 不兼容（可选）
 @throws NullPointerException 如果此 set 包含一个 null 元素并且指定 collection 不允许使用 null 元素（可选），或者指定 collection 为 null
 @see #remove(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.CopyOnWriteArraySet.retainAll(java.util.Collection<?> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 仅保留此 set 中那些包含在指定 collection 中的元素。换句话说，移除此 set 中所有未包含在指定 collection 中的元素。如果指定的 collection 也是一个 set，则此操作会实际修改此 set，这样其值是两个 set 的一个<i>交集</i>。

 @param  c 包含保留在此 set 中的元素的 collection
 @return 如果此 set 由于调用而发生更改，则返回 <tt>true</tt>
 @throws ClassCastException 如果此 set 的元素的类与指定 collection 不兼容（可选）
 @throws NullPointerException 如果此 set 包含一个 null 元素并且指定 collection 不允许使用 null 元素（可选），或者指定 collection 为 null
 @see #remove(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.concurrent.CopyOnWriteArraySet.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回按照元素添加顺序在此 set 中包含的元素上进行迭代的迭代器。

 <p>在构造迭代器时，返回的迭代器提供该 set 的状态的快照。在遍历迭代器时无需同步。该迭代器<em>不</em> 支持 <tt>remove</tt> 方法。

 @return 在此 set 中的元素上进行迭代的迭代器

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.CopyOnWriteArraySet.equals(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 比较指定对象与此 set 的相等性。如果指定对象与此对象是同一对象，则返回 {@code true}，如果它也是一个 {@link Set} 并且在指定 set 上迭代的{@linkplain List#iterator() 迭代器}所返回的元素序列与在此 set 上进行迭代迭代器所返回的元素的序列相同。更确切地讲，如果两个迭代器返回相同的元素数，并且对于在指定 set 上进行迭代的迭代器返回的每个元素 {@code e1} 而言，都有一个由在此 set 上进行迭代的迭代器返回的元素 {@code e2}，且该元素满足 {@code (e1==null ? e2==null : e1.equals(e2))}，则认为两个迭代器将返回相同的元素。

 @param o 将与此 set 进行相等性比较的对象
 @return 如果指定的对象与此 set 相等，则返回 {@code true}

<!-- END DATA -->
