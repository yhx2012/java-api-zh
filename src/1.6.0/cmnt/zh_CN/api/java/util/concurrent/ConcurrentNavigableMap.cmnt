<!-- BEGIN KEY -->
public interface java.util.concurrent.ConcurrentNavigableMap extends java.util.concurrent.ConcurrentMap, java.util.NavigableMap
<!-- END KEY -->
<!-- BEGIN DATA -->
支持 {@link NavigableMap} 操作，且以递归方式支持其可导航子映射的 {@link ConcurrentMap}。

<p>此接口是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

@author Doug Lea
@param <K> 此映射维护的键类型
@param <V> 映射值的类型
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentNavigableMap<K, V> java.util.concurrent.ConcurrentNavigableMap.subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentNavigableMap<K, V> java.util.concurrent.ConcurrentNavigableMap.headMap(K toKey, boolean inclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentNavigableMap<K, V> java.util.concurrent.ConcurrentNavigableMap.tailMap(K fromKey, boolean inclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentNavigableMap<K, V> java.util.concurrent.ConcurrentNavigableMap.subMap(K fromKey, K toKey)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentNavigableMap<K, V> java.util.concurrent.ConcurrentNavigableMap.headMap(K toKey)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentNavigableMap<K, V> java.util.concurrent.ConcurrentNavigableMap.tailMap(K fromKey)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentNavigableMap<K, V> java.util.concurrent.ConcurrentNavigableMap.descendingMap()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射中所包含映射关系的逆序视图。降序映射受此映射的支持，因此对此映射的更改将反映在降序映射中，反之亦然。

<p>返回映射的顺序等于 <tt>{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())</tt>。表达式 {@code m.descendingMap().descendingMap()} 返回的 {@code m} 视图基本等效于 {@code m}。

@return 此映射的逆序视图

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<K> java.util.concurrent.ConcurrentNavigableMap.navigableKeySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射中所包含键的 {@link NavigableSet} 视图。set 的迭代器按升序返回键。set 受映射支持，因此对映射的更改将反映在 set 中，反之亦然。set 支持元素移除，即通过 {@code Iterator.remove}、{@code Set.remove}、{@code removeAll}、{@code retainAll} 和 {@code clear} 操作从映射中移除相应的映射关系。它不支持 {@code add} 或 {@code addAll} 操作。

<p>视图的 {@code iterator} 是一个不会抛出 {@link ConcurrentModificationException} 的&ldquo;弱一致&rdquo;迭代器，能确保遍历构造迭代器后存在的所有元素，并且可以（但并不保证）反映构造后的所有修改。

@return 此映射中键的可导航 set 视图

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<K> java.util.concurrent.ConcurrentNavigableMap.keySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射中所包含键的 {@link NavigableSet} 视图。set 的迭代器按升序返回键。set 受映射支持，因此对映射的更改将反映在 set 中，反之亦然。set 支持元素移除，即通过 {@code Iterator.remove}、{@code Set.remove}、{@code removeAll}、{@code retainAll} 和 {@code clear} 操作从映射中移除相应的映射关系。它不支持 {@code add} 或 {@code addAll} 操作。

<p>视图的 {@code iterator} 是一个不会抛出 {@link ConcurrentModificationException} 的&ldquo;弱一致&rdquo;迭代器，能确保遍历构造迭代器后存在的所有元素，并且可以（但并不保证）反映构造后的所有修改。

<p>此方法等效于方法 {@code navigableKeySet}。

@return 此映射中键的可导航 set 视图

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<K> java.util.concurrent.ConcurrentNavigableMap.descendingKeySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射中所包含键的逆序 {@link NavigableSet} 视图。set 的迭代器按降序返回键。set 受映射支持，因此对映射的更改将反映在 set 中，反之亦然。set 支持元素移除，即通过 {@code Iterator.remove}、{@code Set.remove}、{@code removeAll}、{@code retainAll} 和 {@code clear} 操作从映射中移除相应的映射关系。它不支持 {@code add} 或 {@code addAll} 操作。

<p>视图的 {@code iterator} 是一个不会抛出 {@link ConcurrentModificationException} 的&ldquo;弱一致&rdquo;迭代器，能确保遍历构造迭代器后存在的所有元素，并且可以（但并不保证）反映构造后的所有修改。

@return 此映射中键的逆序可导航 set 视图

<!-- END DATA -->
