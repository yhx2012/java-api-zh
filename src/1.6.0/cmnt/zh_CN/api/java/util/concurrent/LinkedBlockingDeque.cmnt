<!-- BEGIN KEY -->
public class java.util.concurrent.LinkedBlockingDeque extends java.util.AbstractQueue implements java.util.concurrent.BlockingDeque, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
一个基于已链接节点的、任选范围的{@linkplain BlockingDeque 阻塞双端队列}。

<p> 可选的容量范围构造方法参数是一种防止过度膨胀的方式。如果未指定容量，那么容量将等于 {@link Integer#MAX_VALUE}。只要插入元素不会使双端队列超出容量，每次插入后都将动态地创建链接节点。

<p>大多数操作都以固定时间运行（不计阻塞消耗的时间）。异常包括 {@link #remove(Object) remove}、{@link #removeFirstOccurrence removeFirstOccurrence}、{@link #removeLastOccurrence removeLastOccurrence}、{@link #contains contains}、{@link #iterator iterator.remove()} 以及批量操作，它们均以线性时间运行。

<p>此类及其迭代器实现 {@link Collection} 和 {@link Iterator} 接口的所有<em>可选</em> 方法。

<p>此类是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

@since 1.6
@author Doug Lea
@param <E> 保存在此 collection 中的元素类型

<!-- END DATA -->
<!-- BEGIN KEY -->
private final int java.util.concurrent.LinkedBlockingDeque.capacity
<!-- END KEY -->
<!-- BEGIN DATA -->
双端队列中的最大条目数
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.ReentrantLock java.util.concurrent.LinkedBlockingDeque.lock
<!-- END KEY -->
<!-- BEGIN DATA -->
保护所有访问的主锁
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.Condition java.util.concurrent.LinkedBlockingDeque.notEmpty
<!-- END KEY -->
<!-- BEGIN DATA -->
等待 take 的条件
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.Condition java.util.concurrent.LinkedBlockingDeque.notFull
<!-- END KEY -->
<!-- BEGIN DATA -->
等待 put 的条件
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.LinkedBlockingDeque()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个容量为 {@link Integer#MAX_VALUE} 的 <tt>LinkedBlockingDeque</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.LinkedBlockingDeque(int capacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有给定（固定）容量的 <tt>LinkedBlockingDeque</tt>。

@param capacity 此双端队列的容量
@throws IllegalArgumentException 如果 <tt>capacity</tt> 小于 1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.LinkedBlockingDeque(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个容量为 {@link Integer#MAX_VALUE} 的 <tt>LinkedBlockingDeque</tt>，最初包含给定 collection 的元素，以该 collection 迭代器的遍历顺序添加。

@param c 最初所包含元素所属的 collection
@throws NullPointerException 如果指定 collection 或其任意元素为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.LinkedBlockingDeque.addFirst(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws IllegalStateException {@inheritDoc}
@throws NullPointerException  {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.LinkedBlockingDeque.addLast(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws IllegalStateException {@inheritDoc}
@throws NullPointerException  {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingDeque.offerFirst(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingDeque.offerLast(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.LinkedBlockingDeque.putFirst(E e) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NullPointerException {@inheritDoc}
@throws InterruptedException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.LinkedBlockingDeque.putLast(E e) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NullPointerException {@inheritDoc}
@throws InterruptedException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingDeque.offerFirst(E e, long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NullPointerException {@inheritDoc}
@throws InterruptedException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingDeque.offerLast(E e, long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NullPointerException {@inheritDoc}
@throws InterruptedException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.LinkedBlockingDeque.removeFirst()
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.LinkedBlockingDeque.removeLast()
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.LinkedBlockingDeque.getFirst()
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.LinkedBlockingDeque.getLast()
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingDeque.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
在不违反容量限制的情况下，将指定的元素插入此双端队列的末尾。当使用有容量限制的双端队列时，通常首选 {@link #offer(Object) offer} 方法。

<p>此方法等效于 {@link #addLast}。

@throws IllegalStateException 如果此刻由于容量限制而无法添加元素
@throws NullPointerException 如果指定的元素为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingDeque.offer(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NullPointerException 如果指定的元素为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.LinkedBlockingDeque.put(E e) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NullPointerException {@inheritDoc}
@throws InterruptedException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingDeque.offer(E e, long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NullPointerException {@inheritDoc}
@throws InterruptedException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.LinkedBlockingDeque.remove()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取并移除此双端队列表示的队列的头部。此方法与 {@link #poll poll} 的不同之处在于：如果此双端队列为空，它将抛出一个异常。

<p>此方法等效于 {@link #removeFirst() removeFirst}。

@return 此双端队列表示的队列的头部
@throws NoSuchElementException 如果此双端队列为空

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.LinkedBlockingDeque.element()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取但不移除此双端队列表示的队列的头部。此方法与 {@link #peek peek} 的不同之处在于：如果此双端队列为空，它将抛出一个异常。

<p>此方法等效于 {@link #getFirst() getFirst}。

@return 此双端队列表示的队列的头部
@throws NoSuchElementException 如果此双端队列为空

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.LinkedBlockingDeque.remainingCapacity()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回理想情况下（没有内存和资源约束）此双端队列可不受阻塞地接受的额外元素数。该数目总是等于此双端队列的初始容量，小于此双端队列的当前 <tt>size</tt>。

<p>注意，<em>不能</em> 总是通过检查 <tt>remainingCapacity</tt> 断定试图插入元素能否成功，因为可能出现另一个线程即将插入或移除一个元素的情况。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.LinkedBlockingDeque.drainTo(java.util.Collection<? super E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.LinkedBlockingDeque.drainTo(java.util.Collection<? super E> c, int maxElements)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.LinkedBlockingDeque.push(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws IllegalStateException {@inheritDoc}
@throws NullPointerException  {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.LinkedBlockingDeque.pop()
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingDeque.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此双端队列移除第一次出现的指定元素。如果此双端队列不包含该元素，则不作更改。更确切地讲，移除第一个满足 <tt>o.equals(e)</tt> 的元素 <tt>e</tt>（如果存在这样的元素）。如果此双端队列包含指定的元素（或者此双端队列由于调用而发生了更改），则返回 <tt>true</tt>。

<p>此方法等效于 {@link #removeFirstOccurrence(Object) removeFirstOccurrence}。

@param o 要从此双端队列移除的元素（如果存在）
@return 如果此双端队列由于调用而发生更改，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.LinkedBlockingDeque.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此双端队列中的元素数。

@return 此双端队列中的元素数

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingDeque.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此双端队列包含指定的元素，则返回 <tt>true</tt>。更确切地讲，当且仅当此双端队列至少包含一个满足 <tt>o.equals(e)</tt> 的元素 <tt>e</tt>，返回 <tt>true</tt>。

@param o 检查是否包含于此双端队列的对象
@return 如果此双端队列包含指定的元素，则返回 <tt>true</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.util.concurrent.LinkedBlockingDeque.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回以恰当顺序（从第一个元素到最后一个元素）包含此双端队列所有元素的数组。

<p>由于此双端队列不维护对返回数组的任何引用，因而它将是&ldquo;安全的&rdquo;。（换句话说，此方法必须分配一个新的数组）。因此，调用者可以自由地修改返回的数组。

<p>此方法充当了基于数组的 API 与基于 collection 的 API 之间的桥梁。

@return 包含此双端队列中所有元素的数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.util.concurrent.LinkedBlockingDeque.toArray(T[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回以恰当顺序包含此双端队列所有元素的数组；返回数组的运行时类型是指定数组的运行时类型。如果指定的数组能容纳该双端队列，则将双端队列返回此处。否则，将分配一个具有指定数组的运行时类型和此双端队列大小的新数组。

<p>如果指定的数组能容纳此双端队列，并且有剩余的空间（即数组的元素比双端队列多），那么将数组中紧接双端队列尾部的元素设置为 <tt>null</tt>。

<p>像 {@link #toArray()} 方法一样，此方法充当基于数组 的 API 与基于 collection 的 API 之间的桥梁。更进一步说，此方法允许对输出数组的运行时类型进行精确控制，在某些情况下，还可以用来节省分配开销。

<p>假定 <tt>x</tt> 是只包含字符串的一个已知双端队列。以下代码用来将该双端队列转储到一个新分配的 <tt>String</tt> 数组：

 <pre>
String[] y = x.toArray(new String[0]);</pre>

注意，<tt>toArray(new Object[0])</tt> 和 <tt>toArray()</tt> 在功能上是相同的。

@param a 要用来存储双端队列元素的数组（如果该数组足够大）；否则，将为此分配一个具有相同运行时类型的新数组
@return 包含此双端队列所有元素的数组
@throws ArrayStoreException 如果指定数组的运行时类型不是此双端队列每个元素的运行时类型的超类型
@throws NullPointerException 如果指定的数组为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.LinkedBlockingDeque.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
以原子方式 (atomically) 从此双端队列移除所有元素。在此调用返回之后，该双端队列将为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.concurrent.LinkedBlockingDeque.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在此双端队列元素上以恰当顺序进行迭代的迭代器。元素将按从第一个（头部）到最后一个（尾部）的顺序返回。返回的 <tt>Iterator</tt> 是一个不会抛出 {@link java.util.ConcurrentModificationException} 的&ldquo;弱一致&rdquo;迭代器，能确保遍历迭代器构造后存在的所有元素，并可以（但并不保证）反映构造后的任何修改。

@return 按恰当顺序在此双端队列的元素上进行迭代的迭代器

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.concurrent.LinkedBlockingDeque.descendingIterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在此双端队列的元素上以逆向连续顺序进行迭代的迭代器。元素将按从最后一个（尾部）到第一个（头部）的顺序返回。返回的 <tt>Iterator</tt> 是一个不会抛出 {@link java.util.ConcurrentModificationException} 的&ldquo;弱一致&rdquo;迭代器，能确保遍历迭代器构造后存在的所有元素，并可以（但并不保证）反映构造后的任何修改。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.concurrent.LinkedBlockingDeque.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中重构此双端队列（也就是将其反序列化）。
@param   s   流

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.concurrent.LinkedBlockingDeque.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此双端队列的状态保存到流中（也就是将其序列化）。

@serialData 容量 (int)，后跟以恰当顺序排列的元素（每个都是 <tt>Object</tt>），然后是 null
@param s 流

<!-- END DATA -->
