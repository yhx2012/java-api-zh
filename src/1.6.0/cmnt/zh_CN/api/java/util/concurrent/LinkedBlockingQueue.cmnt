<!-- BEGIN KEY -->
public class java.util.concurrent.LinkedBlockingQueue extends java.util.AbstractQueue implements java.util.concurrent.BlockingQueue, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
一个基于已链接节点的、范围任意的 {@linkplain BlockingQueue blocking queue}。此队列按 FIFO（先进先出）排序元素。队列的<em>头部</em> 是在队列中时间最长的元素。队列的<em>尾部</em> 是在队列中时间最短的元素。新元素插入到队列的尾部，并且队列获取操作会获得位于队列头部的元素。链接队列的吞吐量通常要高于基于数组的队列，但是在大多数并发应用程序中，其可预知的性能要低。

<p>可选的容量范围构造方法参数作为防止队列过度扩展的一种方法。如果未指定容量，则它等于 {@link Integer#MAX_VALUE}。除非插入节点会使队列超出容量，否则每次插入后会动态地创建链接节点。

<p>此类及其迭代器实现 {@link Collection} 和 {@link Iterator} 接口的所有<em>可选</em> 方法。

<p>此类是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

@since 1.5
@author Doug Lea
@param <E> 此 collection 中所保存元素的类型。


<!-- END DATA -->
<!-- BEGIN KEY -->
private final int java.util.concurrent.LinkedBlockingQueue.capacity
<!-- END KEY -->
<!-- BEGIN DATA -->
容量上限，如果没有则为 Integer.MAX_VALUE。
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.LinkedBlockingQueue.count
<!-- END KEY -->
<!-- BEGIN DATA -->
当前的元素数。
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.ReentrantLock java.util.concurrent.LinkedBlockingQueue.takeLock
<!-- END KEY -->
<!-- BEGIN DATA -->
由 take、poll 等所保持的锁。
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.Condition java.util.concurrent.LinkedBlockingQueue.notEmpty
<!-- END KEY -->
<!-- BEGIN DATA -->
等待 take 的等待队列。
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.ReentrantLock java.util.concurrent.LinkedBlockingQueue.putLock
<!-- END KEY -->
<!-- BEGIN DATA -->
由 put、offer 等所保持的锁。
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.Condition java.util.concurrent.LinkedBlockingQueue.notFull
<!-- END KEY -->
<!-- BEGIN DATA -->
等待 put 的等待队列。
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.LinkedBlockingQueue()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个容量为 {@link Integer#MAX_VALUE} 的 <tt>LinkedBlockingQueue</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.LinkedBlockingQueue(int capacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有给定（固定）容量的 <tt>LinkedBlockingQueue</tt>。

@param capacity 队列的容量
@throws IllegalArgumentException 如果 <tt>capacity</tt> 未大于 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.LinkedBlockingQueue(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个容量是 {@link Integer#MAX_VALUE} 的 <tt>LinkedBlockingQueue</tt>，最初包含给定 collection 的元素，元素按该 collection 迭代器的遍历顺序添加。

@param c 最初所包含元素所属的 collection
@throws NullPointerException 如果指定 collection 或其所有元素均为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.LinkedBlockingQueue.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回队列中的元素个数。

@return  队列中的元素个数

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.LinkedBlockingQueue.remainingCapacity()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回理想情况下（没有内存和资源约束）此队列可接受并且不会被阻塞的附加元素数量。该数量总是等于此队列的初始容量，小于队列的当前 <tt>size</tt>。

<p>注意，<em>不能</em> 总是通过检查 <tt>remainingCapacity</tt> 来断定试图插入一个元素是否成功，因为可能是另一个线程将插入或移除某个元素。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.LinkedBlockingQueue.put(E e) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素插入到此队列的尾部，如有必要，则等待空间变得可用。

@throws InterruptedException {@inheritDoc}
@throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingQueue.offer(E e, long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素插入到此队列的尾部，如有必要，则等待指定的时间以使空间变得可用。

@return 如果成功，则返回 <tt>true</tt>；如果在空间可用前超出了指定的时间，则返回 <tt>false</tt>。
@throws InterruptedException {@inheritDoc}
@throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingQueue.offer(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素插入到此队列的尾部（如果立即可行且不会超出此队列的容量），在成功时返回 <tt>true</tt>，如果此队列已满，则返回 <tt>false</tt>。当使用有容量限制的队列时，此方法通常要优于 {@link BlockingQueue#add add} 方法，后者可能无法插入元素，而只是抛出一个异常。

@throws NullPointerException 如果指定元素为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingQueue.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此队列移除指定元素的单个实例（如果存在）。更确切地讲，如果此队列包含一个或多个满足 <tt>o.equals(e)</tt> 的元素 <tt>e</tt>， 则移除一个这样的元素。如果此队列包含指定元素，则返回 <tt>true</tt>（或者此队列由于调用而发生更改，则返回 <tt>true</tt>）。

 @param o 要从此队列移除的元素（如果存在）
 @return 如果此队列由于调用而发生更改，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.util.concurrent.LinkedBlockingQueue.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回按适当顺序包含此队列中所有元素的数组。

 <p>由于此队列不维护对返回数组的任何引用，因而它是“安全的”。（换句话说，此方法必须分配一个新数组）。因此，调用者可以随意修改返回的数组。

 <p>此方法充当基于数组的 API 与基于 collection 的 API 之间的桥梁。

 @return 包含此队列中所有元素的数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.util.concurrent.LinkedBlockingQueue.toArray(T[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回按适当顺序包含此队列中所有元素的数组；返回数组的运行时类型是指定数组的运行时类型。如果指定数组能容纳该队列，则在其中返回它。否则，将分配一个具有指定数组的运行时类型和此队列大小的新数组。

<p>如果指定的数组能容纳队列，并有剩余的空间（即数组的元素比队列的多），那么将数组中紧接队列尾部的元素设置为 <tt>null</tt>。

<p>像 {@link #toArray()} 方法一样，此方法充当基于数组的 API 与基于 collection 的 API 之间的桥梁。更进一步说，此方法允许对输出数组的运行时类型进行精确控制，在某些情况下，可以用来节省分配开销。

<p>假定 <tt>x</tt> 是只包含字符串的一个已知队列。以下代码用来将该队列转储到一个新分配的 <tt>String</tt> 数组：

 <pre>
     String[] y = x.toArray(new String[0]);</pre>

注意，<tt>toArray(new Object[0])</tt> 和 <tt>toArray()</tt> 在功能上是相同的。

@param a 用来存储队列元素的数组（如果它足够大）；否则，为此分配一个具有相同运行时类型的新数组。 
@return 包含此队列所有元素的数组
@throws ArrayStoreException 如果指定数组的运行时类型不是此队列中每个元素的运行时类型的超类型
@throws NullPointerException 如果指定数组为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.LinkedBlockingQueue.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
从队列彻底移除所有元素。此调用返回后队列为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.LinkedBlockingQueue.drainTo(java.util.Collection<? super E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws UnsupportedOperationException {@inheritDoc}
 @throws ClassCastException            {@inheritDoc}
 @throws NullPointerException          {@inheritDoc}
 @throws IllegalArgumentException      {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.LinkedBlockingQueue.drainTo(java.util.Collection<? super E> c, int maxElements)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws UnsupportedOperationException {@inheritDoc}
 @throws ClassCastException            {@inheritDoc}
 @throws NullPointerException          {@inheritDoc}
 @throws IllegalArgumentException      {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.concurrent.LinkedBlockingQueue.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在队列中的元素上按适当顺序进行迭代的迭代器。返回的 <tt>Iterator</tt> 是一个&ldquo;弱一致&rdquo;的迭代器，从不抛出 {@link ConcurrentModificationException}，并且确保可遍历迭代器构造后所存在的所有元素，并且可能（但并不保证）反映构造后的所有修改。

@return 按适当顺序对队列中的元素进行迭代的迭代器

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.concurrent.LinkedBlockingQueue.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流重构此队列实例（也就是将其反序列化）。
@param   s   流。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.concurrent.LinkedBlockingQueue.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将状态保存到流中（也就是将其序列化）。

@serialData 发出容量 (int)，后跟按适当顺序排列的所有元素（每个都是顺序正确的 <tt>Object</tt>），后跟 null。
@param s 流。

<!-- END DATA -->
