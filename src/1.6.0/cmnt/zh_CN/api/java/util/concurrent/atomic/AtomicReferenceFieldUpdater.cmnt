<!-- BEGIN KEY -->
public abstract class java.util.concurrent.atomic.AtomicReferenceFieldUpdater extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
基于反射的实用工具，可以对指定类的指定 {@code volatile} 字段进行原子更新。该类用于原子数据结构，该结构中同一节点的几个引用字段都独立受原子更新控制。例如，树节点可能声明为

 <pre>
 class Node {
   private volatile Node left, right;

   private static final AtomicReferenceFieldUpdater<Node, Node> leftUpdater =
     AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, "left");
   private static AtomicReferenceFieldUpdater<Node, Node> rightUpdater =
     AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, "right");

   Node getLeft() { return left;  }
   boolean compareAndSetLeft(Node expect, Node update) {
     return leftUpdater.compareAndSet(this, expect, update);
   }
   // ... and so on
 }
 </pre>

<p> 注意，此类中 {@code compareAndSet} 方法的保证弱于其他原子类中该方法的保证。因为此类不能确保所有使用的字段都适合于原子访问目的，所以，对于 {@code compareAndSet} 和 {@code set} 的其他调用，它仅可以保证原子性和可变语义。
@since 1.5
@author Doug Lea
@param <T> 保持可更新字段的对象的类型
@param <V> 字段的类型

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.concurrent.atomic.AtomicReferenceFieldUpdater()
<!-- END KEY -->
<!-- BEGIN DATA -->
受保护的无操作构造方法，供子类使用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.concurrent.atomic.AtomicReferenceFieldUpdater<U, W> java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(java.lang.Class<U> tclass, java.lang.Class<W> vclass, String fieldName)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的字段为对象创建和返回一个更新器。需要 Class 参数检查反射类型和一般类型是否匹配。
@param tclass 保持字段的对象类。
@param vclass 该字段的类
@param fieldName 要更新的字段名称。
@return 更新器
@throws IllegalArgumentException 如果该字段不是可变引用类型。
@throws RuntimeException 如果该类不保持字段，或者是错误的类型，将抛出 RuntimeException 和一个嵌套的基于反射的异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.util.concurrent.atomic.AtomicReferenceFieldUpdater.compareAndSet(T obj, V expect, V update)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前值 {@code ==} 预期值，则以原子方式将此更新器管理的给定对象的字段设置为给定的更新值。对 {@code compareAndSet} 和 {@code set} 的其他调用，此方法可以确保原子性，但对于字段中的其他更改则不一定确保原子性。
@param obj 有条件地设置其字段的对象
@param expect 预期值
@param update 新值
@return 如果成功，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.util.concurrent.atomic.AtomicReferenceFieldUpdater.weakCompareAndSet(T obj, V expect, V update)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前值 {@code ==} 预期值，则以原子方式将此更新器管理的给定对象的字段设置为给定的更新值。对 {@code compareAndSet} 和 {@code set} 的其他调用，此方法可以确保原子性，但对于字段中的其他更改则不一定确保原子性。

<p>可能<a href="package-summary.html#Spurious">意外失败</a>并且不提供排序保证，所以只有在很少的情况下才对 {@code compareAndSet} 进行适当地选择。

@param obj 有条件地设置其字段的对象
@param expect 预期值
@param update 新值
@return 如果成功，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.util.concurrent.atomic.AtomicReferenceFieldUpdater.set(T obj, V newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此更新器管理的给定对象的字段设置为给定更新值。对于 {@code compareAndSet} 的后续调用，此操作可以确保充当可变存储。
@param obj 要设置其字段的对象
@param newValue 新值

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.util.concurrent.atomic.AtomicReferenceFieldUpdater.lazySet(T obj, V newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
最终将此更新器管理的给定对象的字段设置为给定更新值。

 @param obj 要设置其字段的对象
 @param newValue 新值
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract V java.util.concurrent.atomic.AtomicReferenceFieldUpdater.get(T obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取由此更新器管理的在给定对象的字段中保持的当前值。
@param obj 要获取其字段的对象
@return 当前值

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndSet(T obj, V newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此更新器管理的给定对象的字段自动设置为给定值，并返回旧值。

@param obj 要获取并设置其字段的对象
@param newValue 新值
@return 以前的值

<!-- END DATA -->
