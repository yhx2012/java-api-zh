<!-- BEGIN KEY -->
public interface java.util.concurrent.BlockingQueue extends java.util.Queue
<!-- END KEY -->
<!-- BEGIN DATA -->
支持两个附加操作的 {@link java.util.Queue}，这两个操作是：获取元素时等待队列变为非空，以及存储元素时等待空间变得可用。

<p><tt>BlockingQueue</tt> 方法以四种形式出现，对于不能立即满足但可能在将来某一时刻可以满足的操作，这四种形式的处理方式不同：第一种是抛出一个异常，第二种是返回一个特殊值（<tt>null</tt> 或 <tt>false</tt>，具体取决于操作），第三种是在操作可以成功前，无限期地阻塞当前线程，第四种是在放弃前只在给定的最大时间限制内阻塞。下表中总结了这些方法：

 <p>
 <table BORDER CELLPADDING=3 CELLSPACING=1>
  <tr>
    <td></td>
    <td ALIGN=CENTER><em>抛出异常</em></td>
    <td ALIGN=CENTER><em>特殊值</em></td>
    <td ALIGN=CENTER><em>阻塞</em></td>
    <td ALIGN=CENTER><em>超时</em></td>
  </tr>
  <tr>
    <td><b>插入</b></td>
    <td>{@link #add add(e)}</td>
    <td>{@link #offer offer(e)}</td>
    <td>{@link #put put(e)}</td>
    <td>{@link #offer(Object, long, TimeUnit) offer(e, time, unit)}</td>
  </tr>
  <tr>
    <td><b>移除</b></td>
    <td>{@link #remove remove()}</td>
    <td>{@link #poll poll()}</td>
    <td>{@link #take take()}</td>
    <td>{@link #poll(long, TimeUnit) poll(time, unit)}</td>
  </tr>
  <tr>
    <td><b>检查</b></td>
    <td>{@link #element element()}</td>
    <td>{@link #peek peek()}</td>
    <td><em>不可用</em></td>
    <td><em>不可用</em></td>
  </tr>
 </table>

<p><tt>BlockingQueue</tt> 不接受 <tt>null</tt> 元素。试图 <tt>add</tt>、<tt>put</tt> 或 <tt>offer</tt> 一个 <tt>null</tt> 元素时，某些实现会抛出 <tt>NullPointerException</tt>。<tt>null</tt> 被用作指示 <tt>poll</tt> 操作失败的警戒值。

<p><tt>BlockingQueue</tt> 可以是限定容量的。它在任意给定时间都可以有一个 <tt>remainingCapacity</tt>，超出此容量，便无法无阻塞地 <tt>put</tt> 附加元素。没有任何内部容量约束的 <tt>BlockingQueue</tt> 总是报告 <tt>Integer.MAX_VALUE</tt> 的剩余容量。

<p> <tt>BlockingQueue</tt> 实现主要用于生产者-使用者队列，但它另外还支持 {@link java.util.Collection} 接口。因此，举例来说，使用 <tt>remove(x)</tt> 从队列中移除任意一个元素是有可能的。然而，这种操作通常<em>不</em> 会有效执行，只能有计划地偶尔使用，比如在取消排队信息时。

<p> <tt>BlockingQueue</tt> 实现是线程安全的。所有排队方法都可以使用内部锁或其他形式的并发控制来自动达到它们的目的。然而，<em>大量的</em> Collection 操作（<tt>addAll</tt>、<tt>containsAll</tt>、<tt>retainAll</tt> 和 <tt>removeAll</tt>）<em>没有</em> 必要自动执行，除非在实现中特别说明。因此，举例来说，在只添加了 <tt>c</tt> 中的一些元素后，<tt>addAll(c)</tt> 有可能失败（抛出一个异常）。

<p><tt>BlockingQueue</tt> 实质上<em>不</em> 支持使用任何一种&ldquo;close&rdquo;或&ldquo;shutdown&rdquo;操作来指示不再添加任何项。这种功能的需求和使用有依赖于实现的倾向。例如，一种常用的策略是：对于生产者，插入特殊的 <em>end-of-stream</em> 或 <em>poison</em> 对象，并根据使用者获取这些对象的时间来对它们进行解释。

 <p>
以下是基于典型的生产者-使用者场景的一个用例。注意，<tt>BlockingQueue</tt> 可以安全地与多个生产者和多个使用者一起使用。
 <pre>
 class Producer implements Runnable {
   private final BlockingQueue queue;
   Producer(BlockingQueue q) { queue = q; }
   public void run() {
     try {
       while(true) { queue.put(produce()); }
     } catch (InterruptedException ex) { ... handle ...}
   }
   Object produce() { ... }
 }

 class Consumer implements Runnable {
   private final BlockingQueue queue;
   Consumer(BlockingQueue q) { queue = q; }
   public void run() {
     try {
       while(true) { consume(queue.take()); }
     } catch (InterruptedException ex) { ... handle ...}
   }
   void consume(Object x) { ... }
 }

 class Setup {
   void main() {
     BlockingQueue q = new SomeQueueImplementation();
     Producer p = new Producer(q);
     Consumer c1 = new Consumer(q);
     Consumer c2 = new Consumer(q);
     new Thread(p).start();
     new Thread(c1).start();
     new Thread(c2).start();
   }
 }
 </pre>

<p>内存一致性效果：当存在其他并发 collection 时，将对象放入 {@code BlockingQueue} 之前的线程中的操作 <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a> 随后通过另一线程从 {@code BlockingQueue} 中访问或移除该元素的操作。

<p>此接口是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。
  
@since 1.5
@author Doug Lea
@param <E> 在此 collection 中保持的元素类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.BlockingQueue.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素插入此队列中（如果立即可行且不会违反容量限制），成功时返回 <tt>true</tt>，如果当前没有可用的空间，则抛出 <tt>IllegalStateException</tt>。当使用有容量限制的队列时，通常首选 {@link #offer(Object) offer}。

 @param e 要添加的元素
 @return <tt>true</tt>（根据 {@link Collection#add} 的规定）
 @throws IllegalStateException 如果由于容量限制此时不能添加该元素
 @throws ClassCastException 如果指定元素的类不允许将其添加到此队列
 @throws NullPointerException 如果指定元素为 null
 @throws IllegalArgumentException 如果指定元素的某些属性不允许将其添加到此队列

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.BlockingQueue.offer(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素插入此队列中（如果立即可行且不会违反容量限制），成功时返回 <tt>true</tt>，如果当前没有可用的空间，则返回 <tt>false</tt>。当使用有容量限制的队列时，此方法通常要优于 {@link #add}，后者可能无法插入元素，而只是抛出一个异常。

 @param e 要添加的元素
 @return 如果该元素已添加到此队列，则返回 <tt>true</tt>；否则返回 <tt>false</tt>
 @throws ClassCastException 如果指定元素的类不允许将其添加到此队列
 @throws NullPointerException 如果指定元素为 null
 @throws IllegalArgumentException 如果指定元素的某些属性不允许将其添加到此队列

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.BlockingQueue.put(E e) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素插入此队列中，将等待可用的空间（如果有必要）。

 @param e 要添加的元素
 @throws InterruptedException 如果在等待时被中断
 @throws ClassCastException 如果指定元素的类不允许将其添加到此队列
 @throws NullPointerException 如果指定元素为 null
 @throws IllegalArgumentException 如果指定元素的某些属性不允许将其添加到此队列

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.BlockingQueue.offer(E e, long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素插入此队列中，在到达指定的等待时间前等待可用的空间（如果有必要）。

@param e 要添加的元素
@param timeout 放弃之前等待的时间长度，以 <tt>unit</tt> 为时间单位
@param unit 确定如何解释 <tt>timeout</tt> 参数的 <tt>TimeUnit</tt>
@return 如果成功，则返回 <tt>true</tt>；如果在空间可用前超过了指定的等待时间，则返回 <tt>false</tt>
@throws InterruptedException 如果在等待时被中断
@throws ClassCastException 如果指定元素的类不允许将其添加到此队列
@throws NullPointerException 如果指定元素为 null
@throws IllegalArgumentException 如果指定元素的某些属性不允许将其添加到此队列

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.BlockingQueue.take() throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取并移除此队列的头部，在元素变得可用之前一直等待（如果有必要）。

@return 此队列的头部
@throws InterruptedException 如果在等待时被中断

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.BlockingQueue.poll(long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 获取并移除此队列的头部，在指定的等待时间前等待可用的元素（如果有必要）。

 @param timeout 放弃之前要等待的时间长度，用 <tt>unit</tt> 的时间单位表示
 @param unit 确定如何解释 <tt>timeout</tt> 参数的 <tt>TimeUnit</tt> 
 @return 此队列的头部；如果在元素可用前超过了指定的等待时间，则返回 <tt>null</tt> 
 @throws InterruptedException 如果在等待时被中断

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.BlockingQueue.remainingCapacity()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在无阻塞的理想情况下（不存在内存或资源约束）此队列能接受的附加元素数量；如果没有内部限制，则返回  <tt>Integer.MAX_VALUE</tt>。

<p>注意，<em>不能</em> 总是通过检查 <tt>remainingCapacity</tt> 来判断尝试插入元素是否成功，因为可能出现这样的情况：其他线程即将插入或移除一个元素。

@return 剩余容量

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.BlockingQueue.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此队列中移除指定元素的单个实例（如果存在）。更确切地讲，如果此队列包含一个或多个满足 <tt>o.equals(e)</tt> 的元素 <tt>e</tt>，则移除该元素。如果此队列包含指定元素（或者此队列由于调用而发生更改），则返回 <tt>true</tt>。 

 @param o 要从此队列移除的元素（如果存在）
 @return 如果此队列由于调用而发生更改，则返回 <tt>true</tt>
 @throws ClassCastException 如果指定元素的类与此队列不兼容（可选）
 @throws NullPointerException 如果指定元素为 null（可选）

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.BlockingQueue.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此队列包含指定元素，则返回 <tt>true</tt>。更确切地讲，当且仅当此队列至少包含一个满足 <tt>o.equals(e)</tt> 的元素 <tt>e</tt>时，返回 <tt>true</tt>。 

 @param o 检查是否包含在此队列中的对象
 @return 如果此队列包含指定元素，则返回 <tt>true</tt> 
 @throws ClassCastException 如果指定元素的类与此队列不兼容（可选）
 @throws NullPointerException 如果指定元素为 null（可选）

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.BlockingQueue.drainTo(java.util.Collection<? super E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除此队列中所有可用的元素，并将它们添加到给定 collection 中。此操作可能比反复轮询此队列更有效。在试图向 collection <tt>c</tt> 中添加元素没有成功时，可能导致在抛出相关异常时，元素会同时在两个 collection 中出现，或者在其中一个 collection 中出现，也可能在两个 collection 中都不出现。如果试图将一个队列放入自身队列中，则会导致 <tt>IllegalArgumentException</tt> 异常。此外，如果正在进行此操作时修改指定的 collection，则此操作行为是不确定的。

@param c 接收传输元素的 collection
@return 传输元素的数量
@throws UnsupportedOperationException 如果指定 collection 不支持添加元素
@throws ClassCastException 如果此队列元素的类不允许将其添加到指定 collection
@throws NullPointerException 如果指定 collection 为 null
@throws IllegalArgumentException 如果指定 collection 是此队列，或者此队列元素的某些属性不允许将其添加到指定 collection 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.BlockingQueue.drainTo(java.util.Collection<? super E> c, int maxElements)
<!-- END KEY -->
<!-- BEGIN DATA -->
最多从此队列中移除给定数量的可用元素，并将这些元素添加到给定 collection 中。在试图向 collection <tt>c</tt> 中添加元素没有成功时，可能导致在抛出相关异常时，元素会同时在两个 collection 中出现，或者在其中一个 collection 中出现，也可能在两个 collection 中都不出现。如果试图将一个队列放入自身队列中，则会导致 <tt>IllegalArgumentException</tt> 异常。此外，如果正在进行此操作时修改指定的 collection，则此操作行为是不确定的。

@param c 接收传输元素的 collection
@param maxElements 传输元素的最大数量
@return 传输元素的数量
@throws UnsupportedOperationException 如果指定 collection 不支持添加元素
@throws ClassCastException 如果此队列元素的类不允许将其添加到指定 collection
@throws NullPointerException 如果指定 collection 为 null
@throws IllegalArgumentException  如果指定 collection 是此队列，或者此队列元素的某些属性不允许将其添加到指定 collection 

<!-- END DATA -->
