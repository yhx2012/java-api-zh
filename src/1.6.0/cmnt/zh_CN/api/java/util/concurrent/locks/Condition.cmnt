<!-- BEGIN KEY -->
public interface java.util.concurrent.locks.Condition
<!-- END KEY -->
<!-- BEGIN DATA -->
{@code Condition} 将 {@code Object} 监视器方法（{@link Object#wait() wait}、{@link Object#notify notify} 和 {@link Object#notifyAll notifyAll}）分解成截然不同的对象，以便通过将这些对象与任意 {@link Lock} 实现组合使用，为每个对象提供多个等待 set（wait-set）。其中，{@code Lock} 替代了 {@code synchronized} 方法和语句的使用，{@code Condition} 替代了 Object 监视器方法的使用。

<p>条件（也称为<em>条件队列</em> 或<em>条件变量</em>）为线程提供了一个含义，以便在某个状态条件现在可能为 true 的另一个线程通知它之前，一直挂起该线程（即让其&ldquo;等待&rdquo;）。因为访问此共享状态信息发生在不同的线程中，所以它必须受保护，因此要将某种形式的锁与该条件相关联。等待提供一个条件的主要属性是：<em>以原子方式</em> 释放相关的锁，并挂起当前线程，就像 {@code Object.wait} 做的那样。

<p>{@code Condition} 实例实质上被绑定到一个锁上。要为特定 {@link Lock} 实例获得 {@code Condition} 实例，请使用其 {@link Lock#newCondition newCondition()} 方法。

<p>作为一个示例，假定有一个绑定的缓冲区，它支持 {@code put} 和 {@code take} 方法。如果试图在空的缓冲区上执行 {@code take} 操作，则在某一个项变得可用之前，线程将一直阻塞；如果试图在满的缓冲区上执行 {@code put} 操作，则在有空间变得可用之前，线程将一直阻塞。我们喜欢在单独的等待 set 中保存 {@code put} 线程和 {@code take} 线程，这样就可以在缓冲区中的项或空间变得可用时利用最佳规划，一次只通知一个线程。可以使用两个 {@link Condition} 实例来做到这一点。
 <pre>
 class BoundedBuffer {
   <b>final Lock lock = new ReentrantLock();</b>
   final Condition notFull  = <b>lock.newCondition(); </b>
   final Condition notEmpty = <b>lock.newCondition(); </b>

   final Object[] items = new Object[100];
   int putptr, takeptr, count;

   public void put(Object x) throws InterruptedException {
     <b>lock.lock();
     try {</b>
       while (count == items.length) 
         <b>notFull.await();</b>
       items[putptr] = x; 
       if (++putptr == items.length) putptr = 0;
       ++count;
       <b>notEmpty.signal();</b>
     <b>} finally {
       lock.unlock();
     }</b>
   }

   public Object take() throws InterruptedException {
     <b>lock.lock();
     try {</b>
       while (count == 0) 
         <b>notEmpty.await();</b>
       Object x = items[takeptr]; 
       if (++takeptr == items.length) takeptr = 0;
       --count;
       <b>notFull.signal();</b>
       return x;
     <b>} finally {
       lock.unlock();
     }</b>
   } 
 }
 </pre>

（{@link java.util.concurrent.ArrayBlockingQueue} 类提供了这项功能，因此没有理由去实现这个示例类。）

<p>{@code Condition} 实现可以提供不同于 {@code Object} 监视器方法的行为和语义，比如受保证的通知排序，或者在执行通知时不需要保持一个锁。如果某个实现提供了这样特殊的语义，则该实现必须记录这些语义。

<p>注意，{@code Condition} 实例只是一些普通的对象，它们自身可以用作 {@code synchronized} 语句中的目标，并且可以调用自己的 {@link Object#wait wait} 和 {@link Object#notify notification} 监视器方法。获取 {@code Condition} 实例的监视器锁或者使用其监视器方法，与获取和该 {@code Condition} 相关的 {@link Lock} 或使用其 {@link #await waiting} 和 {@link #signal signalling} 方法没有什么特定的关系。为了避免混淆，建议除了在其自身的实现中之外，切勿以这种方式使用 {@code Condition} 实例。

<p>除非另行说明，否则为任何参数传递 {@code null} 值将导致抛出 {@link NullPointerException}。

<h3>实现注意事项</h3>

<p>在等待 {@code Condition} 时，允许发生&ldquo;<em>虚假唤醒</em>&rdquo;，这通常作为对基础平台语义的让步。对于大多数应用程序，这带来的实际影响很小，因为 {@code Condition} 应该总是在一个循环中被等待，并测试正被等待的状态声明。某个实现可以随意移除可能的虚假唤醒，但建议应用程序程序员总是假定这些虚假唤醒可能发生，因此总是在一个循环中等待。

<p>三种形式的条件等待（可中断、不可中断和超时）在一些平台上的实现以及它们的性能特征可能会有所不同。尤其是它可能很难提供这些特性和维护特定语义，比如排序保证。更进一步地说，中断线程实际挂起的能力在所有平台上并不是总是可行的。
<p>因此，并不要求某个实现为所有三种形式的等待定义完全相同的保证或语义，也不要求其支持中断线程的实际挂起。
<p>要求实现清楚地记录每个等待方法提供的语义和保证，在某个实现不支持中断线程的挂起时，它必须遵从此接口中定义的中断语义。
<p>由于中断通常意味着取消，而又通常很少进行中断检查，因此实现可以先于普通方法的返回来对中断进行响应。即使出现在另一个操作后的中断可能会释放线程锁时也是如此。实现应记录此行为。 


@since 1.5
@author Doug Lea

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.locks.Condition.await() throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
造成当前线程在接到信号或被{@linkplain Thread#interrupt 中断}之前一直处于等待状态。

<p>与此 {@code Condition} 相关的锁以原子方式释放，并且出于线程调度的目的，将禁用当前线程，且在发生以下四种情况<em>之一</em> 以前，当前线程将一直处于休眠状态：
 <ul>
<li>其他某个线程调用此 {@code Condition} 的 {@link #signal} 方法，并且碰巧将当前线程选为被唤醒的线程；或者
<li>其他某个线程调用此 {@code Condition} 的 {@link #signalAll} 方法；或者
<li>其他某个线程{@linkplain Thread#interrupt 中断}当前线程，且支持中断线程的挂起；或者
<li>发生&ldquo;<em>虚假唤醒</em>&rdquo;
 </ul>

<p>在所有情况下，在此方法可以返回当前线程之前，都必须重新获取与此条件有关的锁。在线程返回时，可以<em>保证</em> 它保持此锁。

<p>如果当前线程：
 <ul>
<li>在进入此方法时已经设置了该线程的中断状态；或者
<li>在支持等待和中断线程挂起时，线程被{@linkplain Thread#interrupt 中断}， 
 </ul>
则抛出 {@link InterruptedException}，并清除当前线程的中断状态。在第一种情况下，没有指定是否在释放锁之前发生中断测试。
 
<p><b>实现注意事项</b>
<p>假定调用此方法时，当前线程保持了与此 {@code Condition} 有关联的锁。这取决于确定是否为这种情况以及不是时，如何对此作出响应的实现。通常，将抛出一个异常（比如 {@link IllegalMonitorStateException}）并且该实现必须对此进行记录。

<p>与响应某个信号而返回的普通方法相比，实现可能更喜欢响应某个中断。在这种情况下，实现必须确保信号被重定向到另一个等待线程（如果有的话）。

@throws InterruptedException 如果当前线程被中断（并且支持中断线程挂起）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.locks.Condition.awaitUninterruptibly()
<!-- END KEY -->
<!-- BEGIN DATA -->
造成当前线程在接到信号之前一直处于等待状态。

<p>与此条件相关的锁以原子方式释放，并且出于线程调度的目的，将禁用当前线程，且在发生以下三种情况<em>之一</em> 以前，当前线程将一直处于休眠状态：
 <ul>
<li>其他某个线程调用此 {@code Condition} 的 {@link #signal} 方法，并且碰巧将当前线程选为被唤醒的线程；或者
<li>其他某个线程调用此 {@code Condition} 的 {@link #signalAll} 方法；或者
<li>发生&ldquo;<em>虚假唤醒</em>&rdquo;
 </ul>

<p>在所有情况下，在此方法可以返回当前线程之前，都必须重新获取与此条件有关的锁。在线程返回时，可以<em>保证</em> 它保持此锁。

<p>如果在进入此方法时设置了当前线程的中断状态，或者在等待时，线程被{@linkplain Thread#interrupt 中断}，那么在接到信号之前，它将继续等待。当最终从此方法返回时，仍然将设置其中断状态。
 
<p><b>实现注意事项</b>
<p>假定调用此方法时，当前线程保持了与此 {@code Condition} 有关联的锁。这取决于确定是否为这种情况以及不是时，如何对此作出响应的实现。通常，将抛出一个异常（比如 {@link IllegalMonitorStateException}）并且该实现必须对此进行记录。


<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.concurrent.locks.Condition.awaitNanos(long nanosTimeout) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
造成当前线程在接到信号、被中断或到达指定等待时间之前一直处于等待状态。

<p>与此条件相关的锁以原子方式释放，并且出于线程调度的目的，将禁用当前线程，且在发生以下五种情况<em>之一</em> 以前，当前线程将一直处于休眠状态：
 <ul>
<li>其他某个线程调用此 {@code Condition} 的 {@link #signal} 方法，并且碰巧将当前线程选为被唤醒的线程；或者 
<li>其他某个线程调用此 {@code Condition} 的 {@link #signalAll} 方法；或者
<li>其他某个线程{@linkplain Thread#interrupt 中断}当前线程，且支持中断线程的挂起；或者
<li>已超过指定的等待时间；或者
<li>发生&ldquo;<em>虚假唤醒</em>&rdquo;。
 </ul>

<p>在所有情况下，在此方法可以返回当前线程之前，都必须重新获取与此条件有关的锁。在线程返回时，可以<em>保证</em> 它保持此锁。

<p>如果当前线程：
 <ul>
<li>在进入此方法时已经设置了该线程的中断状态；或者
<li>在支持等待和中断线程挂起时，线程被{@linkplain Thread#interrupt 中断}， 
 </ul>
则抛出 {@link InterruptedException}，并且清除当前线程的已中断状态。在第一种情况下，没有指定是否在释放锁之前发生中断测试。

<p>在返回时，该方法返回了所剩毫微秒数的一个估计值，以等待所提供的 {@code nanosTimeout} 值的时间，如果超时，则返回一个小于等于 0 的值。可以用此值来确定在等待返回但某一等待条件仍不具备的情况下，是否要再次等待，以及再次等待的时间。此方法的典型用法采用以下形式：

 <pre>
 synchronized boolean aMethod(long timeout, TimeUnit unit) {
   long nanosTimeout = unit.toNanos(timeout);
   while (!conditionBeingWaitedFor) {
     if (nanosTimeout &gt; 0)
         nanosTimeout = theCondition.awaitNanos(nanosTimeout);
      else
        return false;
   }
   // ... 
 }
 </pre>

<p> 设计注意事项：此方法需要一个 nanosecond 参数，以避免在报告剩余时间时出现截断错误。在发生重新等待时，这种精度损失使得程序员难以确保总的等待时间不少于指定等待时间。

<p><b>实现注意事项</b>
<p>假定调用此方法时，当前线程保持了与此 {@code Condition} 有关联的锁。这取决于确定是否为这种情况以及不是时，如何对此作出响应的实现。通常会抛出一个异常（比如 {@link IllegalMonitorStateException}）并且该实现必须对此进行记录。

<p>与响应某个信号而返回的普通方法相比，或者与指示所使用的指定等待时间相比，实现可能更喜欢响应某个中断。在任意一种情况下，实现必须确保信号被重定向到另一个等待线程（如果有的话）。

@param nanosTimeout 等待的最长时间，以毫微秒为单位
@return {@code nanosTimeout} 值减去花费在等待此方法的返回结果的时间的估算。正值可以用作对此方法进行后续调用的参数，来完成等待所需时间结束。小于等于零的值表示没有剩余时间。
@throws InterruptedException 如果当前线程被中断（并且支持中断线程挂起）

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.locks.Condition.await(long time, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
造成当前线程在接到信号、被中断或到达指定等待时间之前一直处于等待状态。此方法在行为上等效于：<br>
 <pre>
   awaitNanos(unit.toNanos(time)) &gt; 0
 </pre>
@param time 最长等待时间
@param unit {@code time} 参数的时间单位
@return 如果在从此方法返回前检测到等待时间超时，则返回 {@code false}，否则返回 {@code true}
@throws InterruptedException 如果当前线程被中断（并且支持中断线程挂起）

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.locks.Condition.awaitUntil(Date deadline) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
造成当前线程在接到信号、被中断或到达指定最后期限之前一直处于等待状态。

<p>与此条件相关的锁以原子方式释放，并且出于线程调度的目的，将禁用当前线程，且在发生以下五种情况<em>之一</em> 以前，当前线程将一直处于休眠状态：
 <ul>
<li>其他某个线程调用此 {@code Condition} 的 {@link #signal} 方法，并且碰巧将当前线程选为被唤醒的线程；或者 
<li>其他某个线程调用此 {@code Condition} 的 {@link #signalAll} 方法；或者
<li>其他某个线程{@linkplain Thread#interrupt 中断}当前线程，且支持中断线程的挂起；或者
<li>指定的最后期限到了；或者
<li>发生&ldquo;<em>虚假唤醒</em>&rdquo;。
 </ul>

<p>在所有情况下，在此方法可以返回当前线程之前，都必须重新获取与此条件有关的锁。在线程返回时，可以<em>保证</em> 它保持此锁。


<p>如果当前线程：
 <ul>
<li>在进入此方法时已经设置了该线程的中断状态；或者
<li>在支持等待和中断线程挂起时，线程被{@linkplain Thread#interrupt 中断}， 
 </ul>
则抛出 {@link InterruptedException}，并且清除当前线程的已中断状态。在第一种情况下，没有指定是否在释放锁之前发生中断测试。


<p>返回值指示是否到达最后期限，使用方式如下：
 <pre>
 synchronized boolean aMethod(Date deadline) {
   boolean stillWaiting = true;
   while (!conditionBeingWaitedFor) {
     if (stillWaiting)
         stillWaiting = theCondition.awaitUntil(deadline);
      else
        return false;
   }
   // ... 
 }
 </pre>

<p><b>实现注意事项</b>
<p>假定调用此方法时，当前线程保持了与此 {@code Condition} 有关联的锁。这取决于确定是否为这种情况以及不是时，如何对此作出响应的实现。通常，将抛出一个异常（比如 {@link IllegalMonitorStateException}）并且该实现必须对此进行记录。

<p>与响应某个信号而返回的普通方法相比，或者与指示是否到达指定最终期限相比，实现可能更喜欢响应某个中断。在任意一种情况下，实现必须确保信号被重定向到另一个等待线程（如果有的话）。


@param deadline 一直处于等待状态的绝对时间
@return 如果在返回时已经到达最后期限，则返回 {@code false}，否则返回 {@code true}
@throws InterruptedException 如果当前线程被中断（并且支持中断线程挂起）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.locks.Condition.signal()
<!-- END KEY -->
<!-- BEGIN DATA -->
唤醒一个等待线程。

<p>如果所有的线程都在等待此条件，则选择其中的一个唤醒。在从 {@code await} 返回之前，该线程必须重新获取锁。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.locks.Condition.signalAll()
<!-- END KEY -->
<!-- BEGIN DATA -->
唤醒所有等待线程。

<p>如果所有的线程都在等待此条件，则唤醒所有线程。在从 {@code await} 返回之前，每个线程都必须重新获取锁。

<!-- END DATA -->

