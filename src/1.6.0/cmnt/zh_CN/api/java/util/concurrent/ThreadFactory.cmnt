<!-- BEGIN KEY -->
public interface java.util.concurrent.ThreadFactory
<!-- END KEY -->
<!-- BEGIN DATA -->
根据需要创建新线程的对象。使用线程工厂就无需再手工编写对 {@link Thread#Thread(Runnable) new Thread} 的调用了，从而允许应用程序使用特殊的线程子类、属性等等。

 <p> 
此接口最简单的实现就是：
 <pre>
 class SimpleThreadFactory implements ThreadFactory {
   public Thread newThread(Runnable r) {
     return new Thread(r);
   }
 }
 </pre>

{@link Executors#defaultThreadFactory} 方法提供了更有用的简单实现，即在返回线程前将已创建线程的上下文设置为已知的值。
@since 1.5
@author Doug Lea

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Thread java.util.concurrent.ThreadFactory.newThread(Runnable r)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新 {@code Thread}。实现也可能初始化属性、名称、守护程序状态、{@code ThreadGroup} 等等。

@param r 由新线程实例所执行的可运行线程
@return 构造的线程，如果请求创建线程被拒绝，则返回 {@code null}

<!-- END DATA -->
