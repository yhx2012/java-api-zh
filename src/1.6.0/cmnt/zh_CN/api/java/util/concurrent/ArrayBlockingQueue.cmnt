<!-- BEGIN KEY -->
public class java.util.concurrent.ArrayBlockingQueue extends java.util.AbstractQueue implements java.util.concurrent.BlockingQueue, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->

一个由数组支持的有界{@linkplain BlockingQueue 阻塞队列}。此队列按 FIFO（先进先出）原则对元素进行排序。队列的<em>头部</em> 是在队列中存在时间最长的元素。队列的<em>尾部</em> 是在队列中存在时间最短的元素。新元素插入到队列的尾部，队列获取操作则是从队列头部开始获得元素。

<p>这是一个典型的&ldquo;有界缓存区&rdquo;，固定大小的数组在其中保持生产者插入的元素和使用者提取的元素。一旦创建了这样的缓存区，就不能再增加其容量。试图向已满队列中<tt>放入</tt>元素会导致操作受阻塞；试图从空队列中<tt>提取</tt>元素将导致类似阻塞。

<p>此类支持对等待的生产者线程和使用者线程进行排序的可选公平策略。默认情况下，不保证是这种排序。然而，通过将公平性 (fairness) 设置为 <tt>true</tt> 而构造的队列允许按照 FIFO 顺序访问线程。公平性通常会降低吞吐量，但也减少了可变性和避免了&ldquo;不平衡性&rdquo;。

<p>此类及其迭代器实现了 {@link Collection} 和 {@link Iterator} 接口的所有<em>可选</em> 方法。

<p>此类是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

@since 1.5
@author Doug Lea
@param <E> 在此 collection 中保持的元素类型

<!-- END DATA -->
<!-- BEGIN KEY -->
private final E[] java.util.concurrent.ArrayBlockingQueue.items
<!-- END KEY -->
<!-- BEGIN DATA -->
已加入队列的项
<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.util.concurrent.ArrayBlockingQueue.takeIndex
<!-- END KEY -->
<!-- BEGIN DATA -->
下次提取、轮询或移除的项索引
<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.util.concurrent.ArrayBlockingQueue.putIndex
<!-- END KEY -->
<!-- BEGIN DATA -->
下次放入、提供或添加的项索引
<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.util.concurrent.ArrayBlockingQueue.count
<!-- END KEY -->
<!-- BEGIN DATA -->
队列中的项的数量
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.ReentrantLock java.util.concurrent.ArrayBlockingQueue.lock
<!-- END KEY -->
<!-- BEGIN DATA -->
保护所有访问的主锁
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.Condition java.util.concurrent.ArrayBlockingQueue.notEmpty
<!-- END KEY -->
<!-- BEGIN DATA -->
等待取出的条件
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.Condition java.util.concurrent.ArrayBlockingQueue.notFull
<!-- END KEY -->
<!-- BEGIN DATA -->
等待放入的条件
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ArrayBlockingQueue(int capacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个带有给定的（固定）容量和默认访问策略的 <tt>ArrayBlockingQueue</tt>。
@param capacity 此队列的容量
@throws IllegalArgumentException 如果 <tt>capacity</tt> 小于 1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ArrayBlockingQueue(int capacity, boolean fair)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有给定的（固定）容量和指定访问策略的 <tt>ArrayBlockingQueue</tt>。
@param capacity 此队列的容量
@param fair 如果为 <tt>true</tt>，则按照 FIFO 顺序访问插入或移除时受阻塞线程的队列；如果为 <tt>false</tt>，则访问顺序是不确定的。
@throws IllegalArgumentException 如果 <tt>capacity</tt> 小于 1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ArrayBlockingQueue(int capacity, boolean fair, java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有给定的（固定）容量和指定访问策略的 <tt>ArrayBlockingQueue</tt>，它最初包含给定 collection 的元素，并以 collection 迭代器的遍历顺序添加元素。
@param capacity 此队列的容量
@param fair 如果为 <tt>true</tt>，则按照 FIFO 顺序访问插入或移除时受阻塞线程的队列；如果为 <tt>false</tt>，则访问顺序是不确定的。
@param c 最初要包含的元素的 collection
@throws IllegalArgumentException 如果 <tt>capacity</tt> 小于 <tt>c.size()</tt>，或者小于 1
@throws NullPointerException 如果指定 collection 或任何其元素为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ArrayBlockingQueue.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的元素插入到此队列的尾部（如果立即可行且不会超过该队列的容量），在成功时返回 <tt>true</tt>，如果此队列已满，则抛出 <tt>IllegalStateException</tt>。
@param e 要添加的元素
@return <tt>true</tt>（根据 {@link Collection#add} 的规定）
@throws IllegalStateException 如果此队列已满
@throws NullPointerException 如果指定的元素为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ArrayBlockingQueue.offer(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的元素插入到此队列的尾部（如果立即可行且不会超过该队列的容量），在成功时返回 <tt>true</tt>，如果此队列已满，则返回 <tt>false</tt>。此方法通常要优于 {@link #add} 方法，后者可能无法插入元素，而只是抛出一个异常。

@throws NullPointerException 如果指定的元素为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ArrayBlockingQueue.put(E e) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的元素插入此队列的尾部，如果该队列已满，则等待可用的空间。

@throws InterruptedException {@inheritDoc}
@throws NullPointerException {@inheritDoc}
<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ArrayBlockingQueue.offer(E e, long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定的元素插入此队列的尾部，如果该队列已满，则在到达指定的等待时间之前等待可用的空间。

 @throws InterruptedException {@inheritDoc}
 @throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.ArrayBlockingQueue.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此队列中元素的数量。

@return 返回此队列中元素的数量

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.ArrayBlockingQueue.remainingCapacity()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在无阻塞的理想情况下（不存在内存或资源约束）此队列能接受的其他元素数量。它总是等于此队列初始容量，但小于此队列当前的 <tt>size</tt>。

<p>注意，<em>不能</em> 总是通过检查 <tt>remainingCapacity</tt> 来判断尝试插入元素能否成功，因为可能出现这样的情况：另一个线程将插入或移除一个元素。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ArrayBlockingQueue.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此队列中移除指定元素的单个实例（如果存在）。更确切地讲，如果此队列包含一个或多个满足 <tt>o.equals(e)</tt> 的元素 <tt>e</tt>，则移除该元素。如果此队列包含指定的元素（或者此队列由于调用而发生更改），则返回 <tt>true</tt>。

 @param o 要从此队列中移除的元素（如果存在）
 @return 如果此队列由于调用而发生更改，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ArrayBlockingQueue.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此队列包含指定的元素，则返回 <tt>true</tt>。更确切地讲，当且仅当此队列至少包含一个满足 <tt>o.equals(e)</tt> 的元素 <tt>e</tt> 时，返回 <tt>true</tt>。

 @param o 检查是否包含在此队列中的对象
 @return 如果此队列包含指定的元素，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.util.concurrent.ArrayBlockingQueue.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回一个按适当顺序包含此队列中所有元素的数组。 

 <p>由于此队列不维护对返回数组的任何引用，因而它是“安全的”。（换句话说，此方法必须分配一个新数组）。因此，调用者可以随意修改返回的数组。

 <p>此方法充当基于数组的 API 与基于 collection 的 API 之间的桥梁。

 @return 包含此队列所有元素的数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.util.concurrent.ArrayBlockingQueue.toArray(T[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个按适当顺序包含此队列中所有元素的数组；返回数组的运行时类型是指定数组的运行时类型。如果指定的数组能容纳该队列，则将该队列返回此处。否则，将分配一个具有指定数组的运行时类型和此队列大小的新数组。

<p>如果指定的数组能容纳此队列，并有剩余空间（即数组的元素比此队列的多），则将数组中紧接队列末尾的元素设置为 <tt>null</tt>。

<p>像 {@link #toArray()} 方法一样，此方法充当基于数组的 API 与基于 collection 的 API 之间的桥梁。更进一步地说，此方法允许对输出数组的运行时类型进行精确控制，在某些情况下，可以用来节省分配开销。 

<p>假定 <tt>x</tt> 是只包含字符串的一个已知队列。以下代码用来将该队列转储到一个新分配的 <tt>String</tt> 数组：

 <pre>
     String[] y = x.toArray(new String[0]);</pre>

注意，<tt>toArray(new Object[0])</tt> 和 <tt>toArray()</tt> 在功能上是相同的。

 @param a 要在其中存储队列元素的数组（如果它足够大）；否则，将为此分配一个具有相同运行时类型的新数组。
 @return 包含此队列中所有元素的数组
 @throws ArrayStoreException 如果指定数组的运行时类型不是此队列中每个元素的运行时类型的超类型
 @throws NullPointerException 如果指定数组为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ArrayBlockingQueue.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
自动移除此队列中的所有元素。在此调用返回之后，队列将为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.ArrayBlockingQueue.drainTo(java.util.Collection<? super E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws UnsupportedOperationException {@inheritDoc}
 @throws ClassCastException            {@inheritDoc}
 @throws NullPointerException          {@inheritDoc}
 @throws IllegalArgumentException      {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.ArrayBlockingQueue.drainTo(java.util.Collection<? super E> c, int maxElements)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws UnsupportedOperationException {@inheritDoc}
 @throws ClassCastException            {@inheritDoc}
 @throws NullPointerException          {@inheritDoc}
 @throws IllegalArgumentException      {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.concurrent.ArrayBlockingQueue.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在此队列中的元素上按适当顺序进行迭代的迭代器。返回的 <tt>Iterator</tt> 是一个&ldquo;弱一致&rdquo;的迭代器，从不抛出 {@link ConcurrentModificationException}，并且确保可遍历迭代器构造时存在的元素，此外还可能（但并不保证）反映构造后的所有修改。

@return 在队列中的元素上按适当顺序进行迭代的迭代器

<!-- END DATA -->



