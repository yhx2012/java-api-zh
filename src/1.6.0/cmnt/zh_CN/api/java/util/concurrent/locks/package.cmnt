<!-- BEGIN KEY -->
java.util.concurrent.locks
<!-- END KEY -->
<!-- BEGIN DATA -->


为锁和等待条件提供一个框架的接口和类，它不同于内置同步和监视器。该框架允许更灵活地使用锁和条件，但以更难用的语法为代价。

<p> {@link java.util.concurrent.locks.Lock} 接口支持那些语义不同（重入、公平等）的锁规则，可以在非阻塞式结构的上下文（包括 hand-over-hand 和锁重排算法）中使用这些规则。主要的实现是 {@link java.util.concurrent.locks.ReentrantLock}。

<p> {@link java.util.concurrent.locks.ReadWriteLock} 接口以类似方式定义了一些读取者可以共享而写入者独占的锁。此包只提供了一个实现，即 {@link java.util.concurrent.locks.ReentrantReadWriteLock}，因为它适用于大部分的标准用法上下文。但程序员可以创建自己的、适用于非标准要求的实现。

<p> {@link java.util.concurrent.locks.Condition} 接口描述了可能会与锁有关联的条件变量。这些变量在用法上与使用 <tt>Object.wait</tt> 访问的隐式监视器类似，但提供了更强大的功能。需要特别指出的是，单个 <tt>Lock</tt> 可能与多个 <tt>Condition</tt> 对象关联。为了避免兼容性问题，<tt>Condition</tt> 方法的名称与对应的 <tt>Object</tt> 版本中的不同。

<p> {@link java.util.concurrent.locks.AbstractQueuedSynchronizer} 类是一个非常有用的超类，可用来定义锁以及依赖于排队阻塞线程的其他同步器。 {@link java.util.concurrent.locks.AbstractQueuedLongSynchronizer} 类提供相同的功能但扩展了对同步状态的 64 位的支持。两者都扩展了类 {@link java.util.concurrent.locks.AbstractOwnableSynchronizer}（一个帮助记录当前保持独占同步的线程的简单类）。{@link java.util.concurrent.locks.LockSupport} 类提供了更低级别的阻塞和解除阻塞支持，这对那些实现自己的定制锁类的开发人员很有用。

@since 1.5


<!-- END DATA -->
