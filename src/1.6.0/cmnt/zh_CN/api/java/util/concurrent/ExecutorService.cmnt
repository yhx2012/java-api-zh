<!-- BEGIN KEY -->
public interface java.util.concurrent.ExecutorService extends java.util.concurrent.Executor
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link Executor} 提供了管理终止的方法，以及可为跟踪一个或多个异步任务执行状况而生成 {@link Future} 的方法。

<p>可以关闭 <tt>ExecutorService</tt>，这将导致其拒绝新任务。提供两个方法来关闭 <tt>ExecutorService</tt>。{@link #shutdown} 方法在终止前允许执行以前提交的任务，而 {@link #shutdownNow} 方法阻止等待任务启动并试图停止当前正在执行的任务。在终止时，执行程序没有任务在执行，也没有任务在等待执行，并且无法提交新任务。应该关闭未使用的 <tt>ExecutorService</tt> 以允许回收其资源。

<p> 通过创建并返回一个可用于取消执行和/或等待完成的 {@link Future}，方法 <tt>submit</tt> 扩展了基本方法 {@link Executor#execute}。方法 <tt>invokeAny</tt> 和 <tt>invokeAll</tt> 是批量执行的最常用形式，它们执行任务 collection，然后等待至少一个，或全部任务完成（可使用 {@link ExecutorCompletionService} 类来编写这些方法的自定义变体）。

<p>{@link Executors} 类提供了用于此包中所提供的执行程序服务的工厂方法。

<h3>用法示例</h3>

下面给出了一个网络服务的简单结构，这里线程池中的线程作为传入的请求。它使用了预先配置的 {@link Executors#newFixedThreadPool} 工厂方法：

 <pre>
 class NetworkService implements Runnable {
    private final ServerSocket serverSocket;
    private final ExecutorService pool;

    public NetworkService(int port, int poolSize)
        throws IOException {
      serverSocket = new ServerSocket(port);
      pool = Executors.newFixedThreadPool(poolSize);
    }
 
    public void run() { // run the service
      try {
        for (;;) {
          pool.execute(new Handler(serverSocket.accept()));
        }
      } catch (IOException ex) {
        pool.shutdown();
      }
    }
  }

  class Handler implements Runnable {
    private final Socket socket;
    Handler(Socket socket) { this.socket = socket; }
    public void run() {
      // read and service request on socket
    }
 }
 </pre>

下列方法分两个阶段关闭 <tt>ExecutorService</tt>。第一阶段调用 <tt>shutdown</tt> 拒绝传入任务，然后调用 <tt>shutdownNow</tt>（如有必要）取消所有遗留的任务： 

 <pre>
 void shutdownAndAwaitTermination(ExecutorService pool) {
   pool.shutdown(); // Disable new tasks from being submitted
   try {
     // Wait a while for existing tasks to terminate
     if (!pool.awaitTermination(60, TimeUnit.SECONDS)) {
       pool.shutdownNow(); // Cancel currently executing tasks
       // Wait a while for tasks to respond to being cancelled
       if (!pool.awaitTermination(60, TimeUnit.SECONDS))
           System.err.println("Pool did not terminate");
     }
   } catch (InterruptedException ie) {
     // (Re-)Cancel if current thread also interrupted
     pool.shutdownNow();
     // Preserve interrupt status
     Thread.currentThread().interrupt();
   }
 }
 </pre>

<p>内存一致性效果：线程中向 {@code ExecutorService} 提交 {@code Runnable} 或 {@code Callable} 任务之前的操作 <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a> 由该任务所提取的所有操作，后者依次 <i>happen-before</i> 通过 {@code Future.get()} 获取的结果。

@since 1.5
@author Doug Lea

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ExecutorService.shutdown()
<!-- END KEY -->
<!-- BEGIN DATA -->
启动一次顺序关闭，执行以前提交的任务，但不接受新任务。如果已经关闭，则调用没有其他作用。

@throws SecurityException 如果安全管理器存在并且关闭，此 ExecutorService 可能操作某些不允许调用者修改的线程（因为它没有保持 {@link java.lang.RuntimePermission}<tt>(&quot;modifyThread&quot;)</tt>），或者安全管理器的 <tt>checkAccess</tt> 方法拒绝访问。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.lang.Runnable> java.util.concurrent.ExecutorService.shutdownNow()
<!-- END KEY -->
<!-- BEGIN DATA -->
试图停止所有正在执行的活动任务，暂停处理正在等待的任务，并返回等待执行的任务列表。 
  
<p>无法保证能够停止正在处理的活动执行任务，但是会尽力尝试。例如，通过 {@link Thread#interrupt} 来取消典型的实现，所以任何任务无法响应中断都可能永远无法终止。

@return 从未开始执行的任务的列表
@throws SecurityException 如果安全管理器存在并且关闭，此 ExecutorService 可能操作某些不允许调用者修改的线程（因为它没有保持 {@link java.lang.RuntimePermission}<tt>(&quot;modifyThread&quot;)</tt>），或者安全管理器的 <tt>checkAccess</tt> 方法拒绝访问。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ExecutorService.isShutdown()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此执行程序已关闭，则返回 <tt>true</tt>。

@return 如果此执行程序已关闭，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ExecutorService.isTerminated()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果关闭后所有任务都已完成，则返回 <tt>true</tt>。注意，除非首先调用 <tt>shutdown</tt> 或 <tt>shutdownNow</tt>，否则 <tt>isTerminated</tt> 永不为 <tt>true</tt>。

@return 如果关闭后所有任务都已完成，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ExecutorService.awaitTermination(long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
请求关闭、发生超时或者当前线程中断，无论哪一个首先发生之后，都将导致阻塞，直到所有任务完成执行。

@param timeout 最长等待时间
@param unit timeout 参数的时间单位
@return 如果此执行程序终止，则返回 <tt>true</tt>；如果终止前超时期满，则返回 <tt>false</tt>
@throws InterruptedException 如果等待时发生中断

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.Future<T> java.util.concurrent.ExecutorService.submit(java.util.concurrent.Callable<T> task)
<!-- END KEY -->
<!-- BEGIN DATA -->
提交一个返回值的任务用于执行，返回一个表示任务的未决结果的 Future。该 Future 的 <tt>get</tt> 方法在成功完成时将会返回该任务的结果。

 <p>
如果想立即阻塞任务的等待，则可以使用 <tt>result = exec.submit(aCallable).get();</tt> 形式的构造。

<p> 注：{@link Executors} 类包括了一组方法，可以转换某些其他常见的类似于闭包的对象，例如，将 {@link java.security.PrivilegedAction} 转换为 {@link Callable} 形式，这样就可以提交它们了。

@param task 要提交的任务
@return 表示任务等待完成的 Future
@throws RejectedExecutionException 如果任务无法安排执行
@throws NullPointerException 如果该任务为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.Future<T> java.util.concurrent.ExecutorService.submit(Runnable task, T result)
<!-- END KEY -->
<!-- BEGIN DATA -->
提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。该 Future 的 <tt>get</tt> 方法在成功完成时将会返回给定的结果。

@param task 要提交的任务
@param result 返回的结果
@return 表示任务等待完成的 Future
@throws RejectedExecutionException 如果任务无法安排执行
@throws NullPointerException 如果该任务为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.Future<?> java.util.concurrent.ExecutorService.submit(Runnable task)
<!-- END KEY -->
<!-- BEGIN DATA -->
提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。该 Future 的 <tt>get</tt> 方法在<em>成功</em> 完成时将会返回 <tt>null</tt>。

@param task 要提交的任务
@return 表示任务等待完成的 Future
@throws RejectedExecutionException 如果任务无法安排执行
@throws NullPointerException 如果该任务为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.util.concurrent.Future<T>> java.util.concurrent.ExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>> tasks) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
执行给定的任务，当所有任务完成时，返回保持任务状态和结果的 Future 列表。返回列表的所有元素的 {@link Future#isDone} 为 <tt>true</tt>。注意，可以正常地或通过抛出异常来终止<em>已完成</em> 任务。如果正在进行此操作时修改了给定的 collection，则此方法的结果是不确定的。

@param tasks 任务 collection
@return 表示任务的 Future 列表，列表顺序与给定任务列表的迭代器所生成的顺序相同，每个任务都已完成。
@throws InterruptedException 如果等待时发生中断，在这种情况下取消尚未完成的任务。
@throws NullPointerException 如果任务或其任意元素为 <tt>null</tt>
@throws RejectedExecutionException 如果所有任务都无法安排执行

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.util.concurrent.Future<T>> java.util.concurrent.ExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>> tasks, long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
执行给定的任务，当所有任务完成或超时期满时（无论哪个首先发生），返回保持任务状态和结果的 Future 列表。返回列表的所有元素的 {@link Future#isDone} 为 <tt>true</tt>。一旦返回后，即取消尚未完成的任务。注意，可以正常地或通过抛出异常来终止<em>已完成</em> 任务。如果此操作正在进行时修改了给定的 collection，则此方法的结果是不确定的。

@param tasks 任务 collection
@param timeout 最长等待时间
@param unit timeout 参数的时间单位
@return 表示任务的 Future 列表，列表顺序与给定任务列表的迭代器所生成的顺序相同。如果操作未超时，则已完成所有任务。如果确实超时了，则某些任务尚未完成。
@throws InterruptedException 如果等待时发生中断，在这种情况下取消尚未完成的任务
@throws NullPointerException 如果任务或其任意元素或 unit 为 <tt>null</tt>
@throws RejectedExecutionException 如果所有任务都无法安排执行

<!-- END DATA -->
<!-- BEGIN KEY -->
public T java.util.concurrent.ExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>> tasks) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
<!-- END KEY -->
<!-- BEGIN DATA -->
执行给定的任务，如果某个任务已成功完成（也就是未抛出异常），则返回其结果。一旦正常或异常返回后，则取消尚未完成的任务。如果此操作正在进行时修改了给定的 collection，则此方法的结果是不确定的。

@param tasks 任务 collection
@return 某个任务返回的结果
@throws InterruptedException 如果等待时发生中断
@throws NullPointerException 如果任务或其任意元素为 <tt>null</tt>
@throws IllegalArgumentException 如果任务为空
@throws ExecutionException 如果没有任务成功完成
@throws RejectedExecutionException 如果任务无法安排执行

<!-- END DATA -->
<!-- BEGIN KEY -->
public T java.util.concurrent.ExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>> tasks, long timeout, TimeUnit unit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
<!-- END KEY -->
<!-- BEGIN DATA -->
执行给定的任务，如果在给定的超时期满前某个任务已成功完成（也就是未抛出异常），则返回其结果。一旦正常或异常返回后，则取消尚未完成的任务。如果此操作正在进行时修改了给定的 collection，则此方法的结果是不确定的。

@param tasks 任务 collection
@param timeout 最长等待时间
@param unit timeout 参数的时间单位
@return 某个任务返回的结果
@throws InterruptedException 如果等待时发生中断
@throws NullPointerException 如果任务或其任意元素或 unit 为 <tt>null</tt>
@throws TimeoutException 如果在所有任务成功完成之前给定的超时期满
@throws ExecutionException 如果没有任务成功完成
@throws RejectedExecutionException 如果任务无法安排执行

<!-- END DATA -->
