
<!-- BEGIN KEY -->
public class java.util.concurrent.locks.ReentrantReadWriteLock extends java.lang.Object implements java.util.concurrent.locks.ReadWriteLock, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
支持与 {@link ReentrantLock} 类似语义的 {@link ReadWriteLock} 实现。
<p>此类具有以下属性：

 <ul>
<li><b>获取顺序</b>

<p> 此类不会将读取者优先或写入者优先强加给锁访问的排序。但是，它确实支持可选的<em>公平</em> 策略。

<dl>
<dt><b><i>非公平模式（默认）</i></b>
<dd>当非公平地（默认）构造时，未指定进入读写锁的顺序，受到 reentrancy 约束的限制。连续竞争的非公平锁可能无限期地推迟一个或多个 reader 或 writer 线程，但吞吐量通常要高于公平锁。
 <p>

<dt><b><i>公平模式</i></b>
<dd> 当公平地构造线程时，线程利用一个近似到达顺序的策略来争夺进入。当释放当前保持的锁时，可以为等待时间最长的单个 writer 线程分配写入锁，如果有一组等待时间大于所有正在等待的 writer 线程 的 reader 线程，将为该组分配写入锁。

 <p>如果保持写入锁，或者有一个等待的 writer 线程，则试图获得公平读取锁（非重入地）的线程将会阻塞。直到当前最旧的等待 writer 线程已获得并释放了写入锁之后，该线程才会获得读取锁。当然，如果等待 writer 放弃其等待，而保留一个或更多 reader 线程为队列中带有写入锁自由的时间最长的 waiter，则将为那些 reader 分配读取锁。

 <p>试图获得公平写入锁的（非重入地）的线程将会阻塞，除非读取锁和写入锁都自由（这意味着没有等待线程）。（注意，非阻塞 {@link ReadLock#tryLock()} 和 {@link WriteLock#tryLock()} 方法不会遵守此公平设置，并将获得锁（如果可能），不考虑等待线程）。
 <p>
 </dl>
 
<li><b>重入</b>

<p>此锁允许 reader 和 writer 按照 {@link ReentrantLock} 的样式重新获取读取锁或写入锁。在写入线程保持的所有写入锁都已经释放后，才允许重入 reader 使用它们。 
 
<p>此外，writer 可以获取读取锁，但反过来则不成立。在其他应用程序中，当在调用或回调那些在读取锁状态下执行读取操作的方法期间保持写入锁时，重入很有用。如果 reader 试图获取写入锁，那么将永远不会获得成功。
 
<li><b>锁降级</b>
<p>重入还允许从写入锁降级为读取锁，其实现方式是：先获取写入锁，然后获取读取锁，最后释放写入锁。但是，从读取锁升级到写入锁是<b>不可能的</b>。

<li><b>锁获取的中断</b>
<p>读取锁和写入锁都支持锁获取期间的中断。

<li><b>{@link Condition} 支持</b>
<p>写入锁提供了一个 {@link Condition} 实现，对于写入锁来说，该实现的行为与 {@link ReentrantLock#newCondition} 提供的 {@link Condition} 实现对 {@link ReentrantLock} 所做的行为相同。当然，此 {@link Condition} 只能用于写入锁。

<p>读取锁不支持 {@link Condition}，{@code readLock().newCondition()} 会抛出 {@code UnsupportedOperationException}。

<li><b>监测</b>
<p>此类支持一些确定是保持锁还是争用锁的方法。这些方法设计用于监视系统状态，而不是同步控制。
 </ul>

<p> 此类行为的序列化方式与内置锁的相同：反序列化的锁处于解除锁状态，无论序列化该锁时其状态如何。

<p><b>示例用法</b>。下面的代码展示了如何利用重入来执行升级缓存后的锁降级（为简单起见，省略了异常处理）：
 <pre>
 class CachedData {
   Object data;
   volatile boolean cacheValid;
   ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();

   void processCachedData() {
     rwl.readLock().lock();
     if (!cacheValid) {
        // Must release read lock before acquiring write lock
        rwl.readLock().unlock();
        rwl.writeLock().lock();
        // Recheck state because another thread might have acquired
        //   write lock and changed state before we did.
        if (!cacheValid) {
          data = ...
          cacheValid = true;
        }
        // Downgrade by acquiring read lock before releasing write lock
        rwl.readLock().lock();
        rwl.writeLock().unlock(); // Unlock write, still hold read
     }

     use(data);
     rwl.readLock().unlock();
   }
 }
 </pre>

在使用某些种类的 Collection 时，可以使用 ReentrantReadWriteLock 来提高并发性。通常，在预期 collection 很大，读取者线程访问它的次数多于写入者线程，并且 entail 操作的开销高于同步开销时，这很值得一试。例如，以下是一个使用 TreeMap 的类，预期它很大，并且能被同时访问。

 <pre>{@code
 class RWDictionary {
    private final Map<String, Data> m = new TreeMap<String, Data>();
    private final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();
    private final Lock r = rwl.readLock();
    private final Lock w = rwl.writeLock();

    public Data get(String key) {
        r.lock();
        try { return m.get(key); }
        finally { r.unlock(); }
    }
    public String[] allKeys() {
        r.lock();
        try { return m.keySet().toArray(); }
        finally { r.unlock(); }
    }
    public Data put(String key, Data value) {
        w.lock();
        try { return m.put(key, value); }
        finally { w.unlock(); }
    }
    public void clear() {
        w.lock();
        try { m.clear(); }
        finally { w.unlock(); }
    }
 }}</pre> 

<h3>实现注意事项：</h3>

<p>此锁最多支持 65535 个递归写入锁和 65535 个读取锁。试图超出这些限制将导致锁方法抛出 {@link Error}。

@since 1.5
@author Doug Lea


<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock java.util.concurrent.locks.ReentrantReadWriteLock.readerLock
<!-- END KEY -->
<!-- BEGIN DATA -->
提供读取锁的内部类
<!-- END DATA -->

<!-- BEGIN KEY -->
private final java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock java.util.concurrent.locks.ReentrantReadWriteLock.writerLock
<!-- END KEY -->
<!-- BEGIN DATA -->
提供写入锁的内部类
<!-- END DATA -->

<!-- BEGIN KEY -->
private final java.util.concurrent.locks.ReentrantReadWriteLock.Sync java.util.concurrent.locks.ReentrantReadWriteLock.sync
<!-- END KEY -->
<!-- BEGIN DATA -->
执行所有同步机制
<!-- END DATA -->

<!-- BEGIN KEY -->
public java.util.concurrent.locks.ReentrantReadWriteLock()
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认（非公平）的排序属性创建一个新的 {@code ReentrantReadWriteLock}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.locks.ReentrantReadWriteLock(boolean fair)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的公平策略创建一个新的 {@code ReentrantReadWriteLock}。

@param fair 如果此锁应该使用公平排序策略，则该参数的值为 {@code true}

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.locks.ReentrantReadWriteLock.isFair()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此锁将公平性设置为 ture，则返回 {@code true}。

@return 如果此锁将公平性设置为 ture，则返回 {@code true}

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Thread java.util.concurrent.locks.ReentrantReadWriteLock.getOwner()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前拥有写入锁的线程，如果没有这样的线程，则返回 {@code null}。当通过不是所有者的线程调用此方法时，返回值反映当前锁状态的最接近近似值。例如，即使存在试图获得锁的线程，但是在它还没有获得前，所有者可能暂时为 {@code null}。设计此方法是为了便于构造提供更多扩展的锁监视设施的子类。

@return 所有者；如果没有所有者，则返回 {@code null}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.locks.ReentrantReadWriteLock.getReadLockCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
查询为此锁保持的读取锁数量。此方法设计用于监视系统状态，而不是同步控制。
@return 所保持的读取锁数量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.locks.ReentrantReadWriteLock.isWriteLocked()
<!-- END KEY -->
<!-- BEGIN DATA -->
查询是否某个线程保持了写入锁。此方法设计用于监视系统状态，而不是同步控制。
@return 如果某个线程保持写入锁，则返回 {@code true}；否则返回 {@code false}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.locks.ReentrantReadWriteLock.isWriteLockedByCurrentThread()
<!-- END KEY -->
<!-- BEGIN DATA -->
查询当前线程是否保持了写入锁。
@return 如果当前线程保持写入锁，则返回 {@code true}；否则返回 {@code false}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.locks.ReentrantReadWriteLock.getWriteHoldCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
查询当前线程在此锁上保持的重入写入锁数量。对于与解除锁操作不匹配的每个锁操作，writer 线程都会为其保持一个锁。

@return 当前线程保持的写入锁数量，如果当前线程从未保持过写入锁，则返回 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.locks.ReentrantReadWriteLock.getReadHoldCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 查询当前线程在此锁上保持的重入读取锁数量。对于与解除锁操作不匹配的每个锁操作，reader 线程都会为其保持一个锁。

 @return 当前线程保持的读取锁数量；如果当前线程从未保持过读取锁，则返回 0
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Collection<java.lang.Thread> java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedWriterThreads()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 collection，它包含可能正在等待获取写入锁的线程。因为在构成此结果的同时，实际的线程 set 可能不断发生变化，所以返回的 collection 仅是尽力而为获得的估计值。所返回 collection 的元素没有特定的顺序。设计此方法是为了便于构造提供更多扩展的锁监视器设施的子类。

@return 线程的 collection

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Collection<java.lang.Thread> java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedReaderThreads()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 collection，它包含可能正在等待获取读取锁的线程。因为在构成此结果的同时，实际的线程 set 可能不断发生变化，所以返回的 collection 仅是尽力而为获得的估计值。所返回 collection 的元素没有特定的顺序。设计此方法是为了便于构造提供更多扩展的锁监视器设施的子类。

@return 线程的 collection

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.locks.ReentrantReadWriteLock.hasQueuedThreads()
<!-- END KEY -->
<!-- BEGIN DATA -->
查询是否所有的线程正在等待获取读取或写入锁。注意，因为随时可能发生取消操作，所以返回 {@code true} 并不保证任何其他线程将获取锁。此方法主要用于监视系统状态。

@return 如果有其他线程正等待获取锁，则返回 {@code true}

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.locks.ReentrantReadWriteLock.hasQueuedThread(Thread thread)
<!-- END KEY -->
<!-- BEGIN DATA -->
查询是否给定线程正在等待获取读取或写入锁。注意，因为随时可能发生取消操作，所以返回 {@code true} 并不保证此线程将获取锁。此方法主要用于监视系统状态。

@param thread 线程
@return 如果将给定的线程加入等待此锁的队列，则返回 {@code true}
@throws NullPointerException 如果线程为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.util.concurrent.locks.ReentrantReadWriteLock.getQueueLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回等待获取读取或写入锁的线程估计数目。因为在此方法遍历内部数据结构时，可以动态地更改线程数，所以该值只能是一个估计值。此方法设计用于监视系统状态，而不是同步控制。

@return 正在等待此锁的线程估计数目

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Collection<java.lang.Thread> java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedThreads()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 collection，它包含可能正在等待获取读取或写入锁的线程。因为在构造此结果的同时，实际的线程 set 可能不断发生变化，所以返回的 collection 仅是尽力而为获得的估计值。所返回 collection 中的元素没有特定的顺序。此方法用于加快子类的构造速度，提供更多的监视设施。

@return 线程的 collection

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.locks.ReentrantReadWriteLock.hasWaiters(Condition condition)
<!-- END KEY -->
<!-- BEGIN DATA -->
查询是否有些线程正在等待与写入锁有关的给定条件。注意，因为随时可能发生超时和中断，所以返回 {@code true} 并不保证将来某个 {@code signal} 将唤醒任何线程。此方法主要用于监视系统状态。

@param condition 条件
@return 如果有等待的线程，则返回 {@code true}
@throws IllegalMonitorStateException 如果没有保持此锁
@throws IllegalArgumentException 如果给定的条件与此锁无关
@throws NullPointerException 如果条件为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.locks.ReentrantReadWriteLock.getWaitQueueLength(Condition condition)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回正等待与写入锁相关的给定条件的线程估计数目。注意，因为随时可能发生超时和中断，所以只能将估计值作为实际等待线程数的上限。此方法设计用于监视系统状态，而不是同步控制。

@param condition 条件
@return 等待线程的估计数
@throws IllegalMonitorStateException 如果没有保持此锁
@throws IllegalArgumentException 如果给定的条件与此锁无关
@throws NullPointerException 如果条件为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Collection<java.lang.Thread> java.util.concurrent.locks.ReentrantReadWriteLock.getWaitingThreads(Condition condition)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 collection，它包含可能正在等待与写入锁相关的给定条件的那些线程。因为在构造此结果的同时，实际的线程 set 可能不断发生变化，所以返回的 collection 仅是尽力而为获得的估计值。所返回 collection 中的元素没有特定的顺序。此方法用于加快子类的构造速度，提供更多的条件监视设施。

@param condition 条件
@return 线程的 collection
@throws IllegalMonitorStateException 如果没有保持此锁
@throws IllegalArgumentException 如果给定 condition 与此锁无关
@throws NullPointerException 如果条件为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.concurrent.locks.ReentrantReadWriteLock.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回标识此锁及其锁状态的字符串。该状态括在括号中，它包括字符串 {@code "Write locks ="}，后跟重入保持写入锁的数目，然后是字符串 {@code "Read locks ="}，后跟所保持读取锁的数目。

@return 标识此锁及其锁状态的字符串

<!-- END DATA -->
