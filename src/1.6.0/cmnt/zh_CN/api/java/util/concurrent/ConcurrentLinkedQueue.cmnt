<!-- BEGIN KEY -->
public class java.util.concurrent.ConcurrentLinkedQueue extends java.util.AbstractQueue implements java.util.Queue, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
一个基于链接节点的无界线程安全{@linkplain Queue 队列}。此队列按照 FIFO（先进先出）原则对元素进行排序。队列的<em>头部</em> 是队列中时间最长的元素。队列的<em>尾部</em> 是队列中时间最短的元素。新的元素插入到队列的尾部，队列获取操作从队列头部获得元素。当多个线程共享访问一个公共 collection 时，<tt>ConcurrentLinkedQueue</tt> 是一个恰当的选择。此队列不允许使用 <tt>null</tt> 元素。

<p>此实现采用了有效的&ldquo;无等待 (wait-free)&rdquo;算法，该算法基于 Maged M. Michael 和 Michael L. Scott 合著的 <a
 href="http://www.cs.rochester.edu/u/michael/PODC96.html"> Simple, Fast, and Practical Non-Blocking and Blocking Concurrent Queue Algorithms</a> 中描述的算法。

<p>需要小心的是，与大多数 collection 不同，<tt>size</tt> 方法<em>不是</em> 一个固定时间操作。由于这些队列的异步特性，确定当前元素的数量需要遍历这些元素。

<p>此类及其迭代器实现了 {@link Collection} 和 {@link Iterator} 接口的所有<em>可选</em> 方法。

<p>内存一致性效果：当存在其他并发 collection 时，将对象放入 {@code ConcurrentLinkedQueue} 之前的线程中的操作 <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a> 随后通过另一线程从 {@code ConcurrentLinkedQueue} 访问或移除该元素的操作。

<p>此类是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

@since 1.5
@author Doug Lea
@param <E> 在此 collection 中保持的元素类型


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentLinkedQueue()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个最初为空的 <tt>ConcurrentLinkedQueue</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentLinkedQueue(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个最初包含给定 collection 元素的 <tt>ConcurrentLinkedQueue</tt>，按照此 collection 迭代器的遍历顺序来添加元素。
@param c 最初包含的元素 collection
@throws NullPointerException 如果指定 collection 或其任何元素为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentLinkedQueue.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素插入此队列的尾部。
@param o 要添加的元素
@return <tt>true</tt>（根据 {@link Collection#add} 的规定）

@throws  NullPointerException 如果指定元素为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentLinkedQueue.offer(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素插入此队列的尾部。

@return <tt>true</tt>（根据 {@link Queue#offer} 的规定）
@throws NullPointerException 如果指定元素为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentLinkedQueue.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
 如果此队列不包含任何元素，则返回 <tt>true</tt>。

 @return 如果此队列不包含任何元素，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.ConcurrentLinkedQueue.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此队列中的元素数量。如果此队列包含的元素数大于 <tt>Integer.MAX_VALUE</tt>，则返回 <tt>Integer.MAX_VALUE</tt>。

<p>需要小心的是，与大多数 collection 不同，此方法<em>不是</em> 一个固定时间操作。由于这些队列的异步特性，确定当前的元素数需要进行一次花费 O(n) 时间的遍历。

@return  此队列中的元素数

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentLinkedQueue.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 如果此队列包含指定元素，则返回 <tt>true</tt>。更确切地讲，当且仅当此队列至少包含一个满足 <tt>o.equals(e)</tt> 的元素 <tt>e</tt> 时，返回 <tt>true</tt>。

 @param o 要检查是否包含于此队列的对象
 @return 如果此队列包含指定元素，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentLinkedQueue.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 从队列中移除指定元素的单个实例（如果存在）。更确切地讲，如果此队列包含一个或多个满足 <tt>o.equals(e)</tt> 的元素 <tt>e</tt>，则移除一个这样的元素。如果此队列包含指定元素（或者此队列由于调用而发生更改），则返回 <tt>true</tt>。

 @param o 将从此队列中移除的元素（如果存在）
 @return 如果此队列由于调用而发生更改，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.util.concurrent.ConcurrentLinkedQueue.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回以恰当顺序包含此队列所有元素的数组。

 <p>由于此队列并不维护对返回数组的任何引用，因而它将是“安全的”。（换句话说，此方法必须分配一个新数组）。因此，调用者可以随意修改返回的数组。

 <p>此方法充当基于数组的 API 与基于 collection 的 API 之间的桥梁。

 @return 包含此队列所有元素的数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.util.concurrent.ConcurrentLinkedQueue.toArray(T[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回以恰当顺序包含此队列所有元素的数组；返回数组的运行时类型是指定数组的运行时类型。如果指定的数组能容纳队列，则将该队列返回此处。否则，将分配一个具有指定数组的运行时类型和此队列大小的新数组。

 <p>如果指定的数组能容纳队列，并有剩余的空间（即数组的元素比队列多），那么会将紧接队列尾部的元素设置为 <tt>null</tt>。

 <p>像 {@link #toArray()} 方法一样，此方法充当基于数组的 API 与基于 collection 的 API 之间的桥梁。更进一步说，此方法允许对输出数组的运行时类型进行精确控制，在某些情况下，这可以用来节省分配开销。

 <p>假定 <tt>x</tt> 是只包含字符串的一个已知队列。以下代码用来将该队列转储到一个新分配的 <tt>String</tt> 数组：

 <pre>
     String[] y = x.toArray(new String[0]);</pre>

 注意，<tt>toArray(new Object[0])</tt> 和 <tt>toArray()</tt> 在功能上是相同的。

 @param a 将用来存储队列元素的数组（如果该数组足够大）；否则，将为此分配一个具有相同运行时类型的新数组
 @return 包含此队列所有元素的数组
 @throws ArrayStoreException 如果指定数组的运行时类型不是此队列中每个元素的运行时类型的超类型
 @throws NullPointerException 如果指定数组为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.concurrent.ConcurrentLinkedQueue.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在此队列元素上以恰当顺序进行迭代的迭代器。返回的迭代器是一个&ldquo;弱一致&rdquo;迭代器，它不会抛出 {@link ConcurrentModificationException}，并且可保证遍历迭代器构造时存在的元素，此外还可能（但并不保证）反映构造后的所有修改。


@return 在此队列元素上以恰当顺序进行迭代的迭代器

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.concurrent.ConcurrentLinkedQueue.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
在某一流中重构 Queue 实例（也就是将其反序列化）。
@param s 流

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.concurrent.ConcurrentLinkedQueue.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将状态保存到流中（也就是将其序列化）。

@serialData 以恰当顺序排列的所有元素（每个元素是一个 <tt>E</tt>），后跟一个 null
@param s 流

<!-- END DATA -->
