<!-- BEGIN KEY -->
public class java.util.concurrent.atomic.AtomicBoolean extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
可以用原子方式更新的 {@code boolean} 值。有关原子变量属性的描述，请参阅 {@link java.util.concurrent.atomic} 包规范。{@code AtomicBoolean} 可用在应用程序中（如以原子方式更新的标志），但不能用于替换 {@link java.lang.Boolean}。

@since 1.5
@author Doug Lea

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.atomic.AtomicBoolean(boolean initialValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的初始值创建新的 {@code AtomicBoolean}。

@param initialValue 初始值

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.atomic.AtomicBoolean()
<!-- END KEY -->
<!-- BEGIN DATA -->
使用初始值 {@code false} 创建新的 {@code AtomicBoolean}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.atomic.AtomicBoolean.get()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前值。

@return 当前值

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean expect, boolean update)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前值 {@code ==} 预期值，则以原子方式将该值设置为给定的更新值。
@param expect 预期值
@param update 新值
@return 如果成功，则返回 true。返回 False 指示实际值与预期值不相等。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.atomic.AtomicBoolean.weakCompareAndSet(boolean expect, boolean update)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前值 {@code ==} 预期值，则以原子方式将该值设置为给定的更新值。

<p>可能<a href="package-summary.html#Spurious">意外失败</a>并且不提供排序保证，因此几乎只是 {@code compareAndSet} 的适当替代方法。

@param expect 预期值
@param update 新值
@return 如果成功，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.atomic.AtomicBoolean.set(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
无条件地设置为给定值。

@param newValue 新值

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.atomic.AtomicBoolean.lazySet(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 最终设置为给定值。

 @param newValue 新值
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.atomic.AtomicBoolean.getAndSet(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
以原子方式设置为给定值，并返回以前的值。

@param newValue 新值
@return 以前的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.concurrent.atomic.AtomicBoolean.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前值的字符串表示形式。
@return 当前值的字符串表示形式。

<!-- END DATA -->
