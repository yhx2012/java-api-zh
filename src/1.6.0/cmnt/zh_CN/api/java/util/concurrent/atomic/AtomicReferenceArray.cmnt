<!-- BEGIN KEY -->
public class java.util.concurrent.atomic.AtomicReferenceArray extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
可以用原子方式更新其元素的对象引用数组。有关原子变量属性的描述，请参阅 {@link java.util.concurrent.atomic} 包规范。
@since 1.5
@author Doug Lea
@param <E> 此数组中所保持元素的基类

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.atomic.AtomicReferenceArray(int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建给定长度的新 AtomicReferenceArray。
@param length 该数组的长度

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.atomic.AtomicReferenceArray(E[] array)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建与给定数组具有相同长度的新 AtomicReferenceArray，并从给定数组复制其所有元素。
 
@param array 从中复制元素的数组
@throws NullPointerException 如果数组为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.util.concurrent.atomic.AtomicReferenceArray.length()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该数组的长度。

@return 该数组的长度

<!-- END DATA -->
<!-- BEGIN KEY -->
public final E java.util.concurrent.atomic.AtomicReferenceArray.get(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取位置 {@code i} 的当前值。

@param i 索引
@return 当前值

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.atomic.AtomicReferenceArray.set(int i, E newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
将位置 {@code i} 的元素设置为给定值。

@param i 索引
@param newValue 新值

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.atomic.AtomicReferenceArray.lazySet(int i, E newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 最终将位置 {@code i} 的元素设置为给定值。

 @param i 索引
 @param newValue 新值
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final E java.util.concurrent.atomic.AtomicReferenceArray.getAndSet(int i, E newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
以原子方式将位置 {@code i} 的元素设置为给定值，并返回旧值。

@param i 索引
@param newValue 新值
@return 以前的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.atomic.AtomicReferenceArray.compareAndSet(int i, E expect, E update)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前值 {@code ==} 预期值，则以原子方式将位置 {@code i} 的元素设置为给定的更新值。
@param i 索引
@param expect 预期值
@param update 新值
@return 如果成功，则返回 true。返回 false 表示实际值与预期值不相等。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.atomic.AtomicReferenceArray.weakCompareAndSet(int i, E expect, E update)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前值 {@code ==} 预期值，则以原子方式将位置 {@code i} 的元素设置为给定的更新值。

<p>可能<a href="package-summary.html#Spurious">意外失败</a>并且不提供排序保证，因此几乎只是 {@code compareAndSet} 的适当替换方法。

@param i 索引
@param expect 预期值
@param update 新值
@return 如果成功，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.concurrent.atomic.AtomicReferenceArray.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回数组当前值的字符串表示形式。
@return 数组当前值的字符串表示形式。

<!-- END DATA -->


