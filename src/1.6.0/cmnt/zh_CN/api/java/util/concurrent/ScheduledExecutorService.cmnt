<!-- BEGIN KEY -->
public interface java.util.concurrent.ScheduledExecutorService extends java.util.concurrent.ExecutorService
<!-- END KEY -->
<!-- BEGIN DATA -->
一个 {@link ExecutorService}，可安排在给定的延迟后运行或定期执行的命令。 

<p> <tt>schedule</tt> 方法使用各种延迟创建任务，并返回一个可用于取消或检查执行的任务对象。<tt>scheduleAtFixedRate</tt> 和 <tt>scheduleWithFixedDelay</tt> 方法创建并执行某些在取消前一直定期运行的任务。  

<p> 用 {@link Executor#execute} 和 {@link ExecutorService} 的 <tt>submit</tt> 方法所提交的命令，通过所请求的 0 延迟进行安排。<tt>schedule</tt> 方法中允许出现 0 和负数延迟（但不是周期），并将这些视为一种立即执行的请求。

<p>所有的 <tt>schedule</tt> 方法都接受<em>相对</em> 延迟和周期作为参数，而不是绝对的时间或日期。将以 {@link java.util.Date} 所表示的绝对时间转换成要求的形式很容易。例如，要安排在某个以后的 <tt>Date</tt> 运行，可以使用：<tt>schedule(task, date.getTime() - System.currentTimeMillis(), TimeUnit.MILLISECONDS)</tt>。但是要注意，由于网络时间同步协议、时钟漂移或其他因素的存在，因此相对延迟的期满日期不必与启用任务的当前 <tt>Date</tt> 相符。

{@link Executors} 类为此包中所提供的 ScheduledExecutorService 实现提供了便捷的工厂方法。

<h3>用法示例</h3>
 
以下是一个带方法的类，它设置了 ScheduledExecutorService ，在 1 小时内每 10 秒钟蜂鸣一次：

 <pre>
 import static java.util.concurrent.TimeUnit.*;
 class BeeperControl {
    private final ScheduledExecutorService scheduler = 
       Executors.newScheduledThreadPool(1);

    public void beepForAnHour() {
        final Runnable beeper = new Runnable() {
                public void run() { System.out.println(&quot;beep&quot;); }
            };
        final ScheduledFuture&lt;?&gt; beeperHandle = 
            scheduler.scheduleAtFixedRate(beeper, 10, 10, SECONDS);
        scheduler.schedule(new Runnable() {
                public void run() { beeperHandle.cancel(true); }
            }, 60 * 60, SECONDS);
    }
 }
 </pre>

@since 1.5
@author Doug Lea

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ScheduledFuture<?> java.util.concurrent.ScheduledExecutorService.schedule(Runnable command, long delay, TimeUnit unit)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并执行在给定延迟后启用的一次性操作。

@param command 要执行的任务
@param delay 从现在开始延迟执行的时间
@param unit 延迟参数的时间单位
@return 表示挂起任务完成的 ScheduledFuture，并且其 <tt>get()</tt> 方法在完成后将返回 <tt>null</tt>
@throws RejectedExecutionException 如果无法安排执行该任务
@throws NullPointerException 如果 command 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ScheduledFuture<V> java.util.concurrent.ScheduledExecutorService.schedule(java.util.concurrent.Callable<V> callable, long delay, TimeUnit unit)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并执行在给定延迟后启用的 ScheduledFuture。

@param callable 要执行的功能
@param delay 从现在开始延迟执行的时间
@param unit 延迟参数的时间单位
@return 可用于提取结果或取消的 ScheduledFuture
@throws RejectedExecutionException 如果无法安排执行该任务
@throws NullPointerException 如果 callable 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ScheduledFuture<?> java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并执行一个在给定初始延迟后首次启用的定期操作，后续操作具有给定的周期；也就是将在 <tt>initialDelay</tt> 后开始执行，然后在 <tt>initialDelay+period</tt> 后执行，接着在 <tt>initialDelay + 2 * period</tt> 后执行，依此类推。如果任务的任何一个执行遇到异常，则后续执行都会被取消。否则，只能通过执行程序的取消或终止方法来终止该任务。如果此任务的任何一个执行要花费比其周期更长的时间，则将推迟后续执行，但不会同时执行。

@param command 要执行的任务
@param initialDelay 首次执行的延迟时间
@param period 连续执行之间的周期
@param unit initialDelay 和 period 参数的时间单位
@return 表示挂起任务完成的 ScheduledFuture，并且其 <tt>get()</tt> 方法在取消后将抛出异常
@throws RejectedExecutionException 如果无法安排执行该任务
@throws NullPointerException 如果 command 为 null
@throws IllegalArgumentException 如果 period 小于等于 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ScheduledFuture<?> java.util.concurrent.ScheduledExecutorService.scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并执行一个在给定初始延迟后首次启用的定期操作，随后，在每一次执行终止和下一次执行开始之间都存在给定的延迟。如果任务的任一执行遇到异常，就会取消后续执行。否则，只能通过执行程序的取消或终止方法来终止该任务。

@param command 要执行的任务
@param initialDelay 首次执行的延迟时间
@param delay 一次执行终止和下一次执行开始之间的延迟
@param unit initialDelay 和 delay 参数的时间单位
@return 表示挂起任务完成的 ScheduledFuture，并且其 <tt>get()</tt> 方法在取消后将抛出异常
@throws RejectedExecutionException 如果无法安排执行该任务
@throws NullPointerException 如果 command 为 null。
@throws IllegalArgumentException 如果 delay 小于等于 0

<!-- END DATA -->
