<!-- BEGIN KEY -->
java.util.concurrent.atomic
<!-- END KEY -->
<!-- BEGIN DATA -->


类的小工具包，支持在单个变量上解除锁的线程安全编程。事实上，此包中的类可将 <tt>volatile</tt> 值、字段和数组元素的概念扩展到那些也提供原子条件更新操作的类，其形式如下：

<pre>
  boolean compareAndSet(expectedValue, updateValue);
</pre>

<p> 如果此方法（在不同的类间参数类型也不同）当前保持 <tt>expectedValue</tt>，则以原子方式将变量设置为 <tt>updateValue</tt>，并在成功时报告 <tt>true</tt>。此包中的类还包含获取并无条件设置值的方法，以及以下描述的较弱条件的原子更新操作 <tt> weakCompareAndSet</tt>。

<p> 这些方法的规范使实现能够使用当代处理器上提供的高效机器级别原子指令。但是在某些平台上，该支持可能需要某种形式的内部锁。因而，该方法不能严格保证不被阻塞 - 执行操作之前可能暂时阻塞线程。

<p> 类 {@link java.util.concurrent.atomic.AtomicBoolean}、{@link java.util.concurrent.atomic.AtomicInteger}、{@link java.util.concurrent.atomic.AtomicLong} 和 {@link java.util.concurrent.atomic.AtomicReference} 的实例各自提供对相应类型单个变量的访问和更新。每个类也为该类型提供适当的实用工具方法。例如，类 <tt>AtomicLong</tt> 和 <tt>AtomicInteger</tt> 提供了原子增量方法。一个应用程序将按以下方式生成序列号：

<pre>
class Sequencer {
  private final AtomicLong sequenceNumber
    = new AtomicLong(0);
  public long next() {
    return sequenceNumber.getAndIncrement();
  }
}
</pre>

<p>原子访问和更新的内存效果一般遵循以下可变规则，正如 <a
href="http://java.sun.com/docs/books/jls/"> The Java Language
Specification, Third Edition (17.4 Memory Model)</a> 中的声明：

<ul>

<li> <tt>get</tt> 具有读取 <tt>volatile</tt> 变量的内存效果。

<li> <tt>set</tt> 具有写入（分配）<tt>volatile</tt> 变量的内存效果。

<li> 除了允许使用后续（但不是以前的）内存操作，其自身不施加带有普通的非 <tt>volatile</tt> 写入的重新排序约束，<tt>lazySet</tt> 具有写入（分配）<tt>volatile</tt> 变量的内存效果。在其他使用上下文中，当为 null 时（为了垃圾回收），<tt>lazySet</tt> 可以应用不会再次访问的引用。

<li><tt>weakCompareAndSet</tt> 以原子方式读取和有条件地写入变量但<em>不</em> 创建任何 happen-before 排序，因此不提供与除 <tt>weakCompareAndSet</tt> 目标外任何变量以前或后续读取或写入操作有关的任何保证。

<li> <tt>compareAndSet</tt> 和所有其他的读取和更新操作（如 <tt>getAndIncrement</tt>）都有读取和写入 <tt>volatile</tt> 变量的内存效果。
</ul> 

<p>除了包含表示单个值的类之外，此包还包含 <em>Updater</em> 类，该类可用于获取任意选定类的任意选定 <tt>volatile</tt> 字段上的 <tt>compareAndSet</tt> 操作。{@link java.util.concurrent.atomic.AtomicReferenceFieldUpdater}、{@link java.util.concurrent.atomic.AtomicIntegerFieldUpdater} 和 {@link java.util.concurrent.atomic.AtomicLongFieldUpdater} 是基于反射的实用工具，可以提供对关联字段类型的访问。它们主要用于原子数据结构中，该结构中同一节点（例如，树节点的链接）的几个 <tt>volatile</tt> 字段都独立受原子更新控制。这些类在如何以及何时使用原子更新方面具有更大的灵活性，但相应的弊端是基于映射的设置较为拙笨、使用不太方便，而且在保证方面也较差。

<p>{@link java.util.concurrent.atomic.AtomicIntegerArray}、{@link java.util.concurrent.atomic.AtomicLongArray} 和 {@link java.util.concurrent.atomic.AtomicReferenceArray} 类进一步扩展了原子操作，对这些类型的数组提供了支持。这些类在为其数组元素提供 <tt>volatile</tt> 访问语义方面也引人注目，这对于普通数组来说是不受支持的。

<a name="Spurious">
<p>原子类也支持 <tt>weakCompareAndSet</tt> 方法，该方法具有受限制的适用性。在某些平台上，弱版本在正常情况下可能比 <tt>compareAndSet</tt> 更有效，但不同的是 <tt>weakCompareAndSet</tt> 方法的任何给定调用可能<em>意外</em> 返回 <tt>false</tt>（即没有明确的原因）。返回 <tt>false</tt> 仅意味着可以在需要时重新尝试操作，具体取决于重复执行调用的保证，当该变量保持 <tt>expectedValue</tt> 并且没有其他线程也在尝试设置该变量时，最终将获得成功。（例如，这样的虚假失败可能是由于内存争用的结果，该争用与期望值和当前值是否相等无关）。 此外，<tt>weakCompareAndSet</tt> 不提供通常需要同步控制的排序保证。但是，在这样的更新与程序的其他 happen-before 排序不相关时，该方法可用于更新计数器和统计数据。当一个线程看到对 <tt>weakCompareAndSet</tt> 导致的原子变量的更新时，它不一定能看到在 <tt>weakCompareAndSet</tt> 之前发生的对任何<em>其他</em> 变量的更新。例如，在更新性能统计数据时，这也许可以接受，但其他情况几乎不可以。

<p> {@link java.util.concurrent.atomic.AtomicMarkableReference} 类将单个布尔值与引用关联起来。例如，可以在数据结构内部使用此位，这意味着引用的对象在逻辑上已被删除。{@link java.util.concurrent.atomic.AtomicStampedReference} 类将整数值与引用关联起来。例如，这可用于表示与更新系列对应的版本号。

<p> 设计原子类主要用作各种构造块，用于实现非阻塞数据结构和相关的基础结构类。<tt>compareAndSet</tt> 方法不是锁的常规替换方法。仅当对象的重要更新限定于<em>单个</em> 变量时才应用它。

<p> 原子类不是 <tt>java.lang.Integer</tt> 和相关类的通用替换方法。它们<em>不</em> 定义诸如 <tt>hashCode</tt> 和 <tt>compareTo</tt> 之类的方法。（因为原子变量是可变的，所以对于哈希表键来说，它们不是好的选择。）另外，仅为那些通常在预期应用程序中使用的类型提供类。例如，没有表示 <tt>byte</tt> 的原子类。这种情况不常见，如果要这样做，可以使用 <tt>AtomicInteger</tt> 来保持 <tt>byte</tt> 值，并进行适当的强制转换。也可以使用 <tt>Float.floatToIntBits</tt> 和 <tt>Float.intBitstoFloat</tt> 转换来保持 float 值，使用 <tt>Double.doubleToLongBits</tt> 和 <tt>Double.longBitsToDouble</tt> 转换来保持 double 值。


@since 1.5


<!-- END DATA -->
