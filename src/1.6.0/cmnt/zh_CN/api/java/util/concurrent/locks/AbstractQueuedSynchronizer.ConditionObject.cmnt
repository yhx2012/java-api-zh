<!-- BEGIN KEY -->
public class java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject extends java.lang.Object implements java.util.concurrent.locks.Condition, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link AbstractQueuedSynchronizer} 的 Condition 实现是 {@link Lock} 实现的基础。

<p> 此类的方法文档描述了一些机制，但没有从 Lock 和 Condition 用户的角度描述行为规范。此类的发行版本通常必须和描述 condition 语义的文档一起提供，这些语义依赖于相关 <tt>AbstractQueuedSynchronizer</tt> 的那些语义。
 
<p> 此类是可序列化的，但所有字段都是瞬态的，所以已序列化的条件没有等待者。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 <tt>ConditionObject</tt> 实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.signal()
<!-- END KEY -->
<!-- BEGIN DATA -->
将等待时间最长的线程（如果存在）从此条件的等待队列中移动到拥有锁的等待队列。
@throws IllegalMonitorStateException 如果 {@link #isHeldExclusively} 返回 {@code false}

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.signalAll()
<!-- END KEY -->
<!-- BEGIN DATA -->
将所有线程从此条件的等待队列移动到拥有锁的等待队列中。
@throws IllegalMonitorStateException 如果 {@link #isHeldExclusively} 返回 {@code false}

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.awaitUninterruptibly()
<!-- END KEY -->
<!-- BEGIN DATA -->
实现不可中断的条件等待。
 <ol>
<li> 保存 {@link #getState} 返回的锁定状态
<li> 调用将保存的状态用作参数的 {@link #release}，如果失败则抛出 IllegalMonitorStateException。
<li> 在收到信号之前，会一直阻塞
<li> 通过调用将保存的状态用作参数的 {@link #acquire} 特殊版本来重新获得线程。
 </ol>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.await() throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
实现不可中断的条件等待。
 <ol>
<li> 如果当前线程被中断，则抛出 InterruptedException
<li> 保存 {@link #getState} 返回的锁定状态
<li> 调用将保存的状态用作参数的 {@link #release}，如果失败则抛出 IllegalMonitorStateException。
<li> 在收到信号或被中断之前，会一直阻塞
<li> 通过调用将保存的状态用作参数的 {@link #acquire} 特殊版本来重新获得线程。
<li> 如果因为在步骤 4 中受阻而中断，则抛出异常
 </ol>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.awaitNanos(long nanosTimeout) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
实现定时的条件等待。
 <ol>
<li> 如果当前线程被中断，则抛出 InterruptedException
<li> 保存 {@link #getState} 返回的锁定状态
<li> 调用将保存的状态用作参数的 {@link #release}，如果失败则抛出 IllegalMonitorStateException。
<li> 在收到信号、被中断或超时之前，会一直阻塞
<li> 通过调用将保存的状态用作参数的 {@link #acquire} 特殊版本来重新获得线程。
<li> 如果因为在步骤 4 中受阻而中断，则抛出 InterruptedException
 </ol>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.awaitUntil(Date deadline) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
实现绝对定时条件等待。
 <ol>
<li> 如果当前线程被中断，则抛出 InterruptedException
<li> 保存 {@link #getState} 返回的锁定状态
<li> 调用将保存的状态用作参数的 {@link #release}，如果失败则抛出 IllegalMonitorStateException。
<li> 在收到信号、被中断或超时之前，会一直阻塞
<li> 通过调用将保存的状态用作参数的 {@link #acquire} 特殊版本来重新获得线程。
<li> 如果因为在步骤 4 中受阻而中断，则抛出 InterruptedException
<li> 如果因为在步骤 4 中受阻而超时，则返回 false，其他情况返回 true
 </ol>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.await(long time, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
实现定时的条件等待。 
 <ol>
<li> 如果当前线程被中断，则抛出 InterruptedException
<li> 保存 {@link #getState} 返回的锁定状态
<li> 调用将保存的状态用作参数的 {@link #release}，如果失败则抛出 IllegalMonitorStateException。
<li> 在收到信号、被中断或超时之前，会一直阻塞
<li> 通过调用将保存的状态用作参数的 {@link #acquire} 特殊版本来重新获得线程。
<li> 如果因为在步骤 4 中受阻而中断，则抛出 InterruptedException
<li> 如果因为在步骤 4 中受阻而超时，则返回 false，其他情况返回 true
 </ol>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.hasWaiters()
<!-- END KEY -->
<!-- BEGIN DATA -->
查询是否有正在等待此条件的任何线程。实现 {@link AbstractQueuedSynchronizer#hasWaiters}。
@return 如果有正在等待的任何线程，则返回 {@code true}
@throws IllegalMonitorStateException 如果 {@link #isHeldExclusively} 返回 {@code false}

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final int java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.getWaitQueueLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回正在等待此条件的线程数估计值。实现 {@link AbstractQueuedSynchronizer#getWaitQueueLength}。
@return 正在等待的线程估计数
@throws IllegalMonitorStateException 如果 {@link #isHeldExclusively} 返回 {@code false}

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.util.Collection<java.lang.Thread> java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.getWaitingThreads()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含那些可能正在等待此条件的线程 collection。实现 {@link AbstractQueuedSynchronizer#getWaitingThreads}。
@return 线程的 collection
@throws IllegalMonitorStateException 如果 {@link #isHeldExclusively} 返回 {@code false}

<!-- END DATA -->
