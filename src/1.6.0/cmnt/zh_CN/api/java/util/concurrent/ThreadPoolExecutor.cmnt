<!-- BEGIN KEY -->
public class java.util.concurrent.ThreadPoolExecutor extends java.util.concurrent.AbstractExecutorService
<!-- END KEY -->
<!-- BEGIN DATA -->
一个 {@link ExecutorService}，它使用可能的几个池线程之一执行每个提交的任务，通常使用 {@link Executors} 工厂方法配置。

<p>线程池可以解决两个不同问题：由于减少了每个任务调用的开销，它们通常可以在执行大量异步任务时提供增强的性能，并且还可以提供绑定和管理资源（包括执行任务集时使用的线程）的方法。每个 <tt>ThreadPoolExecutor</tt> 还维护着一些基本的统计数据，如完成的任务数。

<p>为了便于跨大量上下文使用，此类提供了很多可调整的参数和扩展钩子 (hook)。但是，强烈建议程序员使用较为方便的 {@link Executors} 工厂方法 {@link Executors#newCachedThreadPool}（无界线程池，可以进行自动线程回收）、{@link Executors#newFixedThreadPool}（固定大小线程池）和 {@link Executors#newSingleThreadExecutor}（单个后台线程），它们均为大多数使用场景预定义了设置。否则，在手动配置和调整此类时，使用以下指导：

<dl>

<dt>核心和最大池大小</dt>

<dd><tt>ThreadPoolExecutor</tt> 将根据 corePoolSize（参见 {@link ThreadPoolExecutor#getCorePoolSize}）和 maximumPoolSize（参见 {@link ThreadPoolExecutor#getMaximumPoolSize}）设置的边界自动调整池大小。当新任务在方法 {@link ThreadPoolExecutor#execute} 中提交时，如果运行的线程少于 corePoolSize，则创建新线程来处理请求，即使其他辅助线程是空闲的。如果运行的线程多于 corePoolSize 而少于 maximumPoolSize，则仅当队列满时才创建新线程。如果设置的 corePoolSize 和 maximumPoolSize 相同，则创建了固定大小的线程池。如果将 maximumPoolSize 设置为基本的无界值（如 <tt>Integer.MAX_VALUE</tt>），则允许池适应任意数量的并发任务。在大多数情况下，核心和最大池大小仅基于构造来设置，不过也可以使用 {@link ThreadPoolExecutor#setCorePoolSize} 和 {@link ThreadPoolExecutor#setMaximumPoolSize} 进行动态更改。 </dd>

<dt> 按需构造</dt>

<dd> 默认情况下，即使核心线程最初只是在新任务到达时才创建和启动的，也可以使用方法 {@link ThreadPoolExecutor#prestartCoreThread} 或 {@link ThreadPoolExecutor#prestartAllCoreThreads} 对其进行动态重写。如果构造带有非空队列的池，则可能希望预先启动线程。 </dd>

<dt>创建新线程</dt>

<dd>使用 {@link java.util.concurrent.ThreadFactory} 创建新线程。如果没有另外说明，则在同一个 {@link ThreadGroup} 中一律使用 {@link Executors#defaultThreadFactory} 创建线程，并且这些线程具有相同的 <tt>NORM_PRIORITY</tt> 优先级和非守护进程状态。通过提供不同的 ThreadFactory，可以改变线程的名称、线程组、优先级、守护进程状态，等等。如果从 <tt>newThread</tt> 返回 null 时 <tt>ThreadFactory</tt> 未能创建线程，则执行程序将继续运行，但不能执行任何任务。 </dd>

<dt>保持活动时间</dt>

<dd>如果池中当前有多于 corePoolSize 的线程，则这些多出的线程在空闲时间超过 keepAliveTime 时将会终止（参见 {@link ThreadPoolExecutor#getKeepAliveTime}）。这提供了当池处于非活动状态时减少资源消耗的方法。如果池后来变得更为活动，则可以创建新的线程。也可以使用方法 {@link ThreadPoolExecutor#setKeepAliveTime} 动态地更改此参数。使用 <tt>Long.MAX_VALUE</tt> {@link TimeUnit#NANOSECONDS} 的值在关闭前有效地从以前的终止状态禁用空闲线程。默认情况下，保持活动策略只在有多于 corePoolSizeThreads 的线程时应用。但是只要 keepAliveTime 值非 0，{@link ThreadPoolExecutor#allowCoreThreadTimeOut(boolean)} 方法也可将此超时策略应用于核心线程。 </dd>

<dt>排队</dt>

<dd>所有 {@link BlockingQueue} 都可用于传输和保持提交的任务。可以使用此队列与池大小进行交互：

 <ul>

<li> 如果运行的线程少于 corePoolSize，则 Executor 始终首选添加新的线程，而不进行排队。</li>

<li> 如果运行的线程等于或多于 corePoolSize，则 Executor 始终首选将请求加入队列，而不添加新的线程。</li>
 
<li> 如果无法将请求加入队列，则创建新的线程，除非创建此线程超出 maximumPoolSize，在这种情况下，任务将被拒绝。</li>

 </ul>

排队有三种通用策略：
 <ol>

<li> <em> 直接提交。</em>工作队列的默认选项是 {@link SynchronousQueue}，它将任务直接提交给线程而不保持它们。在此，如果不存在可用于立即运行任务的线程，则试图把任务加入队列将失败，因此会构造一个新的线程。此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。直接提交通常要求无界 maximumPoolSizes 以避免拒绝新提交的任务。当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。</li>

<li><em> 无界队列。</em>使用无界队列（例如，不具有预定义容量的 {@link LinkedBlockingQueue}）将导致在所有 corePoolSize 线程都忙时新任务在队列中等待。这样，创建的线程就不会超过 corePoolSize。（因此，maximumPoolSize 的值也就无效了。）当每个任务完全独立于其他任务，即任务执行互不影响时，适合于使用无界队列；例如，在 Web 页服务器中。这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。</li>

<li><em>有界队列。</em>当使用有限的 maximumPoolSizes 时，有界队列（如 {@link ArrayBlockingQueue}）有助于防止资源耗尽，但是可能较难调整和控制。队列大小和最大池大小可能需要相互折衷：使用大型队列和小型池可以最大限度地降低 CPU 使用率、操作系统资源和上下文切换开销，但是可能导致人工降低吞吐量。如果任务频繁阻塞（例如，如果它们是 I/O 边界），则系统可能为超过您许可的更多线程安排时间。使用小型队列通常要求较大的池大小，CPU 使用率较高，但是可能遇到不可接受的调度开销，这样也会降低吞吐量。</li>

 </ol>

 </dd>

<dt>被拒绝的任务</dt>

<dd> 当 Executor 已经关闭，并且 Executor 将有限边界用于最大线程和工作队列容量，且已经饱和时，在方法 {@link ThreadPoolExecutor#execute} 中提交的新任务将被<em>拒绝</em>。在以上两种情况下，<tt>execute</tt> 方法都将调用其 {@link RejectedExecutionHandler} 的 {@link RejectedExecutionHandler#rejectedExecution} 方法。下面提供了四种预定义的处理程序策略：

 <ol>

<li> 在默认的 {@link ThreadPoolExecutor.AbortPolicy} 中，处理程序遭到拒绝将抛出运行时 {@link RejectedExecutionException}。</li>
 
<li> 在 {@link ThreadPoolExecutor.CallerRunsPolicy} 中，线程调用运行该任务的 <tt>execute</tt> 本身。此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。</li>

<li> 在 {@link ThreadPoolExecutor.DiscardPolicy} 中，不能执行的任务将被删除。</li>

<li>在 {@link ThreadPoolExecutor.DiscardOldestPolicy} 中，如果执行程序尚未关闭，则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则重复此过程）。</li>

 </ol>

定义和使用其他种类的 {@link RejectedExecutionHandler} 类也是可能的，但这样做需要非常小心，尤其是当策略仅用于特定容量或排队策略时。</dd>

<dt>钩子 (hook) 方法</dt>

<dd>此类提供 <tt>protected</tt> 可重写的 {@link ThreadPoolExecutor#beforeExecute} 和 {@link ThreadPoolExecutor#afterExecute} 方法，这两种方法分别在执行每个任务之前和之后调用。它们可用于操纵执行环境；例如，重新初始化 ThreadLocal、搜集统计信息或添加日志条目。此外，还可以重写方法 {@link ThreadPoolExecutor#terminated} 来执行 Executor 完全终止后需要完成的所有特殊处理。 

<p>如果钩子 (hook) 或回调方法抛出异常，则内部辅助线程将依次失败并突然终止。</dd> 

<dt>队列维护</dt>

<dd> 方法 {@link ThreadPoolExecutor#getQueue} 允许出于监控和调试目的而访问工作队列。强烈反对出于其他任何目的而使用此方法。{@link ThreadPoolExecutor#remove} 和 {@link ThreadPoolExecutor#purge} 这两种方法可用于在取消大量已排队任务时帮助进行存储回收。</dd> 

 <dt>终止</dt>

<dd> 程序 <em>AND</em> 不再引用的池没有剩余线程会自动 <tt>shutdown</tt>。如果希望确保回收取消引用的池（即使用户忘记调用 {@link ThreadPoolExecutor#shutdown}），则必须安排未使用的线程最终终止：设置适当保持活动时间，使用 0 核心线程的下边界和/或设置 {@link ThreadPoolExecutor#allowCoreThreadTimeOut(boolean)}。</dd> </dl>

<p> <b>扩展示例</b>。此类的大多数扩展可以重写一个或多个受保护的钩子 (hook) 方法。例如，下面是一个添加了简单的暂停/恢复功能的子类：

 <pre>
 class PausableThreadPoolExecutor extends ThreadPoolExecutor {
   private boolean isPaused;
   private ReentrantLock pauseLock = new ReentrantLock();
   private Condition unpaused = pauseLock.newCondition();

   public PausableThreadPoolExecutor(...) { super(...); }
 
   protected void beforeExecute(Thread t, Runnable r) {
     super.beforeExecute(t, r);
     pauseLock.lock();
     try {
       while (isPaused) unpaused.await();
     } catch(InterruptedException ie) {
       t.interrupt();
     } finally {
       pauseLock.unlock();
     }
   }
 
   public void pause() {
     pauseLock.lock();
     try {
       isPaused = true;
     } finally {
       pauseLock.unlock();
     }
   }
 
   public void resume() {
     pauseLock.lock();
     try {
       isPaused = false;
       unpaused.signalAll();
     } finally {
       pauseLock.unlock();
     }
   }
 }
 </pre>
@since 1.5
@author Doug Lea

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, java.util.concurrent.BlockingQueue<java.lang.Runnable> workQueue)
<!-- END KEY -->
<!-- BEGIN DATA -->
用给定的初始参数和默认的线程工厂及被拒绝的执行处理程序创建新的 <tt>ThreadPoolExecutor</tt>。使用 {@link Executors} 工厂方法之一比使用此通用构造方法方便得多。

@param corePoolSize 池中所保存的线程数，包括空闲线程。
@param maximumPoolSize 池中允许的最大线程数。
@param keepAliveTime 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。
@param unit keepAliveTime 参数的时间单位。
@param workQueue 执行前用于保持任务的队列。此队列仅保持由 <tt>execute</tt> 方法提交的 <tt>Runnable</tt> 任务。
@throws IllegalArgumentException 如果 corePoolSize 或 keepAliveTime 小于 0，或者 maximumPoolSize 小于等于 0，或者 corePoolSize 大于 maximumPoolSize。
@throws NullPointerException 如果 <tt>workQueue</tt> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, java.util.concurrent.BlockingQueue<java.lang.Runnable> workQueue, ThreadFactory threadFactory)
<!-- END KEY -->
<!-- BEGIN DATA -->
用给定的初始参数和默认被拒绝的执行处理程序创建新的 <tt>ThreadPoolExecutor</tt>。

@param corePoolSize 池中所保存的线程数，包括空闲线程。
@param maximumPoolSize 池中允许的最大线程数。
@param keepAliveTime 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。
@param unit keepAliveTime 参数的时间单位。
@param workQueue 执行前用于保持任务的队列。此队列仅保持由 <tt>execute</tt> 方法提交的 <tt>Runnable</tt> 任务。
@param threadFactory 执行程序创建新线程时使用的工厂。
@throws IllegalArgumentException 如果 corePoolSize 或 keepAliveTime 小于 0，或者 maximumPoolSize 小于等于 0，或者 corePoolSize 大于 maximumPoolSize。
@throws NullPointerException 如果 <tt>workQueue</tt> 或 <tt>threadFactory</tt> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, java.util.concurrent.BlockingQueue<java.lang.Runnable> workQueue, RejectedExecutionHandler handler)
<!-- END KEY -->
<!-- BEGIN DATA -->
用给定的初始参数和默认的线程工厂创建新的 <tt>ThreadPoolExecutor</tt>。

@param corePoolSize 池中所保存的线程数，包括空闲线程。
@param maximumPoolSize 池中允许的最大线程数。
@param keepAliveTime 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。
@param unit keepAliveTime 参数的时间单位。
@param workQueue 执行前用于保持任务的队列。此队列仅由保持 <tt>execute</tt> 方法提交的 <tt>Runnable</tt> 任务。
@param handler 由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序。
@throws IllegalArgumentException 如果 corePoolSize 或 keepAliveTime 小于 0，或者 maximumPoolSize 小于等于 0，或者 corePoolSize 大于 maximumPoolSize。
@throws NullPointerException 如果 <tt>workQueue</tt> 或 <tt>handler</tt> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, java.util.concurrent.BlockingQueue<java.lang.Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)
<!-- END KEY -->
<!-- BEGIN DATA -->
用给定的初始参数创建新的 <tt>ThreadPoolExecutor</tt>。

@param corePoolSize 池中所保存的线程数，包括空闲线程。
@param maximumPoolSize 池中允许的最大线程数。
@param keepAliveTime 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。
@param unit keepAliveTime 参数的时间单位。
@param workQueue 执行前用于保持任务的队列。此队列仅保持由 <tt>execute</tt> 方法提交的 <tt>Runnable</tt> 任务。
@param threadFactory 执行程序创建新线程时使用的工厂。
@param handler 由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序。
@throws IllegalArgumentException 如果 corePoolSize 或 keepAliveTime 小于 0，或者 maximumPoolSize 小于等于 0，或者 corePoolSize 大于 maximumPoolSize。
@throws NullPointerException 如果 <tt>workQueue</tt>、<tt>threadFactory</tt> 或 <tt>handler</tt> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ThreadPoolExecutor.execute(Runnable command)
<!-- END KEY -->
<!-- BEGIN DATA -->
在将来某个时间执行给定任务。可以在新线程中或者在现有池线程中执行该任务。

如果无法将任务提交执行，或者因为此执行程序已关闭，或者因为已达到其容量，则该任务由当前 <tt>RejectedExecutionHandler</tt> 处理。

@param command 要执行的任务。
@throws RejectedExecutionException 如果无法接收要执行的任务，则由 <tt>RejectedExecutionHandler</tt> 决定是否抛出 RejectedExecutionException 
@throws NullPointerException 如果命令为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ThreadPoolExecutor.shutdown()
<!-- END KEY -->
<!-- BEGIN DATA -->
按过去执行已提交任务的顺序发起一个有序的关闭，但是不接受新任务。如果已经关闭，则调用没有其他作用。
@throws SecurityException 如果安全管理器存在并且关闭此 ExecutorService 可能操作某些不允许调用者修改的线程（因为它没有 {@link java.lang.RuntimePermission}<tt>(&quot;modifyThread&quot;)</tt>），或者安全管理器的 <tt>checkAccess</tt> 方法拒绝访问。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.lang.Runnable> java.util.concurrent.ThreadPoolExecutor.shutdownNow()
<!-- END KEY -->
<!-- BEGIN DATA -->
尝试停止所有的活动执行任务、暂停等待任务的处理，并返回等待执行的任务列表。在从此方法返回的任务队列中排空（移除）这些任务。
  
<p>并不保证能够停止正在处理的活动执行任务，但是会尽力尝试。 此实现通过 {@link Thread#interrupt} 取消任务，所以无法响应中断的任何任务可能永远无法终止。

@return 从未开始执行的任务的列表。
@throws SecurityException 如果安全管理器存在并且关闭此 ExecutorService 可能操作某些不允许调用者修改的线程（因为它没有 {@link java.lang.RuntimePermission}<tt>(&quot;modifyThread&quot;)</tt>），或者安全管理器的 <tt>checkAccess</tt> 方法拒绝访问。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ThreadPoolExecutor.isTerminating()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此执行程序处于在 <tt>shutdown</tt> 或 <tt>shutdownNow</tt> 之后正在终止但尚未完全终止的过程中，则返回 true。此方法可能对调试很有用。关闭之后很长一段时间才报告返回的 <tt>true</tt>，这可能表示提交的任务已经被忽略或取消中断，导致此执行程序无法正确终止。
@return 如果正在终止但尚未完成，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.util.concurrent.ThreadPoolExecutor.finalize()
<!-- END KEY -->
<!-- BEGIN DATA -->
当不再引用此执行程序时，调用 <tt>shutdown</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ThreadPoolExecutor.setThreadFactory(ThreadFactory threadFactory)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于创建新线程的线程工厂。

@param threadFactory 新线程工厂
@throws NullPointerException 如果 threadFactory 为 null
@see #getThreadFactory

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ThreadFactory java.util.concurrent.ThreadPoolExecutor.getThreadFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于创建新线程的线程工厂。

@return 当前线程工厂
@see #setThreadFactory

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ThreadPoolExecutor.setRejectedExecutionHandler(RejectedExecutionHandler handler)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于未执行任务的新处理程序。

@param handler 新处理程序
@throws NullPointerException 如果处理程序为 null
@see #getRejectedExecutionHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.RejectedExecutionHandler java.util.concurrent.ThreadPoolExecutor.getRejectedExecutionHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于未执行任务的当前处理程序。

@return 当前处理程序
@see #setRejectedExecutionHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ThreadPoolExecutor.setCorePoolSize(int corePoolSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置核心线程数。此操作将重写构造方法中设置的任何值。如果新值小于当前值，则多余的现有线程将在下一次空闲时终止。如果较大，则在需要时启动新线程来执行这些排队的任务。

@param corePoolSize 新核心大小
@throws IllegalArgumentException 如果 <tt>corePoolSize</tt> 小于 0
@see #getCorePoolSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.ThreadPoolExecutor.getCorePoolSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回核心线程数。

@return 核心线程数
@see #setCorePoolSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ThreadPoolExecutor.prestartCoreThread()
<!-- END KEY -->
<!-- BEGIN DATA -->
启动核心线程，使其处于等待工作的空闲状态。仅当执行新任务时，此操作才重写默认的启动核心线程策略。如果已启动所有核心线程，此方法将返回 <tt>false</tt>。
@return 如果启动了线程，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.ThreadPoolExecutor.prestartAllCoreThreads()
<!-- END KEY -->
<!-- BEGIN DATA -->
启动所有核心线程，使其处于等待工作的空闲状态。仅当执行新任务时，此操作才重写默认的启动核心线程策略。
@return 已启动的线程数

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ThreadPoolExecutor.allowsCoreThreadTimeOut()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此池允许核心线程超时和终止，如果在 keepAlive 时间内没有任务到达，新任务到达时正在替换（如果需要），则返回 true。当返回 true 时，适用于非核心线程的相同的保持活动策略也同样适用于核心线程。当返回 false（默认值）时，由于没有传入任务，核心线程不会终止。
@return 如果允许核心线程超时，则返回 <tt>true</tt>；否则返回 <tt>false</tt>

@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果在保持活动时间内没有任务到达，新任务到达时正在替换（如果需要），则设置控制核心线程是超时还是终止的策略。当为 false（默认值）时，由于没有传入任务，核心线程将永远不会中止。当为 true 时，适用于非核心线程的相同的保持活动策略也同样适用于核心线程。为了避免连续线程替换，保持活动时间在设置为 <tt>true</tt> 时必须大于 0。通常应该在主动使用该池前调用此方法。
@param value 如果应该超时，则为 <tt>true</tt>；否则为 <tt>false</tt>
@throws IllegalArgumentException 如果 value 为 <tt>true</tt> 并且当前保持活动时间不大于 0。

@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ThreadPoolExecutor.setMaximumPoolSize(int maximumPoolSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置允许的最大线程数。此操作将重写构造方法中设置的任何值。如果新值小于当前值，则多余的现有线程将在下一次空闲时终止。

@param maximumPoolSize 新的最大值
@throws IllegalArgumentException 如果新的最大值小于等于 0，或者小于{@linkplain #getCorePoolSize 核心池大小}
@see #getMaximumPoolSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.ThreadPoolExecutor.getMaximumPoolSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回允许的最大线程数。

@return 允许的最大线程数
@see #setMaximumPoolSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ThreadPoolExecutor.setKeepAliveTime(long time, TimeUnit unit)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置线程在终止前可以保持空闲的时间限制。如果池中的当前线程数多于核心线程数，在不处理任务的情况下等待这一时间段之后，多余的线程将被终止。此操作将重写构造方法中设置的任何值。
@param time 等待的时间。时间值 0 将导致执行任务后多余的线程立即终止。
@param unit 时间参数的时间单位
@throws IllegalArgumentException 如果时间小于 0，或者时间为 0 和 allowsCoreThreadTimeOut
@see #getKeepAliveTime

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.concurrent.ThreadPoolExecutor.getKeepAliveTime(TimeUnit unit)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回线程保持活动的时间，该时间就是超过核心池大小的线程可以在终止前保持空闲的时间值。

@param unit 所需的结果时间单位
@return 时间限制
@see #setKeepAliveTime

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.BlockingQueue<java.lang.Runnable> java.util.concurrent.ThreadPoolExecutor.getQueue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此执行程序使用的任务队列。对任务队列的访问主要用于调试和监控。此队列可能正处于活动使用状态中。获取任务队列不妨碍已加入队列的任务的执行。

@return 任务队列

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ThreadPoolExecutor.remove(Runnable task)
<!-- END KEY -->
<!-- BEGIN DATA -->
从执行程序的内部队列中移除此任务（如果存在），从而如果尚未开始，则其不再运行。

<p> 此方法可用作取消方案的一部分。它可能无法移除在放置到内部队列之前已经转换为其他形式的任务。例如，使用 <tt>submit</tt> 输入的任务可能被转换为维护 <tt>Future</tt> 状态的形式。但是，在此情况下，{@link ThreadPoolExecutor#purge} 方法可用于移除那些已被取消的 Future。 

 @param task 要移除的任务
 @return 如果已经移除任务，则返回 true 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ThreadPoolExecutor.purge()
<!-- END KEY -->
<!-- BEGIN DATA -->
尝试从工作队列移除所有已取消的 {@link Future} 任务。此方法可用作存储回收操作，它对功能没有任何影响。取消的任务不会再次执行，但是它们可能在工作队列中累积，直到 worker 线程主动将其移除。调用此方法将试图立即移除它们。但是，如果出现其他线程的干预，那么此方法移除任务将失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.ThreadPoolExecutor.getPoolSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回池中的当前线程数。

@return 线程数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.ThreadPoolExecutor.getActiveCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回主动执行任务的近似线程数。

@return 线程数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.ThreadPoolExecutor.getLargestPoolSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回曾经同时位于池中的最大线程数。

@return 线程数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.concurrent.ThreadPoolExecutor.getTaskCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回曾计划执行的近似任务总数。因为在计算期间任务和线程的状态可能动态改变，所以返回值只是一个近似值。

@return 任务数

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.concurrent.ThreadPoolExecutor.getCompletedTaskCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回已完成执行的近似任务总数。因为在计算期间任务和线程的状态可能动态改变，所以返回值只是一个近似值，但是该值在整个连续调用过程中不会减少。

@return 任务数。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.util.concurrent.ThreadPoolExecutor.beforeExecute(Thread t, Runnable r)
<!-- END KEY -->
<!-- BEGIN DATA -->
在执行给定线程中的给定 Runnable 之前调用的方法。此方法由将执行任务 <tt>r</tt> 的线程 <tt>t</tt> 调用，并且可用于重新初始化 ThreadLocals 或者执行日志记录。

<p>此实现不执行任何操作，但可在子类中定制。注：为了正确嵌套多个重写操作，此方法结束时，子类通常应该调用 <tt>super.beforeExecute</tt>。

@param t 将运行任务 r 的线程。
@param r 将执行的任务。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.util.concurrent.ThreadPoolExecutor.afterExecute(Runnable r, Throwable t)
<!-- END KEY -->
<!-- BEGIN DATA -->
基于完成执行给定 Runnable 所调用的方法。此方法由执行任务的线程调用。如果非 null，则 Throwable 是导致执行突然终止的未捕获 <tt>RuntimeException</tt> 或 <tt>Error</tt>。

<p><b>注：</b>当操作显示地或者通过 <tt>submit</tt> 之类的方法包含在任务内时（如 {@link FutureTask}），这些任务对象捕获和维护计算异常，因此它们不会导致突然终止，内部异常<em>不会</em> 传递给此方法。 

<p>此实现不执行任何操作，但可在子类中定制。注：为了正确嵌套多个重写操作，此方法开始时，子类通常应该调用 <tt>super.afterExecute</tt>。

@param r 已经完成的 runnable 线程。
@param t 导致终止的异常；如果执行正常结束，则为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.util.concurrent.ThreadPoolExecutor.terminated()
<!-- END KEY -->
<!-- BEGIN DATA -->
当 Executor 已经终止时调用的方法。默认实现不执行任何操作。注：为了正确嵌套多个重写操作，子类通常应该在此方法中调用 <tt>super.afterExecute</tt>。

<!-- END DATA -->
