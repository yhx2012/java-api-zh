<!-- BEGIN KEY -->
public class java.util.concurrent.atomic.AtomicLong extends java.lang.Number implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
可以用原子方式更新的 {@code long} 值。有关原子变量属性的描述，请参阅 {@link java.util.concurrent.atomic} 包规范。{@code AtomicLong} 可用在应用程序中（如以原子方式增加的序列号），并且不能用于替换 {@link java.lang.Long}。但是，此类确实扩展了 {@code Number}，允许那些处理基于数字类的工具和实用工具进行统一访问。

@since 1.5
@author Doug Lea

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.atomic.AtomicLong(long initialValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有给定初始值的新 AtomicLong。

@param initialValue 初始值

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.atomic.AtomicLong()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有初始值 {@code 0} 的新 AtomicLong。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.util.concurrent.atomic.AtomicLong.get()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取当前值。

@return 当前值

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.atomic.AtomicLong.set(long newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置为给定值。

@param newValue 新值


<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.atomic.AtomicLong.lazySet(long newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
最后设置为给定值。

 @param newValue 新值
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.util.concurrent.atomic.AtomicLong.getAndSet(long newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
以原子方式设置为给定值，并返回旧值。

@param newValue 新值
@return 以前的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.atomic.AtomicLong.compareAndSet(long expect, long update)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前值 {@code ==} 预期值，则以原子方式将该值设置为给定的更新值。
@param expect 预期值
@param update 新值
@return 如果成功，则返回 true。返回 false 指示实际值与预期值不相等。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.atomic.AtomicLong.weakCompareAndSet(long expect, long update)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前值 {@code ==} 预期值，则以原子方式将该值设置为给定的更新值。

<p>可能<a href="package-summary.html#Spurious">意外失败</a>并且不提供排序保证，所以只能在很少的情况下对 {@code compareAndSet} 进行适当地选择。

@param expect 预期值
@param update 新值
@return 如果成功，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.util.concurrent.atomic.AtomicLong.getAndIncrement()
<!-- END KEY -->
<!-- BEGIN DATA -->
以原子方式将当前值加 1。
@return 以前的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.util.concurrent.atomic.AtomicLong.getAndDecrement()
<!-- END KEY -->
<!-- BEGIN DATA -->
以原子方式将当前值减 1。
@return 以前的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.util.concurrent.atomic.AtomicLong.getAndAdd(long delta)
<!-- END KEY -->
<!-- BEGIN DATA -->
以原子方式将给定值添加到当前值。
@param delta 要添加的值
@return 以前的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.util.concurrent.atomic.AtomicLong.incrementAndGet()
<!-- END KEY -->
<!-- BEGIN DATA -->
以原子方式将当前值加 1。
@return 更新的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.util.concurrent.atomic.AtomicLong.decrementAndGet()
<!-- END KEY -->
<!-- BEGIN DATA -->
以原子方式将当前值减 1。
@return 更新的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.util.concurrent.atomic.AtomicLong.addAndGet(long delta)
<!-- END KEY -->
<!-- BEGIN DATA -->
以原子方式将给定值添加到当前值。
@param delta 要添加的值
@return 更新的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.concurrent.atomic.AtomicLong.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前值的字符串表示形式。
@return 当前值的字符串表示形式。

<!-- END DATA -->
