<!-- BEGIN KEY -->
public class java.util.concurrent.locks.ReentrantLock extends java.lang.Object implements java.util.concurrent.locks.Lock, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
一个可重入的互斥锁 {@link Lock}，它具有与使用 {@code synchronized} 方法和语句所访问的隐式监视器锁相同的一些基本行为和语义，但功能更强大。

<p>{@code ReentrantLock} 将由最近成功获得锁，并且还没有释放该锁的线程所<em>拥有</em>。当锁没有被另一个线程所拥有时，调用 {@code lock} 的线程将成功获取该锁并返回。如果当前线程已经拥有该锁，此方法将立即返回。可以使用 {@link #isHeldByCurrentThread} 和 {@link #getHoldCount} 方法来检查此情况是否发生。  

<p> 此类的构造方法接受一个可选的<em>公平</em> 参数。当设置为 {@code true} 时，在多个线程的争用下，这些锁倾向于将访问权授予等待时间最长的线程。否则此锁将无法保证任何特定访问顺序。与采用默认设置（使用不公平锁）相比，使用公平锁的程序在许多线程访问时表现为很低的总体吞吐量（即速度很慢，常常极其慢），但是在获得锁和保证锁分配的均衡性时差异较小。不过要注意的是，公平锁不能保证线程调度的公平性。因此，使用公平锁的众多线程中的一员可能获得多倍的成功机会，这种情况发生在其他活动线程没有被处理并且目前并未持有锁时。还要注意的是，未定时的 {@link #tryLock() tryLock} 方法并没有使用公平设置。因为即使其他线程正在等待，只要该锁是可用的，此方法就可以获得成功。

<p> 建议<em>总是</em> 立即实践，使用 {@code lock} 块来调用 {@code try}，在之前/之后的构造中，最典型的代码如下：

 <pre>
 class X {
   private final ReentrantLock lock = new ReentrantLock();
   // ...

   public void m() { 
     lock.lock();  // block until condition holds
     try {
       // ... method body
     } finally {
       lock.unlock()
     }
   }
 }
 </pre>

<p>除了实现 {@link Lock} 接口，此类还定义了 {@code isLocked} 和 {@code getLockQueueLength} 方法，以及一些相关的 {@code protected} 访问方法，这些方法对检测和监视可能很有用。

<p> 该类的序列化与内置锁的行为方式相同：一个反序列化的锁处于解除锁定状态，不管它被序列化时的状态是怎样的。

<p> 此锁最多支持同一个线程发起的 2147483648 个递归锁。试图超过此限制会导致由锁方法抛出的 {@link Error}。

@since 1.5
@author Doug Lea
 

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.ReentrantLock.Sync java.util.concurrent.locks.ReentrantLock.sync
<!-- END KEY -->
<!-- BEGIN DATA -->
提供所有实现机制的同步器
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.locks.ReentrantLock()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 {@code ReentrantLock} 的实例。这等同于使用 {@code ReentrantLock(false)}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.locks.ReentrantLock(boolean fair)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有给定公平策略的 {@code ReentrantLock}。
@param fair 如果此锁应该使用公平的排序策略，则该参数为 {@code true}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.locks.ReentrantLock.lock()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取锁。 

<p>如果该锁没有被另一个线程保持，则获取该锁并立即返回，将锁的保持计数设置为 1。

<p>如果当前线程已经保持该锁，则将保持计数加 1，并且该方法立即返回。

<p>如果该锁被另一个线程保持，则出于线程调度的目的，禁用当前线程，并且在获得锁之前，该线程将一直处于休眠状态，此时锁保持计数被设置为 1。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.locks.ReentrantLock.lockInterruptibly() throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前线程未被{@linkplain Thread#interrupt 中断}，则获取锁。

<p>如果该锁没有被另一个线程保持，则获取该锁并立即返回，将锁的保持计数设置为 1。

<p>如果当前线程已经保持此锁，则将保持计数加 1，并且该方法立即返回。

<p>如果锁被另一个线程保持，则出于线程调度目的，禁用当前线程，并且在发生以下两种情况之一以前，该线程将一直处于休眠状态：

 <ul>

<li>锁由当前线程获得；或者

<li>其他某个线程{@linkplain Thread#interrupt 中断}当前线程。

 </ul>

<p>如果当前线程获得该锁，则将锁保持计数设置为 1。

<p>如果当前线程：

 <ul>

<li>在进入此方法时已经设置了该线程的中断状态；或者

<li>在等待获取锁的同时被{@linkplain Thread#interrupt 中断}。

 </ul>

则抛出 {@link InterruptedException}，并且清除当前线程的已中断状态。 

<p>在此实现中，因为此方法是一个显式中断点，所以要优先考虑响应中断，而不是响应锁的普通获取或重入获取。

@throws  InterruptedException 如果当前线程已中断。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.locks.ReentrantLock.tryLock()
<!-- END KEY -->
<!-- BEGIN DATA -->
仅在调用时锁未被另一个线程保持的情况下，才获取该锁。

<p>如果该锁没有被另一个线程保持，并且立即返回 {@code true} 值，则将锁的保持计数设置为 1。即使已将此锁设置为使用公平排序策略，但是调用 {@code tryLock()} 仍<em>将</em> 立即获取锁（如果有可用的），而不管其他线程当前是否正在等待该锁。在某些情况下，此&ldquo;闯入&rdquo;行为可能很有用，即使它会打破公平性也如此。如果希望遵守此锁的公平设置，则使用 {@link #tryLock(long, TimeUnit) tryLock(0, TimeUnit.SECONDS) }，它几乎是等效的（也检测中断）。

<p> 如果当前线程已经保持此锁，则将保持计数加 1，该方法将返回 {@code true}。

<p>如果锁被另一个线程保持，则此方法将立即返回 {@code false} 值。  

@return 如果锁是自由的并且被当前线程获取，或者当前线程已经保持该锁，则返回 {@code true}；否则返回 {@code false}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.locks.ReentrantLock.tryLock(long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果锁在给定等待时间内没有被另一个线程保持，且当前线程未被{@linkplain Thread#interrupt 中断}，则获取该锁。

<p>如果该锁没有被另一个线程保持，并且立即返回 {@code true} 值，则将锁的保持计数设置为 1。如果为了使用公平的排序策略，已经设置此锁，并且其他线程都在等待该锁，则<em>不会</em> 获取一个可用的锁。这与 {@link #tryLock()} 方法相反。如果想使用一个允许闯入公平锁的定时 {@code tryLock}，那么可以将定时形式和不定时形式组合在一起：

 <pre>if (lock.tryLock() || lock.tryLock(timeout, unit) ) { ... }
 </pre>

<p>如果当前线程已经保持此锁，则将保持计数加 1，该方法将返回 {@code true}。

<p>如果锁被另一个线程保持，则出于线程调度目的，禁用当前线程，并且在发生以下三种情况之一以前，该线程将一直处于休眠状态：

 <ul>

<li>锁由当前线程获得；或者

<li>其他某个线程{@linkplain Thread#interrupt 中断} 当前线程；或者

<li>已超过指定的等待时间

 </ul>

<p>如果获得该锁，则返回 {@code true} 值，并将锁保持计数设置为 1。

<p>如果当前线程：

 <ul>

<li>在进入此方法时已经设置了该线程的中断状态；或者

<li>在等待获取锁的同时被{@linkplain Thread#interrupt 中断}。

 </ul>
则抛出 {@link InterruptedException}，并且清除当前线程的已中断状态。 

<p>如果超出了指定的等待时间，则返回值为 {@code false}。如果该时间小于等于 0，则此方法根本不会等待。

<p>在此实现中，因为此方法是一个显式中断点，所以要优先考虑响应中断，而不是响应锁的普通获取或重入获取，或者报告所用的等待时间。

@param timeout 等待锁的时间
@param unit timeout 参数的时间单位

@return 如果锁是自由的并且由当前线程获取，或者当前线程已经保持该锁，则返回 {@code true}；如果在获取该锁之前已经到达等待时间，则返回 {@code false}

@throws InterruptedException 如果当前线程被中断
@throws NullPointerException 如果时间单位为 null


<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.locks.ReentrantLock.unlock()
<!-- END KEY -->
<!-- BEGIN DATA -->
试图释放此锁。  

<p>如果当前线程是此锁所有者，则将保持计数减 1。如果保持计数现在为 0，则释放该锁。如果当前线程不是此锁的持有者，则抛出 {@link IllegalMonitorStateException}。
@throws IllegalMonitorStateException 如果当前线程没有保持此锁

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.locks.Condition java.util.concurrent.locks.ReentrantLock.newCondition()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用来与此 {@link Lock} 实例一起使用的 {@link Condition} 实例。

<p>在使用内置监视器锁时，返回的 {@link Condition} 实例支持与 {@link Object} 的监视器方法（{@link Object#wait() wait}、{@link Object#notify notify} 和 {@link Object#notifyAll notifyAll}）相同的用法。

 <ul>

<li>在调用 {@link Condition}、{@linkplain Condition#await() waiting} 或 {@linkplain Condition#signal signalling} 这些方法中的任意一个方法时，如果没有保持此锁，则将抛出 {@link IllegalMonitorStateException}。

<li>在调用 {@linkplain Condition#await() waiting} 条件方法时，将释放锁，并在这些方法返回之前，重新获取该锁，将锁保持计数恢复为调用方法时所持有的值。

<li>如果线程在等待时被{@linkplain Thread#interrupt 中断}，则等待将终止，并将抛出 {@link InterruptedException}，清除线程的中断状态。

<li>等待线程按 FIFO 顺序收到信号。

<li>等待方法返回的线程重新获取锁的顺序与线程最初获取锁的顺序相同，在默认情况下，未指定此顺序，但对于<em>公平</em> 锁，它们更倾向于那些等待时间最长的线程。
 
 </ul>

@return Condition 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.locks.ReentrantLock.getHoldCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
查询当前线程保持此锁的次数。

<p>对于与解除锁操作不匹配的每个锁操作，线程都会保持一个锁。

<p>保持计数信息通常只用于测试和调试。例如，如果不应该使用已经保持的锁进入代码的某一部分，则可以声明如下：

 <pre>
 class X {
   ReentrantLock lock = new ReentrantLock();
   // ...     
   public void m() { 
     assert lock.getHoldCount() == 0;
     lock.lock();
     try {
       // ... method body
     } finally {
       lock.unlock();
     }
   }
 }
 </pre>

@return 当前线程保持此锁的次数，如果此锁未被当前线程保持过，则返回 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.locks.ReentrantLock.isHeldByCurrentThread()
<!-- END KEY -->
<!-- BEGIN DATA -->
查询当前线程是否保持此锁。

<p>与内置监视器锁的 {@link Thread#holdsLock} 方法类似，此方法通常用于调试和测试。例如，只在保持某个锁时才应调用的方法可以声明如下：

 <pre>
 class X {
   ReentrantLock lock = new ReentrantLock();
   // ...

   public void m() { 
       assert lock.isHeldByCurrentThread();
       // ... method body
   }
 }
 </pre>

<p>还可以用此方法来确保某个重入锁是否以非重入方式使用的，例如：

 <pre>
 class X {
   ReentrantLock lock = new ReentrantLock();
   // ...

   public void m() { 
       assert !lock.isHeldByCurrentThread();
       lock.lock();
       try {
           // ... method body
       } finally {
           lock.unlock();
       }
   }
 }
 </pre>
@return 如果当前线程保持此锁，则返回 {@code true}；否则返回 {@code false}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.locks.ReentrantLock.isLocked()
<!-- END KEY -->
<!-- BEGIN DATA -->
查询此锁是否由任意线程保持。此方法用于监视系统状态，不用于同步控制。
@return 如果任意线程保持此锁，则返回 {@code true}；否则返回 {@code false}

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.locks.ReentrantLock.isFair()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此锁的公平设置为 true，则返回 {@code true}。
@return 如果此锁的公平设置为 true，则返回 {@code true}

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Thread java.util.concurrent.locks.ReentrantLock.getOwner()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回目前拥有此锁的线程，如果此锁不被任何线程拥有，则返回 {@code null}。当此方法被不是拥有者的线程调用，返回值反映当前锁状态的最大近似值。
例如，拥有者可以暂时为 {@code null}，也就是说有些线程试图获取该锁，但还没有实现。此方法用于加快子类的构造速度，提供更多的锁监视设施。

@return 拥有者，如果没有，则返回 {@code null}

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.locks.ReentrantLock.hasQueuedThreads()
<!-- END KEY -->
<!-- BEGIN DATA -->
查询是否有些线程正在等待获取此锁。注意，因为随时可能发生取消，所以返回 {@code true} 并不保证有其他线程将获取此锁。此方法主要用于监视系统状态。

@return 如果可能有其他线程正在等待获取锁，则返回 {@code true} 

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.locks.ReentrantLock.hasQueuedThread(Thread thread)
<!-- END KEY -->
<!-- BEGIN DATA -->
查询给定线程是否正在等待获取此锁。注意，因为随时可能发生取消，所以返回 {@code true} 并不保证此线程将获取此锁。此方法主要用于监视系统状态。

@param thread 线程
@return 如果给定线程已加入队列并且正在等待此锁，则返回 {@code true}
@throws NullPointerException 如果 thread 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.util.concurrent.locks.ReentrantLock.getQueueLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回正等待获取此锁的线程估计数。该值仅是估计的数字，因为在此方法遍历内部数据结构的同时，线程的数目可能动态地变化。此方法用于监视系统状态，不用于同步控制。
@return 正在等待此锁的线程估计数

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Collection<java.lang.Thread> java.util.concurrent.locks.ReentrantLock.getQueuedThreads()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 collection，它包含可能正等待获取此锁的线程。因为在构造此结果的同时实际的线程 set 可能动态地变化，所以返回的 collection 仅是尽力的估计值。所返回 collection 中的元素没有特定的顺序。此方法用于加快子类的构造速度，以提供更多的监视设施。
@return 线程的 collection

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.locks.ReentrantLock.hasWaiters(Condition condition)
<!-- END KEY -->
<!-- BEGIN DATA -->
查询是否有些线程正在等待与此锁有关的给定条件。注意，因为随时可能发生超时和中断，所以返回 {@code true} 并不保证将来某个 {@code signal} 将唤醒线程。此方法主要用于监视系统状态。
@param condition 条件
@return 如果有任何等待的线程，则返回 {@code true} 
@throws IllegalMonitorStateException 如果没有保持此锁
@throws IllegalArgumentException 如果给定 condition 与此锁无关
@throws NullPointerException 如果 condition 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.locks.ReentrantLock.getWaitQueueLength(Condition condition)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回等待与此锁相关的给定条件的线程估计数。注意，因为随时可能发生超时和中断，所以只能将估计值作为实际等待线程数的上边界。此方法用于监视系统状态，不用于同步控制。
@param condition 条件
@return 等待线程的估计数
@throws IllegalMonitorStateException 如果没有保持此锁
@throws IllegalArgumentException 如果给定 condition 与此锁无关
@throws NullPointerException 如果 condition 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Collection<java.lang.Thread> java.util.concurrent.locks.ReentrantLock.getWaitingThreads(Condition condition)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 collection，它包含可能正在等待与此锁相关给定条件的那些线程。因为在构造此结果的同时实际的线程 set 可能动态地变化，所以返回 collection 的元素只是尽力的估计值。所返回 collection 中的元素没有特定的顺序。此方法用于加快子类的构造速度，提供更多的条件监视设施。
@param condition 条件
@return 线程的 collection
@throws IllegalMonitorStateException 如果没有保持此锁
@throws IllegalArgumentException 如果给定 condition 与此锁无关
@throws NullPointerException 如果 condition 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.concurrent.locks.ReentrantLock.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回标识此锁及其锁定状态的字符串。该状态括在括号中，它包括字符串 {@code "Unlocked"} 或字符串 {@code "Locked by"}，后跟拥有线程的{@linkplain Thread#getName 名称}。
@return 标识此锁及其锁定状态的字符串。

<!-- END DATA -->
