<!-- BEGIN KEY -->
public class java.util.concurrent.ExecutionException extends java.lang.Exception
<!-- END KEY -->
<!-- BEGIN DATA -->
当试图获取已通过抛出异常而中止的任务的结果时，抛出此异常。可以使用 {@link #getCause()} 方法来检查此异常。

@see Future
@since 1.5
@author Doug Lea

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.concurrent.ExecutionException()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造不带详细消息的 <tt>ExecutionException</tt>。原因尚未被初始化，可在以后通过调用 {@link #initCause(Throwable) initCause} 对其进行初始化。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.concurrent.ExecutionException(String message)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带指定详细消息的 <tt>ExecutionException</tt>。原因尚未被初始化，可在以后通过调用 {@link #initCause(Throwable) initCause} 对其进行初始化。

@param message 详细消息

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ExecutionException(String message, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带指定详细消息和原因的 <tt>ExecutionException</tt>。

@param  message 详细消息
@param  cause 原因（保存此原因，以便以后通过 {@link #getCause()} 方法获取它）

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ExecutionException(Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带指定原因的 <tt>ExecutionException</tt>。将详细消息设置为：
 <pre>
  (cause == null ? null :cause.toString())</pre>
 （它通常包含类和 <tt>cause</tt> 的详细消息）。

@param  cause 原因（保存此原因，以便以后通过 {@link #getCause()} 方法获取它）

<!-- END DATA -->
