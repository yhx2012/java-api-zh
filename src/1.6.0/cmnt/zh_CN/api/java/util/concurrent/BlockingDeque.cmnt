<!-- BEGIN KEY -->
public interface java.util.concurrent.BlockingDeque extends java.util.concurrent.BlockingQueue, java.util.Deque
<!-- END KEY -->
<!-- BEGIN DATA -->
支持两个附加操作的 {@link java.util.Queue}，这两个操作是：获取元素时等待双端队列变为非空；存储元素时等待双端队列中的空间变得可用。

<p><tt>BlockingDeque</tt> 方法有四种形式，使用不同的方式处理无法立即满足但在将来某一时刻可能满足的操作：第一种方式抛出异常；第二种返回一个特殊值（<tt>null</tt> 或 <tt>false</tt>，具体取决于操作）；第三种无限期阻塞当前线程，直至操作成功；第四种只阻塞给定的最大时间，然后放弃。下表中总结了这些方法：

 <p>
 <table BORDER CELLPADDING=3 CELLSPACING=1>
  <tr>
<td ALIGN=CENTER COLSPAN = 5> <b>第一个元素（头部）</b></td>
  </tr>
  <tr>
    <td></td>
<td ALIGN=CENTER><em>抛出异常</em></td>
<td ALIGN=CENTER><em>特殊值</em></td>
<td ALIGN=CENTER><em>阻塞</em></td>
<td ALIGN=CENTER><em>超时期</em></td>
  </tr>
  <tr>
<td><b>插入</b></td>
<td>{@link #addFirst addFirst(e)}</td>
<td>{@link #offerFirst(Object) offerFirst(e)}</td>
<td>{@link #putFirst putFirst(e)}</td>
<td>{@link #offerFirst(Object, long, TimeUnit) offerFirst(e, time, unit)}</td>
  </tr>
  <tr>
<td><b>移除</b></td>
<td>{@link #removeFirst removeFirst()}</td>
<td>{@link #pollFirst pollFirst()}</td>
<td>{@link #takeFirst takeFirst()}</td>
<td>{@link #pollFirst(long, TimeUnit) pollFirst(time, unit)}</td>
  </tr>
  <tr>
<td><b>检查</b></td>
<td>{@link #getFirst getFirst()}</td>
<td>{@link #peekFirst peekFirst()}</td>
<td><em>不适用</em></td>
<td><em>不适用</em></td>
  </tr>
  <tr>
<td ALIGN=CENTER COLSPAN = 5> <b>最后一个元素（尾部）</b></td>
  </tr>
  <tr>
    <td></td>
<td ALIGN=CENTER><em>抛出异常</em></td>
<td ALIGN=CENTER><em>特殊值</em></td>
<td ALIGN=CENTER><em>阻塞</em></td>
<td ALIGN=CENTER><em>超时期</em></td>
  </tr>
  <tr>
<td><b>插入</b></td>
<td>{@link #addLast addLast(e)}</td>
<td>{@link #offerLast(Object) offerLast(e)}</td>
<td>{@link #putLast putLast(e)}</td>
<td>{@link #offerLast(Object, long, TimeUnit) offerLast(e, time, unit)}</td>
  </tr>
  <tr>
<td><b>移除</b></td>
<td>{@link #removeLast() removeLast()}</td>
<td>{@link #pollLast() pollLast()}</td>
<td>{@link #takeLast takeLast()}</td>
<td>{@link #pollLast(long, TimeUnit) pollLast(time, unit)}</td>
  </tr>
  <tr>
<td><b>检查</b></td>
<td>{@link #getLast getLast()}</td>
<td>{@link #peekLast peekLast()}</td>
<td><em>不适用</em></td>
<td><em>不适用</em></td>
  </tr>
 </table>

<p>像所有 {@link BlockingQueue} 一样，<tt>BlockingDeque</tt> 是线程安全的，但不允许 null 元素，并且可能有（也可能没有）容量限制。

<p><tt>BlockingDeque</tt> 实现可以直接用作 FIFO <tt>BlockingQueue</tt>。继承自 <tt>BlockingQueue</tt> 接口的方法精确地等效于下表中描述的 <tt>BlockingDeque</tt> 方法：

 <p>
 <table BORDER CELLPADDING=3 CELLSPACING=1>
  <tr>
<td ALIGN=CENTER> <b><tt>BlockingQueue</tt> 方法</b></td>
<td ALIGN=CENTER> <b>等效的 <tt>BlockingDeque</tt> 方法</b></td>
  </tr>
  <tr>
<td ALIGN=CENTER COLSPAN = 2> <b>插入</b></td>
  </tr>
  <tr>
<td>{@link #add(Object) add(e)}</td>
<td>{@link #addLast(Object) addLast(e)}</td>
  </tr>
  <tr>
<td>{@link #offer(Object) offer(e)}</td>
<td>{@link #offerLast(Object) offerLast(e)}</td>
  </tr>
  <tr>
<td>{@link #put(Object) put(e)}</td>
<td>{@link #putLast(Object) putLast(e)}</td>
  </tr>
  <tr>
<td>{@link #offer(Object, long, TimeUnit) offer(e, time, unit)}</td>
<td>{@link #offerLast(Object, long, TimeUnit) offerLast(e, time, unit)}</td>
  </tr>
  <tr>
<td ALIGN=CENTER COLSPAN = 2> <b>移除</b></td>
  </tr>
  <tr>
<td>{@link #remove() remove()}</td>
<td>{@link #removeFirst() removeFirst()}</td>
  </tr>
  <tr>
<td>{@link #poll() poll()}</td>
<td>{@link #pollFirst() pollFirst()}</td>
  </tr>
  <tr>
<td>{@link #take() take()}</td>
<td>{@link #takeFirst() takeFirst()}</td>
  </tr>
  <tr>
<td>{@link #poll(long, TimeUnit) poll(time, unit)}</td>
<td>{@link #pollFirst(long, TimeUnit) pollFirst(time, unit)}</td>
  </tr>
  <tr>
<td ALIGN=CENTER COLSPAN = 2> <b>检查</b></td>
  </tr>
  <tr>
<td>{@link #element() element()}</td>
<td>{@link #getFirst() getFirst()}</td>
  </tr>
  <tr>
<td>{@link #peek() peek()}</td>
<td>{@link #peekFirst() peekFirst()}</td>
  </tr>
 </table>

<p>内存一致性效果：当存在其他并发 collection 时，将对象放入 {@code BlockingDeque} 之前的线程中的操作 <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a> 随后通过另一线程从 {@code BlockingDeque} 中访问或移除该元素的操作。

<p>此接口是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

@since 1.6
@author Doug Lea
@param <E> 保存在此 collection 中的元素类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.BlockingDeque.addFirst(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果立即可行且不违反容量限制，则将指定的元素插入此双端队列的开头；如果当前没有空间可用，则抛出 <tt>IllegalStateException</tt>。当使用有容量限制的双端队列时，通常首选 {@link #offerFirst(Object) offerFirst}。

@param e 要添加的元素
@throws IllegalStateException {@inheritDoc}
@throws ClassCastException {@inheritDoc}
@throws NullPointerException 如果指定的元素为 null
@throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.BlockingDeque.addLast(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果立即可行且不违反容量限制，则将指定的元素插入此双端队列的末尾；如果当前没有空间可用，则抛出 <tt>IllegalStateException</tt>。当使用有容量限制的双端队列时，通常首选 {@link #offerLast(Object) offerLast}。

@param e 要添加的元素
@throws IllegalStateException {@inheritDoc}
@throws ClassCastException {@inheritDoc}
@throws NullPointerException 如果指定的元素为 null
@throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.BlockingDeque.offerFirst(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果立即可行且不违反容量限制，则将指定的元素插入此双端队列的开头，并在成功时返回 <tt>true</tt>；如果当前没有空间可用，则返回 <tt>false</tt>。当使用有容量限制的双端队列时，此方法通常优于 {@link #addFirst(Object) addFirst} 方法，后者可能无法插入元素，而只是抛出一个异常。

@param e 要添加的元素
@throws ClassCastException {@inheritDoc}
@throws NullPointerException 如果指定的元素为 null
@throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.BlockingDeque.offerLast(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果立即可行且不违反容量限制，则将指定的元素插入此双端队列的末尾，并在成功时返回 <tt>true</tt>；如果当前没有空间可用，则返回 <tt>false</tt>。当使用有容量限制的双端队列时，该方法通常优于 {@link #addLast(Object) addLast} 方法，后者可能无法插入元素，而只是抛出一个异常。

@param e 要添加的元素
@throws ClassCastException {@inheritDoc}
@throws NullPointerException 如果指定的元素为 null
@throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.BlockingDeque.putFirst(E e) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的元素插入此双端队列的开头，必要时将一直等待可用空间。

@param e 要添加的元素
@throws InterruptedException 如果在等待时被中断
@throws ClassCastException 如果指定元素的类不允许它被添加到此双端队列
@throws NullPointerException 如果指定的元素为 null
@throws IllegalArgumentException 如果指定元素的某个属性不允许它被添加到此双端队列

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.BlockingDeque.putLast(E e) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的元素插入此双端队列的末尾，必要时将一直等待可用空间。

@param e 要添加的元素
@throws InterruptedException 如果在等待时被中断
@throws ClassCastException 如果指定元素的类不允许它被添加到此双端队列
@throws NullPointerException 如果指定的元素为 null
@throws IllegalArgumentException 如果指定元素的某个属性不允许它被添加到此双端队列

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.BlockingDeque.offerFirst(E e, long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的元素插入此双端队列的开头，必要时将在指定的等待时间内等待可用空间。

@param e 要添加的元素
@param timeout 放弃之前等待的时间长度，以 <tt>unit</tt> 为时间单位
@param unit 确定如何解释 <tt>timeout</tt> 参数的 <tt>TimeUnit</tt>
@return 如果成功，则返回 <tt>true</tt>；如果在空间可用前超过了指定的等待时间，则返回 <tt>false</tt>
@throws InterruptedException 如果在等待时被中断
@throws ClassCastException 如果指定元素的类不允许它被添加到此双端队列
@throws NullPointerException 如果指定的元素为 null
@throws IllegalArgumentException 如果指定元素的某个属性不允许它被添加到此双端队列

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.BlockingDeque.offerLast(E e, long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的元素插入此双端队列的末尾，必要时将在指定的等待时间内等待可用空间。

@param e 要添加的元素
@param timeout 放弃之前等待的时间长度，以 <tt>unit</tt> 为时间单位
@param unit 确定如何解释 <tt>timeout</tt> 参数的 <tt>TimeUnit</tt>
@return 如果成功，则返回 <tt>true</tt>；如果在空间可用前超过了指定的等待时间，则返回 <tt>false</tt>
@throws InterruptedException 如果在等待时被中断
@throws ClassCastException 如果指定元素的类不允许它被添加到此双端队列
@throws NullPointerException 如果指定的元素为 null
@throws IllegalArgumentException 如果指定元素的某个属性不允许它被添加到此双端队列

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.BlockingDeque.takeFirst() throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取并移除此双端队列的第一个元素，必要时将一直等待可用元素。

@return 此双端队列的头部
@throws InterruptedException 如果在等待时被中断

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.BlockingDeque.takeLast() throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取并移除此双端队列的最后一个元素，必要时将一直等待可用元素。

@return 此双端队列的尾部
@throws InterruptedException 如果在等待时被中断

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.BlockingDeque.pollFirst(long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取并移除此双端队列的第一个元素，必要时将在指定的等待时间等待可用元素。

@param timeout 放弃之前等待的时间长度，以 <tt>unit</tt> 为时间单位
@param unit 确定如何解释 <tt>timeout</tt> 参数的 <tt>TimeUnit</tt>
@return 此双端队列的头部，如果在元素可用前超过了指定的等待时间，则返回 <tt>null</tt>
@throws InterruptedException 如果在等待时被中断

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.BlockingDeque.pollLast(long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取并移除此双端队列的最后一个元素，必要时将在指定的等待时间内等待可用元素。

@param timeout 放弃之前等待的时间长度，以 <tt>unit</tt> 为时间单位
@param unit 确定如何解释 <tt>timeout</tt> 参数的 <tt>TimeUnit</tt>
@return 此双端队列的尾部，如果在元素可用前超过了指定的等待时间，则返回 <tt>null</tt>
@throws InterruptedException 如果在等待时被中断

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.BlockingDeque.removeFirstOccurrence(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此双端队列移除第一次出现的指定元素。如果此双端队列不包含该元素，则不作更改。更确切地讲，移除第一个满足 <tt>o.equals(e)</tt> 的元素 <tt>e</tt>（如果存在这样的元素）。如果此双端队列包含指定的元素（或者此双端队列由于调用而发生了更改），则返回 <tt>true</tt>。

@param o 要从此双端队列移除的元素（如果存在）
@return 如果由于此调用而移除了一个元素，则返回 <tt>true</tt>
@throws ClassCastException 如果指定元素的类与此双端队列不兼容（可选）
@throws NullPointerException 如果指定的元素为 null（可选）

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.BlockingDeque.removeLastOccurrence(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此双端队列移除最后一次出现的指定元素。如果此双端队列不包含该元素，则不作更改。更确切地讲，移除最后一个满足 <tt>o.equals(e)</tt> 的元素 <tt>e</tt>（如果存在这样的元素）。如果此双端队列包含指定的元素（或者此双端队列由于调用而发生了更改），则返回 <tt>true</tt>。

@param o 要从此双端队列移除的元素（如果存在）
@return 如果由于此调用而移除了一个元素，则返回 <tt>true</tt>
@throws ClassCastException 如果指定元素的类与此双端队列不兼容（可选）
@throws NullPointerException 如果指定的元素为 null（可选）

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.BlockingDeque.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
Inserts the 如果立即可行且不违反容量限制，则将指定的元素插入此双端队列表示的队列中（即此双端队列的尾部），并在成功时返回 <tt>true</tt>；如果当前没有空间可用，则抛出 <tt>IllegalStateException</tt>。当使用有容量限制的双端队列时，通常首选 {@link #offer(Object) offer}。

<p>此方法等效于 {@link #addLast(Object) addLast}。

@param e 要添加的元素
@throws IllegalStateException {@inheritDoc}
@throws ClassCastException 如果指定元素的类不允许它被添加到此双端队列
@throws NullPointerException 如果指定的元素为 null
@throws IllegalArgumentException 如果指定元素的某个属性不允许它被添加到此双端队列

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.BlockingDeque.offer(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果立即可行且不违反容量限制，则将指定的元素插入此双端队列表示的队列中（即此双端队列的尾部），并在成功时返回 <tt>true</tt>；如果当前没有空间可用，则返回 <tt>false</tt>。当使用有容量限制的双端队列时，此方法通常优于 {@link #add} 方法，后者可能无法插入元素，而只是抛出一个异常。

<p>此方法等效于 {@link #offerLast(Object) offerLast}。

@param e 要添加的元素
@throws ClassCastException 如果指定元素的类不允许它被添加到此双端队列
@throws NullPointerException 如果指定的元素为 null
@throws IllegalArgumentException 如果指定元素的某个属性不允许它被添加到此双端队列

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.BlockingDeque.put(E e) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的元素插入此双端队列表示的队列中（即此双端队列的尾部），必要时将一直等待可用空间。

<p>此方法等效于 {@link #putLast(Object) putLast}。

@param e 要添加的元素
@throws InterruptedException {@inheritDoc}
@throws ClassCastException 如果指定元素的类不允许它被添加到此双端队列
@throws NullPointerException 如果指定的元素为 null
@throws IllegalArgumentException 如果指定元素的某个属性不允许它被添加到此双端队列

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.BlockingDeque.offer(E e, long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的元素插入此双端队列表示的队列中（即此双端队列的尾部），必要时将在指定的等待时间内一直等待可用空间。 

<p>此方法等效于 {@link #offerLast(Object,long,TimeUnit) offerLast}。

@param e 要添加的元素
@return 如果元素被添加到此双端队列，则返回 <tt>true</tt>，否则返回 <tt>false</tt>
@throws InterruptedException {@inheritDoc}
@throws ClassCastException 如果指定元素的类不允许它被添加到此双端队列
@throws NullPointerException 如果指定的元素为 null
@throws IllegalArgumentException 如果指定元素的某个属性不允许它被添加到此双端队列

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.BlockingDeque.remove()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取并移除此双端队列表示的队列的头部（即此双端队列的第一个元素）。此方法与 {@link #poll poll} 的不同之处在于：如果此双端队列为空，它会抛出一个异常。

<p>此方法等效于 {@link #removeFirst() removeFirst}。

@return 此双端队列表示的队列的头部
@throws NoSuchElementException 如果此双端队列为空

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.BlockingDeque.poll()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取并移除此双端队列表示的队列的头部（即此双端队列的第一个元素）；如果此双端队列为空，则返回 <tt>null</tt>。

<p>此方法等效于 {@link #pollFirst()}。

@return 此双端队列的头部；如果此双端队列为空，则返回 <tt>null</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.BlockingDeque.take() throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取并移除此双端队列表示的队列的头部（即此双端队列的第一个元素），必要时将一直等待可用元素。

<p>此方法等效于 {@link #takeFirst() takeFirst}。

@return 此双端队列的头部
@throws InterruptedException 如果在等待时被中断

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.BlockingDeque.poll(long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取并移除此双端队列表示的队列的头部（即此双端队列的第一个元素），如有必要将在指定的等待时间内等待可用元素。

<p>此方法等效于 {@link #pollFirst(long,TimeUnit) pollFirst}。

@return 此双端队列的头部；如果在元素可用前超过了指定的等待时间，则返回 <tt>null</tt>
@throws InterruptedException 如果在等待时被中断

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.BlockingDeque.element()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取但不移除此双端队列表示的队列的头部（即此双端队列的第一个元素）。此方法与 {@link #peek peek} 的不同之处在于：如果此双端队列为空，它会抛出一个异常。

<p>此方法等效于 {@link #getFirst() getFirst}。

@return 此双端队列的头部
@throws NoSuchElementException 如果此双端队列为空

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.BlockingDeque.peek()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取但不移除此双端队列表示的队列的头部（即此双端队列的第一个元素）；如果此双端队列为空，则返回 <tt>null</tt>。

<p>此方法等效于 {@link #peekFirst() peekFirst}。

@return 此双端队列的头部；如果此双端队列为空，则返回 <tt>null</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.BlockingDeque.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此双端队列移除第一次出现的指定元素。如果此双端队列不包含该元素，则不作更改。更确切地讲，移除第一个满足 <tt>o.equals(e)</tt> 的元素 <tt>e</tt>（如果存在这样的元素）。如果此双端队列包含指定的元素（或者此双端队列由于调用而发生了更改），则返回 <tt>true</tt>。

<p>此方法等效于 {@link #removeFirstOccurrence(Object) removeFirstOccurrence}。

@param o 要从此双端队列移除的元素（如果存在）
@return 如果此双端队列由于调用而发生更改，则返回 <tt>true</tt>
@throws ClassCastException 如果指定元素的类与此双端队列不兼容（可选）
@throws NullPointerException 如果指定的元素为 null（可选）

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.BlockingDeque.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此双端队列包含指定的元素，则返回 <tt>true</tt>。更确切地讲，当且仅当此双端队列至少包含一个满足 <tt>o.equals(e)</tt> 的元素 <tt>e</tt>，返回 <tt>true</tt>。

@param o 检查是否包含在此双端队列中的对象
@return 如果此双端队列包含指定的元素，则返回 <tt>true</tt>
@throws ClassCastException 如果指定元素的类与此双端队列不兼容（可选）
@throws NullPointerException 如果指定的元素为 null（可选）

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.BlockingDeque.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此双端队列中的元素数。

@return 此双端队列中的元素数

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.concurrent.BlockingDeque.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在此双端队列中的元素上以恰当顺序进行迭代的迭代器。元素将按从第一个（头部）到最后一个（尾部）的顺序返回。

@return 按恰当顺序在此双端队列中的元素上进行迭代的迭代器

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.BlockingDeque.push(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将元素推入此双端队列表示的栈。换句话说，在不违反容量限制的情况下，将元素插入双端队列的开头。

<p>此方法等效于 {@link #addFirst(Object) addFirst}。

@throws IllegalStateException {@inheritDoc}
@throws ClassCastException {@inheritDoc}
@throws NullPointerException 如果指定的元素为 null
@throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
