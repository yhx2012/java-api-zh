<!-- BEGIN KEY -->
public class java.util.concurrent.atomic.AtomicMarkableReference extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
{@code AtomicMarkableReference} 维护带有标记位的对象引用，可以原子方式对其进行更新。
 <p>
<p> 实现注意事项。通过创建表示“已装箱”的 [reference, boolean] 对的内部对象，此实现维持可标记的引用。

@since 1.5
@author Doug Lea
@param <V> 此引用所引用的对象类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.atomic.AtomicMarkableReference(V initialRef, boolean initialMark)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有给定初始值的新 {@code AtomicMarkableReference}。

@param initialRef 初始引用
@param initialMark 初始标记

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.concurrent.atomic.AtomicMarkableReference.getReference()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该引用的当前值。

@return 该引用的当前值

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.atomic.AtomicMarkableReference.isMarked()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该标记的当前值。

@return 该标记的当前值

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.concurrent.atomic.AtomicMarkableReference.get(boolean[] markHolder)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该引用和该标记的当前值。典型的用法为 {@code boolean[1] holder; ref = v.get(holder); }。

@param markHolder 大小至少为 1 的数组。返回时，{@code markholder[0]} 将保存该标记的值。
@return 该引用的当前值

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.atomic.AtomicMarkableReference.weakCompareAndSet(V expectedReference, V newReference, boolean expectedMark, boolean newMark)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前引用 {@code ==} 预期引用，并且当前标记等于预期标记，那么以原子方式将引用和标记的值设置为给定的更新值。

<p>可能<a href="package-summary.html#Spurious">意外失败</a>并且不提供排序保证，所以只有在很少的情况下才对 {@code compareAndSet} 进行适当地选择。

@param expectedReference 该引用的预期值
@param newReference 该引用的新值
@param expectedMark 该标记的预期值
@param newMark 该标记的新值
@return 如果成功，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.atomic.AtomicMarkableReference.compareAndSet(V expectedReference, V newReference, boolean expectedMark, boolean newMark)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前引用 {@code ==} 预期引用，并且当前标记等于预期标记，那么以原子方式将引用和标记的值设置为给定的更新值。  

@param expectedReference 该引用的预期值
@param newReference 该引用的新值
@param expectedMark 该标记的预期值
@param newMark 该标记的新值
@return 如果成功，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.atomic.AtomicMarkableReference.set(V newReference, boolean newMark)
<!-- END KEY -->
<!-- BEGIN DATA -->
无条件地同时设置该引用和标记的值。

@param newReference 该引用的新值
@param newMark 该标记的新值

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.atomic.AtomicMarkableReference.attemptMark(V expectedReference, boolean newMark)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前引用 {@code ==} 预期引用，则以原子方式将该标记的值设置为给定的更新值。此操作的任何给定调用都可能会意外失败（返回 {@code false}），但是在当前值保持预期值而且没有其他线程也在尝试设置该值时，重复调用将最终获得成功。

@param expectedReference 该引用的预期值
@param newMark 该标记的新值
@return 如果成功，则返回 true

<!-- END DATA -->


