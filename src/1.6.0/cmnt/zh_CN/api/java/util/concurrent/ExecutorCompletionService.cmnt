<!-- BEGIN KEY -->
public class java.util.concurrent.ExecutorCompletionService extends java.lang.Object implements java.util.concurrent.CompletionService
<!-- END KEY -->
<!-- BEGIN DATA -->
使用提供的 {@link Executor} 来执行任务的 {@link CompletionService}。此类将安排那些完成时提交的任务，把它们放置在可使用 <tt>take</tt> 访问的队列上。该类非常轻便，适合于在执行几组任务时临时使用。

 <p>

<b>用法示例。</b>

假定您有针对某个问题的一组求解程序，每个求解程序都能返回某种类型的 <tt>Result</tt> 值，并且您想同时运行它们，使用方法 <tt>use(Result r)</tt> 处理返回非 null 值的每个求解程序的返回结果。可以这样编写程序：

 <pre>
    void solve(Executor e, Collection&lt;Callable&lt;Result&gt;&gt; solvers)
      throws InterruptedException, ExecutionException {
        CompletionService&lt;Result&gt; ecs = new ExecutorCompletionService&lt;Result&gt;(e);
        for (Callable&lt;Result&gt; s : solvers)
            ecs.submit(s);
        int n = solvers.size();
        for (int i = 0; i &lt; n; ++i) {
            Result r = ecs.take().get();
            if (r != null) 
                use(r);
        }
    }
 </pre>

假定您想使用任务集中的第一个非 null 结果，而忽略任何遇到异常的任务，并且在第一个任务就绪时取消其他所有任务：

 <pre>
    void solve(Executor e, Collection&lt;Callable&lt;Result&gt;&gt; solvers) 
      throws InterruptedException {
        CompletionService&lt;Result&gt; ecs = new ExecutorCompletionService&lt;Result&gt;(e);
        int n = solvers.size();
        List&lt;Future&lt;Result&gt;&gt; futures = new ArrayList&lt;Future&lt;Result&gt;&gt;(n);
        Result result = null;
        try {
            for (Callable&lt;Result&gt; s : solvers)
                futures.add(ecs.submit(s));
            for (int i = 0; i &lt; n; ++i) {
                try {
                    Result r = ecs.take().get();
                    if (r != null) {
                        result = r;
                        break;
                    }
                } catch(ExecutionException ignore) {}
            }
        }
        finally {
            for (Future&lt;Result&gt; f : futures)
                f.cancel(true);
        }

        if (result != null)
            use(result);
    }
 </pre>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ExecutorCompletionService(Executor executor)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用为执行基本任务而提供的执行程序创建一个 ExecutorCompletionService，并将 {@link LinkedBlockingQueue} 作为完成队列。
@param executor 要使用的执行程序
@throws NullPointerException 如果执行程序为 <tt>null</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ExecutorCompletionService(Executor executor, java.util.concurrent.BlockingQueue<java.util.concurrent.Future<V>> completionQueue)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用为执行基本任务而提供的执行程序创建一个 ExecutorCompletionService，并将所提供的队列作为其完成队列。
@param executor 要使用的执行程序
@param completionQueue 用作完成队列的队列，通常是专供此服务使用的队列
@throws NullPointerException 如果执行程序或 completionQueue 为 <tt>null</tt>

<!-- END DATA -->
