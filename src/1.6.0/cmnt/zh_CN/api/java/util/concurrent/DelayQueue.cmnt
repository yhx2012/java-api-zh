<!-- BEGIN KEY -->
public class java.util.concurrent.DelayQueue extends java.util.AbstractQueue implements java.util.concurrent.BlockingQueue
<!-- END KEY -->
<!-- BEGIN DATA -->
<tt>Delayed</tt> 元素的一个无界{@linkplain BlockingQueue 阻塞队列}，只有在延迟期满时才能从中提取元素。该队列的<em>头部</em> 是延迟期满后保存时间最长的 <tt>Delayed</tt> 元素。如果延迟都还没有期满，则队列没有头部，并且 <tt>poll</tt> 将返回 <tt>null</tt>。当一个元素的 <tt>getDelay(TimeUnit.NANOSECONDS)</tt> 方法返回一个小于等于 0 的值时，将发生到期。即使无法使用 <tt>take</tt> 或 <tt>poll</tt> 移除未到期的元素，也不会将这些元素作为正常元素对待。例如，<tt>size</tt> 方法同时返回到期和未到期元素的计数。此队列不允许使用 null 元素。

<p>此类及其迭代器实现了 {@link Collection} 和 {@link Iterator} 接口的所有<em>可选</em> 方法。

<p>此类是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

@since 1.5
@author Doug Lea
@param <E> 此 collection 中所保存元素的类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.DelayQueue()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个最初为空的新 <tt>DelayQueue</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.DelayQueue(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个最初包含 {@link Delayed} 实例的给定 collection 元素的 <tt>DelayQueue</tt>。

@param c 最初包含元素的 collection
@throws NullPointerException 如果指定 collection 或其任意元素为 null


<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.DelayQueue.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素插入此延迟队列中。

@param e 要添加的元素
@return <tt>true</tt>（根据 {@link Collection#add} 的规定）
@throws NullPointerException 如果指定元素为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.DelayQueue.offer(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定元素插入此延迟队列。

@param e 要添加的元素
@return <tt>true</tt>
@throws NullPointerException 如果指定的元素为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.DelayQueue.put(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素插入此延迟队列。由于该队列是无界的，所以此方法不会阻塞。
@param e 要添加的元素
@throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.DelayQueue.offer(E e, long timeout, TimeUnit unit)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素插入此延迟队列中。由于该队列是无界的，所以此方法不会阻塞。
@param e 要添加的元素
@param timeout 忽略此参数，因为此方法不会阻塞
@param unit 忽略此参数，因为此方法不会阻塞
@return <tt>true</tt>
@throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E extends java.util.concurrent.Delayed java.util.concurrent.DelayQueue.poll()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取并移除此队列的头，如果此队列不包含具有已到期延迟时间的元素，则返回 <tt>null</tt>。

@return 此队列的头；如果此队列不包含任何具有已到期延迟时间的元素，则返回 <tt>null</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public E extends java.util.concurrent.Delayed java.util.concurrent.DelayQueue.take() throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取并移除此队列的头部，在可从此队列获得到期延迟的元素之前一直等待（如有必要）。
@return 此队列的头部
@throws InterruptedException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E extends java.util.concurrent.Delayed java.util.concurrent.DelayQueue.poll(long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取并移除此队列的头部，在可从此队列获得到期延迟的元素，或者到达指定的等待时间之前一直等待（如有必要）。

@return 此队列的头部；如果在可获得到期延迟的元素之前超出了指定的等待时间，则返回 <tt>null</tt>
@throws InterruptedException {@inheritDoc}


<!-- END DATA -->
<!-- BEGIN KEY -->
public E extends java.util.concurrent.Delayed java.util.concurrent.DelayQueue.peek()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取但不移除此队列的头部；如果此队列为空，则返回 <tt>null</tt>。与 <tt>poll</tt> 不同，如果队列中没有到期元素可用，则此方法返回下一个将到期的元素（如果存在一个这样的元素）。

@return 此队列的头部；如果此队列为空，则返回 <tt>null</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.DelayQueue.drainTo(java.util.Collection<? super E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws UnsupportedOperationException {@inheritDoc}
 @throws ClassCastException            {@inheritDoc}
 @throws NullPointerException          {@inheritDoc}
 @throws IllegalArgumentException      {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.DelayQueue.drainTo(java.util.Collection<? super E> c, int maxElements)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws UnsupportedOperationException {@inheritDoc}
 @throws ClassCastException            {@inheritDoc}
 @throws NullPointerException          {@inheritDoc}
 @throws IllegalArgumentException      {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.DelayQueue.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
自动移除此延迟队列的所有元素。此调用返回后，队列将为空。不等待未到期延迟的元素；只是从队列中丢弃它们。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.DelayQueue.remainingCapacity()
<!-- END KEY -->
<!-- BEGIN DATA -->
因为 <tt>DelayQueue</tt> 没有容量限制，所以它总是返回 <tt>Integer.MAX_VALUE</tt>。
@return <tt>Integer.MAX_VALUE</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.util.concurrent.DelayQueue.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回包含此队列所有元素的数组。所返回数组的元素没有特定的顺序。

 <p>由于此队列并不维护对返回数组的任何引用，因而它将是“安全的”。（换句话说，此方法必须分配一个新数组）。因此，调用者可以随意修改返回的数组。

 <p>此方法充当基于数组的 API 与基于 collection 的 API 之间的桥梁。

 @return 包含此队列所有元素的数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.util.concurrent.DelayQueue.toArray(T[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回一个包含此队列所有元素的数组；返回数组的运行时类型是指定数组的类型。所返回数组的元素没有特定的顺序。如果指定的数组能容纳队列，则将该队列返回此处。否则，将分配一个具有指定数组的运行时类型和此队列大小的新数组。


 <p>如果指定的数组能容纳队列，并有剩余的空间（即数组的元素比队列多），那么会将紧接队列尾部的元素设置为 <tt>null</tt>。

 <p>像 {@link #toArray()} 方法一样，此方法充当基于数组 的 API 与基于 collection 的 API 之间的桥梁。更进一步说，此方法允许对输出数组的运行时类型进行精确控制，在某些情况下，可以用来节省分配开销。

 <p>以下代码用来将延迟队列转储到一个新分配的 <tt>Delayed</tt> 数组：

 <pre>
     Delayed[] a = q.toArray(new Delayed[0]);</pre>

 注意，<tt>toArray(new Object[0])</tt> 和 <tt>toArray()</tt> 在功能上是相同的。

 @param a 用来存储队列元素的数组（如果该数组足够大）；否则为此分配一个具有相同运行时类型的新数组
 @return 包含此队列所有元素的数组
 @throws ArrayStoreException 如果指定数组的运行时类型不是此队列每个元素的运行时类型的超类型
 @throws NullPointerException 如果指定数组为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.DelayQueue.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此队列中移除指定元素的单个实例（如果存在），无论它是否到期。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.concurrent.DelayQueue.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在此队列所有元素（既包括到期的，也包括未到期的）上进行迭代的迭代器。迭代器不以任何特定的顺序返回元素。返回的 <tt>Iterator</tt> 是一个“弱一致”迭代器，不会抛出 {@link ConcurrentModificationException}，并且可确保遍历迭代器构造后所存在的所有元素，并且可能（但并不保证）反映构造后的所有修改。

@return 在此队列元素上进行迭代的迭代器

<!-- END DATA -->
