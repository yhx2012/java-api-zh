<!-- BEGIN KEY -->
java.util.concurrent
<!-- END KEY -->
<!-- BEGIN DATA -->


<p> 在并发编程中很常用的实用工具类。此包包括了几个小的、已标准化的可扩展框架，以及一些提供有用功能的类，没有这些类，这些功能会很难实现或实现起来冗长乏味。下面简要描述主要的组件。另请参阅 <tt>locks</tt> 和 <tt>atomic</tt> 包。

<h2>执行程序</h2>

<b>接口。</b>{@link java.util.concurrent.Executor} 是一个简单的标准化接口，用于定义类似于线程的自定义子系统，包括线程池、异步 IO 和轻量级任务框架。根据所使用的具体 Executor 类的不同，可能在新创建的线程中，现有的任务执行线程中，或者调用 <tt>execute()</tt> 的线程中执行任务，并且可能顺序或并发执行。{@link java.util.concurrent.ExecutorService} 提供了多个完整的异步任务执行框架。ExecutorService 管理任务的排队和安排，并允许受控制的关闭。{@link java.util.concurrent.ScheduledExecutorService} 子接口及相关的接口添加了对延迟的和定期任务执行的支持。ExecutorService 提供了安排异步执行的方法，可执行由 {@link java.util.concurrent.Callable} 表示的任何函数，结果类似于 {@link java.lang.Runnable}。{@link java.util.concurrent.Future} 返回函数的结果，允许确定执行是否完成，并提供取消执行的方法。{@link java.util.concurrent.RunnableFuture} 是拥有 <tt>run</tt> 方法的 Future，<tt>run</tt> 方法执行时将设置其结果。 

<p>

<b>实现。</b>类 {@link java.util.concurrent.ThreadPoolExecutor} 和 {@link java.util.concurrent.ScheduledThreadPoolExecutor} 提供可调的、灵活的线程池。{@link java.util.concurrent.Executors} 类提供大多数 Executor 的常见类型和配置的工厂方法，以及使用它们的几种实用工具方法。其他基于 Executor 的实用工具包括具体类 {@link java.util.concurrent.FutureTask}，它提供 Future 的常见可扩展实现，以及 {@link java.util.concurrent.ExecutorCompletionService}，它有助于协调对异步任务组的处理。

<h2>队列</h2>

java.util.concurrent {@link java.util.concurrent.ConcurrentLinkedQueue} 类提供了高效的、可伸缩的、线程安全的非阻塞 FIFO 队列。java.util.concurrent 中的五个实现都支持扩展的 {@link java.util.concurrent.BlockingQueue} 接口，该接口定义了 put 和 take 的阻塞版本：{@link java.util.concurrent.LinkedBlockingQueue}、{@link java.util.concurrent.ArrayBlockingQueue}、{@link java.util.concurrent.SynchronousQueue}、{@link java.util.concurrent.PriorityBlockingQueue} 和 {@link java.util.concurrent.DelayQueue}。这些不同的类覆盖了生产者-使用者、消息传递、并行任务执行和相关并发设计的大多数常见使用的上下文。{@link
java.util.concurrent.BlockingDeque} 接口扩展 <tt>BlockingQueue</tt>，以支持 FIFO 和 LIFO（基于堆栈）操作。{@link java.util.concurrent.LinkedBlockingDeque} 类提供一个实现。


<h2>计时</h2>

{@link java.util.concurrent.TimeUnit} 类为指定和控制基于超时的操作提供了多重粒度（包括纳秒级）。该包中的大多数类除了包含不确定的等待之外，还包含基于超时的操作。在使用超时的所有情况中，超时指定了在表明已超时前该方法应该等待的最少时间。在超时发生后，实现会&ldquo;尽力&rdquo;检测超时。但是，在检测超时与超时之后再次实际执行线程之间可能要经过不确定的时间。接受超时期参数的所有方法将小于等于 0 的值视为根本不会等待。要“永远”等待，可以使用 <tt>Long.MAX_VALUE</tt> 值。

<h2>同步器</h2>

四个类可协助实现常见的专用同步语句。{@link java.util.concurrent.Semaphore} 是一个经典的并发工具。{@link java.util.concurrent.CountDownLatch} 是一个极其简单但又极其常用的实用工具，用于在保持给定数目的信号、事件或条件前阻塞执行。{@link java.util.concurrent.CyclicBarrier} 是一个可重置的多路同步点，在某些并行编程风格中很有用。{@link java.util.concurrent.Exchanger} 允许两个线程在 collection 点交换对象，它在多流水线设计中是有用的。

<h2>并发 Collection</h2>

除队列外，此包还提供了设计用于多线程上下文中的 Collection 实现：{@link java.util.concurrent.ConcurrentHashMap}、{@link java.util.concurrent.ConcurrentSkipListMap}、{@link java.util.concurrent.ConcurrentSkipListSet}、{@link java.util.concurrent.CopyOnWriteArrayList} 和
{@link java.util.concurrent.CopyOnWriteArraySet}。当期望许多线程访问一个给定 collection 时，<tt>ConcurrentHashMap</tt> 通常优于同步的 <tt>HashMap</tt>，<tt>ConcurrentSkipListMap</tt> 通常优于同步的 <tt>TreeMap</tt>。当期望的读数和遍历远远大于列表的更新数时，<tt>CopyOnWriteArrayList</tt> 优于同步的 <tt>ArrayList</tt>。

<p>此包中与某些类一起使用的&ldquo;Concurrent&rdquo前缀;是一种简写，表明与类似的&ldquo;同步&rdquo;类有所不同。例如，<tt>java.util.Hashtable</tt> 和 <tt>Collections.synchronizedMap(new HashMap())</tt> 是同步的，但 {@link java.util.concurrent.ConcurrentHashMap} 则是&ldquo;并发的&rdquo;。并发 collection 是线程安全的，但是不受单个排他锁的管理。在 ConcurrentHashMap 这一特定情况下，它可以安全地允许进行任意数目的并发读取，以及数目可调的并发写入。需要通过单个锁不允许对 collection 的所有访问时，&ldquo;同步&rdquo;类是很有用的，其代价是较差的可伸缩性。在期望多个线程访问公共 collection 的其他情况中，通常&ldquo;并发&rdquo;版本要更好一些。当 collection 是未共享的，或者仅保持其他锁时 collection 是可访问的情况下，非同步 collection 则要更好一些。

<p> 大多数并发 Collection 实现（包括大多数 Queue）与常规的 java.util 约定也不同，因为它们的迭代器提供了<em>弱一致的</em>，而不是快速失败的遍历。弱一致的迭代器是线程安全的，但是在迭代时没有必要冻结 collection，所以它不一定反映自迭代器创建以来的所有更新。

<a name="MemoryVisibility">
<h2>内存一致性属性</h2>

<a href="http://java.sun.com/docs/books/jls/third_edition/html/memory.html">
Java Language Specification 第 17 章</a>定义了内存操作（如共享变量的读写）的 <i>happen-before</i> 关系。只有写入操作 <i>happen-before</i> 读取操作时，才保证一个线程写入的结果对另一个线程的读取是可视的。{@code synchronized} 和 {@code volatile} 构造 <i>happen-before</i> 关系，{@code Thread.start()} 和 {@code Thread.join()} 方法形成 <i>happen-before</i> 关系。尤其是：

<ul>
  <li>线程中的每个操作 <i>happen-before</i> 稍后按程序顺序传入的该线程中的每个操作。 

  <li>一个解除锁监视器的（{@code synchronized} 阻塞或方法退出）<i>happen-before</i> 相同监视器的每个后续锁（{@code synchronized} 阻塞或方法进入）。并且因为 <i>happen-before</i> 关系是可传递的，所以解除锁定之前的线程的所有操作 <i>happen-before</i> 锁定该监视器的任何线程后续的所有操作。

  <li>写入 {@code volatile} 字段 <i>happen-before</i> 每个后续读取相同字段。{@code volatile} 字段的读取和写入与进入和退出监视器具有相似的内存一致性效果，但<em>不</em> 需要互斥锁。

  <li>在线程上调用 {@code start} <i>happen-before</i> 已启动的线程中的任何线程。

  <li>线程中的所有操作 <i>happen-before</i> 从该线程上的 {@code join} 成功返回的任何其他线程。

</ul>


{@code java.util.concurrent} 中所有类的方法及其子包扩展了这些对更高级别同步的保证。尤其是：

<ul>

  <li>线程中将一个对象放入任何并发 collection 之前的操作 <i>happen-before</i> 从另一线程中的 collection 访问或移除该元素的后续操作。

  <li>线程中向 {@code Executor} 提交 {@code Runnable} 之前的操作 <i>happen-before</i> 其执行开始。同样适用于向 {@code ExecutorService} 提交 {@code Callables}。

  <li>异步计算（由 {@code Future} 表示）所采取的操作 <i>happen-before</i> 通过另一线程中 {@code Future.get()} 获取结果后续的操作。

  <li>“释放”同步储存方法（如 {@code Lock.unlock}、{@code Semaphore.release} 和 {@code CountDownLatch.countDown}）之前的操作 <i>happen-before</i> 另一线程中相同同步储存对象成功“获取”方法（如 {@code Lock.lock}、{@code Semaphore.acquire}、{@code Condition.await} 和 {@code CountDownLatch.await}）的后续操作。

  <li>对于通过 {@code Exchanger} 成功交换对象的每个线程对，每个线程中 {@code exchange()} 之前的操作 <i>happen-before</i> 另一线程中对应 {@code exchange()} 后续的操作。

  <li>调用 {@code CyclicBarrier.await} 之前的操作 <i>happen-before</i> 屏障操作所执行的操作，屏障操作所执行的操作 <i>happen-before</i> 从另一线程中对应 {@code await} 成功返回的后续操作。

</ul>

@since 1.5


<!-- END DATA -->
