<!-- BEGIN KEY -->
public abstract class java.util.ListResourceBundle extends java.util.ResourceBundle
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>ListResourceBundle</code> 是 <code>ResourceBundle</code> 的一个抽象类，用于管理方便而又易于使用的列表中的语言环境资源。有关资源包的常规信息，请参阅 <code>ResourceBundle</code>。

 <P>
子类必须重写 <code>getContents</code> 并提供一个数组，其中数组中的每个项都是一个对象对。每对的第一个元素是键，该键必须是一个 <code>String</code>，并且第二个元素是和该键相关联的值。

 <p>
下面的<a name="sample">示例</a>显示了具有基本名称 "MyResources" 的资源包系列的两个成员。"MyResources" 是资源包系列的默认成员，"MyResources_fr" 是 French 成员。这些成员是基于 <code>ListResourceBundle</code>（一个相关的<a href="PropertyResourceBundle.html#sample">示例</a>显示了如何把一个资源包添加到基于属性文件的此系列）。此示例中的键形式为 "s1" 等。实际的键完全取决于您的选择，只要它们和程序中用于从资源包中获取对象的键相同。键区分大小写。
 <blockquote>
 <pre>
 
public class MyResources extends ListResourceBundle {
     protected Object[][] getContents() {
         return new Object[][] = {
     // LOCALIZE THIS
         {"s1", "The disk \"{1}\" contains {0}."},  // MessageFormat pattern
         {"s2", "1"},                               // location of {0} in pattern
         {"s3", "My Disk"},                         // sample disk name
         {"s4", "no files"},                        // first ChoiceFormat choice
         {"s5", "one file"},                        // second ChoiceFormat choice
         {"s6", "{0,number} files"},                // third ChoiceFormat choice
         {"s7", "3 Mar 96"},                        // sample date
         {"s8", new Dimension(1,5)}                 // real object, not just string
     // END OF MATERIAL TO LOCALIZE
     };
   }
 }

 public class MyResources_fr extends ListResourceBundle {
     protected Object[][] getContents() {
         return new Object[][] = {
     // LOCALIZE THIS
         {"s1", "Le disque \"{1}\" {0}."},          // MessageFormat pattern
         {"s2", "1"},                               // location of {0} in pattern
         {"s3", "Mon disque"},                      // sample disk name
         {"s4", "ne contient pas de fichiers"},     // first ChoiceFormat choice
         {"s5", "contient un fichier"},             // second ChoiceFormat choice
         {"s6", "contient {0,number} fichiers"},    // third ChoiceFormat choice
         {"s7", "3 mars 1996"},                     // sample date
         {"s8", new Dimension(1,3)}                 // real object, not just string
     // END OF MATERIAL TO LOCALIZE
     };
   }
}
 </pre>
 </blockquote>
 @see ResourceBundle
 @see PropertyResourceBundle
 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.ListResourceBundle()
<!-- END KEY -->
<!-- BEGIN DATA -->
单独的构造方法。（由子类构造方法调用，通常是隐式的）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<java.lang.String> java.util.ListResourceBundle.getKeys()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回包含在此 <code>ResourceBundle</code> 及其父包中的键的 <code>Enumeration</code>。

 @return 包含在此 <code>ResourceBundle</code> 及其父包中的键的 <code>Enumeration</code>。
 @see #keySet()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Set<java.lang.String> java.util.ListResourceBundle.handleKeySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回<em>只</em> 包含在此 <code>ResourceBundle</code> 中的键的 <code>Set</code>。

 @return 只包含在此 <code>ResourceBundle</code> 中的键的 <code>Set</code>
 @since 1.6
 @see #keySet()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract java.lang.Object[][] java.util.ListResourceBundle.getContents()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个数组，其中 <code>Object</code> 数组中的每个项都是一个对象对。每对的第一个元素是键，它必须是 <code>String</code>，第二个元素是与该键关联的值。有关详细信息，请参阅类描述。

@return 表示键-值对的 <code>Object</code> 数组

<!-- END DATA -->
