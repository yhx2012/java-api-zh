<!-- BEGIN KEY -->
public class java.util.Observable extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示模型视图范例中的 observable 对象，或者说“数据”。可将其子类化，表示应用程序想要观察的对象。
 <p>
一个 observable 对象可以有一个或多个观察者。观察者可以是实现了 <tt>Observer</tt> 接口的任意对象。一个 observable 实例改变后，调用 <code>Observable</code> 的 <code>notifyObservers</code> 方法的应用程序会通过调用观察者的 <code>update</code> 方法来通知观察者该实例发生了改变。 
 <p>
未指定发送通知的顺序。Observable 类中所提供的默认实现将按照其注册的重要性顺序来通知 Observers，但是子类可能改变此顺序，从而使用非固定顺序在单独的线程上发送通知，或者也可能保证其子类遵从其所选择的顺序。
 <p>
注意，此通知机制与线程无关，并且与 <tt>Object</tt> 类的 <tt>wait</tt> 和 <tt>notify</tt> 机制完全独立。
 <p>
新创建一个 observable 对象时，其观察者集是空的。当且仅当 <tt>equals</tt> 方法为两个观察者返回 true 时，才认为它们是相同的。

@author  Chris Warth
@version 1.38, 01/12/04
@see     java.util.Observable#notifyObservers()
@see     java.util.Observable#notifyObservers(java.lang.Object)
@see     java.util.Observer
@see     java.util.Observer#update(java.util.Observable, java.lang.Object)
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Observable()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个带有零个观察者的 Observable。
<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.Observable.addObserver(Observer o)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果观察者与集合中已有的观察者不同，则向对象的观察者集中添加此观察者。未指定向多个观察者发送通知的顺序。请参阅该类的注释。

@param   o 要添加的观察者。
@throws NullPointerException  如果参数 o 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.Observable.deleteObserver(Observer o)
<!-- END KEY -->
<!-- BEGIN DATA -->
从对象的观察者集合中删除某个观察者。向此方法传递 <CODE>null</CODE> 将使其无效。
@param   o   要删除的观察者。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.Observable.notifyObservers()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>hasChanged</code> 方法指示对象已改变，则通知其所有观察者，并调用 <code>clearChanged</code> 方法来指示此对象不再改变。 
<p>
每个观察者都有其 <code>update</code> 方法，其调用参数有两个：observable 对象和 <code>null</code>。换句话说，此方法等效于：
 <blockquote><tt>notifyObservers(null)</tt></blockquote>

@see     java.util.Observable#clearChanged()
@see     java.util.Observable#hasChanged()
@see     java.util.Observer#update(java.util.Observable, java.lang.Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.Observable.notifyObservers(Object arg)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>hasChanged</code> 方法指示对象已改变，则通知其所有观察者，并调用 <code>clearChanged</code> 方法来指示此对象不再改变。 
 <p>
每个观察者都有其 <code>update</code> 方法，其调用参数有两个：observable 对象和 <code>arg</code> 参数。

@param   arg   任意对象。
@see     java.util.Observable#clearChanged()
@see     java.util.Observable#hasChanged()
@see     java.util.Observer#update(java.util.Observable, java.lang.Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.Observable.deleteObservers()
<!-- END KEY -->
<!-- BEGIN DATA -->
清除观察者列表，使此对象不再有任何观察者。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.util.Observable.setChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->
标记此 <tt>Observable</tt> 对象为已改变的对象；现在 <tt>hasChanged</tt> 方法将返回 <tt>true</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.util.Observable.clearChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示对象不再改变，或者它已对其所有的观察者通知了最近的改变，所以 <tt>hasChanged</tt> 方法将返回 <tt>false</tt>。<code>notifyObservers</code> 方法自动调用此方法。

@see     java.util.Observable#notifyObservers()
@see     java.util.Observable#notifyObservers(java.lang.Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.util.Observable.hasChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试对象是否改变。

@return  当且仅当在此对象上最近调用了 <code>setChanged</code> 方法，而不是 <code>clearChanged</code> 方法时，才返回 <code>true</code>；否则返回 <code>false</code>。
@see     java.util.Observable#clearChanged()
@see     java.util.Observable#setChanged()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.util.Observable.countObservers()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <tt>Observable</tt> 对象的观察者数目。

@return  对象的观察者数目。

<!-- END DATA -->
