<!-- BEGIN KEY -->
public abstract class java.util.AbstractQueue extends java.util.AbstractCollection implements java.util.Queue
<!-- END KEY -->
<!-- BEGIN DATA -->
此类提供某些 {@link Queue} 操作的骨干实现。此类中的实现适用于基本实现<em>不</em> 允许包含 <tt>null</tt> 元素时。{@link #add add}、{@link #remove remove} 和 {@link #element element} 方法分别基于 {@link #offer offer}、{@link #poll poll} 和 {@link #peek peek} 方法，但是它们通过抛出异常而不是返回 <tt>false</tt> 或 <tt>null</tt> 来指示失败。

<p> 扩展此类的 <tt>Queue</tt> 实现至少必须定义一个不允许插入 <tt>null</tt> 元素的 {@link Queue#offer} 方法，该方法以及 {@link Queue#peek}、{@link Queue#poll}、{@link Collection#size} 和 {@link Collection#iterator} 都支持 {@link Iterator#remove} 方法。通常还要重写其他方法。如果无法满足这些要求，那么可以转而考虑为 {@link AbstractCollection} 创建子类。

<p>此类是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。
  
@since 1.5
@author Doug Lea
@param <E> 此 collection 中所保存元素的类型

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.AbstractQueue()
<!-- END KEY -->
<!-- BEGIN DATA -->
子类使用的构造方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.AbstractQueue.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的元素插入到此队列中（如果立即可行且不会违反容量限制），在成功时返回 <tt>true</tt>，如果当前没有可用空间，则抛出 <tt>IllegalStateException</tt>。 

 <p>如果 <tt>offer</tt> 成功，则此实现返回 <tt>true</tt>，否则抛出 <tt>IllegalStateException</tt>。

 @param e 要添加的元素
 @return <tt>true</tt>（根据 {@link Collection#add} 的规定）
 @throws IllegalStateException 如果此时由于容量限制不能添加元素
 @throws ClassCastException 如果指定元素的类不允许将该元素添加到此队列中
 @throws NullPointerException 如果指定元素为 null 并且此队列不允许 null 元素
 @throws IllegalArgumentException 如果此元素的某些属性不允许将该元素添加到此队列中

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.AbstractQueue.remove()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取并移除此队列的头。此方法与 {@link #poll poll} 唯一的不同在于：此队列为空时将抛出一个异常。

<p>除非队列为空，否则此实现返回 <tt>poll</tt> 的结果。

@return  此队列的头
@throws NoSuchElementException 如果此队列为空

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.AbstractQueue.element()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取但不移除此队列的头。此方法与 {@link #peek peek} 唯一的不同在于：此队列为空时将抛出一个异常。

<p>除非队列为空，否则此实现返回 <tt>peek</tt> 的结果。

@return  此队列的头
@throws NoSuchElementException 如果此队列为空

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.AbstractQueue.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除此队列中的所有元素。此调用返回后，队列将为空。
<p>此实现重复调用 {@link #poll poll}，直到它返回 <tt>null</tt> 为止。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.AbstractQueue.addAll(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定 collection 中的所有元素都添加到此队列中。如果试图将某一队列 addAll 到该队列本身中，则会导致 <tt>IllegalArgumentException</tt>。此外，如果正在进行此操作时修改指定的 collection，则此操作的行为是不确定的。

<p>此实现在指定的 collection 上进行迭代，并依次将迭代器返回的每一个元素添加到此队列中。在试图添加某一元素（尤其是 <tt>null</tt> 元素）时如果遇到了运行时异常，则可能导致在抛出相关异常时只成功地添加了某些元素。

 @param c 包含要添加到此队列的元素的 collection
 @return 如果此队列由于调用而发生更改，则返回 <tt>true</tt>
 @throws ClassCastException 如果指定 collection 元素的类不允许将该元素添加到此队列中
 @throws NullPointerException 如果指定 collection 包含一个 null 元素并且此队列不允许 null 元素，或者指定 collection 为 null
 @throws IllegalArgumentException 如果指定 collection 元素的某些属性不允许将该元素添加到此队列中，或者指定 collection 是此队列
 @throws IllegalStateException 如果此时由于插入限制无法添加所有元素 
 @see #add(Object)

<!-- END DATA -->
