<!-- BEGIN KEY -->
public static class java.util.AbstractMap.SimpleEntry extends java.lang.Object implements java.util.Map.Entry, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
维护键和值的 Entry。可以使用 <tt>setValue</tt> 方法更改值。此类简化了构建自定义映射实现的过程。例如，可以使用 <tt>Map.entrySet().toArray</tt> 方法方便地返回 <tt>SimpleEntry</tt> 实例数组。

@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.AbstractMap.SimpleEntry(K key, V value)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个项，它表示从指定键到指定值的映射关系。

@param key 此项所表示的键
@param value 此项所表示的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.AbstractMap.SimpleEntry(java.util.Map.Entry<? extends K, ? extends V> entry)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个项，它表示的映射关系与指定的项相同。

@param entry 要复制的项

<!-- END DATA -->
<!-- BEGIN KEY -->
public K java.util.AbstractMap.SimpleEntry.getKey()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对应于此项的键。

@return 对应于此项的键

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.AbstractMap.SimpleEntry.getValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对应于此项的值。

@return 对应于此项的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.AbstractMap.SimpleEntry.setValue(V value)
<!-- END KEY -->
<!-- BEGIN DATA -->
用指定值替换对应于此项的值。

@param value 要在此项中存储的新值
@return 对应于此项的旧值

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.AbstractMap.SimpleEntry.equals(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较指定对象与此项的相等性。如果给定对象也是一个映射项，并且两个项表示的映射关系相同，则返回 {@code true}。	更确切地讲，如果满足以下条件，则两个项 {@code e1} 和 {@code e2} 表示的映射关系相同：<pre>
(e1.getKey()==null ?
e2.getKey()==null :
e1.getKey().equals(e2.getKey()))
   &amp;&amp;
(e1.getValue()==null ?
e2.getValue()==null :
e1.getValue().equals(e2.getValue()))</pre>
这确保 {@code equals} 方法可在 {@code Map.Entry} 接口的不同实现之间正常工作。

@param o 将与此映射项进行相等性比较的对象
@return 如果指定的对象等于此映射项，则返回 {@code true} 
@see    #hashCode

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.AbstractMap.SimpleEntry.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射项的哈希码值。映射项 {@code e} 的哈希码值定义如下： <pre>
(e.getKey()==null   ?0 : e.getKey().hashCode()) ^
(e.getValue()==null ?0 : e.getValue().hashCode())</pre>
这确保 {@code e1.equals(e2)} 意味着对于任意两个项 {@code e1} 和 {@code e2} 而言，都存在 {@code e1.hashCode()==e2.hashCode()}，正如 {@link Object#hashCode} 常规协定所要求的那样。

@return 此映射项的哈希码值
@see    #equals

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.AbstractMap.SimpleEntry.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射项的 String 表示形式。此实现返回此项的键的字符串表示形式，后跟等号 (&quot;<tt>=</tt>&quot;)，然后是此项的值的字符串表示形式。

@return 此映射项的 String 表示形式

<!-- END DATA -->
