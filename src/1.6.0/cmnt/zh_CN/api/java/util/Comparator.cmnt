<!-- BEGIN KEY -->
public interface java.util.Comparator
<!-- END KEY -->
<!-- BEGIN DATA -->
强行对某个对象 collection 进行<i>整体排序</i> 的比较函数。可以将 Comparator 传递给 sort 方法（如 {@link Collections#sort(List,Comparator) Collections.sort} 或 {@link
 Arrays#sort(Object[],Comparator) Arrays.sort}），从而允许在排序顺序上实现精确控制。还可以使用 Comparator 来控制某些数据结构（如{@link SortedSet 有序 set}或{@link SortedMap 有序映射}）的顺序，或者为那些没有{@link Comparable 自然顺序}的对象 collection 提供排序。<p>

当且仅当对于一组元素 <tt>S</tt> 中的每个 <tt>e1</tt> 和 <tt>e2</tt> 而言，<tt>c.compare(e1, e2)==0</tt> 与 <tt>e1.equals(e2)</tt> 具有相等的布尔值时，Comparator <tt>c</tt> 强行对 <tt>S</tt> 进行的排序才叫做<i>与 equals 一致</i> 的排序。<p>

当使用具有与 equals 不一致的强行排序能力的 Comparator 对有序 set（或有序映射）进行排序时，应该小心谨慎。假定一个带显式 Comparator <tt>c</tt> 的有序 set（或有序映射）与从 set <tt>S</tt> 中抽取出来的元素（或键）一起使用。如果 <tt>c</tt> 强行对 <tt>S</tt> 进行的排序是与 equals 不一致的，那么有序 set（或有序映射）将是行为&ldquo;怪异的&rdquo;。尤其是有序 set（或有序映射）将违背根据 <tt>equals</tt> 所定义的 set（或映射）的常规协定。<p>
 
例如，假定使用 Comparator {@code c} 将满足 {@code (a.equals(b) && c.compare(a, b) != 0)} 的两个元素 {@code a} 和 {@code b} 添加到一个空 {@code TreeSet} 中，则第二个 {@code add} 操作将返回 true（树 set 的大小将会增加），因为从树 set 的角度来看，{@code a} 和 {@code b} 是不相等的，即使这与 {@link Set#add Set.add} 方法的规范相反。<p>

注：通常来说，让 Comparator 也实现 <tt>java.io.Serializable</tt> 是一个好主意，因为它们在可序列化的数据结构（像 {@link TreeSet}、{@link TreeMap}）中可用作排序方法。为了成功地序列化数据结构，Comparator（如果已提供）必须实现 <tt>Serializable</tt>。<p>

在算术上，定义给定 Comparator <tt>c</tt> 对给定对象 set <tt>S</tt> 实施<i>强行排序</i> 的<i>关系式</i> 为：<pre>
       {(x, y) such that c.compare(x, y) &lt;= 0}.
</pre>此整体排序的<i>商 (quotient)</i> 为：<pre>
       {(x, y) such that c.compare(x, y) == 0}.
 </pre>

它直接遵循 <tt>compare</tt> 的协定，商是 <tt>S</tt> 上的<i>等价关系</i>，强行排序是 <tt>S</tt> 上的<i>整体排序</i>。当我们说 <tt>c</tt> 强行对 <tt>S</tt> 的排序是<i>与 equals 一致</i> 的时，意思是说排序的商是对象的 {@link Object#equals(Object) equals(Object)} 方法所定义的等价关系：<pre>
       {(x, y) such that x.equals(y)}. </pre><p>

此接口是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

@param <T> 此 Comparator 可以比较的对象类型

@author  Josh Bloch
@author  Neal Gafter
@version 1.26, 04/21/06
@see Comparable
@see java.io.Serializable
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.Comparator.compare(T o1, T o2)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较用来排序的两个参数。根据第一个参数小于、等于或大于第二个参数分别返回负整数、零或正整数。<p>

在前面的描述中，符号 <tt>sgn(</tt><i>expression</i><tt>)</tt> 表示 <i>signum</i> 数学函数，根据 <i>expression</i> 的值为负数、0 还是正数，该函数分别返回 <tt>-1</tt>、<tt>0</tt> 或 <tt>1</tt>。<p>

实现程序必须确保对于所有的 <tt>x</tt> 和 <tt>y</tt> 而言，都存在 <tt>sgn(compare(x, y)) == -sgn(compare(y, x))</tt>。（这意味着当且仅当 <tt>compare(y, x)</tt> 抛出异常时 <tt>compare(x, y)</tt> 才必须抛出异常。）<p>

实现程序还必须确保关系是可传递的：<tt>((compare(x, y)&gt;0) &amp;&amp; (compare(y, z)&gt;0))</tt> 意味着 <tt>compare(x, z)&gt;0</tt>。<p>

最后，实现程序必须确保 <tt>compare(x, y)==0</tt> 意味着对于所有的 <tt>z</tt> 而言，都存在 <tt>sgn(compare(x, z))==sgn(compare(y, z))</tt>。<p>

虽然这种情况很普遍，但并<i>不</i> 严格要求 <tt>(compare(x, y)==0) == (x.equals(y))</tt>。一般说来，任何违背这个条件的 Comparator 都应该清楚地指出这一事实。推荐的语言是&ldquo;注意：此 Comparator 强行进行与 equals 不一致的排序。&rdquo; 
 
@param o1 要比较的第一个对象。
@param o2 要比较的第二个对象。
@return 根据第一个参数小于、等于或大于第二个参数分别返回负整数、零或正整数。
@throws ClassCastException 如果参数的类型不允许此 Comparator 对它们进行比较。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.Comparator.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 
指示某个其他对象是否&ldquo;等于&rdquo;此 Comparator。此方法必须遵守 {@link Object#equals(Object)} 的常规协定。此外，<i>仅当</i> 指定的对象也是一个 Comparator，并且强行实施与此 Comparator 相同的排序时，此方法才返回 <tt>true</tt>。因此，<code>comp1.equals(comp2)</code> 意味着对于每个对象引用 <tt>o1</tt> 和 <tt>o2</tt> 而言，都存在 <tt>sgn(comp1.compare(o1, o2))==sgn(comp2.compare(o1, o2))</tt>。<p>

注意，<i>不</i> 重写 <tt>Object.equals(Object)</tt> 方法<i>总是</i> 安全的。然而，在某些情况下，重写此方法可以允许程序确定两个不同的 Comparator 是否强行实施了相同的排序，从而提高性能。

@param  obj 要进行比较的引用对象。
@return 仅当指定的对象也是一个 Comparator，并且强行实施与此 Comparator 相同的排序时才返回 <code>true</code>。
@see Object#equals(Object)
@see Object#hashCode()

<!-- END DATA -->
