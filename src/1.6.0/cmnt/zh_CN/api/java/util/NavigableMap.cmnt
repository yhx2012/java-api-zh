<!-- BEGIN KEY -->
public interface java.util.NavigableMap extends java.util.SortedMap
<!-- END KEY -->
<!-- BEGIN DATA -->
扩展的 {@link SortedMap}，具有了针对给定搜索目标返回最接近匹配项的导航方法。方法 {@code lowerEntry}、{@code floorEntry}、{@code ceilingEntry} 和 {@code higherEntry} 分别返回与小于、小于等于、大于等于、大于给定键的键关联的 {@code Map.Entry} 对象，如果不存在这样的键，则返回 {@code null}。类似地，方法 {@code lowerKey}、{@code floorKey}、{@code ceilingKey} 和 {@code higherKey} 只返回关联的键。所有这些方法是为查找条目而不是遍历条目而设计的。

<p>可以按照键的升序或降序访问和遍历 {@code NavigableMap}。{@code descendingMap} 方法返回映射的一个视图，该视图表示的所有关系方法和方向方法都是逆向的。升序操作和视图的性能很可能比降序操作和视图的性能要好。{@code subMap}、{@code headMap} 和 {@code tailMap} 方法与名称相似的 {@code SortedMap} 方法的不同之处在于：可以接受用于描述是否包括（或不包括）下边界和上边界的附加参数。任何 {@code NavigableMap} 的 Submap 必须实现 {@code NavigableMap} 接口。

<p>此外，此接口还定义了 {@code firstEntry}、{@code pollFirstEntry}、{@code lastEntry} 和 {@code pollLastEntry} 方法，它们返回和/或移除最小和最大的映射关系（如果存在），否则返回 {@code null}。

<p>条目返回方法的实现应当返回 {@code Map.Entry} 对，表示产生映射关系时它们的快照，因此通常<em>不</em> 支持可选的 {@code Entry.setValue} 方法。不过要注意的是，可以使用 {@code put} 方法在关联映射中更改映射关系。

<p>{@link #subMap(Object, Object) subMap(K, K)}、{@link #headMap(Object) headMap(K)} 和 {@link #tailMap(Object) tailMap(K)} 方法被指定为返回 {@code SortedMap}，以允许现有 {@code SortedMap} 实现能相容地改进为实现 {@code NavigableMap}，但鼓励此接口的扩展和实现重写这些方法以返回 {@code NavigableMap}。类似地，可以重写 {@link #keySet()} 以返回 {@code NavigableSet}。

<p>此接口是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

@author Doug Lea
@author Josh Bloch
@param <K> 此映射维护的键的类型
@param <V> 被映射的值的类型
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.NavigableMap.lowerEntry(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个键-值映射关系，它与严格小于给定键的最大键关联；如果不存在这样的键，则返回 {@code null}。

@param key 键
@return 最大键小于 {@code key} 的条目；如果不存在这样的键，则返回 {@code null}
@throws ClassCastException 如果指定键不能与映射中的当前键进行比较
@throws NullPointerException 如果指定键为 null 并且此映射不允许 null 键

<!-- END DATA -->
<!-- BEGIN KEY -->
public K java.util.NavigableMap.lowerKey(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回严格小于给定键的最大键；如果不存在这样的键，则返回 {@code null}。

@param key 键
@return 小于 {@code key} 的最大键；如果不存在这样的键，则返回 {@code null}
@throws ClassCastException 如果指定键不能与映射中的当前键进行比较
@throws NullPointerException 如果指定键为 null 并且此映射不允许 null 键

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.NavigableMap.floorEntry(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个键-值映射关系，它与小于等于给定键的最大键关联；如果不存在这样的键，则返回 {@code null}。

@param key 键
@return 最大键小于等于 {@code key} 的条目；如果不存在这样的键，则返回 {@code null}
@throws ClassCastException 如果指定键不能与映射中的当前键进行比较
@throws NullPointerException 如果指定键为 null 并且此映射不允许 null 键

<!-- END DATA -->
<!-- BEGIN KEY -->
public K java.util.NavigableMap.floorKey(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回小于等于给定键的最大键；如果不存在这样的键，则返回 {@code null}。

@param key 键
@return 小于等于 {@code key} 的最大键；如果不存在这样的键，则返回 {@code null}
@throws ClassCastException 如果指定键不能与映射中的当前键进行比较
@throws NullPointerException 如果指定键为 null 并且此映射不允许 null 键

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.NavigableMap.ceilingEntry(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个键-值映射关系，它与大于等于给定键的最小键关联；如果不存在这样的键，则返回 {@code null}。

@param key 键
@return 最小键大于等于 {@code key} 的条目；如果不存在这样的键，则返回 {@code null}
@throws ClassCastException 如果指定键不能与映射中的当前键进行比较
@throws NullPointerException 如果指定键为 null 并且此映射不允许 null 键

<!-- END DATA -->
<!-- BEGIN KEY -->
public K java.util.NavigableMap.ceilingKey(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回大于等于给定键的最小键；如果不存在这样的键，则返回 {@code null}。

@param key 键
@return 大于等于 {@code key} 的最小键；如果不存在这样的键，则返回 {@code null}
@throws ClassCastException 如果指定键不能与映射中的当前键进行比较
@throws NullPointerException 如果指定键为 null 并且此映射不允许 null 键

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.NavigableMap.higherEntry(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个键-值映射关系，它与严格大于给定键的最小键关联；如果不存在这样的键，则返回 {@code null}。

@param key 键
@return 最小键大于 {@code key} 的条目；如果不存在这样的键，则返回 {@code null}
@throws ClassCastException 如果指定键不能与映射中的当前键进行比较
@throws NullPointerException 如果指定键为 null 并且此映射不允许 null 键

<!-- END DATA -->
<!-- BEGIN KEY -->
public K java.util.NavigableMap.higherKey(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回严格大于给定键的最小键；如果不存在这样的键，则返回 {@code null}。

@param key 键
@return 大于 {@code key} 的最小键；如果不存在这样的键，则返回 {@code null}
@throws ClassCastException 如果指定键不能与映射中的当前键进行比较
@throws NullPointerException 如果指定键为 null 并且此映射不允许 null 键

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.NavigableMap.firstEntry()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个与此映射中的最小键关联的键-值映射关系；如果映射为空，则返回 {@code null}。

@return 带有最小键的条目；如果此映射为空，则返回 {@code null}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.NavigableMap.lastEntry()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此映射中的最大键关联的键-值映射关系；如果映射为空，则返回 {@code null}。

@return 带有最大键的条目；如果此映射为空，则返回 {@code null}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.NavigableMap.pollFirstEntry()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除并返回与此映射中的最小键关联的键-值映射关系；如果映射为空，则返回 {@code null}。

@return 此映射中被移除的第一个条目；如果此映射为空，则返回 {@code null}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.NavigableMap.pollLastEntry()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除并返回与此映射中的最大键关联的键-值映射关系；如果映射为空，则返回 {@code null}。

@return 此映射中被移除的最后一个条目；如果此映射为空，则返回 {@code null}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableMap<K, V> java.util.NavigableMap.descendingMap()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射中所包含映射关系的逆序视图。降序映射受此映射的支持，因此对映射的更改将反映在降序映射中，反之亦然。如果在对任一映射的 collection 视图进行迭代的同时修改了任一映射（通过迭代器自己的 {@code remove} 操作除外），则迭代结果是不确定的。

<p>返回映射的顺序等于 <tt>{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())</tt>。表达式 {@code m.descendingMap().descendingMap()} 返回的 {@code m} 视图基本等于 {@code m}。

@return 此映射的逆序视图

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<K> java.util.NavigableMap.navigableKeySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射中所包含键的 {@link NavigableSet} 视图。set 的迭代器按升序返回键。set 受映射支持，因此对映射的更改将反映在 set 中，反之亦然。如果正在对 set 进行迭代的同时修改了映射（通过迭代器自己的 {@code remove} 操作除外），则迭代结果是不确定的。set 支持元素移除，即通过 {@code Iterator.remove}、{@code Set.remove}、{@code removeAll}、{@code retainAll} 和 {@code clear} 操作从映射中移除相应的映射关系。它不支持 {@code add} 或 {@code addAll} 操作。

@return 此映射中键的可导航 set 视图

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<K> java.util.NavigableMap.descendingKeySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射中所包含键的逆序 {@link NavigableSet} 视图。set 的迭代器按降序返回键。set 受映射支持，因此对映射的更改将反映在 set 中，反之亦然。如果正在对 set 进行迭代的同时修改了映射（通过迭代器自己的 {@code remove} 操作除外），则迭代结果是不确定的。set 支持元素移除，即通过 {@code Iterator.remove}、{@code Set.remove}、{@code removeAll}、{@code retainAll} 和 {@code clear} 操作从映射中移除相应的映射关系。它不支持 {@code add} 或 {@code addAll} 操作。

@return 此映射中键的逆序可导航 set 视图

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableMap<K, V> java.util.NavigableMap.subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射的部分视图，其键的范围从 {@code fromKey} 到 {@code toKey}。如果 {@code fromKey} 和 {@code toKey} 相等，则返回的映射为空，除非 {@code fromExclusive} 和 {@code toExclusive} 都为 true。返回的映射受此映射支持，因此返回映射中的更改将反映在此映射中，反之亦然。返回的映射支持此映射支持的所有可选映射操作。

<p>如果试图在返回映射的范围之外插入一个键，或者构造一个任一端点位于其范围之外的子映射，则返回的映射将抛出 {@code IllegalArgumentException}。

@param fromKey 返回映射中键的低端点
@param fromInclusive 如果低端点要包含在返回的视图中，则为 {@code true}
@param toKey 返回映射中键的高端点
@param toInclusive  如果高端点要包含在返回的视图中，则为 {@code true}
@return 此映射的部分视图，其键范围从 {@code fromKey} 到 {@code toKey}
@throws ClassCastException 如果不能使用此映射的比较器（如果映射没有比较器，则使用自然顺序）比较 {@code fromKey} 和 {@code toKey}。如果 {@code fromKey} 或 {@code toKey} 不能与映射中当前键进行比较，则实现可以（但不是必须）抛出此异常。
@throws NullPointerException 如果 {@code fromKey} 或 {@code toKey} 为 null 并且此映射不允许 null 键
@throws IllegalArgumentException 如果 {@code fromKey} 大于 {@code toKey}；如果此映射本身有范围限制，并且 {@code fromKey} 或 {@code toKey} 位于范围的边界之外

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableMap<K, V> java.util.NavigableMap.headMap(K toKey, boolean inclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射的部分视图，其键小于（或等于，如果 {@code inclusive} 为 true）{@code toKey}。返回的映射受此映射支持，因此返回映射中的更改将反映在此映射中，反之亦然。返回的映射支持此映射支持的所有可选映射操作。

<p>如果试图在返回映射的范围之外插入一个键，则返回的映射将抛出 {@code IllegalArgumentException}。

@param toKey 返回映射中键的高端点
@param inclusive 如果高端点要包含在返回的视图中，则为 {@code true} 
@return 此映射的部分视图，其键小于（或等于，如果 {@code inclusive} 为 true）{@code toKey}
@throws ClassCastException 如果 {@code toKey} 与此映射的比较器不兼容（如果映射没有比较器；如果 {@code toKey} 没有实现 {@link Comparable}）。如果 {@code toKey} 不能与映射中的当前键进行比较，则实现可以（但不是必须）抛出此异常。
@throws NullPointerException 如果 {@code toKey} 为 null 并且此映射不允许 null 键
@throws IllegalArgumentException 如果此映射本身有范围限制，并且 {@code toKey} 位于范围的边界之外

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableMap<K, V> java.util.NavigableMap.tailMap(K fromKey, boolean inclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射的部分视图，其键大于（或等于，如果 {@code inclusive} 为 true）{@code fromKey}。返回的映射受此映射支持，因此返回映射中的更改将反映在此映射中，反之亦然。返回的映射支持此映射支持的所有可选映射操作。

<p>如果试图在返回映射的范围之外插入一个键，则返回的映射将抛出 {@code IllegalArgumentException}。

@param fromKey 返回映射中键的低端点
@param inclusive 如果低端点要包含在返回的视图中，则为 {@code true} 
@return 此映射的部分视图，其键大于（或等于，如果 {@code inclusive} 为 true）{@code fromKey}
@throws ClassCastException 如果 {@code fromKey} 与此映射的比较器不兼容（如果映射没有比较器；如果 {@code fromKey} 没有实现 {@link Comparable}）。如果 {@code fromKey} 不能与映射中的当前键进行比较，则实现可以（但不是必须）抛出此异常。
@throws NullPointerException 如果 {@code fromKey} 为 null 并且此映射不允许 null 键
@throws IllegalArgumentException 如果此映射本身有范围限制，并且 {@code fromKey} 位于范围的边界之外

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.SortedMap<K, V> java.util.NavigableMap.subMap(K fromKey, K toKey)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}

<p>等效于 {@code subMap(fromKey, true, toKey, false)}。

@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.SortedMap<K, V> java.util.NavigableMap.headMap(K toKey)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}

<p>等效于 {@code headMap(toKey, false)}。

@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.SortedMap<K, V> java.util.NavigableMap.tailMap(K fromKey)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}

<p>等效于 {@code tailMap(fromKey, true)}。

@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
