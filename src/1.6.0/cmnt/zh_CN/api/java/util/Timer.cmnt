<!-- BEGIN KEY -->
public class java.util.Timer extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
一种工具，线程用其安排以后在后台线程中执行的任务。可安排任务执行一次，或者定期重复执行。

<p>与每个 <tt>Timer</tt> 对象相对应的是单个后台线程，用于顺序地执行所有计时器任务。计时器任务应该迅速完成。如果完成某个计时器任务的时间太长，那么它会“独占”计时器的任务执行线程。因此，这就可能延迟后续任务的执行，而这些任务就可能“堆在一起”，并且在上述不友好的任务最终完成时才能够被快速连续地执行。

<p>对 <tt>Timer</tt> 对象最后的引用完成后，<i>并且</i> 所有未处理的任务都已执行完成后，计时器的任务执行线程会正常终止（并且成为垃圾回收的对象）。但是这可能要很长时间后才发生。默认情况下，任务执行线程并不作为<i>守护线程</i> 来运行，所以它能够阻止应用程序终止。如果调用者想要快速终止计时器的任务执行线程，那么调用者应该调用计时器的 <tt>cancel</tt> 方法。

<p>如果意外终止了计时器的任务执行线程，例如调用了它的 <tt>stop</tt> 方法，那么所有以后对该计时器安排任务的尝试都将导致 <tt>IllegalStateException</tt>，就好像调用了计时器的 <tt>cancel</tt> 方法一样。

<p>此类是线程安全的：多个线程可以共享单个 <tt>Timer</tt> 对象而无需进行外部同步。

<p>此类<i>不</i> 提供实时保证：它使用 <tt>Object.wait(long)</tt> 方法来安排任务。

<p>实现注意事项：此类可扩展到大量同时安排的任务（存在数千个都没有问题）。在内部，它使用二进制堆来表示其任务队列，所以安排任务的开销是 O(log n)，其中 n 是同时安排的任务数。

<p>实现注意事项：所有构造方法都启动计时器线程。

@author  Josh Bloch
@version 1.17, 04/12/04
@see     TimerTask
@see     Object#wait(long)
@since   1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Timer()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新计时器。相关的线程<i>不</i> 作为守护程序运行。

@see Thread
@see #cancel()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Timer(boolean isDaemon)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新计时器，可以指定其相关的线程作为守护程序运行。如果计时器将用于安排重复的“维护活动”，则调用守护线程，在应用程序运行期间必须调用守护线程，但是该操作不应延长程序的生命周期。

@param isDaemon 如果应该将相关的线程作为守护程序运行，则为 true。

@see Thread
@see #cancel()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Timer(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新计时器，其相关的线程具有指定的名称。相关的线程<i>不</i> 作为守护程序运行。

@param name 相关线程的名称。
@throws NullPointerException 如果 name 为 null。
@see Thread#getName()
@see Thread#isDaemon()
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Timer(String name, boolean isDaemon)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新计时器，其相关的线程具有指定的名称，并且可以指定作为守护程序运行。

@param name 相关线程的名称。
@param isDaemon 如果应该将相关的线程作为守护程序运行，则为 true。
@throws NullPointerException 如果 name 为 null。
@see Thread#getName()
@see Thread#isDaemon()
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.Timer.schedule(TimerTask task, long delay)
<!-- END KEY -->
<!-- BEGIN DATA -->
安排在指定延迟后执行指定的任务。

@param task  所要安排的任务。
@param delay 执行任务前的延迟时间，单位是毫秒。
@throws IllegalArgumentException 如果 <tt>delay</tt> 是负数，或者 <tt>delay + System.currentTimeMillis()</tt> 是负数。
@throws IllegalStateException 如果已经安排或取消了任务，或者已经取消计时器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.Timer.schedule(TimerTask task, Date time)
<!-- END KEY -->
<!-- BEGIN DATA -->
安排在指定的时间执行指定的任务。如果此时间已过去，则安排立即执行该任务。

@param task 所要安排的任务。
@param time 执行任务的时间。
@throws IllegalArgumentException 如果 <tt>time.getTime()</tt> 是负数。
@throws IllegalStateException 如果已经安排或取消了任务，已经取消了计时器，或者计时器线程已终止。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.Timer.schedule(TimerTask task, long delay, long period)
<!-- END KEY -->
<!-- BEGIN DATA -->
安排指定的任务从指定的延迟后开始进行重复的<i>固定延迟执行</i>。以近似固定的时间间隔（由指定的周期分隔）进行后续执行。

<p>在固定延迟执行中，根据前一次执行的实际执行时间来安排每次执行。如果由于任何原因（如垃圾回收或其他后台活动）而延迟了某次执行，则后续执行也将被延迟。从长期来看，执行的频率一般要稍慢于指定周期的倒数（假定 <tt>Object.wait(long)</tt> 所依靠的系统时钟是准确的）。

<p>固定延迟执行适用于那些需要“平稳”运行的重复活动。换句话说，它适用于在短期运行中保持频率准确要比在长期运行中更为重要的活动。这包括大多数动画任务，如以固定时间间隔闪烁的光标。这还包括为响应人类活动所执行的固定活动，如在按住键时自动重复输入字符。

@param task  所要安排的任务。
@param delay 执行任务前的延迟时间，单位是毫秒。
@param period 执行各后续任务之间的时间间隔，单位是毫秒。
@throws IllegalArgumentException 如果 <tt>delay</tt> 是负数，或者 <tt>delay + System.currentTimeMillis()</tt> 是负数。
@throws IllegalStateException 如果已经安排或取消了任务，已经取消了计时器，或者计时器线程已终止。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.Timer.schedule(TimerTask task, Date firstTime, long period)
<!-- END KEY -->
<!-- BEGIN DATA -->
安排指定的任务在指定的时间开始进行重复的<i>固定延迟执行</i>。以近似固定的时间间隔（由指定的周期分隔）进行后续执行。

<p>在固定延迟执行中，根据前一次执行的实际执行时间来安排每次执行。如果由于任何原因（如垃圾回收或其他后台活动）而延迟了某次执行，则后续执行也将被延迟。在长期运行中，执行的频率一般要稍慢于指定周期的倒数（假定 <tt>Object.wait(long)</tt> 所依靠的系统时钟是准确的）。

<p>固定延迟执行适用于那些需要“平稳”运行的重复执行活动。换句话说，它适用于在短期运行中保持频率准确要比在长期运行中更为重要的活动。这包括大多数动画任务，如以固定时间间隔闪烁的光标。这还包括为响应人类活动所执行的固定活动，如在按住键时自动重复输入字符。

@param task  所要安排的任务。
@param firstTime 首次执行任务的时间。
@param period 执行各后续任务之间的时间间隔，单位是毫秒。
@throws IllegalArgumentException 如果 <tt>time.getTime()</tt> 是负数。
@throws IllegalStateException 如果已经安排或取消了任务，已经取消了计时器，或者计时器线程已终止。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.Timer.scheduleAtFixedRate(TimerTask task, long delay, long period)
<!-- END KEY -->
<!-- BEGIN DATA -->
安排指定的任务在指定的延迟后开始进行重复的<i>固定速率执行</i>。以近似固定的时间间隔（由指定的周期分隔）进行后续执行。

<p>在固定速率执行中，根据已安排的初始执行时间来安排每次执行。如果由于任何原因（如垃圾回收或其他后台活动）而延迟了某次执行，则将快速连续地出现两次或更多的执行，从而使后续执行能够“追赶上来”。从长远来看，执行的频率将正好是指定周期的倒数（假定 <tt>Object.wait(long)</tt> 所依靠的系统时钟是准确的）。

<p>固定速率执行适用于那些对<i>绝对</i> 时间敏感的重复执行活动，如每小时准点打钟报时，或者在每天的特定时间运行已安排的维护活动。它还适用于那些完成固定次数执行的总计时间很重要的重复活动，如倒计时的计时器，每秒钟滴答一次，共 10 秒钟。最后，固定速率执行适用于安排多个重复执行的计时器任务，这些任务相互之间必须保持同步。

@param task  所要安排的任务。
@param delay 执行任务前的延迟时间，单位是毫秒。
@param period 执行各后续任务之间的时间间隔，单位是毫秒。
@throws IllegalArgumentException 如果 <tt>delay</tt> 是负数，或者 <tt>delay + System.currentTimeMillis()</tt> 是负数。
@throws IllegalStateException 如果已经安排或取消了任务，已经取消了计时器，或者计时器线程已终止。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.Timer.scheduleAtFixedRate(TimerTask task, Date firstTime, long period)
<!-- END KEY -->
<!-- BEGIN DATA -->
安排指定的任务在指定的时间开始进行重复的<i>固定速率执行</i>。以近似固定的时间间隔（由指定的周期分隔）进行后续执行。

<p>在固定速率执行中，相对于已安排的初始执行时间来安排每次执行。如果由于任何原因（如垃圾回收或其他后台活动）而延迟了某次执行，则将快速连续地出现两次或更多次执行，从而使后续执行能够赶上来。从长远来看，执行的频率将正好是指定周期的倒数（假定 <tt>Object.wait(long)</tt> 所依靠的系统时钟是准确的）。

<p>固定速率执行适用于那些对<i>绝对</i> 时间敏感的重复执行活动，如每小时准点打钟报时，或者在每天的特定时间运行已安排的维护活动。它还适用于那些完成固定次数执行的总计时间很重要的重复活动，如倒计时的计时器，每秒钟滴答一次，共 10 秒钟。最后，固定速率执行适用于安排多次重复执行的计时器任务，这些任务相互之间必须保持同步。

@param task 所要安排的任务。
@param firstTime 首次执行任务的时间。
@param period 执行各后续任务之间的时间间隔，单位是毫秒。
@throws IllegalArgumentException 如果 <tt>time.getTime()</tt> 是负数。
@throws IllegalStateException 如果已经安排或取消了任务，已经取消了计时器，或者计时器线程已终止。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.Timer.cancel()
<!-- END KEY -->
<!-- BEGIN DATA -->
终止此计时器，丢弃所有当前已安排的任务。这不会干扰当前正在执行的任务（如果存在）。一旦终止了计时器，那么它的执行线程也会终止，并且无法根据它安排更多的任务。

<p>注意，在此计时器调用的计时器任务的 run 方法内调用此方法，就可以绝对确保正在执行的任务是此计时器所执行的最后一个任务。

<p>可以重复调用此方法；但是第二次和后续调用无效。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.Timer.purge()
<!-- END KEY -->
<!-- BEGIN DATA -->
从此计时器的任务队列中移除所有已取消的任务。<i>调用此方法对计时器的行为没有影响</i>，但是将无法引用队列中已取消的任务。如果没有对这些任务的外部引用，则它们就成为垃圾回收的合格对象。

<p>多数程序无需调用此方法。它设计用于一些罕见的应用程序，这些程序可取消大量的任务。调用此方法要以时间来换取空间：此方法的运行时可能与 n + c log n 呈正比，其中 n 是队列中的任务数，而 c 是取消的任务数。

<p>注意，从此计时器上所安排的任务中调用此方法是允许的。

@return 从队列中移除的任务数。
@since 1.5

<!-- END DATA -->
