<!-- BEGIN KEY -->
public interface java.util.Enumeration
<!-- END KEY -->
<!-- BEGIN DATA -->
实现 Enumeration 接口的对象，它生成一系列元素，一次生成一个。连续调用 <code>nextElement</code> 方法将返回一系列的连续元素。
 <p>
例如，要输出 <tt>Vector&lt;E&gt;</tt> <i>v</i> 的所有元素，可使用以下方法：
 <pre>
   for (Enumeration&lt;E&gt; e = v.elements(); e.hasMoreElements();)
       System.out.println(e.nextElement());</pre>
 <p>
这些方法主要通过向量的元素、哈希表的键以及哈希表中的值进行枚举。枚举也用于将输入流指定到 <code>SequenceInputStream</code> 中。
 <p>
注：此接口的功能与 Iterator 接口的功能是重复的。此外，Iterator 接口添加了一个可选的移除操作，并使用较短的方法名。新的实现应该优先考虑使用 Iterator 接口而不是 Enumeration 接口。

@see     java.util.Iterator
@see     java.io.SequenceInputStream
@see     java.util.Enumeration#nextElement()
@see     java.util.Hashtable
@see     java.util.Hashtable#elements()
@see     java.util.Hashtable#keys()
@see     java.util.Vector
@see     java.util.Vector#elements()

@author  Lee Boynton
@version 1.22, 12/19/03
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.Enumeration.hasMoreElements()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试此枚举是否包含更多的元素。

@return  当且仅当此枚举对象至少还包含一个可提供的元素时，才返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.Enumeration.nextElement()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此枚举对象至少还有一个可提供的元素，则返回此枚举的下一个元素。

@return     此枚举的下一个元素。
@exception  NoSuchElementException  如果没有更多的元素存在。

<!-- END DATA -->
