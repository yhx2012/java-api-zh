<!-- BEGIN KEY -->
public class java.util.Stack extends java.util.Vector
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Stack</code> 类表示后进先出（LIFO）的对象堆栈。它通过五个操作对类 <tt>Vector</tt> 进行了扩展 ，允许将向量视为堆栈。它提供了通常的 <tt>push</tt> 和 <tt>pop</tt> 操作，以及取堆栈顶点的 <tt>peek</tt> 方法、测试堆栈是否为空的 <tt>empty</tt> 方法、在堆栈中查找项并确定到堆栈顶距离的 <tt>search</tt> 方法。
<p>
首次创建堆栈时，它不包含项。 

<p>{@link Deque} 接口及其实现提供了 LIFO 堆栈操作的更完整和更一致的 set，应该优先使用此 set，而非此类。例如：
<pre>   {@code
   Deque<Integer> stack = new ArrayDeque<Integer>();}</pre>

@author  Jonathan Payne
@version 1.30, 11/17/05
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Stack()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个空堆栈。

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.Stack.push(E item)
<!-- END KEY -->
<!-- BEGIN DATA -->
把项压入堆栈顶部。其作用与下面的方法完全相同：
 <blockquote><pre>
 addElement(item)</pre></blockquote>

@param   item   压入堆栈的项。
@return  <code>item</code> 参数。
@see     java.util.Vector#addElement

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized E java.util.Stack.pop()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除堆栈顶部的对象，并作为此函数的值返回该对象。 

@return     堆栈顶部的对象（<tt>Vector</tt> 对象中的最后一项）。
@exception  EmptyStackException  如果堆栈为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized E java.util.Stack.peek()
<!-- END KEY -->
<!-- BEGIN DATA -->
查看堆栈顶部的对象，但不从堆栈中移除它。 

@return     堆栈顶部的对象（<tt>Vector</tt> 对象的最后一项）。
@exception  EmptyStackException  如果堆栈为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.Stack.empty()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试堆栈是否为空。

@return  当且仅当堆栈中不含任何项时返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.util.Stack.search(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对象在堆栈中的位置，以 1 为基数。如果对象 <tt>o</tt> 是堆栈中的一个项，此方法返回距堆栈顶部最近的出现位置到堆栈顶部的距离；堆栈中最顶部项的距离为 <tt>1</tt>。使用 <tt>equals</tt> 方法比较 <tt>o</tt> 与堆栈中的项。

@param   o   目标对象。
@return  对象到堆栈顶部的位置，以 1 为基数；返回值 <code>-1</code> 表示此对象不在堆栈中。

<!-- END DATA -->
