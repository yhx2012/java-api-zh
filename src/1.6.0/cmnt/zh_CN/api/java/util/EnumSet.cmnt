<!-- BEGIN KEY -->
public abstract class java.util.EnumSet extends java.util.AbstractSet implements java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
与枚举类型一起使用的专用 {@link Set} 实现。枚举 set 中所有键都必须来自单个枚举类型，该枚举类型在创建 set 时显式或隐式地指定。枚举 set 在内部表示为位向量。此表示形式非常紧凑且高效。此类的空间和时间性能应该很好，足以用作传统上基于 <tt>int</tt> 的&ldquo;位标志&rdquo;的替换形式，具有高品质、类型安全的优势。如果其参数也是一个枚举 set，则批量操作（如 <tt>containsAll</tt> 和 <tt>retainAll</tt>）也应运行得非常快。

<p>由 <tt>iterator</tt> 方法返回的迭代器按其<i>自然顺序</i> 遍历这些元素（该顺序是声明枚举常量的顺序）。返回的迭代器是<i>弱一致的</i>：它从不抛出 {@link ConcurrentModificationException}，也不一定显示在迭代进行时发生的任何 set 修改的效果。

<p>不允许使用 null 元素。试图插入 null 元素将抛出 {@link NullPointerException}。但是，试图测试是否出现 null 元素或移除 null 元素将不会抛出异常。

<P>像大多数 collection 实现一样，<tt>EnumSet</tt> 是不同步的。如果多个线程同时访问一个枚举 set，并且至少有一个线程修改该 set，则此枚举 set 在外部应该是同步的。这通常是通过对自然封装该枚举 set 的对象执行同步操作来完成的。如果不存在这样的对象，则应该使用 {@link Collections#synchronizedSet} 方法来&ldquo;包装&rdquo;该 set。最好在创建时完成这一操作，以防止意外的非同步访问：

 <pre>
 Set&lt;MyEnum&gt; s = Collections.synchronizedSet(EnumSet.noneOf(MyEnum.class));
 </pre>

<p>实现注意事项：所有基本操作都在固定时间内执行。虽然并不保证，但它们很可能比其 {@link HashSet} 副本更快。如果其参数也是一个枚举 set ，则批量操作会在固定时间内执行。

<p>此类是  <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

@author Josh Bloch
@version 1.10, 05/28/04
@since 1.5
@see EnumMap
@serial exclude

<!-- END DATA -->
<!-- BEGIN KEY -->
final java.lang.Class<E> java.util.EnumSet.elementType
<!-- END KEY -->
<!-- BEGIN DATA -->
此 set 中所有元素的类。

<!-- END DATA -->
<!-- BEGIN KEY -->
final java.lang.Enum[] java.util.EnumSet.universe
<!-- END KEY -->
<!-- BEGIN DATA -->
包含 T 的所有值（为提高性能而进行缓存）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.noneOf(java.lang.Class<E> elementType)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定元素类型的空枚举 set。

@param elementType 此枚举 set 的元素类型的 class 对象
@throws NullPointerException 如果 <tt>elementType</tt> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.allOf(java.lang.Class<E> elementType)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个包含指定元素类型的所有元素的枚举 set。

@param elementType 此枚举 set 的元素类型的 class 对象
@throws NullPointerException 如果 <tt>elementType</tt> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.copyOf(java.util.EnumSet<E> s)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个其元素类型与指定枚举 set 相同的枚举 set，最初包含相同的元素（如果有的话）。

@param s 用于初始化此枚举 set 的枚举 set
@throws NullPointerException 如果 <tt>s</tt> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.copyOf(java.util.Collection<E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个从指定 collection 初始化的枚举 set。如果指定的 collection 是一个 <tt>EnumSet</tt> 实例，则此静态工厂方法的功能与 {@link #copyOf(EnumSet)} 相同。否则，指定的 collection 必须至少包含一个元素（以确定新枚举 set 的元素类型）。

@param c 用于初始化此枚举 set 的 collection
@throws IllegalArgumentException 如果 <tt>c</tt> 不是一个 <tt>EnumSet</tt> 实例，并且不包含元素
@throws NullPointerException 如果 <tt>c</tt> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.complementOf(java.util.EnumSet<E> s)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个其元素类型与指定枚举 set 相同的枚举 set，最初包含指定 set 中所<i>不</i> 包含的此类型的所有元素。

@param s 用其补码初始化此枚举 set 的枚举 set
@throws NullPointerException 如果 <tt>s</tt> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.of(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个最初包含指定元素的枚举 set。

用 1 到 5 个元素重载此方法，从而初始化一个枚举 set。第 6 次重载使用变量参数功能。此重载可能创建一个最初包含任意个元素的枚举 set，但是这样很可能比不使用变量参数的重载运行得慢。

@param e 此 set 最初包含的元素
@throws NullPointerException 如果 <tt>e</tt> 为 null
@return 最初包含指定元素的枚举 set

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.of(E e1, E e2)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个最初包含指定元素的枚举 set。

用 1 到 5 个元素重载此方法，从而初始化一个枚举 set。第 6 次重载使用变量参数功能。此重载可能创建一个最初包含任意个元素的枚举 set，但是这样很可能比不使用变量参数的重载运行得慢。

@param e1 此 set 最初要包含的元素
@param e2 此 set 最初要包含的另一个元素
@throws NullPointerException 如果任意参数为 null
@return 最初包含指定元素的枚举 set

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.of(E e1, E e2, E e3)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个最初包含指定元素的枚举 set。

用 1 到 5 个元素重载此方法，从而初始化一个枚举 set。第 6 次重载使用变量参数功能。此重载可能创建一个最初包含任意个元素的枚举 set，但是这样很可能比不使用变量参数的重载运行得慢。

@param e1 此 set 最初要包含的元素
@param e2 此 set 最初要包含的另一个元素
@param e3 此 set 最初要包含的另一个元素
@throws NullPointerException 如果任意参数为 null
@return 最初包含指定元素的枚举 set

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.of(E e1, E e2, E e3, E e4)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个最初包含指定元素的枚举 set。

用 1 到 5 个元素重载此方法，从而初始化一个枚举 set。第 6 次重载使用变量参数功能。此重载可能创建一个最初包含任意个元素的枚举 set，但是这样很可能比不使用变量参数的重载运行得慢。

@param e1 此 set 最初要包含的元素
@param e2 此 set 最初要包含的另一个元素
@param e3 此 set 最初要包含的另一个元素
@param e4 此 set 最初要包含的另一个元素
@throws NullPointerException 如果任意参数为 null
@return 最初包含指定元素的枚举 set

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.of(E e1, E e2, E e3, E e4, E e5)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个最初包含指定元素的枚举 set。

用 1 到 5 个元素重载此方法，从而初始化一个枚举 set。第 6 次重载使用变量参数功能。此重载可能创建一个最初包含任意个元素的枚举 set，但是这样很可能比不使用变量参数的重载运行得慢。

@param e1 此 set 最初要包含的元素
@param e2 此 set 最初要包含的另一个元素
@param e3 此 set 最初要包含的另一个元素
@param e4 此 set 最初要包含的另一个元素
@param e5 此 set 最初要包含的另一个元素
@throws NullPointerException 如果任意参数为 null
@return 最初包含指定元素的枚举 set

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.of(E first, E[] rest)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个最初包含指定元素的枚举 set。此工厂方法的参数列表使用变量参数功能，该方法可以创建一个最初包含任意个元素的枚举 set，但是这样很可能比不使用变量参数的重载运行得慢。

@param first 此 set 最初要包含的元素
@param rest 此 set 最初要包含的其余元素
@throws NullPointerException 如果任意参数为 null，或 <tt>rest</tt> 为 null
@return 最初包含指定元素的枚举 set

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.range(E from, E to)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个最初包含由两个指定端点所定义范围内的所有元素的枚举 set。返回的 set 将包含端点本身，这两个端点可能相同，但顺序不能颠倒。

@param from 该范围中的第一个元素
@param to 妨碍范围中的最后一个元素
@throws NullPointerException 如果 <tt>first</tt> 或 <tt>last</tt> 为 null
@throws IllegalArgumentException 如果 <tt>first.compareTo(last) &gt; 0</tt>
@return 最初包含由两个指定端点所定义范围内的所有元素的枚举 set

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.EnumSet<E> java.util.EnumSet.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 set 的副本。

@return set 的副本

<!-- END DATA -->


