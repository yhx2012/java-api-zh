<!-- BEGIN KEY -->
public class java.util.zip.ZipOutputStream extends java.util.zip.DeflaterOutputStream implements java.util.zip.ZipConstants
<!-- END KEY -->
<!-- BEGIN DATA -->
此类为以 ZIP 文件格式写入文件实现输出流过滤器。包括对已压缩和未压缩条目的支持。

@author	David Connelly
@version	1.31, 12/19/03

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.zip.ZipOutputStream.STORED
<!-- END KEY -->
<!-- BEGIN DATA -->
用于未压缩 (STORED) 条目的压缩方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.zip.ZipOutputStream.DEFLATED
<!-- END KEY -->
<!-- BEGIN DATA -->
用于已压缩 (DEFLATED) 条目的压缩方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.ZipOutputStream(OutputStream out)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的 ZIP 输出流。
@param out 实际输出流

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipOutputStream.setComment(String comment)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 ZIP 文件注释。
@param comment 注释字符串
@exception IllegalArgumentException 如果指定的 ZIP 文件注释的长度超过 0xFFFF 字节

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipOutputStream.setMethod(int method)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于后续条目的默认压缩方法。只要没有为单个 ZIP 文件条目指定压缩方法，并且其初始设置为 DEFLATED 时，就使用此默认值。
@param method 默认压缩方法
@exception IllegalArgumentException 如果指定的压缩方法无效

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipOutputStream.setLevel(int level)
<!-- END KEY -->
<!-- BEGIN DATA -->
为后续的 DEFLATED 条目设置压缩级别。默认设置是 DEFAULT_COMPRESSION。
@param level 压缩级别 (0-9)
@exception IllegalArgumentException 如果压缩级别无效

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipOutputStream.putNextEntry(ZipEntry e) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
开始写入新的 ZIP 文件条目并将流定位到条目数据的开始处。如果仍处于活动状态，则关闭当前条目。如果没有为条目指定压缩方法，则使用默认的压缩方法；如果没有为条目设置修改时间，则使用当前时间。
@param e 要写入的 ZIP 条目
@exception ZipException 如果发生 ZIP 格式错误
@exception IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipOutputStream.closeEntry() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭当前 ZIP 条目并定位流以写入下一个条目。
@exception ZipException 如果发生 ZIP 格式错误
@exception IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.zip.ZipOutputStream.write(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字节数组写入当前 ZIP 条目数据。在写入所有字节之前，此方法将阻塞。
@param b 要写入的数据
@param off 数据中的初始偏移量
@param len 要写入的字节数
@exception ZipException 如果发生 ZIP 文件错误
@exception IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipOutputStream.finish() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
完成写入 ZIP 输出流的内容，无需关闭底层流。对同一输出流连续应用多个过滤器时使用此方法。
@exception ZipException 如果发生 ZIP 文件错误
@exception IOException 如果发生 I/O 异常

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipOutputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭 ZIP 输出流和正在过滤的流。
@exception ZipException 如果发生 ZIP 文件错误
@exception IOException 如果发生 I/O 错误

<!-- END DATA -->
