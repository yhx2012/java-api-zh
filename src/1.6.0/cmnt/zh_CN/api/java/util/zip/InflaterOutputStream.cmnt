<!-- BEGIN KEY -->
public class java.util.zip.InflaterOutputStream extends java.io.FilterOutputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
为解压缩 &quot;deflate&quot; 压缩格式存储的数据实现输出流过滤器。

@version	1.1
@since	1.6
@author	David R Tribble (david@tribble.com)

@see	InflaterInputStream
@see	DeflaterInputStream
@see	DeflaterOutputStream

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.util.zip.Inflater java.util.zip.InflaterOutputStream.inf
<!-- END KEY -->
<!-- BEGIN DATA -->
此流的解压缩器。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected final byte[] java.util.zip.InflaterOutputStream.buf
<!-- END KEY -->
<!-- BEGIN DATA -->
写入未压缩数据的输出缓冲区。
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.InflaterOutputStream(OutputStream out)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个带有默认解压缩器和缓冲区大小的新输出流。

@param out 要写入未压缩数据的输出流
@throws NullPointerException 如果 {@code out} 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.InflaterOutputStream(OutputStream out, Inflater infl)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个带有指定解压缩器和默认缓冲区大小的新输出流。

@param out 要读入未压缩数据的输出流
@param infl 此流的解压缩器 (&quot;inflater&quot;)
@throws NullPointerException 如果 {@code out} 或 {@code infl} 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.InflaterOutputStream(OutputStream out, Inflater infl, int bufLen)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个带有指定解压缩器和缓冲区大小的新输出流。

@param out 要写入未压缩数据的输出流
@param infl 此流的解压缩器 (&quot;inflater&quot;)
@param bufLen 解压缩缓冲区大小
@throws IllegalArgumentException 如果 {@code bufLen} &lt;= 0
@throws NullPointerException 如果 {@code out} 或 {@code infl} 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.InflaterOutputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将剩余未压缩数据写入输出流并关闭底层输出流。

@throws IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.InflaterOutputStream.flush() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
刷新此输出流，并强制写出挂起的所有缓冲输出字节。

@throws IOException 如果发生 I/O 错误或者此流已经关闭

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.InflaterOutputStream.finish() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
完成将未压缩数据写入输出流的操作，无需关闭底层流。对同一输出流连续应用多个过滤器时使用此方法。

@throws IOException 如果发生 I/O 错误或者此流已经关闭

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.InflaterOutputStream.write(int b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字节写入未压缩输出流。

@param b 一个要解压缩并写入输出流的压缩数据字节
@throws IOException 如果发生 I/O 错误或者此流已经关闭
@throws ZipException 如果发生压缩 (ZIP) 格式错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.InflaterOutputStream.write(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 byte 数组写入未压缩输出流。

@param b 包含要解压缩并写入输出流的压缩数据的缓冲区
@param off {@code b} 中压缩数据的起始偏移量
@param len 要从 {@code b} 中解压缩的字节数
@throws IndexOutOfBoundsException 如果 {@code off} &lt; 0、{@code len} &lt; 0，或者 {@code len} &gt; {@code b.length - off}
@throws IOException 如果发生 I/O 错误或者此流已经关闭
@throws NullPointerException 如果 {@code b} 为 null
@throws ZipException 如果发生压缩 (ZIP) 格式错误

<!-- END DATA -->
