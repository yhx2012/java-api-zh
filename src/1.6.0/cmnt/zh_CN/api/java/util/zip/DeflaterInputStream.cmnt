<!-- BEGIN KEY -->
public class java.util.zip.DeflaterInputStream extends java.io.FilterInputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
为使用 &quot;deflate&quot; 压缩格式压缩数据实现输入流过滤器。

@version	1.1
@since	1.6
@author	David R Tribble (david@tribble.com)

@see	DeflaterOutputStream
@see	InflaterOutputStream
@see	InflaterInputStream

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.util.zip.Deflater java.util.zip.DeflaterInputStream.def
<!-- END KEY -->
<!-- BEGIN DATA -->
此流的压缩器。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected final byte[] java.util.zip.DeflaterInputStream.buf
<!-- END KEY -->
<!-- BEGIN DATA -->
读取压缩数据的输入缓冲区。
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.DeflaterInputStream(InputStream in)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个带有默认压缩器和缓冲区大小的新输入流。

@param in 要读入未压缩数据的输入流
@throws NullPointerException 如果 {@code in} 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.DeflaterInputStream(InputStream in, Deflater defl)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个带有指定压缩器和默认缓冲区大小的新输入流。

@param in 要读入未压缩数据的输入流
@param defl 此流的压缩器 (&quot;deflater&quot;)
@throws NullPointerException 如果 {@code in} 或 {@code defl} 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.DeflaterInputStream(InputStream in, Deflater defl, int bufLen)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个带有指定压缩器和缓冲区大小的新输入流。

@param in 要读入未压缩数据的输入流
@param defl 此流的压缩器 (&quot;deflater&quot;)
@param bufLen 压缩缓冲区大小
@throws IllegalArgumentException 如果 {@code bufLen} &lt;= 0
@throws NullPointerException 如果 {@code in} 或 {@code defl} 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.DeflaterInputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此输入流和它的底层输入流，丢弃挂起的未压缩数据。

@throws IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.DeflaterInputStream.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从输入流读取一个压缩数据的单个字节。在可以读取和压缩某些输入之前，此方法可能发生阻塞。

@return 压缩数据的单个字节；如果已到达未压缩输入流的末尾，则返回 -1
@throws IOException 如果发生 I/O 错误或如果此流已经关闭

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.DeflaterInputStream.read(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将压缩数据读入 byte 数组。在可以读取和压缩某些输入之前，此方法可能发生阻塞。

@param b 要读入数据的缓冲区
@param off {@code b} 中数据的起始偏移量
@param len 要读入 {@code b} 的最大压缩字节数
@return 读取的实际字节数；如果已到达未压缩输入流的末尾，则返回 -1
@throws IndexOutOfBoundsException  如果 {@code len} &gt; {@code b.length - off}
@throws IOException 如果发生 I/O 错误或者此输入流已经关闭

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.zip.DeflaterInputStream.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从输入流中跳过并丢弃数据。在读取和跳过指定数量的字节前，此方法将阻塞。<em>注：</em> 当将 {@code n} 作为 {@code long} 给出时，可以跳过的最大字节数为 {@code Integer.MAX_VALUE}。

@param n 要跳过的字节数
@return 已跳过的实际字节数
@throws IOException 如果发生 I/O 错误或者此流已经关闭

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.DeflaterInputStream.available() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
在到达 EOF 后返回 0；否则始终返回 1。
 <p>
程序不应依靠此方法返回可以不受阻塞地读取的实际字节数。
@return 到达底层输入流的末尾之后返回 0；否则始终返回 1
@throws IOException 如果发生 I/O 错误或者此流已经关闭

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.zip.DeflaterInputStream.markSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
始终返回 {@code false}，因为此输入流不支持 {@link #mark mark()} 和 {@link #reset reset()} 方法。

@return 始终返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.DeflaterInputStream.mark(int limit)
<!-- END KEY -->
<!-- BEGIN DATA -->
<i>不支持此操作</i>。

@param limit 在位置标记无效前可以读取的最大字节数

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.DeflaterInputStream.reset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<i>不支持此操作</i>。

@throws IOException 始终抛出

<!-- END DATA -->
