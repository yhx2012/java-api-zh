<!-- BEGIN KEY -->
public class java.util.zip.DeflaterOutputStream extends java.io.FilterOutputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
此类为使用 &quot;deflate&quot; 压缩格式压缩数据实现输出流过滤器。它还用作其他类型的压缩过滤器（如 GZIPOutputStream）的基础。

@see		Deflater
@version 	1.34, 01/12/04
@author 	David Connelly

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.zip.Deflater java.util.zip.DeflaterOutputStream.def
<!-- END KEY -->
<!-- BEGIN DATA -->
此流的压缩器。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected byte[] java.util.zip.DeflaterOutputStream.buf
<!-- END KEY -->
<!-- BEGIN DATA -->
写入压缩数据的输出缓冲区。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.DeflaterOutputStream(OutputStream out, Deflater def, int size)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定压缩器和缓冲区大小创建一个新输出流。
@param out 输出流
@param def 压缩器 ("deflater")
@param size 输出缓冲区大小
@exception IllegalArgumentException 如果大小为 <= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.DeflaterOutputStream(OutputStream out, Deflater def)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定压缩器和默认缓冲区大小创建一个新输出流。
@param out 输出流
@param def 压缩器 ("deflater")

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.DeflaterOutputStream(OutputStream out)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认压缩器和缓冲区大小创建一个新输出流。
@param out 输出流

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.DeflaterOutputStream.write(int b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字节写入压缩的输出流。在可写入字节前，此方法将阻塞。
@param b 要写入的字节
@exception IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.DeflaterOutputStream.write(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字节数组写入压缩的输出流。在写入所有字节前，此方法将阻塞。
@param b 要写入的数据
@param off 数据的初始偏移量
@param len 数据的长度
@exception IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.DeflaterOutputStream.finish() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
完成将压缩数据写入输出流的操作，无需关闭底层流。对同一输出流相继应用多个过滤器时使用此方法。
@exception IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.DeflaterOutputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将剩余压缩数据写入输出流并关闭底层流。
@exception IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.util.zip.DeflaterOutputStream.deflate() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将下一个压缩数据块写入输出流。
@throws IOException 如果发生 I/O 错误

<!-- END DATA -->
