<!-- BEGIN KEY -->
public class java.util.zip.InflaterInputStream extends java.io.FilterInputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
此类为解压缩 "deflate" 压缩格式的数据实现流过滤器。它还用作其他解压缩过滤器（如 GZIPInputStream）的基础。

@see		Inflater
@version 	1.37, 06/11/04
@author 	David Connelly

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.zip.Inflater java.util.zip.InflaterInputStream.inf
<!-- END KEY -->
<!-- BEGIN DATA -->
流的解压缩器。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected byte[] java.util.zip.InflaterInputStream.buf
<!-- END KEY -->
<!-- BEGIN DATA -->
用于解压缩的输入缓冲区。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.util.zip.InflaterInputStream.len
<!-- END KEY -->
<!-- BEGIN DATA -->
输入缓冲区的长度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.InflaterInputStream(InputStream in, Inflater inf, int size)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定解压缩器和缓冲区大小创建一个新输入流。
@param in 输入流
@param inf 解压缩器 ("inflater")
@param size 输入缓冲区大小
@exception IllegalArgumentException 如果大小为 <= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.InflaterInputStream(InputStream in, Inflater inf)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个带有指定解压缩器和默认缓冲区大小的新输入流。
@param in 输入流
@param inf 解压缩器 ("inflater")

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.InflaterInputStream(InputStream in)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认解压缩器和缓冲区大小创建一个新输入流。
@param in 输入流

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.InflaterInputStream.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取未压缩数据的字节。在足够的输入可用于解压缩之前，此方法将阻塞。
@return 如果到达已压缩输入的结尾，则返回所读取的字节
@exception IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.InflaterInputStream.read(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将未压缩数据读入字节数组。如果 <code>len</code> 不为零，则在可以解压缩某些输入之前，此方法将处于阻塞状态；否则不读取字节并且返回 <code>0</code>。
@param b 读入数据的缓冲区
@param off 目标数组 <code>b</code> 中的初始偏移量
@param len 读取字节的最大数
@return 读取字节的实际数；或者，如果到达已压缩输入的结尾或需要预置字典，则返回 -1
@exception  NullPointerException 如果 <code>b</code> 为 <code>null</code>。
@exception  IndexOutOfBoundsException 如果 <code>off</code> 为负，或者 <code>len</code> 为负或 <code>len</code> 大于 <code>b.length - off</code>
@exception ZipException 如果发生 ZIP 格式错误
@exception IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.InflaterInputStream.available() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
在到达 EOF 后返回 0；否则始终返回 1。
 <p>
程序不应依靠此方法返回无阻塞读取的实际字节数。

@return     在到达 EOF 之前返回 1；在到达 EOF 之后返回 0。
@exception  IOException  如果发生 I/O 错误。
 

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.zip.InflaterInputStream.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
跳过指定的未压缩数据的字节数。
@param n 要跳过的字节数
@return 实际跳过的字节数。
@exception IOException 如果发生 I/O 错误
@exception IllegalArgumentException 如果 n < 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.InflaterInputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此输入流并释放与该流关联的所有系统资源。
@exception IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.util.zip.InflaterInputStream.fill() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用更多要解压缩的数据填充输入缓冲区。
@exception IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.zip.InflaterInputStream.markSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试此输入流是否支持 <code>mark</code> 和 <code>reset</code> 方法。<code>InflaterInputStream</code> 的 <code>markSupported</code> 方法返回 <code>false</code>。

@return  一个 <code>boolean</code> 值，指示此流类型是否支持 <code>mark</code> 和 <code>reset</code> 方法。
@see     java.io.InputStream#mark(int)
@see     java.io.InputStream#reset()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.zip.InflaterInputStream.mark(int readlimit)
<!-- END KEY -->
<!-- BEGIN DATA -->
标记此输入流中的当前位置。

<p> <code>InflaterInputStream</code> 的 <code>mark</code> 方法不执行任何操作。

@param readlimit 在标记位置变为无效前可以读取字节的最大限制。
@see     java.io.InputStream#reset()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.zip.InflaterInputStream.reset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此流重新定位到对此输入流最后调用 <code>mark</code> 方法时的位置。

<p> 除了抛出 <code>IOException</code> 之外，类 <code>InflaterInputStream</code> 的方法 <code>reset</code> 不执行任何操作。

@exception IOException 如果调用此方法。
@see     java.io.InputStream#mark(int)
@see     java.io.IOException

<!-- END DATA -->
