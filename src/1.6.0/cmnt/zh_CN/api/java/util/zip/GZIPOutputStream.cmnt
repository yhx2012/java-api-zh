<!-- BEGIN KEY -->
public class java.util.zip.GZIPOutputStream extends java.util.zip.DeflaterOutputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
此类为使用 GZIP 文件格式写入压缩数据实现流过滤器。
@version 	1.22, 12/19/03
@author 	David Connelly


<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.zip.CRC32 java.util.zip.GZIPOutputStream.crc
<!-- END KEY -->
<!-- BEGIN DATA -->
未压缩数据的 CRC-32 。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.GZIPOutputStream(OutputStream out, int size) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定缓冲区大小创建新的输出流。
@param out 输出流
@param size 输出缓冲区大小
@exception IOException 如果发生 I/O 错误。
@exception IllegalArgumentException 如果大小为 <= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.GZIPOutputStream(OutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认缓冲区大小创建新的输出流。
@param out 输出流
@exception IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.zip.GZIPOutputStream.write(byte[] buf, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字节数组写入压缩输出流。在写入所有字节前，此方法将阻塞。
@param buf 要写入的数据
@param off 数据的初始偏移量
@param len 数据的长度
@exception IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.GZIPOutputStream.finish() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
完成将压缩数据写入输出流的操作，无需关闭底层流。对同一输出流相继应用多个过滤器时使用此方法。
@exception IOException 如果发生 I/O 错误

<!-- END DATA -->
