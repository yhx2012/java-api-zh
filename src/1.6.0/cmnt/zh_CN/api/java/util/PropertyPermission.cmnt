<!-- BEGIN KEY -->
public final class java.util.PropertyPermission extends java.security.BasicPermission
<!-- END KEY -->
<!-- BEGIN DATA -->
此类用于属性权限。

 <P>
其名称就是属性名（"java.home"、"os.name"，等等）。命名约定遵守层次结构属性命名约定。另外，名称的末尾可能有一个星号，星号前有一个 "."，用来表示通配符。例如："java.*" 或 "*" 是有效的，而 "java.*" 或 "a*b"则无效。
 <P>
 <P>
将所要授予的动作权限以字符串的形式传递给构造方法，该字符串包含一个零列表或多个由逗号分隔的关键字。可能的关键字有 "read" 和  "write"。其含义定义如下：
<P>
<DL>
  <DT> read
  <DD> 读权限。允许调用 <code>System.getProperty</code>。
  <DT> write
  <DD> 写权限。允许调用 <code>System.setProperty</code>。
</DL>
<P>
处理前会将动作字符串转换为小写字母。
 <P>
授予代码访问某些系统属性的权限前应该小心。例如，授予访问 "java.home" 系统属性的权限就会将有关系统环境（Java 安装目录）的敏感信息给予潜在的恶意代码。另外，授予访问 "user.name" 和 "user.home" 系统属性的权限就会将有关用户环境（用户的帐户名和主目录）的敏感信息给予潜在的恶意代码。

@see java.security.BasicPermission
@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection
@see java.lang.SecurityManager

@version 1.33 03/12/19

@author Roland Schemers 
@since 1.2

@serial exclude

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.util.PropertyPermission.actions
<!-- END KEY -->
<!-- BEGIN DATA -->
动作字符串。

@serial 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.PropertyPermission(String name, String actions)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带指定名称的新 PropertyPermission 对象。其名称就是属性名，并且 <i>actions</i> 包含在该属性上授予的所需动作列表，各动作用逗号分隔。可能的动作有  "read" 和 "write"。

@param name PropertyPermission 的名称。
@param actions 动作字符串。

@throws NullPointerException 如果 <code>name</code> 为 <code>null</code>。
@throws IllegalArgumentException 如果 <code>name</code> 为空或者 <code>actions</code> 无效。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.PropertyPermission.implies(Permission p)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查 PropertyPermission 对象是否“暗指”指定的权限。
<P>
更明确地说，如果此方法满足以下条件，则返回 true：<p>
<ul>
<li> <i>p</i> 是 PropertyPermission 的一个实例，<p>
<li> <i>p</i> 的动作是此对象的动作的一个子集，并且 <p>
<li> 此对象的名称暗指了 <i>p</i> 的名字。例如，"java.*" 暗指 "java.home"。
</ul>
@param p 所要检查的权限。

@return  如果对象暗指了指定的权限，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.PropertyPermission.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查两个 PropertyPermission 对象是否相等。检查 <i>obj</i> 是否为一个 PropertyPermission，并且与此对象具有相同的名称和动作。
<P>
@param obj 要与此对象进行相等性测试的对象。
@return 如果 obj 是一个 PropertyPermission，并且与此 PropertyPermission 对象具有相同的名称和动作，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.PropertyPermission.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对象的哈希码值。所用的哈希码是此权限名的哈希码，也就是 <code>getName().hashCode()</code>，其中 <code>getName</code> 来自 Permission 超类。

@return 对象的哈希码值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.PropertyPermission.getActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回动作的“规范化字符串表示形式”。也就是说，此方法总是以下列顺序返回存在的动作：read, write。例如，如果此 PropertyPermission 对象允许写和读操作，则调用 <code>getActions</code> 将返回字符串 "read,write"。

@return 动作的规范化字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.PermissionCollection java.util.PropertyPermission.newPermissionCollection()
<!-- END KEY -->
<!-- BEGIN DATA -->
用于存储 PropertyPermission 对象的新 PermissionCollection 对象。
 <p>

@return 适合存储 PropertyPermissions 的新 PermissionCollection 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
private synchronized void java.util.PropertyPermission.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
调用 readObject，从流中恢复 PropertyPermission 的状态。

<!-- END DATA -->
<!-- BEGIN KEY -->
private synchronized void java.util.PropertyPermission.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
调用 WriteObject，将 PropertyPermission 的状态保存到流中。动作已序列化，并且超类负责管理名称。

<!-- END DATA -->
