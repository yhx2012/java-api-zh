<!-- BEGIN KEY -->
public class java.util.GregorianCalendar extends java.util.Calendar
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>GregorianCalendar</code> 是 <code>Calendar</code> 的一个具体子类，提供了世界上大多数国家/地区使用的标准日历系统。

<p> <code>GregorianCalendar</code> 是一种混合日历，在单一间断性的支持下同时支持儒略历和格里高利历系统，在默认情况下，它对应格里高利日历创立时的格里高利历日期（某些国家/地区是在 1582 年 10 月 15 日创立，在其他国家/地区要晚一些）。可由调用者通过调用 {@link #setGregorianChange(Date) setGregorianChange()} 来更改起始日期。

 <p>
历史上，在那些首先采用格里高利历的国家/地区中，1582 年 10 月 4 日（儒略历）之后就是 1582 年 10 月 15 日（格里高利历）。此日历正确地模拟了这些变化。在开始格里高利历之前，<code>GregorianCalendar</code> 实现的是儒略历。格里高利历和儒略历之间的唯一区别就是闰年规则。儒略历指定每 4 年就为闰年，而格里高利历则忽略不能被 400 整除的世纪年。

 <p>
<code>GregorianCalendar</code> 可实现<em>预期的</em> 格里高利历和儒略历。也就是说，可以通过在时间上无限地向后或向前外推当前规则来计算日期。因此，对于所有的年份，都可以使用 <code>GregorianCalendar</code> 来生成有意义并且一致的结果。但是，采用现代儒略历规则时，使用 <code>GregorianCalendar</code> 得到的日期只在历史上从公元 4 年 3 月 1 日之后是准确的。在此日期之前，闰年规则的应用没有规则性，在 45 BC 之前，甚至不存在儒略历。

 <p>
在格里高利历创立以前，新年是 3 月 25 日。为了避免混淆，此日历始终使用 1 月 1 日为新年。如果想要格里高利历转换之前并且处于 1 月 1 日和 3 月 24 日之间的日期，则可以进行手动调整。

<p>为 <code>WEEK_OF_YEAR</code> 字段所计算的值的范围从 1 到 53。一年的第一个星期始于 <code>getFirstDayOfWeek()</code> 的最早 7 天，至少包含该年的 <code>getMinimalDaysInFirstWeek()</code> 各天。这取决于 <code>getMinimalDaysInFirstWeek()</code>、<code>getFirstDayOfWeek()</code> 的值以及 1 月 1 日是星期几。一年的第一个星期和下一年的第一个星期之间的各个星期按顺序从 2 到 52 或 53（根据需要）进行编号。

<p>例如，1998 年 1 月 1 日是星期四。如果 <code>getFirstDayOfWeek()</code> 为 <code>MONDAY</code>，并且 <code>getMinimalDaysInFirstWeek()</code> 为 4（这些值反映了 ISO 8601 和很多国家/地区标准），则 1998 年的第一个星期开始于 1997 年 12 月 29 日，结束于 1998 年 1 月 4 日。但是，如果 <code>getFirstDayOfWeek()</code> 为 <code>SUNDAY</code>，那么 1998 年的第一个星期开始于 1998 年 1 月 4 日，结束于 1998 年 1 月 10 日；1998 年头三天是 1997 年第 53 个星期的一部分。

<p>为 <code>WEEK_OF_MONTH</code> 字段所计算的值的范围从 0 到 6。一个月的第一个星期（<code>WEEK_OF_MONTH = 1</code> 的日期）是该月至少连续 <code>getMinimalDaysInFirstWeek()</code> 天中的最早日期，结束于 <code>getFirstDayOfWeek()</code> 的前一天。与一年的第一个星期不同，一个月的第一个星期可能短于 7 天，也不必从 <code>getFirstDayOfWeek()</code> 这一天开始，并且不包括前一个月的日期。在第一个星期之前该月日期的 <code>WEEK_OF_MONTH</code> 为 0。

<p>例如，如果 <code>getFirstDayOfWeek()</code> 为 <code>SUNDAY</code>，<code>getMinimalDaysInFirstWeek()</code> 为 4，那么 1998 年 1 月的第一个星期是从 1 月 4 日星期日到 1 月 10 日星期六。这些天的 <code>WEEK_OF_MONTH</code> 为 1。1 月 1 日星期四到 1 月 3 日星期六的 <code>WEEK_OF_MONTH</code> 为 0。如果 <code>getMinimalDaysInFirstWeek()</code> 变为 3，则 1 月 1 日到 1 月 3 日的 <code>WEEK_OF_MONTH</code> 为 1。

<p><code>clear</code> 方法将日历字段设置为未定义。<code>GregorianCalendar</code> 为每个日历字段使用以下默认值（如果该值未定义）。

 <table cellpadding="0" cellspacing="3" border="0"
	  summary="GregorianCalendar default field values" 
	  style="text-align: left; width: 66%;">
   <tbody>
     <tr>
<th style="vertical-align: top; background-color: rgb(204, 204, 255);
	     text-align: center;">字段<br>
       </th>
<th style="vertical-align: top; background-color: rgb(204, 204, 255);
	     text-align: center;">默认值<br>
       </th>
     </tr>
     <tr>
       <td style="vertical-align: middle;">
		<code>ERA<br></code>
	 </td>
       <td style="vertical-align: middle;">
		<code>AD<br></code>
	 </td>
     </tr>
     <tr>
       <td style="vertical-align: middle; background-color: rgb(238, 238, 255);">
		<code>YEAR<br></code>
	 </td>
       <td style="vertical-align: middle; background-color: rgb(238, 238, 255);">
		<code>1970<br></code>
	 </td>
     </tr>
     <tr>
       <td style="vertical-align: middle;">
		<code>MONTH<br></code>
	 </td>
       <td style="vertical-align: middle;">
		<code>JANUARY<br></code>
	 </td>
     </tr>
     <tr>
       <td style="vertical-align: top; background-color: rgb(238, 238, 255);">
		<code>DAY_OF_MONTH<br></code>
	 </td>
       <td style="vertical-align: top; background-color: rgb(238, 238, 255);">
		<code>1<br></code>
	 </td>
     </tr>
     <tr>
       <td style="vertical-align: middle;">
		<code>DAY_OF_WEEK<br></code>
	 </td>
       <td style="vertical-align: middle;">
		<code>一个星期的第一天<br></code>
	 </td>
     </tr>
     <tr>
       <td style="vertical-align: top; background-color: rgb(238, 238, 255);">
		<code>WEEK_OF_MONTH<br></code>
       </td>
       <td style="vertical-align: top; background-color: rgb(238, 238, 255);">
		<code>0<br></code>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;">
		<code>DAY_OF_WEEK_IN_MONTH<br></code>
       </td>
       <td style="vertical-align: top;">
		<code>1<br></code>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: middle; background-color: rgb(238, 238, 255);">
		<code>AM_PM<br></code>
       </td>
       <td style="vertical-align: middle; background-color: rgb(238, 238, 255);">
		<code>AM<br></code>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: middle;">
		<code>HOUR, HOUR_OF_DAY, MINUTE, SECOND, MILLISECOND<br></code>
       </td>
       <td style="vertical-align: middle;">
		<code>0<br></code>
       </td>
     </tr>
   </tbody>
 </table>
<br>默认值不适用于以上未列出的字段。

 <p>
<strong>示例：</strong>
 <blockquote>
 <pre>
 // get the supported ids for GMT-08:00 (Pacific Standard Time)
 String[] ids = TimeZone.getAvailableIDs(-8 * 60 * 60 * 1000);
 // if no ids were returned, something is wrong. get out.
 if (ids.length == 0)
     System.exit(0);

  // begin output
 System.out.println(&quot;Current Time&quot;);

 // create a Pacific Standard Time time zone
 SimpleTimeZone pdt = new SimpleTimeZone(-8 * 60 * 60 * 1000, ids[0]);

 // set up rules for daylight savings time
 pdt.setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2 * 60 * 60 * 1000);
 pdt.setEndRule(Calendar.0ctober, -1, Calendar.SUNDAY, 2 * 60 * 60 * 1000);

 // create a GregorianCalendar with the Pacific Daylight time zone
 // and the current date and time
 Calendar calendar = new GregorianCalendar(pdt);
 Date trialTime = new Date();
 calendar.setTime(trialTime);

 // print out a bunch of interesting things
 System.out.println(&quot;ERA: &quot; + calendar.get(Calendar.ERA));
 System.out.println(&quot;YEAR: &quot; + calendar.get(Calendar.YEAR));
 System.out.println(&quot;MONTH: &quot; + calendar.get(Calendar.MONTH));
 System.out.println(&quot;WEEK_OF_YEAR: &quot; + calendar.get(Calendar.WEEK_OF_YEAR));
 System.out.println(&quot;WEEK_OF_MONTH: &quot; + calendar.get(Calendar.WEEK_OF_MONTH));
 System.out.println(&quot;DATE: &quot; + calendar.get(Calendar.DATE));
 System.out.println(&quot;DAY_OF_MONTH: &quot; + calendar.get(Calendar.DAY_OF_MONTH));
 System.out.println(&quot;DAY_OF_YEAR: &quot; + calendar.get(Calendar.DAY_OF_YEAR));
 System.out.println(&quot;DAY_OF_WEEK: &quot; + calendar.get(Calendar.DAY_OF_WEEK));
 System.out.println(&quot;DAY_OF_WEEK_IN_MONTH: &quot;
                    + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH));
 System.out.println(&quot;AM_PM: &quot; + calendar.get(Calendar.AM_PM));
 System.out.println(&quot;HOUR: &quot; + calendar.get(Calendar.HOUR));
 System.out.println(&quot;HOUR_OF_DAY: &quot; + calendar.get(Calendar.HOUR_OF_DAY));
 System.out.println(&quot;MINUTE: &quot; + calendar.get(Calendar.MINUTE));
 System.out.println(&quot;SECOND: &quot; + calendar.get(Calendar.SECOND));
 System.out.println(&quot;MILLISECOND: &quot; + calendar.get(Calendar.MILLISECOND));
 System.out.println(&quot;ZONE_OFFSET: &quot;
                    + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000)));
 System.out.println(&quot;DST_OFFSET: &quot;
                    + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000)));

 System.out.println(&quot;Current Time, with hour reset to 3&quot;);
 calendar.clear(Calendar.HOUR_OF_DAY); // so doesn't override
 calendar.set(Calendar.HOUR, 3);
 System.out.println(&quot;ERA: &quot; + calendar.get(Calendar.ERA));
 System.out.println(&quot;YEAR: &quot; + calendar.get(Calendar.YEAR));
 System.out.println(&quot;MONTH: &quot; + calendar.get(Calendar.MONTH));
 System.out.println(&quot;WEEK_OF_YEAR: &quot; + calendar.get(Calendar.WEEK_OF_YEAR));
 System.out.println(&quot;WEEK_OF_MONTH: &quot; + calendar.get(Calendar.WEEK_OF_MONTH));
 System.out.println(&quot;DATE: &quot; + calendar.get(Calendar.DATE));
 System.out.println(&quot;DAY_OF_MONTH: &quot; + calendar.get(Calendar.DAY_OF_MONTH));
 System.out.println(&quot;DAY_OF_YEAR: &quot; + calendar.get(Calendar.DAY_OF_YEAR));
 System.out.println(&quot;DAY_OF_WEEK: &quot; + calendar.get(Calendar.DAY_OF_WEEK));
 System.out.println(&quot;DAY_OF_WEEK_IN_MONTH: &quot;
                    + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH));
 System.out.println(&quot;AM_PM: &quot; + calendar.get(Calendar.AM_PM));
 System.out.println(&quot;HOUR: &quot; + calendar.get(Calendar.HOUR));
 System.out.println(&quot;HOUR_OF_DAY: &quot; + calendar.get(Calendar.HOUR_OF_DAY));
 System.out.println(&quot;MINUTE: &quot; + calendar.get(Calendar.MINUTE));
 System.out.println(&quot;SECOND: &quot; + calendar.get(Calendar.SECOND));
 System.out.println(&quot;MILLISECOND: &quot; + calendar.get(Calendar.MILLISECOND));
 System.out.println(&quot;ZONE_OFFSET: &quot;
        + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000))); // in hours
 System.out.println(&quot;DST_OFFSET: &quot;
        + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000))); // in hours
 </pre>
 </blockquote>

@see          TimeZone
@version      1.84
@author David Goldsmith, Mark Davis, Chen-Lieh Huang, Alan Liu
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.GregorianCalendar.BC
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>ERA</code> 字段的值指示公元前（Christ 前）的时期（也称为 BCE）。从 <code>BC</code> 到 <code>AD</code> 各年转换依次是 2 BC、1 BC、1 AD、2 AD……。

@see #ERA

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.GregorianCalendar.AD
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>ERA</code> 字段的值指示公元后（耶稣纪元后）的时期（也称为 CE）。从 <code>BC</code> 到 <code>AD</code> 各年转换依次是 2 BC、1 BC、1 AD、2 AD……。

@see #ERA

<!-- END DATA -->
<!-- BEGIN KEY -->
private long java.util.GregorianCalendar.gregorianCutover
<!-- END KEY -->
<!-- BEGIN DATA -->
格里高利历规则的使用点，从标准新纪元开始以毫秒为单位来测量。默认时间 1582 年 10 月 15 日（格里高利历）00:00:00 UTC 或 -12219292800000L。对此默认值，1582 年 10 月 4 日（儒略历）之后是 1582 年 10 月 15 日（格里高利历）。这对应于儒略历日期号 2299161。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.GregorianCalendar()
<!-- END KEY -->
<!-- BEGIN DATA -->
在具有默认语言环境的默认时区内使用当前时间构造一个默认的 <code>GregorianCalendar</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.GregorianCalendar(TimeZone zone)
<!-- END KEY -->
<!-- BEGIN DATA -->
在具有默认语言环境的给定时区内构造一个基于当前时间的 <code>GregorianCalendar</code>。

@param zone 给定的时区。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.GregorianCalendar(Locale aLocale)
<!-- END KEY -->
<!-- BEGIN DATA -->
在具有给定语言环境的默认时区内构造一个基于当前时间的 <code>GregorianCalendar</code>。

@param aLocale 给定的语言环境。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.GregorianCalendar(TimeZone zone, Locale aLocale)
<!-- END KEY -->
<!-- BEGIN DATA -->
在具有给定语言环境的给定时区内构造一个基于当前时间的 <code>GregorianCalendar</code>。

@param zone 给定的时区。
@param aLocale 给定的语言环境。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.GregorianCalendar(int year, int month, int dayOfMonth)
<!-- END KEY -->
<!-- BEGIN DATA -->
在具有默认语言环境的默认时区内构造一个带有给定日期设置的 <code>GregorianCalendar</code>。

@param year 用来在日历中设置 <code>YEAR</code> 日历字段的值。
@param month 用来在日历中设置 <code>MONTH</code> 日历字段的值。Month 值是基于 0 的，例如，0 表示 1 月。
@param dayOfMonth 用来在日历中设置 <code>DAY_OF_MONTH</code> 日历字段的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.GregorianCalendar(int year, int month, int dayOfMonth, int hourOfDay, int minute)
<!-- END KEY -->
<!-- BEGIN DATA -->
为具有默认语言环境的默认时区构造一个具有给定日期和时间设置的 <code>GregorianCalendar</code>。

@param year 用来在日历中设置 <code>YEAR</code> 日历字段的值。
@param month 用来在日历中设置 <code>MONTH</code> 日历字段的值。Month 值是基于 0 的，例如，0 表示 1 月。
@param dayOfMonth 用来在日历中设置 <code>DAY_OF_MONTH</code> 日历字段的值。
@param hourOfDay 用来在日历中设置 <code>HOUR_OF_DAY</code> 日历字段的值。
@param minute 用来在日历中设置 <code>MINUTE</code> 日历字段的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.GregorianCalendar(int year, int month, int dayOfMonth, int hourOfDay, int minute, int second)
<!-- END KEY -->
<!-- BEGIN DATA -->
为具有默认语言环境的默认时区构造一个具有给定日期和时间设置的 GregorianCalendar。

@param year 用来在日历中设置 <code>YEAR</code> 日历字段的值。
@param month 用来在日历中设置 <code>MONTH</code> 日历字段的值。Month 值是基于 0 的，例如，0 表示 1 月。
@param dayOfMonth 用来在日历中设置 <code>DAY_OF_MONTH</code> 日历字段的值。
@param hourOfDay 用来在日历中设置 <code>HOUR_OF_DAY</code> 日历字段的值。
@param minute 用来在日历中设置 <code>MINUTE</code> 日历字段的值。
@param second 用来在日历中设置 <code>SECOND</code> 日历字段的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.GregorianCalendar.setGregorianChange(Date date)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>GregorianCalendar</code> 的更改日期。这是发生从儒略历日期切换到格里高利历日期的点。默认时间是 1582 年 10 月 15 日（格里高利历）。在此之前，日期是按照儒略历计算的。
 <p>
要得到纯粹的儒略历日历，可将更改日期设置为 <code>Date(Long.MAX_VALUE)</code>。要得到一个纯粹的格里高利历日历，可将更改日期设置为 <code>Date(Long.MIN_VALUE)</code>。

@param date 给定的格里高利历起始日期。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.util.Date java.util.GregorianCalendar.getGregorianChange()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得格里高利历的更改日期。这是发生从儒略历日期切换到格里高利历日期的点。默认时间是 1582 年 10 月 15 日（格里高利历）。在此之前，日期是按照儒略历计算的。

@return 此 <code>GregorianCalendar</code> 对象的格里高利历起始日期。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.GregorianCalendar.isLeapYear(int year)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定给定的年份是否为闰年。如果给定的年份是闰年，则返回 <code>true</code>。要指定 BC 年份，必须给定 <code>1 - 年份</code>。例如，指定 -3 为 BC 4 年。

@param year 给定的年份。
@return 如果给定的年份为闰年，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.GregorianCalendar.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较此 <code>GregorianCalendar</code> 与指定的 <code>Object</code>。当且仅当参数是一个 <code>GregorianCalendar</code> 对象，并且这个对象表示在相同的 <code>Calendar</code> 参数和格里高利历更改日期下与此对象具有相同的时间值（从 <a href="Calendar.html#Epoch">Epoch</a> 至现在的毫秒偏移量）时，结果为 <code>true</code>。

@param  obj   要与之比较的对象。
@return 如果此对象等于 <code>obj</code>，则返回 <code>true</code>；否则返回 <code>false</code>。
@see Calendar#compareTo(Calendar)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.GregorianCalendar.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
生成此 <code>GregorianCalendar</code> 对象的哈希码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.GregorianCalendar.add(int field, int amount)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据日历规则，将指定的（有符号的）时间量添加到给定的日历字段中。

<p><em>添加规则 1</em>。调用之后的 <code>field</code> 字段的值减去调用之前的 <code>field</code> 字段的值等于 <code>amount</code>，以 <code>field</code> 中发生的任何溢出为模。溢出发生在字段值超出其范围时，结果，下一个更大的字段会递增或递减，字段值被调整回其范围内。</p>

<p><em>添加规则 2</em>。如果期望某一个更小的字段是无变化的，但让它等于以前的值是不可能的，因为在字段 <code>field</code> 发生更改之后，它的最大值和最小值也在发生更改，然后它的值被调整为尽量接近于所期望的值。更小的字段表示一个更小的时间单元。<code>HOUR</code> 是一个比 <code>DAY_OF_MONTH</code> 更小的字段。对于不期望是无变化字段的更小字段，无需进行任何调整。日历系统确定期望是无变化字段的那些字段。</p>

@param field 日历字段。
@param amount 为字段添加的日期或时间量。
@exception IllegalArgumentException 如果 <code>field</code> 为 <code>ZONE_OFFSET</code>、<code>DST_OFFSET</code>，或未知，或者任何日历字段在 non-lenient 模式下具有超出范围的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.GregorianCalendar.roll(int field, boolean up)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定的时间字段上添加或减去（上/下）单个时间单元，不更改更大的字段。 
 <p>
<em>示例</em>：考虑原来设置为 1999 年 12 月 31 日的 <code>GregorianCalendar</code> 。现在调用 {@link #roll(int,boolean) roll(Calendar.MONTH, true)} 将该日历设置为 1999 年 1 月 31 日。<code>YEAR</code> 字段未改变，因为它是一个比 <code>MONTH</code> 更大的字段。</p>

@param up 指出指定日历字段的值是上升还是下降。如果上升了，则使用 <code>true</code>；否则使用 <code>false</code>。
@exception IllegalArgumentException 如果 <code>field</code> 为 <code>ZONE_OFFSET</code>、<code>DST_OFFSET</code>，或未知，或者任何日历字段在 non-lenient 模式下具有超出范围的值。
@see #add(int,int)
@see #set(int,int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.GregorianCalendar.roll(int field, int amount)
<!-- END KEY -->
<!-- BEGIN DATA -->
向指定日历字段添加有符号的时间量，不更改更大的字段。负的波动量表示从字段减去时间量，不更改更大的字段。如果指定的量为 0，则此方法不执行任何操作。

<p>此方法在添加时间量前调用 {@link #complete()}，使得所有的日历字段都标准化。如果任何日历字段在 non-lenient 模式下具有超出范围的值，则抛出 <code>IllegalArgumentException</code>。

 <p>
<em>示例</em>：考虑原来设置为 1999 年 8 月 31 日的 <code>GregorianCalendar</code> 。现在调用 <code>roll(Calendar.MONTH, 8)</code> 将该日历设置为 <strong>1999</strong> 年 4 月 30 日。如果使用 <code>GregorianCalendar</code>，则 4 月份的 <code>DAY_OF_MONTH</code> 字段不可能为 31。将 <code>DAY_OF_MONTH</code> 设置为最可能接近的值 30。<code>YEAR</code> 字段保持为值 1999，因为它是一个比 <code>MONTH</code> 更大的字段。
 <p>
<em>示例</em>：考虑原来设置为 1999 年 6 月 6 日星期日的 <code>GregorianCalendar</code> 。现在调用 <code>roll(Calendar.WEEK_OF_MONTH, -1)</code> 将该日历设置为 1999 年 6 月 1 日星期二，而调用 <code>add(Calendar.WEEK_OF_MONTH, -1)</code> 则将日历设置为 1999 年 5 月 30 日星期日。这是因为上升和下降规则施加了其他的约束：<code>WEEK_OF_MONTH</code> 改变时 <code>MONTH</code> 必须不变。根据添加规则 1，所得日期必定在 6 月 1 日星期二和 6 月 5 日星期六之间。根据添加规则 2，<code>DAY_OF_WEEK</code>（在改变 <code>WEEK_OF_MONTH</code> 时它是一个不变量）被设置为 Tuesday，是最接近 Sunday 的可能值（其中星期日是一个星期的第一天）。</p>

@param field 日历字段。
@param amount 添加到 <code>field</code> 的有符号时间量。
@exception IllegalArgumentException 如果 <code>field</code> 为 <code>ZONE_OFFSET</code>、<code>DST_OFFSET</code> 或未知，或者任何日历字段在 non-lenient 模式下具有超出范围的值。
@see #roll(int,boolean)
@see #add(int,int)
@see #set(int,int)
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.GregorianCalendar.getMinimum(int field)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GregorianCalendar</code> 实例的给定日历字段的最小值。考虑到 {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek}、{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek}、{@link #getGregorianChange() getGregorianChange} 和 {@link Calendar#getTimeZone() getTimeZone} 方法的当前值，最小值定义为由 {@link Calendar#get(int) get} 方法为所有可能的时间值所返回的最小值。

@param field 日历字段。
@return 给定日历字段的最小值。
@see #getMaximum(int)
@see #getGreatestMinimum(int)
@see #getLeastMaximum(int)
@see #getActualMinimum(int)
@see #getActualMaximum(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.GregorianCalendar.getMaximum(int field)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GregorianCalendar</code> 实例的给定日历字段的最大值。考虑到 {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek}、{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek}、{@link #getGregorianChange() getGregorianChange} 和 {@link Calendar#getTimeZone() getTimeZone} 方法的当前值，最大值定义为 {@link Calendar#get(int) get} 方法为所有可能的时间值所返回的最大值。

@param field 日历字段。
@return 给定日历字段的最大值。
@see #getMinimum(int)
@see #getGreatestMinimum(int)
@see #getLeastMaximum(int)
@see #getActualMinimum(int)
@see #getActualMaximum(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.GregorianCalendar.getGreatestMinimum(int field)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GregorianCalendar</code> 实例给定日历字段的最高的最小值。考虑到 {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek}、{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek}、{@link #getGregorianChange() getGregorianChange} 和 {@link Calendar#getTimeZone() getTimeZone} 方法的当前值，最高的最小值定义为 {@link #getActualMinimum(int)} 为所有可能的时间值所返回的最大值。

@param field 日历字段。
@return 给定日历字段的最高的最小值。
@see #getMinimum(int)
@see #getMaximum(int)
@see #getLeastMaximum(int)
@see #getActualMinimum(int)
@see #getActualMaximum(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.GregorianCalendar.getLeastMaximum(int field)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GregorianCalendar</code> 实例给定日历字段的最低的最大值。考虑到 {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek}、{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek}、{@link #getGregorianChange() getGregorianChange} 和 {@link Calendar#getTimeZone() getTimeZone} 方法的当前值，最低的最大值定义为 {@link #getActualMaximum(int)} 为所有可能的时间值所返回的最小值。

@param field 日历字段。
@return 给定日历字段的最低的最大值。
@see #getMinimum(int)
@see #getMaximum(int)
@see #getGreatestMinimum(int)
@see #getActualMinimum(int)
@see #getActualMaximum(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.GregorianCalendar.getActualMinimum(int field)
<!-- END KEY -->
<!-- BEGIN DATA -->
考虑到给定的时间值和 {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek}、{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek}、{@link #getGregorianChange() getGregorianChange} 和 {@link Calendar#getTimeZone() getTimeZone} 方法的当前值，返回此日历字段可能具有的最小值。

<p>例如，如果格里高利历的更改日期是 1970 年 1 月 10 日，而此 <code>GregorianCalendar</code> 的日期是 1970 年 1 月 20 日，则 <code>DAY_OF_MONTH</code> 字段的实际最小值是 10，因为按照儒略历，1970 年 1 月 10 日的前一个日期是 1969 年 12 月 27 日。因此，从 1969 年 12 月 28 日到 1970 年 1 月 9 日的日期不存在。

@param field 日历字段。
@return 针对此 <code>GregorianCalendar</code> 时间值的给定字段最小值。
@see #getMinimum(int)
@see #getMaximum(int)
@see #getGreatestMinimum(int)
@see #getLeastMaximum(int)
@see #getActualMaximum(int)
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.GregorianCalendar.getActualMaximum(int field)
<!-- END KEY -->
<!-- BEGIN DATA -->
考虑到给定的时间值和 {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek}、{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek}、{@link #getGregorianChange() getGregorianChange} 和 {@link Calendar#getTimeZone() getTimeZone} 方法的当前值，返回此日历字段可能具有的最大值。例如，如果此实例的日期是 2004 年 2 月 1 日，则 <code>DAY_OF_MONTH</code> 字段的实际最大值是 29，因为 2004 年是闰年；如果此实例的日期是 2005 年 2 月 1 日，则最大值是 28。

@param field 日历字段。
@return 针对此 <code>GregorianCalendar</code> 时间值的给定字段最大值。
@see #getMinimum(int)
@see #getMaximum(int)
@see #getGreatestMinimum(int)
@see #getLeastMaximum(int)
@see #getActualMinimum(int)
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.util.GregorianCalendar.computeFields()
<!-- END KEY -->
<!-- BEGIN DATA -->
将时间值（从 <a
 href="Calendar.html#Epoch">Epoch</a> 至现在的毫秒偏移量）转换为日历字段值。<em>不会</em> 一开始就重新计算时间；要重新计算时间，并重新计算字段，则需要先调用 <code>complete</code> 方法。

@see Calendar#complete

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.util.GregorianCalendar.computeTime()
<!-- END KEY -->
<!-- BEGIN DATA -->
将日历字段值转换为时间值（从 <a href="Calendar.html#Epoch">Epoch</a> 至现在的毫秒偏移量）。

@exception IllegalArgumentException 如果存在任何无效的日历字段。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.GregorianCalendar.readObject(ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
更新内部状态。

<!-- END DATA -->
