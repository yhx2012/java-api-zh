<!-- BEGIN KEY -->
public final class java.util.regex.Matcher extends java.lang.Object implements java.util.regex.MatchResult
<!-- END KEY -->
<!-- BEGIN DATA -->
通过解释 {@link Pattern} 对 {@link java.lang.CharSequence </code>character sequence<code>} 执行匹配操作的引擎。

<p> 通过调用模式的 {@link Pattern#matcher matcher} 方法从模式创建匹配器。创建匹配器后，可以使用它执行三种不同的匹配操作：

 <ul>

<li><p> {@link #matches matches} 方法尝试将整个输入序列与该模式匹配。  </p></li>

<li><p> {@link #lookingAt lookingAt} 尝试将输入序列从头开始与该模式匹配。  </p></li>

<li><p> {@link #find find} 方法扫描输入序列以查找与该模式匹配的下一个子序列。  </p></li>

 </ul>

<p> 每个方法都返回一个表示成功或失败的布尔值。通过查询匹配器的状态可以获取关于成功匹配的更多信息。

<p> 匹配器在其输入的子集（称为<i>区域</i>）中查找匹配项。默认情况下，此区域包含全部的匹配器输入。可通过 {@link #region region} 方法修改区域，通过 {@link #regionStart regionStart} 和 {@link #regionEnd regionEnd} 方法查询区域。区域边界与某些模式构造交互的方式是可以更改的。有关此内容更多的信息，请参阅 {@link #useAnchoringBounds useAnchoringBounds} 和 {@link #useTransparentBounds useTransparentBounds}。

<p> 此类还定义使用新字符串替换匹配子序列的方法，需要时，可以从匹配结果计算出新字符串的内容。可以先后使用 {@link #appendReplacement appendReplacement} 和 {@link #appendTail appendTail} 方法将结果收集到现有的字符串缓冲区，或者使用更加便捷的 {@link #replaceAll replaceAll} 方法创建一个可以在其中替换输入序列中每个匹配子序列的字符串。

<p> 匹配器的显式状态包括最近成功匹配的开始和结束索引。它还包括模式中每个<a
 href="Pattern.html#cg">捕获组</a>捕获的输入子序列的开始和结束索引以及该子序列的总数。出于方便的考虑，还提供了以字符串的形式返回这些已捕获子序列的方法。

<p> 匹配器的显式状态最初是未定义的；在成功匹配导致 {@link IllegalStateException} 抛出之前尝试查询其中的任何部分。每个匹配操作都将重新计算匹配器的显式状态。

<p> 匹配器的隐式状态包括输入字符序列和<i>添加位置</i>，添加位置最初是零，然后由 {@link #appendReplacement appendReplacement} 方法更新。

<p> 可以通过调用匹配器的 {@link #reset()} 方法来显式重置匹配器，如果需要新输入序列，则调用其 {@link #reset(java.lang.CharSequence) reset(CharSequence)} 方法。重置匹配器将放弃其显式状态信息并将添加位置设置为零。

<p> 此类的实例用于多个并发线程是不安全的。</p>


@author       Mike McCloskey
@author	Mark Reinhold
@author	JSR-51 Expert Group
@version 	1.58, 04/06/28
@since 	1.4
@spec         JSR-51

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.regex.Pattern java.util.regex.Matcher.pattern()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由此匹配器解释的模式。

@return  为其创建此匹配器的模式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.regex.MatchResult java.util.regex.Matcher.toMatchResult()
<!-- END KEY -->
<!-- BEGIN DATA -->
作为 {@link MatchResult} 返回此匹配器的匹配状态。该结果不受对此匹配器执行的后续操作的影响。

@return  具有此匹配器状态的 <code>MatchResult</code>。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.regex.Matcher java.util.regex.Matcher.usePattern(Pattern newPattern)
<!-- END KEY -->
<!-- BEGIN DATA -->
更改此 <tt>Matcher</tt> 用于查找匹配项的 <tt>Pattern</tt>。

<p> 此方法可导致匹配器丢失有关最后发生匹配的组的信息。维持了输入中匹配器的位置并且不影响其最后添加的位置。</p>

@param  newPattern 匹配器使用的新模式。
@return  匹配器。
@throws  IllegalArgumentException 如果 newPattern 为 <tt>null</tt>。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.regex.Matcher java.util.regex.Matcher.reset()
<!-- END KEY -->
<!-- BEGIN DATA -->
重置匹配器。

<p> 重置匹配器将放弃其所有显式状态信息并将其添加位置设置为零。匹配器的区域被设置为默认区域，默认区域就是其整个字符序列。此匹配器的区域边界的定位和透明度都不受影响。

@return  匹配器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.regex.Matcher java.util.regex.Matcher.reset(CharSequence input)
<!-- END KEY -->
<!-- BEGIN DATA -->
重置此具有新输入序列的匹配器。

<p> 重置匹配器将放弃其所有显式状态信息并将其添加位置设置为零。匹配器的区域被设置为默认区域，默认区域就是其整个字符序列。此匹配器的区域边界的定位和透明度都不受影响。

@param  input 新的输入字符序列。

@return  匹配器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.regex.Matcher.start()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回以前匹配的初始索引。  </p>

@return  第一个匹配字符的索引。

@throws  IllegalStateException 如果没有尝试任何匹配，或者以前的匹配操作失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.regex.Matcher.start(int group)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引。

<p> <a href="Pattern.html#cg">捕获组</a>是从 1 开始从左到右的索引。组零表示整个模式，因此表达式 <i>m.</i><tt>start(0)</tt> 等效于 <i>m.</i><tt>start()</tt>。  </p>

@param  group 此匹配器模式中捕获组的索引。

@return  组捕获的首个字符的索引；如果匹配成功但组本身没有任何匹配项，则返回 <tt>-1</tt>。

@throws  IllegalStateException 如果没有尝试任何匹配，或者以前的匹配操作失败。

@throws  IndexOutOfBoundsException 如果在给定索引的模式中不存在捕获组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.regex.Matcher.end()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最后匹配字符之后的偏移量。  </p>

@return  最后匹配字符之后的偏移量。

@throws  IllegalStateException 如果没有尝试任何匹配，或者以前的匹配操作失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.regex.Matcher.end(int group)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在以前的匹配操作期间，由给定组所捕获子序列的最后字符之后的偏移量。

<p> <a href="Pattern.html#cg">捕获组</a>是从 1 开始从左到右的索引。组零表示整个模式，因此表达式 <i>m.</i><tt>end(0)</tt> 等效于 <i>m.</i><tt>end()</tt>。  </p>

@param  group 此匹配器模式中捕获组的索引。

@return  组捕获的最后字符之后的偏移量；如果匹配成功但组本身没有任何匹配项，则返回 <tt>-1</tt>。

@throws  IllegalStateException 如果没有尝试任何匹配，或者以前的匹配操作失败。

@throws  IndexOutOfBoundsException 如果在给定索引的模式中不存在捕获组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.regex.Matcher.group()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由以前匹配操作所匹配的输入子序列。

<p> 对于具有输入序列 <i>s</i> 的匹配器 <i>m</i>，表达式 <i>m.</i><tt>group()</tt> 和 <i>s.</i><tt>substring(</tt><i>m.</i><tt>start(),</tt>&nbsp;<i>m.</i><tt>end())</tt> 是等效的。  </p>

<p> 注意，某些模式（例如，<tt>a*</tt>）匹配空字符串。当模式成功匹配输入中的空字符串时，此方法将返回空字符串。  </p>

@return 以前匹配操作所匹配的字符串形式的子序列（可能为空）。

@throws  IllegalStateException 如果没有尝试任何匹配，或者以前的匹配操作失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.regex.Matcher.group(int group)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在以前匹配操作期间由给定组捕获的输入子序列。

<p> 对于匹配器 <i>m</i>、输入序列 <i>s</i> 和组索引 <i>g</i>，表达式 <i>m.</i><tt>group(</tt><i>g</i><tt>)</tt> 和 <i>s.</i><tt>substring(</tt><i>m.</i><tt>start(</tt><i>g</i><tt>),</tt>&#xA0;<i>m.</i><tt>end(</tt><i>g</i><tt>))</tt> 是等效的。  </p>
 
<p> <a href="Pattern.html#cg">捕获组</a>是从 1 开始从左到右的索引。组零表示整个模式，因此表达式 <tt>m.group(0)</tt> 等效于 <tt>m.group()</tt>。
 </p>

<p> 如果该匹配成功了，但指定组未能匹配输入序列的任何部分，则返回 <tt>null</tt>。注意，某些组（例如，<tt>(a*)</tt>）匹配空字符串。当这些的组成功匹配输入中的空字符串时，此方法将返回空字符串。  </p>

@param  group 此匹配器模式中捕获组的索引。

@return  在以前的匹配期间组所捕获的子序列（可能为空）；如果组未能匹配输入的部分，则返回 <tt>null</tt>。

@throws  IllegalStateException 如果没有尝试任何匹配，或者以前的匹配操作失败。

@throws  IndexOutOfBoundsException 如果在给定索引的模式中不存在捕获组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.regex.Matcher.groupCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此匹配器模式中的捕获组数。

<p> 根据惯例，零组表示整个模式。它不包括在此计数中。

<p> 任何小于等于此方法返回值的非负整数保证是此匹配器的有效组索引。  </p>

@return 此匹配器模式中的捕获组数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.regex.Matcher.matches()
<!-- END KEY -->
<!-- BEGIN DATA -->
尝试将整个区域与模式匹配。

<p> 如果匹配成功，则可以通过 <tt>start</tt>、<tt>end</tt> 和 <tt>group</tt> 方法获取更多信息。  </p>

@return  当且仅当整个区域序列匹配此匹配器的模式时才返回 <tt>true</tt>。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.regex.Matcher.find()
<!-- END KEY -->
<!-- BEGIN DATA -->
尝试查找与该模式匹配的输入序列的下一个子序列。

<p> 此方法从匹配器区域的开头开始，如果该方法的前一次调用成功了并且从那时开始匹配器没有被重置，则从以前匹配操作没有匹配的第一个字符开始。

<p> 如果匹配成功，则可以通过 <tt>start</tt>、<tt>end</tt> 和 <tt>group</tt> 方法获取更多信息。  </p>

@return  当且仅当输入序列的子序列匹配此匹配器的模式时才返回 <tt>true</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.regex.Matcher.find(int start)
<!-- END KEY -->
<!-- BEGIN DATA -->
重置此匹配器，然后尝试查找匹配该模式、从指定索引开始的输入序列的下一个子序列。

<p> 如果匹配成功，则可通过 <tt>start</tt>、<tt>end</tt> 和 <tt>group</tt> 方法获取更多信息，而 {@link #find()} 方法的后续调用将从此匹配操作未匹配的第一个字符开始。</p>

@throws  IndexOutOfBoundsException 如果开始点小于零或大于输入序列的长度。

@return  当且仅当从给定索引开始的输入序列的子序列匹配此匹配器的模式时才返回 <tt>true</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.regex.Matcher.lookingAt()
<!-- END KEY -->
<!-- BEGIN DATA -->
尝试将从区域开头开始的输入序列与该模式匹配。

<p> 与 {@link #matches matches} 方法类似，此方法始终从区域的开头开始；与之不同的是，它不需要匹配整个区域。

<p> 如果匹配成功，则可以通过 <tt>start</tt>、<tt>end</tt> 和 <tt>group</tt> 方法获取更多信息。  </p>

@return  当且仅当输入序列的前缀匹配此匹配器的模式时才返回 <tt>true</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.util.regex.Matcher.quoteReplacement(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 <code>String</code> 的字面值替换 <code>String</code>。

此方法将生成一个 <code>String</code>，它将用作 {@link Matcher} 类的 <code>appendReplacement</code> 方法中的字面值替换 <code>s</code>。所产生的 <code>String</code> 将与作为字面值序列的 <code>s</code> 中的字符序列匹配。斜线 ('\') 和美元符号 ('$') 将不具有任何特殊意义。

@param  s 要字面值化的字符串。
@return  字面值字符串替换。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.regex.Matcher java.util.regex.Matcher.appendReplacement(StringBuffer sb, String replacement)
<!-- END KEY -->
<!-- BEGIN DATA -->
实现非终端添加和替换步骤。

<p> 此方法执行以下操作： </p>

 <ol>

<li><p> 它从添加位置开始在输入序列读取字符，并将其添加到给定字符串缓冲区。在读取以前匹配之前的最后字符（即位于索引 {@link #start()}&nbsp;<tt>-</tt>&nbsp;<tt>1</tt> 处的字符）之后，它就会停止。</p></li>

<li><p> 它将给定替换字符串添加到字符串缓冲区。
   </p></li>

<li><p> 它将此匹配器的添加位置设置为最后匹配位置的索引加 1，即 {@link #end()}。
   </p></li>

 </ol>

<p> 替换字符串可能包含到以前匹配期间所捕获的子序列的引用：<tt>$</tt><i>g</i><tt></tt> 每次出现时，都将被 {@link #group(int) group}<tt>(</tt><i>g</i><tt>)</tt> 的计算结果替换。<tt>$</tt> 之后的第一个数始终被视为组引用的一部分。如果后续的数可以形成合法组引用，则将被合并到 g 中。只有数字 '0' 到 '9' 被视为组引用的可能组件。例如，如果第二个组匹配字符串 <tt>"foo"</tt>，则传递替换字符串 <tt>"$2bar"</tt> 将导致 <tt>"foobar"</tt> 被添加到字符串缓冲区。可能将美元符号 (<tt>$</tt>) 作为替换字符串中的字面值（通过前面使用一个反斜线 (<tt>\$</tt>)）包括进来。

<p> 注意，在替换字符串中使用反斜线 (<tt>\</tt>) 和美元符号 (<tt>$</tt>) 可能导致与作为字面值替换字符串时所产生的结果不同。美元符号可视为到如上所述已捕获子序列的引用，反斜线可用于转义替换字符串中的字面值字符。

<p> 此方法设计用于循环以及 {@link #appendTail appendTail} 和 {@link #find find} 方法中。例如，以下代码将 <tt>one dog two dogs in the yard</tt> 写入标准输出流中： </p>

 <blockquote><pre>
 Pattern p = Pattern.compile("cat");
 Matcher m = p.matcher("one cat two cats in the yard");
 StringBuffer sb = new StringBuffer();
 while (m.find()) {
     m.appendReplacement(sb, "dog");
 }
 m.appendTail(sb);
 System.out.println(sb.toString());</pre></blockquote>

@param  sb 目标字符串缓冲区。

@param  replacement 替换字符串。

@return  匹配器。

@throws  IllegalStateException 如果没有尝试任何匹配，或者以前的匹配操作失败。

@throws  IndexOutOfBoundsException 如果替换字符串引用模式中不存在的捕获组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer java.util.regex.Matcher.appendTail(StringBuffer sb)
<!-- END KEY -->
<!-- BEGIN DATA -->
实现终端添加和替换步骤。

<p> 此方法从添加位置开始从输入序列读取字符，并将其添加到给定字符串缓冲区。可以在一次或多次调用 {@link #appendReplacement appendReplacement} 方法后调用它来复制剩余的输入序列。</p>

@param  sb 目标字符串缓冲区。

@return  目标字符串缓冲区。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.regex.Matcher.replaceAll(String replacement)
<!-- END KEY -->
<!-- BEGIN DATA -->
替换模式与给定替换字符串相匹配的输入序列的每个子序列。

<p> 此方法首先重置匹配器。然后，它将扫描输入序列以查找该模式的匹配项。不属于任何匹配的字符被直接添加到结果字符串；在结果中每个匹配都将被替换字符串所替换。替换字符串可能包含到已捕获子序列的引用，如在 {@link #appendReplacement appendReplacement} 方法中一样。

<p> 注意，在替换字符串中使用反斜线 (<tt>\</tt>) 和美元符号 (<tt>$</tt>) 可能导致与作为字面值替换字符串时所产生的结果不同。美元符号可视为到如上所述已捕获子序列的引用，反斜线可用于转义替换字符串中的字面值字符。

<p> 在给定正则表达式 <tt>a*b</tt>、输入 "aabfooaabfooabfoob" 和替换字符串 <tt>"-"</tt> 的情况下，为该表达式针对匹配器调用此方法将产生字符串 <tt>"-foo-foo-foo-"</tt>。

<p> 调用此方法将更改此匹配器的状态。如果在将来的匹配操作中使用该匹配器，则应该首先重置它。  </p>

@param  replacement 替换字符串。

@return  通过使用替换字符串替换每个匹配子序列，并在需要时取代已捕获子序列所构造的字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.regex.Matcher.replaceFirst(String replacement)
<!-- END KEY -->
<!-- BEGIN DATA -->
替换模式与给定替换字符串匹配的输入序列的第一个子序列。

<p> 此方法首先重置匹配器。然后，它将扫描输入序列以查找该模式的匹配项。不是匹配一部分的字符被直接添加到结果字符串；在结果中匹配内容将被替换字符串替换。替换字符串可能包含到已捕获子序列的引用，如在 {@link #appendReplacement appendReplacement} 方法中一样。

<p>注意，在替换字符串中使用反斜线 (<tt>\</tt>) 和美元符号 (<tt>$</tt>) 可能导致与作为字面值替换字符串时所产生的结果不同。美元符号可视为到如上所述已捕获子序列的引用，反斜线可用于转义替换字符串中的字面值字符。

<p> 在给定正则表达式 <tt>dog</tt>、输入 <tt>"zzzdogzzzdogzzz"</tt> 和替换字符串 <tt>"cat"</tt> 的情况下，为该表达式针对匹配器调用此方法将产生字符串 <tt>"zzzcatzzzdogzzz"</tt>。</p>

<p> 调用此方法将更改此匹配器的状态。如果在将来的匹配操作中使用该匹配器，则应该首先重置它。</p>

@param  replacement 替换字符串。
@return  通过使用替换字符串替换第一个匹配子序列，并在需要时取代已捕获子序列所构造的字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.regex.Matcher java.util.regex.Matcher.region(int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此匹配器的区域限制。区域是输入序列的一部分，搜索它可以查找匹配。调用此方法会重置匹配器，然后设置区域，使其从 <code>start</code> 参数指定的索引开始，到 <code>end</code> 参数指定的索引结束。

<p>某些构造（如定位点）可能因所用的透明度和定位不同（参见 {@link #useTransparentBounds useTransparentBounds} 和 {@link #useAnchoringBounds useAnchoringBounds}），从而在区域的边界上或边界四周的行为也有所不同。

@param  start 索引，从此索引（包括在内）开始搜索。
@param  end 到此（包括在内）结束搜索的索引。
@throws IndexOutOfBoundsException 如果开始点或结束点小于零，并且开始点的长度大于输入序列的长度，结束点的长度大于输入序列的长度，或者开始点大于结束点。
@return  匹配器。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.regex.Matcher.regionStart()
<!-- END KEY -->
<!-- BEGIN DATA -->
报告此匹配器区域的开始索引。此匹配器所进行的搜索被限制在 {@link #regionStart regionStart}（包括）和 {@link #regionEnd regionEnd}（不包括）中查找匹配。

@return  匹配器区域的开始点。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.regex.Matcher.regionEnd()
<!-- END KEY -->
<!-- BEGIN DATA -->
报告此匹配器区域的结束索引（不包括）。此匹配器所进行的搜索被限制在 {@link #regionStart regionStart}（包括）和 {@link #regionEnd regionEnd}（不包括）中查找匹配。

@return  匹配器区域的结束点。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.regex.Matcher.hasTransparentBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
查询此匹配器区域边界的透明度。

<p> 如果此匹配器使用<i>透明</i> 边界，则此方法返回 <tt>true</tt>；如果使用<i>不透明</i> 边界，则返回 <tt>false</tt>。

<p> 有关透明和不透明边界的描述，请参阅 {@link #useTransparentBounds useTransparentBounds}。

<p> 默认情况下，匹配器使用不透明区域边界。

@return 当且仅当此匹配器使用透明边界时才返回 <tt>true</tt>；否则返回 <tt>false</tt>。
@see java.util.regex.Matcher#useTransparentBounds(boolean)
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.regex.Matcher java.util.regex.Matcher.useTransparentBounds(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此匹配器区域边界的透明度。

<p> 利用参数 <tt>true</tt> 调用此方法将设置此匹配器使用<i>透明</i> 边界。如果布尔参数为 <tt>false</tt>，则使用<i>不透明</i> 边界。
 
<p> 使用透明边界，此匹配器区域的边界对 lookahead、lookbehind 和边界匹配构造都是透明的。可以使用这些构造查看区域边界的外部，以了解匹配是否正确。

<p> 使用不透明边界，此匹配器区域的边界对 lookahead、lookbehind 和试图查看其外部的边界匹配构造都是不透明的。这些构造无法穿过边界查看，因此不能使用它们匹配区域之外的任何内容。

<p> 默认情况下，匹配器使用不透明边界。

@param  b 指示使用不透明还是透明区域的布尔值。
@return  匹配器。
@see   java.util.regex.Matcher#hasTransparentBounds
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.regex.Matcher.hasAnchoringBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
查询此匹配器区域界限的定位。

<p> 如果此匹配器使用<i>定位</i> 界限，则此方法返回 <tt>true</tt>；否则返回 <tt>false</tt>。

<p> 有关获取定位界限的描述，请参阅 {@link #useAnchoringBounds useAnchoringBounds}。

<p> 默认情况下，匹配器使用定位区域边界。

@return 当且仅当此匹配器使用定位界限时才返回 <tt>true</tt>；否则返回 <tt>false</tt>。
@see java.util.regex.Matcher#useAnchoringBounds(boolean)
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.regex.Matcher java.util.regex.Matcher.useAnchoringBounds(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置匹配器区域界限的定位。

<p> 利用参数 <tt>true</tt> 调用此方法将设置此匹配器使用<i>定位</i> 界限。如果布尔参数为 <tt>false</tt>，则使用<i>非定位</i> 界限。
 
<p> 使用定位界限，此匹配器区域的边界与定位点（如 ^ 和 $）匹配。

<p> 不使用定位界限，此匹配器区域的边界将与定位点（如 ^ 和 $）不匹配。

<p> 默认情况下，匹配器使用定位区域边界。

@param  b 指示是否使用定位界限的布尔值。
@return 匹配器。
@see java.util.regex.Matcher#hasAnchoringBounds
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.regex.Matcher.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回匹配器的字符串表示形式。包含可用于调试的信息的 <code>Matcher</code> 字符串表示形式。未指定确切格式。

@return  匹配器的字符串表示形式。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.regex.Matcher.hitEnd()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>如果匹配器执行的最后匹配操作中搜索引擎遇到输入结尾，则返回 true。

<p>此方法返回 true 时，很多输入都可能更改最后搜索的结果。

@return  当且仅当在最后匹配中遇到输入结尾时才返回 true；否则返回 false。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.regex.Matcher.requireEnd()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>如果很多输入都可以将正匹配更改为负匹配，则返回 true。

<p>如果此方法返回 true，并且找到了匹配，则很多输入可能导致匹配丢失。如果此方法返回 false，并且找到了匹配，则很多输入可能更改匹配，但是匹配不会丢失。如果未找到匹配，则 requireEnd 没有意义。

@return  当且仅当很多输入都可以将正匹配更改为负匹配时才返回 true。
@since 1.5

<!-- END DATA -->
