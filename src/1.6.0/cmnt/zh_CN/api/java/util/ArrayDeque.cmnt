<!-- BEGIN KEY -->
public class java.util.ArrayDeque extends java.util.AbstractCollection implements java.util.Deque, java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link Deque} 接口的大小可变数组的实现。数组双端队列没有容量限制；它们可根据需要增加以支持使用。它们不是线程安全的；在没有外部同步时，它们不支持多个线程的并发访问。禁止 null 元素。此类很可能在用作堆栈时快于 {@link Stack}，在用作队列时快于 {@link LinkedList}。

<p>大多数 <tt>ArrayDeque</tt> 操作以摊销的固定时间运行。异常包括 {@link #remove(Object) remove}、{@link #removeFirstOccurrence removeFirstOccurrence}、{@link #removeLastOccurrence removeLastOccurrence}、{@link #contains contains}、{@link #iterator iterator.remove()} 以及批量操作，它们均以线性时间运行。

<p>此类的 <tt>iterator</tt> 方法返回的迭代器是<i>快速失败</i> 的：如果在创建迭代器后的任意时间通过除迭代器本身的 <tt>remove</tt> 方法之外的任何其他方式修改了双端队列，则迭代器通常将抛出 {@link ConcurrentModificationException}。因此，面对并发修改，迭代器很快就会完全失败，而不是冒着在将来不确定的时刻任意发生不确定行为的风险。

<p>注意，迭代器的快速失败行为不能得到保证，一般来说，存在不同步的并发修改时，不可能作出任何坚决的保证。快速失败迭代器尽最大努力抛出 <tt>ConcurrentModificationException</tt>。因此，编写依赖于此异常的程序是错误的，正确做法是：<i>迭代器的快速失败行为应该仅用于检测 bug。</i>

<p>此类及其迭代器实现 {@link Collection} 和 {@link Iterator} 接口的所有<em>可选</em> 方法。

<p>此类是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

@author  Josh Bloch and Doug Lea
@since   1.6
@param <E> the type of elements held in this collection

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.ArrayDeque()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个初始容量能够容纳 16 个元素的空数组双端队列。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.ArrayDeque(int numElements)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个初始容量能够容纳指定数量的元素的空数组双端队列。

@param numElements  双端队列初始容量的下边界

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.ArrayDeque(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个包含指定 collection 的元素的双端队列，这些元素按 collection 的迭代器返回的顺序排列。（collection 迭代器返回的第一个元素将是第一个元素，或双端队列的<i>开头</i>。）

@param c 要将其元素放入双端队列的 collection 
@throws NullPointerException 如果指定 collection 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.ArrayDeque.addFirst(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素插入此双端队列的开头。

@param e 要添加的元素
@throws NullPointerException 如果指定元素为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.ArrayDeque.addLast(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素插入此双端队列的末尾。

<p>此方法等效于 {@link #add}。

@param e 要添加的元素
@throws NullPointerException 如果指定元素为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.ArrayDeque.offerFirst(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素插入此双端队列的开头。

@param e 要添加的元素
@return <tt>true</tt> （根据 {@link Deque#offerFirst} 的规定）
@throws NullPointerException 如果指定元素为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.ArrayDeque.offerLast(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素插入此双端队列的末尾。

@param e 要添加的元素
@return <tt>true</tt> （根据 {@link Deque#offerLast} 的规定）
@throws NullPointerException 如果指定元素为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.ArrayDeque.removeFirst()
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.ArrayDeque.removeLast()
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.ArrayDeque.getFirst()
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.ArrayDeque.getLast()
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.ArrayDeque.removeFirstOccurrence(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除此双端队列中第一次出现的指定元素（当从头部到尾部遍历双端队列时）。如果此双端队列不包含该元素，则不作更改。更确切地讲，移除第一个满足 <tt>o.equals(e)</tt> 的元素 <tt>e</tt>（如果存在这样的元素）。如果此双端队列包含指定的元素（或者此双端队列由于调用而发生了更改），则返回 <tt>true</tt>。

@param o 要从此双端队列中移除的元素（如果存在）
@return 如果双端队列包含指定元素，则返回 <tt>true</tt> 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.ArrayDeque.removeLastOccurrence(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除此双端队列中最后一次出现的指定元素（当从头部到尾部遍历双端队列时）。如果此双端队列不包含该元素，则不作更改。更确切地讲，移除最后一个满足 <tt>o.equals(e)</tt> 的元素 <tt>e</tt>（如果存在这样的元素）。如果此双端队列包含指定的元素（或者此双端队列由于调用而发生了更改），则返回 <tt>true</tt>。

@param o 要从此双端队列中移除的元素（如果存在）
@return 如果双端队列包含指定元素，则返回 <tt>true</tt> 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.ArrayDeque.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素插入此双端队列的末尾。

<p>此方法等效于 {@link #addLast}。

@param e 要添加的元素
@return <tt>true</tt> （根据 {@link Collection#add} 的规定）
@throws NullPointerException 如果指定元素为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.ArrayDeque.offer(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素插入此双端队列的末尾。

<p>此方法等效于 {@link #offerLast}。

@param e 要添加的元素
@return <tt>true</tt>（根据 {@link Queue#offer} 的规定）
@throws NullPointerException 如果指定元素为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.ArrayDeque.remove()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取并移除此双端队列所表示的队列的头。

此方法与 {@link #poll poll} 的不同之处在于：如果此双端队列为空，它将抛出一个异常。

<p>此方法等效于 {@link #removeFirst}。

@return 此双端队列所表示的队列的头
@throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.ArrayDeque.poll()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取并移除此双端队列所表示的队列的头（换句话说，此双端队列的第一个元素）；如果此双端队列为空，则返回 <tt>null</tt>。

<p>此方法等效于 {@link #pollFirst}。

@return 此双端队列所表示的队列的头；如果此双端队列为空，则返回 <tt>null</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.ArrayDeque.element()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取，但不移除此双端队列所表示的队列的头。此方法与 {@link #peek peek} 的不同之处在于：如果此双端队列为空，它将抛出一个异常。

<p>此方法等效于 {@link #getFirst}。

@return 此双端队列所表示的队列的头
@throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.ArrayDeque.peek()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取，但不移除此双端队列所表示的队列的头；如果此双端队列为空，则返回 <tt>null</tt>。

<p>此方法等效于 {@link #peekFirst}。

@return 此双端队列所表示的队列的头；如果此双端队列为空，则返回 <tt>null</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.ArrayDeque.push(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将元素推入此双端队列所表示的堆栈。换句话说，将元素插入此双端队列的开头。

<p>此方法等效于 {@link #addFirst}。

@param e 要推入的元素
@throws NullPointerException 如果指定元素为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.ArrayDeque.pop()
<!-- END KEY -->
<!-- BEGIN DATA -->
从此双端队列所表示的堆栈中弹出一个元素。换句话说，移除并返回此双端队列第一个元素。

<p>此方法等效于 {@link #removeFirst()}。

@return 此双端队列开头的元素（它是此双端队列所表示的堆栈的顶部）
@throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.ArrayDeque.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此双端队列中的元素数。

@return 此双端队列中的元素数

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.ArrayDeque.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此双端队列未包含任何元素，则返回 <tt>true</tt>。

@return 如果此双端队列未包含任何元素，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.ArrayDeque.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在此双端队列的元素上进行迭代的迭代器。元素将按从第一个（头）到最后一个（尾）的顺序进行排序。这与元素出列（通过连续调用 {@link #remove}）或弹出（通过连续调用 {@link #pop}）的顺序相同。

@return 在此双端队列的元素上进行迭代的迭代器

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.ArrayDeque.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此双端队列包含指定元素，则返回 <tt>true</tt>。更确切地讲，当且仅当此双端队列至少包含一个满足 <tt>o.equals(e)</tt> 的元素 <tt>e</tt> 时，返回 <tt>true</tt>。

@param o 检查是否包含于此双端队列的对象
@return 如果此双端队列包含指定的元素，则返回 <tt>true</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.ArrayDeque.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此双端队列中移除指定元素的单个实例。如果此双端队列不包含该元素，则不作更改。更确切地讲，移除第一个满足 <tt>o.equals(e)</tt> 的元素 <tt>e</tt>（如果存在这样的元素）。如果此双端队列包含指定的元素（或者此双端队列由于调用而发生了更改），则返回 <tt>true</tt>。

<p>此方法等效于 {@link #removeFirstOccurrence}。

@param o 要从此双端队列中移除的元素（如果存在）
@return 如果此双端队列包含指定元素，则返回 <tt>true</tt> 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.ArrayDeque.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
从此双端队列中移除所有元素。在此调用返回之后，该双端队列将为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.util.ArrayDeque.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个以恰当顺序包含此双端队列所有元素的数组（从第一个元素到最后一个元素）。

<p>由于此双端队列不维护对返回数组的任何引用，因而它将是&ldquo;安全的&rdquo;。（换句话说，此方法必须分配一个新的数组）。因此，调用者可以自由地修改返回的数组。

<p>此方法充当了基于数组的 API 与基于 collection 的 API 之间的桥梁。

@return 包含此双端队列中所有元素的数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.util.ArrayDeque.toArray(T[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个以恰当顺序包含此双端队列所有元素的数组（从第一个元素到最后一个元素）；返回数组的运行时类型是指定数组的运行时类型。如果指定的数组能容纳双端队列，则将它返回此处。否则，将分配一个具有指定数组的运行时类型和此双端队列大小的新数组。

<p>如果指定的数组能容纳此双端队列，并有剩余的空间（即数组的元素比此双端队列多），那么将数组中紧接双端队列尾部的元素设置为 <tt>null</tt>。

<p>像 {@link #toArray()} 方法一样，此方法充当基于数组的 API 与基于 collection 的 API 之间的桥梁。更进一步说，此方法允许对输出数组的运行时类型进行精确控制，在某些情况下，还可以用来节省分配开销。

<p>假定 <tt>x</tt> 是只包含字符串的一个已知双端队列。以下代码可用来将该双端队列转储到一个新分配的 <tt>String</tt> 数组：

 <pre>
String[] y = x.toArray(new String[0]);</pre>

注意，<tt>toArray(new Object[0])</tt> 和 <tt>toArray()</tt> 在功能上是相同的。

@param a 要用来存储双端队列元素的数组（如果该数组足够大）；否则，将为此分配一个具有相同运行时类型的新数组
@return 包含此双端队列所有元素的数组
@throws ArrayStoreException 如果指定数组的运行时类型不是此双端队列每个元素的运行时类型的超类型
@throws NullPointerException 如果指定的数组为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.ArrayDeque<E> java.util.ArrayDeque.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此双端队列的副本。

@return 此双端队列的副本

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.ArrayDeque.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此双端队列反序列化。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.ArrayDeque.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此双端队列序列化。

@serialData 双端队列的当前大小 (<tt>int</tt>)，按从前到后的顺序紧跟其所有元素（一个对象引用一个）。

<!-- END DATA -->
