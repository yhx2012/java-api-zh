<!-- BEGIN KEY -->
public class java.util.PropertyResourceBundle extends java.util.ResourceBundle
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>PropertyResourceBundle</code> 是 <code>ResourceBundle</code> 的一个具体子类，它使用属性文件中的静态字符串集来管理语言环境资源。有关资源包的更多信息，请参阅 {@link ResourceBundle ResourceBundle}。

 <p>
与其他资源包类型不同，不能为 <code>PropertyResourceBundle</code> 创建子类。相反，要提供含有资源数据的属性文件。<code>ResourceBundle.getBundle</code> 将自动查找合适的属性文件并创建引用该文件的 <code>PropertyResourceBundle</code>。有关搜索和实例化策略的完整描述，请参阅 {@link ResourceBundle#getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader) ResourceBundle.getBundle}。

 <p>
下面的<a name="sample">示例</a>显示了资源包系列中具有基本名称 "MyResources" 的成员。文本定义了包 "MyResources_de"，这是该包系列中的德语成员。该成员基于 <code>PropertyResourceBundle</code>，因此文本就是文件 "MyResources_de.properties" 的内容（一个相关的 <a href="ListResourceBundle.html#sample">示例</a>显示了如何将包添加到该系列中，该系列作为 <code>ListResourceBundle</code> 的子类来实现）。本示例的键形式为 "s1" 等等。实际的键完全取决于您的选择，只要它们与在程序中使用的、用于从包中获取对象的键相同即可。键是区分大小写的。
 <blockquote>
 <pre>
 # MessageFormat pattern
 s1=Die Platte \"{1}\" enth&auml;lt {0}.

 # location of {0} in pattern
 s2=1

 # sample disk name
 s3=Meine Platte

 # first ChoiceFormat choice
 s4=keine Dateien

 # second ChoiceFormat choice
 s5=eine Datei

 # third ChoiceFormat choice
 s6={0,number} Dateien

 # sample date
 s7=3. M&auml;rz 1996
 </pre>
 </blockquote>

 <p>
<strong>注：</strong>可根据 InputStream 或 Reader 构造 PropertyResourceBundle，它表示一个属性文件。根据 InputStream 构造一个 PropertyResourceBundle 实例要求输入流必须使用 ISO-8859-1 编码。在这种情况下，不能使用 ISO-8859-1 编码表示的字符必须用 <a href="http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#3.3">Unicode 转义</a>表示，而其他带有 Reader 的构造方法没有该限制。

@see ResourceBundle
@see ListResourceBundle
@see Properties
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.PropertyResourceBundle(InputStream stream) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 {@link java.io.InputStream InputStream} 创建属性资源包。使用此构造方法读取的属性文件必须使用 ISO-8859-1。

 @param stream 一个 InputStream，表示要从其进行读取的属性文件。
 @throws IOException 如果发生 I/O 错误
 @throws NullPointerException 如果 <code>stream</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.PropertyResourceBundle(Reader reader) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 {@link java.io.Reader Reader} 创建属性资源包。与 {@link #PropertyResourceBundle(java.io.InputStream) PropertyResourceBundle(InputStream)} 构造方法不同，关于输入属性文件的编码没有限制。

 @param reader 一个 Reader，表示要从其进行读取的属性文件。 
 @throws IOException 如果发生 I/O 错误
 @throws NullPointerException 如果 <code>reader</code> 为 null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<java.lang.String> java.util.PropertyResourceBundle.getKeys()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回包含在此 <code>ResourceBundle</code> 及其父包中的键的 <code>Enumeration</code>。 

 @return 包含在此 <code>ResourceBundle</code> 及其父包中的键的 <code>Enumeration</code>。
 @see #keySet()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Set<java.lang.String> java.util.PropertyResourceBundle.handleKeySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回<em>只</em> 包含在此 <code>ResourceBundle</code> 中的键的 <code>Set</code>。 

 @return 只包含在此 <code>ResourceBundle</code> 中的键的 <code>Set</code>
 @since 1.6
 @see #keySet()

<!-- END DATA -->
