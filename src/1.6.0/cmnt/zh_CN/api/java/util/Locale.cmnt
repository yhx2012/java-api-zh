<!-- BEGIN KEY -->
public final class java.util.Locale extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->

<code>Locale</code> 对象表示了特定的地理、政治和文化地区。需要 <code>Locale</code> 来执行其任务的操作称为<em>语言环境敏感的</em> 操作，它使用 <code>Locale</code> 为用户量身定制信息。例如，显示一个数值就是语言环境敏感的操作，应该根据用户的国家、地区或文化的风俗/传统来格式化该数值。

 <P>
使用此类中的构造方法来创建 <code>Locale</code>：
 <blockquote>
 <pre>
 Locale(String language)
 Locale(String language, String country)
 Locale(String language, String country, String variant)
 </pre>
 </blockquote>
语言参数是一个有效的 <STRONG>ISO 语言代码</STRONG>。这些代码是由 ISO-639 定义的小写两字母代码。在许多网站上都可以找到这些代码的完整列表，如：<BR><a href ="http://www.loc.gov/standards/iso639-2/englangn.html"><code>http://www.loc.gov/standards/iso639-2/englangn.html。</code></a>

 <P>
国家/地区参数是一个有效的 <STRONG>ISO 国家/地区代码</STRONG>。这些代码是由 ISO-3166 定义的大写两字母代码。在许多网站上都可以找到这些代码的完整列表，如：<BR><a href="http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html"><code>http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html。</code></a>

 <P>
变量参数是特定于供应商或浏览器的代码。例如，用 WIN 代表 Windows、MAC 代表 Macintosh 和 POSIX 代表 POSIX。有两个变量时，把它们用下划线区分开来，把最重要的放在前面。例如，一个传统的西班牙排序规则可能用下列语言、国家/地区和变量参数来构造一个语言环境："es"、"ES"、"Traditional_WIN"。

 <P>
因为一个 <code>Locale</code> 对象就是一个地区的标识符，所以构造一个 <code>Locale</code> 时不执行有效性检查。如果想了解特定的资源在您构造的 <code>Locale</code> 中是否可用，则必须查询那些资源。例如，使用 <code>getAvailableLocales</code> 方法询问 <code>NumberFormat</code> 所支持的语言环境。<BR><STRONG>注：</STRONG>查询一个特定语言环境的资源时，得到的是最佳的可用匹配，没必要精确地按要求提供资源。有关更多信息，请参见 {@link ResourceBundle}。

 <P>
<code>Locale</code> 类提供了一些方便的常量，可用这些常量为常用的语言环境创建 <code>Locale</code> 对象。例如，下面的内容为美国创建了一个 <code>Locale</code> 对象：
 <blockquote>
 <pre>
 Locale.US
 </pre>
 </blockquote>

 <P>
创建完 <code>Locale</code> 后，就可以查询有关其自身的信息。使用 <code>getCountry</code> 可获取 ISO 国家/地区代码，使用 <code>getLanguage</code> 则获取 ISO 语言代码。可用使用 <code>getDisplayCountry</code> 来获取适合向用户显示的国家/地区名。同样，可用使用 <code>getDisplayLanguage</code> 来获取适合向用户显示的语言名。有趣的是，<code>getDisplayXXX</code> 方法本身是语言环境敏感的，它有两个版本：一个使用默认的语言环境作为参数，另一个则使用指定的语言环境作为参数。

 <P>
Java 平台提供了多个可执行语言环境敏感操作的类：例如，<code>NumberFormat</code> 类以语言环境敏感的方式格式化数值、货币或百分比。像 <code>NumberFormat</code> 这样的类则有多种创建该类型默认对象的便捷方法。例如，<code>NumberFormat</code> 类提供了三个便捷的方法，用于创建默认的 <code>NumberFormat</code> 对象：
 <blockquote>
 <pre>
 NumberFormat.getInstance()
 NumberFormat.getCurrencyInstance()
 NumberFormat.getPercentInstance()
 </pre>
 </blockquote>
这些方法有两个变量；一个有明确的语言环境而另一个则没有；后者使用默认语言环境。
 <blockquote>
 <pre>
 NumberFormat.getInstance(myLocale)
 NumberFormat.getCurrencyInstance(myLocale)
 NumberFormat.getPercentInstance(myLocale)
 </pre>
 </blockquote>
<code>Locale</code> 是一种标识所要获取的对象种类 (<code>NumberFormat</code>) 的机制。但 locale <STRONG>只</STRONG>是一种标识对象的机制，<STRONG>不</STRONG>是对象本身的容器。

@see         ResourceBundle
@see         java.text.Format
@see         java.text.NumberFormat
@see         java.text.Collator
@author      Mark Davis
@since       1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.ENGLISH
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示语言的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.FRENCH
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示语言的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.GERMAN
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示语言的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.ITALIAN
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示语言的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.JAPANESE
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示语言的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.KOREAN
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示语言的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.CHINESE
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示语言的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.SIMPLIFIED_CHINESE
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示语言的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.TRADITIONAL_CHINESE
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示语言的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.FRANCE
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示国家/地区的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.GERMANY
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示国家/地区的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.ITALY
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示国家/地区的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.JAPAN
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示国家/地区的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.KOREA
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示国家/地区的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.CHINA
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示国家/地区的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.PRC
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示国家/地区的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.TAIWAN
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示国家/地区的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.UK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示国家/地区的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.US
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示国家/地区的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.CANADA
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示国家/地区的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.CANADA_FRENCH
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示国家/地区的有用常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Locale java.util.Locale.ROOT
<!-- END KEY -->
<!-- BEGIN DATA -->
 用于表示根语言环境的有用常量。根语言环境是指其语言、国家、变量是空（""）字符串的语言环境。它被视为所有语言环境的基础语言环境，并且用作语言环境敏感操作的语言/国家的非特定语言环境。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.String java.util.Locale.language
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial 
@see #getLanguage

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.String java.util.Locale.country
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial
@see #getCountry

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.String java.util.Locale.variant
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial
@see #getVariant

<!-- END DATA -->
<!-- BEGIN KEY -->
private volatile int java.util.Locale.hashcode
<!-- END KEY -->
<!-- BEGIN DATA -->
对象的哈希码的占位符。总为 -1。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Locale(String language, String country, String variant)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据语言、国家/地区和变量构造一个语言环境。注：ISO 639 并非是一个不变的标准；它所定义的某些语言代码（特别是 iw、ji 和 in）已经发生了变化。此构造方法接受旧代码（iw、ji 和 in）和新代码（he、yi 和 id），但是 Locale 中的所有其他 API 将只返回旧代码。
@param language 小写的两字母 ISO-639 代码。
@param country 大写的两字母 ISO-3166 代码。
@param variant 特定于供应商和浏览器的代码。参见类描述。
@exception NullPointerException 如果任意参数为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Locale(String language, String country)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据语言和国家/地区构造一个语言环境。注：ISO 639 并非是一个不变的标准；它所定义的某些语言代码（特别是 iw、ji 和 in）已经发生了变化。此构造方法接受旧代码（iw、ji 和 in）和新代码（he、yi 和 id），但是 Locale 中的所有其他 API 将只返回旧代码。
@param language 小写的两字母 ISO-639 代码。
@param country 大写的两字母 ISO-3166 代码。
@exception NullPointerException 如果任意参数为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Locale(String language)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据语言代码构造一个语言环境。注：ISO 639 并非是一个不变的标准；它所定义的某些语言代码（特别是 iw、ji 和 in）已经发生了变化。此构造方法接受旧代码（iw、ji 和 in）和新代码（he、yi 和 id），但是 Locale 中的所有其他 API 将只返回旧代码。
@param language 小写的两字母 ISO-639 代码。
@exception NullPointerException 如果参数为 null。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Locale java.util.Locale.getDefault()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得此 Java 虚拟机实例的当前默认语言环境值。
 <p>
Java 虚拟机根据主机的环境在启动期间设置默认语言环境。如果没有明确地指定语言环境，则很多语言环境敏感的方法都使用该方法。可使用 {@link #setDefault(java.util.Locale) setDefault} 方法更改该值。

@return 此 Java 虚拟机实例的默认语言环境。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized void java.util.Locale.setDefault(Locale newLocale)
<!-- END KEY -->
<!-- BEGIN DATA -->
为此 Java 虚拟机实例设置默认语言环境。这不会影响主机的语言环境。
 <p>
如果有安全管理器，则在更改默认语言环境前使用 <code>PropertyPermission("user.language", "write")</code> 权限调用其 <code>checkPermission</code> 方法。
 <p>
Java 虚拟机根据主机的环境在启动期间设置默认语言环境。如果没有明确地指定语言环境，则很多语言环境敏感的方法都使用该方法。
 <p>
由于更改默认的语言环境可能影响功能的很多方面，所以应该仅在调用者准备重新初始化在同一 Java 虚拟机内所运行的语言环境敏感代码时才使用此方法。

@throws  SecurityException 如果安全管理器存在并且其 <code>checkPermission</code> 方法不允许该操作。
@throws NullPointerException 如果 <code>newLocale</code> 为 null。
@param newLocale 新的默认语言环境。
@see SecurityManager#checkPermission
@see java.util.PropertyPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Locale[] java.util.Locale.getAvailableLocales()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回所有已安装语言环境的数组。 返回的数组表示由 Java 运行时环境和已安装的 {@link java.util.spi.LocaleServiceProvider LocaleServiceProvider} 所支持的语言环境的联合。它必须至少包含一个等于 {@link java.util.Locale#US Locale.US} 的 <code>Locale</code> 实例。

@return 已安装语言环境的数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String[] java.util.Locale.getISOCountries()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 ISO 3166 中所定义的所有两字母国家/地区代码。可用于创建 Locale。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String[] java.util.Locale.getISOLanguages()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 ISO 639 中所定义的所有两字母语言代码。可用于创建 Locale。[注：ISO 639 并非是一个不变的标准，某些语言代码已经改变。此功能所返回的列表包括了代码已改变的语言的新代码和旧代码。]

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.Locale.getLanguage()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此语言环境的语言代码，可以是空字符串或小写的 ISO 639 代码。
<p>注：ISO 639 并非是一个不变的标准，某些语言代码已经改变。Locale 的构造方法可识别代码已改变的语言的新代码和旧代码，但是此功能总是返回旧代码。如果想检查代码已改变的特定语言，不要执行 <pre>
 if (locale.getLanguage().equals("he")）
    ...
 </pre>Instead, do<pre>
 if (locale.getLanguage().equals(new Locale("he", "", "").getLanguage())）
    ...</pre>
 @see #getDisplayLanguage

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.Locale.getCountry()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此语言环境的国家/地区代码，将为空字符串或大写的 ISO 3166 两字母代码。
@see #getDisplayCountry

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.Locale.getVariant()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此语言环境的变量代码。
@see #getDisplayVariant

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.util.Locale.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
使用由下划线分隔的语言、国家/地区和变量来获取整个语言环境的编程名称。语言总是小写，国家/地区总是大写。如果没有语言，则字符串用一个下划线开头。如果语言和国家/地区字段都丢失了，则此功能将返回空字符串，即使变量字段中填有内容也如此（不能只用变量来创建一个语言环境，变量必须随附在有效的语言或国家/地区代码上）。示例："en"、"de_DE"、"_GB"、"en_US_WIN"、"de__POSIX"、"fr__MAC"。
@see #getDisplayName

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.Locale.getISO3Language() throws java.util.MissingResourceException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此语言环境语言的三字母缩写。如果此语言环境未指定语言，那么这将是一个空字符串。否则，将返回小写的 ISO 639-2/T 语言代码。可在 <a href="http://www.loc.gov/standards/iso639-2/englangn.html">
 <code>http://www.loc.gov/standards/iso639-2/englangn.html</code>.</a> 找到 ISO 639-2 语言代码。
@exception MissingResourceException 如果三字母语言缩写不可用于此语言环境，则抛出 MissingResourceException。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.Locale.getISO3Country() throws java.util.MissingResourceException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此语言环境国家/地区的三字母缩写。如果此语言环境未指定国家/地区，那么这将是一个空字符串。否则将返回大写的 ISO 3166 三字母国家/地区代码。可在  <a href="http://www.davros.org/misc/iso3166.txt">
 <code>http://www.davros.org/misc/iso3166.txt</code>.</a> 找到 ISO 3166-2 国家/地区代码。
@exception MissingResourceException 如果三字母国家/地区缩写不可用于此语言环境，则抛出 MissingResourceException。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.util.Locale.getDisplayLanguage()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回适合向用户显示的语言环境语言名。如有可能，将为默认的语言环境对返回的名称进行本地化。例如，如果语言环境是 fr_FR 并且默认的语言环境是 en_US，则 getDisplayLanguage() 将返回 "French"；如果语言环境是 en_US 并且默认的语言环境是 fr_FR，则 getDisplayLanguage() 将返回 "anglais"。如果无法为默认的语言环境本地化返回的名称（比方说没有 Croatian 的日本名称），则该功能将依赖英文名，并使用 ISO 代码作为最终的值。如果该语言环境未指定语言，则此功能返回空字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.Locale.getDisplayLanguage(Locale inLocale)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回适合向用户显示的语言环境语言名。如有可能，将根据 inLocale 对返回的名称进行本地化。例如，如果语言环境是 fr_FR 并且 inLocale 是 en_US，则 getDisplayLanguage() 将返回 "French"；如果语言环境是 en_US 并且 inLocale 是 fr_FR，则 getDisplayLanguage() 将返回 "anglais"。如果无法根据 inLocale 对返回的名称进行本地化（比方说没有 Croatian 的日本名称），则该功能将依赖英文名，并使用 ISO 代码作为最终的值。如果该语言环境未指定语言，则此功能返回空字符串。

@exception NullPointerException 如果 <code>inLocale</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.util.Locale.getDisplayCountry()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回适合向用户显示的语言环境国家/地区名。如有可能，将为默认的语言环境对返回的名称进行本地化。例如，如果语言环境是 fr_FR 并且默认的语言环境是 en_US，则 getDisplayCountry() 将返回 "France"；如果语言环境是 en_US 并且默认的语言环境是 fr_FR，则 getDisplayCountry() 将返回 "Etats-Unis"。如果无法为默认的语言环境本地化返回的名称（比方说没有 Croatia 的日本名称），则该功能将依赖英文名，并使用 ISO 代码作为最终的值。如果该语言环境未指定国家/地区，则此功能返回空字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.Locale.getDisplayCountry(Locale inLocale)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回适合向用户显示的语言环境国家/地区名。
如有可能，将根据 inLocale 对返回的名称进行本地化。例如，如果语言环境是 fr_FR 并且 inLocale 是 en_US，则 getDisplayCountry() 将返回 "France"；如果语言环境是 en_US 并且 inLocale 是 fr_FR，则 getDisplayCountry() 将返回 "Etats-Unis"。如果无法根据 inLocale 对返回的名称进行本地化（比方说没有 Croatia 的日本名称），则该功能将依赖英文名，并使用 ISO 代码作为最终的值。如果该语言环境未指定国家/地区，则此功能返回空字符串。

@exception NullPointerException 如果 <code>inLocale</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.util.Locale.getDisplayVariant()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回适合向用户显示的语言环境变量代码名。如有可能，将为默认的语言环境对返回的名称进行本地化。如果该语言环境未指定变量代码，则此功能返回空字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.Locale.getDisplayVariant(Locale inLocale)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回适合向用户显示的语言环境变量代码名。如有可能，将根据 inLocale 对名称进行本地化。如果该语言环境未指定变量代码，则此功能返回空字符串。

 @exception NullPointerException 如果 <code>inLocale</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.util.Locale.getDisplayName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回适合向用户显示的语言环境名。这将把 getDisplayLanguage()、getDisplayCountry() 和 getDisplayVariant() 返回的值组合到单个字符串中。显示的名称具有下列形式之一：<p><blockquote>
语言（国家/地区，变量）<p>
语言（国家/地区）<p>
语言（变量）<p>
国家/地区（变量）<p>
语言<p>
国家/地区<p>
变量<p></blockquote>
这取决于语言环境中指定了哪些字段。如果语言、国家/地区和变量字段都为空，则该功能将返回空字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.Locale.getDisplayName(Locale inLocale)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回适合向用户显示的语言环境名。这将把 getDisplayLanguage()、getDisplayCountry() 和 getDisplayVariant() 返回的值组合到单个字符串中。显示的名称具有下列形式之一：<p><blockquote>
语言（国家/地区，变量）<p>
语言（国家/地区）<p>
语言（变量）<p>
国家/地区（变量）<p>
语言<p>
国家/地区<p>
变量<p></blockquote>
这取决于语言环境中指定了哪些字段。如果语言、国家/地区和变量字段都为空，则该功能将返回空字符串。

 @exception NullPointerException 如果 <code>inLocale</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.util.Locale.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 Cloneable。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.Locale.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 hashCode。由于 Locale 经常用于哈希表中，所以缓存该值可提高速度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.Locale.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果该 Locale 等于另一个对象，则返回 true。一个 Locale 与另一个 Locale 具有相同的语言、国家/地区和变量时，则认为它们相等；并与所有其他对象都不相等。

@return 如果此 Locale 等于指定的对象，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Object java.util.Locale.readResolve() throws java.io.ObjectStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
用新创建的对象替换已反序列化的 Locale 对象。用较旧的 ISO 代码替换较新的语言代码。用内部 String 副本替换国家/地区和变量代码。

<!-- END DATA -->
