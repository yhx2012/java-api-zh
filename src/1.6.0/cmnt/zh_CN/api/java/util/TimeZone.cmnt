<!-- BEGIN KEY -->
public abstract class java.util.TimeZone extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>TimeZone</code> 表示时区偏移量，也可以计算夏令时。

 <p>
通常，使用 <code>getDefault</code> 获取 <code>TimeZone</code>，<code>getDefault</code> 基于程序运行所在的时区创建 <code>TimeZone</code>。例如，对于在日本运行的程序，<code>getDefault</code> 基于日本标准时间创建 <code>TimeZone</code> 对象。

 <p>
也可以用 <code>getTimeZone</code> 及时区 ID 获取 <code>TimeZone</code> 。例如美国太平洋时区的时区 ID 是 &quot;America/Los_Angeles&quot;。因此，可以使用下面语句获得美国太平洋时间 <code>TimeZone</code> 对象：
 <blockquote><pre>
 TimeZone tz = TimeZone.getTimeZone(&quot;America/Los_Angeles&quot;);
 </pre></blockquote>
可以使用 <code>getAvailableIDs</code> 方法来对所有受支持的时区 ID 进行迭代。可以选择受支持的 ID 来获得 <code>TimeZone</code>。如果想要的时区无法用受支持的 ID 之一表示，那么可以指定自定义时区 ID 来生成 TimeZone。自定义时区 ID 的语法是：

 <blockquote><pre>
 <a name="CustomID"><i>CustomID:</i></a>
         <code>GMT</code> <i>Sign</i> <i>Hours</i> <code>:</code> <i>Minutes</i>
         <code>GMT</code> <i>Sign</i> <i>Hours</i> <i>Minutes</i>
         <code>GMT</code> <i>Sign</i> <i>Hours</i>
<i>Sign:</i> 下面之一
         <code>+ -</code>
 <i>Hours:</i>
         <i>Digit</i>
         <i>Digit</i> <i>Digit</i>
 <i>Minutes:</i>
         <i>Digit</i> <i>Digit</i>
 <i>Digit:</i> 下面之一
         <code>0 1 2 3 4 5 6 7 8 9</code>
 </pre></blockquote>

<i>Hours</i> 必须在 0 至 23 之间，<i>Minutes</i> 必须在 00 至 59 之间。例如，&quot;GMT+10&quot; 和 &quot;GMT+0010&quot; 分别意味着比 GMT 提前 10 小时和 10 分钟。
 <p>
格式是与区域无关的，并且数字必须取自 Unicode 标准的 Basic Latin 块。没有夏令时转换安排可以用自定义时区 ID 指定。如果指定的字符串与语法不匹配，就使用 <code>&quot;GMT&quot;</code>。
 <p>
当创建一个 <code>TimeZone</code> 时，指定的自定义时区 ID 采用下面的语法进行标准化：
 <blockquote><pre>
 <a name="NormalizedCustomID"><i>NormalizedCustomID:</i></a>
         <code>GMT</code> <i>Sign</i> <i>TwoDigitHours</i> <code>:</code> <i>Minutes</i>
<i>Sign:</i> 下面之一
         <code>+ -</code>
 <i>TwoDigitHours:</i>
         <i>Digit</i> <i>Digit</i>
 <i>Minutes:</i>
         <i>Digit</i> <i>Digit</i>
 <i>Digit:</i> 下面之一
         <code>0 1 2 3 4 5 6 7 8 9</code>
 </pre></blockquote>
例如，TimeZone.getTimeZone(&quot;GMT-8&quot;).getID() 返回 &quot;GMT-08:00&quot;。

<h4>三字母时区 ID</h4>
 
为了与 JDK 1.1.x 兼容，一些三字母时区 ID（比如 &quot;PST&quot;、&quot;CTT&quot;、&quot;AST&quot;）也受支持。但是，<strong>它们的使用被废弃</strong>，这是因为相同的缩写经常用于多个时区（例如，&quot;CST&quot; 可以是美国的 &quot;Central Standard Time&quot; 和 &quot;China Standard Time&quot;），但是 Java 平台只可以识别其中一种。


@see          Calendar
@see          GregorianCalendar
@see          SimpleTimeZone
@version      1.68 01/12/04
@author       Mark Davis, David Goldsmith, Chen-Lieh Huang, Alan Liu
@since        JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.TimeZone.SHORT
<!-- END KEY -->
<!-- BEGIN DATA -->
指出短名称（比如 &quot;PST&quot;）的 <code>getDisplayName()</code> 的风格说明符。
@see #LONG
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.TimeZone.LONG
<!-- END KEY -->
<!-- BEGIN DATA -->
指出长名称的 <code>getDisplayName()</code> 的风格说明符。
@see #SHORT
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.util.TimeZone.ID
<!-- END KEY -->
<!-- BEGIN DATA -->
此 <code>TimeZone</code> 的字符串标识符。这是一个编程标识符，供内部用于从系统表中查询 <code>TimeZone</code> 对象，也用于把它们映射到它们的本地化显示名称。<code>ID</code> 值在系统表中是唯一的，但可能不是针对动态创建的区域。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.TimeZone()
<!-- END KEY -->
<!-- BEGIN DATA -->
单独的构造方法。（由子类构造方法调用，通常是隐式的。）

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.util.TimeZone.getOffset(int era, int year, int month, int day, int dayOfWeek, int milliseconds)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取当前日期的时区偏移量（在夏令时情况下进行修改）。这是添加到 UTC 获取本地时间的偏移量。
 <p>
如果底层 <code>TimeZone</code> 实现子类支持历史夏令时安排和 GMT 偏移量改变，那么此方法就返回历史上正确的偏移量。

@param era 给定日期的年代。
@param year 给定日期的年份。
@param month 给定日期的月份。月份是从 0 开始的，比如 0 代表一月。
@param day 给定日期的月份中的某一天。
@param dayOfWeek 给定日期的一周中的某一天。
@param milliseconds <em>标准</em> 本地时间中天的毫秒数。

@return 添加到 GMT 以获取本地时间的偏移量（以毫秒计）。

@see Calendar#ZONE_OFFSET
@see Calendar#DST_OFFSET

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.TimeZone.getOffset(long date)
<!-- END KEY -->
<!-- BEGIN DATA -->
从给定日期的 UTC 返回此时区的偏移量。如果夏令时在指定的日期是有效的，就用夏令时调整偏移值。
 <p>
如果底层 TimeZone 实现子类支持历史夏令时安排和 GMT 偏移量改变，那么此方法就返回历史上正确的偏移值。

@param date 自 1970 年 1 月 1 日 00:00:00 GMT 以来以毫秒表示的日期
@return 添加到 UTC 以获取本地时间的时间量（以毫秒为单位）。

@see Calendar#ZONE_OFFSET
@see Calendar#DST_OFFSET
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.util.TimeZone.setRawOffset(int offsetMillis)
<!-- END KEY -->
<!-- BEGIN DATA -->
把基准时区偏移量设置到 GMT。这是添加到 UTC 以获取本地时间的偏移量。
 <p>
如果底层 <code>TimeZone</code> 实现子类支持历史 GMT 偏移量更改，那么指定的 GMT 偏移量被设置为最后的 GMT 偏移量，并通过与已知的最近 GMT 偏移值的差别对所有历史 GMT 偏移值进行调整。

@param offsetMillis GMT 的给定基准时区偏移量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.util.TimeZone.getRawOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回添加到 UTC 以获取此时区中的标准时间的时间量（以毫秒为单位）。因为此值不受夏令时的影响，所以它称为<I>原始偏移量</I>。
 <p>
如果底层 <code>TimeZone</code> 实现子类支持历史 GMT 的偏移量变化，那么此方法返回当前日期的原始偏移量值。例如，在火奴鲁鲁（美国夏威夷州的首府和港市），它的原始偏移量在 1947 年从 GMT-10:30 改变到 GMT-10:00，并且此方法始终返回 -36000000 毫秒（即 -10 小时）。

@return 添加到 UTC 的原始偏移时间量（以毫秒为单位）。
@see Calendar#ZONE_OFFSET

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.TimeZone.getID()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此时区的 ID。
@return 此时区的 ID。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.TimeZone.setID(String ID)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置时区 ID。这不会改变时区对象中的任何其他数据。
@param ID 新的时区 ID。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.util.TimeZone.getDisplayName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回适合于展示给默认区域的用户的时区名称。此方法返回长名称，不包括夏令时。如果显示名称对于区域不可用，那么此方法以<a href="#NormalizedCustomID">标准化自定义 ID 格式</a>返回一个字符串。
@return 默认区域中时区的可读名称。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.util.TimeZone.getDisplayName(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回适合于展示给指定区域的用户的时区名称。此方法返回长名称，不包括夏令时。如果显示名称对于区域不可用，那么此方法以<a href="#NormalizedCustomID">标准化自定义 ID 格式</a>返回一个字符串。
@param locale 要提供显示名称的区域。
@return 给定区域中时区的可读名称。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.util.TimeZone.getDisplayName(boolean daylight, int style)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回适合于展示给默认区域的用户的时区名称。如果显示名称对于区域不可用，那么此方法以<a href="#NormalizedCustomID">标准化自定义 ID 格式</a>返回一个字符串。
@param daylight 如果为 true，则返回夏令时名称。
@param style <code>LONG</code> 或 <code>SHORT</code>
@return 默认区域中时区的可读名称。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.TimeZone.getDisplayName(boolean daylight, int style, Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回适合于展示给指定区域的用户的时区名称。如果显示名称对于区域不可用，那么此方法以<a href="#NormalizedCustomID">标准化自定义 ID 格式</a>返回一个字符串。
@param daylight 如果为 true，返回夏令时名称。
@param style <code>LONG</code> 或 <code>SHORT</code> 
@param locale 要提供显示名称的区域。
@return 给定区域中时区的可读名称。
@exception IllegalArgumentException 风格是无效的。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.TimeZone.getDSTSavings()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回要添加到本地标准时间以获取本地挂钟时间的时间量。
 <p>
如果此时区遵守夏令时规则，则默认的实现始终返回 3600000 毫秒（即 1 小时）。否则，返回 0（零）。
 <p>
如果底层 TimeZone 实现子类支持历史夏令时变化，则此方法返回已知的最新夏令时值。

@return 节约的时间量（以毫秒为单位）
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.util.TimeZone.useDaylightTime()
<!-- END KEY -->
<!-- BEGIN DATA -->
查询此时区是否使用夏令时。
 <p>
如果底层 <code>TimeZone</code> 实现子类支持历史夏令时安排变化，那么方法引用最新的夏令时安排信息。

@return 如果此时区使用夏令时，则返回 true，否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.util.TimeZone.inDaylightTime(Date date)
<!-- END KEY -->
<!-- BEGIN DATA -->
查询给定的日期是否在此时区的夏令时中。
@param date 给定的日期。
@return 如果给定的日期在夏令时中，则返回 true，否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.util.TimeZone java.util.TimeZone.getTimeZone(String ID)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取给定 ID 的 <code>TimeZone</code>。

@param ID <code>TimeZone</code> 的 ID，要么是缩写（如 &quot;PST&quot; ），要么是全名（如 &quot;America/Los_Angeles&quot;），要么是自定义 ID（如 &quot;GMT-8:00&quot;）。注意，对缩写的支持只是出于 JDK 1.1.x 兼容性的考虑，因此应该使用全名。

@return 指定的 <code>TimeZone</code>，如果给定的 ID 无法理解，则返回 GMT 区域。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.lang.String[] java.util.TimeZone.getAvailableIDs(int rawOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据给定的时区偏移量（以毫秒为单位）获取可用的 ID。

@param rawOffset 给定的时区 GMT 偏移量（以毫秒为单位）。
@return 一组 ID，其中该 ID 时区具有指定的 GMT 偏移量。例如，&quot;America/Phoenix&quot; 和 &quot;America/Denver&quot; 都有 GMT-07:00，但其夏令时行为是不同的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.lang.String[] java.util.TimeZone.getAvailableIDs()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取受支持的所有可用 ID。
@return 一组 ID。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.TimeZone java.util.TimeZone.getDefault()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此主机的默认 <code>TimeZone</code>。默认 <code>TimeZone</code> 的来源可能随实现的变化而变化。
@return 默认的 <code>TimeZone</code>。
@see #setDefault

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.TimeZone.setDefault(TimeZone zone)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置由 <code>getDefault</code> 方法返回的 <code>TimeZone</code>。如果 <code>zone</code> 为 null，把默认值重设为第一次启动虚拟机时的最初值。
@param zone 新的默认时区
@see #getDefault

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.TimeZone.hasSameRules(TimeZone other)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此区域和另一个区域具有相同的规则和偏移量，也就是说，如果此区域只可能在 ID 上与另一个区域不同，则返回 true。如果其他区域为 null，则返回 false。
@param other 要进行比较的 <code>TimeZone</code> 对象
@return 如果其他区域不为 null，并且与此区域不同（可能只有 ID 不同），则返回 true
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.util.TimeZone.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建此 <code>TimeZone</code> 的一个副本。

@return 此 <code>TimeZone</code> 的一个副本

<!-- END DATA -->
