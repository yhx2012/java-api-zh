<!-- BEGIN KEY -->
public abstract class java.util.TimerTask extends java.lang.Object implements java.lang.Runnable
<!-- END KEY -->
<!-- BEGIN DATA -->
由 Timer 安排为一次执行或重复执行的任务。

@author  Josh Bloch
@version 1.10, 02/19/04
@see	  Timer
@since   1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.TimerTask()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的计时器任务。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.util.TimerTask.run()
<!-- END KEY -->
<!-- BEGIN DATA -->
此计时器任务要执行的操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.TimerTask.cancel()
<!-- END KEY -->
<!-- BEGIN DATA -->
取消此计时器任务。如果任务安排为一次执行且还未运行，或者尚未安排，则永远不会运行。如果任务安排为重复执行，则永远不会再运行。（如果发生此调用时任务正在运行，则任务将运行完，但永远不会再运行。）

<p>注意，从重复的计时器任务的 <tt>run</tt> 方法中调用此方法绝对保证计时器任务不会再运行。

<p>此方法可以反复调用；第二次和以后的调用无效。

@return 如果此任务安排为一次执行且尚未运行，或者此任务安排为重复执行，则返回 true。如果此任务安排为一次执行且已经运行，或者此任务尚未安排，或者此任务已经取消，则返回 false。（一般来说，如果此方法不允许发生一个或多个已安排执行，则返回 <tt>true</tt>。）

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.TimerTask.scheduledExecutionTime()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此任务最近<i>实际</i> 执行的<i>已安排</i> 执行时间。（如果在任务执行过程中调用此方法，则返回值为此任务执行的已安排执行时间。）

<p>通常从一个任务的 run 方法中调用此方法，以确定当前任务执行是否能充分及时地保证完成已安排活动：
 <pre>
   public void run() {
       if (System.currentTimeMillis() - scheduledExecutionTime() &gt;=
           MAX_TARDINESS)
               return;  // Too late; skip this execution.
       // Perform the task
   }
 </pre>
通常，此方法<i>不</i> 与<i>固定延迟执行</i> 的重复任务一起使用，因为其已安排执行时间允许随时间浮动，所以毫无意义。

@return 最近发生此任务执行安排的时间，采用 Date.getTime() 返回的格式。如果任务已开始其首次执行，则返回值不确定。
@see Date#getTime()

<!-- END DATA -->
