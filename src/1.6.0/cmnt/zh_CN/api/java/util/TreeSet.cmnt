<!-- BEGIN KEY -->
public class java.util.TreeSet extends java.util.AbstractSet implements java.util.NavigableSet, java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 基于 {@link TreeMap} 的 {@link NavigableSet} 实现。使用元素的{@linkplain Comparable 自然顺序}对元素进行排序，或者根据创建 set 时提供的 {@link Comparator} 进行排序，具体取决于使用的构造方法。

 <p>此实现为基本操作（{@code add}、{@code remove} 和 {@code contains}）提供受保证的 log(n) 时间开销。

 <p>注意，如果要正确实现 {@code Set} 接口，则 set 维护的顺序（无论是否提供了显式比较器）必须<i>与 equals 一致</i>。（关于<i>与 equals 一致</i> 的精确定义，请参阅 {@code Comparable} 或 {@code Comparator}。）这是因为 {@code Set} 接口是按照 {@code equals} 操作定义的，但 {@code TreeSet} 实例使用它的 {@code compareTo}（或 {@code compare}）方法对所有元素进行比较，因此从 set 的观点来看，此方法认为相等的两个元素就是相等的。即使 set 的顺序与 equals 不一致，其行为也<i>是</i> 定义良好的；它只是违背了 {@code Set} 接口的常规协定。

 <p><strong>注意，此实现不是同步的。</strong>如果多个线程同时访问一个 TreeSet，而其中至少一个线程修改了该 set，那么它<i>必须</i> 外部同步。这一般是通过对自然封装该 set 的对象执行同步操作来完成的。如果不存在这样的对象，则应该使用 {@link Collections#synchronizedSortedSet Collections.synchronizedSortedSet} 方法来“包装”该 set。此操作最好在创建时进行，以防止对 set 的意外非同步访问： <pre>
   SortedSet s = Collections.synchronizedSortedSet(new TreeSet(...));</pre>

 <p>此类的 {@code iterator} 方法返回的迭代器是<i>快速失败</i> 的：在创建迭代器之后，如果从结构上对 set 进行修改，除非通过迭代器自身的 {@code remove} 方法，否则在其他任何时间以任何方式进行修改都将导致迭代器抛出 {@link ConcurrentModificationException}。因此，对于并发的修改，迭代器很快就完全失败，而不会冒着在将来不确定的时间发生不确定行为的风险。

 <p>注意，迭代器的快速失败行为无法得到保证，一般来说，存在不同步的并发修改时，不可能作出任何肯定的保证。快速失败迭代器尽最大努力抛出 {@code ConcurrentModificationException}。因此，编写依赖于此异常的程序的做法是错误的，正确做法是：迭代器的快速失败行为应该仅用于检测 bug。</i>

 <p>此类是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

 @param <E> 此 set 维护的元素的类型

 @author  Josh Bloch
 @version 1.37, 05/10/06
 @see	    Collection
 @see	    Set
 @see	    HashSet
 @see     Comparable
 @see     Comparator
 @see	    TreeMap
 @since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.TreeSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个新的空 set，该 set 根据其元素的自然顺序进行排序。插入该 set 的所有元素都必须实现 {@link Comparable} 接口。另外，所有这些元素都必须是<i>可互相比较的</i>：对于 set 中的任意两个元素 {@code e1} 和 {@code e2}，执行 {@code e1.compareTo(e2)} 都不得抛出 {@code ClassCastException}。如果用户试图将违反此约束的元素添加到 set（例如，用户试图将字符串元素添加到其元素为整数的 set 中），则 {@code add} 调用将抛出 {@code ClassCastException}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.TreeSet(java.util.Comparator<? super E> comparator)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个新的空 TreeSet，它根据指定比较器进行排序。插入到该 set 的所有元素都必须能够由指定比较器进行<i>相互比较</i>：对于 set 中的任意两个元素 {@code e1} 和 {@code e2}，执行 {@code comparator.compare(e1, e2)} 都不得抛出 {@code ClassCastException}。如果用户试图将违反此约束的元素添加到 set 中，则 {@code add} 调用将抛出 {@code ClassCastException}。

 @param comparator 将用来对此 set 进行排序的比较器。如果该参数为 {@code null}，则使用元素的{@linkplain Comparable 自然顺序}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.TreeSet(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个包含指定 collection 元素的新 TreeSet，它按照其元素的<i>自然顺序</i>进行排序。插入该 set 的所有元素都必须实现 {@link Comparable} 接口。另外，所有这些元素都必须是<i>可互相比较的</i>：对于 set 中的任意两个元素 {@code e1} 和 {@code e2}，执行 {@code e1.compareTo(e2)} 都不得抛出 {@code ClassCastException}。

 @param c 一个 collection，其元素将组成新的 set
 @throws ClassCastException 如果 {@code c} 中的元素不是 {@link Comparable}，或者是不可相互比较的
 @throws NullPointerException 如果指定 collection 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.TreeSet(java.util.SortedSet<E> s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个与指定有序 set 具有相同映射关系和相同排序的新 TreeSet。

 @param s 一个有序 set，其元素将组成新 set
 @throws NullPointerException 如果指定有序 set 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.TreeSet.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回在此 set 中的元素上按升序进行迭代的迭代器。

 @return 在此 set 中的元素上按升序进行迭代的迭代器

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.TreeSet.descendingIterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回在此 set 元素上按降序进行迭代的迭代器。

 @return 在此 set 元素上按降序进行迭代的迭代器
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<E> java.util.TreeSet.descendingSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.TreeSet.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回 set 中的元素数（set 的容量）。

 @return 此 set 中的元素数（set 的容量）

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.TreeSet.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
 如果此 set 不包含任何元素，则返回 {@code true}。

 @return 如果此 set 不包含任何元素，则返回 {@code true}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.TreeSet.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 如果此 set 包含指定的元素，则返回 {@code true}。更确切地讲，当且仅当此 set 包含满足 <tt>(o==null&#xA0;?&#xA0;e==null&#xA0;:&#xA0;o.equals(e))</tt> 的元素 {@code e} 时，返回 {@code true}。

 @param o 将检查是否包含在此 set 中的对象
 @return 如果此 set 包含指定元素，则返回 {@code true}
 @throws ClassCastException 如果指定对象无法与该 set 中的当前元素进行比较
 @throws NullPointerException 如果指定元素为 null，并且此 set 使用自然顺序，或者其比较器不允许使用 null 元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.TreeSet.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的元素添加到此 set（如果该元素尚未存在于 set 中）。更确切地讲，如果该 set 不包含满足 <tt>(e==null&nbsp;?&nbsp;e2==null&nbsp;:&nbsp;e.equals(e2))</tt> 的元素 {@code e2}，则将指定元素 {@code e} 添加到此 set 中。如果此 set 已经包含这样的元素，则该调用不改变此 set 并返回 {@code false}。

 @param e 要添加到此 set 的对象
 @return 如果此 set 尚未包含指定元素，则返回 {@code true}
 @throws ClassCastException 如果指定对象无法与此 set 的当前元素进行比较
 @throws NullPointerException 如果指定元素为 null，并且此 set 使用自然顺序，或者其比较器不允许使用 null 元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.TreeSet.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定的元素从 set 中移除（如果该元素存在于此 set 中）。更确切地讲，如果 set 中包含满足 <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt> 的元素 {@code e}，则移除一个这样的元素。如果此 set 包含这样的元素（或者此 set 由于调用而发生更改），则返回 {@code true}。（一旦调用返回，则此 set 不再包含这样的元素。）

 @param o 将从此 set 中移除的对象（如果存在）
 @return 如果此 set 包含指定元素，则返回 {@code true}
 @throws ClassCastException 如果指定对象无法与该 set 中的当前元素进行比较
 @throws NullPointerException 如果指定元素为 null，并且此 set 使用自然顺序，或者其比较器不允许使用 null 元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.TreeSet.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 移除此 set 中的所有元素。在此调用返回之后，set 将为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.TreeSet.addAll(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定 collection 中的所有元素添加到此 set 中。

 @param c 包含要添加到此 set 的元素的 collection
 @return 如果此 set 由于调用而发生更改，则返回 {@code true}
 @throws ClassCastException 如果提供的元素无法与 set 中的当前元素进行比较
 @throws NullPointerException 如果指定 collection 为 null，或者任何元素为 null 并且此 set 使用自然顺序，或者其比较器不允许使用 null 元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<E> java.util.TreeSet.subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException 如果 {@code fromElement} 或 {@code toElement} 为 null，并且此 set 使用自然顺序，或者其比较器不允许使用 null 元素
 @throws IllegalArgumentException {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<E> java.util.TreeSet.headSet(E toElement, boolean inclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException 如果 {@code toElement} 为 null，并且此 set 使用自然顺序，或者其比较器不允许使用 null 元素
 @throws IllegalArgumentException {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<E> java.util.TreeSet.tailSet(E fromElement, boolean inclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException 如果 {@code fromElement} 为 null，并且此 set 使用自然顺序，或者其比较器不允许使用 null 元素
 @throws IllegalArgumentException {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.SortedSet<E> java.util.TreeSet.subSet(E fromElement, E toElement)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException 如果 {@code fromElement} 或 {@code toElement} 为 null，并且此 set 使用自然顺序，或者其比较器不允许使用 null 元素
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.SortedSet<E> java.util.TreeSet.headSet(E toElement)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException 如果 {@code toElement} 为 null，并且此 set 使用自然顺序，或者其比较器不允许使用 null 元素
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.SortedSet<E> java.util.TreeSet.tailSet(E fromElement)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException 如果 {@code fromElement} 为 null，并且此 set 使用自然顺序，或者其比较器不允许使用 null 元素
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.TreeSet.first()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.TreeSet.last()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.TreeSet.lower(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException 如果指定元素为 null，并且此 set 使用自然顺序，或者其比较器不允许使用 null 元素
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.TreeSet.floor(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException 如果指定元素为 null，并且此 set 使用自然顺序，或者其比较器不允许使用 null 元素
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.TreeSet.ceiling(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException 如果指定元素为 null，并且此 set 使用自然顺序，或者其比较器不允许使用 null 元素
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.TreeSet.higher(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException 如果指定元素为 null，并且此 set 使用自然顺序，或者其比较器不允许使用 null 元素
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.TreeSet.pollFirst()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.TreeSet.pollLast()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.util.TreeSet.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回 {@code TreeSet} 实例的浅表副本。（这些元素本身不被复制。）
 @return 此 set 的浅表副本

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.TreeSet.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 在某一流中重新构造 {@code TreeSet} 实例（也就是将其反序列化）。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.TreeSet.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将 {@code TreeSet} 实例的状态保存到流中（也就是将其序列化）。

 @serialData 发出用于对此 set 进行排序的比较器，如果其元素遵循自然顺序（Object），则发出 {@code null}，后跟该 set 的大小（它包含的元素数，用一个 int 值表示），再后面是其按顺序排列的所有元素（每个元素是一个 Object）（该顺序由 set 的 Comparator 确定；如果 set 没有 Comparator，则该顺序由元素的自然顺序确定）。

<!-- END DATA -->
