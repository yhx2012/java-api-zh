<!-- BEGIN KEY -->
public class java.util.Collections extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
此类完全由在 collection 上进行操作或返回 collection 的静态方法组成。它包含在 collection 上操作的多态算法，即“包装器”，包装器返回由指定 collection 支持的新 collection，以及少数其他内容。

<p>如果为此类的方法所提供的 collection 或类对象为 null，则这些方法都将抛出 <tt>NullPointerException</tt>。

<p>此类中所含多态算法的文档通常包括对<i>实现</i> 的简短描述。应该将这类描述视为<i>实现注意事项</i>，而不是<i>规范</i> 的一部分。实现者应该可以随意使用其他算法替代，只要遵循规范本身即可。（例如，<tt>sort</tt> 使用的算法不一定是合并排序算法，但它必须是<i>稳定的</i>。）

<p>此类中包含的“破坏性”算法，即可修改其所操作的 collection 的算法，该算法被指定在 collection 不支持适当的可变基元（比如 <tt>set</tt> 方法）时抛出 <tt>UnsupportedOperationException</tt>。如果调用不会对 collection 产生任何影响，那么这些算法可能（但不要求）抛出此异常。例如，在已经排序的、不可修改列表上调用 <tt>sort</tt> 方法可能会（也可能不会）抛出 <tt>UnsupportedOperationException</tt>。

<p>此类是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

@author  Josh Bloch
@author  Neal Gafter
@version 1.106, 04/21/06
@see	    Collection
@see	    Set
@see	    List
@see	    Map
@since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Set java.util.Collections.EMPTY_SET
<!-- END KEY -->
<!-- BEGIN DATA -->
空的 set（不可变的）。此 set 是可序列化的。

@see #emptySet()

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.List java.util.Collections.EMPTY_LIST
<!-- END KEY -->
<!-- BEGIN DATA -->
空的列表（不可变的）。此列表是可序列化的。

@see #emptyList()

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Map java.util.Collections.EMPTY_MAP
<!-- END KEY -->
<!-- BEGIN DATA -->
空的映射（不可变的）。此映射是可序列化的。

@see #emptyMap()
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Collections.sort(java.util.List<T> list)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据元素的<i>自然顺序</i> 对指定列表按升序进行排序。列表中的所有元素都必须实现 <tt>Comparable</tt> 接口。此外，列表中的所有元素都必须是<i>可相互比较的</i>（也就是说，对于列表中的任何 <tt>e1</tt> 和 <tt>e2</tt> 元素，<tt>e1.compareTo(e2)</tt> 不得抛出 <tt>ClassCastException</tt>）。<p>

此排序方法具有<i>稳定性</i>：不会因调用 sort 方法而对相等的元素进行重新排序。<p>

指定列表必须是可修改的，但不必是大小可调整的。<p>

该排序算法是一个经过修改的合并排序算法（其中，如果低子列表中的最高元素小于高子列表中的最低元素，则忽略合并）。此算法提供可保证的 n log(n) 性能。 

此实现将指定列表转储到一个数组中，并对数组进行排序，在重置数组中相应位置处每个元素的列表上进行迭代。这避免了由于试图原地对链接列表进行排序而产生的 n<sup>2</sup> log(n) 性能。

@param list 要排序的列表。
@throws ClassCastException 如果列表包含不<i>可相互比较</i> 的元素（例如，字符串和整数）。
@throws UnsupportedOperationException 如果指定列表的列表迭代器不支持 <tt>set</tt> 操作。
@see Comparable

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Collections.sort(java.util.List<T> list, java.util.Comparator<? super T> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定比较器产生的顺序对指定列表进行排序。此列表内的所有元素都必须可使用指定比较器<i>相互比较</i>（也就是说，对于列表中的任意 <tt>e1</tt> 和 <tt>e2</tt> 元素，<tt>c.compare(e1, e2)</tt> 不得抛出 <tt>ClassCastException</tt>）。<p>

此排序被保证是<i>稳定的</i>：不会因调用 sort 而对相等的元素进行重新排序。<p>

排序算法是一个经过修改的合并排序算法（其中，如果低子列表中的最高元素小于高子列表中的最低元素，则忽略合并）。此算法提供可保证的 n log(n) 性能。 

指定列表必须是可修改的，但不必是可大小调整的。此实现将指定列表转储到一个数组中，并对数组进行排序，在重置数组中相应位置每个元素的列表上进行迭代。这避免了由于试图原地对链接列表进行排序而产生的 n<sup>2</sup> log(n) 性能。

@param list 要排序的列表。
@param c 确定列表顺序的比较器。<tt>null</tt> 值指示应该使用元素的<i>自然顺序</i>。
@throws ClassCastException 如果列表中包含不可使用指定比较器<i>相互比较</i> 的元素。
@throws UnsupportedOperationException 如果指定列表的列表迭代器不支持 <tt>set</tt> 操作。
@see Comparator

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Collections.binarySearch(java.util.List<? extends java.lang.Comparable<? super T>> list, T key)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用二分搜索法搜索指定列表，以获得指定对象。在进行此调用之前，必须根据列表元素的{@linkplain Comparable 自然顺序}对列表进行升序排序（通过 {@link #sort(List)} 方法）。如果没有对列表进行排序，则结果是不确定的。如果列表包含多个等于指定对象的元素，则无法保证找到的是哪一个。

<p>此方法对“随机访问”列表运行 log(n) 次（它提供接近固定时间的位置访问）。如果指定列表没有实现 {@link RandomAccess} 接口并且是一个大型列表，则此方法将执行基于迭代器的二分搜索，执行 O(n) 次链接遍历和 O(log n) 次元素比较。

@param list 要搜索的列表。
@param key 要搜索的键。
@return 如果搜索键包含在列表中，则返回搜索键的索引；否则返回 <tt>(-(<i>插入点</i>) - 1)</tt>。<i>插入点</i> 被定义为将键插入列表的那一点：即第一个大于此键的元素索引；如果列表中的所有元素都小于指定的键，则为 <tt>list.size()</tt>。注意，这保证了当且仅当此键被找到时，返回的值将 &gt;= 0。
@throws ClassCastException 如果列表中包含不<i>可相互比较</i> 的元素（例如，字符串和整数），或者搜索键无法与列表的元素进行相互比较。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Collections.binarySearch(java.util.List<? extends T> list, T key, java.util.Comparator<? super T> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用二分搜索法搜索指定列表，以获得指定对象。在进行此调用之前，必须根据指定的比较器对列表进行升序排序（通过 {@link #sort(List, Comparator) sort(List, Comparator)} 方法）。如果没有对列表进行排序，则结果是不确定的。如果列表包含多个等于指定对象的元素，则无法保证找到的是哪一个。

<p>此方法对“随机访问”的列表运行 log(n) 次（它提供接近固定时间的位置访问）。如果指定列表没有实现 {@link RandomAccess} 接口并且是一个大型列表，则此方法将执行基于迭代器的二分搜索，执行 O(n) 次链接遍历和 O(log n) 次元素比较。

@param list 要搜索的列表。
@param key 要搜索的键。
@param c 排序列表的比较器。<tt>null</tt> 值指示应该使用元素的{@linkplain Comparable 自然顺序}。
@return 如果搜索键包含在列表中，则返回搜索键的索引；否则返回 <tt>(-(<i>插入点</i>) - 1)</tt>。<i>插入点</i> 被定义为将键插入列表的那一点：即第一个大于此键的元素索引；如果列表中的所有元素都小于指定的键，则为 <tt>list.size()</tt>。注意，这保证了当且仅当此键被找到时，返回的值将 &gt;= 0。
@throws ClassCastException 如果列表中包含使用指定的比较器不<i>可相互比较</i> 的元素，或者使用此比较器无法相互比较搜索键与列表元素。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Collections.reverse(java.util.List<?> list)
<!-- END KEY -->
<!-- BEGIN DATA -->
反转指定列表中元素的顺序。<p>

此方法以线性时间运行。

@param  list 元素要被反转的列表。
@throws UnsupportedOperationException 如果指定列表或其列表迭代器不支持 <tt>set</tt> 操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Collections.shuffle(java.util.List<?> list)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认随机源对指定列表进行置换。所有置换发生的可能性都是大致相等的。<p>

前面描述中使用了不确定的词“大致”，因为随机源只是大致上独立选择位的无偏源。如果它是一个随机选择位的最佳源，那么算法将完全一致的选择置换。<p>

此实现向后遍历列表，从最后一个元素一直到第二个元素，将随机选择的元素重复交换到“当前位置”。元素是从列表的一部分随机选择的，该部分列表从第一个元素一直到当前位置（包括）。<p>

此方法以线性时间运行。如果指定列表没有实现 {@link RandomAccess} 接口并且是一个大型列表，则此实现在改组列表前将指定列表转储到数组中，并将改组后的数组转储回列表中。这避免了二次行为，该行为是原地改组一个“有序访问”列表引起的。

@param list 要改组的列表。
@throws UnsupportedOperationException 如果指定列表或其列表迭代器不支持 <tt>set</tt> 操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Collections.shuffle(java.util.List<?> list, Random rnd)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的随机源对指定列表进行置换。所有置换发生的可能性都是相等的，假定随机源是公平的。<p>

此实现向后遍历列表，从最后一个元素一直到第二个元素，将随机选择的元素重复交换到&ldquo;当前位置&rdquo;。元素是从列表的一部分随机选择的，该部分列表从第一个元素一直到当前位置（包括）。<p>

此方法以线性时间运行。如果指定列表没有实现 {@link RandomAccess} 接口并且是一个大型列表，则此实现在改组列表前将指定列表转储到一个数组中，并将改组后的数组转储回列表中。这避免了二次行为，该行为是原地改组一个&ldquo;有序访问&rdquo;列表引起的。

@param list 要改组的列表。
@param rnd 用来改组列表的随机源。
@throws UnsupportedOperationException 如果指定列表或其列表迭代器不支持 <tt>set</tt> 操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Collections.swap(java.util.List<?> list, int i, int j)
<!-- END KEY -->
<!-- BEGIN DATA -->
在指定列表的指定位置处交换元素。（如果指定位置相同，则调用此方法不会更改列表。）

@param list 进行元素交换的列表。
@param i 要交换的一个元素的索引。
@param j 要交换的另一个元素的索引。
@throws IndexOutOfBoundsException 如果 <tt>i</tt> 或 <tt>j</tt> 超出范围 (i &lt; 0 || i &gt;= list.size() || j &lt; 0 || j &gt;= list.size())。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Collections.fill(java.util.List<? super T> list, T obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定元素替换指定列表中的所有元素。 <p>

此方法以线性时间运行。

@param  list 使用指定元素填充的列表。
@param  obj 用来填充指定列表的元素。
@throws UnsupportedOperationException 如果指定列表或其列表迭代器不支持 <tt>set</tt> 操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Collections.copy(java.util.List<? super T> dest, java.util.List<? extends T> src)
<!-- END KEY -->
<!-- BEGIN DATA -->
将所有元素从一个列表复制到另一个列表。执行此操作后，目标列表中每个已复制元素的索引将等同于源列表中该元素的索引。目标列表的长度至少必须等于源列表。如果目标列表更长一些，也不会影响目标列表中的其余元素。<p>

此方法以线性时间运行。

@param  dest 目标列表。
@param  src 源列表。
@throws IndexOutOfBoundsException 如果目标列表太小而无法包含整个源列表。
@throws UnsupportedOperationException 如果目标列表的列表迭代器不支持 <tt>set</tt> 操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static T extends java.lang.Object & java.lang.Comparable<? super T> java.util.Collections.min(java.util.Collection<? extends T> coll)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据元素的<i>自然顺序</i> 返回给定 collection 的最小元素。collection 中的所有元素都必须实现 <tt>Comparable</tt> 接口。此外，collection 中的所有元素都必须是<i>可相互比较的</i>（也就是说，对于 collection 中的任意 <tt>e1</tt> 和 <tt>e2</tt> 元素，<tt>e1.compareTo(e2)</tt> 不得抛出 <tt>ClassCastException</tt>）。<p>

此方法在整个 collection 上进行迭代，所以它需要的时间与 collection 的大小成正比。

@param coll 将确定其最小元素的 collection。
@return 根据元素的<i>自然顺序</i>，返回给定 collection 的最小元素。
@throws ClassCastException 如果 collection 包含不<i>可相互比较</i> 的元素（例如，字符串和整数）。
@throws NoSuchElementException 如果 collection 为空。
@see Comparable

<!-- END DATA -->
<!-- BEGIN KEY -->
public static T java.util.Collections.min(java.util.Collection<? extends T> coll, java.util.Comparator<? super T> comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定比较器产生的顺序，返回给定 collection 的最小元素。collection 中的所有元素都必须可通过指定比较器<i>相互比较</i>（也就是说，对于 collection 中的任意 <tt>e1</tt> 和 <tt>e2</tt> 元素，<tt>comp.compare(e1, e2)</tt> 不得抛出 <tt>ClassCastException</tt>）。<p>

此方法在整个 collection 上进行迭代，所以它需要的时间与 collection 的大小成正比。

@param  coll 将确定其最小元素的 collection。
@param  comp 用来确定最小元素的比较器。<tt>null</tt> 值指示应该使用元素的<i>自然顺序</i>。
@return 根据指定比较器返回给定 collection 的最小元素。
@throws ClassCastException 如果 collection 中包含不可使用指定比较器<i>相互比较</i> 的元素。
@throws NoSuchElementException 如果 collection 为空。
@see Comparable

<!-- END DATA -->
<!-- BEGIN KEY -->
public static T extends java.lang.Object & java.lang.Comparable<? super T> java.util.Collections.max(java.util.Collection<? extends T> coll)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据元素的<i>自然顺序</i>，返回给定 collection 的最大元素。collection 中的所有元素都必须实现 <tt>Comparable</tt> 接口。此外，collection 中的所有元素都必须是<i>可相互比较的</i>（也就是说，对于 collection 中的任意 <tt>e1</tt> 和 <tt>e2</tt> 元素，<tt>e1.compareTo(e2)</tt> 不得抛出 <tt>ClassCastException</tt>）。<p>

此方法在整个 collection 上进行迭代，所以它需要的时间与 collection 的大小成正比。

@param coll 将确定其最大元素的 collection。
@return 根据元素的<i>自然顺序</i> 返回给定 collection 的最大元素。
@throws ClassCastException 如果 collection 包含不<i>可相互比较</i> 的元素（例如，字符串和整数）。
@throws NoSuchElementException 如果 collection 为空。
@see Comparable

<!-- END DATA -->
<!-- BEGIN KEY -->
public static T java.util.Collections.max(java.util.Collection<? extends T> coll, java.util.Comparator<? super T> comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定比较器产生的顺序，返回给定 collection 的最大元素。collection 中的所有元素都必须可通过指定比较器<i>相互比较</i>（也就是说，对于 collection 中的任意 <tt>e1</tt> 和 <tt>e2</tt> 元素，<tt>comp.compare(e1, e2)</tt> 不得抛出 <tt>ClassCastException</tt>）。<p>

此方法在整个 collection 上进行迭代，所以它需要的时间与 collection 的大小成正比。

@param coll 将确定其最大元素的 collection。
@param comp 用来确定最大元素的比较器。<tt>null</tt> 值指示应该使用元素的<i>自然顺序</i>。
@return  根据指定比较器返回给定 collection 的最大元素。
@throws ClassCastException 如果 collection 中包含不可使用指定比较器<i>相互比较</i> 的元素。
@throws NoSuchElementException 如果 collection 为空。
@see Comparable

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Collections.rotate(java.util.List<?> list, int distance)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定的距离轮换指定列表中的元素。调用此方法后，对于 <tt>0</tt> 和 <tt>list.size()-1</tt>（包括）之间的所有 <tt>i</tt> 值，索引 <tt>i</tt> 处的元素将是以前位于索引 <tt>(i - distance) mod list.size()</tt> 处的元素。（此方法对列表的大小没有任何影响。）

<p>例如，假设 <tt>list</tt> 包含 <tt>[t, a, n, k, s]</tt>。在调用 <tt>Collections.rotate(list, 1)</tt>（或 <tt>Collections.rotate(list, -4)</tt>）之后，<tt>list</tt> 将包含 <tt>[s, t, a, n, k]</tt>。

<p>注意，此方法用于子列表时非常有用，可以在保留其余元素顺序的同时，在列表中移动一个或多个元素。例如，以下语句可以将索引 <tt>j</tt> 处的元素向前移动到位置 <tt>k</tt> 上（<tt>k</tt> 必须大于等于 <tt>j</tt>）：
 <pre>
     Collections.rotate(list.subList(j, k+1), -1);
 </pre>
为了具体说明这一点，假设 <tt>list</tt> 包含 <tt>[a, b, c, d, e]</tt>。要将索引 <tt>1</tt> 处的元素（<tt>b</tt>）向前移动两个位置，请执行以下调用：
 <pre>
     Collections.rotate(l.subList(1, 4), -1);
 </pre>
得到的列表是 <tt>[a, c, d, b, e]</tt>。
 
<p>要将多个元素向前移动，则需要增加循环移动距离的绝对值。要将元素向后移动，请使用一个正的移动距离。

<p>如果指定列表是一个小型列表，或者它实现了 {@link RandomAccess} 接口，则此实现会将第一个元素交换到它应该去的位置上，然后重复执行交换操作，将替换的元素交换到它们应该去的位置上，直到替换的元素交换成第一个元素。如有必要，需要在第二个或后续元素上重复这个过程，直到完成轮换。如果指定的列表是大型列表并且没有实现 <tt>RandomAccess</tt> 接口，则此实现会将列表拆分成位于 <tt>-distance mod size</tt> 索引两边的两个子列表视图。然后在每个子列表视图上调用 {@link #reverse(List)} 方法，并最终在整个列表上调用此方法。有关这两种算法更为完整的描述，请参阅 Jon Bentley 撰写的 <i>Programming Pearls</i> (Addison-Wesley, 1986) 一书中的第 2.3 小节。

@param list 要轮换的列表。
@param distance 列表轮换的距离。在此值上没有任何限制；它可以是 0、负数或大于 <tt>list.size()</tt> 的数。
@throws UnsupportedOperationException 如果指定列表或其列表迭代器不支持 <tt>set</tt> 操作。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.util.Collections.replaceAll(java.util.List<T> list, T oldVal, T newVal)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用另一个值替换列表中出现的所有某一指定值。更确切地讲，使用 <tt>newVal</tt> 替换 <tt>list</tt> 中满足 <tt>(oldVal==null ? e==null : oldVal.equals(e))</tt> 的每个 <tt>e</tt> 元素。（此方法对列表的大小没有任何影响。）

@param list 在其中进行替换的列表。
@param oldVal 将被替换的原值。
@param newVal 替换 <tt>oldVal</tt> 的新值。
@return 如果 <tt>list</tt> 包含一个或多个满足 <tt>(oldVal==null ? e==null : oldVal.equals(e))</tt> 的 <tt>e</tt> 元素，则返回 <tt>true</tt>。
@throws UnsupportedOperationException 如果指定列表或其列表迭代器不支持 <tt>set</tt> 操作。
@since  1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Collections.indexOfSubList(java.util.List<?> source, java.util.List<?> target)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定源列表中第一次出现指定目标列表的起始位置；如果没有出现这样的列表，则返回 -1。更确切地讲，返回满足 <tt>source.subList(i, i+target.size()).equals(target)</tt> 的最低索引 <tt>i</tt>；如果不存在这样的索引，则返回 -1。（如果 <tt>target.size() > source.size()</tt>，则返回 -1。）

<p>此实现使用 "brute force" 扫描技术在源列表上进行扫描，依次在每个位置上寻找与目标匹配的列表项。

@param source 在该列表中搜索第一次出现的 <tt>target</tt>。
@param target 作为 <tt>source</tt> 子列表搜索的列表。
@return 返回指定源列表中第一次出现指定目标列表的起始位置；如果没有出现这样的列表，则返回 -1。
@since  1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Collections.lastIndexOfSubList(java.util.List<?> source, java.util.List<?> target)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定源列表中最后一次出现指定目标列表的起始位置；如果没有出现这样的列表，则返回 -1。更确切地讲，返回满足 <tt>source.subList(i, i+target.size()).equals(target)</tt> 的最高索引 <tt>i</tt>；如果不存在这样的索引，则返回 -1。（如果 <tt>target.size() > source.size()</tt>，则返回 -1。）

<p>此实现使用 "brute force" 迭代技术在源列表上进行迭代，依次在每个位置上寻找与目标匹配的列表项。

@param source 在该列表中搜索最后一次出现的 <tt>target</tt>。
@param target 作为 <tt>source</tt> 子列表搜索的列表。
@return 返回指定源列表中最后一次出现指定目标列表的起始位置；如果没有出现这样的列表，则返回 -1。
@since  1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Collection<T> java.util.Collections.unmodifiableCollection(java.util.Collection<? extends T> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 collection 的不可修改视图。此方法允许模块为用户提供对内部 collection 的“只读”访问。在返回的 collection 上执行的查询操作将“读完”指定的 collection。试图修改返回的 collection（不管是直接修改还是通过其迭代器进行修改）将导致抛出 <tt>UnsupportedOperationException</tt>。<p>

返回的 collection <i>不会</i> 将 hashCode 和 equals 操作传递给底层实现 collection，但这依赖于 <tt>Object</tt> 的 <tt>equals</tt> 和 <tt>hashCode</tt> 方法。在底层实现 collection 是一个 set 或是一个列表的情况下，有必要遵守这些操作的协定。<p>

如果指定 collection 是可序列化的，则返回的 collection 也将是可序列化的。 

@param c 将为其返回一个不可修改视图的 collection。
@return 指定 collection 的不可修改视图。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Set<T> java.util.Collections.unmodifiableSet(java.util.Set<? extends T> s)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 set 的不可修改视图。此方法允许模块为用户提供对内部 set 的“只读”访问。在返回的 set 上执行的查询操作将“读完”指定的 set。试图修改返回的 set（不管是直接修改还是通过其迭代器进行修改）将导致抛出 <tt>UnsupportedOperationException</tt>。<p>

如果指定 set 是可序列化的，则返回的 set 也将是可序列化的。 

@param  s 将为其返回一个不可修改视图的 set。
@return 指定 set 的不可修改视图。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.SortedSet<T> java.util.Collections.unmodifiableSortedSet(java.util.SortedSet<T> s)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定有序 set 的不可修改视图。此方法允许模块为用户提供对内部有序 set 的“只读”访问。在返回的有序 set 上执行的查询操作将“读完”指定的有序 set。试图修改返回的有序 set（无论是直接修改、通过其迭代器修改，还是通过其 <tt>subSet</tt>、<tt>headSet</tt> 或 <tt>tailSet</tt> 视图修改）将导致抛出 <tt>UnsupportedOperationException</tt>。<p>

如果指定有序 set 是可序列化的，则返回的有序 set 也将是可序列化的。 

@param s 将为其返回一个不可修改视图的有序 set。
@return 指定有序 set 的不可修改视图。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.List<T> java.util.Collections.unmodifiableList(java.util.List<? extends T> list)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定列表的不可修改视图。此方法允许模块为用户提供对内部列表的“只读”访问。在返回的列表上执行的查询操作将“读完”指定的列表。试图修改返回的列表（不管是直接修改还是通过其迭代器进行修改）将导致抛出 <tt>UnsupportedOperationException</tt>。<p>

如果指定列表是可序列化的，则返回的列表也将是可序列化的。类似地，如果指定列表实现 {@link RandomAccess}，则返回列表也将这样做。

@param list 将为其返回一个不可修改视图的列表。
@return 指定列表的不可修改视图。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Map<K, V> java.util.Collections.unmodifiableMap(java.util.Map<? extends K, ? extends V> m)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定映射的不可修改视图。此方法允许模块为用户提供对内部映射的“只读”访问。在返回的映射上执行的查询操作将“读完”指定的映射。试图修改返回的映射（不管是直接修改还是通过其 collection 视图进行修改）将导致抛出 <tt>UnsupportedOperationException</tt>。<p>

如果指定映射是可序列化的，则返回的映射也将是可序列化的。 

@param  m 将为其返回一个不可修改视图的映射。
@return 指定映射的不可修改视图。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.SortedMap<K, V> java.util.Collections.unmodifiableSortedMap(java.util.SortedMap<K, ? extends V> m)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定有序映射的不可修改视图。此方法允许模块为用户提供对内部有序映射的&ldquo;只读&rdquo;访问。在返回的有序映射上执行的查询操作将“读完”指定的有序映射。试图修改返回的有序映射（无论是直接修改、通过其 collection 视图修改，还是通过其 <tt>subMap</tt>、<tt>headMap</tt> 或 <tt>tailMap</tt> 视图修改）将导致抛出 <tt>UnsupportedOperationException</tt>。<p>

如果指定的有序映射是可序列化的，则返回的有序映射也将是可序列化的。 

@param  m 将为其返回一个不可修改视图的有序映射。
@return 指定有序映射的不可修改视图。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Collection<T> java.util.Collections.synchronizedCollection(java.util.Collection<T> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 collection 支持的同步（线程安全的）collection。为了保证按顺序访问，必须通过返回的 collection 完成<strong>所有</strong>对底层实现 collection 的访问。<p>

在返回的 collection 上进行迭代时，用户必须手工在返回的 collection 上进行同步：
 <pre>
  Collection c = Collections.synchronizedCollection(myCollection);
     ...
  synchronized(c) {
      Iterator i = c.iterator(); // Must be in the synchronized block
      while (i.hasNext())
         foo(i.next());
  }
 </pre>
不遵从此建议将导致无法确定的行为。

<p>返回的 collection <i>不会</i> 将 <tt>hashCode</tt> 和 <tt>equals</tt> 操作传递给底层实现 collection，但这依赖于 <tt>Object</tt> 的 equals 和 hashCode 方法。在底层实现 collection 是一个 set 或一个列表的情况下，有必要遵守这些操作的协定。<p>

如果指定 collection 是可序列化的，则返回的 collection 也将是可序列化的。 

@param  c 被“包装”在同步 collection 中的 collection。
@return 指定 collection 的同步视图。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Set<T> java.util.Collections.synchronizedSet(java.util.Set<T> s)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 set 支持的同步（线程安全的）set。为了保证按顺序访问，必须通过返回的 set 完成对<strong>所有</strong>底层实现 set 的访问。<p>

在返回的 set 上进行迭代时，用户必须手工在返回的 set 上进行同步：
 <pre>
  Set s = Collections.synchronizedSet(new HashSet());
      ...
  synchronized(s) {
      Iterator i = s.iterator(); // Must be in the synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 </pre>
不遵从此建议将导致无法确定的行为。

<p>如果指定 set 是可序列化的，则返回的 set 也将是可序列化的。

@param  s 被“包装”在同步 set 中的 set。
@return 指定 set 的同步视图。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.SortedSet<T> java.util.Collections.synchronizedSortedSet(java.util.SortedSet<T> s)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定有序 set 支持的同步（线程安全的）有序 set。为了保证按顺序访问，必须通过返回的有序 set（或其视图）完成对<strong>所有</strong>底层实现有序 set 的访问。<p>

在返回的有序 set 上或者其任意 <tt>subSet</tt>、<tt>headSet</tt> 或 <tt>tailSet</tt> 视图上进行迭代时，用户必须手工在返回的有序 set 上进行同步。
 <pre>
  SortedSet s = Collections.synchronizedSortedSet(new TreeSet());
      ...
  synchronized(s) {
      Iterator i = s.iterator(); // Must be in the synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 </pre>
或者：
 <pre>
  SortedSet s = Collections.synchronizedSortedSet(new TreeSet());
  SortedSet s2 = s.headSet(foo);
      ...
  synchronized(s) {  // Note: s, not s2!!!
      Iterator i = s2.iterator(); // Must be in the synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 </pre>
不遵从此建议将导致无法确定的行为。

<p>如果指定的有序 set 是可序列化的，则返回的有序 set 也将是可序列化的。

@param  s 被“包装”在同步有序 set 中的有序 set。
@return 指定有序 set 的同步视图。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.List<T> java.util.Collections.synchronizedList(java.util.List<T> list)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定列表支持的同步（线程安全的）列表。为了保证按顺序访问，必须通过返回的列表完成<strong>所有</strong>对底层实现列表的访问。<p>

在返回的列表上进行迭代时，用户必须手工在返回的列表上进行同步：
 <pre>
  List list = Collections.synchronizedList(new ArrayList());
      ...
  synchronized(list) {
      Iterator i = list.iterator(); // Must be in synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 </pre>
不遵从此建议将导致无法确定的行为。

<p>如果指定列表是可序列化的，则返回的列表也将是可序列化的。

@param  list 被“包装”在同步列表中的列表。
@return 指定列表的同步视图。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Map<K, V> java.util.Collections.synchronizedMap(java.util.Map<K, V> m)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由指定映射支持的同步（线程安全的）映射。为了保证按顺序访问，必须通过返回的映射完成<strong>所有</strong>对底层实现映射的访问。<p>

在返回映射的任意 collection 视图上进行迭代时，用户必须手工在返回的映射上进行同步：
 <pre>
  Map m = Collections.synchronizedMap(new HashMap());
      ...
  Set s = m.keySet();  // Needn't be in synchronized block
      ...
  synchronized(m) {  // Synchronizing on m, not s!
      Iterator i = s.iterator(); // Must be in synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 </pre>
不遵从此建议将导致无法确定的行为。

<p>如果指定映射是可序列化的，则返回的映射也将是可序列化的。

@param  m 被“包装”在同步映射中的映射。
@return 指定映射的同步视图。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.SortedMap<K, V> java.util.Collections.synchronizedSortedMap(java.util.SortedMap<K, V> m)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定有序映射支持的同步（线程安全的）有序映射。为了保证按顺序访问，必须通过返回的有序映射（或其视图）完成对<strong>所有</strong>底层有序映射的访问。<p>

当在返回的有序映射的 collection 视图或者其任何 <tt>subMap</tt>、<tt>headMap</tt> 或 <tt>tailMap</tt> 视图进行迭代时，用户必须手工在该映射上进行同步：
 <pre>
  SortedMap m = Collections.synchronizedSortedMap(new TreeMap());
      ...
  Set s = m.keySet();  // Needn't be in synchronized block
      ...
  synchronized(m) {  // Synchronizing on m, not s!
      Iterator i = s.iterator(); // Must be in synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 </pre>
或者：
 <pre>
  SortedMap m = Collections.synchronizedSortedMap(new TreeMap());
  SortedMap m2 = m.subMap(foo, bar);
      ...
  Set s2 = m2.keySet();  // Needn't be in synchronized block
      ...
  synchronized(m) {  // Synchronizing on m, not m2 or s2!
      Iterator i = s.iterator(); // Must be in synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 </pre>
不遵从此建议将导致无法确定的行为。

<p>如果指定的有序映射是可序列化的，则返回的有序映射也将是可序列化的。

@param  m 被“包装”在同步有序映射中的有序映射。
@return 指定有序映射的同步视图。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Collection<E> java.util.Collections.checkedCollection(java.util.Collection<E> c, java.lang.Class<E> type)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 collection 的一个动态类型安全视图。试图插入一个错误类型的元素将导致立即抛出 <tt>ClassCastException</tt>。假设在生成动态类型安全视图之前，collection 不包含任何类型不正确的元素，并且所有对该 collection 的后续访问都通过该视图进行，则可以<i>保证</i> 该 collection 不包含类型不正确的元素。

<p>一般的编程语言机制中都提供了编译时（静态）类型检查，但是一些未经检查的强制转换可能会使此机制无效。通常这不是一个问题，因为编译器会在所有这类未经检查的操作上发出警告。但有的时候，只进行单独的静态类型检查并不够。例如，假设将 collection 传递给一个第三方库，则库代码不能通过插入一个错误类型的元素来毁坏 collection。

<p>动态类型安全视图的另一个用途是调试。假设某个程序运行失败并抛出 <tt>ClassCastException</tt>，这指示一个类型不正确的元素被放入已参数化 collection 中。不幸的是，该异常可以发生在插入错误元素之后的任何时间，因此，这通常只能提供很少或无法提供任何关于问题真正来源的信息。如果问题是可再现的，那么可以暂时修改程序，使用一个动态类型安全视图来包装该 collection，通过这种方式可快速确定问题的来源。例如，以下声明：
 <pre>
     Collection&lt;String&gt; c = new HashSet&lt;String&gt;();
 </pre>
可以暂时用下面的声明代替：
 <pre>
     Collection&lt;String&gt; c = Collections.checkedCollection(
         new HashSet&lt;String&gt;(), String.class);
 </pre>
再次运行程序会造成它在将类型不正确的元素插入 collection 的地方失败，从而清楚地识别问题的来源。问题得以解决后，可以将修改后的声明转换回原来的声明。

<p>返回的 collection <i>不会</i> 将 hashCode 和 equals 操作传递给底层实现 collection，但这依赖于 <tt>Object</tt> 的 <tt>equals</tt> 和 <tt>hashCode</tt> 方法。在底层实现 collection 是一个 set 或一个列表的情况下，有必要遵守这些操作的协定。

<p>如果指定 collection 是可序列化的，则返回的 collection 也将是可序列化的。

@param c 将返回其动态类型安全视图的 collection
@param type 允许 <tt>c</tt> 持有的元素类型
@return 指定 collection 的动态安全类型视图
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Set<E> java.util.Collections.checkedSet(java.util.Set<E> s, java.lang.Class<E> type)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 set 的一个动态类型安全视图。试图插入一个错误类型的元素将导致立即抛出 <tt>ClassCastException</tt>。假设在生成动态类型安全视图之前，set 不包含任何类型不正确的元素，并且所有对该 set 的后续访问都通过该视图进行，则可以<i>保证</i> 该 set 不包含类型不正确的元素。

<p>可以在 {@link #checkedCollection checkedCollection} 方法的文档中找到有关使用动态类型安全视图的讨论。

<p>如果指定 set 是可序列化的，则返回的 set 也将是可序列化的。

@param s 将返回其动态类型安全视图的 set
@param type 允许 <tt>s</tt> 持有的元素类型
@return 指定 set 的动态安全类型视图
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.SortedSet<E> java.util.Collections.checkedSortedSet(java.util.SortedSet<E> s, java.lang.Class<E> type)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定有序 set 的一个动态类型安全视图。试图插入一个错误类型的元素将导致立即抛出 <tt>ClassCastException</tt>。假设在生成动态类型安全视图之前，有序 set 不包含任何类型不正确的元素，并且所有对该有序 set 的后续访问都通过该视图进行，则可以<i>保证</i> 该有序 set 不包含类型不正确的元素。

<p>可以在 {@link #checkedCollection checkedCollection} 方法的文档中找到有关使用动态类型安全视图的讨论。

<p>如果指定的有序 set 是可序列化的，则返回的有序 set 也将是可序列化的。

@param s  将返回其动态类型安全视图的 set
@param type 允许 <tt>s</tt> 持有的元素类型
@return 指定有序 set 的动态安全类型视图
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.List<E> java.util.Collections.checkedList(java.util.List<E> list, java.lang.Class<E> type)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定列表的一个动态类型安全视图。试图插入一个错误类型的元素将导致立即抛出 <tt>ClassCastException</tt>。假设在生成动态类型安全视图之前，列表不包含任何类型不正确的元素，并且所有对该列表的后续访问都通过该视图进行，则可以<i>保证</i> 此列表不包含类型不正确的元素。

<p>可以在 {@link #checkedCollection checkedCollection} 方法的文档中找到有关使用动态类型安全视图的讨论。

<p>如果指定列表是可序列化的，则返回的列表也将是可序列化的。

@param list 将返回其动态类型安全视图的列表
@param type 允许 <tt>list</tt> 持有的元素类型
@return 指定列表的一个动态安全类型视图
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Map<K, V> java.util.Collections.checkedMap(java.util.Map<K, V> m, java.lang.Class<K> keyType, java.lang.Class<V> valueType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定映射的一个动态类型安全视图。试图插入一个具有错误类型键或值的映射关系将导致立即抛出<tt> ClassCastException</tt>。类似地，试图修改当前与键关联的值（无论是直接通过映射自身，还是通过一个从该映射{@link Map#entrySet() 项集}视图中获得的 {@link Map.Entry} 实例）都将导致立即抛出 <tt>ClassCastException</tt>。

<p>假设在生成动态类型安全视图之前，映射中不包含任何类型不正确的键或值，并且所有对映射的后续访问都通过该视图（或其 collection 视图之一）进行，则可以<i>保证</i> 该映射不包含类型不正确的键或值。

<p>可以在 {@link #checkedCollection checkedCollection} 方法的文档中找到有关使用动态类型安全视图的讨论。

<p>如果指定映射是可序列化的，则返回的映射也将是可序列化的。

@param m 将返回其动态类型安全视图的映射
@param keyType 允许 <tt>m</tt> 持有的键类型
@param valueType 允许 <tt>m</tt> 持有的值类型
@return 指定映射的动态类型安全视图
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.SortedMap<K, V> java.util.Collections.checkedSortedMap(java.util.SortedMap<K, V> m, java.lang.Class<K> keyType, java.lang.Class<V> valueType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定有序映射的一个动态类型安全视图。试图插入一个具有错误类型键或值的映射关系将导致立即抛出 <tt>ClassCastException</tt>。类似地，试图修改当前与键关联的值（无论是直接通过映射自身，还是通过一个从该映射{@link Map#entrySet() 项集}视图中获得的 {@link Map.Entry} 实例）将导致立即抛出 <tt>ClassCastException</tt>。

<p>假设在生成动态类型安全视图之前，映射中不包含任何类型不正确的键或值，并且所有对映射的后续访问都通过该视图（或其 collection 视图之一）进行，则可以<i>保证</i> 此映射不包含类型不正确的键或值。

<p>可以在 {@link #checkedCollection checkedCollection} 方法的文档中找到有关使用动态类型安全视图的讨论。

<p>如果指定映射是可序列化的，则返回的映射也将是可序列化的。

@param m 将返回其动态类型安全视图的映射
@param keyType 允许 <tt>m</tt> 持有的键的类型
@param valueType 允许 <tt>m</tt> 持有的值的类型
@return 指定映射的动态类型安全视图
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Set<T> java.util.Collections.emptySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回空的 set（不可变的）。此 set 是可序列化的。与 like-named 字段不同，此方法是参数化的。

<p>以下示例演示了获得空 set 的类型安全 (type-safe) 方式：
 <pre>
     Set&lt;String&gt; s = Collections.emptySet();
 </pre>
实现注意事项：实现此方法不需要为每次调用创建一个单独的 <tt>Set</tt> 对象。使用此方法的开销与使用 like-named 字段相当。（与此方法不同，该字段不提供类型安全。）

@see #EMPTY_SET
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.List<T> java.util.Collections.emptyList()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回空的列表（不可变的）。此列表是可序列化的。

<p>以下示例演示了获得空列表的类型安全方式：
 <pre>
     List&lt;String&gt; s = Collections.emptyList();
 </pre>
实现注意事项：实现此方法不需要为每次调用创建一个单独的 <tt>List</tt> 对象。使用此方法的开销与使用 like-named 字段相当。（与此方法不同，该字段不提供类型安全。）

@see #EMPTY_LIST
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.Map<K, V> java.util.Collections.emptyMap()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回空的映射（不可变的）。此映射是可序列化的。

<p>以下示例演示了获得空 set 的类型安全方式：
 <pre>
     Map&lt;String, Date&gt; s = Collections.emptyMap();
 </pre>
实现注意事项：实现此方法不需要为每次调用创建一个单独的 <tt>Map</tt> 对象。使用此方法的开销与使用 like-named 字段相当。（与此方法不同，该字段不提供类型安全。）

@see #EMPTY_MAP
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Set<T> java.util.Collections.singleton(T o)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个只包含指定对象的不可变 set。返回的 set 是可序列化的。

@param o 将存储到返回 set 中的单独对象。
@return 一个只包含指定对象的不可变 set。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.List<T> java.util.Collections.singletonList(T o)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个只包含指定对象的不可变列表。返回的列表是可序列化的。

@param o 将存储到返回列表中的单独对象。
@return 一个只包含指定对象的不可变列表。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Map<K, V> java.util.Collections.singletonMap(K key, V value)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个不可变的映射，它只将指定键映射到指定值。返回的映射是可序列化的。

@param key 将存储到返回映射中的单独键。
@param value 返回的映射将 <tt>key</tt> 映射到的值。
@return 只包含指定键-值映射关系的不可变映射。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.List<T> java.util.Collections.nCopies(int n, T o)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由指定对象的 <tt>n</tt> 个副本组成的不可变列表。新分配的数据对象非常小（它只包含一个对该数据对象的引用）。在通过与 <tt>List.addAll</tt> 方法组合来增大列表时，此方法很有用。返回的列表是可序列化的。

@param  n 返回列表中的元素数。
@param  o 重复出现在返回列表中的元素。
@return 由指定对象 <tt>n</tt> 个副本组成的不可变列表。
@throws IllegalArgumentException 如果 n &lt; 0。
@see    List#addAll(Collection)
@see    List#addAll(int, Collection)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Comparator<T> java.util.Collections.reverseOrder()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个比较器，它强行逆转实现了 <tt>Comparable</tt> 接口的对象 collection 的<i>自然顺序</i>。（自然顺序是通过对象自身的 <tt>compareTo</tt> 方法强行排序的。）此方法允许使用单个语句，以逆自然顺序对实现了 <tt>Comparable</tt> 接口的对象 collection（或数组）进行排序（或维护）。例如，假设 a 是一个字符串数组。那么：<pre>
 		Arrays.sort(a, Collections.reverseOrder());
</pre> 将按照逆字典（字母）顺序对数组进行排序。<p>

返回的比较器是可序列化的。

@return 返回一个比较器，它强行逆转实现了 <tt>Comparable</tt> 接口的对象 collection 的<i>自然顺序</i>。
@see Comparable

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Comparator<T> java.util.Collections.reverseOrder(java.util.Comparator<T> cmp)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个比较器，它强行逆转指定比较器的顺序。如果指定比较器为 null，则此方法等同于 {@link #reverseOrder()}（换句话说，它返回一个比较器，该比较器将强行逆转实现了 Comparable 接口的对象 collection 的<i>自然顺序</i>）。

<p>返回的比较器是可序列化的（假设指定的比较器也是可序列化的或者为 null）。

@return 强行逆转指定比较器顺序的比较器。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Enumeration<T> java.util.Collections.enumeration(java.util.Collection<T> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个指定 collection 上的枚举。此方法提供与遗留 API 的互操作性，遗留 API 需要一个枚举作为输入。

@param  c 将返回其枚举的 collection。
@return 指定 collection 上的一个枚举。
@see Enumeration

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.ArrayList<T> java.util.Collections.list(java.util.Enumeration<T> e)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个数组列表，它按返回顺序包含指定枚举返回的元素。此方法提供返回枚举的遗留 API 与需要 collection 的新 API 之间的互操作性。

@param e 为返回的数组列表提供元素的枚举
@return 包含指定枚举返回元素的数组列表。
@since 1.4
@see Enumeration
@see ArrayList

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Collections.frequency(java.util.Collection<?> c, Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 collection 中等于指定对象的元素数。更确切地讲，返回 collection 中满足 <tt>(o == null ? e == null : o.equals(e))</tt> 的 <tt>e</tt> 元素的数量。 

@param c 在其中确定 <tt>o</tt> 出现频率的 collection
@param o 将确定出现频率的对象
@throws NullPointerException 如果 <tt>c</tt> 为 null
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.util.Collections.disjoint(java.util.Collection<?> c1, java.util.Collection<?> c2)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果两个指定 collection 中没有相同的元素，则返回 <tt>true</tt>。

<p>如果将此方法用在不符合 <tt>Collection</tt> 常规协定的 collection 上，则必须小心。实现可以在任一 collection 上进行迭代，测试元素是否包含在另一个 collection 中（或执行任何等效的计算）。如果任一 collection 使用了一个非标准的相等性测试（比如顺序不是<i>与 equals 一致的</i> {@link SortedSet}，或者 {@link IdentityHashMap} 的键集），则两个 collection 都必须使用相同的非标准相等性测试，否则此方法的结果是不确定的。

<p>注意，允许在两个参数中传递相同的 collection，在这种情况下，当且仅当 collection 为空时此方法返回 true。

@param c1 一个 collection
@param c2 一个 collection
@throws NullPointerException 如果任一 collection 为 null
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.util.Collections.addAll(java.util.Collection<? super T> c, T[] elements)
<!-- END KEY -->
<!-- BEGIN DATA -->
将所有指定元素添加到指定 collection 中。可以分别指定要添加的元素，或者将它们指定为一个数组。此便捷方法的行为与 <tt>c.addAll(Arrays.asList(elements))</tt> 的行为是相同的，但在大多数实现下，此方法运行起来可能要快得多。

<p>在分别指定元素时，此方法提供了将少数元素添加到现有 collection 中的一个便捷方式：
 <pre>
     Collections.addAll(flavors, "Peaches 'n Plutonium", "Rocky Racoon");
 </pre>

@param c 要插入 <tt>elements</tt> 的 collection
@param elements 插入 <tt>c</tt> 的元素
@return 如果 collection 由于调用而发生更改，则返回 <tt>true</tt>
@throws UnsupportedOperationException 如果 <tt>c</tt> 不支持 <tt>add</tt> 操作
@throws NullPointerException 如果 <tt>elements</tt> 包含一个或多个 null 值并且 <tt>c</tt> 不允许使用 null 元素，或者 <tt>c</tt> 或 <tt>elements</tt> 为 <tt>null</tt>
@throws IllegalArgumentException 如果 <tt>elements</tt> 中值的某个属性不允许将它添加到 <tt>c</tt> 中
@see Collection#addAll(Collection)
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Set<E> java.util.Collections.newSetFromMap(java.util.Map<E, java.lang.Boolean> map)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定映射支持的 set。得到的 set 与底层实现映射有相同的顺序、并发性和性能特征。事实上，此工厂方法提供了一个对应于任何 {@link Map} 实现的 {@link Set} 实现。不必在已经有一个对应 {@link Set} 实现（比如 {@link HashMap} 或 {@link TreeMap}）的 {@link Map} 实现上使用此方法。

 <p>每次在此方法返回的 set 上调用方法都将导致在底层实现映射或其 <tt>keySet</tt> 视图上调用该方法一次，并伴随一个异常。<tt>addAll</tt> 方法是作为底层实现映射上的 <tt>put</tt> 调用序列实现的。

 <p>在调用此方法时，指定映射必须为空，并且不能在此方法返回之后直接访问。如果将映射创建为空，直接传递给此方法，并且没有保留对该映射的引用，则这些条件都可以得到保证，如以下代码片段所示：
 <pre>
    Set&lt;Object&gt; weakHashSet = Collections.newSetFromMap(
        new WeakHashMap&lt;Object, Boolean&gt;());
 </pre>

 @param map 底层实现映射
 @return 受映射支持的 set
 @throws IllegalArgumentException 如果 <tt>map</tt> 不为空
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Queue<T> java.util.Collections.asLifoQueue(java.util.Deque<T> deque)
<!-- END KEY -->
<!-- BEGIN DATA -->
以后进先出 (Lifo) {@link Queue} 的形式返回某个 {@link Deque} 的视图。方法 <tt>add</tt> 被映射到 <tt>push</tt>，<tt>remove</tt> 被映射到 <tt>pop</tt> 等等。在希望使用某一方法获取一个 <tt>Queue</tt> 并且需要它具有 Lifo 顺序时，此方法很有用。

 <p>每次在此方法返回的队列上调用方法都将导致在底层实现队列上调用该方法一次，并伴随一个异常。{@link Queue#addAll addAll} 方法是作为底层实现队列上的 {@link Deque#addFirst addFirst} 调用序列实现的。

 @param deque 队列
 @return 队列
 @since  1.6

<!-- END DATA -->
