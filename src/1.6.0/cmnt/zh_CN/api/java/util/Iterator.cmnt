<!-- BEGIN KEY -->
public interface java.util.Iterator
<!-- END KEY -->
<!-- BEGIN DATA -->
对 collection 进行迭代的迭代器。迭代器取代了 Java Collections Framework 中的 Enumeration。迭代器与枚举有两点不同： <ul>
	<li> 迭代器允许调用者利用定义良好的语义在迭代期间从迭代器所指向的 collection 移除元素。
	<li> 方法名称得到了改进。
 </ul><p>

此接口是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

@author  Josh Bloch
@version 1.24, 01/17/04
@see Collection
@see ListIterator
@see Enumeration
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.Iterator.hasNext()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果仍有元素可以迭代，则返回 <tt>true</tt>。（换句话说，如果 <tt>next</tt> 返回了元素而不是抛出异常，则返回 <tt>true</tt>）。

@return 如果迭代器具有多个元素，则返回 <tt>true</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.Iterator.next()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回迭代的下一个元素。

@return 迭代的下一个元素。
@exception NoSuchElementException 没有元素可以迭代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.Iterator.remove()
<!-- END KEY -->
<!-- BEGIN DATA -->
 
从迭代器指向的 collection 中移除迭代器返回的最后一个元素（可选操作）。每次调用 <tt>next</tt> 只能调用一次此方法。如果进行迭代时用调用此方法之外的其他方式修改了该迭代器所指向的 collection，则迭代器的行为是不确定的。

@exception UnsupportedOperationException 如果迭代器不支持 <tt>remove</tt> 操作。

@exception IllegalStateException 如果尚未调用 <tt>next</tt> 方法，或者在上一次调用 <tt>next</tt> 方法之后已经调用了 <tt>remove</tt> 方法。

<!-- END DATA -->
