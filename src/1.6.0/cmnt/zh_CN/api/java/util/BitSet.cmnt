<!-- BEGIN KEY -->
public class java.util.BitSet extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
此类实现了一个按需增长的位向量。位 set 的每个组件都有一个 <code>boolean</code> 值。用非负的整数将 <code>BitSet</code> 的位编入索引。可以对每个编入索引的位进行测试、设置或者清除。通过逻辑与、逻辑或和逻辑异或操作，可以使用一个 <code>BitSet</code> 修改另一个 <code>BitSet</code> 的内容。
 <p>
默认情况下，set 中所有位的初始值都是 <code>false</code>。 
 <p>
每个位 set 都有一个当前大小，也就是该位 set 当前所用空间的位数。注意，这个大小与位 set 的实现有关，所以它可能随实现的不同而更改。位 set 的长度与位 set 的逻辑长度有关，并且是与实现无关而定义的。
 <p>
除非另行说明，否则将 null 参数传递给 <code>BitSet</code> 中的任何方法都将导致 <code>NullPointerException</code>。

<p>在没有外部同步的情况下，多个线程操作一个 <code>BitSet</code> 是不安全的。

@author  Arthur van Hoff
@author  Michael McCloskey
@version 1.60, 02/19/04
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] java.util.BitSet.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
@serialField bits long[]

此 BitSet 中的位。第 i 个位存储在数位位置为 i % 64 的 bits[i/64]中（其中数位位置 0 表示最低有效位，数位位置 63 表示最高有效位）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.BitSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的位 set。所有的位初始均为 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.BitSet(int nbits)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个位 set，它的初始大小足以显式表示索引范围在 <code>0</code> 到 <code>nbits-1</code> 的位。所有的位初始均为 <code>false</code>。 

@param     nbits  位 set 的初始大小。
@exception NegativeArraySizeException 如果指定的初始大小为负。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.BitSet.flip(int bitIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定索引处的位设置为其当前值的补码。
 
@param   bitIndex 要翻转位的索引。
@exception IndexOutOfBoundsException 如果指定的索引为负。
@since   1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.BitSet.flip(int fromIndex, int toIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的 <tt>fromIndex</tt>（包括）到指定的 <tt>toIndex</tt>（不包括）范围内的每个位设置为其当前值的补码。
 
@param  fromIndex 第一个要翻转位的索引。
@param  toIndex 最后一个要翻转位之后那个位的索引。
@exception IndexOutOfBoundsException 如果 <tt>fromIndex</tt> 为负，或者 <tt>toIndex</tt> 为负，或者 <tt>fromIndex</tt> 大于 <tt>toIndex</tt>。
@since   1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.BitSet.set(int bitIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定索引处的位设置为 <code>true</code>。

@param     bitIndex   一个位索引。
@exception IndexOutOfBoundsException 如果指定的索引为负。
@since     JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.BitSet.set(int bitIndex, boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定索引处的位设置为指定的值。

@param     bitIndex   一个位索引。
@param     value 要设置的 boolean 值。
@exception IndexOutOfBoundsException 如果指定的索引为负。
@since     1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.BitSet.set(int fromIndex, int toIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的 <tt>fromIndex</tt>（包括）到指定的 <tt>toIndex</tt>（不包括）范围内的位设置为 <code>true</code>。

@param  fromIndex 第一个要设置位的索引。
@param  toIndex 最后一个要设置位之后那个位的索引。
@exception IndexOutOfBoundsException 如果 <tt>fromIndex</tt> 为负，或者 <tt>toIndex</tt> 为负，或者 <tt>fromIndex</tt> 大于 <tt>toIndex</tt>。
@since     1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.BitSet.set(int fromIndex, int toIndex, boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的 <tt>fromIndex</tt>（包括）到指定的 <tt>toIndex</tt>（不包括）范围内的位设置为指定的值。

@param fromIndex 第一个要设置位的索引。
@param toIndex 最后一个要设置位之后那个位的索引
@param value 所选择的位上要设置的值
@exception IndexOutOfBoundsException 如果 <tt>fromIndex</tt> 为负，或者 <tt>toIndex</tt> 为负，或者 <tt>fromIndex</tt> 大于 <tt>toIndex</tt>。
@since     1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.BitSet.clear(int bitIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
将索引指定处的位设置为 <code>false</code>。

@param   bitIndex 要清除位的索引。
@exception IndexOutOfBoundsException 如果指定的索引为负。
@since     JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.BitSet.clear(int fromIndex, int toIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的 <tt>fromIndex</tt>（包括）到指定的 <tt>toIndex</tt>（不包括）范围内的位设置为 <code>false</code>。

@param fromIndex 第一个要清除位的索引。
@param toIndex 最后一个要清除位之后那个位的索引。
@exception IndexOutOfBoundsException 如果 <tt>fromIndex</tt> 为负，或者 <tt>toIndex</tt> 为负，或者 <tt>fromIndex</tt> 大于 <tt>toIndex</tt>。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.BitSet.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 BitSet 中的所有位设置为 <code>false</code>。

@since   1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.BitSet.get(int bitIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定索引处的位值。如果当前已设置了此 <code>BitSet</code> 中索引 <code>bitIndex</code> 处的位，则返回 <code>true</code>；否则结果为 <code>false</code>。

@param bitIndex 位索引。
@return 指定索引处的位值。
@exception IndexOutOfBoundsException 如果指定的索引为负。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.BitSet java.util.BitSet.get(int fromIndex, int toIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个新的 <tt>BitSet</tt>，它由此 <tt>BitSet</tt> 中从 <tt>fromIndex</tt>（包括）到 <tt>toIndex</tt>（不包括）范围内的位组成。

@param fromIndex 第一个要包括位的索引。
@param toIndex 最后一个要包括位之后那个位的索引。
@return  包含此 <tt>BitSet</tt> 某个范围内各位的新 <tt>BitSet</tt>。
@exception IndexOutOfBoundsException 如果 <tt>fromIndex</tt> 为负，或者 <tt>toIndex</tt> 为负，或者 <tt>fromIndex</tt> 大于 <tt>toIndex</tt>。
@since   1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.BitSet.nextSetBit(int fromIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回第一个设置为 <code>true</code> 的位的索引，这发生在指定的起始索引或之后的索引上。如果没有这样的位，则返回 -1。

要在 <code>BitSet</code> 中的 <code>true</code> 位上进行迭代，可以使用以下循环：

<pre>
for(int i=bs.nextSetBit(0); i>=0; i=bs.nextSetBit(i+1)) {
     // operate on index i here
 }</pre>
 
@param  fromIndex 开始检查的索引（包括）。
@return 下一个已设置为 true 位的索引。
@throws IndexOutOfBoundsException 如果指定的索引为负。
@since  1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.BitSet.nextClearBit(int fromIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回第一个设置为 <code>false</code> 的位的索引，这发生在指定的起始索引或之后的索引上。
 
@param  fromIndex 开始检查的索引（包括）。
@return 下一个已清除位的索引。
@throws IndexOutOfBoundsException 如果指定的索引为负。
@since  1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.BitSet.length()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>BitSet</code> 的&ldquo;逻辑大小&rdquo;：<code>BitSet</code> 中最高设置位的索引加 1。如果 <code>BitSet</code> 中不包含任何设置位，则返回零。

@return 此 <code>BitSet</code> 的逻辑大小。
@since  1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.BitSet.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 <code>BitSet</code> 中没有包含任何设置为 <code>true</code> 的位，则返回 ture。

@return    指示此 <code>BitSet</code> 是否为空的 boolean 值。
@since     1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.BitSet.intersects(BitSet set)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果指定的 <code>BitSet</code> 中有设置为 <code>true</code> 的位，并且在此 <code>BitSet</code> 中也将其设置为 <code>true</code>，则返回 ture。

@param	set 要与其交叉的 <code>BitSet</code>
@return  指示此 <code>BitSet</code> 与指定的 <code>BitSet</code> 是否存在交叉的 boolean 值。
@since   1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.BitSet.cardinality()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>BitSet</code> 中设置为 <tt>true</tt> 的位数。

@return 此 <code>BitSet</code> 中设置为 <tt>true</tt> 的位数。
@since   1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.BitSet.and(BitSet set)
<!-- END KEY -->
<!-- BEGIN DATA -->
对此目标位 set 和参数位 set 执行逻辑<b>与</b>操作。当且仅当目标位 set 的初始值均为 <code>true</code>，并且位 set 参数中对应位的值也为 <code>true</code> 时才修改此位 set，这样其内每个位的值均为 <code>true</code>。 

@param set 一个位 set。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.BitSet.or(BitSet set)
<!-- END KEY -->
<!-- BEGIN DATA -->
对此位 set 和位 set 参数执行逻辑<b>或</b>操作。当且仅当此位 set 中某个位的值为 <code>true</code>，或者位 set 参数中对应位的值为 <code>true</code> 时才修改此位 set，这样其内该位的值为 <code>true</code>。

@param set 一个位 set。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.BitSet.xor(BitSet set)
<!-- END KEY -->
<!-- BEGIN DATA -->
对此位 set 和位 set 参数执行逻辑<b>异或</b>操作。当且仅当以下语句之一成立时才修改此位 set，这样其内某个位的值为 <code>true</code>： 
 <ul>
<li>位的初始值为 <code>true</code>，并且参数对应位的值为 <code>false</code>。
<li>位的初始值为 <code>false</code>，并且参数对应位的值为 <code>true</code>。 
 </ul>

@param set 一个位 set。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.BitSet.andNot(BitSet set)
<!-- END KEY -->
<!-- BEGIN DATA -->
清除此 <code>BitSet</code> 中所有的位，其相应的位在指定的 <code>BitSet</code> 中已设置。

@param set 用来屏蔽此 <code>BitSet</code> 的 <code>BitSet</code>。
@since JDK1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.BitSet.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此位 set 的哈希码值。哈希码只取决于此 <code>BitSet</code> 中已经设置的位。计算其哈希码的算法可以描述如下。<p>
假定 <code>BitSet</code> 中的位将存储在一个 <code>long</code> 型的数组（比方说叫 <code>words</code>）中，那么当且仅当表达式
 <pre>((k&gt;&gt;6) &lt; words.length) &amp;&amp; ((words[k&gt;&gt;6] &amp; (1L &lt;&lt; (bit &amp; 0x3F))) != 0)</pre>
为 ture 时，才在 <code>BitSet</code> 中设置位 <code>k</code>（对于非负的 <code>k</code> 值）。然后以下定义的 <code>hashCode</code> 方法才是实际算法的正确实现：
 <pre>
 public int hashCode() {
      long h = 1234;
      for (int i = words.length; --i &gt;= 0; ) {
           h ^= words[i] * (i + 1);
      }
      return (int)((h &gt;&gt; 32) ^ h);
 }</pre>
注意，如果位的设置改变，则哈希码值也将发生更改。
<p>重写 <code>Object</code> 的 <code>hashCode</code> 方法。

@return 此位 set 的哈希码值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.BitSet.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>BitSet</code> 表示位值时实际使用空间的位数。set 中值最大的元素是第 size - 1 个元素。

@return  此位 set 中当前的位数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.BitSet.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此对象与指定的对象进行比较。当且仅当参数不是 <code>null</code>，并且是一个与此位 set 有着完全相同的位 set 设置（为 <code>true</code>）的 <code>Bitset</code> 对象时，结果才为 <code>true</code>。也就是说，对于每个非负的 <code>int</code> 索引 <code>k</code>，
 <pre>((BitSet)obj).get(k) == this.get(k)</pre>
一定为 ture。两个位 set 的当前大小不用进行比较。 
<p>重写 <code>Object</code> 的 <code>equals</code> 方法。

@param   obj 要与之比较的对象。
@return  如果对象相同，则返回 <code>true</code>；否则返回 <code>false</code>。
@see     java.util.BitSet#size()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.util.BitSet.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
复制此 <code>BitSet</code>，生成一个与之相等的新 <code>BitSet</code>。复制得到的是另一个位 set，它与此位 set 有着完全相同的、设置为 <code>true</code>）的位。 

<p>重写 <code>Object</code> 的 <code>clone</code> 方法。

@return  此位 set 的一个副本。
@see     java.util.BitSet#size()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.BitSet.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此位 set 的字符串表示形式。对于此 <code>BitSet</code> 中包含的、处于已设置状态的每个位的索引，在结果中会包含这些索引的十进制表示形式。这些索引是按从低到高的顺序列出的、之间用 &quot;,&quot; 分隔（一个逗号加一个空格），并用括号括起来，结果形成了一组整数的常用数学符号。<p>
重写 <code>Object</code> 的 <code>toString</code> 方法。
<p>示例：
 <pre>
 BitSet drPepper = new BitSet();</pre>
现在 <code>drPepper.toString()</code> 返回 &quot;<code>{}</code>&quot;。<p>
 <pre>
 drPepper.set(2);</pre>
现在 <code>drPepper.toString()</code> 返回 &quot;<code>{2}</code>&quot;。<p>
 <pre>
 drPepper.set(4);
 drPepper.set(10);</pre>
现在 <code>drPepper.toString()</code> 返回 &quot;<code>{2, 4, 10}</code>&quot;。

@return 此位 set 的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.BitSet.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中重建 <tt>BitSet</tt> 实例（也就是将其反序列化）。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.BitSet.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <tt>BitSet</tt> 实例保存到流中（也就是将其序列化）。

<!-- END DATA -->
