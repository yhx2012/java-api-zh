<!-- BEGIN KEY -->
public static class java.util.ResourceBundle.Control extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>ResourceBundle.Control</code> 定义一个回调方法集，它在包加载进程中由 {@link ResourceBundle#getBundle(String, Locale, ClassLoader, Control) ResourceBundle.getBundle} 工厂方法调用。换句话说，<code>ResourceBundle.Control</code> 与工厂方法协作可用于加载资源包。回调方法的默认实现为工厂方法提供执行<a
 href="./ResourceBundle.html#default_behavior">默认行为</a>的必要信息。

<p>除了回调方法外，还定义了 {@link #toBundleName(String, Locale) toBundleName} 和 {@link #toResourceName(String, String) toResourceName} 方法，其主要目的是为实现回调方法提供方便。但是，若要在本地化资源的组织和打包中提供不同的约定，也可以重写 <code>toBundleName</code> 方法。<code>toResourceName</code> 方法是 <code>final</code> 方法，以避免使用错误的资源和类名称分隔符。

<p>两个工厂方法 {@link #getControl(List)} 和 {@link #getNoFallbackControl(List)} 都提供 <code>ResourceBundle.Control</code> 实例，这些实例实现默认包加载进程的常见变量。

<p>在相同基本包的所有 <code>ResourceBundle.getBundle</code> 调用中，{@link Control#getFormats(String) getFormats} 方法返回的格式和 {@link ResourceBundle.Control#getCandidateLocales(String, Locale) getCandidateLocales} 方法返回的候选语言环境必须一致。否则，<code>ResourceBundle.getBundle</code> 方法返回意料之外的包。例如，如果 <code>getFormats</code> 方法在第一次调用 <code>ResourceBundle.getBundle</code> 时只返回 <code>&quot;java.class&quot;</code>，第二次调用时只返回 <code>&quot;java.properties&quot;</code>，那么第二次调用返回的基于类的包将是在第一次调用过程中缓存的那个包。

<p>如果 <code>ResourceBundle.Control</code> 实例被多个线程同时使用，则它必须是线程安全的。<code>ResourceBundle.getBundle</code> 不会同时调用 <code>ResourceBundle.Control</code> 方法。方法的默认实现是线程安全的。

<p>应用程序可以指定 <code>getControl</code> 工厂方法返回的 <code>ResourceBundle.Control</code> 实例，也可以指定从 <code>ResourceBundle.Control</code> 子类创建的 <code>ResourceBundle.Control</code> 实例，以自定义包加载进程。下面是对默认包加载进程进行更改的示例。

<p><b>示例 1</b>

<p>以下代码让 <code>ResourceBundle.getBundle</code> 只查找基于属性的资源。

 <pre>
import java.util.*;
import static java.util.ResourceBundle.Control.*;
 ...
ResourceBundle bundle =
ResourceBundle.getBundle(&quot;MyResources&quot;, new Locale(&quot;fr&quot;, &quot;CH&quot;),
ResourceBundle.Control.getControl(FORMAT_PROPERTIES));
 </pre>

给定 <code>ResourceBundle.getBundle</code> 描述的<a
 href="./ResourceBundle.html#default_behavior_example">示例</a>中的资源包，此 <code>ResourceBundle.getBundle</code> 调用加载 <code>MyResources_fr_CH.properties</code>，它的父属性是 <code>MyResources_fr.properties</code>，而后者的父属性是 <code>MyResources.properties</code>。(没有隐藏 <code>MyResources_fr_CH.properties</code>，但隐藏了 <code>MyResources_fr_CH.class</code>。）

<p><b>示例 2</b>

<p>下面是使用 {@link Properties#loadFromXML(java.io.InputStream) Properties.loadFromXML} 加载基于 XML 的包的示例。

 <pre>
ResourceBundle rb = ResourceBundle.getBundle(&quot;Messages&quot;,
new ResourceBundle.Control() {
public List&lt;String&gt; getFormats(String baseName) {
if (baseName == null)
throw new NullPointerException();
return Arrays.asList(&quot;xml&quot;);
         }
public ResourceBundle newBundle(String baseName,
Locale locale,
String format,
ClassLoader loader,
boolean reload)
throws IllegalAccessException,
InstantiationException,
IOException {
if (baseName == null || locale == null
|| format == null || loader == null)
throw new NullPointerException();
ResourceBundle bundle = null;
if (format.equals(&quot;xml&quot;)) {
String bundleName = toBundleName(baseName, locale);
String resourceName = toResourceName(bundleName, format);
InputStream stream = null;
if (reload) {
URL url = loader.getResource(resourceName);
if (url != null) {
URLConnection connection = url.openConnection();
if (connection != null) {
// Disable caches to get fresh data for
// reloading.
connection.setUseCaches(false);
stream = connection.getInputStream();
                         }
                     }
} else {
stream = loader.getResourceAsStream(resourceName);
                 }
if (stream != null) {
BufferedInputStream bis = new BufferedInputStream(stream);
bundle = new XMLResourceBundle(bis);
bis.close();
                 }
             }
return bundle;
         }
     });

 ...

private static class XMLResourceBundle extends ResourceBundle {
private Properties props;
XMLResourceBundle(InputStream stream) throws IOException {
props = new Properties();
props.loadFromXML(stream);
     }
protected Object handleGetObject(String key) {
return props.getProperty(key);
     }
public Enumeration&lt;String&gt; getKeys() {
         ...
     }
 }
 </pre>
 
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.List<java.lang.String> java.util.ResourceBundle.Control.FORMAT_DEFAULT
<!-- END KEY -->
<!-- BEGIN DATA -->
默认的格式 <code>List</code>，它包含字符串 <code>&quot;java.class&quot;</code> 和 <code>&quot;java.properties&quot;</code>（按此顺序）。此 <code>List</code> {@linkplain Collections#unmodifiableList(List) 不可修改}。

@see #getFormats(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.List<java.lang.String> java.util.ResourceBundle.Control.FORMAT_CLASS
<!-- END KEY -->
<!-- BEGIN DATA -->
包含 <code>&quot;java.class&quot;</code> 的纯类 (class-only) 格式 <code>List</code>。此 <code>List</code> {@linkplain Collections#unmodifiableList(List) 不可修改}。

@see #getFormats(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.List<java.lang.String> java.util.ResourceBundle.Control.FORMAT_PROPERTIES
<!-- END KEY -->
<!-- BEGIN DATA -->
包含 <code>&quot;java.properties&quot;</code> 的纯属性 (properties-only) 格式 <code>List</code>。此 <code>List</code> {@linkplain Collections#unmodifiableList(List) 不可修改}。

@see #getFormats(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.util.ResourceBundle.Control.TTL_DONT_CACHE
<!-- END KEY -->
<!-- BEGIN DATA -->
不缓存已加载资源包实例的生存时间常量。

@see #getTimeToLive(String, Locale)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.util.ResourceBundle.Control.TTL_NO_EXPIRATION_CONTROL
<!-- END KEY -->
<!-- BEGIN DATA -->
对缓存中已加载资源包实例禁用到期控制的生存时间常量。

@see #getTimeToLive(String, Locale)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.ResourceBundle.Control()
<!-- END KEY -->
<!-- BEGIN DATA -->
唯一的构造方法。（由子类构造方法调用，通常是隐式的。）

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.ResourceBundle.Control java.util.ResourceBundle.Control.getControl(java.util.List<java.lang.String> formats)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>ResourceBundle.Control</code>，{@link #getFormats(String) getFormats} 方法在其中返回指定的 <code>formats</code>。<code>formats</code> 必须等于 {@link Control#FORMAT_PROPERTIES}、{@link Control#FORMAT_CLASS} 或 {@link Control#FORMAT_DEFAULT} 之一。此方法返回的 <code>ResourceBundle.Control</code> 实例是单独且线程安全的。

<p>指定 {@link Control#FORMAT_DEFAULT} 等效于实例化 <code>ResourceBundle.Control</code> 类，区别在于此方法返回一个单独实例。

@param formats <code>ResourceBundle.Control.getFormats</code> 方法要返回的格式
@return 支持指定 <code>formats</code> 的 <code>ResourceBundle.Control</code> 
@exception NullPointerException 如果 <code>formats</code> 为 <code>null</code>
@exception IllegalArgumentException 如果 <code>formats</code> 未知

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.ResourceBundle.Control java.util.ResourceBundle.Control.getNoFallbackControl(java.util.List<java.lang.String> formats)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>ResourceBundle.Control</code>，{@link #getFormats(String) getFormats} 方法在其中返回指定的 <code>formats</code>，{@link Control#getFallbackLocale(String, Locale) getFallbackLocale} 方法在其中返回 <code>null</code>。<code>formats</code> 必须等于 {@link Control#FORMAT_PROPERTIES}、{@link Control#FORMAT_CLASS} 或 {@link Control#FORMAT_DEFAULT} 之一。此方法返回的 <code>ResourceBundle.Control</code> 实例是单独且线程安全的。

@param formats <code>ResourceBundle.Control.getFormats</code> 方法要返回的格式
@return 支持指定 <code>formats</code> 的 <code>ResourceBundle.Control</code>，不支持任何回退 <code>Locale</code>
@exception NullPointerException 如果 <code>formats</code> 为 <code>null</code>
@exception IllegalArgumentException 如果 <code>formats</code> 未知

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.lang.String> java.util.ResourceBundle.Control.getFormats(String baseName)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>String</code> 的 <code>List</code>，它包含要用于加载给定 <code>baseName</code> 的资源包的格式。<code>ResourceBundle.getBundle</code> 工厂方法尝试使用按列表指定顺序的格式加载资源包。此方法返回的列表必须至少有一个 <code>String</code>。对于基于类的资源包，预定义的格式是 <code>&quot;java.class&quot;</code>，对于 {@linkplain PropertyResourceBundle properties-based} 资源包，预定义的格式是 <code>&quot;java.properties&quot;</code>。以 <code>&quot;java.&quot;</code> 开头的字符串是为将来扩展而保留的，不得被应用程序定义的格式使用。

<p>不必返回一个不可变的（不可修改的） <code>List</code>。但是，返回的 <code>List</code> 在由 <code>getFormats</code> 返回后不得改变。

<p>默认实现返回 {@link #FORMAT_DEFAULT}，以便 <code>ResourceBundle.getBundle</code> 工厂方法首先查找基于类的资源包，然后查找基于属性的资源包。

@param baseName 资源包的基本名称，是一个完全限定类名
@return <code>String</code> 的 <code>List</code>，它包含加载资源包的格式。
@exception NullPointerException 如果 <code>baseName</code> 为 null
@see #FORMAT_DEFAULT
@see #FORMAT_CLASS
@see #FORMAT_PROPERTIES

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.util.Locale> java.util.ResourceBundle.Control.getCandidateLocales(String baseName, Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>Locale</code> 的 <code>List</code>，作为 <code>baseName</code> 和 <code>locale</code> 的候选语言环境。在工厂方法每次尝试为目标 <code>Locale</code> 查找资源包时，由 <code>ResourceBundle.getBundle</code> 工厂方法调用此方法。

<p>如果存在对应于候选语言环境的资源包，并且它们的父包不是由已加载资源包本身定义的，那么候选语言环境序列还将对应于运行时资源查找路径（也称为<I>父链</I>）。如果需要让基本包作为父链的终端，那么列表的最后一个元素必须是{@linkplain Locale#ROOT 根语言环境}。

<p>如果给定语言环境等于 <code>Locale.ROOT</code>（根语言环境），则必须返回一个只包含根 <code>Locale</code> 的 <code>List</code>。在这种情况下，<code>ResourceBundle.getBundle</code> 工厂方法只将基本包作为所得资源包加载。

<p>不必返回一个不可变的（不可修改的） <code>List</code>。但是，返回的 <code>List</code> 在由 <code>getCandidateLocales</code> 返回之后不得改变。

<p>默认实现按照以下次序返回包含 <code>Locale</code> 的 <code>List</code>：
 <pre>
Locale(language, country, variant)
Locale(language, country)
Locale(language)
Locale.ROOT
 </pre>
其中 <code>language</code>、<code>country</code> 和 <code>variant</code> 分别指语言、国家/地区和给定 <code>locale</code> 的变量值。省略最后部分的值为空字符串的语言环境。

<p>默认实现使用 {@link ArrayList}，重写实现可以在将它返回给调用者之前对它进行修改。但是，子类在它被 <code>getCandidateLocales</code> 返回之后不得修改它。

<p>例如，如果给定 <code>baseName</code> 为 &quot;Messages&quot;，给定 <code>locale</code> 为 <code>Locale(&quot;ja&quot;,&#xA0;&quot;&quot;,&#xA0;&quot;XX&quot;)</code>，则返回 <code>Locale</code> 的 <code>List</code> 为：
 <pre>
Locale(&quot;ja&quot;, &quot;&quot;, &quot;XX&quot;)
Locale(&quot;ja&quot;)
Locale.ROOT
 </pre>
而且，如果找到了 &quot;ja&quot; 和 &quot;&quot; <code>Locale</code> 的资源包，则运行时资源查找路径（父链）为：
 <pre>
Messages_ja -&gt; Messages
 </pre>

@param baseName 资源包的基本名称，是一个完全限定类名
@param locale 资源包需要的语言环境
@return 为给定 <code>locale</code> 的候选 <code>Locale</code> <code>List</code> 
@exception NullPointerException 如果 <code>baseName</code> 或 <code>locale</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Locale java.util.ResourceBundle.Control.getFallbackLocale(String baseName, Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个要用作回退语言环境的 <code>Locale</code>，用于 <code>ResourceBundle.getBundle</code> 工厂方法进行进一步资源包搜索。每次找不到任何对应于 <code>baseName</code> 和 <code>locale</code> 的所得资源包时（其中 locale 是 <code>ResourceBundle.getBundle</code> 的参数，或者此方法以前返回的回退语言环境），从工厂方法调用此方法。

<p>如果不需要进一步的回退搜索，那么该方法返回 <code>null</code>。

<p>如果给定 <code>locale</code> 不是默认的，那么默认实现返回{@linkplain Locale#getDefault() 默认 <code>Locale</code>}。否则，返回 <code>null</code>。

@param baseName 资源包的基本名称，是一个完全限定类名，<code>ResourceBundle.getBundle</code> 无法为其找到任何资源包（基本包除外）
@param locale <code>ResourceBundle.getBundle</code> 无法为其找到任何资源包（基本包除外）的 <code>Locale</code>
@return 回退搜索的 <code>Locale</code>；如果不需要进一步的搜索，则返回 <code>null</code>。
@exception NullPointerException 如果 <code>baseName</code> 或 <code>locale</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.ResourceBundle java.util.ResourceBundle.Control.newBundle(String baseName, Locale locale, String format, ClassLoader loader, boolean reload) throws java.lang.IllegalAccessException, java.lang.InstantiationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
针对给定格式和语言环境的给定包名称，实例化一个资源包，如有必要，可使用给定的类加载器。如果对于给定参数没有任何可用的资源包，则此方法返回 <code>null</code>。如果资源包由于无法预料的错误而不能被实例化，则必须通过抛出 <code>Error</code> 或 <code>Exception</code> 来报告错误，而不是简单地返回 <code>null</code>。

<p>如果 <code>reload</code> 标志为 <code>true</code>，则它表示由于以前加载的资源包已到期而调用此方法。

<p>默认实现按如下方法实例化 <code>ResourceBundle</code>。

 <ul>

<li>通过调用 {@link #toBundleName(String, Locale) toBundleName(baseName, locale)} 获取包名称。</li>

<li>如果 <code>format</code> 为 <code>&quot;java.class&quot;</code>，则通过调用 {@link ClassLoader#loadClass(String)} 加载由包名称指定的 {@link Class}。然后，通过调用 {@link Class#newInstance()} 实例化 <code>ResourceBundle</code>。注意，对于加载此默认实现中基于类的资源包将忽略 <code>reload</code> 标志。</li>

<li>如果 <code>format</code> 为 <code>&quot;java.properties&quot;</code>，则调用 {@link #toResourceName(String, String) toResourceName(bundlename, &quot;properties&quot;)} 获取资源名称。如果 <code>reload</code> 为 <code>true</code>，则调用 {@link ClassLoader#getResource(String) load.getResource} 获取用于创建 {@link URLConnection} 的 {@link URL}。此 <code>URLConnection</code> 用于{@linkplain URLConnection#setUseCaches(boolean) 禁用}底层资源加载层的缓存，并{@linkplain URLConnection#getInputStream() 获取 <code>InputStream</code>}。否则，调用 {@link ClassLoader#getResourceAsStream(String) loader.getResourceAsStream} 获取 {@link InputStream}。然后，构造一个带有 <code>InputStream</code> 的 {@link PropertyResourceBundle}。</li>

<li>如果 <code>format</code> 既不是 <code>&quot;java.class&quot;</code> 也不是 <code>&quot;java.properties&quot;</code>，则抛出 <code>IllegalArgumentException</code>。</li>

 </ul>

@param baseName 资源包的基本名称，是一个完全限定类名
@param locale 应为其实例化资源包的语言环境
@param format 要加载的资源包格式
@param loader 要用于加载包的 <code>ClassLoader</code>
@param reload 用于表示重新加载包的标志；如果重新加载到期的资源包，则为 <code>true</code>，否则为 <code>false</code>
@return 资源包实例；如果未找到任何实例，则返回 <code>null</code>。
@exception NullPointerException 如果 <code>bundleName</code>、<code>locale</code>、<code>format</code> 或 <code>loader</code> 为 <code>null</code>，或者 {@link #toBundleName(String, Locale) toBundleName} 返回 <code>null</code>
@exception IllegalArgumentException 如果 <code>format</code> 未知，或者为给定参数找到的资源包含错误数据。
@exception ClassCastException 如果已加载类无法被强制转换为 <code>ResourceBundle</code>
@exception IllegalAccessException 如果类或其 null 构造方法无法访问。
@exception InstantiationException 如果类的实例化由于某些其他原因而失败。
@exception ExceptionInInitializerError 如果此方法引起的初始化失败。
@exception SecurityException 如果安全管理器存在并且拒绝创建新实例。有关详细信息，请参阅 {@link Class#newInstance()}。
@exception IOException 如果在使用任意 I/O 操作读取资源时发生错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.ResourceBundle.Control.getTimeToLive(String baseName, Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在此 <code>ResourceBundle.Control</code> 下加载的资源包生存时间 (TTL) 值。正生存时间值指定不根据构造包的源数据进行验证的情况下，包可以在缓存中保留的毫秒数。值为 0 表示每次从缓存中获取包时必须进行验证。{@link #TTL_DONT_CACHE} 指定已加载资源包不放入缓存。{@link #TTL_NO_EXPIRATION_CONTROL} 指定已加载资源包放入缓存且没有到期控制。

<p>到期只通过 <code>ResourceBundle.getBundle</code> 工厂方法影响包加载进程。也就是说，如果该工厂方法发现缓存中的资源包已到期，那么该工厂方法将调用 {@link #needsReload(String, Locale, String, ClassLoader, ResourceBundle, long) needsReload} 方法确定是否需要重新加载资源包。如果 <code>needsReload</code> 返回 <code>true</code>，则从缓存中移除缓存的资源包实例。否则，实例将保留在缓存中，用此方法返回的新 TTL 值进行更新。

<p>所有缓存的资源包都会由于运行时环境的内存约束而从缓存中移除。返回一个大的正值并不意味着锁定缓存中已加载的资源包。

<p>默认实现返回 {@link #TTL_NO_EXPIRATION_CONTROL}。

@param baseName 为其指定到期值的资源包基本名称。
@param locale 为其指定到期值的资源包语言环境。
@return 时间（0 或从缓存时间到现在的正毫秒数），表示获取缓存中已加载资源包的到期时间；{@link #TTL_NO_EXPIRATION_CONTROL} 表示禁用到期控制；{@link #TTL_DONT_CACHE} 表示禁用缓存。
@exception NullPointerException 如果 <code>baseName</code> 或 <code>locale</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.ResourceBundle.Control.needsReload(String baseName, Locale locale, String format, ClassLoader loader, ResourceBundle bundle, long loadTime)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定是否需要根据 <code>loadTime</code> 或其他标准给出的加载时间重载缓存中已到期的 <code>bundle</code>。如果需要重载，那么此方法返回 <code>true</code>，否则返回 <code>false</code>。<code>loadTime</code> 是从 <a href="Calendar.html#Epoch"> <code>Calendar</code> Epoch</a> 到现在的毫秒数。

调用 <code>ResourceBundle.getBundle</code> 工厂方法在用于其当前调用的 <code>ResourceBundle.Control</code> 实例上调用此方法，而不是在最初加载资源包的调用中所使用的实例上调用此方法。

<p>默认实现将 <code>loadTime</code> 和资源包源数据上一次的修改时间进行比较。如果确定自 <code>loadTime</code> 以来修改过源数据，则返回 <code>true</code>。否则，返回 <code>false</code>。如果给定 <code>format</code> 不是默认格式 <code>&quot;java.class&quot;</code> 或 <code>&quot;java.properties&quot;</code> 之一，此实现假定它是与其文件后缀相同的字符串。

@param baseName 资源包的基本名称，是一个完全限定类名
@param locale 应为其实例化资源包的语言环境
@param format 要加载的资源包格式
@param loader 要用来加载包的 <code>ClassLoader</code>
@param bundle 缓存中已到期的资源包实例
@param loadTime  <code>bundle</code> 被加载并放入缓存的时间
@return 如果到期的包需要重新加载，则返回 <code>true</code>；否则返回 <code>false</code>。
@exception NullPointerException 如果 <code>baseName</code>、<code>locale</code>、<code>format</code>、<code>loader</code> 或 <code>bundle</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.ResourceBundle.Control.toBundleName(String baseName, Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定 <code>baseName</code> 和 <code>locale</code> 转换为包名称。此方法从 {@link #newBundle(String, Locale, String, ClassLoader, boolean) newBundle} 和 {@link #needsReload(String, Locale, String, ClassLoader, ResourceBundle, long) needsReload} 方法的默认实现调用。

<p>此实现返回以下值：
 <pre>
baseName + &quot;_&quot; + language + &quot;_&quot; + country + &quot;_&quot; + variant
 </pre>
其中 <code>language</code>、<code>country</code> 和 <code>variant</code> 分别是语言、国家/地区和 <code>locale</code> 的变量值。为空字符串的最后部分的值与 '_' 之前的部分一起被忽略。如果所有值都为空字符串，则返回 <code>baseName</code>。

<p>例如，如果 <code>baseName</code> 为 <code>&quot;baseName&quot;</code>、<code>locale</code> 为 <code>Locale(&quot;ja&quot;,&#xA0;&quot;&quot;,&#xA0;&quot;XX&quot;)</code>，则返回 <code>&quot;baseName_ja_&#x2009;_XX&quot;</code>。如果给定语言环境为 <code>Locale(&quot;en&quot;)</code>，则返回 <code>&quot;baseName_en&quot;</code>。

<p>重写此方法允许应用程序在本地化资源的组织和打包中使用不同的约定。

@param baseName 资源包的基本名称，是一个完全限定类名
@param locale 应当为其加载资源包的语言环境
@return 资源包的包名称
@exception NullPointerException 如果 <code>baseName</code> 或 <code>locale</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.util.ResourceBundle.Control.toResourceName(String bundleName, String suffix)
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定 <code>bundleName</code> 转换为 {@link ClassLoader#getResource ClassLoader.getResource} 方法要求的形式：用 <code>'/'</code> 替换 <code>bundleName</code> 中出现的所有 <code>'.'</code>，并添加一个 <code>'.'</code> 和给定的文件 <code>suffix</code>。例如，如果 <code>bundleName</code> 为 <code>&quot;foo.bar.MyResources_ja_JP&quot;</code>、<code>suffix</code> 为 <code>&quot;properties&quot;</code>，则返回 <code>&quot;foo/bar/MyResources_ja_JP.properties&quot;</code>。

@param bundleName 包名称
@param suffix 文件类型后缀
@return 已转换的资源名称
@exception NullPointerException 如果 <code>bundleName</code> 或 <code>suffix</code> 为 <code>null</code>

<!-- END DATA -->
