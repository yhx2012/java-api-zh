<!-- BEGIN KEY -->
public interface java.util.SortedSet extends java.util.Set
<!-- END KEY -->
<!-- BEGIN DATA -->
进一步提供关于元素的<i>总体排序</i> 的 {@link Set}。这些元素使用其{@linkplain Comparable 自然顺序}进行排序，或者根据通常在创建有序 set 时提供的 {@link Comparator} 进行排序。该 set 的迭代器将按元素升序遍历 set。提供了一些附加的操作来利用这种排序。（此接口是 {@link SortedMap} 的 set 对应接口）。

 <p>插入有序 set 的所有元素都必须实现 <tt>Comparable</tt> 接口（或者被指定的比较器所接受）。另外，所有这些元素都必须是<i>可互相比较的</i>：对于有序 set 中的任意两个元素 <tt>e1</tt> 和 <tt>e2</tt>，执行 <tt>e1.compareTo(e2)</tt>（或 <tt>comparator.compare(e1, e2)</tt>）都不得抛出 <tt>ClassCastException</tt>。试图违反此限制将导致违反规则的方法或者构造方法调用抛出 <tt>ClassCastException</tt>。

 <p>注意，如果有序 set 要正确实现 <tt>Set</tt> 接口，则有序 set 所维持的顺序（无论是否提供了明确的比较器）都必须<i>与 equals 一致</i>。（有关<i>与 equals 一致</i> 的精确定义，请参阅 <tt>Comparable</tt> 接口或 <tt>Comparator</tt> 接口。）这是因为 <tt>Set</tt> 接口是按照 <tt>equals</tt> 操作定义的，但有序 set 使用它的 <tt>compareTo</tt>（或 <tt>compare</tt>）方法对所有元素进行比较，因此从有序 set 的角度来看，此方法认为相等的两个元素就是相等的。即使顺序与 equals 不一致，有序 set 的行为仍然<i>是</i> 定义良好的，只不过没有遵守 <tt>Set</tt> 接口的常规协定。

 <p>所有通用有序 set 实现类都应该提供 4 个“标准”构造方法：1) void（无参数）构造方法，它创建一个空的有序 set，按照元素的自然顺序进行排序。2) 带有一个 <tt>Comparator</tt> 类型参数的构造方法，它创建一个空的有序 set，根据指定的比较器进行排序。3) 带有一个 <tt>Collection</tt> 类型参数的构造方法，它创建一个新的有序 set，其元素与参数相同，按照元素的自然顺序进行排序。4) 带有一个 <tt>SortedSet</tt> 类型参数的构造方法，它创建一个新的有序 set，其元素和排序方法与输入的有序 set 相同。无法保证强制实施此建议，因为接口不能包含构造方法。

 <p>注：一些方法返回具有受限范围的子集。这些范围区间是<i>半开的</i>，也就是说，它们包括低端点，但不包括高端点（如果适用）。如果需要一个<i>闭区间</i>（同时包含两个端点），且元素类型允许计算给定值的后继值，则只需要请求从 <tt>lowEndpoint</tt> 到 <tt>successor(highEndpoint)</tt> 的子区间。例如，假设 <tt>s</tt> 是一个字符串有序 set。下面的语句将得到一个包含 <tt>s</tt> 中从 <tt>low</tt> 到 <tt>high</tt>（包括）所有字符串的视图：<pre>
   SortedSet&lt;String&gt; sub = s.subSet(low, high+"\0");</pre>

可使用类似的技术生成<i>开区间</i>（两个端点都不包括）。下面的语句得到包含 <tt>s</tt> 中从 <tt>low</tt> 到 <tt>high</tt>（不包括）所有字符串的视图：<pre>
   SortedSet&lt;String&gt; sub = s.subSet(low+"\0", high);</pre>

 <p>此接口是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

 @param <E> 此 set 维护的元素的类型

 @author  Josh Bloch
 @version 1.32, 04/21/06
 @see Set
 @see TreeSet
 @see SortedMap
 @see Collection
 @see Comparable
 @see Comparator
 @see ClassCastException
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Comparator<? super E> java.util.SortedSet.comparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对此 set 中的元素进行排序的比较器；如果此 set 使用其元素的{@linkplain Comparable 自然顺序}，则返回 <tt>null</tt>。

 @return 用来对此 set 中的元素进行排序的比较器；如果此 set 使用其元素的自然顺序，则返回 <tt>null</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.SortedSet<E> java.util.SortedSet.subSet(E fromElement, E toElement)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 set 的部分视图，其元素从 <tt>fromElement</tt>（包括）到 <tt>toElement</tt>（不包括）。（如果 <tt>fromElement</tt> 和 <tt>toElement</tt> 相等，则返回空的 set）。返回的 set 受此 set 支持，所以在返回 set 中的更改将反映在此 set 中，反之亦然。返回的 set 支持此 set 支持的所有可选 set 操作。
 <p>如果试图在返回 set 的范围之外插入元素，则返回的 set 将抛出 <tt>IllegalArgumentException</tt>。

 @param fromElement 返回 set 的低端点（包括）
 @param toElement 返回 set 的高端点（不包括）
 @return 此 set 的部分视图，其元素的范围从 <tt>fromElement</tt>（包括）到 <tt>toElement</tt>（不包括）
 @throws ClassCastException 如果无法使用此 set 的比较器（如果 set 没有比较器，则使用自然顺序）比较 <tt>fromElement</tt> 和 <tt>toElement</tt>。如果 <tt>fromElement</tt> 或 <tt>toElement</tt> 不能与 set 中的当前元素进行比较，则实现可以（但不是必须）抛出此异常。
 @throws NullPointerException 如果 <tt>fromElement</tt> 或 <tt>toElement</tt> 为 null，并且此 set 不允许 null 元素
 @throws IllegalArgumentException 如果 <tt>fromElement</tt> 大于 <tt>toElement</tt>；如果此 set 本身有范围限制，并且 <tt>fromElement</tt> 或 <tt>toElement</tt> 位于范围的边界之外

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.SortedSet<E> java.util.SortedSet.headSet(E toElement)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 set 的部分视图，其元素严格小于 <tt>toElement</tt>。返回的 set 受此 set 支持，所以在返回 set 中的更改将反映在此 set 中，反之亦然。返回的 set 支持此 set 支持的所有可选 set 操作。

 <p>如果试图在返回 set 的范围之外插入元素，则返回的 set 将抛出 <tt>IllegalArgumentException</tt>。

 @param toElement 返回 set 的高端点（不包括）
 @return 此 set 的部分视图，其元素严格小于 <tt>toElement</tt>
 @throws ClassCastException 如果 <tt>toElement</tt> 与此 set 的比较器不兼容（如果 set 没有比较器；如果 <tt>toElement</tt> 没有实现 {@link Comparable}）。如果 <tt>toElement</tt> 不能与 set 中的当前元素进行比较，则实现可以（但不是必须）抛出此异常。
@throws NullPointerException 如果 <tt>toElement</tt> 为 null，并且此 set 不允许 null 元素
 @throws IllegalArgumentException 如果此 set 本身有范围限制，并且 <tt>toElement</tt> 位于范围的边界之外

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.SortedSet<E> java.util.SortedSet.tailSet(E fromElement)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 set 的部分视图，其元素大于等于 <tt>fromElement</tt>。返回的 set 受此 set 支持，所以在返回 set 中的更改将反映在此 set 中，反之亦然。返回的 set 支持此 set 支持的所有可选 set 操作。

 <p>如果试图在返回 set 的范围之外插入元素，则返回的 set 将抛出 <tt>IllegalArgumentException</tt>。

 @param fromElement 返回 set 的低端点（包括）
 @return 此 set 的部分视图，其元素大于等于 <tt>fromElement</tt>
 @throws ClassCastException 如果 <tt>fromElement</tt> 与此 set 的比较器不兼容（如果 set 没有比较器；如果 <tt>fromElement</tt> 没有实现 {@link Comparable}）。如果 <tt>fromElement</tt> 不能与 set 中的当前元素进行比较，则实现可以（但不是必须）抛出此异常。
 @throws NullPointerException 如果 <tt>fromElement</tt> 为 null，并且此 set 不允许 null 元素
 @throws IllegalArgumentException 如果此 set 本身有范围限制，并且 <tt>fromElement</tt> 位于范围的边界之外

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.SortedSet.first()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 set 中当前第一个（最低）元素。

 @return 此 set 中当前第一个（最低）元素
 @throws NoSuchElementException 如果此 set 为空

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.SortedSet.last()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 set 中当前最后一个（最高）元素。

 @return 此 set 中当前最后一个（最高）元素
 @throws NoSuchElementException 如果此 set 为空

<!-- END DATA -->
