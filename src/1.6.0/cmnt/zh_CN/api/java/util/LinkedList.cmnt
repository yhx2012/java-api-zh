<!-- BEGIN KEY -->
public class java.util.LinkedList extends java.util.AbstractSequentialList implements java.util.List, java.util.Deque, java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<tt>List</tt> 接口的链接列表实现。实现所有可选的列表操作，并且允许所有元素（包括 <tt>null</tt>）。除了实现 <tt>List</tt> 接口外，<tt>LinkedList</tt> 类还为在列表的开头及结尾 <tt>get</tt>、<tt>remove</tt> 和 <tt>insert</tt> 元素提供了统一的命名方法。这些操作允许将链接列表用作堆栈、{@linkplain Queue 队列}或{@linkplain Deque 双端队列}。<p>

此类实现 <tt>Deque</tt> 接口，为 <tt>add</tt>、<tt>poll</tt> 提供先进先出队列操作，以及其他堆栈和双端队列操作。<p>

所有操作都是按照双重链接列表的需要执行的。在列表中编索引的操作将从开头或结尾遍历列表（从靠近指定索引的一端）。<p>

<p><strong>注意，此实现不是同步的。</strong>如果多个线程同时访问一个链接列表，而其中至少一个线程从结构上修改了该列表，则它<i>必须</i> 保持外部同步。（结构修改指添加或删除一个或多个元素的任何操作；仅设置元素的值不是结构修改。）这一般通过对自然封装该列表的对象进行同步操作来完成。如果不存在这样的对象，则应该使用 {@link Collections#synchronizedList Collections.synchronizedList} 方法来&ldquo;包装&rdquo;该列表。最好在创建时完成这一操作，以防止对列表进行意外的不同步访问，如下所示： <pre>
   List list = Collections.synchronizedList(new LinkedList(...));</pre>

<p>此类的 <tt>iterator</tt> 和 <tt>listIterator</tt> 方法返回的迭代器是<i>快速失败</i> 的：在迭代器创建之后，如果从结构上对列表进行修改，除非通过迭代器自身的 <tt>remove</tt> 或 <tt>add</tt> 方法，其他任何时间任何方式的修改，迭代器都将抛出 {@link ConcurrentModificationException}。因此，面对并发的修改，迭代器很快就会完全失败，而不冒将来不确定的时间任意发生不确定行为的风险。

<p>注意，迭代器的快速失败行为不能得到保证，一般来说，存在不同步的并发修改时，不可能作出任何硬性保证。快速失败迭代器尽最大努力抛出 <tt>ConcurrentModificationException</tt>。因此，编写依赖于此异常的程序的方式是错误的，正确做法是：<i>迭代器的快速失败行为应该仅用于检测程序错误。</i>

<p>此类是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

@author  Josh Bloch
@version 1.67, 04/21/06
@see	  List
@see	  ArrayList
@see	  Vector
@since 1.2
@param <E> 在此 collection 中保持的元素的类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.LinkedList()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个空列表。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.LinkedList(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个包含指定 collection 中的元素的列表，这些元素按其 collection 的迭代器返回的顺序排列。

@param c  要将其元素放入此列表的 collection
@throws NullPointerException 如果指定的 collection 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.getFirst()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此列表的第一个元素。

@return 此列表的第一个元素
@throws NoSuchElementException 如果此列表为空

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.getLast()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此列表的最后一个元素。

@return 此列表的最后一个元素
@throws    NoSuchElementException 如果此列表为空

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.removeFirst()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除并返回此列表的第一个元素。

@return 此列表的第一个元素
@throws    NoSuchElementException 如果此列表为空

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.removeLast()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除并返回此列表的最后一个元素。

@return 此列表的最后一个元素
@throws    NoSuchElementException 如果此列表为空

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.LinkedList.addFirst(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素插入此列表的开头。

@param e 要添加的元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.LinkedList.addLast(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素添加到此列表的结尾。

<p>此方法等效于 {@link #add}。

@param e 要添加的元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.LinkedList.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此列表包含指定元素，则返回 <tt>true</tt>。更确切地讲，当且仅当此列表包含至少一个满足 <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt> 的元素 <tt>e</tt> 时返回 <tt>true</tt>。

@param o 要测试在此列表中是否存在的元素
@return 如果此列表包含指定元素，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.LinkedList.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此列表的元素数。

@return 此列表的元素数

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.LinkedList.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素添加到此列表的结尾。

<p>此方法等效于 {@link #addLast}。

@param e 要添加到此列表的元素
@return <tt>true</tt>（根据 {@link Collection#add} 的规定）

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.LinkedList.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此列表中移除首次出现的指定元素（如果存在）。如果列表不包含该元素，则不作更改。更确切地讲，移除具有满足 <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt> 的最低索引 <tt>i</tt> 的元素（如果存在这样的元素）。如果此列表已包含指定元素（或者此列表由于调用而发生更改），则返回 <tt>true</tt>。

@param o 要从此列表删除的元素，如果存在
@return 如果此列表包含指定元素，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.LinkedList.addAll(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定 collection 中的所有元素到此列表的结尾，顺序是指定 collection 的迭代器返回这些元素的顺序。如果指定的 collection 在操作过程中被修改，则此操作的行为是不确定的。（注意，如果指定 collection 就是此列表并且非空，则此操作的行为是不确定的。）

@param c 包含要添加到此列表的元素的 collection
@return  如果此列表由于调用而更改，则返回 <tt>true</tt>
@throws NullPointerException 如果指定的 collection 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.LinkedList.addAll(int index, java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定 collection 中的所有元素从指定位置开始插入此列表。移动当前在该位置上的元素（如果有），所有后续元素都向右移（增加其索引）。新元素将按由指定 collection 的迭代器返回的顺序在列表中显示。

@param index 在其中插入指定 collection 中第一个元素的索引
@param c 包含要添加到此列表的元素的 collection
@return  如果此列表由于调用而更改，则返回 <tt>true</tt>
@throws IndexOutOfBoundsException {@inheritDoc}
@throws NullPointerException 如果指定的 collection 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.LinkedList.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
从此列表中移除所有元素。

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.get(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此列表中指定位置处的元素。

@param index 要返回的元素的索引
@return 列表中指定位置的元素
@throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.set(int index, E element)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此列表中指定位置的元素替换为指定的元素。

@param index 要替换的元素的索引
@param element 要在指定位置存储的元素
@return 以前在指定位置的元素
@throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.LinkedList.add(int index, E element)
<!-- END KEY -->
<!-- BEGIN DATA -->
在此列表中指定的位置插入指定的元素。移动当前在该位置处的元素（如果有），所有后续元素都向右移（在其索引中添加 1）。

@param index 要在其中插入指定元素的索引
@param element 要插入的元素
@throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.remove(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除此列表中指定位置处的元素。将任何后续元素向左移（从索引中减 1）。返回从列表中删除的元素。

@param index 要移除的元素的索引
@return 以前在指定位置的元素
@throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.LinkedList.indexOf(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此列表中首次出现的指定元素的索引，如果此列表中不包含该元素，则返回 -1。更确切地讲，返回满足 <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt> 的最低索引 <tt>i</tt>；如果没有此索引，则返回 -1。

@param o 要搜索的元素
@return 此列表中首次出现的指定元素的索引，如果此列表中不包含该元素，则返回 -1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.LinkedList.lastIndexOf(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此列表中最后出现的指定元素的索引，如果此列表中不包含该元素，则返回 -1。更确切地讲，返回满足 <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt> 的最高索引 <tt>i</tt>；如果没有此索引，则返回 -1。

@param o 要搜索的元素
@return 此列表中最后出现的指定元素的索引；如果此列表中不包含该元素，则返回 -1

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.peek()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取但不移除此列表的头（第一个元素）。
@return 此列表的头，如果此列表为空，则返回 <tt>null</tt>
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.element()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取但不移除此列表的头（第一个元素）。
@return  列表的头
@throws NoSuchElementException 如果此列表为空
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.poll()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取并移除此列表的头（第一个元素）
@return 此列表的头，如果此列表为空，则返回 <tt>null</tt>
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.remove()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取并移除此列表的头（第一个元素）。

@return  列表的头
@throws NoSuchElementException 如果此列表为空
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.LinkedList.offer(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定元素添加到此列表的末尾（最后一个元素）。

@param e 要添加的元素
@return <tt>true</tt>（根据 {@link Queue#offer} 的规定）
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.LinkedList.offerFirst(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 在此列表的开头插入指定的元素。

 @param e 要插入的元素
 @return <tt>true</tt>（根据 {@link Deque#offerFirst} 的规定）
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.LinkedList.offerLast(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 在此列表末尾插入指定的元素。

 @param e 要插入的元素
 @return <tt>true</tt>（根据 {@link Deque#offerLast} 的规定）
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.peekFirst()
<!-- END KEY -->
<!-- BEGIN DATA -->
 获取但不移除此列表的第一个元素；如果此列表为空，则返回 <tt>null</tt>。

 @return 此列表的第一个元素；如果此列表为空，则返回 <tt>null</tt>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.peekLast()
<!-- END KEY -->
<!-- BEGIN DATA -->
 获取但不移除此列表的最后一个元素；如果此列表为空，则返回 <tt>null</tt>。

 @return 此列表的最后一个元素；如果此列表为空，则返回 <tt>null</tt>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.pollFirst()
<!-- END KEY -->
<!-- BEGIN DATA -->
 获取并移除此列表的第一个元素；如果此列表为空，则返回 <tt>null</tt>。

 @return 此列表的第一个元素；如果此列表为空，则返回 <tt>null</tt>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.pollLast()
<!-- END KEY -->
<!-- BEGIN DATA -->
 获取并移除此列表的最后一个元素；如果此列表为空，则返回 <tt>null</tt>。

 @return 此列表的最后一个元素；如果此列表为空，则返回 <tt>null</tt>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.LinkedList.push(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 将元素推入此列表所表示的堆栈。换句话说，将该元素插入此列表的开头。

 <p>此方法等效于 {@link #addFirst}。

 @param e 要推入的元素
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.pop()
<!-- END KEY -->
<!-- BEGIN DATA -->
 从此列表所表示的堆栈处弹出一个元素。换句话说，移除并返回此列表的第一个元素。

 <p>此方法等效于 {@link #removeFirst()}。

 @return 此列表开头的元素（它是此列表所表示的堆栈的顶部）
 @throws NoSuchElementException 如果此列表为空
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.LinkedList.removeFirstOccurrence(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 从此列表中移除第一次出现的指定元素（从头部到尾部遍历列表时）。如果列表不包含该元素，则不作更改。

 @param o 要从此列表中移除的元素（如果存在）
 @return 如果该列表已包含指定元素，则返回 <tt>true</tt> 
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.LinkedList.removeLastOccurrence(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 从此列表中移除最后一次出现的指定元素（从头部到尾部遍历列表时）。如果列表不包含该元素，则不作更改。

 @param o 要从此列表中移除的元素（如果存在）
 @return 如果该列表已包含指定元素，则返回 <tt>true</tt> 
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.ListIterator<E> java.util.LinkedList.listIterator(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此列表中的元素的列表迭代器（按适当顺序），从列表中指定位置开始。遵守 <tt>List.listIterator(int)</tt> 的常规协定。<p>

列表迭代器是<i>快速失败</i> 的：在迭代器创建之后，如果从结构上对列表进行修改，除非通过列表迭代器自身的 <tt>remove</tt> 或 <tt>add</tt> 方法，其他任何时间任何方式的修改，列表迭代器都将抛出 <tt>ConcurrentModificationException</tt>。因此，面对并发的修改，迭代器很快就会完全失败，而不冒将来不确定的时间任意发生不确定行为的风险。

@param index 要从列表迭代器返回的第一个元素的索引（通过调用 <tt>next</tt> 方法）
@return 此列表中的元素的 ListIterator（按适当顺序），从列表中指定位置开始
@throws IndexOutOfBoundsException {@inheritDoc}
@see List#listIterator(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.LinkedList.descendingIterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.util.LinkedList.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <tt>LinkedList</tt> 的浅表副本。（这些元素本身没有复制。）

@return 此 <tt>LinkedList</tt> 实例的浅表副本

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.util.LinkedList.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回以适当顺序（从第一个元素到最后一个元素）包含此列表中所有元素的数组。

<p>由于此列表不维护对返回数组的任何引用，因而它将是“安全的”。（换句话说，此方法必须分配一个新数组）。因此，调用者可以随意修改返回的数组。

<p>此方法充当基于数组的 API 与基于 collection 的 API 之间的桥梁。

@return 以适当顺序包含此列表中所有元素的数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.util.LinkedList.toArray(T[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回以适当顺序（从第一个元素到最后一个元素）包含此列表中所有元素的数组；返回数组的运行时类型为指定数组的类型。如果指定数组能容纳列表，则在其中返回该列表。否则，分配具有指定数组的运行时类型和此列表大小的新数组。

<p>如果指定数组能容纳列表，并有剩余空间（即数组比列表元素多），则紧跟在列表末尾的数组元素会被设置为 <tt>null</tt>。（<i>只有</i> 在调用者知道列表不包含任何 null 元素时，才可使用此方法来确定列表的长度。）

<p>像 {@link #toArray()} 方法一样，此方法充当基于数组的 API 与基于 collection 的 API 之间的桥梁。更进一步说，此方法允许对输出数组的运行时类型上进行精确控制，在某些情况下，可以用来节省分配开销。

<p>假定 <tt>x</tt> 是只包含字符串的一个已知列表。以下代码可用来将该列表转储到一个新分配的 <tt>String</tt> 数组：

 <pre>
     String[] y = x.toArray(new String[0]);</pre>

注意，<tt>toArray(new Object[0])</tt> 和 <tt>toArray()</tt> 在功能上是相同的。

@param a 要在其中存储列表元素的数组（如果它足够大）；否则，为其分配具有相同运行时类型的新数组
@return 包含列表元素的数组
@throws ArrayStoreException 如果指定数组的运行时类型不是此列表中每个元素的运行时类型的超类型
@throws NullPointerException 如果指定的数组为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.LinkedList.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流重构此 <tt>LinkedList</tt> 实例（也就是将其反序列化）。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.LinkedList.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <tt>LinkedList</tt> 实例的状态保存到流中（也就是将其序列化）。

@serialData 列表的大小（它所包含的元素数）(int)，然后是其按恰当顺序排列的所有元素（每个对象）。

<!-- END DATA -->
