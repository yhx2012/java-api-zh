<!-- BEGIN KEY -->
public class java.util.IdentityHashMap extends java.util.AbstractMap implements java.util.Map, java.io.Serializable, java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
此类利用哈希表实现 <tt>Map</tt> 接口，比较键（和值）时使用引用相等性代替对象相等性。换句话说，在 <tt>IdentityHashMap</tt> 中，当且仅当 <tt>(k1==k2)</tt> 时，才认为两个键 <tt>k1</tt> 和 <tt>k2</tt> 相等（在正常 <tt>Map</tt> 实现（如 <tt>HashMap</tt>）中，当且仅当满足下列条件时才认为两个键 <tt>k1</tt> 和 <tt>k2</tt> 相等：<tt>(k1==null ? k2==null : e1.equals(e2))</tt>）。

<p><b>此类<i>不是</i> 通用 <tt>Map</tt> 实现！此类实现 <tt>Map</tt> 接口时，它有意违反 <tt>Map</tt> 的常规协定，该协定在比较对象时强制使用 <tt>equals</tt> 方法。此类设计仅用于其中需要引用相等性语义的罕见情况。</b>

<p>此类的典型用法是<i>拓扑保留对象图形转换</i>，如序列化或深层复制。要执行这样的转换，程序必须维护用于跟踪所有已处理对象引用的“节点表”。节点表一定不等于不同对象，即使它们偶然相等也如此。此类的另一种典型用法是维护<i>代理对象</i>。例如，调试设施可能希望为正在调试程序中的每个对象维护代理对象。

<p>此类提供所有的可选映射操作，并且允许 <tt>null</tt> 值和 <tt>null</tt> 键。此类对映射的顺序不提供任何保证；特别是不保证顺序随时间的推移保持不变。

<p>此类提供基本操作（<tt>get</tt> 和 <tt>put</tt>）的稳定性能，假定系统标识了将桶间元素正确分开的哈希函数 ({@link System#identityHashCode(Object)})。

<p>此类具有一个调整参数（影响性能但不影响语义）：<i>expected maximum size</i>。此参数是希望映射保持的键值映射关系最大数。在内部，此参数用于确定最初组成哈希表的桶数。未指定所期望的最大数量和桶数之间的确切关系。

<p>如果映射的大小（键值映射关系数）已经超过期望的最大数量，则桶数会增加，增加桶数（“重新哈希”）可能相当昂贵，因此创建具有足够大的期望最大数量的标识哈希映射更合算。另一方面，对 collection 视图进行迭代所需的时间与哈希表中的桶数成正比，所以如果特别注重迭代性能或内存使用，则不宜将期望的最大数量设置得过高。

<p><b>注意，此实现不是同步的。</b>如果多个线程同时访问标识哈希映射，并且其中至少一个线程从结构上修改了该映射，则其<i>必须</i> 保持外部同步（结构上的修改是指添加或删除一个或多个映射关系的操作；仅改变与实例已经包含的键关联的值不是结构上的修改。）这一般通过对自然封装该映射的对象进行同步操作来完成。
如果不存在这样的对象，则应该使用  {@link Collections#synchronizedMap Collections.synchronizedMap} 方法来“包装”该映射。最好在创建时完成这一操作，以防止对映射进行意外的不同步访问，如下所示：<pre>
     Map m = Collections.synchronizedMap(new HashMap(...)); </pre>

<p>由所有此类的“collection 视图方法”所返回的collections的<tt>iterator</tt> 方法返回的迭代器都是<i>快速失败</i> 的：在迭代器创建之后，如果从结构上对映射进行修改，除非通过迭代器自身的 <tt>remove</tt> 或 <tt>add</tt> 方法，其他任何时间任何方式的修改，迭代器都将抛出 <tt>ConcurrentModificationException</tt>。因此，面对并发的修改，迭代器很快就会完全失败，而不冒在将来不确定的时间任意发生不确定行为的风险。

<p>注意，迭代器的快速失败行为不能得到保证，一般来说，存在不同步的并发修改时，不可能作出任何强有力的保证。快速失败迭代器尽最大努力抛出 <tt>ConcurrentModificationException</tt>。因此，编写依赖于此异常的程序的方式是错误的，正确做法是：<i>迭代器的快速失败行为应该仅用于检测程序错误。</i>

<p>实现注意事项：此为简单的<i>线性探头</i> 哈希表，如 Sedgewick 和 Knuth 原文示例中所述。该数组交替保持键和值（对于大型表来说，它比使用独立组保持键和值更具优势）。对于多数 JRE 实现和混合操作，此类比 {@link HashMap}（它使用<i>链</i> 而不使用线性探头）能产生更好的性能。

<p>此类是  <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

@see     System#identityHashCode(Object)
@see     Object#hashCode()
@see     Collection
@see	    Map
@see	    HashMap
@see	    TreeMap
@author  Doug Lea and Josh Bloch
@since   1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.util.IdentityHashMap.size
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此标识哈希映射中的键-值映射关系数。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.IdentityHashMap()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有默认期望最大数量 (21) 的新的空标识哈希映射。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.IdentityHashMap(int expectedMaxSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有指定期望最大数量的新的空映射。将多于期望数的键-值映射关系放置到映射中可能会导致内部数据结构的增长，这种增长是颇为耗时的。

@param expectedMaxSize 映射的期望最大数量
@throws IllegalArgumentException 如果 <tt>expectedMaxSize</tt> 是负数

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.IdentityHashMap(java.util.Map<? extends K, ? extends V> m)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造包含指定映射中键-值映射关系的新标识哈希映射。

@param m 要将其映射关系放置在此映射中的映射
@throws NullPointerException 如果指定的映射为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.IdentityHashMap.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回标识哈希映射中的键-值映射关系数。

@return 映射中的键-值映射关系数

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.IdentityHashMap.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此标识哈希映射不包含键-值映射关系，则返回 <tt>true</tt>。

@return 如果此标识哈希映射不包含键-值映射关系，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.IdentityHashMap.get(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定键映射的值；如果映射不包含此键的任何映射关系，则返回 {@code null}。

<p>更确切地讲，如果此映射包含满足 {@code (key == k)} 的从键 {@code k} 到值 {@code v} 的映射关系，则此方法返回 {@code v}；否则，返回 {@code null}。（最多只能有一个这样的映射关系。）

<p>返回值为 {@code null} 并不<i>一定</i> 表示映射不包含此键的映射关系；也可能是映射显式地将键映射到 {@code null}。使用 {@link #containsKey containsKey} 方法可以区分这两种情况。

@see #put(Object, Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.IdentityHashMap.containsKey(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试指定的对象引用是否为此标识哈希映射中的键。

@param   key   可能的键
@return  如果指定的对象引用是此映射中的键，则返回 <code>true</code>
@see     #containsValue(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.IdentityHashMap.containsValue(Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试指定的对象引用是否为此标识哈希映射中的值。

@param value 要测试其是否在此映射中存在的值
@return 如果此映射将一个或多个键映射到指定对象引用，则返回 <tt>true</tt>
@see     #containsKey(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.IdentityHashMap.put(K key, V value)
<!-- END KEY -->
<!-- BEGIN DATA -->
在此标识哈希映射中关联指定值与指定键。如果映射以前包含了一个此键的映射关系，那么将替换旧值。

@param key 要将指定值关联到的键
@param value 要关联到指定键的值
@return 返回与 <tt>key</tt> 相关联的先前值，如果 <tt>key</tt> 没有映射关系，则返回 <tt>null</tt>（返回 <tt>null</tt> 可能还表示映射以前将 <tt>null</tt> 与指定键关联）
@see     Object#equals(Object)
@see     #get(Object)
@see     #containsKey(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.IdentityHashMap.putAll(java.util.Map<? extends K, ? extends V> m)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定映射的全部映射关系复制到此映射，这些映射关系将替换此映射目前针对指定映射的任何键的任何映射关系。<p>

@param m 要在此映射中存储的映射关系。
@throws NullPointerException 如果指定的映射为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.IdentityHashMap.remove(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除映射中此键的映射关系（如果存在的话）。

@param key 其映射关系要从映射中移除的键
@return 返回与 <tt>key</tt> 相关联的先前值，如果 <tt>key</tt> 没有任何映射关系，则返回 <tt>null</tt>（返回 <tt>null</tt> 还客表示映射以前将 <tt>null</tt> 与 <tt>key</tt> 关联）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.IdentityHashMap.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
从映射中移除所有映射关系。
此调用返回后映射将为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.IdentityHashMap.equals(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较指定对象与此映射的相等性。如果给定对象也是一个映射并且两个映射表示相同的对象引用映射关系，则返回 <tt>true</tt>。更确切地讲，当且仅当映射 <tt>this.entrySet().equals(m.entrySet())</tt> 时，此映射等于另一个映射 <tt>m</tt>。

<p><b>由于此映射基于引用相等性的语义，所以如果将此映射与正常映射相比，则可能违反 <tt>Object.equals</tt> 协定的对称性和传递性要求。但是，需要保证在 <tt>IdentityHashMap</tt> 实例间遵守 <tt>Object.equals</tt> 协定。</b>

@param  o 要与此映射进行相等性比较的对象
@return 如果指定对象等于此映射，则返回 <tt>true</tt>
@see Object#equals(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.IdentityHashMap.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回映射的哈希码值。映射的哈希码被定义为该映射 <tt>entrySet()</tt> 视图中所有项的哈希码和。这确保了 <tt>m1.equals(m2)</tt> 意味着对于任何两个 <tt>IdentityHashMap</tt> 实例 <tt>m1</tt> 和 <tt>m2</tt> 而言，都存在 <tt>m1.hashCode()==m2.hashCode()</tt>，这是 {@link Object#hashCode} 的通用协定的所要求的。

<p><b>由于此映射的 <tt>entrySet</tt> 方法所返回 set 中 <tt>Map.Entry</tt> 实例的基于引用相等性的语义，所以如果进行比较的两个对象中一个是 <tt>IdentityHashMap</tt> 实例，而另一个是正常映射，则可能违反以上段落中提到的 <tt>Object.hashCode</tt> 的协定要求。</b>

@return 此映射的哈希码值
@see Object#equals(Object)
@see #equals(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.util.IdentityHashMap.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此标识哈希映射的浅表副本：不复制键和值本身。

@return 此映射的浅表副本

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<K> java.util.IdentityHashMap.keySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回映射中所包含键的基于标识的 set 视图。该 set 受映射支持，所以对映射的改变可在此 set 中反映出来，反之亦然。如果在对 set 进行迭代的同时修改映射，则迭代的结果是未定义的。该 set 支持元素的移除，通过 <tt>Iterator.remove</tt>、<tt>Set.remove</tt>、<tt>removeAll</tt>、<tt>retainAll</tt> 和 <tt>clear</tt> 方法可从映射中移除相应的映射关系。它不支持 <tt>add</tt> 或 <tt>addAll</tt> 方法。

<p><b>此方法返回的对象实现 <tt>Set</tt> 接口时，它<i>不</i> 遵守 <tt>Set</tt> 的常规协定。与其底层映射一样，此方法返回的 set 将元素相等性定义为引用相等性，而非对象相等性。这一点将对其 <tt>contains</tt>、<tt>remove</tt>、<tt>containsAll</tt>、<tt>equals</tt> 和 <tt>hashCode</tt> 方法的行为产生影响。</b>

<p><b>如果指定对象是一个包含与返回 set 完全相同的对象引用的 set，则返回 set 的 <tt>equals</tt> 方法将返回 <tt>true</tt>。如果将此方法返回的 set 与正常 set 相比较，则可能违反 <tt>Object.equals</tt> 协定的对称性和传递性要求。但是，需要保证在此方法返回的 set 中遵守 <tt>Object.equals</tt> 协定。</b>

<p>返回 set 的 <tt>hashCode</tt> 方法返回该 set 中元素的<i>标识哈希码</i> 和，而不是其哈希码的和。为了强制遵守此方法所返回 set 中 <tt>Object.hashCode</tt> 方法的常规协定，需要通过更改 <tt>equals</tt> 方法的语义来强制完成。

@return 映射所含键的基于标识的 set 视图
@see Object#equals(Object)
@see System#identityHashCode(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Collection<V> java.util.IdentityHashMap.values()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>返回映射所包含值的 {@link Collection} 视图。该 collection 受映射的支持，所以对映射的改变可在此 collection 中反映出来，反之亦然。如果在对 collection 进行迭代的同时修改映射，则迭代的结果是未定义的。该 collection 支持元素的移除，通过 <tt>Iterator.remove</tt>、<tt>Collection.remove</tt>、<tt>removeAll</tt>、<tt>retainAll</tt> 和 <tt>clear</tt> 方法可从该映射中移除相应的映射关系。它不支持 <tt>add</tt> 或 <tt>addAll</tt> 方法。

<p><b>此方法返回的对象实现 <tt>Collection</tt> 接口时，它<i>不</i> 遵守 <tt>Collection</tt> 的常规协定。与其底层映射一样，此方法返回的 collection 将元素相等性定义为引用相等性，而非对象相等性。这一点将对其 <tt>contains</tt>、<tt>remove</tt> 和 <tt>containsAll</tt> 方法的行为产生影响。</b>


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.util.Map.Entry<K, V>> java.util.IdentityHashMap.entrySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射所包含映射关系的 {@link Set} 视图。在返回的 set 中，每个元素都是一个基于引用相等性的 <tt>Map.Entry</tt>。该 set 受映射支持，所以对映射的改变可在此 set 中反映出来，反之亦然。如果在对 set 进行迭代的同时修改映射，则迭代的结果是未定义的。该 set 支持元素的移除，通过 <tt>Iterator.remove</tt>、<tt>Set.remove</tt>、<tt>removeAll</tt>、<tt>retainAll</tt> 和 <tt>clear</tt> 方法可从此映射移除相应的映射关系。它不支持 <tt>add</tt> 或 <tt>addAll</tt> 方法。

<p>与底层映射一样，此方法所返回 set 中的 <tt>Map.Entry</tt> 对象将键和值的相等性定义为引用相等性，而非对象相等性。这一点将对 <tt>Map.Entry</tt> 对象的 <tt>equals</tt> 和 <tt>hashCode</tt> 方法的行为产生影响。当且仅当 <tt>o</tt> 为 <tt>Map.Entry</tt> 并且 <tt>e.getKey()==o.getKey() &amp;&amp; e.getValue()==o.getValue()</tt> 时，基于引用相等性的 <tt>Map.Entry e</tt> 等于对象 <tt>o</tt>。为了适应这些相等语义，<tt>hashCode</tt> 方法返回 <tt>System.identityHashCode(e.getKey()) ^ System.identityHashCode(e.getValue())</tt>。

<p><b>由于此方法所返回 set 中 <tt>Map.Entry</tt> 实例的基于引用相等性的语义，所以如果将该 set 中的任何项与正常映射项相比较，或者将此方法返回的 set 与正常映射项（比如在正式映射上对此方法的调用所返回的项）的 set 相比较，则可能违反 {@link Object#equals(Object)} 协定的对称性和传递性要求。但是，需要保证在基于标识的映射项中和在这些项的 set 中遵守 <tt>Object.equals</tt> 协定。</b>

@return 此映射所含标识映射关系的 set 视图

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.IdentityHashMap.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流重构 <tt>IdentityHashMap</tt> 实例（也就是将其反序列化）。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.IdentityHashMap.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <tt>IdentityHashMap</tt> 实例的状态保存到流中（也就是将其序列化）。

@serialData HashMap（键-值映射关系数）的<i>大小</i> (<tt>int</tt>)，然后是 IdentityHashMap 所表示的每个键-值映射关系的键（对象）和值（对象）。发出的键-值映射关系没有特定顺序。

<!-- END DATA -->
