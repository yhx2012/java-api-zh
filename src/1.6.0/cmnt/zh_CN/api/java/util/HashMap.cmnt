<!-- BEGIN KEY -->
public class java.util.HashMap extends java.util.AbstractMap implements java.util.Map, java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
基于哈希表的 <tt>Map</tt> 接口的实现。此实现提供所有可选的映射操作，并允许使用 <tt>null</tt> 值和 <tt>null</tt> 键。（除了非同步和允许使用 null 之外，<tt>HashMap</tt> 类与 <tt>Hashtable</tt> 大致相同。）此类不保证映射的顺序，特别是它不保证该顺序恒久不变。

<p>此实现假定哈希函数将元素适当地分布在各桶之间，可为基本操作（<tt>get</tt> 和 <tt>put</tt>）提供稳定的性能。迭代 collection 视图所需的时间与 <tt>HashMap</tt> 实例的“容量”（桶的数量）及其大小（键-值映射关系数）成比例。所以，如果迭代性能很重要，则不要将初始容量设置得太高（或将加载因子设置得太低）。

<p><tt>HashMap</tt> 的实例有两个参数影响其性能：<i>初始容量</i> 和<i>加载因子</i>。<i>容量</i> 是哈希表中桶的数量，初始容量只是哈希表在创建时的容量。<i>加载因子</i> 是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 <i>rehash</i> 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。

<p>通常，默认加载因子 (.75) 在时间和空间成本上寻求一种折衷。加载因子过高虽然减少了空间开销，但同时也增加了查询成本（在大多数 <tt>HashMap</tt> 类的操作中，包括 <tt>get</tt> 和 <tt>put</tt> 操作，都反映了这一点）。在设置初始容量时应该考虑到映射中所需的条目数及其加载因子，以便最大限度地减少 rehash 操作次数。如果初始容量大于最大条目数除以加载因子，则不会发生 rehash 操作。

<p>如果很多映射关系要存储在 <tt>HashMap</tt> 实例中，则相对于按需执行自动的 rehash 操作以增大表的容量来说，使用足够大的初始容量创建它将使得映射关系能更有效地存储。

<p><strong>注意，此实现不是同步的。</strong>如果多个线程同时访问一个哈希映射，而其中至少一个线程从结构上修改了该映射，则它<i>必须</i> 保持外部同步。（结构上的修改是指添加或删除一个或多个映射关系的任何操作；仅改变与实例已经包含的键关联的值不是结构上的修改。）这一般通过对自然封装该映射的对象进行同步操作来完成。如果不存在这样的对象，则应该使用 {@link Collections#synchronizedMap Collections.synchronizedMap} 方法来“包装”该映射。最好在创建时完成这一操作，以防止对映射进行意外的非同步访问，如下所示：<pre>
   Map m = Collections.synchronizedMap(new HashMap(...));</pre>

<p>由所有此类的“collection 视图方法”所返回的迭代器都是<i>快速失败</i> 的：在迭代器创建之后，如果从结构上对映射进行修改，除非通过迭代器本身的 <tt>remove</tt> 方法，其他任何时间任何方式的修改，迭代器都将抛出 {@link ConcurrentModificationException}。因此，面对并发的修改，迭代器很快就会完全失败，而不冒在将来不确定的时间发生任意不确定行为的风险。

<p>注意，迭代器的快速失败行为不能得到保证，一般来说，存在非同步的并发修改时，不可能作出任何坚决的保证。快速失败迭代器尽最大努力抛出 <tt>ConcurrentModificationException</tt>。因此，编写依赖于此异常的程序的做法是错误的，正确做法是：<i>迭代器的快速失败行为应该仅用于检测程序错误。</i>

<p>此类是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

@param <K> 此映射所维护的键的类型
@param <V> 所映射值的类型

@author  Doug Lea
@author  Josh Bloch
@author  Arthur van Hoff
@author  Neal Gafter
@version 1.72, 04/24/06
@see     Object#hashCode()
@see     Collection
@see	    Map
@see	    TreeMap
@see	    Hashtable
@since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.util.HashMap.threshold
<!-- END KEY -->
<!-- BEGIN DATA -->
调整后（容量 * 加载因子）的大小值。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
final float java.util.HashMap.loadFactor
<!-- END KEY -->
<!-- BEGIN DATA -->
哈希表的加载因子。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.HashMap(int initialCapacity, float loadFactor)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个带指定初始容量和加载因子的空 <tt>HashMap</tt>。

@param  initialCapacity 初始容量
@param  loadFactor      加载因子
@throws IllegalArgumentException 如果初始容量为负或者加载因子为非正

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.HashMap(int initialCapacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个带指定初始容量和默认加载因子 (0.75) 的空 <tt>HashMap</tt>。

@param  initialCapacity 初始容量。
@throws IllegalArgumentException 如果初始容量为负。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.HashMap()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有默认初始容量 (16) 和默认加载因子 (0.75) 的空 <tt>HashMap</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.HashMap(java.util.Map<? extends K, ? extends V> m)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个映射关系与指定 <tt>Map</tt> 相同的新 <tt>HashMap</tt>。所创建的 <tt>HashMap</tt> 具有默认加载因子 (0.75) 和足以容纳指定 <tt>Map</tt> 中映射关系的初始容量。

@param   m 映射，其映射关系将存放在此映射中
@throws  NullPointerException 如果指定的映射为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.HashMap.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射中的键-值映射关系数。

@return 此映射中的键-值映射关系数

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.HashMap.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此映射不包含键-值映射关系，则返回 <tt>true</tt>。

@return 如果此映射不包含键-值映射关系，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.HashMap.get(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定键所映射的值；如果对于该键来说，此映射不包含任何映射关系，则返回 {@code null}。

<p>更确切地讲，如果此映射包含一个满足 {@code (key==null ? k==null :
 key.equals(k))} 的从 {@code k} 键到 {@code v} 值的映射关系，则此方法返回 {@code v}；否则返回 {@code null}。（最多只能有一个这样的映射关系。）  

<p>返回 {@code null} 值并不<i>一定</i> 表明该映射不包含该键的映射关系；也可能该映射将该键显示地映射为 {@code null}。可使用 {@link #containsKey containsKey} 操作来区分这两种情况。

@see #put(Object, Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.HashMap.containsKey(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此映射包含对于指定键的映射关系，则返回 <tt>true</tt>。

@param   key   要测试其是否在此映射中存在的键
@return  如果此映射包含对于指定键的映射关系，则返回 <tt>true</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.HashMap.put(K key, V value)
<!-- END KEY -->
<!-- BEGIN DATA -->
在此映射中关联指定值与指定键。如果该映射以前包含了一个该键的映射关系，则旧值被替换。

@param key 指定值将要关联的键
@param value 指定键将要关联的值
@return 与 <tt>key</tt> 关联的旧值；如果 <tt>key</tt> 没有任何映射关系，则返回 <tt>null</tt>。（返回 <tt>null</tt> 还可能表示该映射之前将 <tt>null</tt> 与 <tt>key</tt> 关联。）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.HashMap.putAll(java.util.Map<? extends K, ? extends V> m)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定映射的所有映射关系复制到此映射中，这些映射关系将替换此映射目前针对指定映射中所有键的所有映射关系。

@param m 要在此映射中存储的映射关系
@throws  NullPointerException 如果指定的映射为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.HashMap.remove(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此映射中移除指定键的映射关系（如果存在）。

@param key 其映射关系要从映射中移除的键
@return 与 <tt>key</tt> 关联的旧值；如果 <tt>key</tt> 没有任何映射关系，则返回 <tt>null</tt>。（返回 <tt>null</tt> 还可能表示该映射之前将 <tt>null</tt> 与 <tt>key</tt> 关联。）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.HashMap.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
从此映射中移除所有映射关系。此调用返回后，映射将为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.HashMap.containsValue(Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此映射将一个或多个键映射到指定值，则返回 <tt>true</tt>。

@param value 要测试其是否在此映射中存在的值
@return 如果此映射将一个或多个键映射到指定值，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.util.HashMap.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <tt>HashMap</tt> 实例的浅表副本：并不复制键和值本身。

@return 此映射的浅表副本

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<K> java.util.HashMap.keySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射中所包含的键的 {@link Set} 视图。该 set 受映射的支持，所以对映射的更改将反映在该 set 中，反之亦然。如果在对 set 进行迭代的同时修改了映射（通过迭代器自己的 <tt>remove</tt> 操作除外），则迭代结果是不确定的。该 set 支持元素的移除，通过 <tt>Iterator.remove</tt>、<tt>Set.remove</tt>、<tt>removeAll</tt>、<tt>retainAll</tt> 和 <tt>clear</tt> 操作可从该映射中移除相应的映射关系。它不支持 <tt>add</tt> 或 <tt>addAll</tt> 操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Collection<V> java.util.HashMap.values()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射所包含的值的 {@link Collection} 视图。该 collection 受映射的支持，所以对映射的更改将反映在该 collection 中，反之亦然。如果在对 collection 进行迭代的同时修改了映射（通过迭代器自己的 <tt>remove</tt> 操作除外），则迭代结果是不确定的。该 collection 支持元素的移除，通过 <tt>Iterator.remove</tt>、<tt>Collection.remove</tt>、<tt>removeAll</tt>、<tt>retainAll</tt> 和 <tt>clear</tt> 操作可从该映射中移除相应的映射关系。它不支持 <tt>add</tt> 或 <tt>addAll</tt> 操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.util.Map.Entry<K, V>> java.util.HashMap.entrySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此映射所包含的映射关系的 {@link Set} 视图。 该 set 受映射支持，所以对映射的更改将反映在此 set 中，反之亦然。如果在对 set 进行迭代的同时修改了映射（通过迭代器自己的 <tt>remove</tt> 操作，或者通过在该迭代器返回的映射项上执行 <tt>setValue</tt> 操作除外），则迭代结果是不确定的。该 set 支持元素的移除，通过 <tt>Iterator.remove</tt>、<tt>Set.remove</tt>、<tt>removeAll</tt>、<tt>retainAll</tt> 和 <tt>clear</tt> 操作可从该映射中移除相应的映射关系。它不支持 <tt>add</tt> 或 <tt>addAll</tt> 操作。

@return 此映射所包含的映射关系的 set 视图。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.HashMap.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流重构 <tt>HashMap</tt> 实例（也就是将其反序列化）。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.HashMap.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <tt>HashMap</tt> 实例的状态保存到流中（也就是将其序列化）。

@serialData 发出 HashMap 的<i>容量</i>（桶数组的长度，为 int 值），后跟 <i>size</i>（一个 int 值，键-值映射关系数），后跟每个键-值映射关系的键 (Object) 和值 (Object)。发出的键-值映射关系没有特定顺序。

<!-- END DATA -->
