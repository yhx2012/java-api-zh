<!-- BEGIN KEY -->
public class java.util.HashSet extends java.util.AbstractSet implements java.util.Set, java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
此类实现 <tt>Set</tt> 接口，由哈希表（实际上是一个 <tt>HashMap</tt> 实例）支持。它不保证 set 的迭代顺序；特别是它不保证该顺序恒久不变。此类允许使用 <tt>null</tt> 元素。

<p>此类为基本操作提供了稳定性能，这些基本操作包括 <tt>add</tt>、<tt>remove</tt>、<tt>contains</tt> 和 <tt>size</tt>，假定哈希函数将这些元素正确地分布在桶中。对此 set 进行迭代所需的时间与 <tt>HashSet</tt> 实例的大小（元素的数量）和底层 <tt>HashMap</tt> 实例（桶的数量）的“容量”的和成比例。因此，如果迭代性能很重要，则不要将初始容量设置得太高（或将加载因子设置得太低）。

<p><strong>注意，此实现不是同步的。</strong>如果多个线程同时访问一个哈希 set，而其中至少一个线程修改了该 set，那么它<i>必须</i> 保持外部同步。这通常是通过对自然封装该 set 的对象执行同步操作来完成的。如果不存在这样的对象，则应该使用 {@link Collections#synchronizedSet Collections.synchronizedSet} 方法来“包装” set。最好在创建时完成这一操作，以防止对该 set 进行意外的不同步访问：<pre>
   Set s = Collections.synchronizedSet(new HashSet(...));</pre>

<p>此类的 <tt>iterator</tt> 方法返回的迭代器是<i>快速失败</i> 的：在创建迭代器之后，如果对 set 进行修改，除非通过迭代器自身的 <tt>remove</tt> 方法，否则在任何时间以任何方式对其进行修改，Iterator 都将抛出 {@link ConcurrentModificationException}。因此，面对并发的修改，迭代器很快就会完全失败，而不冒将来在某个不确定时间发生任意不确定行为的风险。
 
<p>注意，迭代器的快速失败行为无法得到保证，因为一般来说，不可能对是否出现不同步并发修改做出任何硬性保证。快速失败迭代器在尽最大努力抛出 <tt>ConcurrentModificationException</tt>。因此，为提高这类迭代器的正确性而编写一个依赖于此异常的程序是错误做法：<i>迭代器的快速失败行为应该仅用于检测 bug。</i>

<p>此类是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

@param <E> 此 set 所维护的元素的类型

@author  Josh Bloch
@author  Neal Gafter
@version 1.37, 04/21/06
@see	    Collection
@see	    Set
@see	    TreeSet
@see	    HashMap
@since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.HashSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的空 set，其底层 <tt>HashMap</tt> 实例的默认初始容量是 16，加载因子是 0.75。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.HashSet(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个包含指定 collection 中的元素的新 set。使用默认的加载因子 0.75 和足以包含指定 collection 中所有元素的初始容量来创建 <tt>HashMap</tt>。

@param c 其中的元素将存放在此 set 中的 collection
@throws NullPointerException   如果指定的 collection 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.HashSet(int initialCapacity, float loadFactor)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的空 set，其底层 <tt>HashMap</tt> 实例具有指定的初始容量和指定的加载因子。

@param      initialCapacity   哈希映射的初始容量
@param      loadFactor        哈希映射的加载因子
@throws     IllegalArgumentException 如果初始容量小于零，或者加载因子为非正数

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.HashSet(int initialCapacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的空 set，其底层 <tt>HashMap</tt> 实例具有指定的初始容量和默认的加载因子（0.75）。

@param      initialCapacity   哈希表的初始容量
@throws     IllegalArgumentException 如果初始容量小于零

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.HashSet.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对此 set 中元素进行迭代的迭代器。返回元素的顺序并不是特定的。

@return 对此 set 中元素进行迭代的 Iterator
@see ConcurrentModificationException

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.HashSet.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 set 中的元素的数量（set 的容量）。

@return 此 set 中的元素的数量（set 的容量）

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.HashSet.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 set 不包含任何元素，则返回 <tt>true</tt>。

@return 如果此 set 不包含任何元素，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.HashSet.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 set 包含指定元素，则返回 <tt>true</tt>。 更确切地讲，当且仅当此 set 包含一个满足 <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt> 的 <tt>e</tt> 元素时，返回 <tt>true</tt>。

@param o 其在此 set 中的存在已得到测试的元素
@return 如果此 set 包含指定元素，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.HashSet.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 set 中尚未包含指定元素，则添加指定元素。更确切地讲，如果此 set 没有包含满足 <tt>(e==null&nbsp;?&nbsp;e2==null&nbsp;:&nbsp;e.equals(e2))</tt> 的元素 <tt>e2</tt>，则向此 set 添加指定的元素 <tt>e</tt>。如果此 set 已包含该元素，则该调用不更改 set 并返回 <tt>false</tt>。

@param e 将添加到此 set 中的元素
@return 如果此 set 尚未包含指定元素，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.HashSet.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果指定元素存在于此 set 中，则将其移除。更确切地讲，如果此 set 包含一个满足 <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt> 的元素 <tt>e</tt>，则将其移除。如果此 set 已包含该元素，则返回 <tt>true</tt>（或者：如果此 set 因调用而发生更改，则返回 <tt>true</tt>）。（一旦调用返回，则此 set 不再包含该元素）。

@param o 如果存在于此 set 中则需要将其移除的对象
@return 如果 set 包含指定元素，则返回 <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.HashSet.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
从此 set 中移除所有元素。此调用返回后，该 set 将为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.util.HashSet.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <tt>HashSet</tt> 实例的浅表副本：并没有复制这些元素本身。

@return 此 set 的浅表副本

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.HashSet.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流重构 <tt>HashSet</tt> 实例（也就是将其反序列化）。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.HashSet.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <tt>HashSet</tt> 实例的状态保存到流中（也就是将它序列化）。

@serialData 发出底层 <tt>HashMap</tt> 实例的容量（int）及其加载因子（float），后跟 set 的大小（所包含元素的数量（int）），再后跟着它的所有元素（每个元素都是一个对象），这些元素没有按特定顺序排列。

<!-- END DATA -->
