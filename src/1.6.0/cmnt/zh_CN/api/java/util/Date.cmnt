<!-- BEGIN KEY -->
public class java.util.Date extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable, java.lang.Comparable
<!-- END KEY -->
<!-- BEGIN DATA -->
类 <code>Date</code> 表示特定的瞬间，精确到毫秒。
 <p>
在 JDK&nbsp;1.1 之前，类 <code>Date</code> 有两个其他的函数。它允许把日期解释为年、月、日、小时、分钟和秒值。它也允许格式化和解析日期字符串。不过，这些函数的 API 不易于实现国际化。从 JDK&nbsp;1.1 开始，应该使用 <code>Calendar</code> 类实现日期和时间字段之间转换，使用 <code>DateFormat</code> 类来格式化和解析日期字符串。<code>Date</code> 中的相应方法已废弃。
 <p>
尽管 <code>Date</code> 类打算反映协调世界时 (UTC)，但无法做到如此准确，这取决于 Java 虚拟机的主机环境。当前几乎所有操作系统都假定 1 天&nbsp;= 24&nbsp;&times;&nbsp;60&nbsp;&times;&nbsp;60&nbsp;= 86400 秒。但对于 UTC，大约每一两年出现一次额外的一秒，称为&ldquo;闰秒&rdquo;。闰秒始终作为当天的最后一秒增加，并且始终在 12 月 31 日或 6 月 30 日增加。例如，1995 年的最后一分钟是 61 秒，因为增加了闰秒。大多数计算机时钟不是特别的准确，因此不能反映闰秒的差别。 
 <p>
一些计算机标准是按照格林威治标准时 (GMT) 定义的，格林威治标准时和世界时 (UT) 是相等的。GMT 是标准的&ldquo;民间&rdquo;名称；UT 是相同标准的&ldquo;科学&rdquo;名称。UTC 和 UT 的区别是：UTC 是基于原子时钟的，UT 是基于天体观察的，两者在实际应用中难分轩轾。因为地球的旋转不是均匀的（它以复杂的方式减速和加速），所以 UT 始终不是均匀地流过。闰秒是根据需要引入 UTC 的，以便把 UTC 保持在 UT1 的 0.9 秒之内，UT1 是应用了某些更正的 UT 版本。还有其他的时间和日期系统；例如，基于卫星的全球定位系统 (GPS) 使用的时间刻度与 UTC 同步，但<i>没有</i> 针对闰秒进行调整。有关更多信息的一个有趣来源是美国海军天文台，特别是 Directorate of Time 的网址：
 <blockquote><pre>
     <a href=http://tycho.usno.navy.mil>http://tycho.usno.navy.mil</a>
 </pre></blockquote>
 <p>
还有它们对 &quot;Systems of Time&quot; 的定义，网址为：
 <blockquote><pre>
     <a href=http://tycho.usno.navy.mil/systime.html>http://tycho.usno.navy.mil/systime.html</a>
 </pre></blockquote>
 <p>
在类 <code>Date</code> 所有可以接受或返回年、月、日期、小时、分钟和秒值的方法中，将使用下面的表示形式： 
 <ul>
<li>年份 <i>y</i> 由整数 <i>y</i>&nbsp;<code>-&nbsp;1900</code> 表示。 
<li>月份由从 0 至 11 的整数表示；0 是一月、1 是二月等等；因此 11 是十二月。 
<li>日期（一月中的某天）按通常方式由整数 1 至 31 表示。 
<li>小时由从 0 至 23 的整数表示。因此，从午夜到 1 a.m. 的时间是 0 点，从中午到 1 p.m. 的时间是 12 点。
<li>分钟按通常方式由 0 至 59 的整数表示。
<li>秒由 0 至 61 的整数表示；值 60 和 61 只对闰秒发生，尽管那样，也只用在实际正确跟踪闰秒的 Java 实现中。于按当前引入闰秒的方式，两个闰秒在同一分钟内发生是极不可能的，但此规范遵循 ISO C 的日期和时间约定。
 </ul>
 <p>
在所有情形中，针对这些目的赋予方法的参数不需要在指定的范围内；例如，可以把日期指定为 1 月 32 日，并把它解释为 2 月 1 日的相同含义。

@author  James Gosling
@author  Arthur van Hoff
@author  Alan Liu
@version 1.80, 05/18/04
@see     java.text.DateFormat
@see     java.util.Calendar
@see     java.util.TimeZone
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Date()
<!-- END KEY -->
<!-- BEGIN DATA -->
分配 <code>Date</code> 对象并初始化此对象，以表示分配它的时间（精确到毫秒）。

@see java.lang.System#currentTimeMillis()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Date(long date)
<!-- END KEY -->
<!-- BEGIN DATA -->
分配 <code>Date</code> 对象并初始化此对象，以表示自从标准基准时间（称为&ldquo;历元（epoch）&rdquo;，即 1970 年 1 月 1 日 00:00:00 GMT）以来的指定毫秒数。 

@param   date   自 1970 年 1 月 1 日 00:00:00 GMT 以来的毫秒数。
@see     java.lang.System#currentTimeMillis()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Date(int year, int month, int date)
<!-- END KEY -->
<!-- BEGIN DATA -->
分配 <code>Date</code> 对象并初始化此对象，以表示由 <code>year</code>、<code>month</code> 和 <code>date</code> 参数指定的一天的开始时间（本地时间晚上 12 时）。 

@param year    减 1900 的年份。
@param month   0-11 的月份。
@param date    一月中 1-31 之间的某一天。
@see   java.util.Calendar
@deprecated 从 JDK 1.1 开始，由 <code>Calendar.set(year + 1900, month, date)</code> 或 <code>GregorianCalendar(year + 1900, month, date)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Date(int year, int month, int date, int hrs, int min)
<!-- END KEY -->
<!-- BEGIN DATA -->
分配 <code>Date</code> 对象并初始化此对象，以表示本地时区中由 <code>year</code>、<code>month</code>、<code>date</code>、<code>hrs</code> 和 <code>min</code> 参数指定的分钟的开始瞬间。 

@param   year    减 1900 的年份。
@param   month   0-11 之间的月份。
@param   date    一月中 1-31 之间的某一天。
@param   hrs     0-23 之间的小时数。
@param   min     0-59 之间的分钟数。
@see     java.util.Calendar
@deprecated 从 JDK 1.1 开始，由 <code>Calendar.set(year + 1900, month, date, hrs, min)</code> 或 <code>GregorianCalendar(year + 1900, month, date, hrs, min)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Date(int year, int month, int date, int hrs, int min, int sec)
<!-- END KEY -->
<!-- BEGIN DATA -->
分配 <code>Date</code> 对象，并初始化此对象，以表示本地时区中由 <code>year</code>、<code>month</code>、<code>date</code>、<code>hrs</code>、<code>min</code> 和 <code>sec</code> 参数指定的秒的开始瞬间。 

@param   year    减 1900 的年份。
@param   month   0-11 之间的月份。
@param   date    一月中 1-31 之间的某一天。
@param   hrs     0-23 之间的小时数。
@param   min     0-59 之间的分钟数。
@param   sec     0-59 之间的秒数。
@see     java.util.Calendar
@deprecated 从 JDK 1.1 开始，由 <code>Calendar.set(year + 1900, month, date, hrs, min, sec)</code> 或 <code>GregorianCalendar(year + 1900, month, date, hrs, min, sec)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Date(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
分配 <code>Date</code> 对象并初始化此对象，以表示字符串 <code>s</code> 指出的日期和时间，就像通过 {@link Date#parse} 方法解释一样。 

@param   s   日期的字符串表示形式。
@see     java.text.DateFormat
@see     java.util.Date#parse(java.lang.String)
@deprecated 从 JDK 1.1 开始，由 <code>DateFormat.parse(String s)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.util.Date.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象的副本。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.util.Date.UTC(int year, int month, int date, int hrs, int min, int sec)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据参数确定日期和时间。这些参数被解释为年份、月份、月中某一天、一天中的某一小时、小时中某一分钟和分钟中的某一秒。除了相对于 UTC 而不是本地时区解释这些参数之外，该方法与带 6 个参数的 <tt>Date</tt> 构造方法完全相同。该方法将返回指示的时间，用该时间与历元（1970 年 1 月 1 日，00:00:00 GMT）的时间差来表示（以毫秒为单位）。

@param   year    减 1900 的年份。
@param   month   0-11 之间的月份。
@param   date    一月中 1-31 之间的某一天。
@param   hrs     0-23 之间的小时数。
@param   min     0-59 之间的分钟数。
@param   sec     0-59 之间的秒数。
@return  对于参数指定的日期和时间，返回自 1970 年 1 月 1 日 00:00:00 GMT 以来的毫秒数。
@see     java.util.Calendar
@deprecated 从 JDK 1.1 开始，由 <code>Calendar.set(year + 1900, month, date, hrs, min, sec)</code> 或 <code>GregorianCalendar(year + 1900, month, date, hrs, min, sec)</code> 取代，使用 UTC <code>TimeZone</code>，后跟 <code>Calendar.getTime().getTime()</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.util.Date.parse(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
尝试把字符串 <tt>s</tt> 解释为日期和时间的表示形式。如果尝试成功，则返回指示的时间，用该时间与历元（1970 年 1 月 1 日，00:00:00 GMT）的时间差来表示（以毫秒为单位）。如果尝试失败，则抛出 <tt>IllegalArgumentException</tt>。
 <p>
它接受许多语法；特别是它识别 IETF 标准日期语法：&quot;Sat, 12 Aug 1995 13:30:00 GMT&quot;。它也了解美国大陆时区缩写，但对于一般用途，应该使用时区偏移量：&quot;Sat, 12 Aug 1995 13:30:00 GMT+0430&quot;（比格林威治子午线晚 4 小时 30 分）。如果没有指定时区，则假定用本地时区。GMT 和 UTC 被认为是相同的。
 <p>
系统将从左到右处理字符串 <tt>s</tt>，从中查找相应的数据。<tt>s</tt> 中包括在 ASCII 括号字符 <tt>(</tt> 和 <tt>)</tt> 中的任何内容都将被忽略。括号可以进行嵌套。另外，<tt>s</tt> 中只允许使用以下 ASCII 字符：
 <blockquote><pre>
 abcdefghijklmnopqrstuvwxyz
 ABCDEFGHIJKLMNOPQRSTUVWXYZ
 0123456789,+-:/</pre></blockquote>
以及空白字符。<p>
连续的十进制位序列被当成十进制数：<ul>
<li>如果数字前面有 <tt>+</tt> 或 <tt>-</tt>，并且已经识别了年份，那么数字就是一个时区偏移量。如果数字少于 24，那么它是以小时进行测量的偏移量。否则，它被认为是以分钟进行测量的偏移量，用没有标点的 24 小时时间格式来表示。前面的 <tt>-</tt> 意味着向西的偏移量。时区偏移量始终相对于 UTC（格林威治）。因此，例如，在字符串中出现的 <tt>-5</tt> 意味着&ldquo;比格林威治时间晚 5 小时&rdquo;，<tt>+0430</tt> 将意味着&ldquo;比格林威治时间早 4 小时 30 分&rdquo;。允许字符串冗余地指定 <tt>GMT</tt>、<tt>UT</tt> 或 <tt>UTC</tt>&mdash;&mdash;例如，<tt>GMT-5</tt> 或 <tt>utc+0430</tt>。
<li>如果下面条件之一为真，数字就被认为是年数：
 <ul>
<li>数字等于或大于 70，并且后跟一个空格、逗号、斜杠或结束字符串
<li>数字小于 70，并且已经识别月份和月中的某一天</li>
 </ul>
如果被识别的年数小于 100，它就被解释为相对于其日期所在世纪的缩写年，缩写年的日期位于初始化 Date 类的时间的 80 年以前和 19 年以后之间。在调整年数后，从其减去 1900。例如，如果当前的年份是 1999，那么范围 19 至 99 的年数就被假定表示 1919 至 1999，而 0 至 18 的年数就被假定表示 2000 至 2018。注意，这与 {@link java.text.SimpleDateFormat} 中使用的小于 100 的年份具有稍微不同的解释。
<li>如果数字后跟一个冒号，则认为是小时，如果小时已经被识别，则认为是分钟。
<li>如果数字后跟一个斜杠，则认为是月份（把它减 1，以便产生范围 <tt>0</tt> 至 <tt>11</tt> 的数字），如果月份已经被识别，则认为它是月中的某一天。
<li>如果数字后跟空白、逗号、连字符或结束字符串，那么如果小时已识别但分钟未识别，则认为是分钟；否则，如果分钟已识别，而秒没有识别，则认为是秒；否则，它被认为是月中的某一天。 </ul><p>
连续的字母序列被认为是单词，并按以下方法进行处理：<ul>
<li>忽略匹配 <tt>AM</tt>（忽略大小写）的单词（但如果小时尚未识别，或者小时小于 <tt>1</tt> 或大于 <tt>12</tt>，则解析失败）。
<li>匹配 <tt>PM</tt>（忽略大小写）的单词，添加 <tt>12</tt> 到小时（但如果小时尚未识别，或者小时小于 <tt>1</tt> 或大于 <tt>12</tt>，则解析失败）。
<li>忽略匹配 <tt>SUNDAY、MONDAY、TUESDAY、WEDNESDAY、THURSDAY、FRIDAY</tt> 或 <tt>SATURDAY</tt> 的任何前缀（忽略大小写）的任何单词。例如，<tt>sat、Friday、TUE</tt> 和 <tt>Thurs</tt> 会被忽略。
<li>否则，匹配 <tt>JANUARY、FEBRUARY、MARCH、APRIL、MAY、JUNE、JULY、AUGUST、SEPTEMBER、OCTOBER、NOVEMBER</tt> 或 <tt>DECEMBER</tt> 的任何前缀（忽略大小写，并按这里给出的顺序考虑它们）的任何单词都被识别为指定月份，并被转换成一个数字（<tt>0</tt> 至 <tt>11</tt>）。例如，<tt>aug、Sept、april</tt> 和 <tt>NOV</tt> 被识别为月份。<tt>Ma</tt> 也是这样，它被识别为 <tt>MARCH</tt>，而不是 <tt>MAY</tt>。
<li>匹配 <tt>GMT、UT</tt> 或 <tt>UTC</tt>（忽略大小写）的任何单词都认为是指 UTC。 
<li>匹配 <tt>EST、CST、MST</tt> 或 <tt>PST</tt>（忽略大小写）的任何单词都被认为是指北美的时区，该时区分别比格林威治时间晚 5、6、7 或 8 小时。匹配 <tt>EDT、CDT、MDT</tt> 或 <tt>PDT</tt>（忽略大小写）的任何单词都被识别为在夏令时期间分别指相同的时区。</ul><p>
一旦扫描了整个字符串，就以两种方式之一把它转换成时间结果。如果已经识别时区或时区偏移量，那么年、月、月中某一天、小时、分钟和秒以 UTC 进行解释，然后应用时区偏移量。否则，年、月、月中某一天、小时、分钟和秒用本地时区进行解释。

@param s 要解析为日期的字符串。
@return 自 1970 年 1 月 1 日 00:00:00 GMT 以来字符串参数表示的毫秒数。
@see    java.text.DateFormat
@deprecated 从 JDK 1.1 开始，由 <code>DateFormat.parse(String s)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.Date.getYear()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个值，此值是从包含或开始于此 <code>Date</code> 对象表示的瞬间的年份减去 1900 的结果（用本地时区进行解释）。

@return  日期表示的年份减去 1900。
@see     java.util.Calendar
@deprecated 从 JDK 1.1 开始，由 <code>Calendar.get(Calendar.YEAR) - 1900</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.Date.setYear(int year)
<!-- END KEY -->
<!-- BEGIN DATA -->
把此 <tt>Date</tt> 对象的年份设置为指定的值加 1900。修改此 <code>Date</code> 对象，以便它用与以前相同的月份、日期、小时、分钟和秒表示指定年份中的时间点（用本地时区进行解释）。（当然，例如，如果日期是 2 月 29 日，并且年份被设置到非闰年，那么新日期将被看作 3 月 1 日。）

@param   year    年份值。
@see     java.util.Calendar
@deprecated 从 JDK 1.1 开始，由 <code>Calendar.set(Calendar.YEAR, year + 1900)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.Date.getMonth()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示月份的数字，该月份包含或开始于此 <tt>Date</tt> 对象所表示的瞬间。返回的值在 <code>0</code> 和 <code>11</code> 之间，值 <code>0</code> 表示 1 月。

@return  此日期所表示的月份。
@see     java.util.Calendar
@deprecated 从 JDK 1.1 开始，由 <code>Calendar.get(Calendar.MONTH)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.Date.setMonth(int month)
<!-- END KEY -->
<!-- BEGIN DATA -->
把此日期的月份设置为指定值。修改此 <tt>Date</tt> 对象，以便它用与以前一样的年份、日期、小时、分钟和秒表示指定月份中的时间点（用本地时区进行解释）。例如，如果日期是 10 月 31 日，并将月份设置为 6 月，那么新日期将被看作 7 月 1 日，因为 6 月只有 30 天。

@param   month   0-11 之间的月份值。
@see     java.util.Calendar
@deprecated 从 JDK 1.1 开始，由 <code>Calendar.set(Calendar.MONTH, int month)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.Date.getDate()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <tt>Date</tt> 对象表示的月份中的某一天。返回的值在 <code>1</code> 和 <code>31</code> 之间，表示包含或开始于此 <tt>Date</tt> 对象表示的时间的月份中的某一天（用本地时区进行解释）。

@return  此日期所表示的月份中的某一天。
@see     java.util.Calendar
@deprecated 从 JDK 1.1 开始，由 <code>Calendar.get(Calendar.DAY_OF_MONTH)</code> 取代。
@deprecated

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.Date.setDate(int date)
<!-- END KEY -->
<!-- BEGIN DATA -->
把此 <tt>Date</tt> 对象的月份中的某一天设置为指定值。修改此 <tt>Date</tt> 对象，以便它用与以前一样的年份、月份、小时、分钟和秒表示月份中指定某一天中的时间点（用本地时区进行解释）。例如，如果日期是 4 月 30 日，并且日期被设置为 31，那么它将被看作 5 月 1 日，因为 4 月只有 30 天。

@param   date   月份中 1-31 之间的某一天。
@see     java.util.Calendar
@deprecated 从 JDK 1.1 开始，由 <code>Calendar.set(Calendar.DAY_OF_MONTH, int date)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.Date.getDay()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此日期表示的周中的某一天。返回值 (<tt>0</tt> = Sunday, <tt>1</tt> = Monday, <tt>2</tt> = Tuesday, <tt>3</tt> = Wednesday, <tt>4</tt> = Thursday, <tt>5</tt> = Friday, <tt>6</tt> = Saturday) 表示一周中的某一天，该周包含或开始于此 <tt>Date</tt> 对象所表示的瞬间（用本地时区进行解释）。

@return  此日期所表示的一周中的某一天。
@see     java.util.Calendar
@deprecated 从 JDK 1.1 开始，由 <code>Calendar.get(Calendar.DAY_OF_WEEK)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.Date.getHours()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <tt>Date</tt> 对象表示的小时。返回值是一个数字（<tt>0</tt> 至 <tt>23</tt>），表示包含或开始于此 <tt>Date</tt> 对象表示的瞬间的一天中的小时（用本地时区进行解释）。

@return  此日期所表示的小时。
@see     java.util.Calendar
@deprecated 从 JDK 1.1 开始，由 <code>Calendar.get(Calendar.HOUR_OF_DAY)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.Date.setHours(int hours)
<!-- END KEY -->
<!-- BEGIN DATA -->
把此 <tt>Date</tt> 对象的小时设置为指定值。修改此 <tt>Date</tt> 对象，以便它用与以前一样的年份、月份、日期、分钟和秒表示某一天指定小时中的时间点（用本地时区进行解释）。

@param   hours   小时值。
@see     java.util.Calendar
@deprecated 从 JDK 1.1 开始，由 <code>Calendar.set(Calendar.HOUR_OF_DAY, int hours)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.Date.getMinutes()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此日期所表示的小时已经过去的分钟数（用本地时区进行解释）。返回值在 <code>0</code> 和 <code>59</code> 之间。

@return  此日期所表示的小时已经过去的分钟数。
@see     java.util.Calendar
@deprecated 从 JDK 1.1 开始，由 <code>Calendar.get(Calendar.MINUTE)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.Date.setMinutes(int minutes)
<!-- END KEY -->
<!-- BEGIN DATA -->
把此 <tt>Date</tt> 对象的分钟数设置为指定值。修改此 <tt>Date</tt> 对象，以便它用与以前一样的年份、月份、日期、小时和秒表示小时的指定分钟中的时间点（用本地时区进行解释）。

@param   minutes   分钟值。
@see     java.util.Calendar
@deprecated 从 JDK 1.1 开始，由 <code>Calendar.set(Calendar.MINUTE, int minutes)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.Date.getSeconds()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此日期所表示的分钟已经过去的秒数。返回的值在 <code>0</code> 和 <code>61</code> 之间。值 <code>60</code> 和 <code>61</code> 只可能发生在考虑了闰秒的 Java 虚拟机上。

@return  此日期表示的分钟已经过去的秒数。
@see     java.util.Calendar
@deprecated 从 JDK 1.1 开始，由 <code>Calendar.get(Calendar.SECOND)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.Date.setSeconds(int seconds)
<!-- END KEY -->
<!-- BEGIN DATA -->
把此 <tt>Date</tt> 的秒数设置为指定值。修改此 <tt>Date</tt> 对象，以便它用与以前一样的年份、月份、日期、小时和分钟表示分钟的指定秒数中的时间点（用本地时区进行解释）。

@param   seconds   秒数值。
@see     java.util.Calendar
@deprecated 从 JDK 1.1 开始，由 <code>Calendar.set(Calendar.SECOND, int seconds)</code> 取代。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.Date.getTime()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 <tt>Date</tt> 对象表示的毫秒数。

@return  自 1970 年 1 月 1 日 00:00:00 GMT 以来此日期表示的毫秒数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.Date.setTime(long time)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 <code>Date</code> 对象，以表示 1970 年 1 月 1 日 00:00:00 GMT 以后 <code>time</code> 毫秒的时间点。 

@param   time 毫秒数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.Date.before(Date when)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试此日期是否在指定日期之前。

@param   when   日期。
@return  当且仅当此 <tt>Date</tt> 对象表示的瞬间比 <tt>when</tt> 表示的瞬间早，才返回 <code>true</code>；否则返回 <code>false</code>。
@exception NullPointerException 如果 <code>when</code> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.Date.after(Date when)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试此日期是否在指定日期之后。

@param   when   日期。
@return  当且仅当此 <tt>Date</tt> 对象表示的瞬间比 <tt>when</tt> 表示的瞬间晚，才返回 <code>true</code>；否则返回 <code>false</code>。
@exception NullPointerException 如果 <code>when</code> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.Date.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较两个日期的相等性。当且仅当参数不为 <code>null</code>，并且是一个表示与此对象相同的时间点（到毫秒）的 <code>Date</code> 对象时，结果才为 <code>true</code>。
 <p>
因此，当且仅当 <code>getTime</code> 方法对于两个 <code>Date</code> 对象返回相同的 <code>long</code> 值时，这两个对象才是相等的。 

@param   obj   要与之比较的对象。
@return  如果对象相同，则返回 <code>true</code>；否则，返回 <code>false</code>。
@see     java.util.Date#getTime()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.Date.compareTo(Date anotherDate)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较两个日期的顺序。

@param   anotherDate   要比较的 <code>Date</code>。
@return  如果参数 Date 等于此 Date，则返回值 <code>0</code>；如果此 Date 在 Date 参数之前，则返回小于 <code>0</code> 的值；如果此 Date 在 Date 参数之后，则返回大于 <code>0</code> 的值。
@since   1.2
@exception NullPointerException 如果 <code>anotherDate</code> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.Date.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象的哈希码值。结果是 {@link Date#getTime} 方法返回的基本 <tt>long</tt> 值的两部分的异或。也就是说，哈希码就是以下表达式的值：
 <blockquote><pre>
(int)(this.getTime()^(this.getTime() >>> 32))</pre></blockquote>

@return 此对象的哈希码值。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.Date.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
把此 <code>Date</code> 对象转换为以下形式的 <code>String</code>：
 <blockquote><pre>
 dow mon dd hh:mm:ss zzz yyyy</pre></blockquote>
其中：<ul>
<li><tt>dow</tt> 是一周中的某一天 (<tt>Sun, Mon, Tue, Wed, Thu, Fri, Sat</tt>)。
<li><tt>mon</tt> 是月份 (<tt>Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec</tt>)。
<li><tt>dd</tt> 是一月中的某一天（<tt>01</tt> 至 <tt>31</tt>），显示为两位十进制数。
<li><tt>hh</tt> 是一天中的小时（<tt>00</tt> 至 <tt>23</tt>），显示为两位十进制数。
<li><tt>mm</tt> 是小时中的分钟（<tt>00</tt> 至 <tt>59</tt>），显示为两位十进制数。
<li><tt>ss</tt> 是分钟中的秒数（<tt>00</tt> 至 <tt>61</tt>），显示为两位十进制数。
<li><tt>zzz</tt> 是时区（并可以反映夏令时）。标准时区缩写包括方法 <tt>parse</tt> 识别的时区缩写。如果不提供时区信息，则 <tt>zzz</tt> 为空，即根本不包括任何字符。
<li><tt>yyyy</tt> 是年份，显示为 4 位十进制数。
 </ul>

@return  此日期的字符串表示形式。
@see     java.util.Date#toLocaleString()
@see     java.util.Date#toGMTString()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.Date.toLocaleString()
<!-- END KEY -->
<!-- BEGIN DATA -->
以与实现相关的方式创建此 <tt>Date</tt> 对象的字符串表示形式。其目的是这种形式应该为所有 Java 应用程序的用户所熟悉，而不管它运行在何处。它类似于 ISO C 的 <code>strftime()</code> 函数支持的 &quot;<code>%c</code>&quot; 格式。

@return  此日期的字符串表示形式（使用语言环境约定）。
@see     java.text.DateFormat
@see     java.util.Date#toString()
@see     java.util.Date#toGMTString()
@deprecated 从 JDK 1.1 开始，由 <code>DateFormat.format(Date date)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.Date.toGMTString()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建此 <tt>Date</tt> 对象的字符串表示形式，如下：
 <blockquote<pre>
 d mon yyyy hh:mm:ss GMT</pre></blockquote>
其中：<ul>
<li><i>d</i> 是一月中的某一天（<tt>1</tt> 至 <tt>31</tt>），显示为一位或两位十进制数。
<li><i>mon</i> 是月份 (<tt>Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec</tt>)。
<li><i>yyyy</i> 是年份，显示为 4 位十进制数。
<li><i>hh</i> 是一天中的小时（<tt>00</tt> 至 <tt>23</tt>），显示为两位进制数。
<li><i>mm</i> 是小时中的分钟（<tt>00</tt> 至 <tt>59</tt>），显示为两位十进制数。
<li><i>ss</i> 分钟中的秒数（<tt>00</tt> 至 <tt>61</tt>），显示为两位十进制数。
<li><i>GMT</i> 就是 ASCII 字母 &quot;<tt>GMT</tt>&quot;，代表格林威治标准时 (Greenwich Mean Time)。
 </ul><p>
结果不依赖于本地时区。
 
@return  此日期的字符串表示形式（使用 Internet GMT 约定）。
@see     java.text.DateFormat
@see     java.util.Date#toString()
@see     java.util.Date#toLocaleString()
@deprecated 从 JDK 1.1 开始，由 <code>DateFormat.format(Date date)</code> 取代，使用 GMT <code>TimeZone</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.Date.getTimezoneOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回相对于 UTC（相应于此 <code>Date</code> 对象表示的时间）的本地时区的偏移量（以分钟为单位）。 
 <p>
例如，在马萨诸塞州，比格林威治时间晚 5 个时区：
 <blockquote><pre>
new Date(96, 1, 14).getTimezoneOffset() 返回 300</pre></blockquote>
因为在 1996 年 2 月 14 日，使用标准时间（东部标准时间），此时间和 UTC 有 5 小时的偏移量；但是：
 <blockquote><pre>
new Date(96, 5, 1).getTimezoneOffset() 返回 240</pre></blockquote>
因为在 1996 年  6 月 1 日，使用夏令时（东部日光时间），此时间和 UTC 只有 4 小时的偏移量。<p>
此方法产生与以下计算方式相同的结果：
 <blockquote><pre>
 (this.getTime() - UTC(this.getYear(), 
                       this.getMonth(), 
                       this.getDate(),
                       this.getHours(), 
                       this.getMinutes(), 
                       this.getSeconds())) / (60 * 1000)
 </pre></blockquote>

@return  当前时区的时区偏移量（以分钟为单位）。
@see     java.util.Calendar#ZONE_OFFSET
@see     java.util.Calendar#DST_OFFSET
@see     java.util.TimeZone#getDefault
@deprecated 从 JDK 1.1 开始，由 <code>-(Calendar.get(Calendar.ZONE_OFFSET) + Calendar.get(Calendar.DST_OFFSET)) / (60 * 1000)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.Date.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流重构此对象（也就是将其反序列化）。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.Date.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此对象的状态保存到流中（也就是将其序列化）。

@serialData 发出由 <code>getTime()</code> 返回的值 (long)。它表示自 1970 年 1 月 1 日 00:00:00 GMT 的偏移量（以毫秒为单位）。

<!-- END DATA -->


