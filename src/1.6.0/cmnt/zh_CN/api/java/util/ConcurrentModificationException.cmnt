<!-- BEGIN KEY -->
public class java.util.ConcurrentModificationException extends java.lang.RuntimeException
<!-- END KEY -->
<!-- BEGIN DATA -->
当方法检测到对象的并发修改，但不允许这种修改时，抛出此异常。
 <p>
例如，某个线程在 Collection 上进行迭代时，通常不允许另一个线性修改该 Collection。通常在这些情况下，迭代的结果是不确定的。如果检测到这种行为，一些迭代器实现（包括 JRE 提供的所有通用 collection 实现）可能选择抛出此异常。执行该操作的迭代器称为<i>快速失败</i> 迭代器，因为迭代器很快就完全失败，而不会冒着在将来某个时间任意发生不确定行为的风险。
 <p>
注意，此异常不会始终指出对象已经由<i>不同</i> 线程并发修改。如果单线程发出违反对象协定的方法调用序列，则该对象可能抛出此异常。例如，如果线程使用快速失败迭代器在 collection 上迭代时直接修改该 collection，则迭代器将抛出此异常。

<p>注意，迭代器的快速失败行为无法得到保证，因为一般来说，不可能对是否出现不同步并发修改做出任何硬性保证。快速失败操作会尽最大努力抛出 <tt>ConcurrentModificationException</tt>。因此，为提高此类操作的正确性而编写一个依赖于此异常的程序是错误的做法，正确做法是：<i><tt>ConcurrentModificationException</tt> 应该仅用于检测 bug。</i>

@author  Josh Bloch
@version 1.18, 06/22/04
@see	  Collection
@see     Iterator
@see     ListIterator
@see	  Vector
@see	  LinkedList
@see	  HashSet
@see	  Hashtable
@see	  TreeMap
@see	  AbstractList
@since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.ConcurrentModificationException()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造不带详细消息的 ConcurrentModificationException。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.ConcurrentModificationException(String message)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带指定详细消息的 <tt>ConcurrentModificationException</tt>。

@param message 和该异常有关的详细消息。

<!-- END DATA -->
