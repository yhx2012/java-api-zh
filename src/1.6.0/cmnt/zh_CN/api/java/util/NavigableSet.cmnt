<!-- BEGIN KEY -->
public interface java.util.NavigableSet extends java.util.SortedSet
<!-- END KEY -->
<!-- BEGIN DATA -->
扩展的 {@link SortedSet}，具有了为给定搜索目标报告最接近匹配项的导航方法。方法 {@code lower}、{@code floor}、{@code ceiling} 和 {@code higher} 分别返回小于、小于等于、大于等于、大于给定元素的元素，如果不存在这样的元素，则返回 {@code null}。可以按升序或降序访问和遍历 {@code NavigableSet}。{@code descendingSet} 方法返回 set 的一个视图，该视图表示的所有关系方法和方向方法都是逆向的。升序操作和视图的性能很可能比降序操作和视图的性能要好。此外，此接口还定义了 {@code pollFirst} 和 {@code pollLast} 方法，它们返回并移除最小和最大的元素（如果存在），否则返回 {@code null}。{@code subSet}、{@code headSet} 和 {@code tailSet} 方法与名称相似的 {@code SortedSet} 方法的不同之处在于：可以接受用于描述是否包括（或不包括）下边界和上边界的附加参数。任何 {@code NavigableSet} 的 Submap 必须实现 {@code NavigableSet} 接口。

<p>导航方法的返回值在允许 {@code null} 元素的实现中可能是不确定的。不过，即使在这种情况下，也可以通过检查 {@code contains(null)} 来明确结果。为了避免这样的问题，建议在此接口的实现中<em>不</em> 允许插入 {@code null} 元素。（注意，{@link Comparable} 元素的有序集本身不允许 {@code null}。）

<p>{@link #subSet(Object, Object) subSet(E, E)}、{@link #headSet(Object) headSet(E)} 和 {@link #tailSet(Object) tailSet(E)} 方法被指定为返回 {@code SortedSet}，以允许现有 {@code SortedSet} 实现能相容地改进为实现 {@code NavigableMap}，但鼓励此接口的扩展和实现重写这些方法以返回 {@code NavigableSet}。

<p>此接口是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

@author Doug Lea
@author Josh Bloch
@param <E> 此 set 维护的元素类型
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.NavigableSet.lower(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 set 中严格小于给定元素的最大元素；如果不存在这样的元素，则返回 {@code null}。

@param e 要匹配的值
@return 小于 {@code e} 的最大元素；如果不存在这样的元素，则返回 {@code null}
@throws ClassCastException 如果指定元素不能与 set 中的当前元素进行比较
@throws NullPointerException 如果指定元素为 null 并且此 set 不允许 null 元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.NavigableSet.floor(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 set 中小于等于给定元素的最大元素；如果不存在这样的元素，则返回 {@code null}。

@param e 要匹配的值
@return 小于等于 {@code e} 的最大元素；如果不存在这样的元素，则返回 {@code null}
@throws ClassCastException 如果指定元素不能与 set 中的当前元素进行比较
@throws NullPointerException 如果指定元素为 null 并且此 set 不允许 null 元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.NavigableSet.ceiling(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 set 中大于等于给定元素的最小元素；如果不存在这样的元素，则返回 {@code null}。

@param e 要匹配的值
@return 大于等于 {@code e} 的最小元素；如果不存在这样的元素，则返回 {@code null}
@throws ClassCastException 如果指定元素不能与 set 中的当前元素进行比较
@throws NullPointerException 如果指定元素为 null 并且此 set 不允许 null 元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.NavigableSet.higher(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 set 中严格大于给定元素的最小元素；如果不存在这样的元素，则返回 {@code null}。

@param e 要匹配的值
@return 大于 {@code e} 的最小元素；如果不存在这样的元素，则返回 {@code null}
@throws ClassCastException 如果指定元素不能与 set 中的当前元素进行比较
@throws NullPointerException 如果指定元素为 null 并且此 set 不允许 null 元素

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.NavigableSet.pollFirst()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取并移除第一个（最低）元素；如果此 set 为空，则返回 {@code null}。

@return 第一个元素；如果此 set 为空，则返回 {@code null}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.NavigableSet.pollLast()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取并移除最后一个（最高）元素；如果此 set 为空，则返回 {@code null}。

@return 最后一个元素；如果此 set 为空，则返回 {@code null}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.NavigableSet.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
以升序返回在此 set 的元素上进行迭代的迭代器。

@return 以升序返回在此 set 的元素上进行迭代的迭代器

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<E> java.util.NavigableSet.descendingSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 set 中所包含元素的逆序视图。降序 set 受此 set 的支持，因此对此 set 的更改将反映在降序 set 中，反之亦然。如果在对任一 set 进行迭代的同时修改了任一 set（通过迭代器自己的 {@code remove} 操作除外），则迭代结果是不确定的。

<p>返回 set 的顺序等于 <tt>{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())</tt>。表达式 {@code s.descendingSet().descendingSet()} 返回的 {@code s} 视图基本等于 {@code s}。

@return 此 set 的逆序视图

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.NavigableSet.descendingIterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
以降序返回在此 set 的元素上进行迭代的迭代器。效果等同于 {@code descendingSet().iterator()}。

@return 在此 set 的元素上以降序进行迭代的迭代器

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<E> java.util.NavigableSet.subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 set 的部分视图，其元素范围从 {@code fromElement} 到 {@code toElement}。如果 {@code fromElement} 和 {@code toElement} 相等，则返回的 set 为空，除非 {@code fromExclusive} 和 {@code toExclusive} 都为 true。返回的 set 受此 set 支持，所以在返回 set 中的更改将反映在此 set 中，反之亦然。返回 set 支持此 set 支持的所有可选 set 操作。

<p>如果试图在返回 set 的范围之外插入元素，则返回的 set 将抛出 {@code IllegalArgumentException}。

@param fromElement 返回 set 的低端点
@param fromInclusive 如果低端点要包含在返回的视图中，则为 {@code true}
@param toElement 返回 set 的高端点
@param toInclusive 如果高端点要包含在返回的视图中，则为 {@code true}
@return 此 set 的部分视图，其元素范围从 {@code fromElement}（包括）到 {@code toElement}（不包括）
@throws ClassCastException 如果不能使用此 set 的比较器或者使用自然顺序（如果 set 没有比较器）比较 {@code fromElement} 和 {@code toElement}。如果 {@code fromElement} 或 {@code toElement} 不能与 set 中的当前元素进行比较，则实现可以（但不是必须）抛出此异常。
@throws NullPointerException 如果 {@code fromElement} 或 {@code toElement} 为 null 并且此 set 不允许 null 元素
@throws IllegalArgumentException 如果 {@code fromElement} 大于 {@code toElement}；如果此 set 本身有范围限制，并且 {@code fromElement} 或 {@code toElement} 位于范围的边界之外。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<E> java.util.NavigableSet.headSet(E toElement, boolean inclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 set 的部分视图，其元素小于（或等于，如果 {@code inclusive} 为 true）{@code toElement}。返回的 set 受此 set 支持，所以在返回 set 中的更改将反映在此 set 中，反之亦然。返回 set 支持此 set 支持的所有可选 set 操作。

<p>如果试图在返回 set 的范围之外插入元素，则返回的 set 将抛出 {@code IllegalArgumentException}。

@param toElement 返回 set 的高端点
@param inclusive 如果高端点要包含在返回的视图中，则为 {@code true} 
@return 此 set 的部分视图，其元素小于（或等于，如果 {@code inclusive} 为 true）{@code toElement}
@throws ClassCastException 如果 {@code toElement} 与此 set 的比较器不兼容（如果 set 没有比较器；如果 {@code toElement} 没有实现 {@link Comparable}）。如果 {@code toElement} 不能与 set 中的当前元素进行比较，则实现可以（但不是必须）抛出此异常。
@throws NullPointerException 如果 {@code toElement} 为 null 并且此 set 不允许 null 元素
@throws IllegalArgumentException 如果此 set 本身有范围限制，并且 {@code toElement} 位于范围的边界之外

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<E> java.util.NavigableSet.tailSet(E fromElement, boolean inclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 set 的部分视图，其元素大于（或等于，如果 {@code inclusive} 为 true）{@code fromElement}。返回的 set 受此 set 支持，所以在返回 set 中的更改将反映在此 set 中，反之亦然。返回 set 支持此 set 支持的所有可选 set 操作。

<p>如果试图在返回 set 的范围之外插入元素，则返回的 set 将抛出 {@code IllegalArgumentException}。

@param fromElement 返回 set 的低端点
@param inclusive 如果低端点要包含在返回的视图中，则为 {@code true}
@return 此 set 的部分视图，其元素大于等于 {@code fromElement}
@throws ClassCastException 如果 {@code fromElement} 与此 set 的比较器不兼容（如果 set 没有任何比较器；如果 {@code fromElement} 没有实现 {@link Comparable}）。如果 {@code fromElement} 不能与 set 中的当前元素进行比较，则实现可以（但不是必须）抛出此异常。
@throws NullPointerException 如果 {@code fromElement} 为 null 并且此 set 不允许 null 元素
@throws IllegalArgumentException 如果此 set 本身有范围限制，并且 {@code fromElement} 位于范围的边界之外

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.SortedSet<E> java.util.NavigableSet.subSet(E fromElement, E toElement)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}

<p>等效于 {@code subSet(fromElement, true, toElement, false)}。

@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.SortedSet<E> java.util.NavigableSet.headSet(E toElement)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}

<p>等效于 {@code headSet(toElement, false)}。

@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.SortedSet<E> java.util.NavigableSet.tailSet(E fromElement)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}

<p>等效于 {@code tailSet(fromElement, true)}。

@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
