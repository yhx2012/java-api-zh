<!-- BEGIN KEY -->
public class java.util.TreeMap extends java.util.AbstractMap implements java.util.NavigableMap, java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 基于红黑树（Red-Black tree）的 {@link NavigableMap} 实现。该映射根据其键的{@linkplain Comparable 自然顺序}进行排序，或者根据创建映射时提供的 {@link Comparator} 进行排序，具体取决于使用的构造方法。

 <p>此实现为 <tt>containsKey</tt>、<tt>get</tt>、<tt>put</tt> 和 <tt>remove</tt> 操作提供受保证的 log(n) 时间开销。这些算法是 Cormen、Leiserson 和 Rivest 的 <I>Introduction to Algorithms</I> 中的算法的改编。

 <p>注意，如果要正确实现 <tt>Map</tt> 接口，则有序映射所保持的顺序（无论是否明确提供了比较器）都必须<i>与 equals 一致</i>。（关于<i>与 equals 一致</i> 的精确定义，请参阅 <tt>Comparable</tt> 或 <tt>Comparator</tt>）。这是因为 <tt>Map</tt> 接口是按照 equals 操作定义的，但有序映射使用它的 <tt>compareTo</tt>（或 <tt>compare</tt>）方法对所有键进行比较，因此从有序映射的观点来看，此方法认为相等的两个键就是相等的。即使排序与 equals 不一致，有序映射的行为仍然<i>是</i> 定义良好的，只不过没有遵守 <tt>Map</tt> 接口的常规协定。

 <p><strong>注意，此实现不是同步的。</strong>如果多个线程同时访问一个映射，并且其中至少一个线程从结构上修改了该映射，则其<i>必须</i> 外部同步。（结构上的修改是指添加或删除一个或多个映射关系的操作；仅改变与现有键关联的值不是结构上的修改。）这一般是通过对自然封装该映射的对象执行同步操作来完成的。如果不存在这样的对象，则应该使用 {@link Collections#synchronizedSortedMap Collections.synchronizedSortedMap} 方法来“包装”该映射。最好在创建时完成这一操作，以防止对映射进行意外的不同步访问，如下所示：<pre>
   SortedMap m = Collections.synchronizedSortedMap(new TreeMap(...));</pre>

 <p>collection（由此类所有的“collection 视图方法”返回）的 <tt>iterator</tt> 方法返回的迭代器都是<i>快速失败</i> 的：在迭代器创建之后，如果从结构上对映射进行修改，除非通过迭代器自身的 <tt>remove</tt> 方法，否则在其他任何时间以任何方式进行修改都将导致迭代器抛出 {@link ConcurrentModificationException}。因此，对于并发的修改，迭代器很快就完全失败，而不会冒着在将来不确定的时间发生不确定行为的风险。

 <p>注意，迭代器的快速失败行为无法得到保证，一般来说，当存在不同步的并发修改时，不可能作出任何肯定的保证。快速失败迭代器尽最大努力抛出 <tt>ConcurrentModificationException</tt>。因此，编写依赖于此异常的程序的做法是错误的，正确做法是：迭代器的快速失败行为应该仅用于检测 bug。</i>

 <p>此类及其视图中的方法返回的所有 <tt>Map.Entry</tt> 对都表示生成它们时的映射关系的快照。它们<em>不</em> 支持 <tt>Entry.setValue</tt> 方法。（不过要注意的是，使用 <tt>put</tt> 更改相关映射中的映射关系是有可能的。）

 <p>此类是 <a href="{@docRoot}/../technotes/guides/collections/index.html">Java Collections Framework</a> 的成员。

 @param <K> 此映射维护的键的类型
 @param <V> 映射值的类型

 @author  Josh Bloch and Doug Lea
 @version 1.73, 05/10/06
 @see Map
 @see HashMap
 @see Hashtable
 @see Comparable
 @see Comparator
 @see Collection
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.Comparator<? super K> java.util.TreeMap.comparator
<!-- END KEY -->
<!-- BEGIN DATA -->
 用来保持此树映射（tree map）中的顺序的比较器，如果此树映射使用它的键的自然顺序，则返回 null。

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.TreeMap()
<!-- END KEY -->
<!-- BEGIN DATA -->
 使用键的自然顺序构造一个新的、空的树映射。插入该映射的所有键都必须实现 {@link Comparable} 接口。另外，所有这些键都必须是<i>可互相比较的</i>：对于映射中的任意两个键 <tt>k1</tt> 和 <tt>k2</tt>，执行 <tt>k1.compareTo(k2)</tt> 都不得抛出 <tt>ClassCastException</tt>。如果用户试图将违反此约束的键添加到映射中（例如，用户试图将字符串键添加到键为整数的映射中），则 <tt>put(Object key, Object value)</tt> 调用将抛出 <tt>ClassCastException</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.TreeMap(java.util.Comparator<? super K> comparator)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个新的、空的树映射，该映射根据给定比较器进行排序。插入该映射的所有键都必须由给定比较器进行<i>相互比较</i>：对于映射中的任意两个键 <tt>k1</tt> 和 <tt>k2</tt>，执行 <tt>comparator.compare(k1, k2)</tt> 都不得抛出 <tt>ClassCastException</tt>。如果用户试图将违反此约束的键放入映射中，则 <tt>put(Object key, Object value)</tt> 调用将抛出 <tt>ClassCastException</tt>。

 @param comparator 将用来对此映射进行排序的比较器。如果该参数为 <tt>null</tt>，则将使用键的{@linkplain Comparable 自然顺序}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.TreeMap(java.util.Map<? extends K, ? extends V> m)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个与给定映射具有相同映射关系的新的树映射，该映射根据其键的<i>自然顺序</i> 进行排序。插入此新映射的所有键都必须实现 {@link Comparable} 接口。另外，所有这些键都必须是<i>可互相比较的</i>：对于映射中的任意两个键 <tt>k1</tt> 和 <tt>k2</tt>，执行 <tt>k1.compareTo(k2)</tt> 都不得抛出 <tt>ClassCastException</tt>。此方法的运行时间为 n*log(n)。

 @param  m 其映射关系将存放在此映射中的映射
 @throws ClassCastException 如果 m 中的键不是 {@link Comparable}，或者是不可相互比较的
 @throws NullPointerException 如果指定映射为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.TreeMap(java.util.SortedMap<K, ? extends V> m)
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个与指定有序映射具有相同映射关系和相同排序顺序的新的树映射。此方法是以线性时间运行的。

 @param  m 有序映射，其映射关系将存放在此映射中，并且其比较器将用来对此映射进行排序
 @throws NullPointerException 如果指定映射为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.TreeMap.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回此映射中的键-值映射关系数。

 @return 此映射中的键-值映射关系数

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.TreeMap.containsKey(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 如果此映射包含指定键的映射关系，则返回 <tt>true</tt>。

 @param key 测试是否存在于此映射中的键
 @return 如果此映射包含指定键的映射关系，则返回 <tt>true</tt>
 @throws ClassCastException 如果指定键不能与映射中的当前键进行比较
 @throws NullPointerException 如果指定键为 null 并且此映射使用自然顺序，或者其比较器不允许使用 null 键

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.TreeMap.containsValue(Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 如果此映射为指定值映射一个或多个键，则返回 <tt>true</tt>。更确切地讲，当且仅当此映射包含至少一个到值 <tt>v</tt> 的映射关系，并且该值满足 <tt>(value==null ? v==null :value.equals(v))</tt> 时，返回 <tt>true</tt>。对于大部分实现而言，此操作需要的时间可能与映射的大小呈线性关系。

 @param value 将测试其是否存在于此映射中的值
 @return 如果存在到 <tt>value</tt> 的映射关系，则返回 <tt>true</tt>；否则返回 <tt>false</tt>
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.TreeMap.get(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回指定键所映射的值，如果对于该键而言，此映射不包含任何映射关系，则返回 {@code null}。

 <p>更确切地讲，如果此映射包含从键 {@code k} 到值 {@code v} 的映射关系，根据该映射的排序 {@code key} 比较起来等于 {@code k}，那么此方法将返回 {@code v}；否则返回 {@code null}。（最多只能有一个这样的映射关系。）

 <p>返回 {@code null} 值并不<i>一定</i> 表明映射不包含该键的映射关系；也可能此映射将该键显式地映射为 {@code null}。可以使用 {@link #containsKey containsKey} 操作来区分这两种情况。

 @throws ClassCastException 如果指定键不能与在映射中的当前键进行比较
 @throws NullPointerException 如果指定键为 null 并且此映射使用自然顺序，或者其比较器不允许使用 null 键

<!-- END DATA -->
<!-- BEGIN KEY -->
public K java.util.TreeMap.firstKey()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public K java.util.TreeMap.lastKey()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.TreeMap.putAll(java.util.Map<? extends K, ? extends V> map)
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定映射中的所有映射关系复制到此映射中。这些映射关系将替换此映射所有当前为指定映射的所有键所包含的映射关系。

 @param  map 将存储在此映射中的映射关系
 @throws ClassCastException 如果指定映射中的键或值的类不允许将键或值存储在此映射中
 @throws NullPointerException 如果指定映射为 null，或者指定映射包含 null 键，但此映射不允许使用 null 键

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.TreeMap.put(K key, V value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 将指定值与此映射中的指定键进行关联。如果该映射以前包含此键的映射关系，那么将替换旧值。

 @param key 要与指定值关联的键
 @param value 要与指定键关联的值

 @return 与 <tt>key</tt> 关联的先前值；如果没有针对 <tt>key</tt> 的映射关系，则返回 <tt>null</tt>。（返回 <tt>null</tt> 还可能表示该映射以前将 <tt>null</tt> 与 <tt>key</tt> 关联。）
 @throws ClassCastException 如果指定键不能与映射中的当前键进行比较
 @throws NullPointerException 如果指定键为 null 并且此映射使用自然顺序，或者其比较器不允许使用 null 键

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.TreeMap.remove(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 如果此 TreeMap 中存在该键的映射关系，则将其删除。

 @param  key 将为其移除映射关系的键
 @return 返回与 <tt>key</tt> 关联的先前值，如果没有针对 <tt>key</tt> 的映射关系，则返回 <tt>null</tt>。（返回 <tt>null</tt> 还可能表示该映射以前将 <tt>null</tt> 与 <tt>key</tt> 关联。）
 @throws ClassCastException 如果指定键不能与映射中的当前键进行比较
 @throws NullPointerException 如果指定键为 null 并且此映射使用自然顺序，或者其比较器不允许使用 null 键

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.TreeMap.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 从此映射中移除所有映射关系。在此调用返回之后，映射将为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.util.TreeMap.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回此 <tt>TreeMap</tt> 实例的浅表副本。（键和值本身不被复制。）
 @return 此映射的浅表副本

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.TreeMap.firstEntry()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.TreeMap.lastEntry()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.TreeMap.pollFirstEntry()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.TreeMap.pollLastEntry()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.TreeMap.lowerEntry(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException 如果指定键为 null，并且此映射使用自然顺序，或者其比较器不允许使用 null 键
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public K java.util.TreeMap.lowerKey(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException 如果指定键为 null，并且此映射使用自然顺序，或者其比较器不允许使用 null 键
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.TreeMap.floorEntry(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException 如果指定键为 null，并且此映射使用自然顺序，或者其比较器不允许使用 null 键
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public K java.util.TreeMap.floorKey(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException 如果指定键为 null，并且此映射使用自然顺序，或者其比较器不允许使用 null 键
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.TreeMap.ceilingEntry(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException 如果指定键为 null，并且此映射使用自然顺序，或者其比较器不允许使用 null 键
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public K java.util.TreeMap.ceilingKey(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException 如果指定键为 null，并且此映射使用自然顺序，或者其比较器不允许使用 null 键
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.TreeMap.higherEntry(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException 如果指定键为 null，并且此映射使用自然顺序，或者其比较器不允许使用 null 键
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public K java.util.TreeMap.higherKey(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException 如果指定键为 null，并且此映射使用自然顺序，或者其比较器不允许使用 null 键
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<K> java.util.TreeMap.keySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回此映射包含的键的 {@link Set} 视图。set 的迭代器将按升序返回这些键。该 set 受映射支持，所以对映射的更改可在此 set 中反映出来，反之亦然。如果对该 set 进行迭代的同时修改了映射（通过迭代器自己的 <tt>remove</tt> 操作除外），则迭代结果是不确定的。此 set 支持元素移除，通过 <tt>Iterator.remove</tt>、<tt>Set.remove</tt>、<tt>removeAll</tt>、<tt>retainAll</tt> 和 <tt>clear</tt> 操作，可从映射中移除相应的映射关系。它不支持 <tt>add</tt> 或 <tt>addAll</tt> 操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<K> java.util.TreeMap.navigableKeySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<K> java.util.TreeMap.descendingKeySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Collection<V> java.util.TreeMap.values()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回此映射包含的值的 {@link Collection} 视图。该 collection 的迭代器将按相关键的升序返回这些值。该 collection 受映射支持，所以对映射的更改可在此 collection 中反映出来，反之亦然。如果对该 collection 进行迭代的同时修改了映射（通过迭代器自己的 <tt>remove</tt> 操作除外），则迭代结果是不确定的。该 collection 支持元素的移除，通过 <tt>Iterator.remove</tt>、<tt>Collection.remove</tt>、<tt>removeAll</tt>、<tt>retainAll</tt> 和 <tt>clear</tt> 操作，可从映射中移除相应的映射关系。它不支持 <tt>add</tt> 或 <tt>addAll</tt> 操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.util.Map.Entry<K, V>> java.util.TreeMap.entrySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回此映射中包含的映射关系的 {@link Set} 视图。该 set 的迭代器将按升序返回这些条目。该 set 受映射支持，所以对映射的更改可在此 set 中反映出来，反之亦然。如果对该 set 进行迭代的同时修改了映射（通过迭代器自己的 <tt>remove</tt> 操作，或者通过在迭代器返回的映射条目上执行 <tt>setValue</tt> 操作除外），则迭代结果是不确定的。此 set 支持元素移除，通过 <tt>Iterator.remove</tt>、<tt>Set.remove</tt>、<tt>removeAll</tt>、<tt>retainAll</tt> 和 <tt>clear</tt> 操作，可从映射中移除相应的映射关系。它不支持 <tt>add</tt> 或 <tt>addAll</tt> 操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableMap<K, V> java.util.TreeMap.descendingMap()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableMap<K, V> java.util.TreeMap.subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException       {@inheritDoc}
 @throws NullPointerException 如果 <tt>fromKey</tt> 或 <tt>toKey</tt> 为 null，并且此映射使用自然顺序，或者其比较器不允许使用 null 键
 @throws IllegalArgumentException {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableMap<K, V> java.util.TreeMap.headMap(K toKey, boolean inclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException       {@inheritDoc}
 @throws NullPointerException 如果 <tt>toKey</tt> 为 null，并且此映射使用自然顺序，或者其比较器不允许使用 null 键
 @throws IllegalArgumentException {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableMap<K, V> java.util.TreeMap.tailMap(K fromKey, boolean inclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException       {@inheritDoc}
 @throws NullPointerException 如果 <tt>fromKey</tt> 为 null，并且此映射使用自然顺序，或者其比较器不允许使用 null 键
 @throws IllegalArgumentException {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.SortedMap<K, V> java.util.TreeMap.subMap(K fromKey, K toKey)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException       {@inheritDoc}
 @throws NullPointerException 如果 <tt>fromKey</tt> 或 <tt>toKey</tt> 为 null，并且此映射使用自然顺序，或者其比较器不允许使用 null 键
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.SortedMap<K, V> java.util.TreeMap.headMap(K toKey)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException       {@inheritDoc}
 @throws NullPointerException 如果 <tt>toKey</tt> 为 null，并且此映射使用自然顺序，或者其比较器不允许使用 null 键
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.SortedMap<K, V> java.util.TreeMap.tailMap(K fromKey)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException       {@inheritDoc}
 @throws NullPointerException 如果 <tt>fromKey</tt> 为 null，并且此映射使用自然顺序，或者其比较器不允许使用 null 键
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.TreeMap.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 在某一流中重新构造 <tt>TreeMap</tt> 实例（也就是将其反序列化）。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.TreeMap.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 将 <tt>TreeMap</tt> 实例的状态保存到流中（也就是将其序列化）。

 @serialData 发出 TreeMap 的<i>大小</i>（健值映射关系数，用一个 int 值表示），后跟 TreeMap 表示的每个键-值映射关系的键（Object）和值（Object）。键-值映射关系是按照键的顺序发出的（由 TreeMap 的 Comparator 确定，如果 TreeMap 没有 Comparator，则该顺序由键的自然顺序确定）。

<!-- END DATA -->
