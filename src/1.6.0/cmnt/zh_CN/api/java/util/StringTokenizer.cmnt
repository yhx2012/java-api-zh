<!-- BEGIN KEY -->
public class java.util.StringTokenizer extends java.lang.Object implements java.util.Enumeration
<!-- END KEY -->
<!-- BEGIN DATA -->
string tokenizer 类允许应用程序将字符串分解为标记。tokenization 方法比 <code>StreamTokenizer</code> 类所使用的方法更简单。<code>StringTokenizer</code> 方法不区分标识符、数和带引号的字符串，它们也不识别并跳过注释。
 <p>
可以在创建时指定，也可以根据每个标记来指定分隔符（分隔标记的字符）集。
 <p>
<code>StringTokenizer</code> 的实例有两种行为方式，这取决于它在创建时使用的 <code>returnDelims</code> 标志的值是 <code>true</code> 还是 <code>false</code>：
 <ul>
<li>如果标志为 <code>false</code>，则分隔符字符用来分隔标记。标记是连续字符（不是分隔符）的最大序列。
<li>如果标志为 <code>true</code>，则认为那些分隔符字符本身即为标记。因此标记要么是一个分隔符字符，要么是那些连续字符（不是分隔符）的最大序列。
 </ul><p>
<tt>StringTokenizer</tt> 对象在内部维护字符串中要被标记的当前位置。某些操作将此当前位置移至已处理的字符后。<p>
通过截取字符串的一个子串来返回标记，该字符串用于创建 <tt>StringTokenizer</tt> 对象。
 <p>
下面是一个使用 tokenizer 的实例。代码如下：
 <blockquote><pre>
     StringTokenizer st = new StringTokenizer(&quot;this is a test&quot;);
     while (st.hasMoreTokens()) {
         System.out.println(st.nextToken());
     }
 </pre></blockquote>
 <p>
输出以下字符串：
 <blockquote><pre>
     this
     is
     a
     test
 </pre></blockquote>

 <p>
<tt>StringTokenizer</tt> 是出于兼容性的原因而被保留的遗留类（虽然在新代码中并不鼓励使用它）。建议所有寻求此功能的人使用 <tt>String</tt> 的 <tt>split</tt> 方法或 java.util.regex 包。
 <p>
下面的示例阐明了如何使用 <tt>String.split</tt> 方法将字符串分解为基本标记：
 <blockquote><pre>
     String[] result = &quot;this is a test&quot;.split(&quot;\\s&quot;);
     for (int x=0; x&lt;result.length; x++)
         System.out.println(result[x]);
 </pre></blockquote>
 <p>
输出以下字符串：
 <blockquote><pre>
     this
     is
     a
     test
 </pre></blockquote>

@author  unascribed
@version 1.34, 05/05/04
@see     java.io.StreamTokenizer
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.StringTokenizer(String str, String delim, boolean returnDelims)
<!-- END KEY -->
<!-- BEGIN DATA -->
为指定字符串构造一个 string tokenizer。<code>delim</code> 参数中的所有字符都是分隔标记的分隔符。
 <p>
如果 <code>returnDelims</code> 标志为 <code>true</code>，则分隔符字符也作为标记返回。每个分隔符都作为一个长度为 1 的字符串返回。如果标志为 <code>false</code>，则跳过分隔符，只是用作标记之间的分隔符。
 <p>
注意，如果 <tt>delim</tt> 为 <tt>null</tt>，则此构造方法不抛出异常。但是，尝试对得到的 <tt>StringTokenizer</tt> 调用其他方法则可能抛出 <tt>NullPointerException</tt>。

@param   str            要解析的字符串。
@param   delim          分隔符。
@param   returnDelims   指示是否将分隔符作为标记返回的标志。
@exception NullPointerException 如果 str 为 <CODE>null</CODE>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.StringTokenizer(String str, String delim)
<!-- END KEY -->
<!-- BEGIN DATA -->
为指定字符串构造一个 string tokenizer。<code>delim</code> 参数中的字符都是分隔标记的分隔符。分隔符字符本身不作为标记。
 <p>
注意，如果 <tt>delim</tt> 为 <tt>null</tt>，则此构造方法不抛出异常。但是，尝试对得到的 <tt>StringTokenizer</tt> 调用其他方法则可能抛出 <tt>NullPointerException</tt>。

@param str 要解析的字符串。
@param delim 分隔符。
@exception NullPointerException 如果 str 为 <CODE>null</CODE>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.StringTokenizer(String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
为指定字符串构造一个 string tokenizer。tokenizer 使用默认的分隔符集 <code>&quot;&nbsp;\t\n\r\f&quot;</code>，即：空白字符、制表符、换行符、回车符和换页符。分隔符字符本身不作为标记。

@param str 要解析的字符串。
@exception NullPointerException 如果 str 为 <CODE>null</CODE>。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.StringTokenizer.hasMoreTokens()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试此 tokenizer 的字符串中是否还有更多的可用标记。如果此方法返回 <tt>true</tt>，那么后续调用无参数的 <tt>nextToken</tt> 方法将成功地返回一个标记。

@return 当且仅当该字符串中当前位置后至少有一个标记时才为 <code>true</code>；否则为 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.StringTokenizer.nextToken()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 string tokenizer 的下一个标记。

@return     此 string tokenizer 的下一个标记。
@exception  NoSuchElementException  如果此 tokenizer 的字符串中没有更多标记。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.StringTokenizer.nextToken(String delim)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 string tokenizer 的字符串中的下一个标记。首先，字符集被更改为字符串 <tt>delim</tt> 中的字符，该字符集被认为是 <tt>StringTokenizer</tt> 对象的分隔符。接着返回字符串中当前位置之后的下一个标记。当前位置被提前到所识别的标记前。进行此调用后新的分隔符集仍然保持默认值。 

@param      delim   新的分隔符。
@return     转换到新的分隔符集后的下一个标记。
@exception  NoSuchElementException  如果此 tokenizer 的字符串中没有更多标记。
@exception NullPointerException 如果 delim 为 <CODE>null</CODE>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.StringTokenizer.hasMoreElements()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与 <code>hasMoreTokens</code> 方法相同的值。它的存在使得此类可以实现 <code>Enumeration</code> 接口。 

@return  如果有更多标记，则为 <code>true</code>；否则为 <code>false</code>。
@see     java.util.Enumeration
@see     java.util.StringTokenizer#hasMoreTokens()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.util.StringTokenizer.nextElement()
<!-- END KEY -->
<!-- BEGIN DATA -->
除了其声明返回值是 <code>Object</code> 而不是 <code>String</code> 之外，它返回与 <code>nextToken</code> 方法相同的值。它的存在使得此类可以实现 <code>Enumeration</code> 接口。 

@return     字符串中的下一个标记。
@exception  NoSuchElementException  如果此 tokenizer 的字符串中没有更多标记。
@see        java.util.Enumeration
@see        java.util.StringTokenizer#nextToken()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.StringTokenizer.countTokens()
<!-- END KEY -->
<!-- BEGIN DATA -->
计算在生成异常之前可以调用此 tokenizer 的 <code>nextToken</code> 方法的次数。当前位置没有提前。

@return  使用当前分隔符集的字符串中剩余的标记数。
@see     java.util.StringTokenizer#nextToken()

<!-- END DATA -->
