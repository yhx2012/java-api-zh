<!-- BEGIN KEY -->
public abstract class java.util.Dictionary extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Dictionary</code> 类是任何可将键映射到相应值的类（如 <code>Hashtable</code>）的抽象父类。每个键和每个值都是一个对象。在任何一个 <tt>Dictionary</tt> 对象中，每个键至多与一个值相关联。给定一个 <tt>Dictionary</tt> 和一个键，就可以查找所关联的元素。任何非 <code>null</code> 对象都可以用作键或值。
 <p>
通常，应该在此类的实现中使用 <code>equals</code> 方法，以决定两个键是否相同。 
 <p>
<strong>注：此类已过时。新的实现应该实现 Map 接口，而不是扩展此类。</strong>

@author  unascribed
@version 1.23, 01/12/04
@see	    java.util.Map
@see     java.lang.Object#equals(java.lang.Object)
@see     java.lang.Object#hashCode()
@see     java.util.Hashtable
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Dictionary()
<!-- END KEY -->
<!-- BEGIN DATA -->
单独的构造方法。（由子类构造方法调用，通常是隐式的。）

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.util.Dictionary.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 dictionary 中条目（不同键）的数量。

@return  此 dictionary 中的键数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.util.Dictionary.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试此 dictionary 是否不存在从键到值的映射。<tt>isEmpty</tt> 方法的常规协定是，当且仅当此 dictionary 不包含条目时，结果为 true。 

@return  如果此 dictionary 不存在从键到值的映射，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Enumeration<K> java.util.Dictionary.keys()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 dictionary 中的键的枚举。键方法的常规协定是返回 <tt>Enumeration</tt> 对象，该对象将生成此 dictionary 包含条目的所有键。 

@return  此 dictionary 中键的枚举。
@see     java.util.Dictionary#elements()
@see     java.util.Enumeration

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Enumeration<V> java.util.Dictionary.elements()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 dictionary 中值的枚举。<tt>elements</tt> 方法的常规协定是返回 <tt>Enumeration</tt> 对象，该对象将生成此 dictionary 中包含条目的所有元素。

@return  此 dictionary 中值的枚举。
@see     java.util.Dictionary#keys()
@see     java.util.Enumeration

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract V java.util.Dictionary.get(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 dictionary 中该键所映射到的值。<tt>isEmpty</tt> 方法的常规协定是，如果此 dictionary 包含所指定键的条目，则返回该键所关联的值；否则，返回 <tt>null</tt>。 

@return  此 dictionary 中该键所映射到的值；
@param   key   此 dictionary 中的一个键。如果该键没有映射到此 dictionary 中任何值，则返回 <code>null</code>。
@exception NullPointerException 如果该 <tt>key</tt> 为 <tt>null</tt>。 
@see     java.util.Dictionary#put(java.lang.Object, java.lang.Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract V java.util.Dictionary.put(K key, V value)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定 <code>key</code> 映射到此 dictionary 中指定 <code>value</code>。键和值均不能为 <code>null</code>。
 <p>
如果此 dictionary 已经包含指定 <tt>key</tt> 的条目，则在修改条目以包含新元素之后，返回该 <tt>key</tt> 在此 dictionary 中已有的值。<p>如果此 dictionary 还没有指定 <tt>key</tt> 的条目，则为指定 <tt>key</tt> 和 <tt>value</tt> 创建条目，并返回 <tt>null</tt>。
 <p>
可以通过调用 <code>get</code> 方法来获取 <code>value</code>，使用的 <code>key</code> 与原来的 <code>key</code> 相等。 

@param      key     哈希表键。
@param      value   值。
@return     以前该 <code>key</code> 在此 dictionary 中被映射到的值，如果该键没有以前的映射关系，则返回 <code>null</code>。
@exception  NullPointerException 如果 <code>key</code> 或 <code>value</code> 为 <code>null</code>。
@see        java.lang.Object#equals(java.lang.Object)
@see        java.util.Dictionary#get(java.lang.Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract V java.util.Dictionary.remove(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此 dictionary 中移除 <code>key</code> （及其相应的 <code>value</code>）。如果该 <code>key</code> 不在此 dictionary 中，则该方法不执行任何操作。 

@param   key   需要移除的键。
@return  该 <code>key</code> 在此 dictionary 中被映射到的值，如果该键没有以前的映射关系，则返回 <code>null</code>。
@exception  NullPointerException 如果 <tt>key</tt> 为 <tt>null</tt>。

<!-- END DATA -->
