<!-- BEGIN KEY -->
public class java.util.logging.Level extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
Level 类定义了一组可用来控制日志输出的标准日志级别。日志 Level 对象是有序的，并且是通过有序的整数来指定。在给定的级别上启用日志记录也就启用了所有较高级别的日志记录。
 <p>
客户机一般应该使用预定义的 Level 常量（如 Level.SEVERE）。
 <p>
各级别按降序排列如下：
 <ul>
<li>SEVERE（最高值）
 <li>WARNING
 <li>INFO
 <li>CONFIG
 <li>FINE
 <li>FINER
 <li>FINEST（最低值）
 </ul>
此外，还有一个级别 OFF，可用来关闭日志记录，使用级别 ALL 启用所有消息的日志记录。
 <p>
第三方可通过子类化 Level 来定义其他的日志级别。在这种情况下，子类应该注意选择唯一的整数级别值，并确保通过定义合适的 readResolve 方法，维护整个序列化过程的 Object 单值属性。

@version 1.19, 02/25/04
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.logging.Level java.util.logging.Level.OFF
<!-- END KEY -->
<!-- BEGIN DATA -->
OFF 是一个可用于关闭日志记录的特殊级别。此级别初始化为 <CODE>Integer.MAX_VALUE</CODE>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.logging.Level java.util.logging.Level.SEVERE
<!-- END KEY -->
<!-- BEGIN DATA -->
SEVERE 是指示严重失败的消息级别。
 <p>
通常，SEVERE 消息应该描述相当重要的事件，这些事件会阻止正常程序的执行。它们对于最终用户和系统管理员来说应该是很容易理解的。此级别初始化为 <CODE>1000</CODE>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.logging.Level java.util.logging.Level.WARNING
<!-- END KEY -->
<!-- BEGIN DATA -->
WARNING 是指示潜在问题的消息级别。
 <p>
通常，WARNING 消息应该描述最终用户或系统管理员感兴趣的事件，或者那些指示潜在问题的事件。此级别初始化为 <CODE>900</CODE>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.logging.Level java.util.logging.Level.INFO
<!-- END KEY -->
<!-- BEGIN DATA -->
INFO 是报告消息的消息级别。
 <p>
通常，INFO 消息被写入到控制台或与之相当的地方。因此，INFO 级别应该只用于相当重要的，对于最终用户和系统管理员有意义的消息。此级别初始化为 <CODE>800</CODE>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.logging.Level java.util.logging.Level.CONFIG
<!-- END KEY -->
<!-- BEGIN DATA -->
CONFIG 是用于静态配置消息的消息级别。
 <p>
CONFIG 消息提供各种静态配置信息，并协助调试那些与特定配置有关的问题。例如，CONFIG 消息可能包括 CPU 类型、图形色深、GUI 外观等等。此级别初始化为 <CODE>700</CODE>。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.logging.Level java.util.logging.Level.FINE
<!-- END KEY -->
<!-- BEGIN DATA -->
FINE 是提供跟踪信息的消息级别。
 <p>
FINE、FINER 和 FINEST 都适合用于相对详细的跟踪。三个级别的准确意义在不同子系统间有所不同，但是通常来说，FINEST 应该用于最为详细的输出，FINER 用于不太详细的输出，FINE 用于极少量（且非常重要）的消息。
 <p>
通常，FINE 级别应该用于开发人员比较感兴趣的信息，而这些开发人员对特定子系统则没有特别的兴趣。
 <p>
FINE 消息可能包括诸如次要的（可恢复的）失败之类的信息。指示潜在性能问题的信息也可以作为 FINE 记录到日志。此级别初始化为 <CODE>500</CODE>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.logging.Level java.util.logging.Level.FINER
<!-- END KEY -->
<!-- BEGIN DATA -->
FINER 指示一条相当详细的跟踪消息。在默认情况下，对于输入、返回或抛出异常的日志记录调用在此级别进行跟踪。此级别初始化为 <CODE>400</CODE>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.logging.Level java.util.logging.Level.FINEST
<!-- END KEY -->
<!-- BEGIN DATA -->
FINEST 指示一条最详细的跟踪消息。此级别初始化为 <CODE>300</CODE>。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.logging.Level java.util.logging.Level.ALL
<!-- END KEY -->
<!-- BEGIN DATA -->
ALL 指示应该记录所有消息。此级别初始化为 <CODE>Integer.MAX_VALUE</CODE>。

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.String java.util.logging.Level.name
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial  级别的非本地化名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
private final int java.util.logging.Level.value
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial  级别的整数值。

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.String java.util.logging.Level.resourceBundleName
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial 本地化级别名称时使用的资源包名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.logging.Level(String name, int value)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的整数值创建一个指定的 Level。
 <p>
注意，此构造方法是&ldquo;受保护&rdquo;的，允许子类化。通常，日志记录的客户机应该使用固定的 Level 对象之一，如 SEVERE 或 FINEST。但是，如果客户机需要添加新的日志级别，则它们可能子类化 Level，并定义新的常量。
@param name Level 的名称，如 &quot;SEVERE&quot;。
@param value 级别的整数值。
@throws NullPointerException 如果名称为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.logging.Level(String name, int value, String resourceBundleName)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的整数值和给定的本地化资源名称创建一个指定的 Level。
 <p>
@param name Level 的名称，如 &quot;SEVERE&quot;。
@param value 级别的整数值。
@param resourceBundleName 本地化给定的名称时使用的资源包名称。如果 resourceBundleName 为 null 或是一个空字符串，则将其忽略。
@throws NullPointerException 如果名称为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.logging.Level.getResourceBundleName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回级别的本地化资源包名称；如果没有定义本地化包，则返回 null。

@return 本地化资源包的名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.logging.Level.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Level 的非本地化字符串名称。

@return 非本地化名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.logging.Level.getLocalizedName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前默认语言环境的 Level 的本地化字符串名称。 
 <p>
如果没有可用的本地化信息，则返回非本地化名称。

@return 本地化名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.util.logging.Level.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
@return 返回 Level 的非本地化字符串名称，如 &quot;INFO&quot;。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.util.logging.Level.intValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得此级别的整数值。此整数值可以用于在 Level 对象间进行有效的排序比较。
@return 此级别的整数值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.util.logging.Level java.util.logging.Level.parse(String name) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
将级别名称字符串解析成 Level。
 <p>
参数字符串可能由级别名称或整数值组成。
 <p>
例如：
 <ul>
 <li>	&quot;SEVERE&quot;
 <li>	&quot;1000&quot;
 </ul>
@param name 要解析的字符串。
@throws NullPointerException 如果名称为 null。
@throws IllegalArgumentException 如果该值是无效的。有效值是 <CODE>Integer.MIN_VALUE</CODE> 和 <CODE>Integer.MAX_VALUE</CODE> 之间的整数值，以及所有已知的级别名称。已知的名称是由此类（也就是 <CODE>FINE</CODE>、<CODE>FINER</CODE>、<CODE>FINEST</CODE>）所定义的级别，或者由此类使用适当的包访问所创建的级别，或者是由子类定义或创建的新级别。

@return 解析的值。传递对应于已知名称的整数（如 700）将返回相关的名称（如 <CODE>CONFIG</CODE>）。传递不对应已知名称的整数（如 1）将返回一个初始化为该值的新级别名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.logging.Level.equals(Object ox)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较两个对象值的相等性。
@return 当且仅当两个对象的级别值相同时才返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.logging.Level.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
生成哈希码。
@return 级别值的哈希码。

<!-- END DATA -->


