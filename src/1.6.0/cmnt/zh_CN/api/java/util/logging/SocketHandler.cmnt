<!-- BEGIN KEY -->
public class java.util.logging.SocketHandler extends java.util.logging.StreamHandler
<!-- END KEY -->
<!-- BEGIN DATA -->
简单的网络日志 <tt>Handler</tt>。
 <p>
将 <tt>LogRecords</tt> 发布到网络流连接。默认情况下，<tt>XMLFormatter</tt> 类用于格式化。
 <p>
<b>配置：</b>默认情况下，每个 <tt>SocketHandler</tt> 是使用以下 <tt>LogManager</tt> 配置属性执行初始化的。如果未定义属性（或者属性具有无效值），则使用指定的默认值。
 <ul>
<li>   java.util.logging.SocketHandler.level 指定 <tt>Handler</tt> 的默认级别（默认值为 <tt>Level.ALL</tt>）。
<li>   java.util.logging.SocketHandler.filter 指定要使用的 <tt>Filter</tt> 类的名称（默认值非 <tt>Filter</tt>）。
<li>   java.util.logging.SocketHandler.formatter 指定要使用的 <tt>Formatter</tt>（默认值为 <tt>java.util.logging.XMLFormatter</tt>）。
<li>   java.util.logging.SocketHandler.encoding 要使用的字符集编码的名称（默认值为默认平台编码）。
<li>   java.util.logging.SocketHandler.host 指定要连接到的目标主机名（无默认值）。
<li>   java.util.logging.SocketHandler.port 指定要使用的目标 TCP 端口（无默认值）。
 </ul>
 <p>
输出 IO 流是缓冲的，但是在每次写入 <tt>LogRecord</tt> 后都将刷新。

@version 1.18, 12/19/03
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.logging.SocketHandler() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
仅使用 <tt>LogManager</tt> 属性（或其默认值）创建 <tt>SocketHandler</tt>。
@throws IllegalArgumentException 如果主机或端口无效或者没有指定为 LogManager 属性。
@throws IOException 如果未能连接到目标主机和端口。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.logging.SocketHandler(String host, int port) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个带有指定主机和端口的 <tt>SocketHandler</tt>。

<tt>SocketHandler</tt> 是基于 <tt>LogManager</tt> 属性（或其默认值）配置的，除非使用了给定的目标主机和端口参数。如果主机参数为空，但不是 null 字符串，则使用本地主机。

@param host 目标主机。
@param port 目标端口。

@throws IllegalArgumentException 如果主机或端口无效。
@throws IOException 如果未能连接到目标主机和端口。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.logging.SocketHandler.close() throws java.lang.SecurityException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此输出流。

@exception  SecurityException  如果存在安全管理器，且调用者不具有 <tt>LoggingPermission("control")</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.logging.SocketHandler.publish(LogRecord record)
<!-- END KEY -->
<!-- BEGIN DATA -->
格式化并发布 <tt>LogRecord</tt>。

@param  record  对日志事件的描述。默认忽略 null 记录，并且不进行发布。

<!-- END DATA -->


