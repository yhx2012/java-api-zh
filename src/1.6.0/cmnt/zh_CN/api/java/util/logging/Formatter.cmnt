<!-- BEGIN KEY -->
public abstract class java.util.logging.Formatter extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
Formatter 为格式化 LogRecords 提供支持。
 <p>
一般来说，每个日志记录 Handler 都有关联的 Formatter。Formatter 接受 LogRecord，并将它转换为一个字符串。
 <p>
有些 Formatter（如 XMLFormatter）需要围绕一组格式化记录来包装头部和尾部字符串。可以使用 getHeader 和 getTail 方法来获得这些字符串。

@version 1.16, 12/19/03
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.logging.Formatter()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的 Formatter。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String java.util.logging.Formatter.format(LogRecord record)
<!-- END KEY -->
<!-- BEGIN DATA -->
格式化给定的日志记录，并返回格式化后的字符串。
 <p>
得到的格式化 String 通常包括 LogRecord 消息字段的本地化和格式化版本。Formatter.formatMessage 这个便捷方法可以（可选）用来本地化和格式化消息字段。

@param record 要格式化的日志记录。
@return 格式化的日志记录

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.logging.Formatter.getHead(Handler h)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一组格式化记录的头部字符串。
 <p>  
此基类返回一个空字符串，但是它可以通过子类进行重写。
 
@param   h  目标 handler（可以为 null）
@return  头部字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.logging.Formatter.getTail(Handler h)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一组格式化记录的尾部字符串。
 <p>  
此基类返回一个空字符串，但是它可以通过子类进行重写。
 
@param   h  目标 handler（可以为 null）
@return  尾部字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String java.util.logging.Formatter.formatMessage(LogRecord record)
<!-- END KEY -->
<!-- BEGIN DATA -->
本地化和格式化来自日志记录的消息字符串。在 Formatter 子类执行格式化时，此方法可以作为一种便捷方法使用。
 <p>
首先使用记录的 ResourceBundle 将消息字符串本地化为格式字符串。（如果不存在 ResourceBundle，或没有找到消息键，则将该键用作格式字符串。）格式 String 使用 java.text 样式进行格式化。
 <ul>
<li>如果没有参数，则不使用 Formatter。
<li>否则，如果字符串包含 &quot;{0&quot;，则使用 java.text.MessageFormat 来格式化字符串。
<li>否则，不执行格式化。 
 </ul> 
 <p>

@param  record  包含原始消息的日志记录
@return  已本地化和格式化的消息

<!-- END DATA -->
