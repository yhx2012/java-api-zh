<!-- BEGIN KEY -->
java.util.logging
<!-- END KEY -->
<!-- BEGIN DATA -->

<P>
提供 Java<SUP><FONT SIZE="-2">TM</FONT></SUP> 2 平台核心日志工具的类和接口。Logging API 的中心目标是支持在客户站点进行软件的维护和服务。 

<P>
使用日志有 4 个主要目标：
</P>

<OL>
<LI> <I>由最终用户和系统管理员进行问题诊断</I>。这由简单的常见问题日志组成，可在本地解决或跟踪这些问题，如资源不足、安全失败和简单的配置错误。
        
<LI> <I>由现场服务工程师进行问题诊断</I>。现场服务工程师使用的日志信息可以相当复杂和冗长，远超过系统管理员的要求。通常，这样的信息需要特定子系统中的额外日志记录。

<LI> <I>由开发组织进行问题诊断</I>。在现场出现问题时，必须将捕获的日志信息返回到原开发团队以供诊断。此日志信息可能非常详细，并且相当费解。这样的信息可能包括对特定子系统进行内部执行的详细跟踪。           

<LI> <I>由开发人员进行问题诊断</I>。Logging API 还可以用来帮助调试正在开发的应用程序。这可能包括由目标应用程序产生的日志信息，以及由低级别的库产生的日志信息。但是要注意，虽然这样使用非常合理，但是 Logging API 并不用于代替开发环境中已经存在的调试和解析工具。
</OL>

</P>
此包的关键元素包括：
<UL>
<LI> <I>Logger</I>：应用程序进行 logging 调用的主要实体。Logger 对象用来记录特定系统或应用程序组件的日志消息。
<LI> <I>LogRecord</I>：用于在 logging 框架和单独的日志处理程序之间传递 logging 请求。
<LI> <I>Handler</I>：将 LogRecord 对象导出到各种目的地，包括内存、输出流、控制台、文件和套接字。为此有各种的 Handler 子类。其他 Handler 可能由第三方开发并在核心平台的顶层实现。
<LI> <I>Level</I>：定义一组可以用来控制 logging 输出的标准 logging 级别。可以配置程序为某些级别输出 logging，而同时忽略其他输出。
<LI> <I>Filter</I>：为所记录的日志提供日志级别控制以外的细粒度控制。Logging API 支持通用的过滤器机制，该机制允许应用程序代码附加任意的过滤器以控制 logging 输出。 
                       
<LI> <I>Formatter</I>：为格式化 LogRecord 对象提供支持。此包包括的两个格式器 SimpleFormatter 和 XMLFormatter 分别用于格式化纯文本或 XML 中的日志记录。与 Handler 一样，其他 Formatter 可能由第三方开发。
</UL>
<P>
Logging API 提供静态和动态的配置控制。静态控制使现场服务人员可以建立特定的配置，然后重新启动带有新 logging 设置的应用程序。动态控制允许对当前正在运行的系统内的 logging 配置进行更新。API 也允许对不同的系统功能领域启用或禁用 logging。例如，现场服务工程师可能对跟踪所有 AWT 事件感兴趣，但是不会对套接字事件或内存管理感兴趣。
</P>

<h2>Null 指针</h2>
<p>
通常，除非在 javadoc 中另行注释，否则如果传递一个 null 参数，则方法和构造方法将抛出 NullPointerException。此规则的一个明显的例外是 Logger 类中的各种日志记录便捷方法（config、entering、exiting、fine、finer、finest、log、logp、logrb、severe、throwing 和 warning 方法）的所有参数，除了初始 Level 参数（如果有）之外，都接受 null 值。
<p>
<H2>相关文档</H2>
<P>
有关控制流的概述，请参阅 <a href="../../../../technotes/guides/logging/overview.html">Java Logging Overview</a>。
</P>

<!-- Put @see and @since tags down here. -->

@since 1.4



<!-- END DATA -->
