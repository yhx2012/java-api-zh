<!-- BEGIN KEY -->
public class java.util.logging.Logger extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
Logger 对象用来记录特定系统或应用程序组件的日志消息。一般使用圆点分隔的层次名称空间来命名 Logger。Logger 名称可以是任意的字符串，但是它们一般应该基于被记录组件的包名或类名，如 java.net 或 javax.swing。此外，可以创建&ldquo;匿名&rdquo;的 Logger，其名称未存储在 Logger 名称空间中。
 <p>
可通过调用某个 getLogger 工厂方法来获得 Logger 对象。这些方法要么创建一个新 Logger，要么返回一个合适的现有 Logger。
 <p>
日志消息被转发到已注册的 Handler 对象，该对象可以将消息转发到各种目的地，包括控制台、文件、OS 日志等等。
 <p>
每个 Logger 都跟踪一个&ldquo;父&rdquo;Logger，也就是 Logger 名称空间中与其最近的现有祖先。
 <p>
每个 Logger 都有一个与其相关的 &quot;Level&quot;。这反映了此 logger 所关心的最低 Level。如果将 Logger 的级别设置为 <tt>null</tt>，那么它的有效级别继承自父 Logger，这可以通过其父 Logger 一直沿树向上递归得到。
 <p>
可以根据日志配置文件的属性来配置日志级别，在 LogManager 类的描述中对此有所说明。但是也可以通过调用 Logger.setLevel 方法动态地改变它。如果日志级别改变了，则此变化也会影响它的子 logger，因为任何级别为 <tt>null</tt> 的子 logger 的有效级别都继承自它的父 Logger。
 <p>
对于每次日志记录调用，Logger 最初都依照 logger 的有效日志级别对请求级别（例如 SEVERE 或 FINE）进行简单的检查。如果请求级别低于日志级别，则日志记录调用将立即返回。
 <p>
通过此初始（简单）测试后，Logger 将分配一个 LogRecord 来描述日志记录消息。接着调用 Filter（如果存在）进行更详细的检查，以确定是否应该发布该记录。如果检查通过，则将 LogRecord 发布到其输出 Handler。在默认情况下，logger 也将 LogRecord 沿树递推发布到其父 Handler。
 <p>
每个 Logger 都有一个与其关联的 ResourceBundle 名称。该指定的包用于本地化日志消息。如果一个 Logger 没有自己的 ResourceBundle 名称，则它将通过其父 Logger 沿树递归继承到 ResourceBundle 名称。
 <p>
大多数 logger 输出方法都带有 &quot;msg&quot; 参数。此 msg 参数可以是一个原始值，也可以是一个本地化的键。在格式化期间，如果 logger 具有（或继承）一个本地化 ResourceBundle，并且 ResourceBundle 包含 msg 字符串的映射关系，那么用本地化值替换 msg 字符串。否则使用原来的 msg 字符串。通常，格式器使用 java.text.MessageFormat 形式的格式来格式化参数，例如，格式字符串 &quot;{0} {1}&quot; 将两个参数格式化为字符串。
 <p>
将 ResourceBundle 名称映射到 ResourceBundle 时，Logger 首先试图使用该线程的 ContextClassLoader。如果 ContextClassLoader 为 null，则 Logger 将尝试 SystemClassLoader。作为初始实现中的临时过渡功能，如果 Logger 无法从 ContextClassLoader 或 SystemClassLoaderis 中找到一个 ResourceBundle，则 Logger 将会向上搜索类堆栈并连续调用 ClassLoader 来试图找到 ResourceBundle（此调用堆栈搜索是为了允许容器过渡到使用 ContextClassLoader，该功能可能在以后版本中取消）。
 <p>
格式化（包括本地化）是输出 Handler 的责任，它通常会调用格式器。
 <p>
注意，格式化不必同步发生。它可以延迟，直到 LogRecord 被实际写入到外部接收器。
 <p>
日志记录方法划分为 5 个主要类别：
 <ul>
 <li><p>
 一系列的 &quot;log&quot; 方法，这种方法带有日志级别、消息字符串，以及可选的一些消息字符串参数。
 <li><p>
一系列的 &quot;logp&quot; 方法（即 &quot;log precise&quot;），其与 &quot;log&quot; 方法相似，但是带有显式的源类名称和方法名称。
 <li><p>
一系列的 &quot;logrb&quot; 方法（即 &quot;log with resource bundle&quot;），其与 &quot;logp&quot; 方法相似，但是带有显式的在本地化日志消息中使用的资源包名称。
 <li><p>
还有跟踪方法条目（&quot;entering&quot; 方法）、方法返回（&quot;exiting&quot; 方法）和抛出异常（&quot;throwing&quot; 方法）的便捷方法。
 <li><p>
最后，还有一系列在非常简单的情况下（如开发人员只想为给定的日志级别记录一条简单的字符串）使用的便捷方法。这些方法按标准级别名称命名（&quot;severe&quot;、&quot;warning&quot;、&quot;info&quot; 等等)，并带有单个参数，即一个消息字符串。
 </ul>
 <p>
对于不带显式源名和方法名的方法，日志记录框架将尽可能确定日志记录方法中调用了哪个类和方法。但是应认识到，这样自动推断的信息可能只是近似的，甚至可能是完全错误的。这是因为允许虚拟机在 JIT 编译时可以进行广泛的优化，并且可以完全移除栈帧，导致它无法可靠地找到调用的类和方法。
 <P>
Logger 上执行的所有方法都是多线程安全的。
 <p>
<b>子类化信息：</b>注意，对于名称空间中的任意点，LogManager 类都可以提供自身的指定 Logger 实现。因此，Logger 的任何子类（它们与新的 LogManager 类一起实现的情况除外）要注意应该从 LogManager 类获得一个 Logger 实例，并应该将诸如 &quot;isLoggable&quot; 和 &quot;log(LogRecord)&quot; 这样的操作委托给该实例。注意，为了截取所有的日志记录输出，子类只需要重写 log(LogRecord) 方法。所有其他日志记录方法作为在此 log(LogRecord) 方法上的调用而实现。

@version 1.45, 02/24/04
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.util.logging.Logger.GLOBAL_LOGGER_NAME
<!-- END KEY -->
<!-- BEGIN DATA -->
GLOBAL_LOGGER_NAME 是全局 logger 的一个名称。此名称是向偶尔使用 Logging 包的开发人员提供的一种便捷方法。认真使用 logging 包（例如在产品中）的开发人员应创建并使用其自己的 Logger 对象（带合适的名称），这样才能在适合于每个 Logger 粒度的级别上控制日志记录。
 <p>
获取全局 logger 的首选方法是通过调用 <code>Logger.getLogger(Logger.GLOBAL_LOGGER_NAME)</code>。
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.logging.Logger java.util.logging.Logger.global
<!-- END KEY -->
<!-- BEGIN DATA -->
&ldquo;全局&rdquo;Logger 对象是向偶尔使用 Logging 包的开发人员提供的一种便捷方法。对于经常使用 logging 包（如在产品中）的开发人员应创建和使用其自己的 Logger 对象（带合适的名称），这样才能在适合于每个 Logger 粒度的级别上控制日志记录。
 <p>
@deprecated 此字段的初始化会容易出现死锁。必须由 Logger 类初始化来初始化字段，这可能会导致 LogManager 类初始化的死锁。在这种情况下，两个类初始化都要等待对方完成。从 JDK version 1.6 开始，获取全局 logger 对象的首选方法是通过调用 <code>Logger.getLogger(Logger.GLOBAL_LOGGER_NAME)</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.logging.Logger(String name, String resourceBundleName)
<!-- END KEY -->
<!-- BEGIN DATA -->
受保护的方法，它用于为一个指定子系统的构造 logger。
 <p>
该 logger 初始配置的 Level 为 null，并且 useParentHandler 为 true。

@param	name logger 的名称。这应该是一个圆点分隔的名称，并且通常应该基于子系统的包名或类名（如 java.net 或 javax.swing）。对于匿名 Logger 来说，名称可以为 null。
@param	resourceBundleName 用来本地化此 logger 消息的 ResourceBundle 的名称。如果消息不需要本地化，则名称可能为 null。
@throws MissingResourceException 如果 ResourceBundleName 不为 null，并且无法找到相应的资源。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.util.logging.Logger java.util.logging.Logger.getLogger(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
为指定子系统查找或创建一个 logger。如果已经创建了具有给定名称的 logger，则返回该 logger。否则创建一个新的 logger。
 <p>
如果创建了新的 logger，则根据 LogManager 的配置来配置其日志级别，并将日志输出发送到其父处理程序。日志配置注册在 LogManager 全局名称空间内。
 
@param	name logger 的名称。这应该是一个圆点分隔的名称，并且通常应该基于子系统的包名或类名（如 java.net 或 javax.swing）
@return 适合的 Logger
@throws NullPointerException 如果 name 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.util.logging.Logger java.util.logging.Logger.getLogger(String name, String resourceBundleName)
<!-- END KEY -->
<!-- BEGIN DATA -->
为指定子系统查找或创建一个 logger。如果已经创建了具有给定名称的 logger，则返回该 logger。否则创建一个新的 logger。
 <p>
如果创建了新的 logger，则根据 LogManager 来配置其日志级别，并将日志输出发送到其父处理程序。日志配置注册在 LogManager 全局名称空间内。
 <p>
如果指定的 Logger 已经存在，并且没有本地化资源包，则使用给定的资源包名称。如果给定的 Logger 已经存在，并有不同的资源包名称，则抛出 IllegalArgumentException。
 <p>
@param	name logger 的名称。这应该是一个圆点分隔的名称，并且通常应该基于子系统的包名或类名（如 java.net 或 javax.swing）。
@param	resourceBundleName  用来本地化此 logger 消息的 ResourceBundle 的名称。如果消息不需要本地化，则名称可以为 <CODE>null</CODE>。
@return 合适的 Logger。
@throws MissingResourceException 如果无法找到指定的 ResourceBundle。
@throws IllegalArgumentException 如果 Logger 已经存在，并使用了不同的资源包名称。
@throws NullPointerException 如果 name 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.util.logging.Logger java.util.logging.Logger.getAnonymousLogger()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个匿名的 Logger。新创建的 Logger 不是注册在 LogManager 名称空间内。不必对是否更新到 logger 进行访问检查。
 <p>
此工厂方法主要适合从 applet 来使用。因为得到的 Logger 是匿名的，所以它可通过创建类而保持为私有的。这就不需要进行常规安全检查，从而允许不受信任的 applet 代码可更新 Logger 的控制状态。例如，applet 可以在匿名的 Logger 上执行 setLevel 或 addHandler 操作。
 <p>
即使新的 logger 是匿名的，也要配置它将根 logger (&quot;&quot;) 作为其父 logger。这意味着在默认情况下此 logger 从根 logger 继承有效级别和处理程序。
 <p>

@return 新创建的私有 Logger。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.util.logging.Logger java.util.logging.Logger.getAnonymousLogger(String resourceBundleName)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个匿名的 Logger。新创建的 Logger 不是注册在 LogManager 名称空间内。不会对 logger 是否更新进行访问检查。
 <p>
此工厂方法主要适合从 applet 使用。因为得到的 Logger 是匿名的，所以它可通过创建类而保持为私有的。这就不需要进行常规安全检查，从而允许不受信任的 applet 代码可更新 Logger 的控制状态。例如，applet 可以在匿名的 Logger 上执行 setLevel 或 addHandler 操作。
 <p>
即使新的 logger 是匿名的，也要把它配置为将根 logger (&quot;&quot;) 作为其父 logger。这意味着在默认情况下此 logger 从根 logger 继承有效级别和处理程序。
 <p>
@param	resourceBundleName 用来本地化此 logger 消息的 ResourceBundle 的名称。如果消息不需要本地化，则名称可以为 null。
@return 新创建的私有 Logger。
@throws MissingResourceException 如果无法找到指定的 ResourceBundle。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.ResourceBundle java.util.logging.Logger.getResourceBundle()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 logger 在当前默认语言环境的本地化资源包。注意，如果结果为 null，则 Logger 将使用从其父 Logger 继承的资源包。

@return 本地化包（可能为 null）

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.logging.Logger.getResourceBundleName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 logger 的本地化资源包名称。注意，如果结果为 null，则 Logger 将使用从其父 Logger 继承的资源包名称。

@return 本地化包名称（可能为 null）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.setFilter(Filter newFilter) throws java.lang.SecurityException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置过滤器以控制此 Logger 的输出。
 <P>
通过初始的&ldquo;级别&rdquo;检查之后，Logger 将调用此 Filter 以检查是否确实应该发布某个日志记录。

@param   newFilter  filter 对象（可能为 null）
@exception  SecurityException  如果安全管理器存在并且调用者不具有 LoggingPermission(&quot;control&quot;)。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.logging.Filter java.util.logging.Logger.getFilter()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 Logger 的当前过滤器。

@return  过滤器对象（可能为 null）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.log(LogRecord record)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一条 LogRecord。
 <p>
此类中的其他所有日志记录方法都调用此方法以实际执行所有日志记录操作。子类可以重写此单个方法，从而捕获所有的日志活动。

@param record 要发布的 LogRecord

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.log(Level level, String msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一条不带参数的消息。
 <p>
如果当前对于给定的消息级别而言 logger 是启用的，那么将给定的消息转发到所有已注册的输出 Handler 对象。
 <p>
@param	level	某个消息级别标识符，例如 SEVERE
@param  msg 字符串消息（或消息类别中的键）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.log(Level level, String msg, Object param1)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录带有一个对象参数的消息。
 <p>
如果当前对于给定的消息级别而言 logger 是启用的，则创建相应的 LogRecord 并转发到所有已注册的输出 Handler 对象。
 <p>
@param	level 某个消息级别标识符，例如 SEVERE
@param msg 字符串消息（或消息类别中的键）
@param param1 消息的参数

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.log(Level level, String msg, java.lang.Object[] params)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录带有一组对象参数的消息。
 <p>
如果当前对于给定的消息级别而言 logger 是启用的，则创建相应的 LogRecord 并转发到所有已注册的输出 Handler 对象。
 <p>
@param	level 某个消息级别标识符，例如 SEVERE
@param  msg 字符串消息（或消息类别中的键）
@param  params 消息的一组参数

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.log(Level level, String msg, Throwable thrown)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录带有相关的可抛出信息的消息。
 <p>
如果当前对于给定的消息级别而言 logger 是启用的，那么将给定的参数存储在 LogRecord 中，而 LogRecord 则被转发到所有已注册的输出处理程序。
 <p>
注意，抛出的参数存储在 LogRecord 抛出属性中，而不是存储在 LogRecord 参数属性中。因此特别通过输出 Formatter 来处理参数，而不是将其视为 LogRecord 消息属性的格式化参数。
 <p>
@param	level 某个消息级别标识符，例如 SEVERE
@param   msg	字符串消息（或消息类别中的键）
@param   thrown  与日志消息相关的可抛出对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.logp(Level level, String sourceClass, String sourceMethod, String msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一条消息，具有指定的源类和方法，不带参数。
 <p>
如果当前对于给定的消息级别而言 logger 是启用的，那么将给定的消息转发到所有已注册的输出 Handler 对象。
 <p>
@param	level	某个消息级别标识符，例如 SEVERE
@param   sourceClass    发出日志记录请求的类名
@param   sourceMethod   发出日志记录请求的方法名
@param   msg	字符串消息（或消息类别中的键）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.logp(Level level, String sourceClass, String sourceMethod, String msg, Object param1)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一条消息，具有指定的源类和方法，带有单个日志消息的对象参数。
 <p>
如果当前对于给定的消息级别而言 logger 是启用的，则创建相应的 LogRecord 并转发到所有已注册的输出 Handler 对象。
 <p>
@param	level   某个消息级别标识符，例如 SEVERE
@param   sourceClass    发出日志记录请求的类名
@param   sourceMethod   发出日志记录请求的方法名
@param   msg	 字符串消息（或消息类别中的键）
@param   param1    日志消息的参数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.logp(Level level, String sourceClass, String sourceMethod, String msg, java.lang.Object[] params)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一条消息，具有指定的源类和方法，带有一组对象参数。
 <p>
如果当前对于给定的消息级别而言 logger 是启用的，则创建相应的 LogRecord 并转发到所有已注册的输出 Handler 对象。
 <p>
@param	level   某个消息级别标识符，例如 SEVERE
@param   sourceClass    发出日志记录请求的类名
@param   sourceMethod   发出日志记录请求的方法名
@param   msg	字符串消息（或消息类别中的键）
@param   params	消息的一组参数

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.logp(Level level, String sourceClass, String sourceMethod, String msg, Throwable thrown)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一条消息，具有指定源类和方法，带有相关的可抛出信息。
 <p>
如果当前对于给定的消息级别而言 logger 是启用的，那么将给定的参数存储在 LogRecord 中，而 LogRecord 则被转发到所有已注册的输出处理程序。
 <p>
注意，抛出的参数存储在 LogRecord 抛出属性中，而不是存储在 LogRecord 参数属性中。因此特别通过输出 Formatter 来处理参数，而不是将其视为 LogRecord 消息属性的格式化参数。
 <p>
@param	level   某个消息级别标识符，例如 SEVERE
@param   sourceClass    发出日志记录请求的类名
@param   sourceMethod   发出日志记录请求的方法名
@param   msg	字符串消息（或消息类别中的键）
@param   thrown  与日志消息相关的可抛出对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.logrb(Level level, String sourceClass, String sourceMethod, String bundleName, String msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一条消息，具有指定的源类、方法和资源包名，不带参数。
 <p>
如果当前对于给定的消息级别而言 logger 是启用的，那么将给定的消息转发到所有已注册的输出 Handler 对象。
 <p>
使用指定的资源包本地化 msg 字符串。如果资源包名为 null，或者一个空 String 或无效，那么不本地化 msg 字符串。
 <p>
@param	level	某个消息级别标识符，例如 SEVERE
@param   sourceClass    发出日志记录请求的类名
@param   sourceMethod   发出日志记录请求的方法名
@param   bundleName     本地化 msg 的资源包名（可能为 null）
@param   msg	字符串消息（或消息类别中的键）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.logrb(Level level, String sourceClass, String sourceMethod, String bundleName, String msg, Object param1)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一条消息，具有指定的源类、方法和资源包名，带有单个日志消息的对象参数。
 <p>
如果当前对于给定的消息级别而言 logger 是启用的，则创建相应的 LogRecord 并转发到所有已注册的输出 Handler 对象。
 <p>
使用指定的资源包本地化 msg 字符串。如果资源包名为 null，或者一个空 String 或无效，那么不本地化 msg 字符串。
 <p>
@param	level   某个消息级别标识符，例如 SEVERE
@param sourceClass    发出日志记录请求的类名
@param sourceMethod   发出日志记录请求的方法名
@param bundleName     本地化 msg 的资源包名，可以为 null
@param msg	 字符串消息（或消息类别中的键）
@param param1    日志消息的参数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.logrb(Level level, String sourceClass, String sourceMethod, String bundleName, String msg, java.lang.Object[] params)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一条消息，具有指定的源类、方法和资源包名，带有一组对象参数。
 <p>
如果当前对于给定的消息级别而言 logger 是启用的，则创建相应的 LogRecord 并转发到所有已注册的输出 Handler 对象。
 <p>
使用指定的资源包本地化 msg 字符串。如果资源包名为 null，或者一个空 String 或无效，那么不本地化 msg 字符串。
 <p>
@param	level   某个消息级别标识符，例如 SEVERE
@param   sourceClass    发出日志记录请求的类名
@param   sourceMethod   发出日志记录请求的方法名
@param   bundleName     本地化 msg 的资源包名（可能为 null）
@param   msg	字符串消息（或消息类别中的键）
@param   params	消息的一组参数

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.logrb(Level level, String sourceClass, String sourceMethod, String bundleName, String msg, Throwable thrown)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一条消息，具有指定的源类、方法和资源包名，带有相关的可抛出对象。
 <p>
如果当前对于给定的消息级别而言 logger 是启用的，那么将给定的参数存储在 LogRecord 中，而 LogRecord 则被转发到所有已注册的输出处理程序。
 <p>
使用指定的资源包本地化 msg 字符串。如果资源包名为 null，或者一个空 String 或无效，那么不本地化 msg 字符串。
 <p>
注意，抛出的参数存储在 LogRecord 抛出属性中，而不是存储在 LogRecord 参数属性中。因此特别通过输出 Formatter 来处理参数，而不是将其视为 LogRecord 消息属性的格式化参数。
 <p>
@param	level   某个消息级别标识符，例如 SEVERE
@param sourceClass    发出日志记录请求的类名
@param sourceMethod   发出日志记录请求的方法名
@param bundleName     本地化 msg 的资源包名，可以为 null
@param msg	字符串消息（或消息类别中的键）
@param thrown  与日志消息相关的可抛出对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.entering(String sourceClass, String sourceMethod)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一个方法条目。
 <p>
这是一个可为方法记录条目的便捷方法。记录带消息 &quot;ENTRY&quot; 的 LogRecord、日志级别 FINER、给定的 sourceMethod 和 sourceClass。
 <p>
@param  sourceClass    发出日志记录请求的类名
@param  sourceMethod   所输入的方法名

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.entering(String sourceClass, String sourceMethod, Object param1)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一个方法条目，带有一个参数。
 <p>
这是一个可为方法记录条目的便捷方法。记录带消息 &quot;ENTRY {0}&quot; 的 LogRecord、日志级别 FINER，以及给定的 sourceMethod、sourceClass 和参数。
 <p>
@param   sourceClass    发出日志记录请求的类名
@param   sourceMethod   所输入的方法名
@param   param1	所输入的方法参数

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.entering(String sourceClass, String sourceMethod, java.lang.Object[] params)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一个方法条目，带有一组参数。
 <p>
这是一个可为方法记录条目的便捷方法。记录带消息 &quot;ENTRY&quot;（后跟格式 {N} 指示符表示参数数组中的每个条目）的 LogRecord、日志级别 FINER、给定的 sourceMethod、sourceClass 和参数。
 <p>
@param   sourceClass    发出日志记录请求的类名
@param   sourceMethod   所输入的方法名
@param   params	       所输入的一组方法参数

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.exiting(String sourceClass, String sourceMethod)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一个方法返回。
 <p>
这是一个便捷方法，可以用来记录一个方法的返回。记录带有消息 &quot;RETURN&quot; 的 LogRecord、日志级别 FINER、给定的 sourceMethod 和 sourceClass。
 <p>
@param   sourceClass    发出日志记录请求的类名
@param   sourceMethod   方法名

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.exiting(String sourceClass, String sourceMethod, Object result)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一个方法返回，带有结果对象。
 <p>
这是一个便捷方法，可以用来记录从方法返回对象。记录带消息 &quot;RETURN {0}&quot; 的 LogRecord、日志级别 FINER、给定的 sourceMethod、sourceClass 和结果对象。
 <p>
@param   sourceClass    发出日志记录请求的类名
@param   sourceMethod   方法名
@param   result  所返回的 Object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.throwing(String sourceClass, String sourceMethod, Throwable thrown)
<!-- END KEY -->
<!-- BEGIN DATA -->
正抛出异常的记录。
 <p>
这是一个便捷方法，可以用来记录某个方法抛出了异常并终止。使用 FINER 级别进行日志记录。
 <p>
如果当前对于给定的消息级别而言 logger 是启用的，那么将给定的参数存储在 LogRecord 中，而 LogRecord 则被转发到所有已注册的输出处理程序。将 LogRecord 的消息设置为 &quot;THROW&quot;。
 <p>
注意，抛出的参数存储在 LogRecord 抛出属性中，而不是存储在 LogRecord 参数属性中。因此特别通过输出 Formatter 来处理参数，而不是将其视为 LogRecord 消息属性的格式化参数。
 <p>
@param   sourceClass    发出日志记录请求的类名
@param   sourceMethod  方法名
@param   thrown  所抛出的可抛出对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.severe(String msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一条 SEVERE 消息。
 <p>
如果当前对于 SEVERE 消息级别而言 logger 是启用的，那么将给定的消息转发到所有已注册的输出 Handler 对象。
 <p>
 @param   msg	字符串消息（或消息类别中的键）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.warning(String msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一条 WARNING 消息。
 <p>
如果当前对于 WARNING 消息级别而言 logger 是启用的，那么将给定的消息转发到所有已注册的输出 Handler 对象。
 <p>
 @param   msg	字符串消息（或消息类别中的键）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.info(String msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一条 INFO 消息。
 <p>
如果当前对于 INFO 消息级别而言 logger 是启用的，那么将给定的消息转发到所有已注册的输出 Handler 对象。
 <p>
 @param   msg	字符串消息（或消息类别中的键）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.config(String msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一条 CONFIG 消息。
 <p>
如果当前对于 CONFIG 消息级别而言 logger 是启用的，那么将给定的消息转发到所有已注册的输出 Handler 对象。
 <p>
 @param   msg	字符串消息（或消息类别中的键）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.fine(String msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一条 FINE 消息。
 <p>
如果当前对于 FINE 消息级别而言 logger 是启用的，那么将给定的消息转发到所有已注册的输出 Handler 对象。
 <p>
 @param   msg	字符串消息（或消息类别中的键）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.finer(String msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一条 FINER 消息。
 <p>
如果当前对于 FINER 消息级别而言 logger 是启用的，那么将给定的消息转发到所有已注册的输出 Handler 对象。
 <p>
 @param   msg	字符串消息（或消息类别中的键）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.finest(String msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录一条 FINEST 消息。
 <p>
如果当前对于 FINEST 消息级别而言 logger 是启用的，那么将给定的消息转发到所有已注册的输出 Handler 对象。
 <p>
 @param   msg	字符串消息（或消息类别中的键）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.setLevel(Level newLevel) throws java.lang.SecurityException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置日志级别，指定此 logger 记录的消息级别。将级别低于此值的消息丢弃。可以使用级别值 Level.OFF 来关闭日志记录。
 <p>
如果新的级别为 null，则意味着此节点应该继承它最近的祖先（具有特定的非 null 级别值）的级别。
 
@param newLevel 日志级别的新值。
@exception SecurityException  如果安全管理器存在并且调用者不具有 LoggingPermission(&quot;control&quot;)。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.logging.Level java.util.logging.Logger.getLevel()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取已为此 Logger 指定的日志级别（Level）。结果可能为 null，这意味着此 logger 的有效级别将继承它的父 Logger。

@return  此 Logger 的级别

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.logging.Logger.isLoggable(Level level)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查给定级别的消息实际上是否由此 logger 记录。此检查是根据 Logger 的有效级别（可能继承自它的父 Logger）进行的。

@param	level	消息日志记录的级别
@return	如果当前正在记录给定的消息级别，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.logging.Logger.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 logger 的名称。
@return logger 的名称。对于匿名 Logger 来说，名称为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.logging.Logger.addHandler(Handler handler) throws java.lang.SecurityException
<!-- END KEY -->
<!-- BEGIN DATA -->
添加一个日志 Handler 以接收日志记录消息。
 <p>
在默认情况下，Logger 还将其输出发送到它们的父 logger 中。通常，根 Logger 配置有一组 Handler，这些 Handler 本质上作为所有 logger 的默认处理程序。

@param	handler 日志记录 Handler
@exception  SecurityException 如果安全管理器存在并且调用者不具有 LoggingPermission(&quot;control&quot;)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.logging.Logger.removeHandler(Handler handler) throws java.lang.SecurityException
<!-- END KEY -->
<!-- BEGIN DATA -->
移除一个日志 Handler。
 <P>
如果无法找到给定的 Handler 或其为 null，则静默返回。
 
@param	handler 日志记录 Handler
@exception  SecurityException 如果安全管理器存在并且调用者不具有 LoggingPermission(&quot;control&quot;)。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.util.logging.Handler[] java.util.logging.Logger.getHandlers()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得与此 logger 相关的 Handler。
 <p>
@return  一组已注册的 Handler

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.logging.Logger.setUseParentHandlers(boolean useParentHandlers)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定此 logger 是否应该将其输出发送到它的父 Logger。这意味着从名称空间向上递归，任何 LogRecord 都将被写入到其父 Handler，并且可能是祖父 Handler。

@param useParentHandlers   如果要将输出发送到其父 logger，则为 true。
@exception  SecurityException  如果安全管理器存在并且调用者不具有 LoggingPermission(&quot;control&quot;)。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.util.logging.Logger.getUseParentHandlers()
<!-- END KEY -->
<!-- BEGIN DATA -->
获知此 logger 是否将其输出发送到它的父 logger。

@return  如果要将输出发送到其父 logger，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.logging.Logger java.util.logging.Logger.getParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 Logger 的父 logger。
 <p>
此方法返回名称空间中最近的现存父 logger。因此，如果一个 Logger 名为 &quot;a.b.c.d&quot;，并且已经创建了一个名为 &quot;a.b&quot; 的 logger，但是不存在名为 &quot;a.b.c&quot; 的 logger，那么对 Logger &quot;a.b.c.d&quot; 调用 getParent 将返回 Logger &quot;a.b&quot;。
 <p>
如果对名称空间中的根 Logger 调用该方法，则结果为 null。
 
@return 最近的现有父 Logger

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.Logger.setParent(Logger parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 Logger 的父 Logger。名称空间改变时，由 LogManager 使用此方法来更新 Logger。
 <p>
不应该从应用程序代码中调用此方法。
 <p>
@param  parent   新的父 logger
@exception  SecurityException  如果安全管理器存在并且调用者不具有 LoggingPermission(&quot;control&quot;)。

<!-- END DATA -->


