<!-- BEGIN KEY -->
public abstract class java.util.ResourceBundle extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

资源包包含特定于语言环境的对象。当程序需要一个特定于语言环境的资源时（如 <code>String</code>），程序可以从适合当前用户语言环境的资源包中加载它。使用这种方式，可以编写很大程度上独立于用户语言环境的程序代码，它将资源包中大部分（即便不是全部）特定于语言环境的信息隔离开来。

 <p>
这使编写的程序可以：
<UL type=SQUARE>
<LI> 轻松地本地化或翻译成不同的语言
<LI> 一次处理多个语言环境
<LI> 以后可以轻松进行修改，以便支持更多的语言环境
</UL>

 <P>
资源包属于这样的系列，其成员共享一个公共的基本名称，但是名称中还有标识其语言环境的其他组件。例如，某个资源包系列的基本名称可能是 "MyResources"。该系列应该有一个默认资源包，其名称与其系列名相同（ "MyResources"），如果不支持指定的语言环境，则应该将此资源包用作最后的手段。然后，此系列可根据需要提供特定于语言环境的成员，例如一个名为 "MyResources_de" 的德语资源包。

 <P>
一个系列中的每个资源包都包含相同的项，但是这些项已经针对该资源包所代表的语言环境进行了翻译。例如，"MyResources" 和 "MyResources_de" 可能有用在取消操作按钮上的 <code>String</code>。在 "MyResources" 中，<code>String</code> 可能包含 "Cancel"，而 "MyResources_de" 中则可能包含 "Abbrechen"。

 <P>
如果不同的国家/地区有不同的资源，则可以对它们进行限定：例如，"MyResources_de_CH" 包含瑞士 (CH) 中包含德语 (de) 的对象。如果只想修改限定中的某些资源，就可以这样做。

 <P>
当程序需要特定于语言环境的对象时，它使用 {@link #getBundle(java.lang.String, java.util.Locale) getBundle} 方法加载 <code>ResourceBundle</code> 类：
 <blockquote>
 <pre>
 ResourceBundle myResources =
      ResourceBundle.getBundle("MyResources", currentLocale);
 </pre>
 </blockquote>

 <P>
资源包包含键/值对。键唯一地标识了包中特定于语言环境的对象。下面是一个 <code>ListResourceBundle</code> 示例，它包含两个键/值对：
 <blockquote>
 <pre>
 public class MyResources extends ListResourceBundle {
     protected Object[][] getContents() {
         return new Object[][] {
             // LOCALIZE THE SECOND STRING OF EACH ARRAY (e.g., "OK")
             {"OkKey", "OK"},
             {"CancelKey", "Cancel"},
             // END OF MATERIAL TO LOCALIZE
        };
     }
 }
 </pre>
 </blockquote>
键始终为 <code>String</code> 类型。在此示例中，两个键是 "OkKey" 和 "CancelKey"。在上面的示例中，值也是 <code>String</code> 类型，即 "OK" 和 "Cancel"，但并非必须如此。值可以是任意对象类型。

 <P>
可以使用适当的获取方法从资源包中获取某个对象。因为 "OkKey" 和 "CancelKey" 都是字符串，所以应该使用 <code>getString</code> 获取它们：
 <blockquote>
 <pre>
 button1 = new Button(myResources.getString("OkKey"));
 button2 = new Button(myResources.getString("CancelKey")); 
 </pre>
 </blockquote>
所有获取方法都需要将键作为参数并返回对象（如果找到的话）。如果未找到对象，则获取方法将抛出 <code>MissingResourceException</code>。

 <P>
除了 <code>getString</code> 之外，<code>ResourceBundle</code> 还提供了获取字符串数组的方法 <code>getStringArray</code>，以及用于其他任意对象类型的 <code>getObject</code> 方法。使用 <code>getObject</code> 时，必须将结果强制转换为适当的类型。例如：
 <blockquote>
 <pre>
 int[] myIntegers = (int[]) myResources.getObject("intList");
 </pre>
 </blockquote>

 <P>
Java 平台提供了两个 <code>ResourceBundle</code> 的子类，即 <code>ListResourceBundle</code> 和 <code>PropertyResourceBundle</code>，这为创建资源提供了一种相当简单的方式。正如在前面示例中所看到的，<code>ListResourceBundle</code> 以键/值对的列表方式管理其资源。<code>PropertyResourceBundle</code> 则使用一个属性文件来管理其资源。

 <p>
如果 <code>ListResourceBundle</code> 或 <code>PropertyResourceBundle</code> 无法满足需求，那么可以编写自己的 <code>ResourceBundle</code> 子类。子类必须重写两个方法：<code>handleGetObject</code> 和 <code>getKeys()</code>。

<h4>ResourceBundle.Control</h4>

 {@link ResourceBundle.Control} 类提供通过带 <code>ResourceBundle.Control</code> 实例的 <code>getBundle</code> 工厂方法执行包加载进程所需的信息。为了启用非标准资源包格式、更改搜索策略或定义缓存参数，可以实现自己的子类。有关细节请参考类和 {@link #getBundle(String, Locale, ClassLoader, Control) getBundle} 工厂方法的描述。

 <h4>缓存管理</h4>

 <code>getBundle</code> 工厂方法创建的资源包实例是默认缓存的，如果资源包实例已经缓存，那么这些工厂方法将多次返回相同的资源包实例。<code>getBundle</code> 客户端可以清除缓存、使用生存时间值管理已缓存资源包实例的生命周期，或者指定不缓存资源包实例。有关细节请参考{@linkplain #getBundle(String, Locale, ClassLoader, Control) <code>getBundle</code> 工厂方法}、{@link #clearCache(ClassLoader) clearCache}、{@link Control#getTimeToLive(String, Locale) ResourceBundle.Control.getTimeToLive} 和 {@link Control#needsReload(String, Locale, String, ClassLoader, ResourceBundle, long) ResourceBundle.Control.needsReload} 的描述。

 <h4>示例</h4>

下面是一个极其简单的 <code>ResourceBundle</code> 子类示例 <code>MyResources</code>，它管理两个资源（对于大量的资源，应该使用 <code>Map</code>）。注意，如果某个“父级”<code>ResourceBundle</code> 处理具有相同值的相同键（如下面的 okKey），则无需提供值。

 <blockquote>
 <pre>
 // default (English language, United States)
 public class MyResources extends ResourceBundle {
     public Object handleGetObject(String key) {
         if (key.equals("okKey")) return "Ok";
         if (key.equals("cancelKey")) return "Cancel";
         return null;
     }
     public Enumeration&lt;String&gt; getKeys() {
         return Collections.enumeration(keySet());
     }
 
     // Overrides handleKeySet() so that the getKeys() implementation
     // can rely on the keySet() value.
     protected Set&lt;String&gt; handleKeySet() {
         return new HashSet&lt;String&gt;(Arrays.asList("okKey", "cancelKey"));
     } 
 }

 // German language
 public class MyResources_de extends MyResources {
     public Object handleGetObject(String key) {
         // don't need okKey, since parent level handles it.
         if (key.equals("cancelKey")) return "Abbrechen";
         return null;
     }
   protected Set&lt;String&gt; handleKeySet() {
         return new HashSet&lt;String&gt;(Arrays.asList("cancelKey"));
     }
 }
 </pre>
 </blockquote>
不必限制只使用 <code>ResourceBundle</code> 的单个系列。例如，可以有异常消息 <code>ExceptionResources</code> 的包集（<code>ExceptionResources_fr</code>、<code>ExceptionResources_de</code> 等）和窗口小部件 <code>WidgetResource</code> 的包集（<code>WidgetResources_fr</code>、<code>WidgetResources_de</code> 等）；可以按自己喜欢的方式分解资源。

@see ListResourceBundle
@see PropertyResourceBundle
@see MissingResourceException
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.ResourceBundle java.util.ResourceBundle.parent
<!-- END KEY -->
<!-- BEGIN DATA -->
此包的父包。当此包不包含特定资源时，由 {@link #getObject getObject} 搜索父包。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.ResourceBundle()
<!-- END KEY -->
<!-- BEGIN DATA -->
唯一的构造方法（由子类构造方法调用，通常是隐式的）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.util.ResourceBundle.getString(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此资源包或它的某个父包中获取给定键的字符串。调用此方法等同于调用
 <blockquote>
 <code>(String) {@link #getObject(java.lang.String) getObject}(key)</code>。
 </blockquote>

@param key 所需字符串的键
@exception NullPointerException 如果 <code>key</code> 为 <code>null</code>
@exception MissingResourceException 如果未找到给定键的对象
@exception ClassCastException 如果为给定键找到的对象是不是字符串
@return  给定键的字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String[] java.util.ResourceBundle.getStringArray(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此资源包或它的某个父包中获取给定键的字符串数组。调用此方法等同于调用
 <blockquote>
 <code>(String[]) {@link #getObject(java.lang.String) getObject}(key)</code>。
 </blockquote>

@param key 所需字符串数组的键
@exception NullPointerException 如果 <code>key</code> 为 <code>null</code>
@exception MissingResourceException 如果未找到给定键的对象
@exception ClassCastException 如果为给定键找到的对象不是字符串数组
@return 给定键的字符串数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.Object java.util.ResourceBundle.getObject(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此资源包或它的某个父包中获取给定键的对象。此方法首先尝试使用 {@link #handleGetObject(java.lang.String) handleGetObject} 从此资源包中获取对象。如果不成功，并且父资源包不为 null，则调用父包的 <code>getObject</code> 方法。如果仍不成功，则抛出 MissingResourceException。

@param key 所需对象的键
@exception NullPointerException 如果 <code>key</code> 为 <code>null</code>
@exception MissingResourceException 如果未找到给定键的对象
@return 给定键的对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Locale java.util.ResourceBundle.getLocale()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此资源包的语言环境。调用 getBundle() 后可使用此方法来确定返回的资源包是真正对应于所请求的语言环境，还是只是一个回退。

@return 此资源包的语言环境

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.util.ResourceBundle.setParent(ResourceBundle parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此包的父包。当此包不包含特定的资源时，通过 {@link #getObject getObject} 来搜索父包。

@param parent 此包的父包。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(String baseName)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的基本名称、默认的语言环境和调用者的类加载器获取资源包。调用此方法等同于调用
<blockquote>
<code>getBundle(baseName, Locale.getDefault(), this.getClass().getClassLoader())</code>，
</blockquote>
不同之处在于要使用 <code>ResourceBundle</code> 的安全特权来运行 <code>getClassLoader()</code>。有关搜索和实例化策略的信息，请参阅 {@link #getBundle(String, Locale, ClassLoader) getBundle}。

@param baseName 资源包的基本名称，是一个完全限定类名
@exception java.lang.NullPointerException 如果 <code>baseName</code> 为 <code>null</code>
@exception MissingResourceException 如果未找到指定基本名称的资源包
@return 具有给定基本名称和默认语言环境的资源包

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(String baseName, ResourceBundle.Control control)
<!-- END KEY -->
<!-- BEGIN DATA -->
 使用指定基本名称、默认语言环境和指定控件返回一个资源包。调用此方法等同于调用
 <pre>
 getBundle(baseName, Locale.getDefault(),
           this.getClass().getClassLoader(), control)，
 </pre>
 不同之处在于要使用 <code>ResourceBundle</code> 的安全特权来运行 <code>getClassLoader()</code>。有关带 <code>ResourceBundle.Control</code> 的资源包加载进程的完整描述，请参阅 {@link #getBundle(String, Locale, ClassLoader, Control) getBundle}。

@param baseName 资源包的基本名称，一个完全限定类名
@param control 为资源包加载进程提供信息的控件
@return 用于给定基本名称和默认语言环境的资源包
@exception NullPointerException 如果 <code>baseName</code> 或 <code>control</code> 为 <code>null</code> 
@exception MissingResourceException 如果没有找到用于指定基本名称的资源包
@exception IllegalArgumentException 如果给定 <code>control</code> 没有正确执行（例如，<code>control.getCandidateLocales</code> 返回 null。）注意，<code>control</code> 的验证是根据需要执行的。
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(String baseName, Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的基本名称、语言环境和调用者的类加载器获取资源包。调用此方法等同于调用
<blockquote>
<code>getBundle(baseName, locale, this.getClass().getClassLoader())</code>，
</blockquote>
不同之处在于要使用 <code>ResourceBundle</code> 的安全特权来运行 <code>getClassLoader()</code>。有关搜索和实例化策略的信息，请参阅 {@link #getBundle(String, Locale, ClassLoader) getBundle}。

@param baseName 资源包的基本名称，是一个完全限定类名
@param locale 资源包所需的语言环境
@exception NullPointerException 如果 <code>baseName</code> 或 <code>locale</code> 为 <code>null</code>
@exception MissingResourceException 如果未找到指定基本名称的资源包
@return 具有给定基本名称和语言环境的资源包

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(String baseName, Locale targetLocale, ResourceBundle.Control control)
<!-- END KEY -->
<!-- BEGIN DATA -->
 使用指定基本名称、目标语言环境和控件、调用者的类加载器返回一个资源包。调用此方法等同于调用
 <pre>
 getBundle(baseName, targetLocale, this.getClass().getClassLoader(),
           control)，
 </pre>
 不同之处在于要使用 <code>ResourceBundle</code> 的安全特权来运行 <code>getClassLoader()</code>。有关带 <code>ResourceBundle.Control</code> 的资源包加载进程的完整描述，请参阅 {@link #getBundle(String, Locale, ClassLoader, Control) getBundle}。

@param baseName 资源包的基本名称，一个完全限定类名
@param targetLocale 资源包所需的语言环境
@param control 为资源包加载进程提供信息的控件
@return 用于给定基本名称和 <code>locales</code> 中某个 <code>Locale</code> 的资源包
@exception NullPointerException 如果 <code>baseName</code>、<code>locales</code> 或 <code>control</code> 为 <code>null</code>
@exception MissingResourceException 如果在任何 <code>locales</code> 中都无法找到用于指定基本名称的资源包。
@exception IllegalArgumentException 如果给定 <code>control</code> 没有正确执行（例如，<code>control.getCandidateLocales</code> 返回 null。）注意，<code>control</code> 的验证是根据需要执行的。
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.ResourceBundle java.util.ResourceBundle.getBundle(String baseName, Locale locale, ClassLoader loader)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的基本名称、语言环境和类加载器获取资源包。

<p><a name="default_behavior"/>
从概念上讲，<code>getBundle</code> 使用下列策略来搜索并实例化资源包：
<p>
<code>getBundle</code> 使用基本名称、指定的语言环境和默认语言环境（从 {@link java.util.Locale#getDefault() Locale.getDefault} 获得）来生成<a name="candidates"><em>候选包名称</em> 序列。如果指定语言环境的语言、国家/地区和变量都是空字符串，则基本名称就是唯一的候选包名称。否则，从指定语言环境（language1、country1 和 variant1）和默认语言环境（language2、country2 和 variant2）的属性值生成下列序列：
 <ul>
 <li> baseName + "_" + language1 + "_" + country1 + "_" + variant1
 <li> baseName + "_" + language1 + "_" + country1
 <li> baseName + "_" + language1
 <li> baseName + "_" + language2 + "_" + country2 + "_" + variant2
 <li> baseName + "_" + language2 + "_" + country2
 <li> baseName + "_" + language2
 <li> baseName
 </ul>
 <p>
省略最后部分为空字符串的候选包名称。例如，如果 country1 是一个空字符串，则省略第二个候选包名称。

<p>
然后 <code>getBundle</code> 在候选包名称上进行迭代，找到第一个可<em>实例化</em> 为实际资源包的候选包名称。对于每个候选包名称，它都试图创建资源包：
<ul>
<li>
首先，它试图使用候选包名称加载一个类。如果可以找到这样的类并使用指定的类加载器加载，而且此类的分配与 ResourceBundle 兼容，可通过 ResourceBundle 访问，并可以被实例化，那么 <code>getBundle</code> 将创建此类的一个新实例，并使用它作为<em>结果资源包</em>。
 <li>
否则，<code>getBundle</code> 尝试搜索属性资源文件。它从候选包名称生成一个路径名，用 "/" 替换所有的 "." 字符，并添加字符串 ".properties"。然后尝试用 {@link java.lang.ClassLoader#getResource(java.lang.String) ClassLoader.getResource} 找到一个具有此名称的“资源”（注意，<code>getResource</code> 获得的“资源”与资源包中的内容没有任何关系，它只是一个数据的容器，如文件）。如果它找到一个“资源”，则会尝试用其内容创建一个新的 {@link PropertyResourceBundle}。如果成功，那么此实例就成为<em>结果资源包</em>。
 </ul>

 <p>
如果未找到结果资源包，则抛出 <code>MissingResourceException</code>。

 <p><a name="parent_chain"/>
找到了结果资源包后，它的<em>父链</em> 将被实例化。<code>getBundle</code> 在可以获得的候选包名称中进行迭代，获得名称的方法是从结果资源包的包名称中连续移除变量、国家/地区和语言（每次都用前缀 "_"）。如上所述，省略最后部分为空字符串的候选包名称。对于每个候选包名称，都尝试实例化一个资源包，如上所述。只要能够成功，就用新的资源包调用先前已实例化资源包的 {@link #setParent(java.util.ResourceBundle) setParent} 方法，除非先前已实例化的资源包已经有非 null 的父包。

 <p>
<code>getBundle</code> 可以缓存已实例化的资源包，并且可以多次返回相同的资源包实例。

 <p><a name="default_behavior_example"/>
<code>baseName</code> 参数应该是一个完全限定类名。但是，为了与早期的版本兼容，Sun 的 Java SE Runtime Environment 并不对此进行检查，所以可通过指定路径名（使用 "/"）而不是完全限定类名（使用 "."）来访问 <code>PropertyResourceBundle</code>。

 <p>
<strong>示例：</strong><br>提供了下面的类和属性文件：
<pre>
     MyResources.class
     MyResources.properties
     MyResources_fr.properties
     MyResources_fr_CH.class
     MyResources_fr_CH.properties
     MyResources_en.properties
     MyResources_es_ES.class
 </pre>所有文件的内容都是有效的（也就是说 ".class" 文件是 ResourceBundle 的公共非抽象子类，".properties" 文件的语法正确）。默认的语言环境是 <code>Locale("en", "GB")</code>。
 <p>
使用给出的语言环境参数值调用 <code>getBundle</code> 将实例化取自以下源的资源包：
 <ul>
 <li>Locale("fr", "CH")：结果 MyResources_fr_CH.class、父 MyResources_fr.properties、父 MyResources.class
 <li>Locale("fr", "FR")：结果 MyResources_fr.properties、父 MyResources.class
 <li>Locale("de", "DE")：结果 MyResources_en.properties、父 MyResources.class
 <li>Locale("en", "US")：结果 MyResources_en.properties、父 MyResources.class
 <li>Locale("es", "ES")：结果 MyResources_es_ES.class、父 MyResources.class
 </ul>
<p>不使用 MyResources_fr_CH.properties 文件，因为它被 MyResources_fr_CH.class 隐藏了。类似地，MyResources.properties 也被 MyResources.class 隐藏了。

 

@param baseName 资源包的基本名称，是一个完全限定类名
@param locale 资源包所需的语言环境
@param loader 加载资源包的类加载器
@return 用于给定基本名称和语言环境的资源包
@exception java.lang.NullPointerException 如果 <code>baseName</code>、<code>locale</code> 或 <code>loader</code> 为 <code>null</code>
@exception MissingResourceException 如果未找到指定基本名称的资源包
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.ResourceBundle java.util.ResourceBundle.getBundle(String baseName, Locale targetLocale, ClassLoader loader, ResourceBundle.Control control)
<!-- END KEY -->
<!-- BEGIN DATA -->
 使用指定基本名称、目标语言环境、类加载器和控件返回资源包。与 {@linkplain #getBundle(String, Locale, ClassLoader) 不带 <code>control</code> 参数的 <code>getBundle</code> 工厂方法}不同，给定 <code>control</code> 指定查找和实例化资源包的方式。从概念上说，具有给定 <code>control</code> 的包加载进程是按以下步骤执行的。

 <p>
 <ol>
 <li>此工厂方法在缓存中为指定 <code>baseName</code>、<code>targetLocale</code> 和 <code>loader</code> 查找资源包。如果在缓存中找到所请求的资源包实例，并且该实例及其所有父实例的生存时间都已经到期，则向调用者返回该实例。否则，此工厂方法继续进行以下加载进程。</li>

 <li>调用 {@link ResourceBundle.Control#getFormats(String) control.getFormats} 方法获取生成包名称或资源名称的资源包格式。字符串 <code>"java.class"</code> 和 <code>"java.properties"</code> 分别指定基于类和基于{@linkplain PropertyResourceBundle 属性}的资源包。其他以 <code>"java."</code> 开头的字符串被保留，供以后扩展使用，不必将它们用于应用程序定义的格式。其他字符串指定应用程序定义的格式。</li>

 <li>可以调用带有目标语言环境的 {@link ResourceBundle.Control#getCandidateLocales(String, Locale) control.getCandidateLocales} 方法获取用于已搜索到的资源包的<em>候选 <code>Locale</code></em> 列表。</li>

 <li>可以调用 {@link ResourceBundle.Control#newBundle(String, Locale, String, ClassLoader, boolean) control.newBundle} 方法实例化针对基本包名称、候选语言环境和某种格式的 <code>ResourceBundle</code>。（参考下方关于缓存查找的注释。）此步骤在所有候选语言环境和格式上进行迭代，直到 <code>newBundle</code> 方法返回一个 <code>ResourceBundle</code> 实例，或者该迭代已经用完了所有的组合。例如，如果候选语言环境是 <code>Locale("de", "DE")</code>、<code>Locale("de")</code> 和 <code>Locale("")</code>，而格式是 <code>"java.class"</code> 和 <code>"java.properties"</code>，那么以下是用来调用 <code>control.newBundle</code> 的语言环境和格式组合的序列。

 <table style="width: 50%; text-align: left; margin-left: 40px;"
  border="0" cellpadding="2" cellspacing="2">
 <tbody><code>
 <tr>
 <td
 style="vertical-align: top; text-align: left; font-weight: bold; width: 50%;">语言环境<br>
 </td>
 <td
 style="vertical-align: top; text-align: left; font-weight: bold; width: 50%;">格式<br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top; width: 50%;">Locale("de", "DE")<br>
 </td>
 <td style="vertical-align: top; width: 50%;">java.class<br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top; width: 50%;">Locale("de", "DE")</td>
 <td style="vertical-align: top; width: 50%;">java.properties<br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top; width: 50%;">Locale("de")</td>
 <td style="vertical-align: top; width: 50%;">java.class</td>
 </tr>
 <tr>
 <td style="vertical-align: top; width: 50%;">Locale("de")</td>
 <td style="vertical-align: top; width: 50%;">java.properties</td>
 </tr>
 <tr>
 <td style="vertical-align: top; width: 50%;">Locale("")<br>
 </td>
 <td style="vertical-align: top; width: 50%;">java.class</td>
 </tr>
 <tr>
 <td style="vertical-align: top; width: 50%;">Locale("")</td>
 <td style="vertical-align: top; width: 50%;">java.properties</td>
 </tr>
 </code></tbody>
 </table>
 </li>

 <li>如果前面的步骤未找到资源包，则前进到步骤 6。如果已经找到用作基本包的包（<code>Locale("")</code> 的包），以及只包含 <code>Locale("")</code> 的候选语言环境列表，则向调用者返回该包。如果已经找到作为基本包的包，但候选语言环境列表包含 Locale("") 之外的语言环境，则暂时搁置该包并前进到步骤 6。如果找到一个不是基本包的包，则前进到步骤 7。</li>

 <li>可调用 {@link ResourceBundle.Control#getFallbackLocale(String, Locale) control.getFallbackLocale} 方法获取一个回退语言环境（当前目标语言环境的替代），以尝试进一步寻找资源包。如果该方法返回一个非 null 语言环境，那么该语言环境将变成下一个目标语言环境，并且加载进程将从步骤 3 开始。否则，如果找到一个基本包并在前面的步骤 5 中暂时被搁置，那么现在要将该语言环境返回给调用者。否则抛出 MissingResourceException。</li>

 <li>此时，我们已经找到一个不是基本包的包。如果此包在其实例化期间设置其父链，则将此包返回给调用者。否则，根据从中找到此包的候选语言环境列表，将此包的<a
 href="./ResourceBundle.html#parent_chain">父链</a>实例化。最后将该包返回给调用者。</li>


 </ol>

 <p>在进行上述资源包加载进程期间，此工厂方法将在调用 {@link Control#newBundle(String, Locale, String, ClassLoader, boolean) control.newBundle} 方法之前查找缓存。如果在该缓存中找到的资源包的生存时间已到期，则该工厂方法将调用 {@link ResourceBundle.Control#needsReload(String, Locale, String, ClassLoader, ResourceBundle, long) control.needsReload} 方法确定是否需要重载资源包。如果需要重载，则该工厂方法将调用 <code>control.newBundle</code> 重载资源包。如果 <code>control.newBundle</code> 返回 <code>null</code>，则该工厂方法将在缓存中放一个伪资源包，以此作为不存在资源包的标记，从而避免后续请求所带来的查找开销。这类伪资源包同样受到 <code>control</code> 所指定的到期时间控制。

 <p>所有已加载的资源包都是在默认情况下被缓存的。有关细节请参阅 {@link Control#getTimeToLive(String,Locale) control.getTimeToLive}。


 <p>以下是带有默认 <code>ResourceBundle.Control</code> 实现的包加载进程的示例。
 
 <p>条件：
 <ul>
 <li>基本包的名称：<code>foo.bar.Messages</code>
 <li>所请求的 <code>Locale</code>：{@link Locale#ITALY}</li>
 <li>默认 <code>Locale</code>：{@link Locale#FRENCH}</li>
 <li>可用的资源包：<code>foo/bar/Messages_fr.properties</code> 和 <code>foo/bar/Messages.properties</code></li>

 </ul>

 <p>首先，<code>getBundle</code> 试图按以下顺序加载资源包。

 <ul>
 <li>类 <code>foo.bar.Messages_it_IT</code>
 <li>文件 <code>foo/bar/Messages_it_IT.properties</code>
 <li>类 <code>foo.bar.Messages_it</code></li>
 <li>文件 <code>foo/bar/Messages_it.properties</code></li>
 <li>类 <code>foo.bar.Messages</code></li>
 <li>文件 <code>foo/bar/Messages.properties</code></li>
 </ul>

 <p>此时，<code>getBundle</code> 找到一个 <code>foo/bar/Messages.properties</code>，该包被搁置，因为它不是一个基本包。<code>getBundle</code> 调用返回 <code>Locale.FRENCH</code> 的 {@link Control#getFallbackLocale(String, Locale) control.getFallbackLocale("foo.bar.Messages", Locale.ITALY)}。接着，<code>getBundle</code> 试图按以下顺序加载一个包。

 <ul>
 <li>类 <code>foo.bar.Messages_fr</code></li>
 <li>文件 <code>foo/bar/Messages_fr.properties</code></li>
 <li>类 <code>foo.bar.Messages</code></li>
 <li>文件 <code>foo/bar/Messages.properties</code></li>
 </ul>

 <p><code>getBundle</code> 查找 <code>foo/bar/Messages_fr.properties</code> 并创建一个 <code>ResourceBundle</code> 实例。然后，<code>getBundle</code> 根据候选语言环境列表设置其父链。在该列表中只有 <code>foo/bar/Messages.properties</code>，并且 <code>getBundle</code> 创建一个 <code>ResourceBundle</code> 实例，该实例成为用于 <code>foo/bar/Messages_fr.properties</code> 的实例的父实例。

@param baseName 资源包的基本名称，一个完全限定类名
@param targetLocale 资源包所需的语言环境
@param loader 加载资源包的类加载器
@param control 为资源包加载进程提供信息的控件
@return 用于给定基本名称和语言环境的资源包
@exception NullPointerException 如果 <code>baseName</code>、<code>targetLocale</code>、<code>loader</code> 或 <code>control</code> 为 <code>null</code>
@exception MissingResourceException 如果没有找到用于指定基本名称的资源包
@exception IllegalArgumentException 如果给定 <code>control</code> 没有正确执行（例如，<code>control.getCandidateLocales</code> 返回 null。）注意，<code>control</code> 的验证是根据需要执行的。
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final void java.util.ResourceBundle.clearCache()
<!-- END KEY -->
<!-- BEGIN DATA -->
 从已经使用调用者的类加载器加载的缓存中移除所有资源包。

 @since 1.6
 @see ResourceBundle.Control#getTimeToLive(String,Locale)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final void java.util.ResourceBundle.clearCache(ClassLoader loader)
<!-- END KEY -->
<!-- BEGIN DATA -->
 从已经使用给定类加载器加载的缓存中移除所有资源包。

@param loader 类加载器
@exception NullPointerException 如果 <code>loader</code> 为 null
@since 1.6
@see ResourceBundle.Control#getTimeToLive(String,Locale)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract java.lang.Object java.util.ResourceBundle.handleGetObject(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 从此资源包中获取给定键的对象。如果此资源包未包含给定键的对象，则返回 null。

 @param key 所需对象的键
 @exception NullPointerException 如果 <code>key</code> 为 <code>null</code>
 @return 给定键的对象，或者返回 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Enumeration<java.lang.String> java.util.ResourceBundle.getKeys()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回键的枚举。

 @return 此 <code>ResourceBundle</code> 及其父包中所包含键的 <code>Enumeration</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.ResourceBundle.containsKey(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 确定给定 <code>key</code> 是否包含在此 <code>ResourceBundle</code> 及其父包中。

@param key
        资源 <code>key</code>
@return 如果给定 <code>key</code> 包含在此 <code>ResourceBundle</code> 或其父包中，则返回 <code>true</code>；否则返回 <code>false</code>。
@exception NullPointerException
         如果 <code>key</code> 为 <code>null</code>
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.lang.String> java.util.ResourceBundle.keySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回此 <code>ResourceBundle</code> 及其父包中包含的所有键的 <code>Set</code>。

 @return 此 <code>Set</code> 及其父包中包含的所有键的 <code>Set</code>。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Set<java.lang.String> java.util.ResourceBundle.handleKeySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回<em>只</em> 包含在此 <code>ResourceBundle</code> 中的键的 <code>Set</code>。

 <p>默认实现返回 {@link #getKeys() getKeys} 方法返回的键的 <code>Set</code>，那些 {@link #handleGetObject(String) handleGetObject} 方法返回 <code>null</code> 的键除外。创建 <code>Set</code> 后，该值就被保存在此 <code>ResourceBundle</code> 中，以避免在下次调用中产生相同的 <code>Set</code>。可在子类实现中重写此方法，以便更快地进行处理。

 @return 只包含于此 <code>ResourceBundle</code> 中的键的 <code>Set</code>
 @since 1.6



<!-- END DATA -->
