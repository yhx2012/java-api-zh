<!-- BEGIN KEY -->
public class java.awt.TextComponent extends java.awt.Component implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>TextComponent</code> 类是所有允许编辑文本的组件的超类。
<p>
文本组件具体化文本字符串。<code>TextComponent</code> 类定义了一组判断此文本是否可编辑的方法。如果组件是可编辑的，则该类还定义了另一组支持文件插入符的方法。
<p>
此外，该类定义了用于维护文本当前<em>选择</em> 的方法。文本选择是组件文本的子字符串，是编辑操作的目标。它也被称为<em>选定文本</em>。

@version	1.83, 05/05/04
@author 	Sami Shaio
@author 	Arthur van Hoff
@since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String java.awt.TextComponent.text
<!-- END KEY -->
<!-- BEGIN DATA -->
文本的值。<code>null</code> 值与 &quot;&quot; 相同。

@serial
@see #setText(String)
@see #getText()

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean java.awt.TextComponent.editable
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此 <code>TextComponent</code> 是否可编辑的布尔值。如果文本组件是可编辑的，则该值将为 <code>true</code>，否则将为 <code>false</code>。

@serial
@see #isEditable()

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.TextComponent.selectionStart
<!-- END KEY -->
<!-- BEGIN DATA -->
选择指的是选定的文本，<code>selectionStart</code> 是选定文本的开始位置。

@serial
@see #getSelectionStart()
@see #setSelectionStart(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.TextComponent.selectionEnd
<!-- END KEY -->
<!-- BEGIN DATA -->
选择指的是选定的文本，<code>selectionEnd</code> 是选定文本的结束位置。

@serial
@see #getSelectionEnd()
@see #setSelectionEnd(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.TextComponent.textComponentSerializedDataVersion
<!-- END KEY -->
<!-- BEGIN DATA -->
textComponent 的 SerializedDataVersion。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.TextComponent.enableInputMethods(boolean enable)
<!-- END KEY -->
<!-- BEGIN DATA -->
启用或禁用此文本组件的输入法支持。如果启用输入法支持并且文本组件也能处理按键事件，则将传入事件提供给当前输入法；如果输入法没有使用它们，则它们只能由组件处理或被指派给它们的侦听器。默认情况下，启用还是禁用，以及如何启用或禁用此文本组建的输入法支持与实现有关。

 @param enable 为 true 表示启用；为 false 表示禁用
 @see #processKeyEvent
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.TextComponent.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
通过将此 Component 连接到一个本机屏幕资源，使其成为可显示的。此方法由工具包内部调用，不应直接由程序调用。
@see       java.awt.TextComponent#removeNotify

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.TextComponent.removeNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除 <code>TextComponent</code> 的同位体。该同位体允许我们修改 <code>TextComponent</code> 的外观，而不更改其功能。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TextComponent.setText(String t)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此文本组件显示的文本设置为指定文本。
@param       t   新文本；如果此参数为 <code>null</code>，则将文本设置为空字符串 &quot;&quot;
@see         java.awt.TextComponent#getText  

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String java.awt.TextComponent.getText()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此文本组件表示的文本。默认情况下，此文本是一个空字符串。

@return 此 <code>TextComponent</code> 的值
@see     java.awt.TextComponent#setText

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String java.awt.TextComponent.getSelectedText()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此文本组件所表示文本的选定文本。
@return      此文本组件的选定文本
@see         java.awt.TextComponent#select

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.TextComponent.isEditable()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此文本组件是否可编辑。
@return 如果此文本组件是可编辑的，则返回 <code>true</code>；否则返回 <code>false</code>。
@see        java.awt.TextComponent#setEditable
@since      JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TextComponent.setEditable(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置判断此文本组件是否可编辑的标志。
<p>
如果将该标志设置为 <code>true</code>，则此文本组件变成用户可编辑的。如果将该标志设置为 <code>false</code>，则用户无法更改此文本组件的文本。默认情况下，不可编辑的文本组件的背景色为 SystemColor.control。通过调用 setBackground 可以重写此默认值。

@param     b  指示此文本组件是否是用户可编辑的标志。
@see       java.awt.TextComponent#isEditable
@since     JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color java.awt.TextComponent.getBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得此文本组件的背景色。默认情况下，不可编辑的文本组件的背景色为 SystemColor.control。通过调用 setBackground 可以重写此默认值。

@return 此文本组件的背景色。如果此文本组件没有背景色，则返回其父组件的背景色。
@see #setBackground(Color)
@since JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.TextComponent.setBackground(Color c)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此文本组件的背景色。

@param c 成为此文本组件颜色的颜色。如果此参数为 null，则此文本组件将继承其父组件的背景色。
@see #getBackground()
@since JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.awt.TextComponent.getSelectionStart()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此文本组件中选定文本的开始位置。
@return      选定文本的开始位置
@see         java.awt.TextComponent#setSelectionStart
@see         java.awt.TextComponent#getSelectionEnd

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TextComponent.setSelectionStart(int selectionStart)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此文本组件的选定开始位置设置为指定位置。新的起始点限制在当前选定结束位置处或之前。并且不能将它设置为小于零，即小于组件文本的开始处。如果调用者提供的 <code>selectionStart</code> 值超出限度，则该方法暗中执行这些限制，操作不会失败。
@param       selectionStart 选定文本的开始位置
@see         java.awt.TextComponent#getSelectionStart
@see         java.awt.TextComponent#setSelectionEnd
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.awt.TextComponent.getSelectionEnd()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此文本组件中选定文本的结束位置。
@return      选定文本的结束位置
@see         java.awt.TextComponent#setSelectionEnd
@see         java.awt.TextComponent#getSelectionStart

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TextComponent.setSelectionEnd(int selectionEnd)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此文本组件的选定结束位置设置为指定位置。新的结束点限制在当前选定开始位置处或之后。并且不能将它设置为超出组件文本末端。如果调用者提供的 <code>selectionEnd</code> 值超出限度，则该方法暗中执行这些限制，操作不会失败。
@param       selectionEnd   选定文本的结束位置
@see         java.awt.TextComponent#getSelectionEnd
@see         java.awt.TextComponent#setSelectionStart
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TextComponent.select(int selectionStart, int selectionEnd)
<!-- END KEY -->
<!-- BEGIN DATA -->
选择指定开始位置和结束位置之间的文本。
<p>
此方法设置选定文本的开始位置和结束位置，并强行限制开始位置必须大于等于零。结束位置必须大于等于开始位置，并小于等于文本组件的文本长度。字符位置的索引从零开始。选择文本的长度是 <code>endPosition</code> - <code>startPosition</code>，因此没有选定 <code>endPosition</code> 处的字符。如果选定文本的开始位置和结束位置是相等的，则取消对所有文本的选择。
<p> 
如果调用者提供不一致或超出限度的值，则该方法暗中执行这些限制，操作不会失败。具体来说，如果开始位置或结束位置大于文本长度，则将它重置为等于文本长度。如果开始位置小于零，则将它重置为零，如果结束位置小于开始位置，则将它重置为开始位置。
 
@param        selectionStart 要选定的首字符（<code>char</code> 值）从零开始的索引
@param        selectionEnd 要选定的文本从零开始的结束位置；<code>selectionEnd</code> 处的字符（<code>char</code> 值）未被选定
@see          java.awt.TextComponent#setSelectionStart
@see          java.awt.TextComponent#setSelectionEnd
@see          java.awt.TextComponent#selectAll

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TextComponent.selectAll()
<!-- END KEY -->
<!-- BEGIN DATA -->
选择此文本组件中的所有文本。
@see        java.awt.TextComponent#select

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TextComponent.setCaretPosition(int position)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置文本插入符的位置。插入符的位置被限制在 0 和文本最后一个字符（包括）之间。如果传入值大于此范围，则将该值设置为最后一个字符（如果 <code>TextComponent</code> 不包含文本，则将该值设置为 0），并且不返回任何错误。如果传入值小于 0，则抛出 <code>IllegalArgumentException</code>。
 
@param        position 文本插入符的位置
@exception    IllegalArgumentException 如果 <code>position</code> 小于零
@since        JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.awt.TextComponent.getCaretPosition()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回文本插入符的位置。插入符的位置被限制在 0 和文本最后一个字符（包括）之间。如果没有设置文本或插入符，则默认插入符的位置为 0。

@return       文本插入符的位置
@see #setCaretPosition(int)
@since        JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TextComponent.addTextListener(TextListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定的文本事件侦听器，以接收此文本组件发出的文本事件。如果 <code>l</code> 为 <code>null</code>，则不抛出任何异常，也不执行任何操作。
 <p>有关 AWT 线程模式的详细信息，请参考 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
 >AWT Threading Issues</a>。

@param l 文本事件侦听器
@see           	#removeTextListener
@see           	#getTextListeners
@see           	java.awt.event.TextListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TextComponent.removeTextListener(TextListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定的文本事件侦听器，不再接收此文本组件发出的文本事件。如果 <code>l</code> 为 <code>null</code>，则不抛出任何异常，也不执行任何操作。
<p>有关 AWT 线程模式的详细信息，请参考 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
 >AWT Threading Issues</a>。

@param         	l     文本侦听器
@see           	#addTextListener
@see           	#getTextListeners
@see           	java.awt.event.TextListener
@since         	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.event.TextListener[] java.awt.TextComponent.getTextListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在此文本组件上所有已注册文本侦听器的数组。

@return 此文本组件的所有 <code>TextListener</code>；如果当前没有已注册的文本侦听器，则返回一个空数组

@see #addTextListener
@see #removeTextListener
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.awt.TextComponent.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前已在此 <code>TextComponent</code> 上注册为 <code><em>Foo</em>Listener</code> 的所有对象的数组。<code><em>Foo</em>Listener</code> 是用 <code>add<em>Foo</em>Listener</code> 方法注册的。

<p>
可以使用 class 字面值来指定 <code>listenerType</code> 参数，如 <code><em>Foo</em>Listener.class</code>。例如，可以使用以下代码来查询 <code>TextComponent</code> <code>t</code> 的文本侦听器：

<pre>TextListener[] tls = (TextListener[])(t.getListeners(TextListener.class));</pre>

如果不存在这样的侦听器，则此方法返回一个空数组。

@param listenerType 请求的侦听器类型；此参数应该指定一个从 <code>java.util.EventListener</code> 继承的接口
@return 在此文本组件上作为 <code><em>Foo</em>Listener</code> 注册的所有对象的数组；如果尚未添加这样的侦听器，则返回一个空数组
@exception ClassCastException 如果 <code>listenerType</code> 未指定一个实现 <code>java.util.EventListener</code> 的类或接口

@see #getTextListeners
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.TextComponent.processEvent(AWTEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理此文本组件上发生的事件。如果事件是 <code>TextEvent</code>，那么它将调用 <code>processTextEvent</code> 方法，否则它将调用其超类的 <code>processEvent</code>。
<p>注意，如果事件参数为 <code>null</code>，则行为是不明确的，并可能导致异常。

@param e 事件

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.TextComponent.processTextEvent(TextEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理发生在此文本组件上的文本事件：将这些事件指派给所有已注册的 <code>TextListener</code> 对象。
<p>
注：如果没有对此组件启用文本事件，则不调用此方法。这发生在出现以下情况之一时：
 <ul>
 <li>通过 <code>addTextListener</code> 注册一个 <code>TextListener</code> 对象。
 <li>通过 <code>enableEvents</code> 启用文本事件
 </ul>
<p>注意，如果事件参数为 <code>null</code>，则行为是不明确的，并可能导致异常。

@param e 文本事件
@see Component#enableEvents

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.awt.TextComponent.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此 <code>TextComponent</code> 状态的字符串。此方法仅用于调试目的，对于各个实现，返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。

@return     此文本组件的参数字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.TextComponent.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 TextComponent 关联的 AccessibleContext。对于文本组件，AccessibleContext 采用 AccessibleAWTTextComponent 的形式。如有必要，可创建一个新的 AccessibleAWTTextComponent 实例。

@return 一个 AccessibleAWTTextComponent，它充当此 TextComponent 的 AccessibleContext

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.TextComponent.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取 ObjectInputStream，如果它不为 null，则添加一个侦听器，以接收 TextComponent 触发的文本事件。未识别的密钥或值将被忽略。

@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless()</code> 返回 <code>true</code>
@see #removeTextListener
@see #addTextListener
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.TextComponent.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将默认的可序列化字段写入流中。写入可序列化 TextListener 的一个列表作为可选数据。检测不可序列化的 TextListener，并且不尝试对其进行序列化。

@serialData 以 null 终止的 0 或多对序列。由 String 和 Object 组成的一对序列。String 指示对象类型，它是以下之一： textListenerK 指示 TextListener 对象。

@see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)
@see java.awt.Component#textListenerK

<!-- END DATA -->
