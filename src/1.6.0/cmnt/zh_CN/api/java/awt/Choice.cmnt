<!-- BEGIN KEY -->
public class java.awt.Choice extends java.awt.Component implements java.awt.ItemSelectable, javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Choice</code> 类表示一个弹出式选择菜单。当前的选择显示为菜单的标题。
 <p>
下列代码示例产生了一个弹出式菜单：
<p>
<hr><blockquote><pre>
Choice ColorChooser = new Choice();
ColorChooser.add(&quot;Green&quot;);
ColorChooser.add(&quot;Red&quot;);
ColorChooser.add(&quot;Blue&quot;);
</pre></blockquote><hr>
<p>
在将此选择菜单添加到一个面板中后，它显示为以下正常状态：
<p>
<img src="doc-files/Choice-1.gif" alt="以下文本描述了该图形"
 ALIGN=center HSPACE=10 VSPACE=7>
<p>
在这个图像中，<code>&quot;Green&quot;</code> 为当前选择。在对象上按下鼠标按键，这将显示一个菜单，菜单的当前选择被高亮显示。
<p>
一些本机平台不支持任意调整 <code>Choice</code> 组件的大小，<code>setSize()/getSize()</code> 的行为受到这类限制的约束。本机 GUI <code>Choice</code> 组件的大小常受到一些属性的限制，比如字体大小和 <code>Choice</code> 中包含的项的长度。
<p>
@version	1.93 07/11/06
@author 	Sami Shaio
@author 	Arthur van Hoff
@since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.util.Vector java.awt.Choice.pItems
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Choice</code> 的项。这个项可以是一个 <code>null</code> 值。
@serial
@see #add(String)
@see #addItem(String)
@see #getItem(int)
@see #getItemCount()
@see #insert(String, int)
@see #remove(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.Choice.selectedIndex
<!-- END KEY -->
<!-- BEGIN DATA -->
此 <code>Choice</code> 的当前选择的索引，如果没有选定任何内容，则为 -1。
@serial
@see #getSelectedItem()
@see #select(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Choice() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的选择菜单。最初，此菜单中没有任何项。
<p>
默认情况下，在用户通过调用 <code>select</code> 方法之一进行不同的选择之前，给选择菜单添加的第一个项将成为选定项。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true
@see       java.awt.GraphicsEnvironment#isHeadless
@see       #select(int)
@see       #select(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Choice.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 <code>Choice</code> 的同位体。此同位体允许更改 <code>Choice</code> 的外观，而不更改其功能。
@see     java.awt.Toolkit#createChoice(java.awt.Choice)
@see     java.awt.Component#getToolkit()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Choice.getItemCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Choice</code> 菜单中项的数量。
@return 此 <code>Choice</code> 菜单中项的数量
@see     #getItem
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Choice.countItems()
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，由 <code>getItemCount()</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.Choice.getItem(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>Choice</code> 菜单中指定索引上的字符串。
@param      index 起始索引
@see        #getItemCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Choice.add(String item)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个项添加到此 <code>Choice</code> 菜单中。
@param      item  要添加的项
@exception  NullPointerException  如果这个项的值为 <code>null</code>
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Choice.addItem(String item)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果对于 Java 2 platform v1.1 已过时，请使用 <code>add</code> 方法替换。
 <p>
将一个项添加到此 <code>Choice</code> 菜单中。
@param      item  要添加的菜单项
@exception  NullPointerException  如果这个项的值等于 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Choice.insert(String item, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
将菜单项插入此选择的指定位置上。如果某个索引上存在的项大于等于 <code>index</code>，则将它上移一位，以容纳新的项。如果 <code>index</code> 大于等于此选择中项的数目，则将 <code>item</code> 添加到此选择的结尾处。
<p>
如果此项是第一个添加到该选择中的项，则这个项将成为选定项。否则，如果选定项是上移项中的一个，则该选择中的第一个项将成为选定项。如果选定项不在这些上移项中，则它仍然是选定项。
@param item 将插入的非 <code>null</code> 项
@param index 应该插入项的位置
@exception IllegalArgumentException 如果索引小于 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Choice.remove(String item)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除 <code>Choice</code> 菜单中第一个出现的 <code>item</code>。如果正被移除的项是目前选定的项，则该选择中的第一个项将成为选定项。否则，当前选定项仍然是选定项（并且选定的索引被相应地更新）。
@param      item  将从此 <code>Choice</code> 菜单中移除的项
@exception  IllegalArgumentException  如果该项不在此选择菜单中
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Choice.remove(int position)
<!-- END KEY -->
<!-- BEGIN DATA -->
从选择菜单的指定位置上移除一个项。如果正被移除的项是目前选定的项，则该选择中的第一个项将成为选定项。否则，当前选定项将仍然是选定项（并且选定的索引被相应地更新）。
@param      position 项的位置
@throws IndexOutOfBoundsException 如果指定位置超出边界
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Choice.removeAll()
<!-- END KEY -->
<!-- BEGIN DATA -->
从选择菜单中移除所有的项。
@see       #remove
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String java.awt.Choice.getSelectedItem()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取当前选择的字符串表示形式。
@return    此选择菜单中当前选定项的字符串表示形式
@see       #getSelectedIndex

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Object[] java.awt.Choice.getSelectedObjects()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含当前选定项的数组（长度为 1）。如果此选择菜单中没项，则返回 <code>null</code>。
@see ItemSelectable

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Choice.getSelectedIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前选定项的索引。如果没有选定任何内容，则返回 -1。

@return 当前选定项的索引，如果目前没有选定任何内容，则返回 -1
@see #getSelectedItem

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Choice.select(int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Choice</code> 菜单中的选定项设置为指定位置上的项。

<p>注意，此方法主要应该用于对此组件中某个项的选择的初始化。以编程方式调用此方法<i>不</i> 会触发 <code>ItemEvent</code>。触发 <code>ItemEvent</code> 的唯一方式是通过用户交互。

@param      pos      指定项的位置
@exception  IllegalArgumentException 如果指定位置大于项的数量或小于零
@see        #getSelectedItem
@see        #getSelectedIndex

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Choice.select(String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Choice</code> 菜单中的选定项设置为其名称等于指定字符串的项。如果有多个项与指定的字符串匹配（相等），则选择具有最小索引的那一个项。

<p>注意，此方法主要应该用于初始化对此组件中某个项的选择。以编程方式调用此方法<i>不</i> 会触发 <code>ItemEvent</code>。触发 <code>ItemEvent</code> 的唯一方式是通过用户交互。

@param       str     指定的字符串
@see         #getSelectedItem
@see         #getSelectedIndex

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Choice.addItemListener(ItemListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定的项侦听器，以接收发自此 <code>Choice</code> 菜单的项事件。通过发送项事件来响应用户输入，但不响应对 <code>select</code> 的调用。如果 l 为 <code>null</code>，则不会抛出异常，并且不执行任何动作。有关 AWT 的线程模型的细节信息，请参阅 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"  >AWT 线程问题</a>。
@param         l    项侦听器
@see           #removeItemListener
@see           #getItemListeners
@see           #select
@see           java.awt.event.ItemEvent
@see           java.awt.event.ItemListener
@since         JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Choice.removeItemListener(ItemListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定的项侦听器，以便它不再接收发自此 <code>Choice</code> 菜单的项事件。如果 l 为 <code>null</code>，则不会抛出异常，并且不执行任何动作。有关 AWT 的线程模型的细节信息，请参阅 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"  >AWT 线程问题</a>。
@param         l    项侦听器
@see           #addItemListener
@see           #getItemListeners
@see           java.awt.event.ItemEvent
@see           java.awt.event.ItemListener
@since         JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.event.ItemListener[] java.awt.Choice.getItemListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回已在此选择上注册的所有项侦听器组成的数组。

@return 此选择的所有 <code>ItemListener</code>，如果没有当前已注册的项侦听器，则返回一个空数组

@see           #addItemListener
@see           #removeItemListener
@see           java.awt.event.ItemEvent
@see           java.awt.event.ItemListener
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.awt.Choice.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回目前已在此 <code>Choice</code> 上注册为 <code><em>Foo</em>Listener</code> 的所有对象组成的数组。<code><em>Foo</em>Listener</code> 是使用 <code>add<em>Foo</em>Listener</code> 方法注册的。

 <p>
可以用一个 class 字面值（比如 <code><em>Foo</em>Listener.class</code>）指定 <code>listenerType</code> 参数。例如，可以使用以下代码查询 <code>Choice</code> <code>c</code>，以获得它的项侦听器：

<pre>ItemListener[] ils = (ItemListener[])(c.getListeners(ItemListener.class));</pre>

如果不存在这样的侦听器，则此方法将返回一个空数组。

@param listenerType 所请求侦听器的类型；该参数应该指定一个从 <code>java.util.EventListener</code> 遗传下来的接口
@return 在此选择上注册为 <code><em>Foo</em>Listener</code> 的所有对象组成的数组，如果没有添加这样的侦听器，则返回一个空数组
@exception ClassCastException 如果 <code>listenerType</code> 没有指定实现 <code>java.util.EventListener</code> 的类或接口

@see #getItemListeners
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Choice.processEvent(AWTEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理关于此选择的事件。如果事件是 <code>ItemEvent</code> 的一个实例，则此方法将调用 <code>processItemEvent</code> 方法。否则，它将调用其超类的 <code>processEvent</code> 方法。
<p>注意，如果事件参数为 <code>null</code>，则行为是不确定的，并且可能导致异常。

@param         e 事件
@see           java.awt.event.ItemEvent
@see           #processItemEvent
@since         JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Choice.processItemEvent(ItemEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理发生在此 <code>Choice</code> 菜单上的项事件，实现方式是将这些事件指派给所有已注册的 <code>ItemListener</code> 对象。
<p>
只有为此组件启用项事件之后，才调用此方法。项事件是在出现以下情况之一时启用：
<p><ul>
<li><code>ItemListener</code> 对象是通过 <code>addItemListener</code> 注册的。
<li>可以通过 <code>enableEvents</code> 启用项事件。
 </ul>
<p>注意，如果事件参数为 <code>null</code>，则行为是不确定的，并且可能导致异常。

@param       e 项事件
@see         java.awt.event.ItemEvent
@see         java.awt.event.ItemListener
@see         #addItemListener(ItemListener)
@see         java.awt.Component#enableEvents
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.awt.Choice.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此 <code>Choice</code> 菜单的状态的字符串。此方法仅在进行调试的时候使用，对于这两个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。

@return  此 <code>Choice</code> 菜单的参数字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.Choice.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 <code>Choice</code> 相关的 <code>AccessibleContext</code>。对于 <code>Choice</code> 组件，<code>AccessibleContext</code> 采用的是 <code>AccessibleAWTChoice</code> 的形式。如有必要，可以创建一个新的 <code>AccessibleAWTChoice</code> 实例。

@return 充当此 <code>Choice</code> 的 <code>AccessibleContext</code> 的 <code>AccessibleAWTChoice</code>
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.Choice.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取 <code>ObjectInputStream</code>，如果它不为 <code>null</code>，则添加一个侦听器，以接收 <code>Choice</code> 项触发的项事件。忽略未被识别的键或值。

@param s 要读取的 <code>ObjectInputStream</code>
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless</code> 返回 <code>true</code>
@serial
@see #removeItemListener(ItemListener)
@see #addItemListener(ItemListener)
@see java.awt.GraphicsEnvironment#isHeadless
@see #writeObject(ObjectOutputStream)

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.Choice.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将默认可序列化字段写入流中。写入可序列化 <code>ItemListeners</code> 的一个列表作为可选数据。检测不可序列化的 <code>ItemListeners</code>，不要尝试对它们进行序列化。

@param s 要写入的 <code>ObjectOutputStream</code>
@serialData <code>null</code> 表示终止 0 或多个对的序列；这种对是由 <code>String</code> 和 <code>Object</code> 组成的；<code>String</code> 指示对象类型，它为以下类型之一：<code>itemListenerK</code> 指示一个 <code>ItemListener</code> 对象

@see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)
@see java.awt.Component#itemListenerK
@see #readObject(ObjectInputStream)

<!-- END DATA -->
