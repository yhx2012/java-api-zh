<!-- BEGIN KEY -->
public class java.awt.Label extends java.awt.Component implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Label</code> 对象是一个可在容器中放置文本的组件。一个标签只显示一行只读文本。文本可由应用程序更改，但是用户不能直接对其进行编辑。
 <p>
例如，代码……
 <p>
 <hr><blockquote><pre>
 setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10));
 add(new Label(&quot;Hi There!&quot;));
 add(new Label(&quot;Another Label&quot;));
 </pre></blockquote><hr>
 <p>
生成以下标签：
 <p>
<img src="doc-files/Label-1.gif" alt="两个标签：'Hi There!' 和 'Another label'"
 ALIGN=center HSPACE=10 VSPACE=7>

@version	1.57, 03/16/04
@author 	Sami Shaio
@since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Label.LEFT
<!-- END KEY -->
<!-- BEGIN DATA -->
指示标签文本应左对齐。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Label.CENTER
<!-- END KEY -->
<!-- BEGIN DATA -->
指示标签文本应居中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Label.RIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
指示标签文本应右对齐。
@since   JDK1.0t.

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String java.awt.Label.text
<!-- END KEY -->
<!-- BEGIN DATA -->
标签的文本。此文本可由程序进行修改，但不能由用户修改。

@serial
@see #getText()
@see #setText(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.Label.alignment
<!-- END KEY -->
<!-- BEGIN DATA -->
标签的对齐方式。默认的对齐方式是左对齐。

@serial
@see #getAlignment()
@see #setAlignment(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Label() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个空标签。此标签的文本为空字符串 <code>&quot;&quot;</code>。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Label(String text) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的文本字符串构造一个新的标签，其文本对齐方式为左对齐。
@param text 此标签显示的字符串。将接受 <code>null</code> 值，而不不会导致抛出 NullPointerException。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Label(String text, int alignment) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个显示指定的文本字符串的新标签，其文本对齐方式为指定的方式。可能的 <code>alignment</code> 值有 <code>Label.LEFT</code>、<code>Label.RIGHT</code> 和 <code>Label.CENTER</code>。
@param text 标签显示的字符串。将接受 <code>null</code> 值，并且不会导致抛出 NullPointerException。
@param     alignment 对齐方式的值。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Label.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建此标签的同位体。此同位体可在不更改标签功能的情况下修改其外观。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Label.getAlignment()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此标签的当前对齐方式。可能的值有 <code>Label.LEFT</code>、<code>Label.RIGHT</code> 和 <code>Label.CENTER</code>。
@see        java.awt.Label#setAlignment

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Label.setAlignment(int alignment)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此标签的对齐方式设置为指定的方式。可能的值有 <code>Label.LEFT</code>、<code>Label.RIGHT</code> 和 <code>Label.CENTER</code>。
@param      alignment 要设置的对齐方式。
@exception  IllegalArgumentException 如果 <code>alignment</code> 赋值不正确。
@see        java.awt.Label#getAlignment

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.Label.getText()
<!-- END KEY -->
<!-- BEGIN DATA -->

获取此标签的文本。 
@return     此标签的文本，如果此文本已设置为 <code>null</code>，则返回 <code>null</code>。
@see        java.awt.Label#setText

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Label.setText(String text)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此标签的文本设置为指定的文本。
@param      text 此标签显示的文本。如果 <code>text</code> 为 <code>null</code>，则将其作为一个空字符串 <code>&quot;&quot;</code> 显示。
@see        java.awt.Label#getText

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.awt.Label.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个表示此 <code>Label</code> 状态的字符串。此方法仅在进行调试的时候使用，对于这两个实现，返回的字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。

@return     此标签的参数字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.Label.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此标签相关的 AccessibleContext。对于标签，AccessibleContext 采用 AccessibleAWTLabel 的形式。如有必要，则会创建一个新的 AccessibleAWTLabel 实例。

@return 一个 AccessibleAWTLabel，该 AccessibleAWTLabel 将用作此标签的 AccessibleContext。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.Label.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
从对象输入流读取标签。
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless()</code> 返回 <code>true</code>
@serial
@since 1.4
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
