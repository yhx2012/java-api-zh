<!-- BEGIN KEY -->
public abstract class java.awt.GraphicsDevice extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>GraphicsDevice</code> 类描述可以在特定图形环境中使用的图形设备。这些设备包括屏幕和打印机设备。注意，在 {@link GraphicsEnvironment} 实例中可以有许多屏幕和许多打印机。每个图形设备都有一个或多个与之关联的 {@link GraphicsConfiguration} 对象。这些对象指定可以使用 <code>GraphicsDevice</code> 的不同配置。
 <p>  
在多屏幕环境中，<code>GraphicsConfiguration</code> 对象可用于在多屏幕上呈现组件。以下代码示例演示了如何在 <code>GraphicsEnvironment</code> 中针对每个屏幕设备的每个 <code>GraphicsConfiguration</code> 创建 <code>JFrame</code> 对象。
 <pre>
   GraphicsEnvironment ge = GraphicsEnvironment.
   getLocalGraphicsEnvironment();
   GraphicsDevice[] gs = ge.getScreenDevices();
   for (int j = 0; j &lt; gs.length; j++) { 
      GraphicsDevice gd = gs[j];
      GraphicsConfiguration[] gc =
 	gd.getConfigurations();
      for (int i=0; i &lt; gc.length; i++) {
         JFrame f = new
         JFrame(gs[j].getDefaultConfiguration());
         Canvas c = new Canvas(gc[i]); 
         Rectangle gcBounds = gc[i].getBounds();
         int xoffs = gcBounds.x;
         int yoffs = gcBounds.y;
	   f.getContentPane().add(c);
	   f.setLocation((i*50)+xoffs, (i*60)+yoffs);
         f.show();
      }
   }
 </pre>  
  <p>
 有关全屏独占模式 API 的更多信息，请参阅
 <a href="http://java.sun.com/docs/books/tutorial/extra/fullscreen/index.html">
 Full-Screen Exclusive Mode API Tutorial</a>。
                         
@see GraphicsEnvironment
@see GraphicsConfiguration
@version 1.41, 07/31/06

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GraphicsDevice.TYPE_RASTER_SCREEN
<!-- END KEY -->
<!-- BEGIN DATA -->
设备是光栅屏幕。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GraphicsDevice.TYPE_PRINTER
<!-- END KEY -->
<!-- BEGIN DATA -->
设备是打印机。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GraphicsDevice.TYPE_IMAGE_BUFFER
<!-- END KEY -->
<!-- BEGIN DATA -->
设备是图像缓冲区。此缓冲区可驻留在设备或系统内存中，但用户无法实际看到它。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.GraphicsDevice()
<!-- END KEY -->
<!-- BEGIN DATA -->
这是一个无法直接实例化的抽象类。必须从合适的工厂或查询方法中获取实例。
@see GraphicsEnvironment#getScreenDevices
@see GraphicsEnvironment#getDefaultScreenDevice
@see GraphicsConfiguration#getDevice

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.awt.GraphicsDevice.getType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GraphicsDevice</code> 的类型。
@return 此 <code>GraphicsDevice</code> 的类型，可以是 TYPE_RASTER_SCREEN、TYPE_PRINTER 或 TYPE_IMAGE_BUFFER。
@see #TYPE_RASTER_SCREEN
@see #TYPE_PRINTER
@see #TYPE_IMAGE_BUFFER

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String java.awt.GraphicsDevice.getIDstring()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>GraphicsDevice</code> 关联的标识字符串。
 <p>
在 <code>GraphicsEnvironment</code> 中，某个特定程序可能使用多个 <code>GraphicsDevice</code>。此方法返回一个标识本地 <code>GraphicsEnvironment</code> 中特定 <code>GraphicsDevice</code> 的 <code>String</code>。尽管没有设置此 <code>String</code> 的公共方法，但程序员仍然可以在调试时使用此 <code>String</code>。Java<sup><font size=-2>TM</font></sup> Runtime Environment 供应商可以格式化 <code>String</code> 的返回值。要确定如何解释 <code>String</code> 值，请与 Java Runtime 供应商联系。要查找谁是供应商，可以从程序中使用&ldquo;java.vendor&rdquo;调用 System 类的 {@link System#getProperty(String) getProperty} 方法。
@return 一个作为此 <code>GraphicsDevice</code> 标识的 <code>String</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.GraphicsConfiguration[] java.awt.GraphicsDevice.getConfigurations()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>GraphicsDevice</code> 关联的所有 <code>GraphicsConfiguration</code> 对象。
@return 一个与此 <code>GraphicsDevice</code> 关联的 <code>GraphicsConfiguration</code> 对象的数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.GraphicsConfiguration java.awt.GraphicsDevice.getDefaultConfiguration()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>GraphicsDevice</code> 关联的默认 <code>GraphicsConfiguration</code>。
@return 此 <code>GraphicsDevice</code> 的默认 <code>GraphicsConfiguration</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.GraphicsConfiguration java.awt.GraphicsDevice.getBestConfiguration(GraphicsConfigTemplate gct)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回通过了 {@link GraphicsConfigTemplate} 中定义的标准的可能&ldquo;最佳&rdquo;配置。
@param gct 用于获取有效 <code>GraphicsConfiguration</code> 的 <code>GraphicsConfigTemplate</code> 对象
@return 一个通过了指定 <code>GraphicsConfigTemplate</code> 中定义的标准的 <code>GraphicsConfiguration</code>。
@see GraphicsConfigTemplate

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.GraphicsDevice.isFullScreenSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 <code>GraphicsDevice</code> 支持全屏独占模式，则返回 <code>true</code>。如果安装了 SecurityManager，则将使用 <code>AWTPermission("fullScreenExclusive")</code> 调用它的 <code>checkPermission</code> 方法。只有授权时 <code>isFullScreenSupported</code> 才会返回 true。 
@return 此图形设备是否可以使用全屏独占模式
@see java.awt.AWTPermission
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.GraphicsDevice.setFullScreenWindow(Window w)
<!-- END KEY -->
<!-- BEGIN DATA -->
进入全屏模式，或返回窗口化模式。进入的全屏模式可以是独占的，也可以是模拟的。只有 <code>isFullScreenSupported</code> 返回 <code>true</code> 时，独占模式才可用。
 <p>
独占模式意味着：
 <ul>
<li>Windows 无法重叠全屏窗口。所有其他应用程序窗口总是以 Z-order 出现在全屏窗口后面。
<li>任何时候设备上都只能有一个全屏窗口，因此，当已存在全屏窗口时调用此方法将导致现有的全屏窗口返回为窗口化模式。
<li>禁用输入方法窗口。建议调用 <code>Component.enableInputMethods(false)</code>，使组件成为非客户端的输入方法框架。
 </ul>
 <p>
模拟的全屏模式将窗口大小调整为屏幕大小，并将它置于 (0,0)。
 <p>
当进入全屏模式时，如果看不到作为全屏窗口使用的窗口，此方法将会使其可见。当返回到窗口化模式时，窗口仍将保持可见。  
 <p>
当从独占全屏窗口模式返回到窗口化模式时，任何调用 <code>setDisplayMode</code> 做出的显示更改都将自动恢复原状。

@param w 一个用作全屏窗口的窗口；如果返回到窗口化模式，则为 <code>null</code>。一些平台希望全屏窗口成为顶层组件（即 Frame）；因此这里最好使用 Frame，而不用 Window。
@see #isFullScreenSupported
@see #getFullScreenWindow
@see #setDisplayMode
@see Component#enableInputMethods
@see Component#setVisible
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Window java.awt.GraphicsDevice.getFullScreenWindow()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果设备处于全屏模式，则返回表示全屏窗口的 <code>Window</code> 对象。
 
@return 全屏窗口；如果设备未在全屏模式，则返回 <code>null</code>。
@see #setFullScreenWindow(Window)
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.GraphicsDevice.isDisplayChangeSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 <code>GraphicsDevice</code> 支持低层显示更改，则返回 <code>true</code>。某些平台可能只在全屏独占模式中允许低层显示更改（即如果 {@link #isFullScreenSupported()} 返回 {@code true}，且应用程序已经使用 {@link #setFullScreenWindow} 进入全屏模式）。
@return 此图形设备是否支持低层显示更改。
@see #setDisplayMode
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.GraphicsDevice.setDisplayMode(DisplayMode dm)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此图形设备的显示模式。只在 {@link #isDisplayChangeSupported()} 返回 {@code true} 时才允许此方法，假如支持全屏独占模式的话（即 {@link #isFullScreenSupported()} 返回 {@code true}），还可能要求首先使用 {@link #setFullScreenWindow} 进入全屏独占模式。
 <p>

该显示模式必须是由 {@link #getDisplayModes()} 返回的显示模式之一，只有一种情况例外：传递带有 {@link DisplayMode#REFRESH_RATE_UNKNOWN} 刷新率的显示模式时，将从带有匹配宽度、高度和位深的可用显示模式列表中选择一个显示模式。但是，只有在位深为 {@link DisplayMode#BIT_DEPTH_MULTI} 的显示模式存在于 {@link #getDisplayModes()} 返回的列表中时，才能传递这种显示模式。
 <p>
 代码示例：
 <pre><code>
 Frame frame;
 DisplayMode newDisplayMode;
 GraphicsDevice gd;
 // create a Frame, select desired DisplayMode from the list of modes
 // returned by gd.getDisplayModes() ...

 if (gd.isFullScreenSupported()) {
     gd.setFullScreenWindow(frame);
 } else {
    // proceed in non-full-screen mode
    frame.setSize(...);
    frame.setLocation(...);
    frame.setVisible(true);
 }

 if (gd.isDisplayChangeSupported()) {
     gd.setDisplayMode(newDisplayMode);
 }
 </code></pre>

@param dm 此图形设备的新显示模式。
@exception IllegalArgumentException 如果提供的 <code>DisplayMode</code> 为 <code>null</code>，或者在 <code>getDisplayModes</code> 返回的数组中不可用
@exception UnsupportedOperationException 如果 <code>isDisplayChangeSupported</code> 返回 <code>false</code>
@see #getDisplayMode
@see #getDisplayModes
@see #isDisplayChangeSupported
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.DisplayMode java.awt.GraphicsDevice.getDisplayMode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GraphicsDevice</code> 的当前显示模式。如果返回的显示模式是不确定的，则允许它具有 {@link DisplayMode#REFRESH_RATE_UNKNOWN} 刷新率。同样，如果返回的显示模式是不确定的或者支持多个位深，则允许它具有 {@link DisplayMode#BIT_DEPTH_MULTI} 位深。
@return 此图形设备的当前显示模式。
@see #setDisplayMode(DisplayMode)
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.DisplayMode[] java.awt.GraphicsDevice.getDisplayModes()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回可用于此 <code>GraphicsDevice</code> 的所有显示模式。如果返回的显示模式是不确定的，则允许它具有 {@link DisplayMode#REFRESH_RATE_UNKNOWN} 刷新率。同样，如果返回的显示模式是不确定的或者支持多个位深，则允许它具有 {@link DisplayMode#BIT_DEPTH_MULTI} 位深。
@return 此图形设备可用的所有显示模式。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.GraphicsDevice.getAvailableAcceleratedMemory()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回此设备上加速内存中可用的字节数。某些图像在加速内存中是按先来先服务的方式创建或缓存的。在某些操作系统中，此内存是有限资源。调用此方法并慎重安排图像的创建和刷新能够使应用程序最有效地使用这些有限的资源。<br> 注意，返回的数字是可用内存数量的快照；将某些图像分配到该内存中可能仍然存在问题。例如，根据操作系统、驱动程序、内存配置和线程情况的不同，给定的图像可能无法使用报告的全部内存空间。对于与 VolatileImage 关联的 {@link ImageCapabilities} 对象，还有更多的查询方法，可用于确定是否在加速内存中创建一个特殊的 VolatileImage。
@return  加速内存中可用的字节数。返回值为负指示此 GraphicsDevice 上的加速内存量是不确定的。
@see java.awt.image.VolatileImage#flush
@see ImageCapabilities#isAccelerated
@since 1.4

<!-- END DATA -->
