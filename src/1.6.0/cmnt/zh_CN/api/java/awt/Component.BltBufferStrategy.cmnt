<!-- BEGIN KEY -->
protected class java.awt.Component.BltBufferStrategy extends java.awt.image.BufferStrategy
<!-- END KEY -->
<!-- BEGIN DATA -->
用于将屏幕外的画面以位图传输方式传输到一个组件的内部类。

@author Michael Martak
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.BufferCapabilities java.awt.Component.BltBufferStrategy.caps
<!-- END KEY -->
<!-- BEGIN DATA -->
缓冲区能力

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.image.VolatileImage[] java.awt.Component.BltBufferStrategy.backBuffers
<!-- END KEY -->
<!-- BEGIN DATA -->
后台缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.awt.Component.BltBufferStrategy.validatedContents
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制缓冲区最近是否已经从丢失状态中恢复。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.Component.BltBufferStrategy.width
<!-- END KEY -->
<!-- BEGIN DATA -->
后台缓冲区的大小

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component.BltBufferStrategy(int numBuffers, BufferCapabilities caps)
<!-- END KEY -->
<!-- BEGIN DATA -->
围绕组件创建一个新的 blt 缓冲区策略
@param numBuffers 要创建的缓冲区数，包括前台缓冲区
@param caps 缓冲区能力

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Component.BltBufferStrategy.dispose()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Component.BltBufferStrategy.createBackBuffers(int numBuffers)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建后台缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.BufferCapabilities java.awt.Component.BltBufferStrategy.getCapabilities()
<!-- END KEY -->
<!-- BEGIN DATA -->
@return 此策略的缓冲区能力

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Graphics java.awt.Component.BltBufferStrategy.getDrawGraphics()
<!-- END KEY -->
<!-- BEGIN DATA -->
@return 绘制的图形

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Component.BltBufferStrategy.show()
<!-- END KEY -->
<!-- BEGIN DATA -->
使下一个有效缓冲区可见。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Component.BltBufferStrategy.revalidate()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果绘制缓冲区已经丢失，则恢复它

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Component.BltBufferStrategy.contentsLost()
<!-- END KEY -->
<!-- BEGIN DATA -->
@return 最后一次调用 <code>getDrawGraphics</code> 之后，绘制缓冲区是否丢失

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Component.BltBufferStrategy.contentsRestored()
<!-- END KEY -->
<!-- BEGIN DATA -->
@return 绘制缓冲区最近是否从丢失状态中恢复，并且重新初始化为默认的背景色（白色）

<!-- END DATA -->
