<!-- BEGIN KEY -->
public class java.awt.event.KeyEvent extends java.awt.event.InputEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
表示组件中发生键击的事件。
 <p>
当按下、释放或键入某个键时，组件对象（如文本字段）将生成此低级别事件。该事件被传递给每一个 <code>KeyListener</code> 或 <code>KeyAdapter</code> 对象，这些对象使用组件的 <code>addKeyListener</code> 方法注册，以接收此类事件。（<code>KeyAdapter</code> 对象实现 <code>KeyListener</code> 接口。）发生事件时，所有此类侦听器对象都将获得此 <code>KeyEvent</code>。
 <p>
<em>&ldquo;键入键&rdquo;事件</em> 是高级别事件，通常不依赖于平台或键盘布局。输入 Unicode 字符时生成此类事件，它们被认为是发现字符输入的最佳方式。最简单的情况是，按下单个键（如 "a"）将产生键入键事件。但是，字符经常是通过一系列按键（如&lsquo;shift&rsquo;＋&lsquo;a&rsquo;）产生的，按下键事件和键入键事件的映射关系可能是多对一或多对多的。键释放通常不需要生成键入键事件，但在某些情况下，只有释放了某个键后才能生成键入键事件（如在 Windows 中通过 Alt-Numpad 方法来输入 ASCII 序列）。对于不生成 Unicode 字符的键是不会生成键入键事件的（如动作键、修改键等等）。
 <p>
getKeyChar 方法总是返回有效的 Unicode 字符或 CHAR_UNDEFINED。KEY_TYPED 事件报告字符输入：KEY_PRESSED 和 KEY_RELEASED 事件不必与字符输入关联。因此，可以保证 getKeyChar 方法的结果只对 KEY_TYPED 事件有意义。   
 <p>
对于按下键和释放键事件，getKeyCode 方法返回该事件的 keyCode。对于键入键事件，getKeyCode 方法总是返回 VK_UNDEFINED。

 <p>
<em>&ldquo;按下键&rdquo;和&ldquo;释放键&rdquo;事件</em> 是低级别事件，依赖于平台和键盘布局。只要按下或释放键就生成这些事件，它们是发现不生成字符输入的键（如动作键、修改键等等）的惟一方式。通过 getKeyCode 方法可指出按下或释放的键，该方法返回一个虚拟键码。

 <p>
<em>虚拟键码</em> 用于报告按下了键盘上的哪个键，而不是一次或多次键击组合生成的字符（如 "A" 是由 shift ＋ "a" 生成的）。  

 <p>
例如，按下 Shift 键会生成 keyCode 为 VK_SHIFT 的 KEY_PRESSED 事件，而按下 'a' 键将生成 keyCode 为 VK_A 的 KEY_PRESSED 事件。释放 'a' 键后，会激发 keyCode 为 VK_A 的 KEY_RELEASED 事件。另外，还会生成一个 keyChar 值为 'A' 的 KEY_TYPED 事件。

<p>
 按下和释放键盘上的键会导致（依次）生成以下键事件：
 <PRE>
    {@code KEY_PRESSED}
    {@code KEY_TYPED}（只在可生成有效 Unicode 字符时产生。）
    {@code KEY_RELEASED}
 </PRE>

 但在某些情况下（例如，在激活自动重复或输入方法时），该顺序可能会有所不同（并且与平台有关）。

 <p>
注：
 <ul>
<li>不产生 Unicode 字符的键组合（如 F1 和 HELP 键等动作键）不会生成 KEY_TYPED 事件。
<li>并非所有键盘和系统都能够生成所有的虚拟键码。在 Java 中不会尝试人为地生成这些键。 
<li>虚拟键码不标识物理键：它们取决于平台和键盘布局。例如，使用美国键盘布局时生成 VK_Q 的键在使用法国键盘布局时将生成 VK_A。
<li>并非所有的字符都有与之关联的 keycode。例如，没有用于问号的 keycode，因为没有在主层上显示问号的键盘。  
<li>为了支持平台无关的动作键处理，Java 平台为某些功能使用少量附加虚拟键常量，否则必须通过解释虚拟键码和修饰符来识别这些功能。例如，对于日文 Windows 键盘，返回 VK_ALL_CANDIDATES 而不是 VK_CONVERT 加 ALT 修饰符。
<li>正如 <a href="../../java/awt/doc-files/FocusSpec.html">Focus Specification</a> 中指定的那样，默认情况下键事件被指派给焦点拥有者。
 </ul>

 <p>
警告：除了 Java 语言定义的这些键之外（VK_ENTER、VK_BACK_SPACE 和 VK_TAB），不要依赖 VK_ 常量值。Sun 保留将来根据需要更改这些值的权利，以适应更大范围的键盘。  

@author Carl Quinn
@author Amy Fowler
@author Norbert Lindenberg
@version 1.78 07/11/06

@see KeyAdapter
@see KeyListener
@see <a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/keylistener.html">Tutorial: Writing a Key Listener</a>

@since 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.KEY_FIRST
<!-- END KEY -->
<!-- BEGIN DATA -->
用于键事件的 id 范围的起始编号。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.KEY_LAST
<!-- END KEY -->
<!-- BEGIN DATA -->
用于键事件的 id 范围的结束编号。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.KEY_TYPED
<!-- END KEY -->
<!-- BEGIN DATA -->
&ldquo;键入键&rdquo;事件。输入字符时生成此事件。最简单的情况是，按下单个键产生该事件。但是，经常是通过一系列按键来产生字符，按下键事件和键入键事件的映射关系可能是多对一或多对多的。  

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.KEY_PRESSED
<!-- END KEY -->
<!-- BEGIN DATA -->
&ldquo;按下键&rdquo;事件。键被按下时生成此事件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.KEY_RELEASED
<!-- END KEY -->
<!-- BEGIN DATA -->
&ldquo;释放键&rdquo;事件。松开键时生成此事件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_LEFT
<!-- END KEY -->
<!-- BEGIN DATA -->
用于非数字键盘<b>向左</b>方向键的常量。
@see #VK_KP_LEFT

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_UP
<!-- END KEY -->
<!-- BEGIN DATA -->
用于非数字键盘<b>向上</b>方向键的常量。
@see #VK_KP_UP

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_RIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
用于非数字键盘<b>向右</b>方向键的常量。
@see #VK_KP_RIGHT

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DOWN
<!-- END KEY -->
<!-- BEGIN DATA -->
用于非数字键盘<b>向下</b>方向键的常量。
@see #VK_KP_DOWN

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_COMMA
<!-- END KEY -->
<!-- BEGIN DATA -->
用于逗号键 "," 的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_MINUS
<!-- END KEY -->
<!-- BEGIN DATA -->
用于减号键 "-" 的常量
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_PERIOD
<!-- END KEY -->
<!-- BEGIN DATA -->
用于句点键 "." 的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_SLASH
<!-- END KEY -->
<!-- BEGIN DATA -->
用于正斜杠键 "/" 的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_0
<!-- END KEY -->
<!-- BEGIN DATA -->
VK_0 到 VK_9 与 ASCII 的&lsquo;0&rsquo;到&lsquo;9&rsquo;(0x30 - 0x39) 相同

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_SEMICOLON
<!-- END KEY -->
<!-- BEGIN DATA -->
用于分号键 ";" 的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_EQUALS
<!-- END KEY -->
<!-- BEGIN DATA -->
用于等号键 "=" 的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_A
<!-- END KEY -->
<!-- BEGIN DATA -->
VK_A 到 VK_Z 与 ASCII 的&lsquo;A&rsquo;到&lsquo;Z&rsquo;(0x41 - 0x5A) 相同

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_OPEN_BRACKET
<!-- END KEY -->
<!-- BEGIN DATA -->
用于左方括号键 "[" 的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_BACK_SLASH
<!-- END KEY -->
<!-- BEGIN DATA -->
用于反斜杠键 "\" 的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_CLOSE_BRACKET
<!-- END KEY -->
<!-- BEGIN DATA -->
用于右方括号键 "]" 的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_SEPARATER
<!-- END KEY -->
<!-- BEGIN DATA -->

此常量已废弃，包括它仅为了向后兼容。
@see #VK_SEPARATOR

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_SEPARATOR
<!-- END KEY -->
<!-- BEGIN DATA -->

用于数字键盘分隔符键的常量。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F1
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F1 功能键的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F2
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F2 功能键的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F3
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F3 功能键的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F4
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F4 功能键的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F5
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F5 功能键的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F6
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F6 功能键的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F7
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F7 功能键的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F8
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F8 功能键的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F9
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F9 功能键的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F10
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F10 功能键的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F11
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F11 功能键的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F12
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F12 功能键的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F13
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F13 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F14
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F14 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F15
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F15 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F16
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F16 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F17
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F17 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F18
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F18 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F19
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F19 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F20
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F20 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F21
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F21 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F22
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F22 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F23
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F23 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F24
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 F24 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_KP_UP
<!-- END KEY -->
<!-- BEGIN DATA -->
用于数字键盘<b>向上</b>方向键的常量。
@see #VK_UP
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_KP_DOWN
<!-- END KEY -->
<!-- BEGIN DATA -->
用于数字键盘<b>向下</b>方向键的常量。
@see #VK_DOWN
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_KP_LEFT
<!-- END KEY -->
<!-- BEGIN DATA -->
用于数字键盘<b>向左</b>方向键的常量。
@see #VK_LEFT
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_KP_RIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
用于数字键盘<b>向右</b>方向键的常量。
@see #VK_RIGHT
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_GRAVE
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_ACUTE
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_CIRCUMFLEX
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_TILDE
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_MACRON
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_BREVE
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_ABOVEDOT
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_DIAERESIS
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_ABOVERING
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_DOUBLEACUTE
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_CARON
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_CEDILLA
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_OGONEK
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_IOTA
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_VOICED_SOUND
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_SEMIVOICED_SOUND
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_AMPERSAND
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_ASTERISK
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_QUOTEDBL
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_LESS
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_GREATER
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_BRACELEFT
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_BRACERIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_AT
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 "@" 键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_COLON
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 ":" 键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_CIRCUMFLEX
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 "^" 键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DOLLAR
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 "$" 键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_EURO_SIGN
<!-- END KEY -->
<!-- BEGIN DATA -->
用于欧洲货币符号键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_EXCLAMATION_MARK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 "!" 键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_INVERTED_EXCLAMATION_MARK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于反向感叹号键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_LEFT_PARENTHESIS
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 "(" 键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_NUMBER_SIGN
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 "#" 键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_PLUS
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 "+" 键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_RIGHT_PARENTHESIS
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 ")" 键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_UNDERSCORE
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 "_" 键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_WINDOWS
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 Microsoft Windows 的 "Windows" 键的常量。此常量同时用于左右两个这种键。
@see #getKeyLocation()
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_CONTEXT_MENU
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 Microsoft Windows 上下文菜单键的常量。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_CONVERT
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 Convert 功能键的常量。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_NONCONVERT
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 Don't Convert 功能键的常量。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_ACCEPT
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 Accept 或 Commit 功能键的常量。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_ALPHANUMERIC
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 Alphanumeric 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_KATAKANA
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 Katakana 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_HIRAGANA
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 Hiragana 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_FULL_WIDTH
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 Full-Width Characters 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_HALF_WIDTH
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 Half-Width Characters 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_ROMAN_CHARACTERS
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 Roman Characters 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_ALL_CANDIDATES
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 All Candidates 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_PREVIOUS_CANDIDATE
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 Previous Candidate 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_CODE_INPUT
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 Code Input 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_JAPANESE_KATAKANA
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 Japanese-Katakana 功能键的常量。此键可切换到日文输入法并选择其 Katakana 输入模式。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_JAPANESE_HIRAGANA
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 Japanese-Hiragana 功能键的常量。此键可切换到日文输入法并选择其 Hiragana 输入模式。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_JAPANESE_ROMAN
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 Japanese-Roman 功能键的常量。此键可切换到日文输入法并选择其 Roman-Direct 输入模式。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_KANA_LOCK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于锁定 Kana 功能键的常量。这将把键盘锁定在 Kana 布局。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_INPUT_METHOD_ON_OFF
<!-- END KEY -->
<!-- BEGIN DATA -->
用于输入法开/关键的常量。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_CUT
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_COPY
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_PASTE
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_UNDO
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_AGAIN
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_FIND
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_PROPS
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_STOP
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_COMPOSE
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 Compose 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_ALT_GRAPH
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 AltGraph 功能键的常量。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_BEGIN
<!-- END KEY -->
<!-- BEGIN DATA -->
用于 Begin 键的常量。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_UNDEFINED
<!-- END KEY -->
<!-- BEGIN DATA -->
此值用于指出 keyCode 是未知的。KEY_TYPED 事件没有 keyCode 值，用此值代替。  

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final char java.awt.event.KeyEvent.CHAR_UNDEFINED
<!-- END KEY -->
<!-- BEGIN DATA -->
KEY_PRESSED 和 KEY_RELEASED 事件没有映射到一个有效的 Unicode 字符时使用此值作为 keyChar 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.KEY_LOCATION_UNKNOWN
<!-- END KEY -->
<!-- BEGIN DATA -->
指示 keyLocation 为不确定或不相关的常量。<code>KEY_TYPED</code> 事件没有 keyLocation，使用此值代替。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.KEY_LOCATION_STANDARD
<!-- END KEY -->
<!-- BEGIN DATA -->
该常量指示按下或释放的键不区分左右，并且不是发自数字键盘（或者不是发自对应于数字键盘的虚拟键）。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.KEY_LOCATION_LEFT
<!-- END KEY -->
<!-- BEGIN DATA -->
该常量指示按下或释放的键位于左侧（此键的位置有多种可能性）。示例：左侧的 shift 键。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.KEY_LOCATION_RIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
该常量指示按下或释放的键位于右侧（此键的位置有多种可能性）。示例：右侧的 shift 键。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.KEY_LOCATION_NUMPAD
<!-- END KEY -->
<!-- BEGIN DATA -->
该常量指示按键事件发自于数字键盘或对应于数字键盘的虚拟键。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean java.awt.event.KeyEvent.isProxyActive
<!-- END KEY -->
<!-- BEGIN DATA -->
存储本机事件调度系统的状态。如果创建事件时事件代理机制是活动的，则为 true；如果是非活动的，则为 false。该状态用于 Component.dispatchEventImpl 中，以在代理是活动的情况下正确地调度事件。

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.event.KeyEvent.keyCode
<!-- END KEY -->
<!-- BEGIN DATA -->
分配给键盘上每个键的惟一值。有一个大多数键盘都可激发的公共键码集。应该使用键码的符号名，而不是代码值本身。

@serial
@see #getKeyCode()
@see #setKeyCode(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
 char java.awt.event.KeyEvent.keyChar
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>keyChar</code> 是一个可由键盘上的键或键组合所激发的有效 unicode 字符。

@serial
@see #getKeyChar()
@see #setKeyChar(char)

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.event.KeyEvent.keyLocation
<!-- END KEY -->
<!-- BEGIN DATA -->
键盘上键的位置。

某些键在键盘上出现多次，如左右 shift 键。另外，某些键则出现在数字键盘上。此变量用于区分这样的键。

合法的值有 <code>KEY_LOCATION_UNKNOWN</code>、<code>KEY_LOCATION_STANDARD</code>、<code>KEY_LOCATION_LEFT</code>、<code>KEY_LOCATION_RIGHT</code> 和 <code>KEY_LOCATION_NUMPAD</code>。

@serial
@see #getKeyLocation()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.KeyEvent(Component source, int id, long when, int modifiers, int keyCode, char keyChar)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>KeyEvent</code> 对象。
<p>注意，传入无效的 <code>id</code> 将导致不明确的行为。如果 <code>source</code> 为 <code>null</code>，则此方法抛出 <code>IllegalArgumentException</code>。

@param source    产生事件的 <code>Component</code> 
@param id  标识事件类型的整数 
@param when      指定事件发生时间的 long 型整数
@param modifiers 事件期间按下的修改键（shift、ctrl、alt、meta）。应该使用扩展的 _DOWN_MASK 修饰符或旧的 _MASK 修饰符，但是在一个事件中不应混用两种模型。首选扩展的修饰符。
@param keyCode   实际键的整数代码，或者为 VK_UNDEFINED（对于键入键事件）
@param keyChar   此事件所生成的 Unicode 字符，或者为 CHAR_UNDEFINED（对于未映射到有效 Unicode 字符的按下键和释放键事件)
@throws IllegalArgumentException  如果 <code>id</code> 为 <code>KEY_TYPED</code> 且 <code>keyChar</code> 为 <code>CHAR_UNDEFINED</code>；或者 <code>id</code> 为 <code>KEY_TYPED</code> 且 <code>keyCode</code> 不为 <code>VK_UNDEFINED</code>
@throws IllegalArgumentException 如果 <code>source</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.KeyEvent(Component source, int id, long when, int modifiers, int keyCode)
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK1.1 开始

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.KeyEvent.getKeyCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此事件中的键关联的整数 keyCode。
 
@return 键盘上实际键的整数代码。（对于 <code>KEY_TYPED</code> 事件，该 keyCode 为 <code>VK_UNDEFINED</code>。）

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.event.KeyEvent.setKeyCode(int keyCode)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 keyCode 值，以表示某个物理键。

@param keyCode 与键盘上实际键相对应的一个整数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.awt.event.KeyEvent.getKeyChar()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此事件中的键关联的字符。例如，shift + "a" 的 <code>KEY_TYPED</code> 事件返回值 "A"。
 <p>
<code>KEY_PRESSED</code> 和 <code>KEY_RELEASED</code> 事件不用于报告字符输入。因此，可以保证此方法返回的值只对 <code>KEY_TYPED</code> 事件有意义。  

@return 为此按键事件定义的 Unicode 字符。如果对于此按键事件没有有效的 Unicode 字符，则返回 <code>CHAR_UNDEFINED</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.event.KeyEvent.setKeyChar(char keyChar)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 keyCode 值，以表示某个逻辑字符。

@param keyChar 与构成此事件的键击组合相对应的 char 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.event.KeyEvent.setModifiers(int modifiers)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置修饰符，以指出所按住的修改键（例如 shift、ctrl、alt、meta），该动作被定义为 InputEvent 的一部分。
 <p>
注：因为很多 AWT 实现不识别修饰符的改变，所以不推荐使用此方法。对于其中更改了 shift 修饰符的 <code>KEY_TYPED</code> 事件更是如此。

@param modifiers 修饰符常量的整数组合。
@see InputEvent
@deprecated 从 JDK1.1.4 开始

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.KeyEvent.getKeyLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回产生此按键事件的键位置。

某些键在键盘上出现多次，如左右 shift 键。另外，某些键则出现在数字键盘上。此方法提供了一种区分这些键的方式。

@return 被按下或释放的键的位置。总是为 <code>KEY_TYPED </code> 事件返回 <code>KEY_LOCATION_UNKNOWN</code>。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.awt.event.KeyEvent.getKeyText(int keyCode)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述 keyCode 的 String，如 "HOME"、"F1" 或 "A"。通过更改 awt.properties 文件可以本地化这些字符串。

@return 包含物理键文本描述的字符串，物理键通过其 keyCode 标识。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.awt.event.KeyEvent.getKeyModifiersText(int modifiers)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述修改键的 <code>String</code>，如 "Shift" 或 "Ctrl+Shift"。通过更改 <code>awt.properties</code> 文件可以本地化这些字符串。
 <p>
注意，<code>InputEvent.ALT_MASK</code> 和 <code>InputEvent.BUTTON2_MASK</code> 具有相同的值，所以对这两个修饰符返回字符串 "Alt"。同样，<code>InputEvent.META_MASK</code> 和 <code>InputEvent.BUTTON3_MASK</code> 具有相同的值，所以对这两个修饰符返回字符串 "Meta"。

@return 一个字符串，它是在事件期间所按住的修改键组合的文本描述
@see InputEvent#getModifiersExText(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.event.KeyEvent.isActionKey()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此事件中的键是否为“动作”键。通常动作键不会激发 unicode 字符并且不是修改键。

@return 如果该键是“动作”键，则返回 <code>true</code>；否则返回 <code>false</code> 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.event.KeyEvent.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回标识此事件的参数字符串。此方法对于事件记录和调试很有用。

@return 标识事件及其属性的字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.event.KeyEvent.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据旧的修饰符来设置新的修饰符。键修饰符可重写与鼠标修饰符重合的部分。
@serial

<!-- END DATA -->
