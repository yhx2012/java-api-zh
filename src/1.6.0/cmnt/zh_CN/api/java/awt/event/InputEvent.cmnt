<!-- BEGIN KEY -->
public abstract class java.awt.event.InputEvent extends java.awt.event.ComponentEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
所有组件级别输入事件的根事件类。

输入事件通常由产生输入事件的源代码进行处理，而在此之前，将他们提交到侦听器中。这样就允许侦听器和组件子类&ldquo;使用&rdquo;事件，以便源代码不会以默认方式处理事件。例如，在 Button 组件上使用 mousePressed 事件将阻止 Button 被激活。

@author Carl Quinn
@version 1.34 06/02/04

@see KeyEvent
@see KeyAdapter
@see MouseEvent
@see MouseAdapter
@see MouseMotionAdapter

@since 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.SHIFT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
Shift 键修饰符常量。建议使用 SHIFT_DOWN_MASK。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.CTRL_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
Ctrl 键修饰符常量。建议使用 CTRL_DOWN_MASK。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.META_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
Meta 键修饰符常量。建议使用 META_DOWN_MASK。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.ALT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
Alt 键修饰符常量。建议使用 ALT_DOWN_MASK。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.ALT_GRAPH_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
AltGraph 键修饰符常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.BUTTON1_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
Mouse Button1 修饰符常量。建议使用 BUTTON1_DOWN_MASK。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.BUTTON2_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
Mouse Button2 修饰符常量。建议使用 BUTTON2_DOWN_MASK。注意，BUTTON2_MASK 和 ALT_MASK 具有相同的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.BUTTON3_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
Mouse Button3 修饰符常量。建议使用 BUTTON3_DOWN_MASK。注意：BUTTON3_MASK 和 META_MASK 具有相同的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.SHIFT_DOWN_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
Shift 键的扩展修饰符常量。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.CTRL_DOWN_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
Control 键的扩展修饰符常量。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.META_DOWN_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
Meta 键的扩展修饰符常量。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.ALT_DOWN_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
Alt 键的扩展修饰符常量。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.BUTTON1_DOWN_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
Mouse Button1 的扩展修饰符常量。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.BUTTON2_DOWN_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
Mouse Button2 的扩展修饰符常量。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.BUTTON3_DOWN_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
Mouse Button3 的扩展修饰符常量。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
AltGraph 键的扩展修饰符常量。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
 long java.awt.event.InputEvent.when
<!-- END KEY -->
<!-- BEGIN DATA -->
输入事件以协调世界时 (UTC) 表示的时间戳。时间戳指示输入事件创建的时间。

@serial
@see #getWhen()

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.event.InputEvent.modifiers
<!-- END KEY -->
<!-- BEGIN DATA -->
输入事件激发时修饰符掩码的状态。

@serial
@see #getModifiers()
@see #getModifiersEx()
@see java.awt.event.KeyEvent
@see java.awt.event.MouseEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.event.InputEvent.isShiftDown()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Shift 修饰符在此事件上是否为 down。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.event.InputEvent.isControlDown()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Control 修饰符在此事件上是为 down。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.event.InputEvent.isMetaDown()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Meta 修饰符在此事件上是否为 down。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.event.InputEvent.isAltDown()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Alt 修饰符在此事件上是否为 down。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.event.InputEvent.isAltGraphDown()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 AltGraph 修饰符在此事件上是否为 down。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.awt.event.InputEvent.getWhen()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此事件发生时的时间戳。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.InputEvent.getModifiers()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此事件的修饰符掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.InputEvent.getModifiersEx()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此事件的扩展修饰符掩码。扩展修饰符表示所有模式键的状态，例如 ALT、CTRL、META 和事件发生后那一刻的鼠标按钮
 <P> 
例如，如果用户在按下 <b>button 1</b> 后又按下 <b>button 2</b>，然后以相同的顺序释放这两个按钮，则会生成以下事件序列：
 <PRE>
    <code>MOUSE_PRESSED</code>: <code>BUTTON1_DOWN_MASK</code>
    <code>MOUSE_PRESSED</code>: <code>BUTTON1_DOWN_MASK | BUTTON2_DOWN_MASK</code>
    <code>MOUSE_RELEASED</code>: <code>BUTTON2_DOWN_MASK</code>
    <code>MOUSE_CLICKED</code>: <code>BUTTON2_DOWN_MASK</code>
    <code>MOUSE_RELEASED</code>: 
    <code>MOUSE_CLICKED</code>:  
 </PRE>
 <P>
建议不使用 <code>==</code> 来比较此方法的返回值，因为在以后会增加新的修饰符。例如，检查 SHIFT 和 BUTTON1 已经按下而 CTRL 未按下的正确方法可以通过以下代码来演示：
 <PRE>
    int onmask = SHIFT_DOWN_MASK | BUTTON1_DOWN_MASK;
    int offmask = CTRL_DOWN_MASK;
    if (event.getModifiersEx() &amp; (onmask | offmask) == onmask) {
        ...
    }
 </PRE>
即使添加了新的修饰符，上述代码仍然有效。
 
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.event.InputEvent.consume()
<!-- END KEY -->
<!-- BEGIN DATA -->
使用此事件，以便不会按照默认的方式由产生此事件的源代码来处理此事件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.event.InputEvent.isConsumed()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回是否已经使用此事件。
@see #consume

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.awt.event.InputEvent.getModifiersExText(int modifiers)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述扩展修改键和鼠标按钮（例如 &quot;Shift&quot;、&quot;Button1&quot; 或 &quot;Ctrl+Shift&quot;）的 String。这些字符串的本地化可以通过修改 awt.properties 文件来完成。

@param modifiers 描述事件的扩展修饰符和鼠标按钮的修饰符掩码
@return 事件期间保存按下的扩展修改键和鼠标按钮集合的文本描述。
@since 1.4

<!-- END DATA -->
