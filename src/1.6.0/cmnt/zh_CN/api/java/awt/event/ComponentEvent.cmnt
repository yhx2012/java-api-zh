<!-- BEGIN KEY -->
public class java.awt.event.ComponentEvent extends java.awt.AWTEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
指示组件被移动、大小被更改或可见性被更改的低级别事件（它也是其他组件级事件的根类）。
 <P>
这些组件事件&ldquo;仅&rdquo;为通知目的而提供；AWT 将自动内部处理组件移动和调整大小，使 GUI 布局正常工作，而不管程序是否正接收这些事件。
 <P>
除了充当其他组件相关事件（InputEvent、FocusEvent、WindowEvent 和 ContainerEvent）的基类之外，此类还定义了指示组件大小、位置或可见性方面的更改的事件。 
 <P>
当组件被移动、调整大小、呈现为不可见或再次可见时，此低级别事件由组件对象（比如 List）生成。事件被传递给每一个 <code>ComponentListener</code> 或 <code>ComponentAdapter</code> 对象，这些对象已使用组件的 <code>addComponentListener</code> 方法注册，以接收这类事件。（<code>ComponentAdapter</code> 对象实现 <code>ComponentListener</code> 接口。）当发生该事件时，所有这类侦听器对象都获得此 <code>ComponentEvent</code>。

@see ComponentAdapter
@see ComponentListener
@see <a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/componentlistener.html">Tutorial: Writing a Component Listener</a>

@author Carl Quinn
@version 1.27 12/19/03
@since 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ComponentEvent.COMPONENT_FIRST
<!-- END KEY -->
<!-- BEGIN DATA -->
用于组件事件的 id 范围的起始编号。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ComponentEvent.COMPONENT_LAST
<!-- END KEY -->
<!-- BEGIN DATA -->
用于组件事件的 id 范围的结束编号。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ComponentEvent.COMPONENT_MOVED
<!-- END KEY -->
<!-- BEGIN DATA -->
此事件指示组件位置已更改。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ComponentEvent.COMPONENT_RESIZED
<!-- END KEY -->
<!-- BEGIN DATA -->
此事件指示组件大小已更改。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ComponentEvent.COMPONENT_SHOWN
<!-- END KEY -->
<!-- BEGIN DATA -->
此事件指示组件已变得可见。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ComponentEvent.COMPONENT_HIDDEN
<!-- END KEY -->
<!-- BEGIN DATA -->
此事件指示组件呈现为不可见。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ComponentEvent(Component source, int id)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>ComponentEvent</code> 对象。
<p>注意，传入无效 <code>id</code> 会导致未指定的行为。如果 <code>source</code> 为 <code>null</code>，则此方法抛出 <code>IllegalArgumentException</code>。

@param source 发起事件的 <code>Component</code>
@param id     指示事件类型的整数
@throws IllegalArgumentException 如果 <code>source</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.event.ComponentEvent.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回事件的始发者。

@return 发起事件的 <code>Component</code> 对象，如果该对象不是一个 <code>Component</code>，则返回 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.event.ComponentEvent.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回标识此事件的参数字符串。此方法对于事件记录和调试很有用。

@return 标识事件及其属性的字符串

<!-- END DATA -->
