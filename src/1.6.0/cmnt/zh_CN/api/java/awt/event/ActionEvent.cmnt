<!-- BEGIN KEY -->
public class java.awt.event.ActionEvent extends java.awt.AWTEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
指示发生了组件定义的动作的语义事件。当特定于组件的动作（比如被按下）发生时，由组件（比如 <code>Button</code>）生成此高级别事件。事件被传递给每一个 <code>ActionListener</code> 对象，这些对象是使用组件的 <code>addActionListener</code> 方法注册的，用以接收这类事件。
 <p>
<b>注：</b>要使用键盘在 <code>Button</code> 上触发 <code>ActionEvent</code>，请使用空格键。
 <P>
实现 <code>ActionListener</code> 接口的对象在发生事件时获取此 <code>ActionEvent</code>。因此，侦听器不必处理个别鼠标移动和鼠标单击的细节，而是可以处理像&ldquo;按下按钮&rdquo;这样的&ldquo;有意义&rdquo;（语义）事件。
  
@see ActionListener
@see <a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/eventmodel.html">Tutorial: Java 1.1 Event Model</a>


@author Carl Quinn
@version 1.29 01/28/04
@since 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ActionEvent.SHIFT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
shift 修饰符。指示 shift 键在发生事件期间是否被按下的指示器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ActionEvent.CTRL_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
Ctrl 修饰符。指示 Ctrl 键在发生事件期间是否被按下的指示器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ActionEvent.META_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->

meta 修饰符。指示 meta 键在发生事件期间是否被按下的指示器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ActionEvent.ALT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->

alt 修饰符。指示 alt 键在发生事件期间是否被按下的指示器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ActionEvent.ACTION_FIRST
<!-- END KEY -->
<!-- BEGIN DATA -->
用于标识动作事件的 ID 序列的起始编号。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ActionEvent.ACTION_LAST
<!-- END KEY -->
<!-- BEGIN DATA -->
用于标识动作事件的 ID 序列的结束编号。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ActionEvent.ACTION_PERFORMED
<!-- END KEY -->
<!-- BEGIN DATA -->
此事件 id 指示发生了有意义的动作。

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String java.awt.event.ActionEvent.actionCommand
<!-- END KEY -->
<!-- BEGIN DATA -->
给出有关实际造成该事件原因的更多细节的非本地化字符串。此信息完全特定于触发该事件的组件。

@serial
@see #getActionCommand

<!-- END DATA -->
<!-- BEGIN KEY -->
 long java.awt.event.ActionEvent.when
<!-- END KEY -->
<!-- BEGIN DATA -->
发生此事件时的时间戳。因为 ActionEvent 是一个高级别语义事件，所以时间戳通常与基础 InputEvent 相同。

@serial
@see #getWhen

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.event.ActionEvent.modifiers
<!-- END KEY -->
<!-- BEGIN DATA -->
这表示被选定的修饰符，并被用来确定所选定键的状态。如果没有已选定的修饰符，那么它将默认为零。

@serial
@see #getModifiers

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ActionEvent(Object source, int id, String command)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>ActionEvent</code> 对象。
 <p>
注意，传入无效 <code>id</code> 会导致未指定的行为。如果 <code>source</code> 为 <code>null</code>，则此方法抛出 <code>IllegalArgumentException</code>。为 <code>null</code> 的 <code>command</code> 字符串是合法的，但不建议使用。

@param source  发起事件的对象
@param id      标识事件的整数
@param command 一个字符串，它可以用来指定与事件所相关的一条命令（可能是几个中的一个）
@throws IllegalArgumentException 如果 <code>source</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ActionEvent(Object source, int id, String command, int modifiers)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用修改键构造一个 <code>ActionEvent</code> 对象。
 <p>
注意，传入无效 <code>id</code> 会导致未指定的行为。如果 <code>source</code> 为 <code>null</code>，则此方法抛出 <code>IllegalArgumentException</code>。为 <code>null</code> 的 <code>command</code> 字符串是合法的，但不建议使用。

@param source  发起事件的对象
@param id      标识事件的整数
@param command 一个字符串，它可以用来指定与事件所相关的一条命令（可能是几个中的一个）
@param modifiers 进行此动作期间按下的修改键
@throws IllegalArgumentException 如果 <code>source</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ActionEvent(Object source, int id, String command, long when, int modifiers)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定修改键和时间戳构造一个 <code>ActionEvent</code> 对象。
 <p>
注意，传入无效 <code>id</code> 会导致未指定的行为。如果 <code>source</code> 为 <code>null</code>，则此方法抛出 <code>IllegalArgumentException</code>。为 <code>null</code> 的 <code>command</code> 字符串是合法的，但不建议使用。

@param source  发起事件的对象
@param id      标识事件的整数
@param command 一个字符串，它可以用来指定与事件所相关的一条命令（可能是几个中的一个）
@param when      发生事件的时间
@param modifiers 进行此动作期间按下的修改键
@throws IllegalArgumentException 如果 <code>source</code> 为 null

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.event.ActionEvent.getActionCommand()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此动作相关的命令字符串。这使得 &quot;modal&quot; 组件可以由其当前的状态，通过此字符串来得到它能够产生的几个命令之一。例如，单个按钮可以在&ldquo;显示详细信息&rdquo;和&ldquo;隐藏详细信息&rdquo;之间切换。在所有情况下，源对象和事件都将是相同的，但命令字符串将会标识出实际对应的动作。
 <p>
注意，如果将 <code>null</code> 命令字符串传递给此 <code>ActionEvent</code> 的构造方法，则此方法返回 <code>null</code>。

@return 标识此事件命令的字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.awt.event.ActionEvent.getWhen()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回发生此事件时的时间戳。因为 ActionEvent 是一个高级别语义事件，所以时间戳通常与基础 InputEvent 相同。

@return 此事件的时间戳
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.ActionEvent.getModifiers()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回发生此动作事件期间按下的修改键。
 
@return 修饰符常量的按位或

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.event.ActionEvent.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回标识此动作事件的参数字符串。此方法对于事件记录和调试很有用。
 
@return 标识事件及其相关命令的字符串

<!-- END DATA -->
