<!-- BEGIN KEY -->
public class java.awt.event.ItemEvent extends java.awt.AWTEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
指示项被选定或取消选定的语义事件。此高级事件是在用户已选定项或取消选定项时由 ItemSelectable 对象（如 List）生成的。该事件被传递到每个 <code>ItemListener</code> 对象，这些对象都已使用组件的 <code>addItemListener</code> 方法注册接收此类事件。 
 <P>
实现 <code>ItemListener</code> 接口的对象将在事件发生时获取此 <code>ItemEvent</code>。侦听器避开处理具体鼠标移动和鼠标单击的细节问题，转而处理诸如&ldquo;已选定项&rdquo;或&ldquo;已取消选定项&rdquo;之类的&ldquo;有意义的&rdquo;（语义）事件。 

@version 1.28 12/19/03
@author Carl Quinn

@see java.awt.ItemSelectable
@see ItemListener
@see <a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/itemlistener.html">Tutorial: Writing an Item Listener</a>


@since 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ItemEvent.ITEM_FIRST
<!-- END KEY -->
<!-- BEGIN DATA -->
项事件使用的 id 范围内的起始编号。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ItemEvent.ITEM_LAST
<!-- END KEY -->
<!-- BEGIN DATA -->
项事件使用的 id 范围内的结束编号。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ItemEvent.ITEM_STATE_CHANGED
<!-- END KEY -->
<!-- BEGIN DATA -->

此事件 id 指示项状态已更改。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ItemEvent.SELECTED
<!-- END KEY -->
<!-- BEGIN DATA -->
此状态更改值指示项被选定。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ItemEvent.DESELECTED
<!-- END KEY -->
<!-- BEGIN DATA -->

此状态更改值指示已选定的项被取消选定。

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.Object java.awt.event.ItemEvent.item
<!-- END KEY -->
<!-- BEGIN DATA -->
其选择状态已更改的项。

@serial
@see #getItem()

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.event.ItemEvent.stateChange
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>stateChange</code> 指示已选定还是已取消选定 <code>item</code>。

@serial
@see #getStateChange()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ItemEvent(ItemSelectable source, int id, Object item, int stateChange)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>ItemEvent</code> 对象。
<p>注意，传递无效 <code>id</code> 会导致不确定的行为。如果 <code>source</code> 为 <code>null</code>，则此方法抛出 <code>IllegalArgumentException</code>。

@param source 产生事件的 <code>ItemSelectable</code> 对象
@param id     标识事件类型的整数
@param item   一个对象，即受事件影响的项
@param stateChange 指示已选定还是已取消选定项的整数
@throws IllegalArgumentException 如果 <code>source</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.ItemSelectable java.awt.event.ItemEvent.getItemSelectable()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回事件的产生程序。

@return 产生事件的 ItemSelectable 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.event.ItemEvent.getItem()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回受事件影响的项。

@return 受事件影响的项（对象）

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.ItemEvent.getStateChange()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回状态更改的类型（已选定或已取消选定）。

@return 指示已选定还是已取消选定项的整数

@see #SELECTED
@see #DESELECTED

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.event.ItemEvent.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回标识此项事件的参数字符串。此方法对事件日志记录和调试很有用。

@return 标识事件及其属性的字符串

<!-- END DATA -->
