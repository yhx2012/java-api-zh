<!-- BEGIN KEY -->
public class java.awt.event.HierarchyEvent extends java.awt.AWTEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
指示 <code>Component</code> 所属的 <code>Component</code> 层次结构发生更改的事件。
 <ul>
<li>层次结构更改事件 (HierarchyListener)
     <ul>
<li> 添加一个祖先
<li> 移除一个祖先
<li> 层次结构变得可以显示
<li> 层次结构变得不可显示
<li> 显示在屏幕上的层次结构（既包括可见的，也包括不可见的）
<li> 屏幕上隐藏的层次结构（可见的或不可见的）
     </ul>
<li>祖先重塑事件 (HierarchyBoundsListener)
     <ul>
<li> 重新调整祖先的大小
<li> 移动一个祖先
     </ul>
 </ul>
 <p>
层次结构事件&ldquo;仅&rdquo;为通知目的而提供。AWT 将自动内部处理层次结构的更改，使 GUI 布局和可显示性正常工作，而不管该程序是否接收这些事件。
 <p>
此事件由 Container 对象（比如 Panel）在 Container 被添加、移除、移动或调整大小时生成，并顺着层次结构向下传递。Component 对象在调用其 <code>addNotify</code>、<code>removeNotify</code>、<code>show</code> 或 <code>hide</code> 方法时，也生成此事件。ANCESTOR_MOVED 和 ANCESTOR_RESIZED 事件被指派到每个 <code>HierarchyBoundsListener</code> 或 <code>HierarchyBoundsAdapter</code> 对象，这些对象已使用 Component 的 <code>addHierarchyBoundsListener</code> 方法注册，以接收这类事件。（<code>HierarchyBoundsAdapter</code> 对象实现 <code>HierarchyBoundsListener</code> 接口。）HIERARCHY_CHANGED 事件被指派到每个 <code>HierarchyListener</code>，这些对象已使用 Component 的 <code>addHierarchyListener</code> 方法注册，以接收这类事件。当发生该事件时，所有这类侦听器对象都获取此 <code>HierarchyEvent</code>。

@author	David Mendenhall
@version	1.12, 12/19/03
@see		HierarchyListener
@see		HierarchyBoundsAdapter
@see		HierarchyBoundsListener
@since 	1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.HierarchyEvent.HIERARCHY_FIRST
<!-- END KEY -->
<!-- BEGIN DATA -->
标记层次结构事件 id 范围的第一个整数 id。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.HierarchyEvent.HIERARCHY_CHANGED
<!-- END KEY -->
<!-- BEGIN DATA -->
指示对整个层次结构树进行修改的事件 id。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.HierarchyEvent.ANCESTOR_MOVED
<!-- END KEY -->
<!-- BEGIN DATA -->
指示祖先 Container 被移动的事件 id。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.HierarchyEvent.ANCESTOR_RESIZED
<!-- END KEY -->
<!-- BEGIN DATA -->
指示祖先 Container 大小被调整的事件 id。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.HierarchyEvent.HIERARCHY_LAST
<!-- END KEY -->
<!-- BEGIN DATA -->
标记祖先事件 id 范围的最后一个整数 id。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.HierarchyEvent.PARENT_CHANGED
<!-- END KEY -->
<!-- BEGIN DATA -->
指示 <code>HIERARCHY_CHANGED</code> 事件是通过 reparenting 操作生成的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.HierarchyEvent.DISPLAYABILITY_CHANGED
<!-- END KEY -->
<!-- BEGIN DATA -->
指示 <code>HIERARCHY_CHANGED</code> 事件是因为层次结构的可显示性发生更改而生成的。要了解层次结构的当前可显示性，调用 <code>Component.isDisplayable</code>。可显示性更改发生在响应对 <code>Component.addNotify</code> 和 <code>Component.removeNotify</code> 的显式或隐式调用时。

@see java.awt.Component#isDisplayable()
@see java.awt.Component#addNotify()
@see java.awt.Component#removeNotify()

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.HierarchyEvent.SHOWING_CHANGED
<!-- END KEY -->
<!-- BEGIN DATA -->
指示 <code>HIERARCHY_CHANGED</code> 事件是因为层次结构的显示状态发生更改而生成的。要了解层次结构的当前显示状态，请调用 <code>Component.isShowing</code>。显示状态更改发生在层次结构可显示或可见时。可见性更改发生在响应对 <code>Component.show</code> 和 <code>Component.hide</code> 的显式或隐式调用时。

@see java.awt.Component#isShowing()
@see java.awt.Component#addNotify()
@see java.awt.Component#removeNotify()
@see java.awt.Component#show()
@see java.awt.Component#hide()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.HierarchyEvent(Component source, int id, Component changed, Container changedParent)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>HierarchyEvent</code> 对象来标识 <code>Component</code> 层次结构中的更改。
<p>注意，传入无效 <code>id</code> 会导致未指定的行为。如果 <code>source</code> 为 <code>null</code>，则此方法抛出 <code>IllegalArgumentException</code>。

@param source          发起事件的 <code>Component</code> 对象
@param id              指示事件类型的整数
@param changed         位于被更改层次结构顶部的 <code>Component</code>
@param changedParent   <code>changed</code> 的父级；它可以是该更改之前或之后的父级，这取决于更改的类型
@throws IllegalArgumentException 如果 <code>source</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.HierarchyEvent(Component source, int id, Component changed, Container changedParent, long changeFlags)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>HierarchyEvent</code> 对象来标识 <code>Component</code> 层次结构中的更改。
<p>注意，传递无效的 <code>id</code> 会导致不明确的行为。如果 <code>source</code> 为 <code>null</code>，则此方法抛出 <code>IllegalArgumentException</code>。

@param source          发起事件的 <code>Component</code> 对象
@param id              指示事件类型的整数
@param changed         位于被更改层次结构顶部的 <code>Component</code>
@param changedParent   <code>changed</code> 的父级；它可以是该更改之前或之后的父级，这取决于更改的类型
@param changeFlags     指示此事件对象中表示的 <code>HIERARCHY_CHANGED</code> 事件类型的位掩码
@throws IllegalArgumentException 如果 <code>source</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.event.HierarchyEvent.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回事件的始发者。

@return 发起事件的 <code>Component</code> 对象，如果该对象不是一个 <code>Component</code>，则返回 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.event.HierarchyEvent.getChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回位于被更改层次结构顶部的 Component。

@return 更改的 Component

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Container java.awt.event.HierarchyEvent.getChangedParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由 <code>getChanged()</code> 返回的 Component 的父级。对于更改类型为 PARENT_CHANGED 并通过调用 <code>Container.add</code> 实现的 HIERARCHY_CHANGED 事件，返回的父级是添加操作之后的父级。对于更改类型为 PARENT_CHANGED 并通过调用 <code>Container.remove</code> 实现的 HIERARCHY_CHANGED 事件，返回的父级是移除操作之前的父级。对于其他所有事件和类型，返回的父级是操作期间的父级。

@return 所更改 Component 的父级

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.awt.event.HierarchyEvent.getChangeFlags()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指示此事件对象中表示的 HIERARCHY_CHANGED 事件类型的位掩码。这些位一起被执行了按位或运算。

@return 位掩码，如果此事件不是 HIERARCHY_CHANGED 事件，则返回 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.event.HierarchyEvent.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回标识此事件的参数字符串。此方法对于事件记录和调试很有用。

@return 标识事件及其属性的字符串

<!-- END DATA -->
