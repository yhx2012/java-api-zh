<!-- BEGIN KEY -->
public class java.awt.event.ContainerEvent extends java.awt.event.ComponentEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
指示容器内容因为添加或移除组件而更改的低级别事件。
 <P>
这些容器事件&ldquo;仅&rdquo;为通知目的而提供；AWT 将自动处理内部容器内容的更改，使程序正常工作，而不管该程序是否接收这些事件。
 <P>
在向容器对象（比如 Panel）添加组件或从中移除组件时，容器对象将生成此低级别事件。事件被传递给每一个 <code>ContainerListener</code> 或 <code>ContainerAdapter</code> 对象，这些对象使用组件的 <code>addContainerListener</code> 方法注册，以接收这类事件。（<code>ContainerAdapter</code> 对象实现 <code>ContainerListener</code> 接口。）当发生该事件时，所有这类侦听器对象都获得此 <code>ContainerEvent</code>。

@see ContainerAdapter
@see ContainerListener
@see <a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/containerlistener.html">Tutorial: Writing a Container Listener</a>


@author Tim Prinzing
@author Amy Fowler
@version 1.18 12/19/03
@since 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ContainerEvent.CONTAINER_FIRST
<!-- END KEY -->
<!-- BEGIN DATA -->
用于容器事件的 id 范围的起始编号。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ContainerEvent.CONTAINER_LAST
<!-- END KEY -->
<!-- BEGIN DATA -->
用于容器事件的 id 范围的结束编号。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ContainerEvent.COMPONENT_ADDED
<!-- END KEY -->
<!-- BEGIN DATA -->
此事件指示组件已被添加到容器中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ContainerEvent.COMPONENT_REMOVED
<!-- END KEY -->
<!-- BEGIN DATA -->
此事件指示已从容器中移除组件。

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.Component java.awt.event.ContainerEvent.child
<!-- END KEY -->
<!-- BEGIN DATA -->
正被添加到 Container 中或正从 Container 中移除的非 null 组件。

@serial
@see #getChild()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ContainerEvent(Component source, int id, Component child)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>ContainerEvent</code> 对象。
<p>注意，传入无效 <code>id</code> 会导致未指定的行为。如果 <code>source</code> 为 <code>null</code>，则此方法抛出 <code>IllegalArgumentException</code>。
 
@param source 发起事件的 <code>Component</code> 对象（容器）
@param id     指示事件类型的整数
@param child  被添加或移除的组件
@throws IllegalArgumentException 如果 <code>source</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Container java.awt.event.ContainerEvent.getContainer()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回事件的始发者。

@return 发起事件的 <code>Container</code> 对象，如果该对象不是一个 <code>Container</code>，则返回 <code>null</code>。  

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.event.ContainerEvent.getChild()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回受事件影响的组件。

@return  被添加或移除的 Component 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.event.ContainerEvent.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回标识此事件的参数字符串。此方法对于事件记录和调试很有用。

@return 标识事件及其属性的字符串

<!-- END DATA -->
