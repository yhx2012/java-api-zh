<!-- BEGIN KEY -->
public class java.awt.event.FocusEvent extends java.awt.event.ComponentEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
指示 Component 已获得或失去输入焦点的低级别事件。此低级别事件由 Component（比如 TextField）生成。事件被传递给每一个 <code>FocusListener</code> 或 <code>FocusAdapter</code> 对象，这些对象使用 Component 的 <code>addFocusListener</code> 方法注册，以接收这类事件。（<code>FocusAdapter</code> 对象实现 <code>FocusListener</code> 接口。）当发生该事件时，所有这类侦听器对象都将获得此 <code>FocusEvent</code>。
 <p>
有两个焦点事件级别：持久性的和暂时性的。当焦点直接从一个 Component 移动到另一个 Component 时（比如通过调用 requestFocus()，或者用户使用 TAB 键遍历 Component 时），发生持久性焦点更改事件。当由于另一个操作（比如释放 Window 或拖动 Scrollbar）间接引起 Component 暂时失去焦点时，发生暂时性焦点更改事件。在这种情况下，一旦该操作结束，将自动恢复原始焦点状态，对于释放 Window 的情况来说，重新激活 Window 就能恢复原始焦点状态。持久性焦点事件和暂时性焦点事件使用 FOCUS_GAINED 和 FOCUS_LOST 事件 id 传递；可以使用 isTemporary() 方法区分事件的级别。
  
@see FocusAdapter
@see FocusListener
@see <a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/focuslistener.html">Tutorial: Writing a Focus Listener</a>


@author Carl Quinn
@author Amy Fowler
@version 1.30 12/19/03
@since 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.FocusEvent.FOCUS_FIRST
<!-- END KEY -->
<!-- BEGIN DATA -->
用于焦点事件的 id 范围的起始编号。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.FocusEvent.FOCUS_LAST
<!-- END KEY -->
<!-- BEGIN DATA -->
用于焦点事件的 id 范围的结束编号。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.FocusEvent.FOCUS_GAINED
<!-- END KEY -->
<!-- BEGIN DATA -->
此事件指示 Component 现在是焦点所有者。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.FocusEvent.FOCUS_LOST
<!-- END KEY -->
<!-- BEGIN DATA -->
此事件指示 Component 不再是焦点所有者。

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean java.awt.event.FocusEvent.temporary
<!-- END KEY -->
<!-- BEGIN DATA -->
焦点事件可以有两个不同的级别，即持久性的和暂时性的。如果某项操作暂时取走焦点，且一旦事件完成就将焦点还回，则将它设置为 true。否则，将它设置为 false。

@serial
@see #isTemporary

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.FocusEvent(Component source, int id, boolean temporary, Component opposite)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>FocusEvent</code> 对象，它具有指定的暂时状态和对立 <code>Component</code>。对立 <code>Component</code> 是在此焦点更改中涉及的另一个 <code>Component</code>。对于 <code>FOCUS_GAINED</code> 事件，该组件是失去焦点的 <code>Component</code>。对于 <code>FOCUS_LOST</code> 事件，该组件是获得焦点的 <code>Component</code>。如果此焦点更改发生在本机应用程序、不同 VM 中的 Java 应用程序或没有其他 <code>Component</code> 的情况下，则对立 <code>Component</code> 为 <code>null</code>。
<p>注意，传入无效 <code>id</code> 会导致未指定的行为。如果 <code>source</code> 为 <code>null</code>，则此方法抛出 <code>IllegalArgumentException</code>。
 
@param source     发起事件的 <code>Component</code> 
@param id         <code>FOCUS_GAINED</code> 或 <code>FOCUS_LOST</code>
@param temporary  如果焦点更改是暂时的，则为 <code>true</code>；否则为 <code>false</code>
@param opposite   焦点更改中涉及的另一个 Component，或者为 <code>null</code>
@throws IllegalArgumentException 如果 <code>source</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.FocusEvent(Component source, int id, boolean temporary)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>FocusEvent</code> 对象，并将标识更改是否为暂时的。
<p>注意，传入无效 <code>id</code> 会导致未指定的行为。如果 <code>source</code> 为 <code>null</code>，则此方法抛出 <code>IllegalArgumentException</code>。

@param source    发起事件的 <code>Component</code>
@param id        指示事件类型的整数
@param temporary 如果焦点更改是暂时的，则为 <code>true</code>；否则为 <code>false</code>
@throws IllegalArgumentException 如果 <code>source</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.FocusEvent(Component source, int id)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>FocusEvent</code> 对象，并将它标识为一个持久性焦点更改。
<p>注意，传入无效 <code>id</code> 会导致未指定的行为。如果 <code>source</code> 为 <code>null</code>，则此方法抛出 <code>IllegalArgumentException</code>。

@param source 发起事件的 <code>Component</code>
@param id     指示事件类型的整数
@throws IllegalArgumentException 如果 <code>source</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.event.FocusEvent.isTemporary()
<!-- END KEY -->
<!-- BEGIN DATA -->
将焦点更改事件标识为暂时性的或持久性的。

@return 如果焦点更改是暂时性的，则返回 <code>true</code>；否则返回 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.event.FocusEvent.getOppositeComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此焦点更改中涉及的另一个 Component。对于 FOCUS_GAINED 事件，该组件是失去焦点的 Component。对于 FOCUS_LOST 事件，该组件是获得焦点的 Component。如果此焦点更改发生在本机应用程序、不同 VM 或上下文中的 Java 应用程序或没有其他 Component 的情况下，则返回 null。

@return 焦点更改中涉及的另一个 Component，或返回 null
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.event.FocusEvent.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回标识此事件的参数字符串。此方法对于事件记录和调试很有用。

@return 标识事件及其属性的字符串

<!-- END DATA -->
