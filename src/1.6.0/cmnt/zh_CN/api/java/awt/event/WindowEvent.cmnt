<!-- BEGIN KEY -->
public class java.awt.event.WindowEvent extends java.awt.event.ComponentEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
指示窗口状态改变的低级别事件。当打开、关闭、激活、停用、图标化或取消图标化 Window 对象时，或者焦点转移到 Window 内或移出 Window 时，由 Window 对象生成此低级别事件。
 <P>
该事件被传递给每一个使用窗口的 <code>addWindowListener</code> 方法注册以接收这种事件的 <code>WindowListener</code> 或 <code>WindowAdapter</code> 对象。（<code>WindowAdapter</code> 对象实现 <code>WindowListener</code> 接口。）发生事件时，所有此类侦听器对象都将获取此 <code>WindowEvent</code>。

@author Carl Quinn
@author Amy Fowler
@version 1.34, 12/19/03

@see WindowAdapter
@see WindowListener
@see <a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/windowlistener.html">Tutorial: Writing a Window Listener</a>


@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_FIRST
<!-- END KEY -->
<!-- BEGIN DATA -->
用于窗口事件的 id 范围的起始编号。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_OPENED
<!-- END KEY -->
<!-- BEGIN DATA -->
窗口打开事件。仅在第一次使窗口可见时才传递此事件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_CLOSING
<!-- END KEY -->
<!-- BEGIN DATA -->
&ldquo;窗口正在关闭&rdquo;事件。当用户试图从窗口的系统菜单中关闭该窗口时传递此事件。在处理此事件时，如果程序没有显式地隐藏或释放窗口，则取消窗口关闭操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_CLOSED
<!-- END KEY -->
<!-- BEGIN DATA -->
窗口关闭事件。调用 dispose 使窗口关闭后传递此事件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_ICONIFIED
<!-- END KEY -->
<!-- BEGIN DATA -->
窗口图标化事件。窗口从正常状态变为最小化状态时传递此事件。对于很多平台而言，已最小化的窗口将显示为窗口 iconImage 属性中所指定的图标。
@see java.awt.Frame#setIconImage

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_DEICONIFIED
<!-- END KEY -->
<!-- BEGIN DATA -->
窗口取消图标化事件类型。窗口从最小化状态变为正常状态时传递此事件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_ACTIVATED
<!-- END KEY -->
<!-- BEGIN DATA -->
窗口激活事件类型。Window 成为活动 Window 时传递此事件。只有框架或对话框可以成为活动 Window。本机的窗口操作系统可能使用特殊装饰表示活动 Window 或其子窗口，如高亮显示标题栏。活动 Window 要么是聚焦 Window，要么是作为聚焦 Window 所有者的第一个 Frame 或 Dialog。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_DEACTIVATED
<!-- END KEY -->
<!-- BEGIN DATA -->
窗口停用事件类型。Window 不再是活动 Window 时传递此事件。只有框架或对话框可以成为活动 Window。本机的窗口操作系统可能使用特殊装饰表示活动 Window 或其子窗口，如高亮显示标题栏。活动 Window 要么是聚焦 Window，要么是作为聚焦 Window 所有者的第一个 Frame 或 Dialog。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_GAINED_FOCUS
<!-- END KEY -->
<!-- BEGIN DATA -->
窗口获得焦点事件类型。Window 成为聚焦 Window，即该 Window 或其某个子组件接收键盘事件时传递此事件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_LOST_FOCUS
<!-- END KEY -->
<!-- BEGIN DATA -->
窗口失去焦点事件类型。Window 不再是聚焦 Window，即该 Window 或其某个子组件不再接收键盘事件时传递此事件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_STATE_CHANGED
<!-- END KEY -->
<!-- BEGIN DATA -->
窗口状态改变事件类型。Window 的状态因为图标化、最大化等原因而发生改变时传递此事件。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_LAST
<!-- END KEY -->
<!-- BEGIN DATA -->
用于窗口事件的 id 范围的结束编号。

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.event.WindowEvent.oldState
<!-- END KEY -->
<!-- BEGIN DATA -->
TBS

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.WindowEvent(Window source, int id, Window opposite, int oldState, int newState)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>WindowEvent</code> 对象。
<p>注意，传递无效的 <code>id</code> 会导致不明确的行为。如果 <code>source</code> 为 <code>null</code>，则此方法抛出 <code>IllegalArgumentException</code>。

@param source	产生该事件的 <code>Window</code> 对象
@param id 指示事件类型的整数。
@param opposite  焦点或活动性变化中涉及的其他窗口，或者为 <code>null</code>
@param oldState  窗口以前的状态，用于窗口状态改变事件
@param newState  窗口的新状态，用于窗口状态改变事件
@throws IllegalArgumentException 如果 <code>source</code> 为 null
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.WindowEvent(Window source, int id, Window opposite)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有指定对应 <code>Window</code> 的 <code>WindowEvent</code> 对象。对应 <code>Window</code> 是此焦点或活动性变化中所涉及的其他 <code>Window</code>。对于 <code>WINDOW_ACTIVATED</code> 或 <code>WINDOW_GAINED_FOCUS</code> 事件，这是失去活动性或焦点的 <code>Window</code>。对于 <code>WINDOW_DEACTIVATED</code> 或 <code>WINDOW_LOST_FOCUS</code> 事件，这是获得活动性或焦点的 <code>Window</code>。如果本机应用程序、不同 VM 中的 Java 应用程序或没有其他 <code>Window</code> 的窗口发生了这种焦点改变，则对应 Window 为 <code>null</code>。
<p>注意，传递无效的 <code>id</code> 会导致不明确的行为。如果 <code>source</code> 为 <code>null</code>，则此方法抛出 <code>IllegalArgumentException</code>。

@param source  产生该事件的 <code>Window</code> 对象
@param id   <code>WINDOW_ACTIVATED</code>、<code>WINDOW_DEACTIVATED</code>、<code>WINDOW_GAINED_FOCUS</code> 或 <code>WINDOW_LOST_FOCUS</code>。因为其他 <code>WindowEvent</code> 类型事件的对应 <code>Window</code> 总是为 <code>null</code>，所以不希望将此构造方法用于这种类型的事件
@param opposite  焦点或活动性变化中涉及的其他 <code>Window</code>，或者为 <code>null</code>
@throws IllegalArgumentException 如果 <code>source</code> 为 null
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.WindowEvent(Window source, int id, int oldState, int newState)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有指定的以前和新窗口状态的 <code>WindowEvent</code> 对象。
<p>注意，传递无效的 <code>id</code> 会导致不明确的行为。如果 <code>source</code> 为 <code>null</code>，则此方法抛出 <code>IllegalArgumentException</code>。
 
@param source  产生该事件的 <code>Window</code> 对象
@param id	<code>WINDOW_STATE_CHANGED</code> 事件类型。因为对于其他 <code>WindowEvent</code> 事件类型而言，以前和新的窗口状态是无意义的，所以不希望将此构造方法用于其他事件类型。
@param oldState  表示以前窗口状态的整数
@param newState  表示新窗口状态的整数
@throws IllegalArgumentException  如果 <code>source</code> 为 null
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.WindowEvent(Window source, int id)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>WindowEvent</code> 对象。
<p>注意，传递无效的 <code>id</code> 会导致不明确的行为。如果 <code>source</code> 为 <code>null</code>，则此方法抛出 <code>IllegalArgumentException</code>。

@param source 产生该事件的 <code>Window</code> 对象
@param id   指示事件类型的整数
@throws IllegalArgumentException 如果 <code>source</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Window java.awt.event.WindowEvent.getWindow()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回事件的发起方。

@return 引起该事件的 Window 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Window java.awt.event.WindowEvent.getOppositeWindow()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在此焦点或活动性变化中所涉及的其他 Window。对于 WINDOW_ACTIVATED 或 WINDOW_GAINED_FOCUS 事件，这是失去活动性或焦点的 Window。对于 WINDOW_DEACTIVATED 或 WINDOW_LOST_FOCUS 事件，这是获得活动性或焦点的 Window。对于所有其他 WindowEvent 类型，或者本机应用程序、不同 VM 或上下文中的 Java 应用程序或没有其他 Window 的窗口发生了焦点或活动性变化，则返回 null。

@return 焦点或活动性变化中所涉及的其他 Window，或者为 null
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.WindowEvent.getOldState()
<!-- END KEY -->
<!-- BEGIN DATA -->
对于 <code>WINDOW_STATE_CHANGED</code> 事件，返回以前的窗口状态。该状态表示为逐位掩码。
 <ul>
 <li><code>NORMAL</code>
 <br>指示不设置状态位。
 <li><code>ICONIFIED</code>
 <li><code>MAXIMIZED_HORIZ</code>
 <li><code>MAXIMIZED_VERT</code>
 <li><code>MAXIMIZED_BOTH</code>
 <br>连接 <code>MAXIMIZED_HORIZ</code> 和 <code>MAXIMIZED_VERT</code>。
 </ul>

@return 以前窗口状态的逐位掩码
@see java.awt.Frame#getExtendedState()
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.WindowEvent.getNewState()
<!-- END KEY -->
<!-- BEGIN DATA -->
对于 <code>WINDOW_STATE_CHANGED</code> 事件，返回新的窗口状态。该状态表示为逐位掩码。
 <ul>
 <li><code>NORMAL</code>
 <br>指示不设置状态位。
 <li><code>ICONIFIED</code>
 <li><code>MAXIMIZED_HORIZ</code>
 <li><code>MAXIMIZED_VERT</code>
 <li><code>MAXIMIZED_BOTH</code>
 <br>连接 <code>MAXIMIZED_HORIZ</code> 和 <code>MAXIMIZED_VERT</code>。
 </ul>

@return 新窗口状态的逐位掩码
@see java.awt.Frame#getExtendedState()
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.event.WindowEvent.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回标识此事件的参数字符串。此方法对于事件记录和调试很有用。

@return 标识事件及其属性的字符串

<!-- END DATA -->
