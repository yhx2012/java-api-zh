<!-- BEGIN KEY -->
public class java.awt.DefaultFocusTraversalPolicy extends java.awt.ContainerOrderFocusTraversalPolicy
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 Container 中的子 Component 的顺序确定遍历顺序的 FocusTraversalPolicy。该策略将从特定焦点循环根对 Component 层次结构进行前序遍历，并根据 <code>Container.getComponents()</code> 返回的数组顺序遍历 Container 的子容器。不可视和不可显示的部分层次结构将不被搜索。
 <p>
如果通过重写 <code>Component.isFocusTraversable()</code> 或 <code>Component.isFocusable()</code>，或者通过调用 <code>Component.setFocusable()</code>，客户机代码已经明确设置了 Component 的可聚焦性，则 DefaultFocusTraversalPolicy 的行为完全类似于 ContainerOrderFocusTraversalPolicy。不过，如果 Component 依赖于默认的可聚焦性，则 DefaultFocusTraversalPolicy 将拒绝具有不可聚焦同位体的所有 Component。这是所有 AWT Container 的默认 FocusTraversalPolicy。
 <p>
同位体的可聚焦性与实现有关。Sun 建议特定本机平台的所有实现都构造具有相同可聚焦性的同位体。对 Windows 和 Unix 的建议是：Canvases、Labels、Panels、Scrollbars、ScrollPanes、Windows 和轻量级 Component 都有不可聚焦的同位体，而其他所有 Component 都有可聚焦的同位体。这些建议被用于 Sun AWT 实现中。注意，Component 的同位体的可聚焦性不同于（并且不会影响）其自身的可聚焦性。
 <p>
有关更多信息，请参阅 <em>The Java Tutorial</em> 中的 <a href="http://java.sun.com/docs/books/tutorial/uiswing/misc/focus.html">How to Use the Focus Subsystem</a> 一节以及 <a href="../../java/awt/doc-files/FocusSpec.html">Focus Specification</a>。

@author David Mendenhall
@version 1.5, 12/19/03

@see Container#getComponents
@see Component#isFocusable
@see Component#setFocusable
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.awt.DefaultFocusTraversalPolicy.accept(Component aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定是否可以接受选择某个 Component 作为新的焦点所有者。该 Component 必须是可视的、可显示的和能够接受的。如果通过重写 <code>Component.isFocusTraversable()</code> 或 <code>Component.isFocusable()</code>，或者通过调用 <code>Component.setFocusable()</code>，客户机代码已经明确设置 Component 的可聚焦性，则只在 Component 是可聚焦的组件时，才会接受它。不过，如果 Component 依赖于默认可聚焦性，那么所有的 Canvases、Labels、Panels、Scrollbars、ScrollPanes、Windows 和轻量级 Component 都将遭到拒绝。

@param aComponent 将测试其是否适合作为焦点所有者的 Component
@return 如果 aComponent 满足上述要求，则返回 <code>true</code>；否则返回 <code>false</code>

<!-- END DATA -->
