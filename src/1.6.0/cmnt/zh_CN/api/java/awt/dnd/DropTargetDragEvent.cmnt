<!-- BEGIN KEY -->
public class java.awt.dnd.DropTargetDragEvent extends java.awt.dnd.DropTargetEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
通过 dragEnter() 和 dragOver() 方法将 <code>DropTargetDragEvent</code> 发送给 <code>DropTargetListener</code>。
<p>
<code>DropTargetDragEvent</code> 报告<i>源 drop 操作</i> 和<i>用户 drop 操作</i>，这些操作反映了 drag 操作的当前状态。
<p>
<i>源 drop 操作</i> 是 <code>DnDConstants</code> 的位掩码，DnDConstants 表示受此 drag 操作的 drag 源支持的 drop 操作集合。
<p>
<i>用户 drop 操作</i> 取决于受 drag 源支持的 drop 操作和用户选定的 drop 操作。在进行 drag 操作中，用户可以通过按下修正键选择一个 drop 操作。 
<pre> 
   Ctrl + Shift -&gt; ACTION_LINK
   Ctrl         -&gt; ACTION_COPY
   Shift        -&gt; ACTION_MOVE
</pre> 
当用户选择一个 drop 操作时，如果此 drop 操作受 drag 源支持，则<i>用户 drop 操作</i> 为 <code>DnDConstants</code> 之一，如果此 drop 操作不受 drag 源支持，则用户 drop 操作为 <code>DnDConstants.ACTION_NONE</code>。
<p>
如果用户没有选 drop 操作，则表示受 drag 源支持的 drop 操作集合的 <code>DnDConstants</code> 集合是先搜索 <code>DnDConstants.ACTION_MOVE</code>，然后搜索 <code>DnDConstants.ACTION_COPY</code>，最后搜索 <code>DnDConstants.ACTION_LINK</code> 而得到的，并且<i>用户 drop 操作</i> 是找到的第一个常量。如果找不到常量，则<i>用户 drop 操作</i> 为 <code>DnDConstants.ACTION_NONE</code>。

@version 	1.24, 05/05/04
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.Point java.awt.dnd.DropTargetDragEvent.location
<!-- END KEY -->
<!-- BEGIN DATA -->
Component 坐标中 drag 光标的热点位置。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.dnd.DropTargetDragEvent.actions
<!-- END KEY -->
<!-- BEGIN DATA -->
源 drop 操作。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.dnd.DropTargetDragEvent.dropAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用户 drop 操作。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DropTargetDragEvent(DropTargetContext dtc, Point cursorLocn, int dropAction, int srcActions)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给出此操作的 <code>DropTargetContext</code>、<code>Component</code> 坐标中 &quot;Drag&quot; <code>Cursor</code> 热点的位置、用户 drop 操作和源 drop 操作的情况下，构造一个 <code>DropTargetDragEvent</code>。
 <P>

@param dtc        此操作的 DropTargetContext
@param cursorLocn Component 坐标中 &quot;Drag&quot; Cursor 热点的位置
@param dropAction 用户 drop 操作
@param srcActions 源 drop 操作
 
@throws NullPointerException 如果 cursorLocn 为 null
@throws <code>IllegalArgumentException</code> 如果 dropAction 不是 <code>DnDConstants</code> 之一。
@throws <code>IllegalArgumentException</code> 如果 srcAction 不是 <code>DnDConstants</code> 的位掩码。
@throws <code>IllegalArgumentException</code> 如果 dtc 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.dnd.DropTargetDragEvent.getLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回一个指示 <code>Component</code> 坐标中 <code>Cursor</code> 当前位置的 <code>Point</code>。
 <P>
@return <code>Component</code> 坐标中光标的当前位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.datatransfer.DataFlavor[] java.awt.dnd.DropTargetDragEvent.getCurrentDataFlavors()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回来自 <code>DropTargetContext</code> 的当前 <code>DataFlavor</code>。
 <P>
@return 来自 DropTargetContext 的当前 DataFlavor

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.awt.datatransfer.DataFlavor> java.awt.dnd.DropTargetDragEvent.getCurrentDataFlavorsAsList()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法以 <code>java.util.List</code> 形式返回当前的 <code>DataFlavor</code>
 <P>
@return 当前 <code>DataFlavor</code> 的 <code>java.util.List</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.dnd.DropTargetDragEvent.isDataFlavorSupported(DataFlavor df)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回一个指示指定的 <code>DataFlavor</code> 是否受支持 <code>boolean</code> 值。
 <P>
@param df 要测试的 <code>DataFlavor</code>
 <P>
@return 特定 DataFlavor 是否受支持

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.dnd.DropTargetDragEvent.getSourceActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回源 drop 操作。
@return 源 drop 操作

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.dnd.DropTargetDragEvent.getDropAction()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回用户 drop 操作。
 
@return 用户 drop 操作

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.datatransfer.Transferable java.awt.dnd.DropTargetDragEvent.getTransferable()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回 Transferable 对象，该对象表示与当前的 drag 操作有关的数据。
 
@return 与 drag 操作有关的 Transferable
@throws InvalidDnDOperationException 如果与 drag 操作有关的数据不可用

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTargetDragEvent.acceptDrag(int dragOperation)
<!-- END KEY -->
<!-- BEGIN DATA -->
接受 drag。如果实现希望接受来自 srcAction 的操作，而不是接受用户选择的操作（表示为 <code>dropAction</code>），则应该从 <code>DropTargetListener</code>、<code>dragEnter</code>、<code>dragOver</code> 和 <code>dropActionChanged</code> 方法来调用此方法。
 
@param dragOperation 目标所接受的操作

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTargetDragEvent.rejectDrag()
<!-- END KEY -->
<!-- BEGIN DATA -->
作为检查 <code>dropAction</code> 或可用的 <code>DataFlavor</code> 类型的结果，拒绝 drag。

<!-- END DATA -->
