<!-- BEGIN KEY -->
public class java.awt.dnd.DropTarget extends java.lang.Object implements java.awt.dnd.DropTargetListener, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
在 Drag 和 Drop 操作期间，当 <code>Component</code> 希望接受 drop 时，<code>DropTarget</code> 与 <code>Component</code> 有关联。
<p>
每个 <code>DropTarget</code> 都与一个 <code>FlavorMap</code> 关联。这之后默认的 <code>FlavorMap</code> 指定 <code>SystemFlavorMap.getDefaultFlavorMap()</code> 所返回的 <code>FlavorMap</code>。

@version 	1.48, 12/19/03
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.dnd.DropTargetContext java.awt.dnd.DropTarget.dropTargetContext
<!-- END KEY -->
<!-- BEGIN DATA -->
与此 DropTarget 关联的 DropTargetContext。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.Component java.awt.dnd.DropTarget.component
<!-- END KEY -->
<!-- BEGIN DATA -->
与此 DropTarget 关联的 Component。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.dnd.DropTarget.actions
<!-- END KEY -->
<!-- BEGIN DATA -->
此 DropTarget 支持的默认允许操作。
 
@see #setDefaultActions 
@see #getDefaultActions 
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean java.awt.dnd.DropTarget.active
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 DropTarget 接受 Drag 和 Drop 操作，则为 <code>true</code>。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DropTarget(Component c, int ops, DropTargetListener dtl, boolean act, FlavorMap fm) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
在给出与之关联的 <code>Component</code>、表示要支持的默认可接受操作的 <code>int</code> 值、执行事件处理的 <code>DropTargetListener</code>、表示 <code>DropTarget</code> 当前是否接受 drop 的 <code>boolean</code> 值和要使用的 <code>FlavorMap</code>（使用默认 <CODE>FlavorMap</CODE> 时为 null）的情况下，创建一个新的 DropTarget。
<p>
仅在已启用时 Component 才会接收 drop。
@param c 	与此 <code>DropTarget</code> 有关联的 <code>Component</code>
@param ops	此 <code>DropTarget</code> 的默认可接受操作
@param dtl	此 <code>DropTarget</code> 的 <code>DropTargetListener</code>
@param act	<code>DropTarget</code> 是否接收 drop。
@param fm	要使用的 <code>FlavorMap</code>，使用默认 <CODE>FlavorMap</CODE> 时为 null
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DropTarget(Component c, int ops, DropTargetListener dtl, boolean act) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
在给出与之关联的 <code>Component</code>、表示支持的默认可接受操作的 <code>int</code> 值、执行事件处理的 <code>DropTargetListener</code> 和表示 <code>DropTarget</code> 当前是否接受 drop 的 <code>boolean</code> 值的情况下，创建一个 <code>DropTarget</code>。
<p>
仅在已启用时 Component 才会接收 drop。
@param c 	与此 <code>DropTarget</code> 有关联的 <code>Component</code> 
@param ops	此 <code>DropTarget</code> 的默认可接受操作 
@param dtl	此 <code>DropTarget</code> 的 <code>DropTargetListener</code> 
@param act	<code>DropTarget</code> 是否接收 drop。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true 
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DropTarget() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>DropTarget</code>

@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DropTarget(Component c, DropTargetListener dtl) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
在给出与之关联的 <code>Component</code> 和执行事件处理的 <code>DropTargetListener</code> 的情况下创建一个 <code>DropTarget</code>。
<p>
仅在已启用时 Component 才会接收 drop。
@param c 	与此 <code>DropTarget</code> 有关联的 <code>Component</code>
@param dtl	此 <code>DropTarget</code> 的 <code>DropTargetListener</code>
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DropTarget(Component c, int ops, DropTargetListener dtl) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
在给出与之关联的 <code>Component</code>、表示支持的默认可接受操作的 <code>int</code> 值和执行事件处理的 <code>DropTargetListener</code> 的情况下，创建一个 <code>DropTarget</code>。
<p>
仅在已启用时 Component 才会接收 drop。
@param c 	与此 <code>DropTarget</code> 有关联的 <code>Component</code>
@param ops	此 <code>DropTarget</code> 的默认可接受操作
@param dtl	此 <code>DropTarget</code> 的 <code>DropTargetListener</code>
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DropTarget.setComponent(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
注意：要求此接口允许 DropTarget 以下面两种方式之一与 Component 安全关联：<code>component.setDropTarget(droptarget)</code> 或 <code>droptarget.setComponent(component)</code>。
<p>
仅在已启用时 Component 才会接收 drop。
@param c 此 <code>DropTarget</code> 要关联的新 <code>Component</code>。<P>

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.Component java.awt.dnd.DropTarget.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 <code>DropTarget</code> 关联的 <code>Component</code>。
<p>
@return 当前的 <code>Component</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTarget.setDefaultActions(int ops)
<!-- END KEY -->
<!-- BEGIN DATA -->
为此 <code>DropTarget</code> 设置默认的可接受操作。
<p>
@param ops 默认操作
<p>
@see java.awt.dnd.DnDConstants

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.dnd.DropTarget.getDefaultActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取表示受此 <code>DropTarget</code> 支持的当前操作的 <code>int</code> 值。
<p>
@return 当前的默认操作

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DropTarget.setActive(boolean isActive)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果为 <code>true</code>，则将 DropTarget 设置为激活状态；如果为 <code>false</code>，则将 DropTarget 设置为非激活状态。
<p>
@param isActive 将 <code>DropTarget</code> 设置为（非）激活状态。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.dnd.DropTarget.isActive()
<!-- END KEY -->
<!-- BEGIN DATA -->
报告此 <code>DropTarget</code> 当前是否为激活状态（准备接受 drop）。
<p>
@return 如果为激活状态，则返回 <CODE>true</CODE>；否则返回 <CODE>false</CODE>

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DropTarget.addDropTargetListener(DropTargetListener dtl) throws java.util.TooManyListenersException
<!-- END KEY -->
<!-- BEGIN DATA -->
添加一个新的 <code>DropTargetListener</code> (UNICAST SOURCE)。
<p>
@param dtl 新的 <code>DropTargetListener</code>
<p>
@throws <code>TooManyListenersException</code> 如果已向此 <code>DropTarget</code> 添加 <code>DropTargetListener</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DropTarget.removeDropTargetListener(DropTargetListener dtl)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除当前的 <code>DropTargetListener</code> (UNICAST SOURCE)。
<p>
@param dtl 要取消注册的 DropTargetListener。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DropTarget.dragEnter(DropTargetDragEvent dtde)
<!-- END KEY -->
<!-- BEGIN DATA -->
在已注册的 <code>DropTargetListener</code> 上调用 <code>dragEnter</code>，并将其传递给指定的 <code>DropTargetDragEvent</code>。
如果此 <code>DropTarget</code> 是非激活状态，则此调用无效。

@param dtde <code>DropTargetDragEvent</code>

@throws NullPointerException 如果此 <code>DropTarget</code> 处于激活状态并且 <code>dtde</code> 为 <code>null</code>

@see #isActive

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DropTarget.dragOver(DropTargetDragEvent dtde)
<!-- END KEY -->
<!-- BEGIN DATA -->
在已注册的 <code>DropTargetListener</code> 上调用 <code>dragOver</code>，并将其传递给指定的 <code>DropTargetDragEvent</code>。
如果此 <code>DropTarget</code> 是非激活状态，则该调用无效。

@param dtde <code>DropTargetDragEvent</code>

@throws NullPointerException 如果此 <code>DropTarget</code> 处于激活状态并且 <code>dtde</code> 为 <code>null</code>

@see #isActive

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DropTarget.dropActionChanged(DropTargetDragEvent dtde)
<!-- END KEY -->
<!-- BEGIN DATA -->
在已注册的 <code>DropTargetListener</code> 上调用 <code>dropActionChanged</code>，并将其传递给指定的 <code>DropTargetDragEvent</code>。
如果此 <code>DropTarget</code> 是非激活状态，则此调用无效。

@param dtde <code>DropTargetDragEvent</code>

@throws NullPointerException 如果此 <code>DropTarget</code> 处于激活状态并且 <code>dtde</code> 为 <code>null</code>

@see #isActive

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DropTarget.dragExit(DropTargetEvent dte)
<!-- END KEY -->
<!-- BEGIN DATA -->
在已注册的 <code>DropTargetListener</code> 上调用 <code>dragExit</code>，并将其传递给指定的 <code>DropTargetEvent</code>。
如果此 <code>DropTarget</code> 是非激活状态，则此调用无效。
<p>
对于 null 参数，此方法本身并不抛出任何异常，而是由相应的侦听器方法抛出异常。

@param dte <code>DropTargetEvent</code>

@see #isActive

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DropTarget.drop(DropTargetDropEvent dtde)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 <code>DropTarget</code> 处于激活状态，则在已注册的 <code>DropTargetListener</code> 上调用 <code>drop</code>，并将其传递给指定的 <code>DropTargetDropEvent</code>。
 
@param dtde <code>DropTargetDropEvent</code>
 
@throws NullPointerException 如果 <code>dtde</code> 为 null 并且以下条件中至少有一个为真：此 <code>DropTarget</code> 不处于激活状态，或者没有已注册的 <code>DropTargetListener</code>。

@see #isActive

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.datatransfer.FlavorMap java.awt.dnd.DropTarget.getFlavorMap()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 <code>DropTarget</code> 关联的 <code>FlavorMap</code>。
如果没有为此 <code>DropTarget</code> 设置 <code>FlavorMap</code>，则它与默认的 <code>FlavorMap</code> 关联。
<p>
@return 此 DropTarget 的 FlavorMap

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTarget.setFlavorMap(FlavorMap fm)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>FlavorMap</code> 与此 <code>DropTarget</code> 关联。
<p>
@param fm 新的 <code>FlavorMap</code>，如果将默认的 FlavorMap 与此 DropTarget 关联，则为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTarget.addNotify(ComponentPeer peer)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知 DropTarget 它已经与某个 Component 关联。通常从与此 DropTarget 相关联 Component 的 java.awt.Component.addNotify() 调用此方法，以通知 DropTarget 一个 ComponentPeer 已经与该 Component 关联。调用此方法，而不是将 ComponentPeer 与 Component 的关联通知给此 DropTarget，这可能导致 DnD 系统故障。

<p>
@param peer 与该 Component 关联的同位体

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTarget.removeNotify(ComponentPeer peer)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知 DropTarget 它已经与某个 Component 解除关联。通常从与此 DropTarget 相关联 Component 的 java.awt.Component.removeNotify() 调用此方法，以通知 DropTarget 一个 ComponentPeer 已经与该 Component 解除关联。调用此方法，而不是将 ComponentPeer 与 Component 的解除关联通知给此 DropTarget，这可能导致 DnD 系统故障。

<p>
@param peer 与该 Component 解除关联的同位体

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DropTargetContext java.awt.dnd.DropTarget.getDropTargetContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 <code>DropTarget</code> 关联的 <code>DropTargetContext</code>。
<p>
@return 与此 <code>DropTarget</code> 关联的 <code>DropTargetContext</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.dnd.DropTargetContext java.awt.dnd.DropTarget.createDropTargetContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建与此 DropTarget 关联的 DropTargetContext。子类可能重写此方法，以实例化它们自己的 DropTargetContext 子类。
通常只在拖动操作遇到此 DropTarget 时才由平台的 DropTargetContextPeer 调用此方法。在当前没有 Drag 时访问 Context 的结果是不明确的。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.dnd.DropTarget.DropTargetAutoScroller java.awt.dnd.DropTarget.createDropTargetAutoScroller(Component c, Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个嵌入式自动滚动条
<p>
@param c <code>Component</code> 
@param p <code>Point</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.dnd.DropTarget.initializeAutoscrolling(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
初始化自动滚动
<p>
@param p <code>Point</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.dnd.DropTarget.updateAutoscroll(Point dragCursorLocn)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用当前的光标位置更新自动滚动
<p>
@param dragCursorLocn <code>Point</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.dnd.DropTarget.clearAutoscroll()
<!-- END KEY -->
<!-- BEGIN DATA -->
清除自动滚动
<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.dnd.DropTarget.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
反序列化此 <code>DropTarget</code>
此方法首先为所有的非 <code>transient</code> 字段执行默认的反序列化。然后还要尝试反序列化此对象的 <code>DropTargetListener</code>
通过反序列化字段 <code>dtListener</code> 来进行首次尝试，因为在发布版本 1.4 之前，此名称的非 <code>transient</code> 字段存储 <code>DropTargetListener</code>
如果此尝试失败，则使用流中的下一个对象。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.dnd.DropTarget.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
序列化此 <code>DropTarget</code>
当且仅当可以执行序列化时才执行默认的序列化，然后写出此对象的 <code>DropTargetListener</code>
如果无法序列化，则写出 <code>null</code>。
 
@serialData 按字母顺序排列的默认可序列化字段，后跟 <code>DropTargetListener</code> 实例或 <code>null</code>。
@since 1.4

<!-- END DATA -->
