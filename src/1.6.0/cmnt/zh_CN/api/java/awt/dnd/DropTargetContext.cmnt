<!-- BEGIN KEY -->
public class java.awt.dnd.DropTargetContext extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
每当与 Drag 和 Drop 操作相关的逻辑光标和与 <code>DropTarget</code> 相关的 <code>Component</code> 的可见几何结构重合时，就创建一个 <code>DropTargetContext</code>。<code>DropTargetContext</code> 为放置操作的潜在接收者提供一种机制，该机制既为终端用户提供适当的拖动反馈，也影响适当的后续数据传输。

@version 	1.37, 05/05/04
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.dnd.DropTarget java.awt.dnd.DropTargetContext.dropTarget
<!-- END KEY -->
<!-- BEGIN DATA -->
与此 DropTargetContext 相关的 DropTarget。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DropTarget java.awt.dnd.DropTargetContext.getDropTarget()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回与此 <code>DropTargetContext</code> 相关的 <code>DropTarget</code>。
 <P>
@return 与此 <code>DropTargetContext</code> 相关的 <code>DropTarget</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.dnd.DropTargetContext.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回与此 <code>DropTargetContext</code> 相关的 <code>Component</code>。
 <P>
@return 与此 Context 相关的 Component

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTargetContext.addNotify(DropTargetContextPeer dtcp)
<!-- END KEY -->
<!-- BEGIN DATA -->
与 <code>DropTargetContextPeer</code> 关联时调用。
 <P>
@param dtcp <code>DropTargetContextPeer</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTargetContext.removeNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
取消与 <code>DropTargetContextPeer</code> 的关联时调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.dnd.DropTargetContext.setTargetActions(int actions)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法设置此 <code>DropTarget</code> 可接受的当前操作。
 <P>
@param actions 一个 <code>int</code>，表示受支持的操作

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.dnd.DropTargetContext.getTargetActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回一个 <code>int</code>，表示此 <code>DropTarget</code> 将接受的当前操作。
 <P>
@return 此 <code>DropTarget</code> 可接受的当前操作

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTargetContext.dropComplete(boolean success) throws java.awt.dnd.InvalidDnDOperationException
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法指示放置操作完成以及成功与否。
 <P>
@param success 如果成功，则为 true；否则为 false
 <P>
@throws InvalidDnDOperationException 如果放置操作未完成/成功

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.dnd.DropTargetContext.acceptDrag(int dragOperation)
<!-- END KEY -->
<!-- BEGIN DATA -->
接受该 Drag。
 <P>
@param dragOperation 受支持的操作

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.dnd.DropTargetContext.rejectDrag()
<!-- END KEY -->
<!-- BEGIN DATA -->
拒绝该 Drag。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.dnd.DropTargetContext.acceptDrop(int dropOperation)
<!-- END KEY -->
<!-- BEGIN DATA -->
调用以指示放置操作是可接受的（使用指定的操作）。在 DropTargetListener.drop 方法调用期间必须被调用。
 <P>
@param dropOperation 受支持的操作

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.dnd.DropTargetContext.rejectDrop()
<!-- END KEY -->
<!-- BEGIN DATA -->
调用以指示放置操作是不可接受的。在 DropTargetListener.drop 方法调用期间必须被调用。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.datatransfer.DataFlavor[] java.awt.dnd.DropTargetContext.getCurrentDataFlavors()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此操作的 <code>Transferable</code> 操作数的可用 DataFlavor。
 <P>
@return 一个 <code>DataFlavor[]</code>，它包含受支持的 <code>Transferable</code> 操作数的 <code>DataFlavor</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.List<java.awt.datatransfer.DataFlavor> java.awt.dnd.DropTargetContext.getCurrentDataFlavorsAsList()
<!-- END KEY -->
<!-- BEGIN DATA -->

此方法返回 <code>Transferable</code> 操作数当前可用的 DataFlavor，作为一个 <code>java.util.List</code>。
 <P>
@return 当前可用的 DataFlavor，作为一个 <code>java.util.List</code> 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.awt.dnd.DropTargetContext.isDataFlavorSupported(DataFlavor df)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回一个 <code>boolean</code> 值，指示给定的 <code>DataFlavor</code> 是否受此 <code>DropTargetContext</code> 支持。
 <P>
@param df <code>DataFlavor</code>
 <P>
@return 指定的 <code>DataFlavor</code> 是否受支持

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.datatransfer.Transferable java.awt.dnd.DropTargetContext.getTransferable() throws java.awt.dnd.InvalidDnDOperationException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此操作的 Transferable（代理）操作数
 <P>
@throws InvalidDnDOperationException 如果放置操作未完成/成功
 <P>
@return <code>Transferable</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.datatransfer.Transferable java.awt.dnd.DropTargetContext.createTransferableProxy(Transferable t, boolean local)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个代理指定 Transferable 的 TransferableProxy。
 
@param t 要被代理的 <tt>Transferable</tt>
@param local 如果 <tt>t</tt> 表示本地 drag-n-drop 操作的结果，则为 <tt>true</tt>。
@return 新的 <tt>TransferableProxy</tt> 实例。   

<!-- END DATA -->
