<!-- BEGIN KEY -->
public interface java.awt.dnd.DragSourceListener extends java.util.EventListener
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>DragSourceListener</code> 定义了事件接口，Drag 和 Drop 操作的始发端使用它来跟踪用户操作的状态，并通过 Drag 和 Drop 操作为用户提供合适的&ldquo;拖动结束&rdquo;反馈。
 <p>
放置点是与<i>上一次 <code>dragEnter()</code> 调用相关联</i> 的，前提是在此侦听器上最后一次调用 <code>dragEnter()</code> 满足以下条件：
 <ul>
<li>对应于该放置点，并且
<li> 随后没有在此侦听器上调用 <code>dragExit()</code>。
 </ul>

@version 	1.20, 12/19/03
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DragSourceListener.dragEnter(DragSourceDragEvent dsde)
<!-- END KEY -->
<!-- BEGIN DATA -->
光标的热点进入放置点（与平台相关）时调用该方法。满足以下所有条件时调用此方法：
 <UL>
<LI>光标的热点进入与平台相关的放置点的可操作部分。
<LI>放置点处于激活状态。
<LI>放置点接受该拖动。
 </UL>
 
@param dsde <code>DragSourceDragEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DragSourceListener.dragOver(DragSourceDragEvent dsde)
<!-- END KEY -->
<!-- BEGIN DATA -->
光标的热点在放置点（与平台相关）上移动时调用该方法。满足以下所有条件时调用此方法：
 <UL>
<LI>光标的热点已移动，但是仍旧处于和上一次调用 dragEnter() 相关联的放置点可操作部分内。 
<LI>放置点仍处于激活状态。
<LI>放置点接受该拖动。
 </UL>
 
@param dsde <code>DragSourceDragEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DragSourceListener.dropActionChanged(DragSourceDragEvent dsde)
<!-- END KEY -->
<!-- BEGIN DATA -->
当用户修改放置操作时调用该方法。当用户使用的输入设备状态改变时调用此方法。这种设备通常是与用户交互的鼠标按键或键盘修改键。
 
@param dsde <code>DragSourceDragEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DragSourceListener.dragExit(DragSourceEvent dse)
<!-- END KEY -->
<!-- BEGIN DATA -->
光标的热点离开放置点（与平台相关）时调用该方法。满足以下任一条件时调用此方法：
 <UL>
<LI>光标的热点不再处于和上一次调用 dragEnter() 相关联的放置点可操作部分内。
 </UL>
或者
 <UL>
<LI>与上一次调用 dragEnter() 相关联的放置点不再处于激活状态。
 </UL>
或者
 <UL>
<LI> 与上一次调用 dragEnter() 相关联的放置点拒绝该拖动。
 </UL>
 
@param dse <code>DragSourceEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DragSourceListener.dragDropEnd(DragSourceDropEvent dsde)
<!-- END KEY -->
<!-- BEGIN DATA -->
调用此方法来通知 Drag 和 Drop 操作已完成。可以使用 <code>DragSourceDropEvent</code> 的 getDropSuccess() 方法来确定终止状态。放置点所选择的操作由 getDropAction() 方法返回，并应用到 Drop 操作中。一旦此方法完成，则当前的 <code>DragSourceContext</code> 和关联的资源就变为无效。
 
@param dsde <code>DragSourceDropEvent</code>

<!-- END DATA -->
