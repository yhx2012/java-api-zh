<!-- BEGIN KEY -->
public class java.awt.dnd.DropTargetDropEvent extends java.awt.dnd.DropTargetEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
通过 <code>DropTargetListener</code> drop() 方法发送 <code>DropTargetDropEvent</code>。 
<p>
<code>DropTargetDropEvent</code> 报告<i>源 drop 操作</i> 和<i>用户 drop 操作</i>，这些操作反映了 drag-and-drop 操作的当前状态。 
<p>
<i>源 drop 操作</i> 是 <code>DnDConstants</code> 的位掩码，DnDConstants 表示受 drag-and-drop 操作的 drag 源支持的 drop 操作集合。
<p>
<i>用户 drop 操作</i> 取决于受 drag 源支持的 drop 操作和用户选定的 drop 操作。在进行 drag 操作中，用户可以通过按下修正键选择一个 drop 操作。 
<pre> 
   Ctrl + Shift -&gt; ACTION_LINK
   Ctrl         -&gt; ACTION_COPY
   Shift        -&gt; ACTION_MOVE
</pre> 
当用户选择一个 drop 操作时，如果此 drop 操作受 drag 源支持，则<i>用户 drop 操作</i> 为表示选择的 drop 操作 <code>DnDConstants</code> 之一，如果此 drop 操作不受 drag 源支持，则用户 drop 操作为 <code>DnDConstants.ACTION_NONE</code> 之一。
 <p>
如果用户没有选 drop 操作，则表示受 drag 源支持的 drop 操作集合的 <code>DnDConstants</code> 集合是先搜索 <code>DnDConstants.ACTION_MOVE</code>，然后搜索 <code>DnDConstants.ACTION_COPY</code>，最后搜索 <code>DnDConstants.ACTION_LINK</code> 而得到的，并且<i>用户 drop 操作</i> 是找到的第一个常量。如果找不到常量，则<i>用户 drop 操作</i> 为 <code>DnDConstants.ACTION_NONE</code>。
 
@version 	1.28, 05/05/04
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.Point java.awt.dnd.DropTargetDropEvent.location
<!-- END KEY -->
<!-- BEGIN DATA -->
Component 坐标中 drag 光标的热点位置。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.dnd.DropTargetDropEvent.actions
<!-- END KEY -->
<!-- BEGIN DATA -->
源 drop 操作。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.dnd.DropTargetDropEvent.dropAction
<!-- END KEY -->
<!-- BEGIN DATA -->
用户 drop 操作。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean java.awt.dnd.DropTargetDropEvent.isLocalTx
<!-- END KEY -->
<!-- BEGIN DATA -->
如果源对象与目标对象处于相同的 JVM 中，则为 <code>true</code>。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DropTargetDropEvent(DropTargetContext dtc, Point cursorLocn, int dropAction, int srcActions)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给出此操作的 <code>DropTargetContext</code>、<code>Component</code> 坐标中 drag <code>Cursor</code> 的热点位置、目前选择的用户 drop 操作和当前受源对象支持的操作集合的情况下，构造一个 <code>DropTargetDropEvent</code>。默认情况下，此构造器假定目标对象与源对象不在同一虚拟机中；也就是说，{@link #isLocalTransfer()} 将返回 <code>false</code>。
 <P>

@param dtc 此操作的 <code>DropTargetContext</code> 
@param cursorLocn <code>Component</code> 坐标中 &quot;Drag&quot; Cursor 的热点位置
@param dropAction 用户 drop 操作。
@param srcActions 源 drop 操作。
 
@throws <code>NullPointerException</code> 如果 cursorLocn 为 <code>null</code>
@throws <code>IllegalArgumentException</code> 如果 dropAction 不是 <code>DnDConstants</code> 之一。
@throws <code>IllegalArgumentException</code> 如果 srcActions 不是 <code>DnDConstants</code> 的位掩码。
@throws <code>IllegalArgumentException</code> 如果 dtc 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DropTargetDropEvent(DropTargetContext dtc, Point cursorLocn, int dropAction, int srcActions, boolean isLocal)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给出此操作的 <code>DropTargetContext</code>、<code>Component</code> 的坐标中 drag <code>Cursor</code> 的热点位置、目前选择的用户 drop 操作、当前受源对象支持的操作集合，以及一个指示源对象与目标对象是否在同一 JVM 中的 <code>boolean</code> 值的情况下，构造一个 <code>DropTargetEvent</code>。
 <P>

@param dtc  此操作的 DropTargetContext
@param cursorLocn Component 坐标中 &quot;Drag&quot; Cursor 的热点位置
@param dropAction 用户 drop 操作。
@param srcActions 源 drop 操作。
@param isLocal 如果源对象与目标对象在同一 JVM 中，则为 true

@throws <code>NullPointerException</code> 如果 cursorLocn 为 <code>null</code>
@throws <code>IllegalArgumentException</code> 如果 dropAction 不是 <code>DnDConstants</code> 之一。
@throws <code>IllegalArgumentException</code> 如果 srcAction 不是 <code>DnDConstants</code> 的位掩码。
@throws <code>IllegalArgumentException</code> 如果 dtc 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.dnd.DropTargetDropEvent.getLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回一个 <code>Point</code>，指示 <code>Component</code> 坐标中 <code>Cursor</code> 的当前位置。
 <P>
@return Component 坐标中 <code>Cursor</code> 的当前位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.datatransfer.DataFlavor[] java.awt.dnd.DropTargetDropEvent.getCurrentDataFlavors()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回当前的 DataFlavor。
 <P>
@return 当前的 DataFlavor

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.awt.datatransfer.DataFlavor> java.awt.dnd.DropTargetDropEvent.getCurrentDataFlavorsAsList()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法以 <code>java.util.List</code> 形式返回当前可用的 <code>DataFlavor</code>。
 <P>
@return java.util.List 形式的当前可用 DataFlavor

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.dnd.DropTargetDropEvent.isDataFlavorSupported(DataFlavor df)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回一个指示指定的 <code>DataFlavor</code> 是否可在源对象中使用的 <code>boolean</code> 值。
 <P>
@param df 要测试的 <code>DataFlavor</code>
 <P>
@return 是否指定的 DataFlavor 是否可在源对象中使用

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.dnd.DropTargetDropEvent.getSourceActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回源 drop 操作。
@return 源 drop 操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.dnd.DropTargetDropEvent.getDropAction()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回用户 drop 操作。
@return 用户 drop 操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.datatransfer.Transferable java.awt.dnd.DropTargetDropEvent.getTransferable()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回与 drop 相关的 <code>Transferable</code> 对象。
 <P>
@return 与 drop 相关的 <code>Transferable</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTargetDropEvent.acceptDrop(int dropAction)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的操作接受 drop。
 <P>
@param dropAction 指定的操作

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTargetDropEvent.rejectDrop()
<!-- END KEY -->
<!-- BEGIN DATA -->
拒绝 Drop。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTargetDropEvent.dropComplete(boolean success)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法通知 <code>DragSource</code> drop 传输已完成。
 <P>
@param success 指示 drop 传输已完成的 <code>boolean</code> 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.dnd.DropTargetDropEvent.isLocalTransfer()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回一个指示源对象与目标对象是否在同一 JVM 中的 <code>int</code>。
 <P>
@return Source 是否在同一 JVM 中

<!-- END DATA -->
