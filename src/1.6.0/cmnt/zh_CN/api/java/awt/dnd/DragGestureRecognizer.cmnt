<!-- BEGIN KEY -->
public abstract class java.awt.dnd.DragGestureRecognizer extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>DragGestureRecognizer</code> 是一个针对与平台相关的侦听器规范的抽象基类，它可以与特定 <code>Component</code> 关联以标识与平台相关的拖动开始动作。
<p>
可从与特定 <code>Component</code> 关联的 <code>DragSource</code>，或通过其 createDragGestureRecognizer() 方法从 <code>Toolkit</code> 对象获得合适的 <code>DragGestureRecognizer</code> 子类。
<p>
<code>DragGestureRecognizer</code> 一旦与特定的 <code>Component</code> 关联，就会在该 <code>Component</code> 上注册合适的侦听器接口，以跟踪传递给该 <code>Component</code> 的输入事件。
<p>
<code>DragGestureRecognizer</code> 一旦将该 <code>Component</code> 上的事件顺序标识为拖动开始动作，它就会通过调用其 gestureRecognized() 方法来通知其单播传递的 <code>DragGestureListener</code>。
<p>
当具体的 <code>DragGestureRecognizer</code> 实例在其关联的 <code>Component</code> 上检测到拖动开始动作时，它将激发一个 <code>DragGestureEvent</code>，并针对 <code>DragGestureListener</code> 事件将其传递给在其单播传递事件源上注册的 <code>DragGestureListener</code>。此 <code>DragGestureListener</code> 负责使关联的 <code>DragSource</code> 开始 Drag 和 Drop 操作（如果合适）。
<p>

@author Laurence P. G. Cable
@version 1.20
@see java.awt.dnd.DragGestureListener
@see java.awt.dnd.DragGestureEvent
@see java.awt.dnd.DragSource

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.dnd.DragSource java.awt.dnd.DragGestureRecognizer.dragSource
<!-- END KEY -->
<!-- BEGIN DATA -->
与此 <code>DragGestureRecognizer</code> 关联的 <code>DragSource</code>。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component java.awt.dnd.DragGestureRecognizer.component
<!-- END KEY -->
<!-- BEGIN DATA -->
与此 <code>DragGestureRecognizer</code> 关联的 <code>Component</code>。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient java.awt.dnd.DragGestureListener java.awt.dnd.DragGestureRecognizer.dragGestureListener
<!-- END KEY -->
<!-- BEGIN DATA -->
与此 <code>DragGestureRecognizer</code> 关联的 <code>DragGestureListener</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.dnd.DragGestureRecognizer.sourceActions
<!-- END KEY -->
<!-- BEGIN DATA -->
此 Drag 和 Drop 操作中所用动作类型的 <code>int</code> 表示形式。 

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.ArrayList<java.awt.event.InputEvent> java.awt.dnd.DragGestureRecognizer.events
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>DragGestureRecognizer</code>&ldquo;识别&rdquo;为触发拖动的&ldquo;动作&rdquo;事件列表（按顺序）。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.dnd.DragGestureRecognizer(DragSource ds, Component c, int sa, DragGestureListener dgl)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的 <code>DragGestureRecognizer</code>，使其具有给定此 Drag 和 Drop 操作中使用的 <code>DragSource</code>、此 <code>DragGestureRecognizer</code> 应该&ldquo;观察&rdquo;拖动开始动作的 <code>Component</code>、此 Drag 和 Drop 操作所支持的操作和一旦检测到拖动开始动作要通知的 <code>DragGestureListener</code>。
<p>

@param ds  此 <code>DragGestureRecognizer</code> 用于处理 Drag 和 Drop 操作的 <code>DragSource</code>

@param c 为了检测拖动开始动作，此 <code>DragGestureRecognizer</code> 应该&ldquo;观察&rdquo;事件流去往的 <code>Component</code>。如果此值为 <code>null</code>，则 <code>DragGestureRecognizer</code> 未与任何 <code>Component</code> 关联。

@param sa  此 Drag 和 Drop 操作支持的 <code>DnDConstants</code> 集合（逻辑&ldquo;或&rdquo;）

@param dgl 检测到拖动动作时要通知的 <code>DragGestureRecognizer</code>
<p>
@throws <code>IllegalArgumentException</code> 如果 ds 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.dnd.DragGestureRecognizer(DragSource ds, Component c, int sa)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的 <code>DragGestureRecognizer</code>，使其具有给定此 Drag 和 Drop 操作中使用的 <code>DragSource</code>、此 <code>DragGestureRecognizer</code> 应该&ldquo;观察&rdquo;拖动开始动作的 <code>Component</code> 和此 Drag 和 Drop 操作所支持的动作。
<p>

@param ds  此 <code>DragGestureRecognizer</code> 用于处理 Drag 和 Drop 操作的 <code>DragSource</code>

@param c 为了检测拖动开始动作，此 <code>DragGestureRecognizer</code> 应该&ldquo;观察&rdquo;事件流去往的 <code>Component</code>。如果此值为 <code>null</code>，则 <code>DragGestureRecognizer</code> 未与任何 <code>Component</code> 关联。

@param sa  此 Drag 和 Drop 操作支持的 <code>DnDConstants</code> 集合（逻辑&ldquo;或&rdquo;）
<p>
@throws <code>IllegalArgumentException</code> 如果 ds 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.dnd.DragGestureRecognizer(DragSource ds, Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的 <code>DragGestureRecognizer</code>，使其具有给定此 Drag 和 Drop 操作中使用的 <code>DragSource</code> 和此 <code> DragGestureRecognizer</code> 应该&ldquo;观察&rdquo;拖动开始动作的 <code>Component</code>。
<p>

@param ds  此 <code>DragGestureRecognizer</code> 用于处理 Drag 和 Drop 操作的 <code>DragSource</code>

@param c 为了检测拖动开始动作，此 <code>DragGestureRecognizer</code> 应该&ldquo;观察&rdquo;事件流去往的 <code>Component</code>。如果此值为 <code>null</code>，则 <code>DragGestureRecognizer</code> 未与任何 <code>Component</code> 关联。
<p>
@throws <code>IllegalArgumentException</code> 如果 ds 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.dnd.DragGestureRecognizer(DragSource ds)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的 <code>DragGestureRecognizer</code>，使其具有给定此 Drag 和 Drop 操作中使用的 <code>DragSource</code>。
<p>

@param ds  此 <code>DragGestureRecognizer</code> 用于处理 Drag 和 Drop 操作的 <code>DragSource</code>
<p>
@throws <code>IllegalArgumentException</code> 如果 ds 为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.awt.dnd.DragGestureRecognizer.registerListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
向该 Component 注册此 DragGestureRecognizer 的 Listeners。子类必须重写此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.awt.dnd.DragGestureRecognizer.unregisterListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
向该 Component 取消注册此 DragGestureRecognizer 的 Listeners。子类必须重写此方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DragSource java.awt.dnd.DragGestureRecognizer.getDragSource()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回 <code>DragSource</code>，为了进行 Drag 和 Drop 操作，将使用此 <code>DragGestureRecognizer</code>。
<p>

@return  DragSource

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.Component java.awt.dnd.DragGestureRecognizer.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回 <code>DragGestureRecognizer</code> 所&ldquo;观察&rdquo;的 <code>Component</code>，以便了解拖动开始动作。
<p>

@return 与此 DragGestureRecognizer 关联的 Component

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DragGestureRecognizer.setComponent(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置与该 DragGestureRecognizer 关联的 Component

使用此方法时还会调用 registerListeners() 和 unregisterListeners()。
<p>

@param c <code>Component</code> 或 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.awt.dnd.DragGestureRecognizer.getSourceActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回 Drag 和 Drop 操作所支持动作类型的 int 表示形式。
<p>

@return 当前允许的源动作

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DragGestureRecognizer.setSourceActions(int actions)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法设置此 Drag 和 Drop 操作允许的源拖动动作。
<p>

@param actions 允许的源拖动动作

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.InputEvent java.awt.dnd.DragGestureRecognizer.getTriggerEvent()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法返回发起 Drag 和 Drop 操作的系列事件中的首个事件。
<p>

@return 触发拖动动作的初始事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DragGestureRecognizer.resetRecognizer()
<!-- END KEY -->
<!-- BEGIN DATA -->
重置 Recognizer，如果 Recognizer 当前正在识别一个动作，则忽略。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DragGestureRecognizer.addDragGestureListener(DragGestureListener dgl) throws java.util.TooManyListenersException
<!-- END KEY -->
<!-- BEGIN DATA -->
注册一个新的 <code>DragGestureListener</code>。
<p>

@param dgl 使用此 <code>DragGestureRecognizer</code> 注册的 <code>DragGestureListener</code>。
<p>

@throws java.util.TooManyListenersException 如果已经添加了 <code>DragGestureListener</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DragGestureRecognizer.removeDragGestureListener(DragGestureListener dgl)
<!-- END KEY -->
<!-- BEGIN DATA -->
取消注册当前的 DragGestureListener
<p>

@param dgl 使用此 <code>DragGestureRecognizer</code> 取消注册的 <code>DragGestureListener</code>。
<p>

@throws <code>IllegalArgumentException</code> 如果 dgl 不是（等于）当前已注册的 <code>DragGestureListener</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.awt.dnd.DragGestureRecognizer.fireDragGestureRecognized(int dragAction, Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知 DragGestureListener 已发生了 Drag 和 Drop 开始动作。然后重置 Recognizer 的状态。
<p>

@param dragAction 通过用户动作初始选中的动作
@param p 该动作开始的 point（在 Component 坐标中）

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.awt.dnd.DragGestureRecognizer.appendEvent(InputEvent awtie)
<!-- END KEY -->
<!-- BEGIN DATA -->
Recognizer 在 Component 上注册的侦听器将通过此 API 记录所有识别的 Event，识别的 Event 是组成 Drag 和 Drop 开始动作的系列 Event 的一部分。
<P>
<code>DragGestureRecognizer</code> 实现使用此方法将 <code>InputEvent</code> 子类（相信它是组成 Drag 和 Drop 操作的系列事件的一部分）添加到此 <code>DragGestureRecognizer</code> 内部维护的事件数组中。
<p>

@param awtie 添加到此 <code>DragGestureRecognizer</code> 内部事件数组的 <code>InputEvent</code>。注意，<code>null</code> 不是有效值，将忽略该值。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.dnd.DragGestureRecognizer.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
反序列化此 <code>DragGestureRecognizer</code>。此方法首先为所有的非 <code>transient</code> 字段执行默认的反序列化。然后通过使用流中的下一个对象，还要反序列化此对象的 <code>DragGestureListener</code>。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.dnd.DragGestureRecognizer.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
序列化此 <code>DragGestureRecognizer</code>。此方法首先执行默认的序列化。然后当且仅当可以序列化此对象的 <code>DragGestureListener</code> 时将其写出。如果无法序列化，则写出 <code>null</code>。

@serialData 按字母顺序排列的默认可序列化字段，后跟 <code>DragGestureListener</code> 或 <code>null</code>。
@since 1.4

<!-- END DATA -->
