<!-- BEGIN KEY -->
public class java.awt.dnd.DragGestureEvent extends java.util.EventObject
<!-- END KEY -->
<!-- BEGIN DATA -->
当特定的 <code>DragGestureRecognizer</code> 检测到它正在跟踪的 <code>Component</code> 上已发生与平台相关的拖动启动动作时，将 <code>DragGestureEvent</code> 传递给 <code>DragGestureListener</code> 的 dragGestureRecognized() 方法。
 
@version 1.23
@see java.awt.dnd.DragGestureRecognizer
@see java.awt.dnd.DragGestureListener
@see java.awt.dnd.DragSource

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.dnd.DragSource java.awt.dnd.DragGestureEvent.dragSource
<!-- END KEY -->
<!-- BEGIN DATA -->
与此 DragGestureEvent 关联的 DragSource。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.Component java.awt.dnd.DragGestureEvent.component
<!-- END KEY -->
<!-- BEGIN DATA -->
与此 DragGestureEvent 关联的 Component。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.Point java.awt.dnd.DragGestureEvent.origin
<!-- END KEY -->
<!-- BEGIN DATA -->
拖动的原点。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.dnd.DragGestureEvent.action
<!-- END KEY -->
<!-- BEGIN DATA -->
用户的首选操作。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DragGestureEvent(DragGestureRecognizer dgr, int act, Point ori, java.util.List<? extends java.awt.event.InputEvent> evs)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定激发此事件的 <code>DragGestureRecognizer</code>、表示用户首选操作的 <code>int</code>、指示拖动原点的 <code>Point</code>，以及组成动作的事件 <code>List</code> 的情况下，构造一个 <code>DragGestureEvent</code>。
 <P>
@param dgr 激发此事件的 <code>DragGestureRecognizer</code>
@param act 用户的首选操作
@param ori 拖动的原点
@param evs 组成该动作的事件 <code>List</code>
 <P>
@throws <code>IllegalArgumentException</code> 如果输入参数为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DragGestureRecognizer java.awt.dnd.DragGestureEvent.getSourceAsDragGestureRecognizer()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>DragGestureRecognizer</code> 的形式返回源。
 <P>
@return <code>DragGestureRecognizer</code> 形式的源。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.dnd.DragGestureEvent.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>DragGestureEvent</code> 关联的 <code>Component</code>。
 <P>
@return Component

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DragSource java.awt.dnd.DragGestureEvent.getDragSource()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>DragSource</code>。
 <P>
@return  <code>DragSource</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.dnd.DragGestureEvent.getDragOrigin()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>Component</code> 坐标中开始拖动位置的 <code>Point</code>。
 <P>
@return Component 坐标中开始拖动位置的 Point。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<java.awt.event.InputEvent> java.awt.dnd.DragGestureEvent.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回组成动作的事件 <code>Iterator</code>。
 <P>
@return 组成动作的事件 Iterator

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.awt.dnd.DragGestureEvent.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回组成拖动动作的事件 <code>Object</code> 数组。
 <P>
@return 组成动作的事件数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.awt.dnd.DragGestureEvent.toArray(java.lang.Object[] array)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回组成拖动动作的事件数组。
 <P>
@param array <code>EventObject</code> 子（类型）数组
 <P>
@return 组成动作的事件数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.dnd.DragGestureEvent.getDragAction()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用户所选操作的 <code>int</code> 表示形式。
 <P>
@return 用户选择的操作

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.InputEvent java.awt.dnd.DragGestureEvent.getTriggerEvent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回触发动作的初始事件。
 <P>
@return 操作序列中的首个&ldquo;触发&rdquo;事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DragGestureEvent.startDrag(Cursor dragCursor, Transferable transferable) throws java.awt.dnd.InvalidDnDOperationException
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定拖动操作的 <code>Cursor</code> 和表示拖动操作源数据的 <code>Transferable</code> 的情况下开始拖动此操作。<br> 如果指定的 <code>Cursor</code> 为 <code>null</code>，则不抛出异常，而是使用默认的拖动光标。<br> 如果指定的 <code>Transferable</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。
 
@param dragCursor   此拖动操作的 <code>Cursor</code>
@param transferable 表示此拖动操作源数据的 <code>Transferable</code>。

@throws <code>InvalidDnDOperationException</code> 如果 Drag 和 Drop 系统不能发起拖动操作，或者用户试图开始拖动的同时仍在执行现有的拖动操作。
@throws <code>NullPointerException</code> 如果 <code>Transferable</code> 为 <code>null</code>。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DragGestureEvent.startDrag(Cursor dragCursor, Transferable transferable, DragSourceListener dsl) throws java.awt.dnd.InvalidDnDOperationException
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定要显示的初始 <code>Cursor</code>、<code>Transferable</code> 对象和要使用的 <code>DragSourceListener</code> 的情况下开始拖动。
 <P>
@param dragCursor   初始的拖动 Cursor
@param transferable 拖动源的 Transferable
@param dsl	   拖动源的 DragSourceListener
 <P>
@throws <code>InvalidDnDOperationException</code> 如果 Drag 和 Drop 系统不能发起拖动操作，或者用户试图开始拖动的同时仍在执行现有的拖动操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DragGestureEvent.startDrag(Cursor dragCursor, Image dragImage, Point imageOffset, Transferable transferable, DragSourceListener dsl) throws java.awt.dnd.InvalidDnDOperationException
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定要显示的初始 <code>Cursor</code>、拖动 <code>Image</code>、<code>Image</code> 的偏移量、<code>Transferable</code> 对象和要使用的 <code>DragSourceListener</code> 的情况下开始拖动。
 <P>
@param dragCursor   初始的拖动 Cursor
@param dragImage    拖动源的 dragImage
@param imageOffset  dragImage 的偏移量
@param transferable 拖动源的 Transferable
@param dsl	   拖动源的 DragSourceListener
 <P>
@throws <code>InvalidDnDOperationException</code> 如果 Drag 和 Drop 系统不能发起拖动操作，或者用户试图开始拖动的同时仍在执行现有的拖动操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.dnd.DragGestureEvent.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
反序列化此 <code>DragGestureEvent</code>。此方法首先为所有的非 <code>transient</code> 字段执行默认的反序列化。然后还要尝试反序列化此对象动作事件的 <code>List</code>。通过反序列化字段 <code>events</code> 来进行首次尝试，因为在发布版本 1.4 之前，此名称的非 <code>transient</code> 字段存储动作事件的 <code>List</code>。如果此尝试失败，则使用流中的下一个对象。如果结果 <code>List</code> 为 <code>null</code>，则设置此对象的动作事件 <code>List</code> 为空 <code>List</code>。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.dnd.DragGestureEvent.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
序列化此 <code>DragGestureEvent</code>。当且仅当可以序列化此对象的动作事件 <code>List</code> 时才执行默认的序列化，然后写出该 <code>List</code>。如果无法序列化，则写出 <code>null</code>。在这种情况下，从得到的反序列化流中创建的 <code>DragGestureEvent</code> 将包含一个空的动作事件 <code>List</code>。

@serialData 按字母顺序排列的默认可序列化字段，后跟 <code>List</code> 实例或 <code>null</code>。
@since 1.4

<!-- END DATA -->
