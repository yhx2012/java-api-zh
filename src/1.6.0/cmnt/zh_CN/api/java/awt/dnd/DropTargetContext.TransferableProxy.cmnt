<!-- BEGIN KEY -->
protected class java.awt.dnd.DropTargetContext.TransferableProxy extends java.lang.Object implements java.awt.datatransfer.Transferable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>TransferableProxy</code> 是一个帮助器内部类，它实现 <code>Transferable</code> 接口，并用作另一个表示特定 drag-n-drop（拖放）操作数据转换的 <code>Transferable</code> 对象的代理。
 <p>
该代理将所有请求转发给封装的 transferable，并在本地转换时自动对由封装的 transferable 返回的数据执行其他转换。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.datatransfer.Transferable java.awt.dnd.DropTargetContext.TransferableProxy.transferable
<!-- END KEY -->
<!-- BEGIN DATA -->
封装的 <code>Transferable</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.awt.dnd.DropTargetContext.TransferableProxy.isLocal
<!-- END KEY -->
<!-- BEGIN DATA -->
一个 <code>boolean</code> 值，指示所封装的 <code>Transferable</code> 对象是否表示执行本地 drag-n-drop 操作的结果（在同一个 JVM 中）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.datatransfer.DataFlavor[] java.awt.dnd.DropTargetContext.TransferableProxy.getTransferDataFlavors()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回一个 DataFlavor 对象数组，指示该数据的 flavor 是否可由封装的 transferable 提供。
 <p>
@return 数据 flavor 的数组，在这个数组中数据是由封装的 transferable 提供的

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.dnd.DropTargetContext.TransferableProxy.isDataFlavorSupported(DataFlavor flavor)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定的数据 flavor 是否受封装的 transferable 支持。
@param flavor 数据所请求的 flavor
@return  如果该数据 flavor 受支持，则返回 <code>true</code>；否则返回 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.dnd.DropTargetContext.TransferableProxy.getTransferData(DataFlavor df) throws java.awt.datatransfer.UnsupportedFlavorException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个对象，该对象表示数据是由封装的 transferable 为所请求的数据 flavor 提供的。
 <p>
进行本地转换时，如果在应用程序或 x-java-serialized-object 数据 flavor 中请求数据，则提供由封装的 transferable 返回的对象的序列化副本。

@param df 请求的数据 flavor
@throws IOException 如果该数据对请求的 flavor 不再可用。
@throws UnsupportedFlavorException 如果不支持请求的数据 flavor。

<!-- END DATA -->
