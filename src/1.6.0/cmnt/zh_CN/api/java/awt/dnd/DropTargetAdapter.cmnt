<!-- BEGIN KEY -->
public abstract class java.awt.dnd.DropTargetAdapter extends java.lang.Object implements java.awt.dnd.DropTargetListener
<!-- END KEY -->
<!-- BEGIN DATA -->
接收放置目标事件的抽象适配器类。此类中的方法为空。此类存在的目的只是为了便于创建侦听器对象。
 <p>
扩展此类即可创建 <code>DropTargetEvent</code> 侦听器并为感兴趣的事件重写该方法。（如果实现了 <code>DropTargetListener</code> 接口，则必须定义该接口内的所有方法。此抽象类为除 <code>drop(DropTargetDropEvent)</code> 以外的所有方法都定义了 null 实现，所以只需为关心的事件定义方法即可。）用户必须至少为 <code>drop(DropTargetDropEvent)</code> 提供一个实现。因为此方法的规范要求接受或拒绝放置，并且如果接受的话，要指出放置是否成功，所以此方法不能是 null 实现。
 <p>
使用扩展的类创建侦听器对象，然后向 <code>DropTarget</code> 注册它。当拖动进入、移动或离开该 <code>DropTarget</code> 放置点的可操作部分时，以及放置操作改变时和放置发生时，调用该侦听器对象中的相关方法，并将 <code>DropTargetEvent</code> 传递给它。
 <p>
<code>DropTarget</code> 放置点的可操作部分是关联 <code>Component</code> 的几何形状的一部分，该部分未被顶层窗口或另一个与活动 <code>DropTarget</code> 关联并且在 Z-order（排顺）中更高的 <code>Component</code> 所覆盖。
 <p>
在拖动期间，可检索与当前拖动操作相关联的数据，方法是调用传递给侦听器方法的 <code>DropTargetDragEvent</code> 实例上的 <code>getTransferable()</code>。 
 <p>
注意，应该只在各自侦听器方法内调用 <code>DropTargetDragEvent</code> 实例上的 <code>getTransferable()</code>，并且应该在该方法返回前从返回的 <code>Transferable</code> 检索所有所需的数据。

@see DropTargetEvent
@see DropTargetListener

@author David Mendenhall
@version 1.7, 12/19/03
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTargetAdapter.dragEnter(DropTargetDragEvent dtde)
<!-- END KEY -->
<!-- BEGIN DATA -->
当鼠标指针进入向此侦听器注册的 <code>DropTarget</code> 放置点可操作部分时，则在拖动操作正在进行的同时调用该方法。 
 
@param dtde <code>DropTargetDragEvent</code> 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTargetAdapter.dragOver(DropTargetDragEvent dtde)
<!-- END KEY -->
<!-- BEGIN DATA -->
当鼠标指针仍旧处于向此侦听器注册的 <code>DropTarget</code> 放置点可操作部分上时，则在拖动操作正在进行时调用该方法。
 
@param dtde <code>DropTargetDragEvent</code> 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTargetAdapter.dropActionChanged(DropTargetDragEvent dtde)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果用户已经修改了当前的放置操作，则调用该方法。

@param dtde <code>DropTargetDragEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTargetAdapter.dragExit(DropTargetEvent dte)
<!-- END KEY -->
<!-- BEGIN DATA -->
当鼠标指针已经离开向此侦听器注册的 <code>DropTarget</code> 放置点可操作部分时，则在拖动操作正在进行时调用该方法。
 
@param dte <code>DropTargetEvent</code> 

<!-- END DATA -->
