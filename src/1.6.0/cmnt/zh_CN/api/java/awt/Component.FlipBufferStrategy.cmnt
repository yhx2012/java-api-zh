<!-- BEGIN KEY -->
protected class java.awt.Component.FlipBufferStrategy extends java.awt.image.BufferStrategy
<!-- END KEY -->
<!-- BEGIN DATA -->
在组件上翻转缓冲区的内部类。该组件必须是 <code>Canvas</code> 或 <code>Window</code>。
@see Canvas
@see Window
@see java.awt.image.BufferStrategy
@author Michael Martak
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.Component.FlipBufferStrategy.numBuffers
<!-- END KEY -->
<!-- BEGIN DATA -->
缓冲区的数目。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.BufferCapabilities java.awt.Component.FlipBufferStrategy.caps
<!-- END KEY -->
<!-- BEGIN DATA -->
缓冲能力。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Image java.awt.Component.FlipBufferStrategy.drawBuffer
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制缓冲区。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.image.VolatileImage java.awt.Component.FlipBufferStrategy.drawVBuffer
<!-- END KEY -->
<!-- BEGIN DATA -->
作为可变图像的绘制缓冲区。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.awt.Component.FlipBufferStrategy.validatedContents
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制缓冲区是否已从最近的丢失状态还原。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component.FlipBufferStrategy(int numBuffers, BufferCapabilities caps) throws java.awt.AWTException
<!-- END KEY -->
<!-- BEGIN DATA -->
为此组件创建新的翻转缓冲区策略。该组件必须是 <code>Canvas</code> 或 <code>Window</code>。
@see Canvas
@see Window
@param numBuffers 缓冲区的数目
@param caps 缓冲区的能力
@exception AWTException 如果不支持或无法满足所提供的能力
@exception ClassCastException 如果该组件不是 canvas 或 window。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Component.FlipBufferStrategy.createBuffers(int numBuffers, BufferCapabilities caps) throws java.awt.AWTException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个或多个具有给定能力的、复杂的翻转缓冲区。
@param numBuffers 要创建的缓冲区数；必须大于 1
@param caps 缓冲区的能力。<code>BufferCapabilities.isPageFlipping</code> 必须为 <code>true</code>。
@exception AWTException 如果不支持或无法满足所提供的能力
@exception IllegalStateException 如果组件没有同位体
@exception IllegalArgumentException 如果 numBuffers 小于 2，或者 <code>BufferCapabilities.isPageFlipping</code> 不为 <code>true</code>。
@see java.awt.BufferCapabilities#isPageFlipping()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Image java.awt.Component.FlipBufferStrategy.getBackBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
@return 直接访问作为图像的底层缓冲区。
@exception IllegalStateException 如果尚未创建该缓冲区

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Component.FlipBufferStrategy.flip(BufferCapabilities.FlipContents flipAction)
<!-- END KEY -->
<!-- BEGIN DATA -->
将底层缓冲区的内容翻转移动到前台缓冲区，可通过复制或移动视频指针来执行。
@param flipAction 一个整数值，用于描述底层缓冲区内容的翻转操作。这应该是 <code>BufferCapabilities.FlipContents</code> 属性值之一。
@exception IllegalStateException 如果尚未创建该缓冲区
@see java.awt.BufferCapabilities#getFlipContents()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Component.FlipBufferStrategy.destroyBuffers()
<!-- END KEY -->
<!-- BEGIN DATA -->
销毁通过此对象所创建的缓冲区。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.BufferCapabilities java.awt.Component.FlipBufferStrategy.getCapabilities()
<!-- END KEY -->
<!-- BEGIN DATA -->
@return 此策略的缓冲能力。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Graphics java.awt.Component.FlipBufferStrategy.getDrawGraphics()
<!-- END KEY -->
<!-- BEGIN DATA -->
@return 绘制缓冲区中的图形。由于性能的原因，此方法可能不是同步的；多个线程使用此方法时，应该在相应的层对其进行处理。图形对象的移除必须由应用程序来处理。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Component.FlipBufferStrategy.revalidate()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果绘制缓冲区已丢失，则将其还原。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Component.FlipBufferStrategy.contentsLost()
<!-- END KEY -->
<!-- BEGIN DATA -->
@return 自从最后一次调用 <code>getDrawGraphics</code> 后是否丢失了绘制缓冲区。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Component.FlipBufferStrategy.contentsRestored()
<!-- END KEY -->
<!-- BEGIN DATA -->
@return 最近是否从丢失中还原了绘制缓冲区并且将其重新初始化为默认的背景色（白色）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Component.FlipBufferStrategy.show()
<!-- END KEY -->
<!-- BEGIN DATA -->
通过位图传送或翻转，使下一个可用的缓冲区可见。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Component.FlipBufferStrategy.dispose()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
