<!-- BEGIN KEY -->
public class java.awt.Dimension extends java.awt.geom.Dimension2D implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Dimension</code> 类封装单个对象中组件的宽度和高度（精确到整数）。该类与组件的某个属性关联。由 <code>Component</code> 类和 <code>LayoutManager</code> 接口定义的一些方法将返回 <code>Dimension</code> 对象。
 <p>
通常，<code>width</code> 和 <code>height</code> 的值是非负整数。允许创建 dimension 的构造方法不会阻止您为这些属性设置负值。如果 <code>width</code> 或 <code>height</code> 的值为负，则由其他对象定义的一些方法的行为是不明确的。
 
@version 	1.34, 02/24/06
@author 	Sami Shaio
@author 	Arthur van Hoff
@see         java.awt.Component
@see         java.awt.LayoutManager
@since       1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Dimension.width
<!-- END KEY -->
<!-- BEGIN DATA -->
dimension 的宽度，可以使用负值。

@serial
@see #getSize
@see #setSize
@since 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Dimension.height
<!-- END KEY -->
<!-- BEGIN DATA -->
dimension 的高度，可以使用负值。

@serial
@see #getSize
@see #setSize
@since 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension()
<!-- END KEY -->
<!-- BEGIN DATA -->

创建 <code>Dimension</code> 的一个实例（宽度为零，高度为零）。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension(Dimension d)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建 <code>Dimension</code> 的一个实例（宽度和高度与指定的 dimension 相同）。

@param    d   带有 <code>width</code> 和 <code>height</code> 值的指定 dimension

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension(int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->

构造一个 <code>Dimension</code>，并将其初始化为指定宽度和高度。

@param width 指定宽度
@param height 指定高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.Dimension.getWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.Dimension.getHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Dimension.setSize(double width, double height)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Dimension</code> 对象的大小设置为指定的宽度和高度（以双精度表示）。注意，如果 <code>width</code> 或 <code>height</code> 大于 <code>Integer.MAX_VALUE</code>，则将其重新设置为 <code>Integer.MAX_VALUE</code>。

@param width  <code>Dimension</code> 对象的新宽度
@param height <code>Dimension</code> 对象的新高度
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.Dimension.getSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>Dimension</code> 对象的大小。包含此方法是出于完整性考虑，它与 <code>Component</code> 定义的 <code>getSize</code> 方法相似。

@return   此 dimension 的大小，一个具有相同宽度和高度的 <code>Dimension</code> 的新实例
@see      java.awt.Dimension#setSize
@see      java.awt.Component#getSize
@since    1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Dimension.setSize(Dimension d)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>Dimension</code> 对象的大小设置为指定大小。包含此方法是出于完整性考虑，它与 <code>Component</code> 定义的 <code>setSize</code> 方法相似。
@param    d  <code>Dimension</code> 对象的新大小
@see      java.awt.Dimension#getSize
@see      java.awt.Component#setSize
@since    1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Dimension.setSize(int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Dimension</code> 对象的大小设置为指定的宽度和高度。包含此方法是出于完整性考虑，它与 <code>Component</code> 定义的 <code>setSize</code> 方法相似。

@param    width   <code>Dimension</code> 对象的新宽度
@param    height  <code>Dimension</code> 对象的新高度
@see      java.awt.Dimension#getSize
@see      java.awt.Component#setSize
@since    1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Dimension.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查两个 dimension 对象是否具有相同的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Dimension.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Dimension</code> 的哈希码。

@return    此 <code>Dimension</code> 的哈希码

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.Dimension.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Dimension</code> 对象的 <code>height</code> 和 <code>width</code> 字段的字符串表示形式。此方法仅用于调试目的，对于这两种实现，返回字符串的内容和格式可能有所不同。返回的字符串可以为空，但不可以为 <code>null</code>。
 
@return  该 <code>Dimension</code> 对象的字符串表示形式

<!-- END DATA -->
