<!-- BEGIN KEY -->
public class java.awt.MenuItem extends java.awt.MenuComponent implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
菜单中的所有项必须属于类 <code>MenuItem</code> 或其子类之一。
 <p>
默认的 <code>MenuItem</code> 对象包含一个简单的加标签的菜单项。
 <p>
此菜单栏的图像显示五个菜单项：<IMG SRC="doc-files/MenuBar-1.gif" alt="以下文本是对此图像的描述。"
 ALIGN=CENTER HSPACE=10 VSPACE=7> <br CLEAR=LEFT> 前两项是较简单的菜单项，加有标签 <code>&quot;Basic&quot;</code> 和 <code>&quot;Simple&quot;</code>。跟在这两项后面的是一个分隔符，它本身是一个使用标签 <code>&quot;-&quot;</code> 创建的菜单项。接下来是加有 <code>&quot;Check&quot;</code> 标签的 <code>CheckboxMenuItem</code> 的实例。最后一个菜单项是加有 <code>&quot;More&nbsp;Examples&quot;</code> 标签的子菜单，此子菜单是 <code>Menu</code> 的一个实例。
 <p>
选择菜单项时，AWT 发送一个动作事件到该菜单项。由于该事件是一个 <code>ActionEvent</code> 实例，<code>processEvent</code> 方法会检查该事件，并将它传递到 <code>processActionEvent</code>。后一方法将该事件重定向到任何 <code>ActionListener</code> 对象，该对象已在由此菜单项生成的动作事件中注册权益。
 <P>
注意，子类 <code>Menu</code> 重写此行为，且在选择其中一个子项前不向该框架发送任何事件。

@version 1.94, 07/11/06
@author Sami Shaio

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean java.awt.MenuItem.enabled
<!-- END KEY -->
<!-- BEGIN DATA -->
指示是否启用菜单项的值。如果启用该值，则将 <code>enabled</code> 设置为 true。否则，将 <code>enabled</code> 设置为 false。

@serial
@see #isEnabled()
@see #setEnabled(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String java.awt.MenuItem.label
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>label</code> 是菜单项的标签。它可以是任何字符串。

@serial
@see #getLabel()
@see #setLabel(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String java.awt.MenuItem.actionCommand
<!-- END KEY -->
<!-- BEGIN DATA -->
此字段指示已由特定的菜单项发出的命令。默认情况下，<code>actionCommand</code> 是菜单项的标签，除非使用 setActionCommand 对它进行了设置。

@serial
@see #setActionCommand(String)
@see #getActionCommand()

<!-- END DATA -->
<!-- BEGIN KEY -->
 long java.awt.MenuItem.eventMask
<!-- END KEY -->
<!-- BEGIN DATA -->
eventMask 仅由子类通过 enableEvents 设置。注册侦听器时，不应设置该屏蔽，以便我们可以区别侦听器请求事件和子类请求事件时的差异。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.MenuShortcut java.awt.MenuItem.shortcut
<!-- END KEY -->
<!-- BEGIN DATA -->
与菜单项关联的关键字序列。注意，在 1.1.2 中，必须使用菜单项上的 setActionCommand()，才可以以快捷方式工作。

@serial
@see #getShortcut()
@see #setShortcut(MenuShortcut)
@see #deleteShortcut()

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.MenuItem.menuItemSerializedDataVersion
<!-- END KEY -->
<!-- BEGIN DATA -->
菜单项的序列化数据版本。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuItem() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有空标签且没有键盘快捷方式的新菜单项。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless
@since    JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuItem(String label) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定的标签且没有键盘快捷方式的新菜单项。注意，保留标签中的&ldquo;-&rdquo;，用它来指示菜单项之间的分隔符。默认情况下，启用除分隔符之外的所有菜单项。
@param       label 此菜单项的标签。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless
@since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuItem(String label, MenuShortcut s) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有关联的键盘快捷方式的菜单项。注意，保留标签中的&ldquo;-&rdquo;，用它来指示菜单项之间的分隔符。默认情况下，启用除分隔符之外的所有菜单项。
@param       label 此菜单项的标签。
@param       s 与此菜单项关联的 <code>MenuShortcut</code> 的实例。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuItem.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建该菜单项的同位体。该同位体允许我们修改该菜单项的外观，而不改变其功能。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.MenuItem.getLabel()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此菜单项的标签。
@return  此菜单项的标签，如果此菜单项没有标签，则返回 <code>null</code>。
@see     java.awt.MenuItem#setLabel
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.MenuItem.setLabel(String label)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此菜单项的标签设置为指定标签。
@param     label   新标签，如果无标签，则该参数为 <code>null</code>。
@see       java.awt.MenuItem#getLabel
@since     JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.MenuItem.isEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查是否启用了此菜单项。
@see        java.awt.MenuItem#setEnabled
@since      JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.MenuItem.setEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置是否可以选择此菜单项。
@param      b  如果该参数为 <code>true</code>，则启用此菜单项；如果该参数为 <code>false</code>，则禁用它。
@see        java.awt.MenuItem#isEnabled
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.MenuItem.enable()
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，由 <code>setEnabled(boolean)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuItem.enable(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，由 <code>setEnabled(boolean)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.MenuItem.disable()
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，由 <code>setEnabled(boolean)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuShortcut java.awt.MenuItem.getShortcut()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此菜单项关联的 <code>MenuShortcut</code> 对象。
@return      与此菜单项关联的菜单快捷方式，如果没有指定菜单快捷方式，则返回 <code>null</code>。
@see         java.awt.MenuItem#setShortcut
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuItem.setShortcut(MenuShortcut s)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置与此菜单项关联的 <code>MenuShortcut</code> 对象。如果某一菜单快捷方式已经与此菜单项关联，则取代它。
@param       s  与此菜单项关联的菜单快捷方式。
@see         java.awt.MenuItem#getShortcut
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuItem.deleteShortcut()
<!-- END KEY -->
<!-- BEGIN DATA -->
删除与此菜单项关联的任何 <code>MenuShortcut</code> 对象。
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void java.awt.MenuItem.enableEvents(long eventsToEnable)
<!-- END KEY -->
<!-- BEGIN DATA -->
允许将事件提交到将由指定事件掩码参数定义的事件的菜单项。
 <p>
由于在将事件类型的侦听器添加到菜单项时，会自动启用该事件类型，所以只需通过 <code>MenuItem</code> 的子类调用此方法即可，该子类要具有提交到 <code>processEvent</code> 的指定事件类型，不管侦听器是否注册。

@param       eventsToEnable 定义事件类型的事件掩码
@see         java.awt.MenuItem#processEvent
@see         java.awt.MenuItem#disableEvents
@see         java.awt.Component#enableEvents
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void java.awt.MenuItem.disableEvents(long eventsToDisable)
<!-- END KEY -->
<!-- BEGIN DATA -->
禁止将事件提交到将由指定事件掩码参数定义的事件的菜单项。

@param       eventsToDisable 定义事件类型的事件掩码
@see         java.awt.MenuItem#processEvent
@see         java.awt.MenuItem#enableEvents
@see         java.awt.Component#disableEvents
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuItem.setActionCommand(String command)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置由此菜单项引发的动作事件的命令名。
 <p>
默认情况下，动作命令设置为菜单项的标签。
@param       command   要为此菜单项设置的动作命令。
@see         java.awt.MenuItem#getActionCommand
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.MenuItem.getActionCommand()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取由此菜单项引发的动作事件的命令名。
@see         java.awt.MenuItem#setActionCommand
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.MenuItem.addActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定的动作侦听器，以从此菜单项接收动作事件。如果 l 为 null，则不抛出异常，也不执行任何动作。
<p>有关 AWT 的线程模型的详细信息，请参阅 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"  >AWT 线程问题</a>。

@param      l 动作侦听器。
@see        #removeActionListener
@see        #getActionListeners
@see        java.awt.event.ActionEvent
@see        java.awt.event.ActionListener
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.MenuItem.removeActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定的动作侦听器，使其不再从此菜单项中接收动作事件。如果 l 为 null，则不抛出异常，也不执行任何动作。
<p>有关 AWT 的线程模型的详细信息，请参阅 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"  >AWT 线程问题</a>。

@param      l 动作侦听器。
@see        #addActionListener
@see        #getActionListeners
@see        java.awt.event.ActionEvent
@see        java.awt.event.ActionListener
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.event.ActionListener[] java.awt.MenuItem.getActionListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在此菜单项上注册的所有动作侦听器组成的数组。

@return 此菜单项的所有 <code>ActionListener</code>，如果当前未注册动作侦听器，则返回空数组。


@see        #addActionListener
@see        #removeActionListener
@see        java.awt.event.ActionEvent
@see        java.awt.event.ActionListener
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.awt.MenuItem.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前在此 <code>MenuItem</code> 上注册为 <code><em>Foo</em>Listener</code> 的所有对象组成的数组。<code><em>Foo</em>Listener</code> 使用 <code>add<em>Foo</em>Listener</code> 方法注册。

 <p>
可以使用类文本（如 <code><em>Foo</em>Listener.class</code>）指定 <code>listenerType</code> 参数。例如，可以使用下面的代码查询 <code>MenuItem</code> <code>m</code> 的动作侦听器：

 <pre>ActionListener[] als = (ActionListener[])(m.getListeners(ActionListener.class));</pre>

如果不存在此类侦听器，则此方法返回一个空数组。

@param listenerType 请求的侦听器的类型；此参数应指定一个从 <code>java.util.EventListener</code> 继承的接口
@return 在此菜单项上注册为 <code><em>Foo</em>Listener</code> 的所有对象组成的数组，如果未添加此侦听器，则返回一个空数组
@exception ClassCastException 如果 <code>listenerType</code> 未指定一个类或者实现 <code>java.util.EventListener</code> 的接口。

@see #getActionListeners
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.MenuItem.processEvent(AWTEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理此菜单项上的事件。如果事件是 <code>ActionEvent</code> 的一个实例，则调用 <code>processActionEvent</code>（通过 <code>MenuItem</code> 定义的另一个方法）。
 <p>
当前，菜单项仅支持动作事件。
<p>注意，如果事件参数为 <code>null</code>，则行为是不确定的，而且可能导致异常。

@param         e 事件
@see           java.awt.event.ItemEvent
@see           #processItemEvent
@since         JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.MenuItem.processActionEvent(ActionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理此菜单项上发生的动作事件，方法是将其指派给任何已注册的 <code>ActionListener</code> 对象。不调用此方法，除非为此组件启用了动作事件。在发生以下情况之一时启用动作事件：
 <p><ul>
<li>通过 <code>addActionListener</code> 注册 <code>ActionListener</code> 对象。
<li>通过 <code>enableEvents</code> 启用动作事件。
 </ul>
<p>注意，如果事件参数为 <code>null</code>，则行为是不确定的，而且可能导致异常。

@param       e 动作事件
@see         java.awt.event.ActionEvent
@see         java.awt.event.ActionListener
@see         java.awt.MenuItem#enableEvents
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.MenuItem.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此 <code>MenuItem</code> 状态的字符串。此方法仅用于调试目的，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可以为空，但不可以为 <code>null</code>。

@return 此菜单项的参数字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.MenuItem.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此菜单项关联的 AccessibleContext。对于菜单项，AccessibleContext 采用 AccessibleAWTMenuItem 的形式。必要时要创建新的 AccessibleAWTMenuItem 实例。

@return 用作此菜单项的 AccessibleContext 的 AccessibleAWTMenuItem
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.MenuItem.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取 <code>ObjectInputStream</code>，如果它不为 <code>null</code>，则添加一个侦听器，以接收由 <code>Menu</code> 项引发的动作事件。未识别的键或值将被忽略。
 
@param s 要读取的 <code>ObjectInputStream</code>
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless</code> 返回 <code>true</code>
@see #removeActionListener(ActionListener)
@see #addActionListener(ActionListener)
@see #writeObject(ObjectOutputStream)

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.MenuItem.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将默认的可序列化字段写入流中。将一个可序列化的 <code>ActionListeners</code> 列表作为可选数据写入。检测不可序列化的侦听器并且不尝试对其进行序列化。

@param s 要写入的 <code>ObjectOutputStream</code>
@serialData <code>null</code> 表示终止 0 或更多对的序列；这种对是由 <code>String</code> 和 <code>Object</code> 组成的；<code>String</code> 指示对象类型，它为以下类型之一：<code>指示 <code>ActionListener</code> 对象的 actionListenerK</code> 

@see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)
@see #readObject(ObjectInputStream)

<!-- END DATA -->
