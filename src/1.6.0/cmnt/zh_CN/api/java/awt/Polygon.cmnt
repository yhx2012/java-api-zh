<!-- BEGIN KEY -->
public class java.awt.Polygon extends java.lang.Object implements java.awt.Shape, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Polygon</code> 类封装了坐标空间中封闭的二维区域的描述。此区域以任意条线段为边界，每条线段都是多边形的一条边。在内部，一个多边形包含一列 {@code (x,y)} 坐标对，其中每个坐标对（coordinate pair）定义多边形的一个<i>顶点</i>，且两个连续的坐标对是多边形一条边的端点。第一个和最后一个 {@code (x,y)} 坐标对通过一条线段相连，形成一个封闭的多边形。此 <code>Polygon</code> 是按奇-偶性旋绕规则来定义的。有关奇-偶性旋绕规则的定义，请参见 {@link java.awt.geom.PathIterator#WIND_EVEN_ODD WIND_EVEN_ODD}。此类的目标测试方法使用 {@link Shape} 类注释中描述的 <i>insideness</i> 定义，目标测试方法包括 <code>contains</code>、<code>intersects</code> 和 <code>inside</code> 方法。

@version     1.26, 07/24/98
@author 	Sami Shaio
@see Shape
@author      Herb Jellinek
@since       1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Polygon.npoints
<!-- END KEY -->
<!-- BEGIN DATA -->
点的总数。<code>npoints</code> 的值表示在此 <code>Polygon</code> 中有效的点的数量，该值可以小于 {@link #xpoints xpoints} 或 {@link #ypoints ypoints} 中元素的个数。此值可以为 NULL。

@serial
@see #addPoint(int, int)
@since 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.awt.Polygon.xpoints
<!-- END KEY -->
<!-- BEGIN DATA -->
X 坐标的数组。此数组中元素的个数可以大于此 <code>Polygon</code> 中 X 坐标的个数。额外的元素允许新的点添加到此 <code>Polygon</code> 中，而无需重新创建此数组。{@link #npoints npoints} 的值等于此 <code>Polygon</code> 中有效点的个数。

@serial
@see #addPoint(int, int)
@since 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.awt.Polygon.ypoints
<!-- END KEY -->
<!-- BEGIN DATA -->
Y 坐标的数组。此数组中元素的个数可以大于此 <code>Polygon</code> 中 Y 坐标的个数。额外的元素允许新的点添加到 <code>Polygon</code> 中，而无需重新创建此数组。<code>npoints</code> 的值等于此 <code>Polygon</code> 中有效点的个数。

@serial
@see #addPoint(int, int)
@since 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle java.awt.Polygon.bounds
<!-- END KEY -->
<!-- BEGIN DATA -->
此 {@code Polygon} 的边界。此值可以为 null。
 
@serial
@see #getBoundingBox()
@see #getBounds()
@since 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Polygon()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建空的多边形。
@since 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Polygon(int[] xpoints, int[] ypoints, int npoints)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定的参数构造并初始化新的 <code>Polygon</code>。
@param xpoints X 坐标的数组
@param ypoints Y 坐标的数组
@param npoints 此 <code>Polygon</code> 中点的总数
@exception  NegativeArraySizeException 如果 <code>npoints</code> 为负值。
@exception  IndexOutOfBoundsException 如果 <code>npoints</code> 大于 <code>xpoints</code> 或 <code>ypoints</code> 的长度。
@exception  NullPointerException 如果 <code>xpoints</code> 或 <code>ypoints</code> 为 <code>null</code>。
@since 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Polygon.reset()
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Polygon</code> 对象重置为一个空多边形。坐标数组及其中的数据不发生改变，但点的个数被重置为零，以便将旧的顶点数据标记为无效，并且开始从头累积新的顶点数据。与旧顶点相关的所有内部缓冲的数据都将被丢弃。注意，由于重用了重置之前的坐标数组，因此在将创建一个新的空 <code>Polygon</code> 与重置当前多边形相比时，如果新多边形数据的顶点数远远少于重置之前的数据的顶点数，则重新创建将会提高内存的效率。
@see         java.awt.Polygon#invalidate
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Polygon.invalidate()
<!-- END KEY -->
<!-- BEGIN DATA -->
所有内部缓冲数据的失效或刷新都依赖于此 <code>Polygon</code> 的顶点坐标。此方法应该在完成对 <code>xpoints</code> 或 <code>ypoints</code> 数组中坐标的直接操作之后被调用，以避免产生与 <code>getBounds</code> 或 <code>contains</code> 这样的方法不一致的结果，后者这些方法可能从与顶点坐标相关联的更早的计算中缓冲数据。
@see         java.awt.Polygon#getBounds
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Polygon.translate(int deltaX, int deltaY)
<!-- END KEY -->
<!-- BEGIN DATA -->
对 <code>Polygon</code> 的顶点进行平移，沿 x 轴移动 <code>deltaX</code>，沿 y 移动 <code>deltaY</code>。
@param deltaX 沿 X 轴移动的量
@param deltaY 沿 Y 轴移动的量
@since 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Polygon.addPoint(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的坐标追加到此 <code>Polygon</code>。
 <p>
如果已经执行了计算此 <code>Polygon</code> 的边界框的操作，例如 <code>getBounds</code> 或 <code>contains</code>，则此方法将更新边界框。
@param       x 指定的 X 坐标
@param       y 指定的 Y 坐标
@see         java.awt.Polygon#getBounds
@see         java.awt.Polygon#contains
@since 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle java.awt.Polygon.getBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>Polygon</code> 的边界框。边界框是最小的 {@link Rectangle}，其边平行于坐标空间的 x 轴和 y 轴，且能够完全包含 <code>Polygon</code>。
@return 返回定义此 <code>Polygon</code> 边界的 <code>Rectangle</code>。
@since       1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle java.awt.Polygon.getBoundingBox()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Polygon</code> 的边界。
@return  返回此 <code>Polygon</code> 的边界。
@deprecated 从 JDK version 1.1 开始，由 <code>getBounds()</code> 取代。
@since 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Polygon.contains(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定指定的 {@link Point} 是否位于此 <code>Polygon</code> 的内部。
@param p 要测试的指定的 <code>Point</code>
@return 如果 <code>Polygon</code> 包含 <code>Point</code>，则返回 <code>true</code>；否则返回 <code>false</code>。
@see #contains(double, double)
@since 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Polygon.contains(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定指定的坐标是否位于此 <code>Polygon</code> 的内部。
 <p>

@param x 要测试的指定的 X 坐标
@param y 要测试的指定的 Y 坐标
@return 如果此 {@code Polygon} 包含指定的坐标 {@code (x,y)}，则返回 {@code true}；否则返回 {@code false}。
@see #contains(double, double)
@since      1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Polygon.inside(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此 <code>Polygon</code> 是否包含指定的坐标。
@param x 要测试的指定的 X 坐标
@param y 要测试的指定的 Y 坐标
@return 如果此 {@code Polygon} 包含指定的坐标 {@code (x,y)}，则返回 {@code true}；否则返回 {@code false}。
@see #contains(double, double)
@deprecated 从 JDK version 1.1 开始, 此函数为 <code>contains(int, int)</code>。
@since 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Rectangle2D java.awt.Polygon.getBounds2D()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Polygon.contains(double x, double y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Polygon.contains(Point2D p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Polygon.intersects(double x, double y, double w, double h)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Polygon.intersects(Rectangle2D r)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Polygon.contains(double x, double y, double w, double h)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Polygon.contains(Rectangle2D r)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.PathIterator java.awt.Polygon.getPathIterator(AffineTransform at)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回迭代器对象，此对象沿此 <code>Polygon</code> 的边界进行迭代，并且提供对此 <code>Polygon</code> 轮廓的几何形状的访问。可以指定一个可选的 {@link AffineTransform}，以便对迭代中返回的坐标进行相应的转换。
@param at 坐标在迭代中返回时，要应用于这些坐标的可选的 <code>AffineTransform</code>，或者需要撤消转换时为 <code>null</code>
@return {@link PathIterator} 对象，该对象提供对此 <code>Polygon</code> 的几何形状的访问。 
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.PathIterator java.awt.Polygon.getPathIterator(AffineTransform at, double flatness)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回迭代器对象，此对象沿 <code>Shape</code> 的边界进行迭代，并且提供了对 <code>Shape</code> 轮廓的几何形状的访问。迭代器只返回 SEG_MOVETO、SEG_LINETO 和 SEG_CLOSE 点类型。由于多边形是平面的，因此可以忽略 <code>flatness</code> 参数。可以指定可选的 <code>AffineTransform</code>，在这种情况下相应地转换在迭代返回的坐标。
@param at 坐标在迭代中返回时，要应用于这些坐标的可选的 <code>AffineTransform</code>，或者需要撤消转换时为 <code>null</code>
@param flatness 在使用连接端点的直线取代细分的曲线之前，给定曲线的控制点可以从共线变化的最大量。由于多平形是平面的，因此可以忽略 <code>flatness</code> 参数。
@return 返回 <code>PathIterator</code> 对象，此对象提供对 <code>Shape</code> 对象的几何形状的访问。
@since 1.2

<!-- END DATA -->
