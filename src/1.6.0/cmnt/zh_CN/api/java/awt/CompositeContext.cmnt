<!-- BEGIN KEY -->
public interface java.awt.CompositeContext
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>CompositeContext</code> 接口为复合操作定义了已封装和已优化的环境。<code>CompositeContext</code> 对象维护复合操作的状态。在多线程环境中，单个 {@link Composite} 对象可同时有多个上下文。
@see Composite
@version 10 Feb 1997

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.CompositeContext.dispose()
<!-- END KEY -->
<!-- BEGIN DATA -->
释放分配给上下文的资源。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.CompositeContext.compose(Raster src, Raster dstIn, WritableRaster dstOut)
<!-- END KEY -->
<!-- BEGIN DATA -->
组合两个源 {@link Raster} 对象并将结果置于目标 {@link WritableRaster} 中。注意，目标可以是第一个或第二个源对象。注意，<code>dstIn</code> 和 <code>dstOut</code> 必须与传递给 <code>Composite</code> 接口的 {@link Composite#createContext (java.awt.image.ColorModel、java.awt.image.ColorModel、java.awt.RenderingHints) createContext} 方法的 <code>dstColorModel</code> 兼容。
@param src 复合操作的第一个源
@param dstIn  复合操作的第二个源
@param dstOut 存储操作结果的 <code>WritableRaster</code>
@see Composite

<!-- END DATA -->
