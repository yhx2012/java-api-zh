<!-- BEGIN KEY -->
public class java.awt.GridBagLayout extends java.lang.Object implements java.awt.LayoutManager2, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>GridBagLayout</code> 类是一个灵活的布局管理器，它不要求组件的大小相同便可以将组件垂直、水平或沿它们的基线对齐。每个 <code>GridBagLayout</code> 对象维持一个动态的矩形单元网格，每个组件占用一个或多个这样的单元，该单元被称为<em>显示区域</em>。
 <p>
每个由 <code>GridBagLayout</code> 管理的组件都与 {@link GridBagConstraints} 的实例相关联。Constraints 对象指定组件的显示区域在网格中的具体放置位置，以及组件在其显示区域中的放置方式。除了 Constraints 对象之外，<code>GridBagLayout</code> 还考虑每个组件的最小大小和首选大小，以确定组件的大小。
 <p>
网格的总体方向取决于容器的 {@link ComponentOrientation} 属性。对于水平的从左到右的方向，网格坐标 (0,0) 位于容器的左上角，其中 X 向右递增，Y 向下递增。对于水平的从右到左的方向，网格坐标 (0,0) 位于容器的右上角，其中 X 向左递增，Y 向下递增。
 <p>
为了有效使用网格包布局，必须自定义与组件关联的一个或多个 <code>GridBagConstraints</code> 对象。可以通过设置一个或多个实例变量来自定义 <code>GridBagConstraints</code> 对象：
 <p>
 <dl>
<dt>{@link GridBagConstraints#gridx}、{@link GridBagConstraints#gridy}
<dd>指定包含组件显示区域的前导角的单元，在此显示区域中，位于网格原点的单元地址是 <code>gridx&nbsp;=&nbsp;0</code>, <code>gridy&nbsp;=&nbsp;0</code>。对于水平的从左到右的布局，组件的前导角是其左上角。对于水平的从右到左的布局，组件的前导角是其右上角。使用 <code>GridBagConstraints.RELATIVE</code>（默认值），指定会将组件直接放置在之前刚添加到容器中的组件的后面（沿 X 轴向为 <code>gridx</code> 或 Y 轴向为 <code>gridy</code>）。
<dt>{@link GridBagConstraints#gridwidth}、{@link GridBagConstraints#gridheight}
<dd>指定组件的显示区域中行（针对 <code>gridwidth</code>）或列（针对 <code>gridheight</code>）中的单元数。默认值为 1。使用 <code>GridBagConstraints.REMAINDER</code> 指定组件的显示区域，该区域的范围是从 <code>gridx</code> 到该行（针对 <code>gridwidth</code>）中的最后一个单元，或者从 <code>gridy</code> 到该列（针对 <code>gridheight</code>）中的最后一个单元。

使用 <code>GridBagConstraints.RELATIVE</code> 指定组件的显示区域，该区域的范围是从 <code>gridx</code> 到其所在行（针对 <code>gridwidth</code>）的倒数第二个单元，或者从 <code>gridy</code> 到其所在列（针对 <code>gridheight</code>）的倒数第二个单元。
 
<dt>{@link GridBagConstraints#fill}
<dd>当组件的显示区域大于组件的所需大小时，用于确定是否（以及如何）调整组件。可能的值为 <code>GridBagConstraints.NONE</code>（默认值）、<code>GridBagConstraints.HORIZONTAL</code>（加宽组件直到它足以在水平方向上填满其显示区域，但不更改其高度）、<code>GridBagConstraints.VERTICAL</code>（加高组件直到它足以在垂直方向上填满其显示区域，但不更改其宽度）和 <code>GridBagConstraints.BOTH</code>（使组件完全填满其显示区域）。
<dt>{@link GridBagConstraints#ipadx}、{@link GridBagConstraints#ipady}
<dd>指定布局中组件的内部填充，即对组件最小大小的添加量。组件的宽度至少为其最小宽度加上 <code>ipadx</code> 像素。类似地，组件的高度至少为其最小高度加上 <code>ipady</code> 像素。
<dt>{@link GridBagConstraints#insets}
<dd>指定组件的外部填充，即组件与其显示区域边缘之间间距的最小量。
<dt>{@link GridBagConstraints#anchor}
<dd>指定组件应置于其显示区域中何处。可能的值有三种：绝对值、相对于方向的值和相对于基线的值。相对于方向的值是相对于容器的 <code>ComponentOrientation</code> 属性进行解释的，而绝对值则不然。相关于基线的值是相对于基线进行计算的。有效值包括：</dd>
 <p>
 <center><table BORDER=0 COLS=3 WIDTH=800 SUMMARY="absolute, relative and baseline values as described above">
<th><P ALIGN="LEFT">绝对值</th>
<th><P ALIGN="LEFT">相对于方向的值</th>
<th><P ALIGN="LEFT">相对于基线的值</th>
 </tr>
 <tr>
 <td>
 <li><code>GridBagConstraints.NORTH</code></li>
 <li><code>GridBagConstraints.SOUTH</code></li>
 <li><code>GridBagConstraints.WEST</code></li>
 <li><code>GridBagConstraints.EAST</code></li>
 <li><code>GridBagConstraints.NORTHWEST</code></li>
 <li><code>GridBagConstraints.NORTHEAST</code></li>
 <li><code>GridBagConstraints.SOUTHWEST</code></li>
 <li><code>GridBagConstraints.SOUTHEAST</code></li>
 <li><code>GridBagConstraints.CENTER</code>（默认值）</li>
 </td>
 <td>
 <li><code>GridBagConstraints.PAGE_START</code></li>
 <li><code>GridBagConstraints.PAGE_END</code></li>
 <li><code>GridBagConstraints.LINE_START</code></li>
 <li><code>GridBagConstraints.LINE_END</code></li>
 <li><code>GridBagConstraints.FIRST_LINE_START</code></li>
 <li><code>GridBagConstraints.FIRST_LINE_END</code></li>
 <li><code>GridBagConstraints.LAST_LINE_START</code></li>
 <li><code>GridBagConstraints.LAST_LINE_END</code></li>
 </td>
 <td>
 <li><code>GridBagConstraints.BASELINE</code></li>
 <li><code>GridBagConstraints.BASELINE_LEADING</code></li>
 <li><code>GridBagConstraints.BASELINE_TRAILING</code></li>
 <li><code>GridBagConstraints.ABOVE_BASELINE</code></li>
 <li><code>GridBagConstraints.ABOVE_BASELINE_LEADING</code></li>
 <li><code>GridBagConstraints.ABOVE_BASELINE_TRAILING</code></li>
 <li><code>GridBagConstraints.BELOW_BASELINE</code></li>
 <li><code>GridBagConstraints.BELOW_BASELINE_LEADING</code></li>
 <li><code>GridBagConstraints.BELOW_BASELINE_TRAILING</code></li>
 </td>
 </tr>
 </table></center><p>
<dt>{@link GridBagConstraints#weightx}、{@link GridBagConstraints#weighty}
<dd>用于确定分布空间的方式，这对于指定调整行为至关重要。除非在行 (<code>weightx</code>) 和列 (<code>weighty</code>) 中至少指定一个组件的权重，否则所有组件都会聚集在其容器的中央。这是因为，当权重为零（默认值）时，<code>GridBagLayout</code> 对象会将所有额外空间置于其单元网格和容器边缘之间。
 </dl>
 <p>
每行可以有一条基线，具体取决于该行中具有有效基线并沿此基线对齐的组件（组件的锚值是 {@code BASELINE}、{@code BASELINE_LEADING} 或 {@code BASELINE_TRAILING} 其中之一）。如果行中没有具有有效基线的组件，则该行没有基线。
 <p>
如果组件跨多行，则它与起始行（如果基线调整行为是 {@code CONSTANT_ASCENT}）或结束行（如果基线调整行为是 {@code CONSTANT_DESCENT}）的基线对齐。用来对齐组件的行称为<em>主导行</em>。
 <p>
下图显示了基线布局并包括横跨行的组件：
 <center><table summary="Baseline Layout">
 <tr ALIGN=CENTER>
 <td>
 <img src="doc-files/GridBagLayout-baseline.png"
  alt=“对此图形的描述见下文（图 1）。”ALIGN=center>
 </td>
 </table></center>
 此布局由三个组件组成：
 <ul><li>起始于 0 行并结束于 1 行的面板。该面板有一个 <code>CONSTANT_DESCENT</code> 基线调整行为以及 <code>BASELINE</code> 的锚。因为基线调整行为是 <code>CONSTANT_DESCENT</code>，所以该面板的主要行是第 1 行。
 <li>两个按钮，每个按钮都带有 <code>CENTER_OFFSET</code> 基线调整行为和 <code>BASELINE</code> 的锚。
 </ul>
 因为第二个按钮和面板共享相同的主要行，所以它们都沿其基线对齐。
 <p>
 使用一个相对于基线的值定位的组件调整不同于使用绝对值或相对于方向的值。组件更改的方式由主要行的基线更改方式指示。如果基于相同主导行的所有组件具有 <code>CONSTANT_DESCENT</code> 基线调整行为，则基线定位到显示区域底部；否则，基线定位到显示区域顶部。下述规则指示调整大小的行为：
 <ul>
 <li>位于基线上方的可调整大小的组件只能增长到与该基线一样高。例如，如果基线为 100 且位于顶部，则位于基线上方的可调整大小的组件的增长永远都不能超过 100 个单位。
 <li>同样地，位于基线下方的可调整大小的组件只能增长到和显示高度与基线之间的差值一样高。
 <li>仅当调整了大小的基线适应显示区域时，才能调整基线上具有 <code>OTHER</code> 基线调整行为的可调整大小组件。如果不能将基线放入显示区域，则该组件不能调整大小。
 <li>位于该基线上没有 <code>OTHER</code> 基线调整行为的组件只能增长到和{@code 显示高度 - 基线 + 组件基线}一样高。
 </ul>
 如果沿基线放置一个组件，但该组件没有有效的基线，那么它将在其空间中垂直居中对齐。同样地，如果已放置一个相对于基线的组件且行中的所有组件都没有有效的基线，则该组件垂直居中对齐。
 <p>
下图显示了由网格包布局管理的十个组件（均为按钮）。图 2 显示水平方向从左到右的容器的布局，图 3 显示水平方向从右到左的容器的布局。
 <p>
 <center><table COLS=2 WIDTH=600 summary="layout">
 <tr ALIGN=CENTER>
 <td>
<img src="doc-files/GridBagLayout-1.gif" alt="对此图形的描述见前文（图 1）。" ALIGN=center HSPACE=10 VSPACE=7>
 </td>
 <td>
<img src="doc-files/GridBagLayout-2.gif" alt="对此图形的描述见前文（图 2）。" ALIGN=center HSPACE=10 VSPACE=7>
 </td>
 <tr ALIGN=CENTER>
<td>图 2：水平方向，从左到右</td>
<td>图 3：水平方向，从右到左</td>
 </tr>
 </table></center>
 <p>
十个组件的每一个组件都会将与之相关的 <code>GridBagConstraints</code> 对象的 <code>fill</code> 字段设置为 <code>GridBagConstraints.BOTH</code>。此外，这些组件还具有以下非默认值约束 (Constraints)：
 <p>
 <ul>
<li>Button1、Button2、Button3： <code>weightx&nbsp;=&nbsp;1.0</code>
<li>Button4：<code>weightx&nbsp;=&nbsp;1.0</code>、<code>gridwidth&nbsp;=&nbsp;GridBagConstraints.REMAINDER</code>
<li>Button5：<code>gridwidth&nbsp;=&nbsp;GridBagConstraints.REMAINDER</code>
<li>Button6：<code>gridwidth&nbsp;=&nbsp;GridBagConstraints.RELATIVE</code>
<li>Button7：<code>gridwidth&nbsp;=&nbsp;GridBagConstraints.REMAINDER</code>
<li>Button8：<code>gridheight&nbsp;=&nbsp;2</code>、<code>weighty&nbsp;=&nbsp;1.0</code>
<li>Button9、Button 10：<code>gridwidth&nbsp;=&nbsp;GridBagConstraints.REMAINDER</code>
 </ul>
 <p>
下面是实现上述示例的代码：
 <p>
 <hr><blockquote><pre>
 import java.awt.*;
 import java.util.*;
 import java.applet.Applet;

 public class GridBagEx1 extends Applet {

     protected void makebutton(String name,
                               GridBagLayout gridbag,
                               GridBagConstraints c) {
         Button button = new Button(name);
         gridbag.setConstraints(button, c);
         add(button);
     }

     public void init() {
         GridBagLayout gridbag = new GridBagLayout();
         GridBagConstraints c = new GridBagConstraints();

         setFont(new Font(&quot;SansSerif&quot;, Font.PLAIN, 14));
         setLayout(gridbag);

         c.fill = GridBagConstraints.BOTH;
         c.weightx = 1.0;
         makebutton(&quot;Button1&quot;, gridbag, c);
         makebutton(&quot;Button2&quot;, gridbag, c);
         makebutton(&quot;Button3&quot;, gridbag, c);

     	   c.gridwidth = GridBagConstraints.REMAINDER; //end row
         makebutton(&quot;Button4&quot;, gridbag, c);

         c.weightx = 0.0;		   //reset to the default
         makebutton(&quot;Button5&quot;, gridbag, c); //another row

 	   c.gridwidth = GridBagConstraints.RELATIVE; //next-to-last in row
         makebutton(&quot;Button6&quot;, gridbag, c);

 	   c.gridwidth = GridBagConstraints.REMAINDER; //end row
         makebutton(&quot;Button7&quot;, gridbag, c);

 	   c.gridwidth = 1;	   	   //reset to the default
 	   c.gridheight = 2;
         c.weighty = 1.0;
         makebutton(&quot;Button8&quot;, gridbag, c);

         c.weighty = 0.0;		   //reset to the default
 	   c.gridwidth = GridBagConstraints.REMAINDER; //end row
 	   c.gridheight = 1;		   //reset to the default
         makebutton(&quot;Button9&quot;, gridbag, c);
         makebutton(&quot;Button10&quot;, gridbag, c);

         setSize(300, 100);
     }

     public static void main(String args[]) {
 	   Frame f = new Frame(&quot;GridBag Layout Example&quot;);
 	   GridBagEx1 ex1 = new GridBagEx1();

 	   ex1.init();

 	   f.add(&quot;Center&quot;, ex1);
 	   f.pack();
 	   f.setSize(f.getPreferredSize());
 	   f.show();
     }
 }
 </pre></blockquote><hr>
 <p>

@version     1.79, 05/12/06
@author Doug Stein
@author Bill Spitzak (orignial NeWS & OLIT implementation)
@see       java.awt.GridBagConstraints
@see       java.awt.GridBagLayoutInfo
@see       java.awt.ComponentOrientation
@since JDK1.0 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static final int java.awt.GridBagLayout.MAXGRIDSIZE
<!-- END KEY -->
<!-- BEGIN DATA -->
 此字段不再用于保留数组和保持向后兼容性。以前，此是网格包布局布置的网格位置（既包括水平的位置，也包括垂直的位置）的最大数。当前实现不会对网格大小产生任何影响。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static final int java.awt.GridBagLayout.MINSIZE
<!-- END KEY -->
<!-- BEGIN DATA -->
网格包布局可以布置的最小网格。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static final int java.awt.GridBagLayout.PREFERREDSIZE
<!-- END KEY -->
<!-- BEGIN DATA -->
网格包布局可以布置的首选网格大小。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Hashtable<java.awt.Component, java.awt.GridBagConstraints> java.awt.GridBagLayout.comptable
<!-- END KEY -->
<!-- BEGIN DATA -->
此哈希表维持组件与其网格包约束之间的关联。<code>comptable</code> 中的键是组件，值是 <code>GridBagConstraints</code> 的实例。

@serial
@see java.awt.GridBagConstraints

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.GridBagConstraints java.awt.GridBagLayout.defaultConstraints
<!-- END KEY -->
<!-- BEGIN DATA -->
此字段保持包含默认值的网格包约束实例，因此如果某个组件没有与其相关联的网格包约束，则会分配给该组件一个 <code>defaultConstraints</code> 的副本。

@serial
@see #getConstraints(Component)
@see #setConstraints(Component, GridBagConstraints)
@see #lookupConstraints(Component)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.GridBagLayoutInfo java.awt.GridBagLayout.layoutInfo
<!-- END KEY -->
<!-- BEGIN DATA -->
此字段保持网格包的布局信息。此字段中的信息基于最近验证的网格包。如果 <code>layoutInfo</code> 为 <code>null</code>，这指示网格包中不存在组件，或者即使存在，也是尚未经过验证的组件。

@serial
@see #getLayoutInfo(Container, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.awt.GridBagLayout.columnWidths
<!-- END KEY -->
<!-- BEGIN DATA -->
此字段保持对列最小宽度的重写。如果此字段为非 <code>null</code>，则在计算全部最小列宽度之后将这些值应用到网格包。如果 columnWidths 的元素数多于列数，则在网格包中添加列以匹配 columnWidth 中的元素数。

@serial
@see #getLayoutDimensions()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.awt.GridBagLayout.rowHeights
<!-- END KEY -->
<!-- BEGIN DATA -->
此字段保持对行最小高度的重写。如果此字段为非 <code>null</code>，则在计算全部最小行高度之后将这些值应用到网格包。如果 <code>rowHeights</code> 的元素数多于行数，则在网格包中添加行以匹配 <code>rowHeights</code> 中的元素数。

@serial
@see #getLayoutDimensions()

<!-- END DATA -->
<!-- BEGIN KEY -->
public double[] java.awt.GridBagLayout.columnWeights
<!-- END KEY -->
<!-- BEGIN DATA -->
此字段保持对列权重的重写。如果此字段为非 <code>null</code>，则在计算全部列权重之后将这些值应用到网格包。如果 <code>columnWeights[i]</code> 大于列 i 的权重，则将 <code>columnWeights[i]</code> 中的权重分配给列 i。如果 <code>columnWeights</code> 的元素数多于列数，则多余的元素将被忽略&mdash;&mdash;而不会相应地创建更多列。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public double[] java.awt.GridBagLayout.rowWeights
<!-- END KEY -->
<!-- BEGIN DATA -->
此字段保持对行权重的重写。如果此字段为非 <code>null</code>，则在计算全部行权重之后将这些值应用到网格包。如果 <code>rowWeights[i]</code> 大于行 i 的权重，则将 <code>rowWeights[i]</code> 中的权重分配给行 i。如果 <code>rowWeights</code> 的元素多于行数，则多余的元素将被忽略&mdash;&mdash;它们不会导致更多行的创建。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.Component java.awt.GridBagLayout.componentAdjusting
<!-- END KEY -->
<!-- BEGIN DATA -->
 正放置的组件。这是在调用 <code>adjustForGravity</code> 之前设置的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.GridBagLayout()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建网格包布局管理器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.GridBagLayout.setConstraints(Component comp, GridBagConstraints constraints)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此布局中指定组件的约束条件。
@param       comp 要修改的组件
@param       constraints 要应用的约束条件

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.GridBagConstraints java.awt.GridBagLayout.getConstraints(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定组件的约束。返回实际 <code>GridBagConstraints</code> 对象的副本。
@param       comp 要查询的组件
@return      此网格包布局中指定组件的约束；返回实际约束对象的副本

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.GridBagConstraints java.awt.GridBagLayout.lookupConstraints(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
检索指定组件的约束。返回值不是副本，而是布局机制使用的实际 <code>GridBagConstraints</code> 对象。
 <p>
如果 <code>comp</code> 不在 <code>GridBagLayout</code> 中，则返回一组默认的 <code>GridBagConstraints</code>。值为 <code>null</code> 的 <code>comp</code> 值是无效的，返回 <code>null</code>。

@param       comp 要查询的组件
@return      指定组件的约束

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.GridBagLayout.getLayoutOrigin()
<!-- END KEY -->
<!-- BEGIN DATA -->
在目标容器的图形坐标空间确定布局区域的原点。此值表示布局区域的左上角的像素坐标，不管容器的 <code>ComponentOrientation</code> 值如何。这与单元坐标给定的网格原点 (0,0) 不同。大多数应用程序并不直接调用此方法。
@return     布局网格左上角的单元的图形原点
@see        java.awt.ComponentOrientation
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[][] java.awt.GridBagLayout.getLayoutDimensions()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定布局网格的列宽度和行高度。
 <p>
大多数应用程序并不直接调用此方法。
@return     一个二维数组，包含布局列的宽度和布局行的高度
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public double[][] java.awt.GridBagLayout.getLayoutWeights()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定布局网格的行与列的权重。如果布局具有额外空间来填充，则权重用于计算给定的行或列可以伸展得超过首选大小多少。
 <p>
大多数应用程序不直接调用此方法。
@return      一个二维数组，表示布局列的水平权重和布局行的垂直权重。
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.GridBagLayout.location(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定在布局网格中哪个单元包含由 <code>(x,&nbsp;y)</code> 指定的点。每个单元由其列索引（范围从 0 到列数减 1）和其行索引（范围从 0 到行数减 1）来标识。
 <p>
如果 <code>(x,&nbsp;y)</code> 点位于网格的外部，则使用以下规则。如果 <code>x</code> 位于从左到右容器布局的左边或位于从右到左容器布局的右边，则列索引的返回值为 0。如果 <code>x</code> 位于从左到右容器布局的右边或位于从右到左容器布局的左边，则列索引的返回值是列数。如果 <code>y</code> 位于布局的上边，则行索引的返回值为零；如果 <code>y</code> 位于布局的下边，则行索引的返回值为行数。容器的方向由其 <code>ComponentOrientation</code> 属性确定。
@param      x    点的 <i>x</i> 坐标
@param      y    点的 <i>y</i> 坐标
@return     索引的有序对，指示布局网格中的哪个单元包含点 (<i>x</i>,<i>y</i>)。
@see        java.awt.ComponentOrientation
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.GridBagLayout.addLayoutComponent(String name, Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
无效，因为此布局管理器不使用每组件字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.GridBagLayout.addLayoutComponent(Component comp, Object constraints)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定 <code>constraints</code> 对象将指定组件添加到布局中。注意，约束条件是可变的，因此缓存时应该复制。

@param      comp         要添加的组件
@param      constraints  确定如何将组件添加到布局的对象
@exception IllegalArgumentException 如果 <code>constraints</code> 不是 <code>GridBagConstraint</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.GridBagLayout.removeLayoutComponent(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此布局移除指定组件。
 <p>
大多数应用程序不直接调用此方法。
@param   comp   要移除的组件。
@see      java.awt.Container#remove(java.awt.Component)
@see      java.awt.Container#removeAll()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.GridBagLayout.preferredLayoutSize(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用此网络包布局确定 <code>parent</code> 容器的首选大小。
 <p>
大多数应用程序不直接调用此方法。

@param     parent   在其中进行布局的容器
@see       java.awt.Container#getPreferredSize
@return <code>parent</code> 容器的首选大小

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.GridBagLayout.minimumLayoutSize(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用此网格包布局确定 <code>parent</code> 容器的最小大小。
 <p>
大多数应用程序不直接调用此方法。
@param     parent   在其中进行布局的容器
@see       java.awt.Container#doLayout
@return <code>parent</code> 容器的最小大小

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.GridBagLayout.maximumLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给出指定目标容器中的组件的前提下，返回此布局的最大维数
@param target 需要布置的容器
@see Container
@see #minimumLayoutSize(Container)
@see #preferredLayoutSize(Container)
@return 此布局的最大维数

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.GridBagLayout.getLayoutAlignmentX(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回沿 X 轴的对齐方式。它指定该组件相对于其他组件如何对齐。该值应该是一个介于 0 和 1 之间的数，其中 0 表示沿原点对齐，1 表示按距原点最远的点对齐，0.5 表示居中对齐等。
 <p>
@return 指示居中对齐的值 <code>0.5f</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.GridBagLayout.getLayoutAlignmentY(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回沿 y 轴的对齐方式。它指定该组件相对于其他组件如何对齐。该值应该是一个介于 0 和 1 之间的数，其中 0 表示沿原点对齐，1 表示按距原点最远的点对齐，0.5 表示居中对齐等。
 <p>
@return 指示居中对齐的值 <code>0.5f</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.GridBagLayout.invalidateLayout(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
使布局失效，指示如果布局管理器缓存了信息，则应该将其丢弃。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.GridBagLayout.layoutContainer(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用此网格包布局布置指定容器。为了满足此 <code>GridBagLayout</code> 对象的约束条件，此方法会重塑指定容器中的组件。
 <p>
大多数应用程序不直接调用此方法。
@param      parent   要在其中进行布局的容器
@see        java.awt.Container
@see        java.awt.Container#doLayout

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.GridBagLayout.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此网格包布局的值的字符串表示形式。
@return     此网格包布局的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.GridBagLayoutInfo java.awt.GridBagLayout.getLayoutInfo(Container parent, int sizeflag)
<!-- END KEY -->
<!-- BEGIN DATA -->
为当前受管子级的集合填充 <code>GridBagLayoutInfo</code> 的实例。这需要通过子级集合传递三次：

 <ol>
<li>计算布局网格的维数。
<li>确定组件占用的单元。
<li>在行/列中分布权重和最小大小。
 </ol>

第一次遇到子级时，此操作还会将所有子级的最小大小缓存起来（因此后续循环不必再次请求）。
 <p>
此方法仅供 <code>GridBagLayout</code> 内部使用。

@param parent  布局容器
@param sizeflag <code>PREFERREDSIZE</code> 或 <code>MINSIZE</code>
@return 子级集合的 <code>GridBagLayoutInfo</code>
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.GridBagLayoutInfo java.awt.GridBagLayout.GetLayoutInfo(Container parent, int sizeflag)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法已过时，仅为提供向后兼容性；新代码应该调用 {@link #getLayoutInfo(java.awt.Container, int) getLayoutInfo} 来代替。此方法与 <code>getLayoutInfo</code> 相同；请参阅 <code>getLayoutInfo</code> 以获取参数及返回值的详细信息。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.GridBagLayout.adjustForGravity(GridBagConstraints constraints, Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据约束几何结构和填充将 x、y、宽度和高度四个字段调整为正确值。此方法仅供 <code>GridBagLayout</code> 内部使用。

@param constraints 要应用的约束
@param r 要调整的 <code>Rectangle</code>
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.GridBagLayout.AdjustForGravity(GridBagConstraints constraints, Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法已过时，仅为提供向后兼容性；新代码应该调用 {@link #adjustForGravity(java.awt.GridBagConstraints, java.awt.Rectangle) adjustForGravity} 来代替。此方法与 <code>adjustForGravity</code> 相同；请参阅 <code>adjustForGravity</code> 以获取参数及返回值的详细信息。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Dimension java.awt.GridBagLayout.getMinSize(Container parent, GridBagLayoutInfo info)
<!-- END KEY -->
<!-- BEGIN DATA -->
基于 <code>getLayoutInfo</code> 中的信息计算其所有者的最小大小。此方法仅供 <code>GridBagLayout</code> 内部使用。

@param parent 布局容器
@param info 此父级的布局信息
@return 包含最小大小的 <code>Dimension</code> 对象
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Dimension java.awt.GridBagLayout.GetMinSize(Container parent, GridBagLayoutInfo info)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法已过时，仅为提供向后兼容性；新代码应该调用 {@link #getMinSize(java.awt.Container, GridBagLayoutInfo) getMinSize} 来代替。此方法与 <code>getMinSize</code> 相同；请参阅 <code>getMinSize</code> 以获取参数及返回值的详细信息。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.GridBagLayout.arrangeGrid(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
布置网格。此方法仅供 <code>GridBagLayout</code> 内部使用。

@param parent 布局容器
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.GridBagLayout.ArrangeGrid(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法已过时，仅为提供向后兼容性；新代码应该调用 {@link #arrangeGrid(Container) arrangeGrid} 来代替。此方法与 <code>arrangeGrid</code> 相同；请参阅 <code>arrangeGrid</code> 以获取参数及返回值的详细信息。

<!-- END DATA -->
