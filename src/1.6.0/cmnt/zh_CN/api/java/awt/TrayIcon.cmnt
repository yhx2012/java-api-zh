<!-- BEGIN KEY -->
public class java.awt.TrayIcon extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>TrayIcon</code> 对象表示可以添加到{@link SystemTray 系统托盘}的托盘图标。<code>TrayIcon</code> 可以包含工具提示（文本）、图像、弹出菜单和一组与之关联的侦听器。
 
<p><code>TrayIcon</code> 可以生成各种 {@link MouseEvent MouseEvent}，并支持添加相应的侦听器，以接收这些事件的通知。<code>TrayIcon</code> 可以自己处理一些事件。例如，默认情况下，在 <code>TrayIcon</code> 上单击鼠标右键时，它将显示指定的弹出菜单。当鼠标悬停到 <code>TrayIcon</code> 上时，它将显示工具提示。

<p><strong>注：</strong>在将 <code>MouseEvent</code> 指派给它的注册侦听器时，其 <code>component</code> 属性将被设置为 <code>null</code>。（请参阅 {@link java.awt.event.ComponentEvent#getComponent}）；<code>source</code> 属性将被设置为此 <code>TrayIcon</code>（请参阅 {@link java.util.EventObject#getSource}）。

<p><b>注：</b> 行为良好的 {@link TrayIcon} 实现将分配不同的动作来显示弹出菜单并选择托盘图标。
 
<p><code>TrayIcon</code> 可以生成一个 {@link ActionEvent ActionEvent}。在某些平台上，当用户使用鼠标或键盘选择托盘图标时，会出现这种情况。

<p>如果已经安装了 SecurityManager，则必须授予 AWTPermission {@code accessSystemTray} 才能创建 {@code TrayIcon}。否则，构造方法将抛出 SecurityException。

<p> 有关如何使用 <code>TrayIcon</code> API 的示例，请参阅 {@link SystemTray} 类概述。 

@since 1.6
@see SystemTray#add
@see java.awt.event.ComponentEvent#getComponent
@see java.util.EventObject#getSource

@author Bino George
@author Denis Mikhalkin
@author Sharon Zakhour
@author Anton Tarasov

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.TrayIcon(Image image)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带有指定图像的 <code>TrayIcon</code>。
 
@param image 要使用的 <code>Image</code> 
@throws IllegalArgumentException 如果 <code>image</code> 为 <code>null</code>
@throws UnsupportedOperationException 如果当前平台不支持系统托盘
@throws HeadlessException 如果 {@code GraphicsEnvironment.isHeadless()} 返回 {@code true}
@throws SecurityException 如果未授予 {@code accessSystemTray} 权限
@see SystemTray#add(TrayIcon)
@see TrayIcon#TrayIcon(Image, String, PopupMenu)
@see TrayIcon#TrayIcon(Image, String)
@see SecurityManager#checkPermission
@see AWTPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.TrayIcon(Image image, String tooltip)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带有指定图像和工具提示文本的 <code>TrayIcon</code>。
 
@param image 要使用的 <code>Image</code> 
@param tooltip 将用作工具提示文本的字符串；如果值为 <code>null</code>，则不显示工具提示
@throws IllegalArgumentException 如果 <code>image</code> 为 <code>null</code>
@throws UnsupportedOperationException 如果当前平台不支持系统托盘
@throws HeadlessException 如果 {@code GraphicsEnvironment.isHeadless()} 返回 {@code true}
@throws SecurityException 如果未授予 {@code accessSystemTray} 权限
@see SystemTray#add(TrayIcon)
@see TrayIcon#TrayIcon(Image)
@see TrayIcon#TrayIcon(Image, String, PopupMenu)
@see SecurityManager#checkPermission
@see AWTPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.TrayIcon(Image image, String tooltip, PopupMenu popup)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带指定图像、工具提示和弹出菜单的 <code>TrayIcon</code>。

@param image 要使用的 <code>Image</code>
@param tooltip 将用作工具提示文本的字符串；如果值为 <code>null</code> ，则不显示工具提示
@param popup 将用于托盘图标的弹出菜单的菜单；如果值为 <code>null</code>，则不显示弹出菜单
@throws IllegalArgumentException 如果 <code>image</code> 为 <code>null</code>
@throws UnsupportedOperationException 如果当前平台不支持系统托盘
@throws HeadlessException 如果 {@code GraphicsEnvironment.isHeadless()} 返回 {@code true}
@throws SecurityException 如果未授予 {@code accessSystemTray} 权限
@see SystemTray#add(TrayIcon)
@see TrayIcon#TrayIcon(Image, String)
@see TrayIcon#TrayIcon(Image)
@see PopupMenu
@see MouseListener
@see #addMouseListener(MouseListener)
@see SecurityManager#checkPermission
@see AWTPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.TrayIcon.setImage(Image image)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 <code>TrayIcon</code> 的图像。若想在不调用 {@link java.awt.Image#flush} 方法的情况下舍弃以前的托盘图标图像，则需要手动调用它。
 
<p> 如果该图像表示一幅动画图像，则将自动显示动画。

<p> 有关显示图像大小的详细信息，请参阅 {@link #setImageAutoSize(boolean)} 属性。

<p> 用与当前正在使用的图像相同的图像调用此方法无效。

@throws NullPointerException 如果 <code>image</code> 为 <code>null</code>
@param image 要使用的非 null <code>Image</code>
@see #getImage
@see Image
@see SystemTray#add(TrayIcon)
@see TrayIcon#TrayIcon(Image, String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Image java.awt.TrayIcon.getImage()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于此 <code>TrayIcon</code> 的当前图像。

@return 图像
@see #setImage(Image)
@see Image

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.TrayIcon.setPopupMenu(PopupMenu popup)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此  <code>TrayIcon</code> 的弹出菜单。如果 <code>popup</code> 为 <code>null</code>，则没有任何弹出菜单与此 <code>TrayIcon</code> 关联。

<p>注意，在托盘图标上设置此 <code>popup</code> 之前或之后，都不得将它添加到任何父级弹出菜单。如果将它添加到某个父级弹出菜单，则可能从该父级弹出菜单中移除 <code>popup</code>。

<p>{@code popup} 只能设置在一个 {@code TrayIcon} 上。在多个 {@code TrayIcon} 上设置同一个 popup 将导致 {@code IllegalArgumentException}。
 
<p><strong>注：</strong> 一些平台可能不支持在用户右键单击托盘图标时显示用户指定的弹出菜单组件。在这种情况下，可能不显示任何菜单，在某些系统中，也可能显示菜单的本地版本。

@throws IllegalArgumentException 如果已经为另一个 {@code TrayIcon} 设置 {@code popup}
@param popup 一个 <code>PopupMenu</code>，如果该参数为 <code>null</code>，则移除所有弹出菜单
@see #getPopupMenu

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.PopupMenu java.awt.TrayIcon.getPopupMenu()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>TrayIcon</code> 关联的弹出菜单。

@return 弹出菜单；如果不存在弹出菜单，则返回 <code>null</code>
@see #setPopupMenu(PopupMenu)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.TrayIcon.setToolTip(String tooltip)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 <code>TrayIcon</code> 的工具提示字符串。当鼠标悬停在图标上时，自动显示工具提示。将工具提示设置为 <code>null</code> 将移除所有工具提示文本。
 
在某些平台上显示时，工具提示字符串可能被截断；可以显示的字符数与平台有关。

@param tooltip 工具提示的字符串；如果值为 <code>null</code>，则不显示任何工具提示
@see #getToolTip

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.TrayIcon.getToolTip()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>TrayIcon</code> 关联的工具提示字符串。

@return 工具提示字符串；如果不存在，则返回 <code>null</code>
@see #setToolTip(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.TrayIcon.setImageAutoSize(boolean autosize)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置自动调整大小的属性。自动调整大小属性将确定托盘图像是否能自动调整大小以适合托盘上为图像分配的空间。默认情况下，自动调整大小属性被设置为 <code>false</code>。

<p> 如果自动调整大小属性为 <code>false</code>，且图像大小与托盘图标空间不匹配，则图像将按照原样绘制在该空间中，如果图像大小大于分配的空间，那么它将被裁剪。

<p> 如果自动调整大小属性为 <code>true</code>，则将拉伸或缩小图像以适合托盘图标空间。

@param autosize 如果自动调整图像大小，则为 <code>true</code>；否则为 <code>false</code>
@see #isImageAutoSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.TrayIcon.isImageAutoSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回自动调整大小属性的值。

@return 如果自动调整图像大小，则返回 <code>true</code>；否则返回 <code>false</code>
@see #setImageAutoSize(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TrayIcon.addMouseListener(MouseListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定的鼠标侦听器，以接收发自此 <code>TrayIcon</code> 的鼠标事件。用 <code>null</code> 值调用此方法无效。

<p><b>注</b>：{@code MouseEvent} 的坐标（从 {@code TrayIcon} 接收）是相对于屏幕的，而不是相对于 {@code TrayIcon} 的。
 
<p> <b>注：</b> 不支持 <code>MOUSE_ENTERED</code> 和 <code>MOUSE_EXITED</code> 鼠标事件。
<p>有关 AWT 线程模型的详细信息，请参阅 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"  >AWT 线程问题</a>。

@param    listener 鼠标侦听器
@see      java.awt.event.MouseEvent
@see      java.awt.event.MouseListener
@see      #removeMouseListener(MouseListener)
@see      #getMouseListeners

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TrayIcon.removeMouseListener(MouseListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定的鼠标侦听器。用 <code>null</code> 或无效值调用此方法无效。
<p>有关 AWT 线程模型的详细信息，请参阅 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"  >AWT 线程问题</a>。

@param    listener   鼠标侦听器
@see      java.awt.event.MouseEvent
@see      java.awt.event.MouseListener
@see      #addMouseListener(MouseListener)
@see      #getMouseListeners

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.event.MouseListener[] java.awt.TrayIcon.getMouseListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回已在此 <code>TrayIcon</code> 上注册的所有鼠标侦听器的数组。

@return 所有已在此 <code>TrayIcon</code> 上注册的 <code>MouseListeners</code>；如果当前没有已注册的鼠标侦听器，则返回空数组

@see      #addMouseListener(MouseListener)
@see      #removeMouseListener(MouseListener)
@see      java.awt.event.MouseListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TrayIcon.addMouseMotionListener(MouseMotionListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定的鼠标侦听器，以接收发自此 <code>TrayIcon</code> 的鼠标移动事件。用 <code>null</code> 值调用此方法无效。

<p><b>注</b>：{@code MouseEvent} 的坐标（从 {@code TrayIcon} 接收）是相对于屏幕的，而不是相对于 {@code TrayIcon} 的。

<p> <b>注：</b> 不支持 <code>MOUSE_DRAGGED</code> 鼠标事件。
<p>有关 AWT 线程模型的详细信息，请参阅 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"  >AWT 线程问题</a>。

@param    listener 鼠标侦听器
@see      java.awt.event.MouseEvent
@see      java.awt.event.MouseMotionListener
@see      #removeMouseMotionListener(MouseMotionListener)
@see      #getMouseMotionListeners

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TrayIcon.removeMouseMotionListener(MouseMotionListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定的鼠标移动侦听器。用 <code>null</code> 或无效值调用此方法无效。
<p>有关 AWT 线程模型的详细信息，请参阅 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"  >AWT 线程问题</a>。

@param    listener 鼠标侦听器
@see      java.awt.event.MouseEvent
@see      java.awt.event.MouseMotionListener
@see      #addMouseMotionListener(MouseMotionListener)
@see      #getMouseMotionListeners

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.event.MouseMotionListener[] java.awt.TrayIcon.getMouseMotionListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回已在此 <code>TrayIcon</code> 上注册的所有鼠标移动侦听器的数组。

@return 所有已在此 <code>TrayIcon</code> 上注册的 <code>MouseInputListeners</code>；如果当前没有注册的鼠标侦听器，则返回空数组

@see      #addMouseMotionListener(MouseMotionListener)
@see      #removeMouseMotionListener(MouseMotionListener)
@see      java.awt.event.MouseMotionListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.TrayIcon.getActionCommand()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由此托盘图标触发的动作事件的命令名。
 
@return 动作命令名；如果不存在，则返回 <code>null</code>
@see #addActionListener(ActionListener)
@see #setActionCommand(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.TrayIcon.setActionCommand(String command)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置由此托盘图标触发的动作事件的命令名。默认情况下，此动作命令被设置为 <code>null</code>。
 
@param command  用于设置托盘图标动作命令的字符串。
@see java.awt.event.ActionEvent
@see #addActionListener(ActionListener)
@see #getActionCommand

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TrayIcon.addActionListener(ActionListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定的动作侦听器，以接收发自此 <code>TrayIcon</code> 的 <code>ActionEvent</code>。当用户使用鼠标或键盘选择托盘图标时，通常会发生动作事件。动作事件生成的条件与平台有关。

<p>用 <code>null</code> 值调用此方法无效。
<p>有关 AWT 线程模型的详细信息，请参阅 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"  >AWT 线程问题</a>。

@param         listener 动作侦听器
@see           #removeActionListener
@see           #getActionListeners
@see           java.awt.event.ActionListener
@see #setActionCommand(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TrayIcon.removeActionListener(ActionListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定的动作侦听器。用 <code>null</code> 或无效值调用此方法无效。
<p>有关 AWT 线程模型的详细信息，请参阅 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"  >AWT 线程问题</a>。

@param    listener 动作侦听器
@see      java.awt.event.ActionEvent
@see      java.awt.event.ActionListener
@see      #addActionListener(ActionListener)
@see      #getActionListeners
@see #setActionCommand(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.event.ActionListener[] java.awt.TrayIcon.getActionListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在已此 <code>TrayIcon</code> 上注册的所有动作侦听器的数组。

@return 所有已在此 <code>TrayIcon</code> 上注册的 <code>ActionListeners</code>；如果当前没有注册的动作侦听器，则返回空数组

@see      #addActionListener(ActionListener)
@see      #removeActionListener(ActionListener)
@see      java.awt.event.ActionListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.TrayIcon.displayMessage(String caption, String text, TrayIcon.MessageType messageType)
<!-- END KEY -->
<!-- BEGIN DATA -->
在托盘图标附近显示弹出消息。消息将在一段时间之后或用户在消息上单击时消失。单击消息可能触发 {@code ActionEvent}。

<p>标题或文本可以为 <code>null</code>，但如果两者都为 <code>null</code>，则抛出 <code>NullPointerException</code>。

在某些平台上显示时，标题或文本字符串可能被截取；可以显示的字符数与平台有关。

<p><strong>注：</strong> 一些平台可能不支持显示消息。

@param caption 显示在文本上面的标题，通常为粗体；可以为 <code>null</code>
@param text 显示特定消息的文本；可以为 <code>null</code>
@param messageType 指示消息类型的枚举
@throws NullPointerException 如果 <code>caption</code> 和 <code>text</code> 都为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.TrayIcon.getSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回托盘图标在系统托盘上占用的空间大小（以像素为单位）。对于尚未添加到系统托盘上的托盘图标，返回的大小等于 {@link SystemTray#getTrayIconSize} 的结果。

@return 托盘图标的大小（以像素为单位）
@see TrayIcon#setImageAutoSize(boolean)
@see java.awt.Image
@see TrayIcon#getSize()

<!-- END DATA -->
