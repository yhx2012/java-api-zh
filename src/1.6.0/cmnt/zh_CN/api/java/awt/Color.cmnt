<!-- BEGIN KEY -->
public class java.awt.Color extends java.lang.Object implements java.awt.Paint, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Color</code> 类用于封装默认 sRGB 颜色空间中的颜色，或者用于封装由 {@link ColorSpace} 标识的任意颜色空间中的颜色。每种颜色都有一个隐式的 alpha 值 1.0，或者有一个在构造方法中提供的显式的 alpha 值。alpha 值定义了颜色的透明度，可用一个在 0.0&nbsp;-&nbsp;1.0 或 0&nbsp;-&nbsp;255 范围内的浮点值表示它。alpha 值为 1.0 或 255 则意味着颜色完全是不透明的，alpha 值为 0 或 0.0 则意味着颜色是完全透明的。在使用显式的 alpha 值构造 <code>Color</code> 时，或者在获取某个 <code>Color</code> 的颜色/alpha 分量时，从不将颜色分量预乘 alpha 分量。
<p>
Java 2D(tm) API 的默认颜色空间是 sRGB，这是一个被推荐使用的标准 RGB 颜色空间。有关 sRGB 的更多信息，请参阅 <A href="http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html">http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html</A>。
<p>
@version 	10 Feb 1997
@author 	Sami Shaio
@author 	Arthur van Hoff
@see		ColorSpace
@see         AlphaComposite

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.white
<!-- END KEY -->
<!-- BEGIN DATA -->
白色。在默认 sRGB 空间中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.WHITE
<!-- END KEY -->
<!-- BEGIN DATA -->
白色。在默认 sRGB 空间中。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.lightGray
<!-- END KEY -->
<!-- BEGIN DATA -->
浅灰色。在默认 sRGB 空间中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.LIGHT_GRAY
<!-- END KEY -->
<!-- BEGIN DATA -->
浅灰色。在默认 sRGB 空间中。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.gray
<!-- END KEY -->
<!-- BEGIN DATA -->
灰色。在默认 sRGB 空间中。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.GRAY
<!-- END KEY -->
<!-- BEGIN DATA -->
灰色。在默认 sRGB 空间中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.darkGray
<!-- END KEY -->
<!-- BEGIN DATA -->
深灰色。在默认 sRGB 空间中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.DARK_GRAY
<!-- END KEY -->
<!-- BEGIN DATA -->
深灰色。在默认 sRGB 空间中。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.black
<!-- END KEY -->
<!-- BEGIN DATA -->
黑色。在默认 sRGB 空间中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.BLACK
<!-- END KEY -->
<!-- BEGIN DATA -->
黑色。在默认 sRGB 空间中。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.red
<!-- END KEY -->
<!-- BEGIN DATA -->
红色。在默认 sRGB 空间中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.RED
<!-- END KEY -->
<!-- BEGIN DATA -->
红色。在默认 sRGB 空间中。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.pink
<!-- END KEY -->
<!-- BEGIN DATA -->
粉红色。在默认 sRGB 空间中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.PINK
<!-- END KEY -->
<!-- BEGIN DATA -->
粉红色。在默认 sRGB 空间中。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.orange
<!-- END KEY -->
<!-- BEGIN DATA -->
桔黄色。在默认 sRGB 空间中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.ORANGE
<!-- END KEY -->
<!-- BEGIN DATA -->
桔黄色。在默认 sRGB 空间中。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.yellow
<!-- END KEY -->
<!-- BEGIN DATA -->
黄色。在默认 sRGB 空间中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.YELLOW
<!-- END KEY -->
<!-- BEGIN DATA -->
黄色。在默认 sRGB 空间中。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.green
<!-- END KEY -->
<!-- BEGIN DATA -->
绿色。在默认 sRGB 空间中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.GREEN
<!-- END KEY -->
<!-- BEGIN DATA -->
绿色。在默认 sRGB 空间中。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.magenta
<!-- END KEY -->
<!-- BEGIN DATA -->
洋红色。在默认 sRGB 空间中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.MAGENTA
<!-- END KEY -->
<!-- BEGIN DATA -->
洋红色。在默认 sRGB 空间中。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.cyan
<!-- END KEY -->
<!-- BEGIN DATA -->
青色。在默认 sRGB 空间中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.CYAN
<!-- END KEY -->
<!-- BEGIN DATA -->
青色。在默认 sRGB 空间中。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.blue
<!-- END KEY -->
<!-- BEGIN DATA -->
蓝色。在默认 sRGB 空间中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.BLUE
<!-- END KEY -->
<!-- BEGIN DATA -->
蓝色。在默认 sRGB 空间中。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.Color.value
<!-- END KEY -->
<!-- BEGIN DATA -->
颜色值。
@serial
@see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
private float[] java.awt.Color.frgbvalue
<!-- END KEY -->
<!-- BEGIN DATA -->
默认 sRGB <code>ColorSpace</code> 中的颜色值可看作是 <code>float</code> 分量（不带 alpha 值）。如果在构造对象之后颜色值为 <code>null</code>，则此颜色必须是用 8 位精度构造的一种 sRGB 颜色，因此要从 <code>int</code> 颜色值开始计算。
@serial
@see #getRGBColorComponents
@see #getRGBComponents

<!-- END DATA -->
<!-- BEGIN KEY -->
private float[] java.awt.Color.fvalue
<!-- END KEY -->
<!-- BEGIN DATA -->
本机 sRGB <code>ColorSpace</code> 中的颜色值可看作是 <code>float</code> 分量（不带 alpha 值）。如果在构造对象之后颜色值为 <code>null</code>，则此颜色必须是用 8 位精度构造的一种 sRGB 颜色，因此要从 <code>int</code> 颜色值开始计算。
@serial
@see #getRGBColorComponents
@see #getRGBComponents

<!-- END DATA -->
<!-- BEGIN KEY -->
private float java.awt.Color.falpha
<!-- END KEY -->
<!-- BEGIN DATA -->
alpha 值可看作是一个 <code>float</code> 分量。如果 <code>frgbvalue</code> 为 <code>null</code>，那么这是一个无效数据，因此要从 <code>int</code> 颜色值开始计算。
@serial
@see #getRGBComponents
@see #getComponents

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.color.ColorSpace java.awt.Color.cs
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>ColorSpace</code>。如果 ColorSpace 为 <code>null</code>，那么其默认值为 sRGB。
@serial
@see #getColor
@see #getColorSpace
@see #getColorComponents

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color(int r, int g, int b)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定红色、绿色和蓝色值的不透明的 sRGB 颜色，这些值都在 (0 - 255) 的范围内。绘制时实际使用的颜色取决于从给出的可用于给定输出设备的颜色空间中找到的最匹配颜色。alpha 值的默认值为 255。

@throws IllegalArgumentException 如果 <code>r</code>、<code>g</code> 或 <code>b</code> 超出 0 到 255（包括）的范围
@param r 红色分量
@param g 绿色分量
@param b 蓝色分量
@see #getRed
@see #getGreen
@see #getBlue
@see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color(int r, int g, int b, int a)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定红色、绿色、蓝色和 alpha 值的 sRGB 颜色，这些值都在 (0 - 255) 的范围内。

@throws IllegalArgumentException 如果 <code>r</code>、<code>g</code>、<code>b</code> 或 <code>a</code> 超出 0 到 255（包括）的范围
@param r 红色分量
@param g 绿色分量
@param b 蓝色分量
@param a alpha 分量
@see #getRed
@see #getGreen
@see #getBlue
@see #getAlpha
@see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color(int rgb)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定组合的 RGB 值的不透明的 sRGB 颜色，此 sRGB 值的 16-23 位表示红色分量，8-15 位表示绿色分量，0-7 位表示蓝色分量。绘制时实际使用的颜色取决于从给出的可用于特定输出设备的颜色空间中找到的最匹配颜色。alpha 值的默认值为 255。

@param rgb 组合的 RGB 分量
@see java.awt.image.ColorModel#getRGBdefault
@see #getRed
@see #getGreen
@see #getBlue
@see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color(int rgba, boolean hasalpha)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定组合的 RGBA 值的 sRGB 颜色，此 RGBA 值的 24-31 位表示 alpha 分量，16-23 位表示红色分量，8-15 位表示绿色分量，0-7 位表示蓝色分量。如果 <code>hasalpha</code> 参数为 <code>false</code>，则 alpha 值为默认值 255。

@param rgba 组合的 RGBA 分量
@param hasalpha 如果 alpha 的位有效，则该参数为 <code>true</code>；否则为 <code>false</code>
@see java.awt.image.ColorModel#getRGBdefault
@see #getRed
@see #getGreen
@see #getBlue
@see #getAlpha
@see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color(float r, float g, float b)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定红色、绿色和蓝色值的不透明的 sRGB 颜色，这三个颜色值都在 (0.0 - 1.0) 的范围内。alpha 值的默认值为 1.0。绘制时实际使用的颜色取决于从给出的可用于特定输出设备的颜色空间中找到的最匹配颜色。

@throws IllegalArgumentException 如果 <code>r</code>、<code>g</code> 或 <code>b</code> 超出 0.0 到 1.0（包括）的范围
@param r 红色分量
@param g 绿色分量
@param b 蓝色分量
@see #getRed
@see #getGreen
@see #getBlue
@see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color(float r, float g, float b, float a)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定红色、绿色、蓝色和 alpha 值的 sRGB 颜色，这些值都在 (0.0 - 1.0) 的范围内。绘制时实际使用的颜色取决于从给出的可用于特定输出设备的颜色空间中找到的最匹配的颜色。
@throws IllegalArgumentException 如果 <code>r</code>、<code>g</code>、<code>b</code> 或 <code>a</code> 超出 0.0 到 1.0（包括）的范围
@param r 红色分量
@param g 绿色分量
@param b 蓝色分量
@param a alpha 分量
@see #getRed
@see #getGreen
@see #getBlue
@see #getAlpha
@see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color(ColorSpace cspace, float[] components, float alpha)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有 <code>float</code> 数组中指定的颜色分量和指定的 alpha 值的指定 <code>ColorSpace</code> 中的颜色。分量的数量由 <code>ColorSpace</code> 的类型确定。例如，RGB 需要 3 个分量，但 CMYK 需要 4 个分量。
@param cspace 用来解释分量的 <code>ColorSpace</code>
@param components 与 <code>ColorSpace</code> 兼容的任意数量的颜色分量
@param alpha alpha 值
@throws IllegalArgumentException 如果 <code>components</code> 数组中的任意某个值或 <code>alpha</code> 值超出 0.0 到 1.0 的范围
@see #getComponents
@see #getColorComponents

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Color.getRed()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回默认 sRGB 空间中位于范围 0-255 中的红色分量。
@return 红色分量。
@see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Color.getGreen()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回默认 sRGB 空间中位于范围 0-255 中的绿色分量。
@return 绿色分量。
@see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Color.getBlue()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回默认 sRGB 空间中位于范围 0-255 中的蓝色分量。
@return 蓝色分量。
@see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Color.getAlpha()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回位于范围 0-255 中的 alpha 分量。
@return alpha 分量。
@see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Color.getRGB()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回默认 sRGB {@link ColorModel} 中表示颜色的 RGB 值。（24-31 位表示 alpha，16-23 位表示红色，8-15 位表示绿色，0-7 位表示蓝色）。
@return 默认 sRGB <code>ColorModel</code> 中表示颜色的 RGB 值。
@see java.awt.image.ColorModel#getRGBdefault
@see #getRed
@see #getGreen
@see #getBlue
@since JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color java.awt.Color.brighter()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新 <code>Color</code>，它具有比此 <code>Color</code> 更亮的颜色。
<p>
此方法对这个 <code>Color</code> 的三个 RGB 分量都使用了一个任意缩放因子，以创建具有更亮颜色的 <code>Color</code>。<code>brighter</code> 和 <code>darker</code> 是相反的操作，因为舍入误差，所以连续多次调用这两个方法所产生的结果可能是不一致的。
@return     一个新 <code>Color</code>，它具有比此 <code>Color</code> 更亮的颜色。
@see        java.awt.Color#darker
@since      JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color java.awt.Color.darker()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新 <code>Color</code>，它具有比此 <code>Color</code> 更暗的颜色。
<p>
此方法对这个 <code>Color</code> 的三个 RGB 分量都使用了一个任意缩放因子，以创建具有更暗颜色的 <code>Color</code>。<code>brighter</code> 和 <code>darker</code> 是相反的操作，因为舍入误差，所以连续多次调用这两个方法所产生的结果可能是不一致的。
@return     一个新 <code>Color</code>，它具有比此 <code>Color</code> 更暗的颜色。
@see        java.awt.Color#brighter
@since      JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Color.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
计算此 <code>Color</code> 的哈希码。
@return  此对象的哈希码值。
@since      JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Color.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定另一个对象是否与此 <code>Color</code> 相同。
<p>
当且仅当此参数不为 <code>null</code>，并且是一个与此对象具有相同红色、绿色、蓝色和 alpha 值的 <code>Color</code> 对象时，结果才是 <code>true</code>。
@param obj 用来与此 <code>Color</code> 进行等同性测试的对象
@return 如果对象相同，则返回 <code>true</code>；否则返回 <code>false</code>
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.Color.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Color</code> 的字符串表示形式。此方法只适用于调试。返回的字符串的内容和格式在各种实现间可能各不相同。返回的字符串可以为空，但不可以为 <code>null</code>。
@return  此 <code>Color</code> 的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Color java.awt.Color.decode(String nm) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>String</code> 转换成整数，并返回指定的不透明 <code>Color</code>。此方法处理用来表示八进制和十六进制数字的字符串格式。
@param      nm 将某种不透明颜色表示为 24 位整数的 <code>String</code>
@return     新的 <code>Color</code> 对象。
@see        java.lang.Integer#decode
@exception  NumberFormatException  如果不能将指定的字符串解释为十进制、八进制或十六进制的整数。
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Color java.awt.Color.getColor(String nm)
<!-- END KEY -->
<!-- BEGIN DATA -->
查找系统属性中的一种颜色。
<p>
该参数被视为要获得的系统属性的名称。然后，将此属性的字符串值解释为一个整数值，该整数随后被转换为一个 <code>Color</code> 对象。
<p>
如果没有找到指定的属性，或者无法将它当作一个整数来分析，则返回 <code>null</code>。
@param    nm 颜色属性的名称
@return   系统属性所转换的 <code>Color</code>

@see      java.lang.System#getProperty(java.lang.String)
@see      java.lang.Integer#getInteger(java.lang.String)
@see      java.awt.Color#Color(int)
@since    JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Color java.awt.Color.getColor(String nm, Color v)
<!-- END KEY -->
<!-- BEGIN DATA -->
查找系统属性中的一种颜色。
<p>
第一个参数被视为要获得的系统属性的名称。然后，将此属性的字符串值解释为一个整数值，该整数随后被转换为一个 <code>Color</code> 对象。
<p>
如果没有找到指定的属性，或者不能将该属性当作一个整数来分析，则返回由第二个参数指定的 <code>Color</code>。

@param    nm 颜色属性的名称
@param    v    默认的 <code>Color</code>
@return   系统属性所转换的 <code>Color</code>，或者指定的 <code>Color</code>

@see      java.lang.System#getProperty(java.lang.String)
@see      java.lang.Integer#getInteger(java.lang.String) 
@see      java.awt.Color#Color(int)
@since    JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Color java.awt.Color.getColor(String nm, int v)
<!-- END KEY -->
<!-- BEGIN DATA -->
查找系统属性中的一种颜色。
<p>
第一个参数被视为要获得的系统属性的名称。然后，将此属性的字符串值解释为一个整数值，该整数随后被转换为一个 <code>Color</code> 对象。 
<p>
如果没有找到指定的属性，或者不能将该属性当作一个整数来分析，则使用整数值 <code>v</code> 来替代，并将它转换为一个 <code>Color</code> 对象。
@param    nm  颜色属性的名称
@param    v   默认的整数形式的颜色值
@return   系统属性所转换的 <code>Color</code> 或者指定整数所转换的 <code>Color</code>

@see      java.lang.System#getProperty(java.lang.String)
@see      java.lang.Integer#getInteger(java.lang.String)
@see      java.awt.Color#Color(int)
@since    JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.awt.Color.HSBtoRGB(float hue, float saturation, float brightness)
<!-- END KEY -->
<!-- BEGIN DATA -->
将由 HSB 模型指定的颜色分量转换为等价的默认 RGB 模型的值的集合。
<p>
<code>saturation</code> 和 <code>brightness</code> 分量应该是 0 到 1 之间的浮点值（范围在 0.0-1.0 之间的数字）。<code>hue</code> 分量可以是任意浮点数字。从这个数字中减去该数字的基数，便可以创建 0 和 1 之间的小数部分。然后，将这个数字乘以 360 就可以得到 HSB 颜色模式中的色彩角度。
<p>
<code>HSBtoRGB</code> 返回的整数在整数值 0-23 的位中对颜色值进行了编码，该整数值的格式与 {@link #getRGB() <code>getRGB</code>} 使用的格式相同。可以将这个整数作为一个参数提供给 <code>Color</code> 构造方法，此构造方法仅带有一个参数。
@param     hue   颜色的灰度分量
@param     saturation   颜色的饱和度
@param     brightness   颜色的亮度
@return    具有指示色调、饱和度和亮度的颜色的 RGB 值。
@see       java.awt.Color#getRGB()
@see       java.awt.Color#Color(int)
@see       java.awt.image.ColorModel#getRGBdefault()
@since     JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static float[] java.awt.Color.RGBtoHSB(int r, int g, int b, float[] hsbvals)
<!-- END KEY -->
<!-- BEGIN DATA -->
将默认 RGB 模式指定的颜色分量转换为等价的色调、饱和度和亮度值的集合，这三个值是 HSB 模型的三个分量。
<p>
如果 <code>hsbvals</code> 参数为 <code>null</code>，则分配一个新的数组来返回结果。否则。该方法将返回 <code>hsbvals</code> 数组，以及存放在数组中的值。
@param     r   该颜色的红色分量
@param     g   该颜色的绿色分量 
@param     b   该颜色的蓝色分量 
@param     hsbvals  用来返回三个 HSB 值的数组，或者为 <code>null</code>
@return    包含颜色的色调、饱和度和亮度（按此排序）的三个元素的数组，此颜色具有指示的红色、绿色和蓝色分量。
@see       java.awt.Color#getRGB()
@see       java.awt.Color#Color(int)
@see       java.awt.image.ColorModel#getRGBdefault()
@since     JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Color java.awt.Color.getHSBColor(float h, float s, float b)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据所指定的数值，创建一个基于 HSB 颜色模型的 <code>Color</code> 对象。
<p>
<code>s</code> 和 <code>b</code> 分量应该是 0 到 1 之间的浮点值（范围在 0.0-1.0 之间的数字）。<code>h</code> 分量可以是任意浮点数字。从这个数字中减去该数字的基数，便可以创建 0 和 1 之间的小数部分。然后，将这个数字乘以 360 就可以得到 HSB 颜色模式中的色彩角度。
@param  h   hue 分量
@param  s   颜色的饱和度
@param  b   颜色的亮度
@return  一个具有指定色调、饱和度和亮度的 <code>Color</code> 对象。
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[] java.awt.Color.getRGBComponents(float[] compArray)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据默认的 sRGB color space，返回一个 <code>float</code> 数组，该数组包含 <code>Color</code> 的颜色分量和 alpha 分量。如果 <code>compArray</code> 为 <code>null</code>，则将为返回值创建一个长度为 4 的数组。否则，<code>compArray</code> 的长度必须是 4 或大于 4，并被上述分量和返回的值填充。
@param compArray 此方法用颜色分量、alpha 分量和返回的值填充的数组
@return <code>float</code> 数组中的 RGBA 分量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[] java.awt.Color.getRGBColorComponents(float[] compArray)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据默认的 sRGB color space，返回一个 <code>float</code> 数组，该数组只包含 <code>Color</code> 的颜色分量。如果 <code>compArray</code> 为 <code>null</code>，则将为返回值创建一个长度为 3 的数组。否则，<code>compArray</code> 的长度必须是 3 或大于 4，并被上述分量和返回的值填充。
@param compArray 此方法用颜色分量和返回的值填充的数组
@return <code>float</code> 数组中的 RGB 分量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[] java.awt.Color.getComponents(float[] compArray)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 <code>Color</code> 的 <code>ColorSpace</code>，返回一个 <code>float</code> 数组，该数组包含 <code>Color</code> 的颜色分量和 alpha 分量。如果 <code>compArray</code> 为 <code>null</code>，则将为返回值创建一个数组，该数组的长度等于相关 <code>ColorSpace</code> 中的分量数加 1。否则，<code>compArray</code> 的长度至少必须为该长度，并被上述分量和返回的值填充。
@param compArray 此方法用 <code>ColorSpace</code> 中此 <code>Color</code> 的颜色分量和 alpha 分量填充并返回的数组
@return <code>float</code> 数组中的颜色分量和 alpha 分量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[] java.awt.Color.getColorComponents(float[] compArray)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 <code>Color</code> 的 <code>ColorSpace</code>，返回一个 <code>float</code> 数组，该数组只包含 <code>Color</code> 的颜色分量。如果 <code>compArray</code> 为 <code>null</code>，则将为返回值创建一个数组，该数组的长度等于相关 <code>ColorSpace</code> 中的分量数。否则，<code>compArray</code> 的长度至少必须为该长度，并被上述分量和返回的值填充。
@param compArray 此方法用 <code>ColorSpace</code> 中此 <code>Color</code> 的颜色分量填充并返回的数组
@return <code>float</code> 数组中的颜色分量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[] java.awt.Color.getComponents(ColorSpace cspace, float[] compArray)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据由 <code>cspace</code> 参数指定的 <code>ColorSpace</code>，返回一个 <code>float</code> 数组，该数组只包含 <code>Color</code> 的 alpha 分量。如果 <code>compArray</code> 为 <code>null</code>，则将为返回值创建一个数组，该数组的长度等于 <code>cspace</code> 中的分量数加 1。否则，<code>compArray</code> 的长度至少必须为该长度，并被上述分量和返回的值填充。
@param cspace 一个指定的 <code>ColorSpace</code>
@param compArray 此方法用指定 <code>ColorSpace</code> 中此 <code>Color</code> 的颜色分量和 alpha 分量填充并返回的数组
@return <code>float</code> 数组中的颜色分量和 alpha 分量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[] java.awt.Color.getColorComponents(ColorSpace cspace, float[] compArray)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据由 <code>cspace</code> 参数指定的 <code>ColorSpace</code>，返回一个 <code>float</code> 数组，该数组只包含 <code>Color</code> 的颜色分量。如果 <code>compArray</code> 为 <code>null</code>，则将为返回值创建一个数组，该数组的长度等于 <code>cspace</code> 中的分量数。否则，<code>compArray</code> 的长度至少必须为该长度，并被上述分量和返回的值填充。
@param cspace 一个指定的 <code>ColorSpace</code>
@param compArray 此方法用指定 <code>ColorSpace</code> 中此 <code>Color</code> 的颜色分量填充的数组
@return <code>float</code> 数组中的颜色分量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.color.ColorSpace java.awt.Color.getColorSpace()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Color</code> 的 <code>ColorSpace</code>。
@return 此 <code>Color</code> 对象的 <code>ColorSpace</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.PaintContext java.awt.Color.createContext(ColorModel cm, Rectangle r, Rectangle2D r2d, AffineTransform xform, RenderingHints hints)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回用来生成固定颜色模式的 {@link PaintContext}。这使得任何一个需要以一个实现了 {@link Paint} 接口的对象为参数的方法，都可以用 <code>Color</code> 对象做该参数。不管 <code>r</code>、<code>r2d</code>、<code>xform</code> 或 <code>hints</code> 是否为 <code>null</code>，返回的都是相同的 <code>PaintContext</code>。
@param cm 指定的 <code>ColorModel</code>
@param r 指定的 {@link Rectangle}
@param r2d 指定的 {@link Rectangle2D}
@param xform 指定的 {@link AffineTransform}
@param hints 指定的 {@link RenderingHints}
@return 一个用来生成固定颜色模式的 <code>PaintContext</code>

@see Paint 
@see PaintContext
@see Graphics2D#setPaint

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Color.getTransparency()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Color</code> 的透明模式。当实现 <code>Paint</code> 接口时需要用到此方法。
@return 此 <code>Color</code> 对象的透明模式。
@see Paint
@see Transparency
@see #createContext

<!-- END DATA -->
