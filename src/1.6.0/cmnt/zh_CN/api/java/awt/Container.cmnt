<!-- BEGIN KEY -->
public class java.awt.Container extends java.awt.Component
<!-- END KEY -->
<!-- BEGIN DATA -->
一般的 Abstract Window Toolkit(AWT) 容器对象是一个可包含其他 AWT 组件的组件。
 <p>
添加到容器中的组件放在一个列表中。列表的顺序将定义组件在容器内的正向堆栈顺序。如果将组件添加到容器中时未指定索引，则该索引将被添加到列表尾部（此后它位于堆栈顺序的底部）。
 <p>
<b>注</b>：有关焦点子系统的详细信息，请参阅 <em>The Java Tutorial</em> 中 <a href="http://java.sun.com/docs/books/tutorial/uiswing/misc/focus.html">How to Use the Focus Subsystem</a> 一节，要获得更多的信息，请参阅 <a href="../../java/awt/doc-files/FocusSpec.html">Focus Specification</a>。

@version 	1.286, 07/27/06
@author 	Arthur van Hoff
@author 	Sami Shaio
@see       #add(java.awt.Component, int)
@see       #getComponent(int)
@see       LayoutManager
@since     JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] java.awt.Container.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
@serialField ncomponents                     int 容器中组件的数量。该值可以为 null。
@serialField component                       Component[] 容器中的组件。
@serialField layoutMgr                       LayoutManager 此容器的布局管理器。
@serialField dispatcher                      LightweightDispatcher 轻量级组件的事件路由器。如果容器是本机的，则此调度程序会小心转发这些事件，将它们的目标重新指向所包含的轻量级组件（如果有）。
@serialField maxSize                         Dimension 此 Container 的最大大小。
@serialField focusCycleRoot                  boolean 指示此 Component 是否是某个焦点遍历循环的根。一旦焦点进入某个遍历循环，它通常无法通过焦点遍历离开，除非按下向上键或向下键之一。普通遍历被限定于此 Container，该 Container 的所有子代并不是下级焦点循环根的子代。
@serialField containerSerializedDataVersion  int Container Serial Data Version。
@serialField focusTraversalPolicyProvider    boolean 存储 focusTraversalPolicyProvider 属性的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Container()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的 Container。可以直接扩展 Container，但在这种情况下是轻量级的，并且它必须被位于本机组件树中更高处的某一个父容器包含。（比如说 Frame）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Container.getComponentCount()
<!-- END KEY -->
<!-- BEGIN DATA -->

获取此面板中的组件数。
@return  此面板中的组件数。
@see       #getComponent
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Container.countComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->

@deprecated 从 JDK version 1.1 开始，用 etComponentCount() 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.Container.getComponent(int n)
<!-- END KEY -->
<!-- BEGIN DATA -->

获取此容器中的第 n 个组件。
@param n 要获取的组件的索引。
@return     此容器中的 n<sup>th</sup> 组件。
@exception  ArrayIndexOutOfBoundsException 如果 n<sup>th</sup> 值不存在。     

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component[] java.awt.Container.getComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此容器中的所有组件。
@return 此容器中的所有组件的数组。     

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets java.awt.Container.getInsets()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此容器的 insets，它指示容器边框的大小。 
 <p>
例如，<code>Frame</code> 对象有一个顶端 inset，它对应于窗体的标题栏的高度。
@return  此容器的 inset。
@see       Insets
@see       LayoutManager
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets java.awt.Container.insets()
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，用 <code>getInsets()</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.Container.add(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->

将指定组件追加到此容器的尾部。这是一个适用于 {@link #addImpl} 的便捷方法。
 <p>
注：如果已经将某个组件添加到显示的容器中，则必须在此容器上调用 <code>validate</code>，以显示新的组件。如果添加多个组件，那么可以在添加所有组件之后，通过只调用一次 <code>validate</code> 来提高效率。

@param     comp   要添加的组件
@exception NullPointerException 如果 {@code comp} 为 {@code null}
@see #addImpl
@see #validate
@see javax.swing.JComponent#revalidate()
@return    component 参数

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.Container.add(String name, Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定组件添加到此容器中。这是一个适用于 {@link #addImpl} 的便捷方法。
 <p>
从 JDK version 1.1 开始，此方法已过时。请使用 <code>add(Component, Object)</code> 方法代替。

@exception NullPointerException 如果 {@code comp} 为 {@code null}
@see #add(Component, Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.Container.add(Component comp, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->

将指定组件添加到此容器的给定位置上。这是一个适用于 {@link #addImpl} 的便捷方法。
 <p>
注：如果已经将某个组件添加到显示的容器中，则必须在此容器上调用 <code>validate</code>，以显示新的组件。如果添加多个组件，那么可以在添加所有组件之后，通过只调用一次 <code>validate</code> 来提高效率。

@param     comp   要添加的组件
@param     index    插入组件的位置，<code>-1</code> 表示将组件追加到尾部
@exception NullPointerException 如果 {@code comp} 为 {@code null}
@exception IllegalArgumentException 如果 {@code index} 无效（有关细节请参阅 {@link #addImpl}）
@return    组件 <code>comp</code>
@see #addImpl
@see #remove
@see #validate
@see javax.swing.JComponent#revalidate()

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.setComponentZOrder(Component comp, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定组件移动到容器中指定的 z 顺序索引。z 顺序确定了绘制组件的顺序；具有最高 z 顺序的组件将第一个绘制，而具有最低 z 顺序的组件将最后一个绘制。在组件重叠的地方，具有较低 z 顺序的组件将覆盖具有较高 z 顺序的组件。
 <p>
如果组件是其他某个 container 的子组件，则在将它添加到此容器之前，从该容器中移除它。此方法与 <code>java.awt.Container.add(Component, int)</code> 之间的重要不同是，在将组件从其以前的容器中移除时，此方法不对该组件调用 <code>removeNotify</code>，除非有此必要，并且基础本机窗口系统允许这样做。因此，如果组件拥有键盘焦点，那么在移动到新的位置上时，它会维持该焦点。
 <p>
要保证此属性只应用于轻量级的非 <code>Container</code> 组件。
 <p>
<b>注</b>：并不是所有的平台都支持在不调用 <code>removeNotify</code> 的情况下，将重量级组件的 z 顺序从一个容器更改到另一个容器中。无法检测某个平台是否支持这一点，因此开发人员不应该作出任何假设。

@param     comp 要移动的组件
@param     index 在容器的列表中插入组件的位置，其中 <code>getComponentCount()</code> 指追加到尾部
@exception NullPointerException 如果 <code>comp</code> 为 <code>null</code>
@exception IllegalArgumentException 如果 <code>comp</code> 是该容器的父容器之一
@exception IllegalArgumentException 如果在容器间移动的 <code>index</code> 不在 <code>[0, getComponentCount()]</code> 范围内，或者在容器内移动的 <code>index</code> 不在 <code>[0, getComponentCount()-1]</code> 范围内
@exception IllegalArgumentException 如果将一个容器添加给其自身
@exception IllegalArgumentException 如果将 <code>Window</code> 添加到容器中
@see #getComponentZOrder(java.awt.Component)
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Container.getComponentZOrder(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回容器内组件的 z 顺序索引。组件在 z 顺序层次结构中所处的位置越高，它的索引就越低。具有最低 z 顺序索引的组件最后一个被绘制，而它在层次结构中高于其他所有子组件。

@param comp 正查询的组件
@return  组件的 z 顺序索引；如果 component 为 <code>null</code> 或者不属于该容器，则返回 -1
@see #setComponentZOrder(java.awt.Component, int)
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.add(Component comp, Object constraints)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的组件添加到此容器的尾部。同时通知布局管理器使用指定的 constraints 对象将组件添加到此容器的布局中。这是一个适用于 {@link #addImpl} 的便捷方法。
 <p>
注：如果已经将某个组件添加到显示的容器中，则必须在此容器上调用 <code>validate</code>，以显示新的组件。如果添加多个组件，那么可以在添加所有组件之后，通过只调用一次 <code>validate</code> 来提高效率。

@param     comp 要添加的组件
@param     constraints 表示此组件的布局约束的对象
@exception NullPointerException 如果 {@code comp} 为 {@code null}
@see #addImpl
@see #validate
@see javax.swing.JComponent#revalidate()
@see       LayoutManager
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.add(Component comp, Object constraints, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定约束，将指定组件添加到此容器的指定索引所在的位置上。还要通知布局管理器，使用指定的约束对象将组件添加到此容器的布局中。这是一个适用于 {@link #addImpl} 的便捷方法。
 <p>
注：如果已经将某个组件添加到显示的容器中，则必须在此容器上调用 <code>validate</code>，以显示新的组件。如果添加多个组件，那么可以在添加所有组件之后，通过只调用一次 <code>validate</code> 来提高效率。

@param comp 要添加的组件
@param constraints 表示此组件的布局约束的对象
@param index 容器列表中插入组件的位置；<code>-1</code> 表示将组件插入尾部
@exception NullPointerException 如果 {@code comp} 为 {@code null}
@exception IllegalArgumentException 如果 {@code index} 无效（有关细节请参阅 {@link #addImpl}）
@see #addImpl
@see #validate
@see javax.swing.JComponent#revalidate()
@see #remove
@see LayoutManager

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Container.addImpl(Component comp, Object constraints, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定组件添加到此容器的指定索引所在的位置上。此方法还通知布局管理器，通过 <code>addLayoutComponent</code> 方法，使用指定的约束对象将组件添加到此容器的布局中。
 <p>
这些约束是由正使用的特定布局管理器定义的。例如，<code>BorderLayout</code> 类定义了五个约束：<code>BorderLayout.NORTH</code>、<code>BorderLayout.SOUTH</code>、<code>BorderLayout.EAST</code>、<code>BorderLayout.WEST</code> 和 <code>BorderLayout.CENTER</code>。
 <p>
<code>GridBagLayout</code> 类需要一个 <code>GridBagConstraints</code> 对象。如果传递正确的约束对象类型时失败，则会导致 <code>IllegalArgumentException</code>。
 <p>
如果当前布局管理器实现了 {@code LayoutManager2}，则在其上调用 {@link LayoutManager2#addLayoutComponent(Component,Object)}。如果当前布局管理器没有实现 {@code LayoutManager2}，并且约束是一个 {@code String}，则在其上调用 {@link LayoutManager#addLayoutComponent(String,Component)}。
 <p>
 如果该组件不是此容器的祖先容器，并且有一个非 null 父组件，则在将该组件添加到此容器之前，从其当前父组件中移除它。
 <p>
在其他所有添加方法引用此方法时，如果某个程序需要追踪每个添加到容器的请求，那么这就是要重写的方法。被重写的方法通常应该包括一个对该方法的超类版本的调用：
 <p>
 <blockquote>
 <code>super.addImpl(comp, constraints, index)</code>
 </blockquote>
 <p>
@param     comp       要添加的组件
@param     constraints 表示此组件的布局约束的对象
@param     容器列表中插入组件的位置；其中 <code>-1</code> 表示将组件追加到尾部
@exception IllegalArgumentException 如果 {@code index} 无效；如果 {@code comp} 是此容器的子容器，则有效范围是 {@code [-1, getComponentCount()-1]}；如果组件不是此容器的子容器，则有效范围是 {@code [-1, getComponentCount()]}
@exception IllegalArgumentException 如果 {@code comp} 是此容器的祖先容器
@exception IllegalArgumentException 如果向容器添加一个窗口
@exception NullPointerException 如果 {@code comp} 为 {@code null}
@see       #add(Component)
@see       #add(Component, int)
@see       #add(Component, java.lang.Object)
@see       LayoutManager
@see       LayoutManager2
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.remove(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->

从此容器中移除 <code>index</code> 指定的组件。此方法还通知布局管理器，通过 <code>removeLayoutComponent</code> 方法从此容器的布局中移除该组件。

<p>
注：如果已经从已显示的容器中移除一个组件，则必须在该容器上调用 {@link #validate} 来反映更改。如果移除多个组件，那么可以在移除所有组件之后，通过只调用一次 {@link #validate} 来提高效率。

 @param     index   要移除的组件的索引
 @throws ArrayIndexOutOfBoundsException 如果 {@code index} 不在范围 {@code [0, getComponentCount()-1]} 内
 @see #add
 @see #validate
 @see #getComponentCount
 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.remove(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->

从此容器中移除指定组件。此方法还通知布局管理器，通过 <code>removeLayoutComponent</code> 方法从此容器的布局中移除该组件。

<p>
 注：如果已经从已显示的容器中移除一个组件，则必须在该容器上调用 {@link #validate} 来反映更改。如果移除多个组件，那么可以在移除所有组件之后，通过只调用一次 {@link #validate} 来提高效率。

 @param comp 要移除的组件
 @see #add
 @see #validate
 @see #remove(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.removeAll()
<!-- END KEY -->
<!-- BEGIN DATA -->

从此容器中移除所有组件。此方法还通知布局管理器，通过 <code>removeLayoutComponent</code> 方法从此容器的布局中移除这些组件。
@see #add
@see #remove

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.LayoutManager java.awt.Container.getLayout()
<!-- END KEY -->
<!-- BEGIN DATA -->

获取此容器的布局管理器。
@see #doLayout
@see #setLayout

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.setLayout(LayoutManager mgr)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置此容器的布局管理器。
@param mgr 指定的布局管理器
@see #doLayout
@see #getLayout

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.doLayout()
<!-- END KEY -->
<!-- BEGIN DATA -->

使此容器布置其组件。大部分程序不应该直接调用此方法，而是应该调用 <code>validate</code> 方法。
@see LayoutManager#layoutContainer
@see #setLayout
@see #validate
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.layout()
<!-- END KEY -->
<!-- BEGIN DATA -->

@deprecated 从 JDK version 1.1，用 <code>doLayout()</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.invalidate()
<!-- END KEY -->
<!-- BEGIN DATA -->

使容器失效。该容器及其之上的所有父容器被标记为需要重新布置。此方法经常被调用，所以必须快速执行它。
<p>如果在此容器上安装的 {@code LayoutManager} 是一个 {@code LayoutManager2} 实例，则在该实例上调用 {@link LayoutManager2#invalidateLayout(Container)}，并提供此 {@code Container} 作为参数。

 @see #validate
 @see #layout
 @see LayoutManager
 @see LayoutManager2#invalidateLayout(Container)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.validate()
<!-- END KEY -->
<!-- BEGIN DATA -->

验证此容器及其所有子组件。
 <p>
使用 <code>validate</code> 方法会使容器再次布置其子组件。已经显示容器后，在修改此容器的子组件的时候（在容器中添加或移除组件，或者更改与布局相关的信息），应该调用上述方法。

<p>如果此 {@code Container} 无效，则此方法将调用 {@code validateTree} 方法，并将此 {@code Container} 标记为有效。否则不执行任何动作。

 @see #add(java.awt.Component)
 @see Component#invalidate
 @see javax.swing.JComponent#revalidate()
 @see #validateTree

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Container.validateTree()
<!-- END KEY -->
<!-- BEGIN DATA -->
递归继承容器树，对于所有被标记为需要重新计算布局的子树（标记为无效的那些子树）重新计算布局。同步应该由调用本方法的方法 (<code>validate</code>) 提供。
 @see #doLayout
 @see #validate

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.setFont(Font f)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此容器的字体。
@param f 将成为此容器的字体的字体。
@see Component#getFont
@since JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.Container.getPreferredSize()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此容器的首选大小。如果尚未通过 {@link Component#setPreferredSize(Dimension)} 显式设置首选大小，并且此 {@code Container} 有一个 {@code non-null} {@link LayoutManager}，则使用 {@link LayoutManager#preferredLayoutSize(Container)} 来计算首选大小。

 <p>注：一些实现可能缓存从 {@code LayoutManager} 返回的值。每次调用此方法时，这些缓存实现不需要在 {@code LayoutManager} 上调用 {@code preferredLayoutSize}，而是只在 {@code Container} 变得无效之后查询 {@code LayoutManager}。

 @return    表示此容器的首选大小的 <code>Dimension</code> 实例。
 @see       #getMinimumSize
 @see       #getMaximumSize
 @see       #getLayout
 @see       LayoutManager#preferredLayoutSize(Container)
 @see       Component#getPreferredSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.Container.preferredSize()
<!-- END KEY -->
<!-- BEGIN DATA -->

@deprecated 从 JDK version 1.1 开始，用 <code>getPreferredSize()</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.Container.getMinimumSize()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此容器的最小大小。如果尚未通过 {@link Component#setMinimumSize(Dimension)} 显式设置最小大小，并且此 {@code Container} 有一个 {@code non-null} {@link LayoutManager}，则使用 {@link LayoutManager#minimumLayoutSize(Container)} 来计算最小大小。

 <p>注：一些实现可能缓存从 {@code LayoutManager} 返回的值。每次调用此方法时，这些缓存实现不需要在 {@code LayoutManager} 上调用 {@code minimumLayoutSize}，而是只在 {@code Container} 变得无效之后查询 {@code LayoutManager}。

 @return    表示此容器的最小大小的 <code>Dimension</code> 实例。
 @see       #getPreferredSize
 @see       #getMaximumSize
 @see       #getLayout
 @see       LayoutManager#minimumLayoutSize(Container)
 @see       Component#getMinimumSize
 @since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.Container.minimumSize()
<!-- END KEY -->
<!-- BEGIN DATA -->

@deprecated 从 JDK version 1.1 开始，用 <code>getMinimumSize()</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.Container.getMaximumSize()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此容器的最大大小。如果尚未通过 {@link Component#setMaximumSize(Dimension)} 显式设置最大大小，并且在此 {@code Container} 上安装的 {@link LayoutManager} 是一个 {@link LayoutManager2} 实例，则使用 {@link LayoutManager2#maximumLayoutSize(Container)} 来计算最大大小。

 <p>注：一些实现可能缓存从 {@code LayoutManager2} 返回的值。每次调用此方法时，这些缓存实现不需要在 {@code LayoutManager2} 上调用 {@code maximumLayoutSize}，而是只在 {@code Container} 变得无效之后查询 {@code LayoutManager2}。

 @return    表示此容器最大大小的 <code>Dimension</code> 实例。
 @see       #getPreferredSize
 @see       #getMinimumSize
 @see       #getLayout
 @see       LayoutManager2#maximumLayoutSize(Container)
 @see       Component#getMaximumSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.Container.getAlignmentX()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回沿 x 轴的对齐方式。这指出了相对于其他组件将如何对齐该组件。该值应该在 0 到 1 之间，其中，0 表示根据原点进行对齐，1 表示根据距原点最远的地方对齐，0.5 表示从中间对齐等等。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.Container.getAlignmentY()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回沿 y 轴的对齐方式。这指出相对于其他组件将如何排列该组件。该值应该在 0 到 1 之间，其中，0 表示根据原点进行对齐，1 表示根据距原点最远的地方对齐，0.5 表示从中间对齐等等。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.paint(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->

绘制容器。该方法将 paint 转发给任意一个此容器子组件的轻量级组件。如果重新实现此方法，那么应该调用 super.paint(g) 方法，从而可以正确地呈现轻量级组件。如果通过 g 中的当前剪切设置完全剪切某个子组件，则不会将 paint() 转发给这个子组件。

@param g 指定的 Graphics 窗口
@see   Component#update(Graphics)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.update(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->

更新容器。该方法将 update 方法转发给任意一个此容器子组件的轻量级组件。如果重新实现此方法，那么应该调用 super.update(g) 方法，从而可以正确地呈现轻量级组件。如果通过 g 中的当前剪切设置完全剪切某个子组件，则不会将 update() 转发给这个子组件。

@param g 指定的 Graphics 窗口
@see   Component#update(Graphics)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.print(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->

打印容器。该方法将 print 方法转发给任意一个此容器子组件的轻量级组件。如果重新实现此方法，那么应该调用 super.print(g) 方法，从而可以正确地呈现轻量级组件。如果通过 g 中的当前剪切设置完全剪切某个子组件，则不会将 print() 转发给这个子组件。

@param g 指定的 Graphics 窗口
@see   Component#update(Graphics)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.paintComponents(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->

绘制此容器中的每个组件。
@param     g   图形上下文。
@see       Component#paint
@see       Component#paintAll

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.printComponents(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->

打印此容器中的每个组件。
@param     g   图形上下文。
@see       Component#print
@see       Component#printAll

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Container.addContainerListener(ContainerListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定容器的侦听器，以接收来自此容器的容器事件。如果 l 为 null，则不会抛出异常，并且不执行任何动作。
有关 AWT 的线程模型的细节信息，请参阅 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"  >AWT 线程问题</a>。

@param    l 容器侦听器

@see #removeContainerListener
@see #getContainerListeners

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Container.removeContainerListener(ContainerListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定容器的侦听器，从而不再接收来自此容器的容器事件。如果 l 为 null，则不会抛出异常，并且不执行任何动作。
有关 AWT 的线程模型的细节信息，请参阅 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"  >AWT 线程问题</a>。

@param	l 容器侦听器

@see #addContainerListener
@see #getContainerListeners

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回已在此容器上注册的所有容器侦听器的数组。

@return 此容器的所有 <code>ContainerListener</code>，如果没有当前已注册的容器侦听器，则返回一个空数组

@see #addContainerListener
@see #removeContainerListener
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.awt.Container.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前已在此 <code>Container</code> 上注册为 <code><em>Foo</em>Listener</code> 的所有对象的数组。<code><em>Foo</em>Listener</code> 是使用 <code>add<em>Foo</em>Listener</code> 方法注册的。

 <p>
可以用一个类字面值（比如 <code><em>Foo</em>Listener.class</code>）指定 <code>listenerType</code> 参数。例如，可以使用以下代码查询 <code>Container</code> <code>c</code>，以获得该容器的侦听器：

 <pre>ContainerListener[] cls = (ContainerListener[])(c.getListeners(ContainerListener.class));</pre>

如果不存在这样的侦听器，则此方法将返回一个空数组。

@param listenerType 所请求侦听器的类型；该参数应该指定一个从 <code>java.util.EventListener</code> 继承的接口
@return 在此容器上注册为 <code><em>Foo</em>Listener</code> 的所有对象的数组，如果没有添加这样的侦听器，则返回一个空数组
@exception ClassCastException 如果 <code>listenerType</code> 没有指定实现 <code>java.util.EventListener</code> 的类或接口

@see #getContainerListeners

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Container.processEvent(AWTEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理关于此容器的事件。如果事件是一个 <code>ContainerEvent</code>，那么将调用 <code>processContainerEvent</code> 方法，否则将调用其超类的 <code>processEvent</code> 方法。
<p>注意，如果事件参数为 <code>null</code>，则行为是不确定的，并且可能导致异常。

@param e 事件

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Container.processContainerEvent(ContainerEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->

通过将发生在此容器上的容器事件指派给所有已注册的 ContainerListener 对象来处理这些事件。注：直到为此组件启用容器事件，才调用此方法；这发生在出现以下情况之一时：
 <ul>
<li>通过 <code>addContainerListener</code> 注册 ContainerListener 对象 
<li>通过 <code>enableEvents</code> 启用容器事件
 </ul>
<p>注意，如果事件参数为 <code>null</code>，则行为是不确定的，并且可能导致异常。

@param e 容器事件
@see Component#enableEvents

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.deliverEvent(Event e)
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，用 <code>dispatchEvent(AWTEvent e)</code> 取代

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.Container.getComponentAt(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
对包含 x，y 位置的组件进行定位。在组件中出现重叠的情况下，返回位于最顶端的子组件。这是通过查找最接近于索引 0 并且通过 Component.contains() 要求包含给定点的组件来确定的，但拥有本机同位体的组件优先于那些没有同位体的组件（也就是轻量级组件）。

@param x <i>x</i> 坐标
@param y <i>y</i> 坐标
@return 如果组件不包含该位置上，则返回 null。如果所请求的点上没有子组件，并且这个点在容器的边界内，则返回容器自身；否则返回最顶端的子组件。
@see Component#contains
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.Container.locate(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，用 <code>getComponentAt(int, int)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.Container.getComponentAt(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取包含指定点的组件。
@param  p 点。
@return     包含这个点的组件，如果组件不包含这个点，则返回 <code>null</code>。
@see        Component#contains
@since      JDK1.1 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.Container.getMousePosition(boolean allowChildren) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>Container</code> 位于鼠标指针下，则返回鼠标指针在此 <code>Container</code> 的坐标中的位置，否则返回 <code>null</code>。此方法类似于 {@link Component#getMousePosition()}，不过它可能还要考虑 <code>Container</code> 的子组件。如果 <code>allowChildren</code> 为 <code>false</code>，则仅当鼠标指针直接位于 <code>Container</code> 上方，而不是位于被 Container 的子组件掩盖的那部分上方时，此方法才返回一个非 null 值。如果 <code>allowChildren</code> 为 <code>true</code>，且鼠标指针位于 <code>Container</code> 或其任意子代的上方时，此方法才返回一个非 null 值。

@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true
@param     allowChildren 如果将子组件也考虑进去，则此参数为 true
@see       Component#getMousePosition
@return    相对于 <code>Component</code> 的鼠标坐标，或者 null
@since     1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.Container.findComponentAt(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
对包含指定位置的可视子组件进行定位。在组件中出现重叠的情况下，返回位于最顶端的子组件。如果包含的子组件是一个 Container，则此方法将继续搜索，以找到嵌套最深的子组件。在搜索期间忽略不可见的组件。<p>

findComponentAt 方法不同于 getComponentAt 方法，getComponentAt 方法只搜索 Container 的直接子组件；如果包含的组件是一个 Container，则 findComponentAt 方法将搜索子容器，以找到嵌套的组件。

@param x <i>x</i> 坐标
@param y <i>y</i> 坐标
@return 如果组件不包含这个位置上，则返回 null。如果所请求的点上没有子组件，并且这个点在容器的边界内，则返回容器自身。
@see Component#contains
@see #getComponentAt
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.Container.findComponentAt(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
对包含指定点的可视子组件进行定位。在组件中出现重叠的情况下，返回位于最顶端的子组件。如果包含的子组件是一个 Container，则此方法将继续搜索，以找到嵌套最深的子组件。在搜索期间忽略不可见的组件。<p>

findComponentAt 方法不同于 getComponentAt 方法，getComponentAt 方法只搜索 Container 的直接子组件；如果包含的组件是一个 Container，则 findComponentAt 方法将搜索子容器，以找到嵌套的组件。

@param  p 点。
@return 如果组件没有包含该位置，则返回 null。如果所请求的点上没有子组件，并且这个点在容器的边界内，则返回容器自身。
@see Component#contains
@see #getComponentAt
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->

通过将这个 Container 连接到本机屏幕资源，使其可以显示。使容器变得可以显示会使其所有子容器都变得可以显示。此方法是通过工具包内部调用的，不应该通过程序直接调用它。
@see Component#isDisplayable
@see #removeNotify

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.removeNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->

通过移除此 Container 到其本机屏幕资源的连接，使其不可显示。使容器变得不可显示会使其所有子容器都变得不可显示。此方法是通过工具包内部调用的，不应该通过程序直接调用它。
@see Component#isDisplayable
@see #addNotify

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Container.isAncestorOf(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查该组件是否包含在此容器的组件层次结构中。
@param c 组件
@return     如果它是一个祖先级组件，则返回 <code>true</code>；否则返回 <code>false</code>。
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.awt.Container.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此 <code>Container</code> 的状态的字符串。此方法仅在进行调试的时候使用，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。

@return  此容器的参数字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.list(PrintStream out, int indent)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此容器的清单打印到指定输出流。该清单起始于指定缩排位置。
 <p>
使用 <code>indent+1</code> 的缩排来打印容器的直接子组件。这些子组件的子组件是在 <code>indent+2</code> 上打印的，依此类推。

@param    out      打印流
@param    indent   缩排的空格数
@see      Component#list(java.io.PrintStream, int)
@since    JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.list(PrintWriter out, int indent)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个列表打印到指定打印编写器，从指定缩排位置开始。
 <p>
使用 <code>indent+1</code> 的缩排来打印容器的直接子组件。这些子组件的子组件是在 <code>indent+2</code> 上打印的，依此类推。

@param    out      打印编写器
@param    indent   缩排的空格数
@see      Component#list(java.io.PrintWriter, int)
@since    JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.setFocusTraversalKeys(int id, java.util.Set<? extends java.awt.AWTKeyStroke> keystrokes)
<!-- END KEY -->
<!-- BEGIN DATA -->
为此 Container 的给定遍历操作设置焦点遍历键。
 <p>
Container 的焦点遍历键的默认值与实现相关。Sun 建议特定本机平台的所有实现都使用相同的默认值。对 Windows 和 Unix 的建议列出如下。这些建议用于 Sun AWT 实现中。

 <table border=1 summary="Recommended default values for a Container's focus traversal keys">
 <tr>
<th>标识符</th>
<th>含义</th>
<th>默认值</th>
 </tr>
 <tr>
    <td>KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS</td>
<td>普通的转发键盘遍历</td>
<td>KEY_PRESSED 上的 TAB，KEY_PRESSED 上的 CTRL-TAB</td>
 </tr>
 <tr>
    <td>KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS</td>
<td>普通的反向键盘遍历</td>
<td>KEY_PRESSED 上的 SHIFT-TAB，KEY_PRESSED 上的 CTRL-SHIFT-TAB</td>
 </tr>
 <tr>
    <td>KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS</td>
<td>向上移动一个焦点遍历循环</td>
<td>无</td>
 </tr>
 <tr>
    <td>KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS<td>
<td>向下移动一个焦点遍历循环</td>
<td>无</td>
 </tr>
 </table>

要禁用一个遍历键，可以使用空 Set；建议使用 Collections.EMPTY_SET。
 <p>
使用 AWTKeyStroke API，客户机代码可以指定在两个特定 KeyEvents（KEY_PRESSED 或 KEY_RELEASED）中的哪一个上进行焦点遍历操作。不管指定的是哪一个 KeyEvent，所有与焦点遍历键相关的 KeyEvent（包括相关 KEY_TYPED 事件）都将被使用，并且不将它们指派给任何 Container。在将事件映射到焦点遍历操作，或者将同一事件映射到多个默认焦点遍历操作时，指定 KEY_TYPED 事件是一个运行时错误。
 <p>
如果为 Set 指定 null 值，则此 Container 将继承其父辈的 Set。如果此 Container 的所有祖先都为 Set 指定了 null 值，则使用当前 KeyboardFocusManager 的默认 Set。

@param id KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS、KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS、KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS 或 KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS 之一
@param keystrokes 用于指定操作的 AWTKeyStroke 的 Set
@see #getFocusTraversalKeys
@see KeyboardFocusManager#FORWARD_TRAVERSAL_KEYS
@see KeyboardFocusManager#BACKWARD_TRAVERSAL_KEYS
@see KeyboardFocusManager#UP_CYCLE_TRAVERSAL_KEYS
@see KeyboardFocusManager#DOWN_CYCLE_TRAVERSAL_KEYS
@throws IllegalArgumentException 如果 id 不是 KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS、KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS、KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS 或 KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS 之一；或者 keystroke 中包含 null；或者 keystroke 中的任何 Object 都不是 AWTKeyStroke；或者任何 keystroke 都表示一个 KEY_TYPED 事件；或者任何 keystroke 总是映射到此 Container 的另一个焦点遍历操作
@since 1.4
@beaninfo bound:true

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int id)
<!-- END KEY -->
<!-- BEGIN DATA -->
为此 Container 的给定遍历操作返回焦点遍历键的 Set。（有关每个键的完整描述，请参阅 <code>setFocusTraversalKeys</code>。）
 <p>
如果没有为此 Container 明确定义了遍历键的 Set，则返回此 Container 的父 Set。如果没有为此 Container 的任何祖先明确定义 Set，则返回当前 KeyboardFocusManager 的默认 Set。

@param id KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS、KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS、KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS 或 KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS 之一
@return 用于指定操作的 AWTKeyStrokes 的 Set。此 Set 将是不可修改的，并且可能是空的。从不返回 null。
@see #setFocusTraversalKeys
@see KeyboardFocusManager#FORWARD_TRAVERSAL_KEYS
@see KeyboardFocusManager#BACKWARD_TRAVERSAL_KEYS
@see KeyboardFocusManager#UP_CYCLE_TRAVERSAL_KEYS
@see KeyboardFocusManager#DOWN_CYCLE_TRAVERSAL_KEYS
@throws IllegalArgumentException 如果 id 不是 KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS、KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS、KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS 或 KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS 之一
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Container.areFocusTraversalKeysSet(int id)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回是否已经为此 Container 明确定义了用于给定焦点遍历操作的焦点遍历键的 Set。如果此方法返回 <code>false</code>，则此 Container 从一个祖先或当前 KeyboardFocusManager 那里继承 Set。

@param id KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS、KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS、KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS 或 KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS 之一
@return 如果已经为此 Component 明确定义了用于给定焦点遍历操作的焦点遍历键的 Set，则返回 <code>true</code>；否则返回 <code>false</code>。
@throws IllegalArgumentException 如果 id 不是 KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS、KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS、KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS 或 KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS 之一
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Container.isFocusCycleRoot(Container container)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定的 Container 是否是此 Container 的焦点遍历循环的焦点循环根。每个焦点遍历循环只有一个焦点循环根，并且不是焦点循环根的每个 Container 只属于一个焦点遍历循环。那些是焦点循环根的容器属于两个循环：一个根植于 Container 自身中，另一个根植于此 Container 的最近的焦点循环根祖先中。在这种情况下，对于这两种 Container，此方法都将返回 <code>true</code>。

@param container 要测试的 Container
@return 如果指定 Container 是此 Container 的一个焦点循环根，则返回 <code>true</code>；否则返回 <code>false</code>
@see #isFocusCycleRoot()
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.setFocusTraversalPolicy(FocusTraversalPolicy policy)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 Container 是一个焦点循环根，则设置将管理此 Container 的子代的键盘遍历的焦点遍历策略。如果参数为 null，则此 Container 将继承其焦点循环根祖先的策略。如果参数为非 null 值，则此策略将由所有焦点循环根的子组件继承，这些子组件没有自己的键盘遍历策略（它们将以递归方式管理其焦点循环根的子组件）。
 <p>
如果此 Container 不是一个焦点循环根，要记得该策略，但直到此 Container 成为焦点循环根，此 Container 或其他任何 Container 才可以使用或继承此策略。

@param policy 此 Container 的新的焦点遍历策略
@see #getFocusTraversalPolicy
@see #setFocusCycleRoot
@see #isFocusCycleRoot
@since 1.4
@beaninfo bound:true

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回焦点遍历策略，用于管理此 Container 子组件的键盘遍历；如果此 Container 不是一个焦点循环根，则返回 null。如果没有明确为此 Container 设置遍历策略，则返回此 Container 的焦点循环根祖先的策略。 

@return 此 Container 的焦点遍历策略，如果此 Container 不是一个焦点循环根，则返回 null。
@see #setFocusTraversalPolicy
@see #setFocusCycleRoot
@see #isFocusCycleRoot
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Container.isFocusTraversalPolicySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回是否为此 Container 明确设置焦点遍历策略。如果此方法返回 <code>false</code>，则此 Container 将从一个祖先那里继承其焦点遍历策略。

@return 如果已经明确为此 Container 设置焦点遍历策略，则返回 <code>true</code>；否则返回 <code>false</code>。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.setFocusCycleRoot(boolean focusCycleRoot)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 Container 是否是某个焦点遍历循环的根。一旦焦点进入某个遍历循环，它通常无法通过焦点遍历离开，除非按下向上循环键或向下循环键之一。普通遍历被限定于此 Container，该 Container 的所有子代并不是下级焦点循环根的子代。注意，FocusTraversalPolicy 可能屈服于这些约束。例如，ContainerOrderFocusTraversalPolicy 支持隐式的向下循环遍历。
 <p>
指定此 Container 子代的遍历顺序的替代方法是<a href="doc-files/FocusSpec.html#FocusTraversalPolicyProviders">焦点遍历策略提供者</a>。  

@param focusCycleRoot 指示此 Container 是否是某个焦点遍历循环的根
@see #isFocusCycleRoot()
@see #setFocusTraversalPolicy
@see #getFocusTraversalPolicy
@see ContainerOrderFocusTraversalPolicy
@see #setFocusTraversalPolicyProvider
@since 1.4
@beaninfo bound:true

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Container.isFocusCycleRoot()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 Container 是否是某个焦点遍历循环的根。一旦焦点进入某个遍历循环，它通常无法通过焦点遍历离开，除非按下向上循环键或向下循环键之一。普通遍历被限定于此 Container，该 Container 的所有子代并不是下级焦点循环根的子代。注意，FocusTraversalPolicy 可能屈服于这些约束。例如，ContainerOrderFocusTraversalPolicy 支持隐式的向下循环遍历。

@return 此 Container 是否是某个焦点遍历循环的根
@see #setFocusCycleRoot
@see #setFocusTraversalPolicy
@see #getFocusTraversalPolicy
@see ContainerOrderFocusTraversalPolicy
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean provider)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置是否将用此容器提供焦点遍历策略。将使用把该属性设置为 <code>true</code> 的容器来获取焦点遍历策略，而不是获取最近的焦点循环根的祖先。
@param provider 指示是否将用此容器提供焦点遍历策略
@see #setFocusTraversalPolicy
@see #getFocusTraversalPolicy
@see #isFocusTraversalPolicyProvider
@since 1.5
@beaninfo bound:true

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.awt.Container.isFocusTraversalPolicyProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此容器是否提供焦点遍历策略。如果将此属性设置为 <code>true</code>，那么在键盘焦点管理器搜索容器层次结构来查找焦点遍历策略，且在其他任何将此属性设置为 true 的容器之前遇到此容器或焦点循环根的时候，将使用其焦点遍历策略，而不是使用焦点循环根的策略。
@see #setFocusTraversalPolicy
@see #getFocusTraversalPolicy
@see #setFocusCycleRoot
@see #setFocusTraversalPolicyProvider
@return 如果此容器提供焦点遍历策略，则返回 <code>true</code>，否则返回 <code>false</code>
@since 1.5
@beaninfo bound:true

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.transferFocusDownCycle()
<!-- END KEY -->
<!-- BEGIN DATA -->
将焦点向下传输一个焦点遍历循环。如果此 Container 是一个焦点循环根，则将焦点的所有者设置为此 Container 的将成为焦点的默认 Component，并将当前焦点循环根设置为此 Container。如果此 Container 不是一个焦点循环根，则不会发生焦点遍历操作。

@see       Component#requestFocus()
@see       #isFocusCycleRoot
@see       #setFocusCycleRoot
@since     1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.applyComponentOrientation(ComponentOrientation o)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此容器和其中包含的所有组件的 <code>ComponentOrientation</code> 属性。

@param o 此容器的新组件的方向性和其中包含组件的方向性。
@exception NullPointerException 如果 <code>orientation</code> 为 null。
@see Component#setComponentOrientation
@see Component#getComponentOrientation
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.addPropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 PropertyChangeListener 添加到侦听器列表中。该侦听器是为此类的所有边界属性注册的，其中包括以下属性：
 <ul>
<li>此 Container 的字体 (&quot;font&quot;)</li>
<li>此 Container 的背景色 (&quot;background&quot;)</li>
<li>此 Container 的前景色 (&quot;foreground&quot;)</li>
<li>此 Container 的可聚焦性 (&quot;focusable&quot;)</li>
<li>此 Container 的焦点遍历键支持的状态 (&quot;focusTraversalKeysEnabled&quot;)</li>
<li>此 Container 的 FORWARD_TRAVERSAL_KEYS 的 Set (&quot;forwardFocusTraversalKeys&quot;)</li>
<li>此 Container 的 BACKWARD_TRAVERSAL_KEYS 的 Set (&quot;backwardFocusTraversalKeys&quot;)</li>
<li>此 Container 的 UP_CYCLE_TRAVERSAL_KEYS 的 Set (&quot;upCycleFocusTraversalKeys&quot;)</li>
<li>此 Container 的 DOWN_CYCLE_TRAVERSAL_KEYS 的 Set (&quot;downCycleFocusTraversalKeys&quot;)</li>
<li>此 Container 的焦点遍历策略 (&quot;focusTraversalPolicy&quot;)
        </li>
<li>此 Container 的焦点循环根的状态 (&quot;focusCycleRoot&quot;)</li>
 </ul>
注意，如果此 Container 正继承某个边界属性，那么不会为响应所继承属性中的更改而触发任何事件。
 <p>
如果侦听器为 null，则不会抛出异常，并且不执行任何动作。

@param   listener   要添加的 PropertyChangeListener

@see Component#removePropertyChangeListener
@see #addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Container.addPropertyChangeListener(String propertyName, PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 PropertyChangeListener 添加到某个指定属性的侦听器列表中。指定的属性可以是用户定义的，或者是以下默认属性之一：
 <ul>
<li>此 Container 的字体 (&quot;font&quot;)</li>
<li>此 Container 的背景色 (&quot;background&quot;)</li>
<li>此 Container 的前景色 (&quot;foreground&quot;)</li>
<li>此 Container 的可聚焦性 (&quot;focusable&quot;)</li>
<li>此 Container 的焦点遍历键支持的状态 (&quot;focusTraversalKeysEnabled&quot;)</li>
<li>此 Container 的 FORWARD_TRAVERSAL_KEYS 的 Set (&quot;forwardFocusTraversalKeys&quot;)</li>
<li>此 Container 的 BACKWARD_TRAVERSAL_KEYS 的 Set (&quot;backwardFocusTraversalKeys&quot;)</li>
<li>此 Container 的 UP_CYCLE_TRAVERSAL_KEYS 的 Set (&quot;upCycleFocusTraversalKeys&quot;)</li>
<li>此 Container 的 DOWN_CYCLE_TRAVERSAL_KEYS 的 Set (&quot;downCycleFocusTraversalKeys&quot;)</li>
<li>此 Container 的焦点遍历策略 (&quot;focusTraversalPolicy&quot;)
        </li>
<li>此 Container 的焦点循环根的状态 (&quot;focusCycleRoot&quot;)</li>
<li>此 Container 的焦点遍历策略提供者的状态 (&quot;focusTraversalPolicyProvider&quot;)</li>
<li>此 Container 的焦点遍历策略提供者的状态 (&quot;focusTraversalPolicyProvider&quot;)</li>
 </ul>
注意，如果此 Container 正继承某个边界属性，那么不会为响应所继承属性中的更改而触发任何事件。
 <p>
如果侦听器为 null，则不会抛出异常，并且不执行任何动作。

@param propertyName 上面列出的属性名称之一
@param listener 要添加的 PropertyChangeListener

@see #addPropertyChangeListener(java.beans.PropertyChangeListener)
@see Component#removePropertyChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.Container.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
反序列化来自指定 <code>ObjectInputStream</code> 的 <code>Container</code>。
 <ul>
<li>从流中读取默认可序列化字段。</li>
<li>读取可序列化 ContainerListener(s) 的一个列表作为可选数据。如果列表为 null，则不安装任何 Listener。</li>
<li>读取此 Container 的 FocusTraversalPolicy 作为可选数据，它可以为 null。</li>
 </ul>

@param s 要读取的 <code>ObjectInputStream</code>
@serial
@see #addContainerListener
@see #writeObject(ObjectOutputStream)

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.Container.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Container</code> 序列化到指定的 <code>ObjectOutputStream</code> 中。
 <ul>
<li>将默认可序列化字段写入流中。</li>
<li>写入可序列化 ContainerListener(s) 的一个列表作为可选数据。检测不可序列化的 ContainerListner(s)，不要试图对它们进行序列化。</li>
<li>当且仅当此 Container 的 FocusTraversalPolicy 是可序列化的时候，才写入它；否则写入 <code>null</code>。</li>
 </ul>

@param s 要写入的 <code>ObjectOutputStream</code>
@serialData <code>null</code> 表示终止 0 或多个对的序列；这种对是由 <code>String</code> 和 <code>Object</code> 组成的；<code>String</code> 指示了对象类型，它为以下类型之一：指示 <code>ContainerListener</code> 对象的 <code>containerListenerK</code>、<code>Container</code> 的 <code>FocusTraversalPolicy</code> 或 <code>null</code>

@see AWTEventMulticaster#save(java.io.ObjectOutputStream, java.lang.String, java.util.EventListener)
@see Container#containerListenerK
@see #readObject(ObjectInputStream)

<!-- END DATA -->
