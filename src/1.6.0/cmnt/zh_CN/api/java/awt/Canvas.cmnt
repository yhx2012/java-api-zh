<!-- BEGIN KEY -->
public class java.awt.Canvas extends java.awt.Component implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Canvas</code> 组件表示屏幕上一个空白矩形区域，应用程序可以在该区域内绘图，或者可以从该区域捕获用户的输入事件。 
 <p>
应用程序必须为 <code>Canvas</code> 类创建子类，以获得有用的功能（如创建自定义组件）。必须重写 <code>paint</code> 方法，以便在 canvas 上执行自定义图形。

@version 	1.39 04/07/06
@author 	Sami Shaio
@since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Canvas()
<!-- END KEY -->
<!-- BEGIN DATA -->

构造一个新的 Canvas。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Canvas(GraphicsConfiguration config)
<!-- END KEY -->
<!-- BEGIN DATA -->

根据给定 GraphicsConfiguration 对象构造一个新的 Canvas。
 
@param config 对 GraphicsConfiguration 对象的引用。

@see GraphicsConfiguration

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Canvas.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 canvas 的同位体。此同位体允许您更改 canvas 的用户界面，而不更改其功能。
@see     java.awt.Toolkit#createCanvas(java.awt.Canvas)
@see     java.awt.Component#getToolkit()

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Canvas.paint(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制此 canvas。 
 <p>
为 <code>Canvas</code> 创建子类的大多数应用程序应该重写此方法，以便执行某个有用的操作（通常是 canvas 的自定义绘制操作）。默认操作是清理 canvas。重写此方法的应用程序不需要调用 super.paint(g)。  
 
@param      g   指定的 Graphics 上下文
@see        #update(Graphics)
@see        Component#paint(Graphics)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Canvas.update(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
更新此 canvas。
 <p>
调用此方法响应对 <code>repaint</code> 的调用。首先通过使用背景色填充 canvas 来清理它，然后通过调用此 canvas 的 <code>paint</code> 方法重绘它。注：重写此方法的应用程序应该调用 super.update(g)，或者将上述功能合并到其自身的代码中。 

@param g 指定的 Graphics 上下文
@see   #paint(Graphics)
@see   Component#update(Graphics)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Canvas.createBufferStrategy(int numBuffers)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的策略，用于对此组件的多次缓冲。多次缓冲对于提高呈现性能很有用。此方法试图使用提供的缓冲区数创建最佳可用策略。它始终创建一个使用该数量缓冲区的 <code>BufferStrategy</code>。首先尝试页面翻转策略，然后尝试使用加速缓冲区的位图传输策略。最后，使用非加速的位图传输策略。
 <p>
每次调用此方法时，都会丢弃此组件现有的缓冲区策略。
@param numBuffers 要创建的缓冲区数，包括前台缓冲区
@exception IllegalArgumentException 如果 numBuffers 小于 1。
@exception IllegalStateException 如果组件不是可显示的
@see #isDisplayable
@see #getBufferStrategy
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Canvas.createBufferStrategy(int numBuffers, BufferCapabilities caps) throws java.awt.AWTException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的策略，使用所需的缓冲区能力对此组件进行多次缓冲。例如，如果只需加速内存或页面翻转（由缓冲区能力指定），则这种策略很有用。
 <p>
每次调用此方法时，都会丢弃此组件现有的缓冲区策略。
@param numBuffers 要创建的缓冲区数量
@param caps 创建缓冲区策略所要求的能力；不能为 <code>null</code>
@exception AWTException 如果提供的能力不受支持或不能满足要求；例如，如果当前可用的加速内存不够，或者不能进行指定的页面翻转时，可能出现这种情况。
@exception IllegalArgumentException 如果 numBuffers 小于 1，或者 caps 为 <code>null</code>
@see #getBufferStrategy
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.BufferStrategy java.awt.Canvas.getBufferStrategy()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由此组件使用的 <code>BufferStrategy</code>。如果尚未创建 <code>BufferStrategy</code> 或者已经用完了内存，则此方法返回 null。
@return 此组件使用的缓冲区策略
@see #createBufferStrategy
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.Canvas.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 Canvas 相关的 AccessibleContext。对于 canvas 来说，AccessibleContext 采用 AccessibleAWTCanvas 的形式。如果必要，创建一个新的 AccessibleAWTCanvas 实例。

@return 一个 AccessibleAWTCanvas，它充当此 Canvas 的 AccessibleContext
@since 1.3

<!-- END DATA -->
