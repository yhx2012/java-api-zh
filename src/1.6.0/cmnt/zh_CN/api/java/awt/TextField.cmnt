<!-- BEGIN KEY -->
public class java.awt.TextField extends java.awt.TextComponent
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>TextField</code> 对象是允许编辑单行文本的文本组件。
<p>
例如，下图描绘了带有四个宽度各异的文本字段的窗体。其中两个文本字段显示预定义文本 <code>&quot;Hello&quot;</code>。
<p>
<img src="doc-files/TextField-1.gif" alt="前面的文本描述了此图。"
 ALIGN=center HSPACE=10 VSPACE=7>
<p>
以下是产生四个文本字段的代码：
<p>
<hr><blockquote><pre>
TextField tf1, tf2, tf3, tf4;
// a blank text field
tf1 = new TextField();
// blank field of 20 columns
tf2 = new TextField(&quot;&quot;, 20);
// predefined text displayed
tf3 = new TextField(&quot;Hello!&quot;);
// predefined text in 30 columns
tf4 = new TextField(&quot;Hello&quot;, 30);
</pre></blockquote><hr>
<p>
每次用户在文本字段中键入一个键时，就有一个或更多键事件被发送到该文本字段。<code>KeyEvent</code> 是以下三种类型之一：keyPressed、keyReleased 或 keyTyped。键事件的属性指示事件是哪一种类型，以及关于事件的其他信息，比如对键事件应用哪种修饰符和事件发生的时间。
<p>
键事件被传递给每一个 <code>KeyListener</code> 或 <code>KeyAdapter</code> 对象，这些对象使用组件的 <code>addKeyListener</code> 方法注册，以接收这类事件。（<code>KeyAdapter</code> 对象实现 <code>KeyListener</code> 接口。）  
<p>
TextField 还可能触发 <code>ActionEvent</code>。如果对文本字段启用操作事件，则可以通过按下 <code>Return</code> 键触发它们。
<p>
<code>TextField</code> 类的 <code>processEvent</code> 方法检查操作事件，并将它们传递给 <code>processActionEvent</code>。后一种方法将该事件重定向到为接收此文本字段生成的操作事件而注册的所有 <code>ActionListener</code> 对象。

@version	1.80, 05/18/04
@author 	Sami Shaio
@see         java.awt.event.KeyEvent
@see         java.awt.event.KeyAdapter
@see         java.awt.event.KeyListener
@see         java.awt.event.ActionEvent
@see         java.awt.Component#addKeyListener
@see         java.awt.TextField#processEvent
@see         java.awt.TextField#processActionEvent
@see         java.awt.TextField#addActionListener
@since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.TextField.columns
<!-- END KEY -->
<!-- BEGIN DATA -->
文本字段中的列数。列是近似平均字符宽度，它与平台有关。要保证列数为非负数。

@serial
@see #setColumns(int)
@see #getColumns()

<!-- END DATA -->
<!-- BEGIN KEY -->
 char java.awt.TextField.echoChar
<!-- END KEY -->
<!-- BEGIN DATA -->
回显字符，在用户想将输入字符伪装成文本字段时使用的字符。如果 echoChar = <code>0</code>，则移除伪装。

@serial
@see #getEchoChar()
@see #setEchoChar(char)
@see #echoCharIsSet()

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.TextField.textFieldSerializedDataVersion
<!-- END KEY -->
<!-- BEGIN DATA -->
textField 的 Serialized Data Version。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.TextField() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造新文本字段。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.TextField(String text) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造使用指定文本初始化的新文本字段。
@param      text  要显示的文本。如果 <code>text</code> 为 <code>null</code>，则显示空字符串 <code>&quot;&quot;</code>。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.TextField(int columns) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定列数的新空文本字段。列是近似平均字符宽度，它与平台有关。
@param      columns 列数。如果 <code>columns</code> 小于 <code>0</code>，则将 <code>columns</code> 设置为 <code>0</code>。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.TextField(String text, int columns) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造使用要显示的指定文本初始化的新文本字段，宽度足够容纳指定列数。列是近似平均字符宽度，它与平台有关。
@param      text       要显示的文本。如果 <code>text</code> 为 <code>null</code>，则显示空字符串 <code>&quot;&quot;</code>。
@param      columns     列数。如果 <code>columns</code> 小于 <code>0</code>，则将 <code>columns</code> 设置为 <code>0</code>。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.TextField.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 TextField 的同位体。此同位体允许修改 TextField 的外观，并且不更改其功能。

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.awt.TextField.getEchoChar()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取用于回显的字符。
<p>
 回显字符对于不应将用户输入回显到屏幕上的文本字段有用，例如输入密码的文本字段。如果 <code>echoChar</code> = <code>0</code>，则将用户输入不作更改地回显到屏幕。
<p>
Java 平台实现只能支持有限的、非空回显字符集。此函数返回 setEchoChar() 最初请求的回显字符。TextField 实现实际使用的回显字符可能不同。

@return      此文本字段的回显字符。
@see         java.awt.TextField#echoCharIsSet
@see         java.awt.TextField#setEchoChar

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.TextField.setEchoChar(char c)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此文本字段的回显字符。
<p>
回显字符对于不应将用户输入回显到屏幕上的文本字段很有用，例如输入密码的文本字段。设置 <code>echoChar</code> = <code>0</code> 允许将用户输入再次回显到屏幕。
 <p>
Java 平台实现只能支持有限的、非空回显字符集。试图设置不受支持的回显字符将导致使用默认回显字符。对 getEchoChar() 的后续调用将返回最初请求的回显字符。返回的回显字符有可能与 TextField 实现实际使用的相同，也有可能不同。

@param       c   此文本字段的回显字符。
@see         java.awt.TextField#echoCharIsSet
@see         java.awt.TextField#getEchoChar
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TextField.setEchoCharacter(char c)
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，由 <code>setEchoChar(char)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.TextField.setText(String t)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此文本组件显示的文本设置为指定文本。
@param       t   新文本。
@see         java.awt.TextComponent#getText  

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.TextField.echoCharIsSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此文本字段是否有一个回显字符集。
<p>
回显字符对于不应将用户输入回显到屏幕上的文本字段有用，例如输入密码的文本字段。
@return     如果此文本字段有一个回显字符集，则返回 <code>true</code>；否则返回 <code>false</code>。
@see        java.awt.TextField#setEchoChar
@see        java.awt.TextField#getEchoChar

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.TextField.getColumns()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此文本字段中的列数。列是近似平均字符宽度，它与平台有关。
@return 列数。
@see        java.awt.TextField#setColumns
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TextField.setColumns(int columns)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此文本字段中的列数。列是近似平均字符宽度，它与平台有关。
@param      columns     列数。
@see        java.awt.TextField#getColumns
@exception  IllegalArgumentException   如果为 <code>columns</code> 提供的值小于 <code>0</code>。
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.TextField.getPreferredSize(int columns)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取具有指定列数的文本字段的首选大小。
@param     columns 此文本字段中的列数。
@return    显示此文本字段的首选尺寸。
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.TextField.preferredSize(int columns)
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，由 <code>getPreferredSize(int)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.TextField.getPreferredSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此文本字段的首选大小。
@return    显示此文本字段的首选尺寸。
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.TextField.preferredSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，由 <code>getPreferredSize()</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.TextField.getMinimumSize(int columns)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取具有指定列数的文本字段的最小尺寸。
@param     columns 此文本字段中的列数。
@since    JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.TextField.minimumSize(int columns)
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，由 <code>getMinimumSize(int)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.TextField.getMinimumSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此文本字段的最小尺寸。
@return    显示此文本字段的最小尺寸。
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.TextField.minimumSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，由 <code>getMinimumSize()</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TextField.addActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定的操作侦听器，以从此文本字段接收操作事件。如果 l 为 null，则不抛出任何异常，也不执行任何操作。
<p>有关 AWT 线程模式的详细信息，请参考 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
 >AWT Threading Issues</a>。

@param    l   操作侦听器。
@see        #removeActionListener
@see        #getActionListeners
@see        java.awt.event.ActionListener
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TextField.removeActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定的操作侦听器，不再从此文本字段接收操作事件。如果 l 为 null，则不抛出任何异常，也不执行任何操作。
<p>有关 AWT 线程模式的详细信息，请参考 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
 >AWT Threading Issues</a>。

@param      	 l   操作侦听器。
@see        	#addActionListener
@see        	#getActionListeners
@see        	java.awt.event.ActionListener
@since      	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.event.ActionListener[] java.awt.TextField.getActionListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此文本字段上已注册的所有操作侦听器的数组。

@return 此文本字段的所有 <code>ActionListener</code>；如果当前没有注册任何操作侦听器，则返回一个空数组。

@see #addActionListener
@see #removeActionListener
@see	java.awt.event#ActionListener
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.awt.TextField.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前已在此 <code>TextField</code> 上注册为 <code><em>Foo</em>Listener</code> 的所有对象的数组。<code><em>Foo</em>Listener</code> 是用 <code>add<em>Foo</em>Listener</code> 方法注册的。

<p>
可以使用 class 字面值（如 <code><em>Foo</em>Listener.class</code>）来指定 <code>listenerType</code> 参数。例如，可以使用以下代码来查询 <code>TextField</code> <code>t</code> 的操作侦听器：

<pre>ActionListener[] als = (ActionListener[])(t.getListeners(ActionListener.class));</pre>

如果不存在这样的侦听器，则此方法将返回一个空数组。

@param listenerType 所请求的侦听器类型；此参数应该指定一个从 <code>java.util.EventListener</code> 继承的接口
@return 在此文本字段上作为 <code><em>Foo</em>Listener</code> 注册的所有对象的数组；如果尚未添加这样的侦听器，则返回一个空数组
@exception ClassCastException 如果 <code>listenerType</code> 未指定一个实现 <code>java.util.EventListener</code> 的类或接口

@see #getActionListeners
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.TextField.processEvent(AWTEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理此文本字段上的事件。如果事件是 <code>ActionEvent</code> 的一个实例，则此方法将调用 <code>processActionEvent</code> 方法。否则，它将调用超类的 <code>processEvent</code> 方法。
<p>注意，如果事件参数为 <code>null</code>，则行为是不明确的，并可能导致异常。

@param      e 事件
@see        java.awt.event.ActionEvent
@see        java.awt.TextField#processActionEvent
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.TextField.processActionEvent(ActionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理发生在此文本字段上的操作事件：将这些事件指派给所有已注册的 <code>ActionListener</code> 对象。
<p>
只有此组件启用了操作事件时，才调用此方法。发生以下事件之一时将启用操作事件：
<p><ul>
<li><code>ActionListener</code> 对象通过 <code>addActionListener</code> 注册。
<li>操作事件通过 <code>enableEvents</code> 启用。
</ul>
<p>注意，如果事件参数为 <code>null</code>，则行为是不明确的，并可能导致异常。

@param       e 操作事件
@see         java.awt.event.ActionListener
@see         java.awt.TextField#addActionListener
@see         java.awt.Component#enableEvents
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.awt.TextField.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此 <code>TextField</code> 状态的字符串。此方法仅用于调试目的，对于各个实现，返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。

@return     此文本字段的参数字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.TextField.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 TextField 关联的 AccessibleContext。对于文本字段，AccessibleContext 采用 AccessibleAWTTextField 的形式。如有必要，可创建一个新的 AccessibleAWTTextField 实例。

@return 一个 AccessibleAWTTextField，它充当此 TextField 的 AccessibleContext。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.TextField.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取 ObjectInputStream，如果它不为 null，则添加一个侦听器，以接收 TextField 触发的操作事件。未识别的密钥或值将被忽略。

@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless()</code> 返回 <code>true</code>
@see #removeActionListener(ActionListener)
@see #addActionListener(ActionListener)
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.TextField.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将默认的可序列化字段写入流中。写入可序列化 ActionListener 的一个列表作为可选数据。检测不可序列化的 ActionListener，并且不尝试对其进行序列化。

@serialData 以 null 终止的 0 或多对序列。由 String 和 Object 组成的一对序列。String 指示对象类型，它是以下类型之一：指示 ActionListener 对象的 ActionListenerK。

@see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)
@see java.awt.Component#actionListenerK

<!-- END DATA -->
