<!-- BEGIN KEY -->
public class java.awt.GradientPaint extends java.lang.Object implements java.awt.Paint
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>GradientPaint</code> 类提供了使用线性颜色渐变模式填充 {@link Shape} 的方法。如果在用户空间指定了 {@link Point} P1 的 {@link Color} 为 C1，<code>Point</code> P2 的 <code>Color</code> 为 C2，则 P1、P2 连接线上的 <code>Color</code> 是逐渐地从 C1 变化到 C2 的。任何不在 P1、P2 延长线上的点 P 都具有点 P' 的颜色，P' 是 P1、P2 延长线上点 P 的垂直投影。P1、P2 段以外的延长线上的点可以按以下两种方式之一进行着色。
 <ul>
 <li>
如果渐变是周期性的，那么 P1、P2 延长线上的点在颜色 C1 和 C2 之间来回循环。
 <li>
如果渐变是非周期性的，那么 P1 一边的点有固定的 <code>Color</code> C1，而 P2 一边的点有固定的 <code>Color</code> C2。
 </ul>

@see Paint
@see Graphics2D#setPaint
@version 10 Feb 1997

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.GradientPaint(float x1, float y1, Color color1, float x2, float y2, Color color2)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个简单的非周期性 <code>GradientPaint</code> 对象。
@param x1 用户空间中第一个指定 <code>Point</code> 的 x 坐标
@param y1 用户空间中第一个指定 <code>Point</code> 的 y 坐标
@param color1 第一个指定 <code>Point</code> 处的 <code>Color</code>
@param x2 用户空间中第二个指定 <code>Point</code> 的 x 坐标
@param y2 用户空间中第二个指定 <code>Point</code> 的 y 坐标
@param color2 第二个指定 <code>Point</code> 处的 <code>Color</code>
@throws NullPointerException 如果任何一个 color 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.GradientPaint(Point2D pt1, Color color1, Point2D pt2, Color color2)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个简单的非周期性 <code>GradientPaint</code> 对象。
@param pt1 用户空间中第一个指定的 <code>Point</code>
@param color1 第一个指定 <code>Point</code> 处的 <code>Color</code>
@param pt2 用户空间中第二个指定的 <code>Point</code>
@param color2 第二个指定 <code>Point</code> 处的 <code>Color</code>
@throws NullPointerException 如果任何一个 color 或 point 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.GradientPaint(float x1, float y1, Color color1, float x2, float y2, Color color2, boolean cyclic)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 <code>boolean</code> 参数构造一个周期性或非周期性的 <code>GradientPaint</code> 对象。
@param x1 用户空间中第一个指定 <code>Point</code> 的 x 坐标
@param y1 用户空间中第一个指定 <code>Point</code> 的 y 坐标
@param color1 第一个指定 <code>Point</code> 处的 <code>Color</code>
@param x2 用户空间中第二个指定 <code>Point</code> 的 x 坐标
@param y2 用户空间中第二个指定 <code>Point</code> 的 y 坐标
@param color2 第二个指定 <code>Point</code> 处的 <code>Color</code>
@param cyclic 如果渐变模式在两种颜色之间重复循环，则为 <code>true</code>；否则为 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.GradientPaint(Point2D pt1, Color color1, Point2D pt2, Color color2, boolean cyclic)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 <code>boolean</code> 参数构造一个周期性或非周期性的 <code>GradientPaint</code> 对象。
@param pt1 用户空间中第一个指定的 <code>Point</code>
@param color1  第一个指定 <code>Point</code> 处的 <code>Color</code>
@param pt2 用户空间中第二个指定的 <code>Point</code>
@param color2 第二个指定 <code>Point</code> 处的 <code>Color</code>
@param cyclic 如果渐变模式在两种颜色之间重复循环，则为 <code>true</code>；否则为 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Point2D java.awt.GradientPaint.getPoint1()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回着第一种颜色的点 P1 的副本。
@return {@link Point2D} 对象，它是着 <code>GradientPaint</code> 的第一种颜色的点的副本。  

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color java.awt.GradientPaint.getColor1()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回点 P1 的颜色 C1。
@return <code>Color</code> 对象，P1 的颜色。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Point2D java.awt.GradientPaint.getPoint2()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回着第二种颜色的点 P2 的副本。
@return {@link Point2D} 对象，它是着 <code>GradientPaint</code> 的第二种颜色的点的副本。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color java.awt.GradientPaint.getColor2()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回点 P2 的颜色 C2。
@return <code>Color</code> 对象，P2 的颜色。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.GradientPaint.isCyclic()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果渐变在两种颜色 C1 和 C2 之间重复循环，则返回 <code>true</code>。
@return 如果渐变在两种颜色之间重复循环，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.PaintContext java.awt.GradientPaint.createContext(ColorModel cm, Rectangle deviceBounds, Rectangle2D userBounds, AffineTransform xform, RenderingHints hints)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回用来生成颜色模式的上下文。
@param cm 接收 <code>Paint</code> 数据的 {@link ColorModel}。这仅作为提示使用。
@param deviceBounds 正在呈现的图形图元的设备空间边界框
@param userBounds 正在呈现的图形图元的用户空间边界框
@param xform 从用户空间到设备空间的 {@link AffineTransform}
@param hints context 对象用于选择所呈现内容的提示
@return 生成颜色模式的 {@link PaintContext}。
@see PaintContext

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.GradientPaint.getTransparency()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GradientPaint</code> 的透明度模式。
@return 一个整数值，表示此 <code>GradientPaint</code> 对象的透明度模式。
@see Transparency

<!-- END DATA -->
