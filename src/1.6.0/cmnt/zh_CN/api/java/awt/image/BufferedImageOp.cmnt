<!-- BEGIN KEY -->
public interface java.awt.image.BufferedImageOp
<!-- END KEY -->
<!-- BEGIN DATA -->
此接口描述对 <CODE>BufferedImage</CODE> 对象所执行的单输入/单输出操作。它由 <CODE>AffineTransformOp</CODE>、<CODE>ConvolveOp</CODE>、<CODE>ColorConvertOp</CODE>、<CODE>RescaleOp</CODE> 和 <CODE>LookupOp</CODE> 实现。这些对象可以传入到一个 <CODE>BufferedImageFilter</CODE>，以便对 ImageProducer-ImageFilter-ImageConsumer 范例中的 <CODE>BufferedImage</CODE> 进行操作。
 <p>
实现此接口的类必须指定它们是否允许进行适当的过滤，在此过滤操作中源对象等于目标对象。
 <p>
无法使用此接口描述更复杂的操作，比如那些针对多个源对象的操作。注意，此限制还意味着，在进行该操作之前目标像素的值不用作过滤操作的输入。

@see BufferedImage
@see BufferedImageFilter
@see AffineTransformOp
@see BandCombineOp
@see ColorConvertOp
@see ConvolveOp
@see LookupOp
@see RescaleOp
@version 10 Feb 1997

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.BufferedImage java.awt.image.BufferedImageOp.filter(BufferedImage src, BufferedImage dest)
<!-- END KEY -->
<!-- BEGIN DATA -->
对 <CODE>BufferedImage</CODE> 执行单输入/单输出操作。如果两个图像的颜色模型不匹配，则将颜色模型转换成目标颜色模型。如果目标图像为 null，则创建一个具有合适 <CODE>ColorModel</CODE> 的 <CODE>BufferedImage</CODE>。
 <p>
如果源图像和/或目标图像与实现此过滤器的类所允许的图像类型不兼容，则可能抛出 <CODE>IllegalArgumentException</CODE>。

@param src 要过滤的 <CODE>BufferedImage</CODE>
@param dest 用于存储 results$ 的 <CODE>BufferedImage</CODE>

@return 过滤后的 <CODE>BufferedImage</CODE>。

@throws IllegalArgumentException 	如果源图像和/或目标图像与实现此过滤器的类所允许的图像类型不兼容。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Rectangle2D java.awt.image.BufferedImageOp.getBounds2D(BufferedImage src)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回已过滤目标图像的边界框。如果源图像与实现此过滤器的类所允许的图像类型不兼容，则可能抛出 <CODE>IllegalArgumentException</CODE>。
 
@param src 要过滤的 <CODE>BufferedImage</CODE>
 
@return 表示目标图像边界框的 <CODE>Rectangle2D</CODE>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.BufferedImage java.awt.image.BufferedImageOp.createCompatibleDestImage(BufferedImage src, ColorModel destCM)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有正确大小和 band 数的经过检查的目标图像。如果源图像与实现此过滤器的类所允许的图像类型不兼容，则可能抛出 <CODE>IllegalArgumentException</CODE>。
 
@param src 要过滤的 <CODE>BufferedImage</CODE>
@param destCM 目标 <CODE>ColorModel</CODE>。如果目标 <CODE>ColorModel</CODE> 为 null，则使用源 <CODE>ColorModel</CODE>。
 
@return 经过检查的目标图像。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Point2D java.awt.image.BufferedImageOp.getPoint2D(Point2D srcPt, Point2D dstPt)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与源图像中给定点对应的目标点的位置。如果指定了 <CODE>dstPt</CODE>，则使用它保存返回值。
@param srcPt 表示源图像中点的 <code>Point2D</code>
@param dstPt 用于存储结果的 <CODE>Point2D</CODE>
 
@return 与源图像中指定点对应的目标图像中的 <CODE>Point2D</CODE>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.RenderingHints java.awt.image.BufferedImageOp.getRenderingHints()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回针对此操作所呈现的提示。
 
@return 针对此 <CODE>BufferedImageOp</CODE> 的 <CODE>RenderingHints</CODE> 对象。如果没有设置提示，则返回 null。

<!-- END DATA -->
