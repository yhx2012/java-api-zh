<!-- BEGIN KEY -->
public abstract class java.awt.image.ColorModel extends java.lang.Object implements java.awt.Transparency
<!-- END KEY -->
<!-- BEGIN DATA -->
此 <code>ColorModel</code> 抽象类封装了将像素值转换为颜色分量（例如，红色、绿色和蓝色）和 alpha 分量的方法。为了将图像呈现到屏幕、打字机或其他图像上，必须将像素值转换为颜色和 alpha 分量。与此类方法的参数或返回值一样，可以把像素表示为 32 位 int，或表示为基本类型的数组。<code>ColorModel</code> 颜色分量的数量、顺序和解释由其 <code>ColorSpace</code> 指定。与未包含 alpha 信息的像素数据一起使用的 <code>ColorModel</code> 将所有像素视为不透明的（alpha 值为 1.0）。
 <p>
此 <code>ColorModel</code> 类支持像素值的两种表示形式。像素值可以为单个 32 位 int，也可以为一个基本类型的数组。Java(tm) Platform 1.0 和 1.1 API 将像素表示为单 <code>byte</code> 或单 <code>int</code> 值。根据此 <code>ColorModel</code> 类用途，可按 int 形式传递像素值参数。Java(tm) 2 Platform API 引入了表示图像的其他类。对于 {@link BufferedImage} 或 {@link RenderedImage} 对象（基于 {@link Raster} 和 {@link SampleModel} 类），像素值用单个 int 表示可能不太方便。因此，<code>ColorModel</code> 现在提供了以基本类型数组表示像素值的方法。特定 <code>ColorModel</code> 对象使用的基本类型被称作其转换类型。
 <p>
当调用采用单个 int 像素参数的方法时，与其像素值不便于表示为单个 int 的图像一起使用的 <code>ColorModel</code> 对象会抛出 {@link IllegalArgumentException}。<code>ColorModel</code> 的子类必须指定出现这种情况的条件。对于 {@link DirectColorModel} 或 {@link IndexColorModel} 对象，不会出现这种情况。
 <p>
当前，受 Java 2D(tm) API 支持的转换类型有 DataBuffer.TYPE_BYTE、DataBuffer.TYPE_USHORT、DataBuffer.TYPE_INT、DataBuffer.TYPE_SHORT、DataBuffer.TYPE_FLOAT 和 DataBuffer.TYPE_DOUBLE。当使用 ColorModel 和这些类型中前三个类型的图像时，多数呈现操作都会被更快地执行。而 ColorModel 和后三种类型的图像可能不支持某些图像的过滤操作。在创建特定 <code>ColorModel</code> 对象时，通常会显式或默认指定该对象的转换类型。<code>ColorModel</code> 的所有子类必须指定可能的转换类型和如何确定表示像素基本数组中元素的数量。
 <p>
对于 <code>BufferedImages</code>，其 <code>Raster</code> 和该 <code>Raster</code> 对象的 <code>SampleModel</code>（从这些类的 <code>getTransferType</code> 方法中获得）的转换类型必须与 <code>ColorModel</code> 的转换类型匹配。表示 <code>Raster</code> 和 <code>SampleModel</code>（从这些类的 <code>getNumDataElements</code> 方法中获得）的像素的数组中的元素数量必须与 <code>ColorModel</code> 的数量匹配。
 <p>
用于将像素值转换为颜色和 alpha 分量的算法随子类不同而不同。例如，从 <code>BufferedImage</code> 对象的 <code>Raster</code> 和颜色/alpha 分量的 <code>SampleModel</code> 中得到的样本之间不需要一一对应。即使有此对应关系，样本中的位数也不必与相应的颜色/alpha 分量中的位数相同。每个子类必须指定如何从像素值到颜色/alpha 分量的转换。
 <p>
该 <code>ColorModel</code> 类中的方法使用两种不同的颜色和 alpha 分量表示形式：标准化形式和非标准化形式。在标准化形式中，每个分量都是介于某个最小值和最大值之间的 <code>float</code> 值。对于 alpha 分量，最小值为 0.0，最大值为 1.0。对于颜色分量，每个分量的最小值和最大值可以从 <code>ColorSpace</code> 对象中得到。这些值通常为 0.0 和 1.0（例如，默认 sRGB 颜色空间的标准化分量值的范围为 0.0 到 1.0），但某些颜色空间的分量值可能有不同的上限和下限。这些极限值可以使用 <code>ColorSpace</code> 类的 <code>getMinValue</code> 和 <code>getMaxValue</code> 方法得到。标准化的颜色分量值未预乘。所有 <code>ColorModels</code> 必须支持标准化形式。
 <p>
在非标准化形式中，每个分量都是 0 和 2<sup>n</sup> - 1 之间的无符号整数值，其中 n 为特定分量的有效位数。如果特定 <code>ColorModel</code> 的像素值表示预乘了 alpha 样本的颜色样本，则非标准化颜色分量也要预乘。非标准化形式只能与其 <code>ColorSpace</code> 所有分量的最小值为 0.0，所有分量的最大值为 1.0 的 <code>ColorModel</code> 的实例一起使用。颜色和 alpha 分量的非标准化形式可以是其标准化分量值都位于 0.0 和 1.0 之间的 <code>ColorModels</code> 的便捷表示形式。在这种情况下，整数值 0 映射到 0.0，而值 2<sup>n</sup> - 1 映射到 1.0。其他情况下，如标准化分量值可以为负数或正数、非标准化形式不方便使用。当调用包含非标准化参数的方法时，此类 <code>ColorModel</code> 对象将抛出 {@link IllegalArgumentException}。<code>ColorModel</code> 的子类必须指定出现这种情况的条件。

@see IndexColorModel
@see ComponentColorModel
@see PackedColorModel
@see DirectColorModel
@see java.awt.Image
@see BufferedImage
@see RenderedImage
@see java.awt.color.ColorSpace
@see SampleModel
@see Raster
@see DataBuffer
@version 10 Feb 1997

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.image.ColorModel.pixel_bits
<!-- END KEY -->
<!-- BEGIN DATA -->
像素总位数。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.image.ColorModel.transferType
<!-- END KEY -->
<!-- BEGIN DATA -->
用于表示像素值的数组的数据类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.ColorModel(int bits)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造 <code>ColorModel</code>，将指定位数的像素转换为颜色/alpha 分量。颜色空间默认为 RGB <code>ColorSpace</code>（即 sRGB）。假定像素值包含 alpha 信息。如果像素值中的颜色和 alpha 信息表示为独立的空间 band，则假定颜色 band 未与 alpha 值预乘。透明度类型为 java.awt.Transparency.TRANSLUCENT。转换类型将为可以存储单个像素的 DataBuffer.TYPE_BYTE、DataBuffer.TYPE_USHORT 或 DataBuffer.TYPE_INT 中的最小者（或 DataBuffer.TYPE_UNDEFINED，如果位数大于 32）。因为此构造方法没有关于每个颜色和 alpha 分量的位数信息，所以任何调用此构造方法的子类都应该重写需要此信息的所有方法。
@param bits 像素的位数
@throws IllegalArgumentException 如果 <code>bits</code> 中的位数小于 1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.image.ColorModel(int pixel_bits, int[] bits, ColorSpace cspace, boolean hasAlpha, boolean isAlphaPremultiplied, int transparency, int transferType)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造将像素值转换为颜色/alpha 分量的 <code>ColorModel</code>。颜色分量将位于指定的 <code>ColorSpace</code> 中。<code>pixel_bits</code> 为像素值中的位数。位数组指定每个颜色和 alpha 分量的有效位数。如果像素值中不包含 alpha 信息，则其长度应为 <code>ColorSpace</code> 中的分量数；如果包含 alpha 信息，则其长度比此数要大。<code>hasAlpha</code> 指示是否存在 alpha 信息。<code>boolean</code> <code>isAlphaPremultiplied</code> 指定如何解释像素值，其中颜色和 alpha 信息表示为独立的空间 band。如果 <code>boolean</code> 为 <code>true</code>，则假定颜色样本已经与 alpha 样本相乘。该 <code>transparency</code> 指定可以由此颜色模型表示的 alpha 值。转换类型是用于表示像素值的基本数组的类型。注意，位数组包含从像素值转换后每个颜色/alpha 分量的有效位数。例如，对于 <code>pixel_bits</code> 等于 16 的 <code>IndexColorModel</code>，该位数组可能有四个每个元素都设置为 8 的元素。
@param pixel_bits 像素值中的位数
@param bits 指定每个颜色和 alpha 分量的有效位数的数组
@param cspace 指定 <code>ColorSpace</code>
@param hasAlpha <code>true</code> 如果包含 alpha 信息；否则为 <code>false</code>
@param isAlphaPremultiplied <code>true</code> 如果假定颜色样本预乘了 alpha 样本；否则为 <code>false</code>
@param transparency 可以由此颜色模型表示的 alpha 值
@param transferType 用于表示像素值的数组类型
@throws IllegalArgumentException 如果位数组的长度小于此 <code>ColorModel</code> 中颜色或 alpha 分量的数量，或者透明度不为有效值。
@throws IllegalArgumentException 如果 <code>bits</code> 中位数的和小于 1，或者 <code>bits</code> 中任何一个元素小于 0。
@see java.awt.Transparency

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.image.ColorModel java.awt.image.ColorModel.getRGBdefault()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述整数 RGB 值的默认格式的 <code>DirectColorModel</code>，该整数 RGB 值可以在便于程序员使用的 AWT 图像接口中的许多方法中使用。颜色空间为默认的 {@link ColorSpace}（即 sRGB）。RGB 值的格式是一个 8 位的整数，从最高有效字节到最低有效字节的相应顺序排列 alpha、红色、绿色和蓝色颜色分量，格式如下：0xAARRGGBB。颜色分量未与 alpha 分量预乘。此格式不一定表示特定设备或所有图像的本机或最有效的 <code>ColorModel</code>。它只是一种通用的颜色模型格式。
@return 描述默认 RGB 值的 <code>DirectColorModel</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.awt.image.ColorModel.hasAlpha()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>ColorModel</code> 中是否支持 alpha。
@return 如果此 <code>ColorModel</code> 中支持 alpha，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.awt.image.ColorModel.isAlphaPremultiplied()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回是否在由此 <code>ColorModel</code> 转换的像素值中预乘 alpha。如果布尔变量为 <code>true</code>，则使用此 <code>ColorModel</code> 解释其中颜色和 alpha 信息表示为独立空间 band 的像素值，并且假定颜色样本已经与 alpha 样本相乘。
@return 如果已在由此 <code>ColorModel</code> 转换的像素值中预乘 alpha 值，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.ColorModel.getTransferType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>ColorModel</code> 的转换类型。该转换类型是一个基本数组类型，可用来以数组形式表示像素值。
@return 转换类型。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.ColorModel.getPixelSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由此 <code>ColorModel</code> 描述的每像素的位数。
@return 每像素的位数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.ColorModel.getComponentSize(int componentIdx)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定颜色/alpha 分量的位数。按 <code>ColorSpace</code> 中指定的顺序索引颜色分量。通常，此顺序反映了颜色空间类型的名称。例如，对于 TYPE_RGB，索引 0 对应于红色，索引 1 对应于绿色，索引 2 对应于蓝色。如果此 <code>ColorModel</code> 支持 alpha，则该 alpha 分量对应于最后一个颜色分量后面的索引。
@param componentIdx 颜色/alpha 分量的索引
@return 指定索引处颜色/alpha 分量的位数。
@throws ArrayIndexOutOfBoundsException 如果 <code>componentIdx</code> 大于分量数或小于 0
@throws NullPointerException 如果位数数组为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.awt.image.ColorModel.getComponentSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回每个颜色/alpha 分量的位数数组。该数组包含以 <code>ColorSpace</code> 指定的顺序排列的颜色分量，后面是 alpha 分量（如果存在）。
@return 每个颜色/alpha 分量的位数的数组

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.ColorModel.getTransparency()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回透明度。返回 OPAQUE、BITMASK 或 TRANSLUCENT。
@return 此 <code>ColorModel</code> 的透明度。
@see Transparency#OPAQUE
@see Transparency#BITMASK
@see Transparency#TRANSLUCENT

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.ColorModel.getNumComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>ColorModel</code> 中分量数（包括 alpha 分量数）。此分量数等于颜色分量数，或者加 1（如果存在 alpha 分量）。
@return 此 <code>ColorModel</code> 中分量数

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.ColorModel.getNumColorComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>ColorModel</code> 中颜色分量数。这是 {@link ColorSpace#getNumComponents} 返回的分量数。
@return 此 <code>ColorModel</code> 中颜色分量数。
@see ColorSpace#getNumComponents

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.awt.image.ColorModel.getRed(int pixel)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定像素的红色颜色分量，指定像素在默认的 RGB ColorSpace（即 sRGB）中缩放范围是 0 到 255。如有必要，可进行颜色转换。将该像素值指定为 int。如果此 <code>ColorModel</code> 的像素值不便于用单个 int 表示，则抛出 <code>IllegalArgumentException</code>。返回的值不是预先乘得的值。例如，如果预乘了 alpha，则此方法会在返回值之前除以 alpha。如果 alpha 值为 0，则红色值为 0。
@param pixel 指定的像素
@return 指定像素的红色分量的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.awt.image.ColorModel.getGreen(int pixel)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定像素的绿色颜色分量，指定像素在默认的 RGB ColorSpace（即 sRGB）中缩放范围是 0 到 255。如有必要，可进行颜色转换。将该像素值指定为 int。如果此 <code>ColorModel</code> 的像素值不便于用单个 int 表示，则抛出 <code>IllegalArgumentException</code>。返回的值是一个非预先乘得的值。例如，如果预乘了 alpha，则此方法会在返回值之前除以 alpha。如果 alpha 值为 0，则绿色值为 0。
@param pixel 指定的像素
@return 指定像素的绿色分量的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.awt.image.ColorModel.getBlue(int pixel)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定像素的蓝色分量的值，指定像素在默认的 RGB ColorSpace（即 sRGB）中缩放范围是 0 到 255。如有必要，可进行颜色转换。将该像素值指定为 int。如果此 <code>ColorModel</code> 的像素值不便于用单个 int 表示，则抛出 <code>IllegalArgumentException</code>。返回的值为非预先乘得的值，例如，如果与 alpha 预先相乘，此方法会在返回值之前除以 alpha。如果 alpha 值为 0，则蓝色值为 0。
@param pixel 指定的像素
@return 指定像素的蓝色分量的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.awt.image.ColorModel.getAlpha(int pixel)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定像素（缩放范围从 0 到 255）的 alpha 分量。像素值指定为 int。如果此 <code>ColorModel</code> 的像素值不便于用单个 int 表示，则抛出 <code>IllegalArgumentException</code>。
@param pixel 指定的像素
@return 该指定像素的 alpha 分量的值。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.ColorModel.getRGB(int pixel)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回默认的 RGB 颜色模型格式中像素的颜色/alpha 分量。如有必要，可进行颜色转换。将该像素值指定为 int。如果此 <code>ColorModel</code> 的像素值不便于用单个 int 表示，则抛出 <code>IllegalArgumentException</code>。返回的值是非预乘格式。例如，如果预乘 alpha，此方法会将 alpha 从颜色分量中除出来。如果 alpha 值为 0，则颜色值为 0。
@param pixel 指定的像素
@return 指定像素的颜色/alpha 分量的 RGB 值。
@see ColorModel#getRGBdefault

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.ColorModel.getRed(Object inData)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定像素的红色颜色分量，指定像素在默认的 RGB <code>ColorSpace</code>（即 sRGB）中缩放范围是 0 到 255。如有必要，可进行颜色转换。像素值由作为对象引用传入的类型 transferType 的数据元素的数组指定。返回的值是一个非预先乘得的值。例如，如果预乘了 alpha，则此方法会在返回值之前除以 alpha。如果 alpha 值为 0，则红色值为 0。如果 <code>inData</code> 不为类型 transferType 的基本数组，则抛出 <code>ClassCastException</code>。如果 <code>inData</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，则抛出 <code>ArrayIndexOutOfBoundsException</code>。如果此 <code>transferType</code> 不受支持，则抛出 <code>UnsupportedOperationException</code>。因为 <code>ColorModel</code> 为抽象类，所以任何实例必须是子类的实例。子类可以继承此方法的实现，并且如果子类未重写此方法，则在该子类使用除 <code>DataBuffer.TYPE_BYTE</code>、<code>DataBuffer.TYPE_USHORT</code> 或 <code>DataBuffer.TYPE_INT</code> 之外的 <code>transferType</code> 时，此方法将抛出异常。
@param inData 像素值的数组
@return 指定像素的红色分量的值。
@throws ClassCastException 如果 <code>inData</code> 不为类型 <code>transferType</code> 的基本数组
@throws ArrayIndexOutOfBoundsException 如果 <code>inData</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值
@throws UnsupportedOperationException 如果此 <code>tranferType</code> 不受此 <code>ColorModel</code> 支持

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.ColorModel.getGreen(Object inData)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定像素的绿色颜色分量，指定像素在默认的 RGB <code>ColorSpace</code>（即 sRGB）中缩放范围是 0 到 255）。如有必要，可进行颜色转换。像素值由作为对象引用传入的类型 transferType 的数据元素的数组指定。返回的值为非预先乘得的值。例如，如果预乘了 alpha，则此方法会在返回值之前除以 alpha。如果 alpha 值为 0，则绿色值为 0。如果 <code>inData</code> 不为类型 transferType 的基本数组，则抛出 <code>ClassCastException</code>。如果 <code>inData</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，则抛出 <code>ArrayIndexOutOfBoundsException</code>。如果此 <code>transferType</code> 不受支持，则抛出 <code>UnsupportedOperationException</code>。因为 <code>ColorModel</code> 为抽象类，所以任何实例必须是子类的实例。子类可以继承此方法的实现，并且如果子类未重写此方法，则在该子类使用除 <code>DataBuffer.TYPE_BYTE</code>、<code>DataBuffer.TYPE_USHORT</code> 或 <code>DataBuffer.TYPE_INT</code> 之外的 <code>transferType</code> 时，此方法将抛出异常。
@param inData 像素值的数组
@return 指定像素的绿色分量的值。
@throws <code>ClassCastException</code> 如果 <code>inData</code> 不为类型 <code>transferType</code> 的基本数组
@throws <code>ArrayIndexOutOfBoundsException</code> 如果 <code>inData</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值
@throws <code>UnsupportedOperationException</code> 如果此 <code>tranferType</code> 不受此 <code>ColorModel</code> 支持

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.ColorModel.getBlue(Object inData)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定像素的蓝颜色分量，指定像素在默认的 RGB <code>ColorSpace</code>（即 sRGB）中缩放范围是 0 到 255。如有必要，可进行颜色转换。像素值由作为对象引用传入的类型 transferType 的数据元素的数组指定。返回的值是一个非预先乘得的值。例如，如果预乘了 alpha，则此方法会在返回值之前除以 alpha。如果 alpha 值为 0，则蓝色值将为 0。如果 <code>inData</code> 不为类型 transferType 的基本数组，则抛出 <code>ClassCastException</code>。如果 <code>inData</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，则抛出 <code>ArrayIndexOutOfBoundsException</code>。如果此 <code>transferType</code> 不受支持，则抛出 <code>UnsupportedOperationException</code>。因为 <code>ColorModel</code> 为抽象类，所以任何实例必须是子类的实例。子类可以继承此方法的实现，并且如果子类未重写此方法，则在该子类使用除 <code>DataBuffer.TYPE_BYTE</code>、<code>DataBuffer.TYPE_USHORT</code> 或 <code>DataBuffer.TYPE_INT</code> 之外的 <code>transferType</code> 时，此方法将抛出异常。
@param inData 像素值的数组
@return 指定像素的蓝色分量的值。
@throws ClassCastException 如果 <code>inData</code> 不为类型 <code>transferType</code> 的基本数组
@throws ArrayIndexOutOfBoundsException 如果 <code>inData</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值
@throws UnsupportedOperationException 如果此 <code>tranferType</code> 不受此 <code>ColorModel</code> 支持

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.ColorModel.getAlpha(Object inData)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定像素（在 0 到 255 之间缩放）的 alpha 分量。像素值由作为对象引用传入的类型 transferType 的数据元素的数组指定。如果 inData 不为类型 transferType 的基本数组，则抛出 <code>ClassCastException</code>。如果 <code>inData</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，则抛出 <code>ArrayIndexOutOfBoundsException</code>。如果此 <code>transferType</code> 不受支持，则抛出 <code>UnsupportedOperationException</code>。因为 <code>ColorModel</code> 为抽象类，所以任何实例必须是子类的实例。子类可以继承此方法的实现，并且如果子类未重写此方法，则在该子类使用除 <code>DataBuffer.TYPE_BYTE</code>、<code>DataBuffer.TYPE_USHORT</code> 或 <code>DataBuffer.TYPE_INT</code> 之外的 <code>transferType</code> 时，此方法将抛出异常。
@param inData 指定的像素
@return 指定像素（从 0 到 255 缩放）的 alpha 分量。
@throws ClassCastException 如果 <code>inData</code> 不为类型 <code>transferType</code> 的基本数组
@throws ArrayIndexOutOfBoundsException 如果 <code>inData</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值
@throws UnsupportedOperationException 如果此 <code>tranferType</code> 不受此 <code>ColorModel</code> 支持

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.ColorModel.getRGB(Object inData)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回默认的 RGB 颜色模型格式中的像素的颜色/alpha 分量。如有必要，可进行颜色转换。像素值由作为对象引用传入的类型 transferType 的数据元素的数组指定。如果 inData 不为类型 transferType 的基本数组，则抛出 <code>ClassCastException</code>。如果 <code>inData</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，则抛出 <code>ArrayIndexOutOfBoundsException</code>。返回的值将是非预乘格式，例如，如果与 alpha 预先相乘，此方法会将其从颜色分量中除出来（如果 alpha 值为 0，则颜色值将为 0）。
@param inData 指定像素
@return 该指定像素的颜色和 alpha 分量。
@see ColorModel#getRGBdefault

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.image.ColorModel.getDataElements(int rgb, Object pixel)
<!-- END KEY -->
<!-- BEGIN DATA -->
在默认 RGB 颜色模型中给定整数像素的表示形式的情况下，返回此 <code>ColorModel</code> 中像素的数据元素数组的表示形式。然后将此数组传递到 {@link WritableRaster} 对象的 {@link WritableRaster#setDataElements} 方法。如果像素变量为 <code>null</code>，则分配一个新数组。如果 <code>pixel</code> 不为 <code>null</code>，则它必须是类型 <code>transferType</code> 的基本数组；否则将抛出 <code>ClassCastException</code>。如果 <code>pixel</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，则抛出 <code>ArrayIndexOutOfBoundsException</code>。返回该像素数组。如果此 <code>transferType</code> 不受支持，则抛出 <code>UnsupportedOperationException</code>。因为 <code>ColorModel</code> 为抽象类，所以任何实例都是子类的实例。子类必须重写此方法，因为此抽象类中的实现抛出了 <code>UnsupportedOperationException</code>。
@param rgb 默认 RGB 颜色模式中的整数像素表示形式
@param pixel 指定像素
@return 此 <code>ColorModel</code> 中指定像素的数组表示形式。
@throws ClassCastException 如果 <code>pixel</code> 不为类型 <code>transferType</code> 的基本数组
@throws ArrayIndexOutOfBoundsException 如果 <code>pixel</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值
@throws UnsupportedOperationException 如果此方法不受此 <code>ColorModel</code> 支持
@see WritableRaster#setDataElements
@see SampleModel#setDataElements

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.awt.image.ColorModel.getComponents(int pixel, int[] components, int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在 <code>ColorModel</code> 中已给定像素的非标准化颜色/alpha 分量。将像素值指定为 <code>int</code>。如果此 <code>ColorModel</code> 的像素值不便于用单个 <code>int</code> 表示，或者此 <code>ColorModel</code> 的颜色分量值不便于以非标准化形式表示，则将抛出 <code>IllegalArgumentException</code>。例如，此方法可用于检索 <code>DirectColorModel</code> 中特定像素值的分量。如果分量数组为 <code>null</code>，则分配一个新数组。该分量数组将被返回。将颜色/alpha 分量存储在以 <code>offset</code> 开头的 component 数组中，即便此方法已分配了数组也如此。如果分量数组不为 <code>null</code>，且不是特别大，不能存储以偏移量开头的所有颜色和 alpha 分量，则抛出 <code>ArrayIndexOutOfBoundsException</code>。因为 <code>ColorModel</code> 为抽象类，所以任何实例都是子类的实例。子类必须重写此方法，因为此抽象类中的实现抛出了 <code>UnsupportedOperationException</code>。
@param pixel 指定的像素
@param components 收到指定像素的颜色和 alpha 分量的数组
@param offset 开始存储颜色和 alpha 分量时的 <code>components</code> 数组的偏移量
@return 包含以指定偏移量开头的指定像素的颜色和 alpha 分量的数组。
@throws UnsupportedOperationException 如果此方法不受此 <code>ColorModel</code> 支持

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.awt.image.ColorModel.getComponents(Object pixel, int[] components, int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在此 <code>ColorModel</code> 中已给定像素的非标准化颜色/alpha 分量的数组。像素值由作为对象引用传入的类型 transferType 的数据元素的数组指定。如果 <code>pixel</code> 不为类型 transferType 的基本数组，则抛出 <code>ClassCastException</code>。如果此 <code>ColorModel</code> 的颜色分量值不方便以非标准化形式表示，则抛出 <code>IllegalArgumentException</code>。如果 <code>pixel</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，则抛出 <code>ArrayIndexOutOfBoundsException</code>。此方法可用于获取任何 <code>ColorModel</code> 中的指定像素值的分量。如果分量数组为 <code>null</code>，则分配一个新数组。该分量数组将被返回。将颜色/alpha 分量存储在以 <code>offset</code> 开头的 <code>components</code> 数组中，即便此方法已分配了数组也如此。如果分量数组不为 <code>null</code>，且不是特别大，不能存储所有颜色和 alpha 分量（以 <code>offset</code>开头），则抛出 <code>ArrayIndexOutOfBoundsException</code>。因为 <code>ColorModel</code> 为抽象类，所以任何实例都是子类的实例。子类必须重写此方法，因为此抽象类中的实现抛出了 <code>UnsupportedOperationException</code>。
@param pixel 指定像素
@param components 收到该指定像素的颜色和 alpha 分量的数组
@param offset 在其处开始存储指定像素的颜色和 alpha 分量的 <code>components</code> 数组的索引
@return 包含以指定偏移量开头的指定像素的颜色和 alpha 分量的数组。
@throws UnsupportedOperationException 如果此方法不受此 <code>ColorModel</code> 支持

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.awt.image.ColorModel.getUnnormalizedComponents(float[] normComponents, int normOffset, int[] components, int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->
在已给定标准化分量数组的情况下，返回以非标准化形式存在的所有颜色/alpha 分量的数组。非标准化分量为 0 和 2<sup>n</sup> - 1 之间的无符号整数值，其中 n 为特定分量的位数。标准化分量为 float 值，这些值介于此 <code>ColorModel</code> 的 <code>ColorSpace</code> 对象指定的每个分量的最小值和最大值之间。如果此 <code>ColorModel</code> 的颜色分量值不便于用非标准化形式表示，则抛出 <code>IllegalArgumentException</code>。如果 <code>components</code> 数组为 <code>null</code>，则分配一个新数组。该 <code>components</code> 数组将被返回。将颜色/alpha 分量存储在以 <code>offset</code> 开头的 <code>components</code> 数组中，即便此方法已分配了数组也如此。如果 <code>components</code> 数组不为 <code>null</code>，且不是特别大，不能存储所有颜色和 alpha 分量（以 <code>offset</code> 开头），则抛出 <code>ArrayIndexOutOfBoundsException</code>。如果 <code>normComponents</code> 数组不是特别大，不能存储以 <code>normOffset</code> 开头的所有颜色和 alpha 分量，则抛出 <code>IllegalArgumentException</code>。
@param normComponents 包含标准化分量的数组
@param normOffset 开始检索标准化分量的 <code>normComponents</code> 数组的偏移量
@param components 从 <code>normComponents</code> 检索分量的数组
@param offset 在其处开始存储 <code>normComponents</code> 的 <code>components</code> 的索引
@return 包含非标准化颜色和 alpha 分量的数组。
@throws IllegalArgumentException 如果此 <CODE>ColorModel</CODE> 的分量值不便于用非标准化形式表示。
@throws IllegalArgumentException 如果 <code>normComponents</code> 的长度减去 <code>normOffset</code> 小于 <code>numComponents</code>
@throws UnsupportedOperationException 如果此 <code>ColorModel</code> 的构造方法调用了 <code>super(bits)</code> 构造方法，但未重写此方法。参见构造方法，{@link #ColorModel(int)}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[] java.awt.image.ColorModel.getNormalizedComponents(int[] components, int offset, float[] normComponents, int normOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定标准化分量数组的情况下，返回以标准化形式存在的所有颜色/alpha 分量的数组。非标准化分量为 0 和 2<sup>n</sup> - 1 之间的无符号整数值，其中 n 为特定分量的位数。标准化分量为 float 值，这些值介于此 <code>ColorModel</code> 的 <code>ColorSpace</code> 对象指定的每个分量的最小值和最大值之间。如果此 <code>ColorModel</code> 的颜色分量值不便于用非标准化形式表示，则抛出 <code>IllegalArgumentException</code>。如果 <code>normComponents</code> 数组为 <code>null</code>，则分配一个新数组。该 <code>normComponents</code> 数组将被返回。颜色/alpha 分量存储在以 <code>normOffset</code> 开头的 <code>normComponents</code> 数组中，即使此方法已分配了数组也如此。如果 <code>normComponents</code> 数组不为 <code>null</code>，且不是特别大，不能存储所有颜色和 alpha 分量（以 <code>normOffset</code> 开头），则抛出 <code>ArrayIndexOutOfBoundsException</code>。如果 <code>components</code> 数组不是特别大，不能存储以 <code>offset</code> 开头的所有颜色和 alpha 分量，则抛出 <code>IllegalArgumentException</code>。
 <p>
因为 <code>ColorModel</code> 为抽象类，所以任何实例都是子类的实例。此抽象类中该方法的默认实现假定此类的分量值可以方便地以非标准化的形式表示。因此，可能有不支持非标准化形式的实例的子类必须重写此方法。
@param components 包含非标准化分量的数组
@param offset 开始检索非标准化分量的 <code>components</code> 数组的偏移量
@param normComponents 收到标准化分量的数组
@param normOffset 在其处开始存储标准化分量的 <code>normComponents</code> 的索引
@return 包含标准化颜色和 alpha 分量的数组。
@throws IllegalArgumentException 如果此 <CODE>ColorModel</CODE> 的分量值不便于用非标准化形式表示。
@throws UnsupportedOperationException 如果此 <code>ColorModel</code> 的构造方法调用了 <code>super(bits)</code> 构造方法，但未重写此方法。参见构造方法，{@link #ColorModel(int)}。
@throws UnsupportedOperationException 如果此方法不能确定每个分量的位数

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.ColorModel.getDataElement(int[] components, int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->
在已给定非标准化颜色/alpha 分量的数组的情况下，返回此 <code>ColorModel</code> 中以 <code>int</code> 类型表示的像素值。如果此 <code>ColorModel</code> 中的分量值不便于用单个 <code>int</code> 表示，或者此 <code>ColorModel</code> 的颜色分量值不便于用非标准化形式表示，则此方法将抛出 <code>IllegalArgumentException</code>。如果 <code>components</code> 数组不是特别大，不能存储所有以 <code>offset</code> 开始的颜色和 alpha 分量，则抛出 <code>ArrayIndexOutOfBoundsException</code>。因为 <code>ColorModel</code> 为抽象类，所以任何实例都是子类的实例。子类必须重写此方法，因为此抽象类中的实现抛出了 <code>UnsupportedOperationException</code>。
@param components 非标准化的颜色和 alpha 分量的数组
@param offset 开始检索颜色和 alpha 分量处的 <code>components</code> 的索引
@return 此 <code>ColorModel</code> 中与指定分量相对应的 <code>int</code> 像素值。
@throws IllegalArgumentException 如果此 <code>ColorModel</code> 的像素值不便于用单个 <code>int</code> 表示
@throws IllegalArgumentException 如果此 <code>ColorModel</code> 的分量值不便于用非标准化形式表示
@throws ArrayIndexOutOfBoundsException 如果 <code>components</code> 数组不是特别大，不能存储以 <code>offset</code> 开头的所有颜色和 alpha 分量
@throws UnsupportedOperationException 如果此方法不受此 <code>ColorModel</code> 支持

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.image.ColorModel.getDataElements(int[] components, int offset, Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
在已给定非标准化颜色/alpha 分量的情况下，返回此 <code>ColorModel</code> 中像素的数据元素数组表示形式。然后可以将此数组传递给 <code>WritableRaster</code> 对象的 <code>setDataElements</code> 方法。如果此 <code>ColorModel</code> 的颜色分量值不便于用非标准化形式表示，则此方法将抛出 <code>IllegalArgumentException</code>。如果 <code>components</code> 数组不是特别大，不能存储所有以 <code>offset</code> 开始的颜色和 alpha 分量，则抛出 <code>ArrayIndexOutOfBoundsException</code>。如果 <code>obj</code> 变量为 <code>null</code>，则分配一个新数组。如果 <code>obj</code> 不为 <code>null</code>，则它必须为类型 transferType 的基本数组；否则将抛出 <code>ClassCastException</code>。如果 <code>obj</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，则抛出 <code>ArrayIndexOutOfBoundsException</code>。因为 <code>ColorModel</code> 为抽象类，所以任何实例都是子类的实例。子类必须重写此方法，因为此抽象类中的实现抛出了 <code>UnsupportedOperationException</code>。
@param components 非标准化的颜色和 alpha 分量的数组
@param offset 开始检索颜色和 alpha 分量处的 <code>components</code> 的索引
@param obj 表示颜色和 alpha 分量的数组的 <code>Object</code>
@return 表示颜色和 alpha 分量的数组的 <code>Object</code>。
@throws ClassCastException 如果 <code>obj</code> 不为类型 <code>transferType</code> 的基本数组
@throws ArrayIndexOutOfBoundsException 如果 <code>obj</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，或者 <code>components</code> 数组不是特别大，不能存储以 <code>offset</code> 开头的所有颜色和 alpha 分量
@throws IllegalArgumentException 如果此 <code>ColorModel</code> 的分量值不便于用非标准化形式表示
@throws UnsupportedOperationException 如果此方法不受此 <code>ColorModel</code> 支持
@see WritableRaster#setDataElements
@see SampleModel#setDataElements

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.ColorModel.getDataElement(float[] normComponents, int normOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
在已给定标准化颜色/alpha 分量的数组的情况下，返回以 <code>int</code> 类型表示在此 <code>ColorModel</code> 中的像素值。如果此 <code>ColorModel</code> 的像素值不便于用单个 <code>int</code>，则此方法将抛出 <code>IllegalArgumentException</code>。如果 <code>normComponents</code> 数组不是特别大，不能存储所有以 <code>normOffset</code> 开头的颜色和 alpha 分量，则抛出 <code>ArrayIndexOutOfBoundsException</code>。因为 <code>ColorModel</code> 为抽象类，所以任何实例都是子类的实例。此抽象类中该方法的默认实现先从标准化形式转换到非标准化形式，然后再调用 <code>getDataElement(int[], int)</code>。可能有不支持非标准化形式的实例的子类必须重写此方法。
@param normComponents 标准化颜色和 alpha 分量的数组
@param normOffset 开始检索颜色和 alpha 分量的 <code>normComponents</code> 的索引
@return 此 <code>ColorModel</code> 中对应于指定分量的 <code>int</code> 像素值。
@throws IllegalArgumentException 如果此 <code>ColorModel</code> 的像素值不便于用单个 <code>int</code> 表示
@throws ArrayIndexOutOfBoundsException 如果 <code>normComponents</code> 数组不是特别大，不能存储以 <code>normOffset</code> 开头的所有颜色和 alpha 分量
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.image.ColorModel.getDataElements(float[] normComponents, int normOffset, Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
在已给定标准化颜色/alpha 分量的数组的情况下，返回此 <code>ColorModel</code> 中像素的数据元素数组表示形式。然后可以将此数组传递给 <code>WritableRaster</code> 对象的 <code>setDataElements</code> 方法。如果 <code>normComponents</code> 数组不是特别大，不能存储所有以 <code>normOffset</code> 开头的颜色和 alpha 分量，则抛出 <code>ArrayIndexOutOfBoundsException</code>。如果 <code>obj</code> 变量为 <code>null</code>，则分配一个新数组。如果 <code>obj</code> 不为 <code>null</code>，则它必须为类型 transferType 的基本数组；否则将抛出 <code>ClassCastException</code>。如果 <code>obj</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，则抛出 <code>ArrayIndexOutOfBoundsException</code>。因为 <code>ColorModel</code> 为抽象类，所以任何实例都是子类的实例。此抽象类中该方法的默认实现先从标准化形式转换到非标准化形式，然后再调用 <code>getDataElement(int[], int, Object)</code>。可能有不支持非标准化形式的实例的子类必须重写此方法。
@param normComponents 标准化颜色和 alpha 分量的数组
@param normOffset 开始检索颜色和 alpha 分量的 <code>normComponents</code> 的索引
@param obj 保存返回的像素的基本数据数组
@return 为像素的基本数据数组表示形式的 <code>Object</code>
@throws ClassCastException 如果 <code>obj</code> 不为类型 <code>transferType</code> 的基本数组
@throws ArrayIndexOutOfBoundsException 如果 <code>obj</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，或者 <code>normComponents</code> 数组不是特别大，不能存储以 <code>normOffset</code> 开头的所有颜色和 alpha 分量
@see WritableRaster#setDataElements
@see SampleModel#setDataElements
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[] java.awt.image.ColorModel.getNormalizedComponents(Object pixel, float[] normComponents, int normOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回已在 <code>ColorModel</code> 中给定了像素的标准化形式颜色/alpha 分量的数组。像素值由作为对象引用传入的类型 transferType 的数据元素的数组指定。如果像素不为类型 transferType 的基本数组，则抛出 <code>ClassCastException</code>。如果 <code>pixel</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，则抛出 <code>ArrayIndexOutOfBoundsException</code>。标准化分量为 float 值，这些值介于此 <code>ColorModel</code> 的 <code>ColorSpace</code> 对象指定的每个分量的最小值和最大值之间。如果 <code>normComponents</code> 数组为 <code>null</code>，则分配一个新数组。该 <code>normComponents</code> 数组将被返回。颜色/alpha 分量存储在以 <code>normOffset</code> 开头的 <code>normComponents</code> 数组中，即使此方法已分配了数组也如此。如果 <code>normComponents</code> 数组不为 <code>null</code>，且不是特别大，不能存储所有颜色和 alpha 分量（以 <code>normOffset</code> 开头），则抛出 <code>ArrayIndexOutOfBoundsException</code>。因为 <code>ColorModel</code> 为抽象类，所以任何实例都是子类的实例。此抽象类中该方法的默认实现先使用 <code>getComponents(Object, int[], int)</code> 检索以非标准化形式存在的颜色和 alpha 分量，然后再调用 <code>getNormalizedComponents(int[], int, float[], int)</code>。可能有不支持非标准化形式的实例的子类必须重写此方法。
@param pixel 指定像素
@param normComponents 检索标准化分量的数组
@param normOffset 在其处开始存储标准化分量的 <code>normComponents</code> 数组的偏移量
@return 包含标准化颜色和 alpha 分量的数组。
@throws ClassCastException 如果 <code>pixel</code> 不为类型 transferType 的基本数组
@throws ArrayIndexOutOfBoundsException 如果 <code>normComponents</code> 不是特别大，不能存储以 <code>normOffset</code> 开头的所有颜色和 alpha 分量
@throws ArrayIndexOutOfBoundsException 如果 <code>pixel</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值。
@throws UnsupportedOperationException 如果此 <code>ColorModel</code> 的构造方法调用了 <code>super(bits)</code> 构造方法，但未重写此方法。参见构造方法，{@link #ColorModel(int)}。
@throws UnsupportedOperationException 如果此方法不能确定每个分量的位数
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.image.ColorModel.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试指定的 <code>Object</code> 是否是 <code>ColorModel</code> 的实例，以及它是否等于此 <code>ColorModel</code>。
@param obj 用来进行相等性测试的 <code>Object</code>
@return 如果指定的 <code>Object</code> 为 <code>ColorModel</code> 的实例，且等于此 <code>ColorModel</code>，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.ColorModel.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 ColorModel 的哈希码。

@return    此 ColorModel 的哈希码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.awt.color.ColorSpace java.awt.image.ColorModel.getColorSpace()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>ColorModel</code> 相关的 <code>ColorSpace</code>。
@return 此 <code>ColorModel</code> 的 <code>ColorSpace</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.ColorModel java.awt.image.ColorModel.coerceData(WritableRaster raster, boolean isAlphaPremultiplied)
<!-- END KEY -->
<!-- BEGIN DATA -->
强制使光栅数据与在 <code>isAlphaPremultiplied</code> 变量中指定的状态匹配，假定当前该数据已由此 <code>ColorModel</code> 正确描述。可以将颜色 raster 数据乘以或除以 alpha，如果该数据处于正确状态，则不执行任何操作。如果需要对该数据强制匹配，则此方法还将相应地返回一个带有 <code>isAlphaPremultiplied</code> 标志集的 <code>ColorModel</code> 的实例。如果此方法不受 <code>ColorModel</code> 支持，则它将抛出 <code>UnsupportedOperationException</code>。因为 <code>ColorModel</code> 为抽象类，所以任何实例都是子类的实例。子类必须重写此方法，因为此抽象类中的实现抛出了 <code>UnsupportedOperationException</code>。
@param raster <code>WritableRaster</code> 数据
@param isAlphaPremultiplied 如果与 alpha 预乘，则返回 <code>true</code>；否则将返回 <code>false</code>
@return 表示被强制匹配数据的 <code>ColorModel</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.image.ColorModel.isCompatibleRaster(Raster raster)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>raster</code> 与此 <code>ColorModel</code> 兼容，则返回 <code>true</code>，如果不兼容，则返回 <code>false</code>。因为 <code>ColorModel</code> 为抽象类，所以任何实例都是子类的实例。子类必须重写此方法，因为此抽象类中的实现抛出了 <code>UnsupportedOperationException</code>。
@param raster 进行兼容性测试的 {@link Raster} 对象
@return <code>true</code> 如果 <code>raster</code> 与此 <code>ColorModel</code> 兼容。
@throws UnsupportedOperationException 如果此方法不是为此 <code>ColorModel</code> 实现的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.WritableRaster java.awt.image.ColorModel.createCompatibleWritableRaster(int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
用指定宽度和高度创建的 <code>WritableRaster</code>，具有与此 <code>ColorModel</code> 兼容的数据布局 (<code>SampleModel</code>)。因为 <code>ColorModel</code> 为抽象类，所以任何实例都是子类的实例。子类必须重写此方法，因为此抽象类中的实现抛出了 <code>UnsupportedOperationException</code>。
@param w 应用到新 <code>WritableRaster</code> 的宽度
@param h 应用到新 <code>WritableRaster</code> 的高度
@return 具有指定宽度和高度的 <code>WritableRaster</code> 对象。
@throws UnsupportedOperationException 如果此方法不受此 <code>ColorModel</code> 支持
@see WritableRaster
@see SampleModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.SampleModel java.awt.image.ColorModel.createCompatibleSampleModel(int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
用指定宽度和高度创建的 <code>SampleModel</code>，具有与此 <code>ColorModel</code> 兼容的数据布局。因为 <code>ColorModel</code> 为抽象类，所以任何实例都是子类的实例。子类必须重写此方法，因为此抽象类中的实现抛出了 <code>UnsupportedOperationException</code>。
@param w 应用于新的 <code>SampleModel</code> 的宽度
@param h 应用于新的 <code>SampleModel</code> 的高度
@return 具有指定宽度和高度的 <code>SampleModel</code> 对象。
@throws UnsupportedOperationException 如果此方法不受此 <code>ColorModel</code> 支持
@see SampleModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.image.ColorModel.isCompatibleSampleModel(SampleModel sm)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查 <code>SampleModel</code> 是否与此 <code>ColorModel</code> 兼容。因为 <code>ColorModel</code> 为抽象类，所以任何实例都是子类的实例。子类必须重写此方法，因为此抽象类中的实现抛出了 <code>UnsupportedOperationException</code>。
@param sm 指定的 <code>SampleModel</code>
@return 如果指定的 <code>SampleModel</code> 与此 <code>ColorModel</code> 兼容，则返回 <code>true</code>；否则返回 <code>false</code>。
@throws UnsupportedOperationException 如果此方法不受此 <code>ColorModel</code> 支持
@see SampleModel 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ColorModel.finalize()
<!-- END KEY -->
<!-- BEGIN DATA -->
一旦不再引用此 <code>ColorModel</code>，就要释放与此 <code>ColorModel</code> 相关的系统资源。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.WritableRaster java.awt.image.ColorModel.getAlphaRaster(WritableRaster raster)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示图像（从输入 <code>Raster</code> 中提取）的 alpha 通道的 <code>Raster</code>，除非此 <code>ColorModel</code> 的像素值将颜色和 alpha 信息表示为独立的空间 band（如 {@link ComponentColorModel} 和 <code>DirectColorModel</code>）。此方法假定与此类 <code>ColorModel</code> 相关的 <code>Raster</code> 对象将 alpha 的 band（如果存在）存储为图像数据的最后一个 band。如果不存在与此 <code>ColorModel</code> 相关的独立空间 alpha 通道，则返回 <code>null</code>。如果在查询表中有一个具有 alpha 的 <code>IndexColorModel</code>，则此方法将返回 <code>null</code>，因为没有空间上截然不同的 alpha 通道。此方法将创建新的 <code>Raster</code>（但将共享数据数组）。因为 <code>ColorModel</code> 为抽象类，所以任何实例都是子类的实例。子类必须重写此方法，以获取除返回 <code>null</code> 之外的任何行为，因为此抽象类中的实现返回 <code>null</code>。
@param raster 指定的 <code>Raster</code>
@return 表示图像（从指定的 <code>Raster</code> 中得到）的 alpha 通道的 <code>Raster</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.image.ColorModel.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>ColorModel</code> 对象的内容的 <code>String</code> 表示形式。
@return 表示此 <code>ColorModel</code> 对象的内容的 <code>String</code>。

<!-- END DATA -->
