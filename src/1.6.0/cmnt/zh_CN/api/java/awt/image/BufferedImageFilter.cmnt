<!-- BEGIN KEY -->
public class java.awt.image.BufferedImageFilter extends java.awt.image.ImageFilter implements java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>BufferedImageFilter</code> 类是 <code>ImageFilter</code> 的子类，提供一种使用单一源图像/单一目标图像操作符 ({@link BufferedImageOp}) 的简单方式来过滤 Image Producer/Consumer/Observerto 范例中的 <code>BufferedImage</code>。这些图像操作符的例子有：{@link ConvolveOp}、{@link AffineTransformOp} 和 {@link LookupOp}。

@see ImageFilter
@see BufferedImage
@see BufferedImageOp
@version 10 Feb 1997

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.BufferedImageFilter(BufferedImageOp op)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定单一源图像/单一目标图像操作符的 <code>BufferedImageFilter</code>。
@param op 用于过滤 <code>BufferedImage</code> 的指定 <code>BufferedImageOp</code> 
@throws NullPointerException 如果 op 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.BufferedImageOp java.awt.image.BufferedImageFilter.getBufferedImageOp()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>BufferedImageOp</code>。
@return 此 <code>BufferedImageFilter</code> 的操作符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.BufferedImageFilter.setDimensions(int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤 {@link ImageConsumer} 接口的 {@link ImageConsumer#setDimensions(int, int) setDimensions } 方法中提供的信息。
 <p>
注：此方法将由 <code>Image</code>（其像素正被过滤）的 {@link ImageProducer} 调用。使用此类从图像中获得像素的开发人员应该避免直接调用此方法，因为该操作可能导致与获得请求像素相关的一些问题。
 <p>
@param width 要设置此 <code>BufferedImageFilter</code> 的宽度
@param height 要设置此 <code>BufferedImageFilter</code> 的高度
@see ImageConsumer#setDimensions

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.BufferedImageFilter.setColorModel(ColorModel model)
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤 <code>ImageConsumer</code> 接口的 {@link ImageConsumer#setColorModel(ColorModel) setColorModel} 方法提供的信息。
 <p>
如果 <code>model</code> 为 <code>null</code>，则此方法清除 <code>BufferedImageFilter</code> 的当前 <code>ColorModel</code>。
 <p>
注：此方法将由 <code>Image</code>（其像素正被过滤）的 <code>ImageProducer</code> 调用。使用此类从图像中获得像素的开发人员应该避免直接调用此方法，因为该操作可能导致与获得请求像素相关的一些问题。
@param model 此 <code>BufferedImageFilter</code> 的 <code>ColorModel</code> 将被设置为该 {@link ColorModel}
@see ImageConsumer#setColorModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.BufferedImageFilter.setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize)
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤 <code>ImageConsumer</code> 接口（采用字节数组）的 <code>setPixels</code> 方法中提供的信息。
 <p>
注：此方法将由 <code>Image</code>（其像素正被过滤）的 <code>ImageProducer</code> 调用。使用此类从图像中获得像素的开发人员应该避免直接调用此方法，因为该操作可能导致与获得请求像素相关的一些问题。
@throws IllegalArgumentException 如果 width 或 height 小于零。
@see ImageConsumer#setPixels(int, int, int, int, ColorModel, byte[], int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.BufferedImageFilter.setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤 <code>ImageConsumer</code> 接口（采用整数数组）的 <code>setPixels</code> 方法中提供的信息。
 <p>
注：此方法将由 <code>Image</code>（其像素正被过滤）的 <code>ImageProducer</code> 调用。使用此类从图像中获得像素的开发人员应该避免直接调用此方法，因为该操作可能导致与获得请求像素相关的一些问题。
@throws IllegalArgumentException 如果 width 或 height 小于零。
@see ImageConsumer#setPixels(int, int, int, int, ColorModel, int[], int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.BufferedImageFilter.imageComplete(int status)
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤 <code>ImageConsumer</code> 接口的 <code>imageComplete</code> 方法中提供的信息。
 <p>
注：此方法将由 <code>Image</code>（其像素正被过滤）的 <code>ImageProducer</code> 调用。使用此类从图像中获得像素的开发人员应该避免直接调用此方法，因为该操作可能导致与获得请求像素相关的一些问题。
@param status 图像加载的状态
@throws ImagingOpException 如果调用与此实例相关的 <code>BufferedImageOp</code> 的过滤器方法时出现问题。
@see ImageConsumer#imageComplete

<!-- END DATA -->
