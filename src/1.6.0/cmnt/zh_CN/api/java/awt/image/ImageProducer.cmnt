<!-- BEGIN KEY -->
public interface java.awt.image.ImageProducer
<!-- END KEY -->
<!-- BEGIN DATA -->
可为 Image 生成图像数据的对象的接口。每幅图像都包含一个用于在需要时（例如在缩放 Image 的新大小时，或者在请求 Image 的宽度或高度时）重构图像的 ImageProducer。

@see ImageConsumer

@version	1.20 12/19/03
@author 	Jim Graham

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ImageProducer.addConsumer(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
为了在稍后的 <code>Image</code> 重构期间访问图像数据，向 <code>ImageProducer</code> 注册一个 <code>ImageConsumer</code>。<code>ImageProducer</code> 可能自行决定是立即开始使用 <code>ImageConsumer</code> 接口向使用者传递图像数据，还是通过调用 <code>startProduction</code> 方法触发下一个可用图像的重构。
@param ic 指定的 <code>ImageConsumer</code>
@see #startProduction

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.image.ImageProducer.isConsumer(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定指定的 <code>ImageConsumer</code> 对象目前是否已向此 <code>ImageProducer</code> 注册为其使用者之一。
@param ic 指定的 <code>ImageConsumer</code>
@return 如果指定的 <code>ImageConsumer</code> 已向此 <code>ImageProducer</code> 注册，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ImageProducer.removeConsumer(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
从目前已注册以接收图像数据的使用者列表中移除指定的 <code>ImageConsumer</code> 对象。移除目前尚未注册的使用者不被认为是错误。一旦移除使用者后，<code>ImageProducer</code> 就应停止向此使用者发送数据。
@param ic 指定的 <code>ImageConsumer</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ImageProducer.startProduction(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的 <code>ImageConsumer</code> 对象注册为使用者，并立即开始图像数据的重构，然后这些图像数据将传递到此使用者和已经向该生产者注册的所有其他使用者。此方法与 addConsumer 方法不同，因为它应该尽快触发图像数据的重构。
@param ic 指定的 <code>ImageConsumer</code>
@see #addConsumer

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ImageProducer.requestTopDownLeftRightResend(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
代表 <code>ImageConsumer</code> 请求 <code>ImageProducer</code> 尝试再次以 TOPDOWNLEFTRIGHT 的顺序重新发送图像数据，从而可以使用依赖于按顺序接收像素的高质量转换算法以生成更佳的图像输出。如果 <code>ImageProducer</code> 无法按该顺序重新发送数据，则它可以忽略此调用。如果可以重新发送数据，则 <code>ImageProducer</code> 应该进行响应，方法是执行下列最小的 <code>ImageConsumer</code> 方法调用集：
 <pre>
	ic.setHints(TOPDOWNLEFTRIGHT | &lt; otherhints &gt;);
	ic.setPixels(...);	// As many times as needed
	ic.imageComplete();
 </pre>
@param ic 指定的 <code>ImageConsumer</code>
@see ImageConsumer#setHints

<!-- END DATA -->
