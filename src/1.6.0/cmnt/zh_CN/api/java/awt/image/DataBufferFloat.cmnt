<!-- BEGIN KEY -->
public final class java.awt.image.DataBufferFloat extends java.awt.image.DataBuffer
<!-- END KEY -->
<!-- BEGIN DATA -->
此类扩展了 <code>DataBuffer</code>，并在内部以 <code>float</code> 形式存储数据。

@see DataBuffer
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.DataBufferFloat(int size)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定大小的且基于 <code>float</code> 的 <code>DataBuffer</code>。

@param size DataBuffer 中的元素数量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.DataBufferFloat(int size, int numBanks)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定数量的存储单元（这些存储单元都指定了大小）且基于 <code>float</code> 的 <code>DataBuffer</code>。

@param size <code>DataBuffer</code> 的每个存储单元中的元素数量。
@param numBanks <code>DataBuffer</code> 中存储单元的数量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.DataBufferFloat(float[] dataArray, int size)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定数据数组且基于 <code>float</code> 的 <code>DataBuffer</code>。只有前几个 <code>size</code> 元素可供此 <code>DataBuffer</code> 使用。该数组必须足够大，能够存储 <code>size</code> 元素。

@param dataArray 用作此 <code>DataBuffer</code> 的第一个且是惟一存储单元的 <code>float</code> 的数组。
@param size 要使用的数组的元素数量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.DataBufferFloat(float[] dataArray, int size, int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定数据数组且基于 <code>float</code> 的 <code>DataBuffer</code>。只有 <code>offset</code> 和 <code>offset + size - 1</code> 之间的元素可供此 <code>DataBuffer</code> 使用。该数组必须足够大，能够存储 <code>offset + size</code> 元素。

@param dataArray 用作此 <code>DataBuffer</code> 的第一个且是惟一存储单元的 <code>float</code> 的数组。
@param size 要使用的数组的元素数量。
@param offset 要使用的数组的第一个元素的偏移量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.DataBufferFloat(float[][] dataArray, int size)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定数据数组且基于 <code>float</code> 的 <code>DataBuffer</code>。只有每个数组的前几个 <code>size</code> 元素可供此 <code>DataBuffer</code> 使用。存储单元的数量将等于 <code>dataArray.length</code>。

@param dataArray 用作此 <code>DataBuffer</code> 存储单元的 <code>float</code> 数组的数组。
@param size 要使用的每个数组的元素数量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.DataBufferFloat(float[][] dataArray, int size, int[] offsets)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定数据数组、大小和每存储单元偏移量且基于 <code>float</code> 的 <code>DataBuffer</code>。存储单元的数量等于 <code>dataArray.length</code>。每个数组至少必须和 <code>size</code> 加上相应的偏移量大小相同。每个数据数组的偏移量数组中必须有一个项。

@param dataArray 用作此 <code>DataBuffer</code> 存储单元的 <code>float</code> 数组的数组。
@param size 要使用的每个数组的元素数量。
@param offsets 整数偏移量数组，每个存储单元一个。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[] java.awt.image.DataBufferFloat.getData()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回默认（第一个）<code>float</code> 数据数组。
@return 第一个 float 数据数组。     

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[] java.awt.image.DataBufferFloat.getData(int bank)
<!-- END KEY -->
<!-- BEGIN DATA -->

返回指定存储单元的数据数组。
@param bank 数据数组
@return 由 <code>bank</code> 指定的数据数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[][] java.awt.image.DataBufferFloat.getBankData()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回所有存储单元的数据数组。
@return 此数据缓冲区中的所有数据数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.DataBufferFloat.getElem(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>int</code> 类型返回第一个（默认）存储单元中所请求的数据数组元素。

@param i 所需数据数组元素。

@return <code>int</code> 类型的数据项。
@see #setElem(int, int)
@see #setElem(int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.DataBufferFloat.getElem(int bank, int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>int</code> 类型返回指定存储单元中所请求的数据数组元素。

@param bank 存储单元的数量。
@param i 所需数据数组元素。

@return <code>int</code> 类型的数据项。
@see #setElem(int, int)
@see #setElem(int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.DataBufferFloat.setElem(int i, int val)
<!-- END KEY -->
<!-- BEGIN DATA -->
将第一个（默认）存储单元中所请求的数据数组元素设置为给定的 <code>int</code>。

@param i 所需数据数组元素。
@param val 要设置的值。
@see #getElem(int)
@see #getElem(int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.DataBufferFloat.setElem(int bank, int i, int val)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定存储单元中所请求的数据数组元素设置为给定的 <code>int</code>。

@param bank 存储单元的数量。
@param i 所需数据数组元素。
@param val 要设置的值。
@see #getElem(int)
@see #getElem(int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.image.DataBufferFloat.getElemFloat(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>float</code> 类型返回第一个（默认）存储单元中所请求的数据数组元素。

@param i 所需数据数组元素。

@return <code>float</code> 类型的数据项。
@see #setElemFloat(int, float)
@see #setElemFloat(int, int, float)

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.image.DataBufferFloat.getElemFloat(int bank, int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>float</code> 类型返回指定存储单元中所请求的数据数组元素。

@param bank 存储单元的数量。
@param i 所需数据数组元素。

@return <code>float</code> 类型的数据项。
@see #setElemFloat(int, float)
@see #setElemFloat(int, int, float)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.DataBufferFloat.setElemFloat(int i, float val)
<!-- END KEY -->
<!-- BEGIN DATA -->
将第一个（默认）存储单元中所请求的数据数组元素设置为给定的 <code>float</code>。

@param i 所需数据数组元素。
@param val 要设置的值。
@see #getElemFloat(int)
@see #getElemFloat(int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.DataBufferFloat.setElemFloat(int bank, int i, float val)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定存储单元中所请求的数据数组元素设置为给定的 <code>float</code>。

@param bank 存储单元的数量。
@param i 所需数据数组元素。
@param val 要设置的值。
@see #getElemFloat(int)
@see #getElemFloat(int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.image.DataBufferFloat.getElemDouble(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 类型返回第一个（默认）存储单元所请求的数据数组元素。

@param i 所需数据数组元素。

@return <code>double</code> 类型的数据项。
@see #setElemDouble(int, double)
@see #setElemDouble(int, int, double)

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.image.DataBufferFloat.getElemDouble(int bank, int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 类型返回指定存储单元所请求的数据数组元素。

@param bank 存储单元的数量。
@param i 所需数据数组元素。

@return <code>double</code> 类型的数据项。
@see #setElemDouble(int, double)
@see #setElemDouble(int, int, double)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.DataBufferFloat.setElemDouble(int i, double val)
<!-- END KEY -->
<!-- BEGIN DATA -->
将第一个（默认）存储单元中所请求的数据数组元素设置为给定的 <code>double</code>。

@param i 所需数据数组元素。
@param val 要设置的值。
@see #getElemDouble(int)
@see #getElemDouble(int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.DataBufferFloat.setElemDouble(int bank, int i, double val)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定存储单元中所请求的数据数组元素设置为 <code>double</code>。

@param bank 存储单元的数量。
@param i 所需数据数组元素。
@param val 要设置的值。
@see #getElemDouble(int)
@see #getElemDouble(int, int)

<!-- END DATA -->
