<!-- BEGIN KEY -->
public class java.awt.image.FilteredImageSource extends java.lang.Object implements java.awt.image.ImageProducer
<!-- END KEY -->
<!-- BEGIN DATA -->
此类是 ImageProducer 接口的一个实现，该接口使用现有的图像和过滤器对象作为参数，并使用它们为原图像的新过滤版本产生图像数据。下面的示例通过交换红色和蓝色分量来过滤图像：
 <pre>
 
	Image src = getImage(&quot;doc:///demo/images/duke/T1.gif&quot;);
	ImageFilter colorfilter = new RedBlueSwapFilter();
	Image img = createImage(new FilteredImageSource(src.getSource(),
							colorfilter));
 
 </pre>

@see ImageProducer

@version	1.28 12/19/03
@author 	Jim Graham

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.FilteredImageSource(ImageProducer orig, ImageFilter imgf)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据现有的 ImageProducer 和过滤器对象构造一个 ImageProducer 对象。
@param orig 指定的 <code>ImageProducer</code>
@param imgf 指定的 <code>ImageFilter</code>
@see ImageFilter
@see java.awt.Component#createImage

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.image.FilteredImageSource.addConsumer(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的 <code>ImageConsumer</code> 添加到对过滤图像的数据感兴趣的使用者列表。创建原 <code>ImageFilter</code> 的一个实例（使用过滤器的 <code>getFilterInstance</code> 方法），以操作指定 <code>ImageConsumer</code> 的图像数据。然后将新创建的过滤器实例传递到原 <code>ImageProducer</code> 的 <code>addConsumer</code> 方法。

 <p>
作为实现 <code>ImageProducer</code> 接口的此类的一个副作用，此方法是公共的。不应从用户代码中调用此方法，如果这样调用，则其行为是未指定的。

@param ic  过滤图像的使用者
@see ImageConsumer

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.awt.image.FilteredImageSource.isConsumer(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定一个 ImageConsumer 是否在对此图像数据感兴趣的使用者列表中。

 <p>
作为实现 <code>ImageProducer</code> 接口的此类的一个副作用，此方法是公共的。不应从用户代码中调用此方法，如果这样调用，则其行为是未指定的。

@param ic 指定的 <code>ImageConsumer</code>
@return  如果 ImageConsumer 在列表中，则返回 true；否则返回 false
@see ImageConsumer

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.image.FilteredImageSource.removeConsumer(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
从对此图像数据感兴趣的使用者列表中移除 ImageConsumer。

 <p>
作为实现 <code>ImageProducer</code> 接口的此类的一个副作用，此方法是公共的。不应从用户代码中调用此方法，如果这样调用，则其行为是未指定的。

@see ImageConsumer

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.FilteredImageSource.startProduction(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
开始生成过滤图像。如果指定的 <code>ImageConsumer</code> 还不是过滤图像的使用者，则创建原 <code>ImageFilter</code> 的一个实例（使用过滤器的 <code>getFilterInstance</code> 方法），以操作 <code>ImageConsumer</code> 的图像数据。然后将 <code>ImageConsumer</code> 的过滤器实例传递给原 <code>ImageProducer</code> 的 <code>startProduction</code> 方法。

 <p>
作为实现 <code>ImageProducer</code> 接口的此类的一个副作用，此方法是公共的。不应从用户代码中调用此方法，如果这样调用，则其行为是未指定的。

@param ic  过滤图像的使用者
@see ImageConsumer

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.FilteredImageSource.requestTopDownLeftRightResend(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
请求给定的 ImageConsumer 再次按从上到下、从左到右的顺序传递图像数据。因为保留像素顺序的能力取决于过滤器，所以该请求被传递到 ImageFilter 做进一步的处理。

 <p>
作为实现 <code>ImageProducer</code> 接口的此类的一个副作用，此方法是公共的。不应从用户代码中调用此方法，如果这样调用，则其行为是未指定的。

@see ImageConsumer

<!-- END DATA -->
