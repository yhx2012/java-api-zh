<!-- BEGIN KEY -->
public interface java.awt.image.RenderedImage
<!-- END KEY -->
<!-- BEGIN DATA -->

RenderedImage 是一个通用接口，用于包含或生成 Raster 形式图像数据的对象。图像数据可以作为单个 tile 或 tile 规则数组被存储/生成。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Vector<java.awt.image.RenderedImage> java.awt.image.RenderedImage.getSources()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回作为此 RenderedImage 直接图像数据源的 RenderedImage 向量。如果 RenderedImage 对象没有关于其直接源的信息，则此方法返回 null。如果 RenderedImage 对象没有直接源，则返回一个空向量。
@return <code>RenderedImage</code> 对象的一个 Vector。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.image.RenderedImage.getProperty(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->

从此图像的属性设置中获取一个属性。属性的设置以及它是否不可变由正在实现的类确定。如果此 RenderedImage 没有定义指定属性，则此方法返回 java.awt.Image.UndefinedProperty。
@param name 属性名
@return 由指定名称指示的属性。
@see java.awt.Image#UndefinedProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] java.awt.image.RenderedImage.getPropertyNames()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回由 {@link #getProperty(String) getProperty(String)} 识别的名称的数组，如果没有属性名被识别，则返回 <code>null</code>。
@return 包含 <code>getProperty(String)</code> 识别的所有属性名的 <code>String</code> 数组；如果没有属性名被识别，则返回 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.ColorModel java.awt.image.RenderedImage.getColorModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此图像相关的 ColorModel。所有从此图像返回的 Raster 都将该 ColorModel 作为其 ColorModel。此方法可以返回 null。
@return 此图像的 <code>ColorModel</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.SampleModel java.awt.image.RenderedImage.getSampleModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此图像相关的 SampleModel。所有从此图像返回的 Raster 都将该 SampleModel 作为其 SampleModel。
@return 此图像的 <code>SampleModel</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.RenderedImage.getWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 RenderedImage 的宽度。
@return 此 <code>RenderedImage</code> 的宽度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.RenderedImage.getHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 RenderedImage 的高度。
@return 此 <code>RenderedImage</code> 的高度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.RenderedImage.getMinX()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回 RenderedImage 的最小 X 坐标（包括）。
@return 此 <code>RenderedImage</code> 的 X 坐标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.RenderedImage.getMinY()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回 RenderedImage 的最小 Y 坐标（包括）。
@return 此 <code>RenderedImage</code> 的 Y 坐标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.RenderedImage.getNumXTiles()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 X 方向的 tile 数量。
@return  X 方向的 tile 数量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.RenderedImage.getNumYTiles()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Y 方向的 tile 数量。
@return  Y 方向的 tile 数量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.RenderedImage.getMinTileX()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回 X 方向的最小 tile 索引。
@return X 方向的最小 tile 索引。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.RenderedImage.getMinTileY()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回 Y 方向的最小 tile 索引。
@return Y 方向的最小 tile 索引。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.RenderedImage.getTileWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回 tile 的宽度，以像素为单位。所有 tile 都必须有相同的宽度。
@return tile 的宽度，以像素为单位。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.RenderedImage.getTileHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回 tile 的高度，以像素为单位。所有 tile 都必须有相同的高度。
@return tile 的高度，以像素为单位。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.RenderedImage.getTileGridXOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 tile 网格相对于原点的 X 偏移量，即 tile (0, 0) 左上角像素的 X 坐标。（注意，实际上可能不存在 tile (0, 0)。）
@return tile 网格相对于原点的 X 偏移量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.RenderedImage.getTileGridYOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 tile 网格相对于原点的 Y 偏移量，即 tile (0, 0) 左上角像素的 Y 坐标。（注意，实际上可能不存在 tile (0, 0)。）
@return tile 网格相对于原点的 Y 偏移量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.Raster java.awt.image.RenderedImage.getTile(int tileX, int tileY)
<!-- END KEY -->
<!-- BEGIN DATA -->

返回 tile (tileX, tileY)。注意，tileX 和 tileY 是 tile 数组中的索引，不是像素位置。返回的 Raster 是活动的，随图像更改而更新。
@param tileX tile 数组中请求 tile 的 X 索引
@param tileY tile 数组中请求 tile 的 Y 索引
@return 已给出指定索引的 tile。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.Raster java.awt.image.RenderedImage.getData()
<!-- END KEY -->
<!-- BEGIN DATA -->

以一个大 tile 的形式返回图像（对于基于 tile 的图像，此方法需要获取整个图像并复制全部图像数据）。返回的 Raster 是图像数据的副本，不会随图像更改而更新。
@return 以一个大 tile 的形式返回图像。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.Raster java.awt.image.RenderedImage.getData(Rectangle rect)
<!-- END KEY -->
<!-- BEGIN DATA -->

计算并返回 RenderedImage 的任意区域。返回的 Raster 是图像数据的副本，不会随图像更改而更新。
@param     rect 要返回的 RenderedImage 的区域。
@return 指定 <code>Rectangle</code> 指示的 <code>RenderedImage</code> 的区域。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.WritableRaster java.awt.image.RenderedImage.copyData(WritableRaster raster)
<!-- END KEY -->
<!-- BEGIN DATA -->

计算 RenderedImage 的任意矩形区域，并将其复制到调用者提供的 WritableRaster 中。要计算的区域根据提供的 WritableRaster 的边界确定。提供的 WritableRaster 必须有一个与此图像兼容的 SampleModel。如果 raster 为 null，则创建一个合适的 WritableRaster。
@param raster 保存图像返回部分的 WritableRaster，或者为 null。
@return 对提供的或创建的 WritableRaster 的引用。

<!-- END DATA -->
