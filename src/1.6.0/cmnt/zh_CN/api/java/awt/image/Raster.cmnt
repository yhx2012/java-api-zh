<!-- BEGIN KEY -->
public class java.awt.image.Raster extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
表示像素矩形数组的类。Raster 封装存储样本值的 DataBuffer，以及描述如何在 DataBuffer 中定位给定样本值的 SampleModel。
 <p>
Raster 定义占据特定平面矩形区域的像素值，该区域不一定包括 (0, 0)。该矩形也称为 Raster 的边界矩形，可以通过 getBounds 方法获得，由 minX、minY、width 和 height 值定义。minX 和 minY 值定义 Raster 左上角的坐标。对边界矩形外部像素的引用可能导致抛出异常，也可能导致引用与 Raster 的关联 DataBuffer 无关的元素。用户应该避免访问这种像素。
 <p>
SampleModel 描述如何将 Raster 的样本存储在 DataBuffer 的基本数组元素中。可按每个数据元素一个样本的方式存储样本（使用 PixelInterleavedSampleModel 或 BandedSampleModel），或者将多个样本打包到一个元素中（使用 SinglePixelPackedSampleModel 或 MultiPixelPackedSampleModel）。SampleModel 还控制样本是否为符号扩展的，即是否允许将无符号数据以有符号的 Java 数据类型（如 byte、short 和 int）存储。
 <p>
虽然 Raster 可能存在于平面中的任何位置，但 SampleModel 使用从 (0, 0) 开始的简单坐标系。因此 Raster 包含一个平移系数，允许在 Raster 的坐标系和 SampleModel 的坐标系之间映射像素位置。通过 getSampleModelTranslateX 和 getSampleModelTranslateY 方法可获取从 SampleModel 坐标系到 Raster 坐标系的平移。
 <p>
通过显示构造或使用 createChild 和 createTranslatedChild 方法，Raster 可与另一个 Raster 共享 DataBuffer。这些方法创建的 Raster 可以返回对通过 getParent 方法创建的 Raster 的引用。对于不是通过调用 createTranslatedChild 或 createChild 构造的 Raster，getParent 将返回 null。
 <p>
createTranslatedChild 方法返回一个与当前 Raster 共享所有数据的新 Raster，但却占用一个具有不同开始点、相同宽度和高度的边界矩形。例如，如果父 Raster 占用 (10, 10) 到 (100, 100) 的区域，并定义了平移的 Raster 从 (50, 50) 开始，则父 Raster 的像素 (20, 20) 和子 Raster 的像素 (60, 60) 占用两个 Raster 共享的 DataBuffer 中的同一位置。在第一种情况中，像素坐标应该加上 (-10, -10) 以得到对应的 SampleModel 坐标，第二种情况中则应加上 (-50, -50)。
 <p>
通过从父 Raster 的 sampleModelTranslateX 和 sampleModelTranslateY 值中减去子 Raster 的 sampleModelTranslateX 和 sampleModelTranslateY 值，可以确定父 Raster 和子 Raster 之间的平移。
 <p>
createChild 方法可用于创建新的 Raster，该 Raster 只占用其父 Raster 边界矩形的一个子集（具有相同或平移后的坐标系），或者具有其父 Raster 的 band 子集。
 <p>
所有构造方法都是受保护的。创建 Raster 的正确方式是使用此类中定义的某个静态创建方法。这些方法创建使用标准 Interleaved、Banded 和 Packed SampleModel 的 Raster 实例，相比通过结合外部生成的 SampleModel 和 DataBuffer 所创建的 Raster，该 Raster 的处理要更高效。
@see java.awt.image.DataBuffer
@see java.awt.image.SampleModel
@see java.awt.image.PixelInterleavedSampleModel
@see java.awt.image.BandedSampleModel
@see java.awt.image.SinglePixelPackedSampleModel
@see java.awt.image.MultiPixelPackedSampleModel

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.image.SampleModel java.awt.image.Raster.sampleModel
<!-- END KEY -->
<!-- BEGIN DATA -->
描述此 Raster 的像素在 DataBuffer 中存储方式的 SampleModel。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.image.DataBuffer java.awt.image.Raster.dataBuffer
<!-- END KEY -->
<!-- BEGIN DATA -->
存储图像数据的 DataBuffer。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.image.Raster.minX
<!-- END KEY -->
<!-- BEGIN DATA -->
此 Raster 左上角像素的 X 坐标。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.image.Raster.minY
<!-- END KEY -->
<!-- BEGIN DATA -->
此 Raster 左上角像素的 Y 坐标。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.image.Raster.width
<!-- END KEY -->
<!-- BEGIN DATA -->
此 Raster 的宽度。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.image.Raster.height
<!-- END KEY -->
<!-- BEGIN DATA -->
此 Raster 的高度。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.image.Raster.sampleModelTranslateX
<!-- END KEY -->
<!-- BEGIN DATA -->
从 Raster 的 SampleModel 坐标空间到该 Raster 坐标空间的 X 平移。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.image.Raster.sampleModelTranslateY
<!-- END KEY -->
<!-- BEGIN DATA -->
从 Raster 的 SampleModel 坐标空间到该 Raster 坐标空间的 Y 平移。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.image.Raster.numBands
<!-- END KEY -->
<!-- BEGIN DATA -->
Raster 中的 band 数。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.image.Raster.numDataElements
<!-- END KEY -->
<!-- BEGIN DATA -->
每个像素的 DataBuffer 数据元素数。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.image.Raster java.awt.image.Raster.parent
<!-- END KEY -->
<!-- BEGIN DATA -->
此 Raster 的父 Raster，或者为 null。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.image.Raster(SampleModel sampleModel, Point origin)
<!-- END KEY -->
<!-- BEGIN DATA -->
构建具有给定 SampleModel 的 Raster。Raster 的左上角是原点，其大小与 SampleModel 相同。自动创建大小足以容纳该 Raster 的 DataBuffer。
@param sampleModel     指定布局的 SampleModel 
@param origin     指定原点的 Point
@throws RasterFormatException 如果计算 <code>origin.x + sampleModel.getWidth()</code> 或 <code>origin.y + sampleModel.getHeight()</code> 导致整数溢出
@throws NullPointerException 如果 <code>sampleModel</code> 或 <code>origin</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.image.Raster(SampleModel sampleModel, DataBuffer dataBuffer, Point origin)
<!-- END KEY -->
<!-- BEGIN DATA -->
构建具有给定 SampleModel 和 DataBuffer 的 Raster。Raster 的左上角是原点，其大小与 SampleModel 相同。DataBuffer 没有初始化，且必须与 SampleModel 兼容。
@param sampleModel     指定布局的 SampleModel 
@param dataBuffer      包含图像数据的 DataBuffer
@param origin          指定原点的 Point
@throws RasterFormatException 如果计算 <code>origin.x + sampleModel.getWidth()</code> 或 <code>origin.y + sampleModel.getHeight()</code> 导致整数溢出
@throws NullPointerException 如果 <code>sampleModel</code> 或 <code>origin</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.image.Raster(SampleModel sampleModel, DataBuffer dataBuffer, Rectangle aRegion, Point sampleModelTranslate, Raster parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有给定 SampleModel、DataBuffer 和父 Raster 的 Raster。aRegion 指定新 Raster 的边界矩形。平移到基 Raster 的坐标系时，基 Raster 必须包含 aRegion。（对于没有父 Raster 的 Raster 而言，基 Raster 是其祖先。）sampleModelTranslate 指定新 Raster 的 sampleModelTranslateX 和 sampleModelTranslateY 值。注意，此构造方法通常应该由其他构造方法或创建方法调用，不应直接使用它。
@param sampleModel     指定布局的 SampleModel 
@param dataBuffer      包含图像数据的 DataBuffer 
@param aRegion         指定图像区域的 Rectangle
@param sampleModelTranslate  指定从 SampleModel 向 Raster 坐标平移的 Point 
@param parent          此 Raster 的父 Raster（如果有） 
@throws NullPointerException 如果任意 <code>sampleModel</code>、<code>dataBuffer</code>、<code>aRegion</code> 或 <code>sampleModelTranslate</code> 为 null
@throws RasterFormatException 如果 <code>aRegion</code> 的宽度或高度小于等于 0，或者计算 <code>aRegion.x + aRegion.width</code> 或 <code>aRegion.y + aRegion.height</code> 导致整数溢出

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.image.WritableRaster java.awt.image.Raster.createInterleavedRaster(int dataType, int w, int h, int bands, Point location)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 PixelInterleavedSampleModel 创建一个具有指定数据类型、宽度、高度和 band 数的 Raster。

<p> Raster 的左上角由 location 参数给定。如果 location 为 null，则将使用 (0, 0)。dataType 参数应该是 DataBuffer 类中定义的某个枚举值。

<p>注意，不支持交错存取的 <code>DataBuffer.TYPE_INT</code> Raster。要创建 <code>DataBuffer.TYPE_INT</code> 类型的一 band Raster，请使用 Raster.createPackedRaster()。
<p> 当前受支持的 dataType 只有 TYPE_BYTE 和 TYPE_USHORT。
@param dataType  存储样本的数据类型
@param w    图像数据的像素宽度
@param h   图像数据的像素高度
@param bands   band 数
@param location   <code>Raster</code> 的左上角
@return 具有指定数据类型、宽度、高度和 band 数的 WritableRaster 对象。
@throws RasterFormatException 如果 <code>w</code> 或 <code>h</code> 小于等于 0，或者计算 <code>location.x + w</code> 或 <code>location.y + h</code> 导致整数溢出

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.image.WritableRaster java.awt.image.Raster.createInterleavedRaster(int dataType, int w, int h, int scanlineStride, int pixelStride, int[] bandOffsets, Point location)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 PixelInterleavedSampleModel 创建一个具有指定数据类型、宽度、高度、扫描行间距、像素间距和 band 偏移量的 Raster。从 bandOffsets.length 可以推导出 band 数。

<p>Raster 的左上角由 location 参数给定。如果 location 为 null，则将使用 (0, 0)。dataType 参数应该是 DataBuffer 类中定义的某个枚举值。

<p>注意，不支持交错存取的 <code>DataBuffer.TYPE_INT</code> Raster。要创建 <code>DataBuffer.TYPE_INT</code> 类型的一 band Raster，请使用 Raster.createPackedRaster()。
<p> 当前受支持的 dataType 只有 TYPE_BYTE 和 TYPE_USHORT。
@param dataType  存储样本的数据类型
@param w    图像数据的像素宽度
@param h    图像数据的像素高度
@param scanlineStride 图像数据的行间距
@param pixelStride 图像数据的像素间距
@param bandOffsets 所有 band 的偏移量
@param location  <code>Raster</code> 的左上角
@return 具有指定数据类型、宽度、高度、扫描行间距、像素间距和 band 偏移量的 WritableRaster 对象。
@throws RasterFormatException 如果 <code>w</code> 或 <code>h</code> 小于等于 0，或者计算 <code>location.x + w</code> 或 <code>location.y + h</code> 导致整数溢出
@throws IllegalArgumentException 如果 <code>dataType</code> 不是受支持的数据类型之一，即 <code>DataBuffer.TYPE_BYTE</code> 或 <code>DataBuffer.TYPE_USHORT</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.image.WritableRaster java.awt.image.Raster.createBandedRaster(int dataType, int w, int h, int bands, Point location)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 BandedSampleModel 创建一个具有指定数据类型、宽度、高度和 band 数的 Raster。

<p>Raster 的左上角由 location 参数给定。如果 location 为 null，则将使用 (0, 0)。dataType 参数应该是 DataBuffer 类中定义的某个枚举值。

<p>当前受支持的 dataType 只有 TYPE_BYTE 和 TYPE_USHORT。
@param dataType  存储样本的数据类型
@param w    图像数据的像素宽度
@param h    图像数据的像素高度
@param bands   band 数
@param location  <code>Raster</code> 的左上角
@return 具有指定数据类型、宽度、高度和 band 数的 WritableRaster 对象。
@throws RasterFormatException 如果 <code>w</code> 或 <code>h</code> 小于等于 0，或者计算 <code>location.x + w</code> 或 <code>location.y + h</code> 导致整数溢出
@throws ArrayIndexOutOfBoundsException 如果 <code>bands</code> 小于 1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.image.WritableRaster java.awt.image.Raster.createBandedRaster(int dataType, int w, int h, int scanlineStride, int[] bankIndices, int[] bandOffsets, Point location)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 BandedSampleModel 创建一个具有指定数据类型、宽度、高度、扫描行间距、存储单元索引和 band 偏移量的 Raster。从 bankIndices.length 和 bandOffsets.length（这两个数必须相同）可以推导出 band 数。

<p> Raster 的左上角由 location 参数给定。dataType 参数应该是 DataBuffer 类中定义的某个枚举值。

<p> 当前受支持的 dataType 只有 TYPE_BYTE 和 TYPE_USHORT。
@param dataType  存储样本的数据类型
@param w   图像数据的像素宽度
@param h   图像数据的像素高度
@param scanlineStride 图像数据的行间距
@param bankIndices 每个 band 的存储单元索引
@param bandOffsets 所有 band 的偏移量
@param location  <code>Raster</code> 的左上角
@return 具有指定数据类型、宽度、高度、扫描行间距、存储单元索引和 band 偏移量的 WritableRaster 对象。
@throws RasterFormatException 如果 <code>w</code> 或 <code>h</code> 小于等于 0，或者计算 <code>location.x + w</code> 或 <code>location.y + h</code> 导致整数溢出 
@throws IllegalArgumentException 如果 <code>dataType</code> 不是受支持的数据类型之一，即 <code>DataBuffer.TYPE_BYTE</code>、<code>DataBuffer.TYPE_USHORT</code> 或 <code>DataBuffer.TYPE_INT</code>
@throws ArrayIndexOutOfBoundsException 如果 <code>bankIndices</code> 或 <code>bandOffsets</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.image.WritableRaster java.awt.image.Raster.createPackedRaster(int dataType, int w, int h, int[] bandMasks, Point location)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 SinglePixelPackedSampleModel 创建一个具有指定数据类型、宽度、高度和 band 掩码的 Raster。从 bandMasks.length 可以推导出 band 数。
 
<p>Raster 的左上角由 location 参数给定。如果 location 为 null，则将使用 (0, 0)。dataType 参数应该是 DataBuffer 类中定义的某个枚举值。

<p> 当前受支持的 dataType 只有 TYPE_BYTE 和 TYPE_USHORT。
@param dataType  存储样本的数据类型
@param w   图像数据的像素宽度
@param h   图像数据的像素高度
@param bandMasks 包含每个 band 项的数组
@param location  <code>Raster</code> 的左上角
@return 具有指定数据类型、宽度、高度和 band 掩码的 WritableRaster 对象。
@throws RasterFormatException 如果 <code>w</code> 或 <code>h</code> 小于等于 0，或者计算 <code>location.x + w</code> 或 <code>location.y + h</code> 导致整数溢出
@throws IllegalArgumentException 如果 <code>dataType</code> 不是受支持的数据类型之一，即 <code>DataBuffer.TYPE_BYTE</code>、<code>DataBuffer.TYPE_USHORT</code> 或 <code>DataBuffer.TYPE_INT</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.image.WritableRaster java.awt.image.Raster.createPackedRaster(int dataType, int w, int h, int bands, int bitsPerBand, Point location)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据打包的 SampleModel 创建一个具有指定数据类型、宽度、高度、band 数和每 band 位数的 Raster。如果 band 数是 1，则 SampleModel 将是一个 MultiPixelPackedSampleModel。

<p>如果 band 数大于 1，则 SampleModel 将是一个 SinglePixelPackedSampleModel，每个 band 有 bitsPerBand 位。无论是哪种情况，都要满足相应 SampleModel 对 dataType 和 bitsPerBand 的要求。

<p> Raster 的左上角由 location 参数给定。如果 location 为 null，则将使用 (0, 0)。dataType 参数应该是 DataBuffer 类中定义的某个枚举值。

<p> 当前受支持的 dataType 只有 TYPE_BYTE 和 TYPE_USHORT。
@param dataType  存储样本的数据类型
@param w   图像数据的像素宽度
@param h   图像数据的像素高度
@param bands   band 数
@param bitsPerBand 每个 band 的位数
@param location  <code>Raster</code> 的左上角
@return 具有指定数据类型、宽度、高度、band 数和每个 band 位数的 WritableRaster 对象。
@throws RasterFormatException 如果 <code>w</code> 或 <code>h</code> 小于等于 0，或者计算 <code>location.x + w</code> 或 <code>location.y + h</code> 导致整数溢出 
@throws IllegalArgumentException 如果 <code>bitsPerBand</code> 和 <code>bands</code> 的乘积大于 <code>dataType</code> 保存的位数
@throws IllegalArgumentException 如果 <code>bitsPerBand</code> 或 <code>bands</code> 小于 0
@throws IllegalArgumentException 如果 <code>dataType</code> 不是受支持的数据类型之一，即 <code>DataBuffer.TYPE_BYTE</code>、<code>DataBuffer.TYPE_USHORT</code> 或 <code>DataBuffer.TYPE_INT</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.image.WritableRaster java.awt.image.Raster.createInterleavedRaster(DataBuffer dataBuffer, int w, int h, int scanlineStride, int pixelStride, int[] bandOffsets, Point location)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 PixelInterleavedSampleModel 创建一个具有指定 DataBuffer、宽度、高度、扫描行间距、像素间距和 band 偏移量的 Raster。从 bandOffsets.length 可以推导出 band 数。Raster 的左上角由 location 参数给定。如果 location 为 null，则将使用 (0, 0)。
<p> 注意，不支持交错存取的 <code>DataBuffer.TYPE_INT</code> Raster。要创建 <code>DataBuffer.TYPE_INT</code> 类型的一 band Raster，请使用 Raster.createPackedRaster()。
@param dataBuffer 包含图像数据的 <code>DataBuffer</code> 
@param w   图像数据的像素宽度
@param h   图像数据的像素高度
@param scanlineStride 图像数据的行间距
@param pixelStride 图像数据的像素间距
@param bandOffsets 所有 band 的偏移量
@param location  <code>Raster</code> 的左上角
@return 具有指定 <code>DataBuffer</code>、宽度、高度、扫描行间距、像素间距和 band 偏移量的 WritableRaster 对象。
@throws RasterFormatException 如果 <code>w</code> 或 <code>h</code> 小于等于 0，或者计算 <code>location.x + w</code> 或 <code>location.y + h</code> 导致整数溢出
@throws IllegalArgumentException 如果 <code>dataType</code> 不是受支持的数据类型之一，即 <code>DataBuffer.TYPE_BYTE</code>、<code>DataBuffer.TYPE_USHORT</code>
@throws RasterFormatException 如果 <code>dataBuffer</code> 有多个存储单元。
@throws NullPointerException 如果 <code>dataBuffer</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.image.WritableRaster java.awt.image.Raster.createBandedRaster(DataBuffer dataBuffer, int w, int h, int scanlineStride, int[] bankIndices, int[] bandOffsets, Point location)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 BandedSampleModel 创建一个具有指定 DataBuffer、宽度、高度、扫描行间距、存储单元索引和 band 偏移量的 Raster。从 bankIndices.length 和 bandOffsets.length（这两个数必须相同）可以推导出 band 数。Raster 的左上角由 location 参数给定。如果 location 为 null，则将使用 (0, 0)。
@param dataBuffer 包含图像数据的 <code>DataBuffer</code>  
@param w   图像数据的像素宽度
@param h    图像数据的像素高度
@param scanlineStride 图像数据的行间距
@param bankIndices 每个 band 的存储单元索引
@param bandOffsets 所有 band 的偏移量
@param location  <code>Raster</code> 的左上角
@return 具有指定 <code>DataBuffer</code>、宽度、高度、扫描行间距、存储单元索引和 band 偏移量的 WritableRaster 对象。
@throws RasterFormatException 如果 <code>w</code> 或 <code>h</code> 小于等于 0，或者计算 <code>location.x + w</code> 或 <code>location.y + h</code> 导致整数溢出
@throws IllegalArgumentException 如果 <code>dataType</code> 不是受支持的数据类型之一，即 <code>DataBuffer.TYPE_BYTE</code>、<code>DataBuffer.TYPE_USHORT</code> 或 <code>DataBuffer.TYPE_INT</code>
@throws NullPointerException 如果 <code>dataBuffer</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.image.WritableRaster java.awt.image.Raster.createPackedRaster(DataBuffer dataBuffer, int w, int h, int scanlineStride, int[] bandMasks, Point location)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 SinglePixelPackedSampleModel 创建一个具有指定 DataBuffer、宽度、高度、扫描行间距和 band 掩码的 Raster。从 bandMasks.length 可以推导出 band 数。通过 location 参数给出 Raster 的左上角。如果 location 为 null，则将使用 (0, 0)。
@param dataBuffer 包含图像数据的 <code>DataBuffer</code> 
@param w   图像数据的像素宽度
@param h  图像数据的像素高度
@param scanlineStride 图像数据的行间距
@param bandMasks 包含每个 band 项的数组
@param location <code>Raster</code> 的左上角
@return 具有指定 <code>DataBuffer</code>、宽度、高度、扫描行间距和 band 掩码的 WritableRaster 对象。
@throws RasterFormatException 如果 <code>w</code> 或 <code>h</code> 小于等于 0，或者计算 <code>location.x + w</code> 或 <code>location.y + h</code> 导致整数溢出
@throws IllegalArgumentException 如果 <code>dataType</code> 不是受支持的数据类型之一，即 <code>DataBuffer.TYPE_BYTE</code>、<code>DataBuffer.TYPE_USHORT</code> 或 <code>DataBuffer.TYPE_INT</code>
@throws RasterFormatException 如果 <code>dataBuffer</code> 有多个存储单元。
@throws NullPointerException 如果 <code>dataBuffer</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.image.WritableRaster java.awt.image.Raster.createPackedRaster(DataBuffer dataBuffer, int w, int h, int bitsPerPixel, Point location)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 MultiPixelPackedSampleModel 创建一个具有指定 DataBuffer、宽度、高度和每像素位数的 Raster。Raster 的左上角由 location 参数给定。如果 location 为 null，则将使用 (0, 0)。
@param dataBuffer 包含图像数据的 <code>DataBuffer</code>  
@param w  图像数据的像素宽度
@param h  图像数据的像素高度
@param bitsPerPixel 每像素的位数 
@param location <code>Raster</code> 的左上角
@return 具有指定 <code>DataBuffer</code>、宽度、高度和每像素位数的 WritableRaster 对象。
@throws RasterFormatException 如果 <code>w</code> 或 <code>h</code> 小于等于 0，或者计算 <code>location.x + w</code> 或 <code>location.y + h</code> 导致整数溢出 
@throws IllegalArgumentException 如果 <code>dataType</code> 不是受支持的数据类型之一，即 <code>DataBuffer.TYPE_BYTE</code>、<code>DataBuffer.TYPE_USHORT</code> 或 <code>DataBuffer.TYPE_INT</code>
@throws RasterFormatException 如果 <code>dataBuffer</code> 有多个存储单元。
@throws NullPointerException 如果 <code>dataBuffer</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.image.Raster java.awt.image.Raster.createRaster(SampleModel sm, DataBuffer db, Point location)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定 SampleModel 和 DataBuffer 的 Raster。Raster 的左上角由 location 参数给定。如果 location 为 null，则将使用 (0, 0)。
@param sm 指定的 <code>SampleModel</code>
@param db 指定的 <code>DataBuffer</code>
@param location <code>Raster</code> 的左上角
@return 具有指定 <code>SampleModel</code>、<code>DataBuffer</code> 和 location 的<code>Raster</code>。
@throws RasterFormatException 如果计算 <code>location.x + sm.getWidth()</code> 或 <code>location.y + sm.getHeight()</code> 导致整数溢出
@throws RasterFormatException 如果 <code>dataBuffer</code> 具有多个存储单元且 <code>sampleModel</code> 是 PixelInterleavedSampleModel、SinglePixelPackedSampleModel 或 MultiPixelPackedSampleModel。
@throws NullPointerException 如果 SampleModel 或 DataBuffer 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.image.WritableRaster java.awt.image.Raster.createWritableRaster(SampleModel sm, Point location)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定 SampleModel 的 WritableRaster。Raster 的左上角由 location 参数给定。如果 location 为 null，则将使用 (0, 0)。
@param sm 指定的 <code>SampleModel</code>
@param location <code>WritableRaster</code> 的左上角
@return 具有指定 <code>SampleModel</code> 和 location 的 <code>WritableRaster</code>。
@throws RasterFormatException 如果计算 <code>location.x + sm.getWidth()</code> 或 <code>location.y + sm.getHeight()</code> 导致整数溢出

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.image.WritableRaster java.awt.image.Raster.createWritableRaster(SampleModel sm, DataBuffer db, Point location)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定 SampleModel 和 DataBuffer 的 WritableRaster。Raster 的左上角由 location 参数给定。如果 location 为 null，则将使用 (0, 0)。
@param sm 指定的 <code>SampleModel</code>
@param db 指定的 <code>DataBuffer</code>
@param location  <code>WritableRaster</code> 的左上角
@return 具有指定 <code>SampleModel</code>、<code>DataBuffer</code> 和 location 的 <code>WritableRaster</code>。
@throws RasterFormatException 如果计算 <code>location.x + sm.getWidth()</code> 或 <code>location.y + sm.getHeight()</code> 导致整数溢出
@throws RasterFormatException 如果 <code>dataBuffer</code> 具有多个存储单元且 <code>sampleModel</code> 是 PixelInterleavedSampleModel、SinglePixelPackedSampleModel 或 MultiPixelPackedSampleModel。
@throws NullPointerException 如果 SampleModel 或 DataBuffer 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.Raster java.awt.image.Raster.getParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 Raster 的父 Raster（如果有），或者 null。
@return 父 Raster 或 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.Raster.getSampleModelTranslateX()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从 SampleModel 坐标系到 Raster 坐标系的 X 平移。要将像素的 X 坐标从 Raster 坐标系转换到 SampleModel 坐标系，必须减去此值。
@return 从 Raster 的 SampleModel 坐标空间到 Raster 坐标空间的 X 平移。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.Raster.getSampleModelTranslateY()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从 SampleModel 坐标系到 Raster 坐标系的 Y 平移。要将像素的 Y 坐标从 Raster 坐标系转换到 SampleModel 坐标系，必须减去此值。
@return 从 Raster 的 SampleModel 坐标空间到 Raster 坐标空间的 Y 平移。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.WritableRaster java.awt.image.Raster.createCompatibleWritableRaster()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个兼容的 WritableRaster，使其具有与此 Raster 相同的大小、SampleModel，以及一个新初始化的 DataBuffer。
@return 具有相同样本模型和新数据缓冲区的兼容 <code>WritableRaster</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.WritableRaster java.awt.image.Raster.createCompatibleWritableRaster(int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个兼容的 WritableRaster，使其具有指定大小、新 SampleModel 和新初始化的 DataBuffer。
@param w 新 <code>WritableRaster</code> 的指定宽度
@param h 新 <code>WritableRaster</code> 的指定高度
@return 具有指定大小，以及新样本模型和数据缓冲区的兼容 <code>WritableRaster</code>。
@exception RasterFormatException 如果 width 或 height 小于等于 0。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.WritableRaster java.awt.image.Raster.createCompatibleWritableRaster(Rectangle rect)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个兼容的 WritableRaster，使其具有由 rect 指定的位置 (minX, minY) 和大小 (width, height)、新 SampleModel 和新初始化的 DataBuffer。
@param rect 指定 <code>WritableRaster</code> 的大小和位置的 <code>Rectangle</code>
@return 具有指定大小和位置、新样本模型和数据缓冲区的 <code>WritableRaster</code>。
@throws RasterFormatException 如果 <code>rect</code> 的宽度或高度小于等于 0，或者计算 <code>rect.x + rect.width</code> 或 <code>rect.y + rect.height</code> 导致整数溢出
@throws NullPointerException 如果 <code>rect</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.WritableRaster java.awt.image.Raster.createCompatibleWritableRaster(int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个兼容的 WritableRaster，使其具有指定位置 (minX, minY) 和大小 (width, height)、新 SampleModel 和新初始化的 DataBuffer。
@param x <code>WritableRaster</code> 左上角的 X 坐标
@param y <code>WritableRaster</code> 左上角的 Y 坐标
@param w <code>WritableRaster</code> 的指定宽度
@param h <code>WritableRaster</code> 的指定高度
@return 具有指定大小和位置、新 SampleModel 和 DataBuffer 的兼容 <code>WritableRaster</code>。
@throws RasterFormatException 如果 <code>w</code> 或 <code>h</code> 小于等于 0，或者计算 <code>x + w</code> 或 <code>y + h</code> 导致整数溢出

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.Raster java.awt.image.Raster.createTranslatedChild(int childMinX, int childMinY)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 Raster，使其大小、SampleModel 和 DataBuffer 与此 Raster 相同，但是位置不同。新 Raster 拥有对当前 Raster 的引用，可以通过其 getParent() 方法进行访问。
 
@param childMinX 新 <code>Raster</code> 左上角的 X 坐标
@param childMinY 新 <code>Raster</code> 左上角的 Y 坐标
@return 大小、SampleModel 和 DataBuffer 与此 <code>Raster</code> 相同，但是具有指定位置的 <code>Raster</code>。
@throws RasterFormatException 如果计算 <code>childMinX + this.getWidth()</code> 或 <code>childMinY + this.getHeight()</code> 导致整数溢出

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.Raster java.awt.image.Raster.createChild(int parentX, int parentY, int width, int height, int childMinX, int childMinY, int[] bandList)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回共享此 Raster 全部或部分 DataBuffer 的新 Raster。新 Raster 拥有对当前 Raster 的引用，可以通过其 getParent() 方法进行访问。

<p> parentX、parentY、width 和 height 参数在此 Raster 的坐标空间中形成一个 Rectangle，指示要共享的像素区域。如果此 Rectangle 未包含在当前 Raster 的边界内，则抛出错误。

<p> 新 Raster 可能被平移到与当前 Raster 所用坐标系不同的平面坐标系中。childMinX 和 childMinY 参数给出返回的 Raster 左上角像素的新 (x, y) 坐标；新 Raster 中的坐标 (childMinX, childMinY) 将映射到当前 Raster 中与坐标 (parentX, parentY) 相同的像素。

<p> 可以定义新 Raster 只包含当前 Raster 的 band 子集，通过 bandList 参数，可以对该子集重新排序。如果 bandList 为 null，则将按当前顺序包含 Raster 的所有 band。

<p> 要创建一个包含当前 Raster 子区域，但是共享其坐标系和 band 的新 Raster，应该调用此方法，并使 childMinX 等于 parentX，childMinY 等于 parentY，bandList 等于 null。

@param parentX 此 Raster 坐标空间中左上角的 X 坐标
@param parentY 此 Raster 坐标空间中左上角的 Y 坐标
@param width 从 (parentX, parentY) 开始的区域宽度
@param height 从 (parentX, parentY) 开始的区域高度。
@param childMinX 返回的 Raster 左上角的 X 坐标
@param childMinY 返回的 Raster 左上角的 Y 坐标
@param bandList   band 索引数组；如果要使用所有 band，则该参数为 null 
@return 一个新的 <code>Raster</code>。
@exception RasterFormatException 如果指定的子区域处于 Raster 的边界外。
@throws RasterFormatException 如果 <code>width</code> 或 <code>height</code> 小于等于 0，或者计算 <code>parentX + width</code>、<code>parentY + height</code>、<code>childMinX + width</code> 或 <code>childMinY + height</code> 导致整数溢出

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle java.awt.image.Raster.getBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 Raster 的边界 Rectangle。此函数返回的信息与 getMinX/MinY/Width/Height 相同。
@return 此 <code>Raster</code> 的边界框。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.Raster.getMinX()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Raster 的最小有效 X 坐标。
@return 此 <code>Raster</code> 的最小 x 坐标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.Raster.getMinY()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Raster 的最小有效 Y 坐标。
@return 此 <code>Raster</code> 的最小 y 坐标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.Raster.getWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Raster 的像素宽度。
@return 此 <code>Raster</code> 的宽度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.Raster.getHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Raster 的像素高度。
@return 此 <code>Raster</code> 的高度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.Raster.getNumBands()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 Raster 中的 band 数（每像素样本）。
@return 此 <code>Raster</code> 的 band 数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.Raster.getNumDataElements()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回通过 getDataElements 和 setDataElements 方法传输一个像素所需的数据元素数。通过这些方法传输像素时，可以以打包或未打包的格式进行传输，具体取决于底层 SampleModel 的实现。使用这些方法，可以将像素作为基本类型的 getNumDataElements() 元素数组传输，其中基本类型由  getTransferType() 给定。TransferType 不一定与 DataBuffer 的存储数据类型相同。
@return 数据元素数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.Raster.getTransferType()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回通过 getDataElements 和 setDataElements 方法传输像素所使用的 TransferType。通过这些方法传输像素时，可以以打包或未打包的格式进行传输，具体取决于底层 SampleModel 的实现。可以将像素作为基本类型的 getNumDataElements() 元素数组传输，其中基本类型由  getTransferType() 给定。TransferType 不一定与 DataBuffer 的存储数据类型相同。TransferType 是 DataBuffer 中已定义的类型之一。
@return 传输类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.DataBuffer java.awt.image.Raster.getDataBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 Raster 关联的 DataBuffer。
@return 此 <code>Raster</code> 的 <code>DataBuffer</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.SampleModel java.awt.image.Raster.getSampleModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述图像数据布局的 SampleModel。
@return 此 <code>Raster</code> 的 <code>SampleModel</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.image.Raster.getDataElements(int x, int y, Object outData)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 TransferType 类型的基本数组形式返回单个像素的数据。对于 Java 2D(tm) API 支持的图像数据，此数据是 DataBuffer.TYPE_BYTE、DataBuffer.TYPE_USHORT、DataBuffer.TYPE_INT、DataBuffer.TYPE_SHORT、DataBuffer.TYPE_FLOAT 或 DataBuffer.TYPE_DOUBLE 之一。可以打包格式返回数据，从而提高数据的传输效率。如果坐标不在边界之内，则抛出 ArrayIndexOutOfBoundsException。但是不保证进行显式的边界检查。如果输入对象不为 null 且引用了 TransferType 数组以外的任何对象，则抛出 ClassCastException。
@see java.awt.image.SampleModel#getDataElements(int, int, Object, DataBuffer)
@param x    像素位置的 X 坐标
@param y    像素位置的 Y 坐标
@param outData  数组的对象引用，该数组类型由 getTransferType() 定义，长度由 getNumDataElements() 定义。如果为 null，则分配一个适当类型和大小的数组。
@return         数组的对象引用，该数组类型由 getTransferType() 定义，包含所请求的像素数据。

@throws ArrayIndexOutOfBoundsException 如果坐标不在边界内，或者 outData 太小而无法保存输出内容。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.image.Raster.getDataElements(int x, int y, int w, int h, Object outData)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 TransferType 类型基本数组形式返回指定像素矩形的像素数据。对于 Java 2D API 支持的图像数据，此数据是 DataBuffer.TYPE_BYTE、DataBuffer.TYPE_USHORT、DataBuffer.TYPE_INT、DataBuffer.TYPE_SHORT、DataBuffer.TYPE_FLOAT 或 DataBuffer.TYPE_DOUBLE 之一。可以打包格式返回数据，从而提高数据的传输效率。如果坐标不在边界之内，则抛出 ArrayIndexOutOfBoundsException。但是不保证进行显式的边界检查。如果输入对象不为 null 且引用了 TransferType 数组以外的任何对象，则抛出 ClassCastException。
@see java.awt.image.SampleModel#getDataElements(int, int, int, int, Object, DataBuffer)
@param x 左上角像素位置的 X 坐标
@param y 左上角像素位置的 Y 坐标
@param w    像素矩形的宽度
@param h   像素矩形的高度
@param outData  数组的对象引用，该数组类型由 getTransferType() 定义，长度由 w*h*getNumDataElements()定义。如果为 null，则分配一个适当类型和大小的数组。
@return    数组的对象引用，该数组类型由 getTransferType() 定义，包含所请求的像素数据。

@throws ArrayIndexOutOfBoundsException 如果坐标不在边界内，或者 outData 太小而无法保存输出内容。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.awt.image.Raster.getPixel(int x, int y, int[] iArray)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 int 数组形式返回指定像素的样本。如果坐标不在边界之内，则抛出 ArrayIndexOutOfBoundsException。但是不保证进行显式的边界检查。
@param x 像素位置的 X 坐标
@param y 像素位置的 Y 坐标
@param iArray 一个可选的、预分配的 int 数组
@return 指定像素的样本。

@throws ArrayIndexOutOfBoundsException 如果坐标不在边界内，或者 iArray 太小而无法保存输出内容。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[] java.awt.image.Raster.getPixel(int x, int y, float[] fArray)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 float 数组形式返回指定像素的样本。如果坐标不在边界之内，则抛出 ArrayIndexOutOfBoundsException。但是不保证进行显式的边界检查。
@param x 像素位置的 X 坐标
@param y 像素位置的 Y 坐标
@param fArray 一个可选的、预分配的 float 数组
@return 指定像素的样本。

@throws ArrayIndexOutOfBoundsException 如果坐标不在边界内，或者 fArray 太小而无法保存输出内容。

<!-- END DATA -->
<!-- BEGIN KEY -->
public double[] java.awt.image.Raster.getPixel(int x, int y, double[] dArray)
<!-- END KEY -->
<!-- BEGIN DATA -->

以 double 数组形式返回指定像素的样本。如果坐标不在边界之内，则抛出 ArrayIndexOutOfBoundsException。但是不保证进行显式的边界检查。
@param x 像素位置的 X 坐标
@param y 像素位置的 Y 坐标
@param dArray 一个可选的、预分配的 double 数组
@return 指定像素的样本。

@throws ArrayIndexOutOfBoundsException 如果坐标不在边界内，或者 dArray 太小而无法保存输出内容。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.awt.image.Raster.getPixels(int x, int y, int w, int h, int[] iArray)
<!-- END KEY -->
<!-- BEGIN DATA -->

返回一个包含像素矩形所有样本的 int 数组，每个数组元素对应一个样本。如果坐标不在边界之内，则抛出 ArrayIndexOutOfBoundsException。但是不保证进行显式的边界检查。
@param x 左上角像素位置的 X 坐标
@param y 左上角像素位置的 Y 坐标
@param w     像素矩形的宽度
@param h      像素矩形的高度
@param iArray 一个可选的、预分配的 int 数组
@return 指定像素矩形的样本。

@throws ArrayIndexOutOfBoundsException 如果坐标不在边界内，或者 iArray 太小而无法保存输出内容。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[] java.awt.image.Raster.getPixels(int x, int y, int w, int h, float[] fArray)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个包含像素矩形所有样本的 float 数组，每个数组元素对应一个样本。如果坐标不在边界之内，则抛出 ArrayIndexOutOfBoundsException。但是不保证进行显式的边界检查。
@param x 像素位置的 X 坐标
@param y 像素位置的 Y 坐标
@param w     像素矩形的宽度
@param h      像素矩形的高度
@param fArray 一个可选的、预分配的 float 数组
@return 指定像素矩形的样本。

@throws ArrayIndexOutOfBoundsException 如果坐标不在边界内，或者 fArray 太小而无法保存输出内容。

<!-- END DATA -->
<!-- BEGIN KEY -->
public double[] java.awt.image.Raster.getPixels(int x, int y, int w, int h, double[] dArray)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个包含像素矩形所有样本的 double 数组，每个数组元素对应一个样本。如果坐标不在边界之内，则抛出 ArrayIndexOutOfBoundsException。但是不保证进行显式的边界检查。
@param x 左上角像素位置的 X 坐标
@param y 左上角像素位置的 Y 坐标
@param w     像素矩形的宽度
@param h      像素矩形的高度
@param dArray 一个可选的、预分配的 double 数组
@return 指定像素矩形的样本。

@throws ArrayIndexOutOfBoundsException 如果坐标不在边界内，或者 dArray 太小而无法保存输出内容。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.Raster.getSample(int x, int y, int b)
<!-- END KEY -->
<!-- BEGIN DATA -->

以 int 形式返回指定 band 中对应于 (x,y) 处像素的样本。如果坐标不在边界之内，则抛出 ArrayIndexOutOfBoundsException。但是不保证进行显式的边界检查。
@param x 像素位置的 X 坐标
@param y 像素位置的 Y 坐标
@param b        要返回的 band
@return 指定 band 中对应于指定坐标处像素的样本。

@throws ArrayIndexOutOfBoundsException 如果坐标或 band 索引不在边界内。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.image.Raster.getSampleFloat(int x, int y, int b)
<!-- END KEY -->
<!-- BEGIN DATA -->

以 float 形式返回指定 band 中对应于 (x,y) 处像素的样本。如果坐标不在边界之内，则抛出 ArrayIndexOutOfBoundsException。但是不保证进行显式的边界检查。
@param x 像素位置的 X 坐标
@param y 像素位置的 Y 坐标
@param b        要返回的 band 
@return 指定 band 中对应于指定坐标处像素的样本。

@throws ArrayIndexOutOfBoundsException 如果坐标或 band 索引不在边界内。

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.image.Raster.getSampleDouble(int x, int y, int b)
<!-- END KEY -->
<!-- BEGIN DATA -->

以 double 形式返回指定 band 中对应于 (x,y) 处像素的样本。如果坐标不在边界之内，则抛出 ArrayIndexOutOfBoundsException。但是不保证进行显式的边界检查。
@param x 像素位置的 X 坐标
@param y 像素位置的 Y 坐标
@param b        要返回的 band 
@return 指定 band 中对应于指定坐标处像素的样本。

@throws ArrayIndexOutOfBoundsException 如果坐标或 band 索引不在边界内。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.awt.image.Raster.getSamples(int x, int y, int w, int h, int b, int[] iArray)
<!-- END KEY -->
<!-- BEGIN DATA -->

以 int 数组形式返回指定 band 中对应于指定像素矩形的样本，每个数组元素对应一个样本。如果坐标不在边界之内，则抛出 ArrayIndexOutOfBoundsException。但是不保证进行显式的边界检查。
@param x 左上角像素位置的 X 坐标
@param y 左上角像素位置的 Y 坐标
@param w   像素矩形的宽度
@param h    像素矩形的高度
@param b        要返回的 band 
@param iArray   一个可选的、预分配的 int 数组
@return 指定 band 中对应于指定像素矩形的样本。

@throws ArrayIndexOutOfBoundsException 如果坐标或 band 索引不在边界内，或者 iArray 太小而无法保存输出内容。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[] java.awt.image.Raster.getSamples(int x, int y, int w, int h, int b, float[] fArray)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 float 数组形式返回指定 band 中对应于指定像素矩形的样本，每个数组元素对应一个样本。如果坐标不在边界之内，则抛出 ArrayIndexOutOfBoundsException。但是不保证进行显式的边界检查。
@param x 左上角像素位置的 X 坐标
@param y 左上角像素位置的 Y 坐标
@param w   像素矩形的宽度
@param h    像素矩形的高度
@param b        要返回的 band 
@param fArray   一个可选的、预分配的 float 数组
@return 指定 band 中对应于指定像素矩形的样本。

@throws ArrayIndexOutOfBoundsException 如果坐标或 band 索引不在边界内，或者 fArray 太小而无法保存输出内容。

<!-- END DATA -->
<!-- BEGIN KEY -->
public double[] java.awt.image.Raster.getSamples(int x, int y, int w, int h, int b, double[] dArray)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 double 数组形式返回指定 band 中对应于指定像素矩形的样本，每个数组元素对应一个样本。如果坐标不在边界之内，则抛出 ArrayIndexOutOfBoundsException。但是不保证进行显式的边界检查。
@param x 左上角像素位置的 X 坐标
@param y 左上角像素位置的 Y 坐标
@param w   像素矩形的宽度
@param h    像素矩形的高度
@param b        要返回的 band 
@param iArray   一个可选的、预分配的 double 数组
@return 指定 band 中对应于指定像素矩形的样本。

@throws ArrayIndexOutOfBoundsException 如果坐标或 band 索引不在边界内，或者 dArray 太小而无法保存输出内容。

<!-- END DATA -->
