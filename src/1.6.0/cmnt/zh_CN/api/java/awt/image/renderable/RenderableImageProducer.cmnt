<!-- BEGIN KEY -->
public class java.awt.image.renderable.RenderableImageProducer extends java.lang.Object implements java.awt.image.ImageProducer, java.lang.Runnable
<!-- END KEY -->
<!-- BEGIN DATA -->

实现 ImageProducer 以允许异步生成 RenderableImage 的适配器类。ImageConsumer 的大小由 RenderContext 中 usr2dev 变换的缩放因子确定。如果 RenderContext 为 null，则使用 RenderableImage 的默认呈现。此类实现用一个分辨率在一个线程中生成图像的异步生成。可以为此类创建子类，以实现使用多个线程呈现图像的版本。这些线程可以用越来越好的质量呈现同一个图像，也可以用单一分辨率呈现图像的不同部分。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.renderable.RenderableImageProducer(RenderableImage rdblImage, RenderContext rc)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 RenderableImage 和 RenderContext 构造新的 RenderableImageProducer。

@param rdblImage 要呈现的 RenderableImage。
@param rc 用于生成像素的 RenderContext。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.image.renderable.RenderableImageProducer.setRenderContext(RenderContext rc)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置下一次调用 startProduction() 要使用的新 RenderContext。

@param rc 新 RenderContext。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.image.renderable.RenderableImageProducer.addConsumer(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 ImageConsumer 添加到对此图像的数据感兴趣的使用者列表。

@param ic 要添加到兴趣列表的 ImageConsumer。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.awt.image.renderable.RenderableImageProducer.isConsumer(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定某个 ImageConsumer 是否在当前对此图像的数据感兴趣的使用者列表。

@param ic 要检查的 ImageConsumer。
@return 如果 ImageConsumer 在列表上，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.image.renderable.RenderableImageProducer.removeConsumer(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
从对此图像的数据感兴趣的使用者列表中删除一个 ImageConsumer。

@param ic 要删除的 ImageConsumer。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.image.renderable.RenderableImageProducer.startProduction(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 ImageConsumer 添加到对此图像的数据感兴趣的使用者列表，并立即通过 ImageConsumer 接口开始提交该图像数据。

@param ic 要添加到使用者列表的 ImageConsumer。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.renderable.RenderableImageProducer.requestTopDownLeftRightResend(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
请求给定 ImageConsumer 按从上到下、从左到右的顺序再次提交图像数据。

@param ic 请求重新发送的 ImageConsumer。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.renderable.RenderableImageProducer.run()
<!-- END KEY -->
<!-- BEGIN DATA -->
此类的 runnable 方法。这将使用当前的 RenderableImage 和 RenderContext 生成一个图像，并将其发送到所有当前已向此类注册的 ImageConsumer。

<!-- END DATA -->
