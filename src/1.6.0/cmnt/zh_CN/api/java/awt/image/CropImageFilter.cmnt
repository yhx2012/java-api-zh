<!-- BEGIN KEY -->
public class java.awt.image.CropImageFilter extends java.awt.image.ImageFilter
<!-- END KEY -->
<!-- BEGIN DATA -->
用于裁剪图像的 ImageFilter 类。此类扩展了基本 ImageFilter 类，可提取现有 Image 中的给定矩形区域，为包含刚提取区域的新图像提供源。也就是它要与 FilteredImageSource 对象结合使用，以生成现有图像的裁剪版本。

@see FilteredImageSource
@see ImageFilter

@version	1.18 07/16/04
@author 	Jim Graham

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.CropImageFilter(int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
按指定 x、y、w 和 h 参数从源 Image 提取绝对矩形区域来构造 CropImageFilter。
@param x 要提取的矩形顶部的 x 位置
@param y 要提取的矩形顶部的 y 位置
@param w 要提取的矩形宽度
@param h 要提取的矩形高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.CropImageFilter.setProperties(java.util.Hashtable<?, ?> props)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指示裁剪区域的属性后传递源对象的属性。此方法调用 <code>super.setProperties</code>，这可能会导致添加其他属性。
 <p>
注：此方法专门由 <code>Image</code>（其像素正被过滤）的 <code>ImageProducer</code> 调用。使用此类过滤图像像素的开发人员应该避免直接调用此方法，因为该操作可能干扰过滤操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.CropImageFilter.setDimensions(int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写源图像的维度，并将矩形裁剪区域的维度传递给 ImageConsumer。
 <p>
注：此方法专门由 <code>Image</code>（其像素正被过滤）的 <code>ImageProducer</code> 调用。使用此类过滤图像像素的开发人员应该避免直接调用此方法，因为该操作可能干扰过滤操作。
@see ImageConsumer

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.CropImageFilter.setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定已传递的字节像素是否与要提取的区域相交，只传递出现在输出区域的像素子集。
 <p>
注：此方法专门由 <code>Image</code>（其像素正被过滤）的 <code>ImageProducer</code> 调用。使用此类过滤图像像素的开发人员应该避免直接调用此方法，因为该操作可能干扰过滤操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.CropImageFilter.setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定已传递的 int 像素是否与要提取的区域相交，只传递出现在输出区域的像素子集。
 <p>
注：此方法专门由 <code>Image</code>（其像素正被过滤）的 <code>ImageProducer</code> 调用。使用此类过滤图像像素的开发人员应该避免直接调用此方法，因为该操作可能干扰过滤操作。

<!-- END DATA -->
