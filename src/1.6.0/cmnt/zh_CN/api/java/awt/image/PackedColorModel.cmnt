<!-- BEGIN KEY -->
public abstract class java.awt.image.PackedColorModel extends java.awt.image.ColorModel
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>PackedColorModel</code> 类是一个抽象 {@link ColorModel} 类，它使用的像素值以单独采样表示颜色和 alpha 信息，并将单个像素的所有采样打包到单个 int、short 或 byte 量中。此类可与任意 {@link ColorSpace} 一起使用。像素值中的颜色采样数必须与 <code>ColorSpace</code> 中的颜色分量数相同。可以有单个 alpha 采样。对于那些使用 <code>transferType</code> 类型的基本数组像素表示形式的方法，数组的长度总是 1。受支持的传输类型有 DataBuffer.TYPE_BYTE、DataBuffer.TYPE_USHORT 和 DataBuffer.TYPE_INT。颜色和 alpha 采样按位掩码所指示的位存储在数组的单个元素中。每个位掩码必须是连续的，并且掩码不能重叠。相同的掩码适用于其他方法使用的单个 int 像素表示形式。掩码和颜色/alpha 采样的对应关系如下：
 <ul>
<li> 通过 0 到 {@link ColorModel#getNumComponents() getNumComponents}&nbsp;-&nbsp;1 的索引来标识各掩码。 
<li> 前 {@link ColorModel#getNumColorComponents() getNumColorComponents} 个索引指颜色采样。  
<li> 如果存在 alpha 采样，则对应于最后一个索引。  
<li> 颜色索引的顺序由 <code>ColorSpace</code> 所指定。此顺序通常反映颜色空间类型的名称（例如 TYPE_RGB），索引 0 对应于红色、索引 1 对应于绿色、索引 2 则对应于蓝色。  
 </ul>
 <p>
出于显示或处理目的而执行的像素值到颜色/alpha 分量的转换是采样到分量的一一对应关系。<code>PackedColorModel</code> 通常与使用掩码来定义已打包采样的图像数据一起使用。例如，可结合使用 <code>PackedColorModel</code> 和 {@link SinglePixelPackedSampleModel} 来构造一个  {@link BufferedImage}。通常 {@link SampleModel} 所用的掩码与 <code>ColorModel</code> 使用的相同。但是如果它们不同，则根据 <code>ColorModel</code> 的掩码对像素数据进行颜色解释。
 <p>
单个 <code>int</code> 的像素表示形式对于此类的所有对象都是有效的，因为总是能够以单个 <code>int</code> 表示此类使用的像素值。因此，使用此种表示形式的方法不会由于无效的像素值而抛出 <code>IllegalArgumentException</code>。
 <p>
<code>PackedColorModel</code> 的子类是 {@link DirectColorModel}，类似于 X11 TrueColor 可视化模型类型。

@see DirectColorModel
@see SinglePixelPackedSampleModel
@see BufferedImage
@version 10 Feb 1997

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.PackedColorModel(ColorSpace space, int bits, int[] colorMaskArray, int alphaMask, boolean isAlphaPremultiplied, int trans, int transferType)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据颜色掩码数组（指定了 <code>int</code> 像素表示形式中哪些位包含每个颜色的采样）和 alpha 掩码来构造一个 <code>PackedColorModel</code>。颜色分量在指定的 <code>ColorSpace</code> 中。<code>colorMaskArray</code> 的长度应该是 <code>ColorSpace</code> 中的分量数。每个掩码中的所有位必须是连续的，并且能够放入指定 <code>int</code> 像素表示形式的最低有效位数中。如果 <code>alphaMask</code> 为 0，则不存在 alpha。如果存在 alpha，则 <code>boolean</code> 值 <code>isAlphaPremultiplied</code> 指定如何解释像素值中的颜色和 alpha 采样。如果该 <code>boolean</code> 值为 <code>true</code>，则假定颜色采样已经预乘以 alpha 采样。透明度 <code>trans</code> 指定了此颜色模型可以表示的 alpha 值。传输类型是用于表示像素值的基本数组类型。
@param space 指定的 <code>ColorSpace</code>
@param bits 像素值中的位数
@param colorMaskArray 指定掩码的数组，该掩码表示像素值中表示颜色分量的位 
@param alphaMask 指定像素值中表示 alpha 分量的位掩码 
@param isAlphaPremultiplied 如果颜色采样预乘了 alpha 采样，则为 <code>true</code>；否则为 <code>false</code>
@param trans 指定可由此颜色模型表示的 alpha 值
@param transferType 用于表示像素值的数组类型
@throws IllegalArgumentException 如果 <code>bits</code> 小于 1 或大于 32

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.PackedColorModel(ColorSpace space, int bits, int rmask, int gmask, int bmask, int amask, boolean isAlphaPremultiplied, int trans, int transferType)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定的掩码构造一个 <code>PackedColorModel</code>，该掩码指示 <code>int</code> 像素表示形式中的哪些位包含 alpha、红色、绿色和蓝色采样。颜色分量在指定的 <code>ColorSpace</code> 中，并且必须是 ColorSpace.TYPE_RGB 类型。每个掩码中的所有位必须是连续的，并且能够放入指定 <code>int</code> 像素表示形式的最低有效位数中。如果 <code>amask</code> 是 0，则不存在 alpha。如果存在 alpha，则 <code>boolean</code> 值 <code>isAlphaPremultiplied</code> 指定如何解释像素值中的颜色和 alpha 采样。如果该 <code>boolean</code> 值为 <code>true</code>，则假定颜色采样已经预乘以 alpha 采样。透明度 <code>trans</code> 指定了此颜色模型可以表示的 alpha 值。传输类型是用于表示像素值的基本数组类型。
@param space 指定的 <code>ColorSpace</code>
@param bits 像素值中的位数
@param rmask 指定像素值中表示红色分量的位掩码
@param gmask 指定像素值中表示绿色分量的位掩码
@param bmask 指定像素值中表示蓝色分量的位掩码
@param amask 指定像素值中表示 alpha 分量的位掩码
@param isAlphaPremultiplied 如果颜色采样预乘了 alpha 采样，则为 <code>true</code>；否则为 <code>false</code>
@param trans 指定可由此颜色模型表示的 alpha 值
@param transferType 用于表示像素值的数组类型
@throws IllegalArgumentException 如果 <code>space</code> 不是 TYPE_RGB 空间
@see ColorSpace

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.PackedColorModel.getMask(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指示像素中哪些位包含指定颜色/alpha 采样的掩码。对于颜色采样，<code>index</code> 对应于颜色空间中颜色采样名称的放置位置。因此对于 CMYK ColorSpace，<code>index</code> 0 对应 Cyan，而 <code>index</code> 1 则对应 Magenta。如果存在 alpha，则 alpha 的 <code>index</code> 是：
 <pre>
      alphaIndex = numComponents() - 1;
 </pre>
@param index 指定的颜色或 alpha 采样
@return 指示 <code>int</code> 像素表示中的哪些位包含 <code>index</code> 所指定的颜色或 alpha 采样的掩码。
@throws ArrayIndexOutOfBoundsException 如果 <code>index</code> 大于此 <code>PackedColorModel</code> 中的分量数减 1，或者 <code>index</code> 小于 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int[] java.awt.image.PackedColorModel.getMasks()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指示像素中的哪些位包含颜色和 alpha 采样的掩码数组。
@return 掩码数组，指示 <code>int</code> 像素表示形式中的哪些位包含颜色或 alpha 采样。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.SampleModel java.awt.image.PackedColorModel.createCompatibleSampleModel(int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定宽度和高度、数据布局与此 <code>ColorModel</code> 兼容的 <code>SampleModel</code>。
@param w 所描述的图像数据区域的宽度（以像素为单位） 
@param h 所描述的图像数据区域的高度（以像素为单位）
@return 新创建的 <code>SampleModel</code>。
@throws IllegalArgumentException 如果 <code>w</code> 或 <code>h</code> 不大于 0
@see SampleModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.image.PackedColorModel.isCompatibleSampleModel(SampleModel sm)
<!-- END KEY -->
<!-- BEGIN DATA -->

检查指定的 <code>SampleModel</code> 是否与此 <code>ColorModel</code> 兼容。如果 <code>sm</code> 为 <code>null</code>，则此方法返回 <code>false</code>。
@param sm 指定的 <code>SampleModel</code>，或者为 <code>null</code>
@return 如果指定的 <code>SampleModel</code> 与此 <code>ColorModel</code> 兼容，则返回 <code>true</code>；否则返回 <code>false</code>。
@see SampleModel 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.WritableRaster java.awt.image.PackedColorModel.getAlphaRaster(WritableRaster raster)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从输入 <code>WritableRaster</code> 提取，并且表示图像 alpha 通道的 {@link WritableRaster}。此方法假定与此 <code>ColorModel</code> 关联的 <code>WritableRaster</code> 对象将 alpha band（如果有）存储为图像数据的最后一个 band。如果没有与此 <code>ColorModel</code> 关联的、占据独立空间的 alpha 通道，则返回 <code>null</code>。此方法创建一个新的 <code>WritableRaster</code>，但是共享原来的数据数组。
@param raster 包含图像的 <code>WritableRaster</code> 
@return 表示 <code>raster</code> 中所含图像 alpha 通道的 <code>WritableRaster</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.image.PackedColorModel.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->

测试指定的 <code>Object</code> 是否为 <code>PackedColorModel</code> 的一个实例并且等于此 <code>PackedColorModel</code>。
@param obj 要测试相等性的 <code>Object</code> 
@return  如果指定的 <code>Object</code> 是 <code>PackedColorModel</code> 的一个实例并且等于此 <code>PackedColorModel</code>，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
