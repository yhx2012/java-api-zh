<!-- BEGIN KEY -->
public class java.awt.image.DirectColorModel extends java.awt.image.PackedColorModel
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>DirectColorModel</code> 类是使用像素值的 <code>ColorModel</code> 类，像素值以单独样本的形式表示 RGB 颜色和 alpha 信息，并将单个像素的所有样本打包成单个 int、short 或 byte 量。此类只能与类型 ColorSpace.TYPE_RGB 的 ColorSpaces 一起使用。此外，对于 ColorSpace 的每个分量，通过 ColorSpace 的 <code>getMinValue()</code> 方法得到的最小标准化分量值必须是 0.0，通过 <code>getMaxValue()</code> 方法得到的最大值必须是 1.0（这些最小/最大值是 RGB 空间的常见值）。像素值中必须有三个颜色样本，且可以有一个 alpha 样本。对于那些使用类型 <code>transferType</code> 的基本数组像素表示形式的方法，数组长度总是 1。受支持的转换类型是 DataBuffer.TYPE_BYTE、DataBuffer.TYPE_USHORT 和 DataBuffer.TYPE_INT。颜色和 alpha 样本以位为单位存储在位掩码指示的数组的单个元素中。每个位掩码必须是连续的，并且掩码一定不能重叠。相同的掩码可以应用于由其他方法使用的单个 int 像素表示形式。掩码和颜色/alpha 样本间的对应关系如下：
 <ul>
<li> 如果 alpha 不存在，掩码则由运行 0 到 2 的索引标识，如果 alpha 存在，则由运行 3 的索引标识。  
<li> 前三个索引指的是颜色样本；索引 0 对应于红色，索引 1 对应于绿色，索引 2 对应于蓝色。  
<li> 索引 3 对应于 alpha 样本（如果存在）。 
 </ul>
 <p>
出于显示或处理的目的，像素值到颜色/alpha 分量的转换是从样本到分量一一对应的。<code>DirectColorModel</code> 通常与使用掩码定义打包样本的图像数据一起使用。例如，<code>DirectColorModel</code> 可以与 <code>SinglePixelPackedSampleModel</code> 一起使用来构造 {@link BufferedImage}。通常，{@link SampleModel} 和 <code>ColorModel</code> 使用的掩码是相同的。但是，如果掩码不相同，像素数据的颜色解释将根据 <code>ColorModel</code> 的掩码进行。
 <p>
单个 int 像素表示形式对此类的所有对象都有效，因为它总是能够表示在单个 int 中与此类一起使用的像素值。因此，使用此表示形式的方法将不会因无效的像素值而抛出 <code>IllegalArgumentException</code>。
 <p>
此颜色模型类似于 X11 TrueColor 可视分量。由 {@link ColorModel#getRGBdefault() getRGBdefault} 方法指定的默认 RGB ColorModel 是一个具有以下参数的 <code>DirectColorModel</code>：
 <pre>
位数：        32
红色掩码：0x00ff0000
绿色掩码：0x0000ff00
蓝色掩码：0x000000ff
Alpha 掩码：0xff000000
颜色空间：sRGB
isAlphaPremultiplied：False
透明度：Transparency.TRANSLUCENT
transferType：DataBuffer.TYPE_INT
 </pre>
 <p>
此类中的许多方法都是 final。这是因为基础本机图形代码假定此类的布局和操作，并在此处标记 final 的方法实现中反映了这些假定。您可以出于其他原因将此类子类化，但不能重写或修改那些方法的行为。

@see ColorModel
@see ColorSpace
@see SinglePixelPackedSampleModel
@see BufferedImage
@see ColorModel#getRGBdefault

@version 10 Feb 1997

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.DirectColorModel(int bits, int rmask, int gmask, int bmask)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定的指示 <code>int</code> 像素表示形式中哪些位包含红色、绿色和蓝色颜色样本的掩码构造 <code>DirectColorModel</code>。因为像素值不包含 alpha 信息，所以所有像素都可视为不透明的，这意味着 alpha = 1.0。每个掩码中的所有位必须是连续的，并且符合 <code>int</code> 像素表示形式的最低有效位的指定数量。<code>ColorSpace</code> 是默认的 sRGB 空间。透明度值为 Transparency.OPAQUE。转换类型是存储单个像素的 DataBuffer.TYPE_BYTE、DataBuffer.TYPE_USHORT 或 DataBuffer.TYPE_INT 中的最小者。
@param bits 像素值中的位数量；例如，掩码中位的数量总和。
@param rmask 指定指示整数像素中哪些位包含红色分量的掩码
@param gmask 指定指示整数像素中哪些位包含绿色分量的掩码
@param bmask 指定指示整数像素中哪些位包含蓝色分量的掩码
 
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.DirectColorModel(int bits, int rmask, int gmask, int bmask, int amask)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定的指示在 <code>int</code> 像素表示形式中哪些位包含红色、绿色和蓝色颜色样本与 alpha 样本（如果存在）的掩码构造 <code>DirectColorModel</code>。如果 <code>amask</code> 为 0，则像素值不包含 alpha 信息，且所有像素都可视为不透明的，这意味着 alpha = 1.0。每个掩码中的所有位必须是连续的，并且符合 <code>int</code> 像素表示形式的最低有效位的指定数量。Alpha（如果存在）不是预先乘得的值。<code>ColorSpace</code> 是默认的 sRGB 空间。如果 alpha 不存在，则透明度值是 Transparency.OPAQUE，否则是 Transparency.TRANSLUCENT。转换类型是存储单个像素的 DataBuffer.TYPE_BYTE、DataBuffer.TYPE_USHORT 或 DataBuffer.TYPE_INT 中的最小者。
@param bits 像素值中的位数量；例如，掩码中位的数量总和。
@param rmask 指定指示整数像素中哪些位包含红色分量的掩码
@param gmask 指定指示整数像素中哪些位包含绿色分量的掩码
@param bmask 指定指示整数像素中哪些位包含蓝色分量的掩码
@param amask 指定指示整数像素中哪些位包含 alpha 分量的掩码

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.DirectColorModel(ColorSpace space, int bits, int rmask, int gmask, int bmask, int amask, boolean isAlphaPremultiplied, int transferType)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定参数构造 <code>DirectColorModel</code>。颜色分量位于指定的 <code>ColorSpace</code>，后者必须属于类型 ColorSpace.TYPE_RGB，并且必须具有都是 0.0 的最小标准化分量值和都是 1.0 的最大值。掩码指定在 <code>int</code> 像素表示形式中哪些位包含红色、绿色和蓝色颜色样本与 alpha 样本（如果存在）。如果 <code>amask</code> 为 0，则像素值不包含 alpha 信息，且所有像素都可视为不透明的，这意味着 alpha = 1.0。每个掩码中的所有位必须是连续的，并且符合 <code>int</code> 像素表示形式的最低有效位的指定数量。如果 alpha 存在，则 <code>boolean</code> <code>isAlphaPremultiplied</code> 指定如何解释像素值中的颜色和 alpha 样本。如果 <code>boolean</code> 为 <code>true</code>，则假定颜色样本已经乘以 alpha 样本。如果 alpha 不存在，则透明度值为 Transparency.OPAQUE，否则为 Transparency.TRANSLUCENT。转换类型是用来表示像素值的基本数组的类型，并且必须是 DataBuffer.TYPE_BYTE、DataBuffer.TYPE_USHORT 或 DataBuffer.TYPE_INT 之一。
@param space 指定的 <code>ColorSpace</code>
@param bits 像素值中位的数量；例如，掩码中位的数量和。
@param rmask 指定指示整数像素中哪些位包含红色分量的掩码
@param gmask 指定指示整数像素中哪些位包含绿色分量的掩码
@param bmask 指定指示整数像素中哪些位包含蓝色分量的掩码
@param amask 指定指示整数像素中哪些位包含 alpha 分量的掩码
@param isAlphaPremultiplied <code>true</code> 如果将颜色样本预先乘以 alpha 样本；否则 <code>false</code>
@param transferType 用来表示像素值的数组的类型
@throws IllegalArgumentException 如果 <code>space</code> 不是 TYPE_RGB 空间，或如果最小/最大标准化分量值不是 0.0/1.0。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.DirectColorModel.getRedMask()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 <code>int</code> 像素表示形式中哪些位包含红色分量的掩码。
@return 指示 <code>int</code> 像素表示形式的哪些位包含红色颜色样本的掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.DirectColorModel.getGreenMask()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指示 <code>int</code> 像素表示形式中哪些位包含绿色颜色分量的掩码。
@return 指示 <code>int</code> 像素表示形式的哪些位包含绿色颜色样本的掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.DirectColorModel.getBlueMask()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指示 <code>int</code> 像素表示形式中哪些位包含蓝色颜色分量的掩码。
@return 指示 <code>int</code> 像素表示形式的哪些位包含蓝色颜色样本的掩码。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.DirectColorModel.getAlphaMask()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指示 <code>int</code> 像素表示形式中哪些位包含 alpha 分量的掩码。
@return 指示 <code>int</code> 像素表示形式的哪些位包含 alpha 样本的掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.DirectColorModel.getRed(int pixel)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定像素的红色颜色分量，指定像素在默认的 RGB <code>ColorSpace</code>（即 sRGB）中缩放范围是 0 到 255。如有必要，可进行颜色转换。将像素值指定为 <code>int</code>。返回的值是一个非预先乘得的值。因此，如果预乘 alpha，则此方法会在返回该值之前将其分离出来。例如，如果 alpha 值为 0，则红色值为 0。
@param pixel 指定的像素
@return 指定像素（在 sRGB <code>ColorSpace</code> 中缩放范围从 0 到 255）的红色颜色分量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.DirectColorModel.getGreen(int pixel)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定像素的绿色颜色分量，指定像素在默认 RGB <code>ColorSpace</code>（即 sRGB）中缩放范围是 0 到 255。如有必要，可进行颜色转换。将像素值指定为 <code>int</code>。返回的值是一个非预先乘得的值。因此，如果预乘 alpha，则此方法会在返回该值之前将其分离出来。例如，如果 alpha 值为 0，则绿色值为 0。
@param pixel 指定像素
@return 指定像素（在 sRGB <code>ColorSpace</code> 中缩放范围从 0 到 255）的绿色颜色分量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.DirectColorModel.getBlue(int pixel)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定像素的蓝色颜色分量，指定像素在默认的 RGB <code>ColorSpace</code>（即 sRGB）中缩放范围是 0 到 255。如有必要，可进行颜色转换。将像素值指定为 <code>int</code>。返回的值是一个非预先乘得的值。因此，如果预乘 alpha，则此方法会在返回该值之前将其分离出来。例如，如果 alpha 值为 0，则蓝色值为 0。
@param pixel 指定的像素
@return 指定像素（在 sRGB <code>ColorSpace</code> 中缩放范围从 0 到 255）的蓝色颜色分量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.DirectColorModel.getAlpha(int pixel)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定像素（缩放范围从 0 到 255）的 alpha 分量。像素值指定为 <code>int</code>。
@param pixel 指定像素
@return <code>pixel</code>（0 到 255）的 alpha 分量的值。    

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.DirectColorModel.getRGB(int pixel)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回默认的 RGB 颜色模型格式中的像素的颜色/alpha 分量。如有必要，可进行颜色转换。将像素值指定为 <code>int</code>。返回的值是非预乘格式。因此，如果预乘 alpha，则此方法会将它从颜色分量中分离出来。例如，如果 alpha 值为 0，则颜色值每个分量都是 0。
@param pixel 指定的像素
@return 指定像素的颜色/alpha 分量的 RGB 值。
@see ColorModel#getRGBdefault

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.DirectColorModel.getRed(Object inData)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定像素的红色颜色分量，指定像素在默认的 RGB <code>ColorSpace</code>（即 sRGB）中缩放范围是 0 到 255。如有必要，可进行颜色转换。像素值由作为对象引用传入的类型 <code>transferType</code> 的数据元素的数组指定。返回的值是一个非预先乘得的值。因此，如果预乘 alpha，则此方法会在返回该值之前将其分离出来。例如，如果 alpha 值为 0，则红色值为 0。如果 <code>inData</code> 不是类型 <code>transferType</code> 的基本数组，则抛出 <code>ClassCastException</code>。如果 <code>inData</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，则抛出 <code>ArrayIndexOutOfBoundsException</code>。因为 <code>DirectColorModel</code> 可以子类化，所以子类可以继承此方法的实现，并且如果不重写此方法，则当它们使用不受支持的 <code>transferType</code> 时，将抛出异常。如果此 <code>transferType</code> 不受该 <code>ColorModel</code> 支持，则抛出 <code>UnsupportedOperationException</code>。
@param inData 包含该像素值的数组
@return 指定像素的红色分量的值。
@throws ArrayIndexOutOfBoundsException 如果 <code>inData</code> 不是特别大，不能存储此颜色模型的像素值
@throws ClassCastException 如果 <code>inData</code> 不是类型 <code>transferType</code> 的基本数组
@throws UnsupportedOperationException 如果此颜色模型不支持 <code>transferType</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.DirectColorModel.getGreen(Object inData)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定像素的绿色颜色分量，指定像素在默认的 RGB <code>ColorSpace</code>（即 sRGB）中缩放范围是 0 到 255。如有必要，可进行颜色转换。像素值由作为对象引用传入的类型 <code>transferType</code> 的数据元素的数组指定。返回的值是一个非预先乘得的值。因此，如果预乘 alpha，则此方法会在返回该值之前将其分离出来。例如，如果 alpha 值为 0，则绿色值为 0。如果 <code>inData</code> 不是类型 <code>transferType</code> 的基本数组，则抛出 <code>ClassCastException</code>。如果 <code>inData</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，则抛出 <code>ArrayIndexOutOfBoundsException</code>。因为 <code>DirectColorModel</code> 可以子类化，所以子类可以继承此方法的实现，并且如果不重写此方法，则当它们使用不受支持的 <code>transferType</code> 时，将抛出异常。如果此 <code>transferType</code> 不受该 <code>ColorModel</code> 支持，则抛出 <code>UnsupportedOperationException</code>。
@param inData 包含该像素值的数组
@return 指定像素的绿色分量的值。
@throws ArrayIndexOutOfBoundsException 如果 <code>inData</code> 不是特别大，不能存储此颜色模型的像素值
@throws ClassCastException 如果 <code>inData</code> 不是类型 <code>transferType</code> 的基本数组
@throws UnsupportedOperationException 如果此颜色模型不支持 <code>transferType</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.DirectColorModel.getBlue(Object inData)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定像素的蓝颜色分量，指定像素在默认的 RGB <code>ColorSpace</code>（即 sRGB）中缩放范围是 0 到 255。如有必要，可进行颜色转换。像素值由作为对象引用传入的类型 <code>transferType</code> 的数据元素的数组指定。返回的值是一个非预先乘得的值。因此，如果预乘 alpha，则此方法会在返回该值之前将其分离出来。例如，如果 alpha 值为 0，则蓝色值为 0。如果 <code>inData</code> 不是类型 <code>transferType</code> 的基本数组，则抛出 <code>ClassCastException</code>。如果 <code>inData</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，则抛出 <code>ArrayIndexOutOfBoundsException</code>。因为 <code>DirectColorModel</code> 可以子类化，所以子类可以继承此方法的实现，并且如果不重写此方法，则当它们使用不受支持的 <code>transferType</code> 时，将抛出异常。如果此 <code>transferType</code> 不受该 <code>ColorModel</code> 支持，则抛出 <code>UnsupportedOperationException</code>。
@param inData 包含像素值的数组
@return 指定像素的蓝色分量的值。
@throws ArrayIndexOutOfBoundsException 如果 <code>inData</code> 不是特别大，不能存储此颜色模型的像素值
@throws ClassCastException 如果 <code>inData</code> 不是类型 <code>transferType</code> 的基本数组
@throws UnsupportedOperationException 如果此颜色模型不支持 <code>transferType</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.DirectColorModel.getAlpha(Object inData)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定像素（在 0 到 255 之间缩放）的 alpha 分量。像素值由作为对象引用传入的类型 <code>transferType</code> 的数据元素的数组指定。如果 <code>inData</code> 不是类型 <code>transferType</code> 的基本数组，则抛出 <code>ClassCastException</code>。如果 <code>inData</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，则抛出 <code>ArrayIndexOutOfBoundsException</code>。因为 <code>DirectColorModel</code> 可以子类化，所以子类可以继承此方法的实现，并且如果不重写此方法，则当它们使用不受支持的 <code>transferType</code> 时，将抛出异常。如果此 <code>transferType</code> 不受支持，则抛出 <code>UnsupportedOperationException</code>。
@param inData 指定的像素
@return 指定像素（在 0 到 255 之间缩放）的 alpha 分量
@exception <code>ClassCastException</code> 如果 <code>inData</code> 不是类型 <code>transferType</code> 的基本数组
@exception <code>ArrayIndexOutOfBoundsException</code> 如果 <code>inData</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素
@exception <code>UnsupportedOperationException</code> 如果此 <code>tranferType</code> 不受此 <code>ColorModel</code> 支持

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.DirectColorModel.getRGB(Object inData)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回默认的 RGB 颜色模型格式中的像素的颜色/alpha 分量。如有必要，可进行颜色转换。像素值由作为对象引用传入的类型 <code>transferType</code> 的数据元素的数组指定。如果 <code>inData</code> 不是类型 <code>transferType</code> 的基本数组，则抛出 <code>ClassCastException</code>。如果 <code>inData</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，则抛出 <code>ArrayIndexOutOfBoundsException</code>。返回的值是非预乘格式。因此，如果预乘 alpha，则此方法会将它从颜色分量中分离出来。例如，如果 alpha 值为 0，则颜色值为 0。因为 <code>DirectColorModel</code> 可以子类化，所以子类可以继承此方法的实现，并且如果不重写此方法，则当它们使用不受支持的 <code>transferType</code> 时，将抛出异常。

@param inData 指定的像素
@return 指定像素的颜色和 alpha 分量。
@exception UnsupportedOperationException 如果该 <code>transferType</code> 不受此 <code>ColorModel</code> 支持
@see ColorModel#getRGBdefault

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.image.DirectColorModel.getDataElements(int rgb, Object pixel)
<!-- END KEY -->
<!-- BEGIN DATA -->
在默认 RGB 颜色模型中给定整数像素的表示形式的情况下，返回此 <code>ColorModel</code> 中像素的数据元素数组的表示形式。然后可以将此数组传递给 <code>WritableRaster</code> 对象的 <code>setDataElements</code> 方法。如果像素变量为 <code>null</code>，则分配一个新数组。如果 <code>pixel</code> 不为 <code>null</code>，则它必须是类型 <code>transferType</code> 的基本数组；否则，抛出 <code>ClassCastException</code>。如果 <code>pixel</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，则抛出 <code>ArrayIndexOutOfBoundsException</code>。此像素数组被返回。因为 <code>DirectColorModel</code> 可以子类化，所以子类可以继承此方法的实现，并且如果不重写此方法，则当它们使用不受支持的 <code>transferType</code> 时，将抛出异常。

@param rgb 默认的 RGB 颜色模型中的整数像素表示形式
@param pixel 指定像素
@return 此 <code>ColorModel</code> 中指定像素的数组表示形式
@exception ClassCastException 如果 <code>pixel</code> 不是类型 <code>transferType</code> 的基本数组
@exception ArrayIndexOutOfBoundsException 如果 <code>pixel</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值
@exception UnsupportedOperationException 如果此 <code>transferType</code> 不受此 <code>ColorModel</code> 支持
@see WritableRaster#setDataElements
@see SampleModel#setDataElements

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int[] java.awt.image.DirectColorModel.getComponents(int pixel, int[] components, int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在 <code>ColorModel</code> 中已给定像素的未标准化颜色/alpha 分量。将像素值指定为 <code>int</code>。如果该 <code>components</code> 数组为 <code>null</code>，则分配一个新数组。该 <code>components</code> 数组被返回。将颜色/alpha 分量存储在以 <code>offset</code> 开头的 <code>components</code> 数组中，即便此方法已分配了数组也如此。如果 <code>components</code> 数组不为 <code>null</code> 且不是特别大，不能以 <code>offset</code> 开头存储所有颜色和 alpha 分量，则抛出 <code>ArrayIndexOutOfBoundsException</code>。
@param pixel 指定的像素
@param components 接收指定像素的颜色和 alpha 分量的数组
@param offset 开始存储颜色和 alpha 分量时的 <code>components</code> 数组的偏移量
@return 包含以指定偏移量开头的指定像素的颜色和 alpha 分量的数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int[] java.awt.image.DirectColorModel.getComponents(Object pixel, int[] components, int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在 <code>ColorModel</code> 中已给定像素的未标准化颜色/alpha 分量。像素值由作为对象引用传入的类型 <code>transferType</code> 的数据元素的数组指定。如果 <code>pixel</code> 不是类型 <code>transferType</code> 的基本数组，则抛出 <code>ClassCastException</code>。如果 <code>pixel</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，则抛出 <code>ArrayIndexOutOfBoundsException</code>。如果该 <code>components</code> 数组为 <code>null</code>，则分配一个新数组。该 <code>components</code> 数组被返回。将颜色/alpha 分量存储在以 <code>offset</code> 开头的 <code>components</code> 数组中，即便此方法已分配了数组也如此。如果 <code>components</code> 数组不为 <code>null</code> 且不是特别大，不能以 <code>offset</code> 开头存储所有颜色和 alpha 分量，则抛出 <code>ArrayIndexOutOfBoundsException</code>。因为 <code>DirectColorModel</code> 可以子类化，所以子类可以继承此方法的实现，并且如果不重写此方法，则当它们使用不受支持的 <code>transferType</code> 时，将抛出异常。
@param pixel 指定的像素
@param components 接收指定像素的颜色和 alpha 分量的数组
@param offset 开始存储颜色和 alpha 分量时的 <code>components</code> 数组的偏移量
@return 包含以指定偏移量开头的指定像素的颜色和 alpha 分量的数组。
@exception ClassCastException 如果 <code>pixel</code> 不是类型 <code>transferType</code> 的基本数组
@exception ArrayIndexOutOfBoundsException 如果 <code>pixel</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，或如果 <code>components</code> 不为 <code>null</code> 且不是特别大，不能以 <code>offset</code> 开头保存所有颜色和 alpha 分量
@exception UnsupportedOperationException 如果此 <code>transferType</code> 不受此颜色模型支持

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.awt.image.WritableRaster java.awt.image.DirectColorModel.createCompatibleWritableRaster(int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定宽度和高度、拥有与此 <code>ColorModel</code> 兼容的数据布局 (<code>SampleModel</code>) 的 <code>WritableRaster</code>。
@param w 应用到新 <code>WritableRaster</code> 的宽度
@param h 应用到新 <code>WritableRaster</code> 的高度
@return 具有指定宽度和高度的 <code>WritableRaster</code> 对象。
@throws IllegalArgumentException 如果 <code>w</code> 或 <code>h</code> 小于或等于 0
@see WritableRaster
@see SampleModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.DirectColorModel.getDataElement(int[] components, int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定未标准化颜色/alpha 分量的数组的情况下，返回以 <code>int</code> 类型表示在此 <code>ColorModel</code> 中的像素值。如果 <code>components</code> 数组不是特别大，不能以 <code>offset</code> 开头存储所有颜色和 alpha 分量，则抛出 <code>ArrayIndexOutOfBoundsException</code>。
@param components 未标准化的颜色和 alpha 分量的数组
@param offset 开始检索颜色和 alpha 分量处的 <code>components</code> 的索引
@return 此 <code>ColorModel</code> 中与指定分量相对应的 <code>int</code> 像素值。
@exception <code>ArrayIndexOutOfBoundsException</code> 如果 <code>components</code> 数组不是特别大，不能存储所有以 <code>offset</code> 开头的颜色和 alpha 分量

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.image.DirectColorModel.getDataElements(int[] components, int offset, Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给定未标准化的颜色/alpha 分量的数组的情况下，返回此 <code>ColorModel</code> 中的像素的数据元素数组表示形式。然后可以将此数组传递给 <code>WritableRaster</code> 对象的 <code>setDataElements</code> 方法。如果 <code>components</code> 数组不是特别大，不能存储所有以偏移量开头的颜色和 alpha 分量，则抛出 <code>ArrayIndexOutOfBoundsException</code>。如果 <code>obj</code> 变量为 <code>null</code>，则分配一个新数组。如果 <code>obj</code> 不为 <code>null</code>，则它必须是类型 <code>transferType</code> 的基本数组；否则，抛出 <code>ClassCastException</code>。如果 <code>obj</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，则抛出 <code>ArrayIndexOutOfBoundsException</code>。因为 <code>DirectColorModel</code> 可以子类化，所以子类可以继承此方法的实现，并且如果不重写此方法，则当它们使用不受支持的 <code>transferType</code> 时，将抛出异常。
@param components 未标准化的颜色和 alpha 分量的数组
@param offset 开始检索颜色和 alpha 分量处的 <code>components</code> 的索引
@param obj 表示颜色和 alpha 分量的数组的 <code>Object</code>
@return 表示颜色和 alpha 分量的数组的 <code>Object</code>。
@exception <code>ClassCastException</code> 如果 <code>obj</code> 不是类型 <code>transferType</code> 的基本数组
@exception <code>ArrayIndexOutOfBoundsException</code> 如果 <code>obj</code> 不是特别大，不能存储此 <code>ColorModel</code> 的像素值，或该 <code>components</code> 数组不是特别大，不能存储所有以 <code>offset</code> 开头的颜色和 alpha 分量
@exception UnsupportedOperationException 如果此 <code>transferType</code> 不受此颜色模型支持
@see WritableRaster#setDataElements
@see SampleModel#setDataElements

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.awt.image.ColorModel java.awt.image.DirectColorModel.coerceData(WritableRaster raster, boolean isAlphaPremultiplied)
<!-- END KEY -->
<!-- BEGIN DATA -->
强制光栅数据与在 <code>isAlphaPremultiplied</code> 变量中指定的状态匹配，假定此 <code>ColorModel</code> 现在已对该数据进行正确描述。可以将颜色光栅数据乘以或除以 alpha，如果该数据处于正确状态，则不执行任何操作。如果需要对该数据强制匹配，则此方法还将相应地返回一个带有 <code>isAlphaPremultiplied</code> 标志集的 <code>ColorModel</code> 实例。如果此 transferType 不受此 <code>ColorModel</code> 支持，则此方法将抛出 <code>UnsupportedOperationException</code>。因为 <code>ColorModel</code> 可以子类化，所以子类可以继承此方法的实现，并且如果不重写此方法，则当它们使用不受支持的 transferType 时，将抛出异常。

@param raster <code>WritableRaster</code> 数据
@param isAlphaPremultiplied 如果 alpha 是预先乘得的，则为 <code>true</code>；否则为 <code>false</code>
@return 表示被强制数据的 <code>ColorModel</code> 对象。
@exception UnsupportedOperationException 如果此 <code>transferType</code> 不受此颜色模型支持

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.image.DirectColorModel.isCompatibleRaster(Raster raster)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 <code>raster</code> 与此 <code>ColorModel</code> 兼容，则返回 <code>true</code>，如果不兼容，则返回 <code>false</code>。
@param raster 测试兼容性的 {@link Raster} 对象
@return <code>true</code> 如果 <code>raster</code> 与此 <code>ColorModel</code> 兼容；否则 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.image.DirectColorModel.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此 <code>DirectColorModel</code> 的 <code>String</code>。
@return 表示此 <code>DirectColorModel</code> 的 <code>String</code>。

<!-- END DATA -->
