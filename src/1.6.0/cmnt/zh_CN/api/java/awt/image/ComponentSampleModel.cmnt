<!-- BEGIN KEY -->
public class java.awt.image.ComponentSampleModel extends java.awt.image.SampleModel
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示按每个像素样本占用 DataBuffer 中一个数据元素的方式存储的图像数据。它可存储 N 个样本，这 N 个样本可通过 N 个独立的数据数组元素组成像素。不同的 band 可能位于 DataBuffer 的不同存储单元中。由于提供了存取方法，因此可以直接对图像数据进行操作。此类可以支持不同类型的交错，如 band 交错、扫描行交错和像素交错等。像素间距是同一扫描行上同一 band 的两个样本之间的数据数组元素数。扫描行间距是给定样本与下一扫描行的同一列中对应样本之间的数据数组元素数。band 偏移量表示从保存每个 band 的 DataBuffer 存储单元第一个数据数组元素到 band 第一个样本之间的数据数组元素数。band 从 0 到 N-1 进行编号。此类可以表示以下图像数据：每个样本都是可以按 8、16 或 32 位存储的无符号整数的图像数据（分别使用 <code>DataBuffer.TYPE_BYTE</code>、<code>DataBuffer.TYPE_USHORT</code> 或 <code>DataBuffer.TYPE_INT</code>）、每个样本都是可以按 16 位存储的有符号整数的图像数据（使用 <code>DataBuffer.TYPE_SHORT</code>）、每个样本都是有符号 float 和 double 量的图像数据（分别使用 <code>DataBuffer.TYPE_FLOAT</code> 或 <code>DataBuffer.TYPE_DOUBLE</code>）。所有给定的 ComponentSampleModel 样本都是以同样的精度存储的。所有间距和偏移量必须为非负数。此类支持 {@link DataBuffer#TYPE_BYTE TYPE_BYTE}、{@link DataBuffer#TYPE_USHORT TYPE_USHORT}、{@link DataBuffer#TYPE_SHORT TYPE_SHORT}、{@link DataBuffer#TYPE_INT TYPE_INT}、{@link DataBuffer#TYPE_FLOAT TYPE_FLOAT} 和 {@link DataBuffer#TYPE_DOUBLE TYPE_DOUBLE}。
@see java.awt.image.PixelInterleavedSampleModel
@see java.awt.image.BandedSampleModel

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int[] java.awt.image.ComponentSampleModel.bandOffsets
<!-- END KEY -->
<!-- BEGIN DATA -->
数据数组元素中所有 band 的偏移量。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int[] java.awt.image.ComponentSampleModel.bankIndices
<!-- END KEY -->
<!-- BEGIN DATA -->
各个存储图像数据 band 的存储单元的索引。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.image.ComponentSampleModel.numBands
<!-- END KEY -->
<!-- BEGIN DATA -->

此 <code>ComponentSampleModel</code> 中的 band 数量。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.image.ComponentSampleModel.numBanks
<!-- END KEY -->
<!-- BEGIN DATA -->
此 <code>ComponentSampleModel</code> 中的存储单元数量。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.image.ComponentSampleModel.scanlineStride
<!-- END KEY -->
<!-- BEGIN DATA -->
由此 ComponentSampleModel 所描述的图像数据区域的行间距（以数据数组元素表示）。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.image.ComponentSampleModel.pixelStride
<!-- END KEY -->
<!-- BEGIN DATA -->
由此 ComponentSampleModel 所描述的图像数据区域的像素间距（以数据数组元素表示）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.ComponentSampleModel(int dataType, int w, int h, int pixelStride, int scanlineStride, int[] bandOffsets)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定参数的 ComponentSampleModel。band 数量将由 bandOffsets 数组的长度给定。所有 band 都将存储在 DataBuffer 的第一个存储单元中。
@param dataType	存储样本的数据类型
@param w	描述的图像数据区域的宽度（以像素为单位）
@param h	描述的图像数据区域的高度（以像素为单位）
@param pixelStride 描述的图像数据区域的像素间距
@param scanlineStride 描述的图像数据区域的行间距
@param bandOffsets 所有 band 的偏移量
@throws IllegalArgumentException 如果 <code>w</code> 或 <code>h</code> 不大于 0
@throws IllegalArgumentException 如果 <code>pixelStride</code> 小于 0
@throws IllegalArgumentException 如果 <code>scanlineStride</code> 小于 0
@throws IllegalArgumentException 如果 <code>numBands</code> 小于 1
@throws IllegalArgumentException 如果 <code>w</code> 和 <code>h</code> 的乘积大于 <code>Integer.MAX_VALUE</code>
@throws IllegalArgumentException 如果 <code>dataType</code> 不是受支持的数据类型之一

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.ComponentSampleModel(int dataType, int w, int h, int pixelStride, int scanlineStride, int[] bankIndices, int[] bandOffsets)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定参数的 ComponentSampleModel。band 数量将由 bandOffsets 数组的长度给定。不同的 band 可以存储在 DataBuffer 的不同存储单元中。

@param dataType	存储样本的数据类型
@param w	描述的图像数据区域的宽度（以像素为单位）
@param h	描述的图像数据区域的高度（以像素为单位）
@param pixelStride 描述的图像数据区域的像素间距
@param scanlineStride 描述的图像数据区域的行间距
@param bankIndices 所有 band 的存储单元索引
@param bandOffsets 所有 band 的 band 偏移量
@throws IllegalArgumentException 如果 <code>w</code> 或 <code>h</code> 不大于 0
@throws IllegalArgumentException 如果 <code>pixelStride</code> 小于 0
@throws IllegalArgumentException 如果 <code>scanlineStride</code> 小于 0
@throws IllegalArgumentException 如果 <code>bankIndices</code> 的长度不等于 <code>bankOffsets</code> 的长度
@throws IllegalArgumentException 如果 <code>bandIndices</code> 的 band 索引中任何一项小于 0
@throws IllegalArgumentException 如果 <code>dataType</code> 不是受支持的数据类型之一

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.SampleModel java.awt.image.ComponentSampleModel.createCompatibleSampleModel(int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定宽度和高度的 <code>ComponentSampleModel</code>。新的 <code>SampleModel</code> 将有与此 <code>SampleModel</code> 相同的 band 数量、存储数据类型、交错方案和像素间距。
@param w 得到的 <code>SampleModel</code> 的宽度
@param h 得到的 <code>SampleModel</code> 的高度
@return 具有指定大小的 <code>ComponentSampleModel</code>
@throws IllegalArgumentException 如果 <code>w</code> 或 <code>h</code> 不大于 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.SampleModel java.awt.image.ComponentSampleModel.createSubsetSampleModel(int[] bands)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有此 ComponentSampleModel 的 band 子集的新 ComponentSampleModel。新的 ComponentSampleModel 可以与任何现有 ComponentSampleModel 可与之一起使用的 DataBuffer 一起使用。新的 ComponentSampleModel/DataBuffer 组合表示具有原 ComponentSampleModel/DataBuffer 组合 band 子集的图像。
@param bands 此 <code>ComponentSampleModel</code> 的 band 子集
@return 已创建的具有此 <code>ComponentSampleModel</code> band 子集的 <code>ComponentSampleModel</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.DataBuffer java.awt.image.ComponentSampleModel.createDataBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建对应于此 <code>ComponentSampleModel</code> 的 <code>DataBuffer</code>。<code>DataBuffer</code> 对象的数据类型、存储单元的数量和大小与此 <code>ComponentSampleModel</code> 一致。
@return 数据类型、存储单元的数量和大小与此 <code>ComponentSampleModel</code> 一致的 <code>DataBuffer</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.ComponentSampleModel.getOffset(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取像素 (x,y) 的第一个 band 的偏移量。第一个 band 的样本可以从具有 <code>ComponentSampleModel</code> <code>csm</code> 的 <code>DataBuffer</code> <code>data</code> 中检索，如下所示：
 <pre>
        data.getElem(csm.getOffset(x, y));
 </pre>
@param x 像素的 X 坐标
@param y 像素的 Y 坐标
@return 指定像素第一个 band 的偏移量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.ComponentSampleModel.getOffset(int x, int y, int b)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取像素 (x,y) 的 band b 的偏移量。band <code>b</code> 的样本可以从具有 <code>ComponentSampleModel</code> <code>csm</code> 的 <code>DataBuffer</code> <code>data</code> 中检索，如下所示：
 <pre>
       data.getElem(csm.getOffset(x, y, b));
 </pre>
@param x 指定像素的 X 坐标
@param y 指定像素的 Y 坐标
@param b 指定的 band
@return 指定像素的指定 band 的偏移量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int[] java.awt.image.ComponentSampleModel.getSampleSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回所有 band 每个样本的位数。
@return 包含所有 band 每样本位数的数组，数组中每个元素都表示一个 band。   

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.ComponentSampleModel.getSampleSize(int band)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 band 每个样本的位数。
@param band 指定的 band
@return 指定 band 每个样本的位数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int[] java.awt.image.ComponentSampleModel.getBankIndices()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回所有 band 的存储单元索引。
@return 所有 band 的存储单元索引。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int[] java.awt.image.ComponentSampleModel.getBandOffsets()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回所有 band 的 band 偏移量。
@return 所有 band 的 band 偏移量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.ComponentSampleModel.getScanlineStride()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 ComponentSampleModel 的扫描行间距。
@return 此 <code>ComponentSampleModel</code> 的扫描行间距。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.ComponentSampleModel.getPixelStride()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 ComponentSampleModel 的像素间距。
@return 此 <code>ComponentSampleModel</code> 的像素间距。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.image.ComponentSampleModel.getNumDataElements()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回使用 {@link #getDataElements(int, int, Object, DataBuffer) } 和 {@link #setDataElements(int, int, Object, DataBuffer) } 方法传输像素所需的数据元素的数量。对于 <code>ComponentSampleModel</code>，这与 band 的数量相同。
@return 使用 <code>getDataElements</code> 和 <code>setDataElements</code> 方法传输像素所需的数据元素的数量。
@see java.awt.image.SampleModel#getNumDataElements
@see #getNumBands

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.image.ComponentSampleModel.getDataElements(int x, int y, Object obj, DataBuffer data)
<!-- END KEY -->
<!-- BEGIN DATA -->

以 <code>TransferType</code> 类型基本数组形式返回单个像素的数据。对于 <code>ComponentSampleModel</code>，返回的数据与 data 类型相同，且每个数组元素返回一个样本。通常，<code>obj</code> 应该作为 <code>null</code> 传入，以便 <code>Object</code> 能自动创建并成为正确的基本数据类型。
 <p>
以下代码说明了如何将像素的数据从 <code>DataBuffer</code> <code>db1</code>（其存储布局由 <code>ComponentSampleModel</code> <code>csm1</code> 描述）传输到 <code>DataBuffer</code> <code>db2</code>（其存储布局由 <code>ComponentSampleModel</code> <code>csm2</code> 描述）。该传输通常比使用 <code>getPixel</code> 和 <code>setPixel</code> 更有效。
 <pre>
 	     ComponentSampleModel csm1, csm2;
	     DataBufferInt db1, db2;
 	     csm2.setDataElements(x, y,
                            csm1.getDataElements(x, y, null, db1), db2);
 </pre>

如果 <code>SampleModel</code> 对象具有相同数量的 band，相应 band 具有相同数量的每样本位数，并且 <code>TransferType</code> 相同，则使用 <code>getDataElements</code> 和 <code>setDataElements</code> 在两个 <code>DataBuffer/SampleModel</code> 对之间传输是合法的。
 <p>
如果 <code>obj</code> 不为 <code>null</code>，则它应该是 <code>TransferType</code> 类型的基本数组。否则，将抛出 <code>ClassCastException</code>。如果坐标不在边界内部，或者 <code>obj</code> 不为 <code>null</code> 且不足以保存像素数据，则抛出 <code>ArrayIndexOutOfBoundsException</code>。

@param x 像素位置的 X 坐标
@param y 像素位置的 Y 坐标
@param obj   如果为非 <code>null</code>，则是一个要在其中返回像素数据的基本数组
@param data      包含图像数据的 <code>DataBuffer</code>
@return 指定像素的数据
@see #setDataElements(int, int, Object, DataBuffer)

@throws NullPointerException 如果数据为 null。
@throws ArrayIndexOutOfBoundsException 如果坐标不在边界内部，或者 obj 太小而不能保存输出。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.awt.image.ComponentSampleModel.getPixel(int x, int y, int[] iArray, DataBuffer data)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对应 int 数组中指定像素的所有样本，每个数组元素对应一个样本。如果坐标不在边界内部，则抛出 <code>ArrayIndexOutOfBoundsException</code>。
@param x 像素位置的 X 坐标
@param y 像素位置的 Y 坐标
@param iArray    如果为非 null，则返回此数组中的样本
@param data      包含图像数据的 DataBuffer
@return 指定像素的样本。
@see #setPixel(int, int, int[], DataBuffer)

@throws NullPointerException 如果数据为 null。
@throws ArrayIndexOutOfBoundsException 如果坐标不在边界内部，或者 iArray 太小而不能保存输出。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.awt.image.ComponentSampleModel.getPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对应 int 数组中像素指定矩形区域的所有样本（每个数组元素对应一个样本）。如果坐标不在边界内部，则抛出 <code>ArrayIndexOutOfBoundsException</code>。
@param x 左上角像素位置的 X 坐标
@param y 左上角像素位置的 Y 坐标
@param w         像素矩形区域的宽度
@param h         像素矩形区域的高度
@param iArray    如果为非 null，则返回此数组中的样本
@param data      包含图像数据的 DataBuffer
@return 指定区域内的像素的样本。
@see #setPixels(int, int, int, int, int[], DataBuffer)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.ComponentSampleModel.getSample(int x, int y, int b, DataBuffer data)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 int 形式返回指定 band 中对应于 (x,y) 处像素的样本。如果坐标不在边界内部，则可能抛出 <code>ArrayIndexOutOfBoundsException</code>。
@param x 像素位置的 X 坐标
@param y 像素位置的 Y 坐标
@param b         要返回的 band
@param data      包含图像数据的 <code>DataBuffer</code>
@return 指定像素的指定 band 中的样本
@see #setSample(int, int, int, int, DataBuffer)

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.image.ComponentSampleModel.getSampleFloat(int x, int y, int b, DataBuffer data)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 float 形式返回指定 band 中对应于 (x,y) 处像素的样本。如果坐标不在边界内部，则抛出 <code>ArrayIndexOutOfBoundsException</code>。
@param x 像素位置的 X 坐标
@param y 像素位置的 Y 坐标
@param b         要返回的 band
@param data      包含图像数据的 DataBuffer
@return 表示指定像素的指定 band 中样本的 float 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.image.ComponentSampleModel.getSampleDouble(int x, int y, int b, DataBuffer data)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 double 形式返回指定 band 中对应于 (x,y) 处像素的样本。如果坐标不在边界内部，则抛出 <code>ArrayIndexOutOfBoundsException</code>。
@param x 像素位置的 X 坐标
@param y 像素位置的 Y 坐标
@param b         要返回的 band
@param data      包含图像数据的 DataBuffer
@return 表示指定像素的指定 band 中样本的 double 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.awt.image.ComponentSampleModel.getSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 band 中对应于 int 数组中指定像素矩形的样本，每个数据数组元素一个样本。如果坐标不在边界内部，则抛出 <code>ArrayIndexOutOfBoundsException</code>。
@param x 左上角像素位置的 X 坐标
@param y 左上角像素位置的 Y 坐标
@param w         像素矩形区域的宽度
@param h         像素矩形区域的高度
@param b         要返回的 band
@param iArray    如果为非 <code>null</code>，则返回此数组中的样本
@param data      包含图像数据的 <code>DataBuffer</code>
@return 指定像素的指定 band 中的样本
@see #setSamples(int, int, int, int, int, int[], DataBuffer)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ComponentSampleModel.setDataElements(int x, int y, Object obj, DataBuffer data)
<!-- END KEY -->
<!-- BEGIN DATA -->

根据 <code>TransferType</code> 类型基本数组设置指定 <code>DataBuffer</code> 中单个像素的数据。对于 <code>ComponentSampleModel</code>，设置的数据与 data 类型相同，且每个数组元素传输一个样本。
 <p>
以下代码说明了如何将像素的数据从 <code>DataBuffer</code> <code>db1</code>（其存储布局由 <code>ComponentSampleModel</code> <code>csm1</code> 描述）传输到 <code>DataBuffer</code> <code>db2</code>（其存储布局由 <code>ComponentSampleModel</code> <code>csm2</code> 描述）。该传输通常比使用 <code>getPixel</code> 和 <code>setPixel</code> 更有效。
 <pre>
 	     ComponentSampleModel csm1, csm2;
	     DataBufferInt db1, db2;
 	     csm2.setDataElements(x, y, csm1.getDataElements(x, y, null, db1),
                            db2);
 </pre>
如果 <code>SampleModel</code> 对象具有相同数量的 band，相应 band 具有相同数量的每样本位数，并且 <code>TransferType</code> 相同，则使用 <code>getDataElements</code> 和 <code>setDataElements</code> 在两个 <code>DataBuffer/SampleModel</code> 对之间传输是合法的。
 <p>
如果 <code>obj</code> 不是 <code>TransferType</code> 类型基本数组，则返回 <code>ClassCastException</code>。如果坐标不在边界内部，或者 <code>obj</code> 不足以保存像素数据，则抛出 <code>ArrayIndexOutOfBoundsException</code>。
@param x 像素位置的 X 坐标
@param y 像素位置的 Y 坐标
@param obj       包含像素数据的基本数组
@param data      包含图像数据的 DataBuffer
@see #getDataElements(int, int, Object, DataBuffer)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ComponentSampleModel.setPixel(int x, int y, int[] iArray, DataBuffer data)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用输入样本的 int 数组设置 <code>DataBuffer</code> 中的像素。如果坐标不在边界内部，则抛出 <code>ArrayIndexOutOfBoundsException</code>。
@param x 像素位置的 X 坐标
@param y 像素位置的 Y 坐标
@param iArray    int 数组形式的输入样本
@param data      包含图像数据的 DataBuffer
@see #getPixel(int, int, int[], DataBuffer)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ComponentSampleModel.setPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 int 数组（每个数组元素包含一个样本）设置对应于像素矩形区域的所有样本。如果坐标不在边界内部，则抛出 <code>ArrayIndexOutOfBoundsException</code>。
@param x 像素位置左上角的 X 坐标
@param y 像素位置左上角的 Y 坐标
@param w         像素矩形区域的宽度
@param h         像素矩形区域的高度
@param iArray    int 数组形式的输入样本
@param data      包含图像数据的 DataBuffer
@see #getPixels(int, int, int, int, int[], DataBuffer)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ComponentSampleModel.setSample(int x, int y, int b, int s, DataBuffer data)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用输入的 int 值，在指定 band 中设置对应于 <code>DataBuffer</code> 中 (x,y) 处像素的样本。如果坐标不在边界内部，则抛出 <code>ArrayIndexOutOfBoundsException</code>。
@param x 像素位置的 X 坐标
@param y 像素位置的 Y 坐标
@param b         要设置的 band
@param s         int 类型的输入样本
@param data      包含图像数据的 DataBuffer
@see #getSample(int, int, int, DataBuffer)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ComponentSampleModel.setSample(int x, int y, int b, float s, DataBuffer data)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用输入的 float 值，在指定 band 中设置对应于 <code>DataBuffer</code> 中 (x,y) 处像素的样本。如果坐标不在边界内部，则抛出 <code>ArrayIndexOutOfBoundsException</code>。
@param x 像素位置的 X 坐标
@param y 像素位置的 Y 坐标
@param b         要设置的 band
@param s         float 类型的输入样本
@param data      包含图像数据的 DataBuffer
@see #getSample(int, int, int, DataBuffer)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ComponentSampleModel.setSample(int x, int y, int b, double s, DataBuffer data)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用输入的 double 值，在指定 band 中设置对应于 <code>DataBuffer</code> 中 (x,y) 处像素的样本。如果坐标不在边界内部，则抛出 <code>ArrayIndexOutOfBoundsException</code>。
@param x 像素位置的 X 坐标
@param y 像素位置的 Y 坐标
@param b         要设置的 band
@param s         double 类型的输入样本
@param data      包含图像数据的 DataBuffer
@see #getSample(int, int, int, DataBuffer)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ComponentSampleModel.setSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据 int 数组（每个数据数组元素包含一个样本），在指定 band 中设置对应于指定像素矩形的样本。如果坐标不在边界内部，则抛出 <code>ArrayIndexOutOfBoundsException</code>。
@param x 像素位置左上角的 X 坐标
@param y 像素位置左上角的 Y 坐标
@param w         像素矩形区域的宽度
@param h         像素矩形区域的高度
@param b         要设置的 band
@param iArray    int 数组形式的输入样本
@param data      包含图像数据的 DataBuffer
@see #getSamples(int, int, int, int, int, int[], DataBuffer)

<!-- END DATA -->
