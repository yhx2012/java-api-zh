<!-- BEGIN KEY -->
public class java.awt.image.ImageFilter extends java.lang.Object implements java.awt.image.ImageConsumer, java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
此类为用于从 ImageProducer 向 ImageConsumer 传递数据的接口方法集合实现了一个过滤器。它应该与 FilteredImageSource 对象结合使用，以生成现有图像的过滤版本。它是一个基类，提供的方法并没有实际实现过滤功能，因此对通过的数据并没有任何作用，是一个“空过滤器”。过滤器应该创建此类的子类，并且重写那些处理需要过滤数据的方法并根据需要修改方法。

@see FilteredImageSource
@see ImageConsumer

@version	1.31 07/16/04
@author 	Jim Graham

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.image.ImageConsumer java.awt.image.ImageFilter.consumer
<!-- END KEY -->
<!-- BEGIN DATA -->
特定图像数据流的使用者，而此 ImageFilter 实例也是为这个使用者来过滤数据的。它不是在构造方法中进行初始化的，而是当 FilteredImageSource 正在为特定图像数据流创建此对象的惟一实例时，在 getFilterInstance() 方法调用期间进行初始化。
@see #getFilterInstance
@see ImageConsumer

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.ImageFilter java.awt.image.ImageFilter.getFilterInstance(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回为指定 ImageConsumer 实际执行过滤的 ImageFilter 对象的惟一实例。默认的实现只是复制此对象。
 <p>
注：此方法由其像素正在被过滤的 Image 的 ImageProducer 调用。使用此类过滤图像像素的开发人员应该避免直接调用此方法，因为该调用操作可能影响过滤操作。
@param ic 指定的 <code>ImageConsumer</code>
@return 用于为指定 <code>ImageConsumer</code> 执行过滤的 <code>ImageFilter</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ImageFilter.setDimensions(int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤 ImageConsumer 接口的 setDimensions 方法中所提供的信息。
 <p>
注：此方法由其像素正在被过滤的 Image 的 ImageProducer 调用。使用此类过滤图像像素的开发人员应该避免直接调用此方法，因为该调用操作可能影响过滤操作。
@see ImageConsumer#setDimensions

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ImageFilter.setProperties(java.util.Hashtable<?, ?> props)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加一个属性，来指示已通过的过滤器流，并在这之后从源对象传递这些属性。
 <p>
注：此方法由其像素正在被过滤的 Image 的 ImageProducer 调用。使用此类过滤图像像素的开发人员应该避免直接调用此方法，因为该调用操作可能影响过滤操作。  

@param props 来自源对象的属性
@exception NullPointerException 如果 <code>props</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ImageFilter.setColorModel(ColorModel model)
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤 ImageConsumer 接口的 setColorModel 方法中所提供的信息。
 <p>
注：此方法由其像素正在被过滤的 Image 的 ImageProducer 调用。使用此类过滤图像像素的开发人员应该避免直接调用此方法，因为该调用操作可能影响过滤操作。
@see ImageConsumer#setColorModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ImageFilter.setHints(int hints)
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤 ImageConsumer 接口的 setHints 方法中所提供的信息。
 <p>
注：此方法由其像素正在被过滤的 Image 的 ImageProducer 调用。使用此类过滤图像像素的开发人员应该避免直接调用此方法，因为该调用操作可能影响过滤操作。
@see ImageConsumer#setHints

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ImageFilter.setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize)
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤由 ImageConsumer 接口的 setPixels 方法所提供的信息，该方法以 byte 数组为参数。
 <p>
注：此方法由其像素正在被过滤的 Image 的 ImageProducer 调用。使用此类过滤图像像素的开发人员应该避免直接调用此方法，因为该调用操作可能影响过滤操作。
@see ImageConsumer#setPixels

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ImageFilter.setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤由 ImageConsumer 接口的 setPixels 方法所提供的信息，该方法以整数数组为参数。
 <p>
注：此方法由其像素正在被过滤的 Image 的 ImageProducer 调用。使用此类过滤图像像素的开发人员应该避免直接调用此方法，因为该调用操作可能影响过滤操作。
@see ImageConsumer#setPixels

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ImageFilter.imageComplete(int status)
<!-- END KEY -->
<!-- BEGIN DATA -->
过滤 ImageConsumer 接口的 imageComplete 方法中所提供的信息。
 <p>
注：此方法由其像素正在被过滤的 Image 的 ImageProducer 调用。使用此类过滤图像像素的开发人员应该避免直接调用此方法，因为该调用操作可能影响过滤操作。
@see ImageConsumer#imageComplete

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ImageFilter.resendTopDownLeftRight(ImageProducer ip)
<!-- END KEY -->
<!-- BEGIN DATA -->
响应来自 <code>ImageConsumer</code> 的一个按 TopDownLeftRight (TDLR) 顺序将像素数据重新发送的请求。当由此 <code>ImageFilter</code> 的某个实例所送入数据的 <code>ImageConsumer</code> 请求按 TDLR 顺序重新发送数据时，<code>FilteredImageSource</code> 就调用 <code>ImageFilter</code> 的此方法。

 <p>

<code>ImageFilter</code> 子类不一定重写此方法，这取决于它是否可以以及如何以 TDLR 顺序发送数据。有三种可能的响应方式：

 <ul>
 <li>
不重写此方法。这使得该子类使用默认的实现，即将这一请求转发到指定的 <code>ImageProducer</code>，而这一 <code>ImageProducer</code> 把这一过滤器当作请求的 <code>ImageConsumer</code>。如果过滤器可以确定其上游生产者对象以 TDLR 顺序发送像素，那么它也将以 TDLR 顺序转发像素，那么该行为是合适的。

 <li>
重写该方法，只是简单地发送数据。如果过滤器可以自行处理请求（例如，如果生成的像素已经保存在某类缓冲区中），则此行为是合适的。

 <li>
重写此方法，不执行任何操作。如果过滤器无法以 TDLR 顺序生成过滤数据，则此行为是合适的。
 </ul> 

@see ImageProducer#requestTopDownLeftRightResend
@param ip 为此过滤器实例送入数据的 ImageProducer，必要时也可是应该将请求转发到的 ImageProducer
@exception NullPointerException 如果 <code>ip</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.image.ImageFilter.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
复制此对象。

<!-- END DATA -->
