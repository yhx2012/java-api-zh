<!-- BEGIN KEY -->
public interface java.awt.image.ImageConsumer
<!-- END KEY -->
<!-- BEGIN DATA -->
对通过 ImageProducer 接口的图像数据感兴趣的对象接口。将一个使用者添加到图像生产者时，生产者会使用此接口中定义的方法调用传递所有关于图像的数据。

@see ImageProducer

@version	1.23 07/16/04
@author 	Jim Graham

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.image.ImageConsumer.RANDOMPIXELORDER
<!-- END KEY -->
<!-- BEGIN DATA -->
按随机顺序传递像素。该字段告知 ImageConsumer 不要使用任何依赖于像素传递顺序的优化方法，在没有任何对 setHints 方法的调用时这应是默认的假定情况。
@see #setHints

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.image.ImageConsumer.TOPDOWNLEFTRIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
按从上到下、从左到右的顺序传递像素。
@see #setHints

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.image.ImageConsumer.COMPLETESCANLINES
<!-- END KEY -->
<!-- BEGIN DATA -->
按照一次（多个）完整扫描行的方式传递像素。
@see #setHints

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.image.ImageConsumer.SINGLEPASS
<!-- END KEY -->
<!-- BEGIN DATA -->
以单通道的方式传递像素。每个像素只出现在某一个对 setPixels 方法的调用中。不符合此标准的一种图像格式是渐变 JPEG 图像，该图像以多通道的方式定义像素，每个通道都比前一个通道更为精确。
@see #setHints

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.image.ImageConsumer.SINGLEFRAME
<!-- END KEY -->
<!-- BEGIN DATA -->
该图像包含单幅静态图像。像素将在调用 setPixels 方法时定义，不再传递图像数据之后，将调用带有 STATICIMAGEDONE 标志的 imageComplete 方法。不符合这些标准的一种图像类型是视频馈送输出，或由用户操作的 3D 呈现表示形式。通过调用带有 SINGLEFRAMEDONE 标志的 imageComplete 方法来指示这些图像类型中每一帧的结束。
@see #setHints
@see #imageComplete

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.image.ImageConsumer.IMAGEERROR
<!-- END KEY -->
<!-- BEGIN DATA -->
生成图像时遇到错误。
@see #imageComplete

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.image.ImageConsumer.SINGLEFRAMEDONE
<!-- END KEY -->
<!-- BEGIN DATA -->
图像的某一帧已完成，但还有更多的帧要传递。
@see #imageComplete

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.image.ImageConsumer.STATICIMAGEDONE
<!-- END KEY -->
<!-- BEGIN DATA -->
图像已完成，不再有像素或帧要传递。
@see #imageComplete

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.image.ImageConsumer.IMAGEABORTED
<!-- END KEY -->
<!-- BEGIN DATA -->
图像创建进程被故意中止。
@see #imageComplete

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ImageConsumer.setDimensions(int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 setDimensions 方法调用报告源图像尺寸。
@param width 源图像的宽度
@param height 源图像的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ImageConsumer.setProperties(java.util.Hashtable<?, ?> props)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置与此图像关联的可扩展属性列表。
@param props 要与此图像关联的属性列表

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ImageConsumer.setColorModel(ColorModel model)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置用于大多数像素的 ColorModel 对象，这些像素使用 setPixels 方法调用进行报告。注意，使用 setPixels 传递的每个像素集合都包含其自己的 ColorModel 对象，所以不应假设此模型是传递像素值时使用的惟一模型。可以看到多个 ColorModel 对象时，一种值得注意的情况是过滤图像，对于它所过滤的每一个像素集合，过滤器确定是否可以使用原 ColorModel 不做改动地发送像素，或者是否应该使用对于过滤过程更方便的 ColorModel 修改（过滤）并传递像素。
@param model 指定的 <code>ColorModel</code>
@see ColorModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ImageConsumer.setHints(int hintflags)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 ImageConsumer 用于处理 ImageProducer 所传递像素的提示。ImageProducer 能以任意顺序传递像素，但是如果 ImageConsumer 预先知道某些有关像素传递方式的信息，那么它就能够更高效或以更高的质量将像素缩放或转换到目标 ColorModel。应该在调用带提示位掩码（其中包含有关像素传递方式的信息）的任意 setPixels 方法前调用 setHints 方法。如果 ImageProducer 未遵从指定的提示准则，则结果是不明确的。
@param hintflags ImageConsumer 用于处理像素的提示集合

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ImageConsumer.setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize)
<!-- END KEY -->
<!-- BEGIN DATA -->
一次或多次调用此方法来传递图像的像素。每次调用都指定像素数组中所含源像素的矩形位置和大小。应该使用指定的 ColorModel 对象将像素转换为相应的颜色和 alpha 分量。像素 (m,n) 存储在像素数组的索引 (n * scansize + m + off) 处。使用此方法所传递的像素都以 byte 类型存储。
@param x 要设置的像素区域左上角的 X 坐标
@param y 要设置的像素区域左上角的 Y 坐标 
@param w 像素区域的宽度
@param h 像素区域的高度
@param model 指定的 <code>ColorModel</code>
@param pixels 像素数组
@param off <code>pixels</code> 数组中的偏移量
@param scansize <code>pixels</code> 数组中一行像素到下一行的距离
@see ColorModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ImageConsumer.setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)
<!-- END KEY -->
<!-- BEGIN DATA -->
一次或多次调用 setPixels 方法来传递图像的像素。每次调用都指定像素数组中所含源像素的矩形位置和大小。应该使用指定的 ColorModel 对象将像素转换为相应的颜色和 alpha 分量。像素 (m,n) 存储在像素数组的索引 (n * scansize + m + off) 处。使用此方法所传递的像素都以 int 形式存储。此方法都以 int 形式存储。
@param x 要设置的像素区域左上角的 X 坐标
@param y 要设置的像素区域左上角的 Y 坐标
@param w 像素区域的宽度
@param h 像素区域的高度
@param model 指定的 <code>ColorModel</code>
@param pixels 像素数组
@param off <code>pixels</code> 数组中的偏移量
@param scansize <code>pixels</code> 数组中一行像素到下一行的距离
@see ColorModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.ImageConsumer.imageComplete(int status)
<!-- END KEY -->
<!-- BEGIN DATA -->
当 ImageProducer 已完成源图像所含所有像素的传递时，或者已完成多帧动画的单个帧时，或者加载或生成图像中出现错误时，就调用 imageComplete 方法。除非 ImageConsumer 还对后续的帧感兴趣，否则此时应该从以 ImageProducer 注册的使用者列表中将其自身移除。
@param status 图像加载的状态
@see ImageProducer#removeConsumer

<!-- END DATA -->
