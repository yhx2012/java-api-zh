<!-- BEGIN KEY -->
public final class java.awt.image.DataBufferInt extends java.awt.image.DataBuffer
<!-- END KEY -->
<!-- BEGIN DATA -->
此类扩展了 <CODE>DataBuffer</CODE>，并在内部以整数形式存储数据。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.DataBufferInt(int size)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有单个存储单元和指定大小且基于整数的 <CODE>DataBuffer</CODE>。

@param size <CODE>DataBuffer</CODE> 的大小。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.DataBufferInt(int size, int numBanks)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定数量的存储单元（这些存储单元都指定了大小）且基于整数的 <CODE>DataBuffer</CODE>。

@param size <CODE>DataBuffer</CODE> 中的存储单元大小。
@param numBanks <CODE>DataBuffer</CODE> 中的存储单元数量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.DataBufferInt(int[] dataArray, int size)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定数组构造具有单个存储单元且基于整数的 <CODE>DataBuffer</CODE>。此 <CODE>DataBuffer</CODE> 的访问器只能使用头 <CODE>size</CODE> 个元素。<CODE>dataArray</CODE> 必须足够大，能够存储 <CODE>size</CODE> 个元素。

@param dataArray <CODE>DataBuffer</CODE> 的整数数组。
@param size <CODE>DataBuffer</CODE> 存储单元大小。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.DataBufferInt(int[] dataArray, int size, int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定数组、大小和偏移量构造具有单个存储单元且基于整数的 <CODE>DataBuffer</CODE>。<CODE>dataArray</CODE> 至少必须有 <CODE>offset</CODE> + <CODE>size</CODE> 个元素。此 <CODE>DataBuffer</CODE> 的访问器只能使用 <CODE>offset</CODE> 到 <CODE>offset</CODE> + <CODE>size</CODE> - 1 个元素。

@param dataArray <CODE>DataBuffer</CODE> 的整数数组。
@param size <CODE>DataBuffer</CODE> 存储单元大小。
@param offset <CODE>dataArray</CODE> 的偏移量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.DataBufferInt(int[][] dataArray, int size)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定数组且基于整数的 <CODE>DataBuffer</CODE>。存储单元的数量将等于 <CODE>dataArray.length</CODE>。此 <CODE>DataBuffer</CODE> 的访问器只能使用每个数组的头 <CODE>size</CODE> 个元素。

@param dataArray <CODE>DataBuffer</CODE> 的整数数组。
@param size <CODE>DataBuffer</CODE> 中的存储单元大小。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.DataBufferInt(int[][] dataArray, int size, int[] offsets)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定数组、大小和偏移量且基于整数的 <CODE>DataBuffer</CODE>。存储单元的数量等于 <CODE>dataArray.length</CODE>。每个数组至少必须和 <CODE>size</CODE> 加上相应偏移量大小相同。每个 <CODE>dataArray</CODE> 项的偏移量数组中必须有一个项。对于每个存储单元，此 <CODE>DataBuffer</CODE> 的访问器只能使用 <CODE>offset</CODE> 到 <CODE>offset</CODE> + <CODE>size</CODE> - 1 个元素。

@param dataArray <CODE>DataBuffer</CODE> 的整数数组。
@param size <CODE>DataBuffer</CODE> 中的存储单元大小。
@param offsets 每个数组中的偏移量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.awt.image.DataBufferInt.getData()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <CODE>DataBuffer</CODE> 中的默认（第一个）int 数据数组。
    
@return 第一个整数数据数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.awt.image.DataBufferInt.getData(int bank)
<!-- END KEY -->
<!-- BEGIN DATA -->

返回指定存储单元的数据数组。    
   
@param bank 要获取其数据数组的存储单元。
@return 指定存储单元的数据数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[][] java.awt.image.DataBufferInt.getBankData()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回所有存储单元的数据数组。
@return 所有数据数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.DataBufferInt.getElem(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回第一个（默认）存储单元中所请求的数据数组元素。
 
@param i 要获取的数据数组元素。
@return 所请求的整数类型的数据数组元素。
@see #setElem(int, int)
@see #setElem(int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.image.DataBufferInt.getElem(int bank, int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定存储单元中所请求的数据数组元素。
 
@param bank 要从中获取数据数组元素的存储单元。
@param i 要获取的数据数组元素。
@return 所请求的整数类型的数据数组元素。
@see #setElem(int, int)
@see #setElem(int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.DataBufferInt.setElem(int i, int val)
<!-- END KEY -->
<!-- BEGIN DATA -->
将第一个（默认）存储单元中所请求的数据数组元素设置为指定值。

@param i 要获取的数据数组元素。
@param val 要将数据数组元素设置为的整数值。
@see #getElem(int)
@see #getElem(int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.DataBufferInt.setElem(int bank, int i, int val)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定存储单元中所请求的数据数组元素设置为整数值 <CODE>i</CODE>。
@param bank 要在其中设置数据数组元素的存储单元。
@param i 要获取的数据数组元素。
@param val 要将指定数据数组元素设置为的整数值。
@see #getElem(int)
@see #getElem(int, int)

<!-- END DATA -->
