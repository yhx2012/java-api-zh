<!-- BEGIN KEY -->
public class java.awt.Event extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<b>注：</b><code>Event</code> 类已废弃，只可用于向后兼容。它已经由 <code>AWTEvent</code> 类及其子类所取代。
 <p>
<code>Event</code> 是一个与平台无关的类，它封装了 Java 1.0 事件模型中来自平台图形用户界面的事件。在 Java&nbsp;1.1 和以后的版本中，<code>Event</code> 类只针对向后兼容进行维护。此类描述中的信息可以协助程序员将 Java 1.0 程序转换成新的事件模型。
 <p>
在 Java&nbsp;1.0 事件模型中，包含 {@link Event#id} 字段的事件指出它是什么类型的事件，以及与该事件有关的其他 <code>Event</code> 变量。
 <p>
对于键盘事件来说，{@link Event#key} 所包含的值指出要激活哪个键，{@link Event#modifiers} 包含该事件的修饰符。对于 KEY_PRESS 和 KEY_RELEASE 事件的 id，<code>key</code> 的值是该键的 unicode 字符代码。对于 KEY_ACTION 和 KEY_ACTION_RELEASE，<code>key</code> 的值是 <code>Event</code> 类（<code>PGUP</code>、<code>PGDN</code>、<code>F1</code>、<code>F2</code> 等）中所定义的某个动作-键标识符。

@version 1.75 12/19/03
@author     Sami Shaio
@since      JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.SHIFT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
此标志指示当事件发生时按下 Shift 键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.CTRL_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
此标志指示当事件发生时按下 Control 键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.META_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
此标志指示当事件发生时按下 Meta 键。对于鼠标事件，此标志指示按下或释放右边按钮。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.ALT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
此标志指示当事件发生时按下 Alt 键。对于鼠标事件，此标志指示按下或释放中间鼠标按钮。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.HOME
<!-- END KEY -->
<!-- BEGIN DATA -->
Home 键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.END
<!-- END KEY -->
<!-- BEGIN DATA -->
End 键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.PGUP
<!-- END KEY -->
<!-- BEGIN DATA -->
Page Up 键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.PGDN
<!-- END KEY -->
<!-- BEGIN DATA -->
Page Down 键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.UP
<!-- END KEY -->
<!-- BEGIN DATA -->
Up Arrow 键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.DOWN
<!-- END KEY -->
<!-- BEGIN DATA -->
Down Arrow 键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.LEFT
<!-- END KEY -->
<!-- BEGIN DATA -->
Left Arrow 键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.RIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
Right Arrow 键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.F1
<!-- END KEY -->
<!-- BEGIN DATA -->
F1 功能键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.F2
<!-- END KEY -->
<!-- BEGIN DATA -->
F2 功能键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.F3
<!-- END KEY -->
<!-- BEGIN DATA -->
F3 功能键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.F4
<!-- END KEY -->
<!-- BEGIN DATA -->
F4 功能键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.F5
<!-- END KEY -->
<!-- BEGIN DATA -->
F5 功能键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.F6
<!-- END KEY -->
<!-- BEGIN DATA -->
F6 功能键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.F7
<!-- END KEY -->
<!-- BEGIN DATA -->
F7 功能键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.F8
<!-- END KEY -->
<!-- BEGIN DATA -->
F8 功能键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.F9
<!-- END KEY -->
<!-- BEGIN DATA -->
F9 功能键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.F10
<!-- END KEY -->
<!-- BEGIN DATA -->
F10 功能键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.F11
<!-- END KEY -->
<!-- BEGIN DATA -->
F11 功能键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.F12
<!-- END KEY -->
<!-- BEGIN DATA -->
F12 功能键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.PRINT_SCREEN
<!-- END KEY -->
<!-- BEGIN DATA -->
Print Screen 键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.SCROLL_LOCK
<!-- END KEY -->
<!-- BEGIN DATA -->
Scroll Lock 键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.CAPS_LOCK
<!-- END KEY -->
<!-- BEGIN DATA -->
Caps Lock 键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.NUM_LOCK
<!-- END KEY -->
<!-- BEGIN DATA -->
Num Lock 键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.PAUSE
<!-- END KEY -->
<!-- BEGIN DATA -->
Pause 键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.INSERT
<!-- END KEY -->
<!-- BEGIN DATA -->
Insert 键，一个非 ASCII 操作键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.ENTER
<!-- END KEY -->
<!-- BEGIN DATA -->
Enter 键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.BACK_SPACE
<!-- END KEY -->
<!-- BEGIN DATA -->
BackSpace 键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.TAB
<!-- END KEY -->
<!-- BEGIN DATA -->
Tab 键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.ESCAPE
<!-- END KEY -->
<!-- BEGIN DATA -->
Escape 键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.DELETE
<!-- END KEY -->
<!-- BEGIN DATA -->
Delete 键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.WINDOW_DESTROY
<!-- END KEY -->
<!-- BEGIN DATA -->
用户要求窗口管理程序关掉窗口。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.WINDOW_EXPOSE
<!-- END KEY -->
<!-- BEGIN DATA -->
用户要求窗口管理程序公开窗口。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.WINDOW_ICONIFY
<!-- END KEY -->
<!-- BEGIN DATA -->
用户要求窗口管理程序图标化窗口。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.WINDOW_DEICONIFY
<!-- END KEY -->
<!-- BEGIN DATA -->
用户要求窗口管理程序取消窗口图标化。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.WINDOW_MOVED
<!-- END KEY -->
<!-- BEGIN DATA -->
用户要求窗口管理程序移动窗口。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.KEY_PRESS
<!-- END KEY -->
<!-- BEGIN DATA -->
用户已经按下一个常规键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.KEY_RELEASE
<!-- END KEY -->
<!-- BEGIN DATA -->
用户已经释放一个常规键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.KEY_ACTION
<!-- END KEY -->
<!-- BEGIN DATA -->
用户已经按下一个非 ASCII <em>action</em> 键。<code>key</code> 字段包含一个值，指示发生在某个操作键上的事件，操作键包括 12 个功能键、箭头（光标）键、Page Up、Page Down、Home、End、Print Screen、Scroll Lock、Caps Lock、Num Lock、Pause 和 Insert。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.KEY_ACTION_RELEASE
<!-- END KEY -->
<!-- BEGIN DATA -->
用户已经释放一个非 ASCII <em>action</em> 键。<code>key</code> 字段包含一个值，指示发生在某个操作键中的事件，操作键包括 12 个功能键、箭头（光标）键、Page Up、Page Down、Home、End、Print Screen、Scroll Lock、Caps Lock、Num Lock、Pause 和 Insert。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.MOUSE_DOWN
<!-- END KEY -->
<!-- BEGIN DATA -->
用户已经按下鼠标按钮。<code>ALT_MASK</code> 标志指示中间按钮已经被按下。<code>META_MASK</code> 标志指示右按钮已经被按下。
@see     java.awt.Event#ALT_MASK
@see     java.awt.Event#META_MASK

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.MOUSE_UP
<!-- END KEY -->
<!-- BEGIN DATA -->
用户已经释放鼠标按钮。<code>ALT_MASK</code> 标志指示中间按钮已经被释放。<code>META_MASK</code> 标志指示右边按钮已经被释放。
@see     java.awt.Event#ALT_MASK
@see     java.awt.Event#META_MASK

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.MOUSE_MOVE
<!-- END KEY -->
<!-- BEGIN DATA -->
鼠标已经移动，没有按钮被按下。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.MOUSE_ENTER
<!-- END KEY -->
<!-- BEGIN DATA -->
鼠标已经进入了一个组件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.MOUSE_EXIT
<!-- END KEY -->
<!-- BEGIN DATA -->
鼠标已经退出了一个组件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.MOUSE_DRAG
<!-- END KEY -->
<!-- BEGIN DATA -->
鼠标已经移动，同时按钮被按下。<code>ALT_MASK</code> 标志指示中间按钮正在被按下。<code>META_MASK</code> 标志指示右边按钮正在被按下。
@see     java.awt.Event#ALT_MASK
@see     java.awt.Event#META_MASK

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.SCROLL_LINE_UP
<!-- END KEY -->
<!-- BEGIN DATA -->
用户已经激活了滚动条的 <em>line up</em> 区域。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.SCROLL_LINE_DOWN
<!-- END KEY -->
<!-- BEGIN DATA -->
用户已经激活了滚动条的 <em>line down</em> 区域。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.SCROLL_PAGE_UP
<!-- END KEY -->
<!-- BEGIN DATA -->
用户已经激活了滚动条的 <em>page up</em> 区域。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.SCROLL_PAGE_DOWN
<!-- END KEY -->
<!-- BEGIN DATA -->
用户已经激活了滚动条的 <em>page down</em> 区域。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.SCROLL_ABSOLUTE
<!-- END KEY -->
<!-- BEGIN DATA -->
用户已经将滚动条中的&ldquo;气泡&rdquo;（即翻阅标志）移到一个&ldquo;绝对的&rdquo;位置，而不是相对最后位置的偏移量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.SCROLL_BEGIN
<!-- END KEY -->
<!-- BEGIN DATA -->
滚动开始事件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.SCROLL_END
<!-- END KEY -->
<!-- BEGIN DATA -->
滚动结束事件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.LIST_SELECT
<!-- END KEY -->
<!-- BEGIN DATA -->
已经选择了列表中的一项。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.LIST_DESELECT
<!-- END KEY -->
<!-- BEGIN DATA -->
已经取消选择列表中的一项。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.ACTION_EVENT
<!-- END KEY -->
<!-- BEGIN DATA -->
此事件指示用户想要某个事件发生。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.LOAD_FILE
<!-- END KEY -->
<!-- BEGIN DATA -->
文件加载事件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.SAVE_FILE
<!-- END KEY -->
<!-- BEGIN DATA -->
文件保存事件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.GOT_FOCUS
<!-- END KEY -->
<!-- BEGIN DATA -->
组件获得焦点。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Event.LOST_FOCUS
<!-- END KEY -->
<!-- BEGIN DATA -->
组件失去焦点。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.Event.target
<!-- END KEY -->
<!-- BEGIN DATA -->
目标组件。这指示事件针对该组件发生，或事件与该组件关联。此对象已经由 AWTEvent.getSource() 取代。

@serial
@see java.awt.AWTEvent#getSource()

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.awt.Event.when
<!-- END KEY -->
<!-- BEGIN DATA -->
时间戳。由 InputEvent.getWhen() 取代。

@serial
@see java.awt.event.InputEvent#getWhen()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Event.id
<!-- END KEY -->
<!-- BEGIN DATA -->
指示事件是什么类型的事件，其他哪个 <code>Event</code> 变量与该事件有关。它已经由 AWTEvent.getID() 取代。

@serial
@see java.awt.AWTEvent#getID()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Event.x
<!-- END KEY -->
<!-- BEGIN DATA -->
事件的 <i>x</i> 坐标。由 MouseEvent.getX() 取代。

@serial
@see java.awt.event.MouseEvent#getX()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Event.y
<!-- END KEY -->
<!-- BEGIN DATA -->
事件的 <i>y</i> 坐标。由 MouseEvent.getY() 取代。

@serial
@see java.awt.event.MouseEvent#getY()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Event.key
<!-- END KEY -->
<!-- BEGIN DATA -->
在键盘事件中被按下的键的键代码。这已经由 KeyEvent.getKeyCode() 取代。

@serial
@see java.awt.event.KeyEvent#getKeyCode()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Event.modifiers
<!-- END KEY -->
<!-- BEGIN DATA -->
修饰符键的状态。这已经由 InputEvent.getModifiers() 取代。在 java 1.1 中，MouseEvent 和 KeyEvent 是 InputEvent 的子类。

@serial
@see java.awt.event.InputEvent#getModifiers()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Event.clickCount
<!-- END KEY -->
<!-- BEGIN DATA -->
对于 <code>MOUSE_DOWN</code> 事件来说，此字段指示连续点击的次数。对于其他事件，其值为 <code>0</code>。此字段由 MouseEvent.getClickCount() 取代。

@serial
@see java.awt.event.MouseEvent#getClickCount().

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.Event.arg
<!-- END KEY -->
<!-- BEGIN DATA -->
事件的任意参数。此字段的值取决于事件的类型。<code>arg</code> 已经由事件指定的属性取代。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Event java.awt.Event.evt
<!-- END KEY -->
<!-- BEGIN DATA -->
下一事件。将事件放入到链接列表时设置此字段。这已经由 EventQueue 取代。

@serial
@see java.awt.EventQueue

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean java.awt.Event.consumed
<!-- END KEY -->
<!-- BEGIN DATA -->
此字段控制当目标处理完事件时，该事件是否发送回同位体&mdash;&mdash;如果为 false，则发送回同位体，如果为 true，则不发送。

@serial
@see #isConsumed()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Event(Object target, long when, int id, int x, int y, int key, int modifiers, Object arg)
<!-- END KEY -->
<!-- BEGIN DATA -->
<b>注：</b><code>Event</code> 类已废弃，只可用于向后兼容。它已经由 <code>AWTEvent</code> 类及其子类所取代。
 <p>
创建 <code>Event</code> 的一个实例，具有指定的目标组件、时间戳、事件类型、<i>x</i> 和 <i>y</i> 坐标、键盘键、修饰符键的状态、参数。
@param     target     目标组件。
@param     when       时间戳。
@param     id         事件类型。
@param     x          <i>x</i> 坐标。
@param     y          <i>y</i> 坐标。
@param     key        在键盘事件中按下的键。
@param     modifiers  修饰符键的状态。
@param     arg        指定参数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Event(Object target, long when, int id, int x, int y, int key, int modifiers)
<!-- END KEY -->
<!-- BEGIN DATA -->
<b>注：</b><code>Event</code> 类已废弃，只可用于向后兼容。它已经由 <code>AWTEvent</code> 类和其子类所取代。
 <p>
创建 <code>Event</code> 的一个实例，具有指定的目标组件、时间戳、事件类型、<i>x</i> 和 <i>y</i> 坐标、键盘键、修饰符键的状态、一个设置为 <code>null</code> 的参数。
@param     target     目标组件。
@param     when       时间戳。
@param     id         事件类型。
@param     x          <i>x</i> 坐标。
@param     y          <i>y</i> 坐标。
@param     key        在键盘事件中按下的键。
@param     modifiers  修饰符键的状态。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Event(Object target, int id, Object arg)
<!-- END KEY -->
<!-- BEGIN DATA -->
<b>注：</b><code>Event</code> 类已废弃，只可用于向后兼容。它已经由 <code>AWTEvent</code> 类和其子类所取代。
 <p>
使用指定的目标组件、事件类型和参数创建 <code>Event</code> 的一个实例。
@param     target     目标组件。
@param     id         事件类型。
@param     arg        指定参数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Event.translate(int dx, int dy)
<!-- END KEY -->
<!-- BEGIN DATA -->
<b>注：</b><code>Event</code> 类已废弃，只可用于向后兼容。它已经由 <code>AWTEvent</code> 类和其子类所取代。
 <p>
转换此事件，使其 <i>x</i> 和 <i>y</i> 坐标分别以 <i>dx</i> 和 <i>dy</i> 递增。
 <p>
此方法转换与给定组件相关的事件。这至少涉及到将坐标转换成给定组件的本地坐标系。它还可能涉及到在公开事件中转换一个区域
@param     dx     要转换 <i>x</i> 坐标的距离。
@param     dy     要转换 <i>y</i> 坐标的距离。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Event.shiftDown()
<!-- END KEY -->
<!-- BEGIN DATA -->
<b>注：</b><code>Event</code> 类已废弃，只可用于向后兼容。它已经由 <code>AWTEvent</code> 类和其子类所取代。
 <p>
检查 Shift 键是否被按下。
@return    如果该键被按下，则返回 <code>true</code>；否则返回 <code>false</code>。
@see       java.awt.Event#modifiers
@see       java.awt.Event#controlDown
@see       java.awt.Event#metaDown

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Event.controlDown()
<!-- END KEY -->
<!-- BEGIN DATA -->
<b>注：</b><code>Event</code> 类已废弃，只可用于向后兼容。它已经由 <code>AWTEvent</code> 类和其子类所取代。
 <p>
检查 Control 键是否被按下。
@return    如果该键被按下，则返回 <code>true</code>；否则返回 <code>false</code>。
@see       java.awt.Event#modifiers
@see       java.awt.Event#shiftDown
@see       java.awt.Event#metaDown

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Event.metaDown()
<!-- END KEY -->
<!-- BEGIN DATA -->
<b>注：</b><code>Event</code> 类已废弃，只可用于向后兼容。它已经由 <code>AWTEvent</code> 类和其子类所取代。
 <p>
检查 Meta 键是否被按下。

@return    如果该键被按下，则返回 <code>true</code>；否则返回 <code>false</code>。
@see       java.awt.Event#modifiers
@see       java.awt.Event#shiftDown
@see       java.awt.Event#controlDown

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.awt.Event.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
<b>注：</b><code>Event</code> 类已废弃，只可用于向后兼容。它已经由 <code>AWTEvent</code> 类和其子类所取代。
 <p>
返回此 <code>Event</code> 状态的字符串表示形式。此方法仅用于调试目的，对于这两种实现，返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。

@return    此事件的参数字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.Event.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
<b>注：</b><code>Event</code> 类已废弃，只可用于向后兼容。它已经由 <code>AWTEvent</code> 类和其子类所取代。
 <p>
返回此事件的值的字符串表示形式。
@return    字符串，表示事件及其成员字段的值。
@see       java.awt.Event#paramString
@since     JDK1.1

<!-- END DATA -->
