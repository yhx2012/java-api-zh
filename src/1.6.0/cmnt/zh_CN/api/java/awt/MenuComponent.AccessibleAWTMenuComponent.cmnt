<!-- BEGIN KEY -->
protected abstract class java.awt.MenuComponent.AccessibleAWTMenuComponent extends javax.accessibility.AccessibleContext implements java.io.Serializable, javax.accessibility.AccessibleComponent, javax.accessibility.AccessibleSelection
<!-- END KEY -->
<!-- BEGIN DATA -->
用于为可访问性提供默认支持的 <code>MenuComponent</code> 的内部类。此类不能由应用程序开发人员直接使用，只能由菜单组件开发人员为其创建子类。
 <p>
可以使用该类来获得此对象的可访问功能。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.MenuComponent.AccessibleAWTMenuComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
尽管该类是抽象的，但是应该可以通过所有子类调用它。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleSelection java.awt.MenuComponent.AccessibleAWTMenuComponent.getAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此对象关联的 <code>AccessibleSelection</code>，该对象允许选择其 <code>Accessible</code> 子对象。

@return 如果受对象支持，则返回 <code>AccessibleSelection</code>；否则返回 <code>null</code>
@see AccessibleSelection

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.MenuComponent.AccessibleAWTMenuComponent.getAccessibleName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的可访问的名称。几乎永远不应返回 <code>java.awt.MenuComponent.getName</code>，因为它通常不是一个本地化的名称，对用户来说，该名称没有任何意义。如果该对象从根本上说是一个文本对象（例如，菜单项），那么可访问的名称应是该对象的文本（例如，&ldquo;保存&rdquo;）。如果该对象有工具提示，则工具提示文本还可以是要返回的适当的 String。

@return 如果此对象没有名称，则返回该对象的本地化名称&mdash;&mdash;可以为 <code>null</code>
@see AccessibleContext#setAccessibleName

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.MenuComponent.AccessibleAWTMenuComponent.getAccessibleDescription()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的可访问的描述。这应该是一个简明的本地化描述，描述此对象是什么&mdash;&mdash;对用户来说有何意义。如果该对象有一个工具提示，该工具提示文本可以是要返回的适当的字符串，假设该字符串包含对该对象的简明描述（而不仅仅是该对象的名称&mdash;&mdash;例如，将&ldquo;保存&rdquo;作为工具提示文本的工具栏上的&ldquo;保存&rdquo;图标不应返回工具提示文本作为描述，而应为&ldquo;保存当前文本文档&rdquo;）。

@return 如果此对象没有描述，则返回该对象的本地化描述&mdash;&mdash;可以为 <code>null</code>
@see AccessibleContext#setAccessibleDescription

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleRole java.awt.MenuComponent.AccessibleAWTMenuComponent.getAccessibleRole()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的职责。

@return 描述该对象职责的 <code>AccessibleRole</code> 的实例
@see AccessibleRole

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleStateSet java.awt.MenuComponent.AccessibleAWTMenuComponent.getAccessibleStateSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的状态。

@return 包含该对象当前状态设置的 <code>AccessibleStateSet</code> 的实例
@see AccessibleState

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible java.awt.MenuComponent.AccessibleAWTMenuComponent.getAccessibleParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的 <code>Accessible</code> 父对象。如果此对象的父对象实现 <code>Accessible</code>，那么此方法应该只返回 <code>getParent</code>。

@return 如果此对象没有 <code>Accessible</code> 父对象，则返回此对象的 <code>Accessible</code> 父对象&mdash;&mdash;可能为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.MenuComponent.AccessibleAWTMenuComponent.getAccessibleIndexInParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象在其可访问的父对象中的索引。

@return 此对象在其父对象中的索引；如果此对象没有可访问的父对象，则返回 -1 
@see #getAccessibleParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.MenuComponent.AccessibleAWTMenuComponent.getAccessibleChildrenCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该对象中可访问的子对象数。如果此对象的所有子对象都实现 <code>Accessible</code>，那么此方法应返回此对象的子对象数。

@return 该对象中可访问的子对象数

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible java.awt.MenuComponent.AccessibleAWTMenuComponent.getAccessibleChild(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该对象的第 n 个 <code>Accessible</code> 子对象。

@param i 从零开始的子对象索引
@return 该对象的第 n 个可访问子对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Locale java.awt.MenuComponent.AccessibleAWTMenuComponent.getLocale()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象的区域。

@return 此对象的区域

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleComponent java.awt.MenuComponent.AccessibleAWTMenuComponent.getAccessibleComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此对象关联的 <code>AccessibleComponent</code>（如果存在）。否则，返回 <code>null</code>。

@return 组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color java.awt.MenuComponent.AccessibleAWTMenuComponent.getBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的背景色。

@return 该对象的背景色（如果受支持）；否则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.AccessibleAWTMenuComponent.setBackground(Color c)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的背景色。（有关透明的信息，请参阅 <code>isOpaque</code>。）

@param c 该背景的新 <code>Color</code>
@see Component#isOpaque

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color java.awt.MenuComponent.AccessibleAWTMenuComponent.getForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的前景色。

@return 该对象的前景色（如果受支持）；否则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.AccessibleAWTMenuComponent.setForeground(Color c)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的前景色。

@param c 该前景的新 <code>Color</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Cursor java.awt.MenuComponent.AccessibleAWTMenuComponent.getCursor()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的 <code>Cursor</code>。

@return 该对象的 <code>Curso</code>（如果受支持）；否则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.AccessibleAWTMenuComponent.setCursor(Cursor cursor)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的 <code>Cursor</code>。
 <p>
如果 Java 平台实现和/或本机系统不支持更改鼠标光标形状，则该方法可能不会产生任何视觉效果。
@param cursor 该对象的新 <code>Cursor</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font java.awt.MenuComponent.AccessibleAWTMenuComponent.getFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的 <code>Font</code>。

@return 该对象的 <code>Font</code>（如果受支持）；否则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.AccessibleAWTMenuComponent.setFont(Font f)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的 <code>Font</code>。

@param f 该对象的新 <code>Font</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FontMetrics java.awt.MenuComponent.AccessibleAWTMenuComponent.getFontMetrics(Font f)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的 <code>FontMetrics</code>。

@param f  <code>Font</code>
@return 该对象的 FontMetrics（如果受支持）；否则返回 <code>null</code>
@see #getFont

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.MenuComponent.AccessibleAWTMenuComponent.isEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定是否启用该对象。

@return 如果启用了该对象，则返回 true；否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.AccessibleAWTMenuComponent.setEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置该对象的启用状态。

@param b 如果为 true，则启用此对象；否则禁用它

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.MenuComponent.AccessibleAWTMenuComponent.isVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定该对象是否可见。注：这意味着该对象是可见的；但是，它实际上不显示在屏幕上，因为包含此对象的对象中的一个对象不可见。要确定某一对象是否在屏幕上显示，请使用 <code>isShowing</code>。

@return 如果对象可见，则返回 true；否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.AccessibleAWTMenuComponent.setVisible(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置该对象的可见状态。

@param b 如果为 true，则显示此对象；否则隐藏它

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.MenuComponent.AccessibleAWTMenuComponent.isShowing()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定该对象是否正在显示。通过检查该对象的可见性和祖先可确定这一点。注：这将返回 true，即使该对象被另一个对象遮掩（例如，该对象碰巧在下拉菜单的下面）。

@return 如果对象正在显示，则返回 true；否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.MenuComponent.AccessibleAWTMenuComponent.contains(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查指定的点是否在此对象的边界内，其中点的 x 和 y 坐标被定义成与该对象的坐标系相关。

@param p 与该对象的坐标系相关的 <code>Point</code>
@return 如果对象包含 <code>Point</code>，则返回 true；否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.MenuComponent.AccessibleAWTMenuComponent.getLocationOnScreen()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对象在屏幕上的位置。

@return 如果此对象不在屏幕上，则返回屏幕上对象的位置为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.MenuComponent.AccessibleAWTMenuComponent.getLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
以点（指定屏幕坐标空间中对象的左上角）的形式获取该对象相对于父对象的位置。

@return 表示该屏幕坐标空间中对象边界的左上角的 <code>Point</code>的实例；如果此对象或其父对象不在屏幕上，则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.AccessibleAWTMenuComponent.setLocation(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置该对象相对于父对象的位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle java.awt.MenuComponent.AccessibleAWTMenuComponent.getBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>Rectangle</code> 对象的形式获取此对象的边界。该边界可以指定此对象的宽和高，以及相对于父对象的位置。

@return 指示此组件边界的矩形；如果此对象不在屏幕上，则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.AccessibleAWTMenuComponent.setBounds(Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>Rectangle</code> 对象的形式设置此对象的边界。该边界可以指定此对象的宽和高，以及相对于父对象的位置。

@param r 指示此组件边界的矩形

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.MenuComponent.AccessibleAWTMenuComponent.getSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>Dimension</code> 对象的形式返回此对象的大小。<code>Dimension</code> 对象的高度字段包含此对象的高度，<code>Dimension</code> 对象的宽度字段包含此对象的宽度。

@return 指示此组件大小的 <code>Dimension</code> 对象；如果此对象不在屏幕上，则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.AccessibleAWTMenuComponent.setSize(Dimension d)
<!-- END KEY -->
<!-- BEGIN DATA -->
调整此对象的大小。

@param d - 指定该对象新的大小的 <code>Dimension</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible java.awt.MenuComponent.AccessibleAWTMenuComponent.getAccessibleAt(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回本地坐标 <code>Point</code> 包含的 <code>Accessible</code> 子对象（如果存在）。如果没有 <code>Accessible</code> 子对象，则返回 <code>null</code>。

@param p 定义该对象的父对象的坐标空间中给出的 <code>Accessible</code> 的左上角的点
@return 如果 <code>Accessible</code> 在指定的位置存在，则返回它；否则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.MenuComponent.AccessibleAWTMenuComponent.isFocusTraversable()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象是否可以接受焦点。

@return 如果对象可以接受焦点，则返回 true；否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.AccessibleAWTMenuComponent.requestFocus()
<!-- END KEY -->
<!-- BEGIN DATA -->
请求此对象的焦点。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.AccessibleAWTMenuComponent.addFocusListener(FocusListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定的焦点侦听器，以从此组件接收焦点事件。

@param l 焦点侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.AccessibleAWTMenuComponent.removeFocusListener(FocusListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定的焦点侦听器，使之不再从此组件接收焦点事件。

@param l 焦点侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.MenuComponent.AccessibleAWTMenuComponent.getAccessibleSelectionCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前选择的 <code>Accessible</code> 子对象数。如果不选择子对象，那么返回的值将为 0。

@return 当前选择的项数

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible java.awt.MenuComponent.AccessibleAWTMenuComponent.getAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>Accessible</code>，它表示该对象中指定的已选择的子对象。如果没有选择，或选择的子对象数小于传入的整数，那么返回的值将为 <code>null</code>。
<p>注意，该索引表示第 i 个已选择的子对象，它不同于第 i 个子对象。

@param i 所选子对象的基于零的索引
@return 第 i 个已选择的子对象
@see #getAccessibleSelectionCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.MenuComponent.AccessibleAWTMenuComponent.isAccessibleChildSelected(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定是否选择此对象的当前子对象。

@return 如果选择此对象的当前子对象，则返回 true；否则返回 false
@param i 此 <code>Accessible</code> 对象中子对象的基于零的索引
@see AccessibleContext#getAccessibleChild

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.AccessibleAWTMenuComponent.addAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
将该对象的指定 <code>Accessible</code> 子对象添加到该对象的选择中。如果该对象支持多个选择，则将指定的子对象添加到任何现有选择中，否则，它会替换该对象中的任何现有选择。如果指定的子对象已被选择，则此方法无效。

@param i 子对象的基于零的索引
@see AccessibleContext#getAccessibleChild

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.AccessibleAWTMenuComponent.removeAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
从对象的选择中移除该对象的指定子对象。如果当前没有选择指定的项，则此方法无效。

@param i 子对象的基于零的索引
@see AccessibleContext#getAccessibleChild

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.AccessibleAWTMenuComponent.clearAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
清除该对象中的选择，使该对象中没有子对象被选择。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.AccessibleAWTMenuComponent.selectAllAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果该对象支持多个选择，则会导致该对象的每个子对象都被选择。

<!-- END DATA -->
