<!-- BEGIN KEY -->
public class java.awt.Robot extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
此类用于为测试自动化、自运行演示程序和其他需要控制鼠标和键盘的应用程序生成本机系统输入事件。Robot 的主要目的是便于 Java 平台实现自动测试。
 <p>
使用该类生成输入事件与将事件发送到 AWT 事件队列或 AWT 组件的区别在于：事件是在平台的本机输入队列中生成的。例如，<code>Robot.mouseMove</code> 将实际移动鼠标光标，而不是只生成鼠标移动事件。
 <p>
注意，某些平台需要特定权限或扩展来访问低级输入控件。如果当前平台配置不允许使用输入控件，那么试图构造 Robot 对象时将抛出 <code>AWTException</code>。例如，如果 X 服务器不支持（或没有启用）XTEST 2.2 标准扩展，则 X-Window 系统会抛出异常。
 <p>
出于自测试之外的目的而使用 Robot 的应用程序应妥善处理这些错误条件。

@version 	1.27, 12/19/03
@author 	Robi Khan
@since   	1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Robot() throws java.awt.AWTException
<!-- END KEY -->
<!-- BEGIN DATA -->
在基本屏幕坐标系中构造一个 Robot 对象。
 <p>

@throws AWTException 如果平台配置不允许使用低级输入控件。GraphicsEnvironment.isHeadless() 返回 true 时总是抛出此异常
@throws SecurityException 如果没有授予 <code>createRobot</code> 权限
@see    java.awt.GraphicsEnvironment#isHeadless
@see    SecurityManager#checkPermission
@see 	AWTPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Robot(GraphicsDevice screen) throws java.awt.AWTException
<!-- END KEY -->
<!-- BEGIN DATA -->
为给定屏幕设备创建一个 Robot 。传递给 Robot 方法调用（如 mouseMove 和 createScreenCapture）的坐标将在与指定屏幕相同的坐标系中解释。注意，根据平台配置，多个屏幕可以：
 <ul>
<li>共享相同坐标系，以形成一个合成虚拟屏幕</li>
<li>使用不同坐标系作为单独的屏幕</li>
 </ul>
此构造方法指后一种情况。
 <p>
如果因配置屏幕设备而影响了坐标系，则现有 Robot 对象的行为是不确定的。

@param screen	一个屏幕 GraphicsDevice，指示 Robot 将在该坐标系中进行操作。
@throws	AWTException 如果平台配置不允许使用低级输入控件。GraphicsEnvironment.isHeadless() 返回 true 时总是抛出此异常。
@throws  IllegalArgumentException 如果 <code>screen</code> 不是一个屏幕 GraphicsDevice。
@throws	SecurityException 如果没有授予 <code>createRobot</code> 权限
@see     java.awt.GraphicsEnvironment#isHeadless
@see     GraphicsDevice
@see     SecurityManager#checkPermission
@see 	AWTPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Robot.mouseMove(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
将鼠标指针移动到给定屏幕坐标。
@param x		X 坐标
@param y		Y 坐标

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Robot.mousePress(int buttons)
<!-- END KEY -->
<!-- BEGIN DATA -->
按下一个或多个鼠标按钮。应该使用 <code>mouseRelease</code> 方法释放鼠标按钮。

@param buttons	Button 掩码；一个或多个以下标志的组合：
 <ul>
 <li><code>InputEvent.BUTTON1_MASK</code>
 <li><code>InputEvent.BUTTON2_MASK</code>
 <li><code>InputEvent.BUTTON3_MASK</code>
 </ul>

@throws	IllegalArgumentException 如果按钮掩码是无效组合
@see #mouseRelease(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Robot.mouseRelease(int buttons)
<!-- END KEY -->
<!-- BEGIN DATA -->
释放一个或多个鼠标按钮。 

@param buttons  Button 掩码；一个或多个以下标志的组合：
 <ul>
 <li><code>InputEvent.BUTTON1_MASK</code>
 <li><code>InputEvent.BUTTON2_MASK</code>
 <li><code>InputEvent.BUTTON3_MASK</code>
 </ul>
@see #mousePress(int)
@throws  IllegalArgumentException 如果按钮掩码是无效组合

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Robot.mouseWheel(int wheelAmt)
<!-- END KEY -->
<!-- BEGIN DATA -->
在配有滚轮的鼠标上旋转滚轮。
 
@param wheelAmt  移动鼠标滚轮的&ldquo;刻痕 (notch)&rdquo;数，负值表示向上/远离用户的运动，正值表示向下/接近用户的运动。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Robot.keyPress(int keycode)
<!-- END KEY -->
<!-- BEGIN DATA -->
按下给定的键。应该使用 <code>keyRelease</code> 方法释放该键。
 <p>
拥有一个以上与之相关的物理键（例如，<code>KeyEvent.VK_SHIFT</code> 可能指左 shift 键或右 shift 键）的键代码可能映射到左键。

@param	keycode	要按下的键（例如，<code>KeyEvent.VK_A</code>）
@throws IllegalArgumentException 如果 <code>keycode</code> 是一个无效的键
@see     #keyRelease(int)
@see     java.awt.event.KeyEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Robot.keyRelease(int keycode)
<!-- END KEY -->
<!-- BEGIN DATA -->
释放给定的键。
 <p>
拥有一个以上与之相关的物理键（例如，<code>KeyEvent.VK_SHIFT</code> 可能指左 shift 键或右 shift 键）的键代码可能映射到左键。

@param	keycode	要释放的键（例如，<code>KeyEvent.VK_A</code>）
@throws	IllegalArgumentException 如果 <code>keycode</code> 是一个无效的键
@see     #keyPress(int)
@see     java.awt.event.KeyEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.Color java.awt.Robot.getPixelColor(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定屏幕坐标处的像素颜色。
@param	x	像素的 X 位置
@param	y	像素的 Y 位置
@return  像素的颜色

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.image.BufferedImage java.awt.Robot.createScreenCapture(Rectangle screenRect)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建包含从屏幕中读取的像素的图像。该图像不包括鼠标光标。
@param	screenRect	将在屏幕坐标中捕获的 Rect
@return	捕获的图像
@throws	IllegalArgumentException 如果 <code>screenRect</code> 的宽度和高度不大于零
@throws	SecurityException 如果没有授予 <code>readDisplayPixels</code> 权限
@see     SecurityManager#checkPermission
@see 	AWTPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.awt.Robot.isAutoWaitForIdle()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 Robot 在生成一个事件后是否自动调用 <code>waitForIdle</code>。
@return 是否自动调用 <code>waitForIdle</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Robot.setAutoWaitForIdle(boolean isOn)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 Robot 在生成一个事件后是否自动调用 <code>waitForIdle</code>。
@param	isOn	是否自动调用 <code>waitForIdle</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.awt.Robot.getAutoDelay()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 Robot 在生成一个事件后睡眠的毫秒数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Robot.setAutoDelay(int ms)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 Robot 在生成一个事件后睡眠的毫秒数。
@throws	IllegalArgumentException 如果 <code>ms</code> 不在 0 到 60,000 毫秒的范围内

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Robot.delay(int ms)
<!-- END KEY -->
<!-- BEGIN DATA -->
睡眠指定的时间。为了捕获发生的所有 <code>InterruptedException</code>，可以使用 <code>Thread.sleep()</code> 替代。
@param	ms	睡眠的时间，以毫秒为单位
@throws	IllegalArgumentException 如果 <code>ms</code> 不在 0 到 60,000 毫秒的范围内
@see     java.lang.Thread#sleep

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Robot.waitForIdle()
<!-- END KEY -->
<!-- BEGIN DATA -->
在处理完当前事件队列中的所有事件之前，一直等待。
@throws	IllegalThreadStateException 如果调用 AWT 事件指派线程

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String java.awt.Robot.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 Robot 的字符串表示形式。

@return	字符串表示形式。

<!-- END DATA -->
