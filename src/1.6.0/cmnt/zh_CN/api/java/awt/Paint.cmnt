<!-- BEGIN KEY -->
public interface java.awt.Paint extends java.awt.Transparency
<!-- END KEY -->
<!-- BEGIN DATA -->
此 <code>Paint</code> 接口定义如何为 {@link Graphics2D} 操作生成颜色模式。将实现 <code>Paint</code> 接口的类添加到 <code>Graphics2D</code> 上下文中，以便定义 <code>draw</code> 和 <code>fill</code> 方法所使用的颜色模式。
 <p>
实现 <code>Paint</code> 的类的实例必须是只读的，因为将这些对象作为 <code>setPaint</code> 方法的属性来设置时，或者 <code>Graphics2D</code> 对象本身被复制时，<code>Graphics2D</code>  并不复制这些对象。
@see PaintContext
@see Color
@see GradientPaint
@see TexturePaint
@see Graphics2D#setPaint
@version 1.28, 11/17/05

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.PaintContext java.awt.Paint.createContext(ColorModel cm, Rectangle deviceBounds, Rectangle2D userBounds, AffineTransform xform, RenderingHints hints)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回用来生成颜色模式的 {@link PaintContext}。因为传递给 createContext 的 ColorModel 参数只是一个提示，所以 Paint 的实现应该接受 ColorModel 的 null 参数。注意，如果应用程序没有首选的特定 ColorModel，则为 null 的 ColorModel 参数将给予 Paint 实现完全的选择余地，使其在光栅处理中使用其首选最高效的 ColorModel。
 <p>
因为 API 文档在 1.4 版本之前没有关于此项的具体描述，因此可能有一些 <code>Paint</code> 实现不能接受 null <code>ColorModel</code> 参数。如果开发人员正在编写代码将 null <code>ColorModel</code> 参数从任意源传递给 <code>Paint</code> 对象的 <code>createContext</code> 方法，则为了实现安全的编码，应该为这些对象构造一个非 null <code>ColorModel</code>，使其抛出 <code>NullPointerException</code>。
@param cm 接收 <code>Paint</code> 数据的 {@link ColorModel}。这只用作一个提示。
@param deviceBounds 正在呈现的图形图元的设备空间边界框
@param userBounds 正在呈现的图形图元的用户空间边界框
@param xform 从用户空间到设备空间的 {@link AffineTransform}
@param hints 上下文对象用于选择所呈现内容的提示
@return 生成颜色模式的 <code>PaintContext</code>
@see PaintContext

<!-- END DATA -->
