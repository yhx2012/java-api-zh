<!-- BEGIN KEY -->
public class java.awt.datatransfer.StringSelection extends java.lang.Object implements java.awt.datatransfer.Transferable, java.awt.datatransfer.ClipboardOwner
<!-- END KEY -->
<!-- BEGIN DATA -->
实现传输 <code>String</code> 所需能力的 <code>Transferable</code>。此 <code>Transferable</code> 可以正确支持 <code>DataFlavor.stringFlavor</code> 及所有等效 flavor。对 <code>DataFlavor.plainTextFlavor</code> 及所有等效 flavor 的支持已被<b>废弃</b>。不支持其他 <code>DataFlavor</code>。

@see java.awt.datatransfer.DataFlavor#stringFlavor
@see java.awt.datatransfer.DataFlavor#plainTextFlavor

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.datatransfer.StringSelection(String data)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建能传输指定 <code>String</code> 的 <code>Transferable</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.datatransfer.DataFlavor[] java.awt.datatransfer.StringSelection.getTransferDataFlavors()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 flavor 的数组，<code>Transferable</code> 可用该 flavor 提供数据。正确支持 <code>DataFlavor.stringFlavor</code>。对 <code>DataFlavor.plainTextFlavor</code> 的支持已被<b>废弃</b>。

@return 长度为 2 的数组，其元素为 <code>DataFlavor. stringFlavor</code> 和 <code>DataFlavor.plainTextFlavor</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.datatransfer.StringSelection.isDataFlavorSupported(DataFlavor flavor)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回所请求的 flavor 是否受此 <code>Transferable</code> 支持。

@param flavor 所请求的数据 flavor
@return 如果 <code>flavor</code> 等于 <code>DataFlavor.stringFlavor</code> 或 <code>DataFlavor.plainTextFlavor</code>，则为 true；如果 <code>flavor</code> 不是上述两种 flavor 之一，则为 false
@throws NullPointerException 如果 flavor 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.datatransfer.StringSelection.getTransferData(DataFlavor flavor) throws java.awt.datatransfer.UnsupportedFlavorException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果可能，则使用请求的 <code>DataFlavor</code> 返回 <code>Transferable</code> 的数据。如果需要的 flavor 是 <code>DataFlavor.stringFlavor</code> 或其等效 flavor，则返回表示这一选择的 <code>String</code>。如果需要的 flavor 是 <code>DataFlavor.plainTextFlavor</code> 或其等效 flavor，则返回 <code>Reader</code>。<b>注：</b>针对 <code>DataFlavor.plainTextFlavor</code> 及其等效的 <code>DataFlavor</code> 的此方法的行为与 <code>DataFlavor.plainTextFlavor</code> 的定义不一致。

@param flavor 请求的数据 flavor
@return 按照上面的描述使用请求的 flavor 返回数据
@throws UnsupportedFlavorException 如果请求的数据 flavor 既不等效于 <code>DataFlavor.stringFlavor</code> 也不等效于 <code>DataFlavor.plainTextFlavor</code>
@throws IOException 如果检索数据时发生 IOException。默认情况下，StringSelection 不会抛出此异常，但是其子类可以。
@throws NullPointerException 如果 flavor 为 <code>null</code>
@see java.io.Reader

<!-- END DATA -->
