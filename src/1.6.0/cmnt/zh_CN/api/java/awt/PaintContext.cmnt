<!-- BEGIN KEY -->
public interface java.awt.PaintContext
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>PaintContext</code> 接口定义了经过封装和优化的环境，使用此环境可以生成设备空间中的颜色模式，此模式用于在 {@link Graphics2D} 上进行填充操作或笔划操作。<code>PaintContext</code> 采用与 {@link ColorModel} 相关联的 {@link Raster} 的方式提供 <code>Graphics2D</code> 操作所必需的颜色。<code>PaintContext</code> 保持着进行特殊着色操作的状态。在多线程环境中，针对单个 {@link Paint} 对象可同时有多个上下文。
@see Paint
@version 10 Feb 1997

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.PaintContext.dispose()
<!-- END KEY -->
<!-- BEGIN DATA -->
释放为操作分配的资源。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.ColorModel java.awt.PaintContext.getColorModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回输出的 <code>ColorModel</code>。注意，此 <code>ColorModel</code> 可能与在 <code>Paint</code> 的 {@link Paint#createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints) createContext} 方法中指定的提示是不同的。不是所有的 <code>PaintContext</code> 对象都能够生成任意 <code>ColorModel</code> 的颜色模式。
@return 输出的 <code>ColorModel</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.Raster java.awt.PaintContext.getRaster(int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含为图形操作生成的颜色的 <code>Raster</code>。
@param x 为其生成颜色的设备空间区域的 x 坐标。
@param y 为其生成颜色的设备空间区域的 y 坐标。
@param w 设备空间区域的宽度
@param h 设备空间区域的高度
@return 一个 <code>Raster</code>，它表示指定的矩形区域，该区域包含为图形操作生成的颜色。

<!-- END DATA -->
