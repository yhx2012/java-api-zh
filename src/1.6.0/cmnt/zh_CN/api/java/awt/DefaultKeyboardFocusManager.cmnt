<!-- BEGIN KEY -->
public class java.awt.DefaultKeyboardFocusManager extends java.awt.KeyboardFocusManager
<!-- END KEY -->
<!-- BEGIN DATA -->
AWT 应用程序的默认 KeyboardFocusManager。通过进行焦点遍历来响应 Component 的焦点遍历键，并使用 Container 的 FocusTraversalPolicy。
 <p>
有关更多信息，请参阅 <em>The Java Tutorial</em> 中的 <a href="http://java.sun.com/docs/books/tutorial/uiswing/misc/focus.html">How to Use the Focus Subsystem</a> 一节以及 <a href="../../java/awt/doc-files/FocusSpec.html">Focus Specification</a>。

@author David Mendenhall
@version 1.31, 12/19/03

@see FocusTraversalPolicy
@see Component#setFocusTraversalKeys
@see Component#getFocusTraversalKeys
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.DefaultKeyboardFocusManager.dispatchEvent(AWTEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法由 AWT 事件调度程序调用，该调度程序请求当前的 KeyboardFocusManager 以它的名义指派指定的事件。DefaultKeyboardFocusManagers 指派所有 FocusEvents、所有与焦点有关的 WindowEvents 和所有 KeyEvents。根据 KeyboardFocusManager 的焦点所有者、聚焦的窗口和活动窗口的概念来指派这些事件，有时需要重写指定 AWTEvent 的源代码。如果此方法返回 <code>false</code>，则 AWT 事件调度程序会试着指派事件本身。

@param e 要指派的 AWTEvent
@return 如果此方法指派了事件，则返回 <code>true</code>；否则返回 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(KeyEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果调度程序链中其他 KeyEventDispatcher 都没有调度 KeyEvent，或者没有注册其他 KeyEventDispatcher，则由 <code>dispatchEvent</code> 调用此方法。如果没有使用该事件，而是启用了它的目标，且焦点所有者不为 null，则此方法会将该事件指派到它的目标。此方法随后会将该事件指派到所有已注册的 KeyEventPostProcessor。完成所有这些操作之后，会将该事件传递给 KeyEventPostProcessor 的同位体进行处理。
 <p>
在所有情况下，此方法都将返回 <code>true</code>，这是因为设计了 DefaultKeyboardFocusManager，因此，在任何情况下，<code>dispatchEvent</code> 和 AWT 事件调度程序都不应该对该事件执行进一步的操作。

@param e 要指派的 KeyEvent
@return <code>true</code>
@see Component#dispatchEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.DefaultKeyboardFocusManager.postProcessKeyEvent(KeyEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
由 <code>dispatchKeyEvent</code> 调用此方法。它将处理所有未使用的、映射到 AWT <code>MenuShortcut</code> 的 KeyEvent，这是通过使用该事件并激活快捷方式来实现的。

@param e 要进行后处理的 KeyEvent
@return <code>true</code>
@see #dispatchKeyEvent
@see MenuShortcut

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.DefaultKeyboardFocusManager.processKeyEvent(Component focusedComponent, KeyEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
当且仅当该 KeyEvent 表示指定 focusedComponent 的焦点遍历键时，此方法才会启动一个焦点遍历操作。期望 focusedComponent 就是当前的焦点所有者，虽然事实不必如此。如果事实并非如此，则仍然要进行焦点遍历，就像 focusedComponent 是焦点所有者一样。

@param focusedComponent 作为焦点遍历操作的基础的 Component，如果指定事件表示 Component 的焦点遍历键，则执行焦点遍历操作
@param e 可以表示焦点遍历键的事件

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.awt.DefaultKeyboardFocusManager.enqueueKeyEvents(long after, Component untilFocused)
<!-- END KEY -->
<!-- BEGIN DATA -->
延迟对 KeyEvent 的指派，直到指定的 Component 成为焦点所有者。将时间戳迟于指定时间戳的 KeyEvent 加入队列，直到指定的 Component 接收一个 FOCUS_GAINED 事件，或者 AWT 通过调用 <code>dequeueKeyEvents</code> 或 <code>discardKeyEvents</code> 取消延迟请求。

@param after 当前事件的时间戳，如果当前事件没有时间戳，或 AWT 无法确定当前正在处理哪个事件，则此参数为当前系统时间
@param untilFocused 将接收任何挂起 KeyEvent 之前的 FOCUS_GAINED 事件的 Component
@see #dequeueKeyEvents
@see #discardKeyEvents

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.awt.DefaultKeyboardFocusManager.dequeueKeyEvents(long after, Component untilFocused)
<!-- END KEY -->
<!-- BEGIN DATA -->
释放正常指派到当前焦点所有者的所有 KeyEvent，这些 KeyEvent 因为调用了具有相同时间戳和 Component 的 <code>enqueueKeyEvents</code> 而被加入队列。如果给定的时间戳小于零，那么对于具有<b>最早</b>的时间戳（如果有）的给定 Component，应该取消未完成的入队请求。

@param after 调用 <code>enqueueKeyEvents</code> 期间指定的时间戳，或为小于零的任意值
@param untilFocused 调用 <code>enqueueKeyEvents</code> 期间指定的 Component
@see #enqueueKeyEvents
@see #discardKeyEvents

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.awt.DefaultKeyboardFocusManager.discardKeyEvents(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
放弃因为一次或多次调用具有指定 Component 或其子代之一的 <code>enqueueKeyEvents</code> 而加入队列的所有 KeyEvent。

@param comp 一次或多次调用 <code>enqueueKeyEvents</code> 期间指定的 Component，或这样一个 Component 的父组件
@see #enqueueKeyEvents
@see #dequeueKeyEvents

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.DefaultKeyboardFocusManager.focusPreviousComponent(Component aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->
使 aComponent 前面的 Component 拥有焦点，通常基于 FocusTraversalPolicy。

@param aComponent 作为焦点遍历操作的基础的 Component
@see FocusTraversalPolicy
@see Component#transferFocusBackward

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.DefaultKeyboardFocusManager.focusNextComponent(Component aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->
使 aComponent 后面的 Component 拥有焦点，通常基于 FocusTraversalPolicy。

@param aComponent 作为焦点遍历操作的基础的 Component
@see FocusTraversalPolicy
@see Component#transferFocus

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.DefaultKeyboardFocusManager.upFocusCycle(Component aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->
将焦点上移一个焦点遍历循环。通常，将焦点所有者设置为 aComponent 的焦点循环根，将当前的焦点循环根设置为新焦点所有者的焦点循环根。但是，如果 aComponent 的焦点循环根是一个 Window，则将焦点所有者设置为焦点循环根默认拥有焦点的 Component，当前的焦点循环根不变。

@param aComponent 作为焦点遍历操作的基础的 Component
@see Component#transferFocusUpCycle

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.DefaultKeyboardFocusManager.downFocusCycle(Container aContainer)
<!-- END KEY -->
<!-- BEGIN DATA -->
将焦点下移一个焦点遍历循环。如果 aContainer 是一个焦点循环根，则将焦点所有者设置为 aContainer 默认拥有焦点的 Component，并将当前的焦点循环根设置为 aContainer。如果 aContainer 不是一个焦点循环根，则不发生焦点遍历操作。

@param aContainer 作为焦点遍历操作的基础的 Component
@see Container#transferFocusDownCycle

<!-- END DATA -->
