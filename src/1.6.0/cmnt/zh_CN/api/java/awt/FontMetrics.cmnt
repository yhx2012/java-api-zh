<!-- BEGIN KEY -->
public abstract class java.awt.FontMetrics extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>FontMetrics</code> 类定义字体规格对象，该对象封装将在特定屏幕上呈现特定字体的有关信息。 
 <p>
<b>子类注意事项</b>：由于当中很多方法都形成关闭的、相互递归的循环，所以必须注意，在每个这样的循环中至少要实现其中一个方法，以防止在使用子类时产生无穷递归。特别建议，至少要重写以下方法集合以确保正确性，并防止无穷递归（虽然其他子集也可以）。
 <ul>
 <li>{@link #getAscent()}
 <li>{@link #getLeading()}
 <li>{@link #getMaxAdvance()}
 <li>{@link #charWidth(char)}
 <li>{@link #charsWidth(char[], int, int)}
 </ul>
 <p>
<img src="doc-files/FontMetrics-1.gif" alt="字母 'p' 显示其&ldquo;引用点&rdquo;" border=15 align
 ALIGN=right HSPACE=10 VSPACE=7> 注意，这些方法的实现效率低下，因此通常利用更高效的特定于工具包的实现重写它们。
 <p>
当应用程序要求将字符放置在 (<i>x</i>, <i>y</i>) 位置时，放置字符的方式是使其引用点（附图中显示的点）放置在该位置。引用点指定一条水平线，称为字符的<i>基线 (baseline)</i>。在正常的打印中，字符的基线应该对齐。
 <p>
此外，字体中的每个字符都具有 <i>ascent</i>、<i>descent</i> 和 <i>advance width</i> 属性。ascent 是字符超出基线之上的距离。descent 是字符超出基线以下的距离。advance width 指示 AWT 应该放置下一个字符的位置。
 <p>
字符数组或字符串也可以具有 ascent、descent 和 advance width 属性。数组的 ascent 是数组中所有字符的最大 ascent。descent 是数组中所有字符的最大 descent。advance width 是字符数组中每个字符的 advance width 之和。<code>String</code> 的 advance 是 <code>String</code> 沿基线的距离。此距离是 <code>String</code> 居中或右对齐应该使用的 width。
 <p>注意，<code>String</code> 的 advance 不一定是每个字符单独测量的 advance 之和，因为字符的 width 可随上下文变动。例如，在 Arabic 文本中，可以更改一个字符的形状，以连接到其他字符。而在有些脚本中，某些字符序列可以由单个形状（称为<em>连字</em>）表示。单独测量的字符并不能说明这些转换。
 <p>字体规格是基线相关的，意味着它们通常是独立应用于该字体的循环（模可能的网格提示作用）。请参阅 {@link java.awt.Font Font}。

@version 	1.59 11/17/05
@author 	Jim Graham
@see         java.awt.Font
@since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Font java.awt.FontMetrics.font
<!-- END KEY -->
<!-- BEGIN DATA -->
实际的 {@link Font}，字体规格是由此创建的。它不能为 null。

@serial
@see #getFont()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.FontMetrics(Font font)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新 <code>FontMetrics</code> 对象，用于查找该 <code>Font</code> 中关于指定 <code>Font</code> 和特定字符字形的 height 和 width 信息。
@param     font <code>Font</code>
@see       java.awt.Font

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font java.awt.FontMetrics.getFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>FontMetrics</code> 对象所描述的 <code>Font</code>。
@return    此 <code>FontMetrics</code> 对象所描述的 <code>Font</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.font.FontRenderContext java.awt.FontMetrics.getFontRenderContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>FontMetrics</code> 对象用来测量文本的 <code>FontRenderContext</code>。
 <p>
注意，此类中带有 <code>Graphics</code> 参数的方法测量使用该 <code>Graphics</code> 对象的 <code>FontRenderContext</code> 文本，而非此 <code>FontRenderContext</code>。
@return    此 <code>FontMetrics</code> 对象使用的 <code>FontRenderContext</code>。
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FontMetrics.getLeading()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此 <code>FontMetrics</code> 对象所描述的 <code>Font</code> 的<em>标准行间距</em>。标准行间距（或行间间隔）是保留在一个文本行的 descent 和下一个文本行的 ascent 之间的逻辑间隔量。计算 height 规格时要包括这一额外间隔。
@return    <code>Font</code> 的标准行间距。
@see   #getHeight()
@see   #getAscent()
@see   #getDescent()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FontMetrics.getAscent()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此 <code>FontMetrics</code> 对象所描述的 <code>Font</code> 的 <em>font ascent</em>。font ascent 是字体基线到大多数字母数字字符顶部的距离。在 <code>Font</code> 中，有些字符可能扩展超过 font ascent 线。
@return     <code>Font</code> 的 font ascent。
@see        #getMaxAscent()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FontMetrics.getDescent()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此 <code>FontMetrics</code> 对象所描述的 <code>Font</code> 的 <em>font descent</em>。font descent 是字体基线到大多数字母数字字符底部的距离。在 <code>Font</code> 中，有些字符可能扩展到 font descent 线之下。
@return     <code>Font</code> 的 font descent。
@see        #getMaxDescent()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FontMetrics.getHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 Font 中文本行的标准 height。它是相邻文本行基线之间的距离。它是 leading、ascent、descent 的总和。由于采用了舍入方法，它可能不同于 getAscent()、getDescent()、getLeading() 的总和。不保证以此距离间隔的文本行是不相交的；如果有些字符超出了标准 ascent 或标准 descent，则这些文本行可能会重叠。
@return    Font 的标准 height。
@see       #getLeading()
@see       #getAscent()
@see       #getDescent()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FontMetrics.getMaxAscent()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此 <code>FontMetrics</code> 对象所描述的 <code>Font</code> 的最大 ascent。字符超出字体基线的距离不会大于此 height。
@return    <code>Font</code> 中所有字符的最大 ascent。
@see       #getAscent()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FontMetrics.getMaxDescent()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此 <code>FontMetrics</code> 对象所描述的 <code>Font</code> 的最大 descent。字符低于字体基线的距离不会大于此 height。
@return    <code>Font</code> 中所有字符的最大 descent。
@see       #getDescent()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FontMetrics.getMaxDecent()
<!-- END KEY -->
<!-- BEGIN DATA -->
只用于向后兼容性。
@return    <code>Font</code> 中所有字符的最大 descent。
@see #getMaxDescent()
@deprecated 从 JDK version 1.1.1 开始，由 <code>getMaxDescent()</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FontMetrics.getMaxAdvance()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>Font</code> 中所有字符的最大 advance width。advance 是字符串基线上最左边的点到最右边的点之间的距离。<code>String</code> 的 advance 不一定是它所有字符的 advance 之和。
@return  <code>Font</code> 中所有字符的最大 advance width；如果最大 advance width 未知，则返回 <code>-1</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FontMetrics.charWidth(int codePoint)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Font</code> 中指定字符的 advance width。advance 是字符基线上最左边的点到最右边的点之间的距离。注意，<code>String</code> 的 advance 不一定是它所有字符的 advance 之和。
 
<p>此方法没有验证指定的字符是否为一个有效的 Unicode 代码点。如有必要，调用者必须使用 {@link java.lang.Character#isValidCodePoint(int) Character.isValidCodePoint} 验证字符值。

@param codePoint 要测量的字符（Unicode 代码点）
@return  此 <code>FontMetrics</code> 对象所描述的 <code>Font</code> 中指定字符的 advance width。
@see   #charsWidth(char[], int, int)
@see   #stringWidth(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FontMetrics.charWidth(char ch)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Font</code> 中指定字符的 advance width。advance 是字符基线上最左边的点到最右边的点之间的距离。注意，<code>String</code> 的 advance 不一定是它所有字符的 advance 之和。

<p><b>注：</b> 此方法无法处理<a
 href="../lang/Character.html#supplementary">增补字符</a>。要支持包括增补字符在内的所有 Unicode 字符，请使用 {@link #charWidth(int)} 方法。

@param ch 要测量的字符
@return     此 <code>FontMetrics</code> 对象所描述的 <code>Font</code> 中指定字符的 advance width。
@see        #charsWidth(char[], int, int)
@see        #stringWidth(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FontMetrics.stringWidth(String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Font</code> 中指定 <code>String</code> 的总 advance width。advance 是字符串基线上最左边的点到最右边的点之间的距离。  
 <p>
注意，code>String</code> 的 advance 不一定是它所有字符的 advance 之和。
 
@param str 要测量的 <code>String</code>
@return    此 <code>FontMetrics</code> 描述的 <code>Font</code> 中指定 <code>String</code> 的 advance width。
@throws NullPointerException 如果 str 为 null。
@see       #bytesWidth(byte[], int, int)
@see       #charsWidth(char[], int, int)
@see       #getStringBounds(String, Graphics)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FontMetrics.charsWidth(char[] data, int off, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回显示此 <code>Font</code> 中指定字符数组的总 advance width。advance 是字符串基线上最左边的点到最右边的点之间的距离。<code>String</code> 的 advance 不一定是它所有字符的 advance 之和。这等同于测量 <code>String</code> 指定范围内的字符。
@param data 要测量的字符数组
@param off 数组中字符的起始偏移量
@param len 数组中要测量的字符数
@return    此 <code>FontMetrics</code> 对象所描述的字体中指定 <code>char</code> 数组子数组的 advance width。
@throws    NullPointerException 如果 <code>data</code> 为 null。
@throws    IndexOutOfBoundsException 如果 <code>off</code> 和 <code>len</code> 参数索引字符超出 <code>data</code> 数组范围。
@see       #charWidth(int)
@see       #charWidth(char)
@see       #bytesWidth(byte[], int, int)
@see       #stringWidth(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FontMetrics.bytesWidth(byte[] data, int off, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回显示此 <code>Font</code> 中指定字节数组的总 advance width。advance 是字符串基线上最左边的点到最右边的点之间的距离。<code>String</code> 的 advance 不一定是它所有字符的 advance 之和。这等同于测量 <code>String</code> 指定范围内的字符。
@param data 要测量的字节数组
@param off 数组中字节的起始偏移量
@param len 数组中要测量的字节数
@return    此 <code>FontMetrics</code> 对象所描述的 <code>Font</code> 中指定 <code>byte</code> 数组的子数组的 advance width。
@throws    NullPointerException 如果 <code>data</code> 为 null。
@throws    IndexOutOfBoundsException 如果 <code>off</code> 和 <code>len</code> 参数索引字节超出 <code>data</code> 数组范围。
@see       #charsWidth(char[], int, int)
@see       #stringWidth(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.awt.FontMetrics.getWidths()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>Font</code> 中前 256 个字符的 advance width。advance 是字符基线上最左边的点到最右边的点之间的距离。注意，<code>String</code> 的 advance 不一定是它所有字符的 advance 之和。
@return    一个数组，它存储此 <code>FontMetrics</code> 对象所描述的 <code>Font</code> 中字符的 advance width。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.FontMetrics.hasUniformLineMetrics()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查 <code>Font</code> 是否具有统一的行规格。复合字体可能由几种不同的字体组成，涉及到各种字符集。在此情况下，<code>FontLineMetrics</code> 对象是不统一的。不同的字体可能有不同的 ascent、descent、metrics 等等。对于行测量和行断开来说，此信息有时是必需的。
@return 如果字体具有统一的行规格，则返回 <code>true</code>；否则返回 <code>false</code>。
@see java.awt.Font#hasUniformLineMetrics()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.font.LineMetrics java.awt.FontMetrics.getLineMetrics(String str, Graphics context)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 {@link Graphics} 上下文中指定 <code>String</code> 的 {@link LineMetrics} 对象。
@param str 指定的 <code>String</code>
@param context 指定的 <code>Graphics</code> 上下文
@return 使用指定 <code>String</code> 和 <code>Graphics</code> 上下文创建的 <code>LineMetrics</code> 对象。
@see java.awt.Font#getLineMetrics(String, FontRenderContext)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.font.LineMetrics java.awt.FontMetrics.getLineMetrics(String str, int beginIndex, int limit, Graphics context)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 {@link Graphics} 上下文中指定 <code>String</code> 的 {@link LineMetrics} 对象。
@param str 指定的 <code>String</code>
@param beginIndex <code>str</code> 的初始偏移量
@param limit <code>str</code> 的结束偏移量
@param context 指定的 <code>Graphics</code> 上下文
@return 使用指定 <code>String</code> 和 <code>Graphics</code> 上下文创建的 <code>LineMetrics</code> 对象。
@see java.awt.Font#getLineMetrics(String, int, int, FontRenderContext)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.font.LineMetrics java.awt.FontMetrics.getLineMetrics(char[] chars, int beginIndex, int limit, Graphics context)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 {@link Graphics} 上下文中指定字符数组的 {@link LineMetrics} 对象。
@param chars 指定的字符数组
@param beginIndex <code>chars</code> 的初始偏移量
@param limit <code>chars</code> 的结束偏移量
@param context 指定的 <code>Graphics</code> 上下文
@return 使用指定字符数组和 <code>Graphics</code> 上下文创建的 <code>LineMetrics</code> 对象。
@see java.awt.Font#getLineMetrics(char[], int, int, FontRenderContext)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.font.LineMetrics java.awt.FontMetrics.getLineMetrics(CharacterIterator ci, int beginIndex, int limit, Graphics context)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 {@link Graphics} 上下文中指定 {@link CharacterIterator} 的 {@link LineMetrics} 对象。
@param ci 指定的 <code>CharacterIterator</code>
@param beginIndex <code>ci</code> 中的初始偏移量
@param limit <code>ci</code> 的结束索引
@param context 指定的 <code>Graphics</code> 上下文
@return 使用指定参数创建的 <code>LineMetrics</code> 对象。
@see java.awt.Font#getLineMetrics(CharacterIterator, int, int, FontRenderContext)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Rectangle2D java.awt.FontMetrics.getStringBounds(String str, Graphics context)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 <code>Graphics</code> 上下文中指定 <code>String</code> 的边界。边界用来对 <code>String</code> 进行布局。
<p>注意：返回的边界在基线相关的坐标内
 （请参阅{@link java.awt.FontMetrics 类注释}）。
@param str 指定的 <code>String</code>
@param context 指定的 <code>Graphics</code> 上下文
@return 一个 {@link Rectangle2D}，它是指定 <code>Graphics</code> 上下文中指定 <code>String</code> 的边界框。
@see java.awt.Font#getStringBounds(String, FontRenderContext)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Rectangle2D java.awt.FontMetrics.getStringBounds(String str, int beginIndex, int limit, Graphics context)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 <code>Graphics</code> 上下文中指定 <code>String</code> 的边界。边界用来对 <code>String</code> 进行布局。
<p>注意：返回的边界在基线相关的坐标内
（请参阅{@link java.awt.FontMetrics 类注释}）。
@param str 指定的 <code>String</code>
@param beginIndex <code>str</code> 的起始偏移量
@param limit <code>str</code> 的结束偏移量
@param context 指定的 <code>Graphics</code> 上下文
@return 一个 <code>Rectangle2D</code>，它是指定 <code>String</code> 上下文中指定 <code>Graphics</code> 的边界框。
@see java.awt.Font#getStringBounds(String, int, int, FontRenderContext)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Rectangle2D java.awt.FontMetrics.getStringBounds(char[] chars, int beginIndex, int limit, Graphics context)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 <code>Graphics</code> 上下文中指定字符数组的边界。边界用来对 <code>String</code> 进行布局，<code>String</code> 是使用指定的字符数组、<code>beginIndex</code> 和 <code>limit</code> 创建的。
<p>注意：返回的边界在基线相关的坐标内
（请参阅{@link java.awt.FontMetrics 类注释}）。
@param chars 字符数组
@param beginIndex 字符数组的初始偏移量
@param limit 字符数组的结束偏移量
@param context 指定的 <code>Graphics</code> 上下文
@return 一个 <code>Rectangle2D</code>，它是指定 <code>Graphics</code> 上下文中指定字符数组的边界框。
@see java.awt.Font#getStringBounds(char[], int, int, FontRenderContext)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Rectangle2D java.awt.FontMetrics.getStringBounds(CharacterIterator ci, int beginIndex, int limit, Graphics context)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用指定 <code>Graphics</code> 上下文中指定 <code>CharacterIterator</code> 进行索引的字符的边界。
<p>注意：返回的边界在基线相关的坐标内（请参阅{@link java.awt.FontMetrics 类注释}）。
@param ci 指定的 <code>CharacterIterator</code>
@param beginIndex <code>ci</code> 中的初始偏移量
@param limit <code>ci</code> 的结束索引
@param context 指定的 <code>Graphics</code> 上下文
@return 一个 <code>Rectangle2D</code>，它是用指定 <code>Graphics</code> 上下文中的指定 <code>CharacterIterator</code> 进行索引的字符的边界框。
@see java.awt.Font#getStringBounds(CharacterIterator, int, int, FontRenderContext)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Rectangle2D java.awt.FontMetrics.getMaxCharBounds(Graphics context)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 <code>Graphics</code> 上下文中具有最大边界的字符的边界。
@param context 指定的 <code>Graphics</code> 上下文
@return 一个 <code>Rectangle2D</code>，它是具有最大边界的字符的边界框。
@see java.awt.Font#getMaxCharBounds(FontRenderContext)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.FontMetrics.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>FontMetrics</code> 对象的值的 <code>String</code> 表示形式。
@return    此 <code>FontMetrics</code> 对象的 <code>String</code> 表示形式。
@since     JDK1.0.

<!-- END DATA -->
