<!-- BEGIN KEY -->
public final class java.awt.JobAttributes extends java.lang.Object implements java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
控制打印作业的属性集合。
 <p>
此类的实例控制份数、默认选择、目标、打印对话框、文件和打印机名称、页面范围、多文档处理（包括整理）和使用此实例的每个打印作业的多页整版（如双面）。在可能的地方属性名遵守 Internet Printing Protocol (IPP) 1.1。在可能的地方属性值部分地遵守 Internet Printing Protocol (IPP) 1.1。
 <p>
要使用采用内部类类型的方法，需要将引用传递给内部类的常量字段之一。客户端代码无法创建内部类类型的新实例，因为这些类都不具有公共构造方法。例如，将打印对话框类型设置为跨平台的纯 Java 打印对话框，使用以下代码：
 <pre>
 import java.awt.JobAttributes;

 public class PureJavaPrintDialogExample {
     public void setPureJavaPrintDialog(JobAttributes jobAttributes) {
         jobAttributes.setDialog(JobAttributes.DialogType.COMMON);
     }
 }
 </pre>
 <p>
每个支持 <i>attributeName</i>（默认值）的 IPP 属性都具有相应的 <code>set<i>attributeName</i>ToDefault</code> 方法。未提供默认值字段。

@version	1.9, 12/19/03
@author	David Mendenhall
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.JobAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有每个属性的默认值的 <code>JobAttributes</code> 实例。对话框默认为 <code>DialogType.NATIVE</code>。最小页默认为 <code>1</code>。最大页默认为 <code>Integer.MAX_VALUE</code>。目标默认为 <code>DestinationType.PRINTER</code>。选择默认为 <code>DefaultSelectionType.ALL</code>。份数默认为 <code>1</code>。多文档处理默认为 <code>MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES</code>。面默认为 <code>SidesType.ONE_SIDED</code>。文件名默认为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.JobAttributes(JobAttributes obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>JobAttributes</code> 实例，作为所提供的 <code>JobAttributes</code> 的副本。

@param	obj 要复制的 <code>JobAttributes</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.JobAttributes(int copies, JobAttributes.DefaultSelectionType defaultSelection, JobAttributes.DestinationType destination, JobAttributes.DialogType dialog, String fileName, int maxPage, int minPage, JobAttributes.MultipleDocumentHandlingType multipleDocumentHandling, int[][] pageRanges, String printer, JobAttributes.SidesType sides)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有每个属性指定值的 <code>JobAttributes</code> 实例。

@param	copies 复制一个大于 0 的整数
@param	defaultSelection <code>DefaultSelectionType.ALL</code>、<code>DefaultSelectionType.RANGE</code> 和 <code>DefaultSelectionType.SELECTION</code>
@param	destination <code>DesintationType.FILE</code> 或 <code>DesintationType.PRINTER</code>
@param	dialog <code>DialogType.COMMON</code>、<code>DialogType.NATIVE</code> 或 <code>DialogType.NONE</code>
@param	fileName 可能为 <code>null</code> 文件名
@param	maxPage 大于零且大于或等于 <i>minPage</i> 的整数
@param	minPage 大于零且小于或等于 <i>maxPage</i> 的整数
@param	multipleDocumentHandling <code>MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_COLLATED_COPIES</code> 或 <code>MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES</code>
@param	pageRanges 两个元素的整数数组的数组；数组的范围被解释为包括两个指定页面以及它们之间的所有页面；范围必须为升序并且一定不能重叠；指定的页码既不能小于 <i>minPage</i> 也不能大于 <i>maxPage</i>；例如：
          <pre>
		(new int[][] { new int[] { 1, 3 }, new int[] { 5, 5 },
		               new int[] { 15, 19 } }),
          </pre>
		指定页面 1、2、3、5、15、16、17、18 和 19。注意，(<code>new int[][] { new int[] { 1, 1 }, new int[] { 1, 2 } }</code>) 是一种无效的页面范围设置，因为两个范围重叠
@param	printer 可能为 <code>null</code> 打印机名称
@param	sides <code>SidesType.ONE_SIDED</code>、<code>SidesType.TWO_SIDED_LONG_EDGE</code> 或 <code>SidesType.TWO_SIDED_SHORT_EDGE</code>
@throws	IllegalArgumentException 如果违反了一个或多个上述条件

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.JobAttributes.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回此 <code>JobAttributes</code> 的一个副本。

@return	新创建的副本；可以安全地将此 Object 强制转换为 <code>JobAttributes</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.JobAttributes.set(JobAttributes obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>JobAttributes</code> 的所有属性设置为与 obj 的属性相同的值。

@param	obj 要复制的 <code>JobAttributes</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.JobAttributes.getCopies()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回应用程序应该使用这些属性呈现作业的份数。将此属性更新为用户选择的值。

@return	大于 0 的整数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.JobAttributes.setCopies(int copies)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定应用程序应该使用这些属性呈现作业的份数。不指定此属性等效于指定 <code>1</code>。

@param	copies 复制一个大于 0 的整数
@throws IllegalArgumentException 如果 <code>copies</code> 小于或等于 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.JobAttributes.setCopiesToDefault()
<!-- END KEY -->
<!-- BEGIN DATA -->
将应用程序应该使用这些属性呈现作业的份数设置为默认值。默认份数为 1。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.JobAttributes.DefaultSelectionType java.awt.JobAttributes.getDefaultSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
指定应用程序应该为使用这些属性的作业打印所有页面，即 <code>getPageRanges</code> 的返回值所指定范围的页面，还是打印当前选择的页面。将此属性更新为用户选择的值。

@return	DefaultSelectionType.ALL、DefaultSelectionType.RANGE 或 DefaultSelectionType.SELECTION

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.JobAttributes.setDefaultSelection(JobAttributes.DefaultSelectionType defaultSelection)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定应用程序应该为使用这些属性的作业打印所有页面，即 <code>getPageRanges</code> 的返回值所指定范围的页面，还是打印当前选择的页面。不指定此属性等效于指定 DefaultSelectionType.ALL。

@param	defaultSelection DefaultSelectionType.ALL、DefaultSelectionType.RANGE 或 DefaultSelectionType.SELECTION。
@throws IllegalArgumentException 如果 defaultSelection 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.JobAttributes.DestinationType java.awt.JobAttributes.getDestination()
<!-- END KEY -->
<!-- BEGIN DATA -->
指定将输出到打印机还是使用这些属性的作业文件。将此属性更新为用户选择的值。

@return	DesintationType.FILE 或 DesintationType.PRINTER

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.JobAttributes.setDestination(JobAttributes.DestinationType destination)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定将输出到打印机还是使用这些属性的作业文件。不指定此属性等效于指定 DesintationType.PRINTER。

@param	destination DesintationType.FILE 或 DesintationType.PRINTER。
@throws IllegalArgumentException 如果目标为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.JobAttributes.DialogType java.awt.JobAttributes.getDialog()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对于使用这些属性的作业，用户是否应该看到用于修改打印设置的打印对话框，以及显示哪种类型的打印对话框。DialogType.COMMON 表示跨平台的纯 Java 打印对话框。DialogType.NATIVE 表示平台的本机打印对话框。如果平台不支持本机打印对话框，则显示纯 Java 打印对话框。DialogType.NONE 指定无打印对话框（即后台打印）。任何实现或目标打印机都不能修改此属性，也不能对其加以限制。

@return <code>DialogType.COMMON</code>、<code>DialogType.NATIVE</code> 或 <code>DialogType.NONE</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.JobAttributes.setDialog(JobAttributes.DialogType dialog)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定对于使用这些属性的作业，用户是否应该看到用于修改打印设置的打印对话框，以及显示哪种类型的打印对话框。DialogType.COMMON 表示跨平台的纯 Java 打印对话框。DialogType.NATIVE 表示平台的本机打印对话框。如果平台不支持本机打印对话框，则显示纯 Java 打印对话框。DialogType.NONE 指定无打印对话框（即后台打印）。不指定此属性等效于指定 DialogType.NATIVE。

@param	dialog DialogType.COMMON、DialogType.NATIVE 或 DialogType.NONE。
@throws IllegalArgumentException 如果对话框为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.JobAttributes.getFileName()
<!-- END KEY -->
<!-- BEGIN DATA -->
指定使用这些属性的作业的输出文件的文件名。将此属性更新为用户选择的值。

@return 可能为 <code>null</code> 文件名

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.JobAttributes.setFileName(String fileName)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定使用这些属性的作业的输出文件的文件名。默认为依赖于平台并且随实现而定。

@param	fileName 可能为 null 文件名。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.JobAttributes.getFromPage()
<!-- END KEY -->
<!-- BEGIN DATA -->
对于使用这些属性的作业，如果要打印某个范围的页面，则返回要打印的第一页。将此属性更新为用户选择的值。应用程序应该忽略此输出属性，除非 <code>getDefaultSelection</code> 方法的返回值为 DefaultSelectionType.RANGE。如有可能，应用程序应该优先使用 <code>getPageRanges</code> 的返回值而不是此方法的返回值。

@return	大于零且小于或等于 <i>toPage</i> 并且大于或等于 <i>minPage</i> 且小于或等于 <i>maxPage</i> 的整数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.JobAttributes.setFromPage(int fromPage)
<!-- END KEY -->
<!-- BEGIN DATA -->
对于使用这些属性的作业，如果要打印某个范围的页面，则指定要打印的第一页。如果未指定此属性，则使用 pageRanges 属性的值。如果指定 pageRanges，同时指定 fromPage 和 toPage 的其中之一或两者，则优先使用 pageRanges。如果不指定 pageRanges、fromPage 或 toPage 中的任何一个，则等效于调用 setPageRanges(new int[][] { new int[] { <i>minPage</i> } })；

@param	fromPage 大于零且小于或等于 <i>toPage</i> 并且大于或等于 <i>minPage</i> 且小于或等于 <i>maxPage</i> 的整数。
@throws IllegalArgumentException 如果违反了一个或多个上述条件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.JobAttributes.getMaxPage()
<!-- END KEY -->
<!-- BEGIN DATA -->
指定对于使用这些属性的作业，用户可以指定为要打印的最后一页的最大值。任何实现或目标打印机都不能修改此属性，也不能对其加以限制。

@return 大于零且大于或等于 <i>minPage</i> 的整数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.JobAttributes.setMaxPage(int maxPage)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定对于使用这些属性的作业，用户可以指定为要打印的最后一页的最大值。不指定此属性等效于指定 <code>Integer.MAX_VALUE</code>。

@param	maxPage 大于零且大于或等于 <i>minPage</i> 的整数
@throws	IllegalArgumentException 如果违反了一个或多个上述条件

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.JobAttributes.getMinPage()
<!-- END KEY -->
<!-- BEGIN DATA -->
指定对于使用这些属性的作业，用户可以指定为要打印的第一页的最小值。任何实现或目标打印机都不能修改此属性，也不能对其加以限制。

@return	大于零且小于或等于 <i>maxPage</i> 的整数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.JobAttributes.setMinPage(int minPage)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定对于使用这些属性的作业，用户可以指定为要打印的第一页的最小值。不指定此属性等效于指定 <code>1</code>。

@param	minPage 大于零且小于或等于 <i>maxPage</i> 的整数。
@throws	IllegalArgumentException 如果违反了一个或多个上述条件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.JobAttributes.MultipleDocumentHandlingType java.awt.JobAttributes.getMultipleDocumentHandling()
<!-- END KEY -->
<!-- BEGIN DATA -->
为使用这些属性的作业指定多份处理，包括整理。将此属性更新为用户选择的值。

@return MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_COLLATED_COPIES 或 MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.JobAttributes.setMultipleDocumentHandling(JobAttributes.MultipleDocumentHandlingType multipleDocumentHandling)
<!-- END KEY -->
<!-- BEGIN DATA -->
为使用这些属性的作业指定多份处理，包括整理。不指定此属性等效于指定 MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES。

@param	multipleDocumentHandling MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_COLLATED_COPIES 或 MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES。
@throws	IllegalArgumentException 如果 multipleDocumentHandling 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.JobAttributes.setMultipleDocumentHandlingToDefault()
<!-- END KEY -->
<!-- BEGIN DATA -->
对于使用这些属性的作业，将多份处理（包括整理）设置为默认值。默认处理为 MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[][] java.awt.JobAttributes.getPageRanges()
<!-- END KEY -->
<!-- BEGIN DATA -->
对于使用这些属性的作业，如果要打印某个范围的页面，则指定要打印的页面范围。范围中的所有数字都包括在内。将此属性更新为用户选择的值。应用程序应该忽略此输出属性，除非 <code>getDefaultSelection</code> 方法的返回值为 DefaultSelectionType.RANGE。

@return	两个元素的整数数组的数组。数组的范围被解释为包括两个指定页面以及它们之间的所有页面。范围必须为升序并且一定不能重叠。指定的页码不能小于 <i>minPage</i>，也不能大于 <i>maxPage</i>。例如：(new int[][] { new int[] { 1, 3 }, new int[] { 5, 5 }, new int[] { 15, 19 } }) 指定页面 1、2、3、5、15、16、17、18 和 19。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.JobAttributes.setPageRanges(int[][] pageRanges)
<!-- END KEY -->
<!-- BEGIN DATA -->
对于使用这些属性的作业，如果要打印某个范围的页面，则指定要打印的页面范围。范围中的所有数字都包括在内。如果未指定此属性，则使用 fromPage 和 toPages 属性的值。如果指定 pageRanges，同时指定 fromPage 和 toPage 的其中之一或两者，则优先使用 pageRanges。如果不指定 pageRanges、fromPage 和 toPage 中的任何一个，则等效于调用 setPageRanges(new int[][] { new int[] { <i>minPage</i>, <i>minPage</i> } })；

@param	pageRanges 两个元素的整数数组的数组。数组的范围被解释为包括两个指定页面以及它们之间的所有页面。范围必须为升序并且一定不能重叠。指定的页码不能小于 <i>minPage</i>，也不能大于 <i>maxPage</i>。例如：(new int[][] { new int[] { 1, 3 }, new int[] { 5, 5 }, new int[] { 15, 19 } }) 指定页面 1、2、3、5、15、16、17、18 和 19。注意，(new int[][] { new int[] { 1, 1 }, new int[] { 1, 2 } }) 是一种页面范围的无效设置，因为两个范围重叠。
@throws	IllegalArgumentException 如果违反了一个或多个上述条件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.JobAttributes.getPrinter()
<!-- END KEY -->
<!-- BEGIN DATA -->
为使用这些属性的作业返回目标打印机。将此属性更新为用户选择的值。

@return	可能为 null 打印机名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.JobAttributes.setPrinter(String printer)
<!-- END KEY -->
<!-- BEGIN DATA -->
为使用这些属性的作业指定目标打印机。默认为依赖于平台并且随实现而定。

@param	printer 可能为 null 打印机名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.JobAttributes.SidesType java.awt.JobAttributes.getSides()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对于使用这些属性的作业，如何在打印介质的面上强制应用连续页。SidesType.ONE_SIDED 将每个连续页强制应用于连续介质纸张的同一面。这种整版有时称为 <i>simplex</i>。SidesType.TWO_SIDED_LONG_EDGE 将每个连续页对应用于连续介质纸张的前后两面，以便介质上的每个页对方向正对着读者，就好像绑定在长边上一样。这种整版有时称为 <i>duplex</i>。SidesType.TWO_SIDED_SHORT_EDGE 将每个连续页对应用于连续介质纸张的前后两面，以便介质上的每个页对方向正对着读者，就好像绑定在短边上一样。这种整版有时称为 <i>tumble</i>。将此属性更新为用户选择的值。

@return	SidesType.ONE_SIDED、SidesType.TWO_SIDED_LONG_EDGE 或 SidesType.TWO_SIDED_SHORT_EDGE。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.JobAttributes.setSides(JobAttributes.SidesType sides)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定对于使用这些属性的作业，如何在打印介质的面上强制应用连续页。SidesType.ONE_SIDED 将每个连续页强制应用于连续介质表的同一面。这种整版有时称为 <i>simplex</i>。SidesType.TWO_SIDED_LONG_EDGE 将每个连续页对应用于连续介质纸张的前后两面，以便介质上的每个页对方向正对着读者，就好像绑定在长边上一样。这种整版有时称为 <i>duplex</i>。SidesType.TWO_SIDED_SHORT_EDGE 将每个连续页对应用于连续介质纸张的前后两面，以便介质上的每个页对方向正对着读者，就好像绑定在短边上一样。这种整版有时称为 <i>tumble</i>。不指定此属性等效于指定 SidesType.ONE_SIDED。

@param	sides SidesType.ONE_SIDED、SidesType.TWO_SIDED_LONG_EDGE 或 SidesType.TWO_SIDED_SHORT_EDGE。
@throws	IllegalArgumentException 如果面为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.JobAttributes.setSidesToDefault()
<!-- END KEY -->
<!-- BEGIN DATA -->
对于使用这些属性的作业，将如何在打印介质的面上强制应用连续页设置为默认值。默认的整版为 SidesType.ONE_SIDED。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.JobAttributes.getToPage()
<!-- END KEY -->
<!-- BEGIN DATA -->
对于使用这些属性的作业，如果要打印某个范围的页面，则返回要打印的最后一页（包括该页）。将此属性更新为用户选择的值。应用程序应该忽略此输出属性，除非 <code>getDefaultSelection</code> 方法的返回值是 DefaultSelectionType.RANGE。如果可能，应用程序应该优先使用 <code>getPageRanges</code> 的返回值而不用此方法的返回值。

@return	大于零且大于或等于 <i>toPage</i> 并且大于或等于 <i>minPage</i> 且小于或等于 <i>maxPage</i> 的整数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.JobAttributes.setToPage(int toPage)
<!-- END KEY -->
<!-- BEGIN DATA -->
对于使用这些属性的作业，如果要打印某个范围的页面，则指定要打印的最后一页（包括该页）。如果未指定此属性，则使用 pageRanges 属性的值。如果指定 pageRanges，同时指定 fromPage 和 toPage 的其中之一或两者，则优先使用 pageRanges。如果不指定 pageRanges、fromPage 和 toPage 中的任何一个，则等效于调用 setPageRanges(new int[][] { new int[] { <i>minPage</i> } })；

@param	toPage 大于零且大于或等于 <i>fromPage</i> 并且大于或等于 <i>minPage</i> 且小于或等于 <i>maxPage</i> 的整数。
@throws	IllegalArgumentException 如果违反了一个或多个上述条件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.JobAttributes.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定两个 JobAttributes 是否相等。
 <p>
当且仅当两个 JobAttributes 的每个属性都相等时，这两个 JobAttributes 才相等。当且仅当字段都引用同一个惟一枚举对象时，枚举类型的属性才相等。当且仅当范围集合长度相等，每个范围枚举相同的页面并且这些范围顺序都相同时，页面范围的集合才相等。

@param	obj 将检查其相等性的对象。
@return	obj 是否等于此 JobAttribute，遵循上述标准。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.JobAttributes.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 JobAttributes 的哈希码值。

@return	哈希码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.JobAttributes.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 JobAttributes 的字符串表示形式。

@return	字符串表示形式。

<!-- END DATA -->
