<!-- BEGIN KEY -->
protected abstract class java.awt.Component.AccessibleAWTComponent extends javax.accessibility.AccessibleContext implements java.io.Serializable, javax.accessibility.AccessibleComponent
<!-- END KEY -->
<!-- BEGIN DATA -->
用来为可访问性提供默认支持的 Component 的内部类。此类不是专门供应用程序开发人员直接使用的，而是供组件开发人员创建子类的。
<p>
可以使用该类来获得此对象的可访问功能。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component.AccessibleAWTComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
虽然该类是抽象的，但其所有子类都应该能够调用此方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Component.AccessibleAWTComponent.addPropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>PropertyChangeListener</code> 添加到侦听器列表中。

@param listener  要添加的属性更改侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Component.AccessibleAWTComponent.removePropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 PropertyChangeListener 从侦听器列表中移除。此方法移除了一个为所有属性注册的 PropertyChangeListener。

@param listener  要移除的 PropertyChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.Component.AccessibleAWTComponent.getAccessibleName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的可访问名称。此方法几乎从不返回 <code>java.awt.Component.getName()</code> 获取的名称，因为该名称通常不是一个本地化名称，并且对用户没有任何意义。如果对象根本就是一个文本对象（例如，一个菜单项），则可访问名称应该是该对象的文本（例如 &quot;save&quot;）。如果对象有一个工具提示，则工具提示文本还可以是要返回的适当  String。

@return 对象的本地化名称&mdash;&mdash;如果此对象没有名称，则可以返回 <code>null</code>
@see javax.accessibility.AccessibleContext#setAccessibleName

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.Component.AccessibleAWTComponent.getAccessibleDescription()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的可访问描述。此描述应该是一个关于此对象是什么（即此对象对用户的意义）的简单本地化描述。如果对象有一个工具提示，则工具提示文本还可以是要返回的适当字符串，假定它包含对该对象的简单描述（而不仅仅只包含对象的名称，例如，工具栏上用 &quot;save&quot; 作为工具提示文本的 &quot;Save&quot; 图标不能将其工具提示文本作为描述返回，但像 &quot;Saves the current text document&quot; 之类的文本则可以作为描述返回）。

@return 对象的本地化描述&mdash;&mdash;如果此对象没有描述，则可以返回 <code>null</code>
@see javax.accessibility.AccessibleContext#setAccessibleDescription

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleRole java.awt.Component.AccessibleAWTComponent.getAccessibleRole()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的职责。

@return 描述该对象职责的 <code>AccessibleRole</code> 的一个实例
@see javax.accessibility.AccessibleRole

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleStateSet java.awt.Component.AccessibleAWTComponent.getAccessibleStateSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的状态。

@return 包含对象当前状态设置的 <code>AccessibleStateSet</code> 的一个实例
@see javax.accessibility.AccessibleState

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible java.awt.Component.AccessibleAWTComponent.getAccessibleParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的 <code>Accessible</code> 父对象。如果此对象的父对象实现 <code>Accessible</code>，则此方法应该仅返回 <code>getParent</code>。

@return 此对象的 <code>Accessible</code> 父对象&mdash;&mdash;如果此对象没有 <code>Accessible</code> 父对象，则可以返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Component.AccessibleAWTComponent.getAccessibleIndexInParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象在其可访问父对象中的索引。

@return 此对象在其可访问父对象中的索引；如果此对象没有可访问的父对象，则返回 -1
@see #getAccessibleParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Component.AccessibleAWTComponent.getAccessibleChildrenCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象中可访问的子对象数。如果此对象的所有子对象都实现了 <code>Accessible</code>，那么此方法应该返回该对象的子对象数。

@return 返回此对象中可访问的子对象数

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible java.awt.Component.AccessibleAWTComponent.getAccessibleChild(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该对象的第 n 个 <code>Accessible</code> 子对象。

@param i 子对象的基于 0 的索引
@return 对象的第 n 个 <code>Accessible</code> 子对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Locale java.awt.Component.AccessibleAWTComponent.getLocale()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象的区域。

@return 此对象的区域

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleComponent java.awt.Component.AccessibleAWTComponent.getAccessibleComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此对象相关的 <code>AccessibleComponent</code>（如果存在一个这样的组件）。否则返回 <code>null</code>。

@return 组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color java.awt.Component.AccessibleAWTComponent.getBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的背景色。

@return 该对象的背景色（如果受支持）；否则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Component.AccessibleAWTComponent.setBackground(Color c)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的背景色。（有关透明度的信息，请参阅 <code>isOpaque</code>。）

@param c 新的背景 <code>Color</code>
@see Component#isOpaque

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color java.awt.Component.AccessibleAWTComponent.getForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的前景色。

@return 该对象的前景色（如果受支持）；否则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Component.AccessibleAWTComponent.setForeground(Color c)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的前景色。

@param c 新的前景 <code>Color</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Cursor java.awt.Component.AccessibleAWTComponent.getCursor()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的 <code>Cursor</code>。

@return 对象的 <code>Cursor</code>（如果受支持）；否则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Component.AccessibleAWTComponent.setCursor(Cursor cursor)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的 <code>Cursor</code>。
<p>
如果 Java 平台实现和/或本机系统不支持更改鼠标光标形状，则该方法可能不会产生任何视觉效果。

@param c 对象的新 <code>Cursor</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font java.awt.Component.AccessibleAWTComponent.getFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的 <code>Font</code>。

@return 对象的 <code>Font</code>（如果受支持）；否则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Component.AccessibleAWTComponent.setFont(Font f)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的 <code>Font</code>。

@param f 对象的新 <code>Font</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FontMetrics java.awt.Component.AccessibleAWTComponent.getFontMetrics(Font f)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的 <code>FontMetrics</code>。

@param f <code>Font</code>
@return 对象的 <code>FontMetrics</code>（如果受支持）；否则返回 <code>null</code>
@see #getFont


<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Component.AccessibleAWTComponent.isEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定是否启用了此对象。

@return 如果启用了此对象，则返回 ture；否则返回 false


<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Component.AccessibleAWTComponent.setEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的启用状态。

@param b 如果此参数为 ture，则启用此对象；否则将禁用它


<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Component.AccessibleAWTComponent.isVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定对象是否可见。注：这意味该对象应该是可见的；但事实上，可能因为包含此对象的对象之一是不可见的，所以此对象无法在屏幕上显示出来。使用 <code>isShowing</code> 来确定某个对象是否正显示在屏幕上。

@return 如果对象是可见的，则返回 ture；否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Component.AccessibleAWTComponent.setVisible(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的可见状态。

@param b 如果此参数为 ture，则显示对象；否则将隐藏它

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Component.AccessibleAWTComponent.isShowing()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定是否正在显示该对象。这是通过检查该对象的可见性及其祖先来确定的。注：即使另一个对象掩藏了该对象（例如，它碰巧在一个下拉的菜单下面），此方法也将返回 true。

@return 如果正在显示该对象，则返回 ture；否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Component.AccessibleAWTComponent.contains(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查指定的点是否在此对象的边界内，该点的 x 坐标和 y 坐标是相对于该对象的坐标系来定义的。

@param p 相对于该对象的坐标系的 <code>Point</code>
@return 如果该对象包含 <code>Point</code>，则返回 ture；否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.Component.AccessibleAWTComponent.getLocationOnScreen()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对象在屏幕上的位置。

@return 对象在屏幕上的位置&mdash;&mdash;如果此对象不在屏幕上，则可以返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.Component.AccessibleAWTComponent.getLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
通过用一个点指定该对象的左上角在屏幕坐标空间中的位置的形式，获取此对象相对于父对象的位置。

@return Point 的一个实例，这个 Point 表示了对象边界的左上角在屏幕坐标空间中的位置；如果此对象或其父对象不在屏幕上，则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Component.AccessibleAWTComponent.setLocation(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置对象相对父对象的位置。
@param p  对象的坐标

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle java.awt.Component.AccessibleAWTComponent.getBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的边界，用 Rectangle 对象的形式表示它。这些边界了指定此对象的宽度、高度和相对其父对象的位置。

@return 指示该组件的边界的一个矩形；如果此对象不在屏幕上，则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Component.AccessibleAWTComponent.setBounds(Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的边界，用 <code>Rectangle</code> 对象的形式表示它。这些边界了指定此对象的宽度、高度和相对其父对象的位置。

@param r 指示该组件的边界的一个矩形

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.Component.AccessibleAWTComponent.getSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象的大小，用 <code>Dimension</code> 对象的形式表示它。<code>Dimension</code> 对象的 height 字段包含此对象的高度，<code>Dimension</code> 对象的 width 字段包含此对象的宽度。

@return 指示此组件大小的一个 <code>Dimension</code> 对象；如果此对象不在屏幕上，则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Component.AccessibleAWTComponent.setSize(Dimension d)
<!-- END KEY -->
<!-- BEGIN DATA -->
调整此对象的大小，使它具有宽度和高度。

@param d 指定对象新大小的尺寸

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible java.awt.Component.AccessibleAWTComponent.getAccessibleAt(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含在局部坐标 <code>Point</code> 上的 <code>Accessible</code> 子对象（如果存在这样的对象）。否则返回 <code>null</code>。

@param p 定义 <code>Accessible</code> 左上角的点，在该对象的父对象的坐标空间内给定此点
@return 如果存在 <code>Accessible</code>，则在指定的位置上返回这个点；否则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Component.AccessibleAWTComponent.isFocusTraversable()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对此对象是否可以接受焦点的判断。

@return 如果对象可以接受焦点，则返回 ture；否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Component.AccessibleAWTComponent.requestFocus()
<!-- END KEY -->
<!-- BEGIN DATA -->
请求使此对象拥有焦点。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Component.AccessibleAWTComponent.addFocusListener(FocusListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定的焦点侦听器，以接收发自此组件的焦点事件。

@param l 焦点侦听器

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Component.AccessibleAWTComponent.removeFocusListener(FocusListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定的焦点侦听器，以便它不再接收发自此组件的焦点事件。

@param l 焦点侦听器

<!-- END DATA -->
