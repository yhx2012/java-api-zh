<!-- BEGIN KEY -->
public class java.awt.print.PageFormat extends java.lang.Object implements java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>PageFormat</code> 类描述要打印的页面大小和方向。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.print.PageFormat.LANDSCAPE
<!-- END KEY -->
<!-- BEGIN DATA -->
原点位于纸张的左下方，x 的方向从下到上，y 的方向从左到右。注意，这不是 Macintosh landscape，而是 Windows 和 PostScript landscape。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.print.PageFormat.PORTRAIT
<!-- END KEY -->
<!-- BEGIN DATA -->
原点在纸张的左上方，x 指向右方，y 指向下方。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.print.PageFormat.REVERSE_LANDSCAPE
<!-- END KEY -->
<!-- BEGIN DATA -->
原点位于纸张的右上方，x 的方向从上到下，y 的方向从右到左。注意，这是 Macintosh landscape。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.print.PageFormat()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建默认的纵向 <code>PageFormat</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.print.PageFormat.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
制作此 <code>PageFormat</code> 的副本，使它与此 <code>PageFormat</code> 具有相同的内容。
@return 此 <code>PageFormat</code> 的副本。

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.print.PageFormat.getWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回页面的宽度（以 1/72 英寸为单位）。在确定宽度时，此方法考虑了该页面方向。
@return 页面的宽度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.print.PageFormat.getHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回页面的高度（以 1/72 英寸为单位）。在确定高度时，此方法考虑了页面方向。
@return 页面的高度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.print.PageFormat.getImageableX()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>PageFormat</code> 相关的 <code>Paper</code> 对象的可成像区域左上方点的 x 坐标。此方法考虑了页面的方向。
@return 与此 <code>PageFormat</code> 相关的 <code>Paper</code> 对象的可成像区域左上方点的 x 坐标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.print.PageFormat.getImageableY()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>PageFormat</code> 相关的 <code>Paper</code> 对象的可成像区域左上方点的 y 坐标。此方法考虑了页面的方向。
@return 与此 <code>PageFormat</code> 相关的 <code>Paper</code> 对象的可成像区域左上方点的 y 坐标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.print.PageFormat.getImageableWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回页面可成像区域的宽度（以 1/72 英寸为单位）。此方法考虑了页面的方向。
@return 页面的宽度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.print.PageFormat.getImageableHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回页面可成像区域的高度（以 1/72 英寸为单位）。此方法考虑了页面的方向。
@return 页面的高度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.print.Paper java.awt.print.PageFormat.getPaper()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>PageFormat</code> 相关的 {@link Paper} 对象的一个副本。对从此方法返回的 <code>Paper</code> 对象进行的更改不影响此 <code>PageFormat</code> 的 <code>Paper</code> 对象。要更新此 <code>PageFormat</code> 的 <code>Paper</code> 对象，请创建新的 <code>Paper</code> 对象，并使用 {@link #setPaper(Paper)} 方法将它设置到此 <code>PageFormat</code> 中。
@return 与此 <code>PageFormat</code> 相关的 <code>Paper</code> 对象的一个副本。
@see #setPaper

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.print.PageFormat.setPaper(Paper paper)
<!-- END KEY -->
<!-- BEGIN DATA -->
为此 <code>PageFormat</code> 设置 <code>Paper</code> 对象。
@param paper 作为 <code>PageFormat</code> 的 <code>Paper</code> 对象的设置目标的 <code>Paper</code> 对象。
@exception <code>NullPointerException</code> 传递的页面实例参数为 null 。
@see #getPaper

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.print.PageFormat.setOrientation(int orientation) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置页面方向。<code>orientation</code> 必须是以下常量之一：PORTRAIT、LANDSCAPE 或 REVERSE_LANDSCAPE。
@param orientation 页面的新方向
@throws IllegalArgumentException 如果请求了未知的方向
@see #getOrientation

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.print.PageFormat.getOrientation()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>PageFormat</code> 的方向。
@return 此 <code>PageFormat</code> 对象的方向。
@see #setOrientation

<!-- END DATA -->
<!-- BEGIN KEY -->
public double[] java.awt.print.PageFormat.getMatrix()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个变换矩阵，该矩阵将呈现的用户空间向请求的方向平移。将值按 {@link AffineTransform} 构造方法所要求的形式 {&nbsp;m00,&nbsp;m10,&nbsp;m01,&nbsp;m11,&nbsp;m02,&nbsp;m12} 放入数组中。
@return 用于将呈现的用户空间向页面的方向平移的矩阵。
@see java.awt.geom.AffineTransform

<!-- END DATA -->
