<!-- BEGIN KEY -->
public abstract class java.awt.print.PrinterJob extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>PrinterJob</code> 类是控制打印的主要类。应用程序调用此类中的方法设置作业、（可选地）调用与用户的打印对话框，然后打印作业的页面。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.print.PrinterJob()
<!-- END KEY -->
<!-- BEGIN DATA -->
应使用静态 {@link #getPrinterJob() <code>getPrinterJob</code>} 方法创建 <code>PrinterJob</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.print.PrinterJob java.awt.print.PrinterJob.getPrinterJob()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回初始化时与默认打印机关联的 <code>PrinterJob</code>。如果系统上没有可用的打印机，则仍从此方法返回 PrinterJob，但是，<code>getPrintService()</code> 将返回 <code>null</code>，并且使用此 <code>PrinterJob</code> 调用 {@link #print() print} 可能产生异常。需要在创建 <code>PrinterJob</code> 之前确定是否有合适打印机的应用程序应确保从 {@link #lookupPrintServices() lookupPrintServices} 返回的数组不为空。
@return 新的 <code>PrinterJob</code>。
@throws  SecurityException 如果安全管理器存在并且其 {@link java.lang.SecurityManager#checkPrintJobAccess} 方法不允许此线程创建打印作业请求

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.print.PrintService[] java.awt.print.PrinterJob.lookupPrintServices()
<!-- END KEY -->
<!-- BEGIN DATA -->
查找 2D 打印服务的便捷方法。在支持打印服务的 <code>PrinterJob</code> 上可以安装从此方法返回的服务。调用此方法等效于调用 {@link javax.print.PrintServiceLookup#lookupPrintServices( DocFlavor, AttributeSet) <code>PrintServiceLookup.lookupPrintServices()</code>} 并指定一个 Pageable DocFlavor。
@return  2D 打印服务数组，可能为空。
@since     1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.print.StreamPrintServiceFactory[] java.awt.print.PrinterJob.lookupStreamPrintServices(String mimeType)
<!-- END KEY -->
<!-- BEGIN DATA -->
定位可以成像 2D 图形的流打印服务工厂的便捷方法。示例用法：
 <pre>
 FileOutputStream outstream;
 StreamPrintService psPrinter;
 String psMimeType = &quot;application/postscript&quot;;

 StreamPrintServiceFactory[] factories =
     PrinterJob.lookupStreamPrintServices(psMimeType);
 if (factories.length &gt; 0) {
     try {
         outstream = new File(&quot;out.ps&quot;);
         psPrinter =  factories[0].getPrintService(fos);
         // psPrinter can now be set as the service on a PrinterJob 
     } catch (FileNotFoundException e) {
     }
 }            
 </pre>
在支持打印服务的 <code>PrinterJob</code> 实例上可以安装从此方法返回的服务。调用此方法等效于调用 {@link javax.print.StreamPrintServiceFactory#lookupStreamPrintServiceFactories(DocFlavor, String) <code>StreamPrintServiceFactory.lookupStreamPrintServiceFactories()</code>} 并指定一个 Pageable DocFlavor。
 
@param mimeType 需要的输出格式；或 null，指任何格式。
@return 2D 流打印服务工厂的数组，可能为空。
@since     1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.print.PrintService java.awt.print.PrinterJob.getPrintService()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此打印机作业的服务（打印机）。不支持打印服务的此类的实现可能返回 null。如果没有打印机可用，也将返回 null。
@return 此打印机作业的服务。
@see #setPrintService(PrintService)
@see #getPrinterJob()
@since     1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.print.PrinterJob.setPrintService(PrintService service) throws java.awt.print.PrinterException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 PrinterJob 与新的 PrintService 关联。支持指定 Print Service 的子类重写此方法。

如果指定的服务不能支持执行 2D 打印所需的 <code>Pageable</code> 和 <code>Printable</code> 接口，则抛出 <code>PrinterException</code>。
@param service 支持 2D 打印的打印服务
@exception PrinterException 如果指定的服务不支持 2D 打印；此 PrinterJob 类不支持设置 2D 打印服务；指定的服务不是有效的打印服务。
@see #getPrintService
@since     1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.print.PrinterJob.setPrintable(Printable painter)
<!-- END KEY -->
<!-- BEGIN DATA -->
调用 <code>painter</code> 以呈现页面。{@link Printable} 对象 <code>painter</code> 可以呈现此 <code>PrinterJob</code> 打印的文档中的页面。每页的 {@link PageFormat} 是默认的页面格式。
@param painter 呈现文档每个页面的 <code>Printable</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.print.PrinterJob.setPrintable(Printable painter, PageFormat format)
<!-- END KEY -->
<!-- BEGIN DATA -->
调用 <code>painter</code>，用指定的 <code>format</code> 呈现该页面。<code>Printable</code> 对象 <code>painter</code> 可以呈现此 <code>PrinterJob</code> 打印的文档中的页面。每个页面的 <code>PageFormat</code> 为 <code>format</code>。
@param painter 呈现文档的每个页面所调用的 <code>Printable</code>
@param format 要打印的每个页面的大小和方向

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.print.PrinterJob.setPageable(Pageable document) throws java.lang.NullPointerException
<!-- END KEY -->
<!-- BEGIN DATA -->
查询 <code>document</code>，以获得页面数和 <code>Pageable</code> 实例 <code>document</code> 中保存的每个页面的 <code>PageFormat</code> 和 <code>Printable</code>。
@param document 要打印的页面。它不能为 <code>null</code>。
@exception NullPointerException 传入的 <code>Pageable</code> 为 <code>null</code>。
@see PageFormat
@see Printable

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.awt.print.PrinterJob.printDialog() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
向用户呈现一个对话框，用来更改打印作业的属性。如果选择本机打印服务，则此方法将显示本机对话框，并且用户选择的打印机将限于这些本机打印服务。若要为所有服务（包括本机服务）呈现跨平台打印对话框，请使用 <code>printDialog(PrintRequestAttributeSet)</code>。
 <p>
可以使用 PrintService 实现的 PrinterJob 实现将更新 PrintService，以便此 PrinterJob 反映用户选择的新服务。
@return 如果用户不取消该对话框，则返回 <code>true</code>；否则返回 <code>false</code>。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.print.PrinterJob.printDialog(PrintRequestAttributeSet attributes) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
为所有服务显示跨平台打印对话框的便捷方法，这些服务能够使用 <code>Pageable</code> 接口打印 2D 图形。在最初显示对话框时，选择的打印机将反映当前连接到此打印作业的打印服务。如果用户更改了打印服务，则 PrinterJob 将被更新以反映此更改，除非该用户取消该对话框。除了允许用户选择目标打印机外，用户还可以选择各种打印请求属性的值。
 <p>
输入的 attributes 参数将反映用户对话框中最初选择所需的应用程序。未指定 attributes 时使用服务的默认应用程序显示。返回时，它将反映用户的选择。实现可能更新选择，以与当前选择的打印服务支持的值一致。
 <p>
当用户滚动到新的打印服务选择时，复制的值将基于以前服务的设置，以及任何用户更改。这些值不基于客户端提供的初始设置。
 <p>
除了选择的打印机外，不会为反映该用户的更改而更新 PrinterJob 的状态。对于影响打印机作业的选择，在对 <code>print(PrintRequestAttributeSet)</code> 方法的调用中必须指定 attributes。如果使用 Pageable 接口，打算使用用户选择媒体的客户端必须创建继承自用户选择的 PageFormat。如果用户取消对话框，则 attributes 将不会反映用户进行的任何更改。
@param attributes 输入时，该参数是为应用程序提供的属性；输出时，内容将更新以反映用户的选择。此参数不可以为 null。
@return 如果用户不取消该对话框，则返回 <code>true</code>；否则返回 <code>false</code>。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@exception NullPointerException 如果 <code>attributes</code> 参数为 null。
@see java.awt.GraphicsEnvironment#isHeadless
@since     1.4
 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.print.PageFormat java.awt.print.PrinterJob.pageDialog(PageFormat page) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
显示允许修改 <code>PageFormat</code> 实例的对话框。<code>page</code> 参数用于在页面设置对话框中初始化控件。如果用户取消对话框，则此方法将返回未修改的初始 <code>page</code> 对象。如果用户确认对话框，那么此方法将返回具有指示更改的新 <code>PageFormat</code> 对象。无论是哪种情况，都不会修改初始 <code>page</code> 对象。
@param page 提供给用户用来修改的默认 <code>PageFormat</code>。
@return  如果取消对话框，则返回初始 <code>page</code> 对象；如果承认对话框，则返回包含用户指示格式的新 <code>PageFormat</code> 对象。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless
@since     1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.print.PageFormat java.awt.print.PrinterJob.pageDialog(PrintRequestAttributeSet attributes) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
显示跨平台页面设置对话框的便捷方法。可用的选择将反映当前在此 PrinterJob 上设置的打印服务。
 <p>
输入的 attributes 参数将反映用户对话框中最初选择所需的客户端。未指定 attributes 时使用该服务的默认应用程序显示。返回时，它将反映用户的选择。可以更新选择，以与当前选择的打印服务支持的值一致。
 <p>
返回值为 PageFormat，它等于 PrintRequestAttributeSet 中选择的值。如果用户取消对话框，则 attributes 将不会反映用户进行的任何更改，并且返回值将为 null。
@param attributes 对于输入，该参数是为用户提供的属性；对于输出，内容将更新以反映用户的选择。此参数不可以为 null。
@return 如果用户不取消该对话框，则返回页面格式；否则返回 <code>null</code>。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@exception NullPointerException 如果 <code>attributes</code> 参数为 null。
@see java.awt.GraphicsEnvironment#isHeadless
@since     1.4
 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.print.PageFormat java.awt.print.PrinterJob.defaultPage(PageFormat page)
<!-- END KEY -->
<!-- BEGIN DATA -->
复制 <code>PageFormat</code> 参数，并更改该副本，以描述默认页面的大小和方向。
@param page 要复制和更改的 <code>PageFormat</code>
@return <code>page</code> 的副本，已为描述默认的 <code>PageFormat</code> 而更改。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.print.PageFormat java.awt.print.PrinterJob.defaultPage()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的 <code>PageFormat</code> 实例，并将它设置为默认大小和方向。
@return 要设置为默认大小和方向的 <code>PageFormat</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.print.PageFormat java.awt.print.PrinterJob.getPageFormat(PrintRequestAttributeSet attributes)
<!-- END KEY -->
<!-- BEGIN DATA -->
 使用与受此作业 <code>PrintService</code> 支持的那些值一致的值（即由 <code>getPrintService()</code> 返回的值），以及 <code>attributes</code> 中包含的介质、可打印区域和方向计算 <code>PageFormat</code>。
 <p>
 调用此方法不会更新作业。对于拥有一组从 <code>printDialog(PrintRequestAttributeSet attributes)</code> 中获得的属性并需要 PageFormat 来打印 Pageable 对象的客户机而言，这很有用。
 @param attributes 一组打印属性，例如通过调用 printDialog 获得的属性。如果 <code>attributes</code> 为 null，则返回默认 PageFormat。
 @return 设置符合当前服务和指定属性要求的 <code>PageFormat</code>。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.print.PageFormat java.awt.print.PrinterJob.validatePage(PageFormat page)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>page</code> 的副本，调整其设置，以与此 <code>PrinterJob</code> 的当前打印机兼容。例如，返回的 <code>PageFormat</code> 所具有的可成像区域应该调整到适合当前打印机使用的纸张的物理区域。
@param page 复制的 <code>PageFormat</code>，其设置被更改为与当前打印机兼容
@return 从 <code>page</code> 复制的 <code>PageFormat</code>，其设置被更改为符合此 <code>PrinterJob</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.print.PrinterJob.print() throws java.awt.print.PrinterException
<!-- END KEY -->
<!-- BEGIN DATA -->
打印一组页面。
@exception PrinterException 打印系统中出现导致作业中断的错误。
@see Book
@see Pageable
@see Printable

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.print.PrinterJob.print(PrintRequestAttributeSet attributes) throws java.awt.print.PrinterException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用属性集中的设置打印一组页面。默认实现忽略属性集。
 <p>
注意，通过调用等效的方法（例如，副本：<code>setcopies(int)</code>、作业名称：<code>setJobName(String)</code>）和指定媒体大小和方向（通过 <code>PageFormat</code> 对象）可以直接在 PrinterJob 上设置某些属性。
 <p>
如果在此属性集中指定了支持的属性值，则该属性值仅对此 print() 操作优先于 API 设置。对于 PageFormat，指定以下行为：如果客户端使用 Printable 接口，则检查此方法的 <code>attributes</code> 参数，以了解指定媒体（按大小）、方向和可成像区域的属性以及用于构建新 PageFormat（传递到 Printable 对象的 print() 方法）的属性。有关 Printable 为确保通过 PrinterJob 进行最佳打印所需行为的解释，请参阅 {@link Printable}。对于 Pageable 接口的客户端，每个页面上的 PageFormat 将始终由该接口提供。
 <p>
这些行为允许应用程序直接将从 <code>printDialog(PrintRequestAttributeSet attributes)</code> 返回的用户设置传递到此 print() 方法。
 <p>
 
@param attributes 作业的属性集
@exception PrinterException 打印系统中出现导致作业中断的错误。
@see Book
@see Pageable
@see Printable
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.print.PrinterJob.setCopies(int copies)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置要打印的副本数。
@param copies 要打印的副本数
@see #getCopies

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.awt.print.PrinterJob.getCopies()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取要打印的副本数。
@return 要打印的副本数。
@see #setCopies

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String java.awt.print.PrinterJob.getUserName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取打印用户的名称。
@return 打印用户的名称

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.print.PrinterJob.setJobName(String jobName)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置要打印的文档名称。文档名称不能为 <code>null</code>。
@param jobName 要打印的文档名称
@see #getJobName

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String java.awt.print.PrinterJob.getJobName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取要打印的文档名称。
@return 要打印的文档名称。
@see #setJobName

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.print.PrinterJob.cancel()
<!-- END KEY -->
<!-- BEGIN DATA -->
取消正在进行的打印作业。如果调用了 {@link #print() print}，但未返回，那么此方法会发送下一次应取消该作业的信号。如果没有正在进行的打印作业，则此调用不执行任何操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.awt.print.PrinterJob.isCancelled()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果打印作业正在进行中，而下一次打印作业将被取消，则返回 <code>true</code>；否则返回 <code>false</code>。
@return 如果进行中的作业将被取消，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
