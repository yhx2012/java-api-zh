<!-- BEGIN KEY -->
public interface java.awt.LayoutManager2 extends java.awt.LayoutManager
<!-- END KEY -->
<!-- BEGIN DATA -->

为类定义接口，该类知道如何根据布局约束对象来布置 Container。

此接口扩展了 LayoutManager 接口，以根据约束对象显式地处理布局，该约束对象指定应该如何以及在何处将组件添加到布局。
 <p>
LayoutManager 的这一最小扩展可供想要创建基于约束的布局的工具提供者使用。但是，它不对基于约束的自定义布局管理器提供完整的通用支持。

@see LayoutManager
@see Container

@version	1.14, 12/19/03
@author 	Jonni Kanerva

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.LayoutManager2.addLayoutComponent(Component comp, Object constraints)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定约束对象，将指定组件添加到布局。
@param comp 要添加的组件
@param constraints 如何以及在何处将组件添加到布局。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.LayoutManager2.maximumLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->

给定指定容器的组件，计算该容器的最大大小维数。
@see java.awt.Component#getMaximumSize
@see LayoutManager

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.LayoutManager2.getLayoutAlignmentX(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回沿 X 轴的对齐方式。它指定如何相对于其他组件对齐该组件。值应该是一个介于 0 和 1 之间的数，其中 0 表示顶部对齐，1 表示底部对齐，0.5 表示居中对齐等。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.LayoutManager2.getLayoutAlignmentY(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回沿 Y 轴的对齐方式。它指定如何相对于其他组件对齐该组件。值应该是一个介于 0 和 1 之间的数，其中 0 表示顶部对齐，1 表示底部对齐，0.5 表示居中对齐等。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.LayoutManager2.invalidateLayout(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
使布局失效，指示如果布局管理器缓存了信息，则应该将其丢弃。

<!-- END DATA -->
