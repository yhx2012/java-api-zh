<!-- BEGIN KEY -->
public abstract class java.awt.MenuComponent extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
抽象类 <code>MenuComponent</code> 是所有与菜单相关的组件的超类。在这一方面，类 <code>MenuComponent</code> 与 AWT 组件的抽象超类 <code>Component</code> 相似。
 <p>
菜单组件接收并处理 AWT 事件，就像组件通过方法 <code>processEvent</code> 执行的操作一样。

@version 	1.81, 06/01/06
@author 	Arthur van Hoff
@since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.Font java.awt.MenuComponent.font
<!-- END KEY -->
<!-- BEGIN DATA -->
菜单组件的字体。此值可以为 <code>null</code>，将在该点使用默认值。默认值为 <code>null</code>。

@serial
@see #setFont(Font)
@see #getFont()

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.awt.MenuComponent.name
<!-- END KEY -->
<!-- BEGIN DATA -->
该菜单组件的名称，默认为 <code>null</code>。
@serial
@see #getName()
@see #setName(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean java.awt.MenuComponent.nameExplicitlySet
<!-- END KEY -->
<!-- BEGIN DATA -->
指示是否显式设置名称的变量。如果为 <code>true</code>，将以显式方式设置该名称。此变量默认为 <code>false</code>。
@serial
@see #setName(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean java.awt.MenuComponent.newEventsOnly
<!-- END KEY -->
<!-- BEGIN DATA -->
默认为 <code>false</code>。
@serial
@see #dispatchEvent(AWTEvent)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuComponent() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 <code>MenuComponent</code>。
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless</code> 返回 <code>true</code>
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.MenuComponent.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取该菜单组件的名称。
@return        该菜单组件的名称
@see           java.awt.MenuComponent#setName(java.lang.String)
@since         JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.setName(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
将该组件的名称设置为指定字符串。
@param         name    菜单组件的名称
@see           java.awt.MenuComponent#getName
@since         JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuContainer java.awt.MenuComponent.getParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此菜单组件的父容器。
@return    包含此菜单组件的菜单组件，如果此菜单组件就是最外部组件，即该菜单栏本身，则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.peer.MenuComponentPeer java.awt.MenuComponent.getPeer()
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，程序不应直接操作同位体。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font java.awt.MenuComponent.getFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取用于此菜单组件的字体。
@return   在此菜单组件中使用的字体（如果存在）；否则返回 <code>null</code>
@see     java.awt.MenuComponent#setFont

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.setFont(Font f)
<!-- END KEY -->
<!-- BEGIN DATA -->
将用于此菜单组件的字体设置为指定字体。除非此菜单组件的所有子组件指定其他字体，否则它们也使用此字体。 
 <p>
有些平台可能不支持对菜件组件的所有字体属性的设置；在这种情况下，调用 <code>setFont</code> 对此菜单组件不支持的字体属性不会产生任何效果。除非此菜单组件的子菜单组件指定其他字体，否则，如果底层平台支持此字体，则这些子组件将使用该字体。  

@param     f   要设置的字体
@see       #getFont
@see       Font#getAttributes
@see       java.awt.font.TextAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.removeNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除该菜单组件的同位体。该同位体允许我们修改该菜单组件的外观，而不改变该菜单组件的功能。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.MenuComponent.postEvent(Event evt)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的事件发布到该菜单。此方法是 Java&nbsp;1.0 事件系统的一部分，维持它只是为了获得向后兼容。不鼓励使用它，它将来可能不受支持。
@param evt 将要发生的事件
@deprecated 从 JDK version 1.1 开始，已由 {@link #dispatchEvent(AWTEvent) dispatchEvent} 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.awt.MenuComponent.dispatchEvent(AWTEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
将事件传递给此组件或其子组件之一。
@param e 事件

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.MenuComponent.processEvent(AWTEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->

处理发生在此菜单组件上的事件。  
<p>注意，如果此事件参数为 <code>null</code>，则此行为是不确定的，而且可能导致异常。

@param e 事件
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.awt.MenuComponent.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此 <code>MenuComponent</code> 状态的字符串。此方法仅用于调试目的，对于这两个实现，返回的字符串的内容和格式可能有所不同。返回的字符串可以为空，但不可以为 <code>null</code>。

@return     此菜单组件的参数字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.MenuComponent.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此菜单组件的表示形式。
@return  此菜单组件的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.lang.Object java.awt.MenuComponent.getTreeLock()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此组件的锁定对象（拥有该线程同步监视器的对象），该对象可用于 AWT 组件树和布局操作。
@return 此组件的锁定对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.MenuComponent.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 <code>MenuComponent</code> 关联的 <code>AccessibleContext</code>。由此基类实现的方法返回 <code>null</code>。扩展 <code>MenuComponent</code> 的类应实现此方法，以返回与该子类关联的 <code>AccessibleContext</code>。

@return 此 <code>MenuComponent</code> 的 <code>AccessibleContext</code>
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.MenuComponent.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
从对象输入流读取该菜单组件。

@param s 要读取的 <code>ObjectInputStream</code>
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless</code> 返回 <code>true</code>
@serial
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
