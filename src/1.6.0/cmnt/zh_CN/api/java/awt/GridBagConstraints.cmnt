<!-- BEGIN KEY -->
public class java.awt.GridBagConstraints extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>GridBagConstraints</code> 类指定使用 <code>GridBagLayout</code> 类布置的组件的约束。

@version     1.41, 05/26/06
@author Doug Stein
@author Bill Spitzak (orignial NeWS & OLIT implementation)
@see java.awt.GridBagLayout
@since JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.RELATIVE
<!-- END KEY -->
<!-- BEGIN DATA -->
指定此组件为其行或列（<code>gridwidth</code>、<code>gridheight</code>）中的倒数第二个组件，或者让此组件紧跟在以前添加的组件（<code>gridx</code>、<code>gridy</code>）之后。
@see      java.awt.GridBagConstraints#gridwidth
@see      java.awt.GridBagConstraints#gridheight
@see      java.awt.GridBagConstraints#gridx
@see      java.awt.GridBagConstraints#gridy

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.REMAINDER
<!-- END KEY -->
<!-- BEGIN DATA -->
指定此组件是其行或列中的最后一个组件。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.NONE
<!-- END KEY -->
<!-- BEGIN DATA -->
不重新调整组件大小。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.BOTH
<!-- END KEY -->
<!-- BEGIN DATA -->
在水平方向和垂直方向上同时调整组件大小。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.HORIZONTAL
<!-- END KEY -->
<!-- BEGIN DATA -->
在水平方向而不是垂直方向上调整组件大小。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.VERTICAL
<!-- END KEY -->
<!-- BEGIN DATA -->
在垂直方向而不是水平方向上调整组件大小。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.CENTER
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件置于其显示区域的中心。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.NORTH
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件置于其显示区域的顶部，并在水平方向上居中。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.NORTHEAST
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件置于其显示区域的右上角。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.EAST
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件置于其显示区域的右部，并在垂直方向上居中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.SOUTHEAST
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件置于其显示区域的右下角。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.SOUTH
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件置于其显示区域的底部，并在水平方向上居中。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.SOUTHWEST
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件置于其显示区域的左下角。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.WEST
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件置于其显示区域的左部，并在垂直方向上居中。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.NORTHWEST
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件置于其显示区域的左上角。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.PAGE_START
<!-- END KEY -->
<!-- BEGIN DATA -->

沿显示区域的边缘居中放置组件，该显示区域与当前 <code>ComponentOrienation</code> 的页面开始部分相关。等同于水平方向的 NORTH。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.PAGE_END
<!-- END KEY -->
<!-- BEGIN DATA -->
沿显示区域的边缘居中放置组件，该显示区域与当前 <code>ComponentOrienation</code> 的页面结束部分相关。等同于水平方向的 SOUTH。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.LINE_START
<!-- END KEY -->
<!-- BEGIN DATA -->
沿显示区域的边缘居中放置组件，在该区域中，当前 <code>ComponentOrienation</code> 的文本行正常开始。等同于水平的、从左到右方向的 WEST，以及水平的、从右到左方向的 EAST。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.LINE_END
<!-- END KEY -->
<!-- BEGIN DATA -->
沿显示区域的边缘居中放置组件，在该区域中，当前 <code>ComponentOrienation</code> 的文本行正常结束。等同于水平的、从左到右方向的 EAST，以及水平的、从右到左方向的 WEST。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.FIRST_LINE_START
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件置于其显示区域的一角，这一角的位置是页面中最后一个文本行按照当前的 <code>ComponentOrienation</code> 在页面中的开始位置。等同于水平的、从左到右方向的 NORTHWEST，以及水平的、从右到左方向的 NORTHEAST。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.FIRST_LINE_END
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件置于显示区域的一角，在该区域中，当前 <code>ComponentOrienation</code> 的页面的第一个文本行正常结束。等同于水平的、从左到右方向的 NORTHEAST，以及水平的、从右到左方向的 NORTHWEST。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.LAST_LINE_START
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件置于其显示区域的一角，这一角的位置是页面中最后一个文本行按照当前的 <code>ComponentOrienation</code> 在页面中的开始位置。等同于水平的、从左到右的 SOUTHWEST，以及水平的、从右到左方向的 SOUTHEAST。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.LAST_LINE_END
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件置于其显示区域的一角，这一角的位置是页面中最后一个文本行按照当前的 <code>ComponentOrienation</code> 在页面中的结束位置。等同于水平的、从左到右的 SOUTHEAST，以及水平的、从右到左方向的 SOUTHWEST。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.BASELINE
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>anchor</code> 字段的可能值。指定组件应该沿主要行的基线水平居中和垂直对齐。如果组件没有基线，那么它会垂直居中对齐。     

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.BASELINE_LEADING
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>anchor</code> 字段的可能值。指定组件应沿开始边水平放置。对于从左到右方向的组件，开始边是左边。组件沿主要行的基线垂直对齐。如果组件没有基线，那么它会垂直居中对齐。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.BASELINE_TRAILING
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>anchor</code> 字段的可能值。指定组件应沿结尾边水平放置。对于从左到右方向的组件，结尾边是右边。组件沿主要行的基线垂直对齐。如果组件没有基线，那么它会垂直居中对齐。
 
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.ABOVE_BASELINE
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>anchor</code> 字段的可能值。指定组件应该水平居中对齐。垂直放置组件，使它的底边接触到开始行的基线。如果开始行没有基线，那么它会垂直居中对齐。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>anchor</code> 字段的可能值。指定组件应沿开始边水平放置。对于从左到右方向的组件，开始边是左边。垂直放置组件，使它的底边接触到开始行的基线。如果开始行没有基线，那么它会垂直居中对齐。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.ABOVE_BASELINE_TRAILING
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>anchor</code> 字段的可能值。指定组件应沿结尾边水平放置。对于从左到右方向的组件，结尾边是右边。垂直放置组件，使它的底边接触到开始行的基线。如果开始行没有基线，那么它会垂直居中对齐。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.BELOW_BASELINE
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>anchor</code> 字段的可能值。指定组件应该水平居中对齐。垂直放置组件，使它的底边接触到开始行的基线。如果开始行没有基线，那么它会垂直居中对齐。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.BELOW_BASELINE_LEADING
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>anchor</code> 字段的可能值。指定组件应沿开始边水平放置。对于从左到右方向的组件，开始边是左边。垂直放置组件，使它的底边接触到开始行的基线。如果开始行没有基线，那么它会垂直居中对齐。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.GridBagConstraints.BELOW_BASELINE_TRAILING
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>anchor</code> 字段的可能值。指定组件应沿结尾边水平放置。对于从左到右方向的组件，结尾边是右边。垂直放置组件，使它的底边接触到开始行的基线。如果开始行没有基线，那么它会垂直居中对齐。

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.GridBagConstraints.gridx
<!-- END KEY -->
<!-- BEGIN DATA -->
指定包含组件的显示区域开始边的单元格，其中行的第一个单元格为 <code>gridx=0</code>。组件显示区域的开始边指的是水平的、从左到右的容器的左边缘，以及水平的、从右到左的容器的右边缘。值 <code>RELATIVE</code> 指定将组件放置在添加此组件之前刚刚添加到容器中的组件的后面。 
 <p>
默认值为 <code>RELATIVE</code>。<code>gridx</code> 应为非负值。
@serial
@see #clone()
@see java.awt.GridBagConstraints#gridy
@see java.awt.ComponentOrientation

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.GridBagConstraints.gridy
<!-- END KEY -->
<!-- BEGIN DATA -->
指定位于组件显示区域的顶部的单元格，其中最上边的单元格为 <code>gridy=0</code>。值 <code>RELATIVE</code> 指定将组件放置在添加此组件之前刚刚添加到容器中的组件的下面。 
 <p>
默认值为 <code>RELATIVE</code>。<code>gridy</code> 应为非负值。
@serial
@see #clone()
@see java.awt.GridBagConstraints#gridx

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.GridBagConstraints.gridwidth
<!-- END KEY -->
<!-- BEGIN DATA -->
指定组件显示区域的某一行中的单元格数。 
 <p>
使用 <code>REMAINDER</code> 指定组件的显示区域，该区域的范围是从 <code>gridx</code> 到该行的最后一个单元格。使用 <code>RELATIVE</code> 指定组件的显示区域，该区域的范围是从 <code>gridx</code> 到它所在行的倒数第二个单元格。
 <p>
<code>gridwidth</code> 应为非负，默认值为 1。
@serial
@see #clone()
@see java.awt.GridBagConstraints#gridheight

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.GridBagConstraints.gridheight
<!-- END KEY -->
<!-- BEGIN DATA -->
指定在组件显示区域的一列中的单元格数。 
 <p>
使用 <code>REMAINDER</code> 指定组件的显示区域，该区域的范围是从 <code>gridy</code> 到该列的最后一个单元格。使用 <code>RELATIVE</code> 指定组件的显示区域，该区域的范围是从 <code>gridy</code> 到它所在列的倒数第二个单元格。
 <p>
<code>gridheight</code> 应为非负，默认值为 1。
@serial
@see #clone()
@see java.awt.GridBagConstraints#gridwidth

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.GridBagConstraints.weightx
<!-- END KEY -->
<!-- BEGIN DATA -->
指定如何分布额外的水平空间。
 <p>
网格包布局管理器计算出列的权重将是列的所有组件中最大的 <code>weightx</code>。如果得到的布局在水平方向上比需要填充的区域小，那么系统会将额外的空间按照其权重比例分布到每一列。权重为零的列不会得到额外的空间。 
 <p>
如果所有的权重都为零，则所有的额外空间都将出现在单元格的网格之间和左右边缘之间。 
 <p>
此字段的默认值为 <code>0</code>。<code>weightx</code> 应为非负值。
@serial
@see #clone()
@see java.awt.GridBagConstraints#weighty

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.GridBagConstraints.weighty
<!-- END KEY -->
<!-- BEGIN DATA -->
指定如何分布额外的垂直空间。 
 <p>
网格包布局管理器计算出行的权重将是行的所有组件中最大的 <code>weighty</code>。如果得到的布局在垂直方向上比需要填充的区域小，则系统会将额外的空间按照其权重比例分布到每一行。权重为零的行不会得到额外的空间。 
 <p>
如果所有的权重都为零，则所有的额外空间都将出现在单元格的网格之间和上下边缘之间。 
 <p>
此字段的默认值为 <code>0</code>。<code>weighty</code> 应为非负值。
@serial
@see #clone()
@see java.awt.GridBagConstraints#weightx

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.GridBagConstraints.anchor
<!-- END KEY -->
<!-- BEGIN DATA -->

当组件小于其显示区域时使用此字段。它可以确定在显示区域中放置组件的位置。 
 <p>
可能的值有三种：相对于方向的值、相对于基线的值和绝对值。相对于方向的值是相对于容器的组件方向属性进行解释的，相对于基线值是相对于基线进行解释的，绝对值则不然。绝对值有：<code>CENTER</code>、<code>NORTH</code>、<code>NORTHEAST</code>、<code>EAST</code>、<code>SOUTHEAST</code>、<code>SOUTH</code>、<code>SOUTHWEST</code>、<code>WEST</code> 和 <code>NORTHWEST</code>。方向相对值有：<code>PAGE_START</code>、<code>PAGE_END</code>、<code>LINE_START</code>、<code>LINE_END</code>、<code>FIRST_LINE_START</code>、<code>FIRST_LINE_END</code>、<code>LAST_LINE_START</code> 和 <code>LAST_LINE_END</code>。相对于基线的值有：<code>BASELINE</code>、<code>BASELINE_LEADING</code>、<code>BASELINE_TRAILING</code>、<code>ABOVE_BASELINE</code>、<code>ABOVE_BASELINE_LEADING</code>、<code>ABOVE_BASELINE_TRAILING</code>、<code>BELOW_BASELINE</code>、<code>BELOW_BASELINE_LEADING</code> 和 <code>BELOW_BASELINE_TRAILING</code>。默认值为 <code>CENTER</code>。
@serial
@see #clone()
@see java.awt.ComponentOrientation

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.GridBagConstraints.fill
<!-- END KEY -->
<!-- BEGIN DATA -->
当组件的显示区域大于它所请求的显示区域的大小时使用此字段。它可以确定是否调整组件大小，以及在需要的时候如何进行调整。 
 <p>
以下值适用于 <code>fill</code>： 
 <p>
 <ul>
 <li>
<code>NONE</code>：不调整组件大小。 
 <li>
<code>HORIZONTAL</code>：加宽组件，使它在水平方向上填满其显示区域，但是不改变高度。 
 <li>
<code>VERTICAL</code>：加高组件，使它在垂直方向上填满其显示区域，但是不改变宽度。 
 <li>
<code>BOTH</code>：使组件完全填满其显示区域。 
 </ul>
 <p>
默认值为 <code>NONE</code>。
@serial
@see #clone()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets java.awt.GridBagConstraints.insets
<!-- END KEY -->
<!-- BEGIN DATA -->
此字段指定组件的外部填充，即组件与其显示区域边缘之间间距的最小量。 
 <p>
默认值为 <code>new Insets(0, 0, 0, 0)</code>。
@serial
@see #clone()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.GridBagConstraints.ipadx
<!-- END KEY -->
<!-- BEGIN DATA -->
此字段指定组件的内部填充，即给组件的最小宽度添加多大的空间。组件的宽度至少为其最小宽度加上 <code>ipadx</code> 像素。 
 <p>
默认值为 <code>0</code>。
@serial
@see #clone()
@see java.awt.GridBagConstraints#ipady

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.GridBagConstraints.ipady
<!-- END KEY -->
<!-- BEGIN DATA -->
此字段指定内部填充，即给组件的最小高度添加多大的空间。组件的高度至少为其最小高度加上 <code>ipady</code> 像素。 
 <p>
默认值为 0。
@serial
@see #clone()
@see java.awt.GridBagConstraints#ipadx

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.GridBagConstraints.tempX
<!-- END KEY -->
<!-- BEGIN DATA -->
X 坐标的临时占位符。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.GridBagConstraints.tempY
<!-- END KEY -->
<!-- BEGIN DATA -->
Y 坐标的临时占位符。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.GridBagConstraints.tempWidth
<!-- END KEY -->
<!-- BEGIN DATA -->
组件的 Width 的临时占位符。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.GridBagConstraints.tempHeight
<!-- END KEY -->
<!-- BEGIN DATA -->
组件的 Height 的临时占位符。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.GridBagConstraints.minWidth
<!-- END KEY -->
<!-- BEGIN DATA -->
组件的最小宽度。它用于计算 <code>ipady</code>，其中默认值为 0。
@serial
@see #ipady

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.GridBagConstraints.minHeight
<!-- END KEY -->
<!-- BEGIN DATA -->
组件的最小高度。它用于计算 <code>ipadx</code>，其中默认值为 0。
@serial
@see #ipadx

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.GridBagConstraints()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>GridBagConstraint</code> 对象，将其所有字段都设置为默认值。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.GridBagConstraints(int gridx, int gridy, int gridwidth, int gridheight, double weightx, double weighty, int anchor, int fill, Insets insets, int ipadx, int ipady)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>GridBagConstraints</code> 对象，将其所有字段都设置为传入参数。注：因为使用此构造方法会妨碍源代码的可读性，所以此构造方法仅供自动源代码生成工具使用。
 
@param gridx	初始 gridx 值。
@param gridy	初始 gridy 值。
@param gridwidth	初始 gridwidth 值。
@param gridheight	初始 gridheight 值。
@param weightx	初始 weightx 值。
@param weighty	初始 weighty 值。
@param anchor	初始 anchor 值。
@param fill	初始 fill 值。
@param insets	初始 insets 值。
@param ipadx	初始 ipadx 值。
@param ipady	初始 ipady 值。
 
@see java.awt.GridBagConstraints#gridx
@see java.awt.GridBagConstraints#gridy
@see java.awt.GridBagConstraints#gridwidth
@see java.awt.GridBagConstraints#gridheight
@see java.awt.GridBagConstraints#weightx
@see java.awt.GridBagConstraints#weighty
@see java.awt.GridBagConstraints#anchor
@see java.awt.GridBagConstraints#fill
@see java.awt.GridBagConstraints#insets
@see java.awt.GridBagConstraints#ipadx
@see java.awt.GridBagConstraints#ipady
 
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.GridBagConstraints.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建此网格包约束（grid bag constraint）的副本。
@return     此网格包约束的副本

<!-- END DATA -->
