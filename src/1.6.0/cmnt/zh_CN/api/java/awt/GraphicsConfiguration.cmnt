<!-- BEGIN KEY -->
public abstract class java.awt.GraphicsConfiguration extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>GraphicsConfiguration</code> 类描述图形目标（如打印机或监视器）的特征。有许多与单一图形设备关联的 <code>GraphicsConfiguration</code> 对象，表示不同的绘图模式或能力。相应的本机结构也将因平台而异。例如，在 X11 窗口系统上，每个可视组件都是一个不同的 <code>GraphicsConfiguration</code>。在 Microsoft Windows 系统上，<code>GraphicsConfiguration</code> 表示当前分辨率和颜色深度下可用的 PixelFormat。
 <p>
在虚拟设备多屏幕环境中（其中桌面区域可以跨越多个物理屏幕设备），<code>GraphicsConfiguration</code> 对象的边界与虚拟坐标系相关。当设置组件的位置时，使用 {@link #getBounds() getBounds} 来获得所需 <code>GraphicsConfiguration</code> 的边界和 <code>GraphicsConfiguration</code> 坐标位置的偏移量，以下代码示例给出了说明：
 </p>

 <pre>
      Frame f = new Frame(gc);  // where gc is a GraphicsConfiguration
      Rectangle bounds = gc.getBounds();
      f.setLocation(10 + bounds.x, 10 + bounds.y); </pre>

 <p>
要确定环境是否为虚拟设备环境，可以对系统中的所有 <code>GraphicsConfiguration</code> 对象调用 <code>getBounds</code>。如果所有返回的边界原点都不是 (0,&nbsp;0)，则环境为虚拟设备环境。

 <p>
也可以使用 <code>getBounds</code> 来确定虚拟设备的边界。为此，首先要对系统中的所有 <code>GraphicsConfiguration</code> 对象调用 <code>getBounds</code>。然后计算调用 <code>getBounds</code> 返回的所有边界的并集。该并集就是虚拟设备的边界。以下代码示例可计算虚拟设备的边界。

 <pre>
      Rectangle virtualBounds = new Rectangle();
      GraphicsEnvironment ge = GraphicsEnvironment.
              getLocalGraphicsEnvironment();
      GraphicsDevice[] gs =
              ge.getScreenDevices();
      for (int j = 0; j &lt; gs.length; j++) { 
          GraphicsDevice gd = gs[j];
          GraphicsConfiguration[] gc =
              gd.getConfigurations();
          for (int i=0; i &lt; gc.length; i++) {
              virtualBounds =
                  virtualBounds.union(gc[i].getBounds());
          }
      } </pre>                   

@see Window
@see Frame
@see GraphicsEnvironment
@see GraphicsDevice

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.GraphicsConfiguration()
<!-- END KEY -->
<!-- BEGIN DATA -->
这是一个不可直接实例化的抽象类。必须从合适的工厂或查询方法中获取实例。

@see GraphicsDevice#getConfigurations
@see GraphicsDevice#getDefaultConfiguration
@see GraphicsDevice#getBestConfiguration
@see Graphics2D#getDeviceConfiguration

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.GraphicsDevice java.awt.GraphicsConfiguration.getDevice()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>GraphicsConfiguration</code> 关联的 {@link GraphicsDevice}。
@return 一个与此 <code>GraphicsConfiguration</code> 关联的 <code>GraphicsDevice</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.image.BufferedImage java.awt.GraphicsConfiguration.createCompatibleImage(int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个数据布局和颜色模型与此 <code>GraphicsConfiguration</code> 兼容的 {@link BufferedImage}。此方法与设备的内存映射无关。返回 <code>BufferedImage</code> 的数据布局和颜色模型与本机设备配置最接近，因此最适合于位图传输 (blitted) 到此设备上。
@param width 返回的 <code>BufferedImage</code> 宽度
@param height 返回的 <code>BufferedImage</code> 高度
@return 一个数据布局和颜色模型与此 <code>GraphicsConfiguration</code> 兼容的 <code>BufferedImage</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.BufferedImage java.awt.GraphicsConfiguration.createCompatibleImage(int width, int height, int transparency)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个支持指定透明度，并且数据布局和颜色模型与此 <code>GraphicsConfiguration</code> 兼容的 <code>BufferedImage</code>。此方法与设备的内存映射无关。返回 <code>BufferedImage</code> 的数据布局和颜色模型最适合于位图传输 (blitted) 到利用此 <code>GraphicsConfiguration</code> 的设备上。
@param width 返回的 <code>BufferedImage</code> 宽度
@param height 返回的 <code>BufferedImage</code> 高度
@param transparency 指定的透明度模式
@return 一个数据布局和颜色模型与此 <code>GraphicsConfiguration</code> 兼容且支持指定透明度的 <code>BufferedImage</code>。 
@throws IllegalArgumentException 如果透明度不是一个有效值
@see Transparency#OPAQUE
@see Transparency#BITMASK
@see Transparency#TRANSLUCENT

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.VolatileImage java.awt.GraphicsConfiguration.createCompatibleVolatileImage(int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个数据布局和颜色模型与此 <code>GraphicsConfiguration</code> 兼容的 {@link VolatileImage}。返回的 <code>VolatileImage</code> 可能有最适合于底层图形设备的存储数据，因此可能从特定于平台的呈现加速中受益。
@param width 返回的 <code>VolatileImage</code> 宽度
@param height 返回的 <code>VolatileImage</code> 高度
@return 一个数据布局和颜色模型与此 <code>GraphicsConfiguration</code> 兼容的 <code>VolatileImage</code>。
@see Component#createVolatileImage(int, int)
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.VolatileImage java.awt.GraphicsConfiguration.createCompatibleVolatileImage(int width, int height, int transparency)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个数据布局和颜色模型与此 <code>GraphicsConfiguration</code> 兼容的 {@link VolatileImage}。返回的 <code>VolatileImage</code> 可能有最适合于底层图形设备的存储数据，因此可能从特定于平台的呈现加速中受益。
@param width 返回的 <code>VolatileImage</code> 宽度
@param height 返回的 <code>VolatileImage</code> 高度
@param transparency 指定的透明度模式
@return 一个数据和颜色模型与此 <code>GraphicsConfiguration</code> 兼容的 <code>VolatileImage</code>。
@throws IllegalArgumentException 如果透明度不是一个有效值
@see Transparency#OPAQUE
@see Transparency#BITMASK
@see Transparency#TRANSLUCENT
@see Component#createVolatileImage(int, int)
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.VolatileImage java.awt.GraphicsConfiguration.createCompatibleVolatileImage(int width, int height, ImageCapabilities caps) throws java.awt.AWTException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回一个数据布局和颜色模型与此 <code>GraphicsConfiguration</code> 兼容并使用指定图像能力的 {@link VolatileImage}。如果该 <code>caps</code> 参数为 null，则有效地忽略它，此方法还将创建一个 VolatileImage，而不考虑 <code>ImageCapabilities</code> 约束。

返回 <code>VolatileImage</code> 的数据布局和颜色模型与本机设备配置最接近，因此最适合于位图传输 (blitted) 到此设备上。
@return 一个数据布局和颜色模型与此 <code>GraphicsConfiguration</code> 兼容的 <code>VolatileImage</code>。
@param width 返回的 <code>VolatileImage</code> 宽度
@param height 返回的 <code>VolatileImage</code> 高度
@param caps 图像能力
@exception AWTException 如果此图形配置无法满足提供的图像能力
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.VolatileImage java.awt.GraphicsConfiguration.createCompatibleVolatileImage(int width, int height, ImageCapabilities caps, int transparency) throws java.awt.AWTException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个数据布局和颜色模型与此 <code>GraphicsConfiguration</code> 兼容并使用指定图像能力和透明度值的 {@link VolatileImage}。如果该 <code>caps</code> 参数为 null，则有效地忽略它，此方法还将创建一个 VolatileImage，而不考虑 <code>ImageCapabilities</code> 约束。

返回 <code>VolatileImage</code> 的数据布局和颜色模型与本机设备配置最接近，因此最适合于位图传输 (blitted) 到此设备上。
@param width 返回的 <code>VolatileImage</code> 宽度
@param height 返回的 <code>VolatileImage</code> 高度
@param caps 图像能力
@param transparency 指定的透明度模式
@return 一个数据布局和颜色模型与此 <code>GraphicsConfiguration</code> 兼容的 <code>VolatileImage</code>。
@see Transparency#OPAQUE
@see Transparency#BITMASK
@see Transparency#TRANSLUCENT
@throws IllegalArgumentException 如果透明度不是一个有效值
@exception AWTException 如果此图形配置无法满足提供的图像能力
@see Component#createVolatileImage(int, int)
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.image.ColorModel java.awt.GraphicsConfiguration.getColorModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>GraphicsConfiguration</code> 关联的 {@link ColorModel}。
@return 一个与此 <code>GraphicsConfiguration</code> 关联的 <code>ColorModel</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.image.ColorModel java.awt.GraphicsConfiguration.getColorModel(int transparency)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>GraphicsConfiguration</code> 关联并支持指定透明度的 <code>ColorModel</code>。
@param transparency 指定的透明度模式
@return 一个与此 <code>GraphicsConfiguration</code> 关联并支持指定透明度的 <code>ColorModel</code> 对象；如果透明度不是一个有效值，则返回 null。
@see Transparency#OPAQUE
@see Transparency#BITMASK
@see Transparency#TRANSLUCENT

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.geom.AffineTransform java.awt.GraphicsConfiguration.getDefaultTransform()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GraphicsConfiguration</code> 的默认 {@link AffineTransform}。此 <code>AffineTransform</code> 通常是大多数正常屏幕的 Identity 转换。默认的 <code>AffineTransform</code> 将坐标映射到设备上：72 用户空间坐标单位在尺度上近似于设备空间的 1 英寸。标准化的转换可使映射关系更准确。坐标空间中默认 <code>AffineTransform</code> 为屏幕和打印机设备定义的坐标如下：原点在设备目标区域的左上角，X 坐标方向向右，Y 坐标方向向下。对于与此设备无关的图像缓冲区，如那些非 <code>createCompatibleImage</code> 创建的缓冲区，此 <code>AffineTransform</code> 即为 Identity 转换。
@return 此 <code>GraphicsConfiguration</code> 的默认 <code>AffineTransform</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.geom.AffineTransform java.awt.GraphicsConfiguration.getNormalizingTransform()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回可与 <code>GraphicsConfiguration</code> 的默认 <code>AffineTransform</code> 连接的 <code>AffineTransform</code>，从而用户空间的 72 单位等于设备空间的 1 英寸。
 <p>
对于特定 {@link Graphics2D} g，可使用以下伪代码重新设置转换来创建这种映射关系：
 <pre>
      GraphicsConfiguration gc = g.getDeviceConfiguration();

      g.setTransform(gc.getDefaultTransform());
      g.transform(gc.getNormalizingTransform());
 </pre>
注意，有时此 <code>AffineTransform</code> 是诸如打印机或图元文件输出的标识，并且此 <code>AffineTransform</code> 只与底层系统提供的信息一样准确。对于与设备没有关联的图像缓冲区，如那些非 <code>createCompatibleImage</code> 创建的缓冲区，因为没有有效的距离尺度，此 <code>AffineTransform</code> 即为 Identity 转换。
@return 一个连接默认 <code>AffineTransform</code> 的 <code>AffineTransform</code>，从而用户空间的 72 单位映射为设备空间的 1 英寸。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Rectangle java.awt.GraphicsConfiguration.getBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>GraphicsConfiguration</code> 在设备坐标中的边界。在虚拟设备的多屏环境中，边界可以有负 X 或 Y 原点。
@return 此 <code>GraphicsConfiguration</code> 覆盖的区域边界。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.BufferCapabilities java.awt.GraphicsConfiguration.getBufferCapabilities()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GraphicsConfiguration</code> 的缓冲区能力。
@return 此图形配置对象的缓冲区能力
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.ImageCapabilities java.awt.GraphicsConfiguration.getImageCapabilities()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GraphicsConfiguration</code> 的图像能力。
@return 此图形配置对象的图像能力
@since 1.4

<!-- END DATA -->
