<!-- BEGIN KEY -->
public class java.awt.GridLayout extends java.lang.Object implements java.awt.LayoutManager, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>GridLayout</code> 类是一个布局处理器，它以矩形网格形式对容器的组件进行布置。容器被分成大小相等的矩形，一个矩形中放置一个组件。例如，下面是一个将六个按钮布置到三行两列中的 applet： 
 <p>
 <hr><blockquote>
 <pre>
 import java.awt.*;
 import java.applet.Applet;
 public class ButtonGrid extends Applet {
     public void init() {
         setLayout(new GridLayout(3,2));
         add(new Button(&quot;1&quot;));
         add(new Button(&quot;2&quot;));
         add(new Button(&quot;3&quot;));
         add(new Button(&quot;4&quot;));
         add(new Button(&quot;5&quot;));
         add(new Button(&quot;6&quot;));
     }
 }
 </pre></blockquote><hr>     
 <p>
如果容器的 <code>ComponentOrientation</code> 属性是水平从左到右的，则上述示例生成图 1 中所示的输出。如果容器的 <code>ComponentOrientation</code> 属性是水平从右到左的，则该示例生成图 2 所示的输出。
 <p>
 <center><table COLS=2 WIDTH=600 summary="layout">
 <tr ALIGN=CENTER>
<td><img SRC="doc-files/GridLayout-1.gif"
      alt="在 3 行中显示 6 个按钮。第 1 行显示按钮 1 然后是按钮 2。
第 2 行显示按钮 3 然后是按钮 4。第 3 行显示按钮 5 然后是按钮 6。">
 </td>
 
<td ALIGN=CENTER><img SRC="doc-files/GridLayout-2.gif" 
                 alt="在 3 行中显示 6 个按钮。第 1 行显示按钮 2 然后是按钮 1。
第 2 行显示按钮 4 然后是按钮 3。第 3 行显示按钮 6 然后是按钮 5。">
 </td>
 </tr>
 
 <tr ALIGN=CENTER>
<td>图 1：水平，从左到右</td>
 
<td>图 2：水平，从右到左</td>
 </tr>
 </table></center>
 <p>
通过构造方法或 <tt>setRows</tt> 和 <tt>setColumns</tt> 方法将行数和列数都设置为非零值时，指定的列数将被忽略。列数通过指定的行数和布局中的组件总数来确定。因此，例如，如果指定了三行和两列，在布局中添加了九个组件，则它们将显示为三行三列。仅当将行数设置为零时，指定列数才对布局有效。

@version 1.39, 12/19/03
@author  Arthur van Hoff
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.GridLayout.hgap
<!-- END KEY -->
<!-- BEGIN DATA -->
此为水平间距（以像素为单位），它指定列与列之间的距离。它们可以在任何时间更改。应该为非负整数。

@serial
@see #getHgap()
@see #setHgap(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.GridLayout.vgap
<!-- END KEY -->
<!-- BEGIN DATA -->
此为垂直间距（以像素为单位），它指定行与行之间的距离。它们可以在任何时间更改。应该为非负整数。

@serial
@see #getVgap()
@see #setVgap(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.GridLayout.rows
<!-- END KEY -->
<!-- BEGIN DATA -->
此为网格的指定行数。行数可以在任何时间更改。行数应该为非负整数，其中 '0' 指 'any number'，表示该维数中的 Row 数依赖于另一个维数。

@serial
@see #getRows()
@see #setRows(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.GridLayout.cols
<!-- END KEY -->
<!-- BEGIN DATA -->
此为网格的指定列数。列数可以在任何时间更改。列数应该为非负整数，其中 '0' 指 'any number'，表示该维数中的 Column 数依赖于另一个维数。

@serial
@see #getColumns()
@see #setColumns(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.GridLayout()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有默认值的网格布局，即每个组件占据一行一列。
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.GridLayout(int rows, int cols)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定行数和列数的网格布局。给布局中的所有组件分配相等的大小。 
 <p>
<code>rows</code> 和 <code>cols</code> 中的一个可以为零（但不能两者同时为零），这表示可以将任何数目的对象置于行或列中。
@param     rows   该 rows 具有表示任意行数的值零。
@param     cols   该 cols 具有表示任意列数的值零。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.GridLayout(int rows, int cols, int hgap, int vgap)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定行数和列数的网格布局。给布局中的所有组件分配相等的大小。 
 <p>
此外，将水平和垂直间距设置为指定值。水平间距将置于列与列之间。将垂直间距将置于行与行之间。 
 <p>
<code>rows</code> 和 <code>cols</code> 中的一个可以为零（但不能两者同时为零），这表示可以将任何数目的对象置于行或列中。 
 <p>
所有 <code>GridLayout</code> 构造方法都服从这一规定。
@param     rows   该 rows 具有表示任意行数的值零
@param     cols   该 cols 具有表示任意列数的值零
@param     hgap   水平间距
@param     vgap   垂直间距
@exception   IllegalArgumentException  如果将 <code>rows</code> 和 <code>cols</code> 的值都设置为零

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.GridLayout.getRows()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此布局中的行数。
@return    此布局中的行数
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.GridLayout.setRows(int rows)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此布局中的行数设置为指定值。
@param        rows   此布局中的行数
@exception    IllegalArgumentException  如果将 <code>rows</code> 和 <code>cols</code> 的值都设置为零
@since        JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.GridLayout.getColumns()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此布局中的列数。
@return     此布局中的列数
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.GridLayout.setColumns(int cols)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此布局中的列数设置为指定值。如果构造方法或 <tt>setRows</tt> 方法指定的行数为非零，则列数的设置对布局没有影响。在这种情况下，布局中显示的列数由组件的总数和指定的行数确定。
@param        cols   此布局中的列数
@exception    IllegalArgumentException  如果将 <code>rows</code> 和 <code>cols</code> 的值都设置为零
@since        JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.GridLayout.getHgap()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取组件之间的水平间距。
@return       组件之间的水平间距
@since        JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.GridLayout.setHgap(int hgap)
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件之间的水平间距设置为指定值。
@param hgap 组件之间的水平间距
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.GridLayout.getVgap()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取组件之间的垂直间距。
@return       组件之间的垂直间距
@since        JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.GridLayout.setVgap(int vgap)
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件之间的垂直间距设置为指定值。
@param vgap 组件之间的垂直间距
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.GridLayout.addLayoutComponent(String name, Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
将具有指定名称的指定组件添加到布局。
@param name 组件名
@param comp 要添加的组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.GridLayout.removeLayoutComponent(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
从布局移除指定组件。
@param comp 要移除的组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.GridLayout.preferredLayoutSize(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->

使用此网格布局确定容器参数的首选大小。
 <p>
网络布局的首选宽度等于容器中所有组件的最大首选宽度乘以列数，加上水平填充乘以列数减去一，再加上目标容器的左右 insets。
 <p>
网络布局的首选高度等于容器中所有组件的最大首选高度乘以行数，加上垂直填充乘以行数减去一，再加上目标容器的上下 insets。 
 
@param     parent 要在其中进行布局的容器
@return    布置指定容器子组件的首选维数
@see       java.awt.GridLayout#minimumLayoutSize
@see       java.awt.Container#getPreferredSize()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.GridLayout.minimumLayoutSize(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用此网络布局确定最小大小的容器参数。 
 <p>
网络布局的最小宽度等于容器中所有组件的最大最小宽度乘以列数，加上水平填充乘以列数减去一，再加上目标容器的左右 insets。 
 <p>
网络布局的最小高度等于容器中所有组件的最大最小高度乘以行数，加上垂直填充乘以行数减去一，再加上目标容器的上下 insets。 
  
@param       parent 要在其中进行布局的容器
@return      布置指定容器的子组件所需的最小维数
@see         java.awt.GridLayout#preferredLayoutSize
@see         java.awt.Container#doLayout

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.GridLayout.layoutContainer(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->

使用此布局布置指定容器。 
 <p>
为了满足 <code>GridLayout</code> 对象的约束条件，此方法会重塑指定目标中的组件。 
 <p>
网络布局管理器根据布局中的行数和列数，通过将容器中的自由空间分割成相等大小的部分来确定单个组件的大小。容器的自由空间等于容器的大小减去所有 insets 和所有指定的水平和垂直间距。给网络布局中的所有组件分配相同的大小。
  
@param      parent 要在其中进行布局的容器
@see        java.awt.Container
@see        java.awt.Container#doLayout

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.GridLayout.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此网格布局的值的字符串表示形式。
@return     此网格布局的字符串表示形式

<!-- END DATA -->
