<!-- BEGIN KEY -->
public abstract static class java.awt.RenderingHints.Key extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
定义与 {@link RenderingHints} 一起使用的、用来控制呈现和图像管线中各种算法选择的所有键的基本类型。此类的实例是不变且唯一的，这意味着可以使用 {@code ==} 运算符代替开销更大的 {@code equals()} 方法进行匹配测试。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.RenderingHints.Key(int privatekey)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指示的私有键构造一个键。Key 的每个子类都会维护自己唯一的整数键域。无法构造出两个具有相同整数键和相同指定子类的对象。如果试图用与 Key 子类的已有实例相同的整数键构造给定类的另一个对象，则将抛出一个异常。
@param privatekey 指定键

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.awt.RenderingHints.Key.isCompatibleValue(Object val)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果指定对象是此 Key 的有效值，则返回 true。
@param val 要测试有效性的 <code>Object</code>
@return 如果 <code>val</code> 有效，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final int java.awt.RenderingHints.Key.intKey()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回子类用来实例化此 Key 的私有整数键。
@return 子类用来实例化此 Key 的私有整数键。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.RenderingHints.Key.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
所有 Key 对象的哈希码将与 System.identityHashCode() 方法定义的对象的系统识别码相同。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.awt.RenderingHints.Key.equals(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
用于所有 Key 对象的 equals 方法将返回与等号运算符 '==' 相同的结果。

<!-- END DATA -->
