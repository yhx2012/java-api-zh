<!-- BEGIN KEY -->
public class java.awt.MenuBar extends java.awt.MenuComponent implements java.awt.MenuContainer, javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>MenuBar</code> 类封装绑定到框架的菜单栏的平台概念。为了将该菜单栏与 <code>Frame</code> 对象关联，可以调用该框架的 <code>setMenuBar</code> 方法。
 <p>
<A NAME="mbexample"></A><!-- target for cross references -->
下面是菜单栏的外观：
 <p>
<img src="doc-files/MenuBar-1.gif"
<alt="Diagram of MenuBar containing 2 menus: Examples and Options. 
Examples menu is expanded showing items: Basic, Simple, Check, and More Examples." ALIGN=center HSPACE=10 VSPACE=7&gt;
 <p>
菜单栏处理菜单项的键盘快捷方式，并将它们传递到其子菜单。（键盘快捷方式是可选的，它为用户提供鼠标的替代方法，可以使用快捷方式调用菜单项并执行与鼠标关联的操作。）每个菜单项都可以维护 <code>MenuShortcut</code> 的一个实例。<code>MenuBar</code> 类定义了多个方法，其中 {@link MenuBar#shortcuts} 和 {@link MenuBar#getShortcutMenuItem} 用于检索有关给定的菜单栏正在管理的快捷方式的信息。

@version 1.69, 05/18/04
@author Sami Shaio
@see        java.awt.Frame
@see        java.awt.Frame#setMenuBar(java.awt.MenuBar)
@see        java.awt.Menu
@see        java.awt.MenuItem
@see        java.awt.MenuShortcut
@since      JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.util.Vector java.awt.MenuBar.menus
<!-- END KEY -->
<!-- BEGIN DATA -->
此字段表示实际菜单的向量，这些实际菜单将成为菜单栏的一部分。

@serial
@see #countMenus()

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.Menu java.awt.MenuBar.helpMenu
<!-- END KEY -->
<!-- BEGIN DATA -->
此菜单是专用于帮助的特殊菜单。关于此菜单需要注意的事项是，在某些平台上它会显示在菜单栏的右边。

@serial
@see #getHelpMenu()
@see #setHelpMenu(Menu)

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.MenuBar.menuBarSerializedDataVersion
<!-- END KEY -->
<!-- BEGIN DATA -->
MenuBar 的序列化数据版本。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuBar() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的菜单栏。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuBar.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建该菜单栏的同位体。该同位体允许我们更改该菜单栏的外观，而不改变菜单栏的任何功能。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuBar.removeNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除该菜单栏的同位体。该同位体允许我们更改该菜单栏的外观，而不改变菜单栏的任何功能。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Menu java.awt.MenuBar.getHelpMenu()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取该菜单栏上的帮助菜单。
@return    此菜单栏上的帮助菜单。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuBar.setHelpMenu(Menu m)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的菜单设置为此菜单栏的帮助菜单。如果此菜单栏已有帮助菜单，则从该菜单栏移除旧的帮助菜单，并替换为指定的菜单。
@param m  要设置为帮助菜单的菜单

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Menu java.awt.MenuBar.add(Menu m)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的菜单添加到菜单栏。如果该菜单已经是另一个菜单栏的一部分，则从该菜单栏移除它。

@param        m   要添加的菜单
@return       已添加的菜单
@see          java.awt.MenuBar#remove(int)
@see          java.awt.MenuBar#remove(java.awt.MenuComponent)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuBar.remove(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此菜单栏移除指定索引处的菜单。
@param        index   要移除的菜单的位置。
@see          java.awt.MenuBar#add(java.awt.Menu)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuBar.remove(MenuComponent m)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此菜单栏移除指定的菜单组件。
@param        m 要移除的菜单组件。
@see          java.awt.MenuBar#add(java.awt.Menu)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.MenuBar.getMenuCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取该菜单栏上的菜单数。
@return     该菜单栏上的菜单数。
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.MenuBar.countMenus()
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，由 <code>getMenuCount()</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Menu java.awt.MenuBar.getMenu(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定的菜单。
@param      i 要返回的菜单的索引位置。
@return     此菜单栏的指定索引处的菜单。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.util.Enumeration<java.awt.MenuShortcut> java.awt.MenuBar.shortcuts()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此菜单栏正在管理的所有菜单快捷方式的枚举。
@return     此菜单栏正在管理的菜单快捷方式的枚举。
@see         java.awt.MenuShortcut
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuItem java.awt.MenuBar.getShortcutMenuItem(MenuShortcut s)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与指定 <code>MenuShortcut</code> 对象关联的 <code>MenuItem</code> 的实例，如果此菜单栏正在管理的菜单项均与指定的菜单快捷方式无关联，则为 <code>null</code>。
@param        s the specified menu shortcut.
@see          java.awt.MenuItem
@see          java.awt.MenuShortcut
@since        JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuBar.deleteShortcut(MenuShortcut s)
<!-- END KEY -->
<!-- BEGIN DATA -->
删除指定的菜单快捷方式。
@param     s 要删除的菜单快捷方式。
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.MenuBar.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此菜单栏关联的 AccessibleContext。对于菜单栏，AccessibleContext 采用 AccessibleAWTMenuBar 的窗体。必要时会创建新的 AccessibleAWTMenuBar 实例。

@return 用作此菜单栏的 AccessibleContext 的 AccessibleAWTMenuBar。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.MenuBar.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取 <code>ObjectInputStream</code>。未识别的键或值将被忽略。

@param s 要读取的 <code>ObjectInputStream</code>
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless</code> 返回 <code>true</code>
@see java.awt.GraphicsEnvironment#isHeadless
@see #writeObject(java.io.ObjectOutputStream)

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.MenuBar.writeObject(ObjectOutputStream s) throws java.lang.ClassNotFoundException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将默认的可序列化字段写入流中。

@param s 要写入的 <code>ObjectOutputStream</code> 
@see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)
@see #readObject(java.io.ObjectInputStream)

<!-- END DATA -->
