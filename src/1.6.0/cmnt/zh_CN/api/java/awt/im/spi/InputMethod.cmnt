<!-- BEGIN KEY -->
public interface java.awt.im.spi.InputMethod
<!-- END KEY -->
<!-- BEGIN DATA -->
定义支持复杂文本输入的输入方法接口。输入方法通常支持多语言文本输入，这些语言（如汉语、日语和韩语）都有无法在标准键盘上直接表示的字符。不过，它们也可以用来支持英语语音文本输入或泰语字符的重新排序。
 <p>
InputMethod 的子类可以由输入方法框架加载；然后可以通过 API ({@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod}) 或通过用户界面（输入方法选择菜单）对其进行选择。

@since 1.3

@version 	1.31, 11/17/05
@author JavaSoft International

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.im.spi.InputMethod.setInputMethodContext(InputMethodContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置输入方法的上下文，这样可以将输入方法事件指派到客户端组件并能从客户端组件请求信息。
 <p>
实例化此输入方法之后马上就会调用一次此方法。

@param context 此输入方法的输入方法上下文
@exception NullPointerException 如果 <code>context</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.im.spi.InputMethod.setLocale(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
试图设置输入语言环境。如果输入方法支持所需的语言环境，则此输入方法将更改自己的行为以支持该语言环境的输入并返回 true。否则，它将返回 false，且不会更改自己的行为。
 <p>
以下情况可调用此方法
 <ul>
<li>由 {@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod} 调用。
<li>如果用户指定了语言环境，或者以前已选定输入方法的 {@link java.awt.im.spi.InputMethod#getLocale getLocale} 方法返回一个非 null 值，则当通过用户界面切换为该输入方法时调用。
 </ul>

@param locale 要输入的语言环境
@return 是否支持指定的语言环境
@exception NullPointerException 如果 <code>locale</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Locale java.awt.im.spi.InputMethod.getLocale()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前的输入语言环境。异常情况下可能返回 null。
 <p>
以下情况可调用此方法
<ul>
<li>由 {@link java.awt.im.InputContext#getLocale InputContext.getLocale} 调用，和
<li>通过用户界面从此输入方法切换为另一种输入方法时调用。
 </ul>

@return 当前的输入语言环境，或 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.im.spi.InputMethod.setCharacterSubsets(java.lang.Character.Subset[] subsets)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置允许此输入方法进行输入的 Unicode 字符集的子集。可能会传入 Null，以指示允许输入所有字符。
 <p>
以下情况可调用此方法
<ul>
<li>实例化此输入方法后立即调用，
<li>当从另一种输入方法切换到此输入方法时，以及
<li>由 {@link java.awt.im.InputContext#setCharacterSubsets InputContext.setCharacterSubsets} 调用。
</ul>

@param subsets 可以从其输入字符的 Unicode 字符集的子集

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.im.spi.InputMethod.setCompositionEnabled(boolean enable)
<!-- END KEY -->
<!-- BEGIN DATA -->
启用或禁用输入方法的撰写功能，具体取决于参数 <code>enable</code> 的值。
 <p>
启用输入方法的撰写功能将出于撰写和控制目的解释传入事件，而禁用的输入方法不能解释出于撰写目的的事件。但要注意：无论输入方法是启用还是禁用，事件都会传到该输入方法；禁用输入方法的撰写功能可能仍会出于控制目的解释包括为撰写而启用或禁用自身在内的事件。
 <p>
对于由主机操作系统提供的输入方法，并不总能确定是否支持此操作。例如，某个输入方法可能只对某些语言环境启用了撰写功能，而对另一些语言环境不执行任何操作。对于此类输入方法，此方法有可能既不抛出 {@link java.lang.UnsupportedOperationException UnsupportedOperationException}，也不影响是否已启用撰写功能。
 <p>
以下情况可调用此方法
 <ul>
<li>由 {@link java.awt.im.InputContext#setCompositionEnabled InputContext.setCompositionEnabled} 调用。
<li>如果以前已选定输入方法的 {@link java.awt.im.spi.InputMethod#isCompositionEnabled isCompositionEnabled} 方法在没有抛出异常的情况下返回，则当使用用户界面或 {@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod} 从另一种输入方法切换到此输入方法时调用。
 </ul>

@param enable 是否启用输入方法的撰写功能
@throws UnsupportedOperationException 如果此输入方法不支持启用/禁用操作
@see #isCompositionEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.im.spi.InputMethod.isCompositionEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此输入方法是否已启用。启用撰写功能的输入方法将出于撰写和控制目的解释传入事件，而禁用的输入方法不会出于撰写目的解释事件。
 <p>
以下情况可调用此方法
 <ul>
<li>由 {@link java.awt.im.InputContext#isCompositionEnabled InputContext.isCompositionEnabled} 调用，并且
<li>当使用用户界面或 {@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod} 从此输入方法切换到另一种输入方法时调用。
 </ul>

@return 如果为进行撰写启用了此输入方法，则返回 <code>true</code>；否则返回 <code>false</code>。
@throws UnsupportedOperationException 如果此输入方法不支持是否已启用撰写功能检查
@see #setCompositionEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.im.spi.InputMethod.reconvert()
<!-- END KEY -->
<!-- BEGIN DATA -->
启动恢复操作。输入方法使用 {@link java.awt.im.InputMethodRequests#getSelectedText InputMethodRequests.getSelectedText} 方法从当前客户端组件中获得要恢复的文本。它也可以使用其他 <code>InputMethodRequests</code> 方法请求恢复操作所需的其他信息。此操作生成的已混合且已提交文本将作为 <code>InputMethodEvent</code> 序列发送到客户端组件。如果给定的文本不能恢复，则会把相同的文本作为已提交文本发送到客户端组件。
 <p>
可由 {@link java.awt.im.InputContext#reconvert() InputContext.reconvert} 调用此方法。

@throws UnsupportedOperationException 如果输入方法不支持恢复操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.im.spi.InputMethod.dispatchEvent(AWTEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
将事件指派到输入方法。如果拥有焦点的组件已启用输入方法支持，某些类型的传入事件将被指派到此组件的当前输入方法，然后才指派到该组件的方法或事件侦听器。该输入方法决定是否需要处理此事件。如果需要处理，它还要调用该事件的 <code>consume</code> 方法；这样做会导致该事件不能被指派到组件的事件处理方法或事件侦听器。
 <p>
如果事件为 InputEvent 或其子类的实例，则会指派它们。这包括 AWT 类 KeyEvent 和 MouseEvent 的实例。
 <p>
可由 {@link java.awt.im.InputContext#dispatchEvent InputContext.dispatchEvent} 调用此方法。

@param event 正指派到输入方法的事件
@exception NullPointerException 如果 <code>event</code> 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.im.spi.InputMethod.notifyClientWindowChange(Rectangle bounds)
<!-- END KEY -->
<!-- BEGIN DATA -->
通知此输入方法客户端窗口位置或状态的更改。当该输入方法是其输入上下文的当前输入方法且已启用其通知时调用此方法（请参见 {@link InputMethodContext#enableClientWindowNotification InputMethodContext.enableClientWindowNotification}）。如果调用了输入上下文的 {@link java.awt.im.InputContext#removeNotify removeNotify} 方法，则会临时挂起对此方法的调用；当新的客户端组件激活此输入方法时，将恢复此方法的调用。将在以下情形调用此方法：
 <ul>
 <li>
包含当前客户端组件的窗口，其位置、大小、可见性、iconification 状态更改时，或关闭窗口时。</li>
 <li>
如果当前客户端组件存在，则从 <code> enableClientWindowNotification(inputMethod, true)</code> 调用。</li>
 <li>
如果调用期间没有可用的当前客户端组件，则在该输入方法调用 <code>enableClientWindowNotification(inputMethod, true)</code> 后首次激活它时调用。</li>
 <li>
在调用输入上下文的 removeNotify 方法之后，激活新客户端组件的输入方法时调用。</li>
 </ul>
@param bounds 屏幕上客户端窗口的 {@link java.awt.Component#getBounds bounds}；如果客户端窗口已图标化或不可见，则为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.im.spi.InputMethod.activate()
<!-- END KEY -->
<!-- BEGIN DATA -->
激活输入方法，以便立即进行输入处理。
 <p>
如果某种输入方法提供了自己的窗口，则此时它应确保所有必要的窗口都已打开并可见。
 <p>
以下情况可调用此方法
 <ul>
<li>当客户端组件收到 FOCUS_GAINED 事件时由 {@link java.awt.im.InputContext#dispatchEvent InputContext.dispatchEvent} 调用。
<li>使用用户界面或 {@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod} 从另一种输入方法切换到此输入方法时调用。
 </ul>
只有当输入方法处于非活动状态时才能调用该方法。假定新实例化的输入方法处于非活动状态。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.im.spi.InputMethod.deactivate(boolean isTemporary)
<!-- END KEY -->
<!-- BEGIN DATA -->
让输入方法处于非活动状态。isTemporary 参数与 {@link java.awt.event.FocusEvent#isTemporary FocusEvent.isTemporary} 中的参数含义相同。
 <p>
如果输入方法提供了自己的窗口，则此时只应关闭与当前撰写功能相关的窗口（如查找选择窗口）。该输入方法有可能被另一个客户端组件再次激活，并且关闭或重新打开较稳定的窗口（如控制面板）可能会造成不必要的屏幕闪烁。在激活另一种输入方法类的实例之前，当前输入方法将调用 {@link #hideWindows}。
 <p>
以下情况可调用此方法
 <ul>
<li>当客户端组件收到 FOCUS_LOST 事件时，由 {@link java.awt.im.InputContext#dispatchEvent InputContext.dispatchEvent} 调用。
<li>使用用户界面或 {@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod} 从此输入方法切换到另一种输入方法时调用。
<li>如果当前客户端组件被移除，则在 {@link #removeNotify removeNotify} 之前调用。
 </ul>
只有当输入方法处于活动状态时才能调用该方法。

@param isTemporary 焦点更改是否为临时的

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.im.spi.InputMethod.hideWindows()
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭或隐藏由此输入方法实例或其类打开的所有窗口。
 <p>
以下情况可调用此方法
 <ul>
<li>对另一种输入方法类实例调用 {@link #activate activate} 之前调用。
<li>对此输入方法调用 {@link #dispose dispose} 之前调用。
 </ul>
只有当输入方法处于非活动状态时才能调用该方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.im.spi.InputMethod.removeNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
通知输入方法已从客户端组件所在容器层次结构中移除该客户端组件，或通知它该组件已禁用输入方法支持。
 <p>
可由 {@link java.awt.im.InputContext#removeNotify InputContext.removeNotify} 调用此方法。
 <p>
只有当输入方法处于非活动状态时才能调用该方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.im.spi.InputMethod.endComposition()
<!-- END KEY -->
<!-- BEGIN DATA -->
结束当前可能在此上下文中正进行的任何输入撰写。这样做可能会提交或删除未提交的文本，具体取决于平台和用户可能做出的首选项。使用一个输入方法事件可将对文本的任何更改传送到处于活动状态的组件。

 <p>
编辑组件的文本可以在各种情况下调用此方法，例如，用户可在文本内（但在撰写文本外）移动插入点时，或者在将组件的文本保存到文件上或复制到粘贴板上时都可调用。
 <p>
以下情况可调用此方法
 <ul>
<li>由 {@link java.awt.im.InputContext#endComposition InputContext.endComposition} 调用。
<li>在切换到另一个客户端组件时可由 {@link java.awt.im.InputContext#dispatchEvent InputContext.dispatchEvent} 调用
<li>当使用用户界面或 {@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod} 从此输入方法切换到另一种输入方法时调用。
 </ul>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.im.spi.InputMethod.dispose()
<!-- END KEY -->
<!-- BEGIN DATA -->
释放由此输入方法使用的资源。特别要提出的是，输入方法应释放窗口并关闭不再需要的文件。
 <p>
可由 {@link java.awt.im.InputContext#dispose InputContext.dispose} 调用此方法。
 <p>
只有当输入方法处于非活动状态时才能调用该方法。释放之后，就无法针对此实例调用该接口的方法了。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.im.spi.InputMethod.getControlObject()
<!-- END KEY -->
<!-- BEGIN DATA -->
从此输入方法返回一个控制对象，或 null。控制对象提供了控制该输入方法的行为或从该输入方法获得信息的方法。对象的类型是输入方法的特定类。客户端必须将其结果与已知输入方法的控制对象类进行对比，并传递给适当的类以调用所提供的方法。
 <p>
可由 {@link java.awt.im.InputContext#getInputMethodControlObject InputContext.getInputMethodControlObject} 调用此方法。

@return 此输入方法的一个控制对象，或 null

<!-- END DATA -->
