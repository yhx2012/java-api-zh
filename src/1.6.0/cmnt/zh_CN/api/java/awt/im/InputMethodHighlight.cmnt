<!-- BEGIN KEY -->
public class java.awt.im.InputMethodHighlight extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
InputMethodHighlight 用于描述正在撰写的文本的高亮显示属性。该描述可以有两个级别：抽象级，它可指定转换状态和是否已选定文本；具体级，它可指定用来呈现高亮显示的样式属性。InputMethodHighlight 必须提供抽象级描述；可提供也可以不提供具体级描述。如果不提供具体样式，则呈现程序应使用 {@link java.awt.Toolkit#mapInputMethodHighlight} 来映射一个具体样式。
 <p>
抽象描述由三个字段组成：<code>selected</code>、<code>state</code> 和 <code>variation</code>。<code>selected</code> 指示文本范围是否是输入方法当前使用的范围，例如，当前在菜单上显示转换备选项的单元。<code>state</code> 表示转换状态。状态值由输入方法框架定义，并且应该在从抽象样式到具体样式的所有映射中明确地表示出来。当前定义的状态值是原值（未转换）和已转换的值。建议在采取撰写文本的主要转换步骤前后使用这些状态值，比方说，在 kana-&gt;kanji 或 pinyin-&gt;hanzi 转换前后。<code>variation</code> 字段允许输入方法表达有关转换结果的其他信息。 
 <p>
 
InputMethodHighlight 通常用作从用于 INPUT_METHOD_HIGHLIGHT 属性的 AttributedCharacterIterator 返回的属性值。可以将它们包装到 {@link java.text.Annotation Annotation} 实例中，以指示独立的文本单元。

@version 	1.21, 05/05/04
@see java.text.AttributedCharacterIterator
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.im.InputMethodHighlight.RAW_TEXT
<!-- END KEY -->
<!-- BEGIN DATA -->
原文本状态的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.im.InputMethodHighlight.CONVERTED_TEXT
<!-- END KEY -->
<!-- BEGIN DATA -->
已转换文本状态的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.im.InputMethodHighlight java.awt.im.InputMethodHighlight.UNSELECTED_RAW_TEXT_HIGHLIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
未选定原文本的默认高亮显示常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.im.InputMethodHighlight java.awt.im.InputMethodHighlight.SELECTED_RAW_TEXT_HIGHLIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
已选定原文本的默认高亮显示常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.im.InputMethodHighlight java.awt.im.InputMethodHighlight.UNSELECTED_CONVERTED_TEXT_HIGHLIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
未选定已转换文本的默认高亮显示常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.im.InputMethodHighlight java.awt.im.InputMethodHighlight.SELECTED_CONVERTED_TEXT_HIGHLIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
已选定已转换文本的默认高亮显示常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.im.InputMethodHighlight(boolean selected, int state)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造输入方法高亮显示记录。变量设置为 0，样式设置为 null。
@param selected 是否已选定文本范围
@param state 文本范围的转换状态&mdash;&mdash;RAW_TEXT 或 CONVERTED_TEXT
@see InputMethodHighlight#RAW_TEXT
@see InputMethodHighlight#CONVERTED_TEXT
@exception IllegalArgumentException 如果给定了 RAW_TEXT 或 CONVERTED_TEXT 之外的状态

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.im.InputMethodHighlight(boolean selected, int state, int variation)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造输入方法高亮显示记录。样式设置为 null。
@param selected 是否已选定文本范围
@param state 文本范围的转换状态&mdash;&mdash;RAW_TEXT 和 CONVERTED_TEXT
@param variation 文本范围的样式变量
@see InputMethodHighlight#RAW_TEXT
@see InputMethodHighlight#CONVERTED_TEXT
@exception IllegalArgumentException 如果给定了 RAW_TEXT 或 CONVERTED_TEXT 之外的状态

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.im.InputMethodHighlight(boolean selected, int state, int variation, java.util.Map<java.awt.font.TextAttribute, ?> style)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造输入方法高亮显示记录。所提供的样式属性映射必须是不可修改的。
@param selected 是否已选定文本范围
@param state 文本范围的转换状态&mdash;&mdash;RAW_TEXT 或 CONVERTED_TEXT
@param variation 文本范围的变量
@param style 文本范围的呈现样式属性，或 null
@see InputMethodHighlight#RAW_TEXT
@see InputMethodHighlight#CONVERTED_TEXT
@exception IllegalArgumentException 如果给定了 RAW_TEXT 或 CONVERTED_TEXT 之外的状态
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.im.InputMethodHighlight.isSelected()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回是否已选定文本范围。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.im.InputMethodHighlight.getState()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回文本范围的转换状态。
@return 文本范围的转换状态&mdash;&mdash;RAW_TEXT 或 CONVERTED_TEXT。
@see InputMethodHighlight#RAW_TEXT
@see InputMethodHighlight#CONVERTED_TEXT

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.im.InputMethodHighlight.getVariation()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回文本范围的变量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map<java.awt.font.TextAttribute, ?> java.awt.im.InputMethodHighlight.getStyle()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回文本范围的呈现样式属性，或 null。
@since 1.3

<!-- END DATA -->
