<!-- BEGIN KEY -->
public class java.awt.BorderLayout extends java.lang.Object implements java.awt.LayoutManager2, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
这是一个布置容器的边框布局，它可以对容器组件进行安排，并调整其大小，使其符合下列五个区域：北、南、东、西、中。每个区域最多只能包含一个组件，并通过相应的常量进行标识：<code>NORTH</code>、<code>SOUTH</code>、<code>EAST</code>、<code>WEST</code>、<code>CENTER</code>。当使用边框布局将一个组件添加到容器中时，要使用这五个常量之一，例如：
 <pre>
    Panel p = new Panel();
    p.setLayout(new BorderLayout());
    p.add(new Button(&quot;Okay&quot;), BorderLayout.SOUTH);
 </pre>
为了方便起见，<code>BorderLayout</code> 将缺少字符串说明的情况解释为常量 <code>CENTER</code>：
 <pre>
    Panel p2 = new Panel();
    p2.setLayout(new BorderLayout());
    p2.add(new TextArea());  // Same as p.add(new TextArea(), BorderLayout.CENTER);
 </pre>
 <p>
此外，<code>BorderLayout</code> 支持相对定位常量 <code>PAGE_START</code>、<code>PAGE_END</code>、<code>LINE_START</code> 和 <code>LINE_END</code>。在 <code>ComponentOrientation</code> 设置为 <code>ComponentOrientation.LEFT_TO_RIGHT</code> 的容器中，这些常量分别映射到 <code>NORTH</code>、<code>SOUTH</code>、<code>WEST</code> 和 <code>EAST</code>。  
 <p>
为了与以前的版本兼容，<code>BorderLayout</code> 还包括相对定位常量 <code>BEFORE_FIRST_LINE</code>、<code>AFTER_LAST_LINE</code>、<code>BEFORE_LINE_BEGINS</code> 和 <code>AFTER_LINE_ENDS</code>。这些常量分别等同于 <code>PAGE_START</code>、<code>PAGE_END</code>、<code>LINE_START</code> 和 <code>LINE_END</code>。为了与其他组件使用的相对定位常量一致，应优先使用后一组常量。
 <p>
将绝对定位常量与相对定位常量混合会产生无法预料的结果。如果两种类型的常量都使用，则优先采用相对常量。例如，如果同时使用 <code>NORTH</code> 和 <code>PAGE_START</code> 常量在方向性为 <code>LEFT_TO_RIGHT</code> 的容器中添加组件，则只体现 <code>PAGE_START</code> 布局。
 <p>
注：目前，在 Java 2 Platform v1.2 中，<code>BorderLayout</code> 不支持垂直方向。不考虑容器的 <code>ComponentOrientation</code> 上 <code>isVertical</code> 设置。
 <p>
根据其首选大小和容器大小的约束 (constraints) 对组件进行布局。<code>NORTH</code> 和 <code>SOUTH</code> 组件可以在水平方向上拉伸；而 <code>EAST</code> 和 <code>WEST</code> 组件可以在垂直方向上拉伸；<code>CENTER</code> 组件可同时在水平和垂直方向上拉伸，从而填充所有剩余空间。
 <p>
以下是一个使用 <code>BorderLayout</code> 布局管理器的例子，它对一个 applet 中的五个按钮进行布局：
 <p>
<img src="doc-files/BorderLayout-1.gif" 
alt="描述 BorderLayout 的 applet 的图表。 
BorderLayout 的每个部分都包含一个对应于它在布局中位置的 Button，它为以下五个常量之一： 
North、West、Center、East 或 South。"
 ALIGN=center HSPACE=10 VSPACE=7>
 <p>
此 applet 的代码如下：
 <p>
 <hr><blockquote><pre>
 import java.awt.*;
 import java.applet.Applet;

 public class buttonDir extends Applet {
   public void init() {
     setLayout(new BorderLayout());
     add(new Button(&quot;North&quot;), BorderLayout.NORTH);
     add(new Button(&quot;South&quot;), BorderLayout.SOUTH);
     add(new Button(&quot;East&quot;), BorderLayout.EAST);
     add(new Button(&quot;West&quot;), BorderLayout.WEST);
     add(new Button(&quot;Center&quot;), BorderLayout.CENTER);
   }
 }
</pre></blockquote><hr>
<p>
@version 	1.60, 04/07/06
@author 	Arthur van Hoff
@see         java.awt.Container#add(String, Component)
@see         java.awt.ComponentOrientation
@since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.awt.BorderLayout.NORTH
<!-- END KEY -->
<!-- BEGIN DATA -->
北区域的布局约束（容器顶部）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.awt.BorderLayout.SOUTH
<!-- END KEY -->
<!-- BEGIN DATA -->
南区域的布局约束（容器底部）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.awt.BorderLayout.EAST
<!-- END KEY -->
<!-- BEGIN DATA -->
东区域的布局约束（容器右边）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.awt.BorderLayout.WEST
<!-- END KEY -->
<!-- BEGIN DATA -->
西区域的布局约束（容器左边）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.awt.BorderLayout.CENTER
<!-- END KEY -->
<!-- BEGIN DATA -->
中间区域的布局约束（容器中央）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.awt.BorderLayout.BEFORE_FIRST_LINE
<!-- END KEY -->
<!-- BEGIN DATA -->
与 PAGE_START 同义。为了与以前版本兼容而存在。首选 PAGE_START。

@see #PAGE_START
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.awt.BorderLayout.AFTER_LAST_LINE
<!-- END KEY -->
<!-- BEGIN DATA -->
与 PAGE_END 同义。为了与以前版本兼容而存在。首选 PAGE_END。

@see #PAGE_END
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.awt.BorderLayout.BEFORE_LINE_BEGINS
<!-- END KEY -->
<!-- BEGIN DATA -->
与 LINE_START 同义。为了与以前版本兼容而存在。首选 LINE_START。

@see #LINE_START
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.awt.BorderLayout.AFTER_LINE_ENDS
<!-- END KEY -->
<!-- BEGIN DATA -->
与 LINE_END 同义。为了与以前版本兼容而存在。首选 LINE_END。

@see #LINE_END
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.awt.BorderLayout.PAGE_START
<!-- END KEY -->
<!-- BEGIN DATA -->
组件出现在第一行布局内容之前。对于 Western，方向是从左到右、从上到下，等同于 NORTH。

@see java.awt.Component#getComponentOrientation
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.awt.BorderLayout.PAGE_END
<!-- END KEY -->
<!-- BEGIN DATA -->
组件出现在最后一行布局内容之后。对于 Western，方向是从左到右、从上到下，等同于 SOUTH。

@see java.awt.Component#getComponentOrientation
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.awt.BorderLayout.LINE_START
<!-- END KEY -->
<!-- BEGIN DATA -->
组件出现在布局的行方向的开始处。对于 Western，方向是从左到右、从上到下，等同于 WEST。

@see java.awt.Component#getComponentOrientation
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.awt.BorderLayout.LINE_END
<!-- END KEY -->
<!-- BEGIN DATA -->
组件出现在布局的行方向的结尾处。对于 Western，方向是从左到右、从上到下，等同于 EAST。

@see java.awt.Component#getComponentOrientation
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.BorderLayout.hgap
<!-- END KEY -->
<!-- BEGIN DATA -->
用组件之间的间距构造一个边框布局。水平间距由 <code>hgap</code> 指定。

@see #getHgap()
@see #setHgap(int)

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.BorderLayout.vgap
<!-- END KEY -->
<!-- BEGIN DATA -->
用组件之间的垂直间距构造一个边框布局。垂直间距由 <code>vgap</code> 指定。

@see #getVgap()
@see #setVgap(int)
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.Component java.awt.BorderLayout.north
<!-- END KEY -->
<!-- BEGIN DATA -->
指定组件位置的常量将是边框布局的 north 部分。
@serial
@see #getChild(String, boolean)
@see #addLayoutComponent
@see #getLayoutAlignmentX
@see #getLayoutAlignmentY
@see #removeLayoutComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.Component java.awt.BorderLayout.west
<!-- END KEY -->
<!-- BEGIN DATA -->
指定组件位置的常量将是边框布局的 west 部分。
@serial
@see #getChild(String, boolean)
@see #addLayoutComponent
@see #getLayoutAlignmentX
@see #getLayoutAlignmentY
@see #removeLayoutComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.Component java.awt.BorderLayout.east
<!-- END KEY -->
<!-- BEGIN DATA -->
指定组件位置的常量将是边框布局的 east 部分。
@serial
@see #getChild(String, boolean)
@see #addLayoutComponent
@see #getLayoutAlignmentX
@see #getLayoutAlignmentY
@see #removeLayoutComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.Component java.awt.BorderLayout.south
<!-- END KEY -->
<!-- BEGIN DATA -->
指定组件位置的常量将是边框布局的 south 部分。
@serial
@see #getChild(String, boolean)
@see #addLayoutComponent
@see #getLayoutAlignmentX
@see #getLayoutAlignmentY
@see #removeLayoutComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.Component java.awt.BorderLayout.center
<!-- END KEY -->
<!-- BEGIN DATA -->
指定组件位置的常量将是边框布局的 center 部分。
@serial
@see #getChild(String, boolean)
@see #addLayoutComponent
@see #getLayoutAlignmentX
@see #getLayoutAlignmentY
@see #removeLayoutComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.Component java.awt.BorderLayout.firstLine
<!-- END KEY -->
<!-- BEGIN DATA -->

一个相对定位常量，可以用来代替 north、south、east、west 或 center。混合这两种类型的常量可能产生无法预料的结果。如果两种类型的常量都使用，则应优先采用相对常量。例如，如果使用 <code>NORTH</code> 和 <code>BEFORE_FIRST_LINE</code> 常量在方向性为 <code>LEFT_TO_RIGHT</code> 的容器中添加组件，则只需要对 <code>BEFORE_FIRST_LINE</code> 进行布局即可。对于 lastLine、firstItem 和 LastItem 也是同理。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.Component java.awt.BorderLayout.lastLine
<!-- END KEY -->
<!-- BEGIN DATA -->
一个相对定位常量，可以单独使用，而不是与 north、south、east、west 或 center 一起使用。请参阅对 firstLine 的描述。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.Component java.awt.BorderLayout.firstItem
<!-- END KEY -->
<!-- BEGIN DATA -->
一个相对定位常量，可以用来代替 north、south、east、west 或 center。请参阅对 firstLine 的描述。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.Component java.awt.BorderLayout.lastItem
<!-- END KEY -->
<!-- BEGIN DATA -->
一个相对定位常量，可以用来代替 north、south、east、west 或 center。请参阅对 firstLine 的描述。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.BorderLayout()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个组件之间没有间距的新边框布局。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.BorderLayout(int hgap, int vgap)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有指定组件间距的边框布局。水平间距由 <code>hgap</code> 指定，垂直间距由 <code>vgap</code> 指定。
@param   hgap   水平间距。
@param   vgap   垂直间距。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.BorderLayout.getHgap()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回组件之间的水平间距。
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.BorderLayout.setHgap(int hgap)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置组件之间的水平间距。
@param hgap 组件之间的水平间距
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.BorderLayout.getVgap()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回组件之间的垂直间距。
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.BorderLayout.setVgap(int vgap)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置组件之间的垂直间距。
@param vgap 组件之间的垂直间距
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.BorderLayout.addLayoutComponent(Component comp, Object constraints)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的约束对象将指定组件添加到布局中。对于边框布局，约束必须是以下约束之一：<code>NORTH</code>、<code>SOUTH</code>、<code>EAST</code>、<code>WEST</code> 或 <code>CENTER</code>。
 <p>
大多数应用程序并不直接调用此方法。当使用 <code>Container.add</code> 方法将组件添加到容器中时，可以使用相同的参数类型调用此方法。
@param   comp 要添加的组件。
@param   constraints  指定将组件添加到布局中的方式和位置的对象。
@see     java.awt.Container#add(java.awt.Component, java.lang.Object)
@exception   IllegalArgumentException  如果约束对象不是一个字符串，或者它不是五种指定约束之一。
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.BorderLayout.addLayoutComponent(String name, Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated  由 <code>addLayoutComponent(Component, Object)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.BorderLayout.removeLayoutComponent(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此边框布局中移除指定组件。当容器调用其 <code>remove</code> 或 <code>removeAll</code> 方法时，可调用此方法。大多数应用程序并不直接调用此方法。
@param   comp   要移除的组件。
@see     java.awt.Container#remove(java.awt.Component)
@see     java.awt.Container#removeAll()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.BorderLayout.getLayoutComponent(Object constraints)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取使用给定约束添加的组件。

@param   constraints  所需的约束，它是 <code>CENTER</code>、<code>NORTH</code>、<code>SOUTH</code>、<code>WEST</code>、<code>EAST</code>、<code>PAGE_START</code>、<code>PAGE_END</code>、<code>LINE_START</code>、<code>LINE_END</code> 之一
@return  给定位置上的组件；如果此位置为空，则返回 <code>null</code>
@exception   IllegalArgumentException  如果约束对象不是九个指定约束之一
@see     #addLayoutComponent(java.awt.Component, java.lang.Object)
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.BorderLayout.getLayoutComponent(Container target, Object constraints)
<!-- END KEY -->
<!-- BEGIN DATA -->
基于目标 <code>Container</code> 的组件方向，返回给定约束位置对应的组件。利用相对约束 <code>PAGE_START</code>、<code>PAGE_END</code>、<code>LINE_START</code> 和 <code>LINE_END</code> 添加的组件优先于利用显式约束 <code>NORTH</code>、<code>SOUTH</code>、<code>WEST</code> 和 <code>EAST</code> 添加的组件。<code>Container</code> 的组件方向用于确定利用 <code>LINE_START</code> 和 <code>LINE_END</code> 添加的组件的位置。

@param   constraints     所需的绝对位置，<code>CENTER</code>、<code>NORTH</code>、<code>SOUTH</code>、<code>EAST</code> 和 <code>WEST</code> 之一
@param   target      {@code Container}，用来获取基于目标 {@code Container} 组件方向的约束位置。
@return  指定位置上的组件；如果此位置为空，则返回 <code>null</code>
@exception   IllegalArgumentException  如果约束对象不是五个指定约束之一
@exception   NullPointerException  如果目标参数为 null
@see     #addLayoutComponent(java.awt.Component, java.lang.Object)
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.BorderLayout.getConstraints(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定组件的约束

@param   comp 要查询的组件
@return  指定组件的约束；如果组件为 null 或不在此布局中，则返回 null
@see #addLayoutComponent(java.awt.Component, java.lang.Object)
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.BorderLayout.minimumLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用此布局管理器确定 <code>target</code> 容器的最小大小。
 <p>
当容器调用其 <code>getMinimumSize</code> 方法时，可以调用此方法。大多数应用程序并不直接调用此方法。
@param   target   在其中进行布局的容器。
@return  对指定容器的子组件进行布局所需的最小尺寸。
@see     java.awt.Container
@see     java.awt.BorderLayout#preferredLayoutSize
@see     java.awt.Container#getMinimumSize()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.BorderLayout.preferredLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
基于容器中的组件，使用此布局管理器确定 <code>target</code> 容器的首选大小。
 <p>
大多数应用程序并不直接调用此方法。容器调用其 <code>getPreferredSize</code> 方法时将调用此方法。
@param   target   在其中进行布局的容器。
@return  对指定容器的子组件进行布局所需的首选尺寸。
@see     java.awt.Container
@see     java.awt.BorderLayout#minimumLayoutSize
@see     java.awt.Container#getPreferredSize()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.BorderLayout.maximumLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给出指定目标容器中的组件的前提下，返回此布局的最大尺寸。
@param target 需要对其进行布局的组件
@see Container
@see #minimumLayoutSize
@see #preferredLayoutSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.BorderLayout.getLayoutAlignmentX(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回沿 x 轴的对齐方式。这指出了相对于其他组件将如何排列该组件。该值应该在 0 到 1 之间，其中 0 表示根据原点进行对齐，1 表示根据距原点最远的点对齐，0.5 表示居中对齐等等。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.BorderLayout.getLayoutAlignmentY(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回沿 y 轴的对齐方式。这指出了相对于其他组件将如何排列该组件。该值应该在 0 到 1 之间，其中 0 表示根据原点进行对齐，1 表示根据距原点最远的点对齐，0.5 表示居中对齐等等。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.BorderLayout.invalidateLayout(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
使布局无效，指示如果布局管理器缓存了信息，则应该将其丢弃。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.BorderLayout.layoutContainer(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用此边框布局对容器参数进行布局。
 <p>
为了满足此 <code>BorderLayout</code> 对象的约束条件，此方法实际上会重塑指定容器中的组件。<code>NORTH</code> 和 <code>SOUTH</code> 组件（如果有）分别放置在容器的顶部和底部。<code>WEST</code> 和 <code>EAST</code> 组件分别放置在容器的左边和右边。最后，<code>CENTER</code> 对象放置在中间的任何剩余空间内。
 <p>
大多数应用程序并不直接调用此方法。容器调用其 <code>doLayout</code> 方法时将调用此方法。
@param   target  在其中进行布局的容器。
@see     java.awt.Container
@see     java.awt.Container#doLayout()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.BorderLayout.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此边框布局的状态的字符串表示形式。
@return  此边框布局的字符串表示形式。

<!-- END DATA -->
