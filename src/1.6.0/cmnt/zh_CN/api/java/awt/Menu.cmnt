<!-- BEGIN KEY -->
public class java.awt.Menu extends java.awt.MenuItem implements java.awt.MenuContainer, javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Menu</code> 对象是从菜单栏部署的下拉式菜单组件。
 <p>
菜单可以是任意<i>分离式</i> 菜单。可以打开分离式菜单，并从其父菜单栏或菜单中拖开。释放鼠标按钮之后，它仍然在屏幕上。分离菜单的机制与平台有关，因为分离式菜单的外观由其同位体确定。对于不支持分离式菜单的平台，分离属性会被忽略。
 <p>
菜单中的每一项都必须属于 <code>MenuItem</code> 类。它可以是 <code>MenuItem</code> 的一个实例、子菜单（<code>Menu</code> 的一个实例）、或复选框（<code>CheckboxMenuItem</code> 的一个实例）。

@version 1.75, 05/18/04
@author  Sami Shaio
@see     java.awt.MenuItem
@see     java.awt.CheckboxMenuItem
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.util.Vector java.awt.Menu.items
<!-- END KEY -->
<!-- BEGIN DATA -->
项的向量，这些项是菜单的一部分。

@serial
@see #countItems()

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean java.awt.Menu.tearOff
<!-- END KEY -->
<!-- BEGIN DATA -->
此字段指示该菜单是否具有分离属性。如果该菜单具有分离属性，则将它设置为 <code>true</code>；如果不具有分离属性，则将它设置为 <code>false</code>。当用户不再需要分离式菜单时，可以删除它。

@serial
@see #isTearOff()

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean java.awt.Menu.isHelpMenu
<!-- END KEY -->
<!-- BEGIN DATA -->
如果该菜单实际是帮助菜单，则将此字段设置为 <code>true</code>。否则，将它设置为 <code>false</code>。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.Menu.menuSerializedDataVersion
<!-- END KEY -->
<!-- BEGIN DATA -->
菜单序列化的数据版本。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Menu() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有空标签的新菜单。此菜单不是分离式菜单。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Menu(String label) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定标签的新菜单。此菜单不是分离式菜单。
@param       label 菜单栏或其他菜单（此菜单是其子菜单）中菜单的标签。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Menu(String label, boolean tearOff) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定标签的新菜单，指示该菜单是否可以分离。
 <p>
可能并非 AWT 的所有实现都支持分离功能。如果特定的实现不支持分离式菜单，则此值会被默认忽略。
@param       label 菜单栏或其他菜单（此菜单是其子菜单）中菜单的标签。
@param       tearOff   如果为 <code>true</code>，则该菜单为分离式菜单。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless
@since       JDK1.0.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Menu.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建该菜单的同位体。该同位体允许我们修改该菜单的外观，而不更改其功能。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Menu.removeNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
移除该菜单的同位体。该同位体允许我们修改该菜单的外观，而不更改其功能。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Menu.isTearOff()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此菜单是否为分离式菜单。
 <p>
AWT 的所有实现都不支持分离功能。如果特定的实现不支持分离式菜单，则此值会被默认忽略。
@return      如果这是一个分离式菜单，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Menu.getItemCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此菜单中的项数。
@return     此菜单中的项数。
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Menu.countItems()
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，已由 <code>getItemCount()</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuItem java.awt.Menu.getItem(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此菜单的指定索引处的项。
@param     index 要返回的项的位置。
@return    指定索引处的项。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuItem java.awt.Menu.add(MenuItem mi)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的菜单项添加到此菜单。如果该菜单项为另一个菜单的一部分，则从该菜单移除它。

@param       mi   要添加的菜单项
@return      已添加的菜单项
@see         java.awt.Menu#insert(java.lang.String, int)
@see         java.awt.Menu#insert(java.awt.MenuItem, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Menu.add(String label)
<!-- END KEY -->
<!-- BEGIN DATA -->
将带有指定标签的项添加到此菜单。

@param       label   该项上的文本
@see         java.awt.Menu#insert(java.lang.String, int)
@see         java.awt.Menu#insert(java.awt.MenuItem, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Menu.insert(MenuItem menuitem, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
将菜单项插入到此菜单的指定位置。

@param         menuitem  要插入的菜单项。
@param         index     菜单项应插入的位置。
@see           java.awt.Menu#add(java.lang.String)
@see           java.awt.Menu#add(java.awt.MenuItem)
@exception     IllegalArgumentException 如果 <code>index</code> 的值小于零
@since         JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Menu.insert(String label, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
将带有指定标签的菜单项插入到此菜单的指定位置。这是 <code>insert(menuItem, index)</code> 的一个便捷方法。

@param       label 项的文本
@param       index 菜单项应插入的位置
@see         java.awt.Menu#add(java.lang.String)
@see         java.awt.Menu#add(java.awt.MenuItem)
@exception   IllegalArgumentException 如果 <code>index</code> 的值小于零
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Menu.addSeparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个分隔线或连字符添加到菜单的当前位置。
@see         java.awt.Menu#insertSeparator(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Menu.insertSeparator(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
在指定的位置插入分隔符。
@param       index 菜单分隔符应插入的位置。
@exception   IllegalArgumentException 如果 <code>index</code> 的值小于 0。
@see         java.awt.Menu#addSeparator
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Menu.remove(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此菜单移除指定索引处的菜单项。
@param       index 要移除的项的位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Menu.remove(MenuComponent item)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此菜单移除指定的菜单项。
@param  item 要从该菜单移除的项。如果 <code>item</code> 为 <code>null</code>，或不在此菜单中，则此方法不执行任何操作。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Menu.removeAll()
<!-- END KEY -->
<!-- BEGIN DATA -->
从此菜单移除所有项。
@since       JDK1.0.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.Menu.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此 <code>Menu</code> 状态的字符串。此方法仅用于调试目的，对于这两个实现，返回的字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。
 
@return 此菜单的参数字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.Menu.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此菜单关联的 AccessibleContext。对于菜单，AccessibleContext 会采用 AccessibleAWTMenu 的窗体。必要时创建一个新的 AccessibleAWTDialog 实例。

@return 用作此菜单的 AccessibleContext 的 AccessibleAWTMenu

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.Menu.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException, java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取 <code>ObjectInputStream</code>。未识别的密钥或值将被忽略。

@param s 要读取的 <code>ObjectInputStream</code>
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless</code> 返回 <code>true</code>
@see java.awt.GraphicsEnvironment#isHeadless
@see #writeObject(ObjectOutputStream)

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.Menu.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将默认可序列化字段写入流中。

@param s 要写入的 <code>ObjectOutputStream</code>
@see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)
@see #readObject(ObjectInputStream)

<!-- END DATA -->
