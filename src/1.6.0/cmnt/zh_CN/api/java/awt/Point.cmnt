<!-- BEGIN KEY -->
public class java.awt.Point extends java.awt.geom.Point2D implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
表示 {@code (x,y)} 坐标空间中的位置的点，以整数精度指定。

@version 	1.40, 02/24/06
@author 	Sami Shaio
@since          1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Point.x
<!-- END KEY -->
<!-- BEGIN DATA -->
此 <code>Point</code> 的 X 坐标。如果未设置 X 坐标，则默认为 0。

@serial
@see #getLocation()
@see #move(int, int)
@since 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Point.y
<!-- END KEY -->
<!-- BEGIN DATA -->
此 <code>Point</code> 的 Y 坐标。如果未设置 Y 坐标，则默认为 0。

@serial
@see #getLocation()
@see #move(int, int)
@since 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point()
<!-- END KEY -->
<!-- BEGIN DATA -->
在坐标空间的原点 (0,0) 构造并初始化一个点。
@since        1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造并初始化一个与指定的 <code>Point</code> 对象具有相同位置的点。
@param       p 点
@since       1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
在坐标空间中指定的 {@code (x,y)} 位置构造并初始化一个点。
@param       x   新构造的 <code>Point</code> 的 X 坐标
@param       y   新构造的 <code>Point</code> 的 Y 坐标
@since 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.Point.getX()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.Point.getY()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.Point.getLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此点的位置。包含此方法是出于完整性考虑，它与 <code>Component</code> 的 <code>getLocation</code> 方法相似。
@return 此点在相同位置的一个副本
@see         java.awt.Component#getLocation
@see         java.awt.Point#setLocation(java.awt.Point)
@see         java.awt.Point#setLocation(int, int)
@since       1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Point.setLocation(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
将点的位置设为指定位置。包含此方法是出于完整性考虑，它与 <code>Component</code> 的 <code>setLocation</code> 方法相似。
@param       p  点，此点的新位置
@see         java.awt.Component#setLocation(java.awt.Point)
@see         java.awt.Point#getLocation
@since       1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Point.setLocation(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此点更改为具有指定位置。
 <p>
包含此方法是出于完整性考虑，它与 <code>Component</code> 的 <code>setLocation</code> 方法相似。其行为与 <code>move(int,&nbsp;int)</code> 相同。
@param       x  新位置的 X 坐标
@param       y  新位置的 Y 坐标
@see         java.awt.Component#setLocation(int, int)
@see         java.awt.Point#getLocation
@see         java.awt.Point#move(int, int)
@since       1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Point.setLocation(double x, double y)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此点的位置设为指定的双精度坐标。双精度的值将被舍入为整数值。任何小于 <code>Integer.MIN_VALUE</code> 的数都将被重置为 <code>MIN_VALUE</code>，任何大于 <code>Integer.MAX_VALUE</code> 的数都将被重置为 <code>MAX_VALUE</code>。

@param x 新位置的 X 坐标
@param y 新位置的 Y 坐标
@see #getLocation

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Point.move(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此点移动到 {@code (x,y)} 坐标平面中的指定位置。此方法与 <code>setLocation(int,&nbsp;int)</code> 相同。
@param       x  新位置的 X 坐标
@param       y  新位置的 Y 坐标
@see         java.awt.Component#setLocation(int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Point.translate(int dx, int dy)
<!-- END KEY -->
<!-- BEGIN DATA -->
平移 {@code (x,y)} 位置的点，沿 {@code x} 轴平移 {@code dx}，沿 {@code y} 轴平移 {@code dy}，移动后得到点 {@code (x+dx,y+dy)}。
@param       dx   沿 X 轴平移此点的距离
@param       dy   沿 Y 轴平移此点的距离

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Point.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定两个点是否相等。如果 <code>Point2D</code> 的两个实例的 <code>x</code> 和 <code>y</code> 成员字段的值相同，则它们是相等的，其中成员字段的值表示实例在坐标空间中的位置。
@param obj 将与此 <code>Point2D</code> 的实例进行比较的对象
@return 如果要比较的对象是 <code>Point2D</code> 的实例且有相同的值，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.Point.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此点的字符串表示形式及其在 {@code (x,y)} 坐标空间中的位置。此方法仅用于调试目的，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可以为空，但不可以为 <code>null</code>。
 
@return  此点的字符串表示形式

<!-- END DATA -->
