<!-- BEGIN KEY -->
public class java.awt.CheckboxMenuItem extends java.awt.MenuItem implements java.awt.ItemSelectable, javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示一个可包括在菜单中的复选框。选择菜单中的复选框可以将其状态从 &quot;开&quot; 更改为 &quot;关&quot; 或者从 &quot;关&quot; 更改为 &quot;开&quot;。
 <p>
下图描绘了一个包含 <code>CheckBoxMenuItem</code> 实例的菜单：
 <p>
<img src="doc-files/MenuBar-1.gif" 
 alt="Examples 菜单，包含 Basic、Simple、Check 和 More Examples 项。Check 项是一个 CheckBoxMenuItem 实例，处于关闭状态。"
 ALIGN=center HSPACE=10 VSPACE=7>
 <p>
<code>Check</code> 项显示了一个处于 &quot;关&quot; 状态的复选框菜单项。
 <p>
当选定一个复选框菜单项时，AWT 将一个项事件发送到该项。因为该事件是 <code>ItemEvent</code> 的一个实例，所以 <code>processEvent</code> 方法检查该事件，同时将它传递给 <code>processItemEvent</code>。后一种方法将该事件重定向到任何为关注此菜单项生成的项事件而注册的 <code>ItemListener</code> 对象。

@version 1.72, 07/11/06
@author 	Sami Shaio
@see         java.awt.event.ItemEvent
@see         java.awt.event.ItemListener
@since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean java.awt.CheckboxMenuItem.state
<!-- END KEY -->
<!-- BEGIN DATA -->
复选框菜单项的状态
@serial
@see #getState()
@see #setState(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.CheckboxMenuItem() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有空标签的复选框菜单项。菜单项的状态初始设置为 &quot;关&quot;。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true
@see java.awt.GraphicsEnvironment#isHeadless
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.CheckboxMenuItem(String label) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定标签的复选框菜单项。菜单项的状态初始设置为 &quot;关&quot;。

@param label 复选框菜单项的字符串标签，对于没有标签的菜单项，该参数为 <code>null</code>。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.CheckboxMenuItem(String label, boolean state) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 具有指定标签和状态的复选框菜单项。
@param     label   复选框菜单项的字符串标签，对于没有标签的菜单项，该参数为 <code>null</code>。
@param      state   菜单项的最初状态，其中 <code>true</code> 指示 &quot;开&quot;，<code>false</code> 指示 &quot;关&quot;。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true
@see java.awt.GraphicsEnvironment#isHeadless
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.CheckboxMenuItem.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建复选框项的同位体。此同位体允许更改复选框外观，而不更改其功能。大多数应用程序并不直接调用此方法。
@see     java.awt.Toolkit#createCheckboxMenuItem(java.awt.CheckboxMenuItem)
@see     java.awt.Component#getToolkit()

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.CheckboxMenuItem.getState()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此复选框菜单项的状态是 &quot;开&quot; 还是 &quot;关&quot;。

@return   复选框菜单项的状态，其中 <code>true</code> 指示 &quot;开&quot;，<code>false</code> 指示 &quot;关&quot;
@see        #setState

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.CheckboxMenuItem.setState(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此复选框菜单项设置为指定的状态。boolean 值 <code>true</code> 指示 &quot;开&quot;，而 <code>false</code> 指示 &quot;关&quot;。

<p>注意，此方法应主要用于初始化复选框菜单项的状态。以编程方式设置复选框菜单项的状态<i>不会</i> 触发 <code>ItemEvent</code>。触发 <code>ItemEvent</code> 的唯一方式是通过用户交互。

@param      b   如果复选框菜单项处于打开状态，则该参数为 <code>true</code>，否则为 <code>false</code>
@see        #getState

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Object[] java.awt.CheckboxMenuItem.getSelectedObjects()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个数组（长度为 1)，它包含复选框菜单项的标签，如果没有选中复选框，则返回 null。
@see ItemSelectable

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.CheckboxMenuItem.addItemListener(ItemListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定的项侦听器，以接收发自此复选框菜单项的项事件。发送项事件，以响应用户动作，但不响应对 setState() 的调用。如果 l 为 null，则不抛出任何异常，也不执行任何动作。有关 AWT 的线程模型的细节信息，请参阅 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"  >AWT 线程问题</a>。

@param         l 项侦听器
@see           #removeItemListener
@see           #getItemListeners
@see           #setState
@see           java.awt.event.ItemEvent
@see           java.awt.event.ItemListener
@since         JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.CheckboxMenuItem.removeItemListener(ItemListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定的项侦听器，以便它不再接收发自此复选框菜单项的项事件。如果 l 为 null，则不抛出任何异常，也不执行任何动作。有关 AWT 的线程模型的细节信息，请参阅 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"  >AWT 线程问题</a>。

@param         l 项侦听器
@see           #addItemListener
@see           #getItemListeners
@see           java.awt.event.ItemEvent
@see           java.awt.event.ItemListener
@since         JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.event.ItemListener[] java.awt.CheckboxMenuItem.getItemListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在此复选框菜单项上注册的所有项侦听器组成的数组。

@return 此复选框菜单的所有 <code>ItemListener</code>；如果当前没有已注册的项侦听器，则返回一个空数组。

@see           #addItemListener
@see           #removeItemListener
@see           java.awt.event.ItemEvent
@see           java.awt.event.ItemListener
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.awt.CheckboxMenuItem.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前在此 <code>CheckboxMenuItem</code> 上注册为 <code><em>Foo</em>Listener</code> 的所有对象组成的数组。<code><em>Foo</em>Listener</code> 是用 <code>add<em>Foo</em>Listener</code> 方法注册的。

 <p>
可以使用 class 字面值（如 <code><em>Foo</em>Listener.class</code>）来指定 <code>listenerType</code> 参数。例如，可以通过以下代码查询 <code>CheckboxMenuItem</code> <code>c</code>，以获得它的项侦听器：

 <pre>ItemListener[] ils = (ItemListener[])(c.getListeners(ItemListener.class));</pre>

如果不存在这样的侦听器，则此方法将返回一个空数组。

@param listenerType 请求的侦听器类型；此参数应该指定一个从 <code>java.util.EventListener</code> 继承的接口
@return 在此复选框菜单上作为 <code><em>Foo</em>Listener</code> 注册的所有对象组成的数组；如果尚未添加这样的侦听器，则返回一个空数组
@exception ClassCastException 如果 <code>listenerType</code> 未指定一个实现 <code>java.util.EventListener</code> 的类或接口

@see #getItemListeners
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.CheckboxMenuItem.processEvent(AWTEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理此复选框菜单项上的事件。如果事件是 <code>ItemEvent</code> 的一个实例，则此方法将调用 <code>processItemEvent</code> 方法。如果事件不是一个项事件，则它将调用超类的 <code>processEvent</code>。
 <p>
复选框菜单项目前只支持项事件。
<p>注意，如果事件参数为 <code>null</code>，则行为是不确定的，并可能导致一个异常。

@param        e 事件
@see          java.awt.event.ItemEvent
@see          #processItemEvent
@since        JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.CheckboxMenuItem.processItemEvent(ItemEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理发生在此复选框菜单项上的项事件，方法是将这些事件指派给所有已注册的 <code>ItemListener</code> 对象。
 <p>
只有此菜单项启用了项事件，才会调用此方法。当出现以下情况时，将启用项事件：
 <p><ul>
<li>通过 <code>addItemListener</code> 注册了 <code>ItemListener</code> 对象。
<li>通过 <code>enableEvents</code> 启用了项事件。
 </ul>
<p>注意，如果事件参数为 <code>null</code>，则行为是不确定的，并可能导致异常。

@param       e 项事件
@see         java.awt.event.ItemEvent
@see         java.awt.event.ItemListener
@see         #addItemListener
@see         java.awt.MenuItem#enableEvents
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.CheckboxMenuItem.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此 <code>CheckBoxMenuItem</code> 状态的字符串。此方法仅在进行调试的时候使用，对于这两个实现，返回的字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。

@return     此复选框菜单项的参数字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.CheckboxMenuItem.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 CheckboxMenuItem 相关的 AccessibleContext。对于复选框菜单来说，AccessibleContext 采用 AccessibleAWTCheckboxMenuItem 的形式。如果必要，可以创建一个新的 AccessibleAWTCheckboxMenuItem。

@return 一个 AccessibleAWTCheckboxMenuItem，它充当此 CheckboxMenuItem 的 AccessibleContext
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.CheckboxMenuItem.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将默认的可序列化字段写入流。写入可序列化 <code>ItemListeners</code> 的一个列表作为可选数据。检测不可序列化的 <code>ItemListeners</code>，不要尝试对它们进行序列化。

@param s 要写入的 <code>ObjectOutputStream</code>
@serialData 以 <code>null</code> 终止的 0 或多对序列；该对由一个 <code>String</code> 和一个 <code>Object</code> 组成；<code>String</code> 指示对象的类型，它是以下类型之一：指示 <code>ItemListener</code> 对象的 <code>itemListenerK</code>

@see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)
@see java.awt.Component#itemListenerK
@see #readObject(ObjectInputStream)

<!-- END DATA -->
