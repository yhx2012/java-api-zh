<!-- BEGIN KEY -->
public class java.awt.BasicStroke extends java.lang.Object implements java.awt.Stroke
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>BasicStroke</code> 类定义针对图形图元轮廓呈现属性的一个基本集合，这些图元使用 {@link Graphics2D} 对象呈现，而该对象的 Stroke 属性设置为此 <code>BasicStroke</code>。由 <code>BasicStroke</code> 定义的呈现属性描述了用画笔沿 {@link Shape} 的轮廓绘制的某个标记的形状，以及应用在 <code>Shape</code> 路径线段的末端和连接处的装饰。
这些呈现属性包括：
<dl compact>
<dt><i>width</i>
<dd>画笔的宽度，是垂直于画笔轨迹的测量值。
<dt><i>end caps</i>
<dd>在未封闭子路径和虚线线段的末端应用的一些装饰。如果子路径没有 CLOSE 段，则在同一点上开始和结束的子路径仍被认为是未封闭的。关于 CLOSE 段的更多信息，请参阅 {@link java.awt.geom.PathIterator#SEG_CLOSE SEG_CLOSE}。三个不同的装饰是：{@link #CAP_BUTT}、{@link #CAP_ROUND} 和 {@link #CAP_SQUARE}。
<dt><i>line joins</i>
<dd>在两个路径线段的交汇处，以及使用 {@link java.awt.geom.PathIterator#SEG_CLOSE SEG_CLOSE} 封闭的子路径端点的交汇处应用的装饰。三个不同的装饰是：{@link #JOIN_BEVEL}、{@link #JOIN_MITER} 和 {@link #JOIN_ROUND}。
 <dt><i>miter limit</i>
<dd>对剪裁具有 JOIN_MITER 装饰的线接合点的限制。当斜接长度与笔划宽度的比大于 miterlimit 值时，需要剪裁线接合点。斜接长度是斜接的对角线长度，即交汇处的内棱角和外棱角之间的距离。两条线段形成的角度越小，斜接长度就越长，交汇处的角度就越尖锐。默认 miterlimit 值为 10.0f，它会使所有小于 11 度的角都被剪裁。剪裁斜接会使线接合点的装饰变成斜角。
 <dt><i>dash attributes</i>
<dd>关于如何通过在不透明和透明部分之间交替形成一个虚线模式的定义。
 </dl>
一些属性指定了控制返回轮廓形状的测量和距离，所有这些属性都是在与最初未绘制轮廓的 <code>Shape</code> 参数相同的坐标系中测量的。当 <code>Graphics2D</code> 对象在执行其 <code>draw</code> 方法之一期间使用 <code>Stroke</code> 对象重定义一条路径时，在应用 <code>Graphics2D</code> 转换属性之前，要提供原始形式的几何形状。所以，诸如画笔宽度之类的属性是在 <code>Graphics2D</code> 对象的用户空间坐标系中解释的，并受制于特定 <code>Graphics2D</code> 中用户空间到设备空间转换的缩放和剪切效果。例如，呈现形状的轮廓宽度不仅由此 <code>BasicStroke</code> 的 width 属性确定，还由 <code>Graphics2D</code> 对象的 transform 属性确定。请考虑以下代码：
 <blockquote><tt>// sets the Graphics2D object's Tranform attribute g2d.scale(10, 10); // sets the Graphics2D object's Stroke attribute g2d.setStroke(new BasicStroke(1.5f));</tt></blockquote>
假定不对 <code>Graphics2D</code> 对象添加其他任何缩放转换，那么所得到的线条宽度大约是 15 个像素宽。如示例代码所述，浮点线提供了更好的精度，特别是在对 <code>Graphics2D</code> 对象使用大型转换时。当一条线是斜线时，具体的宽度取决于在追踪理论上已加宽的轮廓时，呈现管线选择填充哪些像素。选择开启哪些像素受到 antialiasing 属性的影响，因为抗锯齿呈现管线可以选择给部分覆盖的像素着色。 
 <p>
关于用户空间坐标和呈现过程的更多信息，请参阅 <code>Graphics2D</code> 类的注释。
@see Graphics2D
@version 1.40, 12/19/03
@author Jim Graham

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.BasicStroke.JOIN_MITER
<!-- END KEY -->
<!-- BEGIN DATA -->
扩展路径线段的外边缘，直到它们连接在一起。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.BasicStroke.JOIN_ROUND
<!-- END KEY -->
<!-- BEGIN DATA -->
通过舍去半径为线长的一半的圆角，将路径线段连接在一起。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.BasicStroke.JOIN_BEVEL
<!-- END KEY -->
<!-- BEGIN DATA -->
通过直线连接宽体轮廓的外角，将路径线段连接在一起。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.BasicStroke.CAP_BUTT
<!-- END KEY -->
<!-- BEGIN DATA -->
无装饰地结束未封闭的子路径和虚线线段。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.BasicStroke.CAP_ROUND
<!-- END KEY -->
<!-- BEGIN DATA -->
使用半径等于画笔宽度一半的圆形装饰结束未封闭的子路径和虚线线段。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.BasicStroke.CAP_SQUARE
<!-- END KEY -->
<!-- BEGIN DATA -->
使用正方形结束未封闭的子路径和虚线线段，正方形越过线段端点，并延长等于线条宽度一半的距离。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.BasicStroke(float width, int cap, int join, float miterlimit, float[] dash, float dash_phase)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有指定属性的新 <code>BasicStroke</code>。
@param width 此 <code>BasicStroke</code> 的宽度。此宽度必须大于或等于 0.0f。如果将宽度设置为 0.0f，则将笔划呈现为可用于目标设备和抗锯齿提示设置的最细线条。
@param cap <code>BasicStroke</code> 端点的装饰
@param join 应用在路径线段交汇处的装饰
@param miterlimit 斜接处的剪裁限制。miterlimit 必须大于或等于 1.0f。
@param dash 表示虚线模式的数组
@param dash_phase 开始虚线模式的偏移量
@throws IllegalArgumentException 如果 <code>width</code> 为负
@throws IllegalArgumentException 如果 <code>cap</code> 既不是 CAP_BUTT，也不是 CAP_ROUND 或 CAP_SQUARE
@throws IllegalArgumentException 如果 <code>miterlimit</code> 小于 1 并且 <code>join</code> 为 JOIN_MITER
@throws IllegalArgumentException 如果 <code>join</code> 既不是 JOIN_ROUND，也不是 JOIN_BEVEL 或 JOIN_MITER
@throws IllegalArgumentException 如果 <code>dash_phase</code> 为负并且 <code>dash</code> 不为 <code>null</code>
@throws IllegalArgumentException 如果 <code>dash</code> 的长度为零
@throws IllegalArgumentException 如果所有 dash 的长度都为零。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.BasicStroke(float width, int cap, int join, float miterlimit)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有指定属性的实心的 <code>BasicStroke</code>。
@param width <code>BasicStroke</code> 的宽度
@param cap <code>BasicStroke</code> 端点的装饰
@param join 应用在路径线段交汇处的装饰
@param miterlimit 斜接处的剪裁限制
@throws IllegalArgumentException 如果 <code>width</code> 为负
@throws IllegalArgumentException 如果 <code>cap</code> 既不是 CAP_BUTT，也不是 CAP_ROUND 或 CAP_SQUARE
@throws IllegalArgumentException 如果 <code>miterlimit</code> 小于 1 并且 <code>join</code> 为 JOIN_MITER
@throws IllegalArgumentException 如果 <code>join</code> 既不是 JOIN_ROUND，也不是 JOIN_BEVEL 或 JOIN_MITER

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.BasicStroke(float width, int cap, int join)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有指定属性的实心的 <code>BasicStroke</code>。在允许使用默认值或线连接点未指定为 JOIN_MITER 的情况下，不需要 <code>miterlimit</code> 参数。
@param width <code>BasicStroke</code> 的宽度
@param cap <code>BasicStroke</code> 端点的装饰
@param join 应用在路径线段交汇处的装饰
@throws IllegalArgumentException 如果 <code>width</code> 为负
@throws IllegalArgumentException 如果 <code>cap</code> 既不是 CAP_BUTT，也不是 CAP_ROUND 或 CAP_SQUARE
@throws IllegalArgumentException 如果 <code>join</code> 既不是 JOIN_ROUND，也不是 JOIN_BEVEL 或 JOIN_MITER

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.BasicStroke(float width)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有指定线条宽度以及 cap 和 join 风格的默认值的实心 <code>BasicStroke</code>。
@param width <code>BasicStroke</code> 的宽度
@throws IllegalArgumentException 如果 <code>width</code> 为负

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.BasicStroke()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有所有属性的默认值的新 <code>BasicStroke</code>。默认属性是宽度为 1.0 的实线、CAP_SQUARE、JOIN_MITER 和 10.0 的斜接限制。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Shape java.awt.BasicStroke.createStrokedShape(Shape s)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>Shape</code>，它在内部定义了指定 <code>Shape</code> 的笔划轮廓。
@param s 要勾画的 <code>Shape</code> 边界
@return 勾画了轮廓的 <code>Shape</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.BasicStroke.getLineWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回线条的宽度。线条的宽度是在用户空间中表示的，此空间是 Java 2D 使用的默认坐标空间。关于用户空间坐标系的更多信息，请参阅 <code>Graphics2D</code> 类的注释。
@return 此 <code>BasicStroke</code> 的线条宽度。
@see Graphics2D

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.BasicStroke.getEndCap()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回端点的 cap 样式。
@return 此 <code>BasicStroke</code> 端点的 cap 样式，它是定义可能的端点 cap 样式的静态 <code>int</code> 值之一。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.BasicStroke.getLineJoin()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回线条连接样式。
@return <code>BasicStroke</code> 的线条连接样式，它是定义可能的线条连接样式的静态 <code>int</code> 值之一。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.BasicStroke.getMiterLimit()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回斜接的限制。
@return <code>BasicStroke</code> 的斜接限制。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[] java.awt.BasicStroke.getDashArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示虚线线段长度的数组。数组中其他条目表示了不透明和透明虚线线段的用户空间长度。当勾画将被绘制的 <code>Shape</code> 的轮廓时，勾画的用户空间距离将被累积。距离值被用来在虚线数组中建立索引。当画笔的当前累积距离映射到虚线数组的某一个元素时，画笔是不透明的，否则是透明的。
@return 虚线数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.BasicStroke.getDashPhase()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前虚线相位。虚线相位是在用户坐标中指定的一个距离，它表示虚线模式中的偏移量。换句话说，虚线相位定义了虚线模式中的点，该点将相应于笔划的起始点。
@return 返回 <code>float</code> 值形式的虚线相位。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.BasicStroke.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此笔划的哈希码。
@return 此笔划的哈希码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.BasicStroke.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试指定对象与此 <code>BasicStroke</code> 是否相等，首先测试指定对象是否是一个 <code>BasicStroke</code>，然后将其宽度、连接、cap、斜接限制、虚线和虚线相位属性与 <code>BasicStroke</code> 的那些属性进行比较。
@param obj 与此 <code>BasicStroke</code> 进行比较的指定对象
@return 如果两个对象的宽度、连接、cap、斜接限制、虚线和虚线相位相同，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
