<!-- BEGIN KEY -->
public abstract class java.awt.geom.Arc2D extends java.awt.geom.RectangularShape
<!-- END KEY -->
<!-- BEGIN DATA -->
<CODE>Arc2D</CODE> 是所有存储 2D 弧度的对象的抽象超类，其中 2D 弧度由窗体矩形、起始角度、角跨越（弧的长度）和闭合类型（<CODE>OPEN</CODE>、<CODE>CHORD</CODE> 或 <CODE>PIE</CODE>）定义。
 <p>
<a name="inscribes">
 弧度是其父 {@link RectangularShape} 窗体矩形内切完整椭圆的一部分。
 </a>
 <a name="angles">角度是相对于非正方形的窗体矩形指定的，从而 45 度角总是落在椭圆中心到窗体矩形右上角的连线上。因此，如果窗体矩形沿一条轴的长度远长于沿另一条轴的长度，则弧段起始点和结束点间的角度将沿窗体长轴发生较大偏斜。</a>
 <p>
坐标的实际存储表示形式由子类决定。

@version 10 Feb 1997
@author	Jim Graham
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.geom.Arc2D.OPEN
<!-- END KEY -->
<!-- BEGIN DATA -->
闭合类型，用于不具有用来连接弧段两个端点的路径段的开弧。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.geom.Arc2D.CHORD
<!-- END KEY -->
<!-- BEGIN DATA -->
闭合类型，用于通过从弧段的起始点到弧段的结束点画一条直线来闭合的弧。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.geom.Arc2D.PIE
<!-- END KEY -->
<!-- BEGIN DATA -->
闭合类型，用于通过从弧段的起始点到完整椭圆的中心，再从圆心到弧段的结束点画直线来闭合的弧。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.geom.Arc2D(int type)
<!-- END KEY -->
<!-- BEGIN DATA -->
这是一个不能直接实例化的抽象类。特定于类型的实现子类可用于实例化，并提供用于存储满足以下各种存取方法所需信息的多种格式。

@param type 此弧的闭合类型：{@link #OPEN}、{@link #CHORD} 或 {@link #PIE}。
@see java.awt.geom.Arc2D.Float
@see java.awt.geom.Arc2D.Double
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.Arc2D.getAngleStart()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回弧的起始角度。

@return 一个 double 值，表示弧的起始角度（以度数表示）。
@see #setAngleStart
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.Arc2D.getAngleExtent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回弧的角跨越。

@return 一个 double 值，表示弧的角跨越（以度数表示）。
@see #setAngleExtent
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.geom.Arc2D.getArcType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回弧的弧闭合类型：{@link #OPEN}、{@link #CHORD} 或 {@link #PIE}。
@return 在此类中定义的整数常量闭合类型之一。
@see #setArcType
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Point2D java.awt.geom.Arc2D.getStartPoint()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回弧的起始点。此点是起始角度定义的中心发出的射线与弧椭圆边界的交点。
 
@return 一个 <CODE>Point2D</CODE> 对象，表示弧起始点的 x、y 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Point2D java.awt.geom.Arc2D.getEndPoint()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回弧的结束点。此点是起始角度加上弧的角跨越所定义的中心发出的射线与弧椭圆边界的交点。

@return 一个 <CODE>Point2D</CODE> 对象，表示弧结束点的 x、y 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.geom.Arc2D.setArc(double x, double y, double w, double h, double angSt, double angExt, int closure)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此弧的位置、大小、角跨越和闭合类型设置为指定的 double 值。

@param x 弧的左上角的 X 坐标。
@param y 弧的左上角的 Y 坐标。
@param w 完整椭圆的总宽度，此弧是该椭圆的一部分。
@param h 完整椭圆的总高度，此弧是该椭圆的一部分。
@param angSt 弧的起始角度（以度数表示）。
@param angExt 弧的角跨越（以度数表示）。
@param closure 弧的闭合类型：{@link #OPEN}、{@link #CHORD} 或 {@link #PIE}。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.Arc2D.setArc(Point2D loc, Dimension2D size, double angSt, double angExt, int closure)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此弧的位置、大小、角跨越和闭合类型设置为指定值。

@param loc 表示弧的左上角坐标的 <CODE>Point2D</CODE>。
@param size 表示完整椭圆宽度和高度的 <CODE>Dimension2D</CODE>，此弧是该椭圆的一部分。
@param angSt 弧的起始角度（以度数表示）。
@param angExt 弧的角跨越（以度数表示）。
@param closure 弧的闭合类型：{@link #OPEN}、{@link #CHORD} 或 {@link #PIE}。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.Arc2D.setArc(Rectangle2D rect, double angSt, double angExt, int closure)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此弧的位置、大小、角跨越和闭合类型设置为指定值。

@param rect 定义完整椭圆外部边界的窗体矩形，此弧是该椭圆的一部分。
@param angSt 弧的起始角度（以度数表示）。
@param angExt 弧的角跨越（以度数表示）。
@param closure 弧的闭合类型：{@link #OPEN}、{@link #CHORD} 或 {@link #PIE}。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.Arc2D.setArc(Arc2D a)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此弧设置为与指定弧相同。

@param a 用于设置弧值的 <CODE>Arc2D</CODE>。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.Arc2D.setArcByCenter(double x, double y, double radius, double angSt, double angExt, int closure)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此弧的位置、边界、角跨越和闭合类型设置为指定值。弧是由中心点和半径（而不是完整椭圆的窗体矩形）定义的。

@param x  弧中心的 X 坐标。
@param y  弧中心的 Y 坐标。
@param radius 弧的半径。
@param angSt 弧的起始角度（以度数表示）。
@param angExt 弧的角跨越（以度数表示）。
@param closure 弧的闭合类型：{@link #OPEN}、{@link #CHORD} 或 {@link #PIE}。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.Arc2D.setArcByTangent(Point2D p1, Point2D p2, Point2D p3, double radius)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此弧的位置、边界和角跨越设置为指定值。弧的起始角度是点 (p1, p2) 指定的线的正切，结束角度是点 (p2, p3) 指定的线的正切，弧还具有指定的半径。

@param p1 定义弧的第一个点。弧的起始角度是点 (p1, p2) 指定的线的正切。
@param p2 定义弧的第二个点。弧的起始角度是点 (p1, p2) 指定的线的正切。弧的结束角度是点 (p2, p3) 指定的线的正切。
@param p3 定义弧的第三个点。弧的结束角度是点 (p2, p3) 指定的线的正切。
@param radius 弧的半径。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.geom.Arc2D.setAngleStart(double angSt)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此弧的起始角度设置为指定的 double 值。

@param angSt 弧的起始角度（以度数表示）。
@see #getAngleStart
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.geom.Arc2D.setAngleExtent(double angExt)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此弧的角跨越设置为指定的 double 值。

@param angExt 弧的角跨越（以度数表示）。
@see #getAngleExtent
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.Arc2D.setAngleStart(Point2D p)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此弧的起始角度设置为由指定点定义、相对于此弧中心的角度。弧的角跨越将保持不变。

@param p 定义起始角度的 <CODE>Point2D</CODE>。
@see #getAngleStart
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.Arc2D.setAngles(double x1, double y1, double x2, double y2)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用两组坐标设置此弧的起始角度和角跨越。第一组坐标用于确定相对于弧中心起始点的角度。第二组坐标用于确定相对于弧中心结束点的角度。弧始终是非空的，按逆时针方向以弧形从第一点延伸到第二点。

@param x1  弧起始点的 X 坐标。
@param y1  弧起始点的 Y 坐标。
@param x2  弧结束点的 X 坐标。
@param y2  弧结束点的 Y 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.Arc2D.setAngles(Point2D p1, Point2D p2)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用两个点设置此弧的起始角度和角跨越。第一点用于确定相对于弧中心起始点的角度。第二点用于确定相对于弧中心结束点的角度。弧始终是非空的，按逆时针方向以弧形从第一点延伸到第二点。

@param p1 定义弧起始点的 <CODE>Point2D</CODE>。
@param p2 定义弧结束点的 <CODE>Point2D</CODE>。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.Arc2D.setArcType(int type)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此弧的闭合类型设置为指定值：<CODE>OPEN</CODE>、<CODE>CHORD</CODE> 或 <CODE>PIE</CODE>。

@param type 表示此弧闭合类型的整数常量：{@link #OPEN}、{@link #CHORD} 或 {@link #PIE}。

@throws IllegalArgumentException 如果 <code>type</code> 不是 0、1 或 2。
@see #getArcType
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.Arc2D.setFrame(double x, double y, double w, double h)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
 注意，该弧<a href="Arc2D.html#inscribes">部分内切于</a>此 {@code RectangularShape} 的窗体矩形。

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Rectangle2D java.awt.geom.Arc2D.getBounds2D()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回弧的高精度窗体矩形。该窗体矩形仅包含此 <code>Arc2D</code> 的一部分，即起始角度和结束角度之间的部分；如果此 <code>Arc2D</code> 的闭合类型为 <code>PIE</code>，则还包含扇形边。
 <p>
此方法不同于 {@link RectangularShape#getBounds() getBounds}，<code>getBounds</code> 方法仅返回此 <code>Arc2D</code> 封闭椭圆的边界，而不考虑此 <code>Arc2D</code> 的起始角度和结束角度。
 
@return 表示弧的窗体矩形的 <CODE>Rectangle2D</CODE>。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract java.awt.geom.Rectangle2D java.awt.geom.Arc2D.makeBounds(double x, double y, double w, double h)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个适当精度的 <code>Rectangle2D</code>，以保存为此弧的窗体矩形计算出的参数。
 
@param x 窗体矩形左上角的 X 坐标。
@param y 窗体矩形左上角的 Y 坐标。
@param w 窗体矩形的宽度。
@param h 窗体矩形的高度。
@return 作为此弧窗体矩形的 <code>Rectangle2D</code>。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Arc2D.containsAngle(double angle)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定指定的角度是否位于弧的角跨越内。

@param angle 要测试的角度。

@return 如果弧包含角度，则返回 <CODE>true</CODE>；如果弧不包含角度，则返回 <CODE>false</CODE>。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Arc2D.contains(double x, double y)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定指定的点是否位于弧的边界内。

@param x 要测试的点的 X 坐标。
@param y 要测试的点的 Y 坐标。

@return 如果点位于弧的边界内，则返回 <CODE>true</CODE>；如果点位于弧的边界外，则返回 <CODE>false</CODE>。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Arc2D.intersects(double x, double y, double w, double h)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定弧的内部与指定矩形的内部是否相交。

@param x 矩形左上角的 X 坐标。
@param y 矩形左上角的 Y 坐标。
@param w 矩形的宽度。
@param h 矩形的高度。
@since 1.2

@return 如果弧与矩形相交，则返回 <CODE>true</CODE>；如果弧与矩形不相交，则返回 <CODE>false</CODE>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Arc2D.contains(double x, double y, double w, double h)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定弧的内部是否完全包含指定的矩形。

@param x 矩形左上角的 X 坐标。
@param y 矩形左上角的 Y 坐标。
@param w 矩形的宽度。
@param h 矩形的高度。
@since 1.2

@return 如果弧包含矩形，则返回 <CODE>true</CODE>；如果弧不包含矩形，则返回 <CODE>false</CODE>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Arc2D.contains(Rectangle2D r)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定弧的内部是否完全包含指定的矩形。

@param r 要测试的 <CODE>Rectangle2D</CODE>。

@return 如果弧包含矩形，则返回 <CODE>true</CODE>；如果弧不包含矩形，则返回 <CODE>false</CODE>。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.PathIterator java.awt.geom.Arc2D.getPathIterator(AffineTransform at)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回定义弧边界的迭代对象。此迭代器是多线程安全的。<code>Arc2D</code> 保证对弧几何形状的修改不影响该几何形状任何进行中的迭代。

@param at 可选的 <CODE>AffineTransform</CODE>，应用于迭代中返回的坐标；如果需要未转换的坐标，则为 null。

@return 定义弧边界的 <CODE>PathIterator</CODE>。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.geom.Arc2D.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回此 <code>Arc2D</code> 的哈希码。
 @return 此 <code>Arc2D</code> 的哈希码。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Arc2D.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 确定指定的 <code>Object</code> 是否与此 <code>Arc2D</code> 相等。如果该对象是一个 <code>Arc2D</code> 实例，并且其位置、大小、弧度跨越和类型与此 <code>Arc2D</code> 相同，则指定的 <code>Object</code> 与此 <code>Arc2D</code> 相等。
 @param obj  要与此 <code>Arc2D</code> 进行比较的 <code>Object</code>。
 @return  如果 <code>obj</code> 是一个 <code>Arc2D</code> 实例并且具有相同的值，则返回 <code>true</code>；否则返回 <code>false</code>。
 @since 1.6

<!-- END DATA -->
