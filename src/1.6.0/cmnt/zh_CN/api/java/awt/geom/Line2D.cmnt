<!-- BEGIN KEY -->
public abstract class java.awt.geom.Line2D extends java.lang.Object implements java.awt.Shape, java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Line2D</code> 表示 {@code (x,y)} 坐标空间中的线段。像 Java 2D API 的所有类一样，此类使用称为<i>用户空间</i> 的默认坐标系，其中 Y 轴的值向下增大，X 轴的值向右增大。有关用户空间坐标系的更多信息，请参阅 Java 2D Programmer's Guide 中的 <a href="http://java.sun.com/j2se/1.3/docs/guide/2d/spec/j2d-intro.fm2.html#61857">Coordinate Systems</a> 部分。
 <p>
此类是所有存储 2D 线段的对象的惟一抽象超类。坐标的实际存储表示形式由子类决定。

@version 	1.31, 02/24/06
@author	Jim Graham
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.geom.Line2D()
<!-- END KEY -->
<!-- BEGIN DATA -->
这是一个无法直接实例化的抽象类。特定于类型的实现子类可用于实例化，并提供用于存储满足以下各种存取方法所需信息的多种格式。

@see java.awt.geom.Line2D.Float
@see java.awt.geom.Line2D.Double
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.Line2D.getX1()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回起始点的 X 坐标（以 double 精度表示）。
@return 此 {@code Line2D} 对象起始点的 X 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.Line2D.getY1()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回起始点的 Y 坐标（以 double 精度表示）。
@return 此 {@code Line2D} 对象起始点的 Y 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.geom.Point2D java.awt.geom.Line2D.getP1()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Line2D</code> 的起始 <code>Point2D</code>。
@return 此 <code>Line2D</code> 的起始 <code>Point2D</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.Line2D.getX2()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回结束点的 X 坐标（以 double 精度表示）。
@return 此 {@code Line2D} 对象结束点的 X 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.Line2D.getY2()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回结束点的 Y 坐标（以 double 精度表示）。
@return 此 {@code Line2D} 对象结束点的 Y 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.geom.Point2D java.awt.geom.Line2D.getP2()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Line2D</code> 的结束 <code>Point2D</code>。
@return 此 <code>Line2D</code> 的结束 <code>Point2D</code>。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.geom.Line2D.setLine(double x1, double y1, double x2, double y2)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Line2D</code> 的端点位置设置为指定的 double 坐标。
@param x1 起始点的 X 坐标
@param y1 起始点的 Y 坐标
@param x2 结束点的 X 坐标
@param y2 结束点的 Y 坐标
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.Line2D.setLine(Point2D p1, Point2D p2)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Line2D</code> 端点的位置设置为指定的 <code>Point2D</code> 坐标。
@param p1 线段的起始 <code>Point2D</code>
@param p2 线段的结束 <code>Point2D</code>
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.Line2D.setLine(Line2D l)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Line2D</code> 端点的位置设置为与指定 <code>Line2D</code> 的这些端点相同。
@param l 指定的 <code>Line2D</code>
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.awt.geom.Line2D.relativeCCW(double x1, double y1, double x2, double y2, double px, double py)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个指示符，指示指定点 {@code (px,py)} 相对于从 {@code (x1,y1)} 到 {@code (x2,y2)} 的线段的位置。返回值可以为 1、-1 或 0，指示为了指向指定点 {@code (px,py)}，指定的线段必须绕其第一个端点 {@code (x1,y1)} 旋转的方向。
<p>返回值 1 指示线段转动的方向是从 X 正半轴到 Y 负半轴。在 Java 2D 使用的默认坐标系中，此方向为逆时针方向。  
<p>返回值 -1 指示线段转动的方向是从 X 正半轴到 Y 正半轴。在默认的坐标系中，此方向为顺时针方向。
<p>返回值 0 指示点恰好位于线段上。注意，指示符 0 是非常罕见的，并且因浮点舍入问题而不可用于确定共线性。 
<p>如果点与线段共线，但是不在端点之间，则点位于“{@code (x1,y1)} 之外”时值为 -1，点位于“{@code (x2,y2)} 之外”时值为 1。
@param x1 指定线段起始点的 X 坐标
@param y1 指定线段起始点的 Y 坐标
@param x2 指定线段结束点的 X 坐标
@param y2 指定线段结束点的 Y 坐标
@param px 将与指定线段比较的指定点的 X 坐标
@param py 将与指定线段比较的指定点的 Y 坐标
@return 一个整数，指示第三个指定坐标相对于前两个指定坐标所形成线段的位置。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.geom.Line2D.relativeCCW(double px, double py)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个指示符，指示指定点 {@code (px,py)} 相对于此线段的位置。关于返回值的解释，请参见 {@link #relativeCCW(double, double, double, double, double, double)} 的方法注释。
@param px 将与此 <code>Line2D</code> 比较的指定点的 X 坐标
@param py 将与此 <code>Line2D</code> 比较的指定点的 Y 坐标
@return 一个整数，指示指定坐标相对于此 <code>Line2D</code> 的位置
@see #relativeCCW(double, double, double, double, double, double)
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.geom.Line2D.relativeCCW(Point2D p)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个指示符，指示指定 <code>Point2D</code> 相对于此线段的位置。关于返回值的解释，请参见 {@link #relativeCCW(double, double, double, double, double, double)} 的方法注释。
@param p 将与此 <code>Line2D</code> 比较的指定 <code>Point2D</code>
@return 一个整数，指示指定 <code>Point2D</code> 相对于此 <code>Line2D</code> 的位置
@see #relativeCCW(double, double, double, double, double, double)
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.awt.geom.Line2D.linesIntersect(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试从 {@code (x1,y1)} 到 {@code (x2,y2)} 的线段是否与从 {@code (x3,y3)} 到 {@code (x4,y4)} 的线段相交。
@param x1 第一个指定线段起始点的 X 坐标
@param y1 第一个指定线段起始点的 Y 坐标
@param x2 第一个指定线段结束点的 X 坐标
@param y2 第一个指定线段结束点的 Y 坐标
@param x3 第二个指定线段起始点的 X 坐标
@param y3 第二个指定线段起始点的 Y 坐标
@param x4 第二个指定线段结束点的 X 坐标
@param y4 第二个指定线段结束点的 Y 坐标
@return 如果第一个指定线段与第二个指定线段彼此相交，则返回 <code>true</code>；否则返回 <code>false</code>。  
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Line2D.intersectsLine(double x1, double y1, double x2, double y2)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试从 {@code (x1,y1)} 到 {@code (x2,y2)} 的线段是否与此线段相交。
@param x1 指定线段起始点的 X 坐标
@param y1 指定线段起始点的 Y 坐标
@param x2 指定线段结束点的 X 坐标
@param y2 指定线段结束点的 Y 坐标
@return 如果此线段与指定线段彼此相交，则返回 <code>true</code>；否则返回 <code>false</code>。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Line2D.intersectsLine(Line2D l)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试指定的线段是否与此线段相交。
@param l 指定的 <code>Line2D</code>
@return 如果此线段与指定线段彼此相交，则返回 <code>true</code>；否则返回 <code>false</code>。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.awt.geom.Line2D.ptSegDistSq(double x1, double y1, double x2, double y2, double px, double py)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从点到线段的距离的平方。测量的距离是从指定点到位于指定端点间的最近点之间的距离。如果指定点与线段相交于端点之间，则此方法返回 0.0。
@param x1 指定线段起始点的 X 坐标
@param y1 指定线段起始点的 Y 坐标
@param x2 指定线段结束点的 X 坐标
@param y2 指定线段结束点的 Y 坐标
@param px 将对照指定线段进行测量的指定点的 X 坐标
@param py 将对照指定线段进行测量的指定点的 Y 坐标
@return 一个 double 值，它是从指定点到指定线段的距离平方。
@see #ptLineDistSq(double, double, double, double, double, double)
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.awt.geom.Line2D.ptSegDist(double x1, double y1, double x2, double y2, double px, double py)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从点到线段的距离。测量的距离是从指定点到位于指定端点间的最近点之间的距离。如果指定点与线段相交于端点之间，则此方法返回 0.0。
@param x1 指定线段起始点的 X 坐标
@param y1 指定线段起始点的 Y 坐标
@param x2 指定线段结束点的 X 坐标
@param y2 指定线段结束点的 Y 坐标
@param px 将对照指定线段进行测量的指定点的 X 坐标
@param py 将对照指定线段进行测量的指定点的 Y 坐标
@return 一个 double 值，它是从指定点到指定线段的距离。
@see #ptLineDist(double, double, double, double, double, double)
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.Line2D.ptSegDistSq(double px, double py)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从点到此线段的距离的平方。测量的距离是从指定点到位于当前线端点间的最近点之间的距离。如果指定点与线段相交于端点之间，则此方法返回 0.0。
@param px 将对照此线段进行测量的指定点的 X 坐标
@param py 将对照此线段进行测量的指定点的 Y 坐标
@return 一个 double 值，它是从指定点到当前线段的距离平方。
@see #ptLineDistSq(double, double)
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.Line2D.ptSegDistSq(Point2D pt)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从 <code>Point2D</code> 到此线段的距离的平方。测量的距离是从指定点到位于当前线端点间的最近点之间的距离。如果指定点与线段相交于端点之间，则此方法返回 0.0。
@param pt 将对照此线段进行测量的指定 <code>Point2D</code>。
@return 一个 double 值，它是从指定 <code>Point2D</code> 到当前线段的距离平方。
@see #ptLineDistSq(Point2D)
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.Line2D.ptSegDist(double px, double py)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从点到此线段的距离。测量的距离是从指定点到位于当前线端点间的最近点之间的距离。如果指定点与线段相交于端点之间，则此方法返回 0.0。
@param px 将对照此线段进行测量的指定点的 X 坐标
@param py 将对照此线段进行测量的指定点的 Y 坐标
@return 一个 double 值，它是从指定点到当前线段的距离。
@see #ptLineDist(double, double)
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.Line2D.ptSegDist(Point2D pt)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从 <code>Point2D</code> 到此线段的距离的平方。测量的距离是从指定点到位于当前线端点间的最近点之间的距离。如果指定点与线段相交于端点之间，则此方法返回 0.0。
@param pt 将对照此线段进行测量的指定 <code>Point2D</code>
@return 一个 double 值，它是从指定 <code>Point2D</code> 到当前线段的距离。
@see #ptLineDist(Point2D)
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.awt.geom.Line2D.ptLineDistSq(double x1, double y1, double x2, double y2, double px, double py)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从点到线的距离的平方。测量的距离是指定点与位于指定坐标定义的无限延长线上的最近点之间的距离。如果指定点与线相交，则此方法返回 0.0。
@param x1 指定线段起始点的 X 坐标
@param y1 指定线段起始点的 Y 坐标
@param x2 指定线段结束点的 X 坐标
@param y2 指定线段结束点的 Y 坐标
@param px 将对照指定线段进行测量的指定点的 X 坐标
@param py 将对照指定线段进行测量的指定点的 Y 坐标
@return 一个 double 值，它是从指定点到指定线段的距离的平方。
@see #ptSegDistSq(double, double, double, double, double, double)
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.awt.geom.Line2D.ptLineDist(double x1, double y1, double x2, double y2, double px, double py)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从点到线的距离。测量的距离是指定点与位于指定坐标定义的无限延长线上的最近点之间的距离。如果指定点与线相交，则此方法返回 0.0。
@param x1 指定线段起始点的 X 坐标
@param y1 指定线段起始点的 Y 坐标
@param x2 指定线段结束点的 X 坐标
@param y2 指定线段结束点的 Y 坐标
@param px 将对照指定线段进行测量的指定点的 X 坐标
@param py 将对照指定线段进行测量的指定点的 Y 坐标
@return 一个 double 值，它是从指定点到指定线段的距离。
@see #ptSegDist(double, double, double, double, double, double)
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.Line2D.ptLineDistSq(double px, double py)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从点到此线的距离的平方。测量的距离是指定点与位于此 <code>Line2D</code> 定义的无限延长线上的最近点之间的距离。如果指定点与线相交，则此方法返回 0.0。
@param px 将对照此线进行测量的指定点的 X 坐标
@param py 将对照此线进行测量的指定点的 Y 坐标
@return 一个 double 值，它是从指定点到当前线的距离平方。
@see #ptSegDistSq(double, double)
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.Line2D.ptLineDistSq(Point2D pt)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从指定 <code>Point2D</code> 到此线的距离的平方。测量的距离是指定点与位于此 <code>Line2D</code> 定义的无限延长线上的最近点之间的距离。如果指定点与线相交，则此方法返回 0.0。
@param pt 将对照此线进行测量的指定 <code>Point2D</code>
@return 一个 double 值，它是从指定 <code>Point2D</code> 到当前线的距离平方。
@see #ptSegDistSq(Point2D)
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.Line2D.ptLineDist(double px, double py)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从点到此线的距离。测量的距离是指定点与位于此 <code>Line2D</code> 定义的无限延长线上的最近点之间的距离。如果指定点与线相交，则此方法返回 0.0。
@param px 将对照此线进行测量的指定点的 X 坐标
@param py 将对照此线进行测量的指定点的 Y 坐标
@return 一个 double 值，它是从指定点到当前线的距离。
@see #ptSegDist(double, double)
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.Line2D.ptLineDist(Point2D pt)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从 <code>Point2D</code> 到此线的距离。测量的距离是指定点与位于此 <code>Line2D</code> 定义的无限延长线上的最近点之间的距离。如果指定点与线相交，则此方法返回 0.0。
@param pt 要测量的指定 <code>Point2D</code>
@return 一个 double 值，它是从指定 <code>Point2D</code> 到当前线的距离。
@see #ptSegDist(Point2D)
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Line2D.contains(double x, double y)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试指定坐标是否在此 <code>Line2D</code> 对象的边界内。此方法需要实现 {@link Shape} 接口，但是对于 <code>Line2D</code> 对象来说，它始终返回 <code>false</code>，因为线不包含任何区域。
@param x 将被测试的指定点的 X 坐标
@param y 将被测试的指定点的 Y 坐标
@return  <code>false</code>，因为 <code>Line2D</code> 不包含任何区域。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Line2D.contains(Point2D p)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试给定 <code>Point2D</code> 是否在此 <code>Line2D</code> 的边界内。此方法需要实现 {@link Shape} 接口，但是对于 <code>Line2D</code> 对象来说，它始终返回 <code>false</code>，因为线不包含任何区域。
@param p 要测试的指定 <code>Point2D</code>
@return <code>false</code>，因为 <code>Line2D</code> 不包含任何区域。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Line2D.intersects(double x, double y, double w, double h)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Line2D.intersects(Rectangle2D r)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Line2D.contains(double x, double y, double w, double h)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试此 <code>Line2D</code> 的内部是否完全包含指定矩形坐标集。此方法需要实现 <code>Shape</code> 接口，但是对于 <code>Line2D</code> 对象来说，它始终返回 false，因为线不包含任何区域。
@param x 指定矩形区域的左上角的 X 坐标
@param y 指定矩形区域的左上角的 Y 坐标
@param w 指定矩形区域的宽度
@param h 指定矩形区域的高度
@return  <code>false</code>，因为 <code>Line2D</code> 不包含任何区域。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Line2D.contains(Rectangle2D r)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试此 <code>Line2D</code> 内部是否完全包含指定的 <code>Rectangle2D</code>。此方法需要实现 <code>Shape</code> 接口，但是对于 <code>Line2D</code> 对象来说，它始终返回 <code>false</code>，因为线不包含任何区域。
@param r 要测试的指定 <code>Rectangle2D</code>
@return <code>false</code>，因为 <code>Line2D</code> 不包含任何区域。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle java.awt.geom.Line2D.getBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.PathIterator java.awt.geom.Line2D.getPathIterator(AffineTransform at)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回定义此 <code>Line2D</code> 边界的迭代对象。此类的迭代器不是多线程安全的，这意味着此 <code>Line2D</code> 类不保证对此 <code>Line2D</code> 对象几何形状所作的修改不会影响该几何形状中正在进行的迭代。
@param at 指定的 {@link AffineTransform}
@return 定义此 <code>Line2D</code> 的边界的 {@link PathIterator}。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.PathIterator java.awt.geom.Line2D.getPathIterator(AffineTransform at, double flatness)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回定义此变平的 <code>Line2D</code> 边界的迭代对象。此类的迭代器不是多线程安全的，这意味着此 <code>Line2D</code> 类不保证对此 <code>Line2D</code> 对象几何形状所作的修改不会影响该几何形状中正在进行的迭代。
@param at 指定的 <code>AffineTransform</code>
@param flatness 在由连接端点的直线取代细分曲线之前，给定曲线的控制点可以从共线变化的最大量。因为 <code>Line2D</code> 对象始终是平的，所以此参数会被忽略。
@return 定义变平的 <code>Line2D</code> 边界的 <code>PathIterator</code>
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.geom.Line2D.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个与此对象具有相同类的新对象。

@return 此实例的一个副本。
@exception  OutOfMemoryError  如果没有足够的内存。
@see        java.lang.Cloneable
@since      1.2

<!-- END DATA -->
