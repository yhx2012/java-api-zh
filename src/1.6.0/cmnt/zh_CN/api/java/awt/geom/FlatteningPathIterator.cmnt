<!-- BEGIN KEY -->
public class java.awt.geom.FlatteningPathIterator extends java.lang.Object implements java.awt.geom.PathIterator
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>FlatteningPathIterator</code> 类返回另一个 {@link PathIterator} 对象的变平视图。其他 {@link java.awt.Shape Shape} 类可以使用此类为其路径提供变平行为，无需自己进行插值计算。

@version 1.6 06/29/98
@author Jim Graham

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.FlatteningPathIterator(PathIterator src, double flatness)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个在路径上迭代时能使路径变平的新 <code>FlatteningPathIterator</code> 对象。迭代器不会将从源迭代器读取的任何曲线细分至 10 级以上，10 级以上的细分超过了每曲线 1024 个线段这一最大值。
@param src 要在其上迭代的未变平初始路径
@param flatness 控制点与变平曲线间允许的最大距离

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.FlatteningPathIterator(PathIterator src, double flatness, int limit)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个在路径上迭代时能使路径变平的新 <code>FlatteningPathIterator</code> 对象。可以使用 <code>limit</code> 参数控制迭代器在不依靠 <code>flatness</code> 参数进行测量的情况下假定曲线已经足够平之前，可以进行的最大递归细分次数。因此，变平迭代永远不会为每个曲线生成多于最大值 <code>(2^limit)</code> 的线段数。
@param src 要在其上迭代的未变平初始路径
@param flatness 控制点到变平曲线间允许的最大距离
@param limit 允许对任何曲线段进行递归细分的最大次数
@exception <code>IllegalArgumentException</code> 如果 <code>flatness</code> 或 <code>limit</code> 小于零。

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.FlatteningPathIterator.getFlatness()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此迭代器的平面度。
@return 此 <code>FlatteningPathIterator</code> 的平面度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.geom.FlatteningPathIterator.getRecursionLimit()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此迭代器的递归限制。
@return 此 <code>FlatteningPathIterator</code> 的递归限制。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.geom.FlatteningPathIterator.getWindingRule()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于确定路径迭代的旋绕规则。
@return 要在其上进行迭代的未变平初始路径的旋绕规则。
@see PathIterator#WIND_EVEN_ODD
@see PathIterator#WIND_NON_ZERO

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.FlatteningPathIterator.isDone()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试迭代是否完成。
@return 如果已经读取了所有的段，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.FlatteningPathIterator.next()
<!-- END KEY -->
<!-- BEGIN DATA -->
只要最初的遍历方向上存在多个点，就沿该方向将迭代器移动到下一个路径段。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.geom.FlatteningPathIterator.currentSegment(float[] coords)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用迭代返回当前路径段的坐标和类型。返回值就是路径段类型：SEG_MOVETO、SEG_LINETO 或 SEG_CLOSE。必须传入长度为 6 的 float 数组，该数组可用于存储点的坐标。每个点都存储为一对 float x、y 坐标。SEG_MOVETO 和 SEG_LINETO 类型均返回一个点，而 SEG_CLOSE 不返回点。
@param coords 保存从此方法返回数据的数组
@return 当前路径段的路径段类型。
@exception <code>NoSuchElementException</code> 如果在要返回的变平路径中不存在多个元素。
@see PathIterator#SEG_MOVETO
@see PathIterator#SEG_LINETO
@see PathIterator#SEG_CLOSE

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.geom.FlatteningPathIterator.currentSegment(double[] coords)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用迭代返回当前路径段的坐标和类型。返回值就是路径段类型：SEG_MOVETO、SEG_LINETO 或 SEG_CLOSE。必须传入长度为 6 的 double 数组，该数组可用于存储点的坐标。每个点都存储为一对 double x、y 坐标。SEG_MOVETO 和 SEG_LINETO 类型均返回一个点，而 SEG_CLOSE 不返回点。
@param coords 保存从此方法返回数据的数组
@return 当前路径段的路径段类型。
@exception <code>NoSuchElementException</code> 如果在要返回的变平路径中不存在多个元素。
@see PathIterator#SEG_MOVETO
@see PathIterator#SEG_LINETO
@see PathIterator#SEG_CLOSE

<!-- END DATA -->
