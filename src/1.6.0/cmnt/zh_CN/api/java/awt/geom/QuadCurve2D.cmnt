<!-- BEGIN KEY -->
public abstract class java.awt.geom.QuadCurve2D extends java.lang.Object implements java.awt.Shape, java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>QuadCurve2D</code> 类定义 {@code (x,y)} 坐标空间内的二次参数曲线段。
 <p>
此类是所有存储 2D 二次曲线段的对象的惟一抽象超类。坐标的实际存储表示形式由子类决定。

 @version 	1.34, 04/17/06
 @author	Jim Graham
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.geom.QuadCurve2D()
<!-- END KEY -->
<!-- BEGIN DATA -->
这是一个不可直接实例化的抽象类。特定于类型的实现子类可用于实例化，并提供用于存储满足以下各种存取方法所需信息的多种格式。

@see java.awt.geom.QuadCurve2D.Float
@see java.awt.geom.QuadCurve2D.Double
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.QuadCurve2D.getX1()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 精度返回起始点的 X 坐标。
@return 起始点的 X 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.QuadCurve2D.getY1()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 精度返回起始点的 Y 坐标。
@return 起始点的 Y 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.geom.Point2D java.awt.geom.QuadCurve2D.getP1()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回起始点。
@return 作为此 <code>QuadCurve2D</code> 起始点的 <code>Point2D</code>。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.QuadCurve2D.getCtrlX()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 精度返回控制点的 X 坐标。
@return 控制点的 X 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.QuadCurve2D.getCtrlY()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 精度返回控制点的 Y 坐标。
@return 控制点的 Y 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.geom.Point2D java.awt.geom.QuadCurve2D.getCtrlPt()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回控制点。
@return 作为此 <code>Point2D</code> 控制点的 <code>Point2D</code>。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.QuadCurve2D.getX2()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 精度返回结束点的 X 坐标。
@return 结束点的 X 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.QuadCurve2D.getY2()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 精度返回结束点的 Y 坐标。
@return 结束点的 Y 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.geom.Point2D java.awt.geom.QuadCurve2D.getP2()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回结束点。
@return 作为 <code>Point2D</code> 结束点的 <code>Point</code> 对象。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.geom.QuadCurve2D.setCurve(double x1, double y1, double ctrlx, double ctrly, double x2, double y2)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此曲线端点和控制点的位置设置为指定的 <code>double</code> 坐标。
@param x1 起始点的 X 坐标
@param y1 起始点的 Y 坐标
@param ctrlx 控制点的 X 坐标
@param ctrly 控制点的 Y 坐标
@param x2 结束点的 X 坐标
@param y2 结束点的 Y 坐标
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.QuadCurve2D.setCurve(double[] coords, int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>QuadCurve2D</code> 端点和控制点的位置设置为指定数组中指定偏移量处的 <code>double</code> 坐标。
@param coords 包含坐标值的数组
@param offset 数组中的索引，从此处开始获取坐标值并将其赋给此 <code>QuadCurve2D</code>
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.QuadCurve2D.setCurve(Point2D p1, Point2D cp, Point2D p2)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>QuadCurve2D</code> 端点和控制点的位置设置为指定的 <code>Point2D</code> 坐标。
@param p1 起始点
@param cp 控制点
@param p2 结束点
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.QuadCurve2D.setCurve(java.awt.geom.Point2D[] pts, int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>QuadCurve2D</code> 端点和控制点的位置设置为指定数组中指定偏移量处 <code>Point2D</code> 对象的坐标。
@param pts 包含定义坐标值的 <code>Point2D</code> 的数组
@param offset <code>pts</code> 中的索引，从此处开始获取坐标值并将其赋给此 <code>QuadCurve2D</code>
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.QuadCurve2D.setCurve(QuadCurve2D c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>QuadCurve2D</code> 端点和控制点的位置设置为与指定的 <code>QuadCurve2D</code> 相同。
@param c 指定的 <code>QuadCurve2D</code>
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.awt.geom.QuadCurve2D.getFlatnessSq(double x1, double y1, double ctrlx, double ctrly, double x2, double y2)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由指示控制点指定的二次曲线平面度（或者说从控制点到连接端点的线的最大距离）的平方。
@param x1 起始点的 X 坐标
@param y1 起始点的 Y 坐标
@param ctrlx 控制点的 X 坐标
@param ctrly 控制点的 Y 坐标
@param x2 结束点的 X 坐标
@param y2 结束点的 Y 坐标
@return 由指定坐标定义的二次曲线平面度的平方。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.awt.geom.QuadCurve2D.getFlatness(double x1, double y1, double ctrlx, double ctrly, double x2, double y2)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由指示控制点指定的二次曲线平面度（或者说从控制点到连接端点的线的最大距离）。

@param x1 起始点的 X 坐标
@param y1 起始点的 Y 坐标
@param ctrlx 控制点的 X 坐标
@param ctrly 控制点的 Y 坐标
@param x2 结束点的 X 坐标
@param y2 结束点的 Y 坐标
@return 由指定坐标定义的二次曲线平面度 
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.awt.geom.QuadCurve2D.getFlatnessSq(double[] coords, int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由控制点（存储在指示数组中的指示索引处）指定的二次曲线平面度（或者说从控制点到连接端点的线的最大距离）的平方。

@param coords 包含坐标值的数组
@param offset <code>coords</code> 中的索引，从此处开始从数组中获取值
@return 由指定数组指定索引处的值定义的二次曲线平面度。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.awt.geom.QuadCurve2D.getFlatness(double[] coords, int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由控制点（存储在指示数组中的指示索引处）指定的二次曲线平面度（或者说从控制点到连接端点的线的最大距离）。
@param coords 包含坐标值的数组
@param offset <code>coords</code> 中的索引，从此处开始获取坐标值
@return 由指定数组中指定偏移量定义的二次曲线平面度。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.QuadCurve2D.getFlatnessSq()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>QuadCurve2D</code> 的平面度（或者说从控制点到连接端点的线的最大距离）的平方。
@return 此 <code>QuadCurve2D</code> 平面度的平方。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.QuadCurve2D.getFlatness()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>QuadCurve2D</code> 的平面度（或者说从控制点到连接端点的线的最大距离）。
@return 此 <code>QuadCurve2D</code> 的平面度。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.QuadCurve2D.subdivide(QuadCurve2D left, QuadCurve2D right)
<!-- END KEY -->
<!-- BEGIN DATA -->
细分此 <code>QuadCurve2D</code> 并将得到的两个细分曲线存储到 <code>left</code> 和 <code>right</code> 曲线参数中。<code>left</code> 和 <code>right</code> 两个对象的一个（或两个）可以与 <code>QuadCurve2D</code> 对象相同，也可以为 <code>null</code>。
@param left 用于存储左边一半（或第一半）细分曲线的 <code>QuadCurve2D</code> 对象
@param right 用于存储右边一半（或第二半）细分曲线的 <code>QuadCurve2D</code> 对象
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.awt.geom.QuadCurve2D.subdivide(QuadCurve2D src, QuadCurve2D left, QuadCurve2D right)
<!-- END KEY -->
<!-- BEGIN DATA -->
细分由 <code>src</code> 参数指定的二次曲线并将得到的两个细分曲线存储到 <code>left</code> 和 <code>right</code> 曲线参数中。<code>left</code> 和 <code>right</code> 两个对象的任何一个或两者都可以与 <code>src</code> 对象相同，也可以为 <code>null</code>。
@param src 要细分的二次曲线
@param left 用于存储左边一半（或第一半）细分曲线的 <code>QuadCurve2D</code> 对象
@param right 用于存储右边一半（或第二半）细分曲线的 <code>QuadCurve2D</code> 对象
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.awt.geom.QuadCurve2D.subdivide(double[] src, int srcoff, double[] left, int leftoff, double[] right, int rightoff)
<!-- END KEY -->
<!-- BEGIN DATA -->
细分由存储在 <code>src</code> 数组 <code>srcoff</code> 到 (<code>srcoff</code> + 5) 索引处的坐标指定的二次曲线，并将得到的两个细分曲线存储到所得数组的相应索引中。<code>left</code> 和 <code>right</code> 数组中的一个（或两个）可以为 <code>null</code>，也可以为到与 <code>src</code> 相同的数组和偏移量的引用。注意，第一个细分曲线的最后一点就是第二个细分曲线的第一点。因此，可以为 <code>left</code> 和 <code>right</code> 传递相同的数组，并使用偏移量（如 <code>rightoff</code> 等于 (<code>leftoff</code> + 4），以避免为此公共点分配额外的存储区。
@param src 保存源曲线坐标的数组
@param srcoff 6 个源坐标的开头在数组中的偏移量
@param left 存储第一半细分曲线坐标的数组
@param leftoff 6 个左坐标的开头在数组中的偏移量
@param right 存储第二半细分曲线坐标的数组
@param rightoff 6 个右坐标的开头在数组中的偏移量
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.awt.geom.QuadCurve2D.solveQuadratic(double[] eqn)
<!-- END KEY -->
<!-- BEGIN DATA -->
解系数位于 <code>eqn</code> 数组中的二次曲线，并将非复数的根放回该数组，同时返回根数。用以下方程表示二次曲线的解：
 <pre>
     eqn = {C, B, A};
     ax^2 + bx + c = 0
 </pre>
返回值 <code>-1</code> 用于区分常数方程（可以始终为 0 或永远不为 0）与不包含任何零的方程。
@param eqn 包含二次曲线系数的数组
@return 根数；如果方程是常数方程，则返回 <code>-1</code>
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.awt.geom.QuadCurve2D.solveQuadratic(double[] eqn, double[] res)
<!-- END KEY -->
<!-- BEGIN DATA -->
解系数位于 <code>eqn</code> 数组中的二次曲线，并将非复数的根放入 <code>res</code> 数组，同时返回根数。用以下方程表示二次曲线的解：
 <pre>
     eqn = {C, B, A};
     ax^2 + bx + c = 0
 </pre>
返回值 <code>-1</code> 用于区分常数方程（可以始终为 0 或永远不为 0）与不包含任何零的方程。
@param eqn 用于解二次曲线方程的指定系数数组
@param res 包含求解二次曲线方程所得非复数根的数组
@return 根数；如果方程是常数方程，则返回 <code>-1</code>。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.QuadCurve2D.contains(double x, double y)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.QuadCurve2D.contains(Point2D p)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.QuadCurve2D.intersects(double x, double y, double w, double h)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.QuadCurve2D.intersects(Rectangle2D r)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.QuadCurve2D.contains(double x, double y, double w, double h)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.QuadCurve2D.contains(Rectangle2D r)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle java.awt.geom.QuadCurve2D.getBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.PathIterator java.awt.geom.QuadCurve2D.getPathIterator(AffineTransform at)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回定义此 <code>QuadCurve2D</code> 的形状边界的迭代对象。此类的迭代器不是多线程安全的，这意味着此 <code>QuadCurve2D</code> 类不保证对此 <code>QuadCurve2D</code> 对象几何形状所作的修改不会影响该几何形状中正在进行的迭代。
@param at 要应用于形状边界的可选的 {@link AffineTransform}
@return 定义形状边界的 {@link PathIterator} 对象。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.PathIterator java.awt.geom.QuadCurve2D.getPathIterator(AffineTransform at, double flatness)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回定义此 <code>QuadCurve2D</code> 的变平形状边界的迭代对象。此类的迭代器不是多线程安全的，这意味着此 <code>QuadCurve2D</code> 类不保证对此 <code>QuadCurve2D</code> 对象几何形状所作的修改不会影响该几何形状中正在进行的迭代。
@param at 要应用于形状边界的可选的 <code>AffineTransform</code>
@param flatness 在连接端点的直线取代曲线前，细分曲线的控制端点可以相对于连接此曲线端点的线的最大距离。
@return 定义变平的形状边界的 <code>PathIterator</code> 对象。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.geom.QuadCurve2D.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个与此对象具有相同类和相同内容的新对象。

@return 此实例的一个副本。
@exception  OutOfMemoryError 如果没有足够的内存。
@see        java.lang.Cloneable
@since      1.2

<!-- END DATA -->
