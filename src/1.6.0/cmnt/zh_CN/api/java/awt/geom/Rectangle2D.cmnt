<!-- BEGIN KEY -->
public abstract class java.awt.geom.Rectangle2D extends java.awt.geom.RectangularShape
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Rectangle2D</code> 类描述通过位置 {@code (x,y)} 和尺寸 {@code (w x h)} 定义的矩形。
 <p>
此类是所有存储 2D 矩形的对象的惟一抽象超类。坐标的实际存储表示形式由子类决定。

@version 	1.32, 02/24/06
@author	Jim Graham
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.geom.Rectangle2D.OUT_LEFT
<!-- END KEY -->
<!-- BEGIN DATA -->
指示点位于此 <code>Rectangle2D</code> 左边的位掩码。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.geom.Rectangle2D.OUT_TOP
<!-- END KEY -->
<!-- BEGIN DATA -->
指示点位于此 <code>Rectangle2D</code> 上方的位掩码。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.geom.Rectangle2D.OUT_RIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
指示点位于此 <code>Rectangle2D</code> 右边的位掩码。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.geom.Rectangle2D.OUT_BOTTOM
<!-- END KEY -->
<!-- BEGIN DATA -->
指示点位于此 <code>Rectangle2D</code> 下方的位掩码。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.geom.Rectangle2D()
<!-- END KEY -->
<!-- BEGIN DATA -->
这是一个不可直接实例化的抽象类。特定于类型的实现子类可用于实例化，并提供用于存储满足以下各种存取方法所需信息的多种格式。

@see java.awt.geom.Rectangle2D.Float
@see java.awt.geom.Rectangle2D.Double
@see java.awt.Rectangle
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.geom.Rectangle2D.setRect(double x, double y, double w, double h)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Rectangle2D</code> 的位置和大小设置为指定的 <code>double</code> 值。
@param x 此 <code>Rectangle2D</code> 左上角的 X 坐标
@param y 此 <code>Rectangle2D</code> 左上角的 Y 坐标
@param w 此 <code>Rectangle2D</code> 的宽度
@param h 此 <code>Rectangle2D</code> 的高度
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.Rectangle2D.setRect(Rectangle2D r)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Rectangle2D</code> 设置为与指定的 <code>Rectangle2D</code> 相同。
@param r 指定的 <code>Rectangle2D</code>
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Rectangle2D.intersectsLine(double x1, double y1, double x2, double y2)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试指定线段是否与此 <code>Rectangle2D</code> 的内部相交。
@param x1 指定线段起始点的 X 坐标
@param y1 指定线段起始点的 Y 坐标
@param x2 指定线段结束点的 X 坐标
@param y2 指定线段结束点的 Y 坐标
@return 如果指定线段与此 <code>Rectangle2D</code> 的内部相交，则返回 <code>true</code>；否则返回 <code>false</code>。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Rectangle2D.intersectsLine(Line2D l)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试指定的线段是否与此 <code>Rectangle2D</code> 的内部相交。
@param l 要测试是否与此 <code>Rectangle2D</code> 内部相交的指定 {@link Line2D}
@return 如果指定 <code>Line2D</code> 与此 <code>Rectangle2D</code> 的内部相交，则返回 <code>true</code>；否则返回 <code>false</code>。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.awt.geom.Rectangle2D.outcode(double x, double y)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定指定坐标相对于此 <code>Rectangle2D</code> 的位置。此方法计算适当掩码值的二进制或 (OR)，这些掩码值针对此 <code>Rectangle2D</code> 的每个边指示指定坐标是否在此 <code>Rectangle2D</code> 其余边缘的同一侧。
@param x 指定的 X 坐标
@param y 指定的 Y 坐标
@return 所有适当外码的逻辑或。
@see #OUT_LEFT
@see #OUT_TOP
@see #OUT_RIGHT
@see #OUT_BOTTOM
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.geom.Rectangle2D.outcode(Point2D p)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定指定 {@link Point2D} 相对于此 <code>Rectangle2D</code> 的位置。此方法计算适当掩码值的二进制或，这些值针对此 <code>Rectangle2D</code> 的每个边指示指定 <code>Point2D</code> 是否在此 <code>Rectangle2D</code> 其余边缘的同一侧。
@param p 指定的 <code>Point2D</code>
@return 所有适当外码的逻辑或。
@see #OUT_LEFT
@see #OUT_TOP
@see #OUT_RIGHT
@see #OUT_BOTTOM
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.Rectangle2D.setFrame(double x, double y, double w, double h)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Rectangle2D</code> 外部边界的位置和大小设置为指定矩形值。
@param x 此 <code>Rectangle2D</code> 左上角的 X 坐标
@param y 此 <code>Rectangle2D</code> 左上角的 Y 坐标
@param w 此 <code>Rectangle2D</code> 的宽度
@param h 此 <code>Rectangle2D</code> 的高度
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Rectangle2D java.awt.geom.Rectangle2D.getBounds2D()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Rectangle2D.contains(double x, double y)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Rectangle2D.intersects(double x, double y, double w, double h)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Rectangle2D.contains(double x, double y, double w, double h)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.geom.Rectangle2D java.awt.geom.Rectangle2D.createIntersection(Rectangle2D r)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个新的 <code>Rectangle2D</code> 对象，它表示此 <code>Rectangle2D</code> 与指定 <code>Rectangle2D</code> 的交集。
@param r 与此 <code>Rectangle2D</code> 相交的 <code>Rectangle2D</code>
@return 同时被指定 <code>Rectangle2D</code> 和此 <code>Rectangle2D</code> 包含的最大 <code>Rectangle2D</code>。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.awt.geom.Rectangle2D.intersect(Rectangle2D src1, Rectangle2D src2, Rectangle2D dest)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的一对源 <code>Rectangle2D</code> 对象相交，并将结果置于指定的目标 <code>Rectangle2D</code> 对象中。为了避免创建第三个 Rectangle2D 对象，将其中一个源矩形作为目标矩形也是可以的，但这样此方法将改写源矩形的初始点。
@param src1 要彼此相交的一对 <code>Rectangle2D</code> 对象中的第一个对象
@param src2 要彼此相交的一对 <code>Rectangle2D</code> 对象中的第二个对象
@param dest 保存 <code>src1</code> 与 <code>src2</code> 相交结果的 <code>Rectangle2D</code>
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.geom.Rectangle2D java.awt.geom.Rectangle2D.createUnion(Rectangle2D r)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个新的 <code>Rectangle2D</code> 对象，它表示此 <code>Rectangle2D</code> 与指定 <code>Rectangle2D</code> 的并集。
@param r 与此 <code>Rectangle2D</code> 合并的 <code>Rectangle2D</code>
@return 包含指定 <code>Rectangle2D</code> 和此 <code>Rectangle2D</code> 的最小 <code>Rectangle2D</code>。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.awt.geom.Rectangle2D.union(Rectangle2D src1, Rectangle2D src2, Rectangle2D dest)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一对源 <code>Rectangle2D</code> 对象合并，并将结果置于指定的目标 <code>Rectangle2D</code> 对象中。为了避免创建第三个 Rectangle2D 对象，将其中一个源矩形作为目标矩形也是可以的，但这样此方法将改写源矩形的初始点。
@param src1 要彼此合并的一对 <code>Rectangle2D</code> 对象中的第一个对象
@param src2 要彼此合并的 <code>Rectangle2D</code> 对象中的第二个对象
@param dest 保存 <code>src1</code> 与 <code>src2</code> 合并结果的 <code>Rectangle2D</code>
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.Rectangle2D.add(double newx, double newy)
<!-- END KEY -->
<!-- BEGIN DATA -->
将由 double 精度参数 <code>newx</code> 和 <code>newy</code> 指定的点添加到此 <code>Rectangle2D</code> 中。所得到的 <code>Rectangle2D</code> 是同时包含原始 <code>Rectangle2D</code> 和指定点的最小 <code>Rectangle2D</code>。
 <p>
在添加一个点后，以添加的点作为参数调用 <code>contains</code> 方法不一定返回 <code>true</code>。对于矩形的右边和底边上的点，<code>contains</code> 方法不返回 <code>true</code>。所以，如果添加的点落在放大的矩形的左边和底边上，则 <code>contains</code> 将对该点返回 <code>false</code>。
@param newx 新点的 X 坐标
@param newy 新点的 Y 坐标
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.Rectangle2D.add(Point2D pt)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>Point2D</code> 对象 <code>pt</code> 添加到此 <code>Rectangle2D</code> 中。所得到的 <code>Rectangle2D</code> 是同时包含原始 <code>Rectangle2D</code> 和指定的 <code>Point2D</code> 的最小的 <code>Rectangle2D</code>。
 <p>
在添加一个点后，以添加的点为参数调用 <code>contains</code> 方法不一定返回 <code>true</code>。对于矩形的右边和底部边界线上的点，<code>contains</code> 方法不返回 <code>true</code>。所以，如果添加的点落在放大的矩形的左边和底部边界线上，则 <code>contains</code> 将针对该点返回 <code>false</code>。
@param pt 添加到此 <code>Rectangle2D</code> 中的新 <code>Point2D</code>
@since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.Rectangle2D.add(Rectangle2D r)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>Rectangle2D</code> 对象添加到此 <code>Rectangle2D</code> 中。得到的 <code>Rectangle2D</code> 是两个 <code>Rectangle2D</code> 对象的并集。
@param r 要添加到此 <code>Rectangle2D</code> 中的 <code>Rectangle2D</code>。
@since     1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.PathIterator java.awt.geom.Rectangle2D.getPathIterator(AffineTransform at)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回定义此 <code>Rectangle2D</code> 边界的迭代对象。此类的迭代器是多线程安全的，这意味着此 <code>Rectangle2D</code> 类保证对此 <code>Rectangle2D</code> 对象几何形状所作的修改不会影响该几何形状中正在进行的迭代。
@param at 一个可选的 <code>AffineTransform</code>，用于在迭代中返回的坐标；如果需要未转换的坐标，则为 <code>null</code>
@return  返回此 <code>Rectangle2D</code> 轮廓几何形状的 <code>PathIterator</code> 对象，一次一段。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.PathIterator java.awt.geom.Rectangle2D.getPathIterator(AffineTransform at, double flatness)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回定义变平的 <code>Rectangle2D</code> 边界的迭代对象。因为矩形已经是平的，所以 <code>flatness</code> 参数将被忽略。此类的迭代器是多线程安全的，这意味着此 <code>Rectangle2D</code> 类保证对此 <code>Rectangle2D</code> 对象几何形状所作的修改不会影响该几何形状中正在进行的迭代。
@param at 一个可选 <code>AffineTransform</code>，用于在迭代中返回的坐标；如果需要未转换的坐标，则为 <code>null</code>
@param flatness 用来近似曲线段的直线段偏离原始曲线上任一点的最大距离。因为矩形已经是平的，所以 <code>flatness</code> 参数将被忽略。
@return  <code>PathIterator</code> 对象，该对象返回此 <code>Rectangle2D</code> 的轮廓的几何形状，一次一段。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.geom.Rectangle2D.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Rectangle2D</code> 的哈希码。
@return 此 <code>Rectangle2D</code> 对象的哈希码。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Rectangle2D.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定指定的 <code>Object</code> 是否与此 <code>Rectangle2D</code> 相等。如果指定的 <code>Object</code> 是 <code>Rectangle2D</code> 的实例并且位置和大小与此 <code>Rectangle2D</code> 相同，则其与此 <code>Rectangle2D</code> 相等。
@param obj 要与此 <code>Rectangle2D</code> 进行比较的 <code>Object</code>。
@return  如果 <code>obj</code> 是 <code>Rectangle2D</code> 的实例并且与 <code>Rectangle2D</code> 具有相同值，则返回 <code>true</code>；否则返回 <code>false</code>。
@since 1.2

<!-- END DATA -->
