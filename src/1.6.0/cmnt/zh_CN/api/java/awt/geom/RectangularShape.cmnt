<!-- BEGIN KEY -->
public abstract class java.awt.geom.RectangularShape extends java.lang.Object implements java.awt.Shape, java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>RectangularShape</code> 是许多 {@link Shape} 对象的基类，这些对象的几何形状由矩形窗体定义。此类本身不直接指定任何特定的几何形状，而只是提供由整个 <code>Shape</code> 对象种类继承的操纵方法。由此类提供的操纵方法可用于查询和修改矩形窗体，为子类定义其几何形状提供引用。

@version 	1.20, 02/24/06
@author	Jim Graham
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.geom.RectangularShape()
<!-- END KEY -->
<!-- BEGIN DATA -->
这是一个不可直接实例化的抽象类。

@see Arc2D
@see Ellipse2D
@see Rectangle2D
@see RoundRectangle2D
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.RectangularShape.getX()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 精度返回窗体矩形左上角的 X 坐标。
@return 窗体矩形左上角的 X 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.RectangularShape.getY()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 精度返回窗体矩形左上角的 Y 坐标。
@return 窗体矩形左上角的 Y 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.RectangularShape.getWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 精度返回窗体矩形的宽度。
@return 窗体矩形的宽度。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.RectangularShape.getHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 精度返回窗体矩形的高度。
@return 窗体矩形的高度。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.RectangularShape.getMinX()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 精度返回 <code>Shape</code> 窗体矩形的最小 X 坐标。
@return <code>Shape</code> 窗体矩形的最小 X 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.RectangularShape.getMinY()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 精度返回 <code>Shape</code> 窗体矩形的最小 Y 坐标。
@return <code>Shape</code> 窗体矩形的最小 Y 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.RectangularShape.getMaxX()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 精度返回 <code>Shape</code> 窗体矩形的最大 X 坐标。
@return <code>Shape</code> 窗体矩形的最大 X 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.RectangularShape.getMaxY()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 精度返回 <code>Shape</code> 窗体矩形的最大 Y 坐标。
@return <code>Shape</code> 窗体矩形的最大 Y 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.RectangularShape.getCenterX()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 精度返回 <code>Shape</code> 的窗体矩形中心的 X 坐标。
@return <code>Shape</code> 对象的窗体矩形中心的 X 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.RectangularShape.getCenterY()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>double</code> 精度返回 <code>Shape</code> 的窗体矩形中心的 Y 坐标。
@return <code>Shape</code> 对象的窗体矩形中心的 Y 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Rectangle2D java.awt.geom.RectangularShape.getFrame()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回定义此对象的总体形状的窗体 {@link Rectangle2D}。
@return 一个 <code>Rectangle2D</code>，它是使用 <code>double</code> 坐标指定的。
@see #setFrame(double, double, double, double)
@see #setFrame(Point2D, Dimension2D)
@see #setFrame(Rectangle2D)
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.awt.geom.RectangularShape.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定 <code>RectangularShape</code> 是否为空。当 <code>RectangularShape</code> 为空时，它不封闭任何区域。
@return 如果 <code>RectangularShape</code> 为空，则返回 <code>true</code>；否则返回 <code>false</code>。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.geom.RectangularShape.setFrame(double x, double y, double w, double h)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Shape</code> 窗体矩形的位置和大小设置为指定的矩形值。
@param x 指定矩形左上角的 X 坐标
@param y 指定矩形左上角的 Y 坐标
@param w 指定矩形的宽度
@param h 指定矩形的高度
@see #getFrame
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.RectangularShape.setFrame(Point2D loc, Dimension2D size)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Shape</code> 窗体矩形的位置和大小分别设置为指定的 {@link Point2D} 和 {@link Dimension2D}。窗体矩形供 <code>RectangularShape</code> 的子类定义其几何形状。
@param loc 指定的 <code>Point2D</code>
@param size 指定的 <code>Dimension2D</code>
@see #getFrame
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.RectangularShape.setFrame(Rectangle2D r)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>Shape</code> 窗体矩形设置为指定的 <code>Rectangle2D</code>。窗体矩形供 <code>RectangularShape</code> 的子类定义其几何形状。
@param r 指定的 <code>Rectangle2D</code>
@see #getFrame
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.RectangularShape.setFrameFromDiagonal(double x1, double y1, double x2, double y2)
<!-- END KEY -->
<!-- BEGIN DATA -->
基于两个指定的坐标设置此 <code>Shape</code> 窗体矩形的对角线。窗体矩形供 <code>RectangularShape</code> 的子类定义其几何形状。
@param x1 指定对角线起始点的 X 坐标
@param y1 指定对角线起始点的 Y 坐标
@param x2 指定对角线结束点的 X 坐标
@param y2 指定对角线结束点的 Y 坐标
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.RectangularShape.setFrameFromDiagonal(Point2D p1, Point2D p2)
<!-- END KEY -->
<!-- BEGIN DATA -->
基于两个指定的 <code>Point2D</code> 对象设置此 <code>Shape</code> 窗体矩形的对角线。窗体矩形供 <code>RectangularShape</code> 的子类定义其几何形状。
@param p1 指定对角线的起始 <code>Point2D</code>
@param p2 指定对角线的结束 <code>Point2D</code>
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.RectangularShape.setFrameFromCenter(double centerX, double centerY, double cornerX, double cornerY)
<!-- END KEY -->
<!-- BEGIN DATA -->
基于指定的中心点坐标和角点坐标设置此 <code>Shape</code> 的窗体矩形。窗体矩形供 <code>RectangularShape</code> 的子类定义其几何形状。
@param centerX 指定中心点的 X 坐标
@param centerY 指定中心点的 X 坐标
@param cornerX 指定角点的 X 坐标
@param cornerY 指定角点的 Y 坐标
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.RectangularShape.setFrameFromCenter(Point2D center, Point2D corner)
<!-- END KEY -->
<!-- BEGIN DATA -->
基于指定的中心 <code>Point2D</code> 和角 <code>Point2D</code> 设置此 <code>Shape</code> 的窗体矩形。窗体矩形供 <code>RectangularShape</code> 的子类定义其几何形状。
@param center 指定的中心 <code>Point2D</code>
@param corner 指定的角 <code>Point2D</code>
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.RectangularShape.contains(Point2D p)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.RectangularShape.intersects(Rectangle2D r)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.RectangularShape.contains(Rectangle2D r)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle java.awt.geom.RectangularShape.getBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.PathIterator java.awt.geom.RectangularShape.getPathIterator(AffineTransform at, double flatness)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个迭代器对象，它可沿 <code>Shape</code> 对象的边界进行迭代，并提供对 <code>Shape</code> 对象轮廓几何形状平面视图的访问。
 <p>
迭代器将只返回 SEG_MOVETO、SEG_LINETO 和 SEG_CLOSE 点类型。
 <p>
<code>flatness</code> 参数控制曲线段分段的数量，指定变换的不平曲线上任一点能够偏离返回的变平路径段的最大距离。可以指定一个可选的 {@link AffineTransform}，以便相应地变换迭代中返回的坐标。
@param at 可选的 <code>AffineTransform</code>，应用于迭代中返回坐标；如果需要未变换的坐标，则为 <code>null</code>。
@param flatness 用来近似曲线段的直线段偏离原始曲线上任一点的最大距离
@return 提供对 <code>Shape</code> 对象的变平几何形状的访问的 <code>PathIterator</code> 对象。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.geom.RectangularShape.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个与此对象具有相同类和相同内容的新对象。
@return 此实例的一个副本。
@exception  OutOfMemoryError  如果没有足够的内存。
@see        java.lang.Cloneable
@since      1.2

<!-- END DATA -->
