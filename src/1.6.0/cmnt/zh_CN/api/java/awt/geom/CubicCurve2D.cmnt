<!-- BEGIN KEY -->
public abstract class java.awt.geom.CubicCurve2D extends java.lang.Object implements java.awt.Shape, java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>CubicCurve2D</code> 类定义 {@code (x,y)} 坐标空间内的三次参数曲线段。
 <p>
此类是所有存储 2D 三次曲线段的对象的惟一抽象超类。坐标的实际存储表示形式由子类决定。

@version 	1.35, 04/17/06
@author	Jim Graham
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.geom.CubicCurve2D()
<!-- END KEY -->
<!-- BEGIN DATA -->
这是一个不可直接实例化的抽象类。特定于类型的实现子类可用于实例化，并提供用于存储满足以下各种存取方法所需信息的多种格式。

@see java.awt.geom.CubicCurve2D.Float
@see java.awt.geom.CubicCurve2D.Double
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.CubicCurve2D.getX1()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 double 精度返回起始点的 X 坐标。
@return {@code CubicCurve2D} 起始点的 X 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.CubicCurve2D.getY1()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 double 精度返回起始点的 Y 坐标。
@return {@code CubicCurve2D} 起始点的 Y 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.geom.Point2D java.awt.geom.CubicCurve2D.getP1()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回起始点。
@return 作为 {@code CubicCurve2D} 起始点的 {@code Point2D}。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.CubicCurve2D.getCtrlX1()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 double 精度返回第一个控制点的 X 坐标。
@return {@code CubicCurve2D} 第一个控制点的 X 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.CubicCurve2D.getCtrlY1()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 double 精度返回第一个控制点的 Y 坐标。
@return {@code CubicCurve2D} 第一个控制点的 Y 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.geom.Point2D java.awt.geom.CubicCurve2D.getCtrlP1()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回第一个控制点。
@return {@code CubicCurve2D} 第一个控制点的 {@code Point2D}。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.CubicCurve2D.getCtrlX2()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 double 精度返回第二个控制点的 X 坐标。
@return {@code CubicCurve2D} 第二个控制点的 X 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.CubicCurve2D.getCtrlY2()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 double 精度返回第二个控制点的 Y 坐标。
@return {@code CubicCurve2D} 第二个控制点的 Y 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.geom.Point2D java.awt.geom.CubicCurve2D.getCtrlP2()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回第二个控制点。
@return 作为 {@code CubicCurve2D} 第二个控制点的 {@code Point2D}。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.CubicCurve2D.getX2()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 double 精度返回结束点的 X 坐标。
@return {@code CubicCurve2D} 结束点的 X 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.awt.geom.CubicCurve2D.getY2()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 double 精度返回结束点的 Y 坐标。
@return {@code CubicCurve2D} 结束点的 Y 坐标。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.geom.Point2D java.awt.geom.CubicCurve2D.getP2()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回结束点。
@return 作为 {@code CubicCurve2D} 结束点的 {@code Point2D}。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.geom.CubicCurve2D.setCurve(double x1, double y1, double ctrlx1, double ctrly1, double ctrlx2, double ctrly2, double x2, double y2)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此曲线端点和控制点的位置设置为指定的 double 坐标。
@param x1 用于设置此 {@code CubicCurve2D} 起始点的 X 坐标
@param y1 用于设置此 {@code CubicCurve2D} 起始点的 Y 坐标
@param ctrlx1 用于设置此 {@code CubicCurve2D} 第一个控制点的 X 坐标
@param ctrly1 用于设置此 {@code CubicCurve2D} 第一个控制点的 Y 坐标
@param ctrlx2 用于设置此 {@code CubicCurve2D} 第二个控制点的 X 坐标
@param ctrly2 用于设置此 {@code CubicCurve2D} 第二个控制点的 Y 坐标
@param x2 用于设置此 {@code CubicCurve2D} 结束点的 X 坐标
@param y2 用于设置此 {@code CubicCurve2D} 结束点的 Y 坐标
@since 1.2	 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.CubicCurve2D.setCurve(double[] coords, int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此曲线端点和控制点的位置设置为指定数组中指定偏移量的 double 坐标。
@param coords 包含坐标的 double 数组
@param offset <code>coords</code> 的索引，从该索引处开始将此曲线端点和控制点设置为 <code>coords</code> 中包含的坐标
@since 1.2	

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.CubicCurve2D.setCurve(Point2D p1, Point2D cp1, Point2D cp2, Point2D p2)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此曲线端点和控制点的位置设置为指定的 <code>Point2D</code> 坐标。
@param p1 用于设置此曲线起始点的第一个指定的 <code>Point2D</code>
@param cp1 用于设置此曲线第一个控制点的第二个指定的 <code>Point2D</code>
@param cp2 用于设置此曲线第二个控制点的第三个指定的 <code>Point2D</code>
@param p2 用于设置此曲线结束点的第四个指定的 <code>Point2D</code>
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.CubicCurve2D.setCurve(java.awt.geom.Point2D[] pts, int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此曲线端点和控制点的位置设置为指定数组中指定偏移量的 <code>Point2D</code> 对象的坐标。
@param pts <code>Point2D</code> 对象数组
@param offset  <code>pts</code> 的索引，从该索引处开始将此曲线端点和控制点设置为 <code>pts</code> 中包含的点
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.CubicCurve2D.setCurve(CubicCurve2D c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此曲线端点和控制点的位置设置为与指定的 <code>CubicCurve2D</code> 相同。
@param c 指定的 <code>CubicCurve2D</code>
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.awt.geom.CubicCurve2D.getFlatnessSq(double x1, double y1, double ctrlx1, double ctrly1, double ctrlx2, double ctrly2, double x2, double y2)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由指示的控制点指定的三次曲线平面度的平方。平面度是控制点到连接端点的线之间的最大距离。

@param x1 指定 {@code CubicCurve2D} 起始点的 X 坐标
@param y1 指定 {@code CubicCurve2D} 起始点的 Y 坐标
@param ctrlx1 指定 {@code CubicCurve2D} 第一个控制点的 X 坐标
@param ctrly1 指定 {@code CubicCurve2D} 第一个控制点的 Y 坐标
@param ctrlx2 指定 {@code CubicCurve2D} 第二个控制点的 X 坐标
@param ctrly2 指定 {@code CubicCurve2D} 第二个控制点的 Y 坐标
@param x2 指定 {@code CubicCurve2D} 结束点的 X 坐标
@param y2 指定 {@code CubicCurve2D} 结束点的 Y 坐标
@return 用指定坐标表示的 {@code CubicCurve2D} 平面度的平方。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.awt.geom.CubicCurve2D.getFlatness(double x1, double y1, double ctrlx1, double ctrly1, double ctrlx2, double ctrly2, double x2, double y2)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由指示控制点指定的三次曲线的平面度。平面度是控制点到连接端点的线之间的最大距离。

@param x1 指定 {@code CubicCurve2D} 起始点的 X 坐标
@param y1 指定 {@code CubicCurve2D} 起始点的 Y 坐标
@param ctrlx1 指定 {@code CubicCurve2D} 第一个控制点的 X 坐标
@param ctrly1 指定 {@code CubicCurve2D} 第一个控制点的 Y 坐标
 @param ctrlx2 指定 {@code CubicCurve2D} 第二个控制点的 X 坐标
@param ctrly2 指定 {@code CubicCurve2D} 第二个控制点的 Y 坐标
@param x2 指定 {@code CubicCurve2D} 结束点的 X 坐标
@param y2 指定 {@code CubicCurve2D} 结束点的 Y 坐标
@return 用指定坐标表示的 {@code CubicCurve2D} 平面度。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.awt.geom.CubicCurve2D.getFlatnessSq(double[] coords, int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由控制点（存储在指示数组中的指示索引处）指定的三次曲线平面度的平方。平面度是控制点到连接端点的线之间的最大距离。
@param coords 包含坐标的数组
@param offset <code>coords</code> 的索引，从该索引处开始设置此曲线的端点和控制点
@return 由 <code>coords</code> 中指定偏移量处的坐标指定的 <code>CubicCurve2D</code> 平面度的平方。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double java.awt.geom.CubicCurve2D.getFlatness(double[] coords, int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由控制点（存储在指示数组中的指示索引处）指定的三次曲线的平面度。平面度是控制点到连接端点的线之间的最大距离。
@param coords 包含坐标的数组
@param offset <code>coords</code> 的索引，从该索引处开始设置此曲线的端点和控制点
@return 由 <code>coords</code> 中指定偏移量处的坐标指定的 <code>CubicCurve2D</code> 平面度。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.CubicCurve2D.getFlatnessSq()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此曲线平面度的平方。平面度是控制点到连接端点的线之间的最大距离。
@return 此曲线平面度的平方。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.CubicCurve2D.getFlatness()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此曲线的平面度。平面度是控制点到连接端点的线之间的最大距离。
@return 此曲线的平面度。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.CubicCurve2D.subdivide(CubicCurve2D left, CubicCurve2D right)
<!-- END KEY -->
<!-- BEGIN DATA -->
细分此三次曲线，并将得到的两个细分曲线存储到 left 和 right 曲线参数中。left 和 right 两个对象中的一个（或两者）可以与此对象相同，也可以为 null。
@param left 用于存储左边一半（或第一半）细分曲线的三次曲线对象
@param right 用于存储右边一半（或第二半）细分曲线的三次曲线对象
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.awt.geom.CubicCurve2D.subdivide(CubicCurve2D src, CubicCurve2D left, CubicCurve2D right)
<!-- END KEY -->
<!-- BEGIN DATA -->
细分由 <code>src</code> 参数指定的三次曲线，并将得到的两个细分曲线存储到 <code>left</code> 和 <code>right</code> 曲线参数中。<code>left</code> 和 <code>right</code> 两个对象的一个（或两个）可以与 <code>src</code> 对象相同，也可以为 <code>null</code>。
@param src 要细分的三次曲线
@param left 用于存储左边一半（或第一半）细分曲线的三次曲线对象
@param right 用于存储右边一半（或第二半）细分曲线的三次曲线对象
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.awt.geom.CubicCurve2D.subdivide(double[] src, int srcoff, double[] left, int leftoff, double[] right, int rightoff)
<!-- END KEY -->
<!-- BEGIN DATA -->
细分由存储在 <code>src</code> 数组 <code>srcoff</code> 到 (<code>srcoff</code>&#xA0;+&#xA0;7) 索引处的坐标指定的三次曲线，并将得到的两个细分曲线存储到所得数组的相应索引中。<code>left</code> 和 <code>right</code> 数组中的一个（或两者）可以为 <code>null</code>，也可以是到与 <code>src</code> 相同的数组的引用。注意，第一个细分曲线的最后一点就是第二个细分曲线的第一点。因此，可以为 <code>left</code> 和 <code>right</code> 传递相同的数组并使用偏移量（如 <code>rightoff</code> 等于 (<code>leftoff</code> + 6)），以避免为此公共点分配额外的存储区。
@param src 保存源曲线坐标的数组
@param srcoff 6 个源坐标的开头在数组中的偏移量
@param left 存储第一半细分曲线坐标的数组
@param leftoff 6 个左坐标的开头在数组中的偏移量
@param right 存储第二半细分曲线坐标的数组
@param rightoff 6 个右坐标的开头在数组中的偏移量
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.awt.geom.CubicCurve2D.solveCubic(double[] eqn)
<!-- END KEY -->
<!-- BEGIN DATA -->
解系数位于 <code>eqn</code> 数组中的三次曲线，并将非复数的根放回该数组，同时返回根数。用以下方程表示三次曲线的解：
 <pre>
     eqn = {c, b, a, d}
     dx^3 + ax^2 + bx + c = 0
 </pre>
返回值 -1 用于区分常数方程（可以始终为 0 或永远不为 0）与不包含任何零的方程。
@param eqn 包含三次曲线系数的数组
@return 根数；如果方程是常数方程，则返回 -1。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.awt.geom.CubicCurve2D.solveCubic(double[] eqn, double[] res)
<!-- END KEY -->
<!-- BEGIN DATA -->
解系数位于 <code>eqn</code> 数组中的三次曲线，并将非复数的根放入 <code>res</code> 数组，同时返回根数。用以下方程表示三次曲线的解：eqn = {c, b, a, d} dx^3 + ax^2 + bx + c = 0。返回值 -1 用于区分常数方程（可以始终为 0 或永远不为 0）与不包含任何零的方程。
@param eqn 用于解三次曲线方程的指定系数数组
@param res 包含求解三次曲线方程所得非复数根的数组
@return 根数；如果方程是常数方程，则返回 -1
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.CubicCurve2D.contains(double x, double y)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.CubicCurve2D.contains(Point2D p)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.CubicCurve2D.intersects(double x, double y, double w, double h)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.CubicCurve2D.intersects(Rectangle2D r)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.CubicCurve2D.contains(double x, double y, double w, double h)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.CubicCurve2D.contains(Rectangle2D r)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle java.awt.geom.CubicCurve2D.getBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.PathIterator java.awt.geom.CubicCurve2D.getPathIterator(AffineTransform at)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回定义形状边界的迭代对象。此类的迭代器不是多线程安全的，这意味着此 <code>CubicCurve2D</code> 类不保证对此 <code>CubicCurve2D</code> 对象几何形状所作的修改不会影响该几何形状中正进行的迭代。
@param at 一个可选的 <code>AffineTransform</code>，用于在迭代中返回的坐标；如果需要未变换的坐标，则为 <code>null</code>
@return    返回此 <code>CubicCurve2D</code> 轮廓几何形状的 <code>PathIterator</code> 对象，一次一段。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.PathIterator java.awt.geom.CubicCurve2D.getPathIterator(AffineTransform at, double flatness)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回定义变平形状边界的迭代对象。此类的迭代器不是多线程安全的，这意味着此 <code>CubicCurve2D</code> 类不保证对此 <code>CubicCurve2D</code> 对象几何形状所作的修改不会影响该几何形状中正在进行的迭代。
@param at 一个可选的 <code>AffineTransform</code>，用于迭代中返回的坐标；如果需要未变换的坐标，则为 <code>null</code>
@param flatness 在由连接端点的直线取代细分曲线之前，给定曲线的控制点可以从共线变化的最大量
@return    返回此 <code>CubicCurve2D</code> 轮廓几何形状的 <code>PathIterator</code> 对象，一次一段。
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.geom.CubicCurve2D.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个与此对象具有相同类的新对象。

@return 此实例的一个副本。
@exception OutOfMemoryError            如果没有足够的内存。
@see       java.lang.Cloneable
@since     1.2

<!-- END DATA -->
