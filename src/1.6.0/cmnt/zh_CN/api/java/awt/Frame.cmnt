<!-- BEGIN KEY -->
public class java.awt.Frame extends java.awt.Window implements java.awt.MenuContainer
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Frame</code> 是带有标题和边框的顶层窗口。
 <p>
窗体的大小包括为边框指定的所有区域。边框区域的尺寸可以使用 <code>getInsets</code> 方法获得，但是，由于这些尺寸与平台相关，因此在通过调用 <code>pack</code> 或 <code>show</code> 将窗体设置为可显示之前，将无法获得有效的 insets 值。由于窗体的总大小包括了边框区，因此边框实际上遮掩了窗体的部分区域，并将可用于在矩形中呈现和/或显示子部件的区域限制在一个矩形内，该矩形左上角的位置为 <code>(insets.left, insets.top)</code>，宽度为 <code>width - (insets.left + insets.right)</code>，长度为 <code>height - (insets.top + insets.bottom)</code>。 
 <p>
窗体的默认布局为 <code>BorderLayout</code>。
 <p>
使用 <code>setUndecorated</code>，窗体可以关闭本机装饰（即 <code>Frame</code> 和 <code>Titlebar</code>）。但只有在窗体不是 {@link Component#isDisplayable() displayable} 时才能这样做。
 <p>
在多屏幕环境中，通过使用 {@link #Frame(GraphicsConfiguration)} 或 {@link #Frame(String title, GraphicsConfiguration)} 构造 <code>Frame</code>，可以在不同的屏幕设备上创建 <code>Frame</code>。<code>GraphicsConfiguration</code> 对象是目标屏幕设备的 <code>GraphicsConfiguration</code> 对象之一。
 <p>
在虚拟设备多屏幕环境中（其中桌面区域可以跨越多物理屏幕设备），所有配置的边界都是相对于虚拟坐标系的。虚拟坐标系的原点位于主物理屏幕的左上角。是否使用负坐标取决于主物理屏幕在虚拟设备中的位置，如下图所示。
 <p>
<img src="doc-files/MultiScreen.gif" 
 alt="包括三个物理屏幕和一个主物理屏幕的虚拟设备。主物理屏幕
显示坐标为 (0,0)，而另一个物理屏幕显示坐标为 (-80,-100)。"
 ALIGN=center HSPACE=10 VSPACE=7>
 <p>
在此环境中调用 <code>setLocation</code> 时，必须传递一个虚拟坐标到此方法中。类似地，对 <code>Frame</code> 调用 <code>getLocationOnScreen</code> 将返回虚拟设备坐标。调用 <code>GraphicsConfiguration</code> 的 <code>getBounds</code> 方法可查找它在虚拟坐标系中的原点。
 <p>
以下代码将 <code>Frame</code> 的位置设置为 (10, 10)（相对于相应 <code>GraphicsConfiguration</code> 的物理屏幕的原点）。如果不考虑 <code>GraphicsConfiguration</code> 的边界，则 <code>Frame</code> 的位置将被设置为 (10, 10)（相对于虚拟坐标系），并出现在主物理屏幕上，主物理屏幕不同于指定的 <code>GraphicsConfiguration</code> 的物理屏幕。

 <pre>
      Frame f = new Frame(GraphicsConfiguration gc);
      Rectangle bounds = gc.getBounds();
      f.setLocation(10 + bounds.x, 10 + bounds.y);
 </pre>

 <p>
窗体能够生成以下类型的 <code>WindowEvent</code>：
 <ul>
 <li><code>WINDOW_OPENED</code>
 <li><code>WINDOW_CLOSING</code>:<br>在处理此事件时，如果程序没有显式地隐藏或释放窗口，则取消窗口关闭操作。
 <li><code>WINDOW_CLOSED</code>
 <li><code>WINDOW_ICONIFIED</code>
 <li><code>WINDOW_DEICONIFIED</code>
 <li><code>WINDOW_ACTIVATED</code>
 <li><code>WINDOW_DEACTIVATED</code>
 <li><code>WINDOW_GAINED_FOCUS</code>
 <li><code>WINDOW_LOST_FOCUS</code>
 <li><code>WINDOW_STATE_CHANGED</code>
 </ul>

@version 	1.161, 07/27/06
@author  Sami Shaio
@see WindowEvent
@see Window#addWindowListener
@since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Frame.DEFAULT_CURSOR
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated   由 <code>Cursor.DEFAULT_CURSOR</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Frame.CROSSHAIR_CURSOR
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated   由 <code>Cursor.CROSSHAIR_CURSOR</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Frame.TEXT_CURSOR
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated   由 <code>Cursor.TEXT_CURSOR</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Frame.WAIT_CURSOR
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated   由 <code>Cursor.WAIT_CURSOR</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Frame.SW_RESIZE_CURSOR
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated   由 <code>Cursor.SW_RESIZE_CURSOR</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Frame.SE_RESIZE_CURSOR
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated   由 <code>Cursor.SE_RESIZE_CURSOR</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Frame.NW_RESIZE_CURSOR
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated   由 <code>Cursor.NW_RESIZE_CURSOR</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Frame.NE_RESIZE_CURSOR
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated   由 <code>Cursor.NE_RESIZE_CURSOR</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Frame.N_RESIZE_CURSOR
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated   由 <code>Cursor.N_RESIZE_CURSOR</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Frame.S_RESIZE_CURSOR
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated   由 <code>Cursor.S_RESIZE_CURSOR</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Frame.W_RESIZE_CURSOR
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated   由 <code>Cursor.W_RESIZE_CURSOR</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Frame.E_RESIZE_CURSOR
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated   由 <code>Cursor.E_RESIZE_CURSOR</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Frame.HAND_CURSOR
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated   由 <code>Cursor.HAND_CURSOR</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Frame.MOVE_CURSOR
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated   由 <code>Cursor.MOVE_CURSOR</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Frame.NORMAL
<!-- END KEY -->
<!-- BEGIN DATA -->
窗体处于 &quot;normal&quot; 状态。此符号常量指定所有状态位均被清除的窗体状态。
@see #setExtendedState(int)
@see #getExtendedState

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Frame.ICONIFIED
<!-- END KEY -->
<!-- BEGIN DATA -->
此状态位指示将窗体图标化。
@see #setExtendedState(int)
@see #getExtendedState

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Frame.MAXIMIZED_HORIZ
<!-- END KEY -->
<!-- BEGIN DATA -->
此状态位指示在水平方向将窗体最大化。
@see #setExtendedState(int)
@see #getExtendedState
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Frame.MAXIMIZED_VERT
<!-- END KEY -->
<!-- BEGIN DATA -->
此状态位指示在垂直方向将窗体最大化。
@see #setExtendedState(int)
@see #getExtendedState
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Frame.MAXIMIZED_BOTH
<!-- END KEY -->
<!-- BEGIN DATA -->
此状态位掩码指示将窗体完全最大化（水平和垂直方向）。它只是 <code>MAXIMIZED_VERT&nbsp;|&nbsp;MAXIMIZED_HORIZ</code> 的一种便捷别名。

<p>注意，要正确测试窗体是否完全最大化，使用以下方法：
<pre>
     (state &amp; Frame.MAXIMIZED_BOTH) == Frame.MAXIMIZED_BOTH
 </pre>

<p>要测试窗体是否在<em>某个</em> 方向最大化，使用：
<pre>
     (state &amp; Frame.MAXIMIZED_BOTH) != 0
 </pre>
 
@see #setExtendedState(int)
@see #getExtendedState
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.Rectangle java.awt.Frame.maximizedBounds
<!-- END KEY -->
<!-- BEGIN DATA -->
此窗体的最大化边界。
@see     #setMaximizedBounds(Rectangle)
@see     #getMaximizedBounds
@serial
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String java.awt.Frame.title
<!-- END KEY -->
<!-- BEGIN DATA -->
这是窗体的标题。标题可以随时更改。<code>title</code> 可以为 null，如果是这样，则 <code>title</code> = &quot;&quot;。

@serial
@see #getTitle
@see #setTitle(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.MenuBar java.awt.Frame.menuBar
<!-- END KEY -->
<!-- BEGIN DATA -->
窗体的菜单栏。如果 <code>menuBar</code> = null，则窗体没有菜单栏。

@serial
@see #getMenuBar
@see #setMenuBar(MenuBar)

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean java.awt.Frame.resizable
<!-- END KEY -->
<!-- BEGIN DATA -->
此字段指示窗体是否可调整大小。此属性可随时更改。如果窗体是可调整大小的，则 <code>resizable</code> 为 true，否则为 false。

@serial
@see #isResizable()

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean java.awt.Frame.undecorated
<!-- END KEY -->
<!-- BEGIN DATA -->
此字段指示窗体是否未装饰。此属性只可能在窗体不可显示时改变。如果窗体未装饰，则 <code>undecorated</code> 为 true，否则为 false。

@serial
@see #setUndecorated(boolean)
@see #isUndecorated()
@see Component#isDisplayable()
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean java.awt.Frame.mbManagement
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>mbManagement</code> 只用于 Motif 实现。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.Frame.frameSerializedDataVersion
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Frame</code> 的序列化数据版本。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Frame() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个最初不可见的 <code>Frame</code> 新实例（）。<code>Frame</code> 的标题为空。
@exception HeadlessException 当 <code>GraphicsEnvironment.isHeadless()</code> 返回 <code>true</code> 时
@see java.awt.GraphicsEnvironment#isHeadless()
@see Component#setSize
@see Component#setVisible(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Frame(GraphicsConfiguration gc)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的 {@code GraphicsConfiguration} 构造一个最初不可见的新 {@code Frame}。 
@param gc 目标屏幕设备的 <code>GraphicsConfiguration</code>。如果 <code>gc</code> 为 <code>null</code>，则假定它为系统默认的 <code>GraphicsConfiguration</code>。
@exception IllegalArgumentException 如果 <code>gc</code> 不是来自屏幕设备。
@exception HeadlessException 当 <code>GraphicsEnvironment.isHeadless()</code> 返回 <code>true</code> 时
@see java.awt.GraphicsEnvironment#isHeadless()
@since     1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Frame(String title) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的、最初不可见的、具有指定标题的 <code>Frame</code> 对象。
@param title 要显示在窗体边框中的标题。<code>null</code> 值视为空字符串 &quot;&quot;。
@exception HeadlessException 当 <code>GraphicsEnvironment.isHeadless()</code> 返回 <code>true</code> 时
@see java.awt.GraphicsEnvironment#isHeadless()
@see java.awt.Component#setSize
@see java.awt.Component#setVisible(boolean)
@see java.awt.GraphicsConfiguration#getBounds

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Frame(String title, GraphicsConfiguration gc)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的、初始不可见的、具有指定标题和 <code>GraphicsConfiguration</code> 的 <code>Frame</code> 对象。
@param title 要显示在窗体边框中的标题。<code>null</code> 值视为空字符串 &quot;&quot;。
@param gc 目标屏幕设备的 <code>GraphicsConfiguration</code>。如果 <code>gc</code> 为 <code>null</code>，则假定它为系统默认的 <code>GraphicsConfiguration</code>。
@exception IllegalArgumentException 如果 <code>gc</code> 不是来自屏幕设备。
@exception HeadlessException 当 <code>GraphicsEnvironment.isHeadless()</code> 返回 <code>true</code> 时
@see java.awt.GraphicsEnvironment#isHeadless()
@see java.awt.Component#setSize
@see java.awt.Component#setVisible(boolean)
@see java.awt.GraphicsConfiguration#getBounds
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Frame.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
通过将此窗体连接到本机屏幕资源，使其成为可显示的。如果窗体是可显示的，则其所有子级也将成为可显示的。此方法由工具包内部调用，不应直接由程序调用。
@see Component#isDisplayable
@see #removeNotify

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.Frame.getTitle()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得窗体的标题。标题显示在窗体的边框中。
@return    此窗体的标题，如果此窗体没有标题，则返回一个空字符串 (&quot;&quot;) 。
@see       #setTitle(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Frame.setTitle(String title)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此窗体的标题设置为指定的字符串。
@param title 要显示在窗体边框中的标题。<code>null</code> 值视为空字符串 &quot;&quot;。
@see      #getTitle

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Image java.awt.Frame.getIconImage()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回要作为此窗体图标显示的图像。
 <p>
 此方法已废弃，保留它只是为了向后兼容性。使用 {@link Window#getIconImages Window.getIconImages()} 代替。
 <p>
 如果将几个图像的列表指定为 Window 的图标，则此方法返回列表的第一项。
@return    此窗体的图标图像；如果此窗体没有图标图像，则返回 <code>null</code>。
@see       #setIconImage(Image)
@see       Window#getIconImages()
@see       Window#setIconImages

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Frame.setIconImage(Image image)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuBar java.awt.Frame.getMenuBar()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此窗体的菜单栏。
@return    此窗体的菜单栏；如果此窗体没有菜单栏，则返回 <code>null</code>。
@see       #setMenuBar(MenuBar)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Frame.setMenuBar(MenuBar mb)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此窗体的菜单栏设置为指定的菜单栏。
@param     mb 正被设置的菜单栏。如果此参数为 <code>null</code>，则移除此窗体上现有的所有菜单栏。
@see       #getMenuBar

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Frame.isResizable()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此窗体是否可由用户调整大小。在默认情况下，所有窗体最初都可以调整大小。
@return    如果用户可以调整窗体的大小，则返回 <code>true</code>；否则返回 <code>false</code>。
@see       java.awt.Frame#setResizable(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Frame.setResizable(boolean resizable)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此窗体是否可由用户调整大小。
@param    resizable   如果此窗体是可调整大小的，则为 <code>true</code>；否则为 <code>false</code>。
@see      java.awt.Frame#isResizable

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Frame.setState(int state)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此窗体的状态（已废弃）。
 <p>
在较早的 JDK 版本中，窗体的状态只能为 NORMAL 或 ICONIFIED。自从 JDK 1.4 以来，受支持的窗体状态集合扩大了，窗体状态表示为逐位掩码。
 <p>
为了与原有的程序兼容，此方法仍然接受 <code>Frame.NORMAL</code> 和 <code>Frame.ICONIFIED</code>，但它只改变窗体的图标状态，而不影响窗体其他方面的状态。
 
@param state <code>Frame.NORMAL</code> 或 <code>Frame.ICONIFIED</code>。
@see #getState
@see #setExtendedState(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Frame.setExtendedState(int state)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此窗体的状态。该状态表示为逐位掩码。
 <ul>
<li><code>NORMAL</code> <br> 指示不设置任何状态位。
 <li><code>ICONIFIED</code>
 <li><code>MAXIMIZED_HORIZ</code>
 <li><code>MAXIMIZED_VERT</code>
<li><code>MAXIMIZED_BOTH</code> <br>串连 <code>MAXIMIZED_HORIZ</code> 和 <code>MAXIMIZED_VERT</code>。
 </ul>
<p>注意，如果该状态在给定平台上不受支持，则什么也不会发生。应用程序可以通过 <code>java.awt.Toolkit#isFrameStateSupported(int state)</code> 方法确定特定的状态是否可用。
 
@param state 窗体状态常量的逐位掩码
@see     #getExtendedState
@see     java.awt.Toolkit#isFrameStateSupported(int)
@since   1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.awt.Frame.getState()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此窗体的状态（已废弃）。
 <p>
在较早的 JDK 版本中，窗体的状态只能为 NORMAL 或 ICONIFIED。自从 JDK 1.4 以来，受支持的窗体状态集合扩大了，窗体状态表示为逐位掩码。
 <p>
为了与原有的程序兼容，此方法仍然返回 <code>Frame.NORMAL</code> 和 <code>Frame.ICONIFIED</code>，但它只报告窗体的图标状态，而不报告窗体其他方面的状态。
 
@return  <code>Frame.NORMAL</code> 或 <code>Frame.ICONIFIED</code>。
@see     #setState(int)
@see     #getExtendedState

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.awt.Frame.getExtendedState()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此窗体的状态。该状态表示为逐位掩码。
 <ul>
<li><code>NORMAL</code> <br>指示不设置任何状态位。
 <li><code>ICONIFIED</code>
 <li><code>MAXIMIZED_HORIZ</code>
 <li><code>MAXIMIZED_VERT</code>
<li><code>MAXIMIZED_BOTH</code> <br>串连 <code>MAXIMIZED_HORIZ</code> 和 <code>MAXIMIZED_VERT</code>。
 </ul>

@return 窗体状态常量的逐位掩码
@see    #setExtendedState(int)
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Frame.setMaximizedBounds(Rectangle bounds)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此窗体的最大化边界。
 <p>
当窗体处于最大化状态时，系统提供默认边界。此方法允许重写系统提供的部分或全部值。
 <p>
如果 <code>bounds</code> 为 <code>null</code>，则接受系统提供的边界。如果 bound 不为 <code>null</code>，则可以重写系统提供的某些值而接受其他值，这通过将希望从系统接受的那些字段设置为 <code>Integer.MAX_VALUE</code> 来完成。
 <p>
在某些系统中，只考虑部分边界的大小。
 
@param bounds  最大化状态的边界
@see #getMaximizedBounds()
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle java.awt.Frame.getMaximizedBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此窗体的最大化边界。有些字段可能包含 <code>Integer.MAX_VALUE</code>，指示必须使用系统为该字段提供的值。

@return  此窗体的最大化边界；可以为 <code>null</code>
@see     #setMaximizedBounds(Rectangle)
@since   1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Frame.setUndecorated(boolean undecorated)
<!-- END KEY -->
<!-- BEGIN DATA -->
禁用或启用此窗体的装饰。只有在窗体不可显示时才调用此方法。
@param  undecorated 如果没有启用窗体装饰，则为 <code>true</code>；如果启用了窗体装饰，则为 <code>false</code>。
@throws <code>IllegalComponentStateException</code> 如果窗体是可显示的。
@see    #isUndecorated
@see    Component#isDisplayable
@see    javax.swing.JFrame#setDefaultLookAndFeelDecorated(boolean)
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Frame.isUndecorated()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此窗体是否未装饰。在默认情况下，所有窗体初始时都是已装饰的。
@return  如果窗体未装饰，则返回 <code>true</code>；否则返回 <code>false</code>。
@see     java.awt.Frame#setUndecorated(boolean)
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Frame.remove(MenuComponent m)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此窗体移除指定的菜单栏。
@param    m   要移除的菜单组件。如果 <code>m</code> 为 <code>null</code>，则不执行任何操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Frame.removeNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
通过移除与本机屏幕资源的连接，将此窗体设置为不可显示的。如果窗体是不可显示的，则其所有子级也将成为不可显示的。此方法由工具包内部调用，不应直接由程序调用。
@see Component#isDisplayable
@see #addNotify

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.awt.Frame.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此 <code>Frame</code> 状态的字符串。此方法仅用于调试目的，对于各个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。

@return 此窗体的参数字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Frame.setCursor(int cursorType)
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，由 <code>Component.setCursor(Cursor)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Frame.getCursorType()
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，由 <code>Component.getCursor()</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Frame[] java.awt.Frame.getFrames()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个此应用程序创建的所有 {@code Frame} 所组成的数组。如果从 applet 调用，则数组只包括该 applet 可访问的 {@code Frame}。
 <p>
 <b>警告：</b> 此方法可能返回系统创建的窗体，如 Swing 使用的共享的、隐藏的窗体。应用程序不应该假定这些窗口存在，也不应该假定与这些窗体有关的任何内容（如组件位置、<code>LayoutManager</code> 或序列化）存在。
 <p>
 <b>注</b>：若要获得没有所有者的窗口列表，包括没有所有者的 {@code Dialog}（在版本 1.6 中引入），请使用 {@link Window#getOwnerlessWindows Window.getOwnerlessWindows}。 

 @see Window#getWindows
 @see Window#getOwnerlessWindows

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.Frame.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此窗体有关的 AccessibleContext。对于 frame，AccessibleContext 采用 AccessibleAWTFrame 的形式。如有必要，创建一个新的 AccessibleAWTFrame 实例。

@return 用作此窗体 AccessibleContext 的 AccessibleAWTFrame。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.Frame.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取 <code>ObjectInputStream</code>。尝试读取一个 <code>Image</code> 图标，它是从 1.4 版本开始可用的可选数据。如果有一个 <code>Image</code> 图标不可用，但是已经检测了除 EOF 之外的所有数据，则抛出 <code>OptionalDataException</code>。未识别的键或值将被忽略。

@param s 要读取的 <code>ObjectInputStream</code>
@exception OptionalDataException 如果某个 <code>Image</code> 图标不可用，但是已经检测了除 EOF 之外的所有数据
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless</code> 返回 <code>true</code>
@see java.awt.GraphicsEnvironment#isHeadless()
@see java.awt.Image
@see #getIconImage
@see #setIconImage(Image)
@see #writeObject(ObjectOutputStream)

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.Frame.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将默认的可序列化字段写入流中。写入可选的序列化 <code>Image</code> 图标，从 1.4 版本开始，该图标是可用的。

@param s 要写入的 <code>ObjectOutputStream</code>
@serialData 可选的 <code>Image</code> 图标
@see java.awt.Image
@see #getIconImage
@see #setIconImage(Image)
@see #readObject(ObjectInputStream)

<!-- END DATA -->
