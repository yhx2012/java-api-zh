<!-- BEGIN KEY -->
public class java.awt.MediaTracker extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>MediaTracker</code> 类是一个跟踪多种媒体对象状态的实用工具类。媒体对象可以包括音频剪辑和图像，但目前仅支持图像。
 <p>
要使用媒体跟踪器，需要创建一个 <code>MediaTracker</code> 实例，然后对每个要跟踪的图像调用其 <code>addImage</code> 方法。另外，还可以为每个图像分配一个唯一的标识符。此标识符可控制获取图像的优先级顺序。它还可用于标识可单独等待的唯一图像子集。具有较低 ID 的图像比具有较高 ID 的图像优先加载。 

 <p>

由于动画图像加载和绘制的多部分特性（multi-part nature），跟踪动画图像可能不是始终有用，但这一功能的确受支持。在完成动画图像的第一帧的加载之后，<code>MediaTracker</code> 会认为动画图像已经加载完毕。这时，<code>MediaTracker</code> 会向所有等待者发出图像已完全加载的信号。如果在第一帧加载完之后没有 <code>ImageObserver</code> 查看此图像，则该图像可能会自我刷新来保存资源（请参见 {@link Image#flush()}）。

 <p>
下面是一个使用 <code>MediaTracker</code> 的示例： 
 <p>
 <hr><blockquote><pre>
 import java.applet.Applet;
 import java.awt.Color;
 import java.awt.Image;
 import java.awt.Graphics;
 import java.awt.MediaTracker;

 public class ImageBlaster extends Applet implements Runnable {
	MediaTracker tracker;
	Image bg;
	Image anim[] = new Image[5];
	int index;
	Thread animator;

	// Get the images for the background (id == 0) 
	// and the animation frames (id == 1) 
	// and add them to the MediaTracker
	public void init() {
	    tracker = new MediaTracker(this);
	    bg = getImage(getDocumentBase(), 
                  &quot;images/background.gif&quot;);
	    tracker.addImage(bg, 0);
	    for (int i = 0; i &lt; 5; i++) {
		anim[i] = getImage(getDocumentBase(), 
                      &quot;images/anim&quot;+i+&quot;.gif&quot;);
		tracker.addImage(anim[i], 1);
	    }
	}

	// Start the animation thread.
	public void start() {
	    animator = new Thread(this);
	    animator.start();
	}

	// Stop the animation thread.
	public void stop() {
	    animator = null;
	}

	// Run the animation thread.
	// First wait for the background image to fully load 
	// and paint.  Then wait for all of the animation 
	// frames to finish loading. Finally, loop and 
	// increment the animation frame index.
	public void run() {
	    try {
		tracker.waitForID(0);
		tracker.waitForID(1);
	    } catch (InterruptedException e) {
		return;
	    }
	    Thread me = Thread.currentThread();
	    while (animator == me) {
		try {
		    Thread.sleep(100);
		} catch (InterruptedException e) {
		    break;
		}
		synchronized (this) {
		    index++;
		    if (index &gt;= anim.length) {
			index = 0;
		    }
		}
		repaint();
	    }
	}

	// The background image fills the frame so we 
	// don't need to clear the applet on repaints. 
	// Just call the paint method.
	public void update(Graphics g) {
	    paint(g);
	}

	// Paint a large red rectangle if there are any errors 
	// loading the images.  Otherwise always paint the 
	// background so that it appears incrementally as it 
	// is loading.  Finally, only paint the current animation 
	// frame if all of the frames (id == 1) are done loading,
	// so that we don't get partial animations.
	public void paint(Graphics g) {
	    if ((tracker.statusAll(false) &amp; MediaTracker.ERRORED) != 0) {
		g.setColor(Color.red);
		g.fillRect(0, 0, size().width, size().height);
		return;
	    }
	    g.drawImage(bg, 0, 0, this);
	    if (tracker.statusID(1, false) == MediaTracker.COMPLETE) {
		g.drawImage(anim[index], 10, 10, this);
	    }
	}
 }
 </pre></blockquote><hr>

@version 	1.44, 11/17/05
@author 	Jim Graham
@since        JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.MediaTracker.LOADING
<!-- END KEY -->
<!-- BEGIN DATA -->
指示当前正在加载媒体的标志。
@see         java.awt.MediaTracker#statusAll
@see         java.awt.MediaTracker#statusID

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.MediaTracker.ABORTED
<!-- END KEY -->
<!-- BEGIN DATA -->
指示媒体下载已中止的标志。
@see         java.awt.MediaTracker#statusAll
@see         java.awt.MediaTracker#statusID

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.MediaTracker.ERRORED
<!-- END KEY -->
<!-- BEGIN DATA -->
指示媒体下载出错的标志。
@see         java.awt.MediaTracker#statusAll
@see         java.awt.MediaTracker#statusID

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.MediaTracker.COMPLETE
<!-- END KEY -->
<!-- BEGIN DATA -->
指示媒体下载已成功完成的标志。
@see         java.awt.MediaTracker#statusAll
@see         java.awt.MediaTracker#statusID

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.Component java.awt.MediaTracker.target
<!-- END KEY -->
<!-- BEGIN DATA -->
一个将由媒体跟踪器跟踪的给定 <code>Component</code>，图像最终将在此绘制。

@serial
@see #MediaTracker(Component)

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.MediaEntry java.awt.MediaTracker.head
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>MediaTracker</code> 正在跟踪的 <code>Images</code> 列表的头部。

@serial
@see #addImage(Image, int)
@see #removeImage(Image)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MediaTracker(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建媒体跟踪器以跟踪给定组件的图像。
@param     comp 最终将在其上绘制图像的组件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MediaTracker.addImage(Image image, int id)
<!-- END KEY -->
<!-- BEGIN DATA -->
向此媒体跟踪器正在跟踪的图像列表添加一个图像。该图像最终将以它默认的大小（未缩放）呈现。
@param     image 要跟踪的图像
@param     id 用于跟踪此图像的标识符

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.MediaTracker.addImage(Image image, int id, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
向此媒体跟踪器正在跟踪的图像列表添加一个经过缩放的图像。该图像最终将以指示的宽度和高度呈现。

@param     image 要跟踪的图像
@param     id   一个可用于跟踪此图像的标识符
@param     w    用来呈现图像的宽度
@param     h    用来呈现图像的高度

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.MediaTracker.checkAll()
<!-- END KEY -->
<!-- BEGIN DATA -->
查看此媒体跟踪器正在跟踪的所有图像是否已完成加载。
 <p>
如果图像尚未完成加载，则此方法不能开始加载图像。
 <p>
如果在加载或缩放图像时出错，则该图像被视为已完成加载。使用 <code>isErrorAny</code> 或 <code>isErrorID</code> 方法检查错误。
@return      如果所有图像都已完成加载、发生中止或出错，则返回 <code>true</code>；否则返回 <code>false</code>
@see         java.awt.MediaTracker#checkAll(boolean)
@see         java.awt.MediaTracker#checkID
@see         java.awt.MediaTracker#isErrorAny
@see         java.awt.MediaTracker#isErrorID

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.MediaTracker.checkAll(boolean load)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查此媒体跟踪器正在跟踪的所有图像是否都已完成加载。
 <p>
如果此 <code>load</code> 标志的值为 <code>true</code>，则此方法将开始加载任何尚未加载的图像。 
 <p>
如果在加载或缩放图像时出错，则该图像被视为已完成加载。使用 <code>isErrorAny</code> 和 <code>isErrorID</code> 方法检查错误。
@param       load   如果为 <code>true</code>，则开始加载任何尚未加载的图像
@return      如果所有图像都已完成加载、发生中止或出错，则返回 <code>true</code>；否则返回 <code>false</code>
@see         java.awt.MediaTracker#checkID
@see         java.awt.MediaTracker#checkAll()
@see         java.awt.MediaTracker#isErrorAny()
@see         java.awt.MediaTracker#isErrorID(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.awt.MediaTracker.isErrorAny()
<!-- END KEY -->
<!-- BEGIN DATA -->
检查所有图像的错误状态。
@return   如果此媒体跟踪器跟踪的任何图像在加载期间出错，则返回 <code>true</code>；否则返回 <code>false</code>
@see      java.awt.MediaTracker#isErrorID
@see      java.awt.MediaTracker#getErrorsAny

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Object[] java.awt.MediaTracker.getErrorsAny()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回所有出错媒体的列表。
@return       如果此媒体跟踪器在跟踪媒体对象时出错，则返回一个媒体对象数组；如果不出错，则返回 <code>null</code>
@see          java.awt.MediaTracker#isErrorAny
@see          java.awt.MediaTracker#getErrorsID

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MediaTracker.waitForAll() throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
开始加载由此媒体跟踪器跟踪的所有图像。在完成加载正在跟踪的全部图像之前，此方法一直等待。
 <p>
如果在加载或缩放图像时出错，则该图像被视为已完成加载。使用 <code>isErrorAny</code> 或 <code>isErrorID</code> 方法检查错误。
@see         java.awt.MediaTracker#waitForID(int)
@see         java.awt.MediaTracker#waitForAll(long)
@see         java.awt.MediaTracker#isErrorAny
@see         java.awt.MediaTracker#isErrorID
@exception   InterruptedException  如果任何线程中断了此线程

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.awt.MediaTracker.waitForAll(long ms) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
开始加载由此媒体跟踪器跟踪的所有图像。在完成加载正在跟踪的所有图像之前，或在 <code>ms</code> 参数（以毫秒为单位）指定的时间到期之前，此方法将一直等待。 
 <p>
如果在加载或缩放图像时出错，则认为该图像已完成加载。使用 <code>isErrorAny</code> 或 <code>isErrorID</code> 方法检查错误。
@param       ms       等待加载完成的毫秒数
@return      如果所有图像都成功加载，则返回 <code>true</code>；否则返回 <code>false</code>
@see         java.awt.MediaTracker#waitForID(int)
@see         java.awt.MediaTracker#waitForAll(long)
@see         java.awt.MediaTracker#isErrorAny
@see         java.awt.MediaTracker#isErrorID
@exception   InterruptedException  如果任何线程中断了此线程

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.MediaTracker.statusAll(boolean load)
<!-- END KEY -->
<!-- BEGIN DATA -->
计算并返回此媒体跟踪器跟踪的所有媒体状态的按位<b>或</b>。
 <p>
由 <code>MediaTracker</code> 类定义的可能标志有 <code>LOADING</code>、<code>ABORTED</code>、<code>ERRORED</code> 和 <code>COMPLETE</code>。对于尚未开始加载的图像，其状态值为零。
 <p>
如果 <code>load</code> 值为 <code>true</code>，则此方法开始加载任何尚未加载的图像。

@param        load   如果为 <code>true</code>，则开始加载任何尚未加载的图像
@return       所有正在跟踪媒体状态的按位<b>或</b>
@see          java.awt.MediaTracker#statusID(int, boolean)
@see          java.awt.MediaTracker#LOADING
@see          java.awt.MediaTracker#ABORTED
@see          java.awt.MediaTracker#ERRORED
@see          java.awt.MediaTracker#COMPLETE

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.MediaTracker.checkID(int id)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查由此媒体跟踪器跟踪且使用指定标识符标记的所有图像是否已完成加载。
 <p>
如果图像尚未完成加载，则此方法不能开始加载图像。
 <p>
如果在加载或缩放图像时出错，则认为该图像已完成加载。使用 <code>isErrorAny</code> 或 <code>isErrorID</code> 方法检查错误。
@param       id   要检查的图像标识符
@return      如果所有图像都已完成加载、发生中止或出错，则返回 <code>true</code>；否则返回 <code>false</code>
@see         java.awt.MediaTracker#checkID(int, boolean)
@see         java.awt.MediaTracker#checkAll()
@see         java.awt.MediaTracker#isErrorAny()
@see         java.awt.MediaTracker#isErrorID(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.MediaTracker.checkID(int id, boolean load)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查由此媒体跟踪器跟踪且使用指定标识符标记的所有图像是否已完成加载。
 <p>
如果此 <code>load</code> 标志的值为 <code>true</code>，则此方法将开始加载任何尚未加载的图像。
 <p>
如果在加载或缩放图像时出错，则该图像被视为已完成加载。使用 <code>isErrorAny</code> 或 <code>isErrorID</code> 方法检查错误。
@param       id       要检查的图像标识符
@param       load     如果为 <code>true</code>，则开始加载任何尚未加载的图像。
@return      如果所有图像都已完成加载、发生中止或出错，则返回 <code>true</code>；否则返回 <code>false</code>
@see         java.awt.MediaTracker#checkID(int, boolean)
@see         java.awt.MediaTracker#checkAll()
@see         java.awt.MediaTracker#isErrorAny()
@see         java.awt.MediaTracker#isErrorID(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.awt.MediaTracker.isErrorID(int id)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查由此媒体跟踪器跟踪且具有指定标识符的所有图像的错误状态。
@param        id 要检查图像的标识符
@return       如果具有指定标识符的任何图像在加载期间出错。则返回 <code>true</code>；否则返回 <code>false</code>
@see          java.awt.MediaTracker#isErrorAny
@see          java.awt.MediaTracker#getErrorsID

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Object[] java.awt.MediaTracker.getErrorsID(int id)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回具有出错的指定 ID 的媒体列表。
@param       id   要检查图像的标识符
@return      如果指定的标识符出错，则返回此媒体跟踪器所跟踪媒体对象的数组；如果没有出错，则返回 <code>null</code>
@see         java.awt.MediaTracker#isErrorID
@see         java.awt.MediaTracker#isErrorAny
@see         java.awt.MediaTracker#getErrorsAny

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MediaTracker.waitForID(int id) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
开始加载由此媒体跟踪器跟踪且具有指定标识符的所有图像。在完成加载具有指定标识符的全部图像之前，此方法一直等待。
 <p>
如果在加载或缩放图像时出错，则该图像被视为已完成加载。使用 <code>isErrorAny</code> 和 <code>isErrorID</code> 方法检查错误。
@param         id   要检查图像的标识符
@see           java.awt.MediaTracker#waitForAll
@see           java.awt.MediaTracker#isErrorAny()
@see           java.awt.MediaTracker#isErrorID(int)
@exception     InterruptedException 如果任何线程中止了此线程。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.awt.MediaTracker.waitForID(int id, long ms) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
开始加载由此媒体跟踪器跟踪且具有指定标识符的所有图像。在完成加载具有指定标识符的全部图像之前，或在 <code>ms</code> 参数（以毫秒为单位）指定的时间到期之前，此方法一直等待。
 <p>
如果在加载或缩放图像时出错，则该图像被视为已完成加载。使用 <code>statusID</code>、<code>isErrorID</code> 和 <code>isErrorAny</code> 方法检查错误。
@param         id   要检查图像的标识符
@param         ms   等待加载完成的时间长度（以毫秒为单位）
@see           java.awt.MediaTracker#waitForAll
@see           java.awt.MediaTracker#waitForID(int)
@see           java.awt.MediaTracker#statusID
@see           java.awt.MediaTracker#isErrorAny()
@see           java.awt.MediaTracker#isErrorID(int)
@exception     InterruptedException  如果任何线程中断了此线程

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.MediaTracker.statusID(int id, boolean load)
<!-- END KEY -->
<!-- BEGIN DATA -->
计算或返回由此媒体跟踪器跟踪且具有指定标识符的所有媒体状态的按位<b>或</b>。
 <p>
由 <code>MediaTracker</code> 类定义的可能标志有 <code>LOADING</code>、<code>ABORTED</code>、<code>ERRORED</code> 和 <code>COMPLETE</code>。尚未开始加载的图像，其状态值为零。
 <p>
如果 <code>load</code> 值为 <code>true</code>，则此方法开始加载任何尚未加载的图像。
@param        id   要检查图像的标识符
@param        load   如果为 <code>true</code>，则开始加载任何尚未加载的图像
@return       正在跟踪且具有指定标识符的所有媒体状态的按位<b>或</b>
@see          java.awt.MediaTracker#statusAll(boolean)
@see          java.awt.MediaTracker#LOADING
@see          java.awt.MediaTracker#ABORTED
@see          java.awt.MediaTracker#ERRORED
@see          java.awt.MediaTracker#COMPLETE

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.MediaTracker.removeImage(Image image)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此媒体跟踪器移除指定的图像。不管缩放比例和 ID 如何，所有指定图像的实例都将被移除。
@param   image     要移除的图像
@see     java.awt.MediaTracker#removeImage(java.awt.Image, int)
@see     java.awt.MediaTracker#removeImage(java.awt.Image, int, int, int)
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.MediaTracker.removeImage(Image image, int id)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此媒体跟踪器的指定跟踪 ID 中移除指定的图像。不管缩放比例如何，指定 ID 下的所有正在跟踪的 <code>Image</code> 实例都将被移除。
@param      image 要移除的图像
@param      id 从其移除图像的跟踪 ID
@see        java.awt.MediaTracker#removeImage(java.awt.Image)
@see        java.awt.MediaTracker#removeImage(java.awt.Image, int, int, int)
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.MediaTracker.removeImage(Image image, int id, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此媒体跟踪器移除具有指定宽度、高度和 ID 的指定图像。仅移除指定的实例（以及任何重复实例）。
@param   image 要移除的图像
@param   id 从其移除图像的跟踪 ID
@param   width 要移除的宽度（-1 为未缩放）
@param   height 要移除的高度（-1 为未缩放）
@see     java.awt.MediaTracker#removeImage(java.awt.Image)
@see     java.awt.MediaTracker#removeImage(java.awt.Image, int)
@since   JDK1.1

<!-- END DATA -->
