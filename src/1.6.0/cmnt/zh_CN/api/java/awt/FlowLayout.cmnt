<!-- BEGIN KEY -->
public class java.awt.FlowLayout extends java.lang.Object implements java.awt.LayoutManager, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
流布局用于安排有向流中的组件，这非常类似于段落中的文本行。流的方向取决于容器的 <code>componentOrientation</code> 属性，它可能是以下两个值中的一个： 
 <ul>
 <li><code>ComponentOrientation.LEFT_TO_RIGHT</code>
 <li><code>ComponentOrientation.RIGHT_TO_LEFT</code>
 </ul>
流布局一般用来安排面板中的按钮。它使得按钮呈水平放置，直到同一条线上再也没有适合的按钮。线的对齐方式由 <code>align</code> 属性确定。可能的值为：
 <ul>
 <li>{@link #LEFT LEFT}
 <li>{@link #RIGHT RIGHT}
 <li>{@link #CENTER CENTER}
 <li>{@link #LEADING LEADING}
 <li>{@link #TRAILING TRAILING}
 </ul>
 <p>
例如，以下图片显示了使用流布局管理器（它的默认布局管理器）来定位三个按钮的 applet：
 <p>
<img src="doc-files/FlowLayout-1.gif"
 ALT="三个按钮的布局图形"
 ALIGN=center HSPACE=10 VSPACE=7>
 <p>
以下是此 applet 的代码：
 <p>
 <hr><blockquote><pre>
 import java.awt.*;
 import java.applet.Applet;

 public class myButtons extends Applet {
     Button button1, button2, button3;
     public void init() {
         button1 = new Button(&quot;Ok&quot;);
         button2 = new Button(&quot;Open&quot;);
         button3 = new Button(&quot;Close&quot;);
         add(button1);
         add(button2);
         add(button3);
     }
 }
 </pre></blockquote><hr>
 <p>
流布局把每个组件都假定为它的自然（首选）大小。

@version     1.58, 11/17/05
@author 	Arthur van Hoff
@author 	Sami Shaio
@since       JDK1.0
@see ComponentOrientation

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.FlowLayout.LEFT
<!-- END KEY -->
<!-- BEGIN DATA -->
此值指示每一行组件都应该是左对齐的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.FlowLayout.CENTER
<!-- END KEY -->
<!-- BEGIN DATA -->
此值指示每一行组件都应该是居中的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.FlowLayout.RIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
此值指示每一行组件都应该是右对齐的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.FlowLayout.LEADING
<!-- END KEY -->
<!-- BEGIN DATA -->
此值指示每一行组件都应该与容器方向的开始边对齐，例如，对于从左到右的方向，则与左边对齐。

@see     java.awt.Component#getComponentOrientation
@see     java.awt.ComponentOrientation
@since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.FlowLayout.TRAILING
<!-- END KEY -->
<!-- BEGIN DATA -->
此值指示每行组件都应该与容器方向的结束边对齐，例如，对于从左到右的方向，则与右边对齐。

@see     java.awt.Component#getComponentOrientation
@see     java.awt.ComponentOrientation
@since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.FlowLayout.align
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>align</code> 属性确定每行如何分布空格。它可能是以下值之一：
 <ul>
 <code>LEFT</code> <code>RIGHT</code> <code>CENTER</code> <code>LEADING</code> <code>TRAILING</code>
 </ul>

@serial
@see #getAlignment
@see #setAlignment

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.FlowLayout.newAlign
<!-- END KEY -->
<!-- BEGIN DATA -->
对于 Java 2 平台 v1.2 和更高版本，<code>newAlign</code> 属性确定每行如何分布空格。它可能是以下三个值之一：
 <ul>
 <code>LEFT</code> <code>RIGHT</code> <code>CENTER</code> <code>LEADING</code> <code>TRAILING</code>
 </ul>

@serial
@since 1.2
@see #getAlignment
@see #setAlignment

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.FlowLayout.hgap
<!-- END KEY -->
<!-- BEGIN DATA -->
流布局管理器允许分隔带间隙的组件。水平间隙将指定组件之间的空格以及组件与 <code>Container</code> 的边之间的空格。

@serial
@see #getHgap()
@see #setHgap(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.FlowLayout.vgap
<!-- END KEY -->
<!-- BEGIN DATA -->
流布局管理器允许分隔带间隙的组件。垂直间隙将指定行之间的空格以及行与 <code>Container</code> 的边之间的空格。

@serial
@see #getHgap()
@see #setHgap(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean java.awt.FlowLayout.alignOnBaseline
<!-- END KEY -->
<!-- BEGIN DATA -->
如果组件将沿着其基线对齐，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.FlowLayout.serialVersionOnStream
<!-- END KEY -->
<!-- BEGIN DATA -->
表示正被使用的 <code>currentSerialVersion</code>。它将是以下两个值之一：<code>0</code>，Java 2 平台 v1.2 之前的版本<code>1</code>，Java 2 平台 v1.2 之后的版本

@serial
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FlowLayout()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的 <code>FlowLayout</code>，它是居中对齐的，默认的水平和垂直间隙是 5 个单位。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FlowLayout(int align)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的 <code>FlowLayout</code>，它具有指定的对齐方式，默认的水平和垂直间隙是 5 个单位。align 参数的值必须是以下值之一：<code>FlowLayout.LEFT</code>、<code>FlowLayout.RIGHT</code>、<code>FlowLayout.CENTER</code>、<code>FlowLayout.LEADING</code> 或 <code>FlowLayout.TRAILING</code>。
@param align 对齐值

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FlowLayout(int align, int hgap, int vgap)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的流布局管理器，它具有指定的对齐方式以及指定的水平和垂直间隙。
 <p>
align 参数的值必须是以下值之一：<code>FlowLayout.LEFT</code>、<code>FlowLayout.RIGHT</code>、<code>FlowLayout.CENTER</code>、<code>FlowLayout.LEADING</code> 或 <code>FlowLayout.TRAILING</code>。
@param      align   对齐值
@param      hgap    组件之间以及组件与 <code>Container</code> 的边之间的水平间隙
@param      vgap    组件之间以及组件与 <code>Container</code> 的边之间的垂直间隙

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FlowLayout.getAlignment()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此布局的对齐方式。可能的值是 <code>FlowLayout.LEFT</code>、<code>FlowLayout.RIGHT</code>、<code>FlowLayout.CENTER</code>、<code>FlowLayout.LEADING</code> 或 <code>FlowLayout.TRAILING</code>。
@return     此布局的对齐值
@see        java.awt.FlowLayout#setAlignment
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FlowLayout.setAlignment(int align)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此布局的对齐方式。可能的值是
 <ul>
 <li><code>FlowLayout.LEFT</code>
 <li><code>FlowLayout.RIGHT</code>
 <li><code>FlowLayout.CENTER</code>
 <li><code>FlowLayout.LEADING</code>
 <li><code>FlowLayout.TRAILING</code>
 </ul>
@param      align 上面显示的对齐值之一
@see        #getAlignment()
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FlowLayout.getHgap()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取组件之间以及组件与 <code>Container</code> 的边之间的水平间隙。

@return     组件之间以及组件与 <code>Container</code> 的边之间的水平间隙
@see        java.awt.FlowLayout#setHgap
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FlowLayout.setHgap(int hgap)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置组件之间以及组件与 <code>Container</code> 的边之间的水平间隙。

@param hgap 组件之间以及组件与 <code>Container</code> 的边之间的水平间隙
@see        java.awt.FlowLayout#getHgap
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FlowLayout.getVgap()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取组件之间以及组件与 <code>Container</code> 的边之间的垂直间隙。

@return     组件之间以及组件与 <code>Container</code> 的边之间的垂直间隙
@see        java.awt.FlowLayout#setVgap
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FlowLayout.setVgap(int vgap)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置组件之间以及组件与 <code>Container</code> 的边之间的垂直间隙。

@param vgap 组件之间以及组件与 <code>Container</code> 的边之间的垂直间隙
@see        java.awt.FlowLayout#getVgap
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FlowLayout.setAlignOnBaseline(boolean alignOnBaseline)
<!-- END KEY -->
<!-- BEGIN DATA -->
 设置组件是否应该沿着其基线垂直对齐。没有基线的组件将中心对齐。默认值为 false。

 @param alignOnBaseline 组件是否应该沿着其基线垂直对齐
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.FlowLayout.getAlignOnBaseline()
<!-- END KEY -->
<!-- BEGIN DATA -->
 如果组件将沿其基线垂直对齐，则返回 true。默认值为 false。

 @return true 如果组件将沿其基线垂直对齐
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FlowLayout.addLayoutComponent(String name, Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的组件添加到布局中。不能被此类使用。
@param name 组件的名称
@param comp 要添加的组件

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FlowLayout.removeLayoutComponent(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
从布局中移除指定的组件。不能被此类使用。
@param comp 要移除的组件
@see       java.awt.Container#removeAll

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.FlowLayout.preferredLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
给出指定目标容器中的 <i>visible</i> 组件，返回此布局的首选维数。

@param target 需要布置的容器
@return    布置指定容器的子组件的首选维数
@see Container
@see #minimumLayoutSize
@see       java.awt.Container#getPreferredSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.FlowLayout.minimumLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回需要布置 <i>visible</i> 组件的最小维数，该组件包含在指定的目标容器中。
@param target 需要布置的容器
@return    布置指定容器的子组件的最小维数
@see #preferredLayoutSize
@see       java.awt.Container
@see       java.awt.Container#doLayout

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FlowLayout.layoutContainer(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
布置该容器。此方法让每个 <i>visible</i> 组件都采用它的首选大小，这通过对目标容器中的组件进行整形得以实现，以满足此 <code>FlowLayout</code> 对象的对齐方式。

@param target 正被布置的指定组件
@see Container
@see       java.awt.Container#doLayout

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.FlowLayout.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>FlowLayout</code> 对象及其值的字符串表示形式。
@return     此布局的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.FlowLayout.readObject(ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从序列化流读取此对象，处理由类的较旧版本写入的对象，该版本不包含我们现在使用的所有字段。

<!-- END DATA -->
