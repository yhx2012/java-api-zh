<!-- BEGIN KEY -->
public class java.awt.CardLayout extends java.lang.Object implements java.awt.LayoutManager2, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>CardLayout</code> 对象是容器的布局管理器。它将容器中的每个组件看作一张卡片。一次只能看到一张卡片，容器则充当卡片的堆栈。当容器第一次显示时，第一个添加到 <code>CardLayout</code> 对象的组件为可见组件。
 <p>
卡片的顺序由组件对象本身在容器内部的顺序决定。<code>CardLayout</code> 定义了一组方法，这些方法允许应用程序按顺序地浏览这些卡片，或者显示指定的卡片。{@link CardLayout#addLayoutComponent} 方法可用于将一个字符串标识符与给定卡片关联，以便进行快速随机访问。

@version 	1.42 03/28/06
@author 	Arthur van Hoff
@see         java.awt.Container
@since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] java.awt.CardLayout.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
@serialField tab	     Hashtable 已过时，仅用于向前兼容
@serialField hgap        int
@serialField vgap        int
@serialField vector      Vector
@serialField currentCard int

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.CardLayout()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个间距大小为 0 的新卡片布局。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.CardLayout(int hgap, int vgap)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定水平间距和垂直间距的新卡片布局。水平间距置于左右边缘。垂直间距置于上下边缘。
@param     hgap   水平间距。
@param     vgap   垂直间距。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.CardLayout.getHgap()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取组件之间的水平间距。
@return    组件之间的水平间距。
@see       java.awt.CardLayout#setHgap(int)
@see       java.awt.CardLayout#getVgap()
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.CardLayout.setHgap(int hgap)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置组件之间的水平间距。
@param hgap   组件之间的水平间距。
@see       java.awt.CardLayout#getHgap()
@see       java.awt.CardLayout#setVgap(int)
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.CardLayout.getVgap()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取组件之间的垂直间距。
@return 组件之间的垂直间距。
@see       java.awt.CardLayout#setVgap(int)
@see       java.awt.CardLayout#getHgap()

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.CardLayout.setVgap(int vgap)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置组件之间的垂直间距。
@param     vgap 组件之间的垂直间距。
@see       java.awt.CardLayout#getVgap()
@see       java.awt.CardLayout#setHgap(int)
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.CardLayout.addLayoutComponent(Component comp, Object constraints)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的组件添加到此卡片布局的内部名称表。<code>constraints</code> 指定的对象必须是一个字符串。卡片布局将此字符串作为一个键-值对存储起来，该键-值对可用于对特定卡片的随机访问。通过调用 <code>show</code> 方法，应用程序可以显示具有指定名称的组件。
@param   comp   要添加的组件。
@param     constraints   标识布局中特定卡片的标记。
@see       java.awt.CardLayout#show(java.awt.Container, java.lang.String)
@exception  IllegalArgumentException  如果 constraint 不是一个字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.CardLayout.addLayoutComponent(String name, Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated   由 <code>addLayoutComponent(Component, Object)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.CardLayout.removeLayoutComponent(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
从布局中移除指定的组件。如果顶部的卡片可见，则紧挨其下方的下一张卡片也将显示。
@param   comp   要移除的组件。
@see     java.awt.Container#remove(java.awt.Component)
@see     java.awt.Container#removeAll()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.CardLayout.preferredLayoutSize(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用此卡片布局确定容器参数的首选大小。
@param   parent 要在其中进行布局的父容器
@return  布置指定容器子组件的首选尺寸
@see     java.awt.Container#getPreferredSize
@see     java.awt.CardLayout#minimumLayoutSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.CardLayout.minimumLayoutSize(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
计算指定面板大小的最小值。
@param     parent 要在其中进行布局的父容器
@return    布置指定容器子组件所需的最小尺寸
@see       java.awt.Container#doLayout
@see       java.awt.CardLayout#preferredLayoutSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.CardLayout.maximumLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
给出指定目标容器中的组件，返回此布局的最大尺寸。
@param target 需要布局的组件
@see Container
@see #minimumLayoutSize
@see #preferredLayoutSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.CardLayout.getLayoutAlignmentX(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回沿 x 轴的对齐方式。这指定了如何相对于其他组件来对齐该组件。返回值应该在 0 和 1 之间，其中 0 表示根据原点进行对齐，1 表示根据距离原点最远的点对齐，0.5 表示居中对齐等等。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.CardLayout.getLayoutAlignmentY(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回沿 y 轴的对齐方式。这指定了如何相对于其他组件来对齐该组件。返回值应该在 0 和 1 之间，其中 0 表示根据原点进行对齐，1 表示根据距离原点最远的点对齐，0.5 表示居中对齐等等。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.CardLayout.invalidateLayout(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
使布局无效，指示如果布局管理器缓存了信息，则应该将其丢弃。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.CardLayout.layoutContainer(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用此卡片布局布置指定的容器。
 <p>
<code>parent</code> 容器中每个组件的尺寸要变为容器尺寸减去组件四周 insets 的空间，再减去水平间距和垂直间距。

@param     parent 要在其中进行布局的父容器
@see       java.awt.Container#doLayout

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.CardLayout.first(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
翻转到容器的第一张卡片。
@param     parent 要在其中进行布局的父容器
@see       java.awt.CardLayout#last

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.CardLayout.next(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
翻转到指定容器的下一张卡片。如果当前的可见卡片是最后一个，则此方法翻转到布局的第一张卡片。
@param     parent 要在其中进行布局的父容器
@see       jjava.awt.CardLayout#previous

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.CardLayout.previous(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
翻转到指定容器的前一张卡片。如果当前的可见卡片是第一个，则此方法翻转到布局的最后一张卡片。
@param     parent 要在其中进行布局的父容器
@see       java.awt.CardLayout#next

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.CardLayout.last(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
翻转到容器的最后一张卡片。
@param     parent 要在其中进行布局的父容器
@see       java.awt.CardLayout#first

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.CardLayout.show(Container parent, String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
翻转到使用 <code>addLayoutComponent</code> 添加到此布局的具有指定 <code>name</code> 的组件。如果不存在这样的组件，则不发生任何操作。
@param     parent   要在其中进行布局的父容器
@param     name     组件名称
@see       java.awt.CardLayout#addLayoutComponent(java.awt.Component, java.lang.Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.CardLayout.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此卡片布局状态的字符串表示形式。
@return  此卡片布局的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.CardLayout.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流中读取可序列化的字段。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.CardLayout.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
向流中写入可序列化的字段。

<!-- END DATA -->
