<!-- BEGIN KEY -->
public final class java.awt.font.NumericShaper extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>NumericShaper</code> 类用于将 Latin-1（欧洲语）数字转换成其他 Unicode 十进制数字。此类的用户主要是那些希望使用民族数字形状显示数据，但又发现使用 Latin-1（欧洲语）数字内部表示该数据更方便的人。此类不能解释过时的数字形状选择器字符 (U+206E)。
 <p>
<code>NumericShaper</code> 的实例通常用作具有 <code>TextAttribute</code> 类的 {@link TextAttribute#NUMERIC_SHAPING NUMERIC_SHAPING} 属性的文本属性。例如，以下代码片段可使 <code>TextLayout</code> 将欧洲数字转换成阿拉伯语上下文中的阿拉伯数字：<br>
 <blockquote><pre>
 Map map = new HashMap();
 map.put(TextAttribute.NUMERIC_SHAPING, 
     NumericShaper.getContextualShaper(NumericShaper.ARABIC));
 FontRenderContext frc = ...;
 TextLayout layout = new TextLayout(text, map, frc);
 layout.draw(g2d, x, y);
 </pre></blockquote>
<br>它还可能使用 <code>NumericShaper</code> 的实例显式执行数字成形，如以下代码片断所演示的：<br>
 <blockquote><pre>
   char[] text = ...;
   // shape all EUROPEAN digits (except zero) to ARABIC digits
   NumericShaper shaper = NumericShaper.getShaper(NumericShaper.ARABIC);
   shaper.shape(text, start, count);

   // shape European digits to ARABIC digits if preceding text is Arabic, or
   // shape European digits to TAMIL digits if preceding text is Tamil, or
   // leave European digits alone if there is no preceding text, or 
   // preceding text is neither Arabic nor Tamil
   NumericShaper shaper = 
      NumericShaper.getContextualShaper(NumericShaper.ARABIC | 
                                              NumericShaper.TAMIL,
                                              NumericShaper.EUROPEAN);
   shaper.shape(text. start, count);
 </pre></blockquote>

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.EUROPEAN
<!-- END KEY -->
<!-- BEGIN DATA -->
标识 Latin-1（欧洲语）和扩展范围，以及 Latin-1（欧洲语）十进制基数。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.ARABIC
<!-- END KEY -->
<!-- BEGIN DATA -->
标识 ARABIC 范围和十进制基数。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.EASTERN_ARABIC
<!-- END KEY -->
<!-- BEGIN DATA -->
标识 ARABIC 范围和 ARABIC_EXTENDED 十进制基数。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.DEVANAGARI
<!-- END KEY -->
<!-- BEGIN DATA -->
标识 DEVANAGARI 范围和十进制基数。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.BENGALI
<!-- END KEY -->
<!-- BEGIN DATA -->
标识 BENGALI 范围和十进制基数。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.GURMUKHI
<!-- END KEY -->
<!-- BEGIN DATA -->
标识 GURMUKHI 范围和十进制基数。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.GUJARATI
<!-- END KEY -->
<!-- BEGIN DATA -->
标识 GUJARATI 范围和十进制基数。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.ORIYA
<!-- END KEY -->
<!-- BEGIN DATA -->
标识 ORIYA 范围和十进制基数。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.TAMIL
<!-- END KEY -->
<!-- BEGIN DATA -->
标识 TAMIL 范围和十进制基数。泰米尔语没有十进制数字 0，所以使用 Latin-1（欧洲语）0。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.TELUGU
<!-- END KEY -->
<!-- BEGIN DATA -->
标识 TELUGU 范围和十进制基数。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.KANNADA
<!-- END KEY -->
<!-- BEGIN DATA -->
标识 KANNADA 范围和十进制基数。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.MALAYALAM
<!-- END KEY -->
<!-- BEGIN DATA -->
标识 MALAYALAM 范围和十进制基数。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.THAI
<!-- END KEY -->
<!-- BEGIN DATA -->
标识 THAI 范围和十进制基数。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.LAO
<!-- END KEY -->
<!-- BEGIN DATA -->
标识 LAO 范围和十进制基数。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.TIBETAN
<!-- END KEY -->
<!-- BEGIN DATA -->
标识 TIBETAN 范围和十进制基数。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.MYANMAR
<!-- END KEY -->
<!-- BEGIN DATA -->
标识 MYANMAR 范围和十进制基数。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.ETHIOPIC
<!-- END KEY -->
<!-- BEGIN DATA -->
标识 ETHIOPIC 范围和十进制基数。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.KHMER
<!-- END KEY -->
<!-- BEGIN DATA -->
标识 KHMER 范围和十进制基数。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.MONGOLIAN
<!-- END KEY -->
<!-- BEGIN DATA -->
标识 MONGOLIAN 范围和十进制基数。
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.ALL_RANGES
<!-- END KEY -->
<!-- BEGIN DATA -->
标识所有的范围，用于完整的上下文成形。
<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.font.NumericShaper.key
<!-- END KEY -->
<!-- BEGIN DATA -->
针对上下文成形的上下文索引，值的范围是 0 到 18
<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.font.NumericShaper.mask
<!-- END KEY -->
<!-- BEGIN DATA -->
 此标志指示是否以上下文方式成形（高位），以及要成形哪些数字范围（0-18 位）

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.font.NumericShaper java.awt.font.NumericShaper.getShaper(int singleRange)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回所提供的 unicode 范围的成形器。将所有 Latin-1（欧洲语）数字转换成相应的十进制 unicode 数字。
@param singleRange 指定的 Unicode 范围
@return 非上下文的数字成形器
@throws IllegalArgumentException 如果范围不是单个范围

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.font.NumericShaper java.awt.font.NumericShaper.getContextualShaper(int ranges)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回提供的 unicode 范围的上下文成形器。将 Latin-1（欧洲语）数字转换成与前述文本范围对应的十进制数字（如果该范围是提供的范围之一）。通过或操作连接这些值（如 <code>NumericShaper.ARABIC | NumericShaper.THAI</code>）来表示多个范围。该成形器假定 EUROPEAN 为初始上下文，即如果在字符串中在任何强方向文本之前碰到 EUROPEAN 数字，则该上下文将被假定为 EUROPEAN，因此将不成形数字。
@param ranges 指定的 Unicode 范围
@return 指定范围的成形器

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.font.NumericShaper java.awt.font.NumericShaper.getContextualShaper(int ranges, int defaultContext)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回提供的 unicode 范围的上下文成形器。将 Latin-1（欧洲语）数字转换成与前述文本范围对应的十进制数字（如果该范围是提供的范围之一）。通过或操作连接这些值（例如 <code>NumericShaper.ARABIC | NumericShaper.THAI</code>）来表示多个范围。该成形器将 defaultContext 用作初始上下文。
@param ranges 指定的 Unicode 范围
@param defaultContext 初始上下文，如 <code>NumericShaper.EUROPEAN</code>
@return 指定 Unicode 范围的成形器。
@throws IllegalArgumentException 如果指定的 <code>defaultContext</code> 不是一个有效范围。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.font.NumericShaper.shape(char[] text, int start, int count)
<!-- END KEY -->
<!-- BEGIN DATA -->
转换文本中在 start 和 start + count 之间出现的数字。
@param text 要转换的字符数组
@param start 要开始转换的 <code>text</code> 的索引
@param count 要转换的 <code>text</code> 中的字符数
@throws IndexOutOfBoundsException 如果 start 或 start + count 超出范围
@throws NullPointerException 如果 text 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.font.NumericShaper.shape(char[] text, int start, int count, int context)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用提供的上下文，转换文本中在 start 和 start + count 之间出现的数字。如果该成形器不是上下文成形器，则忽略上下文。
@param text 字符数组
@param start 要开始转换的 <code>text</code> 的索引
@param count 要转换的 <code>text</code> 中的字符数
@param context 向其转换字符（如 <code>NumericShaper.EUROPEAN</code>）的上下文
@throws IndexOutOfBoundsException 如果 start 或 start + count 超出范围
@throws NullPointerException 如果 text 为 null
@throws IllegalArgumentException 如果这是一个上下文成形器，并且指定的 <code>context</code> 不是一个有效范围。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.font.NumericShaper.isContextual()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>boolean</code> 值，指示此成形器是否以上下文方式成形。
@return 如果此成形器是上下文的，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.font.NumericShaper.getRanges()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>int</code>，它使用或操作 (OR) 连接所有将成形的范围的值。
 <p>
例如，要检查成形器是否成形阿拉伯数字，应使用以下语句：
 <blockquote>
   <code>if ((shaper.getRanges() & shaper.ARABIC) != 0) { ... </code>
 </blockquote>
@return 要成形的所有范围的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.font.NumericShaper.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此成形器的哈希码。
@return 此成形器的哈希码。
@see java.lang.Object#hashCode

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.font.NumericShaper.equals(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果指定的对象是 <code>NumericShaper</code> 的一个实例，并且完全一致地成形到此实例，则返回 true。
@param o 要与此 <code>NumericShaper</code> 进行比较的指定对象
@return 如果 <code>o</code> 是 <code>NumericShaper</code> 的一个实例，并且以相同的方式成形，则返回 <code>true</code>；否则返回 <code>false</code>。
@see java.lang.Object#equals(java.lang.Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.font.NumericShaper.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述此成形器的 <code>String</code>。该方法仅用于调试目的。
@return 描述此成形器的 <code>String</code>。

<!-- END DATA -->
