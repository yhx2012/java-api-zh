<!-- BEGIN KEY -->
public final class java.awt.font.TextAttribute extends java.text.AttributedCharacterIterator.Attribute
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>TextAttribute</code> 类定义用于呈现文本的属性键和属性值。 
 <p>
<code>TextAttribute</code> 实例被用作属性键，标识 {@link java.awt.Font Font}、{@link java.awt.font.TextLayout TextLayout}、{@link java.text.AttributedCharacterIterator AttributedCharacterIterator} 和其他处理文本属性的类中的属性。此类中定义的其他常量可以用作属性值。
 <p>
对于每个文本属性，文档提供了：
 <UL>
<LI>其值的类型，
<LI>相关预定义常量（如果有）
<LI>属性不存在时的默认效果
<LI>有限制时的有效值
<LI>效果的描述。
 </UL>
 <p>
<H4>值</H4>
 <UL>
<LI>属性值必须始终是不可变的。
<LI>在给出值限制的情况下，限制集合以外的任何值都是为将来使用保留的，该值将被视为默认值。
<LI><code>null</code> 值将被视为默认值并导致默认行为。
<li>如果值的类型不正确，则忽略该属性。
<li>值的标识无关紧要，只要是实际值即可。例如，<code>TextAttribute.WEIGHT_BOLD</code> 和 <code>new Float(2.0)</code> 指示相同的 <code>WEIGHT</code>。
<li><code>Number</code> 类型的属性值（用于 <code>WEIGHT</code>、<code>WIDTH</code>、<code>POSTURE</code>、<code>SIZE</code>、<code>JUSTIFICATION</code> 和 <code>TRACKING</code>）随其自然范围的变化而变化，且不受预定义常量的限制。<code>Number.floatValue()</code> 用于从 <code>Number</code> 中获取实际值。
<li><code>WEIGHT</code>、<code>WIDTH</code> 和 <code>POSTURE</code> 的值由系统插入，系统可以选择&ldquo;最适用的&rdquo;字体或者其他技巧来大致满足用户请求。

 </UL>
 
<h4>属性摘要</h4>
 <p>
 <font size="-1">
 <table align="center" border="0" cellspacing="0" cellpadding="2" width="%95"
     summary="Key, value type, principal constants, and default value
     behavior of all TextAttributes">
 <tr bgcolor="#ccccff">
<th valign="TOP" align="CENTER">键</th>
<th valign="TOP" align="CENTER">值类型</th>
<th valign="TOP" align="CENTER">主要常量</th>
<th valign="TOP" align="CENTER">默认值</th>
 </tr>
 <tr>
<td valign="TOP">{@link #FAMILY}</td>
<td valign="TOP">String</td>
<td valign="TOP">请参阅 Font {@link java.awt.Font#DIALOG DIALOG}、{@link java.awt.Font#DIALOG_INPUT DIALOG_INPUT}、<br>{@link java.awt.Font#SERIF SERIF}、{@link java.awt.Font#SANS_SERIF SANS_SERIF} 和 {@link java.awt.Font#MONOSPACED MONOSPACED}。
</td>
<td valign="TOP">&quot;Default&quot;（使用平台默认值）</td>
 </tr> 
 <tr bgcolor="#eeeeff">
<td valign="TOP">{@link #WEIGHT}</td>
<td valign="TOP">Number</td>
<td valign="TOP">WEIGHT_REGULAR、WEIGHT_BOLD</td>
<td valign="TOP">WEIGHT_REGULAR</td>
 </tr>
 <tr>
<td valign="TOP">{@link #WIDTH}</td>
<td valign="TOP">Number</td>
<td valign="TOP">WIDTH_CONDENSED、WIDTH_REGULAR 、<br>WIDTH_EXTENDED</td>
<td valign="TOP">WIDTH_REGULAR</td>
 </tr>
 <tr bgcolor="#eeeeff">
<td valign="TOP">{@link #POSTURE}</td>
<td valign="TOP">Number</td>
<td valign="TOP">POSTURE_REGULAR、POSTURE_OBLIQUE</td>
<td valign="TOP">POSTURE_REGULAR</td>
 </tr>
 <tr>
<td valign="TOP">{@link #SIZE}</td>
<td valign="TOP">Number</td>
<td valign="TOP">无</td>
 <td valign="TOP">12.0</td>
 </tr>
 <tr bgcolor="#eeeeff">
<td valign="TOP">{@link #TRANSFORM}</td>
<td valign="TOP">{@link TransformAttribute}</td>
<td valign="TOP">请参阅 TransformAttribute {@link TransformAttribute#IDENTITY IDENTITY}</td>
<td valign="TOP">TransformAttribute.IDENTITY</td>
 </tr>
 <tr>
<td valign="TOP">{@link #SUPERSCRIPT}</td>
<td valign="TOP">Integer</td>
<td valign="TOP">SUPERSCRIPT_SUPER、SUPERSCRIPT_SUB</td>
<td valign="TOP">0（使用标准字形和规格）</td>
 </tr>
 <tr bgcolor="#eeeeff">
<td valign="TOP">{@link #FONT}</td>
<td valign="TOP">{@link java.awt.Font}</td>
<td valign="TOP">无</td>
<td valign="TOP">null（不重写字体分辨率）</td>
 </tr>
 <tr>
<td valign="TOP">{@link #CHAR_REPLACEMENT}</td>
<td valign="TOP">{@link GraphicAttribute}</td>
<td valign="TOP">无</td>
<td valign="TOP">null（使用字体字形绘制文本）</td>
 </tr>
 <tr bgcolor="#eeeeff">
<td valign="TOP">{@link #FOREGROUND}</td>
<td valign="TOP">{@link java.awt.Paint}</td>
<td valign="TOP">无</td>
<td valign="TOP">null（使用当前图形绘制）</td>
 </tr>
 <tr>
<td valign="TOP">{@link #BACKGROUND}</td>
<td valign="TOP">{@link java.awt.Paint}</td>
<td valign="TOP">无</td>
<td valign="TOP">null（不呈现背景）</td>
 </tr>
 <tr bgcolor="#eeeeff">
<td valign="TOP">{@link #UNDERLINE}</td>
<td valign="TOP">Integer</td>
<td valign="TOP">UNDERLINE_ON</td>
<td valign="TOP">-1（不呈现下划线）</td>
 </tr>
 <tr>
<td valign="TOP">{@link #STRIKETHROUGH}</td>
<td valign="TOP">Boolean</td>
<td valign="TOP">STRIKETHROUGH_ON</td>
<td valign="TOP">false（不呈现删除线）</td>
 </tr>
 <tr bgcolor="#eeeeff">
<td valign="TOP">{@link #RUN_DIRECTION}</td>
<td valign="TOP">Boolean</td>
<td valign="TOP">RUN_DIRECTION_LTR、<br>RUN_DIRECTION_RTL</td>
<td valign="TOP">null（使用 {@link java.text.Bidi} 标准默认值）</td>
 </tr>
 <tr>
<td valign="TOP">{@link #BIDI_EMBEDDING}</td>
<td valign="TOP">Integer</td>
<td valign="TOP">无</td>
<td valign="TOP">0（使用基线方向）</td>
 </tr>
 <tr bgcolor="#eeeeff">
<td valign="TOP">{@link #JUSTIFICATION}</td>
<td valign="TOP">Number</td>
<td valign="TOP">JUSTIFICATION_FULL</td>
<td valign="TOP">JUSTIFICATION_FULL</td>
 </tr>
 <tr>
<td valign="TOP">{@link #INPUT_METHOD_HIGHLIGHT}</td>
<td valign="TOP">{@link java.awt.im.InputMethodHighlight} 和 <br>{@link java.text.Annotation}</td>
<td valign="TOP">（参见类）</td>
<td valign="TOP">null（不应用输入高亮显示）</td>
 </tr>
 <tr bgcolor="#eeeeff">
<td valign="TOP">{@link #INPUT_METHOD_UNDERLINE}</td>
<td valign="TOP">Integer</td>
<td valign="TOP">UNDERLINE_LOW_ONE_PIXEL、<br>UNDERLINE_LOW_TWO_PIXEL</td>
<td valign="TOP">-1（不呈现下划线）</td>
 </tr>
 <tr>
<td valign="TOP">{@link #SWAP_COLORS}</td>
<td valign="TOP">Boolean</td>
<td valign="TOP">SWAP_COLORS_ON</td>
<td valign="TOP">false（不交换颜色）</td>
 </tr>
 <tr bgcolor="#eeeeff">
<td valign="TOP">{@link #NUMERIC_SHAPING}</td>
<td valign="TOP">{@link java.awt.font.NumericShaper}</td>
<td valign="TOP">无</td>
<td valign="TOP">null（不对数字进行定形）</td>
 </tr>
 <tr>
<td valign="TOP">{@link #KERNING}</td>
<td valign="TOP">Integer</td>
<td valign="TOP">KERNING_ON</td>
<td valign="TOP">0（不要求进行字距调整）</td>
 </tr>
 <tr bgcolor="#eeeeff">
<td valign="TOP">{@link #LIGATURES}</td>
<td valign="TOP">Integer</td>
<td valign="TOP">LIGATURES_ON</td>
<td valign="TOP">0（不形成可选的连字）</td>
 </tr>
 <tr>
<td valign="TOP">{@link #TRACKING}</td>
<td valign="TOP">Number</td>
<td valign="TOP">TRACKING_LOOSE、TRACKING_TIGHT</td>
<td valign="TOP">0（不添加跟踪）</td>
 </tr>
 </table>
 </font>

@see java.awt.Font
@see java.awt.font.TextLayout
@see java.text.AttributedCharacterIterator 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.FAMILY
<!-- END KEY -->
<!-- BEGIN DATA -->
字体名称的属性键。这些值是 <b><code>String</code></b> 的实例。默认值是 <code>&quot;Default&quot;</code>，该值导致使用平台默认字体系列。 
 
<p> <code>Font</code> 类定义用于逻辑字体名称 {@link java.awt.Font#DIALOG DIALOG}、{@link java.awt.Font#DIALOG_INPUT DIALOG_INPUT}、{@link java.awt.Font#SANS_SERIF SANS_SERIF}、{@link java.awt.Font#SERIF SERIF} 和 {@link java.awt.Font#MONOSPACED MONOSPACED} 的常量。
 
<p>这定义了作为 <code>name</code> 传递给 <code>Font</code> 构造方法的值。逻辑字体名称和实际字体名称都允许使用。如果没有发现具有所请求名称的字体，则使用默认字体。
 
<p><em>注：</em>此属性不幸被错误命名，因为它指定了外观名称，而不只是系列名称。因此，&ldquo;Lucida Sans Bold&rdquo;之类的值会选择该外观（如果存在）。注意，如果请求的外观不存在，则默认字体可以与<em>常规</em> weight 一起使用。该名称中的&ldquo;Bold&rdquo;是外观名称的一部分，而不是字体 weight 为粗体的单独请求。</p> 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.WEIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
字体 weight 的属性键。这些值是 <b><code>Number</code></b> 的实例。默认值为 <code>WEIGHT_REGULAR</code>。
 
<p>这里提供了一些常量值，请参阅 {@link #WEIGHT_EXTRA_LIGHT}、{@link #WEIGHT_LIGHT}、{@link #WEIGHT_DEMILIGHT}、{@link #WEIGHT_REGULAR}、{@link #WEIGHT_SEMIBOLD}、{@link #WEIGHT_MEDIUM}、{@link #WEIGHT_DEMIBOLD}、{@link #WEIGHT_BOLD}、{@link #WEIGHT_HEAVY}、{@link #WEIGHT_EXTRABOLD} 和 {@link #WEIGHT_ULTRABOLD}。<code>WEIGHT_BOLD</code> 值对应于传递给 <code>Font</code> 构造方法的样式值 <code>Font.BOLD</code>。
 
<p>该值大致为词干宽度与常规 weight 的比。

<p>系统可以插入提供的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.WEIGHT_EXTRA_LIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
最轻的预定义 weight。
@see #WEIGHT

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.WEIGHT_LIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
标准的轻 weight。
@see #WEIGHT

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.WEIGHT_DEMILIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>WEIGHT_LIGHT</code> 和 <code>WEIGHT_STANDARD</code> 之间的中间 weight。
@see #WEIGHT 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.WEIGHT_REGULAR
<!-- END KEY -->
<!-- BEGIN DATA -->
标准 weight。这是 <code>WEIGHT</code> 的默认值。
@see #WEIGHT

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.WEIGHT_SEMIBOLD
<!-- END KEY -->
<!-- BEGIN DATA -->
比 <code>WEIGHT_REGULAR</code> 稍重的 weight。
@see #WEIGHT

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.WEIGHT_MEDIUM
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>WEIGHT_REGULAR</code> 和 <code>WEIGHT_BOLD</code> 之间的中间 weight。
@see #WEIGHT 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.WEIGHT_DEMIBOLD
<!-- END KEY -->
<!-- BEGIN DATA -->
比 <code>WEIGHT_BOLD</code> 稍轻的 weight。
@see #WEIGHT

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.WEIGHT_BOLD
<!-- END KEY -->
<!-- BEGIN DATA -->
标准的粗体 weight。
@see #WEIGHT

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.WEIGHT_HEAVY
<!-- END KEY -->
<!-- BEGIN DATA -->
比 <code>WEIGHT_BOLD</code> 稍重的 weight。
@see #WEIGHT

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.WEIGHT_EXTRABOLD
<!-- END KEY -->
<!-- BEGIN DATA -->
特别重的 weight。
@see #WEIGHT

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.WEIGHT_ULTRABOLD
<!-- END KEY -->
<!-- BEGIN DATA -->
最重的预定义 weight。
@see #WEIGHT

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.WIDTH
<!-- END KEY -->
<!-- BEGIN DATA -->
字体宽度的属性键。这些值是 <b><code>Number</code></b> 的实例。默认值为 <code>WIDTH_REGULAR</code>。
 
<p>这里提供了一些常量值，请参阅 {@link #WIDTH_CONDENSED}、{@link #WIDTH_SEMI_CONDENSED}、{@link #WIDTH_REGULAR}、{@link #WIDTH_SEMI_EXTENDED} 和 {@link #WIDTH_EXTENDED}。
 
<p>该值大致为 advance 宽度与常规宽度的比。

<p>系统可以插入提供的值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.WIDTH_CONDENSED
<!-- END KEY -->
<!-- BEGIN DATA -->
最精简的预定义 width。
@see #WIDTH

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.WIDTH_SEMI_CONDENSED
<!-- END KEY -->
<!-- BEGIN DATA -->
适度精简的 width。
@see #WIDTH

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.WIDTH_REGULAR
<!-- END KEY -->
<!-- BEGIN DATA -->
标准 width。这是 <code>WIDTH</code> 的默认值。
@see #WIDTH 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.WIDTH_SEMI_EXTENDED
<!-- END KEY -->
<!-- BEGIN DATA -->
适度扩展的 width。
@see #WIDTH

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.WIDTH_EXTENDED
<!-- END KEY -->
<!-- BEGIN DATA -->
最大扩展的预定义 width。
@see #WIDTH

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.POSTURE
<!-- END KEY -->
<!-- BEGIN DATA -->
字体形态的属性键。这些值是 <b><code>Number</code></b> 的实例。默认值为 <code>POSTURE_REGULAR</code>。

<p>这里提供了两个常量值 {@link #POSTURE_REGULAR} 和 {@link #POSTURE_OBLIQUE}。<code>POSTURE_OBLIQUE</code> 值对应于传递给 <code>Font</code> 构造方法的样式值 <code>Font.ITALIC</code>。

<p>该值粗略地表示了字体词干的倾斜度，它以邻边除以对边的形式表示。正值表示向右倾斜。

<p>系统可以插入提供的值。

<p>这将会影响字体的倾斜角度，该角度由 <code>Font.getItalicAngle</code> 返回。

@see java.awt.Font#getItalicAngle() 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.POSTURE_REGULAR
<!-- END KEY -->
<!-- BEGIN DATA -->
标准直立形态。这是 <code>POSTURE</code> 的默认值。
@see #POSTURE 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.POSTURE_OBLIQUE
<!-- END KEY -->
<!-- BEGIN DATA -->
标准斜体形态。
@see #POSTURE

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.SIZE
<!-- END KEY -->
<!-- BEGIN DATA -->
字体大小的属性键。这些值是 <b><code>Number</code></b> 的实例。默认值为 12pt。
 
<p>这对应于 <code>Font</code> 构造方法的 <code>size</code> 参数。  
 
<p>非常大或非常小的大小将影响呈现性能，呈现系统可能不会以这些大小呈现文本。负大小是非法的，会导致使用默认尺寸。
 
<p>注意，采用 2x 转换的 12pt 字体的外观和规格可能与未转换的 24pt 字体不同。  

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.TRANSFORM
<!-- END KEY -->
<!-- BEGIN DATA -->
字体转换的属性键。这些值是 <b><code>TransformAttribute</code></b> 的实例。默认值为 <code>TransformAttribute.IDENTITY</code>。
 
<p><code>TransformAttribute</code> 类定义了常量 {@link TransformAttribute#IDENTITY IDENTITY}。
 
<p>这对应于传递给 <code>Font.deriveFont(AffineTransform)</code> 的转换。由于该转换是可变的，并且 <code>TextAttribute</code> 值不可以为 null，所以使用的是 <code>TransformAttribute</code> 包装器类。
 
<p>该值主要用于支持缩放和倾斜，但可能还有其他作用。</p>

<p>某些转换会导致基线旋转和/或移位。将文本和基线一起转换，从而文本将遵循新的基线。例如，对于水平基线上的文本，新的基线将遵循通过转换得到的 x 向量单元的方向。文本规格是针对此新基线进行测量的。因此，如果其他属性相同，使用旋转的 TRANSFORM 和非旋转的 TRANSFORM 呈现的文本都将视为具有相同上行高度 (ascent)、下行高度 (descent) 和步进 (advance)。</p>

<p>在样式化文本中，每个这样延伸的基线都将一个接一个地排列，从而可能为整个文本延伸创建一条非线性的基线。有关更多信息，请参阅 {@link TextLayout#getLayoutPath}。</p>

@see TransformAttribute
@see java.awt.geom.AffineTransform 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.SUPERSCRIPT
<!-- END KEY -->
<!-- BEGIN DATA -->
用于上标和下标的属性键。这些值是 <b><code>Integer</code></b> 的实例。默认值为 0，意味着没有使用上标或下标。
 
<p>这里提供了两个常量值，请参阅 {@link #SUPERSCRIPT_SUPER} 和 {@link #SUPERSCRIPT_SUB}。这两个常量的值分别为 1 和 -1。较大的大小值定义上标或下标的较高级别，例如，2 对应于 super-superscript，3 对应于 super-super-superscript，同样地，对于负值和下标，级别可以高达 7（或 -7）。超出此范围的值被保留；这些值代表的行为与平台有关。
 
<p><code>SUPERSCRIPT</code> 会影响字体的 ascent 和 descent。但是，ascent 和 descent 始终不能为负。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Integer java.awt.font.TextAttribute.SUPERSCRIPT_SUPER
<!-- END KEY -->
<!-- BEGIN DATA -->
标准上标。
@see #SUPERSCRIPT

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Integer java.awt.font.TextAttribute.SUPERSCRIPT_SUB
<!-- END KEY -->
<!-- BEGIN DATA -->
标准下标。
@see #SUPERSCRIPT

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.FONT
<!-- END KEY -->
<!-- BEGIN DATA -->
用于提供呈现文本字体的属性键。这些值是 {@link java.awt.Font} 的实例。默认值为 null，指示应该根据属性执行 <code>Font</code> 的正常分辨率。
 
<p><code>TextLayout</code> 和 <code>AttributedCharacterIterator</code> 根据 <code>TextAttribute</code> 的 <code>Map</code> 进行工作。通常，所有属性都被检查，并被用于选择和配置 <code>Font</code> 实例。然而，如果存在 <code>FONT</code> 属性，将使用其关联 <code>Font</code>。这为用户提供了一种将字体的分辨率属性重写到 <code>Font</code>，或强制使用特定 <code>Font</code> 实例的方法。这还允许用户在可以子类化 <code>Font</code> 的情况下指定 <code>Font</code> 的子类。

<p><code>FONT</code> 适用于特殊情形，在这些情形下，客户端已经拥有 <code>Font</code> 实例但是仍然需要使用基于 <code>Map</code> 的 API。通常，<code>Map</code> 中除了 <code>FONT</code> 属性以外没有其他属性。对于基于 <code>Map</code> 的 API，常见情形是单独指定所有属性，因此无需 <code>FONT</code>。

<p>但是，如果 <code>FONT</code> 和其他属性都存在于 <code>Map</code> 中，那么呈现系统会将 <code>Font</code> 中定义的属性与附加属性合并。此合并过程将 <code>TextAttributes</code> 分为两组。一组（&ldquo;主要&rdquo;组）被认为是字体的选择和规格行为的基础。这些属性有 <code>FAMILY</code>、<code>WEIGHT</code>、<code>WIDTH</code>、<code>POSTURE</code>、<code>SIZE</code>、<code>TRANSFORM</code>、<code>SUPERSCRIPT</code> 和 <code>TRACKING</code>。另一组（&ldquo;次要&rdquo;组）由除了 <code>FONT</code> 自身以外的所有其他已定义属性组成。
 
<p>要生成新的 <code>Map</code>，首先需要从 <code>FONT</code> 属性获得 <code>Font</code>，并将它的<em>所有</em> 属性提取为一个新的 <code>Map</code>。然后，只将取自原始 <code>Map</code> 的<em>次要</em> 属性添加到新 <code>Map</code> 的属性中。因此，主要属性的值仅取自 <code>Font</code>，而次要属性的值源自 <code>Font</code>，但可以用 <code>Map</code> 中的其他值重写它们。
 
<p><em>注：<code>Font</code> 的</em>基于 <code>Map</code> 的构造方法和 <code>deriveFont</code> 方法不处理 <code>FONT</code> 属性，因为这些属性用于创建新的 <code>Font</code> 对象。相反，{@link java.awt.Font#getFont(Map) Font.getFont(Map)} 应该用于处理 <code>FONT</code> 属性。

@see java.awt.Font 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.CHAR_REPLACEMENT
<!-- END KEY -->
<!-- BEGIN DATA -->
用于取代字符的字体标准字型显示的用户定义字形的属性键。这些值是 GraphicAttribute 的实例。默认值为 null，指示应该使用字体提供的标准字形。
 
<p>此属性用于为图形或文本行中嵌入的其他组件保留空间。在执行双向重排序（请参阅 {@link java.text.Bidi}）时，它对于正确排列&ldquo;内联&rdquo;组件在某一行中的位置是必需的。每个字符（Unicode 代码点）都将使用提供的 GraphicAttribute 呈现。通常，应用此属性的字符应是 <code>\uFFFC</code>。
 
<p>GraphicAttribute 确定文本的逻辑边界和可视边界；实际 Font 值被忽略。

@see GraphicAttribute 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.FOREGROUND
<!-- END KEY -->
<!-- BEGIN DATA -->
用于呈现文本的 paint 的属性键。这些值是 <b><code>Paint</code></b> 的实例。默认值为 null，指示使用呈现时在 <code>Graphics2D</code> 上设置的 <code>Paint</code>。
 
<p>无论 <code>Graphics</code> 上设置的 <code>Paint</code> 值是什么，字形都将使用此 <code>Paint</code> 呈现（但是请参阅 {@link #SWAP_COLORS}）。

@see java.awt.Paint
@see #SWAP_COLORS 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.BACKGROUND
<!-- END KEY -->
<!-- BEGIN DATA -->
用于呈现文本背景的 paint 的属性键。这些值是 <b><code>Paint</code></b> 的实例。默认值为 null，指示不应呈现背景。
 
<p>文本的逻辑边界将使用此 <code>Paint</code> 填充，然后该文本呈现于 Paint 之上（但是请参阅 {@link #SWAP_COLORS}）。
 
<p>如果有必要，可以扩展文本的可视边界来包含逻辑边界。轮廓不会受影响。

@see java.awt.Paint
@see #SWAP_COLORS 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.UNDERLINE
<!-- END KEY -->
<!-- BEGIN DATA -->
下划线的属性键。这些值是 <b><code>Integer</code></b> 的实例。默认值为 -1，表示没有下划线。
 
<p>提供的常量值是 {@link #UNDERLINE_ON}。
 
<p>下划线可影响可视边界和文本轮廓。  

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Integer java.awt.font.TextAttribute.UNDERLINE_ON
<!-- END KEY -->
<!-- BEGIN DATA -->
标准下划线。

@see #UNDERLINE

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.STRIKETHROUGH
<!-- END KEY -->
<!-- BEGIN DATA -->
删除线的属性键。这些值是 <b><code>Boolean</code></b> 的实例。默认值为 <code>false</code>，表示没有删除线。
 
<p>提供的常量值是 {@link #STRIKETHROUGH_ON}。
 
<p>删除线可影响可视边界和文本轮廓。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Boolean java.awt.font.TextAttribute.STRIKETHROUGH_ON
<!-- END KEY -->
<!-- BEGIN DATA -->
单删除线。

@see #STRIKETHROUGH

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.RUN_DIRECTION
<!-- END KEY -->
<!-- BEGIN DATA -->
线条延伸方向的属性键。这些值是 <b><code>Boolean</code></b> 的实例。默认值为 null，指示用来确定延伸方向的标准 Bidi 算法应该与 {@link java.text.Bidi#DIRECTION_DEFAULT_LEFT_TO_RIGHT} 值一起使用。
 
<p>提供的常量是 {@link #RUN_DIRECTION_RTL} 和 {@link #RUN_DIRECTION_LTR}。
 
<p>这确定了传递给 {@link java.text.Bidi} 构造方法的值，以选择段落中文本的主方向。
 
<p><em>注：</em>对于段落中的所有文本，此属性都应该具有相同的值，否则，行为将是不确定的。

@see java.text.Bidi 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Boolean java.awt.font.TextAttribute.RUN_DIRECTION_LTR
<!-- END KEY -->
<!-- BEGIN DATA -->
从左到右的延伸方向。
@see #RUN_DIRECTION

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Boolean java.awt.font.TextAttribute.RUN_DIRECTION_RTL
<!-- END KEY -->
<!-- BEGIN DATA -->
从右到左的延伸方向。
@see #RUN_DIRECTION

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.BIDI_EMBEDDING
<!-- END KEY -->
<!-- BEGIN DATA -->
文本嵌入级别的属性键。这些值是 <b><code>Integer</code></b> 的实例。默认值为 <code>null</code>，指示在没有显式嵌入的情况下应该使用双向算法。
 
<p>1 到 61 的正值是<em>嵌入</em> 级别，-1 到 -61 的负值是<em>重写</em> 级别。0 值表示使用基线方向。这些级别被传入 {@link java.text.Bidi} 构造方法的嵌入级别数组。
 
<p><em>注：</em>如果此属性出现在段落中的任何位置，则该段落中的所有 Unicode bidi 控制字符（RLO、LRO、RLE、LRE 和 PDF）都将被忽略，没有此属性的情况下，文本延伸时假定此属性存在，并且属性值为 0。

@see java.text.Bidi 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.JUSTIFICATION
<!-- END KEY -->
<!-- BEGIN DATA -->
段落调整的属性键。这些值是 <b><code>Number</code></b> 的实例。默认值为 1，指示调整时应该使用所提供的完整宽度。这些值被限制在 [0..1] 范围内。
 
<p>提供的常量是 {@link #JUSTIFICATION_FULL} 和 {@link #JUSTIFICATION_NONE}。
 
<p>当请求在 <code>TextLayout</code> 上进行调整时，指定要使用的额外空间部分。例如，如果该线条宽为 50 磅，要求调整到 70 磅，则值 0.75 会使用多余空间的四分之三（或 15 磅）来填补，这样得到的线条长度为 65 磅。
 
<p><em>注：</em>对于段落中的所有文本，此属性都应该具有相同的值，否则，行为将是不确定的。

@see TextLayout#getJustifiedLayout 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.JUSTIFICATION_FULL
<!-- END KEY -->
<!-- BEGIN DATA -->
将线条调整到完整的请求宽度。这是 <code>JUSTIFICATION</code> 的默认值。
@see #JUSTIFICATION 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.JUSTIFICATION_NONE
<!-- END KEY -->
<!-- BEGIN DATA -->
不允许调整线条。
@see #JUSTIFICATION

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.INPUT_METHOD_HIGHLIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
用于输入法高亮显示样式的属性键。
 
<p>这些值是 {@link java.awt.im.InputMethodHighlight} 或 {@link java.text.Annotation} 的实例。默认值为 <code>null</code>，指示在呈现前不应该应用输入法样式。
 
<p>如果需要单独呈现具有相同 <code>InputMethodHighlight</code> 的文本邻近延伸，则应在 <code>Annotation</code> 实例中包装 <code>InputMethodHighlight</code>。
 
<p>在使用输入法撰写文本时，将使用输入法高亮显示。即使是通常只处理无样式文本的文本编辑组件，也应保留输入法高亮显示，并使它们可用于绘制例程。
 
@see java.awt.Font
@see java.awt.im.InputMethodHighlight
@see java.text.Annotation 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.INPUT_METHOD_UNDERLINE
<!-- END KEY -->
<!-- BEGIN DATA -->
输入法下划线的属性键。这些值是 <b><code>Integer</code></b> 的实例。默认值为 <code>-1</code>，表示没有下划线。
 
<p>这里提供了一些常量值，请参阅 {@link #UNDERLINE_LOW_ONE_PIXEL}、{@link #UNDERLINE_LOW_TWO_PIXEL}、{@link #UNDERLINE_LOW_DOTTED}、{@link #UNDERLINE_LOW_GRAY} 和 {@link #UNDERLINE_LOW_DASHED}。
 
<p>如果需要，此值可以与 {@link #UNDERLINE} 一起使用。该值主要用于输入法。在其他地方使用这些简单装饰下划线可能会使用户迷惑。

<p>输入法下划线可影响可视边界和文本轮廓。

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Integer java.awt.font.TextAttribute.UNDERLINE_LOW_ONE_PIXEL
<!-- END KEY -->
<!-- BEGIN DATA -->
单像素实心低下划线。
@see #INPUT_METHOD_UNDERLINE
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Integer java.awt.font.TextAttribute.UNDERLINE_LOW_TWO_PIXEL
<!-- END KEY -->
<!-- BEGIN DATA -->
双像素实心低下划线。
@see #INPUT_METHOD_UNDERLINE
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Integer java.awt.font.TextAttribute.UNDERLINE_LOW_DOTTED
<!-- END KEY -->
<!-- BEGIN DATA -->
单像素点线式低下划线。
@see #INPUT_METHOD_UNDERLINE
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Integer java.awt.font.TextAttribute.UNDERLINE_LOW_GRAY
<!-- END KEY -->
<!-- BEGIN DATA -->
双像素灰色低下划线。
@see #INPUT_METHOD_UNDERLINE
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Integer java.awt.font.TextAttribute.UNDERLINE_LOW_DASHED
<!-- END KEY -->
<!-- BEGIN DATA -->
单像素虚线低下划线。
@see #INPUT_METHOD_UNDERLINE
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.SWAP_COLORS
<!-- END KEY -->
<!-- BEGIN DATA -->
交换前景和背景 <code>Paint</code> 的属性键。这些值是 <b><code>Boolean</code></b> 的实例。默认值为 <code>false</code>，表示不交换颜色。
 
<p>定义的常量值是 {@link #SWAP_COLORS_ON}。
 
<p>如果设置 {@link #FOREGROUND} 属性，则它的 <code>Paint</code> 将被用作背景，否则，将使用当前 <code>Graphics</code> 上的 <code>Paint</code>。如果设置 {@link #BACKGROUND} 属性，则它的 <code>Paint</code> 将被用作前景，否则，系统将给（已解析）背景找到一种对比色，使文本可见。

@see #FOREGROUND
@see #BACKGROUND 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Boolean java.awt.font.TextAttribute.SWAP_COLORS_ON
<!-- END KEY -->
<!-- BEGIN DATA -->

交换前景和背景。
@see #SWAP_COLORS
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.NUMERIC_SHAPING
<!-- END KEY -->
<!-- BEGIN DATA -->
将 ASCII 十进制数字转换为其他十进制范围数字的属性键。这些值是 {@link NumericShaper} 的实例。默认值为 <code>null</code>，表示不执行数字成形。
 
<p>当定义了一个数字成形器时，在执行其他任何文本分析之前，首先用成形器处理该文本。
 
<p><em>注：</em>对于段落中的所有文本，此属性都应该具有相同的值，否则行为将是不确定的。

@see NumericShaper
@since 1.4 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.KERNING
<!-- END KEY -->
<!-- BEGIN DATA -->
请求进行字距调整的属性键。这些值是 <b><code>Integer</code></b> 的实例。默认值为 <code>0</code>，表示不请求进行字距调整。
 
<p>提供的常量值是 {@link #KERNING_ON}。
 
<p>单个字符的默认 advance 不适合某些字符序列，例如，&ldquo;To&rdquo;或&ldquo;AWAY&rdquo;。若没有进行字距调整，那么相邻字符看起来好像使用了太多的空格来分隔。字距调整使选定的字符序列采用不同的空格来分隔，以获得更舒适的可视外观。
 
@since 1.6 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Integer java.awt.font.TextAttribute.KERNING_ON
<!-- END KEY -->
<!-- BEGIN DATA -->
请求标准字距调整。
@see #KERNING
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.LIGATURES
<!-- END KEY -->
<!-- BEGIN DATA -->
启用可选连字的属性键。这些值是 <b><code>Integer</code></b> 的实例。默认值为 <code>0</code>，表示不使用可选的连字。
 
<p>定义的常量值是 {@link #LIGATURES_ON}。
 
<p>始终启用书写系统所需的连字。

@since 1.6 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Integer java.awt.font.TextAttribute.LIGATURES_ON
<!-- END KEY -->
<!-- BEGIN DATA -->
请求标准可选连字。
@see #LIGATURES
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.font.TextAttribute java.awt.font.TextAttribute.TRACKING
<!-- END KEY -->
<!-- BEGIN DATA -->
控制跟踪的属性键。这些值是 <b><code>Number</code></b> 的实例。默认值为 <code>0</code>，表示没有附加的跟踪。
 
<p>提供的常量值是 {@link #TRACKING_TIGHT} 和 {@link #TRACKING_LOOSE}。
 
<p>跟踪值与字体磅值大小相乘，并通过字体转换传递，以确定要添加到每种字形群的 advance 的附加量。正跟踪值将禁止可选连字格式。跟踪值通常在 <code>-0.1</code> 与 <code>0.3</code> 之间，超出此范围的值通常是不需要的。

@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.TRACKING_TIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
执行紧密跟踪。
@see #TRACKING
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Float java.awt.font.TextAttribute.TRACKING_LOOSE
<!-- END KEY -->
<!-- BEGIN DATA -->
执行宽松跟踪。
@see #TRACKING
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.font.TextAttribute(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有指定名称的 <code>TextAttribute</code>。
@param name 分配给此 <code>TextAttribute</code> 的属性名

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object java.awt.font.TextAttribute.readResolve() throws java.io.InvalidObjectException
<!-- END KEY -->
<!-- BEGIN DATA -->
将反序列化的实例解析为预定义常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object java.awt.font.TextAttribute.readResolve() throws java.io.InvalidObjectException
<!-- END KEY -->
<!-- BEGIN DATA -->
将反序列化的实例解析为预定义常量。

<!-- END DATA -->
