<!-- BEGIN KEY -->
public abstract class java.awt.font.GlyphVector extends java.lang.Object implements java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>GlyphVector</code> 对象是一个字形的集合，包含在转换坐标空间中放置每个字形的几何信息，该坐标空间对应于最终要显示 <code>GlyphVector</code> 的设备。 
 <p>
<code>GlyphVector</code> 不尝试对它包含的字形序列进行任何解释。序列中相邻字形之间的关系只用于确定在可视坐标空间中的字形放置。
 <p>
<code>GlyphVector</code> 的实例由 {@link Font} 创建。
 <p>
在一个可以对文本的中间表示形式进行缓存的文本处理应用程序中，将字符的可视化表示形式呈现给用户最快的方法是，创建并随后缓存在呈现期间使用的 <code>GlyphVector</code>。
 <p>
<code>GlyphVector</code> 只与一个 <code>Font</code> 关联，可以提供仅与此 <code>Font</code> 相关的有用数据。另外，从 <code>GlyphVector</code> 获得的规格通常不是几何上可缩放的，因为像素化和间隔与 <code>Font</code> 中的网格适应算法相关。为了便于精确测量 <code>GlyphVector</code> 及其分量字形，在创建 <code>GlyphVector</code> 时必须指定缩放转换、anti-alias 模式和 fractional metrics 模式。这些特性可以从目标设备派生得到。
 <p>
对于 <code>GlyphVector</code> 中的每个字形，您可以获得：
 <ul>
<li>该字形的位置
<li>与该字形关联的转换
<li><code>GlyphVector</code> 上下文中的字形规格。在不同的转换、具有指定呈现提示的应用程序和 <code>GlyphVector</code> 内字形的具体实例情况下，字形的规格可能也不相同。
 </ul>
 <p>
改变创建 <code>GlyphVector</code> 所使用的数据不会改变 <code>GlyphVector</code> 的状态。
 <p>
该类提供了一些方法来调整 <code>GlyphVector</code> 内字形位置。这些方法最适合为显示字形而正在执行调整操作的应用程序。
 <p>
该类提供了一些方法来转换 <code>GlyphVector</code> 中各个字形。这些方法主要用于特殊效果。
 <p>
该类提供了一些方法来返回整个 <code>GlyphVector</code> 或 <code>GlyphVector</code> 中各个字形的可视的、逻辑的和像素的边界。
 <p>
该类还提供了一些方法来返回 <code>GlyphVector</code> 和 <code>GlyphVector</code> 中各个字形的 {@link Shape}。
@see Font
@see GlyphMetrics
@see TextLayout
@version 19 Mar 1998
@author Charlton Innovations, Inc.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.GlyphVector.FLAG_HAS_TRANSFORMS
<!-- END KEY -->
<!-- BEGIN DATA -->
与 getLayoutFlags 一起使用的标志，指示此 <code>GlyphVector</code> 的每个字形都有转换。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.GlyphVector.FLAG_HAS_POSITION_ADJUSTMENTS
<!-- END KEY -->
<!-- BEGIN DATA -->
与 getLayoutFlags 一起使用的标志，指示此 <code>GlyphVector</code> 调整了位置。该标志为 true 时，字形位置与该字形累加的默认 advance 不匹配（例如，已完成字距调整）。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.GlyphVector.FLAG_RUN_RTL
<!-- END KEY -->
<!-- BEGIN DATA -->
与 getLayoutFlags 一起使用的标志，指示此 <code>GlyphVector</code> 具有从右到左的排列方向。这是指字形到字符的映射关系，并不意味着该字形的可视位置一定要按此顺序，但通常如此。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.GlyphVector.FLAG_COMPLEX_GLYPHS
<!-- END KEY -->
<!-- BEGIN DATA -->
与 getLayoutFlags 一起使用的标志，指示此 <code>GlyphVector</code> 具有从字形到字符的复杂映射关系（此映射并非严格按照与排列方向匹配的升序或降序顺序将字形一一映射到字符）。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.GlyphVector.FLAG_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
getLayoutFlags 支持标志的掩码。只应测试该掩码包含的位。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Font java.awt.font.GlyphVector.getFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>GlyphVector</code> 关联的 <code>Font</code>。
@return 用于创建此 <code>GlyphVector</code> 的 <code>Font</code>。
@see Font

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.font.FontRenderContext java.awt.font.GlyphVector.getFontRenderContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>GlyphVector</code> 关联的 {@link FontRenderContext}。
@return 用于创建此 <code>GlyphVector</code> 的 <code>FontRenderContext</code>。
@see FontRenderContext
@see Font

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.font.GlyphVector.performDefaultLayout()
<!-- END KEY -->
<!-- BEGIN DATA -->
为此 <code>GlyphVector</code> 中的每个字形分配默认位置。这会破坏此 <code>GlyphVector</code> 初始布局期间所生成的信息。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.awt.font.GlyphVector.getNumGlyphs()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GlyphVector</code> 中的字形数。
@return 此 <code>GlyphVector</code> 中的字形数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.awt.font.GlyphVector.getGlyphCode(int glyphIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定字形的 glyphcode。除创建此 <code>GlyphVector</code> 的 <code>Font</code> 对象之外，此返回值对其他对象均无意义。
@param glyphIndex 此 <code>GlyphVector</code> 中的索引，它与从中检索 glyphcode 的字形对应。
@return 指定 <code>glyphIndex</code> 处字形的 glyphcode。
@throws IndexOutOfBoundsException 如果 <code>glyphIndex</code> 小于 0，或者大于等于此 <code>GlyphVector</code> 中的字形数

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int[] java.awt.font.GlyphVector.getGlyphCodes(int beginGlyphIndex, int numEntries, int[] codeReturn)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定字形的 glyphcode 数组。除用来创建此 <code>GlyphVector</code> 的 <code>Font</code> 之外，此返回值的内容对其他对象均无意义。处理 glyphcode 时，此方法使用便捷，性能优越。如果没有数组传入，则创建新的数组。
@param beginGlyphIndex 此 <code>GlyphVector</code> 中的索引，从此处开始检索 glyphcode
@param numEntries 要检索的 glyphcode 数
@param codeReturn 接收 glyphcode 然后返回的数组
@return 指定字形的 glyphcode 数组。
@throws IllegalArgumentException 如果 <code>numEntries</code> 小于 0
@throws IndexOutOfBoundsException 如果 <code>beginGlyphIndex</code> 小于 0
@throws IndexOutOfBoundsException 如果 <code>beginGlyphIndex</code> 与 <code>numEntries</code> 的和大于此 <code>GlyphVector</code> 中的字形数

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.font.GlyphVector.getGlyphCharIndex(int glyphIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定字形的字符索引。字符索引是该字形表示的第一个逻辑字符的索引。默认实现假定字形和字符是从左到右一一对应的映射关系。
@param glyphIndex 该字形的索引
@return 该字形表示的第一个字符索引
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.awt.font.GlyphVector.getGlyphCharIndices(int beginGlyphIndex, int numEntries, int[] codeReturn)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定字形的字符索引。字符索引是该字形表示的第一个逻辑字符的索引。按字形顺序返回索引。默认实现为每个字形调用 getGlyphCharIndex，出于性能的考虑，子类可能要重写此实现。在处理 glyphcode 时，此方法使用便捷，性能优越。如果没有数组传入，则创建新的数组。
@param beginGlyphIndex 第一个字形的索引
@param numEntries 字形索引数
@param codeReturn 接收返回字符索引的数组
@return 字符索引的数组，每个字形一个字符索引。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.geom.Rectangle2D java.awt.font.GlyphVector.getLogicalBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GlyphVector</code> 的逻辑边界。相对于视觉相邻的 <code>GlyphVector</code> 对象定位此 <code>GlyphVector</code> 时使用此方法。
@return 一个 {@link Rectangle2D}，它是此 <code>GlyphVector</code> 的逻辑边界。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.geom.Rectangle2D java.awt.font.GlyphVector.getVisualBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GlyphVector</code> 的可视边界，可视边界是此 <code>GlyphVector</code> 轮廓的边界框。由于像素的光栅化和对齐方式，此框可能没有包围受呈现此 <code>GlyphVector</code> 影响的所有像素。
@return 一个 <code>Rectangle2D</code>，它是此 <code>GlyphVector</code> 的边界框。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle java.awt.font.GlyphVector.getPixelBounds(FontRenderContext renderFRC, float x, float y)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GlyphVector</code> 在图形中以给定 <code>FontRenderContext</code> 在给定位置处呈现时的像素边界。renderFRC 无需与此 <code>GlyphVector</code> 的 <code>FontRenderContext</code> 相同，可以为 null。如果为 null，则使用此 <code>GlyphVector</code> 的 <code>FontRenderContext</code>。默认实现返回可视边界、x 和 y 的偏移量，并舍入为下一个整数值（即返回包含可视边界的整数矩形），并忽略 FRC。子类应重写此方法。
@param renderFRC <code>Graphics</code> 的 <code>FontRenderContext</code>。
@param x 呈现此 <code>GlyphVector</code> 处的 x 坐标。
@param y 呈现此 <code>GlyphVector</code> 处的 y 坐标。
@return 包围受影响像素的 <code>Rectangle</code>。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Shape java.awt.font.GlyphVector.getOutline()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回其内部区域与此 <code>GlyphVector</code> 的可视表示形式对应的 <code>Shape</code>。
@return 此 <code>GlyphVector</code> 轮廓的 <code>Shape</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Shape java.awt.font.GlyphVector.getOutline(float x, float y)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在 x、y 处呈现时，其内部区域与此 <code>GlyphVector</code> 的可视表示形式对应的 <code>Shape</code>。
@param x 此 <code>GlyphVector</code> 的 X 坐标。
@param y 此 <code>GlyphVector</code> 的 Y 坐标。
@return 在指定坐标位置呈现时，此 <code>GlyphVector</code> 轮廓的 <code>Shape</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Shape java.awt.font.GlyphVector.getGlyphOutline(int glyphIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回其内部区域与此 <code>GlyphVector</code> 中指定字形的可视表示形式对应的 <code>Shape</code>。此方法返回的轮廓位于各个字形的原点周围。
@param glyphIndex 此 <code>GlyphVector</code> 的索引
@return 一个 <code>Shape</code>，它是该 <code>GlyphVector</code> 中指定 <code>glyphIndex</code> 处的字形轮廓。
@throws IndexOutOfBoundsException 如果 <code>glyphIndex</code> 小于 0，或者大于等于此 <code>GlyphVector</code> 中的字形数

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Shape java.awt.font.GlyphVector.getGlyphOutline(int glyphIndex, float x, float y)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>Shape</code>，其内部区域与此 <code>GlyphVector</code> 中指定字形的可视表示形式对应，并偏移到 x、y。此方法返回的轮廓位于各个字形的原点周围。
@param glyphIndex 此 <code>GlyphVector</code> 的索引
@param x 此 <code>GlyphVector</code> 的坐标的 X 坐标
@param y 此 <code>GlyphVector</code> 的坐标的 Y 坐标
@return 一个 <code>Shape</code>，它是在指定的坐标处呈现时，此 <code>GlyphVector</code> 中指定 <code>glyphIndex</code> 处的字形轮廓。
@throws IndexOutOfBoundsException 如果 <code>glyphIndex</code> 小于 0，或者大于等于此 <code>GlyphVector</code> 中的字形数
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.geom.Point2D java.awt.font.GlyphVector.getGlyphPosition(int glyphIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>GlyphVector</code> 原点对应的指定字形的位置。如果 <code>glyphIndex</code> 等于此 <code>GlyphVector</code> 中的字形数，则此方法返回最后一个字形后的位置。此位置用于定义整个 <code>GlyphVector</code> 的 advance。
@param glyphIndex 此 <code>GlyphVector</code> 的索引
@return 表示指定 <code>glyphIndex</code> 处字形位置的 {@link Point2D} 对象。
@throws IndexOutOfBoundsException 如果 <code>glyphIndex</code> 小于 0，或者大于此 <code>GlyphVector</code> 中的字形数
@see #setGlyphPosition 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.font.GlyphVector.setGlyphPosition(int glyphIndex, Point2D newPos)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 <code>GlyphVector</code> 中的指定字形位置。如果 <code>glyphIndex</code> 等于此 <code>GlyphVector</code> 中的字形数，则此方法设置最后一个字形后的位置。此位置用于定义整个 <code>GlyphVector</code> 的 advance。
@param glyphIndex 此 <code>GlyphVector</code> 的索引
@param newPos 定位指定 <code>glyphIndex</code> 处字形的 <code>Point2D</code>
@throws IndexOutOfBoundsException 如果 <code>glyphIndex</code> 小于 0，或大于此 <code>GlyphVector</code> 中的字形数
@see #getGlyphPosition

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.geom.AffineTransform java.awt.font.GlyphVector.getGlyphTransform(int glyphIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GlyphVector</code> 中指定字形的转换。该转换与字形位置相关。如果未应用特殊转换，则返回 <code>null</code>。返回 null 指示恒等转换。
@param glyphIndex 此 <code>GlyphVector</code> 的索引
@return 转换指定 <code>glyphIndex</code> 处字形的 {@link AffineTransform}。
@throws IndexOutOfBoundsException 如果 <code>glyphIndex</code> 小于 0，或者大于等于此 <code>GlyphVector</code> 中的字形数
@see #setGlyphTransform

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.font.GlyphVector.setGlyphTransform(int glyphIndex, AffineTransform newTX)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 <code>GlyphVector</code> 中指定字形的转换。该转换与字形位置相关。<code>newTX</code> 参数为 <code>null</code> 表示对指定字形没有应用特殊转换。此方法可以用于旋转、镜像、平移和缩放字形。添加转换可以明显地影响性能。
@param glyphIndex 此 <code>GlyphVector</code> 的索引
@param newTX <code>glyphIndex</code> 处的字形的新转换
@throws IndexOutOfBoundsException 如果 <code>glyphIndex</code> 小于 0，或者大于等于此 <code>GlyphVector</code> 中的字形数
@see #getGlyphTransform

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.font.GlyphVector.getLayoutFlags()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述该 GlyphVector 全局状态的标志。下文没有描述的标志是保留的。对于位置调整、转换、rtl 和复杂标志，默认实现返回 0（意味着 false）。子类应重写此方法，并确保它正确地描述 GlyphVector 并与相关调用的结果对应。
@return 一个 int 值，包含描述该状态的标志
@see #FLAG_HAS_POSITION_ADJUSTMENTS
@see #FLAG_HAS_TRANSFORMS
@see #FLAG_RUN_RTL
@see #FLAG_COMPLEX_GLYPHS
@see #FLAG_MASK
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float[] java.awt.font.GlyphVector.getGlyphPositions(int beginGlyphIndex, int numEntries, float[] positionReturn)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含指定字形位置的数组。处理字形位置时，此方法使用便捷，性能优越。如果没有数组传入，则创建新的数组。从位置 0 开始的偶数数组项是编号为 <code>beginGlyphIndex + position/2</code> 的字形 X 坐标。从位置 1 开始的奇数数组项是编号为 <code>beginGlyphIndex + (position-1)/2</code> 的字形 Y 坐标。如果 <code>beginGlyphIndex</code> 等于此 <code>GlyphVector</code> 中的字形数，则此方法会获取最后一个字形后的位置，此位置用于定义整个 <code>GlyphVector</code> 的 advance。
@param beginGlyphIndex 开始检索字形位置的索引
@param numEntries 要检索的字形数
@param positionReturn 接收字形位置然后返回的数组。
@return 由 <code>beginGlyphIndex</code> 和 <code>numEntries</code> 指定的字形位置的数组。
@throws IllegalArgumentException 如果 <code>numEntries</code> 小于 0
@throws IndexOutOfBoundsException 如果 <code>beginGlyphIndex</code> 小于 0
@throws IndexOutOfBoundsException 如果 <code>beginGlyphIndex</code> 与 <code>numEntries</code> 的和大于此 <code>GlyphVector</code> 中的字形数加 1

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Shape java.awt.font.GlyphVector.getGlyphLogicalBounds(int glyphIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GlyphVector</code> 中指定字形的逻辑边界。这些逻辑边界总共有四个边，两个边平行于该字形转换的基线，另外两个边与相邻字形（如果存在）共用。此方法常用于指定字形的命中测试、插入符在开始边和尾边的定位，以及在指定字形周围绘制一个高亮显示区域。
@param glyphIndex 此 <code>GlyphVector</code> 的索引，它与从中检索其逻辑边界的字形对应
@return  一个 <code>Shape</code>，表示指定 <code>glyphIndex</code> 处的字形逻辑边界。
@throws IndexOutOfBoundsException 如果 <code>glyphIndex</code> 小于 0，或者大于等于此 <code>GlyphVector</code> 中的字形数
@see #getGlyphVisualBounds

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Shape java.awt.font.GlyphVector.getGlyphVisualBounds(int glyphIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>GlyphVector</code> 中指定字形的可视边界。此方法返回的边界位于各个字形的原点周围。
@param glyphIndex 此 <code>GlyphVector</code> 的索引，它与从中检索其可视边界的字形对应
@return 一个 <code>Shape</code>，表示指定 <code>GlyphVector</code> 处的字形可视边界。
@throws IndexOutOfBoundsException 如果 <code>glyphIndex</code> 小于 0，或者大于等于此 <code>GlyphVector</code> 中的字形数
@see #getGlyphLogicalBounds

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle java.awt.font.GlyphVector.getGlyphPixelBounds(int index, FontRenderContext renderFRC, float x, float y)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当此 <code>GlyphVector</code> 在 <code>Graphics</code> 中以给定 <code>FontRenderContext</code> 在给定位置呈现时，index 处字形的像素边界。 renderFRC 无需与此 <code>GlyphVector</code> 的 <code>FontRenderContext</code> 相同，可以为 null。如果为 null，则使用此 <code>GlyphVector</code> 的 <code>FontRenderContext</code>。默认的实现会返回该字形的可视边界、x 和 y 的偏移量，以及舍入到下一个整数值，并忽略 FRC。子类应重写此方法。
@param index 该字形的索引。
@param renderFRC <code>Graphics</code> 的 <code>FontRenderContext</code>。
@param x 呈现此 <code>GlyphVector</code> 的 X 坐标。
@param y 呈现此 <code>GlyphVector</code> 的 Y 坐标。
@return 包围受影响像素的 <code>Rectangle</code>。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.font.GlyphMetrics java.awt.font.GlyphVector.getGlyphMetrics(int glyphIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GlyphVector</code> 中指定索引处的字形规格。
@param glyphIndex 此 <code>GlyphVector</code> 的索引，它与从中检索其规格的字形对应
@return 一个 {@link GlyphMetrics} 对象，表示此 <code>GlyphVector</code> 中指定 <code>glyphIndex</code> 处的字形规格。
@throws IndexOutOfBoundsException 如果 <code>glyphIndex</code> 小于 0，或者大于等于此 <code>GlyphVector</code> 中的字形数

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.font.GlyphJustificationInfo java.awt.font.GlyphVector.getGlyphJustificationInfo(int glyphIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GlyphVector</code> 中指定索引处的字形调整信息。
@param glyphIndex 此 <code>GlyphVector</code> 的索引，它与从中检索其调整属性的字形对应
@return 一个 {@link GlyphJustificationInfo} 对象，表示此 <code>GlyphVector</code> 中指定 <code>glyphIndex</code> 处的字形调整属性。
@throws IndexOutOfBoundsException 如果 <code>glyphIndex</code> 小于 0，或者大于等于此 <code>GlyphVector</code> 中的字形数

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.awt.font.GlyphVector.equals(GlyphVector set)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试指定的 <code>GlyphVector</code> 是否恰好等于此 <code>GlyphVector</code>。
@param set 要测试的指定 <code>GlyphVector</code>
@return 如果指定的 <code>GlyphVector</code> 等于此 <code>GlyphVector</code>，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
