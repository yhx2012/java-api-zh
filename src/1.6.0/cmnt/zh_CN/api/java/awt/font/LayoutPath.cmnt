<!-- BEGIN KEY -->
public abstract class java.awt.font.LayoutPath extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
LayoutPath 提供相对于基线的位置与用户空间中的点之间的映射。位置由沿基线的 advance 以及垂直于该 advance 处基线的偏移量组成。沿垂线的正值的方向是从基线向量顺时针旋转 90 度的方向。位置表示为 <code>Point2D</code>，其中 x 为 advance，y 为偏移量。  

@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.awt.font.LayoutPath.pointToPath(Point2D point, Point2D location)
<!-- END KEY -->
<!-- BEGIN DATA -->
将用户空间中的点转换为相对于路径的位置。选择的位置要最小化点到路径的距离（例如，偏移量的数量级将是最小值）。如果存在多个这样的位置，则选择具有最小 advance 的位置。
@param point 要转换的点。如果它不是与 location 相同的对象，则此调用将不会修改该点。
@param location 用于保存返回位置的 <code>Point2D</code>。它可以是与 point 相同的对象。
@return 如果点与位置前面的路径部分关联，则返回 true；如果它与后面部分关联，则返回 false。默认情况下，如果该位置不在路径中的中断处或尖锐拐弯处，则返回 true。
@throws NullPointerException 如果 point 或 location 为 null
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.font.LayoutPath.pathToPoint(Point2D location, boolean preceding, Point2D point)
<!-- END KEY -->
<!-- BEGIN DATA -->
将相对于路径的位置转换为用户坐标中的点。路径可能突然拐弯或者在此位置的 advance 处不相交。如果是这样，则 'preceding' 的值用于确定路径部分，路径的位置和斜面将用于解释偏移量。
@param location 一个 <code>Point2D</code>，表示相对于路径的某一位置的 advance（用 x 表示）和 offset（用 y 表示）。如果 location 与 point 不是相同的对象，则此调用不会修改该位置。
@param preceding 如果为 true，则应该使用 advance 之前的部分；如果为 false，则应该使用之后的部分。如果路径在 advance 处没有中断或突然拐弯，则此方法无效。
@param point 用于保存返回点的 <code>Point2D</code>。它可以是与 location 相同的对象。
@throws NullPointerException 如果 location 或 point 为 null
@since 1.6

<!-- END DATA -->
