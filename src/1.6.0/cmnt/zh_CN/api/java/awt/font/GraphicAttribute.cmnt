<!-- BEGIN KEY -->
public abstract class java.awt.font.GraphicAttribute extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
此类与 CHAR_REPLACEMENT 属性一起使用。
 <p>
<code>GraphicAttribute</code> 类表示文本中内嵌的图形。客户端创建此类的子类，以实现其自身的 char 替换图形。要在文本中嵌入形状和图像的客户端不必创建此类的子类。相反，客户端可以使用 {@link ShapeGraphicAttribute} 和 {@link ImageGraphicAttribute} 类。
 <p>
子类必须确保对象一经构造就不可修改。该变 {@link TextLayout} 中使用的 <code>GraphicAttribute</code> 会导致 <code>TextLayout</code> 的不确定行为。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.GraphicAttribute.TOP_ALIGNMENT
<!-- END KEY -->
<!-- BEGIN DATA -->

将图形顶端与行的顶端对齐。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.GraphicAttribute.BOTTOM_ALIGNMENT
<!-- END KEY -->
<!-- BEGIN DATA -->

将图形底部与行的底部对齐。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.GraphicAttribute.ROMAN_BASELINE
<!-- END KEY -->
<!-- BEGIN DATA -->

将图形的原点与行的罗马字体基线对齐。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.GraphicAttribute.CENTER_BASELINE
<!-- END KEY -->
<!-- BEGIN DATA -->

将图形的原点与行的中心基线对齐。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.GraphicAttribute.HANGING_BASELINE
<!-- END KEY -->
<!-- BEGIN DATA -->

将图形的原点与行的悬挂基线对齐。 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.font.GraphicAttribute(int alignment)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>GraphicAttribute</code>。子类使用此构造方法来定义图形的对齐方式。
@param alignment 表示某个 <code>GraphicAttribute</code> 对齐字段的 int 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float java.awt.font.GraphicAttribute.getAscent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GraphicAttribute</code> 的 ascent。图形可以在其 ascent 之上呈现。
@return 此 <code>GraphicAttribute</code> 的 ascent。
@see #getBounds()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float java.awt.font.GraphicAttribute.getDescent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GraphicAttribute</code> 的 descent。图形可以在其 descent 之下呈现。
@return 此 <code>GraphicAttribute</code> 的 descent。
@see #getBounds()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float java.awt.font.GraphicAttribute.getAdvance()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GraphicAttribute</code> 的 advance。<code>GraphicAttribute</code> 对象的 advance 是呈现该图形的点与呈现下一个字符或图形的点之间的距离。图形可以呈现在其 advance 之外。
@return 此 <code>GraphicAttribute</code> 的 advance。
@see #getBounds()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Rectangle2D java.awt.font.GraphicAttribute.getBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包括所有位的 {@link Rectangle2D}，这些位由与呈现位置相关的 <code>GraphicAttribute</code> 绘制。图形可以在其原点、ascent、descent 和 advance 之外呈现；但是如果这样的话，此方法的实现必须指示呈现该图形的位置。默认的边界是矩形 (0, -ascent, advance, ascent+descent)。
@return 包括由此 <code>GraphicAttribute</code> 呈现的所有位的 <code>Rectangle2D</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Shape java.awt.font.GraphicAttribute.getOutline(AffineTransform tx)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此 <code>GraphicAttribute</code> 呈现区域的 {@link java.awt.Shape}。当请求 {@link TextLayout} 返回文本轮廓时，将使用此方法。（未变换的）Shape 不得超出 <code>getBounds</code> 返回的矩形边界。
默认实现将返回由 {@link #getBounds} 返回，并通过提供的 {@link AffineTransform}（如果有）变换得到的矩形。
@param tx 要应用到此 <code>GraphicAttribute</code> 轮廓的可选 {@link AffineTransform}。此参数可以为 null。
@return .表示此图形属性的 <code>Shape</code>，适用于勾画或填充。
@since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.font.GraphicAttribute.draw(Graphics2D graphics, float x, float y)
<!-- END KEY -->
<!-- BEGIN DATA -->
在指定的位置呈现此 <code>GraphicAttribute</code>。
@param graphics 将该图形呈现到的 {@link Graphics2D}
@param x,&nbsp;y 呈现该图形的用户空间坐标

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.font.GraphicAttribute.getAlignment()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GraphicAttribute</code> 的对齐方式。可与特定的基线对齐，或与行的绝对顶端或底端对齐。
@return 此 <code>GraphicAttribute</code> 的对齐方式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.font.GlyphJustificationInfo java.awt.font.GraphicAttribute.getJustificationInfo()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>GraphicAttribute</code> 的调整信息。子类可以重写此方法，以提供不同的调整信息。
@return 包含此 <code>GraphicAttribute</code> 调整信息的 {@link GlyphJustificationInfo} 对象。

<!-- END DATA -->
