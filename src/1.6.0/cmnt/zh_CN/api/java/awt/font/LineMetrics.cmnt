<!-- BEGIN KEY -->
public abstract class java.awt.font.LineMetrics extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>LineMetrics</code> 类允许访问沿着一行布局字符和多行布局所需要的规格。<code>LineMetrics</code> 对象封装了与文本排列相关的测量信息。
 <p>
对于不同的字符范围，Font 可以有不同的规格。{@link java.awt.Font Font} 的 <code>getLineMetrics</code> 方法将某一文本作为参数，并返回一个 <code>LineMetrics</code> 对象，该对象描述该文本中初始字符数量（由 {@link #getNumChars} 返回）的规格。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.awt.font.LineMetrics.getNumChars()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回文本中的字符数量（<code>char</code> 值），该文本的规格由此 <code>LineMetrics</code> 对象封装。
@return 文本中的字符数量（<code>char</code> 值），根据该数量可以创建此 <code>LineMetrics</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float java.awt.font.LineMetrics.getAscent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该文本的 ascent。ascent 是从基线到 ascender 线的距离。ascent 通常表示文本中大写字母的高度。某些字符可以超过 ascender 线。
@return 该文本的 ascent。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float java.awt.font.LineMetrics.getDescent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该文本的 descent。descent 是从基线到下降线的距离。descent 通常表示到小写字母（如 'p'）底部的距离。某些字符可以延伸到下降线以下。
@return 该文本的 descent。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float java.awt.font.LineMetrics.getLeading()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该文本的 leading。leading 是从下降线的底部到下一行顶部的建议距离。
@return 该文本的 leading。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float java.awt.font.LineMetrics.getHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该文本的高度。文本高度等于 ascent、descent 和 leading 的总和。
@return 该文本的高度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.awt.font.LineMetrics.getBaselineIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该文本的基线索引。该索引是 {@link java.awt.Font#ROMAN_BASELINE ROMAN_BASELINE}、{@link java.awt.Font#CENTER_BASELINE CENTER_BASELINE}、{@link java.awt.Font#HANGING_BASELINE HANGING_BASELINE} 之一。
@return 该文本的基线。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float[] java.awt.font.LineMetrics.getBaselineOffsets()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回文本的基线偏移量（相对于文本的基线）。基线索引用来索引该偏移量。例如，如果基线索引为 <code>CENTER_BASELINE</code>，则 <code>offsets[HANGING_BASELINE]</code> 通常为负，<code>offsets[CENTER_BASELINE]</code> 为 0，<code>offsets[ROMAN_BASELINE]</code> 则通常为正。
@return 该文本的基线偏移量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float java.awt.font.LineMetrics.getStrikethroughOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回删除线相对于基线的位置。
@return 删除线的位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float java.awt.font.LineMetrics.getStrikethroughThickness()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回删除线的宽度。
@return 删除线的宽度。         

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float java.awt.font.LineMetrics.getUnderlineOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回下划线相对于基线的位置。
@return 下划线的位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float java.awt.font.LineMetrics.getUnderlineThickness()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回下划线的宽度。
@return 下划线的宽度。

<!-- END DATA -->
