<!-- BEGIN KEY -->
public class java.awt.font.FontRenderContext extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>FontRenderContext</code> 类是正确测量文本所需的信息容器。因为将轮廓映射到像素的规则不同，而且应用程序提供的呈现提示不同，所以文本的测量也有所不同。
   <p>
其中一条信息是将印刷点缩放成像素的转换信息。（一个点被定义成恰好是一英寸的 1/72，这与点的传统机械测量稍有不同。）由于舍入到像素边界和字体设计者已指定的提示等因素，在 600dpi 设备上以 12pt 呈现的字符可能与在 72dpi 设备上以 12pt 呈现的同一个字符大小不同。
   <p>
应用程序指定的 Anti-aliasing 和 Fractional-metrics 也可能因为舍入到像素边界而影响字符的大小。
   <p>
通常，从 {@link java.awt.Graphics2D Graphics2D} 对象获取 <code>FontRenderContext</code> 实例。直接构造的 <code>FontRenderContext</code> 很可能不表示任何实际的图形设备，并可能导致不可预料的或不正确的结果。
   <p>
  
@see java.awt.RenderingHints#KEY_TEXT_ANTIALIASING
@see java.awt.RenderingHints#KEY_FRACTIONALMETRICS
@see java.awt.Graphics2D#getFontRenderContext()
@see java.awt.font.LineMetrics

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.font.FontRenderContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新 <code>FontRenderContext</code> 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.font.FontRenderContext(AffineTransform tx, boolean isAntiAliased, boolean usesFractionalMetrics)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据可选的 {@link AffineTransform} 和两个 <code>boolean</code> 值构造一个 <code>FontRenderContext</code> 对象，这两个 boolean 值确定新构造的对象是否具有 anti-aliasing 或 fractional metrics 属性。在任何情况下，boolean 值 <CODE>true</CODE> 和 <CODE>false</CODE> 分别对应于呈现提示值 <CODE>ON</CODE> 和 <CODE>OFF</CODE>。
 <p>
 要指定其他提示值，请使用将呈现提示值指定为参数的构造方法：
 {@link #FontRenderContext(AffineTransform, Object, Object)}。
@param tx 用于在此 <code>FontRenderContext</code> 中将印刷点缩放为像素的转换。如果该参数为 null，则使用恒等转换。
@param isAntiAliased 确定新构造的对象是否具有 anti-aliasing 属性。
@param usesFractionalMetrics 确定新构造的对象是否具有 fractional metrics 属性。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.font.FontRenderContext(AffineTransform tx, Object aaHint, Object fmHint)
<!-- END KEY -->
<!-- BEGIN DATA -->
 根据一个可选 {@link AffineTransform} 和两个 <code>Object</code> 值构造一个 <code>FontRenderContext</code> 对象，这两个值决定了新创建的对象是具有 anti-aliasing 属性，还是具有 fractional metrics 属性。
 @param tx 用于在此 <code>FontRenderContext</code> 中将印刷点缩放为像素的转换。如果该参数为 null，则使用恒等转换。
 @param aaHint - {@link java.awt.RenderingHints java.awt.RenderingHints} 中定义的文本抗锯齿呈现提示值之一。其他任何值都将抛出 <code>IllegalArgumentException</code>。可以指定 {@link java.awt.RenderingHints#VALUE_TEXT_ANTIALIAS_DEFAULT VALUE_TEXT_ANTIALIAS_DEFAULT}，在这种情况下，使用的模式与实现有关。
 @param fmHint - {@link java.awt.RenderingHints java.awt.RenderingHints} 中定义的文本碎片 (text fractional) 呈现提示值之一。可以指定 {@link java.awt.RenderingHints#VALUE_FRACTIONALMETRICS_DEFAULT VALUE_FRACTIONALMETRICS_DEFAULT}，在这种情况下，使用的默认与实现有关。其他任何值都将抛出 <code>IllegalArgumentException</code>
 @throws IllegalArgumentException 如果提示不是一个合法值。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.font.FontRenderContext.isTransformed()
<!-- END KEY -->
<!-- BEGIN DATA -->
 指示此 <code>FontRenderContext</code> 对象是否需要考虑已转换的呈现上下文中的文本。
 @return  如果此 <code>FontRenderContext</code> 对象具有非等同 AffineTransform 属性，则返回 <code>true</code>。否则返回 <code>false</code>。
 @see     java.awt.font.FontRenderContext#getTransform
 @since   1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.font.FontRenderContext.getTransformType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回此 <code>FontRenderContext</code> 的仿射转换的整数类型，该类型由 {@link java.awt.geom.AffineTransform#getType()} 指定。
 @return 转换的类型。
 @see AffineTransform
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.AffineTransform java.awt.font.FontRenderContext.getTransform()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取用于在此 <code>FontRenderContext</code> 中将印刷点缩放为像素的转换。
@return 此 <code>FontRenderContext</code> 的 <code>AffineTransform</code>
@see AffineTransform

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.font.FontRenderContext.isAntiAliased()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 boolean 值，指示是否某些形式的抗锯齿由此 <code>FontRenderContext</code> 指定。对于特定呈现提示值，可以调用 {@link #getAntiAliasingHint() getAntiAliasingHint()}。
@return    如果此 <code>FontRenderContext</code> 中的文本是抗锯齿的，则返回 <code>true</code>；否则返回 <code>false</code>。
@see        java.awt.RenderingHints#KEY_TEXT_ANTIALIASING
@see #FontRenderContext(AffineTransform,boolean,boolean)
@see #FontRenderContext(AffineTransform,Object,Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.font.FontRenderContext.usesFractionalMetrics()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 boolean 值，指示是否在此 <code>FontRenderContext</code> 中使用文本 fractional metrics 模式。可以调用 {@link #getFractionalMetricsHint() getFractionalMetricsHint()} 来获得对应的呈现提示值。
@return  如果在此 <code>FontRenderContext</code> 中的布局应使用 fractional metrics 来执行，则返回 <code>true</code>；否则返回 <code>false</code>。
@see java.awt.RenderingHints#KEY_FRACTIONALMETRICS
@see #FontRenderContext(AffineTransform,boolean,boolean)
@see #FontRenderContext(AffineTransform,Object,Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.font.FontRenderContext.getAntiAliasingHint()
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回此 <code>FontRenderContext</code> 中使用的文本 anti-aliasing 呈现模式提示。该值将是 {@link java.awt.RenderingHints java.awt.RenderingHints} 中定义的文本抗锯齿呈现提示值之一。
 @return  此 <code>FontRenderContext</code> 中使用的文本 anti-aliasing 呈现模式提示。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.font.FontRenderContext.getFractionalMetricsHint()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>FontRenderContext</code> 中使用的文本 fractional metrics 呈现模式提示。该值将是 {@link java.awt.RenderingHints java.awt.RenderingHints} 中定义的文本 fractional metrics 呈现提示值之一。
 @return  此 <code>FontRenderContext</code> 中使用的文本 fractional metrics 呈现模式提示。
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.font.FontRenderContext.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 obj 是 FontRenderContext 的一个实例，并且具有与此 FontRenderContext 相同的转换、antialiasing 和 fractional metrics 值，则返回 true。
@param obj 要测试其相等性的对象
@return 如果指定的对象与此 <code>FontRenderContext</code> 相等，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.font.FontRenderContext.equals(FontRenderContext rhs)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 rhs 具有与此 FontRenderContext 相同的转换、antialiasing 和 fractional metrics 值，则返回 true。
@param rhs 要测试其相等性的 <code>FontRenderContext</code>
@return  如果 <code>rhs</code> 与此 <code>FontRenderContext</code> 相等，则返回 <code>true</code>；否则返回 <code>false</code>。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.font.FontRenderContext.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 FontRenderContext 的哈希码。

<!-- END DATA -->
