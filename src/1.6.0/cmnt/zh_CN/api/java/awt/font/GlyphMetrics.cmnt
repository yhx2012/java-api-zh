<!-- BEGIN KEY -->
public final class java.awt.font.GlyphMetrics extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>GlyphMetrics</code> 类表示单个字形的信息。字形是一个或多个字符的可视化表示形式。可以使用多个不同的字形来表示单个字符或字符组合。<code>GlyphMetrics</code> 实例由 {@link java.awt.Font Font} 生成，并可应用于特定 <code>Font</code> 中的具体字形。
 <p>
字形可以是 STANDARD、LIGATURE、COMBINING 或 COMPONENT。
 <ul>
<li>STANDARD 字形通常用于表示单个字符。
<li>LIGATURE 字形用于表示字符序列。
<li>{@link GlyphVector} 中的 COMPONENT 字形不对应文本模型中的特定字符。取而代之的是，由于印刷原因（如阿拉伯语调整）添加 COMPONENT 字形。
<li>COMBINING 字形修饰 STANDARD 或 LIGATURE 字形，例如，重音符号。插入符 (caret) 不会出现在 COMBINING 字形的前面。
 </ul>
 <p>
通过 <code>GlyphMetrics</code> 可使用的其他规格是 advance、可视边界以及左跨距和右跨距分量。
 <p>
对于旋转字体的字形或从已对字形应用旋转的 <code>GlyphVector</code> 获得的字形，可以具有包含 X 和 Y 分量的 advance。advance 通常仅有一个分量。
 <p>
字形的 advance 是从该字形原点沿基线（可以是垂直的，也可以是水平的）到下一个字形原点的距离。注意，在 <code>GlyphVector</code> 中，由于字距调整和其他位置调整，所以从一个字形到其下一个字形之间的距离可能不是该字形的 advance。  
 <p>
边界是完全包含该字形轮廓的最小矩形。边界矩形是相对于该字形原点的。左跨距是从字形原点到其边界矩形左边的距离。如果左跨距为负，则将该字形的一部分绘制到其原点的左边。右跨距是从该边界矩形的右边到下一个字形原点的距离（原点加上 advance）。如果为负，则将该字形的一部分绘制到下一个字形原点的右边。注意，当呈现该字形时，由于光栅化和像素调整效果，该边界不一定包括受到影响的所有像素。
 <p>
虽然可以直接构造 <code>GlyphMetrics</code> 的实例，但是几乎总是从 <code>GlyphVector</code> 获得它们。一旦构造 <code>GlyphMetrics</code> 对象之后，它就是不可变的。
 <p>
<strong>示例</strong>：<p>
查询 <code>Font</code>，了解字形信息
 <blockquote><pre>
 Font font = ...;
 int glyphIndex = ...;
 GlyphMetrics metrics = GlyphVector.getGlyphMetrics(glyphIndex);
 int isStandard = metrics.isStandard();
 float glyphAdvance = metrics.getAdvance();
 </pre></blockquote>

@see java.awt.Font
@see GlyphVector

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final byte java.awt.font.GlyphMetrics.STANDARD
<!-- END KEY -->
<!-- BEGIN DATA -->
指示表示单个标准字符的字形。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final byte java.awt.font.GlyphMetrics.LIGATURE
<!-- END KEY -->
<!-- BEGIN DATA -->
指示将多个字符表示成连字（例如，'fi' 或 'ffi'）的字形。它后跟用于剩余字符的填充字形。可以将填充字形和组合字形混合，以控制重音符号逻辑上在前置连字上的位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final byte java.awt.font.GlyphMetrics.COMBINING
<!-- END KEY -->
<!-- BEGIN DATA -->
指示表示组合字符的字形，例如元音变音。在此字形和前置字形之间没有插入符的位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final byte java.awt.font.GlyphMetrics.COMPONENT
<!-- END KEY -->
<!-- BEGIN DATA -->
指示在内部存储中没有相应字符的字形。该字形与逻辑前置无分量字形表示的字符关联。这用于 kashida 调整或其他现有字形的可视修改。在此字形和前置字形之间没有插入符的位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final byte java.awt.font.GlyphMetrics.WHITESPACE
<!-- END KEY -->
<!-- BEGIN DATA -->
指示一个无可视化表示形式的字形。可将其添加到其他代码值，以指示可见字形。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.font.GlyphMetrics(float advance, Rectangle2D bounds, byte glyphType)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>GlyphMetrics</code> 对象。
@param advance 该字形的 advance 宽度
@param bounds 该字形的黑框边界
@param glyphType 该字形的类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.font.GlyphMetrics(boolean horizontal, float advanceX, float advanceY, Rectangle2D bounds, byte glyphType)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>GlyphMetrics</code> 对象。
@param horizontal 如果为 true，则规格用于水平基线；否则用于垂直基线
@param advanceX 该字形的 advance 的 X 分量
@param advanceY 该字形的 advance 的 Y 分量
@param bounds 该字形的可视化边界
@param glyphType 该字形的类型
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.font.GlyphMetrics.getAdvance()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回沿基线（水平基线或垂直基线）的字形 advance。
@return 该字形的 advance

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.font.GlyphMetrics.getAdvanceX()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回字形 advance 的 x 分量。
@return 字形 advance 的 x 分量
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.font.GlyphMetrics.getAdvanceY()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回字形 advance 的 y 分量。
@return 字形 advance 的 y 分量
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Rectangle2D java.awt.font.GlyphMetrics.getBounds2D()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该字形的边界。这是该字形轮廓的边界框。因为光栅化和像素对齐的影响，在呈现字形时，它不一定包括受影响的像素。
@return 该字形边界的 {@link Rectangle2D}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.font.GlyphMetrics.getLSB()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该字形的左（上）跨距。
 <p>
这是从 0,&#xA0;0 到该字形边界的左（上）边的距离。如果该字形的边界在原点的左（上）边，则 LSB 为负。
@return 该字形的左跨距。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.font.GlyphMetrics.getRSB()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该字形的右（底）跨距。
 <p>
这是从该字形边界的右（底）边到该 advance 的距离。如果该字形的边界在 advance 的右（下）边，则 RSB 为负。
@return 该字形的右跨距。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.font.GlyphMetrics.getType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回原始字形类型代码。
@return 原始字形类型代码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.font.GlyphMetrics.isStandard()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果这是一个标准字形，则返回 <code>true</code>。
@return 如果这是一个标准字形，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.font.GlyphMetrics.isLigature()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果这是一个连字字形，则返回 <code>true</code>。
@return 如果这是一个连字字形；则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.font.GlyphMetrics.isCombining()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果这是一个组合字形，则返回 <code>true</code>。
@return 如果这是一个组合字形，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.font.GlyphMetrics.isComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果这是一个分量字形，则返回 <code>true</code>。
@return 如果这是一个分量字形，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.font.GlyphMetrics.isWhitespace()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果这是一个空白字形，则返回 <code>true</code>。
@return 如果这是一个空白字形，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
