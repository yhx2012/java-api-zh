<!-- BEGIN KEY -->
public final class java.awt.ComponentOrientation extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
ComponentOrientation 类封装语言敏感的方向，用于排序组件或文本内容。使用它可反映西方字母表、中东字母表（如希伯来语）和远东字母表（如日语）之间此种排序的差别。
 <p>
从根本上讲，此类管理在行中布局的各项（如字符），以及各行在块中的布局。这也适用于小部件中的各项：例如在一个复选框中，相对于文本而言该框的定位。
 <p>
现代语言中使用了 4 种不同的方向，如下表所示。<br>
 <pre>
 LT          RT          TL          TR   
 A B C       C B A       A D G       G D A
 D E F       F E D       B E H       H E B
 G H I       I H G       C F I       I F C
</pre><br>（在标题中，两字母缩写中的首个字母表示项的方向，第二个字母表示行的方向。例如，LT 意味着“项从左到右，行从上到下”，TL 则意味着“项从上到下，行从左到右”，依此类推。）
 <p>
方向有：
 <ul>
<li>LT - 西欧（可选用于日语、汉语、韩语）
<li>RT - 中东（阿拉伯语、希伯来语）
<li>TR - 日语、汉语、韩语
<li>TL - 蒙古语
 </ul>
其视图和控制器代码依靠方向的组件应该使用 <code>isLeftToRight()</code> 和 <code>isHorizontal()</code> 方法来确定其行为。这些组件不应包括类似于开关的代码来切换常量，如：
 <pre>
 if (orientation == LEFT_TO_RIGHT) {
   ...
 } else if (orientation == RIGHT_TO_LEFT) {
   ...
 } else {
   // Oops
 }
 </pre>
因为以后可能添加更多的常量，以及无法保证方向对象是惟一的，所以这是不安全的。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.ComponentOrientation java.awt.ComponentOrientation.LEFT_TO_RIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
各项从左到右布局，各行从上到下，示例：英语、法语。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.ComponentOrientation java.awt.ComponentOrientation.RIGHT_TO_LEFT
<!-- END KEY -->
<!-- BEGIN DATA -->
各项从右到左布局，各行从上到下，示例：阿拉伯语、希伯来语。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.ComponentOrientation java.awt.ComponentOrientation.UNKNOWN
<!-- END KEY -->
<!-- BEGIN DATA -->
表示尚未设置组件的方向。要保持现有应用程序的行为，isLeftToRight 将为此值返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.ComponentOrientation.isHorizontal()
<!-- END KEY -->
<!-- BEGIN DATA -->
各行是水平的？这将为水平的、从左到右的书写系统（如罗马语）返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.ComponentOrientation.isLeftToRight()
<!-- END KEY -->
<!-- BEGIN DATA -->
水平行：各项从左到右布局？<br>垂直行：各行从左到右布局？<br>这将为水平的、从左到右的书写系统（如罗马语）返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.ComponentOrientation java.awt.ComponentOrientation.getOrientation(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回适合于给定区域的方向。
@param locale 指定的区域

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.ComponentOrientation java.awt.ComponentOrientation.getOrientation(ResourceBundle bdl)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回适合于给定 ResourceBundle 的本地化的方向。按下列顺序尝试三种方法：
 <ol>
<li>使用字符串 &quot;Orientation&quot; 作为关键字从 ResourceBundle 中检索 ComponentOrientation 对象。
<li>使用 ResourceBundle.getLocale 确定资源包的区域，然后返回该区域的方向。
<li>返回默认区域的方向。
 </ol>

@deprecated 在 J2SE 1.4 中，使用 {@link #getOrientation(java.util.Locale)}。

<!-- END DATA -->
