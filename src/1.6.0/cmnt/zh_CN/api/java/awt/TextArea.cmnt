<!-- BEGIN KEY -->
public class java.awt.TextArea extends java.awt.TextComponent
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>TextArea</code> 对象是显示文本的多行区域。可以将它设置为允许编辑或只读。
 <p>
 下图显示了文本区的外观：
 <p>
 <img src="doc-files/TextArea-1.gif" alt="显示单词 'Hello!' 的 TextArea"
 ALIGN=center HSPACE=10 VSPACE=7>
 <p>
 此文本区可以使用以下代码行来创建：
 <p>
 <hr><blockquote><pre>
 new TextArea(&quot;Hello&quot;, 5, 40);
 </pre></blockquote><hr>
 <p>

@version	1.78, 05/18/04
@author 	Sami Shaio
@since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.TextArea.SCROLLBARS_BOTH
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并显示垂直和水平滚动条。
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.TextArea.SCROLLBARS_VERTICAL_ONLY
<!-- END KEY -->
<!-- BEGIN DATA -->
只创建并显示垂直滚动条。
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.TextArea.SCROLLBARS_HORIZONTAL_ONLY
<!-- END KEY -->
<!-- BEGIN DATA -->
只创建并显示水平滚动条。
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.TextArea.SCROLLBARS_NONE
<!-- END KEY -->
<!-- BEGIN DATA -->
不为文本区创建或显示任何滚动条。
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.TextArea.rows
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>TextArea</code> 中的行数。此参数将确定文本区的高度。要保证此参数为非负数。

@serial
@see #getRows()
@see #setRows(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.TextArea.columns
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>TextArea</code> 中的列数。列是近似平均字符宽度，它与平台有关。此参数将确定文本区的宽度。要保证此参数为非负数。

@serial
@see  #setColumns(int)
@see  #getColumns()

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.TextArea.scrollbarVisibility
<!-- END KEY -->
<!-- BEGIN DATA -->
确定为文本区创建哪种滚动条。它可以是以下四个值之一：<code>SCROLLBARS_BOTH</code> = 两种滚动条都创建。<BR> <code>SCROLLBARS_HORIZONTAL_ONLY</code> = 只创建水平滚动条。<BR><code>SCROLLBARS_VERTICAL_ONLY</code> = 只创建垂直滚动条。<BR><code>SCROLLBARS_NONE</code> = 不创建滚动条。<BR>

@serial
@see #getScrollbarVisibility()

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.TextArea.textAreaSerializedDataVersion
<!-- END KEY -->
<!-- BEGIN DATA -->
The textArea Serialized Data Version.

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.TextArea() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个将空字符串作为文本的新文本区。此文本区是在滚动条可见性等于 {@link #SCROLLBARS_BOTH} 的情况下创建的，所以垂直滚动条和水平滚动条对于文本区都将是可视的。
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless</code> 返回 true
@see java.awt.GraphicsEnvironment#isHeadless()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.TextArea(String text) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定文本的新文本区。文本区是在滚动条可见性等于 {@link #SCROLLBARS_BOTH} 的情况下创建的，所以垂直滚动条和水平滚动条对于文本区都将是可视的。
@param      text       要显示的文本；如果 <code>text</code> 为 <code>null</code>，则显示空字符串 <code>&quot;&quot;</code>
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless</code> 返回 true
@see java.awt.GraphicsEnvironment#isHeadless()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.TextArea(int rows, int columns) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新文本区，该文本区具有指定的行数和列数，并将空字符串作为文本。列是近似平均字符宽度，它与平台有关。文本区是在滚动条可见性等于 {@link #SCROLLBARS_BOTH} 的情况下创建的，所以垂直滚动条和水平滚动条对于文本区都将是可视的。
@param rows 行数
@param columns 列数
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless</code> 返回 true
@see java.awt.GraphicsEnvironment#isHeadless()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.TextArea(String text, int rows, int columns) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新文本区，该文本区具有指定的文本，以及指定的行数和列数。列是近似平均字符宽度，它与平台有关。文本区是在滚动条可见性等于 {@link #SCROLLBARS_BOTH} 的情况下创建的，所以垂直滚动条和水平滚动条对于文本区都将是可视的。
@param     text     要显示的文本；如果 <code>text</code> 为 <code>null</code>，则显示空字符串 <code>&quot;&quot;</code>
@param     rows      行数
@param     columns   列数
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless</code> 返回 true
@see java.awt.GraphicsEnvironment#isHeadless()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.TextArea(String text, int rows, int columns, int scrollbars) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新文本区，该文本区具有指定的文本，以及指定的行数、列数和滚动条可见性。所有 <code>TextArea</code> 构造方法都服从这一规定。
 <p>
 <code>TextArea</code> 类定义一些可以作为 <code>scrollbars</code> 参数值提供的常量： 
 <ul>
 <li><code>SCROLLBARS_BOTH</code>, 
 <li><code>SCROLLBARS_VERTICAL_ONLY</code>, 
 <li><code>SCROLLBARS_HORIZONTAL_ONLY</code>, 
 <li><code>SCROLLBARS_NONE</code>.
 </ul>
其他所有用于 <code>scrollbars</code> 参数的值都是无效的，并会使创建此文本区时使用的滚动条可见性等于 {@link #SCROLLBARS_BOTH} 的默认值。
@param      text       要显示的文本；如果 <code>text</code> 为 <code>null</code>，则显示空字符串 <code>&quot;&quot;</code>
@param     rows      行数；如果 <code>rows</code> 小于 <code>0</code>，则将 <code>rows</code> 设置为 <code>0</code>
@param      columns    列数；如果 <code>columns</code> 小于 <code>0</code>，则将 <code>columns</code> 设置为 <code>0</code>
@param      scrollbars  确定为查看文本区创建的滚动条类型的常量
@since      JDK1.1
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless</code> 返回 true
@see java.awt.GraphicsEnvironment#isHeadless()

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.TextArea.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 <code>TextArea</code> 的同位体。该同位体允许修改 <code>TextArea</code> 的外观，而不更改其功能。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.TextArea.insert(String str, int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
在此文本区的指定位置插入指定文本。
<p>注意，传递 <code>null</code> 或不一致的参数是无效的，并且将导致不确定的行为。

@param      str 要插入的非 <code>null</code> 文本
@param      pos 插入的位置
@see        java.awt.TextComponent#setText
@see        java.awt.TextArea#replaceRange
@see        java.awt.TextArea#append
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TextArea.insertText(String str, int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，由 <code>insert(String, int)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.TextArea.append(String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定文本追加到文本区的当前文本。
<p>注意，传递 <code>null</code> 或不一致的参数是无效的，并且将导致不确定的行为。

@param     str 要追加的非 <code>null</code> 文本
@see       java.awt.TextArea#insert
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TextArea.appendText(String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，由 <code>append(String)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.TextArea.replaceRange(String str, int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
用指定替换文本替换指定开始位置与结束位置之间的文本。结束处的文本不会被替换。开始位置处的文本会被替换（除非开始位置与结束位置相同）。文本位置是从零开始的。插入子字符串的长度可以与所替换文本的长度不同。
<p>注意，传递 <code>null</code> 或不一致的参数是无效的，并且将导致不确定的行为。

@param     str      用于替换的非 <code>null</code> 文本
@param     start    开始位置
@param     end      结束位置
@see       java.awt.TextArea#insert
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.TextArea.replaceText(String str, int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，由 <code>replaceRange(String, int, int)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.TextArea.getRows()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此文本区的行数。
@return    此文本区中的行数
@see       #setRows(int)
@see       #getColumns()
@since     JDK1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.TextArea.setRows(int rows)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此文本区的行数。
@param       rows   行数
@see         #getRows()
@see         #setColumns(int)
@exception   IllegalArgumentException   如果为 <code>rows</code> 提供的值小于 <code>0</code>
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.TextArea.getColumns()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此文本区中的列数。
@return    此文本区中的列数
@see       #setColumns(int)
@see       #getRows()

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.TextArea.setColumns(int columns)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此文本区的列数。
@param       columns   列数
@see         #getColumns()
@see         #setRows(int)
@exception   IllegalArgumentException   如果为 <code>columns</code> 提供的值小于 <code>0</code>
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.TextArea.getScrollbarVisibility()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指示文本区使用何种滚动条的枚举值。
<p>
<code>TextArea</code> 类定义了四个整数常量，用来指定哪些滚动条是可用的。<code>TextArea</code> 有一个给出滚动条上的应用方向的构造方法。

@return     指示使用哪种滚动条的整数
@see        java.awt.TextArea#SCROLLBARS_BOTH
@see        java.awt.TextArea#SCROLLBARS_VERTICAL_ONLY
@see        java.awt.TextArea#SCROLLBARS_HORIZONTAL_ONLY
@see        java.awt.TextArea#SCROLLBARS_NONE
@see        java.awt.TextArea#TextArea(java.lang.String, int, int, int)
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.TextArea.getPreferredSize(int rows, int columns)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定具有指定行数和列数的文本区的首选大小。
@param     rows   行数
@param     columns   列数
@return    显示具有指定行数和列数的文本区所需的首选尺寸
@see       java.awt.Component#getPreferredSize
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.TextArea.preferredSize(int rows, int columns)
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，由 <code>getPreferredSize(int, int)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.TextArea.getPreferredSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此文本区的首选大小。
@return    此文本区所需的首选尺寸
@see       java.awt.Component#getPreferredSize
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.TextArea.preferredSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，由 <code>getPreferredSize()</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.TextArea.getMinimumSize(int rows, int columns)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定具有指定行数和列数的文本区的最小大小。
@param     rows   行数
@param     columns   列数
@return    显示具有指定行数和列数的文本区所需的最小尺寸
@see       java.awt.Component#getMinimumSize
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.TextArea.minimumSize(int rows, int columns)
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，由 <code>getMinimumSize(int, int)</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.TextArea.getMinimumSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此文本区的最小大小。
@return    此文本区所需的首选尺寸
@see       java.awt.Component#getPreferredSize
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.TextArea.minimumSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
@deprecated 从 JDK version 1.1 开始，由 <code>getMinimumSize()</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.awt.TextArea.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此 <code>TextArea</code> 状态的字符串。此方法仅用于调试目的，对于各个实现，返回的字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。

@return     此文本区的参数字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.TextArea.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>TextArea</code> 相关的 <code>AccessibleContext</code>。对于文本区，<code>AccessibleContext</code> 采用 <code>AccessibleAWTTextArea</code> 的形式。如有必要，可创建一个新的 <code>AccessibleAWTTextArea</code> 实例。

@return 用作此 <code>TextArea</code> 的 <code>AccessibleContext</code> 的 <code>AccessibleAWTTextArea</code>

@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.TextArea.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取 ObjectInputStream。
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless()</code> 返回 <code>true</code>
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
