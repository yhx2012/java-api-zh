<!-- BEGIN KEY -->
public final class java.awt.PageAttributes extends java.lang.Object implements java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
用来控制打印页面输出的属性集。
 <p>
此类的实例控制颜色状态、纸张尺寸（介质类型）、打印方向、逻辑原点、打印质量，以及使用实例的每个页面的分辨率。属性名尽可能遵守 Internet Printing Protocol (IPP) 1.1。属性值要尽可能部分地遵守该协议。
 <p>
要使用采用内部类类型的方法，需要将引用传递给内部类的常量字段之一。客户端代码无法创建内部类类型的新实例，因为这些类都不具有公共构造方法。例如，为了将颜色状态设置为单色，需要使用以下代码：
 <pre>
 import java.awt.PageAttributes;

 public class MonochromeExample {
     public void setMonochrome(PageAttributes pageAttributes) {
         pageAttributes.setColor(PageAttributes.ColorType.MONOCHROME);
     }
 }
 </pre>
 <p>
每个支持 <i>attributeName</i>（默认值）的 IPP 属性均有一个对应的 <code>set<i>attributeName</i>ToDefault</code> 方法。未提供默认值字段。

@version	1.7, 12/19/03
@author	David Mendenhall
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.PageAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有每个属性的默认值的 PageAttributes 实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.PageAttributes(PageAttributes obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 PageAttributes 实例，它是所提供的 PageAttributes 的副本。

@param	obj 要复制的 PageAttributes。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.PageAttributes(PageAttributes.ColorType color, PageAttributes.MediaType media, PageAttributes.OrientationRequestedType orientationRequested, PageAttributes.OriginType origin, PageAttributes.PrintQualityType printQuality, int[] printerResolution)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个具有每个属性的指定值的 PageAttributes 实例。

@param	color ColorType.COLOR 或 ColorType.MONOCHROME。
@param	media MediaType 类的常数字段之一。
@param	orientationRequested OrientationRequestedType.PORTRAIT 或 OrientationRequestedType.LANDSCAPE。
@param	origin OriginType.PHYSICAL 或 OriginType.PRINTABLE
@param	printQuality PrintQualityType.DRAFT、PrintQualityType.NORMAL 或 PrintQualityType.HIGH
@param	printerResolution 3 个元素的整数数组。第一、二个元素必须大于 0，第三个元素必须为 <code>3</code> 或 <code>4</code>。
@throws	IllegalArgumentException 如果违反了一个或多个上述条件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.PageAttributes.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并返回此 PageAttributes 的一个副本。

@return	新创建的副本。可以安全地将此 Object 强制转换为 PageAttributes。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.PageAttributes.set(PageAttributes obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 PageAttributes 的所有属性设置为与 obj 的属性相同的值。

@param	obj 要复制的 PageAttributes。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.PageAttributes.ColorType java.awt.PageAttributes.getColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回使用这些属性的页面是以彩色呈现，还是以单色呈现。此属性更新为用户选择的值。

@return	ColorType.COLOR 或 ColorType.MONOCHROME。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.PageAttributes.setColor(PageAttributes.ColorType color)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定使用这些属性的页面以彩色呈现，还是以单色呈现。如果不指定此属性，则默认指定 ColorType.MONOCHROME。

@param	color ColorType.COLOR 或 ColorType.MONOCHROME。
@throws	IllegalArgumentException 如果 color 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.PageAttributes.MediaType java.awt.PageAttributes.getMedia()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回使用这些属性的页面的纸张尺寸。此属性更新为用户选择的值。 

@return	MediaType 类的常数字段之一。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.PageAttributes.setMedia(PageAttributes.MediaType media)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定使用这些属性的页面所需的纸张尺寸。实际的纸张尺寸取决于目标打印机的限制。如果无法找到精确的匹配，则选择尽可能相近的匹配来实现。如果不指定此属性，则采用默认地区的默认尺寸。美国和加拿大地区的默认尺寸为 MediaType.NA_LETTER。所有其他地区的默认尺寸为 MediaType.ISO_A4。

@param	media MediaType 类的常数字段之一。
@throws	IllegalArgumentException 如果 media 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.PageAttributes.setMediaToDefault()
<!-- END KEY -->
<!-- BEGIN DATA -->
将使用这些属性的页面的纸张尺寸设置为默认地区的默认尺寸。美国和加拿大地区的默认尺寸为 MediaType.NA_LETTER。所有其他地区的默认尺寸为 MediaType.ISO_A4。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.PageAttributes.OrientationRequestedType java.awt.PageAttributes.getOrientationRequested()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回使用这些属性的页面的打印方向。此属性更新为用户选择的值。

@return	OrientationRequestedType.PORTRAIT 或 OrientationRequestedType.LANDSCAPE。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.PageAttributes.setOrientationRequested(PageAttributes.OrientationRequestedType orientationRequested)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定使用这些属性的页面的打印方向。如果不指定此属性，则默认指定 OrientationRequestedType.PORTRAIT。

@param	orientationRequested OrientationRequestedType.PORTRAIT 或 OrientationRequestedType.LANDSCAPE。
@throws	IllegalArgumentException 如果 orientationRequested 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.PageAttributes.setOrientationRequested(int orientationRequested)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定使用这些属性的页面的打印方向。指定 <code>3</code> 表示纵向打印。指定 <code>4</code> 表示横向打印。指定任何其他值将生成 IllegalArgumentException。如果不指定此属性，则默认调用 setOrientationRequested(OrientationRequestedType.PORTRAIT)。

@param	orientationRequested <code>3</code> 或 <code>4</code>
@throws	IllegalArgumentException 如果 orientationRequested 不为 <code>3</code> 或 <code>4</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.PageAttributes.setOrientationRequestedToDefault()
<!-- END KEY -->
<!-- BEGIN DATA -->
将使用这些属性的页面的打印方向设置为默认值。默认的打印方向为纵向。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.PageAttributes.OriginType java.awt.PageAttributes.getOrigin()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在使用这些属性的页面上的 (0, 0) 绘制的起始位置，即是从逻辑页面的左上角开始绘制，还是从可打印区域的左上角开始绘制。（注意，这些位置可能是等效的）。任何实现或目标打印机都不能修改此属性，也不能对其加以限制。

@return	OriginType.PHYSICAL 或 OriginType.PRINTABLE

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.PageAttributes.setOrigin(PageAttributes.OriginType origin)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定在使用这些属性的页面上的 (0, 0) 绘制的起始位置，即是从逻辑页面的左上角开始绘制，还是从可打印区域的左上角开始绘制。（注意，这些位置可能是等效的）。如果不指定此属性，则默认指定 OriginType.PHYSICAL。

@param	origin OriginType.PHYSICAL 或 OriginType.PRINTABLE
@throws	IllegalArgumentException 如果 origin 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.PageAttributes.PrintQualityType java.awt.PageAttributes.getPrintQuality()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回使用这些属性的页面的打印质量。此属性更新为用户选择的值。

@return	PrintQualityType.DRAFT、PrintQualityType.NORMAL 或 PrintQualityType.HIGH

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.PageAttributes.setPrintQuality(PageAttributes.PrintQualityType printQuality)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定使用这些属性的页面的打印质量。如果不指定此属性，则默认指定 PrintQualityType.NORMAL。

@param	printQuality PrintQualityType.DRAFT、PrintQualityType.NORMAL 或 PrintQualityType.HIGH
@throws	IllegalArgumentException 如果 printQuality 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.PageAttributes.setPrintQuality(int printQuality)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定使用这些属性的页面的打印质量。指定 <code>3</code> 表示草稿质量。指定 <code>4</code> 表示标准质量。指定 <code>5</code> 表示高质量。指定任何其他值都将会生成 IllegalArgumentException。如果不指定此属性，则调用 setPrintQuality(PrintQualityType.NORMAL)。

@param	printQuality <code>3</code>、<code>4</code> 或 <code>5</code>
@throws	IllegalArgumentException 如果 printQuality 不为	<code>3</code>、<code>4</code> 或 <code>5</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.PageAttributes.setPrintQualityToDefault()
<!-- END KEY -->
<!-- BEGIN DATA -->
将使用这些属性的页面的打印质量设置为默认值。默认的打印质量为标准质量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.awt.PageAttributes.getPrinterResolution()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回使用这些属性的页面的打印分辨率。数组的索引 0 指定反向进纸的分辨率（通常为水平分辨率）。数组的索引 1 指定进纸的分辨率（通常为垂直分辨率）。数组的索引 2 指定分辨率是以每英寸的点数为单位，还是以每厘米的点数为单位。<code>3</code> 表示以每英寸的点数为单位。<code>4</code> 表示以每厘米的点数为单位。

@return	 3 个元素的整数数组。第一、二个元素必须大于 0，第三个元素必须为 <code>3</code> 或 <code>4</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.PageAttributes.setPrinterResolution(int[] printerResolution)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定使用这些属性的页面所需的打印分辨率。实际的分辨率取决于实现和目标打印机的限制。数组的索引 0 指定反向进纸的分辨率（通常为水平分辨率）。数组的索引 1 指定进纸的分辨率（通常为垂直分辨率）。数组的索引 2 指定分辨率是以每英寸的点数为单位，还是以每厘米的点数为单位。<code>3</code> 表示以每英寸的点数为单位。<code>4</code> 表示以每厘米的点数为单位。注意，1.1 打印实现 (Toolkit.getPrintJob) 要求进纸和反向进纸具有相同的分辨率。如果不指定此属性，则调用 setPrinterResolution(72)。

@param	printerResolution 3 个元素的整数数组。第一、二个元素必须大于 0，第三个元素必须为 <code>3</code> 或 <code>4</code>。
@throws	IllegalArgumentException 如果违反了一个或多个上述条件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.PageAttributes.setPrinterResolution(int printerResolution)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定使用这些属性的页面所需的反向进纸和进纸的打印分辨率，分辨率以每英寸的点数为单位。相同的值同时用于这两种分辨率。实际的分辨率取决于实现和目标打印机的限制。如果不指定此属性，则默认指定 <code>72</code>。

@param	printerResolution 大于 0 的整数。
@throws	IllegalArgumentException 如果 printerResolution 小于或等于 0。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.PageAttributes.setPrinterResolutionToDefault()
<!-- END KEY -->
<!-- BEGIN DATA -->
将使用这些属性的页面的打印机分辨率设置为默认值。进纸和反向进纸的默认分辨率均为 72 dpi。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.PageAttributes.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定两个 PageAttributes 是否相等。
 <p>
当且仅当两个 PageAttributes 的每个属性均相等时，它们才是相等的。当且仅当字段的引用指向相同的唯一枚举对象时，枚举类型的属性才是相等的。这意味着一个有别名的 media 等效于基础的唯一 media。当且仅当进纸分辨率、反向进纸分辨率和单位相等时，打印机分辨率才是相等的。

@param	obj 将检查其相等性的对象。
@return	根据以上标准，obj 是否等于此 PageAttribute。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.PageAttributes.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 PageAttributes 的哈希码值。

@return	哈希码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.PageAttributes.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 PageAttributes 的字符串表示形式。

@return	字符串表示形式。

<!-- END DATA -->
