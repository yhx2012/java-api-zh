<!-- BEGIN KEY -->
public class java.awt.AWTKeyStroke extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>AWTKeyStroke</code> 表示键盘（或等效输入设备）上的键操作。正如 <code>KEY_PRESSED</code> 和 <code>KEY_RELEASED</code> <code>KeyEvent</code> 一样，<code>AWTKeyStroke</code> 仅对应于一个特定键的按下或释放；另一方面，它们与 <code>KEY_TYPED</code> <code>KeyEvent</code> 事件一样，对应于键入一个特定 Java 字符的操作。在所有情况下，<code>AWTKeyStroke</code> 都可以指定修改键（alt、shift、control、meta、altGraph 或它们的组合），在针对精确匹配的操作中，这些修改键必须存在。
 <p>
<code>AWTKeyStrokes</code> 是不可变的，并且应该是唯一的。客户机代码绝对不能自己创建 <code>AWTKeyStroke</code>，而应该使用 <code>getAWTKeyStroke</code> 的一个变体代替。使用这些工厂方法的客户机允许 <code>AWTKeyStroke</code> 实现有效地缓存和共享实例。

@see #getAWTKeyStroke

@version 1.28, 02/06/06
@author Arnaud Weber
@author David Mendenhall
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.AWTKeyStroke()
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认值构造 <code>AWTKeyStroke</code>。使用的默认值如下：
<table border="1" summary="AWTKeyStroke default values">
<tr><th>属性</th><th>默认值</th></tr>
 <tr>
    <td>Key Char</td>
    <td><code>KeyEvent.CHAR_UNDEFINED</code></td>
 </tr>
 <tr>
    <td>Key Code</td>
    <td><code>KeyEvent.VK_UNDEFINED</code></td>
 </tr>
 <tr>
    <td>Modifiers</td>
    <td>none</td>
 </tr>
 <tr>
    <td>On key release?</td>
    <td><code>false</code></td>
 </tr>
 </table>
 
不应该通过客户机代码构造 <code>AWTKeyStroke</code>。应该使用 <code>getAWTKeyStroke</code> 的一个变体代替。

@see #getAWTKeyStroke

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.AWTKeyStroke(char keyChar, int keyCode, int modifiers, boolean onKeyRelease)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定值构造 <code>AWTKeyStroke</code>。不应该通过客户机代码构造 <code>AWTKeyStroke</code>。应该使用 <code>getAWTKeyStroke</code> 的一个变体代替。

@param keyChar 键盘上某个键的字符值
@param keyCode 此 <code>AWTKeyStroke</code> 的键代码
@param modifiers 任意修饰符的按位或组合
@param onKeyRelease 如果此 <code>AWTKeyStroke</code> 对应一个键释放，则该参数为 <code>true</code>；否则为 <code>false</code>
@see #getAWTKeyStroke

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static void java.awt.AWTKeyStroke.registerSubclass(java.lang.Class<?> subclass)
<!-- END KEY -->
<!-- BEGIN DATA -->
注册一个新类，<code>AWTKeyStroke</code> 中的工厂方法在生成 <code>AWTKeyStroke</code> 的新实例时将使用它。调用此方法后，工厂方法将返回指定类的实例。指定的类必须是 <code>AWTKeyStroke</code> 或者从 <code>AWTKeyStroke</code> 派生的类，并且它必须有一个无参数构造方法。此构造方法可以具有任意的可访问性，其中包括 <code>private</code>。此操作刷新当前的 <code>AWTKeyStroke</code> 缓存。

@param subclass 工厂方法应该创建其实例的新类
@throws IllegalArgumentException 如果 subclass 为 <code>null</code>，或者 subclass 没有无参数构造方法
@throws ClassCastException 如果 subclass 不是 <code>AWTKeyStroke</code> 或者从 <code>AWTKeyStroke</code> 派生的类

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.AWTKeyStroke java.awt.AWTKeyStroke.getAWTKeyStroke(char keyChar)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示指定字符的 <code>KEY_TYPED</code> 事件的 <code>AWTKeyStroke</code> 的一个共享实例。

@param keyChar 键盘上某个键的字符值
@return 该键的 <code>AWTKeyStroke</code> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.AWTKeyStroke java.awt.AWTKeyStroke.getAWTKeyStroke(Character keyChar, int modifiers)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个共享的 {@code AWTKeyStroke} 实例，它表示针对指定 Character 对象和一组组合键的 {@code KEY_TYPED} 事件。注意，第一个参数是 Character 类型而不是 char 类型。这是为了避免在调用 <code>getAWTKeyStroke(int keyCode, int modifiers)</code> 时发生无意的冲突。修饰符由以下任意组合组成：<ul>
<li>java.awt.event.InputEvent.SHIFT_DOWN_MASK 
<li>java.awt.event.InputEvent.CTRL_DOWN_MASK
<li>java.awt.event.InputEvent.META_DOWN_MASK
<li>java.awt.event.InputEvent.ALT_DOWN_MASK
<li>java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
</ul>
也可以使用下面列出的旧的修改键，但它们被映射到 _DOWN_ 修饰符。<ul>
<li>java.awt.event.InputEvent.SHIFT_MASK 
<li>java.awt.event.InputEvent.CTRL_MASK 
<li>java.awt.event.InputEvent.META_MASK 
<li>java.awt.event.InputEvent.ALT_MASK
<li>java.awt.event.InputEvent.ALT_GRAPH_MASK
</ul> 
也可以使用，但它们被映射到 _DOWN_ 修饰符。因为这些数字都是 2 的不同次幂，所以它们的任意组合是一个整数，该整数的每个位都表示一个不同的修饰符键。可以使用 0 指定无修饰符。

@param keyChar 键盘字符的 Character 对象
@param modifiers 任意修饰符的按位或组合
@return 该键的 <code>AWTKeyStroke</code> 对象
@throws IllegalArgumentException 如果 <code>keyChar</code> 为 <code>null</code>

@see java.awt.event.InputEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.AWTKeyStroke java.awt.AWTKeyStroke.getAWTKeyStroke(int keyCode, int modifiers, boolean onKeyRelease)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给出一个数字键代码和一组修饰符的情况下，返回 <code>AWTKeyStroke</code> 的一个共享实例，指定该键在按下或释放时是否是被激活。
 <p>
可以使用在 <code>java.awt.event.KeyEvent</code> 中定义的&ldquo;虚拟键&rdquo;常量来指定键代码。例如：<ul>
<li><code>java.awt.event.KeyEvent.VK_ENTER</code> 
<li><code>java.awt.event.KeyEvent.VK_TAB</code>
<li><code>java.awt.event.KeyEvent.VK_SPACE</code>
</ul>
修饰符由以下任意组合组成：<ul>
<li>java.awt.event.InputEvent.SHIFT_DOWN_MASK 
<li>java.awt.event.InputEvent.CTRL_DOWN_MASK
<li>java.awt.event.InputEvent.META_DOWN_MASK
<li>java.awt.event.InputEvent.ALT_DOWN_MASK
<li>java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
</ul>
旧的修饰符 <ul>
<li>java.awt.event.InputEvent.SHIFT_MASK 
<li>java.awt.event.InputEvent.CTRL_MASK 
<li>java.awt.event.InputEvent.META_MASK 
<li>java.awt.event.InputEvent.ALT_MASK
<li>java.awt.event.InputEvent.ALT_GRAPH_MASK
</ul> 
也可以使用，但它们被映射到 _DOWN_ 修饰符。因为这些数字都是 2 的不同次幂，所以它们的任意组合是一个整数，该整数的每个位都表示一个不同的修饰符键。可以使用 0 指定无修饰符。

@param keyCode 一个 int，指定键盘上某个键的数字代码 
@param modifiers 任意修饰符的按位或组合
@param onKeyRelease 如果 <code>AWTKeyStroke</code> 应该表示一个键释放，则该参数为 <code>true</code>；否则为 <code>false</code>
@return 该键的 AWTKeyStroke 对象

@see java.awt.event.KeyEvent
@see java.awt.event.InputEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.AWTKeyStroke java.awt.AWTKeyStroke.getAWTKeyStroke(int keyCode, int modifiers)
<!-- END KEY -->
<!-- BEGIN DATA -->
在给出一个数字键代码和一组修饰符的情况下，返回 <code>AWTKeyStroke</code> 的一个共享实例。返回的 <code>AWTKeyStroke</code> 将对应于一个按键操作。
 <p>
可以使用在 <code>java.awt.event.KeyEvent</code> 中定义的&ldquo;虚拟键&rdquo;常量来指定键代码。例如：<ul>
 <li><code>java.awt.event.KeyEvent.VK_ENTER</code> 
 <li><code>java.awt.event.KeyEvent.VK_TAB</code>
 <li><code>java.awt.event.KeyEvent.VK_SPACE</code>
 </ul>
修饰符由以下任意组合组成：<ul>
 <li>java.awt.event.InputEvent.SHIFT_DOWN_MASK 
 <li>java.awt.event.InputEvent.CTRL_DOWN_MASK
 <li>java.awt.event.InputEvent.META_DOWN_MASK
 <li>java.awt.event.InputEvent.ALT_DOWN_MASK
 <li>java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
 </ul>
旧的修饰符 <ul>
 <li>java.awt.event.InputEvent.SHIFT_MASK 
 <li>java.awt.event.InputEvent.CTRL_MASK 
 <li>java.awt.event.InputEvent.META_MASK 
 <li>java.awt.event.InputEvent.ALT_MASK
 <li>java.awt.event.InputEvent.ALT_GRAPH_MASK
 </ul> 
也可以使用，但它们被映射到 _DOWN_ 修饰符。

因为这些数字都是 2 的不同次幂，所以它们的任意组合是一个整数，该整数的每个位都表示一个不同的修饰符键。可以使用 0 指定无修饰符。

@param keyCode 一个 int，指定键盘上某个键的数字代码
@param modifiers 任意修饰符的按位或组合
@return 该键的 <code>AWTKeyStroke</code> 对象

@see java.awt.event.KeyEvent
@see java.awt.event.InputEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.AWTKeyStroke java.awt.AWTKeyStroke.getAWTKeyStrokeForEvent(KeyEvent anEvent)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个 <code>AWTKeyStroke</code>，它表示生成给定 <code>KeyEvent</code> 的键击事件。
 <p>
此方法获得来自 <code>KeyTyped</code> 事件的 keyChar，以及来自 <code>KeyPressed</code> 或 <code>KeyReleased</code> 事件的 keyCode。为所有三种类型的 <code>KeyEvent</code> 获取 <code>KeyEvent</code> 修饰符。

@param anEvent 从中获取 <code>AWTKeyStroke</code> 的 <code>KeyEvent</code>
@throws NullPointerException 如果 <code>anEvent</code> 为 null
@return 促使该事件发生的 <code>AWTKeyStroke</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.AWTKeyStroke java.awt.AWTKeyStroke.getAWTKeyStroke(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
分析字符串并返回一个 <code>AWTKeyStroke</code>。该字符串必须具有以下语法：
 <pre>
    &lt;modifiers&gt;* (&lt;typedID&gt; | &lt;pressedReleasedID&gt;)

    modifiers := shift | control | ctrl | meta | alt | altGraph 
    typedID := typed &lt;typedKey&gt;
    typedKey := string of length 1 giving Unicode character.
    pressedReleasedID := (pressed | released) key
    key := KeyEvent key code name, i.e. the name following &quot;VK_&quot;.
 </pre>
如果没有指定是键入、按下还是释放，则假定为按下。以下是一些示例：
 <pre>
     &quot;INSERT&quot; =&gt; getAWTKeyStroke(KeyEvent.VK_INSERT, 0);
     &quot;control DELETE&quot; =&gt; getAWTKeyStroke(KeyEvent.VK_DELETE, InputEvent.CTRL_MASK);
     &quot;alt shift X&quot; =&gt; getAWTKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK);
     &quot;alt shift released X&quot; =&gt; getAWTKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK, true);
     &quot;typed a&quot; =&gt; getAWTKeyStroke('a');
 </pre>

@param s 用上述方法格式化的一个字符串
@return 该字符串的一个 <code>AWTKeyStroke</code> 对象
@throws IllegalArgumentException 如果 <code>s</code> 为 <code>null</code>，或者没有被正确地格式化

<!-- END DATA -->
<!-- BEGIN KEY -->
public final char java.awt.AWTKeyStroke.getKeyChar()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>AWTKeyStroke</code> 的字符。

@return 一个 char 值
@see #getAWTKeyStroke(char)
@see KeyEvent#getKeyChar

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.AWTKeyStroke.getKeyCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>AWTKeyStroke</code> 的数字键代码。

@return 一个 int，它包含键代码值
@see #getAWTKeyStroke(int,int)
@see KeyEvent#getKeyCode

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.AWTKeyStroke.getModifiers()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>AWTKeyStroke</code> 的修饰符键。

@return 一个 int，它包含修饰符
@see #getAWTKeyStroke(int,int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.awt.AWTKeyStroke.isOnKeyRelease()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>AWTKeyStroke</code> 是否表示一个键释放操作。

@return 如果此 <code>AWTKeyStroke</code> 表示一个键释放操作，则返回 <code>true</code>；否则返回 <code>false</code>
@see #getAWTKeyStroke(int,int,boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.AWTKeyStroke.getKeyEventType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>KeyEvent</code> 的类型，它对应于此 <code>AWTKeyStroke</code>。

@return <code>KeyEvent.KEY_PRESSED</code>、<code>KeyEvent.KEY_TYPED</code> 或 <code>KeyEvent.KEY_RELEASED</code>
@see java.awt.event.KeyEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.AWTKeyStroke.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象的数值，它可能是唯一的，将它用作哈希表中的索引值是一个好选择。

@return 表示此对象的一个 int

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.awt.AWTKeyStroke.equals(Object anObject)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此对象与指定对象相同，则返回 true。

@param anObject 将与此对象进行比较的对象
@return 如果两个对象相同，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.AWTKeyStroke.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个显示并标识此对象属性的字符串。可以将此方法返回的 <code>String</code> 作为参数传递给 <code>getAWTKeyStroke(String)</code>，以生成一个与此键击等效的键击。

@return 此对象的字符串表示形式
@see #getAWTKeyStroke(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object java.awt.AWTKeyStroke.readResolve() throws java.io.ObjectStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>AWTKeyStroke</code> 的一个缓存实例（或 <code>AWTKeyStroke</code> 的子类），它与此实例相等。

@return 一个与此实例相等的缓存实例

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object java.awt.AWTKeyStroke.readResolve() throws java.io.ObjectStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>AWTKeyStroke</code> 的一个缓存实例（或 <code>AWTKeyStroke</code> 的子类），它与此实例相等。

@return 一个与此实例相等的缓存实例

<!-- END DATA -->
