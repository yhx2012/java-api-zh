<!-- BEGIN KEY -->
public abstract class java.awt.Graphics2D extends java.awt.Graphics
<!-- END KEY -->
<!-- BEGIN DATA -->
此 <code>Graphics2D</code> 类扩展 {@link Graphics} 类，以提供对几何形状、坐标转换、颜色管理和文本布局更为复杂的控制。它是用于在 Java(tm) 平台上呈现二维形状、文本和图像的基础类。
<p>
<h2>坐标空间</h2>
所有传递到 <code>Graphics2D</code> 对象的坐标都在一个与设备无关并且名为用户空间的坐标系中指定，用户空间由应用程序使用。<code>Graphics2D</code> 对象包含一个 {@link AffineTransform} 对象作为其呈现状态的一部分，后者定义了如何将坐标从用户空间转换到设备空间中与设备有关的坐标。
<p>
设备空间中的坐标通常是指单个设备像素，并根据这些像素之间无限小的间距对齐。某些 <code>Graphics2D</code> 对象可用于捕获对存储器的呈现操作并存入图形元文件，以后可在未知物理分辨率的具体设备上重放。由于在捕获呈现操作时分辨率可能未知，所以 <code>Graphics2D</code> <code>Transform</code> 的设置可将用户坐标转换为虚拟设备空间，该设备空间与目标设备的预期分辨率接近。如果估计值不正确，则在重放时可能需要进一步转换。
<p>
某些由呈现属性对象执行的操作发生在设备空间中，但所有 <code>Graphics2D</code> 方法都采用用户空间坐标。
<p>
每个 <code>Graphics2D</code> 对象都与一个定义呈现位置的目标关联。{@link GraphicsConfiguration} 对象定义呈现目标的特征，如像素格式和分辨率。在 <code>Graphics2D</code> 对象的整个生命周期中都使用相同的呈现目标。
<p>
创建 <code>Graphics2D</code> 对象时，<code>GraphicsConfiguration</code> 将为 <code>Graphics2D</code> 的目标({@link Component} 或 {@link Image}）指定<a name="#deftransform">默认转换</a>，此默认转换将用户空间坐标系映射到屏幕和打印机设备坐标，使原点映射到设备目标区域的左上角，并将 X 坐标轴向右方延伸，将 Y 坐标轴向下方延伸。对于接近 72 dpi 的设备（例如屏幕设备），默认转换的缩放比例设置为 1:1。对于高分辨率设备（例如打印机），默认转换的缩放比例设置为每平方英寸大约 72 个用户空间坐标。对于图像缓冲区，默认转换为 <code>Identity</code> 转换。

<h2>呈现过程</h2>
呈现过程可以分为四个阶段，这四个阶段由 <code>Graphics2D</code> 呈现属性控制。呈现器可以优化当中的许多步骤：可以缓存结果以用于未来调用；可以将多个虚拟步骤合成一个操作；可以将多种属性识别为共用的简单情况（可以通过修改操作的其他部分来消除各种属性间的差别）。
<p>
呈现过程中的步骤有：
<ol>
<li>
确定呈现内容。
<li>
将呈现操作限制在当前 <code>Clip</code>。
<code>Clip</code> 由用户空间中的 {@link Shape} 指定，由使用 <code>Graphics</code> 和 <code>Graphics2D</code> 中各种 clip 操作方法的程序控制。此<i>用户剪贴区</i> 由当前 <code>Transform</code> 转换到设备空间中，并与<i>设备剪贴区</i> 合并，后者是通过窗口可见性和设备范围定义的。用户剪贴区和设备剪贴区的组合定义<i>复合剪贴区</i>，复合剪贴区确定最终的剪贴区域。呈现系统不能修改用户剪贴区来反映得到的复合剪贴区。
<li>
确定呈现的颜色。
<li>
使用 <code>Graphics2D</code> 上下文中当前的 {@link Composite} 属性将颜色应用于目标绘图面。
</ol>
<br> 三种类型的呈现操作，以及各自特殊呈现过程的细节如下：
<ol>
<li>
<b><a name="rendershape"><code>Shape</code> 操作</a></b>
<ol>
<li>
如果该操作为 <code>draw(Shape)</code> 操作，则 <code>Graphics2D</code> 上下文中当前 {@link Stroke} 属性上的 {@link Stroke#createStrokedShape(Shape) createStrokedShape} 方法将用于构造包含指定 <code>Shape</code> 轮廓的新 <code>Shape</code> 对象。
<li>
使用 <code>Graphics2D</code> 上下文中的当前 <code>Transform</code> 将 <code>Shape</code> 从用户空间转换到设备空间。
<li>
<code>Shape</code> 的轮廓是通过使用 <code>Shape</code> 的 {@link Shape#getPathIterator(AffineTransform) getPathIterator} 方法提取的，该方法返回一个沿着 <code>Shape</code> 边界迭代得到的 {@link java.awt.geom.PathIterator PathIterator} 对象。
<li>
如果 <code>Graphics2D</code> 对象无法处理 <code>PathIterator</code> 对象返回的曲线段，则可以调用 <code>Shape</code> 的 {@link Shape#getPathIterator(AffineTransform, double) getPathIterator} 替代方法，该方法可使 <code>Shape</code> 变得平滑。
<li>
对于 {@link PaintContext}，需要 <code>Graphics2D</code> 上下文中的当前 {@link Paint}，它指定了在设备空间中呈现的颜色。
</ol>
<li>
<b><a name=rendertext>文本操作</a></b>
<ol>
<li>
以下步骤用于确定呈现指定 <code>String</code> 所需的字形集：
<ol>
<li>
如果参数是 <code>String</code>，则要求 <code>Graphics2D</code> 上下文中的当前 <code>Font</code> 将 <code>String</code> 中的 Unicode 字符转换为一个字形集，以表现 Font 实现的基本布局和成形算法。
<li>
如果参数是 {@link AttributedCharacterIterator}，则要求迭代器使用其内嵌的字体属性将其自身转换为 {@link java.awt.font.TextLayout TextLayout}。<code>TextLayout</code> 实现更为复杂的字形布局算法，用于为不同书写方向的多种字体自动执行 Unicode 双方向布局调整。
<li>
如果参数是 {@link GlyphVector}，则 <code>GlyphVector</code> 对象已经包含了特定于字体的合适字形代码和每个字形位置的显式坐标。
</ol>
<li>
查询当前的 <code>Font</code> 以获取指定字形的轮廓。这些轮廓被视为用户空间中相对于步骤 1 中确定的每个字形位置的形状。
<li>
字符轮廓按上面 <a href="#rendershape"><code>Shape</code> 操作</a>下指示的方式填充。
<li>
查询当前 <code>PaintContext</code> 以获取 <code>Paint</code>，Paint 指定了设备空间中呈现的颜色。
</ol>
<li>
<b><a name= renderingimage><code>Image</code> 操作</a></b>
<ol>
<li>
感兴趣区域由源 <code>Image</code> 的边界框定义。此边界框在图像空间中指定，该空间即 <code>Image</code> 对象的本地坐标系。
<li>
如果 <code>AffineTransform</code> 被传递到 {@link #drawImage(java.awt.Image, java.awt.geom.AffineTransform, java.awt.image.ImageObserver) drawImage(Image, AffineTransform, ImageObserver)}，则使用 <code>AffineTransform</code> 将边界框从图像空间转换到用户空间。如果未提供 <code>AffineTransform</code>，则认为边界框已存在于用户空间中。
<li>
使用当前 <code>Transform</code> 将 <code>Image</code> 的边界框从用户空间转换到设备空间。注意，转换边界框的结果不一定会得到设备空间中的矩形区域。
<li>
<code>Image</code> 对象确定要呈现的颜色，并根据当前 <code>Transform</code> 和可选图像转换所指定的源到目标坐标映射关系进行采样。
</ol>
</ol>

<h2>默认呈现属性</h2>
<code>Graphics2D</code> 呈现属性的默认值有：
<dl compact>
<dt><i><code>Paint</code></i>
<dd><code>Component</code> 的颜色。
<dt><i><code>Font</code></i>
<dd><code>Component</code> 的 <code>Font</code>。
<dt><i><code>Stroke</code></i>
<dd>线宽为 1 的方形画笔，没有虚线、斜角线段接合和方形端点。
<dt><i><code>Transform</code></i>
<dd>用于 <code>Component</code> 的 <code>GraphicsConfiguration</code> 的 {@link GraphicsConfiguration#getDefaultTransform() getDefaultTransform}。
<dt><i><code>Composite</code></i>
<dd>{@link AlphaComposite#SRC_OVER} 规则。
<dt><i><code>Clip</code></i>
<dd>不呈现 <code>Clip</code>，输出局限于 <code>Component</code>。
</dl>

<h2>呈现兼容性问题</h2>
JDK(tm) 1.1 呈现模型是基于像素化的模型，该模型的坐标无限细分，且位于像素之间。使用一个一像素宽的画笔执行绘制操作，填充路径锚点向下和向右的像素。JDK 1.1 呈现模型与大多数现有平台呈现类的功能一致，需要将整数坐标解析为离散的画笔，使其完全落在指定的像素成员上。
<p>
Java 2D(tm)（Java(tm) 2 平台）API 支持抗锯齿呈现器。一像素宽的画笔不需要完全落在像素 N 或像素 N+1 上。该画笔可以部分落在这两个像素上。不需要为宽画笔选择一个偏离方向，因为沿画笔遍历边缘发生的混合可让画笔的子像素位置对用户可见。另一方面，如果通过将 {@link RenderingHints#KEY_ANTIALIASING KEY_ANTIALIASING} 提示键设置为 {@link RenderingHints#VALUE_ANTIALIAS_OFF VALUE_ANTIALIAS_OFF} 提示值而关闭了抗锯齿，则当画笔跨在像素边界上时，呈现器可能需要应用偏离来确定要修改哪个像素，例如在设备空间中，当画笔沿着整数坐标绘制时。虽然抗锯齿呈现器的功能使之不再需要呈现模型为画笔指定一个偏离，但对于在屏幕上绘制一像素宽的水平线和垂直线这种常见情形，还是需要抗锯齿和非抗锯齿呈现器执行类似的操作。为了确保通过将 {@link RenderingHints#KEY_ANTIALIASING KEY_ANTIALIASING} 提示键设置为 {@link RenderingHints#VALUE_ANTIALIAS_ON VALUE_ANTIALIAS_ON} 而打开的抗锯齿不会导致这些线突然变为此宽度的二倍或一半不透明，需要让该模型为这些线指定一个路径，使它们完全覆盖特定的像素集，以帮助提高其平滑性。
<p>
Java 2D API 维持与 JDK 1.1 呈现行为的兼容性，遗留操作和现有呈现器行为在 Java 2D API 下没有改变。定义了映射到常规 <code>draw</code> 和 <code>fill</code> 方法的遗留方法，它明确指示 <code>Graphics2D</code> 根据 <code>Stroke</code> 和 <code>Transform</code> 属性以及呈现提示的设置扩展 <code>Graphics</code> 的方式。在默认属性设置下该定义的执行方式完全相同。例如，默认 <code>Stroke</code> 是一个宽度为 1 且没有虚线的 <code>BasicStroke</code>，屏幕绘制的默认 Transform 是 Identity 转换。
<p>
下面两个规则提供了可预见的呈现行为（无论是否使用了重叠还是抗锯齿）。
<ul>
<li> 将设备坐标定义为在设备像素之间，这避免了重叠呈现和抗锯齿呈现的结果不一致。如果将坐标定义为在像素的中心，则由矩形等形状覆盖的某些像素仅是半覆盖。通过重叠的呈现，半覆盖的像素可能呈现在形状内部，也可能呈现在形状外部。使用抗锯齿呈现，整个形状边缘上的像素都是半覆盖的。另一方面，由于坐标被定义在像素之间，所以无论是否使用抗锯齿进行呈现，像矩形这样的形状将不会有半覆盖像素。
<li> 使用 <code>BasicStroke</code> 对象勾画的线和路径可以&ldquo;标准化&rdquo;，从而在不同的可绘制点上定位时，无论使用重叠还是抗锯齿呈现进行的绘制都能提供一致的轮廓呈现。此标准化过程通过 {@link RenderingHints#KEY_STROKE_CONTROL KEY_STROKE_CONTROL} 提示控制。虽然未指定准确的标准化算法，但此标准化的目标是为了确保可以使用一致的可视外观呈现线条，而不考虑它们在像素网格上的位置；另一个目的是促进以抗锯齿模式呈现更连续的水平和垂直线，从而与没有抗锯齿的线更为相似。典型的标准化步骤可以将抗锯齿线端点提升到像素中心，以减少混合量；也可以调整无抗锯齿线的子像素位置，以便浮点线宽度舍入为近似相等的偶数或奇数像素计数。此过程可以将端点向上移动半个像素（通常沿两个坐标轴的正无穷大方向移动），以得到一致的结果。
</ul>
<p>
在默认属性设置下，以下定义的常规遗留方法与以前指定行为的执行方式完全相同：
<ul>
<li>
对于 <code>fill</code> 操作，包括 <code>fillRect</code>、<code>fillRoundRect</code>、<code>fillOval</code>、<code>fillArc</code>、<code>fillPolygon</code> 和 <code>clearRect</code>，现在可以使用所需的 <code>Shape</code> 调用 {@link #fill(Shape) fill}。例如，在填充矩形时可调用：
<pre>
fill(new Rectangle(x, y, w, h));
</pre>
<p>
<li>
类似地，对于绘制操作，包括 <code>drawLine</code>、<code>drawRect</code>、<code>drawRoundRect</code>、<code>drawOval</code>、<code>drawArc</code>、<code>drawPolyline</code> 和 <code>drawPolygon</code>，现在可以使用所需的 <code>Shape</code> 调用 {@link #draw(Shape) draw}。例如，在绘制矩形时可调用：
<pre>
draw(new Rectangle(x, y, w, h));
</pre>
<p>
<li>
<code>draw3DRect</code> 和 <code>fill3DRect</code> 方法是根据 <code>Graphics</code> 类中的 <code>drawLine</code> 和 <code>fillRect</code> 方法实现的，根据 <code>Graphics2D</code> 上下文中的当前 <code>Stroke</code> 和 <code>Paint</code> 对象可以预知其行为。此类重写了那些独占地使用当前 <code>Color</code> 的实现，重写当前 <code>Paint</code> 以及使用 <code>fillRect</code> 的 <code>Paint</code>，以描述与以前存在的方法完全相同的行为，而不考虑当前 <code>Stroke</code> 的设置。
</ul>
<code>Graphics</code> 类仅定义了 <code>setColor</code> 方法来控制要绘制的颜色。由于 Java 2D API 扩展了 <code>Color</code> 对象来实现新的 <code>Paint</code> 接口，因此现有的 <code>setColor</code> 方法现在是将当前 <code>Paint</code> 属性设置为 <code>Color</code> 对象的便捷方法。<code>setColor(c)</code> 等同于 <code>setPaint(c)</code>。
<p>
<code>Graphics</code> 类定义了两种方法来控制如何将颜色应用到目标。
<ol>
<li>
<code>setPaintMode</code> 方法实现为设置默认 <code>Composite</code> 的便捷方法，它等同于 <code>setComposite(new AlphaComposite.SrcOver)</code>。
<li>
<code>setXORMode(Color xorcolor)</code> 方法实现为设置特殊 <code>Composite</code> 对象的便捷方法，它忽略源颜色的 <code>Alpha</code> 分量，并将目标颜色设置为以下值：
<pre>
dstpixel = (PixelOf(srccolor) ^ PixelOf(xorcolor) ^ dstpixel);
</pre>
</ol>

@version 	1.84, 11/17/05
@author Jim Graham 
@see java.awt.RenderingHints

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Graphics2D()
<!-- END KEY -->
<!-- BEGIN DATA -->
构建一个新的 <code>Graphics2D</code> 对象。由于 <code>Graphics2D</code> 是一个抽象类，而且它必须由不同输出设备的子类定制，所以无法直接创建 <code>Graphics2D</code> 对象。相反，<code>Graphics2D</code> 对象必须从另一个 <code>Graphics2D</code> 对象获得、由某个 <code>Component</code> 创建，或者从 {@link BufferedImage} 之类的图像对象获得。
@see java.awt.Component#getGraphics 
@see java.awt.Graphics#create

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Graphics2D.draw3DRect(int x, int y, int width, int height, boolean raised)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制指定矩形的 3-D 高亮显示边框。矩形的边是高亮显示的，以至于从左上角看呈斜面并加亮。
<p>
高亮显示效果所用的颜色根据当前颜色确定。得到的矩形覆盖的区域为 <code>width&#xA0;+&#xA0;1</code> 像素宽乘以 <code>height&#xA0;+&#xA0;1</code> 像素高。此方法独占使用当前 <code>Color</code>，并忽略当前 <code>Paint</code>

@param x 要绘制矩形的 x 坐标。
@param y 要绘制矩形的 y 坐标。
@param width 要绘制矩形的宽度。
@param height 要绘制矩形的高度。
@param raised 一个用于确定矩形是凸出平面显示还是凹入平面显示的 boolean 值。
@see         java.awt.Graphics#fill3DRect

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Graphics2D.fill3DRect(int x, int y, int width, int height, boolean raised)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制一个用当前颜色填充的 3-D 高亮显示矩形。矩形的边是高亮显示的，以至于从左上角看呈斜面并加亮。高亮显示效果和填充所用的颜色根据当前 <code>Color</code> 确定。此方法独占使用当前 <code>Color</code>，并忽略当前 <code>Paint</code>

@param x 要填充矩形的 x 坐标。
@param y 要填充矩形的 y 坐标。
@param       width 要填充矩形的宽度。
@param height 要填充矩形的高度。
@param       raised 一个用于确定矩形是凸出平面显示还是凹入平面显示的 boolean 值。
@see         java.awt.Graphics#draw3DRect

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.draw(Shape s)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用当前 <code>Graphics2D</code> 上下文的设置勾画 <code>Shape</code> 的轮廓。应用的呈现属性包括 <code>Clip</code>、<code>Transform</code>、<code>Paint</code>、<code>Composite</code> 和 <code>Stroke</code> 属性。
@param s 要呈现的 <code>Shape</code> 
@see #setStroke 
@see #setPaint 
@see java.awt.Graphics#setColor 
@see #transform 
@see #setTransform 
@see #clip 
@see #setClip 
@see #setComposite    

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.awt.Graphics2D.drawImage(Image img, AffineTransform xform, ImageObserver obs)
<!-- END KEY -->
<!-- BEGIN DATA -->
呈现一个图像，在绘制前进行从图像空间到用户空间的转换。从用户空间到设备空间的转换使用 <code>Graphics2D</code> 中的当前 <code>Transform</code> 完成。在应用 <code>Graphics2D</code> 上下文中的 transform 属性之前，指定的转换被应用到图像。应用的呈现属性包括 <code>Clip</code>、<code>Transform</code> 和 <code>Composite</code> 属性。注意，如果指定的转换不可逆，则不会完成呈现。
@param img 要呈现的指定图像。如果 <code>img</code> 为 null，则此方法不执行任何动作。
@param xform 从图像空间到用户空间的转换 
@param obs 转换了多个 <code>Image</code> 时要通知的 {@link ImageObserver}  
@return 如果 <code>Image</code> 被完全加载并完全呈现，则为 <code>true</code>，否则为 null；如果仍在加载 <code>Image</code>，则为 <code>false</code>

@see #transform 
@see #setTransform 
@see #setComposite 
@see #clip 
@see #setClip

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.drawImage(BufferedImage img, BufferedImageOp op, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
呈现使用 {@link BufferedImageOp} 过滤的 <code>BufferedImage</code>。
应用的呈现属性包括 <code>Clip</code>、<code>Transform</code> 和 <code>Composite</code> 属性。这等价于：
 <pre>
 img1 = op.filter(img, null);
 drawImage(img1, new AffineTransform(1f,0f,0f,1f,x,y), null);
</pre>
 
@param op 在呈现之前要应用到图像的过滤器 
@param img 要呈现的指定 <code>BufferedImage</code>。
如果 <code>img</code> 为 null，则此方法不执行任何动作。
@param x 用户空间中呈现该图像左上角位置的 x 坐标 
@param y 用户空间中呈现该图像左上角位置的 y 坐标 
 
@see #transform 
@see #setTransform 
@see #setComposite 
@see #clip 
@see #setClip

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.drawRenderedImage(RenderedImage img, AffineTransform xform)
<!-- END KEY -->
<!-- BEGIN DATA -->
呈现 {@link RenderedImage}，在绘制前进行从图像空间到用户空间的转换。从用户空间到设备空间的转换使用 <code>Graphics2D</code> 中的当前 <code>Transform</code> 完成。在应用 <code>Graphics2D</code> 上下文中的 transform 属性之前，指定的转换被应用到图像。应用的呈现属性包括 <code>Clip</code>、<code>Transform</code> 和 <code>Composite</code> 属性。注意，如果指定的转换不可逆，则不会完成呈现。
@param img 要呈现的图像。如果 <code>img</code> 为 null，则此方法不执行任何操作。
@param xform 从图像空间到用户空间的转换 
@see #transform 
@see #setTransform 
@see #setComposite 
@see #clip 
@see #setClip

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.drawRenderableImage(RenderableImage img, AffineTransform xform)
<!-- END KEY -->
<!-- BEGIN DATA -->
呈现 {@link RenderableImage}，在绘制前进行从图像空间到用户空间的转换。从用户空间到设备空间的转换使用 <code>Graphics2D</code> 中当前的 <code>Transform</code> 完成。在应用 <code>Graphics2D</code> 上下文中的 transform 属性之前，指定的转换被应用到图像。应用的呈现属性包括 <code>Clip</code>、<code>Transform</code> 和 <code>Composite</code> 属性。注意，如果指定的转换不可逆，则不会完成呈现。
<p> 
呈现 <code>RenderableImage</code> 时，可以使用在 <code>Graphics2D</code> 对象上设置的呈现提示。如果由特定 <code>RenderableImage</code> 识别的特定提示需要显式控制，或者需要知道使用哪一个提示，则应直接从 <code>RenderableImage</code> 获取 <code>RenderedImage</code>，并使用 {@link #drawRenderedImage(RenderedImage, AffineTransform) drawRenderedImage} 呈现它。
@param img 要呈现的图像。如果 <code>img</code> 为 null，则此方法不执行任何操作。
@param xform 从图像空间到用户空间的转换 
@see #transform 
@see #setTransform 
@see #setComposite 
@see #clip 
@see #setClip 
@see #drawRenderedImage

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.drawString(String str, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->

使用 <code>Graphics2D</code> 上下文中的当前文本属性状态呈现指定的 <code>String</code> 的文本。首字符的基线位于用户空间的 (<i>x</i>,&#xA0;<i>y</i>) 位置处。应用的呈现属性包括 <code>Clip</code>、<code>Transform</code>、<code>Paint</code>、<code>Font</code> 和 <code>Composite</code> 属性。对于脚本系统（如 Hebrew 和 Arabic）中的字符，在提供的坐标位于基线上最左边字符的情况下，可以从右到左呈现字形。
@param str 要呈现的字符串 
@param x 呈现 <code>String</code> 位置的 x 坐标 
@param y 呈现 <code>String</code> 位置的 y 坐标 
@throws NullPointerException 如果 <code>str</code> 为 <code>null</code> 
@see         java.awt.Graphics#drawBytes 
@see         java.awt.Graphics#drawChars 
@since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.drawString(String str, float x, float y)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 <code>Graphics2D</code> 上下文中当前文本属性状态呈现由指定 <code>String</code> 指定的文本。首字符的基线位于用户空间中的 (<i>x</i>,&#xA0;<i>y</i>) 位置处。应用的呈现属性包括 <code>Clip</code>、<code>Transform</code>、<code>Paint</code>、<code>Font</code> 和 <code>Composite</code> 属性。对于脚本系统（如 Hebrew 和 Arabic）中的字符，在提供的坐标位于基线上最左边字符的情况下，可以从右到左呈现字形。
@param str 要呈现的 <code>String</code> 
@param x 呈现 <code>String</code> 位置的 x 坐标 
@param y 呈现 <code>String</code> 位置的 y 坐标 
@throws NullPointerException 如果 <code>str</code> 为 <code>null</code> 
@see #setPaint 
@see java.awt.Graphics#setColor 
@see java.awt.Graphics#setFont 
@see #setTransform 
@see #setComposite 
@see #setClip

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.drawString(AttributedCharacterIterator iterator, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
依照 {@link TextAttribute} 类的规范应用指定迭代器的属性，呈现指定迭代器的文本。
 <p>
首字符的基线位于用户空间中的 (<i>x</i>,&nbsp;<i>y</i>) 位置处。对于脚本系统（如 Hebrew 和 Arabic）中的字符，在提供的坐标位于基线上最左边字符的情况下，可以从右到左呈现字形。
@param iterator 要呈现其文本的迭代器 
@param x 要呈现迭代器文本处的 x 坐标 
@param y 要呈现迭代器文本处的 y 坐标 
@throws NullPointerException 如果 <code>iterator</code> 为 <code>null</code>
@see #setPaint 
@see java.awt.Graphics#setColor 
@see #setTransform 
@see #setComposite 
@see #setClip


<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.drawString(AttributedCharacterIterator iterator, float x, float y)
<!-- END KEY -->
<!-- BEGIN DATA -->
依照 {@link TextAttribute} 类的规范应用指定迭代器的属性，呈现指定迭代器的文本。
 <p>
首字符的基线位于用户空间中的 (<i>x</i>,&nbsp;<i>y</i>) 位置处。对于脚本系统（如 Hebrew 和 Arabic）中的字符，在提供的坐标位于基线上最左边字符的情况下，可以从右到左呈现字形。
@param iterator 要呈现其文本的迭代器 
@param x 要呈现迭代器文本处的 x 坐标 
@param y 要呈现迭代器文本处的 y 坐标 
@throws NullPointerException 如果 <code>iterator</code> 为 <code>null</code>
@see #setPaint 
@see java.awt.Graphics#setColor 
@see #setTransform 
@see #setComposite 
@see #setClip

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.drawGlyphVector(GlyphVector g, float x, float y)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 <code>Graphics2D</code> 上下文的呈现属性，呈现指定 {@link GlyphVector} 的文本。应用的呈现属性包括 <code>Clip</code>、<code>Transform</code>、<code>Paint</code> 和 <code>Composite</code> 属性。<code>GlyphVector</code> 指定来自一个 {@link Font} 的各个字形。<code>GlyphVector</code> 还可以包含字形位置。这是将一组字符呈现到屏幕的最快方式。
@param g 要呈现的 <code>GlyphVector</code> 
@param x 字形呈现用户空间中的 x 位置 
@param y 字形呈现用户空间中的 y 位置
@throws NullPointerException 如果 <code>g</code> 为 <code>null</code>。

@see java.awt.Font#createGlyphVector 
@see java.awt.font.GlyphVector 
@see #setPaint 
@see java.awt.Graphics#setColor 
@see #setTransform 
@see #setComposite 
@see #setClip

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.fill(Shape s)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 <code>Graphics2D</code> 上下文的设置，填充 <code>Shape</code> 的内部区域。应用的呈现属性包括 <code>Clip</code>、<code>Transform</code>、<code>Paint</code> 和 <code>Composite</code> 属性。
@param s 要填充的 <code>Shape</code>
@see #setPaint 
@see java.awt.Graphics#setColor 
@see #transform 
@see #setTransform 
@see #setComposite 
@see #clip 
@see #setClip

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.awt.Graphics2D.hit(Rectangle rect, Shape s, boolean onStroke)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查指定的 <code>Shape</code> 是否与设备空间中的指定 {@link Rectangle} 相交。如果 <code>onStroke</code> 为 false，则此方法会检查指定 <code>Shape</code> 的内部区域是否与指定的 <code>Rectangle</code> 相交。如果 <code>onStroke</code> 为 <code>true</code>，则此方法会检查指定 <code>Shape</code> 轮廓的 <code>Stroke</code> 是否与指定的 <code>Rectangle</code> 相交。可应用的呈现属性包括 <code>Clip</code>、<code>Transform</code> 和 <code>Stroke</code> 属性。
@param rect 检查设备空间中是否相交的区域 
@param s 检查是否相交的 <code>Shape</code>
@param onStroke 用于在测试中选择笔划或填充图形的标志。如果该标志为 <code>true</code>，则测试 <code>Stroke</code> 轮廓。如果该标志为 <code>false</code>，则测试填充的 <code>Shape</code>。
@return 如果存在相交，则返回 <code>true</code>；否则返回 <code>false</code>
@see #setStroke 
@see #fill 
@see #draw 
@see #transform 
@see #setTransform 
@see #clip 
@see #setClip

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.GraphicsConfiguration java.awt.Graphics2D.getDeviceConfiguration()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 <code>Graphics2D</code> 关联的设备配置。
@return 此 <code>Graphics2D</code> 的设备配置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.setComposite(Composite comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
为 <code>Graphics2D</code> 上下文设置 <code>Composite</code>。
<code>Composite</code> 用于所有绘制方法中，如 <code>drawImage</code>、<code>drawString</code>、<code>draw</code> 和 <code>fill</code>。
它指定新的像素如何在呈现过程中与图形设备上的现有像素组合。
<p>如果此 <code>Graphics2D</code> 上下文正在向显示屏幕绘制 <code>Component</code>，并且 <code>Composite</code> 是自定义对象，而不是 <code>AlphaComposite</code> 类的实例，那么如果有安全管理器，就可以使用 <code>AWTPermission(&quot;readDisplayPixels&quot;)</code> 权限调用其 <code>checkPermission</code> 方法。
@throws SecurityException 如果自定义的 <code>Composite</code> 对象被用于呈现到屏幕，并设置了安全管理器，且其 <code>checkPermission</code> 方法不允许该操作。
@param comp 用于呈现的 <code>Composite</code> 对象 
@see java.awt.Graphics#setXORMode 
@see java.awt.Graphics#setPaintMode 
@see #getComposite 
@see AlphaComposite 
@see SecurityManager#checkPermission 
@see java.awt.AWTPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.setPaint(Paint paint)
<!-- END KEY -->
<!-- BEGIN DATA -->
为 <code>Graphics2D</code> 上下文设置 <code>Paint</code> 属性。使用为 <code>null</code> 的 <code>Paint</code> 对象调用此方法对此 <code>Graphics2D</code> 的当前 <code>Paint</code> 属性没有任何影响。
@param paint 呈现过程中用于生成颜色的 <code>Paint</code> 对象；或者为 <code>null</code> 
@see java.awt.Graphics#setColor 
@see #getPaint 
@see GradientPaint 
@see TexturePaint

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.setStroke(Stroke s)
<!-- END KEY -->
<!-- BEGIN DATA -->
为 <code>Graphics2D</code> 上下文设置 <code>Stroke</code>

@param s 呈现过程中用于勾画 <code>Shape</code> 的 <code>Stroke</code> 对象 
@see BasicStroke 
@see #getStroke

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.setRenderingHint(RenderingHints.Key hintKey, Object hintValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
为呈现算法设置单个首选项的值。提示类别包括对呈现过程中的呈现质量和总时间/质量折衷的控制。有关常用键和值的定义，请参考 <code>RenderingHints</code> 类。
@param hintKey 要设置提示的键。
@param hintValue 指示指定提示类别首选项的值。
@see #getRenderingHint(RenderingHints.Key)
@see RenderingHints

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.Object java.awt.Graphics2D.getRenderingHint(RenderingHints.Key hintKey)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回呈现算法的单个首选项的值。提示类别包括对呈现过程中的呈现质量和总时间/质量折衷的控制。有关常用键和值的定义，请参考 <code>RenderingHints</code> 类。
@param hintKey 与要获得的提示对应的键。
@return 表示指定提示键的值的对象。一些键及其关联值在 <code>RenderingHints</code> 类中定义。
@see RenderingHints
@see #setRenderingHint(RenderingHints.Key, Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.setRenderingHints(java.util.Map<?, ?> hints)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的 <code>hints</code> 替换用于所有呈现算法首选项的值。丢弃所有呈现提示的现有值，并从指定的 {@link Map} 对象初始化一组新的已知提示和值。提示类别包括对呈现过程中的呈现质量和总时间/质量折衷的控制。有关常用键和值的定义，请参考 <code>RenderingHints</code> 类。
@param hints 要设置的呈现提示
@see #getRenderingHints
@see RenderingHints

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.addRenderingHints(java.util.Map<?, ?> hints)
<!-- END KEY -->
<!-- BEGIN DATA -->
为呈现算法设置任意数量的首选项值。仅修改在指定 <code>Map</code> 对象中存在的呈现提示值。所有指定对象中不存在的其它首选项不做修改。提示类别包括对呈现过程中的呈现质量和总时间/质量折衷的控制。有关常用键和值的定义，请参考 <code>RenderingHints</code> 类。
@param hints 要设置的呈现提示 
@see RenderingHints

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.RenderingHints java.awt.Graphics2D.getRenderingHints()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取呈现算法的首选项。提示类别包括对呈现过程中的呈现质量和总时间/质量折衷的控制。返回所有在一次操作中指定的提示键/值对。有关常用键和值的定义，请参考 <code>RenderingHints</code> 类。
@return 包含对当前首选项的 <code>RenderingHints</code> 实例的引用。
@see RenderingHints 
@see #setRenderingHints(Map)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.translate(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>Graphics2D</code> 上下文的原点平移到当前坐标系中的点 (<i>x</i>,&#xA0;<i>y</i>)。修改 <code>Graphics2D</code> 上下文，使其新的原点对应于此 <code>Graphics2D</code> 上下文原坐标系中的点 (<i>x</i>,&#xA0;<i>y</i>)。在此图形上下文上执行的后续呈现操作使用的所有坐标均相对于这个新原点。
@param  x 指定的 x 坐标 
@param  y 指定的 y 坐标 
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.translate(double tx, double ty)
<!-- END KEY -->
<!-- BEGIN DATA -->
将当前 <code>Graphics2D</code> <code>Transform</code> 与平移转换连接。后续呈现相对于前一位置平移指定的距离。这等同于调用 transform(T)，其中 T 为以下矩阵表示的 <code>AffineTransform</code>：
 <pre>
		[   1    0    tx  ]
		[   0    1    ty  ]
		[   0    0    1   ]
 </pre>

@param tx 沿 x 轴平移的距离 
@param ty 沿 y 轴平移的距离

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.rotate(double theta)
<!-- END KEY -->
<!-- BEGIN DATA -->
将当前的 <code>Graphics2D</code> <code>Transform</code> 与旋转转换连接。后续呈现相对于前一原点旋转指定弧度。这等同于调用 <code>transform(R)</code>，其中 R 为以下矩阵表示的 <code>AffineTransform</code>：
 <pre>
		[   cos(theta)    -sin(theta)    0   ]
		[   sin(theta)     cos(theta)    0   ]
		[       0              0         1   ]
 </pre>
使用正角度 theta 进行旋转，可将正 x 轴上的点转向正 y 轴。
@param theta 旋转的角度，以弧度为单位

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.rotate(double theta, double x, double y)
<!-- END KEY -->
<!-- BEGIN DATA -->
将当前的 <code>Graphics2D</code> <code>Transform</code> 与平移后的旋转转换连接。后续呈现的变换如下：平移到指定位置，旋转指定弧度，然后向回平移相同的距离。这等同于以下调用序列：
 <pre>
		translate(x, y);
		rotate(theta);
		translate(-x, -y);
 </pre>
使用正角度 theta 进行旋转，可将正 x 轴上的点转向正 y 轴。
@param theta 旋转的角度，以弧度为单位 
@param x 旋转原点的 x 坐标 
@param y 旋转原点的 y 坐标

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.scale(double sx, double sy)
<!-- END KEY -->
<!-- BEGIN DATA -->
将当前 <code>Graphics2D</code> <code>Transform</code> 与缩放转换连接。后续呈现相对于以前的缩放比例根据指定的缩放系数来重新调整大小。这等同于调用 <code>transform(S)</code>，其中 S 为以下矩阵表示的 <code>AffineTransform</code>：
 <pre>
		[   sx   0    0   ]
		[   0    sy   0   ]
		[   0    0    1   ]
 </pre>
 
@param sx 相对于以前的呈现操作，后续呈现操作中的与 X 坐标相乘的量。
@param sy 相对于以前的呈现操作，后续呈现操作中的与 Y 坐标相乘的量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.shear(double shx, double shy)
<!-- END KEY -->
<!-- BEGIN DATA -->
将当前 <code>Graphics2D</code> <code>Transform</code> 与剪裁转换连接。后续呈现相对于以前的位置由指定的乘式剪裁。这等同于调用 <code>transform(SH)</code>，其中 SH 为以下矩阵表示的 <code>AffineTransform</code>：
 <pre>
		[   1   shx   0   ]
		[  shy   1    0   ]
		[   0    0    1   ]
 </pre>
 
@param shx 在正 X 轴方向移动坐标的乘数，它可以作为其 Y 坐标的函数 
@param shy 在正 Y 轴方向移动坐标的乘数，它可以作为其 X 坐标的函数

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.transform(AffineTransform Tx)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据&ldquo;最后指定首先应用&rdquo;规则，使用此 <code>Graphics2D</code> 中的 <code>Transform</code> 组合 <code>AffineTransform</code> 对象。如果当前 <code>Transform</code> 为 Cx，那么使用 Tx 进行组合的结果为新的 <code>Transform</code> Cx'。Cx' 成为此 <code>Graphics2D</code> 的当前 <code>Transform</code>。通过更新的 <code>Transform</code> Cx' 转换点 p 等同于首先通过 Tx 转换点 p，然后通过原来的 <code>Transform</code> Cx 转换所得结果。换句话说，Cx'(p) = Cx(Tx(p))。如有必要，可以生成 Tx 的副本，从而对 Tx 进行进一步修改时不会影响呈现。
@param Tx 要与当前 <code>Transform</code> 组合的 <code>AffineTransform</code> 对象  
@see #setTransform 
@see AffineTransform

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.setTransform(AffineTransform Tx)
<!-- END KEY -->
<!-- BEGIN DATA -->
重写 <code>Graphics2D</code> 上下文中的 Transform。警告：<b>切勿</b>使用此方法在现有转换之上应用新的坐标转换，因为 <code>Graphics2D</code> 可能已经有用于其它用途（例如，呈现 Swing 组件或应用缩放转换以调整打印机的分辨率）的转换。
<p>要添加坐标转换，请使用 <code>transform</code>、<code>rotate</code>、<code>scale</code> 或 <code>shear</code> 方法。<code>setTransform</code> 方法只用于呈现后恢复原始 <code>Graphics2D</code> 的转换，如以下示例所示：
 <pre><blockquote>
 // Get the current transform
 AffineTransform saveAT = g2.getTransform();
 // Perform transformation
 g2d.transform(...);
 // Render
 g2d.draw(...);
 // Restore original transform
 g2d.setTransform(saveAT);
 </blockquote></pre>

@param Tx 从 <code>getTransform</code> 方法检索的 <code>AffineTransform</code> 
@see #transform 
@see #getTransform 
@see AffineTransform

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.geom.AffineTransform java.awt.Graphics2D.getTransform()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>Graphics2D</code> 上下文中当前 <code>Transform</code> 的副本。
@return <code>Graphics2D</code> 上下文中的当前 <code>AffineTransform</code>
@see #transform 
@see #setTransform

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Paint java.awt.Graphics2D.getPaint()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>Graphics2D</code> 上下文中的当前 <code>Paint</code>
@return 当前 <code>Graphics2D</code> <code>Paint</code>，它定义一种颜色或模式。
@see #setPaint 
@see java.awt.Graphics#setColor

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Composite java.awt.Graphics2D.getComposite()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>Graphics2D</code> 上下文中的当前 <code>Composite</code>
@return 当前 <code>Graphics2D</code> <code>Composite</code>，它定义一种复合样式。
@see #setComposite

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.setBackground(Color color)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 <code>Graphics2D</code> 上下文的背景色。背景色用于清除区域。当为 <code>Component</code> 构建 <code>Graphics2D</code> 时，可以从 <code>Component</code> 继承背景色。设置 <code>Graphics2D</code> 上下文中的背景色仅影响后续 <code>clearRect</code> 调用，不影响该 <code>Component</code> 的背景色。要更改 <code>Component</code> 的背景，请使用该 <code>Component</code> 的相应方法。
@param color 在对 <code>clearRect</code> 的后续调用中所用的背景色 
@see #getBackground 
@see java.awt.Graphics#clearRect

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Color java.awt.Graphics2D.getBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于清除区域的背景色。
@return 当前 <code>Graphics2D</code> <code>Color</code>，它定义背景色。
@see #setBackground

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Stroke java.awt.Graphics2D.getStroke()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>Graphics2D</code> 上下文中的当前 <code>Stroke</code>
@return 当前 <code>Graphics2D</code> <code>Stroke</code>，它定义线条样式。
@see #setStroke

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics2D.clip(Shape s)
<!-- END KEY -->
<!-- BEGIN DATA -->
将当前 <code>Clip</code> 与指定 <code>Shape</code> 的内部区域相交，并将 <code>Clip</code> 设置为所得的交集。与当前 <code>Clip</code> 相交之前，使用当前 <code>Graphics2D</code> <code>Transform</code> 转换指定的 <code>Shape</code>。
此方法用于使当前 <code>Clip</code> 变小。要使 <code>Clip</code> 变大，请使用 <code>setClip</code>。
此方法修改的<i>用户剪贴区</i> 独立于与设备边界和可视性关联的剪切。如果以前没有设置任何剪贴区，或者已经使用带有 <code>null</code> 参数的 {@link Graphics#setClip(Shape) setClip} 将剪贴区清除，那么指定的 <code>Shape</code> 将成为新的用户剪贴区。
@param s 要与当前 <code>Clip</code> 相交的 <code>Shape</code>。如果 <code>s</code> 为 <code>null</code>，则此方法会清除当前 <code>Clip</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.font.FontRenderContext java.awt.Graphics2D.getFontRenderContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 <code>Graphics2D</code> 上下文中 <code>Font</code> 的呈现上下文。{@link FontRenderContext} 封装应用程序提示，如抗锯齿和小数规格，以及目标设备的特定信息（如每英寸的点数）。当使用 <code>Font</code> 和 <code>TextLayout</code> 等对象执行印刷格式编排时，应用程序应提供此信息。将各种呈现提示应用到文本呈现时，执行其自身布局并且需要对字形（如前距和线高）的各种特征进行精确测量的应用程序也应提供此信息。
@return 对 FontRenderContext 实例的引用。
@see java.awt.font.FontRenderContext 
@see java.awt.Font#createGlyphVector 
@see java.awt.font.TextLayout 
@since     1.2

<!-- END DATA -->
