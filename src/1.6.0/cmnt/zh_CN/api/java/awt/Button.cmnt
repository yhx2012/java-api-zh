<!-- BEGIN KEY -->
public class java.awt.Button extends java.awt.Component implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
此类创建一个标签按钮。当按下该按钮时，应用程序能执行某项动作。以下图像描绘了在 Solaris 操作系统下，&quot;<code>Quit</code>&quot; 按钮所表现的三种视图：
 <p>
<img src="doc-files/Button-1.gif" alt="有关该图形的描述见下文"
 ALIGN=center HSPACE=10 VSPACE=7>
 <p>
第一幅视图展示该按钮在一般情况下的外观。第二幅视图展示该按钮成为输入焦点时的外观。其边框变黑，让用户知道它是一个活动对象。第三幅视图展示用户在该按钮上单击鼠标，从而请求执行某个动作时该按钮的外观。
 <p>
用鼠标单击按钮这一动作与 <code>ActionEvent</code> 的一个实例相关，在按下鼠标和释放按钮的时候都会用到该类。如果应用程序希望知道何时按钮作为一个单独动作被按下但未释放，它可以特殊化 <code>processMouseEvent</code>，或者通过调用 <code>addMouseListener</code> 将自身注册为鼠标事件的侦听器。这两种方法都是由所有组件的抽象超类 <code>Component</code> 定义的。
 <p>
当按下按钮并释放时，AWT 通过调用按钮的 <code>processEvent</code>，将 <code>ActionEvent</code> 的一个实例发送给按钮。按钮的 <code>processEvent</code> 方法接收按钮的所有事件；同时，它通过调用自身的 <code>processActionEvent</code> 方法传递一个动作事件。后一种方法将动作事件传递给为关注此按钮生成的动作事件而注册的任何动作侦听器。
 <p>
如果应用程序想要执行基于按下并释放按钮的某个动作，则它应该实现 <code>ActionListener</code> 并注册新的侦听器，以便通过调用按钮的 <code>addActionListener</code> 方法来接收发自此按钮的事件。应用程序可以按消息传递协议使用按钮的动作命令。

@version 	1.82 07/11/06
@author 	Sami Shaio
@see         java.awt.event.ActionEvent
@see         java.awt.event.ActionListener
@see         java.awt.Component#processMouseEvent
@see         java.awt.Component#addMouseListener
@since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String java.awt.Button.label
<!-- END KEY -->
<!-- BEGIN DATA -->
按钮的标签。此值可以为 null。
@serial
@see #getLabel()
@see #setLabel(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String java.awt.Button.actionCommand
<!-- END KEY -->
<!-- BEGIN DATA -->
一旦按下按钮就会执行的动作。此值可以为 null。
@serial
@see #getActionCommand()
@see #setActionCommand(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Button() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个标签字符串为空的按钮。
 
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Button(String label) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个带指定标签的按钮。
 
@param label  按钮的字符串标签，如果没有标签，则为 <code>null</code>
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Button.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建按钮的同位体。按钮的同位体允许应用程序更改按钮的外观。而不更改其功能。
 
@see     java.awt.Toolkit#createButton(java.awt.Button)
@see     java.awt.Component#getToolkit()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.Button.getLabel()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此按钮的标签。
 
@return    按钮的标签，如果按钮没有标签，则返回 <code>null</code>。
@see       java.awt.Button#setLabel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Button.setLabel(String label)
<!-- END KEY -->
<!-- BEGIN DATA -->
将按钮的标签设置为指定的字符串。
 
@param     label   新的标签，如果按钮没有标签，则为 <code>null</code>。
@see       java.awt.Button#getLabel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Button.setActionCommand(String command)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此按钮激发的动作事件的命令名称。在默认情况下，此动作命令设置为与按钮标签相匹配。
 
@param     command  用于设置按钮动作命令的字符串。如果字符串为 <code>null</code>，则动作命令设置为与按钮标签相匹配。
@see       java.awt.event.ActionEvent
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.Button.getActionCommand()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此按钮激发的动作事件的命令名称。如果命令名称为 <code>null</code>（默认），则此方法返回按钮的标签。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Button.addActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定的动作侦听器，以接收发自此按钮的动作事件。当用户在此按钮上按下或释放鼠标时，发生动作事件。如果 l 为 null，则不抛出任何异常，也不执行任何动作。
<p>有关 AWT 的线程模型的细节信息，请参阅 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
 >AWT 线程问题</a>。

@param         l 动作侦听器
@see           #removeActionListener
@see           #getActionListeners
@see           java.awt.event.ActionListener
@since         JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Button.removeActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定的动作侦听器，以便它不再接收发自此按钮的动作事件。当用户在此按钮上按下或释放鼠标时，发生动作事件。如果 l 为 null，则不抛出任何异常，也不执行任何动作。
<p>有关 AWT 的线程模型的细节信息，请参阅 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
 >AWT 线程问题</a>。

@param	l     动作侦听器
@see         #addActionListener
@see         #getActionListeners
@see         java.awt.event.ActionListener
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.event.ActionListener[] java.awt.Button.getActionListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在此按钮上注册的所有动作侦听器的一个数组。

@return 此按钮的所有 <code>ActionListener</code>；如果当前没有注册任何动作侦听器，则返回一个空数组。

@see	       #addActionListener
@see          #removeActionListener
@see          java.awt.event.ActionListener
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.awt.Button.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前在此 <code>Button</code> 上注册为 <code><em>Foo</em>Listener</code> 的所有对象的数组。<code><em>Foo</em>Listener</code> 是用 <code>add<em>Foo</em>Listener</code> 方法注册的。

 <p>
可以使用 class 字面值（如 <code><em>Foo</em>Listener.class</code>）来指定 <code>listenerType</code> 参数。例如，可以使用以下代码来查询 <code>Button</code> <code>b</code> 的动作侦听器：

<pre>ActionListener[] als = (ActionListener[])(b.getListeners(ActionListener.class));</pre>

如果不存在这样的侦听器，则此方法将返回一个空数组。

@param listenerType 请求的侦听器类型；此参数应该指定一个从 <code>java.util.EventListener</code> 继承的接口
@return 在此按钮上作为 <code><em>Foo</em>Listener</code> 注册的所有对象的数组；如果尚未添加这样的侦听器，则返回一个空数组
@exception ClassCastException 如果 <code>listenerType</code> 未指定一个实现 <code>java.util.EventListener</code> 的类或接口

@see #getActionListeners
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Button.processEvent(AWTEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理此按钮上的事件。如果事件是 <code>ActionEvent</code> 的一个实例，则此方法将调用 <code>processActionEvent</code> 方法。否则，它调用超类的 <code>processEvent</code> 方法。
<p>注意，如果事件参数为 <code>null</code>，则行为未指定，并可能导致一个异常。

@param        e 事件
@see          java.awt.event.ActionEvent
@see          java.awt.Button#processActionEvent
@since        JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Button.processActionEvent(ActionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理发生在此按钮上的动作事件，方法是将这些事件指派给所有已注册的 <code>ActionListener</code> 对象。
 <p>
只有启用了此按钮的动作事件，此方法才有可能被调用。当发生以下事件之一时会激活动作事件：
 <p><ul>
<li>通过 <code>addActionListener</code> 注册了 <code>ActionListener</code> 对象。
<li>通过 <code>enableEvents</code> 激活了动作事件。
</ul>
<p>注意，如果事件参数为 <code>null</code>，则行为未指定，并可能导致一个异常。

@param       e 动作事件
@see         java.awt.event.ActionListener
@see         java.awt.Button#addActionListener
@see         java.awt.Component#enableEvents
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.awt.Button.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>Button</code> 状态的字符串表示形式。此方法仅在进行调试的时候使用，对于这两个实现，返回的字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。

@return     此按钮的参数字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.Button.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 <code>Button</code> 相关的 <code>AccessibleContext</code>。对于按钮，<code>AccessibleContext</code> 采用 <code>AccessibleAWTButton</code> 的形式。如果有必要，创建一个新的 <code>AccessibleAWTButton</code> 实例。

@return 一个 <code>AccessibleAWTButton</code>，它将充当此 <code>Button</code> 的 <code>AccessibleContext</code>
@beaninfo 
      expert: true 
description: 与此 Button 相关的 AccessibleContext。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.Button.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取 <code>ObjectInputStream</code>，如果它不为 <code>null</code>，则添加一个侦听器，以接收按钮激发的动作事件。未识别的键或值将被忽略。

@param s 要读取的 <code>ObjectInputStream</code>
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless</code> 返回 <code>true</code>
@serial
@see #removeActionListener(ActionListener)
@see #addActionListener(ActionListener)
@see java.awt.GraphicsEnvironment#isHeadless
@see #writeObject(ObjectOutputStream)

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.Button.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将默认的可序列化字段写入流。写入可序列化 <code>ActionListeners</code> 的一个列表作为可选数据。检测不可序列化的 <code>ActionListeners</code>，不会试图对它们进行序列化。

@serialData 以 <code>null</code> 终止的 0 或多对序列：该对由一个 <code>String</code> 和一个 <code>Object</code> 组成；<code>String</code> 指示对象的类型，它是以下类型之一：指示 <code>ActionListener</code> 对象的 <code>actionListenerK</code>
 			
@param s 要写入的 <code>ObjectOutputStream</code>
@see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)
@see java.awt.Component#actionListenerK
@see #readObject(ObjectInputStream)

<!-- END DATA -->
