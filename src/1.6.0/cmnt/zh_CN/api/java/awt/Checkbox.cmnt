<!-- BEGIN KEY -->
public class java.awt.Checkbox extends java.awt.Component implements java.awt.ItemSelectable, javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
复选框是一个可处于&ldquo;开&rdquo;(<code>true</code>) 或&ldquo;关&rdquo;(<code>false</code>) 状态的图形组件。单击复选框可将其状态从&ldquo;开&rdquo;更改为&ldquo;关&rdquo;，或从&ldquo;关&rdquo;更改为&ldquo;开&rdquo;。
 <p>
下列代码示例在网格布局中创建了一组复选框：
 <p>
 <hr><blockquote><pre>
 setLayout(new GridLayout(3, 1));
 add(new Checkbox(&quot;one&quot;, null, true));
 add(new Checkbox(&quot;two&quot;));
 add(new Checkbox(&quot;three&quot;));
 </pre></blockquote><hr>
 <p>
该图像描述了由这个代码示例创建的复选框和网格布局：
 <p>
<img src="doc-files/Checkbox-1.gif" alt="以下文本描述了该图形。"
 ALIGN=center HSPACE=10 VSPACE=7>
 <p>
标记为 <code>one</code> 的按钮处于&ldquo;开&rdquo;状态，其他两个按钮处于&ldquo;关&rdquo;状态。在这个例子中，使用了 <code>GridLayout</code> 类，三个复选框的状态是分别设置的。
 <p>
作为选择，可使用 <code>CheckboxGroup</code> 类将一些复选框组成一组，作为单个对象来控制。在一个复选框组中，在任何给定时间，最多只能有一个按钮处于&ldquo;开&rdquo;状态。单击并打开一个复选框会强迫同组中其他原来处于打开状态的复选框变为&ldquo;关&rdquo;状态。

@version	1.88 07/11/06
@author 	Sami Shaio
@see         java.awt.GridLayout
@see         java.awt.CheckboxGroup
@since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String java.awt.Checkbox.label
<!-- END KEY -->
<!-- BEGIN DATA -->
复选框的标签。此字段可以为 null。
@serial
@see #getLabel()
@see #setLabel(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean java.awt.Checkbox.state
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Checkbox</code> 的状态。
@serial
@see #getState()
@see #setState(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.CheckboxGroup java.awt.Checkbox.group
<!-- END KEY -->
<!-- BEGIN DATA -->
复选框组。该字段可以为 null，指示该复选框不是一个组复选框。 
@serial
@see #getCheckboxGroup()
@see #setCheckboxGroup(CheckboxGroup)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Checkbox() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用空字符串标签创建一个复选框。此复选框的状态被设置为&ldquo;关&rdquo;，并且它不属于任何复选框组。
@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Checkbox(String label) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定标签创建一个复选框。此复选框的状态被设置为&ldquo;关&rdquo;，并且它不属于任何复选框组。

@param     label   此复选框的字符串标签，如果没有标签，则该参数为 <code>null</code>。
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless</code> 返回 <code>true</code> 
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Checkbox(String label, boolean state) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定标签创建一个复选框，并将它设置为指定状态。该复选框不属于任何复选框组。

@param     label   此复选框的字符串标签，如果没有标签，则该参数为 <code>null</code>
@param     state    此复选框的初始状态
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless</code> 返回 <code>true</code>
@see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Checkbox(String label, boolean state, CheckboxGroup group) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造具有指定标签的 Checkbox，并将它设置为指定状态，使它处于指定复选框组中。
 
@param     label   此复选框的字符串标签，如果没有标签，则该参数为 <code>null</code>。
@param     state   此复选框的初始状态。
@param     group   此复选框的复选框组，如果没有这样的复选框组，则该参数为 <code>null</code>。
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless</code> 返回 <code>true</code>
@see java.awt.GraphicsEnvironment#isHeadless 
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Checkbox(String label, CheckboxGroup group, boolean state) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定标签的 Checkbox，并使它处于指定复选框组内，将它设置为指定状态。

@param     label   此复选框的字符串标签，如果没有标签，则该参数为 <code>null</code>。
@param     group   此复选框的复选框组，如果没有这样的复选框组，则该参数为 <code>null</code>。
@param     state   此复选框的初始状态。
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless</code> 返回 <code>true</code> 
@see java.awt.GraphicsEnvironment#isHeadless 
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Checkbox.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 Checkbox 的同位体。该同位体允许更改 Checkbox 的外观，而不更改其功能。

@see     java.awt.Toolkit#createCheckbox(java.awt.Checkbox) 
@see     java.awt.Component#getToolkit()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.Checkbox.getLabel()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此复选框的标签。

@return   此复选框的标签，如果此复选框没有标签，则返回 <code>null</code>。 
@see      #setLabel(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Checkbox.setLabel(String label)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此复选框的标签设置为字符串参数。

@param    label   设置为新标签的字符串，如果没有标签，则该参数为 <code>null</code>。 
@see      #getLabel

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Checkbox.getState()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此复选框是处于&ldquo;开&rdquo;状态，还是处于&ldquo;关&rdquo;状态。boolean 值 <code>true</code> 指示此复选框处于&ldquo;开&rdquo;状态，<code>false</code> 指示此复选框处于&ldquo;关&rdquo;状态。

@return    以 boolean 值形式表示的此复选框的状态 
@see       #setState

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Checkbox.setState(boolean state)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此复选框的状态设置为指定状态。boolean 值 <code>true</code> 指示此复选框处于&ldquo;开&rdquo;状态，<code>false</code> 指示此复选框处于&ldquo;关&rdquo;状态。

<p>注意，此方法应主要用于初始化复选框的状态。以编程方式设置复选框的状态，这<i>不</i> 会触发 <code>ItemEvent</code>。触发 <code>ItemEvent</code> 的唯一方式是用户交互。

@param     state   以 boolean 值形式表示的复选框的状态
@see       #getState

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.awt.Checkbox.getSelectedObjects()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含复选框标签的数组 (length 1)，如果没有选定复选框，则返回 null。
@see ItemSelectable

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.CheckboxGroup java.awt.Checkbox.getCheckboxGroup()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此复选框的组。
@return     此复选框的组，如果该复选框不属于任何复选框组，则返回 <code>null</code>。
@see        #setCheckboxGroup(CheckboxGroup)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Checkbox.setCheckboxGroup(CheckboxGroup g)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此复选框的组设置为指定复选框组。如果此复选框已经在另一个复选框组中，则首先从这个复选框组中提取该复选框。
 <p>
如果此复选框的状态为 <code>true</code> 并且新组已经有一个选定的复选框，则将此复选框的状态更改为 <code>false</code>。如果此复选框的状态为 <code>true</code>，并且新组中没有选定的复选框，则此复选框将成为新组的选定复选框，并且其状态为 <code>true</code>。

@param     g   新复选框组，如果该参数为 <code>null</code>，则从所有复选框组中移除此复选框 
@see       #getCheckboxGroup

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Checkbox.addItemListener(ItemListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定的项侦听器，以接收来自此复选框的项事件。将项事件发送到侦听器，以响应用户输入，但不响应对 setState() 的调用。如果 l 为 null，则不会抛出异常，并且不执行任何操作。有关 AWT 的线程模型的细节信息，请参阅 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"  >AWT 线程问题</a>。

@param         l    项侦听器 
@see           #removeItemListener 
@see           #getItemListeners 
@see           #setState 
@see           java.awt.event.ItemEvent 
@see           java.awt.event.ItemListener 
@since         JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Checkbox.removeItemListener(ItemListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除此项侦听器，这样项侦听器将不再接收发自此复选框的项事件。如果 l 为 null，则不会抛出异常，并且不执行任何操作。有关 AWT 的线程模型的细节信息，请参阅 <a href="doc-files/AWTThreadIssues.html#ListenersThreads"  >AWT 线程问题</a>。

@param         l    项侦听器 
@see           #addItemListener 
@see           #getItemListeners 
@see           java.awt.event.ItemEvent 
@see           java.awt.event.ItemListener 
@since         JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.event.ItemListener[] java.awt.Checkbox.getItemListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回已在此复选框上注册的所有项侦听器所组成的数组。

@return 此复选框的所有 <code>ItemListener</code>，如果没有当前已注册的项侦听器，则返回一个空数组
 
@see           #addItemListener
@see           #removeItemListener
@see           java.awt.event.ItemEvent
@see           java.awt.event.ItemListener
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.awt.Checkbox.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回目前已在此 <code>Checkbox</code> 上注册为 <code><em>Foo</em>Listener</code> 的所有对象组成的数组。<code><em>Foo</em>Listener</code> 是使用 <code>add<em>Foo</em>Listener</code> 方法注册的。

<p>
可以用一个 class 字面值（比如 <code><em>Foo</em>Listener.class</code>）指定 <code>listenerType</code> 参数。例如，可以使用以下代码查询 <code>Checkbox</code> <code>c</code>，以获得它的项侦听器：

<pre>ItemListener[] ils = (ItemListener[])(c.getListeners(ItemListener.class));</pre>

如果不存在这样的侦听器，则此方法将返回一个空数组。

@param listenerType 所请求侦听器的类型；该参数应该指定一个从 <code>java.util.EventListener</code> 遗传下来的接口 
@return 在此复选框上注册为 <code><em>Foo</em>Listener</code> 的所有对象组成的数组，如果没有添加这样的侦听器，则返回一个空数组 
@exception ClassCastException 如果 <code>listenerType</code> 没有指定实现 <code>java.util.EventListener</code> 的类或接口

@see #getItemListeners 
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Checkbox.processEvent(AWTEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理关于此复选框的事件。如果事件是 <code>ItemEvent</code> 的一个实例，则此方法将调用 <code>processItemEvent</code> 方法。否则，它将调用其超类的 <code>processEvent</code> 方法。
<p>注意，如果事件参数为 <code>null</code>，则行为是不确定的，并且可能导致异常。

@param         e 事件
@see           java.awt.event.ItemEvent
@see           #processItemEvent
@since         JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Checkbox.processItemEvent(ItemEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
处理发生在此复选框上的项事件，方法是将这些事件指派给所有已注册的 <code>ItemListener</code> 对象。
 <p>
只有启用组件的项事件之后，才会调用此方法。当下列事件之一发生时，项事件将被启用：
 <p><ul>
<li>通过 <code>addItemListener</code> 注册了一个 <code>ItemListener</code> 对象。
<li>通过 <code>enableEvents</code> 启用了项事件。
 </ul>
<p>注意，如果事件参数为 <code>null</code>，则行为是不确定的，并且可能导致异常。

@param       e 项事件 
@see         java.awt.event.ItemEvent
@see         java.awt.event.ItemListener
@see         #addItemListener
@see         java.awt.Component#enableEvents
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.awt.Checkbox.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此 <code>Checkbox</code> 的状态的字符串。此方法仅在进行调试的时候使用，对于这两个实现，所返回字符串的内容和格式可能有所不同。返回的字符串可以为空，但不可以为 <code>null</code>。

@return  此复选框的参数字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.Checkbox.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 Checkbox 相关的 AccessibleContext。对于复选框，AccessibleContext 采用的是 AccessibleAWTCheckbox 的形式。如有必要，可以创建一个新的 AccessibleAWTCheckbox。

@return 充当此 Checkbox 的 AccessibleContext 的 AccessibleAWTCheckbox
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.Checkbox.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取 <code>ObjectInputStream</code>，如果它不为 <code>null</code>，则添加一个侦听器，以接收 <code>Checkbox</code> 触发的项事件。忽略未被识别的键或值。

@param s 要读取的 <code>ObjectInputStream</code> 
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless</code> 返回 <code>true</code> 
@serial 
@see #removeItemListener(ItemListener) 
@see #addItemListener(ItemListener) 
@see java.awt.GraphicsEnvironment#isHeadless 
@see #writeObject(ObjectOutputStream)

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.Checkbox.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将默认可序列化字段写入流中。写入可序列化 <code>ItemListeners</code> 的一个列表作为可选数据。检测不可序列化的 <code>ItemListeners</code>，不要尝试对它们进行序列化。

@param s 要写入的 <code>ObjectOutputStream</code> 
@serialData <code>null</code> 表示终止 0 或多个对的序列；这种对是由 <code>String</code> 和 <code>Object</code> 组成的；<code>String</code> 指示对象类型，它为以下类型之一：<code>itemListenerK</code> 指示一个 <code>ItemListener</code> 对象

@see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener) 
@see java.awt.Component#itemListenerK 
@see #readObject(ObjectInputStream)

<!-- END DATA -->
