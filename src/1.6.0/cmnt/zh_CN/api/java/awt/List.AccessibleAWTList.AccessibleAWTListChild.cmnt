<!-- BEGIN KEY -->
protected class java.awt.List.AccessibleAWTList.AccessibleAWTListChild extends java.awt.Component.AccessibleAWTComponent implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
此类实现 List 子级的可访问性支持。它提供适合列表子级用户界面元素的 Java Accessibility API 的实现。
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的 AccessibleContext。在此类的 Java Accessibility API 的实现中，返回的是此对象，它是其自身的 AccessibleContext。
 
@return 此对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleRole java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getAccessibleRole()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的职责。  

@return 描述对象职责的 AccessibleRole 的实例
@see AccessibleRole

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleStateSet java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getAccessibleStateSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的状态设置。对象的 AccessibleStateSet 是由唯一的 AccessibleState 的集合组成的。对象的 AccessibleStateSet 中的更改将导致为 ACCESSIBLE_STATE_PROPERTY 属性激发 PropertyChangeEvent。

@return 包含对象的当前状态设置的 AccessibleStateSet 的实例
@see AccessibleStateSet
@see AccessibleState
@see #addPropertyChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Locale java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getLocale()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取组件的区域设置。如果该组件没有区域，则返回其父级的区域。

@return 此组件的区域。如果此组件没有区域，则返回其父级的区域。

@exception IllegalComponentStateException 如果该 Component 没有它自己的区域，并且尚未被添加到包含层次结构（那样可以从包含父级确定其区域）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getAccessibleIndexInParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的可访问父级中基于 0 的索引。

@return 返回此对象父级中基于 0 的索引；如果此对象没有可访问父级，则返回 -1。

@see #getAccessibleParent
@see #getAccessibleChildrenCount
@see #getAccessibleChild

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getAccessibleChildrenCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对象的可访问子级数。

@return  对象的可访问子级数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getAccessibleChild(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对象的指定 Accessible 子级。Accessible 对象的 Accessible 子级是基于零的，因此 Accessible 第一个子对象的索引为 0，第二个子对象的索引为 1，依此类推。

@param i 子级基于零的索引
@return 对象的 Accessible 子级
@see #getAccessibleChildrenCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的背景颜色。

@return 对象的背景颜色，如果支持的话；否则返回 null
@see #setBackground

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.setBackground(Color c)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的背景颜色。

@param c 背景的新 Color
@see #setBackground

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的前景颜色。

@return 对象的前景颜色，如果支持的话；否则返回 null
@see #setForeground

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.setForeground(Color c)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的前景颜色。

@param c 前景的新 Color
@see #getForeground

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Cursor java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getCursor()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的 Cursor。

@return 对象的 Cursor，如果支持的话；否则返回 null
@see #setCursor

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.setCursor(Cursor cursor)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的 Cursor。
 <p>
如果 Java 平台实现和/或本机系统不支持更改鼠标光标形状，则该方法可能不会产生任何视觉效果。
@param cursor 对象的新 Cursor
@see #getCursor

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此对象的 Font。

@return 对象的 Font，如果支持的话；否则返回 null
@see #setFont

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.setFont(Font f)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的 Font。

@param f 对象的新 Font
@see #getFont

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FontMetrics java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getFontMetrics(Font f)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此对象的 FontMetrics。

@param f Font
@return 对象的 FontMetrics，如果支持的话；否则返回 null
@see #getFont

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.List.AccessibleAWTList.AccessibleAWTListChild.isEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定是否已启用对象。启用的对象在其 AccessibleStateSet 中也将具有 AccessibleState.ENABLED 状态设置。

@return 如果已启用对象，则返回 true；否则返回 false
@see #setEnabled
@see AccessibleContext#getAccessibleStateSet
@see AccessibleState#ENABLED
@see AccessibleStateSet

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.setEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置对象的启用状态。

@param b 如果为 true，则启用此对象；否则禁用它
@see #isEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.List.AccessibleAWTList.AccessibleAWTListChild.isVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定对象是否可见。注：这意味着该对象多半是可见的；但是因为包含此对象的对象之一目前不可见，所以可能在屏幕上不显示它。要确定对象是否在屏幕上显示，需要使用 isShowing()。
<p>可见的对象在其 AccessibleStateSet 中也将具有 AccessibleState.VISIBLE 状态设置。

@return 如果对象可见，则返回 true；否则返回 false
@see #setVisible
@see AccessibleContext#getAccessibleStateSet
@see AccessibleState#VISIBLE
@see AccessibleStateSet

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.setVisible(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置对象的可见状态。

@param b 如果为 true，则显示此对象；否则隐藏它
@see #isVisible

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.List.AccessibleAWTList.AccessibleAWTListChild.isShowing()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定是否正显示对象。通过检查对象的可见性及其祖先的可见性可以确定这一点。注：即使该对象被另一对象屏蔽（例如，该对象为下拉菜单的下级），仍然返回 true。

@return 如果正显示对象，则返回 true；否则返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.List.AccessibleAWTList.AccessibleAWTListChild.contains(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->

检查指定点是否位于此对象的界限中，其中该点的 X 坐标和 Y 坐标是相对于对象的定义的。 

@param p 相对于对象的的 Point
@return 如果对象包含 Point，则返回 true；否则返回 false
@see #getBounds

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getLocationOnScreen()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回对象在屏幕上的位置。

@return 返回对象在屏幕上的位置；如果此对象不在屏幕上，则返回 null
@see #getBounds
@see #getLocation

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->

获取此对象相对于父对象的位置，返回值是一个点对象，它指定对象左上角在屏幕坐标空间内的位置。

@return 表示对象界限左上角在屏幕坐标空间中的 Point 的实例；如果此对象或其父级不在屏幕上，则返回 null
@see #getBounds
@see #getLocationOnScreen

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.setLocation(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->

设置对象相对于父级的位置。
@param p 左上角的新位置
@see #getLocation

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->

以 Rectangle 对象的形式获取此对象的界限。这些界限指定此对象的宽度、高度和相对于父级的位置。 

@return 返回指示此组件的界限的长方形；如果此对象不在屏幕上，则返回 null。
@see #contains

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.setBounds(Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->

以 Rectangle 对象的形式设置此对象的界限。这些界限指定此对象的宽度、高度和相对于父级的位置。
	
@param r 指示此组件界限的长方形
@see #getBounds

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getSize()
<!-- END KEY -->
<!-- BEGIN DATA -->

以 Dimension 对象的形式返回此对象的大小。Dimension 对象的高度字段包含此对象的高度，Dimension 对象的宽度字段包含此对象的宽度。 

@return 返回指示此组件大小的 Dimension 对象；如果此对象不在屏幕上，则返回 null
@see #setSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.setSize(Dimension d)
<!-- END KEY -->
<!-- BEGIN DATA -->

调整此对象，使其具有高度和宽度。 
	
@param d - 指定对象新大小的维数。
@see #getSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getAccessibleAt(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果存在 <code>Accessible</code> 子级，并且包含在本地坐标 <code>Point</code> 位置，则返回该子级。

@param p 相对于此对象的的点
@return 如果 <code>Accessible</code> 存在，并且位于指定位置，则返回它；否则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.List.AccessibleAWTList.AccessibleAWTListChild.isFocusTraversable()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象是否可以接受焦点。可以接受焦点的对象在其 <code>AccessibleStateSet</code> 中也将具有 <code>AccessibleState.FOCUSABLE</code> 状态设置。

@return 如果对象可以接受焦点，则返回 true；否则返回 false
@see AccessibleContext#getAccessibleStateSet
@see AccessibleState#FOCUSABLE
@see AccessibleState#FOCUSED
@see AccessibleStateSet

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.requestFocus()
<!-- END KEY -->
<!-- BEGIN DATA -->
请求聚焦此对象。如果此对象不能接受焦点，则不执行任何操作。否则，对象将尝试接受焦点。
@see #isFocusTraversable

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.addFocusListener(FocusListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定的焦点侦听器，以从此组件接收焦点事件。 

@param l 焦点侦听器
@see #removeFocusListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.removeFocusListener(FocusListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定的焦点侦听器，使其不再从此组件接收焦点事件。

@param l 焦点侦听器
@see #addFocusListener

<!-- END DATA -->
