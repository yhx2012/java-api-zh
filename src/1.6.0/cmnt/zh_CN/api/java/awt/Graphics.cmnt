<!-- BEGIN KEY -->
public abstract class java.awt.Graphics extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Graphics</code> 类是所有图形上下文的抽象基类，允许应用程序在组件（已经在各种设备上实现）以及闭屏图像上进行绘制。
 <p>
<code>Graphics</code> 对象封装了 Java 支持的基本呈现操作所需的状态信息。此状态信息包括以下属性：
 <p>
 <ul>
<li>要在其上绘制的 <code>Component</code> 对象。
<li>呈现和剪贴坐标的转换原点。
<li>当前剪贴区。  
<li>当前颜色。
<li>当前字体。
<li>当前逻辑像素操作函数（XOR 或 Paint）。
<li>当前 XOR 交替颜色（参见 {@link Graphics#setXORMode}）。
 </ul>
 <p>
坐标是无限细分的，并且位于输出设备的像素之间。绘制图形轮廓的操作是通过使用像素大小的画笔遍历像素间无限细分路径的操作，画笔从路径上的锚点向下和向右绘制。填充图形的操作是填充图形内部区域无限细分路径操作。呈现水平文本的操作是呈现字符字形完全位于基线坐标之上的上升部分。
 <p>
图形画笔从要遍历的路径向下和向右绘制。其含义如下：
 <p><ul>
<li>如果绘制一个覆盖给定矩形的图形，那么该图形与填充被相同矩形所限定的图形相比，在右侧和底边多占用一行像素。
<li>如果沿着与一行文本基线相同的 <i>y</i>  坐标绘制一条水平线，那么除了文字的所有下降部分外，该线完全画在文本的下面。
 </ul><p>
所有作为此 <code>Graphics</code> 对象方法的参数而出现的坐标，都是相对于调用该方法前的此 <code>Graphics</code> 对象转换原点的。
 <p>
所有呈现操作仅修改当前剪贴区所限定区域内的像素，此剪贴区是由用户空间中的 {@link Shape} 指定的，并通过使用 <code>Graphics</code> 对象的程序来控制。此<i>用户剪贴区</i> 被转换到设备空间中，并与<i>设备剪贴区</i> 组合，后者是通过窗口可见性和设备范围定义的。用户剪贴区和设备剪贴区的组合定义<i>复合剪贴区</i>，复合剪贴区确定最终的剪贴区域。用户剪贴区不能由呈现系统修改，以反映得到的复合剪贴区。用户剪贴区只能通过 <code>setClip</code> 或 <code>clipRect</code> 方法更改。所有的绘制或写入都以当前的颜色、当前绘图模式和当前字体完成。 
 
@version 	1.74, 02/14/06
@author 	Sami Shaio
@author 	Arthur van Hoff
@see     java.awt.Component
@see     java.awt.Graphics#clipRect(int, int, int, int)
@see     java.awt.Graphics#setColor(java.awt.Color)
@see     java.awt.Graphics#setPaintMode()
@see     java.awt.Graphics#setXORMode(java.awt.Color)
@see     java.awt.Graphics#setFont(java.awt.Font)
@since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Graphics()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的 <code>Graphics</code> 对象。此构造方法是用于图形上下文的默认构造方法。 
 <p>
因为 <code>Graphics</code> 是一个抽象类，所以应用程序不能直接调用此构造方法。图形上下文从其他图形上下文获取，或者通过在组件上调用 <code>getGraphics</code> 来创建。
@see        java.awt.Graphics#create()
@see        java.awt.Component#getGraphics

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Graphics java.awt.Graphics.create()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 <code>Graphics</code> 对象，它是此 <code>Graphics</code> 对象的副本。
@return 新的图形上下文，它是此图形上下文的副本。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Graphics java.awt.Graphics.create(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
基于此 <code>Graphics</code> 对象创建一个新的 <code>Graphics</code> 对象，但是使用新的转换和剪贴区域。新 <code>Graphics</code> 对象的原点平移到指定点 (<i>x</i>,&nbsp;<i>y</i>)。其剪贴区域由原始剪贴区域和指定矩形的交集确定。各个参数均在原始 <code>Graphics</code> 对象的坐标系内进行解释。新图形上下文除以下两方面之外，其他与原始图形上下文相同： 
 <p>
 <ul>
 <li>
新的图形上下文平移了 (<i>x</i>,&nbsp;<i>y</i>)。也就是说，新图形上下文中的点 (<code>0</code>,&nbsp;<code>0</code>) 与原图形上下文中的点 (<i>x</i>,&nbsp;<i>y</i>) 相同。 
 <li>
新图形上下文除了具有一个从原始图形上下文继承的（平移的）剪贴矩形之外，还有一个额外的剪贴矩形，新剪贴矩形的原点为 (<code>0</code>,&nbsp;<code>0</code>)，其大小由 <code>width</code> 和 <code>height</code> 参数指定。
 </ul>
 <p>
@param     x  <i>x</i> 坐标。
@param     y  <i>y</i> 坐标。
@param      width  剪贴矩形的宽度。
@param      height 剪贴矩形的高度。
@return     新的图形上下文。
@see        java.awt.Graphics#translate
@see        java.awt.Graphics#clipRect

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.translate(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
将图形上下文的原点平移到当前坐标系中的点 (<i>x</i>,&nbsp;<i>y</i>)。修改此图形上下文，使其新的原点对应于此图形上下文原坐标系中的点 (<i>x</i>,&nbsp;<i>y</i>)。在此图形上下文上执行的后续呈现操作所用的所有坐标均相对于这个新原点。
@param     x  <i>x</i> 坐标。
@param     y  <i>y</i> 坐标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Color java.awt.Graphics.getColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此图形上下文的当前颜色。
@return    此图形上下文的当前颜色。
@see       java.awt.Color
@see       java.awt.Graphics#setColor(Color)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.setColor(Color c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此图形上下文的当前颜色设置为指定颜色。使用此图形上下文的所有后续图形操作均使用这个指定的颜色。
@param     c   新的呈现颜色。
@see       java.awt.Color
@see       java.awt.Graphics#getColor

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.setPaintMode()
<!-- END KEY -->
<!-- BEGIN DATA -->
设置将此图形上下文的绘图模式，以便通过此图形上下文中的当前颜色来覆盖目标。此方法将逻辑像素操作函数设置为绘图模式或覆盖模式。所有后续呈现操作将使用当前颜色覆盖目标。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.setXORMode(Color c1)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此图形上下文的绘图模式设置为在此图形上下文的当前颜色和新的指定颜色之间交替。这指定了逻辑像素操作以 XOR 模式执行，在此模式中像素在当前颜色和指定的 XOR 颜色之间进行交替。 
 <p>
当执行绘制操作时，当前颜色的像素更改为指定的颜色，反之亦然。 
 <p>
这两种颜色以外的像素以不可预测但可逆的方式更改；如果相同的图形被绘制两次，则所有像素恢复到原始值。
@param     c1 XOR 交替颜色

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Font java.awt.Graphics.getFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取当前字体。
@return    此图形上下文的当前字体。
@see       java.awt.Font
@see       java.awt.Graphics#setFont(Font)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.setFont(Font font)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此图形上下文的字体设置为指定字体。使用此图形上下文的所有后续文本操作均使用此字体。忽略 null 参数。
@param  font   字体。
@see     java.awt.Graphics#getFont
@see     java.awt.Graphics#drawString(java.lang.String, int, int)
@see     java.awt.Graphics#drawBytes(byte[], int, int, int, int)
@see     java.awt.Graphics#drawChars(char[], int, int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FontMetrics java.awt.Graphics.getFontMetrics()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取当前字体的字体规格。
@return    此图形上下文当前字体的字体规格。
@see       java.awt.Graphics#getFont
@see       java.awt.FontMetrics
@see       java.awt.Graphics#getFontMetrics(Font)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.FontMetrics java.awt.Graphics.getFontMetrics(Font f)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定字体的字体规格。
@return    指定字体的字体规格。
@param     f 指定的字体
@see       java.awt.Graphics#getFont
@see       java.awt.FontMetrics
@see       java.awt.Graphics#getFontMetrics()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Rectangle java.awt.Graphics.getClipBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前剪贴区域的边界矩形。此方法引用用户剪贴区，用户剪贴区与设备边界和窗口可见性关联的剪贴区无关。如果以前未设置剪贴区，或者已使用 <code>setClip(null)</code> 清除了剪贴区，则此方法返回 <code>null</code>。该矩形内的坐标相对于此图形上下文的坐标系原点。
@return     当前剪贴区域的边界矩形；如果未设置剪贴区，则返回 <code>null</code>。
@see         java.awt.Graphics#getClip
@see         java.awt.Graphics#clipRect
@see         java.awt.Graphics#setClip(int, int, int, int)
@see         java.awt.Graphics#setClip(Shape)
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.clipRect(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->

将当前剪贴区与指定的矩形相交。得到的剪贴区域是当前剪贴区域和指定矩形的交集。如果因为从未设置过剪贴区，或者已使用 <code>setClip(null)</code> 清除了剪贴区而导致没有当前剪贴区域，那么指定的矩形将成为新的剪贴区。此方法设置用户剪贴区，用户剪贴区与设备边界和窗口可见性所关联的剪贴区无关。此方法只能用来缩小当前剪贴区。要扩大当前剪贴区，请使用 setClip 方法。呈现操作对剪贴区域的外部没有影响。
@param x 要与剪贴区相交的矩形的 x 坐标
@param y 要与剪贴区相交的矩形的 y 坐标
@param width 要与剪贴区相交的矩形的宽度
@param height 要与剪贴区相交的矩形的高度
@see #setClip(int, int, int, int)
@see #setClip(Shape)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.setClip(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
将当前剪贴区设置为由给定坐标指定的矩形。此方法设置用户剪贴区，用户剪贴区与设备边界和窗口可见性关联的剪贴区无关。呈现操作对剪贴区域的外部没有影响。
@param       x 新剪贴区矩形的 <i>x</i> 坐标。
@param       y 新剪贴区矩形的 <i>y</i> 坐标。
@param       width 新剪贴区矩形的宽度。
@param       height 新剪贴区矩形的高度。
@see         java.awt.Graphics#clipRect
@see         java.awt.Graphics#setClip(Shape)
@see	    java.awt.Graphics#getClip
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Shape java.awt.Graphics.getClip()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取当前剪贴区域。此方法返回用户剪贴区，用户剪贴区与设备边界和窗口可见性关联的剪贴区无关。如果以前未设置剪贴区，或者已使用 <code>setClip(null)</code> 清除了剪贴区，那么此方法返回 <code>null</code>。
@return   表示当前剪贴区域的 <code>Shape</code> 对象；如果未设置剪贴区，则返回 <code>null</code>。
@see         java.awt.Graphics#getClipBounds
@see         java.awt.Graphics#clipRect
@see         java.awt.Graphics#setClip(int, int, int, int)
@see         java.awt.Graphics#setClip(Shape)
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.setClip(Shape clip)
<!-- END KEY -->
<!-- BEGIN DATA -->
将当前剪贴区域设置为任意的剪贴形状。并非所有实现 <code>Shape</code> 接口的对象都能用于设置剪贴区。只保证支持通过 <code>getClip</code> 方法和 <code>Rectangle</code> 对象获取的 <code>Shape</code> 对象。此方法设置用户剪贴区，用户剪贴区与设备边界和窗口可见性关联的剪贴区无关。
@param clip 用来设置剪贴形状的 <code>Shape</code>
@see         java.awt.Graphics#getClip()
@see         java.awt.Graphics#clipRect
@see         java.awt.Graphics#setClip(int, int, int, int)
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.copyArea(int x, int y, int width, int height, int dx, int dy)
<!-- END KEY -->
<!-- BEGIN DATA -->
将组件的区域复制到由 <code>dx</code> 和 <code>dy</code> 指定的距离处。此方法从 <code>x</code> 和 <code>y</code> 指定的点向下和向右复制。要将组件的区域向左或向上复制，请指定负的 <code>dx</code> 或 <code>dy</code> 值。如果源矩形的一部分位于组件边界的外部，或者被另一个窗口或组件遮掩，那么 <code>copyArea</code> 将无法复制相关的像素。通过调用组件的 <code>paint</code> 方法可刷新被忽略的区域。
@param     x 源矩形的 <i>x</i> 坐标。
@param     y 源矩形的 <i>y</i> 坐标。
@param       width 源矩形的宽度。
@param       height 源矩形的高度。
@param       dx 复制像素的水平距离。
@param       dy 复制像素的垂直距离。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.drawLine(int x1, int y1, int x2, int y2)
<!-- END KEY -->
<!-- BEGIN DATA -->

在此图形上下文的坐标系中，使用当前颜色在点 <code>(x1,&nbsp;y1)</code> 和 <code>(x2,&nbsp;y2)</code> 之间画一条线。
@param   x1  第一个点的 <i>x</i> 坐标。
@param   y1  第一个点的 <i>y</i> 坐标。
@param   x2  第二个点的 <i>x</i> 坐标。
@param   y2  第二个点的 <i>y</i> 坐标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.fillRect(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->

填充指定的矩形。该矩形左边缘和右边缘分别位于 <code>x</code> 和 <code>x&nbsp;+&nbsp;width&nbsp;-&nbsp;1</code>。上边缘和下边缘分别位于 <code>y</code> 和 <code>y&nbsp;+&nbsp;height&nbsp;-&nbsp;1</code>。得到的矩形覆盖 <code>width</code> 像素宽乘以 <code>height</code> 像素高的区域。使用图形上下文的当前颜色填充该矩形。
@param         x   要填充矩形的 <i>x</i> 坐标。
@param         y   要填充矩形的 <i>y</i> 坐标。
@param         width   要填充矩形的宽度。
@param         height   要填充矩形的高度。
@see           java.awt.Graphics#clearRect
@see           java.awt.Graphics#drawRect

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Graphics.drawRect(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->

绘制指定矩形的边框。矩形的左边缘和右边缘分别位于 <code>x</code> 和 <code>x&nbsp;+&nbsp;width</code>。上边缘和下边缘分别位于 <code>y</code> 和 <code>y&nbsp;+&nbsp;height</code>。使用图形上下文的当前颜色绘制该矩形。
@param         x   要绘制矩形的 <i>x</i> 坐标。
@param         y   要绘制矩形的 <i>y</i> 坐标。
@param         width   要绘制矩形的宽度。
@param         height   要绘制矩形的高度。
@see          java.awt.Graphics#fillRect
@see          java.awt.Graphics#clearRect

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.clearRect(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->

通过使用当前绘图表面的背景色进行填充来清除指定的矩形。此操作不使用当前绘图模式。 
 <p>
从 Java&nbsp;1.1 开始，离屏图像的背景色可能与系统相关。应用程序应该使用 <code>setColor</code>，然后使用 <code>fillRect</code>，以确保离屏图像被清除为指定颜色。
@param       x 要清除矩形的 <i>x</i> 坐标。
@param       y 要清除矩形的 <i>y</i> 坐标。
@param       width 要清除矩形的宽度。
@param       height 要清除矩形的高度。
@see         java.awt.Graphics#fillRect(int, int, int, int)
@see         java.awt.Graphics#drawRect
@see         java.awt.Graphics#setColor(java.awt.Color)
@see         java.awt.Graphics#setPaintMode
@see         java.awt.Graphics#setXORMode(java.awt.Color)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.drawRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->

用此图形上下文的当前颜色绘制圆角矩形的边框。矩形的左边缘和右边缘分别位于 <code>x</code> 和 <code>x&nbsp;+&nbsp;width</code>。矩形的上边缘和下边缘分别位于 <code>y</code> 和 <code>y&nbsp;+&nbsp;height</code>。
@param      x 要绘制矩形的 <i>x</i> 坐标。
@param      y 要绘制矩形的 <i>y</i> 坐标。
@param      width 要绘制矩形的宽度。
@param      height 要绘制矩形的高度。
@param      arcWidth 4 个角弧度的水平直径。
@param      arcHeight 4 个角弧度的垂直直径。
@see        java.awt.Graphics#fillRoundRect

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.fillRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->

用当前颜色填充指定的圆角矩形。矩形的左边缘和右边缘分别位于 <code>x</code> 和 <code>x&nbsp;+&nbsp;width&nbsp;-&nbsp;1</code>。矩形的上边缘和下边缘分别位于 <code>y</code> 和 <code>y&nbsp;+&nbsp;height&nbsp;-&nbsp;1</code>。
@param       x 要填充矩形的 <i>x</i> 坐标。
@param       y 要填充矩形的 <i>y</i> 坐标。
@param       width 要填充矩形的宽度。
@param       height 要填充矩形的高度。
@param      arcWidth 4 个角弧度的水平直径。
@param      arcHeight 4 个角弧度的垂直直径。
@see         java.awt.Graphics#drawRoundRect

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Graphics.draw3DRect(int x, int y, int width, int height, boolean raised)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制指定矩形的 3-D 高亮显示边框。矩形的边是高亮显示的，以至于从左上角看呈斜面并加亮。
 <p>
高亮显示效果所用的颜色根据当前颜色确定。得到的矩形覆盖 <code>width&nbsp;+&nbsp;1</code> 像素宽乘以 <code>height&nbsp;+&nbsp;1</code> 像素高的区域。
@param       x 要绘制矩形的 <i>x</i> 坐标。
@param       y 要绘制矩形的 <i>y</i> 坐标。
@param       width 要绘制矩形的宽度。
@param       height 要绘制矩形的高度。
@param       raised 一个用于确定矩形是凸出平面显示还是凹入平面显示的 boolean 值。
@see         java.awt.Graphics#fill3DRect

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Graphics.fill3DRect(int x, int y, int width, int height, boolean raised)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制一个用当前颜色填充的 3-D 高亮显示矩形。矩形的边是高亮显示的，以至于从左上角看呈斜面并加亮。高亮显示效果所用的颜色根据当前颜色确定。
@param       x 要填充矩形的 <i>x</i> 坐标。
@param       y 要填充矩形的 <i>y</i> 坐标。
@param       width 要填充矩形的宽度。
@param       height 要填充矩形的高度。
@param       raised 一个用于确定矩形是凸出平面显示还是凹入平面显示的 boolean 值。
@see         java.awt.Graphics#draw3DRect

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.drawOval(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->

绘制椭圆的边框。得到一个圆或椭圆，它刚好能放入由 <code>x</code>、<code>y</code>、<code>width</code> 和 <code>height</code> 参数指定的矩形中。 
 <p> 
椭圆覆盖区域的宽度为 <code>width&nbsp;+&nbsp;1</code> 像素，高度为 <code>height&nbsp;+&nbsp;1</code> 像素。
@param       x 要绘制椭圆的左上角的 <i>x</i> 坐标。
@param       y 要绘制椭圆的左上角的 <i>y</i> 坐标。
@param       width 要绘制椭圆的宽度。
@param       height 要绘制椭圆的高度。
@see         java.awt.Graphics#fillOval

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.fillOval(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->

使用当前颜色填充外接指定矩形框的椭圆。
@param       x 要填充椭圆的左上角的 <i>x</i> 坐标。
@param       y 要填充椭圆的左上角的 <i>y</i> 坐标。
@param       width 要填充椭圆的宽度。
@param       height 要填充椭圆的高度。
@see         java.awt.Graphics#drawOval

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.drawArc(int x, int y, int width, int height, int startAngle, int arcAngle)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制一个覆盖指定矩形的圆弧或椭圆弧边框。
 <p>
得到的弧从 <code>startAngle</code> 开始跨越 <code>arcAngle</code> 度，并使用当前颜色。对角度的解释如下：0 度角位于 3&nbsp;点钟位置。正值指示逆时针旋转，负值指示顺时针旋转。
 <p>
弧的中心是矩形的中心，此矩形的原点为 (<i>x</i>,&#xA0;<i>y</i>)，大小由 <code>width</code> 和 <code>height</code> 参数指定。 
 <p>
得到的弧覆盖 <code>width&nbsp;+&nbsp;1</code> 像素宽乘以 <code>height&nbsp;+&nbsp;1</code> 像素高的区域。
 <p>
角度是相对于外接矩形的非正方形区域指定的，45 度角始终落在从椭圆中心到外接矩形右上角的连线上。因此，如果外接矩形在一个轴上远远长于另一个轴，则弧段的起点和结束点的角度将沿边框长轴发生更大的偏斜。
@param        x 要绘制弧的左上角的 <i>x</i> 坐标。
@param        y 要绘制弧的左上角的 <i>y</i> 坐标。
@param        width 要绘制弧的宽度。
@param        height 要绘制弧的高度。
@param        startAngle 开始角度。
@param        arcAngle 相对于开始角度而言，弧跨越的角度。
@see         java.awt.Graphics#fillArc

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.fillArc(int x, int y, int width, int height, int startAngle, int arcAngle)
<!-- END KEY -->
<!-- BEGIN DATA -->

填充覆盖指定矩形的圆弧或椭圆弧。
 <p>
得到的弧从 <code>startAngle</code> 开始跨越 <code>arcAngle</code> 度。对角度的解释如下：0 度角位于 3 点钟位置。正值指示逆时针旋转，负值指示顺时针旋转。
 <p>
弧的中心是矩形的中心，此矩形的原点为 (<i>x</i>,&#xA0;<i>y</i>)，大小由 <code>width</code> 和 <code>height</code> 参数指定。 
 <p>
得到的弧覆盖 <code>width&#xA0;+&#xA0;1</code> 像素宽乘以 <code>height&#xA0;+&#xA0;1</code> 像素高的区域。
 <p>
角度是相对于外接矩形的非正方形区域指定的，45 度角始终落在从椭圆中心到外接矩形右上角的连线上。因此，如果外接矩形在一个轴上远远长于另一个轴，则弧段的起点和结束点的角度将沿边框长轴发生更大的偏斜。
@param        x 要填充弧的左上角的 <i>x</i> 坐标。
@param        y 要填充弧的左上角的 <i>y</i> 坐标。
@param        width 要填充弧的宽度。
@param        height 要填充弧的高度。
@param        startAngle 开始角度。
@param        arcAngle 相对于开始角度而言，弧跨越的角度。
@see         java.awt.Graphics#drawArc

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.drawPolyline(int[] xPoints, int[] yPoints, int nPoints)
<!-- END KEY -->
<!-- BEGIN DATA -->

绘制由 <i>x</i> 和 <i>y</i> 坐标数组定义的一系列连接线。每对 (<i>x</i>,&nbsp;<i>y</i>) 坐标定义一个点。如果第一个点和最后一个点不同，则图形不是闭合的。
@param       xPoints  <i>x</i> 点数组
@param       yPoints <i>y</i> 点数组
@param       nPoints 点的总数
@see         java.awt.Graphics#drawPolygon(int[], int[], int)
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.drawPolygon(int[] xPoints, int[] yPoints, int nPoints)
<!-- END KEY -->
<!-- BEGIN DATA -->

绘制一个由 <i>x</i> 和 <i>y</i> 坐标数组定义的闭合多边形。每对 (<i>x</i>,&nbsp;<i>y</i>) 坐标定义一个点。
 <p>
此方法绘制由 <code>nPoint</code> 个线段定义的多边形，其中前 <code>nPoint&nbsp;-&nbsp;1</code> 个线段是 1&nbsp;&le;&nbsp;<i>i</i>&nbsp;&le;&nbsp;<code>nPoints</code> 时从 <code>(xPoints[i&#xA0;-&#xA0;1],&#xA0;yPoints[i&#xA0;-&#xA0;1])</code> 到 <code>(xPoints[i],&#xA0;yPoints[i])</code> 的线段。如果最后一个点和第一个点不同，则图形将在这两点间绘制一条线段来自动闭合。
@param        xPoints <code>x</code> 坐标数组。
@param        yPoints <code>y</code> 坐标数组。
@param        nPoints 点的总数。
@see          java.awt.Graphics#fillPolygon
@see          java.awt.Graphics#drawPolyline

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Graphics.drawPolygon(Polygon p)
<!-- END KEY -->
<!-- BEGIN DATA -->

绘制由指定的 <code>Polygon</code> 对象定义的多边形边框。
@param        p 要绘制的多边形。
@see          java.awt.Graphics#fillPolygon
@see          java.awt.Graphics#drawPolyline

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.fillPolygon(int[] xPoints, int[] yPoints, int nPoints)
<!-- END KEY -->
<!-- BEGIN DATA -->

填充由 <i>x</i> 和 <i>y</i> 坐标数组定义的闭合多边形。 
 <p>
此方法绘制由 <code>nPoint</code> 个线段定义的多边形，其中前 <code>nPoint&nbsp;-&nbsp;1</code> 个线段是 1&#xA0;&le;&#xA0;<i>i</i>&#xA0;&le;&#xA0; 时从 <code>(xPoints[i&nbsp;-&nbsp;1],&nbsp;yPoints[i&nbsp;-&nbsp;1])</code> 到 <code>(xPoints[i],&nbsp;yPoints[i])</code> 的线段。如果最后一个点和第一个点不同，则图形会通过在这两点间绘制一条线段来自动闭合。
 <p>
多边形内部的区域使用奇偶填充规则定义，此规则也称为交替填充规则。
@param        xPoints   <code>x</code> 坐标数组。
@param        yPoints   <code>y</code> 坐标数组。
@param        nPoints   点的总数。
@see          java.awt.Graphics#drawPolygon(int[], int[], int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Graphics.fillPolygon(Polygon p)
<!-- END KEY -->
<!-- BEGIN DATA -->

用图形上下文的当前颜色填充指定 Polygon 对象定义的多边形。 
 <p>
多边形内部的区域使用奇偶填充规则定义，此规则也称为交替填充规则。
@param        p 要填充的多边形。
@see          java.awt.Graphics#drawPolygon(int[], int[], int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.drawString(String str, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->

使用此图形上下文的当前字体和颜色绘制由指定 string 给定的文本。最左侧字符的基线位于此图形上下文坐标系的 (<i>x</i>,&nbsp;<i>y</i>) 位置处。
@param   str   要绘制的 string。
@param     x     <i>x</i> 坐标。
@param     y     <i>y</i> 坐标。
@throws NullPointerException 如果 <code>str</code> 为 <code>null</code>。
@see         java.awt.Graphics#drawBytes
@see         java.awt.Graphics#drawChars

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.drawString(AttributedCharacterIterator iterator, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->

依据 {@link java.awt.font.TextAttribute TextAttribute} 类的规范应用指定迭代器的属性，呈现迭代器的文本。
<p>
最左侧字符的基线位于此图形上下文坐标系的 (<i>x</i>,&nbsp;<i>y</i>) 位置处。
@param       iterator 要绘制其文本的迭代器
@param       x        <i>x</i> 坐标。
@param     y          <i>y</i> 坐标。
@throws NullPointerException 如果 <code>iterator</code> 为 <code>null</code>。
@see         java.awt.Graphics#drawBytes
@see         java.awt.Graphics#drawChars

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Graphics.drawChars(char[] data, int offset, int length, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->

使用此图形上下文的当前字体和颜色绘制由指定字符数组给定的文本。首字符的基线位于此图形上下文坐标系的 (<i>x</i>,&#xA0;<i>y</i>) 位置处。
@param data 要绘制的字符数组
@param offset 数据的初始偏移量
@param length 要绘制的字符数
@param x 文本基线的 <i>x</i> 坐标
@param y 文本基线的 <i>y</i> 坐标
@throws NullPointerException 如果 <code>data</code> 为 <code>null</code>。
@throws IndexOutOfBoundsException 如果 <code>offset</code> 或 <code>length</code> 小于零，或者
<code>offset+length</code> 大于 <code>data</code> 数组的长度。
@see         java.awt.Graphics#drawBytes
@see         java.awt.Graphics#drawString

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Graphics.drawBytes(byte[] data, int offset, int length, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->

使用此图形上下文的当前字体和颜色绘制由指定 byte 数组给定的文本。首字符的基线位于此图形上下文坐标系的 (<i>x</i>,&#xA0;<i>y</i>) 位置处。
<p>
不建议使用此方法，因为每个字节都被解释为 0 到 255 范围内的 Unicode 代码点，因此在该范围内只能用于绘制拉丁字符。
@param data 要绘制的数据
@param offset 数据的起始偏移量
@param length 要绘制的字节数
@param x 文本基线的 <i>x</i> 坐标
@param y 文本基线的 <i>y</i> 坐标
@throws NullPointerException 如果 <code>data</code> 为 <code>null</code>。
@throws IndexOutOfBoundsException 如果 <code>offset</code> 或 <code>length</code> 小于零，或者 
<code>offset+length</code> 大于 <code>data</code> 数组的长度。
@see         java.awt.Graphics#drawChars
@see         java.awt.Graphics#drawString

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.awt.Graphics.drawImage(Image img, int x, int y, ImageObserver observer)
<!-- END KEY -->
<!-- BEGIN DATA -->

绘制指定图像中当前可用的图像。图像的左上角位于该图形上下文坐标空间的 (<i>x</i>,&nbsp;<i>y</i>)。图像中的透明像素不影响该处已存在的像素。 
 <p>
此方法在任何情况下都立刻返回，甚至在图像尚未完整加载，并且还没有针对当前输出设备完成抖动和转换的情况下也是如此。
 <p>
如果图像已经完整加载，并且其像素不再发生更改，则 <code>drawImage</code> 返回 <code>true</code>。否则，<code>drawImage</code> 返回 <code>false</code>，并且随着更多的图像可用或者到了绘制动画另一帧的时候，加载图像的进程将通知指定的图像观察者。
@param    img 要绘制的指定图像。如果 <code>img</code> 为 null，则此方法不执行任何操作。
@param     x   <i>x</i> 坐标。
@param     y  <i>y</i> 坐标。
@param    observer 转换了更多图像时要通知的对象。
@return  如果图像像素仍在更改，则返回 <code>false</code>；否则返回 <code>true</code>。
@see      java.awt.Image
@see      java.awt.image.ImageObserver
@see      java.awt.image.ImageObserver#imageUpdate(java.awt.Image, int, int, int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.awt.Graphics.drawImage(Image img, int x, int y, int width, int height, ImageObserver observer)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制指定图像中已缩放到适合指定矩形内部的图像。
 <p>
图像绘制在此图形上下文坐标空间的指定矩形内部，如果需要，则进行缩放。透明像素不影响该处已存在的像素。 
 <p>
此方法在任何情况下都立刻返回，甚至在整个图像没有针对当前输出设备完成缩放、抖动或转换的情况下也是如此。如果当前输出表示形式尚未完成，则 <code>drawImage</code> 返回 <code>false</code>。随着更多的图像可用，加载图像的进程将通过调用图像观察者的 <code>imageUpdate</code> 方法来通知它。
 <p>
缩放的图像不一定立刻可用，因为已经针对此输出设备构造了非缩放的图像。每种大小的图像可以被分别缓存，并由各自图像生产序列中的原始数据生成。
@param    img    要绘制的指定图像。如果 <code>img</code> 为 null，则此方法不执行任何操作。
@param     x   <i>x</i> 坐标。
@param     y  <i>y</i> 坐标。
@param    width  矩形的宽度。
@param    height 矩形的高度。
@param    observer    转换了更多图像时要通知的对象。
@return  如果图像像素仍在改变，则返回 <code>false</code>；否则返回 <code>true</code>。
@see      java.awt.Image
@see      java.awt.image.ImageObserver
@see      java.awt.image.ImageObserver#imageUpdate(java.awt.Image, int, int, int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.awt.Graphics.drawImage(Image img, int x, int y, Color bgcolor, ImageObserver observer)
<!-- END KEY -->
<!-- BEGIN DATA -->

绘制指定图像中当前可用的图像。图像的左上角位于此图形上下文坐标空间的 (<i>x</i>,&#xA0;<i>y</i>)。以指定的背景色绘制透明像素。
 <p> 
此操作等同于用给定颜色填充指定图像宽度和高度的矩形，然后在其上绘制图像，但此操作效率更高。
 <p>
此方法在任何情况下都立刻返回，甚至在整个图像尚未加载，并且还没有针对当前输出设备完成抖动和转换的情况下也是如此。
 <p>
如果图像已经完全加载，并且其像素不再发生改变，则 <code>drawImage</code> 返回 <code>true</code>。否则 <code>drawImage</code> 返回 <code>false</code>，并且随着更多的图像可用或者到了绘制动画另一帧的时候，加载图像的进程将通知指定的图像观察者。
@param    img 要绘制的指定图像。如果 <code>img</code> 为 null，则此方法不执行任何操作。
@param     x   <i>x</i> 坐标。
@param     y  <i>y</i> 坐标。
@param    bgcolor 在图像非透明部分下绘制的背景色。
@param    observer  当转换了更多图像时要通知的对象。
@return   如果图像像素仍在改变，则返回 <code>false</code>；否则返回 <code>true</code>。
@see      java.awt.Image
@see      java.awt.image.ImageObserver
@see      java.awt.image.ImageObserver#imageUpdate(java.awt.Image, int, int, int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.awt.Graphics.drawImage(Image img, int x, int y, int width, int height, Color bgcolor, ImageObserver observer)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制指定图像中已缩放到适合指定矩形内部的图像。
 <p>
图像绘制在此图形上下文坐标空间的指定矩形内部，如果需要，则进行缩放。以指定的背景色绘制透明像素。此操作等同于用给定颜色填充指定图像宽度和高度的矩形，然后在其上绘制图像，但此操作效率更高。
 <p>
此方法在任何情况下都立刻返回，甚至在整个图像没有针对当前输出设备完成缩放、抖动或转换的情况下也是如此。如果当前的输出表示形式尚未完成，则 <code>drawImage</code> 返回 <code>false</code>。随着更多的图像可用，加载图像的进程将通知指定的图像观察者。
 <p>
缩放的图像不一定立刻是可用的，因为已经为此输出设备构造了非缩放的图像。每种大小的图像可以被分别缓存，并由各自图像生产序列中的原始数据生成。
@param    img 要绘制的指定图像。如果 <code>img</code> 为 null，则此方法不执行任何操作。
@param     x   <i>x</i> 坐标。
@param     y  <i>y</i> 坐标。
@param    width     矩形的宽度。
@param    height    矩形的高度。
@param    bgcolor 在图像非透明部分下绘制的背景色。
@param    observer    当转换了更多图像时要通知的对象。
@return  如果图像像素仍在改变，则返回 <code>false</code>；否则返回 <code>true</code>。
@see      java.awt.Image
@see      java.awt.image.ImageObserver
@see      java.awt.image.ImageObserver#imageUpdate(java.awt.Image, int, int, int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.awt.Graphics.drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2, int sy2, ImageObserver observer)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制当前可用的指定图像的指定区域，动态地缩放图像使其符合目标绘制表面的指定区域。透明像素不影响该处已存在的像素。
 <p>
此方法在任何情况下都立刻返回，甚至在要绘制的图像区域没有针对当前输出设备完成缩放、抖动或转换的情况下也是如此。如果当前的输出表示形式尚未完成，则 <code>drawImage</code> 返回 <code>false</code>。随着更多的图像可用，加载图像的进程将通知指定的图像观察者。
 <p>
此方法总是用非缩放的图像来呈现缩放的矩形，并且动态地执行所需的缩放。此操作不使用缓存的缩放图像。执行图像从源到目标的缩放：源矩形的第一个坐标被映射到目标矩形的第一个坐标，第二个源坐标被映射到第二个目标坐标。按需要缩放和翻转子图像以保持这些映射关系。
@param       img 要绘制的指定图像。如果 <code>img</code> 为 null，则此方法不执行任何操作。
@param       dx1 目标矩形第一个角的 <i>x</i> 坐标。
@param       dy1 目标矩形第一个角的 <i>y</i> 坐标。
@param       dx2 目标矩形第二个角的 <i>x</i> 坐标。
@param       dy2 目标矩形第二个角的 <i>y</i> 坐标。
@param       sx1 源矩形第一个角的 <i>x</i> 坐标。
@param       sy1 源矩形第一个角的 <i>y</i> 坐标。
@param       sx2 源矩形第二个角的 <i>x</i> 坐标。
@param       sy2 源矩形第二个角的 <i>y</i> 坐标。
@param    observer    当缩放并转换了更多图像时要通知的对象。
@return  如果图像像素仍在改变，则返回 <code>false</code>；否则返回 <code>true</code>。
@see         java.awt.Image
@see         java.awt.image.ImageObserver
@see         java.awt.image.ImageObserver#imageUpdate(java.awt.Image, int, int, int, int, int)
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.awt.Graphics.drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2, int sy2, Color bgcolor, ImageObserver observer)
<!-- END KEY -->
<!-- BEGIN DATA -->
绘制当前可用的指定图像的指定区域，动态地缩放图像使其符合目标绘制表面的指定区域。 
 <p>
以指定的背景色绘制透明像素。此操作等同于用给定颜色填充指定图像宽度和高度的矩形，然后在其上绘制图像，但此操作效率更高。
 <p>
此方法在任何情况下都立刻返回，甚至在要绘制的图像区域没有针对当前输出设备完成缩放、抖动或转换的情况下也是如此。如果当前的输出表示形式尚未完成，则 <code>drawImage</code> 返回 <code>false</code>。随着更多的图像可用，加载图像的进程将通知指定的图像观察者。
 <p>
此方法总是用非缩放的图像来呈现缩放的矩形，并且动态地执行所需的缩放。此操作不使用缓存的缩放图像。执行图像从源到目标的缩放：源矩形的第一个坐标被映射到目标矩形的第一个坐标，第二个源坐标被映射到第二个目标坐标。按需要缩放和翻转子图像以保持这些映射关系。
@param       img 要绘制的指定图像。如果 <code>img</code> 为 null，则此方法不执行任何操作。
@param       dx1 目标矩形第一个角的 <i>x</i> 坐标。
@param       dy1 目标矩形第一个角的 <i>y</i> 坐标。
@param       dx2 目标矩形第二个角的 <i>x</i> 坐标。
@param       dy2 目标矩形第二个角的 <i>y</i> 坐标。
@param       sx1 源矩形第一个角的 <i>x</i> 坐标。
@param       sy1 源矩形第一个角的 <i>y</i> 坐标。
@param       sx2 源矩形第二个角的 <i>x</i> 坐标。
@param       sy2 源矩形第二个角的 <i>y</i> 坐标。
@param    bgcolor 在图像非透明部分下绘制的背景色。
@param    observer    当缩放并转换了更多图像时要通知的对象。
@return  如果图像像素仍在改变，则返回 <code>false</code>；否则返回 <code>true</code>。
@see         java.awt.Image
@see         java.awt.image.ImageObserver
@see         java.awt.image.ImageObserver#imageUpdate(java.awt.Image, int, int, int, int, int)
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.Graphics.dispose()
<!-- END KEY -->
<!-- BEGIN DATA -->
释放此图形的上下文以及它使用的所有系统资源。调用 <code>dispose</code> 之后，就不能再使用 <code>Graphics</code> 对象。
 <p>
Java 程序运行时，可以在一个短时间帧内创建大量的 <code>Graphics</code> 对象。尽管垃圾回收器的终止进程也能够进行相同的系统资源释放，但是最好通过调用此方法来手工释放相关资源，而不是依靠终止进程，因为终止进程需要很长时间才能结束运行。
 <p>
作为组件 <code>paint</code> 和 <code>update</code> 方法的参数提供的 Graphics 对象，在这些方法返回时将被系统自动释放。为了提高效率，仅当所使用的 <code>Graphics</code> 对象是由组件或另一个 <code>Graphics</code> 对象直接创建时，程序员才应在使用完此 Graphics 后调用 <code>dispose</code>。
@see         java.awt.Graphics#finalize
@see         java.awt.Component#paint
@see         java.awt.Component#update
@see         java.awt.Component#getGraphics
@see         java.awt.Graphics#create

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Graphics.finalize()
<!-- END KEY -->
<!-- BEGIN DATA -->
一旦不再引用此图形上下文就释放它。
@see #dispose

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.Graphics.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此 <code>Graphics</code> 对象值的 <code>String</code> 对象。
@return  此图形上下文的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle java.awt.Graphics.getClipRect()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前剪贴区域的边界矩形。
@return    当前剪贴区域的边界矩形；如果未设置剪贴区，则返回 <code>null</code>。
@deprecated 从 JDK version 1.1 开始，由 <code>getClipBounds()</code> 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Graphics.hitClip(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果指定的矩形区域与当前的剪贴区域相交，则返回 true。指定矩形区域的坐标位于用户坐标空间中，并且相对于此图形上下文的坐标系原点。此方法可以使用快速计算出结果的算法，但此算法有时甚至在指定矩形区域与剪贴区域不相交时也返回 true。因此，所采用的指定算法可能牺牲准确性来换取速度，但是除非能够确保指定的矩形区域与当前剪贴区不相交，否则它不会返回 false。此方法使用的剪贴区域可以表示通过此图形上下文的 clip 方法指定的用户剪贴区的交集，也可以表示与设备或图像边界和窗口可见性关联的剪贴区。

@param x 要与剪贴区测试的矩形的 x 坐标
@param y 要与剪贴区测试的矩形的 y 坐标
@param width 要与剪贴区测试的矩形的宽度
@param height 要与剪贴区测试的矩形的高度
@return 如果指定的矩形与当前剪贴区边界相交，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle java.awt.Graphics.getClipBounds(Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前剪贴区域的边界矩形。该矩形内的坐标相对于此图形上下文的坐标系原点。此方法与 {@link #getClipBounds() getClipBounds} 不同，后者使用现有的矩形而不是分配一个新矩形。此方法引用用户剪贴区，用户剪贴区与设备边界和窗口可见性关联的剪贴区无关。如果以前未设置剪贴区，或者已使用 <code>setClip(null)</code> 清除了剪贴区，则此方法返回指定的 <code>Rectangle</code>。
@param  r    要将当前剪贴区域复制到的矩形。此矩形的所有当前值均被覆盖。
@return     当前剪贴区域的边界矩形。

<!-- END DATA -->
