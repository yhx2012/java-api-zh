<!-- BEGIN KEY -->
public abstract class java.awt.color.ColorSpace extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
此抽象类用做一个颜色空间标记，标识 Color 对象的特定颜色空间，或者通过 ColorModel 对象标识 Image、BufferedImage 或 GraphicsDevice 的特定颜色空间。此类包含了可将指定颜色空间中的颜色与 sRGB 和定义良好的 CIEXYZ 颜色空间中的颜色进行相互转换的方法。
 <p>
对于此类中的各个方法，颜色以颜色分量数组表示，颜色分量则是以每个 ColorSpace 定义的标准化范围中的 float 数表示。对于多数 ColorSpace（例如 sRGB）而言，此范围是 0.0 到 1.0。但是某些 ColorSpace 的颜色分量具有不同的范围值。此类提供了查询每个分量最小和最大标准化值的方法。
 <p>
定义了多个变量，用来表示颜色空间类型（如 TYPE_RGB、TYPE_XYZ 等等）和特定颜色空间（如 CS_sRGB 和 CS_CIEXYZ）。sRGB 指的是标准的 RGB 颜色空间。有关更多信息，请参阅 <A href="http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html">http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html</A>。
 <p>
提供对定义良好的 CIEXYZ 颜色空间相互转换的方法是为了支持在任意两个颜色空间之间进行高精确度的变换。用户期望 ColorSpace（如 ICC_ColorSpace）的特定子类实现能支持基于基础平台颜色管理系统的高性能变换。
 <p>
toCIEXYZ/fromCIEXYZ 方法使用的 CS_CIEXYZ 空间可以描述如下：
<pre>

&nbsp;     CIEXYZ
&nbsp;     观看照度：200 勒克斯
&nbsp;     观看白色点：CIE D50
&nbsp;     介质白色点：&ldquo;完全反射漫射面&rdquo;-- D50
&nbsp;     介质黑色点：0 勒克斯或 0 反射率
&nbsp;     流光：1％
&nbsp;     环绕：介质白色点的 20％
&nbsp;     介质说明：反射输出（例如，RLAB，Hunt 观看介质）
&nbsp;     注：对于要为此变换空间创建 ICC 配置文件的开发人员，可采用下列方法。使用简单的 Von Kries 适用模式将白色点放入 3X3 的矩阵参数中；将流光和环绕效果放入三个一维检索表中（假定每个表都使用了监视器最低限度的模型）。

</pre>

 <p>
@see ICC_ColorSpace
@version 10 Feb 1997

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_XYZ
<!-- END KEY -->
<!-- BEGIN DATA -->
XYZ 颜色空间的任意颜色系列。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_Lab
<!-- END KEY -->
<!-- BEGIN DATA -->
Lab 颜色空间的任意颜色系列。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_Luv
<!-- END KEY -->
<!-- BEGIN DATA -->
Luv 颜色空间的任意颜色系列。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_YCbCr
<!-- END KEY -->
<!-- BEGIN DATA -->
YCbCr 颜色空间的任意颜色系列。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_Yxy
<!-- END KEY -->
<!-- BEGIN DATA -->
Yxy 颜色空间的任意颜色系列。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_RGB
<!-- END KEY -->
<!-- BEGIN DATA -->
RGB 颜色空间的任意颜色系列。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_GRAY
<!-- END KEY -->
<!-- BEGIN DATA -->
GRAY 颜色空间的任意颜色系列。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_HSV
<!-- END KEY -->
<!-- BEGIN DATA -->
HSV 颜色空间的任意颜色系列。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_HLS
<!-- END KEY -->
<!-- BEGIN DATA -->
HLS 颜色空间的任意颜色系列。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_CMYK
<!-- END KEY -->
<!-- BEGIN DATA -->
CMYK 颜色空间的任意颜色系列。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_CMY
<!-- END KEY -->
<!-- BEGIN DATA -->
CMY 颜色空间的任意颜色系列。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_2CLR
<!-- END KEY -->
<!-- BEGIN DATA -->
Generic 2 分量颜色空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_3CLR
<!-- END KEY -->
<!-- BEGIN DATA -->
Generic 3 分量颜色空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_4CLR
<!-- END KEY -->
<!-- BEGIN DATA -->
Generic 4 分量颜色空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_5CLR
<!-- END KEY -->
<!-- BEGIN DATA -->
Generic 5 分量颜色空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_6CLR
<!-- END KEY -->
<!-- BEGIN DATA -->
Generic 6 分量颜色空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_7CLR
<!-- END KEY -->
<!-- BEGIN DATA -->
Generic 7 分量颜色空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_8CLR
<!-- END KEY -->
<!-- BEGIN DATA -->
Generic 8 分量颜色空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_9CLR
<!-- END KEY -->
<!-- BEGIN DATA -->
Generic 9 分量颜色空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_ACLR
<!-- END KEY -->
<!-- BEGIN DATA -->
Generic 10 分量颜色空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_BCLR
<!-- END KEY -->
<!-- BEGIN DATA -->
Generic 11 分量颜色空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_CCLR
<!-- END KEY -->
<!-- BEGIN DATA -->
Generic 12 分量颜色空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_DCLR
<!-- END KEY -->
<!-- BEGIN DATA -->
Generic 13 分量颜色空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_ECLR
<!-- END KEY -->
<!-- BEGIN DATA -->
Generic 14 分量颜色空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.TYPE_FCLR
<!-- END KEY -->
<!-- BEGIN DATA -->
Generic 15 分量颜色空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.CS_sRGB
<!-- END KEY -->
<!-- BEGIN DATA -->
sRGB 颜色空间的定义位于 <A href="http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html">http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html</A>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.CS_LINEAR_RGB
<!-- END KEY -->
<!-- BEGIN DATA -->
内置的线性 RGB 颜色空间。此空间基于与 CS_sRGB 相同的 RGB 原色，但是有一个线性色调再现曲线。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.CS_CIEXYZ
<!-- END KEY -->
<!-- BEGIN DATA -->
上面定义的 CIEXYZ 变换颜色空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.CS_PYCC
<!-- END KEY -->
<!-- BEGIN DATA -->
Photo YCC 变换颜色空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.color.ColorSpace.CS_GRAY
<!-- END KEY -->
<!-- BEGIN DATA -->
内置的线性灰度颜色空间。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.color.ColorSpace(int type, int numcomponents)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个给定颜色空间类型和分量数的 ColorSpace。
@param type <CODE>ColorSpace</CODE> 类型常量之一
@param numcomponents 颜色空间中的分量数

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.color.ColorSpace java.awt.color.ColorSpace.getInstance(int colorspace)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示特定于预定义颜色空间之一的 ColorSpace。
@param colorspace 由某个预定义的类常量标识的特定颜色空间（如 CS_sRGB、CS_LINEAR_RGB、CS_CIEXYZ、CS_GRAY 或 CS_PYCC）
@return 请求的 <CODE>ColorSpace</CODE> 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.color.ColorSpace.isCS_sRGB()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果 ColorSpace 是 CS_sRGB，则返回 true。
@return 如果这是一个 <CODE>CS_sRGB</CODE> 颜色空间，则返回 <CODE>true</CODE>；如果不是，则返回 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float[] java.awt.color.ColorSpace.toRGB(float[] colorvalue)
<!-- END KEY -->
<!-- BEGIN DATA -->
将假定为此 ColorSpace 中的颜色值转换成默认 CS_sRGB 颜色空间中的值。
 <p>
此方法使用可在输入和输出颜色之间生成最佳感知匹配的算法来转换颜色值。为了完成颜色值的色度变换，应该首先使用此颜色空间的 <code>toCIEXYZ</code> 方法将颜色值从输入颜色空间转换到 CS_CIEXYZ 颜色空间，然后使用 CS_sRGB 颜色空间的 <code>fromCIEXYZ</code> 方法将其从 CS_CIEXYZ 转换到输出颜色空间。有关更多信息，请参阅 {@link #toCIEXYZ(float[]) toCIEXYZ} 和 {@link #fromCIEXYZ(float[]) fromCIEXYZ}。
 <p>
@param colorvalue 一个长度至少为此 ColorSpace 中分量数的 float 数组
@return 一个长度为 3 的 float 数组
@throws ArrayIndexOutOfBoundsException 如果数组长度小于此 ColorSpace 中的分量数

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float[] java.awt.color.ColorSpace.fromRGB(float[] rgbvalue)
<!-- END KEY -->
<!-- BEGIN DATA -->
将假定为默认 CS_sRGB 颜色空间中的颜色值转换成此 ColorSpace 中的值。
 <p>
此方法使用可在输入和输出颜色之间生成最佳感知匹配的算法来转换颜色值。为了完成颜色值的色度变换，应该首先使用 CS_sRGB 颜色空间的 <code>toCIEXYZ</code> 方法将颜色值从输入颜色空间变换到 CS_CIEXYZ 颜色空间，然后使用此颜色空间的 <code>fromCIEXYZ</code> 方法将其从 CS_CIEXYZ 变换到输出颜色空间。有关更多信息，请参阅 {@link #toCIEXYZ(float[]) toCIEXYZ} 和 {@link #fromCIEXYZ(float[]) fromCIEXYZ}。
 <p>
@param rgbvalue 一个长度至少为 3 的 float 数组
@return 一个长度等于 ColorSpace 中分量数的 float 数组
@throws ArrayIndexOutOfBoundsException 如果数组长度小于 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float[] java.awt.color.ColorSpace.toCIEXYZ(float[] colorvalue)
<!-- END KEY -->
<!-- BEGIN DATA -->
将假定为此 ColorSpace 中的颜色值转换成 CS_CIEXYZ 变换颜色空间中的值。
 <p>
此方法使用相对色度来转换颜色值，由国际色彩联盟标准所定义。这意味着此方法所返回的 XYZ 值是用相对于 CS_CIEXYZ 颜色空间的 D50 白色点来表示的。这种表示方法在两步骤的颜色变换过程中是很有用的，即将输入颜色空间中的颜色转换为 CS_CIEXYZ，然后再转换为输出颜色空间中的颜色。此表示形式与使用色度计由给定颜色值所测量的 XYZ 值不同。计算使用当前 CIE 推荐的做法所测量的 XYZ 值还需要进一步的转换。有关更多信息，请参阅 <code>ICC_ColorSpace</code> 的 {@link ICC_ColorSpace#toCIEXYZ(float[]) toCIEXYZ} 方法。
 <p>
@param colorvalue 一个长度至少为此 ColorSpace 中分量数的 float 数组
@return 一个长度为 3 的 float 数组
@throws ArrayIndexOutOfBoundsException 如果数组长度小于此 ColorSpace 中的分量数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float[] java.awt.color.ColorSpace.fromCIEXYZ(float[] colorvalue)
<!-- END KEY -->
<!-- BEGIN DATA -->
将假定为 CS_CIEXYZ 变换颜色空间中的颜色值转换成此 ColorSpace 中的值。
 <p>
此方法使用相对色度来转换颜色值，由国际色彩联盟标准所定义。这意味着此方法所返回的 XYZ 参数值是用相对于 CS_CIEXYZ 颜色空间的 D50 白色点来表示的。这种表示方法在两步骤的颜色变换过程中是很有用的，即将输入颜色空间中的颜色转换为 CS_CIEXYZ，然后再转换为输出颜色空间中的颜色。此方法返回的颜色值与色度计测量时生成并传递给方法的 XYZ 值不同。如果 XYZ 值对应于使用当前 CIE 推荐的做法所测量的值，则在将其传递给此方法前必须将其转换成 D50 的相对值。有关更多信息，请参阅 <code>ICC_ColorSpace</code> 的 {@link ICC_ColorSpace#fromCIEXYZ(float[]) fromCIEXYZ} 方法。
 <p>
@param colorvalue 一个长度至少为 3 的 float 数组
@return 一个长度等于 ColorSpace 中分量数的 float 数组
@throws ArrayIndexOutOfBoundsException 如果数组长度小于 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.color.ColorSpace.getType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 ColorSpace 的颜色空间类型（例如 TYPE_RGB、TYPE_XYZ……）。类型定义了颜色空间的分量数和对它的解释，例如，TYPE_RGB 表示具有三个分量的颜色空间：红色、绿色和蓝色。它并不定义空间的特定颜色特征（如，原色的色度）。

@return 表示此 <CODE>ColorSpace</CODE> 类型的类型常量

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.color.ColorSpace.getNumComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 ColorSpace 的分量数。
@return 此 <CODE>ColorSpace</CODE> 中的分量数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.color.ColorSpace.getName(int idx)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定分量索引处的分量名称。

@param idx 分量索引
@return 指定索引处的分量名称
@throws IllegalArgumentException 如果 <code>idx</code> 小于 0 或者大于 (numComponents) - 1

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.color.ColorSpace.getMinValue(int component)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定分量的最小标准化颜色分量值。此抽象类的默认实现为所有分量返回 0.0。如有必要，子类应该重写此方法。

@param component 分量索引
@return 最小标准化分量值
@throws IllegalArgumentException 如果 component 小于 0 或者大于 (numComponents) - 1
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.color.ColorSpace.getMaxValue(int component)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定分量的最大标准化颜色分量值。此抽象类的默认实现为所有分量返回 1.0。如有必要，子类应该重写此方法。

@param component 分量索引
@return 最大标准化分量值
@throws IllegalArgumentException 如果 component 小于 0 或者大于 numComponents - 1
@since 1.4

<!-- END DATA -->
