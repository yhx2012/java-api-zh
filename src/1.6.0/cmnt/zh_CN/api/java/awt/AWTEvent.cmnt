<!-- BEGIN KEY -->
public abstract class java.awt.AWTEvent extends java.util.EventObject
<!-- END KEY -->
<!-- BEGIN DATA -->
所有 AWT 事件的根事件类。此类及其子类取代了原来的 java.awt.Event 类。此根 AWTEvent 类（在 java.awt.event 包的外部定义）的子类定义的事件 ID 值应该大于 RESERVED_ID_MAX 定义的值。
 <p>
Component 子类需要此子类中定义的事件掩码，它使用 Component.enableEvents() 来选择未被已注册侦听器选择的事件类型。如果在一个组件上注册了侦听器，则该组件已经在内部设置了适当的事件掩码。
 <p>
也使用该掩码来指定 AWTEventListener 应该侦听的事件类型。用按位或运算将该掩码集中起来，并传递给 Toolkit.addAWTEventListener。
 
@see Component#enableEvents
@see Toolkit#addAWTEventListener

@see java.awt.event.ActionEvent
@see java.awt.event.AdjustmentEvent
@see java.awt.event.ComponentEvent
@see java.awt.event.ContainerEvent
@see java.awt.event.FocusEvent
@see java.awt.event.InputMethodEvent
@see java.awt.event.InvocationEvent
@see java.awt.event.ItemEvent
@see java.awt.event.HierarchyEvent
@see java.awt.event.KeyEvent
@see java.awt.event.MouseEvent
@see java.awt.event.MouseWheelEvent
@see java.awt.event.PaintEvent
@see java.awt.event.TextEvent
@see java.awt.event.WindowEvent

@author Carl Quinn
@author Amy Fowler
@version 1.55 06/02/04
@since 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.AWTEvent.id
<!-- END KEY -->
<!-- BEGIN DATA -->
事件的 id。
@serial
@see #getID()
@see #AWTEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.awt.AWTEvent.consumed
<!-- END KEY -->
<!-- BEGIN DATA -->
在源处理了事件之后，控制是否将事件发送回同位体，false 表示将事件发送给同位体；true 则不发送。语义事件始终具有 'true' 值，因为它们由响应低级别事件的同位体生成。
@serial
@see #consume
@see #isConsumed

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.COMPONENT_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选择组件事件的事件掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.CONTAINER_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选择容器事件的事件掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.FOCUS_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选择焦点事件的事件掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.KEY_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选择键事件的事件掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.MOUSE_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选择鼠标事件的事件掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.MOUSE_MOTION_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选择鼠标动作事件的事件掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.WINDOW_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选择窗口事件的事件掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.ACTION_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选择操作事件的事件掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.ADJUSTMENT_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选择调整事件的事件掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.ITEM_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选择项事件的事件掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.TEXT_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选择文本事件的事件掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.INPUT_METHOD_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选择输入方法事件的事件掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.PAINT_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选择绘制事件的事件掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.INVOCATION_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选择调用事件的事件掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.HIERARCHY_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选择层次结构事件的事件掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选择层次结构边界事件的事件掩码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.MOUSE_WHEEL_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选择鼠标滚轮事件的事件掩码。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.WINDOW_STATE_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选择窗口状态事件的事件掩码。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.WINDOW_FOCUS_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
用于选择窗口焦点事件的事件掩码。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.AWTEvent.RESERVED_ID_MAX
<!-- END KEY -->
<!-- BEGIN DATA -->
保留的 AWT 事件 ID 的最大值。定义自己的事件 ID 的程序应该使用大于此值的 ID。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.AWTEvent(Event event)
<!-- END KEY -->
<!-- BEGIN DATA -->
从 1.0 样式的事件参数构造一个 AWTEvent 对象。
@param event 旧式的事件

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.AWTEvent(Object source, int id)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的源对象和类型构造一个 AWTEvent 对象。
@param source 产生该事件的对象
@id 事件类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.AWTEvent.setSource(Object newSource)
<!-- END KEY -->
<!-- BEGIN DATA -->
将事件的目标更改为新的源。此方法通常用于将事件的目标更改为最初的重量级源的轻量级子组件。
 <p>
只有事件目标子系统才能使用此方法，如客户机定义的 KeyboardFocusManager。一般的客户机不能使用。
@param newSource 指派事件的新对象
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.AWTEvent.getID()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回事件类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.AWTEvent.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.AWTEvent.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此 <code>Event</code> 状态的字符串。此方法仅在进行调试的时候使用，返回的字符串的内容和格式也根据不同的实现而不同。返回的字符串可以为空，但不可以为 <code>null</code>。
 
@return  此事件的字符串表示形式

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.AWTEvent.consume()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果能够使用此事件，则使用此事件。只能使用低级别的系统事件。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.awt.AWTEvent.isConsumed()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回是否已经使用了此事件。

<!-- END DATA -->
