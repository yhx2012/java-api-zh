<!-- BEGIN KEY -->
public class java.awt.FileDialog extends java.awt.Dialog
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>FileDialog</code> 类显示一个对话框窗口，用户可以从中选择文件。
 <p>
由于它是一个模式对话框，当应用程序调用其 <code>show</code> 方法来显示对话框时，它将阻塞其余应用程序，直到用户选择一个文件。

@see Window#show

@version 	1.53, 12/19/03
@author 	Sami Shaio
@author 	Arthur van Hoff
@since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.FileDialog.LOAD
<!-- END KEY -->
<!-- BEGIN DATA -->
此常量值指示文件对话框窗口的作用是查找要读取的文件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.FileDialog.SAVE
<!-- END KEY -->
<!-- BEGIN DATA -->
此常量值指示文件对话框窗口的作用是查找要写入的文件。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FileDialog(Frame parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个文件对话框，用于加载文件。文件对话框的标题最初是空的。这是 <code>FileDialog(parent, &quot;&quot;, LOAD)</code> 的一个便捷方法。

@param parent 对话框的所有者
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FileDialog(Frame parent, String title)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定标题的文件对话框窗口，用于加载文件。显示的文件是当前目录中的文件。这是 <code>FileDialog(parent, title, LOAD)</code> 的一个便捷方法。

@param     parent   对话框的所有者
@param     title    对话框的标题

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FileDialog(Frame parent, String title, int mode)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定标题的文件对话框窗口，用于加载或保存文件。
 <p>
如果 <code>mode</code> 的值为 <code>LOAD</code>，那么文件对话框将查找要读取的文件，所显示的文件是当前目录中的文件。如果 <code>mode</code> 的值为 <code>SAVE</code>，则文件对话框将查找要写入文件的位置。

@param     parent   对话框的所有者
@param     title   对话框的标题
@param     mode   对话框的模式，可以是 <code>FileDialog.LOAD</code> 或 <code>FileDialog.SAVE</code>
@exception  IllegalArgumentException 如果提供了非法的文件对话框模式
@see       java.awt.FileDialog#LOAD
@see       java.awt.FileDialog#SAVE

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FileDialog(Dialog parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个文件对话框，用于加载文件。文件对话框的标题最初是空的。这是 <code>FileDialog(parent, &quot;&quot;, LOAD)</code> 的一个便捷方法。

@param     parent   对话框的所有者
@exception java.lang.IllegalArgumentException 如果 <code>parent</code> 的 <code>GraphicsConfiguration</code> 不是来自屏幕设备；
@exception java.lang.IllegalArgumentException 如果 <code>parent</code> 为 <code>null</code>；当 <code>GraphicsEnvironment.isHeadless</code> 返回 <code>true</code> 时始终抛出此异常
@see java.awt.GraphicsEnvironment#isHeadless
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FileDialog(Dialog parent, String title)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定标题的文件对话框，用于加载文件。显示的文件是当前目录中的文件。这是 <code>FileDialog(parent, title, LOAD)</code> 的一个便捷方法。

@param     parent   对话框的所有者
@param     title    对话框的标题；接受 <code>null</code> 值时不会抛出 <code>NullPointerException</code>
@exception java.lang.IllegalArgumentException 如果 <code>parent</code> 的 <code>GraphicsConfiguration</code> 不是来自屏幕设备；
@exception java.lang.IllegalArgumentException 如果 <code>parent</code> 为 <code>null</code>；当 <code>GraphicsEnvironment.isHeadless</code> 返回 <code>true</code> 时始终抛出此异常
@see java.awt.GraphicsEnvironment#isHeadless
@since     1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FileDialog(Dialog parent, String title, int mode)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定标题的文件对话框窗口，用于加载或保存文件。
 <p>
如果 <code>mode</code> 的值为 <code>LOAD</code>，那么文件对话框将查找要读取的文件，所显示的文件是当前目录中的文件。如果 <code>mode</code> 的值为 <code>SAVE</code>，则文件对话框将查找要写入文件的位置。

@param     parent   对话框的所有者
@param     title    对话框的标题；接受 <code>null</code> 值时不会抛出 <code>NullPointerException</code>
@param     mode     对话框的模式，<code>FileDialog.LOAD</code> 或 <code>FileDialog.SAVE</code>
@exception java.lang.IllegalArgumentException 如果提供了非法的文件对话框模式；
@exception java.lang.IllegalArgumentException 如果 <code>parent</code> 的 <code>GraphicsConfiguration</code> 不是来自屏幕设备；
@exception java.lang.IllegalArgumentException 如果 <code>parent</code> 为 <code>null</code>；当 <code>GraphicsEnvironment.isHeadless</code> 返回 <code>true</code> 时始终抛出此异常
@see       java.awt.GraphicsEnvironment#isHeadless
@see       java.awt.FileDialog#LOAD
@see       java.awt.FileDialog#SAVE
@since     1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FileDialog.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建文件对话框的同位体。同位体允许我们更改文件对话框的外观而不更改其功能。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FileDialog.getMode()
<!-- END KEY -->
<!-- BEGIN DATA -->
指示此文件对话框是用于从文件加载内容还是将内容保存到文件。

@return   文件对话框窗口的模式，可以是 <code>FileDialog.LOAD</code> 或 <code>FileDialog.SAVE</code>
@see      java.awt.FileDialog#LOAD
@see      java.awt.FileDialog#SAVE
@see      java.awt.FileDialog#setMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FileDialog.setMode(int mode)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置文件对话框的模式。如果 <code>mode</code> 不是一个合法值，则抛出一个异常，并且不设置 <code>mode</code>。

@param      mode  文件对话框的模式，可以是 <code>FileDialog.LOAD</code> 或 <code>FileDialog.SAVE</code>
@see        java.awt.FileDialog#LOAD
@see        java.awt.FileDialog#SAVE
@see        java.awt.FileDialog#getMode
@exception  IllegalArgumentException 如果提供了非法的文件对话框模式
@since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.FileDialog.getDirectory()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此文件对话框的目录。

@return  此 <code>FileDialog</code> 的目录（可能为 <code>null</code> 或无效）
@see     java.awt.FileDialog#setDirectory

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FileDialog.setDirectory(String dir)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此文件对话框窗口的目录设置为指定目录。指定 <code>null</code> 或无效目录意味着指定由实现所定义的默认值。但是，在用户选择一个文件之前，此默认值不会被实现。在此之前，<code>getDirectory()</code> 将返回传递到此方法的值。
 <p>
指定 &quot;&quot; 作为目录，完全等同于指定 <code>null</code> 作为目录。

@param     dir   指定的目录
@see       java.awt.FileDialog#getDirectory

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.FileDialog.getFile()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此文件对话框的选定文件。如果用户选择 <code>CANCEL</code>，则返回文件为 <code>null</code>。

@return    此文件对话框窗口当前所选择的文件；如果没有文件被选择，则返回 <code>null</code>
@see       java.awt.FileDialog#setFile

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FileDialog.setFile(String file)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此文件对话框窗口的选定文件设置为指定文件。如果这么设置，那么在文件对话框窗口第一次显示之前，此文件就成为默认文件。
 <p>
指定 &quot;&quot; 作为文件，完全等同于指定 <code>null</code> 作为文件。

@param    file   正被设置的文件 set
@see      java.awt.FileDialog#getFile

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.FilenameFilter java.awt.FileDialog.getFilenameFilter()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此文件对话框的文件名过滤器。文件名过滤器允许用户指定哪个文件出现在文件对话框窗口。Microsoft Windows 的文件名过滤器在 Sun 的参考实现中不起作用。

@return    此文件对话框的文件名过滤器
@see       java.io.FilenameFilter
@see       java.awt.FileDialog#setFilenameFilter

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.FileDialog.setFilenameFilter(FilenameFilter filter)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此文件对话框窗口的文件名过滤器设置为指定的过滤器。Microsoft Windows 的文件名过滤器在 Sun 的参考实现中不起作用。

@param   filter   指定的过滤器
@see     java.io.FilenameFilter
@see     java.awt.FileDialog#getFilenameFilter

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.awt.FileDialog.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示此 <code>FileDialog</code> 窗口状态的字符串。此方法仅在进行调试的时候使用，对于不同的实现，返回的字符串的内容和格式可能有所不同。返回的字符串可能为空，但不可能为 <code>null</code>。

@return  此文件对话框窗口的参数字符串

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.FileDialog.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

读取 <code>ObjectInputStream</code>，并执行向后兼容检查，将 <code>dir</code> 或等于空字符串的 <code>file</code> 转换为 <code>null</code>。

@param s 要读取的 <code>ObjectInputStream</code>

<!-- END DATA -->
