<!-- BEGIN KEY -->
public interface java.rmi.server.ServerRef extends java.rmi.server.RemoteRef
<!-- END KEY -->
<!-- BEGIN DATA -->
ServerRef 表示远程对象实现的服务器端句柄。

@version 1.16, 12/19/03
@author  Ann Wollrath
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.rmi.server.ServerRef.serialVersionUID
<!-- END KEY -->
<!-- BEGIN DATA -->
指示与类的 JDK 1.1.x 版本的兼容性。
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.server.RemoteStub java.rmi.server.ServerRef.exportObject(Remote obj, Object data) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->

为提供的 Remote 对象创建客户机 stub 对象。如果调用成功完成，则远程对象应该能够接受从客户机传入的调用。
@param obj 远程对象实现
@param data 导出该对象需要的信息
@return 远程对象的 stub
@exception RemoteException 如果试图导出对象时发生异常（如无法找到 stub 类）
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.rmi.server.ServerRef.getClientHost() throws java.rmi.server.ServerNotActiveException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前客户机的主机名。当从主动处理远程方法调用的线程调用时，将返回客户机的主机名。
@return 客户机的主机名
@exception ServerNotActiveException 如果在服务于远程方法调用之外调用
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.Externalizable.readExternal(ObjectInput in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
对象实现 readExternal 方法来恢复其内容，它通过调用 DataInput 的方法来恢复其基础类型，调用 readObject 来恢复对象、字符串和数组。readExternal 方法必须按照与 writeExternal 方法写入值时使用的相同顺序和类型来读取这些值。

@param in 为了恢复对象而从中读取数据的流
@exception IOException 如果发生 I/O 错误
@exception ClassNotFoundException 如果无法找到需要恢复的某个对象的类。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.Externalizable.writeExternal(ObjectOutput out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
该对象可实现 writeExternal 方法来保存其内容，它可以通过调用 DataOutput 的方法来保存其基本值，或调用 ObjectOutput 的 writeObject 方法来保存对象、字符串和数组。

@serialData 重写方法时应使用该标记来描述此 Externalizable 对象的数据布局。列出元素类型的顺序，如有可能，将元素与某一公共/受保护字段和/或此 Externalizable 类的方法相关联。

@param out 要写入对象的流
@exception IOException 包含可能发生的所有 I/O 异常

<!-- END DATA -->
