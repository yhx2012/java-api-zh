<!-- BEGIN KEY -->
public abstract class java.rmi.server.RMIClassLoaderSpi extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>RMIClassLoaderSpi</code> 是 <code>RMIClassLoader</code> 的服务提供者接口。尤其是，<code>RMIClassLoaderSpi</code> 接口提供 <code>RMIClassLoader</code> 的以下静态方法的实现：

 <ul>

 <li>{@link RMIClassLoader#loadClass(URL,String)}
 <li>{@link RMIClassLoader#loadClass(String,String)}
 <li>{@link RMIClassLoader#loadClass(String,String,ClassLoader)}
 <li>{@link RMIClassLoader#loadProxyClass(String,String[],ClassLoader)}
 <li>{@link RMIClassLoader#getClassLoader(String)}
 <li>{@link RMIClassLoader#getClassAnnotation(Class)}

 </ul>

当调用这些方法之一时，其行为是向此类的实例委托相应的方法。有关每个方法如何委托给提供者实例的详细信息，在各自特定方法的文档中进行了描述。有关如何选择提供者实例的描述，请参阅 {@link RMIClassLoader} 文档。

@version	1.14, 04/05/05
@author	Peter Jones
@author	Laird Dornin
@see		RMIClassLoader
@since	1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.Class<?> java.rmi.server.RMIClassLoaderSpi.loadClass(String codebase, String name, ClassLoader defaultLoader) throws java.net.MalformedURLException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
提供 {@link RMIClassLoader#loadClass(URL,String)}、{@link RMIClassLoader#loadClass(String,String)} 和 {@link RMIClassLoader#loadClass(String,String,ClassLoader)} 的实现。选用提供的加载程序，从代码基 URL 路径加载某个类。

通常，提供者实现将试图先使用给定的 <code>defaultLoader</code>（如果指定）解析指定的类，然后才试图从代码基 URL 路径解析该类。

<p>此方法的实现必须返回具有给定名称的一个类，或抛出异常。

@param	codebase  要从其加载类的 URL 的列表（由空格分隔），或者为 <code>null</code>

@param	name  要加载的类名称

@param	defaultLoader  要使用的其他上下文类加载器，或 <code>null</code>

@return	表示加载的类的 <code>Class</code> 对象

@throws	MalformedURLException 如果 <code>codebase</code> 为非 <code>null</code> 且包含一个无效 URL，或者如果 <code>codebase</code> 为 <code>null</code> 且用于加载类的特定于提供者的 URL 无效。

@throws	ClassNotFoundException 如果在指定位置无法找到该类的定义

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.Class<?> java.rmi.server.RMIClassLoaderSpi.loadProxyClass(String codebase, java.lang.String[] interfaces, ClassLoader defaultLoader) throws java.net.MalformedURLException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
提供 {@link RMIClassLoader#loadProxyClass(String,String[],ClassLoader)} 的实现。选用提供的加载器，从代码基 URL 路径加载实现一组具有给定名称接口集的动态代理类（请参阅 {@link java.lang.reflect.Proxy}）。
 
<p>此方法的实现必须能返回一个实现指定接口的代理类，或抛出异常。

@param	codebase 要从其加载类的 URL 列表（由空格分隔），或 <code>null</code>

@param	interfaces  要实现的代理类的接口名称

@return	实现指定接口的动态代理类

@param	defaultLoader  要使用的其他上下文类加载器，或 <code>null</code>

@throws	MalformedURLException 如果 <code>codebase</code> 为非 <code>null</code> 且包含一个无效 URL，或者如果 <code>codebase</code> 为 <code>null</code> 且用于加载类的特定于提供者的 URL 无效。

@throws	ClassNotFoundException 如果在指定位置无法找到某个指定接口的定义，或者如果动态代理类的创建失败（例如，如果 {@link java.lang.reflect.Proxy#getProxyClass(ClassLoader,Class[])} 抛出给定接口列表的 <code>IllegalArgumentException</code>）

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.ClassLoader java.rmi.server.RMIClassLoaderSpi.getClassLoader(String codebase) throws java.net.MalformedURLException
<!-- END KEY -->
<!-- BEGIN DATA -->
提供 {@link RMIClassLoader#getClassLoader(String)} 的实现。返回从给定代码基 URL 路径加载类的类加载器。

<p>如果存在安全管理器，则使用 <code>RuntimePermission(&quot;getClassLoader&quot;)</code> 权限调用其 <code>checkPermission</code> 方法；这会导致 <code>SecurityException</code>。此方法的实现还可以执行进一步的安全检查，以验证调用上下文是否具有连接到代码基 URL 路径中的所有 URL 的权限。

@param	codebase 返回的类加载器将从其加载类的 URL 列表（由空格分隔），或 <code>null</code>

@return 从给定代码基 URL 路径加载类的类加载器

@throws	MalformedURLException 如果 <code>codebase</code> 为非 <code>null</code> 且包含一个无效 URL，或者如果 <code>codebase</code> 为 <code>null</code> 且用于标识类加载器的特定于提供者的 URL 无效

@throws	SecurityException 如果存在安全管理器且其 <code>checkPermission</code> 方法的调用失败，或者如果调用方没有连接到代码基 URL 路径中所有 URL 的权限

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String java.rmi.server.RMIClassLoaderSpi.getClassAnnotation(java.lang.Class<?> cl)
<!-- END KEY -->
<!-- BEGIN DATA -->
提供 {@link RMIClassLoader#getClassAnnotation(Class)} 的实现。返回表示类定义位置的注释字符串，RMI 将在编组给定类的对象时用其注释类描述符。

@param	cl  要获得其注释的类

@return	在编组时用于注释给定类的字符串，或 <code>null</code>

@throws	NullPointerException 如果 <code>cl</code> 为 <code>null</code>

<!-- END DATA -->
