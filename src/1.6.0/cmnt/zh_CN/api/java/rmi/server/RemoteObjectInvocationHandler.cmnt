<!-- BEGIN KEY -->
public class java.rmi.server.RemoteObjectInvocationHandler extends java.rmi.server.RemoteObject implements java.lang.reflect.InvocationHandler
<!-- END KEY -->
<!-- BEGIN DATA -->
与 Java Remote Method Invocation（Java 远程方法调用，即 Java RMI）一起使用的 <code>InvocationHandler</code> 接口的实现。此调用处理程序可以与取代预生成 stub 类的动态代理实例一起使用。

<p>不期望应用程序直接使用此类。使用具有 {@link UnicastRemoteObject} 或 {@link Activatable} 的动态代理导出的远程对象将此类的实例作为该代理的调用处理程序。

@version 1.3, 03/12/19
@author  Ann Wollrath
@since   1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.server.RemoteObjectInvocationHandler(RemoteRef ref)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个用指定 <code>RemoteRef</code> 构造的新 <code>RemoteObjectInvocationHandler</code>。

@param ref  远程引用

@throws NullPointerException 如果 <code>ref</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.rmi.server.RemoteObjectInvocationHandler.invoke(Object proxy, Method method, java.lang.Object[] args) throws java.lang.Throwable
<!-- END KEY -->
<!-- BEGIN DATA -->
处理在封装的代理实例 <code>proxy</code> 上进行的方法调用并返回结果。

<p><code>RemoteObjectInvocationHandler</code> 按以下方式实现此方法：

<p>如果 <code>method</code> 为以下方法之一，则按下面描述的方式处理：

 <ul>

 <li>{@link Object#hashCode Object.hashCode}: 返回该代理的哈希码值。

 <li>{@link Object#equals Object.equals}: 如果参数 (<code>args[0]</code>) 是动态代理类的一个实例，且此调用处理程序等于该参数的调用处理程序，则返回 <code>true</code>；否则返回 <code>false</code>。

 <li>{@link Object#toString Object.toString}: 返回该代理的字符串表示形式。
 </ul>

<p>否则，按以下方式进行远程调用：

 <ul>
<li>如果 <code>proxy</code> 不是接口 {@link Remote} 的实例，则抛出 {@link IllegalArgumentException}。

<li>否则，在此调用处理程序的 <code>RemoteRef</code> 上调用 {@link RemoteRef#invoke invoke} 方法，传递 <code>proxy</code>、<code>method</code>、<code>args</code> 和 <code>method</code> 的哈希码值（在&ldquo;Java Remote Method Invocation (RMI) 规范&rdquo;的 section 8.3 中定义）并返回结果。

<li>如果 <code>RemoteRef.invoke</code> 抛出异常，且该异常是一个经检查的异常，不能指派给由 <code>proxy</code> 类实现的方法的 <code>throws</code> 子句中的任何异常，则该异常在 {@link UnexpectedException} 中包装且抛出该包装的异常。否则，由此方法抛出的 <code>invoke</code> 抛出该异常。
 </ul>

<p>如果包含此调用处理程序的某个有效动态代理类的实例尚未生成参数，则此方法的语义是不确定的。

@param proxy 在其上调用方法的代理实例
@param method 与在代理实例上调用的接口方法相对应的 <code>Method</code> 实例
@param args 包含传入到代理实例上方法调用的参数值的对象数组；如果该方法不用参数，则为 <code>null</code>
@return 要从代理实例上的方法调用返回的值
@throws	Throwable 从代理实例上的方法调用抛出的异常
@see

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.rmi.server.RemoteObjectInvocationHandler.readObjectNoData() throws java.io.InvalidObjectException
<!-- END KEY -->
<!-- BEGIN DATA -->
@throws InvalidObjectException 无条件抛出

<!-- END DATA -->
