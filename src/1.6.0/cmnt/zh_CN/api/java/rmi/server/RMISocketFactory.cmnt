<!-- BEGIN KEY -->
public abstract class java.rmi.server.RMISocketFactory extends java.lang.Object implements java.rmi.server.RMIClientSocketFactory, java.rmi.server.RMIServerSocketFactory
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>RMISocketFactory</code> 实例由 RMI 运行时使用，以便获得 RMI 调用所需的客户机和服务器套接字。应用程序可以使用 <code>setSocketFactory</code> 方法来请求 RMI 运行时使用其套接字工厂实例而不是使用默认的实现。<p>

所用的默认套接字工厂实现通过三层方法来创建客户机套接字。首先，尝试进行到远程 VM 的直接套接字连接。如果该操作失败（因防火墙的问题），则运行时使用具有服务器显式端口号的 HTTP。如果防火墙不允许此类型的通信，则服务器上的 cgi-bin 脚本的 HTTP 用于 POST（发送）该 RMI 调用。<p>

@version 1.21, 12/19/03
@author  Ann Wollrath
@author  Peter Jones
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.server.RMISocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>RMISocketFactory</code>。
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.net.Socket java.rmi.server.RMISocketFactory.createSocket(String host, int port) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建连接到指定主机和端口的客户机套接字。
@param  host   主机名
@param  port   端口号
@return 连接到指定主机和端口的套接字。
@exception  IOException 如果套接字创建过程中发生 I/O 错误
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.net.ServerSocket java.rmi.server.RMISocketFactory.createServerSocket(int port) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
在指定端口上（端口 0 指示匿名端口）创建服务器套接字。
@param  port 端口号
@return 指定端口上的服务器套接字
@exception IOException 如果在服务器套接字创建过程中发生 I/O 错误
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized void java.rmi.server.RMISocketFactory.setSocketFactory(RMISocketFactory fac) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置 RMI 从中获取套接字的全局套接字工厂（如果远程对象与指定客户机和/或服务器套接字工厂无关）。RMI 套接字工厂只能设置一次。注：RMISocketFactory 只有在当前安全管理器允许设置套接字工厂的情况下设置；如果不允许，则抛出 SecurityException。
@param fac  套接字工厂
@exception IOException 如果已经设置 RMI 套接字工厂
@exception  SecurityException 如果安全管理器存在并且其 <code>checkPermission</code> 方法不允许进行此操作。
@see #getSocketFactory
@see java.lang.SecurityManager#checkSetFactory()
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.rmi.server.RMISocketFactory java.rmi.server.RMISocketFactory.getSocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由 <code>setSocketFactory</code> 方法设置的套接字工厂。如果尚未设置套接字工厂，则返回 <code>null</code>。
@return  套接字工厂
@see #setSocketFactory(RMISocketFactory)
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.rmi.server.RMISocketFactory java.rmi.server.RMISocketFactory.getDefaultSocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对此 RMI 实现使用的默认套接字工厂的引用。这将是在 <code>getSocketFactory</code> 返回 <code>null</code> 时由 RMI 运行时使用的工厂。
@return 默认的 RMI 套接字工厂
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized void java.rmi.server.RMISocketFactory.setFailureHandler(RMIFailureHandler fh)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果服务器套接字创建失败，则设置将由 RMI 运行时调用的 failure 处理程序。默认情况下，如果没有安装故障处理程序且服务器套接字创建失败，则 RMI 运行时就尝试重新创建服务器套接字。

<p>如果有安全管理器，则此方法首先调用安全管理器的 <code>checkSetFactory</code> 方法，以确保允许进行此操作。这可能会导致 <code>SecurityException</code>。

@param fh  failure 处理程序
@throws SecurityException 如果安全管理器存在并且其 <code>checkSetFactory</code> 方法不允许进行此操作。
@see #getFailureHandler
@see java.rmi.server.RMIFailureHandler#failure(Exception)
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.rmi.server.RMIFailureHandler java.rmi.server.RMISocketFactory.getFailureHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回由 <code>setFailureHandler</code> 方法设置的套接字创建失败的处理程序。
@param  failure 处理程序
@see #setFailureHandler(RMIFailureHandler)
@since JDK1.1

<!-- END DATA -->
