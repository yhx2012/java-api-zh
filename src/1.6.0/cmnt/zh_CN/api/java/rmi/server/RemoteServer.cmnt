<!-- BEGIN KEY -->
public abstract class java.rmi.server.RemoteServer extends java.rmi.server.RemoteObject
<!-- END KEY -->
<!-- BEGIN DATA -->
该 <code>RemoteServer</code> 类是服务器实现的公共超类，并提供支持大量远程引用语义的框架。需要特别指出的是，创建和导出远程对象所需的功能（即使其远程可用）理论上由 <code>RemoteServer</code> 提供，具体由其子类提供。

@version 1.32, 12/19/03
@author  Ann Wollrath
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.rmi.server.RemoteServer()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>RemoteServer</code>。
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.rmi.server.RemoteServer(RemoteRef ref)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带指定引用类型的 <code>RemoteServer</code>。

@param ref 远程引用
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.rmi.server.RemoteServer.getClientHost() throws java.rmi.server.ServerNotActiveException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一个客户机主机的字符串表示形式，用于在当前线程中正在处理的远程方法调用。

@return	远程客户机主机的字符串表示形式

@throws	ServerNotActiveException 如果在当前线程中没有处理远程方法调用

@since	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.rmi.server.RemoteServer.setLog(OutputStream out)
<!-- END KEY -->
<!-- BEGIN DATA -->
将 RMI 调用记录到输出流 <code>out</code> 中。如果 <code>out</code> 为 <code>null</code>，则关闭调用日志记录。

<p>如果存在安全管理器，则其 <code>checkPermission</code> 方法将用 <code>java.util.logging.LoggingPermission(&quot;control&quot;)</code> 权限调用；这可能会导致 <code>SecurityException</code>。

@param	out 应该将 RMI 调用记录到其中的输出流
@throws	SecurityException  如果存在安全管理器且其 <code>checkPermission</code> 方法的调用失败
@see #getLog
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.io.PrintStream java.rmi.server.RemoteServer.getLog()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用于 RMI 调用日志的流。
@return 调用日志
@see #setLog
@since JDK1.1

<!-- END DATA -->
