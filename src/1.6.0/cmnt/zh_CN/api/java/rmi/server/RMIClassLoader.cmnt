<!-- BEGIN KEY -->
public class java.rmi.server.RMIClassLoader extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>RMIClassLoader</code> 包含支持用 RMI 进行动态类加载的静态方法。包含从网络位置（一个或多个 URL）加载类和获取远程方应从其加载现有类的位置的方法。这些方法由 RMI 运行库在编组和解组参数中包含的类时使用，将返回远程方法调用的值，并且还可以由应用程序直接调用，以模仿 RMI 的动态类加载行为。

<p>以下静态方法的实现

 <ul>

 <li>{@link #loadClass(URL,String)}
 <li>{@link #loadClass(String,String)}
 <li>{@link #loadClass(String,String,ClassLoader)}
 <li>{@link #loadProxyClass(String,String[],ClassLoader)}
 <li>{@link #getClassLoader(String)}
 <li>{@link #getClassAnnotation(Class)}

 </ul>

由这些方法的服务提供者接口 {@link RMIClassLoaderSpi} 的实例提供。当调用这些方法之一时，其行为是向服务提供者实例委托相应的方法。有关每个方法如何委托给提供者实例的详细信息，在各自特定方法的文档中进行了描述。

<p>服务提供者实例按以下方式选择：

 <ul>

<li>如果定义了系统属性 <code>java.rmi.server.RMIClassLoaderSpi</code>，则其值等于字符串 <code>&quot;default&quot;</code> 时，提供者实例将是调用 {@link #getDefaultProviderInstance()} 方法返回的值；对于任何其他值，如果可以通过系统类加载器（请参阅 {@link ClassLoader#getSystemClassLoader}）加载用属性值命名的类，并且该类可以分配给 {@link RMIClassLoaderSpi} 且具有一个公共无参数的构造方法，则调用构造方法来创建提供者实例。如果定义了属性，但这些条件的所有其他项都不为 true，则向尝试使用 <code>RMIClassLoader</code> 的代码抛出一个不确定的 <code>Error</code>，以指示获取提供者实例失败。

<li>如果名为 <code>META-INF/services/java.rmi.server.RMIClassLoaderSpi</code> 的资源对于系统类加载器来说是可见的，则将该资源的内容解释为提供者配置文件，并将在该文件中指定的第一个类名称用作提供者类名称。如果可以通过系统类加载器加载具有该名称的类，并且该类可分配给 {@link RMIClassLoaderSpi} 且有一个公共无参数的构造方法，则调用该构造方法以创建提供者实例。如果找到了资源，但无法按描述的方式实例化提供者，则向尝试使用 <code>RMIClassLoader</code> 的代码抛出一个不确定的 <code>Error</code>，以指示未成功获得提供者实例。

<li>否则，提供者实例将是通过调用 {@link #getDefaultProviderInstance()} 方法返回的值。

 </ul>

@version	1.40, 04/05/18
@author	Ann Wollrath
@author	Peter Jones
@author	Laird Dornin
@see		RMIClassLoaderSpi
@since	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Class<?> java.rmi.server.RMIClassLoader.loadClass(String name) throws java.net.MalformedURLException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
加载具有指定 <code>name</code> 的类。

<p>此方法委托给 {@link #loadClass(String,String)}，将 <code>null</code> 作为第一个参数，将 <code>name</code> 作为第二个参数进行传递。

@param	name 要加载的类的名称

@return	表示加载的类的 <code>Class</code> 对象

@throws MalformedURLException 如果用于加载类的特定于提供者的 URL 无效

@throws	ClassNotFoundException 如果在基本代码基无法找到该类的定义

@deprecated 由 <code>loadClass(String,String)</code> 方法取代
@see #loadClass(String,String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Class<?> java.rmi.server.RMIClassLoader.loadClass(URL codebase, String name) throws java.net.MalformedURLException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从基本代码 URL 加载类。

如果 <code>codebase</code> 为 <code>null</code>，则此方法将与具有 <code>null</code>、<code>codebase</code> 和给定类名的 {@link #loadClass(String,String)} 行为相同。

<p>此方法委托给提供者实例的 {@link RMIClassLoaderSpi#loadClass(String,String,ClassLoader)} 方法，将在给定 URL 上调用 {@link URL#toString} 的结果（或者如果 <code>codebase</code> 为 null，则为 <code>null</code>）作为第一个参数、<code>name</code> 为第二个参数和 <code>null</code> 为第三个参数进行传递。

@param	codebase 要从其加载类的 URL，或 <code>null</code>

@param	name 要加载的类的名称

@return	表示加载的类的 <code>Class</code> 对象

@throws MalformedURLException 如果 <code>codebase</code> 为 <code>null</code> 且用于加载类的特定于提供者的 URL 无效

@throws	ClassNotFoundException 如果在指定 URL 无法找到该类的定义

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Class<?> java.rmi.server.RMIClassLoader.loadClass(String codebase, String name) throws java.net.MalformedURLException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从基本代码 URL 路径加载类。
<p>此方法委托给提供者实例的 {@link RMIClassLoaderSpi#loadClass(String,String,ClassLoader)} 方法，将 <code>codebase</code> 作为第一个参数、<code>name</code> 为第二个参数和 <code>null</code> 为第三个参数进行传递。

@param	codebase  要从其加载类的 URL 的列表（由空格分隔），或者为 <code>null</code>

@param	name 要加载的类的名称

@return	表示加载的类的 <code>Class</code> 对象

@throws MalformedURLException 如果 <code>codebase</code> 为非 <code>null</code> 且包含一个无效 URL，或者如果 <code>codebase</code> 为 <code>null</code> 且用于加载类的特定于提供者的 URL 无效。

@throws	ClassNotFoundException 如果在指定位置无法找到该类的定义

@since	1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Class<?> java.rmi.server.RMIClassLoader.loadClass(String codebase, String name, ClassLoader defaultLoader) throws java.net.MalformedURLException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
有选择地使用提供的加载器从基本代码 URL 路径加载类。当调用方想让要考虑的其他上下文类加载器（如堆栈上的调用方加载器）可用于提供者实现时应该使用此方法。通常，提供者实现将试图先使用给定的 <code>defaultLoader</code>（如果指定）解析指定的类，然后才试图从代码基 URL 路径解析该类。

<p>此方法委托给提供者实例的 {@link RMIClassLoaderSpi#loadClass(String,String,ClassLoader)} 方法，将 <code>codebase</code> 作为第一个参数、<code>name</code> 为第二个参数和 <code>defaultLoader</code> 为第三个参数进行传递。

@param	codebase  要从其加载类的 URL 的列表（由空格分隔），或者为 <code>null</code>

@param	name 要加载的类的名称

@param	defaultLoader  要使用的其他上下文类加载器，或 <code>null</code>

@return  表示加载的类的 <code>Class</code> 对象

@throws MalformedURLException 如果 <code>codebase</code> 为非 <code>null</code> 且包含一个无效 URL，或者如果 <code>codebase</code> 为 <code>null</code> 且用于加载类的特定于提供者的 URL 无效。

@throws	ClassNotFoundException 如果在指定位置无法找到该类的定义

@since	1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Class<?> java.rmi.server.RMIClassLoader.loadProxyClass(String codebase, java.lang.String[] interfaces, ClassLoader defaultLoader) throws java.lang.ClassNotFoundException, java.net.MalformedURLException
<!-- END KEY -->
<!-- BEGIN DATA -->
从基本代码 URL 路径加载一个实现一组具有给定名称的接口的动态代理类（请参阅 {@link java.lang.reflect.Proxy}）。

<p>将解析的接口类似于通过使用给定 <code>codebase</code> 的 {@link #loadClass(String,String)} 方法加载的类。

<p>此方法委托给提供者实例的 {@link RMIClassLoaderSpi#loadProxyClass(String,String[],ClassLoader)} 方法，将 <code>codebase</code> 作为第一个参数、<code>interfaces</code> 为第二个参数和 <code>defaultLoader</code> 为第三个参数进行传递。

@param	codebase 要从其加载类的 URL 列表（由空格分隔），或 <code>null</code>

@param	interfaces  要实现的代理类的接口名称

@param	defaultLoader  要使用的其他上下文类加载器，或 <code>null</code>

@return	实现指定接口的动态代理类

@throws MalformedURLException 如果 <code>codebase</code> 为非 <code>null</code> 且包含一个无效 URL，或者如果 <code>codebase</code> 为 <code>null</code> 且用于加载类的特定于提供者的 URL 无效。

@throws	ClassNotFoundException 如果在指定位置无法找到某个指定接口的定义，或者如果动态代理类的创建失败（例如，如果 {@link java.lang.reflect.Proxy#getProxyClass(ClassLoader,Class[])} 抛出给定接口列表的 <code>IllegalArgumentException</code>）

@since	1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.ClassLoader java.rmi.server.RMIClassLoader.getClassLoader(String codebase) throws java.net.MalformedURLException, java.lang.SecurityException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从给定的基本代码 URL 路径加载类的类加载器。

<p>返回的类加载器是 {@link #loadClass(String,String)} 方法将用来加载相同 <code>codebase</code> 参数的类的类加载器。
 
<p>此方法委托给提供者实例的 {@link RMIClassLoaderSpi#getClassLoader(String)} 方法，将 <code>codebase</code> 作为第一个参数进行传递。

<p>如果存在安全管理器，则使用 <code>RuntimePermission(&quot;getClassLoader&quot;)</code> 权限调用其 <code>checkPermission</code> 方法；这会导致 <code>SecurityException</code>。此方法的提供者实现还可以执行进一步的安全检查，以验证调用上下文是否具有连接到代码基 URL 路径中的所有 URL 的权限。

@param	codebase 返回的类加载器将从其加载类的 URL 列表（由空格分隔），或 <code>null</code>

@return 从给定代码基 URL 路径加载类的类加载器

@throws	MalformedURLException 如果 <code>codebase</code> 为非 <code>null</code> 且包含一个无效 URL，或者如果 <code>codebase</code> 为 <code>null</code> 且用于标识类加载器的特定于提供方的 URL 无效

@throws	SecurityException 如果存在安全管理器且其 <code>checkPermission</code> 方法的调用失败，或者如果调用方没有连接到代码基 URL 路径中所有 URL 的权限

@since	1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.rmi.server.RMIClassLoader.getClassAnnotation(java.lang.Class<?> cl)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示类定义位置的注释字符串，RMI 将在编组给定类的对象时用其注释类描述符。
 
<p>此方法委托给提供者实例的 {@link RMIClassLoaderSpi#getClassAnnotation(Class)} 方法，将 <code>cl</code> 作为第一个参数进行传递。

@param	cl  要获得其注释的类

@return	在编组时用于注释给定类的字符串，或 <code>null</code>

@throws	NullPointerException 如果 <code>cl</code> 为 <code>null</code>

@since	1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.rmi.server.RMIClassLoaderSpi java.rmi.server.RMIClassLoader.getDefaultProviderInstance()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回服务提供者接口 {@link RMIClassLoaderSpi} 的默认提供者的规范化实例。如果未定义系统属性 <code>java.rmi.server.RMIClassLoaderSpi</code>，则 <code>RMIClassLoader</code> 静态方法

 <ul>

 <li>{@link #loadClass(URL,String)}
 <li>{@link #loadClass(String,String)}
 <li>{@link #loadClass(String,String,ClassLoader)}
 <li>{@link #loadProxyClass(String,String[],ClassLoader)}
 <li>{@link #getClassLoader(String)}
 <li>{@link #getClassAnnotation(Class)}

 </ul>

将把默认提供者的规范化实例用作服务提供者实例。

<p>如果存在安全管理器，则使用 <code>RuntimePermission(&quot;setFactory&quot;)</code> 权限调用其 <code>checkPermission</code> 方法；这会导致 <code>SecurityException</code>。

<p>默认服务提供者实例按以下方式实现 {@link RMIClassLoaderSpi}：

 <blockquote>

<p><b>{@link RMIClassLoaderSpi#getClassAnnotation(Class) getClassAnnotation}</b> 方法返回一个表示基本代码 URL 路径的 <code>String</code>，远程方应使用该路径下载指定类的定义。返回的字符串的格式是一个由空格分隔的 URL 路径。

返回的基本代码字符串取决于指定类的定义类加载器：

 <ul>

<p><li>如果类加载器是系统类加载器（请参阅 {@link ClassLoader#getSystemClassLoader}）、系统类加载器的父级（如，用于安装扩展的加载器） 或引导类加载器（可以用 <code>null</code> 表示），则返回 <code>java.rmi.server.codebase</code> 属性的值（或可能是一个原先的缓存值）；如果未设置该属性，则返回 <code>null</code>。

<p><li>否则，如果类加载器是 <code>URLClassLoader</code> 的实例，则返回的字符串是一个 URL 的外部形式的由空格分隔的列表，该 URL 通过调用加载器 <code>getURLs</code> 方法返回。如果 <code>URLClassLoader</code> 由此提供者创建，用于调用其 <code>loadClass</code> 或 <code>loadProxyClass</code> 方法，则不需要任何权限即可获取关联的基本代码字符串。如果它是其他任意一个 <code>URLClassLoader</code> 实例，则如果存在安全管理器，则对于 <code>getURLs</code> 方法返回的每个 URL 都要调用一次其 <code>checkPermission</code> 方法（所用的权限为对每个 URL 调用 <code>openConnection().getPermission()</code> 返回的权限）；如果这些调用的任何一个抛出 <code>SecurityException</code> 或 <code>IOException</code>，则返回 <code>java.rmi.server.codebase</code> 属性的值（或可能是原先的缓存值）；如果未设置该属性，则返回 <code>null</code>。

<p><li>最后，如果类加载器不是 <code>URLClassLoader</code> 的实例，则返回 <code>java.rmi.server.codebase</code> 属性的值（或可能是原先的缓存值）；如果未设置该属性，则返回 <code>null</code>。

 </ul>

<p>对于下面描述的方法的实现，这些实现都采用作为由空格分隔的 URL 列表的名为 <code>codebase</code> 的 <code>String</code> 参数，每个调用都有一个关联的<i>基本代码加载器</i>，它通过将 <code>codebase</code> 与当前线程的上下文类加载器一起使用进行标识（请参阅 {@link Thread#getContextClassLoader()}）。存在安全管理器时，此提供者将维护类加载器实例（至少是 {@link java.net.URLClassLoader} 的实例）的内部表，这些内部表通过其父类加载器及其基本代码 URL 路径（排序的 URL 列表）键入。如果 <code>codebase</code> 为 <code>null</code>，则基本代码 URL 路径是系统属性 <code>java.rmi.server.codebase</code> 的值，或可能是原先的缓存值。对于给定的基本代码 URL 路径（该路径作为 <code>codebase</code> 参数传递到下面给定上下文中的方法之一的调用），基本代码加载器位于具有指定基本代码 URL 路径的表中且当前线程的上下文类加载器是其父级的加载器。如果不存在这样的加载器，则创建一个这样的加载器并将其添加到表中。该表不维护对其包含的加载器的强引用，以便于允许它们及其定义类在不可另外到达时被垃圾回收。为了防止不受信任的任意代码被隐式加载到不带安全管理器的虚拟机中，如果未设置安全管理器，则基本代码加载器就是当前线程的上下文类加载器（提供的基本代码 URL 路径被忽略，所以禁止了远程类加载）。

<p><b>{@link RMIClassLoaderSpi#getClassLoader(String) getClassLoader}</b> 方法返回指定基本代码 URL 路径的基本代码加载器。如果存在安全管理器，则如果该调用上下文没有连接到基本代码 URL 路径上的所有 URL 的权限，则抛出 <code>SecurityException</code>。

<p><b>{@link RMIClassLoaderSpi#loadClass(String,String,ClassLoader) loadClass}</b> 方法尝试按以下方式加载具有指定名称的类：

 <blockquote>

如果 <code>defaultLoader</code> 为非 <code>null</code>，则它首先尝试使用 <code>defaultLoader</code> 加载具有指定 <code>name</code> 的类，比如通过评估

 <pre>
     Class.forName(name, false, defaultLoader)
 </pre>

如果从 <code>defaultLoader</code> 成功加载了类，则返回该类。如果抛出 <code>ClassNotFoundException</code> 之外的异常，则该异常被抛给调用方。

<p>其次，<code>loadClass</code> 方法尝试使用指定基本代码 URL 路径的基本代码加载器加载具有指定 <code>name</code> 的类。如果存在安全管理器，则该调用上下文必须具有连接到基本代码 URL 上的所有 URL 的权限；否则，将使用当前线程的上下文类加载器，而不是基本代码加载器。

 </blockquote>

<p><b>{@link RMIClassLoaderSpi#loadProxyClass(String,String[],ClassLoader) loadProxyClass}</b> 方法尝试按以下方式返回具有指定接口的动态代理类：

 <blockquote>

<p>如果 <code>defaultLoader</code> 参数为非 <code>null</code> 且可以通过该加载器解析所有指定接口，则，

 <ul>

<li>如果所有解析的接口都为 <code>public</code>，则它首先尝试获得在基本代码加载器中定义的解析接口的动态代理类（使用 {@link java.lang.reflect.Proxy#getProxyClass(ClassLoader,Class[]) Proxy.getProxyClass}）；如果该尝试抛出一个 <code>IllegalArgumentException</code>，则它尝试获得在 <code>defaultLoader</code> 中定义的解析接口的动态代理类。如果两个尝试都抛出 <code>IllegalArgumentException</code>，则此方法将抛出 <code>ClassNotFoundException</code>。如果抛出任何其他异常，则该异常将被抛给调用方。

<li>如果在同一类加载器中定义所有非 <code>public</code> 解析接口，则其尝试获得在该加载器中定义的解析接口的动态代理类。

<li>否则，抛出 <code>LinkageError</code>（因为实现所有指定接口的类无法在任何加载器中定义）。

 </ul>

<p>否则，如果所有指定的接口可通过基本代码加载器解析，则，

 <ul>

<li>如果所有解析接口都为 <code>public</code>，则它尝试获得基本代码中解析接口的动态代理类。如果该尝试抛出 <code>IllegalArgumentException</code>，则此方法抛出一个 <code>ClassNotFoundException</code>。

<li>如果在同一类加载器中定义所有非 <code>public</code> 解析接口，则它尝试获得在该加载器中定义的解析接口的动态代理类。

<li>否则，抛出 <code>LinkageError</code>（因为实现所有指定接口的类无法在任何加载器中定义）。

 </ul>

<p>否则，将为每个无法解析的指定接口抛出 <code>ClassNotFoundException</code>。

 </blockquote>

 </blockquote>

@return	默认服务提供者的规范化实例

@throws	SecurityException 如果存在安全管理器，且其 <code>checkPermission</code> 方法的调用将失败

@since	1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Object java.rmi.server.RMIClassLoader.getSecurityContext(ClassLoader loader)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定类加载器的安全上下文。

@param	loader 从其获取安全上下文的类加载器

@return	安全上下文

@deprecated 无替换版本。从 Java 2 平台 v1.2 开始，RMI 不再使用此方法来获取类加载器的安全上下文。
@see java.lang.SecurityManager#getSecurityContext()

<!-- END DATA -->
