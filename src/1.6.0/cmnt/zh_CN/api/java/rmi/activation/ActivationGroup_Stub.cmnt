<!-- BEGIN KEY -->
public final class java.rmi.activation.ActivationGroup_Stub extends java.rmi.server.RemoteStub implements java.rmi.activation.ActivationInstantiator, java.rmi.Remote
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>ActivationGroup_Stub</code> 是一个当作 <code>java.rmi.server.UnicastRemoteObject</code> 被导出的 <code>java.rmi.activation.ActivationGroup</code> 子类的 stub 类。

@version	1.3, 12/19/03
@since	1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.activation.ActivationGroup_Stub(RemoteRef ref)
<!-- END KEY -->
<!-- BEGIN DATA -->
为 <code>ActivationGroup</code> 类构造一个 stub。它使用参数 <code>ref</code> 来调用超类的 <code>RemoteStub(RemoteRef)</code> 构造方法。

@param	ref 一个远程引用

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.MarshalledObject java.rmi.activation.ActivationGroup_Stub.newInstance(ActivationID id, ActivationDesc desc) throws java.rmi.RemoteException, java.rmi.activation.ActivationException
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>ActivationGroup.newInstance</code> 的 stub 方法。使用 <code>this</code> 作为第一个参数，一个两元素的 <code>Object[]</code> 作为第二参数（<code>id</code> 作为第一个元素，<code>desc</code> 作为第二个元素），以及 -5274445189091581345L 作为第三个参数，在此实例的 <code>RemoteObject.ref</code> 字段上调用 <code>invoke</code> 方法，并且返回调用结果。如果该调用抛出 <code>RuntimeException</code>、<code>RemoteException</code> 或者 <code>ActivationException</code>，则该异常将被抛给调用者。如果该调用抛出任何其他 <code>java.lang.Exception</code>，则 <code>java.rmi.UnexpectedException</code> 连同最初的异常当作原因一起抛给调用者。

@param	id 一个激活标识符
@param	desc 一个激活描述符
@return 调用的结果
@throws	java.rmi.RemoteException 如果调用导致 <code>RemoteException</code>
@throws	java.rmi.activation.ActivationException 如果调用导致 <code>ActivationException</code>

<!-- END DATA -->
