<!-- BEGIN KEY -->
public final class java.rmi.registry.LocateRegistry extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>LocateRegistry</code> 用于获得对特定主机（包括本地主机）上引导远程对象注册表的引用，或用于创建一个接受对特定端口调用的远程对象注册表。

<p> 注意，<code>getRegistry</code> 调用并不实际生成到远程主机的连接。它只创建对远程注册表的本地引用，即便远程主机上没有正运行的注册表，它也会成功创建一个引用。因此，调用作为此方法的结果返回的远程注册表的后续方法可能会失败。

@version 1.33, 12/19/03
@author  Ann Wollrath
@author  Peter Jones
@since   JDK1.1
@see     java.rmi.registry.Registry

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.rmi.registry.Registry java.rmi.registry.LocateRegistry.getRegistry() throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回本地主机在默认注册表端口 1099 上对远程对象 <code>Registry</code> 的引用。

@return 对远程对象注册表的引用（一个 stub）
@exception RemoteException 如果无法创建该引用
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.rmi.registry.Registry java.rmi.registry.LocateRegistry.getRegistry(int port) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回本地主机在指定 <code>port</code> 上对远程对象 <code>Registry</code> 的引用。

@param port 注册表在其上接受请求的端口
@return 对远程对象注册表的引用（一个 stub）
@exception RemoteException 如果无法创建该引用
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.rmi.registry.Registry java.rmi.registry.LocateRegistry.getRegistry(String host) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定 <code>host</code> 在默认注册表端口 1099 上对远程对象 <code>Registry</code> 的引用。如果 <code>host</code> 为 <code>null</code>，则使用本地主机。

@param host 用于远程注册表的主机
@return 对远程对象注册表的引用（一个 stub）
@exception RemoteException 如果无法创建该引用
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.rmi.registry.Registry java.rmi.registry.LocateRegistry.getRegistry(String host, int port) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定的 <code>host</code> 和 <code>port</code> 上对远程对象 <code>Registry</code> 的引用。如果 <code>host</code> 为 <code>null</code>，则使用本地主机。

@param host 用于远程注册表的主机
@param port 注册表在其上接受请求的端口
@return 对远程对象注册表的引用（一个 stub）
@exception RemoteException 如果无法创建该对象
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.rmi.registry.Registry java.rmi.registry.LocateRegistry.getRegistry(String host, int port, RMIClientSocketFactory csf) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回本地创建的指定 <code>host</code> 和 <code>port</code> 上对远程对象 <code>Registry</code> 的远程引用。与此远程注册表的通信将使用提供的 <code>RMIClientSocketFactory</code> <code>csf</code> 来创建到远程 <code>host</code> 和 <code>port</code> 上注册表的 <code>Socket</code> 连接。

@param host 用于远程注册表的主机
@param port 注册表在其上接受请求的端口
@param csf  用于生成到注册表的连接的客户端的 <code>Socket</code> 工厂。如果 <code>csf</code> 为 null，则默认客户端的 <code>Socket</code> 工厂将用于注册表 stub。
@return 对远程对象注册表的引用（一个 stub）
@exception RemoteException 如果无法创建该引用
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.rmi.registry.Registry java.rmi.registry.LocateRegistry.createRegistry(int port) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建并导出接受指定 <code>port</code> 请求的本地主机上的 <code>Registry</code> 实例。

<p>导出 <code>Registry</code> 实例与调用静态 {@link UnicastRemoteObject.exportObject(Remote,int) UnicastRemoteObject.exportObject} 方法一样，都是将传入 <code>Registry</code> 实例和指定的 <code>port</code> 作为参数，只不过导出的 <code>Registry</code> 实例具有已知对象的标识标符（用值 {@link ObjID#REGISTRY_ID} 构造的 {@link ObjID} 实例）。

@param port 注册表在其上接受请求的端口
@return 注册表
@exception RemoteException 如果无法导出注册表
@since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.rmi.registry.Registry java.rmi.registry.LocateRegistry.createRegistry(int port, RMIClientSocketFactory csf, RMIServerSocketFactory ssf) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
在本地主机上创建并导出 <code>Registry</code> 实例，该本地主机使用的是与该实例通信的自定义套接字工厂。创建的注册表使用从提供的 <code>RMIServerSocketFactory</code> 创建的 <code>ServerSocket</code> 侦听给定 <code>port</code> 上的传入请求。

<p>导出 <code>Registry</code> 实例与调用静态 {@link UnicastRemoteObject.exportObject(Remote,int,RMIClientSocketFactory,RMIServerSocketFactory) UnicastRemoteObject.exportObject} 方法一样，都是将传入 <code>Registry</code> 实例、指定的 <code>port</code>、指定的 <code>RMIClientSocketFactory</code> 和指定的 <code>RMIServerSocketFactory</code> 作为参数，只不过 <code>Registry</code> 实例具有已知对象的标识符（用值 {@link ObjID#REGISTRY_ID} 构造的 {@link ObjID} 实例）。

@param port 注册表在其上接受请求的端口
@param csf  用于连接到注册表的客户端的 <code>Socket</code> 工厂
@param ssf  用于生成到注册表的连接的服务器端的 <code>ServerSocket</code> 工厂
@return 注册表
@exception RemoteException 如果无法导出注册表
@since 1.2

<!-- END DATA -->
