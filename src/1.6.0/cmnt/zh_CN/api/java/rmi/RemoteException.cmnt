<!-- BEGIN KEY -->
public class java.rmi.RemoteException extends java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>RemoteException</code> 是许多与通信相关的异常的通用超类，这些异常可能会在执行远程方法调用期间发生。远程接口（扩展 <code>java.rmi.Remote</code> 的接口）的每个方法必须在其 throws 子句中列出 <code>RemoteException</code>。

<p>从版本 1.4 开始，已对此异常作出改进，以符合通用异常链机制。可以在构造时提供并通过公共 {@link #detail} 字段访问的&ldquo;包装的远程异常&rdquo;现在称为 <i>cause</i>，并可通过 {@link Throwable#getCause()} 方法以及前述的&ldquo;遗留字段&rdquo;访问。

<p>在 <code>RemoteException</code> 的实例上调用方法 {@link Throwable#initCause(Throwable)} 始终抛出 {@link IllegalStateException}。

@version 1.24, 12/19/03
@author  Ann Wollrath
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Throwable java.rmi.RemoteException.detail
<!-- END KEY -->
<!-- BEGIN DATA -->
远程异常的原因。

<p>此字段早于通用异常链设施。{@link Throwable#getCause()} 方法现在是获取此信息的首选方法。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.RemoteException()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>RemoteException</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.RemoteException(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带指定详细消息的 <code>RemoteException</code>。

@param s 详细消息

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.RemoteException(String s, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带指定详细消息和原因的 <code>RemoteException</code>。此构造方法将 {@link #detail} 字段设置为指定的 <code>Throwable</code>。

@param s  详细信息
@param cause  原因

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.rmi.RemoteException.getMessage()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此异常的详细消息，包括来自原因（如果有）方面的消息。
 
@return  详细消息

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Throwable java.rmi.RemoteException.getCause()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此异常的原因。此方法返回 {@link #detail} 字段的值。

@return  原因，它可以为 <tt>null</tt>。
@since   1.4

<!-- END DATA -->
