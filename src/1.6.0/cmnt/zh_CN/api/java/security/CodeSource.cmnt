<!-- BEGIN KEY -->
public class java.security.CodeSource extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->

<p>此类扩展 codebase 的概念，不仅可以封装位置 (URL) 而且可以封装用于验证起源于该位置的签名代码的证书链。

@version 	1.38, 12/19/03
@author Li Gong
@author Roland Schemers

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.net.URL java.security.CodeSource.location
<!-- END KEY -->
<!-- BEGIN DATA -->
代码位置。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.CodeSource(URL url, java.security.cert.Certificate[] certs)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 CodeSource 并将其与指定位置和证书集合相关联。
 
@param url 位置 (URL)。
 
@param certs 证书。它可以为 null。复制数组的内容，以防随后进行修改。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.CodeSource(URL url, java.security.CodeSigner[] signers)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 CodeSource 并将其与指定位置和代码签名者集合相关联。
 
@param url 位置 (URL)。
@param signers 代码签名者。它可以为 null。复制数组的内容，以防随后进行修改。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.CodeSource.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象的哈希码值。

@return  此对象的哈希码值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.CodeSource.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试指定对象与此对象之间的相等性。如果两个 CodeSource 对象的位置具有相同值并且其签名者证书链也具有相同值，则认为这两个对象相等。不要求证书链具有相同的顺序。
 
@param obj 要与此对象进行相等性测试的对象。
 
@return 如果对象被视为相等，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.net.URL java.security.CodeSource.getLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 CodeSource 关联的位置。
 
@return 位置 (URL)。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.cert.Certificate[] java.security.CodeSource.getCertificates()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 CodeSource 关联的证书。
 <p>
如果此 CodeSource 对象是使用 {@link #CodeSource(URL url, CodeSigner[] signers)} 构造方法创建的，则提取其证书链并使用它们来创建一个 Certificate 对象数组。每个签名证书后面跟着其支持证书链（可能为空）。每个签名证书及其支持证书链按从底到顶进行排序（即签名证书排在首位置，（根）证书授权排在末位置）。
 
@return 证书数组的副本；如果不存在副本，则返回 null。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.CodeSigner[] java.security.CodeSource.getCodeSigners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此 CodeSource 关联的代码签名者。
 <p>
如果此 CodeSource 对象是使用 {@link #CodeSource(URL url, Certificate[] certs)} 构造方法创建的，则提取其证书链并使用它们来创建一个 CodeSigner 对象数组。注意，仅检查 X.509 证书，所有其他证书类型都将被忽略。

@return 代码签名者数组的副本；如果不存在副本，则返回 null。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.CodeSource.implies(CodeSource codesource)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此 CodeSource 对象&ldquo;暗含&rdquo;指定的 CodeSource，则返回 true。
 <P>
更确切地说，此方法将按顺序进行以下检查。如果任何一项检查失败，它都返回 false。如果所有检查都成功了，它将返回 true。<p>
 <ol>
<li> <i>codesource</i> 一定不能为 null。
<li> 如果此对象的证书不为 null，则此对象的所有证书一定都存在于 <i>codesource</i> 的证书中。
<li> 如果此对象的位置 (getLocation()) 不为 null，则针对此对象的位置和 <i>codesource</i> 的位置进行以下检查：<p>
   <ol>
<li>  <i>codesource</i> 的位置一定不能为 null。

<li>  如果此对象的位置等于 <i>codesource</i> 的位置，则返回 true。

<li>  此对象的协议 (getLocation().getProtocol()) 一定等于 <i>codesource</i> 的协议。

<li>  如果此对象的主机 (getLocation().getHost()) 不为 null，则使用此对象的主机构造的 SocketPermission 一定暗含使用 <i>codesource</i> 的主机构造的 SocketPermission。

<li>  如果此对象的端口 (getLocation().getPort()) 不等于 -1（即如果端口是指定的），则它必须等于 <i>codesource</i> 的端口。

<li>  如果此对象的文件 (getLocation().getFile()) 不等于 <i>codesource</i> 的文件，则进行以下检查：如果此对象的文件以 &quot;/-&quot; 结尾，则 <i>codesource</i> 的文件必须使用此对象的文件（不包括尾部 &quot;-&quot;）开头。如果此对象的文件以 &quot;/*&quot; 结尾，则 <i>codesource</i> 的文件必须使用此对象的文件开头并且一定不能再有 &quot;/&quot; 分隔符。如果此对象的文件不以 &quot;/&quot; 结尾，则 <i>codesource</i> 的文件必须使用追加的一个 '/'来匹配此对象的文件。

<li>  如果此对象的引用 (getLocation().getRef()) 不为 null，则它必须等于 <i>codesource</i> 的引用。

   </ol>
 </ol>
 <p>
例如，具有以下位置和 null 证书的 codesource 对象都暗含具有 &quot;http://java.sun.com/classes/foo.jar&quot; 位置和 null 证书的 codesource。
 <pre>
     http:
     http://*.sun.com/classes/*
     http://java.sun.com/classes/-
     http://java.sun.com/classes/foo.jar
 </pre>
 
注意，如果此 CodeSource 具有 null 位置和 null 证书链，则其暗含所有其他的 CodeSource。

@param codesource 用于比较的 CodeSource。

@return  如果此 codesource 暗含指定的 codesource，则返回 true；否则返回 false。  

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.CodeSource.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述此 CodeSource 的字符串，告知其 URL 和证书。
 
@return 关于此 CodeSource 的信息。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.security.CodeSource.readObject(ObjectInputStream ois) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流还原此对象（也就是将其反序列化）。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.security.CodeSource.writeObject(ObjectOutputStream oos) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此对象写出到流中（也就是将其序列化）。

@serialData 初始 <code>URL</code> 后跟一个 <code>int</code>，指示要遵守的证书数（值&ldquo;零&rdquo;表示不存在与此对象关联的证书）。所有证书的撰写都以表示证书类型的 <code>String</code> 开头，后跟一个指定证书编码长度的 <code>int</code>，再后跟作为 byte 数组写出的证书编码本身。最后，如果出现代码签名者，则同时序列化和写出代码签名者的数组。

<!-- END DATA -->
