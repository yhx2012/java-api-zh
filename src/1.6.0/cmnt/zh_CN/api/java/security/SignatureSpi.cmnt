<!-- BEGIN KEY -->
public abstract class java.security.SignatureSpi extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
此类为 <code>Signature</code> 类定义了<i>服务提供者接口</i> (<b>SPI</b>)，可用来提供数字签名算法功能。数字签名用来保证数字数据的真实性和完整性。
<p> 此类中的所有抽象方法都必须由每个想要提供实现特定签名算法的加密服务提供者实现。

@author Benjamin Renaud

@version 1.24, 05/18/04

@see Signature

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.SecureRandom java.security.SignatureSpi.appRandom
<!-- END KEY -->
<!-- BEGIN DATA -->
应用程序指定的随机源。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.security.SignatureSpi.engineInitVerify(PublicKey publicKey) throws java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->
通过用于验证操作的指定公钥初始化此签名对象。

@param publicKey 其签名将被验证的标识的公钥。
 
@exception InvalidKeyException 如果密钥未得到正确编码、参数丢失等等。  

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.security.SignatureSpi.engineInitSign(PrivateKey privateKey) throws java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->
通过用于签名操作的指定私钥初始化此签名对象。

@param privateKey 将生成其签名的标识的私钥。

@exception InvalidKeyException 如果密钥未得到正确编码、参数丢失等等。 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.security.SignatureSpi.engineInitSign(PrivateKey privateKey, SecureRandom random) throws java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->
通过用于签名操作的指定私钥和随机源初始化此签名对象。

<p>已将此具体方法添加到了先前定义过的抽象类中。（为向后兼容，它不能为抽象方法）。

@param privateKey 将生成其签名的标识的私钥。
@param random 随机源

@exception InvalidKeyException 如果密钥未得到正确编码、参数丢失等等。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.security.SignatureSpi.engineUpdate(byte b) throws java.security.SignatureException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的字节更新要签名或验证的数据。

@param b 用于更新的字节。

@exception SignatureException 如果引擎未得到正确初始化。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.security.SignatureSpi.engineUpdate(byte[] b, int off, int len) throws java.security.SignatureException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的 byte 数组，从指定的偏移量开始更新要签名或验证的数据。

@param b  byte 数组
@param off  byte 数组开始处的偏移量
@param len 要使用的字节数（从偏移量开始处计算）

@exception SignatureException 如果引擎未得到正确初始化

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.security.SignatureSpi.engineUpdate(ByteBuffer input)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的 ByteBuffer 更新要签名或验证的数据。处理从 <code>data.position()</code> 处开始的 <code>data.remaining()</code> 字节。返回时，缓冲区的位置将等于其限制；其限制并未改变。

@param input the ByteBuffer
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract byte[] java.security.SignatureSpi.engineSign() throws java.security.SignatureException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回迄今为止所有更新的数据的签名字节。签名的格式取决于底层签名方案。

@return 签名操作结果的签名字节。

@exception SignatureException 如果引擎未得到正确初始化，或者此签名算法无法处理所提供的输入数据。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.security.SignatureSpi.engineSign(byte[] outbuf, int offset, int len) throws java.security.SignatureException
<!-- END KEY -->
<!-- BEGIN DATA -->
完成此签名操作，并从 <code>offset</code> 开始将得到的签名字节保存在提供的缓冲区 <code>outbuf</code> 中。签名的格式取决于基本签名方案。
 
<p>此签名实现将被重新设置到其初始状态（对其中的一种 <code>engineInitSign</code> 方法调用之后所处的状态），并且可以重新使用该签名实现，用同一个私钥生成将来的签名。

此方法应是一个抽象方法，但出于二进制兼容性考虑，允许它保留具体方法。因此提供者应重写此方法。

@param outbuf 输出签名结果的缓冲区。

@param offset 到存储签名的 <code>outbuf</code> 的偏移量。

@param len  <code>outbuf</code> 中分配给签名的字节数。此默认实现和 SUN 提供者匀不返回部分摘要。如果此参数的值小于实际签名长度，此方法将抛出一个 SignatureException。如果其值大于或等于实际签名长度，则将忽略此参数。

@return 放入 <code>outbuf</code> 中的字节数
 
@exception SignatureException 如果引擎未得到正确初始化，或者此签名算法无法处理所提供的输入数据，或者 <code>len</code> 小于实际签名长度。

@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract boolean java.security.SignatureSpi.engineVerify(byte[] sigBytes) throws java.security.SignatureException
<!-- END KEY -->
<!-- BEGIN DATA -->

验证传入的签名。
 
@param sigBytes 要验证的签名字节。

@return 如果签名得到验证，则返回 true，否则将返回 false。 

@exception SignatureException 如果引擎未得到正确初始化，或传入的签名未被正确编码或类型错误，或者此签名算法无法处理所提供的输入数据等等。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.security.SignatureSpi.engineVerify(byte[] sigBytes, int offset, int length) throws java.security.SignatureException
<!-- END KEY -->
<!-- BEGIN DATA -->

在指定的 byte 数组中，从指定的偏移量处开始，验证传入的签名。

<p> 注：子类应改写此默认实现。

@param sigBytes 要验证的签名字节。
@param offset  byte 数组中起始处的偏移量。
@param length 要使用的字节数（从偏移量起始处计算）。

@return 如果签名得到验证，则返回 true，否则将返回 false。 

@exception SignatureException 如果引擎未得到正确初始化，或传入的签名未被正确编码或类型错误，或者此签名算法无法处理所提供的输入数据等等。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.security.SignatureSpi.engineSetParameter(String param, Object value) throws java.security.InvalidParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的算法参数设置为指定的值。此方法提供了一种通用机制，通过它可以设置此对象的各种参数。参数可以是算法的任何可设置参数，如参数大小、签名生成的随机源位（如果适当），或者表示是否执行具体但可选的计算。每个参数都需要统一的、特定于算法的命名方案，但此时尚未指定这种方案。

@param param 参数的字符串标示符。

@param value 参数值。

@exception InvalidParameterException 如果 <code>param</code> 是此算法引擎的无效参数，或者已经设置参数并且不能重新设置，或者发生了安全异常等等。

@deprecated 由 {@link #engineSetParameter(java.security.spec.AlgorithmParameterSpec) engineSetParameter} 取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.security.SignatureSpi.engineSetParameter(AlgorithmParameterSpec params) throws java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>此方法将由提供者重写，以便使用指定的参数设置初始化此签名引擎。

@param params 参数

@exception UnsupportedOperationException 如果提供者未重写此方法

@exception InvalidAlgorithmParameterException 如果提供者未重写此方法并且指定的参数不适合此签名引擎

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.AlgorithmParameters java.security.SignatureSpi.engineGetParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>此方法将由提供者重写，以返回与此签名引擎配合使用的参数，如果此签名引擎未使用任何参数，则返回 null。

<p>返回的参数可能与用来初始化此签名引擎的参数相同；如果此签名引擎需要算法参数但却未使用任何参数进行初始化，则返回的参数可能会包含由底层签名实现使用的默认和随机生成的参数值的组合。
 
@return 与此签名引擎一块使用的参数，如果此签名引擎未使用任何参数，则返回 null

@exception UnsupportedOperationException 如果提供者未重写此方法
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract java.lang.Object java.security.SignatureSpi.engineGetParameter(String param) throws java.security.InvalidParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取指定算法参数的值。此方法提供了一种通用机制，通过它能够获取此对象的各种参数。参数可以是算法的任何可设置参数，如参数大小、签名生成的随机源位（如果适当），或者表示是否执行具体但可选的计算。每个参数都需要统一的、特定于算法的命名方案，但此时尚未指定这种方案。

@param param 参数的字符串名称。

@return 表示参数值的对象，如果没有，则返回 null。

@exception InvalidParameterException 如果 <code>param</code> 是此引擎的无效参数，或者尝试获取此参数时发生了其他异常。

@deprecated

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.security.SignatureSpi.clone() throws java.lang.CloneNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果此实现可以复制，则返回一个副本。
 
@return  如果此实现可以复制，则返回一个副本。

@exception CloneNotSupportedException 如果调用一个不支持 <code>Cloneable</code> 的实现。

<!-- END DATA -->
