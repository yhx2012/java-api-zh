<!-- BEGIN KEY -->
public static class java.security.Provider.Service extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
安全服务的描述。它封装服务的属性并包含获得此服务新的实现实例的一个工厂方法。

<p>每个服务都有一个提供者，它提供服务、类型、算法名称和实现该服务的类的名称。它也可以选择包括此服务（别名）和属性的替换算法名称列表，该列表是 (name, value) String 对的映射表。

<p>此类定义了方法 {@link #supportsParameter supportsParameter()} 和 {@link #newInstance newInstance()}，Java 安全框架搜索合适的服务并实例化它们时使用这两个方法。这些方法的有效参数取决于服务的类型。关于 Java SE 中定义的服务类型的有效值，请参见 <a href="../../../guide/security/CryptoSpec.html">Java Cryptography Architecture API Specification &amp; Reference </a>。注意，Java SE 以外的组件可以定义其他类型的服务及其行为。

<p>此类的实例是不可变的。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.Provider.Service(Provider provider, String type, String algorithm, String className, java.util.List<java.lang.String> aliases, java.util.Map<java.lang.String, java.lang.String> attributes)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造新的服务。

@param provider 提供此服务的提供者
@param type 此服务的类型
@param algorithm 算法名称
@param className 实现此服务的类的名称
@param aliases 别名的列表，如果算法没有别名则为 null
@param attributes 属性的 Map，如果此实现没有属性则为 null

@throws NullPointerException 如果 provider、type、algorithm、或 className 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.security.Provider.Service.getType()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此服务的类型。例如，<code>MessageDigest</code>。

@return 此服务的类型

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.security.Provider.Service.getAlgorithm()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此服务的算法的名称。例如，<code>SHA-1</code>。

@return 此服务的算法

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider java.security.Provider.Service.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此服务的 Provider。

@return 此服务的 Provider。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.security.Provider.Service.getClassName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回实现此服务的类的名称。

@return 实现此服务的类的名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.security.Provider.Service.getAttribute(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定属性的值，如果没有为此 Service 设置此属性，则返回 null。

@param name 请求的属性的名称

@return 指定的属性的值，如果属性不存在则返回 null

@throws NullPointerException 如果 name 为 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.security.Provider.Service.newInstance(Object constructorParameter) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此服务描述的实现的新实例。安全提供者框架使用此方法构造实现。应用程序通常不需要调用它。

<p>默认实现使用反射调用此服务类型的标准构造方法。安全提供者可以重写此方法来以不同的方式实现实例化。有关详细信息和各种服务类型的有效 constructorParameter 值，请参见 <a href="../../../technotes/guides/security/crypto/CryptoSpec.html">Java Cryptography Architecture API Specification &amp; Reference</a>。

@param constructorParameter 传递给构造器的值，如果此服务类型不使用 constructorParameter，则为 null。

@return 此服务的新实现

@throws InvalidParameterException 如果 constructorParameter 对于此服务类型是无效值
@throws NoSuchAlgorithmException 如果由于任何其他原因实例化失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.Provider.Service.supportsParameter(Object parameter)
<!-- END KEY -->
<!-- BEGIN DATA -->
测试此 Service 是否能使用指定的参数。如果此服务不能使用该参数，则返回 false。如果此服务能使用该参数、快速测试不可行或状态未知，则返回 true。

<p>安全提供者框架用一些服务类型作为参数使用此方法来快速排除所考虑实现中的不匹配项。应用程序通常不需要调用它。

<p>有关详细信息和各种服务类型的有效参数值，请参见此类的顶部和 <a href="../../../technotes/guides/security/crypto/CryptoSpec.html">Java Cryptography Architecture API Specification &amp; Reference</a>。安全提供者可以重写它以实现自己的测试。

@param parameter 要测试的参数。

@return 如果此服务不能使用指定的参数返回 false；如果它可能使用该参数返回 true 

@throws InvalidParameterException 如果参数值对于此服务类型无效或此方法不能随此服务类型一同使用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.Provider.Service.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此服务的字符串表示形式。

@return 此服务的字符串表示形式

<!-- END DATA -->
