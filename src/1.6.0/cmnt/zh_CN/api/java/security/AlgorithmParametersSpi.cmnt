<!-- BEGIN KEY -->
public abstract class java.security.AlgorithmParametersSpi extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
此类为 <code>AlgorithmParameters</code> 类定义<i>服务提供者接口</i> (<b>SPI</b>)，AlgorithmParameters 类用于管理算法参数。

<p> 每个希望为特定算法提供参数管理的密码服务提供者都必须实现此类中的所有抽象方法。

@author Jan Luehe

@version 1.12, 05/05/04

@see AlgorithmParameters
@see java.security.spec.AlgorithmParameterSpec
@see java.security.spec.DSAParameterSpec

@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.security.AlgorithmParametersSpi.engineInit(AlgorithmParameterSpec paramSpec) throws java.security.spec.InvalidParameterSpecException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用在 <code>paramSpec</code> 中指定的参数初始化此参数对象。

@param paramSpec 参数规范。

@exception InvalidParameterSpecException 如果给定参数规范不适用于初始化此参数对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.security.AlgorithmParametersSpi.engineInit(byte[] params) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据参数的基本解码格式导入指定的参数并对其解码。如果此参数类型的 ASN.1 规范存在，则参数的基本解码格式即为 ASN.1。

@param params 编码的参数。

@exception IOException 当解码发生错误时

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.security.AlgorithmParametersSpi.engineInit(byte[] params, String format) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定的解码格式从 <code>params</code> 导入参数并对其解码。如果 <code>format</code> 为 null，则使用参数的基本解码格式。如果这些参数的 ASN.1 规范存在，则基本解码格式即为 ASN.1。

@param params 编码的参数。

@param format 解码格式的名称。

@exception IOException 当解码发生错误时

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract T extends java.security.spec.AlgorithmParameterSpec java.security.AlgorithmParametersSpi.engineGetParameterSpec(java.lang.Class<T> paramSpec) throws java.security.spec.InvalidParameterSpecException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此参数对象的（透明）规范。<code>paramSpec</code> 标识应该在其中返回参数的规范类。例如，该类可以为 <code>DSAParameterSpec.class</code>，指示应该在 <code>DSAParameterSpec</code> 类的实例中返回参数。

@param paramSpec 应该在其中返回参数的规范类。

@return 参数规范。

@exception InvalidParameterSpecException 如果请求的参数规范不适用于初始化此参数对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract byte[] java.security.AlgorithmParametersSpi.engineGetEncoded() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回基本编码格式的参数。如果此参数类型的 ASN.1 规范存在，则参数的基本编码格式即为 ASN.1。

@return 使用其主要编码格式编码的参数。

@exception IOException 当编码发生错误时。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract byte[] java.security.AlgorithmParametersSpi.engineGetEncoded(String format) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回以指定格式编码的参数。如果 <code>format</code> 为 null，则使用参数的基本编码格式。如果这些参数的 ASN.1 规范存在，则基本编码格式即为 ASN.1。

@param format 编码格式的名称。

@return 使用指定的编码方案编码的参数。

@exception IOException 当编码发生错误时。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract java.lang.String java.security.AlgorithmParametersSpi.engineToString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述参数的格式化字符串。

@return 描述参数的格式化字符串。

<!-- END DATA -->
