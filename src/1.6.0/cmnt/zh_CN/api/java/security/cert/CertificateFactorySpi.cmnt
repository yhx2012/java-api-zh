<!-- BEGIN KEY -->
public abstract class java.security.cert.CertificateFactorySpi extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
此类定义了 <code>CertificateFactory</code> 类的<i>服务提供者接口</i> (<b>SPI</b>)。希望为特定的证书类型（如 X.509）提供 CertificateFactory 实现的每个加密服务提供者都必须实现此类中的所有抽象方法。

<p>CertificateFactory 用于根据相关的编码生成证书、证书路径 (<code>CertPath</code>) 和证书撤消列表 (CRL) 对象。

<p>X.509 的 CertificateFactory 返回的证书必须是 <code>java.security.cert.X509Certificate</code> 的实例，CRL 的 CertificateFactory 返回的证书则必须是 <code>java.security.cert.X509CRL</code> 的实例。

@author Hemma Prafullchandra
@author Jan Luehe
@author Sean Mullan

@version 1.19, 05/05/04

@see CertificateFactory
@see Certificate
@see X509Certificate
@see CertPath
@see CRL
@see X509CRL

@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.cert.Certificate java.security.cert.CertificateFactorySpi.engineGenerateCertificate(InputStream inStream) throws java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
生成一个证书对象并使用从输入流 <code>inStream</code> 中读取的数据对它进行初始化。

<p>为了利用此 CertificateFactory 所支持的专门的证书格式，可将返回的证书对象的类型强制转换为相应的证书类。例如，如果此 CertificateFactory 实现 X.509 证书，则可将返回的证书对象的类型强制转换为 <code>X509Certificate</code> 类。

<p>在用于 X.509 证书的 CertificateFactory 情况中，<code>inStream</code> 中提供的证书必须是 DER 编码的，并且可以二进制或可打印的 (Base64) 编码形式提供。如果以 Base64 编码的形式提供该证书，则该证书必须由 -----BEGIN CERTIFICATE----- 语句开始，由 -----END CERTIFICATE----- 语句结束。

<p>注意，如果给定的输入流不支持 {@link java.io.InputStream#mark(int) mark} 和 {@link java.io.InputStream#reset() reset}，则此方法将使用整个输入流。否则，每次调用此方法都需要一个证书，并且将输入流的读取位置定位在固有证书结尾标记后的下一个可用字节处。如果输入流中的数据不包含固有的证书结尾标记（不同于 EOF），并且在解析该证书后有一个尾随数据，则抛出 <code>CertificateException</code>。

@param inStream 带有证书数据的输入流。

@return 已使用输入流中的数据初始化的证书对象。

@exception CertificateException 如果发生解析错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPath java.security.cert.CertificateFactorySpi.engineGenerateCertPath(InputStream inStream) throws java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
生成一个 <code>CertPath</code> 对象，并使用从 <code>InputStream</code> inStream 中读取的数据对它进行初始化。假定数据是以默认编码方式进行编码的。

<p> Java 2 Platform Standard Edition 的 1.4 版本中添加了此方法。为了维持与现有服务提供者的后向兼容性，无法 <code>abstract</code> 此方法，并且默认会抛出 <code>UnsupportedOperationException</code>。

@param inStream 包含数据的 <code>InputStream</code>
@return 已使用 <code>InputStream</code> 中的数据初始化的 <code>CertPath</code>
@exception CertificateException 如果解码时出现异常
@exception UnsupportedOperationException 如果不支持此方法
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPath java.security.cert.CertificateFactorySpi.engineGenerateCertPath(InputStream inStream, String encoding) throws java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
生成一个 <code>CertPath</code> 对象，并使用从 <code>InputStream</code> inStream 中读取的数据对它进行初始化。假定数据是以指定的编码方式进行编码的。

<p> Java 2 Platform Standard Edition 的 1.4 版本中添加了此方法。为了维持与现有服务提供者的后向兼容性，无法 <code>abstract</code> 此方法，并且默认会抛出 <code>UnsupportedOperationException</code>。

@param inStream 包含数据的 <code>InputStream</code>
@param encoding 数据使用的编码
@return 已使用 <code>InputStream</code> 中的数据初始化的 <code>CertPath</code>
@exception CertificateException 如果解码时出现异常或者不支持所请求的编码
@exception UnsupportedOperationException 如果不支持此方法
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPath java.security.cert.CertificateFactorySpi.engineGenerateCertPath(java.util.List<? extends java.security.cert.Certificate> certificates) throws java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
生成一个 <code>CertPath</code> 对象,并使用 <code>Certificate</code> 的 <code>List</code> 对它进行初始化。
 <p>
所提供的证书必须是该 <code>CertificateFactory</code> 所支持的类型。将从提供的 <code>List</code> 对象中复制出这些证书。

<p> Java 2 Platform Standard Edition 的 1.4 版本中添加了此方法。为了维持与现有服务提供者的后向兼容性，无法 <code>abstract</code> 此方法，并且默认会抛出 <code>UnsupportedOperationException</code>。

@param certificates <code>Certificate</code> 的 <code>List</code>
@return 已使用所提供的证书列表初始化的 <code>CertPath</code>
@exception CertificateException 如果出现异常
@exception UnsupportedOperationException 如果不支持此方法
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<java.lang.String> java.security.cert.CertificateFactorySpi.engineGetCertPathEncodings()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 CertificateFactory 支持的 <code>CertPath</code> 编码的迭代器，默认编码方式优先。有关标准编码名称的信息，请参阅 <a href="../../../../technotes/guides/security/certpath/CertPathProgGuide.html#AppA">Java Certification Path API Programmer's Guide</a> 中的附录 A。
 <p>
试图修改返回的 <code>Iterator</code>（通过其 <code>remove</code> 方法）会导致抛出 <code>UnsupportedOperationException</code>。

<p> Java 2 Platform Standard Edition 的 1.4 版本中添加了此方法。为了维持与现有服务提供者的后向兼容性，无法 <code>abstract</code> 此方法，并且默认会抛出 <code>UnsupportedOperationException</code>。

@return 在受支持的 <code>CertPath</code> 编码名称（以 <code>String</code> 的形式）上进行迭代的 <code>Iterator</code>
@exception UnsupportedOperationException 如果不支持此方法
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Collection<? extends java.security.cert.Certificate> java.security.cert.CertificateFactorySpi.engineGenerateCertificates(InputStream inStream) throws java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从给定输入流 <code>inStream</code> 中读取的证书的集合视图（可能为空）。

<p>为了利用此 CertificateFactory 所支持的专门的证书格式，可将返回的集合视图中的每个元素的类型强制转换为相应的证书类。例如，如果此 CertificateFactory 实现 X.509 证书，则可将返回集合中的元素的类型强制转换为 <code>X509Certificate</code> 类。

<p>在用于 X.509 证书的 CertificateFactory 情况中，<code>inStream</code> 可能包含单个 DER 编码的证书，这些证书使用 {@link CertificateFactory#generateCertificate(java.io.InputStream) generateCertificate} 所描述的格式。另外，<code>inStream</code> 可能包含一个 PKCS#7 证书链。这是一个 PKCS#7 <i>SignedData</i> 对象，具有惟一<i>认可</i> 的有效字段。需要特别指出的是，签名和内容会被忽略。此格式允许同时下载多个证书。如果没有证书，则返回一个空集合。

<p>注意，如果给定的输入流不支持 {@link java.io.InputStream#mark(int) mark} 和 {@link java.io.InputStream#reset() reset}，则此方法将使用整个输入流。

@param inStream 带有证书的输入流。

@return  java.security.cert.Certificate 对象的集合视图（可能为空），用输入流中的数据对该对象进行初始化。

@exception CertificateException 如果发生解析错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.cert.CRL java.security.cert.CertificateFactorySpi.engineGenerateCRL(InputStream inStream) throws java.security.cert.CRLException
<!-- END KEY -->
<!-- BEGIN DATA -->
生成一个证书撤消列表 (CRL) 对象，并使用从输入流 <code>inStream</code> 中读取的数据对它进行初始化。

<p>为了利用此 CertificateFactory 所支持的专门的 CRL 格式，可将返回的 CRL 对象的类型强制转换为相应的 CRL 类。例如，如果此 CertificateFactory 实现 X.509 CRL，则可将返回的 CRL 对象的类型强制转换为 <code>X509CRL</code> 类。

<p>注意，如果给定的输入流不支持 {@link java.io.InputStream#mark(int) mark} 和 {@link java.io.InputStream#reset() reset}，则此方法将使用整个输入流。否则，每次调用此方法都需要一个 CRL，并且将输入流的读取位置定位在固有 CRL 结尾标记后的下一个可用字节处。如果输入流中的数据不包含固有的 CRL 结尾标记（不同于 EOF），并且在解析该 CRL 后有一个尾随数据，则抛出 <code>CRLException</code>。

@param inStream 带有 CRL 数据的输入流。

@return 已使用输入流中的数据初始化的 CRL 对象。

@exception CRLException 如果发生解析错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Collection<? extends java.security.cert.CRL> java.security.cert.CertificateFactorySpi.engineGenerateCRLs(InputStream inStream) throws java.security.cert.CRLException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从给定输入流 <code>inStream</code> 中读取的 CRL 的集合视图（可能为空）。

<p>为了利用此 CertificateFactory 所支持的专门的 CRL 格式，可将返回的集合视图中的每个元素的类型强制转换为相应的 CRL 类。例如，如果此 CertificateFactory 实现 X.509 CRL，则可将返回集合中的元素类型强制转换为 <code>X509CRL</code> 类。

<p>在用于 X.509 CRL 的 CertificateFactory 情况中，<code>inStream</code> 可能包含单个 DER 编码的 CRL。另外，<code>inStream</code> 可能包含一个 PKCS#7 CRL 集合。这是一个 PKCS#7 <i>SignedData</i> 对象，具有惟一被 <i>crl</i> 的有效字段。需要特别指出的是，签名和内容会被忽略。此格式允许同时下载多个 CRL。如果没有 CRL，则返回一个空集合。

<p>注意，如果给定的输入流不支持 {@link java.io.InputStream#mark(int) mark} 和 {@link java.io.InputStream#reset() reset}，则此方法将使用整个输入流。

@param inStream 带有 CRL 的输入流。

@return java.security.cert.CRL 对象的集合视图（可能为空），用输入流中的数据对该对象进行初始化。

@exception CRLException 如果发生解析错误。

<!-- END DATA -->
