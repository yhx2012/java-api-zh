<!-- BEGIN KEY -->
public abstract class java.security.cert.CertPathValidatorSpi extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

{@link CertPathValidator CertPathValidator} 类的<i>服务提供者接口</i> (<b>SPI</b>)。所有 <code>CertPathValidator</code> 实现必须包括扩展此类 (<code>CertPathValidatorSpi</code>) 并实现其所有方法的类（SPI 类）。通常，只应通过 <code>CertPathValidator</code> 类来访问此类的实例。有关细节，请参阅 Java Cryptography Architecture。
 <p>
<b>并发访问</b>
 <p>
对于多个线程的并发访问，无需保护此类的实例。需要并发访问单个 <code>CertPathValidatorSpi</code> 实例的多个线程应该在它们之间实现同步并在调用包装的 <code>CertPathValidator</code> 对象前提供所需的锁定。
 <p>
但是 <code>CertPathValidatorSpi</code> 的实现仍可能遇到并发问题，因为对于每个线程都操作一个不同 <code>CertPathValidatorSpi</code> 实例的多个线程而言，无需实现同步。

@version 	1.5 12/19/03
@since	1.4
@author	Yassir Elley

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPathValidatorSpi()
<!-- END KEY -->
<!-- BEGIN DATA -->
默认的构造方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.cert.CertPathValidatorResult java.security.cert.CertPathValidatorSpi.engineValidate(CertPath certPath, CertPathParameters params) throws java.security.cert.CertPathValidatorException, java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的算法参数集验证指定的证书路径。
 <p>
所指定的 <code>CertPath</code> 必须是该验证算法所支持的类型，否则会抛出 <code>InvalidAlgorithmParameterException</code>。例如，实现 PKIX 算法的 <code>CertPathValidator</code> 会验证 X.509 类型的 <code>CertPath</code> 对象。

@param certPath 要被验证的 <code>CertPath</code>
@param params 算法参数
@return 验证算法的结果
@exception CertPathValidatorException 如果 <code>CertPath</code> 未通过验证
@exception InvalidAlgorithmParameterException 如果指定的参数或指定 <code>CertPath</code> 的类型不适合此 <code>CertPathValidator</code>

<!-- END DATA -->
