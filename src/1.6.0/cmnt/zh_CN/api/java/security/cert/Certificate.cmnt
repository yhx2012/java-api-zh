<!-- BEGIN KEY -->
public abstract class java.security.cert.Certificate extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>管理各种身份证书的抽象类。身份证书是一个主体与由另一个主体所担保的公钥之间的绑定关系。（一个主体表示一种实体，如个体用户、一个用户组或一家公司）。
<p>
此类是具有不同格式但是很常用的证书的抽象。例如，不同的证书类型（如 X.509 和 PGP）共享通用的证书功能（如编码和验证）和某些信息类型（如公钥）。
 <p>
虽然 X.509、PGP 和 SDSI 证书包含不同的信息集，并且它们以不同的方式存储和获取信息，但都可以通过继承 Certificate 类来实现它们。

@see X509Certificate
@see CertificateFactory

@author Hemma Prafullchandra
@version 1.24, 12/19/03

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.cert.Certificate(String type)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建指定类型的证书。

@param type 证书类型的标准名称。有关标准证书类型的信息，请参见 <a href=
 "../../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">Java Cryptography Architecture API Specification &amp; Reference </a> 中的 Appendix A。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.security.cert.Certificate.getType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此证书的类型。

@return 此证书的类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.cert.Certificate.equals(Object other)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较此证书与指定对象的相等性。如果 <code>other</code> 对象是一个 <code>Certificate</code> 实例，则获取其编码形式并且与此证书的编码形式进行比较。

@param other 要与此证书进行相等性测试的对象。
@return 当且仅当两个证书的编码形式匹配时，返回 true；否则，返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.cert.Certificate.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
根据此证书的编码形式返回该证书的哈希码值。

@return 哈希码值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract byte[] java.security.cert.Certificate.getEncoded() throws java.security.cert.CertificateEncodingException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此证书的编码形式。假定每种证书类型只有一种编码形式；例如 X.509 证书将以 ASN.1 DER 的形式进行编码。

@return 此证书的编码形式

@exception CertificateEncodingException 如果出现编码错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.security.cert.Certificate.verify(PublicKey key) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
<!-- END KEY -->
<!-- BEGIN DATA -->
验证是否已使用与指定公钥相应的私钥签署了此证书。

@param key 用于进行验证的 PublicKey。

@exception NoSuchAlgorithmException 如果签名算法不受支持。
@exception InvalidKeyException 如果 key 不正确。
@exception NoSuchProviderException 如果没有默认的提供者。
@exception SignatureException 如果出现签名错误。
@exception CertificateException 如果出现编码错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.security.cert.Certificate.verify(PublicKey key, String sigProvider) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
<!-- END KEY -->
<!-- BEGIN DATA -->
验证是否已使用与指定公钥相应的私钥签署了此证书。此方法使用指定提供者所提供的签名验证引擎。

@param key 用于进行验证的 PublicKey。
@param sigProvider 签名提供者的名称。

@exception NoSuchAlgorithmException 如果签名算法不受支持。
@exception InvalidKeyException 如果 key 不正确。
@exception NoSuchProviderException 如果提供者不正确。
@exception SignatureException 如果出现签名错误。
@exception CertificateException 如果出现编码错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String java.security.cert.Certificate.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此证书的字符串表示形式。

@return 此证书的字符串表示形式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.PublicKey java.security.cert.Certificate.getPublicKey()
<!-- END KEY -->
<!-- BEGIN DATA -->
从此证书中获取公钥。

@return 公钥。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object java.security.cert.Certificate.writeReplace() throws java.io.ObjectStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
替换要被序列化的 Certificate。

@return 要序列化的对象的替换 Certificate 对象

@throws java.io.ObjectStreamException 如果无法创建代表此 Certificate 的新对象
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object java.security.cert.Certificate.writeReplace() throws java.io.ObjectStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
替换要被序列化的 Certificate。

@return 要序列化的对象的替换 Certificate 对象

@throws java.io.ObjectStreamException 如果新对象表示无法创建此 Certificate
@since 1.3

<!-- END DATA -->
