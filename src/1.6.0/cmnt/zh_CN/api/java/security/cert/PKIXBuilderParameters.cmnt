<!-- BEGIN KEY -->
public class java.security.cert.PKIXBuilderParameters extends java.security.cert.PKIXParameters
<!-- END KEY -->
<!-- BEGIN DATA -->
用作 PKIX <code>CertPathBuilder</code> 算法的输入的参数。
 <p>
PKIX <code>CertPathBuilder</code> 使用这些参数{@link CertPathBuilder#build 构建}一个已根据 PKIX 证书路径验证算法验证的 <code>CertPath</code>。

<p>要实例化 <code>PKIXBuilderParameters</code> 对象，应用程序必须指定一个或多个由 PKIX 证书路径验证算法所定义的<i>最受信任的 CA</i>。可以使用两个构造方法中的一个来指定最受信任的 CA。应用程序可以调用 {@link #PKIXBuilderParameters(Set, CertSelector) PKIXBuilderParameters(Set, CertSelector)} 来指定一个 <code>TrustAnchor</code> 对象 <code>Set</code>，其中每个对象都标识一个最受信任的 CA。另外，应用程序也可调用 {@link #PKIXBuilderParameters(KeyStore, CertSelector) PKIXBuilderParameters(KeyStore, CertSelector)} 来指定一个 <code>KeyStore</code> 实例，其中包含多个受信任的证书项，每个项都认为是一个最受信任的 CA。

<p>另外，应用程序必须指定有关目标证书的限制，<code>CertPathBuilder</code> 将试图为该目标证书构建路径。以 <code>CertSelector</code> 对象的形式指定这些限制。这些限制应该为 <code>CertPathBuilder</code> 提供足够的搜索标准以找到该目标证书。<code>X509Certificate</code> 的最小标准通常包括了主体名称和/或一个或多个主体替换名称。如果未指定足够的标准，则 <code>CertPathBuilder</code> 可能抛出 <code>CertPathBuilderException</code>。
 <p>
<b>并发访问</b>
 <p>
除非另行指定，否则此类中所定义的方法不是线程安全的。需要并发访问单个对象的多个线程应该在它们之间实现同步并提供所需的锁定。对于每个线程都操作一个不同对象的多个线程而言，无需实现同步。

@see CertPathBuilder

@version 	1.15 12/19/03
@since 	1.4
@author	Sean Mullan

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.PKIXBuilderParameters(java.util.Set<java.security.cert.TrustAnchor> trustAnchors, CertSelector targetConstraints) throws java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定最受信任 CA <code>Set</code> 的 <code>PKIXBuilderParameters</code> 的实例。该 set 中的每个元素都是一个 {@link TrustAnchor TrustAnchor}。

<p>注意，为了保护该 <code>Set</code> 以防后续修改，会复制该 Set。

@param trustAnchors 一个 <code>TrustAnchor</code> <code>Set</code>
@param targetConstraints 指定有关目标证书限制的 <code>CertSelector</code>
@throws InvalidAlgorithmParameterException 如果 <code>trustAnchors</code> 为空 <code>(trustAnchors.isEmpty() == true)</code>
@throws NullPointerException 如果 <code>trustAnchors</code> 为 <code>null</code>
@throws ClassCastException 如果 <code>trustAnchors</code> 的任一元素不是 <code>java.security.cert.TrustAnchor</code> 类型的

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.PKIXBuilderParameters(KeyStore keystore, CertSelector targetConstraints) throws java.security.KeyStoreException, java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>PKIXBuilderParameters</code> 实例，它根据指定 <code>KeyStore</code> 中所包含的受信任证书项生成最受信任的 CA 集。只考虑那些包含受信任 <code>X509Certificate</code> 的 keystore 项；忽略所有其他证书类型。

@param keystore 一个 <code>KeyStore</code>，将根据它来生成最受信任的 CA 集
@param targetConstraints 指定有关目标证书限制的 <code>CertSelector</code>
@throws KeyStoreException 如果尚未初始化 <code>keystore</code>
@throws InvalidAlgorithmParameterException 如果 <code>keystore</code> 不包含受信的证书项
@throws NullPointerException 如果 <code>keystore</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.cert.PKIXBuilderParameters.setMaxPathLength(int maxPathLength)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置证书路径中可能存在的非自发中间证书的最大数目值。如果主体和发布方字段中出现的 DN 相同并且不为空，则该证书是自发布的。注意，证书路径中最后一个证书不是中间证书，并且不受此限制的约束。通常最后一个证书是一个结束实体证书，但它可能是一个 CA 证书。PKIX <code>CertPathBuilder</code> 实例所构建的路径不能超过所指定的长度。

<p> 值为 0 意味着该路径只包含单个证书。值为 -1 则意味着该路径长度是不受约束的（即没有最大值）。如果未指定，则默认的最大路径长度是 5。设置小于 -1 的值将导致抛出异常。

<p> 如果任意 CA 证书包含 <code>BasicConstraintsExtension</code>，那么只要结果是一个更短长度的证书路径，则扩展的 <code>pathLenConstraint</code> 字段覆盖最大路径长度参数。

@param maxPathLength 证书路径中可能存在的中间非自发布证书的最大数
@throws InvalidParameterException 如果将 <code>maxPathLength</code> 设置为小于 -1 的值

@see #getMaxPathLength

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.cert.PKIXBuilderParameters.getMaxPathLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回证书路径中可能存在的中间非自发布证书的最大数目值。有关详细信息，请参阅 {@link #setMaxPathLength} 方法。

@return 证书路径中可能存在的中间非自发布证书的最大数，如果没有限制，则返回 -1

@see #setMaxPathLength

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.cert.PKIXBuilderParameters.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述该参数的格式化字符串。

@return 描述该参数的格式化字符串

<!-- END DATA -->
