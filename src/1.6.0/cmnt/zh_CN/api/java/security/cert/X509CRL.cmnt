<!-- BEGIN KEY -->
public abstract class java.security.cert.X509CRL extends java.security.cert.CRL implements java.security.cert.X509Extension
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
X.509 证书撤消列表 (CRL) 的抽象类。CRL 是标识已撤消证书的时间戳列表。它由证书颁发机构 (CA) 签署并且可在公共存储库中随意使用。  
 
<p>在 CRL 中，通过每个已撤消证书的证书序列号来标识该证书。当使用证书的系统使用某个证书（例如，用它验证远程用户的数字签名）时，该系统不仅要检查该证书的签名和有效性，而且还要获取一个最近合适的 CRL，并检查该证书序列号在不在该 CRL 中。&ldquo;最近合适&rdquo;的含义可能随本地策略的不同而有所不同，但是它通常指的是最近发布的 CRL。CA 定期发布新的 CRL（例如每小时、每日、每周）。当撤消发生时向 CRL 添加一个项，而到达证书的终止日期时，可能会移除一个项。
 <p>
X.509 v2 CRL 格式的 ASN.1 描述如下：
 <pre>
 CertificateList  ::=  SEQUENCE  {
     tbsCertList          TBSCertList,
     signatureAlgorithm   AlgorithmIdentifier,
     signature            BIT STRING  }
 </pre>
 <p>
在 RFC 2459，即 &quot;Internet X.509 Public Key Infrastructure Certificate and CRL Profile&quot;（位于 <A HREF="http://www.ietf.org/rfc/rfc2459.txt">http://www.ietf.org/rfc/rfc2459.txt </A>）中可找到更多信息。    
 <p>
<code>tbsCertList</code> 的 ASN.1 定义是：
 <pre>
 TBSCertList  ::=  SEQUENCE  {
     version                 Version OPTIONAL,
                             -- if present, must be v2
     signature               AlgorithmIdentifier,
     issuer                  Name,
     thisUpdate              ChoiceOfTime,
     nextUpdate              ChoiceOfTime OPTIONAL,
     revokedCertificates     SEQUENCE OF SEQUENCE  {
         userCertificate         CertificateSerialNumber,
         revocationDate          ChoiceOfTime,
         crlEntryExtensions      Extensions OPTIONAL
                                 -- if present, must be v2
         }  OPTIONAL,
     crlExtensions           [0]  EXPLICIT Extensions OPTIONAL
                                  -- if present, must be v2
     }
 </pre>
 <p>
CRL 是使用证书工厂进行实例化的。下面的示例演示了如何实例化一个 X.509 CRL：
 <pre><code> 
 InputStream inStream = new FileInputStream(&quot;fileName-of-crl&quot;);
 CertificateFactory cf = CertificateFactory.getInstance(&quot;X.509&quot;);
 X509CRL crl = (X509CRL)cf.generateCRL(inStream);
 inStream.close();
 </code></pre>

@author Hemma Prafullchandra

@version 1.29, 12/19/03

@see CRL
@see CertificateFactory
@see X509Extension

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.cert.X509CRL()
<!-- END KEY -->
<!-- BEGIN DATA -->
X.509 CRL 的构造方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.cert.X509CRL.equals(Object other)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较此 CRL 与给定对象的相等性。如果 <code>other</code> 对象是一个 <code>instanceof</code> <code>X509CRL</code>，则获取其编码形式并且与此 CRL 的编码形式进行比较。
 
@param other 要与此 CRL 进行相等性测试的对象。
 
@return 当且仅当两个 CRL 的编码形式匹配时才返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.cert.X509CRL.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
根据此 CRL 的编码形式返回该 CRL 的哈希码值。

@return 哈希码值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract byte[] java.security.cert.X509CRL.getEncoded() throws java.security.cert.CRLException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 CRL 的 ASN.1 DER 编码形式。

@return 此证书的编码形式
@exception CRLException 如果发生编码错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.security.cert.X509CRL.verify(PublicKey key) throws java.security.cert.CRLException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
<!-- END KEY -->
<!-- BEGIN DATA -->
验证是否已使用与给定公钥相应的私钥签署了此 CRL。

@param key 用于进行验证的 PublicKey。

@exception NoSuchAlgorithmException 如果签名算法不受支持。
@exception InvalidKeyException 如果密钥不正确。
@exception NoSuchProviderException 如果没有默认的提供者。
@exception SignatureException 如果发生签名错误。
@exception CRLException 如果发生编码错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.security.cert.X509CRL.verify(PublicKey key, String sigProvider) throws java.security.cert.CRLException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
<!-- END KEY -->
<!-- BEGIN DATA -->
验证是否已使用与给定公钥相应的私钥签署了此 CRL。此方法使用给定提供者所提供的签名验证引擎。

@param key 用于进行验证的 PublicKey。
@param sigProvider 签名提供者的名称。
 
@exception NoSuchAlgorithmException 如果签名算法不受支持。
@exception InvalidKeyException 如果密钥不正确。
@exception NoSuchProviderException 如果提供者不正确。
@exception SignatureException 如果发生签名错误。
@exception CRLException 如果发生编码错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.security.cert.X509CRL.getVersion()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 CRL 的 <code>version</code>（版本号）值。此内容的 ASN.1 定义如下：
 <pre>
 version    Version OPTIONAL,
             -- if present, must be v2<p>
 Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
             -- v3 does not apply to CRLs but appears for consistency
             -- with definition of Version for certs
 </pre>

@return 版本号，比如 1 或 2。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.Principal java.security.cert.X509CRL.getIssuerDN()
<!-- END KEY -->
<!-- BEGIN DATA -->
<strong>已过时</strong>，由 {@linkplain #getIssuerX500Principal()} 替代。此方法返回作为特定 Principal 对象实现的 <code>issuer</code>，可移植的代码不应依靠该对象。

 <p>
获取 CRL 的 <code>issuer</code>（发布方的标识名）。发布方名称标识了签署（并发布）该 CRL 的实体。
 
<p>发布方名称字段包含一个 X.500 标识名 (DN)。此内容的 ASN.1 定义如下：
 <pre>
 issuer    Name

 Name ::= CHOICE { RDNSequence }
 RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
 RelativeDistinguishedName ::=
     SET OF AttributeValueAssertion

 AttributeValueAssertion ::= SEQUENCE {
                               AttributeType,
                               AttributeValue }
 AttributeType ::= OBJECT IDENTIFIER
 AttributeValue ::= ANY
 </pre>
<code>Name</code> 描述了一个层次结构名，由属性（如国家/地区名）和相应值（如 US）组成。<code>AttributeValue</code> 组件的类型由 <code>AttributeType</code> 来确定；一般是 <code>directoryString</code>。<code>directoryString</code> 通常是 <code>PrintableString</code>、<code>TeletexString</code> 或 <code>UniversalString</code> 之一。
 
@return 一个 Principal，其名称是发布方的标识名。

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.x500.X500Principal java.security.cert.X509CRL.getIssuerX500Principal()
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>X500Principal</code> 的形式返回 CRL 的发布方（发布方标识名）值。
 <p>
建议子类重写此方法。

@return 一个表示发布方标识名的 <code>X500Principal</code>
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Date java.security.cert.X509CRL.getThisUpdate()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 CRL 的 <code>thisUpdate</code> 日期。此内容的 ASN.1 定义如下：
 <pre>
 thisUpdate   ChoiceOfTime
 ChoiceOfTime ::= CHOICE {
     utcTime        UTCTime,
     generalTime    GeneralizedTime }
 </pre>

@return 获取 CRL 的 <code>thisUpdate</code> 日期。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Date java.security.cert.X509CRL.getNextUpdate()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 CRL 的 <code>nextUpdate</code> 日期。

@return 获取 CRL 的 <code>nextUpdate</code> 日期，如果不存在，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.cert.X509CRLEntry java.security.cert.X509CRL.getRevokedCertificate(BigInteger serialNumber)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取具有给定证书 serialNumber 的 CRL 项（如果有）。

@param serialNumber 要查找其 CRL 项的证书的序列号
@return 具有给定序列号的项，如果此 CRL 中没有该项，则返回 null。
@see X509CRLEntry

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.X509CRLEntry java.security.cert.X509CRL.getRevokedCertificate(X509Certificate certificate)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取给定证书的 CRL 项（如果有）。

<p>此方法可用于在间接 CRL 中查找 CRL 项，间接 CRL 意味着其中包含来自不同于 CRL 发布方的发布方的项。默认的实现只返回由 CRL 发布方所发布的证书项。希望支持间接 CRL 的子类应该重写此方法。

@param certificate 证书，在 CRL 中查找此证书的 CRL 项
@return 给定证书的项，如果此 CRL 中没有该项，则返回 null。
@exception NullPointerException 如果 certificate 为 null

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Set<? extends java.security.cert.X509CRLEntry> java.security.cert.X509CRL.getRevokedCertificates()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 CRL 中的所有项。这会返回一个 X509CRLEntry 对象 Set。

@return 所有项，如果没有项，则返回 null。
@see X509CRLEntry

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract byte[] java.security.cert.X509CRL.getTBSCertList() throws java.security.cert.CRLException
<!-- END KEY -->
<!-- BEGIN DATA -->
从此 CRL 中获取以 DER 编码的 CRL 信息，即 <code>tbsCertList</code>。这可用于独立验证签名。

@return 以 DER 编码的 CRL 信息。
@exception CRLException 如果发生编码错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract byte[] java.security.cert.X509CRL.getSignature()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 CRL 的 <code>signature</code> 值（原始签名位）。此内容的 ASN.1 定义如下：
 <pre>
 signature     BIT STRING
 </pre>

@return 签名。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String java.security.cert.X509CRL.getSigAlgName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 CRL 签名算法的签名算法名。例如字符串 &quot;SHA-1/DSA&quot;。此内容的 ASN.1 定义如下：
 <pre>
 signatureAlgorithm   AlgorithmIdentifier<p>
 AlgorithmIdentifier  ::=  SEQUENCE  {
     algorithm               OBJECT IDENTIFIER,
     parameters              ANY DEFINED BY algorithm OPTIONAL  }
                             -- contains a value of the type
                             -- registered for use with the
                             -- algorithm object identifier value
 </pre>
 
<p>根据 <code>algorithm</code> OID 字符串确定该算法名。

@return 签名算法名。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String java.security.cert.X509CRL.getSigAlgOID()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 CRL 的签名算法 OID 字符串。OID 由一组句点分隔的非负整数集来表示。例如，按照 RFC 2459 中的规定，字符串 &quot;1.2.840.10040.4.3&quot; 标识使用 DSA 签名算法的 SHA-1。
 
<p>有关相关的 ASN.1 定义，请参见 {@link #getSigAlgName() getSigAlgName}。

@return 签名算法 OID 字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract byte[] java.security.cert.X509CRL.getSigAlgParams()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 CRL 的签名算法中 DER 编码形式的签名算法参数。在大多数情况下，该签名算法参数为 null；该参数通常提供公钥。如果需要访问个别参数值，则使用 {@link java.security.AlgorithmParameters AlgorithmParameters} 并使用 {@link #getSigAlgName() getSigAlgName} 所返回的名称进行实例化。
 
<p>有关相关的 ASN.1 定义，请参见 {@link #getSigAlgName() getSigAlgName}。

@return DER 编码形式的签名算法参数，如果没有该参数，则返回 null。

<!-- END DATA -->
