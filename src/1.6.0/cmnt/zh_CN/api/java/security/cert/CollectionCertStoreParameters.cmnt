<!-- BEGIN KEY -->
public class java.security.cert.CollectionCertStoreParameters extends java.lang.Object implements java.security.cert.CertStoreParameters
<!-- END KEY -->
<!-- BEGIN DATA -->
用作 Collection <code>CertStore</code> 算法输入的参数。
 <p>
此类用于为 Collection <code>CertStore</code> 算法的实现提供必需的配置参数。此类中所包括的唯一参数是 <code>Collection</code>，<code>CertStore</code> 将从中获取证书和 CRL。
 <p>
<b>并发访问</b>
 <p>
除非另行指定，否则此类中所定义的方法不是线程安全的。需要并发访问单个对象的多个线程应该在它们之间实现同步并提供所需的锁定。对于每个线程都操作一个不同对象的多个线程而言，无需实现同步。

@version 	1.8 05/05/04
@since	1.4
@author	Steve Hanna
@see         java.util.Collection
@see         CertStore

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CollectionCertStoreParameters(java.util.Collection<?> collection)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 <code>CollectionCertStoreParameters</code> 的一个实例，它允许从指定的 <code>Collection</code> 中获取证书和 CRL。如果指定的 <code>Collection</code> 包含不是 <code>Certificate</code> 或 <code>CRL</code> 的对象，则该 Collection <code>CertStore</code> 将忽略该对象。
 <p>
该 <code>Collection</code> <b>不是</b>复制的。相反，使用的是一个引用。这就允许调用方随后从 <code>Collection</code> 中添加或移除 <code>Certificates</code> 或 <code>CRL</code>，从而更改 <code>CertStore</code> 可用的 <code>Certificates</code> 或 <code>CRL</code> 集。Collection <code>CertStore</code> 不会修改该 <code>Collection</code> 的内容。
 <p>
如果某个线程修改此 <code>Collection</code> 的同时，另一个线程正在调用已使用此 <code>Collection</code> 初始化的 Collection <code>CertStore</code> 方法，则该 <code>Collection</code> 必须具有快速失败的迭代器。

@param collection <code>Certificate</code> 和 <code>CRL</code> 的 <code>Collection</code>
@exception NullPointerException 如果 <code>collection</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CollectionCertStoreParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有默认参数值（一个空的并且不可变的 <code>Collection</code>）的 <code>CollectionCertStoreParameters</code> 的实例

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Collection<?> java.security.cert.CollectionCertStoreParameters.getCollection()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回从中获取 <code>Certificate</code> 和 <code>CRL</code> 的 <code>Collection</code>。这<b>不是</b>该 <code>Collection</code> 的副本，它是一个引用。这就允许调用方随后从该 <code>Collection</code> 中添加或移除 <code>Certificates</code> 或 <code>CRL</code>。

@return <code>Collection</code>（不会为 null）

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.security.cert.CollectionCertStoreParameters.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象的副本。注意，仅复制对该 <code>Collection</code> 引用，而不复制内容。

@return 副本

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.cert.CollectionCertStoreParameters.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述该参数的格式化字符串。

@return 描述该参数的格式化字符串

<!-- END DATA -->
