<!-- BEGIN KEY -->
public abstract class java.security.cert.CertPathBuilderSpi extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
{@link CertPathBuilder CertPathBuilder} 类的<i>服务提供者接口</i> (<b>SPI</b>)。所有 <code>CertPathBuilder</code> 实现必须包括扩展此类 (<code>CertPathBuilderSpi</code>) 并实现其所有方法的类（SPI 类）。通常，只应通过 <code>CertPathBuilder</code> 类来访问此类的实例。有关细节，请参阅《Java Cryptography Architecture》。 
 <p>
<b>并发访问</b>
 <p>
对于多个线程的并发访问，无需保护此类的实例。需要并发访问单个 <code>CertPathBuilderSpi</code> 实例的多个线程应该在它们之间实现同步并在调用包装的 <code>CertPathBuilder</code> 对象前提供所需的锁定。
 <p>
但是 <code>CertPathBuilderSpi</code> 的实现仍可能遇到并发问题，因为每个线程都操作一个不同 <code>CertPathBuilderSpi</code> 实例的多个线程无需实现同步。

@version 	1.5 12/19/03
@since	1.4
@author	Sean Mullan

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPathBuilderSpi()
<!-- END KEY -->
<!-- BEGIN DATA -->
默认的构造方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.cert.CertPathBuilderResult java.security.cert.CertPathBuilderSpi.engineBuild(CertPathParameters params) throws java.security.cert.CertPathBuilderException, java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->
尝试使用指定的算法参数集构建一个证书路径。

@param params 算法参数
@return 构建算法的结果
@throws CertPathBuilderException 如果该生成器无法构造一个满足指定参数要求的证书路径
@throws InvalidAlgorithmParameterException 如果指定的参数不适合此 <code>CertPathBuilder</code>

<!-- END DATA -->
