<!-- BEGIN KEY -->
public interface java.security.cert.PolicyNode
<!-- END KEY -->
<!-- BEGIN DATA -->
PKIX 证书路径验证算法所定义的、不可变的有效策略树节点。

<p>PKIX 证书路径验证算法的输出是有效策略树，其中包括确定为有效的策略、如何实现该确定，以及遇到的所有策略限定符。此树的深度为 <i>n</i>，其中 <i>n</i> 是已验证的证书路径的长度。

<p>大多数应用程序无需检验有效策略树。它们可以通过设置 <code>PKIXParameters</code> 中与策略相关的参数来获得其策略处理目标。但是，大多数复杂的应用程序都可使用有效策略树，特别是那些处理策略限定符的应用程序。

<p>{@link PKIXCertPathValidatorResult#getPolicyTree() PKIXCertPathValidatorResult.getPolicyTree} 返回有效策略树的根节点。可使用 {@link #getChildren getChildren} 和 {@link #getParent getParent} 方法遍历该树。可使用 <code>PolicyNode</code> 的其他方法来获取有关特定节点的数据。

<p><b>并发访问</b>
<p>所有 <code>PolicyNode</code> 对象必须是不可变的和线程安全的。多个线程在单个 <code>PolicyNode</code> 对象（或多个对象）上并发调用此类中所定义的各种方法不会产生坏的影响。此规定适用于此类的所有公共字段和方法，以及由子类添加或重写的所有公共字段和方法。 

@version     1.9 12/19/03
@since       1.4
@author      Sean Mullan

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.PolicyNode java.security.cert.PolicyNode.getParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此节点的父节点，如果此节点是根节点，则返回 <code>null</code>。

@return 此节点的父节点，如果此节点是根节点，则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<? extends java.security.cert.PolicyNode> java.security.cert.PolicyNode.getChildren()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回在此节点的子节点上进行迭代的迭代器。任何试图通过该 <code>Iterator</code> 的 remove 方法来修改此节点的子节点的行为都必须抛出 <code>UnsupportedOperationException</code>。

@return 在此节点的子节点上进行迭代的迭代器

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.cert.PolicyNode.getDepth()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回有效策略树中此节点的深度。

@return 此节点的深度（0 代表根节点，1 代表其子节点，依此类推）

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.cert.PolicyNode.getValidPolicy()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此节点所表示的有效策略。

@return 此节点所表示的有效策略的 <code>String</code> OID，或者是特殊值 &quot;any-policy&quot;。对于根节点，此方法始终返回特殊值 &quot;any-policy&quot;。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<? extends java.security.cert.PolicyQualifierInfo> java.security.cert.PolicyNode.getPolicyQualifiers()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此节点所表示的有效策略相关联的策略限定符集。

@return 一个不可变的 <code>PolicyQualifierInfo</code> <code>Set</code>。对于根节点，此方法始终返回一个空 <code>Set</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.lang.String> java.security.cert.PolicyNode.getExpectedPolicies()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回预期的策略集，其中的策略将满足下一个要处理证书中此节点的有效策略。

@return 一个不可变的预期策略 <code>String</code> OID 的 <code>Set</code>，或者具有单个特殊值 &quot;any-policy&quot; 的不可变 <code>Set</code>。对于根节点，此方法始终返回具有单个值 &quot;any-policy&quot; 的 <code>Set</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.cert.PolicyNode.isCritical()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回最近处理的证书中其证书策略扩展的关键性指示符。

@return 如果扩展标记为关键的，则返回 <code>true</code>；否则返回 <code>false</code>。对于根节点，此方法始终返回 <code>false</code>。

<!-- END DATA -->
