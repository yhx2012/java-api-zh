<!-- BEGIN KEY -->
public class java.security.cert.CertPathBuilderException extends java.security.GeneralSecurityException
<!-- END KEY -->
<!-- BEGIN DATA -->
指示在使用 <code>CertPathBuilder</code> 构建证书路径时遇到了某种问题的异常。
 <p>
<code>CertPathBuilderException</code> 提供了对包装异常的支持。{@link #getCause getCause} 方法返回导致此异常抛出的 throwable（如果有）。 
 <p>
<b>并发访问</b>
 <p>
除非另行指定，否则此类中所定义的方法不是线程安全的。需要并发访问单个对象的多个线程应该在它们之间实现同步并提供所需的锁定。每个线程都操作单独对象的多个线程无需实现同步。

@see CertPathBuilder

@version 	1.7 12/19/03
@since	1.4
@author 	Sean Mullan

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPathBuilderException()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建详细消息为 <code>null</code> 的 <code>CertPathBuilderException</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPathBuilderException(String msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带给定详细消息的 <code>CertPathBuilderException</code>。详细消息是更为详细地描述此特定异常的 <code>String</code>。

@param msg 详细消息

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPathBuilderException(Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建包装指定 throwable 的 <code>CertPathBuilderException</code>。这就允许将任何异常都转换成 <code>CertPathBuilderException</code>，同时保留有关已包装异常的信息，而这些信息可能对调试很有用。将详细消息设置为：(<code>cause==null ? null :cause.toString()</code>)（它通常包含 cause 的类和详细消息）。

@param cause cause（保存此 cause，以便以后通过 {@link #getCause getCause()} 方法获取它）。（允许使用 <code>null</code> 值，并指出 cause 是不存在的或是未知的。）

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPathBuilderException(String msg, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带指定详细消息和原因的 <code>CertPathBuilderException</code>。

@param msg 详细消息
@param cause cause（保存此 cause，以便以后通过 {@link #getCause getCause()} 方法获取它）。（允许使用 <code>null</code> 值，并指出 cause 是不存在的或是未知的。）

<!-- END DATA -->
