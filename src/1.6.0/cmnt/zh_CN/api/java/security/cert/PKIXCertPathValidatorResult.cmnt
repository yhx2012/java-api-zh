<!-- BEGIN KEY -->
public class java.security.cert.PKIXCertPathValidatorResult extends java.lang.Object implements java.security.cert.CertPathValidatorResult
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示 PKIX 证书路径验证算法执行成功时所返回的结果。 

<p><code>CertPathValidator</code> 对象的 {@link CertPathValidator#validate validate} 方法所返回的 <code>PKIXCertPathValidatorResult</code> 实例实现该 PKIX 算法。

<p> 所有的 <code>PKIXCertPathValidatorResult</code> 对象都包含由验证算法所生成的有效策略树和主体公钥，以及一个描述作为证书路径受信定位点的证书颁发机构 (CA) 的 <code>TrustAnchor</code>。
 <p>
<b>并发访问</b>
 <p>
除非另行指定，否则此类中所定义的方法不是线程安全的。需要并发访问单个对象的多个线程应该在它们之间实现同步并提供所需的锁定。对于每个线程都操作一个不同对象的多个线程而言，无需实现同步。

@see CertPathValidatorResult

@version 	1.9 12/19/03
@since	1.4
@author	Yassir Elley
@author	Sean Mullan

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.PKIXCertPathValidatorResult(TrustAnchor trustAnchor, PolicyNode policyTree, PublicKey subjectPublicKey)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建包含指定参数的 <code>PKIXCertPathValidatorResult</code> 实例。 
 
@param trustAnchor 描述作为证书路径受信定位点的 CA 的 <code>TrustAnchor</code>
@param policyTree 不可变的有效策略树，如果没有有效的策略，则为 <code>null</code>
@param subjectPublicKey 主体的公钥
@throws NullPointerException 如果 <code>subjectPublicKey</code> 或 <code>trustAnchor</code> 参数为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.TrustAnchor java.security.cert.PKIXCertPathValidatorResult.getTrustAnchor()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述作为证书路径受信定位点的 CA 的 <code>TrustAnchor</code>。

@return <code>TrustAnchor</code>（从不为 <code>null</code>）

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.PolicyNode java.security.cert.PKIXCertPathValidatorResult.getPolicyTree()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 PKIX 证书路径验证算法所得的有效策略树的根节点。返回的 <code>PolicyNode</code> 对象和所有通过公共方法所返回的对象都是不可变的。

<p>大多数应用程序无需检验有效策略树。它们可以通过设置 <code>PKIXParameters</code> 中与策略相关的参数来获得其策略处理目标。但是更为复杂的应用程序，特别是那些处理策略限定符的应用程序可能需要使用 {@link PolicyNode#getParent PolicyNode.getParent} 和 {@link PolicyNode#getChildren PolicyNode.getChildren} 方法来遍历有效策略树。
 
@return 有效策略树的根节点，如果没有有效的策略，则返回 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.PublicKey java.security.cert.PKIXCertPathValidatorResult.getPublicKey()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回证书路径主体（目标）的公钥，如果适用，要包括所有继承的公钥参数。 

@return 主体的公钥（从不为 <code>null</code>）

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.security.cert.PKIXCertPathValidatorResult.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象的副本。

@return 副本

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.cert.PKIXCertPathValidatorResult.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>PKIXCertPathValidatorResult</code> 的可打印表示形式。

@return 描述此 <code>PKIXCertPathValidatorResult</code> 内容的 <code>String</code>

<!-- END DATA -->
