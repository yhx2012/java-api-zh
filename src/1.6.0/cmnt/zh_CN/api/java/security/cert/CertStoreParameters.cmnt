<!-- BEGIN KEY -->
public interface java.security.cert.CertStoreParameters extends java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>CertStore</code> 参数的规范。
 <p>
此接口的目的是对所有 <code>CertStore</code> 参数规范进行分组（并为之提供类型安全）。所有 <code>CertStore</code> 参数规范必须实现此接口。  
 <p>
通常将 <code>CertStoreParameters</code> 对象作为参数传递到某个 {@link CertStore#getInstance CertStore.getInstance} 方法中。<code>getInstance</code> 方法返回一个用于获取 <code>Certificate</code> 和 <code>CRL</code> 的 <code>CertStore</code>。使用指定的参数初始化返回的 <code>CertStore</code>。不同类型的 <code>CertStore</code> 所需的参数类型有所不同。

@see CertStore#getInstance

@version 	1.5 12/19/03
@since	1.4
@author	Steve Hanna

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.security.cert.CertStoreParameters.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
对此 <code>CertStoreParameters</code> 进行复制。
 <p>
&ldquo;副本&rdquo;的准确含义可能依赖于 <code>CertStoreParameters</code> 对象的类。典型的实现会执行此对象的&ldquo;深层复制&rdquo;，但这不是绝对要求。某些实现可能执行此对象的某些或全部字段的&ldquo;浅表复制&rdquo;。 
 <p>
注意，<code>CertStore.getInstance</code> 方法对指定的 <code>CertStoreParameters</code> 进行复制。<code>clone</code> 的深层复制实现更为安全并且更为可靠，因为它可防止调用者随后因修改其初始化参数内容而损坏共享的 <code>CertStore</code>。但是 <code>clone</code> 的浅表复制实现更适合于那些需要保持对 <code>CertStoreParameters</code> 中所含参数的引用的应用程序。例如，浅表复制的 clone 允许应用程序立即释放特定 <code>CertStore</code> 初始化参数的资源，而不是等待垃圾回收机制开始工作。对此应万分小心，因为其他线程可能仍在使用 <code>CertStore</code>。 
 <p>
每个子类都应该声明此方法的准确行为，这样用户和开发人员才能知道以后的行为。

@return 此 <code>CertStoreParameters</code> 的副本

<!-- END DATA -->
