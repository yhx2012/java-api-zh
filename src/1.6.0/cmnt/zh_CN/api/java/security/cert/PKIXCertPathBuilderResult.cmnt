<!-- BEGIN KEY -->
public class java.security.cert.PKIXCertPathBuilderResult extends java.security.cert.PKIXCertPathValidatorResult implements java.security.cert.CertPathBuilderResult
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示 PKIX 证书路径生成器算法执行成功时所返回的结果。所有使用此算法构建并返回的证书路径都通过了 PKIX 证书路径验证算法的验证。

<p><code>CertPathBuilder</code> 对象的 <code>build</code> 方法所返回的 <code>PKIXCertPathBuilderResult</code> 实例实现该 PKIX 算法。

<p>所有的 <code>PKIXCertPathBuilderResult</code> 对象都包含由构建算法所构造的证书路径、构建算法生成的有效策略树和主体公钥，以及一个描述作为证书路径受信定位点的证书颁发机构 (CA) 的 <code>TrustAnchor</code>。
 <p>
<b>并发访问</b>
 <p>
除非另行指定，否则此类中所定义的方法不是线程安全的。需要并发访问单个对象的多个线程应该在它们之间实现同步并提供所需的锁定。对于每个线程都操作一个不同对象的多个线程而言，无需实现同步。

@see CertPathBuilderResult

@version	1.9 12/19/03
@since	1.4
@author	Anne Anderson

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.PKIXCertPathBuilderResult(CertPath certPath, TrustAnchor trustAnchor, PolicyNode policyTree, PublicKey subjectPublicKey)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建包含指定参数的 <code>PKIXCertPathBuilderResult</code> 实例。

@param certPath 已验证的 <code>CertPath</code>
@param trustAnchor 描述作为证书路径受信的定位点的 CA 的 <code>TrustAnchor</code>
@param policyTree 不可变的有效策略树，如果没有有效的策略，则为 <code>null</code>
@param subjectPublicKey 主体公钥
@throws NullPointerException 如果 <code>certPath</code>、<code>trustAnchor</code> 或 <code>subjectPublicKey</code> 参数为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPath java.security.cert.PKIXCertPathBuilderResult.getCertPath()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回已构建并已验证的证书路径。<code>CertPath</code> 对象不包括受信的定位点。相反，应使用 {@link #getTrustAnchor() getTrustAnchor()} 方法来获得作为证书路径受信定位点的 <code>TrustAnchor</code>。

@return 已构建并已验证的 <code>CertPath</code>（不会为 <code>null</code>）

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.cert.PKIXCertPathBuilderResult.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 <code>PKIXCertPathBuilderResult</code> 的可打印表示形式。

@return 描述此 <code>PKIXCertPathBuilderResult</code> 内容的 <code>String</code>

<!-- END DATA -->
