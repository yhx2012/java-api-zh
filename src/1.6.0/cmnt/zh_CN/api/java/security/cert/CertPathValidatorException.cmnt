<!-- BEGIN KEY -->
public class java.security.cert.CertPathValidatorException extends java.security.GeneralSecurityException
<!-- END KEY -->
<!-- BEGIN DATA -->
指示在验证一个证书路径时遇到了某种问题的异常。 
 <p>
<code>CertPathValidatorException</code> 提供了对包装异常的支持。{@link #getCause getCause} 方法返回导致此异常抛出的 throwable（如果有的话）。 
 <p>
<code>CertPathValidatorException</code> 可能还包括异常抛出时所验证的证书路径，以及导致该异常抛出的证书在证书路径中的索引。使用 {@link #getCertPath getCertPath} 和 {@link #getIndex getIndex} 方法可获取此信息。
 
 <p>
<b>并发访问</b>
 <p>
除非另行指定，否则此类中所定义的方法不是线程安全的。需要并发访问单个对象的多个线程应该在它们之间实现同步并提供所需的锁定。对于每个线程都操作一个不同对象的多个线程而言，无需实现同步。

@see CertPathValidator

@version 	1.10 12/19/03
@since	1.4
@author 	Yassir Elley

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.security.cert.CertPathValidatorException.index
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial 导致该异常抛出的证书在证书路径中的索引

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.security.cert.CertPath java.security.cert.CertPathValidatorException.certPath
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial 异常抛出时所验证的 <code>CertPath</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPathValidatorException()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建不带详细消息的 <code>CertPathValidatorException</code>。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPathValidatorException(String msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带给定详细消息的 <code>CertPathValidatorException</code>。详细消息是描述此特定异常的 <code>String</code>。

@param msg 详细消息

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPathValidatorException(Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建包装指定 throwable 的 <code>CertPathValidatorException</code>。这就允许将任何异常转换成 <code>CertPathValidatorException</code>，同时保留有关已包装异常的信息，而这些信息可能对调试很有用。将详细消息设置为：(<code>cause==null ? null :cause.toString()</code>)&#xFF08;&#x5B83;&#x901A;&#x5E38;&#x5305;&#x542B; cause &#x7684;&#x7C7B;&#x548C;&#x8BE6;&#x7EC6;&#x6D88;&#x606F;&#xFF09;&#x3002;

@param cause cause（保存此 cause，以便以后通过 {@link #getCause getCause()} 方法获取它）。（允许使用 <code>null</code> 值，并指出 cause 是不存在的或是未知的。）

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPathValidatorException(String msg, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带指定详细消息和 cause 的 <code>CertPathValidatorException</code>。

@param msg 详细消息
@param cause  cause（保存此 cause，以便以后通过 {@link #getCause getCause()} 方法获取它）。（允许使用 <code>null</code> 值，并指出 cause 是不存在的或是未知的。）

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPathValidatorException(String msg, Throwable cause, CertPath certPath, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带指定详细消息、cause、证书路径和索引的 <code>CertPathValidatorException</code>。

@param msg 详细消息（如果没有则为 <code>null</code>）
@param cause cause（如果没有则为 <code>null</code>）
@param certPath 遇到错误时正在验证的证书路径
@param index 导致错误的证书在证书路径中的索引（如果不适用，则为 -1）。注意，<code>CertPath</code> 中的证书列表是基于零的。
@throws IndexOutOfBoundsException 如果 index 超出范围 <code>(index &lt; -1 || (certPath != null &amp;&amp; index &gt;= certPath.getCertificates().size())</code>
@throws IllegalArgumentException 如果 <code>certPath</code> 为 <code>null</code> 并且 <code>index</code> 不是 -1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPath java.security.cert.CertPathValidatorException.getCertPath()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回抛出异常时正在验证的证书路径

@return 抛出异常时正在验证的 <code>CertPath</code>（如果未指定则返回 <code>null</code>）

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.cert.CertPathValidatorException.getIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回导致该异常抛出的证书在证书路径中的索引。注意，<code>CertPath</code> 中的证书列表是基于零的。如果尚未设置索引，则返回 -1。

@return 已设置的索引，如果尚未设置索引，则返回 -1

<!-- END DATA -->
