<!-- BEGIN KEY -->
public abstract class java.security.BasicPermission extends java.security.Permission implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
BasicPermission 类扩展 Permission 类，并且可以用作希望与 BasicPermission 遵守相同命名约定的权限的基类。
 <P>
BasicPermission 的名称就是给定权限的名称（例如，&quot;exit&quot;、&quot;setFactory&quot;、&quot;print.queueJob&quot; 等）。命名约定遵守层次结构属性命名约定。星号可能单独出现，也可能紧跟在 &quot;.&quot; 后面出现在名称的末尾，它表示通配符匹配。例如，&quot;*&quot; 和 &quot;java.*&quot; 有效，而 &quot;*java&quot;、&quot;a*b&quot; 和 &quot;java*&quot; 无效。
 <P>
不使用（从 Permission 继承的）操作字符串。因此，BasicPermission 通常用作&ldquo;指定&rdquo;权限（包含名称但不包含操作列表的权限；或者具有指定权限或者不具有）的基类。需要时子类可以在 BasicPermission 之上实现操作。
 <p>
 <P>

@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection
@see java.lang.RuntimePermission
@see java.security.SecurityPermission
@see java.util.PropertyPermission
@see java.awt.AWTPermission
@see java.net.NetPermission
@see java.lang.SecurityManager

@version 1.40 03/12/19

@author Marianne Mueller
@author Roland Schemers

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.BasicPermission(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定名称的新 BasicPermission。name 是权限的符号名，如 &quot;setFactory&quot;、&quot;print.queueJob&quot; 或 &quot;topLevelWindow&quot;，等等。

@param name BasicPermission 的名称。

@throws  NullPointerException 如果 <code>name</code> 为 <code>null</code>
@throws  IllegalArgumentException 如果 <code>name</code> 为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.BasicPermission(String name, String actions)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有指定名称的新 BasicPermission 对象。该名称是 BasicPermission 的符号名，以及当前不使用操作 String。

@param name BasicPermission 的名称。
@param actions 忽略。

@throws  NullPointerException 如果 <code>name</code> 为 <code>null</code>
@throws  IllegalArgumentException 如果 <code>name</code> 为空。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.BasicPermission.implies(Permission p)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查此对象是否&ldquo;暗含&rdquo;指定的权限。
 <P>
更明确地说，如果此方法满足以下条件，则返回 true：<p>
 <ul>
<li> <i>p</i> 的类与此对象的类相同，并且<p>
<li> <i>p</i> 的名称等于此对象的名称或者（在使用通配符的情况下）此对象的名称暗含它的名称。例如，&quot;a.b.*&quot; 暗含 &quot;a.b.c&quot;。
 </ul>

@param p 所要检查的权限。

@return 如果传递的权限等于此权限或者暗含于此权限，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.BasicPermission.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查两个 BasicPermission 对象是否相等。检查 <i>obj</i> 的类是否与此对象的类相同并且具有与此对象相同的名称。
 <P>
@param obj 要与此对象进行相等性测试的对象。
@return 如果 <i>obj</i> 为 BasicPermission 并且具有与此 BasicPermission 对象相同的名称，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.BasicPermission.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象的哈希码值。所用的哈希码是名称的哈希码，也就是 <code>getName().hashCode()</code>，其中 <code>getName</code> 来自 Permission 超类。

@return  此对象的哈希码值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.BasicPermission.getActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回操作的规范化字符串表示形式，该表示形式当前为空字符串 &quot;&quot;，因为不存在 BasicPermission 的操作。

@return 空字符串 &quot;&quot;。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.PermissionCollection java.security.BasicPermission.newPermissionCollection()
<!-- END KEY -->
<!-- BEGIN DATA -->
用于存储 BasicPermission 对象的新 PermissionCollection 对象。
 <p>
BasicPermissionCollection 存储 BasicPermission 权限的集合。

<p>BasicPermission 对象必须以允许将它们按任意顺序插入的方式来存储，但同时也允许以有效（并一致）的方式实现 PermissionCollection 的 <code>implies</code> 方法。

@return 适合存储 BasicPermissions 的新 PermissionCollection 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.security.BasicPermission.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
调用 readObject，从流中恢复 BasicPermission 的状态。

<!-- END DATA -->
