<!-- BEGIN KEY -->
public abstract class java.security.Signer extends java.security.Identity
<!-- END KEY -->
<!-- BEGIN DATA -->
此类用来表示一个 Identity，它还可以用数字方法签名数据。

<p>管理签署人 (signer) 的私钥是一个非常重要而又敏感的问题，应该由子类根据他们的使用目的适当处理。

@see Identity

@version 1.42 04/05/18
@author Benjamin Renaud

@deprecated 将不再使用此类。其功能已由 <code>java.security.KeyStore</code>、<code>java.security.cert</code> 包和 <code>java.security.Principal</code> 所取代。

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.security.PrivateKey java.security.Signer.privateKey
<!-- END KEY -->
<!-- BEGIN DATA -->
signer 的私钥。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.Signer()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 signer。此构造方法只用于序列化。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.Signer(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带有指定标识名称的 signer。

@param name 标识名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.Signer(String name, IdentityScope scope) throws java.security.KeyManagementException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建带有指定标识名称和范围的 signer。

@param name 标识名称。

@param scope 标识的范围。

@exception KeyManagementException 如果范围内已经有一个具有相同名称的标识。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.PrivateKey java.security.Signer.getPrivateKey()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 signer 的私钥。

<p>首先，如果有安全管理器，则用 <code>&quot;getSignerPrivateKey&quot;</code> 作为参数调用其 <code>checkSecurityAccess</code> 方法，以查看它是否可以返回该私钥。 
 
@return 此 signer 的私钥，如果尚未设置私钥，则返回 null。
 
@exception  SecurityException  如果安全管理器存在并且其 <code>checkSecurityAccess</code> 方法不允许访问私钥。
 
 @see SecurityManager#checkSecurityAccess

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.Signer.setKeyPair(KeyPair pair) throws java.security.InvalidParameterException, java.security.KeyException
<!-- END KEY -->
<!-- BEGIN DATA -->
为此签署人设置密钥对（公钥和私钥）。

<p>首先，如果有安全管理器，则用 <code>&quot;setSignerKeyPair&quot;</code> 作为参数调用其 <code>checkSecurityAccess</code> 方法，以查看它是否可以设置密钥对。 
 
@param pair 经过初始化的密钥对。

@exception InvalidParameterException 如果未正确初始化密钥对。
@exception KeyException 如果密钥对因其他任何原因不能设置。
@exception  SecurityException  如果安全管理器存在并且其 <code>checkSecurityAccess</code> 方法不允许设置密钥对。
 
@see SecurityManager#checkSecurityAccess

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.Signer.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回有关该 signer 信息的字符串。

@return 有关该 signer 信息的字符串。

<!-- END DATA -->
