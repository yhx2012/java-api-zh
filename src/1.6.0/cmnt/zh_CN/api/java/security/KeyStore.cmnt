<!-- BEGIN KEY -->
public class java.security.KeyStore extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
此类表示密钥和证书的存储设施。

<p> <code>KeyStore</code> 管理不同类型的条目。每种类型的条目都实现 <code>KeyStore.Entry</code> 接口。提供了三种基本的 <code>KeyStore.Entry</code> 实现：

 <ul>
 <li><b>KeyStore.PrivateKeyEntry</b>
<p> 此类型的条目保存一个加密的 <code>PrivateKey</code>，可以选择用受保护格式存储该私钥，以防止未授权访问。它还随附一个相应公钥的证书链。

<p> 给定条目使用私钥和证书链进行自验证 (self-authentication)。应用此验证的包括软件发布组织，它们将 JAR 文件签名为发布和/或许可软件的一部分。

 <li><b>KeyStore.SecretKeyEntry</b>
<p> 此类型的条目保存一个加密的 <code>SecretKey</code>，可以选择用受保护格式存储该密钥，以防止未授权访问。

 <li><b>KeyStore.TrustedCertificateEntry</b>
<p> 此类型的条目包含一个属于另一方的单个公钥 <code>Certificate</code>。它被称为<i>可信证书</i>，因为 keystore 的所有者相信证书中的公钥确实属于该证书的 <i>subject</i>（所有者）所标识的身份。

<p>此类型的条目可用于验证其他方。
 </ul>

<p> KeyStore 中的每一条目都用 &ldquo;alias&rdquo; 字符串标识。对于私钥及其关联的证书链，这些字符串用于区分实体验证自身可以采用的不同方式。例如，实体可以使用不同的证书授权或不同的公钥算法来验证自身。

<p> 别名是否区分大小写与实现有关。为了避免出现问题，建议不要在 KeyStore 中使用只有大小写区别的别名。

<p> 在这里没有指定 keystore 是否是持久性的，也没有指定 keystore 是持久性时所使用的机制。这允许使用各种技术保护敏感的（例如，私有的或秘密的）密钥。一种选择是使用智能卡或其他集成加密引擎 (SafeKeyper)，也可以（以各种格式）使用文件之类更为简单的机制。

<p> 请求 KeyStore 对象的典型方式包括使用默认类型和提供一个特定的 keystore 类型。

 <ul>
<li>使用默认类型：
 <pre>
    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
 </pre>
系统将返回默认类型的 keystore 实现。
 <p>

<li>提供特定的 keystore 类型：
 <pre>
      KeyStore ks = KeyStore.getInstance(&quot;JKS&quot;);
 </pre>
系统将返回环境中可用的指定 keystore 类型的首选实现。 <p>
 </ul>

<p> 必须先{@link #load(java.io.InputStream, char[]) 加载} keystore 才能对其进行访问。
 <pre>
    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());

    // get user password and file input stream
    char[] password = getPassword();

    java.io.FileInputStream fis = null;
    try {
        fis = new java.io.FileInputStream("keyStoreName");
        ks.load(fis, password);
    } finally {
        if (fis != null) {
            fis.close();
        }
    }
 </pre>

要使用上述 <code>load</code> 方法创建一个空 keystore，传递 <code>null</code> 作为 <code>InputStream</code> 的参数。

<p> 一旦加载了 keystore，就能够从 keystore 读取现有条目，或向 keystore 写入新条目：
 <pre>
    // get my private key
    KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry)
        ks.getEntry("privateKeyAlias", password);
    PrivateKey myPrivateKey = pkEntry.getPrivateKey();

    // save my secret key
    javax.crypto.SecretKey mySecretKey;
    KeyStore.SecretKeyEntry skEntry =
        new KeyStore.SecretKeyEntry(mySecretKey);
    ks.setEntry("secretKeyAlias", skEntry, 
        new KeyStore.PasswordProtection(password));

    // store away the keystore
    java.io.FileOutputStream fos = null;
    try {
        fos = new java.io.FileOutputStream("newKeyStoreName");
        ks.store(fos, password);
    } finally {
        if (fos != null) {
            fos.close();
        }
    }
 </pre>

注意，可以使用相同的密码加载 keystore、保护私钥条目、保护秘密密钥条目以及存储 keystore（如上文示例代码所示），也可以使用不同的密码或其他保护参数。

@author Jan Luehe

@version 1.53, 07/28/06

@see java.security.PrivateKey
@see javax.crypto.SecretKey
@see java.security.cert.Certificate

@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.KeyStore(KeyStoreSpi keyStoreSpi, Provider provider, String type)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建给定类型的 KeyStore 对象，并在其中封装给定的提供者实现（SPI 对象）。

@param keyStoreSpi 提供者实现
@param provider  提供者
@param type keystore 类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.KeyStore java.security.KeyStore.getInstance(String type) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回指定类型的 keystore 对象。
 
 <p> 此方法从首选 Provider 开始遍历已注册安全提供者列表。返回一个封装 KeyStoreSpi 实现的新 KeyStore 对象，该实现取自第一个支持指定类型的 Provider。


 <p> 注意，可以通过 {@link Security#getProviders() Security.getProviders()} 方法获取已注册提供者列表。

 @param type keystore 类型。有关标准 keystore 类型的信息，请参阅 <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a> 中的附录 A。

 @return 指定类型的 keystore 对象。

 @exception KeyStoreException 如果没有 Provider 支持指定类型的 KeyStoreSpi 实现。

 @see Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.KeyStore java.security.KeyStore.getInstance(String type, String provider) throws java.security.KeyStoreException, java.security.NoSuchProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回指定类型的 keystore 对象。
 
 <p> 返回一个封装 KeyStoreSpi 实现的新 KeyStore 对象，该实现取自指定提供者。指定提供者必须在安全提供者列表中注册。

 <p> 注意，可以通过 {@link Security#getProviders() Security.getProviders()} 方法获取已注册提供者列表。

 @param type keystore 类型。有关标准 keystore 类型的信息，请参阅 <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a> 中的附录 A。

 @param provider 提供者的名称。

 @return 指定类型的 keystore 对象。

 @exception KeyStoreException 如果不能从指定提供者获得指定类型的 KeyStoreSpi 实现。
 
 @exception NoSuchProviderException 如果指定提供者未在安全提供者列表中注册。

 @exception IllegalArgumentException 如果提供者的名称为 null 或空。

 @see Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.KeyStore java.security.KeyStore.getInstance(String type, Provider provider) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回指定类型的 keystore 对象。
 
 <p> 返回一个封装 KeyStoreSpi 实现的新 KeyStore 对象，该实现取自指定 Provider 对象。注意，指定 Provider 对象无需在提供者列表中注册。

 @param type keystore 类型。有关标准 keystore 类型的信息，请参阅 <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a> 中的附录 A。

 @param provider 提供者。

 @return 指定类型的 keystore 对象。

 @exception KeyStoreException 如果不能从指定 Provider 对象获得指定类型的 KeyStoreSpi 实现。

 @exception IllegalArgumentException 如果指定提供者为 null。

 @see Provider

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.security.KeyStore.getDefaultType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 Java 安全属性文件中指定的默认 keystore 类型；如果不存在此类属性，则返回字符串 &quot;jks&quot;（&quot;Java keystore&quot; 的首字母缩写）。Java 安全属性文件位于名为 &lt;JAVA_HOME&gt;/lib/security/java.security 的文件中。&lt;JAVA_HOME&gt; 引用 java.home 系统属性的值，并指定安装 JRE 的目录。

<p>调用某个 <code>getInstance</code> 方法时不希望使用固定编码 (hard coded) keystore 类型的应用程序，以及用户未指定 keystore 类型时希望提供默认 keystore 类型的应用程序可以使用默认的 keystore 类型。

<p>通过将 &quot;keystore.type&quot; 安全属性（在 Java 安全属性文件中）的值设置为所需的 keystore 类型，可以更改默认的 keystore 类型。

@return Java 安全属性文件中指定的默认 keystore 类型；如果不存在此类属性，则返回字符串 &quot;jks&quot;。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider java.security.KeyStore.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 keystore 的提供者。
 
@return  此 keystore 的提供者。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.security.KeyStore.getType()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 keystore 的类型。

@return 此 keystore 的类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Key java.security.KeyStore.getKey(String alias, char[] password) throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与给定别名关联的密钥，并用给定密码来恢复它。必须已经通过调用 <code>setKeyEntry</code>，或者以 <code>PrivateKeyEntry</code> 或 <code>SecretKeyEntry</code> 为参数的 <code>setEntry</code> 关联密钥与别名。

@param alias 别名
@param password 用于恢复密钥的密码

@return 请求的密钥；如果给定别名不存在或不标识与密钥相关的条目，则返回 null。

@exception KeyStoreException 如果 keystore 尚未被初始化（加载）。
@exception NoSuchAlgorithmException 如果不能找到恢复密钥的算法
@exception UnrecoverableKeyException 如果不能恢复密钥（例如，给定密码错误）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.cert.Certificate[] java.security.KeyStore.getCertificateChain(String alias) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与给定别名关联的证书链。必须已经通过调用 <code>setKeyEntry</code>，或者以 <code>PrivateKeyEntry</code> 为参数的 <code>setEntry</code> 关联证书链与别名。

@param alias 别名

@return 证书链（按用户证书在前，根证书授权在后的顺序）；如果给定别名不存在或不包含证书链，则返回 null

@exception KeyStoreException 如果 keystore 尚未被初始化（加载）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.cert.Certificate java.security.KeyStore.getCertificate(String alias) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与给定别名关联的证书。

<p> 如果给定的别名标识通过调用 <code>setCertificateEntry</code> 创建的条目，或者通过调用以 <code>TrustedCertificateEntry</code> 为参数的 <code>setEntry</code> 创建的条目，则返回包含在该条目中的可信证书。

<p> 如果给定的别名标识通过调用 <code>setKeyEntry</code> 创建的条目，或者通过调用以 <code>PrivateKeyEntry</code> 为参数的 <code>setEntry</code> 创建的条目，则返回该条目中证书链的第一个元素。
 
@param alias 别名

@return 证书；如果给定别名不存在或不包含证书，则返回 null。

@exception KeyStoreException 如果 keystore 尚未被初始化（加载）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.util.Date java.security.KeyStore.getCreationDate(String alias) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定别名标识的条目的创建日期。

@param alias 别名

@return 此条目的创建日期；如果给定的别名不存在，则返回 null

@exception KeyStoreException 如果 keystore 尚未被初始化（加载）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.KeyStore.setKeyEntry(String alias, Key key, char[] password, java.security.cert.Certificate[] chain) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定的密钥分配给给定的别名，并用给定密码保护它。

<p>如果给定密钥的类型为 <code>java.security.PrivateKey</code>，则它必须附带证明相应公钥的证书链。

<p>如果给定别名已经存在，则与别名关联的 keystore 信息将被给定密钥（还可能包括证书链）重写。

@param alias 别名
@param key 要与别名关联的密钥
@param password 保护密钥的密码
@param chain 相应公钥的证书链（只在给定密钥的类型为 <code>java.security.PrivateKey</code> 时需要）。

@exception KeyStoreException 如果 keystore 尚未被初始化（加载）、无法保护给定的密钥，或者此操作由于某些其他原因而失败

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.KeyStore.setKeyEntry(String alias, byte[] key, java.security.cert.Certificate[] chain) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定密钥（已经被保护）分配给给定别名。
 
<p>如果受保护密钥的类型为 <code>java.security.PrivateKey</code>，则它必须附带证明相应公钥的证书链。如果底层 keystore 实现的类型为 <code>jks</code>，则必须根据 PKCS #8 标准中的定义将 <code>key</code> 编码为 <code>EncryptedPrivateKeyInfo</code>。

<p>如果给定别名已经存在，则与别名关联的 keystore 信息将被给定密钥（还可能包括证书链）重写。

@param alias 别名
@param key 要与别名关联的密钥（以受保护格式）
@param chain 相应公钥的证书链（只在受保护密钥的类型为 <code>java.security.PrivateKey</code> 时有用）。

@exception KeyStoreException 如果 keystore 尚未被初始化（加载），或者此操作由于某些其他原因而失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.KeyStore.setCertificateEntry(String alias, Certificate cert) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定可信证书分配给给定别名。

<p> 如果给定别名标识通过调用 <code>setCertificateEntry</code> 创建的现有条目，或者通过调用以 <code>TrustedCertificateEntry</code> 为参数的 <code>setEntry</code> 创建的现有条目，则现有条目中的可信证书将被给定证书重写。

@param alias 别名
@param cert 证书

@exception KeyStoreException 如果 keystore 尚未被初始化，或者给定别名已存在但不标识包含可信证书的条目，或者此操作由于其他某些原因失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.KeyStore.deleteEntry(String alias) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
删除此 keystore 中给定别名标识的条目。

@param alias 别名

@exception KeyStoreException 如果 keystore 尚未被初始化，或者条目不能被移除。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.util.Enumeration<java.lang.String> java.security.KeyStore.aliases() throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
列出此 keystore 的所有别名。

@return 别名的枚举

@exception KeyStoreException 如果 keystore 尚未被初始化（加载）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.security.KeyStore.containsAlias(String alias) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
检查给定别名是否存在于此 keystore 中。

@param alias 别名

@return 如果别名存在，则返回 true；否则返回 false

@exception KeyStoreException 如果 keystore 尚未被初始化（加载）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.security.KeyStore.size() throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 keystore 中条目数。

@return 此 keystore 中的条目数

@exception KeyStoreException 如果 keystore 尚未被初始化（加载）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.security.KeyStore.isKeyEntry(String alias) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果给定别名标识的条目是通过调用 <code>setKeyEntry</code> 或者以 <code>PrivateKeyEntry</code> 或 <code>SecretKeyEntry</code> 为参数的 <code>setEntry</code> 创建的，则返回 true。

@param alias 要检查的 keystore 条目的别名

@return 如果给定别名标识的条目是与密钥相关的条目，则返回 true；否则返回 false。

@exception KeyStoreException 如果 keystore 尚未被初始化（加载）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.security.KeyStore.isCertificateEntry(String alias) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
如果给定别名标识的条目是通过调用 <code>setCertificateEntry</code> 或者以 <code>TrustedCertificateEntry</code> 为参数的 <code>setEntry</code> 创建的，则返回 true。

@param alias 要检查的 keystore 条目的别名

@return 如果给定别名标识的条目包含一个可信证书，则返回 true；否则返回 false。

@exception KeyStoreException 如果 keystore 尚未被初始化（加载）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.security.KeyStore.getCertificateAlias(Certificate cert) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回证书与给定证书匹配的第一个 keystore 条目的别名。

<p> 此方法尝试将给定证书与每一个 keystore 条目匹配。如果认为条目是通过调用 <code>setCertificateEntry</code> 或者以 <code>TrustedCertificateEntry</code> 为参数的 <code>setEntry</code> 创建的，则将给定证书与该条目的证书进行比较。

<p> 如果认为条目是通过调用 <code>setKeyEntry</code> 或者以 <code>PrivateKeyEntry</code> 为参数的 <code>setEntry</code> 创建的，则将给定证书与该条目证书链的第一个元素进行比较。

@param cert 要匹配的证书

@return 带有匹配证书的第一个条目的别名；如果此 keystore 中不存在这种条目，则返回 null。

@exception KeyStoreException 如果 keystore 尚未被初始化（加载）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.KeyStore.store(OutputStream stream, char[] password) throws java.security.KeyStoreException, java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 keystore 存储到给定输出流，并用给定密码保护其完整性。

@param stream 要写入此 keystore 的输出流。
@param password 生成 keystore 完整性检验的密码

@exception KeyStoreException 如果 keystore 尚未被初始化（加载）。
@exception IOException 如果存在数据 I/O 问题
@exception NoSuchAlgorithmException 如果不存在恰当的数据完整性算法
@exception CertificateException 如果 keystore 数据中包含无法存储的证书

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.KeyStore.store(KeyStore.LoadStoreParameter param) throws java.security.KeyStoreException, java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定 <code>LoadStoreParameter</code> 存储此 keystore。

@param param 指定如何存储 keystore 的 <code>LoadStoreParameter</code>，该参数可以为 <code>null</code>

@exception IllegalArgumentException 如果无法识别给定的 <code>LoadStoreParameter</code> 输入
@exception KeyStoreException 如果 keystore 尚未被初始化（加载）
@exception IOException 如果存在数据 I/O 问题
@exception NoSuchAlgorithmException 如果不存在恰当的数据完整性算法
@exception CertificateException 如果 keystore 数据中包含无法存储的证书

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.KeyStore.load(InputStream stream, char[] password) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
从给定输入流中加载此 KeyStore。

<p>可以给定一个密码来解锁 keystore（例如，驻留在硬件标记设备上的 keystore）或检验 keystore 数据的完整性。如果没有指定用于完整性检验的密码，则不会执行完整性检验。

<p>如果要创建空 keystore，或者不能从流中初始化 keystore，则传递 <code>null</code> 作为 <code>stream</code> 的参数。

<p> 注意，如果此 keystore 已经被加载，那么它将被重新初始化，并再次从给定输入流中加载。

@param stream 从中加载 keystore 的输入流，或者 <code>null</code>
@param password 用来检验 keystore 完整性的密码，用来解锁 keystore 的密码，或者 <code>null</code>

@exception IOException 如果存在 keystore 数据 I/O 问题或格式问题，如果需要密码却没有指定，或者指定的密码错误。如果错误是由于密码错误引起的，那么 <code>IOException</code> 的 {@link Throwable#getCause cause} 应该是 <code>UnrecoverableKeyException</code>
@exception NoSuchAlgorithmException 如果不存在用来检验 keystore 完整性的算法
@exception CertificateException 如果不能加载 keystore 中的任何证书

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.KeyStore.load(KeyStore.LoadStoreParameter param) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定 <code>LoadStoreParameter</code> 加载此 keystore。

<p> 注意，如果此 KeyStore 已经被加载，那么它将被重新初始化，并再次从给定参数加载。

@param param 指定如何加载 keystore 的 <code>LoadStoreParameter</code>，可以为 <code>null</code>

@exception IllegalArgumentException 如果无法识别给定 <code>LoadStoreParameter</code> 输入
@exception IOException 如果存在 keystore 数据 I/O 问题或格式问题。如果错误是由于 <code>ProtectionParameter</code> 不正确（如密码错误）引起的，那么 <code>IOException</code> 的 {@link Throwable#getCause cause} 应该是 <code>UnrecoverableKeyException</code>
@exception NoSuchAlgorithmException 如果不存在用来检验 keystore 完整性的算法
@exception CertificateException 如果不能加载 keystore 中的任何证书

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.KeyStore.Entry java.security.KeyStore.getEntry(String alias, KeyStore.ProtectionParameter protParam) throws java.security.NoSuchAlgorithmException, java.security.UnrecoverableEntryException, java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定保护参数获取指定别名的 keystore <code>Entry</code>。

@param alias 获取此别名的 keystore <code>Entry</code>
@param protParam 用来保护 <code>Entry</code> 的 <code>ProtectionParameter</code>，可以为 <code>null</code>

@return 指定别名的 keystore <code>Entry</code>；如果不存在这种条目，则返回 <code>null</code>

@exception NullPointerException 如果 <code>alias</code> 为 <code>null</code>
@exception NoSuchAlgorithmException 如果不存在用来恢复条目的算法
@exception UnrecoverableEntryException 如果指定的 <code>protParam</code> 不足或无效
@exception UnrecoverableKeyException 如果该条目是 <code>PrivateKeyEntry</code> 或 <code>SecretKeyEntry</code>，并且指定的 <code>protParam</code> 不包含恢复密钥所需的信息（如密码错误）
@exception KeyStoreException 如果 keystore 尚未被初始化（加载）
@see #setEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter)

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.KeyStore.setEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
用指定别名保存 keystore <code>Entry</code>。保护参数用来保护 <code>Entry</code>。

<p> 如果指定别名的条目已经存在，它将被重写。

@param alias 以此别名保存 keystore <code>Entry</code>
@param entry 要保存的 <code>Entry</code>
@param protParam 用来保护 <code>Entry</code> 的 <code>ProtectionParameter</code>，可以为 <code>null</code>
@exception NullPointerException 如果 <code>alias</code> 或 <code>entry</code> 为 <code>null</code>
@exception KeyStoreException 如果 keystore 尚未被初始化（加载），或者此操作由于其他原因失败

@see #getEntry(String, KeyStore.ProtectionParameter)

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.security.KeyStore.entryInstanceOf(String alias, java.lang.Class<? extends java.security.KeyStore.Entry> entryClass) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
确定指定 <code>alias</code> 的 keystore <code>Entry</code> 是否是指定 <code>entryClass</code> 的实例或子类。

@param alias 别名
@param entryClass 条目的类

@return true 如果指定 <code>alias</code> 的 keystore <code>Entry</code> 是指定 <code>entryClass</code> 的实例或子类，则返回 true；否则返回 false。

@exception NullPointerException 如果 <code>alias</code> 或 <code>entryClass</code> 为 <code>null</code>
@exception KeyStoreException 如果 keystore 尚未被初始化（加载）

@since 1.5

<!-- END DATA -->
