<!-- BEGIN KEY -->
public static class java.security.KeyStore.PasswordProtection extends java.lang.Object implements java.security.KeyStore.ProtectionParameter, javax.security.auth.Destroyable
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>ProtectionParameter</code> 的一个基于密码的实现。

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.KeyStore.PasswordProtection(char[] password)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 password 参数。

<p>在将指定的 <code>password</code> 存储进新的 <code>PasswordProtection</code> 对象前将其复制。

@return password 密码，它可以为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized char[] java.security.KeyStore.PasswordProtection.getPassword()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取密码。

<p>注意，此方法返回一个对密码的引用。如果创建了数组的一个副本，调用方负责在不再需要密码后清空密码信息。

@see #destroy()
@return 密码，它可以为 <code>null</code>
@exception IllegalStateException 如果密码已经被清除（销毁）

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.security.KeyStore.PasswordProtection.destroy() throws javax.security.auth.DestroyFailedException
<!-- END KEY -->
<!-- BEGIN DATA -->
清除密码。

@exception DestroyFailedException 如果此方法不能清除密码。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.security.KeyStore.PasswordProtection.isDestroyed()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定密码是否已被清除。

@return 如果密码已经被清除，则返回 true；否则，返回 false。

<!-- END DATA -->
