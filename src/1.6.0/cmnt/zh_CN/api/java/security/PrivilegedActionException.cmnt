<!-- BEGIN KEY -->
public class java.security.PrivilegedActionException extends java.lang.Exception
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>doPrivileged(PrivilegedExceptionAction)</code> 和 <code>doPrivileged(PrivilegedExceptionAction, AccessControlContext context)</code> 抛出此异常来指示执行的操作抛出了经过检查的异常。可以通过调用 <code>getException</code> 方法捕获操作抛出的异常。实际上，<code>PrivilegedActionException</code> 是特权操作抛出的异常的&ldquo;包装器&rdquo;。

<p>从版本 1.4 开始，已对此异常作出改进，以符合通用异常链机制。&ldquo;特权计算抛出的异常&rdquo;是在构造的时候提供的，可以通过 {@link #getException()} 方法访问，这类对象目前被认为是导致异常的 <i>cause</i>，可以通过 {@link Throwable#getCause()} 方法以及后面提到的&ldquo;遗留方法&rdquo;访问它。

@see PrivilegedExceptionAction
@see AccessController#doPrivileged(PrivilegedExceptionAction)
@see AccessController#doPrivileged(PrivilegedExceptionAction,AccessControlContext)

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Exception java.security.PrivilegedActionException.exception
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.PrivilegedActionException(Exception exception)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的&ldquo;包装&rdquo;指定 Exception 的 PrivilegedActionException。

@param exception 抛出的异常

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Exception java.security.PrivilegedActionException.getException()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回特权计算抛出的异常，该异常导致此 <code>PrivilegedActionException</code>。

<p>这是通用异常链设施之前的方法。{@link Throwable#getCause()} 方法现在是获取此信息的首选方法。

@return 特权计算抛出的异常，该异常导致此 <code>PrivilegedActionException</code>。
@see PrivilegedExceptionAction
@see AccessController#doPrivileged(PrivilegedExceptionAction)
@see AccessController#doPrivileged(PrivilegedExceptionAction, AccessControlContext)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Throwable java.security.PrivilegedActionException.getCause()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此异常（特权计算抛出的异常，该异常导致此 <code>PrivilegedActionException</code>）的 cause。

@return  此异常的 cause。
@since   1.4

<!-- END DATA -->
