<!-- BEGIN KEY -->
public class java.security.SecureRandom extends java.util.Random
<!-- END KEY -->
<!-- BEGIN DATA -->
此类提供强加密随机数生成器 (RNG)。

<p>强加密随机数至少要遵从 <a href="http://csrc.nist.gov/cryptval/140-2.htm"><i>FIPS 140-2, Security Requirements for Cryptographic Modules</i></a> 中 4.9.1 部分指定的统计随机数生成器测试。此外，SecureRandom 还必须生成非确定性输出。因此，根据 <a href="http://www.ietf.org/rfc/rfc1750.txt">
 <i>RFC 1750: Randomness Recommendations for Security</i></a> 中的描述，任何传递给 SecureRandom 对象的种子材料必须是不可预知的，所有 SecureRandom 的输出序列必须是强加密的。
 
<p>调用者可通过无参数构造方法或一个 <code>getInstance</code> 方法获取 SecureRandom 实例：

 <pre>
      SecureRandom random = new SecureRandom();
 </pre>
 <p> 许多 SecureRandom 实现是伪随机数生成器 (PRNG) 的形式，这意味着它们将使用确定的算法根据实际随机种子生成伪随机序列。
 其他实现可以生成实际随机数，而另一些实现则可能结合使用这两项技术。

 
<p>通常，SecureRandom 的调用者调用以下方法获取随机字节：
 
<pre>
      SecureRandom random = new SecureRandom();
   byte bytes[] = new byte[20];
      random.nextBytes(bytes);
 </pre>
 
<p>调用者还可以调用 <code>generateSeed</code> 方法生成给定的种子字节数（例如，为其他随机数生成器提供种子）：
 <pre>
      byte seed[] = random.generateSeed(20);
 </pre>

@see java.security.SecureRandomSpi
@see java.util.Random
 
@version 1.47, 12/19/03
@author Benjamin Renaud
@author Josh Bloch 

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.security.Provider java.security.SecureRandom.provider
<!-- END KEY -->
<!-- BEGIN DATA -->
提供者。

@serial
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.security.SecureRandomSpi java.security.SecureRandom.secureRandomSpi
<!-- END KEY -->
<!-- BEGIN DATA -->
提供者实现。

@serial
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private byte[] java.security.SecureRandom.state
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.security.MessageDigest java.security.SecureRandom.digest
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private byte[] java.security.SecureRandom.randomBytes
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial

我们知道，MessageDigest 类不实现 java.io.Serializable。但由于不再使用此字段，所以它始终为 NULL，不会影响 SecureRandom 类本身的序列化。

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.security.SecureRandom.randomBytesUsed
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private long java.security.SecureRandom.counter
<!-- END KEY -->
<!-- BEGIN DATA -->
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.SecureRandom()
<!-- END KEY -->
<!-- BEGIN DATA -->
 构造一个实现默认随机数算法的安全随机数生成器 (RNG)。

 <p> 此构造方法从首选 Provider 开始，遍历已注册安全提供者列表。返回一个封装 SecureRandomSpi 实现的新 SecureRandom 对象，该实现取自第一个支持 SecureRandom (RNG) 算法的 Provider。如果没有 Provider 支持 RNG 算法，则返回一个特定于实现的默认对象。

 <p> 注意，已注册提供者列表可以通过 {@link Security#getProviders() Security.getProviders()} 方法获得。


 <p>有关标准 RNG 算法名称的信息，请参阅 <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a> 的附录 A。

 <p> 尚未设置返回 SecureRandom 对象的种子。要设置返回对象的种子，可以调用 <code>setSeed</code> 方法。
如果没有调用 <code>setSeed</code>，那么第一次调用 <code>nextBytes</code> 时将强行将 SecureRandom 对象设置为自身的种子。
如果之前调用了 <code>setSeed</code>，则不会发生该操作。
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.SecureRandom(byte[] seed)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个实现默认随机数算法的安全随机数生成器 (RNG)。SecureRandom 实例使用指定的种子字节设置种子。

 <p>此构造方法从首选 Provider 开始，遍历已注册安全提供者列表。返回一个封装 SecureRandomSpi 实现的新 SecureRandom 对象，该实现取自第一个支持 SecureRandom (RNG) 算法的 Provider。如果没有 Provider 支持 RNG 算法，则返回一个特定于实现的默认对象。

 <p> 注意，已注册提供者列表可以通过 {@link Security#getProviders() Security.getProviders()} 方法获得。

 <p>有关标准 RNG 算法名称的信息，请参阅 <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a> 的附录 A。
 
@param seed 种子。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.SecureRandom(SecureRandomSpi secureRandomSpi, Provider provider)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 SecureRandom 对象。

@param secureRandomSpi SecureRandom 实现。
@param provider 提供者。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.SecureRandom java.security.SecureRandom.getInstance(String algorithm) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回实现指定随机数生成器 (RNG) 算法的 SecureRandom 对象。


 <p>此方法从首选 Provider 开始，遍历已注册安全提供者列表。返回一个封装 SecureRandomSpi 实现的新 SecureRandom 对象，该实现取自第一个支持指定算法的 Provider。


 <p>注意，已注册提供者列表可以通过 {@link Security#getProviders() Security.getProviders()} 方法获得。

 <p> 尚未设置返回 SecureRandom 对象的种子。要设置返回对象的种子，可以调用 <code>setSeed</code> 方法。
如果没有调用 <code>setSeed</code>，那么第一次调用 <code>nextBytes</code> 时将强行将 SecureRandom 对象设置为自身的种子。
如果之前调用了 <code>setSeed</code>，则不会发生该操作。

@param algorithm RNG 算法的名称。有关标准 RNG 算法名称的信息，请参阅 <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">Java Cryptography Architecture API Specification &amp; Reference </a>中的附录 A。

@return 新的 SecureRandom 对象。

@exception NoSuchAlgorithmException 如果没有任何 Provider 支持指定算法的 SecureRandomSpi 实现。

@see Provider

@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.SecureRandom java.security.SecureRandom.getInstance(String algorithm, String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回实现指定随机数生成器 (RNG) 算法的 SecureRandom 对象。

 <p>返回一个封装 SecureRandomSpi 实现的新 SecureRandom 对象，该实现取自指定提供者。指定的提供者必须已在安全提供者列表中注册。


 <p>注意，已注册提供者列表可以通过 {@link Security#getProviders() Security.getProviders()} 方法获得。

 <p>尚未设置返回 SecureRandom 对象的种子。要设置返回对象的种子，可以调用 <code>setSeed</code> 方法。
如果没有调用 <code>setSeed</code>，那么第一次调用 <code>nextBytes</code> 时将强行将 SecureRandom 对象设置为自身的种子。
如果之前调用了 <code>setSeed</code>，则不会发生该操作。

@param algorithm RNG 算法的名称。有关标准 RNG 算法名称的信息，请参阅 <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">Java Cryptography Architecture API Specification &amp; Reference </a>中的附录 A。

@param provider 提供者的名称。

@return 新的 SecureRandom 对象。

@exception NoSuchAlgorithmException 如果不能从指定提供者获得指定算法的 SecureRandomSpi 实现。

@exception NoSuchProviderException 如果指定提供者没有在安全提供者列表中注册。

@exception IllegalArgumentException 如果提供者的名称为 null 或空。

@see Provider

@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.SecureRandom java.security.SecureRandom.getInstance(String algorithm, Provider provider) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->
 返回实现指定随机数生成器 (RNG) 算法的 SecureRandom 对象。

 <p>返回一个封装 SecureRandomSpi 实现的新 SecureRandom 对象，该实现取自指定 Provider 对象。注意，指定的 Provider 对象无需在安全提供者列表中注册。


 <p>尚未设置返回 SecureRandom 对象的种子。要设置返回对象的种子，可以调用 <code>setSeed</code> 方法。
如果没有调用 <code>setSeed</code>，那么第一次调用 <code>nextBytes</code> 时将强行将 SecureRandom 对象设置为自身的种子。
如果之前调用了 <code>setSeed</code>，则不会发生该操作。

@param algorithm RNG 算法的名称。有关标准 RNG 算法名称的信息，请参阅 <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">Java Cryptography Architecture API Specification &amp; Reference </a>中的附录 A。

@param provider 提供者。

@return 新的 SecureRandom 对象。

@exception NoSuchAlgorithmException 如果不能从指定的 Provider 对象获得指定算法的 SecureRandomSpi 实现。

@exception IllegalArgumentException 如果指定提供者为 null。

@see Provider

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider java.security.SecureRandom.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 SecureRandom 对象的提供者。

@return 此 SecureRandom 对象的提供者。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.SecureRandom.getAlgorithm()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 SecureRandom 对象实现的算法的名称。

@return 算法的名称；如果无法确定算法名称，则返回 <code>unknown</code>。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.security.SecureRandom.setSeed(byte[] seed)
<!-- END KEY -->
<!-- BEGIN DATA -->
重新设置此随机对象的种子。给定种子补充而不是取代现有的种子。因此，保证重复调用不会降低随机性。

@param seed 种子。


@see #getSeed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.SecureRandom.setSeed(long seed)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定 <code>long seed</code> 中包含的八个字节，重新设置此随机对象的种子。给定种子补充而不是取代现有的种子。因此，保证重复调用不会降低随机性。 
 
<p>定义此方法是为了与 <code>java.util.Random</code> 兼容。

@param seed 种子。

@see #getSeed

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.security.SecureRandom.nextBytes(byte[] bytes)
<!-- END KEY -->
<!-- BEGIN DATA -->
生成用户指定的随机字节数。
 
<p> 如果之前没有调用过 <code>setSeed</code>，那么第一次调用此方法时将强行将此 SecureRandom 对象设置为自身的种子。
如果之前调用了 <code>setSeed</code>，则不会发生该操作。
 
@param bytes 用随机字节填充的数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final int java.security.SecureRandom.next(int numBits)
<!-- END KEY -->
<!-- BEGIN DATA -->
生成一个包含用户指定伪随机位数的整数（右对齐，带前导零）。此方法将重写 <code>java.util.Random</code> 方法，并将为继承自类的所有方法（例如，<code>nextInt</code>、<code>nextLong</code> 和 <code>nextFloat</code>）提供随机位源。

@param numBits 要生成的伪随机位数，其中 0 &lt;= <code>numBits</code> &lt;= 32。

@return 一个 <code>int</code>，包含用户指定的伪随机位数（右对齐，带前导零）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static byte[] java.security.SecureRandom.getSeed(int numBytes)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定的种子字节数量，该数量可使用此类用来将自身设置为种子的种子生成算法来计算。此调用可用于设置其他随机数生成器的种子。

<p>包含此方法只是为了向后兼容。建议调用者使用一个替代 <code>getInstance</code> 方法来获取 SecureRandom 对象，然后调用 <code>generateSeed</code> 方法获取该对象中的种子字节。

@param numBytes 将生成的种子字节数量。
 
@return 种子字节。

@see #setSeed

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] java.security.SecureRandom.generateSeed(int numBytes)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回给定的种子字节数量，该数量可使用此类用来将自身设置为种子的种子生成算法来计算。此调用可用于设置其他随机数生成器的种子。

@param numBytes 将生成的种子字节数量。
 
@return 种子字节。

<!-- END DATA -->
