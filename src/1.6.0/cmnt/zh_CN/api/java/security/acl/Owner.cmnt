<!-- BEGIN KEY -->
public interface java.security.acl.Owner
<!-- END KEY -->
<!-- BEGIN DATA -->
管理访问控制列表 (ACL) 的所有者或 ACL 配置的接口。（注意，<code>java.security.acl</code> 包中的 Acl 接口扩展了此 Owner 接口。）应该将初始的所有者 Principal 指定为实现此接口的类构造方法的一个参数。   
   
@see java.security.acl.Acl    

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.acl.Owner.addOwner(Principal caller, Principal owner) throws java.security.acl.NotOwnerException
<!-- END KEY -->
<!-- BEGIN DATA -->
添加一个所有者。只有所有者可以修改 ACL 内容。为了调用此方法，调用者主体必须是 ACL 的所有者。也就是说，只有所有者才能添加另一个所有者。在构造 ACL 时配置初始的所有者。
 
@param caller 调用此方法的主体。必须是 ACL 的所有者。
 
@param owner 应该添加到所有者列表中的所有者。
 
@return 如果添加成功，则返回 true，如果 owner 已经是一个所有者，则返回 false。
@exception NotOwnerException 如果调用者主体不是该 ACL 的所有者。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.acl.Owner.deleteOwner(Principal caller, Principal owner) throws java.security.acl.NotOwnerException, java.security.acl.LastOwnerException
<!-- END KEY -->
<!-- BEGIN DATA -->

删除一个所有者。如果这是 ACL 中的最后一个所有者，则会引发异常。<p>
 
为了调用此方法，调用者主体必须是 ACL 的所有者。 
 
@param caller 调用此方法的主体。必须是 ACL 的所有者。
 
@param owner 应该从所有者列表中移除的所有者。
 
@return 如果移除了该所有者，则返回 true，如果该所有者不是所有者列表的一部分，则返回 false。
 
@exception NotOwnerException 如果调用者主体不是该 ACL 的所有者。
 
@exception LastOwnerException 如果只剩下一个所有者，这样 deleteOwner 将使该 ACL 变成无所有者。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.acl.Owner.isOwner(Principal owner)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果给定的主体是该 ACL 的所有者，则返回 true。
 
@param owner 主体，要检查以确定它是否为一个所有者。
 
@return 如果传递的主体在所有者列表中，则返回 true，如果不在则返回 false。

<!-- END DATA -->
