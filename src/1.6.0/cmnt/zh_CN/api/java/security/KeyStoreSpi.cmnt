<!-- BEGIN KEY -->
public abstract class java.security.KeyStoreSpi extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
此类为 <code>KeyStore</code> 类定义<i>服务提供者接口</i> (<b>SPI</b>)。希望提供特定 keystore 类型的 keystore 实现的每个加密服务提供者必须实现此类中所有的抽象方法。

@author Jan Luehe

@version 1.22, 04/07/06

@see KeyStore

@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.Key java.security.KeyStoreSpi.engineGetKey(String alias, char[] password) throws java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与给定别名关联的密钥，使用给定密码恢复它。必须通过调用 <code>setKeyEntry</code> 或者调用使用 <code>PrivateKeyEntry</code> 或 <code>SecretKeyEntry</code> 作为参数的 <code>setEntry</code> 将密钥与别名关联。

@param alias 别名
@param password 恢复密钥所用的密码

@return 请求的密钥，如果给定别名不存在或不标识与密钥相关的项，则返回 null。

@exception NoSuchAlgorithmException 如果不能找到恢复密钥的算法
@exception UnrecoverableKeyException 如果不能恢复密钥（例如,给定的密码错误）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.cert.Certificate[] java.security.KeyStoreSpi.engineGetCertificateChain(String alias)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与给定别名关联的证书链。必须通过调用 <code>setKeyEntry</code>，或者调用使用 <code>PrivateKeyEntry</code> 做参数的 <code>setEntry</code> 将密钥与别名关联。

@param alias 别名

@return 证书链（按用户证书在前根证书授权中心在后的顺序），如果给定别名不存在或不包含证书链，则返回 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.cert.Certificate java.security.KeyStoreSpi.engineGetCertificate(String alias)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与给定别名关联的证书。

<p> 如果给定的别名标识通过调用 <code>setCertificateEntry</code> 创建的项，或标识通过调用使用 <code>TrustedCertificateEntry</code> 参数的 <code>setEntry</code> 创建的项，那么返回包含在该项中的可信证书。

<p> 如果给定的别名标识通过调用 <code>setKeyEntry</code> 创建的项，或标识通过调用使用 <code>PrivateKeyEntry</code> 作为参数的 <code>setEntry</code> 创建的项，那么返回该项中证书链（如果存在证书链）的第一个元素。

@param alias 别名

@return 证书，如果给定别名不存在或不包含证书，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Date java.security.KeyStoreSpi.engineGetCreationDate(String alias)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该别名标识的项的创建日期。

@param alias 别名

@return 此项的创建日期，如果给定的别名不存在，则返回 null

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.security.KeyStoreSpi.engineSetKeyEntry(String alias, Key key, char[] password, java.security.cert.Certificate[] chain) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定的密钥分配给给定的别名，用给定的密码保护它。

<p>如果给定密钥的类型为 <code>java.security.PrivateKey</code> 类型，则它必须附带证明相应公钥的证书链。

<p>如果给定的别名已经存在，则与别名关联的 keystore 信息被给定的密钥（可能和证书链）重写。

@param alias 别名
@param key 要与别名关联的密钥
@param password 保护密钥的密码
@param chain 相应公钥的证书链（只在给定密钥的类型为 <code>java.security.PrivateKey</code> 时需要）。

@exception KeyStoreException 如果不能保护给定密钥，或此操作由于某些其他原因而失败

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.security.KeyStoreSpi.engineSetKeyEntry(String alias, byte[] key, java.security.cert.Certificate[] chain) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定密钥（已经被保护）分配给给定别名。

<p>如果被保护密钥的类型为 <code>java.security.PrivateKey</code>，则它必须附带证明相应公钥的证书链。

<p>如果给定的别名已经存在，则与别名关联的 keystore 信息被给定的密钥（可能和证书链）重写。

@param alias 别名
@param key 要与别名关联的密钥（以受保护格式）
@param chain 相应公钥的证书链（只在受保护密钥的类型为 <code>java.security.PrivateKey</code> 时有用）。

@exception KeyStoreException 如果此操作失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.security.KeyStoreSpi.engineSetCertificateEntry(String alias, Certificate cert) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
将给定证书分配给给定别名。

<p> 如果给定的别名标识通过调用 <code>setCertificateEntry</code> 创建的现有项，或者标识通过调用使用 <code>TrustedCertificateEntry</code> 作为参数的 <code>setEntry</code> 创建的现有项，那么现有项中的可信证书被给定证书重写。

@param alias 别名
@param cert 证书

@exception KeyStoreException 如果给定别名已存在且不标识一个包含可信任证书的项，或此操作由于其他某些原因而失败。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.security.KeyStoreSpi.engineDeleteEntry(String alias) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
删除由此 keystore 中给定的别名标识的项。

@param alias 别名

@exception  KeyStoreException  如果该项不能被移除

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Enumeration<java.lang.String> java.security.KeyStoreSpi.engineAliases()
<!-- END KEY -->
<!-- BEGIN DATA -->
列出此 keystore 的所有别名。

@return 别名的枚举

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.security.KeyStoreSpi.engineContainsAlias(String alias)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查给定别名是否存在于此 keystore 中。

@param alias 别名

@return 如果别名存在，则返回 true；否则，返回 false

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.security.KeyStoreSpi.engineSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取此 keystore 中项的数目。

@return 此 keystore 中的项的数目

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.security.KeyStoreSpi.engineIsKeyEntry(String alias)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果给定别名标识的项是通过调用 <code>setKeyEntry</code> 或者调用使用 <code>PrivateKeyEntry</code> 或 <code>SecretKeyEntry</code> 作为参数的 <code>setEntry</code> 创建的，则返回 true。

@param alias 要检查的 keystore 项的别名

@return 如果给定别名标识的项与密钥相关，则返回 true；否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.security.KeyStoreSpi.engineIsCertificateEntry(String alias)
<!-- END KEY -->
<!-- BEGIN DATA -->
如果给定别名标识的项是通过调用 <code>setCertificateEntry</code> 或者调用使用 <code>TrustedCertificateEntry</code> 作为参数的 <code>setEntry</code> 来创建的，则返回 true。

@param alias 要检查的 keystore 项的别名

@return 如果给定别名标识的项包含一个可信证书，则返回 true；否则，返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String java.security.KeyStoreSpi.engineGetCertificateAlias(Certificate cert)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回其证书和给定证书匹配的第一个 keystore 项的名称（别名）。

<p>此方法试图将给定证书与每一个 keystore 项相匹配。如果将被考虑的项是通过调用 <code>setCertificateEntry</code> 或者调用使用 <code>TrustedCertificateEntry</code> 作为参数的 <code>setEntry</code> 创建的，则将给定证书与该项的证书进行比较。

<p> 如果将被考虑的项是通过调用 <code>setKeyEntry</code> 或者调用使用 <code>PrivateKeyEntry</code> 作为参数的 <code>setEntry</code> 创建的，则将给定证书与该项证书链的第一个元素进行比较。

@param cert 要匹配的证书

@return 带有匹配证书的第一个项的别名；如果在此 keystore 中没有此类项存在，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.security.KeyStoreSpi.engineStore(OutputStream stream, char[] password) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 keystore 存储到给定输出流中，并用给定的密码保护其完整性。

@param stream 要写入此 keystore 的输出流。
@param password 生成 keystore 完整性检验的密码

@exception IOException 如果存在数据的 I/O 问题
@exception NoSuchAlgorithmException 如果不能找到恰当的数据完整性算法
@exception CertificateException 如果包含在 keystore 数据中的任何证书不能被存储

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.KeyStoreSpi.engineStore(KeyStore.LoadStoreParameter param) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的 <code>KeyStore.LoadStoreParmeter</code> 存储此 keystore。

@param param 指出存储 keystore 的方式的 <code>KeyStore.LoadStoreParmeter</code>，可以为 <code>null</code>

@exception IllegalArgumentException 如果给定的 <code>KeyStore.LoadStoreParmeter</code> 输入无法识别
@exception IOException 如果存在数据 I/O 问题
@exception NoSuchAlgorithmException 如果不能找到恰当的数据完整性算法
@exception CertificateException 如果 keystore 数据中的任何证书不能被存储

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.security.KeyStoreSpi.engineLoad(InputStream stream, char[] password) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
从给定的输入流中加载此 KeyStore。

<p>可能给出密码来解锁 keystore（例如驻留在硬件标记设备上的 keystore）或检验 keystore 数据的完整性。如果没有给出用于完整性检验的密码，那么就不会执行完整性检验。

@param stream 从其加载 keystore 的输入流，或 <code>null</code>
@param password 用来检验 keystore 完整性的密码，用来解锁 keystore 的密码，或 <code>null</code>

@exception IOException 如果存在 keystore 数据的 I/O 或格式问题，如果需要密码却没有给出，或者给出的密码错误。如果错误是由于密码错误，则 <code>IOException</code> 的 {@link Throwable#getCause cause} 应该是一个 <code>UnrecoverableKeyException</code>
@exception NoSuchAlgorithmException 如果不能找到用来检验 keystore 完整性的算法
@exception CertificateException 如果不能加载 keystore 中的任何证书

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.KeyStoreSpi.engineLoad(KeyStore.LoadStoreParameter param) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用给定的 <code>KeyStore.LoadStoreParameter</code> 加载该 keystore。

<p> 注意，如果此 KeyStore 已经被加载，则它将再次从给定参数中被初始化和加载。

@param param 指出加载 keystore 的方式的 <code>KeyStore.LoadStoreParameter</code>，可以为 <code>null</code>

@exception IllegalArgumentException 如果给定的 <code>KeyStore.LoadStoreParameter</code> 输入无法识别
@exception IOException 如果存在 keystore 数据的 I/O 或格式问题。如果错误是由于 <code>ProtectionParameter</code> 不正确（如密码错误），则 <code>IOException</code> 的 {@link Throwable#getCause cause} 应该是一个 <code>UnrecoverableKeyException</code>
@exception NoSuchAlgorithmException 如果不能找到用来检验 keystore 完整性的算法
@exception CertificateException 如果不能加载 keystore 中的任何证书

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.KeyStore.Entry java.security.KeyStoreSpi.engineGetEntry(String alias, KeyStore.ProtectionParameter protParam) throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableEntryException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定保护参数获取指定别名的 <code>KeyStore.Entry</code>。

@param alias 获取此别名的 <code>KeyStore.Entry</code>
@param protParam 用来保护 <code>Entry</code> 的 <code>ProtectionParameter</code>，可以为 <code>null</code>

@return 指定别名的 <code>KeyStore.Entry</code>；如果不存在这样的项，则返回 <code>null</code>

@exception KeyStoreException 如果操作失败
@exception NoSuchAlgorithmException 如果不能找到恢复项的算法
@exception UnrecoverableEntryException 如果指定的 <code>protParam</code> 不足或无效
@exception UnrecoverableKeyException 如果该项是 <code>PrivateKeyEntry</code> 或 <code>SecretKeyEntry</code> 并且指定的 <code>protParam</code> 不包含恢复密钥所需的信息（如密码错误）

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.KeyStoreSpi.engineSetEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
用指定别名保存 <code>KeyStore.Entry</code>。指定的保护参数用来保护 <code>Entry</code>。

<p> 如果指定别名的项已经存在，它将被重写。

@param alias 以此别名保存 <code>KeyStore.Entry</code>
@param entry 要保存的 <code>Entry</code>
@param protParam 用来保护 <code>Entry</code> 的 <code>ProtectionParameter</code>，可以为 <code>null</code>

@exception KeyStoreException 如果此操作失败

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.KeyStoreSpi.engineEntryInstanceOf(String alias, java.lang.Class<? extends java.security.KeyStore.Entry> entryClass)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定指定 <code>alias</code> 的 keystore <code>Entry</code> 是否是指定 <code>entryClass</code> 的实例或子类。

@param alias 别名
@param entryClass 项的类

@return 如果指定 <code>alias</code> 的 keystore <code>Entry</code> 是指定 <code>entryClass</code> 的实例或子类，则返回 true；否则返回 false。

@since 1.5

<!-- END DATA -->
