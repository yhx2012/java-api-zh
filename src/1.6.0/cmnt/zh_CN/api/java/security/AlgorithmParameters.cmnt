<!-- BEGIN KEY -->
public class java.security.AlgorithmParameters extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
此类用作密码参数的不透明表示形式。
 
<p>可以通过调用 <code>getInstance</code> 工厂方法（返回给定类的实例的 static 方法）之一获取用于管理特定算法的参数的 <code>AlgorithmParameters</code> 对象。
 
 
<p>返回 <code>AlgorithmParameters</code> 对象后，必须使用适当的参数规范或参数编码通过调用 <code>init</code> 方法初始化该对象。

<p>通过调用 <code>getParameterSpec</code> 可以从 <code>AlgorithmParameters</code> 对象获取透明参数规范，可以通过调用 <code>getEncoded</code> 获取参数的字节编码。

@author Jan Luehe

@version 1.24, 05/05/04

@see java.security.spec.AlgorithmParameterSpec
@see java.security.spec.DSAParameterSpec
@see KeyPairGenerator

@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.AlgorithmParameters(AlgorithmParametersSpi paramSpi, Provider provider, String algorithm)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 AlgorithmParameters 对象。

@param paramSpi 委托
@param provider 提供者
@param algorithm 算法

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.security.AlgorithmParameters.getAlgorithm()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此参数对象关联的算法的名称。
 
@return 算法名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.AlgorithmParameters java.security.AlgorithmParameters.getInstance(String algorithm) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定算法的参数对象。

 <p> 此方法从首选 Provider 开始，遍历已注册安全提供者列表。返回一个封装 AlgorithmParametersSpi 实现的新 AlgorithmParameters 对象，该实现取自第一个支持指定算法的 Provider。

 <p> 注意，已注册提供者列表可以通过 {@link Security#getProviders() Security.getProviders()} 方法获得。

<p>必须使用适当参数规范或参数编码通过调用 <code>init</code> 方法初始化返回的参数对象。

@param algorithm 所请求算法的名称。有关标准算法名称的信息，请参阅 <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a> 的附录 A。

@return 新的参数对象。

@exception NoSuchAlgorithmException 如果没有任何 Provider 支持指定算法的 AlgorithmParametersSpi 实现。
 @see Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.AlgorithmParameters java.security.AlgorithmParameters.getInstance(String algorithm, String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回指定算法的参数对象。


<p> 返回一个封装 AlgorithmParametersSpi 实现的新 AlgorithmParameters 对象，该实现取自指定的提供者。指定的提供者必须已经在安全提供者列表中注册。


 <p> 注意，已注册提供者列表可以使用 {@link Security#getProviders() Security.getProviders()} 方法获得。

@param algorithm 所请求算法的名称。有关标准算法名称的信息，请参阅 <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a> 的附录 A。

@param provider  提供者的名称。

@return 新的参数对象。

@exception NoSuchAlgorithmException 如果无法从指定提供者获得指定算法的 AlgorithmParametersSpi 实现。

@exception NoSuchProviderException 如果指定提供者没有在安全提供者列表中注册。

@exception IllegalArgumentException 如果提供者的名称为 null 或空。 
 

@see Provider 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.AlgorithmParameters java.security.AlgorithmParameters.getInstance(String algorithm, Provider provider) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

返回指定算法的参数对象。

<p> 返回一个封装 AlgorithmParametersSpi 实现的新 AlgorithmParameters 对象，该实现取自指定的 Provider 对象。注意，指定的 Provider 对象无需在提供者列表中注册。

<p>必须使用适当参数规范或参数编码通过调用 <code>init</code> 方法初始化返回的参数对象。

@param algorithm 所请求算法的名称。有关标准算法名称的信息，请参阅 <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a> 的附录 A。

@param provider 提供者的名称。

@return 新的参数对象。

@exception NoSuchAlgorithmException 如果无法从指定 Provider 对象获得指定算法的 AlgorithmParametersSpi 实现。

@exception IllegalArgumentException 如果 provider 为 null。


@see Provider

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider java.security.AlgorithmParameters.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此参数对象的提供者。
 
@return 此参数对象的提供者。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.AlgorithmParameters.init(AlgorithmParameterSpec paramSpec) throws java.security.spec.InvalidParameterSpecException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用在 <code>paramSpec</code> 中指定的参数初始化此参数对象。

@param paramSpec 参数规范。

@exception InvalidParameterSpecException 如果给定的参数规范不适用于初始化此参数对象，或者已经初始化此参数对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.AlgorithmParameters.init(byte[] params) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据参数的基本解码格式导入指定的参数并对其解码。如果此参数类型的 ASN.1 规范存在，则参数的基本解码格式为 ASN.1。

@param params 编码的参数。

@exception IOException 如果发生解码错误，或者已经初始化此参数对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.AlgorithmParameters.init(byte[] params, String format) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定的解码方案从 <code>params</code> 导入参数并对其解码。如果 <code>format</code> 为 null，则使用参数的基本解码格式。如果这些参数的 ASN.1 规范存在，则基本解码格式为 ASN.1。

@param params 编码的参数。

@param format 解码方案的名称。

@exception IOException 如果发生解码错误，或者已经初始化此参数对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final T extends java.security.spec.AlgorithmParameterSpec java.security.AlgorithmParameters.getParameterSpec(java.lang.Class<T> paramSpec) throws java.security.spec.InvalidParameterSpecException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此参数对象的（透明）规范。<code>paramSpec</code> 标识应该在其中返回参数的规范类。例如，该类可以为 <code>DSAParameterSpec.class</code>，指示应该在 <code>DSAParameterSpec</code> 类的实例中返回参数。

@param paramSpec 应该在其中返回参数的规范类。

@return 参数规范。

@exception InvalidParameterSpecException 如果请求的参数规范不适合此参数对象，或者尚未初始化此参数对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte[] java.security.AlgorithmParameters.getEncoded() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回基本编码格式的参数。如果此参数类型的 ASN.1 规范存在，则参数的基本编码格式为 ASN.1。

@return 使用基本编码格式编码的参数。

@exception IOException 如果发生编码错误，或者尚未初始化此参数对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte[] java.security.AlgorithmParameters.getEncoded(String format) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回以指定方案编码的参数。如果 <code>format</code> 为 null，则使用参数的基本编码格式。如果这些参数的 ASN.1 规范存在，则基本编码格式为 ASN.1。

@param format 编码格式的名称。

@return 使用指定的编码方案编码的参数。

@exception IOException 如果发生编码错误，或者尚未初始化此参数对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.security.AlgorithmParameters.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回描述参数的格式化字符串。

@return 描述参数的格式化字符串；如果尚未初始化此参数对象，则返回 null。

<!-- END DATA -->
