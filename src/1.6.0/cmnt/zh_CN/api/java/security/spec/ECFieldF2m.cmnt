<!-- BEGIN KEY -->
public class java.security.spec.ECFieldF2m extends java.lang.Object implements java.security.spec.ECField
<!-- END KEY -->
<!-- BEGIN DATA -->
此不可变类定义椭圆曲线 (EC) 首数为 2 的有限字段。

@see ECField

@author Valerie Peng
@version 1.3, 12/19/03

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.spec.ECFieldF2m(int m)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用常规方法创建一个椭圆曲线首数为 2（具有 2^<code>m</code> 个元素）的有限字段。
@param m 2^<code>m</code> 表示元素数。
@exception IllegalArgumentException 如果 <code>m</code> 不是正数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.spec.ECFieldF2m(int m, BigInteger rp)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用多项式方法创建一个椭圆曲线首数为 2（具有 2^<code>m</code> 个元素）的有限字段。此字段的降序排列多项式基于 <code>rp</code>，其第 i 位对应于降序排列多项式的第 i 个系数。<p> 
注：一个有效的降序排列多项式或者是一个三项式（X^<code>m</code> + X^<code>k</code> + 1，其中 <code>m</code> &gt; <code>k</code> &gt;= 1），或者是一个五项式（X^<code>m</code> + X^<code>k3</code> + X^<code>k2</code> + X^<code>k1</code> + 1，其中 <code>m</code> &gt; <code>k3</code> &gt; <code>k2</code> &gt; <code>k1</code> &gt;= 1）。
@param m 2^<code>m</code> 表示元素数。
@param rp BigInteger，其第 i 位对应于降序排列多项式的第 i 个系数。
@exception NullPointerException 如果 <code>rp</code> 为 null。
@exception IllegalArgumentException 如果 <code>m</code> 不是正数，或者 <code>rp</code> 不表示一个有效的降序排列多项式。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.spec.ECFieldF2m(int m, int[] ks)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用多项式方法创建椭圆曲线首数为 2（具有 2^<code>m</code> 个元素）的有限字段。此字段的降序排列多项式基于 <code>ks</code>，其内容包含降序排列多项式的中间项的顺序。注：一个有效的降序排列多项式要么是一个三项式（X^<code>m</code> + X^<code>k</code> + 1，其中 <code>m</code> &gt; <code>k</code> &gt;= 1），要么是一个五项式（X^<code>m</code> + X^<code>k3</code> + X^<code>k2</code> + X^<code>k1</code> + 1，其中 <code>m</code> &gt; <code>k3</code> &gt; <code>k2</code> &gt; <code>k1</code> &gt;= 1），所以，<code>ks</code> 的长度应为 1 或 3。
@param m 2^<code>m</code> 表示元素数。
@param ks 降序排列多项式的中间项的顺序。复制此数组的内容，以防止随后进行修改。
@exception NullPointerException 如果 <code>ks</code> 为 null。
@exception IllegalArgumentException 如果 <code>m</code> 不是正数，或者 <code>ks</code> 的长度既不是 1，也不是 3，或者 <code>ks</code> 中的值不在 <code>m</code>-1 和 1（包括）之间，并且不按降序排列。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.spec.ECFieldF2m.getFieldSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回以比特为单位的字段大小，对于此首数为 2 的有限字段，该字段大小为 <code>m</code>。
@return 以比特为单位的字段大小。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.spec.ECFieldF2m.getM()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此首数为 2 的有限字段的值 <code>m</code>。
@return <code>m</code> 2^<code>m</code> 表示元素数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.BigInteger java.security.spec.ECFieldF2m.getReductionPolynomial()
<!-- END KEY -->
<!-- BEGIN DATA -->
对于多项式方法，返回一个 BigInteger，其第 i 位对应于降序排列多项式的第 i 个系数，对于常规方法，返回 null。
@return 对于多项式方法，返回一个 BigInteger，其第 i 位对应于降序排列多项式的第 i 个系数，对于常规方法，返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] java.security.spec.ECFieldF2m.getMidTermsOfReductionPolynomial()
<!-- END KEY -->
<!-- BEGIN DATA -->
对于多项式方法，返回包含降序排列多项式的中间项顺序的整数数组，对于常规方法，返回 null。
@return 对于多项式方法，返回包含降序排列多项式的中间项顺序的整数数组，对于常规方法，返回 null。每次调用此方法时，都返回一个新数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.spec.ECFieldF2m.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较此有限字段与指定对象的相等性。
@param obj 要比较的对象。
@return 如果 <code>obj</code> 是 ECFieldF2m 的一个实例，并且 <code>m</code> 和降序排列多项式匹配，则返回 true，否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.spec.ECFieldF2m.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此首数为 2 的有限字段的哈希码值。
@return 哈希码值。

<!-- END DATA -->
