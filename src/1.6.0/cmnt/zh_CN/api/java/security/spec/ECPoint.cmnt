<!-- BEGIN KEY -->
public class java.security.spec.ECPoint extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
此不可变类在仿射坐标中表示椭圆曲线 (EC) 上的点。其他坐标系可以扩展此类，以便在其他坐标中表示此点。

@author Valerie Peng
@version 1.3, 12/19/03

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.security.spec.ECPoint java.security.spec.ECPoint.POINT_INFINITY
<!-- END KEY -->
<!-- BEGIN DATA -->
这就将该点定义为无穷大。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.spec.ECPoint(BigInteger x, BigInteger y)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定的仿射 x 坐标 <code>x</code> 和仿射 y 坐标 <code>y</code> 创建 ECPoint。
@param x 仿射 x 坐标。
@param y 仿射 y 坐标。
@exception NullPointerException 如果 <code>x</code> 或 <code>y</code> 为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.BigInteger java.security.spec.ECPoint.getAffineX()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回仿射 x 坐标 <code>x</code>。注：POINT_INFINITY 的仿射 x 坐标为 null。
@return 仿射 x 坐标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.BigInteger java.security.spec.ECPoint.getAffineY()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回仿射 y 坐标 <code>y</code>。注：POINT_INFINITY 的仿射 y 坐标为 null 。
@return 仿射 y 坐标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.spec.ECPoint.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
比较此椭圆曲线点与指定对象的相等性。
@param obj 要比较的对象。
@return 如果 <code>obj</code> 是 ECPoint 的一个实例，并且仿射坐标相匹配，则返回 true，否则返回 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.spec.ECPoint.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此椭圆曲线点的哈希码值。
@return 哈希码值。

<!-- END DATA -->
