<!-- BEGIN KEY -->
public abstract static class java.security.KeyStore.Builder extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
将被实例化的 KeyStore 对象的描述。

<p>此类的实例封装了初始化和实例化 KeyStore 对象所需的信息。当调用 {@linkplain #getKeyStore} 方法时触发该过程。

<p>这使将配置从 KeyStore 对象的创建中分离出来和（例如）在需要前一直延迟密码提示成为可能。

@see KeyStore
@see javax.net.ssl.KeyStoreBuilderParameters
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.KeyStore.Builder()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造新的 Builder。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.KeyStore java.security.KeyStore.Builder.getKeyStore() throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此对象描述的 KeyStore。

@exception KeyStoreException 如果操作期间出现错误，例如，如果 KeyStore 不能被实例化或加载。

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.KeyStore.ProtectionParameter java.security.KeyStore.Builder.getProtectionParameter(String alias) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回应该用来获取具有给定别名的 {@link KeyStore.Entry Entry} 的 ProtectionParameters。在调用此方法前必须调用 <code>getKeyStore</code> 方法。

@return 应该用来获取具有给定别名的 {@link KeyStore.Entry Entry} 的 ProtectionParameters。
@param alias KeyStore 项的别名
@throws NullPointerException 如果 alias 为 null
@throws KeyStoreException 如果操作期间发生错误
@throws IllegalStateException 如果调用此方法前没有调用 getKeyStore 方法

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.KeyStore.Builder java.security.KeyStore.Builder.newInstance(KeyStore keyStore, KeyStore.ProtectionParameter protectionParameter)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回封装给定 KeyStore 的新 Builder。所返回对象的 {@linkplain #getKeyStore} 方法将返回 <code>keyStore</code>，{@linkplain #getProtectionParameter getProtectionParameter()} 方法将返回 <code>protectionParameters</code>。

<p> 如果一个现有的 KeyStore 对象需要和基于 Builder 的 APIs 一起使用，则此方法很有用。

@return 新的 Builder 对象
@param keyStore 将被封装的 KeyStore
@param protectionParameter 用来保护 KeyStore 项的 ProtectionParameter
@throws NullPointerException 如果 keyStore 或 protectionParameters 为 null
@throws IllegalArgumentException 如果 keyStore 没有被初始化

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.KeyStore.Builder java.security.KeyStore.Builder.newInstance(String type, Provider provider, File file, KeyStore.ProtectionParameter protection)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回新的 Builder 对象。

<p>第一次对返回的 builder 调用 {@link #getKeyStore} 方法将创建 <code>type</code> 类型的 KeyStore，并将调用其 {@link KeyStore#load load()} 方法。<code>inputStream</code> 参数是根据 <code>file</code> 构建的。如果 <code>protection</code> 是 <code>PasswordProtection</code>，则通过调用 <code>getPassword</code> 方法获取密码。而如果 <code>protection</code> 是 <code>CallbackHandlerProtection</code>，则通过调用 CallbackHandler 获取密码。

<p>对 {@link #getKeyStore} 的后续调用和初始调用返回相同的对象。如果初始调用失败且抛出 KeyStoreException，则后续的调用也抛出 KeyStoreException。

<p>根据 <code>provider</code>（如果非 null）初始化 KeyStore。否则，将搜索所有安装的提供者。

<p>调用 {@link #getProtectionParameter getProtectionParameter()} 将返回 {@link KeyStore.PasswordProtection PasswordProtection} 对象，该对象封装用来调用 <code>load</code> 方法的密码。

<p><em>注意</em>，{@link #getKeyStore} 方法在调用此方法的代码的 {@link AccessControlContext} 中执行。

@return 新的 Builder 对象
@param type 将构造的 KeyStore 类型
@param provider 根据其实例化 KeyStore 提供者（或 null）
@param file 包含 KeyStore 数据的 File
@param protection 保护 KeyStore 数据的 ProtectionParameter
@throws NullPointerException 如果 type、file 或 protection 为 null
@throws IllegalArgumentException 如果 protection 既不是 PasswordProtection 也不是 CallbackHandlerProtection 的实例；如果 file 不存在或其不表示一个标准文件

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.KeyStore.Builder java.security.KeyStore.Builder.newInstance(String type, Provider provider, KeyStore.ProtectionParameter protection)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回新的 Builder 对象。

<p>每次对返回的 builder 调用 {@link #getKeyStore} 方法将返回新的 <code>type</code> 类型的 KeyStore 对象。使用封装 <code>protection</code> 的 <code>LoadStoreParameter</code> 调用其 {@link KeyStore#load(KeyStore.LoadStoreParameter) load()} 方法。

<p>根据 <code>provider</code>（如果非 null）初始化 KeyStore。否则，将搜索所有安装的提供者。

<p>调用 {@link #getProtectionParameter getProtectionParameter()} 将返回 <code>protection</code>。

<p><em>注意</em>，{@link #getKeyStore} 方法在调用此方法的代码的 {@link AccessControlContext} 中执行。

@return 新的 Builder 对象
@param type 将构造的 KeyStore 类型
@param provider 根据其实例化 KeyStore 的提供者（或 null）
@param protection 保护 Keystore 的 ProtectionParameter
@throws NullPointerException 如果 type 或 protection 为 null

<!-- END DATA -->
