<!-- BEGIN KEY -->
public final class java.security.Security extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>此类集中了所有的安全属性和常见的安全方法。其主要用途之一是管理提供者。

@author Benjamin Renaud
@version 1.126, 05/18/04

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.security.Security.getAlgorithmProperty(String algName, String propName)
<!-- END KEY -->
<!-- BEGIN DATA -->

获取某个算法的指定属性。算法名称必须是标准名称。有关标准算法名称的信息，请参见 <a href=  "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">Java Cryptography Architecture API Specification &amp; Reference </a> 中的附录 A。一种可能的用法是利用专门的算法分析程序，这些程序可以将类映射到它们理解的算法中（非常类似于 Key 分析程序的做法）。

@param algName 算法名称。

@param propName 要获得的属性名称。
 
@return 指定的属性值。  

@deprecated 此方法用来返回 &quot;SUN&quot; 密码服务提供者的主文件中的专有属性的值，以便确定如何解析特定于算法的参数。使用新的基于提供者的、与算法无关的 <code>AlgorithmParameters</code> 和 <code>KeyFactory</code> 引擎类（在 J2SE 1.2 版中引入）代替。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized int java.security.Security.insertProviderAt(Provider provider, int position)
<!-- END KEY -->
<!-- BEGIN DATA -->
在指定的位置添加新的提供者。该位置就是在其中搜索提供者以寻找请求的算法的首选顺序。该位置从 1 开始，也就是说 1 是首选数，其后是 2，等等。
 
<p>如果将给定的提供者安装到了请求的位置，则在该位置使用的提供者和所有位置大于 <code>position</code> 的提供者将向上移动一个位置（向所安装的提供者列表的尾部移动）。
 
<p>如果已经安装了某个提供者，则不能再添加该程序。
 
<p>首先，如果有安全管理器，则调用带有字符串 <code>&quot;insertProvider.&quot;+provider.getName()</code> 的 <code>checkSecurityAccess</code> 方法可查看是否可以添加新的提供者。如果使用 <code>checkSecurityAccess</code> 的默认实现（即未重写此方法），则会导致调用带有 <code>SecurityPermission(&quot;insertProvider.&quot;+provider.getName())</code> 权限的安全管理器的 <code>checkPermission</code> 方法。

@param provider 要添加的提供者。

@param position 调用方调用此提供者的首选位置。
 
@return 添加提供者的实际首选位置，如果因已安装了提供者而未添加它，则返回 -1。

@throws  NullPointerException 如果提供者为 null
@throws  SecurityException 如果安全管理器已存在，且其 <code>{@link java.lang.SecurityManager#checkSecurityAccess}</code> 方法拒绝对新的提供者进行添加访问

@see #getProvider
@see #removeProvider
@see java.security.SecurityPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.security.Security.addProvider(Provider provider)
<!-- END KEY -->
<!-- BEGIN DATA -->
将提供者添加到下一个可用位置。

<p>首先，如果有安全管理器，则调用带有字符串 <code>&quot;insertProvider.&quot;+provider.getName()</code> 的 <code>checkSecurityAccess</code> 方法可查看是否可以添加新的提供者。如果使用 <code>checkSecurityAccess</code> 的默认实现（即未重写此方法），则会导致调用带有 <code>SecurityPermission(&quot;insertProvider.&quot;+provider.getName())</code> 权限的安全管理器的 <code>checkPermission</code> 方法。
 
@param provider 要添加的提供者。

@return 添加提供者的首选位置，如果因已安装了提供者而未添加它，则返回 -1。

@throws  NullPointerException 如果提供者为 null
@throws  SecurityException 如果安全管理器已存在，且其 <code>{@link java.lang.SecurityManager#checkSecurityAccess}</code> 方法拒绝对新的提供者进行添加访问
 
@see #getProvider
@see #removeProvider
@see java.security.SecurityPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized void java.security.Security.removeProvider(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除带有指定名称的提供者。

<p>当移除指定的提供者时，所有位置大于指定提供者所在位置的提供者都将向下移动一个位置（向已安装的提供者列表的头部移动）。

<p>此方法默认返回是否未安装提供者或者名称是否为 null。
 
<p>首先，如果有安全管理器，则调用带有字符串 <code>&quot;removeProvider.&quot;+name</code> 的 <code>checkSecurityAccess</code> 方法可查看是否可以移除该提供者。如果使用 <code>checkSecurityAccess</code> 的默认实现（即未重写此方法），则会导致调用带有 <code>SecurityPermission(&quot;removeProvider.&quot;+name)</code> 权限的安全管理器的 <code>checkPermission</code> 方法。

@param name 要移除的提供者的名称。

@throws  SecurityException 如果有安全管理器，且其 <code>{@link java.lang.SecurityManager#checkSecurityAccess}</code> 方法拒绝对该提供者进行移除访问

@see #getProvider
@see #addProvider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.Provider[] java.security.Security.getProviders()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含所有已安装的提供者的数组。数组中提供者的顺序是其首选顺序。
 
@return 所有已安装的提供者的数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.Provider java.security.Security.getProvider(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回使用指定的名称安装的提供者（如果有）。如果未安装带有指定名称的提供者，或者名称为 null，则将返回 null。
 
@param name 要获取的提供者的名称。
 
@return 指定名称的提供者。

@see #removeProvider
@see #addProvider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.Provider[] java.security.Security.getProviders(String filter)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含满足指定的选择标准的所有已安装的提供者的数组，如果尚未安装此类提供者，则返回 null。返回的提供者将根据其<a href=
 "#insertProviderAt(java.security.Provider, int)">首选顺序</a>进行排序。 
  
<p> 加密服务始终与特定的算法或类型相关。例如，数字签名服务始终与特定算法（如 DSA）相关，CertificateFactory 服务始终与特定的证书类型（如 X.509）相关。

<p>选择标准必须用以下两种格式之一指定：
 <ul>
 <li> <i>&lt;crypto_service&gt;.&lt;algorithm_or_type&gt;</i> <p>加密服务名不能包含任何圆点。
<p> 当且仅当提供者为指定的加密服务实现了指定的算法或类型时，该提供者才可以满足指定的选择标准。
<p> 例如，任何为 X.509 证书提供 CertificateFactory 实现的提供者都可以满足 &quot;CertificateFactory.X.509&quot; 的要求。
 <li> <i>&lt;crypto_service&gt;.&lt;algorithm_or_type&gt; &lt;attribute_name&gt;:&lt; attribute_value&gt;</i>
<p> 加密服务名不能包含任何圆点。在 <i>&lt;algorithm_or_type&gt;</i> 与 <i>&lt;attribute_name&gt;</i> 之间必须有一个或多个空格字符。
<p> 当且仅当某个提供者为指定的加密服务实现了指定的算法或类型，并且其实现可以满足由指定的属性名称/值对表达的限制要求时，该提供者才可以满足此选择标准。
<p> 例如，任何实施了 SHA1withDSA 签名算法、keysize 为 1024（或更大）的提供者都可以满足 &quot;Signature.SHA1withDSA KeySize:1024&quot; 的需要。

 </ul>

<p> 有关标准加密服务名称、标准算法名称和标准属性名称的信息，请参阅 <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">Java Cryptography Architecture API Specification &amp; Reference </a> 中的附录 A。

@param filter 选择提供者的标准。过滤器是区分大小写的。

@return 可满足选择标准的所有已安装的提供者，如果尚未安装此类提供者，则返回 null。

@throws InvalidParameterException 如果过滤器不是需要的格式
@throws NullPointerException 如果过滤器为 null

@see #getProviders(java.util.Map)
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.Provider[] java.security.Security.getProviders(java.util.Map<java.lang.String, java.lang.String> filter)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回包含可以满足指定的 * 选择标准的所有已安装的提供者的数组，如果尚未安装此类提供者，则返回 null。返回的提供者将根据其 <a href=  "#insertProviderAt(java.security.Provider, int)">preference order</a> 进行排序。 
 
<p>选择标准将通过映射表示。每个映射项都表示一种选择标准。当且仅当某个提供者满足所有选择标准时才可选择它。此映射中任何项的密钥都必须使用以下两种格式之一：
 <ul>
 <li> <i>&lt;crypto_service&gt;.&lt;algorithm_or_type&gt;</i>
<p> 加密服务名不能包含任何圆点。
<p> 与密钥相关的值必须为空字符串。
<p> 当且仅当某个提供者为指定的加密服务实现了指定的算法或类型时，该提供者才能满足此选择标准。
 <li>  <i>&lt;crypto_service&gt;.&lt;algorithm_or_type&gt; &lt;attribute_name&gt;</i>
<p> 加密服务名不能包含任何圆点。在 <i>&lt;algorithm_or_type&gt;</i> 与 <i>&lt;attribute_name&gt;</i> 之间必须有一个或多个空格字符。
<p> 与密钥相关的值必须为非空字符串。当且仅当某个提供者为指定的加密服务实现了指定的算法或类型，并且其实现可以满足由指定的属性名称/值对表达的限制要求时，该提供者才可以满足此选择标准。
 </ul>

<p> 有关标准加密服务名称、标准算法名称和标准属性名称的信息，请参阅 <a href=  "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">Java Cryptography Architecture API Specification &amp; Reference </a> 中的附录 A。

@param filter 选择提供者的标准。过滤器是区分大小写的。

@return 所有可满足选择标准的已安装的提供者，如果尚未安装此类提供者，则返回 null。 

@throws InvalidParameterException 如果过滤器不是需要的格式
@throws NullPointerException 如果过滤器为 null

@see #getProviders(java.lang.String)
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.security.Security.getProperty(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
获取安全属性值。

<p>首先，如果有安全管理器，将调用带有 <code>java.security.SecurityPermission(&quot;getProperty.&quot;+key)</code> 权限的 <code>checkPermission</code> 方法，以查看是否可以获取指定的安全属性值。 

@param key 要获取的属性的密钥。

@return 与密钥对应的安全属性的值。

@throws  SecurityException 如果有安全管理器，并且其 <code>{@link java.lang.SecurityManager#checkPermission}</code> 方法拒绝对指定的安全属性值进行获取访问
@throws  NullPointerException 如果密钥为 null
 
@see #setProperty
@see java.security.SecurityPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.security.Security.setProperty(String key, String datum)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置安全属性值。

<p>首先，如果有安全管理器，将调用其带有 <code>java.security.SecurityPermission(&quot;setProperty.&quot;+key)</code> 权限的 <code>checkPermission</code> 方法，以查看是否可以设置指定的安全属性值。

@param key 要设置的属性的名称。

@param datum 要设置的属性的值。

@throws  SecurityException 如果有安全管理器并且其 <code>{@link java.lang.SecurityManager#checkPermission}</code> 方法拒绝对指定的安全属性值进行设置访问
@throws  NullPointerException 如果密钥或数据为 null
 
@see #getProperty
@see java.security.SecurityPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Set<java.lang.String> java.security.Security.getAlgorithms(String serviceName)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回字符串 Set，这些字符串包含了指定的 Java 加密服务的所有可用算法或类型的名称（例如，Signature、MessageDigest、Cipher、Mac、KeyStore）。如果没有支持指定服务的提供者，或者 serviceName 为 null，则返回一个空 Set。有关 Java 加密服务的完整列表，请参阅 <a href="../../../technotes/guides/security/crypto/CryptoSpec.html">Java Cryptography Architecture API Specification &amp; Reference</a>。注：返回的 set 是不可改变的。

@param serviceName Java 加密服务的名称（例如，Signature、MessageDigest、Cipher、Mac、KeyStore）。注：此参数是区分大小写的。

@return 字符串的 Set，这些字符串包含用于指定的 Java 加密服务的所有可用算法或类型，如果没有支持指定服务的提供者，则返回一个空 set。

@since 1.4

<!-- END DATA -->
