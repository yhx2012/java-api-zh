<!-- BEGIN KEY -->
public class java.io.FileInputStream extends java.io.InputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>FileInputStream</code> 从文件系统中的某个文件中获得输入字节。哪些文件可用取决于主机环境。

<p><code>FileInputStream</code> 用于读取诸如图像数据之类的原始字节流。要读取字符流，请考虑使用 <code>FileReader</code>。

@author  Arthur van Hoff
@version 1.68, 04/07/06
@see     java.io.File
@see     java.io.FileDescriptor
@see	    java.io.FileOutputStream
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.FileInputStream(String name) throws java.io.FileNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
通过打开一个到实际文件的连接来创建一个 <code>FileInputStream</code>，该文件通过文件系统中的路径名 <code>name</code> 指定。创建一个新 <code>FileDescriptor</code> 对象来表示此文件连接。
 <p>
首先，如果有安全管理器，则用 <code>name</code> 作为参数调用其 <code>checkRead</code> 方法。
 <p>
如果指定文件不存在，或者它是一个目录，而不是一个常规文件，抑或因为其他某些原因而无法打开进行读取，则抛出 <code>FileNotFoundException</code>。

@param   name   与系统有关的文件名。
@exception  FileNotFoundException 如果该文件不存在，或者它是一个目录，而不是一个常规文件，抑或因为其他某些原因而无法打开进行读取。
@exception  SecurityException 如果存在安全管理器，且其 <code>checkRead</code> 方法拒绝对文件进行读取访问。
@see        java.lang.SecurityManager#checkRead(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.FileInputStream(File file) throws java.io.FileNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
通过打开一个到实际文件的连接来创建一个 <code>FileInputStream</code>，该文件通过文件系统中的 <code>File</code> 对象 <code>file</code> 指定。创建一个新 <code>FileDescriptor</code> 对象来表示此文件连接。
 <p>
首先，如果有安全管理器，则用 <code>file</code> 参数表示的路径作为参数调用其 <code>checkRead</code> 方法。
 <p>
如果指定文件不存在，或者它是一个目录，而不是一个常规文件，抑或因为其他某些原因而无法打开进行读取，则抛出 <code>FileNotFoundException</code>。

@param   file   为了进行读取而打开的文件。
@exception  FileNotFoundException 如果该文件不存在，或者它是一个目录，而不是一个常规文件，抑或因为其他某些原因而无法打开进行读取。
@exception  SecurityException 如果存在安全管理器，且其 <code>checkRead</code> 方法拒绝对文件进行读取访问。
@see        java.io.File#getPath()
@see        java.lang.SecurityManager#checkRead(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.FileInputStream(FileDescriptor fdObj)
<!-- END KEY -->
<!-- BEGIN DATA -->
通过使用文件描述符 <code>fdObj</code> 创建一个 <code>FileInputStream</code>，该文件描述符表示到文件系统中某个实际文件的现有连接。
 <p>
首先，如果有安全管理器，则用文件描述符 <code>fdObj</code> 作为参数调用其 <code>checkRead</code> 方法，以查看它是否可以读取该文件描述符。如果拒绝对该文件描述符进行读取访问，则抛出 <code>SecurityException</code>。
 <p>
如果 <code>fdObj</code> 为 null，则抛出 <code>NullPointerException</code>。

@param   fdObj   为了进行读取而打开的文件描述符。
@throws  SecurityException 如果存在安全管理器，且其 <code>checkRead</code> 方法拒绝对文件描述符进行读取访问
@see        SecurityManager#checkRead(java.io.FileDescriptor)

<!-- END DATA -->
<!-- BEGIN KEY -->
public native int java.io.FileInputStream.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从此输入流中读取一个数据字节。如果没有输入可用，则此方法将阻塞。

@return 下一个数据字节；如果已到达文件末尾，则返回 <code>-1</code>。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.FileInputStream.read(byte[] b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从此输入流中将最多 <code>b.length</code> 个字节的数据读入一个 byte 数组中。在某些输入可用之前，此方法将阻塞。

@param     b   存储读取数据的缓冲区。
@return     读入缓冲区的字节总数，如果因为已经到达文件末尾而没有更多的数据，则返回 <code>-1</code>。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.FileInputStream.read(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从此输入流中将最多 <code>len</code> 个字节的数据读入一个 byte 数组中。如果 <code>len</code> 不为 0，则在输入可用之前，该方法将阻塞；否则，不读取任何字节并返回 <code>0</code>。

@param     b   存储读取数据的缓冲区。
@param      off   目标数组 <code>b</code> 中的起始偏移量。
@param   len       读取的最大字节数。
@return     读入缓冲区的字节总数，如果因为已经到达文件末尾而没有更多的数据，则返回 <code>-1</code>。
@exception  NullPointerException 如果 <code>b</code> 为 <code>null</code>。
@exception  IndexOutOfBoundsException 如果 <code>off</code> 为负、<code>len</code> 为负，或者 <code>len</code> 大于 <code>b.length - off</code>
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public native long java.io.FileInputStream.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从输入流中跳过并丢弃 <code>n</code> 个字节的数据。

<p>出于各种原因，<code>skip</code> 方法最终跳过的字节数可能更少一些，甚至可能为 <code>0</code>。如果 <code>n</code> 为负，则抛出 <code>IOException</code>，即使 {@link InputStream} 超类的 <code>skip</code> 方法在这种情况下没有执行任何操作。返回实际跳过的字节数。

<p>此方法跳过的字节可能多于底层实现文件中剩余的字节。这不会产生异常，并且跳过的字节数可能包括底层实现文件的 EOF（文件结束符）之后的一些字节数。如果试图在跳过末尾之后读取流，那么会返回 -1（指示文件结束）。

@param      n   要跳过的字节数。
@return     实际跳过的字节数。
@exception  IOException 如果 n 为负，如果该流不支持查找操作，或者发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public native int java.io.FileInputStream.available() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回下一次对此输入流调用的方法可以不受阻塞地从此输入流读取（或跳过）的估计剩余字节数。下一次调用可能是同一个线程，也可能是另一个线程。一次读取或跳过此数量个字节不会发生阻塞，但读取或跳过的字节可能小于该数。

<p> 在某些情况下，非阻塞的读取（或跳过）操作在执行很慢时看起来受阻塞，例如，在网速缓慢的网络上读取大文件时。

@return     可以不受阻塞地从此输入流中读取（或跳过）的估计剩余字节数。
@exception  IOException 如果此文件输入流已通过调用 {@code close} 关闭，或者发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.FileInputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此文件输入流并释放与此流有关的所有系统资源。

<p> 如果此流有一个与之关联的通道，则关闭该通道。

@exception  IOException 如果发生 I/O 错误。

@revised 1.4
@spec JSR-51

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.io.FileDescriptor java.io.FileInputStream.getFD() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回表示到文件系统中实际文件的连接的 <code>FileDescriptor</code> 对象，该文件系统正被此 <code>FileInputStream</code> 使用。

@return     与此流有关的文件描述符对象。
@exception  IOException 如果发生 I/O 错误。
@see        java.io.FileDescriptor

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.nio.channels.FileChannel java.io.FileInputStream.getChannel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此文件输入流有关的唯一 {@link java.nio.channels.FileChannel FileChannel} 对象。

<p> 所返回通道的初始 {@link java.nio.channels.FileChannel#position() </code>position<code>} 将等于到目前为止从文件中读取的字节数。从此流中读取的字节会使通道的位置递增。显式地或通过读取来更改通道的位置会更改此流的文件位置。

@return  与此文件输入流有关的文件通道

@since 1.4
@spec JSR-51

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.io.FileInputStream.finalize() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
确保在不再引用文件输入流时调用其 <code>close</code> 方法。

@exception  IOException 如果发生 I/O 错误。
@see        java.io.FileInputStream#close()

<!-- END DATA -->
