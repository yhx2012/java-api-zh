<!-- BEGIN KEY -->
public class java.io.StringBufferInputStream extends java.io.InputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
此类允许应用程序创建输入流，在该流中读取的字节由字符串内容提供。应用程序还可以使用 <code>ByteArrayInputStream</code> 从 byte 数组中读取字节。
 <p>
只有字符串中每个字符的低八位可以由此类使用。

@author     Arthur van Hoff
@version    1.26, 05/18/04
@see        java.io.ByteArrayInputStream
@see        java.io.StringReader
@since      JDK1.0
@deprecated 此类未能正确地将字符转换为字节。从 JDK&nbsp;1.1 开始，从字符串创建流的首选方法是通过 <code>StringReader</code> 类进行创建。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.io.StringBufferInputStream.buffer
<!-- END KEY -->
<!-- BEGIN DATA -->
从中读取字节的字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.io.StringBufferInputStream.pos
<!-- END KEY -->
<!-- BEGIN DATA -->
要从输入流缓冲区中读取的下一个字符的索引。

@see        java.io.StringBufferInputStream#buffer

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.io.StringBufferInputStream.count
<!-- END KEY -->
<!-- BEGIN DATA -->
输入流缓冲区中有效字符数。

@see        java.io.StringBufferInputStream#buffer

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.StringBufferInputStream(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个字符串输入流，以从指定字符串读取数据。

@param      s   基本输入缓冲区。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.io.StringBufferInputStream.read()
<!-- END KEY -->
<!-- BEGIN DATA -->
从此输入流中读取下一个数据的字节。返回 <code>0</code> 到 <code>255</code> 范围内的 <code>int</code> 字节值。如果因流的末尾已到达而没有可用的字节，则返回值 <code>-1</code>。
 <p>
<code>StringBufferInputStream</code> 的 <code>read</code> 方法不会阻塞。它返回此输入流的缓冲区中下一个字符的低八位。

@return     下一个数据字节，如果到达流的末尾，则返回 <code>-1</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.io.StringBufferInputStream.read(byte[] b, int off, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
将最多 <code>len</code> 个数据字节从此输入流读入 byte 数组。
 <p>
<code>StringBufferInputStream</code> 的 <code>read</code> 方法不会阻塞。它将此输入流的缓冲区中字符的低八位复制到 byte 数组参数中。

@param      b     读入数据的缓冲区。
@param      off   数据的初始偏移量。
@param      len   读取的最多字节数。
@return     读入缓冲区的总字节数，如果由于流末尾已到达而不再有数据，则返回 <code>-1</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized long java.io.StringBufferInputStream.skip(long n)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此输入流中跳过输入的 <code>n</code> 个字节。如果已到达输入流的末尾，则可能会跳过非常少的字节。

@param      n   要跳过的字节数。
@return     跳过的实际字节数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.io.StringBufferInputStream.available()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回无阻塞情况下可以从此输入流读取的字节数。

@return     <code>count&nbsp;-&nbsp;pos</code> 的值，它是要从输入缓冲区中读取的剩余字节数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.io.StringBufferInputStream.reset()
<!-- END KEY -->
<!-- BEGIN DATA -->
将输入流重置为开始读取此输入流的基础缓冲区的第一个字符处。

<!-- END DATA -->
