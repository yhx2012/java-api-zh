<!-- BEGIN KEY -->
public abstract class java.io.FilterReader extends java.io.Reader
<!-- END KEY -->
<!-- BEGIN DATA -->
用于读取已过滤的字符流的抽象类。抽象类 <code>FilterReader</code> 自身提供了一些将所有请求传递给所包含的流的默认方法。<code>FilterReader</code> 的子类应重写这些方法中的一些方法，并且还可以提供一些额外的方法和字段。

@version 	1.19, 05/11/17
@author	Mark Reinhold
@since	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.io.Reader java.io.FilterReader.in
<!-- END KEY -->
<!-- BEGIN DATA -->
底层字符输入流。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.io.FilterReader(Reader in)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 filtered reader。

@param in  提供底层流的 Reader 对象。
@throws  NullPointerException 如果 <code>in</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.FilterReader.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取单个字符。

@exception  IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.FilterReader.read(char[] cbuf, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符读入数组的某一部分。

@exception  IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.io.FilterReader.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
跳过某些字符。

@exception  IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.FilterReader.ready() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
判断此流是否已经准备好用于读取。

@exception  IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.FilterReader.markSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
判断此流是否支持 mark() 操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.FilterReader.mark(int readAheadLimit) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
在流中的当前位置上作标记。

@exception  IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.FilterReader.reset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
重置该流。

@exception  IOException 如果发生 I/O 错误

<!-- END DATA -->
