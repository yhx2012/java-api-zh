<!-- BEGIN KEY -->
public interface java.io.DataOutput
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>DataOutput</code> 接口用于将数据从任意 Java 基本类型转换为一系列字节，并将这些字节写入二进制流。同时还提供了一个将 <code>String</code> 转换成 <a href="DataInput.html#modified-utf-8">UTF-8 修改版</a>格式并写入所得到的系列字节的工具。
 <p>
对于此接口中写入字节的所有方法，如果由于某种原因无法写入某个字节，则抛出 <code>IOException</code>。

@author  Frank Yellin
@version 1.23, 05/23/06
@see     java.io.DataInput
@see     java.io.DataOutputStream
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.DataOutput.write(int b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将参数 <code>b</code> 的八个低位写入输出流。忽略 <code>b</code> 的 24 个高位。

@param   b   要写入的字节。
@throws  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.DataOutput.write(byte[] b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将数组 <code>b</code> 中的所有字节写入输出流。如果 <code>b</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。如果 <code>b.length</code> 为零，则不写入字节。否则，首先写入字节 <code>b[0]</code>，然后写入字节 <code>b[1]</code>，依此类推；最后一个写入字节是 <code>b[b.length-1]</code>。

@param   b   数据。
@throws  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.DataOutput.write(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将数组 <code>b</code> 中的 <code>len</code> 个字节按顺序写入输出流。如果 <code>b</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。如果 <code>off</code> 为负，或 <code>len</code> 为负，抑或 <code>off+len</code> 大于数组 <code>b</code> 的长度，则抛出 <code>IndexOutOfBoundsException</code>。如果 <code>len</code> 为零，则不写入字节。否则，首先写入字节 <code>b[off]</code>，然后写入字节 <code>b[off+1]</code>，依此类推；最后一个写入字节是 <code>b[off+len-1]</code>。

@param   b   数据。
@param      off   数据中的起始偏移量。
@param   len       要写入的字节数。
@throws  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.DataOutput.writeBoolean(boolean v) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 <code>boolean</code> 值写入输出流。如果参数 <code>v</code> 为 <code>true</code>，则写入值 <code>(byte)1</code>；如果 <code>v</code> 为 <code>false</code>，则写入值 <code>(byte)0</code>。此方法写入的字节可由 <code>DataInput</code> 接口的 <code>readBoolean</code> 方法读取，然后该方法将返回一个等于 <code>v</code> 的 <code>boolean</code> 值。

@param   v   要写入的 boolean 值。
@throws  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.DataOutput.writeByte(int v) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将参数 <code>v</code> 的八个低位写入输出流。忽略 <code>v</code> 的 24 个高位。（这意味着 <code>writeByte</code> 的作用与使用整数做参数的 <code>write</code> 完全相同。）此方法写入的字节可由 <code>DataInput</code> 接口的 <code>readByte</code> 方法读取，然后该方法将返回一个等于 <code>(byte)v</code> 的 <code>byte</code> 值。

@param  v   要写入的字节值。
@throws  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.DataOutput.writeShort(int v) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将两个字节写入输出流，用它们表示参数值。要写入的字节值（按顺序显示）是： <p>
 <pre><code>
 (byte)(0xff &amp; (v &gt;&gt; 8))
 (byte)(0xff &amp; v)
 </code> </pre> <p>
此方法写入的字节可由 <code>DataInput</code> 接口的 <code>readShort</code> 方法读取，然后该方法将返回一个等于 <code>(short)v</code> 的 <code>short</code> 值。

@param  v   要写入的 <code>short</code> 值。
@throws  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.DataOutput.writeChar(int v) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 <code>char</code> 值写入输出流，该值由两个字节组成。要写入的字节值（按顺序显示）是：
 <p><pre><code>
 (byte)(0xff &amp; (v &gt;&gt; 8))
 (byte)(0xff &amp; v)
 </code></pre><p>
此方法写入的字节可由 <code>DataInput</code> 接口的 <code>readChar</code> 方法读取，然后该方法将返回一个等于 <code>(char)v</code> 的 <code>char</code> 值。

@param  v   要写入的 <code>char</code> 值。
@throws  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.DataOutput.writeInt(int v) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 <code>int</code> 值写入输出流，该值由四个字节组成。要写入的字节值（按顺序显示）是：
 <p><pre><code>
 (byte)(0xff &amp; (v &gt;&gt; 24))
 (byte)(0xff &amp; (v &gt;&gt; 16))
 (byte)(0xff &amp; (v &gt;&gt;    8))
 (byte)(0xff &amp; v)
 </code></pre><p>
此方法写入的字节可由 <code>DataInput</code> 接口的 <code>readInt</code> 方法读取，然后该方法将返回一个等于 <code>v</code> 的 <code>int</code> 值。

@param  v   要写入的 <code>int</code> 值。
@throws  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.DataOutput.writeLong(long v) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 <code>long</code> 值写入输出流，该值由八个字节组成。要写入的字节值（按顺序显示）是：
 <p><pre><code>
 (byte)(0xff &amp; (v &gt;&gt; 56))
 (byte)(0xff &amp; (v &gt;&gt; 48))
 (byte)(0xff &amp; (v &gt;&gt; 40))
 (byte)(0xff &amp; (v &gt;&gt; 32))
 (byte)(0xff &amp; (v &gt;&gt; 24))
 (byte)(0xff &amp; (v &gt;&gt; 16))
 (byte)(0xff &amp; (v &gt;&gt;  8))
 (byte)(0xff &amp; v)
 </code></pre><p>
此方法写入的字节可由 <code>DataInput</code> 接口的 <code>readLong</code> 方法读取，然后该方法将返回一个等于 <code>v</code> 的 <code>long</code> 值。

@param  v   要写入的 <code>long</code> 值。
@throws  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.DataOutput.writeFloat(float v) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 <code>float</code> 值写入输出流，该值由四个字节组成。实现这一点的方式是：首先使用与 <code>Float.floatToIntBits</code> 方法完全相同的方式将此 <code>float</code> 值转换为一个 <code>int</code> 值，然后使用与 <code>writeInt</code> 方法完全相同的方式写入该 <code>int</code> 值。此方法写入的字节可由 <code>DataInput</code> 接口的 <code>readFloat</code> 方法读取，然后该方法将返回一个等于 <code>v</code> 的 <code>float</code> 值。

@param  v   要写入的 <code>float</code> 值。
@throws  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.DataOutput.writeDouble(double v) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 <code>double</code> 值写入输出流，该值由八个字节组成。实现这一点的方式是：首先使用与 <code>Double.doubleToLongBits</code> 方法相同的方式将此 <code>double</code> 值转换为一个 <code>long</code> 值，然后使用与 <code>writeLong</code> 方法完全相同的方式写入该 <code>long</code> 值。此方法写入的字节可由 <code>DataInput</code> 接口的 <code>readDouble</code> 方法读取，然后该方法将返回一个等于 <code>v</code> 的 <code>double</code> 值。

@param  v   要写入的 <code>double</code> 值。
@throws  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.DataOutput.writeBytes(String s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个字符串写入输出流。字符串 <code>s</code> 中的每一个字符被依次写入输出流，每个字符用一个字节表示。如果 <code>s</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。<p>如果 <code>s.length</code> 为零，则不写入字节。否则，首先写入字符 <code>s[0]</code>，然后写入字符 <code>s[1]</code>，依此类推；最后一个写入字符是 <code>s[s.length-1]</code>。使用与 <code>writeByte</code> 方法完全相同的方法为每个字符写入一个低位字节。忽略字符串中每个字符的八个高位。

@param      s   要写入的字节字符串。
@throws  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.DataOutput.writeChars(String s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符串 <code>s</code> 中的所有字符按顺序写入输出流，每个字符用两个字节表示。如果 <code>s</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。如果 <code>s.length</code> 为零，则不写入字符。否则，首先写入字符 <code>s[0]</code>，然后写入字符 <code>s[1]</code>，依此类推；最后一个写入字符是 <code>s[s.length-1]</code>。使用与 <code>writeChar</code> 方法完全相同的方法为每个字符实际写入两个字节，先使用高位字节。

@param  s   要写入的字符串值。
@throws  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.DataOutput.writeUTF(String s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将表示长度信息的两个字节写入输出流，后跟字符串 <code>s</code> 中每个字符的 <a href="DataInput.html#modified-utf-8">UTF-8 修改版</a>表示形式。如果 <code>s</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。根据字符的值，将字符串 <code>s</code> 中每个字符转换成一个字节、两个字节或三个字节的字节组。<p>
如果字符 <code>c</code> 在 <code>\u0001</code> 到 <code>\u007f</code> 的范围内，则用一个字节表示：<p>
 <pre>(byte)c </pre>  <p>
如果字符 <code>c</code> 是 <code>\u0000</code> 或者它在 <code>\u0080</code> 到 <code>\u07ff</code> 的范围内，则用两个字节表示，写入顺序如下：<p> <pre><code>
 (byte)(0xc0 | (0x1f &amp; (c &gt;&gt; 6)))
 (byte)(0x80 | (0x3f &amp; c))
</code></pre>  <p> 如果字符 <code>c</code> 在 <code>\u0800</code> 到 <code>\uffff</code> 的范围内，则用三个字节表示，写入顺序如下：<p> <pre><code>
 (byte)(0xe0 | (0x0f &amp; (c &gt;&gt; 12)))
 (byte)(0x80 | (0x3f &amp; (c &gt;&gt;  6)))
 (byte)(0x80 | (0x3f &amp; c))
</code></pre><p> 首先，要计算表示 <code>s</code> 中所有字符所需的字节总数。如果总数大于 <code>65535</code>，则抛出 <code>UTFDataFormatException</code>。否则，使用与 <code>writeShort</code> 方法完全相同的方式将此长度写入输出流，然后写入字符串 <code>s</code> 中所有字符的 1 字节、2 字节或 3 字节表示形式。<p>  此方法写入的字节可由 <code>DataInput</code> 接口的 <code>readUTF</code> 方法读取，然后该方法将返回一个等于 <code>s</code> 的 <code>String</code> 值。

@param  s   要写入的字符串值。
@throws  IOException 如果发生 I/O 错误。

<!-- END DATA -->
