<!-- BEGIN KEY -->
public class java.io.DataInputStream extends java.io.FilterInputStream implements java.io.DataInput
<!-- END KEY -->
<!-- BEGIN DATA -->
数据输入流允许应用程序以与机器无关方式从底层输入流中读取基本 Java 数据类型。应用程序可以使用数据输出流写入稍后由数据输入流读取的数据。
 <p>
DataInputStream 对于多线程访问不一定是安全的。 线程安全是可选的，它由此类方法的使用者负责。

@author  Arthur van Hoff
@version 1.77, 06/07/06
@see     java.io.DataOutputStream
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.DataInputStream(InputStream in)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的底层 InputStream 创建一个 DataInputStream。

@param in 指定输入流

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.io.DataInputStream.read(byte[] b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从包含的输入流中读取一定数量的字节，并将它们存储到缓冲区数组 <code>b</code> 中。以整数形式返回实际读取的字节数。在输入数据可用、检测到文件末尾 (end of file) 或抛出异常之前，此方法将一直阻塞。
 
<p>如果 <code>b</code> 为 null，则抛出 <code>NullPointerException</code>。如果 <code>b</code> 的长度为 0，则不读取字节并返回 <code>0</code>；否则，尝试读取至少一个字节。如果因为流位于文件末尾而没有字节可用，则返回值 <code>-1</code>；否则至少读取一个字节并将其存储到 <code>b</code> 中。
 
<p>将读取的第一个字节存储到元素 <code>b[0]</code> 中，将下一个字节存储到 <code>b[1]</code> 中，依此类推。读取的字节数至多等于 <code>b</code> 的长度。设 <code>k</code> 为实际读取的字节数；这些字节将存储在从 <code>b[0]</code> 到 <code>b[k-1]</code> 的元素中，<code>b[k]</code> 到 <code>b[b.length-1]</code> 的元素不受影响。
 
<p><code>read(b)</code> 方法与以下方法的效果相同： 
 <blockquote><pre>
 read(b, 0, b.length) 
 </pre></blockquote>

@param     b   存储读取数据的缓冲区。
@return     读入缓冲区的字节总数；如果因为已经到达流末尾而没有更多的数据，则返回 <code>-1</code>。
@exception  IOException 如果不是因为流位于文件末尾而无法读取第一个字节；该流已关闭并且底层输入流在关闭后不支持读取操作；发生其他 I/O 错误。
@see        java.io.FilterInputStream#in
@see        java.io.InputStream#read(byte[], int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.io.DataInputStream.read(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从包含的输入流中将最多 <code>len</code> 个字节读入一个 byte 数组中。尽量读取 <code>len</code> 个字节，但读取的字节数可能少于 <code>len</code> 个，也可能为零。以整数形式返回实际读取的字节数。

<p> 在输入数据可用、检测到文件末尾或抛出异常之前，此方法将阻塞。

<p> 如果 <code>len</code> 为零，则不读取任何字节并返回 <code>0</code>；否则，尝试读取至少一个字节。如果因为流位于文件未尾而没有字节可用，则返回值 <code>-1</code>；否则，至少读取一个字节并将其存储到 <code>b</code> 中。

<p> 将读取的第一个字节存储到元素 <code>b[off]</code> 中，将下一个字节存储到 <code>b[off+1]</code> 中，依此类推。读取的字节数至多等于 <code>len</code>。设 <i>k</i> 为实际读取的字节数；这些字节将存储在 <code>b[off]</code> 到 <code>b[off+</code><i>k</i><code>-1]</code> 的元素中，<code>b[off+</code><i>k</i><code>]</code> 到 <code>b[off+len-1]</code> 的元素不受影响。

<p> 在所有情况下，<code>b[0]</code> 到 <code>b[off]</code> 的元素和 <code>b[off+len]</code> 到 <code>b[b.length-1]</code> 的元素都不受影响。

@param     b   存储读取数据的缓冲区。
@param   off   目标数组 <code>b</code> 中的起始偏移量
@param   len   读取的最大字节数。
@return     读入缓冲区的字节总数；如果因为已经到达流末尾而没有更多的数据，则返回 <code>-1</code>。
@exception  NullPointerException 如果 <code>b</code> 为 <code>null</code>。
@exception  IndexOutOfBoundsException 如果 <code>off</code> 为负，<code>len</code> 为负，或者 <code>len</code> 大于 <code>b.length - off</code>
@exception  IOException 如果不是因为流位于文件末尾而无法读取第一个字节；该流已关闭并且底层输入流在关闭后不支持读取操作；发生其他 I/O 错误。
@see        java.io.FilterInputStream#in
@see        java.io.InputStream#read(byte[], int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.io.DataInputStream.readFully(byte[] b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
参见 <code>DataInput</code> 的 <code>readFully</code> 方法的常规协定。
 <p>
从包含的输入流中读取此操作需要的字节。

@param     b   存储读取数据的缓冲区。
@exception  EOFException  如果此输入流在读取所有字节之前到达末尾。
@exception  IOException 该流已关闭并且包含的输入流在关闭后不支持读取操作，或者发生其他 I/O 错误。
@see        java.io.FilterInputStream#in

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.io.DataInputStream.readFully(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
参见 <code>DataInput</code> 的 <code>readFully</code> 方法的常规协定。
 <p>
从包含的输入流中读取此操作需要的字节。

@param     b   存储读取数据的缓冲区。
@param      off   数据的起始偏移量。
@param   len       要读取的字节数。
@exception  EOFException  如果此输入流在读取所有字节之前到达末尾。
@exception  IOException   该流已关闭并且包含的输入流在关闭后不支持读取操作，或者发生其他 I/O 错误。
@see        java.io.FilterInputStream#in

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.io.DataInputStream.skipBytes(int n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
参见 <code>DataInput</code> 的 <code>skipBytes</code> 方法的常规协定。
 <p>
从包含的输入流中读取此操作需要的字节。

@param      n   要跳过的字节数。
@return     实际跳过的字节数。
@exception  IOException  如果包含的输入流不支持查找操作；该流已关闭并且包含的输入流在关闭后不支持读取操作；发生其他 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.io.DataInputStream.readBoolean() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
参见 <code>DataInput</code> 的 <code>readBoolean</code> 方法的常规协定。
 <p>
从包含的输入流中读取此操作需要的字节。

@return     读取的 <code>boolean</code> 值。
@exception  EOFException  如果此输入流已经到达末尾。
@exception  IOException 该流已关闭并且包含的输入流在关闭后不支持读取操作，或者发生另其他 I/O 错误。
@see        java.io.FilterInputStream#in

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte java.io.DataInputStream.readByte() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
参见 <code>DataInput</code> 的 <code>readByte</code> 方法的常规协定。
 <p>
从所包含的输入流中读取此操作需要的字节。

@return     此输入流的下一个字节，以有符号 8 位 <code>byte</code> 的形式表示。
@exception  EOFException  如果此输入流已经到达末尾。
@exception  IOException 该流已关闭并且包含的输入流在关闭后不支持读取操作，或者发生其他 I/O 错误。
@see        java.io.FilterInputStream#in

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.io.DataInputStream.readUnsignedByte() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
参见 <code>DataInput</code> 的 <code>readUnsignedByte</code> 方法的常规协定。
 <p>
从包含的输入流中读取此操作需要的字节。

@return     此输入流的下一个字节，将它解释为一个无符号 8 位数。
@exception  EOFException  如果此输入流已经到达末尾。
@exception  IOException 该流已关闭并且包含的输入流在关闭后不支持读取操作，或者发生其他 I/O 错误。
@see         java.io.FilterInputStream#in

<!-- END DATA -->
<!-- BEGIN KEY -->
public final short java.io.DataInputStream.readShort() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
参见 <code>DataInput</code> 的 <code>readShort</code> 方法的常规协定。
 <p>
从包含的输入流中读取此操作需要的字节。

@return     此输入流的下两个字节，将它们解释为一个有符号 16 位数。
@exception  EOFException  如果此输入流在读取这两个字节之前到达末尾。
@exception  IOException 该流已关闭并且包含的输入流在关闭后不支持读取操作，或者发生其他 I/O 错误。
@see        java.io.FilterInputStream#in

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.io.DataInputStream.readUnsignedShort() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
参见 <code>DataInput</code> 的 <code>readUnsignedShort</code> 方法的常规协定。
 <p>
从包含的输入流中读取此操作需要的字节。

@return     此输入流的下两个字节，将它们解释为一个无符号 16 位整数。
@exception  EOFException  如果此输入流在读取这两个字节之前到达末尾。
@exception  IOException 该流已关闭并且包含的输入流在关闭后不支持读取操作，或者发生其他 I/O 错误。
@see        java.io.FilterInputStream#in

<!-- END DATA -->
<!-- BEGIN KEY -->
public final char java.io.DataInputStream.readChar() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
参见 <code>DataInput</code> 的 <code>readChar</code> 方法的常规协定。
 <p>
从包含的输入流中读取此操作需要的字节。

@return     此输入流的下两个字节，将它们解释为一个 <code>char</code>。
@exception  EOFException  如果此输入流在读取这两个字节之前到达末尾。
@exception  IOException 该流已关闭并且包含的输入流在关闭后不支持读取操作，或者发生其他 I/O 错误。
@see        java.io.FilterInputStream#in

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.io.DataInputStream.readInt() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
参见 <code>DataInput</code> 的 <code>readInt</code> 方法的常规协定。
 <p>
从包含的输入流中读取此操作需要的字节。

@return     此输入流的下四个字节，将它们解释为一个 <code>int</code>。
@exception  EOFException  如果此输入流在读取这四个字节之前到达末尾。
@exception  IOException 该流已关闭并且包含的输入流在关闭后不支持读取操作，或者发生其他 I/O 错误。
@see        java.io.FilterInputStream#in

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.io.DataInputStream.readLong() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
参见 <code>DataInput</code> 的 <code>readLong</code> 方法的常规协定。
 <p>
从包含的输入流中读取此操作需要的字节。

@return     此输入流的下八个字节，将它们解释为一个 <code>long</code>。
@exception  EOFException  如果此输入流在读取这八个字节之前到达末尾。
@exception  IOException 该流已关闭并且包含的输入流在关闭后不支持读取操作，或者发生其他 I/O 错误。
@see        java.io.FilterInputStream#in

<!-- END DATA -->
<!-- BEGIN KEY -->
public final float java.io.DataInputStream.readFloat() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
参见 <code>DataInput</code> 的 <code>readFloat</code> 方法的常规协定。
 <p>
从包含的输入流中读取此操作需要的字节。

@return     此输入流的下四个字节，将它们解释为一个 <code>float</code>。
@exception  EOFException  如果此输入流在读取这四个字节之前到达末尾。
@exception  IOException 该流已关闭并且包含的输入流在关闭后不支持读取操作，或者发生其他 I/O 错误。
@see        java.io.DataInputStream#readInt()
@see        java.lang.Float#intBitsToFloat(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public final double java.io.DataInputStream.readDouble() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
参见 <code>DataInput</code> 的 <code>readDouble</code> 方法的常规协定。
 <p>
从包含的输入流中读取此操作需要的字节。

@return     此输入流的下八个字节，将它们解释为一个 <code>double</code>。
@exception  EOFException  如果此输入流在读取这八个字节之前到达末尾。
@exception  IOException 该流已关闭并且包含的输入流在关闭后不支持读取操作，或者发生其他 I/O 错误。
@see        java.io.DataInputStream#readLong()
@see        java.lang.Double#longBitsToDouble(long)

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.io.DataInputStream.readLine() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
参见 <code>DataInput</code> 的 <code>readLine</code> 方法的常规协定。
 <p>
从包含的输入流中读取此操作需要的字节。

@deprecated 该方法无法将字节正确转换为字符。从 JDK&nbsp;1.1 开始，读取文本行的首选方法是使用 <code>BufferedReader.readLine()</code> 方法。使用 <code>DataInputStream</code> 类读取文本行的程序可以改为使用 <code>BufferedReader</code> 类，只要将以下形式的代码：
 <blockquote><pre>
     DataInputStream d =&nbsp;new&nbsp;DataInputStream(in);
 </pre></blockquote>
替换为：
 <blockquote><pre>
     BufferedReader d
          =&nbsp;new&nbsp;BufferedReader(new&nbsp;InputStreamReader(in));
 </pre></blockquote>

@return     此输入流中的下一文本行。
@exception  IOException 如果发生 I/O 错误。
@see        java.io.BufferedReader#readLine()
@see        java.io.FilterInputStream#in

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.io.DataInputStream.readUTF() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
参见 <code>DataInput</code> 的 <code>readUTF</code> 方法的常规协定。
 <p>
从包含的输入流中读取此操作需要的字节。

@return     一个 Unicode 字符串。
@exception  EOFException  如果此输入流在读取所有字节之前到达末尾。
@exception  IOException 该流已关闭并且包含的输入流在关闭后不支持读取操作，或者发生其他 I/O 错误。
@exception  UTFDataFormatException  如果这些字节不表示一个有效的、UTF-8 修改版编码的字符串。
@see        java.io.DataInputStream#readUTF(java.io.DataInput)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.io.DataInputStream.readUTF(DataInput in) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流 <code>in</code> 中读取用 <a href="DataInput.html#modified-utf-8">UTF-8 修改版</a>格式编码的 Unicode 字符格式的字符串；然后以 <code>String</code> 形式返回此字符串。UTF-8 修改版表示形式的一些细节与 <code>DataInput</code> 的 <code>readUTF</code> 方法完全相同。

@param in 数据输入流。
@return     一个 Unicode 字符串。
@exception  EOFException  如果此输入流在读取所有字节之前到达末尾。
@exception  IOException 该流已关闭并且包含的输入流在关闭后不支持读取操作，或者发生其他 I/O 错误。
@exception  UTFDataFormatException  如果这些字节不表示一个有效的、UTF-8 修改版编码的 Unicode 字符串。
@see        java.io.DataInputStream#readUnsignedShort()

<!-- END DATA -->
