<!-- BEGIN KEY -->
public class java.io.DataOutputStream extends java.io.FilterOutputStream implements java.io.DataOutput
<!-- END KEY -->
<!-- BEGIN DATA -->
数据输出流允许应用程序以适当方式将基本 Java 数据类型写入输出流中。然后，应用程序可以使用数据输入流将数据读入。

@author  unascribed
@version 1.43, 05/13/04
@see     java.io.DataInputStream
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.io.DataOutputStream.written
<!-- END KEY -->
<!-- BEGIN DATA -->
到目前为止写入数据输出流的字节数。如果此计数器溢出，则将它包装成 Integer.MAX_VALUE。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.DataOutputStream(OutputStream out)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的数据输出流，将数据写入指定基础输出流。计数器 <code>written</code> 被设置为零。

@param   out   基础输出流，将被保存供以后使用。
@see     java.io.FilterOutputStream#out

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.io.DataOutputStream.write(int b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定字节（参数 <code>b</code> 的八个低位）写入基础输出流。如果没有抛出异常，则计数器 <code>written</code> 增加 <code>1</code>。
 <p>
实现 <code>OutputStream</code> 的 <code>write</code> 方法。

@param   b   要写入的 <code>byte</code>。
@exception  IOException 如果发生 I/O 错误。
@see        java.io.FilterOutputStream#out

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.io.DataOutputStream.write(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定 byte 数组中从偏移量 <code>off</code> 开始的 <code>len</code> 个字节写入基础输出流。如果没有抛出异常，则计数器 <code>written</code> 增加 <code>len</code>。

@param   b   数据。
@param      off   数据中的起始偏移量。
@param   len       要写入的字节数。
@exception  IOException 如果发生 I/O 错误。
@see        java.io.FilterOutputStream#out

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.DataOutputStream.flush() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
清空此数据输出流。这迫使所有缓冲的输出字节被写出到流中。
 <p>
<code>DataOutputStream</code> 的 <code>flush</code> 方法调用其基础输出流的 <code>flush</code> 方法。

@exception  IOException 如果发生 I/O 错误。
@see        java.io.FilterOutputStream#out
@see        java.io.OutputStream#flush()

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.io.DataOutputStream.writeBoolean(boolean v) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 <code>boolean</code> 值以 1-byte 值形式写入基础输出流。值 <code>true</code> 以值 <code>(byte)1</code> 的形式被写出；值 <code>false</code> 以值 <code>(byte)0</code> 的形式被写出。如果没有抛出异常，则计数器 <code>written</code> 增加 <code>1</code>。

@param  v   要写入的 <code>boolean</code> 值。
@exception  IOException 如果发生 I/O 错误。
@see        java.io.FilterOutputStream#out

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.io.DataOutputStream.writeByte(int v) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 <code>byte</code> 值以 1-byte 值形式写出到基础输出流中。如果没有抛出异常，则计数器 <code>written</code> 增加 <code>1</code>。

@param  v   要写入的 <code>byte</code> 值。
@exception  IOException 如果发生 I/O 错误。
@see        java.io.FilterOutputStream#out

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.io.DataOutputStream.writeShort(int v) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 <code>short</code> 值以 2-byte 值形式写入基础输出流中，先写入高字节。如果没有抛出异常，则计数器 <code>written</code> 增加 <code>2</code>。

@param  v   要写入的 <code>short</code> 值。
@exception  IOException 如果发生 I/O 错误。
@see        java.io.FilterOutputStream#out

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.io.DataOutputStream.writeChar(int v) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 <code>char</code> 值以 2-byte 值形式写入基础输出流中，先写入高字节。如果没有抛出异常，则计数器 <code>written</code> 增加 <code>2</code>。

@param  v   要写入的 <code>char</code> 值。
@exception  IOException 如果发生 I/O 错误。
@see        java.io.FilterOutputStream#out

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.io.DataOutputStream.writeInt(int v) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 <code>int</code> 值以 4-byte 值形式写入基础输出流中，先写入高字节。如果没有抛出异常，则计数器 <code>written</code> 增加 <code>4</code>。

@param  v   要写入的 <code>int</code> 值。
@exception  IOException 如果发生 I/O 错误。
@see        java.io.FilterOutputStream#out

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.io.DataOutputStream.writeLong(long v) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 <code>long</code> 值以 8-byte 值形式写入基础输出流中，先写入高字节。如果没有抛出异常，则计数器 <code>written</code> 增加 <code>8</code>。

@param  v   要写入的 <code>long</code> 值。
@exception  IOException 如果发生 I/O 错误。
@see        java.io.FilterOutputStream#out

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.io.DataOutputStream.writeFloat(float v) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 <code>Float</code> 类中的 <code>floatToIntBits</code> 方法将 float 参数转换为一个 <code>int</code> 值，然后将该 <code>int</code> 值以 4-byte 值形式写入基础输出流中，先写入高字节。如果没有抛出异常，则计数器 <code>written</code> 增加 <code>4</code>。

@param  v   要写入的 <code>float</code> 值。
@exception  IOException 如果发生 I/O 错误。
@see        java.io.FilterOutputStream#out
@see        java.lang.Float#floatToIntBits(float)

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.io.DataOutputStream.writeDouble(double v) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 <code>Double</code> 类中的 <code>doubleToLongBits</code> 方法将 double 参数转换为一个 <code>long</code> 值，然后将该 <code>long</code> 值以 8-byte 值形式写入基础输出流中，先写入高字节。如果没有抛出异常，则计数器 <code>written</code> 增加 <code>8</code>。

@param  v   要写入的 <code>double</code> 值。
@exception  IOException 如果发生 I/O 错误。
@see        java.io.FilterOutputStream#out
@see        java.lang.Double#doubleToLongBits(double)

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.io.DataOutputStream.writeBytes(String s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符串按字节顺序写出到基础输出流中。按顺序写出字符串中每个字符，丢弃其八个高位。如果没有抛出异常，则计数器 <code>written</code> 增加 <code>s</code> 的长度。

@param      s   要写入的字节字符串。
@exception  IOException 如果发生 I/O 错误。
@see        java.io.FilterOutputStream#out

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.io.DataOutputStream.writeChars(String s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符串按字符顺序写入基础输出流。通过 <code>writeChar</code> 方法将每个字符写入数据输出流。如果没有抛出异常，则计数器 <code>written</code> 增加 <code>s</code> 长度的两倍。

@param  s   要写入的 <code>String</code> 值。
@exception  IOException 如果发生 I/O 错误。
@see        java.io.DataOutputStream#writeChar(int)
@see        java.io.FilterOutputStream#out

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.io.DataOutputStream.writeUTF(String str) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
以与机器无关方式使用 <a href="DataInput.html#modified-utf-8">UTF-8 修改版</a>编码将一个字符串写入基础输出流。 
 <p>
首先，通过 <code>writeShort</code> 方法将两个字节写入输出流，表示后跟的字节数。该值是实际写出的字节数，不是字符串的长度。根据此长度，使用字符的 UTF-8 修改版编码按顺序输出字符串的每个字符。如果没有抛出异常，则计数器 <code>written</code> 增加写入输出流的字节总数。该值至少是 2 加 <code>str</code> 的长度，最多是 2 加 <code>str</code> 的三倍长度。

@param  str   要写入的字符串。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.io.DataOutputStream.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回计数器 <code>written</code> 的当前值，即到目前为止写入此数据输出流的字节数。如果计数器溢出，则将它包装到 Integer.MAX_VALUE。

@return <code>written</code> 字段的值。
@see     java.io.DataOutputStream#written

<!-- END DATA -->
