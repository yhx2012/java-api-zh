<!-- BEGIN KEY -->
public class java.io.PushbackReader extends java.io.FilterReader
<!-- END KEY -->
<!-- BEGIN DATA -->
允许将字符推回到流的字符流 reader。

@version 	1.21, 06/01/24
@author	Mark Reinhold
@since	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.PushbackReader(Reader in, int size)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有给定大小推回缓冲区的新推回 reader。

@param   in   将从中读取字符的 reader
@param	size 推回缓冲区的大小
@exception IllegalArgumentException 如果 size &lt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.PushbackReader(Reader in)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建具有单字符推回缓冲区的新推回 reader。

@param   in  将从中读取字符的 reader

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.PushbackReader.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取单个字符。

@return     读取的字符，如果已到达流的末尾，则返回 -1

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.PushbackReader.read(char[] cbuf, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符读入数组的某一部分。

@param      cbuf  目标缓冲区
@param      off   开始写入字符处的偏移量
@param      len   要读取的最多字符数

@return     读取的字符数，如果已到达流的末尾，则返回 -1

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.PushbackReader.unread(int c) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
推回单个字符：将其复制到推回缓冲区的前面。在返回此方法后，要读取的下一个字符将具有值 <code>(char)c</code>。

@param  c  int 值，表示要被推回的字符

@exception  IOException  如果推回缓冲区已满，或者发生一些其他 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.PushbackReader.unread(char[] cbuf, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
推回字符数组的某一部分，方法是将其复制到推回缓冲区的前面。在返回此方法后，要读取的下一个字符将具有值 <code>cbuf[off]</code>，其后的字节将具有值 <code>cbuf[off+1]</code>，依次类推。

@param  cbuf  字符数组
@param  off   要推回的第一个字符的偏移量
@param  len   要推回的字符数

@exception  IOException  如果推回缓冲区中没有足够的空间，或者发生一些其他 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.PushbackReader.unread(char[] cbuf) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
推回一个字符数组，方法是将其复制到推回缓冲区前面。在返回此方法后，要读取的下一个字符将具有值 <code>cbuf[0]</code>，其后的字节将具有值 <code>cbuf[1]</code>，依次类推。

@param  cbuf  要推回的字符数组

@exception  IOException  如果推回缓冲区中没有足够的空间，或者发生一些其他 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.PushbackReader.ready() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
判断是否准备读取此流。

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.PushbackReader.mark(int readAheadLimit) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
标记流中的当前位置。类 <code>PushbackReader</code> 的 <code>mark</code> 始终抛出异常。

@exception  IOException  始终抛出，原因是不支持标记功能

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.PushbackReader.reset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
重置该流。<code>PushbackReader</code> 的 <code>reset</code> 方法始终抛出异常。

@exception  IOException  始终抛出，原因是不支持重置功能

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.PushbackReader.markSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
判断此流是否支持 mark() 操作（它一定不支持）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.PushbackReader.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭该流并释放与之关联的所有系统资源。在关闭流后，再调用 read()、unread()、ready() 或 skip() 将抛出 IOException。关闭以前关闭的流无效。 

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.io.PushbackReader.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
跳过字符。在一些字符可用、发生 I/O 错误或者到达流的末尾前，此方法一直阻塞。

@param  n  要跳过的字符数

@return    实际跳过的字符数

@exception  IllegalArgumentException  如果 <code>n</code> 为负。
@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
