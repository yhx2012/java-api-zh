<!-- BEGIN KEY -->
public class java.io.InputStreamReader extends java.io.Reader
<!-- END KEY -->
<!-- BEGIN DATA -->
InputStreamReader 是字节流通向字符流的桥梁：它使用指定的 {@link java.nio.charset.Charset <code>charset</code>} 读取字节并将其解码为字符。它使用的字符集可以由名称指定或显式给定，或者可以接受平台默认的字符集。

<p> 每次调用 InputStreamReader 中的一个 read() 方法都会导致从底层输入流读取一个或多个字节。要启用从字节到字符的有效转换，可以提前从底层流读取更多的字节，使其超过满足当前读取操作所需的字节。

<p> 为了达到最高效率，可要考虑在 BufferedReader 内包装 InputStreamReader。例如：

 <pre>
 BufferedReader in
   = new BufferedReader(new InputStreamReader(System.in));
 </pre>

@see BufferedReader
@see InputStream
@see java.nio.charset.Charset

@version     1.47, 05/11/17
@author      Mark Reinhold
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStreamReader(InputStream in)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个使用默认字符集的 InputStreamReader。

@param  in    InputStream

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStreamReader(InputStream in, String charsetName) throws java.io.UnsupportedEncodingException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建使用指定字符集的 InputStreamReader。

@param  in  InputStream

@param  charsetName 受支持的 {@link java.nio.charset.Charset </code>charset<code>} 的名称

@exception  UnsupportedEncodingException 如果不支持指定的字符集

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStreamReader(InputStream in, Charset cs)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建使用给定字符集的 InputStreamReader。</p>

@param  in        InputStream
@param  cs       字符集

@since 1.4
@spec JSR-51

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStreamReader(InputStream in, CharsetDecoder dec)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建使用给定字符集解码器的 InputStreamReader。</p>

@param  in        InputStream
@param  dec      字符集解码器

@since 1.4
@spec JSR-51

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.io.InputStreamReader.getEncoding()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此流使用的字符编码的名称。

<p> 如果该编码有历史上用过的名称，则返回该名称；否则返回该编码的规范化名称。

<p> 如果使用 {@link #InputStreamReader(InputStream, String)} 构造方法创建此实例，则返回的由此编码生成的唯一名称可能与传递给该构造方法的名称不一样。如果流已经关闭，则此方法将会返回 <code>null</code>。
 </p>
@return 此编码的历史名称，如果流已经关闭，则返回 <code>null</code>

@see java.nio.charset.Charset

@revised 1.4
@spec JSR-51

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.InputStreamReader.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取单个字符。

@return 读取的字符，如果已到达流的末尾，则返回 -1

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.InputStreamReader.read(char[] cbuf, int offset, int length) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符读入数组中的某一部分。

@param      cbuf     目标缓冲区
@param      offset   从其处开始存储字符的偏移量
@param      length   要读取的最大字符数

@return     读取的字符数，如果已到达流的末尾，则返回 -1

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.InputStreamReader.ready() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
判断此流是否已经准备好用于读取。如果其输入缓冲区不为空，或者可从底层字节流读取字节，则 InputStreamReader 已做好被读取准备。

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
