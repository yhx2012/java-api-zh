<!-- BEGIN KEY -->
public interface java.io.DataInput
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>DataInput</code> 接口用于从二进制流中读取字节，并根据所有 Java 基本类型数据进行重构。同时还提供根据 <a href="#modified-utf-8">UTF-8 修改版</a>格式的数据重构 <code>String</code> 的工具。
 <p>
对于此接口中的所有数据读取例程来说，如果在读取所需字节数之前已经到达文件末尾 (end of file)，则将抛出 <code>EOFException</code>（<code>IOException</code> 的一种）。如果因为到达文件末尾以外的其他原因无法读取字节，则将抛出 <code>IOException</code> 而不是 <code>EOFException</code>。尤其是，在输入流已关闭的情况下，将抛出 <code>IOException</code>。

<h4><a name="modified-utf-8">UTF-8 修改版</a></h4>
 <p>
DataInput 和 DataOutput 接口的实现表示稍作改版的 UTF-8 格式的 Unicode 字符串。（关于标准 UTF-8 格式的信息，请参阅 <i>The Unicode Standard, Version 4.0</i> 的 <i>3.9 Unicode Encoding Forms</i> 节）。注意，在下表中，最高有效位显示在最左边的列中。
 <p>
<code>'\u0001'</code> 到 <code>'\u007F'</code> 范围内的所有字符都是用单个字节表示的：

 <blockquote>
   <table border="1" cellspacing="0" cellpadding="8" width="50%"
          summary="Bit values and bytes">
     <tr>
       <td></td>
<th id="bit">位值</th>
     </tr>
     <tr>
<th id="byte1">字节 1</th>
       <td>
         <table border="1" cellspacing="0" width="100%">
           <tr>
             <td width="12%"><center>0</center>
<td colspan="7"><center>位 6-0</center>
           </tr>
         </table>
       </td>
     </tr>
   </table>
 </blockquote>

 <p>
null 字符 <code>'\u0000'</code> 以及从 <code>'\u0080'</code> 到 <code>'\u07FF'</code> 的范围内的字符用两个字节表示：

 <blockquote>
   <table border="1" cellspacing="0" cellpadding="8" width="50%"
          summary="Bit values and bytes">
     <tr>
       <td></td>
<th id="bit">位值</th>
     </tr>
     <tr>
<th id="byte1">字节 1</th>
       <td>
         <table border="1" cellspacing="0" width="100%">
           <tr>
             <td width="12%"><center>1</center>
             <td width="13%"><center>1</center>
             <td width="12%"><center>0</center>
<td colspan="5"><center>位 10-6</center>
           </tr>
         </table>
       </td>
     </tr>
     <tr>
<th id="byte2">字节 2</th>
       <td>
         <table border="1" cellspacing="0" width="100%">
           <tr>
             <td width="12%"><center>1</center>
             <td width="13%"><center>0</center>
<td colspan="6"><center>位 5-0</center>
           </tr>
         </table>
       </td>
     </tr>
   </table>
  </blockquote>

<br> <code>'\u0800'</code> 到 <code>'\uFFFF'</code> 范围内的 <code>char</code> 值用三个字节表示：

 <blockquote>
   <table border="1" cellspacing="0" cellpadding="8" width="50%"
          summary="Bit values and bytes">
     <tr>
       <td></td>
<th id="bit">位值</th>
     </tr>
     <tr>
<th id="byte1">字节 1</th>
       <td>
         <table border="1" cellspacing="0" width="100%">
           <tr>
             <td width="12%"><center>1</center>
             <td width="13%"><center>1</center>
             <td width="12%"><center>1</center>
             <td width="13%"><center>0</center>
<td colspan="4"><center>位 15-12</center>
           </tr>
         </table>
       </td>
     </tr>
     <tr>
<th id="byte2">字节 2</th>
       <td>
         <table border="1" cellspacing="0" width="100%">
           <tr>
             <td width="12%"><center>1</center>
             <td width="13%"><center>0</center>
<td colspan="6"><center>位 11-6</center>
           </tr>
         </table>
       </td>
     </tr>
     <tr>
<th id="byte3">字节 3</th>
       <td>
         <table border="1" cellspacing="0" width="100%">
           <tr>
             <td width="12%"><center>1</center>
             <td width="13%"><center>0</center>
<td colspan="6"><center>位 5-0</center>
           </tr>
         </table>
       </td>
     </tr>
   </table>
  </blockquote>

 <p>
这种格式与标准 UTF-8 格式之间的不同如下：
 <ul>
<li>null 字节 <code>'\u0000'</code> 是用 2-byte 格式而不是 1-byte 格式编码的，因此已编码的字符串中决不会有嵌入的 null。
<li>仅使用 1-byte、2-byte 和 3-byte 格式。
<li><a href="../lang/Character.html#unicode">增补字符</a>是以代理项对的形式表示的。
 </ul>
@author  Frank Yellin
@version 1.25, 04/10/06
@see     java.io.DataInputStream
@see     java.io.DataOutput
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.DataInput.readFully(byte[] b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从输入流中读取一些字节，并将它们存储在缓冲区数组 <code>b</code> 中。读取的字节数等于 <code>b</code> 的长度。
 <p>
在出现以下条件之一以前，此方法将一直阻塞：<p>
 <ul>
<li>输入数据的 <code>b.length</code> 个字节是可用的，在这种情况下，正常返回。

<li>检测到文件末尾，在这种情况下，抛出 <code>EOFException</code>。

<li>发生 I/O 错误，在这种情况下，将抛出 <code>IOException</code>，而不是 <code>EOFException</code>。
 </ul>
 <p>
如果 <code>b</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。如果 <code>b.length</code> 为零，则不读取字节。否则，将读取的第一个字节存储到元素 <code>b[0]</code> 中，下一个字节存储到 <code>b[1]</code> 中，依此类推。如果此方法抛出异常，则可能是因为已经用输入流中的数据更新了 <code>b</code> 的某些（但非全部）字节。

@param     b   存储读取数据的缓冲区。
@exception  EOFException  如果此流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.DataInput.readFully(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

从输入流中读取 <code>len</code> 个字节。
 <p>
在出现以下条件之一以前，此方法将一直阻塞：<p>
 <ul>
<li>输入数据的 <code>len</code> 个字节是可用的，在这种情况下，正常返回。

<li>检测到文件末尾，在这种情况下，抛出 <code>EOFException</code>。

<li>如果发生 I/O 错误，在这种情况下，将抛出 <code>IOException</code>，而不是 <code>EOFException</code>。
 </ul>
 <p>
如果 <code>b</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。如果 <code>off</code> 为负，或 <code>len</code> 为负，或者 <code>off+len</code> 大于数组 <code>b</code> 的长度，则抛出 <code>IndexOutOfBoundsException</code>。如果 <code>len</code> 为零，则不读取字节。否则，将读取的第一个字节存储到元素 <code>b[off]</code> 中，下一个字节存储到 <code>b[off+1]</code> 中，依此类推。读取的字节数至多等于 <code>b[0]</code>。

@param     b 存储读取数据的缓冲区。
@param off  指定数据中的偏移量的 int 值。
@param len  指定读取的字节数的 int 值。
@exception  EOFException  如果此流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.DataInput.skipBytes(int n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
试图在输入流中跳过数据的 <code>n</code> 个字节，并丢弃跳过的字节。不过，可以跳过更少的字节数，该字节数甚至可以为零。这可能由很多情况引起；在已经跳过 <code>n</code> 个字节前到达文件末尾只是其中的一种可能。此方法从不抛出 <code>EOFException</code>。返回实际跳过的字节数。

@param      n   要跳过的字节数。
@return     实际跳过的字节数。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.DataInput.readBoolean() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取一个输入字节，如果该字节不是零，则返回 <code>true</code>，如果是零，则返回 <code>false</code>。此方法适用于读取用接口 <code>DataOutput</code> 的 <code>writeBoolean</code> 方法写入的字节。

@return     读取的 <code>boolean</code> 值。
@exception  EOFException  如果此流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte java.io.DataInput.readByte() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取并返回一个输入字节。该字节被看作是 <code>-128</code> 到 <code>127</code>（包含）范围内的一个有符号值。此方法适用于读取用接口 <code>DataOutput</code> 的 <code>writeByte</code> 方法写入的字节。

@return     读取的 8 位值。
@exception  EOFException  如果此流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.DataInput.readUnsignedByte() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取一个输入字节，将它左侧补零 (zero-extend) 转变为 <code>int</code> 类型，并返回结果，所以结果的范围是 <code>0</code> 到 <code>255</code>。如果接口 <code>DataOutput</code> 的 <code>writeByte</code> 方法的参数是 <code>0</code> 到 <code>255</code> 之间的值，则此方法适用于读取用 <code>writeByte</code> 写入的字节。

@return     读取的无符号 8 位值。
@exception  EOFException  如果此流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public short java.io.DataInput.readShort() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取两个输入字节并返回一个 <code>short</code> 值。设 <code>a</code> 为第一个读取字节，<code>b</code> 为第二个读取字节。返回的值是：
 <p><pre><code>(short)((a &lt;&lt; 8) | (b &amp; 0xff))
 </code></pre>
此方法适用于读取用接口 <code>DataOutput</code> 的 <code>writeShort</code> 方法写入的字节。

@return     读取的 16 位值。
@exception  EOFException  如果此流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.DataInput.readUnsignedShort() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取两个输入字节，并返回 <code>0</code> 到 <code>65535</code> 范围内的一个 <code>int</code> 值。设 <code>a</code> 为第一个读取字节，<code>b</code> 为第二个读取字节。返回的值是：
 <p><pre><code>(((a &amp; 0xff) &lt;&lt; 8) | (b &amp; 0xff))
 </code></pre>
如果接口 <code>DataOutput</code> 的 <code>writeShort</code> 方法的参数是 <code>0</code> 到 <code>65535</code> 范围内的值，则此方法适用于读取用 <code>writeShort</code> 写入的字节。

@return     读取的无符号 16 位值。
@exception  EOFException  如果此流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.io.DataInput.readChar() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取两个输入字节并返回一个 <code>char</code> 值。设 <code>a</code> 为第一个读取字节，<code>b</code> 为第二个读取字节。返回的值是：
 <p><pre><code>(char)((a &lt;&lt; 8) | (b &amp; 0xff))
 </code></pre>
此方法适用于读取用接口 <code>DataOutput</code> 的 <code>writeChar</code> 方法写入的字节。

@return  读取的 <code>char</code> 值。
@exception  EOFException  如果此流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.DataInput.readInt() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取四个输入字节并返回一个 <code>int</code> 值。设 <code>a-d</code> 为四个读取字节中的第一个字节。返回的值是：
 <p><pre>
 <code>
 (((a &amp; 0xff) &lt;&lt; 24) | ((b &amp; 0xff) &lt;&lt; 16) |
  ((c &amp; 0xff) &lt;&lt; 8) | (d &amp; 0xff))
 </code></pre>
此方法适用于读取用接口 <code>DataOutput</code> 的 <code>writeInt</code> 方法写入的字节。

@return     读取的 <code>int</code> 值。
@exception  EOFException  如果此流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.io.DataInput.readLong() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取八个输入字节并返回一个 <code>long</code> 值。设 <code>a-h</code> 为八个读取字节中的第一个字节。返回的值是：
 <p><pre> <code>
 (((long)(a &amp; 0xff) &lt;&lt; 56) |
  ((long)(b &amp; 0xff) &lt;&lt; 48) |
  ((long)(c &amp; 0xff) &lt;&lt; 40) |
  ((long)(d &amp; 0xff) &lt;&lt; 32) |
  ((long)(e &amp; 0xff) &lt;&lt; 24) |
  ((long)(f &amp; 0xff) &lt;&lt; 16) |
  ((long)(g &amp; 0xff) &lt;&lt;  8) |
  ((long)(h &amp; 0xff)))
 </code></pre>
 <p>
此方法适用于读取用接口 <code>DataOutput</code> 的 <code>writeLong</code> 方法写入的字节。

@return     读取的 <code>long</code> 值。
@exception  EOFException  如果此流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.io.DataInput.readFloat() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取四个输入字节并返回一个 <code>float</code> 值。实现这一点的方法是：先使用与 <code>readInt</code> 方法完全相同的方式构造一个 <code>int</code> 值，然后使用与 <code>Float.intBitsToFloat</code> 方法完全相同的方式将此 <code>int</code> 值转换成一个 <code>float</code> 值。此方法适用于读取用接口 <code>DataOutput</code> 的 <code>writeFloat</code> 方法写入的字节。

@return     读取的 <code>float</code> 值。
@exception  EOFException  如果此流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.io.DataInput.readDouble() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取八个输入字节并返回一个 <code>double</code> 值。实现这一点的方法是：先使用与 <code>readlong</code> 方法完全相同的方式构造一个 <code>long</code> 值，然后使用与 <code>Double.longBitsToDouble</code> 方法完全相同的方式将此 <code>long</code> 值转换成一个 <code>double</code> 值。此方法适用于读取用接口 <code>DataOutput</code> 的 <code>writeDouble</code> 方法写入的字节。

@return     读取的 <code>double</code> 值。
@exception  EOFException  如果此流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.io.DataInput.readLine() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从输入流中读取下一文本行。该方法读取连续的字节，将每个字节分别转换成一个字符，直到遇到行结尾符或到达末尾；然后以 <code>String</code> 形式返回读取的字符。注意，因为此方法用于处理字符，所以它不支持整个 Unicode 字符集的输入。
 <p>
如果在一个字节都没有读取的时候就到达文件末尾，则返回 <code>null</code>。否则，通过左侧补零将读取的每个字节转换成 <code>char</code> 类型的值。如果遇到字符 <code>'\n'</code>，则丢弃它并且停止读取。如果遇到字符 <code>'\r'</code> 则丢弃它，如果后续字节转变成字符 <code>'\n'</code>，则同样丢弃它并停止读取。如果在遇到字符 <code>'\n'</code> 和 <code>'\r'</code> 之一前到达文件末尾，则停止读取。一旦已停止读取，则返回一个 <code>String</code>，它按顺序包含所有已读取且未丢弃的字符。注意，此字符串中的每个字符的值都将小于 <code>\u0100</code>（即 <code>(char)256</code>）的值。

@return 输入流中文本的下一行，如果还没有读取一个字节就到达文件末尾，则返回 <CODE>null</CODE>。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.io.DataInput.readUTF() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读入一个已使用 <a href="#modified-utf-8">UTF-8 修改版</a>格式编码的字符串。<code>readUTF</code> 的常规协定是：该方法读取使用 UTF-8 修改版格式编码的 Unicode 字符串的表示形式；然后以 <code>String</code> 的形式返回此字符串。
 <p>
首先读取两个字节，并使用它们构造一个无符号 16 位整数，构造方式与 <code>readUnsignedShort</code> 方法的方式完全相同。该整数值被称为 <i>UTF 长度</i>，它指定要读取的额外字节数。然后成组地将这些字节转换为字符。每组的长度根据该组第一个字节的值计算。紧跟在某个组后面的字节（如果有）是下一组的第一个字节。
 <p>
如果组的第一个字节与位模式 <code>0xxxxxxx</code>（其中 <code>x</code> 表示&ldquo;可能为 <code>0</code> 或 <code>1</code>&rdquo;）匹配，则该组只有这一个字节。该字节被左侧补零，转换成一个字符。
 <p>
如果组的第一个字节与位模式 <code>110xxxxx</code> 匹配，则该组只由字节 <code>a</code> 和另一个字节 <code>b</code> 组成。如果没有字节 <code>b</code>（因为字节 <code>a</code> 是要读取的最后一个字节），或者字节 <code>b</code> 与位模式 <code>10xxxxxx</code> 不匹配，则抛出 <code>UTFDataFormatException</code>。否则，将该组转换成字符：<p>
 <pre><code>(char)(((a&amp; 0x1F) &lt;&lt; 6) | (b &amp; 0x3F))
 </code></pre>
如果组的第一个字节与位模式 <code>1110xxxx</code> 匹配，则该组由字节 <code>a</code> 和另外两个字节 <code>b</code> 和 <code>c</code> 组成。如果没有字节 <code>c</code>（因为字节 <code>a</code> 是要读取的最后两个字节之一），或者字节 <code>b</code> 或字节 <code>c</code> 与位模式 <code>10xxxxxx</code> 不匹配，则抛出 <code>UTFDataFormatException</code>。否则，将该组转换成字符：<p>
 <pre><code>
 (char)(((a &amp; 0x0F) &lt;&lt; 12) | ((b &amp; 0x3F) &lt;&lt; 6) | (c &amp; 0x3F))
 </code></pre>
如果组的第一个字节与模式 <code>1111xxxx</code> 或模式 <code>10xxxxxx</code> 匹配，则抛出 <code>UTFDataFormatException</code>。
 <p>
如果在执行整个过程中的任意时间到达文件末尾，则抛出 <code>EOFException</code>。
 <p>
在通过此过程将每个组转换成字符后，按照从输入流中读取相应组的顺序，将这些字符收集在一起，形成一个 <code>String</code>，然后该字符串将被返回。
 <p>
可以使用 <code>DataOutput</code> 接口的 <code>writeUTF</code> 方法写入适合此方法读取的数据。
@return     一个 Unicode 字符串。
@exception  EOFException  如果此流在读取所有字节之前到达末尾。
@exception  IOException 如果发生 I/O 错误。
@exception  UTFDataFormatException  如果这些字节不表示一个有效的、UTF-8 修改版编码的字符串。

<!-- END DATA -->
