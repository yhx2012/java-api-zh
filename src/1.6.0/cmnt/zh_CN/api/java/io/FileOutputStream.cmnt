<!-- BEGIN KEY -->
public class java.io.FileOutputStream extends java.io.OutputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
文件输出流是用于将数据写入 <code>File</code> 或 <code>FileDescriptor</code> 的输出流。文件是否可用或能否可以被创建取决于基础平台。特别是某些平台一次只允许一个 <tt>FileOutputStream</tt>（或其他文件写入对象）打开文件进行写入。在这种情况下，如果所涉及的文件已经打开，则此类中的构造方法将失败。

<p><code>FileOutputStream</code> 用于写入诸如图像数据之类的原始字节的流。要写入字符流，请考虑使用 <code>FileWriter</code>。

@author  Arthur van Hoff
@version 1.57, 12/19/03
@see     java.io.File
@see     java.io.FileDescriptor
@see     java.io.FileInputStream
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.FileOutputStream(String name) throws java.io.FileNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个向具有指定名称的文件中写入数据的输出文件流。创建一个新 <code>FileDescriptor</code> 对象来表示此文件连接。
 <p>
首先，如果有安全管理器，则用 <code>name</code> 作为参数调用 <code>checkWrite</code> 方法。
 <p>
如果该文件存在，但它是一个目录，而不是一个常规文件；或者该文件不存在，但无法创建它；抑或因为其他某些原因而无法打开它，则抛出 <code>FileNotFoundException</code>。

@param      name   与系统有关的文件名
@exception  FileNotFoundException  如果文件存在，但它是一个目录，而不是一个常规文件；或者该文件不存在，但无法创建它；抑或因为其他某些原因而无法打开它
@exception  SecurityException  如果存在安全管理器，且其 <code>checkWrite</code> 方法拒绝对文件进行写入访问。
@see        java.lang.SecurityManager#checkWrite(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.FileOutputStream(String name, boolean append) throws java.io.FileNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个向具有指定 <code>name</code> 的文件中写入数据的输出文件流。如果第二个参数为 <code>true</code>，则将字节写入文件末尾处，而不是写入文件开始处。创建一个新 <code>FileDescriptor</code> 对象来表示此文件连接。
 <p>
首先，如果有安全管理器，则用 <code>name</code> 作为参数调用 <code>checkWrite</code> 方法。
 <p>
如果该文件存在，但它是一个目录，而不是一个常规文件；或者该文件不存在，但无法创建它；抑或因为其他某些原因而无法打开它，则抛出 <code>FileNotFoundException</code>。
 
@param     name        与系统有关的文件名
@param     append      如果为 <code>true</code>，则将字节写入文件末尾处，而不是写入文件开始处
@exception  FileNotFoundException  如果该文件存在，但它是一个目录，而不是一个常规文件；或者该文件不存在，但无法创建它；抑或因为其他某些原因而无法打开它。
@exception  SecurityException 如果存在安全管理器，且其 <code>checkWrite</code> 方法拒绝对文件进行写入访问。
@see        java.lang.SecurityManager#checkWrite(java.lang.String)
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.FileOutputStream(File file) throws java.io.FileNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个向指定 <code>File</code> 对象表示的文件中写入数据的文件输出流。创建一个新 <code>FileDescriptor</code> 对象来表示此文件连接。
 <p>
首先，如果有安全管理器，则用 <code>file</code> 参数表示的路径作为参数来调用 <code>checkWrite</code> 方法。
 <p>
如果该文件存在，但它是一个目录，而不是一个常规文件；或者该文件不存在，但无法创建它；抑或因为其他某些原因而无法打开，则抛出 <code>FileNotFoundException</code>。

@param   file   为了进行写入而打开的文件。
@exception  FileNotFoundException  如果该文件存在，但它是一个目录，而不是一个常规文件；或者该文件不存在，但无法创建它；抑或因为其他某些原因而无法打开
@exception  SecurityException  如果存在安全管理器，且其 <code>checkWrite</code> 方法拒绝对文件进行写入访问。
@see        java.io.File#getPath()
@see        java.lang.SecurityException
@see        java.lang.SecurityManager#checkWrite(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.FileOutputStream(File file, boolean append) throws java.io.FileNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个向指定 <code>File</code> 对象表示的文件中写入数据的文件输出流。如果第二个参数为 <code>true</code>，则将字节写入文件末尾处，而不是写入文件开始处。创建一个新 <code>FileDescriptor</code> 对象来表示此文件连接。
 <p>
首先，如果有安全管理器，则用 <code>file</code> 参数表示的路径作为参数来调用 <code>checkWrite</code> 方法。
 <p>
如果该文件存在，但它是一个目录，而不是一个常规文件；或者该文件不存在，但无法创建它；抑或因为其他某些原因而无法打开它，则抛出 <code>FileNotFoundException</code>。

@param   file   为了进行写入而打开的文件。
@param     append      如果为 <code>true</code>，则将字节写入文件末尾处，而不是写入文件开始处
@exception  FileNotFoundException  如果该文件存在，但它是一个目录，而不是一个常规文件；或者该文件不存在，但无法创建它；抑或因为其他某些原因而无法打开它
@exception  SecurityException  如果存在安全管理器，且其 <code>checkWrite</code> 方法拒绝对文件进行写入访问。
@see        java.io.File#getPath()
@see        java.lang.SecurityException
@see        java.lang.SecurityManager#checkWrite(java.lang.String)
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.FileOutputStream(FileDescriptor fdObj)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个向指定文件描述符处写入数据的输出文件流，该文件描述符表示一个到文件系统中的某个实际文件的现有连接。
 <p>
首先，如果有安全管理器，则用文件描述符 <code>fdObj</code> 参数作为参数来调用 <code>checkRead</code> 方法。

@param      fdObj   为进行写入而打开的文件描述符
@exception  SecurityException  如果存在安全管理器，且其 <code>checkWrite</code> 方法拒绝对文件描述符进行写入访问
@see        java.lang.SecurityManager#checkWrite(java.io.FileDescriptor)

<!-- END DATA -->
<!-- BEGIN KEY -->
public native void java.io.FileOutputStream.write(int b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定字节写入此文件输出流。实现 <code>OutputStream</code> 的 <code>write</code> 方法。

@param   b   要写入的字节。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.FileOutputStream.write(byte[] b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>b.length</code> 个字节从指定 byte 数组写入此文件输出流中。 

@param   b   数据。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.FileOutputStream.write(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定 byte 数组中从偏移量 <code>off</code> 开始的 <code>len</code> 个字节写入此文件输出流。 

@param   b   数据。
@param      off   数据中的起始偏移量。
@param   len       要写入的字节数。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.FileOutputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此文件输出流并释放与此流有关的所有系统资源。此文件输出流不能再用于写入字节。 

<p> 如果此流有一个与之关联的通道，则关闭该通道。

@exception  IOException 如果发生 I/O 错误。

@revised 1.4
@spec JSR-51

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.io.FileDescriptor java.io.FileOutputStream.getFD() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此流有关的文件描述符。

@return  表示到文件系统中的某个文件的连接的 <code>FileDescriptor</code> 对象，该文件系统正被此 <code>FileOutputStream</code> 对象使用。 
 
@exception  IOException 如果发生 I/O 错误。
@see        java.io.FileDescriptor

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.nio.channels.FileChannel java.io.FileOutputStream.getChannel()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与此文件输出流有关的唯一 {@link java.nio.channels.FileChannel FileChannel} 对象。</p>

<p> 所返回通道的初始 {@link java.nio.channels.FileChannel#position()</code>position<code>} 将等于到目前为止从文件中读取的字节数，除非此流处于挂起模式，在这种情况下，它将等于文件的大小。将字节写入此流中会使通道的位置相应地增加。显式地或通过写入来更改通道的位置会更改此流的文件位置。

@return  与此文件输出流有关的文件通道

@since 1.4
@spec JSR-51

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.io.FileOutputStream.finalize() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
清理到文件的连接，并确保在不再引用此文件输出流时调用此流的 <code>close</code> 方法。 

@exception  IOException 如果发生 I/O 错误。
@see        java.io.FileInputStream#close()

<!-- END DATA -->
