<!-- BEGIN KEY -->
public class java.io.CharArrayReader extends java.io.Reader
<!-- END KEY -->
<!-- BEGIN DATA -->
此类实现一个可用作字符输入流的字符缓冲区。

@author	Herb Jellinek
@version 	1.25, 11/17/05
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected char[] java.io.CharArrayReader.buf
<!-- END KEY -->
<!-- BEGIN DATA -->
字符缓冲区。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.io.CharArrayReader.pos
<!-- END KEY -->
<!-- BEGIN DATA -->
当前缓冲区位置。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.io.CharArrayReader.markedPos
<!-- END KEY -->
<!-- BEGIN DATA -->
缓冲区中标记的位置。
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.io.CharArrayReader.count
<!-- END KEY -->
<!-- BEGIN DATA -->

此缓冲区结尾处的索引。在此索引及其以后的位置处没有有效数据。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.CharArrayReader(char[] buf)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定的 char 数组创建一个 CharArrayReader。
@param buf	输入缓冲区（不是复制得到的）

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.CharArrayReader(char[] buf, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据指定的 char 数组创建一个 CharArrayReader。

<p> 得到的 reader 将从给定的 <tt>offset</tt> 处开始读取。可从此 reader 中读取的 <tt>char</tt> 值总数是 <tt>length</tt> 或 <tt>buf.length-offset</tt>，取其中的较小者。

@throws IllegalArgumentException 如果 <tt>offset</tt> 为负或大于 <tt>buf.length</tt>，或者 <tt>length</tt> 为负，或者这两个值的和为负。

@param buf	输入缓冲区（不是复制得到的）
@param offset    要读取的第一个 char 的偏移量
@param length	要读取的 char 数目

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.CharArrayReader.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取单个字符。
 
@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.CharArrayReader.read(char[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符读入数组的某一部分。
@param b	 目标缓冲区
@param off  开始存储字符处的偏移量 
@param len   要读取的最大字符数
@return 读取的实际字符数；如果到达流末尾，则返回 -1
 
@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.io.CharArrayReader.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
跳过字符。返回跳过的字符数。

<p><code>n</code> 参数可以为负数，尽管 {@link Reader} 超类的 <code>skip</code> 方法在此情况下会抛出一个异常。如果 <code>n</code> 为负数，则此方法不执行任何操作并返回 <code>0</code>。

@param n 要跳过的字符数
@return 已跳过的实际字符数
@exception IOException 如果流已关闭，或者发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.CharArrayReader.ready() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
判断此流是否已准备好被读取。Character-array reader 总是准备好被读取。

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.CharArrayReader.markSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
判断此流是否支持 mark() 操作（它一定支持）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.CharArrayReader.mark(int readAheadLimit) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
标记流中的当前位置。对 reset() 的后续调用会将该流重新定位到此点。

@param  readAheadLimit  在仍保留该标记的情况下，对可读取字符数量的限制。因为该流的输入来自字符数组，没有实际的限制；所以忽略此参数。

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.CharArrayReader.reset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将该流重置为最新的标记，如果从未标记过，则将其重置到开头。

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.CharArrayReader.close()
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭该流并释放与之关联的所有系统资源。关闭该流后，再调用 read()、ready()、mark()、reset() 或 skip() 将抛出 IOException。关闭以前关闭的流无效。

<!-- END DATA -->
