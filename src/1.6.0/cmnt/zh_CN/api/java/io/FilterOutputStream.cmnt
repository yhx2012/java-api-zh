<!-- BEGIN KEY -->
public class java.io.FilterOutputStream extends java.io.OutputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
此类是过滤输出流的所有类的超类。这些流位于已存在的输出流（<i>基础</i> 输出流）之上，它们将已存在的输出流作为其基本数据接收器，但可能直接传输数据或提供一些额外的功能。 
 <p>
<code>FilterOutputStream</code> 类本身只是简单地重写那些将所有请求传递给所包含输出流的 <code>OutputStream</code> 的所有方法。<code>FilterOutputStream</code> 的子类可进一步地重写这些方法中的一些方法，并且还可以提供一些额外的方法和字段。 

@author  Jonathan Payne
@version 1.31, 12/19/03
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.io.OutputStream java.io.FilterOutputStream.out
<!-- END KEY -->
<!-- BEGIN DATA -->
要过滤的基础输出流。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.FilterOutputStream(OutputStream out)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个构建在指定基础输出流之上的输出流过滤器。 

@param   out 分配给字段 <tt>this.out</tt> 以便以后使用的基础输出流，如果将在没有底层流的情况下创建此实例，则该参数为 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.FilterOutputStream.write(int b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定 <code>byte</code> 写入此输出流。 
 <p>
<code>FilterOutputStream</code> 的 <code>write</code> 方法调用其基础输出流的 <code>write</code> 方法，也就是说，它执行 <tt>out.write(b)</tt>。
 <p>
实现 <tt>OutputStream</tt> 的抽象 <tt>write</tt> 方法。 

@param   b   <code>byte</code>。
@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.FilterOutputStream.write(byte[] b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>b.length</code> 个字节写入此输出流。 
 <p>
<code>FilterOutputStream</code> 的 <code>write</code> 方法将 <code>b</code>、<code>0</code> 和 <code>b.length</code> 作为三个参数来调用 <code>write</code> 方法。 
 <p>
注意，此方法不调用其底层流的只带有单个参数 <code>b</code> 的 <code>write</code> 方法。 

@param   b   要写入的数据。
@exception  IOException 如果发生 I/O 错误。
@see        java.io.FilterOutputStream#write(byte[], int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.FilterOutputStream.write(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定 <code>byte</code> 数组中从偏移量 <code>off</code> 开始的 <code>len</code> 个字节写入此输出流。 
 <p>
<code>FilterOutputStream</code> 的 <code>write</code> 方法依次调用带一个参数的 <code>write</code> 方法来输出每个 <code>byte</code>。 
 <p>
注意，此方法不会调用其基础输入流的带有相同参数的 <code>write</code> 方法。<code>FilterOutputStream</code> 的子类应该提供此方法更有效的实现。 

@param   b   数据。
@param      off   数据中的起始偏移量。
@param   len       要写入的字节数。
@exception  IOException 如果发生 I/O 错误。
@see        java.io.FilterOutputStream#write(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.FilterOutputStream.flush() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
刷新此输出流，并强制将所有已缓冲的输出字节写入该流中。 
 <p>
<code>FilterOutputStream</code> 的 <code>flush</code> 方法调用其基础输出流的 <code>flush</code> 方法。 

@exception  IOException 如果发生 I/O 错误。
@see        java.io.FilterOutputStream#out

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.FilterOutputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此输出流并释放与此流有关的所有系统资源。 
 <p>
<code>FilterOutputStream</code> 的 <code>close</code> 方法先调用其 <code>flush</code> 方法，然后调用其基础输出流的 <code>close</code> 方法。 

@exception  IOException 如果发生 I/O 错误。
@see        java.io.FilterOutputStream#flush()
@see        java.io.FilterOutputStream#out

<!-- END DATA -->
