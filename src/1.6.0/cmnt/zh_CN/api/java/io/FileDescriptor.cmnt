<!-- BEGIN KEY -->
public final class java.io.FileDescriptor extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
文件描述符类的实例用作与基础机器有关的某种结构的不透明句柄，该结构表示开放文件、开放套接字或者字节的另一个源或接收者。文件描述符的主要实际用途是创建一个包含该结构的 <code>FileInputStream</code> 或 <code>FileOutputStream</code>。
 <p>
应用程序不应创建自己的文件描述符。

@author  Pavani Diwanji
@version 1.21, 12/19/03
@see	    java.io.FileInputStream
@see	    java.io.FileOutputStream
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.io.FileDescriptor java.io.FileDescriptor.in
<!-- END KEY -->
<!-- BEGIN DATA -->
标准输入流的句柄。通常，此文件描述符不是直接使用的，而是通过称为 <code>System.in</code> 的输入流使用的。

@see     java.lang.System#in

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.io.FileDescriptor java.io.FileDescriptor.out
<!-- END KEY -->
<!-- BEGIN DATA -->
标准输出流的句柄。通常，此文件描述符不是直接使用的，而是通过称为 <code>System.out</code> 的输出流使用的。
@see     java.lang.System#out

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.io.FileDescriptor java.io.FileDescriptor.err
<!-- END KEY -->
<!-- BEGIN DATA -->
标准错误流的句柄。通常，此文件描述符不是直接使用的，而是通过称为 <code>System.err</code> 的输出流使用的。

@see     java.lang.System#err

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.FileDescriptor()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个（无效的）FileDescriptor 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.FileDescriptor.valid()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试此文件描述符对象是否有效。

@return  如果文件描述符对象表示一个有效的、开放的文件、套接字或其他活动 I/O 连接，则返回 <code>true</code>；否则返回 <code>false</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public native void java.io.FileDescriptor.sync() throws java.io.SyncFailedException
<!-- END KEY -->
<!-- BEGIN DATA -->
强制所有系统缓冲区与基础设备同步。该方法在此 FileDescriptor 的所有修改数据和属性都写入相关设备后返回。特别是，如果此 FileDescriptor 引用物理存储介质，比如文件系统中的文件，则一直要等到将与此 FileDesecriptor 有关的缓冲区的所有内存中修改副本写入物理介质中，sync 方法才会返回。

sync 方法由要求物理存储（比例文件）处于某种已知状态下的代码使用。例如，提供简单事务处理设施的类可以使用 sync 来确保某个文件所有由给定事务造成的更改都记录在存储介质上。

sync 只影响此 FileDescriptor 的缓冲区下游。如果正通过应用程序（例如，通过一个 BufferedOutputStream 对象）实现内存缓冲，那么必须在数据受 sync 影响之前将这些缓冲区刷新，并转到 FileDescriptor 中（例如，通过调用 OutputStream.flush）。

@exception SyncFailedException 无法刷新缓冲区时抛出，或者在因为系统无法保证所有缓冲区都与物理介质同步时抛出。
@since     JDK1.1

<!-- END DATA -->
