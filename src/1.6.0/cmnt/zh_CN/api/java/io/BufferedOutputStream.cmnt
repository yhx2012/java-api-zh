<!-- BEGIN KEY -->
public class java.io.BufferedOutputStream extends java.io.FilterOutputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
该类实现缓冲的输出流。通过设置这种输出流，应用程序就可以将各个字节写入底层输出流中，而不必针对每次字节写入调用底层系统。

@author  Arthur van Hoff
@version 1.33, 12/19/03
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected byte[] java.io.BufferedOutputStream.buf
<!-- END KEY -->
<!-- BEGIN DATA -->
存储数据的内部缓冲区。 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.io.BufferedOutputStream.count
<!-- END KEY -->
<!-- BEGIN DATA -->
缓冲区中的有效字节数。此值始终处于 <tt>0</tt> 到 <tt>buf.length</tt> 范围内；元素 <tt>buf[0]</tt> 到 <tt>buf[count-1]</tt> 包含有效的字节数据。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.BufferedOutputStream(OutputStream out)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的缓冲输出流，以将数据写入指定的底层输出流。

@param out 底层输出流。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.BufferedOutputStream(OutputStream out, int size)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流。 

@param out 底层输出流。
@param   size   缓冲区的大小。
@exception IllegalArgumentException 如果 size &lt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.io.BufferedOutputStream.write(int b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的字节写入此缓冲的输出流。 

@param   b   要写入的字节。
@exception  IOException  如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.io.BufferedOutputStream.write(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定 byte 数组中从偏移量 <code>off</code> 开始的 <code>len</code> 个字节写入此缓冲的输出流。

<p> 一般来说，此方法将给定数组的字节存入此流的缓冲区中，根据需要将该缓冲区刷新，并转到底层输出流。但是，如果请求的长度至少与此流的缓冲区大小相同，则此方法将刷新该缓冲区并将各个字节直接写入底层输出流。因此多余的 <code>BufferedOutputStream</code> 将不必复制数据。

@param      b   数据。
@param      off   数据的起始偏移量。
@param      len   要写入的字节数。
@exception  IOException  如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.io.BufferedOutputStream.flush() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
刷新此缓冲的输出流。这迫使所有缓冲的输出字节被写出到底层输出流中。

@exception  IOException  如果发生 I/O 错误。
@see        java.io.FilterOutputStream#out

<!-- END DATA -->
