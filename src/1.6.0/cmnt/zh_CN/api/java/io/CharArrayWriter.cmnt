<!-- BEGIN KEY -->
public class java.io.CharArrayWriter extends java.io.Writer
<!-- END KEY -->
<!-- BEGIN DATA -->
此类实现一个可用作 Writer 的字符缓冲区。缓冲区会随向流中写入数据而自动增长。可使用 toCharArray() 和 toString() 获取数据。
 <P>
注：在此类上调用 close() 无效，并且在关闭该流后可以调用此类中的各个方法，而不会产生任何 IOException。

@author	Herb Jellinek
@version	1.23, 07/16/04
@since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected char[] java.io.CharArrayWriter.buf
<!-- END KEY -->
<!-- BEGIN DATA -->
存储数据的缓冲区。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.io.CharArrayWriter.count
<!-- END KEY -->
<!-- BEGIN DATA -->
缓冲区中的 char 数目。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.CharArrayWriter()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 CharArrayWriter。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.CharArrayWriter(int initialSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有指定初始大小的新 CharArrayWriter。

@param initialSize  一个指定缓冲区初始大小的 int。
@exception  IllegalArgumentException  如果 initialSize 为负。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.CharArrayWriter.write(int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个字符写入缓冲区。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.CharArrayWriter.write(char[] c, int off, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符写入缓冲区。
@param c	要写入的数据
@param off	数据中的起始偏移量
@param len	写入的 char 数目

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.CharArrayWriter.write(String str, int off, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符串的某一部分写入缓冲区。
@param  str  要写入的字符串
@param  off  开始读取字符处的偏移量
@param  len  要写入的字符数

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.CharArrayWriter.writeTo(Writer out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将缓冲区的内容写入另一个字符流。

@param out	要写入的输出流
@throws IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.CharArrayWriter java.io.CharArrayWriter.append(CharSequence csq)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的字符序列添加到此 writer。

<p> 以 <tt>out.append(csq)</tt> 形式调用此方法与以下调用具有完全相同的行为：

 <pre>
out.write(csq.toString()) </pre>

<p> 可能不会添加整个序列，这取决于针对字符序列 <tt>csq</tt> 的 <tt>toString</tt> 规范。例如，调用一个字符缓冲区的 <tt>toString</tt> 方法将返回一个子序列，其内容取决于缓冲区的位置和限制。

@param  csq 要添加的字符序列。如果 <tt>csq</tt> 为 <tt>null</tt>，则向此 writer 添加四个字符 <tt>&quot;null&quot;</tt>。

@return  此 writer

@since  1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.CharArrayWriter java.io.CharArrayWriter.append(CharSequence csq, int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定字符序列的子序列添加到此 writer。

<p> 当 <tt>csq</tt> 不为 <tt>null</tt> 时，以 <tt>out.append(csq, start, end)</tt> 形式调用此方法与以下调用具有完全相同的行为：

 <pre>
     out.write(csq.subSequence(start, end).toString()) </pre>

@param  csq 其子序列将被添加的字符序列。如果 <tt>csq</tt> 为 <tt>null</tt>，则添加四个字符 <tt>&quot;null&quot;</tt>，就好像 <tt>csq</tt> 包含这些字符一样。

@param  start 子序列中第一个字符的索引

@param  end 子序列中最后一个字符后面的字符的索引

@return  此 writer

@throws  IndexOutOfBoundsException 如果 <tt>start</tt> 或 <tt>end</tt> 为负，<tt>start</tt> 大于 <tt>end</tt> 或者 <tt>end</tt> 大于 <tt>csq.length()</tt>

@since  1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.CharArrayWriter java.io.CharArrayWriter.append(char c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定字符添加到此 writer。

<p> 以 <tt>out.append(c)</tt> 形式调用此方法与以下调用具有完全相同的行为：

 <pre>
     out.write(c) </pre>

@param  c 要添加的 16 位字符

@return  此 writer

@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.CharArrayWriter.reset()
<!-- END KEY -->
<!-- BEGIN DATA -->
重置该缓冲区，以便再次使用它而无需丢弃已分配的缓冲区。

<!-- END DATA -->
<!-- BEGIN KEY -->
public char[] java.io.CharArrayWriter.toCharArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回输入数据的副本。

@return 复制输入数据所得到的 char 数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.CharArrayWriter.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回缓冲区的当前大小。

@return 表示缓冲区当前大小的 int 值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.io.CharArrayWriter.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
将输入数据转换为字符串。
@return  字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.CharArrayWriter.flush()
<!-- END KEY -->
<!-- BEGIN DATA -->
刷新该流的缓冲。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.CharArrayWriter.close()
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭该流。此方法并不释放缓冲区，因为仍然可能需要其内容。注：在此类中调用此方法无效。

<!-- END DATA -->
