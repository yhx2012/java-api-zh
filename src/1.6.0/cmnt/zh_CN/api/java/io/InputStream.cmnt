<!-- BEGIN KEY -->
public abstract class java.io.InputStream extends java.lang.Object implements java.io.Closeable
<!-- END KEY -->
<!-- BEGIN DATA -->
此抽象类是表示字节输入流的所有类的超类。

<p> 需要定义 <code>InputStream</code> 子类的应用程序必须总是提供返回下一个输入字节的方法。

@author  Arthur van Hoff
@version 1.45, 02/19/04
@see     java.io.BufferedInputStream
@see     java.io.ByteArrayInputStream
@see     java.io.DataInputStream
@see     java.io.FilterInputStream
@see     java.io.InputStream#read()
@see     java.io.OutputStream
@see     java.io.PushbackInputStream
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.io.InputStream.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从输入流中读取数据的下一个字节。返回 <code>0</code> 到 <code>255</code> 范围内的 <code>int</code> 字节值。如果因为已经到达流末尾而没有可用的字节，则返回值 <code>-1</code>。在输入数据可用、检测到流末尾或者抛出异常前，此方法一直阻塞。

<p> 子类必须提供此方法的一个实现。

@return     下一个数据字节；如果到达流的末尾，则返回 <code>-1</code>。
@exception  IOException  如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.InputStream.read(byte[] b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从输入流中读取一定数量的字节，并将其存储在缓冲区数组 <code>b</code> 中。以整数形式返回实际读取的字节数。在输入数据可用、检测到文件末尾或者抛出异常前，此方法一直阻塞。

<p> 如果 <code>b</code> 的长度为 0，则不读取任何字节并返回 <code>0</code>；否则，尝试读取至少一个字节。如果因为流位于文件末尾而没有可用的字节，则返回值 <code>-1</code>；否则，至少读取一个字节并将其存储在 <code>b</code> 中。

<p> 将读取的第一个字节存储在元素 <code>b[0]</code> 中，下一个存储在 <code>b[1]</code> 中，依次类推。读取的字节数最多等于 <code>b</code> 的长度。设 <i>k</i> 为实际读取的字节数；这些字节将存储在 <code>b[0]</code> 到 <code>b[</code><i>k</i><code>-1]</code> 的元素中，不影响 <code>b[</code><i>k</i><code>]</code> 到 <code>b[b.length-1]</code> 的元素。

<p> 类 <code>InputStream</code> 的 <code>read(b)</code> 方法的效果等同于：<pre><code> read(b, 0, b.length) </code></pre>

@param      b     存储读入数据的缓冲区。
@return     读入缓冲区的总字节数；如果因为已经到达流末尾而不再有数据可用，则返回 <code>-1</code>。
@exception  IOException 如果不是因为流位于文件末尾而无法读取第一个字节；如果输入流已关闭；如果发生其他 I/O 错误。
@exception  NullPointerException  如果 <code>b</code> 为 <code>null</code>。
@see        java.io.InputStream#read(byte[], int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.InputStream.read(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将输入流中最多 <code>len</code> 个数据字节读入 byte 数组。尝试读取 <code>len</code> 个字节，但读取的字节也可能小于该值。以整数形式返回实际读取的字节数。

<p> 在输入数据可用、检测到流末尾或者抛出异常前，此方法一直阻塞。

<p> 如果 <code>len</code> 为 0，则不读取任何字节并返回 <code>0</code>；否则，尝试读取至少一个字节。如果因为流位于文件末尾而没有可用的字节，则返回值 <code>-1</code>；否则，至少读取一个字节并将其存储在 <code>b</code> 中。

<p> 将读取的第一个字节存储在元素 <code>b[off]</code> 中，下一个存储在 <code>b[off+1]</code> 中，依次类推。读取的字节数最多等于 <code>len</code>。设 <i>k</i> 为实际读取的字节数；这些字节将存储在 <code>b[off]</code> 到 <code>b[off+</code><i>k</i><code>-1]</code> 的元素中，不影响 <code>b[off+</code><i>k</i><code>]</code> 到 <code>b[off+len-1]</code> 的元素。

<p> 在任何情况下，<code>b[0]</code> 到 <code>b[off]</code> 的元素以及 <code>b[off+len]</code> 到 <code>b[b.length-1]</code> 的元素都不会受到影响。

<p> 类 <code>InputStream</code> 的 <code>read(b,</code> <code>off,</code> <code>len)</code> 方法重复调用方法 <code>read()</code>。如果第一次这样的调用导致 <code>IOException</code>，则从对 <code>read(b,</code> <code>off,</code> <code>len)</code> 方法的调用中返回该异常。如果对 <code>read()</code> 的任何后续调用导致 <code>IOException</code>，则捕获该异常并将其视为到达文件末尾；到达该点时读取的字节存储在 <code>b</code> 中，并返回发生异常之前读取的字节数。在已读取输入数据 <code>len</code> 的请求数量、检测到文件结束标记、抛出异常前，此方法的默认实现将一直阻塞。建议子类提供此方法更为有效的实现。

@param      b     读入数据的缓冲区。
@param      off   数组 <code>b</code> 中将写入数据的初始偏移量。
@param      len   要读取的最大字节数。
@return     读入缓冲区的总字节数；如果因为已到达流末尾而不再有数据可用，则返回 <code>-1</code>。
@exception  IOException 如果不是因为位于文件末尾而无法读取第一个字节；如果输入流已关闭；如果发生其他 I/O 错误。
@exception  NullPointerException  如果 <code>b</code> 为 <code>null</code>。
@exception  IndexOutOfBoundsException 如果 <code>off</code> 为负，<code>len</code> 为负，或者 <code>len</code> 大于 <code>b.length - off</code>
@see        java.io.InputStream#read()

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.io.InputStream.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
跳过和丢弃此输入流中数据的 <code>n</code> 个字节。出于各种原因，<code>skip</code> 方法结束时跳过的字节数可能小于该数，也可能为 <code>0</code>。导致这种情况的原因很多，跳过 <code>n</code> 个字节之前已到达文件末尾只是其中一种可能。返回跳过的实际字节数。如果 <code>n</code> 为负，则不跳过任何字节。

<p> 此类的 <code>skip</code> 方法创建一个 byte 数组，然后重复将字节读入其中，直到读够 <code>n</code> 个字节或已到达流末尾为止。建议子类提供此方法更为有效的实现。例如，可依赖搜索能力的实现。

@param      n   要跳过的字节数。
@return     跳过的实际字节数。
@exception  IOException 如果流不支持搜索，或者发生其他 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.InputStream.available() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此输入流下一个方法调用可以不受阻塞地从此输入流读取（或跳过）的估计字节数。下一个调用可能是同一个线程，也可能是另一个线程。一次读取或跳过此估计数个字节不会受阻塞，但读取或跳过的字节数可能小于该数。

 <p> 注意，有些 {@code InputStream} 的实现将返回流中的字节总数，但也有很多实现不会这样做。试图使用此方法的返回值分配缓冲区，以保存此流所有数据的做法是不正确的。

 <p>如果已经调用 {@link #close()} 方法关闭了此输入流，那么此方法的子类实现可以选择抛出 {@link IOException}。

<p> 类 <code>InputStream</code> 的 <code>available</code> 方法总是返回 <code>0</code>。

<p> 此方法应该由子类重写。

@return     可以不受阻塞地从此输入流读取（或跳过）的估计字节数；如果到达输入流末尾，则返回 {@code 0}。
@exception  IOException  如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.InputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此输入流并释放与该流关联的所有系统资源。

<p> <code>InputStream</code> 的 <code>close</code> 方法不执行任何操作。

@exception  IOException  如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.io.InputStream.mark(int readlimit)
<!-- END KEY -->
<!-- BEGIN DATA -->
在此输入流中标记当前的位置。对 <code>reset</code> 方法的后续调用会在最后标记的位置重新定位此流，以便后续读取重新读取相同的字节。

<p> <code>readlimit</code> 参数告知此输入流在标记位置失效之前允许读取的字节数。

<p> <code>mark</code> 的常规协定是：如果方法 <code>markSupported</code> 返回 <code>true</code>，那么输入流总是在调用 <code>mark</code> 之后记录所有读取的字节，并时刻准备在调用方法 <code>reset</code> 时（无论何时），再次提供这些相同的字节。但是，如果在调用 <code>reset</code> 之前可以从流中读取多于 <code>readlimit</code> 的字节，则不需要该流记录任何数据。

<p> 标记已关闭的流对其无效。

<p> <code>InputStream</code> 的 <code>mark</code> 方法不执行任何操作。

@param   readlimit   在标记位置失效前可以读取字节的最大限制。
@see     java.io.InputStream#reset()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.io.InputStream.reset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此流重新定位到最后一次对此输入流调用 <code>mark</code> 方法时的位置。

<p> <code>reset</code> 的常规协定是：

 <p><ul>

<li> 如果方法 <code>markSupported</code> 返回 <code>true</code>，那么：

<ul><li> 如果创建流以后未调用方法 <code>mark</code>，或最后调用 <code>mark</code> 以后从该流读取的字节数大于最后调用 <code>mark</code> 时的参数，则可能抛出 <code>IOException</code>。

<li> 如果未抛出这样的 <code>IOException</code>，则将该流重新设置为这种状态：最近一次调用 <code>mark</code> 以后（如果未调用过 <code>mark</code>，则从文件开头开始）读取的所有字节将重新提供给 <code>read</code> 方法的后续调用者，后跟任何从调用 <code>reset</code> 时起将作为下一输入数据的字节。 </ul>

<li> 如果方法 <code>markSupported</code> 返回 <code>false</code>，那么：

<ul><li> 对 <code>reset</code> 的调用可能抛出 <code>IOException</code>。

<li> 如果未抛出 <code>IOException</code>，则将该流重新设置为一种固定状态，该状态取决于输入流的特定类型及其创建方式。提供给 <code>read</code> 方法后续调用者的字节取决于特定类型的输入流。 </ul></ul>

<p>除了抛出 <code>IOException</code> 之外，类 <code>InputStream</code> 的方法 <code>reset</code> 不执行任何操作。

@exception  IOException  如果未标记此流或该标记失效。
@see     java.io.InputStream#mark(int)
@see     java.io.IOException

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.InputStream.markSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试此输入流是否支持 <code>mark</code> 和 <code>reset</code> 方法。是否支持 <code>mark</code> 和 <code>reset</code> 是特定输入流实例的不变属性。<code>InputStream</code> 的 <code>markSupported</code> 方法返回 <code>false</code>。

@return 如果此输入流实例支持 mark 和 reset 方法，则返回 <code>true</code>；否则返回 <code>false</code>。
@see     java.io.InputStream#mark(int)
@see     java.io.InputStream#reset()

<!-- END DATA -->
