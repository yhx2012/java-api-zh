<!-- BEGIN KEY -->
public class java.io.ByteArrayOutputStream extends java.io.OutputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
此类实现了一个输出流，其中的数据被写入一个 byte 数组。缓冲区会随着数据的不断写入而自动增长。可使用 <code>toByteArray()</code> 和 <code>toString()</code> 获取数据。
 <p>
关闭 <tt>ByteArrayOutputStream</tt> 无效。此类中的方法在关闭此流后仍可被调用，而不会产生任何 <tt>IOException</tt>。

@author  Arthur van Hoff
@version 1.49, 05/18/04
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected byte[] java.io.ByteArrayOutputStream.buf
<!-- END KEY -->
<!-- BEGIN DATA -->

存储数据的缓冲区。 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.io.ByteArrayOutputStream.count
<!-- END KEY -->
<!-- BEGIN DATA -->
缓冲区中的有效字节数。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.ByteArrayOutputStream()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 byte 数组输出流。缓冲区的容量最初是 32 字节，如有必要可增加其大小。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.ByteArrayOutputStream(int size)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 byte 数组输出流，它具有指定大小的缓冲区容量（以字节为单位）。 

@param   size   初始大小。
@exception  IllegalArgumentException  如果 size 为负。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.io.ByteArrayOutputStream.write(int b)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的字节写入此 byte 数组输出流。 

@param   b   要写入的字节。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.io.ByteArrayOutputStream.write(byte[] b, int off, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定 byte 数组中从偏移量 <code>off</code> 开始的 <code>len</code> 个字节写入此 byte 数组输出流。

@param      b   数据。
@param      off   数据的初始偏移量。
@param      len   要写入的字节数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.io.ByteArrayOutputStream.writeTo(OutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 byte 数组输出流的全部内容写入到指定的输出流参数中，这与使用 <code>out.write(buf, 0, count)</code> 调用该输出流的 write 方法效果一样。

@param      out   要写入数据的输出流。
@exception  IOException  如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.io.ByteArrayOutputStream.reset()
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 byte 数组输出流的 <code>count</code> 字段重置为零，从而丢弃输出流中目前已累积的所有输出。通过重新使用已分配的缓冲区空间，可以再次使用该输出流。 

@see     java.io.ByteArrayInputStream#count

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized byte[] java.io.ByteArrayOutputStream.toByteArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新分配的 byte 数组。其大小是此输出流的当前大小，并且缓冲区的有效内容已复制到该数组中。 

@return  以 byte 数组的形式返回此输出流的当前内容。
@see     java.io.ByteArrayOutputStream#size()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.io.ByteArrayOutputStream.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回缓冲区的当前大小。

@return  <code>count</code> 字段的值，这是此输出流中有效字节的数目。
@see     java.io.ByteArrayOutputStream#count

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String java.io.ByteArrayOutputStream.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
使用平台默认的字符集，通过解码字节将缓冲区内容转换为字符串。新 <tt>String</tt> 的长度是字符集的函数，因此可能不等于缓冲区的大小。

 <p> 此方法总是使用平台默认字符集的默认替代字符串替代错误输入 (malformed-input) 和不可映射字符 (unmappable-character) 序列。如果需要对解码过程进行更多控制，则应该使用 {@linkplain java.nio.charset.CharsetDecoder} 类。

@return 从缓冲区内容解码的字符串。
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String java.io.ByteArrayOutputStream.toString(String charsetName) throws java.io.UnsupportedEncodingException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定的 {@link java.nio.charset.Charset charsetName}，通过解码字节将缓冲区内容转换为字符串。新 <tt>String</tt> 的长度是字符集的函数，因此可能不等于缓冲区的大小。


 <p> 此方法总是使用平台默认字符集的默认替代字符串替代错误输入 (malformed-input) 和不可映射字符 (unmappable-character) 序列。如果需要对解码过程进行更多控制，则应该使用 {@linkplain java.nio.charset.CharsetDecoder} 类。

 @param  charsetName  {@linkplain java.nio.charset.Charset </code>charset<code>} 支持的名称
 @return 从缓冲区内容解码的字符串。
 @exception  UnsupportedEncodingException
             如果不支持指定的字符集。
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String java.io.ByteArrayOutputStream.toString(int hibyte)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新分配的字符串。其大小是该输出流的当前大小，并且缓冲区的有效内容已复制到其中。得到的字符串中的每个字符 <i>c</i> 都根据 byte 数组中的相应元素 <i>b</i> 构造，如下所示：
 <blockquote><pre>
     c == (char)(((hibyte &amp; 0xff) &lt;&lt; 8) | (b &amp; 0xff))
 </pre></blockquote>

@deprecated 此方法无法将字节正确转换为字符。从 JDK&#xA0;1.1 开始，完成该转换的首选方法是通过 <code>toString(String enc)</code> 方法（使用一个编码名称参数），或 <code>toString()</code> 方法（使用平台的默认字符编码）。

@param      hibyte    每个结果 Unicode 字符的高次字节。
@return  以字符串的形式返回输出流的当前内容。
@see        java.io.ByteArrayOutputStream#size()
@see        java.io.ByteArrayOutputStream#toString(String)
@see        java.io.ByteArrayOutputStream#toString()

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.ByteArrayOutputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭 <tt>ByteArrayOutputStream</tt> 无效。此类中的方法在关闭此流后仍可被调用，而不会产生任何 <tt>IOException</tt> 时。
 <p>

<!-- END DATA -->
