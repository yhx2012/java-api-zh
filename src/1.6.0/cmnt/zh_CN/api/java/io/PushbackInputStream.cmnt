<!-- BEGIN KEY -->
public class java.io.PushbackInputStream extends java.io.FilterInputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>PushbackInputStream</code> 为另一个输入流添加性能，即&ldquo;推回 (push back)&rdquo;或&ldquo;取消读取 (unread)&rdquo;一个字节的能力。在代码片段可以很方便地读取由特定字节值分隔的不定数量的数据字节时，这很有用；在读取终止字节后，代码片段可以&ldquo;取消读取&rdquo;该字节，这样，输入流上的下一个读取操作将会重新读取被推回的字节。例如，表示构成标识符字符的字节可能由表示操作符字符的字节终止；用于读取一个标识符的方法可以读取到遇到操作符为止，然后将该操作符推回以进行重读。

@author  David Connelly
@author  Jonathan Payne
@version 1.43, 06/19/06
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected byte[] java.io.PushbackInputStream.buf
<!-- END KEY -->
<!-- BEGIN DATA -->
推回缓冲区。
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.io.PushbackInputStream.pos
<!-- END KEY -->
<!-- BEGIN DATA -->
推回缓冲区中的位置，将读取该位置的下一个字节。缓冲区为空时，<code>pos</code> 等于 <code>buf.length</code>；缓冲区已满时，<code>pos</code> 等于 0。

@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.PushbackInputStream(InputStream in, int size)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定 <code>size</code> 的推回缓冲区创建 <code>PushbackInputStream</code>，并保存其参数（即输入流 <code>in</code>），以供将来使用。最初，不存在推回字节（字段 <code>pushBack</code> 被初始化为 <code>-1</code>）。

@param  in    从中读取字节的输入流。
@param  size  推回缓冲区的大小。
@exception IllegalArgumentException 如果 size &lt;= 0
@since  JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.PushbackInputStream(InputStream in)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 <code>PushbackInputStream</code> 并保存其参数（即输入流 <code>in</code>），以供将来使用。最初，不存在推回字节（字段 <code>pushBack</code> 被初始化为 <code>-1</code>）。

@param  in    从中读取字节的输入流。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.PushbackInputStream.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从此输入流中读取下一个数据字节。以 <code>int</code> 形式返回 <code>0</code> 到 <code>255</code> 范围内字节值。如果因为已经到达流末尾而没有可用的字节，则返回值 <code>-1</code>。在输入数据可用、检测到流末尾或者抛出异常之前，此方法一直阻塞。

<p> 此方法返回最近一次推回的字节（如果有），否则将调用其底层输入流的 <code>read</code> 方法，并返回该方法返回的任何值。

@return     下一个数据字节；如果已到达流末尾，则返回 <code>-1</code>。
@exception  IOException  如果已调用其 {@link #close()} 方法关闭此输入流，或者发生 I/O 错误。
@see        java.io.InputStream#read()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.PushbackInputStream.read(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从此输入流将最多 <code>len</code> 个数据字节读入 byte 数组。此方法首先读取所有推回字节；然后，如果读取的字节数少于 <code>len</code> 个字节，那么它将从底层输入流中读取字节。如果 <code>len</code> 不为 0，那么在至少 1 个输入字节可用之前，该方法将一直阻塞；否则，不读取任何字节并返回 <code>0</code>。

@param      b     读入数据的缓冲区。
@param      off   目标数组 <code>b</code> 中的初始偏移量。
@param      len   读取的最大字节数。
@return     读入缓冲区的总字节数；如果因为已经到达流末尾而不再有数据可用，则返回 <code>-1</code>。
@exception  NullPointerException 如果 <code>b</code> 为 <code>null</code>。
@exception  IndexOutOfBoundsException 如果 <code>off</code> 为负，<code>len</code> 为负，或者 <code>len</code> 大于 <code>b.length - off</code>
@exception  IOException  如果已调用其 {@link #close()} 方法关闭此输入流，或者发生 I/O 错误。
@see        java.io.InputStream#read(byte[], int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.PushbackInputStream.unread(int b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
推回一个字节：将其复制到推回缓冲区之前。此方法返回后，要读取的下一个字节的值将为 <code>(byte)b</code>。

@param      b   要推回其低位字节的 <code>int</code> 值。
@exception IOException 如果推回缓冲区中没有足够的空间来存储字节，或者已调用其 {@link #close()} 方法关闭此输入流。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.PushbackInputStream.unread(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
推回 byte 数组的某一部分：将其复制到推回缓冲区之前。此方法返回后，要读取的下一个字节的值将为 <code>b[off]</code>，该字节之后的字节的值将为 <code>b[off+1]</code>，依此类推。

@param b 要推回的 byte 数组。
@param      off   数据的初始偏移量。
@param len 要推回的字节数。
@exception IOException 如果推回缓冲区中没有足够的空间来存储指定字节数，或者已调用其 {@link #close()} 方法关闭此输入流。
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.PushbackInputStream.unread(byte[] b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
推回一个 byte 数组：将其复制到推回缓冲区之前。此方法返回后，要读取的下一个字节的值将为 <code>b[0]</code>，该字节之后的字节的值将为 <code>b[1]</code>，依此类推。

@param b 要推回的 byte 数组
@exception IOException 如果推回缓冲区中没有足够的空间来存储指定字节数，或者已调用其 {@link #close()} 方法关闭此输入流。
@since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.PushbackInputStream.available() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
返回可以不受下一次调用此输入流的方法阻塞地从此输入流读取（或跳过）的估计字节数。下一次调用可能是相同的线程，也可能是不同的线程。一次读取或跳过该估计数个字节不会受阻塞，但是读取或跳过的字节可能少于该数。

<p> 该方法返回已被推回的字节数与 {@link
 java.io.FilterInputStream#available available} 返回的值之和。

@return     可以不受阻塞地从此输入流读取（或跳过）的字节数。
@exception  IOException  如果已调用其 {@link #close()} 方法关闭此输入流，或者发生 I/O 错误。
@see        java.io.FilterInputStream#in
@see        java.io.InputStream#available()

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.io.PushbackInputStream.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从此输入流中跳过并丢弃 <code>n</code> 个数据字节。由于多种原因，<code>skip</code> 方法结束时跳过的字节数可能少于该数，也可能为 0。如果 <code>n</code> 为负，则不跳过任何字节。
 
<p> <code>PushbackInputStream</code> 的 <code>skip</code> 方法首先跳过推回缓冲区中的字节（如果有）。如果需要跳过更多字节，那么它将调用底层输入流的 <code>skip</code> 方法。返回跳过的实际字节数。

@param      n   {@inheritDoc}
@return        {@inheritDoc}
@exception  IOException  如果流不支持查找操作，或者已调用其 {@link #close()} 方法关闭，或者发生 I/O 错误。
@see        java.io.FilterInputStream#in
@see        java.io.InputStream#skip(long n)
@since      1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.PushbackInputStream.markSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
测试此输入流是否支持 <code>mark</code> 和 <code>reset</code> 方法，此输入流不支持这两个方法。

@return    <code>false</code>，因为此类不支持 <code>mark</code> 和 <code>reset</code> 方法。
@see     java.io.InputStream#mark(int)
@see     java.io.InputStream#reset()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.io.PushbackInputStream.mark(int readlimit)
<!-- END KEY -->
<!-- BEGIN DATA -->
在此输入流中标记当前的位置。

<p> <code>PushbackInputStream</code> 的 <code>mark</code> 方法不执行任何操作。

@param   readlimit   在标记位置变无效前可以读取字节的最大限制。
@see     java.io.InputStream#reset()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.io.PushbackInputStream.reset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此流重新定位到最后一次对此输入流调用 <code>mark</code> 方法时的位置。

<p> 类 <code>PushbackInputStream</code> 的方法 <code>reset</code> 不执行任何操作，只抛出 <code>IOException</code>。

@exception  IOException  如果调用此方法。
@see     java.io.InputStream#mark(int)
@see     java.io.IOException

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.io.PushbackInputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此输入流并释放与该流关联的所有系统资源。关闭流之后，再调用 read()、unread()、available()、reset() 或 skip() 将抛出 IOException。关闭以前关闭的流无效。

@exception  IOException  如果发生 I/O 错误。

<!-- END DATA -->
