<!-- BEGIN KEY -->
public abstract class java.io.FilterWriter extends java.io.Writer
<!-- END KEY -->
<!-- BEGIN DATA -->
用于写入已过滤的字符流的抽象类。抽象类 <code>FilterWriter</code> 自身提供了一些将所有请求传递给所包含的流的默认方法。<code>FilterWriter</code> 的子类应重写这些方法中的一些方法，并且还可以提供一些额外的方法和字段。

@version 	1.18, 05/11/17
@author	Mark Reinhold
@since	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.io.Writer java.io.FilterWriter.out
<!-- END KEY -->
<!-- BEGIN DATA -->
底层字符输出流。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.io.FilterWriter(Writer out)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 filtered writer。

@param out  提供底层流的 Writer 对象。
@throws  NullPointerException 如果 <code>out</code> 为 <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.FilterWriter.write(int c) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写入单个字符。

@exception  IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.FilterWriter.write(char[] cbuf, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符写入数组的某一部分。

@param  cbuf  要写入的字符缓冲区
@param  off   偏移量，从该处开始读取字符
@param  len   要写入字符的数量

@exception  IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.FilterWriter.write(String str, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写入一部分字符串。

@param  str  要写入的字符串
@param  off   偏移量，从该处开始读取字符
@param  len   要写入字符的数量

@exception  IOException 如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.FilterWriter.flush() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
刷新该流的缓冲。

@exception  IOException 如果发生 I/O 错误

<!-- END DATA -->
