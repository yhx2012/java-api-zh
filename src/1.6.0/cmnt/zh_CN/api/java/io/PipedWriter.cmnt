<!-- BEGIN KEY -->
public class java.io.PipedWriter extends java.io.Writer
<!-- END KEY -->
<!-- BEGIN DATA -->
传送的字符输出流。

@version 	1.19, 06/06/28
@author	Mark Reinhold
@since	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.PipedWriter(PipedReader snk) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建传送 writer，使其连接到指定的传送 reader。写入此流的数据字符稍后将用作 <code>snk</code> 的输入。

@param      snk   连接的传送 reader。
@exception  IOException  如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.PipedWriter()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个尚未连接到传送 reader 的传送 writer。必须在使用之前将其连接到传送 reader（既可由接收方连接，也可由发送方连接）。 

@see     java.io.PipedReader#connect(java.io.PipedWriter)
@see     java.io.PipedWriter#connect(java.io.PipedReader)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.io.PipedWriter.connect(PipedReader snk) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此传送 writer 连接到接收方。如果此对象已经连接到其他某个传送 reader，则抛出 <code>IOException</code>。
 <p>
如果 <code>snk</code> 为未连接的传送 reader，而 <code>src</code> 为未连接的传送 writer，则可以通过以下任一调用使其连接：
 <blockquote><pre>
 src.connect(snk)</pre></blockquote>
或：
 <blockquote><pre>
 snk.connect(src)</pre></blockquote>
这两个调用的效果相同。

@param      snk   连接的传送 reader。
@exception  IOException  如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.PipedWriter.write(int c) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的 <code>char</code> 写入管道输出流。如果某个线程正从连接的管道输入流读取数据字符，但该线程不再处于活动状态，则抛出 <code>IOException</code>。
 <p>
实现 <code>Writer</code> 的 <code>write</code> 方法。

@param      c   要写入的 <code>char</code>。
@exception  IOException  如果管道<a href=PipedOutputStream.html#BROKEN> <code>损坏</code></a>、{@link #connect(java.io.PipedReader) 未连接}、关闭或发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.PipedWriter.write(char[] cbuf, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>len</code> 字符从指定初始偏移量为 <code>off</code> 的字符数组写入到此管道输出流。在将所有字符写入输出流之前，此方法将阻塞。如果某个线程正从连接的管道输入流读取数据字符，但该线程不再处于活动状态，则抛出 <code>IOException</code>。

@param      cbuf  数据。
@param      off   数据中的初始偏移量。
@param      len   要写入的字符数。
@exception  IOException  如果管道<a href=PipedOutputStream.html#BROKEN> <code>损坏</code></a>、{@link #connect(java.io.PipedReader) 未连接}、关闭或发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.io.PipedWriter.flush() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
刷新此输出流并强制写出所有缓冲的输出字符。这将通知所有 reader，告知它们管道中的字符处于等待中。

@exception  IOException  如果管道关闭，或者发生 I/O 错误。
<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.PipedWriter.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此管道输出流并释放与此流相关的所有系统资源。此流可能无法再用于写入字符。

@exception  IOException  如果发生 I/O 错误。

<!-- END DATA -->
