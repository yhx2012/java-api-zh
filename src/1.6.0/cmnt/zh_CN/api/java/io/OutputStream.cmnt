<!-- BEGIN KEY -->
public abstract class java.io.OutputStream extends java.lang.Object implements java.io.Closeable, java.io.Flushable
<!-- END KEY -->
<!-- BEGIN DATA -->
此抽象类是表示输出字节流的所有类的超类。输出流接受输出字节并将这些字节发送到某个接收器。
 <p>
需要定义 <code>OutputStream</code> 子类的应用程序必须始终提供至少一种可写入一个输出字节的方法。

@author  Arthur van Hoff
@version 1.29, 04/21/04
@see     java.io.BufferedOutputStream
@see     java.io.ByteArrayOutputStream
@see     java.io.DataOutputStream
@see     java.io.FilterOutputStream
@see     java.io.InputStream
@see     java.io.OutputStream#write(int)
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.io.OutputStream.write(int b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的字节写入此输出流。<code>write</code> 的常规协定是：向输出流写入一个字节。要写入的字节是参数 <code>b</code> 的八个低位。<code>b</code> 的 24 个高位将被忽略。
 <p>
<code>OutputStream</code> 的子类必须提供此方法的实现。 

@param      b   <code>字节</code>
@exception  IOException 如果发生 I/O 错误。尤其是，如果已关闭输出流，则可能抛出 <code>IOException</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.OutputStream.write(byte[] b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将 <code>b.length</code> 个字节从指定的 byte 数组写入此输出流。<code>write(b)</code> 的常规协定是：应该与调用 <code>write(b, 0, b.length)</code> 的效果完全相同。

@param      b 数据。
@exception  IOException 如果发生 I/O 错误。
@see        java.io.OutputStream#write(byte[], int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.OutputStream.write(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定 byte 数组中从偏移量 <code>off</code> 开始的 <code>len</code> 个字节写入此输出流。<code>write(b, off, len)</code> 的常规协定是：将数组 <code>b</code> 中的某些字节按顺序写入输出流；元素 <code>b[off]</code> 是此操作写入的第一个字节，<code>b[off+len-1]</code> 是此操作写入的最后一个字节。
 <p>
<code>OutputStream</code> 的 <code>write</code> 方法对每个要写出的字节调用一个参数的 write 方法。建议子类重写此方法并提供更有效的实现。 
 <p>
如果 <code>b</code> 为 <code>null</code>，则抛出 <code>NullPointerException</code>。
 <p>
如果 <code>off</code> 为负，或 <code>len</code> 为负，或者 <code>off+len</code> 大于数组 <code>b</code> 的长度，则抛出 <tt>IndexOutOfBoundsException</tt>。

@param      b     数据。
@param      off   数据中的初始偏移量。
@param      len  要写入的字节数。
@exception  IOException 如果发生 I/O 错误。尤其是，如果关闭了输出流，则抛出 <code>IOException</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.OutputStream.flush() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
刷新此输出流并强制写出所有缓冲的输出字节。<code>flush</code> 的常规协定是：如果此输出流的实现已经缓冲了以前写入的任何字节，则调用此方法指示应将这些字节立即写入它们预期的目标。
 <p>
如果此流的预期目标是由基础操作系统提供的一个抽象（如一个文件），则刷新此流只能保证将以前写入到流的字节传递给操作系统进行写入，但不保证能将这些字节实际写入到物理设备（如磁盘驱动器）。
 <p>
<code>OutputStream</code> 的 <code>flush</code> 方法不执行任何操作。

@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.OutputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此输出流并释放与此流有关的所有系统资源。<code>close</code> 的常规协定是：该方法将关闭输出流。关闭的流不能执行输出操作，也不能重新打开。
 <p>
<code>OutputStream</code> 的 <code>close</code> 方法不执行任何操作。

@exception  IOException 如果发生 I/O 错误。

<!-- END DATA -->
