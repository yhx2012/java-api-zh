<!-- BEGIN KEY -->
public class java.io.LineNumberInputStream extends java.io.FilterInputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
此类是一个输入流过滤器，它提供跟踪当前行号的附加功能。 
 <p>
行是以回车符 (<code>'\r'</code>)、换行符 (<code>'\n'</code>) 或回车符后面紧跟换行符结尾的字节序列。在所有这三种情况下，都以单个换行符形式返回行终止字符。
 <p>
行号以 <code>0</code> 开头，并在 <code>read</code> 返回换行符时递增 <code>1</code>。

@author     Arthur van Hoff
@version    1.27, 05/18/04
@see        java.io.LineNumberReader
@since      JDK1.0
@deprecated 此类错误假定字节能充分表示字符。从 JDK&nbsp;1.1 开始，对字符流操作的首选方法是通过新字符流类（其中包括计算行号的类）进行操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.LineNumberInputStream(InputStream in)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造从指定输入流读取其输入的新行号输入流。 

@param      in   基础输入流。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.LineNumberInputStream.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从此输入流读取下一个数据字节。返回 <code>0</code> 到 <code>255</code> 范围内的 <code>int</code> 字节值。如果因流的末尾已到达而没有可用的字节，则返回值 <code>-1</code>。在输入数据可用、检测到流的末尾或者抛出异常前，此方法一直阻塞。 
 <p>
<code>LineNumberInputStream</code> 的 <code>read</code> 方法调用基础输入流的 <code>read</code> 方法。它检查输入中的回车和换行符，并相应地修改当前行号。回车符或后跟换行符的回车两者都可转换为单个换行符。 

@return     下一个数据字节，如果已到达此流的末尾，则返回 <code>-1</code>。
@exception  IOException  如果发生 I/O 错误。
@see        java.io.FilterInputStream#in
@see        java.io.LineNumberInputStream#getLineNumber()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.LineNumberInputStream.read(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将最多 <code>len</code> 个数据字节从此输入流读入 byte 数组。在某个输入可用前，此方法一直阻塞。
 <p>
<code>LineNumberInputStream</code> 的 <code>read</code> 方法重复调用 0 参数的 <code>read</code> 方法来填充 byte 数组。

@param      b     读入数据的缓冲区。
@param      off   数据的初始偏移量。
@param      len   读取的最大字节数。
@return     读入缓冲区的总字节数，如果由于已到达此流的末尾而不再有数据，则返回 <code>-1</code>。
@exception  IOException  如果发生 I/O 错误。
@see        java.io.LineNumberInputStream#read()

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.io.LineNumberInputStream.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
跳过和放弃此输入流中的 <code>n</code> 个数据字节。出于各种原因，该 <code>skip</code> 方法跳过某些较小的字节数（可能是 <code>0</code>）后结束。返回跳过的实际字节数。如果 <code>n</code> 为负，则不跳过任何字节。
 <p>
<code>LineNumberInputStream</code> 的 <code>skip</code> 方法创建 byte 数组，然后重复向其读入，直到读够 <code>n</code> 个字节或已到达流的末尾为止。 

@param      n   要跳过的字节数。
@return     跳过的实际字节数。
@exception  IOException  如果发生 I/O 错误。
@see        java.io.FilterInputStream#in

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.LineNumberInputStream.setLineNumber(int lineNumber)
<!-- END KEY -->
<!-- BEGIN DATA -->
将行号设置为指定参数。 

@param      lineNumber   新行号。
@see #getLineNumber

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.LineNumberInputStream.getLineNumber()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前行号。

@return     当前行号。
@see #setLineNumber

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.LineNumberInputStream.available() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
无阻塞情况下返回可以从此输入流中读取的字节数。 
 <p>
注意，如果基础输入流能够在无阻塞情况下提供 <i>k</i> 个输入字符，则 <code>LineNumberInputStream</code> 可以保证在无阻塞情况下只提供 <i>k</i>/2 个字符，因为基础输入流中的 <i>k</i> 个字符可能由 <i>k</i>/2 个 <code>'\r'</code> 和 <code>'\n'</code> 对组成，这些对只能转换为 <i>k</i>/2 <code>'\n'</code> 个字符。 

@return     无阻塞情况下可以从此输入流读取的字节数。
@exception  IOException  如果发生 I/O 错误。
@see        java.io.FilterInputStream#in

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.LineNumberInputStream.mark(int readlimit)
<!-- END KEY -->
<!-- BEGIN DATA -->
在此输入流中标记当前的位置。对 <code>reset</code> 方法的后续调用会在最后标记的位置重新定位此流，以使后续读取重新读取相同的字节。
 <p>
<code>LineNumberInputStream</code> 的 <code>mark</code> 方法会记住 private 变量中的当前行号，然后调用基础输入流的 <code>mark</code> 方法。 

@param   readlimit   在标记位置失效前可以读取字节的最大限制。
@see     java.io.FilterInputStream#in
@see     java.io.LineNumberInputStream#reset()

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.LineNumberInputStream.reset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此流重新定位到对此输入流最后调用 <code>mark</code> 方法时的位置。 
 <p>
<code>LineNumberInputStream</code> 的 <code>reset</code> 方法会重新将行号设置为调用 <code>mark</code> 方法时的行号，然后调用基础输入流的 <code>reset</code> 方法。 
 <p>
在需要提前从流中读取少量数据以查看流内容的情况下，可以使用流标记。通常，调用某些常规解析器可以非常方便地完成这项工作。如果流属于解析器处理的类型，则会非常顺利地完成。如果流不属于该类型，则解析器应该在其失败时抛出异常，如果这是在 readlimit 字节内发生的，它将允许使用外部代码重新设置该流并尝试其他解析器。

@exception  IOException  如果发生 I/O 错误。
@see        java.io.FilterInputStream#in
@see        java.io.LineNumberInputStream#mark(int)

<!-- END DATA -->
