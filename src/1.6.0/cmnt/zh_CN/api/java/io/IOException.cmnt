<!-- BEGIN KEY -->
public class java.io.IOException extends java.lang.Exception
<!-- END KEY -->
<!-- BEGIN DATA -->
当发生某种 I/O 异常时，抛出此异常。此类是失败或中断的 I/O 操作生成的异常的通用类。

@author  unascribed
@version 1.22, 12/19/03
@see     java.io.InputStream
@see     java.io.OutputStream
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.IOException()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 {@code IOException}，使用 {@code null} 作为其错误详细消息。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.IOException(String message)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带指定详细消息的 {@code IOException}。

@param   message
        详细消息（保存此消息，以便 {@link #getMessage()} 方法稍后获得该消息）

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.IOException(String message, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造带有指定详细消息和 cause 的 {@code IOException}。

 <p> 注意，关联 {@code cause} 的详细消息<i>不会</i> 自动合并到此异常的详细消息中。

 @param message
        详细消息（保存此消息，以便 {@link #getMessage()} 方法稍后获得该消息）

 @param cause
        cause（保存此 cause，以便 {@link #getCause()} 方法稍后获得它）。（允许使用 null 值，它表示 cause 不存在或未知。）

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.IOException(Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 {@code IOException}，使其具有指定的 cause 以及详细消息 {@code (cause==null ? null : cause.toString())}（通常包含类和 {@code cause} 的详细消息）。对于与其他 throwable 的包装器没有多大差别的 IO 异常，此构造方法很有用。

 @param cause
        cause（保存此 cause，以便 {@link #getCause()} 方法稍后获得它）。（允许使用 null 值，它表示 cause 不存在或未知。）

 @since 1.6

<!-- END DATA -->
