<!-- BEGIN KEY -->
public class java.io.LineNumberReader extends java.io.BufferedReader
<!-- END KEY -->
<!-- BEGIN DATA -->
跟踪行号的缓冲字符输入流。此类定义了方法 {@link #setLineNumber(int)} 和 {@link #getLineNumber()}，它们可分别用于设置和获取当前行号。 
 <P>
默认情况下，行编号从 0 开始。该行号随数据读取在每个<a href="#lt">行结束符</a>处递增，并且可以通过调用 <CODE>setLineNumber(int)</CODE> 更改行号。但要注意的是，<CODE>setLineNumber(int)</CODE> 不会实际更改流中的当前位置；它只更改将由 <tt>getLineNumber()</tt> 返回的值。 
 <P>
可认为行在遇到以下符号之一时<a name="lt">结束</a>：换行符（'\n'）、回车符（'\r'）、回车后紧跟换行符。

@version 	1.20, 03/12/19
@author	Mark Reinhold
@since	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.LineNumberReader(Reader in)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认输入缓冲区的大小创建新的行编号 reader。

@param in  提供底层流的 Reader 对象

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.LineNumberReader(Reader in, int sz)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建新的行编号 reader，将字符读入给定大小的缓冲区。

@param in  提供底层流的 Reader 对象
@param sz  指定缓冲区大小的 int 值

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.LineNumberReader.setLineNumber(int lineNumber)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置当前行号。

@param lineNumber  指定行号的 int 值
@see #getLineNumber

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.LineNumberReader.getLineNumber()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得当前行号。

@return 当前行号
@see #setLineNumber

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.LineNumberReader.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取单个字符。<a href="#lt">行结束符</a>被压缩为一个换行（'\n'）字符。无论何时读取行结束符，当前行号将加 1。

@return 读取的字符；如果已到达流的末尾，则返回 -1

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.LineNumberReader.read(char[] cbuf, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符读入数组中的某一部分。无论何时读取行结束符，当前行号都将加 1。

@param      cbuf  目标缓冲区
@param      off   开始存储字符处的偏移量
@param      len   要读取的最多字符数

@return     读取的字节数量，如果已到达流的末尾，则返回 -1

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.io.LineNumberReader.readLine() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取文本行。无论何时读取行结束符，当前行号都将加 1。

@return     包含行内容的字符串，不包括任何<a href="#lt">行结束符</a>；如果已到达流的末尾，则返回 <tt>null</tt>

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.io.LineNumberReader.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
跳过字符。

@param  n  要跳过的字符数

@return    实际跳过的字符数

@exception  IOException  如果发生 I/O 错误
@exception  IllegalArgumentException 如果 <tt>n</tt> 为负

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.LineNumberReader.mark(int readAheadLimit) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
标记该流中的当前位置。对 reset() 的后续调用会尝试重新将流定位到此点，还将相应地重新设置行号。

@param  readAheadLimit  在仍保留该标记的情况下，对可读取字符数量的限制。在读取这样多的字符后，尝试重置流可能会失败。

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.LineNumberReader.reset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将该流重新设置为最新的标记。

@exception  IOException  如果该流未被标记，或者该标记已失效

<!-- END DATA -->
