<!-- BEGIN KEY -->
public class java.io.StringReader extends java.io.Reader
<!-- END KEY -->
<!-- BEGIN DATA -->
其源为一个字符串的字符流。

@version 	1.26, 05/11/17
@author	Mark Reinhold
@since	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.StringReader(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新字符串 reader。

@param s  提供字符流的字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.StringReader.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取单个字符。

@return     读取的字符，如果已到达流的末尾，则返回 -1

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.StringReader.read(char[] cbuf, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符读入数组的某一部分。

@param      cbuf  目标缓冲区
@param      off   开始写入字符处的偏移量
@param      len   要读取的最多字符数

@return     读取的字符数，如果已到达流的末尾，则返回 -1

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.io.StringReader.skip(long ns) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
跳过流中指定数量的字符。返回跳过的字符数。

<p><code>ns</code> 参数可能为负数，即便 {@link Reader} 超类的 <code>skip</code> 方法在此情况下会抛出一个异常。<code>ns</code> 为负值导致此流向后跳读。负返回值指示向后跳读。向后跳读不可能超过字符串的开头。

<p>如果读取或跳读了整个字符串，则此方法无效且始终返回 0。

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.StringReader.ready() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
判断此流是否已经准备好用于读取。

@return 如果保证下一个 read() 不阻塞输入，则返回 True

@exception  IOException  如果该流已关闭

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.StringReader.markSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
判断此流是否支持 mark() 操作以及支持哪一项操作。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StringReader.mark(int readAheadLimit) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
标记流中的当前位置。对 reset() 的后续调用会将该流重新定位到此点。

@param  readAheadLimit  在仍保留该标记的情况下，对可读取字符数量的限制。由于该流的输入来自一个字符串，不存在实际的限制，因此，此参数决不能为负数，否则将被忽略。

@exception  IllegalArgumentException  如果 readAheadLimit < 0
@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StringReader.reset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将该流重置为最新的标记，如果从未标记过，则将其重置到该字符串的开头。

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StringReader.close()
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭该流并释放与之关联的所有系统资源。在关闭该流后，再调用 read()、ready()、mark() 或 reset() 将抛出 IOException。关闭以前关闭的流无效。

<!-- END DATA -->
