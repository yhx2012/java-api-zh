<!-- BEGIN KEY -->
public class java.io.StringWriter extends java.io.Writer
<!-- END KEY -->
<!-- BEGIN DATA -->
一个字符流，可以用其回收在字符串缓冲区中的输出来构造字符串。
 <p>
关闭 <tt>StringWriter</tt> 无效。此类中的方法在关闭该流后仍可被调用，而不会产生任何 <tt>IOException</tt>。 

@version 	1.26, 05/11/17
@author	Mark Reinhold
@since	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.StringWriter()
<!-- END KEY -->
<!-- BEGIN DATA -->
使用默认初始字符串缓冲区大小创建一个新字符串 writer。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.StringWriter(int initialSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定初始字符串缓冲区大小创建一个新字符串 writer。

@param initialSize  在此缓冲区自动扩展前适合它的 <tt>char</tt> 值数。

@throws IllegalArgumentException  如果 <tt>initialSize</tt> 为负

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StringWriter.write(int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
写入单个字符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StringWriter.write(char[] cbuf, int off, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
写入字符数组的某一部分。

@param  cbuf  字符数组
@param  off   开始写入字符处的偏移量
@param  len   要写入的字符数

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StringWriter.write(String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
写入一个字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StringWriter.write(String str, int off, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
写入字符串的某一部分。

@param  str  要写入的字符串
@param  off  开始写入字符处的偏移量
@param  len  要写入的字符数

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.StringWriter java.io.StringWriter.append(CharSequence csq)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定的字符序列添加到此 writer。

<p> 以 <tt>out.append(csq)</tt> 的形式调用此方法，行为与以下调用完全相同：

 <pre>
     out.write(csq.toString()) </pre>

<p> 可能不添加整个序列，也可能添加，具体取决于字符序列 <tt>csq</tt> 的 <tt>toString</tt> 指定。例如，调用一个字符缓冲区的 <tt>toString</tt> 方法将返回一个子序列，其内容取决于缓冲区的位置和限制。

@param  csq 要添加的字符串序列。如果 <tt>csq</tt> 为 <tt>null</tt>，则向此 writer 添加四个字符 <tt>"null"</tt>。

@return  此 writer

@since  1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.StringWriter java.io.StringWriter.append(CharSequence csq, int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定字符序列的子序列添加到此 writer。

<p> 当 <tt>csq</tt> 不为 <tt>null</tt> 时，调用该方法的 <tt>out.append(csq、 start、 end)</tt> 形式，行为与以下调用完全相同：

 <pre>
     out.write(csq.subSequence(start, end).toString()) </pre>

@param  csq 子序列将被添加的字符序列。如果 <tt>csq</tt> 为 <tt>null</tt>，则添加四个字符 <tt>"null"</tt>，就好像 <tt>csq</tt> 包含它们一样。

@param  start 子序列中第一个字符的索引

@param  end 子序列中最后一个字符后面的字符的索引

@return  此 writer

@throws  IndexOutOfBoundsException 如果 <tt>start</tt> 或 <tt>end</tt> 为负，而 <tt>start</tt> 大于 <tt>end</tt> 或者 <tt>end</tt> 大于 <tt>csq.length()</tt>。

@since  1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.StringWriter java.io.StringWriter.append(char c)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定字符添加到此 writer。 

<p> 以 <tt>out.append(c)</tt> 的形式调用此方法，行为与以下调用完全相同：

 <pre>
     out.write(c) </pre>

@param  c 要添加的 16 位字符

@return  此 writer


@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.io.StringWriter.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
以字符串的形式返回该缓冲区的当前值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer java.io.StringWriter.getBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回该字符串缓冲区本身。

@return 保存当前缓冲区值的 StringBuffer。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StringWriter.flush()
<!-- END KEY -->
<!-- BEGIN DATA -->
刷新该流的缓冲。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StringWriter.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭 <tt>StringWriter</tt> 无效。此类中的方法在关闭该流后仍可被调用，而不会产生任何 <tt>IOException</tt>。 

<!-- END DATA -->
