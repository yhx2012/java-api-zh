<!-- BEGIN KEY -->
public class java.io.BufferedReader extends java.io.Reader
<!-- END KEY -->
<!-- BEGIN DATA -->
从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取。

<p> 可以指定缓冲区的大小，或者可使用默认的大小。大多数情况下，默认值就足够大了。

<p> 通常，Reader 所作的每个读取请求都会导致对底层字符或字节流进行相应的读取请求。因此，建议用 BufferedReader 包装所有其 read() 操作可能开销很高的 Reader（如 FileReader 和 InputStreamReader）。例如，

 <pre>
 BufferedReader in
   = new BufferedReader(new FileReader(&quot;foo.in&quot;));
 </pre>

将缓冲指定文件的输入。如果没有缓冲，则每次调用 read() 或 readLine() 都会导致从文件中读取字节，并将其转换为字符后返回，而这是极其低效的。 

<p> 通过用合适的 BufferedReader 替代每个 DataInputStream，可以对将 DataInputStream 用于文字输入的程序进行本地化。

@see FileReader
@see InputStreamReader

@version 	1.33, 04/01/12
@author	Mark Reinhold
@since	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.BufferedReader(Reader in, int sz)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个使用指定大小输入缓冲区的缓冲字符输入流。

@param  in   一个 Reader
@param  sz   输入缓冲区的大小

@exception IllegalArgumentException 如果 sz &lt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.BufferedReader(Reader in)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个使用默认大小输入缓冲区的缓冲字符输入流。

@param  in   一个 Reader

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.BufferedReader.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取单个字符。

@return 作为一个整数（其范围从 0 到 65535 (<tt>0x00-0xffff</tt>)）读入的字符，如果已到达流末尾，则返回 -1 
@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.BufferedReader.read(char[] cbuf, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将字符读入数组的某一部分。

<p> 此方法实现 <code>{@link Reader}</code> 类相应 <code>{@link Reader#read(char[], int, int) read}</code> 方法的常规协定。另一个便捷之处在于，它将通过重复地调用底层流的 <code>read</code> 方法，尝试读取尽可能多的字符。这种迭代的 <code>read</code> 会一直继续下去，直到满足以下条件之一： <ul>

<li> 已经读取了指定的字符数，

<li> 底层流的 <code>read</code> 方法返回 <code>-1</code>，指示文件末尾（end-of-file），或者

<li> 底层流的 <code>ready</code> 方法返回 <code>false</code>，指示将阻塞后续的输入请求。

</ul> 如果第一次对底层流调用 <code>read</code> 返回 <code>-1</code>（指示文件末尾），则此方法返回 <code>-1</code>。否则此方法返回实际读取的字符数。

<p> 鼓励（但不是必须）此类的各个子类以相同的方式尝试读取尽可能多的字符。

<p> 一般来说，此方法从此流的字符缓冲区中获得字符，根据需要从底层流中填充缓冲区。但是，如果缓冲区为空、标记无效，并且所请求的长度至少与缓冲区相同，则此方法将直接从底层流中将字符读取到给定的数组中。因此多余的 <code>BufferedReader</code> 将不必复制数据。

@param      cbuf  目标缓冲区
@param      off   开始存储字符处的偏移量
@param      len   要读取的最大字符数

@return     读取的字符数，如果已到达流末尾，则返回 -1

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.io.BufferedReader.readLine() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取一个文本行。通过下列字符之一即可认为某行已终止：换行 ('\n')、回车 ('\r') 或回车后直接跟着换行。

@return     包含该行内容的字符串，不包含任何行终止符，如果已到达流末尾，则返回 null

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.io.BufferedReader.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
跳过字符。

@param  n  要跳过的字符数

@return    实际跳过的字符数

@exception  IllegalArgumentException  如果 <code>n</code> 为负。
@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.BufferedReader.ready() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
判断此流是否已准备好被读取。如果缓冲区不为空，或者底层字符流已准备就绪，则缓冲的字符流准备就绪。

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.BufferedReader.markSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
判断此流是否支持 mark() 操作（它一定支持）。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.BufferedReader.mark(int readAheadLimit) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
标记流中的当前位置。对 reset() 的后续调用将尝试将该流重新定位到此点。

@param  readAheadLimit  在仍保留该标记的情况下，对可读取字符数量的限制。在读取达到或超过此限制的字符后，尝试重置流可能会失败。限制值大于输入缓冲区的大小将导致分配一个新缓冲区，其大小不小于该限制值。因此应该小心使用较大的值。

@exception  IllegalArgumentException  如果 readAheadLimit &lt; 0
@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.BufferedReader.reset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将流重置到最新的标记。

@exception  IOException  如果从未标记过该流，或者标记已失效。

<!-- END DATA -->
