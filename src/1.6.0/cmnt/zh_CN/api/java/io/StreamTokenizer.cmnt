<!-- BEGIN KEY -->
public class java.io.StreamTokenizer extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>StreamTokenizer</code> 类获取输入流并将其解析为&ldquo;标记&rdquo;，允许一次读取一个标记。解析过程由一个表和许多可以设置为各种状态的标志控制。该流的标记生成器可以识别标识符、数字、引用的字符串和各种注释样式。
 <p>
从输入流读取的每个字节都被视为一个字符，范围在 <code>'\u0000'</code> 到 <code>'\u00FF'</code> 之间。字符值用于查找该字符的五个可能属性：<i>空白</i>、<i>字母</i>、<i>数字</i>、<i>字符串引号</i> 和<i>注释字符</i>。每个字符都可以有零个或多个这样的属性。
 <p>
另外，一个实例还有四个标志。这些标志指示：
 <ul>
<li>行结束符是作为标记返回，还是被视为仅用于分隔标记的空白。
<li>是标识还是跳过 C 样式注释。
<li>是标识还是跳过 C++ 样式注释。
<li>是否将标识符的字符转换为小写字母。
 </ul>
 <p>
典型的应用程序首先构造此类的一个实例，建立一个语法表，然后重复循环，调用该循环的每个迭代中的 <code>nextToken</code> 方法，直到返回值 <code>TT_EOF</code>。

@author  James Gosling
@version 1.44, 05/18/04
@see     java.io.StreamTokenizer#nextToken()
@see     java.io.StreamTokenizer#TT_EOF
@since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.StreamTokenizer.ttype
<!-- END KEY -->
<!-- BEGIN DATA -->
在调用 <code>nextToken</code> 方法之后，此字段将包含刚读取的标记的类型。对于单个字符标记，其值是转换为一个整数的单一字符。对于引用的字符串标记，其值是引号字符。否则，其值是下列值之一：
 <ul>
<li><code>TT_WORD</code> 指示该标记是一个文字。
<li><code>TT_NUMBER</code> 指示该标记是一个数字。
<li><code>TT_EOL</code> 指示已读到行的末尾。如果已使用参数 <code>true</code> 调用 <code>eolIsSignificant</code> 方法，则该字段只能使用此值。
<li><code>TT_EOF</code> 指示已到达输入流的末尾。
 </ul>
 <p>
此字段的初始值为 -4。

@see     java.io.StreamTokenizer#eolIsSignificant(boolean)
@see     java.io.StreamTokenizer#nextToken()
@see     java.io.StreamTokenizer#quoteChar(int)
@see     java.io.StreamTokenizer#TT_EOF
@see     java.io.StreamTokenizer#TT_EOL
@see     java.io.StreamTokenizer#TT_NUMBER
@see     java.io.StreamTokenizer#TT_WORD

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.io.StreamTokenizer.TT_EOF
<!-- END KEY -->
<!-- BEGIN DATA -->
指示已读到流末尾的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.io.StreamTokenizer.TT_EOL
<!-- END KEY -->
<!-- BEGIN DATA -->
指示已读到行末尾的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.io.StreamTokenizer.TT_NUMBER
<!-- END KEY -->
<!-- BEGIN DATA -->
指示已读到一个数字标记的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.io.StreamTokenizer.TT_WORD
<!-- END KEY -->
<!-- BEGIN DATA -->
指示已读到一个文字标记的常量。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.io.StreamTokenizer.sval
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前标记是一个文字标记，则此字段包含一个给出该文字标记的字符的字符串。当前标记是一个引用的字符串标记时，此字段将包含该字符串的正文。
 <p>
<code>ttype</code> 字段的值是 <code>TT_WORD</code> 时，当前标记将是一个文字。<code>ttype</code> 字段的值是一个引号字符时，当前标记将是一个引用的字符串标记。
 <p>
此字段的初始值为 null。

@see     java.io.StreamTokenizer#quoteChar(int)
@see     java.io.StreamTokenizer#TT_WORD
@see     java.io.StreamTokenizer#ttype

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.io.StreamTokenizer.nval
<!-- END KEY -->
<!-- BEGIN DATA -->
如果当前标记是一个数字，则此字段将包含该数字的值。<code>ttype</code> 字段的值是 <code>TT_NUMBER</code> 时，当前标记将是一个数字。
 <p>
此字段的初始值为 0.0。

@see     java.io.StreamTokenizer#TT_NUMBER
@see     java.io.StreamTokenizer#ttype

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.StreamTokenizer(InputStream is)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个解析指定输入流的流标记生成器。该流标记生成器初始化为以下默认状态：
 <ul>
<li>从 <code>'A'</code> 到 <code>'Z'</code>、从 <code>'a'</code> 到 <code>'z'</code> 以及从 <code>'\u00A0'</code> 到 <code>'\u00FF'</code> 的所有字节值都被视为字母。
<li>从 <code>'\u0000'</code> 到 <code>'\u0020'</code> 的所有字节值都被视为空白。
<li><code>'/'</code> 是注释字符。
<li>单引号 <code>'\''</code> 和双引号 <code>'&quot;'</code> 字符串引用字符。
<li>数字被解析。
<li>行的末尾被视为空白，而不视为分隔标记。
<li>C 样式和 C++ 样式的注释不被识别。
 </ul>

@deprecated 从 JDK 版本 1.1 开始，标记输入流的首选方法是将其转换为一个字符流，例如：
 <blockquote><pre>
   Reader r = new BufferedReader(new InputStreamReader(is));
   StreamTokenizer st = new StreamTokenizer(r);
 </pre></blockquote>

@param      is        输入流。
@see        java.io.BufferedReader
@see        java.io.InputStreamReader
@see        java.io.StreamTokenizer#StreamTokenizer(java.io.Reader)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.StreamTokenizer(Reader r)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建解析给定字符流的标记生成器。

@param r  提供输入流的 Reader 对象。
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StreamTokenizer.resetSyntax()
<!-- END KEY -->
<!-- BEGIN DATA -->
重置此标记生成器的语法表，使所有字符都成为&ldquo;普通&rdquo;字符。有关普通字符的更多信息，请参阅 <code>ordinaryChar</code> 方法。

@see     java.io.StreamTokenizer#ordinaryChar(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StreamTokenizer.wordChars(int low, int hi)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定 <code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code> 范围中的所有字符 <i>c</i> 都是文字成分。文字标记由一个文字成分后跟零或更多文字成分或数字成分组成。

@param   low   该范围的低端。
@param   hi    该范围的高端。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StreamTokenizer.whitespaceChars(int low, int hi)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定 <code>low&#xA0;&lt;=&#xA0;<i>c</i>&#xA0;&lt;=&#xA0;high</code> 范围中的所有字符 <i>c</i> 都是空白字符。空白字符仅用于分隔输入流中的标记。

<p>指定范围中字符串的任何其他属性设置都被清除。

@param   low   该范围的低端。
@param   hi    该范围的高端。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StreamTokenizer.ordinaryChars(int low, int hi)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定 <code>low&#xA0;&lt;=&#xA0;<i>c</i>&#xA0;&lt;=&#xA0;high</code> 范围中的所有字符 <i>c</i> 在此标记生成器中都是&ldquo;普通&rdquo;字符。关于普通字符的更多信息，请参见 <code>ordinaryChar</code> 方法。

@param   low   该范围的低端。
@param   hi    该范围的高端。
@see     java.io.StreamTokenizer#ordinaryChar(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StreamTokenizer.ordinaryChar(int ch)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定字符参数在此标记生成器中是&ldquo;普通&rdquo;字符。它可以移除该字符的任何特殊含意，如注释字符、文字元素、字符串分隔符、空白或数字字符。在解析器遇到此类字符时，解析器会将其视为单一字符标记，并将 <code>ttype</code> 字段设置为该字符的值。

<p>将行结束符字符变为&ldquo;普通&rdquo;字符会妨碍 <code>StreamTokenizer</code> 计算行数的能力。<code>lineno</code> 方法将不再能够在其行计数中反映此类结束符字符的存在。

@param   ch   字符。
@see     java.io.StreamTokenizer#ttype

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StreamTokenizer.commentChar(int ch)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定该字符参数启动一个单行注释。从注释字符到行末尾的所有字符均被此流标记生成器忽略。

<p>指定字符的任何其他属性设置均被清除。

@param   ch   字符。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StreamTokenizer.quoteChar(int ch)
<!-- END KEY -->
<!-- BEGIN DATA -->
指定此字符的匹配对分隔此标记生成器中的字符串常量。
 <p>
当 <code>nextToken</code> 方法遇到一个字符串常量时，<code>ttype</code> 字段将被设置为该字符串分隔符，<code>sval</code> 字段被设置为此字符串的正文。
 <p>
如果遇到字符串引号字符，则将识别一个字符串，该字符串包括字符串引号字符（不包括）到下一个相同的字符串引号字符（不包括）之间、或者到行结束符或文件末尾的所有字符。常规的转义序列（如 <code>&quot;\n&quot;</code> 和 <code>&quot;\t&quot;</code>）将被识别，并在解析该字符串时转换为单一字符。

<p>指定字符的任何其他属性设置均被清除。

@param   ch   字符。
@see     java.io.StreamTokenizer#nextToken()
@see     java.io.StreamTokenizer#sval
@see     java.io.StreamTokenizer#ttype

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StreamTokenizer.parseNumbers()
<!-- END KEY -->
<!-- BEGIN DATA -->
指定此标记生成器应解析的数字。已修改此标记生成器的语法表，使以下十二个字符：
 <blockquote><pre>
      0 1 2 3 4 5 6 7 8 9 . -
 </pre></blockquote>
 <p>
都具有&ldquo;数字&rdquo;属性。
 <p>
当解析器遇到具有双精度浮点数字格式的文字标记时，会将该标记视为数字而不是文字，方法是通过将 <code>ttype</code> 字段设置为值 <code>TT_NUMBER</code>，并将该标记的数字值放入 <code>nval</code> 字段。

@see     java.io.StreamTokenizer#nval
@see     java.io.StreamTokenizer#TT_NUMBER
@see     java.io.StreamTokenizer#ttype

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StreamTokenizer.eolIsSignificant(boolean flag)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定是否将行末尾视为标记。如果该标志参数为 true，则此标记生成器将行末尾视为标记；在读到行末尾时，<code>nextToken</code> 方法返回 <code>TT_EOL</code>，还将 <code>ttype</code> 字段设置为此值。
 <p>
一行是一个字符序列，以回车符 (<code>'\r'</code>) 或者以新行符 (<code>'\n'</code>) 结尾。另外，回车符后面紧跟新行符被视为一个单行末尾标记。
 <p>
如果此 <code>flag</code> 为 false，行末尾字符被视为空白并仅用作分隔标记。

@param   flag   为 <code>true</code> 指示行末尾字符为分隔标记；为 <code>false</code> 指示行末尾字符为空白。
@see     java.io.StreamTokenizer#nextToken()
@see     java.io.StreamTokenizer#ttype
@see     java.io.StreamTokenizer#TT_EOL

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StreamTokenizer.slashStarComments(boolean flag)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定标记生成器是否识别 C 样式注释。如果标志参数为 <code>true</code>，此流标记生成器识别 C 样式注释。后面出现的 <code>/*</code> 和 <code>*/</code> 之间的所有文本将被丢弃。
 <p>
如果此标志参数为 <code>false</code>，则不特殊对待 C 样式注释。

@param   flag   为 <code>true</code> 指示识别并忽略 C 样式注释。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StreamTokenizer.slashSlashComments(boolean flag)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定标记生成器是否识别 C++ 样式注释。如果标志参数为 <code>true</code>，此流标记生成器识别 C++ 样式注释。任何出现的两个连续斜线字符 (<code>'/'</code>) 均被视为一个注释的开始并一直延伸到行的末尾。
 <p>
如果此标志参数为 <code>false</code>，则不特殊对待 C++ 样式注释。

@param   flag 为 <code>true</code> 指示识别并忽略 C++ 样式注释。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StreamTokenizer.lowerCaseMode(boolean fl)
<!-- END KEY -->
<!-- BEGIN DATA -->
确定是否对文字标记自动使用小写字母。如果此标志参数为 <code>true</code>，则在此标记生成器的 <code>nextToken</code> 方法返回文字标记时（<code>ttype</code> 字段具有值 <code>TT_WORD</code>），<code>sval</code> 字段中的值为小写字母。
 <p>
如果此标志参数为 <code>false</code>，则 <code>sval</code> 字段未被修改。

@param   fl   为 <code>true</code> 指示所有文字标记应为小写字母。
@see     java.io.StreamTokenizer#nextToken()
@see     java.io.StreamTokenizer#ttype
@see     java.io.StreamTokenizer#TT_WORD

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.StreamTokenizer.nextToken() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
从此标记生成器的输入流中解析下一个标记。下一个标记的类型在 <code>ttype</code> 字段中返回。关于该标记的其他信息可能位于此标记生成器的 <code>nval</code> 字段或 <code>sval</code> 字段中。
 <p>
此类的典型客户机首先建立语法表，然后循环调用 nextToken 来解析后续标记，直到返回 TT_EOF。

@return     <code>ttype</code> 字段的值。
@exception  IOException  如果发生 I/O 错误。
@see        java.io.StreamTokenizer#nval
@see        java.io.StreamTokenizer#sval
@see        java.io.StreamTokenizer#ttype

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.StreamTokenizer.pushBack()
<!-- END KEY -->
<!-- BEGIN DATA -->
导致对此标记生成器的 <code>nextToken</code> 方法的下一个调用返回 <code>ttype</code> 字段中的当前值，而不修改 <code>nval</code> 或 <code>sval</code> 字段中的值。

@see     java.io.StreamTokenizer#nextToken()
@see     java.io.StreamTokenizer#nval
@see     java.io.StreamTokenizer#sval
@see     java.io.StreamTokenizer#ttype

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.StreamTokenizer.lineno()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前行号。

@return  此流标记生成器的当前行号。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.io.StreamTokenizer.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回当前流标记和在其上发生的行号的字符串表示形式。

<p>未指定返回的精确字符串，但可以将以下示例视为典型示例：

 <blockquote><pre>Token['a'], line 10</pre></blockquote>

@return  此标记的字符串表示形式
@see     java.io.StreamTokenizer#nval
@see     java.io.StreamTokenizer#sval
@see     java.io.StreamTokenizer#ttype

<!-- END DATA -->
