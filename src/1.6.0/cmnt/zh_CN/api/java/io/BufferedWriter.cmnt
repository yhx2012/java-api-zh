<!-- BEGIN KEY -->
public class java.io.BufferedWriter extends java.io.Writer
<!-- END KEY -->
<!-- BEGIN DATA -->
将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。

<p> 可以指定缓冲区的大小，或者接受默认的大小。在大多数情况下，默认值就足够大了。

<p> 该类提供了 newLine() 方法，它使用平台自己的行分隔符概念，此概念由系统属性 <tt>line.separator</tt> 定义。并非所有平台都使用新行符 ('\n') 来终止各行。因此调用此方法来终止每个输出行要优于直接写入新行符。

<p> 通常 Writer 将其输出立即发送到底层字符或字节流。除非要求提示输出，否则建议用 BufferedWriter 包装所有其 write() 操作可能开销很高的 Writer（如 FileWriters 和 OutputStreamWriters）。例如，

 <pre>
 PrintWriter out
   = new PrintWriter(new BufferedWriter(new FileWriter(&quot;foo.out&quot;)));
 </pre>

将缓冲 PrintWriter 对文件的输出。如果没有缓冲，则每次调用 print() 方法会导致将字符转换为字节，然后立即写入到文件，而这是极其低效的。

@see PrintWriter
@see FileWriter
@see OutputStreamWriter

@version 	1.26, 03/12/19
@author	Mark Reinhold
@since	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.BufferedWriter(Writer out)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个使用默认大小输出缓冲区的缓冲字符输出流。

@param  out  一个 Writer

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.BufferedWriter(Writer out, int sz)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个使用给定大小输出缓冲区的新缓冲字符输出流。

@param  out  一个 Writer
@param  sz   输出缓冲区的大小，是一个正整数

@exception IllegalArgumentException 如果 sz &lt;= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.BufferedWriter.write(int c) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写入单个字符。

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.BufferedWriter.write(char[] cbuf, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写入字符数组的某一部分。

<p> 一般来说，此方法将给定数组的字符存入此流的缓冲区中，根据需要刷新该缓冲区，并转到底层流。但是，如果请求的长度至少与此缓冲区大小相同，则此方法将刷新该缓冲区并将各个字符直接写入底层流。因此多余的 <code>BufferedWriter</code> 将不必复制数据。

@param  cbuf  字符数组
@param  off   开始读取字符处的偏移量
@param  len   要写入的字符数

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.BufferedWriter.write(String s, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写入字符串的某一部分。

<p> 如果 <tt>len</tt> 参数的值为负数，则不写入任何字符。这与{@linkplain java.io.Writer#write(java.lang.String,int,int) 超类}中此方法的规范正好相反，它要求抛出 {@link IndexOutOfBoundsException}。

@param  s  要写入的字符串
@param  off  开始读取字符处的偏移量
@param  len  要写入的字符数

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.BufferedWriter.newLine() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写入一个行分隔符。行分隔符字符串由系统属性 <tt>line.separator</tt> 定义，并且不一定是单个新行 ('\n') 符。

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.BufferedWriter.flush() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
刷新该流的缓冲。

@exception  IOException  如果发生 I/O 错误

<!-- END DATA -->
