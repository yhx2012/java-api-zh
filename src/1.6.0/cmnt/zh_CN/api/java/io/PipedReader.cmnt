<!-- BEGIN KEY -->
public class java.io.PipedReader extends java.io.Reader
<!-- END KEY -->
<!-- BEGIN DATA -->
传送的字符输入流。

@version 	1.15, 03/12/19
@author	Mark Reinhold
@since	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.PipedReader(PipedWriter src) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建连接到传送 writer <code>src</code> 的 <code>PipedReader</code>。写入 <code>src</code> 的数据稍后将用作此流的输入。

@param      src   要连接的流。
@exception  IOException  如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.PipedReader(PipedWriter src, int pipeSize) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个 <code>PipedReader</code>，使其连接到管道 writer <code>src</code>，并对管道缓冲区使用指定的管道大小。写入到 <code>src</code> 的数据将可用作此流的输入。

 @param      src      要连接的流。
 @param      pipeSize  管道缓冲区的大小。
 @exception  IOException  如果发生 I/O 错误。
 @exception  IllegalArgumentException 如果 <code>pipeSize <= 0</code>。
 @since	   1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.PipedReader()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建尚未{@linkplain #connect(java.io.PipedWriter)
 连接}的 <code>PipedReader</code>。使用前必须将其{@linkplain java.io.PipedWriter#connect(
 java.io.PipedReader) 连接}到 <code>PipedWriter</code>。


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.PipedReader(int pipeSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个尚未{@link #connect(java.io.PipedWriter) 连接}的 <code>PipedReader</code>，并对管道缓冲区使用指定的管道大小。使用前必须将其{@linkplain java.io.PipedWriter#connect(
 java.io.PipedReader) 连接}到 <code>PipedWriter</code>。

 @param   pipeSize 管道缓冲区的大小。
 @exception  IllegalArgumentException 如果 <code>pipeSize <= 0</code>。
 @since	   1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.PipedReader.connect(PipedWriter src) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
使此传送 reader 连接到传送 writer <code>src</code>。如果此对象已经连接到其他某个传送 writer，则抛出 <code>IOException</code>。
 <p>
如果 <code>src</code> 是未连接的传送 writer，而 <code>snk</code> 是未连接的传送 reader，则可以通过以下调用之一连接它们：
 <p>
 <pre><code>snk.connect(src)</code> </pre> 
 <p>
或：
 <p>
 <pre><code>src.connect(snk)</code> </pre> 
 <p>
这两个调用的效果相同。

@param      src   要连接的传送 writer。
@exception  IOException  如果发生 I/O 错误。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.io.PipedReader.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
读取此传送流中的下一个数据字符。如果因为已经到达流的末尾而没有可用的字符，则返回值 <code>-1</code>。在输入数据可用、检测到流的末尾或者抛出异常之前，此方法一直阻塞。

@return     下一个数据字符，如果到达流的末尾，则返回 <code>-1</code>。
@exception  IOException  如果管道处于<a href=PipedInputStream.html#BROKEN> <code>broken</code></a>、{@link #connect(java.io.PipedWriter) 未连接}或关闭状态，或者发生 I/O 错误。
		

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.io.PipedReader.read(char[] cbuf, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
将此传送流中最多 <code>len</code> 个数据字符读入字符数组。如果已到达数据流的末尾，或者 <code>len</code> 超出管道缓冲区大小，则读取的字符数少于 <code>len</code>。此方法一直阻塞，直到至少一个输入字符可用。

@param      cbuf     读入数据的缓冲区。
@param      off   数据的初始偏移量。
@param      len   读取的最大字符数。
@return     读入缓冲区的总字符数，如果因为已经到达流末尾而不再有数据可用，则返回 <code>-1</code>。
@exception  IOException   如果管道处于 <a href=PipedInputStream.html#BROKEN> <code>broken</code></a>、{@link #connect(java.io.PipedWriter) 未连接}或关闭状态，或者发生 I/O 错误。


<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.io.PipedReader.ready() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
告知是否准备读取此流。如果循环缓冲区不为空，则传送字符流已做好被读取的准备。

@exception  IOException   如果管道处于 <a href=PipedInputStream.html#BROKEN> <code>broken</code></a>、{@link #connect(java.io.PipedWriter) 未连接}或关闭状态。


<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.PipedReader.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
关闭此传送流并释放与该流相关的所有系统资源。 

@exception  IOException  如果发生 I/O 错误。

<!-- END DATA -->
