<!-- BEGIN KEY -->
public class java.applet.Applet extends java.awt.Panel
<!-- END KEY -->
<!-- BEGIN DATA -->
applet 是一种不能单独运行但可嵌入在其他应用程序中的小程序。
 <p>
<code>Applet</code> 类必须是任何嵌入 Web 页或可用 Java Applet Viewer 查看的 applet 的超类。<code>Applet</code> 类提供了 applet 及其运行环境之间的标准接口。

@author      Arthur van Hoff
@author      Chris Warth
@version     1.83, 04/07/06
@since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.applet.Applet() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新 Applet。
<p>
 注：<code>java.applet.Applet</code> 中的许多方法只有在完全构造了 applet 之后才能由该 applet 调用；在构造方法中，applet 应该避免调用 <code>java.applet.Applet</code> 中的方法。

@exception HeadlessException 如果 GraphicsEnvironment.isHeadless() 返回 true。
@see java.awt.GraphicsEnvironment#isHeadless
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.applet.Applet.setStub(AppletStub stub)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 applet 的 stub。此操作可以通过系统自动完成。
<p>如果存在安全管理器并且设置了 stub，则通过 <code>AWTPermission(&quot;setAppletStub&quot;)</code> 权限调用它的 <code>checkPermission</code> 方法。
@param   stub   新 stub。
@exception SecurityException 如果调用者不能设置 stub

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.applet.Applet.isActive()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定 applet 是否处于活动状态。在调用 applet 的 <code>start</code> 方法之前，applet 被标记为活动状态。在调用 applet 的 <code>stop</code> 方法之前，applet 被标记为非活动状态。

@return 如果 applet 处于活动状态，则返回 <code>true</code>；否则返回 <code>false</code>。
@see     java.applet.Applet#start()
@see     java.applet.Applet#stop()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL java.applet.Applet.getDocumentBase()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取嵌入此 applet 的文档的 URL。例如，假定 applet 包含在以下文档中:
 <blockquote><pre>
    http://java.sun.com/products/jdk/1.2/index.html
 </pre></blockquote>
则文档基为:
 <blockquote><pre>
    http://java.sun.com/products/jdk/1.2/index.html
 </pre></blockquote>

@return  包含此 applet 的文档的 {@link java.net.URL}。
@see     java.applet.Applet#getCodeBase()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL java.applet.Applet.getCodeBase()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得基 URL。这是包含此 applet 的目录的 URL。  

@return  包含此 applet 的目录的基 {@link java.net.URL}。
@see     java.applet.Applet#getDocumentBase()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.applet.Applet.getParameter(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 HTML 标记中指定参数的值。例如，如果此 applet 被指定为:
 <blockquote><pre>
 &lt;applet code=&quot;Clock&quot; width=50 height=50&gt;
 &lt;param name=Color value=&quot;blue&quot;&gt;
 &lt;/applet&gt;
 </pre></blockquote>
 <p>
那么调用 <code>getParameter(&quot;Color&quot;)</code> 将返回值 <code>&quot;blue&quot;</code>。
 <p>
<code>name</code> 参数不区分大小写。

@param       name   参数名称。
@return  指定参数的值；如果未设置，则返回 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.applet.AppletContext java.applet.Applet.getAppletContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此 applet 的上下文，上下文允许 applet 查询和影响它所运行的环境。
 <p>
 applet 的环境指包含该 applet 的文档。

@return  applet 的上下文。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.applet.Applet.resize(int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
请求调整此 applet 的大小。

@param   width    为 applet 请求的新宽度。
@param   height   为 applet 请求的新高度。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.applet.Applet.resize(Dimension d)
<!-- END KEY -->
<!-- BEGIN DATA -->
请求调整此 applet 的大小。

@param   d   给出新宽度和高度的对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.applet.Applet.showStatus(String msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
请求将参数字符串显示在“状态窗口”中。很多浏览器和 applet viewer 提供这种窗口，应用程序可以通过该窗口将其当前状态通知给用户。

@param   msg   在状态窗口中显示的字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Image java.applet.Applet.getImage(URL url)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回能被绘制到屏幕上的 <code>Image</code> 对象。作为参数传递的 <code>url</code> 必须指定绝对 URL。
 <p>
不管图像存在与否，此方法总是立刻返回。当此 applet 试图在屏幕上绘制图像时，数据将被加载。绘制图像的图形图元将逐渐绘制到屏幕上。

@param   url   给出图像位置的绝对 URL。
@return     指定 URL 处的图像。
@see     java.awt.Image

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Image java.applet.Applet.getImage(URL url, String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回能被绘制到屏幕上的 <code>Image</code> 对象。<code>url</code> 参数必须指定绝对 URL。<code>name</code> 参数是相对于 <code>url</code> 参数的说明符。
 <p>
不管图像存在与否，此方法总是立刻返回。当此 applet 试图在屏幕上绘制图像时，数据将被加载。绘制图像的图形图元将逐渐绘制到屏幕上。

@param   url    给出图像基本位置的绝对 URL。
@param   name   相对于 <code>url</code> 参数的图象位置。
@return     指定 URL 处的图像。
@see     java.awt.Image

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.applet.AudioClip java.applet.Applet.newAudioClip(URL url)
<!-- END KEY -->
<!-- BEGIN DATA -->
从给定 URL 处获取音频剪辑。

@param url 指向音频剪辑
@return 指定 URL 处的音频剪辑。

@since       1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.applet.AudioClip java.applet.Applet.getAudioClip(URL url)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>URL</code> 参数指定的 <code>AudioClip</code> 对象。
 <p>
不管音频剪辑存在与否，此方法总是立即返回。当此 applet 试图播放音频剪辑时，数据将被加载。

@param   url  给出音频剪辑位置的绝对 URL。
@return  指定 URL 处的音频剪辑。
@see     java.applet.AudioClip

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.applet.AudioClip java.applet.Applet.getAudioClip(URL url, String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 <code>URL</code> 和 <code>name</code> 参数指定的 <code>AudioClip</code> 对象。
 <p>
不管音频剪辑存在与否，此方法总是立即返回。当此 applet 试图播放音频剪辑时，数据将被加载。

@param   url    给定音频剪辑基本位置的绝对 URL。
@param   name   相对于 <code>url</code> 参数的音频剪辑位置。
@return  指定 URL 处的音频剪辑。
@see     java.applet.AudioClip

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.applet.Applet.getAppletInfo()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回有关此 applet 的信息。applet 应该重写此方法，返回包含有关 applet 的作者、版本和版权信息的 <code>String</code>。
 <p>
<code>Applet</code> 类提供的此方法实现返回 <code>null</code>。

@return  包含有关 applet 的作者、版本和版权信息的字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Locale java.applet.Applet.getLocale()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取 applet 的语言环境。该方法允许 applet 维护自己的语言环境，该环境与浏览器或 appletviewer 的语言环境是分离的。

@return  applet 的语言环境；如果尚未设置该语言环境，则返回默认语言环境。
@since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[][] java.applet.Applet.getParameterInfo()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 applet 理解的关于参数的信息。applet 应该重写此方法，返回描述这些参数的 <code>String</code> 数组。
 <p>
数组的每个元素应该是三个 <code>String</code> 的集合，包括名称、类型和描述。例如：
 <p><blockquote><pre>
 String pinfo[][] = {
	 {&quot;fps&quot;,    &quot;1-10&quot;,    &quot;frames per second&quot;},
	 {&quot;repeat&quot;, &quot;boolean&quot;, &quot;repeat image loop&quot;},
	 {&quot;imgs&quot;,   &quot;url&quot;,     &quot;images directory&quot;}
 };
 </pre></blockquote>
 <p>
<code>Applet</code> 类提供的此方法实现返回 <code>null</code>。

@return  描述此 applet 所寻找的参数的数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.applet.Applet.play(URL url)
<!-- END KEY -->
<!-- BEGIN DATA -->
播放指定绝对 URL 处的音频剪辑。如果未找到音频剪辑，则没有任何效果。

@param   url  给出音频剪辑位置的绝对 URL。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.applet.Applet.play(URL url, String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
播放音频剪辑，给定了 URL 及与之相对的说明符。如果未找到音频剪辑，则没有任何效果。

@param   url    给定音频剪辑基位置的绝对 URL。
@param   name   相对于 <code>url</code> 参数的音频剪辑位置。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.applet.Applet.init()
<!-- END KEY -->
<!-- BEGIN DATA -->
由浏览器或 applet viewer 调用，通知此 applet 它已经被加载到系统中。它经常在第一次调用 <code>start</code> 方法前被调用。
 <p>
如果 <code>Applet</code> 的子类要执行初始化，则应该重写此方法。例如，使用线程的 applet 将用 <code>init</code> 方法创建线程，用 <code>destroy</code> 方法销毁它们。
 <p>
<code>Applet</code> 类提供的此方法实现不执行任何操作。

@see     java.applet.Applet#destroy()
@see     java.applet.Applet#start()
@see     java.applet.Applet#stop()

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.applet.Applet.start()
<!-- END KEY -->
<!-- BEGIN DATA -->
由浏览器或 applet viewer 调用，通知此 applet 它应该开始执行。它在 <code>init</code> 方法调用后以及在 Web 页中每次重新访问 applet 时调用。
 <p>
如果 <code>Applet</code> 子类在包含它的 Web 页被访问时有想要执行的操作，则它应该重写此方法。例如，带有动画的 applet 可能想使用 <code>start</code> 方法再次播放动画，使用 <code>stop</code> 方法挂起动画。
 <p>
注：某些方法（如 <code>getLocationOnScreen</code>）只有在如果 applet 正在显示时，才能提供有意义的结果。因为当 applet 的 <code>start</code> 方法第一次被调用时，<code>isShowing</code> 返回 <code>false</code>，所以需要 <code>isShowing</code> 返回 <code>true</code> 的方法应该从 <code>ComponentListener</code> 进行调用。
 <p>
<code>Applet</code> 类提供的此方法实现不执行任何操作。

@see     java.applet.Applet#destroy()
@see     java.applet.Applet#init()
@see     java.applet.Applet#stop()
@see     java.awt.Component#isShowing()
@see     java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.applet.Applet.stop()
<!-- END KEY -->
<!-- BEGIN DATA -->
由浏览器或 applet viewer 调用，通知此 applet 它应该终止执行。当包含此 applet 的 Web 页已经被其他页替换时，在 applet 被销毁前调用此方法。
 <p>
如果 <code>Applet</code> 子类在包含它的 Web 页每次不可见时有想要执行的操作，则它应该重写此方法。例如，带有动画的 applet 可能想使用 <code>start</code> 方法再次播放动画，使用 <code>stop</code> 方法挂起动画。
 <p>
<code>Applet</code> 类提供的此方法实现不执行任何操作。

@see     java.applet.Applet#destroy()
@see     java.applet.Applet#init()

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.applet.Applet.destroy()
<!-- END KEY -->
<!-- BEGIN DATA -->
由浏览器或 applet viewer 调用，通知此 applet 它正在被回收，它应该销毁分配给它的任何资源。<code>stop</code> 方法总是在 <code>destroy</code> 之前被调用。
 <p>
如果 <code>Applet</code> 子类在被销毁前有想要执行的操作，则它应该重写此方法。例如，使用线程的 applet 将用 <code>init</code> 方法来创建线程，用 <code>destroy</code> 方法销毁它们。
 <p>
<code>Applet</code> 类提供的此方法实现不执行任何操作。

@see     java.applet.Applet#init()
@see     java.applet.Applet#start()
@see     java.applet.Applet#stop()

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.applet.Applet.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取与此 Applet 关联的 AccessibleContext。对于 applet，AccessibleContext 采用 AccessibleApplet 的形式。如有必要，可创建一个新的 AccessibleApplet 实例。

@return 一个 AccessibleApplet，它充当此 Applet 的 AccessibleContext
@since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.applet.Applet.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
从对象输入流读取 applet。
@exception HeadlessException 如果 <code>GraphicsEnvironment.isHeadless()</code> 返回 <code>true</code>
@serial
@see java.awt.GraphicsEnvironment#isHeadless
@since 1.4

<!-- END DATA -->
