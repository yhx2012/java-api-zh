<!-- BEGIN KEY -->
public final class java.math.MathContext extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
该对象是封装上下文设置的不可变对象，它描述数字运算符的某些规则，例如由 {@link BigDecimal} 类实现的规则。
 
<p>基本独立设置为：
 <ol>
<li>{@code precision}：某个操作使用的数字个数；结果舍入到此精度
 
<li>{@code roundingMode}：一个 {@link RoundingMode} 对象，该对象指定舍入使用的算法。
 </ol>

@see     BigDecimal
@see     RoundingMode
@author  Mike Cowlishaw
@author  Joseph D. Darcy
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.math.MathContext java.math.MathContext.UNLIMITED
<!-- END KEY -->
<!-- BEGIN DATA -->
其设置具有无限精度算法所需值的 {@code MathContext} 对象。该设置的值为：<code>precision=0 roundingMode=HALF_UP</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.math.MathContext java.math.MathContext.DECIMAL32
<!-- END KEY -->
<!-- BEGIN DATA -->
一个 {@code MathContext} 对象，其精度设置与 IEEE 754R Decimal32 格式（即 7 个数字）匹配，舍入模式为 {@link RoundingMode#HALF_EVEN HALF_EVEN}，这是 IEEE 754R 的默认舍入模式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.math.MathContext java.math.MathContext.DECIMAL64
<!-- END KEY -->
<!-- BEGIN DATA -->
一个 {@code MathContext} 对象，其精度设置与 IEEE 754R Decimal64 格式（即 16 个数字）匹配，舍入模式为 {@link RoundingMode#HALF_EVEN HALF_EVEN}，这是 IEEE 754R 的默认舍入模式。

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.math.MathContext java.math.MathContext.DECIMAL128
<!-- END KEY -->
<!-- BEGIN DATA -->
一个 {@code MathContext} 对象，其精度设置与 IEEE 754R Decimal128 格式（即 34 个数字）匹配，舍入模式为 {@link RoundingMode#HALF_EVEN HALF_EVEN}，这是 IEEE 754R 的默认舍入模式。

<!-- END DATA -->
<!-- BEGIN KEY -->
final int java.math.MathContext.precision
<!-- END KEY -->
<!-- BEGIN DATA -->
某个操作使用的数位。值为 0 指示将使用无限精度（需要多少位就用多少位）。注意，前导零（在某个数的系数中）不是有效数字。
 
<p>{@code precision} 始终为非负数。

@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
final java.math.RoundingMode java.math.MathContext.roundingMode
<!-- END KEY -->
<!-- BEGIN DATA -->
某个操作使用的舍入算法。

@see RoundingMode
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.MathContext(int setPrecision)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的 {@code MathContext}，它具有指定的精度和 {@link RoundingMode#HALF_UP HALF_UP} 舍入模式。

@param setPrecision 非负 {@code int} 精度设置。
@throws IllegalArgumentException 如果 {@code setPrecision} 参数小于零。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.MathContext(int setPrecision, RoundingMode setRoundingMode)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的 {@code MathContext}，它具有指定的精度和舍入模式。

@param setPrecision 非负 {@code int} 精度设置。
@param setRoundingMode 要使用的舍入模式。
@throws IllegalArgumentException 如果 {@code setPrecision} 参数小于零。
@throws NullPointerException 如果舍入模式参数为 {@code null}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.MathContext(String val)
<!-- END KEY -->
<!-- BEGIN DATA -->
根据字符串构造一个新的 {@code MathContext}。

该字符串的格式必须与 {@link #toString} 方法生成的字符串的格式相同。
 
<p>如果字符串的精度部分超出范围 ({@code < 0})，或者字符串的格式不是 {@link #toString} 方法创建的格式，则抛出 {@code IllegalArgumentException}。

@param val 要解析的字符串
@throws IllegalArgumentException 如果精度部分超出范围或者格式不正确
@throws NullPointerException 如果参数为 {@code null}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.math.MathContext.getPrecision()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 {@code precision} 设置。此值始终为非负数。

@return 一个 {@code int}，它是 {@code precision} 设置的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.RoundingMode java.math.MathContext.getRoundingMode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回 roundingMode 设置。它将是 {@link  RoundingMode#CEILING}、{@link  RoundingMode#DOWN}、{@link  RoundingMode#FLOOR}、{@link  RoundingMode#HALF_DOWN}、{@link  RoundingMode#HALF_EVEN}、{@link  RoundingMode#HALF_UP}、{@link  RoundingMode#UNNECESSARY} 或 {@link  RoundingMode#UP} 之一。

@return 一个 {@code RoundingMode} 对象，它是 {@code roundingMode} 设置的值

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.math.MathContext.equals(Object x)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 {@code MathContext} 与指定的 {@code Object} 进行相等性比较。

@param  x 将与 {@code MathContext} 相比较的 {@code Object}。
@return 当且仅当指定的 {@code Object} 是一个 {@code MathContext} 对象，并且它与此对象具有完全相同的设置，才返回 {@code true}。

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.math.MathContext.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此 {@code MathContext} 的哈希码。

@return 此 {@code MathContext} 的哈希码

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.math.MathContext.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->

返回此 {@code MathContext} 的字符串表示形式。返回的 {@code String} 表示 {@code MathContext} 对象的设置，表示为两个由空格分开的单词（由单个空格字符 {@code '\u0020'} 分隔，且没有前导空格和后缀空格），如下所示：
 <ol>
 <li>
字符串 {@code "precision="} 后面紧跟以数字字符串形式表示的精度设置的值，该字符串像是由 {@link Integer#toString(int) Integer.toString} 方法生成的。

 <li>
字符串 {@code "roundingMode="} 后面紧跟以单词表示的 {@code roundingMode} 设置的值。此单词与 {@link RoundingMode} 枚举中对应的公共常量的名称相同。
 </ol>
 <p>
例如：
 <pre>
 precision=9 roundingMode=HALF_UP
 </pre>

如果向此类添加了多个属性，则以后可以将其他单词添加到 {@code toString} 的结果中。

@return 表示上下文设置的 {@code String}。

<!-- END DATA -->
<!-- BEGIN KEY -->
private synchronized void java.math.MathContext.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
从流重构 {@code MathContext} 实例（也就是将其反序列化）。

@param s 读取的流。

<!-- END DATA -->
