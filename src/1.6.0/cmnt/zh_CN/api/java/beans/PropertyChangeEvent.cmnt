<!-- BEGIN KEY -->
public class java.beans.PropertyChangeEvent extends java.util.EventObject
<!-- END KEY -->
<!-- BEGIN DATA -->
无论 bean 何时更改 &quot;bound&quot; 或 &quot;constrained&quot; 属性，都会提交一个 &quot;PropertyChange&quot; 事件。PropertyChangeEvent 对象被作为参数发送给 PropertyChangeListener 和 VetoableChangeListener 方法。
 <P>
通常 PropertyChangeEvent 还附带名称和已更改属性的旧值和新值。如果新值是基本类型（比如 int 或 boolean），则必须将它包装为相应的 java.lang.* Object 类型（比如 Integer 或 Boolean）。
 <P>
如果旧值和新值的真实值是未知的，则可能为它们提供 null 值。
 <P>
事件源可能发送一个 null 对象作为名称，以指示其属性的任意事件集已更改。在这种情况下，旧值和新值应该仍然为 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.beans.PropertyChangeEvent.propertyName
<!-- END KEY -->
<!-- BEGIN DATA -->
已更改属性的名称。如果该名称未知，则为 null。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Object java.beans.PropertyChangeEvent.newValue
<!-- END KEY -->
<!-- BEGIN DATA -->
属性的新值。如果该值未知，则为 null。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Object java.beans.PropertyChangeEvent.oldValue
<!-- END KEY -->
<!-- BEGIN DATA -->
属性以前的值。如果该值未知，则为 null。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Object java.beans.PropertyChangeEvent.propagationId
<!-- END KEY -->
<!-- BEGIN DATA -->
传播 ID。可能为 null。
@serial
@see #getPropagationId.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.PropertyChangeEvent(Object source, String propertyName, Object oldValue, Object newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个新的 <code>PropertyChangeEvent</code>。

@param source  激发事件的 bean。
@param propertyName  被更改属性的编程名称。
@param oldValue 属性的旧值。
@param newValue 属性的新值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.beans.PropertyChangeEvent.getPropertyName()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取已更改属性的编程名称。

@return  被更改属性的编程名称。如果多个属性被更改，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.beans.PropertyChangeEvent.getNewValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取属性的新值，以 Object 的形式表示。

@return  属性的新值，以 Object 的形式表示。如果多个属性被更改，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.beans.PropertyChangeEvent.getOldValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取属性的旧值，以 Object 的形式表示。

@return  属性的旧值，以 Object 的形式表示。如果多个属性被更改，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyChangeEvent.setPropagationId(Object propagationId)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置事件的 propagationId 对象。

@param propagationId 事件的 propagationId 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.beans.PropertyChangeEvent.getPropagationId()
<!-- END KEY -->
<!-- BEGIN DATA -->
保留 &quot;propagationId&quot; 字段以供将来使用。在 Beans 1.0 中，唯一要求是，如果侦听器捕获一个 PropertyChangeEvent 并随后激发自己的 PropertyChangeEvent，则应该确保将 propagationId 字段从其传入事件传播到其传出事件。

@return 与绑定/约束 (bound/constrained) 属性更新关联的 propagationId 对象。

<!-- END DATA -->
