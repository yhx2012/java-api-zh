<!-- BEGIN KEY -->
public class java.beans.IndexedPropertyDescriptor extends java.beans.PropertyDescriptor
<!-- END KEY -->
<!-- BEGIN DATA -->
IndexedPropertyDescriptor 描述了类似数组行为的属性，且有一种访问数组特定元素的索引读和/或索引写方法。
 <p>
索引 (indexed) 属性还可以提供简单的非索引读和写方法。如果存在这些方法，它们可读取和写入索引读方法所返回类型的读写数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.IndexedPropertyDescriptor(String propertyName, java.lang.Class<?> beanClass) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
此构造方法通过 getFoo 和 setFoo 存取方法为符合标准 Java 约定的属性构造 IndexedPropertyDescriptor，将其用于索引访问和数组访问。
 <p>
因此，如果参数名为 &quot;fred&quot;，则假定有一个索引 reader 方法 &quot;getFred&quot;、一个也称为 &quot;getFred&quot; 的非索引（数组）reader 方法、一个索引 writer 方法 &quot;setFred&quot; 和一个非索引 writer 方法 &quot;setFred&quot;。

@param propertyName  属性的编程名称。
@param beanClass 目标 bean 的 Class 对象。
@exception IntrospectionException 如果在内省期间发生异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.IndexedPropertyDescriptor(String propertyName, java.lang.Class<?> beanClass, String readMethodName, String writeMethodName, String indexedReadMethodName, String indexedWriteMethodName) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
此构造方法带有一个简单属性的名称和用于读写属性的方法名称，它们都是带索引的或不带索引的。

@param propertyName  属性的编程名称。
@param beanClass 目标 bean 的 Class 对象。
@param readMethodName 用来以数组形式读取属性值的方法的名称。如果该属性是只写的或是必须建立索引的，则可能返回 null。
@param writeMethodName 用来以数组形式写入属性值的方法的名称。如果该属性是只读的或是必须建立索引的，则可能返回 null。
@param indexedReadMethodName 用于读取索引属性值的方法的名称。如果属性是只写的，则该参数可能为 null。
@param indexedWriteMethodName 用于写入索引属性值的方法的名称。如果属性是只读的，则该参数可能为 null。
@exception IntrospectionException 如果在内省期间发生异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.IndexedPropertyDescriptor(String propertyName, Method readMethod, Method writeMethod, Method indexedReadMethod, Method indexedWriteMethod) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
此构造方法带有某一简单属性的名称，以及用来读取和写入属性的 Method 对象。

@param propertyName  属性的编程名称。
@param readMethod 用来以数组形式读取属性值的方法。如果该属性是只写的或是必须建立索引的，则可能返回 null。
@param writeMethod 用来以数组形式写入属性值的方法。如果该属性是只读的或是必须建立索引的，则可能返回 null。
@param indexedReadMethod 用于读取索引属性值的方法。如果属性是只写的，则该参数可能为 null。
@param indexedWriteMethod 用于写入索引属性值的方法。如果属性是只读的，则该参数可能为 null。
@exception IntrospectionException 如果在内省期间发生异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.reflect.Method java.beans.IndexedPropertyDescriptor.getIndexedReadMethod()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得应该用于读取索引属性值的方法。

@return 应该用于读取索引属性值的方法。如果该属性没有建立索引或是只写的，则可能返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.IndexedPropertyDescriptor.setIndexedReadMethod(Method readMethod) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置应该用于读取索引属性值的方法。

@param readMethod 新的索引读取方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.reflect.Method java.beans.IndexedPropertyDescriptor.getIndexedWriteMethod()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得应该用于写入索引属性值的方法。

@return 应该用于写入索引属性值的方法。如果该属性没有建立索引或是只读的，则可能返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.IndexedPropertyDescriptor.setIndexedWriteMethod(Method writeMethod) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置应该用于写入索引属性值的方法。

@param writeMethod 新的索引写入方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Class<?> java.beans.IndexedPropertyDescriptor.getIndexedPropertyType()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得索引属性类型的 <code>Class</code> 对象。返回的 <code>Class</code> 可能描述诸如 <code>int</code> 的基本类型。

@return 用于索引属性类型的 <code>Class</code>；如果类型无法确定，则可能返回 <code>null</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.IndexedPropertyDescriptor.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>PropertyDescriptor</code> 与指定对象比较。如果对象是相同的，则返回 true。如果读取、写入、属性类型、属性编辑器和标记都是等同的，则两个 <code>PropertyDescriptor</code> 是相同的。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.beans.IndexedPropertyDescriptor.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对象的哈希码值。关于完整的描述，请参阅 {@link java.lang.Object#hashCode}。

@return  此对象的哈希码值。
@since 1.5

<!-- END DATA -->
