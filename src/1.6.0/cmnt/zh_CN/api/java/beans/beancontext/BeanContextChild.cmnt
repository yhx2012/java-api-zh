<!-- BEGIN KEY -->
public interface java.beans.beancontext.BeanContextChild
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
正如 BeanContext 子接口所定义的，希望在其中进行嵌套并获得对其执行环境（或文本）的引用的 JavaBeans 应该实现此接口。
 </p>
 <p>
作为添加 BeanContextChild 对象的副作用，遵守此接口的 BeanContext 应该通过接口的 setBeanContext() 方法将一个引用传递给自身。
 </p>
 <p>
注意，BeanContextChild 可能通过在响应时抛出 PropertyVetoedException 来对拒绝状态的更改。
 </p>
 <p>
为了使持久性机制在各种情况下都能在 BeanContextChild 实例上正确地发挥作用，此接口的实现类需要所有或全部的字段（或实例变量）定义为 transient，这些字段可能包含（或表示）对嵌套 BeanContext 实例或通过任何未指定的机制从 BeanContext 中获得的其他资源的引用。
 </p>

@author	Laurence P. G. Cable
@version	1.21, 11/17/05
@since	1.2
 
@see	java.beans.beancontext.BeanContext
@see	java.beans.PropertyChangeEvent
@see	java.beans.PropertyChangeListener
@see	java.beans.PropertyVetoEvent
@see	java.beans.PropertyVetoListener
@see	java.beans.PropertyVetoException

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChild.setBeanContext(BeanContext bc) throws java.beans.PropertyVetoException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
实现此接口的对象应使用以下参数激活一个 java.beans.PropertyChangeEvent：propertyName &quot;beanContext&quot;、oldValue（以前的嵌套 <code>BeanContext</code> 实例，或 <code>null</code>）、newValue（当前的嵌套 <code>BeanContext</code> 实例，或 <code>null</code>）。
 <p>
可以通过抛出适当异常来禁止对此 BeanContextChild 的嵌套 BeanContext 属性值进行更改。
 </p>
@param     bc 与此 <code>BeanContextChild</code> 相关联的 <code>BeanContext</code>。
@throws <code>PropertyVetoException</code> 如果拒绝添加指定的 <code>BeanContext</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContext java.beans.beancontext.BeanContextChild.getBeanContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得与此 <code>BeanContextChild</code> 相关联的 <code>BeanContext</code>。
@return 与此 <code>BeanContextChild</code> 相关联的 <code>BeanContext</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChild.addPropertyChangeListener(String name, PropertyChangeListener pcl)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 <code>PropertyChangeListener</code> 添加到此 <code>BeanContextChild</code> 中，以便无论指定属性何时发生更改都可以接收一个 <code>PropertyChangeEvent</code>。
@param name 要侦听的属性的名称
@param pcl 要添加的 <code>PropertyChangeListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChild.removePropertyChangeListener(String name, PropertyChangeListener pcl)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此 <code>BeanContextChild</code> 中移除一个 <code>PropertyChangeListener</code>，以便指定属性发生更改时不再接收 <code>PropertyChangeEvent</code>。
 
@param name 已被侦听的属性的名称
@param pcl 要移除的 <code>PropertyChangeListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChild.addVetoableChangeListener(String name, VetoableChangeListener vcl)
<!-- END KEY -->
<!-- BEGIN DATA -->
将一个 <code>VetoableChangeListener</code> 添加到此 <code>BeanContextChild</code>，以便无论指定属性何时发生更改都可以接收事件。
@param name 要侦听的属性的名称
@param vcl 要添加的 <code>VetoableChangeListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChild.removeVetoableChangeListener(String name, VetoableChangeListener vcl)
<!-- END KEY -->
<!-- BEGIN DATA -->
从此 <code>BeanContextChild</code> 中移除一个 <code>VetoableChangeListener</code>，以便指定属性发生更改时不再接收事件。
@param name 已被侦听的属性的名称。
@param vcl 要移除的 <code>VetoableChangeListener</code>。

<!-- END DATA -->
