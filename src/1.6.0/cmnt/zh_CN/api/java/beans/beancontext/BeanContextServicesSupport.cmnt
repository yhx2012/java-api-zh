<!-- BEGIN KEY -->
public class java.beans.beancontext.BeanContextServicesSupport extends java.beans.beancontext.BeanContextSupport implements java.beans.beancontext.BeanContextServices
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
此帮助器类提供 java.beans.beancontext.BeanContextServices 接口的实用工具实现。
 </p>
 <p>
因为此类直接实现 BeanContextServices 接口，所以可以通过创建此实现的子类来使用该类，或者由通过 BeanContextProxy 接口的另一个实例对此类实例的委托来使用该类。
 </p>

@author Laurence P. G. Cable
@version 1.24, 11/17/05
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient java.util.HashMap java.beans.beancontext.BeanContextServicesSupport.services
<!-- END KEY -->
<!-- BEGIN DATA -->
<code> protected transient HashMap services </code> 字段的所有访问在该对象上都应该是同步的。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient int java.beans.beancontext.BeanContextServicesSupport.serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
可序列化 <tt>BeanContextServceProvider</tt> 的实例数。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient java.beans.beancontext.BeanContextServicesSupport.BCSSProxyServiceProvider java.beans.beancontext.BeanContextServicesSupport.proxy
<!-- END KEY -->
<!-- BEGIN DATA -->
<tt>BeanContextServiceProvider</tt> 的委托。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient java.util.ArrayList java.beans.beancontext.BeanContextServicesSupport.bcsListeners
<!-- END KEY -->
<!-- BEGIN DATA -->
<tt>BeanContextServicesListener</tt> 对象的列表。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextServicesSupport(BeanContextServices peer, Locale lcle, boolean dTime, boolean visible)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
构造一个 BeanContextServicesSupport 实例
 </p>

@param peer	将为其提供实现的同位体 BeanContext，如果该参数为 null，则此对象是它自己的同位体
@param lcle	此 BeanContext 的当前 Locale。
@param dtime	初始状态，如果在设计模式下，则该参数为 true，如果在运行状态下，则该参数为 false。
@param visible   初始可见性。
 
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextServicesSupport(BeanContextServices peer, Locale lcle, boolean dtime)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定 Locale 和设计模式创建一个实例。

@param peer	将为其提供实现的同位体 BeanContext，如果该参数为 null，则此对象是它自己的同位体
@param lcle	此 BeanContext 的当前 Locale。
@param dtime	初始状态，如果在设计模式下，则该参数为 true，如果在运行状态下，则该参数为 false。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextServicesSupport(BeanContextServices peer, Locale lcle)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用指定语言环境创建一个实例。

@param peer	将为其提供实现的同位体 BeanContext，如果该参数为 null，则此对象是它自己的同位体
@param lcle	此 BeanContext 的当前 Locale。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextServicesSupport(BeanContextServices peer)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个具有同位体的实例

@param peer	将为其提供实现的同位体 BeanContext，如果该参数为 null，则此对象是它自己的同位体。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextServicesSupport()
<!-- END KEY -->
<!-- BEGIN DATA -->
创建不是另一个对象代理的实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextServicesSupport.initialize()
<!-- END KEY -->
<!-- BEGIN DATA -->
由 BeanContextSupport 超类在构造和反序列化期间调用，以初始化子类的瞬态。

子类可以封装此方法，但不应该重写或直接调用它。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextServices java.beans.beancontext.BeanContextServicesSupport.getBeanContextServicesPeer()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得与此 <tt>BeanContextServicesSupport</tt> 相关联的 <tt>BeanContextServices</tt>。

@return <tt>BeanContext</tt> 的实例，此对象将为其提供实现。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.beancontext.BeanContextSupport.BCSChild java.beans.beancontext.BeanContextServicesSupport.createBCSChild(Object targetChild, Object peer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
子类可以重写此方法来插入自己的 Child 的子类，而不必重写 add() 或其他将子级添加到集合中的 Collection 方法。
 </p>

@param targetChild 要创建自己的 Child 的子级
@param peer        同位体，如果 targetChild 和同位体通过 BeanContextProxy 建立联系

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.beancontext.BeanContextServicesSupport.BCSSServiceProvider java.beans.beancontext.BeanContextServicesSupport.createBCSSServiceProvider(java.lang.Class sc, BeanContextServiceProvider bcsp)
<!-- END KEY -->
<!-- BEGIN DATA -->
子类可以重写此方法来创建 BCSSServiceProvider 的新子类，而不必为了实例化而重写 addService()。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextServicesSupport.addBeanContextServicesListener(BeanContextServicesListener bcsl)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加一个 BeanContextServicesListener。

@throw new NullPointerException

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextServicesSupport.removeBeanContextServicesListener(BeanContextServicesListener bcsl)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除一个 BeanContextServicesListener。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.beancontext.BeanContextServicesSupport.addService(java.lang.Class serviceClass, BeanContextServiceProvider bcsp)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加服务。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.beans.beancontext.BeanContextServicesSupport.addService(java.lang.Class serviceClass, BeanContextServiceProvider bcsp, boolean fireEvent)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加服务。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextServicesSupport.revokeService(java.lang.Class serviceClass, BeanContextServiceProvider bcsp, boolean revokeCurrentServicesNow)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除服务。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.beans.beancontext.BeanContextServicesSupport.hasService(java.lang.Class serviceClass)
<!-- END KEY -->
<!-- BEGIN DATA -->
具有一个可被委托的服务。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.beans.beancontext.BeanContextServicesSupport.getService(BeanContextChild child, Object requestor, java.lang.Class serviceClass, Object serviceSelector, BeanContextServiceRevokedListener bcsrl) throws java.util.TooManyListenersException
<!-- END KEY -->
<!-- BEGIN DATA -->
获得一个可被委托的服务。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextServicesSupport.releaseService(BeanContextChild child, Object requestor, Object service)
<!-- END KEY -->
<!-- BEGIN DATA -->
释放服务。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator java.beans.beancontext.BeanContextServicesSupport.getCurrentServiceClasses()
<!-- END KEY -->
<!-- BEGIN DATA -->
@return 所有当前已注册服务类的迭代器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator java.beans.beancontext.BeanContextServicesSupport.getCurrentServiceSelectors(java.lang.Class serviceClass)
<!-- END KEY -->
<!-- BEGIN DATA -->
@return 所有可用于指定服务的当前可用服务选择器（如果有）的迭代器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextServicesSupport.serviceAvailable(BeanContextServiceAvailableEvent bcssae)
<!-- END KEY -->
<!-- BEGIN DATA -->
BeanContextServicesListener 回调，如果此 BeanContextService 自己尚未实现此服务，则将事件传播到所有当前已注册侦听器和 BeanContextServices 子级。

子类可重写或封装此方法来实现自己的传播语义。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextServicesSupport.serviceRevoked(BeanContextServiceRevokedEvent bcssre)
<!-- END KEY -->
<!-- BEGIN DATA -->
BeanContextServicesListener 回调，如果此 BeanContextService 自己尚未实现此服务，则将事件传播到所有当前已注册侦听器和 BeanContextServices 子级。

子类可重写或封装此方法来实现自己的传播语义。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static final java.beans.beancontext.BeanContextServicesListener java.beans.beancontext.BeanContextServicesSupport.getChildBeanContextServicesListener(Object child)
<!-- END KEY -->
<!-- BEGIN DATA -->
获得指定子级的 <tt>BeanContextServicesListener</tt>（如果有）。

@param child 指定子级
@return 指定子级的 BeanContextServicesListener（如果有）

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.beans.beancontext.BeanContextServicesSupport.childJustRemovedHook(Object child, BeanContextSupport.BCSChild bcsc)
<!-- END KEY -->
<!-- BEGIN DATA -->
在已成功移除子级之后，从超类的子级移除操作中调用。使用同步的子级调用。

如果此子级是一个 BeanContextChild，则该子类使用此钩子 (hook) 立即取消正由此子级使用的所有服务。

为了实现自己的子级移除副作用，子类可以封装此方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.beans.beancontext.BeanContextServicesSupport.releaseBeanContextResources()
<!-- END KEY -->
<!-- BEGIN DATA -->
从 setBeanContext 中调用，以通知 BeanContextChild 释放从嵌套 BeanContext 中获得的资源。
 
此方法取消从其父级中获得的所有服务。
 
子类可以封装此方法来实现自己的语义。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.beans.beancontext.BeanContextServicesSupport.initializeBeanContextResources()
<!-- END KEY -->
<!-- BEGIN DATA -->
从 setBeanContext 中调用，以通知 BeanContextChild 分配从嵌套 BeanContext 中获得的资源。
 
子类可以封装此方法来实现自己的语义。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void java.beans.beancontext.BeanContextServicesSupport.fireServiceAdded(java.lang.Class serviceClass)
<!-- END KEY -->
<!-- BEGIN DATA -->
触发一个通知新服务的 <tt>BeanContextServiceEvent</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void java.beans.beancontext.BeanContextServicesSupport.fireServiceAdded(BeanContextServiceAvailableEvent bcssae)
<!-- END KEY -->
<!-- BEGIN DATA -->
触发一个指示新服务已变得可用的 <tt>BeanContextServiceAvailableEvent</tt>。

@param bcssae <tt>BeanContextServiceAvailableEvent</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void java.beans.beancontext.BeanContextServicesSupport.fireServiceRevoked(BeanContextServiceRevokedEvent bcsre)
<!-- END KEY -->
<!-- BEGIN DATA -->
触发一个通知将被取消的服务的 <tt>BeanContextServiceEvent</tt>。

@param bcsre <tt>BeanContextServiceRevokedEvent</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void java.beans.beancontext.BeanContextServicesSupport.fireServiceRevoked(java.lang.Class serviceClass, boolean revokeNow)
<!-- END KEY -->
<!-- BEGIN DATA -->
触发一个指示某一特定服务不再可用的 <tt>BeanContextServiceRevokedEvent</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.beans.beancontext.BeanContextServicesSupport.bcsPreSerializationHook(ObjectOutputStream oos) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
在序列化子级之前，从 BeanContextSupport writeObject 中调用。

此类将序列化这里的所有 Serializable BeanContextServiceProviders。

子类可以封装此方法来插入自己的序列化处理，该处理操作必须发生在序列化子级之前。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.beans.beancontext.BeanContextServicesSupport.bcsPreDeserializationHook(ObjectInputStream ois) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
在反序列化子级之前，从 BeanContextSupport readObject 中调用。

此类将反序列化以前已序列化的所有 Serializable BeanContextServiceProviders，这样可以使它们在反序列化时用于子级。

子类可以封装此方法来插入自己的序列化处理，该处理操作必须发生在序列化子级之前。

<!-- END DATA -->
<!-- BEGIN KEY -->
private synchronized void java.beans.beancontext.BeanContextServicesSupport.readObject(ObjectInputStream ois) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
反序列化实例。

<!-- END DATA -->
<!-- BEGIN KEY -->
private synchronized void java.beans.beancontext.BeanContextServicesSupport.writeObject(ObjectOutputStream oos) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
序列化实例。

<!-- END DATA -->
