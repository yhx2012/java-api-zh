<!-- BEGIN KEY -->
public class java.beans.beancontext.BeanContextServiceRevokedEvent extends java.beans.beancontext.BeanContextEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
<code>BeanContextServiceRevokedListener</code> 使用此事件类型来标识将被取消的服务。
 </p>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Class java.beans.beancontext.BeanContextServiceRevokedEvent.serviceClass
<!-- END KEY -->
<!-- BEGIN DATA -->
将被取消服务的 <code>Class</code> 引用。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextServiceRevokedEvent(BeanContextServices bcs, java.lang.Class sc, boolean invalidate)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>BeanContextServiceEvent</code>。
@param bcs 将从中取消此服务的 <code>BeanContextServices</code>
@param sc 将被取消的服务
@param invalidate <code>true</code> 表示立即取消 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextServices java.beans.beancontext.BeanContextServiceRevokedEvent.getSourceAsBeanContextServices()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得作为 <code>BeanContextServices</code> 类型引用的源
@return 将从中取消此服务的 <code>BeanContextServices</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class java.beans.beancontext.BeanContextServiceRevokedEvent.getServiceClass()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得作为此通知主题的服务类
@return 将被取消服务的 <code>Class</code> 引用

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.beancontext.BeanContextServiceRevokedEvent.isServiceClass(java.lang.Class service)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查此事件，以确定将被取消的服务是否属于某个特定类。
@param service 感兴趣的类（应该为非 null )
@return 如果将被取消的服务与指定服务属于同一个类，则返回 <code>true</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.beancontext.BeanContextServiceRevokedEvent.isCurrentServiceInvalidNow()
<!-- END KEY -->
<!-- BEGIN DATA -->
报告当前服务是否被强行取消，在该情况下，引用当前无效并且不能使用。
@return 如果当前服务被强行取消，则返回 <code>true</code>

<!-- END DATA -->
