<!-- BEGIN KEY -->
public interface java.beans.beancontext.BeanContextProxy
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
此接口由并不直接拥有（通过实现该接口或一个子接口拥有）与之关联的 BeanContext(Child)，但是拥有它代理的一个公共 BeanContext(Child) 的 JavaBean 实现。例如，java.awt.Container 的子类可以有一个与之关联的 BeanContext，它将包含该 Container 的所有子 Component。
 </p>
 <p>
一个对象不能同时实现此接口和 BeanContextChild 接口（或者所有子接口），它们互不相容。
 </p>
 <p>
为了获得 BeanContextChild 的特定子接口，此接口的调用者应检查返回类型，如下所示：
 <code>
 BeanContextChild bcc = o.getBeanContextProxy();

 if (bcc instanceof BeanContext) {
 	// ...
 }
 </code>
 or
 <code>
 BeanContextChild bcc = o.getBeanContextProxy();
 BeanContext      bc  = null;

 try {
     bc = (BeanContext)bcc; 
 } catch (ClassCastException cce) {
     // cast failed, bcc is not an instanceof BeanContext 
 }
 </code>
 </p>
 <p>
返回值是一个常量，表示实现实例的生存期
 </p>
@author Laurence P. G. Cable
@version 1.12, 11/17/05
@since 1.2

@see java.beans.beancontext.BeanContextChild
@see java.beans.beancontext.BeanContextChildSupport

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextChild java.beans.beancontext.BeanContextProxy.getBeanContextProxy()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得与此对象相关联的 <code>BeanContextChild</code>（或子接口）。
@return 与此对象相关联的 <code>BeanContextChild</code>（或子接口）

<!-- END DATA -->
