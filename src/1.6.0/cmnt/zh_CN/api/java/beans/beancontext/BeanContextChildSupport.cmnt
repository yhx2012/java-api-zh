<!-- BEGIN KEY -->
public class java.beans.beancontext.BeanContextChildSupport extends java.lang.Object implements java.beans.beancontext.BeanContextChild, java.beans.beancontext.BeanContextServicesListener, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
这是一个为实现 BeanContextChild 协议提供支持的一般支持类。
 
要为给定的组件实现此接口，可以直接为此类创建子类，也可以封装和委托此类。
 </p>

@author	Laurence P. G. Cable
@version	1.17, 11/17/05
@since	1.2
 
@see	java.beans.beancontext.BeanContext
@see	java.beans.beancontext.BeanContextServices
@see	java.beans.beancontext.BeanContextChild

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextChild java.beans.beancontext.BeanContextChildSupport.beanContextChildPeer
<!-- END KEY -->
<!-- BEGIN DATA -->
在其中嵌套此 <code>BeanContextChild</code> 的 <code>BeanContext</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeSupport java.beans.beancontext.BeanContextChildSupport.pcSupport
<!-- END KEY -->
<!-- BEGIN DATA -->

与此 <tt>BeanContextChildSupport</tt> 相关联的 <tt>PropertyChangeSupport</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.VetoableChangeSupport java.beans.beancontext.BeanContextChildSupport.vcSupport
<!-- END KEY -->
<!-- BEGIN DATA -->
与此 <tt>BeanContextChildSupport</tt> 相关联的 <tt>VetoableChangeSupport</tt>。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient boolean java.beans.beancontext.BeanContextChildSupport.rejectedSetBCOnce
<!-- END KEY -->
<!-- BEGIN DATA -->
一个标志，指示在试图执行 setBeanContext 操作时，至少已经抛出了一个 <code>PropertyChangeVetoException</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextChildSupport()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 BeanContextChildSupport，其中已经为此类创建了子类以便实现 JavaBean 组件自身。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextChildSupport(BeanContextChild bcc)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 BeanContextChildSupport，其中 JavaBean 组件自身实现 BeanContextChild 并封装它，并将该接口委托给此实现

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.beancontext.BeanContextChildSupport.setBeanContext(BeanContext bc) throws java.beans.PropertyVetoException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置此 <code>BeanContextChildSupport</code> 的 <code>BeanContext</code>。
@param bc 分配给 <code>BeanContext</code> 属性的新值
@throws <code>PropertyVetoException</code> 如果拒绝更改

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.beans.beancontext.BeanContext java.beans.beancontext.BeanContextChildSupport.getBeanContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得此 <code>BeanContextChildSupport</code> 的嵌套 <code>BeanContext</code>。
@return 此 <code>BeanContextChildSupport</code> 的嵌套 <code>BeanContext</code>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChildSupport.addPropertyChangeListener(String name, PropertyChangeListener pcl)
<!-- END KEY -->
<!-- BEGIN DATA -->
为特定属性添加一个 PropertyChangeListener。可以多次添加同一侦听器对象。对于每个属性，该侦听器被调用的次数与为该属性添加此侦听器的次数相同。如果 <code>name</code> 或 <code>pcl</code> 为 null，则不会抛出任何异常并且不执行任何操作。

@param name 要侦听的属性的名称
@param pcl 要添加的 <code>PropertyChangeListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChildSupport.removePropertyChangeListener(String name, PropertyChangeListener pcl)
<!-- END KEY -->
<!-- BEGIN DATA -->
为特定属性移除一个 PropertyChangeListener。如果将 <code>pcl</code> 多次添加到指定属性的同一事件源，则在被移除之后，它获得的通知将减少一次。如果 <code>name</code> 为 null，则不会抛出任何异常并且不执行任何操作。如果 <code>pcl</code> 为 null，或者从不为指定属性添加 pcl，则不抛出任何异常并且不执行任何操作。

@param name 已被侦听的属性的名称
@param pcl 要移除的 PropertyChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChildSupport.addVetoableChangeListener(String name, VetoableChangeListener vcl)
<!-- END KEY -->
<!-- BEGIN DATA -->
为特定属性添加一个 VetoableChangeListener。可以多次添加同一侦听器对象。对于每个属性，该侦听器被调用的次数与为该属性添加此侦听器的次数相同。如果 <code>name</code> 或 <code>vcl</code> 为 null，则不会抛出任何异常并且不执行任何操作。

@param name 要侦听的属性的名称
@param vcl 要添加的 <code>VetoableChangeListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChildSupport.removeVetoableChangeListener(String name, VetoableChangeListener vcl)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除一个 <code>VetoableChangeListener</code>。如果将 <code>pcl</code> 多次添加到指定属性的同一事件源，则在被移除之后，它获得的通知将减少一次。如果 <code>name</code> 为 null，则不会抛出任何异常并且不执行任何操作。如果 <code>vcl</code> 为 null，或者从不为指定属性添加 pcl，则不抛出任何异常并且不执行任何操作。

@param name 已被侦听的属性的名称
@param vcl 要移除的 <code>VetoableChangeListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChildSupport.serviceRevoked(BeanContextServiceRevokedEvent bcsre)
<!-- END KEY -->
<!-- BEGIN DATA -->
由嵌套 BeanContext 提供的服务已经被取消。
 
子类可以重写此方法以便实现自己的行为。
@param bcsre 由于取消服务而触发的 <code>BeanContextServiceRevokedEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChildSupport.serviceAvailable(BeanContextServiceAvailableEvent bcsae)
<!-- END KEY -->
<!-- BEGIN DATA -->
可从嵌套 BeanContext 中获得新的服务。
 
子类可以重写此方法以便实现自己的行为。
@param bcsae 由于服务变得可用而触发的 BeanContextServiceAvailableEvent
 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextChild java.beans.beancontext.BeanContextChildSupport.getBeanContextChildPeer()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得与此 <tt>BeanContextChildSupport</tt> 相关联的 <tt>BeanContextChild</tt>。

@return 此类的 <tt>BeanContextChild</tt> 同位体。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.beancontext.BeanContextChildSupport.isDelegated()
<!-- END KEY -->
<!-- BEGIN DATA -->
报告此类是否是另一个类的委托。
 
@return true 如果此类是另一个类的委托

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChildSupport.firePropertyChange(String name, Object oldValue, Object newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
向所有已注册的侦听器报告绑定 (bound) 属性更新。如果新属性和旧属性相同并且是非 null 的，则不会触发事件。
@param name 已更改属性的编程名称
@param oldValue  属性的旧值
@param newValue  属性的新值

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChildSupport.fireVetoableChange(String name, Object oldValue, Object newValue) throws java.beans.PropertyVetoException
<!-- END KEY -->
<!-- BEGIN DATA -->
向所有已注册的侦听器报告 vetoable 属性更新。如果任何人禁止更改，则触发一个新的事件，该事件将每个人的属性还原为旧值，然后再次抛出 PropertyVetoException。 <P>

如果新属性和旧属性相等并且是非 null 的，则不会触发事件。
 <P>
@param name 将更改属性的编程名称
 
@param oldValue 属性的旧值
@param newValue 属性的新值
 
@throws PropertyVetoException 如果接收方希望回滚属性更改。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.beancontext.BeanContextChildSupport.validatePendingSetBeanContext(BeanContext newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
从 setBeanContext 调用，以验证（或相反）嵌套 BeanContext 属性值中的挂起更改。返回 false 将造成 setBeanContext 抛出 PropertyVetoException。
@param newValue 已为 BeanContext 属性请求的新值
@return 如果禁止执行更改操作，则返回 <code>true</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.beans.beancontext.BeanContextChildSupport.releaseBeanContextResources()
<!-- END KEY -->
<!-- BEGIN DATA -->
子类可重写此方法来提供它们自己的释放行为。在调用此方法时，应该释放此实例从其当前 BeanContext 属性中获得的所有资源，因为对象不再嵌套在 BeanContext 中。

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.beans.beancontext.BeanContextChildSupport.initializeBeanContextResources()
<!-- END KEY -->
<!-- BEGIN DATA -->
子类可重写此方法来提供它们自己的初始化行为。在调用此方法时，BeanContextChild 所需的资源应该从当前 BeanContext 中获得。

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.beans.beancontext.BeanContextChildSupport.readObject(ObjectInputStream ois) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
恢复一个持久对象，必须等待后续 setBeanContext() 完全恢复从新的嵌套 BeanContext 中获得的所有资源

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.beans.beancontext.BeanContextChildSupport.writeObject(ObjectOutputStream oos) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
写入对象的持久状态。

<!-- END DATA -->
