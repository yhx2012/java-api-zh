<!-- BEGIN KEY -->
public interface java.beans.beancontext.BeanContext extends java.beans.beancontext.BeanContextChild, java.util.Collection, java.beans.DesignMode, java.beans.Visibility
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
BeanContext 是 JavaBean 的逻辑层次容器。
 </p>

@author Laurence P. G. Cable
@version 1.23, 12/19/03
@since 1.2

@see java.beans.Beans
@see java.beans.beancontext.BeanContextChild
@see java.beans.beancontext.BeanContextMembershipListener
@see java.beans.PropertyChangeEvent
@see java.beans.VetoableChangeEvent
@see java.beans.DesignMode
@see java.beans.Visibility
@see java.util.Collection

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Object java.beans.beancontext.BeanContext.globalHierarchyLock
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>BeanContext</code> 和 <code>BeanContextServices</code> 实现者均使用此全局锁定来序列化 <code>BeanContext</code> 中的更改和所有服务请求等。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.beans.beancontext.BeanContext.instantiateChild(String beanName) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
实例化指定为此 <code>BeanContext</code> 的一个子级的 javaBean。JavaBean 的实现源自 beanName 参数的值，并由 <code>java.beans.Beans.instantiate()</code> 方法定义。

@param beanName 要实例化为此 <code>BeanContext</code> 的子级的 JavaBean 的名称
@throws <code>IOException</code>
@throws <code>ClassNotFoundException</code> 如果没有找到由 beanName 参数标识的类

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream java.beans.beancontext.BeanContext.getResourceAsStream(String name, BeanContextChild bcc) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
与 <code>java.lang.ClassLoader.getResourceAsStream()</code> 类似，此方法允许 <code>BeanContext</code> 实现协调子 <code>Component</code> 和基础 <code>ClassLoader</code> 之间的行为。
 
@param name 资源的名称
@param bcc 指定的子级
@return 用于读取资源的 <code>InputStream</code>，如果无法找到资源，则返回 <code>null</code>。
@throws <code>IllegalArgumentException</code> 如果资源无效

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL java.beans.beancontext.BeanContext.getResource(String name, BeanContextChild bcc) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
与 <code>java.lang.ClassLoader.getResource()</code> 类似，此方法允许 <code>BeanContext</code> 实现协调子 <code>Component</code> 和基础 <code>ClassLoader</code> 之间的行为。
 
@param name 资源的名称
@param bcc 指定的子级
@return 指定子级的指定资源的 <code>URL</code>
@throws <code>IllegalArgumentException</code> 如果资源无效

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContext.addBeanContextMembershipListener(BeanContextMembershipListener bcml)
<!-- END KEY -->
<!-- BEGIN DATA -->
添加指定的 <code>BeanContextMembershipListener</code>，以便无论何时添加或移除一个子 <code>Component</code>，都可以接收来自此 <code>BeanContext</code> 的 <code>BeanContextMembershipEvents</code>。
 
@param bcml 要添加的 <code>BeanContextMembershipListener</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContext.removeBeanContextMembershipListener(BeanContextMembershipListener bcml)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除指定的 <code>BeanContextMembershipListener</code>，以便在添加或移除子 <code>Component</code> 时不再接收 <code>BeanContextMembershipEvent</code>。
 
@param bcml 要移除的 <code>BeanContextMembershipListener</code>

<!-- END DATA -->
