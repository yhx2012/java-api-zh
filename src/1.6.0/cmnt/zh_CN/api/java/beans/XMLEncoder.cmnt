<!-- BEGIN KEY -->
public class java.beans.XMLEncoder extends java.beans.Encoder
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>XMLEncoder</code> 类是 <code>ObjectOutputStream</code> 的互补替换，可用于生成 <em>JavaBean</em> 的文本表示形式，所使用方式与用 <code>ObjectOutputStream</code> 创建 <code>Serializable</code> 对象的二进制表示形式的方式相同。例如，可以使用以下代码片段创建所提供的 <em>JavaBean</em> 及其所有属性的文本表示形式：
 <pre>
       XMLEncoder e = new XMLEncoder(
                          new BufferedOutputStream(
                              new FileOutputStream(&quot;Test.xml&quot;)));
       e.writeObject(new JButton(&quot;Hello, world&quot;));
       e.close();
 </pre>

尽管两者的 API 类似，但 <code>XMLEncoder</code> 类仅设计用于将 <em>JavaBean</em> 的图形归档为其公共属性的文本表示形式。与 Java 源文件类似，以这种方式写入的文档在所涉及类的实现中可自然免除更改。在进程间通信和通用序列化中继续推荐使用 <code>ObjectOutputStream</code>。
 <p>
<code>XMLEncoder</code> 类提供 <em>JavaBean</em> 的默认指示，其中它们被表示为符合 1.0 版的 XML 规范和 Unicode/ISO 10646 字符集 UTF-8 字符编码的 XML 文档。由 <code>XMLEncoder</code> 类生成的 XML 文档如下：
 <ul>
 <li>
<em>轻便且版本灵活</em>：它们不依赖于任何类的私有实现，因此，与 Java 源文件类似，可以在某些不同版本的类之间或不同的供应商的 VM 之间交换它们。
 <li>
<em>结构紧凑</em>：<code>XMLEncoder</code> 类在内部使用<em>删减冗余 (redundancy elimination)</em> 算法，因此 Bean 属性的默认值不会被写入流中。
 <li>
<em>容错性</em>：文件中的非结构性错误（由于文件的破坏或在归档文件中对类进行的 API 更改导致）仍然保持本地化，因此 reader 可以报告错误，并继续加载不受错误影响的那部分文档。
 </ul>
 <p>
以下是一个 XML 归档文件的示例，它包含 <em>swing</em> 工具包中一些用户界面组件：
 <pre>
 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
 &lt;java version=&quot;1.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;
 &lt;object class=&quot;javax.swing.JFrame&quot;&gt;
   &lt;void property=&quot;name&quot;&gt;
     &lt;string&gt;frame1&lt;/string&gt;
   &lt;/void&gt;
   &lt;void property=&quot;bounds&quot;&gt;
     &lt;object class=&quot;java.awt.Rectangle&quot;&gt;
       &lt;int&gt;0&lt;/int&gt;
       &lt;int&gt;0&lt;/int&gt;
       &lt;int&gt;200&lt;/int&gt;
       &lt;int&gt;200&lt;/int&gt;
     &lt;/object&gt;
   &lt;/void&gt;
   &lt;void property=&quot;contentPane&quot;&gt;
     &lt;void method=&quot;add&quot;&gt;
       &lt;object class=&quot;javax.swing.JButton&quot;&gt;
         &lt;void property=&quot;label&quot;&gt;
           &lt;string&gt;Hello&lt;/string&gt;
         &lt;/void&gt;
       &lt;/object&gt;
     &lt;/void&gt;
   &lt;/void&gt;
   &lt;void property=&quot;visible&quot;&gt;
     &lt;boolean&gt;true&lt;/boolean&gt;
   &lt;/void&gt;
 &lt;/object&gt;
 &lt;/java&gt;
 </pre>
XML 语法使用以下约定：
 <ul>
 <li>
每个元素表示一个方法调用。
 <li>
&quot;object&quot; 标记表示一个<em>表达式</em>，其值被用作参数来封闭元素。
 <li>
&quot;void&quot; 标记表示将要执行的<em>语句</em>，但其结果不会被用作参数来封闭方法。
 <li>
包含元素的元素使用这些元素作为参数，除非它们有以下标记：&quot;void&quot;。
 <li>
方法的名称由 &quot;method&quot; 属性表示。
 <li>
XML 的标准 &quot;id&quot; 和 &quot;idref&quot; 属性用于引用以前的表达式，以便处理对象图形中的环形。
 <li>
&quot;class&quot; 属性用于显式指定静态方法的目标或构造方法；其值是类的完全限定名。
 <li>
如果没有通过 &quot;class&quot; 属性定义目标，则使用外部上下文将带有 &quot;void&quot; 标记的元素作为目标执行。
 <li>
Java 的 String 类被特殊对待并被写入 &lt;string&gt;Hello, world&lt;/string&gt;，其中使用 UTF-8 字符编码将字符串的字符转换成字节。
 </ul>
 <p>
尽管只使用这三个标记就可以写入所有对象图形，但以下定义也包括在内，以便能够更具体地表示普通数据结构：
 <p>
 <ul>
 <li>
默认方法名是 &quot;new&quot;。
 <li>
java 类的引用是以 &lt;class&gt;javax.swing.JButton&lt;/class&gt; 形式写入的。
 <li>
用于 Java 基本类型的包装器类的实例是通过将基本类型的名称用做标记来写入的。例如，<code>Integer</code> 类的实例可以写为：&lt;int&gt;123&lt;/int&gt;。注意，<code>XMLEncoder</code> 类使用了 Java 的反射包，在该包中，Java 的基本类型与其相关&ldquo;包装器类&rdquo;之间的转换是内部处理的。<code>XMLEncoder</code> 类自身的 API 只处理 <code>Object</code>。
 <li>
在表示 null 方法（其名称以 &quot;get&quot; 开头）的元素中，&quot;method&quot; 属性被 &quot;property&quot; 属性替代，后者的值是通过移除 &quot;get&quot; 前缀并取消所得结果的大写化得到的。
 <li>
在表示一元方法（其名称以 &quot;set&quot; 开头）的元素中，&quot;method&quot; 属性被 &quot;property&quot; 属性替代，后者的值是通过移除 &quot;set&quot; 前缀并取消所得结果的大写化得到的。
 <li>
在表示名为 &quot;get&quot; 且使用一个整数参数的方法的元素中，&quot;method&quot; 属性由 &quot;index&quot; 属性替换，后者的值是第一个参数的值。
 <li>
在表示名为 &quot;set&quot; 且使用两个参数（第一个参数为整数）的方法的元素中，&quot;method&quot; 属性由 &quot;index&quot; 属性替换，后者的值是第一个参数的值。
 <li>
数组的引用是使用 &quot;array&quot; 标记来编写的。&quot;class&quot; 和 &quot;length&quot; 属性分别指定数组的子类型和它的长度。
 </ul>

<p>
有关的更多信息，还可以参阅 <em>The Swing Connection</em> 中的 <a
 href="http://java.sun.com/products/jfc/tsc/articles/persistence4">Using XMLEncoder</a> 一文。 
@see XMLDecoder
@see java.io.ObjectOutputStream

@since 1.4

@version 1.35 03/09/06
@author Philip Milne

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.XMLEncoder(OutputStream out)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 XML 编码创建一个新的输出流，将 <em>JavaBeans</em> 发送给流 <code>out</code>。

@param out 接收对象的 XML 表示形式的流。

@see XMLDecoder#XMLDecoder(InputStream)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.XMLEncoder.setOwner(Object owner)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此编码器的所有者设置为 <code>owner</code>。

@param owner 此编码器的所有者。

@see #getOwner

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.beans.XMLEncoder.getOwner()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得此编码器的所有者。

@return 此编码器的所有者。

@see #setOwner

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.XMLEncoder.writeObject(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
将指定对象的 XML 表示形式写入输出中。

@param o 要写入流中的对象。

@see XMLDecoder#readObject

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.XMLEncoder.writeStatement(Statement oldStm)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录 Statement，以便 Encoder 在刷新流的缓存时产生实际输出。
 <P>
此方法只应在初始化持久委托的上下文中调用。

@param oldStm 将写入流中的语句。
@see java.beans.PersistenceDelegate#initialize

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.XMLEncoder.writeExpression(Expression oldExp)
<!-- END KEY -->
<!-- BEGIN DATA -->
记录 Expression，以便 Encoder 在刷新流的缓存时产生实际输出。
 <P>
此方法只应在初始化持久委托或设置编码器从资源包中读取数据的上下文中调用。
 <P>
有关利用 XMLEncoder 使用资源包的更多信息，请参阅 http://java.sun.com/products/jfc/tsc/articles/persistence4/#i18n

@param oldExp 将写入流中的表达式。
@see java.beans.PersistenceDelegate#initialize

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.XMLEncoder.flush()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果还没有写出导言，那么此方法将写出与 XML 编码有关的导言，并随后写出从最后一次调用 <code>flush</code> 以来写入流中的所有值。在刷新缓存之后，对已写入此流中的值的所有内部引用都被清除。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.XMLEncoder.close()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法调用 <code>flush</code>，写入结束后文，然后关闭与此流有关的输出流。

<!-- END DATA -->
