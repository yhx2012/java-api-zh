<!-- BEGIN KEY -->
public interface java.beans.PropertyEditor
<!-- END KEY -->
<!-- BEGIN DATA -->
PropertyEditor 类为希望允许用户编辑某个给定类型的属性值的 GUI 提供支持。
 <p>
PropertyEditor 支持各种不同类型的显示和更新属性值的方式。大多数 PropertyEditor 只需要支持此 API 中可用的不同选项的一个子集。
 <P>
简单的 PropertyEditor 可能只支持 getAsText 和 setAsText 方法，不需要支持（比如说）paintValue 或 getCustomEditor。更多复杂类型的 PropertyEditor 可能无法支持 getAsText 和 setAsText，但它们将改为支持 paintValue 和 getCustomEditor。
 <p>
每个 propertyEditor 都必须支持三种简单显示样式之一或更多。这样便可以：(1) 支持 isPaintable；(2) 从 getTags() 返回一个非 null 的 String[]，以及从 getAsText 返回一个非 null 值；(3) 只从 getAsText() 返回一个非 null 的 String。
 <p>
当此类是参数对象类型相对应的 propertyEditor 时，每个属性编辑器都必须支持调用 setValue。此外，每个属性编辑器都必须支持一个自定义编辑器，或者支持 setAsText。
 <p>
每个 PropertyEditor 都应该有一个 null 构造方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyEditor.setValue(Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置（或更改）将编辑的对象。必须将基本类型（比如 &quot;int&quot;）包装为相应的对象类型，比如 &quot;java.lang.Integer&quot;。

@param value 要编辑的新目标对象。注意，不应由 PropertyEditor 修改此对象，相反 PropertyEditor 应该创建一个新对象来保存所有修改值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.beans.PropertyEditor.getValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
获取属性值。

@return 属性值。将基本类型（比如 &quot;int&quot;）包装为相应的对象类型，比如 &quot;java.lang.Integer&quot;。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.PropertyEditor.isPaintable()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此属性编辑器是否是可绘制的。

@return  如果该类支持 paintValue 方法，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyEditor.paintValue(Graphics gfx, Rectangle box)
<!-- END KEY -->
<!-- BEGIN DATA -->
在屏幕实际状态给定区域中绘制值的表示形式。注意，propertyEditor 负责裁剪自身，以适应给定的矩形。
 <p>
如果 PropertyEditor 不支持绘制请求（参见 isPaintable），则此方法应该是一个静寂的无操作。
 <p>
给定 Graphics 对象将拥有父容器的默认字体、颜色等等。PropertyEditor 可以更改图形属性（比如字体和颜色），并且无需恢复旧值。

@param gfx 要绘制的 Graphics 对象。
@param box  应该在其中绘制图形对象的矩形。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.beans.PropertyEditor.getJavaInitializationString()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回一部分 Java 代码，可以使用这部分代码来设置某个属性，以匹配编辑器当前状态。此方法在生成 Java 代码来反映通过属性编辑器产生的更改时使用。
 <p>
代码片段应该是上下文无关的，并且必须是一个合法的 Java 表示式，正如 JLS 所规定的那样。
 <p>
明确地说，如果表达式表示某一计算，则所有类和静态成员都应是完全限定的。此规则适用于构造方法、静态方法和非基本参数。
 <p>
在对该表达式求值时应该使用警告，因为它可能抛出异常。特别要指出的是，代码生成器必须确保生成的代码能够在存在可能抛出已检查异常的表达式的情况下进行编译。
 <p>
示例结果是：
 <ul>
<li>基本表达式：<code>2</code>
<li>类构造方法：<code>new java.awt.Color(127,127,34)</code>
<li>静态字段：<code>java.awt.Color.orange</code>
<li>静态方法：<code>javax.swing.Box.createRigidArea(new java.awt.Dimension(0, 5))</code>
 </ul>

@return 表示用于当前值的 initializer 的 Java 代码片段。它不应该包含结束表达式的分号 ('<code>;</code>')。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.beans.PropertyEditor.getAsText()
<!-- END KEY -->
<!-- BEGIN DATA -->
以文本形式获得属性值。
 
@return 可编辑字符串形式的属性值。
<p>   如果无法将该值表示为可编辑的字符串，则返回 null。
<p>   如果返回的是一个非 null 值，则应该准备好 PropertyEditor，以便回到 setAsText() 中解析字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyEditor.setAsText(String text) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
通过解析给定 String 设置属性值。如果该 String 格式出错或者无法将此类属性表示为文本，则可能引发 java.lang.IllegalArgumentException。
@param      text   要解析的字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] java.beans.PropertyEditor.getTags()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果属性值必须是一组已知的加标记值之一，则此方法应该返回一个标记数组。可以用此方法来表示（例如）枚举值。如果 PropertyEditor 支持标记，那么它应该支持使用 setAsText（同时使用标记值）作为设置值的一种方式，并支持使用 getAsText 来标识当前值。

@return     此属性的标记值。如果无法将此属性表示为加标记的值，则返回 null。
	
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.beans.PropertyEditor.getCustomEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->
PropertyEditor 可以选择使用完全自定义的 Component 来编辑自己的属性值。PropertyEditor 负责将其自身与其编辑器 Component 联系起来，并报告由于激发 PropertyChange 事件而造成的属性值更改。
 <P>
调用 getCustomEditor 的更高级别的代码可以将 Component 嵌入一些更大的属性表单，或者放入它们自己的个别对话框，或者……

@return 允许用户直接编辑当前属性值的 java.awt.Component。如果这不受支持，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.PropertyEditor.supportsCustomEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定此属性编辑器是否支持自定义编辑器。

@return  如果 propertyEditor 可以提供一个自定义编辑器，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyEditor.addPropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
注册一个用于 PropertyChange 事件的侦听器。当 PropertyEditor 更改自己的值时，它应该在所有已注册的 PropertyChangeListener 上激发一个 PropertyChange 事件，指定 null 值为属性名称，并指定自身为源。

@param listener  激发 PropertyChange 事件时要调用的对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyEditor.removePropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除一个用于 PropertyChange 事件的侦听器。

@param listener 要移除的 PropertyChange 侦听器。

<!-- END DATA -->
