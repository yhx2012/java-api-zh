<!-- BEGIN KEY -->
public class java.beans.PropertyDescriptor extends java.beans.FeatureDescriptor
<!-- END KEY -->
<!-- BEGIN DATA -->
PropertyDescriptor 描述 Java Bean 通过一对存储器方法导出的一个属性。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.PropertyDescriptor(String propertyName, java.lang.Class<?> beanClass) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
通过调用 getFoo 和 setFoo 存取方法，为符合标准 Java 约定的属性构造一个 PropertyDescriptor。因此如果参数名为 &quot;fred&quot;，则假定 writer 方法为 &quot;setFred&quot;，reader 方法为 &quot;getFred&quot;（对于 boolean 属性则为 &quot;isFred&quot;）。注意，属性名应该以小写字母开头，而方法名称中的首写字母将是大写的。

@param propertyName  属性的编程名称。
@param beanClass 目标 bean 的 Class 对象。例如 sun.beans.OurButton.class。
@exception IntrospectionException 如果在内省期间发生异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.PropertyDescriptor(String propertyName, java.lang.Class<?> beanClass, String readMethodName, String writeMethodName) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
此构造方法带有一个简单属性的名称和用于读写属性的方法名称。

@param propertyName  属性的编程名称。
@param beanClass 目标 bean 的 Class 对象。例如 sun.beans.OurButton.class。
@param readMethodName 用于读取属性值的方法名称。如果属性是只写的，则该参数可能为 null。
@param writeMethodName 用于写入属性值的方法名称。如果属性是只读的，则该参数可能为 null。
@exception IntrospectionException 如果在内省期间发生异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.PropertyDescriptor(String propertyName, Method readMethod, Method writeMethod) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
此构造方法带有某一简单属性的名称，以及用来读取和写入属性的 Method 对象。

@param propertyName  属性的编程名称。
@param readMethod 用于读取属性值的方法。如果属性是只写的，则该参数可能为 null。
@param writeMethod 用于写入属性值的方法。如果属性是只读的，则该参数可能为 null。
@exception IntrospectionException 如果在内省期间发生异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Class<?> java.beans.PropertyDescriptor.getPropertyType()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得属性的 Class 对象。

@return 属性的 Java 类型信息。注意，&quot;Class&quot; 对象可以描述内置 Java 类型，比如 &quot;int&quot;。如果此属性是一个不支持非索引访问的索引 (indexed) 属性，则结果可能是 &quot;null&quot;。
 <p>
而这里的类型是由 ReadMethod 返回的类型。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.reflect.Method java.beans.PropertyDescriptor.getReadMethod()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得应该用于读取属性值的方法。

@return 应该用于读取属性值的方法。如果无法读取该属性，则可能返回。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.PropertyDescriptor.setReadMethod(Method readMethod) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置应该用于读取属性值的方法。

@param readMethod 新的读取方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.reflect.Method java.beans.PropertyDescriptor.getWriteMethod()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得应该用于写入属性值的方法。

@return 应该用于写入属性值的方法。如果无法写入该属性，则可能返回。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.PropertyDescriptor.setWriteMethod(Method writeMethod) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
设置应该用于写入属性值的方法。

@param writeMethod 新的写入方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.PropertyDescriptor.isBound()
<!-- END KEY -->
<!-- BEGIN DATA -->
更新 &quot;bound&quot; 属性将导致更改该属性时激发 &quot;PropertyChange&quot; 事件。

@return 如果该属性是绑定 (bound) 属性，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyDescriptor.setBound(boolean bound)
<!-- END KEY -->
<!-- BEGIN DATA -->
更新 &quot;bound&quot; 属性将导致更改该属性时激发 &quot;PropertyChange&quot; 事件。

@param bound 如果该属性是绑定属性，则该属性为 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.PropertyDescriptor.isConstrained()
<!-- END KEY -->
<!-- BEGIN DATA -->
试图更新 &quot;Constrained&quot; 属性将导致更改该属性时激发 &quot;VetoableChange&quot; 事件。

@return 如果该属性是约束 (constrained) 属性，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyDescriptor.setConstrained(boolean constrained)
<!-- END KEY -->
<!-- BEGIN DATA -->
试图更新 &quot;Constrained&quot; 属性将导致更改该属性时激发 &quot;VetoableChange&quot; 事件。

@param constrained 如果该属性是约束属性，则该属性为 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyDescriptor.setPropertyEditorClass(java.lang.Class<?> propertyEditorClass)
<!-- END KEY -->
<!-- BEGIN DATA -->
通常 PropertyEditor 是使用 PropertyEditorManager 找到的。不过，如果出于某些原因想将特定 PropertyEditor 与某一给定属性相关联，那么可以使用此方法做到这一点。

@param propertyEditorClass  所需 PropertyEditor 的 Class。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class<?> java.beans.PropertyDescriptor.getPropertyEditorClass()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得已为此属性注册的任何显式 PropertyEditor Class。

@return 已为此属性注册的任何显式 PropertyEditor Class。通常此方法将返回 &quot;null&quot;，指示没有注册特殊编辑器，所以 PropertyEditorManager 应该用于查找合适的 PropertyEditor。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.PropertyEditor java.beans.PropertyDescriptor.createPropertyEditor(Object bean)
<!-- END KEY -->
<!-- BEGIN DATA -->
使用当前属性编辑器类构造一个属性编辑器实例。
 <p>
如果属性编辑器类拥有一个带有 Object 参数的公共构造方法，则将通过使用 bean 参数作为变量来调用它。否则将调用默认构造方法。

@param bean 源对象
@return 属性编辑器实例，如果没有定义或无法创建属性编辑器，则返回 null
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.PropertyDescriptor.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
将此 <code>PropertyDescriptor</code> 与指定对象进行比较。如果对象是相同的，则返回 true。如果读取、写入、属性类型、属性编辑器和标记都是等同的，则两个 <code>PropertyDescriptor</code> 是相同的。

@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.beans.PropertyDescriptor.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回对象的哈希码。关于完整的描述，请参阅 {@link java.lang.Object#hashCode}。

@return  此对象的哈希码值。
@since 1.5

<!-- END DATA -->
