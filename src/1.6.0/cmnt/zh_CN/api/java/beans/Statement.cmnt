<!-- BEGIN KEY -->
public class java.beans.Statement extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>Statement</code> 对象表示基本语句，其中将单个方法应用于某一目标和一组参数，以返回结果，比如 <code>&quot;a.setFoo(b)&quot;</code>。注意，此示例使用名称来指示目标及其参数，statement 对象不需要名称空间，可以使用值本身构造。statement 对象将指定方法与其环境相关联，作为值的简单集合：目标和参数值数组。

@since 1.4

@version 1.31 05/23/06
@author Philip Milne

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.Statement(Object target, String methodName, java.lang.Object[] arguments)
<!-- END KEY -->
<!-- BEGIN DATA -->
按照所给参数创建一个新的 <code>Statement</code> 对象，使其具有 <code>target</code>、<code>methodName</code> 和 <code>arguments</code>。

@param target 此语句的目标。
@param methodName 此语句的 methodName。
@param arguments 此语句的参数。如果该参数为 <code>null</code>，则使用一个空数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.beans.Statement.getTarget()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此语句的目标。

@return 此语句的目标。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.beans.Statement.getMethodName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回方法名称。

@return 方法名称。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.beans.Statement.getArguments()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此语句的参数。

@return 此语句的参数。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.Statement.execute() throws java.lang.Exception
<!-- END KEY -->
<!-- BEGIN DATA -->
执行方法找到一个与 methodName 属性同名的方法，并在目标上调用该方法。

当目标的类使用给定名称定义大量方法时，该实现应该使用 Java Language Specification (15.11) 中指定的算法选择最明确的方法。目标和参数的动态类被用于替换编译时类型信息，与 <code>java.lang.reflect.Method</code> 类本身类似，基本值与相关包装器类之间的转换是内部处理的。
 <p>
以下方法类型被作为特殊情况处理：
 <ul>
 <li>
可以通过将类对象用作目标来调用静态方法。
 <li>
使用保留的方法名 &quot;new&quot; 调用类的构造方法，如同所有类都定义了静态 &quot;new&quot; 方法。构造方法调用通常被认为是 <code>Expression</code> 而不是 <code>Statement</code>，因为它们返回一个值。
 <li>
<code>java.util.List</code> 接口中定义的方法名称 &quot;get&quot; 和 &quot;set&quot; 也可以应用于数组实例，映射到 <code>Array</code> 类中同一名称的静态方法。
 </ul>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.beans.Statement.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 Java 风格的语法打印此语句的值。

<!-- END DATA -->
