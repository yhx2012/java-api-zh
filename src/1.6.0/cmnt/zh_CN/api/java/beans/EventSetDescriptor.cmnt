<!-- BEGIN KEY -->
public class java.beans.EventSetDescriptor extends java.beans.FeatureDescriptor
<!-- END KEY -->
<!-- BEGIN DATA -->
描述给定 Java bean 激发的一组事件的 EventSetDescriptor。
 <P>
给定的事件组都是作为方法调用在单个事件侦听器接口上传递的，事件侦听器对象可以通过调用事件源提供的注册方法进行注册。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.EventSetDescriptor(java.lang.Class<?> sourceClass, String eventSetName, java.lang.Class<?> listenerType, String listenerMethodName) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
假定按照最简单的标准设计模式创建 <TT>EventSetDescriptor</TT>，其中指定事件 &quot;fred&quot; 是 (1) 作为接口 FredListener 的单个方法上的调用传递的；(2) 它有一个 FredEvent 类型的参数；(3) 其中 FredListener 可以通过调用源组件的 addFredListener 方法注册，并通过调用 removeFredListener 方法移除。

@param sourceClass  激发事件的类。
@param eventSetName  事件的编程名称。例如 &quot;fred&quot;。注意，此参数通常应该以小写字母开头。
@param listenerType  事件将被传递到的目标接口。
@param listenerMethodName  事件传递到其目标侦听器接口时调用的方法。
@exception IntrospectionException 如果在内省期间发生异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.EventSetDescriptor(java.lang.Class<?> sourceClass, String eventSetName, java.lang.Class<?> listenerType, java.lang.String[] listenerMethodNames, String addListenerMethodName, String removeListenerMethodName) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用字符串名称从头开始创建 <TT>EventSetDescriptor</TT>。

@param sourceClass  激发事件的类。
@param eventSetName  事件集的编程名称。注意，此参数通常应该以小写字母开头。
@param listenerType  事件将被传递到的目标接口的 Class。
@param listenerMethodNames  事件传递到其目标侦听器接口时调用的方法的名称。
@param addListenerMethodName  可用来注册事件侦听器对象的事件源上的方法名称。
@param removeListenerMethodName  可用来取消注册事件侦听器对象的事件源上的方法名称。
@exception IntrospectionException 如果在内省期间发生异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.EventSetDescriptor(java.lang.Class<?> sourceClass, String eventSetName, java.lang.Class<?> listenerType, java.lang.String[] listenerMethodNames, String addListenerMethodName, String removeListenerMethodName, String getListenerMethodName) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
此构造方法使用字符串名称从头开始创建 EventSetDescriptor。

@param sourceClass  激发事件的类。
@param eventSetName  事件集的编程名称。注意，此参数通常应该以小写字母开头。
@param listenerType  事件将被传递到的目标接口的 Class。
@param listenerMethodNames  事件传递到其目标侦听器接口时调用的方法的名称。
@param addListenerMethodName  可用来注册事件侦听器对象的事件源上的方法名称。
@param removeListenerMethodName  可用来取消注册事件侦听器对象的事件源上的方法名称。
@param getListenerMethodName  可用来访问事件侦听器对象数组的事件源上的方法。
@exception IntrospectionException 如果在内省期间发生异常。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.EventSetDescriptor(String eventSetName, java.lang.Class<?> listenerType, java.lang.reflect.Method[] listenerMethods, Method addListenerMethod, Method removeListenerMethod) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 <TT>java.lang.reflect.Method</TT> 和 <TT>java.lang.Class</TT> 对象从头开始创建 <TT>EventSetDescriptor</TT>。

@param eventSetName  事件集的编程名称。
@param listenerType 侦听器接口的 Class。
@param listenerMethods  描述处理目标侦听器中方法的每个事件的 Method 对象数组。
@param addListenerMethod  可用来注册事件侦听器对象的事件源上的方法。
@param removeListenerMethod  可用来取消注册事件侦听器对象的事件源上的方法。
@exception IntrospectionException 如果在内省期间发生异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.EventSetDescriptor(String eventSetName, java.lang.Class<?> listenerType, java.lang.reflect.Method[] listenerMethods, Method addListenerMethod, Method removeListenerMethod, Method getListenerMethod) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
此构造方法使用 java.lang.reflect.Method 和 java.lang.Class 对象从头开始创建 EventSetDescriptor。

@param eventSetName  事件集的编程名称。
@param listenerType 侦听器接口的 Class。
@param listenerMethods  描述处理目标侦听器中方法的每个事件的 Method 对象数组。
@param addListenerMethod  可用来注册事件侦听器对象的事件源上的方法。
@param removeListenerMethod  可用来取消注册事件侦听器对象的事件源上的方法。
@param getListenerMethod  可用来访问事件侦听器对象数组的事件源上的方法。
@exception IntrospectionException 如果在内省期间发生异常。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.EventSetDescriptor(String eventSetName, java.lang.Class<?> listenerType, java.beans.MethodDescriptor[] listenerMethodDescriptors, Method addListenerMethod, Method removeListenerMethod) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
使用 <TT>java.lang.reflect.MethodDescriptor</TT> 和 <TT>java.lang.Class</TT> 对象从头开始创建 <TT>EventSetDescriptor</TT>。

@param eventSetName  事件集的编程名称。
@param listenerType 侦听器接口的 Class。
@param listenerMethodDescriptors  描述处理目标侦听器中方法的每个事件的 MethodDescriptor 对象数组。
@param addListenerMethod  可用来注册事件侦听器对象的事件源上的方法。
@param removeListenerMethod  可用来取消注册事件侦听器对象的事件源上的方法。
@exception IntrospectionException 如果在内省期间发生异常。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class<?> java.beans.EventSetDescriptor.getListenerType()
<!-- END KEY -->
<!-- BEGIN DATA -->

获得目标接口的 <TT>Class</TT> 对象。

@return 激发事件时将调用的目标接口的 Class 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.reflect.Method[] java.beans.EventSetDescriptor.getListenerMethods()
<!-- END KEY -->
<!-- BEGIN DATA -->

获得目标侦听器接口的方法。

@return 激发事件时将调用的目标侦听器接口中目标方法的 <TT>Method</TT> 对象数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.beans.MethodDescriptor[] java.beans.EventSetDescriptor.getListenerMethodDescriptors()
<!-- END KEY -->
<!-- BEGIN DATA -->

获得目标侦听器接口的 <code>MethodDescriptor</code>。

@return 激发事件时将调用的目标侦听器接口中目标方法的 <code>MethodDescriptor</code> 对象数组。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.reflect.Method java.beans.EventSetDescriptor.getAddListenerMethod()
<!-- END KEY -->
<!-- BEGIN DATA -->

获得用来添加事件侦听器的方法。

@return 用来在事件源注册侦听器的方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.reflect.Method java.beans.EventSetDescriptor.getRemoveListenerMethod()
<!-- END KEY -->
<!-- BEGIN DATA -->

获得用来移除事件侦听器的方法。

@return 用来在事件源移除侦听器的方法。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.reflect.Method java.beans.EventSetDescriptor.getGetListenerMethod()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得用来访问已注册事件侦听器的方法。
 
@return 用来访问事件源处的侦听器数组的方法，如果不存在侦听器，则返回 null。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.EventSetDescriptor.setUnicast(boolean unicast)
<!-- END KEY -->
<!-- BEGIN DATA -->
将事件集标记为单播（或非单播）。

@param unicast  如果事件集是单播的，则该参数为 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.EventSetDescriptor.isUnicast()
<!-- END KEY -->
<!-- BEGIN DATA -->
通常事件源是多播的。不过也有是严格单播的一些例外。

@return  如果事件集是单播的，则返回 <TT>true</TT>。默认值为 <TT>false</TT>。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.EventSetDescriptor.setInDefaultEventSet(boolean inDefaultEventSet)
<!-- END KEY -->
<!-- BEGIN DATA -->
将事件集标记为&ldquo;默认&rdquo;集合（或非默认集合）。默认情况下，该值为 <TT>true</TT>。

@param inDefaultEventSet 如果事件集在&ldquo;默认&rdquo;集合中，则该参数为 <code>true</code>，否则为 <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.EventSetDescriptor.isInDefaultEventSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
报告事件集是否在&ldquo;默认&rdquo;集合中。

@return  如果事件集在&ldquo;默认&rdquo;集合中，则返回 <TT>true</TT>。默认值为 <TT>true</TT>。

<!-- END DATA -->
