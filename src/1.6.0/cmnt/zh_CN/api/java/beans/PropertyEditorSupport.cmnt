<!-- BEGIN KEY -->
public class java.beans.PropertyEditorSupport extends java.lang.Object implements java.beans.PropertyEditor
<!-- END KEY -->
<!-- BEGIN DATA -->
这是一个帮助构建属性编辑器的支持类。
 <p>
可以将该类用作一个基类或是一个代理。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.PropertyEditorSupport()
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>PropertyEditorSupport</code> 对象。
 
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.PropertyEditorSupport(Object source)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>PropertyEditorSupport</code> 对象。

@param source 用来激发事件的源
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.beans.PropertyEditorSupport.getSource()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回用作事件源的 bean。如果没有显式设置源，则返回 <code>PropertyEditorSupport</code> 的此实例。

@return  源对象或此实例
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyEditorSupport.setSource(Object source)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置源 bean。
 <p>
源 bean 被用作属性更改的事件源。此源应该仅用于获得信息，不应被 PropertyEditor 修改。

@param source 将用于事件的源对象
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyEditorSupport.setValue(Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
设置（或更改）将被编辑的对象。

@param value 要编辑的新目标对象。注意，不应由 PropertyEditor 修改此对象，相反 PropertyEditor 应该创建一个新对象来保存所有修改值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.beans.PropertyEditorSupport.getValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得属性值。

@return 属性值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.PropertyEditorSupport.isPaintable()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定该类是否支持 paintValue 方法。

@return  如果该类支持 paintValue 方法，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyEditorSupport.paintValue(Graphics gfx, Rectangle box)
<!-- END KEY -->
<!-- BEGIN DATA -->
在屏幕实际状态给定区域中绘制值的表示形式。注意，propertyEditor 负责裁剪自身，以适应给定的矩形。
 <p>
如果 PropertyEditor 不支持绘制请求（参见 isPaintable），则此方法应该是一个静寂的无操作。

@param gfx 要绘制的 Graphics 对象。
@param box  应该在其中绘制图形对象的矩形。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.beans.PropertyEditorSupport.getJavaInitializationString()
<!-- END KEY -->
<!-- BEGIN DATA -->
生成 Java 代码来设置属性值时使用此方法。它应该返回一段可以用来利用当前属性值初始化变量的 Java 代码。
 <p>
示例结果是 &quot;2&quot;、&quot;new Color(127,127,34)&quot;、&quot;Color.orange&quot; 等等。

@return 表示用于当前值的 initializer 的 Java 代码片段。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.beans.PropertyEditorSupport.getAsText()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得人类可编辑的适当字符串表示形式的属性值。

@return 人类可编辑的适当字符串表示形式的属性值。
<p>   如果无法将该值表示为字符串，则返回 &quot;null&quot;。
<p>   如果返回的是一个非 null 值，则应该准备好 PropertyEditor，以便回到 setAsText() 解析该字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyEditorSupport.setAsText(String text) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
通过解析给定字符串设置属性值。如果该 String 格式出错或者无法将此类属性表示为文本，则可能引发 java.lang.IllegalArgumentException。

@param text 要解析的字符串。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] java.beans.PropertyEditorSupport.getTags()
<!-- END KEY -->
<!-- BEGIN DATA -->
如果属性值必须是一组已知的加标记值之一，则此方法应该返回一个标记值数组。可以用此方法来表示（例如）枚举值。如果 PropertyEditor 支持标记，则它应该支持使用 setAsText（同时使用标记值）作为设置值的一种方式。

@return     此属性的标记值。如果无法将此属性表示为加标记的值，则返回 null。
	
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.beans.PropertyEditorSupport.getCustomEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->
PropertyEditor 可以选择使用完全自定义的 Component 来编辑自己的属性值。PropertyEditor 负责将其自身与其编辑器 Component 联系起来，并报告由于激发 PropertyChange 事件而造成的属性值更改。
 <P>
调用 getCustomEditor 的更高级别的代码可以将 Component 嵌入一些较大的属性表，或者将它们放入自己的对话框，或者……

@return 允许用户直接编辑当前属性值的 java.awt.Component。如果这不受支持，则返回 null。

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.PropertyEditorSupport.supportsCustomEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->
确定 propertyEditor 是否可以提供自定义编辑器。

@return  如果 propertyEditor 可以提供一个自定义编辑器，则返回 true。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.PropertyEditorSupport.addPropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
注册一个用于 PropertyChange 事件的侦听器。只要更新该值，该类就会激发一个 PropertyChange 值。

@param listener  激发 PropertyChange 事件时要调用的对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.PropertyEditorSupport.removePropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
移除一个用于 PropertyChange 事件的侦听器。

@param listener 要移除的 PropertyChange 侦听器。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyEditorSupport.firePropertyChange()
<!-- END KEY -->
<!-- BEGIN DATA -->
报告已经修改所有感兴趣的侦听器。

<!-- END DATA -->
