<!-- BEGIN KEY -->
public class java.beans.XMLDecoder extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>XMLDecoder</code> 类用于读取使用 <code>XMLEncoder</code> 创建的 XML 文档，用途类似于 <code>ObjectInputStream</code>。例如，用户可以使用以下代码片段来读取以 XML 文档形式（通过 <code>XMLEncoder</code> 类写入）定义的第一个对象： 
 <pre>
       XMLDecoder d = new XMLDecoder(
                          new BufferedInputStream(
                              new FileInputStream(&quot;Test.xml&quot;)));
       Object result = d.readObject();
       d.close();
 </pre>
 
<p>
有关的更多信息，还可以参阅 <em>The Swing Connection</em> 中的 <a
 href="http://java.sun.com/products/jfc/tsc/articles/persistence3">Long Term Persistence of JavaBeans Components:XML Schema</a> 一文。
@see XMLEncoder
@see java.io.ObjectInputStream

@since 1.4
 
@version 1.32 11/30/05
@author Philip Milne

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.XMLDecoder(InputStream in)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建一个新的输入流，以读取由 <code>XMLEncoder</code> 类创建的档案。 

@param in 基础流。 

@see XMLEncoder#XMLEncoder(java.io.OutputStream)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.XMLDecoder(InputStream in, Object owner)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建一个新的输入流，以读取由 <code>XMLEncoder</code> 类创建的档案。 

@param in 基础流。
@param owner 此流的所有者。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.XMLDecoder(InputStream in, Object owner, ExceptionListener exceptionListener)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建一个新的输入流，以读取由 <code>XMLEncoder</code> 类创建的档案。 

@param in 基础流。
@param owner 此流的所有者。
@param exceptionListener 该流的异常处理程序，如果为 <code>null</code>，则使用默认异常处理程序。

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.XMLDecoder(InputStream in, Object owner, ExceptionListener exceptionListener, ClassLoader cl)
<!-- END KEY -->
<!-- BEGIN DATA -->

创建一个新的输入流，以读取由 <code>XMLEncoder</code> 类创建的档案。 

@param in 基础流。可以传递 <code>null</code> 而不会出现错误，尽管得到的 XMLDecoder 将是无用的
@param owner 此流的所有者。<code>null</code> 是一个合法值
@param exceptionListener 流的异常处理程序，<code>null</code> 表示使用默认处理程序
@param cl 用于实例化对象的类加载器。<code>null</code> 指示应该使用默认类加载器
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.XMLDecoder.close()
<!-- END KEY -->
<!-- BEGIN DATA -->
此方法关闭与此流相关联的输入流。 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.XMLDecoder.setExceptionListener(ExceptionListener exceptionListener)
<!-- END KEY -->
<!-- BEGIN DATA -->

将此流的异常处理程序设置为 <code>exceptionListener</code>。当此流捕获可恢复的异常时，异常处理程序会获得通知。
 
@param exceptionListener 此流的异常处理程序，如果该参数为 <code>null</code>，则使用默认异常处理程序。 

@see #getExceptionListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.ExceptionListener java.beans.XMLDecoder.getExceptionListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得此流的异常处理程序。 
 
@return 此流的异常处理程序。如果没有显式设置异常处理程序，则返回默认异常侦听器。

@see #setExceptionListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.beans.XMLDecoder.readObject()
<!-- END KEY -->
<!-- BEGIN DATA -->

从基础输入流中读取下一个对象。 

@return     读取的下一个对象

@throws ArrayIndexOutOfBoundsException 如果流中没有包含任何对象（或者没有更多的对象）

@see XMLEncoder#writeObject

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.XMLDecoder.setOwner(Object owner)
<!-- END KEY -->
<!-- BEGIN DATA -->

将此解码器的所有者设置为 <code>owner</code>。 
 
@param owner 此解码器的所有者。 

@see #getOwner

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.beans.XMLDecoder.getOwner()
<!-- END KEY -->
<!-- BEGIN DATA -->
获得此解码器的所有者。 
 
@return 此解码器的所有者。 

@see #setOwner

<!-- END DATA -->
