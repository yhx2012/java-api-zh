<!-- BEGIN KEY -->
public class java.beans.PropertyChangeSupport extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
这是一个实用工具类，支持绑定 (bound) 属性的 bean 可以使用该类。可以使用此类的实例作为 bean 的成员字段，并将各种工作委托给它。

此类是可序列化的。在对它进行序列化时，它将保存（并恢复）本身可序列化的所有侦听器。在序列化期间，将跳过所有不可序列化的侦听器。

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.util.Hashtable java.beans.PropertyChangeSupport.children
<!-- END KEY -->
<!-- BEGIN DATA -->

管理特定属性的侦听器的哈希表。将属性名称映射到 PropertyChangeSupport 对象。
@serial
@since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Object java.beans.PropertyChangeSupport.source
<!-- END KEY -->
<!-- BEGIN DATA -->

将作为所有已生成事件的&ldquo;源&rdquo;提供的对象。
@serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.beans.PropertyChangeSupport.propertyChangeSupportSerializedDataVersion
<!-- END KEY -->
<!-- BEGIN DATA -->
内部版本号
@serial
@since

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.PropertyChangeSupport(Object sourceBean)
<!-- END KEY -->
<!-- BEGIN DATA -->
构造一个 <code>PropertyChangeSupport</code> 对象。

@param sourceBean  作为所有事件的源提供的 bean。

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.PropertyChangeSupport.addPropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
向侦听器列表添加一个 PropertyChangeListener。该侦听器是为所有属性注册的。同一侦听器对象可以被添加多次，并且它们被调用的次数与添加它们的次数相同。如果 <code>listener</code> 为 null，则不会抛出异常并且不执行操作。

@param   listener   要添加的 PropertyChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.PropertyChangeSupport.removePropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
从侦听器列表移除一个 PropertyChangeListener。此方法移除一个为所有属性注册的 PropertyChangeListener。如果将 <code>listener</code> 多次添加到同一事件源，则在被移除之后，它至少将被通知一次。如果 <code>listener</code> 为 null，或者从未被添加，则不会抛出异常并且不执行操作。

@param listener  要移除的 PropertyChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.beans.PropertyChangeListener[] java.beans.PropertyChangeSupport.getPropertyChangeListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回使用 addPropertyChangeListener() 添加到此 PropertyChangeSupport 对象中的所有侦听器组成的数组。
 <p>
如果已经使用指定属性添加一些侦听器，则返回的数组将是 PropertyChangeListener 和 <code>PropertyChangeListenerProxy</code> 的混合物。如果调用方法对区别侦听器感兴趣，那么它必须测试每个元素，以查看该元素是否是一个 <code>PropertyChangeListenerProxy</code>，然后执行强制转换并检查该参数。
 
 <pre>
 PropertyChangeListener[] listeners = bean.getPropertyChangeListeners();
 for (int i = 0; i &lt; listeners.length; i++) {
	 if (listeners[i] instanceof PropertyChangeListenerProxy) {
     PropertyChangeListenerProxy proxy = 
                    (PropertyChangeListenerProxy)listeners[i];
     if (proxy.getPropertyName().equals(&quot;foo&quot;)) {
       // proxy is a PropertyChangeListener which was associated
       // with the property named &quot;foo&quot;
     }
   }
 }
</pre>

@see PropertyChangeListenerProxy
@return 添加的所有 <code>PropertyChangeListener</code>，如果没有添加侦听器，则返回一个空数组
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.PropertyChangeSupport.addPropertyChangeListener(String propertyName, PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
为指定的属性向侦听器列表中添加一个 PropertyChangeListener。该侦听器只在调用 firePropertyChange 为特定属性命名时调用。可以多次添加同一侦听器对象。对于每个属性，该侦听器被调用的次数与为该属性添加此侦听器的次数相同。如果 <code>propertyName</code> 或 <code>listener</code> 为 null，则不会抛出异常并且不执行操作。

@param propertyName 要侦听的属性的名称。
@param   listener   要添加的 PropertyChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.PropertyChangeSupport.removePropertyChangeListener(String propertyName, PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
为特定属性移除一个 PropertyChangeListener。如果将 <code>listener</code> 多次添加到指定属性的同一事件源，则在被移除之后，它至少将被通知一次。如果 <code>propertyName</code> 为 null，则不会抛出异常并且不执行操作。如果 <code>listener</code> 为 null，或者从不为指定属性添加 pcl，则不抛出异常并不执行任何操作。

@param propertyName 已被侦听的属性的名称。
@param listener  要移除的 PropertyChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.beans.PropertyChangeListener[] java.beans.PropertyChangeSupport.getPropertyChangeListeners(String propertyName)
<!-- END KEY -->
<!-- BEGIN DATA -->
返回与指定属性相关联的所有侦听器的列表。

@param propertyName  将被侦听的属性的名称
@return 与指定属性相关联的所有 <code>PropertyChangeListener</code>。如果没有添加这样的侦听器，或者 <code>propertyName</code> 为 null，则返回一个空数组。
@since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyChangeSupport.firePropertyChange(String propertyName, Object oldValue, Object newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
报告所有已注册侦听器的绑定属性更新。如果新属性和旧属性相同并且是非 null 的，则不会触发事件。
<p>
这只是一个用来包装获取 {@code PropertyChangeEvent} 值的更一般 firePropertyChange 方法的便捷包装器。

@param propertyName  被更改属性的编程名称。
@param oldValue 属性的旧值。
@param newValue 属性的新值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyChangeSupport.firePropertyChange(String propertyName, int oldValue, int newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 int 值形式报告所有已注册侦听器的绑定属性更新。如果新属性和旧属性相同，则不会触发事件。
 <p>
这只是一个用来包装获取 Object 值的更常见 firePropertyChange 方法的便捷包装器。

@param propertyName  被更改属性的编程名称。
@param oldValue 属性的旧值。
@param newValue 属性的新值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyChangeSupport.firePropertyChange(String propertyName, boolean oldValue, boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 boolean 值形式报告所有已注册侦听器的绑定属性更新。如果新属性和旧属性相同，则不会触发事件。
 <p>
这只是一个用来包装获取 Object 值的更常见 firePropertyChange 方法的便捷包装器。

@param propertyName  被更改属性的编程名称。
@param oldValue 属性的旧值。
@param newValue 属性的新值。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeEvent evt)
<!-- END KEY -->
<!-- BEGIN DATA -->
对所有已注册侦听器激发一个现有 PropertyChangeEvent。如果给定事件的旧值和新值相等并且都是非 null 的，则不会激发事件。
@param  evt  PropertyChangeEvent 对象。

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyChangeSupport.fireIndexedPropertyChange(String propertyName, int index, Object oldValue, Object newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
报告所有已注册侦听器的绑定 (bound) 索引 (indexed) 属性更新。 
 <p>
如果旧值和新值相等并且都是非 null 的，则不会激发事件。
 <p>
这只是一个用来包装获取 {@code PropertyChangeEvent} 值的更一般 firePropertyChange 方法的便捷包装器。

@param propertyName  被更改属性的编程名称。
@param index  被更改属性元素的索引。
@param oldValue 属性的旧值。
@param newValue 属性的新值。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyChangeSupport.fireIndexedPropertyChange(String propertyName, int index, int oldValue, int newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>int</code> 值形式报告所有已注册侦听器的绑定索引属性更新。
 <p>
如果旧值和新值相等，则不会激发事件。
 <p>
这只是一个用来包装获取 Object 值的更常见 fireIndexedPropertyChange 方法的便捷包装器。

@param propertyName  被更改属性的编程名称。
@param index  被更改属性元素的索引。
@param oldValue 属性的旧值。
@param newValue 属性的新值。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyChangeSupport.fireIndexedPropertyChange(String propertyName, int index, boolean oldValue, boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
以 <code>boolean</code> 值形式报告所有已注册侦听器的绑定索引属性更新。 
 <p>
如果旧值和新值相等，则不会激发事件。
 <p>
这只是一个用来包装获取 Object 值的更常见 fireIndexedPropertyChange 方法的便捷包装器。

@param propertyName  被更改属性的编程名称。
@param index  被更改属性元素的索引。
@param oldValue 属性的旧值。
@param newValue 属性的新值。
@since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.beans.PropertyChangeSupport.hasListeners(String propertyName)
<!-- END KEY -->
<!-- BEGIN DATA -->
检查是否存在特定属性的任何侦听器，包括那些已在所有属性上注册的侦听器。如果 <code>propertyName</code> 为 null，则只检查所有属性上注册的侦听器。

@param       propertyName   属性名。
@return 如果存在给定属性的一个或多个侦听器，则返回 true

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.beans.PropertyChangeSupport.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
@serialData Null terminated list of <code>PropertyChangeListeners</code>。
 <p>
在进行序列化时，跳过不可序列化的侦听器，只序列化可序列化的侦听器。


<!-- END DATA -->
