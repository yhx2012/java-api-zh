<!-- BEGIN KEY -->
public class java.beans.EventHandler extends java.lang.Object implements java.lang.reflect.InvocationHandler
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>EventHandler</code> 类为动态生成事件侦听器提供支持，这些侦听器的方法执行一条涉及传入事件对象和目标对象的简单语句。 
 <p>
<code>EventHandler</code> 类由交互工具（比如应用程序生成器）使用，这些工具允许开发人员在 bean 之间建立连接。通常是建立从用户界面 bean（事件 <em>source</em>）到应用程序逻辑 bean（<em>target</em>）的连接。大多数这类有效连接隔离了应用程序逻辑与用户界面。例如，用于从 <code>JCheckBox</code> 到接受 boolean 值的方法之间连接的 <code>EventHandler</code> 可以处理复选框状态的提取，以及处理将其直接传递给该方法，从而使该方法与用户界面层隔离。 
 <p>
内部类是处理来自用户界面的事件的另一种更常见方法。<code>EventHandler</code> 类只处理可能使用内部类的事件的子集。不过，<code>EventHandler</code> 使用长期持久方案要比使用内部类更有效。同样，在同一接口被实现很多次的大型应用程序中，使用 <code>EventHandler</code> 可以减少应用程序的磁盘和内存占用。 
 <p>
使用 <code>EventHandler</code> 创建侦听器占用内存如此之少的原因是，<code>EventHandler</code> 所依赖的 <code>Proxy</code> 类共享了同一接口的实现。例如，如果使用 <code>EventHandler</code> 的 <code>create</code> 方法生成某个应用程序中的所有 <code>ActionListener</code>，则所有动作侦听器都将是单个类（由 <code>Proxy</code> 类创建）的实例。通常，基于 <code>Proxy</code> 类的侦听器要求为每个<em>侦听器类型</em>（接口）创建一个侦听器类，而使用内部类方法时要求为每个<em>侦听器</em>（实现接口的对象）创建一个类。 

 <p>
通常不需要直接处理 <code>EventHandler</code> 实例。相反，可使用 <code>EventHandler</code> 的 <code>create</code> 方法之一创建实现给定侦听器接口的对象。此侦听器对象在后台使用一个 <code>EventHandler</code> 对象来封装关于事件的信息、发生事件时发送消息的对象、要发送的消息（方法）和方法的任意参数。以下部分给出了如何使用 <code>create</code> 方法创建侦听器对象的示例。

<h2>使用 EventHandler 的示例</h2>

<code>EventHandler</code> 最简单的使用方法是安装一个侦听器，不带参数地在目标对象上调用某个方法。在以下示例中，将创建一个在 <code>javax.swing.JFrame</code> 实例上调用 <code>toFront</code> 方法的 <code>ActionListener</code>。

 <blockquote>
<pre>
myButton.addActionListener(
    (ActionListener)EventHandler.create(ActionListener.class, frame, &quot;toFront&quot;));
</pre>
 </blockquote>

当按下 <code>myButton</code> 时，将执行 <code>frame.toFront()</code> 语句。通过定义 <code>ActionListener</code> 接口的新实现并将其实例添加到按钮中，用户可以获得同样的效果，且具有额外的编译时类型安全： 

 <blockquote>
<pre>
//Equivalent code using an inner class instead of EventHandler.
myButton.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent e) {
        frame.toFront();
    }
});
</pre> 
 </blockquote>

<code>EventHandler</code> 的另一种最简单用法是从侦听器接口（通常是一个事件对象）中的方法的第一个参数中提取属性值，并用其设置目标对象中的属性值。在以下示例中，将创建一个 <code>ActionListener</code>，它将目标 (myButton) 对象的 <code>nextFocusableComponent</code> 属性设置为事件的 &quot;source&quot; 属性的值。

 <blockquote>
<pre>
EventHandler.create(ActionListener.class, myButton, "nextFocusableComponent", "source")
</pre>
 </blockquote>

这将对应于以下内部类实现： 

 <blockquote>
<pre>
//Equivalent code using an inner class instead of EventHandler.
new ActionListener() {
    public void actionPerformed(ActionEvent e) {
        myButton.setNextFocusableComponent((Component)e.getSource()); 
    }
}
</pre>
 </blockquote>
也可以创建一个只是将传入事件对象传递给目标动作的 <code>EventHandler</code>。如果 <code>EventHandler.create</code> 中的第四个参数为空字符串，则事件的传递方式如下：
<blockquote>
<pre>
EventHandler.create(ActionListener.class, target, "doActionEvent", "")
</pre>
 </blockquote>
这将对应于以下内部类实现：
<blockquote>
<pre>
//Equivalent code using an inner class instead of EventHandler.
new ActionListener() {
    public void actionPerformed(ActionEvent e) {
        target.doActionEvent(e);
    }
}
</pre>
 </blockquote>


<code>EventHandler</code> 最常见的用法可能是从事件对象的 <em>source</em> 中提取属性值，并将此值设置为目标对象的属性值。在以下示例中，将创建一个 <code>ActionListener</code>，它将目标对象的 &quot;label&quot; 属性设置为事件源的 &quot;text&quot; 属性的值（&quot;source&quot; 属性的值）。

 <blockquote>
<pre>
EventHandler.create(ActionListener.class, myButton, "label", "source.text")
</pre>
 </blockquote>

这将对应于以下内部类实现： 

 <blockquote>
<pre>
//Equivalent code using an inner class instead of EventHandler.
new ActionListener {
    public void actionPerformed(ActionEvent e) {
        myButton.setLabel(((JTextField)e.getSource()).getText()); 
    }
}
</pre>
 </blockquote>

可以使用以 &quot;.&quot; 字符分隔的任意数量的属性前缀来&ldquo;限定&rdquo;事件属性。采用出现在 &quot;.&quot; 字符前面的&ldquo;限定&rdquo;名称作为将应用于事件对象的属性名称，最左边的最先应用。  
 <p>  
例如，以下动作侦听器

 <blockquote>
<pre>
EventHandler.create(ActionListener.class, target, &quot;a&quot;, &quot;b.c.d&quot;)
</pre>
 </blockquote>

可以写成以下内部类（假定所有属性都有规范的获取方法并返回适当的类型）： 

 <blockquote>
<pre>
//Equivalent code using an inner class instead of EventHandler.
new ActionListener {
    public void actionPerformed(ActionEvent e) {
        target.setA(e.getB().getC().isD()); 
    }
}
</pre>
 </blockquote>
也可以使用以 "." 字符分隔的任意数量的属性前缀来“限定”目标属性。例如，以下动作侦听器：
<pre>
   EventHandler.create(ActionListener.class, target, "a.b", "c.d")
 </pre>
可以写成以下内部类（假定所有属性都有规范的获取方法并返回适当的类型）：
<pre>
   //Equivalent code using an inner class instead of EventHandler.
   new ActionListener {
     public void actionPerformed(ActionEvent e) {
         target.getA().setB(e.getC().isD()); 
    }
}
</pre>
 <p>
由于 <code>EventHandler</code> 最终依赖反射来调用方法，所以建议不要以重载方法为目标。
例如，如果目标是类 <code>MyTarget</code> 的一个实例，而 <code>MyTarget</code> 定义如下：
<pre>
   public class MyTarget {
     public void doIt(String);
     public void doIt(Object);
   }
 </pre>
那么方法 <code>doIt</code> 被重载。EventHandler 将基于源调用恰当的方法。如果源为 null，那么两个方法都可以，具体调用哪个方法是不确定的。因此，建议不要以重载方法为目标。
 
@see java.lang.reflect.Proxy
@see java.util.EventObject
 
@since 1.4 
 
@author Mark Davidson
@author Philip Milne
@author Hans Muller

@version 1.21 05/23/06

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.EventHandler(Object target, String action, String eventPropertyName, String listenerMethodName)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建一个新的 <code>EventHandler</code> 对象；通常使用 <code>create</code> 方法之一，而不是直接调用此构造方法。有关 <code>eventPropertyName</code> 和 <code>listenerMethodName</code> 参数的完整描述，请参考 {@link java.beans.EventHandler#create(Class, Object, String, String) create 的一般形式}。
 
@param target 将执行动作的对象
@param action 目标上属性或方法的（可能受限定的）名称
@param eventPropertyName 传入事件的可读属性的（可能受限定的）名称
@param listenerMethodName 应该触发该动作的侦听器接口中的方法名称
 
@see EventHandler
@see #create(Class, Object, String, String, String)
@see #getTarget
@see #getAction
@see #getEventPropertyName
@see #getListenerMethodName

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.beans.EventHandler.getTarget()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此事件处理程序将为其发送消息的对象。
 
@return 此事件处理程序的目标
@see #EventHandler(Object, String, String, String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.beans.EventHandler.getAction()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回此事件处理程序将设置的目标的可写属性名称，或者此事件处理程序将在目标上调用的方法名称。
 
@return 此事件处理程序的动作
@see #EventHandler(Object, String, String, String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.beans.EventHandler.getEventPropertyName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回应该在应用于目标的动作中使用的事件属性。 
 
@return  事件属性
 
@see #EventHandler(Object, String, String, String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.beans.EventHandler.getListenerMethodName()
<!-- END KEY -->
<!-- BEGIN DATA -->
返回将触发动作的属性名称。返回值为 <code>null</code> 表示侦听器接口中的所有方法都将触发该动作。  
 
@return 将触发该动作的方法名称

@see #EventHandler(Object, String, String, String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.beans.EventHandler.invoke(Object proxy, Method method, java.lang.Object[] arguments)
<!-- END KEY -->
<!-- BEGIN DATA -->
从事件中提取适当属性值，并将其传递到与此 <code>EventHandler</code> 相关联的动作。 

@param proxy 代理对象
@param method 侦听器接口中的方法
@return 对目标应用该操作的结果
 
@see EventHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public static T java.beans.EventHandler.create(java.lang.Class<T> listenerInterface, Object target, String action)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 <code>listenerInterface</code> 的实现，在该实现中，侦听器接口中的<em>所有</em> 方法都会将处理程序的 <code>action</code> 应用到 <code>target</code>。此方法是通过调用其他更常见的 <code>create</code> 方法实现来实现的，其中 <code>eventPropertyName</code> 和 <code>listenerMethodName</code> 都采用 <code>null</code> 值。有关 <code>action</code> 参数的完整描述，请参考 {@link java.beans.EventHandler#create(Class, Object, String, String) create 的一般形式}。 
 <p>
要创建一个使用 <code>dialog.show()</code> 显示 <code>JDialog</code> 的 <code>ActionListener</code>，用户可以编写以下代码：

<blockquote>
<pre>
EventHandler.create(ActionListener.class, dialog, &quot;show&quot;)
</pre>
</blockquote>

 <p>
@param listenerInterface 要为其创建代理的侦听器接口
@param target 将执行动作的对象
@param action 目标上的某个方法或（可能受限定的）属性的名称
 
@return 实现 <code>listenerInterface</code> 的对象

@throws NullPointerException 如果 <code>listenerInterface</code> 为 null
@throws NullPointerException 如果 <code>target</code> 为 null
@throws NullPointerException 如果 <code>action</code> 为 null
 
@see #create(Class, Object, String, String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static T java.beans.EventHandler.create(java.lang.Class<T> listenerInterface, Object target, String action, String eventPropertyName)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 <code>listenerInterface</code> 的实现，在该实现中，<em>所有</em> 方法都会将事件表达式的值 <code>eventPropertyName</code> 传递给语句中的最终方法 <code>action</code>，后者被应用于 <code>target</code>。此方法是通过调用更常见的 <code>create</code> 方法实现来实现的，其中 <code>listenerMethodName</code> 采用 <code>null</code> 值。有关 <code>action</code> 和 <code>eventPropertyName</code> 参数的完整描述，请参考 {@link java.beans.EventHandler#create(Class, Object, String, String) create 的一般形式}。 
 <p>
要创建一个将 <code>JLabel</code> 的文本设置为传入事件 <code>JTextField</code> 源的文本值的 <code>ActionListener</code>，可以使用以下代码：

<blockquote>
<pre>
EventHandler.create(ActionListener.class, label, &quot;text&quot;, &quot;source.text&quot;);
</pre>
</blockquote>
 
这等同于以下代码：
<blockquote>
<pre>
//Equivalent code using an inner class instead of EventHandler.
new ActionListener() {
    public void actionPerformed(ActionEvent event) {
        label.setText(((JTextField)(event.getSource())).getText());
     }
};
</pre>
</blockquote>

@param listenerInterface 要为其创建代理的侦听器接口
@param target 将执行动作的对象
@param action 目标上的某个（可能受限定的）属性或方法的名称
@param eventPropertyName 传入事件的某个可读属性的（可能受限定的）名称
 
@return 实现 <code>listenerInterface</code> 的对象

 @throws NullPointerException 如果 <code>listenerInterface</code> 为 null
 @throws NullPointerException 如果 <code>target</code> 为 null
 @throws NullPointerException 如果 <code>action</code> 为 null
 
@see #create(Class, Object, String, String, String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static T java.beans.EventHandler.create(java.lang.Class<T> listenerInterface, Object target, String action, String eventPropertyName, String listenerMethodName)
<!-- END KEY -->
<!-- BEGIN DATA -->
创建 <code>listenerInterface</code> 的实现，在该实现中，名为 <code>listenerMethodName</code> 的方法将事件表达式的值 <code>eventPropertyName</code> 传递给语句中的最终方法 <code>action</code>，后者被应用于 <code>target</code>。其他所有侦听器方法不执行任何操作。 
<p>
<code>eventPropertyName</code> 字符串用来从传递给目标方法的传入事件对象中提取值。一般情况下目标方法不带任何参数，在这种情况下 <code>eventPropertyName</code> 应该使用 null 值。此外，如果希望传入事件对象直接传递给目标方法，则应该使用空字符串。<code>eventPropertyName</code> 字符串的格式是一个方法或属性序列，其中从传入事件对象开始，每一个方法或属性都应用于前一个方法所返回的值。语法如下：<code>propertyName{.propertyName}*</code> 其中 <code>propertyName</code> 与方法或属性匹配。例如，要从 <code>MouseEvent</code> 中提取 <code>point</code> 属性，可以使用 <code>"point"</code> 或 <code>"getPoint"</code> 作为 <code>eventPropertyName</code>。要从具有 <code>JLabel</code> 源的 <code>MouseEvent</code> 中提取 "text" 属性，可以使用以下值之一作为 <code>eventPropertyName</code>：<code>"source.text"</code>、<code>"getSource.text"</code>、<code>"getSource.getText"</code> 或者 <code>"source.getText"</code>。如果无法找到某个方法，或者作为调用方法的过程中生成某个异常，则在指派时将抛出 <code>RuntimeException</code>。例如，如果传入事件对象为 null，且 <code>eventPropertyName</code> 为非 null 或非空，则将抛出 <code>RuntimeException</code>。
 <p>
<code>action</code> 参数的格式与 <code>eventPropertyName</code> 参数相同，其中最后一个属性名标识一个方法名或可写属性。
  
 <p>
如果 <code>listenerMethodName</code> 为 <code>null</code>，则接口中的<em>所有</em> 方法都会触发将在 <code>target</code> 上执行的 <code>action</code>。 
 <p>
例如，要创建一个 <code>MouseListener</code>，使其在每次按下鼠标按键时，都将目标对象的 <code>origin</code> 属性设置为传入 <code>MouseEvent</code> 的位置（即 <code>mouseEvent.getPoint()</code> 的值），则应编写以下代码：
<blockquote>
<pre>
EventHandler.create(MouseListener.class, "mousePressed", target, "origin", "point");
</pre>
</blockquote>

这相当于编写一个 <code>MouseListener</code>，其中除 <code>mousePressed</code> 以外的所有方法都是无操作：

<blockquote>
<pre>
//Equivalent code using an inner class instead of EventHandler.
new MouseAdapter() {
    public void mousePressed(MouseEvent e) {
        target.setOrigin(e.getPoint());
    }
}
 </pre>
</blockquote>
 
@param listenerInterface 要为其创建代理的侦听器接口
@param target 将执行动作的对象
@param action 目标上的某个（可能受限制的）属性或方法的名称
@param eventPropertyName 传入事件的某个可读属性的（可能受限定的）名称
@param listenerMethodName 应触发该动作的侦听器接口中的方法名称
 
@return 实现 <code>listenerInterface</code> 的对象

@throws NullPointerException 如果 <code>listenerInterface</code> 为 null
@throws NullPointerException 如果 <code>target</code> 为 null
@throws NullPointerException 如果 <code>action</code> 为 null
 
@see EventHandler

<!-- END DATA -->
