<!-- BEGIN KEY -->
public interface com.sun.mirror.util.Types
<!-- END KEY -->
<!-- BEGIN DATA -->
 Utility methods for operating on types.

 @author Joseph D. Darcy
 @author Scott Seligman
 @version 1.4 05/11/17
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean com.sun.mirror.util.Types.isSubtype(TypeMirror t1, TypeMirror t2)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tests whether one type is a subtype of the another.
 Any type is considered to be a subtype of itself.

 @param t1  the first type
 @param t2  the second type
 @return <tt>true</tt> if and only if the first type is a subtype
		of the second

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean com.sun.mirror.util.Types.isAssignable(TypeMirror t1, TypeMirror t2)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tests whether one type is assignable to another.

 @param t1  the first type
 @param t2  the second type
 @return <tt>true</tt> if and only if the first type is assignable
		to the second

<!-- END DATA -->
<!-- BEGIN KEY -->
public com.sun.mirror.type.TypeMirror com.sun.mirror.util.Types.getErasure(TypeMirror t)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the erasure of a type.

 @param t  the type to be erased
 @return the erasure of the given type

<!-- END DATA -->
<!-- BEGIN KEY -->
public com.sun.mirror.type.PrimitiveType com.sun.mirror.util.Types.getPrimitiveType(PrimitiveType.Kind kind)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a primitive type.

 @param kind  the kind of primitive type to return
 @return a primitive type

<!-- END DATA -->
<!-- BEGIN KEY -->
public com.sun.mirror.type.VoidType com.sun.mirror.util.Types.getVoidType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the pseudo-type representing the type of <tt>void</tt>.

 @return the pseudo-type representing the type of <tt>void</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public com.sun.mirror.type.ArrayType com.sun.mirror.util.Types.getArrayType(TypeMirror componentType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array type with the specified component type.

 @param componentType  the component type
 @return an array type with the specified component type.
 @throws IllegalArgumentException if the component type is not valid for
		an array

<!-- END DATA -->
<!-- BEGIN KEY -->
public com.sun.mirror.type.TypeVariable com.sun.mirror.util.Types.getTypeVariable(TypeParameterDeclaration tparam)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the type variable declared by a type parameter.

 @param tparam  the type parameter
 @return the type variable declared by the type parameter

<!-- END DATA -->
<!-- BEGIN KEY -->
public com.sun.mirror.type.WildcardType com.sun.mirror.util.Types.getWildcardType(java.util.Collection<com.sun.mirror.type.ReferenceType> upperBounds, java.util.Collection<com.sun.mirror.type.ReferenceType> lowerBounds)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a new wildcard.
 Either the wildcards's upper bounds or lower bounds may be
 specified, or neither, but not both.

 @param upperBounds  the upper bounds of this wildcard,
		or an empty collection if none
 @param lowerBounds  the lower bounds of this wildcard,
		or an empty collection if none
 @return a new wildcard
 @throws IllegalArgumentException if bounds are not valid

<!-- END DATA -->
<!-- BEGIN KEY -->
public com.sun.mirror.type.DeclaredType com.sun.mirror.util.Types.getDeclaredType(TypeDeclaration decl, com.sun.mirror.type.TypeMirror[] typeArgs)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the type corresponding to a type declaration and
 actual type arguments.
 Given the declaration for <tt>String</tt>, for example, this
 method may be used to get the <tt>String</tt> type.  It may
 then be invoked a second time, with the declaration for <tt>Set</tt>,
 to make the parameterized type {@code Set<String>}.

 <p> The number of type arguments must either equal the
 number of the declaration's formal type parameters, or must be
 zero.  If zero, and if the declaration is generic,
 then the declaration's raw type is returned.

 <p> If a parameterized type is being returned, its declaration
 must not be contained within a generic outer class.
 The parameterized type {@code Outer<String>.Inner<Number>},
 for example, may be constructed by first using this
 method to get the type {@code Outer<String>}, and then invoking
 {@link #getDeclaredType(DeclaredType, TypeDeclaration, TypeMirror...)}.

 @param decl	the type declaration
 @param typeArgs	the actual type arguments
 @return the type corresponding to the type declaration and
		actual type arguments
 @throws IllegalArgumentException if too many or too few
		type arguments are given, or if an inappropriate type
		argument or declaration is provided

<!-- END DATA -->
<!-- BEGIN KEY -->
public com.sun.mirror.type.DeclaredType com.sun.mirror.util.Types.getDeclaredType(DeclaredType containing, TypeDeclaration decl, com.sun.mirror.type.TypeMirror[] typeArgs)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the type corresponding to a type declaration
 and actual arguments, given a
 {@linkplain DeclaredType#getContainingType() containing type}
 of which it is a member.
 The parameterized type {@code Outer<String>.Inner<Number>},
 for example, may be constructed by first using
 {@link #getDeclaredType(TypeDeclaration, TypeMirror...)}
 to get the type {@code Outer<String>}, and then invoking
 this method.

 <p> If the containing type is a parameterized type,
 the number of type arguments must equal the
 number of the declaration's formal type parameters.
 If it is not parameterized or if it is <tt>null</tt>, this method is
 equivalent to <tt>getDeclaredType(decl, typeArgs)</tt>.

 @param containing  the containing type, or <tt>null</tt> if none
 @param decl	  the type declaration
 @param typeArgs	  the actual type arguments
 @return the type corresponding to the type declaration and
		actual type arguments,
		contained within the given type
 @throws IllegalArgumentException if too many or too few
		type arguments are given, or if an inappropriate type
		argument, declaration, or containing type is provided

<!-- END DATA -->
