<!-- BEGIN KEY -->
public class com.sun.mirror.util.SimpleTypeVisitor extends java.lang.Object implements com.sun.mirror.util.TypeVisitor
<!-- END KEY -->
<!-- BEGIN DATA -->
 A simple visitor for types.

 <p> The implementations of the methods of this class do nothing but
 delegate up the type hierarchy.  A subclass should override the
 methods that correspond to the kinds of types on which it will
 operate.

 @author Joseph D. Darcy
 @author Scott Seligman
 @version 1.5 05/11/17
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public com.sun.mirror.util.SimpleTypeVisitor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <tt>SimpleTypeVisitor</tt>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void com.sun.mirror.util.SimpleTypeVisitor.visitTypeMirror(TypeMirror t)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a type mirror.
 The implementation does nothing.
 @param t the type to visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public void com.sun.mirror.util.SimpleTypeVisitor.visitPrimitiveType(PrimitiveType t)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a primitive type.
 The implementation simply invokes
 {@link #visitTypeMirror visitTypeMirror}.
 @param t the type to visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public void com.sun.mirror.util.SimpleTypeVisitor.visitVoidType(VoidType t)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a void type.
 The implementation simply invokes
 {@link #visitTypeMirror visitTypeMirror}.
 @param t the type to visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public void com.sun.mirror.util.SimpleTypeVisitor.visitReferenceType(ReferenceType t)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a reference type.
 The implementation simply invokes
 {@link #visitTypeMirror visitTypeMirror}.
 @param t the type to visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public void com.sun.mirror.util.SimpleTypeVisitor.visitDeclaredType(DeclaredType t)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a declared type.
 The implementation simply invokes
 {@link #visitReferenceType visitReferenceType}.
 @param t the type to visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public void com.sun.mirror.util.SimpleTypeVisitor.visitClassType(ClassType t)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a class type.
 The implementation simply invokes
 {@link #visitDeclaredType visitDeclaredType}.
 @param t the type to visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public void com.sun.mirror.util.SimpleTypeVisitor.visitEnumType(EnumType t)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits an enum type.
 The implementation simply invokes
 {@link #visitClassType visitClassType}.
 @param t the type to visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public void com.sun.mirror.util.SimpleTypeVisitor.visitInterfaceType(InterfaceType t)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits an interface type.
 The implementation simply invokes
 {@link #visitDeclaredType visitDeclaredType}.
 @param t the type to visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public void com.sun.mirror.util.SimpleTypeVisitor.visitAnnotationType(AnnotationType t)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits an annotation type.
 The implementation simply invokes
 {@link #visitInterfaceType visitInterfaceType}.
 @param t the type to visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public void com.sun.mirror.util.SimpleTypeVisitor.visitArrayType(ArrayType t)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits an array type.
 The implementation simply invokes
 {@link #visitReferenceType visitReferenceType}.
 @param t the type to visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public void com.sun.mirror.util.SimpleTypeVisitor.visitTypeVariable(TypeVariable t)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a type variable.
 The implementation simply invokes
 {@link #visitReferenceType visitReferenceType}.
 @param t the type to visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public void com.sun.mirror.util.SimpleTypeVisitor.visitWildcardType(WildcardType t)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a wildcard.
 The implementation simply invokes
 {@link #visitTypeMirror visitTypeMirror}.
 @param t the type to visit

<!-- END DATA -->
