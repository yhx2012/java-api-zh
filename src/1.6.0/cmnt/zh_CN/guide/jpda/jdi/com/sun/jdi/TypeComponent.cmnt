<!-- BEGIN KEY -->
public interface com.sun.jdi.TypeComponent extends com.sun.jdi.Mirror, com.sun.jdi.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
 An entity declared within a user defined
 type (class or interface).
 This interface is the root of the type
 component hierarchy which 
 includes {@link Field} and {@link Method}. 
 Type components of the same name declared in different classes 
 (including those related by inheritance) have different 
 TypeComponent objects.
 TypeComponents can be used alone to retrieve static information
 about their declaration, or can be used in conjunction with a 
 {@link ReferenceType} or {@link ObjectReference} to access values
 or invoke, as applicable.

 @author Robert Field
 @author Gordon Hirsch
 @author James McIlree
 @since  1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String com.sun.jdi.TypeComponent.name()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the name of this type component. 
 <P> 
 Note: for fields, this is the field name; for methods,
 this is the method name; for constructors, this is &lt;init&gt;;
 for static initializers, this is &lt;clinit&gt;.

 @return a string containing the name.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String com.sun.jdi.TypeComponent.signature()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the JNI-style signature for this type component. The 
 signature is encoded type information as defined
 in the JNI documentation. It is a convenient, compact format for 
 for manipulating type information internally, not necessarily
 for display to an end user. See {@link Field#typeName} and 
 {@link Method#returnTypeName} for ways to help get a more readable
 representation of the type.

 @see <a href="doc-files/signature.html">Type Signatures</a>
 @return a string containing the signature

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String com.sun.jdi.TypeComponent.genericSignature()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the generic signature for this TypeComponent if there is one.
 Generic signatures are described in the
 <a href="http://java.sun.com/docs/books/vmspec">
 "Java<sup><font size=-2>TM</font></sup>
 Virtual Machine Specification, 3rd Edition.</a>

 @return a string containing the generic signature, or <code>null</code>
 if there is no generic signature.

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public com.sun.jdi.ReferenceType com.sun.jdi.TypeComponent.declaringType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the type in which this component was declared. The
 returned {@link ReferenceType} mirrors either a class or an 
 interface in the target VM.

 @return a {@link ReferenceType} for the type that declared
 this type component.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean com.sun.jdi.TypeComponent.isStatic()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines if this TypeComponent is static.
 Return value is undefined for constructors and static initializers.

 @return <code>true</code> if this type component was declared
 static; false otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean com.sun.jdi.TypeComponent.isFinal()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines if this TypeComponent is final.
 Return value is undefined for constructors and static initializers.

 @return <code>true</code> if this type component was declared
 final; false otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean com.sun.jdi.TypeComponent.isSynthetic()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines if this TypeComponent is synthetic. Synthetic members
 are generated by the compiler and are not present in the source
 code for the containing class.
 <p>
 Not all target VMs support this query. See
 {@link VirtualMachine#canGetSyntheticAttribute} to determine if the 
 operation is supported.

 @return <code>true</code> if this type component is synthetic; 
 <code>false</code> otherwise.
 @throws java.lang.UnsupportedOperationException if the target
 VM cannot provide information on synthetic attributes.

<!-- END DATA -->
