<!-- BEGIN KEY -->
public class com.sun.security.auth.X500Principal extends java.lang.Object implements java.security.Principal, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p> This class represents an X.500 <code>Principal</code>.
 X500Principals have names such as,
 "CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US"
 (RFC 1779 style).

 <p> Principals such as this <code>X500Principal</code>
 may be associated with a particular <code>Subject</code>
 to augment that <code>Subject</code> with an additional
 identity.  Refer to the <code>Subject</code> class for more information
 on how to achieve this.  Authorization decisions can then be based upon 
 the Principals associated with a <code>Subject</code>.
 
 @version 1.13, 11/17/05
 @see java.security.Principal
 @see javax.security.auth.Subject
 @deprecated A new X500Principal class is available in the Java 2 platform.
             This X500Principal classs is entirely deprecated and
             is here to allow for a smooth transition to the new
             class.
 @see javax.security.auth.x500.X500Principal

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String com.sun.security.auth.X500Principal.name
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public com.sun.security.auth.X500Principal(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a X500Principal with an X.500 Name,
 such as "CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US"
 (RFC 1779 style).

 <p>

 @param name the X.500 name

 @exception NullPointerException if the <code>name</code>
			is <code>null</code>. <p>

 @exception IllegalArgumentException if the <code>name</code>
			is improperly specified.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String com.sun.security.auth.X500Principal.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the Unix username for this <code>X500Principal</code>.

 <p>

 @return the Unix username for this <code>X500Principal</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String com.sun.security.auth.X500Principal.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return a string representation of this <code>X500Principal</code>.

 <p>

 @return a string representation of this <code>X500Principal</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean com.sun.security.auth.X500Principal.equals(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares the specified Object with this <code>X500Principal</code>
 for equality.

 <p>

 @param o Object to be compared for equality with this
		<code>X500Principal</code>.

 @return true if the specified Object is equal equal to this
		<code>X500Principal</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int com.sun.security.auth.X500Principal.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return a hash code for this <code>X500Principal</code>.

 <p>

 @return a hash code for this <code>X500Principal</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void com.sun.security.auth.X500Principal.readObject(ObjectInputStream s) throws java.io.IOException, java.io.NotActiveException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads this object from a stream (i.e., deserializes it)

<!-- END DATA -->
