<!-- BEGIN KEY -->
public abstract class com.sun.net.httpserver.spi.HttpServerProvider extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 Service provider class for HttpServer.
 Sub-classes of HttpServerProvider provide an implementation of {@link HttpServer} and
 associated classes. Applications do not normally use this class. 
 See {@link #provider()} for how providers are found and loaded.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected com.sun.net.httpserver.spi.HttpServerProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Initializes a new instance of this class.  </p>

 @throws  SecurityException
          If a security manager has been installed and it denies
          {@link RuntimePermission}<tt>("httpServerProvider")</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract com.sun.net.httpserver.HttpServer com.sun.net.httpserver.spi.HttpServerProvider.createHttpServer(InetSocketAddress addr, int backlog) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 creates a HttpServer from this provider
 @param addr the address to bind to. May be <code>null</code>
 @param backlog the socket backlog. A value of <code>zero</code> means the systems default

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract com.sun.net.httpserver.HttpsServer com.sun.net.httpserver.spi.HttpServerProvider.createHttpsServer(InetSocketAddress addr, int backlog) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 creates a HttpsServer from this provider
 @param addr the address to bind to. May be <code>null</code>
 @param backlog the socket backlog. A value of <code>zero</code> means the systems default

<!-- END DATA -->
<!-- BEGIN KEY -->
public static com.sun.net.httpserver.spi.HttpServerProvider com.sun.net.httpserver.spi.HttpServerProvider.provider()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the system wide default HttpServerProvider for this invocation of
 the Java virtual machine.

 <p> The first invocation of this method locates the default provider
 object as follows: </p>

 <ol>

   <li><p> If the system property
   <tt>com.sun.net.httpserver.HttpServerProvider</tt> is defined then it is
   taken to be the fully-qualified name of a concrete provider class.
   The class is loaded and instantiated; if this process fails then an
   unspecified unchecked error or exception is thrown.  </p></li>

   <li><p> If a provider class has been installed in a jar file that is
   visible to the system class loader, and that jar file contains a
   provider-configuration file named
   <tt>com.sun.net.httpserver.HttpServerProvider</tt> in the resource
   directory <tt>META-INF/services</tt>, then the first class name
   specified in that file is taken.  The class is loaded and
   instantiated; if this process fails then an unspecified unchecked error or exception is
   thrown.  </p></li>

   <li><p> Finally, if no provider has been specified by any of the above
   means then the system-default provider class is instantiated and the
   result is returned.  </p></li>

 </ol>

 <p> Subsequent invocations of this method return the provider that was
 returned by the first invocation.  </p>

 @return  The system-wide default HttpServerProvider

<!-- END DATA -->
