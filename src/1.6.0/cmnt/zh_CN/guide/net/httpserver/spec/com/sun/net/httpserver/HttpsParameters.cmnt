<!-- BEGIN KEY -->
public abstract class com.sun.net.httpserver.HttpsParameters extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 Represents the set of parameters for each https
 connection negotiated with clients. One of these
 is created and passed to
 {@link HttpsConfigurator#configure(HttpsParameters)}
 for every incoming https connection,
 in order to determine the parameters to use.
 <p>
 The underlying SSL parameters may be established either
 via the set/get methods of this class, or else via 
 a {@link javax.net.ssl.SSLParameters} object. SSLParameters 
 is the preferred method, because in the future,
 additional configuration capabilities may be added to that class, and
 it is easier to determine the set of supported parameters and their
 default values with SSLParameters. Also, if an SSLParameters object is 
 provided via 
 {@link #setSSLParameters(SSLParameters)} then those parameter settings
 are used, and any settings made in this object are ignored.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract com.sun.net.httpserver.HttpsConfigurator com.sun.net.httpserver.HttpsParameters.getHttpsConfigurator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the HttpsConfigurator for this HttpsParameters.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.net.InetSocketAddress com.sun.net.httpserver.HttpsParameters.getClientAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the address of the remote client initiating the
 connection.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void com.sun.net.httpserver.HttpsParameters.setSSLParameters(SSLParameters params)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the SSLParameters to use for this HttpsParameters.
 The parameters must be supported by the SSLContext contained
 by the HttpsConfigurator associated with this HttpsParameters.
 If no parameters are set, then the default behavior is to use
 the default parameters from the associated SSLContext.
 @param params the SSLParameters to set. If <code>null</code>
 then the existing parameters (if any) remain unchanged.
 @throws IllegalArgumentException if any of the parameters are
   invalid or unsupported.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] com.sun.net.httpserver.HttpsParameters.getCipherSuites()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a copy of the array of ciphersuites or null if none
 have been set.

 @return a copy of the array of ciphersuites or null if none
 have been set.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void com.sun.net.httpserver.HttpsParameters.setCipherSuites(java.lang.String[] cipherSuites)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the array of ciphersuites.

 @param cipherSuites the array of ciphersuites (or null)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] com.sun.net.httpserver.HttpsParameters.getProtocols()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a copy of the array of protocols or null if none
 have been set.

 @return a copy of the array of protocols or null if none
 have been set.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void com.sun.net.httpserver.HttpsParameters.setProtocols(java.lang.String[] protocols)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the array of protocols.

 @param protocols the array of protocols (or null)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean com.sun.net.httpserver.HttpsParameters.getWantClientAuth()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether client authentication should be requested.

 @return whether client authentication should be requested.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void com.sun.net.httpserver.HttpsParameters.setWantClientAuth(boolean wantClientAuth)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets whether client authentication should be requested. Calling
 this method clears the <code>needClientAuth</code> flag.

 @param wantClientAuth whether client authentication should be requested

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean com.sun.net.httpserver.HttpsParameters.getNeedClientAuth()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether client authentication should be required.

 @return whether client authentication should be required.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void com.sun.net.httpserver.HttpsParameters.setNeedClientAuth(boolean needClientAuth)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets whether client authentication should be required. Calling
 this method clears the <code>wantClientAuth</code> flag.

 @param needClientAuth whether client authentication should be required

<!-- END DATA -->
