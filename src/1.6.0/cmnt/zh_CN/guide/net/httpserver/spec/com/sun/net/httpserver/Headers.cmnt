<!-- BEGIN KEY -->
public class com.sun.net.httpserver.Headers extends java.lang.Object implements java.util.Map
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP request and response headers are represented by this class which implements
 the interface {@link java.util.Map}&lt;
 {@link java.lang.String},{@link java.util.List}&lt;{@link java.lang.String}&gt;&gt;.
 The keys are case-insensitive Strings representing the header names and
 the value associated with each key is a {@link List}&lt;{@link String}&gt; with one
 element for each occurence of the header name in the request or response.
 <p>
 For example, if a response header instance contains one key "HeaderName" with two values "value1 and value2"
 then this object is output as two header lines:
 <blockquote><pre>
 HeaderName: value1
 HeaderName: value2
 </blockquote></pre>
 <p>
 All the normal {@link java.util.Map} methods are provided, but the following 
 additional convenience methods are most likely to be used:
 <ul>
 <li>{@link #getFirst(String)} returns a single valued header or the first value of
 a multi-valued header.</li>
 <li>{@link #add(String,String)} adds the given header value to the list for the given key</li>
 <li>{@link #set(String,String)} sets the given header field to the single value given
 overwriting any existing values in the value list.
 </ul><p>
 All methods in this class accept <code>null</code> values for keys and values. However, null 
 keys will never will be present in HTTP request headers, and will not be output/sent in response headers.
 Null values can be represented as either a null entry for the key (i.e. the list is null) or
 where the key has a list, but one (or more) of the list's values is null. Null values are output
 as a header line containing the key but no associated value.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String com.sun.net.httpserver.Headers.getFirst(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 returns the first value from the List of String values
 for the given key (if at least one exists).
 @param key the key to search for
 @return the first string value associated with the key

<!-- END DATA -->
<!-- BEGIN KEY -->
public void com.sun.net.httpserver.Headers.add(String key, String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 adds the given value to the list of headers
 for the given key. If the mapping does not
 already exist, then it is created
 @param key the header name
 @param value the header value to add to the header

<!-- END DATA -->
<!-- BEGIN KEY -->
public void com.sun.net.httpserver.Headers.set(String key, String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 sets the given value as the sole header value
 for the given key. If the mapping does not
 already exist, then it is created
 @param key the header name
 @param value the header value to set.

<!-- END DATA -->
