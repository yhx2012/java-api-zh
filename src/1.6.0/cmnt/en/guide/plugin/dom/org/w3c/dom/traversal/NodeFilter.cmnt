<!-- BEGIN KEY -->
public interface org.w3c.dom.traversal.NodeFilter
<!-- END KEY -->
<!-- BEGIN DATA -->
 Filters are objects that know how to "filter out" nodes. If a 
 <code>NodeIterator</code> or <code>TreeWalker</code> is given a 
 <code>NodeFilter</code>, it applies the filter before it returns the next 
 node. If the filter says to accept the node, the traversal logic returns 
 it; otherwise, traversal looks for the next node and pretends that the 
 node that was rejected was not there.
 <p>The DOM does not provide any filters. <code>NodeFilter</code> is just an 
 interface that users can implement to provide their own filters. 
 <p><code>NodeFilters</code> do not need to know how to traverse from node 
 to node, nor do they need to know anything about the data structure that 
 is being traversed. This makes it very easy to write filters, since the 
 only thing they have to know how to do is evaluate a single node. One 
 filter may be used with a number of different kinds of traversals, 
 encouraging code reuse.
 <p>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification</a>.
 @since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.traversal.NodeFilter.FILTER_ACCEPT
<!-- END KEY -->
<!-- BEGIN DATA -->
 Accept the node. Navigation methods defined for 
 <code>NodeIterator</code> or <code>TreeWalker</code> will return this 
 node.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.traversal.NodeFilter.FILTER_REJECT
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reject the node. Navigation methods defined for 
 <code>NodeIterator</code> or <code>TreeWalker</code> will not return 
 this node. For <code>TreeWalker</code>, the children of this node 
 will also be rejected. <code>NodeIterators</code> treat this as a 
 synonym for <code>FILTER_SKIP</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.traversal.NodeFilter.FILTER_SKIP
<!-- END KEY -->
<!-- BEGIN DATA -->
 Skip this single node. Navigation methods defined for 
 <code>NodeIterator</code> or <code>TreeWalker</code> will not return 
 this node. For both <code>NodeIterator</code> and 
 <code>TreeWalker</code>, the children of this node will still be 
 considered. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int org.w3c.dom.traversal.NodeFilter.SHOW_ALL
<!-- END KEY -->
<!-- BEGIN DATA -->
 Show all <code>Nodes</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int org.w3c.dom.traversal.NodeFilter.SHOW_ELEMENT
<!-- END KEY -->
<!-- BEGIN DATA -->
 Show <code>Element</code> nodes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int org.w3c.dom.traversal.NodeFilter.SHOW_ATTRIBUTE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Show <code>Attr</code> nodes. This is meaningful only when creating an 
 <code>NodeIterator</code> or <code>TreeWalker</code> with an 
 attribute node as its <code>root</code>; in this case, it means that 
 the attribute node will appear in the first position of the iteration 
 or traversal. Since attributes are never children of other nodes, 
 they do not appear when traversing over the document tree.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int org.w3c.dom.traversal.NodeFilter.SHOW_TEXT
<!-- END KEY -->
<!-- BEGIN DATA -->
 Show <code>Text</code> nodes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int org.w3c.dom.traversal.NodeFilter.SHOW_CDATA_SECTION
<!-- END KEY -->
<!-- BEGIN DATA -->
 Show <code>CDATASection</code> nodes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int org.w3c.dom.traversal.NodeFilter.SHOW_ENTITY_REFERENCE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Show <code>EntityReference</code> nodes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int org.w3c.dom.traversal.NodeFilter.SHOW_ENTITY
<!-- END KEY -->
<!-- BEGIN DATA -->
 Show <code>Entity</code> nodes. This is meaningful only when creating 
 an <code>NodeIterator</code> or <code>TreeWalker</code> with an 
 <code>Entity</code> node as its <code>root</code>; in this case, it 
 means that the <code>Entity</code> node will appear in the first 
 position of the traversal. Since entities are not part of the 
 document tree, they do not appear when traversing over the document 
 tree.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int org.w3c.dom.traversal.NodeFilter.SHOW_PROCESSING_INSTRUCTION
<!-- END KEY -->
<!-- BEGIN DATA -->
 Show <code>ProcessingInstruction</code> nodes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int org.w3c.dom.traversal.NodeFilter.SHOW_COMMENT
<!-- END KEY -->
<!-- BEGIN DATA -->
 Show <code>Comment</code> nodes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int org.w3c.dom.traversal.NodeFilter.SHOW_DOCUMENT
<!-- END KEY -->
<!-- BEGIN DATA -->
 Show <code>Document</code> nodes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int org.w3c.dom.traversal.NodeFilter.SHOW_DOCUMENT_TYPE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Show <code>DocumentType</code> nodes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int org.w3c.dom.traversal.NodeFilter.SHOW_DOCUMENT_FRAGMENT
<!-- END KEY -->
<!-- BEGIN DATA -->
 Show <code>DocumentFragment</code> nodes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int org.w3c.dom.traversal.NodeFilter.SHOW_NOTATION
<!-- END KEY -->
<!-- BEGIN DATA -->
 Show <code>Notation</code> nodes. This is meaningful only when creating 
 an <code>NodeIterator</code> or <code>TreeWalker</code> with a 
 <code>Notation</code> node as its <code>root</code>; in this case, it 
 means that the <code>Notation</code> node will appear in the first 
 position of the traversal. Since notations are not part of the 
 document tree, they do not appear when traversing over the document 
 tree.

<!-- END DATA -->
<!-- BEGIN KEY -->
public short org.w3c.dom.traversal.NodeFilter.acceptNode(Node n)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Test whether a specified node is visible in the logical view of a 
 <code>TreeWalker</code> or <code>NodeIterator</code>. This function 
 will be called by the implementation of <code>TreeWalker</code> and 
 <code>NodeIterator</code>; it is not normally called directly from 
 user code. (Though you could do so if you wanted to use the same 
 filter to guide your own application logic.)
 @param n The node to check to see if it passes the filter or not.
 @return A constant to determine whether the node is accepted, 
   rejected, or skipped, as defined above.

<!-- END DATA -->
