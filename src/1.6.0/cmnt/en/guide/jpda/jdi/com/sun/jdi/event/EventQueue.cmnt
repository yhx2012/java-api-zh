<!-- BEGIN KEY -->
public interface com.sun.jdi.event.EventQueue extends com.sun.jdi.Mirror
<!-- END KEY -->
<!-- BEGIN DATA -->
 Manager of incoming debugger events for a target VM.
 Events are always grouped in {@link EventSet}s.
 EventSets generated by the debugger back end can be read
 here. There is one instance of EventQueue assigned to a particular 
 {@link com.sun.jdi.VirtualMachine VirtualMachine}.
 <P>
 Some events cause the suspension of the target VM - event requests
 ({@link com.sun.jdi.request}) with a 
 {@link com.sun.jdi.request.EventRequest#suspendPolicy() suspend policy}
 of {@link com.sun.jdi.request.EventRequest#SUSPEND_ALL SUSPEND_ALL}
 or {@link com.sun.jdi.request.EventRequest#SUSPEND_EVENT_THREAD 
 SUSPEND_EVENT_THREAD} and sometimes 
 {@link VMStartEvent}.
 If these suspensions are not resumed the target VM will hang.
 Thus, it is always good policy to 
 {@link #remove() remove()} every EventSet from the
 event queue until an EventSet containing a
 {@link VMDisconnectEvent} is read.
 Unless {@link com.sun.jdi.VirtualMachine#resume() resume} is
 being handled in another way, each EventSet should invoke
 {@link EventSet#resume()}.

 @see EventSet
 @see VirtualMachine

 @author Robert Field
 @since  1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public com.sun.jdi.event.EventSet com.sun.jdi.event.EventQueue.remove() throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Waits forever for the next available event.
 
 @return the next {@link EventSet}.
 @throws InterruptedException if any thread has interrupted
 this thread.
 @throws com.sun.jdi.VMDisconnectedException if the connection
 to the target VM is no longer available.  Note this will always
 be preceded by a {@link com.sun.jdi.event.VMDisconnectEvent}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public com.sun.jdi.event.EventSet com.sun.jdi.event.EventQueue.remove(long timeout) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Waits a specified time for the next available event.
 
 @param timeout Time in milliseconds to wait for the next event
 @return the next {@link EventSet}, or null if there is a timeout.
 @throws InterruptedException if any thread has interrupted
 this thread.
 @throws com.sun.jdi.VMDisconnectedException if the connection
 to the target VM is no longer available.  Note this will always
 be preceded by a {@link com.sun.jdi.event.VMDisconnectEvent}.
 @throws IllegalArgumentException if the timeout argument
 contains an illegal value.

<!-- END DATA -->
