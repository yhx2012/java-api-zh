<!-- BEGIN KEY -->
public interface com.sun.mirror.apt.AnnotationProcessorEnvironment
<!-- END KEY -->
<!-- BEGIN DATA -->
 The environment encapsulating the state needed by an annotation processor.
 An annotation processing tool makes this environment available
 to all annotation processors.

 <p> When an annotation processing tool is invoked, it is given a
 set of type declarations on which to operate.  These
 are refered to as the <i>specified</i> types.
 The type declarations said to be <i>included</i> in this invocation
 consist of the specified types and any types nested within them.

 <p> {@link DeclarationFilter}
 provides a simple way to select just the items of interest
 when a method returns a collection of declarations.

 @author Joseph D. Darcy
 @author Scott Seligman
 @version 1.8 05/11/17
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map<java.lang.String, java.lang.String> com.sun.mirror.apt.AnnotationProcessorEnvironment.getOptions()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the options passed to the annotation processing tool.
 Options are returned in the form of a map from option name
 (such as <tt>"-encoding"</tt>) to option value.
 For an option with no value (such as <tt>"-help"</tt>), the
 corresponding value in the map is <tt>null</tt>.

 <p> Options beginning with <tt>"-A"</tt> are <i>processor-specific.</i>
 Such options are unrecognized by the tool, but intended to be used by
 some annotation processor.

 @return the options passed to the tool

<!-- END DATA -->
<!-- BEGIN KEY -->
public com.sun.mirror.apt.Messager com.sun.mirror.apt.AnnotationProcessorEnvironment.getMessager()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the messager used to report errors, warnings, and other
 notices.

 @return the messager

<!-- END DATA -->
<!-- BEGIN KEY -->
public com.sun.mirror.apt.Filer com.sun.mirror.apt.AnnotationProcessorEnvironment.getFiler()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the filer used to create new source, class, or auxiliary
 files.

 @return the filer

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Collection<com.sun.mirror.declaration.TypeDeclaration> com.sun.mirror.apt.AnnotationProcessorEnvironment.getSpecifiedTypeDeclarations()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the declarations of the types specified when the
 annotation processing tool was invoked.

 @return the types specified when the tool was invoked, or an
 empty collection if there were none

<!-- END DATA -->
<!-- BEGIN KEY -->
public com.sun.mirror.declaration.PackageDeclaration com.sun.mirror.apt.AnnotationProcessorEnvironment.getPackage(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the declaration of a package given its fully qualified name.

 @param name  fully qualified package name, or "" for the unnamed package
 @return the declaration of the named package, or null if it cannot
 be found

<!-- END DATA -->
<!-- BEGIN KEY -->
public com.sun.mirror.declaration.TypeDeclaration com.sun.mirror.apt.AnnotationProcessorEnvironment.getTypeDeclaration(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the declaration of a type given its fully qualified name.

 @param name  fully qualified type name
 @return the declaration of the named type, or null if it cannot be
 found

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Collection<com.sun.mirror.declaration.TypeDeclaration> com.sun.mirror.apt.AnnotationProcessorEnvironment.getTypeDeclarations()
<!-- END KEY -->
<!-- BEGIN DATA -->
 A convenience method that returns the declarations of the types
 {@linkplain AnnotationProcessorEnvironment <i>included</i>}
 in this invocation of the annotation processing tool.

 @return the declarations of the types included in this invocation
 of the tool, or an empty collection if there are none

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Collection<com.sun.mirror.declaration.Declaration> com.sun.mirror.apt.AnnotationProcessorEnvironment.getDeclarationsAnnotatedWith(AnnotationTypeDeclaration a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the declarations annotated with the given annotation type.
 Only declarations of the types
 {@linkplain AnnotationProcessorEnvironment <i>included</i>}
 in this invocation of the annotation processing tool, or
 declarations of members, parameters, or type parameters
 declared within those, are returned.

 @param a  annotation type being requested
 @return the declarations annotated with the given annotation type,
 or an empty collection if there are none

<!-- END DATA -->
<!-- BEGIN KEY -->
public com.sun.mirror.util.Declarations com.sun.mirror.apt.AnnotationProcessorEnvironment.getDeclarationUtils()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an implementation of some utility methods for
 operating on declarations.

 @return declaration utilities

<!-- END DATA -->
<!-- BEGIN KEY -->
public com.sun.mirror.util.Types com.sun.mirror.apt.AnnotationProcessorEnvironment.getTypeUtils()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an implementation of some utility methods for
 operating on types.

 @return type utilities

<!-- END DATA -->
<!-- BEGIN KEY -->
public void com.sun.mirror.apt.AnnotationProcessorEnvironment.addListener(AnnotationProcessorListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Add a listener.  If the listener is currently registered to listen,
 adding it again will have no effect.

 @param listener The listener to add.
 @throws NullPointerException if the listener is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void com.sun.mirror.apt.AnnotationProcessorEnvironment.removeListener(AnnotationProcessorListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Remove a listener.  If the listener is not currently listening,
 the method call does nothing.

 @param listener The listener to remove.
 @throws NullPointerException if the listener is null

<!-- END DATA -->
