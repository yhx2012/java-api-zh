<!-- BEGIN KEY -->
public class javax.script.SimpleBindings extends java.lang.Object implements javax.script.Bindings
<!-- END KEY -->
<!-- BEGIN DATA -->
 A simple implementation of Bindings backed by
 a <code>HashMap</code> or some other specified <code>Map</code>.
 
 @author Mike Grogan
 @version 1.0
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.script.SimpleBindings(java.util.Map<java.lang.String, java.lang.Object> m)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructor uses an existing <code>Map</code> to store the values.
 @param m The <code>Map</code> backing this <code>SimpleBindings</code>.
 @throws NullPointerException if m is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.script.SimpleBindings()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Default constructor uses a <code>HashMap</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.SimpleBindings.put(String name, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the specified key/value in the underlying <code>map</code> field.

 @param name Name of value
 @param value Value to set.

 @return Previous value for the specified key.  Returns null if key was previously 
 unset.

 @throws NullPointerException if the name is null.
 @throws IllegalArgumentException if the name is empty.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.SimpleBindings.putAll(java.util.Map<? extends java.lang.String, ? extends java.lang.Object> toMerge)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>putAll</code> is implemented using <code>Map.putAll</code>.

 @param toMerge The <code>Map</code> of values to add.

 @throws NullPointerException 
         if toMerge map is null or if some key in the map is null. 
 @throws IllegalArgumentException 
         if some key in the map is an empty String.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.SimpleBindings.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.script.SimpleBindings.containsKey(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this map contains a mapping for the specified
 key.  More formally, returns <tt>true</tt> if and only if
 this map contains a mapping for a key <tt>k</tt> such that
 <tt>(key==null ? k==null : key.equals(k))</tt>.  (There can be
 at most one such mapping.)

 @param key key whose presence in this map is to be tested.
 @return <tt>true</tt> if this map contains a mapping for the specified
         key.

 @throws NullPointerException if key is null
 @throws ClassCastException if key is not String
 @throws IllegalArgumentException if key is empty String

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.script.SimpleBindings.containsValue(Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>> javax.script.SimpleBindings.entrySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.SimpleBindings.get(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value to which this map maps the specified key.  Returns
 <tt>null</tt> if the map contains no mapping for this key.  A return
 value of <tt>null</tt> does not <i>necessarily</i> indicate that the
 map contains no mapping for the key; it's also possible that the map
 explicitly maps the key to <tt>null</tt>.  The <tt>containsKey</tt>
 operation may be used to distinguish these two cases.

 <p>More formally, if this map contains a mapping from a key
 <tt>k</tt> to a value <tt>v</tt> such that <tt>(key==null ? k==null :
 key.equals(k))</tt>, then this method returns <tt>v</tt>; otherwise
 it returns <tt>null</tt>.  (There can be at most one such mapping.)

 @param key key whose associated value is to be returned.
 @return the value to which this map maps the specified key, or
         <tt>null</tt> if the map contains no mapping for this key.

 @throws NullPointerException if key is null
 @throws ClassCastException if key is not String
 @throws IllegalArgumentException if key is empty String

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.script.SimpleBindings.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.lang.String> javax.script.SimpleBindings.keySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.SimpleBindings.remove(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the mapping for this key from this map if it is present
 (optional operation).   More formally, if this map contains a mapping
 from key <tt>k</tt> to value <tt>v</tt> such that
 <code>(key==null ?  k==null : key.equals(k))</code>, that mapping
 is removed.  (The map can contain at most one such mapping.)

 <p>Returns the value to which the map previously associated the key, or
 <tt>null</tt> if the map contained no mapping for this key.  (A
 <tt>null</tt> return can also indicate that the map previously
 associated <tt>null</tt> with the specified key if the implementation
 supports <tt>null</tt> values.)  The map will not contain a mapping for
 the specified  key once the call returns.

 @param key key whose mapping is to be removed from the map.
 @return previous value associated with specified key, or <tt>null</tt>
         if there was no mapping for key.

 @throws NullPointerException if key is null
 @throws ClassCastException if key is not String
 @throws IllegalArgumentException if key is empty String

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.script.SimpleBindings.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Collection<java.lang.Object> javax.script.SimpleBindings.values()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
