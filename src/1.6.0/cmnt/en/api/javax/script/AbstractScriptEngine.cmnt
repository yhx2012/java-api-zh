<!-- BEGIN KEY -->
public abstract class javax.script.AbstractScriptEngine extends java.lang.Object implements javax.script.ScriptEngine
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a standard implementation for several of the variants of the <code>eval</code>
 method.
 <br><br>
 <code><b>eval(Reader)</b></code><p><code><b>eval(String)</b></code><p>
 <code><b>eval(String, Bindings)</b></code><p><code><b>eval(Reader, Bindings)</b></code>
 <br><br> are implemented using the abstract methods
 <br><br>
 <code><b>eval(Reader,ScriptContext)</b></code> or
 <code><b>eval(String, ScriptContext)</b></code>
 <br><br>
 with a <code>SimpleScriptContext</code>.
 <br><br>
 A <code>SimpleScriptContext</code> is used as the default <code>ScriptContext</code>
 of the <code>AbstractScriptEngine</code>..

 @author Mike Grogan
 @version 1.0
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.script.ScriptContext javax.script.AbstractScriptEngine.context
<!-- END KEY -->
<!-- BEGIN DATA -->
 The default <code>ScriptContext</code> of this <code>AbstractScriptEngine</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.script.AbstractScriptEngine()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new instance of AbstractScriptEngine using a <code>SimpleScriptContext</code>
 as its default <code>ScriptContext</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.script.AbstractScriptEngine(Bindings n)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new instance using the specified <code>Bindings</code> as the
 <code>ENGINE_SCOPE</code> <code>Bindings</code> in the protected <code>context</code> field.

 @param n The specified <code>Bindings</code>.
 @throws NullPointerException if n is null.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.AbstractScriptEngine.setContext(ScriptContext ctxt)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the value of the protected <code>context</code> field to the specified
 <code>ScriptContext</code>.

 @param ctxt The specified <code>ScriptContext</code>.
 @throws NullPointerException if ctxt is null.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.script.ScriptContext javax.script.AbstractScriptEngine.getContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of the protected <code>context</code> field.

 @return The value of the protected <code>context</code> field.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.script.Bindings javax.script.AbstractScriptEngine.getBindings(int scope)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>Bindings</code> with the specified scope value in
 the protected <code>context</code> field.

 @param scope The specified scope

 @return The corresponding <code>Bindings</code>.

 @throws IllegalArgumentException if the value of scope is
 invalid for the type the protected <code>context</code> field.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.AbstractScriptEngine.setBindings(Bindings bindings, int scope)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>Bindings</code> with the corresponding scope value in the
 <code>context</code> field.

 @param bindings The specified <code>Bindings</code>.
 @param scope The specified scope.

 @throws IllegalArgumentException if the value of scope is
 invalid for the type the <code>context</code> field.
 @throws NullPointerException if the bindings is null and the scope is
 <code>ScriptContext.ENGINE_SCOPE</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.script.AbstractScriptEngine.put(String key, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the specified value with the specified key in the <code>ENGINE_SCOPE</code>
 <code>Bindings</code> of the protected <code>context</code> field.

 @param key The specified key.
 @param value The specified value.

 @throws NullPointerException if key is null.
 @throws IllegalArgumentException if key is empty.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.AbstractScriptEngine.get(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the value for the specified key in the <code>ENGINE_SCOPE</code> of the
 protected <code>context</code> field.

 @return The value for the specified key.

 @throws NullPointerException if key is null.
 @throws IllegalArgumentException if key is empty.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.AbstractScriptEngine.eval(Reader reader, Bindings bindings) throws javax.script.ScriptException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>eval(Reader, Bindings)</code> calls the abstract
 <code>eval(Reader, ScriptContext)</code> method, passing it a <code>ScriptContext</code>
 whose Reader, Writers and Bindings for scopes other that <code>ENGINE_SCOPE</code>
 are identical to those members of the protected <code>context</code> field.  The specified
 <code>Bindings</code> is used instead of the <code>ENGINE_SCOPE</code>

 <code>Bindings</code> of the <code>context</code> field.

 @param reader A <code>Reader</code> containing the source of the script.
 @param bindings A <code>Bindings</code> to use for the <code>ENGINE_SCOPE</code>
 while the script executes.

 @return The return value from <code>eval(Reader, ScriptContext)</code>
 @throws ScriptException if an error occurs in script.
 @throws NullPointerException if any of the parameters is null.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.AbstractScriptEngine.eval(String script, Bindings bindings) throws javax.script.ScriptException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Same as <code>eval(Reader, Bindings)</code> except that the abstract
 <code>eval(String, ScriptContext)</code> is used.

 @param script A <code>String</code> containing the source of the script.

 @param bindings A <code>Bindings</code> to use as the <code>ENGINE_SCOPE</code>
 while the script executes.

 @return The return value from <code>eval(String, ScriptContext)</code>
 @throws ScriptException if an error occurs in script.
 @throws NullPointerException if any of the parameters is null.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.AbstractScriptEngine.eval(Reader reader) throws javax.script.ScriptException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>eval(Reader)</code> calls the abstract
 <code>eval(Reader, ScriptContext)</code> passing the value of the <code>context</code>
 field.

 @param reader A <code>Reader</code> containing the source of the script.
 @return The return value from <code>eval(Reader, ScriptContext)</code>
 @throws ScriptException if an error occurs in script.
 @throws NullPointerException if any of the parameters is null.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.script.AbstractScriptEngine.eval(String script) throws javax.script.ScriptException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Same as <code>eval(Reader)</code> except that the abstract
 <code>eval(String, ScriptContext)</code> is used.

 @param script A <code>String</code> containing the source of the script.
 @return The return value from <code>eval(String, ScriptContext)</code>
 @throws ScriptException if an error occurrs in script.
 @throws NullPointerException if any of the parameters is null.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.script.ScriptContext javax.script.AbstractScriptEngine.getScriptContext(Bindings nn)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>SimpleScriptContext</code>.  The <code>SimpleScriptContext</code>:
<br><br>
 <ul>
 <li>Uses the specified <code>Bindings</code> for its <code>ENGINE_SCOPE</code>
 </li>
 <li>Uses the <code>Bindings</code> returned by the abstract <code>getGlobalScope</code>
 method as its <code>GLOBAL_SCOPE</code>
 </li>
 <li>Uses the Reader and Writer in the default <code>ScriptContext</code> of this
 <code>ScriptEngine</code>
 </li>
 </ul>
 <br><br>
 A <code>SimpleScriptContext</code> returned by this method is used to implement eval methods
 using the abstract <code>eval(Reader,Bindings)</code> and <code>eval(String,Bindings)</code>
 versions.

 @param nn Bindings to use for the <code>ENGINE_SCOPE</code>
 @return The <code>SimpleScriptContext</code>

<!-- END DATA -->
