<!-- BEGIN KEY -->
public class javax.crypto.spec.PBEKeySpec extends java.lang.Object implements java.security.spec.KeySpec
<!-- END KEY -->
<!-- BEGIN DATA -->

 A user-chosen password that can be used with password-based encryption
 (<i>PBE</i>).

 <p>The password can be viewed as some kind of raw key material, from which
 the encryption mechanism that uses it derives a cryptographic key.

 <p>Different PBE mechanisms may consume different bits of each password
 character. For example, the PBE mechanism defined in
 <a href="http://www.ietf.org/rfc/rfc2898.txt">
 PKCS #5</a> looks at only the low order 8 bits of each character, whereas
 PKCS #12 looks at all 16 bits of each character.

 <p>You convert the password characters to a PBE key by creating an
 instance of the appropriate secret-key factory. For example, a secret-key
 factory for PKCS #5 will construct a PBE key from only the low order 8 bits
 of each password character, whereas a secret-key factory for PKCS #12 will
 take all 16 bits of each character.

 <p>Also note that this class stores passwords as char arrays instead of
 <code>String</code> objects (which would seem more logical), because the 
 String class is immutable and there is no way to overwrite its
 internal value when the password stored in it is no longer needed. Hence,
 this class requests the password as a char array, so it can be overwritten
 when done.

 @author Jan Luehe
 @author Valerie Peng

 @version 1.17, 06/03/04

 @see javax.crypto.SecretKeyFactory
 @see PBEParameterSpec
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.crypto.spec.PBEKeySpec(char[] password)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Constructor that takes a password. An empty char[] is used if
 null is specified.

 <p> Note: <code>password</code> is cloned before it is stored in
 the new <code>PBEKeySpec</code> object.

 @param password the password.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.crypto.spec.PBEKeySpec(char[] password, byte[] salt, int iterationCount, int keyLength)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Constructor that takes a password, salt, iteration count, and
 to-be-derived key length for generating PBEKey of variable-key-size
 PBE ciphers.  An empty char[] is used if null is specified for 
 <code>password</code>.

 <p> Note: the <code>password</code> and <code>salt</code> 
 are cloned before they are stored in
 the new <code>PBEKeySpec</code> object.

 @param password the password.
 @param salt the salt.
 @param iterationCount the iteration count.
 @param keyLength the to-be-derived key length.
 @exception NullPointerException if <code>salt</code> is null.
 @exception IllegalArgumentException if <code>salt</code> is empty,
 i.e. 0-length, <code>iterationCount</code> or
 <code>keyLength</code> is not positive.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.crypto.spec.PBEKeySpec(char[] password, byte[] salt, int iterationCount)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Constructor that takes a password, salt, iteration count for
 generating PBEKey of fixed-key-size PBE ciphers. An empty 
 char[] is used if null is specified for <code>password</code>.

 <p> Note: the <code>password</code> and <code>salt</code>
 are cloned before they are stored in the new 
 <code>PBEKeySpec</code> object.

 @param password the password.
 @param salt the salt.
 @param iterationCount the iteration count.
 @exception NullPointerException if <code>salt</code> is null.
 @exception IllegalArgumentException if <code>salt</code> is empty,
 i.e. 0-length, or <code>iterationCount</code> is not positive.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.crypto.spec.PBEKeySpec.clearPassword()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Clears the internal copy of the password.


<!-- END DATA -->
<!-- BEGIN KEY -->
public final char[] javax.crypto.spec.PBEKeySpec.getPassword()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a copy of the password.

 <p> Note: this method returns a copy of the password. It is
 the caller's responsibility to zero out the password information after
 it is no longer needed.

 @exception IllegalStateException if password has been cleared by 
 calling <code>clearPassword</code> method.
 @return the password.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte[] javax.crypto.spec.PBEKeySpec.getSalt()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a copy of the salt or null if not specified.

 <p> Note: this method should return a copy of the salt. It is
 the caller's responsibility to zero out the salt information after
 it is no longer needed.

 @return the salt.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.crypto.spec.PBEKeySpec.getIterationCount()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the iteration count or 0 if not specified.

 @return the iteration count.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.crypto.spec.PBEKeySpec.getKeyLength()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the to-be-derived key length or 0 if not specified.

 <p> Note: this is used to indicate the preference on key length
 for variable-key-size ciphers. The actual key size depends on
 each provider's implementation.

 @return the to-be-derived key length.

<!-- END DATA -->
