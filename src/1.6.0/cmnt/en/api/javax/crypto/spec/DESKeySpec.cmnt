<!-- BEGIN KEY -->
public class javax.crypto.spec.DESKeySpec extends java.lang.Object implements java.security.spec.KeySpec
<!-- END KEY -->
<!-- BEGIN DATA -->

 This class specifies a DES key.

 @author Jan Luehe

 @version 1.22, 09/28/05
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.crypto.spec.DESKeySpec.DES_KEY_LEN
<!-- END KEY -->
<!-- BEGIN DATA -->

 The constant which defines the length of a DES key in bytes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.crypto.spec.DESKeySpec(byte[] key) throws java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates a DESKeySpec object using the first 8 bytes in
 <code>key</code> as the key material for the DES key.

 <p> The bytes that constitute the DES key are those between
 <code>key[0]</code> and <code>key[7]</code> inclusive.

 @param key the buffer with the DES key material. The first 8 bytes
 of the buffer are copied to protect against subsequent modification.

 @exception NullPointerException if the given key material is
 <code>null</code>
 @exception InvalidKeyException if the given key material is shorter
 than 8 bytes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.crypto.spec.DESKeySpec(byte[] key, int offset) throws java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates a DESKeySpec object using the first 8 bytes in
 <code>key</code>, beginning at <code>offset</code> inclusive,
 as the key material for the DES key.

 <p> The bytes that constitute the DES key are those between
 <code>key[offset]</code> and <code>key[offset+7]</code> inclusive.

 @param key the buffer with the DES key material. The first 8 bytes
 of the buffer beginning at <code>offset</code> inclusive are copied
 to protect against subsequent modification.
 @param offset the offset in <code>key</code>, where the DES key
 material starts.

 @exception NullPointerException if the given key material is
 <code>null</code>
 @exception InvalidKeyException if the given key material, starting at
 <code>offset</code> inclusive, is shorter than 8 bytes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] javax.crypto.spec.DESKeySpec.getKey()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the DES key material.

 @return the DES key material. Returns a new array
 each time this method is called.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.crypto.spec.DESKeySpec.isParityAdjusted(byte[] key, int offset) throws java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Checks if the given DES key material, starting at <code>offset</code>
 inclusive, is parity-adjusted.

 @param key the buffer with the DES key material.
 @param offset the offset in <code>key</code>, where the DES key
 material starts.

 @return true if the given DES key material is parity-adjusted, false
 otherwise.

 @exception InvalidKeyException if the given key material is
 <code>null</code>, or starting at <code>offset</code> inclusive, is
 shorter than 8 bytes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.crypto.spec.DESKeySpec.isWeak(byte[] key, int offset) throws java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Checks if the given DES key material is weak or semi-weak.

 @param key the buffer with the DES key material.
 @param offset the offset in <code>key</code>, where the DES key
 material starts.

 @return true if the given DES key material is weak or semi-weak, false
 otherwise.

 @exception InvalidKeyException if the given key material is
 <code>null</code>, or starting at <code>offset</code> inclusive, is
 shorter than 8 bytes.

<!-- END DATA -->
