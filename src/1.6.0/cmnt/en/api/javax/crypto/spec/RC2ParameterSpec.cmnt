<!-- BEGIN KEY -->
public class javax.crypto.spec.RC2ParameterSpec extends java.lang.Object implements java.security.spec.AlgorithmParameterSpec
<!-- END KEY -->
<!-- BEGIN DATA -->

 This class specifies the parameters used with the
 <a href="http://www.ietf.org/rfc/rfc2268.txt"><i>RC2</i></a>
 algorithm.

 <p> The parameters consist of an effective key size and optionally
 an 8-byte initialization vector (IV) (only in feedback mode).

 <p> This class can be used to initialize a <code>Cipher</code> object that
 implements the <i>RC2</i> algorithm.

 @author Jan Luehe

 @version 1.13, 06/03/04
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.crypto.spec.RC2ParameterSpec(int effectiveKeyBits)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Constructs a parameter set for RC2 from the given effective key size
 (in bits).

 @param effectiveKeyBits the effective key size in bits.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.crypto.spec.RC2ParameterSpec(int effectiveKeyBits, byte[] iv)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Constructs a parameter set for RC2 from the given effective key size
 (in bits) and an 8-byte IV.

 <p> The bytes that constitute the IV are those between
 <code>iv[0]</code> and <code>iv[7]</code> inclusive.

 @param effectiveKeyBits the effective key size in bits.
 @param iv the buffer with the 8-byte IV. The first 8 bytes of
 the buffer are copied to protect against subsequent modification.
 @exception IllegalArgumentException if <code>iv</code> is null.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.crypto.spec.RC2ParameterSpec(int effectiveKeyBits, byte[] iv, int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Constructs a parameter set for RC2 from the given effective key size
 (in bits) and IV.

 <p> The IV is taken from <code>iv</code>, starting at
 <code>offset</code> inclusive.
 The bytes that constitute the IV are those between
 <code>iv[offset]</code> and <code>iv[offset+7]</code> inclusive.

 @param effectiveKeyBits the effective key size in bits.
 @param iv the buffer with the IV. The first 8 bytes
 of the buffer beginning at <code>offset</code> inclusive
 are copied to protect against subsequent modification.
 @param offset the offset in <code>iv</code> where the 8-byte IV
 starts.
 @exception IllegalArgumentException if <code>iv</code> is null.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.crypto.spec.RC2ParameterSpec.getEffectiveKeyBits()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the effective key size in bits.

 @return the effective key size in bits.

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] javax.crypto.spec.RC2ParameterSpec.getIV()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the IV or null if this parameter set does not contain an IV.

 @return the IV or null if this parameter set does not contain an IV.
 Returns a new array each time this method is called.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.crypto.spec.RC2ParameterSpec.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Tests for equality between the specified object and this
 object. Two RC2ParameterSpec objects are considered equal if their 
 effective key sizes and IVs are equal.
 (Two IV references are considered equal if both are <tt>null</tt>.)
 
 @param obj the object to test for equality with this object.
 
 @return true if the objects are considered equal, false if 
 <code>obj</code> is null or otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.crypto.spec.RC2ParameterSpec.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Calculates a hash code value for the object.
 Objects that are equal will also have the same hashcode.

<!-- END DATA -->
