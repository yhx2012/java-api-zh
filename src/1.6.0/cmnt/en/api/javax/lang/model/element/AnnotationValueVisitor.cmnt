<!-- BEGIN KEY -->
public interface javax.lang.model.element.AnnotationValueVisitor
<!-- END KEY -->
<!-- BEGIN DATA -->
 A visitor of the values of annotation type elements, using a
 variant of the visitor design pattern.  Unlike a standard visitor
 which dispatches based on the concrete type of a member of a type
 hierarchy, this visitor dispatches based on the type of data
 stored; there are no distinct subclasses for storing, for example,
 {@code boolean} values versus {@code int} values.  Classes
 implementing this interface are used to operate on a value when the
 type of that value is unknown at compile time.  When a visitor is
 passed to a value's {@link AnnotationValue#accept accept} method,
 the <tt>visit<i>XYZ</i></tt> method applicable to that value is
 invoked.

 <p> Classes implementing this interface may or may not throw a
 {@code NullPointerException} if the additional parameter {@code p}
 is {@code null}; see documentation of the implementing class for
 details.
 
 <p> <b>WARNING:</b> It is possible that methods will be added to
 this interface to accommodate new, currently unknown, language
 structures added to future versions of the Java&trade; programming
 language.  Therefore, visitor classes directly implementing this
 interface may be source incompatible with future versions of the
 platform.  To avoid this source incompatibility, visitor
 implementations are encouraged to instead extend the appropriate
 abstract visitor class that implements this interface.  However, an
 API should generally use this visitor interface as the type for
 parameters, return type, etc. rather than one of the abstract
 classes.

 @param <R> the return type of this visitor's methods
 @param <P> the type of the additional parameter to this visitor's methods.
 @author Joseph D. Darcy
 @author Scott Seligman
 @author Peter von der Ah&eacute;
 @version 1.6 06/07/31
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visit(AnnotationValue av, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits an annotation value.
 @param av the value to visit
 @param p a visitor-specified parameter
 @return  a visitor-specified result

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visit(AnnotationValue av)
<!-- END KEY -->
<!-- BEGIN DATA -->
 A convenience method equivalent to {@code v.visit(av, null)}.
 @param av the value to visit
 @return  a visitor-specified result

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitBoolean(boolean b, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a {@code boolean} value in an annotation.
 @param b the value being visited
 @param p a visitor-specified parameter
 @return the result of the visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitByte(byte b, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a {@code byte} value in an annotation.
 @param  b the value being visited
 @param  p a visitor-specified parameter
 @return the result of the visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitChar(char c, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a {@code char} value in an annotation.
 @param  c the value being visited
 @param  p a visitor-specified parameter
 @return the result of the visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitDouble(double d, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a {@code double} value in an annotation.
 @param  d the value being visited
 @param  p a visitor-specified parameter
 @return the result of the visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitFloat(float f, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a {@code float} value in an annotation.
 @param  f the value being visited
 @param  p a visitor-specified parameter
 @return the result of the visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitInt(int i, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits an {@code int} value in an annotation.
 @param  i the value being visited
 @param  p a visitor-specified parameter
 @return the result of the visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitLong(long i, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a {@code long} value in an annotation.
 @param  i the value being visited
 @param  p a visitor-specified parameter
 @return the result of the visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitShort(short s, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a {@code short} value in an annotation.
 @param  s the value being visited
 @param  p a visitor-specified parameter
 @return the result of the visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitString(String s, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a string value in an annotation.
 @param  s the value being visited
 @param  p a visitor-specified parameter
 @return the result of the visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitType(TypeMirror t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a type value in an annotation.
 @param  t the value being visited
 @param  p a visitor-specified parameter
 @return the result of the visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitEnumConstant(VariableElement c, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits an {@code enum} value in an annotation.
 @param  c the value being visited
 @param  p a visitor-specified parameter
 @return the result of the visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitAnnotation(AnnotationMirror a, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits an annotation value in an annotation.
 @param  a the value being visited
 @param  p a visitor-specified parameter
 @return the result of the visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitArray(java.util.List<? extends javax.lang.model.element.AnnotationValue> vals, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits an array value in an annotation.
 @param  vals the value being visited
 @param  p a visitor-specified parameter
 @return the result of the visit

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.element.AnnotationValueVisitor.visitUnknown(AnnotationValue av, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits an unknown kind of annotation value.
 This can occur if the language evolves and new kinds
 of value can be stored in an annotation.
 @param  av the unknown value being visited
 @param  p a visitor-specified parameter
 @return the result of the visit
 @throws UnknownAnnotationValueException
	a visitor implementation may optionally throw this exception

<!-- END DATA -->
