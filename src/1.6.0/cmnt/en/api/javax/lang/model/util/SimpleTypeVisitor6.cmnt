<!-- BEGIN KEY -->
public class javax.lang.model.util.SimpleTypeVisitor6 extends javax.lang.model.util.AbstractTypeVisitor6
<!-- END KEY -->
<!-- BEGIN DATA -->
 A simple visitor of types with default behavior appropriate for the
 {@link SourceVersion#RELEASE_6 RELEASE_6} source version.

 Visit methods corresponding to {@code RELEASE_6} language
 constructs call {@link #defaultAction}, passing their arguments to
 {@code defaultAction}'s corresponding parameters.
 
 <p> Methods in this class may be overridden subject to their
 general contract.  Note that annotating methods in concrete
 subclasses with {@link java.lang.Override @Override} will help
 ensure that methods are overridden as intended.
 
 <p> <b>WARNING:</b> The {@code TypeVisitor} interface implemented
 by this class may have methods added to it in the future to
 accommodate new, currently unknown, language structures added to
 future versions of the Java&trade; programming language.
 Therefore, methods whose names begin with {@code "visit"} may be
 added to this class in the future; to avoid incompatibilities,
 classes which extend this class should not declare any instance
 methods with names beginning with {@code "visit"}.
 
 <p>When such a new visit method is added, the default
 implementation in this class will be to call the {@link
 #visitUnknown visitUnknown} method.  A new simple type visitor
 class will also be introduced to correspond to the new language
 level; this visitor will have different default behavior for the
 visit method in question.  When the new visitor is introduced, all
 or portions of this visitor may be deprecated.

 @param <R> the return type of this visitor's methods.  Use {@link
            Void} for visitors that do not need to return results.
 @param <P> the type of the additional parameter to this visitor's
            methods.  Use {@code Void} for visitors that do not need an
            additional parameter.

 @author Joseph D. Darcy
 @author Scott Seligman
 @author Peter von der Ah&eacute;
 @version 1.7 06/08/15
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final R javax.lang.model.util.SimpleTypeVisitor6.DEFAULT_VALUE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Default value to be returned; {@link #defaultAction
 defaultAction} returns this value unless the method is
 overridden.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.lang.model.util.SimpleTypeVisitor6()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructor for concrete subclasses; uses {@code null} for the
 default value.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.lang.model.util.SimpleTypeVisitor6(R defaultValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructor for concrete subclasses; uses the argument for the
 default value.

 @param defaultValue the value to assign to {@link #DEFAULT_VALUE}

<!-- END DATA -->
<!-- BEGIN KEY -->
protected R javax.lang.model.util.SimpleTypeVisitor6.defaultAction(TypeMirror e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 The default action for visit methods.  The implementation in
 this class just returns {@link #DEFAULT_VALUE}; subclasses will
 commonly override this method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleTypeVisitor6.visitPrimitive(PrimitiveType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param t {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleTypeVisitor6.visitNull(NullType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param t {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleTypeVisitor6.visitArray(ArrayType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param t {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleTypeVisitor6.visitDeclared(DeclaredType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param t {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleTypeVisitor6.visitError(ErrorType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param t {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleTypeVisitor6.visitTypeVariable(TypeVariable t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param t {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleTypeVisitor6.visitWildcard(WildcardType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param t {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleTypeVisitor6.visitExecutable(ExecutableType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param t {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleTypeVisitor6.visitNoType(NoType t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param t {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
