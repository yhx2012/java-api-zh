<!-- BEGIN KEY -->
public class javax.lang.model.util.SimpleAnnotationValueVisitor6 extends javax.lang.model.util.AbstractAnnotationValueVisitor6
<!-- END KEY -->
<!-- BEGIN DATA -->
 A simple visitor for annotation values with default behavior
 appropriate for the {@link SourceVersion#RELEASE_6 RELEASE_6}
 source version.  Visit methods call {@link
 #defaultAction} passing their arguments to {@code defaultAction}'s
 corresponding parameters.

 <p> Methods in this class may be overridden subject to their
 general contract.  Note that annotating methods in concrete
 subclasses with {@link java.lang.Override @Override} will help
 ensure that methods are overridden as intended.

 <p> <b>WARNING:</b> The {@code AnnotationValueVisitor} interface
 implemented by this class may have methods added to it in the
 future to accommodate new, currently unknown, language structures
 added to future versions of the Java&trade; programming language.
 Therefore, methods whose names begin with {@code "visit"} may be
 added to this class in the future; to avoid incompatibilities,
 classes which extend this class should not declare any instance
 methods with names beginning with {@code "visit"}.
 
 <p>When such a new visit method is added, the default
 implementation in this class will be to call the {@link
 #visitUnknown visitUnknown} method.  A new simple annotation
 value visitor class will also be introduced to correspond to the
 new language level; this visitor will have different default
 behavior for the visit method in question.  When the new visitor is
 introduced, all or portions of this visitor may be deprecated.

 @param <R> the return type of this visitor's methods
 @param <P> the type of the additional parameter to this visitor's methods.

 @author Joseph D. Darcy
 @author Scott Seligman
 @author Peter von der Ah&eacute;
 @version 1.6 06/08/15
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final R javax.lang.model.util.SimpleAnnotationValueVisitor6.DEFAULT_VALUE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Default value to be returned; {@link #defaultAction
 defaultAction} returns this value unless the method is
 overridden.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.lang.model.util.SimpleAnnotationValueVisitor6()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructor for concrete subclasses; uses {@code null} for the
 default value.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.lang.model.util.SimpleAnnotationValueVisitor6(R defaultValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructor for concrete subclasses; uses the argument for the
 default value.

 @param defaultValue the value to assign to {@link #DEFAULT_VALUE}

<!-- END DATA -->
<!-- BEGIN KEY -->
protected R javax.lang.model.util.SimpleAnnotationValueVisitor6.defaultAction(Object o, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 The default action for visit methods.  The implementation in
 this class just returns {@link #DEFAULT_VALUE}; subclasses will
 commonly override this method.

 @param o the value of the annotation
 @param p a visitor-specified parameter
 @return {@code DEFAULT_VALUE} unless overridden

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleAnnotationValueVisitor6.visitBoolean(boolean b, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param b {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleAnnotationValueVisitor6.visitByte(byte b, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param b {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleAnnotationValueVisitor6.visitChar(char c, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param c {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleAnnotationValueVisitor6.visitDouble(double d, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param d {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleAnnotationValueVisitor6.visitFloat(float f, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param f {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleAnnotationValueVisitor6.visitInt(int i, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param i {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleAnnotationValueVisitor6.visitLong(long i, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param i {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleAnnotationValueVisitor6.visitShort(short s, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param s {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleAnnotationValueVisitor6.visitString(String s, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param s {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleAnnotationValueVisitor6.visitType(TypeMirror t, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param t {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleAnnotationValueVisitor6.visitEnumConstant(VariableElement c, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param c {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleAnnotationValueVisitor6.visitAnnotation(AnnotationMirror a, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param a {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.SimpleAnnotationValueVisitor6.visitArray(java.util.List<? extends javax.lang.model.element.AnnotationValue> vals, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc} This implementation calls {@code defaultAction}.

 @param vals {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of {@code defaultAction}

<!-- END DATA -->
