<!-- BEGIN KEY -->
public abstract class javax.lang.model.util.AbstractAnnotationValueVisitor6 extends java.lang.Object implements javax.lang.model.element.AnnotationValueVisitor
<!-- END KEY -->
<!-- BEGIN DATA -->
 A skeletal visitor for annotation values with default behavior
 appropriate for the {@link SourceVersion#RELEASE_6 RELEASE_6}
 source version.

 <p> <b>WARNING:</b> The {@code AnnotationValueVisitor} interface
 implemented by this class may have methods added to it in the
 future to accommodate new, currently unknown, language structures
 added to future versions of the Java&trade; programming language.
 Therefore, methods whose names begin with {@code "visit"} may be
 added to this class in the future; to avoid incompatibilities,
 classes which extend this class should not declare any instance
 methods with names beginning with {@code "visit"}.
 
 <p>When such a new visit method is added, the default
 implementation in this class will be to call the {@link
 #visitUnknown visitUnknown} method.  A new abstract annotation
 value visitor class will also be introduced to correspond to the
 new language level; this visitor will have different default
 behavior for the visit method in question.  When the new visitor is
 introduced, all or portions of this visitor may be deprecated.

 @param <R> the return type of this visitor's methods
 @param <P> the type of the additional parameter to this visitor's methods.

 @author Joseph D. Darcy
 @author Scott Seligman
 @author Peter von der Ah&eacute;
 @version 1.4 06/07/31
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.lang.model.util.AbstractAnnotationValueVisitor6()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructor for concrete subclasses to call.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final R javax.lang.model.util.AbstractAnnotationValueVisitor6.visit(AnnotationValue av, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits an annotation value as if by passing itself to that
 value's {@link AnnotationValue#accept accept}.  The invocation
 {@code v.visit(av)} is equivalent to {@code av.accept(v, p)}.
 @param av {@inheritDoc}
 @param p  {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public final R javax.lang.model.util.AbstractAnnotationValueVisitor6.visit(AnnotationValue av)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits an annotation value as if by passing itself to that
 value's {@link AnnotationValue#accept accept} method passing
 {@code null} for the additional parameter.  The invocation
 {@code v.visit(av)} is equivalent to {@code av.accept(v,
 null)}.
 @param av {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.AbstractAnnotationValueVisitor6.visitUnknown(AnnotationValue av, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

 <p>The default implementation of this method in {@code
 AbstractAnnotationValueVisitor6} will always throw {@code
 UnknownAnnotationValueException}.  This behavior is not
 required of a subclass.

 @param av {@inheritDoc}
 @param p  {@inheritDoc}

<!-- END DATA -->
