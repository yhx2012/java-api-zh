<!-- BEGIN KEY -->
public class javax.lang.model.util.ElementKindVisitor6 extends javax.lang.model.util.SimpleElementVisitor6
<!-- END KEY -->
<!-- BEGIN DATA -->
 A visitor of program elements based on their {@linkplain
 ElementKind kind} with default behavior appropriate for the {@link
 SourceVersion#RELEASE_6 RELEASE_6} source version.  For {@linkplain
 Element elements} <tt><i>XYZ</i></tt> that may have more than one
 kind, the <tt>visit<i>XYZ</i></tt> methods in this class delegate
 to the <tt>visit<i>XYZKind</i></tt> method corresponding to the
 first argument's kind.  The <tt>visit<i>XYZKind</i></tt> methods
 call {@link #defaultAction defaultAction}, passing their arguments
 to {@code defaultAction}'s corresponding parameters.

 <p> Methods in this class may be overridden subject to their
 general contract.  Note that annotating methods in concrete
 subclasses with {@link java.lang.Override @Override} will help
 ensure that methods are overridden as intended.
 
 <p> <b>WARNING:</b> The {@code ElementVisitor} interface
 implemented by this class may have methods added to it or the
 {@code ElementKind} {@code enum} used in this case may have
 constants added to it in the future to accommodate new, currently
 unknown, language structures added to future versions of the
 Java&trade; programming language.  Therefore, methods whose names
 begin with {@code "visit"} may be added to this class in the
 future; to avoid incompatibilities, classes which extend this class
 should not declare any instance methods with names beginning with
 {@code "visit"}.
 
 <p>When such a new visit method is added, the default
 implementation in this class will be to call the {@link
 #visitUnknown visitUnknown} method.  A new abstract element kind
 visitor class will also be introduced to correspond to the new
 language level; this visitor will have different default behavior
 for the visit method in question.  When the new visitor is
 introduced, all or portions of this visitor may be deprecated.

 @param <R> the return type of this visitor's methods.  Use {@link
 	      Void} for visitors that do not need to return results.
 @param <P> the type of the additional parameter to this visitor's
            methods.  Use {@code Void} for visitors that do not need an
            additional parameter.

 @author Joseph D. Darcy
 @author Scott Seligman
 @author Peter von der Ah&eacute;
 @version 1.5 06/08/07
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.lang.model.util.ElementKindVisitor6()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructor for concrete subclasses; uses {@code null} for the
 default value.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.lang.model.util.ElementKindVisitor6(R defaultValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructor for concrete subclasses; uses the argument for the
 default value.

 @param defaultValue the value to assign to {@link #DEFAULT_VALUE}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitPackage(PackageElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

 The element argument has kind {@code PACKAGE}.

 @param e {@inheritDoc}
 @param p {@inheritDoc}
 @return  {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitType(TypeElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a type element, dispatching to the visit method for the
 specific {@linkplain ElementKind kind} of type, {@code
 ANNOTATION_TYPE}, {@code CLASS}, {@code ENUM}, or {@code
 INTERFACE}.

 @param e {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of the kind-specific visit method

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitTypeAsAnnotationType(TypeElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits an {@code ANNOTATION_TYPE} type element by calling
 {@code defaultAction}.

 @param e the element to visit
 @param p a visitor-specified parameter
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitTypeAsClass(TypeElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a {@code CLASS} type element by calling {@code
 defaultAction}.

 @param e the element to visit
 @param p a visitor-specified parameter
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitTypeAsEnum(TypeElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits an {@code ENUM} type element by calling {@code
 defaultAction}.

 @param e the element to visit
 @param p a visitor-specified parameter
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitTypeAsInterface(TypeElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits an {@code INTERFACE} type element by calling {@code
 defaultAction}.
.
 @param e the element to visit
 @param p a visitor-specified parameter
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitVariable(VariableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a variable element, dispatching to the visit method for
 the specific {@linkplain ElementKind kind} of variable, {@code
 ENUM_CONSTANT}, {@code EXCEPTION_PARAMETER}, {@code FIELD},
 {@code LOCAL_VARIABLE}, or {@code PARAMETER}.
 @param e {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of the kind-specific visit method

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitVariableAsEnumConstant(VariableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits an {@code ENUM_CONSTANT} variable element by calling
 {@code defaultAction}.

 @param e the element to visit
 @param p a visitor-specified parameter
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitVariableAsExceptionParameter(VariableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits an {@code EXCEPTION_PARAMETER} variable element by calling
 {@code defaultAction}.

 @param e the element to visit
 @param p a visitor-specified parameter
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitVariableAsField(VariableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a {@code FIELD} variable element by calling
 {@code defaultAction}.

 @param e the element to visit
 @param p a visitor-specified parameter
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitVariableAsLocalVariable(VariableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a {@code LOCAL_VARIABLE} variable element by calling
 {@code defaultAction}.

 @param e the element to visit
 @param p a visitor-specified parameter
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitVariableAsParameter(VariableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a {@code PARAMETER} variable element by calling
 {@code defaultAction}.

 @param e the element to visit
 @param p a visitor-specified parameter
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitExecutable(ExecutableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits an executable element, dispatching to the visit method
 for the specific {@linkplain ElementKind kind} of executable,
 {@code CONSTRUCTOR}, {@code INSTANCE_INIT}, {@code METHOD}, or
 {@code STATIC_INIT}.

 @param e {@inheritDoc}
 @param p {@inheritDoc}
 @return  the result of the kind-specific visit method

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitExecutableAsConstructor(ExecutableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a {@code CONSTRUCTOR} executable element by calling
 {@code defaultAction}.

 @param e the element to visit
 @param p a visitor-specified parameter
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitExecutableAsInstanceInit(ExecutableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits an {@code INSTANCE_INIT} executable element by calling
 {@code defaultAction}.

 @param e the element to visit
 @param p a visitor-specified parameter
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitExecutableAsMethod(ExecutableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a {@code METHOD} executable element by calling
 {@code defaultAction}.

 @param e the element to visit
 @param p a visitor-specified parameter
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitExecutableAsStaticInit(ExecutableElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Visits a {@code STATIC_INIT} executable element by calling
 {@code defaultAction}.

 @param e the element to visit
 @param p a visitor-specified parameter
 @return  the result of {@code defaultAction}

<!-- END DATA -->
<!-- BEGIN KEY -->
public R javax.lang.model.util.ElementKindVisitor6.visitTypeParameter(TypeParameterElement e, P p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

 The element argument has kind {@code TYPE_PARAMETER}.

 @param e {@inheritDoc}
 @param p {@inheritDoc}
 @return  {@inheritDoc}

<!-- END DATA -->
