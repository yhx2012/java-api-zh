<!-- BEGIN KEY -->
public class javax.sql.rowset.serial.SQLInputImpl extends java.lang.Object implements java.sql.SQLInput
<!-- END KEY -->
<!-- BEGIN DATA -->
 An input stream used for custom mapping user-defined types (UDTs).
 An <code>SQLInputImpl</code> object is an input stream that contains a
 stream of values that are the attributes of a UDT.
 <p>
 This class is used by the driver behind the scenes when the method 
 <code>getObject</code> is called on an SQL structured or distinct type 
 that has a custom mapping; a programmer never invokes
 <code>SQLInputImpl</code> methods directly. They are provided here as a 
 convenience for those who write <code>RowSet</code> implementations.
 <P>
 The <code>SQLInputImpl</code> class provides a set of
 reader methods analogous to the <code>ResultSet</code> getter
 methods.  These methods make it possible to read the values in an
 <code>SQLInputImpl</code> object.
 <P>
 The method <code>wasNull</code> is used to determine whether the
 the last value read was SQL <code>NULL</code>.
 <P>When the method <code>getObject</code> is called with an
 object of a class implementing the interface <code>SQLData</code>,
 the JDBC driver calls the method <code>SQLData.getSQLType</code>
 to determine the SQL type of the UDT being custom mapped. The driver
 creates an instance of <code>SQLInputImpl</code>, populating it with the
 attributes of the UDT.  The driver then passes the input
 stream to the method <code>SQLData.readSQL</code>, which in turn
 calls the <code>SQLInputImpl</code> reader methods
 to read the attributes from the input stream.
 @see java.sql.SQLData

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sql.rowset.serial.SQLInputImpl(java.lang.Object[] attributes, java.util.Map<java.lang.String, java.lang.Class<?>> map) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an <code>SQLInputImpl</code> object initialized with the
 given array of attributes and the given type map. If any of the
 attributes is a UDT whose name is in an entry in the type map,
 the attribute will be mapped according to the corresponding
 <code>SQLData</code> implementation.

 @param attributes an array of <code>Object</code> instances in which
        each element is an attribute of a UDT. The order of the 
        attributes in the array is the same order in which
        the attributes were defined in the UDT definition.
 @param map a <code>java.util.Map</code> object containing zero or more
        entries, with each entry consisting of 1) a <code>String</code>
        giving the fully
        qualified name of the UDT and 2) the <code>Class</code> object
        for the <code>SQLData</code> implementation that defines how
        the UDT is to be mapped
 @throws SQLException if the <code>attributes</code> or the <code>map</code>
        is a <code>null</code> value

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sql.rowset.serial.SQLInputImpl.readString() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the next attribute in this <code>SQLInputImpl</code> object as
 a <code>String</code> in the Java programming language.
 <p>
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a <code>SQLData</code>
 implementation.
 <p>
 @return the next attribute in this <code>SQLInputImpl</code> object; 
     if the value is <code>SQL NULL</code>, return <code>null</code>
 @throws SQLException if the read position is located at an invalid
     position or if there are no further values in the stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sql.rowset.serial.SQLInputImpl.readBoolean() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the next attribute in this <code>SQLInputImpl</code> object as
 a <code>boolean</code> in the Java programming language.
 <p>
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a <code>SQLData</code>
 implementation.
 <p>
 @return the next attribute in this <code>SQLInputImpl</code> object; 
     if the value is <code>SQL NULL</code>, return <code>null</code>
 @throws SQLException if the read position is located at an invalid
     position or if there are no further values in the stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte javax.sql.rowset.serial.SQLInputImpl.readByte() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the next attribute in this <code>SQLInputImpl</code> object as
 a <code>byte</code> in the Java programming language.
 <p>
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a <code>SQLData</code>
 implementation.
 <p>
 @return the next attribute in this <code>SQLInputImpl</code> object; 
     if the value is <code>SQL NULL</code>, return <code>null</code>
 @throws SQLException if the read position is located at an invalid
     position or if there are no further values in the stream

<!-- END DATA -->
<!-- BEGIN KEY -->
public short javax.sql.rowset.serial.SQLInputImpl.readShort() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the next attribute in this <code>SQLInputImpl</code> object 
 as a <code>short</code> in the Java programming language.
 <P>
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a <code>SQLData</code> implementation.
 <P>
 @return the next attribute in this <code>SQLInputImpl</code> object;
       if the value is <code>SQL NULL</code>, return <code>null</code>
 @throws SQLException if the read position is located at an invalid
       position or if there are no more values in the stream 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sql.rowset.serial.SQLInputImpl.readInt() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the next attribute in this <code>SQLInputImpl</code> object 
 as an <code>int</code> in the Java programming language.     
 <P>
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a <code>SQLData</code> implementation.
 <P>
 @return the next attribute in this <code>SQLInputImpl</code> object;
       if the value is <code>SQL NULL</code>, return <code>null</code>
 @throws SQLException if the read position is located at an invalid
       position or if there are no more values in the stream 

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.sql.rowset.serial.SQLInputImpl.readLong() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the next attribute in this <code>SQLInputImpl</code> object
 as a <code>long</code> in the Java programming language.
 <P>
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a <code>SQLData</code> implementation.
 <P>
 @return the next attribute in this <code>SQLInputImpl</code> object;
       if the value is <code>SQL NULL</code>, return <code>null</code>
 @throws SQLException if the read position is located at an invalid
       position or if there are no more values in the stream 

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.sql.rowset.serial.SQLInputImpl.readFloat() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the next attribute in this <code>SQLInputImpl</code> object
 as a <code>float</code> in the Java programming language.
 <P>
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a <code>SQLData</code> implementation.
 <P>
 @return the next attribute in this <code>SQLInputImpl</code> object;
       if the value is <code>SQL NULL</code>, return <code>null</code>
 @throws SQLException if the read position is located at an invalid
       position or if there are no more values in the stream 

<!-- END DATA -->
<!-- BEGIN KEY -->
public double javax.sql.rowset.serial.SQLInputImpl.readDouble() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the next attribute in this <code>SQLInputImpl</code> object
 as a <code>double</code> in the Java programming language.
 <P>
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a <code>SQLData</code> implementation.
 <P>
 @return the next attribute in this <code>SQLInputImpl</code> object;
       if the value is <code>SQL NULL</code>, return <code>null</code>
 @throws SQLException if the read position is located at an invalid
       position or if there are no more values in the stream 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.BigDecimal javax.sql.rowset.serial.SQLInputImpl.readBigDecimal() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the next attribute in this <code>SQLInputImpl</code> object 
 as a <code>java.math.BigDecimal</code>.
 <P>
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a <code>SQLData</code> implementation.
 <P>
 @return the next attribute in this <code>SQLInputImpl</code> object;
       if the value is <code>SQL NULL</code>, return <code>null</code>
 @throws SQLException if the read position is located at an invalid
       position or if there are no more values in the stream 

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] javax.sql.rowset.serial.SQLInputImpl.readBytes() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the next attribute in this <code>SQLInputImpl</code> object
 as an array of bytes.
 <p>
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a <code>SQLData</code> implementation.
 <P>
 @return the next attribute in this <code>SQLInputImpl</code> object;
       if the value is <code>SQL NULL</code>, return <code>null</code>
 @throws SQLException if the read position is located at an invalid
       position or if there are no more values in the stream 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Date javax.sql.rowset.serial.SQLInputImpl.readDate() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the next attribute in this <code>SQLInputImpl</code> as 
 a <code>java.sql.Date</code> object.
 <P>
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a <code>SQLData</code> implementation.
 <P>
 @return the next attribute in this <code>SQLInputImpl</code> object;
       if the value is <code>SQL NULL</code>, return <code>null</code>
 @throws SQLException if the read position is located at an invalid
       position or if there are no more values in the stream 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Time javax.sql.rowset.serial.SQLInputImpl.readTime() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the next attribute in this <code>SQLInputImpl</code> object as
 a <code>java.sql.Time</code> object.
 <P>
 This method does not perform type-safe checking to determine if the
 returned type is the expected type as this responsibility is delegated
 to the UDT mapping as implemented by a <code>SQLData</code>
 implementation.

 @return the attribute; if the value is <code>SQL NULL</code>, return
 <code>null</code>
 @throws SQLException if the read position is located at an invalid
 position; or if there are no further values in the stream. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Timestamp javax.sql.rowset.serial.SQLInputImpl.readTimestamp() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the next attribute in this <code>SQLInputImpl</code> object as 
 a <code>java.sql.Timestamp</code> object.

 @return the attribute; if the value is <code>SQL NULL</code>, return
 <code>null</code>
 @throws SQLException if the read position is located at an invalid
 position; or if there are no further values in the stream. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Reader javax.sql.rowset.serial.SQLInputImpl.readCharacterStream() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the next attribute in this <code>SQLInputImpl</code> object
 as a stream of Unicode characters.
 <P>
 This method does not perform type-safe checking to determine if the
 returned type is the expected type as this responsibility is delegated
 to the UDT mapping as implemented by a <code>SQLData</code>
 implementation.

 @return the attribute; if the value is <code>SQL NULL</code>, return <code>null</code>
 @throws SQLException if the read position is located at an invalid
 position; or if there are no further values in the stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream javax.sql.rowset.serial.SQLInputImpl.readAsciiStream() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the next attribute in this <code>SQLInputImpl</code> object
 as a stream of ASCII characters.
 <P>
 This method does not perform type-safe checking to determine if the
 returned type is the expected type as this responsibility is delegated
 to the UDT mapping as implemented by a <code>SQLData</code>
 implementation.

 @return the attribute; if the value is <code>SQL NULL</code>, 
 return <code>null</code>
 @throws SQLException if the read position is located at an invalid
 position; or if there are no further values in the stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream javax.sql.rowset.serial.SQLInputImpl.readBinaryStream() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the next attribute in this <code>SQLInputImpl</code> object
 as a stream of uninterpreted bytes.
 <P>
 This method does not perform type-safe checking to determine if the
 returned type is the expected type as this responsibility is delegated
 to the UDT mapping as implemented by a <code>SQLData</code>
 implementation.

 @return the attribute; if the value is <code>SQL NULL</code>, return 
 <code>null</code>
 @throws SQLException if the read position is located at an invalid
 position; or if there are no further values in the stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.sql.rowset.serial.SQLInputImpl.readObject() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the value at the head of this <code>SQLInputImpl</code>
 object as an <code>Object</code> in the Java programming language.  The
 actual type of the object returned is determined by the default 
 mapping of SQL types to types in the Java programming language unless
 there is a custom mapping, in which case the type of the object
 returned is determined by this stream's type map.
 <P>
 The JDBC technology-enabled driver registers a type map with the stream 
 before passing the stream to the application.
 <P>
 When the datum at the head of the stream is an SQL <code>NULL</code>,
 this method returns <code>null</code>.  If the datum is an SQL
 structured or distinct type with a custom mapping, this method
 determines the SQL type of the datum at the head of the stream, 
 constructs an object of the appropriate class, and calls the method 
 <code>SQLData.readSQL</code> on that object. The <code>readSQL</code>
 method then calls the appropriate <code>SQLInputImpl.readXXX</code> 
 methods to retrieve the attribute values from the stream.

 @return the value at the head of the stream as an <code>Object</code>
         in the Java programming language; <code>null</code> if
         the value is SQL <code>NULL</code>
 @throws SQLException if the read position is located at an invalid
 position; or if there are no further values in the stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Ref javax.sql.rowset.serial.SQLInputImpl.readRef() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the value at the head of this <code>SQLInputImpl</code> object
 as a <code>Ref</code> object in the Java programming language. 

 @return a <code>Ref</code> object representing the SQL 
         <code>REF</code> value at the head of the stream; if the value
         is <code>SQL NULL</code> return <code>null</code>
 @throws SQLException if the read position is located at an invalid 
         position; or if there are no further values in the stream.     

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Blob javax.sql.rowset.serial.SQLInputImpl.readBlob() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>BLOB</code> value at the head of this
 <code>SQLInputImpl</code> object as a <code>Blob</code> object
 in the Java programming language.
 <P>
 This method does not perform type-safe checking to determine if the
 returned type is the expected type as this responsibility is delegated
 to the UDT mapping as implemented by a <code>SQLData</code>
 implementation.

 @return a <code>Blob</code> object representing the SQL 
         <code>BLOB</code> value at the head of this stream; 
         if the value is <code>SQL NULL</code>, return
         <code>null</code>
 @throws SQLException if the read position is located at an invalid
 position; or if there are no further values in the stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Clob javax.sql.rowset.serial.SQLInputImpl.readClob() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>CLOB</code> value at the head of this
 <code>SQLInputImpl</code> object as a <code>Clob</code> object
 in the Java programming language.
 <P>    
 This method does not perform type-safe checking to determine if the
 returned type is the expected type as this responsibility is delegated
 to the UDT mapping as implemented by a <code>SQLData</code>
 implementation.

 @return a <code>Clob</code> object representing the SQL 
         <code>CLOB</code> value at the head of the stream; 
         if the value is <code>SQL NULL</code>, return
         <code>null</code>
 @throws SQLException if the read position is located at an invalid
 position; or if there are no further values in the stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Array javax.sql.rowset.serial.SQLInputImpl.readArray() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads an SQL <code>ARRAY</code> value from the stream and
 returns it as an <code>Array</code> object in the Java programming 
 language.
 <P>
 This method does not perform type-safe checking to determine if the
 returned type is the expected type as this responsibility is delegated
 to the UDT mapping as implemented by a <code>SQLData</code>
 implementation.

 @return an <code>Array</code> object representing the SQL
         <code>ARRAY</code> value at the head of the stream; *
         if the value is <code>SQL NULL</code>, return
         <code>null</code>
 @throws SQLException if the read position is located at an invalid
 position; or if there are no further values in the stream.


<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sql.rowset.serial.SQLInputImpl.wasNull() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Ascertains whether the last value read from this 
 <code>SQLInputImpl</code> object was <code>null</code>.
 
 @return <code>true</code> if the SQL value read most recently was 
         <code>null</code>; otherwise, <code>false</code>; by default it
         will return false
 @throws SQLException if an error occurs determining the last value
         read was a <code>null</code> value or not; 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL javax.sql.rowset.serial.SQLInputImpl.readURL() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Reads an SQL <code>DATALINK</code> value from the stream and
 returns it as an <code>URL</code> object in the Java programming 
 language.
 <P>
 This method does not perform type-safe checking to determine if the
 returned type is the expected type as this responsibility is delegated
 to the UDT mapping as implemented by a <code>SQLData</code>
 implementation.

 @return an <code>URL</code> object representing the SQL
         <code>DATALINK</code> value at the head of the stream; *
         if the value is <code>SQL NULL</code>, return
         <code>null</code>
 @throws SQLException if the read position is located at an invalid
 position; or if there are no further values in the stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.NClob javax.sql.rowset.serial.SQLInputImpl.readNClob() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads an SQL <code>NCLOB</code> value from the stream and returns it as a
 <code>Clob</code> object in the Java programming language.

 @return a <code>NClob</code> object representing data of the SQL <code>NCLOB</code> value
 at the head of the stream; <code>null</code> if the value read is
 SQL <code>NULL</code>
 @exception SQLException if a database access error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sql.rowset.serial.SQLInputImpl.readNString() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads the next attribute in the stream and returns it as a <code>String</code>
 in the Java programming language. It is intended for use when
 accessing  <code>NCHAR</code>,<code>NVARCHAR</code>
 and <code>LONGNVARCHAR</code> columns.

 @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
 @exception SQLException if a database access error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLXML javax.sql.rowset.serial.SQLInputImpl.readSQLXML() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads an SQL <code>XML</code> value from the stream and returns it as a
 <code>SQLXML</code> object in the Java programming language.

 @return a <code>SQLXML</code> object representing data of the SQL <code>XML</code> value
 at the head of the stream; <code>null</code> if the value read is
 SQL <code>NULL</code>
 @exception SQLException if a database access error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.RowId javax.sql.rowset.serial.SQLInputImpl.readRowId() throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads an SQL <code>ROWID</code> value from the stream and returns it as a
 <code>RowId</code> object in the Java programming language.

 @return a <code>RowId</code> object representing data of the SQL <code>ROWID</code> value
 at the head of the stream; <code>null</code> if the value read is
 SQL <code>NULL</code>
 @exception SQLException if a database access error occurs

<!-- END DATA -->
