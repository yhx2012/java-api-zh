<!-- BEGIN KEY -->
public class javax.sql.rowset.serial.SerialClob extends java.lang.Object implements java.sql.Clob, java.io.Serializable, java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A serialized mapping in the Java programming language of an SQL
 <code>CLOB</code> value.
 <P>
 The <code>SerialClob</code> class provides a constructor for creating
 an instance from a <code>Clob</code> object.  Note that the <code>Clob</code>
 object should have brought the SQL <code>CLOB</code> value's data over
 to the client before a <code>SerialClob</code> object
 is constructed from it.  The data of an SQL <code>CLOB</code> value can
 be materialized on the client as a stream of Unicode characters.
 <P>
 <code>SerialClob</code> methods make it possible to get a substring
 from a <code>SerialClob</code> object or to locate the start of
 a pattern of characters.

 @author Jonathan Bruce

<!-- END DATA -->
<!-- BEGIN KEY -->
private char[] javax.sql.rowset.serial.SerialClob.buf
<!-- END KEY -->
<!-- BEGIN DATA -->
 A serialized array of characters containing the data of the SQL
 <code>CLOB</code> value that this <code>SerialClob</code> object
 represents.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.sql.Clob javax.sql.rowset.serial.SerialClob.clob
<!-- END KEY -->
<!-- BEGIN DATA -->
 Internal Clob representation if SerialClob is intialized with a
 Clob

<!-- END DATA -->
<!-- BEGIN KEY -->
private long javax.sql.rowset.serial.SerialClob.len
<!-- END KEY -->
<!-- BEGIN DATA -->
 The length in characters of this <code>SerialClob</code> object's
 internal array of characters.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private long javax.sql.rowset.serial.SerialClob.origLen
<!-- END KEY -->
<!-- BEGIN DATA -->
 The original length in characters of tgus <code>SerialClob</code> 
 objects internal array of characters.
 
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sql.rowset.serial.SerialClob(char[] ch) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>SerialClob</code> object that is a serialized version of
 the given <code>char</code> array.
 <p>
 The new <code>SerialClob</code> object is initialized with the data from the
 <code>char</code> array, thus allowing disconnected <code>RowSet</code>
 objects to establish a serialized <code>Clob</code> object without touching
 the data source.

 @param ch the char array representing the <code>Clob</code> object to be
         serialized
 @throws SerialException if an error occurs during serialization
 @throws SQLException if a SQL error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sql.rowset.serial.SerialClob(Clob clob) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>SerialClob</code> object that is a serialized
 version of the given <code>Clob</code> object.
 <P>
 The new <code>SerialClob</code> object is initialized with the
 data from the <code>Clob</code> object; therefore, the
 <code>Clob</code> object should have previously brought the
 SQL <code>CLOB</code> value's data over to the client from
 the database. Otherwise, the new <code>SerialClob</code> object
 object will contain no data.
 <p>
 Note: The <code>Clob</code> object supplied to this constructor cannot
 return <code>null</code> for the <code>Clob.getCharacterStream()</code> 
 and <code>Clob.getAsciiStream</code> methods. This <code>SerialClob</code> 
 constructor cannot  serialize a <code>Clob</code> object in this instance
 and will throw an <code>SQLException</code> object.

 @param  clob the <code>Clob</code> object from which this
     <code>SerialClob</code> object is to be constructed; cannot be null
 @throws SerialException if an error occurs during serialization
 @throws SQLException if a SQL error occurs in capturing the CLOB;
     if the <code>Clob</code> object is a null; or if both the 
     <code>Clob.getCharacterStream()</code> and <code>Clob.getAsciiStream()</code>
     methods on the <code>Clob</code> return a null
 @see java.sql.Clob

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.sql.rowset.serial.SerialClob.length() throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the number of characters in this <code>SerialClob</code>
 object's array of characters. 

 @return a <code>long</code> indicating the length in characters of this
         <code>SerialClob</code> object's array of character
 @throws SerialException if an error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Reader javax.sql.rowset.serial.SerialClob.getCharacterStream() throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns this <code>SerialClob</code> object's data as a stream
 of Unicode characters. Unlike the related method, <code>getAsciiStream</code>,
 a stream is produced regardless of whether the <code>SerialClob</code> object
 was created with a <code>Clob</code> object or a <code>char</code> array.

 @return a <code>java.io.Reader</code> object containing this
         <code>SerialClob</code> object's data
 @throws SerialException if an error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream javax.sql.rowset.serial.SerialClob.getAsciiStream() throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>CLOB</code> value designated by this <code>SerialClob</code>
 object as an ascii stream. This method forwards the <code>getAsciiStream</code>
 call to the underlying <code>Clob</code> object in the event that this 
 <code>SerialClob</code> object is instantiated with a <code>Clob</code>
 object. If this <code>SerialClob</code> object is instantiated with
 a <code>char</code> array, a <code>SerialException</code> object is thrown.

 @return a <code>java.io.InputStream</code> object containing
     this <code>SerialClob</code> object's data
 @throws SerialException if this <code>SerialClob</code> object was not instantiated
     with a <code>Clob</code> object
 @throws SQLException if there is an error accessing the 
     <code>CLOB</code> value represented by the <code>Clob</code> object that was
     used to create this <code>SerialClob</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sql.rowset.serial.SerialClob.getSubString(long pos, int length) throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a copy of the substring contained in this
 <code>SerialClob</code> object, starting at the given position
 and continuing for the specified number or characters.

 @param pos the position of the first character in the substring
            to be copied; the first character of the
            <code>SerialClob</code> object is at position
            <code>1</code>; must not be less than <code>1</code>,
            and the sum of the starting position and the length
            of the substring must be less than the length of this
            <code>SerialClob</code> object
 @param length the number of characters in the substring to be
               returned; must not be greater than the length of
               this <code>SerialClob</code> object, and the
               sum of the starting position and the length
               of the substring must be less than the length of this
               <code>SerialClob</code> object
 @return a <code>String</code> object containing a substring of
         this <code>SerialClob</code> object beginning at the
         given position and containing the specified number of
         consecutive characters
 @throws SerialException if either of the arguments is out of bounds       

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.sql.rowset.serial.SerialClob.position(String searchStr, long start) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the position in this <code>SerialClob</code> object
 where the given <code>String</code> object begins, starting
 the search at the specified position. This method returns
 <code>-1</code> if the pattern is not found.

 @param searchStr the <code>String</code> object for which to
                  search
 @param start the position in this <code>SerialClob</code> object
         at which to start the search; the first position is
         <code>1</code>; must not be less than <code>1</code> nor
         greater than the length of this <code>SerialClob</code> object     
 @return the position at which the given <code>String</code> object
         begins, starting the search at the specified position;
         <code>-1</code> if the given <code>String</code> object is
         not found or the starting position is out of bounds; position
         numbering for the return value starts at <code>1</code>	
 @throws SerialException if an error occurs locating the String signature
 @throws SQLException if there is an error accessing the Blob value 	
         from the database.          

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.sql.rowset.serial.SerialClob.position(Clob searchStr, long start) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the position in this <code>SerialClob</code> object
 where the given <code>Clob</code> signature begins, starting
 the search at the specified position. This method returns
 <code>-1</code> if the pattern is not found.

 @param searchStr the <code>Clob</code> object for which to search
 @param start the position in this <code>SerialClob</code> object
        at which to begin the search; the first position is
         <code>1</code>; must not be less than <code>1</code> nor
         greater than the length of this <code>SerialClob</code> object 
 @return the position at which the given <code>Clob</code> 
         object begins in this <code>SerialClob</code> object,
         at or after the specified starting position
 @throws SerialException if an error occurs locating the Clob signature
 @throws SQLException if there is an error accessing the Blob value 	
         from the database        

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sql.rowset.serial.SerialClob.setString(long pos, String str) throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes the given Java <code>String</code> to the <code>CLOB</code>
 value that this <code>SerialClob</code> object represents, at the position 
 <code>pos</code>.

 @param pos the position at which to start writing to the <code>CLOB</code>
         value that this <code>SerialClob</code> object represents; the first 
         position is <code>1</code>; must not be less than <code>1</code> nor
         greater than the length of this <code>SerialClob</code> object 
 @param str the string to be written to the <code>CLOB</code>
        value that this <code>SerialClob</code> object represents
 @return the number of characters written
 @throws SerialException if there is an error accessing the 
     <code>CLOB</code> value; if an invalid position is set; if an 
     invalid offset value is set; if number of bytes to be written
     is greater than the <code>SerialClob</code> length; or the combined
     values of the length and offset is greater than the Clob buffer             

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sql.rowset.serial.SerialClob.setString(long pos, String str, int offset, int length) throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes <code>len</code> characters of <code>str</code>, starting 
 at character <code>offset</code>, to the <code>CLOB</code> value
 that this <code>Clob</code> represents.

 @param pos the position at which to start writing to the <code>CLOB</code>
         value that this <code>SerialClob</code> object represents; the first 
         position is <code>1</code>; must not be less than <code>1</code> nor
         greater than the length of this <code>SerialClob</code> object
 @param str the string to be written to the <code>CLOB</code> 
        value that this <code>Clob</code> object represents
 @param offset the offset into <code>str</code> to start reading
        the characters to be written
 @param length the number of characters to be written
 @return the number of characters written
 @throws SerialException if there is an error accessing the 
     <code>CLOB</code> value; if an invalid position is set; if an 
     invalid offset value is set; if number of bytes to be written
     is greater than the <code>SerialClob</code> length; or the combined
     values of the length and offset is greater than the Clob buffer     

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.OutputStream javax.sql.rowset.serial.SerialClob.setAsciiStream(long pos) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves a stream to be used to write Ascii characters to the
 <code>CLOB</code> value that this <code>SerialClob</code> object represents, 
 starting at position <code>pos</code>. This method forwards the 
 <code>setAsciiStream()</code> call to the underlying <code>Clob</code> object in 
 the event that this <code>SerialClob</code> object is instantiated with a 
 <code>Clob</code> object. If this <code>SerialClob</code> object is instantiated
  with a <code>char</code> array, a <code>SerialException</code> object is thrown.

 @param pos the position at which to start writing to the
        <code>CLOB</code> object
 @return the stream to which ASCII encoded characters can be written
 @throws SerialException if SerialClob is not instantiated with a
     Clob object that supports <code>setAsciiStream</code>
 @throws SQLException if there is an error accessing the 
     <code>CLOB</code> value     
 @see #getAsciiStream

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Writer javax.sql.rowset.serial.SerialClob.setCharacterStream(long pos) throws javax.sql.rowset.serial.SerialException, java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves a stream to be used to write a stream of Unicode characters 
 to the <code>CLOB</code> value that this <code>SerialClob</code> object
 represents, at position <code>pos</code>. This method forwards the 
 <code>setCharacterStream()</code> call to the underlying <code>Clob</code> 
 object in the event that this <code>SerialClob</code> object is instantiated with a 
 <code>Clob</code> object. If this <code>SerialClob</code> object is instantiated with
 a <code>char</code> array, a <code>SerialException</code> is thrown.

 @param  pos the position at which to start writing to the
        <code>CLOB</code> value

 @return a stream to which Unicode encoded characters can be written
 @throws SerialException if the SerialClob is not instantiated with
     a Clob object that supports <code>setCharacterStream</code>
 @throws SQLException if there is an error accessing the 
            <code>CLOB</code> value
 @see #getCharacterStream

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sql.rowset.serial.SerialClob.truncate(long length) throws javax.sql.rowset.serial.SerialException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Truncates the <code>CLOB</code> value that this <code>SerialClob</code> 
 object represents so that it has a length of <code>len</code>
 characters. 
 <p>
 Truncating a <code>SerialClob</code> object to length 0 has the effect of 
 clearing its contents.

 @param length the length, in bytes, to which the <code>CLOB</code>
        value should be truncated
 @throws SQLException if there is an error accessing the 
        <code>CLOB</code> value

<!-- END DATA -->
