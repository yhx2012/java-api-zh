<!-- BEGIN KEY -->
public interface javax.rmi.CORBA.UtilDelegate
<!-- END KEY -->
<!-- BEGIN DATA -->
 Supports delegation for method implementations in {@link Util}.  The
 delegate is a singleton instance of a class that implements this
 interface and provides a replacement implementation for all the
 methods of <code>javax.rmi.CORBA.Util</code>.

 Delegation is enabled by providing the delegate's class name as the
 value of the 
 <code>javax.rmi.CORBA.UtilClass</code>
 system property.

 @see Util

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.RemoteException javax.rmi.CORBA.UtilDelegate.mapSystemException(SystemException ex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Delegation call for {@link Util#mapSystemException}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.rmi.CORBA.UtilDelegate.writeAny(OutputStream out, Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Delegation call for {@link Util#writeAny}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.rmi.CORBA.UtilDelegate.readAny(InputStream in)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Delegation call for {@link Util#readAny}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.rmi.CORBA.UtilDelegate.writeRemoteObject(OutputStream out, Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Delegation call for {@link Util#writeRemoteObject}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.rmi.CORBA.UtilDelegate.writeAbstractObject(OutputStream out, Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Delegation call for {@link Util#writeAbstractObject}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.rmi.CORBA.UtilDelegate.registerTarget(Tie tie, Remote target)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Delegation call for {@link Util#registerTarget}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.rmi.CORBA.UtilDelegate.unexportObject(Remote target) throws java.rmi.NoSuchObjectException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Delegation call for {@link Util#unexportObject}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.rmi.CORBA.Tie javax.rmi.CORBA.UtilDelegate.getTie(Remote target)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Delegation call for {@link Util#getTie}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.rmi.CORBA.ValueHandler javax.rmi.CORBA.UtilDelegate.createValueHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Delegation call for {@link Util#createValueHandler}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.rmi.CORBA.UtilDelegate.getCodebase(java.lang.Class clz)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Delegation call for {@link Util#getCodebase}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class javax.rmi.CORBA.UtilDelegate.loadClass(String className, String remoteCodebase, ClassLoader loader) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Delegation call for {@link Util#loadClass}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.rmi.CORBA.UtilDelegate.isLocal(Stub stub) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Delegation call for {@link Util#isLocal}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.RemoteException javax.rmi.CORBA.UtilDelegate.wrapException(Throwable obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Delegation call for {@link Util#wrapException}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.rmi.CORBA.UtilDelegate.copyObject(Object obj, ORB orb) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Delegation call for {@link Util#copyObject}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] javax.rmi.CORBA.UtilDelegate.copyObjects(java.lang.Object[] obj, ORB orb) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Delegation call for {@link Util#copyObjects}.

<!-- END DATA -->
