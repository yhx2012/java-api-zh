<!-- BEGIN KEY -->
public abstract class javax.rmi.CORBA.Stub extends org.omg.CORBA_2_3.portable.ObjectImpl implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 Base class from which all RMI-IIOP stubs must inherit.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.rmi.CORBA.Stub.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hash code value for the object which is the same for all stubs
 that represent the same remote object.
 @return the hash code value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.rmi.CORBA.Stub.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares two stubs for equality. Returns <code>true</code> when used to compare stubs
 that represent the same remote object, and <code>false</code> otherwise.
 @param obj the reference object with which to compare.
 @return <code>true</code> if this object is the same as the <code>obj</code>
          argument; <code>false</code> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.rmi.CORBA.Stub.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this stub. Returns the same string
 for all stubs that represent the same remote object.
 @return a string representation of this stub.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.rmi.CORBA.Stub.connect(ORB orb) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Connects this stub to an ORB. Required after the stub is deserialized
 but not after it is demarshalled by an ORB stream. If an unconnected
 stub is passed to an ORB stream for marshalling, it is implicitly 
 connected to that ORB. Application code should not call this method
 directly, but should call the portable wrapper method 
 {@link javax.rmi.PortableRemoteObject#connect}.
 @param orb the ORB to connect to.
 @exception RemoteException if the stub is already connected to a different
 ORB, or if the stub does not represent an exported remote or local object.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.rmi.CORBA.Stub.readObject(ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Serialization method to restore the IOR state.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.rmi.CORBA.Stub.writeObject(ObjectOutputStream stream) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Serialization method to save the IOR state.
 @serialData The length of the IOR type ID (int), followed by the IOR type ID
 (byte array encoded using ISO8859-1), followed by the number of IOR profiles
 (int), followed by the IOR profiles.  Each IOR profile is written as a 
 profile tag (int), followed by the length of the profile data (int), followed
 by the profile data (byte array).

<!-- END DATA -->
