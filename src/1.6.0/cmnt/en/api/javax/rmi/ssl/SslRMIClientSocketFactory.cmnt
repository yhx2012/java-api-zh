<!-- BEGIN KEY -->
public class javax.rmi.ssl.SslRMIClientSocketFactory extends java.lang.Object implements java.rmi.server.RMIClientSocketFactory, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>An <code>SslRMIClientSocketFactory</code> instance is used by the RMI
 runtime in order to obtain client sockets for RMI calls via SSL.</p>

 <p>This class implements <code>RMIClientSocketFactory</code> over
 the Secure Sockets Layer (SSL) or Transport Layer Security (TLS)
 protocols.</p>

 <p>This class creates SSL sockets using the default
 <code>SSLSocketFactory</code> (see {@link
 SSLSocketFactory#getDefault}).  All instances of this class are
 functionally equivalent.  In particular, they all share the same
 truststore, and the same keystore when client authentication is
 required by the server.  This behavior can be modified in
 subclasses by overriding the {@link #createSocket(String,int)}
 method; in that case, {@link #equals(Object) equals} and {@link
 #hashCode() hashCode} may also need to be overridden.</p>

 <p>If the system property
 <code>javax.rmi.ssl.client.enabledCipherSuites</code> is specified,
 the {@link #createSocket(String,int)} method will call {@link
 SSLSocket#setEnabledCipherSuites(String[])} before returning the
 socket.  The value of this system property is a string that is a
 comma-separated list of SSL/TLS cipher suites to enable.</p>

 <p>If the system property
 <code>javax.rmi.ssl.client.enabledProtocols</code> is specified,
 the {@link #createSocket(String,int)} method will call {@link
 SSLSocket#setEnabledProtocols(String[])} before returning the
 socket.  The value of this system property is a string that is a
 comma-separated list of SSL/TLS protocol versions to enable.</p>

 @see javax.net.ssl.SSLSocketFactory
 @see javax.rmi.ssl.SslRMIServerSocketFactory
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.rmi.ssl.SslRMIClientSocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Creates a new <code>SslRMIClientSocketFactory</code>.</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.Socket javax.rmi.ssl.SslRMIClientSocketFactory.createSocket(String host, int port) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Creates an SSL socket.</p>

 <p>If the system property
 <code>javax.rmi.ssl.client.enabledCipherSuites</code> is
 specified, this method will call {@link
 SSLSocket#setEnabledCipherSuites(String[])} before returning
 the socket. The value of this system property is a string that
 is a comma-separated list of SSL/TLS cipher suites to
 enable.</p>

 <p>If the system property
 <code>javax.rmi.ssl.client.enabledProtocols</code> is
 specified, this method will call {@link
 SSLSocket#setEnabledProtocols(String[])} before returning the
 socket. The value of this system property is a string that is a
 comma-separated list of SSL/TLS protocol versions to
 enable.</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.rmi.ssl.SslRMIClientSocketFactory.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Indicates whether some other object is "equal to" this one.</p>

 <p>Because all instances of this class are functionally equivalent
 (they all use the default
 <code>SSLSocketFactory</code>), this method simply returns
 <code>this.getClass().equals(obj.getClass())</code>.</p>

 <p>A subclass should override this method (as well
 as {@link #hashCode()}) if its instances are not all
 functionally equivalent.</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.rmi.ssl.SslRMIClientSocketFactory.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Returns a hash code value for this
 <code>SslRMIClientSocketFactory</code>.</p>

 @return a hash code value for this
 <code>SslRMIClientSocketFactory</code>.

<!-- END DATA -->
