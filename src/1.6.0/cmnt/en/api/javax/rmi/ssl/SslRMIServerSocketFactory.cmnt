<!-- BEGIN KEY -->
public class javax.rmi.ssl.SslRMIServerSocketFactory extends java.lang.Object implements java.rmi.server.RMIServerSocketFactory
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>An <code>SslRMIServerSocketFactory</code> instance is used by the RMI
 runtime in order to obtain server sockets for RMI calls via SSL.</p>

 <p>This class implements <code>RMIServerSocketFactory</code> over
 the Secure Sockets Layer (SSL) or Transport Layer Security (TLS)
 protocols.</p>

 <p>This class creates SSL sockets using the default
 <code>SSLSocketFactory</code> (see {@link
 SSLSocketFactory#getDefault}) or the default
 <code>SSLServerSocketFactory</code> (see {@link
 SSLServerSocketFactory#getDefault}).  Therefore, all instances of
 this class share the same keystore, and the same truststore, when
 client authentication is required by the server.  This behavior
 can be modified in subclasses by overriding the {@link
 #createServerSocket(int)} method; in that case, {@link
 #equals(Object) equals} and {@link #hashCode() hashCode} may also
 need to be overridden.</p>

 @see javax.net.ssl.SSLSocketFactory
 @see javax.net.ssl.SSLServerSocketFactory
 @see javax.rmi.ssl.SslRMIClientSocketFactory
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.rmi.ssl.SslRMIServerSocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Creates a new <code>SslRMIServerSocketFactory</code> with
 the default SSL socket configuration.</p>

 <p>SSL connections accepted by server sockets created by this
 factory have the default cipher suites and protocol versions
 enabled and do not require client authentication.</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.rmi.ssl.SslRMIServerSocketFactory(java.lang.String[] enabledCipherSuites, java.lang.String[] enabledProtocols, boolean needClientAuth) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Creates a new <code>SslRMIServerSocketFactory</code> with
 the specified SSL socket configuration.</p>

 @param enabledCipherSuites names of all the cipher suites to
 enable on SSL connections accepted by server sockets created by
 this factory, or <code>null</code> to use the cipher suites
 that are enabled by default

 @param enabledProtocols names of all the protocol versions to
 enable on SSL connections accepted by server sockets created by
 this factory, or <code>null</code> to use the protocol versions
 that are enabled by default

 @param needClientAuth <code>true</code> to require client
 authentication on SSL connections accepted by server sockets
 created by this factory; <code>false</code> to not require
 client authentication

 @exception IllegalArgumentException when one or more of the cipher
 suites named by the <code>enabledCipherSuites</code> parameter is
 not supported, when one or more of the protocols named by the
 <code>enabledProtocols</code> parameter is not supported or when
 a problem is encountered while trying to check if the supplied
 cipher suites and protocols to be enabled are supported.

 @see SSLSocket#setEnabledCipherSuites
 @see SSLSocket#setEnabledProtocols
 @see SSLSocket#setNeedClientAuth

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String[] javax.rmi.ssl.SslRMIServerSocketFactory.getEnabledCipherSuites()
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Returns the names of the cipher suites enabled on SSL
 connections accepted by server sockets created by this factory,
 or <code>null</code> if this factory uses the cipher suites
 that are enabled by default.</p>

 @return an array of cipher suites enabled, or <code>null</code>

 @see SSLSocket#setEnabledCipherSuites

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String[] javax.rmi.ssl.SslRMIServerSocketFactory.getEnabledProtocols()
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Returns the names of the protocol versions enabled on SSL
 connections accepted by server sockets created by this factory,
 or <code>null</code> if this factory uses the protocol versions
 that are enabled by default.</p>

 @return an array of protocol versions enabled, or
 <code>null</code>

 @see SSLSocket#setEnabledProtocols

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean javax.rmi.ssl.SslRMIServerSocketFactory.getNeedClientAuth()
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Returns <code>true</code> if client authentication is
 required on SSL connections accepted by server sockets created
 by this factory.</p>

 @return <code>true</code> if client authentication is required

 @see SSLSocket#setNeedClientAuth

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.ServerSocket javax.rmi.ssl.SslRMIServerSocketFactory.createServerSocket(int port) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Creates a server socket that accepts SSL connections
 configured according to this factory's SSL socket configuration
 parameters.</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.rmi.ssl.SslRMIServerSocketFactory.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Indicates whether some other object is "equal to" this one.</p>

 <p>Two <code>SslRMIServerSocketFactory</code> objects are equal
 if they have been constructed with the same SSL socket
 configuration parameters.</p>

 <p>A subclass should override this method (as well as
 {@link #hashCode()}) if it adds instance state that affects
 equality.</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.rmi.ssl.SslRMIServerSocketFactory.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Returns a hash code value for this
 <code>SslRMIServerSocketFactory</code>.</p>

 @return a hash code value for this
 <code>SslRMIServerSocketFactory</code>.

<!-- END DATA -->
