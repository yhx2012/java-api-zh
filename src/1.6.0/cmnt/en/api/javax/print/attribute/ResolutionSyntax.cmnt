<!-- BEGIN KEY -->
public abstract class javax.print.attribute.ResolutionSyntax extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
 Class ResolutionSyntax is an abstract base class providing the common 
 implementation of all attributes denoting a printer resolution. 
 <P>
 A resolution attribute's value consists of two items, the cross feed 
 direction resolution and the feed direction resolution. A resolution 
 attribute may be constructed by supplying the two values and indicating the 
 units in which the values are measured. Methods are provided to return a 
 resolution attribute's values, indicating the units in which the values are 
 to be returned. The two most common resolution units are dots per inch (dpi) 
 and dots per centimeter (dpcm), and exported constants {@link #DPI 
 <CODE>DPI</CODE>} and {@link #DPCM <CODE>DPCM</CODE>} are provided for 
 indicating those units. 
 <P>
 Once constructed, a resolution attribute's value is immutable. 
 <P>
 <B>Design</B>
 <P>
 A resolution attribute's cross feed direction resolution and feed direction 
 resolution values are stored internally using units of dots per 100 inches 
 (dphi). Storing the values in dphi rather than, say, metric units allows 
 precise integer arithmetic conversions between dpi and dphi and between dpcm 
 and dphi: 1 dpi = 100 dphi, 1 dpcm = 254 dphi. Thus, the values can be stored 
 into and retrieved back from a resolution attribute in either units with no 
 loss of precision. This would not be guaranteed if a floating point 
 representation were used. However, roundoff error will in general occur if a 
 resolution attribute's values are created in one units and retrieved in 
 different units; for example, 600 dpi will be rounded to 236 dpcm, whereas 
 the true value (to five figures) is 236.22 dpcm. 
 <P>
 Storing the values internally in common units of dphi lets two resolution 
 attributes be compared without regard to the units in which they were 
 created; for example, 300 dpcm will compare equal to 762 dpi, as they both 
 are stored as 76200 dphi. In particular, a lookup service can 
 match resolution attributes based on equality of their serialized 
 representations regardless of the units in which they were created. Again, 
 using integers for internal storage allows precise equality comparisons to be 
 done, which would not be guaranteed if a floating point representation were 
 used. 
 <P>
 The exported constant {@link #DPI <CODE>DPI</CODE>} is actually the 
 conversion factor by which to multiply a value in dpi to get the value in 
 dphi. Likewise, the exported constant {@link #DPCM <CODE>DPCM</CODE>} is the 
 conversion factor by which to multiply a value in dpcm to get the value in 
 dphi. A client can specify a resolution value in units other than dpi or dpcm 
 by supplying its own conversion factor. However, since the internal units of 
 dphi was chosen with supporting only the external units of dpi and dpcm in 
 mind, there is no guarantee that the conversion factor for the client's units 
 will be an exact integer. If the conversion factor isn't an exact integer, 
 resolution values in the client's units won't be stored precisely. 
 <P>

 @author  David Mendenhall
 @author  Alan Kaminsky

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.print.attribute.ResolutionSyntax.DPI
<!-- END KEY -->
<!-- BEGIN DATA -->
 Value to indicate units of dots per inch (dpi). It is actually the 
 conversion factor by which to multiply dpi to yield dphi (100). 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.print.attribute.ResolutionSyntax.DPCM
<!-- END KEY -->
<!-- BEGIN DATA -->
 Value to indicate units of dots per centimeter (dpcm). It is actually 
 the conversion factor by which to multiply dpcm to yield dphi (254). 

<!-- END DATA -->
<!-- BEGIN KEY -->
private int javax.print.attribute.ResolutionSyntax.crossFeedResolution
<!-- END KEY -->
<!-- BEGIN DATA -->
 Cross feed direction resolution in units of dots per 100 inches (dphi).
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int javax.print.attribute.ResolutionSyntax.feedResolution
<!-- END KEY -->
<!-- BEGIN DATA -->
 Feed direction resolution in units of dots per 100 inches (dphi).
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.print.attribute.ResolutionSyntax(int crossFeedResolution, int feedResolution, int units)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a new resolution attribute from the given items.

 @param  crossFeedResolution
     Cross feed direction resolution.
 @param  feedResolution
     Feed direction resolution.
 @param units
     Unit conversion factor, e.g. {@link #DPI <CODE>DPI</CODE>} or
 {@link    #DPCM <CODE>DPCM</CODE>}. 

 @exception  IllegalArgumentException
     (unchecked exception) Thrown if <CODE>crossFeedResolution</CODE> < 
     1 or <CODE>feedResolution</CODE> < 1 or <CODE>units</CODE> < 1. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] javax.print.attribute.ResolutionSyntax.getResolution(int units)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get this resolution attribute's resolution values in the given units.
 The values are rounded to the nearest integer. 

 @param  units
     Unit conversion factor, e.g. {@link #DPI <CODE>DPI</CODE>} or
 {@link   #DPCM <CODE>DPCM</CODE>}. 

 @return  A two-element array with the cross feed direction resolution
          at index 0 and the feed direction resolution at index 1. 

 @exception  IllegalArgumentException
     (unchecked exception) Thrown if <CODE>units</CODE> < 1. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.print.attribute.ResolutionSyntax.getCrossFeedResolution(int units)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns this resolution attribute's cross feed direction resolution in 
 the given units. The value is rounded to the nearest integer. 

 @param  units
     Unit conversion factor, e.g. {@link #DPI <CODE>DPI</CODE>} or
 {@link  #DPCM <CODE>DPCM</CODE>}. 

 @return  Cross feed direction resolution.

 @exception  IllegalArgumentException
     (unchecked exception) Thrown if <CODE>units</CODE> < 1. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.print.attribute.ResolutionSyntax.getFeedResolution(int units)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns this resolution attribute's feed direction resolution in the 
 given units. The value is rounded to the nearest integer. 

 @param  units
     Unit conversion factor, e.g. {@link #DPI <CODE>DPI</CODE>} or {@link 
     #DPCM <CODE>DPCM</CODE>}. 

 @return  Feed direction resolution.

 @exception  IllegalArgumentException
     (unchecked exception) Thrown if <CODE>units</CODE> < 1. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.print.attribute.ResolutionSyntax.toString(int units, String unitsName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string version of this resolution attribute in the given units. 
 The string takes the form <CODE>"<I>C</I>x<I>F</I> <I>U</I>"</CODE>, 
 where <I>C</I> is the cross feed direction resolution, <I>F</I> is the 
 feed direction resolution, and <I>U</I> is the units name. The values are 
 rounded to the nearest integer. 

 @param  units
     Unit conversion factor, e.g. {@link #DPI <CODE>DPI</CODE>} or {@link 
     #DPCM <CODE>DPCM</CODE>}. 
 @param  unitsName
     Units name string, e.g. <CODE>"dpi"</CODE> or <CODE>"dpcm"</CODE>. If 
     null, no units name is appended to the result. 

 @return  String version of this resolution attribute.

 @exception  IllegalArgumentException
     (unchecked exception) Thrown if <CODE>units</CODE> < 1. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.ResolutionSyntax.lessThanOrEquals(ResolutionSyntax other)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determine whether this resolution attribute's value is less than or 
 equal to the given resolution attribute's value. This is true if all
 of the following conditions are true: 
 <UL>
 <LI>
 This attribute's cross feed direction resolution is less than or equal to 
 the <CODE>other</CODE> attribute's cross feed direction resolution.
 <LI>
 This attribute's feed direction resolution is less than or equal to the 
 <CODE>other</CODE> attribute's feed direction resolution. 
 </UL>

 @param  other  Resolution attribute to compare with.

 @return  True if this resolution attribute is less than or equal to the
          <CODE>other</CODE> resolution attribute, false otherwise.

 @exception  NullPointerException
     (unchecked exception) Thrown if <CODE>other</CODE> is null.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.ResolutionSyntax.equals(Object object)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether this resolution attribute is equivalent to the passed in 
 object. To be equivalent, all of the following conditions must be true: 
 <OL TYPE=1>
 <LI>
 <CODE>object</CODE> is not null.
 <LI>
 <CODE>object</CODE> is an instance of class ResolutionSyntax.
 <LI>
 This attribute's cross feed direction resolution is equal to 
 <CODE>object</CODE>'s cross feed direction resolution. 
 <LI>
 This attribute's feed direction resolution is equal to
 <CODE>object</CODE>'s feed direction resolution. 
 </OL>

 @param  object  Object to compare to.

 @return  True if <CODE>object</CODE> is equivalent to this resolution
          attribute, false otherwise. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.print.attribute.ResolutionSyntax.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hash code value for this resolution attribute.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.print.attribute.ResolutionSyntax.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string version of this resolution attribute. The string takes 
 the form <CODE>"<I>C</I>x<I>F</I> dphi"</CODE>, where <I>C</I> is the 
 cross feed direction resolution and <I>F</I> is the feed direction 
 resolution. The values are reported in the internal units of dphi. 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.print.attribute.ResolutionSyntax.getCrossFeedResolutionDphi()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns this resolution attribute's cross feed direction resolution in 
 units of dphi. (For use in a subclass.)

 @return  Cross feed direction resolution.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.print.attribute.ResolutionSyntax.getFeedResolutionDphi()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns this resolution attribute's feed direction resolution in units 
 of dphi. (For use in a subclass.) 

 @return  Feed direction resolution.

<!-- END DATA -->
