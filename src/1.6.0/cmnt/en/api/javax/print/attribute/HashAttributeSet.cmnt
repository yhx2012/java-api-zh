<!-- BEGIN KEY -->
public class javax.print.attribute.HashAttributeSet extends java.lang.Object implements javax.print.attribute.AttributeSet, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 Class HashAttributeSet provides an <code>AttributeSet</code>
 implementation with characteristics of a hash map.
 <P>

 @author  Alan Kaminsky

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Class javax.print.attribute.HashAttributeSet.myInterface
<!-- END KEY -->
<!-- BEGIN DATA -->
 The interface of which all members of this attribute set must be an 
 instance. It is assumed to be interface {@link Attribute Attribute}
 or a subinterface thereof. 
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.print.attribute.HashAttributeSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a new, empty attribute set. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.print.attribute.HashAttributeSet(Attribute attribute)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a new attribute set,
 initially populated with the given attribute. 

 @param  attribute  Attribute value to add to the set.

 @exception  NullPointerException
     (unchecked exception) Thrown if <CODE>attribute</CODE> is null.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.print.attribute.HashAttributeSet(javax.print.attribute.Attribute[] attributes)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a new attribute set,
 initially populated with the values from the 
 given array. The new attribute set is populated by 
 adding the elements of <CODE>attributes</CODE> array to the set in 
 sequence, starting at index 0. Thus, later array elements may replace 
 earlier array elements if the array contains duplicate attribute 
 values or attribute categories. 

 @param  attributes  Array of attribute values to add to the set. 
                    If null, an empty attribute set is constructed.

 @exception  NullPointerException
     (unchecked exception) Thrown if any element of
     <CODE>attributes</CODE> is null. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.print.attribute.HashAttributeSet(AttributeSet attributes)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a new attribute set,
 initially populated with the values from the  given set.

 @param  attributes Set of attributes from which to initialise this set.
                 If null, an empty attribute set is constructed.


<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.print.attribute.HashAttributeSet(java.lang.Class<?> interfaceName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a new, empty attribute set, where the members of
 the attribute set are restricted to the given interface. 

 @param  interfaceName  The interface of which all members of this
                     attribute set must be an instance. It is assumed to 
                     be interface {@link Attribute Attribute} or a 
                     subinterface thereof.
 @exception NullPointerException if interfaceName is null.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.print.attribute.HashAttributeSet(Attribute attribute, java.lang.Class<?> interfaceName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a new attribute set, initially populated with the given
 attribute, where the members of the attribute set are restricted to the
 given interface. 

 @param  attribute      Attribute value to add to the set.
 @param  interfaceName  The interface of which all members of this
                    attribute set must be an instance. It is assumed to 
                    be interface {@link Attribute Attribute} or a 
                    subinterface thereof. 

 @exception  NullPointerException
     (unchecked exception) Thrown if <CODE>attribute</CODE> is null.
 @exception NullPointerException if interfaceName is null.
 @exception  ClassCastException
     (unchecked exception) Thrown if <CODE>attribute</CODE> is not an 
     instance of <CODE>interfaceName</CODE>. 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.print.attribute.HashAttributeSet(javax.print.attribute.Attribute[] attributes, java.lang.Class<?> interfaceName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a new attribute set, where the members of the attribute
 set are restricted to the given interface.
 The new attribute set is populated 
 by adding the elements of <CODE>attributes</CODE> array to the set in 
 sequence, starting at index 0. Thus, later array elements may replace 
 earlier array elements if the array contains duplicate attribute 
 values or attribute categories. 

 @param  attributes Array of attribute values to add to the set. If
                    null, an empty attribute set is constructed.
 @param  interfaceName  The interface of which all members of this
                    attribute set must be an instance. It is assumed to 
                    be interface {@link Attribute Attribute} or a 
                    subinterface thereof. 

 @exception  NullPointerException
     (unchecked exception) Thrown if any element of
 <CODE>attributes</CODE> is null.
 @exception NullPointerException if interfaceName is null.
 @exception  ClassCastException
     (unchecked exception) Thrown if any element of
 <CODE>attributes</CODE> is not an instance of
 <CODE>interfaceName</CODE>. 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.print.attribute.HashAttributeSet(AttributeSet attributes, java.lang.Class<?> interfaceName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a new attribute set, initially populated with the
 values from the  given set where the members of the attribute
 set are restricted to the given interface.

 @param  attributes set of attribute values to initialise the set. If
                    null, an empty attribute set is constructed.
 @param  interfaceName  The interface of which all members of this
                    attribute set must be an instance. It is assumed to 
                    be interface {@link Attribute Attribute} or a 
                    subinterface thereof. 

 @exception  ClassCastException
     (unchecked exception) Thrown if any element of
 <CODE>attributes</CODE> is not an instance of
 <CODE>interfaceName</CODE>. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.print.attribute.Attribute javax.print.attribute.HashAttributeSet.get(java.lang.Class<?> category)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the attribute value which this attribute set contains in the 
 given attribute category. Returns <tt>null</tt> if this attribute set 
 does not contain any attribute value in the given attribute category.

 @param  category  Attribute category whose associated attribute value
                   is to be returned. It must be a
                   {@link java.lang.Class Class}
                   that implements interface {@link Attribute 
                   Attribute}. 

 @return  The attribute value in the given attribute category contained
          in this attribute set, or <tt>null</tt> if this attribute set
          does not contain any attribute value in the given attribute
          category. 
 
 @throws  NullPointerException
     (unchecked exception) Thrown if the <CODE>category</CODE> is null.
 @throws  ClassCastException
     (unchecked exception) Thrown if the <CODE>category</CODE> is not a 
     {@link java.lang.Class Class} that implements interface {@link 
     Attribute Attribute}. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.HashAttributeSet.add(Attribute attribute)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified attribute to this attribute set if it is not 
 already present, first removing any existing in the same
 attribute category as the specified attribute value. 

 @param  attribute  Attribute value to be added to this attribute set.

 @return  <tt>true</tt> if this attribute set changed as a result of the
          call, i.e., the given attribute value was not already a 
          member of this attribute set. 
 
 @throws  NullPointerException
    (unchecked exception) Thrown if the <CODE>attribute</CODE> is null. 
 @throws  UnmodifiableSetException
    (unchecked exception) Thrown if this attribute set does not support 
     the <CODE>add()</CODE> operation. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.HashAttributeSet.remove(java.lang.Class<?> category)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes any attribute for this category from this attribute set if  
 present. If <CODE>category</CODE> is null, then 
 <CODE>remove()</CODE> does nothing and returns <tt>false</tt>. 

 @param  category Attribute category to be removed from this
                  attribute set.

 @return  <tt>true</tt> if this attribute set changed as a result of the
         call, i.e., the given attribute category had been a member of 
         this attribute set. 
 
 @throws  UnmodifiableSetException
     (unchecked exception) Thrown if this attribute set does not 
     support the <CODE>remove()</CODE> operation. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.HashAttributeSet.remove(Attribute attribute)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified attribute from this attribute set if  
 present. If <CODE>attribute</CODE> is null, then 
 <CODE>remove()</CODE> does nothing and returns <tt>false</tt>. 

 @param attribute Attribute value to be removed from this attribute set.

 @return  <tt>true</tt> if this attribute set changed as a result of the
         call, i.e., the given attribute value had been a member of 
         this attribute set. 
 
 @throws  UnmodifiableSetException
     (unchecked exception) Thrown if this attribute set does not 
     support the <CODE>remove()</CODE> operation. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.HashAttributeSet.containsKey(java.lang.Class<?> category)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this attribute set contains an 
 attribute for the specified category.

 @param  category whose presence in this attribute set is
            to be tested.

 @return  <tt>true</tt> if this attribute set contains an attribute 
         value for the specified category.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.HashAttributeSet.containsValue(Attribute attribute)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this attribute set contains the given  
 attribute.

 @param  attribute  value whose presence in this attribute set is
            to be tested.

 @return  <tt>true</tt> if this attribute set contains the given 
      attribute    value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.HashAttributeSet.addAll(AttributeSet attributes)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds all of the elements in the specified set to this attribute.
 The outcome is the same as if the
 {@link #add(Attribute) <CODE>add(Attribute)</CODE>} 
 operation had been applied to this attribute set successively with 
 each element from the specified set.
 The behavior of the <CODE>addAll(AttributeSet)</CODE>
 operation is unspecified if the specified set is modified while
 the operation is in progress.
 <P>
 If the <CODE>addAll(AttributeSet)</CODE> operation throws an exception,
 the effect on this attribute set's state is implementation dependent;
 elements from the specified set before the point of the exception may
 or may not have been added to this attribute set. 

 @param  attributes  whose elements are to be added to this attribute 
            set.

 @return  <tt>true</tt> if this attribute set changed as a result of the
          call.
 
 @throws  UnmodifiableSetException
    (Unchecked exception) Thrown if this attribute set does not 
     support the <tt>addAll(AttributeSet)</tt> method. 
 @throws  NullPointerException
     (Unchecked exception) Thrown if some element in the specified 
     set is null, or the set is null.

 @see #add(Attribute)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.print.attribute.HashAttributeSet.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of attributes in this attribute set. If this
 attribute set contains more than <tt>Integer.MAX_VALUE</tt> elements,
 returns  <tt>Integer.MAX_VALUE</tt>.

 @return  The number of attributes in this attribute set.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.print.attribute.Attribute[] javax.print.attribute.HashAttributeSet.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 
 @return the Attributes contained in this set as an array, zero length
 if the AttributeSet is empty.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.print.attribute.HashAttributeSet.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all attributes from this attribute set.

 @throws  UnmodifiableSetException
   (unchecked exception) Thrown if this attribute set does not support 
     the <CODE>clear()</CODE> operation. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.HashAttributeSet.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if this attribute set contains no attributes.

 @return true if this attribute set contains no attributes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.print.attribute.HashAttributeSet.equals(Object object)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares the specified object with this attribute set for equality. 
 Returns <tt>true</tt> if the given object is also an attribute set and 
 the two attribute sets contain the same attribute category-attribute 
 value mappings. This ensures that the 
 <tt>equals()</tt> method works properly across different  
 implementations of the AttributeSet interface. 

 @param  object to be compared for equality with this attribute set.

 @return  <tt>true</tt> if the specified object is equal to this 
       attribute   set.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.print.attribute.HashAttributeSet.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the hash code value for this attribute set.
 The hash code of an attribute set is defined to be the sum
 of the hash codes of each entry in the AttributeSet. 
 This ensures that <tt>t1.equals(t2)</tt> implies that 
 <tt>t1.hashCode()==t2.hashCode()</tt> for any two attribute sets 
 <tt>t1</tt> and <tt>t2</tt>, as required by the general contract of 
 {@link java.lang.Object#hashCode() <CODE>Object.hashCode()</CODE>}. 

 @return  The hash code value for this attribute set.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.print.attribute.HashAttributeSet.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reconstitute an instance from a stream that is, deserialize it).

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.print.attribute.HashAttributeSet.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Write the instance to a stream (ie serialize the object)

 @serialData
 The serialized form of an attribute set explicitly writes the
 number of attributes in the set, and each of the attributes.
 This does not guarantee equality of serialized forms since
 the order in which the attributes are written is not defined.

<!-- END DATA -->
