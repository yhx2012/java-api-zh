<!-- BEGIN KEY -->
public class javax.sound.midi.Sequence extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <code>Sequence</code> is a data structure containing musical
 information (often an entire song or composition) that can be played
 back by a <code>{@link Sequencer}</code> object. Specifically, the
 <code>Sequence</code> contains timing
 information and one or more tracks.  Each <code>{@link Track track}</code> consists of a
 series of MIDI events (such as note-ons, note-offs, program changes, and meta-events).
 The sequence's timing information specifies the type of unit that is used
 to time-stamp the events in the sequence.
 <p>
 A <code>Sequence</code> can be created from a MIDI file by reading the file
 into an input stream and invoking one of the <code>getSequence</code> methods of
 {@link MidiSystem}.  A sequence can also be built from scratch by adding new
 <code>Tracks</code> to an empty <code>Sequence</code>, and adding
 <code>{@link MidiEvent}</code> objects to these <code>Tracks</code>.

 @see Sequencer#setSequence(java.io.InputStream stream)
 @see Sequencer#setSequence(Sequence sequence)
 @see Track#add(MidiEvent)
 @see MidiFileFormat

 @version 1.28, 05/11/17
 @author Kara Kytle

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final float javax.sound.midi.Sequence.PPQ
<!-- END KEY -->
<!-- BEGIN DATA -->
 The tempo-based timing type, for which the resolution is expressed in pulses (ticks) per quarter note.
 @see #Sequence(float, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final float javax.sound.midi.Sequence.SMPTE_24
<!-- END KEY -->
<!-- BEGIN DATA -->
 The SMPTE-based timing type with 24 frames per second (resolution is expressed in ticks per frame).
 @see #Sequence(float, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final float javax.sound.midi.Sequence.SMPTE_25
<!-- END KEY -->
<!-- BEGIN DATA -->
 The SMPTE-based timing type with 25 frames per second (resolution is expressed in ticks per frame).
 @see #Sequence(float, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final float javax.sound.midi.Sequence.SMPTE_30DROP
<!-- END KEY -->
<!-- BEGIN DATA -->
 The SMPTE-based timing type with 29.97 frames per second (resolution is expressed in ticks per frame).
 @see #Sequence(float, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final float javax.sound.midi.Sequence.SMPTE_30
<!-- END KEY -->
<!-- BEGIN DATA -->
 The SMPTE-based timing type with 30 frames per second (resolution is expressed in ticks per frame).
 @see #Sequence(float, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected float javax.sound.midi.Sequence.divisionType
<!-- END KEY -->
<!-- BEGIN DATA -->
 The timing division type of the sequence.
 @see #PPQ
 @see #SMPTE_24
 @see #SMPTE_25
 @see #SMPTE_30DROP
 @see #SMPTE_30
 @see #getDivisionType

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.sound.midi.Sequence.resolution
<!-- END KEY -->
<!-- BEGIN DATA -->
 The timing resolution of the sequence.
 @see #getResolution

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Vector<javax.sound.midi.Track> javax.sound.midi.Sequence.tracks
<!-- END KEY -->
<!-- BEGIN DATA -->
 The MIDI tracks in this sequence.
 @see #getTracks

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.midi.Sequence(float divisionType, int resolution) throws javax.sound.midi.InvalidMidiDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new MIDI sequence with the specified timing division
 type and timing resolution.  The division type must be one of the
 recognized MIDI timing types.  For tempo-based timing,
 <code>divisionType</code> is PPQ (pulses per quarter note) and
 the resolution is specified in ticks per beat.  For SMTPE timing,
 <code>divisionType</code> specifies the number of frames per
 second and the resolution is specified in ticks per frame.
 The sequence will contain no initial tracks.  Tracks may be
 added to or removed from the sequence using <code>{@link #createTrack}</code>
 and <code>{@link #deleteTrack}</code>.

 @param divisionType the timing division type (PPQ or one of the SMPTE types)
 @param resolution the timing resolution
 @throws InvalidMidiDataException if <code>divisionType</code> is not valid

 @see #PPQ
 @see #SMPTE_24
 @see #SMPTE_25
 @see #SMPTE_30DROP
 @see #SMPTE_30
 @see #getDivisionType
 @see #getResolution
 @see #getTracks

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.midi.Sequence(float divisionType, int resolution, int numTracks) throws javax.sound.midi.InvalidMidiDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new MIDI sequence with the specified timing division
 type, timing resolution, and number of tracks.  The division type must be one of the
 recognized MIDI timing types.  For tempo-based timing,
 <code>divisionType</code> is PPQ (pulses per quarter note) and
 the resolution is specified in ticks per beat.  For SMTPE timing,
 <code>divisionType</code> specifies the number of frames per
 second and the resolution is specified in ticks per frame.
 The sequence will be initialized with the number of tracks specified by
 <code>numTracks</code>. These tracks are initially empty (i.e.
 they contain only the meta-event End of Track).
 The tracks may be retrieved for editing using the <code>{@link #getTracks}</code>
 method.  Additional tracks may be added, or existing tracks removed,
 using <code>{@link #createTrack}</code> and <code>{@link #deleteTrack}</code>.

 @param divisionType the timing division type (PPQ or one of the SMPTE types)
 @param resolution the timing resolution
 @param numTracks the initial number of tracks in the sequence.
 @throws InvalidMidiDataException if <code>divisionType</code> is not valid

 @see #PPQ
 @see #SMPTE_24
 @see #SMPTE_25
 @see #SMPTE_30DROP
 @see #SMPTE_30
 @see #getDivisionType
 @see #getResolution

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.sound.midi.Sequence.getDivisionType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the timing division type for this sequence.
 @return the division type (PPQ or one of the SMPTE types)

 @see #PPQ
 @see #SMPTE_24
 @see #SMPTE_25
 @see #SMPTE_30DROP
 @see #SMPTE_30
 @see #Sequence(float, int)
 @see MidiFileFormat#getDivisionType()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.midi.Sequence.getResolution()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the timing resolution for this sequence.
 If the sequence's division type is PPQ, the resolution is specified in ticks per beat.
 For SMTPE timing, the resolution is specified in ticks per frame.

 @return the number of ticks per beat (PPQ) or per frame (SMPTE)
 @see #getDivisionType
 @see #Sequence(float, int)
 @see MidiFileFormat#getResolution()

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.midi.Track javax.sound.midi.Sequence.createTrack()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new, initially empty track as part of this sequence.
 The track initially contains the meta-event End of Track.
 The newly created track is returned.  All tracks in the sequence
 may be retrieved using <code>{@link #getTracks}</code>.  Tracks may be
 removed from the sequence using <code>{@link #deleteTrack}</code>.
 @return the newly created track

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sound.midi.Sequence.deleteTrack(Track track)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified track from the sequence.
 @param track the track to remove
 @return <code>true</code> if the track existed in the track and was removed,
 otherwise <code>false</code>.

 @see #createTrack
 @see #getTracks

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.midi.Track[] javax.sound.midi.Sequence.getTracks()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains an array containing all the tracks in this sequence.
 If the sequence contains no tracks, an array of length 0 is returned.
 @return the array of tracks

 @see #createTrack
 @see #deleteTrack

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.sound.midi.Sequence.getMicrosecondLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the duration of this sequence, expressed in microseconds.
 @return this sequence's duration in microseconds.

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.sound.midi.Sequence.getTickLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the duration of this sequence, expressed in MIDI ticks.

 @return this sequence's length in ticks

 @see #getMicrosecondLength

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.midi.Patch[] javax.sound.midi.Sequence.getPatchList()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains a list of patches referenced in this sequence.
 This patch list may be used to load the required
 <code>{@link Instrument}</code> objects
 into a <code>{@link Synthesizer}</code>.

 @return an array of <code>{@link Patch}</code> objects used in this sequence

 @see Synthesizer#loadInstruments(Soundbank, Patch[])

<!-- END DATA -->
