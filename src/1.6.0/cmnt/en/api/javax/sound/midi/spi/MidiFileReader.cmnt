<!-- BEGIN KEY -->
public abstract class javax.sound.midi.spi.MidiFileReader extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <code>MidiFileReader</code> supplies MIDI file-reading services.  Classes implementing this
 interface can parse the format information from one or more types of
 MIDI file, and can produce a <code>Sequence</code> object from files of these types.

 @author Kara Kytle
 @version 1.14 05/11/17
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.sound.midi.MidiFileFormat javax.sound.midi.spi.MidiFileReader.getMidiFileFormat(InputStream stream) throws javax.sound.midi.InvalidMidiDataException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the MIDI file format of the input stream provided.  The stream must
 point to valid MIDI file data.  In general, MIDI file readers may 
 need to read some data from the stream before determining whether they
 support it.  These parsers must
 be able to mark the stream, read enough data to determine whether they 
 support the stream, and, if not, reset the stream's read pointer to its original 
 position.  If the input stream does not support this, this method may fail
 with an <code>IOException</code>. 
 @param stream the input stream from which file format information should be
 extracted
 @return a <code>MidiFileFormat</code> object describing the MIDI file format
 @throws InvalidMidiDataException if the stream does not point to valid MIDI
 file data recognized by the system
 @throws IOException if an I/O exception occurs
 @see InputStream#markSupported
 @see InputStream#mark

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.sound.midi.MidiFileFormat javax.sound.midi.spi.MidiFileReader.getMidiFileFormat(URL url) throws javax.sound.midi.InvalidMidiDataException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the MIDI file format of the URL provided.  The URL must
 point to valid MIDI file data.
 @param url the URL from which file format information should be
 extracted
 @return a <code>MidiFileFormat</code> object describing the MIDI file format
 @throws InvalidMidiDataException if the URL does not point to valid MIDI
 file data recognized by the system
 @throws IOException if an I/O exception occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.sound.midi.MidiFileFormat javax.sound.midi.spi.MidiFileReader.getMidiFileFormat(File file) throws javax.sound.midi.InvalidMidiDataException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the MIDI file format of the <code>File</code> provided.  
 The <code>File</code> must point to valid MIDI file data.
 @param file the <code>File</code> from which file format information should be
 extracted
 @return a <code>MidiFileFormat</code> object describing the MIDI file format
 @throws InvalidMidiDataException if the <code>File</code> does not point to valid MIDI
 file data recognized by the system
 @throws IOException if an I/O exception occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.sound.midi.Sequence javax.sound.midi.spi.MidiFileReader.getSequence(InputStream stream) throws javax.sound.midi.InvalidMidiDataException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains a MIDI sequence from the input stream provided.  The stream must
 point to valid MIDI file data.  In general, MIDI file readers may 
 need to read some data from the stream before determining whether they
 support it.  These parsers must
 be able to mark the stream, read enough data to determine whether they 
 support the stream, and, if not, reset the stream's read pointer to its original 
 position.  If the input stream does not support this, this method may fail
 with an IOException. 
 @param stream the input stream from which the <code>Sequence</code> should be
 constructed
 @return a <code>Sequence</code> object based on the MIDI file data contained
 in the input stream.
 @throws InvalidMidiDataException if the stream does not point to valid MIDI
 file data recognized by the system
 @throws IOException if an I/O exception occurs
 @see InputStream#markSupported
 @see InputStream#mark

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.sound.midi.Sequence javax.sound.midi.spi.MidiFileReader.getSequence(URL url) throws javax.sound.midi.InvalidMidiDataException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains a MIDI sequence from the URL provided.  The URL must
 point to valid MIDI file data.
 @param url the URL for which the <code>Sequence</code> should be
 constructed
 @return a <code>Sequence</code> object based on the MIDI file data pointed
 to by the URL
 @throws InvalidMidiDataException if the URL does not point to valid MIDI
 file data recognized by the system
 @throws IOException if an I/O exception occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.sound.midi.Sequence javax.sound.midi.spi.MidiFileReader.getSequence(File file) throws javax.sound.midi.InvalidMidiDataException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains a MIDI sequence from the <code>File</code> provided.  The <code>File</code> must
 point to valid MIDI file data.
 @param file the <code>File</code> from which the <code>Sequence</code> should be
 constructed
 @return a <code>Sequence</code> object based on the MIDI file data pointed
 to by the <code>File</code>
 @throws InvalidMidiDataException if the <code>File</code> does not point to valid MIDI
 file data recognized by the system
 @throws IOException if an I/O exception occurs

<!-- END DATA -->
