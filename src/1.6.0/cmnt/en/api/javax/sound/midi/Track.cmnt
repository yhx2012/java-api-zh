<!-- BEGIN KEY -->
public class javax.sound.midi.Track extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 A MIDI track is an independent stream of MIDI events (time-stamped MIDI
 data) that can be stored along with other tracks in a standard MIDI file.
 The MIDI specification allows only 16 channels of MIDI data, but tracks
 are a way to get around this limitation.  A MIDI file can contain any number
 of tracks, each containing its own stream of up to 16 channels of MIDI data.
 <p>
 A <code>Track</code> occupies a middle level in the hierarchy of data played
 by a <code>{@link Sequencer}</code>: sequencers play sequences, which contain tracks,
 which contain MIDI events.  A sequencer may provide controls that mute
 or solo individual tracks.
 <p>
 The timing information and resolution for a track is controlled by and stored
 in the sequence containing the track. A given <code>Track</code>
 is considered to belong to the particular <code>{@link Sequence}</code> that
 maintains its timing. For this reason, a new (empty) track is created by calling the
 <code>{@link Sequence#createTrack}</code> method, rather than by directly invoking a
 <code>Track</code> constructor.
 <p>
 The <code>Track</code> class provides methods to edit the track by adding
 or removing <code>MidiEvent</code> objects from it.  These operations keep
 the event list in the correct time order.  Methods are also
 included to obtain the track's size, in terms of either the number of events
 it contains or its duration in ticks.

 @see Sequencer#setTrackMute
 @see Sequencer#setTrackSolo

 @version 1.24, 06/07/12
 @author Kara Kytle
 @author Florian Bomers

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sound.midi.Track.add(MidiEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a new event to the track.  However, if the event is already
 contained in the track, it is not added again.  The list of events
 is kept in time order, meaning that this event inserted at the
 appropriate place in the list, not necessarily at the end.

 @param event the event to add
 @return <code>true</code> if the event did not already exist in the
 track and was added, otherwise <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sound.midi.Track.remove(MidiEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified event from the track.
 @param event the event to remove
 @return <code>true</code> if the event existed in the track and was removed,
 otherwise <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.midi.MidiEvent javax.sound.midi.Track.get(int index) throws java.lang.ArrayIndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the event at the specified index.
 @param index the location of the desired event in the event vector
 @throws <code>ArrayIndexOutOfBoundsException</code>  if the
 specified index is negative or not less than the current size of
 this track.
 @see #size

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.midi.Track.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the number of events in this track.
 @return the size of the track's event vector

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.sound.midi.Track.ticks()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the length of the track, expressed in MIDI ticks.  (The
 duration of a tick in seconds is determined by the timing resolution
 of the <code>Sequence</code> containing this track, and also by
 the tempo of the music as set by the sequencer.)
 @return the duration, in ticks
 @see Sequence#Sequence(float, int)
 @see Sequencer#setTempoInBPM(float)
 @see Sequencer#getTickPosition()

<!-- END DATA -->
