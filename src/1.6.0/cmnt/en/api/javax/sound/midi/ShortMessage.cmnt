<!-- BEGIN KEY -->
public class javax.sound.midi.ShortMessage extends javax.sound.midi.MidiMessage
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <code>ShortMessage</code> contains a MIDI message that has at most
 two data bytes following its status byte.  The types of MIDI message
 that satisfy this criterion are channel voice, channel mode, system common,
 and system real-time--in other words, everything except system exclusive
 and meta-events.  The <code>ShortMessage</code> class provides methods
 for getting and setting the contents of the MIDI message.
 <p>
 A number of <code>ShortMessage</code> methods have integer parameters by which
 you specify a MIDI status or data byte.  If you know the numeric value, you
 can express it directly.  For system common and system real-time messages,
 you can often use the corresponding fields of <code>ShortMessage</code>, such as
 {@link #SYSTEM_RESET SYSTEM_RESET}.  For channel messages,
 the upper four bits of the status byte are specified by a command value and
 the lower four bits are specified by a MIDI channel number. To
 convert incoming MIDI data bytes that are in the form of Java's signed bytes,
 you can use the <A HREF="MidiMessage.html#integersVsBytes">conversion code</A>
 given in the <code>{@link MidiMessage}</code> class description.

 @see SysexMessage
 @see MetaMessage

 @version 1.26, 05/11/17
 @author David Rivas
 @author Kara Kytle
 @author Florian Bomers

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.MIDI_TIME_CODE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Status byte for MIDI Time Code Quarter Frame message (0xF1, or 241).
 @see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.SONG_POSITION_POINTER
<!-- END KEY -->
<!-- BEGIN DATA -->
 Status byte for Song Position Pointer message (0xF2, or 242).
 @see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.SONG_SELECT
<!-- END KEY -->
<!-- BEGIN DATA -->
 Status byte for MIDI Song Select message (0xF3, or 243).
 @see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.TUNE_REQUEST
<!-- END KEY -->
<!-- BEGIN DATA -->
 Status byte for Tune Request message (0xF6, or 246).
 @see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.END_OF_EXCLUSIVE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Status byte for End of System Exclusive message (0xF7, or 247).
 @see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.TIMING_CLOCK
<!-- END KEY -->
<!-- BEGIN DATA -->
 Status byte for Timing Clock messagem (0xF8, or 248).
 @see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.START
<!-- END KEY -->
<!-- BEGIN DATA -->
 Status byte for Start message (0xFA, or 250).
 @see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.CONTINUE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Status byte for Continue message (0xFB, or 251).
 @see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.STOP
<!-- END KEY -->
<!-- BEGIN DATA -->
 Status byte for Stop message (0xFC, or 252).
 @see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.ACTIVE_SENSING
<!-- END KEY -->
<!-- BEGIN DATA -->
 Status byte for Active Sensing message (0xFE, or 254).
 @see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.SYSTEM_RESET
<!-- END KEY -->
<!-- BEGIN DATA -->
 Status byte for System Reset message (0xFF, or 255).
 @see MidiMessage#getStatus

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.NOTE_OFF
<!-- END KEY -->
<!-- BEGIN DATA -->
 Command value for Note Off message (0x80, or 128)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.NOTE_ON
<!-- END KEY -->
<!-- BEGIN DATA -->
 Command value for Note On message (0x90, or 144)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.POLY_PRESSURE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Command value for Polyphonic Key Pressure (Aftertouch) message (0xA0, or 160)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.CONTROL_CHANGE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Command value for Control Change message (0xB0, or 176)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.PROGRAM_CHANGE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Command value for Program Change message (0xC0, or 192)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.CHANNEL_PRESSURE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Command value for Channel Pressure (Aftertouch) message (0xD0, or 208)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.sound.midi.ShortMessage.PITCH_BEND
<!-- END KEY -->
<!-- BEGIN DATA -->
 Command value for Pitch Bend message (0xE0, or 224)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.midi.ShortMessage()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new <code>ShortMessage</code>.  The
 contents of the new message are guaranteed to specify
 a valid MIDI message.  Subsequently, you may set the
 contents of the message using one of the <code>setMessage</code>
 methods.
 @see #setMessage

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.sound.midi.ShortMessage(byte[] data)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new <code>ShortMessage</code>.
 @param data an array of bytes containing the complete message.
 The message data may be changed using the <code>setMessage</code>
 method.
 @see #setMessage

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sound.midi.ShortMessage.setMessage(int status) throws javax.sound.midi.InvalidMidiDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the parameters for a MIDI message that takes no data bytes.
 @param status	the MIDI status byte
 @throws  <code>InvalidMidiDataException</code> if <code>status</code> does not
 specify a valid MIDI status byte for a message that requires no data bytes.
 @see #setMessage(int, int, int)
 @see #setMessage(int, int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sound.midi.ShortMessage.setMessage(int status, int data1, int data2) throws javax.sound.midi.InvalidMidiDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the  parameters for a MIDI message that takes one or two data
 bytes.  If the message takes only one data byte, the second data
 byte is ignored; if the message does not take any data bytes, both
 data bytes are ignored.

 @param status	the MIDI status byte
 @param data1		the first data byte
 @param data2		the second data byte
 @throws	<code>InvalidMidiDataException</code> if the
 the status byte, or all data bytes belonging to the message, do
 not specify a valid MIDI message.
 @see #setMessage(int, int, int, int)
 @see #setMessage(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sound.midi.ShortMessage.setMessage(int command, int channel, int data1, int data2) throws javax.sound.midi.InvalidMidiDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the short message parameters for a  channel message
 which takes up to two data bytes.  If the message only
 takes one data byte, the second data byte is ignored; if
 the message does not take any data bytes, both data bytes
 are ignored.

 @param command	the MIDI command represented by this message
 @param channel	the channel associated with the message
 @param data1		the first data byte
 @param data2		the second data byte
 @throws		<code>InvalidMidiDataException</code> if the
 status byte or all data bytes belonging to the message, do
 not specify a valid MIDI message

 @see #setMessage(int, int, int)
 @see #setMessage(int)
 @see #getCommand
 @see #getChannel
 @see #getData1
 @see #getData2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.midi.ShortMessage.getChannel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the MIDI channel associated with this event.  This method
 assumes that the event is a MIDI channel message; if not, the return
 value will not be meaningful.
 @return MIDI channel associated with the message.
 @see #setMessage(int, int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.midi.ShortMessage.getCommand()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the MIDI command associated with this event.  This method
 assumes that the event is a MIDI channel message; if not, the return
 value will not be meaningful.
 @see #setMessage(int, int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.midi.ShortMessage.getData1()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the first data byte in the message.
 @return the value of the <code>data1</code> field
 @see #setMessage(int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.midi.ShortMessage.getData2()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the second data byte in the message.
 @return the value of the <code>data2</code> field
 @see #setMessage(int, int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.sound.midi.ShortMessage.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new object of the same class and with the same contents
 as this object.
 @return a clone of this instance.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final int javax.sound.midi.ShortMessage.getDataLength(int status) throws javax.sound.midi.InvalidMidiDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the number of data bytes associated with a particular
 status byte value.
 @param status status byte value, which must represent a short MIDI message
 @return data length in bytes (0, 1, or 2)
 @throws <code>InvalidMidiDataException</code> if the
 <code>status</code> argument does not represent the status byte for any
 short message

<!-- END DATA -->
