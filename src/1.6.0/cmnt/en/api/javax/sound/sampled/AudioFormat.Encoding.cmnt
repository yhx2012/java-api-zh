<!-- BEGIN KEY -->
public static class javax.sound.sampled.AudioFormat.Encoding extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>Encoding</code> class  names the  specific type of data representation
 used for an audio stream.   The encoding includes aspects of the
 sound format other than the number of channels, sample rate, sample size,
 frame rate, frame size, and byte order.
 <p>
 One ubiquitous type of audio encoding is pulse-code modulation (PCM),
 which is simply a linear (proportional) representation of the sound
 waveform.  With PCM, the number stored in each sample is proportional
 to the instantaneous amplitude of the sound pressure at that point in
 time.  The numbers are frequently signed or unsigned integers.
 Besides PCM, other encodings include mu-law and a-law, which are nonlinear
 mappings of the sound amplitude that are often used for recording speech.
 <p>
 You can use a predefined encoding by referring to one of the static
 objects created by this class, such as PCM_SIGNED or
 PCM_UNSIGNED.  Service providers can create new encodings, such as
 compressed audio formats or floating-point PCM samples, and make
 these available through the <code>{@link AudioSystem}</code> class.
 <p>
 The <code>Encoding</code> class is static, so that all
 <code>AudioFormat</code> objects that have the same encoding will refer
 to the same object (rather than different instances of the same class).
 This allows matches to be made by checking that two format's encodings
 are equal.

 @see AudioFormat
 @see javax.sound.sampled.spi.FormatConversionProvider

 @author Kara Kytle
 @version 1.36 05/11/17
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.sound.sampled.AudioFormat.Encoding javax.sound.sampled.AudioFormat.Encoding.PCM_SIGNED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Specifies signed, linear PCM data.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.sound.sampled.AudioFormat.Encoding javax.sound.sampled.AudioFormat.Encoding.PCM_UNSIGNED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Specifies unsigned, linear PCM data.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.sound.sampled.AudioFormat.Encoding javax.sound.sampled.AudioFormat.Encoding.ULAW
<!-- END KEY -->
<!-- BEGIN DATA -->
 Specifies u-law encoded data.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.sound.sampled.AudioFormat.Encoding javax.sound.sampled.AudioFormat.Encoding.ALAW
<!-- END KEY -->
<!-- BEGIN DATA -->
 Specifies a-law encoded data.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.sound.sampled.AudioFormat.Encoding(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new encoding.
 @param name	the name of the new type of encoding

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean javax.sound.sampled.AudioFormat.Encoding.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Finalizes the equals method

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.sound.sampled.AudioFormat.Encoding.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Finalizes the hashCode method

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.sound.sampled.AudioFormat.Encoding.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides the <code>String</code> representation of the encoding.  This <code>String</code> is
 the same name that was passed to the constructor.  For the predefined encodings, the name
 is similar to the encoding's variable (field) name.  For example, <code>PCM_SIGNED.toString()</code> returns
 the name "pcm_signed".

 @return the encoding name

<!-- END DATA -->
