<!-- BEGIN KEY -->
public abstract class javax.sound.sampled.FloatControl extends javax.sound.sampled.Control
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <code>FloatControl</code> object provides control over a range of
 floating-point values.  Float controls are often
 represented in graphical user interfaces by continuously
 adjustable objects such as sliders or rotary knobs.  Concrete subclasses
 of <code>FloatControl</code> implement controls, such as gain and pan, that
 affect a line's audio signal in some way that an application can manipulate.
 The <code>{@link FloatControl.Type}</code>
 inner class provides static instances of types that are used to
 identify some common kinds of float control.
 <p>
 The <code>FloatControl</code> abstract class provides methods to set and get
 the control's current floating-point value.  Other methods obtain the possible
 range of values and the control's resolution (the smallest increment between
 returned values).  Some float controls allow ramping to a
 new value over a specified period of time.  <code>FloatControl</code> also
 includes methods that return string labels for the minimum, maximum, and midpoint
 positions of the control.

 @see Line#getControls
 @see Line#isControlSupported

 @author David Rivas
 @author Kara Kytle
 @version 1.17, 05/11/17
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.sound.sampled.FloatControl(FloatControl.Type type, float minimum, float maximum, float precision, int updatePeriod, float initialValue, String units, String minLabel, String midLabel, String maxLabel)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new float control object with the given parameters

 @param type the kind of control represented by this float control object
 @param minimum the smallest value permitted for the control
 @param maximum the largest value permitted for the control
 @param precision the resolution or granularity of the control.
 This is the size of the increment between discrete valid values.
 @param updatePeriod the smallest time interval, in microseconds, over which the control
 can change from one discrete value to the next during a {@link #shift(float,float,int) shift}
 @param initialValue the value that the control starts with when constructed
 @param units the label for the units in which the control's values are expressed,
 such as "dB" or "frames per second"
 @param minLabel the label for the minimum value, such as "Left" or "Off"
 @param midLabel the label for the midpoint value, such as "Center" or "Default"
 @param maxLabel the label for the maximum value, such as "Right" or "Full"

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.sound.sampled.FloatControl(FloatControl.Type type, float minimum, float maximum, float precision, int updatePeriod, float initialValue, String units)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new float control object with the given parameters.
 The labels for the minimum, maximum, and mid-point values are set
 to zero-length strings.

 @param type the kind of control represented by this float control object
 @param minimum the smallest value permitted for the control
 @param maximum the largest value permitted for the control
 @param precision the resolution or granularity of the control.
 This is the size of the increment between discrete valid values.
 @param updatePeriod the smallest time interval, in microseconds, over which the control
 can change from one discrete value to the next during a {@link #shift(float,float,int) shift}
 @param initialValue the value that the control starts with when constructed
 @param units the label for the units in which the control's values are expressed,
 such as "dB" or "frames per second"

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sound.sampled.FloatControl.setValue(float newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the current value for the control.  The default implementation
 simply sets the value as indicated.  If the value indicated is greater
 than the maximum value, or smaller than the minimum value, an
 IllegalArgumentException is thrown.
 Some controls require that their line be open before they can be affected
 by setting a value.
 @param newValue desired new value
 @throws IllegalArgumentException if the value indicated does not fall
 within the allowable range

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.sound.sampled.FloatControl.getValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains this control's current value.
 @return the current value

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.sound.sampled.FloatControl.getMaximum()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the maximum value permitted.
 @return the maximum allowable value

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.sound.sampled.FloatControl.getMinimum()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the minimum value permitted.
 @return the minimum allowable value

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sound.sampled.FloatControl.getUnits()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the label for the units in which the control's values are expressed,
 such as "dB" or "frames per second."
 @return the units label, or a zero-length string if no label

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sound.sampled.FloatControl.getMinLabel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the label for the minimum value, such as "Left" or "Off."
 @return the minimum value label, or a zero-length string if no label	 * has been set

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sound.sampled.FloatControl.getMidLabel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the label for the mid-point value, such as "Center" or "Default."
 @return the mid-point value label, or a zero-length string if no label	 * has been set

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sound.sampled.FloatControl.getMaxLabel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the label for the maximum value, such as "Right" or "Full."
 @return the maximum value label, or a zero-length string if no label	 * has been set

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.sound.sampled.FloatControl.getPrecision()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the resolution or granularity of the control, in the units
 that the control measures.
 The precision is the size of the increment between discrete valid values
 for this control, over the set of supported floating-point values.
 @return the control's precision

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.sound.sampled.FloatControl.getUpdatePeriod()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the smallest time interval, in microseconds, over which the control's value can
 change during a shift.  The update period is the inverse of the frequency with which
 the control updates its value during a shift.  If the implementation does not support value shifting over
 time, it should set the control's value to the final value immediately
 and return -1 from this method.

 @return update period in microseconds, or -1 if shifting over time is unsupported
 @see #shift

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.sound.sampled.FloatControl.shift(float from, float to, int microseconds)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Changes the control value from the initial value to the final
 value linearly over the specified time period, specified in microseconds.
 This method returns without blocking; it does not wait for the shift
 to complete.  An implementation should complete the operation within the time
 specified.  The default implementation simply changes the value
 to the final value immediately.

 @param from initial value at the beginning of the shift
 @param to final value after the shift
 @param microseconds maximum duration of the shift in microseconds

 @see #getUpdatePeriod

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.sound.sampled.FloatControl.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a string representation of the control
 @return a string description

<!-- END DATA -->
