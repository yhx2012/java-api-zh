<!-- BEGIN KEY -->
public abstract class javax.sound.sampled.spi.FormatConversionProvider extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 A format conversion provider provides format conversion services
 from one or more input formats to one or more output formats.
 Converters include codecs, which encode and/or decode audio data,
 as well as transcoders, etc.  Format converters provide methods for
 determining what conversions are supported and for obtaining an audio
 stream from which converted data can be read.
 <p>
 The source format represents the format of the incoming
 audio data, which will be converted.
 <p>
 The target format represents the format of the processed, converted
 audio data.  This is the format of the data that can be read from
 the stream returned by one of the <code>getAudioInputStream</code> methods.

 @author Kara Kytle
 @version 1.30, 05/11/17
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.sound.sampled.AudioFormat.Encoding[] javax.sound.sampled.spi.FormatConversionProvider.getSourceEncodings()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the set of source format encodings from which format
 conversion services are provided by this provider.
 @return array of source format encodings.  The array will always
 have a length of at least 1.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.sound.sampled.AudioFormat.Encoding[] javax.sound.sampled.spi.FormatConversionProvider.getTargetEncodings()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the set of target format encodings to which format
 conversion services are provided by this provider.
 @return array of target format encodings.  The array will always
 have a length of at least 1.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sound.sampled.spi.FormatConversionProvider.isSourceEncodingSupported(AudioFormat.Encoding sourceEncoding)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates whether the format converter supports conversion from the
 specified source format encoding.
 @param sourceEncoding the source format encoding for which support is queried
 @return <code>true</code> if the encoding is supported, otherwise <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sound.sampled.spi.FormatConversionProvider.isTargetEncodingSupported(AudioFormat.Encoding targetEncoding)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates whether the format converter supports conversion to the
 specified target format encoding.
 @param targetEncoding the target format encoding for which support is queried
 @return <code>true</code> if the encoding is supported, otherwise <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.sound.sampled.AudioFormat.Encoding[] javax.sound.sampled.spi.FormatConversionProvider.getTargetEncodings(AudioFormat sourceFormat)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the set of target format encodings supported by the format converter
 given a particular source format.
 If no target format encodings are supported for this source format,
 an array of length 0 is returned.
 @return array of supported target format encodings.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sound.sampled.spi.FormatConversionProvider.isConversionSupported(AudioFormat.Encoding targetEncoding, AudioFormat sourceFormat)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates whether the format converter supports conversion to a particular encoding
 from a particular format.
 @param targetEncoding desired encoding of the outgoing data
 @param sourceFormat format of the incoming data
 @return <code>true</code> if the conversion is supported, otherwise <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.sound.sampled.AudioFormat[] javax.sound.sampled.spi.FormatConversionProvider.getTargetFormats(AudioFormat.Encoding targetEncoding, AudioFormat sourceFormat)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains the set of target formats with the encoding specified
 supported by the format converter
 If no target formats with the specified encoding are supported
 for this source format, an array of length 0 is returned.
 @return array of supported target formats.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.sound.sampled.spi.FormatConversionProvider.isConversionSupported(AudioFormat targetFormat, AudioFormat sourceFormat)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates whether the format converter supports conversion to one
 particular format from another.
 @param targetFormat desired format of outgoing data
 @param sourceFormat format of the incoming data
 @return <code>true</code> if the conversion is supported, otherwise <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.sound.sampled.AudioInputStream javax.sound.sampled.spi.FormatConversionProvider.getAudioInputStream(AudioFormat.Encoding targetEncoding, AudioInputStream sourceStream)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains an audio input stream with the specified encoding from the given audio
 input stream.
 @param targetEncoding desired encoding of the stream after processing
 @param sourceStream stream from which data to be processed should be read
 @return stream from which processed data with the specified target encoding may be read
 @throws IllegalArgumentException if the format combination supplied is
 not supported.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.sound.sampled.AudioInputStream javax.sound.sampled.spi.FormatConversionProvider.getAudioInputStream(AudioFormat targetFormat, AudioInputStream sourceStream)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains an audio input stream with the specified format from the given audio
 input stream.
 @param targetFormat desired data format of the stream after processing
 @param sourceStream stream from which data to be processed should be read
 @return stream from which processed data with the specified format may be read
 @throws IllegalArgumentException if the format combination supplied is
 not supported.

<!-- END DATA -->
