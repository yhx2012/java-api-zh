<!-- BEGIN KEY -->
public class javax.activation.ActivationDataFlavor extends java.awt.datatransfer.DataFlavor
<!-- END KEY -->
<!-- BEGIN DATA -->
 The ActivationDataFlavor class is a special subclass of
 <code>java.awt.datatransfer.DataFlavor</code>. It allows the JAF to
 set all three values stored by the DataFlavor class via a new
 constructor. It also contains improved MIME parsing in the <code>equals
 </code> method. Except for the improved parsing, its semantics are
 identical to that of the JDK's DataFlavor class.
 
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.activation.ActivationDataFlavor(java.lang.Class representationClass, String mimeType, String humanPresentableName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a DataFlavor that represents an arbitrary
 Java object. This constructor is an extension of the
 JDK's DataFlavor in that it allows the explicit setting
 of all three DataFlavor attributes.
 <p>
 The returned DataFlavor will have the following characteristics:
 <p>
 representationClass = representationClass<br>
 mimeType            = mimeType<br>
 humanName           = humanName
 <p>

 @param representationClass the class used in this DataFlavor
 @param mimeType the MIME type of the data represented by this class
 @param humanPresentableName the human presentable name of the flavor

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.activation.ActivationDataFlavor(java.lang.Class representationClass, String humanPresentableName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a DataFlavor that represents a MimeType.
 <p>
 The returned DataFlavor will have the following characteristics:
 <p>
 If the mimeType is "application/x-java-serialized-object;
 class=", the result is the same as calling new
 DataFlavor(Class.forName()) as above.
 <p>
 otherwise:
 <p>
 representationClass = InputStream<p>
 mimeType = mimeType<p>

 @param representationClass the class used in this DataFlavor
 @param humanPresentableName the human presentable name of the flavor

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.activation.ActivationDataFlavor(String mimeType, String humanPresentableName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a DataFlavor that represents a MimeType.
 <p>
 The returned DataFlavor will have the following characteristics:
 <p>
 If the mimeType is "application/x-java-serialized-object; class=",
 the result is the same as calling new DataFlavor(Class.forName()) as
 above, otherwise:
 <p>
 representationClass = InputStream<p>
 mimeType = mimeType

 @param mimeType the MIME type of the data represented by this class
 @param humanPresentableName the human presentable name of the flavor

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.activation.ActivationDataFlavor.getMimeType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the MIME type for this DataFlavor.

 @return	the MIME type

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class javax.activation.ActivationDataFlavor.getRepresentationClass()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the representation class.

 @return	the representation class

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.activation.ActivationDataFlavor.getHumanPresentableName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the Human Presentable name.

 @return	the human presentable name

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.activation.ActivationDataFlavor.setHumanPresentableName(String humanPresentableName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the human presentable name.

 @param humanPresentableName	the name to set

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.activation.ActivationDataFlavor.equals(DataFlavor dataFlavor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares the DataFlavor passed in with this DataFlavor; calls
 the <code>isMimeTypeEqual</code> method.

 @param dataFlavor	the DataFlavor to compare with
 @return			true if the MIME type and representation class
				are the same

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.activation.ActivationDataFlavor.isMimeTypeEqual(String mimeType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Is the string representation of the MIME type passed in equivalent
 to the MIME type of this DataFlavor. <p>

 ActivationDataFlavor delegates the comparison of MIME types to
 the MimeType class included as part of the JavaBeans Activation
 Framework. This provides a more robust comparison than is normally
 available in the DataFlavor class.

 @param mimeType	the MIME type
 @return		true if the same MIME type

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.activation.ActivationDataFlavor.normalizeMimeTypeParameter(String parameterName, String parameterValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called on DataFlavor for every MIME Type parameter to allow DataFlavor
 subclasses to handle special parameters like the text/plain charset
 parameters, whose values are case insensitive.  (MIME type parameter
 values are supposed to be case sensitive).
 <p>
 This method is called for each parameter name/value pair and should
 return the normalized representation of the parameterValue.
 This method is never invoked by this implementation.

 @param parameterName	the parameter name
 @param parameterValue	the parameter value
 @return			the normalized parameter value
 @deprecated

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.activation.ActivationDataFlavor.normalizeMimeType(String mimeType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called for each MIME type string to give DataFlavor subtypes the
 opportunity to change how the normalization of MIME types is
 accomplished.
 One possible use would be to add default parameter/value pairs in cases
 where none are present in the MIME type string passed in.
 This method is never invoked by this implementation.

 @param mimeType	the MIME type
 @return		the normalized MIME type
 @deprecated

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.datatransfer.DataFlavor.readExternal(ObjectInput is) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Restores this <code>DataFlavor</code> from a Serialized state.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.datatransfer.DataFlavor.writeExternal(ObjectOutput os) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Serializes this <code>DataFlavor</code>.

<!-- END DATA -->
