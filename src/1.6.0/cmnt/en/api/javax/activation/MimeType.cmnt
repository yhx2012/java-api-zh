<!-- BEGIN KEY -->
public class javax.activation.MimeType extends java.lang.Object implements java.io.Externalizable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A Multipurpose Internet Mail Extension (MIME) type, as defined
 in RFC 2045 and 2046.

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.activation.MimeType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Default constructor.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.activation.MimeType(String rawdata) throws javax.activation.MimeTypeParseException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructor that builds a MimeType from a String.

 @param rawdata	the MIME type string

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.activation.MimeType(String primary, String sub) throws javax.activation.MimeTypeParseException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructor that builds a MimeType with the given primary and sub type
 but has an empty parameter list.

 @param primary	the primary MIME type
 @param sub	the MIME sub-type
 @exception	MimeTypeParseException	if the primary type or subtype
						is not a valid token

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.activation.MimeType.getPrimaryType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieve the primary type of this object.

 @return	the primary MIME type

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.activation.MimeType.setPrimaryType(String primary) throws javax.activation.MimeTypeParseException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the primary type for this object to the given String.

 @param primary	the primary MIME type
 @exception	MimeTypeParseException	if the primary type
						is not a valid token

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.activation.MimeType.getSubType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieve the subtype of this object.

 @return	the MIME subtype

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.activation.MimeType.setSubType(String sub) throws javax.activation.MimeTypeParseException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the subtype for this object to the given String.

 @param sub	the MIME subtype
 @exception	MimeTypeParseException	if the subtype
						is not a valid token

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.activation.MimeTypeParameterList javax.activation.MimeType.getParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieve this object's parameter list.

 @return	a MimeTypeParameterList object representing the parameters

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.activation.MimeType.getParameter(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieve the value associated with the given name, or null if there
 is no current association.

 @param name	the parameter name
 @return		the paramter's value

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.activation.MimeType.setParameter(String name, String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the value to be associated with the given name, replacing
 any previous association.

 @param name	the parameter name
 @param value	the paramter's value

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.activation.MimeType.removeParameter(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Remove any value associated with the given name.

 @param name	the parameter name

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.activation.MimeType.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the String representation of this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.activation.MimeType.getBaseType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return a String representation of this object
 without the parameter list.

 @return	the MIME type and sub-type

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.activation.MimeType.match(MimeType type)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determine if the primary and sub type of this object is
 the same as what is in the given type.

 @param type	the MimeType object to compare with
 @return		true if they match

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.activation.MimeType.match(String rawdata) throws javax.activation.MimeTypeParseException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determine if the primary and sub type of this object is
 the same as the content type described in rawdata.

 @param rawdata	the MIME type string to compare with
 @return		true if they match

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.activation.MimeType.writeExternal(ObjectOutput out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 The object implements the writeExternal method to save its contents
 by calling the methods of DataOutput for its primitive values or
 calling the writeObject method of ObjectOutput for objects, strings
 and arrays.

 @param out	the ObjectOutput object to write to
 @exception IOException Includes any I/O exceptions that may occur

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.activation.MimeType.readExternal(ObjectInput in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 The object implements the readExternal method to restore its
 contents by calling the methods of DataInput for primitive
 types and readObject for objects, strings and arrays.  The
 readExternal method must read the values in the same sequence
 and with the same types as were written by writeExternal.

 @param in	the ObjectInput object to read from
 @exception ClassNotFoundException If the class for an object being
              restored cannot be found.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.activation.MimeType.readExternal(ObjectInput in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 The object implements the readExternal method to restore its
 contents by calling the methods of DataInput for primitive
 types and readObject for objects, strings and arrays.  The
 readExternal method must read the values in the same sequence
 and with the same types as were written by writeExternal.

 @param in	the ObjectInput object to read from
 @exception ClassNotFoundException If the class for an object being
              restored cannot be found.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.activation.MimeType.writeExternal(ObjectOutput out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 The object implements the writeExternal method to save its contents
 by calling the methods of DataOutput for its primitive values or
 calling the writeObject method of ObjectOutput for objects, strings
 and arrays.

 @param out	the ObjectOutput object to write to
 @exception IOException Includes any I/O exceptions that may occur

<!-- END DATA -->
