<!-- BEGIN KEY -->
public abstract class javax.activation.CommandMap extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 The CommandMap class provides an interface to a registry of
 command objects available in the system.
 Developers are expected to either use the CommandMap
 implementation included with this package (MailcapCommandMap) or
 develop their own. Note that some of the methods in this class are
 abstract.

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.activation.CommandMap javax.activation.CommandMap.getDefaultCommandMap()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the default CommandMap.
 <p>

 <ul>
 <li> In cases where a CommandMap instance has been previously set
      to some value (via <i>setDefaultCommandMap</i>)
  return the CommandMap.
 <li>
  In cases where no CommandMap has been set, the CommandMap
       creates an instance of <code>MailcapCommandMap</code> and
       set that to the default, returning its value.

 </ul>

 @return the CommandMap

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.activation.CommandMap.setDefaultCommandMap(CommandMap commandMap)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the default CommandMap. Reset the CommandMap to the default by
 calling this method with <code>null</code>.

 @param commandMap The new default CommandMap.
 @exception SecurityException if the caller doesn't have permission
					to change the default

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.activation.CommandInfo[] javax.activation.CommandMap.getPreferredCommands(String mimeType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the preferred command list from a MIME Type. The actual semantics
 are determined by the implementation of the CommandMap.

 @param mimeType	the MIME type
 @return the CommandInfo classes that represent the command Beans.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.activation.CommandInfo[] javax.activation.CommandMap.getPreferredCommands(String mimeType, DataSource ds)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the preferred command list from a MIME Type. The actual semantics
 are determined by the implementation of the CommandMap. <p>

 The <code>DataSource</code> provides extra information, such as
 the file name, that a CommandMap implementation may use to further
 refine the list of commands that are returned.  The implementation
 in this class simply calls the <code>getPreferredCommands</code>
 method that ignores this argument.

 @param mimeType	the MIME type
 @param ds	a DataSource for the data
 @return the CommandInfo classes that represent the command Beans.
 @since	JAF 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.activation.CommandInfo[] javax.activation.CommandMap.getAllCommands(String mimeType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get all the available commands for this type. This method
 should return all the possible commands for this MIME type.

 @param mimeType	the MIME type
 @return the CommandInfo objects representing all the commands.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.activation.CommandInfo[] javax.activation.CommandMap.getAllCommands(String mimeType, DataSource ds)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get all the available commands for this type. This method
 should return all the possible commands for this MIME type. <p>

 The <code>DataSource</code> provides extra information, such as
 the file name, that a CommandMap implementation may use to further
 refine the list of commands that are returned.  The implementation
 in this class simply calls the <code>getAllCommands</code>
 method that ignores this argument.

 @param mimeType	the MIME type
 @param ds	a DataSource for the data
 @return the CommandInfo objects representing all the commands.
 @since	JAF 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.activation.CommandInfo javax.activation.CommandMap.getCommand(String mimeType, String cmdName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the default command corresponding to the MIME type.

 @param mimeType	the MIME type
 @param cmdName	the command name
 @return the CommandInfo corresponding to the command.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.activation.CommandInfo javax.activation.CommandMap.getCommand(String mimeType, String cmdName, DataSource ds)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the default command corresponding to the MIME type. <p>

 The <code>DataSource</code> provides extra information, such as
 the file name, that a CommandMap implementation may use to further
 refine the command that is chosen.  The implementation
 in this class simply calls the <code>getCommand</code>
 method that ignores this argument.

 @param mimeType	the MIME type
 @param cmdName	the command name
 @param ds	a DataSource for the data
 @return the CommandInfo corresponding to the command.
 @since	JAF 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.activation.DataContentHandler javax.activation.CommandMap.createDataContentHandler(String mimeType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Locate a DataContentHandler that corresponds to the MIME type.
 The mechanism and semantics for determining this are determined
 by the implementation of the particular CommandMap.

 @param mimeType	the MIME type
 @return		the DataContentHandler for the MIME type

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.activation.DataContentHandler javax.activation.CommandMap.createDataContentHandler(String mimeType, DataSource ds)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Locate a DataContentHandler that corresponds to the MIME type.
 The mechanism and semantics for determining this are determined
 by the implementation of the particular CommandMap. <p>

 The <code>DataSource</code> provides extra information, such as
 the file name, that a CommandMap implementation may use to further
 refine the choice of DataContentHandler.  The implementation
 in this class simply calls the <code>createDataContentHandler</code>
 method that ignores this argument.

 @param mimeType	the MIME type
 @param ds	a DataSource for the data
 @return		the DataContentHandler for the MIME type
 @since	JAF 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] javax.activation.CommandMap.getMimeTypes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get all the MIME types known to this command map.
 If the command map doesn't support this operation,
 null is returned.

 @return		array of MIME types as strings, or null if not supported
 @since	JAF 1.1

<!-- END DATA -->
