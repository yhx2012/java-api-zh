<!-- BEGIN KEY -->
public abstract class javax.security.cert.Certificate extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

 <p>Abstract class for managing a variety of identity certificates.
 An identity certificate is a guarantee by a principal that
 a public key is that of another principal.  (A principal represents
 an entity such as an individual user, a group, or a corporation.)
<p>
 This class is an abstraction for certificates that have different
 formats but important common uses.  For example, different types of
 certificates, such as X.509 and PGP, share general certificate
 functionality (like encoding and verifying) and 
 some types of information (like a public key).
 <p>
 X.509, PGP, and SDSI certificates can all be implemented by
 subclassing the Certificate class, even though they contain different
 sets of information, and they store and retrieve the information in
 different ways. 

 <p><em>Note: The classes in the package <code>javax.security.cert</code>
 exist for compatibility with earlier versions of the
 Java Secure Sockets Extension (JSSE). New applications should instead
 use the standard Java SE certificate classes located in
 <code>java.security.cert</code>.</em></p>

 @since 1.4
 @see X509Certificate

 @author Hemma Prafullchandra
 @version 1.18

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.security.cert.Certificate.equals(Object other)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Compares this certificate for equality with the specified 
 object. If the <code>other</code> object is an 
 <code>instanceof</code> <code>Certificate</code>, then
 its encoded form is retrieved and compared with the
 encoded form of this certificate.
 
 @param other the object to test for equality with this certificate.
 @return true if the encoded forms of the two certificates
         match, false otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.security.cert.Certificate.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a hashcode value for this certificate from its
 encoded form.

 @return the hashcode value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract byte[] javax.security.cert.Certificate.getEncoded() throws javax.security.cert.CertificateEncodingException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the encoded form of this certificate. It is
 assumed that each certificate type would have only a single
 form of encoding; for example, X.509 certificates would
 be encoded as ASN.1 DER.

 @return encoded form of this certificate
 @exception CertificateEncodingException on internal certificate
            encoding failure

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.security.cert.Certificate.verify(PublicKey key) throws javax.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Verifies that this certificate was signed using the 
 private key that corresponds to the specified public key.

 @param key the PublicKey used to carry out the verification.

 @exception NoSuchAlgorithmException on unsupported signature
 algorithms.
 @exception InvalidKeyException on incorrect key.
 @exception NoSuchProviderException if there's no default provider.
 @exception SignatureException on signature errors.
 @exception CertificateException on encoding errors.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.security.cert.Certificate.verify(PublicKey key, String sigProvider) throws javax.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Verifies that this certificate was signed using the 
 private key that corresponds to the specified public key.
 This method uses the signature verification engine
 supplied by the specified provider.

 @param key the PublicKey used to carry out the verification.
 @param sigProvider the name of the signature provider.
 @exception NoSuchAlgorithmException on unsupported signature algorithms.
 @exception InvalidKeyException on incorrect key.
 @exception NoSuchProviderException on incorrect provider.
 @exception SignatureException on signature errors.
 @exception CertificateException on encoding errors.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String javax.security.cert.Certificate.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a string representation of this certificate.

 @return a string representation of this certificate.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.PublicKey javax.security.cert.Certificate.getPublicKey()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Gets the public key from this certificate.
 
 @return the public key.

<!-- END DATA -->
