<!-- BEGIN KEY -->
public final class javax.security.auth.kerberos.KerberosPrincipal extends java.lang.Object implements java.security.Principal, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class encapsulates a Kerberos principal.

 @author Mayank Upadhyay
 @version 1.22, 07/27/06
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.kerberos.KerberosPrincipal.KRB_NT_UNKNOWN
<!-- END KEY -->
<!-- BEGIN DATA -->
 unknown name type.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.kerberos.KerberosPrincipal.KRB_NT_PRINCIPAL
<!-- END KEY -->
<!-- BEGIN DATA -->
 user principal name type.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.kerberos.KerberosPrincipal.KRB_NT_SRV_INST
<!-- END KEY -->
<!-- BEGIN DATA -->
 service and other unique instance (krbtgt) name type.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.kerberos.KerberosPrincipal.KRB_NT_SRV_HST
<!-- END KEY -->
<!-- BEGIN DATA -->
 service with host name as instance (telnet, rcommands) name type.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.kerberos.KerberosPrincipal.KRB_NT_SRV_XHST
<!-- END KEY -->
<!-- BEGIN DATA -->
 service with host as remaining components name type.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.kerberos.KerberosPrincipal.KRB_NT_UID
<!-- END KEY -->
<!-- BEGIN DATA -->
 unique ID name type.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.kerberos.KerberosPrincipal(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Constructs a KerberosPrincipal from the provided string input. The 
 name type for this  principal defaults to 
 {@link #KRB_NT_PRINCIPAL KRB_NT_PRINCIPAL}
 This string is assumed to contain a name in the format
 that is specified in Section 2.1.1. (Kerberos Principal Name Form) of 
 <a href=http://www.ietf.org/rfc/rfc1964.txt> RFC 1964 </a>
 (for example, <i>duke@FOO.COM</i>, where <i>duke</i>
 represents a principal, and <i>FOO.COM</i> represents a realm).
 
 <p>If the input name does not contain a realm, the default realm
 is used. The default realm can be specified either in a Kerberos 
 configuration file or via the java.security.krb5.realm
 system property. For more information, 
 <a href="../../../../../technotes/guides/security/jgss/tutorials/index.html">
 Kerberos Requirements </a>
 
 @param name the principal name
 @throws IllegalArgumentException if name is improperly
 formatted, if name is null, or if name does not contain 
 the realm to use and the default realm is not specified
 in either a Kerberos configuration file or via the 
 java.security.krb5.realm system property.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.kerberos.KerberosPrincipal(String name, int nameType)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Constructs a KerberosPrincipal from the provided string and
 name type input.  The string is assumed to contain a name in the
 format that is specified in Section 2.1 (Mandatory Name Forms) of
 <a href=http://www.ietf.org/rfc/rfc1964.txt>RFC 1964</a>.
 Valid name types are specified in Section 7.2 (Principal Names) of
 <a href=http://www.ietf.org/rfc/rfc1510.txt>RFC 1510</a>.
 The input name must be consistent with the provided name type.
 (for example, <i>duke@FOO.COM</i>, is a valid input string for the
 name type, KRB_NT_PRINCIPAL where <i>duke</i>
 represents a principal, and <i>FOO.COM</i> represents a realm).

 <p> If the input name does not contain a realm, the default realm
 is used. The default realm can be specified either in a Kerberos
 configuration file or via the java.security.krb5.realm
 system property. For more information, see
 <a href="../../../../../technotes/guides/security/jgss/tutorials/index.html">
 Kerberos Requirements</a>.
 
 @param name the principal name
 @param nameType the name type of the principal 
 @throws IllegalArgumentException if name is improperly
 formatted, if name is null, if the nameType is not supported,  
 or if name does not contain the realm to use and the default 
 realm is not specified in either a Kerberos configuration 
 file or via the java.security.krb5.realm system property.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.security.auth.kerberos.KerberosPrincipal.getRealm()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the realm component of this Kerberos principal.

 @return the realm component of this Kerberos principal.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.security.auth.kerberos.KerberosPrincipal.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hashcode for this principal. The hash code is defined to 
 be the result of the following  calculation:
 <pre><code>
  hashCode = getName().hashCode();
 </code></pre>
 
 @return a hashCode() for the <code>KerberosPrincipal</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.security.auth.kerberos.KerberosPrincipal.equals(Object other)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares the specified Object with this Principal for equality.
 Returns true if the given object is also a 
 <code>KerberosPrincipal</code> and the two
 <code>KerberosPrincipal</code> instances are equivalent. 
 More formally two <code>KerberosPrincipal</code> instances are equal 
 if the values returned by <code>getName()</code> are equal and the 
 values returned by <code>getNameType()</code> are equal.

 @param other the Object to compare to
 @return true if the Object passed in represents the same principal
 as this one, false otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.security.auth.kerberos.KerberosPrincipal.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 The returned string corresponds to the single-string
 representation of a Kerberos Principal name as specified in
 Section 2.1 of <a href=http://www.ietf.org/rfc/rfc1964.txt>RFC 1964</a>.

 @return the principal name.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.security.auth.kerberos.KerberosPrincipal.getNameType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name type of the KerberosPrincipal. Valid name types
 are specified in Section 7.2 of
 <a href=http://www.ietf.org/rfc/rfc1510.txt> RFC1510</a>. 

 @return the name type.


<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.security.auth.kerberos.KerberosPrincipal.readObject(ObjectInputStream ois) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads this object from a stream (i.e., deserializes it)

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.security.auth.kerberos.KerberosPrincipal.writeObject(ObjectOutputStream oos) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Save the KerberosPrincipal object to a stream

 @serialData this <code>KerberosPrincipal</code> is serialized
		by writing out the PrincipalName and the
		realm in their DER-encoded form as specified in Section 5.2 of
		<a href=http://www.ietf.org/rfc/rfc1510.txt> RFC1510</a>. 

<!-- END DATA -->
