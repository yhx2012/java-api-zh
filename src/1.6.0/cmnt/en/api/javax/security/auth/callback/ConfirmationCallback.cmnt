<!-- BEGIN KEY -->
public class javax.security.auth.callback.ConfirmationCallback extends java.lang.Object implements javax.security.auth.callback.Callback, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p> Underlying security services instantiate and pass a
 <code>ConfirmationCallback</code> to the <code>handle</code>
 method of a <code>CallbackHandler</code> to ask for YES/NO,
 OK/CANCEL, YES/NO/CANCEL or other similar confirmations.

 @version 1.17, 11/17/05
 @see javax.security.auth.callback.CallbackHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.UNSPECIFIED_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
 Unspecified option type.

 <p> The <code>getOptionType</code> method returns this
 value if this <code>ConfirmationCallback</code> was instantiated
 with <code>options</code> instead of an <code>optionType</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.YES_NO_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
 YES/NO confirmation option.

 <p> An underlying security service specifies this as the
 <code>optionType</code> to a <code>ConfirmationCallback</code>
 constructor if it requires a confirmation which can be answered
 with either <code>YES</code> or <code>NO</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.YES_NO_CANCEL_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
 YES/NO/CANCEL confirmation confirmation option.

 <p> An underlying security service specifies this as the
 <code>optionType</code> to a <code>ConfirmationCallback</code>
 constructor if it requires a confirmation which can be answered
 with either <code>YES</code>, <code>NO</code> or <code>CANCEL</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.OK_CANCEL_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
 OK/CANCEL confirmation confirmation option.

 <p> An underlying security service specifies this as the
 <code>optionType</code> to a <code>ConfirmationCallback</code>
 constructor if it requires a confirmation which can be answered
 with either <code>OK</code> or <code>CANCEL</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.YES
<!-- END KEY -->
<!-- BEGIN DATA -->
 YES option.

 <p> If an <code>optionType</code> was specified to this
 <code>ConfirmationCallback</code>, this option may be specified as a
 <code>defaultOption</code> or returned as the selected index.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.NO
<!-- END KEY -->
<!-- BEGIN DATA -->
 NO option.

 <p> If an <code>optionType</code> was specified to this
 <code>ConfirmationCallback</code>, this option may be specified as a
 <code>defaultOption</code> or returned as the selected index.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.CANCEL
<!-- END KEY -->
<!-- BEGIN DATA -->
 CANCEL option.

 <p> If an <code>optionType</code> was specified to this
 <code>ConfirmationCallback</code>, this option may be specified as a
 <code>defaultOption</code> or returned as the selected index.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.OK
<!-- END KEY -->
<!-- BEGIN DATA -->
 OK option.

 <p> If an <code>optionType</code> was specified to this
 <code>ConfirmationCallback</code>, this option may be specified as a
 <code>defaultOption</code> or returned as the selected index.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.INFORMATION
<!-- END KEY -->
<!-- BEGIN DATA -->
INFORMATION message type.  
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.WARNING
<!-- END KEY -->
<!-- BEGIN DATA -->
WARNING message type. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.security.auth.callback.ConfirmationCallback.ERROR
<!-- END KEY -->
<!-- BEGIN DATA -->
ERROR message type. 
<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.security.auth.callback.ConfirmationCallback.prompt
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private int javax.security.auth.callback.ConfirmationCallback.messageType
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private int javax.security.auth.callback.ConfirmationCallback.optionType
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private int javax.security.auth.callback.ConfirmationCallback.defaultOption
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String[] javax.security.auth.callback.ConfirmationCallback.options
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private int javax.security.auth.callback.ConfirmationCallback.selection
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.callback.ConfirmationCallback(int messageType, int optionType, int defaultOption)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a <code>ConfirmationCallback</code> with a
 message type, an option type and a default option.

 <p> Underlying security services use this constructor if
 they require either a YES/NO, YES/NO/CANCEL or OK/CANCEL
 confirmation.

 <p>

 @param messageType the message type (<code>INFORMATION</code>,
			<code>WARNING</code> or <code>ERROR</code>). <p>

 @param optionType the option type (<code>YES_NO_OPTION</code>,
			<code>YES_NO_CANCEL_OPTION</code> or
			<code>OK_CANCEL_OPTION</code>). <p>

 @param defaultOption the default option
			from the provided optionType (<code>YES</code>,
			<code>NO</code>, <code>CANCEL</code> or
			<code>OK</code>).

 @exception IllegalArgumentException if messageType is not either
			<code>INFORMATION</code>, <code>WARNING</code>,
			or <code>ERROR</code>, if optionType is not either
			<code>YES_NO_OPTION</code>,
			<code>YES_NO_CANCEL_OPTION</code>, or
			<code>OK_CANCEL_OPTION</code>,
			or if <code>defaultOption</code>
			does not correspond to one of the options in
			<code>optionType</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.callback.ConfirmationCallback(int messageType, java.lang.String[] options, int defaultOption)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a <code>ConfirmationCallback</code> with a
 message type, a list of options and a default option.

 <p> Underlying security services use this constructor if
 they require a confirmation different from the available preset
 confirmations provided (for example, CONTINUE/ABORT or STOP/GO).
 The confirmation options are listed in the <code>options</code> array,
 and are displayed by the <code>CallbackHandler</code> implementation
 in a manner consistent with the way preset options are displayed.

 <p>

 @param messageType the message type (<code>INFORMATION</code>,
			<code>WARNING</code> or <code>ERROR</code>). <p>

 @param options the list of confirmation options. <p>

 @param defaultOption the default option, represented as an index
			into the <code>options</code> array.

 @exception IllegalArgumentException if messageType is not either
			<code>INFORMATION</code>, <code>WARNING</code>,
			or <code>ERROR</code>, if <code>options</code> is null,
			if <code>options</code> has a length of 0,
			if any element from <code>options</code> is null,
			if any element from <code>options</code>
			has a length of 0, or if <code>defaultOption</code>
			does not lie within the array boundaries of
			<code>options</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.callback.ConfirmationCallback(String prompt, int messageType, int optionType, int defaultOption)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a <code>ConfirmationCallback</code> with a prompt,
 message type, an option type and a default option.

 <p> Underlying security services use this constructor if
 they require either a YES/NO, YES/NO/CANCEL or OK/CANCEL
 confirmation.

 <p>

 @param prompt the prompt used to describe the list of options. <p>

 @param messageType the message type (<code>INFORMATION</code>,
			<code>WARNING</code> or <code>ERROR</code>). <p>

 @param optionType the option type (<code>YES_NO_OPTION</code>,
			<code>YES_NO_CANCEL_OPTION</code> or
			<code>OK_CANCEL_OPTION</code>). <p>

 @param defaultOption the default option
			from the provided optionType (<code>YES</code>,
			<code>NO</code>, <code>CANCEL</code> or
			<code>OK</code>).

 @exception IllegalArgumentException if <code>prompt</code> is null,
			if <code>prompt</code> has a length of 0,
			if messageType is not either
			<code>INFORMATION</code>, <code>WARNING</code>,
			or <code>ERROR</code>, if optionType is not either
			<code>YES_NO_OPTION</code>,
			<code>YES_NO_CANCEL_OPTION</code>, or
			<code>OK_CANCEL_OPTION</code>,
			or if <code>defaultOption</code>
			does not correspond to one of the options in
			<code>optionType</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.callback.ConfirmationCallback(String prompt, int messageType, java.lang.String[] options, int defaultOption)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a <code>ConfirmationCallback</code> with a prompt,
 message type, a list of options and a default option.

 <p> Underlying security services use this constructor if
 they require a confirmation different from the available preset
 confirmations provided (for example, CONTINUE/ABORT or STOP/GO).
 The confirmation options are listed in the <code>options</code> array,
 and are displayed by the <code>CallbackHandler</code> implementation
 in a manner consistent with the way preset options are displayed.

 <p>

 @param prompt the prompt used to describe the list of options. <p>

 @param messageType the message type (<code>INFORMATION</code>,
			<code>WARNING</code> or <code>ERROR</code>). <p>

 @param options the list of confirmation options. <p>

 @param defaultOption the default option, represented as an index
			into the <code>options</code> array.

 @exception IllegalArgumentException if <code>prompt</code> is null,
			if <code>prompt</code> has a length of 0,
			if messageType is not either
			<code>INFORMATION</code>, <code>WARNING</code>,
			or <code>ERROR</code>, if <code>options</code> is null,
			if <code>options</code> has a length of 0,
			if any element from <code>options</code> is null,
			if any element from <code>options</code>
			has a length of 0, or if <code>defaultOption</code>
			does not lie within the array boundaries of
			<code>options</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.security.auth.callback.ConfirmationCallback.getPrompt()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the prompt.

 <p>

 @return the prompt, or null if this <code>ConfirmationCallback</code>
		was instantiated without a <code>prompt</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.security.auth.callback.ConfirmationCallback.getMessageType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the message type.

 <p>

 @return the message type (<code>INFORMATION</code>,
		<code>WARNING</code> or <code>ERROR</code>).

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.security.auth.callback.ConfirmationCallback.getOptionType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the option type.

 <p> If this method returns <code>UNSPECIFIED_OPTION</code>, then this
 <code>ConfirmationCallback</code> was instantiated with
 <code>options</code> instead of an <code>optionType</code>.
 In this case, invoke the <code>getOptions</code> method
 to determine which confirmation options to display.

 <p>

 @return the option type (<code>YES_NO_OPTION</code>,
		<code>YES_NO_CANCEL_OPTION</code> or
		<code>OK_CANCEL_OPTION</code>), or
		<code>UNSPECIFIED_OPTION</code> if this
		<code>ConfirmationCallback</code> was instantiated with
		<code>options</code> instead of an <code>optionType</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] javax.security.auth.callback.ConfirmationCallback.getOptions()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the confirmation options.

 <p>

 @return the list of confirmation options, or null if this
		<code>ConfirmationCallback</code> was instantiated with
		an <code>optionType</code> instead of <code>options</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.security.auth.callback.ConfirmationCallback.getDefaultOption()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the default option.

 <p>

 @return the default option, represented as
		<code>YES</code>, <code>NO</code>, <code>OK</code> or
		<code>CANCEL</code> if an <code>optionType</code>
		was specified to the constructor of this
		<code>ConfirmationCallback</code>.
		Otherwise, this method returns the default option as
		an index into the
		<code>options</code> array specified to the constructor
		of this <code>ConfirmationCallback</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.security.auth.callback.ConfirmationCallback.setSelectedIndex(int selection)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the selected confirmation option.

 <p>

 @param selection the selection represented as <code>YES</code>,
		<code>NO</code>, <code>OK</code> or <code>CANCEL</code>
		if an <code>optionType</code> was specified to the constructor
		of this <code>ConfirmationCallback</code>.
		Otherwise, the selection represents the index into the
		<code>options</code> array specified to the constructor
		of this <code>ConfirmationCallback</code>.

 @see #getSelectedIndex

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.security.auth.callback.ConfirmationCallback.getSelectedIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the selected confirmation option.

 <p>

 @return the selected confirmation option represented as
		<code>YES</code>, <code>NO</code>, <code>OK</code> or
		<code>CANCEL</code> if an <code>optionType</code>
		was specified to the constructor of this
		<code>ConfirmationCallback</code>.
		Otherwise, this method returns the selected confirmation
		option as an index into the
		<code>options</code> array specified to the constructor
		of this <code>ConfirmationCallback</code>.

 @see #setSelectedIndex

<!-- END DATA -->
