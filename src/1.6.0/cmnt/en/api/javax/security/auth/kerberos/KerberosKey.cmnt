<!-- BEGIN KEY -->
public class javax.security.auth.kerberos.KerberosKey extends java.lang.Object implements javax.crypto.SecretKey, javax.security.auth.Destroyable
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class encapsulates a long term secret key for a Kerberos
 principal.<p>

 All Kerberos JAAS login modules that obtain a principal's password and
 generate the secret key from it should use this class. Where available,
 the login module might even read this secret key directly from a
 Kerberos "keytab". Sometimes, such as when authenticating a server in
 the absence of user-to-user authentication, the login module will store 
 an instance of this class in the private credential set of a
 {@link javax.security.auth.Subject Subject} during the commit phase of the
 authentication process.<p>

 It might be necessary for the application to be granted a
 {@link javax.security.auth.PrivateCredentialPermission 
 PrivateCredentialPermission} if it needs to access the KerberosKey
 instance from a Subject. This permission is not needed when the 
 application depends on the default JGSS Kerberos mechanism to access the 
 KerberosKey. In that case, however, the application will need an 
 appropriate 
 {@link javax.security.auth.kerberos.ServicePermission ServicePermission}.

 @author Mayank Upadhyay
 @version 1.20, 04/21/06
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.security.auth.kerberos.KerberosPrincipal javax.security.auth.kerberos.KerberosKey.principal
<!-- END KEY -->
<!-- BEGIN DATA -->
 The principal that this secret key belongs to.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int javax.security.auth.kerberos.KerberosKey.versionNum
<!-- END KEY -->
<!-- BEGIN DATA -->
 the version number of this secret key

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.security.auth.kerberos.KeyImpl javax.security.auth.kerberos.KerberosKey.key
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>KeyImpl</code> is serialized by writing out the ASN1 Encoded bytes 
			of the 	encryption key. The ASN1 encoding is defined in 
			RFC1510 and as  follows:
			<pre>
			EncryptionKey ::=   SEQUENCE {
				keytype[0]    INTEGER,
				keyvalue[1]   OCTET STRING    	
				}
			</pre>

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.kerberos.KerberosKey(KerberosPrincipal principal, byte[] keyBytes, int keyType, int versionNum)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a KerberosKey from the given bytes when the key type and
 key version number are known. This can be used when reading the secret
 key information from a Kerberos "keytab".
 
 @param principal the principal that this secret key belongs to
 @param keyBytes the raw bytes for the secret key
 @param keyType the key type for the secret key as defined by the
 Kerberos protocol specification.
 @param versionNum the version number of this secret key

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.kerberos.KerberosKey(KerberosPrincipal principal, char[] password, String algorithm)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a KerberosKey from a principal's password.

 @param principal the principal that this password belongs to
 @param password the password that should be used to compute the key
 @param algorithm the name for the algorithm that this key will be
 used for. This parameter may be null in which case the default
 algorithm "DES" will be assumed.
 @throws IllegalArgumentException if the name of the 
 algorithm passed is unsupported. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.security.auth.kerberos.KerberosPrincipal javax.security.auth.kerberos.KerberosKey.getPrincipal()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the principal that this key belongs to.

 @return the principal this key belongs to.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.security.auth.kerberos.KerberosKey.getVersionNumber()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the key version number.

 @return the key version number.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int javax.security.auth.kerberos.KerberosKey.getKeyType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the key type for this long-term key.

 @return the key type.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.security.auth.kerberos.KerberosKey.getAlgorithm()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the standard algorithm name for this key. For 
 example, "DES" would indicate that this key is a DES key. 
 See Appendix A in the <a href= 
 "../../../../../technotes/guides/security/crypto/CryptoSpec.html#AppA"> 
 Java Cryptography Architecture API Specification &amp; Reference
 </a> 
 for information about standard algorithm names.
 
 @return the name of the algorithm associated with this key.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.security.auth.kerberos.KerberosKey.getFormat()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of the encoding format for this secret key.

 @return the String "RAW"

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte[] javax.security.auth.kerberos.KerberosKey.getEncoded()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the key material of this secret key.

 @return the key material

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.security.auth.kerberos.KerberosKey.destroy() throws javax.security.auth.DestroyFailedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Destroys this key. A call to any of its other methods after this
 will cause an  IllegalStateException to be thrown.

 @throws DestroyFailedException if some error occurs while destorying 
 this key.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.security.auth.kerberos.KerberosKey.isDestroyed()
<!-- END KEY -->
<!-- BEGIN DATA -->
Determines if this key has been destroyed.
<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.security.auth.kerberos.KerberosKey.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hashcode for this KerberosKey. 
 
 @return a hashCode() for the <code>KerberosKey</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.security.auth.kerberos.KerberosKey.equals(Object other)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares the specified Object with this KerberosKey for equality.
 Returns true if the given object is also a 
 <code>KerberosKey</code> and the two
 <code>KerberosKey</code> instances are equivalent. 

 @param other the Object to compare to
 @return true if the specified object is equal to this KerberosKey,
 false otherwise. NOTE: Returns false if either of the KerberosKey
 objects has been destroyed.
 @since 1.6

<!-- END DATA -->
