<!-- BEGIN KEY -->
public final class javax.security.auth.Subject extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p> A <code>Subject</code> represents a grouping of related information
 for a single entity, such as a person.
 Such information includes the Subject's identities as well as
 its security-related attributes
 (passwords and cryptographic keys, for example).

 <p> Subjects may potentially have multiple identities.
 Each identity is represented as a <code>Principal</code>
 within the <code>Subject</code>.  Principals simply bind names to a
 <code>Subject</code>.  For example, a <code>Subject</code> that happens
 to be a person, Alice, might have two Principals:
 one which binds "Alice Bar", the name on her driver license,
 to the <code>Subject</code>, and another which binds,
 "999-99-9999", the number on her student identification card,
 to the <code>Subject</code>.  Both Principals refer to the same
 <code>Subject</code> even though each has a different name.

 <p> A <code>Subject</code> may also own security-related attributes,
 which are referred to as credentials.
 Sensitive credentials that require special protection, such as
 private cryptographic keys, are stored within a private credential
 <code>Set</code>.  Credentials intended to be shared, such as
 public key certificates or Kerberos server tickets are stored
 within a public credential <code>Set</code>.  Different permissions
 are required to access and modify the different credential Sets.

 <p> To retrieve all the Principals associated with a <code>Subject</code>,
 invoke the <code>getPrincipals</code> method.  To retrieve
 all the public or private credentials belonging to a <code>Subject</code>,
 invoke the <code>getPublicCredentials</code> method or
 <code>getPrivateCredentials</code> method, respectively.
 To modify the returned <code>Set</code> of Principals and credentials,
 use the methods defined in the <code>Set</code> class.
 For example:
 <pre>
	Subject subject;
	Principal principal;
	Object credential;

	// add a Principal and credential to the Subject
	subject.getPrincipals().add(principal);
	subject.getPublicCredentials().add(credential);
 </pre>

 <p> This <code>Subject</code> class implements <code>Serializable</code>.
 While the Principals associated with the <code>Subject</code> are serialized,
 the credentials associated with the <code>Subject</code> are not.
 Note that the <code>java.security.Principal</code> class
 does not implement <code>Serializable</code>.  Therefore all concrete
 <code>Principal</code> implementations associated with Subjects
 must implement <code>Serializable</code>.

 @version 1.127, 11/17/05
 @see java.security.Principal
 @see java.security.DomainCombiner

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.util.Set javax.security.auth.Subject.principals
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <code>Set</code> that provides a view of all of this
 Subject's Principals

 <p>

 @serial Each element in this set is a
		<code>java.security.Principal</code>.
		The set is a <code>Subject.SecureSet</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
private volatile boolean javax.security.auth.Subject.readOnly
<!-- END KEY -->
<!-- BEGIN DATA -->
 Whether this Subject is read-only

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.Subject()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create an instance of a <code>Subject</code>
 with an empty <code>Set</code> of Principals and empty
 Sets of public and private credentials.

 <p> The newly constructed Sets check whether this <code>Subject</code>
 has been set read-only before permitting subsequent modifications.
 The newly created Sets also prevent illegal modifications
 by ensuring that callers have sufficient permissions.

 <p> To modify the Principals Set, the caller must have
 <code>AuthPermission("modifyPrincipals")</code>.
 To modify the public credential Set, the caller must have
 <code>AuthPermission("modifyPublicCredentials")</code>.
 To modify the private credential Set, the caller must have
 <code>AuthPermission("modifyPrivateCredentials")</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.Subject(boolean readOnly, java.util.Set<? extends java.security.Principal> principals, java.util.Set<?> pubCredentials, java.util.Set<?> privCredentials)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create an instance of a <code>Subject</code> with
 Principals and credentials.

 <p> The Principals and credentials from the specified Sets
 are copied into newly constructed Sets.
 These newly created Sets check whether this <code>Subject</code>
 has been set read-only before permitting subsequent modifications.
 The newly created Sets also prevent illegal modifications
 by ensuring that callers have sufficient permissions.

 <p> To modify the Principals Set, the caller must have
 <code>AuthPermission("modifyPrincipals")</code>.
 To modify the public credential Set, the caller must have
 <code>AuthPermission("modifyPublicCredentials")</code>.
 To modify the private credential Set, the caller must have
 <code>AuthPermission("modifyPrivateCredentials")</code>.
 <p>

 @param readOnly true if the <code>Subject</code> is to be read-only,
		and false otherwise. <p>

 @param principals the <code>Set</code> of Principals
		to be associated with this <code>Subject</code>. <p>

 @param pubCredentials the <code>Set</code> of public credentials
		to be associated with this <code>Subject</code>. <p>

 @param privCredentials the <code>Set</code> of private credentials
		to be associated with this <code>Subject</code>.

 @exception NullPointerException if the specified
		<code>principals</code>, <code>pubCredentials</code>,
		or <code>privCredentials</code> are <code>null</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.security.auth.Subject.setReadOnly()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set this <code>Subject</code> to be read-only.

 <p> Modifications (additions and removals) to this Subject's
 <code>Principal</code> <code>Set</code> and
 credential Sets will be disallowed.
 The <code>destroy</code> operation on this Subject's credentials will
 still be permitted.

 <p> Subsequent attempts to modify the Subject's <code>Principal</code>
 and credential Sets will result in an
 <code>IllegalStateException</code> being thrown.
 Also, once a <code>Subject</code> is read-only,
 it can not be reset to being writable again.

 <p>

 @exception SecurityException if the caller does not have permission
		to set this <code>Subject</code> to be read-only.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.security.auth.Subject.isReadOnly()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Query whether this <code>Subject</code> is read-only.

 <p>

 @return true if this <code>Subject</code> is read-only, false otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.security.auth.Subject javax.security.auth.Subject.getSubject(AccessControlContext acc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the <code>Subject</code> associated with the provided
 <code>AccessControlContext</code>.

 <p> The <code>AccessControlContext</code> may contain many
 Subjects (from nested <code>doAs</code> calls).
 In this situation, the most recent <code>Subject</code> associated
 with the <code>AccessControlContext</code> is returned.

 <p>

 @param  acc the <code>AccessControlContext</code> from which to retrieve
		the <code>Subject</code>.

 @return  the <code>Subject</code> associated with the provided
		<code>AccessControlContext</code>, or <code>null</code>
		if no <code>Subject</code> is associated
		with the provided <code>AccessControlContext</code>.

 @exception SecurityException if the caller does not have permission
		to get the <code>Subject</code>. <p>

 @exception NullPointerException if the provided
		<code>AccessControlContext</code> is <code>null</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static T javax.security.auth.Subject.doAs(Subject subject, java.security.PrivilegedAction<T> action)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Perform work as a particular <code>Subject</code>.

 <p> This method first retrieves the current Thread's
 <code>AccessControlContext</code> via
 <code>AccessController.getContext</code>,
 and then instantiates a new <code>AccessControlContext</code>
 using the retrieved context along with a new
 <code>SubjectDomainCombiner</code> (constructed using
 the provided <code>Subject</code>).
 Finally, this method invokes <code>AccessController.doPrivileged</code>,
 passing it the provided <code>PrivilegedAction</code>,
 as well as the newly constructed <code>AccessControlContext</code>.

 <p>

 @param subject the <code>Subject</code> that the specified
			<code>action</code> will run as.  This parameter
			may be <code>null</code>. <p>

 @param action the code to be run as the specified
			<code>Subject</code>. <p>

 @return the value returned by the PrivilegedAction's
			<code>run</code> method.

 @exception NullPointerException if the <code>PrivilegedAction</code>
			is <code>null</code>. <p>

 @exception SecurityException if the caller does not have permission
			to invoke this method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static T javax.security.auth.Subject.doAs(Subject subject, java.security.PrivilegedExceptionAction<T> action) throws java.security.PrivilegedActionException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Perform work as a particular <code>Subject</code>.

 <p> This method first retrieves the current Thread's
 <code>AccessControlContext</code> via
 <code>AccessController.getContext</code>,
 and then instantiates a new <code>AccessControlContext</code>
 using the retrieved context along with a new
 <code>SubjectDomainCombiner</code> (constructed using
 the provided <code>Subject</code>).
 Finally, this method invokes <code>AccessController.doPrivileged</code>,
 passing it the provided <code>PrivilegedExceptionAction</code>,
 as well as the newly constructed <code>AccessControlContext</code>.

 <p>

 @param subject the <code>Subject</code> that the specified
			<code>action</code> will run as.  This parameter
			may be <code>null</code>. <p>

 @param action the code to be run as the specified
			<code>Subject</code>. <p>

 @return the value returned by the
			PrivilegedExceptionAction's <code>run</code> method.

 @exception PrivilegedActionException if the
			<code>PrivilegedExceptionAction.run</code>
			method throws a checked exception. <p>

 @exception NullPointerException if the specified
			<code>PrivilegedExceptionAction</code> is
			<code>null</code>. <p>

 @exception SecurityException if the caller does not have permission
			to invoke this method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static T javax.security.auth.Subject.doAsPrivileged(Subject subject, java.security.PrivilegedAction<T> action, AccessControlContext acc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Perform privileged work as a particular <code>Subject</code>.

 <p> This method behaves exactly as <code>Subject.doAs</code>,
 except that instead of retrieving the current Thread's
 <code>AccessControlContext</code>, it uses the provided
 <code>AccessControlContext</code>.  If the provided
 <code>AccessControlContext</code> is <code>null</code>,
 this method instantiates a new <code>AccessControlContext</code>
 with an empty collection of ProtectionDomains.

 <p>

 @param subject the <code>Subject</code> that the specified
			<code>action</code> will run as.  This parameter
			may be <code>null</code>. <p>

 @param action the code to be run as the specified
			<code>Subject</code>. <p>

 @param acc the <code>AccessControlContext</code> to be tied to the
			specified <i>subject</i> and <i>action</i>. <p>

 @return the value returned by the PrivilegedAction's
			<code>run</code> method.

 @exception NullPointerException if the <code>PrivilegedAction</code>
			is <code>null</code>. <p>

 @exception SecurityException if the caller does not have permission
			to invoke this method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static T javax.security.auth.Subject.doAsPrivileged(Subject subject, java.security.PrivilegedExceptionAction<T> action, AccessControlContext acc) throws java.security.PrivilegedActionException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Perform privileged work as a particular <code>Subject</code>.

 <p> This method behaves exactly as <code>Subject.doAs</code>,
 except that instead of retrieving the current Thread's
 <code>AccessControlContext</code>, it uses the provided
 <code>AccessControlContext</code>.  If the provided
 <code>AccessControlContext</code> is <code>null</code>,
 this method instantiates a new <code>AccessControlContext</code>
 with an empty collection of ProtectionDomains.

 <p>

 @param subject the <code>Subject</code> that the specified
			<code>action</code> will run as.  This parameter
			may be <code>null</code>. <p>

 @param action the code to be run as the specified
			<code>Subject</code>. <p>

 @param acc the <code>AccessControlContext</code> to be tied to the
			specified <i>subject</i> and <i>action</i>. <p>

 @return the value returned by the
			PrivilegedExceptionAction's <code>run</code> method.

 @exception PrivilegedActionException if the
			<code>PrivilegedExceptionAction.run</code>
			method throws a checked exception. <p>

 @exception NullPointerException if the specified
			<code>PrivilegedExceptionAction</code> is
			<code>null</code>. <p>

 @exception SecurityException if the caller does not have permission
			to invoke this method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.security.Principal> javax.security.auth.Subject.getPrincipals()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the <code>Set</code> of Principals associated with this
 <code>Subject</code>.  Each <code>Principal</code> represents
 an identity for this <code>Subject</code>.

 <p> The returned <code>Set</code> is backed by this Subject's
 internal <code>Principal</code> <code>Set</code>.  Any modification
 to the returned <code>Set</code> affects the internal
 <code>Principal</code> <code>Set</code> as well.

 <p>

 @return	The <code>Set</code> of Principals associated with this
		<code>Subject</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<T> javax.security.auth.Subject.getPrincipals(java.lang.Class<T> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return a <code>Set</code> of Principals associated with this
 <code>Subject</code> that are instances or subclasses of the specified
 <code>Class</code>.

 <p> The returned <code>Set</code> is not backed by this Subject's
 internal <code>Principal</code> <code>Set</code>.  A new
 <code>Set</code> is created and returned for each method invocation.
 Modifications to the returned <code>Set</code>
 will not affect the internal <code>Principal</code> <code>Set</code>.

 <p>

 @param c the returned <code>Set</code> of Principals will all be
		instances of this class.

 @return a <code>Set</code> of Principals that are instances of the
		specified <code>Class</code>.

 @exception NullPointerException if the specified <code>Class</code> 
			is <code>null</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.lang.Object> javax.security.auth.Subject.getPublicCredentials()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the <code>Set</code> of public credentials held by this
 <code>Subject</code>.

 <p> The returned <code>Set</code> is backed by this Subject's
 internal public Credential <code>Set</code>.  Any modification
 to the returned <code>Set</code> affects the internal public
 Credential <code>Set</code> as well.

 <p>

 @return	A <code>Set</code> of public credentials held by this
		<code>Subject</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.lang.Object> javax.security.auth.Subject.getPrivateCredentials()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the <code>Set</code> of private credentials held by this
 <code>Subject</code>.

 <p> The returned <code>Set</code> is backed by this Subject's
 internal private Credential <code>Set</code>.  Any modification
 to the returned <code>Set</code> affects the internal private
 Credential <code>Set</code> as well.

 <p> A caller requires permissions to access the Credentials
 in the returned <code>Set</code>, or to modify the
 <code>Set</code> itself.  A <code>SecurityException</code>
 is thrown if the caller does not have the proper permissions.
 
 <p> While iterating through the <code>Set</code>,
 a <code>SecurityException</code> is thrown
 if the caller does not have permission to access a
 particular Credential.  The <code>Iterator</code>
 is nevertheless advanced to next element in the <code>Set</code>.

 <p>

 @return	A <code>Set</code> of private credentials held by this
		<code>Subject</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<T> javax.security.auth.Subject.getPublicCredentials(java.lang.Class<T> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return a <code>Set</code> of public credentials associated with this
 <code>Subject</code> that are instances or subclasses of the specified
 <code>Class</code>.

 <p> The returned <code>Set</code> is not backed by this Subject's
 internal public Credential <code>Set</code>.  A new
 <code>Set</code> is created and returned for each method invocation.
 Modifications to the returned <code>Set</code>
 will not affect the internal public Credential <code>Set</code>.

 <p>

 @param c the returned <code>Set</code> of public credentials will all be
		instances of this class.

 @return a <code>Set</code> of public credentials that are instances
		of the	specified <code>Class</code>.

 @exception NullPointerException if the specified <code>Class</code>
		is <code>null</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<T> javax.security.auth.Subject.getPrivateCredentials(java.lang.Class<T> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return a <code>Set</code> of private credentials associated with this
 <code>Subject</code> that are instances or subclasses of the specified
 <code>Class</code>. 

 <p> The caller must have permission to access all of the
 requested Credentials, or a <code>SecurityException</code>
 will be thrown.

 <p> The returned <code>Set</code> is not backed by this Subject's
 internal private Credential <code>Set</code>.  A new
 <code>Set</code> is created and returned for each method invocation.
 Modifications to the returned <code>Set</code>
 will not affect the internal private Credential <code>Set</code>.

 <p>

 @param c the returned <code>Set</code> of private credentials will all be
		instances of this class.

 @return a <code>Set</code> of private credentials that are instances
		of the	specified <code>Class</code>.

 @exception NullPointerException if the specified <code>Class</code>
		is <code>null</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.security.auth.Subject.equals(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares the specified Object with this <code>Subject</code>
 for equality.  Returns true if the given object is also a Subject
 and the two <code>Subject</code> instances are equivalent.
 More formally, two <code>Subject</code> instances are
 equal if their <code>Principal</code> and <code>Credential</code>
 Sets are equal.

 <p>

 @param o Object to be compared for equality with this
		<code>Subject</code>.

 @return true if the specified Object is equal to this
		<code>Subject</code>.

 @exception SecurityException if the caller does not have permission
		to access the private credentials for this <code>Subject</code>,
		or if the caller does not have permission to access the
		private credentials for the provided <code>Subject</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.security.auth.Subject.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the String representation of this <code>Subject</code>.

 <p>

 @return the String representation of this <code>Subject</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.security.auth.Subject.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hashcode for this <code>Subject</code>.

 <p>

 @return a hashcode for this <code>Subject</code>.

 @exception SecurityException if the caller does not have permission
		to access this Subject's private credentials.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.security.auth.Subject.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads this object from a stream (i.e., deserializes it)

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.security.auth.Subject.writeObject(ObjectOutputStream oos) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes this object out to a stream (i.e., serializes it).

<!-- END DATA -->
