<!-- BEGIN KEY -->
public final class javax.security.auth.kerberos.DelegationPermission extends java.security.BasicPermission implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class is used to restrict the usage of the Kerberos
 delegation model, ie: forwardable and proxiable tickets.
 <p>
 The target name of this <code>Permission</code> specifies a pair of 
 kerberos service principals. The first is the subordinate service principal 
 being entrusted to use the TGT. The second service principal designates
 the target service the subordinate service principal is to
 interact with on behalf of the initiating KerberosPrincipal. This
 latter service principal is specified to restrict the use of a
 proxiable ticket.
 <p>
 For example, to specify the "host" service use of a forwardable TGT the
 target permission is specified as follows:
 <p> 
 <pre>
  DelegationPermission("\"host/foo.example.com@EXAMPLE.COM\" \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\"");
 </pre>
 <p>
 To give the "backup" service a proxiable nfs service ticket the target permission
 might be specified:
 <p>
 <pre>
  DelegationPermission("\"backup/bar.example.com@EXAMPLE.COM\" \"nfs/home.EXAMPLE.COM@EXAMPLE.COM\"");
 </pre>

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.kerberos.DelegationPermission(String principals)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new <code>DelegationPermission</code>
 with the specified subordinate and target principals.

 <p>

 @param principals the name of the subordinate and target principals

 @throws NullPointerException if <code>principals</code> is <code>null</code>.
 @throws IllegalArgumentException if <code>principals</code> is empty.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.kerberos.DelegationPermission(String principals, String actions)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new <code>DelegationPermission</code>
 with the specified subordinate and target principals.
 <p>

 @param principals the name of the subordinate and target principals 
 <p>
 @param actions should be null.

 @throws NullPointerException if <code>principals</code> is <code>null</code>.
 @throws IllegalArgumentException if <code>principals</code> is empty.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.security.auth.kerberos.DelegationPermission.implies(Permission p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks if this Kerberos delegation permission object "implies" the 
 specified permission.
 <P>
 If none of the above are true, <code>implies</code> returns false.
 @param p the permission to check against.

 @return true if the specified permission is implied by this object,
 false if not.  

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.security.auth.kerberos.DelegationPermission.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks two DelegationPermission objects for equality. 
 <P>
 @param obj the object to test for equality with this object.
 
 @return true if <i>obj</i> is a DelegationPermission, and
  has the same subordinate and service principal as this.
  DelegationPermission object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.security.auth.kerberos.DelegationPermission.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the hash code value for this object.

 @return a hash code value for this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.PermissionCollection javax.security.auth.kerberos.DelegationPermission.newPermissionCollection()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a PermissionCollection object for storing
 DelegationPermission objects.
 <br>
 DelegationPermission objects must be stored in a manner that
 allows them to be inserted into the collection in any order, but
 that also enables the PermissionCollection implies method to
 be implemented in an efficient (and consistent) manner.

 @return a new PermissionCollection object suitable for storing
 DelegationPermissions.

<!-- END DATA -->
<!-- BEGIN KEY -->
private synchronized void javax.security.auth.kerberos.DelegationPermission.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 readObject is called to restore the state of the
 DelegationPermission from a stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
private synchronized void javax.security.auth.kerberos.DelegationPermission.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 WriteObject is called to save the state of the DelegationPermission 
 to a stream. The actions are serialized, and the superclass
 takes care of the name.

<!-- END DATA -->
