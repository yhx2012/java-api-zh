<!-- BEGIN KEY -->
public class javax.security.auth.SubjectDomainCombiner extends java.lang.Object implements java.security.DomainCombiner
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <code>SubjectDomainCombiner</code> updates ProtectionDomains
 with Principals from the <code>Subject</code> associated with this
 <code>SubjectDomainCombiner</code>.

 @version 1.49, 11/17/05

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.SubjectDomainCombiner(Subject subject)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Associate the provided <code>Subject</code> with this
 <code>SubjectDomainCombiner</code>.

 <p>

 @param subject the <code>Subject</code> to be associated with
		with this <code>SubjectDomainCombiner</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.auth.Subject javax.security.auth.SubjectDomainCombiner.getSubject()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the <code>Subject</code> associated with this
 <code>SubjectDomainCombiner</code>.

 <p>

 @return the <code>Subject</code> associated with this
		<code>SubjectDomainCombiner</code>, or <code>null</code>
		if no <code>Subject</code> is associated with this
		<code>SubjectDomainCombiner</code>.

 @exception SecurityException if the caller does not have permission
		to get the <code>Subject</code> associated with this
		<code>SubjectDomainCombiner</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.ProtectionDomain[] javax.security.auth.SubjectDomainCombiner.combine(java.security.ProtectionDomain[] currentDomains, java.security.ProtectionDomain[] assignedDomains)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Update the relevant ProtectionDomains with the Principals
 from the <code>Subject</code> associated with this
 <code>SubjectDomainCombiner</code>.

 <p> A new <code>ProtectionDomain</code> instance is created
 for each <code>ProtectionDomain</code> in the
 <i>currentDomains</i> array.  Each new <code>ProtectionDomain</code>
 instance is created using the <code>CodeSource</code>,
 <code>Permission</code>s and <code>ClassLoader</code>
 from the corresponding <code>ProtectionDomain</code> in
 <i>currentDomains</i>, as well as with the Principals from
 the <code>Subject</code> associated with this
 <code>SubjectDomainCombiner</code>.
 
 <p> All of the newly instantiated ProtectionDomains are
 combined into a new array.  The ProtectionDomains from the
 <i>assignedDomains</i> array are appended to this new array,
 and the result is returned.

 <p> Note that optimizations such as the removal of duplicate
 ProtectionDomains may have occurred.
 In addition, caching of ProtectionDomains may be permitted.

 <p>

 @param currentDomains the ProtectionDomains associated with the
		current execution Thread, up to the most recent
		privileged <code>ProtectionDomain</code>.
		The ProtectionDomains are are listed in order of execution,
		with the most recently executing <code>ProtectionDomain</code>
		residing at the beginning of the array. This parameter may
		be <code>null</code> if the current execution Thread
		has no associated ProtectionDomains.<p>

 @param assignedDomains the ProtectionDomains inherited from the
		parent Thread, or the ProtectionDomains from the
		privileged <i>context</i>, if a call to
		AccessController.doPrivileged(..., <i>context</i>)
		had occurred  This parameter may be <code>null</code>
		if there were no ProtectionDomains inherited from the
		parent Thread, or from the privileged <i>context</i>.

 @return a new array consisting of the updated ProtectionDomains,
		or <code>null</code>.

<!-- END DATA -->
