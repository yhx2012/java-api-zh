<!-- BEGIN KEY -->
public class javax.imageio.ImageTypeSpecifier extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 A class that allows the format of an image (in particular, its
 <code>SampleModel</code> and <code>ColorModel</code>) to be
 specified in a convenient manner.

 @version 0.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.image.ColorModel javax.imageio.ImageTypeSpecifier.colorModel
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>ColorModel</code> to be used as a prototype.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.image.SampleModel javax.imageio.ImageTypeSpecifier.sampleModel
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <code>SampleModel</code> to be used as a prototype.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.imageio.ImageTypeSpecifier(ColorModel colorModel, SampleModel sampleModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an <code>ImageTypeSpecifier</code> directly
 from a <code>ColorModel</code> and a <code>SampleModel</code>.
 It is the caller's responsibility to supply compatible
 parameters.

 @param colorModel a <code>ColorModel</code>.
 @param sampleModel a <code>SampleModel</code>.

 @exception IllegalArgumentException if either parameter is
 <code>null</code>.
 @exception IllegalArgumentException if <code>sampleModel</code>
 is not compatible with <code>colorModel</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.imageio.ImageTypeSpecifier(RenderedImage image)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an <code>ImageTypeSpecifier</code> from a
 <code>RenderedImage</code>.  If a <code>BufferedImage</code> is
 being used, one of the factory methods
 <code>createFromRenderedImage</code> or
 <code>createFromBufferedImageType</code> should be used instead in
 order to get a more accurate result.

 @param image a <code>RenderedImage</code>.

 @exception IllegalArgumentException if the argument is 
 <code>null</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier.createPacked(ColorSpace colorSpace, int redMask, int greenMask, int blueMask, int alphaMask, int transferType, boolean isAlphaPremultiplied)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a specifier for a packed image format that will use a
 <code>DirectColorModel</code> and a packed
 <code>SampleModel</code> to store each pixel packed into in a
 single byte, short, or int.

 @param colorSpace the desired <code>ColorSpace</code>.
 @param redMask a contiguous mask indicated the position of the 
 red channel.
 @param greenMask a contiguous mask indicated the position of the 
 green channel.
 @param blueMask a contiguous mask indicated the position of the 
 blue channel.
 @param alphaMask a contiguous mask indicated the position of the 
 alpha channel.
 @param transferType the desired <code>SampleModel</code> transfer type.
 @param isAlphaPremultiplied <code>true</code> if the color channels
 will be premultipled by the alpha channel.

 @return an <code>ImageTypeSpecifier</code> with the desired
 characteristics.

 @exception IllegalArgumentException if <code>colorSpace</code>
 is <code>null</code>.
 @exception IllegalArgumentException if <code>colorSpace</code>
 is not of type <code>TYPE_RGB</code>.
 @exception IllegalArgumentException if no mask has at least 1
 bit set.
 @exception IllegalArgumentException if
 <code>transferType</code> if not one of
 <code>DataBuffer.TYPE_BYTE</code>,
 <code>DataBuffer.TYPE_USHORT</code>, or
 <code>DataBuffer.TYPE_INT</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier.createInterleaved(ColorSpace colorSpace, int[] bandOffsets, int dataType, boolean hasAlpha, boolean isAlphaPremultiplied)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a specifier for an interleaved image format that will
 use a <code>ComponentColorModel</code> and a
 <code>PixelInterleavedSampleModel</code> to store each pixel
 component in a separate byte, short, or int.

 @param colorSpace the desired <code>ColorSpace</code>.
 @param bandOffsets an array of <code>int</code>s indicating the
 offsets for each band.
 @param dataType the desired data type, as one of the enumerations
 from the <code>DataBuffer</code> class.
 @param hasAlpha <code>true</code> if an alpha channel is desired.
 @param isAlphaPremultiplied <code>true</code> if the color channels
 will be premultipled by the alpha channel.

 @return an <code>ImageTypeSpecifier</code> with the desired
 characteristics.

 @exception IllegalArgumentException if <code>colorSpace</code>
 is <code>null</code>.
 @exception IllegalArgumentException if <code>bandOffsets</code>
 is <code>null</code>.
 @exception IllegalArgumentException if <code>dataType</code> is
 not one of the legal <code>DataBuffer.TYPE_*</code> constants.
 @exception IllegalArgumentException if
 <code>bandOffsets.length</code> does not equal the number of
 color space components, plus 1 if <code>hasAlpha</code> is
 <code>true</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier.createBanded(ColorSpace colorSpace, int[] bankIndices, int[] bandOffsets, int dataType, boolean hasAlpha, boolean isAlphaPremultiplied)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a specifier for a banded image format that will use a
 <code>ComponentColorModel</code> and a
 <code>BandedSampleModel</code> to store each channel in a
 separate array.

 @param colorSpace the desired <code>ColorSpace</code>.
 @param bankIndices an array of <code>int</code>s indicating the
 bank in which each band will be stored.
 @param bandOffsets an array of <code>int</code>s indicating the
 starting offset of each band within its bank.
 @param dataType the desired data type, as one of the enumerations
 from the <code>DataBuffer</code> class.
 @param hasAlpha <code>true</code> if an alpha channel is desired.
 @param isAlphaPremultiplied <code>true</code> if the color channels
 will be premultipled by the alpha channel.

 @return an <code>ImageTypeSpecifier</code> with the desired
 characteristics.

 @exception IllegalArgumentException if <code>colorSpace</code>
 is <code>null</code>.
 @exception IllegalArgumentException if <code>bankIndices</code>
 is <code>null</code>.
 @exception IllegalArgumentException if <code>bandOffsets</code>
 is <code>null</code>.
 @exception IllegalArgumentException if the lengths of
 <code>bankIndices</code> and <code>bandOffsets</code> differ.
 @exception IllegalArgumentException if
 <code>bandOffsets.length</code> does not equal the number of
 color space components, plus 1 if <code>hasAlpha</code> is
 <code>true</code>.
 @exception IllegalArgumentException if <code>dataType</code> is
 not one of the legal <code>DataBuffer.TYPE_*</code> constants.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier.createGrayscale(int bits, int dataType, boolean isSigned)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a specifier for a grayscale image format that will pack
 pixels of the given bit depth into array elements of
 the specified data type.

 @param bits the number of bits per gray value (1, 2, 4, 8, or 16).
 @param dataType the desired data type, as one of the enumerations
 from the <code>DataBuffer</code> class.
 @param isSigned <code>true</code> if negative values are to
 be represented.

 @return an <code>ImageTypeSpecifier</code> with the desired
 characteristics.

 @exception IllegalArgumentException if <code>bits</code> is
 not one of 1, 2, 4, 8, or 16.
 @exception IllegalArgumentException if <code>dataType</code> is
 not one of <code>DataBuffer.TYPE_BYTE</code>,
 <code>DataBuffer.TYPE_SHORT</code>, or
 <code>DataBuffer.TYPE_USHORT</code>.
 @exception IllegalArgumentException if <code>bits</code> is
 larger than the bit size of the given <code>dataType</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier.createGrayscale(int bits, int dataType, boolean isSigned, boolean isAlphaPremultiplied)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a specifier for a grayscale plus alpha image format
 that will pack pixels of the given bit depth into array
 elements of the specified data type.

 @param bits the number of bits per gray value (1, 2, 4, 8, or 16).
 @param dataType the desired data type, as one of the enumerations
 from the <code>DataBuffer</code> class.
 @param isSigned <code>true</code> if negative values are to
 be represented.
 @param isAlphaPremultiplied <code>true</code> if the luminance channel
 will be premultipled by the alpha channel.

 @return an <code>ImageTypeSpecifier</code> with the desired
 characteristics.

 @exception IllegalArgumentException if <code>bits</code> is
 not one of 1, 2, 4, 8, or 16.
 @exception IllegalArgumentException if <code>dataType</code> is
 not one of <code>DataBuffer.TYPE_BYTE</code>,
 <code>DataBuffer.TYPE_SHORT</code>, or
 <code>DataBuffer.TYPE_USHORT</code>.
 @exception IllegalArgumentException if <code>bits</code> is
 larger than the bit size of the given <code>dataType</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier.createIndexed(byte[] redLUT, byte[] greenLUT, byte[] blueLUT, byte[] alphaLUT, int bits, int dataType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a specifier for an indexed-color image format that will pack
 index values of the given bit depth into array elements of
 the specified data type.

 @param redLUT an array of <code>byte</code>s containing
 the red values for each index.
 @param greenLUT an array of <code>byte</code>s containing * the
  green values for each index.
 @param blueLUT an array of <code>byte</code>s containing the
 blue values for each index.
 @param alphaLUT an array of <code>byte</code>s containing the
 alpha values for each index, or <code>null</code> to create a
 fully opaque LUT.
 @param bits the number of bits in each index.
 @param dataType the desired output type, as one of the enumerations
 from the <code>DataBuffer</code> class.

 @return an <code>ImageTypeSpecifier</code> with the desired
 characteristics.

 @exception IllegalArgumentException if <code>redLUT</code> is
 <code>null</code>.
 @exception IllegalArgumentException if <code>greenLUT</code> is
 <code>null</code>.
 @exception IllegalArgumentException if <code>blueLUT</code> is
 <code>null</code>.
 @exception IllegalArgumentException if <code>bits</code> is
 not one of 1, 2, 4, 8, or 16.
 @exception IllegalArgumentException if the
 non-<code>null</code> LUT parameters do not have lengths of
 exactly <code>1 << bits</code>.
 @exception IllegalArgumentException if <code>dataType</code> is
 not one of <code>DataBuffer.TYPE_BYTE</code>,
 <code>DataBuffer.TYPE_SHORT</code>,
 <code>DataBuffer.TYPE_USHORT</code>,
 or <code>DataBuffer.TYPE_INT</code>.
 @exception IllegalArgumentException if <code>bits</code> is
 larger than the bit size of the given <code>dataType</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier.createFromBufferedImageType(int bufferedImageType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an <code>ImageTypeSpecifier</code> that encodes
 one of the standard <code>BufferedImage</code> types
 (other than <code>TYPE_CUSTOM</code>).

 @param bufferedImageType an int representing one of the standard
 <code>BufferedImage</code> types.

 @return an <code>ImageTypeSpecifier</code> with the desired
 characteristics.

 @exception IllegalArgumentException if
 <code>bufferedImageType</code> is not one of the standard
 types, or is equal to <code>TYPE_CUSTOM</code>.

 @see java.awt.image.BufferedImage
 @see java.awt.image.BufferedImage#TYPE_INT_RGB
 @see java.awt.image.BufferedImage#TYPE_INT_ARGB
 @see java.awt.image.BufferedImage#TYPE_INT_ARGB_PRE
 @see java.awt.image.BufferedImage#TYPE_INT_BGR
 @see java.awt.image.BufferedImage#TYPE_3BYTE_BGR
 @see java.awt.image.BufferedImage#TYPE_4BYTE_ABGR
 @see java.awt.image.BufferedImage#TYPE_4BYTE_ABGR_PRE
 @see java.awt.image.BufferedImage#TYPE_USHORT_565_RGB
 @see java.awt.image.BufferedImage#TYPE_USHORT_555_RGB
 @see java.awt.image.BufferedImage#TYPE_BYTE_GRAY
 @see java.awt.image.BufferedImage#TYPE_USHORT_GRAY
 @see java.awt.image.BufferedImage#TYPE_BYTE_BINARY
 @see java.awt.image.BufferedImage#TYPE_BYTE_INDEXED

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier.createFromRenderedImage(RenderedImage image)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an <code>ImageTypeSpecifier</code> that encodes the
 layout of a <code>RenderedImage</code> (which may be a
 <code>BufferedImage</code>).

 @param image a <code>RenderedImage</code>.

 @return an <code>ImageTypeSpecifier</code> with the desired
 characteristics.

 @exception IllegalArgumentException if <code>image</code> is
 <code>null</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.ImageTypeSpecifier.getBufferedImageType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an int containing one of the enumerated constant values
 describing image formats from <code>BufferedImage</code>.

 @return an <code>int</code> representing a
 <code>BufferedImage</code> type.

 @see java.awt.image.BufferedImage
 @see java.awt.image.BufferedImage#TYPE_CUSTOM
 @see java.awt.image.BufferedImage#TYPE_INT_RGB
 @see java.awt.image.BufferedImage#TYPE_INT_ARGB
 @see java.awt.image.BufferedImage#TYPE_INT_ARGB_PRE
 @see java.awt.image.BufferedImage#TYPE_INT_BGR
 @see java.awt.image.BufferedImage#TYPE_3BYTE_BGR
 @see java.awt.image.BufferedImage#TYPE_4BYTE_ABGR
 @see java.awt.image.BufferedImage#TYPE_4BYTE_ABGR_PRE
 @see java.awt.image.BufferedImage#TYPE_USHORT_565_RGB
 @see java.awt.image.BufferedImage#TYPE_USHORT_555_RGB
 @see java.awt.image.BufferedImage#TYPE_BYTE_GRAY
 @see java.awt.image.BufferedImage#TYPE_USHORT_GRAY
 @see java.awt.image.BufferedImage#TYPE_BYTE_BINARY
 @see java.awt.image.BufferedImage#TYPE_BYTE_INDEXED

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.ImageTypeSpecifier.getNumComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the number of color components 
 specified by this object.  This is the same value as returned by
 <code>ColorModel.getNumComponents</code>

 @return the number of components in the image.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.ImageTypeSpecifier.getNumBands()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the number of bands 
 specified by this object.  This is the same value as returned by
 <code>SampleModel.getNumBands</code>

 @return the number of bands in the image.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.ImageTypeSpecifier.getBitsPerBand(int band)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the number of bits used to represent samples of the given band.

 @param band the index of the band to be queried, as an
 int.

 @return an int specifying a number of bits.

 @exception IllegalArgumentException if <code>band</code> is
 negative or greater than the largest band index.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.SampleModel javax.imageio.ImageTypeSpecifier.getSampleModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>SampleModel</code> based on the settings
 encapsulated within this object.  The width and height of the
 <code>SampleModel</code> will be set to arbitrary values.

 @return a <code>SampleModel</code> with arbitrary dimensions.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.SampleModel javax.imageio.ImageTypeSpecifier.getSampleModel(int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>SampleModel</code> based on the settings
 encapsulated within this object.  The width and height of the
 <code>SampleModel</code> will be set to the supplied values.

 @param width the desired width of the returned <code>SampleModel</code>.
 @param height the desired height of the returned
 <code>SampleModel</code>.

 @return a <code>SampleModel</code> with the given dimensions.

 @exception IllegalArgumentException if either <code>width</code> or
 <code>height</code> are negative or zero.
 @exception IllegalArgumentException if the product of
 <code>width</code> and <code>height</code> is greater than
 <code>Integer.MAX_VALUE</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.ColorModel javax.imageio.ImageTypeSpecifier.getColorModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>ColorModel</code> specified by this object.

 @return a <code>ColorModel</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.BufferedImage javax.imageio.ImageTypeSpecifier.createBufferedImage(int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>BufferedImage</code> with a given width and
 height according to the specification embodied in this object.

 @param width the desired width of the returned
 <code>BufferedImage</code>.
 @param height the desired height of the returned
 <code>BufferedImage</code>.

 @return a new <code>BufferedImage</code>

 @exception IllegalArgumentException if either <code>width</code> or
 <code>height</code> are negative or zero.
 @exception IllegalArgumentException if the product of
 <code>width</code> and <code>height</code> is greater than
 <code>Integer.MAX_VALUE</code>, or if the number of array
 elements needed to store the image is greater than
 <code>Integer.MAX_VALUE</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.ImageTypeSpecifier.equals(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <code>true</code> if the given <code>Object</code> is
 an <code>ImageTypeSpecifier</code> and has a
 <code>SampleModel</code> and <code>ColorModel</code> that are
 equal to those of this object.

 @param o the <code>Object</code> to be compared for equality.

 @return <code>true</code> if the given object is an equivalent
 <code>ImageTypeSpecifier</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.ImageTypeSpecifier.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the hash code for this ImageTypeSpecifier.

 @return a hash code for this ImageTypeSpecifier

<!-- END DATA -->
