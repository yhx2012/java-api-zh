<!-- BEGIN KEY -->
public class javax.imageio.stream.MemoryCacheImageInputStream extends javax.imageio.stream.ImageInputStreamImpl
<!-- END KEY -->
<!-- BEGIN DATA -->
 An implementation of <code>ImageInputStream</code> that gets its
 input from a regular <code>InputStream</code>.  A memory buffer is
 used to cache at least the data between the discard position and
 the current read position.

 <p> In general, it is preferable to use a
 <code>FileCacheImageInputStream</code> when reading from a regular
 <code>InputStream</code>.  This class is provided for cases where 
 it is not possible to create a writable temporary file.

 @version 0.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.imageio.stream.MemoryCacheImageInputStream(InputStream stream)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>MemoryCacheImageInputStream</code> that will read
 from a given <code>InputStream</code>.

 @param stream an <code>InputStream</code> to read from.

 @exception IllegalArgumentException if <code>stream</code> is
 <code>null</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.stream.MemoryCacheImageInputStream.isCached()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <code>true</code> since this
 <code>ImageInputStream</code> caches data in order to allow
 seeking backwards.

 @return <code>true</code>.

 @see #isCachedMemory
 @see #isCachedFile

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.stream.MemoryCacheImageInputStream.isCachedFile()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <code>false</code> since this
 <code>ImageInputStream</code> does not maintain a file cache.

 @return <code>false</code>.

 @see #isCached
 @see #isCachedMemory

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.stream.MemoryCacheImageInputStream.isCachedMemory()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <code>true</code> since this
 <code>ImageInputStream</code> maintains a main memory cache.

 @return <code>true</code>.

 @see #isCached
 @see #isCachedFile

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.MemoryCacheImageInputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Closes this <code>MemoryCacheImageInputStream</code>, freeing
 the cache.  The source <code>InputStream</code> is not closed.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.stream.MemoryCacheImageInputStream.finalize() throws java.lang.Throwable
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
