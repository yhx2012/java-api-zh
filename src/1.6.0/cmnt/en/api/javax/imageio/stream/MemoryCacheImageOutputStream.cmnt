<!-- BEGIN KEY -->
public class javax.imageio.stream.MemoryCacheImageOutputStream extends javax.imageio.stream.ImageOutputStreamImpl
<!-- END KEY -->
<!-- BEGIN DATA -->
 An implementation of <code>ImageOutputStream</code> that writes its
 output to a regular <code>OutputStream</code>.  A memory buffer is
 used to cache at least the data between the discard position and
 the current write position.  The only constructor takes an 
 <code>OutputStream</code>, so this class may not be used for 
 read/modify/write operations.  Reading can occur only on parts of 
 the stream that have already been written to the cache and not
 yet flushed.

 @version 0.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.imageio.stream.MemoryCacheImageOutputStream(OutputStream stream)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>MemoryCacheImageOutputStream</code> that will write
 to a given <code>OutputStream</code>.

 @param stream an <code>OutputStream</code> to write to.

 @exception IllegalArgumentException if <code>stream</code> is
 <code>null</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.stream.MemoryCacheImageOutputStream.isCached()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <code>true</code> since this
 <code>ImageOutputStream</code> caches data in order to allow
 seeking backwards.

 @return <code>true</code>.

 @see #isCachedMemory
 @see #isCachedFile

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.stream.MemoryCacheImageOutputStream.isCachedFile()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <code>false</code> since this
 <code>ImageOutputStream</code> does not maintain a file cache.

 @return <code>false</code>.

 @see #isCached
 @see #isCachedMemory

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.stream.MemoryCacheImageOutputStream.isCachedMemory()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <code>true</code> since this
 <code>ImageOutputStream</code> maintains a main memory cache.

 @return <code>true</code>.

 @see #isCached
 @see #isCachedFile

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.MemoryCacheImageOutputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Closes this <code>MemoryCacheImageOutputStream</code>.  All
 pending data is flushed to the output, and the cache
 is released.  The destination <code>OutputStream</code>
 is not closed.

<!-- END DATA -->
