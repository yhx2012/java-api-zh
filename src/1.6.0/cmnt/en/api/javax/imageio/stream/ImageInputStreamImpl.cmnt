<!-- BEGIN KEY -->
public abstract class javax.imageio.stream.ImageInputStreamImpl extends java.lang.Object implements javax.imageio.stream.ImageInputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
 An abstract class implementing the <code>ImageInputStream</code> interface.
 This class is designed to reduce the number of methods that must
 be implemented by subclasses.

 <p> In particular, this class handles most or all of the details of
 byte order interpretation, buffering, mark/reset, discarding,
 closing, and disposing.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.nio.ByteOrder javax.imageio.stream.ImageInputStreamImpl.byteOrder
<!-- END KEY -->
<!-- BEGIN DATA -->
 The byte order of the stream as an instance of the enumeration
 class <code>java.nio.ByteOrder</code>, where
 <code>ByteOrder.BIG_ENDIAN</code> indicates network byte order
 and <code>ByteOrder.LITTLE_ENDIAN</code> indicates the reverse
 order.  By default, the value is
 <code>ByteOrder.BIG_ENDIAN</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected long javax.imageio.stream.ImageInputStreamImpl.streamPos
<!-- END KEY -->
<!-- BEGIN DATA -->
 The current read position within the stream.  Subclasses are
 responsible for keeping this value current from any method they
 override that alters the read position.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.imageio.stream.ImageInputStreamImpl.bitOffset
<!-- END KEY -->
<!-- BEGIN DATA -->
 The current bit offset within the stream.  Subclasses are
 responsible for keeping this value current from any method they
 override that alters the bit offset.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected long javax.imageio.stream.ImageInputStreamImpl.flushedPos
<!-- END KEY -->
<!-- BEGIN DATA -->
 The position prior to which data may be discarded.  Seeking
 to a smaller position is not allowed.  <code>flushedPos</code>
 will always be >= 0.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.imageio.stream.ImageInputStreamImpl()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an <code>ImageInputStreamImpl</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void javax.imageio.stream.ImageInputStreamImpl.checkClosed() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Throws an <code>IOException</code> if the stream has been closed.
 Subclasses may call this method from any of their methods that
 require the stream not to be closed.

 @exception IOException if the stream is closed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.imageio.stream.ImageInputStreamImpl.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads a single byte from the stream and returns it as an
 <code>int</code> between 0 and 255.  If EOF is reached, 
 <code>-1</code> is returned.

 <p> Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

 <p> The bit offset within the stream must be reset to zero before
 the read occurs.

 @return the value of the next byte in the stream, or <code>-1</code>
 if EOF is reached.

 @exception IOException if the stream has been closed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.stream.ImageInputStreamImpl.read(byte[] b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 A convenience method that calls <code>read(b, 0, b.length)</code>.

 <p> The bit offset within the stream is reset to zero before
 the read occurs.

 @return the number of bytes actually read, or <code>-1</code>
 to indicate EOF.

 @exception NullPointerException if <code>b</code> is
 <code>null</code>.
 @exception IOException if an I/O error occurs.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.imageio.stream.ImageInputStreamImpl.read(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads up to <code>len</code> bytes from the stream, and stores
 them into <code>b</code> starting at index <code>off</code>.
 If no bytes can be read because the end of the stream has been
 reached, <code>-1</code> is returned.

 <p> The bit offset within the stream must be reset to zero before
 the read occurs.

 <p> Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting. 

 @param b an array of bytes to be written to.
 @param off the starting position within <code>b</code> to write to.
 @param len the maximum number of bytes to read.

 @return the number of bytes actually read, or <code>-1</code>
 to indicate EOF.

 @exception IndexOutOfBoundsException if <code>off</code> is
 negative, <code>len</code> is negative, or <code>off +
 len</code> is greater than <code>b.length</code>.
 @exception NullPointerException if <code>b</code> is
 <code>null</code>.
 @exception IOException if an I/O error occurs.

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.imageio.stream.ImageInputStreamImpl.length()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <code>-1L</code> to indicate that the stream has unknown
 length.  Subclasses must override this method to provide actual
 length information.

 @return -1L to indicate unknown length.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.imageio.stream.ImageInputStreamImpl.skipBytes(int n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Advances the current stream position by calling
 <code>seek(getStreamPosition() + n)</code>.

 <p> The bit offset is reset to zero.

 @param n the number of bytes to seek forward.

 @return an <code>int</code> representing the number of bytes
 skipped.

 @exception IOException if <code>getStreamPosition</code>
 throws an <code>IOException</code> when computing either
 the starting or ending position.

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.imageio.stream.ImageInputStreamImpl.skipBytes(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Advances the current stream position by calling
 <code>seek(getStreamPosition() + n)</code>.

 <p> The bit offset is reset to zero.

 @param n the number of bytes to seek forward.

 @return a <code>long</code> representing the number of bytes
 skipped.

 @exception IOException if <code>getStreamPosition</code>
 throws an <code>IOException</code> when computing either
 the starting or ending position.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.ImageInputStreamImpl.mark()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Pushes the current stream position onto a stack of marked
 positions.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.imageio.stream.ImageInputStreamImpl.reset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets the current stream byte and bit positions from the stack
 of marked positions.

 <p> An <code>IOException</code> will be thrown if the previous
 marked position lies in the discarded portion of the stream.

 @exception IOException if an I/O error occurs.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.stream.ImageInputStreamImpl.isCached()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Default implementation returns false.  Subclasses should
 override this if they cache data.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.stream.ImageInputStreamImpl.isCachedMemory()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Default implementation returns false.  Subclasses should
 override this if they cache data in main memory.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.imageio.stream.ImageInputStreamImpl.isCachedFile()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Default implementation returns false.  Subclasses should
 override this if they cache data in a temporary file.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.imageio.stream.ImageInputStreamImpl.finalize() throws java.lang.Throwable
<!-- END KEY -->
<!-- BEGIN DATA -->
 Finalizes this object prior to garbage collection.  The
 <code>close</code> method is called to close any open input
 source.  This method should not be called from application
 code.

 @exception Throwable if an error occurs during superclass
 finalization.

<!-- END DATA -->
