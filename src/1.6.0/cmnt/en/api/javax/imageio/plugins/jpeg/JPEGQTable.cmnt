<!-- BEGIN KEY -->
public class javax.imageio.plugins.jpeg.JPEGQTable extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 A class encapsulating a single JPEG quantization table.  The
 elements appear in natural order (as opposed to zig-zag order).
 Static variables are provided for the "standard" tables taken from
 Annex K of the JPEG spec, as well as the default tables
 conventionally used for visually lossless encoding.

 <p>
 For more information about the operation of the built-in JPEG plug-ins,
 see the <A HREF="../../metadata/doc-files/jpeg_metadata.html">JPEG
 metadata format specification and usage notes</A>.

 @version 0.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.imageio.plugins.jpeg.JPEGQTable javax.imageio.plugins.jpeg.JPEGQTable.K1Luminance
<!-- END KEY -->
<!-- BEGIN DATA -->

 The sample luminance quantization table given in the JPEG
 specification, table K.1.  According to the specification,
 these values produce "good" quality output.

 @see #K1Div2Luminance

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.imageio.plugins.jpeg.JPEGQTable javax.imageio.plugins.jpeg.JPEGQTable.K1Div2Luminance
<!-- END KEY -->
<!-- BEGIN DATA -->
 The sample luminance quantization table given in the JPEG
 specification, table K.1, with all elements divided by 2.
 According to the specification, these values produce "very
 good" quality output.  This is the table usually used for
 "visually lossless" encoding, and is the default luminance
 table used if the default tables and quality settings are used.

 @see #K1Luminance

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.imageio.plugins.jpeg.JPEGQTable javax.imageio.plugins.jpeg.JPEGQTable.K2Chrominance
<!-- END KEY -->
<!-- BEGIN DATA -->

 The sample chrominance quantization table given in the JPEG
 specification, table K.2.  According to the specification,
 these values produce "good" quality output.

 @see #K2Div2Chrominance

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.imageio.plugins.jpeg.JPEGQTable javax.imageio.plugins.jpeg.JPEGQTable.K2Div2Chrominance
<!-- END KEY -->
<!-- BEGIN DATA -->
 The sample chrominance quantization table given in the JPEG
 specification, table K.2, with all elements divided by 2.
 According to the specification, these values produce "very
 good" quality output.  This is the table usually used for
 "visually lossless" encoding, and is the default chrominance
 table used if the default tables and quality settings are used.

 @see #K2Chrominance

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.imageio.plugins.jpeg.JPEGQTable(int[] table)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Constructs a quantization table from the argument, which must
 contain 64 elements in natural order (not zig-zag order).
 A copy is made of the the input array.

 @param table the quantization table, as an <code>int</code>
 array.

 @exception IllegalArgumentException if <code>table</code> is
 <code>null</code> or <code>table.length</code> is not equal to
 64.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] javax.imageio.plugins.jpeg.JPEGQTable.getTable()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a copy of the current quantization table as an array of
 ints in natural (not zig-zag) order.

 @return A copy of the current quantization table.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.imageio.plugins.jpeg.JPEGQTable javax.imageio.plugins.jpeg.JPEGQTable.getScaledInstance(float scaleFactor, boolean forceBaseline)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a new quantization table where the values are
 multiplied by <code>scaleFactor</code> and then clamped to the
 range 1..32767 (or to 1..255 if <code>forceBaseline</code> is
 <code>true</code>).

 <p> Values of <code>scaleFactorless</code> than 1 tend to
 improve the quality level of the table, and values greater than
 <code>1.0</code> degrade the quality level of the table.

 @param scaleFactor the multiplicative factor for the table.
 @param forceBaseline if <code>true</code>, the values will be
 clamped to the range 1..255.

 @return a new quantization table that is a linear multiple of
 the current table.

<!-- END DATA -->
