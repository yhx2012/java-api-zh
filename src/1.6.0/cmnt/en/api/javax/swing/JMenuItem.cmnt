<!-- BEGIN KEY -->
public class javax.swing.JMenuItem extends javax.swing.AbstractButton implements javax.accessibility.Accessible, javax.swing.MenuElement
<!-- END KEY -->
<!-- BEGIN DATA -->
 An implementation of an item in a menu. A menu item is essentially a button
 sitting in a list. When the user selects the "button", the action
 associated with the menu item is performed. A <code>JMenuItem</code>
 contained in a <code>JPopupMenu</code> performs exactly that function.
 <p>
 Menu items can be configured, and to some degree controlled, by 
 <code><a href="Action.html">Action</a></code>s.  Using an
 <code>Action</code> with a menu item has many benefits beyond directly
 configuring a menu item.  Refer to <a href="Action.html#buttonActions">
 Swing Components Supporting <code>Action</code></a> for more
 details, and you can find more information in <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/misc/action.html">How
 to Use Actions</a>, a section in <em>The Java Tutorial</em>.
 <p>
 For further documentation and for examples, see
 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/components/menu.html">How to Use Menus</a>
 in <em>The Java Tutorial.</em>
 <p>
 <strong>Warning:</strong> Swing is not thread safe. For more
 information see <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @beaninfo
   attribute: isContainer false
 description: An item which can be selected in a menu.

 @version 1.128 08/08/06
 @author Georges Saab
 @author David Karlton
 @see JPopupMenu
 @see JMenu
 @see JCheckBoxMenuItem
 @see JRadioButtonMenuItem

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>JMenuItem</code> with no set text or icon.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem(Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>JMenuItem</code> with the specified icon.

 @param icon the icon of the <code>JMenuItem</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem(String text)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>JMenuItem</code> with the specified text.

 @param text the text of the <code>JMenuItem</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a menu item whose properties are taken from the 
 specified <code>Action</code>.

 @param a the action of the <code>JMenuItem</code>
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem(String text, Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>JMenuItem</code> with the specified text and icon.

 @param text the text of the <code>JMenuItem</code>
 @param icon the icon of the <code>JMenuItem</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem(String text, int mnemonic)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>JMenuItem</code> with the specified text and
 keyboard mnemonic.

 @param text the text of the <code>JMenuItem</code>
 @param mnemonic the keyboard mnemonic for the <code>JMenuItem</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.setModel(ButtonModel newModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuItem.init(String text, Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Initializes the menu item with the specified text and icon.

 @param text the text of the <code>JMenuItem</code>
 @param icon the icon of the <code>JMenuItem</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.setUI(MenuItemUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the look and feel object that renders this component.

 @param ui  the <code>JMenuItemUI</code> L&F object
 @see UIDefaults#getUI
 @beaninfo
        bound: true
       hidden: true
    attribute: visualUpdate true
  description: The UI object that implements the Component's LookAndFeel. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets the UI property with a value from the current look and feel.

 @see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JMenuItem.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the suffix used to construct the name of the L&F class used to
 render this component.

 @return the string "MenuItemUI"
 @see JComponent#getUIClassID
 @see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.setArmed(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Identifies the menu item as "armed". If the mouse button is
 released while it is over this item, the menu's action event
 will fire. If the mouse button is released elsewhere, the
 event will not fire and the menu item will be disarmed.
 
 @param b true to arm the menu item so it can be selected
 @beaninfo
    description: Mouse release will fire an action event
         hidden: true

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JMenuItem.isArmed()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether the menu item is "armed".
 
 @return true if the menu item is armed, and it can be selected
 @see #setArmed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.setEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Enables or disables the menu item.

 @param b  true to enable the item
 @beaninfo
    description: Does the component react to user interaction
          bound: true
      preferred: true

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.setAccelerator(KeyStroke keyStroke)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the key combination which invokes the menu item's
 action listeners without navigating the menu hierarchy. It is the
 UI's responsibility to install the correct action.  Note that 
 when the keyboard accelerator is typed, it will work whether or
 not the menu is currently displayed.

 @param keyStroke the <code>KeyStroke</code> which will
		serve as an accelerator 
 @beaninfo 
     description: The keystroke combination which will invoke the 
                  JMenuItem's actionlisteners without navigating the
			menu hierarchy 
           bound: true
       preferred: true

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.KeyStroke javax.swing.JMenuItem.getAccelerator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>KeyStroke</code> which serves as an accelerator 
 for the menu item.
 @return a <code>KeyStroke</code> object identifying the
		accelerator key

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuItem.configurePropertiesFromAction(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuItem.actionPropertyChanged(Action action, String propertyName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.processMouseEvent(MouseEvent e, javax.swing.MenuElement[] path, MenuSelectionManager manager)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Processes a mouse event forwarded from the
 <code>MenuSelectionManager</code> and changes the menu
 selection, if necessary, by using the
 <code>MenuSelectionManager</code>'s API.
 <p>
 Note: you do not have to forward the event to sub-components.
 This is done automatically by the <code>MenuSelectionManager</code>.

 @param e   a <code>MouseEvent</code>
 @param path  the <code>MenuElement</code> path array
 @param manager   the <code>MenuSelectionManager</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.processKeyEvent(KeyEvent e, javax.swing.MenuElement[] path, MenuSelectionManager manager)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Processes a key event forwarded from the 
 <code>MenuSelectionManager</code> and changes the menu selection,
 if necessary, by using <code>MenuSelectionManager</code>'s API.
 <p>
 Note: you do not have to forward the event to sub-components.
 This is done automatically by the <code>MenuSelectionManager</code>.

 @param e  a <code>KeyEvent</code>
 @param path the <code>MenuElement</code> path array
 @param manager   the <code>MenuSelectionManager</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.processMenuDragMouseEvent(MenuDragMouseEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Handles mouse drag in a menu.

 @param e  a <code>MenuDragMouseEvent</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.processMenuKeyEvent(MenuKeyEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Handles a keystroke in a menu.

 @param e  a <code>MenuKeyEvent</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuItem.fireMenuDragMouseEntered(MenuDragMouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type. 

 @param event a <code>MenuMouseDragEvent</code>
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuItem.fireMenuDragMouseExited(MenuDragMouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.  

 @param event a <code>MenuDragMouseEvent</code>
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuItem.fireMenuDragMouseDragged(MenuDragMouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.

 @param event a <code>MenuDragMouseEvent</code>
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuItem.fireMenuDragMouseReleased(MenuDragMouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type. 

 @param event a <code>MenuDragMouseEvent</code>
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuItem.fireMenuKeyPressed(MenuKeyEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type. 

 @param event a <code>MenuKeyEvent</code>
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuItem.fireMenuKeyReleased(MenuKeyEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type. 

 @param event a <code>MenuKeyEvent</code>
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuItem.fireMenuKeyTyped(MenuKeyEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type. 

 @param event a <code>MenuKeyEvent</code>
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.menuSelectionChanged(boolean isIncluded)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called by the <code>MenuSelectionManager</code> when the
 <code>MenuElement</code> is selected or unselected.
 
 @param isIncluded  true if this menu item is on the part of the menu
                    path that changed, false if this menu is part of the
                    a menu path that changed, but this particular part of
                    that path is still the same
 @see MenuSelectionManager#setSelectedPath(MenuElement[])

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.MenuElement[] javax.swing.JMenuItem.getSubElements()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns an array containing the sub-menu
 components for this menu component.

 @return an array of <code>MenuElement</code>s

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JMenuItem.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>java.awt.Component</code> used to paint
 this object. The returned component will be used to convert
 events and detect if an event is inside a menu component.

 @return the <code>Component</code> that paints this menu item

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.addMenuDragMouseListener(MenuDragMouseListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a <code>MenuDragMouseListener</code> to the menu item.

 @param l the <code>MenuDragMouseListener</code> to be added

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.removeMenuDragMouseListener(MenuDragMouseListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a <code>MenuDragMouseListener</code> from the menu item.

 @param l the <code>MenuDragMouseListener</code> to be removed

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.MenuDragMouseListener[] javax.swing.JMenuItem.getMenuDragMouseListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the <code>MenuDragMouseListener</code>s added
 to this JMenuItem with addMenuDragMouseListener().
 
 @return all of the <code>MenuDragMouseListener</code>s added or an empty
         array if no listeners have been added
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.addMenuKeyListener(MenuKeyListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a <code>MenuKeyListener</code> to the menu item.

 @param l the <code>MenuKeyListener</code> to be added

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuItem.removeMenuKeyListener(MenuKeyListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a <code>MenuKeyListener</code> from the menu item.

 @param l the <code>MenuKeyListener</code> to be removed

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.MenuKeyListener[] javax.swing.JMenuItem.getMenuKeyListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the <code>MenuKeyListener</code>s added
 to this JMenuItem with addMenuKeyListener().
 
 @return all of the <code>MenuKeyListener</code>s added or an empty
         array if no listeners have been added
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JMenuItem.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this <code>JMenuItem</code>.
 This method is intended to be used only for debugging purposes,
 and the content and format of the returned string may vary between      
 implementations. The returned string may be empty but may not 
 be <code>null</code>.
 
 @return  a string representation of this <code>JMenuItem</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JMenuItem.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>AccessibleContext</code> associated with this 
 <code>JMenuItem</code>. For <code>JMenuItem</code>s,
 the <code>AccessibleContext</code> takes the form of an 
 <code>AccessibleJMenuItem</code>. 
 A new AccessibleJMenuItme instance is created if necessary.

 @return an <code>AccessibleJMenuItem</code> that serves as the 
         <code>AccessibleContext</code> of this <code>JMenuItem</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JMenuItem.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 See JComponent.readObject() for information about serialization
 in Swing.

<!-- END DATA -->
