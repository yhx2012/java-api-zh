<!-- BEGIN KEY -->
public class javax.swing.colorchooser.DefaultColorSelectionModel extends java.lang.Object implements javax.swing.colorchooser.ColorSelectionModel, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A generic implementation of <code>ColorSelectionModel</code>.

 @version 1.16 11/17/05
 @author Steve Wilson

 @see java.awt.Color

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.event.ChangeEvent javax.swing.colorchooser.DefaultColorSelectionModel.changeEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
 Only one <code>ChangeEvent</code> is needed per model instance
 since the event's only (read-only) state is the source property.
 The source of events generated here is always "this".

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.colorchooser.DefaultColorSelectionModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>DefaultColorSelectionModel</code> with the
 current color set to <code>Color.white</code>.  This is
 the default constructor.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.colorchooser.DefaultColorSelectionModel(Color color)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>DefaultColorSelectionModel</code> with the
 current color set to <code>color</code>, which should be
 non-<code>null</code>.  Note that setting the color to
 <code>null</code> is undefined and may have unpredictable
 results.

 @param color the new <code>Color</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.colorchooser.DefaultColorSelectionModel.getSelectedColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the selected <code>Color</code> which should be
 non-<code>null</code>.

 @return the selected <code>Color</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.colorchooser.DefaultColorSelectionModel.setSelectedColor(Color color)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the selected color to <code>color</code>.
 Note that setting the color to <code>null</code> 
 is undefined and may have unpredictable results.
 This method fires a state changed event if it sets the
 current color to a new non-<code>null</code> color;
 if the new color is the same as the current color,
 no event is fired.

 @param color the new <code>Color</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.colorchooser.DefaultColorSelectionModel.addChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a <code>ChangeListener</code> to the model.

 @param l the <code>ChangeListener</code> to be added

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.colorchooser.DefaultColorSelectionModel.removeChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a <code>ChangeListener</code> from the model.
 @param l the <code>ChangeListener</code> to be removed

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.ChangeListener[] javax.swing.colorchooser.DefaultColorSelectionModel.getChangeListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the <code>ChangeListener</code>s added
 to this <code>DefaultColorSelectionModel</code> with
 <code>addChangeListener</code>.

 @return all of the <code>ChangeListener</code>s added, or an empty
         array if no listeners have been added
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.colorchooser.DefaultColorSelectionModel.fireStateChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Runs each <code>ChangeListener</code>'s
 <code>stateChanged</code> method.

 <!-- @see #setRangeProperties    //bad link-->
 @see EventListenerList

<!-- END DATA -->
