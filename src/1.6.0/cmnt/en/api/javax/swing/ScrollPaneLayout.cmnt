<!-- BEGIN KEY -->
public class javax.swing.ScrollPaneLayout extends java.lang.Object implements java.awt.LayoutManager, javax.swing.ScrollPaneConstants, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 The layout manager used by <code>JScrollPane</code>.  
 <code>JScrollPaneLayout</code> is
 responsible for nine components: a viewport, two scrollbars,
 a row header, a column header, and four "corner" components.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @see JScrollPane
 @see JViewport

 @version 1.63 11/17/05
 @author Hans Muller

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JViewport javax.swing.ScrollPaneLayout.viewport
<!-- END KEY -->
<!-- BEGIN DATA -->

 The scrollpane's viewport child.  
 Default is an empty <code>JViewport</code>.
 @see JScrollPane#setViewport

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JScrollBar javax.swing.ScrollPaneLayout.vsb
<!-- END KEY -->
<!-- BEGIN DATA -->
 The scrollpane's vertical scrollbar child.  
 Default is a <code>JScrollBar</code>.
 @see JScrollPane#setVerticalScrollBar

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JScrollBar javax.swing.ScrollPaneLayout.hsb
<!-- END KEY -->
<!-- BEGIN DATA -->
 The scrollpane's horizontal scrollbar child.  
 Default is a <code>JScrollBar</code>.
 @see JScrollPane#setHorizontalScrollBar

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JViewport javax.swing.ScrollPaneLayout.rowHead
<!-- END KEY -->
<!-- BEGIN DATA -->

 The row header child.  Default is <code>null</code>.
 @see JScrollPane#setRowHeader

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JViewport javax.swing.ScrollPaneLayout.colHead
<!-- END KEY -->
<!-- BEGIN DATA -->

 The column header child.  Default is <code>null</code>.
 @see JScrollPane#setColumnHeader

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.ScrollPaneLayout.lowerLeft
<!-- END KEY -->
<!-- BEGIN DATA -->
 The component to display in the lower left corner. 
 Default is <code>null</code>.
 @see JScrollPane#setCorner

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.ScrollPaneLayout.lowerRight
<!-- END KEY -->
<!-- BEGIN DATA -->
 The component to display in the lower right corner. 
 Default is <code>null</code>.
 @see JScrollPane#setCorner

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.ScrollPaneLayout.upperLeft
<!-- END KEY -->
<!-- BEGIN DATA -->
 The component to display in the upper left corner. 
 Default is <code>null</code>.
 @see JScrollPane#setCorner

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.ScrollPaneLayout.upperRight
<!-- END KEY -->
<!-- BEGIN DATA -->
 The component to display in the upper right corner. 
 Default is <code>null</code>.
 @see JScrollPane#setCorner

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.ScrollPaneLayout.vsbPolicy
<!-- END KEY -->
<!-- BEGIN DATA -->

 The display policy for the vertical scrollbar.
 The default is <code>ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED</code>.  
 <p>
 This field is obsolete, please use the <code>JScrollPane</code> field instead.
 
 @see JScrollPane#setVerticalScrollBarPolicy

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.ScrollPaneLayout.hsbPolicy
<!-- END KEY -->
<!-- BEGIN DATA -->
 The display policy for the horizontal scrollbar.
 The default is <code>ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED</code>.
 <p>
 This field is obsolete, please use the <code>JScrollPane</code> field instead.
 
 @see JScrollPane#setHorizontalScrollBarPolicy

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ScrollPaneLayout.syncWithScrollPane(JScrollPane sp)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method is invoked after the ScrollPaneLayout is set as the
 LayoutManager of a <code>JScrollPane</code>.
 It initializes all of the internal fields that
 are ordinarily set by <code>addLayoutComponent</code>.  For example:
 <pre>
 ScrollPaneLayout mySPLayout = new ScrollPanelLayout() {
     public void layoutContainer(Container p) {
         super.layoutContainer(p);
         // do some extra work here ...
     }
 };
 scrollpane.setLayout(mySPLayout):
 </pre>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.ScrollPaneLayout.addSingletonComponent(Component oldC, Component newC)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Removes an existing component.  When a new component, such as
 the left corner, or vertical scrollbar, is added, the old one,
 if it exists, must be removed.
 <p>
 This method returns <code>newC</code>. If <code>oldC</code> is
 not equal to <code>newC</code> and is non-<code>null</code>,
 it will be removed from its parent.
 
 @param oldC the <code>Component</code> to replace
 @param newC the <code>Component</code> to add
 @return the <code>newC</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ScrollPaneLayout.addLayoutComponent(String s, Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified component to the layout. The layout is
 identified using one of:
 <ul>
 <li>ScrollPaneConstants.VIEWPORT
 <li>ScrollPaneConstants.VERTICAL_SCROLLBAR
 <li>ScrollPaneConstants.HORIZONTAL_SCROLLBAR
 <li>ScrollPaneConstants.ROW_HEADER
 <li>ScrollPaneConstants.COLUMN_HEADER
 <li>ScrollPaneConstants.LOWER_LEFT_CORNER
 <li>ScrollPaneConstants.LOWER_RIGHT_CORNER
 <li>ScrollPaneConstants.UPPER_LEFT_CORNER
 <li>ScrollPaneConstants.UPPER_RIGHT_CORNER
 </ul>

 @param s the component identifier
 @param c the the component to be added
 @exception IllegalArgumentException if <code>s</code> is an invalid key

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ScrollPaneLayout.removeLayoutComponent(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified component from the layout.
   
 @param c the component to remove

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ScrollPaneLayout.getVerticalScrollBarPolicy()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the vertical scrollbar-display policy.

 @return an integer giving the display policy
 @see #setVerticalScrollBarPolicy

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ScrollPaneLayout.setVerticalScrollBarPolicy(int x)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the vertical scrollbar-display policy. The options
 are:
 <ul>
 <li>ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED
 <li>ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER
 <li>ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS
 </ul>
 Note: Applications should use the <code>JScrollPane</code> version
 of this method.  It only exists for backwards compatibility
 with the Swing 1.0.2 (and earlier) versions of this class.

 @param x an integer giving the display policy
 @exception IllegalArgumentException if <code>x</code> is an invalid
		vertical scroll bar policy, as listed above

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ScrollPaneLayout.getHorizontalScrollBarPolicy()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the horizontal scrollbar-display policy.

 @return an integer giving the display policy
 @see #setHorizontalScrollBarPolicy

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ScrollPaneLayout.setHorizontalScrollBarPolicy(int x)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the horizontal scrollbar-display policy.
 The options are:<ul>
 <li>ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED
 <li>ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER
 <li>ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS
 </ul>
 Note: Applications should use the <code>JScrollPane</code> version
 of this method.  It only exists for backwards compatibility
 with the Swing 1.0.2 (and earlier) versions of this class.

 @param x an int giving the display policy
 @exception IllegalArgumentException if <code>x</code> is not a valid
		horizontal scrollbar policy, as listed above

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JViewport javax.swing.ScrollPaneLayout.getViewport()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>JViewport</code> object that displays the
 scrollable contents.
 @return the <code>JViewport</code> object that displays the scrollable contents
 @see JScrollPane#getViewport

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JScrollBar javax.swing.ScrollPaneLayout.getHorizontalScrollBar()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>JScrollBar</code> object that handles horizontal scrolling.
 @return the <code>JScrollBar</code> object that handles horizontal scrolling
 @see JScrollPane#getHorizontalScrollBar

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JScrollBar javax.swing.ScrollPaneLayout.getVerticalScrollBar()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>JScrollBar</code> object that handles vertical scrolling.
 @return the <code>JScrollBar</code> object that handles vertical scrolling
 @see JScrollPane#getVerticalScrollBar

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JViewport javax.swing.ScrollPaneLayout.getRowHeader()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>JViewport</code> object that is the row header.
 @return the <code>JViewport</code> object that is the row header
 @see JScrollPane#getRowHeader

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JViewport javax.swing.ScrollPaneLayout.getColumnHeader()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>JViewport</code> object that is the column header.
 @return the <code>JViewport</code> object that is the column header
 @see JScrollPane#getColumnHeader

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.ScrollPaneLayout.getCorner(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>Component</code> at the specified corner.
 @param key the <code>String</code> specifying the corner
 @return the <code>Component</code> at the specified corner, as defined in
         {@link ScrollPaneConstants}; if <code>key</code> is not one of the
		four corners, <code>null</code> is returned
 @see JScrollPane#getCorner

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.ScrollPaneLayout.preferredLayoutSize(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->

 The preferred size of a <code>ScrollPane</code> is the size of the insets,
 plus the preferred size of the viewport, plus the preferred size of 
 the visible headers, plus the preferred size of the scrollbars
 that will appear given the current view and the current
 scrollbar displayPolicies.  
 <p>Note that the rowHeader is calculated as part of the preferred width
 and the colHeader is calculated as part of the preferred size.
 
 @param parent the <code>Container</code> that will be laid out
 @return a <code>Dimension</code> object specifying the preferred size of the 
         viewport and any scrollbars
 @see ViewportLayout
 @see LayoutManager

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.ScrollPaneLayout.minimumLayoutSize(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->

 The minimum size of a <code>ScrollPane</code> is the size of the insets 
 plus minimum size of the viewport, plus the scrollpane's
 viewportBorder insets, plus the minimum size 
 of the visible headers, plus the minimum size of the 
 scrollbars whose displayPolicy isn't NEVER.
 
 @param parent the <code>Container</code> that will be laid out
 @return a <code>Dimension</code> object specifying the minimum size

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ScrollPaneLayout.layoutContainer(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Lays out the scrollpane. The positioning of components depends on
 the following constraints:
 <ul>
 <li> The row header, if present and visible, gets its preferred
 width and the viewport's height.
 
 <li> The column header, if present and visible, gets its preferred
 height and the viewport's width.
 
 <li> If a vertical scrollbar is needed, i.e. if the viewport's extent
 height is smaller than its view height or if the <code>displayPolicy</code>
 is ALWAYS, it's treated like the row header with respect to its
 dimensions and is made visible.
 
 <li> If a horizontal scrollbar is needed, it is treated like the
 column header (see the paragraph above regarding the vertical scrollbar).
 
 <li> If the scrollpane has a non-<code>null</code>
 <code>viewportBorder</code>, then space is allocated for that.
 
 <li> The viewport gets the space available after accounting for
 the previous constraints.
 
 <li> The corner components, if provided, are aligned with the 
 ends of the scrollbars and headers. If there is a vertical
 scrollbar, the right corners appear; if there is a horizontal
 scrollbar, the lower corners appear; a row header gets left
 corners, and a column header gets upper corners.
 </ul>

 @param parent the <code>Container</code> to lay out

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.ScrollPaneLayout.getViewportBorderBounds(JScrollPane scrollpane)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the bounds of the border around the specified scroll pane's 
 viewport.

 @return the size and position of the viewport border
 @deprecated As of JDK version Swing1.1
    replaced by <code>JScrollPane.getViewportBorderBounds()</code>.

<!-- END DATA -->
