<!-- BEGIN KEY -->
public class javax.swing.DebugGraphics extends java.awt.Graphics
<!-- END KEY -->
<!-- BEGIN DATA -->
 Graphics subclass supporting graphics debugging. Overrides most methods
 from Graphics.  DebugGraphics objects are rarely created by hand.  They
 are most frequently created automatically when a JComponent's
 debugGraphicsOptions are changed using the setDebugGraphicsOptions()
 method.
 <p>
 NOTE: You must turn off double buffering to use DebugGraphics:
       RepaintManager repaintManager = RepaintManager.currentManager(component);
       repaintManager.setDoubleBufferingEnabled(false);

 @see JComponent#setDebugGraphicsOptions
 @see RepaintManager#currentManager
 @see RepaintManager#setDoubleBufferingEnabled

 @version 1.27 11/17/05
 @author Dave Karlton

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.DebugGraphics.LOG_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
Log graphics operations. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.DebugGraphics.FLASH_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
Flash graphics operations. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.DebugGraphics.BUFFERED_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
Show buffered operations in a separate <code>Frame</code>. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.DebugGraphics.NONE_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
Don't debug graphics operations. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.DebugGraphics()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new debug graphics context that supports slowed
 down drawing.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.DebugGraphics(Graphics graphics, JComponent component)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a debug graphics context from an existing graphics
 context that slows down drawing for the specified component.

 @param graphics  the Graphics context to slow down
 @param component the JComponent to draw slowly

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.DebugGraphics(Graphics graphics)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a debug graphics context from an existing graphics
 context that supports slowed down drawing.

 @param graphics  the Graphics context to slow down

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Graphics javax.swing.DebugGraphics.create()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.create</code> to return a DebugGraphics object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Graphics javax.swing.DebugGraphics.create(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.create</code> to return a DebugGraphics object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.DebugGraphics.setFlashColor(Color flashColor)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Sets the Color used to flash drawing operations.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Color javax.swing.DebugGraphics.flashColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the Color used to flash drawing operations.
 @see #setFlashColor

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.DebugGraphics.setFlashTime(int flashTime)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the time delay of drawing operation flashing.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.swing.DebugGraphics.flashTime()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the time delay of drawing operation flashing.
 @see #setFlashTime

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.DebugGraphics.setFlashCount(int flashCount)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the number of times that drawing operations will flash.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.swing.DebugGraphics.flashCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
Returns the number of times that drawing operations will flash.
 @see #setFlashCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.DebugGraphics.setLogStream(PrintStream stream)
<!-- END KEY -->
<!-- BEGIN DATA -->
Sets the stream to which the DebugGraphics logs drawing operations.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.io.PrintStream javax.swing.DebugGraphics.logStream()
<!-- END KEY -->
<!-- BEGIN DATA -->
Returns the stream to which the DebugGraphics logs drawing operations.
 @see #setLogStream

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.setFont(Font aFont)
<!-- END KEY -->
<!-- BEGIN DATA -->
Sets the Font used for text drawing operations.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font javax.swing.DebugGraphics.getFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
Returns the Font used for text drawing operations.
 @see #setFont

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.setColor(Color aColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
Sets the color to be used for drawing and filling lines and shapes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.DebugGraphics.getColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
Returns the Color used for text drawing operations.
 @see #setColor

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FontMetrics javax.swing.DebugGraphics.getFontMetrics()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.getFontMetrics</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FontMetrics javax.swing.DebugGraphics.getFontMetrics(Font f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.getFontMetrics</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.translate(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.translate</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.setPaintMode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.setPaintMode</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.setXORMode(Color aColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.setXORMode</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.DebugGraphics.getClipBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.getClipBounds</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.clipRect(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.clipRect</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.setClip(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.setClip</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Shape javax.swing.DebugGraphics.getClip()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.getClip</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.setClip(Shape clip)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.setClip</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawRect(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.drawRect</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.fillRect(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.fillRect</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.clearRect(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.clearRect</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.drawRoundRect</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.fillRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.fillRoundRect</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawLine(int x1, int y1, int x2, int y2)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.drawLine</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.draw3DRect(int x, int y, int width, int height, boolean raised)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.draw3DRect</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.fill3DRect(int x, int y, int width, int height, boolean raised)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.fill3DRect</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawOval(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.drawOval</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.fillOval(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.fillOval</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawArc(int x, int y, int width, int height, int startAngle, int arcAngle)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.drawArc</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.fillArc(int x, int y, int width, int height, int startAngle, int arcAngle)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.fillArc</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawPolyline(int[] xPoints, int[] yPoints, int nPoints)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.drawPolyline</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawPolygon(int[] xPoints, int[] yPoints, int nPoints)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.drawPolygon</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.fillPolygon(int[] xPoints, int[] yPoints, int nPoints)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.fillPolygon</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawString(String aString, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.drawString</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawString(AttributedCharacterIterator iterator, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.drawString</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawBytes(byte[] data, int offset, int length, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.drawBytes</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.drawChars(char[] data, int offset, int length, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.drawChars</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DebugGraphics.drawImage(Image img, int x, int y, ImageObserver observer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.drawImage</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DebugGraphics.drawImage(Image img, int x, int y, int width, int height, ImageObserver observer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.drawImage</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DebugGraphics.drawImage(Image img, int x, int y, Color bgcolor, ImageObserver observer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.drawImage</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DebugGraphics.drawImage(Image img, int x, int y, int width, int height, Color bgcolor, ImageObserver observer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.drawImage</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DebugGraphics.drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2, int sy2, ImageObserver observer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.drawImage</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DebugGraphics.drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2, int sy2, Color bgcolor, ImageObserver observer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.drawImage</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.copyArea(int x, int y, int width, int height, int destX, int destY)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.copyArea</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.dispose()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>Graphics.dispose</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DebugGraphics.isDrawingBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the drawingBuffer value.

 @return true if this object is drawing from a Buffer

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DebugGraphics.setDebugOptions(int options)
<!-- END KEY -->
<!-- BEGIN DATA -->
Enables/disables diagnostic information about every graphics
 operation. The value of <b>options</b> indicates how this information
 should be displayed. LOG_OPTION causes a text message to be printed.
 FLASH_OPTION causes the drawing to flash several times. BUFFERED_OPTION
 creates a new Frame that shows each operation on an
 offscreen buffer. The value of <b>options</b> is bitwise OR'd into
 the current value. To disable debugging use NONE_OPTION.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DebugGraphics.getDebugOptions()
<!-- END KEY -->
<!-- BEGIN DATA -->
Returns the current debugging options for this DebugGraphics.
 @see #setDebugOptions

<!-- END DATA -->
