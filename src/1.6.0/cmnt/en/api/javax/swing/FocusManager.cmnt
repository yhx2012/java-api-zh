<!-- BEGIN KEY -->
public abstract class javax.swing.FocusManager extends java.awt.DefaultKeyboardFocusManager
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class has been obsoleted by the 1.4 focus APIs. While client code may
 still use this class, developers are strongly encouraged to use
 <code>java.awt.KeyboardFocusManager</code> and
 <code>java.awt.DefaultKeyboardFocusManager</code> instead.
 <p>
 Please see
 <a href="http://java.sun.com/docs/books/tutorial/uiswing/misc/focus.html">
 How to Use the Focus Subsystem</a>,
 a section in <em>The Java Tutorial</em>, and the
 <a href="../../java/awt/doc-files/FocusSpec.html">Focus Specification</a>
 for more information.

 @see <a href="../../java/awt/doc-files/FocusSpec.html">Focus Specification</a>

 @version 1.29, 11/17/05
 @author Arnaud Weber
 @author David Mendenhall

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.FocusManager.FOCUS_MANAGER_CLASS_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
 This field is obsolete, and its use is discouraged since its
 specification is incompatible with the 1.4 focus APIs.
 The current FocusManager is no longer a property of the UI.
 Client code must query for the current FocusManager using
 <code>KeyboardFocusManager.getCurrentKeyboardFocusManager()</code>.
 See the Focus Specification for more information.

 @see java.awt.KeyboardFocusManager#getCurrentKeyboardFocusManager
 @see <a href="../../java/awt/doc-files/FocusSpec.html">Focus Specification</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.FocusManager javax.swing.FocusManager.getCurrentManager()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current <code>KeyboardFocusManager</code> instance
 for the calling thread's context.

 @return this thread's context's <code>KeyboardFocusManager</code>
 @see #setCurrentManager

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.FocusManager.setCurrentManager(FocusManager aFocusManager) throws java.lang.SecurityException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the current <code>KeyboardFocusManager</code> instance
 for the calling thread's context. If <code>null</code> is
 specified, then the current <code>KeyboardFocusManager</code>
 is replaced with a new instance of
 <code>DefaultKeyboardFocusManager</code>.
 <p>
 If a <code>SecurityManager</code> is installed,
 the calling thread must be granted the <code>AWTPermission</code>
 "replaceKeyboardFocusManager" in order to replace the
 the current <code>KeyboardFocusManager</code>.
 If this permission is not granted,
 this method will throw a <code>SecurityException</code>,
 and the current <code>KeyboardFocusManager</code> will be unchanged.

 @param aFocusManager the new <code>KeyboardFocusManager</code>
     for this thread's context
 @see #getCurrentManager
 @see java.awt.DefaultKeyboardFocusManager
 @throws SecurityException if the calling thread does not have permission
         to replace the current <code>KeyboardFocusManager</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.FocusManager.disableSwingFocusManager()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Changes the current <code>KeyboardFocusManager</code>'s default
 <code>FocusTraversalPolicy</code> to
 <code>DefaultFocusTraversalPolicy</code>.

 @see java.awt.DefaultFocusTraversalPolicy
 @see java.awt.KeyboardFocusManager#setDefaultFocusTraversalPolicy
 @deprecated as of 1.4, replaced by 
 <code>KeyboardFocusManager.setDefaultFocusTraversalPolicy(FocusTraversalPolicy)</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.FocusManager.isFocusManagerEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether the application has invoked
 <code>disableSwingFocusManager()</code>.

 @see #disableSwingFocusManager
 @deprecated As of 1.4, replaced by
   <code>KeyboardFocusManager.getDefaultFocusTraversalPolicy()</code>

<!-- END DATA -->
