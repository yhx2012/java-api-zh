<!-- BEGIN KEY -->
public class javax.swing.JTextPane extends javax.swing.JEditorPane
<!-- END KEY -->
<!-- BEGIN DATA -->
 A text component that can be marked up with attributes that are
 represented graphically. 
 You can find how-to information and examples of using text panes in
 <a href="http://java.sun.com/docs/books/tutorial/uiswing/components/text.html">Using Text Components</a>,
 a section in <em>The Java Tutorial.</em>

 <p>
 This component models paragraphs
 that are composed of runs of character level attributes.  Each
 paragraph may have a logical style attached to it which contains
 the default attributes to use if not overridden by attributes set
 on the paragraph or character run.  Components and images may
 be embedded in the flow of text.
 <p>
 <dl>
 <dt><b><font size=+1>Newlines</font></b>
 <dd>
 For a discussion on how newlines are handled, see
 <a href="text/DefaultEditorKit.html">DefaultEditorKit</a>.
 </dl>

 <p>
 <strong>Warning:</strong> Swing is not thread safe. For more
 information see <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @beaninfo
   attribute: isContainer true
 description: A text component that can be marked up with attributes that are graphically represented.

 @author  Timothy Prinzing
 @version 1.95 08/08/06
 @see javax.swing.text.StyledEditorKit

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JTextPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <code>JTextPane</code>.  A new instance of
 <code>StyledEditorKit</code> is
 created and set, and the document model set to <code>null</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JTextPane(StyledDocument doc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <code>JTextPane</code>, with a specified document model.
 A new instance of <code>javax.swing.text.StyledEditorKit</code>
  is created and set.

 @param doc the document model

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JTextPane.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the class ID for the UI.

 @return the string "TextPaneUI"

 @see JComponent#getUIClassID
 @see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTextPane.setDocument(Document doc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Associates the editor with a text document.  This
 must be a <code>StyledDocument</code>.

 @param doc  the document to display/edit
 @exception IllegalArgumentException  if <code>doc</code> can't
   be narrowed to a <code>StyledDocument</code> which is the
   required type of model for this text component

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTextPane.setStyledDocument(StyledDocument doc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Associates the editor with a text document.
 The currently registered factory is used to build a view for
 the document, which gets displayed by the editor.

 @param doc  the document to display/edit

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.StyledDocument javax.swing.JTextPane.getStyledDocument()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the model associated with the editor.  

 @return the model

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTextPane.replaceSelection(String content)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Replaces the currently selected content with new content
 represented by the given string.  If there is no selection
 this amounts to an insert of the given text.  If there
 is no replacement text this amounts to a removal of the
 current selection.  The replacement text will have the
 attributes currently defined for input at the point of
 insertion.  If the document is not editable, beep and return.
 <p>
 This method is thread safe, although most Swing methods
 are not. Please see 
 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A> for more information.     

 @param content  the content to replace the selection with

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTextPane.insertComponent(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts a component into the document as a replacement
 for the currently selected content.  If there is no
 selection the component is effectively inserted at the 
 current position of the caret.  This is represented in
 the associated document as an attribute of one character 
 of content.
 <p>
 The component given is the actual component used by the
 JTextPane.  Since components cannot be a child of more than
 one container, this method should not be used in situations
 where the model is shared by text components.
 <p>
 The component is placed relative to the text baseline 
 according to the value returned by 
 <code>Component.getAlignmentY</code>.  For Swing components
 this value can be conveniently set using the method
 <code>JComponent.setAlignmentY</code>.  For example, setting
 a value of <code>0.75</code> will cause 75 percent of the 
 component to be above the baseline, and 25 percent of the
 component to be below the baseline.
 <p>
 This method is thread safe, although most Swing methods
 are not. Please see 
 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A> for more information.     

 @param c    the component to insert

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTextPane.insertIcon(Icon g)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts an icon into the document as a replacement
 for the currently selected content.  If there is no
 selection the icon is effectively inserted at the 
 current position of the caret.  This is represented in
 the associated document as an attribute of one character 
 of content.  
 <p>
 This method is thread safe, although most Swing methods
 are not. Please see 
 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A> for more information.     

 @param g    the icon to insert
 @see Icon

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Style javax.swing.JTextPane.addStyle(String nm, Style parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a new style into the logical style hierarchy.  Style attributes
 resolve from bottom up so an attribute specified in a child
 will override an attribute specified in the parent.

 @param nm   the name of the style (must be unique within the
   collection of named styles).  The name may be <code>null</code>
   if the style is unnamed, but the caller is responsible
   for managing the reference returned as an unnamed style can't
   be fetched by name.  An unnamed style may be useful for things
   like character attribute overrides such as found in a style 
   run.
 @param parent the parent style.  This may be <code>null</code>
   if unspecified
   attributes need not be resolved in some other style.
 @return the new <code>Style</code> 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTextPane.removeStyle(String nm)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a named non-<code>null</code> style previously added to
 the document.  

 @param nm  the name of the style to remove

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Style javax.swing.JTextPane.getStyle(String nm)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches a named non-<code>null</code> style previously added.

 @param nm  the name of the style
 @return the <code>Style</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTextPane.setLogicalStyle(Style s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the logical style to use for the paragraph at the
 current caret position.  If attributes aren't explicitly set 
 for character and paragraph attributes they will resolve 
 through the logical style assigned to the paragraph, which
 in term may resolve through some hierarchy completely 
 independent of the element hierarchy in the document.
 <p>
 This method is thread safe, although most Swing methods
 are not. Please see 
 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A> for more information.     

 @param s  the logical style to assign to the paragraph,
		or <code>null</code> for no style

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Style javax.swing.JTextPane.getLogicalStyle()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Fetches the logical style assigned to the paragraph represented
 by the current position of the caret, or <code>null</code>.

 @return the <code>Style</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.JTextPane.getCharacterAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the character attributes in effect at the 
 current location of the caret, or <code>null</code>.  

 @return the attributes, or <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTextPane.setCharacterAttributes(AttributeSet attr, boolean replace)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Applies the given attributes to character 
 content.  If there is a selection, the attributes
 are applied to the selection range.  If there
 is no selection, the attributes are applied to
 the input attribute set which defines the attributes
 for any new text that gets inserted.
 <p>
 This method is thread safe, although most Swing methods
 are not. Please see 
 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A> for more information.     

 @param attr the attributes
 @param replace if true, then replace the existing attributes first

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.JTextPane.getParagraphAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the current paragraph attributes in effect
 at the location of the caret, or <code>null</code> if none.

 @return the attributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTextPane.setParagraphAttributes(AttributeSet attr, boolean replace)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Applies the given attributes to paragraphs.  If
 there is a selection, the attributes are applied
 to the paragraphs that intersect the selection.
 If there is no selection, the attributes are applied
 to the paragraph at the current caret position.
 <p>
 This method is thread safe, although most Swing methods
 are not. Please see 
 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A> for more information.     

 @param attr the non-<code>null</code> attributes
 @param replace if true, replace the existing attributes first

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.MutableAttributeSet javax.swing.JTextPane.getInputAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the input attributes for the pane.

 @return the attributes

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final javax.swing.text.StyledEditorKit javax.swing.JTextPane.getStyledEditorKit()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the editor kit.

 @return the editor kit

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.EditorKit javax.swing.JTextPane.createDefaultEditorKit()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the <code>EditorKit</code> to use by default.  This
 is implemented to return <code>javax.swing.text.StyledEditorKit</code>.

 @return the editor kit

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.swing.JTextPane.setEditorKit(EditorKit kit)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the currently installed kit for handling
 content.  This is the bound property that
 establishes the content type of the editor.
 
 @param kit the desired editor behavior
 @exception IllegalArgumentException if kit is not a
		<code>StyledEditorKit</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JTextPane.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this <code>JTextPane</code>.
 This method 
 is intended to be used only for debugging purposes, and the 
 content and format of the returned string may vary between      
 implementations. The returned string may be empty but may not 
 be <code>null</code>.
 
 @return  a string representation of this <code>JTextPane</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JTextPane.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 See <code>readObject</code> and <code>writeObject</code> in
 <code>JComponent</code> for more 
 information about serialization in Swing.

 @param s the output stream

<!-- END DATA -->
