<!-- BEGIN KEY -->
public class javax.swing.BorderFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 Factory class for vending standard <code>Border</code> objects.  Wherever
 possible, this factory will hand out references to shared
 <code>Border</code> instances.
 For further information and examples see
 <a href="http://java.sun.com/docs/books/tutorial/uiswing/misc/border.html">How
 to Use Borders</a>,
 a section in <em>The Java Tutorial</em>.

 @version 1.35 11/17/05
 @author David Kloba

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createLineBorder(Color color)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a line border withe the specified color.

 @param color  a <code>Color</code> to use for the line
 @return the <code>Border</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createLineBorder(Color color, int thickness)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a line border with the specified color
 and width. The width applies to all four sides of the
 border. To specify widths individually for the top,
 bottom, left, and right, use 
 {@link #createMatteBorder(int,int,int,int,Color)}.

 @param color  a <code>Color</code> to use for the line
 @param thickness  an integer specifying the width in pixels
 @return the <code>Border</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createRaisedBevelBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a border with a raised beveled edge, using
 brighter shades of the component's current background color
 for highlighting, and darker shading for shadows.
 (In a raised border, highlights are on top and shadows
  are underneath.)

 @return the <code>Border</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createLoweredBevelBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a border with a lowered beveled edge, using
 brighter shades of the component's current background color
 for highlighting, and darker shading for shadows.
 (In a lowered border, shadows are on top and highlights
  are underneath.)

 @return the <code>Border</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createBevelBorder(int type)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a beveled border of the specified type, using
 brighter shades of the component's current background color
 for highlighting, and darker shading for shadows.
 (In a lowered border, shadows are on top and highlights
  are underneath.)

 @param type  an integer specifying either
			<code>BevelBorder.LOWERED</code> or
              	<code>BevelBorder.RAISED</code>
 @return the <code>Border</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createBevelBorder(int type, Color highlight, Color shadow)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a beveled border of the specified type, using
 the specified highlighting and shadowing. The outer 
 edge of the highlighted area uses a brighter shade of
 the highlight color. The inner edge of the shadow area
 uses a brighter shade of the shadow color.
 
 @param type  an integer specifying either 
			<code>BevelBorder.LOWERED</code> or
              	<code>BevelBorder.RAISED</code>
 @param highlight  a <code>Color</code> object for highlights
 @param shadow     a <code>Color</code> object for shadows
 @return the <code>Border</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createBevelBorder(int type, Color highlightOuter, Color highlightInner, Color shadowOuter, Color shadowInner)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a beveled border of the specified type, using
 the specified colors for the inner and outer highlight
 and shadow areas. 
 <p>
 Note: The shadow inner and outer colors are
 switched for a lowered bevel border.
 
 @param type  an integer specifying either 
		<code>BevelBorder.LOWERED</code> or
          <code>BevelBorder.RAISED</code>
 @param highlightOuter  a <code>Color</code> object for the
			outer edge of the highlight area
 @param highlightInner  a <code>Color</code> object for the
			inner edge of the highlight area
 @param shadowOuter     a <code>Color</code> object for the
			outer edge of the shadow area
 @param shadowInner     a <code>Color</code> object for the
			inner edge of the shadow area
 @return the <code>Border</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createEtchedBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a border with an "etched" look using
 the component's current background color for 
 highlighting and shading.

 @return the <code>Border</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createEtchedBorder(Color highlight, Color shadow)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a border with an "etched" look using
 the specified highlighting and shading colors.

 @param highlight  a <code>Color</code> object for the border highlights
 @param shadow     a <code>Color</code> object for the border shadows
 @return the <code>Border</code> object 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createEtchedBorder(int type)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a border with an "etched" look using
 the component's current background color for 
 highlighting and shading.

 @param type  	one of <code>EtchedBorder.RAISED</code>, or
			<code>EtchedBorder.LOWERED</code>
 @return the <code>Border</code> object
 @exception IllegalArgumentException if type is not either
			<code>EtchedBorder.RAISED</code> or 
			<code>EtchedBorder.LOWERED</code>
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createEtchedBorder(int type, Color highlight, Color shadow)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a border with an "etched" look using
 the specified highlighting and shading colors.

 @param type    	one of <code>EtchedBorder.RAISED</code>, or
			<code>EtchedBorder.LOWERED</code>
 @param highlight  a <code>Color</code> object for the border highlights
 @param shadow     a <code>Color</code> object for the border shadows
 @return the <code>Border</code> object 
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.TitledBorder javax.swing.BorderFactory.createTitledBorder(String title)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new titled border with the specified title,
 the default border type (determined by the current look and feel),
 the default text position (sitting on the top line),
 the default justification (leading), and the default
 font and text color (determined by the current look and feel).

 @param title      a <code>String</code> containing the text of the title
 @return the <code>TitledBorder</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.TitledBorder javax.swing.BorderFactory.createTitledBorder(Border border)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new titled border with an empty title,
 the specified border object,
 the default text position (sitting on the top line),
 the default justification (leading), and the default
 font and text color (determined by the current look and feel).

 @param border     the <code>Border</code> object to add the title to; if
                   <code>null</code> the <code>Border</code> is determined
                   by the current look and feel.
 @return the <code>TitledBorder</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.TitledBorder javax.swing.BorderFactory.createTitledBorder(Border border, String title)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a title to an existing border,
 with default positioning (sitting on the top line),
 default justification (leading) and the default
 font and text color (determined by the current look and feel).

 @param border     the <code>Border</code> object to add the title to
 @param title      a <code>String</code> containing the text of the title
 @return the <code>TitledBorder</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.TitledBorder javax.swing.BorderFactory.createTitledBorder(Border border, String title, int titleJustification, int titlePosition)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a title to an existing border, with the specified
 positioning and using the default
 font and text color (determined by the current look and feel).

 @param border      the <code>Border</code> object to add the title to
 @param title       a <code>String</code> containing the text of the title
 @param titleJustification  an integer specifying the justification 
        of the title -- one of the following:
<ul>
<li><code>TitledBorder.LEFT</code>
<li><code>TitledBorder.CENTER</code>
<li><code>TitledBorder.RIGHT</code>
<li><code>TitledBorder.LEADING</code>
<li><code>TitledBorder.TRAILING</code>
<li><code>TitledBorder.DEFAULT_JUSTIFICATION</code> (leading)
</ul>
 @param titlePosition       an integer specifying the vertical position of
        the text in relation to the border -- one of the following:
<ul>
<li><code> TitledBorder.ABOVE_TOP</code>
<li><code>TitledBorder.TOP</code> (sitting on the top line)
<li><code>TitledBorder.BELOW_TOP</code>
<li><code>TitledBorder.ABOVE_BOTTOM</code>
<li><code>TitledBorder.BOTTOM</code> (sitting on the bottom line)
<li><code>TitledBorder.BELOW_BOTTOM</code>
<li><code>TitledBorder.DEFAULT_POSITION</code> (top)
</ul>
 @return the <code>TitledBorder</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.TitledBorder javax.swing.BorderFactory.createTitledBorder(Border border, String title, int titleJustification, int titlePosition, Font titleFont)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a title to an existing border, with the specified
 positioning and font, and using the default text color
 (determined by the current look and feel).

 @param border      the <code>Border</code> object to add the title to
 @param title       a <code>String</code> containing the text of the title
 @param titleJustification  an integer specifying the justification
        of the title -- one of the following:
<ul>
<li><code>TitledBorder.LEFT</code>
<li><code>TitledBorder.CENTER</code>
<li><code>TitledBorder.RIGHT</code>
<li><code>TitledBorder.LEADING</code>
<li><code>TitledBorder.TRAILING</code>
<li><code>TitledBorder.DEFAULT_JUSTIFICATION</code> (leading)
</ul>
 @param titlePosition       an integer specifying the vertical position of
        the text in relation to the border -- one of the following:
<ul>
<li><code> TitledBorder.ABOVE_TOP</code>
<li><code>TitledBorder.TOP</code> (sitting on the top line)
<li><code>TitledBorder.BELOW_TOP</code>
<li><code>TitledBorder.ABOVE_BOTTOM</code>
<li><code>TitledBorder.BOTTOM</code> (sitting on the bottom line)
<li><code>TitledBorder.BELOW_BOTTOM</code>
<li><code>TitledBorder.DEFAULT_POSITION</code> (top)
</ul>
 @param titleFont           a Font object specifying the title font
 @return the TitledBorder object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.TitledBorder javax.swing.BorderFactory.createTitledBorder(Border border, String title, int titleJustification, int titlePosition, Font titleFont, Color titleColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a title to an existing border, with the specified
 positioning, font and color.

 @param border      the <code>Border</code> object to add the title to
 @param title       a <code>String</code> containing the text of the title
 @param titleJustification  an integer specifying the justification
        of the title -- one of the following:
<ul>
<li><code>TitledBorder.LEFT</code>
<li><code>TitledBorder.CENTER</code>
<li><code>TitledBorder.RIGHT</code>
<li><code>TitledBorder.LEADING</code>
<li><code>TitledBorder.TRAILING</code>
<li><code>TitledBorder.DEFAULT_JUSTIFICATION</code> (leading)
</ul>
 @param titlePosition       an integer specifying the vertical position of
        the text in relation to the border -- one of the following:
<ul>
<li><code> TitledBorder.ABOVE_TOP</code>
<li><code>TitledBorder.TOP</code> (sitting on the top line)
<li><code>TitledBorder.BELOW_TOP</code>
<li><code>TitledBorder.ABOVE_BOTTOM</code>
<li><code>TitledBorder.BOTTOM</code> (sitting on the bottom line)
<li><code>TitledBorder.BELOW_BOTTOM</code>
<li><code>TitledBorder.DEFAULT_POSITION</code> (top)
</ul>
 @param titleFont   a <code>Font</code> object specifying the title font
 @param titleColor  a <code>Color</code> object specifying the title color
 @return the <code>TitledBorder</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createEmptyBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an empty border that takes up no space. (The width
 of the top, bottom, left, and right sides are all zero.)

 @return the <code>Border</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.BorderFactory.createEmptyBorder(int top, int left, int bottom, int right)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an empty border that takes up space but which does
 no drawing, specifying the width of the top, left, bottom, and
 right sides.

 @param top     an integer specifying the width of the top,
			in pixels
 @param left    an integer specifying the width of the left side,
			in pixels
 @param bottom  an integer specifying the width of the bottom,
			in pixels
 @param right   an integer specifying the width of the right side,
			in pixels
 @return the <code>Border</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.CompoundBorder javax.swing.BorderFactory.createCompoundBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a compound border with a <code>null</code> inside edge and a
 <code>null</code> outside edge.

 @return the <code>CompoundBorder</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.CompoundBorder javax.swing.BorderFactory.createCompoundBorder(Border outsideBorder, Border insideBorder)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a compound border specifying the border objects to use
 for the outside and inside edges.

 @param outsideBorder  a <code>Border</code> object for the outer
				edge of the compound border
 @param insideBorder   a <code>Border</code> object for the inner
				edge of the compound border
 @return the <code>CompoundBorder</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.MatteBorder javax.swing.BorderFactory.createMatteBorder(int top, int left, int bottom, int right, Color color)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a matte-look border using a solid color. (The difference between
 this border and a line border is that you can specify the individual
 border dimensions.)

 @param top     an integer specifying the width of the top,
				in pixels
 @param left    an integer specifying the width of the left side,
				in pixels
 @param bottom  an integer specifying the width of the right side,
				in pixels
 @param right   an integer specifying the width of the bottom,
				in pixels
 @param color   a <code>Color</code> to use for the border
 @return the <code>MatteBorder</code> object 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.MatteBorder javax.swing.BorderFactory.createMatteBorder(int top, int left, int bottom, int right, Icon tileIcon)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a matte-look border that consists of multiple tiles of a 
 specified icon. Multiple copies of the icon are placed side-by-side
 to fill up the border area.
 <p>
 Note:<br> 
 If the icon doesn't load, the border area is painted gray.

 @param top     an integer specifying the width of the top,
				in pixels
 @param left    an integer specifying the width of the left side,
				in pixels
 @param bottom  an integer specifying the width of the right side,
				in pixels
 @param right   an integer specifying the width of the bottom,
				in pixels
 @param tileIcon  the <code>Icon</code> object used for the border tiles
 @return the <code>MatteBorder</code> object

<!-- END DATA -->
