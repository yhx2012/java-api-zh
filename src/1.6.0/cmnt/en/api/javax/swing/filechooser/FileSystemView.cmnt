<!-- BEGIN KEY -->
public abstract class javax.swing.filechooser.FileSystemView extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 FileSystemView is JFileChooser's gateway to the
 file system. Since the JDK1.1 File API doesn't allow
 access to such information as root partitions, file type
 information, or hidden file bits, this class is designed
 to intuit as much OS-specific file system information as
 possible.

 <p>

 Java Licensees may want to provide a different implementation of
 FileSystemView to better handle a given operating system.

 @version 1.49 04/07/06
 @author Jeff Dinkins

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.filechooser.FileSystemView.isRoot(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines if the given file is a root in the navigatable tree(s).
 Examples: Windows 98 has one root, the Desktop folder. DOS has one root
 per drive letter, <code>C:\</code>, <code>D:\</code>, etc. Unix has one root,
 the <code>"/"</code> directory.

 The default implementation gets information from the <code>ShellFolder</code> class.

 @param f a <code>File</code> object representing a directory
 @return <code>true</code> if <code>f</code> is a root in the navigatable tree.
 @see #isFileSystemRoot

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Boolean javax.swing.filechooser.FileSystemView.isTraversable(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the file (directory) can be visited.
 Returns false if the directory cannot be traversed.

 @param f the <code>File</code>
 @return <code>true</code> if the file/directory can be traversed, otherwise <code>false</code>
 @see JFileChooser#isTraversable
 @see FileView#isTraversable
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.filechooser.FileSystemView.getSystemDisplayName(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Name of a file, directory, or folder as it would be displayed in
 a system file browser. Example from Windows: the "M:\" directory
 displays as "CD-ROM (M:)"

 The default implementation gets information from the ShellFolder class.

 @param f a <code>File</code> object
 @return the file name as it would be displayed by a native file chooser
 @see JFileChooser#getName
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.filechooser.FileSystemView.getSystemTypeDescription(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Type description for a file, directory, or folder as it would be displayed in
 a system file browser. Example from Windows: the "Desktop" folder
 is desribed as "Desktop".

 Override for platforms with native ShellFolder implementations.

 @param f a <code>File</code> object
 @return the file type description as it would be displayed by a native file chooser
 or null if no native information is available.
 @see JFileChooser#getTypeDescription
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.filechooser.FileSystemView.getSystemIcon(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Icon for a file, directory, or folder as it would be displayed in
 a system file browser. Example from Windows: the "M:\" directory
 displays a CD-ROM icon.

 The default implementation gets information from the ShellFolder class.

 @param f a <code>File</code> object
 @return an icon as it would be displayed by a native file chooser
 @see JFileChooser#getIcon
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.filechooser.FileSystemView.isParent(File folder, File file)
<!-- END KEY -->
<!-- BEGIN DATA -->
 On Windows, a file can appear in multiple folders, other than its
 parent directory in the filesystem. Folder could for example be the
 "Desktop" folder which is not the same as file.getParentFile().

 @param folder a <code>File</code> object repesenting a directory or special folder
 @param file a <code>File</code> object
 @return <code>true</code> if <code>folder</code> is a directory or special folder and contains <code>file</code>.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.File javax.swing.filechooser.FileSystemView.getChild(File parent, String fileName)
<!-- END KEY -->
<!-- BEGIN DATA -->

 @param parent a <code>File</code> object repesenting a directory or special folder
 @param fileName a name of a file or folder which exists in <code>parent</code>
 @return a File object. This is normally constructed with <code>new
 File(parent, fileName)</code> except when parent and child are both
 special folders, in which case the <code>File</code> is a wrapper containing
 a <code>ShellFolder</code> object.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.filechooser.FileSystemView.isFileSystem(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks if <code>f</code> represents a real directory or file as opposed to a
 special folder such as <code>"Desktop"</code>. Used by UI classes to decide if
 a folder is selectable when doing directory choosing.

 @param f a <code>File</code> object
 @return <code>true</code> if <code>f</code> is a real file or directory.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.io.File javax.swing.filechooser.FileSystemView.createNewFolder(File containingDir) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new folder with a default folder name.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.filechooser.FileSystemView.isHiddenFile(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether a file is hidden or not.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.filechooser.FileSystemView.isFileSystemRoot(File dir)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Is dir the root of a tree in the file system, such as a drive
 or partition. Example: Returns true for "C:\" on Windows 98.
 
 @param dir a <code>File</code> object representing a directory
 @return <code>true</code> if <code>f</code> is a root of a filesystem
 @see #isRoot
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.filechooser.FileSystemView.isDrive(File dir)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Used by UI classes to decide whether to display a special icon
 for drives or partitions, e.g. a "hard disk" icon.

 The default implementation has no way of knowing, so always returns false.

 @param dir a directory
 @return <code>false</code> always
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.filechooser.FileSystemView.isFloppyDrive(File dir)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Used by UI classes to decide whether to display a special icon
 for a floppy disk. Implies isDrive(dir).

 The default implementation has no way of knowing, so always returns false.

 @param dir a directory
 @return <code>false</code> always
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.filechooser.FileSystemView.isComputerNode(File dir)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Used by UI classes to decide whether to display a special icon
 for a computer node, e.g. "My Computer" or a network server.

 The default implementation has no way of knowing, so always returns false.

 @param dir a directory
 @return <code>false</code> always
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.File[] javax.swing.filechooser.FileSystemView.getRoots()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns all root partitions on this system. For example, on
 Windows, this would be the "Desktop" folder, while on DOS this
 would be the A: through Z: drives.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.File javax.swing.filechooser.FileSystemView.getDefaultDirectory()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the user's default starting directory for the file chooser.

 @return a <code>File</code> object representing the default
         starting folder
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.File javax.swing.filechooser.FileSystemView.createFileObject(File dir, String filename)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a File object constructed in dir from the given filename.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.File javax.swing.filechooser.FileSystemView.createFileObject(String path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a File object constructed from the given path string.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.File[] javax.swing.filechooser.FileSystemView.getFiles(File dir, boolean useFileHiding)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the list of shown (i.e. not hidden) files.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.File javax.swing.filechooser.FileSystemView.getParentDirectory(File dir)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the parent directory of <code>dir</code>.
 @param dir the <code>File</code> being queried
 @return the parent directory of <code>dir</code>, or
   <code>null</code> if <code>dir</code> is <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.io.File javax.swing.filechooser.FileSystemView.createFileSystemRoot(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <code>File</code> object for <code>f</code> with correct
 behavior for a file system root directory.

 @param f a <code>File</code> object representing a file system root
		directory, for example "/" on Unix or "C:\" on Windows.
 @return a new <code>File</code> object
 @since 1.4

<!-- END DATA -->
