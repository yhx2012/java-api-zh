<!-- BEGIN KEY -->
public class javax.swing.SwingUtilities extends java.lang.Object implements javax.swing.SwingConstants
<!-- END KEY -->
<!-- BEGIN DATA -->
 A collection of utility methods for Swing.

 @version 1.147 08/08/06
 @author unknown

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final boolean javax.swing.SwingUtilities.isRectangleContainingRectangle(Rectangle a, Rectangle b)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Return true if <code>a</code> contains <code>b</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Rectangle javax.swing.SwingUtilities.getLocalBounds(Component aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the rectangle (0,0,bounds.width,bounds.height) for the component <code>aComponent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Window javax.swing.SwingUtilities.getWindowAncestor(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the first <code>Window </code> ancestor of <code>c</code>, or
 {@code null} if <code>c</code> is not contained inside a <code>Window</code>.

 @param c <code>Component</code> to get <code>Window</code> ancestor
        of.
 @return the first <code>Window </code> ancestor of <code>c</code>, or
         {@code null} if <code>c</code> is not contained inside a
         <code>Window</code>.
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Point javax.swing.SwingUtilities.convertPoint(Component source, Point aPoint, Component destination)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convert a <code>aPoint</code> in <code>source</code> coordinate system to
 <code>destination</code> coordinate system.
 If <code>source</code> is {@code null}, <code>aPoint</code> is assumed to be in <code>destination</code>'s
 root component coordinate system.
 If <code>destination</code> is {@code null}, <code>aPoint</code> will be converted to <code>source</code>'s
 root component coordinate system.
 If both <code>source</code> and <code>destination</code> are {@code null}, return <code>aPoint</code>
 without any conversion.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Point javax.swing.SwingUtilities.convertPoint(Component source, int x, int y, Component destination)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convert the point <code>(x,y)</code> in <code>source</code> coordinate system to
 <code>destination</code> coordinate system.
 If <code>source</code> is {@code null}, <code>(x,y)</code> is assumed to be in <code>destination</code>'s
 root component coordinate system.
 If <code>destination</code> is {@code null}, <code>(x,y)</code> will be converted to <code>source</code>'s
 root component coordinate system.
 If both <code>source</code> and <code>destination</code> are {@code null}, return <code>(x,y)</code>
 without any conversion.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Rectangle javax.swing.SwingUtilities.convertRectangle(Component source, Rectangle aRectangle, Component destination)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Convert the rectangle <code>aRectangle</code> in <code>source</code> coordinate system to
 <code>destination</code> coordinate system.
 If <code>source</code> is {@code null}, <code>aRectangle</code> is assumed to be in <code>destination</code>'s
 root component coordinate system.
 If <code>destination</code> is {@code null}, <code>aRectangle</code> will be converted to <code>source</code>'s
 root component coordinate system.
 If both <code>source</code> and <code>destination</code> are {@code null}, return <code>aRectangle</code>
 without any conversion.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Container javax.swing.SwingUtilities.getAncestorOfClass(java.lang.Class<?> c, Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convenience method for searching above <code>comp</code> in the
 component hierarchy and returns the first object of class <code>c</code> it
 finds. Can return {@code null}, if a class <code>c</code> cannot be found.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Container javax.swing.SwingUtilities.getAncestorNamed(String name, Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convenience method for searching above <code>comp</code> in the
 component hierarchy and returns the first object of <code>name</code> it
 finds. Can return {@code null}, if <code>name</code> cannot be found.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Component javax.swing.SwingUtilities.getDeepestComponentAt(Component parent, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the deepest visible descendent Component of <code>parent</code> 
 that contains the location <code>x</code>, <code>y</code>. 
 If <code>parent</code> does not contain the specified location,
 then <code>null</code> is returned.  If <code>parent</code> is not a 
 container, or none of <code>parent</code>'s visible descendents 
 contain the specified location, <code>parent</code> is returned.

 @param parent the root component to begin the search
 @param x the x target location 
 @param y the y target location  

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.event.MouseEvent javax.swing.SwingUtilities.convertMouseEvent(Component source, MouseEvent sourceEvent, Component destination)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a MouseEvent similar to <code>sourceEvent</code> except that its x
 and y members have been converted to <code>destination</code>'s coordinate
 system.  If <code>source</code> is {@code null}, <code>sourceEvent</code> x and y members
 are assumed to be into <code>destination</code>'s root component coordinate system.
 If <code>destination</code> is <code>null</code>, the
 returned MouseEvent will be in <code>source</code>'s coordinate system.
 <code>sourceEvent</code> will not be changed. A new event is returned.
 the <code>source</code> field of the returned event will be set
 to <code>destination</code> if destination is non-{@code null}
 use the translateMouseEvent() method to translate a mouse event from
 one component to another without changing the source.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SwingUtilities.convertPointToScreen(Point p, Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convert a point from a component's coordinate system to
 screen coordinates.

 @param p  a Point object (converted to the new coordinate system)
 @param c  a Component object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SwingUtilities.convertPointFromScreen(Point p, Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convert a point from a screen coordinates to a component's 
 coordinate system

 @param p  a Point object (converted to the new coordinate system)
 @param c  a Component object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Window javax.swing.SwingUtilities.windowForComponent(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the first <code>Window </code> ancestor of <code>c</code>, or
 {@code null} if <code>c</code> is not contained inside a <code>Window</code>.
 <p>
 Note: This method provides the same functionality as
 <code>getWindowAncestor</code>.

 @param c <code>Component</code> to get <code>Window</code> ancestor
        of.
 @return the first <code>Window </code> ancestor of <code>c</code>, or
         {@code null} if <code>c</code> is not contained inside a
         <code>Window</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.SwingUtilities.isDescendingFrom(Component a, Component b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return <code>true</code> if a component <code>a</code> descends from a component <code>b</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Rectangle javax.swing.SwingUtilities.computeIntersection(int x, int y, int width, int height, Rectangle dest)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convenience to calculate the intersection of two rectangles
 without allocating a new rectangle.
 If the two rectangles don't intersect, 
 then the returned rectangle begins at (0,0)
 and has zero width and height.

 @param x       the X coordinate of the first rectangle's top-left point
 @param y       the Y coordinate of the first rectangle's top-left point
 @param width   the width of the first rectangle
 @param height  the height of the first rectangle
 @param dest    the second rectangle

 @return <code>dest</code>, modified to specify the intersection

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Rectangle javax.swing.SwingUtilities.computeUnion(int x, int y, int width, int height, Rectangle dest)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convenience method that calculates the union of two rectangles
 without allocating a new rectangle.

 @param x the x-coordinate of the first rectangle
 @param y the y-coordinate of the first rectangle
 @param width the width of the first rectangle
 @param height the height of the first rectangle
 @param dest  the coordinates of the second rectangle; the union
    of the two rectangles is returned in this rectangle
 @return the <code>dest</code> <code>Rectangle</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Rectangle[] javax.swing.SwingUtilities.computeDifference(Rectangle rectA, Rectangle rectB)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convenience returning an array of rect representing the regions within
 <code>rectA</code> that do not overlap with <code>rectB</code>. If the
 two Rects do not overlap, returns an empty array

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.SwingUtilities.isLeftMouseButton(MouseEvent anEvent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the mouse event specifies the left mouse button.

 @param anEvent  a MouseEvent object
 @return true if the left mouse button was active

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.SwingUtilities.isMiddleMouseButton(MouseEvent anEvent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the mouse event specifies the middle mouse button.

 @param anEvent  a MouseEvent object
 @return true if the middle mouse button was active

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.SwingUtilities.isRightMouseButton(MouseEvent anEvent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the mouse event specifies the right mouse button.

 @param anEvent  a MouseEvent object
 @return true if the right mouse button was active

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.swing.SwingUtilities.computeStringWidth(FontMetrics fm, String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compute the width of the string using a font with the specified
 "metrics" (sizes).

 @param fm   a FontMetrics object to compute with
 @param str  the String to compute
 @return an int containing the string width

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String javax.swing.SwingUtilities.layoutCompoundLabel(JComponent c, FontMetrics fm, String text, Icon icon, int verticalAlignment, int horizontalAlignment, int verticalTextPosition, int horizontalTextPosition, Rectangle viewR, Rectangle iconR, Rectangle textR, int textIconGap)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compute and return the location of the icons origin, the
 location of origin of the text baseline, and a possibly clipped
 version of the compound labels string.  Locations are computed
 relative to the viewR rectangle.
 The JComponents orientation (LEADING/TRAILING) will also be taken
 into account and translated into LEFT/RIGHT values accordingly.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String javax.swing.SwingUtilities.layoutCompoundLabel(FontMetrics fm, String text, Icon icon, int verticalAlignment, int horizontalAlignment, int verticalTextPosition, int horizontalTextPosition, Rectangle viewR, Rectangle iconR, Rectangle textR, int textIconGap)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compute and return the location of the icons origin, the
 location of origin of the text baseline, and a possibly clipped
 version of the compound labels string.  Locations are computed
 relative to the viewR rectangle.
 This layoutCompoundLabel() does not know how to handle LEADING/TRAILING
 values in horizontalTextPosition (they will default to RIGHT) and in
 horizontalAlignment (they will default to CENTER).
 Use the other version of layoutCompoundLabel() instead.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SwingUtilities.paintComponent(Graphics g, Component c, Container p, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paints a component to the specified <code>Graphics</code>.
 This method is primarily useful to render
 <code>Component</code>s that don't exist as part of the visible
 containment hierarchy, but are used for rendering.  For
 example, if you are doing your own rendering and want to render
 some text (or even HTML), you could make use of
 <code>JLabel</code>'s text rendering support and have it paint
 directly by way of this method, without adding the label to the
 visible containment hierarchy.
 <p>
 This method makes use of <code>CellRendererPane</code> to handle
 the actual painting, and is only recommended if you use one
 component for rendering.  If you make use of multiple components
 to handle the rendering, as <code>JTable</code> does, use
 <code>CellRendererPane</code> directly.  Otherwise, as described
 below, you could end up with a <code>CellRendererPane</code>
 per <code>Component</code>.
 <p>
 If <code>c</code>'s parent is not a <code>CellRendererPane</code>, 
 a new <code>CellRendererPane</code> is created, <code>c</code> is
 added to it, and the <code>CellRendererPane</code> is added to
 <code>p</code>.  If <code>c</code>'s parent is a
 <code>CellRendererPane</code> and the <code>CellRendererPane</code>s
 parent is not <code>p</code>, it is added to <code>p</code>.
 <p>
 The component should either descend from <code>JComponent</code>
 or be another kind of lightweight component.
 A lightweight component is one whose "lightweight" property
 (returned by the <code>Component</code>
 <code>isLightweight</code> method)
 is true. If the Component is not lightweight, bad things map happen:
 crashes, exceptions, painting problems...

 @param g  the <code>Graphics</code> object to draw on
 @param c  the <code>Component</code> to draw
 @param p  the intermediate <code>Container</code>
 @param x  an int specifying the left side of the area draw in, in pixels,
           measured from the left edge of the graphics context
 @param y  an int specifying the top of the area to draw in, in pixels
           measured down from the top edge of the graphics context
 @param w  an int specifying the width of the area draw in, in pixels
 @param h  an int specifying the height of the area draw in, in pixels
 
 @see CellRendererPane
 @see java.awt.Component#isLightweight

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SwingUtilities.paintComponent(Graphics g, Component c, Container p, Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paints a component to the specified <code>Graphics</code>.  This
 is a cover method for
 {@link #paintComponent(Graphics,Component,Container,int,int,int,int)}.
 Refer to it for more information.

 @param g  the <code>Graphics</code> object to draw on
 @param c  the <code>Component</code> to draw
 @param p  the intermediate <code>Container</code>
 @param r  the <code>Rectangle</code> to draw in
 
 @see #paintComponent(Graphics,Component,Container,int,int,int,int)
 @see CellRendererPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SwingUtilities.updateComponentTreeUI(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 A simple minded look and feel change: ask each node in the tree
 to <code>updateUI()</code> -- that is, to initialize its UI property
 with the current look and feel.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SwingUtilities.invokeLater(Runnable doRun)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Causes <i>doRun.run()</i> to be executed asynchronously on the
 AWT event dispatching thread.  This will happen after all
 pending AWT events have been processed.  This method should
 be used when an application thread needs to update the GUI.
 In the following example the <code>invokeLater</code> call queues
 the <code>Runnable</code> object <code>doHelloWorld</code>
 on the event dispatching thread and
 then prints a message.
 <pre>
 Runnable doHelloWorld = new Runnable() {
     public void run() {
         System.out.println("Hello World on " + Thread.currentThread());
     }
 };

 SwingUtilities.invokeLater(doHelloWorld);
 System.out.println("This might well be displayed before the other message.");
 </pre>
 If invokeLater is called from the event dispatching thread --
 for example, from a JButton's ActionListener -- the <i>doRun.run()</i> will
 still be deferred until all pending events have been processed.
 Note that if the <i>doRun.run()</i> throws an uncaught exception
 the event dispatching thread will unwind (not the current thread).
 <p>
 Additional documentation and examples for this method can be
 found in
 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How to Use Threads</a>,
 in <em>The Java Tutorial</em>.
 <p>
 As of 1.3 this method is just a cover for <code>java.awt.EventQueue.invokeLater()</code>.
 <p>
 Unlike the rest of Swing, this method can be invoked from any thread.
 
 @see #invokeAndWait

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SwingUtilities.invokeAndWait(Runnable doRun) throws java.lang.InterruptedException, java.lang.reflect.InvocationTargetException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Causes <code>doRun.run()</code> to be executed synchronously on the
 AWT event dispatching thread.  This call blocks until
 all pending AWT events have been processed and (then)
 <code>doRun.run()</code> returns. This method should
 be used when an application thread needs to update the GUI.
 It should'nt be called from the <code>EventDispatchThread</code>.
 Here's an example that creates a new application thread
 that uses <code>invokeAndWait</code> to print a string from the event
 dispatching thread and then, when that's finished, print
 a string from the application thread.
 <pre>
 final Runnable doHelloWorld = new Runnable() {
     public void run() {
         System.out.println("Hello World on " + Thread.currentThread());
     }
 };

 Thread appThread = new Thread() {
     public void run() {
         try {
             SwingUtilities.invokeAndWait(doHelloWorld);
         }
         catch (Exception e) {
             e.printStackTrace();
         }
         System.out.println("Finished on " + Thread.currentThread());
     }
 };
 appThread.start();
 </pre>
 Note that if the <code>Runnable.run</code> method throws an
 uncaught exception
 (on the event dispatching thread) it's caught and rethrown, as
 an <code>InvocationTargetException</code>, on the caller's thread.
 <p>
 Additional documentation and examples for this method can be
 found in
 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How to Use Threads</a>,
 in <em>The Java Tutorial</em>.
 <p>
 As of 1.3 this method is just a cover for
 <code>java.awt.EventQueue.invokeAndWait()</code>.

 @exception  InterruptedException if we're interrupted while waiting for
             the event dispatching thread to finish excecuting
             <code>doRun.run()</code>
 @exception  InvocationTargetException  if an exception is thrown
             while running <code>doRun</code>

 @see #invokeLater

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.SwingUtilities.isEventDispatchThread()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the current thread is an AWT event dispatching thread.
 <p>
 As of 1.3 this method is just a cover for 
 <code>java.awt.EventQueue.isDispatchThread()</code>.
 
 @return true if the current thread is an AWT event dispatching thread

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.swing.SwingUtilities.getAccessibleIndexInParent(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the index of this object in its accessible parent.<p>

 Note: as of the Java 2 platform v1.3, it is recommended that developers call
 Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead
 of using this method.

 @return -1 of this object does not have an accessible parent.
 Otherwise, the index of the child in its accessible parent.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.accessibility.Accessible javax.swing.SwingUtilities.getAccessibleAt(Component c, Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>Accessible</code> child contained at the
 local coordinate <code>Point</code>, if one exists.
 Otherwise returns <code>null</code>.

 @return the <code>Accessible</code> at the specified location,
    if it exists; otherwise <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.accessibility.AccessibleStateSet javax.swing.SwingUtilities.getAccessibleStateSet(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the state of this object. <p>

 Note: as of the Java 2 platform v1.3, it is recommended that developers call
 Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead
 of using this method.

 @return an instance of AccessibleStateSet containing the current state
 set of the object
 @see AccessibleState

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int javax.swing.SwingUtilities.getAccessibleChildrenCount(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of accessible children in the object.  If all
 of the children of this object implement Accessible, than this
 method should return the number of children of this object. <p>

 Note: as of the Java 2 platform v1.3, it is recommended that developers call
 Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead
 of using this method.

 @return the number of accessible children in the object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.accessibility.Accessible javax.swing.SwingUtilities.getAccessibleChild(Component c, int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the nth Accessible child of the object. <p>

 Note: as of the Java 2 platform v1.3, it is recommended that developers call
 Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead
 of using this method.

 @param i zero-based index of child
 @return the nth Accessible child of the object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Component javax.swing.SwingUtilities.findFocusOwner(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the child <code>Component</code> of the specified
 <code>Component</code> that is the focus owner, if any.

 @param c the root of the <code>Component</code> hierarchy to
        search for the focus owner
 @return the focus owner, or <code>null</code> if there is no focus
         owner, or if the focus owner is not <code>comp</code>, or a
         descendant of <code>comp</code>

 @see java.awt.KeyboardFocusManager#getFocusOwner
 @deprecated As of 1.4, replaced by
   <code>KeyboardFocusManager.getFocusOwner()</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.JRootPane javax.swing.SwingUtilities.getRootPane(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If c is a JRootPane descendant return its JRootPane ancestor.
 If c is a RootPaneContainer then return its JRootPane.
 @return the JRootPane for Component c or {@code null}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Component javax.swing.SwingUtilities.getRoot(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the root component for the current component tree.
 @return the first ancestor of c that's a Window or the last Applet ancestor

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.SwingUtilities.processKeyBindings(KeyEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Process the key bindings for the <code>Component</code> associated with
 <code>event</code>. This method is only useful if
 <code>event.getComponent()</code> does not descend from
 <code>JComponent</code>, or your are not invoking
 <code>super.processKeyEvent</code> from within your
 <code>JComponent</code> subclass. <code>JComponent</code>
 automatically processes bindings from within its
 <code>processKeyEvent</code> method, hence you rarely need
 to directly invoke this method.

 @param event KeyEvent used to identify which bindings to process, as
              well as which Component has focus.
 @return true if a binding has found and processed
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.SwingUtilities.notifyAction(Action action, KeyStroke ks, KeyEvent event, Object sender, int modifiers)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes <code>actionPerformed</code> on <code>action</code> if
 <code>action</code> is enabled (and non-{@code null}). The command for the
 ActionEvent is determined by:
 <ol>
   <li>If the action was registered via
       <code>registerKeyboardAction</code>, then the command string
       passed in ({@code null} will be used if {@code null} was passed in).
   <li>Action value with name Action.ACTION_COMMAND_KEY, unless {@code null}.
   <li>String value of the KeyEvent, unless <code>getKeyChar</code>
       returns KeyEvent.CHAR_UNDEFINED..
 </ol>
 This will return true if <code>action</code> is non-{@code null} and
 actionPerformed is invoked on it.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SwingUtilities.replaceUIInputMap(JComponent component, int type, InputMap uiInputMap)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convenience method to change the UI InputMap for <code>component</code>
 to <code>uiInputMap</code>. If <code>uiInputMap</code> is {@code null},
 this removes any previously installed UI InputMap.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.SwingUtilities.replaceUIActionMap(JComponent component, ActionMap uiActionMap)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convenience method to change the UI ActionMap for <code>component</code>
 to <code>uiActionMap</code>. If <code>uiActionMap</code> is {@code null},
 this removes any previously installed UI ActionMap.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.InputMap javax.swing.SwingUtilities.getUIInputMap(JComponent component, int condition)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the InputMap provided by the UI for condition
 <code>condition</code> in component <code>component</code>.
 <p>This will return {@code null} if the UI has not installed a InputMap
 of the specified type.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.ActionMap javax.swing.SwingUtilities.getUIActionMap(JComponent component)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the ActionMap provided by the UI 
 in component <code>component</code>.
 <p>This will return {@code null} if the UI has not installed an ActionMap.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Rectangle javax.swing.SwingUtilities.calculateInnerArea(JComponent c, Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Stores the position and size of
 the inner painting area of the specified component
 in <code>r</code> and returns <code>r</code>.
 The position and size specify the bounds of the component,
 adjusted so as not to include the border area (the insets).
 This method is useful for classes 
 that implement painting code.

 @param c  the JComponent in question; if {@code null}, this method returns {@code null}
 @param r  the Rectangle instance to be modified;
           may be {@code null}
 @return {@code null} if the Component is {@code null};
         otherwise, returns the passed-in rectangle (if non-{@code null})
         or a new rectangle specifying position and size information

 @since 1.4

<!-- END DATA -->
