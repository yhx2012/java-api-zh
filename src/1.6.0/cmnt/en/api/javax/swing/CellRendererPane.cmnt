<!-- BEGIN KEY -->
public class javax.swing.CellRendererPane extends java.awt.Container implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->

 This class is inserted in between cell renderers and the components that 
 use them.  It just exists to thwart the repaint() and invalidate() methods 
 which would otherwise propagate up the tree when the renderer was configured.
 It's used by the implementations of JTable, JTree, and JList.  For example,
 here's how CellRendererPane is used in the code the paints each row
 in a JList:
 <pre>
   cellRendererPane = new CellRendererPane();
   ...
   Component rendererComponent = renderer.getListCellRendererComponent();
   renderer.configureListCellRenderer(dataModel.getElementAt(row), row);
   cellRendererPane.paintComponent(g, rendererComponent, this, x, y, w, h);
 </pre>
 <p>
 A renderer component must override isShowing() and unconditionally return
 true to work correctly because the Swing paint does nothing for components
 with isShowing false.  
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @version 1.40 11/17/05
 @author Hans Muller

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.CellRendererPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a CellRendererPane object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.CellRendererPane.invalidate()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Overridden to avoid propagating a invalidate up the tree when the
 cell renderer child is configured.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.CellRendererPane.paint(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Shouldn't be called.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.CellRendererPane.update(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Shouldn't be called.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.CellRendererPane.addImpl(Component x, Object constraints, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->

 If the specified component is already a child of this then we don't
 bother doing anything - stacking order doesn't matter for cell
 renderer components (CellRendererPane doesn't paint anyway).<

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.CellRendererPane.paintComponent(Graphics g, Component c, Container p, int x, int y, int w, int h, boolean shouldValidate)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Paint a cell renderer component c on graphics object g.  Before the component
 is drawn it's reparented to this (if that's necessary), it's bounds 
 are set to w,h and the graphics object is (effectively) translated to x,y.  
 If it's a JComponent, double buffering is temporarily turned off. After 
 the component is painted it's bounds are reset to -w, -h, 0, 0 so that, if 
 it's the last renderer component painted, it will not start consuming input.  
 The Container p is the component we're actually drawing on, typically it's 
 equal to this.getParent(). If shouldValidate is true the component c will be 
 validated before painted.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.CellRendererPane.paintComponent(Graphics g, Component c, Container p, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Calls this.paintComponent(g, c, p, x, y, w, h, false).

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.CellRendererPane.paintComponent(Graphics g, Component c, Container p, Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Calls this.paintComponent() with the rectangles x,y,width,height fields.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.CellRendererPane.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleContext associated with this CellRendererPane. 
 For CellRendererPanes, the AccessibleContext takes the form of an 
 AccessibleCellRendererPane. 
 A new AccessibleCellRendererPane instance is created if necessary.

 @return an AccessibleCellRendererPane that serves as the 
         AccessibleContext of this CellRendererPane

<!-- END DATA -->
