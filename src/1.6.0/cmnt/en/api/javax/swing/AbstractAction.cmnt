<!-- BEGIN KEY -->
public abstract class javax.swing.AbstractAction extends java.lang.Object implements javax.swing.Action, java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class provides default implementations for the JFC <code>Action</code> 
 interface. Standard behaviors like the get and set methods for
 <code>Action</code> object properties (icon, text, and enabled) are defined
 here. The developer need only subclass this abstract class and
 define the <code>actionPerformed</code> method. 
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @version 1.56 03/28/06
 @author Georges Saab
 @see Action

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.AbstractAction.enabled
<!-- END KEY -->
<!-- BEGIN DATA -->
 Specifies whether action is enabled; the default is true.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.SwingPropertyChangeSupport javax.swing.AbstractAction.changeSupport
<!-- END KEY -->
<!-- BEGIN DATA -->
 If any <code>PropertyChangeListeners</code> have been registered, the
 <code>changeSupport</code> field describes them.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.AbstractAction()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Defines an <code>Action</code> object with a default
 description string and default icon.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.AbstractAction(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Defines an <code>Action</code> object with the specified
 description string and a default icon.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.AbstractAction(String name, Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Defines an <code>Action</code> object with the specified
 description string and a the specified icon.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.AbstractAction.getValue(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Gets the <code>Object</code> associated with the specified key.

 @param key a string containing the specified <code>key</code>
 @return the binding <code>Object</code> stored with this key; if there
		are no keys, it will return <code>null</code>
 @see Action#getValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractAction.putValue(String key, Object newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Sets the <code>Value</code> associated with the specified key.

 @param key  the <code>String</code> that identifies the stored object
 @param newValue the <code>Object</code> to store using this key
 @see Action#putValue 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.AbstractAction.isEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the action is enabled.

 @return true if the action is enabled, false otherwise
 @see Action#isEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.AbstractAction.setEnabled(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Enables or disables the action.

 @param newValue  true to enable the action, false to
                  disable it
 @see Action#setEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] javax.swing.AbstractAction.getKeys()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of <code>Object</code>s which are keys for
 which values have been set for this <code>AbstractAction</code>,
 or <code>null</code> if no keys have values set.
 @return an array of key objects, or <code>null</code> if no
			keys have values set
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.AbstractAction.firePropertyChange(String propertyName, Object oldValue, Object newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Supports reporting bound property changes.  This method can be called
 when a bound property has changed and it will send the appropriate
 <code>PropertyChangeEvent</code> to any registered 
 <code>PropertyChangeListeners</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.AbstractAction.addPropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a <code>PropertyChangeListener</code> to the listener list.
 The listener is registered for all properties.
 <p>
 A <code>PropertyChangeEvent</code> will get fired in response to setting
 a bound property, e.g. <code>setFont</code>, <code>setBackground</code>,
 or <code>setForeground</code>.
 Note that if the current component is inheriting its foreground, 
 background, or font from its container, then no event will be 
 fired in response to a change in the inherited property.

 @param listener  The <code>PropertyChangeListener</code> to be added

 @see Action#addPropertyChangeListener 

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.AbstractAction.removePropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a <code>PropertyChangeListener</code> from the listener list.
 This removes a <code>PropertyChangeListener</code> that was registered
 for all properties.

 @param listener  the <code>PropertyChangeListener</code> to be removed

 @see Action#removePropertyChangeListener 

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.beans.PropertyChangeListener[] javax.swing.AbstractAction.getPropertyChangeListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the <code>PropertyChangeListener</code>s added
 to this AbstractAction with addPropertyChangeListener().

 @return all of the <code>PropertyChangeListener</code>s added or an empty
         array if no listeners have been added
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object javax.swing.AbstractAction.clone() throws java.lang.CloneNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Clones the abstract action. This gives the clone
 its own copy of the key/value list,
 which is not handled for you by <code>Object.clone()</code>.

<!-- END DATA -->
