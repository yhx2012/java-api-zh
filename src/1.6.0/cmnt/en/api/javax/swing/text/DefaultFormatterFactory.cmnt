<!-- BEGIN KEY -->
public class javax.swing.text.DefaultFormatterFactory extends javax.swing.JFormattedTextField.AbstractFormatterFactory implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 An implementation of
 <code>JFormattedTextField.AbstractFormatterFactory</code>.
 <code>DefaultFormatterFactory</code> allows specifying a number of
 different <code>JFormattedTextField.AbstractFormatter</code>s that are to
 be used.
 The most important one is the default one
 (<code>setDefaultFormatter</code>). The default formatter will be used
 if a more specific formatter could not be found. The following process
 is used to determine the appropriate formatter to use.
 <ol>
   <li>Is the passed in value null? Use the null formatter.
   <li>Does the <code>JFormattedTextField</code> have focus? Use the edit
       formatter.
   <li>Otherwise, use the display formatter.
   <li>If a non-null <code>AbstractFormatter</code> has not been found, use
       the default formatter.
 </ol>
 <p>
 The following code shows how to configure a
 <code>JFormattedTextField</code> with two
 <code>JFormattedTextField.AbstractFormatter</code>s, one for display and
 one for editing.
 <pre>
 JFormattedTextField.AbstractFormatter editFormatter = ...;
 JFormattedTextField.AbstractFormatter displayFormatter = ...;
 DefaultFormatterFactory factory = new DefaultFormatterFactory(
                 displayFormatter, displayFormatter, editFormatter);
 JFormattedTextField tf = new JFormattedTextField(factory);
 </pre>
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @see javax.swing.JFormattedTextField

 @version 1.10 04/07/06
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.JFormattedTextField.AbstractFormatter javax.swing.text.DefaultFormatterFactory.defaultFormat
<!-- END KEY -->
<!-- BEGIN DATA -->
 Default <code>AbstractFormatter</code> to use if a more specific one has
 not been specified.

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.JFormattedTextField.AbstractFormatter javax.swing.text.DefaultFormatterFactory.displayFormat
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>JFormattedTextField.AbstractFormatter</code> to use for display.

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.JFormattedTextField.AbstractFormatter javax.swing.text.DefaultFormatterFactory.editFormat
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>JFormattedTextField.AbstractFormatter</code> to use for editing.

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.JFormattedTextField.AbstractFormatter javax.swing.text.DefaultFormatterFactory.nullFormat
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>JFormattedTextField.AbstractFormatter</code> to use if the value
 is null.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.DefaultFormatterFactory(JFormattedTextField.AbstractFormatter defaultFormat)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>DefaultFormatterFactory</code> with the specified
 <code>JFormattedTextField.AbstractFormatter</code>.

 @param defaultFormat JFormattedTextField.AbstractFormatter to be used
                      if a more specific
                      JFormattedTextField.AbstractFormatter can not be
                      found.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.DefaultFormatterFactory(JFormattedTextField.AbstractFormatter defaultFormat, JFormattedTextField.AbstractFormatter displayFormat)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>DefaultFormatterFactory</code> with the specified
 <code>JFormattedTextField.AbstractFormatter</code>s.

 @param defaultFormat JFormattedTextField.AbstractFormatter to be used
                      if a more specific
                      JFormattedTextField.AbstractFormatter can not be
                      found.
 @param displayFormat JFormattedTextField.AbstractFormatter to be used
                      when the JFormattedTextField does not have focus.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.DefaultFormatterFactory(JFormattedTextField.AbstractFormatter defaultFormat, JFormattedTextField.AbstractFormatter displayFormat, JFormattedTextField.AbstractFormatter editFormat)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a DefaultFormatterFactory with the specified
 JFormattedTextField.AbstractFormatters.

 @param defaultFormat JFormattedTextField.AbstractFormatter to be used
                      if a more specific
                      JFormattedTextField.AbstractFormatter can not be
                      found.
 @param displayFormat JFormattedTextField.AbstractFormatter to be used
                      when the JFormattedTextField does not have focus.
 @param editFormat    JFormattedTextField.AbstractFormatter to be used
                      when the JFormattedTextField has focus.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.DefaultFormatterFactory(JFormattedTextField.AbstractFormatter defaultFormat, JFormattedTextField.AbstractFormatter displayFormat, JFormattedTextField.AbstractFormatter editFormat, JFormattedTextField.AbstractFormatter nullFormat)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a DefaultFormatterFactory with the specified
 JFormattedTextField.AbstractFormatters.

 @param defaultFormat JFormattedTextField.AbstractFormatter to be used
                      if a more specific
                      JFormattedTextField.AbstractFormatter can not be
                      found.
 @param displayFormat JFormattedTextField.AbstractFormatter to be used
                      when the JFormattedTextField does not have focus.
 @param editFormat    JFormattedTextField.AbstractFormatter to be used
                      when the JFormattedTextField has focus.
 @param nullFormat    JFormattedTextField.AbstractFormatter to be used
                      when the JFormattedTextField has a null value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultFormatterFactory.setDefaultFormatter(JFormattedTextField.AbstractFormatter atf)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>JFormattedTextField.AbstractFormatter</code> to use as
 a last resort, eg in case a display, edit or null
 <code>JFormattedTextField.AbstractFormatter</code> has not been
 specified.

 @param atf JFormattedTextField.AbstractFormatter used if a more
            specific is not specified

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFormattedTextField.AbstractFormatter javax.swing.text.DefaultFormatterFactory.getDefaultFormatter()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>JFormattedTextField.AbstractFormatter</code> to use
 as a last resort, eg in case a display, edit or null
 <code>JFormattedTextField.AbstractFormatter</code>
 has not been specified.

 @return JFormattedTextField.AbstractFormatter used if a more specific
         one is not specified.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultFormatterFactory.setDisplayFormatter(JFormattedTextField.AbstractFormatter atf)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>JFormattedTextField.AbstractFormatter</code> to use if
 the <code>JFormattedTextField</code> is not being edited and either
 the value is not-null, or the value is null and a null formatter has 
 has not been specified.

 @param atf JFormattedTextField.AbstractFormatter to use when the
            JFormattedTextField does not have focus

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFormattedTextField.AbstractFormatter javax.swing.text.DefaultFormatterFactory.getDisplayFormatter()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>JFormattedTextField.AbstractFormatter</code> to use
 if the <code>JFormattedTextField</code> is not being edited and either
 the value is not-null, or the value is null and a null formatter has 
 has not been specified.

 @return JFormattedTextField.AbstractFormatter to use when the
         JFormattedTextField does not have focus

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultFormatterFactory.setEditFormatter(JFormattedTextField.AbstractFormatter atf)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>JFormattedTextField.AbstractFormatter</code> to use if
 the <code>JFormattedTextField</code> is being edited and either
 the value is not-null, or the value is null and a null formatter has 
 has not been specified.

 @param atf JFormattedTextField.AbstractFormatter to use when the
            component has focus

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFormattedTextField.AbstractFormatter javax.swing.text.DefaultFormatterFactory.getEditFormatter()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>JFormattedTextField.AbstractFormatter</code> to use
 if the <code>JFormattedTextField</code> is being edited and either
 the value is not-null, or the value is null and a null formatter has 
 has not been specified.

 @return JFormattedTextField.AbstractFormatter to use when the
         component has focus

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultFormatterFactory.setNullFormatter(JFormattedTextField.AbstractFormatter atf)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the formatter to use if the value of the JFormattedTextField is
 null.

 @param atf JFormattedTextField.AbstractFormatter to use when
 the value of the JFormattedTextField is null.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFormattedTextField.AbstractFormatter javax.swing.text.DefaultFormatterFactory.getNullFormatter()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the formatter to use if the value is null.

 @return JFormattedTextField.AbstractFormatter to use when the value is
         null

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFormattedTextField.AbstractFormatter javax.swing.text.DefaultFormatterFactory.getFormatter(JFormattedTextField source)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns either the default formatter, display formatter, editor
 formatter or null formatter based on the state of the
 JFormattedTextField.

 @param source JFormattedTextField requesting
               JFormattedTextField.AbstractFormatter
 @return JFormattedTextField.AbstractFormatter to handle
         formatting duties.

<!-- END DATA -->
