<!-- BEGIN KEY -->
public class javax.swing.text.BoxView extends javax.swing.text.CompositeView
<!-- END KEY -->
<!-- BEGIN DATA -->
 A view that arranges its children into a box shape by tiling
 its children along an axis.  The box is somewhat like that
 found in TeX where there is alignment of the 
 children, flexibility of the children is considered, etc. 
 This is a building block that might be useful to represent
 things like a collection of lines, paragraphs, 
 lists, columns, pages, etc.  The axis along which the children are tiled is 
 considered the major axis.  The orthoginal axis is the minor axis.
 <p>
 Layout for each axis is handled separately by the methods
 <code>layoutMajorAxis</code> and <code>layoutMinorAxis</code>.
 Subclasses can change the layout algorithm by 
 reimplementing these methods.    These methods will be called
 as necessary depending upon whether or not there is cached
 layout information and the cache is considered 
 valid.  These methods are typically called if the given size
 along the axis changes, or if <code>layoutChanged</code> is
 called to force an updated layout.  The <code>layoutChanged</code>
 method invalidates cached layout information, if there is any.
 The requirements published to the parent view are calculated by
 the methods <code>calculateMajorAxisRequirements</code>
 and  <code>calculateMinorAxisRequirements</code>.
 If the layout algorithm is changed, these methods will
 likely need to be reimplemented.

 @author  Timothy Prinzing
 @version 1.68 07/28/06

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.BoxView(Element elem, int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>BoxView</code>.

 @param elem the element this view is responsible for
 @param axis either <code>View.X_AXIS</code> or <code>View.Y_AXIS</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.BoxView.getAxis()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the tile axis property.  This is the axis along which
 the child views are tiled.

 @return the major axis of the box, either 
  <code>View.X_AXIS</code> or <code>View.Y_AXIS</code>

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.BoxView.setAxis(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the tile axis property.  This is the axis along which
 the child views are tiled.

 @param axis either <code>View.X_AXIS</code> or <code>View.Y_AXIS</code>

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.BoxView.layoutChanged(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invalidates the layout along an axis.  This happens
 automatically if the preferences have changed for
 any of the child views.  In some cases the layout
 may need to be recalculated when the preferences
 have not changed.  The layout can be marked as
 invalid by calling this method.  The layout will
 be updated the next time the <code>setSize</code> method 
 is called on this view (typically in paint).

 @param axis either <code>View.X_AXIS</code> or <code>View.Y_AXIS</code>

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.BoxView.isLayoutValid(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Determines if the layout is valid along the given axis.

 @param axis either <code>View.X_AXIS</code> or <code>View.Y_AXIS</code>

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.BoxView.paintChild(Graphics g, Rectangle alloc, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paints a child.  By default
 that is all it does, but a subclass can use this to paint 
 things relative to the child.

 @param g the graphics context
 @param alloc the allocated region to paint into
 @param index the child index, >= 0 && < getViewCount()

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.BoxView.replace(int index, int length, javax.swing.text.View[] elems)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invalidates the layout and resizes the cache of 
 requests/allocations.  The child allocations can still
 be accessed for the old layout, but the new children
 will have an offset and span of 0.

 @param index the starting index into the child views to insert
   the new views; this should be a value >= 0 and <= getViewCount
 @param length the number of existing child views to remove;
   This should be a value >= 0 and <= (getViewCount() - offset)
 @param elems the child views to add; this value can be 
   <code>null</code>to indicate no children are being added
   (useful to remove)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.BoxView.forwardUpdate(DocumentEvent.ElementChange ec, DocumentEvent e, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Forwards the given <code>DocumentEvent</code> to the child views
 that need to be notified of the change to the model.
 If a child changed its requirements and the allocation
 was valid prior to forwarding the portion of the box
 from the starting child to the end of the box will
 be repainted.

 @param ec changes to the element this view is responsible
  for (may be <code>null</code> if there were no changes)
 @param e the change information from the associated document
 @param a the current allocation of the view
 @param f the factory to use to rebuild if the view has children
 @see #insertUpdate
 @see #removeUpdate
 @see #changedUpdate     
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.BoxView.preferenceChanged(View child, boolean width, boolean height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This is called by a child to indicate its 
 preferred span has changed.  This is implemented to
 throw away cached layout information so that new
 calculations will be done the next time the children
 need an allocation.

 @param child the child view
 @param width true if the width preference should change
 @param height true if the height preference should change

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.BoxView.getResizeWeight(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the resize weight.  A value of 0 or less is not resizable.

 @param axis may be either <code>View.X_AXIS</code> or
		<code>View.Y_AXIS</code>
 @return the weight
 @exception IllegalArgumentException for an invalid axis

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.BoxView.setSize(float width, float height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the size of the view.  This should cause 
 layout of the view if the view caches any layout
 information.  This is implemented to call the
 layout method with the sizes inside of the insets.

 @param width the width >= 0
 @param height the height >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.BoxView.paint(Graphics g, Shape allocation)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Renders the <code>BoxView</code> using the given
 rendering surface and area 
 on that surface.  Only the children that intersect
 the clip bounds of the given <code>Graphics</code>
 will be rendered.

 @param g the rendering surface to use
 @param allocation the allocated region to render into
 @see View#paint

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Shape javax.swing.text.BoxView.getChildAllocation(int index, Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the allocation for the given child view. 
 This enables finding out where various views
 are located.  This is implemented to return
 <code>null</code> if the layout is invalid,
 otherwise the superclass behavior is executed.

 @param index the index of the child, >= 0 && < getViewCount()
 @param a  the allocation to this view
 @return the allocation to the child; or <code>null</code>
		if <code>a</code> is <code>null</code>;
		or <code>null</code> if the layout is invalid

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Shape javax.swing.text.BoxView.modelToView(int pos, Shape a, Position.Bias b) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.  This makes
 sure the allocation is valid before calling the superclass.

 @param pos the position to convert >= 0
 @param a the allocated region to render into
 @return the bounding box of the given position
 @exception BadLocationException  if the given position does
  not represent a valid location in the associated document
 @see View#modelToView

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.BoxView.viewToModel(float x, float y, Shape a, javax.swing.text.Position.Bias[] bias)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

 @param x   x coordinate of the view location to convert >= 0
 @param y   y coordinate of the view location to convert >= 0
 @param a the allocated region to render into
 @return the location within the model that best represents the
  given point in the view >= 0
 @see View#viewToModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.BoxView.getAlignment(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the desired alignment for this view along an
 axis.  This is implemented to give the total alignment
 needed to position the children with the alignment points
 lined up along the axis orthoginal to the axis that is
 being tiled.  The axis being tiled will request to be
 centered (i.e. 0.5f).

 @param axis may be either <code>View.X_AXIS</code>
   or <code>View.Y_AXIS</code>
 @return the desired alignment >= 0.0f && <= 1.0f; this should
   be a value between 0.0 and 1.0 where 0 indicates alignment at the
   origin and 1.0 indicates alignment to the full span
   away from the origin; an alignment of 0.5 would be the
   center of the view
 @exception IllegalArgumentException for an invalid axis

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.BoxView.getPreferredSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the preferred span for this view along an
 axis.

 @param axis may be either <code>View.X_AXIS</code>
		 or <code>View.Y_AXIS</code>
 @return   the span the view would like to be rendered into >= 0;
           typically the view is told to render into the span
           that is returned, although there is no guarantee; 
           the parent may choose to resize or break the view
 @exception IllegalArgumentException for an invalid axis type

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.BoxView.getMinimumSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the minimum span for this view along an
 axis.

 @param axis may be either <code>View.X_AXIS</code>
		 or <code>View.Y_AXIS</code>
 @return  the span the view would like to be rendered into >= 0;
           typically the view is told to render into the span
           that is returned, although there is no guarantee;  
           the parent may choose to resize or break the view
 @exception IllegalArgumentException for an invalid axis type

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.BoxView.getMaximumSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the maximum span for this view along an
 axis.

 @param axis may be either <code>View.X_AXIS</code>
		 or <code>View.Y_AXIS</code>
 @return   the span the view would like to be rendered into >= 0;
           typically the view is told to render into the span
           that is returned, although there is no guarantee;  
           the parent may choose to resize or break the view
 @exception IllegalArgumentException for an invalid axis type

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.BoxView.isAllocationValid()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Are the allocations for the children still
 valid?

 @return true if allocations still valid

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.BoxView.isBefore(int x, int y, Rectangle innerAlloc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines if a point falls before an allocated region.

 @param x the X coordinate >= 0
 @param y the Y coordinate >= 0
 @param innerAlloc the allocated region; this is the area
   inside of the insets
 @return true if the point lies before the region else false

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.BoxView.isAfter(int x, int y, Rectangle innerAlloc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines if a point falls after an allocated region.

 @param x the X coordinate >= 0
 @param y the Y coordinate >= 0
 @param innerAlloc the allocated region; this is the area
   inside of the insets
 @return true if the point lies after the region else false

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.View javax.swing.text.BoxView.getViewAtPoint(int x, int y, Rectangle alloc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the child view at the given coordinates.

 @param x the X coordinate >= 0
 @param y the Y coordinate >= 0
 @param alloc the parents inner allocation on entry, which should
   be changed to the childs allocation on exit
 @return the view

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.BoxView.childAllocation(int index, Rectangle alloc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Allocates a region for a child view.  

 @param index the index of the child view to
   allocate, >= 0 && < getViewCount()
 @param alloc the allocated region

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.BoxView.layout(int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Perform layout on the box

 @param width the width (inside of the insets) >= 0
 @param height the height (inside of the insets) >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.BoxView.getWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current width of the box.  This is the width that
 it was last allocated.
 @return the current width of the box

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.BoxView.getHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current height of the box.  This is the height that
 it was last allocated.
 @return the current height of the box

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.BoxView.layoutMajorAxis(int targetSpan, int axis, int[] offsets, int[] spans)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Performs layout for the major axis of the box (i.e. the
 axis that it represents). The results of the layout (the 
 offset and span for each children) are placed in the given
 arrays which represent the allocations to the children
 along the major axis.

 @param targetSpan the total span given to the view, which
  would be used to layout the children
 @param axis the axis being layed out
 @param offsets the offsets from the origin of the view for
  each of the child views; this is a return value and is
  filled in by the implementation of this method
 @param spans the span of each child view; this is a return
  value and is filled in by the implementation of this method

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.BoxView.layoutMinorAxis(int targetSpan, int axis, int[] offsets, int[] spans)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Performs layout for the minor axis of the box (i.e. the
 axis orthoginal to the axis that it represents). The results 
 of the layout (the offset and span for each children) are 
 placed in the given arrays which represent the allocations to 
 the children along the minor axis.

 @param targetSpan the total span given to the view, which
  would be used to layout the children
 @param axis the axis being layed out
 @param offsets the offsets from the origin of the view for
  each of the child views; this is a return value and is
  filled in by the implementation of this method
 @param spans the span of each child view; this is a return
  value and is filled in by the implementation of this method

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.SizeRequirements javax.swing.text.BoxView.calculateMajorAxisRequirements(int axis, SizeRequirements r)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Calculates the size requirements for the major axis
 <code>axis</code>.

 @param axis the axis being studied
 @param r the <code>SizeRequirements</code> object;
		if <code>null</code> one will be created
 @return the newly initialized <code>SizeRequirements</code> object
 @see javax.swing.SizeRequirements

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.SizeRequirements javax.swing.text.BoxView.calculateMinorAxisRequirements(int axis, SizeRequirements r)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Calculates the size requirements for the minor axis
 <code>axis</code>.

 @param axis the axis being studied
 @param r the <code>SizeRequirements</code> object;
		if <code>null</code> one will be created
 @return the newly initialized <code>SizeRequirements</code> object
 @see javax.swing.SizeRequirements

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.BoxView.baselineLayout(int targetSpan, int axis, int[] offsets, int[] spans)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Computes the location and extent of each child view
 in this <code>BoxView</code> given the <code>targetSpan</code>,
 which is the width (or height) of the region we have to
 work with.

 @param targetSpan the total span given to the view, which
  would be used to layout the children
 @param axis the axis being studied, either
		<code>View.X_AXIS</code> or <code>View.Y_AXIS</code>
 @param offsets an empty array filled by this method with 
		values specifying the location	of each child view 
 @param spans  an empty array filled by this method with
		values specifying the extent of each child view

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.SizeRequirements javax.swing.text.BoxView.baselineRequirements(int axis, SizeRequirements r)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Calculates the size requirements for this <code>BoxView</code>
 by examining the size of each child view.

 @param axis the axis being studied
 @param r the <code>SizeRequirements</code> object;
		if <code>null</code> one will be created
 @return the newly initialized <code>SizeRequirements</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.BoxView.getOffset(int axis, int childIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the offset of a particular child's current layout.
 @param axis the axis being studied
 @param childIndex the index of the requested child
 @return the offset (location) for the specified child

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.BoxView.getSpan(int axis, int childIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the span of a particular childs current layout.
 @param axis the axis being studied
 @param childIndex the index of the requested child
 @return the span (width or height) of the specified child

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.BoxView.flipEastAndWestAtEnds(int position, Position.Bias bias)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines in which direction the next view lays.
 Consider the View at index n. Typically the <code>View</code>s
 are layed out from left to right, so that the <code>View</code>
 to the EAST will be at index n + 1, and the <code>View</code>
 to the WEST will be at index n - 1. In certain situations,
 such as with bidirectional text, it is possible
 that the <code>View</code> to EAST is not at index n + 1,
 but rather at index n - 1, or that the <code>View</code>
 to the WEST is not at index n - 1, but index n + 1.
 In this case this method would return true,
 indicating the <code>View</code>s are layed out in
 descending order. Otherwise the method would return false
 indicating the <code>View</code>s are layed out in ascending order.
 <p>
 If the receiver is laying its <code>View</code>s along the 
 <code>Y_AXIS</code>, this will will return the value from
 invoking the same method on the <code>View</code>
 responsible for rendering <code>position</code> and
 <code>bias</code>. Otherwise this will return false.

 @param position position into the model
 @param bias either <code>Position.Bias.Forward</code> or
          <code>Position.Bias.Backward</code>
 @return true if the <code>View</code>s surrounding the 
		<code>View</code> responding for rendering
         	<code>position</code> and <code>bias</code>
		are layed out in descending order; otherwise false

<!-- END DATA -->
