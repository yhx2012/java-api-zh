<!-- BEGIN KEY -->
public class javax.swing.text.PlainDocument extends javax.swing.text.AbstractDocument
<!-- END KEY -->
<!-- BEGIN DATA -->
 A plain document that maintains no character attributes.  The 
 default element structure for this document is a map of the lines in
 the text.  The Element returned by getDefaultRootElement is
 a map of the lines, and each child element represents a line.
 This model does not maintain any character level attributes,
 but each line can be tagged with an arbitrary set of attributes.
 Line to offset, and offset to line translations can be quickly
 performed using the default root element.  The structure information
 of the DocumentEvent's fired by edits will indicate the line
 structure changes.
 <p>
 The default content storage management is performed by a
 gapped buffer implementation (GapContent).  It supports 
 editing reasonably large documents with good efficiency when
 the edits are contiguous or clustered, as is typical.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @author  Timothy Prinzing
 @version 1.45 11/17/05
 @see     Document
 @see     AbstractDocument

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.PlainDocument.tabSizeAttribute
<!-- END KEY -->
<!-- BEGIN DATA -->
 Name of the attribute that specifies the tab
 size for tabs contained in the content.  The
 type for the value is Integer.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.PlainDocument.lineLimitAttribute
<!-- END KEY -->
<!-- BEGIN DATA -->
 Name of the attribute that specifies the maximum
 length of a line, if there is a maximum length.
 The type for the value is Integer.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.PlainDocument()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a plain text document.  A default model using 
 <code>GapContent</code> is constructed and set.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.PlainDocument(AbstractDocument.Content c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a plain text document.  A default root element is created,
 and the tab size set to 8.

 @param c  the container for the content

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.PlainDocument.insertString(int offs, String str, AttributeSet a) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts some content into the document.  
 Inserting content causes a write lock to be held while the
 actual changes are taking place, followed by notification
 to the observers on the thread that grabbed the write lock.
 <p>
 This method is thread safe, although most Swing methods
 are not. Please see 
 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A> for more information.

 @param offs the starting offset >= 0
 @param str the string to insert; does nothing with null/empty strings
 @param a the attributes for the inserted content
 @exception BadLocationException  the given insert position is not a valid 
   position within the document
 @see Document#insertString

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element javax.swing.text.PlainDocument.getDefaultRootElement()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the default root element for the document model.

 @return the root
 @see Document#getDefaultRootElement

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.AbstractDocument.AbstractElement javax.swing.text.PlainDocument.createDefaultRoot()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the root element to be used to represent the
 default document structure.

 @return the element base

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element javax.swing.text.PlainDocument.getParagraphElement(int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the paragraph element containing the given position.  Since this
 document only models lines, it returns the line instead.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.PlainDocument.insertUpdate(AbstractDocument.DefaultDocumentEvent chng, AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Updates document structure as a result of text insertion.  This
 will happen within a write lock.  Since this document simply
 maps out lines, we refresh the line map.

 @param chng the change event describing the dit
 @param attr the set of attributes for the inserted text

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.PlainDocument.removeUpdate(AbstractDocument.DefaultDocumentEvent chng)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Updates any document structure as a result of text removal.
 This will happen within a write lock. Since the structure
 represents a line map, this just checks to see if the 
 removal spans lines.  If it does, the two lines outside
 of the removal area are joined together.

 @param chng the change event describing the edit

<!-- END DATA -->
