<!-- BEGIN KEY -->
public abstract class javax.swing.text.AbstractWriter extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 AbstractWriter is an abstract class that actually
 does the work of writing out the element tree
 including the attributes.  In terms of how much is
 written out per line, the writer defaults to 100.
 But this value can be set by subclasses.

 @author Sunita Mani
 @version 1.23, 04/07/06

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static final char javax.swing.text.AbstractWriter.NEWLINE
<!-- END KEY -->
<!-- BEGIN DATA -->
 How the text packages models newlines.
 @see #getLineSeparator

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.AbstractWriter(Writer w, Document doc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new AbstractWriter.
 Initializes the ElementIterator with the default
 root of the document.

 @param w a Writer.
 @param doc a Document

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.AbstractWriter(Writer w, Document doc, int pos, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new AbstractWriter.
 Initializes the ElementIterator with the
 element passed in.

 @param w a Writer
 @param doc an Element
 @param pos The location in the document to fetch the
   content.
 @param len The amount to write out.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.AbstractWriter(Writer w, Element root)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new AbstractWriter.
 Initializes the ElementIterator with the
 element passed in.

 @param w a Writer
 @param root an Element

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.AbstractWriter(Writer w, Element root, int pos, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new AbstractWriter.
 Initializes the ElementIterator with the
 element passed in.

 @param w a Writer
 @param root an Element
 @param pos The location in the document to fetch the
   content.
 @param len The amount to write out.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AbstractWriter.getStartOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the first offset to be output.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AbstractWriter.getEndOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the last offset to be output.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.ElementIterator javax.swing.text.AbstractWriter.getElementIterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the ElementIterator.

 @return the ElementIterator.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.io.Writer javax.swing.text.AbstractWriter.getWriter()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the Writer that is used to output the content.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.Document javax.swing.text.AbstractWriter.getDocument()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the document.

 @return the Document.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.AbstractWriter.inRange(Element next)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method determines whether the current element
 is in the range specified.  When no range is specified,
 the range is initialized to be the entire document.
 inRange() returns true if the range specified intersects
 with the element's range.

 @param  next an Element.
 @return boolean that indicates whether the element
         is in the range.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void javax.swing.text.AbstractWriter.write() throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 This abstract method needs to be implemented
 by subclasses.  Its responsibility is to
 iterate over the elements and use the write()
 methods to generate output in the desired format.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.text.AbstractWriter.getText(Element elem) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the text associated with the element.
 The assumption here is that the element is a
 leaf element.  Throws a BadLocationException
 when encountered.

 @param     elem an <code>Element</code>
 @exception BadLocationException if pos represents an invalid
            location within the document
 @return    the text as a <code>String</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.text(Element elem) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes out text.  If a range is specified when the constructor
 is invoked, then only the appropriate range of text is written
 out.

 @param     elem an Element.
 @exception IOException on any I/O error
 @exception BadLocationException if pos represents an invalid
            location within the document.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.setLineLength(int l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Enables subclasses to set the number of characters they
 want written per line.   The default is 100.

 @param l the maximum line length.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.AbstractWriter.getLineLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the maximum line length.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.setCurrentLineLength(int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the current line length.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.AbstractWriter.getCurrentLineLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current line length.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.AbstractWriter.isLineEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the current line should be considered empty. This
 is true when <code>getCurrentLineLength</code> == 0 ||
 <code>indent</code> has been invoked on an empty line.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.setCanWrapLines(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets whether or not lines can be wrapped. This can be toggled
 during the writing of lines. For example, outputting HTML might 
 set this to false when outputting a quoted string.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.AbstractWriter.getCanWrapLines()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether or not the lines can be wrapped. If this is false
 no lineSeparator's will be output.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.setIndentSpace(int space)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Enables subclasses to specify how many spaces an indent
 maps to. When indentation takes place, the indent level
 is multiplied by this mapping.  The default is 2.

 @param space an int representing the space to indent mapping.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.AbstractWriter.getIndentSpace()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the amount of space to indent.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AbstractWriter.setLineSeparator(String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the String used to reprsent newlines. This is initialized
 in the constructor from either the Document, or the System property
 line.separator.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.AbstractWriter.getLineSeparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the string used to represent newlines.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.incrIndent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Increments the indent level. If indenting would cause
 <code>getIndentSpace()</code> *<code>getIndentLevel()</code> to be >
 than <code>getLineLength()</code> this will not cause an indent.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.decrIndent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Decrements the indent level.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.AbstractWriter.getIndentLevel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current indentation level. That is, the number of times
 <code>incrIndent</code> has been invoked minus the number of times
 <code>decrIndent</code> has been invoked.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.indent() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Does indentation. The number of spaces written
 out is indent level times the space to map mapping. If the current
 line is empty, this will not make it so that the current line is
 still considered empty.

 @exception IOException on any I/O error

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.write(char ch) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes out a character. This is implemented to invoke
 the <code>write</code> method that takes a char[].

 @param     ch a char.
 @exception IOException on any I/O error

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.write(String content) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes out a string. This is implemented to invoke the
 <code>write</code> method that takes a char[].

 @param     content a String.
 @exception IOException on any I/O error

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.writeLineSeparator() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes the line separator. This invokes <code>output</code> directly
 as well as setting the <code>lineLength</code> to 0.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.write(char[] chars, int startIndex, int length) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 All write methods call into this one. If <code>getCanWrapLines()</code>
 returns false, this will call <code>output</code> with each sequence
 of <code>chars</code> that doesn't contain a NEWLINE, followed
 by a call to <code>writeLineSeparator</code>. On the other hand,
 if <code>getCanWrapLines()</code> returns true, this will split the
 string, as necessary, so <code>getLineLength</code> is honored.
 The only exception is if the current string contains no whitespace,
 and won't fit in which case the line length will exceed 
 <code>getLineLength</code>.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.writeAttributes(AttributeSet attr) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes out the set of attributes as " <name>=<value>"
 pairs. It throws an IOException when encountered.

 @param     attr an AttributeSet.
 @exception IOException on any I/O error

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AbstractWriter.output(char[] content, int start, int length) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 The last stop in writing out content. All the write methods eventually
 make it to this method, which invokes <code>write</code> on the
 Writer.
 <p>This method also updates the line length based on
 <code>length</code>. If this is invoked to output a newline, the
 current line length will need to be reset as will no longer be
 valid. If it is up to the caller to do this. Use
 <code>writeLineSeparator</code> to write out a newline, which will
 property update the current line length.

 @since 1.3

<!-- END DATA -->
