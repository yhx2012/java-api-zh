<!-- BEGIN KEY -->
public class javax.swing.text.PlainView extends javax.swing.text.View implements javax.swing.text.TabExpander
<!-- END KEY -->
<!-- BEGIN DATA -->
 Implements View interface for a simple multi-line text view 
 that has text in one font and color.  The view represents each
 child element as a line of text.

 @author  Timothy Prinzing
 @version 1.77 04/07/06
 @see     View

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.FontMetrics javax.swing.text.PlainView.metrics
<!-- END KEY -->
<!-- BEGIN DATA -->
 Font metrics for the current font.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.PlainView(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new PlainView wrapped on an element.

 @param elem the element

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.PlainView.getTabSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the tab size set for the document, defaulting to 8.

 @return the tab size

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.PlainView.drawLine(int lineIndex, Graphics g, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Renders a line of text, suppressing whitespace at the end
 and expanding any tabs.  This is implemented to make calls
 to the methods <code>drawUnselectedText</code> and 
 <code>drawSelectedText</code> so that the way selected and 
 unselected text are rendered can be customized.

 @param lineIndex the line to draw >= 0
 @param g the <code>Graphics</code> context
 @param x the starting X position >= 0
 @param y the starting Y position >= 0
 @see #drawUnselectedText
 @see #drawSelectedText

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.PlainView.drawUnselectedText(Graphics g, int x, int y, int p0, int p1) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Renders the given range in the model as normal unselected
 text.  Uses the foreground or disabled color to render the text.

 @param g the graphics context
 @param x the starting X coordinate >= 0
 @param y the starting Y coordinate >= 0
 @param p0 the beginning position in the model >= 0
 @param p1 the ending position in the model >= 0
 @return the X location of the end of the range >= 0
 @exception BadLocationException if the range is invalid

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.PlainView.drawSelectedText(Graphics g, int x, int y, int p0, int p1) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Renders the given range in the model as selected text.  This
 is implemented to render the text in the color specified in
 the hosting component.  It assumes the highlighter will render
 the selected background.

 @param g the graphics context
 @param x the starting X coordinate >= 0
 @param y the starting Y coordinate >= 0
 @param p0 the beginning position in the model >= 0
 @param p1 the ending position in the model >= 0
 @return the location of the end of the range
 @exception BadLocationException if the range is invalid

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final javax.swing.text.Segment javax.swing.text.PlainView.getLineBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gives access to a buffer that can be used to fetch 
 text from the associated document.

 @return the buffer

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.PlainView.updateMetrics()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks to see if the font metrics and longest line
 are up-to-date.
 
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.PlainView.getPreferredSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the preferred span for this view along an
 axis.

 @param axis may be either View.X_AXIS or View.Y_AXIS
 @return   the span the view would like to be rendered into >= 0.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.  
           The parent may choose to resize or break the view.
 @exception IllegalArgumentException for an invalid axis

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.PlainView.paint(Graphics g, Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Renders using the given rendering surface and area on that surface.
 The view may need to do layout and create child views to enable
 itself to render into the given allocation.

 @param g the rendering surface to use
 @param a the allocated region to render into

 @see View#paint

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Shape javax.swing.text.PlainView.modelToView(int pos, Shape a, Position.Bias b) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.

 @param pos the position to convert >= 0
 @param a the allocated region to render into
 @return the bounding box of the given position
 @exception BadLocationException  if the given position does not
   represent a valid location in the associated document
 @see View#modelToView

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.PlainView.viewToModel(float fx, float fy, Shape a, javax.swing.text.Position.Bias[] bias)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

 @param fx the X coordinate >= 0
 @param fy the Y coordinate >= 0
 @param a the allocated region to render into
 @return the location within the model that best represents the
  given point in the view >= 0
 @see View#viewToModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.PlainView.insertUpdate(DocumentEvent changes, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gives notification that something was inserted into the document
 in a location that this view is responsible for.

 @param changes the change information from the associated document
 @param a the current allocation of the view
 @param f the factory to use to rebuild if the view has children
 @see View#insertUpdate

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.PlainView.removeUpdate(DocumentEvent changes, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gives notification that something was removed from the document
 in a location that this view is responsible for.

 @param changes the change information from the associated document
 @param a the current allocation of the view
 @param f the factory to use to rebuild if the view has children
 @see View#removeUpdate

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.PlainView.changedUpdate(DocumentEvent changes, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gives notification from the document that attributes were changed
 in a location that this view is responsible for.

 @param changes the change information from the associated document
 @param a the current allocation of the view
 @param f the factory to use to rebuild if the view has children
 @see View#changedUpdate

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.PlainView.setSize(float width, float height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the size of the view.  This should cause 
 layout of the view along the given axis, if it 
 has any layout duties.

 @param width the width >= 0
 @param height the height >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.PlainView.nextTabStop(float x, int tabOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the next tab stop position after a given reference position.
 This implementation does not support things like centering so it
 ignores the tabOffset argument.

 @param x the current position >= 0
 @param tabOffset the position within the text stream
   that the tab occurred at >= 0.
 @return the tab stop, measured in points >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.PlainView.updateDamage(DocumentEvent changes, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Repaint the region of change covered by the given document
 event.  Damages the line that begins the range to cover
 the case when the insert/remove is only on one line.  
 If lines are added or removed, damages the whole 
 view.  The longest line is checked to see if it has 
 changed.

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.PlainView.damageLineRange(int line0, int line1, Shape a, Component host)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Repaint the given line range.

 @param host the component hosting the view (used to call repaint)
 @param a  the region allocated for the view to render into
 @param line0 the starting line number to repaint.  This must
   be a valid line number in the model.
 @param line1 the ending line number to repaint.  This must
   be a valid line number in the model.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.text.PlainView.lineToRect(Shape a, int line)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determine the rectangle that represents the given line.

 @param a  the region allocated for the view to render into
 @param line the line number to find the region of.  This must
   be a valid line number in the model.
 @since 1.4

<!-- END DATA -->
