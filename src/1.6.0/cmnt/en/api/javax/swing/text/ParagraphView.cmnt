<!-- BEGIN KEY -->
public class javax.swing.text.ParagraphView extends javax.swing.text.FlowView implements javax.swing.text.TabExpander
<!-- END KEY -->
<!-- BEGIN DATA -->
 View of a simple line-wrapping paragraph that supports
 multiple fonts, colors, components, icons, etc.  It is
 basically a vertical box with a margin around it.  The 
 contents of the box are a bunch of rows which are special 
 horizontal boxes.  This view creates a collection of
 views that represent the child elements of the paragraph 
 element.  Each of these views are placed into a row 
 directly if they will fit, otherwise the <code>breakView</code>
 method is called to try and carve the view into pieces
 that fit.

 @author  Timothy Prinzing
 @author  Scott Violet
 @author  Igor Kushnirskiy
 @version 1.97 04/07/06
 @see     View

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.ParagraphView.firstLineIndent
<!-- END KEY -->
<!-- BEGIN DATA -->
Indentation for the first line, from the left inset. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.ParagraphView(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>ParagraphView</code> for the given element.

 @param elem the element that this view is responsible for

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.ParagraphView.setJustification(int j)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the type of justification.

 @param j one of the following values:
 <ul>
 <li><code>StyleConstants.ALIGN_LEFT</code>
 <li><code>StyleConstants.ALIGN_CENTER</code>
 <li><code>StyleConstants.ALIGN_RIGHT</code>
 </ul>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.ParagraphView.setLineSpacing(float ls)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the line spacing.

 @param ls the value is a factor of the line hight

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.ParagraphView.setFirstLineIndent(float fi)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the indent on the first line.

 @param fi the value in points

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.ParagraphView.setPropertiesFromAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the cached properties from the attributes.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.ParagraphView.getLayoutViewCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of views that this view is
 responsible for.
 The child views of the paragraph are rows which
 have been used to arrange pieces of the <code>View</code>s
 that represent the child elements.  This is the number 
 of views that have been tiled in two dimensions,
 and should be equivalent to the number of child elements
 to the element this view is responsible for.

 @return the number of views that this <code>ParagraphView</code>
		is responsible for

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.View javax.swing.text.ParagraphView.getLayoutView(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the view at a given <code>index</code>.
 The child views of the paragraph are rows which
 have been used to arrange pieces of the <code>Views</code>
 that represent the child elements.  This methods returns
 the view responsible for the child element index
 (prior to breaking).  These are the Views that were
 produced from a factory (to represent the child
 elements) and used for layout.

 @param index the <code>index</code> of the desired view
 @return the view at <code>index</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.ParagraphView.adjustRow(ParagraphView.Row r, int desiredSpan, int x)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adjusts the given row if possible to fit within the
 layout span.  By default this will try to find the 
 highest break weight possible nearest the end of
 the row.  If a forced break is encountered, the
 break will be positioned there.
 <p>
 This is meant for internal usage, and should not be used directly.
 
 @param r the row to adjust to the current layout
  	span
 @param desiredSpan the current layout span >= 0
 @param x the location r starts at

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.ParagraphView.getNextNorthSouthVisualPositionFrom(int pos, Position.Bias b, Shape a, int direction, javax.swing.text.Position.Bias[] biasRet) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the next visual position for the cursor, in 
 either the east or west direction.
 Overridden from <code>CompositeView</code>.
 @param pos position into the model
 @param b either <code>Position.Bias.Forward</code> or
          <code>Position.Bias.Backward</code>
 @param a the allocated region to render into
 @param direction either <code>SwingConstants.NORTH</code>
		or <code>SwingConstants.SOUTH</code>
 @param biasRet an array containing the bias that were checked
	in this method
 @return the location in the model that represents the
	next location visual position

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.ParagraphView.getClosestPositionTo(int pos, Position.Bias b, Shape a, int direction, javax.swing.text.Position.Bias[] biasRet, int rowIndex, int x) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the closest model position to <code>x</code>.
 <code>rowIndex</code> gives the index of the view that corresponds
 that should be looked in.
 @param pos  position into the model
 @param a the allocated region to render into
 @param direction one of the following values:
 <ul>
 <li><code>SwingConstants.NORTH</code>
 <li><code>SwingConstants.SOUTH</code>
 </ul>
 @param biasRet an array containing the bias that were checked
	in this method
 @param rowIndex the index of the view
 @param x the x coordinate of interest
 @return the closest model position to <code>x</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.ParagraphView.flipEastAndWestAtEnds(int position, Position.Bias bias)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines in which direction the next view lays.
 Consider the <code>View</code> at index n.
 Typically the <code>View</code>s are layed out
 from left to right, so that the <code>View</code>
 to the EAST will be at index n + 1, and the
 <code>View</code> to the WEST will be at index n - 1.
 In certain situations, such as with bidirectional text,
 it is possible that the <code>View</code> to EAST is not
 at index n + 1, but rather at index n - 1,
 or that the <code>View</code> to the WEST is not at
 index n - 1, but index n + 1.  In this case this method
 would return true, indicating the <code>View</code>s are
 layed out in descending order.
 <p>
 This will return true if the text is layed out right
 to left at position, otherwise false.

 @param position position into the model
 @param bias either <code>Position.Bias.Forward</code> or
          <code>Position.Bias.Backward</code>
 @return true if the text is layed out right to left at
         position, otherwise false.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.ParagraphView.getFlowSpan(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the constraining span to flow against for
 the given child index.
 @param index the index of the view being queried
 @return the constraining span for the given view at
	<code>index</code>
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.ParagraphView.getFlowStart(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the location along the flow axis that the
 flow span will start at.
 @param index the index of the view being queried
 @return the location for the given view at
	<code>index</code>
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.View javax.swing.text.ParagraphView.createRow()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a <code>View</code> that should be used to hold a 
 a row's worth of children in a flow.
 @return the new <code>View</code>
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.ParagraphView.nextTabStop(float x, int tabOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the next tab stop position given a reference position.
 This view implements the tab coordinate system, and calls
 <code>getTabbedSpan</code> on the logical children in the process 
 of layout to determine the desired span of the children.  The
 logical children can delegate their tab expansion upward to
 the paragraph which knows how to expand tabs. 
 <code>LabelView</code> is an example of a view that delegates
 its tab expansion needs upward to the paragraph.
 <p>
 This is implemented to try and locate a <code>TabSet</code>
 in the paragraph element's attribute set.  If one can be
 found, its settings will be used, otherwise a default expansion
 will be provided.  The base location for for tab expansion
 is the left inset from the paragraphs most recent allocation
 (which is what the layout of the children is based upon).

 @param x the X reference position
 @param tabOffset the position within the text stream
   that the tab occurred at >= 0
 @return the trailing end of the tab expansion >= 0
 @see TabSet
 @see TabStop
 @see LabelView

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.TabSet javax.swing.text.ParagraphView.getTabSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>Tabset</code> to be used in calculating tabs.

 @return the <code>TabSet</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected float javax.swing.text.ParagraphView.getPartialSize(int startOffset, int endOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the size used by the views between
 <code>startOffset</code> and <code>endOffset</code>.
 This uses <code>getPartialView</code> to calculate the
 size if the child view implements the 
 <code>TabableView</code> interface. If a 
 size is needed and a <code>View</code> does not implement
 the <code>TabableView</code> interface,
 the <code>preferredSpan</code> will be used.

 @param startOffset the starting document offset >= 0
 @param endOffset the ending document offset >= startOffset
 @return the size >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.ParagraphView.findOffsetToCharactersInString(char[] string, int start)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Finds the next character in the document with a character in
 <code>string</code>, starting at offset <code>start</code>. If
 there are no characters found, -1 will be returned.

 @param string the string of characters
 @param start where to start in the model >= 0
 @return the document offset, or -1 if no characters found

<!-- END DATA -->
<!-- BEGIN KEY -->
protected float javax.swing.text.ParagraphView.getTabBase()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns where the tabs are calculated from.
 @return where tabs are calculated from

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.ParagraphView.paint(Graphics g, Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Renders using the given rendering surface and area on that
 surface.  This is implemented to delgate to the superclass
 after stashing the base coordinate for tab calculations.

 @param g the rendering surface to use
 @param a the allocated region to render into
 @see View#paint

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.ParagraphView.getAlignment(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the desired alignment for this view along an
 axis.  This is implemented to give the alignment to the
 center of the first row along the y axis, and the default
 along the x axis.

 @param axis may be either <code>View.X_AXIS</code> or
	 <code>View.Y_AXIS</code>
 @return the desired alignment.  This should be a value
   between 0.0 and 1.0 inclusive, where 0 indicates alignment at the
   origin and 1.0 indicates alignment to the full span
   away from the origin.  An alignment of 0.5 would be the
   center of the view.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.View javax.swing.text.ParagraphView.breakView(int axis, float len, Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Breaks this view on the given axis at the given length.
 <p>
 <code>ParagraphView</code> instances are breakable
 along the <code>Y_AXIS</code> only, and only if
 <code>len</code> is after the first line.

 @param axis may be either <code>View.X_AXIS</code>
  or <code>View.Y_AXIS</code>
 @param len specifies where a potential break is desired
  along the given axis >= 0
 @param a the current allocation of the view
 @return the fragment of the view that represents the
  given span, if the view can be broken; if the view
  doesn't support breaking behavior, the view itself is
  returned
 @see View#breakView

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.ParagraphView.getBreakWeight(int axis, float len)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the break weight for a given location.
 <p>
 <code>ParagraphView</code> instances are breakable
 along the <code>Y_AXIS</code> only, and only if 
 <code>len</code> is after the first row.  If the length
 is less than one row, a value of <code>BadBreakWeight</code>
 is returned.

 @param axis may be either <code>View.X_AXIS</code>
  or <code>View.Y_AXIS</code>
 @param len specifies where a potential break is desired >= 0
 @return a value indicating the attractiveness of breaking here;
	either <code>GoodBreakWeight</code> or <code>BadBreakWeight</code>
 @see View#getBreakWeight

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.ParagraphView.changedUpdate(DocumentEvent changes, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gives notification from the document that attributes were changed
 in a location that this view is responsible for.

 @param changes the change information from the 
	associated document
 @param a the current allocation of the view
 @param f the factory to use to rebuild if the view has children
 @see View#changedUpdate

<!-- END DATA -->
