<!-- BEGIN KEY -->
public class javax.swing.text.AsyncBoxView.ChildState extends java.lang.Object implements java.lang.Runnable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A record representing the layout state of a 
 child view.  It is runnable as a task on another 
 thread.  All access to the child view that is
 based upon a read-lock on the model should synchronize
 on this object (i.e. The layout thread and the GUI
 thread can both have a read lock on the model at the 
 same time and are not protected from each other).
 Access to a child view hierarchy is serialized via
 synchronization on the ChildState instance.
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AsyncBoxView.ChildState(View v)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a child status.  This needs to start
 out as fairly large so we don't falsely begin with
 the idea that all of the children are visible.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.View javax.swing.text.AsyncBoxView.ChildState.getChildView()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetch the child view this record represents

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AsyncBoxView.ChildState.run()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Update the child state.  This should be
 called by the thread that desires to spend
 time updating the child state (intended to
 be the layout thread).
 <p>
 This aquires a read lock on the associated 
 document for the duration of the update to
 ensure the model is not changed while it is
 operating.  The first thing to do would be
 to see if any work actually needs to be done.
 The following could have conceivably happened
 while the state was waiting to be updated:
 <ol>
 <li>The child may have been removed from the
 view hierarchy.
 <li>The child may have been updated by a 
 higher priority operation (i.e. the child
 may have become visible).
 </ol>

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.AsyncBoxView.ChildState.getMinorSpan()
<!-- END KEY -->
<!-- BEGIN DATA -->
 What is the span along the minor axis.

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.AsyncBoxView.ChildState.getMinorOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 What is the offset along the minor axis

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.AsyncBoxView.ChildState.getMajorSpan()
<!-- END KEY -->
<!-- BEGIN DATA -->
 What is the span along the major axis. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.AsyncBoxView.ChildState.getMajorOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the offset along the major axis

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AsyncBoxView.ChildState.setMajorOffset(float offs)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method should only be called by the ChildLocator,
 it is simply a convenient place to hold the cached
 location.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AsyncBoxView.ChildState.preferenceChanged(boolean width, boolean height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Mark preferences changed for this child.

 @param width true if the width preference has changed
 @param height true if the height preference has changed
 @see javax.swing.JComponent#revalidate

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.AsyncBoxView.ChildState.isLayoutValid()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Has the child view been laid out.

<!-- END DATA -->
