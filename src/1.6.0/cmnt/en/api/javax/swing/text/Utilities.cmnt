<!-- BEGIN KEY -->
public class javax.swing.text.Utilities extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 A collection of methods to deal with various text
 related activities.
 
 @author  Timothy Prinzing
 @version 1.52 03/01/06

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.drawTabbedText(Segment s, int x, int y, Graphics g, TabExpander e, int startOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Draws the given text, expanding any tabs that are contained
 using the given tab expansion technique.  This particular
 implementation renders in a 1.1 style coordinate system
 where ints are used and 72dpi is assumed.
 
 @param s  the source of the text
 @param x  the X origin >= 0
 @param y  the Y origin >= 0
 @param g  the graphics context
 @param e  how to expand the tabs.  If this value is null, 
   tabs will be expanded as a space character.
 @param startOffset starting offset of the text in the document >= 0
 @return  the X location at the end of the rendered text

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getTabbedTextWidth(Segment s, FontMetrics metrics, int x, TabExpander e, int startOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the width of the given segment of text taking tabs 
 into consideration.  This is implemented in a 1.1 style coordinate 
 system where ints are used and 72dpi is assumed.

 @param s  the source of the text
 @param metrics the font metrics to use for the calculation
 @param x  the X origin >= 0
 @param e  how to expand the tabs.  If this value is null, 
   tabs will be expanded as a space character.
 @param startOffset starting offset of the text in the document >= 0
 @return  the width of the text

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getTabbedTextOffset(Segment s, FontMetrics metrics, int x0, int x, TabExpander e, int startOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the relative offset into the given text that
 best represents the given span in the view coordinate
 system.  This is implemented in a 1.1 style coordinate 
 system where ints are used and 72dpi is assumed.

 @param s  the source of the text
 @param metrics the font metrics to use for the calculation
 @param x0 the starting view location representing the start
   of the given text >= 0.
 @param x  the target view location to translate to an
   offset into the text >= 0.
 @param e  how to expand the tabs.  If this value is null, 
   tabs will be expanded as a space character.
 @param startOffset starting offset of the text in the document >= 0
 @return  the offset into the text >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getBreakLocation(Segment s, FontMetrics metrics, int x0, int x, TabExpander e, int startOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determine where to break the given text to fit
 within the given span. This tries to find a word boundary.
 @param s  the source of the text
 @param metrics the font metrics to use for the calculation
 @param x0 the starting view location representing the start
   of the given text.
 @param x  the target view location to translate to an
   offset into the text.
 @param e  how to expand the tabs.  If this value is null, 
   tabs will be expanded as a space character.
 @param startOffset starting offset in the document of the text
 @return  the offset into the given text

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getRowStart(JTextComponent c, int offs) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the starting row model position of the row that contains
 the specified model position.  The component given must have a
 size to compute the result.  If the component doesn't have a size
 a value of -1 will be returned.

 @param c the editor
 @param offs the offset in the document >= 0
 @return the position >= 0 if the request can be computed, otherwise
  a value of -1 will be returned.
 @exception BadLocationException if the offset is out of range

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getRowEnd(JTextComponent c, int offs) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the ending row model position of the row that contains
 the specified model position.  The component given must have a
 size to compute the result.  If the component doesn't have a size
 a value of -1 will be returned.

 @param c the editor
 @param offs the offset in the document >= 0
 @return the position >= 0 if the request can be computed, otherwise
  a value of -1 will be returned.
 @exception BadLocationException if the offset is out of range

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getPositionAbove(JTextComponent c, int offs, int x) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the position in the model that is closest to the given 
 view location in the row above.  The component given must have a
 size to compute the result.  If the component doesn't have a size
 a value of -1 will be returned.

 @param c the editor
 @param offs the offset in the document >= 0
 @param x the X coordinate >= 0
 @return the position >= 0 if the request can be computed, otherwise
  a value of -1 will be returned.
 @exception BadLocationException if the offset is out of range

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getPositionBelow(JTextComponent c, int offs, int x) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the position in the model that is closest to the given 
 view location in the row below.  The component given must have a
 size to compute the result.  If the component doesn't have a size
 a value of -1 will be returned.

 @param c the editor
 @param offs the offset in the document >= 0
 @param x the X coordinate >= 0
 @return the position >= 0 if the request can be computed, otherwise
  a value of -1 will be returned.
 @exception BadLocationException if the offset is out of range

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getWordStart(JTextComponent c, int offs) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the start of a word for the given model location.
 Uses BreakIterator.getWordInstance() to actually get the words.
 
 @param c the editor
 @param offs the offset in the document >= 0
 @return the location in the model of the word start >= 0
 @exception BadLocationException if the offset is out of range

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getWordEnd(JTextComponent c, int offs) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the end of a word for the given location.
 Uses BreakIterator.getWordInstance() to actually get the words.
 
 @param c the editor
 @param offs the offset in the document >= 0
 @return the location in the model of the word end >= 0
 @exception BadLocationException if the offset is out of range

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getNextWord(JTextComponent c, int offs) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the start of the next word for the given location.
 Uses BreakIterator.getWordInstance() to actually get the words.
 
 @param c the editor
 @param offs the offset in the document >= 0
 @return the location in the model of the word start >= 0
 @exception BadLocationException if the offset is out of range

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.Utilities.getPreviousWord(JTextComponent c, int offs) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determine the start of the prev word for the given location.
 Uses BreakIterator.getWordInstance() to actually get the words.
 
 @param c the editor
 @param offs the offset in the document >= 0
 @return the location in the model of the word start >= 0
 @exception BadLocationException if the offset is out of range

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.swing.text.Element javax.swing.text.Utilities.getParagraphElement(JTextComponent c, int offs)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the element to use for a paragraph/line.

 @param c the editor
 @param offs the starting offset in the document >= 0
 @return the element

<!-- END DATA -->
