<!-- BEGIN KEY -->
public class javax.swing.text.ElementIterator extends java.lang.Object implements java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
 ElementIterator, as the name suggests, iteratates over the Element
 tree.  The constructor can be invoked with either Document or an Element
 as an argument.  If the constructor is invoked with a Document as an
 argument then the root of the iteration is the return value of
 document.getDefaultRootElement().

 The iteration happens in a depth-first manner.  In terms of how
 boundary conditions are handled:
 a) if next() is called before first() or current(), the
    root will be returned.
 b) next() returns null to indicate the end of the list.
 c) previous() returns null when the current element is the root
    or next() has returned null.

 The ElementIterator does no locking of the Element tree. This means
 that it does not track any changes.  It is the responsibility of the
 user of this class, to ensure that no changes happen during element
 iteration.

 Simple usage example:

    public void iterate() {
        ElementIterator it = new ElementIterator(root);
	  Element elem;
	  while (true) {
           if ((elem = next()) != null) {
		 // process element
		 System.out.println("elem: " + elem.getName());
	     } else {
	         break;
	     }
	  }
    }

 @author Sunita Mani
 @version 1.15 11/17/05


<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.ElementIterator(Document document)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new ElementIterator. The
 root element is taken to get the
 default root element of the document.

 @param document a Document.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.ElementIterator(Element root)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new ElementIterator.

 @param root the root Element.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Object javax.swing.text.ElementIterator.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Clones the ElementIterator.

 @return a cloned ElementIterator Object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element javax.swing.text.ElementIterator.first()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the first element.

 @return an Element.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.ElementIterator.depth()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the current depth of element tree.

 @return the depth.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element javax.swing.text.ElementIterator.current()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the current Element.

 @return element on top of the stack or
          <code>null</code> if the root element is <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element javax.swing.text.ElementIterator.next()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the next Element. The strategy
 used to locate the next element is
 a depth-first search.

 @return the next element or <code>null</code>
          at the end of the list.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element javax.swing.text.ElementIterator.previous()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the previous Element. If howver the current
 element is the last element, or the current element
 is null, then null is returned.

 @return previous <code>Element</code> if available


<!-- END DATA -->
