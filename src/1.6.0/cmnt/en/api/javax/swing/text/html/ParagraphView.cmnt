<!-- BEGIN KEY -->
public class javax.swing.text.html.ParagraphView extends javax.swing.text.ParagraphView
<!-- END KEY -->
<!-- BEGIN DATA -->
 Displays the a paragraph, and uses css attributes for its
 configuration.

 @author  Timothy Prinzing
 @version 1.30 11/17/05

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.ParagraphView(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a ParagraphView for the given element.

 @param elem the element that this view is responsible for

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.ParagraphView.setParent(View parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Establishes the parent view for this view.  This is
 guaranteed to be called before any other methods if the
 parent view is functioning properly.
 <p> 
 This is implemented
 to forward to the superclass as well as call the
 <a href="#setPropertiesFromAttributes">setPropertiesFromAttributes</a>
 method to set the paragraph properties from the css
 attributes.  The call is made at this time to ensure
 the ability to resolve upward through the parents 
 view attributes.

 @param parent the new parent, or null if the view is
  being removed from a parent it was previously added
  to

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.html.ParagraphView.getAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the attributes to use when rendering.  This is
 implemented to multiplex the attributes specified in the
 model with a StyleSheet.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.ParagraphView.setPropertiesFromAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets up the paragraph from css attributes instead of
 the values found in StyleConstants (i.e. which are used
 by the superclass).  Since

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.SizeRequirements javax.swing.text.html.ParagraphView.calculateMinorAxisRequirements(int axis, SizeRequirements r)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Calculate the needs for the paragraph along the minor axis.
 This implemented to use the requirements of the superclass,
 modified slightly to set a minimum span allowed.  Typical
 html rendering doesn't let the view size shrink smaller than
 the length of the longest word.  

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.html.ParagraphView.isVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates whether or not this view should be 
 displayed.  If none of the children wish to be
 displayed and the only visible child is the 
 break that ends the paragraph, the paragraph
 will not be considered visible.  Otherwise,
 it will be considered visible and return true.
 
 @return true if the paragraph should be displayed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.ParagraphView.paint(Graphics g, Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Renders using the given rendering surface and area on that
 surface.  This is implemented to delgate to the superclass
 after stashing the base coordinate for tab calculations.

 @param g the rendering surface to use
 @param a the allocated region to render into
 @see View#paint

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.html.ParagraphView.getPreferredSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the preferred span for this view.  Returns
 0 if the view is not visible, otherwise it calls the
 superclass method to get the preferred span.
 axis.

 @param axis may be either View.X_AXIS or View.Y_AXIS
 @return   the span the view would like to be rendered into;
           typically the view is told to render into the span
           that is returned, although there is no guarantee;
           the parent may choose to resize or break the view
 @see javax.swing.text.ParagraphView#getPreferredSpan

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.html.ParagraphView.getMinimumSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the minimum span for this view along an
 axis.  Returns 0 if the view is not visible, otherwise 
 it calls the superclass method to get the minimum span.

 @param axis may be either <code>View.X_AXIS</code> or 
	<code>View.Y_AXIS</code>
 @return  the minimum span the view can be rendered into
 @see javax.swing.text.ParagraphView#getMinimumSpan

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.html.ParagraphView.getMaximumSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the maximum span for this view along an
 axis.  Returns 0 if the view is not visible, otherwise
 it calls the superclass method ot get the maximum span.

 @param axis may be either <code>View.X_AXIS</code> or 
	<code>View.Y_AXIS</code>
 @return  the maximum span the view can be rendered into
 @see javax.swing.text.ParagraphView#getMaximumSpan

<!-- END DATA -->
