<!-- BEGIN KEY -->
public class javax.swing.text.AbstractDocument.LeafElement extends javax.swing.text.AbstractDocument.AbstractElement
<!-- END KEY -->
<!-- BEGIN DATA -->
 Implements an element that directly represents content of
 some kind.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @see     Element

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AbstractDocument.LeafElement(Element parent, AttributeSet a, int offs0, int offs1)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an element that represents content within the
 document (has no children).

 @param parent  The parent element
 @param a       The element attributes
 @param offs0   The start offset >= 0
 @param offs1   The end offset >= offs0
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.AbstractDocument.LeafElement.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Converts the element to a string.

 @return the string

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AbstractDocument.LeafElement.getStartOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the starting offset in the model for the element.

 @return the offset >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AbstractDocument.LeafElement.getEndOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the ending offset in the model for the element.

 @return the offset >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.AbstractDocument.LeafElement.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the element name.

 @return the name

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AbstractDocument.LeafElement.getElementIndex(int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the child element index closest to the given model offset.

 @param pos the offset >= 0
 @return the element index >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element javax.swing.text.AbstractDocument.LeafElement.getElement(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a child element.

 @param index the child index, >= 0 && < getElementCount()
 @return the child element

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AbstractDocument.LeafElement.getElementCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of child elements.

 @return the number of children >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.AbstractDocument.LeafElement.isLeaf()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks whether the element is a leaf.

 @return true if a leaf

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.AbstractDocument.LeafElement.getAllowsChildren()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the receiver allows children.
 @return true if the receiver allows children, otherwise false

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration javax.swing.text.AbstractDocument.LeafElement.children()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the children of the receiver as an
 <code>Enumeration</code>.
 @return the children of the receiver

<!-- END DATA -->
