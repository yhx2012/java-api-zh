<!-- BEGIN KEY -->
public class javax.swing.text.html.parser.Parser extends java.lang.Object implements javax.swing.text.html.parser.DTDConstants
<!-- END KEY -->
<!-- BEGIN DATA -->
 A simple DTD-driven HTML parser. The parser reads an
 HTML file from an InputStream and calls various methods
 (which should be overridden in a subclass) when tags and
 data are encountered.
 <p>
 Unfortunately there are many badly implemented HTML parsers
 out there, and as a result there are many badly formatted
 HTML files. This parser attempts to parse most HTML files.
 This means that the implementation sometimes deviates from
 the SGML specification in favor of HTML.
 <p>
 The parser treats \r and \r\n as \n. Newlines after starttags
 and before end tags are ignored just as specified in the SGML/HTML
 specification.
 <p>
 The html spec does not specify how spaces are to be coalesced very well.
 Specifically, the following scenarios are not discussed (note that a
 space should be used here, but I am using &amp;nbsp to force the space to
 be displayed):
 <p>
 '&lt;b>blah&nbsp;&lt;i>&nbsp;&lt;strike>&nbsp;foo' which can be treated as:
 '&lt;b>blah&nbsp;&lt;i>&lt;strike>foo' 
 <p>as well as:
 '&lt;p>&lt;a href="xx">&nbsp;&lt;em>Using&lt;/em>&lt;/a>&lt;/p>'
 which appears to be treated as:
 '&lt;p>&lt;a href="xx">&lt;em>Using&lt;/em>&lt;/a>&lt;/p>'
 <p>
 If <code>strict</code> is false, when a tag that breaks flow,
 (<code>TagElement.breaksFlows</code>) or trailing whitespace is
 encountered, all whitespace will be ignored until a non whitespace
 character is encountered. This appears to give behavior closer to
 the popular browsers.

 @see DTD
 @see TagElement
 @see SimpleAttributeSet
 @version 1.47, 02/26/06
 @author Arthur van Hoff
 @author Sunita Mani

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.html.parser.Parser.strict
<!-- END KEY -->
<!-- BEGIN DATA -->
 This flag determines whether or not the Parser will be strict
 in enforcing SGML compatibility.  If false, it will be lenient
 with certain common classes of erroneous HTML constructs.
 Strict or not, in either case an error will be recorded.


<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.html.parser.Parser.getCurrentLine()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @return the line number of the line currently being parsed

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.html.parser.TagElement javax.swing.text.html.parser.Parser.makeTag(Element elem, boolean fictional)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Makes a TagElement.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.parser.Parser.handleText(char[] text)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when PCDATA is encountered.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.parser.Parser.handleTitle(char[] text)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when an HTML title tag is encountered.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.parser.Parser.handleComment(char[] text)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when an HTML comment is encountered.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.parser.Parser.handleEmptyTag(TagElement tag) throws javax.swing.text.ChangedCharSetException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when an empty tag is encountered.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.parser.Parser.handleStartTag(TagElement tag)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when a start tag is encountered.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.parser.Parser.handleEndTag(TagElement tag)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when an end tag is encountered.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.parser.Parser.handleError(int ln, String msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
 An error has occurred.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.parser.Parser.error(String err, String arg1, String arg2, String arg3)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoke the error handler.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.parser.Parser.startTag(TagElement tag) throws javax.swing.text.ChangedCharSetException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Handle a start tag. The new tag is pushed
 onto the tag stack. The attribute list is
 checked for required attributes.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.parser.Parser.endTag(boolean omitted)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Handle an end tag. The end tag is popped
 from the tag stack.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.parser.Parser.markFirstTime(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Marks the first time a tag has been seen in a document

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.html.parser.Parser.parseDTDMarkup() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Parses th Document Declaration Type markup declaration.
 Currently ignores it.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.html.parser.Parser.parseMarkupDeclarations(StringBuffer strBuff) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Parse markup declarations.
 Currently only handles the Document Type Declaration markup.
 Returns true if it is a markup declaration false otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.text.html.parser.Parser.parse(Reader in) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Parse an HTML stream, given a DTD.

<!-- END DATA -->
