<!-- BEGIN KEY -->
public static interface javax.swing.text.AbstractDocument.AttributeContext
<!-- END KEY -->
<!-- BEGIN DATA -->
 An interface that can be used to allow MutableAttributeSet 
 implementations to use pluggable attribute compression
 techniques.  Each mutation of the attribute set can be
 used to exchange a previous AttributeSet instance with
 another, preserving the possibility of the AttributeSet
 remaining immutable.  An implementation is provided by
 the StyleContext class.

 The Element implementations provided by this class use
 this interface to provide their MutableAttributeSet
 implementations, so that different AttributeSet compression
 techniques can be employed.  The method 
 <code>getAttributeContext</code> should be implemented to
 return the object responsible for implementing the desired
 compression technique.
 
 @see StyleContext

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.AbstractDocument.AttributeContext.addAttribute(AttributeSet old, Object name, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds an attribute to the given set, and returns
 the new representative set.

 @param old the old attribute set
 @param name the non-null attribute name
 @param value the attribute value
 @return the updated attribute set
 @see MutableAttributeSet#addAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.AbstractDocument.AttributeContext.addAttributes(AttributeSet old, AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a set of attributes to the element.

 @param old the old attribute set
 @param attr the attributes to add
 @return the updated attribute set
 @see MutableAttributeSet#addAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.AbstractDocument.AttributeContext.removeAttribute(AttributeSet old, Object name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes an attribute from the set.

 @param old the old attribute set
 @param name the non-null attribute name
 @return the updated attribute set
 @see MutableAttributeSet#removeAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.AbstractDocument.AttributeContext.removeAttributes(AttributeSet old, java.util.Enumeration<?> names)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a set of attributes for the element.

 @param old the old attribute set
 @param names the attribute names
 @return the updated attribute set
 @see MutableAttributeSet#removeAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.AbstractDocument.AttributeContext.removeAttributes(AttributeSet old, AttributeSet attrs)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a set of attributes for the element.

 @param old the old attribute set
 @param attrs the attributes
 @return the updated attribute set
 @see MutableAttributeSet#removeAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.AbstractDocument.AttributeContext.getEmptySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches an empty AttributeSet.

 @return the attribute set

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AbstractDocument.AttributeContext.reclaim(AttributeSet a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reclaims an attribute set.
 This is a way for a MutableAttributeSet to mark that it no 
 longer need a particular immutable set.  This is only necessary
 in 1.1 where there are no weak references.  A 1.1 implementation
 would call this in its finalize method.

 @param a the attribute set to reclaim

<!-- END DATA -->
