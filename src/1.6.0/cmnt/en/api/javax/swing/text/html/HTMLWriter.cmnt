<!-- BEGIN KEY -->
public class javax.swing.text.html.HTMLWriter extends javax.swing.text.AbstractWriter
<!-- END KEY -->
<!-- BEGIN DATA -->
 This is a writer for HTMLDocuments.

 @author  Sunita Mani
 @version 1.26, 02/02/00

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.HTMLWriter(Writer w, HTMLDocument doc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new HTMLWriter.

 @param w   a Writer
 @param doc  an HTMLDocument


<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.HTMLWriter(Writer w, HTMLDocument doc, int pos, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new HTMLWriter.

 @param w  a Writer
 @param doc an HTMLDocument
 @param pos the document location from which to fetch the content
 @param len the amount to write out

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLWriter.write() throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Iterates over the 
 Element tree and controls the writing out of
 all the tags and its attributes.

 @exception IOException on any I/O error
 @exception BadLocationException if pos represents an invalid
            location within the document.


<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.writeAttributes(AttributeSet attr) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes out the attribute set.  Ignores all
 attributes with a key of type HTML.Tag,
 attributes with a key of type StyleConstants,
 and attributes with a key of type
 HTML.Attribute.ENDTAG.

 @param attr   an AttributeSet
 @exception IOException on any I/O error


<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.emptyTag(Element elem) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes out all empty elements (all tags that have no
 corresponding end tag).

 @param elem   an Element
 @exception IOException on any I/O error
 @exception BadLocationException if pos represents an invalid
            location within the document.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.html.HTMLWriter.isBlockTag(AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines if the HTML.Tag associated with the
 element is a block tag.

 @param attr  an AttributeSet
 @return  true if tag is block tag, false otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.startTag(Element elem) throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes out a start tag for the element.
 Ignores all synthesized elements.

 @param elem   an Element
 @exception IOException on any I/O error

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.textAreaContent(AttributeSet attr) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes out text that is contained in a TEXTAREA form
 element.

 @param attr  an AttributeSet
 @exception IOException on any I/O error
 @exception BadLocationException if pos represents an invalid
            location within the document.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.text(Element elem) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes out text.  If a range is specified when the constructor
 is invoked, then only the appropriate range of text is written
 out.

 @param elem   an Element
 @exception IOException on any I/O error
 @exception BadLocationException if pos represents an invalid
            location within the document.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.selectContent(AttributeSet attr) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes out the content of the SELECT form element.
 
 @param attr the AttributeSet associated with the form element
 @exception IOException on any I/O error

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.writeOption(Option option) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes out the content of the Option form element.
 @param option  an Option
 @exception IOException on any I/O error
 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.endTag(Element elem) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes out an end tag for the element.

 @param elem    an Element
 @exception IOException on any I/O error

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.comment(Element elem) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes out comments.

 @param elem    an Element
 @exception IOException on any I/O error
 @exception BadLocationException if pos represents an invalid
            location within the document.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.html.HTMLWriter.synthesizedElement(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the element is a
 synthesized element.  Currently we are only testing
 for the p-implied tag.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.html.HTMLWriter.matchNameAttribute(AttributeSet attr, HTML.Tag tag)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the StyleConstants.NameAttribute is
 equal to the tag that is passed in as a parameter.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.writeEmbeddedTags(AttributeSet attr) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches for embedded tags in the AttributeSet
 and writes them out.  It also stores these tags in a vector
 so that when appropriate the corresponding end tags can be
 written out.

 @exception IOException on any I/O error

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.closeOutUnwantedEmbeddedTags(AttributeSet attr) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches the attribute set and for each tag
 that is stored in the tag vector.  If the tag isnt found,
 then the tag is removed from the vector and a corresponding
 end tag is written out.

 @exception IOException on any I/O error

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.writeLineSeparator() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes the line separator. This is overriden to make sure we don't
 replace the newline content in case it is outside normal ascii.
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLWriter.output(char[] chars, int start, int length) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method is overriden to map any character entities, such as
 &lt; to &amp;lt;. <code>super.output</code> will be invoked to
 write the content.
 @since 1.3

<!-- END DATA -->
