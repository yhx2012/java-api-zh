<!-- BEGIN KEY -->
public class javax.swing.text.html.BlockView extends javax.swing.text.BoxView
<!-- END KEY -->
<!-- BEGIN DATA -->
 A view implementation to display a block (as a box)
 with CSS specifications.

 @author  Timothy Prinzing
 @version 1.38 02/14/06

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.BlockView(Element elem, int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new view that represents an
 html box.  This can be used for a number
 of elements.

 @param elem the element to create a view for
 @param axis either View.X_AXIS or View.Y_AXIS

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.BlockView.setParent(View parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Establishes the parent view for this view.  This is
 guaranteed to be called before any other methods if the
 parent view is functioning properly.
 <p> 
 This is implemented
 to forward to the superclass as well as call the
 {@link #setPropertiesFromAttributes()}
 method to set the paragraph properties from the css
 attributes.  The call is made at this time to ensure
 the ability to resolve upward through the parents 
 view attributes.

 @param parent the new parent, or null if the view is
  being removed from a parent it was previously added
  to

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.SizeRequirements javax.swing.text.html.BlockView.calculateMajorAxisRequirements(int axis, SizeRequirements r)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Calculate the requirements of the block along the major
 axis (i.e. the axis along with it tiles).  This is implemented
 to provide the superclass behavior and then adjust it if the 
 CSS width or height attribute is specified and applicable to
 the axis.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.SizeRequirements javax.swing.text.html.BlockView.calculateMinorAxisRequirements(int axis, SizeRequirements r)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Calculate the requirements of the block along the minor
 axis (i.e. the axis orthoginal to the axis along with it tiles).  
 This is implemented
 to provide the superclass behavior and then adjust it if the 
 CSS width or height attribute is specified and applicable to
 the axis.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.BlockView.layoutMinorAxis(int targetSpan, int axis, int[] offsets, int[] spans)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Performs layout for the minor axis of the box (i.e. the
 axis orthoginal to the axis that it represents). The results 
 of the layout (the offset and span for each children) are 
 placed in the given arrays which represent the allocations to 
 the children along the minor axis.

 @param targetSpan the total span given to the view, which
  whould be used to layout the childre.
 @param axis the axis being layed out
 @param offsets the offsets from the origin of the view for
  each of the child views; this is a return value and is
  filled in by the implementation of this method
 @param spans the span of each child view; this is a return
  value and is filled in by the implementation of this method

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.BlockView.paint(Graphics g, Shape allocation)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Renders using the given rendering surface and area on that
 surface.  This is implemented to delegate to the css box
 painter to paint the border and background prior to the
 interior.

 @param g the rendering surface to use
 @param allocation the allocated region to render into
 @see View#paint

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.html.BlockView.getAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the attributes to use when rendering.  This is
 implemented to multiplex the attributes specified in the
 model with a StyleSheet.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.html.BlockView.getResizeWeight(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the resize weight.

 @param axis may be either X_AXIS or Y_AXIS
 @return the weight
 @exception IllegalArgumentException for an invalid axis

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.html.BlockView.getAlignment(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the alignment.

 @param axis may be either X_AXIS or Y_AXIS
 @return the alignment

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.html.BlockView.getPreferredSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the preferred span for this view along an
 axis.

 @param axis may be either <code>View.X_AXIS</code>
		 or <code>View.Y_AXIS</code>
 @return   the span the view would like to be rendered into >= 0;
           typically the view is told to render into the span
           that is returned, although there is no guarantee; 
           the parent may choose to resize or break the view
 @exception IllegalArgumentException for an invalid axis type

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.html.BlockView.getMinimumSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the minimum span for this view along an
 axis.

 @param axis may be either <code>View.X_AXIS</code>
		 or <code>View.Y_AXIS</code>
 @return  the span the view would like to be rendered into >= 0;
           typically the view is told to render into the span
           that is returned, although there is no guarantee;  
           the parent may choose to resize or break the view
 @exception IllegalArgumentException for an invalid axis type

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.html.BlockView.getMaximumSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the maximum span for this view along an
 axis.

 @param axis may be either <code>View.X_AXIS</code>
		 or <code>View.Y_AXIS</code>
 @return   the span the view would like to be rendered into >= 0;
           typically the view is told to render into the span
           that is returned, although there is no guarantee;  
           the parent may choose to resize or break the view
 @exception IllegalArgumentException for an invalid axis type

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.BlockView.setPropertiesFromAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Update any cached values that come from attributes.

<!-- END DATA -->
