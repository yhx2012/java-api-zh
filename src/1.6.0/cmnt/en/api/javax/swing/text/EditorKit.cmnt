<!-- BEGIN KEY -->
public abstract class javax.swing.text.EditorKit extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 Establishes the set of things needed by a text component
 to be a reasonably functioning editor for some <em>type</em>
 of text content.  The EditorKit acts as a factory for some
 kind of policy.  For example, an implementation 
 of html and rtf can be provided that is replaceable 
 with other implementations.
 <p>
 A kit can safely store editing state as an instance
 of the kit will be dedicated to a text component.
 New kits will normally be created by cloning a 
 prototype kit.  The kit will have it's 
 <code>setComponent</code> method called to establish
 it's relationship with a JTextComponent.

 @author  Timothy Prinzing
 @version 1.20 11/17/05

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.EditorKit()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct an EditorKit.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.text.EditorKit.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a copy of the editor kit.  This is implemented
 to use Object.clone</em>.  If the kit cannot be cloned,
 null is returned.

 @return the copy

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.EditorKit.install(JEditorPane c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when the kit is being installed into the
 a JEditorPane.  

 @param c the JEditorPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.EditorKit.deinstall(JEditorPane c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when the kit is being removed from the
 JEditorPane.  This is used to unregister any 
 listeners that were attached.

 @param c the JEditorPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String javax.swing.text.EditorKit.getContentType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the MIME type of the data that this
 kit represents support for.

 @return the type

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.text.ViewFactory javax.swing.text.EditorKit.getViewFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches a factory that is suitable for producing 
 views of any models that are produced by this
 kit.  

 @return the factory

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.Action[] javax.swing.text.EditorKit.getActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the set of commands that can be used
 on a text component that is using a model and
 view produced by this kit.

 @return the set of actions

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.text.Caret javax.swing.text.EditorKit.createCaret()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches a caret that can navigate through views
 produced by the associated ViewFactory.

 @return the caret

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.text.Document javax.swing.text.EditorKit.createDefaultDocument()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an uninitialized text storage model
 that is appropriate for this type of editor.

 @return the model

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.text.EditorKit.read(InputStream in, Document doc, int pos) throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts content from the given stream which is expected 
 to be in a format appropriate for this kind of content
 handler.
 
 @param in  The stream to read from
 @param doc The destination for the insertion.
 @param pos The location in the document to place the
   content >= 0.
 @exception IOException on any I/O error
 @exception BadLocationException if pos represents an invalid
   location within the document.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.text.EditorKit.write(OutputStream out, Document doc, int pos, int len) throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes content from a document to the given stream
 in a format appropriate for this kind of content handler.
 
 @param out  The stream to write to
 @param doc The source for the write.
 @param pos The location in the document to fetch the
   content from >= 0.
 @param len The amount to write out >= 0.
 @exception IOException on any I/O error
 @exception BadLocationException if pos represents an invalid
   location within the document.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.text.EditorKit.read(Reader in, Document doc, int pos) throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts content from the given stream which is expected 
 to be in a format appropriate for this kind of content
 handler.
 <p>
 Since actual text editing is unicode based, this would 
 generally be the preferred way to read in the data.  
 Some types of content are stored in an 8-bit form however,
 and will favor the InputStream.
 
 @param in  The stream to read from
 @param doc The destination for the insertion.
 @param pos The location in the document to place the
   content >= 0.
 @exception IOException on any I/O error
 @exception BadLocationException if pos represents an invalid
   location within the document.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.text.EditorKit.write(Writer out, Document doc, int pos, int len) throws java.io.IOException, javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes content from a document to the given stream
 in a format appropriate for this kind of content handler.
 <p>
 Since actual text editing is unicode based, this would 
 generally be the preferred way to write the data.  
 Some types of content are stored in an 8-bit form however,
 and will favor the OutputStream.
 
 @param out  The stream to write to
 @param doc The source for the write.
 @param pos The location in the document to fetch the
   content >= 0.
 @param len The amount to write out >= 0.
 @exception IOException on any I/O error
 @exception BadLocationException if pos represents an invalid
   location within the document.

<!-- END DATA -->
