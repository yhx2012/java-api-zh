<!-- BEGIN KEY -->
public class javax.swing.text.AsyncBoxView extends javax.swing.text.View
<!-- END KEY -->
<!-- BEGIN DATA -->
 A box that does layout asynchronously.  This
 is useful to keep the GUI event thread moving by
 not doing any layout on it.  The layout is done
 on a granularity of operations on the child views.
 After each child view is accessed for some part
 of layout (a potentially time consuming operation) 
 the remaining tasks can be abandoned or a new higher 
 priority task (i.e. to service a synchronous request 
 or a visible area) can be taken on.
 <p>
 While the child view is being accessed
 a read lock is aquired on the associated document 
 so that the model is stable while being accessed.

 @author  Timothy Prinzing
 @version 1.18 04/07/06
 @since   1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.AsyncBoxView.ChildLocator javax.swing.text.AsyncBoxView.locator
<!-- END KEY -->
<!-- BEGIN DATA -->
 Object that manages the offsets of the 
 children.  All locking for management of
 child locations is on this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AsyncBoxView(Element elem, int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a box view that does asynchronous layout.

 @param elem the element of the model to represent
 @param axis the axis to tile along.  This can be
  either X_AXIS or Y_AXIS.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AsyncBoxView.getMajorAxis()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetch the major axis (the axis the children
 are tiled along).  This will have a value of
 either X_AXIS or Y_AXIS.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AsyncBoxView.getMinorAxis()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetch the minor axis (the axis orthoginal 
 to the tiled axis).  This will have a value of
 either X_AXIS or Y_AXIS.

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.AsyncBoxView.getTopInset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the top part of the margin around the view.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AsyncBoxView.setTopInset(float i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the top part of the margin around the view.

 @param i the value of the inset

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.AsyncBoxView.getBottomInset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the bottom part of the margin around the view.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AsyncBoxView.setBottomInset(float i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the bottom part of the margin around the view.

 @param i the value of the inset

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.AsyncBoxView.getLeftInset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the left part of the margin around the view.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AsyncBoxView.setLeftInset(float i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the left part of the margin around the view.

 @param i the value of the inset

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.AsyncBoxView.getRightInset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the right part of the margin around the view.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AsyncBoxView.setRightInset(float i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the right part of the margin around the view.

 @param i the value of the inset

<!-- END DATA -->
<!-- BEGIN KEY -->
protected float javax.swing.text.AsyncBoxView.getInsetSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetch the span along an axis that is taken up by the insets.

 @param axis the axis to determine the total insets along,
  either X_AXIS or Y_AXIS.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AsyncBoxView.setEstimatedMajorSpan(boolean isEstimated)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the estimatedMajorSpan property that determines if the
 major span should be treated as being estimated.  If this
 property is true, the value of setSize along the major axis 
 will change the requirements along the major axis and incremental 
 changes will be ignored until all of the children have been updated
 (which will cause the property to automatically be set to false).
 If the property is false the value of the majorSpan will be
 considered to be accurate and incremental changes will be
 added into the total as they are calculated.

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.text.AsyncBoxView.getEstimatedMajorSpan()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Is the major span currently estimated?

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.AsyncBoxView.ChildState javax.swing.text.AsyncBoxView.getChildState(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetch the object representing the layout state of
 of the child at the given index.

 @param index the child index.  This should be a
   value >= 0 and < getViewCount().

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.LayoutQueue javax.swing.text.AsyncBoxView.getLayoutQueue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetch the queue to use for layout.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.AsyncBoxView.ChildState javax.swing.text.AsyncBoxView.createChildState(View v)
<!-- END KEY -->
<!-- BEGIN DATA -->
 New ChildState records are created through
 this method to allow subclasses the extend
 the ChildState records to do/hold more

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void javax.swing.text.AsyncBoxView.majorRequirementChange(AsyncBoxView.ChildState cs, float delta)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Requirements changed along the major axis.
 This is called by the thread doing layout for 
 the given ChildState object when it has completed
 fetching the child views new preferences.
 Typically this would be the layout thread, but
 might be the event thread if it is trying to update
 something immediately (such as to perform a 
 model/view translation).
 <p>
 This is implemented to mark the major axis as having 
 changed so that a future check to see if the requirements
 need to be published to the parent view will consider
 the major axis.  If the span along the major axis is 
 not estimated, it is updated by the given delta to reflect
 the incremental change.  The delta is ignored if the 
 major span is estimated.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void javax.swing.text.AsyncBoxView.minorRequirementChange(AsyncBoxView.ChildState cs)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Requirements changed along the minor axis.
 This is called by the thread doing layout for 
 the given ChildState object when it has completed
 fetching the child views new preferences.
 Typically this would be the layout thread, but
 might be the GUI thread if it is trying to update
 something immediately (such as to perform a 
 model/view translation).

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AsyncBoxView.flushRequirementChanges()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Publish the changes in preferences upward to the parent
 view.  This is normally called by the layout thread.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AsyncBoxView.replace(int offset, int length, javax.swing.text.View[] views)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Calls the superclass to update the child views, and
 updates the status records for the children.  This
 is expected to be called while a write lock is held
 on the model so that interaction with the layout
 thread will not happen (i.e. the layout thread 
 acquires a read lock before doing anything). 

 @param offset the starting offset into the child views >= 0
 @param length the number of existing views to replace >= 0
 @param views the child views to insert

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AsyncBoxView.loadChildren(ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Loads all of the children to initialize the view.
 This is called by the <a href="#setParent">setParent</a> 
 method.  Subclasses can reimplement this to initialize 
 their child views in a different manner.  The default
 implementation creates a child view for each 
 child element.
 <p>
 Normally a write-lock is held on the Document while
 the children are being changed, which keeps the rendering
 and layout threads safe.  The exception to this is when 
 the view is initialized to represent an existing element
 (via this method), so it is synchronized to exclude 
 preferenceChanged while we are initializing.

 @param f the view factory
 @see #setParent

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized int javax.swing.text.AsyncBoxView.getViewIndexAtPosition(int pos, Position.Bias b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the child view index representing the given position in
 the model.  This is implemented to fetch the view in the case
 where there is a child view for each child element.

 @param pos the position >= 0
 @return  index of the view representing the given position, or 
   -1 if no view represents that position

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AsyncBoxView.updateLayout(DocumentEvent.ElementChange ec, DocumentEvent e, Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Update the layout in response to receiving notification of
 change from the model.  This is implemented to note the 
 change on the ChildLocator so that offsets of the children
 will be correctly computed.

 @param ec changes to the element this view is responsible
  for (may be null if there were no changes).
 @param e the change information from the associated document
 @param a the current allocation of the view
 @see #insertUpdate
 @see #removeUpdate
 @see #changedUpdate     

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AsyncBoxView.setParent(View parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the parent of the view.
 This is reimplemented to provide the superclass
 behavior as well as calling the <code>loadChildren</code>
 method if this view does not already have children.  
 The children should not be loaded in the 
 constructor because the act of setting the parent
 may cause them to try to search up the hierarchy
 (to get the hosting Container for example).
 If this view has children (the view is being moved
 from one place in the view hierarchy to another), 
 the <code>loadChildren</code> method will not be called.

 @param parent the parent of the view, null if none

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.text.AsyncBoxView.preferenceChanged(View child, boolean width, boolean height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Child views can call this on the parent to indicate that
 the preference has changed and should be reconsidered
 for layout.  This is reimplemented to queue new work
 on the layout thread.  This method gets messaged from
 multiple threads via the children.

 @param child the child view
 @param width true if the width preference has changed
 @param height true if the height preference has changed
 @see javax.swing.JComponent#revalidate

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AsyncBoxView.setSize(float width, float height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the size of the view.  This should cause 
 layout of the view if the view caches any layout
 information.
 <p>
 Since the major axis is updated asynchronously and should be 
 the sum of the tiled children the call is ignored for the major 
 axis.  Since the minor axis is flexible, work is queued to resize 
 the children if the minor span changes.

 @param width the width >= 0
 @param height the height >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AsyncBoxView.paint(Graphics g, Shape alloc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Render the view using the given allocation and
 rendering surface.
 <p>
 This is implemented to determine whether or not the
 desired region to be rendered (i.e. the unclipped 
 area) is up to date or not.  If up-to-date the children
 are rendered.  If not up-to-date, a task to build
 the desired area is placed on the layout queue as
 a high priority task.  This keeps by event thread
 moving by rendering if ready, and postponing until
 a later time if not ready (since paint requests
 can be rescheduled).

 @param g the rendering surface to use
 @param alloc the allocated region to render into
 @see View#paint

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.AsyncBoxView.getPreferredSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the preferred span for this view along an
 axis.

 @param axis may be either View.X_AXIS or View.Y_AXIS
 @return   the span the view would like to be rendered into >= 0.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.  
           The parent may choose to resize or break the view.
 @exception IllegalArgumentException for an invalid axis type

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.AsyncBoxView.getMinimumSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the minimum span for this view along an
 axis.

 @param axis may be either View.X_AXIS or View.Y_AXIS
 @return  the span the view would like to be rendered into >= 0.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.  
           The parent may choose to resize or break the view.
 @exception IllegalArgumentException for an invalid axis type

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.AsyncBoxView.getMaximumSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the maximum span for this view along an
 axis.

 @param axis may be either View.X_AXIS or View.Y_AXIS
 @return   the span the view would like to be rendered into >= 0.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.  
           The parent may choose to resize or break the view.
 @exception IllegalArgumentException for an invalid axis type

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AsyncBoxView.getViewCount()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the number of views in this view.  Since
 the default is to not be a composite view this
 returns 0.

 @return the number of views >= 0
 @see View#getViewCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.View javax.swing.text.AsyncBoxView.getView(int n)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Gets the nth child view.  Since there are no
 children by default, this returns null.

 @param n the number of the view to get, >= 0 && < getViewCount()
 @return the view

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Shape javax.swing.text.AsyncBoxView.getChildAllocation(int index, Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the allocation for the given child view. 
 This enables finding out where various views
 are located, without assuming the views store
 their location.  This returns null since the
 default is to not have any child views.

 @param index the index of the child, >= 0 && < getViewCount()
 @param a  the allocation to this view.
 @return the allocation to the child

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AsyncBoxView.getViewIndex(int pos, Position.Bias b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the child view index representing the given position in
 the model.  By default a view has no children so this is implemented
 to return -1 to indicate there is no valid child index for any
 position.

 @param pos the position >= 0
 @return  index of the view representing the given position, or 
   -1 if no view represents that position
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Shape javax.swing.text.AsyncBoxView.modelToView(int pos, Shape a, Position.Bias b) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.

 @param pos the position to convert >= 0
 @param a the allocated region to render into
 @param b the bias toward the previous character or the
  next character represented by the offset, in case the 
  position is a boundary of two views. 
 @return the bounding box of the given position is returned
 @exception BadLocationException  if the given position does
   not represent a valid location in the associated document
 @exception IllegalArgumentException for an invalid bias argument
 @see View#viewToModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AsyncBoxView.viewToModel(float x, float y, Shape a, javax.swing.text.Position.Bias[] biasReturn)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.  The biasReturn argument will be
 filled in to indicate that the point given is closer to the next
 character in the model or the previous character in the model.
 <p>
 This is expected to be called by the GUI thread, holding a 
 read-lock on the associated model.  It is implemented to
 locate the child view and determine it's allocation with a
 lock on the ChildLocator object, and to call viewToModel
 on the child view with a lock on the ChildState object 
 to avoid interaction with the layout thread.

 @param x the X coordinate >= 0
 @param y the Y coordinate >= 0
 @param a the allocated region to render into
 @return the location within the model that best represents the
  given point in the view >= 0.  The biasReturn argument will be
 filled in to indicate that the point given is closer to the next
 character in the model or the previous character in the model.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AsyncBoxView.getNextVisualPositionFrom(int pos, Position.Bias b, Shape a, int direction, javax.swing.text.Position.Bias[] biasRet) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a way to determine the next visually represented model 
 location that one might place a caret.  Some views may not be visible,
 they might not be in the same order found in the model, or they just
 might not allow access to some of the locations in the model.

 @param pos the position to convert >= 0
 @param a the allocated region to render into
 @param direction the direction from the current position that can
  be thought of as the arrow keys typically found on a keyboard;
  this may be one of the following: 
  <ul>
  <code>SwingConstants.WEST</code>
  <code>SwingConstants.EAST</code> 
  <code>SwingConstants.NORTH</code>
  <code>SwingConstants.SOUTH</code>  
  </ul>
 @param biasRet an array contain the bias that was checked
 @return the location within the model that best represents the next
  location visual position
 @exception BadLocationException
 @exception IllegalArgumentException if <code>direction</code> is invalid

<!-- END DATA -->
