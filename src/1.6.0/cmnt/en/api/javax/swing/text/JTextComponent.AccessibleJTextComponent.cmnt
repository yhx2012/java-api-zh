<!-- BEGIN KEY -->
public class javax.swing.text.JTextComponent.AccessibleJTextComponent extends javax.swing.JComponent.AccessibleJComponent implements javax.accessibility.AccessibleText, javax.swing.event.CaretListener, javax.swing.event.DocumentListener, javax.accessibility.AccessibleAction, javax.accessibility.AccessibleEditableText, javax.accessibility.AccessibleExtendedText
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class implements accessibility support for the 
 <code>JTextComponent</code> class.  It provides an implementation of 
 the Java Accessibility API appropriate to menu user-interface elements.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.JTextComponent.AccessibleJTextComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an AccessibleJTextComponent.  Adds a listener to track
 caret change.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.JTextComponent.AccessibleJTextComponent.caretUpdate(CaretEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Handles caret updates (fire appropriate property change event,
 which are AccessibleContext.ACCESSIBLE_CARET_PROPERTY and
 AccessibleContext.ACCESSIBLE_SELECTION_PROPERTY).
 This keeps track of the dot position internally.  When the caret
 moves, the internal position is updated after firing the event.

 @param e the CaretEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.JTextComponent.AccessibleJTextComponent.insertUpdate(DocumentEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Handles document insert (fire appropriate property change event
 which is AccessibleContext.ACCESSIBLE_TEXT_PROPERTY).
 This tracks the changed offset via the event.

 @param e the DocumentEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.JTextComponent.AccessibleJTextComponent.removeUpdate(DocumentEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Handles document remove (fire appropriate property change event,
 which is AccessibleContext.ACCESSIBLE_TEXT_PROPERTY).
 This tracks the changed offset via the event.

 @param e the DocumentEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.JTextComponent.AccessibleJTextComponent.changedUpdate(DocumentEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Handles document remove (fire appropriate property change event,
 which is AccessibleContext.ACCESSIBLE_TEXT_PROPERTY).
 This tracks the changed offset via the event.

 @param e the DocumentEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleStateSet javax.swing.text.JTextComponent.AccessibleJTextComponent.getAccessibleStateSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the state set of the JTextComponent.  
 The AccessibleStateSet of an object is composed of a set of 
 unique AccessibleState's.  A change in the AccessibleStateSet 
 of an object will cause a PropertyChangeEvent to be fired
 for the AccessibleContext.ACCESSIBLE_STATE_PROPERTY property.

 @return an instance of AccessibleStateSet containing the
 current state set of the object
 @see AccessibleStateSet
 @see AccessibleState
 @see #addPropertyChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleRole javax.swing.text.JTextComponent.AccessibleJTextComponent.getAccessibleRole()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the role of this object.

 @return an instance of AccessibleRole describing the role of the 
 object (AccessibleRole.TEXT)
 @see AccessibleRole

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleText javax.swing.text.JTextComponent.AccessibleJTextComponent.getAccessibleText()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the AccessibleText associated with this object.  In the
 implementation of the Java Accessibility API for this class, 
 return this object, which is responsible for implementing the
 AccessibleText interface on behalf of itself.
 
 @return this object

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.JTextComponent.AccessibleJTextComponent.getIndexAtPoint(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Given a point in local coordinates, return the zero-based index
 of the character under that Point.  If the point is invalid,
 this method returns -1.

 @param p the Point in local coordinates
 @return the zero-based index of the character under Point p.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.text.JTextComponent.AccessibleJTextComponent.getCharacterBounds(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the bounding box of the character at the given
 index into the string.  The bounds are returned in local
 coordinates.  If the index is invalid a null rectangle
 is returned.

 The screen coordinates returned are "unscrolled coordinates"
 if the JTextComponent is contained in a JScrollPane in which
 case the resulting rectangle should be composed with the parent
 coordinates.  A good algorithm to use is:
 <nf>
 Accessible a:
 AccessibleText at = a.getAccessibleText();
 AccessibleComponent ac = a.getAccessibleComponent();
 Rectangle r = at.getCharacterBounds();
 Point p = ac.getLocation();
 r.x += p.x;
 r.y += p.y;
 </nf>

 Note: the JTextComponent must have a valid size (e.g. have
 been added to a parent container whose ancestor container
 is a valid top-level window) for this method to be able
 to return a meaningful (non-null) value.

 @param i the index into the String >= 0
 @return the screen coordinates of the character's bounding box

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.JTextComponent.AccessibleJTextComponent.getCharCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of characters (valid indices)

 @return the number of characters >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.JTextComponent.AccessibleJTextComponent.getCaretPosition()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the zero-based offset of the caret.

 Note: The character to the right of the caret will have the
 same index value as the offset (the caret is between
 two characters).

 @return the zero-based offset of the caret.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.JTextComponent.AccessibleJTextComponent.getCharacterAttribute(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the AttributeSet for a given character (at a given index).

 @param i the zero-based index into the text
 @return the AttributeSet of the character

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.JTextComponent.AccessibleJTextComponent.getSelectionStart()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the start offset within the selected text.
 If there is no selection, but there is
 a caret, the start and end offsets will be the same.
 Return 0 if the text is empty, or the caret position
 if no selection.

 @return the index into the text of the start of the selection >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.JTextComponent.AccessibleJTextComponent.getSelectionEnd()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the end offset within the selected text.
 If there is no selection, but there is
 a caret, the start and end offsets will be the same.
 Return 0 if the text is empty, or the caret position
 if no selection.

 @return the index into teh text of the end of the selection >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.JTextComponent.AccessibleJTextComponent.getSelectedText()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the portion of the text that is selected.

 @return the text, null if no selection

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.JTextComponent.AccessibleJTextComponent.getAtIndex(int part, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the String at a given index. Whitespace
 between words is treated as a word.

 @param part the CHARACTER, WORD, or SENTENCE to retrieve
 @param index an index within the text
 @return the letter, word, or sentence.


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.JTextComponent.AccessibleJTextComponent.getAfterIndex(int part, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the String after a given index. Whitespace
 between words is treated as a word.

 @param part the CHARACTER, WORD, or SENTENCE to retrieve
 @param index an index within the text
 @return the letter, word, or sentence.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.JTextComponent.AccessibleJTextComponent.getBeforeIndex(int part, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the String before a given index. Whitespace
 between words is treated a word.

 @param part the CHARACTER, WORD, or SENTENCE to retrieve
 @param index an index within the text
 @return the letter, word, or sentence.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleEditableText javax.swing.text.JTextComponent.AccessibleJTextComponent.getAccessibleEditableText()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the AccessibleEditableText interface for
 this text component.

 @return the AccessibleEditableText interface
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.JTextComponent.AccessibleJTextComponent.setTextContents(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the text contents to the specified string.

 @param s the string to set the text contents
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.JTextComponent.AccessibleJTextComponent.insertTextAtIndex(int index, String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified string at the given index

 @param index the index in the text where the string will 
 be inserted
 @param s the string to insert in the text
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.JTextComponent.AccessibleJTextComponent.getTextRange(int startIndex, int endIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the text string between two indices.
 
 @param startIndex the starting index in the text
 @param endIndex the ending index in the text
 @return the text string between the indices
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.JTextComponent.AccessibleJTextComponent.delete(int startIndex, int endIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Deletes the text between two indices

 @param startIndex the starting index in the text
 @param endIndex the ending index in the text
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.JTextComponent.AccessibleJTextComponent.cut(int startIndex, int endIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Cuts the text between two indices into the system clipboard.

 @param startIndex the starting index in the text
 @param endIndex the ending index in the text
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.JTextComponent.AccessibleJTextComponent.paste(int startIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Pastes the text from the system clipboard into the text
 starting at the specified index.

 @param startIndex the starting index in the text
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.JTextComponent.AccessibleJTextComponent.replaceText(int startIndex, int endIndex, String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Replaces the text between two indices with the specified
 string.

 @param startIndex the starting index in the text
 @param endIndex the ending index in the text
 @param s the string to replace the text between two indices
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.JTextComponent.AccessibleJTextComponent.selectText(int startIndex, int endIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Selects the text between two indices.

 @param startIndex the starting index in the text
 @param endIndex the ending index in the text
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.JTextComponent.AccessibleJTextComponent.setAttributes(int startIndex, int endIndex, AttributeSet as)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets attributes for the text between two indices.

 @param startIndex the starting index in the text
 @param endIndex the ending index in the text
 @param as the attribute set
 @see AttributeSet
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleTextSequence javax.swing.text.JTextComponent.AccessibleJTextComponent.getTextSequenceAt(int part, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>AccessibleTextSequence</code> at a given 
 <code>index</code>.

 @param part the <code>CHARACTER</code>, <code>WORD</code>,
 <code>SENTENCE</code>, <code>LINE</code> or 
 <code>ATTRIBUTE_RUN</code> to retrieve
 @param index an index within the text
 @return an <code>AccessibleTextSequence</code> specifying the text if
 <code>part</code> and <code>index</code> are valid.  Otherwise,
 <code>null</code> is returned

 @see javax.accessibility.AccessibleText#CHARACTER
 @see javax.accessibility.AccessibleText#WORD
 @see javax.accessibility.AccessibleText#SENTENCE
 @see javax.accessibility.AccessibleExtendedText#LINE
 @see javax.accessibility.AccessibleExtendedText#ATTRIBUTE_RUN

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleTextSequence javax.swing.text.JTextComponent.AccessibleJTextComponent.getTextSequenceAfter(int part, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>AccessibleTextSequence</code> after a given 
 <code>index</code>.

 @param part the <code>CHARACTER</code>, <code>WORD</code>,
 <code>SENTENCE</code>, <code>LINE</code> or 
 <code>ATTRIBUTE_RUN</code> to retrieve
 @param index an index within the text
 @return an <code>AccessibleTextSequence</code> specifying the text
 if <code>part</code> and <code>index</code> are valid.  Otherwise,
 <code>null</code> is returned

 @see javax.accessibility.AccessibleText#CHARACTER
 @see javax.accessibility.AccessibleText#WORD
 @see javax.accessibility.AccessibleText#SENTENCE
 @see javax.accessibility.AccessibleExtendedText#LINE
 @see javax.accessibility.AccessibleExtendedText#ATTRIBUTE_RUN

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleTextSequence javax.swing.text.JTextComponent.AccessibleJTextComponent.getTextSequenceBefore(int part, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>AccessibleTextSequence</code> before a given 
 <code>index</code>.

 @param part the <code>CHARACTER</code>, <code>WORD</code>,
 <code>SENTENCE</code>, <code>LINE</code> or 
 <code>ATTRIBUTE_RUN</code> to retrieve
 @param index an index within the text
 @return an <code>AccessibleTextSequence</code> specifying the text 
 if <code>part</code> and <code>index</code> are valid.  Otherwise,
 <code>null</code> is returned

 @see javax.accessibility.AccessibleText#CHARACTER
 @see javax.accessibility.AccessibleText#WORD
 @see javax.accessibility.AccessibleText#SENTENCE
 @see javax.accessibility.AccessibleExtendedText#LINE
 @see javax.accessibility.AccessibleExtendedText#ATTRIBUTE_RUN

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.text.JTextComponent.AccessibleJTextComponent.getTextBounds(int startIndex, int endIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>Rectangle</code> enclosing the text between
 two indicies.

 @param startIndex the start index in the text
 @param endIndex the end index in the text
 @return the bounding rectangle of the text if the indices are valid.
 Otherwise, <code>null</code> is returned

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.JTextComponent.AccessibleJTextComponent.getAccessibleActionCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of accessible actions available in this object
 If there are more than one, the first one is considered the 
 "default" action of the object.

 @return the zero-based number of Actions in this object
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.JTextComponent.AccessibleJTextComponent.getAccessibleActionDescription(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a description of the specified action of the object.

 @param i zero-based index of the actions
 @return a String description of the action
 @see #getAccessibleActionCount
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.JTextComponent.AccessibleJTextComponent.doAccessibleAction(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Performs the specified Action on the object

 @param i zero-based index of actions
 @return true if the action was performed; otherwise false.
 @see #getAccessibleActionCount
 @since 1.4

<!-- END DATA -->
