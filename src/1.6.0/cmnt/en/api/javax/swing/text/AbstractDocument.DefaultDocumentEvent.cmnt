<!-- BEGIN KEY -->
public class javax.swing.text.AbstractDocument.DefaultDocumentEvent extends javax.swing.undo.CompoundEdit implements javax.swing.event.DocumentEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
 Stores document changes as the document is being
 modified.  Can subsequently be used for change notification
 when done with the document modification transaction.
 This is used by the AbstractDocument class and its extensions
 for broadcasting change information to the document listeners.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AbstractDocument.DefaultDocumentEvent(int offs, int len, DocumentEvent.EventType type)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a change record.

 @param offs the offset into the document of the change >= 0
 @param len  the length of the change >= 0
 @param type the type of event (DocumentEvent.EventType)
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.AbstractDocument.DefaultDocumentEvent.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string description of the change event.

 @return a string

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.AbstractDocument.DefaultDocumentEvent.addEdit(UndoableEdit anEdit)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a document edit.  If the number of edits crosses
 a threshold, this switches on a hashtable lookup for
 ElementChange implementations since access of these
 needs to be relatively quick.

 @param anEdit a document edit record
 @return true if the edit was added

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AbstractDocument.DefaultDocumentEvent.redo() throws javax.swing.undo.CannotRedoException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Redoes a change.

 @exception CannotRedoException if the change cannot be redone

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AbstractDocument.DefaultDocumentEvent.undo() throws javax.swing.undo.CannotUndoException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Undoes a change.

 @exception CannotUndoException if the change cannot be undone

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.AbstractDocument.DefaultDocumentEvent.isSignificant()
<!-- END KEY -->
<!-- BEGIN DATA -->
 DefaultDocument events are significant.  If you wish to aggregate
 DefaultDocumentEvents to present them as a single edit to the user
 place them into a CompoundEdit.

 @return whether the event is significant for edit undo purposes

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.AbstractDocument.DefaultDocumentEvent.getPresentationName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a localized, human readable description of this edit
 suitable for use in, say, a change log.

 @return the description

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.AbstractDocument.DefaultDocumentEvent.getUndoPresentationName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a localized, human readable description of the undoable
 form of this edit, e.g. for use as an Undo menu item. Typically
 derived from getDescription();

 @return the description

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.AbstractDocument.DefaultDocumentEvent.getRedoPresentationName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a localized, human readable description of the redoable
 form of this edit, e.g. for use as a Redo menu item. Typically
 derived from getPresentationName();

 @return the description

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.DocumentEvent.EventType javax.swing.text.AbstractDocument.DefaultDocumentEvent.getType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the type of event.

 @return the event type as a DocumentEvent.EventType
 @see DocumentEvent#getType

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AbstractDocument.DefaultDocumentEvent.getOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the offset within the document of the start of the change.

 @return the offset >= 0
 @see DocumentEvent#getOffset

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AbstractDocument.DefaultDocumentEvent.getLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the length of the change.

 @return the length >= 0
 @see DocumentEvent#getLength

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Document javax.swing.text.AbstractDocument.DefaultDocumentEvent.getDocument()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the document that sourced the change event.

 @return the document
 @see DocumentEvent#getDocument

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.DocumentEvent.ElementChange javax.swing.text.AbstractDocument.DefaultDocumentEvent.getChange(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the changes for an element.

 @param elem the element
 @return the changes

<!-- END DATA -->
