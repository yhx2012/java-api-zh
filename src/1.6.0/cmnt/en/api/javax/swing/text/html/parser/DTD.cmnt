<!-- BEGIN KEY -->
public class javax.swing.text.html.parser.DTD extends java.lang.Object implements javax.swing.text.html.parser.DTDConstants
<!-- END KEY -->
<!-- BEGIN DATA -->
 The representation of an SGML DTD.  DTD describes a document
 syntax and is used in parsing of HTML documents.  It contains
 a list of elements and their attributes as well as a list of
 entities defined in the DTD.

 @see Element
 @see AttributeList
 @see ContentModel
 @see Parser
 @author Arthur van Hoff
 @version 1.24 04/07/06

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.html.parser.DTD(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new DTD with the specified name.
 @param name the name, as a <code>String</code> of the new DTD

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.html.parser.DTD.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the name of the DTD.
 @return the name of the DTD

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.parser.Entity javax.swing.text.html.parser.DTD.getEntity(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets an entity by name.
 @return the <code>Entity</code> corresponding to the 
   <code>name</code> <code>String</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.parser.Entity javax.swing.text.html.parser.DTD.getEntity(int ch)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a character entity.
 @return the <code>Entity</code> corresponding to the
    <code>ch</code> character

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.parser.Element javax.swing.text.html.parser.DTD.getElement(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets an element by name. A new element is
 created if the element doesn't exist.

 @param name the requested <code>String</code>
 @return the <code>Element</code> corresponding to
   <code>name</code>, which may be newly created

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.parser.Element javax.swing.text.html.parser.DTD.getElement(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets an element by index.

 @param index the requested index
 @return the <code>Element</code> corresponding to
   <code>index</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.parser.Entity javax.swing.text.html.parser.DTD.defineEntity(String name, int type, char[] data)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Defines an entity.  If the <code>Entity</code> specified
 by <code>name</code>, <code>type</code>, and <code>data</code>
 exists, it is returned; otherwise a new <code>Entity</code>
 is created and is returned.

 @param name the name of the <code>Entity</code> as a <code>String</code>
 @param type the type of the <code>Entity</code>
 @param data the <code>Entity</code>'s data
 @return the <code>Entity</code> requested or a new <code>Entity</code>
   if not found

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.parser.Element javax.swing.text.html.parser.DTD.defineElement(String name, int type, boolean omitStart, boolean omitEnd, ContentModel content, BitSet exclusions, BitSet inclusions, AttributeList atts)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>Element</code> which matches the
 specified parameters.  If one doesn't exist, a new
 one is created and returned.

 @param name the name of the <code>Element</code>
 @param type the type of the <code>Element</code>
 @param omitStart <code>true</code> if start should be omitted
 @param omitEnd  <code>true</code> if end should be omitted
 @param content  the <code>ContentModel</code>
 @param atts the <code>AttributeList</code> specifying the 
    <code>Element</code>
 @return the <code>Element</code> specified

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.parser.DTD.defineAttributes(String name, AttributeList atts)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Defines attributes for an {@code Element}.

 @param name the name of the <code>Element</code>
 @param atts the <code>AttributeList</code> specifying the
    <code>Element</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.parser.Entity javax.swing.text.html.parser.DTD.defEntity(String name, int type, int ch)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates and returns a character <code>Entity</code>.
 @param name the entity's name
 @return the new character <code>Entity</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.html.parser.Entity javax.swing.text.html.parser.DTD.defEntity(String name, int type, String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates and returns an <code>Entity</code>.
 @param name the entity's name
 @return the new <code>Entity</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.html.parser.Element javax.swing.text.html.parser.DTD.defElement(String name, int type, boolean omitStart, boolean omitEnd, ContentModel content, java.lang.String[] exclusions, java.lang.String[] inclusions, AttributeList atts)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates and returns an <code>Element</code>.
 @param name the element's name
 @return the new <code>Element</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.html.parser.AttributeList javax.swing.text.html.parser.DTD.defAttributeList(String name, int type, int modifier, String value, String values, AttributeList atts)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates and returns an <code>AttributeList</code>.
 @param name the attribute list's name
 @return the new <code>AttributeList</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.html.parser.ContentModel javax.swing.text.html.parser.DTD.defContentModel(int type, Object obj, ContentModel next)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates and returns a new content model.
 @param type the type of the new content model
 @return the new <code>ContentModel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.html.parser.DTD.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this DTD.
 @return the string representation of this DTD

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.text.html.parser.DTD javax.swing.text.html.parser.DTD.getDTD(String name) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a DTD with the specified <code>name</code>.  If
 a DTD with that name doesn't exist, one is created
 and returned.  Any uppercase characters in the name
 are converted to lowercase.

 @param name the name of the DTD
 @return the DTD which corresponds to <code>name</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.parser.DTD.read(DataInputStream in) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Recreates a DTD from an archived format.
 @param in  the <code>DataInputStream</code> to read from

<!-- END DATA -->
