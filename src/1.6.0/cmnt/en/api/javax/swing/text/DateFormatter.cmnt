<!-- BEGIN KEY -->
public class javax.swing.text.DateFormatter extends javax.swing.text.InternationalFormatter
<!-- END KEY -->
<!-- BEGIN DATA -->
 DateFormatter is an <code>InternationalFormatter</code> that does its
 formatting by way of an instance of <code>java.text.DateFormat</code>.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @see java.text.DateFormat

 @version 1.5 04/09/01
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.DateFormatter()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This is shorthand for
 <code>new DateFormatter(DateFormat.getDateInstance())</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.DateFormatter(DateFormat format)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a DateFormatter configured with the specified
 <code>Format</code> instance.

 @param format Format used to dictate legal values

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DateFormatter.setFormat(DateFormat format)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the format that dictates the legal values that can be edited
 and displayed.
 <p>
 If you have used the nullary constructor the value of this property
 will be determined for the current locale by way of the
 <code>Dateformat.getDateInstance()</code> method.

 @param format DateFormat instance used for converting from/to Strings

<!-- END DATA -->
