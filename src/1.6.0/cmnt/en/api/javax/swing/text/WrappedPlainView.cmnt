<!-- BEGIN KEY -->
public class javax.swing.text.WrappedPlainView extends javax.swing.text.BoxView implements javax.swing.text.TabExpander
<!-- END KEY -->
<!-- BEGIN DATA -->
 View of plain text (text with only one font and color)
 that does line-wrapping.  This view expects that its
 associated element has child elements that represent
 the lines it should be wrapping.  It is implemented
 as a vertical box that contains logical line views.
 The logical line views are nested classes that render
 the logical line as multiple physical line if the logical
 line is too wide to fit within the allocation.  The
 line views draw upon the outer class for its state
 to reduce their memory requirements.
 <p>
 The line views do all of their rendering through the
 <code>drawLine</code> method which in turn does all of
 its rendering through the <code>drawSelectedText</code>
 and <code>drawUnselectedText</code> methods.  This 
 enables subclasses to easily specialize the rendering
 without concern for the layout aspects.

 @author  Timothy Prinzing
 @version 1.41 05/05/06
 @see     View

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.WrappedPlainView(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new WrappedPlainView.  Lines will be wrapped
 on character boundaries.

 @param elem the element underlying the view

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.WrappedPlainView(Element elem, boolean wordWrap)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new WrappedPlainView.  Lines can be wrapped on
 either character or word boundaries depending upon the
 setting of the wordWrap parameter.

 @param elem the element underlying the view
 @param wordWrap should lines be wrapped on word boundaries?

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.WrappedPlainView.getTabSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the tab size set for the document, defaulting to 8.

 @return the tab size

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.WrappedPlainView.drawLine(int p0, int p1, Graphics g, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Renders a line of text, suppressing whitespace at the end
 and expanding any tabs.  This is implemented to make calls
 to the methods <code>drawUnselectedText</code> and 
 <code>drawSelectedText</code> so that the way selected and 
 unselected text are rendered can be customized.

 @param p0 the starting document location to use >= 0
 @param p1 the ending document location to use >= p1
 @param g the graphics context
 @param x the starting X position >= 0
 @param y the starting Y position >= 0
 @see #drawUnselectedText
 @see #drawSelectedText

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.WrappedPlainView.drawUnselectedText(Graphics g, int x, int y, int p0, int p1) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Renders the given range in the model as normal unselected
 text.  

 @param g the graphics context
 @param x the starting X coordinate >= 0
 @param y the starting Y coordinate >= 0
 @param p0 the beginning position in the model >= 0
 @param p1 the ending position in the model >= p0
 @return the X location of the end of the range >= 0
 @exception BadLocationException if the range is invalid

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.WrappedPlainView.drawSelectedText(Graphics g, int x, int y, int p0, int p1) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Renders the given range in the model as selected text.  This
 is implemented to render the text in the color specified in
 the hosting component.  It assumes the highlighter will render
 the selected background.

 @param g the graphics context
 @param x the starting X coordinate >= 0
 @param y the starting Y coordinate >= 0
 @param p0 the beginning position in the model >= 0
 @param p1 the ending position in the model >= p0
 @return the location of the end of the range.
 @exception BadLocationException if the range is invalid

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final javax.swing.text.Segment javax.swing.text.WrappedPlainView.getLineBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gives access to a buffer that can be used to fetch 
 text from the associated document.

 @return the buffer

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.WrappedPlainView.calculateBreakPosition(int p0, int p1)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This is called by the nested wrapped line
 views to determine the break location.  This can
 be reimplemented to alter the breaking behavior.
 It will either break at word or character boundaries
 depending upon the break argument given at
 construction.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.WrappedPlainView.loadChildren(ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Loads all of the children to initialize the view.
 This is called by the <code>setParent</code> method.
 Subclasses can reimplement this to initialize their
 child views in a different manner.  The default
 implementation creates a child view for each 
 child element.

 @param f the view factory

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.WrappedPlainView.nextTabStop(float x, int tabOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the next tab stop position after a given reference position.
 This implementation does not support things like centering so it
 ignores the tabOffset argument.

 @param x the current position >= 0
 @param tabOffset the position within the text stream
   that the tab occurred at >= 0.
 @return the tab stop, measured in points >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.WrappedPlainView.paint(Graphics g, Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Renders using the given rendering surface and area 
 on that surface.  This is implemented to stash the
 selection positions, selection colors, and font
 metrics for the nested lines to use.

 @param g the rendering surface to use
 @param a the allocated region to render into

 @see View#paint

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.WrappedPlainView.setSize(float width, float height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the size of the view.  This should cause 
 layout of the view along the given axis, if it 
 has any layout duties.

 @param width the width >= 0
 @param height the height >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.WrappedPlainView.getPreferredSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the preferred span for this view along an
 axis.  This is implemented to provide the superclass
 behavior after first making sure that the current font
 metrics are cached (for the nested lines which use
 the metrics to determine the height of the potentially
 wrapped lines).

 @param axis may be either View.X_AXIS or View.Y_AXIS
 @return  the span the view would like to be rendered into.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.  
           The parent may choose to resize or break the view.
 @see View#getPreferredSpan

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.WrappedPlainView.getMinimumSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the minimum span for this view along an
 axis.  This is implemented to provide the superclass
 behavior after first making sure that the current font
 metrics are cached (for the nested lines which use
 the metrics to determine the height of the potentially
 wrapped lines).

 @param axis may be either View.X_AXIS or View.Y_AXIS
 @return  the span the view would like to be rendered into.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.  
           The parent may choose to resize or break the view.
 @see View#getMinimumSpan

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.WrappedPlainView.getMaximumSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the maximum span for this view along an
 axis.  This is implemented to provide the superclass
 behavior after first making sure that the current font
 metrics are cached (for the nested lines which use
 the metrics to determine the height of the potentially
 wrapped lines).

 @param axis may be either View.X_AXIS or View.Y_AXIS
 @return  the span the view would like to be rendered into.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.  
           The parent may choose to resize or break the view.
 @see View#getMaximumSpan

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.WrappedPlainView.insertUpdate(DocumentEvent e, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gives notification that something was inserted into the 
 document in a location that this view is responsible for.
 This is implemented to simply update the children.

 @param e the change information from the associated document
 @param a the current allocation of the view
 @param f the factory to use to rebuild if the view has children
 @see View#insertUpdate

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.WrappedPlainView.removeUpdate(DocumentEvent e, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gives notification that something was removed from the 
 document in a location that this view is responsible for.
 This is implemented to simply update the children.

 @param e the change information from the associated document
 @param a the current allocation of the view
 @param f the factory to use to rebuild if the view has children
 @see View#removeUpdate

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.WrappedPlainView.changedUpdate(DocumentEvent e, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gives notification from the document that attributes were changed
 in a location that this view is responsible for.

 @param e the change information from the associated document
 @param a the current allocation of the view
 @param f the factory to use to rebuild if the view has children
 @see View#changedUpdate

<!-- END DATA -->
