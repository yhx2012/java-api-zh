<!-- BEGIN KEY -->
public class javax.swing.text.StyleContext extends java.lang.Object implements java.io.Serializable, javax.swing.text.AbstractDocument.AttributeContext
<!-- END KEY -->
<!-- BEGIN DATA -->
 A pool of styles and their associated resources.  This class determines
 the lifetime of a group of resources by being a container that holds
 caches for various resources such as font and color that get reused 
 by the various style definitions.  This can be shared by multiple
 documents if desired to maximize the sharing of related resources.
 <p>
 This class also provides efficient support for small sets of attributes
 and compresses them by sharing across uses and taking advantage of 
 their immutable nature.  Since many styles are replicated, the potential
 for sharing is significant, and copies can be extremely cheap.  
 Larger sets reduce the possibility of sharing, and therefore revert 
 automatically to a less space-efficient implementation.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @author  Timothy Prinzing
 @version 1.82 04/07/06

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.StyleContext.DEFAULT_STYLE
<!-- END KEY -->
<!-- BEGIN DATA -->
 The name given to the default logical style attached
 to paragraphs.

<!-- END DATA -->
<!-- BEGIN KEY -->
private int javax.swing.text.StyleContext.unusedSets
<!-- END KEY -->
<!-- BEGIN DATA -->
 Number of immutable sets that are not currently
 being used.  This helps indicate when the sets need
 to be cleaned out of the hashtable they are stored
 in.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.StyleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new StyleContext object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.swing.text.StyleContext javax.swing.text.StyleContext.getDefaultStyleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns default AttributeContext shared by all documents that
 don't bother to define/supply their own context.

 @return the context

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Style javax.swing.text.StyleContext.addStyle(String nm, Style parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a new style into the style hierarchy.  Style attributes
 resolve from bottom up so an attribute specified in a child
 will override an attribute specified in the parent.

 @param nm   the name of the style (must be unique within the
   collection of named styles in the document).  The name may 
   be null if the style is unnamed, but the caller is responsible
   for managing the reference returned as an unnamed style can't
   be fetched by name.  An unnamed style may be useful for things
   like character attribute overrides such as found in a style 
   run.
 @param parent the parent style.  This may be null if unspecified
   attributes need not be resolved in some other style.
 @return the created style

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.removeStyle(String nm)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a named style previously added to the document.  

 @param nm  the name of the style to remove

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Style javax.swing.text.StyleContext.getStyle(String nm)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches a named style previously added to the document

 @param nm  the name of the style
 @return the style

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<?> javax.swing.text.StyleContext.getStyleNames()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the names of the styles defined.

 @return the list of names as an enumeration

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.addChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a listener to track when styles are added
 or removed.

 @param l the change listener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.removeChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a listener that was tracking styles being
 added or removed.

 @param l the change listener

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.ChangeListener[] javax.swing.text.StyleContext.getChangeListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the <code>ChangeListener</code>s added
 to this StyleContext with addChangeListener().

 @return all of the <code>ChangeListener</code>s added or an empty
         array if no listeners have been added
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font javax.swing.text.StyleContext.getFont(AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the font from an attribute set.  This is
 implemented to try and fetch a cached font
 for the given AttributeSet, and if that fails 
 the font features are resolved and the
 font is fetched from the low-level font cache.

 @param attr the attribute set
 @return the font

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.text.StyleContext.getForeground(AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Takes a set of attributes and turn it into a foreground color
 specification.  This might be used to specify things
 like brighter, more hue, etc.  By default it simply returns
 the value specified by the StyleConstants.Foreground attribute.

 @param attr the set of attributes
 @return the color

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.text.StyleContext.getBackground(AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Takes a set of attributes and turn it into a background color
 specification.  This might be used to specify things
 like brighter, more hue, etc.  By default it simply returns
 the value specified by the StyleConstants.Background attribute.

 @param attr the set of attributes
 @return the color

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font javax.swing.text.StyleContext.getFont(String family, int style, int size)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a new font.  This returns a Font from a cache
 if a cached font exists.  If not, a Font is added to
 the cache.  This is basically a low-level cache for
 1.1 font features.

 @param family the font family (such as "Monospaced")
 @param style the style of the font (such as Font.PLAIN)
 @param size the point size >= 1
 @return the new font

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FontMetrics javax.swing.text.StyleContext.getFontMetrics(Font f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns font metrics for a font.

 @param f the font
 @return the metrics

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized javax.swing.text.AttributeSet javax.swing.text.StyleContext.addAttribute(AttributeSet old, Object name, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds an attribute to the given set, and returns
 the new representative set.
 <p>
 This method is thread safe, although most Swing methods
 are not. Please see 
 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A> for more information.     

 @param old the old attribute set
 @param name the non-null attribute name
 @param value the attribute value
 @return the updated attribute set
 @see MutableAttributeSet#addAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized javax.swing.text.AttributeSet javax.swing.text.StyleContext.addAttributes(AttributeSet old, AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a set of attributes to the element.
 <p>
 This method is thread safe, although most Swing methods
 are not. Please see 
 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A> for more information.     

 @param old the old attribute set
 @param attr the attributes to add
 @return the updated attribute set
 @see MutableAttributeSet#addAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized javax.swing.text.AttributeSet javax.swing.text.StyleContext.removeAttribute(AttributeSet old, Object name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes an attribute from the set.
 <p>
 This method is thread safe, although most Swing methods
 are not. Please see 
 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A> for more information.     

 @param old the old set of attributes
 @param name the non-null attribute name
 @return the updated attribute set
 @see MutableAttributeSet#removeAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized javax.swing.text.AttributeSet javax.swing.text.StyleContext.removeAttributes(AttributeSet old, java.util.Enumeration<?> names)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a set of attributes for the element.
 <p>
 This method is thread safe, although most Swing methods
 are not. Please see 
 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A> for more information.     

 @param old the old attribute set
 @param names the attribute names
 @return the updated attribute set
 @see MutableAttributeSet#removeAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized javax.swing.text.AttributeSet javax.swing.text.StyleContext.removeAttributes(AttributeSet old, AttributeSet attrs)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a set of attributes for the element.
 <p>
 This method is thread safe, although most Swing methods
 are not. Please see 
 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A> for more information.     

 @param old the old attribute set
 @param attrs the attributes
 @return the updated attribute set
 @see MutableAttributeSet#removeAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.StyleContext.getEmptySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches an empty AttributeSet.

 @return the set

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.reclaim(AttributeSet a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a set no longer needed by the MutableAttributeSet implmentation.
 This is useful for operation under 1.1 where there are no weak 
 references.  This would typically be called by the finalize method
 of the MutableAttributeSet implementation.
 <p>
 This method is thread safe, although most Swing methods
 are not. Please see 
 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A> for more information.     

 @param a the set to reclaim

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.StyleContext.getCompressionThreshold()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the maximum number of key/value pairs to try and 
 compress into unique/immutable sets.  Any sets above this
 limit will use hashtables and be a MutableAttributeSet.

 @return the threshold

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.StyleContext.SmallAttributeSet javax.swing.text.StyleContext.createSmallAttributeSet(AttributeSet a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a compact set of attributes that might be shared.
 This is a hook for subclasses that want to alter the 
 behavior of SmallAttributeSet.  This can be reimplemented
 to return an AttributeSet that provides some sort of
 attribute conversion.

 @param a The set of attributes to be represented in the
  the compact form.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.MutableAttributeSet javax.swing.text.StyleContext.createLargeAttributeSet(AttributeSet a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a large set of attributes that should trade off
 space for time.  This set will not be shared.  This is
 a hook for subclasses that want to alter the behavior
 of the larger attribute storage format (which is 
 SimpleAttributeSet by default).   This can be reimplemented
 to return a MutableAttributeSet that provides some sort of
 attribute conversion.

 @param a The set of attributes to be represented in the
  the larger form.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.StyleContext.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Converts a StyleContext to a String.

 @return the string

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.writeAttributes(ObjectOutputStream out, AttributeSet a) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Context-specific handling of writing out attributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.readAttributes(ObjectInputStream in, MutableAttributeSet a) throws java.lang.ClassNotFoundException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Context-specific handling of reading in attributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.text.StyleContext.writeAttributeSet(ObjectOutputStream out, AttributeSet a) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a set of attributes to the given object stream
 for the purpose of serialization.  This will take
 special care to deal with static attribute keys that
 have been registered wit the 
 <code>registerStaticAttributeKey</code> method.
 Any attribute key not regsitered as a static key
 will be serialized directly.  All values are expected
 to be serializable.

 @param out the output stream
 @param a the attribute set
 @exception IOException on any I/O error

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.text.StyleContext.readAttributeSet(ObjectInputStream in, MutableAttributeSet a) throws java.lang.ClassNotFoundException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads a set of attributes from the given object input
 stream that have been previously written out with
 <code>writeAttributeSet</code>.  This will try to restore
 keys that were static objects to the static objects in
 the current virtual machine considering only those keys
 that have been registered with the 
 <code>registerStaticAttributeKey</code> method.
 The attributes retrieved from the stream will be placed
 into the given mutable set.

 @param in the object stream to read the attribute data from.
 @param a  the attribute set to place the attribute 
   definitions in.
 @exception ClassNotFoundException passed upward if encountered
  when reading the object stream.
 @exception IOException passed upward if encountered when
  reading the object stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.text.StyleContext.registerStaticAttributeKey(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Registers an object as a static object that is being
 used as a key in attribute sets.  This allows the key
 to be treated specially for serialization.
 <p>
 For operation under a 1.1 virtual machine, this
 uses the value returned by <code>toString</code>
 concatenated to the classname.  The value returned
 by toString should not have the class reference
 in it (ie it should be reimplemented from the 
 definition in Object) in order to be the same when
 recomputed later.

 @param key the non-null object key

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Object javax.swing.text.StyleContext.getStaticAttribute(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the object previously registered with
 <code>registerStaticAttributeKey</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Object javax.swing.text.StyleContext.getStaticAttributeKey(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the String that <code>key</code> will be registered with
 @see #getStaticAttribute
 @see #registerStaticAttributeKey

<!-- END DATA -->
