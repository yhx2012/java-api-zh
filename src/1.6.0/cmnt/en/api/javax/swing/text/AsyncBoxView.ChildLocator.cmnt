<!-- BEGIN KEY -->
public class javax.swing.text.AsyncBoxView.ChildLocator extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 A class to manage the effective position of the
 child views in a localized area while changes are
 being made around the localized area.  The AsyncBoxView
 may be continuously changing, but the visible area
 needs to remain fairly stable until the layout thread
 decides to publish an update to the parent.
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.AsyncBoxView.ChildState javax.swing.text.AsyncBoxView.ChildLocator.lastValidOffset
<!-- END KEY -->
<!-- BEGIN DATA -->
 The location of the last offset calculation
 that is valid.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.text.AsyncBoxView.ChildLocator.lastAlloc
<!-- END KEY -->
<!-- BEGIN DATA -->
 The last seen allocation (for repainting when changes
 are flushed upward).

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.text.AsyncBoxView.ChildLocator.childAlloc
<!-- END KEY -->
<!-- BEGIN DATA -->
 A shape to use for the child allocation to avoid
 creating a lot of garbage.  

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AsyncBoxView.ChildLocator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 construct a child locator.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.text.AsyncBoxView.ChildLocator.childChanged(AsyncBoxView.ChildState cs)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notification that a child changed.  This can effect
 whether or not new offset calculations are needed.
 This is called by a ChildState object that has 
 changed it's major span.  This can therefore be
 called by multiple threads.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.text.AsyncBoxView.ChildLocator.paintChildren(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paint the children that intersect the clip area.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.Shape javax.swing.text.AsyncBoxView.ChildLocator.getChildAllocation(int index, Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetch the allocation to use for a child view.
 This will update the offsets for all children
 not yet updated before the given index.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AsyncBoxView.ChildLocator.getViewIndexAtPoint(float x, float y, Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the child view index at the given point.
 This is called by the various View methods that
 need to calculate which child to forward a message
 to.  This should be called by a block synchronized
 on this object, and would typically be followed
 with one or more calls to getChildAllocation that
 should also be in the synchronized block.

 @param x the X coordinate >= 0
 @param y the Y coordinate >= 0
 @param a the allocation to the View
 @return the nearest child index

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Shape javax.swing.text.AsyncBoxView.ChildLocator.getChildAllocation(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetch the allocation to use for a child view.
 <em>This does not update the offsets in the ChildState
 records.</em>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.AsyncBoxView.ChildLocator.setAllocation(Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copy the currently allocated shape into the Rectangle
 used to store the current allocation.  This would be 
 a floating point rectangle in a Java2D-specific implmentation.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.text.AsyncBoxView.ChildLocator.getViewIndexAtVisualOffset(float targetOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Locate the view responsible for an offset into the box
 along the major axis.  Make sure that offsets are set
 on the ChildState objects up to the given target span
 past the desired offset.

 @return   index of the view representing the given visual
   location (targetOffset), or -1 if no view represents 
   that location

<!-- END DATA -->
