<!-- BEGIN KEY -->
public class javax.swing.text.StyleContext.NamedStyle extends java.lang.Object implements javax.swing.text.Style, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A collection of attributes, typically used to represent
 character and paragraph styles.  This is an implementation
 of MutableAttributeSet that can be observed if desired. 
 These styles will take advantage of immutability while
 the sets are small enough, and may be substantially more
 efficient than something like SimpleAttributeSet.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.EventListenerList javax.swing.text.StyleContext.NamedStyle.listenerList
<!-- END KEY -->
<!-- BEGIN DATA -->
 The change listeners for the model.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.event.ChangeEvent javax.swing.text.StyleContext.NamedStyle.changeEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
 Only one ChangeEvent is needed per model instance since the
 event's only (read-only) state is the source property.  The source
 of events generated here is always "this".

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.StyleContext.NamedStyle(String name, Style parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new named style.

 @param name the style name, null for unnamed
 @param parent the parent style, null if none
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.StyleContext.NamedStyle(Style parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new named style.

 @param parent the parent style, null if none
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.StyleContext.NamedStyle()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new named style, with a null name and parent.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.StyleContext.NamedStyle.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Converts the style to a string.

 @return the string

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.StyleContext.NamedStyle.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the name of the style.   A style is not required to be named,
 so null is returned if there is no name associated with the style.

 @return the name

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.NamedStyle.setName(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Changes the name of the style.  Does nothing with a null name.

 @param name the new name

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.NamedStyle.addChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a change listener.

 @param l the change listener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.NamedStyle.removeChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a change listener.

 @param l the change listener

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.ChangeListener[] javax.swing.text.StyleContext.NamedStyle.getChangeListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the <code>ChangeListener</code>s added
 to this NamedStyle with addChangeListener().

 @return all of the <code>ChangeListener</code>s added or an empty
         array if no listeners have been added
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.StyleContext.NamedStyle.fireStateChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.  The event instance 
 is lazily created using the parameters passed into 
 the fire method.

 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] javax.swing.text.StyleContext.NamedStyle.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return an array of all the listeners of the given type that 
 were added to this model. 

 @return all of the objects receiving <em>listenerType</em> notifications 
          from this model
 
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.StyleContext.NamedStyle.getAttributeCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the number of attributes that are defined.

 @return the number of attributes >= 0
 @see AttributeSet#getAttributeCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.StyleContext.NamedStyle.isDefined(Object attrName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks whether a given attribute is defined.

 @param attrName the non-null attribute name
 @return true if the attribute is defined
 @see AttributeSet#isDefined

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.StyleContext.NamedStyle.isEqual(AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks whether two attribute sets are equal.

 @param attr the attribute set to check against
 @return true if the same
 @see AttributeSet#isEqual

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.StyleContext.NamedStyle.copyAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies a set of attributes.

 @return the copy
 @see AttributeSet#copyAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.text.StyleContext.NamedStyle.getAttribute(Object attrName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the value of an attribute.

 @param attrName the non-null attribute name
 @return the attribute value
 @see AttributeSet#getAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<?> javax.swing.text.StyleContext.NamedStyle.getAttributeNames()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the names of all attributes.

 @return the attribute names as an enumeration
 @see AttributeSet#getAttributeNames

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.StyleContext.NamedStyle.containsAttribute(Object name, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks whether a given attribute name/value is defined.

 @param name the non-null attribute name
 @param value the attribute value
 @return true if the name/value is defined
 @see AttributeSet#containsAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.StyleContext.NamedStyle.containsAttributes(AttributeSet attrs)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks whether the element contains all the attributes.

 @param attrs the attributes to check
 @return true if the element contains all the attributes
 @see AttributeSet#containsAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.StyleContext.NamedStyle.getResolveParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets attributes from the parent.
 If not overriden, the resolving parent defaults to 
 the parent element.

 @return the attributes from the parent
 @see AttributeSet#getResolveParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.NamedStyle.addAttribute(Object name, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds an attribute.

 @param name the non-null attribute name
 @param value the attribute value
 @see MutableAttributeSet#addAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.NamedStyle.addAttributes(AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a set of attributes to the element.

 @param attr the attributes to add
 @see MutableAttributeSet#addAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.NamedStyle.removeAttribute(Object name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes an attribute from the set.

 @param name the non-null attribute name
 @see MutableAttributeSet#removeAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.NamedStyle.removeAttributes(java.util.Enumeration<?> names)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a set of attributes for the element.

 @param names the attribute names
 @see MutableAttributeSet#removeAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.NamedStyle.removeAttributes(AttributeSet attrs)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a set of attributes for the element.

 @param attrs the attributes
 @see MutableAttributeSet#removeAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StyleContext.NamedStyle.setResolveParent(AttributeSet parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the resolving parent.

 @param parent the parent, null if none
 @see MutableAttributeSet#setResolveParent

<!-- END DATA -->
