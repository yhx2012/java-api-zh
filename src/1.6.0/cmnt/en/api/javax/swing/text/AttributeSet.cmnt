<!-- BEGIN KEY -->
public interface javax.swing.text.AttributeSet
<!-- END KEY -->
<!-- BEGIN DATA -->
 A collection of unique attributes.  This is a read-only, 
 immutable interface.  An attribute is basically a key and
 a value assigned to the key.  The collection may represent
 something like a style run, a logical style, etc.  These
 are generally used to describe features that will contribute
 to some graphical representation such as a font.  The
 set of possible keys is unbounded and can be anything.
 Typically View implementations will respond to attribute
 definitions and render something to represent the attributes.
 <p>
 Attributes can potentially resolve in a hierarchy.  If a 
 key doesn't resolve locally, and a resolving parent
 exists, the key will be resolved through the parent.

 @author  Timothy Prinzing
 @version 1.42 07/11/06
 @see MutableAttributeSet

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Object javax.swing.text.AttributeSet.NameAttribute
<!-- END KEY -->
<!-- BEGIN DATA -->
 Attribute name used to name the collection of
 attributes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Object javax.swing.text.AttributeSet.ResolveAttribute
<!-- END KEY -->
<!-- BEGIN DATA -->
 Attribute name used to identify the resolving parent
 set of attributes, if one is defined.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AttributeSet.getAttributeCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of attributes that are defined locally in this set.
 Attributes that are defined in the parent set are not included.

 @return the number of attributes >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.AttributeSet.isDefined(Object attrName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks whether the named attribute has a value specified in
 the set without resolving through another attribute
 set.

 @param attrName the attribute name
 @return true if the attribute has a value specified

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.AttributeSet.isEqual(AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines if the two attribute sets are equivalent.

 @param attr an attribute set
 @return true if the sets are equivalent

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.AttributeSet.copyAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an attribute set that is guaranteed not
 to change over time.  

 @return a copy of the attribute set

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.text.AttributeSet.getAttribute(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the value of the given attribute. If the value is not found
 locally, the search is continued upward through the resolving 
 parent (if one exists) until the value is either
 found or there are no more parents.  If the value is not found,
 null is returned.

 @param key the non-null key of the attribute binding
 @return the value

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<?> javax.swing.text.AttributeSet.getAttributeNames()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an enumeration over the names of the attributes that are
 defined locally in the set. Names of attributes defined in the
 resolving parent, if any, are not included. The values of the
 <code>Enumeration</code> may be anything and are not constrained to
 a particular <code>Object</code> type.
 <p>
 This method never returns {@code null}. For a set with no attributes, it
 returns an empty {@code Enumeration}.

 @return the names

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.AttributeSet.containsAttribute(Object name, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns {@code true} if this set defines an attribute with the same
 name and an equal value. If such an attribute is not found locally,
 it is searched through in the resolving parent hierarchy.

 @param name the non-null attribute name
 @param value the value
 @return {@code true} if the set defines the attribute with an
     equal value, either locally or through its resolving parent
 @throws NullPointerException if either {@code name} or
      {@code value} is {@code null}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.AttributeSet.containsAttributes(AttributeSet attributes)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns {@code true} if this set defines all the attributes from the
 given set with equal values. If an attribute is not found locally,
 it is searched through in the resolving parent hierarchy.

 @param attributes the set of attributes to check against
 @return {@code true} if this set defines all the attributes with equal
              values, either locally or through its resolving parent
 @throws NullPointerException if {@code attributes} is {@code null}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.AttributeSet.getResolveParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the resolving parent.

 @return the parent

<!-- END DATA -->
