<!-- BEGIN KEY -->
public abstract class javax.swing.text.AbstractDocument.AbstractElement extends java.lang.Object implements javax.swing.text.Element, javax.swing.text.MutableAttributeSet, java.io.Serializable, javax.swing.tree.TreeNode
<!-- END KEY -->
<!-- BEGIN DATA -->
 Implements the abstract part of an element.  By default elements
 support attributes by having a field that represents the immutable
 part of the current attribute set for the element.  The element itself
 implements MutableAttributeSet which can be used to modify the set
 by fetching a new immutable set.  The immutable sets are provided
 by the AttributeContext associated with the document.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AbstractDocument.AbstractElement(Element parent, AttributeSet a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new AbstractElement.

 @param parent the parent element
 @param a the attributes for the element
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AbstractDocument.AbstractElement.dump(PrintStream psOut, int indentAmount)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Dumps a debugging representation of the element hierarchy.

 @param psOut the output stream
 @param indentAmount the indentation level >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AbstractDocument.AbstractElement.getAttributeCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the number of attributes that are defined.

 @return the number of attributes >= 0
 @see AttributeSet#getAttributeCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.AbstractDocument.AbstractElement.isDefined(Object attrName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks whether a given attribute is defined.

 @param attrName the non-null attribute name
 @return true if the attribute is defined
 @see AttributeSet#isDefined

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.AbstractDocument.AbstractElement.isEqual(AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks whether two attribute sets are equal.

 @param attr the attribute set to check against
 @return true if the same
 @see AttributeSet#isEqual

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.AbstractDocument.AbstractElement.copyAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies a set of attributes.

 @return the copy
 @see AttributeSet#copyAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.text.AbstractDocument.AbstractElement.getAttribute(Object attrName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the value of an attribute.

 @param attrName the non-null attribute name
 @return the attribute value
 @see AttributeSet#getAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<?> javax.swing.text.AbstractDocument.AbstractElement.getAttributeNames()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the names of all attributes.

 @return the attribute names as an enumeration
 @see AttributeSet#getAttributeNames

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.AbstractDocument.AbstractElement.containsAttribute(Object name, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks whether a given attribute name/value is defined.

 @param name the non-null attribute name
 @param value the attribute value
 @return true if the name/value is defined
 @see AttributeSet#containsAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.AbstractDocument.AbstractElement.containsAttributes(AttributeSet attrs)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks whether the element contains all the attributes.

 @param attrs the attributes to check
 @return true if the element contains all the attributes
 @see AttributeSet#containsAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.AbstractDocument.AbstractElement.getResolveParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the resolving parent.
 If not overridden, the resolving parent defaults to 
 the parent element.

 @return the attributes from the parent, <code>null</code> if none
 @see AttributeSet#getResolveParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AbstractDocument.AbstractElement.addAttribute(Object name, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds an attribute to the element.

 @param name the non-null attribute name
 @param value the attribute value
 @see MutableAttributeSet#addAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AbstractDocument.AbstractElement.addAttributes(AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a set of attributes to the element.

 @param attr the attributes to add
 @see MutableAttributeSet#addAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AbstractDocument.AbstractElement.removeAttribute(Object name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes an attribute from the set.

 @param name the non-null attribute name
 @see MutableAttributeSet#removeAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AbstractDocument.AbstractElement.removeAttributes(java.util.Enumeration<?> names)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a set of attributes for the element.

 @param names the attribute names
 @see MutableAttributeSet#removeAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AbstractDocument.AbstractElement.removeAttributes(AttributeSet attrs)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a set of attributes for the element.

 @param attrs the attributes
 @see MutableAttributeSet#removeAttributes

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AbstractDocument.AbstractElement.setResolveParent(AttributeSet parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the resolving parent.

 @param parent the parent, null if none
 @see MutableAttributeSet#setResolveParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Document javax.swing.text.AbstractDocument.AbstractElement.getDocument()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the underlying model.

 @return the model

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element javax.swing.text.AbstractDocument.AbstractElement.getParentElement()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the parent of the element.

 @return the parent

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.AbstractDocument.AbstractElement.getAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the attributes for the element.

 @return the attribute set

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.AbstractDocument.AbstractElement.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the name of the element.

 @return the name, null if none

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.text.AbstractDocument.AbstractElement.getStartOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the starting offset in the model for the element.

 @return the offset >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.text.AbstractDocument.AbstractElement.getEndOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the ending offset in the model for the element.

 @return the offset >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.text.Element javax.swing.text.AbstractDocument.AbstractElement.getElement(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a child element.

 @param index the child index, >= 0 && < getElementCount()
 @return the child element

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.text.AbstractDocument.AbstractElement.getElementCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the number of children for the element.

 @return the number of children >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.text.AbstractDocument.AbstractElement.getElementIndex(int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the child element index closest to the given model offset.

 @param offset the offset >= 0
 @return the element index >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.swing.text.AbstractDocument.AbstractElement.isLeaf()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks whether the element is a leaf.

 @return true if a leaf

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreeNode javax.swing.text.AbstractDocument.AbstractElement.getChildAt(int childIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the child <code>TreeNode</code> at index 
 <code>childIndex</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AbstractDocument.AbstractElement.getChildCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of children <code>TreeNode</code>'s 
 receiver contains.
 @return the number of children <code>TreeNodews</code>'s
 receiver contains

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreeNode javax.swing.text.AbstractDocument.AbstractElement.getParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the parent <code>TreeNode</code> of the receiver.
 @return the parent <code>TreeNode</code> of the receiver

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AbstractDocument.AbstractElement.getIndex(TreeNode node)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the index of <code>node</code> in the receivers children.
 If the receiver does not contain <code>node</code>, -1 will be
 returned.
 @param node the location of interest
 @return the index of <code>node</code> in the receiver's
 children, or -1 if absent

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.swing.text.AbstractDocument.AbstractElement.getAllowsChildren()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the receiver allows children.
 @return true if the receiver allows children, otherwise false

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Enumeration javax.swing.text.AbstractDocument.AbstractElement.children()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the children of the receiver as an
 <code>Enumeration</code>.
 @return the children of the receiver as an <code>Enumeration</code>

<!-- END DATA -->
