<!-- BEGIN KEY -->
public class javax.swing.text.html.HTMLDocument extends javax.swing.text.DefaultStyledDocument
<!-- END KEY -->
<!-- BEGIN DATA -->
 A document that models HTML.  The purpose of this model
 is to support both browsing and editing.  As a result,
 the structure described by an HTML document is not 
 exactly replicated by default.  The element structure that 
 is modeled by default, is built by the class
 <code>HTMLDocument.HTMLReader</code>, which implements
 the <code>HTMLEditorKit.ParserCallback</code> protocol
 that the parser expects.  To change the structure one
 can subclass <code>HTMLReader</code>, and reimplement the method
 {@link #getReader(int)} to return the new reader
 implementation.  The documentation for <code>HTMLReader</code>
 should be consulted for the details of
 the default structure created.  The intent is that 
 the document be non-lossy (although reproducing the
 HTML format may result in a different format).
 <p>
 The document models only HTML, and makes no attempt to
 store view attributes in it.  The elements are identified
 by the <code>StyleContext.NameAttribute</code> attribute,
 which should always have a value of type <code>HTML.Tag</code>
 that identifies the kind of element.  Some of the elements
 (such as comments) are synthesized.  The <code>HTMLFactory</code>
 uses this attribute to determine what kind of view to build.
 <p>
 This document supports incremental loading.  The
 <code>TokenThreshold</code> property controls how
 much of the parse is buffered before trying to update
 the element structure of the document.  This property
 is set by the <code>EditorKit</code> so that subclasses can disable
 it.
 <p>
 The <code>Base</code> property determines the URL
 against which relative URLs are resolved.
 By default, this will be the 
 <code>Document.StreamDescriptionProperty</code> if
 the value of the property is a URL.  If a &lt;BASE&gt;
 tag is encountered, the base will become the URL specified
 by that tag.  Because the base URL is a property, it
 can of course be set directly.
 <p>
 The default content storage mechanism for this document
 is a gap buffer (<code>GapContent</code>). 
 Alternatives can be supplied by using the constructor
 that takes a <code>Content</code> implementation.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @author  Timothy Prinzing
 @author  Scott Violet
 @author  Sunita Mani
 @version 1.180 05/10/06

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.text.html.HTMLDocument.AdditionalComments
<!-- END KEY -->
<!-- BEGIN DATA -->
 Document property key value. The value for the key will be a Vector
 of Strings that are comments not found in the body.

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.net.URL javax.swing.text.html.HTMLDocument.base
<!-- END KEY -->
<!-- BEGIN DATA -->
 The location to resolve relative URLs against.  By
 default this will be the document's URL if the document
 was loaded from a URL.  If a base tag is found and
 can be parsed, it will be used as the base location.

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean javax.swing.text.html.HTMLDocument.hasBaseTag
<!-- END KEY -->
<!-- BEGIN DATA -->
 does the document have base tag

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.swing.text.html.HTMLDocument.baseTarget
<!-- END KEY -->
<!-- BEGIN DATA -->
 BASE tag's TARGET attribute value

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.text.html.HTMLEditorKit.Parser javax.swing.text.html.HTMLDocument.parser
<!-- END KEY -->
<!-- BEGIN DATA -->
 The parser that is used when inserting html into the existing
 document.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.HTMLDocument()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an HTML document using the default buffer size
 and a default <code>StyleSheet</code>.  This is a convenience
 method for the constructor
 <code>HTMLDocument(Content, StyleSheet)</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.HTMLDocument(StyleSheet styles)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an HTML document with the default content
 storage implementation and the specified style/attribute
 storage mechanism.  This is a convenience method for the
 constructor
 <code>HTMLDocument(Content, StyleSheet)</code>.

 @param styles  the styles

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.HTMLDocument(AbstractDocument.Content c, StyleSheet styles)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an HTML document with the given content
 storage implementation and the given style/attribute
 storage mechanism.

 @param c  the container for the content
 @param styles the styles

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.HTMLEditorKit.ParserCallback javax.swing.text.html.HTMLDocument.getReader(int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the reader for the parser to use when loading the document
 with HTML.  This is implemented to return an instance of
 <code>HTMLDocument.HTMLReader</code>. 
 Subclasses can reimplement this
 method to change how the document gets structured if desired.
 (For example, to handle custom tags, or structurally represent character
 style elements.)

 @param pos the starting position
 @return the reader used by the parser to load the document

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.HTMLEditorKit.ParserCallback javax.swing.text.html.HTMLDocument.getReader(int pos, int popDepth, int pushDepth, HTML.Tag insertTag)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the reader for the parser to use to load the document
 with HTML.  This is implemented to return an instance of
 <code>HTMLDocument.HTMLReader</code>. 
 Subclasses can reimplement this
 method to change how the document gets structured if desired.
 (For example, to handle custom tags, or structurally represent character
 style elements.) 
 <p>This is a convenience method for 
 <code>getReader(int, int, int, HTML.Tag, TRUE)</code>.

 @param popDepth   the number of <code>ElementSpec.EndTagTypes</code>
		to generate before inserting
 @param pushDepth  the number of <code>ElementSpec.StartTagTypes</code>
		with a direction of <code>ElementSpec.JoinNextDirection</code>
		that should be generated before inserting,
		but after the end tags have been generated
 @param insertTag  the first tag to start inserting into document
 @return the reader used by the parser to load the document

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL javax.swing.text.html.HTMLDocument.getBase()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the location to resolve relative URLs against.  By
 default this will be the document's URL if the document
 was loaded from a URL.  If a base tag is found and
 can be parsed, it will be used as the base location.

 @return the base location

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.setBase(URL u)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the location to resolve relative URLs against.  By
 default this will be the document's URL if the document
 was loaded from a URL.  If a base tag is found and
 can be parsed, it will be used as the base location.
 <p>This also sets the base of the <code>StyleSheet</code>
 to be <code>u</code> as well as the base of the document.

 @param u  the desired base URL

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLDocument.insert(int offset, javax.swing.text.DefaultStyledDocument.ElementSpec[] data) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts new elements in bulk.  This is how elements get created
 in the document.  The parsing determines what structure is needed
 and creates the specification as a set of tokens that describe the
 edit while leaving the document free of a write-lock.  This method
 can then be called in bursts by the reader to acquire a write-lock
 for a shorter duration (i.e. while the document is actually being
 altered).

 @param offset the starting offset
 @param data the element data
 @exception BadLocationException  if the given position does not 
   represent a valid location in the associated document.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLDocument.insertUpdate(AbstractDocument.DefaultDocumentEvent chng, AttributeSet attr)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Updates document structure as a result of text insertion.  This
 will happen within a write lock.  This implementation simply
 parses the inserted content for line breaks and builds up a set
 of instructions for the element buffer.

 @param chng a description of the document change
 @param attr the attributes

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLDocument.create(javax.swing.text.DefaultStyledDocument.ElementSpec[] data)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Replaces the contents of the document with the given
 element specifications.  This is called before insert if
 the loading is done in bursts.  This is the only method called
 if loading the document entirely in one burst.

 @param data  the new contents of the document

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.setParagraphAttributes(int offset, int length, AttributeSet s, boolean replace)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets attributes for a paragraph.
 <p>
 This method is thread safe, although most Swing methods
 are not. Please see 
 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A> for more information.     

 @param offset the offset into the paragraph (must be at least 0)
 @param length the number of characters affected (must be at least 0)
 @param s the attributes
 @param replace whether to replace existing attributes, or merge them

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.StyleSheet javax.swing.text.html.HTMLDocument.getStyleSheet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the <code>StyleSheet</code> with the document-specific display
 rules (CSS) that were specified in the HTML document itself.

 @return the <code>StyleSheet</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.HTMLDocument.Iterator javax.swing.text.html.HTMLDocument.getIterator(HTML.Tag t)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches an iterator for the specified HTML tag.
 This can be used for things like iterating over the
 set of anchors contained, or iterating over the input
 elements.

 @param t the requested <code>HTML.Tag</code>
 @return the <code>Iterator</code> for the given HTML tag
 @see javax.swing.text.html.HTML.Tag

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.Element javax.swing.text.html.HTMLDocument.createLeafElement(Element parent, AttributeSet a, int p0, int p1)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a document leaf element that directly represents
 text (doesn't have any children).  This is implemented
 to return an element of type 
 <code>HTMLDocument.RunElement</code>.

 @param parent the parent element
 @param a the attributes for the element
 @param p0 the beginning of the range (must be at least 0)
 @param p1 the end of the range (must be at least p0)
 @return the new element

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.Element javax.swing.text.html.HTMLDocument.createBranchElement(Element parent, AttributeSet a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a document branch element, that can contain other elements.
 This is implemented to return an element of type 
 <code>HTMLDocument.BlockElement</code>.

 @param parent the parent element
 @param a the attributes
 @return the element

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.AbstractDocument.AbstractElement javax.swing.text.html.HTMLDocument.createDefaultRoot()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the root element to be used to represent the
 default document structure.

 @return the element base

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.setTokenThreshold(int n)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the number of tokens to buffer before trying to update
 the documents element structure.

 @param n  the number of tokens to buffer

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.html.HTMLDocument.getTokenThreshold()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the number of tokens to buffer before trying to update
 the documents element structure.  The default value is
 <code>Integer.MAX_VALUE</code>.

 @return the number of tokens to buffer

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.setPreservesUnknownTags(boolean preservesTags)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines how unknown tags are handled by the parser.
 If set to true, unknown
 tags are put in the model, otherwise they are dropped.

 @param preservesTags  true if unknown tags should be
		saved in the model, otherwise tags are dropped
 @see javax.swing.text.html.HTML.Tag

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.html.HTMLDocument.getPreservesUnknownTags()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the behavior the parser observes when encountering
 unknown tags.

 @see javax.swing.text.html.HTML.Tag
 @return true if unknown tags are to be preserved when parsing

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.processHTMLFrameHyperlinkEvent(HTMLFrameHyperlinkEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Processes <code>HyperlinkEvents</code> that
 are generated by documents in an HTML frame. 
 The <code>HyperlinkEvent</code> type, as the parameter suggests,
 is <code>HTMLFrameHyperlinkEvent</code>.
 In addition to the typical information contained in a
 <code>HyperlinkEvent</code>,
 this event contains the element that corresponds to the frame in
 which the click happened (the source element) and the
 target name.  The target name has 4 possible values:
 <ul>
 <li>  _self
 <li>  _parent
 <li>  _top
 <li>  a named frame
 </ul>

 If target is _self, the action is to change the value of the
 <code>HTML.Attribute.SRC</code> attribute and fires a
 <code>ChangedUpdate</code> event.
<p>
 If the target is _parent, then it deletes the parent element,
 which is a &lt;FRAMESET&gt; element, and inserts a new &lt;FRAME&gt;
 element, and sets its <code>HTML.Attribute.SRC</code> attribute
 to have a value equal to the destination URL and fire a
 <code>RemovedUpdate</code> and <code>InsertUpdate</code>.
<p>
 If the target is _top, this method does nothing. In the implementation
 of the view for a frame, namely the <code>FrameView</code>,
 the processing of _top is handled.  Given that _top implies
 replacing the entire document, it made sense to handle this outside
 of the document that it will replace.
<p>
 If the target is a named frame, then the element hierarchy is searched
 for an element with a name equal to the target, its
 <code>HTML.Attribute.SRC</code> attribute is updated and a
 <code>ChangedUpdate</code> event is fired.

 @param e the event

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.setParser(HTMLEditorKit.Parser parser)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the parser that is used by the methods that insert html
 into the existing document, such as <code>setInnerHTML</code>, 
 and <code>setOuterHTML</code>.
 <p>
 <code>HTMLEditorKit.createDefaultDocument</code> will set the parser
 for you. If you create an <code>HTMLDocument</code> by hand,
 be sure and set the parser accordingly.
 @param parser the parser to be used for text insertion

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.HTMLEditorKit.Parser javax.swing.text.html.HTMLDocument.getParser()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the parser that is used when inserting HTML into the existing
 document.
 @return the parser used for text insertion

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.setInnerHTML(Element elem, String htmlText) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Replaces the children of the given element with the contents 
 specified as an HTML string.
 <p>This will be seen as at least two events, n inserts followed by
 a remove.
 <p>For this to work correcty, the document must have an
 <code>HTMLEditorKit.Parser</code> set. This will be the case
 if the document was created from an HTMLEditorKit via the
 <code>createDefaultDocument</code> method.

 @param elem the branch element whose children will be replaced
 @param htmlText the string to be parsed and assigned to <code>elem</code>
 @throws IllegalArgumentException if <code>elem</code> is a leaf
 @throws IllegalStateException if an <code>HTMLEditorKit.Parser</code>
         has not been defined
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.setOuterHTML(Element elem, String htmlText) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Replaces the given element in the parent with the contents 
 specified as an HTML string. 
 <p>This will be seen as at least two events, n inserts followed by
 a remove.
 <p>When replacing a leaf this will attempt to make sure there is
 a newline present if one is needed. This may result in an additional
 element being inserted. Consider, if you were to replace a character
 element that contained a newline with &lt;img&gt; this would create
 two elements, one for the image, ane one for the newline.
 <p>If you try to replace the element at length you will most likely
 end up with two elements, eg setOuterHTML(getCharacterElement
 (getLength()), "blah") will result in two leaf elements at the end,
 one representing 'blah', and the other representing the end element.
 <p>For this to work correcty, the document must have an
 HTMLEditorKit.Parser set. This will be the case if the document
 was created from an HTMLEditorKit via the
 <code>createDefaultDocument</code> method.

 @param elem the branch element whose children will be replaced
 @param htmlText the string to be parsed and assigned to <code>elem</code>
 @throws IllegalStateException if an HTMLEditorKit.Parser has not
         been set
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.insertAfterStart(Element elem, String htmlText) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Inserts the HTML specified as a string at the start 
 of the element. 
 <p>For this to work correcty, the document must have an
 <code>HTMLEditorKit.Parser</code> set. This will be the case
 if the document was created from an HTMLEditorKit via the
 <code>createDefaultDocument</code> method.

 @param elem the branch element to be the root for the new text
 @param htmlText the string to be parsed and assigned to <code>elem</code>
 @throws IllegalStateException if an HTMLEditorKit.Parser has not
         been set on the document 
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.insertBeforeEnd(Element elem, String htmlText) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Inserts the HTML specified as a string at the end of 
 the element. 
 <p> If <code>elem</code>'s children are leaves, and the 
 character at a <code>elem.getEndOffset() - 1</code> is a newline,
 this will insert before the newline so that there isn't text after
 the newline.
 <p>For this to work correcty, the document must have an
 <code>HTMLEditorKit.Parser</code> set. This will be the case
 if the document was created from an HTMLEditorKit via the
 <code>createDefaultDocument</code> method.

 @param elem the element to be the root for the new text
 @param htmlText the string to be parsed and assigned to <code>elem</code>
 @throws IllegalStateException if an HTMLEditorKit.Parser has not
         been set on the document
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.insertBeforeStart(Element elem, String htmlText) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Inserts the HTML specified as a string before the start of 
 the given element. 
 <p>For this to work correcty, the document must have an
 <code>HTMLEditorKit.Parser</code> set. This will be the case
 if the document was created from an HTMLEditorKit via the
 <code>createDefaultDocument</code> method.

 @param elem the element to be the root for the new text
 @param htmlText the string to be parsed and assigned to <code>elem</code>
 @throws IllegalStateException if an HTMLEditorKit.Parser has not
         been set on the document
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.HTMLDocument.insertAfterEnd(Element elem, String htmlText) throws javax.swing.text.BadLocationException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Inserts the HTML specified as a string after the 
 the end of the given element. 
 <p>For this to work correcty, the document must have an
 <code>HTMLEditorKit.Parser</code> set. This will be the case
 if the document was created from an HTMLEditorKit via the
 <code>createDefaultDocument</code> method.

 @param elem the element to be the root for the new text
 @param htmlText the string to be parsed and assigned to <code>elem</code>
 @throws IllegalStateException if an HTMLEditorKit.Parser has not
         been set on the document
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element javax.swing.text.html.HTMLDocument.getElement(String id)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the element that has the given id <code>Attribute</code>. 
 If the element can't be found, <code>null</code> is returned.
 Note that this method works on an <code>Attribute</code>,
 <i>not</i> a character tag.  In the following HTML snippet:
 <code>&lt;a id="HelloThere"&gt;</code> the attribute is
 'id' and the character tag is 'a'.
 This is a convenience method for 
 <code>getElement(RootElement, HTML.Attribute.id, id)</code>.
 This is not thread-safe.

 @param id  the string representing the desired <code>Attribute</code>
 @return the element with the specified <code>Attribute</code>
		or <code>null</code> if it can't be found,
		or <code>null</code> if <code>id</code> is <code>null</code>
 @see javax.swing.text.html.HTML.Attribute
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Element javax.swing.text.html.HTMLDocument.getElement(Element e, Object attribute, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the child element of <code>e</code> that contains the
 attribute, <code>attribute</code> with value <code>value</code>, or
 <code>null</code> if one isn't found. This is not thread-safe.

 @param e the root element where the search begins
 @param attribute the desired <code>Attribute</code>
 @param value the values for the specified <code>Attribute</code>
 @return the element with the specified <code>Attribute</code>
 		and the specified <code>value</code>, or <code>null</code>
		if it can't be found
 @see javax.swing.text.html.HTML.Attribute
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLDocument.fireChangedUpdate(DocumentEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.  The event instance 
 is lazily created using the parameters passed into 
 the fire method.

 @param e the event
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.HTMLDocument.fireUndoableEditUpdate(UndoableEditEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.  The event instance 
 is lazily created using the parameters passed into 
 the fire method.

 @param e the event
 @see EventListenerList

<!-- END DATA -->
