<!-- BEGIN KEY -->
public class javax.swing.text.html.ImageView extends javax.swing.text.View
<!-- END KEY -->
<!-- BEGIN DATA -->
 View of an Image, intended to support the HTML &lt;IMG&gt; tag.
 Supports scaling via the HEIGHT and WIDTH attributes of the tag.
 If the image is unable to be loaded any text specified via the
 <code>ALT</code> attribute will be rendered.
 <p>
 While this class has been part of swing for a while now, it is public
 as of 1.4.

 @author  Scott Violet
 @version 1.58 11/30/05
 @see IconView
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.html.ImageView(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new view that represents an IMG element.

 @param elem the element to create a view for

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.html.ImageView.getAltText()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the text to display if the image can't be loaded. This is
 obtained from the Elements attribute set with the attribute name
 <code>HTML.Attribute.ALT</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL javax.swing.text.html.ImageView.getImageURL()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return a URL for the image source, 
 or null if it could not be determined.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.text.html.ImageView.getNoImageIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the icon to use if the image couldn't be found.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.text.html.ImageView.getLoadingImageIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the icon to use while in the process of loading the image.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Image javax.swing.text.html.ImageView.getImage()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the image to render.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.ImageView.setLoadsSynchronously(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets how the image is loaded. If <code>newValue</code> is true,
 the image we be loaded when first asked for, otherwise it will
 be loaded asynchronously. The default is to not load synchronously,
 that is to load the image asynchronously.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.html.ImageView.getLoadsSynchronously()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the image should be loaded when first asked for.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.html.StyleSheet javax.swing.text.html.ImageView.getStyleSheet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convenience method to get the StyleSheet.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.text.html.ImageView.getAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the attributes to use when rendering.  This is
 implemented to multiplex the attributes specified in the
 model with a StyleSheet.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.html.ImageView.getToolTipText(float x, float y, Shape allocation)
<!-- END KEY -->
<!-- BEGIN DATA -->
 For images the tooltip text comes from text specified with the
 <code>ALT</code> attribute. This is overriden to return
 <code>getAltText</code>.

 @see JTextComponent#getToolTipText

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.html.ImageView.setPropertiesFromAttributes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Update any cached values that come from attributes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.ImageView.setParent(View parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Establishes the parent view for this view.
 Seize this moment to cache the AWT Container I'm in.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.ImageView.changedUpdate(DocumentEvent e, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when the Elements attributes have changed. Recreates the image.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.ImageView.paint(Graphics g, Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paints the View.

 @param g the rendering surface to use
 @param a the allocated region to render into
 @see View#paint

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.html.ImageView.getPreferredSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the preferred span for this view along an
 axis.

 @param axis may be either X_AXIS or Y_AXIS
 @return   the span the view would like to be rendered into;
           typically the view is told to render into the span
           that is returned, although there is no guarantee;  
           the parent may choose to resize or break the view

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.html.ImageView.getAlignment(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the desired alignment for this view along an
 axis.  This is implemented to give the alignment to the
 bottom of the icon along the y axis, and the default
 along the x axis.

 @param axis may be either X_AXIS or Y_AXIS
 @return the desired alignment; this should be a value
   between 0.0 and 1.0 where 0 indicates alignment at the
   origin and 1.0 indicates alignment to the full span
   away from the origin; an alignment of 0.5 would be the
   center of the view

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Shape javax.swing.text.html.ImageView.modelToView(int pos, Shape a, Position.Bias b) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.

 @param pos the position to convert
 @param a the allocated region to render into
 @return the bounding box of the given position
 @exception BadLocationException  if the given position does not represent a
   valid location in the associated document
 @see View#modelToView

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.html.ImageView.viewToModel(float x, float y, Shape a, javax.swing.text.Position.Bias[] bias)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

 @param x the X coordinate
 @param y the Y coordinate
 @param a the allocated region to render into
 @return the location within the model that best represents the
  given point of view
 @see View#viewToModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.html.ImageView.setSize(float width, float height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the size of the view.  This should cause 
 layout of the view if it has any layout duties.

 @param width the width >= 0
 @param height the height >= 0

<!-- END DATA -->
