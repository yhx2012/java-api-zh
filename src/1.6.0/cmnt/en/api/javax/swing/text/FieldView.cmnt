<!-- BEGIN KEY -->
public class javax.swing.text.FieldView extends javax.swing.text.PlainView
<!-- END KEY -->
<!-- BEGIN DATA -->
 Extends the multi-line plain text view to be suitable
 for a single-line editor view.  If the view is 
 allocated extra space, the field must adjust for it.
 If the hosting component is a JTextField, this view
 will manage the ranges of the associated BoundedRangeModel
 and will adjust the horizontal allocation to match the
 current visibility settings of the JTextField.

 @author  Timothy Prinzing
 @version 1.27 11/30/05
 @see     View

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.FieldView(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new FieldView wrapped on an element.

 @param elem the element

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.FontMetrics javax.swing.text.FieldView.getFontMetrics()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the font metrics associated with the component hosting
 this view.

 @return the metrics

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Shape javax.swing.text.FieldView.adjustAllocation(Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adjusts the allocation given to the view
 to be a suitable allocation for a text field.
 If the view has been allocated more than the 
 preferred span vertically, the allocation is
 changed to be centered vertically.  Horizontally
 the view is adjusted according to the horizontal
 alignment property set on the associated JTextField
 (if that is the type of the hosting component).

 @param a the allocation given to the view, which may need
  to be adjusted.
 @return the allocation that the superclass should use.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.FieldView.paint(Graphics g, Shape a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Renders using the given rendering surface and area on that surface.
 The view may need to do layout and create child views to enable
 itself to render into the given allocation.

 @param g the rendering surface to use
 @param a the allocated region to render into

 @see View#paint

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.text.FieldView.getPreferredSpan(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the preferred span for this view along an
 axis.

 @param axis may be either View.X_AXIS or View.Y_AXIS
 @return   the span the view would like to be rendered into >= 0.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.  
           The parent may choose to resize or break the view.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.FieldView.getResizeWeight(int axis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the resizability of the view along the
 given axis.  A value of 0 or less is not resizable.

 @param axis View.X_AXIS or View.Y_AXIS
 @return the weight -> 1 for View.X_AXIS, else 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Shape javax.swing.text.FieldView.modelToView(int pos, Shape a, Position.Bias b) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.

 @param pos the position to convert >= 0
 @param a the allocated region to render into
 @return the bounding box of the given position
 @exception BadLocationException  if the given position does not
   represent a valid location in the associated document
 @see View#modelToView

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.FieldView.viewToModel(float fx, float fy, Shape a, javax.swing.text.Position.Bias[] bias)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

 @param fx the X coordinate >= 0.0f
 @param fy the Y coordinate >= 0.0f
 @param a the allocated region to render into
 @return the location within the model that best represents the
  given point in the view
 @see View#viewToModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.FieldView.insertUpdate(DocumentEvent changes, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gives notification that something was inserted into the document
 in a location that this view is responsible for.

 @param changes the change information from the associated document
 @param a the current allocation of the view
 @param f the factory to use to rebuild if the view has children
 @see View#insertUpdate

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.FieldView.removeUpdate(DocumentEvent changes, Shape a, ViewFactory f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gives notification that something was removed from the document
 in a location that this view is responsible for.

 @param changes the change information from the associated document
 @param a the current allocation of the view
 @param f the factory to use to rebuild if the view has children
 @see View#removeUpdate

<!-- END DATA -->
