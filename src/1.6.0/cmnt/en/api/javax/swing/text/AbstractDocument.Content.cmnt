<!-- BEGIN KEY -->
public static interface javax.swing.text.AbstractDocument.Content
<!-- END KEY -->
<!-- BEGIN DATA -->
 Interface to describe a sequence of character content that
 can be edited.  Implementations may or may not support a 
 history mechanism which will be reflected by whether or not
 mutations return an UndoableEdit implementation.  
 @see AbstractDocument

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Position javax.swing.text.AbstractDocument.Content.createPosition(int offset) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a position within the content that will
 track change as the content is mutated.

 @param offset the offset in the content >= 0
 @return a Position
 @exception BadLocationException for an invalid offset

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.AbstractDocument.Content.length()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Current length of the sequence of character content.

 @return the length >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.undo.UndoableEdit javax.swing.text.AbstractDocument.Content.insertString(int where, String str) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts a string of characters into the sequence.
 
 @param where   offset into the sequence to make the insertion >= 0
 @param str     string to insert
 @return  if the implementation supports a history mechanism, 
    a reference to an <code>Edit</code> implementation will be returned, 
    otherwise returns <code>null</code>
 @exception BadLocationException  thrown if the area covered by
   the arguments is not contained in the character sequence

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.undo.UndoableEdit javax.swing.text.AbstractDocument.Content.remove(int where, int nitems) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes some portion of the sequence.  

 @param where   The offset into the sequence to make the
   insertion >= 0.
 @param nitems  The number of items in the sequence to remove >= 0.
 @return  If the implementation supports a history mechansim, 
    a reference to an Edit implementation will be returned, 
    otherwise null.
 @exception BadLocationException  Thrown if the area covered by
   the arguments is not contained in the character sequence.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.AbstractDocument.Content.getString(int where, int len) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches a string of characters contained in the sequence.
 
 @param where   Offset into the sequence to fetch >= 0.
 @param len     number of characters to copy >= 0.
 @return the string
 @exception BadLocationException  Thrown if the area covered by
   the arguments is not contained in the character sequence.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.AbstractDocument.Content.getChars(int where, int len, Segment txt) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a sequence of characters and copies them into a Segment.

 @param where the starting offset >= 0
 @param len the number of characters >= 0
 @param txt the target location to copy into
 @exception BadLocationException  Thrown if the area covered by
   the arguments is not contained in the character sequence.

<!-- END DATA -->
