<!-- BEGIN KEY -->
public final class javax.swing.text.StringContent extends java.lang.Object implements javax.swing.text.AbstractDocument.Content, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 An implementation of the AbstractDocument.Content interface that is 
 a brute force implementation that is useful for relatively small 
 documents and/or debugging.  It manages the character content
 as a simple character array.  It is also quite inefficient.  
 <p>
 It is generally recommended that the gap buffer or piece table 
 implementations be used instead.  This buffer does not scale up
 to large sizes.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @author  Timothy Prinzing
 @version 1.45 11/17/05

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.StringContent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new StringContent object.  Initial size defaults to 10.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.StringContent(int initialLength)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new StringContent object, with the initial
 size specified.  If the length is < 1, a size of 1 is used.

 @param initialLength the initial size

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.StringContent.length()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the length of the content.

 @return the length >= 1
 @see AbstractDocument.Content#length

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.undo.UndoableEdit javax.swing.text.StringContent.insertString(int where, String str) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts a string into the content.

 @param where the starting position >= 0 && < length()
 @param str the non-null string to insert
 @return an UndoableEdit object for undoing
 @exception BadLocationException if the specified position is invalid
 @see AbstractDocument.Content#insertString

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.undo.UndoableEdit javax.swing.text.StringContent.remove(int where, int nitems) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes part of the content.  where + nitems must be < length().

 @param where the starting position >= 0
 @param nitems the number of characters to remove >= 0
 @return an UndoableEdit object for undoing
 @exception BadLocationException if the specified position is invalid
 @see AbstractDocument.Content#remove

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.text.StringContent.getString(int where, int len) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves a portion of the content.  where + len must be <= length().

 @param where the starting position >= 0
 @param len the length to retrieve >= 0
 @return a string representing the content; may be empty
 @exception BadLocationException if the specified position is invalid
 @see AbstractDocument.Content#getString

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.StringContent.getChars(int where, int len, Segment chars) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves a portion of the content.  where + len must be <= length()

 @param where the starting position >= 0
 @param len the number of characters to retrieve >= 0
 @param chars the Segment object to return the characters in
 @exception BadLocationException if the specified position is invalid
 @see AbstractDocument.Content#getChars

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Position javax.swing.text.StringContent.createPosition(int offset) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a position within the content that will
 track change as the content is mutated.

 @param offset the offset to create a position for >= 0
 @return the position
 @exception BadLocationException if the specified position is invalid

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Vector javax.swing.text.StringContent.getPositionsInRange(java.util.Vector v, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a Vector containing instances of UndoPosRef for the
 Positions in the range
 <code>offset</code> to <code>offset</code> + <code>length</code>.
 If <code>v</code> is not null the matching Positions are placed in
 there. The vector with the resulting Positions are returned.
 <p>
 This is meant for internal usage, and is generally not of interest
 to subclasses.

 @param v the Vector to use, with a new one created on null
 @param offset the starting offset >= 0
 @param length the length >= 0
 @return the set of instances

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.StringContent.updateUndoPositions(java.util.Vector positions)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets the location for all the UndoPosRef instances
 in <code>positions</code>.
 <p>
 This is meant for internal usage, and is generally not of interest
 to subclasses.

 @param positions the positions of the instances

<!-- END DATA -->
