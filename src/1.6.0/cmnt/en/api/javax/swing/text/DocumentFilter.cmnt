<!-- BEGIN KEY -->
public class javax.swing.text.DocumentFilter extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>DocumentFilter</code>, as the name implies, is a filter for the
 <code>Document</code> mutation methods. When a <code>Document</code>
 containing a <code>DocumentFilter</code> is modified (either through
 <code>insert</code> or <code>remove</code>), it forwards the appropriate
 method invocation to the <code>DocumentFilter</code>. The
 default implementation allows the modification to
 occur. Subclasses can filter the modifications by conditionally invoking
 methods on the superclass, or invoking the necessary methods on
 the passed in <code>FilterBypass</code>. Subclasses should NOT call back
 into the Document for the modification
 instead call into the superclass or the <code>FilterBypass</code>.
 <p>
 When <code>remove</code> or <code>insertString</code> is invoked
 on the <code>DocumentFilter</code>, the <code>DocumentFilter</code>
 may callback into the
 <code>FilterBypass</code> multiple times, or for different regions, but
 it should not callback into the <code>FilterBypass</code> after returning
 from the <code>remove</code> or <code>insertString</code> method.

 @see javax.swing.text.Document

 @version 1.8 04/07/06
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DocumentFilter.remove(DocumentFilter.FilterBypass fb, int offset, int length) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked prior to removal of the specified region in the
 specified Document. Subclasses that want to conditionally allow
 removal should override this and only call supers implementation as
 necessary, or call directly into the <code>FilterBypass</code> as
 necessary.

 @param fb FilterBypass that can be used to mutate Document
 @param offset the offset from the beginning >= 0
 @param length the number of characters to remove >= 0
 @exception BadLocationException  some portion of the removal range
   was not a valid part of the document.  The location in the exception
   is the first bad position encountered.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DocumentFilter.insertString(DocumentFilter.FilterBypass fb, int offset, String string, AttributeSet attr) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked prior to insertion of text into the
 specified Document. Subclasses that want to conditionally allow
 insertion should override this and only call supers implementation as
 necessary, or call directly into the FilterBypass.

 @param fb FilterBypass that can be used to mutate Document
 @param offset  the offset into the document to insert the content >= 0.
    All positions that track change at or after the given location 
    will move.  
 @param string the string to insert
 @param attr      the attributes to associate with the inserted
   content.  This may be null if there are no attributes.
 @exception BadLocationException  the given insert position is not a
   valid position within the document

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DocumentFilter.replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked prior to replacing a region of text in the
 specified Document. Subclasses that want to conditionally allow
 replace should override this and only call supers implementation as
 necessary, or call directly into the FilterBypass.

 @param fb FilterBypass that can be used to mutate Document
 @param offset Location in Document
 @param length Length of text to delete
 @param text Text to insert, null indicates no text to insert
 @param attrs AttributeSet indicating attributes of inserted text,
              null is legal.
 @exception BadLocationException  the given insert position is not a
   valid position within the document

<!-- END DATA -->
