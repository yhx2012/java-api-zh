<!-- BEGIN KEY -->
public class javax.swing.text.DefaultCaret extends java.awt.Rectangle implements javax.swing.text.Caret, java.awt.event.FocusListener, java.awt.event.MouseListener, java.awt.event.MouseMotionListener
<!-- END KEY -->
<!-- BEGIN DATA -->
 A default implementation of Caret.  The caret is rendered as
 a vertical line in the color specified by the CaretColor property 
 of the associated JTextComponent.  It can blink at the rate specified
 by the BlinkRate property.
 <p>
 This implementation expects two sources of asynchronous notification.
 The timer thread fires asynchronously, and causes the caret to simply
 repaint the most recent bounding box.  The caret also tracks change
 as the document is modified.  Typically this will happen on the
 event dispatch thread as a result of some mouse or keyboard event.
 The caret behavior on both synchronous and asynchronous documents updates
 is controlled by <code>UpdatePolicy</code> property. The repaint of the
 new caret location will occur on the event thread in any case, as calls to
 <code>modelToView</code> are only safe on the event thread.
 <p>
 The caret acts as a mouse and focus listener on the text component
 it has been installed in, and defines the caret semantics based upon
 those events.  The listener methods can be reimplemented to change the 
 semantics.
 By default, the first mouse button will be used to set focus and caret
 position.  Dragging the mouse pointer with the first mouse button will
 sweep out a selection that is contiguous in the model.  If the associated
 text component is editable, the caret will become visible when focus
 is gained, and invisible when focus is lost.
 <p>
 The Highlighter bound to the associated text component is used to 
 render the selection by default.  
 Selection appearance can be customized by supplying a
 painter to use for the highlights.  By default a painter is used that
 will render a solid color as specified in the associated text component
 in the <code>SelectionColor</code> property.  This can easily be changed
 by reimplementing the 
 <a href="#getSelectionHighlighter">getSelectionHighlighter</a>
 method.
 <p>
 A customized caret appearance can be achieved by reimplementing
 the paint method.  If the paint method is changed, the damage method
 should also be reimplemented to cause a repaint for the area needed
 to render the caret.  The caret extends the Rectangle class which
 is used to hold the bounding box for where the caret was last rendered.
 This enables the caret to repaint in a thread-safe manner when the
 caret moves without making a call to modelToView which is unstable
 between model updates and view repair (i.e. the order of delivery 
 to DocumentListeners is not guaranteed).
 <p>
 The magic caret position is set to null when the caret position changes.
 A timer is used to determine the new location (after the caret change).
 When the timer fires, if the magic caret position is still null it is
 reset to the current caret position. Any actions that change
 the caret position and want the magic caret position to remain the
 same, must remember the magic caret position, change the cursor, and
 then set the magic caret position to its original value. This has the
 benefit that only actions that want the magic caret position to persist
 (such as open/down) need to know about it.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @author  Timothy Prinzing
 @version 1.147 04/14/06
 @see     Caret

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.DefaultCaret.UPDATE_WHEN_ON_EDT
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates that the caret position is to be updated only when
 document changes are performed on the Event Dispatching Thread.
 @see #setUpdatePolicy
 @see #getUpdatePolicy
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.DefaultCaret.NEVER_UPDATE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates that the caret should remain at the same
 absolute position in the document regardless of any document
 updates, except when the document length becomes less than
 the current caret position due to removal. In that case the caret
 position is adjusted to the end of the document.

 @see #setUpdatePolicy
 @see #getUpdatePolicy
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.text.DefaultCaret.ALWAYS_UPDATE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates that the caret position is to be <b>always</b>
 updated accordingly to the document changes regardless whether
 the document updates are performed on the Event Dispatching Thread
 or not.

 @see #setUpdatePolicy
 @see #getUpdatePolicy
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.EventListenerList javax.swing.text.DefaultCaret.listenerList
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event listener list.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.event.ChangeEvent javax.swing.text.DefaultCaret.changeEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
 The change event for the model.
 Only one ChangeEvent is needed per model instance since the
 event's only (read-only) state is the source property.  The source
 of events generated here is always "this".

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean javax.swing.text.DefaultCaret.ownsSelection
<!-- END KEY -->
<!-- BEGIN DATA -->
 This is used to indicate if the caret currently owns the selection.
 This is always false if the system does not support the system
 clipboard.

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean javax.swing.text.DefaultCaret.forceCaretPositionChange
<!-- END KEY -->
<!-- BEGIN DATA -->
 If this is true, the location of the dot is updated regardless of
 the current location. This is set in the DocumentListener
 such that even if the model location of dot hasn't changed (perhaps do
 to a forward delete) the visual location is updated.

<!-- END DATA -->
<!-- BEGIN KEY -->
private int javax.swing.text.DefaultCaret.caretWidth
<!-- END KEY -->
<!-- BEGIN DATA -->
 The width of the caret in pixels. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.DefaultCaret()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a default caret.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.setUpdatePolicy(int policy)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the caret movement policy on the document updates. Normally
 the caret updates its absolute position within the document on
 insertions occurred before or at the caret position and
 on removals before the caret position. 'Absolute position'
 means here the position relative to the start of the document.
 For example if
 a character is typed within editable text component it is inserted
 at the caret position and the caret moves to the next absolute
 position within the document due to insertion and if
 <code>BACKSPACE</code> is typed then caret decreases its absolute
 position due to removal of a character before it. Sometimes
 it may be useful to turn off the caret position updates so that
 the caret stays at the same absolute position within the
 document position regardless of any document updates.
 <p>
 The following update policies are allowed:
 <ul>
   <li><code>NEVER_UPDATE</code>: the caret stays at the same
       absolute position in the document regardless of any document
       updates, except when document length becomes less than
       the current caret position due to removal. In that case caret
       position is adjusted to the end of the document.
       The caret doesn't try to keep itself visible by scrolling
       the associated view when using this policy. </li>
   <li><code>ALWAYS_UPDATE</code>: the caret always tracks document
       changes. For regular changes it increases its position
       if an insertion occurs before or at its current position,
       and decreases position if a removal occurs before
       its current position. For undo/redo updates it is always
       moved to the position where update occurred. The caret
       also tries to keep itself visible by calling
       <code>adjustVisibility</code> method.</li>
   <li><code>UPDATE_WHEN_ON_EDT</code>: acts like <code>ALWAYS_UPDATE</code>
       if the document updates are performed on the Event Dispatching Thread
       and like <code>NEVER_UPDATE</code> if updates are performed on
       other thread. </li>
 </ul> <p>
 The default property value is <code>UPDATE_WHEN_ON_EDT</code>.

 @param policy one of the following values : <code>UPDATE_WHEN_ON_EDT</code>,
 <code>NEVER_UPDATE</code>, <code>ALWAYS_UPDATE</code>
 @throws IllegalArgumentException if invalid value is passed

 @see #getUpdatePolicy
 @see #adjustVisibility
 @see #UPDATE_WHEN_ON_EDT
 @see #NEVER_UPDATE
 @see #ALWAYS_UPDATE

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.DefaultCaret.getUpdatePolicy()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the caret movement policy on document updates.

 @return one of the following values : <code>UPDATE_WHEN_ON_EDT</code>,
 <code>NEVER_UPDATE</code>, <code>ALWAYS_UPDATE</code>

 @see #setUpdatePolicy
 @see #UPDATE_WHEN_ON_EDT
 @see #NEVER_UPDATE
 @see #ALWAYS_UPDATE

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final javax.swing.text.JTextComponent javax.swing.text.DefaultCaret.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the text editor component that this caret is 
 is bound to.

 @return the component

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final synchronized void javax.swing.text.DefaultCaret.repaint()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Cause the caret to be painted.  The repaint
 area is the bounding box of the caret (i.e.
 the caret rectangle or <em>this</em>).
 <p>
 This method is thread safe, although most Swing methods
 are not. Please see 
 <A HREF="http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html">How
 to Use Threads</A> for more information.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void javax.swing.text.DefaultCaret.damage(Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Damages the area surrounding the caret to cause
 it to be repainted in a new location.  If paint() 
 is reimplemented, this method should also be 
 reimplemented.  This method should update the 
 caret bounds (x, y, width, and height).

 @param r  the current location of the caret
 @see #paint

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.DefaultCaret.adjustVisibility(Rectangle nloc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Scrolls the associated view (if necessary) to make
 the caret visible.  Since how this should be done
 is somewhat of a policy, this method can be 
 reimplemented to change the behavior.  By default
 the scrollRectToVisible method is called on the
 associated component.

 @param nloc the new position to scroll to

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.Highlighter.HighlightPainter javax.swing.text.DefaultCaret.getSelectionPainter()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the painter for the Highlighter.

 @return the painter

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.DefaultCaret.positionCaret(MouseEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tries to set the position of the caret from
 the coordinates of a mouse event, using viewToModel().

 @param e the mouse event

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.DefaultCaret.moveCaret(MouseEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tries to move the position of the caret from
 the coordinates of a mouse event, using viewToModel(). 
 This will cause a selection if the dot and mark
 are different.

 @param e the mouse event

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.focusGained(FocusEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when the component containing the caret gains
 focus.  This is implemented to set the caret to visible
 if the component is editable.

 @param e the focus event
 @see FocusListener#focusGained

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.focusLost(FocusEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when the component containing the caret loses
 focus.  This is implemented to set the caret to visibility
 to false.

 @param e the focus event
 @see FocusListener#focusLost

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.mouseClicked(MouseEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when the mouse is clicked.  If the click was generated
 from button1, a double click selects a word,
 and a triple click the current line.

 @param e the mouse event
 @see MouseListener#mouseClicked

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.mousePressed(MouseEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If button 1 is pressed, this is implemented to
 request focus on the associated text component, 
 and to set the caret position. If the shift key is held down,
 the caret will be moved, potentially resulting in a selection,
 otherwise the
 caret position will be set to the new location.  If the component
 is not enabled, there will be no request for focus.

 @param e the mouse event
 @see MouseListener#mousePressed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.mouseReleased(MouseEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when the mouse is released.

 @param e the mouse event
 @see MouseListener#mouseReleased

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.mouseEntered(MouseEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when the mouse enters a region.

 @param e the mouse event
 @see MouseListener#mouseEntered

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.mouseExited(MouseEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when the mouse exits a region.

 @param e the mouse event
 @see MouseListener#mouseExited

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.mouseDragged(MouseEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Moves the caret position 
 according to the mouse pointer's current
 location.  This effectively extends the
 selection.  By default, this is only done
 for mouse button 1.

 @param e the mouse event
 @see MouseMotionListener#mouseDragged

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.mouseMoved(MouseEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when the mouse is moved.

 @param e the mouse event
 @see MouseMotionListener#mouseMoved

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.paint(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Renders the caret as a vertical line.  If this is reimplemented
 the damage method should also be reimplemented as it assumes the
 shape of the caret is a vertical line.  Sets the caret color to
 the value returned by getCaretColor().
 <p>
 If there are multiple text directions present in the associated
 document, a flag indicating the caret bias will be rendered.
 This will occur only if the associated document is a subclass
 of AbstractDocument and there are multiple bidi levels present
 in the bidi element structure (i.e. the text has multiple
 directions associated with it).

 @param g the graphics context
 @see #damage

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.install(JTextComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when the UI is being installed into the
 interface of a JTextComponent.  This can be used
 to gain access to the model that is being navigated
 by the implementation of this interface.  Sets the dot
 and mark to 0, and establishes document, property change,
 focus, mouse, and mouse motion listeners.

 @param c the component
 @see Caret#install

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.deinstall(JTextComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when the UI is being removed from the
 interface of a JTextComponent.  This is used to
 unregister any listeners that were attached.

 @param c the component
 @see Caret#deinstall

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.addChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a listener to track whenever the caret position has
 been changed.

 @param l the listener
 @see Caret#addChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.removeChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a listener that was tracking caret position changes.

 @param l the listener
 @see Caret#removeChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.ChangeListener[] javax.swing.text.DefaultCaret.getChangeListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the change listeners
 registered on this caret.

 @return all of this caret's <code>ChangeListener</code>s 
         or an empty
         array if no change listeners are currently registered

 @see #addChangeListener
 @see #removeChangeListener

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.DefaultCaret.fireStateChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.  The event instance 
 is lazily created using the parameters passed into 
 the fire method.  The listener list is processed last to first.

 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] javax.swing.text.DefaultCaret.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the objects currently registered
 as <code><em>Foo</em>Listener</code>s
 upon this caret.
 <code><em>Foo</em>Listener</code>s are registered using the
 <code>add<em>Foo</em>Listener</code> method.

 <p>

 You can specify the <code>listenerType</code> argument
 with a class literal,
 such as
 <code><em>Foo</em>Listener.class</code>.
 For example, you can query a
 <code>DefaultCaret</code> <code>c</code>
 for its change listeners with the following code:

 <pre>ChangeListener[] cls = (ChangeListener[])(c.getListeners(ChangeListener.class));</pre>

 If no such listeners exist, this method returns an empty array.

 @param listenerType the type of listeners requested; this parameter
          should specify an interface that descends from
          <code>java.util.EventListener</code>
 @return an array of all objects registered as
          <code><em>Foo</em>Listener</code>s on this component,
          or an empty array if no such
          listeners have been added
 @exception ClassCastException if <code>listenerType</code>
          doesn't specify a class or interface that implements
          <code>java.util.EventListener</code>

 @see #getChangeListeners

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.setSelectionVisible(boolean vis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Changes the selection visibility.

 @param vis the new visibility

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.DefaultCaret.isSelectionVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks whether the current selection is visible.

 @return true if the selection is visible

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.DefaultCaret.isActive()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines if the caret is currently active.
 <p>
 This method returns whether or not the <code>Caret</code>
 is currently in a blinking state. It does not provide
 information as to whether it is currently blinked on or off.
 To determine if the caret is currently painted use the
 <code>isVisible</code> method.

 @return <code>true</code> if active else <code>false</code>
 @see #isVisible

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.DefaultCaret.isVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates whether or not the caret is currently visible. As the
 caret flashes on and off the return value of this will change
 between true, when the caret is painted, and false, when the
 caret is not painted. <code>isActive</code> indicates whether
 or not the caret is in a blinking state, such that it <b>can</b>
 be visible, and <code>isVisible</code> indicates whether or not
 the caret <b>is</b> actually visible.
 <p>
 Subclasses that wish to render a different flashing caret
 should override paint and only paint the caret if this method
 returns true.

 @return true if visible else false
 @see Caret#isVisible
 @see #isActive

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.setVisible(boolean e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the caret visibility, and repaints the caret.
 It is important to understand the relationship between this method,
 <code>isVisible</code> and <code>isActive</code>.
 Calling this method with a value of <code>true</code> activates the
 caret blinking. Setting it to <code>false</code> turns it completely off.
 To determine whether the blinking is active, you should call
 <code>isActive</code>. In effect, <code>isActive</code> is an
 appropriate corresponding "getter" method for this one.
 <code>isVisible</code> can be used to fetch the current
 visibility status of the caret, meaning whether or not it is currently
 painted. This status will change as the caret blinks on and off.
 <p>
 Here's a list showing the potential return values of both
 <code>isActive</code> and <code>isVisible</code>
 after calling this method:
 <p>
 <b><code>setVisible(true)</code></b>:
 <ul>
     <li>isActive(): true</li>
     <li>isVisible(): true or false depending on whether
         or not the caret is blinked on or off</li>
 </ul>
 <p>
 <b><code>setVisible(false)</code></b>:
 <ul>
     <li>isActive(): false</li>
     <li>isVisible(): false</li>
 </ul>

 @param e the visibility specifier
 @see #isActive
 @see Caret#setVisible

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.setBlinkRate(int rate)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the caret blink rate.

 @param rate the rate in milliseconds, 0 to stop blinking
 @see Caret#setBlinkRate

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.DefaultCaret.getBlinkRate()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the caret blink rate.

 @return the delay in milliseconds.  If this is
  zero the caret will not blink.
 @see Caret#getBlinkRate

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.DefaultCaret.getDot()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the current position of the caret.

 @return the position &gt;= 0
 @see Caret#getDot

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.text.DefaultCaret.getMark()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the current position of the mark.  If there is a selection,
 the dot and mark will not be the same.

 @return the position &gt;= 0
 @see Caret#getMark

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.setDot(int dot)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the caret position and mark to the specified position,
 with a forward bias. This implicitly sets the
 selection range to zero.

 @param dot the position &gt;= 0
 @see #setDot(int, Position.Bias)
 @see Caret#setDot

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.moveDot(int dot)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Moves the caret position to the specified position,
 with a forward bias.

 @param dot the position &gt;= 0
 @see #moveDot(int, javax.swing.text.Position.Bias)
 @see Caret#moveDot

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.moveDot(int dot, Position.Bias dotBias)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Moves the caret position to the specified position, with the
 specified bias.

 @param dot the position &gt;= 0
 @param dotBias the bias for this position, not <code>null</code>
 @throws IllegalArgumentException if the bias is <code>null</code>
 @see Caret#moveDot
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.setDot(int dot, Position.Bias dotBias)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the caret position and mark to the specified position, with the
 specified bias. This implicitly sets the selection range
 to zero.

 @param dot the position &gt;= 0
 @param dotBias the bias for this position, not <code>null</code>
 @throws IllegalArgumentException if the bias is <code>null</code>
 @see Caret#setDot
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Position.Bias javax.swing.text.DefaultCaret.getDotBias()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the bias of the caret position.

 @return the bias of the caret position
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Position.Bias javax.swing.text.DefaultCaret.getMarkBias()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the bias of the mark.

 @return the bias of the mark
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultCaret.setMagicCaretPosition(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Saves the current caret position.  This is used when 
 caret up/down actions occur, moving between lines
 that have uneven end positions.

 @param p the position
 @see #getMagicCaretPosition

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point javax.swing.text.DefaultCaret.getMagicCaretPosition()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the saved caret position.

 @return the position
 see #setMagicCaretPosition

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.text.DefaultCaret.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares this object to the specified object.
 The superclass behavior of comparing rectangles
 is not desired, so this is changed to the Object
 behavior.

 @param     obj   the object to compare this font with
 @return    <code>true</code> if the objects are equal; 
            <code>false</code> otherwise

<!-- END DATA -->
