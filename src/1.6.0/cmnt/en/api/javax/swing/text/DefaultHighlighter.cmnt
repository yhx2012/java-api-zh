<!-- BEGIN KEY -->
public class javax.swing.text.DefaultHighlighter extends javax.swing.text.LayeredHighlighter
<!-- END KEY -->
<!-- BEGIN DATA -->
 Implements the Highlighter interfaces.  Implements a simple highlight
 painter that renders in a solid color.
 
 @author  Timothy Prinzing
 @version 1.40 11/17/05
 @see     Highlighter

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.swing.text.LayeredHighlighter.LayerPainter javax.swing.text.DefaultHighlighter.DefaultPainter
<!-- END KEY -->
<!-- BEGIN DATA -->
 Default implementation of LayeredHighlighter.LayerPainter that can
 be used for painting highlights.
 <p>
 As of 1.4 this field is final.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.DefaultHighlighter()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new DefaultHighlighther object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultHighlighter.paint(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Renders the highlights.

 @param g the graphics context

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultHighlighter.install(JTextComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when the UI is being installed into the
 interface of a JTextComponent.  Installs the editor, and
 removes any existing highlights.

 @param c the editor component
 @see Highlighter#install

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultHighlighter.deinstall(JTextComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when the UI is being removed from the interface of
 a JTextComponent.

 @param c the component
 @see Highlighter#deinstall

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.text.DefaultHighlighter.addHighlight(int p0, int p1, Highlighter.HighlightPainter p) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a highlight to the view.  Returns a tag that can be used 
 to refer to the highlight.

 @param p0   the start offset of the range to highlight >= 0
 @param p1   the end offset of the range to highlight >= p0
 @param p    the painter to use to actually render the highlight
 @return     an object that can be used as a tag
   to refer to the highlight
 @exception BadLocationException if the specified location is invalid

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultHighlighter.removeHighlight(Object tag)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a highlight from the view.

 @param tag the reference to the highlight

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultHighlighter.removeAllHighlights()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all highlights.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultHighlighter.changeHighlight(Object tag, int p0, int p1) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Changes a highlight.

 @param tag the highlight tag
 @param p0 the beginning of the range >= 0
 @param p1 the end of the range >= p0
 @exception BadLocationException if the specified location is invalid

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.Highlighter.Highlight[] javax.swing.text.DefaultHighlighter.getHighlights()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Makes a copy of the highlights.  Does not actually clone each highlight,
 but only makes references to them.

 @return the copy
 @see Highlighter#getHighlights

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultHighlighter.paintLayeredHighlights(Graphics g, int p0, int p1, Shape viewBounds, JTextComponent editor, View view)
<!-- END KEY -->
<!-- BEGIN DATA -->
 When leaf Views (such as LabelView) are rendering they should
 call into this method. If a highlight is in the given region it will
 be drawn immediately.

 @param g Graphics used to draw
 @param p0 starting offset of view
 @param p1 ending offset of view
 @param viewBounds Bounds of View
 @param editor JTextComponent
 @param view View instance being rendered

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.DefaultHighlighter.setDrawsLayeredHighlights(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If true, highlights are drawn as the Views draw the text. That is
 the Views will call into <code>paintLayeredHighlight</code> which
 will result in a rectangle being drawn before the text is drawn
 (if the offsets are in a highlighted region that is). For this to
 work the painter supplied must be an instance of
 LayeredHighlightPainter.

<!-- END DATA -->
