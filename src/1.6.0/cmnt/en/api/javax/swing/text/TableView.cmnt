<!-- BEGIN KEY -->
public abstract class javax.swing.text.TableView extends javax.swing.text.BoxView
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
 Implements View interface for a table, that is composed of an
 element structure where the child elements of the element
 this view is responsible for represent rows and the child 
 elements of the row elements are cells.  The cell elements can
 have an arbitrary element structure under them, which will
 be built with the ViewFactory returned by the getViewFactory
 method.
 <pre>

 &nbsp;  TABLE
 &nbsp;    ROW
 &nbsp;      CELL
 &nbsp;      CELL
 &nbsp;    ROW
 &nbsp;      CELL
 &nbsp;      CELL

 </pre>
 <p>
 This is implemented as a hierarchy of boxes, the table itself
 is a vertical box, the rows are horizontal boxes, and the cells
 are vertical boxes.  The cells are allowed to span multiple
 columns and rows.  By default, the table can be thought of as
 being formed over a grid (i.e. somewhat like one would find in
 gridbag layout), where table cells can request to span more
 than one grid cell.  The default horizontal span of table cells
 will be based upon this grid, but can be changed by reimplementing
 the requested span of the cell (i.e. table cells can have independant
 spans if desired).
 
 @author  Timothy Prinzing
 @version 1.36 04/07/06
 @see     View

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.TableView(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a TableView for the given element.

 @param elem the element that this view is responsible for

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.TableView.TableRow javax.swing.text.TableView.createTableRow(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new table row.

 @param elem an element
 @return the row

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.TableView.TableCell javax.swing.text.TableView.createTableCell(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated Table cells can now be any arbitrary 
 View implementation and should be produced by the
 ViewFactory rather than the table.

 @param elem an element
 @return the cell

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.text.TableView.replace(int offset, int length, javax.swing.text.View[] views)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Change the child views.  This is implemented to
 provide the superclass behavior and invalidate the
 grid so that rows and columns will be recalculated.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.TableView.layoutColumns(int targetSpan, int[] offsets, int[] spans, javax.swing.SizeRequirements[] reqs)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Lays out the columns to fit within the given target span.
 Returns the results through {@code offsets} and {@code spans}.

 @param targetSpan the given span for total of all the table
  columns
 @param reqs the requirements desired for each column.  This
  is the column maximum of the cells minimum, preferred, and
  maximum requested span
 @param spans the return value of how much to allocated to
  each column
 @param offsets the return value of the offset from the
  origin for each column

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.text.TableView.layoutMinorAxis(int targetSpan, int axis, int[] offsets, int[] spans)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Perform layout for the minor axis of the box (i.e. the
 axis orthoginal to the axis that it represents).  The results 
 of the layout should be placed in the given arrays which represent 
 the allocations to the children along the minor axis.  This 
 is called by the superclass whenever the layout needs to be 
 updated along the minor axis.
 <p>
 This is implemented to call the 
 <a href="#layoutColumns">layoutColumns</a> method, and then
 forward to the superclass to actually carry out the layout
 of the tables rows.

 @param targetSpan the total span given to the view, which
  whould be used to layout the children.
 @param axis the axis being layed out.
 @param offsets the offsets from the origin of the view for
  each of the child views.  This is a return value and is
  filled in by the implementation of this method.
 @param spans the span of each child view.  This is a return
  value and is filled in by the implementation of this method.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.SizeRequirements javax.swing.text.TableView.calculateMinorAxisRequirements(int axis, SizeRequirements r)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Calculate the requirements for the minor axis.  This is called by
 the superclass whenever the requirements need to be updated (i.e.
 a preferenceChanged was messaged through this view).  
 <p>
 This is implemented to calculate the requirements as the sum of the 
 requirements of the columns.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.View javax.swing.text.TableView.getViewAtPosition(int pos, Rectangle a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the child view that represents the given position in
 the model.  This is implemented to walk through the children
 looking for a range that contains the given position.  In this
 view the children do not necessarily have a one to one mapping 
 with the child elements.

 @param pos  the search position >= 0
 @param a  the allocation to the table on entry, and the
   allocation of the view containing the position on exit
 @return  the view representing the given position, or 
   <code>null</code> if there isn't one

<!-- END DATA -->
