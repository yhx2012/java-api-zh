<!-- BEGIN KEY -->
public static class javax.swing.JTree.DynamicUtilTreeNode extends javax.swing.tree.DefaultMutableTreeNode
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>DynamicUtilTreeNode</code> can wrap 
 vectors/hashtables/arrays/strings and
 create the appropriate children tree nodes as necessary. It is
 dynamic in that it will only create the children as necessary.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JTree.DynamicUtilTreeNode.hasChildren
<!-- END KEY -->
<!-- BEGIN DATA -->
 Does the this <code>JTree</code> have children?
 This property is currently not implemented.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object javax.swing.JTree.DynamicUtilTreeNode.childValue
<!-- END KEY -->
<!-- BEGIN DATA -->
Value to create children with. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JTree.DynamicUtilTreeNode.loadedChildren
<!-- END KEY -->
<!-- BEGIN DATA -->
Have the children been loaded yet? 
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JTree.DynamicUtilTreeNode(Object value, Object children)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a node with the specified object as its value and
 with the specified children. For the node to allow children,
 the children-object must be an array of objects, a
 <code>Vector</code>, or a <code>Hashtable</code> -- even
 if empty. Otherwise, the node is not
 allowed to have children.

 @param value  the <code>Object</code> that is the value for the
		new node
 @param children an array of <code>Object</code>s, a
		<code>Vector</code>, or a <code>Hashtable</code>
		used to create the child nodes; if any other
		object is specified, or if the value is
		<code>null</code>,
		then the node is not allowed to have children

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.JTree.DynamicUtilTreeNode.createChildren(DefaultMutableTreeNode parent, Object children)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds to parent all the children in <code>children</code>.
 If <code>children</code> is an array or vector all of its
 elements are added is children, otherwise if <code>children</code>
 is a hashtable all the key/value pairs are added in the order
 <code>Enumeration</code> returns them.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JTree.DynamicUtilTreeNode.isLeaf()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if this node allows children. Whether the node
 allows children depends on how it was created.

 @return true if this node allows children, false otherwise
 @see #JTree.DynamicUtilTreeNode

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTree.DynamicUtilTreeNode.getChildCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of child nodes.

 @return the number of child nodes

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JTree.DynamicUtilTreeNode.loadChildren()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Loads the children based on <code>childValue</code>.
 If <code>childValue</code> is a <code>Vector</code>
 or array each element is added as a child,
 if <code>childValue</code> is a <code>Hashtable</code>
 each key/value pair is added in the order that
 <code>Enumeration</code> returns the keys.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreeNode javax.swing.JTree.DynamicUtilTreeNode.getChildAt(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Subclassed to load the children, if necessary.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration javax.swing.JTree.DynamicUtilTreeNode.children()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Subclassed to load the children, if necessary.

<!-- END DATA -->
