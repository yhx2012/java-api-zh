<!-- BEGIN KEY -->
public interface javax.swing.DesktopManager
<!-- END KEY -->
<!-- BEGIN DATA -->
DesktopManager objects are owned by a JDesktopPane object. They are responsible
 for implementing L&F specific behaviors for the JDesktopPane. JInternalFrame 
 implementations should delegate specific behaviors to the DesktopManager. For
 instance, if a JInternalFrame was asked to iconify, it should try:
 <PRE>
    getDesktopPane().getDesktopManager().iconifyFrame(frame);
 </PRE>
 This delegation allows each L&F to provide custom behaviors for desktop-specific
 actions. (For example, how and where the internal frame's icon would appear.)
 <p>This class provides a policy for the various JInternalFrame methods, it is not
 meant to be called directly rather the various JInternalFrame methods will call 
 into the DesktopManager.</p>
 
 @see JDesktopPane
 @see JInternalFrame
 @see JInternalFrame.JDesktopIcon

 @version 1.16 11/17/05
 @author David Kloba

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.openFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
If possible, display this frame in an appropriate location.
 Normally, this is not called, as the creator of the JInternalFrame
 will add the frame to the appropriate parent.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.closeFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
Generally, this call should remove the frame from it's parent. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.maximizeFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
Generally, the frame should be resized to match it's parents bounds. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.minimizeFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
Generally, this indicates that the frame should be restored to it's 
 size and position prior to a maximizeFrame() call.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.iconifyFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
Generally, remove this frame from it's parent and add an iconic representation. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.deiconifyFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
Generally, remove any iconic representation that is present and restore the
 frame to it's original size and location.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.activateFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Generally, indicate that this frame has focus. This is usually called after 
 the JInternalFrame's IS_SELECTED_PROPERTY has been set to true.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.deactivateFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Generally, indicate that this frame has lost focus. This is usually called 
 after the JInternalFrame's IS_SELECTED_PROPERTY has been set to false.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.beginDraggingFrame(JComponent f)
<!-- END KEY -->
<!-- BEGIN DATA -->
This method is normally called when the user has indicated that 
 they will begin dragging a component around. This method should be called
 prior to any dragFrame() calls to allow the DesktopManager to prepare any
 necessary state. Normally <b>f</b> will be a JInternalFrame.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.dragFrame(JComponent f, int newX, int newY)
<!-- END KEY -->
<!-- BEGIN DATA -->
The user has moved the frame. Calls to this method will be preceded by calls
 to beginDraggingFrame(). 
  Normally <b>f</b> will be a JInternalFrame.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.endDraggingFrame(JComponent f)
<!-- END KEY -->
<!-- BEGIN DATA -->
This method signals the end of the dragging session. Any state maintained by
 the DesktopManager can be removed here.  Normally <b>f</b> will be a JInternalFrame.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.beginResizingFrame(JComponent f, int direction)
<!-- END KEY -->
<!-- BEGIN DATA -->
This methods is normally called when the user has indicated that 
 they will begin resizing the frame. This method should be called
 prior to any resizeFrame() calls to allow the DesktopManager to prepare any
 necessary state.  Normally <b>f</b> will be a JInternalFrame.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.resizeFrame(JComponent f, int newX, int newY, int newWidth, int newHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
The user has resized the component. Calls to this method will be preceded by calls
 to beginResizingFrame(). 
  Normally <b>f</b> will be a JInternalFrame.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.endResizingFrame(JComponent f)
<!-- END KEY -->
<!-- BEGIN DATA -->
This method signals the end of the resize session. Any state maintained by
 the DesktopManager can be removed here.  Normally <b>f</b> will be a JInternalFrame.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DesktopManager.setBoundsForFrame(JComponent f, int newX, int newY, int newWidth, int newHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
This is a primitive reshape method.
<!-- END DATA -->
