<!-- BEGIN KEY -->
public class javax.swing.DefaultDesktopManager extends java.lang.Object implements javax.swing.DesktopManager, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
This is an implementation of the <code>DesktopManager</code>.
 It currently implements the basic behaviors for managing
 <code>JInternalFrame</code>s in an arbitrary parent.
 <code>JInternalFrame</code>s that are not children of a
 <code>JDesktop</code> will use this component
 to handle their desktop-like actions.
 <p>This class provides a policy for the various JInternalFrame methods,
 it is not meant to be called directly rather the various JInternalFrame
 methods will call into the DesktopManager.</p>
 @see JDesktopPane
 @see JInternalFrame
 @version 1.58 05/09/06
 @author David Kloba
 @author Steve Wilson

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultDesktopManager.openFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
Normally this method will not be called. If it is, it
 try to determine the appropriate parent from the desktopIcon of the frame.
 Will remove the desktopIcon from its parent if it successfully adds the frame.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultDesktopManager.closeFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the frame, and, if necessary, the
 <code>desktopIcon</code>, from its parent.
 @param f the <code>JInternalFrame</code> to be removed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultDesktopManager.maximizeFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resizes the frame to fill its parents bounds.
 @param f the frame to be resized

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultDesktopManager.minimizeFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Restores the frame back to its size and position prior
 to a <code>maximizeFrame</code> call.
 @param f the <code>JInternalFrame</code> to be restored

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultDesktopManager.iconifyFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the frame from its parent and adds its
 <code>desktopIcon</code> to the parent.
 @param f the <code>JInternalFrame</code> to be iconified

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultDesktopManager.deiconifyFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the desktopIcon from its parent and adds its frame
 to the parent.
 @param f the <code>JInternalFrame</code> to be de-iconified

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultDesktopManager.activateFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
This will activate <b>f</b> moving it to the front. It will
 set the current active frame's (if any)
 <code>IS_SELECTED_PROPERTY</code> to <code>false</code>.
 There can be only one active frame across all Layers.
 @param f the <code>JInternalFrame</code> to be activated

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultDesktopManager.dragFrame(JComponent f, int newX, int newY)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Moves the visible location of the frame being dragged
 to the location specified.  The means by which this occurs can vary depending 
 on the dragging algorithm being used.  The actual logical location of the frame
 might not change until <code>endDraggingFrame</code> is called.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultDesktopManager.resizeFrame(JComponent f, int newX, int newY, int newWidth, int newHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Calls <code>setBoundsForFrame</code> with the new values.
 @param f the component to be resized
 @param newX the new x-coordinate
 @param newY the new y-coordinate
 @param newWidth the new width
 @param newHeight the new height

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultDesktopManager.setBoundsForFrame(JComponent f, int newX, int newY, int newWidth, int newHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
This moves the <code>JComponent</code> and repaints the damaged areas. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.DefaultDesktopManager.removeIconFor(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
Convenience method to remove the desktopIcon of <b>f</b> is necessary. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.DefaultDesktopManager.getBoundsForIconOf(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
The iconifyFrame() code calls this to determine the proper bounds
 for the desktopIcon.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.DefaultDesktopManager.setPreviousBounds(JInternalFrame f, Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Stores the bounds of the component just before a maximize call.
 @param f the component about to be resized
 @param r the normal bounds to be saved away

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.DefaultDesktopManager.getPreviousBounds(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the normal bounds of the component prior to the component
 being maximized.
 @param f the <code>JInternalFrame</code> of interest
 @return the normal bounds of the component

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.DefaultDesktopManager.setWasIcon(JInternalFrame f, Boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets that the component has been iconized and the bounds of the
 <code>desktopIcon</code> are valid.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.DefaultDesktopManager.wasIcon(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <code>true</code> if the component has been iconized
 and the bounds of the <code>desktopIcon</code> are valid,
 otherwise returns <code>false</code>.

 @param f the <code>JInternalFrame</code> of interest
 @return <code>true</code> if the component has been iconized;
    otherwise returns <code>false</code>

<!-- END DATA -->
