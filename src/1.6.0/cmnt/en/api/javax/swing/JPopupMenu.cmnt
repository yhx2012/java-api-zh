<!-- BEGIN KEY -->
public class javax.swing.JPopupMenu extends javax.swing.JComponent implements javax.accessibility.Accessible, javax.swing.MenuElement
<!-- END KEY -->
<!-- BEGIN DATA -->
 An implementation of a popup menu -- a small window that pops up
 and displays a series of choices. A <code>JPopupMenu</code> is used for the
 menu that appears when the user selects an item on the menu bar.
 It is also used for "pull-right" menu that appears when the
 selects a menu item that activates it. Finally, a <code>JPopupMenu</code>
 can also be used anywhere else you want a menu to appear.  For
 example, when the user right-clicks in a specified area.
 <p>
 For information and examples of using popup menus, see
 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/components/menu.html">How to Use Menus</a>
 in <em>The Java Tutorial.</em>
 <p>
 <strong>Warning:</strong> Swing is not thread safe. For more
 information see <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @beaninfo
   attribute: isContainer false
 description: A small window that pops up and displays a series of choices.

 @version 1.198 @(#)JPopupMenu.java	1.198
 @author Georges Saab
 @author David Karlton
 @author Arnaud Weber

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean javax.swing.JPopupMenu.lightWeightPopup
<!-- END KEY -->
<!-- BEGIN DATA -->
 Used to indicate if lightweight popups should be used.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JPopupMenu()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>JPopupMenu</code> without an "invoker".

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JPopupMenu(String label)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>JPopupMenu</code> with the specified title.

 @param label  the string that a UI may use to display as a title 
 for the popup menu.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.JPopupMenu.setDefaultLightWeightPopupEnabled(boolean aFlag)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Sets the default value of the <code>lightWeightPopupEnabled</code>
  property.

  @param aFlag <code>true</code> if popups can be lightweight,
               otherwise <code>false</code>
  @see #getDefaultLightWeightPopupEnabled
  @see #setLightWeightPopupEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.JPopupMenu.getDefaultLightWeightPopupEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->

  Gets the <code>defaultLightWeightPopupEnabled</code> property,
  which by default is <code>true</code>.

  @return the value of the <code>defaultLightWeightPopupEnabled</code>
          property

  @see #setDefaultLightWeightPopupEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.PopupMenuUI javax.swing.JPopupMenu.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the look and feel (L&F) object that renders this component.

 @return the <code>PopupMenuUI</code> object that renders this component

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setUI(PopupMenuUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the L&F object that renders this component.

 @param ui the new <code>PopupMenuUI</code> L&F object
 @see UIDefaults#getUI
 @beaninfo
        bound: true
       hidden: true
    attribute: visualUpdate true
  description: The UI object that implements the Component's LookAndFeel. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets the UI property to a value from the current look and feel.

 @see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JPopupMenu.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of the L&F class that renders this component.

 @return the string "PopupMenuUI"
 @see JComponent#getUIClassID
 @see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JPopupMenu.processKeyEvent(KeyEvent evt)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Processes key stroke events such as mnemonics and accelerators.

 @param evt  the key event to be processed

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.SingleSelectionModel javax.swing.JPopupMenu.getSelectionModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the model object that handles single selections.

 @return the <code>selectionModel</code> property
 @see SingleSelectionModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setSelectionModel(SingleSelectionModel model)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the model object to handle single selections.

 @param model the new <code>SingleSelectionModel</code>
 @see SingleSelectionModel
 @beaninfo
 description: The selection model for the popup menu
      expert: true

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem javax.swing.JPopupMenu.add(JMenuItem menuItem)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends the specified menu item to the end of this menu. 

 @param menuItem the <code>JMenuItem</code> to add
 @return the <code>JMenuItem</code> added

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem javax.swing.JPopupMenu.add(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new menu item with the specified text and appends
 it to the end of this menu.
  
 @param s the string for the menu item to be added

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem javax.swing.JPopupMenu.add(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends a new menu item to the end of the menu which 
 dispatches the specified <code>Action</code> object.

 @param a the <code>Action</code> to add to the menu
 @return the new menu item
 @see Action

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JMenuItem javax.swing.JPopupMenu.createActionComponent(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Factory method which creates the <code>JMenuItem</code> for
 <code>Actions</code> added to the <code>JPopupMenu</code>.

 @param a the <code>Action</code> for the menu item to be added
 @return the new menu item
 @see Action

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeListener javax.swing.JPopupMenu.createActionChangeListener(JMenuItem b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a properly configured <code>PropertyChangeListener</code>
 which updates the control as changes to the <code>Action</code> occur.  

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.remove(int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the component at the specified index from this popup menu.

 @param       pos the position of the item to be removed
 @exception   IllegalArgumentException if the value of 
                       	<code>pos</code> < 0, or if the value of
				<code>pos</code> is greater than the
				number of items

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setLightWeightPopupEnabled(boolean aFlag)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the value of the <code>lightWeightPopupEnabled</code> property,
 which by default is <code>true</code>.
 By default, when a look and feel displays a popup, 
 it can choose to
 use a lightweight (all-Java) popup.
 Lightweight popup windows are more efficient than heavyweight 
 (native peer) windows,
 but lightweight and heavyweight components do not mix well in a GUI.
 If your application mixes lightweight and heavyweight components,
 you should disable lightweight popups.
 Some look and feels might always use heavyweight popups,
 no matter what the value of this property.

 @param aFlag  <code>false</code> to disable lightweight popups
 @beaninfo
 description: Determines whether lightweight popups are used when possible
      expert: true

 @see #isLightWeightPopupEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JPopupMenu.isLightWeightPopupEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>lightWeightPopupEnabled</code> property.

 @return the value of the <code>lightWeightPopupEnabled</code> property
 @see #setLightWeightPopupEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JPopupMenu.getLabel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the popup menu's label

 @return a string containing the popup menu's label
 @see #setLabel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setLabel(String label)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the popup menu's label.  Different look and feels may choose
 to display or not display this.

 @param label a string specifying the label for the popup menu

 @see #setLabel
 @beaninfo
 description: The label for the popup menu. 
       bound: true

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.addSeparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends a new separator at the end of the menu.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.insert(Action a, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts a menu item for the specified <code>Action</code> object at 
 a given position.

 @param a  the <code>Action</code> object to insert
 @param index      specifies the position at which to insert the
                   <code>Action</code>, where 0 is the first
 @exception IllegalArgumentException if <code>index</code> < 0
 @see Action

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.insert(Component component, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified component into the menu at a given
 position.

 @param component  the <code>Component</code> to insert
 @param index      specifies the position at which
                   to insert the component, where 0 is the first
 @exception IllegalArgumentException if <code>index</code> < 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.addPopupMenuListener(PopupMenuListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Adds a <code>PopupMenu</code> listener.

  @param l  the <code>PopupMenuListener</code> to add

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.removePopupMenuListener(PopupMenuListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a <code>PopupMenu</code> listener.

 @param l  the <code>PopupMenuListener</code> to remove

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.PopupMenuListener[] javax.swing.JPopupMenu.getPopupMenuListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the <code>PopupMenuListener</code>s added
 to this JMenuItem with addPopupMenuListener().
 
 @return all of the <code>PopupMenuListener</code>s added or an empty
         array if no listeners have been added
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.addMenuKeyListener(MenuKeyListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a <code>MenuKeyListener</code> to the popup menu.

 @param l the <code>MenuKeyListener</code> to be added
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.removeMenuKeyListener(MenuKeyListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a <code>MenuKeyListener</code> from the popup menu.

 @param l the <code>MenuKeyListener</code> to be removed
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.MenuKeyListener[] javax.swing.JPopupMenu.getMenuKeyListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the <code>MenuKeyListener</code>s added
 to this JPopupMenu with addMenuKeyListener().

 @return all of the <code>MenuKeyListener</code>s added or an empty
         array if no listeners have been added
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JPopupMenu.firePopupMenuWillBecomeVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies <code>PopupMenuListener</code>s that this popup menu will 
 become visible.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JPopupMenu.firePopupMenuWillBecomeInvisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies <code>PopupMenuListener</code>s that this popup menu will 
 become invisible.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JPopupMenu.firePopupMenuCanceled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies <code>PopupMenuListeners</code> that this popup menu is 
 cancelled.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.pack()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Lays out the container so that it uses the minimum space
 needed to display its contents.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setVisible(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the visibility of the popup menu.
 
 @param b true to make the popup visible, or false to
          hide it
 @beaninfo
           bound: true
     description: Makes the popup visible

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JPopupMenu.isVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the popup menu is visible (currently
 being displayed).

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setLocation(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the location of the upper left corner of the
 popup menu using x, y coordinates.

 @param x the x coordinate of the popup's new position
          in the screen's coordinate space
 @param y the y coordinate of the popup's new position
          in the screen's coordinate space
 @beaninfo
 description: The location of the popup menu.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JPopupMenu.getInvoker()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the component which is the 'invoker' of this 
 popup menu.

 @return the <code>Component</code> in which the popup menu is displayed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setInvoker(Component invoker)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the invoker of this popup menu -- the component in which
 the popup menu menu is to be displayed.

 @param invoker the <code>Component</code> in which the popup
		menu is displayed
 @beaninfo
 description: The invoking component for the popup menu
      expert: true

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.show(Component invoker, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Displays the popup menu at the position x,y in the coordinate
 space of the component invoker.

 @param invoker the component in whose space the popup menu is to appear
 @param x the x coordinate in invoker's coordinate space at which 
 the popup menu is to be displayed
 @param y the y coordinate in invoker's coordinate space at which 
 the popup menu is to be displayed

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JPopupMenu.getComponentAtIndex(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the component at the specified index.
 
 @param i  the index of the component, where 0 is the first 
 @return the <code>Component</code> at that index 
 @deprecated replaced by {@link java.awt.Container#getComponent(int)} 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JPopupMenu.getComponentIndex(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the index of the specified component.
 
 @param  c the <code>Component</code> to find
 @return the index of the component, where 0 is the first;
         or -1 if the component is not found

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setPopupSize(Dimension d)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the size of the Popup window using a <code>Dimension</code> object.
 This is equivalent to <code>setPreferredSize(d)</code>.

 @param d   the <code>Dimension</code> specifying the new size 
 of this component.
 @beaninfo
 description: The size of the popup menu

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setPopupSize(int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the size of the Popup window to the specified width and
 height. This is equivalent to
  <code>setPreferredSize(new Dimension(width, height))</code>.

 @param width the new width of the Popup in pixels
 @param height the new height of the Popup in pixels
 @beaninfo
 description: The size of the popup menu

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setSelected(Component sel)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the currently selected component,  This will result
 in a change to the selection model.

 @param sel the <code>Component</code> to select
 @beaninfo
 description: The selected component on the popup menu
      expert: true
      hidden: true

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JPopupMenu.isBorderPainted()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks whether the border should be painted.

 @return true if the border is painted, false otherwise
 @see #setBorderPainted

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.setBorderPainted(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets whether the border should be painted.

 @param b if true, the border is painted.
 @see #isBorderPainted
 @beaninfo
 description: Is the border of the popup menu painted

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JPopupMenu.paintBorder(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paints the popup menu's border if the <code>borderPainted</code>
 property is <code>true</code>.
 @param g  the <code>Graphics</code> object
 
 @see JComponent#paint
 @see JComponent#setBorder

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.JPopupMenu.getMargin()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the margin, in pixels, between the popup menu's border and
 its containees.

 @return an <code>Insets</code> object containing the margin values.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JPopupMenu.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this <code>JPopupMenu</code>.
 This method 
 is intended to be used only for debugging purposes, and the 
 content and format of the returned string may vary between      
 implementations. The returned string may be empty but may not 
 be <code>null</code>.
 
 @return  a string representation of this <code>JPopupMenu</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JPopupMenu.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleContext associated with this JPopupMenu. 
 For JPopupMenus, the AccessibleContext takes the form of an 
 AccessibleJPopupMenu. 
 A new AccessibleJPopupMenu instance is created if necessary.

 @return an AccessibleJPopupMenu that serves as the 
         AccessibleContext of this JPopupMenu

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.processMouseEvent(MouseEvent event, javax.swing.MenuElement[] path, MenuSelectionManager manager)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method is required to conform to the
 <code>MenuElement</code> interface, but it not implemented.
 @see MenuElement#processMouseEvent(MouseEvent, MenuElement[], MenuSelectionManager)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.processKeyEvent(KeyEvent e, javax.swing.MenuElement[] path, MenuSelectionManager manager)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Processes a key event forwarded from the
 <code>MenuSelectionManager</code> and changes the menu selection,
 if necessary, by using <code>MenuSelectionManager</code>'s API.
 <p>
 Note: you do not have to forward the event to sub-components.
 This is done automatically by the <code>MenuSelectionManager</code>.

 @param e  a <code>KeyEvent</code>
 @param path the <code>MenuElement</code> path array
 @param manager   the <code>MenuSelectionManager</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPopupMenu.menuSelectionChanged(boolean isIncluded)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Messaged when the menubar selection changes to activate or
 deactivate this menu. This implements the
 <code>javax.swing.MenuElement</code> interface.
 Overrides <code>MenuElement.menuSelectionChanged</code>.

 @param isIncluded  true if this menu is active, false if
        it is not
 @see MenuElement#menuSelectionChanged(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.MenuElement[] javax.swing.JPopupMenu.getSubElements()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of <code>MenuElement</code>s containing the submenu
 for this menu component.  It will only return items conforming to
 the <code>JMenuElement</code> interface.
 If popup menu is <code>null</code> returns
 an empty array.  This method is required to conform to the
 <code>MenuElement</code> interface.  

 @return an array of <code>MenuElement</code> objects
 @see MenuElement#getSubElements

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JPopupMenu.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns this <code>JPopupMenu</code> component.
 @return this <code>JPopupMenu</code> object
 @see MenuElement#getComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JPopupMenu.isPopupTrigger(MouseEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the <code>MouseEvent</code> is considered a popup trigger
 by the <code>JPopupMenu</code>'s currently installed UI.

 @return true if the mouse event is a popup trigger
 @since 1.3

<!-- END DATA -->
