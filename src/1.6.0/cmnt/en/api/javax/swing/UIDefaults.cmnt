<!-- BEGIN KEY -->
public class javax.swing.UIDefaults extends java.util.Hashtable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A table of defaults for Swing components.  Applications can set/get
 default values via the <code>UIManager</code>.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @see UIManager
 @version 1.63 05/23/06
 @author Hans Muller

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.util.Map javax.swing.UIDefaults.resourceCache
<!-- END KEY -->
<!-- BEGIN DATA -->
 Maps from a Locale to a cached Map of the ResourceBundle. This is done
 so as to avoid an exception being thrown when a value is asked for.
 Access to this should be done while holding a lock on the
 UIDefaults, eg synchronized(this).

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.UIDefaults()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an empty defaults table.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.UIDefaults(int initialCapacity, float loadFactor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an empty defaults table with the specified initial capacity and
 load factor.

 @param initialCapacity   the initial capacity of the defaults table
 @param loadFactor        the load factor of the defaults table
 @see java.util.Hashtable
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.UIDefaults(java.lang.Object[] keyValueList)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a defaults table initialized with the specified
 key/value pairs.  For example:
 <pre>
        Object[] uiDefaults = {
             "Font", new Font("Dialog", Font.BOLD, 12),
            "Color", Color.red,
             "five", new Integer(5)
        }
        UIDefaults myDefaults = new UIDefaults(uiDefaults);
 </pre>
 @param keyValueList  an array of objects containing the key/value
		pairs

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.UIDefaults.get(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value for key.  If the value is a
 <code>UIDefaults.LazyValue</code> then the real
 value is computed with <code>LazyValue.createValue()</code>,
 the table entry is replaced, and the real value is returned.
 If the value is an <code>UIDefaults.ActiveValue</code>
 the table entry is not replaced - the value is computed
 with <code>ActiveValue.createValue()</code> for each
 <code>get()</code> call.

 If the key is not found in the table then it is searched for in the list
 of resource bundles maintained by this object.  The resource bundles are
 searched most recently added first using the locale returned by
 <code>getDefaultLocale</code>.  <code>LazyValues</code> and
 <code>ActiveValues</code> are not supported in the resource bundles.


 @param key the desired key
 @return the value for <code>key</code>
 @see LazyValue
 @see ActiveValue
 @see java.util.Hashtable#get
 @see #getDefaultLocale
 @see #addResourceBundle
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.UIDefaults.get(Object key, Locale l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value for key associated with the given locale.
 If the value is a <code>UIDefaults.LazyValue</code> then the real
 value is computed with <code>LazyValue.createValue()</code>,
 the table entry is replaced, and the real value is returned.
 If the value is an <code>UIDefaults.ActiveValue</code>
 the table entry is not replaced - the value is computed
 with <code>ActiveValue.createValue()</code> for each
 <code>get()</code> call.

 If the key is not found in the table then it is searched for in the list
 of resource bundles maintained by this object.  The resource bundles are
 searched most recently added first using the given locale.
 <code>LazyValues</code> and <code>ActiveValues</code> are not supported
 in the resource bundles.

 @param key the desired key
 @param l the desired <code>locale</code>
 @return the value for <code>key</code>
 @see LazyValue
 @see ActiveValue
 @see java.util.Hashtable#get
 @see #addResourceBundle
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.UIDefaults.put(Object key, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the value of <code>key</code> to <code>value</code> for all locales.
 If <code>key</code> is a string and the new value isn't
 equal to the old one, fire a <code>PropertyChangeEvent</code>.
 If value is <code>null</code>, the key is removed from the table.

 @param key    the unique <code>Object</code> who's value will be used
          to retrieve the data value associated with it
 @param value  the new <code>Object</code> to store as data under
		that key
 @return the previous <code>Object</code> value, or <code>null</code>
 @see #putDefaults
 @see java.util.Hashtable#put

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.UIDefaults.putDefaults(java.lang.Object[] keyValueList)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Puts all of the key/value pairs in the database and
 unconditionally generates one <code>PropertyChangeEvent</code>.
 The events oldValue and newValue will be <code>null</code> and its
 <code>propertyName</code> will be "UIDefaults".  The key/value pairs are
 added for all locales.

 @param keyValueList  an array of key/value pairs
 @see #put
 @see java.util.Hashtable#put

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font javax.swing.UIDefaults.getFont(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the value of <code>key</code> is a <code>Font</code> return it,
 otherwise return <code>null</code>.
 @param key the desired key
 @return if the value for <code>key</code> is a <code>Font</code>,
 		return the <code>Font</code> object; otherwise return
		<code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font javax.swing.UIDefaults.getFont(Object key, Locale l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the value of <code>key</code> for the given <code>Locale</code>
 is a <code>Font</code> return it, otherwise return <code>null</code>.
 @param key the desired key
 @param l the desired locale      
 @return if the value for <code>key</code> and <code>Locale</code>
          is a <code>Font</code>,
 		return the <code>Font</code> object; otherwise return
		<code>null</code>
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.UIDefaults.getColor(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the value of <code>key</code> is a <code>Color</code> return it,
 otherwise return <code>null</code>.
 @param key the desired key
 @return if the value for <code>key</code> is a <code>Color</code>,
		return the <code>Color</code> object; otherwise return
		<code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.UIDefaults.getColor(Object key, Locale l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the value of <code>key</code> for the given <code>Locale</code>
 is a <code>Color</code> return it, otherwise return <code>null</code>.
 @param key the desired key
 @param l the desired locale      
 @return if the value for <code>key</code> and <code>Locale</code>
          is a <code>Color</code>,
		return the <code>Color</code> object; otherwise return
		<code>null</code>
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.UIDefaults.getIcon(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the value of <code>key</code> is an <code>Icon</code> return it,
 otherwise return <code>null</code>.
 @param key the desired key
 @return if the value for <code>key</code> is an <code>Icon</code>,
		return the <code>Icon</code> object; otherwise return
		<code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.UIDefaults.getIcon(Object key, Locale l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the value of <code>key</code> for the given <code>Locale</code>
 is an <code>Icon</code> return it, otherwise return <code>null</code>.
 @param key the desired key
 @param l the desired locale      
 @return if the value for <code>key</code> and <code>Locale</code>
          is an <code>Icon</code>,
		return the <code>Icon</code> object; otherwise return
		<code>null</code>
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.Border javax.swing.UIDefaults.getBorder(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the value of <code>key</code> is a <code>Border</code> return it,
 otherwise return <code>null</code>.
 @param key the desired key
 @return if the value for <code>key</code> is a <code>Border</code>,
		return the <code>Border</code> object; otherwise return
		<code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.Border javax.swing.UIDefaults.getBorder(Object key, Locale l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the value of <code>key</code> for the given <code>Locale</code>
 is a <code>Border</code> return it, otherwise return <code>null</code>.
 @param key the desired key
 @param l the desired locale      
 @return if the value for <code>key</code> and <code>Locale</code>
          is a <code>Border</code>,
		return the <code>Border</code> object; otherwise return
		<code>null</code>
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.UIDefaults.getString(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the value of <code>key</code> is a <code>String</code> return it,
 otherwise return <code>null</code>.
 @param key the desired key
 @return if the value for <code>key</code> is a <code>String</code>,
		return the <code>String</code> object; otherwise return
		<code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.UIDefaults.getString(Object key, Locale l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the value of <code>key</code> for the given <code>Locale</code>
 is a <code>String</code> return it, otherwise return <code>null</code>.
 @param key the desired key
 @param l the desired <code>Locale</code>
 @return if the value for <code>key</code> for the given
          <code>Locale</code> is a <code>String</code>,
		return the <code>String</code> object; otherwise return
		<code>null</code>
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.UIDefaults.getInt(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the value of <code>key</code> is an <code>Integer</code> return its
 integer value, otherwise return 0.
 @param key the desired key
 @return if the value for <code>key</code> is an <code>Integer</code>,
		return its value, otherwise return 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.UIDefaults.getInt(Object key, Locale l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the value of <code>key</code> for the given <code>Locale</code>
 is an <code>Integer</code> return its integer value, otherwise return 0.
 @param key the desired key
 @param l the desired locale      
 @return if the value for <code>key</code> and <code>Locale</code>
          is an <code>Integer</code>,
		return its value, otherwise return 0
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.UIDefaults.getBoolean(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the value of <code>key</code> is boolean, return the
 boolean value, otherwise return false.

 @param key an <code>Object</code> specifying the key for the desired boolean value
 @return if the value of <code>key</code> is boolean, return the
         boolean value, otherwise return false.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.UIDefaults.getBoolean(Object key, Locale l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the value of <code>key</code> for the given <code>Locale</code>
 is boolean, return the boolean value, otherwise return false.

 @param key an <code>Object</code> specifying the key for the desired boolean value
 @param l the desired locale      
 @return if the value for <code>key</code> and <code>Locale</code>
         is boolean, return the
         boolean value, otherwise return false.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.UIDefaults.getInsets(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the value of <code>key</code> is an <code>Insets</code> return it,
 otherwise return <code>null</code>.
 @param key the desired key
 @return if the value for <code>key</code> is an <code>Insets</code>,
		return the <code>Insets</code> object; otherwise return
		<code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.UIDefaults.getInsets(Object key, Locale l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the value of <code>key</code> for the given <code>Locale</code>
 is an <code>Insets</code> return it, otherwise return <code>null</code>.
 @param key the desired key
 @param l the desired locale      
 @return if the value for <code>key</code> and <code>Locale</code>
          is an <code>Insets</code>,
		return the <code>Insets</code> object; otherwise return
		<code>null</code>
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.UIDefaults.getDimension(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the value of <code>key</code> is a <code>Dimension</code> return it,
 otherwise return <code>null</code>.
 @param key the desired key
 @return if the value for <code>key</code> is a <code>Dimension</code>,
		return the <code>Dimension</code> object; otherwise return
		<code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.UIDefaults.getDimension(Object key, Locale l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the value of <code>key</code> for the given <code>Locale</code>
 is a <code>Dimension</code> return it, otherwise return <code>null</code>.
 @param key the desired key
 @param l the desired locale      
 @return if the value for <code>key</code> and <code>Locale</code>
          is a <code>Dimension</code>,
		return the <code>Dimension</code> object; otherwise return
		<code>null</code>
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class<? extends javax.swing.plaf.ComponentUI> javax.swing.UIDefaults.getUIClass(String uiClassID, ClassLoader uiClassLoader)
<!-- END KEY -->
<!-- BEGIN DATA -->
 The value of <code>get(uidClassID)</code> must be the
 <code>String</code> name of a
 class that implements the corresponding <code>ComponentUI</code>
 class.  If the class hasn't been loaded before, this method looks 
 up the class with <code>uiClassLoader.loadClass()</code> if a non 
 <code>null</code>
 class loader is provided, <code>classForName()</code> otherwise.
 <p>
 If a mapping for <code>uiClassID</code> exists or if the specified
 class can't be found, return <code>null</code>.
 <p>
 This method is used by <code>getUI</code>, it's usually
 not necessary to call it directly.

 @param uiClassID  a string containing the class ID
 @param uiClassLoader the object which will load the class
 @return the value of <code>Class.forName(get(uidClassID))</code>
 @see #getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class<? extends javax.swing.plaf.ComponentUI> javax.swing.UIDefaults.getUIClass(String uiClassID)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the L&F class that renders this component.

 @param uiClassID a string containing the class ID
 @return the Class object returned by
		<code>getUIClass(uiClassID, null)</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.UIDefaults.getUIError(String msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If <code>getUI()</code> fails for any reason,
 it calls this method before returning <code>null</code>.
 Subclasses may choose to do more or less here.

 @param msg message string to print
 @see #getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.ComponentUI javax.swing.UIDefaults.getUI(JComponent target)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an <code>ComponentUI</code> implementation for the
 specified component.  In other words create the look
 and feel specific delegate object for <code>target</code>.
 This is done in two steps:
 <ul>
 <li> Look up the name of the <code>ComponentUI</code> implementation
 class under the value returned by <code>target.getUIClassID()</code>.
 <li> Use the implementation classes static <code>createUI()</code>
 method to construct a look and feel delegate.
 </ul>
 @param target  the <code>JComponent</code> which needs a UI
 @return the <code>ComponentUI</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.UIDefaults.addPropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a <code>PropertyChangeListener</code> to the listener list.
 The listener is registered for all properties.
 <p>
 A <code>PropertyChangeEvent</code> will get fired whenever a default
 is changed.

 @param listener  the <code>PropertyChangeListener</code> to be added
 @see java.beans.PropertyChangeSupport

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.UIDefaults.removePropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a <code>PropertyChangeListener</code> from the listener list.
 This removes a <code>PropertyChangeListener</code> that was registered
 for all properties.

 @param listener  the <code>PropertyChangeListener</code> to be removed
 @see java.beans.PropertyChangeSupport

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.beans.PropertyChangeListener[] javax.swing.UIDefaults.getPropertyChangeListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the <code>PropertyChangeListener</code>s added
 to this UIDefaults with addPropertyChangeListener().

 @return all of the <code>PropertyChangeListener</code>s added or an empty
         array if no listeners have been added
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.UIDefaults.firePropertyChange(String propertyName, Object oldValue, Object newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Support for reporting bound property changes.  If oldValue and
 newValue are not equal and the <code>PropertyChangeEvent</code>x
 listener list isn't empty, then fire a 
 <code>PropertyChange</code> event to each listener.

 @param propertyName  the programmatic name of the property
		that was changed
 @param oldValue  the old value of the property
 @param newValue  the new value of the property
 @see java.beans.PropertyChangeSupport

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.UIDefaults.addResourceBundle(String bundleName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a resource bundle to the list of resource bundles that are
 searched for localized values.  Resource bundles are searched in the
 reverse order they were added.  In other words, the most recently added
 bundle is searched first.

 @param bundleName  the base name of the resource bundle to be added
 @see java.util.ResourceBundle
 @see #removeResourceBundle
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.UIDefaults.removeResourceBundle(String bundleName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a resource bundle from the list of resource bundles that are
 searched for localized defaults.

 @param bundleName  the base name of the resource bundle to be removed
 @see java.util.ResourceBundle
 @see #addResourceBundle
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.UIDefaults.setDefaultLocale(Locale l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the default locale.  The default locale is used in retrieving
 localized values via <code>get</code> methods that do not take a
 locale argument.  As of release 1.4, Swing UI objects should retrieve
 localized values using the locale of their component rather than the
 default locale.  The default locale exists to provide compatibility with
 pre 1.4 behaviour.

 @param l the new default locale
 @see #getDefaultLocale
 @see #get(Object)
 @see #get(Object,Locale)
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Locale javax.swing.UIDefaults.getDefaultLocale()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the default locale.  The default locale is used in retrieving
 localized values via <code>get</code> methods that do not take a
 locale argument.  As of release 1.4, Swing UI objects should retrieve
 localized values using the locale of their component rather than the
 default locale.  The default locale exists to provide compatibility with
 pre 1.4 behaviour.

 @return the default locale
 @see #setDefaultLocale
 @see #get(Object)
 @see #get(Object,Locale)
 @since 1.4

<!-- END DATA -->
