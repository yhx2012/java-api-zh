<!-- BEGIN KEY -->
public class javax.swing.ActionMap extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>ActionMap</code> provides mappings from
 <code>Object</code>s
 (called <em>keys</em> or <em><code>Action</code> names</em>)
 to <code>Action</code>s.
 An <code>ActionMap</code> is usually used with an <code>InputMap</code>
 to locate a particular action
 when a key is pressed. As with <code>InputMap</code>,
 an <code>ActionMap</code> can have a parent 
 that is searched for keys not defined in the <code>ActionMap</code>.
 <p>As with <code>InputMap</code> if you create a cycle, eg:
 <pre>
   ActionMap am = new ActionMap();
   ActionMap bm = new ActionMap():
   am.setParent(bm);
   bm.setParent(am);
 </pre>
 some of the methods will cause a StackOverflowError to be thrown.

 @see InputMap

 @version 1.16 04/07/06
 @author Scott Violet
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.ActionMap javax.swing.ActionMap.parent
<!-- END KEY -->
<!-- BEGIN DATA -->
Parent that handles any bindings we don't contain. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ActionMap()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an <code>ActionMap</code> with no parent and no mappings.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ActionMap.setParent(ActionMap map)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets this <code>ActionMap</code>'s parent.
 
 @param map  the <code>ActionMap</code> that is the parent of this one

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ActionMap javax.swing.ActionMap.getParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns this <code>ActionMap</code>'s parent.
 
 @return the <code>ActionMap</code> that is the parent of this one,
 	       or null if this <code>ActionMap</code> has no parent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ActionMap.put(Object key, Action action)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a binding for <code>key</code> to <code>action</code>.
 If <code>action</code> is null, this removes the current binding
 for <code>key</code>.
 <p>In most instances, <code>key</code> will be
 <code>action.getValue(NAME)</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Action javax.swing.ActionMap.get(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the binding for <code>key</code>, messaging the 
 parent <code>ActionMap</code> if the binding is not locally defined.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ActionMap.remove(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the binding for <code>key</code> from this <code>ActionMap</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ActionMap.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all the mappings from this <code>ActionMap</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] javax.swing.ActionMap.keys()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>Action</code> names that are bound in this <code>ActionMap</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ActionMap.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of <code>KeyStroke</code> bindings.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] javax.swing.ActionMap.allKeys()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of the keys defined in this <code>ActionMap</code> and
 its parent. This method differs from <code>keys()</code> in that
 this method includes the keys defined in the parent.

<!-- END DATA -->
