<!-- BEGIN KEY -->
public class javax.swing.JComboBox extends javax.swing.JComponent implements java.awt.ItemSelectable, javax.swing.event.ListDataListener, java.awt.event.ActionListener, javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
 A component that combines a button or editable field and a drop-down list.
 The user can select a value from the drop-down list, which appears at the 
 user's request. If you make the combo box editable, then the combo box
 includes an editable field into which the user can type a value.
 <p>
 <strong>Warning:</strong> Swing is not thread safe. For more
 information see <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 <p>
 See <a href="http://java.sun.com/docs/books/tutorial/uiswing/components/combobox.html">How to Use Combo Boxes</a>
 in <a href="http://java.sun.com/Series/Tutorial/index.html"><em>The Java Tutorial</em></a>
 for further information.
 <p>
 @see ComboBoxModel
 @see DefaultComboBoxModel

 @beaninfo
   attribute: isContainer false
 description: A combination of a text field and a drop-down list.

 @version 1.142 08/08/06
 @author Arnaud Weber
 @author Mark Davidson

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.ComboBoxModel javax.swing.JComboBox.dataModel
<!-- END KEY -->
<!-- BEGIN DATA -->
 This protected field is implementation specific. Do not access directly
 or override. Use the accessor methods instead.

 @see #getModel
 @see #setModel

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.ListCellRenderer javax.swing.JComboBox.renderer
<!-- END KEY -->
<!-- BEGIN DATA -->
 This protected field is implementation specific. Do not access directly
 or override. Use the accessor methods instead.

 @see #getRenderer
 @see #setRenderer

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.ComboBoxEditor javax.swing.JComboBox.editor
<!-- END KEY -->
<!-- BEGIN DATA -->
 This protected field is implementation specific. Do not access directly
 or override. Use the accessor methods instead.

 @see #getEditor
 @see #setEditor

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.JComboBox.maximumRowCount
<!-- END KEY -->
<!-- BEGIN DATA -->
 This protected field is implementation specific. Do not access directly
 or override. Use the accessor methods instead.

 @see #getMaximumRowCount
 @see #setMaximumRowCount

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JComboBox.isEditable
<!-- END KEY -->
<!-- BEGIN DATA -->
 This protected field is implementation specific. Do not access directly
 or override. Use the accessor methods instead.

 @see #isEditable
 @see #setEditable

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JComboBox.KeySelectionManager javax.swing.JComboBox.keySelectionManager
<!-- END KEY -->
<!-- BEGIN DATA -->
 This protected field is implementation specific. Do not access directly
 or override. Use the accessor methods instead.

 @see #setKeySelectionManager
 @see #getKeySelectionManager

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JComboBox.actionCommand
<!-- END KEY -->
<!-- BEGIN DATA -->
 This protected field is implementation specific. Do not access directly
 or override. Use the accessor methods instead.

 @see #setActionCommand
 @see #getActionCommand

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JComboBox.lightWeightPopupEnabled
<!-- END KEY -->
<!-- BEGIN DATA -->
 This protected field is implementation specific. Do not access directly
 or override. Use the accessor methods instead.

 @see #setLightWeightPopupEnabled
 @see #isLightWeightPopupEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object javax.swing.JComboBox.selectedItemReminder
<!-- END KEY -->
<!-- BEGIN DATA -->
 This protected field is implementation specific. Do not access directly
 or override.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JComboBox(ComboBoxModel aModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>JComboBox</code> that takes its items from an
 existing <code>ComboBoxModel</code>.  Since the
 <code>ComboBoxModel</code> is provided, a combo box created using
 this constructor does not create a default combo box model and
 may impact how the insert, remove and add methods behave.

 @param aModel the <code>ComboBoxModel</code> that provides the 
 		displayed list of items
 @see DefaultComboBoxModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JComboBox(java.lang.Object[] items)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates a <code>JComboBox</code> that contains the elements
 in the specified array.  By default the first item in the array
 (and therefore the data model) becomes selected.

 @param items  an array of objects to insert into the combo box
 @see DefaultComboBoxModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JComboBox(java.util.Vector<?> items)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>JComboBox</code> that contains the elements
 in the specified Vector.  By default the first item in the vector
 (and therefore the data model) becomes selected.

 @param items  an array of vectors to insert into the combo box
 @see DefaultComboBoxModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JComboBox()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>JComboBox</code> with a default data model.
 The default data model is an empty list of objects.
 Use <code>addItem</code> to add items.  By default the first item
 in the data model becomes selected.

 @see DefaultComboBoxModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setUI(ComboBoxUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the L&F object that renders this component.

 @param ui  the <code>ComboBoxUI</code> L&F object
 @see UIDefaults#getUI

 @beaninfo
        bound: true
       hidden: true
    attribute: visualUpdate true
  description: The UI object that implements the Component's LookAndFeel. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets the UI property to a value from the current look and feel.

 @see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JComboBox.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of the L&F class that renders this component.

 @return the string "ComboBoxUI"
 @see JComponent#getUIClassID
 @see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.ComboBoxUI javax.swing.JComboBox.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the L&F object that renders this component.

 @return the ComboBoxUI object that renders this component

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setModel(ComboBoxModel aModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the data model that the <code>JComboBox</code> uses to obtain
 the list of items.

 @param aModel the <code>ComboBoxModel</code> that provides the
	displayed list of items
 
 @beaninfo
        bound: true
  description: Model that the combo box uses to get data to display.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ComboBoxModel javax.swing.JComboBox.getModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the data model currently used by the <code>JComboBox</code>.

 @return the <code>ComboBoxModel</code> that provides the displayed
 			list of items

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setLightWeightPopupEnabled(boolean aFlag)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>lightWeightPopupEnabled</code> property, which
 provides a hint as to whether or not a lightweight
 <code>Component</code> should be used to contain the
 <code>JComboBox</code>, versus a heavyweight 
 <code>Component</code> such as a <code>Panel</code>
 or a <code>Window</code>.  The decision of lightweight
 versus heavyweight is ultimately up to the 
 <code>JComboBox</code>.  Lightweight windows are more
 efficient than heavyweight windows, but lightweight
 and heavyweight components do not mix well in a GUI.
 If your application mixes lightweight and heavyweight 
 components, you should disable lightweight popups.
 The default value for the <code>lightWeightPopupEnabled</code>
 property is <code>true</code>, unless otherwise specified
 by the look and feel.  Some look and feels always use
 heavyweight popups, no matter what the value of this property.
 <p>
 See the article <a href="http://java.sun.com/products/jfc/tsc/articles/mixing/index.html">Mixing Heavy and Light Components</a> 
 on <a href="http://java.sun.com/products/jfc/tsc">
 <em>The Swing Connection</em></a>
 This method fires a property changed event.

 @param aFlag if <code>true</code>, lightweight popups are desired

 @beaninfo
        bound: true
       expert: true
  description: Set to <code>false</code> to require heavyweight popups.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JComboBox.isLightWeightPopupEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the value of the <code>lightWeightPopupEnabled</code>
 property.

 @return the value of the <code>lightWeightPopupEnabled</code>
    property
 @see #setLightWeightPopupEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setEditable(boolean aFlag)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines whether the <code>JComboBox</code> field is editable.
 An editable <code>JComboBox</code> allows the user to type into the
 field or selected an item from the list to initialize the field,
 after which it can be edited. (The editing affects only the field,
 the list item remains intact.) A non editable <code>JComboBox</code> 
 displays the selected item in the field,
 but the selection cannot be modified.

 @param aFlag a boolean value, where true indicates that the
			field is editable
 
 @beaninfo
        bound: true
    preferred: true
  description: If true, the user can type a new value in the combo box.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JComboBox.isEditable()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the <code>JComboBox</code> is editable.
 By default, a combo box is not editable.
 
 @return true if the <code>JComboBox</code> is editable, else false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setMaximumRowCount(int count)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the maximum number of rows the <code>JComboBox</code> displays.
 If the number of objects in the model is greater than count,
 the combo box uses a scrollbar.

 @param count an integer specifying the maximum number of items to
              display in the list before using a scrollbar
 @beaninfo
        bound: true
    preferred: true
  description: The maximum number of rows the popup should have

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JComboBox.getMaximumRowCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the maximum number of items the combo box can display 
 without a scrollbar

 @return an integer specifying the maximum number of items that are 
         displayed in the list before using a scrollbar

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setRenderer(ListCellRenderer aRenderer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the renderer that paints the list items and the item selected from the list in
 the JComboBox field. The renderer is used if the JComboBox is not
 editable. If it is editable, the editor is used to render and edit
 the selected item.
 <p>
 The default renderer displays a string or an icon.
 Other renderers can handle graphic images and composite items.
 <p>
 To display the selected item,
 <code>aRenderer.getListCellRendererComponent</code>
 is called, passing the list object and an index of -1.
  
 @param aRenderer  the <code>ListCellRenderer</code> that
			displays the selected item
 @see #setEditor
 @beaninfo
      bound: true
     expert: true
  description: The renderer that paints the item selected in the list.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ListCellRenderer javax.swing.JComboBox.getRenderer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the renderer used to display the selected item in the 
 <code>JComboBox</code> field.
  
 @return  the <code>ListCellRenderer</code> that displays
			the selected item.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setEditor(ComboBoxEditor anEditor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the editor used to paint and edit the selected item in the 
 <code>JComboBox</code> field.  The editor is used only if the
 receiving <code>JComboBox</code> is editable. If not editable,
 the combo box uses the renderer to paint the selected item.
  
 @param anEditor  the <code>ComboBoxEditor</code> that
			displays the selected item
 @see #setRenderer
 @beaninfo
     bound: true
    expert: true
  description: The editor that combo box uses to edit the current value

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ComboBoxEditor javax.swing.JComboBox.getEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the editor used to paint and edit the selected item in the 
 <code>JComboBox</code> field.
  
 @return the <code>ComboBoxEditor</code> that displays the selected item

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setSelectedItem(Object anObject)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Sets the selected item in the combo box display area to the object in 
 the argument.
 If <code>anObject</code> is in the list, the display area shows 
 <code>anObject</code> selected.
 <p>
 If <code>anObject</code> is <i>not</i> in the list and the combo box is
 uneditable, it will not change the current selection. For editable 
 combo boxes, the selection will change to <code>anObject</code>.
 <p>
 If this constitutes a change in the selected item, 
 <code>ItemListener</code>s added to the combo box will be notified with
 one or two <code>ItemEvent</code>s.
 If there is a current selected item, an <code>ItemEvent</code> will be
 fired and the state change will be <code>ItemEvent.DESELECTED</code>. 
 If <code>anObject</code> is in the list and is not currently selected
 then an <code>ItemEvent</code> will be fired and the state change will 
 be <code>ItemEvent.SELECTED</code>.
 <p>
 <code>ActionListener</code>s added to the combo box will be notified
 with an <code>ActionEvent</code> when this method is called.

 @param anObject  the list object to select; use <code>null</code> to
                        clear the selection
 @beaninfo
    preferred:   true
    description: Sets the selected item in the JComboBox.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.JComboBox.getSelectedItem()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current selected item.
 <p>
 If the combo box is editable, then this value may not have been added
 to the combo box with <code>addItem</code>, <code>insertItemAt</code> 
 or the data constructors.
 
 @return the current selected Object
 @see #setSelectedItem

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setSelectedIndex(int anIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Selects the item at index <code>anIndex</code>.

 @param anIndex an integer specifying the list item to select,
			where 0 specifies the first item in the list and -1 indicates no selection
 @exception IllegalArgumentException if <code>anIndex</code> < -1 or
			<code>anIndex</code> is greater than or equal to size
 @beaninfo
   preferred: true
  description: The item at index is selected.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JComboBox.getSelectedIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the first item in the list that matches the given item.
 The result is not always defined if the <code>JComboBox</code>
 allows selected items that are not in the list. 
 Returns -1 if there is no selected item or if the user specified
 an item which is not in the list.

 @return an integer specifying the currently selected list item,
			where 0 specifies
                	the first item in the list;
			or -1 if no item is selected or if
                	the currently selected item is not in the list

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.JComboBox.getPrototypeDisplayValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the "prototypical display" value - an Object used
 for the calculation of the display height and width.

 @return the value of the <code>prototypeDisplayValue</code> property
 @see #setPrototypeDisplayValue
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setPrototypeDisplayValue(Object prototypeDisplayValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the prototype display value used to calculate the size of the display 
 for the UI portion. 
 <p>
 If a prototype display value is specified, the preferred size of
 the combo box is calculated by configuring the renderer with the
 prototype display value and obtaining its preferred size. Specifying
 the preferred display value is often useful when the combo box will be
 displaying large amounts of data. If no prototype display value has
 been specified, the renderer must be configured for each value from
 the model and its preferred size obtained, which can be
 relatively expensive.
 
 @param prototypeDisplayValue 
 @see #getPrototypeDisplayValue
 @since 1.4
 @beaninfo
       bound: true
   attribute: visualUpdate true
 description: The display prototype value, used to compute display width and height.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.addItem(Object anObject)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Adds an item to the item list.
 This method works only if the <code>JComboBox</code> uses a
 mutable data model.
 <p>
 <strong>Warning:</strong>
 Focus and keyboard navigation problems may arise if you add duplicate 
 String objects. A workaround is to add new objects instead of String 
 objects and make sure that the toString() method is defined. 
 For example:
 <pre>
   comboBox.addItem(makeObj("Item 1"));
   comboBox.addItem(makeObj("Item 1"));
   ...
   private Object makeObj(final String item)  {
     return new Object() { public String toString() { return item; } };
   }
 </pre>

 @param anObject the Object to add to the list
 @see MutableComboBoxModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.insertItemAt(Object anObject, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Inserts an item into the item list at a given index. 
 This method works only if the <code>JComboBox</code> uses a
 mutable data model.

 @param anObject the <code>Object</code> to add to the list
 @param index    an integer specifying the position at which
			to add the item
 @see MutableComboBoxModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.removeItem(Object anObject)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Removes an item from the item list.
 This method works only if the <code>JComboBox</code> uses a
 mutable data model.

 @param anObject  the object to remove from the item list
 @see MutableComboBoxModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.removeItemAt(int anIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Removes the item at <code>anIndex</code>
 This method works only if the <code>JComboBox</code> uses a
 mutable data model.

 @param anIndex  an int specifying the index of the item to remove,
			where 0
                 	indicates the first item in the list
 @see MutableComboBoxModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.removeAllItems()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Removes all items from the item list.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.showPopup()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Causes the combo box to display its popup window.
 @see #setPopupVisible

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.hidePopup()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Causes the combo box to close its popup window.
 @see #setPopupVisible

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setPopupVisible(boolean v)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the visibility of the popup.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JComboBox.isPopupVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Determines the visibility of the popup.

 @return true if the popup is visible, otherwise returns false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.addItemListener(ItemListener aListener)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Adds an <code>ItemListener</code>.
 <p>
 <code>aListener</code> will receive one or two <code>ItemEvent</code>s when
 the selected item changes.

 @param aListener the <code>ItemListener</code> that is to be notified
 @see #setSelectedItem

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.removeItemListener(ItemListener aListener)
<!-- END KEY -->
<!-- BEGIN DATA -->
Removes an <code>ItemListener</code>.

 @param aListener  the <code>ItemListener</code> to remove

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ItemListener[] javax.swing.JComboBox.getItemListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the <code>ItemListener</code>s added
 to this JComboBox with addItemListener().

 @return all of the <code>ItemListener</code>s added or an empty
         array if no listeners have been added
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.addActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Adds an <code>ActionListener</code>. 
 <p>
 The <code>ActionListener</code> will receive an <code>ActionEvent</code>
 when a selection has been made. If the combo box is editable, then
 an <code>ActionEvent</code> will be fired when editing has stopped.

 @param l  the <code>ActionListener</code> that is to be notified
 @see #setSelectedItem

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.removeActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
Removes an <code>ActionListener</code>.

 @param l  the <code>ActionListener</code> to remove

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ActionListener[] javax.swing.JComboBox.getActionListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the <code>ActionListener</code>s added
 to this JComboBox with addActionListener().

 @return all of the <code>ActionListener</code>s added or an empty
         array if no listeners have been added
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.addPopupMenuListener(PopupMenuListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a <code>PopupMenu</code> listener which will listen to notification
 messages from the popup portion of the combo box. 
 <p>
 For all standard look and feels shipped with Java, the popup list  
 portion of combo box is implemented as a <code>JPopupMenu</code>.
 A custom look and feel may not implement it this way and will 
 therefore not receive the notification.

 @param l  the <code>PopupMenuListener</code> to add
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.removePopupMenuListener(PopupMenuListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a <code>PopupMenuListener</code>.

 @param l  the <code>PopupMenuListener</code> to remove
 @see #addPopupMenuListener
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.PopupMenuListener[] javax.swing.JComboBox.getPopupMenuListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the <code>PopupMenuListener</code>s added
 to this JComboBox with addPopupMenuListener().

 @return all of the <code>PopupMenuListener</code>s added or an empty
         array if no listeners have been added
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.firePopupMenuWillBecomeVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies <code>PopupMenuListener</code>s that the popup portion of the
 combo box will become visible.
 <p>
 This method is public but should not be called by anything other than 
 the UI delegate.
 @see #addPopupMenuListener
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.firePopupMenuWillBecomeInvisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies <code>PopupMenuListener</code>s that the popup portion of the
 combo box has become invisible.
 <p>
 This method is public but should not be called by anything other than 
 the UI delegate.
 @see #addPopupMenuListener
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.firePopupMenuCanceled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies <code>PopupMenuListener</code>s that the popup portion of the 
 combo box has been canceled.
 <p>
 This method is public but should not be called by anything other than 
 the UI delegate.
 @see #addPopupMenuListener
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setActionCommand(String aCommand)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Sets the action command that should be included in the event
 sent to action listeners.

 @param aCommand  a string containing the "command" that is sent
                  to action listeners; the same listener can then
                  do different things depending on the command it
                  receives

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JComboBox.getActionCommand()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the action command that is included in the event sent to
 action listeners.

 @return  the string containing the "command" that is sent
          to action listeners.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setAction(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>Action</code> for the <code>ActionEvent</code> source.
 The new <code>Action</code> replaces any previously set
 <code>Action</code> but does not affect <code>ActionListeners</code>
 independently added with <code>addActionListener</code>. 
 If the <code>Action</code> is already a registered
 <code>ActionListener</code> for the <code>ActionEvent</code> source,
 it is not re-registered.
 <p>
 Setting the <code>Action</code> results in immediately changing
 all the properties described in <a href="Action.html#buttonActions">
 Swing Components Supporting <code>Action</code></a>.
 Subsequently, the combobox's properties are automatically updated
 as the <code>Action</code>'s properties change.
 <p>
 This method uses three other methods to set
 and help track the <code>Action</code>'s property values.
 It uses the <code>configurePropertiesFromAction</code> method
 to immediately change the combobox's properties.
 To track changes in the <code>Action</code>'s property values,
 this method registers the <code>PropertyChangeListener</code>
 returned by <code>createActionPropertyChangeListener</code>. The
 default {@code PropertyChangeListener} invokes the
 {@code actionPropertyChanged} method when a property in the
 {@code Action} changes. 

 @param a the <code>Action</code> for the <code>JComboBox</code>,
			or <code>null</code>.
 @since 1.3
 @see Action
 @see #getAction
 @see #configurePropertiesFromAction
 @see #createActionPropertyChangeListener
 @see #actionPropertyChanged 
 @beaninfo
        bound: true
    attribute: visualUpdate true
  description: the Action instance connected with this ActionEvent source

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Action javax.swing.JComboBox.getAction()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the currently set <code>Action</code> for this
 <code>ActionEvent</code> source, or <code>null</code> if no
 <code>Action</code> is set.

 @return the <code>Action</code> for this <code>ActionEvent</code>
		source; or <code>null</code>
 @since 1.3
 @see Action
 @see #setAction

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JComboBox.configurePropertiesFromAction(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the properties on this combobox to match those in the specified 
 <code>Action</code>.  Refer to <a href="Action.html#buttonActions">
 Swing Components Supporting <code>Action</code></a> for more
 details as to which properties this sets.

 @param a the <code>Action</code> from which to get the properties,
          or <code>null</code>
 @since 1.3
 @see Action
 @see #setAction

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeListener javax.swing.JComboBox.createActionPropertyChangeListener(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates and returns a <code>PropertyChangeListener</code> that is
 responsible for listening for changes from the specified
 <code>Action</code> and updating the appropriate properties.
 <p>
 <b>Warning:</b> If you subclass this do not create an anonymous
 inner class.  If you do the lifetime of the combobox will be tied to
 that of the <code>Action</code>.

 @param a the combobox's action
 @since 1.3
 @see Action
 @see #setAction

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JComboBox.actionPropertyChanged(Action action, String propertyName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Updates the combobox's state in response to property changes in
 associated action. This method is invoked from the
 {@code PropertyChangeListener} returned from
 {@code createActionPropertyChangeListener}. Subclasses do not normally
 need to invoke this. Subclasses that support additional {@code Action}
 properties should override this and
 {@code configurePropertiesFromAction}.
 <p>
 Refer to the table at <a href="Action.html#buttonActions">
 Swing Components Supporting <code>Action</code></a> for a list of
 the properties this method sets.

 @param action the <code>Action</code> associated with this combobox
 @param propertyName the name of the property that changed
 @since 1.6
 @see Action
 @see #configurePropertiesFromAction

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JComboBox.fireItemStateChanged(ItemEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.
 @param e  the event of interest
  
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JComboBox.fireActionEvent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.
  
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JComboBox.selectedItemChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This protected method is implementation specific. Do not access directly
 or override. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] javax.swing.JComboBox.getSelectedObjects()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns an array containing the selected item.
 This method is implemented for compatibility with
 <code>ItemSelectable</code>.

 @return an array of <code>Objects</code> containing one
		element -- the selected item

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.actionPerformed(ActionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->

 This method is public as an implementation side effect. 
 do not call or override. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.contentsChanged(ListDataEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method is public as an implementation side effect. 
 do not call or override. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.intervalAdded(ListDataEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method is public as an implementation side effect. 
 do not call or override. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.intervalRemoved(ListDataEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method is public as an implementation side effect. 
 do not call or override. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JComboBox.selectWithKeyChar(char keyChar)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Selects the list item that corresponds to the specified keyboard
 character and returns true, if there is an item corresponding
 to that character.  Otherwise, returns false.

 @param keyChar a char, typically this is a keyboard key
			typed by the user

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Enables the combo box so that items can be selected. When the
 combo box is disabled, items cannot be selected and values
 cannot be typed into its field (if it is editable).

 @param b a boolean value, where true enables the component and
          false disables it
 @beaninfo
        bound: true
    preferred: true
  description: Whether the combo box is enabled.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.configureEditor(ComboBoxEditor anEditor, Object anItem)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Initializes the editor with the specified item.
                                 
 @param anEditor the <code>ComboBoxEditor</code> that displays
			the list item in the
                 	combo box field and allows it to be edited
 @param anItem   the object to display and edit in the field

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.processKeyEvent(KeyEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Handles <code>KeyEvent</code>s, looking for the Tab key.
 If the Tab key is found, the popup window is closed.

 @param e  the <code>KeyEvent</code> containing the keyboard
		key that was pressed  

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JComboBox.setKeySelectionManager(JComboBox.KeySelectionManager aManager)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the object that translates a keyboard character into a list
 selection. Typically, the first selection with a matching first
 character becomes the selected item.

 @beaninfo
       expert: true
  description: The objects that changes the selection when a key is pressed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JComboBox.KeySelectionManager javax.swing.JComboBox.getKeySelectionManager()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the list's key-selection manager.

 @return the <code>KeySelectionManager</code> currently in use

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JComboBox.getItemCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of items in the list.

 @return an integer equal to the number of items in the list

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.JComboBox.getItemAt(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the list item at the specified index.  If <code>index</code>
 is out of range (less than zero or greater than or equal to size)
 it will return <code>null</code>.

 @param index  an integer indicating the list position, where the first
               item starts at zero
 @return the <code>Object</code> at that list position; or
			<code>null</code> if out of range

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JComboBox.KeySelectionManager javax.swing.JComboBox.createDefaultKeySelectionManager()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an instance of the default key-selection manager.

 @return the <code>KeySelectionManager</code> currently used by the list
 @see #setKeySelectionManager

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JComboBox.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this <code>JComboBox</code>.
 This method is intended to be used only for debugging purposes,
 and the content and format of the returned string may vary between   
 implementations. The returned string may be empty but may not 
 be <code>null</code>.
 
 @return  a string representation of this <code>JComboBox</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JComboBox.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleContext associated with this JComboBox. 
 For combo boxes, the AccessibleContext takes the form of an 
 AccessibleJComboBox. 
 A new AccessibleJComboBox instance is created if necessary.

 @return an AccessibleJComboBox that serves as the 
         AccessibleContext of this JComboBox

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JComboBox.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 See <code>readObject</code> and <code>writeObject</code> in
 <code>JComponent</code> for more 
 information about serialization in Swing.

<!-- END DATA -->
