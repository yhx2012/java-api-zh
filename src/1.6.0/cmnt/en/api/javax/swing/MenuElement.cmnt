<!-- BEGIN KEY -->
public interface javax.swing.MenuElement
<!-- END KEY -->
<!-- BEGIN DATA -->
 Any component that can be placed into a menu should implement this interface.
 This interface is used by <code>MenuSelectionManager</code>
 to handle selection and navigation in menu hierarchies.

 @version 1.13 11/17/05
 @author Arnaud Weber

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.MenuElement.processMouseEvent(MouseEvent event, javax.swing.MenuElement[] path, MenuSelectionManager manager)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Processes a mouse event. <code>event</code> is a <code>MouseEvent</code>
 with source being the receiving element's component.
 <code>path</code> is the path of the receiving element in the menu
 hierarchy including the receiving element itself.
 <code>manager</code> is the <code>MenuSelectionManager</code>
 for the menu hierarchy.
 This method should process the <code>MouseEvent</code> and change
 the menu selection if necessary
 by using <code>MenuSelectionManager</code>'s API
 Note: you do not have to forward the event to sub-components.
 This is done automatically by the <code>MenuSelectionManager</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.MenuElement.processKeyEvent(KeyEvent event, javax.swing.MenuElement[] path, MenuSelectionManager manager)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Process a key event. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.MenuElement.menuSelectionChanged(boolean isIncluded)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Call by the <code>MenuSelectionManager</code> when the
 <code>MenuElement</code> is added or remove from 
 the menu selection.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.MenuElement[] javax.swing.MenuElement.getSubElements()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method should return an array containing the sub-elements for the receiving menu element

 @return an array of MenuElements

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.MenuElement.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method should return the java.awt.Component used to paint the receiving element.
 The returned component will be used to convert events and detect if an event is inside
 a MenuElement's component.

 @return the Component value

<!-- END DATA -->
