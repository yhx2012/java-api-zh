<!-- BEGIN KEY -->
public class javax.swing.ProgressMonitor extends java.lang.Object implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
A class to monitor the progress of some operation. If it looks
 like the operation will take a while, a progress dialog will be popped up.
 When the ProgressMonitor is created it is given a numeric range and a
 descriptive string. As the operation progresses, call the setProgress method
 to indicate how far along the [min,max] range the operation is.
 Initially, there is no ProgressDialog. After the first millisToDecideToPopup
 milliseconds (default 500) the progress monitor will predict how long
 the operation will take.  If it is longer than millisToPopup (default 2000,
 2 seconds) a ProgressDialog will be popped up.
 <p>
 From time to time, when the Dialog box is visible, the progress bar will
 be updated when setProgress is called.  setProgress won't always update
 the progress bar, it will only be done if the amount of progress is
 visibly significant.

 <p>
 
 For further documentation and examples see
 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/components/progress.html">How to Monitor Progress</a>,
 a section in <em>The Java Tutorial.</em>

 @see ProgressMonitorInputStream
 @author James Gosling
 @author Lynn Monsanto (accessibility) 
 @version 1.37 04/12/06

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.accessibility.AccessibleContext javax.swing.ProgressMonitor.accessibleContext
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>AccessibleContext</code> for the <code>ProgressMonitor</code> 
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ProgressMonitor(Component parentComponent, Object message, String note, int min, int max)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a graphic object that shows progress, typically by filling
 in a rectangular bar as the process nears completion.

 @param parentComponent the parent component for the dialog box
 @param message a descriptive message that will be shown
        to the user to indicate what operation is being monitored.
        This does not change as the operation progresses.
        See the message parameters to methods in
        {@link JOptionPane#message}
        for the range of values.
 @param note a short note describing the state of the
        operation.  As the operation progresses, you can call
        setNote to change the note displayed.  This is used,
        for example, in operations that iterate through a
        list of files to show the name of the file being processes.
        If note is initially null, there will be no note line
        in the dialog box and setNote will be ineffective
 @param min the lower bound of the range
 @param max the upper bound of the range
 @see JDialog
 @see JOptionPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ProgressMonitor.setProgress(int nv)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Indicate the progress of the operation being monitored.
 If the specified value is >= the maximum, the progress
 monitor is closed. 
 @param nv an int specifying the current value, between the
        maximum and minimum specified for this component
 @see #setMinimum
 @see #setMaximum
 @see #close

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ProgressMonitor.close()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Indicate that the operation is complete.  This happens automatically
 when the value set by setProgress is >= max, but it may be called
 earlier if the operation ends early.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ProgressMonitor.getMinimum()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the minimum value -- the lower end of the progress value.

 @return an int representing the minimum value
 @see #setMinimum

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ProgressMonitor.setMinimum(int m)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Specifies the minimum value.

 @param m  an int specifying the minimum value
 @see #getMinimum

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ProgressMonitor.getMaximum()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the maximum value -- the higher end of the progress value.

 @return an int representing the maximum value
 @see #setMaximum

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ProgressMonitor.setMaximum(int m)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Specifies the maximum value.

 @param m  an int specifying the maximum value
 @see #getMaximum

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.ProgressMonitor.isCanceled()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns true if the user hits the Cancel button in the progress dialog.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ProgressMonitor.setMillisToDecideToPopup(int millisToDecideToPopup)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Specifies the amount of time to wait before deciding whether or
 not to popup a progress monitor.

 @param millisToDecideToPopup  an int specifying the time to wait,
        in milliseconds
 @see #getMillisToDecideToPopup

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ProgressMonitor.getMillisToDecideToPopup()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the amount of time this object waits before deciding whether
 or not to popup a progress monitor.

 @see #setMillisToDecideToPopup

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ProgressMonitor.setMillisToPopup(int millisToPopup)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Specifies the amount of time it will take for the popup to appear.
 (If the predicted time remaining is less than this time, the popup
 won't be displayed.)

 @param millisToPopup  an int specifying the time in milliseconds
 @see #getMillisToPopup

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ProgressMonitor.getMillisToPopup()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the amount of time it will take for the popup to appear.

 @see #setMillisToPopup

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ProgressMonitor.setNote(String note)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Specifies the additional note that is displayed along with the
 progress message. Used, for example, to show which file the
 is currently being copied during a multiple-file copy.

 @param note  a String specifying the note to display
 @see #getNote

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.ProgressMonitor.getNote()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Specifies the additional note that is displayed along with the
 progress message.

 @return a String specifying the note to display
 @see #setNote

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.ProgressMonitor.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>AccessibleContext</code> for the 
 <code>ProgressMonitor</code> 

 @return the <code>AccessibleContext</code> for the
 <code>ProgressMonitor</code>
 @since 1.5

<!-- END DATA -->
