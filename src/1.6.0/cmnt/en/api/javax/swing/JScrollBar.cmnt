<!-- BEGIN KEY -->
public class javax.swing.JScrollBar extends javax.swing.JComponent implements java.awt.Adjustable, javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
 An implementation of a scrollbar. The user positions the knob in the
 scrollbar to determine the contents of the viewing area. The
 program typically adjusts the display so that the end of the
 scrollbar represents the end of the displayable contents, or 100%
 of the contents. The start of the scrollbar is the beginning of the 
 displayable contents, or 0%. The position of the knob within
 those bounds then translates to the corresponding percentage of
 the displayable contents.
 <p>
 Typically, as the position of the knob in the scrollbar changes
 a corresponding change is made to the position of the JViewport on
 the underlying view, changing the contents of the JViewport.
 <p>
 <strong>Warning:</strong> Swing is not thread safe. For more
 information see <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @see JScrollPane
 @beaninfo
      attribute: isContainer false
    description: A component that helps determine the visible content range of an area.

 @version 1.81 08/08/06
 @author David Kloba

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.BoundedRangeModel javax.swing.JScrollBar.model
<!-- END KEY -->
<!-- BEGIN DATA -->
 The model that represents the scrollbar's minimum, maximum, extent
 (aka "visibleAmount") and current value.
 @see #setModel

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.JScrollBar.orientation
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see #setOrientation

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.JScrollBar.unitIncrement
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see #setUnitIncrement

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.JScrollBar.blockIncrement
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see #setBlockIncrement

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.event.ChangeListener javax.swing.JScrollBar.fwdAdjustmentEvents
<!-- END KEY -->
<!-- BEGIN DATA -->
 All changes from the model are treated as though the user moved
 the scrollbar knob.  

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JScrollBar(int orientation, int value, int extent, int min, int max)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a scrollbar with the specified orientation,
 value, extent, minimum, and maximum.
 The "extent" is the size of the viewable area. It is also known
 as the "visible amount". 
 <p>
 Note: Use <code>setBlockIncrement</code> to set the block 
 increment to a size slightly smaller than the view's extent.
 That way, when the user jumps the knob to an adjacent position,
 one or two lines of the original contents remain in view.
 
 @exception IllegalArgumentException if orientation is not one of VERTICAL, HORIZONTAL
 
 @see #setOrientation
 @see #setValue
 @see #setVisibleAmount
 @see #setMinimum
 @see #setMaximum

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JScrollBar(int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a scrollbar with the specified orientation
 and the following initial values:
 <pre>
 minimum = 0 
 maximum = 100 
 value = 0
 extent = 10
 </pre>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JScrollBar()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a vertical scrollbar with the following initial values:
 <pre>
 minimum = 0 
 maximum = 100 
 value = 0
 extent = 10
 </pre>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JScrollBar.setUI(ScrollBarUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the L&F object that renders this component.

 @param ui  the <code>ScrollBarUI</code> L&F object
 @see UIDefaults#getUI
 @since 1.4
 @beaninfo
        bound: true
       hidden: true
    attribute: visualUpdate true
  description: The UI object that implements the Component's LookAndFeel

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.ScrollBarUI javax.swing.JScrollBar.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the delegate that implements the look and feel for 
 this component.

 @see JComponent#setUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JScrollBar.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>JComponent.updateUI</code>.
 @see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JScrollBar.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of the LookAndFeel class for this component.

 @return "ScrollBarUI"
 @see JComponent#getUIClassID
 @see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JScrollBar.getOrientation()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the component's orientation (horizontal or vertical). 
                     
 @return VERTICAL or HORIZONTAL
 @see #setOrientation
 @see java.awt.Adjustable#getOrientation

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JScrollBar.setOrientation(int orientation)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the scrollbar's orientation to either VERTICAL or
 HORIZONTAL.
 
 @exception IllegalArgumentException if orientation is not one of VERTICAL, HORIZONTAL
 @see #getOrientation
 @beaninfo
    preferred: true
        bound: true
    attribute: visualUpdate true
  description: The scrollbar's orientation.
         enum: VERTICAL JScrollBar.VERTICAL 
               HORIZONTAL JScrollBar.HORIZONTAL

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.BoundedRangeModel javax.swing.JScrollBar.getModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns data model that handles the scrollbar's four
 fundamental properties: minimum, maximum, value, extent.
 
 @see #setModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JScrollBar.setModel(BoundedRangeModel newModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the model that handles the scrollbar's four
 fundamental properties: minimum, maximum, value, extent.
 
 @see #getModel
 @beaninfo
       bound: true
       expert: true
 description: The scrollbar's BoundedRangeModel.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JScrollBar.getUnitIncrement(int direction)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the amount to change the scrollbar's value by,
 given a unit up/down request.  A ScrollBarUI implementation
 typically calls this method when the user clicks on a scrollbar 
 up/down arrow and uses the result to update the scrollbar's
 value.   Subclasses my override this method to compute
 a value, e.g. the change required to scroll up or down one
 (variable height) line text or one row in a table.
 <p>
 The JScrollPane component creates scrollbars (by default) 
 that override this method and delegate to the viewports
 Scrollable view, if it has one.  The Scrollable interface
 provides a more specialized version of this method.
 
 @param direction is -1 or 1 for up/down respectively
 @return the value of the unitIncrement property
 @see #setUnitIncrement
 @see #setValue
 @see Scrollable#getScrollableUnitIncrement

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JScrollBar.setUnitIncrement(int unitIncrement)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the unitIncrement property.
 <p>
 Note, that if the argument is equal to the value of Integer.MIN_VALUE,
 the most look and feels will not provide the scrolling to the right/down.
 @see #getUnitIncrement
 @beaninfo
   preferred: true
       bound: true
 description: The scrollbar's unit increment.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JScrollBar.getBlockIncrement(int direction)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the amount to change the scrollbar's value by,
 given a block (usually "page") up/down request.  A ScrollBarUI 
 implementation typically calls this method when the user clicks 
 above or below the scrollbar "knob" to change the value
 up or down by large amount.  Subclasses my override this 
 method to compute a value, e.g. the change required to scroll 
 up or down one paragraph in a text document.
 <p>
 The JScrollPane component creates scrollbars (by default) 
 that override this method and delegate to the viewports
 Scrollable view, if it has one.  The Scrollable interface
 provides a more specialized version of this method.
 
 @param direction is -1 or 1 for up/down respectively
 @return the value of the blockIncrement property
 @see #setBlockIncrement
 @see #setValue
 @see Scrollable#getScrollableBlockIncrement

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JScrollBar.setBlockIncrement(int blockIncrement)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the blockIncrement property.
 <p>
 Note, that if the argument is equal to the value of Integer.MIN_VALUE,
 the most look and feels will not provide the scrolling to the right/down.
 @see #getBlockIncrement()
 @beaninfo
   preferred: true
       bound: true
 description: The scrollbar's block increment.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JScrollBar.getUnitIncrement()
<!-- END KEY -->
<!-- BEGIN DATA -->
 For backwards compatibility with java.awt.Scrollbar.
 @see Adjustable#getUnitIncrement
 @see #getUnitIncrement(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JScrollBar.getBlockIncrement()
<!-- END KEY -->
<!-- BEGIN DATA -->
 For backwards compatibility with java.awt.Scrollbar.
 @see Adjustable#getBlockIncrement
 @see #getBlockIncrement(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JScrollBar.getValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the scrollbar's value.
 @return the model's value property
 @see #setValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JScrollBar.setValue(int value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the scrollbar's value.  This method just forwards the value
 to the model.

 @see #getValue
 @see BoundedRangeModel#setValue
 @beaninfo
   preferred: true
 description: The scrollbar's current value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JScrollBar.getVisibleAmount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the scrollbar's extent, aka its "visibleAmount".  In many 
 scrollbar look and feel implementations the size of the 
 scrollbar "knob" or "thumb" is proportional to the extent.
 
 @return the value of the model's extent property
 @see #setVisibleAmount

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JScrollBar.setVisibleAmount(int extent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the model's extent property.
 
 @see #getVisibleAmount
 @see BoundedRangeModel#setExtent
 @beaninfo
   preferred: true
 description: The amount of the view that is currently visible.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JScrollBar.getMinimum()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the minimum value supported by the scrollbar 
 (usually zero).

 @return the value of the model's minimum property
 @see #setMinimum

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JScrollBar.setMinimum(int minimum)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the model's minimum property.

 @see #getMinimum
 @see BoundedRangeModel#setMinimum
 @beaninfo
   preferred: true
 description: The scrollbar's minimum value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JScrollBar.getMaximum()
<!-- END KEY -->
<!-- BEGIN DATA -->
 The maximum value of the scrollbar is maximum - extent.

 @return the value of the model's maximum property
 @see #setMaximum

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JScrollBar.setMaximum(int maximum)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the model's maximum property.  Note that the scrollbar's value
 can only be set to maximum - extent.
 
 @see #getMaximum
 @see BoundedRangeModel#setMaximum
 @beaninfo
   preferred: true
 description: The scrollbar's maximum value. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JScrollBar.getValueIsAdjusting()
<!-- END KEY -->
<!-- BEGIN DATA -->
 True if the scrollbar knob is being dragged.
 
 @return the value of the model's valueIsAdjusting property
 @see #setValueIsAdjusting

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JScrollBar.setValueIsAdjusting(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the model's valueIsAdjusting property.  Scrollbar look and
 feel implementations should set this property to true when 
 a knob drag begins, and to false when the drag ends.  The
 scrollbar model will not generate ChangeEvents while
 valueIsAdjusting is true.
 
 @see #getValueIsAdjusting
 @see BoundedRangeModel#setValueIsAdjusting
 @beaninfo
      expert: true
 description: True if the scrollbar thumb is being dragged.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JScrollBar.setValues(int newValue, int newExtent, int newMin, int newMax)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the four BoundedRangeModel properties after forcing
 the arguments to obey the usual constraints:
 <pre>
 minimum <= value <= value+extent <= maximum
 </pre>
 <p>
 
 @see BoundedRangeModel#setRangeProperties
 @see #setValue
 @see #setVisibleAmount
 @see #setMinimum
 @see #setMaximum

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JScrollBar.addAdjustmentListener(AdjustmentListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds an AdjustmentListener.  Adjustment listeners are notified
 each time the scrollbar's model changes.  Adjustment events are 
 provided for backwards compatibility with java.awt.Scrollbar.
 <p>
 Note that the AdjustmentEvents type property will always have a
 placeholder value of AdjustmentEvent.TRACK because all changes
 to a BoundedRangeModels value are considered equivalent.  To change
 the value of a BoundedRangeModel one just sets its value property,
 i.e. model.setValue(123).  No information about the origin of the
 change, e.g. it's a block decrement, is provided.  We don't try
 fabricate the origin of the change here.

 @param l the AdjustmentLister to add
 @see #removeAdjustmentListener
 @see BoundedRangeModel#addChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JScrollBar.removeAdjustmentListener(AdjustmentListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes an AdjustmentEvent listener.

 @param l the AdjustmentLister to remove
 @see #addAdjustmentListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.AdjustmentListener[] javax.swing.JScrollBar.getAdjustmentListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the <code>AdjustmentListener</code>s added
 to this JScrollBar with addAdjustmentListener().

 @return all of the <code>AdjustmentListener</code>s added or an empty
         array if no listeners have been added
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JScrollBar.fireAdjustmentValueChanged(int id, int type, int value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notify listeners that the scrollbar's model has changed.
 
 @see #addAdjustmentListener
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.JScrollBar.getMinimumSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 The scrollbar is flexible along it's scrolling axis and 
 rigid along the other axis.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.JScrollBar.getMaximumSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 The scrollbar is flexible along it's scrolling axis and
 rigid along the other axis.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JScrollBar.setEnabled(boolean x)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Enables the component so that the knob position can be changed.
 When the disabled, the knob position cannot be changed.

 @param x a boolean value, where true enables the component and
          false disables it

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JScrollBar.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this JScrollBar. This method 
 is intended to be used only for debugging purposes, and the 
 content and format of the returned string may vary between      
 implementations. The returned string may be empty but may not 
 be <code>null</code>.
 
 @return  a string representation of this JScrollBar.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JScrollBar.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleContext associated with this JScrollBar. 
 For JScrollBar, the AccessibleContext takes the form of an 
 AccessibleJScrollBar. 
 A new AccessibleJScrollBar instance is created if necessary.

 @return an AccessibleJScrollBar that serves as the 
         AccessibleContext of this JScrollBar

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JScrollBar.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 See readObject() and writeObject() in JComponent for more 
 information about serialization in Swing.

<!-- END DATA -->
