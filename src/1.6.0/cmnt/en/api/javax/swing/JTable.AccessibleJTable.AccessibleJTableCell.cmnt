<!-- BEGIN KEY -->
protected class javax.swing.JTable.AccessibleJTable.AccessibleJTableCell extends javax.accessibility.AccessibleContext implements javax.accessibility.Accessible, javax.accessibility.AccessibleComponent
<!-- END KEY -->
<!-- BEGIN DATA -->
 The class provides an implementation of the Java Accessibility
 API appropriate to table cells.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JTable.AccessibleJTable.AccessibleJTableCell(JTable t, int r, int c, int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Constructs an <code>AccessibleJTableHeaderEntry</code>.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>AccessibleContext</code> associated with this
 component. In the implementation of the Java Accessibility
 API for this class, return this object, which is its own
 <code>AccessibleContext</code>.

 @return this object

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.accessibility.AccessibleContext javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getCurrentAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleContext for the table cell renderer.

 @return the <code>AccessibleContext</code> for the table 
 cell renderer if one exists;
 otherwise, returns <code>null</code>.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getCurrentComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the table cell renderer component.

 @return the table cell renderer component if one exists;
 otherwise, returns <code>null</code>.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getAccessibleName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the accessible name of this object.

 @return the localized name of the object; <code>null</code>
     if this object does not have a name

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.setAccessibleName(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the localized accessible name of this object.

 @param s the new localized name of the object

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getAccessibleDescription()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the accessible description of this object.

 @return the localized description of the object;
     <code>null</code> if this object does not have
     a description

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.setAccessibleDescription(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the accessible description of this object.

 @param s the new localized description of the object

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleRole javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getAccessibleRole()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the role of this object.

 @return an instance of <code>AccessibleRole</code>
      describing the role of the object
 @see AccessibleRole

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleStateSet javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getAccessibleStateSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the state set of this object.

 @return an instance of <code>AccessibleStateSet</code>
     containing the current state set of the object
 @see AccessibleState

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getAccessibleParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>Accessible</code> parent of this object.

 @return the Accessible parent of this object;
     <code>null</code> if this object does not
     have an <code>Accessible</code> parent

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getAccessibleIndexInParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the index of this object in its accessible parent.

 @return the index of this object in its parent; -1 if this
     object does not have an accessible parent
 @see #getAccessibleParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getAccessibleChildrenCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of accessible children in the object.

 @return the number of accessible children in the object

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getAccessibleChild(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the specified <code>Accessible</code> child of the
 object.

 @param i zero-based index of child
 @return the <code>Accessible</code> child of the object

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Locale javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getLocale()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the locale of the component. If the component
 does not have a locale, then the locale of its parent
 is returned.

 @return this component's locale; if this component does
    not have a locale, the locale of its parent is returned
 @exception IllegalComponentStateException if the
    <code>Component</code> does not have its own locale
    and has not yet been added to a containment hierarchy
    such that the locale can be determined from the
    containing parent
 @see #setLocale

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.addPropertyChangeListener(PropertyChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a <code>PropertyChangeListener</code> to the listener list.
 The listener is registered for all properties.

 @param l  the <code>PropertyChangeListener</code>
     to be added

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.removePropertyChangeListener(PropertyChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a <code>PropertyChangeListener</code> from the
 listener list. This removes a <code>PropertyChangeListener</code>
 that was registered for all properties.

 @param l  the <code>PropertyChangeListener</code>
    to be removed

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleAction javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getAccessibleAction()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>AccessibleAction</code> associated with this
 object if one exists.  Otherwise returns <code>null</code>.

 @return the <code>AccessibleAction</code>, or <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleComponent javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getAccessibleComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>AccessibleComponent</code> associated with
 this object if one exists.  Otherwise returns <code>null</code>.

 @return the <code>AccessibleComponent</code>, or
    <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleSelection javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>AccessibleSelection</code> associated with
 this object if one exists.  Otherwise returns <code>null</code>.

 @return the <code>AccessibleSelection</code>, or
    <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleText javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getAccessibleText()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>AccessibleText</code> associated with this
 object if one exists.  Otherwise returns <code>null</code>.

 @return the <code>AccessibleText</code>, or <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleValue javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getAccessibleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>AccessibleValue</code> associated with
 this object if one exists.  Otherwise returns <code>null</code>.

 @return the <code>AccessibleValue</code>, or <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the background color of this object.

 @return the background color, if supported, of the object;
     otherwise, <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.setBackground(Color c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the background color of this object.

 @param c the new <code>Color</code> for the background

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the foreground color of this object.

 @return the foreground color, if supported, of the object;
     otherwise, <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.setForeground(Color c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the foreground color of this object.

 @param c the new <code>Color</code> for the foreground

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Cursor javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getCursor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>Cursor</code> of this object.

 @return the <code>Cursor</code>, if supported,
    of the object; otherwise, <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.setCursor(Cursor c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>Cursor</code> of this object.

 @param c the new <code>Cursor</code> for the object

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>Font</code> of this object.

 @return the <code>Font</code>,if supported,
   for the object; otherwise, <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.setFont(Font f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>Font</code> of this object.

 @param f the new <code>Font</code> for the object

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FontMetrics javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getFontMetrics(Font f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>FontMetrics</code> of this object.

 @param f the <code>Font</code>
 @return the <code>FontMetrics</code> object, if supported;
    otherwise <code>null</code>
 @see #getFont

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.isEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines if the object is enabled.

 @return true if object is enabled; otherwise, false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.setEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the enabled state of the object.

 @param b if true, enables this object; otherwise, disables it

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.isVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines if this object is visible.  Note: this means that the
 object intends to be visible; however, it may not in fact be
 showing on the screen because one of the objects that this object
 is contained by is not visible.  To determine if an object is
 showing on the screen, use <code>isShowing</code>.

 @return true if object is visible; otherwise, false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.setVisible(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the visible state of the object.

 @param b if true, shows this object; otherwise, hides it

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.isShowing()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines if the object is showing.  This is determined
 by checking the visibility of the object and ancestors
 of the object.  Note: this will return true even if the
 object is obscured by another (for example,
 it happens to be underneath a menu that was pulled down).

 @return true if the object is showing; otherwise, false

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.contains(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks whether the specified point is within this
 object's bounds, where the point's x and y coordinates
 are defined to be relative to the coordinate system of
 the object.

 @param p the <code>Point</code> relative to the
    coordinate system of the object
 @return true if object contains <code>Point</code>;
    otherwise false

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getLocationOnScreen()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the location of the object on the screen.

 @return location of object on screen -- can be
    <code>null</code> if this object is not on the screen

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.getLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the location of the object relative to the parent
 in the form of a point specifying the object's
 top-left corner in the screen's coordinate space.

 @return an instance of <code>Point</code> representing
    the top-left corner of the object's bounds in the
    coordinate space of the screen; <code>null</code> if
    this object or its parent are not on the screen

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.AccessibleJTableCell.setLocation(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the location of the object relative to the parent.

<!-- END DATA -->
