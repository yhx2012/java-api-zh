<!-- BEGIN KEY -->
public class javax.swing.JMenu extends javax.swing.JMenuItem implements javax.accessibility.Accessible, javax.swing.MenuElement
<!-- END KEY -->
<!-- BEGIN DATA -->
 An implementation of a menu -- a popup window containing
 <code>JMenuItem</code>s that
 is displayed when the user selects an item on the <code>JMenuBar</code>.
 In addition to <code>JMenuItem</code>s, a <code>JMenu</code> can
 also contain <code>JSeparator</code>s. 
 <p>
 In essence, a menu is a button with an associated <code>JPopupMenu</code>.
 When the "button" is pressed, the <code>JPopupMenu</code> appears. If the
 "button" is on the <code>JMenuBar</code>, the menu is a top-level window.
 If the "button" is another menu item, then the <code>JPopupMenu</code> is
 "pull-right" menu.
 <p>
 Menus can be configured, and to some degree controlled, by 
 <code><a href="Action.html">Action</a></code>s.  Using an
 <code>Action</code> with a menu has many benefits beyond directly
 configuring a menu.  Refer to <a href="Action.html#buttonActions">
 Swing Components Supporting <code>Action</code></a> for more
 details, and you can find more information in <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/misc/action.html">How
 to Use Actions</a>, a section in <em>The Java Tutorial</em>.
 <p>
 For information and examples of using menus see
 <a href="http://java.sun.com/doc/books/tutorial/uiswing/components/menu.html">How to Use Menus</a>,
 a section in <em>The Java Tutorial.</em>
 <p>
 <strong>Warning:</strong> Swing is not thread safe. For more
 information see <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @beaninfo
   attribute: isContainer true
 description: A popup window containing menu items displayed in a menu bar.

 @version 1.181 08/08/06
 @author Georges Saab
 @author David Karlton
 @author Arnaud Weber
 @see JMenuItem
 @see JSeparator
 @see JMenuBar
 @see JPopupMenu

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JMenu.WinListener javax.swing.JMenu.popupListener
<!-- END KEY -->
<!-- BEGIN DATA -->
 The window-closing listener for the popup.

 @see WinListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenu()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new <code>JMenu</code> with no text.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenu(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new <code>JMenu</code> with the supplied string
 as its text.

 @param s  the text for the menu label

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenu(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a menu whose properties are taken from the 
 <code>Action</code> supplied.
 @param a an <code>Action</code>

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenu(String s, boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new <code>JMenu</code> with the supplied string as
 its text and specified as a tear-off menu or not.

 @param s the text for the menu label
 @param b can the menu be torn off (not yet implemented)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets the UI property with a value from the current look and feel.

 @see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JMenu.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of the L&F class that renders this component.

 @return the string "MenuUI"
 @see JComponent#getUIClassID
 @see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.setModel(ButtonModel newModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the data model for the "menu button" -- the label
 that the user clicks to open or close the menu.

 @param newModel the <code>ButtonModel</code>
 @see #getModel
 @beaninfo
 description: The menu's model
       bound: true
      expert: true
      hidden: true

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JMenu.isSelected()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the menu is currently selected (highlighted).

 @return true if the menu is selected, else false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.setSelected(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the selection status of the menu.

 @param b  true to select (highlight) the menu; false to de-select
		the menu
 @beaninfo
      description: When the menu is selected, its popup child is shown.
           expert: true
           hidden: true

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JMenu.isPopupMenuVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the menu's popup window is visible.

 @return true if the menu is visible, else false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.setPopupMenuVisible(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the visibility of the menu's popup.  If the menu is
 not enabled, this method will have no effect.

 @param b  a boolean value -- true to make the menu visible,
           false to hide it
 @beaninfo
      description: The popup menu's visibility
           expert: true
           hidden: true

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Point javax.swing.JMenu.getPopupMenuOrigin()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Computes the origin for the <code>JMenu</code>'s popup menu.
 This method uses Look and Feel properties named
 <code>Menu.menuPopupOffsetX</code>,
 <code>Menu.menuPopupOffsetY</code>,
 <code>Menu.submenuPopupOffsetX</code>, and
 <code>Menu.submenuPopupOffsetY</code>
 to adjust the exact location of popup.

 @return a <code>Point</code> in the coordinate space of the
		menu which should be used as the origin
 		of the <code>JMenu</code>'s popup menu

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JMenu.getDelay()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the suggested delay, in milliseconds, before submenus
 are popped up or down.  
 Each look and feel (L&F) may determine its own policy for
 observing the <code>delay</code> property.
 In most cases, the delay is not observed for top level menus
 or while dragging.  The default for <code>delay</code> is 0.
 This method is a property of the look and feel code and is used
 to manage the idiosyncracies of the various UI implementations.


 @return the <code>delay</code> property

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.setDelay(int d)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the suggested delay before the menu's <code>PopupMenu</code>
 is popped up or down.  Each look and feel (L&F) may determine
 it's own policy for observing the delay property.  In most cases,
 the delay is not observed for top level menus or while dragging.
 This method is a property of the look and feel code and is used
 to manage the idiosyncracies of the various UI implementations.

 @param       d the number of milliseconds to delay
 @exception   IllegalArgumentException if <code>d</code> 
                       is less than 0
 @beaninfo
      description: The delay between menu selection and making the popup menu visible
           expert: true

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.setMenuLocation(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the location of the popup component.

 @param x the x coordinate of the popup's new position
 @param y the y coordinate of the popup's new position

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem javax.swing.JMenu.add(JMenuItem menuItem)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends a menu item to the end of this menu. 
 Returns the menu item added.

 @param menuItem the <code>JMenuitem</code> to be added
 @return the <code>JMenuItem</code> added

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JMenu.add(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends a component to the end of this menu.
 Returns the component added.

 @param c the <code>Component</code> to add
 @return the <code>Component</code> added

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JMenu.add(Component c, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Adds the specified component to this container at the given 
 position. If <code>index</code> equals -1, the component will
 be appended to the end.
 @param     c   the <code>Component</code> to add
 @param     index    the position at which to insert the component
 @return    the <code>Component</code> added
 @see	  #remove
 @see java.awt.Container#add(Component, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem javax.swing.JMenu.add(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new menu item with the specified text and appends
 it to the end of this menu.
  
 @param s the string for the menu item to be added

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem javax.swing.JMenu.add(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new menu item attached to the specified 
 <code>Action</code> object and appends it to the end of this menu.

 @param a the <code>Action</code> for the menu item to be added
 @see Action

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JMenuItem javax.swing.JMenu.createActionComponent(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Factory method which creates the <code>JMenuItem</code> for 
 <code>Action</code>s added to the <code>JMenu</code>.

 @param a the <code>Action</code> for the menu item to be added
 @return the new menu item
 @see Action

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeListener javax.swing.JMenu.createActionChangeListener(JMenuItem b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a properly configured <code>PropertyChangeListener</code>
 which updates the control as changes to the <code>Action</code> occur. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.addSeparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends a new separator to the end of the menu.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.insert(String s, int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts a new menu item with the specified text at a 
 given position.

 @param s the text for the menu item to add
 @param pos an integer specifying the position at which to add the 
               new menu item
 @exception IllegalArgumentException when the value of 
			<code>pos</code> < 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem javax.swing.JMenu.insert(JMenuItem mi, int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified <code>JMenuitem</code> at a given position.

 @param mi the <code>JMenuitem</code> to add
 @param pos an integer specifying the position at which to add the 
               new <code>JMenuitem</code>
 @return the new menu item
 @exception IllegalArgumentException if the value of 
			<code>pos</code> < 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem javax.swing.JMenu.insert(Action a, int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts a new menu item attached to the specified <code>Action</code> 
 object at a given position.

 @param a the <code>Action</code> object for the menu item to add
 @param pos an integer specifying the position at which to add the 
               new menu item
 @exception IllegalArgumentException if the value of 
			<code>pos</code> < 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.insertSeparator(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts a separator at the specified position.

 @param       index an integer specifying the position at which to 
                    insert the menu separator
 @exception   IllegalArgumentException if the value of 
                       <code>index</code> < 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuItem javax.swing.JMenu.getItem(int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the <code>JMenuItem</code> at the specified position.
 If the component at <code>pos</code> is not a menu item,
 <code>null</code> is returned.
 This method is included for AWT compatibility.

 @param pos    an integer specifying the position
 @exception   IllegalArgumentException if the value of 
                       <code>pos</code> < 0
 @return  the menu item at the specified position; or <code>null</code>
		if the item as the specified position is not a menu item

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JMenu.getItemCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of items on the menu, including separators.
 This method is included for AWT compatibility.

 @return an integer equal to the number of items on the menu
 @see #getMenuComponentCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JMenu.isTearOff()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the menu can be torn off.  This method is not
 yet implemented.

 @return true if the menu can be torn off, else false
 @exception  Error  if invoked -- this method is not yet implemented

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.remove(JMenuItem item)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified menu item from this menu.  If there is no
 popup menu, this method will have no effect.

 @param    item the <code>JMenuItem</code> to be removed from the menu

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.remove(int pos)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the menu item at the specified index from this menu.

 @param       pos the position of the item to be removed
 @exception   IllegalArgumentException if the value of 
                       <code>pos</code> < 0, or if <code>pos</code>
			     is greater than the number of menu items

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.remove(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the component <code>c</code> from this menu.

 @param       c the component to be removed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.removeAll()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all menu items from this menu.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JMenu.getMenuComponentCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of components on the menu.

 @return an integer containing the number of components on the menu

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JMenu.getMenuComponent(int n)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the component at position <code>n</code>.

 @param n the position of the component to be returned
 @return the component requested, or <code>null</code>
			if there is no popup menu


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component[] javax.swing.JMenu.getMenuComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of <code>Component</code>s of the menu's
 subcomponents.  Note that this returns all <code>Component</code>s
 in the popup menu, including separators.

 @return an array of <code>Component</code>s or an empty array
		if there is no popup menu

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JMenu.isTopLevelMenu()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the menu is a 'top-level menu', that is, if it is
 the direct child of a menubar.

 @return true if the menu is activated from the menu bar;
         false if the menu is activated from a menu item
         on another menu

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JMenu.isMenuComponent(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the specified component exists in the 
 submenu hierarchy.

 @param c the <code>Component</code> to be tested
 @return true if the <code>Component</code> exists, false otherwise

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JPopupMenu javax.swing.JMenu.getPopupMenu()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the popupmenu associated with this menu.  If there is
 no popupmenu, it will create one.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.addMenuListener(MenuListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a listener for menu events.

 @param l the listener to be added

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.removeMenuListener(MenuListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a listener for menu events.

 @param l the listener to be removed

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.MenuListener[] javax.swing.JMenu.getMenuListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the <code>MenuListener</code>s added
 to this JMenu with addMenuListener().

 @return all of the <code>MenuListener</code>s added or an empty
         array if no listeners have been added
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenu.fireMenuSelected()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.  The event instance 
 is created lazily.

 @exception Error  if there is a <code>null</code> listener
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenu.fireMenuDeselected()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.  The event instance 
 is created lazily.

 @exception Error if there is a <code>null</code> listener
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenu.fireMenuCanceled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.  The event instance 
 is created lazily.

 @exception Error if there is a <code>null</code> listener
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JMenu.WinListener javax.swing.JMenu.createWinListener(JPopupMenu p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a window-closing listener for the popup.

 @param p the <code>JPopupMenu</code>
 @return the new window-closing listener

 @see WinListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.menuSelectionChanged(boolean isIncluded)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Messaged when the menubar selection changes to activate or
 deactivate this menu.
 Overrides <code>JMenuItem.menuSelectionChanged</code>.

 @param isIncluded  true if this menu is active, false if
        it is not

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.MenuElement[] javax.swing.JMenu.getSubElements()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of <code>MenuElement</code>s containing the submenu 
 for this menu component.  If popup menu is <code>null</code> returns
 an empty array.  This method is required to conform to the
 <code>MenuElement</code> interface.  Note that since
 <code>JSeparator</code>s do not conform to the <code>MenuElement</code>
 interface, this array will only contain <code>JMenuItem</code>s.

 @return an array of <code>MenuElement</code> objects

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JMenu.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>java.awt.Component</code> used to 
 paint this <code>MenuElement</code>.
 The returned component is used to convert events and detect if
 an event is inside a menu component.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.applyComponentOrientation(ComponentOrientation o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>ComponentOrientation</code> property of this menu
 and all components contained within it. This includes all 
 components returned by {@link #getMenuComponents getMenuComponents}.

 @param o the new component orientation of this menu and
        the components contained within it.
 @exception NullPointerException if <code>orientation</code> is null.
 @see java.awt.Component#setComponentOrientation
 @see java.awt.Component#getComponentOrientation
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.setAccelerator(KeyStroke keyStroke)
<!-- END KEY -->
<!-- BEGIN DATA -->

 <code>setAccelerator</code> is not defined for <code>JMenu</code>.
 Use <code>setMnemonic</code> instead. 
 @param keyStroke  the keystroke combination which will invoke
			the <code>JMenuItem</code>'s actionlisteners
			without navigating the menu hierarchy
 @exception Error  if invoked -- this method is not defined for JMenu.
			Use <code>setMnemonic</code> instead

 @beaninfo
     description: The keystroke combination which will invoke the JMenuItem's
                  actionlisteners without navigating the menu hierarchy
          hidden: true

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenu.processKeyEvent(KeyEvent evt)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Processes key stroke events such as mnemonics and accelerators.

 @param evt  the key event to be processed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenu.doClick(int pressTime)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Programmatically performs a "click".  This overrides the method
 <code>AbstractButton.doClick</code> in order to make the menu pop up.
 @param pressTime  indicates the number of milliseconds the
		button was pressed for

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JMenu.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this <code>JMenu</code>. This 
 method is intended to be used only for debugging purposes, and the 
 content and format of the returned string may vary between      
 implementations. The returned string may be empty but may not 
 be <code>null</code>.
 
 @return  a string representation of this JMenu.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JMenu.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleContext associated with this JMenu. 
 For JMenus, the AccessibleContext takes the form of an 
 AccessibleJMenu. 
 A new AccessibleJMenu instance is created if necessary.

 @return an AccessibleJMenu that serves as the 
         AccessibleContext of this JMenu

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JMenu.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 See <code>readObject</code> and <code>writeObject</code> in
 <code>JComponent</code> for more 
 information about serialization in Swing.

<!-- END DATA -->
