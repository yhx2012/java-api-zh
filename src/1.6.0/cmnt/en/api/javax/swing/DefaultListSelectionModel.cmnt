<!-- BEGIN KEY -->
public class javax.swing.DefaultListSelectionModel extends java.lang.Object implements javax.swing.ListSelectionModel, java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 Default data model for list selections. 
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @version 1.78 07/19/06
 @author Philip Milne
 @author Hans Muller
 @see ListSelectionModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultListSelectionModel.getMinSelectionIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultListSelectionModel.getMaxSelectionIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultListSelectionModel.getValueIsAdjusting()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultListSelectionModel.getSelectionMode()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.setSelectionMode(int selectionMode)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultListSelectionModel.isSelectedIndex(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultListSelectionModel.isSelectionEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.addListSelectionListener(ListSelectionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.removeListSelectionListener(ListSelectionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.ListSelectionListener[] javax.swing.DefaultListSelectionModel.getListSelectionListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the list selection listeners 
 registered on this <code>DefaultListSelectionModel</code>.

 @return all of this model's <code>ListSelectionListener</code>s 
         or an empty
         array if no list selection listeners are currently registered

 @see #addListSelectionListener
 @see #removeListSelectionListener

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.DefaultListSelectionModel.fireValueChanged(boolean isAdjusting)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies listeners that we have ended a series of adjustments. 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.DefaultListSelectionModel.fireValueChanged(int firstIndex, int lastIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies <code>ListSelectionListeners</code> that the value
 of the selection, in the closed interval <code>firstIndex</code>,
 <code>lastIndex</code>, has changed.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.DefaultListSelectionModel.fireValueChanged(int firstIndex, int lastIndex, boolean isAdjusting)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @param firstIndex the first index in the interval
 @param lastIndex the last index in the interval
 @param isAdjusting true if this is the final change in a series of
		adjustments
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] javax.swing.DefaultListSelectionModel.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the objects currently registered as
 <code><em>Foo</em>Listener</code>s
 upon this model.
 <code><em>Foo</em>Listener</code>s
 are registered using the <code>add<em>Foo</em>Listener</code> method.
 <p>
 You can specify the <code>listenerType</code> argument
 with a class literal, such as <code><em>Foo</em>Listener.class</code>.
 For example, you can query a <code>DefaultListSelectionModel</code>
 instance <code>m</code>
 for its list selection listeners
 with the following code:

 <pre>ListSelectionListener[] lsls = (ListSelectionListener[])(m.getListeners(ListSelectionListener.class));</pre>

 If no such listeners exist,
 this method returns an empty array.

 @param listenerType  the type of listeners requested;
          this parameter should specify an interface
          that descends from <code>java.util.EventListener</code>
 @return an array of all objects registered as
          <code><em>Foo</em>Listener</code>s
          on this model,
          or an empty array if no such
          listeners have been added
 @exception ClassCastException if <code>listenerType</code> doesn't
          specify a class or interface that implements
          <code>java.util.EventListener</code>

 @see #getListSelectionListeners

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.setLeadAnchorNotificationEnabled(boolean flag)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the value of the leadAnchorNotificationEnabled flag.
 @see		#isLeadAnchorNotificationEnabled()

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultListSelectionModel.isLeadAnchorNotificationEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of the <code>leadAnchorNotificationEnabled</code> flag.
 When <code>leadAnchorNotificationEnabled</code> is true the model
 generates notification events with bounds that cover all the changes to
 the selection plus the changes to the lead and anchor indices.
 Setting the flag to false causes a narrowing of the event's bounds to
 include only the elements that have been selected or deselected since
 the last change. Either way, the model continues to maintain the lead
 and anchor variables internally. The default is true.
 <p>
 Note: It is possible for the lead or anchor to be changed without a
 change to the selection. Notification of these changes is often
 important, such as when the new lead or anchor needs to be updated in
 the view. Therefore, caution is urged when changing the default value.

 @return 	the value of the <code>leadAnchorNotificationEnabled</code> flag
 @see		#setLeadAnchorNotificationEnabled(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.clearSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.setSelectionInterval(int index0, int index1)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Changes the selection to be between {@code index0} and {@code index1}
 inclusive. {@code index0} doesn't have to be less than or equal to
 {@code index1}.
 <p>
 In {@code SINGLE_SELECTION} selection mode, only the second index
 is used.
 <p>
 If this represents a change to the current selection, then each
 {@code ListSelectionListener} is notified of the change.
 <p>
 If either index is {@code -1}, this method does nothing and returns
 without exception. Otherwise, if either index is less than {@code -1},
 an {@code IndexOutOfBoundsException} is thrown.
 
 @param index0 one end of the interval.
 @param index1 other end of the interval
 @throws IndexOutOfBoundsException if either index is less than {@code -1}
         (and neither index is {@code -1})
 @see #addListSelectionListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.addSelectionInterval(int index0, int index1)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Changes the selection to be the set union of the current selection
 and the indices between {@code index0} and {@code index1} inclusive.
 <p>
 In {@code SINGLE_SELECTION} selection mode, this is equivalent
 to calling {@code setSelectionInterval}, and only the second index
 is used. In {@code SINGLE_INTERVAL_SELECTION} selection mode, this
 method behaves like {@code setSelectionInterval}, unless the given
 interval is immediately adjacent to or overlaps the existing selection,
 and can therefore be used to grow it.
 <p>
 If this represents a change to the current selection, then each
 {@code ListSelectionListener} is notified of the change. Note that
 {@code index0} doesn't have to be less than or equal to {@code index1}.
 <p>
 If either index is {@code -1}, this method does nothing and returns
 without exception. Otherwise, if either index is less than {@code -1},
 an {@code IndexOutOfBoundsException} is thrown.
 
 @param index0 one end of the interval.
 @param index1 other end of the interval
 @throws IndexOutOfBoundsException if either index is less than {@code -1}
         (and neither index is {@code -1})
 @see #addListSelectionListener
 @see #setSelectionInterval

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.removeSelectionInterval(int index0, int index1)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Changes the selection to be the set difference of the current selection
 and the indices between {@code index0} and {@code index1} inclusive.
 {@code index0} doesn't have to be less than or equal to {@code index1}.
 <p>
 In {@code SINGLE_INTERVAL_SELECTION} selection mode, if the removal
 would produce two disjoint selections, the removal is extended through
 the greater end of the selection. For example, if the selection is
 {@code 0-10} and you supply indices {@code 5,6} (in any order) the
 resulting selection is {@code 0-4}.
 <p>
 If this represents a change to the current selection, then each
 {@code ListSelectionListener} is notified of the change.
 <p>
 If either index is {@code -1}, this method does nothing and returns
 without exception. Otherwise, if either index is less than {@code -1},
 an {@code IndexOutOfBoundsException} is thrown.
 
 @param index0 one end of the interval
 @param index1 other end of the interval
 @throws IndexOutOfBoundsException if either index is less than {@code -1}
         (and neither index is {@code -1})
 @see #addListSelectionListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.insertIndexInterval(int index, int length, boolean before)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Insert length indices beginning before/after index. If the value 
 at index is itself selected and the selection mode is not
 SINGLE_SELECTION, set all of the newly inserted items as selected.
 Otherwise leave them unselected. This method is typically
 called to sync the selection model with a corresponding change
 in the data model.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.removeIndexInterval(int index0, int index1)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Remove the indices in the interval index0,index1 (inclusive) from
 the selection model.  This is typically called to sync the selection
 model width a corresponding change in the data model.  Note
 that (as always) index0 need not be <= index1.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.setValueIsAdjusting(boolean isAdjusting)
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.DefaultListSelectionModel.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string that displays and identifies this
 object's properties.

 @return a <code>String</code> representation of this object

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.DefaultListSelectionModel.clone() throws java.lang.CloneNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a clone of this selection model with the same selection.
 <code>listenerLists</code> are not duplicated.

 @exception CloneNotSupportedException if the selection model does not
    both (a) implement the Cloneable interface and (b) define a
    <code>clone</code> method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultListSelectionModel.getAnchorSelectionIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultListSelectionModel.getLeadSelectionIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
{@inheritDoc} 
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.setAnchorSelectionIndex(int anchorIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the anchor selection index, leaving all selection values unchanged. 
 If leadAnchorNotificationEnabled is true, send a notification covering 
 the old and new anchor cells. 

 @see #getAnchorSelectionIndex     
 @see #setLeadSelectionIndex

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.moveLeadSelectionIndex(int leadIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the lead selection index, leaving all selection values unchanged.
 If leadAnchorNotificationEnabled is true, send a notification covering
 the old and new lead cells.

 @param leadIndex the new lead selection index

 @see #setAnchorSelectionIndex
 @see #setLeadSelectionIndex
 @see #getLeadSelectionIndex

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultListSelectionModel.setLeadSelectionIndex(int leadIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the lead selection index, ensuring that values between the 
 anchor and the new lead are either all selected or all deselected. 
 If the value at the anchor index is selected, first clear all the 
 values in the range [anchor, oldLeadIndex], then select all the values 
 values in the range [anchor, newLeadIndex], where oldLeadIndex is the old
 leadIndex and newLeadIndex is the new one. 
 <p> 
 If the value at the anchor index is not selected, do the same thing in 
 reverse selecting values in the old range and deslecting values in the
 new one. 
 <p>
 Generate a single event for this change and notify all listeners. 
 For the purposes of generating minimal bounds in this event, do the 
 operation in a single pass; that way the first and last index inside the 
 ListSelectionEvent that is broadcast will refer to cells that actually 
 changed value because of this method. If, instead, this operation were 
 done in two steps the effect on the selection state would be the same 
 but two events would be generated and the bounds around the changed 
 values would be wider, including cells that had been first cleared only 
 to later be set. 
 <p>
 This method can be used in the <code>mouseDragged</code> method
 of a UI class to extend a selection.  

 @see #getLeadSelectionIndex     
 @see #setAnchorSelectionIndex

<!-- END DATA -->
