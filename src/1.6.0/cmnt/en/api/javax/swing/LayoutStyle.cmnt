<!-- BEGIN KEY -->
public abstract class javax.swing.LayoutStyle extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>LayoutStyle</code> provides information about how to position
 components.  This class is primarily useful for visual tools and
 layout managers.  Most developers will not need to use this class.
 <p>
 You typically don't set or create a
 <code>LayoutStyle</code>.  Instead use the static method
 <code>getInstance</code> to obtain the current instance.

 @version 1.2, 11/17/05
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.LayoutStyle()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <code>LayoutStyle</code>.  You generally don't
 create a <code>LayoutStyle</code>.  Instead use the method
 <code>getInstance</code> to obtain the current
 <code>LayoutStyle</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.LayoutStyle.setInstance(LayoutStyle style)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the shared instance of <code>LayoutStyle</code>.  Specifying
 <code>null</code> results in using the <code>LayoutStyle</code> from
 the current <code>LookAndFeel</code>.

 @param style the <code>LayoutStyle</code>, or <code>null</code>
 @see #getInstance

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.LayoutStyle javax.swing.LayoutStyle.getInstance()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the shared instance of <code>LayoutStyle</code>.  If an instance
 has not been specified in <code>setInstance</code>, this will return
 the <code>LayoutStyle</code> from the current <code>LookAndFeel</code>.

 @see LookAndFeel#getLayoutStyle
 @return the shared instance of <code>LayoutStyle</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.LayoutStyle.getPreferredGap(JComponent component1, JComponent component2, LayoutStyle.ComponentPlacement type, int position, Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the amount of space to use between two components.
 The return value indicates the distance to place
 <code>component2</code> relative to <code>component1</code>.
 For example, the following returns the amount of space to place
 between <code>component2</code> and <code>component1</code>
 when <code>component2</code> is placed vertically above
 <code>component1</code>:
 <pre>
   int gap = getPreferredGap(component1, component2,
                             ComponentPlacement.RELATED,
                             SwingConstants.NORTH, parent);
 </pre>
 The <code>type</code> parameter indicates the relation between
 the two components.  If the two components will be contained in
 the same parent and are showing similar logically related
 items, use <code>RELATED</code>.  If the two components will be
 contained in the same parent but show logically unrelated items
 use <code>UNRELATED</code>.  Some look and feels may not
 distinguish between the <code>RELATED</code> and
 <code>UNRELATED</code> types.
 <p>
 The return value is not intended to take into account the
 current size and position of <code>component2</code> or
 <code>component1</code>.  The return value may take into
 consideration various properties of the components.  For
 example, the space may vary based on font size, or the preferred
 size of the component.

 @param component1 the <code>JComponent</code>
               <code>component2</code> is being placed relative to
 @param component2 the <code>JComponent</code> being placed
 @param position the position <code>component2</code> is being placed 
        relative to <code>component1</code>; one of
        <code>SwingConstants.NORTH</code>,
        <code>SwingConstants.SOUTH</code>,
        <code>SwingConstants.EAST</code> or
        <code>SwingConstants.WEST</code>
 @param type how the two components are being placed
 @param parent the parent of <code>component2</code>; this may differ
        from the actual parent and it may be <code>null</code>
 @return the amount of space to place between the two components
 @throws NullPointerException if <code>component1</code>,
         <code>component2</code> or <code>type</code> is
         <code>null</code>
 @throws IllegalArgumentException if <code>position</code> is not
         one of <code>SwingConstants.NORTH</code>,
         <code>SwingConstants.SOUTH</code>,
         <code>SwingConstants.EAST</code> or 
         <code>SwingConstants.WEST</code>
 @see LookAndFeel#getLayoutStyle
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.LayoutStyle.getContainerGap(JComponent component, int position, Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the amount of space to place between the component and specified
 edge of its parent.

 @param component the <code>JComponent</code> being positioned
 @param position the position <code>component</code> is being placed 
        relative to its parent; one of
        <code>SwingConstants.NORTH</code>,
        <code>SwingConstants.SOUTH</code>,
        <code>SwingConstants.EAST</code> or
        <code>SwingConstants.WEST</code>
 @param parent the parent of <code>component</code>; this may differ
        from the actual parent and may be <code>null</code>
 @return the amount of space to place between the component and specified
         edge
 @throws IllegalArgumentException if <code>position</code> is not
         one of <code>SwingConstants.NORTH</code>,
         <code>SwingConstants.SOUTH</code>,
         <code>SwingConstants.EAST</code> or 
         <code>SwingConstants.WEST</code>

<!-- END DATA -->
