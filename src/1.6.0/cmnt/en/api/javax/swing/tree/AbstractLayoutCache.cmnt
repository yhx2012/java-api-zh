<!-- BEGIN KEY -->
public abstract class javax.swing.tree.AbstractLayoutCache extends java.lang.Object implements javax.swing.tree.RowMapper
<!-- END KEY -->
<!-- BEGIN DATA -->
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @version 1.18 11/17/05
 @author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.AbstractLayoutCache.NodeDimensions javax.swing.tree.AbstractLayoutCache.nodeDimensions
<!-- END KEY -->
<!-- BEGIN DATA -->
Object responsible for getting the size of a node. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeModel javax.swing.tree.AbstractLayoutCache.treeModel
<!-- END KEY -->
<!-- BEGIN DATA -->
Model providing information. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeSelectionModel javax.swing.tree.AbstractLayoutCache.treeSelectionModel
<!-- END KEY -->
<!-- BEGIN DATA -->
Selection model. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.AbstractLayoutCache.rootVisible
<!-- END KEY -->
<!-- BEGIN DATA -->
 True if the root node is displayed, false if its children are
 the highest visible nodes.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.tree.AbstractLayoutCache.rowHeight
<!-- END KEY -->
<!-- BEGIN DATA -->
 Height to use for each row.  If this is <= 0 the renderer will be
 used to determine the height for each row.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.AbstractLayoutCache.setNodeDimensions(AbstractLayoutCache.NodeDimensions nd)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the renderer that is responsible for drawing nodes in the tree
 and which is threfore responsible for calculating the dimensions of
 individual nodes.

 @param nd a <code>NodeDimensions</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.AbstractLayoutCache.NodeDimensions javax.swing.tree.AbstractLayoutCache.getNodeDimensions()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the object that renders nodes in the tree, and which is 
 responsible for calculating the dimensions of individual nodes.

 @return the <code>NodeDimensions</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.AbstractLayoutCache.setModel(TreeModel newModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>TreeModel</code> that will provide the data.

 @param newModel the <code>TreeModel</code> that is to
		provide the data

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreeModel javax.swing.tree.AbstractLayoutCache.getModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>TreeModel</code> that is providing the data.

 @return the <code>TreeModel</code> that is providing the data

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.AbstractLayoutCache.setRootVisible(boolean rootVisible)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines whether or not the root node from
 the <code>TreeModel</code> is visible.

 @param rootVisible true if the root node of the tree is to be displayed
 @see #rootVisible
 @beaninfo
        bound: true
  description: Whether or not the root node
               from the TreeModel is visible.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.AbstractLayoutCache.isRootVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the root node of the tree is displayed.

 @return true if the root node of the tree is displayed
 @see #rootVisible

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.AbstractLayoutCache.setRowHeight(int rowHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the height of each cell.  If the specified value
 is less than or equal to zero the current cell renderer is
 queried for each row's height.

 @param rowHeight the height of each cell, in pixels
 @beaninfo
        bound: true
  description: The height of each cell.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.AbstractLayoutCache.getRowHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the height of each row.  If the returned value is less than
 or equal to 0 the height for each row is determined by the
 renderer.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.AbstractLayoutCache.setSelectionModel(TreeSelectionModel newLSM)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>TreeSelectionModel</code> used to manage the
 selection to new LSM.

 @param newLSM  the new <code>TreeSelectionModel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreeSelectionModel javax.swing.tree.AbstractLayoutCache.getSelectionModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the model used to maintain the selection.

 @return the <code>treeSelectionModel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.AbstractLayoutCache.getPreferredHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the preferred height.

 @return the preferred height

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.AbstractLayoutCache.getPreferredWidth(Rectangle bounds)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the preferred width for the passed in region.
 The region is defined by the path closest to
 <code>(bounds.x, bounds.y)</code> and
 ends at <code>bounds.height + bounds.y</code>.
 If <code>bounds</code> is <code>null</code>,
 the preferred width for all the nodes
 will be returned (and this may be a VERY expensive
 computation).

 @param bounds the region being queried
 @return the preferred width for the passed in region

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.swing.tree.AbstractLayoutCache.isExpanded(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the value identified by row is currently expanded.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Rectangle javax.swing.tree.AbstractLayoutCache.getBounds(TreePath path, Rectangle placeIn)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a rectangle giving the bounds needed to draw path.

 @param path     a <code>TreePath</code> specifying a node
 @param placeIn  a <code>Rectangle</code> object giving the
		available space
 @return a <code>Rectangle</code> object specifying the space to be used

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.tree.TreePath javax.swing.tree.AbstractLayoutCache.getPathForRow(int row)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the path for passed in row.  If row is not visible
 <code>null</code> is returned.

 @param row  the row being queried
 @return the <code>TreePath</code> for the given row

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.tree.AbstractLayoutCache.getRowForPath(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the row that the last item identified in path is visible
 at.  Will return -1 if any of the elements in path are not
 currently visible.

 @param path the <code>TreePath</code> being queried
 @return the row where the last item in path is visible or -1
		if any elements in path aren't currently visible

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.tree.TreePath javax.swing.tree.AbstractLayoutCache.getPathClosestTo(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the path to the node that is closest to x,y.  If
 there is nothing currently visible this will return <code>null</code>,
 otherwise it'll always return a valid path.
 If you need to test if the
 returned object is exactly at x, y you should get the bounds for
 the returned path and test x, y against that.

 @param x the horizontal component of the desired location
 @param y the vertical component of the desired location
 @return the <code>TreePath</code> closest to the specified point

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Enumeration<javax.swing.tree.TreePath> javax.swing.tree.AbstractLayoutCache.getVisiblePathsFrom(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an <code>Enumerator</code> that increments over the visible 
 paths starting at the passed in location. The ordering of the 
 enumeration is based on how the paths are displayed.
 The first element of the returned enumeration will be path,
 unless it isn't visible,
 in which case <code>null</code> will be returned.

 @param path the starting location for the enumeration
 @return the <code>Enumerator</code> starting at the desired location

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.tree.AbstractLayoutCache.getVisibleChildCount(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of visible children for row.
 
 @param path  the path being queried
 @return the number of visible children for the specified path

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.tree.AbstractLayoutCache.setExpandedState(TreePath path, boolean isExpanded)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Marks the path <code>path</code> expanded state to
 <code>isExpanded</code>.

 @param path  the path being expanded or collapsed
 @param isExpanded true if the path should be expanded, false otherwise 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.swing.tree.AbstractLayoutCache.getExpandedState(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the path is expanded, and visible.

 @param path  the path being queried
 @return true if the path is expanded and visible, false otherwise

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.tree.AbstractLayoutCache.getRowCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Number of rows being displayed.
 
 @return the number of rows being displayed

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.tree.AbstractLayoutCache.invalidateSizes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Informs the <code>TreeState</code> that it needs to recalculate
 all the sizes it is referencing.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.tree.AbstractLayoutCache.invalidatePathBounds(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Instructs the <code>LayoutCache</code> that the bounds for
 <code>path</code> are invalid, and need to be updated.

 @param path the path being updated

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.tree.AbstractLayoutCache.treeNodesChanged(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
 Invoked after a node (or a set of siblings) has changed in some
 way. The node(s) have not changed locations in the tree or
 altered their children arrays, but other attributes have
 changed and may affect presentation. Example: the name of a
 file has changed, but it is in the same location in the file
 system.</p>

 <p>e.path() returns the path the parent of the changed node(s).</p>

 <p>e.childIndices() returns the index(es) of the changed node(s).</p>

 @param e  the <code>TreeModelEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.tree.AbstractLayoutCache.treeNodesInserted(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Invoked after nodes have been inserted into the tree.</p>

 <p>e.path() returns the parent of the new nodes</p>
 <p>e.childIndices() returns the indices of the new nodes in
 ascending order.</p>

 @param e the <code>TreeModelEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.tree.AbstractLayoutCache.treeNodesRemoved(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Invoked after nodes have been removed from the tree.  Note that
 if a subtree is removed from the tree, this method may only be
 invoked once for the root of the removed subtree, not once for
 each individual set of siblings removed.</p>

 <p>e.path() returns the former parent of the deleted nodes.</p>

 <p>e.childIndices() returns the indices the nodes had before they were deleted in ascending order.</p>

 @param e the <code>TreeModelEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.tree.AbstractLayoutCache.treeStructureChanged(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Invoked after the tree has drastically changed structure from a
 given node down.  If the path returned by <code>e.getPath()</code>
 is of length one and the first element does not identify the
 current root node the first element should become the new root
 of the tree.</p>

 <p>e.path() holds the path to the node.</p>
 <p>e.childIndices() returns null.</p>

 @param e the <code>TreeModelEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] javax.swing.tree.AbstractLayoutCache.getRowsForPaths(javax.swing.tree.TreePath[] paths)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the rows that the <code>TreePath</code> instances in
 <code>path</code> are being displayed at.
 This method should return an array of the same length as that passed
 in, and if one of the <code>TreePaths</code>
 in <code>path</code> is not valid its entry in the array should
 be set to -1.

 @param paths the array of <code>TreePath</code>s being queried
 @return an array of the same length that is passed in containing
		the rows that each corresponding where each
		<code>TreePath</code> is displayed; if <code>paths</code>
		is <code>null</code>, <code>null</code> is returned

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.tree.AbstractLayoutCache.getNodeDimensions(Object value, int row, int depth, boolean expanded, Rectangle placeIn)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns, by reference in <code>placeIn</code>,
 the size needed to represent <code>value</code>.
 If <code>inPlace</code> is <code>null</code>, a newly created
 <code>Rectangle</code> should be returned, otherwise the value
 should be placed in <code>inPlace</code> and returned. This will
 return <code>null</code> if there is no renderer.

 @param value the <code>value</code> to be represented
 @param row  row being queried
 @param depth the depth of the row
 @param expanded true if row is expanded, false otherwise 
 @param placeIn  a <code>Rectangle</code> containing the size needed
		to represent <code>value</code>
 @return a <code>Rectangle</code> containing the node dimensions,
		or <code>null</code> if node has no dimension

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.AbstractLayoutCache.isFixedRowHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the height of each row is a fixed size.

<!-- END DATA -->
