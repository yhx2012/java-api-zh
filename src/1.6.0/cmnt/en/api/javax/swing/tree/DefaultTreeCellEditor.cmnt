<!-- BEGIN KEY -->
public class javax.swing.tree.DefaultTreeCellEditor extends java.lang.Object implements java.awt.event.ActionListener, javax.swing.tree.TreeCellEditor, javax.swing.event.TreeSelectionListener
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <code>TreeCellEditor</code>. You need to supply an
 instance of <code>DefaultTreeCellRenderer</code>
 so that the icons can be obtained. You can optionally supply
 a <code>TreeCellEditor</code> that will be layed out according
 to the icon in the <code>DefaultTreeCellRenderer</code>.
 If you do not supply a <code>TreeCellEditor</code>,
 a <code>TextField</code> will be used. Editing is started
 on a triple mouse click, or after a click, pause, click and
 a delay of 1200 miliseconds.
<p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @see javax.swing.JTree

 @version 1.32 04/07/06
 @author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeCellEditor javax.swing.tree.DefaultTreeCellEditor.realEditor
<!-- END KEY -->
<!-- BEGIN DATA -->
Editor handling the editing. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.DefaultTreeCellRenderer javax.swing.tree.DefaultTreeCellEditor.renderer
<!-- END KEY -->
<!-- BEGIN DATA -->
Renderer, used to get border and offsets from. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Container javax.swing.tree.DefaultTreeCellEditor.editingContainer
<!-- END KEY -->
<!-- BEGIN DATA -->
Editing container, will contain the <code>editorComponent</code>. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient java.awt.Component javax.swing.tree.DefaultTreeCellEditor.editingComponent
<!-- END KEY -->
<!-- BEGIN DATA -->
 Component used in editing, obtained from the
 <code>editingContainer</code>. 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.DefaultTreeCellEditor.canEdit
<!-- END KEY -->
<!-- BEGIN DATA -->
 As of Java 2 platform v1.4 this field should no longer be used. If
 you wish to provide similar behavior you should directly override
 <code>isCellEditable</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient int javax.swing.tree.DefaultTreeCellEditor.offset
<!-- END KEY -->
<!-- BEGIN DATA -->
 Used in editing. Indicates x position to place
 <code>editingComponent</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.JTree javax.swing.tree.DefaultTreeCellEditor.tree
<!-- END KEY -->
<!-- BEGIN DATA -->
<code>JTree</code> instance listening too. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.tree.TreePath javax.swing.tree.DefaultTreeCellEditor.lastPath
<!-- END KEY -->
<!-- BEGIN DATA -->
Last path that was selected. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.Timer javax.swing.tree.DefaultTreeCellEditor.timer
<!-- END KEY -->
<!-- BEGIN DATA -->
Used before starting the editing session. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient int javax.swing.tree.DefaultTreeCellEditor.lastRow
<!-- END KEY -->
<!-- BEGIN DATA -->
 Row that was last passed into
 <code>getTreeCellEditorComponent</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Color javax.swing.tree.DefaultTreeCellEditor.borderSelectionColor
<!-- END KEY -->
<!-- BEGIN DATA -->
True if the border selection color should be drawn. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.Icon javax.swing.tree.DefaultTreeCellEditor.editingIcon
<!-- END KEY -->
<!-- BEGIN DATA -->
Icon to use when editing. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Font javax.swing.tree.DefaultTreeCellEditor.font
<!-- END KEY -->
<!-- BEGIN DATA -->
 Font to paint with, <code>null</code> indicates
 font of renderer is to be used. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.DefaultTreeCellEditor(JTree tree, DefaultTreeCellRenderer renderer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>DefaultTreeCellEditor</code>
 object for a JTree using the specified renderer and
 a default editor. (Use this constructor for normal editing.)

 @param tree      a <code>JTree</code> object
 @param renderer  a <code>DefaultTreeCellRenderer</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.DefaultTreeCellEditor(JTree tree, DefaultTreeCellRenderer renderer, TreeCellEditor editor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>DefaultTreeCellEditor</code>
 object for a <code>JTree</code> using the
 specified renderer and the specified editor. (Use this constructor
 for specialized editing.)

 @param tree      a <code>JTree</code> object
 @param renderer  a <code>DefaultTreeCellRenderer</code> object
 @param editor    a <code>TreeCellEditor</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellEditor.setBorderSelectionColor(Color newColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the color to use for the border.
 @param newColor the new border color

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.tree.DefaultTreeCellEditor.getBorderSelectionColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the color the border is drawn.
 @return the border selection color

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellEditor.setFont(Font font)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the font to edit with. <code>null</code> indicates
 the renderers font should be used. This will NOT
 override any font you have set in the editor
 the receiver was instantied with. If <code>null</code>
 for an editor was passed in a default editor will be
 created that will pick up this font.

 @param font  the editing <code>Font</code>
 @see #getFont

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font javax.swing.tree.DefaultTreeCellEditor.getFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the font used for editing.

 @return the editing <code>Font</code>
 @see #setFont

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.tree.DefaultTreeCellEditor.getTreeCellEditorComponent(JTree tree, Object value, boolean isSelected, boolean expanded, boolean leaf, int row)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Configures the editor.  Passed onto the <code>realEditor</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.tree.DefaultTreeCellEditor.getCellEditorValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value currently being edited.
 @return the value currently being edited

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.DefaultTreeCellEditor.isCellEditable(EventObject event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the <code>realEditor</code> returns true to this
 message, <code>prepareForEditing</code>
 is messaged and true is returned.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.DefaultTreeCellEditor.shouldSelectCell(EventObject event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Messages the <code>realEditor</code> for the return value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.DefaultTreeCellEditor.stopCellEditing()
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the <code>realEditor</code> will allow editing to stop,
 the <code>realEditor</code> is removed and true is returned,
 otherwise false is returned.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellEditor.cancelCellEditing()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Messages <code>cancelCellEditing</code> to the 
 <code>realEditor</code> and removes it from this instance.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellEditor.addCellEditorListener(CellEditorListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the <code>CellEditorListener</code>.
 @param l the listener to be added

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellEditor.removeCellEditorListener(CellEditorListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the previously added <code>CellEditorListener</code>.
 @param l the listener to be removed

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.CellEditorListener[] javax.swing.tree.DefaultTreeCellEditor.getCellEditorListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the <code>CellEditorListener</code>s added
 to this DefaultTreeCellEditor with addCellEditorListener().

 @return all of the <code>CellEditorListener</code>s added or an empty
         array if no listeners have been added
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellEditor.valueChanged(TreeSelectionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets <code>lastPath</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellEditor.actionPerformed(ActionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Messaged when the timer fires, this will start the editing
 session.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeCellEditor.setTree(JTree newTree)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the tree currently editing for. This is needed to add
 a selection listener.
 @param newTree the new tree to be edited

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.DefaultTreeCellEditor.shouldStartEditingTimer(EventObject event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if <code>event</code> is a <code>MouseEvent</code>
 and the click count is 1.
 @param event  the event being studied

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeCellEditor.startEditingTimer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Starts the editing timer.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.DefaultTreeCellEditor.canEditImmediately(EventObject event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if <code>event</code> is <code>null</code>,
 or it is a <code>MouseEvent</code> with a click count > 2
 and <code>inHitRegion</code> returns true.
 @param event the event being studied

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.DefaultTreeCellEditor.inHitRegion(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the passed in location is a valid mouse location
 to start editing from. This is implemented to return false if
 <code>x</code> is <= the width of the icon and icon gap displayed
 by the renderer. In other words this returns true if the user
 clicks over the text part displayed by the renderer, and false
 otherwise.
 @param x the x-coordinate of the point
 @param y the y-coordinate of the point
 @return true if the passed in location is a valid mouse location

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeCellEditor.prepareForEditing()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked just before editing is to start. Will add the
 <code>editingComponent</code> to the
 <code>editingContainer</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Container javax.swing.tree.DefaultTreeCellEditor.createContainer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the container to manage placement of 
 <code>editingComponent</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeCellEditor javax.swing.tree.DefaultTreeCellEditor.createTreeCellEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This is invoked if a <code>TreeCellEditor</code>
 is not supplied in the constructor.
 It returns a <code>TextField</code> editor.
 @return a new <code>TextField</code> editor

<!-- END DATA -->
