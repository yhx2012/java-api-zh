<!-- BEGIN KEY -->
public class javax.swing.tree.VariableHeightLayoutCache extends javax.swing.tree.AbstractLayoutCache
<!-- END KEY -->
<!-- BEGIN DATA -->
 NOTE: This will become more open in a future release.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @version 1.22 11/17/05
 @author Rob Davis
 @author Ray Ryan
 @author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.setModel(TreeModel newModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>TreeModel</code> that will provide the data.

 @param newModel the <code>TreeModel</code> that is to provide the data
 @beaninfo
        bound: true
  description: The TreeModel that will provide the data.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.setRootVisible(boolean rootVisible)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines whether or not the root node from
 the <code>TreeModel</code> is visible.

 @param rootVisible true if the root node of the tree is to be displayed
 @see #rootVisible
 @beaninfo
        bound: true
  description: Whether or not the root node
               from the TreeModel is visible.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.setRowHeight(int rowHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the height of each cell.  If the specified value
 is less than or equal to zero the current cell renderer is
 queried for each row's height.

 @param rowHeight the height of each cell, in pixels
 @beaninfo
        bound: true
  description: The height of each cell.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.setNodeDimensions(AbstractLayoutCache.NodeDimensions nd)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the renderer that is responsible for drawing nodes in the tree.
 @param nd the renderer

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.setExpandedState(TreePath path, boolean isExpanded)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Marks the path <code>path</code> expanded state to
 <code>isExpanded</code>.
 @param path the <code>TreePath</code> of interest
 @param isExpanded true if the path should be expanded, otherwise false

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.VariableHeightLayoutCache.getExpandedState(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the path is expanded, and visible.
 @return true if the path is expanded and visible, otherwise false

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.tree.VariableHeightLayoutCache.getBounds(TreePath path, Rectangle placeIn)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>Rectangle</code> enclosing the label portion
 into which the item identified by <code>path</code> will be drawn.

 @param path  the path to be drawn
 @param placeIn the bounds of the enclosing rectangle
 @return the bounds of the enclosing rectangle or <code>null</code>
    if the node could not be ascertained

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.tree.VariableHeightLayoutCache.getPathForRow(int row)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the path for <code>row</code>.  If <code>row</code>
 is not visible, <code>null</code> is returned.

 @param row the location of interest
 @return the path for <code>row</code>, or <code>null</code>
 if <code>row</code> is not visible

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.VariableHeightLayoutCache.getRowForPath(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the row where the last item identified in path is visible.
 Will return -1 if any of the elements in path are not
 currently visible.
 
 @param path the <code>TreePath</code> of interest
 @return the row where the last item in path is visible

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.VariableHeightLayoutCache.getRowCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of visible rows.
 @return the number of visible rows

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.invalidatePathBounds(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Instructs the <code>LayoutCache</code> that the bounds for
 <code>path</code> are invalid, and need to be updated.

 @param path the <code>TreePath</code> which is now invalid

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.VariableHeightLayoutCache.getPreferredHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the preferred height.
 @return the preferred height

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.VariableHeightLayoutCache.getPreferredWidth(Rectangle bounds)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the preferred width and height for the region in
 <code>visibleRegion</code>.

 @param bounds  the region being queried

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.tree.VariableHeightLayoutCache.getPathClosestTo(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the path to the node that is closest to x,y.  If
 there is nothing currently visible this will return <code>null</code>,
 otherwise it will always return a valid path. 
 If you need to test if the
 returned object is exactly at x, y you should get the bounds for
 the returned path and test x, y against that.

 @param x  the x-coordinate 
 @param y  the y-coordinate 
 @return the path to the node that is closest to x, y

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<javax.swing.tree.TreePath> javax.swing.tree.VariableHeightLayoutCache.getVisiblePathsFrom(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an <code>Enumerator</code> that increments over the visible paths
 starting at the passed in location. The ordering of the enumeration
 is based on how the paths are displayed.

 @param path the location in the <code>TreePath</code> to start
 @return an <code>Enumerator</code> that increments over the visible
     paths

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.VariableHeightLayoutCache.getVisibleChildCount(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of visible children for <code>path</code>.
 @return the number of visible children for <code>path</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.invalidateSizes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Informs the <code>TreeState</code> that it needs to recalculate
 all the sizes it is referencing.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.VariableHeightLayoutCache.isExpanded(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the value identified by <code>path</code> is
 currently expanded.
 @return true if the value identified by <code>path</code> is
    currently expanded

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.treeNodesChanged(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked after a node (or a set of siblings) has changed in some
 way. The node(s) have not changed locations in the tree or
 altered their children arrays, but other attributes have
 changed and may affect presentation. Example: the name of a
 file has changed, but it is in the same location in the file
 system.

 <p><code>e.path</code> returns the path the parent of the
 changed node(s).

 <p><code>e.childIndices</code> returns the index(es) of the
 changed node(s).

 @param e the <code>TreeModelEvent</code> of interest

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.treeNodesInserted(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked after nodes have been inserted into the tree.

 <p><code>e.path</code> returns the parent of the new nodes.
 <p><code>e.childIndices</code> returns the indices of the new nodes in
 ascending order.

 @param e the <code>TreeModelEvent</code> of interest

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.treeNodesRemoved(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked after nodes have been removed from the tree.  Note that
 if a subtree is removed from the tree, this method may only be
 invoked once for the root of the removed subtree, not once for
 each individual set of siblings removed.

 <p><code>e.path</code> returns the former parent of the deleted nodes.

 <p><code>e.childIndices</code> returns the indices the nodes had
 before they were deleted in ascending order.

 @param e the <code>TreeModelEvent</code> of interest

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.VariableHeightLayoutCache.treeStructureChanged(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked after the tree has drastically changed structure from a
 given node down.  If the path returned by <code>e.getPath</code>
 is of length one and the first element does not identify the
 current root node the first element should become the new root
 of the tree.

 <p><code>e.path</code> holds the path to the node.
 <p><code>e.childIndices</code> returns <code>null</code>.

 @param e the <code>TreeModelEvent</code> of interest

<!-- END DATA -->
