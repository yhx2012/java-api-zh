<!-- BEGIN KEY -->
public class javax.swing.tree.DefaultTreeSelectionModel extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable, javax.swing.tree.TreeSelectionModel
<!-- END KEY -->
<!-- BEGIN DATA -->
 Default implementation of TreeSelectionModel.  Listeners are notified
 whenever
 the paths in the selection change, not the rows. In order
 to be able to track row changes you may wish to become a listener 
 for expansion events on the tree and test for changes from there.
 <p>resetRowSelection is called from any of the methods that update
 the selected paths. If you subclass any of these methods to
 filter what is allowed to be selected, be sure and message
 <code>resetRowSelection</code> if you do not message super.
 
 <p>
 
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @see javax.swing.JTree

 @version 1.51 11/17/05
 @author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.tree.DefaultTreeSelectionModel.SELECTION_MODE_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
Property name for selectionMode. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.SwingPropertyChangeSupport javax.swing.tree.DefaultTreeSelectionModel.changeSupport
<!-- END KEY -->
<!-- BEGIN DATA -->
Used to messaged registered listeners. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreePath[] javax.swing.tree.DefaultTreeSelectionModel.selection
<!-- END KEY -->
<!-- BEGIN DATA -->
Paths that are currently selected.  Will be null if nothing is
 currently selected. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.EventListenerList javax.swing.tree.DefaultTreeSelectionModel.listenerList
<!-- END KEY -->
<!-- BEGIN DATA -->
Event listener list. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.tree.RowMapper javax.swing.tree.DefaultTreeSelectionModel.rowMapper
<!-- END KEY -->
<!-- BEGIN DATA -->
Provides a row for a given path. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.DefaultListSelectionModel javax.swing.tree.DefaultTreeSelectionModel.listSelectionModel
<!-- END KEY -->
<!-- BEGIN DATA -->
Handles maintaining the list selection model. The RowMapper is used
 to map from a TreePath to a row, and the value is then placed here. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.tree.DefaultTreeSelectionModel.selectionMode
<!-- END KEY -->
<!-- BEGIN DATA -->
Mode for the selection, will be either SINGLE_TREE_SELECTION,
 CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreePath javax.swing.tree.DefaultTreeSelectionModel.leadPath
<!-- END KEY -->
<!-- BEGIN DATA -->
Last path that was added. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.tree.DefaultTreeSelectionModel.leadIndex
<!-- END KEY -->
<!-- BEGIN DATA -->
Index of the lead path in selection. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.tree.DefaultTreeSelectionModel.leadRow
<!-- END KEY -->
<!-- BEGIN DATA -->
Lead row. 
<!-- END DATA -->
<!-- BEGIN KEY -->
private java.util.Hashtable javax.swing.tree.DefaultTreeSelectionModel.uniquePaths
<!-- END KEY -->
<!-- BEGIN DATA -->
Used to make sure the paths are unique, will contain all the paths
 in <code>selection</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.DefaultTreeSelectionModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new instance of DefaultTreeSelectionModel that is
 empty, with a selection mode of DISCONTIGUOUS_TREE_SELECTION.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeSelectionModel.setRowMapper(RowMapper newMapper)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the RowMapper instance. This instance is used to determine
 the row for a particular TreePath.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.RowMapper javax.swing.tree.DefaultTreeSelectionModel.getRowMapper()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the RowMapper instance that is able to map a TreePath to a
 row.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeSelectionModel.setSelectionMode(int mode)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the selection model, which must be one of SINGLE_TREE_SELECTION,
 CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION. If mode
 is not one of the defined value,
 <code>DISCONTIGUOUS_TREE_SELECTION</code> is assumed.
 <p>This may change the selection if the current selection is not valid
 for the new mode. For example, if three TreePaths are 
 selected when the mode is changed to <code>SINGLE_TREE_SELECTION</code>,
 only one TreePath will remain selected. It is up to the particular
 implementation to decide what TreePath remains selected.
 <p>
 Setting the mode to something other than the defined types will
 result in the mode becoming <code>DISCONTIGUOUS_TREE_SELECTION</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.DefaultTreeSelectionModel.getSelectionMode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the selection mode, one of <code>SINGLE_TREE_SELECTION</code>,
 <code>DISCONTIGUOUS_TREE_SELECTION</code> or 
 <code>CONTIGUOUS_TREE_SELECTION</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeSelectionModel.setSelectionPath(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the selection to path. If this represents a change, then
 the TreeSelectionListeners are notified. If <code>path</code> is
 null, this has the same effect as invoking <code>clearSelection</code>.

 @param path new path to select

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeSelectionModel.setSelectionPaths(javax.swing.tree.TreePath[] pPaths)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the selection to the paths in paths.  If this represents a
 change the TreeSelectionListeners are notified.  Potentially
 paths will be held by this object; in other words don't change
 any of the objects in the array once passed in.
 <p>If <code>paths</code> is
 null, this has the same effect as invoking <code>clearSelection</code>.
 <p>The lead path is set to the last path in <code>pPaths</code>.
 <p>If the selection mode is <code>CONTIGUOUS_TREE_SELECTION</code>,
 and adding the new paths would make the selection discontiguous,
 the selection is reset to the first TreePath in <code>paths</code>.

 @param pPaths new selection

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeSelectionModel.addSelectionPath(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds path to the current selection. If path is not currently
 in the selection the TreeSelectionListeners are notified. This has
 no effect if <code>path</code> is null.

 @param path the new path to add to the current selection

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeSelectionModel.addSelectionPaths(javax.swing.tree.TreePath[] paths)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds paths to the current selection. If any of the paths in
 paths are not currently in the selection the TreeSelectionListeners
 are notified. This has
 no effect if <code>paths</code> is null.
 <p>The lead path is set to the last element in <code>paths</code>.
 <p>If the selection mode is <code>CONTIGUOUS_TREE_SELECTION</code>,
 and adding the new paths would make the selection discontiguous.
 Then two things can result: if the TreePaths in <code>paths</code>
 are contiguous, then the selection becomes these TreePaths,
 otherwise the TreePaths aren't contiguous and the selection becomes
 the first TreePath in <code>paths</code>.

 @param paths the new path to add to the current selection

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeSelectionModel.removeSelectionPath(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes path from the selection. If path is in the selection
 The TreeSelectionListeners are notified. This has no effect if
 <code>path</code> is null.

 @param path the path to remove from the selection

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeSelectionModel.removeSelectionPaths(javax.swing.tree.TreePath[] paths)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes paths from the selection.  If any of the paths in paths
 are in the selection the TreeSelectionListeners are notified.
 This has no effect if <code>paths</code> is null.

 @param paths the paths to remove from the selection

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.tree.DefaultTreeSelectionModel.getSelectionPath()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the first path in the selection. This is useful if there
 if only one item currently selected.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath[] javax.swing.tree.DefaultTreeSelectionModel.getSelectionPaths()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the paths in the selection. This will return null (or an
 empty array) if nothing is currently selected.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.DefaultTreeSelectionModel.getSelectionCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of paths that are selected.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.DefaultTreeSelectionModel.isPathSelected(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the path, <code>path</code>,
 is in the current selection.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.DefaultTreeSelectionModel.isSelectionEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the selection is currently empty.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeSelectionModel.clearSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Empties the current selection.  If this represents a change in the
 current selection, the selection listeners are notified.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeSelectionModel.addTreeSelectionListener(TreeSelectionListener x)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds x to the list of listeners that are notified each time the
 set of selected TreePaths changes.

 @param x the new listener to be added

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeSelectionModel.removeTreeSelectionListener(TreeSelectionListener x)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes x from the list of listeners that are notified each time
 the set of selected TreePaths changes.

 @param x the listener to remove

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.TreeSelectionListener[] javax.swing.tree.DefaultTreeSelectionModel.getTreeSelectionListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the tree selection listeners 
 registered on this model.

 @return all of this model's <code>TreeSelectionListener</code>s 
         or an empty
         array if no tree selection listeners are currently registered

 @see #addTreeSelectionListener
 @see #removeTreeSelectionListener

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeSelectionModel.fireValueChanged(TreeSelectionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that are registered for
 tree selection events on this object.  
 @see #addTreeSelectionListener
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] javax.swing.tree.DefaultTreeSelectionModel.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the objects currently registered
 as <code><em>Foo</em>Listener</code>s
 upon this model.
 <code><em>Foo</em>Listener</code>s are registered using the
 <code>add<em>Foo</em>Listener</code> method.

 <p>

 You can specify the <code>listenerType</code> argument
 with a class literal,
 such as
 <code><em>Foo</em>Listener.class</code>.
 For example, you can query a
 <code>DefaultTreeSelectionModel</code> <code>m</code>
 for its tree selection listeners with the following code:

 <pre>TreeSelectionListener[] tsls = (TreeSelectionListener[])(m.getListeners(TreeSelectionListener.class));</pre>

 If no such listeners exist, this method returns an empty array.

 @param listenerType the type of listeners requested; this parameter
          should specify an interface that descends from
          <code>java.util.EventListener</code>
 @return an array of all objects registered as
          <code><em>Foo</em>Listener</code>s on this component,
          or an empty array if no such
          listeners have been added
 @exception ClassCastException if <code>listenerType</code>
          doesn't specify a class or interface that implements
          <code>java.util.EventListener</code>

 @see #getTreeSelectionListeners
 @see #getPropertyChangeListeners

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] javax.swing.tree.DefaultTreeSelectionModel.getSelectionRows()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns all of the currently selected rows. This will return
 null (or an empty array) if there are no selected TreePaths or
 a RowMapper has not been set.
 This may return an array of length less that than of the selected
 TreePaths if some of the rows are not visible (that is the
 RowMapper returned -1 for the row corresponding to the TreePath).

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.DefaultTreeSelectionModel.getMinSelectionRow()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the smallest value obtained from the RowMapper for the
 current set of selected TreePaths. If nothing is selected,
 or there is no RowMapper, this will return -1.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.DefaultTreeSelectionModel.getMaxSelectionRow()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the largest value obtained from the RowMapper for the
 current set of selected TreePaths. If nothing is selected,
 or there is no RowMapper, this will return -1.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.DefaultTreeSelectionModel.isRowSelected(int row)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the row identified by <code>row</code> is selected.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeSelectionModel.resetRowSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Updates this object's mapping from TreePath to rows. This should
 be invoked when the mapping from TreePaths to integers has changed
 (for example, a node has been expanded).
 <p>You do not normally have to call this, JTree and its associated
 Listeners will invoke this for you. If you are implementing your own
 View class, then you will have to invoke this.
 <p>This will invoke <code>insureRowContinuity</code> to make sure
 the currently selected TreePaths are still valid based on the
 selection mode.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.DefaultTreeSelectionModel.getLeadSelectionRow()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the lead selection index. That is the last index that was
 added.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.tree.DefaultTreeSelectionModel.getLeadSelectionPath()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the last path that was added. This may differ from the 
 leadSelectionPath property maintained by the JTree.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.tree.DefaultTreeSelectionModel.addPropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a PropertyChangeListener to the listener list.
 The listener is registered for all properties.
 <p>
 A PropertyChangeEvent will get fired when the selection mode
 changes.

 @param listener  the PropertyChangeListener to be added

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.tree.DefaultTreeSelectionModel.removePropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a PropertyChangeListener from the listener list.
 This removes a PropertyChangeListener that was registered
 for all properties.

 @param listener  the PropertyChangeListener to be removed

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.PropertyChangeListener[] javax.swing.tree.DefaultTreeSelectionModel.getPropertyChangeListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the property change listeners 
 registered on this <code>DefaultTreeSelectionModel</code>.

 @return all of this model's <code>PropertyChangeListener</code>s 
         or an empty
         array if no property change listeners are currently registered

 @see #addPropertyChangeListener
 @see #removePropertyChangeListener

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeSelectionModel.insureRowContinuity()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Makes sure the currently selected <code>TreePath</code>s are valid
 for the current selection mode.
 If the selection mode is <code>CONTIGUOUS_TREE_SELECTION</code>
 and a <code>RowMapper</code> exists, this will make sure all
 the rows are contiguous, that is, when sorted all the rows are
 in order with no gaps.
 If the selection isn't contiguous, the selection is
 reset to contain the first set, when sorted, of contiguous rows.
 <p>
 If the selection mode is <code>SINGLE_TREE_SELECTION</code> and
 more than one TreePath is selected, the selection is reset to
 contain the first path currently selected.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.DefaultTreeSelectionModel.arePathsContiguous(javax.swing.tree.TreePath[] paths)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the paths are contiguous,
 or this object has no RowMapper.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.DefaultTreeSelectionModel.canPathsBeAdded(javax.swing.tree.TreePath[] paths)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Used to test if a particular set of <code>TreePath</code>s can
 be added. This will return true if <code>paths</code> is null (or
 empty), or this object has no RowMapper, or nothing is currently selected,
 or the selection mode is <code>DISCONTIGUOUS_TREE_SELECTION</code>, or
 adding the paths to the current selection still results in a
 contiguous set of <code>TreePath</code>s.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.DefaultTreeSelectionModel.canPathsBeRemoved(javax.swing.tree.TreePath[] paths)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the paths can be removed without breaking the
 continuity of the model.
 This is rather expensive.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeSelectionModel.notifyPathChange(java.util.Vector<javax.swing.tree.PathPlaceHolder> changedPaths, TreePath oldLeadSelection)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies listeners of a change in path. changePaths should contain
 instances of PathPlaceHolder.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeSelectionModel.updateLeadIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Updates the leadIndex instance variable.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeSelectionModel.insureUniqueness()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method is obsolete and its implementation is now a noop.  It's
 still called by setSelectionPaths and addSelectionPaths, but only
 for backwards compatability.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.tree.DefaultTreeSelectionModel.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string that displays and identifies this
 object's properties.

 @return a String representation of this object

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.tree.DefaultTreeSelectionModel.clone() throws java.lang.CloneNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a clone of this object with the same selection.
 This method does not duplicate
 selection listeners and property listeners.

 @exception CloneNotSupportedException never thrown by instances of
                                       this class

<!-- END DATA -->
