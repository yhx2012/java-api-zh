<!-- BEGIN KEY -->
public class javax.swing.tree.FixedHeightLayoutCache extends javax.swing.tree.AbstractLayoutCache
<!-- END KEY -->
<!-- BEGIN DATA -->
 NOTE: This will become more open in a future release.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @version 1.25 11/17/05
 @author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.FixedHeightLayoutCache.setModel(TreeModel newModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the TreeModel that will provide the data.

 @param newModel the TreeModel that is to provide the data

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.FixedHeightLayoutCache.setRootVisible(boolean rootVisible)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines whether or not the root node from
 the TreeModel is visible.

 @param rootVisible true if the root node of the tree is to be displayed
 @see #rootVisible

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.FixedHeightLayoutCache.setRowHeight(int rowHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the height of each cell. If rowHeight is less than or equal to
 0 this will throw an IllegalArgumentException.

 @param rowHeight the height of each cell, in pixels

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.FixedHeightLayoutCache.getRowCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of visible rows.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.FixedHeightLayoutCache.invalidatePathBounds(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Does nothing, FixedHeightLayoutCache doesn't cache width, and that
 is all that could change.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.FixedHeightLayoutCache.invalidateSizes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Informs the TreeState that it needs to recalculate all the sizes
 it is referencing.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.FixedHeightLayoutCache.isExpanded(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the value identified by row is currently expanded.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.tree.FixedHeightLayoutCache.getBounds(TreePath path, Rectangle placeIn)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a rectangle giving the bounds needed to draw path.

 @param path     a TreePath specifying a node
 @param placeIn  a Rectangle object giving the available space
 @return a Rectangle object specifying the space to be used

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.tree.FixedHeightLayoutCache.getPathForRow(int row)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the path for passed in row.  If row is not visible
 null is returned.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.FixedHeightLayoutCache.getRowForPath(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the row that the last item identified in path is visible
 at.  Will return -1 if any of the elements in path are not
 currently visible.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.tree.FixedHeightLayoutCache.getPathClosestTo(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the path to the node that is closest to x,y.  If
 there is nothing currently visible this will return null, otherwise
 it'll always return a valid path.  If you need to test if the
 returned object is exactly at x, y you should get the bounds for
 the returned path and test x, y against that.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.FixedHeightLayoutCache.getVisibleChildCount(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of visible children for row.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<javax.swing.tree.TreePath> javax.swing.tree.FixedHeightLayoutCache.getVisiblePathsFrom(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an Enumerator that increments over the visible paths
 starting at the passed in location. The ordering of the enumeration
 is based on how the paths are displayed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.FixedHeightLayoutCache.setExpandedState(TreePath path, boolean isExpanded)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Marks the path <code>path</code> expanded state to
 <code>isExpanded</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.FixedHeightLayoutCache.getExpandedState(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the path is expanded, and visible.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.FixedHeightLayoutCache.treeNodesChanged(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Invoked after a node (or a set of siblings) has changed in some
 way. The node(s) have not changed locations in the tree or
 altered their children arrays, but other attributes have
 changed and may affect presentation. Example: the name of a
 file has changed, but it is in the same location in the file
 system.</p>

 <p>e.path() returns the path the parent of the changed node(s).</p>

 <p>e.childIndices() returns the index(es) of the changed node(s).</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.FixedHeightLayoutCache.treeNodesInserted(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Invoked after nodes have been inserted into the tree.</p>

 <p>e.path() returns the parent of the new nodes
 <p>e.childIndices() returns the indices of the new nodes in
 ascending order.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.FixedHeightLayoutCache.treeNodesRemoved(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Invoked after nodes have been removed from the tree.  Note that
 if a subtree is removed from the tree, this method may only be
 invoked once for the root of the removed subtree, not once for
 each individual set of siblings removed.</p>

 <p>e.path() returns the former parent of the deleted nodes.</p>

 <p>e.childIndices() returns the indices the nodes had before they were deleted in ascending order.</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.FixedHeightLayoutCache.treeStructureChanged(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Invoked after the tree has drastically changed structure from a
 given node down.  If the path returned by e.getPath() is of length
 one and the first element does not identify the current root node
 the first element should become the new root of the tree.<p>

 <p>e.path() holds the path to the node.</p>
 <p>e.childIndices() returns null.</p>

<!-- END DATA -->
