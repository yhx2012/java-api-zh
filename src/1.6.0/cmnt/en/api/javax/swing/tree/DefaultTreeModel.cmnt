<!-- BEGIN KEY -->
public class javax.swing.tree.DefaultTreeModel extends java.lang.Object implements java.io.Serializable, javax.swing.tree.TreeModel
<!-- END KEY -->
<!-- BEGIN DATA -->
 A simple tree data model that uses TreeNodes.
 For further information and examples that use DefaultTreeModel,
 see <a href="http://java.sun.com/docs/books/tutorial/uiswing/components/tree.html">How to Use Trees</a>
 in <em>The Java Tutorial.</em>
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @version 1.57 04/12/06
 @author Rob Davis
 @author Ray Ryan
 @author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeNode javax.swing.tree.DefaultTreeModel.root
<!-- END KEY -->
<!-- BEGIN DATA -->
Root of the tree. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.EventListenerList javax.swing.tree.DefaultTreeModel.listenerList
<!-- END KEY -->
<!-- BEGIN DATA -->
Listeners. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.DefaultTreeModel.asksAllowsChildren
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines how the <code>isLeaf</code> method figures
 out if a node is a leaf node. If true, a node is a leaf 
 node if it does not allow children. (If it allows 
 children, it is not a leaf node, even if no children
 are present.) That lets you distinguish between <i>folder</i>
 nodes and <i>file</i> nodes in a file system, for example.
 <p>
 If this value is false, then any node which has no 
 children is a leaf node, and any node may acquire 
 children.

 @see TreeNode#getAllowsChildren
 @see TreeModel#isLeaf
 @see #setAsksAllowsChildren

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.DefaultTreeModel(TreeNode root)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a tree in which any node can have children.

 @param root a TreeNode object that is the root of the tree
 @see #DefaultTreeModel(TreeNode, boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.DefaultTreeModel(TreeNode root, boolean asksAllowsChildren)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a tree specifying whether any node can have children,
 or whether only certain nodes can have children.

 @param root a TreeNode object that is the root of the tree
 @param asksAllowsChildren a boolean, false if any node can
        have children, true if each node is asked to see if
        it can have children
 @see #asksAllowsChildren

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.setAsksAllowsChildren(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets whether or not to test leafness by asking getAllowsChildren()
 or isLeaf() to the TreeNodes.  If newvalue is true, getAllowsChildren()
 is messaged, otherwise isLeaf() is messaged.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.DefaultTreeModel.asksAllowsChildren()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tells how leaf nodes are determined.

 @return true if only nodes which do not allow children are
         leaf nodes, false if nodes which have no children
         (even if allowed) are leaf nodes
 @see #asksAllowsChildren

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.setRoot(TreeNode root)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the root to <code>root</code>. A null <code>root</code> implies
 the tree is to display nothing, and is legal.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.tree.DefaultTreeModel.getRoot()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the root of the tree.  Returns null only if the tree has
 no nodes.

 @return  the root of the tree

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.DefaultTreeModel.getIndexOfChild(Object parent, Object child)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the index of child in parent.
 If either the parent or child is <code>null</code>, returns -1.
 @param parent a note in the tree, obtained from this data source
 @param child the node we are interested in
 @return the index of the child in the parent, or -1
    if either the parent or the child is <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.tree.DefaultTreeModel.getChild(Object parent, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the child of <I>parent</I> at index <I>index</I> in the parent's
 child array.  <I>parent</I> must be a node previously obtained from
 this data source. This should not return null if <i>index</i>
 is a valid index for <i>parent</i> (that is <i>index</i> >= 0 &&
 <i>index</i> < getChildCount(<i>parent</i>)).

 @param   parent  a node in the tree, obtained from this data source
 @return  the child of <I>parent</I> at index <I>index</I>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.DefaultTreeModel.getChildCount(Object parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of children of <I>parent</I>.  Returns 0 if the node
 is a leaf or if it has no children.  <I>parent</I> must be a node
 previously obtained from this data source.

 @param   parent  a node in the tree, obtained from this data source
 @return  the number of children of the node <I>parent</I>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.DefaultTreeModel.isLeaf(Object node)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns whether the specified node is a leaf node.
 The way the test is performed depends on the
 <code>askAllowsChildren</code> setting.

 @param node the node to check
 @return true if the node is a leaf node

 @see #asksAllowsChildren
 @see TreeModel#isLeaf

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.reload()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoke this method if you've modified the {@code TreeNode}s upon which
 this model depends. The model will notify all of its listeners that the
 model has changed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.valueForPathChanged(TreePath path, Object newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This sets the user object of the TreeNode identified by path
 and posts a node changed.  If you use custom user objects in
 the TreeModel you're going to need to subclass this and
 set the user object of the changed node to something meaningful.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.insertNodeInto(MutableTreeNode newChild, MutableTreeNode parent, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked this to insert newChild at location index in parents children.
 This will then message nodesWereInserted to create the appropriate
 event. This is the preferred way to add children as it will create
 the appropriate event.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.removeNodeFromParent(MutableTreeNode node)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Message this to remove node from its parent. This will message
 nodesWereRemoved to create the appropriate event. This is the
 preferred way to remove a node as it handles the event creation
 for you.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.nodeChanged(TreeNode node)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoke this method after you've changed how node is to be
 represented in the tree.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.reload(TreeNode node)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoke this method if you've modified the {@code TreeNode}s upon which
 this model depends. The model will notify all of its listeners that the
 model has changed below the given node.

 @param node the node below which the model has changed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.nodesWereInserted(TreeNode node, int[] childIndices)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoke this method after you've inserted some TreeNodes into
 node.  childIndices should be the index of the new elements and
 must be sorted in ascending order.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.nodesWereRemoved(TreeNode node, int[] childIndices, java.lang.Object[] removedChildren)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoke this method after you've removed some TreeNodes from
 node.  childIndices should be the index of the removed elements and
 must be sorted in ascending order. And removedChildren should be
 the array of the children objects that were removed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.nodesChanged(TreeNode node, int[] childIndices)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoke this method after you've changed how the children identified by
 childIndicies are to be represented in the tree.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.nodeStructureChanged(TreeNode node)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoke this method if you've totally changed the children of
 node and its childrens children...  This will post a
 treeStructureChanged event.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreeNode[] javax.swing.tree.DefaultTreeModel.getPathToRoot(TreeNode aNode)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Builds the parents of node up to and including the root node,
 where the original node is the last element in the returned array.
 The length of the returned array gives the node's depth in the
 tree.
 
 @param aNode the TreeNode to get the path for

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeNode[] javax.swing.tree.DefaultTreeModel.getPathToRoot(TreeNode aNode, int depth)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Builds the parents of node up to and including the root node,
 where the original node is the last element in the returned array.
 The length of the returned array gives the node's depth in the
 tree.
 
 @param aNode  the TreeNode to get the path for
 @param depth  an int giving the number of steps already taken towards
        the root (on recursive calls), used to size the returned array
 @return an array of TreeNodes giving the path from the root to the
         specified node 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.addTreeModelListener(TreeModelListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a listener for the TreeModelEvent posted after the tree changes.

 @see     #removeTreeModelListener
 @param   l       the listener to add

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeModel.removeTreeModelListener(TreeModelListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a listener previously added with <B>addTreeModelListener()</B>.

 @see     #addTreeModelListener
 @param   l       the listener to remove

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.TreeModelListener[] javax.swing.tree.DefaultTreeModel.getTreeModelListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the tree model listeners
 registered on this model.

 @return all of this model's <code>TreeModelListener</code>s
         or an empty
         array if no tree model listeners are currently registered

 @see #addTreeModelListener
 @see #removeTreeModelListener

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeModel.fireTreeNodesChanged(Object source, java.lang.Object[] path, int[] childIndices, java.lang.Object[] children)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.  The event instance 
 is lazily created using the parameters passed into 
 the fire method.

 @param source the node being changed
 @param path the path to the root node
 @param childIndices the indices of the changed elements
 @param children the changed elements
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeModel.fireTreeNodesInserted(Object source, java.lang.Object[] path, int[] childIndices, java.lang.Object[] children)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.  The event instance 
 is lazily created using the parameters passed into 
 the fire method.

 @param source the node where new elements are being inserted
 @param path the path to the root node
 @param childIndices the indices of the new elements
 @param children the new elements
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeModel.fireTreeNodesRemoved(Object source, java.lang.Object[] path, int[] childIndices, java.lang.Object[] children)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.  The event instance 
 is lazily created using the parameters passed into 
 the fire method.

 @param source the node where elements are being removed
 @param path the path to the root node
 @param childIndices the indices of the removed elements
 @param children the removed elements
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeModel.fireTreeStructureChanged(Object source, java.lang.Object[] path, int[] childIndices, java.lang.Object[] children)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.  The event instance 
 is lazily created using the parameters passed into 
 the fire method.

 @param source the node where the tree model has changed
 @param path the path to the root node
 @param childIndices the indices of the affected elements
 @param children the affected elements
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] javax.swing.tree.DefaultTreeModel.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the objects currently registered
 as <code><em>Foo</em>Listener</code>s
 upon this model.
 <code><em>Foo</em>Listener</code>s are registered using the
 <code>add<em>Foo</em>Listener</code> method.

 <p>

 You can specify the <code>listenerType</code> argument
 with a class literal,
 such as
 <code><em>Foo</em>Listener.class</code>.
 For example, you can query a
 <code>DefaultTreeModel</code> <code>m</code>
 for its tree model listeners with the following code:

 <pre>TreeModelListener[] tmls = (TreeModelListener[])(m.getListeners(TreeModelListener.class));</pre>

 If no such listeners exist, this method returns an empty array.

 @param listenerType the type of listeners requested; this parameter
          should specify an interface that descends from
          <code>java.util.EventListener</code>
 @return an array of all objects registered as
          <code><em>Foo</em>Listener</code>s on this component,
          or an empty array if no such
          listeners have been added
 @exception ClassCastException if <code>listenerType</code>
          doesn't specify a class or interface that implements
          <code>java.util.EventListener</code>

 @see #getTreeModelListeners
 
 @since 1.3

<!-- END DATA -->
