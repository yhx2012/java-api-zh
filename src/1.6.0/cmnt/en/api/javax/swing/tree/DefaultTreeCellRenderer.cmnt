<!-- BEGIN KEY -->
public class javax.swing.tree.DefaultTreeCellRenderer extends javax.swing.JLabel implements javax.swing.tree.TreeCellRenderer
<!-- END KEY -->
<!-- BEGIN DATA -->
 Displays an entry in a tree.
 <code>DefaultTreeCellRenderer</code> is not opaque and
 unless you subclass paint you should not change this.
 See <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/components/tree.html">How to Use Trees</a> 
 in <em>The Java Tutorial</em>
 for examples of customizing node display using this class.
 <p>                                                                        
 
 <strong><a name="override">Implementation Note:</a></strong>
 This class overrides
 <code>invalidate</code>,
 <code>validate</code>,
 <code>revalidate</code>,
 <code>repaint</code>,
 and
 <code>firePropertyChange</code>
 solely to improve performance.
 If not overridden, these frequently called methods would execute code paths
 that are unnecessary for the default tree cell renderer.
 If you write your own renderer,
 take care to weigh the benefits and
 drawbacks of overriding these methods.

 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.
 
 @version 1.60 11/17/05
 @author Rob Davis
 @author Ray Ryan
 @author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.DefaultTreeCellRenderer.selected
<!-- END KEY -->
<!-- BEGIN DATA -->
Is the value currently selected. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.tree.DefaultTreeCellRenderer.hasFocus
<!-- END KEY -->
<!-- BEGIN DATA -->
True if has focus. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.closedIcon
<!-- END KEY -->
<!-- BEGIN DATA -->
Icon used to show non-leaf nodes that aren't expanded. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.leafIcon
<!-- END KEY -->
<!-- BEGIN DATA -->
Icon used to show leaf nodes. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.openIcon
<!-- END KEY -->
<!-- BEGIN DATA -->
Icon used to show non-leaf nodes that are expanded. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.textSelectionColor
<!-- END KEY -->
<!-- BEGIN DATA -->
Color to use for the foreground for selected nodes. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.textNonSelectionColor
<!-- END KEY -->
<!-- BEGIN DATA -->
Color to use for the foreground for non-selected nodes. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.backgroundSelectionColor
<!-- END KEY -->
<!-- BEGIN DATA -->
Color to use for the background when a node is selected. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.backgroundNonSelectionColor
<!-- END KEY -->
<!-- BEGIN DATA -->
Color to use for the background when the node isn't selected. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.borderSelectionColor
<!-- END KEY -->
<!-- BEGIN DATA -->
Color to use for the focus indicator when the node has focus. 
<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.JTree javax.swing.tree.DefaultTreeCellRenderer.tree
<!-- END KEY -->
<!-- BEGIN DATA -->
Last tree the renderer was painted in. 
<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean javax.swing.tree.DefaultTreeCellRenderer.drawsFocusBorderAroundIcon
<!-- END KEY -->
<!-- BEGIN DATA -->
True if draws focus border around icon as well. 
<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean javax.swing.tree.DefaultTreeCellRenderer.drawDashedFocusIndicator
<!-- END KEY -->
<!-- BEGIN DATA -->
If true, a dashed line is drawn as the focus indicator. 
<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.treeBGColor
<!-- END KEY -->
<!-- BEGIN DATA -->
 Background color of the tree.

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.focusBGColor
<!-- END KEY -->
<!-- BEGIN DATA -->
 Color to draw the focus indicator in, determined from the background.
 color.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.DefaultTreeCellRenderer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a new instance of DefaultTreeCellRenderer.  Alignment is
 set to left aligned. Icons and text color are determined from the
 UIManager.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.getDefaultOpenIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the default icon, for the current laf, that is used to
 represent non-leaf nodes that are expanded.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.getDefaultClosedIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the default icon, for the current laf, that is used to
 represent non-leaf nodes that are not expanded.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.getDefaultLeafIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the default icon, for the current laf, that is used to
 represent leaf nodes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.setOpenIcon(Icon newIcon)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the icon used to represent non-leaf nodes that are expanded.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.getOpenIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the icon used to represent non-leaf nodes that are expanded.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.setClosedIcon(Icon newIcon)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the icon used to represent non-leaf nodes that are not expanded.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.getClosedIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the icon used to represent non-leaf nodes that are not
 expanded.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.setLeafIcon(Icon newIcon)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the icon used to represent leaf nodes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.getLeafIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the icon used to represent leaf nodes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.setTextSelectionColor(Color newColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the color the text is drawn with when the node is selected.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.getTextSelectionColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the color the text is drawn with when the node is selected.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.setTextNonSelectionColor(Color newColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the color the text is drawn with when the node isn't selected.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.getTextNonSelectionColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the color the text is drawn with when the node isn't selected.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.setBackgroundSelectionColor(Color newColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the color to use for the background if node is selected.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.getBackgroundSelectionColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the color to use for the background if node is selected.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.setBackgroundNonSelectionColor(Color newColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the background color to be used for non selected nodes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.getBackgroundNonSelectionColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the background color to be used for non selected nodes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.setBorderSelectionColor(Color newColor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the color to use for the border.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.getBorderSelectionColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the color the border is drawn.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.setFont(Font font)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Subclassed to map <code>FontUIResource</code>s to null. If 
 <code>font</code> is null, or a <code>FontUIResource</code>, this
 has the effect of letting the font of the JTree show
 through. On the other hand, if <code>font</code> is non-null, and not
 a <code>FontUIResource</code>, the font becomes <code>font</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font javax.swing.tree.DefaultTreeCellRenderer.getFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the font of this component.
 @return this component's font; if a font has not been set
 for this component, the font of its parent is returned

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.setBackground(Color color)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Subclassed to map <code>ColorUIResource</code>s to null. If 
 <code>color</code> is null, or a <code>ColorUIResource</code>, this
 has the effect of letting the background color of the JTree show
 through. On the other hand, if <code>color</code> is non-null, and not
 a <code>ColorUIResource</code>, the background becomes
 <code>color</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.tree.DefaultTreeCellRenderer.getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Configures the renderer based on the passed in components.
 The value is set from messaging the tree with
 <code>convertValueToText</code>, which ultimately invokes
 <code>toString</code> on <code>value</code>.
 The foreground color is set based on the selection and the icon
 is set based on the <code>leaf</code> and <code>expanded</code>
 parameters.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.paint(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paints the value.  The background is filled based on selected.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.tree.DefaultTreeCellRenderer.getPreferredSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>JComponent.getPreferredSize</code> to
 return slightly wider preferred size value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.validate()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overridden for performance reasons.
 See the <a href="#override">Implementation Note</a>
 for more information.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.invalidate()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overridden for performance reasons.
 See the <a href="#override">Implementation Note</a>
 for more information.

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.revalidate()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overridden for performance reasons.
 See the <a href="#override">Implementation Note</a>
 for more information.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.repaint(long tm, int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overridden for performance reasons.
 See the <a href="#override">Implementation Note</a>
 for more information.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.repaint(Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overridden for performance reasons.
 See the <a href="#override">Implementation Note</a>
 for more information.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.repaint()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overridden for performance reasons.
 See the <a href="#override">Implementation Note</a>
 for more information.

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String propertyName, Object oldValue, Object newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overridden for performance reasons.
 See the <a href="#override">Implementation Note</a>
 for more information.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String propertyName, byte oldValue, byte newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overridden for performance reasons.
 See the <a href="#override">Implementation Note</a>
 for more information.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String propertyName, char oldValue, char newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overridden for performance reasons.
 See the <a href="#override">Implementation Note</a>
 for more information.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String propertyName, short oldValue, short newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overridden for performance reasons.
 See the <a href="#override">Implementation Note</a>
 for more information.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String propertyName, int oldValue, int newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overridden for performance reasons.
 See the <a href="#override">Implementation Note</a>
 for more information.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String propertyName, long oldValue, long newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overridden for performance reasons.
 See the <a href="#override">Implementation Note</a>
 for more information.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String propertyName, float oldValue, float newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overridden for performance reasons.
 See the <a href="#override">Implementation Note</a>
 for more information.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String propertyName, double oldValue, double newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overridden for performance reasons.
 See the <a href="#override">Implementation Note</a>
 for more information.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String propertyName, boolean oldValue, boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overridden for performance reasons.
 See the <a href="#override">Implementation Note</a>
 for more information.

<!-- END DATA -->
