<!-- BEGIN KEY -->
public class javax.swing.tree.TreePath extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 Represents a path to a node. A TreePath is an array of Objects that are
 vended from a TreeModel. The elements of the array are ordered such
 that the root is always the first element (index 0) of the array.
 TreePath is Serializable, but if any 
 components of the path are not serializable, it will not be written 
 out.
 <p>
 For further information and examples of using tree paths,
 see <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/components/tree.html">How to Use Trees</a>
 in <em>The Java Tutorial.</em>
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @version 1.31 11/17/05
 @author Scott Violet
 @author Philip Milne

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.tree.TreePath javax.swing.tree.TreePath.parentPath
<!-- END KEY -->
<!-- BEGIN DATA -->
Path representing the parent, null if lastPathComponent represents
 the root. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath(java.lang.Object[] path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a path from an array of Objects, uniquely identifying 
 the path from the root of the tree to a specific node, as returned
 by the tree's data model.
 <p>
 The model is free to return an array of any Objects it needs to 
 represent the path. The DefaultTreeModel returns an array of 
 TreeNode objects. The first TreeNode in the path is the root of the
 tree, the last TreeNode is the node identified by the path.

 @param path  an array of Objects representing the path to a node

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath(Object singlePath)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a TreePath containing only a single element. This is
 usually used to construct a TreePath for the the root of the TreeModel.
 <p>
 @param singlePath  an Object representing the path to a node
 @see #TreePath(Object[])

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreePath(TreePath parent, Object lastElement)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new TreePath, which is the path identified by
 <code>parent</code> ending in <code>lastElement</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreePath(java.lang.Object[] path, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new TreePath with the identified path components of
 length <code>length</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreePath()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Primarily provided for subclasses 
 that represent paths in a different manner.
 If a subclass uses this constructor, it should also override 
 the <code>getPath</code>,
 <code>getPathCount</code>, and
 <code>getPathComponent</code> methods,
 and possibly the <code>equals</code> method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] javax.swing.tree.TreePath.getPath()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an ordered array of Objects containing the components of this
 TreePath. The first element (index 0) is the root.

 @return an array of Objects representing the TreePath
 @see #TreePath(Object[])

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.tree.TreePath.getLastPathComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the last component of this path. For a path returned by
 DefaultTreeModel this will return an instance of TreeNode.

 @return the Object at the end of the path
 @see #TreePath(Object[])

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.TreePath.getPathCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of elements in the path.

 @return an int giving a count of items the path

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.tree.TreePath.getPathComponent(int element)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the path component at the specified index.

 @param element  an int specifying an element in the path, where
                 0 is the first element in the path
 @return the Object at that index location
 @throws IllegalArgumentException if the index is beyond the length
         of the path
 @see #TreePath(Object[])

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.TreePath.equals(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tests two TreePaths for equality by checking each element of the
 paths for equality. Two paths are considered equal if they are of
 the same length, and contain
 the same elements (<code>.equals</code>).

 @param o the Object to compare

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.tree.TreePath.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the hashCode for the object. The hash code of a TreePath
 is defined to be the hash code of the last component in the path.

 @return the hashCode for the object

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.tree.TreePath.isDescendant(TreePath aTreePath)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if <code>aTreePath</code> is a
 descendant of this
 TreePath. A TreePath P1 is a descendant of a TreePath P2
 if P1 contains all of the components that make up 
 P2's path.
 For example, if this object has the path [a, b],
 and <code>aTreePath</code> has the path [a, b, c], 
 then <code>aTreePath</code> is a descendant of this object.
 However, if <code>aTreePath</code> has the path [a],
 then it is not a descendant of this object.  By this definition
 a TreePath is always considered a descendant of itself.  That is,
 <code>aTreePath.isDescendant(aTreePath)</code> returns true.

 @return true if <code>aTreePath</code> is a descendant of this path

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.tree.TreePath.pathByAddingChild(Object child)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a new path containing all the elements of this object
 plus <code>child</code>. <code>child</code> will be the last element
 of the newly created TreePath.
 This will throw a NullPointerException
 if child is null.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.tree.TreePath.getParentPath()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a path containing all the elements of this object, except
 the last path component.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.tree.TreePath.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string that displays and identifies this
 object's properties.

 @return a String representation of this object

<!-- END DATA -->
