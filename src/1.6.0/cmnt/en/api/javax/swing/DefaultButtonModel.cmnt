<!-- BEGIN KEY -->
public class javax.swing.DefaultButtonModel extends java.lang.Object implements javax.swing.ButtonModel, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 The default implementation of a <code>Button</code> component's data model.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing. As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @version 1.49 05/25/06
 @author Jeff Dinkins

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.DefaultButtonModel.stateMask
<!-- END KEY -->
<!-- BEGIN DATA -->
The bitmask used to store the state of the button. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.DefaultButtonModel.actionCommand
<!-- END KEY -->
<!-- BEGIN DATA -->
The action command string fired by the button. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.ButtonGroup javax.swing.DefaultButtonModel.group
<!-- END KEY -->
<!-- BEGIN DATA -->
The button group that the button belongs to. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.DefaultButtonModel.mnemonic
<!-- END KEY -->
<!-- BEGIN DATA -->
The button's mnemonic. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.event.ChangeEvent javax.swing.DefaultButtonModel.changeEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
 Only one <code>ChangeEvent</code> is needed per button model
 instance since the event's only state is the source property.
 The source of events generated is always "this".

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.EventListenerList javax.swing.DefaultButtonModel.listenerList
<!-- END KEY -->
<!-- BEGIN DATA -->
Stores the listeners on this model. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.DefaultButtonModel.ARMED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Identifies the "armed" bit in the bitmask, which
 indicates partial commitment towards choosing/triggering
 the button.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.DefaultButtonModel.SELECTED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Identifies the "selected" bit in the bitmask, which
 indicates that the button has been selected. Only needed for
 certain types of buttons - such as radio button or check box.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.DefaultButtonModel.PRESSED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Identifies the "pressed" bit in the bitmask, which
 indicates that the button is pressed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.DefaultButtonModel.ENABLED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Identifies the "enabled" bit in the bitmask, which
 indicates that the button can be selected by
 an input device (such as a mouse pointer).

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.DefaultButtonModel.ROLLOVER
<!-- END KEY -->
<!-- BEGIN DATA -->
 Identifies the "rollover" bit in the bitmask, which
 indicates that the mouse is over the button.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.DefaultButtonModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>DefaultButtonModel</code>.


<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultButtonModel.setActionCommand(String actionCommand)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.DefaultButtonModel.getActionCommand()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultButtonModel.isArmed()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultButtonModel.isSelected()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultButtonModel.isEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultButtonModel.isPressed()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultButtonModel.isRollover()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultButtonModel.setArmed(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultButtonModel.setEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultButtonModel.setSelected(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultButtonModel.setPressed(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultButtonModel.setRollover(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultButtonModel.setMnemonic(int key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultButtonModel.getMnemonic()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultButtonModel.addChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultButtonModel.removeChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.ChangeListener[] javax.swing.DefaultButtonModel.getChangeListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the change listeners
 registered on this <code>DefaultButtonModel</code>.

 @return all of this model's <code>ChangeListener</code>s 
         or an empty
         array if no change listeners are currently registered
 
 @see #addChangeListener
 @see #removeChangeListener
 
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.DefaultButtonModel.fireStateChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.  The event instance 
 is created lazily.

 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultButtonModel.addActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultButtonModel.removeActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ActionListener[] javax.swing.DefaultButtonModel.getActionListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the action listeners
 registered on this <code>DefaultButtonModel</code>.

 @return all of this model's <code>ActionListener</code>s 
         or an empty
         array if no action listeners are currently registered

 @see #addActionListener
 @see #removeActionListener

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.DefaultButtonModel.fireActionPerformed(ActionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.

 @param e the <code>ActionEvent</code> to deliver to listeners
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultButtonModel.addItemListener(ItemListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultButtonModel.removeItemListener(ItemListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ItemListener[] javax.swing.DefaultButtonModel.getItemListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the item listeners
 registered on this <code>DefaultButtonModel</code>.

 @return all of this model's <code>ItemListener</code>s 
         or an empty
         array if no item listeners are currently registered

 @see #addItemListener
 @see #removeItemListener

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.DefaultButtonModel.fireItemStateChanged(ItemEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.  

 @param e the <code>ItemEvent</code> to deliver to listeners
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] javax.swing.DefaultButtonModel.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the objects currently registered as
 <code><em>Foo</em>Listener</code>s
 upon this model.
 <code><em>Foo</em>Listener</code>s
 are registered using the <code>add<em>Foo</em>Listener</code> method.
 <p>
 You can specify the <code>listenerType</code> argument
 with a class literal, such as <code><em>Foo</em>Listener.class</code>.
 For example, you can query a <code>DefaultButtonModel</code>
 instance <code>m</code>
 for its action listeners
 with the following code:

 <pre>ActionListener[] als = (ActionListener[])(m.getListeners(ActionListener.class));</pre>

 If no such listeners exist,
 this method returns an empty array.

 @param listenerType  the type of listeners requested;
          this parameter should specify an interface
          that descends from <code>java.util.EventListener</code>
 @return an array of all objects registered as
          <code><em>Foo</em>Listener</code>s
          on this model,
          or an empty array if no such
          listeners have been added
 @exception ClassCastException if <code>listenerType</code> doesn't
          specify a class or interface that implements
          <code>java.util.EventListener</code>

 @see #getActionListeners
 @see #getChangeListeners
 @see #getItemListeners

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] javax.swing.DefaultButtonModel.getSelectedObjects()
<!-- END KEY -->
<!-- BEGIN DATA -->
Overridden to return <code>null</code>. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultButtonModel.setGroup(ButtonGroup group)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ButtonGroup javax.swing.DefaultButtonModel.getGroup()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the group that the button belongs to.
 Normally used with radio buttons, which are mutually
 exclusive within their group.

 @return the <code>ButtonGroup</code> that the button belongs to

 @since 1.3

<!-- END DATA -->
