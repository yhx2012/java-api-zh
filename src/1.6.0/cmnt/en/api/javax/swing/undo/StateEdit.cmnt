<!-- BEGIN KEY -->
public class javax.swing.undo.StateEdit extends javax.swing.undo.AbstractUndoableEdit
<!-- END KEY -->
<!-- BEGIN DATA -->
 <P>StateEdit is a general edit for objects that change state.
 Objects being edited must conform to the StateEditable interface.</P>
 
 <P>This edit class works by asking an object to store it's state in
 Hashtables before and after editing occurs.  Upon undo or redo the
 object is told to restore it's state from these Hashtables.</P>
 
 A state edit is used as follows:
 <PRE>
	// Create the edit during the "before" state of the object
	StateEdit newEdit = new StateEdit(myObject);
	// Modify the object
	myObject.someStateModifyingMethod();
	// "end" the edit when you are done modifying the object
	newEdit.end();
 </PRE>
 
 <P><EM>Note that when a StateEdit ends, it removes redundant state from
 the Hashtables - A state Hashtable is not guaranteed to contain all
 keys/values placed into it when the state is stored!</EM></P>

 @see StateEditable

 @version 1.15 11/17/05
 @author Ray Ryan

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.undo.StateEditable javax.swing.undo.StateEdit.object
<!-- END KEY -->
<!-- BEGIN DATA -->
 The object being edited

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Hashtable<java.lang.Object, java.lang.Object> javax.swing.undo.StateEdit.preState
<!-- END KEY -->
<!-- BEGIN DATA -->
 The state information prior to the edit

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Hashtable<java.lang.Object, java.lang.Object> javax.swing.undo.StateEdit.postState
<!-- END KEY -->
<!-- BEGIN DATA -->
 The state information after the edit

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.undo.StateEdit.undoRedoName
<!-- END KEY -->
<!-- BEGIN DATA -->
 The undo/redo presentation name

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.undo.StateEdit(StateEditable anObject)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create and return a new StateEdit.

 @param anObject The object to watch for changing state

 @see StateEdit

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.undo.StateEdit(StateEditable anObject, String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create and return a new StateEdit with a presentation name.

 @param anObject The object to watch for changing state
 @param name The presentation name to be used for this edit

 @see StateEdit

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.undo.StateEdit.end()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the post-edit state of the StateEditable object and
 ends the edit.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.undo.StateEdit.undo()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tells the edited object to apply the state prior to the edit

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.undo.StateEdit.redo()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tells the edited object to apply the state after the edit

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.undo.StateEdit.getPresentationName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the presentation name for this edit

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.undo.StateEdit.removeRedundantState()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Remove redundant key/values in state hashtables.

<!-- END DATA -->
