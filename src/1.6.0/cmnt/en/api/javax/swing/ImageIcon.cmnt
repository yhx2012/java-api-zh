<!-- BEGIN KEY -->
public class javax.swing.ImageIcon extends java.lang.Object implements javax.swing.Icon, java.io.Serializable, javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
 An implementation of the Icon interface that paints Icons
 from Images. Images that are created from a URL, filename or byte array
 are preloaded using MediaTracker to monitor the loaded state
 of the image.

 <p>
 For further information and examples of using image icons, see
 <a href="http://java.sun.com/docs/books/tutorial/uiswing/misc/icon.html">How to Use Icons</a>
 in <em>The Java Tutorial.</em>

 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.
 
 @version 1.55 04/07/06
 @author Jeff Dinkins
 @author Lynn Monsanto

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.ImageIcon.AccessibleImageIcon javax.swing.ImageIcon.accessibleContext
<!-- END KEY -->
<!-- BEGIN DATA -->
 --- Accessibility Support ---

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ImageIcon(String filename, String description)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an ImageIcon from the specified file. The image will
 be preloaded by using MediaTracker to monitor the loading state
 of the image.
 @param filename the name of the file containing the image
 @param description a brief textual description of the image
 @see #ImageIcon(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ImageIcon(String filename)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an ImageIcon from the specified file. The image will
 be preloaded by using MediaTracker to monitor the loading state
 of the image. The specified String can be a file name or a
 file path. When specifying a path, use the Internet-standard
 forward-slash ("/") as a separator. 
 (The string is converted to an URL, so the forward-slash works
 on all systems.)
 For example, specify:
 <pre>
    new ImageIcon("images/myImage.gif") </pre>
 The description is initialized to the <code>filename</code> string.

 @param filename a String specifying a filename or path
 @see #getDescription

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ImageIcon(URL location, String description)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an ImageIcon from the specified URL. The image will
 be preloaded by using MediaTracker to monitor the loaded state
 of the image.
 @param location the URL for the image
 @param description a brief textual description of the image
 @see #ImageIcon(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ImageIcon(URL location)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an ImageIcon from the specified URL. The image will
 be preloaded by using MediaTracker to monitor the loaded state
 of the image.
 The icon's description is initialized to be 
 a string representation of the URL.
 @param location the URL for the image
 @see #getDescription

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ImageIcon(Image image, String description)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an ImageIcon from the image. 
 @param image the image
 @param description a brief textual description of the image

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ImageIcon(Image image)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an ImageIcon from an image object. 
 If the image has a "comment" property that is a string,
 then the string is used as the description of this icon.
 @param image the image
 @see #getDescription
 @see java.awt.Image#getProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ImageIcon(byte[] imageData, String description)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an ImageIcon from an array of bytes which were
 read from an image file containing a supported image format,
 such as GIF, JPEG, or (as of 1.3) PNG. 
 Normally this array is created
 by reading an image using Class.getResourceAsStream(), but
 the byte array may also be statically stored in a class.

 @param  imageData an array of pixels in an image format supported
         by the AWT Toolkit, such as GIF, JPEG, or (as of 1.3) PNG
 @param  description a brief textual description of the image
 @see    java.awt.Toolkit#createImage

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ImageIcon(byte[] imageData)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an ImageIcon from an array of bytes which were
 read from an image file containing a supported image format,
 such as GIF, JPEG, or (as of 1.3) PNG. 
 Normally this array is created
 by reading an image using Class.getResourceAsStream(), but
 the byte array may also be statically stored in a class.
 If the resulting image has a "comment" property that is a string,
 then the string is used as the description of this icon.

 @param  imageData an array of pixels in an image format supported by
             the AWT Toolkit, such as GIF, JPEG, or (as of 1.3) PNG
 @see    java.awt.Toolkit#createImage
 @see #getDescription
 @see java.awt.Image#getProperty

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ImageIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an uninitialized image icon.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.ImageIcon.loadImage(Image image)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Loads the image, returning only when the image is loaded.
 @param image the image

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ImageIcon.getImageLoadStatus()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the status of the image loading operation.
 @return the loading status as defined by java.awt.MediaTracker
 @see java.awt.MediaTracker#ABORTED
 @see java.awt.MediaTracker#ERRORED
 @see java.awt.MediaTracker#COMPLETE

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Image javax.swing.ImageIcon.getImage()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns this icon's <code>Image</code>.
 @return the <code>Image</code> object for this <code>ImageIcon</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ImageIcon.setImage(Image image)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the image displayed by this icon.
 @param image the image

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.ImageIcon.getDescription()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the description of the image.  This is meant to be a brief
 textual description of the object.  For example, it might be
 presented to a blind user to give an indication of the purpose
 of the image.
 The description may be null.

 @return a brief textual description of the image

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ImageIcon.setDescription(String description)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the description of the image.  This is meant to be a brief
 textual description of the object.  For example, it might be
 presented to a blind user to give an indication of the purpose
 of the image.
 @param description a brief textual description of the image

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.ImageIcon.paintIcon(Component c, Graphics g, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paints the icon.
 The top-left corner of the icon is drawn at 
 the point (<code>x</code>, <code>y</code>)
 in the coordinate space of the graphics context <code>g</code>.
 If this icon has no image observer,
 this method uses the <code>c</code> component
 as the observer.

 @param c the component to be used as the observer
          if this icon has no image observer
 @param g the graphics context 
 @param x the X coordinate of the icon's top-left corner
 @param y the Y coordinate of the icon's top-left corner

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ImageIcon.getIconWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the width of the icon.

 @return the width in pixels of this icon

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ImageIcon.getIconHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the height of the icon.

 @return the height in pixels of this icon

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ImageIcon.setImageObserver(ImageObserver observer)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Sets the image observer for the image.  Set this
 property if the ImageIcon contains an animated GIF, so
 the observer is notified to update its display.
 For example:
 <pre>
     icon = new ImageIcon(...)
     button.setIcon(icon);
     icon.setImageObserver(button);
 </pre>

 @param observer the image observer

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.ImageObserver javax.swing.ImageIcon.getImageObserver()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the image observer for the image.

 @return the image observer, which may be null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.ImageIcon.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this image.

 @return a string representing this image

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.ImageIcon.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Gets the AccessibleContext associated with this ImageIcon. 
 For image icons, the AccessibleContext takes the form of an 
 AccessibleImageIcon. 
 A new AccessibleImageIcon instance is created if necessary.

 @return an AccessibleImageIcon that serves as the 
         AccessibleContext of this ImageIcon
 @beaninfo
       expert: true
  description: The AccessibleContext associated with this ImageIcon.
 @since 1.3

<!-- END DATA -->
