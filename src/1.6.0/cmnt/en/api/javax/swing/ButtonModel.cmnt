<!-- BEGIN KEY -->
public interface javax.swing.ButtonModel extends java.awt.ItemSelectable
<!-- END KEY -->
<!-- BEGIN DATA -->
 State model for buttons.
 <p>
 This model is used for regular buttons, as well as check boxes
 and radio buttons, which are special kinds of buttons. In practice,
 a button's UI takes the responsibility of calling methods on its
 model to manage the state, as detailed below:
 <p>
 In simple terms, pressing and releasing the mouse over a regular
 button triggers the button and causes and <code>ActionEvent</code>
 to be fired. The same behavior can be produced via a keyboard key
 defined by the look and feel of the button (typically the SPACE BAR).
 Pressing and releasing this key while the button has
 focus will give the same results. For check boxes and radio buttons, the
 mouse or keyboard equivalent sequence just described causes the button
 to become selected.
 <p>
 In details, the state model for buttons works as follows
 when used with the mouse:
 <br>
 Pressing the mouse on top of a button makes the model both
 armed and pressed. As long as the mouse remains down,
 the model remains pressed, even if the mouse moves
 outside the button. On the contrary, the model is only
 armed while the mouse remains pressed within the bounds of
 the button (it can move in or out of the button, but the model
 is only armed during the portion of time spent within the button).
 A button is triggered, and an <code>ActionEvent</code> is fired,
 when the mouse is released while the model is armed
 - meaning when it is released over top of the button after the mouse
 has previously been pressed on that button (and not already released).
 Upon mouse release, the model becomes unarmed and unpressed.
 <p>
 In details, the state model for buttons works as follows
 when used with the keyboard:
 <br>
 Pressing the look and feel defined keyboard key while the button
 has focus makes the model both armed and pressed. As long as this key
 remains down, the model remains in this state. Releasing the key sets
 the model to unarmed and unpressed, triggers the button, and causes an
 <code>ActionEvent</code> to be fired.

 @version 1.29 02/14/06
 @author Jeff Dinkins

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.ButtonModel.isArmed()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates partial commitment towards triggering the
 button.

 @return <code>true</code> if the button is armed,
         and ready to be triggered
 @see #setArmed

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.ButtonModel.isSelected()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates if the button has been selected. Only needed for
 certain types of buttons - such as radio buttons and check boxes.

 @return <code>true</code> if the button is selected

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.ButtonModel.isEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates if the button can be selected or triggered by
 an input device, such as a mouse pointer.

 @return <code>true</code> if the button is enabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.ButtonModel.isPressed()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates if the button is pressed.

 @return <code>true</code> if the button is pressed

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.ButtonModel.isRollover()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates that the mouse is over the button.

 @return <code>true</code> if the mouse is over the button

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.setArmed(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Marks the button as armed or unarmed.
 
 @param b whether or not the button should be armed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.setSelected(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Selects or deselects the button.

 @param b <code>true</code> selects the button,
          <code>false</code> deselects the button

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.setEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Enables or disables the button.
 
 @param b whether or not the button should be enabled
 @see #isEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.setPressed(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the button to pressed or unpressed.
 
 @param b whether or not the button should be pressed
 @see #isPressed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.setRollover(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets or clears the button's rollover state
 
 @param b whether or not the button is in the rollover state
 @see #isRollover

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.setMnemonic(int key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the keyboard mnemonic (shortcut key or
 accelerator key) for the button.

 @param key an int specifying the accelerator key

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ButtonModel.getMnemonic()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the keyboard mnemonic for the button.

 @return an int specifying the accelerator key
 @see #setMnemonic

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.setActionCommand(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the action command string that gets sent as part of the
 <code>ActionEvent</code> when the button is triggered.

 @param s the <code>String</code> that identifies the generated event
 @see #getActionCommand
 @see java.awt.event.ActionEvent#getActionCommand

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.ButtonModel.getActionCommand()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the action command string for the button.

 @return the <code>String</code> that identifies the generated event
 @see #setActionCommand

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.setGroup(ButtonGroup group)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Identifies the group the button belongs to --
 needed for radio buttons, which are mutually
 exclusive within their group.

 @param group the <code>ButtonGroup</code> the button belongs to

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.addActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds an <code>ActionListener</code> to the model.

 @param l the listener to add

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.removeActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes an <code>ActionListener</code> from the model.

 @param l the listener to remove

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.addItemListener(ItemListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds an <code>ItemListener</code> to the model.

 @param l the listener to add

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.removeItemListener(ItemListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes an <code>ItemListener</code> from the model.

 @param l the listener to remove

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.addChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a <code>ChangeListener</code> to the model.

 @param l the listener to add

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonModel.removeChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a <code>ChangeListener</code> from the model.

 @param l the listener to remove

<!-- END DATA -->
