<!-- BEGIN KEY -->
public class javax.swing.JDesktopPane extends javax.swing.JLayeredPane implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
 A container used to create a multiple-document interface or a virtual desktop. 
 You create <code>JInternalFrame</code> objects and add them to the 
 <code>JDesktopPane</code>. <code>JDesktopPane</code> extends
 <code>JLayeredPane</code> to manage the potentially overlapping internal
 frames. It also maintains a reference to an instance of
 <code>DesktopManager</code> that is set by the UI 
 class for the current look and feel (L&F).  Note that <code>JDesktopPane</code>
 does not support borders.
 <p>
 This class is normally used as the parent of <code>JInternalFrames</code>
 to provide a pluggable <code>DesktopManager</code> object to the
 <code>JInternalFrames</code>. The <code>installUI</code> of the 
 L&F specific implementation is responsible for setting the
 <code>desktopManager</code> variable appropriately.
 When the parent of a <code>JInternalFrame</code> is a <code>JDesktopPane</code>, 
 it should delegate most of its behavior to the <code>desktopManager</code>
 (closing, resizing, etc).
 <p>
 For further documentation and examples see
 <a href="http://java.sun.com/docs/books/tutorial/uiswing/components/internalframe.html">How to Use Internal Frames</a>,
 a section in <em>The Java Tutorial</em>.
 <p>
 <strong>Warning:</strong> Swing is not thread safe. For more
 information see <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @see JInternalFrame
 @see JInternalFrame.JDesktopIcon
 @see DesktopManager

 @version 1.58 08/08/06
 @author David Kloba

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JDesktopPane.LIVE_DRAG_MODE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates that the entire contents of the item being dragged
 should appear inside the desktop pane.

 @see #OUTLINE_DRAG_MODE
 @see #setDragMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JDesktopPane.OUTLINE_DRAG_MODE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates that an outline only of the item being dragged
 should appear inside the desktop pane.

 @see #LIVE_DRAG_MODE
 @see #setDragMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JDesktopPane()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates a new <code>JDesktopPane</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.DesktopPaneUI javax.swing.JDesktopPane.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the L&F object that renders this component.

 @return the <code>DesktopPaneUI</code> object that
   renders this component

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDesktopPane.setUI(DesktopPaneUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the L&F object that renders this component.

 @param ui  the DesktopPaneUI L&F object
 @see UIDefaults#getUI
 @beaninfo
        bound: true
       hidden: true
    attribute: visualUpdate true
  description: The UI object that implements the Component's LookAndFeel. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDesktopPane.setDragMode(int dragMode)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Sets the "dragging style" used by the desktop pane. 
 You may want to change to one mode or another for
 performance or aesthetic reasons.

 @param dragMode the style of drag to use for items in the Desktop 

 @see #LIVE_DRAG_MODE
 @see #OUTLINE_DRAG_MODE

 @beaninfo
        bound: true
  description: Dragging style for internal frame children.
         enum: LIVE_DRAG_MODE JDesktopPane.LIVE_DRAG_MODE
               OUTLINE_DRAG_MODE JDesktopPane.OUTLINE_DRAG_MODE
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JDesktopPane.getDragMode()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Gets the current "dragging style" used by the desktop pane.
 @return either <code>Live_DRAG_MODE</code> or
   <code>OUTLINE_DRAG_MODE</code>
 @see #setDragMode
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.DesktopManager javax.swing.JDesktopPane.getDesktopManager()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the <code>DesktopManger</code> that handles
 desktop-specific UI actions.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDesktopPane.setDesktopManager(DesktopManager d)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>DesktopManger</code> that will handle
 desktop-specific UI actions.

 @param d the <code>DesktopManager</code> to use 

 @beaninfo
        bound: true
  description: Desktop manager to handle the internal frames in the
               desktop pane.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDesktopPane.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notification from the <code>UIManager</code> that the L&F has changed. 
 Replaces the current UI object with the latest version from the 
 <code>UIManager</code>.

 @see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JDesktopPane.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of the L&F class that renders this component.

 @return the string "DesktopPaneUI"
 @see JComponent#getUIClassID
 @see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JInternalFrame[] javax.swing.JDesktopPane.getAllFrames()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns all <code>JInternalFrames</code> currently displayed in the
 desktop. Returns iconified frames as well as expanded frames.

 @return an array of <code>JInternalFrame</code> objects

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JInternalFrame javax.swing.JDesktopPane.getSelectedFrame()
<!-- END KEY -->
<!-- BEGIN DATA -->
Returns the currently active <code>JInternalFrame</code>
 in this <code>JDesktopPane</code>, or <code>null</code>
 if no <code>JInternalFrame</code> is currently active.

 @return the currently active <code>JInternalFrame</code> or
   <code>null</code>
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDesktopPane.setSelectedFrame(JInternalFrame f)
<!-- END KEY -->
<!-- BEGIN DATA -->
Sets the currently active <code>JInternalFrame</code>
  in this <code>JDesktopPane</code>. This method is used to bridge
  the package gap between JDesktopPane and the platform implementation
  code and should not be called directly. To visually select the frame
  the client must call JInternalFrame.setSelected(true) to activate
  the frame.
  @see JInternalFrame#setSelected(boolean) 

 @param f the internal frame that's currently selected
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JInternalFrame[] javax.swing.JDesktopPane.getAllFramesInLayer(int layer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns all <code>JInternalFrames</code> currently displayed in the
 specified layer of the desktop. Returns iconified frames as well
 expanded frames.

 @param layer  an int specifying the desktop layer
 @return an array of <code>JInternalFrame</code> objects
 @see JLayeredPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JInternalFrame javax.swing.JDesktopPane.selectFrame(boolean forward)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Selects the next <code>JInternalFrame</code> in this desktop pane.

 @param forward a boolean indicating which direction to select in;
        <code>true</code> for forward, <code>false</code> for
        backward
 @return the JInternalFrame that was selected or <code>null</code>
         if nothing was selected
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JDesktopPane.addImpl(Component comp, Object constraints, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDesktopPane.remove(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDesktopPane.removeAll()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDesktopPane.setComponentZOrder(Component comp, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JDesktopPane.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this <code>JDesktopPane</code>.
 This method is intended to be used only for debugging purposes, and the 
 content and format of the returned string may vary between      
 implementations. The returned string may be empty but may not 
 be <code>null</code>.
 
 @return  a string representation of this <code>JDesktopPane</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JDesktopPane.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>AccessibleContext</code> associated with this
 <code>JDesktopPane</code>. For desktop panes, the
 <code>AccessibleContext</code> takes the form of an 
 <code>AccessibleJDesktopPane</code>. 
 A new <code>AccessibleJDesktopPane</code> instance is created if necessary.

 @return an <code>AccessibleJDesktopPane</code> that serves as the 
         <code>AccessibleContext</code> of this <code>JDesktopPane</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JDesktopPane.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 See readObject() and writeObject() in JComponent for more 
 information about serialization in Swing.

<!-- END DATA -->
