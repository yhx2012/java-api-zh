<!-- BEGIN KEY -->
public class javax.swing.OverlayLayout extends java.lang.Object implements java.awt.LayoutManager2, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A layout manager to arrange components over the top
 of each other.  The requested size of the container
 will be the largest requested size of the children, 
 taking alignment needs into consideration.  

 The alignment is based upon what is needed to properly
 fit the children in the allocation area.  The children
 will be placed such that their alignment points are all
 on top of each other.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @version 1.29 04/10/06
 @author   Timothy Prinzing

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.OverlayLayout(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a layout manager that performs overlay
 arrangement of the children.  The layout manager
 created is dedicated to the given container.

 @param target  the container to do layout against

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.awt.Container javax.swing.OverlayLayout.getTarget()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the container that uses this layout manager.

 @return the container that uses this layout manager

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.OverlayLayout.invalidateLayout(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates a child has changed its layout related information,
 which causes any cached calculations to be flushed.

 @param target the container

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.OverlayLayout.addLayoutComponent(String name, Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified component to the layout. Used by
 this class to know when to invalidate layout.

 @param name the name of the component
 @param comp the the component to be added

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.OverlayLayout.removeLayoutComponent(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified component from the layout. Used by
 this class to know when to invalidate layout.

 @param comp the component to remove

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.OverlayLayout.addLayoutComponent(Component comp, Object constraints)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified component to the layout, using the specified
 constraint object. Used by this class to know when to invalidate
 layout.

 @param comp the component to be added
 @param constraints  where/how the component is added to the layout.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.OverlayLayout.preferredLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the preferred dimensions for this layout given the components
 in the specified target container.  Recomputes the layout if it
 has been invalidated.  Factors in the current inset setting returned
 by getInsets().

 @param target the component which needs to be laid out
 @return a Dimension object containing the preferred dimensions
 @see #minimumLayoutSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.OverlayLayout.minimumLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the minimum dimensions needed to lay out the components
 contained in the specified target container.  Recomputes the layout
 if it has been invalidated, and factors in the current inset setting.

 @param target the component which needs to be laid out 
 @return a Dimension object containing the minimum dimensions
 @see #preferredLayoutSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.OverlayLayout.maximumLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the maximum dimensions needed to lay out the components
 contained in the specified target container.  Recomputes the
 layout if it has been invalidated, and factors in the inset setting
 returned by <code>getInset</code>.

 @param target the component that needs to be laid out 
 @return a <code>Dimension</code> object containing the maximum
         dimensions
 @see #preferredLayoutSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.OverlayLayout.getLayoutAlignmentX(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the alignment along the x axis for the container.

 @param target the container
 @return the alignment >= 0.0f && <= 1.0f

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.OverlayLayout.getLayoutAlignmentY(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the alignment along the y axis for the container.

 @param target the container
 @return the alignment >= 0.0f && <= 1.0f

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.OverlayLayout.layoutContainer(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called by the AWT when the specified container needs to be laid out.

 @param target  the container to lay out

 @exception AWTError  if the target isn't the container specified to the
                      constructor

<!-- END DATA -->
