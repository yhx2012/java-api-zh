<!-- BEGIN KEY -->
protected class javax.swing.JTable.AccessibleJTable extends javax.swing.JComponent.AccessibleJComponent implements javax.accessibility.AccessibleSelection, javax.swing.event.ListSelectionListener, javax.swing.event.TableModelListener, javax.swing.event.TableColumnModelListener, javax.swing.event.CellEditorListener, java.beans.PropertyChangeListener, javax.accessibility.AccessibleExtendedTable
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class implements accessibility support for the
 <code>JTable</code> class.  It provides an implementation of the
 Java Accessibility API appropriate to table user-interface elements.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JTable.AccessibleJTable()
<!-- END KEY -->
<!-- BEGIN DATA -->
 AccessibleJTable constructor

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.propertyChange(PropertyChangeEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Track changes to selection model, column model, etc. so as to
 be able to re-place listeners on those in order to pass on
 information to the Accessibility PropertyChange mechanism

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.tableChanged(TableModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Track changes to the table contents

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.tableRowsInserted(TableModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Track changes to the table contents (row insertions)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.tableRowsDeleted(TableModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Track changes to the table contents (row deletions)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.columnAdded(TableColumnModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Track changes to the table contents (column insertions)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.columnRemoved(TableColumnModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Track changes to the table contents (column deletions)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.columnMoved(TableColumnModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Track changes of a column repositioning.

 @see TableColumnModelListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.columnMarginChanged(ChangeEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Track changes of a column moving due to margin changes.

 @see TableColumnModelListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.columnSelectionChanged(ListSelectionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Track that the selection model of the TableColumnModel changed.

 @see TableColumnModelListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.editingStopped(ChangeEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Track changes to a cell's contents.

 Invoked when editing is finished. The changes are saved, the
 editor object is discarded, and the cell is rendered once again.

 @see CellEditorListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.editingCanceled(ChangeEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when editing is canceled. The editor object is discarded
 and the cell is rendered once again.

 @see CellEditorListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.valueChanged(ListSelectionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Track changes to table cell selections

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleSelection javax.swing.JTable.AccessibleJTable.getAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the AccessibleSelection associated with this object.  In the
 implementation of the Java Accessibility API for this class,
 return this object, which is responsible for implementing the
 AccessibleSelection interface on behalf of itself.

 @return this object

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleRole javax.swing.JTable.AccessibleJTable.getAccessibleRole()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the role of this object.

 @return an instance of AccessibleRole describing the role of the
 object
 @see AccessibleRole

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTable.AccessibleJTable.getAccessibleAt(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>Accessible</code> child, if one exists,
 contained at the local coordinate <code>Point</code>.

 @param p the point defining the top-left corner of the
    <code>Accessible</code>, given in the coordinate space
    of the object's parent
 @return the <code>Accessible</code>, if it exists,
    at the specified location; else <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.getAccessibleChildrenCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of accessible children in the object.  If all
 of the children of this object implement <code>Accessible</code>,
 then this method should return the number of children of this object.

 @return the number of accessible children in the object

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTable.AccessibleJTable.getAccessibleChild(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the nth <code>Accessible</code> child of the object.

 @param i zero-based index of child
 @return the nth Accessible child of the object

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.getAccessibleSelectionCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of <code>Accessible</code> children
 currently selected.
 If no children are selected, the return value will be 0.

 @return the number of items currently selected

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTable.AccessibleJTable.getAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an <code>Accessible</code> representing the
 specified selected child in the object.  If there
 isn't a selection, or there are fewer children selected
 than the integer passed in, the return
 value will be <code>null</code>.
 <p>Note that the index represents the i-th selected child, which
 is different from the i-th child.

 @param i the zero-based index of selected children
 @return the i-th selected child
 @see #getAccessibleSelectionCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JTable.AccessibleJTable.isAccessibleChildSelected(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines if the current child of this object is selected.

 @param i the zero-based index of the child in this
    <code>Accessible</code> object
 @return true if the current child of this object is selected
 @see AccessibleContext#getAccessibleChild

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.addAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified <code>Accessible</code> child of the
 object to the object's selection.  If the object supports
 multiple selections, the specified child is added to
 any existing selection, otherwise
 it replaces any existing selection in the object.  If the
 specified child is already selected, this method has no effect.
 <p>
 This method only works on <code>JTable</code>s which have
 individual cell selection enabled.

 @param i the zero-based index of the child
 @see AccessibleContext#getAccessibleChild

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.removeAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified child of the object from the object's
 selection.  If the specified item isn't currently selected, this
 method has no effect.
 <p>
 This method only works on <code>JTables</code> which have
 individual cell selection enabled.

 @param i the zero-based index of the child
 @see AccessibleContext#getAccessibleChild

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.clearAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Clears the selection in the object, so that no children in the
 object are selected.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.selectAllAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Causes every child of the object to be selected, but only
 if the <code>JTable</code> supports multiple selections,
 and if individual cell selection is enabled.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.getAccessibleRow(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the row number of an index in the table.

 @param index the zero-based index in the table
 @return the zero-based row of the table if one exists;
 otherwise -1.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.getAccessibleColumn(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the column number of an index in the table.

 @param index the zero-based index in the table
 @return the zero-based column of the table if one exists;
 otherwise -1.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.getAccessibleIndex(int r, int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the index at a row and column in the table.

 @param r zero-based row of the table
 @param c zero-based column of the table
 @return the zero-based index in the table if one exists;
 otherwise -1.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleTable javax.swing.JTable.AccessibleJTable.getAccessibleTable()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>AccessibleTable</code> associated with this
 object.  In the implementation of the Java Accessibility
 API for this class, return this object, which is responsible
 for implementing the <code>AccessibleTables</code> interface
 on behalf of itself.

 @return this object
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTable.AccessibleJTable.getAccessibleCaption()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the caption for the table.

 @return the caption for the table
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.setAccessibleCaption(Accessible a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the caption for the table.

 @param a the caption for the table
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTable.AccessibleJTable.getAccessibleSummary()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the summary description of the table.

 @return the summary description of the table
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.setAccessibleSummary(Accessible a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the summary description of the table.

 @param a the summary description of the table
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.getAccessibleRowExtentAt(int r, int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of rows occupied by the <code>Accessible</code>
 at a specified row and column in the table.

 @return the number of rows occupied by the <code>Accessible</code>
     at a specified row and column in the table
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.getAccessibleColumnExtentAt(int r, int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of columns occupied by the
 <code>Accessible</code> at a given (row, column).

 @return the number of columns occupied by the <code>Accessible</code>
     at a specified row and column in the table
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleTable javax.swing.JTable.AccessibleJTable.getAccessibleRowHeader()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the row headers as an <code>AccessibleTable</code>.

 @return an <code>AccessibleTable</code> representing the row
 headers
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.setAccessibleRowHeader(AccessibleTable a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the row headers as an <code>AccessibleTable</code>.

 @param a an <code>AccessibleTable</code> representing the row
  headers 
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleTable javax.swing.JTable.AccessibleJTable.getAccessibleColumnHeader()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the column headers as an <code>AccessibleTable</code>.

  @return an <code>AccessibleTable</code> representing the column
          headers, or <code>null</code> if the table header is
          <code>null</code>
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.setAccessibleColumnHeader(AccessibleTable a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the column headers as an <code>AccessibleTable</code>.

 @param a an <code>AccessibleTable</code> representing the
 column headers
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTable.AccessibleJTable.getAccessibleRowDescription(int r)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the description of the specified row in the table.

 @param r zero-based row of the table
 @return the description of the row
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.setAccessibleRowDescription(int r, Accessible a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the description text of the specified row of the table.

 @param r zero-based row of the table
 @param a the description of the row
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTable.AccessibleJTable.getAccessibleColumnDescription(int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the description of the specified column in the table.

 @param c zero-based column of the table
 @return the description of the column
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTable.AccessibleJTable.setAccessibleColumnDescription(int c, Accessible a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the description text of the specified column of the table.

 @param c zero-based column of the table
 @param a the description of the column
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JTable.AccessibleJTable.isAccessibleSelected(int r, int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a boolean value indicating whether the accessible at a
 given (row, column) is selected.

 @param r zero-based row of the table
 @param c zero-based column of the table
 @return the boolean value true if the accessible at (row, column)
     is selected; otherwise, the boolean value false
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JTable.AccessibleJTable.isAccessibleRowSelected(int r)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a boolean value indicating whether the specified row
 is selected.

 @param r zero-based row of the table
 @return the boolean value true if the specified row is selected;
     otherwise, false
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JTable.AccessibleJTable.isAccessibleColumnSelected(int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a boolean value indicating whether the specified column
 is selected.

 @param c zero-based column of the table
 @return the boolean value true if the specified column is selected;
     otherwise, false
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] javax.swing.JTable.AccessibleJTable.getSelectedAccessibleRows()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the selected rows in a table.

 @return an array of selected rows where each element is a
     zero-based row of the table
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] javax.swing.JTable.AccessibleJTable.getSelectedAccessibleColumns()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the selected columns in a table.

 @return an array of selected columns where each element is a
     zero-based column of the table
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.getAccessibleRowAtIndex(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the row at a given index into the table.

 @param i zero-based index into the table
 @return the row at a given index
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.getAccessibleColumnAtIndex(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the column at a given index into the table.

 @param i zero-based index into the table
 @return the column at a given index
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTable.AccessibleJTable.getAccessibleIndexAt(int r, int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the index at a given (row, column) in the table.

 @param r zero-based row of the table
 @param c zero-based column of the table
 @return the index into the table
 @since 1.3

<!-- END DATA -->
