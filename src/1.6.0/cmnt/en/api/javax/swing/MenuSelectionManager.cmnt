<!-- BEGIN KEY -->
public class javax.swing.MenuSelectionManager extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 A MenuSelectionManager owns the selection in menu hierarchy.
 
 @version 1.41 05/04/06
 @author Arnaud Weber

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.event.ChangeEvent javax.swing.MenuSelectionManager.changeEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
 Only one ChangeEvent is needed per button model instance since the
 event's only state is the source property.  The source of events
 generated is always "this".

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.MenuSelectionManager javax.swing.MenuSelectionManager.defaultManager()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the default menu selection manager.

 @return a MenuSelectionManager object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.MenuSelectionManager.setSelectedPath(javax.swing.MenuElement[] path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Changes the selection in the menu hierarchy.  The elements
 in the array are sorted in order from the root menu
 element to the currently selected menu element.
 <p>
 Note that this method is public but is used by the look and
 feel engine and should not be called by client applications.

 @param path  an array of <code>MenuElement</code> objects specifying
        the selected path

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.MenuElement[] javax.swing.MenuSelectionManager.getSelectedPath()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the path to the currently selected menu item

 @return an array of MenuElement objects representing the selected path

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.MenuSelectionManager.clearSelectedPath()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tell the menu selection to close and unselect all the menu components. Call this method
 when a choice has been made

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.MenuSelectionManager.addChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a ChangeListener to the button.

 @param l the listener to add

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.MenuSelectionManager.removeChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a ChangeListener from the button.

 @param l the listener to remove

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.ChangeListener[] javax.swing.MenuSelectionManager.getChangeListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the <code>ChangeListener</code>s added
 to this MenuSelectionManager with addChangeListener().

 @return all of the <code>ChangeListener</code>s added or an empty
         array if no listeners have been added
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.MenuSelectionManager.fireStateChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.  The event instance 
 is created lazily.

 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.MenuSelectionManager.processMouseEvent(MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 When a MenuElement receives an event from a MouseListener, it should never process the event
 directly. Instead all MenuElements should call this method with the event.

 @param event  a MouseEvent object

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.MenuSelectionManager.componentForPoint(Component source, Point sourcePoint)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the component in the currently selected path 
 which contains sourcePoint.

 @param source The component in whose coordinate space sourcePoint
        is given
 @param sourcePoint The point which is being tested
 @return The component in the currently selected path which
         contains sourcePoint (relative to the source component's 
         coordinate space.  If sourcePoint is not inside a component
         on the currently selected path, null is returned.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.MenuSelectionManager.processKeyEvent(KeyEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 When a MenuElement receives an event from a KeyListener, it should never process the event
 directly. Instead all MenuElements should call this method with the event.

 @param e  a KeyEvent object

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.MenuSelectionManager.isComponentPartOfCurrentMenu(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Return true if c is part of the currently used menu

<!-- END DATA -->
