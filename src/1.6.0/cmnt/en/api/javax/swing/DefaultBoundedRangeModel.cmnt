<!-- BEGIN KEY -->
public class javax.swing.DefaultBoundedRangeModel extends java.lang.Object implements javax.swing.BoundedRangeModel, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A generic implementation of BoundedRangeModel.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @version 1.48 03/01/06
 @author David Kloba
 @author Hans Muller
 @see BoundedRangeModel

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.event.ChangeEvent javax.swing.DefaultBoundedRangeModel.changeEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
 Only one <code>ChangeEvent</code> is needed per model instance since the
 event's only (read-only) state is the source property.  The source
 of events generated here is always "this".

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.EventListenerList javax.swing.DefaultBoundedRangeModel.listenerList
<!-- END KEY -->
<!-- BEGIN DATA -->
The listeners waiting for model changes. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.DefaultBoundedRangeModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Initializes all of the properties with default values.
 Those values are:
 <ul>
 <li><code>value</code> = 0
 <li><code>extent</code> = 0
 <li><code>minimum</code> = 0
 <li><code>maximum</code> = 100
 <li><code>adjusting</code> = false
 </ul>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.DefaultBoundedRangeModel(int value, int extent, int min, int max)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Initializes value, extent, minimum and maximum. Adjusting is false.
 Throws an <code>IllegalArgumentException</code> if the following
 constraints aren't satisfied:
 <pre>
 min &lt;= value &lt;= value+extent &lt;= max
 </pre>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultBoundedRangeModel.getValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the model's current value.
 @return the model's current value
 @see #setValue
 @see BoundedRangeModel#getValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultBoundedRangeModel.getExtent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the model's extent.
 @return the model's extent
 @see #setExtent
 @see BoundedRangeModel#getExtent

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultBoundedRangeModel.getMinimum()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the model's minimum.
 @return the model's minimum
 @see #setMinimum
 @see BoundedRangeModel#getMinimum

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.DefaultBoundedRangeModel.getMaximum()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the model's maximum.
 @return  the model's maximum
 @see #setMaximum
 @see BoundedRangeModel#getMaximum

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultBoundedRangeModel.setValue(int n)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Sets the current value of the model. For a slider, that
 determines where the knob appears. Ensures that the new 
 value, <I>n</I> falls within the model's constraints:
 <pre>
     minimum &lt;= value &lt;= value+extent &lt;= maximum
 </pre>
 
 @see BoundedRangeModel#setValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultBoundedRangeModel.setExtent(int n)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Sets the extent to <I>n</I> after ensuring that <I>n</I> 
 is greater than or equal to zero and falls within the model's 
 constraints:
 <pre>
     minimum &lt;= value &lt;= value+extent &lt;= maximum
 </pre>
 @see BoundedRangeModel#setExtent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultBoundedRangeModel.setMinimum(int n)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Sets the minimum to <I>n</I> after ensuring that <I>n</I> 
 that the other three properties obey the model's constraints:
 <pre>
     minimum &lt;= value &lt;= value+extent &lt;= maximum
 </pre>
 @see #getMinimum
 @see BoundedRangeModel#setMinimum

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultBoundedRangeModel.setMaximum(int n)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Sets the maximum to <I>n</I> after ensuring that <I>n</I> 
 that the other three properties obey the model's constraints:
 <pre>
     minimum &lt;= value &lt;= value+extent &lt;= maximum
 </pre>
 @see BoundedRangeModel#setMaximum

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultBoundedRangeModel.setValueIsAdjusting(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>valueIsAdjusting</code> property.
 
 @see #getValueIsAdjusting
 @see #setValue
 @see BoundedRangeModel#setValueIsAdjusting

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultBoundedRangeModel.getValueIsAdjusting()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the value is in the process of changing
 as a result of actions being taken by the user.

 @return the value of the <code>valueIsAdjusting</code> property
 @see #setValue
 @see BoundedRangeModel#getValueIsAdjusting

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultBoundedRangeModel.setRangeProperties(int newValue, int newExtent, int newMin, int newMax, boolean adjusting)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets all of the <code>BoundedRangeModel</code> properties after forcing
 the arguments to obey the usual constraints:
 <pre>
     minimum &lt;= value &lt;= value+extent &lt;= maximum
 </pre>
 <p>
 At most, one <code>ChangeEvent</code> is generated.
 
 @see BoundedRangeModel#setRangeProperties
 @see #setValue
 @see #setExtent
 @see #setMinimum
 @see #setMaximum
 @see #setValueIsAdjusting

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultBoundedRangeModel.addChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a <code>ChangeListener</code>.  The change listeners are run each
 time any one of the Bounded Range model properties changes.

 @param l the ChangeListener to add
 @see #removeChangeListener
 @see BoundedRangeModel#addChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultBoundedRangeModel.removeChangeListener(ChangeListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a <code>ChangeListener</code>.

 @param l the <code>ChangeListener</code> to remove
 @see #addChangeListener
 @see BoundedRangeModel#removeChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.ChangeListener[] javax.swing.DefaultBoundedRangeModel.getChangeListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the change listeners
 registered on this <code>DefaultBoundedRangeModel</code>.

 @return all of this model's <code>ChangeListener</code>s 
         or an empty
         array if no change listeners are currently registered

 @see #addChangeListener
 @see #removeChangeListener

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.DefaultBoundedRangeModel.fireStateChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Runs each <code>ChangeListener</code>'s <code>stateChanged</code> method.
 
 @see #setRangeProperties
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.DefaultBoundedRangeModel.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string that displays all of the 
 <code>BoundedRangeModel</code> properties.

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] javax.swing.DefaultBoundedRangeModel.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the objects currently registered as
 <code><em>Foo</em>Listener</code>s
 upon this model.
 <code><em>Foo</em>Listener</code>s
 are registered using the <code>add<em>Foo</em>Listener</code> method.
 <p>
 You can specify the <code>listenerType</code> argument
 with a class literal, such as <code><em>Foo</em>Listener.class</code>.
 For example, you can query a <code>DefaultBoundedRangeModel</code>
 instance <code>m</code>
 for its change listeners
 with the following code:

 <pre>ChangeListener[] cls = (ChangeListener[])(m.getListeners(ChangeListener.class));</pre>

 If no such listeners exist,
 this method returns an empty array.

 @param listenerType  the type of listeners requested;
          this parameter should specify an interface
          that descends from <code>java.util.EventListener</code>
 @return an array of all objects registered as
          <code><em>Foo</em>Listener</code>s
          on this model,
          or an empty array if no such
          listeners have been added
 @exception ClassCastException if <code>listenerType</code> doesn't
          specify a class or interface that implements
          <code>java.util.EventListener</code>

 @see #getChangeListeners

 @since 1.3

<!-- END DATA -->
