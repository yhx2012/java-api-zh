<!-- BEGIN KEY -->
public class javax.swing.JFileChooser extends javax.swing.JComponent implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>JFileChooser</code> provides a simple mechanism for the user to
 choose a file.
 For information about using <code>JFileChooser</code>, see
 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/components/filechooser.html">How to Use File Choosers</a>,
 a section in <em>The Java Tutorial</em>.

 <p>

 The following code pops up a file chooser for the user's home directory that
 sees only .jpg and .gif images:
 <pre>
    JFileChooser chooser = new JFileChooser();
    FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "JPG & GIF Images", "jpg", "gif");
    chooser.setFileFilter(filter);
    int returnVal = chooser.showOpenDialog(parent);
    if(returnVal == JFileChooser.APPROVE_OPTION) {
       System.out.println("You chose to open this file: " +
            chooser.getSelectedFile().getName());
    }
 </pre>
 <p>
 <strong>Warning:</strong> Swing is not thread safe. For more
 information see <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>.

 @beaninfo
   attribute: isContainer false
 description: A component which allows for the interactive selection of a file.

 @version 1.116 08/08/06
 @author Jeff Dinkins


<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JFileChooser.OPEN_DIALOG
<!-- END KEY -->
<!-- BEGIN DATA -->
 Type value indicating that the <code>JFileChooser</code> supports an 
 "Open" file operation.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JFileChooser.SAVE_DIALOG
<!-- END KEY -->
<!-- BEGIN DATA -->
 Type value indicating that the <code>JFileChooser</code> supports a
 "Save" file operation.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JFileChooser.CUSTOM_DIALOG
<!-- END KEY -->
<!-- BEGIN DATA -->
 Type value indicating that the <code>JFileChooser</code> supports a
 developer-specified file operation.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JFileChooser.CANCEL_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return value if cancel is chosen.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JFileChooser.APPROVE_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return value if approve (yes, ok) is chosen.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JFileChooser.ERROR_OPTION
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return value if an error occured.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JFileChooser.FILES_ONLY
<!-- END KEY -->
<!-- BEGIN DATA -->
Instruction to display only files. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JFileChooser.DIRECTORIES_ONLY
<!-- END KEY -->
<!-- BEGIN DATA -->
Instruction to display only directories. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.JFileChooser.FILES_AND_DIRECTORIES
<!-- END KEY -->
<!-- BEGIN DATA -->
Instruction to display both files and directories. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.CANCEL_SELECTION
<!-- END KEY -->
<!-- BEGIN DATA -->
Instruction to cancel the current selection. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.APPROVE_SELECTION
<!-- END KEY -->
<!-- BEGIN DATA -->
 Instruction to approve the current selection
 (same as pressing yes or ok).

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.APPROVE_BUTTON_TEXT_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies change in the text on the approve (yes, ok) button. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
 Identifies change in the tooltip text for the approve (yes, ok)
 button.  

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies change in the mnemonic for the approve (yes, ok) button. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
Instruction to display the control buttons. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.DIRECTORY_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies user's directory change. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.SELECTED_FILE_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies change in user's single-file selection. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.SELECTED_FILES_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies change in user's multiple-file selection. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.MULTI_SELECTION_ENABLED_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
Enables multiple-file selections. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.FILE_SYSTEM_VIEW_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
 Says that a different object is being used to find available drives
 on the system. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.FILE_VIEW_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
 Says that a different object is being used to retrieve file
 information. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.FILE_HIDING_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies a change in the display-hidden-files property. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.FILE_FILTER_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
User changed the kind of files to display. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.FILE_SELECTION_MODE_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
 Identifies a change in the kind of selection (single,
 multiple, etc.). 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.ACCESSORY_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
 Says that a different accessory component is in use
 (for example, to preview files). 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
 Identifies whether a the AcceptAllFileFilter is used or not. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.DIALOG_TITLE_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies a change in the dialog title. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.DIALOG_TYPE_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
 Identifies a change in the type of files displayed (files only,
 directories only, or both files and directories). 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JFileChooser.CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->

 Identifies a change in the list of predefined file filters
 the user can choose from.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFileChooser()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>JFileChooser</code> pointing to the user's
 default directory. This default depends on the operating system.
 It is typically the "My Documents" folder on Windows, and the
 user's home directory on Unix.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFileChooser(String currentDirectoryPath)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>JFileChooser</code> using the given path.
 Passing in a <code>null</code>
 string causes the file chooser to point to the user's default directory.
 This default depends on the operating system. It is
 typically the "My Documents" folder on Windows, and the user's
 home directory on Unix.

 @param currentDirectoryPath  a <code>String</code> giving the path
				to a file or directory

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFileChooser(File currentDirectory)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>JFileChooser</code> using the given <code>File</code>
 as the path. Passing in a <code>null</code> file
 causes the file chooser to point to the user's default directory.
 This default depends on the operating system. It is
 typically the "My Documents" folder on Windows, and the user's
 home directory on Unix.

 @param currentDirectory  a <code>File</code> object specifying
				the path to a file or directory

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFileChooser(FileSystemView fsv)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>JFileChooser</code> using the given
 <code>FileSystemView</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFileChooser(File currentDirectory, FileSystemView fsv)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>JFileChooser</code> using the given current directory
 and <code>FileSystemView</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JFileChooser(String currentDirectoryPath, FileSystemView fsv)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>JFileChooser</code> using the given current directory
 path and <code>FileSystemView</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JFileChooser.setup(FileSystemView view)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Performs common constructor initialization and setup.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setDragEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>dragEnabled</code> property,
 which must be <code>true</code> to enable
 automatic drag handling (the first part of drag and drop)
 on this component.
 The <code>transferHandler</code> property needs to be set
 to a non-<code>null</code> value for the drag to do
 anything.  The default value of the <code>dragEnabled</code>
 property
 is <code>false</code>.

 <p>

 When automatic drag handling is enabled,
 most look and feels begin a drag-and-drop operation
 whenever the user presses the mouse button over an item
 and then moves the mouse a few pixels. 
 Setting this property to <code>true</code>
 can therefore have a subtle effect on
 how selections behave.
 
 <p>
 
 Some look and feels might not support automatic drag and drop;
 they will ignore this property.  You can work around such
 look and feels by modifying the component
 to directly call the <code>exportAsDrag</code> method of a
 <code>TransferHandler</code>.

 @param b the value to set the <code>dragEnabled</code> property to
 @exception HeadlessException if
            <code>b</code> is <code>true</code> and
            <code>GraphicsEnvironment.isHeadless()</code>
            returns <code>true</code>
 @see java.awt.GraphicsEnvironment#isHeadless
 @see #getDragEnabled
 @see #setTransferHandler
 @see TransferHandler
 @since 1.4

 @beaninfo
  description: determines whether automatic drag handling is enabled
        bound: false

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JFileChooser.getDragEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the value of the <code>dragEnabled</code> property.

 @return  the value of the <code>dragEnabled</code> property
 @see #setDragEnabled
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.File javax.swing.JFileChooser.getSelectedFile()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the selected file. This can be set either by the
 programmer via <code>setFile</code> or by a user action, such as
 either typing the filename into the UI or selecting the
 file from a list in the UI.
 
 @see #setSelectedFile
 @return the selected file

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setSelectedFile(File file)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the selected file. If the file's parent directory is
 not the current directory, changes the current directory
 to be the file's parent directory.

 @beaninfo
   preferred: true
       bound: true

 @see #getSelectedFile

 @param file the selected file 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.File[] javax.swing.JFileChooser.getSelectedFiles()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a list of selected files if the file chooser is
 set to allow multiple selection.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setSelectedFiles(java.io.File[] selectedFiles)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the list of selected files if the file chooser is
 set to allow multiple selection.

 @beaninfo
       bound: true
 description: The list of selected files if the chooser is in multiple selection mode.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.File javax.swing.JFileChooser.getCurrentDirectory()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current directory. 

 @return the current directory
 @see #setCurrentDirectory

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setCurrentDirectory(File dir)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the current directory. Passing in <code>null</code> sets the 
 file chooser to point to the user's default directory.
 This default depends on the operating system. It is
 typically the "My Documents" folder on Windows, and the user's
 home directory on Unix.

 If the file passed in as <code>currentDirectory</code> is not a 
 directory, the parent of the file will be used as the currentDirectory.
 If the parent is not traversable, then it will walk up the parent tree
 until it finds a traversable directory, or hits the root of the
 file system.

 @beaninfo
   preferred: true
       bound: true
 description: The directory that the JFileChooser is showing files of.

 @param dir the current directory to point to
 @see #getCurrentDirectory

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.changeToParentDirectory()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Changes the directory to be set to the parent of the
 current directory. 

 @see #getCurrentDirectory

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.rescanCurrentDirectory()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tells the UI to rescan its files list from the current directory.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.ensureFileIsVisible(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Makes sure that the specified file is viewable, and
 not hidden.

 @param f  a File object

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JFileChooser.showOpenDialog(Component parent) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Pops up an "Open File" file chooser dialog. Note that the
 text that appears in the approve button is determined by
 the L&F.

 @param    parent  the parent component of the dialog,
			can be <code>null</code>;
                  see <code>showDialog</code> for details
 @return   the return state of the file chooser on popdown:
 <ul>
 <li>JFileChooser.CANCEL_OPTION
 <li>JFileChooser.APPROVE_OPTION
 <li>JFileChooser.ERROR_OPTION if an error occurs or the
			dialog is dismissed
 </ul>
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
 returns true.
 @see java.awt.GraphicsEnvironment#isHeadless
 @see #showDialog

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JFileChooser.showSaveDialog(Component parent) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Pops up a "Save File" file chooser dialog. Note that the
 text that appears in the approve button is determined by
 the L&F.

 @param    parent  the parent component of the dialog,
			can be <code>null</code>;
                  see <code>showDialog</code> for details
 @return   the return state of the file chooser on popdown:
 <ul>
 <li>JFileChooser.CANCEL_OPTION
 <li>JFileChooser.APPROVE_OPTION
 <li>JFileChooser.ERROR_OPTION if an error occurs or the
			dialog is dismissed
 </ul>
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
 returns true.
 @see java.awt.GraphicsEnvironment#isHeadless
 @see #showDialog

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JFileChooser.showDialog(Component parent, String approveButtonText) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Pops a custom file chooser dialog with a custom approve button.
 For example, the following code 
 pops up a file chooser with a "Run Application" button
 (instead of the normal "Save" or "Open" button):
 <pre>
 filechooser.showDialog(parentFrame, "Run Application");
 </pre>

 Alternatively, the following code does the same thing:
 <pre>
    JFileChooser chooser = new JFileChooser(null);
    chooser.setApproveButtonText("Run Application");
    chooser.showDialog(parentFrame, null);
 </pre>
 
 <!--PENDING(jeff) - the following method should be added to the api:
      showDialog(Component parent);-->
 <!--PENDING(kwalrath) - should specify modality and what
      "depends" means.-->

 <p>
 
 The <code>parent</code> argument determines two things:
 the frame on which the open dialog depends and
 the component whose position the look and feel
 should consider when placing the dialog.  If the parent
 is a <code>Frame</code> object (such as a <code>JFrame</code>)
 then the dialog depends on the frame and 
 the look and feel positions the dialog
 relative to the frame (for example, centered over the frame).
 If the parent is a component, then the dialog
 depends on the frame containing the component,
 and is positioned relative to the component 
 (for example, centered over the component). 
 If the parent is <code>null</code>, then the dialog depends on
 no visible window, and it's placed in a 
 look-and-feel-dependent position
 such as the center of the screen.

 @param   parent  the parent component of the dialog;
			can be <code>null</code>
 @param   approveButtonText the text of the <code>ApproveButton</code>
 @return  the return state of the file chooser on popdown:
 <ul>
 <li>JFileChooser.CANCEL_OPTION
 <li>JFileChooser.APPROVE_OPTION
 <li>JFileCHooser.ERROR_OPTION if an error occurs or the
			dialog is dismissed
 </ul>
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
 returns true.
 @see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JDialog javax.swing.JFileChooser.createDialog(Component parent) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates and returns a new <code>JDialog</code> wrapping
 <code>this</code> centered on the <code>parent</code>
 in the <code>parent</code>'s frame.
 This method can be overriden to further manipulate the dialog,
 to disable resizing, set the location, etc. Example:
 <pre>
     class MyFileChooser extends JFileChooser {
         protected JDialog createDialog(Component parent) throws HeadlessException {
             JDialog dialog = super.createDialog(parent);
             dialog.setLocation(300, 200);
             dialog.setResizable(false);
             return dialog;
         }
     }
 </pre>

 @param   parent  the parent component of the dialog;
			can be <code>null</code>
 @return a new <code>JDialog</code> containing this instance
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
 returns true.
 @see java.awt.GraphicsEnvironment#isHeadless
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JFileChooser.getControlButtonsAreShown()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of the <code>controlButtonsAreShown</code>
 property.

 @return   the value of the <code>controlButtonsAreShown</code>
     property

 @see #setControlButtonsAreShown
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setControlButtonsAreShown(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the property 
 that indicates whether the <i>approve</i> and <i>cancel</i>
 buttons are shown in the file chooser.  This property
 is <code>true</code> by default.  Look and feels
 that always show these buttons will ignore the value
 of this property.
 This method fires a property-changed event,
 using the string value of 
 <code>CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY</code>
 as the name of the property.

 @param b <code>false</code> if control buttons should not be
    shown; otherwise, <code>true</code>

 @beaninfo
   preferred: true
       bound: true
 description: Sets whether the approve & cancel buttons are shown.

 @see #getControlButtonsAreShown
 @see #CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JFileChooser.getDialogType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the type of this dialog.  The default is
 <code>JFileChooser.OPEN_DIALOG</code>.

 @return   the type of dialog to be displayed:
 <ul>
 <li>JFileChooser.OPEN_DIALOG
 <li>JFileChooser.SAVE_DIALOG
 <li>JFileChooser.CUSTOM_DIALOG
 </ul>

 @see #setDialogType

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setDialogType(int dialogType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the type of this dialog. Use <code>OPEN_DIALOG</code> when you 
 want to bring up a file chooser that the user can use to open a file.
 Likewise, use <code>SAVE_DIALOG</code> for letting the user choose
 a file for saving.
 Use <code>CUSTOM_DIALOG</code> when you want to use the file
 chooser in a context other than "Open" or "Save".
 For instance, you might want to bring up a file chooser that allows
 the user to choose a file to execute. Note that you normally would not
 need to set the <code>JFileChooser</code> to use
 <code>CUSTOM_DIALOG</code>
 since a call to <code>setApproveButtonText</code> does this for you.
 The default dialog type is <code>JFileChooser.OPEN_DIALOG</code>.

 @param dialogType the type of dialog to be displayed:
 <ul>
 <li>JFileChooser.OPEN_DIALOG
 <li>JFileChooser.SAVE_DIALOG
 <li>JFileChooser.CUSTOM_DIALOG
 </ul>

 @exception IllegalArgumentException if <code>dialogType</code> is
				not legal
 @beaninfo
   preferred: true
       bound: true
 description: The type (open, save, custom) of the JFileChooser.
        enum: 
              OPEN_DIALOG JFileChooser.OPEN_DIALOG
              SAVE_DIALOG JFileChooser.SAVE_DIALOG
              CUSTOM_DIALOG JFileChooser.CUSTOM_DIALOG

 @see #getDialogType
 @see #setApproveButtonText

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setDialogTitle(String dialogTitle)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the string that goes in the <code>JFileChooser</code> window's
 title bar.

 @param dialogTitle the new <code>String</code> for the title bar

 @beaninfo
   preferred: true
       bound: true
 description: The title of the JFileChooser dialog window.

 @see #getDialogTitle


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JFileChooser.getDialogTitle()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the string that goes in the <code>JFileChooser</code>'s titlebar.

 @see #setDialogTitle

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setApproveButtonToolTipText(String toolTipText)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the tooltip text used in the <code>ApproveButton</code>.
 If <code>null</code>, the UI object will determine the button's text.

 @beaninfo
   preferred: true
       bound: true
 description: The tooltip text for the ApproveButton.

 @param toolTipText the tooltip text for the approve button
 @see #setApproveButtonText
 @see #setDialogType
 @see #showDialog

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JFileChooser.getApproveButtonToolTipText()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the tooltip text used in the <code>ApproveButton</code>.
 If <code>null</code>, the UI object will determine the button's text.

 @return the tooltip text used for the approve button

 @see #setApproveButtonText
 @see #setDialogType
 @see #showDialog

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JFileChooser.getApproveButtonMnemonic()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the approve button's mnemonic.
 @return an integer value for the mnemonic key

 @see #setApproveButtonMnemonic

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setApproveButtonMnemonic(int mnemonic)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the approve button's mnemonic using a numeric keycode.

 @param mnemonic  an integer value for the mnemonic key

 @beaninfo
   preferred: true
       bound: true
 description: The mnemonic key accelerator for the ApproveButton.

 @see #getApproveButtonMnemonic

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setApproveButtonMnemonic(char mnemonic)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the approve button's mnemonic using a character.
 @param mnemonic  a character value for the mnemonic key

 @see #getApproveButtonMnemonic

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setApproveButtonText(String approveButtonText)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the text used in the <code>ApproveButton</code> in the
 <code>FileChooserUI</code>.

 @beaninfo
   preferred: true
       bound: true
 description: The text that goes in the ApproveButton.

 @param approveButtonText the text used in the <code>ApproveButton</code>

 @see #getApproveButtonText
 @see #setDialogType
 @see #showDialog

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JFileChooser.getApproveButtonText()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the text used in the <code>ApproveButton</code> in the
 <code>FileChooserUI</code>.
 If <code>null</code>, the UI object will determine the button's text.

 Typically, this would be "Open" or "Save".

 @return the text used in the <code>ApproveButton</code>

 @see #setApproveButtonText
 @see #setDialogType
 @see #showDialog

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.filechooser.FileFilter[] javax.swing.JFileChooser.getChoosableFileFilters()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the list of user choosable file filters.

 @return a <code>FileFilter</code> array containing all the choosable
         file filters

 @see #addChoosableFileFilter
 @see #removeChoosableFileFilter
 @see #resetChoosableFileFilters

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.addChoosableFileFilter(FileFilter filter)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a filter to the list of user choosable file filters.
 For information on setting the file selection mode, see
 {@link #setFileSelectionMode setFileSelectionMode}.
 
 @param filter the <code>FileFilter</code> to add to the choosable file
               filter list

 @beaninfo
   preferred: true
       bound: true
 description: Adds a filter to the list of user choosable file filters.

 @see #getChoosableFileFilters
 @see #removeChoosableFileFilter
 @see #resetChoosableFileFilters
 @see #setFileSelectionMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JFileChooser.removeChoosableFileFilter(FileFilter f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a filter from the list of user choosable file filters. Returns
 true if the file filter was removed.

 @see #addChoosableFileFilter
 @see #getChoosableFileFilters
 @see #resetChoosableFileFilters

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.resetChoosableFileFilters()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets the choosable file filter list to its starting state. Normally,
 this removes all added file filters while leaving the
 <code>AcceptAll</code> file filter.

 @see #addChoosableFileFilter
 @see #getChoosableFileFilters
 @see #removeChoosableFileFilter

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.filechooser.FileFilter javax.swing.JFileChooser.getAcceptAllFileFilter()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>AcceptAll</code> file filter.
 For example, on Microsoft Windows this would be All Files (*.*).

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JFileChooser.isAcceptAllFileFilterUsed()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether the <code>AcceptAll FileFilter</code> is used.
 @return true if the <code>AcceptAll FileFilter</code> is used
 @see #setAcceptAllFileFilterUsed
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setAcceptAllFileFilterUsed(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines whether the <code>AcceptAll FileFilter</code> is used
 as an available choice in the choosable filter list.
 If false, the <code>AcceptAll</code> file filter is removed from
 the list of available file filters.
 If true, the <code>AcceptAll</code> file filter will become the
 the actively used file filter. 

 @beaninfo
   preferred: true
       bound: true
 description: Sets whether the AcceptAll FileFilter is used as an available choice in the choosable filter list.

 @see #isAcceptAllFileFilterUsed
 @see #getAcceptAllFileFilter
 @see #setFileFilter
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JComponent javax.swing.JFileChooser.getAccessory()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the accessory component.

 @return this JFileChooser's accessory component, or null
 @see #setAccessory

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setAccessory(JComponent newAccessory)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the accessory component. An accessory is often used to show a 
 preview image of the selected file; however, it can be used for anything
 that the programmer wishes, such as extra custom file chooser controls.

 <p>
 Note: if there was a previous accessory, you should unregister
 any listeners that the accessory might have registered with the
 file chooser.

 @beaninfo
   preferred: true
       bound: true
 description: Sets the accessory component on the JFileChooser.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setFileSelectionMode(int mode)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>JFileChooser</code> to allow the user to just
 select files, just select
 directories, or select both files and directories.  The default is
 <code>JFilesChooser.FILES_ONLY</code>.

 @param mode the type of files to be displayed:
 <ul>
 <li>JFileChooser.FILES_ONLY
 <li>JFileChooser.DIRECTORIES_ONLY
 <li>JFileChooser.FILES_AND_DIRECTORIES
 </ul>

 @exception IllegalArgumentException  if <code>mode</code> is an
				illegal file selection mode
 @beaninfo
   preferred: true
       bound: true
 description: Sets the types of files that the JFileChooser can choose.
        enum: FILES_ONLY JFileChooser.FILES_ONLY
              DIRECTORIES_ONLY JFileChooser.DIRECTORIES_ONLY
              FILES_AND_DIRECTORIES JFileChooser.FILES_AND_DIRECTORIES


 @see #getFileSelectionMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JFileChooser.getFileSelectionMode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current file-selection mode.  The default is
 <code>JFilesChooser.FILES_ONLY</code>.

 @return the type of files to be displayed, one of the following:
 <ul>
 <li>JFileChooser.FILES_ONLY
 <li>JFileChooser.DIRECTORIES_ONLY
 <li>JFileChooser.FILES_AND_DIRECTORIES
 </ul>
 @see #setFileSelectionMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JFileChooser.isFileSelectionEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convenience call that determines if files are selectable based on the
 current file selection mode.

 @see #setFileSelectionMode
 @see #getFileSelectionMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JFileChooser.isDirectorySelectionEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convenience call that determines if directories are selectable based
 on the current file selection mode.

 @see #setFileSelectionMode
 @see #getFileSelectionMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setMultiSelectionEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the file chooser to allow multiple file selections.

 @param b true if multiple files may be selected
 @beaninfo
       bound: true
 description: Sets multiple file selection mode.

 @see #isMultiSelectionEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JFileChooser.isMultiSelectionEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if multiple files can be selected.
 @return true if multiple files can be selected
 @see #setMultiSelectionEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JFileChooser.isFileHidingEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if hidden files are not shown in the file chooser;
 otherwise, returns false.

 @return the status of the file hiding property
 @see #setFileHidingEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setFileHidingEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets file hiding on or off. If true, hidden files are not shown
 in the file chooser. The job of determining which files are
 shown is done by the <code>FileView</code>.

 @beaninfo
   preferred: true
       bound: true
 description: Sets file hiding on or off.

 @param b the boolean value that determines whether file hiding is
          turned on
 @see #isFileHidingEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setFileFilter(FileFilter filter)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the current file filter. The file filter is used by the
 file chooser to filter out files from the user's view.

 @beaninfo
   preferred: true
       bound: true
 description: Sets the File Filter used to filter out files of type.

 @param filter the new current file filter to use
 @see #getFileFilter

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.filechooser.FileFilter javax.swing.JFileChooser.getFileFilter()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the currently selected file filter.

 @return the current file filter
 @see #setFileFilter
 @see #addChoosableFileFilter

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setFileView(FileView fileView)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the file view to used to retrieve UI information, such as
 the icon that represents a file or the type description of a file.

 @beaninfo
   preferred: true
       bound: true
 description: Sets the File View used to get file type information.

 @see #getFileView

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.filechooser.FileView javax.swing.JFileChooser.getFileView()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current file view.

 @see #setFileView

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JFileChooser.getName(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the filename.
 @param f the <code>File</code>
 @return the <code>String</code> containing the filename for
		<code>f</code>
 @see FileView#getName

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JFileChooser.getDescription(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the file description.
 @param f the <code>File</code>
 @return the <code>String</code> containing the file description for
		<code>f</code>
 @see FileView#getDescription

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JFileChooser.getTypeDescription(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the file type.
 @param f the <code>File</code>
 @return the <code>String</code> containing the file type description for
		<code>f</code>
 @see FileView#getTypeDescription

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.JFileChooser.getIcon(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the icon for this file or type of file, depending
 on the system.
 @param f the <code>File</code>
 @return the <code>Icon</code> for this file, or type of file
 @see FileView#getIcon

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JFileChooser.isTraversable(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the file (directory) can be visited.
 Returns false if the directory cannot be traversed.
 @param f the <code>File</code>
 @return true if the file/directory can be traversed, otherwise false
 @see FileView#isTraversable

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JFileChooser.accept(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the file should be displayed.
 @param f the <code>File</code>
 @return true if the file should be displayed, otherwise false
 @see FileFilter#accept

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.setFileSystemView(FileSystemView fsv)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the file system view that the <code>JFileChooser</code> uses for
 accessing and creating file system resources, such as finding
 the floppy drive and getting a list of root drives.
 @param fsv  the new <code>FileSystemView</code> 

 @beaninfo
      expert: true
       bound: true
 description: Sets the FileSytemView used to get filesystem information.

 @see FileSystemView

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.filechooser.FileSystemView javax.swing.JFileChooser.getFileSystemView()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the file system view.
 @return the <code>FileSystemView</code> object
 @see #setFileSystemView

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.approveSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called by the UI when the user hits the Approve button
 (labeled "Open" or "Save", by default). This can also be
 called by the programmer.
 This method causes an action event to fire
 with the command string equal to
 <code>APPROVE_SELECTION</code>.

 @see #APPROVE_SELECTION

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.cancelSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called by the UI when the user chooses the Cancel button.
 This can also be called by the programmer.
 This method causes an action event to fire
 with the command string equal to
 <code>CANCEL_SELECTION</code>.

 @see #CANCEL_SELECTION

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.addActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds an <code>ActionListener</code> to the file chooser.

 @param l  the listener to be added
 
 @see #approveSelection
 @see #cancelSelection

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.removeActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes an <code>ActionListener</code> from the file chooser.

 @param l  the listener to be removed

 @see #addActionListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ActionListener[] javax.swing.JFileChooser.getActionListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the action listeners 
 registered on this file chooser.

 @return all of this file chooser's <code>ActionListener</code>s 
         or an empty
         array if no action listeners are currently registered

 @see #addActionListener
 @see #removeActionListener

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JFileChooser.fireActionPerformed(String command)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type. The event instance
 is lazily created using the <code>command</code> parameter.

 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JFileChooser.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets the UI property to a value from the current look and feel.

 @see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JFileChooser.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string that specifies the name of the L&F class
 that renders this component.

 @return the string "FileChooserUI"
 @see JComponent#getUIClassID
 @see UIDefaults#getUI
 @beaninfo
        expert: true
   description: A string that specifies the name of the L&F class.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.FileChooserUI javax.swing.JFileChooser.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the UI object which implements the L&F for this component.

 @return the FileChooserUI object that implements the FileChooserUI L&F

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JFileChooser.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this <code>JFileChooser</code>.
 This method 
 is intended to be used only for debugging purposes, and the 
 content and format of the returned string may vary between      
 implementations. The returned string may be empty but may not 
 be <code>null</code>.
 
 @return  a string representation of this <code>JFileChooser</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JFileChooser.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleContext associated with this JFileChooser. 
 For file choosers, the AccessibleContext takes the form of an 
 AccessibleJFileChooser. 
 A new AccessibleJFileChooser instance is created if necessary.

 @return an AccessibleJFileChooser that serves as the 
         AccessibleContext of this JFileChooser

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JFileChooser.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 See <code>readObject</code> and <code>writeObject</code> in
 <code>JComponent</code> for more
 information about serialization in Swing.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JFileChooser.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 See <code>readObject</code> and <code>writeObject</code> in
 <code>JComponent</code> for more 
 information about serialization in Swing.

<!-- END DATA -->
