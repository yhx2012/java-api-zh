<!-- BEGIN KEY -->
public class javax.swing.JPanel extends javax.swing.JComponent implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>JPanel</code> is a generic lightweight container.
 For examples and task-oriented documentation for JPanel, see
 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/components/panel.html">How to Use Panels</a>,
 a section in <em>The Java Tutorial</em>.
 <p>
 <strong>Warning:</strong> Swing is not thread safe. For more
 information see <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @beaninfo
 description: A generic lightweight container.
 
 @version 1.48 08/08/06
 @author Arnaud Weber
 @author Steve Wilson

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JPanel(LayoutManager layout, boolean isDoubleBuffered)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new JPanel with the specified layout manager and buffering
 strategy.

 @param layout  the LayoutManager to use
 @param isDoubleBuffered  a boolean, true for double-buffering, which
        uses additional memory space to achieve fast, flicker-free 
        updates

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JPanel(LayoutManager layout)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new buffered JPanel with the specified layout manager

 @param layout  the LayoutManager to use

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JPanel(boolean isDoubleBuffered)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <code>JPanel</code> with <code>FlowLayout</code>
 and the specified buffering strategy.
 If <code>isDoubleBuffered</code> is true, the <code>JPanel</code>
 will use a double buffer.

 @param isDoubleBuffered  a boolean, true for double-buffering, which
        uses additional memory space to achieve fast, flicker-free 
        updates

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JPanel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <code>JPanel</code> with a double buffer
 and a flow layout.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPanel.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets the UI property with a value from the current look and feel.

 @see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the look and feel (L&F) object that renders this component.

 @return the PanelUI object that renders this component
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JPanel.setUI(PanelUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the look and feel (L&F) object that renders this component.

 @param ui  the PanelUI L&F object
 @see UIDefaults#getUI
 @since 1.4
 @beaninfo
        bound: true
       hidden: true
    attribute: visualUpdate true
  description: The UI object that implements the Component's LookAndFeel. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JPanel.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string that specifies the name of the L&F class
 that renders this component.

 @return "PanelUI"
 @see JComponent#getUIClassID
 @see UIDefaults#getUI
 @beaninfo
        expert: true
   description: A string that specifies the name of the L&F class.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JPanel.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this JPanel. This method 
 is intended to be used only for debugging purposes, and the 
 content and format of the returned string may vary between      
 implementations. The returned string may be empty but may not 
 be <code>null</code>.
 
 @return  a string representation of this JPanel.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleContext associated with this JPanel. 
 For JPanels, the AccessibleContext takes the form of an 
 AccessibleJPanel. 
 A new AccessibleJPanel instance is created if necessary.

 @return an AccessibleJPanel that serves as the 
         AccessibleContext of this JPanel

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JPanel.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 See readObject() and writeObject() in JComponent for more 
 information about serialization in Swing.

<!-- END DATA -->
