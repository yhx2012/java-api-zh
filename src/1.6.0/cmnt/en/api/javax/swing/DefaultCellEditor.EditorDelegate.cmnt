<!-- BEGIN KEY -->
protected class javax.swing.DefaultCellEditor.EditorDelegate extends java.lang.Object implements java.awt.event.ActionListener, java.awt.event.ItemListener, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 The protected <code>EditorDelegate</code> class.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object javax.swing.DefaultCellEditor.EditorDelegate.value
<!-- END KEY -->
<!-- BEGIN DATA -->
The value of this cell. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.DefaultCellEditor.EditorDelegate.getCellEditorValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of this cell. 
 @return the value of this cell

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultCellEditor.EditorDelegate.setValue(Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the value of this cell. 
 @param value the new value of this cell

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultCellEditor.EditorDelegate.isCellEditable(EventObject anEvent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if <code>anEvent</code> is <b>not</b> a
 <code>MouseEvent</code>.  Otherwise, it returns true
 if the necessary number of clicks have occurred, and
 returns false otherwise.

 @param   anEvent         the event
 @return  true  if cell is ready for editing, false otherwise
 @see #setClickCountToStart
 @see #shouldSelectCell

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultCellEditor.EditorDelegate.shouldSelectCell(EventObject anEvent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true to indicate that the editing cell may
 be selected.

 @param   anEvent         the event
 @return  true 
 @see #isCellEditable

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultCellEditor.EditorDelegate.startCellEditing(EventObject anEvent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true to indicate that editing has begun.

 @param anEvent          the event

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.DefaultCellEditor.EditorDelegate.stopCellEditing()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Stops editing and
 returns true to indicate that editing has stopped.
 This method calls <code>fireEditingStopped</code>.

 @return  true 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultCellEditor.EditorDelegate.cancelCellEditing()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Cancels editing.  This method calls <code>fireEditingCanceled</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultCellEditor.EditorDelegate.actionPerformed(ActionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 When an action is performed, editing is ended.
 @param e the action event
 @see #stopCellEditing

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.DefaultCellEditor.EditorDelegate.itemStateChanged(ItemEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 When an item's state changes, editing is ended.
 @param e the action event
 @see #stopCellEditing

<!-- END DATA -->
