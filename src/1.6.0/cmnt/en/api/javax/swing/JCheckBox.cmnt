<!-- BEGIN KEY -->
public class javax.swing.JCheckBox extends javax.swing.JToggleButton implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
 An implementation of a check box -- an item that can be selected or
 deselected, and which displays its state to the user. 
 By convention, any number of check boxes in a group can be selected.
 See <a href="http://java.sun.com/docs/books/tutorial/uiswing/components/button.html">How to Use Buttons, Check Boxes, and Radio Buttons</a>
 in <em>The Java Tutorial</em>
 for examples and information on using check boxes.
 <p>
 Buttons can be configured, and to some degree controlled, by 
 <code><a href="Action.html">Action</a></code>s.  Using an
 <code>Action</code> with a button has many benefits beyond directly
 configuring a button.  Refer to <a href="Action.html#buttonActions">
 Swing Components Supporting <code>Action</code></a> for more
 details, and you can find more information in <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/misc/action.html">How
 to Use Actions</a>, a section in <em>The Java Tutorial</em>.
 <p>
 <strong>Warning:</strong> Swing is not thread safe. For more
 information see <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @see JRadioButton

 @beaninfo
   attribute: isContainer false
 description: A component which can be selected or deselected.

 @version 1.78 08/08/06
 @author Jeff Dinkins

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.swing.JCheckBox.BORDER_PAINTED_FLAT_CHANGED_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies a change to the flat property. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JCheckBox()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an initially unselected check box button with no text, no icon.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JCheckBox(Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an initially unselected check box with an icon.

 @param icon  the Icon image to display

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JCheckBox(Icon icon, boolean selected)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a check box with an icon and specifies whether
 or not it is initially selected.

 @param icon  the Icon image to display
 @param selected a boolean value indicating the initial selection
        state. If <code>true</code> the check box is selected

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JCheckBox(String text)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an initially unselected check box with text.

 @param text the text of the check box.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JCheckBox(Action a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a check box where properties are taken from the 
 Action supplied.

 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JCheckBox(String text, boolean selected)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a check box with text and specifies whether 
 or not it is initially selected.

 @param text the text of the check box.
 @param selected a boolean value indicating the initial selection
        state. If <code>true</code> the check box is selected

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JCheckBox(String text, Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an initially unselected check box with 
 the specified text and icon.

 @param text the text of the check box.
 @param icon  the Icon image to display

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JCheckBox(String text, Icon icon, boolean selected)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a check box with text and icon,
 and specifies whether or not it is initially selected.

 @param text the text of the check box.
 @param icon  the Icon image to display
 @param selected a boolean value indicating the initial selection
        state. If <code>true</code> the check box is selected

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JCheckBox.setBorderPaintedFlat(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>borderPaintedFlat</code> property,
 which gives a hint to the look and feel as to the
 appearance of the check box border.
 This is usually set to <code>true</code> when a
 <code>JCheckBox</code> instance is used as a
 renderer in a component such as a <code>JTable</code> or
 <code>JTree</code>.  The default value for the
 <code>borderPaintedFlat</code> property is <code>false</code>.
 This method fires a property changed event.
 Some look and feels might not implement flat borders;
 they will ignore this property.

 @param b <code>true</code> requests that the border be painted flat;
          <code>false</code> requests normal borders
 @see #isBorderPaintedFlat
 @beaninfo
        bound: true
    attribute: visualUpdate true
  description: Whether the border is painted flat.
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JCheckBox.isBorderPaintedFlat()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the value of the <code>borderPaintedFlat</code> property.

 @return the value of the <code>borderPaintedFlat</code> property
 @see #setBorderPaintedFlat
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JCheckBox.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets the UI property to a value from the current look and feel.

 @see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JCheckBox.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string that specifies the name of the L&F class
 that renders this component.

 @return the string "CheckBoxUI"
 @see JComponent#getUIClassID
 @see UIDefaults#getUI
 @beaninfo
        expert: true
   description: A string that specifies the name of the L&F class

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JCheckBox.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this JCheckBox. This method 
 is intended to be used only for debugging purposes, and the 
 content and format of the returned string may vary between      
 implementations. The returned string may be empty but may not 
 be <code>null</code>.
 specific new aspects of the JFC components.
 
 @return  a string representation of this JCheckBox.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JCheckBox.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleContext associated with this JCheckBox. 
 For JCheckBoxes, the AccessibleContext takes the form of an 
 AccessibleJCheckBox. 
 A new AccessibleJCheckBox instance is created if necessary.

 @return an AccessibleJCheckBox that serves as the 
         AccessibleContext of this JCheckBox
 @beaninfo
       expert: true
  description: The AccessibleContext associated with this CheckBox.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JCheckBox.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 See JComponent.readObject() for information about serialization
 in Swing.

<!-- END DATA -->
