<!-- BEGIN KEY -->
public class javax.swing.ButtonGroup extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class is used to create a multiple-exclusion scope for
 a set of buttons. Creating a set of buttons with the
 same <code>ButtonGroup</code> object means that
 turning "on" one of those buttons 
 turns off all other buttons in the group.
 <p>
 A <code>ButtonGroup</code> can be used with
 any set of objects that inherit from <code>AbstractButton</code>.
 Typically a button group contains instances of 
 <code>JRadioButton</code>,
 <code>JRadioButtonMenuItem</code>,
 or <code>JToggleButton</code>.
 It wouldn't make sense to put an instance of 
 <code>JButton</code> or <code>JMenuItem</code>
 in a button group
 because <code>JButton</code> and <code>JMenuItem</code>
 don't implement the selected state.
 <p>
 Initially, all buttons in the group are unselected. 
 <p>
 For examples and further information on using button groups see
 <a href="http://java.sun.com/docs/books/tutorial/uiswing/components/button.html#radiobutton">How to Use Radio Buttons</a>,
 a section in <em>The Java Tutorial</em>.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @version 1.39 11/17/05
 @author Jeff Dinkins

<!-- END DATA -->
<!-- BEGIN KEY -->
 javax.swing.ButtonModel javax.swing.ButtonGroup.selection
<!-- END KEY -->
<!-- BEGIN DATA -->
 The current selection.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ButtonGroup()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <code>ButtonGroup</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonGroup.add(AbstractButton b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the button to the group.
 @param b the button to be added

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonGroup.remove(AbstractButton b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the button from the group.
 @param b the button to be removed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonGroup.clearSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Clears the selection such that none of the buttons 
 in the <code>ButtonGroup</code> are selected.
 
 @since 1.6       

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<javax.swing.AbstractButton> javax.swing.ButtonGroup.getElements()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns all the buttons that are participating in
 this group.
 @return an <code>Enumeration</code> of the buttons in this group

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ButtonModel javax.swing.ButtonGroup.getSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the model of the selected button.
 @return the selected button model

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ButtonGroup.setSelected(ButtonModel m, boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the selected value for the <code>ButtonModel</code>.
 Only one button in the group may be selected at a time.
 @param m the <code>ButtonModel</code>
 @param b <code>true</code> if this button is to be
   selected, otherwise <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.ButtonGroup.isSelected(ButtonModel m)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether a <code>ButtonModel</code> is selected.
 @return <code>true</code> if the button is selected,
   otherwise returns <code>false</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ButtonGroup.getButtonCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of buttons in the group.
 @return the button count
 @since 1.3

<!-- END DATA -->
