<!-- BEGIN KEY -->
public class javax.swing.event.TableModelEvent extends java.util.EventObject
<!-- END KEY -->
<!-- BEGIN DATA -->
 TableModelEvent is used to notify listeners that a table model
 has changed. The model event describes changes to a TableModel 
 and all references to rows and columns are in the co-ordinate 
 system of the model. 
 Depending on the parameters used in the constructors, the TableModelevent
 can be used to specify the following types of changes: <p>

 <pre>
 TableModelEvent(source);              //  The data, ie. all rows changed 
 TableModelEvent(source, HEADER_ROW);  //  Structure change, reallocate TableColumns
 TableModelEvent(source, 1);           //  Row 1 changed
 TableModelEvent(source, 3, 6);        //  Rows 3 to 6 inclusive changed
 TableModelEvent(source, 2, 2, 6);     //  Cell at (2, 6) changed
 TableModelEvent(source, 3, 6, ALL_COLUMNS, INSERT); // Rows (3, 6) were inserted
 TableModelEvent(source, 3, 6, ALL_COLUMNS, DELETE); // Rows (3, 6) were deleted
 </pre>

 It is possible to use other combinations of the parameters, not all of them 
 are meaningful. By subclassing, you can add other information, for example: 
 whether the event WILL happen or DID happen. This makes the specification 
 of rows in DELETE events more useful but has not been included in 
 the swing package as the JTable only needs post-event notification. 
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @version 1.22 11/17/05
 @author Alan Chung
 @author Philip Milne
 @see TableModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.event.TableModelEvent.INSERT
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the addtion of new rows or columns. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.event.TableModelEvent.UPDATE
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies a change to existing data. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.event.TableModelEvent.DELETE
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the removal of rows or columns. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.event.TableModelEvent.HEADER_ROW
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the header row. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.swing.event.TableModelEvent.ALL_COLUMNS
<!-- END KEY -->
<!-- BEGIN DATA -->
Specifies all columns in a row or rows. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.TableModelEvent(TableModel source)
<!-- END KEY -->
<!-- BEGIN DATA -->

  All row data in the table has changed, listeners should discard any state 
  that was based on the rows and requery the <code>TableModel</code>
  to get the new row count and all the appropriate values. 
  The <code>JTable</code> will repaint the entire visible region on
  receiving this event, querying the model for the cell values that are visible. 
  The structure of the table ie, the column names, types and order 
  have not changed.  

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.TableModelEvent(TableModel source, int row)
<!-- END KEY -->
<!-- BEGIN DATA -->
  This row of data has been updated. 
  To denote the arrival of a completely new table with a different structure 
  use <code>HEADER_ROW</code> as the value for the <code>row</code>. 
  When the <code>JTable</code> receives this event and its
  <code>autoCreateColumnsFromModel</code> 
  flag is set it discards any TableColumns that it had and reallocates 
  default ones in the order they appear in the model. This is the 
  same as calling <code>setModel(TableModel)</code> on the <code>JTable</code>. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.TableModelEvent(TableModel source, int firstRow, int lastRow)
<!-- END KEY -->
<!-- BEGIN DATA -->
  The data in rows [<I>firstRow</I>, <I>lastRow</I>] have been updated. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.TableModelEvent(TableModel source, int firstRow, int lastRow, int column)
<!-- END KEY -->
<!-- BEGIN DATA -->
  The cells in column <I>column</I> in the range 
  [<I>firstRow</I>, <I>lastRow</I>] have been updated. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.TableModelEvent(TableModel source, int firstRow, int lastRow, int column, int type)
<!-- END KEY -->
<!-- BEGIN DATA -->
  The cells from (firstRow, column) to (lastRow, column) have been changed. 
  The <I>column</I> refers to the column index of the cell in the model's 
  co-ordinate system. When <I>column</I> is ALL_COLUMNS, all cells in the 
  specified range of rows are considered changed. 
  <p>
  The <I>type</I> should be one of: INSERT, UPDATE and DELETE. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.event.TableModelEvent.getFirstRow()
<!-- END KEY -->
<!-- BEGIN DATA -->
Returns the first row that changed.  HEADER_ROW means the meta data, 
 ie. names, types and order of the columns. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.event.TableModelEvent.getLastRow()
<!-- END KEY -->
<!-- BEGIN DATA -->
Returns the last row that changed. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.event.TableModelEvent.getColumn()
<!-- END KEY -->
<!-- BEGIN DATA -->
  Returns the column for the event.  If the return
  value is ALL_COLUMNS; it means every column in the specified
  rows changed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.event.TableModelEvent.getType()
<!-- END KEY -->
<!-- BEGIN DATA -->
  Returns the type of event - one of: INSERT, UPDATE and DELETE.

<!-- END DATA -->
