<!-- BEGIN KEY -->
public class javax.swing.ProgressMonitorInputStream extends java.io.FilterInputStream
<!-- END KEY -->
<!-- BEGIN DATA -->

 Monitors the progress of reading from some InputStream. This ProgressMonitor
 is normally invoked in roughly this form:
 <pre>
 InputStream in = new BufferedInputStream(
                          new ProgressMonitorInputStream(
                                  parentComponent,
                                  "Reading " + fileName,
                                  new FileInputStream(fileName)));
 </pre><p>
 This creates a progress monitor to monitor the progress of reading
 the input stream.  If it's taking a while, a ProgressDialog will
 be popped up to inform the user.  If the user hits the Cancel button
 an InterruptedIOException will be thrown on the next read.
 All the right cleanup is done when the stream is closed.


 <p>

 For further documentation and examples see
 <a href="http://java.sun.com/docs/books/tutorial/uiswing/components/progress.html">How to Monitor Progress</a>,
 a section in <em>The Java Tutorial.</em>

 @see ProgressMonitor
 @see JOptionPane
 @author James Gosling
 @version 1.20 11/17/05

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ProgressMonitorInputStream(Component parentComponent, Object message, InputStream in)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an object to monitor the progress of an input stream.

 @param message Descriptive text to be placed in the dialog box
                if one is popped up.
 @param parentComponent The component triggering the operation
                        being monitored.
 @param in The input stream to be monitored.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ProgressMonitor javax.swing.ProgressMonitorInputStream.getProgressMonitor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the ProgressMonitor object being used by this stream. Normally
 this isn't needed unless you want to do something like change the
 descriptive text partway through reading the file.
 @return the ProgressMonitor object used by this object 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ProgressMonitorInputStream.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>FilterInputStream.read</code> 
 to update the progress monitor after the read.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ProgressMonitorInputStream.read(byte[] b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>FilterInputStream.read</code> 
 to update the progress monitor after the read.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ProgressMonitorInputStream.read(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>FilterInputStream.read</code> 
 to update the progress monitor after the read.

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.swing.ProgressMonitorInputStream.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>FilterInputStream.skip</code> 
 to update the progress monitor after the skip.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ProgressMonitorInputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>FilterInputStream.close</code> 
 to close the progress monitor as well as the stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.ProgressMonitorInputStream.reset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>FilterInputStream.reset</code> 
 to reset the progress monitor as well as the stream.

<!-- END DATA -->
