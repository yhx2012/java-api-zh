<!-- BEGIN KEY -->
protected class javax.swing.JSpinner.AccessibleJSpinner extends javax.swing.JComponent.AccessibleJComponent implements javax.accessibility.AccessibleValue, javax.accessibility.AccessibleAction, javax.accessibility.AccessibleText, javax.accessibility.AccessibleEditableText, javax.swing.event.ChangeListener
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>AccessibleJSpinner</code> implements accessibility 
 support for the <code>JSpinner</code> class. 
 @since 1.5 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JSpinner.AccessibleJSpinner()
<!-- END KEY -->
<!-- BEGIN DATA -->
 AccessibleJSpinner constructor

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSpinner.AccessibleJSpinner.stateChanged(ChangeEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when the target of the listener has changed its state.

 @param e  a <code>ChangeEvent</code> object. Must not be null.
 @throws NullPointerException if the parameter is null.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleRole javax.swing.JSpinner.AccessibleJSpinner.getAccessibleRole()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the role of this object.  The role of the object is the generic
 purpose or use of the class of this object.  For example, the role
 of a push button is AccessibleRole.PUSH_BUTTON.  The roles in 
 AccessibleRole are provided so component developers can pick from
 a set of predefined roles.  This enables assistive technologies to
 provide a consistent interface to various tweaked subclasses of 
 components (e.g., use AccessibleRole.PUSH_BUTTON for all components
 that act like a push button) as well as distinguish between sublasses
 that behave differently (e.g., AccessibleRole.CHECK_BOX for check boxes
 and AccessibleRole.RADIO_BUTTON for radio buttons).
 <p>Note that the AccessibleRole class is also extensible, so 
 custom component developers can define their own AccessibleRole's
 if the set of predefined roles is inadequate.

 @return an instance of AccessibleRole describing the role of the object
 @see AccessibleRole

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JSpinner.AccessibleJSpinner.getAccessibleChildrenCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of accessible children of the object.

 @return the number of accessible children of the object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JSpinner.AccessibleJSpinner.getAccessibleChild(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the specified Accessible child of the object.  The Accessible
 children of an Accessible object are zero-based, so the first child 
 of an Accessible child is at index 0, the second child is at index 1,
 and so on.

 @param i zero-based index of child
 @return the Accessible child of the object
 @see #getAccessibleChildrenCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleAction javax.swing.JSpinner.AccessibleJSpinner.getAccessibleAction()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleAction associated with this object that supports
 one or more actions. 

 @return AccessibleAction if supported by object; else return null
 @see AccessibleAction

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleText javax.swing.JSpinner.AccessibleJSpinner.getAccessibleText()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleText associated with this object presenting 
 text on the display.

 @return AccessibleText if supported by object; else return null
 @see AccessibleText

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleValue javax.swing.JSpinner.AccessibleJSpinner.getAccessibleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleValue associated with this object. 
 
 @return AccessibleValue if supported by object; else return null 
 @see AccessibleValue


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.swing.JSpinner.AccessibleJSpinner.getCurrentAccessibleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the value of this object as a Number.  If the value has not been
 set, the return value will be null.

 @return value of the object
 @see #setCurrentAccessibleValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JSpinner.AccessibleJSpinner.setCurrentAccessibleValue(Number n)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the value of this object as a Number.

 @param n the value to set for this object
 @return true if the value was set; else False
 @see #getCurrentAccessibleValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.swing.JSpinner.AccessibleJSpinner.getMinimumAccessibleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the minimum value of this object as a Number.

 @return Minimum value of the object; null if this object does not 
 have a minimum value
 @see #getMaximumAccessibleValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.swing.JSpinner.AccessibleJSpinner.getMaximumAccessibleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the maximum value of this object as a Number.

 @return Maximum value of the object; null if this object does not 
 have a maximum value
 @see #getMinimumAccessibleValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JSpinner.AccessibleJSpinner.getAccessibleActionCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of accessible actions available in this object
 If there are more than one, the first one is considered the "default"
 action of the object.

 Two actions are supported: AccessibleAction.INCREMENT which
 increments the spinner value and AccessibleAction.DECREMENT 
 which decrements the spinner value

 @return the zero-based number of Actions in this object

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JSpinner.AccessibleJSpinner.getAccessibleActionDescription(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a description of the specified action of the object.

 @param i zero-based index of the actions
 @return a String description of the action
 @see #getAccessibleActionCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JSpinner.AccessibleJSpinner.doAccessibleAction(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Performs the specified Action on the object

 @param i zero-based index of actions. The first action
 (index 0) is AccessibleAction.INCREMENT and the second
 action (index 1) is AccessibleAction.DECREMENT.
 @return true if the action was performed; otherwise false.
 @see #getAccessibleActionCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JSpinner.AccessibleJSpinner.getIndexAtPoint(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Given a point in local coordinates, return the zero-based index
 of the character under that Point.  If the point is invalid,
 this method returns -1.

 @param p the Point in local coordinates
 @return the zero-based index of the character under Point p; if 
 Point is invalid return -1.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.JSpinner.AccessibleJSpinner.getCharacterBounds(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the bounding box of the character at the given 
 index into the string.  The bounds are returned in local
 coordinates.  If the index is invalid an empty rectangle is 
 returned.

 @param i the index into the String
 @return the screen coordinates of the character's bounding box,
 if index is invalid return an empty rectangle.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JSpinner.AccessibleJSpinner.getCharCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of characters (valid indicies) 

 @return the number of characters

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JSpinner.AccessibleJSpinner.getCaretPosition()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the zero-based offset of the caret.

 Note: That to the right of the caret will have the same index
 value as the offset (the caret is between two characters).
 @return the zero-based offset of the caret.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JSpinner.AccessibleJSpinner.getAtIndex(int part, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the String at a given index. 

 @param part the CHARACTER, WORD, or SENTENCE to retrieve
 @param index an index within the text
 @return the letter, word, or sentence

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JSpinner.AccessibleJSpinner.getAfterIndex(int part, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the String after a given index.

 @param part the CHARACTER, WORD, or SENTENCE to retrieve
 @param index an index within the text
 @return the letter, word, or sentence

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JSpinner.AccessibleJSpinner.getBeforeIndex(int part, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the String before a given index.

 @param part the CHARACTER, WORD, or SENTENCE to retrieve
 @param index an index within the text
 @return the letter, word, or sentence

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.AttributeSet javax.swing.JSpinner.AccessibleJSpinner.getCharacterAttribute(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the AttributeSet for a given character at a given index

 @param i the zero-based index into the text 
 @return the AttributeSet of the character

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JSpinner.AccessibleJSpinner.getSelectionStart()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the start offset within the selected text.
 If there is no selection, but there is
 a caret, the start and end offsets will be the same.

 @return the index into the text of the start of the selection

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JSpinner.AccessibleJSpinner.getSelectionEnd()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the end offset within the selected text.
 If there is no selection, but there is
 a caret, the start and end offsets will be the same.

 @return the index into teh text of the end of the selection

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JSpinner.AccessibleJSpinner.getSelectedText()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the portion of the text that is selected. 

 @return the String portion of the text that is selected

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSpinner.AccessibleJSpinner.setTextContents(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the text contents to the specified string.

 @param s the string to set the text contents

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSpinner.AccessibleJSpinner.insertTextAtIndex(int index, String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified string at the given index/

 @param index the index in the text where the string will 
 be inserted
 @param s the string to insert in the text

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JSpinner.AccessibleJSpinner.getTextRange(int startIndex, int endIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the text string between two indices.
 
 @param startIndex the starting index in the text
 @param endIndex the ending index in the text
 @return the text string between the indices

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSpinner.AccessibleJSpinner.delete(int startIndex, int endIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Deletes the text between two indices

 @param startIndex the starting index in the text
 @param endIndex the ending index in the text

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSpinner.AccessibleJSpinner.cut(int startIndex, int endIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Cuts the text between two indices into the system clipboard.

 @param startIndex the starting index in the text
 @param endIndex the ending index in the text

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSpinner.AccessibleJSpinner.paste(int startIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Pastes the text from the system clipboard into the text
 starting at the specified index.

 @param startIndex the starting index in the text

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSpinner.AccessibleJSpinner.replaceText(int startIndex, int endIndex, String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Replaces the text between two indices with the specified
 string.

 @param startIndex the starting index in the text
 @param endIndex the ending index in the text
 @param s the string to replace the text between two indices

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSpinner.AccessibleJSpinner.selectText(int startIndex, int endIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Selects the text between two indices.

 @param startIndex the starting index in the text
 @param endIndex the ending index in the text

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JSpinner.AccessibleJSpinner.setAttributes(int startIndex, int endIndex, AttributeSet as)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets attributes for the text between two indices.

 @param startIndex the starting index in the text
 @param endIndex the ending index in the text
 @param as the attribute set
 @see AttributeSet

<!-- END DATA -->
