<!-- BEGIN KEY -->
public class javax.swing.JDialog extends java.awt.Dialog implements javax.swing.WindowConstants, javax.accessibility.Accessible, javax.swing.RootPaneContainer, javax.swing.TransferHandler.HasGetTransferHandler
<!-- END KEY -->
<!-- BEGIN DATA -->

 The main class for creating a dialog window. You can use this class
 to create a custom dialog, or invoke the many class methods
 in {@link JOptionPane} to create a variety of standard dialogs.
 For information about creating dialogs, see
 <em>The Java Tutorial</em> section
 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/components/dialog.html">How
 to Make Dialogs</a>.

 <p>

 The <code>JDialog</code> component contains a <code>JRootPane</code>
 as its only child.
 The <code>contentPane</code> should be the parent of any children of the
 <code>JDialog</code>. 
 As a convenience <code>add</code> and its variants, <code>remove</code> and
 <code>setLayout</code> have been overridden to forward to the
 <code>contentPane</code> as necessary. This means you can write:
 <pre>
       dialog.add(child);
 </pre>
 And the child will be added to the contentPane.
 The <code>contentPane</code> is always non-<code>null</code>.
 Attempting to set it to <code>null</code> generates an exception.
 The default <code>contentPane</code> has a <code>BorderLayout</code>
 manager set on it. 
 Refer to {@link javax.swing.RootPaneContainer}
 for details on adding, removing and setting the <code>LayoutManager</code>
 of a <code>JDialog</code>.
 <p>
 Please see the <code>JRootPane</code> documentation for a complete 
 description of the <code>contentPane</code>, <code>glassPane</code>, 
 and <code>layeredPane</code> components.
 <p>
 In a multi-screen environment, you can create a <code>JDialog</code>
 on a different screen device than its owner.  See {@link java.awt.Frame} for
 more information.
 <p>
 <strong>Warning:</strong> Swing is not thread safe. For more
 information see <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @see JOptionPane
 @see JRootPane
 @see javax.swing.RootPaneContainer

 @beaninfo
      attribute: isContainer true
      attribute: containerDelegate getContentPane
    description: A toplevel window for creating dialog boxes.

 @version 1.93 08/08/06
 @author David Kloba
 @author James Gosling
 @author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JRootPane javax.swing.JDialog.rootPane
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see #getRootPane
 @see #setRootPane

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JDialog.rootPaneCheckingEnabled
<!-- END KEY -->
<!-- BEGIN DATA -->
 If true then calls to <code>add</code> and <code>setLayout</code>
 will be forwarded to the <code>contentPane</code>. This is initially
 false, but is set to true when the <code>JDialog</code> is constructed.

 @see #isRootPaneCheckingEnabled
 @see #setRootPaneCheckingEnabled
 @see javax.swing.RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.TransferHandler javax.swing.JDialog.transferHandler
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>TransferHandler</code> for this dialog.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JDialog()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a modeless dialog without a title and without a specified
 <code>Frame</code> owner.  A shared, hidden frame will be
 set as the owner of the dialog.
 <p>
 This constructor sets the component's locale property to the value
 returned by <code>JComponent.getDefaultLocale</code>.     
 <p>
 NOTE: This constructor does not allow you to create an unowned
 <code>JDialog</code>. To create an unowned <code>JDialog</code>
 you must use either the <code>JDialog(Window)</code> or
 <code>JDialog(Dialog)</code> constructor with an argument of
 <code>null</code>.
 
 @exception HeadlessException if <code>GraphicsEnvironment.isHeadless()</code>
     returns <code>true</code>.
 @see java.awt.GraphicsEnvironment#isHeadless
 @see JComponent#getDefaultLocale

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JDialog(Frame owner)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a modeless dialog without a title with the
 specified <code>Frame</code> as its owner.  If <code>owner</code>
 is <code>null</code>, a shared, hidden frame will be set as the
 owner of the dialog.
 <p>
 This constructor sets the component's locale property to the value
 returned by <code>JComponent.getDefaultLocale</code>.
 <p>
 NOTE: This constructor does not allow you to create an unowned
 <code>JDialog</code>. To create an unowned <code>JDialog</code>
 you must use either the <code>JDialog(Window)</code> or
 <code>JDialog(Dialog)</code> constructor with an argument of
 <code>null</code>.

 @param owner the <code>Frame</code> from which the dialog is displayed
 @exception HeadlessException if <code>GraphicsEnvironment.isHeadless()</code>
     returns <code>true</code>.
 @see java.awt.GraphicsEnvironment#isHeadless
 @see JComponent#getDefaultLocale

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JDialog(Frame owner, boolean modal)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a dialog with the specified owner <code>Frame</code>, modality
 and an empty title. If <code>owner</code> is <code>null</code>, 
 a shared, hidden frame will be set as the owner of the dialog.
 <p>
 This constructor sets the component's locale property to the value
 returned by <code>JComponent.getDefaultLocale</code>.     
 <p>
 NOTE: This constructor does not allow you to create an unowned
 <code>JDialog</code>. To create an unowned <code>JDialog</code>
 you must use either the <code>JDialog(Window)</code> or
 <code>JDialog(Dialog)</code> constructor with an argument of
 <code>null</code>.

 @param owner the <code>Frame</code> from which the dialog is displayed
 @param modal specifies whether dialog blocks user input to other top-level 
     windows when shown. If <code>true</code>, the modality type property is set to 
     <code>DEFAULT_MODALITY_TYPE</code>, otherwise the dialog is modeless.     
 @exception HeadlessException if <code>GraphicsEnvironment.isHeadless()</code>
     returns <code>true</code>.
 @see java.awt.GraphicsEnvironment#isHeadless
 @see JComponent#getDefaultLocale

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JDialog(Frame owner, String title)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a modeless dialog with the specified title and
 with the specified owner frame.  If <code>owner</code>
 is <code>null</code>, a shared, hidden frame will be set as the
 owner of the dialog.
 <p>
 This constructor sets the component's locale property to the value
 returned by <code>JComponent.getDefaultLocale</code>.     
 <p>
 NOTE: This constructor does not allow you to create an unowned
 <code>JDialog</code>. To create an unowned <code>JDialog</code>
 you must use either the <code>JDialog(Window)</code> or
 <code>JDialog(Dialog)</code> constructor with an argument of
 <code>null</code>.

 @param owner the <code>Frame</code> from which the dialog is displayed
 @param title  the <code>String</code> to display in the dialog's
			title bar
 @exception HeadlessException if <code>GraphicsEnvironment.isHeadless()</code>
     returns <code>true</code>.
 @see java.awt.GraphicsEnvironment#isHeadless
 @see JComponent#getDefaultLocale

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JDialog(Frame owner, String title, boolean modal)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a dialog with the specified title, owner <code>Frame</code>
 and modality. If <code>owner</code> is <code>null</code>, 
 a shared, hidden frame will be set as the owner of this dialog.
 <p>
 This constructor sets the component's locale property to the value
 returned by <code>JComponent.getDefaultLocale</code>.     
 <p>
 NOTE: Any popup components (<code>JComboBox</code>,
 <code>JPopupMenu</code>, <code>JMenuBar</code>)
 created within a modal dialog will be forced to be lightweight.
 <p>
 NOTE: This constructor does not allow you to create an unowned
 <code>JDialog</code>. To create an unowned <code>JDialog</code>
 you must use either the <code>JDialog(Window)</code> or
 <code>JDialog(Dialog)</code> constructor with an argument of
 <code>null</code>.

 @param owner the <code>Frame</code> from which the dialog is displayed
 @param title  the <code>String</code> to display in the dialog's
     title bar
 @param modal specifies whether dialog blocks user input to other top-level 
     windows when shown. If <code>true</code>, the modality type property is set to 
     <code>DEFAULT_MODALITY_TYPE</code> otherwise the dialog is modeless 
 @exception HeadlessException if <code>GraphicsEnvironment.isHeadless()</code>
     returns <code>true</code>.
 
 @see java.awt.Dialog.ModalityType 
 @see java.awt.Dialog.ModalityType#MODELESS 
 @see java.awt.Dialog#DEFAULT_MODALITY_TYPE 
 @see java.awt.Dialog#setModal 
 @see java.awt.Dialog#setModalityType 
 @see java.awt.GraphicsEnvironment#isHeadless
 @see JComponent#getDefaultLocale

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JDialog(Frame owner, String title, boolean modal, GraphicsConfiguration gc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a dialog with the specified title, 
 owner <code>Frame</code>, modality and <code>GraphicsConfiguration</code>.
 If <code>owner</code> is <code>null</code>, 
 a shared, hidden frame will be set as the owner of this dialog.
 <p>
 This constructor sets the component's locale property to the value
 returned by <code>JComponent.getDefaultLocale</code>.     
 <p>
 NOTE: Any popup components (<code>JComboBox</code>,
 <code>JPopupMenu</code>, <code>JMenuBar</code>)
 created within a modal dialog will be forced to be lightweight.
 <p>
 NOTE: This constructor does not allow you to create an unowned
 <code>JDialog</code>. To create an unowned <code>JDialog</code>
 you must use either the <code>JDialog(Window)</code> or
 <code>JDialog(Dialog)</code> constructor with an argument of
 <code>null</code>.

 @param owner the <code>Frame</code> from which the dialog is displayed
 @param title  the <code>String</code> to display in the dialog's
     title bar
 @param modal specifies whether dialog blocks user input to other top-level 
     windows when shown. If <code>true</code>, the modality type property is set to 
     <code>DEFAULT_MODALITY_TYPE</code>, otherwise the dialog is modeless. 
 @param gc the <code>GraphicsConfiguration</code> 
     of the target screen device.  If <code>gc</code> is 
     <code>null</code>, the same
     <code>GraphicsConfiguration</code> as the owning Frame is used.    
 @exception HeadlessException if <code>GraphicsEnvironment.isHeadless()</code>
     returns <code>true</code>.       
 @see java.awt.Dialog.ModalityType 
 @see java.awt.Dialog.ModalityType#MODELESS 
 @see java.awt.Dialog#DEFAULT_MODALITY_TYPE 
 @see java.awt.Dialog#setModal 
 @see java.awt.Dialog#setModalityType 
 @see java.awt.GraphicsEnvironment#isHeadless
 @see JComponent#getDefaultLocale
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JDialog(Dialog owner)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a modeless dialog without a title with the
 specified <code>Dialog</code> as its owner.
 <p>
 This constructor sets the component's locale property to the value 
 returned by <code>JComponent.getDefaultLocale</code>.

 @param owner the owner <code>Dialog</code> from which the dialog is displayed
     or <code>null</code> if this dialog has no owner
 @exception HeadlessException <code>if GraphicsEnvironment.isHeadless()</code>
     returns <code>true</code>.
 @see java.awt.GraphicsEnvironment#isHeadless
 @see JComponent#getDefaultLocale

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JDialog(Dialog owner, boolean modal)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a dialog with the specified owner <code>Dialog</code> and modality.
 <p>
 This constructor sets the component's locale property to the value 
 returned by <code>JComponent.getDefaultLocale</code>.

 @param owner the owner <code>Dialog</code> from which the dialog is displayed
     or <code>null</code> if this dialog has no owner
 @param modal specifies whether dialog blocks user input to other top-level 
     windows when shown. If <code>true</code>, the modality type property is set to 
     <code>DEFAULT_MODALITY_TYPE</code>, otherwise the dialog is modeless.  
 @exception HeadlessException if <code>GraphicsEnvironment.isHeadless()</code>
     returns <code>true</code>.
 @see java.awt.Dialog.ModalityType 
 @see java.awt.Dialog.ModalityType#MODELESS 
 @see java.awt.Dialog#DEFAULT_MODALITY_TYPE 
 @see java.awt.Dialog#setModal 
 @see java.awt.Dialog#setModalityType 
 @see java.awt.GraphicsEnvironment#isHeadless
 @see JComponent#getDefaultLocale

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JDialog(Dialog owner, String title)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a modeless dialog with the specified title and
 with the specified owner dialog.
 <p>
 This constructor sets the component's locale property to the value 
 returned by <code>JComponent.getDefaultLocale</code>.

 @param owner the owner <code>Dialog</code> from which the dialog is displayed
     or <code>null</code> if this dialog has no owner
 @param title  the <code>String</code> to display in the dialog's
			title bar
 @exception HeadlessException if <code>GraphicsEnvironment.isHeadless()</code>
     returns <code>true</code>.
 @see java.awt.GraphicsEnvironment#isHeadless
 @see JComponent#getDefaultLocale

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JDialog(Dialog owner, String title, boolean modal)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a dialog with the specified title, modality 
 and the specified owner <code>Dialog</code>. 
 <p>
 This constructor sets the component's locale property to the value
 returned by <code>JComponent.getDefaultLocale</code>.     

 @param owner the owner <code>Dialog</code> from which the dialog is displayed
     or <code>null</code> if this dialog has no owner
 @param title  the <code>String</code> to display in the dialog's
	   title bar
 @param modal specifies whether dialog blocks user input to other top-level 
     windows when shown. If <code>true</code>, the modality type property is set to 
     <code>DEFAULT_MODALITY_TYPE</code>, otherwise the dialog is modeless 
 @exception HeadlessException if <code>GraphicsEnvironment.isHeadless()</code>
     returns <code>true</code>.
 @see java.awt.Dialog.ModalityType 
 @see java.awt.Dialog.ModalityType#MODELESS 
 @see java.awt.Dialog#DEFAULT_MODALITY_TYPE 
 @see java.awt.Dialog#setModal 
 @see java.awt.Dialog#setModalityType 
 @see java.awt.GraphicsEnvironment#isHeadless
 @see JComponent#getDefaultLocale

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JDialog(Dialog owner, String title, boolean modal, GraphicsConfiguration gc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a dialog with the specified title, owner <code>Dialog</code>, 
 modality and <code>GraphicsConfiguration</code>.
 
 <p>
 NOTE: Any popup components (<code>JComboBox</code>,
 <code>JPopupMenu</code>, <code>JMenuBar</code>)
 created within a modal dialog will be forced to be lightweight.
 <p>
 This constructor sets the component's locale property to the value
 returned by <code>JComponent.getDefaultLocale</code>.     

 @param owner the owner <code>Dialog</code> from which the dialog is displayed
     or <code>null</code> if this dialog has no owner
 @param title  the <code>String</code> to display in the dialog's
     title bar
 @param modal specifies whether dialog blocks user input to other top-level 
     windows when shown. If <code>true</code>, the modality type property is set to 
     <code>DEFAULT_MODALITY_TYPE</code>, otherwise the dialog is modeless 
 @param gc the <code>GraphicsConfiguration</code> 
     of the target screen device.  If <code>gc</code> is 
     <code>null</code>, the same
     <code>GraphicsConfiguration</code> as the owning Dialog is used.    
 @exception HeadlessException if <code>GraphicsEnvironment.isHeadless()</code> 
     returns <code>true</code>.
 @see java.awt.Dialog.ModalityType 
 @see java.awt.Dialog.ModalityType#MODELESS 
 @see java.awt.Dialog#DEFAULT_MODALITY_TYPE 
 @see java.awt.Dialog#setModal 
 @see java.awt.Dialog#setModalityType 
 @see java.awt.GraphicsEnvironment#isHeadless
 @see JComponent#getDefaultLocale
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JDialog(Window owner)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a modeless dialog with the specified owner <code>Window</code> and
 an empty title.
 <p>
 This constructor sets the component's locale property to the value
 returned by <code>JComponent.getDefaultLocale</code>.

 @param owner the <code>Window</code> from which the dialog is displayed or
     <code>null</code> if this dialog has no owner
 @exception HeadlessException when
    <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>

 @see java.awt.GraphicsEnvironment#isHeadless
 @see JComponent#getDefaultLocale
 
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JDialog(Window owner, Dialog.ModalityType modalityType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a dialog with the specified owner <code>Window</code>, modality
 and an empty title.
 <p>
 This constructor sets the component's locale property to the value 
 returned by <code>JComponent.getDefaultLocale</code>.

 @param owner the <code>Window</code> from which the dialog is displayed or
     <code>null</code> if this dialog has no owner
 @param modalityType specifies whether dialog blocks input to other
     windows when shown. <code>null</code> value and unsupported modality
     types are equivalent to <code>MODELESS</code>
 @exception HeadlessException when
    <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>

 @see java.awt.Dialog.ModalityType
 @see java.awt.Dialog#setModal
 @see java.awt.Dialog#setModalityType
 @see java.awt.GraphicsEnvironment#isHeadless
 @see JComponent#getDefaultLocale
 
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JDialog(Window owner, String title)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a modeless dialog with the specified title and owner
 <code>Window</code>.
 <p>
 This constructor sets the component's locale property to the value 
 returned by <code>JComponent.getDefaultLocale</code>.

 @param owner the <code>Window</code> from which the dialog is displayed or
     <code>null</code> if this dialog has no owner
 @param title the <code>String</code> to display in the dialog's
     title bar or <code>null</code> if the dialog has no title
 @exception java.awt.HeadlessException when
     <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>

 @see java.awt.GraphicsEnvironment#isHeadless
 @see JComponent#getDefaultLocale
 
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JDialog(Window owner, String title, Dialog.ModalityType modalityType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a dialog with the specified title, owner <code>Window</code> and
 modality.
 <p>
 This constructor sets the component's locale property to the value
 returned by <code>JComponent.getDefaultLocale</code>.     

 @param owner the <code>Window</code> from which the dialog is displayed or
     <code>null</code> if this dialog has no owner
 @param title the <code>String</code> to display in the dialog's
     title bar or <code>null</code> if the dialog has no title
 @param modalityType specifies whether dialog blocks input to other
     windows when shown. <code>null</code> value and unsupported modality
     types are equivalent to <code>MODELESS</code>
 @exception java.awt.HeadlessException when
     <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>

 @see java.awt.Dialog.ModalityType
 @see java.awt.Dialog#setModal
 @see java.awt.Dialog#setModalityType
 @see java.awt.GraphicsEnvironment#isHeadless
 @see JComponent#getDefaultLocale
 
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JDialog(Window owner, String title, Dialog.ModalityType modalityType, GraphicsConfiguration gc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a dialog with the specified title, owner <code>Window</code>,
 modality and <code>GraphicsConfiguration</code>.
 <p>
 NOTE: Any popup components (<code>JComboBox</code>,
 <code>JPopupMenu</code>, <code>JMenuBar</code>)
 created within a modal dialog will be forced to be lightweight.
 <p>
 This constructor sets the component's locale property to the value
 returned by <code>JComponent.getDefaultLocale</code>.     

 @param owner the <code>Window</code> from which the dialog is displayed or
     <code>null</code> if this dialog has no owner
 @param title the <code>String</code> to display in the dialog's
     title bar or <code>null</code> if the dialog has no title
 @param modalityType specifies whether dialog blocks input to other
     windows when shown. <code>null</code> value and unsupported modality
     types are equivalent to <code>MODELESS</code>
 @param gc the <code>GraphicsConfiguration</code> of the target screen device;
     if <code>null</code>, the <code>GraphicsConfiguration</code> from the owning
     window is used; if <code>owner</code> is also <code>null</code>, the
     system default <code>GraphicsConfiguration</code> is assumed
 @exception java.awt.HeadlessException when
    <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>

 @see java.awt.Dialog.ModalityType
 @see java.awt.Dialog#setModal
 @see java.awt.Dialog#setModalityType
 @see java.awt.GraphicsEnvironment#isHeadless
 @see JComponent#getDefaultLocale

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JDialog.dialogInit()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called by the constructors to init the <code>JDialog</code> properly.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JRootPane javax.swing.JDialog.createRootPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called by the constructor methods to create the default
 <code>rootPane</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JDialog.processWindowEvent(WindowEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Handles window events depending on the state of the
 <code>defaultCloseOperation</code> property.

 @see #setDefaultCloseOperation

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDialog.setDefaultCloseOperation(int operation)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Sets the operation that will happen by default when
 the user initiates a "close" on this dialog.
 You must specify one of the following choices:
 <p>
 <ul>
 <li><code>DO_NOTHING_ON_CLOSE</code>
 (defined in <code>WindowConstants</code>):
 Don't do anything; require the
 program to handle the operation in the <code>windowClosing</code>
 method of a registered <code>WindowListener</code> object.

 <li><code>HIDE_ON_CLOSE</code>
 (defined in <code>WindowConstants</code>):
 Automatically hide the dialog after
 invoking any registered <code>WindowListener</code>
 objects.

 <li><code>DISPOSE_ON_CLOSE</code>
 (defined in <code>WindowConstants</code>):
 Automatically hide and dispose the 
 dialog after invoking any registered <code>WindowListener</code>
 objects.
 </ul>
 <p>
 The value is set to <code>HIDE_ON_CLOSE</code> by default. Changes
 to the value of this property cause the firing of a property
 change event, with property name "defaultCloseOperation".
 <p>
 <b>Note</b>: When the last displayable window within the
 Java virtual machine (VM) is disposed of, the VM may
 terminate.  See <a href="../../java/awt/doc-files/AWTThreadIssues.html">
 AWT Threading Issues</a> for more information.

 @param operation the operation which should be performed when the
        user closes the dialog
 @throws IllegalArgumentException if defaultCloseOperation value 
         isn't one of the above valid values
 @see #addWindowListener
 @see #getDefaultCloseOperation
 @see WindowConstants

 @beaninfo
   preferred: true
       bound: true
        enum: DO_NOTHING_ON_CLOSE WindowConstants.DO_NOTHING_ON_CLOSE
              HIDE_ON_CLOSE       WindowConstants.HIDE_ON_CLOSE
              DISPOSE_ON_CLOSE    WindowConstants.DISPOSE_ON_CLOSE
 description: The dialog's default close operation.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JDialog.getDefaultCloseOperation()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the operation which occurs when the user
 initiates a "close" on this dialog.

 @return an integer indicating the window-close operation
 @see #setDefaultCloseOperation

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDialog.setTransferHandler(TransferHandler newHandler)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the {@code transferHandler} property, which is a mechanism to
 support transfer of data into this component. Use {@code null}
 if the component does not support data transfer operations.
 <p>
 If the system property {@code suppressSwingDropSupport} is {@code false}
 (the default) and the current drop target on this component is either
 {@code null} or not a user-set drop target, this method will change the
 drop target as follows: If {@code newHandler} is {@code null} it will
 clear the drop target. If not {@code null} it will install a new
 {@code DropTarget}.
 <p>
 Note: When used with {@code JDialog}, {@code TransferHandler} only
 provides data import capability, as the data export related methods
 are currently typed to {@code JComponent}.
 <p>
 Please see
 <a href="http://java.sun.com/docs/books/tutorial/uiswing/misc/dnd.html">
 How to Use Drag and Drop and Data Transfer</a>, a section in
 <em>The Java Tutorial</em>, for more information.
 
 @param newHandler the new {@code TransferHandler}

 @see TransferHandler
 @see #getTransferHandler
 @see java.awt.Component#setDropTarget
 @since 1.6

 @beaninfo
        bound: true
       hidden: true
  description: Mechanism for transfer of data into the component

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.TransferHandler javax.swing.JDialog.getTransferHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>transferHandler</code> property.

 @return the value of the <code>transferHandler</code> property

 @see TransferHandler
 @see #setTransferHandler
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDialog.update(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Calls <code>paint(g)</code>.  This method was overridden to 
 prevent an unnecessary call to clear the background.

 @param g  the <code>Graphics</code> context in which to paint

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDialog.setJMenuBar(JMenuBar menu)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the menubar for this dialog.

 @param menu the menubar being placed in the dialog

 @see #getJMenuBar

 @beaninfo
      hidden: true
 description: The menubar for accessing pulldown menus from this dialog.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuBar javax.swing.JDialog.getJMenuBar()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the menubar set on this dialog.

 @see #setJMenuBar

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JDialog.isRootPaneCheckingEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether calls to <code>add</code> and 
 <code>setLayout</code> are forwarded to the <code>contentPane</code>.

 @return true if <code>add</code> and <code>setLayout</code> 
         are fowarded; false otherwise

 @see #addImpl
 @see #setLayout
 @see #setRootPaneCheckingEnabled
 @see javax.swing.RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JDialog.setRootPaneCheckingEnabled(boolean enabled)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets whether calls to <code>add</code> and 
 <code>setLayout</code> are forwarded to the <code>contentPane</code>.
 
 @param enabled  true if <code>add</code> and <code>setLayout</code>
        are forwarded, false if they should operate directly on the
        <code>JDialog</code>.

 @see #addImpl
 @see #setLayout
 @see #isRootPaneCheckingEnabled
 @see javax.swing.RootPaneContainer
 @beaninfo
      hidden: true
 description: Whether the add and setLayout methods are forwarded

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JDialog.addImpl(Component comp, Object constraints, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified child <code>Component</code>.
 This method is overridden to conditionally forward calls to the
 <code>contentPane</code>.
 By default, children are added to the <code>contentPane</code> instead
 of the frame, refer to {@link javax.swing.RootPaneContainer} for
 details.
 
 @param comp the component to be enhanced
 @param constraints the constraints to be respected
 @param index the index
 @exception IllegalArgumentException if <code>index</code> is invalid
 @exception IllegalArgumentException if adding the container's parent
			to itself
 @exception IllegalArgumentException if adding a window to a container
 
 @see #setRootPaneCheckingEnabled
 @see javax.swing.RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDialog.remove(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Removes the specified component from the container. If
 <code>comp</code> is not the <code>rootPane</code>, this will forward
 the call to the <code>contentPane</code>. This will do nothing if
 <code>comp</code> is not a child of the <code>JDialog</code> or
 <code>contentPane</code>.

 @param comp the component to be removed
 @throws NullPointerException if <code>comp</code> is null
 @see #add
 @see javax.swing.RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDialog.setLayout(LayoutManager manager)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>LayoutManager</code>.
 Overridden to conditionally forward the call to the
 <code>contentPane</code>.
 Refer to {@link javax.swing.RootPaneContainer} for
 more information.

 @param manager the <code>LayoutManager</code>
 @see #setRootPaneCheckingEnabled
 @see javax.swing.RootPaneContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JRootPane javax.swing.JDialog.getRootPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>rootPane</code> object for this dialog.

 @see #setRootPane
 @see RootPaneContainer#getRootPane

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JDialog.setRootPane(JRootPane root)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>rootPane</code> property. 
 This method is called by the constructor.

 @param root the <code>rootPane</code> object for this dialog

 @see #getRootPane

 @beaninfo
   hidden: true
 description: the RootPane object for this dialog.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Container javax.swing.JDialog.getContentPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>contentPane</code> object for this dialog.

 @return the <code>contentPane</code> property

 @see #setContentPane
 @see RootPaneContainer#getContentPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDialog.setContentPane(Container contentPane)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>contentPane</code> property. 
 This method is called by the constructor.
 <p>
 Swing's painting architecture requires an opaque <code>JComponent</code>
 in the containment hiearchy. This is typically provided by the
 content pane. If you replace the content pane it is recommended you
 replace it with an opaque <code>JComponent</code>.
 @see JRootPane

 @param contentPane the <code>contentPane</code> object for this dialog

 @exception java.awt.IllegalComponentStateException (a runtime
            exception) if the content pane parameter is <code>null</code>
 @see #getContentPane
 @see RootPaneContainer#setContentPane

 @beaninfo
     hidden: true
     description: The client area of the dialog where child 
                  components are normally inserted.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JLayeredPane javax.swing.JDialog.getLayeredPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>layeredPane</code> object for this dialog.

 @return the <code>layeredPane</code> property

 @see #setLayeredPane
 @see RootPaneContainer#getLayeredPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDialog.setLayeredPane(JLayeredPane layeredPane)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>layeredPane</code> property.  
 This method is called by the constructor.

 @param layeredPane the new <code>layeredPane</code> property

 @exception java.awt.IllegalComponentStateException (a runtime
            exception) if the layered pane parameter is null
 @see #getLayeredPane
 @see RootPaneContainer#setLayeredPane

 @beaninfo
     hidden: true
     description: The pane which holds the various dialog layers.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JDialog.getGlassPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>glassPane</code> object for this dialog.

 @return the <code>glassPane</code> property

 @see #setGlassPane
 @see RootPaneContainer#getGlassPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDialog.setGlassPane(Component glassPane)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>glassPane</code> property. 
 This method is called by the constructor.

 @param glassPane the <code>glassPane</code> object for this dialog
 @see #getGlassPane
 @see RootPaneContainer#setGlassPane

 @beaninfo
     hidden: true
     description: A transparent pane used for menu rendering.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Graphics javax.swing.JDialog.getGraphics()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JDialog.repaint(long time, int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Repaints the specified rectangle of this component within
 <code>time</code> milliseconds.  Refer to <code>RepaintManager</code>
 for details on how the repaint is handled.
 
 @param     time   maximum time in milliseconds before update
 @param     x    the <i>x</i> coordinate
 @param     y    the <i>y</i> coordinate
 @param     width    the width
 @param     height   the height
 @see       RepaintManager
 @since     1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.JDialog.setDefaultLookAndFeelDecorated(boolean defaultLookAndFeelDecorated)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a hint as to whether or not newly created <code>JDialog</code>s
 should have their Window decorations (such as borders, widgets to
 close the window, title...) provided by the current look
 and feel. If <code>defaultLookAndFeelDecorated</code> is true,
 the current <code>LookAndFeel</code> supports providing window
 decorations, and the current window manager supports undecorated
 windows, then newly created <code>JDialog</code>s will have their
 Window decorations provided by the current <code>LookAndFeel</code>.
 Otherwise, newly created <code>JDialog</code>s will have their
 Window decorations provided by the current window manager.
 <p>
 You can get the same effect on a single JDialog by doing the following:
 <pre>
    JDialog dialog = new JDialog();
    dialog.setUndecorated(true);
    dialog.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
 </pre>

 @param defaultLookAndFeelDecorated A hint as to whether or not current
        look and feel should provide window decorations
 @see javax.swing.LookAndFeel#getSupportsWindowDecorations
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean javax.swing.JDialog.isDefaultLookAndFeelDecorated()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if newly created <code>JDialog</code>s should have their
 Window decorations provided by the current look and feel. This is only
 a hint, as certain look and feels may not support this feature.

 @return true if look and feel should provide Window decorations.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JDialog.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this <code>JDialog</code>.
 This method 
 is intended to be used only for debugging purposes, and the 
 content and format of the returned string may vary between      
 implementations. The returned string may be empty but may not 
 be <code>null</code>.
 
 @return  a string representation of this <code>JDialog</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JDialog.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleContext associated with this JDialog. 
 For JDialogs, the AccessibleContext takes the form of an 
 AccessibleJDialog. 
 A new AccessibleJDialog instance is created if necessary.

 @return an AccessibleJDialog that serves as the 
         AccessibleContext of this JDialog

<!-- END DATA -->
