<!-- BEGIN KEY -->
public class javax.swing.ToolTipManager extends java.awt.event.MouseAdapter implements java.awt.event.MouseMotionListener
<!-- END KEY -->
<!-- BEGIN DATA -->
 Manages all the <code>ToolTips</code> in the system.
 <p>
 ToolTipManager contains numerous properties for configuring how long it
 will take for the tooltips to become visible, and how long till they
 hide. Consider a component that has a different tooltip based on where
 the mouse is, such as JTree. When the mouse moves into the JTree and
 over a region that has a valid tooltip, the tooltip will become
 visibile after <code>initialDelay</code> milliseconds. After
 <code>dismissDelay</code> milliseconds the tooltip will be hidden. If
 the mouse is over a region that has a valid tooltip, and the tooltip
 is currently visible, when the mouse moves to a region that doesn't have
 a valid tooltip the tooltip will be hidden. If the mouse then moves back
 into a region that has a valid tooltip within <code>reshowDelay</code>
 milliseconds, the tooltip will immediately be shown, otherwise the
 tooltip will be shown again after <code>initialDelay</code> milliseconds.

 @see JComponent#createToolTip
 @version 1.74 05/12/06
 @author Dave Moore
 @author Rich Schiavi

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.setEnabled(boolean flag)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Enables or disables the tooltip.

 @param flag  true to enable the tip, false otherwise

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.ToolTipManager.isEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if this object is enabled.

 @return true if this object is enabled, false otherwise

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.setLightWeightPopupEnabled(boolean aFlag)
<!-- END KEY -->
<!-- BEGIN DATA -->
 When displaying the <code>JToolTip</code>, the
 <code>ToolTipManager</code> chooses to use a lightweight
 <code>JPanel</code> if it fits. This method allows you to
 disable this feature. You have to do disable it if your
 application mixes light weight and heavy weights components.

 @param aFlag true if a lightweight panel is desired, false otherwise


<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.ToolTipManager.isLightWeightPopupEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if lightweight (all-Java) <code>Tooltips</code>
 are in use, or false if heavyweight (native peer)
 <code>Tooltips</code> are being used.

 @return true if lightweight <code>ToolTips</code> are in use

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.setInitialDelay(int milliseconds)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Specifies the initial delay value.

 @param milliseconds  the number of milliseconds to delay
        (after the cursor has paused) before displaying the
        tooltip
 @see #getInitialDelay

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ToolTipManager.getInitialDelay()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the initial delay value.

 @return an integer representing the initial delay value,
		in milliseconds
 @see #setInitialDelay

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.setDismissDelay(int milliseconds)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Specifies the dismissal delay value.

 @param milliseconds  the number of milliseconds to delay
        before taking away the tooltip
 @see #getDismissDelay

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ToolTipManager.getDismissDelay()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the dismissal delay value.

 @return an integer representing the dismissal delay value, 
		in milliseconds
 @see #setDismissDelay

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.setReshowDelay(int milliseconds)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Used to specify the amount of time before the user has to wait
 <code>initialDelay</code> milliseconds before a tooltip will be
 shown. That is, if the tooltip is hidden, and the user moves into
 a region of the same Component that has a valid tooltip within
 <code>milliseconds</code> milliseconds the tooltip will immediately
 be shown. Otherwise, if the user moves into a region with a valid
 tooltip after <code>milliseconds</code> milliseconds, the user
 will have to wait an additional <code>initialDelay</code>
 milliseconds before the tooltip is shown again.

 @param milliseconds time in milliseconds
 @see #getReshowDelay

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.ToolTipManager.getReshowDelay()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the reshow delay property.

 @return reshown delay property
 @see #setReshowDelay

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.ToolTipManager javax.swing.ToolTipManager.sharedInstance()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a shared <code>ToolTipManager</code> instance.

 @return a shared <code>ToolTipManager</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.registerComponent(JComponent component)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Registers a component for tooltip management.
 <p>
 This will register key bindings to show and hide the tooltip text
 only if <code>component</code> has focus bindings. This is done
 so that components that are not normally focus traversable, such
 as <code>JLabel</code>, are not made focus traversable as a result
 of invoking this method.

 @param component  a <code>JComponent</code> object to add
 @see JComponent#isFocusTraversable

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.unregisterComponent(JComponent component)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a component from tooltip control.

 @param component  a <code>JComponent</code> object to remove

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.mouseEntered(MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Called when the mouse enters the region of a component.
  This determines whether the tool tip should be shown.

  @param event  the event in question

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.mouseExited(MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Called when the mouse exits the region of a component.
  Any tool tip showing should be hidden.

  @param event  the event in question

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.mousePressed(MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Called when the mouse is pressed.
  Any tool tip showing should be hidden.

  @param event  the event in question

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.mouseDragged(MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Called when the mouse is pressed and dragged.
  Does nothing.

  @param event  the event in question

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.ToolTipManager.mouseMoved(MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Called when the mouse is moved.
  Determines whether the tool tip should be displayed.

  @param event  the event in question

<!-- END DATA -->
