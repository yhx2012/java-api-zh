<!-- BEGIN KEY -->
public class javax.swing.JMenuBar extends javax.swing.JComponent implements javax.accessibility.Accessible, javax.swing.MenuElement
<!-- END KEY -->
<!-- BEGIN DATA -->
 An implementation of a menu bar. You add <code>JMenu</code> objects to the
 menu bar to construct a menu. When the user selects a <code>JMenu</code>
 object, its associated <code>JPopupMenu</code> is displayed, allowing the
 user to select one of the <code>JMenuItems</code> on it.
 <p>
 For information and examples of using menu bars see
 <a
 href="http://java.sun.com/docs/books/tutorial/uiswing/components/menu.html">How to Use Menus</a>,
 a section in <em>The Java Tutorial.</em>
 <p>
 <strong>Warning:</strong> Swing is not thread safe. For more
 information see <a
 href="package-summary.html#threading">Swing's Threading
 Policy</a>.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @beaninfo
   attribute: isContainer true
 description: A container for holding and displaying menus.

 @version 1.106 08/08/06
 @author Georges Saab
 @author David Karlton
 @author Arnaud Weber
 @see JMenu
 @see JPopupMenu
 @see JMenuItem

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenuBar()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new menu bar.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.MenuBarUI javax.swing.JMenuBar.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the menubar's current UI.
 @see #setUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.setUI(MenuBarUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the L&F object that renders this component.

 @param ui the new MenuBarUI L&F object
 @see UIDefaults#getUI
 @beaninfo
        bound: true
       hidden: true
    attribute: visualUpdate true
  description: The UI object that implements the Component's LookAndFeel. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets the UI property with a value from the current look and feel.

 @see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.JMenuBar.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of the L&F class that renders this component.

 @return the string "MenuBarUI"
 @see JComponent#getUIClassID
 @see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.SingleSelectionModel javax.swing.JMenuBar.getSelectionModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the model object that handles single selections.

 @return the <code>SingleSelectionModel</code> property
 @see SingleSelectionModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.setSelectionModel(SingleSelectionModel model)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the model object to handle single selections.

 @param model the <code>SingleSelectionModel</code> to use
 @see SingleSelectionModel
 @beaninfo
       bound: true
 description: The selection model, recording which child is selected.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenu javax.swing.JMenuBar.add(JMenu c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends the specified menu to the end of the menu bar.

 @param c the <code>JMenu</code> component to add
 @return the menu component

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenu javax.swing.JMenuBar.getMenu(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the menu at the specified position in the menu bar.

 @param index  an integer giving the position in the menu bar, where
               0 is the first position
 @return the <code>JMenu</code> at that position, or <code>null</code> if
 		if there is no <code>JMenu</code> at that position (ie. if
		it is a <code>JMenuItem</code>)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JMenuBar.getMenuCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of items in the menu bar.

 @return the number of items in the menu bar

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.setHelpMenu(JMenu menu)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the help menu that appears when the user selects the
 "help" option in the menu bar. This method is not yet implemented
 and will throw an exception.

 @param menu the JMenu that delivers help to the user

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JMenu javax.swing.JMenuBar.getHelpMenu()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the help menu for the menu bar.  This method is not yet 
 implemented and will throw an exception.

 @return the <code>JMenu</code> that delivers help to the user

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JMenuBar.getComponentAtIndex(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the component at the specified index.

 @param i an integer specifying the position, where 0 is first
 @return the <code>Component</code> at the position,
		or <code>null</code> for an invalid index
 @deprecated replaced by <code>getComponent(int i)</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JMenuBar.getComponentIndex(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the index of the specified component.

 @param c  the <code>Component</code> to find
 @return an integer giving the component's position, where 0 is first;
		or -1 if it can't be found

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.setSelected(Component sel)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the currently selected component, producing a
 a change to the selection model.

 @param sel the <code>Component</code> to select

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JMenuBar.isSelected()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the menu bar currently has a component selected.

 @return true if a selection has been made, else false

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JMenuBar.isBorderPainted()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns true if the menu bars border should be painted.

 @return  true if the border should be painted, else false

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.setBorderPainted(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets whether the border should be painted.

 @param b if true and border property is not <code>null</code>,
		the border is painted.
 @see #isBorderPainted
 @beaninfo
        bound: true
    attribute: visualUpdate true
  description: Whether the border should be painted.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.JMenuBar.paintBorder(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paints the menubar's border if <code>BorderPainted</code>
 property is true.
 
 @param g the <code>Graphics</code> context to use for painting
 @see JComponent#paint
 @see JComponent#setBorder

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.setMargin(Insets m)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the margin between the menubar's border and
 its menus. Setting to <code>null</code> will cause the menubar to
 use the default margins.

 @param m an Insets object containing the margin values
 @see Insets
 @beaninfo
        bound: true
    attribute: visualUpdate true
  description: The space between the menubar's border and its contents

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.JMenuBar.getMargin()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the margin between the menubar's border and
 its menus.  If there is no previous margin, it will create
 a default margin with zero size.
 
 @return an <code>Insets</code> object containing the margin values
 @see Insets

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.processMouseEvent(MouseEvent event, javax.swing.MenuElement[] path, MenuSelectionManager manager)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Implemented to be a <code>MenuElement</code> -- does nothing. 

 @see #getSubElements

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.processKeyEvent(KeyEvent e, javax.swing.MenuElement[] path, MenuSelectionManager manager)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Implemented to be a <code>MenuElement</code> -- does nothing.

 @see #getSubElements

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.menuSelectionChanged(boolean isIncluded)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Implemented to be a <code>MenuElement</code> -- does nothing.

 @see #getSubElements

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.MenuElement[] javax.swing.JMenuBar.getSubElements()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Implemented to be a <code>MenuElement</code> -- returns the
 menus in this menu bar.
 This is the reason for implementing the <code>MenuElement</code>
 interface -- so that the menu bar can be treated the same as
 other menu elements.
 @return an array of menu items in the menu bar.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component javax.swing.JMenuBar.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Implemented to be a <code>MenuElement</code>. Returns this object. 

 @return the current <code>Component</code> (this)
 @see #getSubElements

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.JMenuBar.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this <code>JMenuBar</code>.
 This method 
 is intended to be used only for debugging purposes, and the 
 content and format of the returned string may vary between      
 implementations. The returned string may be empty but may not 
 be <code>null</code>.
 
 @return  a string representation of this <code>JMenuBar</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.JMenuBar.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleContext associated with this JMenuBar. 
 For JMenuBars, the AccessibleContext takes the form of an 
 AccessibleJMenuBar. 
 A new AccessibleJMenuBar instance is created if necessary.

 @return an AccessibleJMenuBar that serves as the 
         AccessibleContext of this JMenuBar

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.JMenuBar.processKeyBinding(KeyStroke ks, KeyEvent e, int condition, boolean pressed)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Subclassed to check all the child menus.
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>JComponent.addNotify</code> to register this
 menu bar with the current keyboard manager.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JMenuBar.removeNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides <code>JComponent.removeNotify</code> to unregister this
 menu bar with the current keyboard manager.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.JMenuBar.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 See JComponent.readObject() for information about serialization
 in Swing.

<!-- END DATA -->
