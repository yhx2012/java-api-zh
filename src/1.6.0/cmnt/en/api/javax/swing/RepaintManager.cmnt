<!-- BEGIN KEY -->
public class javax.swing.RepaintManager extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class manages repaint requests, allowing the number
 of repaints to be minimized, for example by collapsing multiple 
 requests into a single repaint for members of a component tree.
 <p>
 As of 1.6 <code>RepaintManager</code> handles repaint requests
 for Swing's top level components (<code>JApplet</code>,
 <code>JWindow</code>, <code>JFrame</code> and <code>JDialog</code>). 
 Any calls to <code>repaint</code> on one of these will call into the
 appropriate <code>addDirtyRegion</code> method.

 @version 1.69 07/18/06
 @author Arnaud Weber

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.RepaintManager()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Create a new RepaintManager instance. You rarely call this constructor.
 directly. To get the default RepaintManager, use 
 RepaintManager.currentManager(JComponent) (normally "this").

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.RepaintManager javax.swing.RepaintManager.currentManager(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Return the RepaintManager for the calling thread given a Component.
 
 @param c a Component -- unused in the default implementation, but could
          be used by an overridden version to return a different RepaintManager
          depending on the Component
 @return the RepaintManager object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.RepaintManager javax.swing.RepaintManager.currentManager(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the RepaintManager for the calling thread given a JComponent.
 <p>
 Note: This method exists for backward binary compatibility with earlier
 versions of the Swing library. It simply returns the result returned by
 {@link #currentManager(Component)}. 

 @param c a JComponent -- unused
 @return the RepaintManager object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.RepaintManager.setCurrentManager(RepaintManager aRepaintManager)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the RepaintManager that should be used for the calling 
 thread. <b>aRepaintManager</b> will become the current RepaintManager
 for the calling thread's thread group.
 @param aRepaintManager  the RepaintManager object to use

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.RepaintManager.addInvalidComponent(JComponent invalidComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Mark the component as in need of layout and queue a runnable
 for the event dispatching thread that will validate the components
 first isValidateRoot() ancestor. 
 
 @see JComponent#isValidateRoot
 @see #removeInvalidComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.swing.RepaintManager.removeInvalidComponent(JComponent component)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Remove a component from the list of invalid components.
 
 @see #addInvalidComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.RepaintManager.addDirtyRegion(JComponent c, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Add a component in the list of components that should be refreshed.
 If <i>c</i> already has a dirty region, the rectangle <i>(x,y,w,h)</i> 
 will be unioned with the region that should be redrawn. 
 
 @param c Component to repaint, null results in nothing happening.
 @param x X coordinate of the region to repaint
 @param y Y coordinate of the region to repaint
 @param w Width of the region to repaint
 @param h Height of the region to repaint
 @see JComponent#repaint

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.RepaintManager.addDirtyRegion(Window window, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Adds <code>window</code> to the list of <code>Component</code>s that
 need to be repainted.
 
 @param window Window to repaint, null results in nothing happening.
 @param x X coordinate of the region to repaint
 @param y Y coordinate of the region to repaint
 @param w Width of the region to repaint
 @param h Height of the region to repaint
 @see JFrame#repaint
 @see JWindow#repaint
 @see JDialog#repaint
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.RepaintManager.addDirtyRegion(Applet applet, int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Adds <code>applet</code> to the list of <code>Component</code>s that
 need to be repainted.
 
 @param applet Applet to repaint, null results in nothing happening.
 @param x X coordinate of the region to repaint
 @param y Y coordinate of the region to repaint
 @param w Width of the region to repaint
 @param h Height of the region to repaint
 @see JApplet#repaint
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.RepaintManager.getDirtyRegion(JComponent aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->
Return the current dirty region for a component.
  Return an empty rectangle if the component is not
  dirty.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.RepaintManager.markCompletelyDirty(JComponent aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Mark a component completely dirty. <b>aComponent</b> will be
 completely painted during the next paintDirtyRegions() call.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.RepaintManager.markCompletelyClean(JComponent aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Mark a component completely clean. <b>aComponent</b> will not
 get painted during the next paintDirtyRegions() call.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.RepaintManager.isCompletelyDirty(JComponent aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Convenience method that returns true if <b>aComponent</b> will be completely
 painted during the next paintDirtyRegions(). If computing dirty regions is
 expensive for your component, use this method and avoid computing dirty region
 if it return true.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.RepaintManager.validateInvalidComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Validate all of the components that have been marked invalid.
 @see #addInvalidComponent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.RepaintManager.paintDirtyRegions()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paint all of the components that have been marked dirty.
 
 @see #addDirtyRegion

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String javax.swing.RepaintManager.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string that displays and identifies this
 object's properties.

 @return a String representation of this object

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Image javax.swing.RepaintManager.getOffscreenBuffer(Component c, int proposedWidth, int proposedHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the offscreen buffer that should be used as a double buffer with 
 the component <code>c</code>.
 By default there is a double buffer per RepaintManager.
 The buffer might be smaller than <code>(proposedWidth,proposedHeight)</code>
 This happens when the maximum double buffer size as been set for the receiving
 repaint manager.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Image javax.swing.RepaintManager.getVolatileOffscreenBuffer(Component c, int proposedWidth, int proposedHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return a volatile offscreen buffer that should be used as a
 double buffer with the specified component <code>c</code>.
 The image returned will be an instance of VolatileImage, or null
 if a VolatileImage object could not be instantiated.
 This buffer might be smaller than <code>(proposedWidth,proposedHeight)</code>.
 This happens when the maximum double buffer size has been set for this
 repaint manager.

 @see java.awt.image.VolatileImage
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.RepaintManager.setDoubleBufferMaximumSize(Dimension d)
<!-- END KEY -->
<!-- BEGIN DATA -->
Set the maximum double buffer size. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.RepaintManager.getDoubleBufferMaximumSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the maximum double buffer size.

 @return a Dimension object representing the maximum size

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.RepaintManager.setDoubleBufferingEnabled(boolean aFlag)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Enables or disables double buffering in this RepaintManager.
 CAUTION: The default value for this property is set for optimal
 paint performance on the given platform and it is not recommended
 that programs modify this property directly.

 @param aFlag  true to activate double buffering
 @see #isDoubleBufferingEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.RepaintManager.isDoubleBufferingEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if this RepaintManager is double buffered.
 The default value for this property may vary from platform
 to platform.  On platforms where native double buffering
 is supported in the AWT, the default value will be <code>false</code>
 to avoid unnecessary buffering in Swing.
 On platforms where native double buffering is not supported,
 the default value will be <code>true</code>.

 @return true if this object is double buffered

<!-- END DATA -->
