<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicTabbedPaneUI extends javax.swing.plaf.TabbedPaneUI implements javax.swing.SwingConstants
<!-- END KEY -->
<!-- BEGIN DATA -->
 A Basic L&F implementation of TabbedPaneUI.

 @version 1.87 06/08/99
 @author Amy Fowler
 @author Philip Milne
 @author Steve Wilson
 @author Tom Santos
 @author Dave Moore

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.KeyStroke javax.swing.plaf.basic.BasicTabbedPaneUI.upKey
<!-- END KEY -->
<!-- BEGIN DATA -->
 As of Java 2 platform v1.3 this previously undocumented field is no
 longer used.
 Key bindings are now defined by the LookAndFeel, please refer to
 the key bindings specification for further details.

 @deprecated As of Java 2 platform v1.3.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.KeyStroke javax.swing.plaf.basic.BasicTabbedPaneUI.downKey
<!-- END KEY -->
<!-- BEGIN DATA -->
 As of Java 2 platform v1.3 this previously undocumented field is no
 longer used.
 Key bindings are now defined by the LookAndFeel, please refer to
 the key bindings specification for further details.

 @deprecated As of Java 2 platform v1.3.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.KeyStroke javax.swing.plaf.basic.BasicTabbedPaneUI.leftKey
<!-- END KEY -->
<!-- BEGIN DATA -->
 As of Java 2 platform v1.3 this previously undocumented field is no
 longer used.
 Key bindings are now defined by the LookAndFeel, please refer to
 the key bindings specification for further details.

 @deprecated As of Java 2 platform v1.3.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.KeyStroke javax.swing.plaf.basic.BasicTabbedPaneUI.rightKey
<!-- END KEY -->
<!-- BEGIN DATA -->
 As of Java 2 platform v1.3 this previously undocumented field is no
 longer used.
 Key bindings are now defined by the LookAndFeel, please refer to
 the key bindings specification for further details.

 @deprecated As of Java 2 platform v1.3.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient java.awt.Rectangle javax.swing.plaf.basic.BasicTabbedPaneUI.calcRect
<!-- END KEY -->
<!-- BEGIN DATA -->
 A rectangle used for general layout calculations in order
 to avoid constructing many new Rectangles on the fly.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.LayoutManager javax.swing.plaf.basic.BasicTabbedPaneUI.createLayoutManager()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked by <code>installUI</code> to create
 a layout manager object to manage
 the <code>JTabbedPane</code>.

 @return a layout manager object

 @see TabbedPaneLayout
 @see javax.swing.JTabbedPane#getTabLayoutPolicy

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTabbedPaneUI.installComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates and installs any required subcomponents for the JTabbedPane.
 Invoked by installUI.

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JButton javax.swing.plaf.basic.BasicTabbedPaneUI.createScrollButton(int direction)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates and returns a JButton that will provide the user
 with a way to scroll the tabs in a particular direction. The
 returned JButton must be instance of UIResource.

 @param direction One of the SwingConstants constants:
 SOUTH, NORTH, EAST or WEST
 @return Widget for user to 
 @see javax.swing.JTabbedPane#setTabPlacement
 @see javax.swing.SwingConstants
 @throws IllegalArgumentException if direction is not one of
         NORTH, SOUTH, EAST or WEST
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTabbedPaneUI.uninstallComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes any installed subcomponents from the JTabbedPane.
 Invoked by uninstallUI.

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTabbedPaneUI.setRolloverTab(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the tab the mouse is currently over to <code>index</code>.
 <code>index</code> will be -1 if the mouse is no longer over any
 tab. No checking is done to ensure the passed in index identifies a
 valid tab.

 @param index Index of the tab the mouse is over.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTabbedPaneUI.getRolloverTab()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the tab the mouse is currently over, or {@code -1} if the mouse is no
 longer over any tab.

 @return the tab the mouse is currently over, or {@code -1} if the mouse is no
 longer over any tab
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicTabbedPaneUI.getBaseline(JComponent c, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the baseline.

 @throws NullPointerException {@inheritDoc}
 @throws IllegalArgumentException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component.BaselineResizeBehavior javax.swing.plaf.basic.BasicTabbedPaneUI.getBaselineResizeBehavior(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an enum indicating how the baseline of the component
 changes as the size changes.

 @throws NullPointerException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTabbedPaneUI.getBaseline(int tab)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the baseline for the specified tab.

 @param tab index of tab to get baseline for
 @exception IndexOutOfBoundsException if index is out of range 
            (index < 0 || index >= tab count)
 @return baseline or a value &lt; 0 indicating there is no reasonable
                  baseline
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTabbedPaneUI.getBaselineOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the amount the baseline is offset by.  This is typically
 the same as <code>getTabLabelShiftY</code>.

 @return amount to offset the baseline by
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTabbedPaneUI.paintTabArea(Graphics g, int tabPlacement, int selectedIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paints the tabs in the tab area.
 Invoked by paint().
 The graphics parameter must be a valid <code>Graphics</code>
 object.  Tab placement may be either: 
 <code>JTabbedPane.TOP</code>, <code>JTabbedPane.BOTTOM</code>,
 <code>JTabbedPane.LEFT</code>, or <code>JTabbedPane.RIGHT</code>.
 The selected index must be a valid tabbed pane tab index (0 to
 tab count - 1, inclusive) or -1 if no tab is currently selected.
 The handling of invalid parameters is unspecified.

 @param g the graphics object to use for rendering
 @param tabPlacement the placement for the tabs within the JTabbedPane
 @param selectedIndex the tab index of the selected component

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTabbedPaneUI.paintTabBorder(Graphics g, int tabPlacement, int tabIndex, int x, int y, int w, int h, boolean isSelected)
<!-- END KEY -->
<!-- BEGIN DATA -->
 this function draws the border around each tab
 note that this function does now draw the background of the tab.
 that is done elsewhere

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.plaf.basic.BasicTabbedPaneUI.getTabBounds(JTabbedPane pane, int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the bounds of the specified tab index.  The bounds are
 with respect to the JTabbedPane's coordinate space.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicTabbedPaneUI.tabForCoordinate(JTabbedPane pane, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the tab index which intersects the specified point
 in the JTabbedPane's coordinate space.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.plaf.basic.BasicTabbedPaneUI.getTabBounds(int tabIndex, Rectangle dest)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the bounds of the specified tab in the coordinate space
 of the JTabbedPane component.  This is required because the tab rects
 are by default defined in the coordinate space of the component where
 they are rendered, which could be the JTabbedPane
 (for WRAP_TAB_LAYOUT) or a ScrollableTabPanel (SCROLL_TAB_LAYOUT).
 This method should be used whenever the tab rectangle must be relative
 to the JTabbedPane itself and the result should be placed in a
 designated Rectangle object (rather than instantiating and returning
 a new Rectangle each time). The tab index parameter must be a valid 
 tabbed pane tab index (0 to tab count - 1, inclusive).  The destination
 rectangle parameter must be a valid <code>Rectangle</code> instance.
 The handling of invalid parameters is unspecified.

 @param tabIndex the index of the tab
 @param dest the rectangle where the result should be placed
 @return the resulting rectangle

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.text.View javax.swing.plaf.basic.BasicTabbedPaneUI.getTextViewForTab(int tabIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the text View object required to render stylized text (HTML) for
 the specified tab or null if no specialized text rendering is needed
 for this tab. This is provided to support html rendering inside tabs.

 @param tabIndex the index of the tab
 @return the text view to render the tab's text or null if no
         specialized rendering is required

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTabbedPaneUI.getFocusIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the index of the tab that has focus.

 @return index of tab that has focus
 @since 1.5

<!-- END DATA -->
