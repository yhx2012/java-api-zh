<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicSliderUI extends javax.swing.plaf.SliderUI
<!-- END KEY -->
<!-- BEGIN DATA -->
 A Basic L&F implementation of SliderUI.

 @version 1.107 11/17/05
 @author Tom Santos

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicSliderUI.isDragging()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the user is dragging the slider.

 @return true if the user is dragging the slider
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicSliderUI.getBaseline(JComponent c, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the baseline.

 @throws NullPointerException {@inheritDoc}
 @throws IllegalArgumentException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component.BaselineResizeBehavior javax.swing.plaf.basic.BasicSliderUI.getBaselineResizeBehavior(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an enum indicating how the baseline of the component
 changes as the size changes.

 @throws NullPointerException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicSliderUI.labelsHaveSameBaselines()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if all the labels from the label table have the same
 baseline.

 @return true if all the labels from the label table have the
         same baseline
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicSliderUI.getTickLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the height of the tick area for horizontal sliders and the width of the
 tick area for vertical sliders.  BasicSliderUI uses the returned value to
 determine the tick area rectangle.  If you want to give your ticks some room,
 make this larger than you need and paint your ticks away from the sides in paintTicks().

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Integer javax.swing.plaf.basic.BasicSliderUI.getHighestValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the biggest value that has an entry in the label table.

 @return biggest value that has an entry in the label table, or
         null.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Integer javax.swing.plaf.basic.BasicSliderUI.getLowestValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the smallest value that has an entry in the label table.

 @return smallest value that has an entry in the label table, or
         null.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.plaf.basic.BasicSliderUI.getLowestValueLabel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the label that corresponds to the highest slider value in the label table.
 @see JSlider#setLabelTable

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.plaf.basic.BasicSliderUI.getHighestValueLabel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the label that corresponds to the lowest slider value in the label table.
 @see JSlider#setLabelTable

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSliderUI.paintHorizontalLabel(Graphics g, int value, Component label)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called for every label in the label table.  Used to draw the labels for horizontal sliders.
 The graphics have been translated to labelRect.y already.
 @see JSlider#setLabelTable

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSliderUI.paintVerticalLabel(Graphics g, int value, Component label)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called for every label in the label table.  Used to draw the labels for vertical sliders.
 The graphics have been translated to labelRect.x already.
 @see JSlider#setLabelTable

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSliderUI.scrollDueToClickInTrack(int dir)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This function is called when a mousePressed was detected in the track, not
 in the thumb.  The default behavior is to scroll by block.  You can
  override this method to stop it from scrolling or to add additional behavior.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicSliderUI.yPositionForValue(int value, int trackY, int trackHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the y location for the specified value.  No checking is
 done on the arguments.  In particular if <code>trackHeight</code> is
 negative undefined results may occur.

 @param value the slider value to get the location for
 @param trackY y-origin of the track
 @param trackHeight the height of the track
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicSliderUI.valueForYPosition(int yPos)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a value give a y position.  If yPos is past the track at the top or the
 bottom it will set the value to the min or max of the slider, depending if the
 slider is inverted or not.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicSliderUI.valueForXPosition(int xPos)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a value give an x position.  If xPos is past the track at the left or the
 right it will set the value to the min or max of the slider, depending if the
 slider is inverted or not.

<!-- END DATA -->
