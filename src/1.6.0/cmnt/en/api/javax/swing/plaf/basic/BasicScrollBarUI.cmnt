<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicScrollBarUI extends javax.swing.plaf.ScrollBarUI implements java.awt.LayoutManager, javax.swing.SwingConstants
<!-- END KEY -->
<!-- BEGIN DATA -->
 Implementation of ScrollBarUI for the Basic Look and Feel

 @version 1.87 11/17/05
 @author Rich Schiavi
 @author David Kloba
 @author Hans Muller

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicScrollBarUI.setThumbRollover(boolean active)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets whether or not the mouse is currently over the thumb.

 @param active True indicates the thumb is currently active.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.basic.BasicScrollBarUI.isThumbRollover()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the mouse is currently over the thumb.

 @return true if the thumb is currently active
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicScrollBarUI.getPreferredSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 A vertical scrollbar's preferred width is the maximum of 
 preferred widths of the (non <code>null</code>)
 increment/decrement buttons,
 and the minimum width of the thumb. The preferred height is the 
 sum of the preferred heights of the same parts.  The basis for 
 the preferred size of a horizontal scrollbar is similar. 
 <p>
 The <code>preferredSize</code> is only computed once, subsequent
 calls to this method just return a cached size.
 
 @param c the <code>JScrollBar</code> that's delegating this method to us
 @return the preferred size of a Basic JScrollBar
 @see #getMaximumSize
 @see #getMinimumSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicScrollBarUI.getMaximumSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @param c The JScrollBar that's delegating this method to us.
 @return new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE);
 @see #getMinimumSize
 @see #getPreferredSize

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Dimension javax.swing.plaf.basic.BasicScrollBarUI.getMinimumThumbSize()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Return the smallest acceptable size for the thumb.  If the scrollbar
 becomes so small that this size isn't available, the thumb will be
 hidden.  
 <p>
 <b>Warning </b>: the value returned by this method should not be
 be modified, it's a shared static constant.

 @return The smallest acceptable size for the thumb.
 @see #getMaximumThumbSize

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Dimension javax.swing.plaf.basic.BasicScrollBarUI.getMaximumThumbSize()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Return the largest acceptable size for the thumb.  To create a fixed 
 size thumb one make this method and <code>getMinimumThumbSize</code> 
 return the same value.
 <p>
 <b>Warning </b>: the value returned by this method should not be
 be modified, it's a shared static constant.

 @return The largest acceptable size for the thumb.
 @see #getMinimumThumbSize

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicScrollBarUI.setThumbBounds(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the bounds of the thumb and force a repaint that includes
 the old thumbBounds and the new one.

 @see #getThumbBounds

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.plaf.basic.BasicScrollBarUI.getThumbBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the current size/location of the thumb.
 <p>
 <b>Warning </b>: the value returned by this method should not be
 be modified, it's a reference to the actual rectangle, not a copy.

 @return The current size/location of the thumb.
 @see #setThumbBounds

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.plaf.basic.BasicScrollBarUI.getTrackBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current bounds of the track, i.e. the space in between
 the increment and decrement buttons, less the insets.  The value
 returned by this method is updated each time the scrollbar is
 laid out (validated).
 <p>
 <b>Warning </b>: the value returned by this method should not be
 be modified, it's a reference to the actual rectangle, not a copy.

 @return the current bounds of the scrollbar track
 @see #layoutContainer

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.basic.BasicScrollBarUI.getSupportsAbsolutePositioning()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates whether the user can absolutely position the thumb with
 a mouse gesture (usually the middle mouse button).

 @return true if a mouse gesture can absolutely position the thumb
 @since 1.5

<!-- END DATA -->
