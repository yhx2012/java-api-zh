<!-- BEGIN KEY -->
public class javax.swing.plaf.metal.MetalTreeUI extends javax.swing.plaf.basic.BasicTreeUI
<!-- END KEY -->
<!-- BEGIN DATA -->
 The metal look and feel implementation of <code>TreeUI</code>.
 <p>
 <code>MetalTreeUI</code> allows for configuring how to
 visually render the spacing and delineation between nodes. The following
 hints are supported:

 <table summary="Descriptions of supported hints: Angled, Horizontal, and None">
  <tr>
    <th><p align="left">Angled</p></th>
    <td>A line is drawn connecting the child to the parent. For handling
          of the root node refer to
          {@link javax.swing.JTree#setRootVisible} and
          {@link javax.swing.JTree#setShowsRootHandles}.
    </td>
  </tr>
  <tr>
     <th><p align="left">Horizontal</p></th>
     <td>A horizontal line is drawn dividing the children of the root node.</td>
  </tr>
  <tr>
      <th><p align="left">None</p></th>
      <td>Do not draw any visual indication between nodes.</td>
  </tr>
 </table>

 <p>
 As it is typically impratical to obtain the <code>TreeUI</code> from
 the <code>JTree</code> and cast to an instance of <code>MetalTreeUI</code>
 you enable this property via the client property
 <code>JTree.lineStyle</code>. For example, to switch to
 <code>Horizontal</code> style you would do:
 <code>tree.putClientProperty("JTree.lineStyle", "Horizontal");</code>
 <p>
 The default is <code>Angled</code>.

 @version 1.24 11/17/05
 @author Tom Santos
 @author Steve Wilson (value add stuff)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.metal.MetalTreeUI.decodeLineStyle(Object lineStyleFlag)
<!-- END KEY -->
<!-- BEGIN DATA -->
this function converts between the string passed into the client property
 and the internal representation (currently and int)


<!-- END DATA -->
