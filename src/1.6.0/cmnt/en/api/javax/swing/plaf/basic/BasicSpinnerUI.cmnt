<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicSpinnerUI extends javax.swing.plaf.SpinnerUI
<!-- END KEY -->
<!-- BEGIN DATA -->
 The default Spinner UI delegate.

 @version 1.28 04/10/06
 @author Hans Muller
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JSpinner javax.swing.plaf.basic.BasicSpinnerUI.spinner
<!-- END KEY -->
<!-- BEGIN DATA -->
 The spinner that we're a UI delegate for.  Initialized by 
 the <code>installUI</code> method, and reset to null
 by <code>uninstallUI</code>.
 
 @see #installUI
 @see #uninstallUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ComponentUI javax.swing.plaf.basic.BasicSpinnerUI.createUI(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a new instance of BasicSpinnerUI.  SpinnerListUI 
 delegates are allocated one per JSpinner.  
 
 @param c the JSpinner (not used)
 @see ComponentUI#createUI
 @return a new BasicSpinnerUI object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicSpinnerUI.installUI(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Calls <code>installDefaults</code>, <code>installListeners</code>,
 and then adds the components returned by <code>createNextButton</code>,
 <code>createPreviousButton</code>, and <code>createEditor</code>.
 
 @param c the JSpinner
 @see #installDefaults
 @see #installListeners
 @see #createNextButton
 @see #createPreviousButton
 @see #createEditor

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicSpinnerUI.uninstallUI(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Calls <code>uninstallDefaults</code>, <code>uninstallListeners</code>,
 and then removes all of the spinners children.
 
 @param c the JSpinner (not used)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSpinnerUI.installListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Initializes <code>PropertyChangeListener</code> with 
 a shared object that delegates interesting PropertyChangeEvents
 to protected methods.
 <p>
 This method is called by <code>installUI</code>.
 
 @see #replaceEditor
 @see #uninstallListeners

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSpinnerUI.uninstallListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the <code>PropertyChangeListener</code> added
 by installListeners.
 <p>
 This method is called by <code>uninstallUI</code>.
 
 @see #installListeners

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSpinnerUI.installDefaults()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Initialize the <code>JSpinner</code> <code>border</code>, 
 <code>foreground</code>, and <code>background</code>, properties 
 based on the corresponding "Spinner.*" properties from defaults table.  
 The <code>JSpinners</code> layout is set to the value returned by
 <code>createLayout</code>.  This method is called by <code>installUI</code>.

 @see #uninstallDefaults
 @see #installUI
 @see #createLayout
 @see LookAndFeel#installBorder
 @see LookAndFeel#installColors

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSpinnerUI.uninstallDefaults()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>JSpinner's</code> layout manager to null.  This
 method is called by <code>uninstallUI</code>.
 
 @see #installDefaults
 @see #uninstallUI

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSpinnerUI.installNextButtonListeners(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Installs the necessary listeners on the next button, <code>c</code>,
 to update the <code>JSpinner</code> in response to a user gesture.

 @param c Component to install the listeners on
 @throws NullPointerException if <code>c</code> is null.
 @see #createNextButton
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSpinnerUI.installPreviousButtonListeners(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Installs the necessary listeners on the previous button, <code>c</code>,
 to update the <code>JSpinner</code> in response to a user gesture.

 @param c Component to install the listeners on.
 @throws NullPointerException if <code>c</code> is null.
 @see #createPreviousButton
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.LayoutManager javax.swing.plaf.basic.BasicSpinnerUI.createLayout()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a <code>LayoutManager</code> that manages the <code>editor</code>, 
 <code>nextButton</code>, and <code>previousButton</code> 
 children of the JSpinner.  These three children must be
 added with a constraint that identifies their role: 
 "Editor", "Next", and "Previous". The default layout manager 
 can handle the absence of any of these children.
 
 @return a LayoutManager for the editor, next button, and previous button.
 @see #createNextButton
 @see #createPreviousButton
 @see #createEditor

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeListener javax.swing.plaf.basic.BasicSpinnerUI.createPropertyChangeListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a <code>PropertyChangeListener</code> that can be
 added to the JSpinner itself.  Typically, this listener
 will call replaceEditor when the "editor" property changes, 
 since it's the <code>SpinnerUI's</code> responsibility to 
 add the editor to the JSpinner (and remove the old one).
 This method is called by <code>installListeners</code>.
 
 @return A PropertyChangeListener for the JSpinner itself
 @see #installListeners

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.plaf.basic.BasicSpinnerUI.createPreviousButton()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a component that will replace the spinner models value
 with the object returned by <code>spinner.getPreviousValue</code>.
 By default the <code>previousButton</code> is a JButton. This
 method invokes <code>installPreviousButtonListeners</code> to
 install the necessary listeners to update the <code>JSpinner</code>'s
 model in response to a user gesture. If a previousButton isn't needed
 (in a subclass) then override this method to return null.

 @return a component that will replace the spinners model with the
     next value in the sequence, or null
 @see #installUI
 @see #createNextButton
 @see #installPreviousButtonListeners

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.plaf.basic.BasicSpinnerUI.createNextButton()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a component that will replace the spinner models value
 with the object returned by <code>spinner.getNextValue</code>.
 By default the <code>nextButton</code> is a JButton
 who's <code>ActionListener</code> updates it's <code>JSpinner</code>
 ancestors model.  If a nextButton isn't needed (in a subclass)
 then override this method to return null.

 @return a component that will replace the spinners model with the
     next value in the sequence, or null
 @see #installUI
 @see #createPreviousButton
 @see #installNextButtonListeners

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JComponent javax.swing.plaf.basic.BasicSpinnerUI.createEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method is called by installUI to get the editor component
 of the <code>JSpinner</code>.  By default it just returns 
 <code>JSpinner.getEditor()</code>.  Subclasses can override
 <code>createEditor</code> to return a component that contains 
 the spinner's editor or null, if they're going to handle adding 
 the editor to the <code>JSpinner</code> in an 
 <code>installUI</code> override.
 <p>
 Typically this method would be overridden to wrap the editor
 with a container with a custom border, since one can't assume
 that the editors border can be set directly.  
 <p>
 The <code>replaceEditor</code> method is called when the spinners
 editor is changed with <code>JSpinner.setEditor</code>.  If you've
 overriden this method, then you'll probably want to override
 <code>replaceEditor</code> as well.
 
 @return the JSpinners editor JComponent, spinner.getEditor() by default
 @see #installUI
 @see #replaceEditor
 @see JSpinner#getEditor

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSpinnerUI.replaceEditor(JComponent oldEditor, JComponent newEditor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called by the <code>PropertyChangeListener</code> when the 
 <code>JSpinner</code> editor property changes.  It's the responsibility 
 of this method to remove the old editor and add the new one.  By
 default this operation is just:
 <pre>
 spinner.remove(oldEditor);
 spinner.add(newEditor, "Editor");
 </pre>
 The implementation of <code>replaceEditor</code> should be coordinated
 with the <code>createEditor</code> method.
 
 @see #createEditor
 @see #createPropertyChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSpinnerUI.installKeyboardActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Installs the keyboard Actions onto the JSpinner.

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicSpinnerUI.getBaseline(JComponent c, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the baseline.

 @throws NullPointerException {@inheritDoc}
 @throws IllegalArgumentException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component.BaselineResizeBehavior javax.swing.plaf.basic.BasicSpinnerUI.getBaselineResizeBehavior(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an enum indicating how the baseline of the component
 changes as the size changes.

 @throws NullPointerException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
