<!-- BEGIN KEY -->
public abstract class javax.swing.plaf.TextUI extends javax.swing.plaf.ComponentUI
<!-- END KEY -->
<!-- BEGIN DATA -->
 Text editor user interface

 @author  Timothy Prinzing
 @version 1.34 02/14/06

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Rectangle javax.swing.plaf.TextUI.modelToView(JTextComponent t, int pos) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Converts the given location in the model to a place in
 the view coordinate system.

 @param pos  the local location in the model to translate >= 0
 @return the coordinates as a rectangle
 @exception BadLocationException  if the given position does not
   represent a valid location in the associated document

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Rectangle javax.swing.plaf.TextUI.modelToView(JTextComponent t, int pos, Position.Bias bias) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Converts the given location in the model to a place in
 the view coordinate system.

 @param pos  the local location in the model to translate >= 0
 @return the coordinates as a rectangle
 @exception BadLocationException  if the given position does not
   represent a valid location in the associated document

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.plaf.TextUI.viewToModel(JTextComponent t, Point pt)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Converts the given place in the view coordinate system
 to the nearest representative location in the model.

 @param pt  the location in the view to translate.  This
   should be in the same coordinate system as the mouse
   events.
 @return the offset from the start of the document >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.plaf.TextUI.viewToModel(JTextComponent t, Point pt, javax.swing.text.Position.Bias[] biasReturn)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

 @param pt the location in the view to translate.
           This should be in the same coordinate system
           as the mouse events.
 @param biasReturn
           filled in by this method to indicate whether
           the point given is closer to the previous or the next
           character in the model

 @return the location within the model that best represents the
         given point in the view >= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.plaf.TextUI.getNextVisualPositionFrom(JTextComponent t, int pos, Position.Bias b, int direction, javax.swing.text.Position.Bias[] biasRet) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a way to determine the next visually represented model 
 location that one might place a caret.  Some views may not be visible,
 they might not be in the same order found in the model, or they just
 might not allow access to some of the locations in the model.

 @param t the text component for which this UI is installed
 @param pos the position to convert >= 0
 @param b the bias for the position
 @param direction the direction from the current position that can
  be thought of as the arrow keys typically found on a keyboard.
  This may be SwingConstants.WEST, SwingConstants.EAST,
  SwingConstants.NORTH, or SwingConstants.SOUTH
 @param biasRet an array to contain the bias for the returned position
 @return the location within the model that best represents the next
  location visual position
 @exception BadLocationException
 @exception IllegalArgumentException for an invalid direction

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.plaf.TextUI.damageRange(JTextComponent t, int p0, int p1)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Causes the portion of the view responsible for the
 given part of the model to be repainted.

 @param p0 the beginning of the range >= 0
 @param p1 the end of the range >= p0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.plaf.TextUI.damageRange(JTextComponent t, int p0, int p1, Position.Bias firstBias, Position.Bias secondBias)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Causes the portion of the view responsible for the 
 given part of the model to be repainted.

 @param p0 the beginning of the range >= 0
 @param p1 the end of the range >= p0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.text.EditorKit javax.swing.plaf.TextUI.getEditorKit(JTextComponent t)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the binding of services that set a policy
 for the type of document being edited.  This contains
 things like the commands available, stream readers and
 writers, etc.

 @return the editor kit binding

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.text.View javax.swing.plaf.TextUI.getRootView(JTextComponent t)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches a View with the allocation of the associated
 text component (i.e. the root of the hierarchy) that
 can be traversed to determine how the model is being
 represented spatially.

 @return the view

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.TextUI.getToolTipText(JTextComponent t, Point pt)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the string to be used as the tooltip at the passed in location.

 @see javax.swing.text.JTextComponent#getToolTipText
 @since 1.4

<!-- END DATA -->
