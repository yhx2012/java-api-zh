<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicScrollPaneUI extends javax.swing.plaf.ScrollPaneUI implements javax.swing.ScrollPaneConstants
<!-- END KEY -->
<!-- BEGIN DATA -->
 A default L&F implementation of ScrollPaneUI.

 @version 1.73 11/17/05
 @author Hans Muller

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicScrollPaneUI.getMaximumSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @return new Dimension(Short.MAX_VALUE, Short.MAX_VALUE)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicScrollPaneUI.getBaseline(JComponent c, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the baseline.

 @throws NullPointerException {@inheritDoc}
 @throws IllegalArgumentException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component.BaselineResizeBehavior javax.swing.plaf.basic.BasicScrollPaneUI.getBaselineResizeBehavior(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an enum indicating how the baseline of the component
 changes as the size changes.

 @throws NullPointerException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.event.MouseWheelListener javax.swing.plaf.basic.BasicScrollPaneUI.createMouseWheelListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an instance of MouseWheelListener, which is added to the
 JScrollPane by installUI().  The returned MouseWheelListener is used
 to handle mouse wheel-driven scrolling.

 @return      MouseWheelListener which implements wheel-driven scrolling
 @see #installUI
 @see MouseWheelHandler
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeListener javax.swing.plaf.basic.BasicScrollPaneUI.createPropertyChangeListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an instance of PropertyChangeListener that's added to 
 the JScrollPane by installUI().  Subclasses can override this method
 to return a custom PropertyChangeListener, e.g.
 <pre>
 class MyScrollPaneUI extends BasicScrollPaneUI {
    protected PropertyChangeListener <b>createPropertyChangeListener</b>() {
        return new MyPropertyChangeListener();
    }
    public class MyPropertyChangeListener extends PropertyChangeListener {
        public void propertyChange(PropertyChangeEvent e) {
            if (e.getPropertyName().equals("viewport")) {
                // do some extra work when the viewport changes
            }
            super.propertyChange(e);
        }
    }
 }
 </pre>
 
 @see java.beans.PropertyChangeListener
 @see #installUI

<!-- END DATA -->
