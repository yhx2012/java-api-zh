<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicListUI extends javax.swing.plaf.ListUI
<!-- END KEY -->
<!-- BEGIN DATA -->
 An extensible implementation of {@code ListUI}.
 <p>
 {@code BasicListUI} instances cannot be shared between multiple
 lists.

 @version 1.121 07/11/06
 @author Hans Muller
 @author Philip Milne
 @author Shannon Hickey (drag and drop)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicListUI.paintCell(Graphics g, int row, Rectangle rowBounds, ListCellRenderer cellRenderer, ListModel dataModel, ListSelectionModel selModel, int leadIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paint one List cell: compute the relevant state, get the "rubber stamp"
 cell renderer component, and then use the CellRendererPane to paint it.
 Subclasses may want to override this method rather than paint().

 @see #paint

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicListUI.paint(Graphics g, JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paint the rows that intersect the Graphics objects clipRect.  This
 method calls paintCell as necessary.  Subclasses
 may want to override these methods.

 @see #paintCell

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicListUI.getBaseline(JComponent c, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the baseline.

 @throws NullPointerException {@inheritDoc}
 @throws IllegalArgumentException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component.BaselineResizeBehavior javax.swing.plaf.basic.BasicListUI.getBaselineResizeBehavior(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an enum indicating how the baseline of the component
 changes as the size changes.

 @throws NullPointerException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicListUI.getPreferredSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 The preferredSize of the list depends upon the layout orientation.
 <table summary="Describes the preferred size for each layout orientation">
 <tr><th>Layout Orientation</th><th>Preferred Size</th></tr>
 <tr>
   <td>JList.VERTICAL
   <td>The preferredSize of the list is total height of the rows
       and the maximum width of the cells.  If JList.fixedCellHeight
       is specified then the total height of the rows is just
       (cellVerticalMargins + fixedCellHeight) * model.getSize() where
       rowVerticalMargins is the space we allocate for drawing
       the yellow focus outline.  Similarly if fixedCellWidth is
       specified then we just use that.
   </td>
 <tr>
   <td>JList.VERTICAL_WRAP
   <td>If the visible row count is greater than zero, the preferredHeight
       is the maximum cell height * visibleRowCount. If the visible row
       count is <= 0, the preferred height is either the current height
       of the list, or the maximum cell height, whichever is
       bigger. The preferred width is than the maximum cell width *
       number of columns needed. Where the number of columns needs is
       list.height / max cell height. Max cell height is either the fixed
       cell height, or is determined by iterating through all the cells
       to find the maximum height from the ListCellRenderer.
 <tr>
   <td>JList.HORIZONTAL_WRAP
   <td>If the visible row count is greater than zero, the preferredHeight
       is the maximum cell height * adjustedRowCount.  Where
       visibleRowCount is used to determine the number of columns.
       Because this lays out horizontally the number of rows is
       then determined from the column count.  For example, lets say
       you have a model with 10 items and the visible row count is 8.
       The number of columns needed to display this is 2, but you no
       longer need 8 rows to display this, you only need 5, thus
       the adjustedRowCount is 5.
       <p>If the visible row
       count is <= 0, the preferred height is dictated by the 
       number of columns, which will be as many as can fit in the width
       of the <code>JList</code> (width / max cell width), with at
       least one column.  The preferred height then becomes the
       model size / number of columns * maximum cell height.
       Max cell height is either the fixed
       cell height, or is determined by iterating through all the cells
       to find the maximum height from the ListCellRenderer.
 </table>
 The above specifies the raw preferred width and height. The resulting
 preferred width is the above width + insets.left + insets.right and
 the resulting preferred height is the above height + insets.top +
 insets.bottom. Where the <code>Insets</code> are determined from
 <code>list.getInsets()</code>.

 @param c The JList component.
 @return The total size of the list.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicListUI.selectPreviousIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Selected the previous row and force it to be visible.

 @see JList#ensureIndexIsVisible

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicListUI.selectNextIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Selected the previous row and force it to be visible.

 @see JList#ensureIndexIsVisible

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicListUI.installKeyboardActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Registers the keyboard bindings on the <code>JList</code> that the
 <code>BasicListUI</code> is associated with. This method is called at
 installUI() time.

 @see #installUI

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicListUI.uninstallKeyboardActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Unregisters keyboard actions installed from
 <code>installKeyboardActions</code>.
 This method is called at uninstallUI() time - subclassess should
 ensure that all of the keyboard actions registered at installUI
 time are removed here.

 @see #installUI

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicListUI.installListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create and install the listeners for the JList, its model, and its
 selectionModel.  This method is called at installUI() time.

 @see #installUI
 @see #uninstallListeners

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicListUI.uninstallListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Remove the listeners for the JList, its model, and its
 selectionModel.  All of the listener fields, are reset to
 null here.  This method is called at uninstallUI() time,
 it should be kept in sync with installListeners.

 @see #uninstallUI
 @see #installListeners

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicListUI.installDefaults()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Initialize JList properties, e.g. font, foreground, and background,
 and add the CellRendererPane.  The font, foreground, and background
 properties are only set if their current value is either null
 or a UIResource, other properties are set if the current
 value is null.

 @see #uninstallDefaults
 @see #installUI
 @see CellRendererPane

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicListUI.uninstallDefaults()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the JList properties that haven't been explicitly overridden to
 null.  A property is considered overridden if its current value
 is not a UIResource.

 @see #installDefaults
 @see #uninstallUI
 @see CellRendererPane

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicListUI.installUI(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Initializes <code>this.list</code> by calling <code>installDefaults()</code>,
 <code>installListeners()</code>, and <code>installKeyboardActions()</code>
 in order.

 @see #installDefaults
 @see #installListeners
 @see #installKeyboardActions

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicListUI.uninstallUI(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Uninitializes <code>this.list</code> by calling <code>uninstallListeners()</code>,
 <code>uninstallKeyboardActions()</code>, and <code>uninstallDefaults()</code>
 in order.  Sets this.list to null.

 @see #uninstallListeners
 @see #uninstallKeyboardActions
 @see #uninstallDefaults

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ComponentUI javax.swing.plaf.basic.BasicListUI.createUI(JComponent list)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a new instance of BasicListUI.  BasicListUI delegates are
 allocated one per JList.

 @return A new ListUI implementation for the Windows look and feel.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicListUI.locationToIndex(JList list, Point location)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point javax.swing.plaf.basic.BasicListUI.indexToLocation(JList list, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.plaf.basic.BasicListUI.getCellBounds(JList list, int index1, int index2)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicListUI.getRowHeight(int row)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the height of the specified row based on the current layout.

 @return The specified row height or -1 if row isn't valid.
 @see #convertYToRow
 @see #convertRowToY
 @see #updateLayoutState

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicListUI.convertYToRow(int y0)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convert the JList relative coordinate to the row that contains it,
 based on the current layout.  If y0 doesn't fall within any row,
 return -1.

 @return The row that contains y0, or -1.
 @see #getRowHeight
 @see #updateLayoutState

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicListUI.convertRowToY(int row)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the JList relative Y coordinate of the origin of the specified
 row or -1 if row isn't valid.

 @return The Y coordinate of the origin of row, or -1.
 @see #getRowHeight
 @see #updateLayoutState

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicListUI.maybeUpdateLayoutState()
<!-- END KEY -->
<!-- BEGIN DATA -->
 If updateLayoutStateNeeded is non zero, call updateLayoutState() and reset
 updateLayoutStateNeeded.  This method should be called by methods
 before doing any computation based on the geometry of the list.
 For example it's the first call in paint() and getPreferredSize().

 @see #updateLayoutState

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicListUI.updateLayoutState()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Recompute the value of cellHeight or cellHeights based
 and cellWidth, based on the current font and the current
 values of fixedCellWidth, fixedCellHeight, and prototypeCellValue.

 @see #maybeUpdateLayoutState

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.MouseInputListener javax.swing.plaf.basic.BasicListUI.createMouseInputListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a delegate that implements MouseInputListener.
 The delegate is added to the corresponding java.awt.Component listener 
 lists at installUI() time. Subclasses can override this method to return 
 a custom MouseInputListener, e.g.
 <pre>
 class MyListUI extends BasicListUI {
    protected MouseInputListener <b>createMouseInputListener</b>() {
        return new MyMouseInputHandler();
    }
    public class MyMouseInputHandler extends MouseInputHandler {
        public void mouseMoved(MouseEvent e) {
            // do some extra work when the mouse moves
            super.mouseMoved(e);
        }
    }
 }
 </pre>

 @see MouseInputHandler
 @see #installUI

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.ListSelectionListener javax.swing.plaf.basic.BasicListUI.createListSelectionListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an instance of ListSelectionHandler that's added to
 the JLists by selectionModel as needed.  Subclasses can override
 this method to return a custom ListSelectionListener, e.g.
 <pre>
 class MyListUI extends BasicListUI {
    protected ListSelectionListener <b>createListSelectionListener</b>() {
        return new MySelectionListener();
    }
    public class MySelectionListener extends ListSelectionHandler {
        public void valueChanged(ListSelectionEvent e) {
            // do some extra work when the selection changes
            super.valueChange(e);
        }
    }
 }
 </pre>

 @see ListSelectionHandler
 @see #installUI

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.ListDataListener javax.swing.plaf.basic.BasicListUI.createListDataListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an instance of ListDataListener that's added to
 the JLists by model as needed.  Subclasses can override
 this method to return a custom ListDataListener, e.g.
 <pre>
 class MyListUI extends BasicListUI {
    protected ListDataListener <b>createListDataListener</b>() {
        return new MyListDataListener();
    }
    public class MyListDataListener extends ListDataHandler {
        public void contentsChanged(ListDataEvent e) {
            // do some extra work when the models contents change
            super.contentsChange(e);
        }
    }
 }
 </pre>

 @see ListDataListener
 @see JList#getModel
 @see #installUI

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeListener javax.swing.plaf.basic.BasicListUI.createPropertyChangeListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an instance of PropertyChangeHandler that's added to
 the JList by installUI().  Subclasses can override this method
 to return a custom PropertyChangeListener, e.g.
 <pre>
 class MyListUI extends BasicListUI {
    protected PropertyChangeListener <b>createPropertyChangeListener</b>() {
        return new MyPropertyChangeListener();
    }
    public class MyPropertyChangeListener extends PropertyChangeHandler {
        public void propertyChange(PropertyChangeEvent e) {
            if (e.getPropertyName().equals("model")) {
                // do some extra work when the model changes
            }
            super.propertyChange(e);
        }
    }
 }
 </pre>

 @see PropertyChangeListener
 @see #installUI

<!-- END DATA -->
