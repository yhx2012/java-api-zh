<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicLabelUI extends javax.swing.plaf.LabelUI implements java.beans.PropertyChangeListener
<!-- END KEY -->
<!-- BEGIN DATA -->
 A Windows L&F implementation of LabelUI.  This implementation 
 is completely static, i.e. there's only one UIView implementation 
 that's shared by all JLabel objects.

 @version 1.91 03/20/06
 @author Hans Muller

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static javax.swing.plaf.basic.BasicLabelUI javax.swing.plaf.basic.BasicLabelUI.labelUI
<!-- END KEY -->
<!-- BEGIN DATA -->
 The default <code>BasicLabelUI</code> instance. This field might
 not be used. To change the default instance use a subclass which
 overrides the <code>createUI</code> method, and place that class
 name in defaults table under the key "LabelUI".

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.plaf.basic.BasicLabelUI.layoutCL(JLabel label, FontMetrics fontMetrics, String text, Icon icon, Rectangle viewR, Rectangle iconR, Rectangle textR)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Forwards the call to SwingUtilities.layoutCompoundLabel().
 This method is here so that a subclass could do Label specific
 layout and to shorten the method name a little.
 
 @see SwingUtilities#layoutCompoundLabel

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicLabelUI.paintEnabledText(JLabel l, Graphics g, String s, int textX, int textY)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paint clippedText at textX, textY with the labels foreground color.
 
 @see #paint
 @see #paintDisabledText

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicLabelUI.paintDisabledText(JLabel l, Graphics g, String s, int textX, int textY)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paint clippedText at textX, textY with background.lighter() and then 
 shifted down and to the right by one pixel with background.darker().
 
 @see #paint
 @see #paintEnabledText

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicLabelUI.paint(Graphics g, JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Paint the label text in the foreground color, if the label
 is opaque then paint the entire background with the background
 color.  The Label text is drawn by paintEnabledText() or
 paintDisabledText().  The locations of the label parts are computed
 by layoutCL.
 
 @see #paintEnabledText
 @see #paintDisabledText
 @see #layoutCL

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicLabelUI.getMinimumSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @return getPreferredSize(c)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicLabelUI.getMaximumSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @return getPreferredSize(c)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicLabelUI.getBaseline(JComponent c, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the baseline.

 @throws NullPointerException {@inheritDoc}
 @throws IllegalArgumentException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component.BaselineResizeBehavior javax.swing.plaf.basic.BasicLabelUI.getBaselineResizeBehavior(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an enum indicating how the baseline of the component
 changes as the size changes.

 @throws NullPointerException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
