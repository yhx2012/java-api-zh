<!-- BEGIN KEY -->
public class javax.swing.plaf.synth.SynthLookAndFeel extends javax.swing.plaf.basic.BasicLookAndFeel
<!-- END KEY -->
<!-- BEGIN DATA -->
 SynthLookAndFeel provides the basis for creating a customized look and
 feel. SynthLookAndFeel does not directly provide a look, all painting is
 delegated.
 You need to either provide a configuration file, by way of the
 {@link #load} method, or provide your own {@link SynthStyleFactory}
 to {@link #setStyleFactory}. Refer to the
 <a href="package-summary.html">package summary</a> for an example of
 loading a file, and {@link javax.swing.plaf.synth.SynthStyleFactory} for
 an example of providing your own <code>SynthStyleFactory</code> to
 <code>setStyleFactory</code>.
 <p>
 <strong>Warning:</strong>
 This class implements {@link Serializable} as a side effect of it 
 extending {@link BasicLookAndFeel}. It is not intended to be serialized.
 An attempt to serialize it will 
 result in {@link NotSerializableException}.
 
 @serial exclude 
 @version 1.48, 05/24/05
 @since 1.5
 @author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.plaf.synth.SynthStyleFactory javax.swing.plaf.synth.SynthLookAndFeel.factory
<!-- END KEY -->
<!-- BEGIN DATA -->
 SynthStyleFactory for the this SynthLookAndFeel.

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.util.Map javax.swing.plaf.synth.SynthLookAndFeel.defaultsMap
<!-- END KEY -->
<!-- BEGIN DATA -->
 Map of defaults table entries. This is populated via the load
 method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.synth.SynthLookAndFeel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a SynthLookAndFeel.
 <p>
 For the returned <code>SynthLookAndFeel</code> to be useful you need to
 invoke <code>load</code> to specify the set of
 <code>SynthStyle</code>s, or invoke <code>setStyleFactory</code>.

 @see #load
 @see #setStyleFactory

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.plaf.synth.SynthLookAndFeel.setStyleFactory(SynthStyleFactory cache)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the SynthStyleFactory that the UI classes provided by
 synth will use to obtain a SynthStyle.

 @param cache SynthStyleFactory the UIs should use.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.synth.SynthStyleFactory javax.swing.plaf.synth.SynthLookAndFeel.getStyleFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current SynthStyleFactory.

 @return SynthStyleFactory

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.synth.SynthStyle javax.swing.plaf.synth.SynthLookAndFeel.getStyle(JComponent c, Region region)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a SynthStyle for the specified region of the specified component.
 This is not for general consumption, only custom UIs should call this
 method.

 @param c JComponent to get the SynthStyle for
 @param region Identifies the region of the specified component
 @return SynthStyle to use.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.plaf.synth.SynthLookAndFeel.updateStyles(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Updates the style associated with <code>c</code>, and all its children.
 This is a lighter version of
 <code>SwingUtilities.updateComponentTreeUI</code>.

 @param c Component to update style for.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.synth.Region javax.swing.plaf.synth.SynthLookAndFeel.getRegion(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the Region for the JComponent <code>c</code>.

 @param c JComponent to fetch the Region for
 @return Region corresponding to <code>c</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ComponentUI javax.swing.plaf.synth.SynthLookAndFeel.createUI(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the Synth look and feel <code>ComponentUI</code> for
 the passed in <code>JComponent</code>.

 @param c JComponent to create the <code>ComponentUI</code> for
 @return ComponentUI to use for <code>c</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthLookAndFeel.load(InputStream input, java.lang.Class<?> resourceBase) throws java.text.ParseException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Loads the set of <code>SynthStyle</code>s that will be used by
 this <code>SynthLookAndFeel</code>. <code>resourceBase</code> is
 used to resolve any path based resources, for example an
 <code>Image</code> would be resolved by
 <code>resourceBase.getResource(path)</code>. Refer to
 <a href="doc-files/synthFileFormat.html">Synth File Format</a>
 for more information.

 @param input InputStream to load from
 @param resourceBase used to resolve any images or other resources
 @throws ParseException if there is an error in parsing
 @throws IllegalArgumentException if input or resourceBase is <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthLookAndFeel.load(URL url) throws java.text.ParseException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Loads the set of <code>SynthStyle</code>s that will be used by
 this <code>SynthLookAndFeel</code>. Path based resources are resolved
 relatively to the specified <code>URL</code> of the style. For example
 an <code>Image</code> would be resolved by
 <code>new URL(synthFile, path)</code>. Refer to
 <a href="doc-files/synthFileFormat.html">Synth File Format</a> for more
 information.

 @param url the <code>URL</code> to load the set of
     <code>SynthStyle</code> from
 @throws ParseException if there is an error in parsing
 @throws IllegalArgumentException if synthSet is <code>null</code>
 @throws IOException if synthSet cannot be opened as an <code>InputStream</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthLookAndFeel.initialize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called by UIManager when this look and feel is installed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthLookAndFeel.uninitialize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called by UIManager when this look and feel is uninstalled.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.UIDefaults javax.swing.plaf.synth.SynthLookAndFeel.getDefaults()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the defaults for this SynthLookAndFeel.

 @return Defaults table.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.synth.SynthLookAndFeel.isSupportedLookAndFeel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true, SynthLookAndFeel is always supported.

 @return true.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.synth.SynthLookAndFeel.isNativeLookAndFeel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns false, SynthLookAndFeel is not a native look and feel.

 @return false

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.synth.SynthLookAndFeel.getDescription()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a textual description of SynthLookAndFeel.

 @return textual description of synth.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.synth.SynthLookAndFeel.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return a short string that identifies this look and feel.

 @return a short string identifying this look and feel.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.synth.SynthLookAndFeel.getID()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return a string that identifies this look and feel.

 @return a short string identifying this look and feel.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.synth.SynthLookAndFeel.shouldUpdateStyleOnAncestorChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether or not the UIs should update their
 <code>SynthStyles</code> from the <code>SynthStyleFactory</code>
 when the ancestor of the <code>JComponent</code> changes. A subclass
 that provided a <code>SynthStyleFactory</code> that based the
 return value from <code>getStyle</code> off the containment hierarchy
 would override this method to return true.

 @return whether or not the UIs should update their
 <code>SynthStyles</code> from the <code>SynthStyleFactory</code>
 when the ancestor changed.

<!-- END DATA -->
