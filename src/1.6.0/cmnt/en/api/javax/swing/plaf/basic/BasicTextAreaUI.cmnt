<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicTextAreaUI extends javax.swing.plaf.basic.BasicTextUI
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides the look and feel for a plain text editor.  In this
 implementation the default UI is extended to act as a simple
 view factory.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @author  Timothy Prinzing
 @version 1.75 04/20/06

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.basic.BasicTextAreaUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new BasicTextAreaUI object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ComponentUI javax.swing.plaf.basic.BasicTextAreaUI.createUI(JComponent ta)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a UI for a JTextArea.

 @param ta a text area
 @return the UI

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.plaf.basic.BasicTextAreaUI.getPropertyPrefix()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fetches the name used as a key to look up properties through the
 UIManager.  This is used as a prefix to all the standard
 text properties.

 @return the name ("TextArea")

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTextAreaUI.propertyChange(PropertyChangeEvent evt)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method gets called when a bound property is changed
 on the associated JTextComponent.  This is a hook
 which UI implementations may change to reflect how the
 UI displays bound properties of JTextComponent subclasses.
 This is implemented to rebuild the View when the
 <em>WrapLine</em> or the <em>WrapStyleWord</em> property changes.

 @param evt the property change event

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicTextAreaUI.getPreferredSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 The method is overridden to take into account caret width.

 @param c the editor component
 @return the preferred size
 @throws IllegalArgumentException if invalid value is passed

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicTextAreaUI.getMinimumSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 The method is overridden to take into account caret width.

 @param c the editor component
 @return the minimum size
 @throws IllegalArgumentException if invalid value is passed

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.View javax.swing.plaf.basic.BasicTextAreaUI.create(Element elem)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the view for an element.  Returns a WrappedPlainView or
 PlainView.

 @param elem the element
 @return the view

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicTextAreaUI.getBaseline(JComponent c, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the baseline.

 @throws NullPointerException {@inheritDoc}
 @throws IllegalArgumentException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component.BaselineResizeBehavior javax.swing.plaf.basic.BasicTextAreaUI.getBaselineResizeBehavior(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an enum indicating how the baseline of the component
 changes as the size changes.

 @throws NullPointerException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
