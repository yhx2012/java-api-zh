<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager extends java.lang.Object implements java.awt.LayoutManager2
<!-- END KEY -->
<!-- BEGIN DATA -->
 LayoutManager for JSplitPanes that have an orientation of
 HORIZONTAL_SPLIT.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.layoutContainer(Container container)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Does the actual layout.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.addLayoutComponent(String place, Component component)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the component at place.  Place must be one of
 JSplitPane.LEFT, RIGHT, TOP, BOTTOM, or null (for the
 divider).

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.minimumLayoutSize(Container container)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the minimum size needed to contain the children.
 The width is the sum of all the childrens min widths and
 the height is the largest of the childrens minimum heights.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.preferredLayoutSize(Container container)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the preferred size needed to contain the children.
 The width is the sum of all the childrens preferred widths and
 the height is the largest of the childrens preferred heights.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.removeLayoutComponent(Component component)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified component from our knowledge.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.addLayoutComponent(Component comp, Object constraints)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified component to the layout, using the specified
 constraint object.
 @param comp the component to be added
 @param constraints  where/how the component is added to the layout.

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getLayoutAlignmentX(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the alignment along the x axis.  This specifies how
 the component would like to be aligned relative to other 
 components.  The value should be a number between 0 and 1
 where 0 represents alignment along the origin, 1 is aligned
 the furthest away from the origin, 0.5 is centered, etc.

<!-- END DATA -->
<!-- BEGIN KEY -->
public float javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getLayoutAlignmentY(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the alignment along the y axis.  This specifies how
 the component would like to be aligned relative to other 
 components.  The value should be a number between 0 and 1
 where 0 represents alignment along the origin, 1 is aligned
 the furthest away from the origin, 0.5 is centered, etc.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.invalidateLayout(Container c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Does nothing. If the developer really wants to change the
 size of one of the views JSplitPane.resetToPreferredSizes should
 be messaged.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.maximumLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the maximum layout size, which is Integer.MAX_VALUE
 in both directions.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.resetToPreferredSizes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Marks the receiver so that the next time this instance is
 laid out it'll ask for the preferred sizes.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.resetSizeAt(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets the size of the Component at the passed in location.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.setSizes(int[] newSizes)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the sizes to <code>newSizes</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int[] javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getSizes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the sizes of the components.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getPreferredSizeOfComponent(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the width of the passed in Components preferred size.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getSizeOfComponent(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the width of the passed in component.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getAvailableSize(Dimension containerSize, Insets insets)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the available width based on the container size and
 Insets.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getInitialLocation(Insets insets)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the left inset, unless the Insets are null in which case
 0 is returned.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.setComponentToSize(Component c, int size, int location, Insets insets, Dimension containerSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the width of the component c to be size, placing its
 x location at location, y to the insets.top and height
 to the containersize.height less the top and bottom insets.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.updateComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the components. This should be called whenever
 a new instance of this is installed into an existing
 SplitPane.

<!-- END DATA -->
