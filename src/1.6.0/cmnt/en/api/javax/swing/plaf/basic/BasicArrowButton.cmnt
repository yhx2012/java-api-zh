<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicArrowButton extends javax.swing.JButton implements javax.swing.SwingConstants
<!-- END KEY -->
<!-- BEGIN DATA -->
 JButton object that draws a scaled Arrow in one of the cardinal directions.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @version 1.29 04/07/06
 @author David Kloba

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicArrowButton.direction
<!-- END KEY -->
<!-- BEGIN DATA -->
 The direction of the arrow. One of
 {@code SwingConstants.NORTH}, {@code SwingConstants.SOUTH},
 {@code SwingConstants.EAST} or {@code SwingConstants.WEST}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.basic.BasicArrowButton(int direction, Color background, Color shadow, Color darkShadow, Color highlight)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a {@code BasicArrowButton} whose arrow
 is drawn in the specified direction and with the specified
 colors.

 @param direction the direction of the arrow; one of
        {@code SwingConstants.NORTH}, {@code SwingConstants.SOUTH},
        {@code SwingConstants.EAST} or {@code SwingConstants.WEST}
 @param background the background color of the button
 @param shadow the color of the shadow
 @param darkShadow the color of the dark shadow
 @param highlight the color of the highlight
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.basic.BasicArrowButton(int direction)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a {@code BasicArrowButton} whose arrow
 is drawn in the specified direction.

 @param direction the direction of the arrow; one of
        {@code SwingConstants.NORTH}, {@code SwingConstants.SOUTH},
        {@code SwingConstants.EAST} or {@code SwingConstants.WEST}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicArrowButton.getDirection()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the direction of the arrow.

 @param direction the direction of the arrow; one of
         {@code SwingConstants.NORTH},
         {@code SwingConstants.SOUTH}, {@code SwingConstants.EAST}
         or {@code SwingConstants.WEST}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicArrowButton.setDirection(int dir)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the direction of the arrow.

 @param direction the direction of the arrow; one of
        of {@code SwingConstants.NORTH},
        {@code SwingConstants.SOUTH}, 
        {@code SwingConstants.EAST} or {@code SwingConstants.WEST}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicArrowButton.getPreferredSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the preferred size of the {@code BasicArrowButton}.

 @return the preferred size

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicArrowButton.getMinimumSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the minimum size of the {@code BasicArrowButton}.

 @return the minimum size

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicArrowButton.getMaximumSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the maximum size of the {@code BasicArrowButton}.

 @return the maximum size

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.basic.BasicArrowButton.isFocusTraversable()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether the arrow button should get the focus.
 {@code BasicArrowButton}s are used as a child component of
 composite components such as {@code JScrollBar} and
 {@code JComboBox}. Since the composite component typically gets the
 focus, this method is overriden to return {@code false}.

 @return {@code false}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicArrowButton.paintTriangle(Graphics g, int x, int y, int size, int direction, boolean isEnabled)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paints a triangle.

 @param g the {@code Graphics} to draw to
 @param x the x coordinate
 @param y the y coordinate
 @param size the size of the triangle to draw
 @param direction the direction in which to draw the arrow;
        one of {@code SwingConstants.NORTH},
        {@code SwingConstants.SOUTH}, {@code SwingConstants.EAST} or
        {@code SwingConstants.WEST}
 @param isEnabled whether or not the arrow is drawn enabled

<!-- END DATA -->
