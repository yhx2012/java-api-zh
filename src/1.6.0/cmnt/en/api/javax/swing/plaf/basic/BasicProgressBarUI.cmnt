<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicProgressBarUI extends javax.swing.plaf.ProgressBarUI
<!-- END KEY -->
<!-- BEGIN DATA -->
 A Basic L&F implementation of ProgressBarUI.

 @version 1.73 04/17/06
 @author Michael C. Albers
 @author Kathy Walrath

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.plaf.basic.BasicProgressBarUI.boxRect
<!-- END KEY -->
<!-- BEGIN DATA -->

 Used to hold the location and size of the bouncing box (returned
 by getBox) to be painted.

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicProgressBarUI.startAnimationTimer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Starts the animation thread, creating and initializing
 it if necessary. This method is invoked when an
 indeterminate progress bar should start animating.
 Reasons for this may include:
 <ul>
    <li>The progress bar is determinate and becomes displayable
    <li>The progress bar is displayable and becomes determinate
    <li>The progress bar is displayable and determinate and this
        UI is installed
 </ul>
 If you implement your own animation thread,
 you must override this method.

 @since 1.4
 @see #stopAnimationTimer

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicProgressBarUI.stopAnimationTimer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Stops the animation thread.
 This method is invoked when the indeterminate
 animation should be stopped. Reasons for this may include:
 <ul>
    <li>The progress bar changes to determinate
    <li>The progress bar is no longer part of a displayable hierarchy
    <li>This UI in uninstalled
 </ul>
 If you implement your own animation thread,
 you must override this method.

 @since 1.4
 @see #startAnimationTimer

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicProgressBarUI.uninstallListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all listeners installed by this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicProgressBarUI.getBaseline(JComponent c, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the baseline.

 @throws NullPointerException {@inheritDoc}
 @throws IllegalArgumentException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component.BaselineResizeBehavior javax.swing.plaf.basic.BasicProgressBarUI.getBaselineResizeBehavior(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an enum indicating how the baseline of the component
 changes as the size changes.

 @throws NullPointerException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Color javax.swing.plaf.basic.BasicProgressBarUI.getSelectionForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
 The "selectionForeground" is the color of the text when it is painted
 over a filled area of the progress bar.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Color javax.swing.plaf.basic.BasicProgressBarUI.getSelectionBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
 The "selectionBackground" is the color of the text when it is painted
 over an unfilled area of the progress bar.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicProgressBarUI.getCellLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the width (if HORIZONTAL) or height (if VERTICAL)
 of each of the indivdual cells/units to be rendered in the
 progress bar. However, for text rendering simplification and 
 aesthetic considerations, this function will return 1 when
 the progress string is being rendered.

 @return the value representing the spacing between cells
 @see    #setCellLength
 @see    JProgressBar#isStringPainted

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicProgressBarUI.getCellSpacing()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the spacing between each of the cells/units in the
 progress bar. However, for text rendering simplification and 
 aesthetic considerations, this function will return 0 when
 the progress string is being rendered.

 @return the value representing the spacing between cells
 @see    #setCellSpacing
 @see    JProgressBar#isStringPainted

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicProgressBarUI.getAmountFull(Insets b, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This determines the amount of the progress bar that should be filled
 based on the percent done gathered from the model. This is a common
 operation so it was abstracted out. It assumes that your progress bar
 is linear. That is, if you are making a circular progress indicator,
 you will want to override this method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicProgressBarUI.paint(Graphics g, JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Delegates painting to one of two methods:
 paintDeterminate or paintIndeterminate.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Rectangle javax.swing.plaf.basic.BasicProgressBarUI.getBox(Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Stores the position and size of
 the bouncing box that would be painted for the current animation index
 in <code>r</code> and returns <code>r</code>.
 Subclasses that add to the painting performed
 in this class's implementation of <code>paintIndeterminate</code> --
 to draw an outline around the bouncing box, for example --
 can use this method to get the location of the bouncing
 box that was just painted.
 By overriding this method,
 you have complete control over the size and position 
 of the bouncing box,
 without having to reimplement <code>paintIndeterminate</code>.

 @param r  the Rectangle instance to be modified;
           may be <code>null</code>
 @return   <code>null</code> if no box should be drawn;
           otherwise, returns the passed-in rectangle
           (if non-null)
           or a new rectangle

 @see #setAnimationIndex
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicProgressBarUI.getBoxLength(int availableLength, int otherDimension)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the length
 of the "bouncing box" to be painted.
 This method is invoked by the 
 default implementation of <code>paintIndeterminate</code>
 to get the width (if the progress bar is horizontal)
 or height (if vertical) of the box.
 For example:
 <blockquote>
 <pre>
boxRect.width = getBoxLength(componentInnards.width,
                             componentInnards.height);
 </pre>
 </blockquote>

 @param availableLength  the amount of space available
                         for the bouncing box to move in;
                         for a horizontal progress bar,
                         for example,
                         this should be
                         the inside width of the progress bar
                         (the component width minus borders)
 @param otherDimension   for a horizontal progress bar, this should be
                         the inside height of the progress bar; this
                         value might be used to constrain or determine
                         the return value 

 @return the size of the box dimension being determined; 
         must be no larger than <code>availableLength</code>

 @see javax.swing.SwingUtilities#calculateInnerArea
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicProgressBarUI.paintIndeterminate(Graphics g, JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 All purpose paint method that should do the right thing for all
 linear bouncing-box progress bars. 
 Override this if you are making another kind of 
 progress bar.

 @see #paintDeterminate

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicProgressBarUI.paintDeterminate(Graphics g, JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 All purpose paint method that should do the right thing for almost
 all linear, determinate progress bars. By setting a few values in
 the defaults
 table, things should work just fine to paint your progress bar.
 Naturally, override this if you are making a circular or
 semi-circular progress bar.
 
 @see #paintIndeterminate

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Point javax.swing.plaf.basic.BasicProgressBarUI.getStringPlacement(Graphics g, String progressString, int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Designate the place where the progress string will be painted.
 This implementation places it at the center of the progress
 bar (in both x and y). Override this if you want to right,
 left, top, or bottom align the progress string or if you need
 to nudge it around for any reason.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicProgressBarUI.getMinimumSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Minimum size for this component is 10. The rationale here 
 is that there should be at least one pixel per 10 percent.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicProgressBarUI.getAnimationIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the index of the current animation frame.

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final int javax.swing.plaf.basic.BasicProgressBarUI.getFrameCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of frames for the complete animation loop
 used by an indeterminate JProgessBar. The progress chunk will go
 from one end to the other and back during the entire loop. This
 visual behavior may be changed by subclasses in other Look and Feels.
 
 @return the number of frames
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicProgressBarUI.setAnimationIndex(int newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the index of the current animation frame
 to the specified value and requests that the
 progress bar be repainted.
 Subclasses that don't use the default painting code
 might need to override this method
 to change the way that the <code>repaint</code> method
 is invoked.

 @param newValue the new animation index; no checking
                 is performed on its value
 @see #incrementAnimationIndex

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicProgressBarUI.incrementAnimationIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the index of the current animation frame,
 to the next valid value,
 which results in the progress bar being repainted.
 The next valid value is, by default,
 the current animation index plus one.
 If the new value would be too large, 
 this method sets the index to 0.
 Subclasses might need to override this method
 to ensure that the index does not go over
 the number of frames needed for the particular 
 progress bar instance.
 This method is invoked by the default animation thread
 every <em>X</em> milliseconds, 
 where <em>X</em> is specified by the "ProgressBar.repaintInterval"
 UI default.

 @see #setAnimationIndex
 @since 1.4

<!-- END DATA -->
