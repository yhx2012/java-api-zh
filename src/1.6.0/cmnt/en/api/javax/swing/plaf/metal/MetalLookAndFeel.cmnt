<!-- BEGIN KEY -->
public class javax.swing.plaf.metal.MetalLookAndFeel extends javax.swing.plaf.basic.BasicLookAndFeel
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Java Look and Feel, otherwise known as Metal.
 <p>
 Each of the {@code ComponentUI}s provided by {@code
 MetalLookAndFeel} derives its behavior from the defaults
 table. Unless otherwise noted each of the {@code ComponentUI}
 implementations in this package document the set of defaults they
 use. Unless otherwise noted the defaults are installed at the time
 {@code installUI} is invoked, and follow the recommendations
 outlined in {@code LookAndFeel} for installing defaults.
 <p>
 {@code MetalLookAndFeel} derives it's color palette and fonts from
 {@code MetalTheme}. The default theme is {@code OceanTheme}. The theme
 can be changed using the {@code setCurrentTheme} method, refer to it
 for details on changing the theme. Prior to 1.5 the default 
 theme was {@code DefaultMetalTheme}. The system property
 {@code "swing.metalTheme"} can be set to {@code "steel"} to indicate
 the default should be {@code DefaultMetalTheme}.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @see MetalTheme
 @see DefaultMetalTheme
 @see OceanTheme

 @version @(#)MetalLookAndFeel.java	1.206 06/07/12
 @author Steve Wilson

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.metal.MetalLookAndFeel.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of this look and feel. This returns 
 {@code "Metal"}.

 @return the name of this look and feel

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.metal.MetalLookAndFeel.getID()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an identifier for this look and feel. This returns
 {@code "Metal"}.

 @return the identifier of this look and feel

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.metal.MetalLookAndFeel.getDescription()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a short description of this look and feel. This returns
 {@code "The Java(tm) Look and Feel"}.

 @return a short description for the look and feel

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.metal.MetalLookAndFeel.isNativeLookAndFeel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns {@code false}; {@code MetalLookAndFeel} is not a native
 look and feel.

 @return {@code false}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.metal.MetalLookAndFeel.isSupportedLookAndFeel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns {@code true}; {@code MetalLookAndFeel} can be run on
 any platform.

 @return {@code true}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.metal.MetalLookAndFeel.getSupportsWindowDecorations()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns {@code true}; metal can provide {@code Window}
 decorations.

 @return {@code true}

 @see JDialog#setDefaultLookAndFeelDecorated
 @see JFrame#setDefaultLookAndFeelDecorated
 @see JRootPane#setWindowDecorationStyle
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.metal.MetalLookAndFeel.initClassDefaults(UIDefaults table)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Populates {@code table} with mappings from {@code uiClassID} to
 the fully qualified name of the ui class. {@code
 MetalLookAndFeel} registers an entry for each of the classes in
 the package {@code javax.swing.plaf.metal} that are named
 MetalXXXUI. The string {@code XXX} is one of Swing's uiClassIDs. For
 the {@code uiClassIDs} that do not have a class in metal, the
 corresponding class in {@code javax.swing.plaf.basic} is
 used. For example, metal does not have a class named {@code
 "MetalColorChooserUI"}, as such, {@code
 javax.swing.plaf.basic.BasicColorChooserUI} is used.
 
 @param table the {@code UIDefaults} instance the entries are
        added to
 @throws NullPointerException if {@code table} is {@code null}

 @see javax.swing.plaf.basic.BasicLookAndFeel#initClassDefaults

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.metal.MetalLookAndFeel.initSystemColorDefaults(UIDefaults table)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Populates {@code table} with system colors. The following values are
 added to {@code table}:
 <table border="1" cellpadding="1" cellspacing="0" 
         summary="Metal's system color mapping"
         valign="top" >
  <tr valign="top"  align="left">
    <th bgcolor="#CCCCFF" align="left">Key
    <th bgcolor="#CCCCFF" align="left">Value
  <tr valign="top"  align="left">
    <td>"desktop"
    <td>{@code theme.getDesktopColor()}
  <tr valign="top"  align="left">
    <td>"activeCaption"
    <td>{@code theme.getWindowTitleBackground()} 
  <tr valign="top"  align="left">
    <td>"activeCaptionText"
    <td>{@code theme.getWindowTitleForeground()} 
  <tr valign="top"  align="left">
    <td>"activeCaptionBorder"
    <td>{@code theme.getPrimaryControlShadow()} 
  <tr valign="top"  align="left">
    <td>"inactiveCaption"
    <td>{@code theme.getWindowTitleInactiveBackground()} 
  <tr valign="top"  align="left">
    <td>"inactiveCaptionText"
    <td>{@code theme.getWindowTitleInactiveForeground()} 
  <tr valign="top"  align="left">
    <td>"inactiveCaptionBorder"
    <td>{@code theme.getControlShadow()} 
  <tr valign="top"  align="left">
    <td>"window"
    <td>{@code theme.getWindowBackground()} 
  <tr valign="top"  align="left">
    <td>"windowBorder"
    <td>{@code theme.getControl()} 
  <tr valign="top"  align="left">
    <td>"windowText"
    <td>{@code theme.getUserTextColor()} 
  <tr valign="top"  align="left">
    <td>"menu"
    <td>{@code theme.getMenuBackground()} 
  <tr valign="top"  align="left">
    <td>"menuText"
    <td>{@code theme.getMenuForeground()} 
  <tr valign="top"  align="left">
    <td>"text"
    <td>{@code theme.getWindowBackground()} 
  <tr valign="top"  align="left">
    <td>"textText"
    <td>{@code theme.getUserTextColor()} 
  <tr valign="top"  align="left">
    <td>"textHighlight"
    <td>{@code theme.getTextHighlightColor()} 
  <tr valign="top"  align="left">
    <td>"textHighlightText"
    <td>{@code theme.getHighlightedTextColor()} 
  <tr valign="top"  align="left">
    <td>"textInactiveText"
    <td>{@code theme.getInactiveSystemTextColor()} 
  <tr valign="top"  align="left">
    <td>"control"
    <td>{@code theme.getControl()} 
  <tr valign="top"  align="left">
    <td>"controlText"
    <td>{@code theme.getControlTextColor()} 
  <tr valign="top"  align="left">
    <td>"controlHighlight"
    <td>{@code theme.getControlHighlight()} 
  <tr valign="top"  align="left">
    <td>"controlLtHighlight"
    <td>{@code theme.getControlHighlight()} 
  <tr valign="top"  align="left">
    <td>"controlShadow"
    <td>{@code theme.getControlShadow()} 
  <tr valign="top"  align="left">
    <td>"controlDkShadow"
    <td>{@code theme.getControlDarkShadow()} 
  <tr valign="top"  align="left">
    <td>"scrollbar"
    <td>{@code theme.getControl()} 
  <tr valign="top"  align="left">
    <td>"info"
    <td>{@code theme.getPrimaryControl()} 
  <tr valign="top"  align="left">
    <td>"infoText"
    <td>{@code theme.getPrimaryControlInfo()} 
 </table>
 The value {@code theme} corresponds to the current {@code MetalTheme}.
 
 @param table the {@code UIDefaults} object the values are added to
 @throws NullPointerException if {@code table} is {@code null}

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.metal.MetalLookAndFeel.initComponentDefaults(UIDefaults table)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Populates {@code table} with the defaults for metal.

 @param table the {@code UIDefaults} to add the values to
 @throws NullPointerException if {@code table} is {@code null}

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.metal.MetalLookAndFeel.createDefaultTheme()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Ensures the current {@code MetalTheme} is {@code non-null}. This is
 a cover method for {@code getCurrentTheme}.

 @see #getCurrentTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.UIDefaults javax.swing.plaf.metal.MetalLookAndFeel.getDefaults()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the look and feel defaults. This invokes, in order,
 {@code createDefaultTheme()}, {@code super.getDefaults()} and
 {@code getCurrentTheme().addCustomEntriesToTable(table)}.
 <p>
 While this method is public, it should only be invoked by the
 {@code UIManager} when the look and feel is set as the current
 look and feel and after {@code initialize} has been invoked.

 @return the look and feel defaults

 @see #createDefaultTheme
 @see javax.swing.plaf.basic.BasicLookAndFeel#getDefaults()
 @see MetalTheme#addCustomEntriesToTable(UIDefaults)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.metal.MetalLookAndFeel.provideErrorFeedback(Component component)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.plaf.metal.MetalLookAndFeel.setCurrentTheme(MetalTheme theme)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the theme used by <code>MetalLookAndFeel</code>.
 <p>
 After the theme is set, {@code MetalLookAndFeel} needs to be
 re-installed and the uis need to be recreated. The following
 shows how to do this:
 <pre>
   MetalLookAndFeel.setCurrentTheme(theme);

   // re-install the Metal Look and Feel
   UIManager.setLookAndFeel(new MetalLookAndFeel());

   // Update the ComponentUIs for all Components. This
   // needs to be invoked for all windows.
   SwingUtilities.updateComponentTreeUI(rootComponent);
 </pre>
 If this is not done the results are undefined. 

 @param theme the theme to use
 @throws NullPointerException if {@code theme} is {@code null}
 @see #getCurrentTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.metal.MetalTheme javax.swing.plaf.metal.MetalLookAndFeel.getCurrentTheme()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the theme currently being used by <code>MetalLookAndFeel</code>.
 If the current theme is {@code null}, the default theme is created.

 @return the current theme
 @see #setCurrentTheme
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.plaf.metal.MetalLookAndFeel.getDisabledIcon(JComponent component, Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an <code>Icon</code> with a disabled appearance.
 This method is used to generate a disabled <code>Icon</code> when
 one has not been specified.  For example, if you create a
 <code>JButton</code> and only specify an <code>Icon</code> via
 <code>setIcon</code> this method will be called to generate the
 disabled <code>Icon</code>. If null is passed as <code>icon</code>
 this method returns null. 
 <p>
 Some look and feels might not render the disabled Icon, in which
 case they will ignore this.

 @param component JComponent that will display the Icon, may be null
 @param icon Icon to generate disable icon from.
 @return Disabled icon, or null if a suitable Icon can not be
         generated.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.plaf.metal.MetalLookAndFeel.getDisabledSelectedIcon(JComponent component, Icon icon)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an <code>Icon</code> for use by disabled
 components that are also selected. This method is used to generate an
 <code>Icon</code> for components that are in both the disabled and
 selected states but do not have a specific <code>Icon</code> for this
 state.  For example, if you create a <code>JButton</code> and only
 specify an <code>Icon</code> via <code>setIcon</code> this method
 will be called to generate the disabled and selected
 <code>Icon</code>. If null is passed as <code>icon</code> this method
 returns null. 
 <p>
 Some look and feels might not render the disabled and selected Icon,
 in which case they will ignore this.

 @param component JComponent that will display the Icon, may be null
 @param icon Icon to generate disabled and selected icon from.
 @return Disabled and Selected icon, or null if a suitable Icon can not
         be generated.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.FontUIResource javax.swing.plaf.metal.MetalLookAndFeel.getControlTextFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the control text font of the current theme. This is a
 cover method for {@code getCurrentTheme().getControlTextColor()}.

 @return the control text font

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.FontUIResource javax.swing.plaf.metal.MetalLookAndFeel.getSystemTextFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the sytem text font of the current theme. This is a
 cover method for {@code getCurrentTheme().getSystemTextFont()}.

 @return the system text font

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.FontUIResource javax.swing.plaf.metal.MetalLookAndFeel.getUserTextFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the user text font of the current theme. This is a
 cover method for {@code getCurrentTheme().getUserTextFont()}.

 @return the user text font

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.FontUIResource javax.swing.plaf.metal.MetalLookAndFeel.getMenuTextFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the menu text font of the current theme. This is a
 cover method for {@code getCurrentTheme().getMenuTextFont()}.

 @return the menu text font

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.FontUIResource javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the window title font of the current theme. This is a
 cover method for {@code getCurrentTheme().getWindowTitleFont()}.

 @return the window title font

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.FontUIResource javax.swing.plaf.metal.MetalLookAndFeel.getSubTextFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the sub-text font of the current theme. This is a
 cover method for {@code getCurrentTheme().getSubTextFont()}.

 @return the sub-text font

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getDesktopColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the desktop color of the current theme. This is a
 cover method for {@code getCurrentTheme().getDesktopColor()}.

 @return the desktop color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getFocusColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the focus color of the current theme. This is a
 cover method for {@code getCurrentTheme().getFocusColor()}.

 @return the focus color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getWhite()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the white color of the current theme. This is a
 cover method for {@code getCurrentTheme().getWhite()}.

 @return the white color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getBlack()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the black color of the current theme. This is a
 cover method for {@code getCurrentTheme().getBlack()}.

 @return the black color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getControl()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the control color of the current theme. This is a
 cover method for {@code getCurrentTheme().getControl()}.

 @return the control color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getControlShadow()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the control shadow color of the current theme. This is a
 cover method for {@code getCurrentTheme().getControlShadow()}.

 @return the control shadow color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getControlDarkShadow()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the control dark shadow color of the current theme. This is a
 cover method for {@code getCurrentTheme().getControlDarkShadow()}.

 @return the control dark shadow color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getControlInfo()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the control info color of the current theme. This is a
 cover method for {@code getCurrentTheme().getControlInfo()}.

 @return the control info color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getControlHighlight()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the control highlight color of the current theme. This is a
 cover method for {@code getCurrentTheme().getControlHighlight()}.

 @return the control highlight color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getControlDisabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the control disabled color of the current theme. This is a
 cover method for {@code getCurrentTheme().getControlDisabled()}.

 @return the control disabled color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControl()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the primary control color of the current theme. This is a
 cover method for {@code getCurrentTheme().getPrimaryControl()}.

 @return the primary control color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlShadow()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the primary control shadow color of the current theme. This is a
 cover method for {@code getCurrentTheme().getPrimaryControlShadow()}.

 @return the primary control shadow color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlDarkShadow()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the primary control dark shadow color of the current
 theme. This is a cover method for {@code
 getCurrentTheme().getPrimaryControlDarkShadow()}.

 @return the primary control dark shadow color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlInfo()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the primary control info color of the current theme. This is a
 cover method for {@code getCurrentTheme().getPrimaryControlInfo()}.

 @return the primary control info color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlHighlight()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the primary control highlight color of the current
 theme. This is a cover method for {@code
 getCurrentTheme().getPrimaryControlHighlight()}.

 @return the primary control highlight color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getSystemTextColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the system text color of the current theme. This is a
 cover method for {@code getCurrentTheme().getSystemTextColor()}.

 @return the system text color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getControlTextColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the control text color of the current theme. This is a
 cover method for {@code getCurrentTheme().getControlTextColor()}.

 @return the control text color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getInactiveControlTextColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the inactive control text color of the current theme. This is a
 cover method for {@code
 getCurrentTheme().getInactiveControlTextColor()}.

 @return the inactive control text color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getInactiveSystemTextColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the inactive system text color of the current theme. This is a
 cover method for {@code
 getCurrentTheme().getInactiveSystemTextColor()}.

 @return the inactive system text color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getUserTextColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the user text color of the current theme. This is a
 cover method for {@code getCurrentTheme().getUserTextColor()}.

 @return the user text color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getTextHighlightColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the text highlight color of the current theme. This is a
 cover method for {@code getCurrentTheme().getTextHighlightColor()}.

 @return the text highlight color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getHighlightedTextColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the highlighted text color of the current theme. This is a
 cover method for {@code getCurrentTheme().getHighlightedTextColor()}.

 @return the highlighted text color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getWindowBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the window background color of the current theme. This is a
 cover method for {@code getCurrentTheme().getWindowBackground()}.

 @return the window background color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the window title background color of the current
 theme. This is a cover method for {@code
 getCurrentTheme().getWindowTitleBackground()}.

 @return the window title background color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the window title foreground color of the current
 theme. This is a cover method for {@code
 getCurrentTheme().getWindowTitleForeground()}.

 @return the window title foreground color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleInactiveBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the window title inactive background color of the current
 theme. This is a cover method for {@code
 getCurrentTheme().getWindowTitleInactiveBackground()}.

 @return the window title inactive background color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleInactiveForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the window title inactive foreground color of the current
 theme. This is a cover method for {@code
 getCurrentTheme().getWindowTitleInactiveForeground()}.

 @return the window title inactive foreground color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getMenuBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the menu background color of the current theme. This is
 a cover method for {@code getCurrentTheme().getMenuBackground()}.

 @return the menu background color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getMenuForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the menu foreground color of the current theme. This is
 a cover method for {@code getCurrentTheme().getMenuForeground()}.

 @return the menu foreground color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getMenuSelectedBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the menu selected background color of the current theme. This is
 a cover method for
 {@code getCurrentTheme().getMenuSelectedBackground()}.

 @return the menu selected background color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getMenuSelectedForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the menu selected foreground color of the current theme. This is
 a cover method for
 {@code getCurrentTheme().getMenuSelectedForeground()}.

 @return the menu selected foreground color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getMenuDisabledForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the menu disabled foreground color of the current theme. This is
 a cover method for
 {@code getCurrentTheme().getMenuDisabledForeground()}.

 @return the menu disabled foreground color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getSeparatorBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the separator background color of the current theme. This is
 a cover method for {@code getCurrentTheme().getSeparatorBackground()}.

 @return the separator background color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getSeparatorForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the separator foreground color of the current theme. This is
 a cover method for {@code getCurrentTheme().getSeparatorForeground()}.

 @return the separator foreground color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getAcceleratorForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the accelerator foreground color of the current theme. This is
 a cover method for {@code getCurrentTheme().getAcceleratorForeground()}.

 @return the separator accelerator foreground color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ColorUIResource javax.swing.plaf.metal.MetalLookAndFeel.getAcceleratorSelectedForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the accelerator selected foreground color of the
 current theme. This is a cover method for {@code
 getCurrentTheme().getAcceleratorSelectedForeground()}.

 @return the accelerator selected foreground color

 @see MetalTheme

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.LayoutStyle javax.swing.plaf.metal.MetalLookAndFeel.getLayoutStyle()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a {@code LayoutStyle} implementing the Java look and feel
 design guidelines as specified at
 <a href="http://java.sun.com/products/jlf/ed2/book/HIG.Visual2.html">http://java.sun.com/products/jlf/ed2/book/HIG.Visual2.html</a>.

 @return LayoutStyle implementing the Java look and feel design
         guidelines
 @since 1.6

<!-- END DATA -->
