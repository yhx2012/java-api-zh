<!-- BEGIN KEY -->
public class javax.swing.plaf.multi.MultiSplitPaneUI extends javax.swing.plaf.SplitPaneUI
<!-- END KEY -->
<!-- BEGIN DATA -->
 A multiplexing UI used to combine <code>SplitPaneUI</code>s.
 
 <p>This file was automatically generated by AutoMulti.

 @version 1.28 11/17/05 14:25:39
 @author  Otto Multey

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Vector javax.swing.plaf.multi.MultiSplitPaneUI.uis
<!-- END KEY -->
<!-- BEGIN DATA -->
 The vector containing the real UIs.  This is populated 
 in the call to <code>createUI</code>, and can be obtained by calling
 the <code>getUIs</code> method.  The first element is guaranteed to be the real UI 
 obtained from the default look and feel.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.ComponentUI[] javax.swing.plaf.multi.MultiSplitPaneUI.getUIs()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the list of UIs associated with this multiplexing UI.  This 
 allows processing of the UIs by an application aware of multiplexing 
 UIs on components.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiSplitPaneUI.resetToPreferredSizes(JSplitPane a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>resetToPreferredSizes</code> method on each UI handled by this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiSplitPaneUI.setDividerLocation(JSplitPane a, int b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>setDividerLocation</code> method on each UI handled by this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.multi.MultiSplitPaneUI.getDividerLocation(JSplitPane a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getDividerLocation</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.multi.MultiSplitPaneUI.getMinimumDividerLocation(JSplitPane a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getMinimumDividerLocation</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.multi.MultiSplitPaneUI.getMaximumDividerLocation(JSplitPane a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getMaximumDividerLocation</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiSplitPaneUI.finishedPaintingChildren(JSplitPane a, Graphics b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>finishedPaintingChildren</code> method on each UI handled by this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.multi.MultiSplitPaneUI.contains(JComponent a, int b, int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>contains</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiSplitPaneUI.update(Graphics a, JComponent b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>update</code> method on each UI handled by this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ComponentUI javax.swing.plaf.multi.MultiSplitPaneUI.createUI(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a multiplexing UI instance if any of the auxiliary
 <code>LookAndFeel</code>s supports this UI.  Otherwise, just returns the 
 UI object obtained from the default <code>LookAndFeel</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiSplitPaneUI.installUI(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>installUI</code> method on each UI handled by this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiSplitPaneUI.uninstallUI(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>uninstallUI</code> method on each UI handled by this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiSplitPaneUI.paint(Graphics a, JComponent b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>paint</code> method on each UI handled by this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.multi.MultiSplitPaneUI.getPreferredSize(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getPreferredSize</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.multi.MultiSplitPaneUI.getMinimumSize(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getMinimumSize</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.multi.MultiSplitPaneUI.getMaximumSize(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getMaximumSize</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.multi.MultiSplitPaneUI.getAccessibleChildrenCount(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.plaf.multi.MultiSplitPaneUI.getAccessibleChild(JComponent a, int b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getAccessibleChild</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
