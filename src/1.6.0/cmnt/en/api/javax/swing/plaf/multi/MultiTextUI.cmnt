<!-- BEGIN KEY -->
public class javax.swing.plaf.multi.MultiTextUI extends javax.swing.plaf.TextUI
<!-- END KEY -->
<!-- BEGIN DATA -->
 A multiplexing UI used to combine <code>TextUI</code>s.
 
 <p>This file was automatically generated by AutoMulti.

 @version 1.36 04/07/06 15:16:24
 @author  Otto Multey

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Vector javax.swing.plaf.multi.MultiTextUI.uis
<!-- END KEY -->
<!-- BEGIN DATA -->
 The vector containing the real UIs.  This is populated 
 in the call to <code>createUI</code>, and can be obtained by calling
 the <code>getUIs</code> method.  The first element is guaranteed to be the real UI 
 obtained from the default look and feel.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.ComponentUI[] javax.swing.plaf.multi.MultiTextUI.getUIs()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the list of UIs associated with this multiplexing UI.  This 
 allows processing of the UIs by an application aware of multiplexing 
 UIs on components.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.multi.MultiTextUI.getToolTipText(JTextComponent a, Point b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getToolTipText</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.plaf.multi.MultiTextUI.modelToView(JTextComponent a, int b) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>modelToView</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.plaf.multi.MultiTextUI.modelToView(JTextComponent a, int b, Position.Bias c) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>modelToView</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.multi.MultiTextUI.viewToModel(JTextComponent a, Point b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>viewToModel</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.multi.MultiTextUI.viewToModel(JTextComponent a, Point b, javax.swing.text.Position.Bias[] c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>viewToModel</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.multi.MultiTextUI.getNextVisualPositionFrom(JTextComponent a, int b, Position.Bias c, int d, javax.swing.text.Position.Bias[] e) throws javax.swing.text.BadLocationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getNextVisualPositionFrom</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiTextUI.damageRange(JTextComponent a, int b, int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>damageRange</code> method on each UI handled by this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiTextUI.damageRange(JTextComponent a, int b, int c, Position.Bias d, Position.Bias e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>damageRange</code> method on each UI handled by this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.EditorKit javax.swing.plaf.multi.MultiTextUI.getEditorKit(JTextComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getEditorKit</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.text.View javax.swing.plaf.multi.MultiTextUI.getRootView(JTextComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getRootView</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.multi.MultiTextUI.contains(JComponent a, int b, int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>contains</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiTextUI.update(Graphics a, JComponent b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>update</code> method on each UI handled by this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ComponentUI javax.swing.plaf.multi.MultiTextUI.createUI(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a multiplexing UI instance if any of the auxiliary
 <code>LookAndFeel</code>s supports this UI.  Otherwise, just returns the 
 UI object obtained from the default <code>LookAndFeel</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiTextUI.installUI(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>installUI</code> method on each UI handled by this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiTextUI.uninstallUI(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>uninstallUI</code> method on each UI handled by this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiTextUI.paint(Graphics a, JComponent b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>paint</code> method on each UI handled by this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.multi.MultiTextUI.getPreferredSize(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getPreferredSize</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.multi.MultiTextUI.getMinimumSize(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getMinimumSize</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.multi.MultiTextUI.getMaximumSize(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getMaximumSize</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.multi.MultiTextUI.getAccessibleChildrenCount(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.plaf.multi.MultiTextUI.getAccessibleChild(JComponent a, int b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getAccessibleChild</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
