<!-- BEGIN KEY -->
public static java.awt.Insets javax.swing.plaf.basic.BasicGraphicsUtils.getEtchedInsets()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the amount of space taken up by a border drawn by
 <code>drawEtchedRect()</code>

 @return  the inset of an etched rect

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Insets javax.swing.plaf.basic.BasicGraphicsUtils.getGrooveInsets()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the amount of space taken up by a border drawn by
 <code>drawGroove()</code>

 @return  the inset of a groove border

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.plaf.basic.BasicGraphicsUtils.drawString(Graphics g, String text, int underlinedChar, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
Draw a string with the graphics <code>g</code> at location (x,y)
  just like <code>g.drawString</code> would.
  The first occurrence of <code>underlineChar</code>
  in text will be underlined. The matching algorithm is
  not case sensitive.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void javax.swing.plaf.basic.BasicGraphicsUtils.drawStringUnderlineCharAt(Graphics g, String text, int underlinedIndex, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Draw a string with the graphics <code>g</code> at location
 (<code>x</code>, <code>y</code>)
 just like <code>g.drawString</code> would.
 The character at index <code>underlinedIndex</code>
 in text will be underlined. If <code>index</code> is beyond the
 bounds of <code>text</code> (including < 0), nothing will be
 underlined.

 @param g Graphics to draw with
 @param text String to draw
 @param underlinedIndex Index of character in text to underline
 @param x x coordinate to draw at
 @param y y coordinate to draw at
 @since 1.4

<!-- END DATA -->
