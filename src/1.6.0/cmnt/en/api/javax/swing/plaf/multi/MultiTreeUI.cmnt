<!-- BEGIN KEY -->
public class javax.swing.plaf.multi.MultiTreeUI extends javax.swing.plaf.TreeUI
<!-- END KEY -->
<!-- BEGIN DATA -->
 A multiplexing UI used to combine <code>TreeUI</code>s.
 
 <p>This file was automatically generated by AutoMulti.

 @version 1.33 11/17/05 14:25:40
 @author  Otto Multey

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Vector javax.swing.plaf.multi.MultiTreeUI.uis
<!-- END KEY -->
<!-- BEGIN DATA -->
 The vector containing the real UIs.  This is populated 
 in the call to <code>createUI</code>, and can be obtained by calling
 the <code>getUIs</code> method.  The first element is guaranteed to be the real UI 
 obtained from the default look and feel.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.ComponentUI[] javax.swing.plaf.multi.MultiTreeUI.getUIs()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the list of UIs associated with this multiplexing UI.  This 
 allows processing of the UIs by an application aware of multiplexing 
 UIs on components.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.plaf.multi.MultiTreeUI.getPathBounds(JTree a, TreePath b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getPathBounds</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.plaf.multi.MultiTreeUI.getPathForRow(JTree a, int b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getPathForRow</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.multi.MultiTreeUI.getRowForPath(JTree a, TreePath b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getRowForPath</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.multi.MultiTreeUI.getRowCount(JTree a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getRowCount</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.plaf.multi.MultiTreeUI.getClosestPathForLocation(JTree a, int b, int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getClosestPathForLocation</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.multi.MultiTreeUI.isEditing(JTree a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>isEditing</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.multi.MultiTreeUI.stopEditing(JTree a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>stopEditing</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiTreeUI.cancelEditing(JTree a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>cancelEditing</code> method on each UI handled by this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiTreeUI.startEditingAtPath(JTree a, TreePath b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>startEditingAtPath</code> method on each UI handled by this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.plaf.multi.MultiTreeUI.getEditingPath(JTree a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getEditingPath</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.multi.MultiTreeUI.contains(JComponent a, int b, int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>contains</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiTreeUI.update(Graphics a, JComponent b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>update</code> method on each UI handled by this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ComponentUI javax.swing.plaf.multi.MultiTreeUI.createUI(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a multiplexing UI instance if any of the auxiliary
 <code>LookAndFeel</code>s supports this UI.  Otherwise, just returns the 
 UI object obtained from the default <code>LookAndFeel</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiTreeUI.installUI(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>installUI</code> method on each UI handled by this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiTreeUI.uninstallUI(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>uninstallUI</code> method on each UI handled by this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.multi.MultiTreeUI.paint(Graphics a, JComponent b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>paint</code> method on each UI handled by this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.multi.MultiTreeUI.getPreferredSize(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getPreferredSize</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.multi.MultiTreeUI.getMinimumSize(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getMinimumSize</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.multi.MultiTreeUI.getMaximumSize(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getMaximumSize</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.multi.MultiTreeUI.getAccessibleChildrenCount(JComponent a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.plaf.multi.MultiTreeUI.getAccessibleChild(JComponent a, int b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invokes the <code>getAccessibleChild</code> method on each UI handled by this object.
 
 @return the value obtained from the first UI, which is
 the UI obtained from the default <code>LookAndFeel</code>

<!-- END DATA -->
