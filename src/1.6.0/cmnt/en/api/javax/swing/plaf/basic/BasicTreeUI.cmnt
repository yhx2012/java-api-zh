<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicTreeUI extends javax.swing.plaf.TreeUI
<!-- END KEY -->
<!-- BEGIN DATA -->
 The basic L&F for a hierarchical data structure.
 <p>

 @version 1.193 04/18/06
 @author Scott Violet
 @author Shannon Hickey (drag and drop)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTreeUI.leftChildIndent
<!-- END KEY -->
<!-- BEGIN DATA -->
Distance between left margin and where vertical dashes will be
 drawn. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTreeUI.rightChildIndent
<!-- END KEY -->
<!-- BEGIN DATA -->
Distance to add to leftChildIndent to determine where cell
 contents will be drawn. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTreeUI.totalChildIndent
<!-- END KEY -->
<!-- BEGIN DATA -->
Total distance that will be indented.  The sum of leftChildIndent
 and rightChildIndent. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Dimension javax.swing.plaf.basic.BasicTreeUI.preferredMinSize
<!-- END KEY -->
<!-- BEGIN DATA -->
Minimum preferred size. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTreeUI.lastSelectedRow
<!-- END KEY -->
<!-- BEGIN DATA -->
Index of the row that was last selected. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JTree javax.swing.plaf.basic.BasicTreeUI.tree
<!-- END KEY -->
<!-- BEGIN DATA -->
Component that we're going to be drawing into. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.tree.TreeCellRenderer javax.swing.plaf.basic.BasicTreeUI.currentCellRenderer
<!-- END KEY -->
<!-- BEGIN DATA -->
Renderer that is being used to do the actual cell drawing. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.createdRenderer
<!-- END KEY -->
<!-- BEGIN DATA -->
Set to true if the renderer that is currently in the tree was
 created by this instance. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.tree.TreeCellEditor javax.swing.plaf.basic.BasicTreeUI.cellEditor
<!-- END KEY -->
<!-- BEGIN DATA -->
Editor for the tree. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.createdCellEditor
<!-- END KEY -->
<!-- BEGIN DATA -->
Set to true if editor that is currently in the tree was
 created by this instance. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.stopEditingInCompleteEditing
<!-- END KEY -->
<!-- BEGIN DATA -->
Set to false when editing and shouldSelectCell() returns true meaning
 the node should be selected before editing, used in completeEditing. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.CellRendererPane javax.swing.plaf.basic.BasicTreeUI.rendererPane
<!-- END KEY -->
<!-- BEGIN DATA -->
Used to paint the TreeCellRenderer. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Dimension javax.swing.plaf.basic.BasicTreeUI.preferredSize
<!-- END KEY -->
<!-- BEGIN DATA -->
Size needed to completely display all the nodes. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.validCachedPreferredSize
<!-- END KEY -->
<!-- BEGIN DATA -->
Is the preferredSize valid? 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.AbstractLayoutCache javax.swing.plaf.basic.BasicTreeUI.treeState
<!-- END KEY -->
<!-- BEGIN DATA -->
Object responsible for handling sizing and expanded issues. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Hashtable<javax.swing.tree.TreePath, java.lang.Boolean> javax.swing.plaf.basic.BasicTreeUI.drawingCache
<!-- END KEY -->
<!-- BEGIN DATA -->
Used for minimizing the drawing of vertical lines. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.largeModel
<!-- END KEY -->
<!-- BEGIN DATA -->
True if doing optimizations for a largeModel. Subclasses that
 don't support this may wish to override createLayoutCache to not
 return a FixedHeightLayoutCache instance. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.AbstractLayoutCache.NodeDimensions javax.swing.plaf.basic.BasicTreeUI.nodeDimensions
<!-- END KEY -->
<!-- BEGIN DATA -->
Reponsible for telling the TreeState the size needed for a node. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeModel javax.swing.plaf.basic.BasicTreeUI.treeModel
<!-- END KEY -->
<!-- BEGIN DATA -->
Used to determine what to display. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeSelectionModel javax.swing.plaf.basic.BasicTreeUI.treeSelectionModel
<!-- END KEY -->
<!-- BEGIN DATA -->
Model maintaing the selection. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTreeUI.depthOffset
<!-- END KEY -->
<!-- BEGIN DATA -->
How much the depth should be offset to properly calculate
 x locations. This is based on whether or not the root is visible,
 and if the root handles are visible. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.plaf.basic.BasicTreeUI.editingComponent
<!-- END KEY -->
<!-- BEGIN DATA -->
When editing, this will be the Component that is doing the actual
 editing. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreePath javax.swing.plaf.basic.BasicTreeUI.editingPath
<!-- END KEY -->
<!-- BEGIN DATA -->
Path that is being edited. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTreeUI.editingRow
<!-- END KEY -->
<!-- BEGIN DATA -->
Row that is being edited. Should only be referenced if
 editingComponent is not null. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.editorHasDifferentSize
<!-- END KEY -->
<!-- BEGIN DATA -->
Set to true if the editor has a different size than the renderer. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.setLargeModel(boolean largeModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Updates the componentListener, if necessary.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.setRowHeight(int rowHeight)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the row height, this is forwarded to the treeState.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.setCellRenderer(TreeCellRenderer tcr)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the TreeCellRenderer to <code>tcr</code>. This invokes
 <code>updateRenderer</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeCellRenderer javax.swing.plaf.basic.BasicTreeUI.getCellRenderer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return currentCellRenderer, which will either be the trees
 renderer, or defaultCellRenderer, which ever wasn't null.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.setModel(TreeModel model)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the TreeModel.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.setRootVisible(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the root to being visible.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.setShowsRootHandles(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines whether the node handles are to be displayed.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.setCellEditor(TreeCellEditor editor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the cell editor.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.setEditable(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Configures the receiver to allow, or not allow, editing.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.setSelectionModel(TreeSelectionModel newLSM)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets the selection model. The appropriate listener are installed
 on the model.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.plaf.basic.BasicTreeUI.getPathBounds(JTree tree, TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the Rectangle enclosing the label portion that the
 last item in path will be drawn into.  Will return null if
 any component in path is currently valid.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.plaf.basic.BasicTreeUI.getPathForRow(JTree tree, int row)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the path for passed in row.  If row is not visible
 null is returned.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicTreeUI.getRowForPath(JTree tree, TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the row that the last item identified in path is visible
 at.  Will return -1 if any of the elements in path are not
 currently visible.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicTreeUI.getRowCount(JTree tree)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of rows that are being displayed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.plaf.basic.BasicTreeUI.getClosestPathForLocation(JTree tree, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the path to the node that is closest to x,y.  If
 there is nothing currently visible this will return null, otherwise
 it'll always return a valid path.  If you need to test if the
 returned object is exactly at x, y you should get the bounds for
 the returned path and test x, y against that.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.basic.BasicTreeUI.isEditing(JTree tree)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the tree is being edited.  The item that is being
 edited can be returned by getEditingPath().

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.basic.BasicTreeUI.stopEditing(JTree tree)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Stops the current editing session.  This has no effect if the
 tree isn't being edited.  Returns true if the editor allows the
 editing session to stop.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicTreeUI.cancelEditing(JTree tree)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Cancels the current editing session.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicTreeUI.startEditingAtPath(JTree tree, TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Selects the last item in path and tries to edit it.  Editing will
 fail if the CellEditor won't allow it for the selected item.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.tree.TreePath javax.swing.plaf.basic.BasicTreeUI.getEditingPath(JTree tree)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the path to the element that is being edited.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.prepareForUIInstall()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked after the <code>tree</code> instance variable has been
 set, but before any defaults/listeners have been installed.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.completeUIInstall()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked from installUI after all the defaults/listeners have been
 installed.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.installComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Intalls the subcomponents of the tree, which is the renderer pane.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.AbstractLayoutCache.NodeDimensions javax.swing.plaf.basic.BasicTreeUI.createNodeDimensions()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an instance of NodeDimensions that is able to determine
 the size of a given node in the tree.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeListener javax.swing.plaf.basic.BasicTreeUI.createPropertyChangeListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a listener that is responsible that updates the UI based on
 how the tree changes.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.event.MouseListener javax.swing.plaf.basic.BasicTreeUI.createMouseListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the listener responsible for updating the selection based on
 mouse events.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.event.FocusListener javax.swing.plaf.basic.BasicTreeUI.createFocusListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a listener that is responsible for updating the display
 when focus is lost/gained.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.event.KeyListener javax.swing.plaf.basic.BasicTreeUI.createKeyListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the listener reponsible for getting key events from
 the tree.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeListener javax.swing.plaf.basic.BasicTreeUI.createSelectionModelPropertyChangeListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the listener responsible for getting property change
 events from the selection model.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.TreeSelectionListener javax.swing.plaf.basic.BasicTreeUI.createTreeSelectionListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the listener that updates the display based on selection change
 methods.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.CellEditorListener javax.swing.plaf.basic.BasicTreeUI.createCellEditorListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a listener to handle events from the current editor.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.event.ComponentListener javax.swing.plaf.basic.BasicTreeUI.createComponentListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates and returns a new ComponentHandler. This is used for
 the large model to mark the validCachedPreferredSize as invalid
 when the component moves.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.TreeExpansionListener javax.swing.plaf.basic.BasicTreeUI.createTreeExpansionListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates and returns the object responsible for updating the treestate
 when nodes expanded state changes.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.AbstractLayoutCache javax.swing.plaf.basic.BasicTreeUI.createLayoutCache()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the object responsible for managing what is expanded, as
 well as the size of nodes.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.CellRendererPane javax.swing.plaf.basic.BasicTreeUI.createCellRendererPane()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the renderer pane that renderer components are placed in.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeCellEditor javax.swing.plaf.basic.BasicTreeUI.createDefaultCellEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a default cell editor.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreeCellRenderer javax.swing.plaf.basic.BasicTreeUI.createDefaultCellRenderer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the default cell renderer that is used to do the
 stamping of each node.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.TreeModelListener javax.swing.plaf.basic.BasicTreeUI.createTreeModelListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a listener that can update the tree when the model changes.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.uninstallComponents()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Uninstalls the renderer pane.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.basic.BasicTreeUI.getBaseline(JComponent c, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the baseline.

 @throws NullPointerException {@inheritDoc}
 @throws IllegalArgumentException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component.BaselineResizeBehavior javax.swing.plaf.basic.BasicTreeUI.getBaselineResizeBehavior(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an enum indicating how the baseline of the component
 changes as the size changes.

 @throws NullPointerException {@inheritDoc}
 @see javax.swing.JComponent#getBaseline(int, int)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.paintHorizontalPartOfLeg(Graphics g, Rectangle clipBounds, Insets insets, Rectangle bounds, TreePath path, int row, boolean isExpanded, boolean hasBeenExpanded, boolean isLeaf)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paints the horizontal part of the leg. The receiver should
 NOT modify <code>clipBounds</code>, or <code>insets</code>.<p>
 NOTE: <code>parentRow</code> can be -1 if the root is not visible.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.paintVerticalPartOfLeg(Graphics g, Rectangle clipBounds, Insets insets, TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paints the vertical part of the leg. The receiver should
 NOT modify <code>clipBounds</code>, <code>insets</code>.<p>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.paintExpandControl(Graphics g, Rectangle clipBounds, Insets insets, Rectangle bounds, TreePath path, int row, boolean isExpanded, boolean hasBeenExpanded, boolean isLeaf)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paints the expand (toggle) part of a row. The receiver should
 NOT modify <code>clipBounds</code>, or <code>insets</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.paintRow(Graphics g, Rectangle clipBounds, Insets insets, Rectangle bounds, TreePath path, int row, boolean isExpanded, boolean hasBeenExpanded, boolean isLeaf)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paints the renderer part of a row. The receiver should
 NOT modify <code>clipBounds</code>, or <code>insets</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.shouldPaintExpandControl(TreePath path, int row, boolean isExpanded, boolean hasBeenExpanded, boolean isLeaf)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the expand (toggle) control should be drawn for
 the specified row.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.paintVerticalLine(Graphics g, JComponent c, int x, int top, int bottom)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paints a vertical line.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.paintHorizontalLine(Graphics g, JComponent c, int y, int left, int right)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paints a horizontal line.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTreeUI.getVerticalLegBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 The vertical element of legs between nodes starts at the bottom of the
 parent node by default.  This method makes the leg start below that.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTreeUI.getHorizontalLegBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 The horizontal element of legs between nodes starts at the
 right of the left-hand side of the child node by default.  This
 method makes the leg end before that.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicTreeUI.getRowX(int row, int depth)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the location, along the x-axis, to render a particular row
 at. The return value does not include any Insets specified on the JTree.
 This does not check for the validity of the row or depth, it is assumed
 to be correct and will not throw an Exception if the row or depth
 doesn't match that of the tree.

 @param row Row to return x location for
 @param depth Depth of the row
 @return amount to indent the given row.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.updateLayoutCacheExpandedNodes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Makes all the nodes that are expanded in JTree expanded in LayoutCache.
 This invokes updateExpandedDescendants with the root path.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.updateExpandedDescendants(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Updates the expanded state of all the descendants of <code>path</code>
 by getting the expanded descendants from the tree and forwarding
 to the tree state.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.tree.TreePath javax.swing.plaf.basic.BasicTreeUI.getLastChildPath(TreePath parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a path to the last child of <code>parent</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.updateDepthOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Updates how much each depth should be offset by.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.updateCellEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Updates the cellEditor based on the editability of the JTree that
 we're contained in.  If the tree is editable but doesn't have a
 cellEditor, a basic one will be used.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.updateRenderer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Messaged from the tree we're in when the renderer has changed.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.configureLayoutCache()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets the TreeState instance based on the tree we're providing the
 look and feel for.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.updateSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Marks the cached size as being invalid, and messages the
 tree with <code>treeDidChange</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.updateCachedPreferredSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Updates the <code>preferredSize</code> instance variable,
 which is returned from <code>getPreferredSize()</code>.<p>
 For left to right orientations, the size is determined from the
 current AbstractLayoutCache. For RTL orientations, the preferred size
 becomes the width minus the minimum x position.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.pathWasExpanded(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Messaged from the VisibleTreeNode after it has been expanded.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.pathWasCollapsed(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Messaged from the VisibleTreeNode after it has collapsed.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.ensureRowsAreVisible(int beginRow, int endRow)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Ensures that the rows identified by beginRow through endRow are
 visible.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicTreeUI.setPreferredMinSize(Dimension newSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
Sets the preferred minimum size.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicTreeUI.getPreferredMinSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
Returns the minimum preferred size.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicTreeUI.getPreferredSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
Returns the preferred size to properly display the tree,
 this is a cover method for getPreferredSize(c, false).

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicTreeUI.getPreferredSize(JComponent c, boolean checkConsistancy)
<!-- END KEY -->
<!-- BEGIN DATA -->
Returns the preferred size to represent the tree in
 <I>c</I>.  If <I>checkConsistancy</I> is true
 <b>checkConsistancy</b> is messaged first.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicTreeUI.getMinimumSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the minimum size for this component.  Which will be
 the min preferred size or 0, 0.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicTreeUI.getMaximumSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the maximum size for this component, which will be the
 preferred size if the instance is currently in a JTree, or 0, 0.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.completeEditing()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Messages to stop the editing session. If the UI the receiver
 is providing the look and feel for returns true from
 <code>getInvokesStopCellEditing</code>, stopCellEditing will
 invoked on the current editor. Then completeEditing will
 be messaged with false, true, false to cancel any lingering
 editing.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.completeEditing(boolean messageStop, boolean messageCancel, boolean messageTree)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Stops the editing session.  If messageStop is true the editor
 is messaged with stopEditing, if messageCancel is true the
 editor is messaged with cancelEditing. If messageTree is true
 the treeModel is messaged with valueForPathChanged.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.startEditing(TreePath path, MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Will start editing for node if there is a cellEditor and
 shouldSelectCell returns true.<p>
 This assumes that path is valid and visible.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.checkForClickInExpandControl(TreePath path, int mouseX, int mouseY)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the <code>mouseX</code> and <code>mouseY</code> are in the
 expand/collapse region of the <code>row</code>, this will toggle
 the row.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.isLocationInExpandControl(TreePath path, int mouseX, int mouseY)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if <code>mouseX</code> and <code>mouseY</code> fall
 in the area of row that is used to expand/collapse the node and
 the node at <code>row</code> does not represent a leaf.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.handleExpandControlClick(TreePath path, int mouseX, int mouseY)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Messaged when the user clicks the particular row, this invokes
 toggleExpandState.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.toggleExpandState(TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Expands path if it is not expanded, or collapses row if it is expanded.
 If expanding a path and JTree scrolls on expand, ensureRowsAreVisible
 is invoked to scroll as many of the children to visible as possible
 (tries to scroll to last visible descendant of path).

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.isToggleSelectionEvent(MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returning true signifies a mouse event on the node should toggle
 the selection of only the row under mouse.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.isMultiSelectEvent(MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returning true signifies a mouse event on the node should select
 from the anchor point.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.isToggleEvent(MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returning true indicates the row under the mouse should be toggled
 based on the event. This is invoked after checkForClickInExpandControl,
 implying the location is not in the expand (toggle) control

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicTreeUI.selectPathForEvent(TreePath path, MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Messaged to update the selection based on a MouseEvent over a
 particular row. If the event is a toggle selection event, the
 row is either selected, or deselected. If the event identifies
 a multi selection event, the selection is updated from the
 anchor point. Otherwise the row is selected, and if the event
 specified a toggle event the row is expanded/collapsed.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicTreeUI.isLeaf(int row)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @return true if the node at <code>row</code> is a leaf.

<!-- END DATA -->
