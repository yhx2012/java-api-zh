<!-- BEGIN KEY -->
public abstract class javax.swing.plaf.synth.SynthStyle extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>SynthStyle</code> is a set of style properties.
 Each <code>SynthUI</code> references at least one
 <code>SynthStyle</code> that is obtained using a
 <code>SynthStyleFactory</code>. You typically don't need to interact with
 this class directly, rather you will load a
 <a href="doc-files/synthFileFormat.html">Synth File Format file</a> into
 <code>SynthLookAndFeel</code> that will create a set of SynthStyles.

 @see SynthLookAndFeel
 @see SynthStyleFactory

 @version 1.38, 03/29/06
 @since 1.5
 @author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.synth.SynthStyle()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a SynthStyle.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.synth.SynthGraphicsUtils javax.swing.plaf.synth.SynthStyle.getGraphicsUtils(SynthContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>SynthGraphicUtils</code> for the specified context.

 @param context SynthContext identifying requester
 @return SynthGraphicsUtils

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.plaf.synth.SynthStyle.getColor(SynthContext context, ColorType type)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the color for the specified state. This gives precedence to
 foreground and background of the <code>JComponent</code>. If the
 <code>Color</code> from the <code>JComponent</code> is not appropriate,
 or not used, this will invoke <code>getColorForState</code>. Subclasses
 should generally not have to override this, instead override
 {@link #getColorForState}.

 @param context SynthContext identifying requester
 @param type Type of color being requested.
 @return Color

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract java.awt.Color javax.swing.plaf.synth.SynthStyle.getColorForState(SynthContext context, ColorType type)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the color for the specified state. This should NOT call any
 methods on the <code>JComponent</code>.

 @param context SynthContext identifying requester
 @param type Type of color being requested.
 @return Color to render with

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font javax.swing.plaf.synth.SynthStyle.getFont(SynthContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the Font for the specified state. This redirects to the
 <code>JComponent</code> from the <code>context</code> as necessary.
 If this does not redirect
 to the JComponent {@link #getFontForState} is invoked.

 @param context SynthContext identifying requester
 @return Font to render with

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract java.awt.Font javax.swing.plaf.synth.SynthStyle.getFontForState(SynthContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the font for the specified state. This should NOT call any
 method on the <code>JComponent</code>.

 @param context SynthContext identifying requester
 @return Font to render with

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.plaf.synth.SynthStyle.getInsets(SynthContext context, Insets insets)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the Insets that are used to calculate sizing information.

 @param context SynthContext identifying requester
 @param insets Insets to place return value in.
 @return Sizing Insets.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.synth.SynthPainter javax.swing.plaf.synth.SynthStyle.getPainter(SynthContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>SynthPainter</code> that will be used for painting.
 This may return null.

 @param context SynthContext identifying requester
 @return SynthPainter to use 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.synth.SynthStyle.isOpaque(SynthContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the region is opaque.

 @param context SynthContext identifying requester
 @return true if region is opaque.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.swing.plaf.synth.SynthStyle.get(SynthContext context, Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Getter for a region specific style property.

 @param context SynthContext identifying requester
 @param key Property being requested.
 @return Value of the named property

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthStyle.installDefaults(SynthContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Installs the necessary state from this Style on the
 <code>JComponent</code> from <code>context</code>.

 @param context SynthContext identifying component to install properties
        to.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.synth.SynthStyle.uninstallDefaults(SynthContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Uninstalls any state that this style installed on
 the <code>JComponent</code> from <code>context</code>.
 <p>
 Styles should NOT depend upon this being called, in certain cases
 it may never be called.

 @param context SynthContext identifying component to install properties
        to.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.plaf.synth.SynthStyle.getInt(SynthContext context, Object key, int defaultValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convenience method to get a specific style property whose value is
 a <code>Number</code>. If the value is a <code>Number</code>,
 <code>intValue</code> is returned, otherwise <code>defaultValue</code>
 is returned.

 @param context SynthContext identifying requester
 @param key Property being requested.
 @param defaultValue Value to return if the property has not been
        specified, or is not a Number
 @return Value of the named property

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.synth.SynthStyle.getBoolean(SynthContext context, Object key, boolean defaultValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convenience method to get a specific style property whose value is
 an Boolean.

 @param context SynthContext identifying requester
 @param key Property being requested.
 @param defaultValue Value to return if the property has not been
        specified, or is not a Boolean
 @return Value of the named property

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.Icon javax.swing.plaf.synth.SynthStyle.getIcon(SynthContext context, Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convenience method to get a specific style property whose value is
 an Icon.

 @param context SynthContext identifying requester
 @param key Property being requested.
 @return Value of the named property, or null if not specified

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.plaf.synth.SynthStyle.getString(SynthContext context, Object key, String defaultValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convenience method to get a specific style property whose value is
 a String.

 @param context SynthContext identifying requester
 @param key Property being requested.
 @param defaultValue Value to return if the property has not been
        specified, or is not a String
 @return Value of the named property

<!-- END DATA -->
