<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicToolBarUI extends javax.swing.plaf.ToolBarUI implements javax.swing.SwingConstants
<!-- END KEY -->
<!-- BEGIN DATA -->
 A Basic L&F implementation of ToolBarUI.  This implementation 
 is a "combined" view/controller.
 <p>

 @version 1.102 04/12/06
 @author Georges Saab
 @author Jeff Shapiro

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.KeyStroke javax.swing.plaf.basic.BasicToolBarUI.upKey
<!-- END KEY -->
<!-- BEGIN DATA -->
 As of Java 2 platform v1.3 this previously undocumented field is no
 longer used.
 Key bindings are now defined by the LookAndFeel, please refer to
 the key bindings specification for further details.

 @deprecated As of Java 2 platform v1.3.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.KeyStroke javax.swing.plaf.basic.BasicToolBarUI.downKey
<!-- END KEY -->
<!-- BEGIN DATA -->
 As of Java 2 platform v1.3 this previously undocumented field is no
 longer used.
 Key bindings are now defined by the LookAndFeel, please refer to
 the key bindings specification for further details.

 @deprecated As of Java 2 platform v1.3.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.KeyStroke javax.swing.plaf.basic.BasicToolBarUI.leftKey
<!-- END KEY -->
<!-- BEGIN DATA -->
 As of Java 2 platform v1.3 this previously undocumented field is no
 longer used.
 Key bindings are now defined by the LookAndFeel, please refer to
 the key bindings specification for further details.

 @deprecated As of Java 2 platform v1.3.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.KeyStroke javax.swing.plaf.basic.BasicToolBarUI.rightKey
<!-- END KEY -->
<!-- BEGIN DATA -->
 As of Java 2 platform v1.3 this previously undocumented field is no
 longer used.
 Key bindings are now defined by the LookAndFeel, please refer to
 the key bindings specification for further details.

 @deprecated As of Java 2 platform v1.3.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.border.Border javax.swing.plaf.basic.BasicToolBarUI.createRolloverBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a rollover border for toolbar components. The 
 rollover border will be installed if rollover borders are 
 enabled. 
 <p>
 Override this method to provide an alternate rollover border.

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.border.Border javax.swing.plaf.basic.BasicToolBarUI.createNonRolloverBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the non rollover border for toolbar components. This
 border will be installed as the border for components added
 to the toolbar if rollover borders are not enabled.
 <p>
 Override this method to provide an alternate rollover border.

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JFrame javax.swing.plaf.basic.BasicToolBarUI.createFloatingFrame(JToolBar toolbar)
<!-- END KEY -->
<!-- BEGIN DATA -->
 No longer used, use BasicToolBarUI.createFloatingWindow(JToolBar)
 @see #createFloatingWindow

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.RootPaneContainer javax.swing.plaf.basic.BasicToolBarUI.createFloatingWindow(JToolBar toolbar)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a window which contains the toolbar after it has been
 dragged out from its container
 @return a <code>RootPaneContainer</code> object, containing the toolbar.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.basic.BasicToolBarUI.isRolloverBorders()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a flag to determine whether rollover button borders 
 are enabled.

 @return true if rollover borders are enabled; false otherwise
 @see #setRolloverBorders
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicToolBarUI.setRolloverBorders(boolean rollover)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the flag for enabling rollover borders on the toolbar and it will
 also install the apropriate border depending on the state of the flag.
    
 @param rollover if true, rollover borders are installed. 
	      Otherwise non-rollover borders are installed
 @see #isRolloverBorders
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicToolBarUI.installRolloverBorders(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Installs rollover borders on all the child components of the JComponent.
 <p>
 This is a convenience method to call <code>setBorderToRollover</code> 
 for each child component.
    
 @param c container which holds the child components (usally a JToolBar)
 @see #setBorderToRollover
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicToolBarUI.installNonRolloverBorders(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Installs non-rollover borders on all the child components of the JComponent.
 A non-rollover border is the border that is installed on the child component
 while it is in the toolbar.
 <p>
 This is a convenience method to call <code>setBorderToNonRollover</code> 
 for each child component.
    
 @param c container which holds the child components (usally a JToolBar)
 @see #setBorderToNonRollover
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicToolBarUI.installNormalBorders(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Installs normal borders on all the child components of the JComponent.
 A normal border is the original border that was installed on the child
 component before it was added to the toolbar.
 <p>
 This is a convenience method to call <code>setBorderNormal</code> 
 for each child component.
    
 @param c container which holds the child components (usally a JToolBar)
 @see #setBorderToNonRollover
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicToolBarUI.setBorderToRollover(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the border of the component to have a rollover border which
 was created by <code>createRolloverBorder</code>. 

 @param c component which will have a rollover border installed 
 @see #createRolloverBorder
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.border.Border javax.swing.plaf.basic.BasicToolBarUI.getRolloverBorder(AbstractButton b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a rollover border for the button. 

 @param b the button to calculate the rollover border for
 @return the rollover border
 @see #setBorderToRollover
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicToolBarUI.setBorderToNonRollover(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the border of the component to have a non-rollover border which
 was created by <code>createNonRolloverBorder</code>. 

 @param c component which will have a non-rollover border installed 
 @see #createNonRolloverBorder
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.border.Border javax.swing.plaf.basic.BasicToolBarUI.getNonRolloverBorder(AbstractButton b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a non-rollover border for the button. 

 @param b the button to calculate the non-rollover border for
 @return the non-rollover border
 @see #setBorderToNonRollover
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicToolBarUI.setBorderToNormal(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the border of the component to have a normal border.
 A normal border is the original border that was installed on the child
 component before it was added to the toolbar.

 @param c component which will have a normal border re-installed 
 @see #createNonRolloverBorder
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.plaf.basic.BasicToolBarUI.getDockingColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the color displayed when over a docking area

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicToolBarUI.setDockingColor(Color c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the color displayed when over a docking area

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.plaf.basic.BasicToolBarUI.getFloatingColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the color displayed when over a floating area

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicToolBarUI.setFloatingColor(Color c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the color displayed when over a floating area

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicToolBarUI.paintDragWindow(Graphics g)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paints the contents of the window used for dragging.

 @param g Graphics to paint to.
 @throws NullPointerException is <code>g</code> is null
 @since 1.5

<!-- END DATA -->
