<!-- BEGIN KEY -->
public class javax.swing.plaf.basic.BasicOptionPaneUI extends javax.swing.plaf.OptionPaneUI
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides the basic look and feel for a <code>JOptionPane</code>.
 <code>BasicMessagePaneUI</code> provides a means to place an icon,
 message and buttons into a <code>Container</code>.
 Generally, the layout will look like:<p>
 <pre>
        ------------------
        | i | message    |
        | c | message    |
        | o | message    |
        | n | message    |
        ------------------
        |     buttons    |
        |________________|
 </pre>
 icon is an instance of <code>Icon</code> that is wrapped inside a
 <code>JLabel</code>.  The message is an opaque object and is tested
 for the following: if the message is a <code>Component</code> it is
 added to the <code>Container</code>, if it is an <code>Icon</code>
 it is wrapped inside a <code>JLabel</code> and added to the 
 <code>Container</code> otherwise it is wrapped inside a <code>JLabel</code>.
 <p>
 The above layout is used when the option pane's 
 <code>ComponentOrientation</code> property is horizontal, left-to-right.
 The layout will be adjusted appropriately for other orientations.
 <p>
 The <code>Container</code>, message, icon, and buttons are all
 determined from abstract methods.
 
 @version 1.61 04/04/06
 @author James Gosling
 @author Scott Violet
 @author Amy Fowler

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JOptionPane javax.swing.plaf.basic.BasicOptionPaneUI.optionPane
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>JOptionPane</code> that the receiver is providing the
 look and feel for.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JComponent javax.swing.plaf.basic.BasicOptionPaneUI.inputComponent
<!-- END KEY -->
<!-- BEGIN DATA -->
JComponent provide for input if optionPane.getWantsInput() returns
 true. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component javax.swing.plaf.basic.BasicOptionPaneUI.initialFocusComponent
<!-- END KEY -->
<!-- BEGIN DATA -->
Component to receive focus when messaged with selectInitialValue. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicOptionPaneUI.hasCustomComponents
<!-- END KEY -->
<!-- BEGIN DATA -->
This is set to true in validateComponent if a Component is contained
 in either the message or the buttons. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.plaf.ComponentUI javax.swing.plaf.basic.BasicOptionPaneUI.createUI(JComponent x)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new BasicOptionPaneUI instance.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicOptionPaneUI.installUI(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Installs the receiver as the L&F for the passed in
 <code>JOptionPane</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicOptionPaneUI.uninstallUI(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the receiver from the L&F controller of the passed in split
 pane.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicOptionPaneUI.getMinimumOptionPaneSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the minimum size the option pane should be. Primarily
 provided for subclassers wishing to offer a different minimum size.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension javax.swing.plaf.basic.BasicOptionPaneUI.getPreferredSize(JComponent c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If <code>c</code> is the <code>JOptionPane</code> the receiver
 is contained in, the preferred
 size that is returned is the maximum of the preferred size of
 the <code>LayoutManager</code> for the <code>JOptionPane</code>, and
 <code>getMinimumOptionPaneSize</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Container javax.swing.plaf.basic.BasicOptionPaneUI.createMessageArea()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Messaged from installComponents to create a Container containing the
 body of the message. The icon is the created by calling
 <code>addIcon</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicOptionPaneUI.addMessageComponents(Container container, GridBagConstraints cons, Object msg, int maxll, boolean internallyCreated)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the appropriate object to represent <code>msg</code> and
 places it into <code>container</code>. If <code>msg</code> is an
 instance of Component, it is added directly, if it is an Icon,
 a JLabel is created to represent it, otherwise a JLabel is
 created for the string, if <code>d</code> is an Object[], this
 method will be recursively invoked for the children.
 <code>internallyCreated</code> is true if Objc is an instance
 of Component and was created internally by this method (this is
 used to correctly set hasCustomComponents only if !internallyCreated).

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object javax.swing.plaf.basic.BasicOptionPaneUI.getMessage()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the message to display from the JOptionPane the receiver is
 providing the look and feel for.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicOptionPaneUI.addIcon(Container top)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates and adds a JLabel representing the icon returned from
 <code>getIcon</code> to <code>top</code>. This is messaged from
 <code>createMessageArea</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.Icon javax.swing.plaf.basic.BasicOptionPaneUI.getIcon()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the icon from the JOptionPane the receiver is providing
 the look and feel for, or the default icon as returned from
 <code>getDefaultIcon</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.Icon javax.swing.plaf.basic.BasicOptionPaneUI.getIconForType(int messageType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the icon to use for the passed in type.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicOptionPaneUI.getMaxCharactersPerLineCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the maximum number of characters to place on a line.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicOptionPaneUI.burstStringInto(Container c, String d, int maxll)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Recursively creates new JLabel instances to represent <code>d</code>.
 Each JLabel instance is added to <code>c</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Container javax.swing.plaf.basic.BasicOptionPaneUI.createButtonArea()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates and returns a Container containing the buttons. The buttons
 are created by calling <code>getButtons</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicOptionPaneUI.addButtonComponents(Container container, java.lang.Object[] buttons, int initialIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the appropriate object to represent each of the objects in
 <code>buttons</code> and adds it to <code>container</code>. This
 differs from addMessageComponents in that it will recurse on
 <code>buttons</code> and that if button is not a Component
 it will create an instance of JButton.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object[] javax.swing.plaf.basic.BasicOptionPaneUI.getButtons()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the buttons to display from the JOptionPane the receiver is
 providing the look and feel for. If the JOptionPane has options
 set, they will be provided, otherwise if the optionType is
 YES_NO_OPTION, yesNoOptions is returned, if the type is
 YES_NO_CANCEL_OPTION yesNoCancelOptions is returned, otherwise
 defaultButtons are returned.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.plaf.basic.BasicOptionPaneUI.getSizeButtonsToSameWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true, basic L&F wants all the buttons to have the same
 width.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.plaf.basic.BasicOptionPaneUI.getInitialValueIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the initial index into the buttons to select. The index
 is calculated from the initial value from the JOptionPane and
 options of the JOptionPane or 0.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.plaf.basic.BasicOptionPaneUI.resetInputValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the input value in the option pane the receiver is providing
 the look and feel for based on the value in the inputComponent.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.plaf.basic.BasicOptionPaneUI.selectInitialValue(JOptionPane op)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If inputComponent is non-null, the focus is requested on that,
 otherwise request focus on the default value

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.plaf.basic.BasicOptionPaneUI.containsCustomComponents(JOptionPane op)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if in the last call to validateComponent the message
 or buttons contained a subclass of Component.

<!-- END DATA -->
