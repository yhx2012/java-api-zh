<!-- BEGIN KEY -->
public abstract class javax.swing.plaf.TreeUI extends javax.swing.plaf.ComponentUI
<!-- END KEY -->
<!-- BEGIN DATA -->
 Pluggable look and feel interface for JTree.

 @version 1.25 11/17/05
 @author Rob Davis
 @author Scott Violet

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.awt.Rectangle javax.swing.plaf.TreeUI.getPathBounds(JTree tree, TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the Rectangle enclosing the label portion that the
 last item in path will be drawn into.  Will return null if
 any component in path is currently valid.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.tree.TreePath javax.swing.plaf.TreeUI.getPathForRow(JTree tree, int row)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the path for passed in row.  If row is not visible
 null is returned.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.plaf.TreeUI.getRowForPath(JTree tree, TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the row that the last item identified in path is visible
 at.  Will return -1 if any of the elements in path are not
 currently visible.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int javax.swing.plaf.TreeUI.getRowCount(JTree tree)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of rows that are being displayed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.tree.TreePath javax.swing.plaf.TreeUI.getClosestPathForLocation(JTree tree, int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the path to the node that is closest to x,y.  If
 there is nothing currently visible this will return null, otherwise
 it'll always return a valid path.  If you need to test if the
 returned object is exactly at x, y you should get the bounds for
 the returned path and test x, y against that.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.swing.plaf.TreeUI.isEditing(JTree tree)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the tree is being edited.  The item that is being
 edited can be returned by getEditingPath().

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.swing.plaf.TreeUI.stopEditing(JTree tree)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Stops the current editing session.  This has no effect if the
 tree isn't being edited.  Returns true if the editor allows the
 editing session to stop.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.plaf.TreeUI.cancelEditing(JTree tree)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Cancels the current editing session. This has no effect if the
 tree isn't being edited.  Returns true if the editor allows the
 editing session to stop.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.swing.plaf.TreeUI.startEditingAtPath(JTree tree, TreePath path)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Selects the last item in path and tries to edit it.  Editing will
 fail if the CellEditor won't allow it for the selected item.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.swing.tree.TreePath javax.swing.plaf.TreeUI.getEditingPath(JTree tree)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the path to the element that is being edited.

<!-- END DATA -->
