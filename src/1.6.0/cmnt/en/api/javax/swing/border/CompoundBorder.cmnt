<!-- BEGIN KEY -->
public class javax.swing.border.CompoundBorder extends javax.swing.border.AbstractBorder
<!-- END KEY -->
<!-- BEGIN DATA -->
 A composite Border class used to compose two Border objects
 into a single border by nesting an inside Border object within 
 the insets of an outside Border object.

 For example, this class may be used to add blank margin space
 to a component with an existing decorative border:
 <p>
 <code><pre>
    Border border = comp.getBorder();
    Border margin = new EmptyBorder(10,10,10,10);
    comp.setBorder(new CompoundBorder(border, margin));
 </pre></code>
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @version 1.21 11/17/05
 @author David Kloba

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.CompoundBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates a compound border with null outside and inside borders.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.CompoundBorder(Border outsideBorder, Border insideBorder)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates a compound border with the specified outside and 
 inside borders.  Either border may be null.
 @param outsideBorder the outside border
 @param insideBorder the inside border to be nested

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.border.CompoundBorder.isBorderOpaque()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether or not this compound border is opaque.
 Returns true if both the inside and outside borders are
 non-null and opaque; returns false otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.border.CompoundBorder.paintBorder(Component c, Graphics g, int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Paints the compound border by painting the outside border
 with the specified position and size and then painting the
 inside border at the specified position and size offset by
 the insets of the outside border.
 @param c the component for which this border is being painted
 @param g the paint graphics
 @param x the x position of the painted border
 @param y the y position of the painted border
 @param width the width of the painted border
 @param height the height of the painted border

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.border.CompoundBorder.getBorderInsets(Component c, Insets insets)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Reinitialize the insets parameter with this Border's current Insets. 
 @param c the component for which this border insets value applies
 @param insets the object to be reinitialized

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.border.CompoundBorder.getBorderInsets(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the insets of the composite border by adding
 the insets of the outside border to the insets of the
 inside border.
 @param c the component for which this border insets value applies

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.Border javax.swing.border.CompoundBorder.getOutsideBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the outside border object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.Border javax.swing.border.CompoundBorder.getInsideBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the inside border object.

<!-- END DATA -->
