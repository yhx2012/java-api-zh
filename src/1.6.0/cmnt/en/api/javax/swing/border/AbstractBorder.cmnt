<!-- BEGIN KEY -->
public abstract class javax.swing.border.AbstractBorder extends java.lang.Object implements javax.swing.border.Border, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A class that implements an empty border with no size.  
 This provides a convenient base class from which other border 
 classes can be easily derived.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @version 1.36 02/14/06
 @author David Kloba

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.border.AbstractBorder.paintBorder(Component c, Graphics g, int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This default implementation does no painting.
 @param c the component for which this border is being painted
 @param g the paint graphics
 @param x the x position of the painted border
 @param y the y position of the painted border
 @param width the width of the painted border
 @param height the height of the painted border

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.border.AbstractBorder.getBorderInsets(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This default implementation returns a new <code>Insets</code>
 instance where the <code>top</code>, <code>left</code>,
 <code>bottom</code>, and 
 <code>right</code> fields are set to <code>0</code>.
 @param c the component for which this border insets value applies
 @return the new <code>Insets</code> object initialized to 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.border.AbstractBorder.getBorderInsets(Component c, Insets insets)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Reinitializes the insets parameter with this Border's current Insets. 
 @param c the component for which this border insets value applies
 @param insets the object to be reinitialized
 @return the <code>insets</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.border.AbstractBorder.isBorderOpaque()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This default implementation returns false.
 @return false

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.border.AbstractBorder.getInteriorRectangle(Component c, int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This convenience method calls the static method.
 @param c the component for which this border is being computed
 @param x the x position of the border
 @param y the y position of the border
 @param width the width of the border
 @param height the height of the border
 @return a <code>Rectangle</code> containing the interior coordinates

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Rectangle javax.swing.border.AbstractBorder.getInteriorRectangle(Component c, Border b, int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a rectangle using the arguments minus the
 insets of the border. This is useful for determining the area
 that components should draw in that will not intersect the border.
 @param c the component for which this border is being computed
 @param b the <code>Border</code> object
 @param x the x position of the border
 @param y the y position of the border
 @param width the width of the border
 @param height the height of the border
 @return a <code>Rectangle</code> containing the interior coordinates

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.border.AbstractBorder.getBaseline(Component c, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the baseline.  A return value less than 0 indicates the border
 does not have a reasonable baseline.
 <p>
 The default implementation returns -1.  Subclasses that support
 baseline should override appropriately.  If a value &gt;= 0 is
 returned, then the component has a valid baseline for any
 size &gt;= the minimum size and <code>getBaselineResizeBehavior</code>
 can be used to determine how the baseline changes with size.

 @param c <code>Component</code> baseline is being requested for
 @param width the width to get the baseline for
 @param height the height to get the baseline for
 @return the baseline or &lt; 0 indicating there is no reasonable
         baseline
 @throws IllegalArgumentException if width or height is &lt; 0
 @see java.awt.Component#getBaseline(int,int)
 @see java.awt.Component#getBaselineResizeBehavior()
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component.BaselineResizeBehavior javax.swing.border.AbstractBorder.getBaselineResizeBehavior(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an enum indicating how the baseline of a component
 changes as the size changes.  This method is primarily meant for
 layout managers and GUI builders.
 <p>
 The default implementation returns
 <code>BaselineResizeBehavior.OTHER</code>, subclasses that support
 baseline should override appropriately.  Subclasses should
 never return <code>null</code>; if the baseline can not be
 calculated return <code>BaselineResizeBehavior.OTHER</code>.  Callers
 should first ask for the baseline using
 <code>getBaseline</code> and if a value &gt;= 0 is returned use
 this method.  It is acceptable for this method to return a
 value other than <code>BaselineResizeBehavior.OTHER</code> even if
 <code>getBaseline</code> returns a value less than 0.

 @param c <code>Component</code> to return baseline resize behavior for
 @return an enum indicating how the baseline changes as the border is
         resized
 @see java.awt.Component#getBaseline(int,int)
 @see java.awt.Component#getBaselineResizeBehavior()
 @since 1.6

<!-- END DATA -->
