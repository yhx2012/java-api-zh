<!-- BEGIN KEY -->
public class javax.swing.border.LineBorder extends javax.swing.border.AbstractBorder
<!-- END KEY -->
<!-- BEGIN DATA -->
 A class which implements a line border of arbitrary thickness
 and of a single color.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @version 1.25 04/07/06
 @author David Kloba

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.LineBorder(Color color)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates a line border with the specified color and a 
 thickness = 1.
 @param color the color for the border

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.LineBorder(Color color, int thickness)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a line border with the specified color and thickness.
 @param color the color of the border
 @param thickness the thickness of the border

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.border.LineBorder(Color color, int thickness, boolean roundedCorners)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a line border with the specified color, thickness,
 and corner shape.
 @param color the color of the border
 @param thickness the thickness of the border
 @param roundedCorners whether or not border corners should be round
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.border.LineBorder.createBlackLineBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->
Convenience method for getting the Color.black LineBorder of thickness 1.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.swing.border.Border javax.swing.border.LineBorder.createGrayLineBorder()
<!-- END KEY -->
<!-- BEGIN DATA -->
Convenience method for getting the Color.gray LineBorder of thickness 1.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.border.LineBorder.paintBorder(Component c, Graphics g, int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paints the border for the specified component with the 
 specified position and size.
 @param c the component for which this border is being painted
 @param g the paint graphics
 @param x the x position of the painted border
 @param y the y position of the painted border
 @param width the width of the painted border
 @param height the height of the painted border

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.border.LineBorder.getBorderInsets(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the insets of the border.
 @param c the component for which this border insets value applies

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Insets javax.swing.border.LineBorder.getBorderInsets(Component c, Insets insets)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Reinitialize the insets parameter with this Border's current Insets. 
 @param c the component for which this border insets value applies
 @param insets the object to be reinitialized

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color javax.swing.border.LineBorder.getLineColor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the color of the border.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.border.LineBorder.getThickness()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the thickness of the border.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.border.LineBorder.getRoundedCorners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether this border will be drawn with rounded corners.
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.border.LineBorder.isBorderOpaque()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether or not the border is opaque.

<!-- END DATA -->
