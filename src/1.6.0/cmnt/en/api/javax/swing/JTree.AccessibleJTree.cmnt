<!-- BEGIN KEY -->
protected class javax.swing.JTree.AccessibleJTree extends javax.swing.JComponent.AccessibleJComponent implements javax.accessibility.AccessibleSelection, javax.swing.event.TreeSelectionListener, javax.swing.event.TreeModelListener, javax.swing.event.TreeExpansionListener
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class implements accessibility support for the 
 <code>JTree</code> class.  It provides an implementation of the 
 Java Accessibility API appropriate to tree user-interface elements.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.valueChanged(TreeSelectionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tree Selection Listener value change method. Used to fire the 
 property change

 @param e ListSelectionEvent


<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.fireVisibleDataPropertyChange()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fire a visible data property change notification.
 A 'visible' data property is one that represents
 something about the way the component appears on the
 display, where that appearance isn't bound to any other
 property. It notifies screen readers  that the visual 
 appearance of the component has changed, so they can 
 notify the user.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.treeNodesChanged(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tree Model Node change notification.

 @param e  a Tree Model event

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.treeNodesInserted(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tree Model Node change notification.

 @param e  a Tree node insertion event

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.treeNodesRemoved(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tree Model Node change notification.

 @param e  a Tree node(s) removal event

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.treeStructureChanged(TreeModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tree Model structure change change notification.

 @param e  a Tree Model event

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.treeCollapsed(TreeExpansionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tree Collapsed notification.

 @param e  a TreeExpansionEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.treeExpanded(TreeExpansionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tree Model Expansion notification.

 @param e  a Tree node insertion event

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleRole javax.swing.JTree.AccessibleJTree.getAccessibleRole()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the role of this object.

 @return an instance of AccessibleRole describing the role of the 
 object
 @see AccessibleRole

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTree.AccessibleJTree.getAccessibleAt(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>Accessible</code> child, if one exists,
 contained at the local coordinate <code>Point</code>.
 Otherwise returns <code>null</code>.

 @param p point in local coordinates of this <code>Accessible</code>
 @return the <code>Accessible</code>, if it exists,
    at the specified location; else <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTree.AccessibleJTree.getAccessibleChildrenCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of top-level children nodes of this 
 JTree.  Each of these nodes may in turn have children nodes.

 @return the number of accessible children nodes in the tree.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTree.AccessibleJTree.getAccessibleChild(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the nth Accessible child of the object.

 @param i zero-based index of child
 @return the nth Accessible child of the object

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTree.AccessibleJTree.getAccessibleIndexInParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the index of this object in its accessible parent. 

 @return the index of this object in its parent.  Since a JTree
 top-level object does not have an accessible parent.
 @see #getAccessibleParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleSelection javax.swing.JTree.AccessibleJTree.getAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the AccessibleSelection associated with this object.  In the
 implementation of the Java Accessibility API for this class, 
 return this object, which is responsible for implementing the
 AccessibleSelection interface on behalf of itself.
 
 @return this object

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.JTree.AccessibleJTree.getAccessibleSelectionCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of items currently selected.
 If no items are selected, the return value will be 0.

 @return the number of items currently selected.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible javax.swing.JTree.AccessibleJTree.getAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an Accessible representing the specified selected item
 in the object.  If there isn't a selection, or there are 
 fewer items selected than the integer passed in, the return
 value will be null.

 @param i the zero-based index of selected items
 @return an Accessible containing the selected item

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.JTree.AccessibleJTree.isAccessibleChildSelected(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the current child of this object is selected.

 @param i the zero-based index of the child in this Accessible object.
 @see AccessibleContext#getAccessibleChild

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.addAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified selected item in the object to the object's
 selection.  If the object supports multiple selections,
 the specified item is added to any existing selection, otherwise
 it replaces any existing selection in the object.  If the
 specified item is already selected, this method has no effect.

 @param i the zero-based index of selectable items

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.removeAccessibleSelection(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified selected item in the object from the object's
 selection.  If the specified item isn't currently selected, this
 method has no effect.

 @param i the zero-based index of selectable items

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.clearAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Clears the selection in the object, so that nothing in the
 object is selected.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.JTree.AccessibleJTree.selectAllAccessibleSelection()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Causes every selected item in the object to be selected
 if the object supports multiple selections.

<!-- END DATA -->
