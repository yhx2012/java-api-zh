<!-- BEGIN KEY -->
public class javax.swing.table.DefaultTableColumnModel extends java.lang.Object implements javax.swing.table.TableColumnModel, java.beans.PropertyChangeListener, javax.swing.event.ListSelectionListener, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 The standard column-handler for a <code>JTable</code>.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @version 1.52 11/30/05
 @author Alan Chung
 @author Philip Milne
 @see JTable

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Vector<javax.swing.table.TableColumn> javax.swing.table.DefaultTableColumnModel.tableColumns
<!-- END KEY -->
<!-- BEGIN DATA -->
Array of TableColumn objects in this model 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.ListSelectionModel javax.swing.table.DefaultTableColumnModel.selectionModel
<!-- END KEY -->
<!-- BEGIN DATA -->
Model for keeping track of column selections 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.table.DefaultTableColumnModel.columnMargin
<!-- END KEY -->
<!-- BEGIN DATA -->
Width margin between each column 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.event.EventListenerList javax.swing.table.DefaultTableColumnModel.listenerList
<!-- END KEY -->
<!-- BEGIN DATA -->
List of TableColumnModelListener 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.event.ChangeEvent javax.swing.table.DefaultTableColumnModel.changeEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
Change event (only one needed) 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.table.DefaultTableColumnModel.columnSelectionAllowed
<!-- END KEY -->
<!-- BEGIN DATA -->
Column selection allowed in this column model 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int javax.swing.table.DefaultTableColumnModel.totalColumnWidth
<!-- END KEY -->
<!-- BEGIN DATA -->
A local cache of the combined width of all columns 
<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.DefaultTableColumnModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a default table column model.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.DefaultTableColumnModel.addColumn(TableColumn aColumn)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Appends <code>aColumn</code> to the end of the
  <code>tableColumns</code> array.
  This method also posts the <code>columnAdded</code>
  event to its listeners.

 @param	aColumn		the <code>TableColumn</code> to be added
 @exception IllegalArgumentException	if <code>aColumn</code> is
				<code>null</code>
 @see	#removeColumn

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.DefaultTableColumnModel.removeColumn(TableColumn column)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Deletes the <code>column</code> from the
  <code>tableColumns</code> array.  This method will do nothing if
  <code>column</code> is not in the table's columns list.
  <code>tile</code> is called
  to resize both the header and table views.
  This method also posts a <code>columnRemoved</code>
  event to its listeners.

 @param	column		the <code>TableColumn</code> to be removed
 @see	#addColumn

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.DefaultTableColumnModel.moveColumn(int columnIndex, int newIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Moves the column and heading at <code>columnIndex</code> to
 <code>newIndex</code>.  The old column at <code>columnIndex</code>
 will now be found at <code>newIndex</code>.  The column
 that used to be at <code>newIndex</code> is shifted
 left or right to make room.  This will not move any columns if
 <code>columnIndex</code> equals <code>newIndex</code>.  This method
 also posts a <code>columnMoved</code> event to its listeners.

 @param	columnIndex			the index of column to be moved
 @param	newIndex			new index to move the column
 @exception IllegalArgumentException	if <code>column</code> or
 						<code>newIndex</code>
						are not in the valid range

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.DefaultTableColumnModel.setColumnMargin(int newMargin)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the column margin to <code>newMargin</code>.  This method
 also posts a <code>columnMarginChanged</code> event to its
 listeners.

 @param	newMargin		the new margin width, in pixels
 @see	#getColumnMargin
 @see	#getTotalColumnWidth

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.DefaultTableColumnModel.getColumnCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of columns in the <code>tableColumns</code> array.

 @return	the number of columns in the <code>tableColumns</code> array
 @see	#getColumns

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<javax.swing.table.TableColumn> javax.swing.table.DefaultTableColumnModel.getColumns()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an <code>Enumeration</code> of all the columns in the model.
 @return an <code>Enumeration</code> of the columns in the model

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.DefaultTableColumnModel.getColumnIndex(Object identifier)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the index of the first column in the <code>tableColumns</code>
 array whose identifier is equal to <code>identifier</code>,
 when compared using <code>equals</code>.

 @param		identifier		the identifier object
 @return		the index of the first column in the 
			<code>tableColumns</code> array whose identifier
			is equal to <code>identifier</code>
 @exception       IllegalArgumentException  if <code>identifier</code>
				is <code>null</code>, or if no
				<code>TableColumn</code> has this
				<code>identifier</code>
 @see		#getColumn

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.TableColumn javax.swing.table.DefaultTableColumnModel.getColumn(int columnIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>TableColumn</code> object for the column
 at <code>columnIndex</code>.

 @param	columnIndex	the index of the column desired
 @return	the <code>TableColumn</code> object for the column
				at <code>columnIndex</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.DefaultTableColumnModel.getColumnMargin()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the width margin for <code>TableColumn</code>.
 The default <code>columnMargin</code> is 1.

 @return	the maximum width for the <code>TableColumn</code>
 @see	#setColumnMargin

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.DefaultTableColumnModel.getColumnIndexAtX(int x)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the index of the column that lies at position <code>x</code>,
 or -1 if no column covers this point.

 In keeping with Swing's separable model architecture, a
 TableColumnModel does not know how the table columns actually appear on
 screen.  The visual presentation of the columns is the responsibility
 of the view/controller object using this model (typically JTable).  The
 view/controller need not display the columns sequentially from left to
 right.  For example, columns could be displayed from right to left to
 accomodate a locale preference or some columns might be hidden at the
 request of the user.  Because the model does not know how the columns
 are laid out on screen, the given <code>xPosition</code> should not be
 considered to be a coordinate in 2D graphics space.  Instead, it should
 be considered to be a width from the start of the first column in the
 model.  If the column index for a given X coordinate in 2D space is
 required, <code>JTable.columnAtPoint</code> can be used instead.

 @param  x  the horizontal location of interest
 @return	the index of the column or -1 if no column is found
 @see javax.swing.JTable#columnAtPoint

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.DefaultTableColumnModel.getTotalColumnWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the total combined width of all columns.
 @return the <code>totalColumnWidth</code> property

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.DefaultTableColumnModel.setSelectionModel(ListSelectionModel newModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Sets the selection model for this <code>TableColumnModel</code>
  to <code>newModel</code>
  and registers for listener notifications from the new selection
  model.  If <code>newModel</code> is <code>null</code>,
  an exception is thrown.

 @param	newModel	the new selection model
 @exception IllegalArgumentException      if <code>newModel</code>
						is <code>null</code>
 @see	#getSelectionModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ListSelectionModel javax.swing.table.DefaultTableColumnModel.getSelectionModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>ListSelectionModel</code> that is used to
 maintain column selection state.

 @return	the object that provides column selection state.  Or
		<code>null</code> if row selection is not allowed.
 @see	#setSelectionModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.DefaultTableColumnModel.setColumnSelectionAllowed(boolean flag)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets whether column selection is allowed.  The default is false.
 @param  flag true if column selection will be allowed, false otherwise

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.table.DefaultTableColumnModel.getColumnSelectionAllowed()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if column selection is allowed, otherwise false.
 The default is false.
 @return the <code>columnSelectionAllowed</code> property

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] javax.swing.table.DefaultTableColumnModel.getSelectedColumns()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of selected columns.  If <code>selectionModel</code>
 is <code>null</code>, returns an empty array.
 @return an array of selected columns or an empty array if nothing
			is selected or the <code>selectionModel</code> is
			<code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.DefaultTableColumnModel.getSelectedColumnCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of columns selected.
 @return the number of columns selected

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.DefaultTableColumnModel.addColumnModelListener(TableColumnModelListener x)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a listener for table column model events.
 @param x  a <code>TableColumnModelListener</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.DefaultTableColumnModel.removeColumnModelListener(TableColumnModelListener x)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a listener for table column model events.
 @param x  a <code>TableColumnModelListener</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.event.TableColumnModelListener[] javax.swing.table.DefaultTableColumnModel.getColumnModelListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the column model listeners
 registered on this model.

 @return all of this default table column model's <code>ColumnModelListener</code>s 
         or an empty
         array if no column model listeners are currently registered

 @see #addColumnModelListener
 @see #removeColumnModelListener

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.table.DefaultTableColumnModel.fireColumnAdded(TableColumnModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.
 @param e  the event received
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.table.DefaultTableColumnModel.fireColumnRemoved(TableColumnModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.
 @param  e  the event received
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.table.DefaultTableColumnModel.fireColumnMoved(TableColumnModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.
 @param  e the event received
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.table.DefaultTableColumnModel.fireColumnSelectionChanged(ListSelectionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.
 @param e the event received
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.table.DefaultTableColumnModel.fireColumnMarginChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.
 @see EventListenerList

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] javax.swing.table.DefaultTableColumnModel.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the objects currently registered
 as <code><em>Foo</em>Listener</code>s
 upon this model.
 <code><em>Foo</em>Listener</code>s are registered using the
 <code>add<em>Foo</em>Listener</code> method.

 <p>

 You can specify the <code>listenerType</code> argument
 with a class literal,
 such as
 <code><em>Foo</em>Listener.class</code>.
 For example, you can query a
 <code>DefaultTableColumnModel</code> <code>m</code>
 for its column model listeners with the following code:

 <pre>ColumnModelListener[] cmls = (ColumnModelListener[])(m.getListeners(ColumnModelListener.class));</pre>

 If no such listeners exist, this method returns an empty array.

 @param listenerType the type of listeners requested; this parameter
          should specify an interface that descends from
          <code>java.util.EventListener</code>
 @return an array of all objects registered as
          <code><em>Foo</em>Listener</code>s on this model,
          or an empty array if no such
          listeners have been added
 @exception ClassCastException if <code>listenerType</code>
          doesn't specify a class or interface that implements
          <code>java.util.EventListener</code>
 
 @see #getColumnModelListeners
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.DefaultTableColumnModel.propertyChange(PropertyChangeEvent evt)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Property Change Listener change method.  Used to track changes
 to the column width or preferred column width.

 @param  evt  <code>PropertyChangeEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.DefaultTableColumnModel.valueChanged(ListSelectionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <code>ListSelectionListener</code> that forwards
 <code>ListSelectionEvents</code> when there is a column
 selection change.

 @param e  the change event

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.ListSelectionModel javax.swing.table.DefaultTableColumnModel.createSelectionModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new default list selection model.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.table.DefaultTableColumnModel.recalcWidthCache()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Recalculates the total combined width of all columns.  Updates the
 <code>totalColumnWidth</code> property.

<!-- END DATA -->
