<!-- BEGIN KEY -->
public class javax.swing.table.JTableHeader extends javax.swing.JComponent implements javax.swing.event.TableColumnModelListener, javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
 This is the object which manages the header of the <code>JTable</code>.
 <p>
 <strong>Warning:</strong>
 Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans<sup><font size="-2">TM</font></sup>
 has been added to the <code>java.beans</code> package.
 Please see {@link java.beans.XMLEncoder}.

 @version 1.75 04/07/06
 @author Alan Chung
 @author Philip Milne
 @see javax.swing.JTable

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.JTable javax.swing.table.JTableHeader.table
<!-- END KEY -->
<!-- BEGIN DATA -->

 The table for which this object is the header;
 the default is <code>null</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.table.TableColumnModel javax.swing.table.JTableHeader.columnModel
<!-- END KEY -->
<!-- BEGIN DATA -->

 The <code>TableColumnModel</code> of the table header.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.table.JTableHeader.reorderingAllowed
<!-- END KEY -->
<!-- BEGIN DATA -->

 If true, reordering of columns are allowed by the user;
 the default is true. 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.table.JTableHeader.resizingAllowed
<!-- END KEY -->
<!-- BEGIN DATA -->

 If true, resizing of columns are allowed by the user; 
 the default is true. 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.swing.table.JTableHeader.updateTableInRealTime
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obsolete as of Java 2 platform v1.3.  Real time repaints, in response
 to column dragging or resizing, are now unconditional.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.table.TableColumn javax.swing.table.JTableHeader.resizingColumn
<!-- END KEY -->
<!-- BEGIN DATA -->
The index of the column being resized. <code>null</code> if not resizing. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient javax.swing.table.TableColumn javax.swing.table.JTableHeader.draggedColumn
<!-- END KEY -->
<!-- BEGIN DATA -->
The index of the column being dragged. <code>null</code> if not dragging. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient int javax.swing.table.JTableHeader.draggedDistance
<!-- END KEY -->
<!-- BEGIN DATA -->
The distance from its original position the column has been dragged. 
<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.swing.table.TableCellRenderer javax.swing.table.JTableHeader.defaultRenderer
<!-- END KEY -->
<!-- BEGIN DATA -->
  The default renderer to be used when a <code>TableColumn</code>
  does not define a <code>headerRenderer</code>. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.JTableHeader()
<!-- END KEY -->
<!-- BEGIN DATA -->
  Constructs a <code>JTableHeader</code> with a default 
  <code>TableColumnModel</code>.

 @see #createDefaultColumnModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.JTableHeader(TableColumnModel cm)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Constructs a <code>JTableHeader</code> which is initialized with
  <code>cm</code> as the column model.  If <code>cm</code> is
  <code>null</code> this method will initialize the table header
  with a default <code>TableColumnModel</code>.

 @param cm	the column model for the table
 @see #createDefaultColumnModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.setTable(JTable table)
<!-- END KEY -->
<!-- BEGIN DATA -->

  Sets the table associated with this header. 
  @param  table   the new table
  @beaninfo
   bound: true
   description: The table associated with this header.   

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.JTable javax.swing.table.JTableHeader.getTable()
<!-- END KEY -->
<!-- BEGIN DATA -->

  Returns the table associated with this header. 
  @return  the <code>table</code> property

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.setReorderingAllowed(boolean reorderingAllowed)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Sets whether the user can drag column headers to reorder columns.

 @param	reorderingAllowed	true if the table view should allow
  				reordering; otherwise false
 @see	#getReorderingAllowed
 @beaninfo
  bound: true
  description: Whether the user can drag column headers to reorder columns.   

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.table.JTableHeader.getReorderingAllowed()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the user is allowed to rearrange columns by
 dragging their headers, false otherwise. The default is true. You can
 rearrange columns programmatically regardless of this setting.

 @return	the <code>reorderingAllowed</code> property
 @see	#setReorderingAllowed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.setResizingAllowed(boolean resizingAllowed)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Sets whether the user can resize columns by dragging between headers.

 @param	resizingAllowed		true if table view should allow
 					resizing
 @see	#getResizingAllowed
 @beaninfo
  bound: true
  description: Whether the user can resize columns by dragging between headers.   

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.table.JTableHeader.getResizingAllowed()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the user is allowed to resize columns by dragging
 between their headers, false otherwise. The default is true. You can
 resize columns programmatically regardless of this setting.

 @return	the <code>resizingAllowed</code> property
 @see	#setResizingAllowed

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.TableColumn javax.swing.table.JTableHeader.getDraggedColumn()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the the dragged column, if and only if, a drag is in
 process, otherwise returns <code>null</code>.

 @return	the dragged column, if a drag is in
 		process, otherwise returns <code>null</code>
 @see	#getDraggedDistance

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.JTableHeader.getDraggedDistance()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the column's horizontal distance from its original
 position, if and only if, a drag is in process. Otherwise, the
 the return value is meaningless.

 @return	the column's horizontal distance from its original
		position, if a drag is in process, otherwise the return
		value is meaningless
 @see	#getDraggedColumn

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.TableColumn javax.swing.table.JTableHeader.getResizingColumn()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the resizing column.  If no column is being
 resized this method returns <code>null</code>.

 @return	the resizing column, if a resize is in process, otherwise
		returns <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.setUpdateTableInRealTime(boolean flag)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obsolete as of Java 2 platform v1.3.  Real time repaints, in response to
 column dragging or resizing, are now unconditional.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.table.JTableHeader.getUpdateTableInRealTime()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obsolete as of Java 2 platform v1.3.  Real time repaints, in response to
 column dragging or resizing, are now unconditional.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.setDefaultRenderer(TableCellRenderer defaultRenderer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the default renderer to be used when no <code>headerRenderer</code>
 is defined by a <code>TableColumn</code>.
 @param  defaultRenderer  the default renderer
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.TableCellRenderer javax.swing.table.JTableHeader.getDefaultRenderer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the default renderer used when no <code>headerRenderer</code>
 is defined by a <code>TableColumn</code>.  
 @return the default renderer
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.JTableHeader.columnAtPoint(Point point)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the index of the column that <code>point</code> lies in, or -1 if it
 lies out of bounds.

 @return	the index of the column that <code>point</code> lies in, or -1 if it
		lies out of bounds

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle javax.swing.table.JTableHeader.getHeaderRect(int column)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the rectangle containing the header tile at <code>column</code>.
 When the <code>column</code> parameter is out of bounds this method uses the 
 same conventions as the <code>JTable</code> method <code>getCellRect</code>. 

 @return	the rectangle containing the header tile at <code>column</code>
 @see JTable#getCellRect

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.table.JTableHeader.getToolTipText(MouseEvent event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Allows the renderer's tips to be used if there is text set.
 @param  event  the location of the event identifies the proper 
				renderer and, therefore, the proper tip
 @return the tool tip for this component

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.plaf.TableHeaderUI javax.swing.table.JTableHeader.getUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the look and feel (L&F) object that renders this component.

 @return the <code>TableHeaderUI</code> object that renders this component

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.setUI(TableHeaderUI ui)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the look and feel (L&F) object that renders this component.

 @param ui  the <code>TableHeaderUI</code> L&F object
 @see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.updateUI()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notification from the <code>UIManager</code> that the look and feel
 (L&F) has changed. 
 Replaces the current UI object with the latest version from the 
 <code>UIManager</code>.

 @see JComponent#updateUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.swing.table.JTableHeader.getUIClassID()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the suffix used to construct the name of the look and feel
 (L&F) class used to render this component.
 @return the string "TableHeaderUI"

 @return "TableHeaderUI"
 @see JComponent#getUIClassID
 @see UIDefaults#getUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.setColumnModel(TableColumnModel columnModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Sets the column model for this table to <code>newModel</code> and registers
  for listener notifications from the new column model.

 @param	columnModel	the new data source for this table
 @exception IllegalArgumentException   
				if <code>newModel</code> is <code>null</code>
 @see	#getColumnModel
 @beaninfo
  bound: true
  description: The object governing the way columns appear in the view.   

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.TableColumnModel javax.swing.table.JTableHeader.getColumnModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>TableColumnModel</code> that contains all column information
 of this table header.

 @return	the <code>columnModel</code> property
 @see	#setColumnModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.columnAdded(TableColumnModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when a column is added to the table column model.
 <p>
 Application code will not use these methods explicitly, they
 are used internally by <code>JTable</code>.

 @param e  the event received
 @see TableColumnModelListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.columnRemoved(TableColumnModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when a column is removed from the table column model.
 <p>
 Application code will not use these methods explicitly, they
 are used internally by <code>JTable</code>.

 @param e  the event received
 @see TableColumnModelListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.columnMoved(TableColumnModelEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when a column is repositioned.
 <p>
 Application code will not use these methods explicitly, they
 are used internally by <code>JTable</code>.

 @param e the event received
 @see TableColumnModelListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.columnMarginChanged(ChangeEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when a column is moved due to a margin change.
 <p>
 Application code will not use these methods explicitly, they
 are used internally by <code>JTable</code>.

 @param e the event received
 @see TableColumnModelListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.columnSelectionChanged(ListSelectionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when the selection model of the <code>TableColumnModel</code>
 is changed.  This method currently has no effect (the header is not
 redrawn).
 <p>
 Application code will not use these methods explicitly, they
 are used internally by <code>JTable</code>.

 @param e the event received
 @see TableColumnModelListener

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.table.TableColumnModel javax.swing.table.JTableHeader.createDefaultColumnModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
  Returns the default column model object which is
  a <code>DefaultTableColumnModel</code>.  A subclass can override this
  method to return a different column model object

 @return the default column model object

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.swing.table.TableCellRenderer javax.swing.table.JTableHeader.createDefaultRenderer()
<!-- END KEY -->
<!-- BEGIN DATA -->
  Returns a default renderer to be used when no header renderer 
  is defined by a <code>TableColumn</code>. 

  @return the default table column renderer
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.swing.table.JTableHeader.initializeLocalVars()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Initializes the local variables and properties with default values.
 Used by the constructor methods.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.resizeAndRepaint()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sizes the header and marks it as needing display.  Equivalent
 to <code>revalidate</code> followed by <code>repaint</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.setDraggedColumn(TableColumn aColumn)
<!-- END KEY -->
<!-- BEGIN DATA -->

  Sets the header's <code>draggedColumn</code> to <code>aColumn</code>.
  <p>
  Application code will not use this method explicitly, it is used
  internally by the column dragging mechanism.

  @param  aColumn  the column being dragged, or <code>null</code> if
			no column is being dragged

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.setDraggedDistance(int distance)
<!-- END KEY -->
<!-- BEGIN DATA -->

  Sets the header's <code>draggedDistance</code> to <code>distance</code>. 
  @param distance  the distance dragged

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.JTableHeader.setResizingColumn(TableColumn aColumn)
<!-- END KEY -->
<!-- BEGIN DATA -->

  Sets the header's <code>resizingColumn</code> to <code>aColumn</code>.
  <p>
  Application code will not use this method explicitly, it
  is used internally by the column sizing mechanism.

  @param  aColumn  the column being resized, or <code>null</code> if
			no column is being resized

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String javax.swing.table.JTableHeader.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this <code>JTableHeader</code>. This method 
 is intended to be used only for debugging purposes, and the 
 content and format of the returned string may vary between      
 implementations. The returned string may be empty but may not 
 be <code>null</code>.
 <P>
 Overriding <code>paramString</code> to provide information about the
 specific new aspects of the JFC components.
 
 @return  a string representation of this <code>JTableHeader</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext javax.swing.table.JTableHeader.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleContext associated with this JTableHeader. 
 For JTableHeaders, the AccessibleContext takes the form of an 
 AccessibleJTableHeader. 
 A new AccessibleJTableHeader instance is created if necessary.

 @return an AccessibleJTableHeader that serves as the 
         AccessibleContext of this JTableHeader

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.swing.table.JTableHeader.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 See <code>readObject</code> and <code>writeObject</code> in
 <code>JComponent</code> for more 
 information about serialization in Swing.

<!-- END DATA -->
