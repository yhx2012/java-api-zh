<!-- BEGIN KEY -->
public interface javax.swing.table.TableColumnModel
<!-- END KEY -->
<!-- BEGIN DATA -->
 Defines the requirements for a table column model object suitable for
 use with <code>JTable</code>.

 @version 1.26 11/17/05
 @author Alan Chung
 @author Philip Milne
 @see DefaultTableColumnModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumnModel.addColumn(TableColumn aColumn)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Appends <code>aColumn</code> to the end of the
  <code>tableColumns</code> array.
  This method posts a <code>columnAdded</code>
  event to its listeners.

 @param   aColumn         the <code>TableColumn</code> to be added
 @see     #removeColumn

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumnModel.removeColumn(TableColumn column)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Deletes the <code>TableColumn</code> <code>column</code> from the 
  <code>tableColumns</code> array.  This method will do nothing if 
  <code>column</code> is not in the table's column list.
  This method posts a <code>columnRemoved</code>
  event to its listeners.

 @param   column          the <code>TableColumn</code> to be removed
 @see     #addColumn

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumnModel.moveColumn(int columnIndex, int newIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Moves the column and its header at <code>columnIndex</code> to
 <code>newIndex</code>.  The old column at <code>columnIndex</code>
 will now be found at <code>newIndex</code>.  The column that used
 to be at <code>newIndex</code> is shifted left or right
 to make room.  This will not move any columns if
 <code>columnIndex</code> equals <code>newIndex</code>.  This method 
 posts a <code>columnMoved</code> event to its listeners.

 @param   columnIndex                     the index of column to be moved
 @param   newIndex                        index of the column's new location
 @exception IllegalArgumentException      if <code>columnIndex</code> or 
                                          <code>newIndex</code>
                                          are not in the valid range

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumnModel.setColumnMargin(int newMargin)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>TableColumn</code>'s column margin to
 <code>newMargin</code>.  This method posts
 a <code>columnMarginChanged</code> event to its listeners.

 @param   newMargin       the width, in pixels, of the new column margins
 @see     #getColumnMargin

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.TableColumnModel.getColumnCount()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the number of columns in the model.
 @return the number of columns in the model

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<javax.swing.table.TableColumn> javax.swing.table.TableColumnModel.getColumns()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns an <code>Enumeration</code> of all the columns in the model.
 @return an <code>Enumeration</code> of all the columns in the model

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.TableColumnModel.getColumnIndex(Object columnIdentifier)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the index of the first column in the table
 whose identifier is equal to <code>identifier</code>,
 when compared using <code>equals</code>.

 @param           columnIdentifier        the identifier object
 @return          the index of the first table column
                  whose identifier is equal to <code>identifier</code>
 @exception IllegalArgumentException      if <code>identifier</code>
				is <code>null</code>, or no
				<code>TableColumn</code> has this
				<code>identifier</code>
 @see             #getColumn

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.table.TableColumn javax.swing.table.TableColumnModel.getColumn(int columnIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>TableColumn</code> object for the column at
 <code>columnIndex</code>.

 @param   columnIndex     the index of the desired column 
 @return  the <code>TableColumn</code> object for
				the column at <code>columnIndex</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.TableColumnModel.getColumnMargin()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the width between the cells in each column. 
 @return the margin, in pixels, between the cells

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.TableColumnModel.getColumnIndexAtX(int xPosition)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the index of the column that lies on the 
 horizontal point, <code>xPosition</code>;
 or -1 if it lies outside the any of the column's bounds.

 In keeping with Swing's separable model architecture, a
 TableColumnModel does not know how the table columns actually appear on
 screen.  The visual presentation of the columns is the responsibility
 of the view/controller object using this model (typically JTable).  The
 view/controller need not display the columns sequentially from left to
 right.  For example, columns could be displayed from right to left to
 accomodate a locale preference or some columns might be hidden at the
 request of the user.  Because the model does not know how the columns
 are laid out on screen, the given <code>xPosition</code> should not be
 considered to be a coordinate in 2D graphics space.  Instead, it should
 be considered to be a width from the start of the first column in the
 model.  If the column index for a given X coordinate in 2D space is
 required, <code>JTable.columnAtPoint</code> can be used instead.

 @return  the index of the column; or -1 if no column is found
 @see javax.swing.JTable#columnAtPoint

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.TableColumnModel.getTotalColumnWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the total width of all the columns. 
 @return the total computed width of all columns

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumnModel.setColumnSelectionAllowed(boolean flag)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets whether the columns in this model may be selected.
 @param flag   true if columns may be selected; otherwise false
 @see #getColumnSelectionAllowed

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.swing.table.TableColumnModel.getColumnSelectionAllowed()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if columns may be selected.
 @return true if columns may be selected
 @see #setColumnSelectionAllowed

<!-- END DATA -->
<!-- BEGIN KEY -->
public int[] javax.swing.table.TableColumnModel.getSelectedColumns()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of indicies of all selected columns.
 @return an array of integers containing the indicies of all
		selected columns; or an empty array if nothing is selected

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.swing.table.TableColumnModel.getSelectedColumnCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of selected columns.

 @return the number of selected columns; or 0 if no columns are selected

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumnModel.setSelectionModel(ListSelectionModel newModel)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the selection model.

 @param newModel  a <code>ListSelectionModel</code> object
 @see #getSelectionModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.swing.ListSelectionModel javax.swing.table.TableColumnModel.getSelectionModel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current selection model.

 @return a <code>ListSelectionModel</code> object 
 @see #setSelectionModel

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumnModel.addColumnModelListener(TableColumnModelListener x)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a listener for table column model events.

 @param x  a <code>TableColumnModelListener</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.swing.table.TableColumnModel.removeColumnModelListener(TableColumnModelListener x)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a listener for table column model events.

 @param x  a <code>TableColumnModelListener</code> object

<!-- END DATA -->
