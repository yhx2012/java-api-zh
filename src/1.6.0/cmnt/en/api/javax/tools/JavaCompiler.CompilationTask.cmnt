<!-- BEGIN KEY -->
public static interface javax.tools.JavaCompiler.CompilationTask extends java.util.concurrent.Callable
<!-- END KEY -->
<!-- BEGIN DATA -->
 Interface representing a future for a compilation task.  The
 compilation task has not yet started.  To start the task, call
 the {@linkplain #call call} method.

 <p>Before calling the call method, additional aspects of the
 task can be configured, for example, by calling the
 {@linkplain #setProcessors setProcessors} method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.tools.JavaCompiler.CompilationTask.setProcessors(java.lang.Iterable<? extends javax.annotation.processing.Processor> processors)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets processors (for annotation processing).  This will
 bypass the normal discovery mechanism.

 @param processors processors (for annotation processing)
 @throws IllegalStateException if the task has started

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.tools.JavaCompiler.CompilationTask.setLocale(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the locale to be applied when formatting diagnostics and
 other localized data.

 @param locale the locale to apply; {@code null} means apply no
 locale
 @throws IllegalStateException if the task has started

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Boolean javax.tools.JavaCompiler.CompilationTask.call()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Performs this compilation task.  The compilation may only
 be performed once.  Subsequent calls to this method throw
 IllegalStateException.

 @return true if and only all the files compiled without errors;
 false otherwise

 @throws RuntimeException if an unrecoverable error occurred
 in a user-supplied component.  The
 {@linkplain Throwable#getCause() cause} will be the error
 in user code.
 @throws IllegalStateException if called more than once

<!-- END DATA -->
