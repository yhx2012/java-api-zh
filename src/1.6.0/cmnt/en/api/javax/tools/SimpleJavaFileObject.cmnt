<!-- BEGIN KEY -->
public class javax.tools.SimpleJavaFileObject extends java.lang.Object implements javax.tools.JavaFileObject
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides simple implementations for most methods in JavaFileObject.
 This class is designed to be subclassed and used as a basis for
 JavaFileObject implementations.  Subclasses can override the
 implementation and specification of any method of this class as
 long as the general contract of JavaFileObject is obeyed.

 @author Peter von der Ah&eacute;
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.net.URI javax.tools.SimpleJavaFileObject.uri
<!-- END KEY -->
<!-- BEGIN DATA -->
 A URI for this file object.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final javax.tools.JavaFileObject.Kind javax.tools.SimpleJavaFileObject.kind
<!-- END KEY -->
<!-- BEGIN DATA -->
 The kind of this file object.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.tools.SimpleJavaFileObject(URI uri, JavaFileObject.Kind kind)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a SimpleJavaFileObject of the given kind and with the
 given URI.

 @param uri  the URI for this file object
 @param kind the kind of this file object

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream javax.tools.SimpleJavaFileObject.openInputStream() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 This implementation always throws {@linkplain
 UnsupportedOperationException}.  Subclasses can change this
 behavior as long as the contract of {@link FileObject} is
 obeyed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.OutputStream javax.tools.SimpleJavaFileObject.openOutputStream() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 This implementation always throws {@linkplain
 UnsupportedOperationException}.  Subclasses can change this
 behavior as long as the contract of {@link FileObject} is
 obeyed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Reader javax.tools.SimpleJavaFileObject.openReader(boolean ignoreEncodingErrors) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Wraps the result of {@linkplain #getCharContent} in a Reader.
 Subclasses can change this behavior as long as the contract of
 {@link FileObject} is obeyed.

 @param  ignoreEncodingErrors {@inheritDoc}
 @return a Reader wrapping the result of getCharContent
 @throws IllegalStateException {@inheritDoc}
 @throws UnsupportedOperationException {@inheritDoc}
 @throws IOException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.CharSequence javax.tools.SimpleJavaFileObject.getCharContent(boolean ignoreEncodingErrors) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 This implementation always throws {@linkplain
 UnsupportedOperationException}.  Subclasses can change this
 behavior as long as the contract of {@link FileObject} is
 obeyed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Writer javax.tools.SimpleJavaFileObject.openWriter() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Wraps the result of openOutputStream in a Writer.  Subclasses
 can change this behavior as long as the contract of {@link
 FileObject} is obeyed.

 @return a Writer wrapping the result of openOutputStream
 @throws IllegalStateException {@inheritDoc}
 @throws UnsupportedOperationException {@inheritDoc}
 @throws IOException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.tools.SimpleJavaFileObject.getLastModified()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This implementation returns {@code 0L}.  Subclasses can change
 this behavior as long as the contract of {@link FileObject} is
 obeyed.

 @return {@code 0L}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.tools.SimpleJavaFileObject.delete()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This implementation does nothing.  Subclasses can change this
 behavior as long as the contract of {@link FileObject} is
 obeyed.

 @return {@code false}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.tools.JavaFileObject.Kind javax.tools.SimpleJavaFileObject.getKind()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @return {@code this.kind}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.tools.SimpleJavaFileObject.isNameCompatible(String simpleName, JavaFileObject.Kind kind)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This implementation compares the path of its URI to the given
 simple name.  This method returns true if the given kind is
 equal to the kind of this object, and if the path is equal to
 {@code simpleName + kind.extension} or if it ends with {@code
 "/" + simpleName + kind.extension}.

 <p>This method calls {@link #getKind} and {@link #toUri} and
 does not access the fields {@link #uri} and {@link #kind}
 directly.

 <p>Subclasses can change this behavior as long as the contract
 of {@link JavaFileObject} is obeyed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.element.NestingKind javax.tools.SimpleJavaFileObject.getNestingKind()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This implementation returns {@code null}.  Subclasses can
 change this behavior as long as the contract of
 {@link JavaFileObject} is obeyed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.lang.model.element.Modifier javax.tools.SimpleJavaFileObject.getAccessLevel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This implementation returns {@code null}.  Subclasses can
 change this behavior as long as the contract of
 {@link JavaFileObject} is obeyed.

<!-- END DATA -->
