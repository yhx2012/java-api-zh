<!-- BEGIN KEY -->
public interface javax.tools.Diagnostic
<!-- END KEY -->
<!-- BEGIN DATA -->
 Interface for diagnostics from tools.  A diagnostic usually reports
 a problem at a specific position in a source file.  However, not
 all diagnostics are associated with a position or a file.

 <p>A position is a zero-based character offset from the beginning of
 a file.  Negative values (except {@link #NOPOS}) are not valid
 positions.

 <p>Line and column numbers begin at 1.  Negative values (except
 {@link #NOPOS}) and 0 are not valid line or column numbers.

 @param <S> the type of source object used by this diagnostic

 @author Peter von der Ah&eacute;
 @author Jonathan Gibbons
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long javax.tools.Diagnostic.NOPOS
<!-- END KEY -->
<!-- BEGIN DATA -->
 Used to signal that no position is available.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.tools.Diagnostic.Kind javax.tools.Diagnostic.getKind()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the kind of this diagnostic, for example, error or
 warning.
 @return the kind of this diagnostic

<!-- END DATA -->
<!-- BEGIN KEY -->
public S javax.tools.Diagnostic.getSource()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the source object associated with this diagnostic.

 @return the source object associated with this diagnostic.
 {@code null} if no source object is associated with the
 diagnostic.

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.tools.Diagnostic.getPosition()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a character offset from the beginning of the source object
 associated with this diagnostic that indicates the location of
 the problem.  In addition, the following must be true:

 <p>{@code getStartPostion() <= getPosition()}
 <p>{@code getPosition() <= getEndPosition()}

 @return character offset from beginning of source; {@link
 #NOPOS} if {@link #getSource()} would return {@code null} or if
 no location is suitable

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.tools.Diagnostic.getStartPosition()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the character offset from the beginning of the file
 associated with this diagnostic that indicates the start of the
 problem.

 @return offset from beginning of file; {@link #NOPOS} if and
 only if {@link #getPosition()} returns {@link #NOPOS}

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.tools.Diagnostic.getEndPosition()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the character offset from the beginning of the file
 associated with this diagnostic that indicates the end of the
 problem.

 @return offset from beginning of file; {@link #NOPOS} if and
 only if {@link #getPosition()} returns {@link #NOPOS}

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.tools.Diagnostic.getLineNumber()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the line number of the character offset returned by
 {@linkplain #getPosition()}.

 @return a line number or {@link #NOPOS} if and only if {@link
 #getPosition()} returns {@link #NOPOS}

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.tools.Diagnostic.getColumnNumber()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the column number of the character offset returned by
 {@linkplain #getPosition()}.

 @return a column number or {@link #NOPOS} if and only if {@link
 #getPosition()} returns {@link #NOPOS}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.tools.Diagnostic.getCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a diagnostic code indicating the type of diagnostic.  The
 code is implementation-dependent and might be {@code null}.

 @return a diagnostic code

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.tools.Diagnostic.getMessage(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a localized message for the given locale.  The actual
 message is implementation-dependent.  If the locale is {@code
 null} use the default locale.

 @param locale a locale; might be {@code null}
 @return a localized message

<!-- END DATA -->
