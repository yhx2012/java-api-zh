<!-- BEGIN KEY -->
public class javax.tools.ForwardingJavaFileManager extends java.lang.Object implements javax.tools.JavaFileManager
<!-- END KEY -->
<!-- BEGIN DATA -->
 Forwards calls to a given file manager.  Subclasses of this class
 might override some of these methods and might also provide
 additional fields and methods.

 @param <M> the kind of file manager forwarded to by this object
 @author Peter von der Ah&eacute;
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final M extends javax.tools.JavaFileManager javax.tools.ForwardingJavaFileManager.fileManager
<!-- END KEY -->
<!-- BEGIN DATA -->
 The file manager which all methods are delegated to.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.tools.ForwardingJavaFileManager(M fileManager)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new instance of ForwardingJavaFileManager.
 @param fileManager delegate to this file manager

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.ClassLoader javax.tools.ForwardingJavaFileManager.getClassLoader(JavaFileManager.Location location)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws SecurityException {@inheritDoc}
 @throws IllegalStateException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Iterable<javax.tools.JavaFileObject> javax.tools.ForwardingJavaFileManager.list(JavaFileManager.Location location, String packageName, java.util.Set<javax.tools.JavaFileObject.Kind> kinds, boolean recurse) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IOException {@inheritDoc}
 @throws IllegalStateException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.tools.ForwardingJavaFileManager.inferBinaryName(JavaFileManager.Location location, JavaFileObject file)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IllegalStateException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.tools.ForwardingJavaFileManager.isSameFile(FileObject a, FileObject b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.tools.ForwardingJavaFileManager.handleOption(String current, java.util.Iterator<java.lang.String> remaining)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IllegalArgumentException {@inheritDoc}
 @throws IllegalStateException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.tools.JavaFileObject javax.tools.ForwardingJavaFileManager.getJavaFileForInput(JavaFileManager.Location location, String className, JavaFileObject.Kind kind) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IllegalArgumentException {@inheritDoc}
 @throws IllegalStateException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.tools.JavaFileObject javax.tools.ForwardingJavaFileManager.getJavaFileForOutput(JavaFileManager.Location location, String className, JavaFileObject.Kind kind, FileObject sibling) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IllegalArgumentException {@inheritDoc}
 @throws IllegalStateException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.tools.FileObject javax.tools.ForwardingJavaFileManager.getFileForInput(JavaFileManager.Location location, String packageName, String relativeName) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IllegalArgumentException {@inheritDoc}
 @throws IllegalStateException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.tools.FileObject javax.tools.ForwardingJavaFileManager.getFileForOutput(JavaFileManager.Location location, String packageName, String relativeName, FileObject sibling) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IllegalArgumentException {@inheritDoc}
 @throws IllegalStateException {@inheritDoc}

<!-- END DATA -->
