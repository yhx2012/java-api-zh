<!-- BEGIN KEY -->
public class javax.accessibility.AccessibleStateSet extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 Class AccessibleStateSet determines a component's state set.  The state set
 of a component is a set of AccessibleState objects and descriptions. E.G., The
 current overall state of the object, such as whether it is enabled, 
 has focus, etc.

 @see AccessibleState

 @version     1.10 10/12/99 15:05:34
 @author      Willie Walker

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Vector<javax.accessibility.AccessibleState> javax.accessibility.AccessibleStateSet.states
<!-- END KEY -->
<!-- BEGIN DATA -->
 Each entry in the Vector represents an AccessibleState.
 @see #add
 @see #addAll
 @see #remove
 @see #contains
 @see #toArray
 @see #clear

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleStateSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new empty state set.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleStateSet(javax.accessibility.AccessibleState[] states)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new state with the initial set of states contained in 
 the array of states passed in.  Duplicate entries are ignored.

 @param states an array of AccessibleState describing the state set.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.accessibility.AccessibleStateSet.add(AccessibleState state)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a new state to the current state set if it is not already
 present.  If the state is already in the state set, the state
 set is unchanged and the return value is false.  Otherwise, 
 the state is added to the state set and the return value is
 true.
 @param state the state to add to the state set
 @return true if state is added to the state set; false if the state set 
 is unchanged

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.accessibility.AccessibleStateSet.addAll(javax.accessibility.AccessibleState[] states)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds all of the states to the existing state set.  Duplicate entries 
 are ignored.
 @param states  AccessibleState array describing the state set.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.accessibility.AccessibleStateSet.remove(AccessibleState state)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a state from the current state set.  If the state is not
 in the set, the state set will be unchanged and the return value
 will be false.  If the state is in the state set, it will be removed
 from the set and the return value will be true.
	
 @param state the state to remove from the state set
 @return true if the state is in the state set; false if the state set 
 will be unchanged

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.accessibility.AccessibleStateSet.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all the states from the current state set.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.accessibility.AccessibleStateSet.contains(AccessibleState state)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks if the current state is in the state set.
 @param state the state
 @return true if the state is in the state set; otherwise false

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleState[] javax.accessibility.AccessibleStateSet.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current state set as an array of AccessibleState
 @return AccessibleState array containing the current state.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.accessibility.AccessibleStateSet.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a localized String representing all the states in the set 
 using the default locale.

 @return comma separated localized String
 @see AccessibleBundle#toDisplayString

<!-- END DATA -->
