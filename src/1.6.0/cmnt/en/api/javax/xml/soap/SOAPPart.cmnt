<!-- BEGIN KEY -->
public abstract class javax.xml.soap.SOAPPart extends java.lang.Object implements org.w3c.dom.Document, javax.xml.soap.Node
<!-- END KEY -->
<!-- BEGIN DATA -->
 The container for the SOAP-specific portion of a <code>SOAPMessage</code>
 object. All messages are required to have a SOAP part, so when a
 <code>SOAPMessage</code> object is created, it will automatically
 have a <code>SOAPPart</code> object.
<P>
 A <code>SOAPPart</code> object is a MIME part and has the MIME headers
 Content-Id, Content-Location, and Content-Type.  Because the value of
 Content-Type must be "text/xml", a <code>SOAPPart</code> object automatically
 has a MIME header of Content-Type with its value set to "text/xml".
 The value must be "text/xml" because content in the SOAP part of a
 message must be in XML format.  Content that is not of type "text/xml"
 must be in an <code>AttachmentPart</code> object rather than in the
 <code>SOAPPart</code> object.
 <P>
 When a message is sent, its SOAP part must have the MIME header Content-Type
 set to "text/xml". Or, from the other perspective, the SOAP part of any
 message that is received must have the MIME header Content-Type with a
 value of "text/xml".
 <P>
 A client can access the <code>SOAPPart</code> object of a
 <code>SOAPMessage</code> object by
 calling the method <code>SOAPMessage.getSOAPPart</code>. The
 following  line of code, in which <code>message</code> is a
 <code>SOAPMessage</code> object, retrieves the SOAP part of a message.
 <PRE>
   SOAPPart soapPart = message.getSOAPPart();
 </PRE>
 <P>
 A <code>SOAPPart</code> object contains a <code>SOAPEnvelope</code> object,
 which in turn contains a <code>SOAPBody</code> object and a
 <code>SOAPHeader</code> object.
 The <code>SOAPPart</code> method <code>getEnvelope</code> can be used
 to retrieve the <code>SOAPEnvelope</code> object.
 <P>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.soap.SOAPEnvelope javax.xml.soap.SOAPPart.getEnvelope() throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>SOAPEnvelope</code> object associated with this
 <code>SOAPPart</code> object. Once the SOAP envelope is obtained, it
 can be used to get its contents.

 @return the <code>SOAPEnvelope</code> object for this
           <code>SOAPPart</code> object
 @exception SOAPException if there is a SOAP error

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.soap.SOAPPart.getContentId()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the value of the MIME header whose name is "Content-Id".

 @return a <code>String</code> giving the value of the MIME header
         named "Content-Id"
 @see #setContentId

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.soap.SOAPPart.getContentLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the value of the MIME header whose name is "Content-Location".

 @return a <code>String</code> giving the value of the MIME header whose
          name is "Content-Location"
 @see #setContentLocation

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.soap.SOAPPart.setContentId(String contentId)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the value of the MIME header named "Content-Id"
 to the given <code>String</code>.

 @param contentId a <code>String</code> giving the value of the MIME
        header "Content-Id"

 @exception IllegalArgumentException if there is a problem in
 setting the content id
 @see #getContentId

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.soap.SOAPPart.setContentLocation(String contentLocation)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the value of the MIME header "Content-Location"
 to the given <code>String</code>.

 @param contentLocation a <code>String</code> giving the value
        of the MIME
        header "Content-Location"
 @exception IllegalArgumentException if there is a problem in
            setting the content location.
 @see #getContentLocation

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.soap.SOAPPart.removeMimeHeader(String header)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all MIME headers that match the given name.

 @param header a <code>String</code> giving the name of the MIME header(s) to
               be removed

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.soap.SOAPPart.removeAllMimeHeaders()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all the <code>MimeHeader</code> objects for this
 <code>SOAPEnvelope</code> object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String[] javax.xml.soap.SOAPPart.getMimeHeader(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets all the values of the <code>MimeHeader</code> object
 in this <code>SOAPPart</code> object that
 is identified by the given <code>String</code>.

 @param name the name of the header; example: "Content-Type"
 @return a <code>String</code> array giving all the values for the
         specified header
 @see #setMimeHeader

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.soap.SOAPPart.setMimeHeader(String name, String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Changes the first header entry that matches the given header name
 so that its value is the given value, adding a new header with the
 given name and value if no
 existing header is a match. If there is a match, this method clears
 all existing values for the first header that matches and sets the
 given value instead. If more than one header has
 the given name, this method removes all of the matching headers after
 the first one.
 <P>
 Note that RFC822 headers can contain only US-ASCII characters.

 @param   name    a <code>String</code> giving the header name
                  for which to search
 @param   value   a <code>String</code> giving the value to be set.
                  This value will be substituted for the current value(s)
                  of the first header that is a match if there is one.
                  If there is no match, this value will be the value for
                  a new <code>MimeHeader</code> object.

 @exception IllegalArgumentException if there was a problem with
            the specified mime header name or value
 @see #getMimeHeader

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.soap.SOAPPart.addMimeHeader(String name, String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>MimeHeader</code> object with the specified
 name and value and adds it to this <code>SOAPPart</code> object.
 If a <code>MimeHeader</code> with the specified name already
 exists, this method adds the specified value to the already
 existing value(s).
 <P>
 Note that RFC822 headers can contain only US-ASCII characters.

 @param   name    a <code>String</code> giving the header name
 @param   value   a <code>String</code> giving the value to be set
                  or added
 @exception IllegalArgumentException if there was a problem with
            the specified mime header name or value

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Iterator javax.xml.soap.SOAPPart.getAllMimeHeaders()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves all the headers for this <code>SOAPPart</code> object
 as an iterator over the <code>MimeHeader</code> objects.

 @return  an <code>Iterator</code> object with all of the Mime
          headers for this <code>SOAPPart</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Iterator javax.xml.soap.SOAPPart.getMatchingMimeHeaders(java.lang.String[] names)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves all <code>MimeHeader</code> objects that match a name in
 the given array.

 @param names a <code>String</code> array with the name(s) of the
        MIME headers to be returned
 @return  all of the MIME headers that match one of the names in the
           given array, returned as an <code>Iterator</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Iterator javax.xml.soap.SOAPPart.getNonMatchingMimeHeaders(java.lang.String[] names)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves all <code>MimeHeader</code> objects whose name does
 not match a name in the given array.

 @param names a <code>String</code> array with the name(s) of the
        MIME headers not to be returned
 @return  all of the MIME headers in this <code>SOAPPart</code> object
          except those that match one of the names in the
           given array.  The nonmatching MIME headers are returned as an
           <code>Iterator</code> object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.soap.SOAPPart.setContent(Source source) throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the content of the <code>SOAPEnvelope</code> object with the data 
 from the given <code>Source</code> object. This <code>Source</code> 
 must contain a valid SOAP document.

 @param source the <code>javax.xml.transform.Source</code> object with the
        data to be set

 @exception SOAPException if there is a problem in setting the source
 @see #getContent

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.transform.Source javax.xml.soap.SOAPPart.getContent() throws javax.xml.soap.SOAPException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the content of the SOAPEnvelope as a JAXP <code>Source</code>
 object.

 @return the content as a <code>javax.xml.transform.Source</code> object

 @exception SOAPException if the implementation cannot convert
                          the specified <code>Source</code> object
 @see #setContent

<!-- END DATA -->
