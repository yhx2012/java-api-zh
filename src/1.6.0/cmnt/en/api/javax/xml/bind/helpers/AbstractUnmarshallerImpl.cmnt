<!-- BEGIN KEY -->
public abstract class javax.xml.bind.helpers.AbstractUnmarshallerImpl extends java.lang.Object implements javax.xml.bind.Unmarshaller
<!-- END KEY -->
<!-- BEGIN DATA -->
 Partial default <tt>Unmarshaller</tt> implementation.
 
 <p>
 This class provides a partial default implementation for the
 {@link javax.xml.bind.Unmarshaller}interface.
 
 <p>
 A JAXB Provider has to implement five methods (getUnmarshallerHandler,
 unmarshal(Node), unmarshal(XMLReader,InputSource),
 unmarshal(XMLStreamReader), and unmarshal(XMLEventReader).
 
 @author <ul>
         <li>Kohsuke Kawaguchi, Sun Microsystems, Inc.</li>
         </ul>
 @version $Revision: 1.2 $ $Date: 2007-03-03 08:04:30 $
 @see javax.xml.bind.Unmarshaller
 @since JAXB1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean javax.xml.bind.helpers.AbstractUnmarshallerImpl.validating
<!-- END KEY -->
<!-- BEGIN DATA -->
whether or not the unmarshaller will validate 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected org.xml.sax.XMLReader javax.xml.bind.helpers.AbstractUnmarshallerImpl.getXMLReader() throws javax.xml.bind.JAXBException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtains a configured XMLReader.
 
 This method is used when the client-specified
 {@link SAXSource} object doesn't have XMLReader.
 
 {@link Unmarshaller} is not re-entrant, so we will
 only use one instance of XMLReader.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract java.lang.Object javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(XMLReader reader, InputSource source) throws javax.xml.bind.JAXBException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Unmarshals an object by using the specified XMLReader and the InputSource.
 
 The callee should call the setErrorHandler method of the XMLReader
 so that errors are passed to the client-specified ValidationEventHandler.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.xml.bind.helpers.AbstractUnmarshallerImpl.isValidating() throws javax.xml.bind.JAXBException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates whether or not the Unmarshaller is configured to validate
 during unmarshal operations.
 <p>
 <i><b>Note:</b> I named this method isValidating() to stay in-line
 with JAXP, as opposed to naming it getValidating(). </i>

 @return true if the Unmarshaller is configured to validate during
        unmarshal operations, false otherwise
 @throws JAXBException if an error occurs while retrieving the validating
        flag

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.bind.helpers.AbstractUnmarshallerImpl.setEventHandler(ValidationEventHandler handler) throws javax.xml.bind.JAXBException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Allow an application to register a validation event handler.
 <p>
 The validation event handler will be called by the JAXB Provider if any
 validation errors are encountered during calls to any of the
 <tt>unmarshal</tt> methods.  If the client application does not register
 a validation event handler before invoking the unmarshal methods, then
 all validation events will be silently ignored and may result in
 unexpected behaviour.

 @param handler the validation event handler
 @throws JAXBException if an error was encountered while setting the
        event handler

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.bind.helpers.AbstractUnmarshallerImpl.setValidating(boolean validating) throws javax.xml.bind.JAXBException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Specifies whether or not the Unmarshaller should validate during
 unmarshal operations.  By default, the <tt>Unmarshaller</tt> does
 not validate.
 <p>
 This method may only be invoked before or after calling one of the
 unmarshal methods.

 @param validating true if the Unmarshaller should validate during
       unmarshal, false otherwise
 @throws JAXBException if an error occurred while enabling or disabling
 validation at unmarshal time

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.bind.ValidationEventHandler javax.xml.bind.helpers.AbstractUnmarshallerImpl.getEventHandler() throws javax.xml.bind.JAXBException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the current event handler or the default event handler if one
 hasn't been set.

 @return the current ValidationEventHandler or the default event handler
        if it hasn't been set
 @throws JAXBException if an error was encountered while getting the
        current event handler

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.xml.bind.UnmarshalException javax.xml.bind.helpers.AbstractUnmarshallerImpl.createUnmarshalException(SAXException e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an UnmarshalException from a SAXException.
 
 This is an utility method provided for the derived classes.
 
 <p>
 When a provider-implemented ContentHandler wants to throw a
 JAXBException, it needs to wrap the exception by a SAXException.
 If the unmarshaller implementation blindly wrap SAXException
 by JAXBException, such an exception will be a JAXBException
 wrapped by a SAXException wrapped by another JAXBException.
 This is silly.
 
 <p>
 This method checks the nested exception of SAXException
 and reduce those excessive wrapping.
 
 @return the resulting UnmarshalException

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.bind.helpers.AbstractUnmarshallerImpl.setProperty(String name, Object value) throws javax.xml.bind.PropertyException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Default implementation of the setProperty method always 
 throws PropertyException since there are no required
 properties. If a provider needs to handle additional 
 properties, it should override this method in a derived class.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.xml.bind.helpers.AbstractUnmarshallerImpl.getProperty(String name) throws javax.xml.bind.PropertyException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Default implementation of the getProperty method always 
 throws PropertyException since there are no required
 properties. If a provider needs to handle additional 
 properties, it should override this method in a derived class.

<!-- END DATA -->
