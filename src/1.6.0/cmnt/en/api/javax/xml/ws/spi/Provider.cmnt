<!-- BEGIN KEY -->
public abstract class javax.xml.ws.spi.Provider extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 Service provider for <code>ServiceDelegate</code> and
 <code>Endpoint</code> objects.
 <p>
 
 @since JAX-WS 2.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.ws.spi.Provider.JAXWSPROVIDER_PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
 A constant representing the property used to lookup the
 name of a <code>Provider</code> implementation 
 class.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.xml.ws.spi.Provider()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new instance of Provider 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.ws.spi.Provider javax.xml.ws.spi.Provider.provider()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates a new provider object.
 <p>
 The algorithm used to locate the provider subclass to use consists
 of the following steps:
 <p>
 <ul>
 <li>
   If a resource with the name of
   <code>META-INF/services/javax.xml.ws.spi.Provider</code>
   exists, then its first line, if present, is used as the UTF-8 encoded
   name of the implementation class.
 </li>
 <li>
   If the $java.home/lib/jaxws.properties file exists and it is readable by
   the <code>java.util.Properties.load(InputStream)</code> method and it contains
   an entry whose key is <code>javax.xml.ws.spi.Provider</code>, then the value of
   that entry is used as the name of the implementation class.
 </li>
 <li>
   If a system property with the name <code>javax.xml.ws.spi.Provider</code>
   is defined, then its value is used as the name of the implementation class.
 </li>
 <li>
   Finally, a default implementation class name is used.
 </li>
 </ul>


<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.ws.spi.ServiceDelegate javax.xml.ws.spi.Provider.createServiceDelegate(URL wsdlDocumentLocation, QName serviceName, java.lang.Class serviceClass)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a service delegate object.
 <p>
 @param wsdlDocumentLocation A URL pointing to the WSDL document
        for the service, or <code>null</code> if there isn't one.
 @param serviceName The qualified name of the service.
 @param serviceClass The service class, which must be either
        <code>javax.xml.ws.Service</code> or a subclass thereof.
 @return The newly created service delegate.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.ws.Endpoint javax.xml.ws.spi.Provider.createEndpoint(String bindingId, Object implementor)
<!-- END KEY -->
<!-- BEGIN DATA -->


 Creates an endpoint object with the provided binding and implementation
 object.

 @param bindingId A URI specifying the desired binding (e.g. SOAP/HTTP)
 @param implementor A service implementation object to which
        incoming requests will be dispatched. The corresponding
        class must be annotated with all the necessary Web service
        annotations.
 @return The newly created endpoint.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.ws.Endpoint javax.xml.ws.spi.Provider.createAndPublishEndpoint(String address, Object implementor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates and publishes an endpoint object with the specified
 address and implementation object.

 @param address A URI specifying the address and transport/protocol
        to use. A http: URI must result in the SOAP 1.1/HTTP
        binding being used. Implementations may support other
        URI schemes.
 @param implementor A service implementation object to which
        incoming requests will be dispatched. The corresponding
        class must be annotated with all the necessary Web service
        annotations.
 @return The newly created endpoint.

<!-- END DATA -->
