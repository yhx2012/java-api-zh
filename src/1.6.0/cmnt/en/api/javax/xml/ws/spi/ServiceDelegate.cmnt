<!-- BEGIN KEY -->
public abstract class javax.xml.ws.spi.ServiceDelegate extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 Service delegates are used internally by <code>Service</code> objects
 to allow pluggability of JAX-WS implementations.
 <p>
 Every <code>Service</code> object has its own delegate, created using
 the javax.xml.ws.Provider#createServiceDelegate method. A <code>Service</code>
 object delegates all of its instance methods to its delegate.
 
 @see javax.xml.ws.Service
 @see javax.xml.ws.spi.Provider

 @since JAX-WS 2.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract T javax.xml.ws.spi.ServiceDelegate.getPort(QName portName, java.lang.Class<T> serviceEndpointInterface)
<!-- END KEY -->
<!-- BEGIN DATA -->
The getPort method returns a stub. A service client
  uses this stub to invoke operations on the target 
  service endpoint. The <code>serviceEndpointInterface</code> 
  specifies the service endpoint interface that is supported by
  the created dynamic proxy or stub instance. 

  @param portName  Qualified name of the service endpoint in 
                   the WSDL service description
  @param serviceEndpointInterface Service endpoint interface 
                   supported by the dynamic proxy or stub
                   instance
  @return Object Proxy instance that 
                 supports the specified service endpoint 
                 interface
  @throws WebServiceException This exception is thrown in the
                   following cases:
                   <UL>
                   <LI>If there is an error in creation of 
                       the proxy
                   <LI>If there is any missing WSDL metadata
                       as required by this method
                   <LI>Optionally, if an illegal 
                       <code>serviceEndpointInterface</code>
                       or <code>portName</code> is specified
                   </UL>  
  @see java.lang.reflect.Proxy
  @see java.lang.reflect.InvocationHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract T javax.xml.ws.spi.ServiceDelegate.getPort(java.lang.Class<T> serviceEndpointInterface)
<!-- END KEY -->
<!-- BEGIN DATA -->
The getPort method returns a stub. The parameter 
  <code>serviceEndpointInterface</code> specifies the service 
  endpoint interface that is supported by the returned proxy.
  In the implementation of this method, the JAX-WS 
  runtime system takes the responsibility of selecting a protocol
  binding (and a port) and configuring the proxy accordingly. 
  The returned proxy should not be reconfigured by the client.

  @param serviceEndpointInterface Service endpoint interface
  @return Object instance that supports the 
                   specified service endpoint interface
  @throws WebServiceException
                   <UL>
                   <LI>If there is an error during creation
                       of the proxy
                   <LI>If there is any missing WSDL metadata
                       as required by this method
                   <LI>Optionally, if an illegal 
                       <code>serviceEndpointInterface</code>
                       is specified
                   </UL>  

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.ws.spi.ServiceDelegate.addPort(QName portName, String bindingId, String endpointAddress)
<!-- END KEY -->
<!-- BEGIN DATA -->
Creates a new port for the service. Ports created in this way contain
  no WSDL port type information and can only be used for creating 
  <code>Dispatch</code>instances.

  @param portName  Qualified name for the target service endpoint
  @param bindingId A URI identifier of a binding.
  @param endpointAddress Address of the target service endpoint as a URI
  @throws WebServiceException If any error in the creation of
  the port

  @see javax.xml.ws.soap.SOAPBinding#SOAP11HTTP_BINDING
  @see javax.xml.ws.soap.SOAPBinding#SOAP12HTTP_BINDING
  @see javax.xml.ws.http.HTTPBinding#HTTP_BINDING

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.ws.Dispatch<T> javax.xml.ws.spi.ServiceDelegate.createDispatch(QName portName, java.lang.Class<T> type, Service.Mode mode)
<!-- END KEY -->
<!-- BEGIN DATA -->
Creates a <code>Dispatch</code> instance for use with objects of
  the users choosing.

  @param portName  Qualified name for the target service endpoint
  @param type The class of object used to messages or message
  payloads. Implementations are required to support
  javax.xml.transform.Source and javax.xml.soap.SOAPMessage.
  @param mode Controls whether the created dispatch instance is message
  or payload oriented, i.e. whether the user will work with complete
  protocol messages or message payloads. E.g. when using the SOAP
  protocol, this parameter controls whether the user will work with
  SOAP messages or the contents of a SOAP body. Mode must be MESSAGE
  when type is SOAPMessage.

  @return Dispatch instance
  @throws WebServiceException If any error in the creation of
                   the <code>Dispatch</code> object
  @see javax.xml.transform.Source
  @see javax.xml.soap.SOAPMessage

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.ws.Dispatch<java.lang.Object> javax.xml.ws.spi.ServiceDelegate.createDispatch(QName portName, JAXBContext context, Service.Mode mode)
<!-- END KEY -->
<!-- BEGIN DATA -->
Creates a <code>Dispatch</code> instance for use with JAXB
  generated objects.

  @param portName  Qualified name for the target service endpoint
  @param context The JAXB context used to marshall and unmarshall
  messages or message payloads.
  @param mode Controls whether the created dispatch instance is message
  or payload oriented, i.e. whether the user will work with complete
  protocol messages or message payloads. E.g. when using the SOAP
  protocol, this parameter controls whether the user will work with
  SOAP messages or the contents of a SOAP body.

  @return Dispatch instance
  @throws ServiceException If any error in the creation of
                   the <code>Dispatch</code> object

  @see javax.xml.bind.JAXBContext

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.namespace.QName javax.xml.ws.spi.ServiceDelegate.getServiceName()
<!-- END KEY -->
<!-- BEGIN DATA -->
Gets the name of this service.
  @return Qualified name of this service

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Iterator<javax.xml.namespace.QName> javax.xml.ws.spi.ServiceDelegate.getPorts()
<!-- END KEY -->
<!-- BEGIN DATA -->
Returns an <code>Iterator</code> for the list of 
  <code>QName</code>s of service endpoints grouped by this
  service

  @return Returns <code>java.util.Iterator</code> with elements
          of type <code>javax.xml.namespace.QName</code>
  @throws WebServiceException If this Service class does not
          have access to the required WSDL metadata  

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.net.URL javax.xml.ws.spi.ServiceDelegate.getWSDLDocumentLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
Gets the location of the WSDL document for this Service.

  @return URL for the location of the WSDL document for 
          this service

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.ws.handler.HandlerResolver javax.xml.ws.spi.ServiceDelegate.getHandlerResolver()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the configured handler resolver.

  @return HandlerResolver The <code>HandlerResolver</code> being
          used by this <code>Service</code> instance, or <code>null</code>
          if there isn't one.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.ws.spi.ServiceDelegate.setHandlerResolver(HandlerResolver handlerResolver)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Sets the <code>HandlerResolver</code> for this <code>Service</code>
  instance.
  <p>
  The handler resolver, if present, will be called once for each
  proxy or dispatch instance that is created, and the handler chain
  returned by the resolver will be set on the instance.

  @param handlerResolver The <code>HandlerResolver</code> to use
         for all subsequently created proxy/dispatch objects.

  @see javax.xml.ws.handler.HandlerResolver

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.concurrent.Executor javax.xml.ws.spi.ServiceDelegate.getExecutor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the executor for this <code>Service</code>instance.

 The executor is used for all asynchronous invocations that
 require callbacks.

 @return The <code>java.util.concurrent.Executor</code> to be
         used to invoke a callback.
 
 @see java.util.concurrent.Executor

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.ws.spi.ServiceDelegate.setExecutor(Executor executor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the executor for this <code>Service</code> instance.

 The executor is used for all asynchronous invocations that
 require callbacks.

 @param executor The <code>java.util.concurrent.Executor</code>
        to be used to invoke a callback.

 @throws SecurityException If the instance does not support
         setting an executor for security reasons (e.g. the
         necessary permissions are missing).
 
 @see java.util.concurrent.Executor

<!-- END DATA -->
