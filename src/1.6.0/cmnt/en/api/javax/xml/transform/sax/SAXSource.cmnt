<!-- BEGIN KEY -->
public class javax.xml.transform.sax.SAXSource extends java.lang.Object implements javax.xml.transform.Source
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Acts as an holder for SAX-style Source.</p>
 
 <p>Note that XSLT requires namespace support. Attempting to transform an
 input source that is not
 generated with a namespace-aware parser may result in errors.
 Parsers can be made namespace aware by calling the
 {@link javax.xml.parsers.SAXParserFactory#setNamespaceAware(boolean awareness)} method.</p>
 
 @author <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
 @version $Revision: 1.2 $, $Date: 2007-03-03 08:04:35 $

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.sax.SAXSource.FEATURE
<!-- END KEY -->
<!-- BEGIN DATA -->
 If {@link javax.xml.transform.TransformerFactory#getFeature}
 returns true when passed this value as an argument,
 the Transformer supports Source input of this type.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.sax.SAXSource()
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Zero-argument default constructor.  If this constructor is used, and
 no SAX source is set using
 {@link #setInputSource(InputSource inputSource)} , then the
 <code>Transformer</code> will
 create an empty source {@link org.xml.sax.InputSource} using
 {@link org.xml.sax.InputSource#InputSource() new InputSource()}.</p>

 @see javax.xml.transform.Transformer#transform(Source xmlSource, Result outputTarget)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.sax.SAXSource(XMLReader reader, InputSource inputSource)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a <code>SAXSource</code>, using an {@link org.xml.sax.XMLReader}
 and a SAX InputSource. The {@link javax.xml.transform.Transformer}
 or {@link javax.xml.transform.sax.SAXTransformerFactory} will set itself
 to be the reader's {@link org.xml.sax.ContentHandler}, and then will call
 reader.parse(inputSource).

 @param reader An XMLReader to be used for the parse.
 @param inputSource A SAX input source reference that must be non-null
 and that will be passed to the reader parse method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.sax.SAXSource(InputSource inputSource)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a <code>SAXSource</code>, using a SAX <code>InputSource</code>.
 The {@link javax.xml.transform.Transformer} or
 {@link javax.xml.transform.sax.SAXTransformerFactory} creates a
 reader via {@link org.xml.sax.helpers.XMLReaderFactory}
 (if setXMLReader is not used), sets itself as
 the reader's {@link org.xml.sax.ContentHandler}, and calls
 reader.parse(inputSource).

 @param inputSource An input source reference that must be non-null
 and that will be passed to the parse method of the reader.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.sax.SAXSource.setXMLReader(XMLReader reader)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the XMLReader to be used for the Source.

 @param reader A valid XMLReader or XMLFilter reference.

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.XMLReader javax.xml.transform.sax.SAXSource.getXMLReader()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the XMLReader to be used for the Source.

 @return A valid XMLReader or XMLFilter reference, or null.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.sax.SAXSource.setInputSource(InputSource inputSource)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the SAX InputSource to be used for the Source.

 @param inputSource A valid InputSource reference.

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.InputSource javax.xml.transform.sax.SAXSource.getInputSource()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the SAX InputSource to be used for the Source.

 @return A valid InputSource reference, or null.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.sax.SAXSource.setSystemId(String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the system identifier for this Source.  If an input source
 has already been set, it will set the system ID or that
 input source, otherwise it will create a new input source.

 <p>The system identifier is optional if there is a byte stream
 or a character stream, but it is still useful to provide one,
 since the application can use it to resolve relative URIs
 and can include it in error messages and warnings (the parser
 will attempt to open a connection to the URI only if
 no byte stream or character stream is specified).</p>

 @param systemId The system identifier as a URI string.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.transform.sax.SAXSource.getSystemId()
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Get the base ID (URI or system ID) from where URIs
 will be resolved.</p>

 @return Base URL for the <code>Source</code>, or <code>null</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static org.xml.sax.InputSource javax.xml.transform.sax.SAXSource.sourceToInputSource(Source source)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Attempt to obtain a SAX InputSource object from a Source
 object.

 @param source Must be a non-null Source reference.

 @return An InputSource, or null if Source can not be converted.

<!-- END DATA -->
