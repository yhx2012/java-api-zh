<!-- BEGIN KEY -->
public class javax.xml.transform.dom.DOMResult extends java.lang.Object implements javax.xml.transform.Result
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Acts as a holder for a transformation result tree in the form of a Document Object Model (DOM) tree.</p>
 
 <p>If no output DOM source is set, the transformation will create a Document node as the holder for the result of the transformation,
 which may be retrieved with {@link #getNode()}.</p>
 
 @author <a href="Jeff.Suttor@Sun.com">Jeff Suttor</a>
 @version $Revision: 1.2 $, $Date: 2007-03-03 08:04:34 $

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.dom.DOMResult.FEATURE
<!-- END KEY -->
<!-- BEGIN DATA -->
<p>If {@link javax.xml.transform.TransformerFactory#getFeature}
 returns <code>true</code> when passed this value as an argument,
 the <code>Transformer</code> supports <code>Result</code> output of this type.</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.dom.DOMResult()
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Zero-argument default constructor.</p>
 
 <p><code>node</code>,
 <code>siblingNode</code> and
 <code>systemId</code>
 will be set to <code>null</code>.</p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.dom.DOMResult(Node node)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Use a DOM node to create a new output target.</p>
 
 <p>In practice, the node should be
 a {@link org.w3c.dom.Document} node,
 a {@link org.w3c.dom.DocumentFragment} node, or
 a {@link org.w3c.dom.Element} node.
 In other words, a node that accepts children.</p>

 <p><code>siblingNode</code> and
 <code>systemId</code>
 will be set to <code>null</code>.</p>
 
 @param node The DOM node that will contain the result tree.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.dom.DOMResult(Node node, String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Use a DOM node to create a new output target with the specified System ID.<p>
 
 <p>In practice, the node should be
 a {@link org.w3c.dom.Document} node,
 a {@link org.w3c.dom.DocumentFragment} node, or
 a {@link org.w3c.dom.Element} node.
 In other words, a node that accepts children.</p>

 <p><code>siblingNode</code> will be set to <code>null</code>.</p>
 
 @param node The DOM node that will contain the result tree.
 @param systemId The system identifier which may be used in association with this node.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.dom.DOMResult(Node node, Node nextSibling)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Use a DOM node to create a new output target specifying the child node where the result nodes should be inserted before.</p>
 
 <p>In practice, <code>node</code> and <code>nextSibling</code> should be
 a {@link org.w3c.dom.Document} node,
 a {@link org.w3c.dom.DocumentFragment} node, or
 a {@link org.w3c.dom.Element} node.
 In other words, a node that accepts children.</p>
 
 <p>Use <code>nextSibling</code> to specify the child node 
 where the result nodes should be inserted before. 
 If <code>nextSibling</code> is not a sibling of <code>node</code>,
 then an <code>IllegalArgumentException</code> is thrown.
 If <code>node</code> is <code>null</code> and <code>nextSibling</code> is not <code>null</code>,
 then an <code>IllegalArgumentException</code> is thrown.
 If <code>nextSibling</code> is <code>null</code>,
 then the behavior is the same as calling {@link #DOMResult(Node node)},
 i.e. append the result nodes as the last child of the specified <code>node</code>.</p>
 
 <p><code>systemId</code> will be set to <code>null</code>.</p>
 
 @param node The DOM node that will contain the result tree.
 @param nextSibling The child node where the result nodes should be inserted before.
 
 @throws IllegalArgumentException If <code>nextSibling</code> is not a sibling of <code>node</code> or
   <code>node</code> is <code>null</code> and <code>nextSibling</code>
   is not <code>null</code>.
 
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.dom.DOMResult(Node node, Node nextSibling, String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Use a DOM node to create a new output target specifying the child node where the result nodes should be inserted before and
 the specified System ID.</p>
 
 <p>In practice, <code>node</code> and <code>nextSibling</code> should be
 a {@link org.w3c.dom.Document} node,
 a {@link org.w3c.dom.DocumentFragment} node, or a
 {@link org.w3c.dom.Element} node.
 In other words, a node that accepts children.</p>

 <p>Use <code>nextSibling</code> to specify the child node 
 where the result nodes should be inserted before.
 If <code>nextSibling</code> is not a sibling of <code>node</code>,
 then an <code>IllegalArgumentException</code> is thrown.
 If <code>node</code> is <code>null</code> and <code>nextSibling</code> is not <code>null</code>,
 then an <code>IllegalArgumentException</code> is thrown.
 If <code>nextSibling</code> is <code>null</code>,
 then the behavior is the same as calling {@link #DOMResult(Node node, String systemId)},
 i.e. append the result nodes as the last child of the specified node and use the specified System ID.</p>
 
 @param node The DOM node that will contain the result tree.
 @param nextSibling The child node where the result nodes should be inserted before.
 @param systemId The system identifier which may be used in association with this node.
 
 @throws IllegalArgumentException If <code>nextSibling</code> is not a
   sibling of <code>node</code> or
   <code>node</code> is <code>null</code> and <code>nextSibling</code>
   is not <code>null</code>.
 
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.dom.DOMResult.setNode(Node node)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Set the node that will contain the result DOM tree.<p>
 
 <p>In practice, the node should be
 a {@link org.w3c.dom.Document} node,
 a {@link org.w3c.dom.DocumentFragment} node, or
 a {@link org.w3c.dom.Element} node.
 In other words, a node that accepts children.</p>
 
 <p>An <code>IllegalStateException</code> is thrown if
 <code>nextSibling</code> is not <code>null</code> and
 <code>node</code> is not a parent of <code>nextSibling</code>. 
 An <code>IllegalStateException</code> is thrown if <code>node</code> is <code>null</code> and
 <code>nextSibling</code> is not <code>null</code>.</p> 

 @param node The node to which the transformation will be appended.
 
 @throws IllegalStateException If <code>nextSibling</code> is not
   <code>null</code> and
   <code>nextSibling</code> is not a child of <code>node</code> or
   <code>node</code> is <code>null</code> and
   <code>nextSibling</code> is not <code>null</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node javax.xml.transform.dom.DOMResult.getNode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Get the node that will contain the result DOM tree.</p>
 
 <p>If no node was set via
 {@link #DOMResult(Node node)},
 {@link #DOMResult(Node node, String systeId)},
 {@link #DOMResult(Node node, Node nextSibling)},
 {@link #DOMResult(Node node, Node nextSibling, String systemId)} or
 {@link #setNode(Node node)},
 then the node will be set by the transformation, and may be obtained from this method once the transformation is complete.
 Calling this method before the transformation will return <code>null</code>.</p>

 @return The node to which the transformation will be appended.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.dom.DOMResult.setNextSibling(Node nextSibling)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Set the child node before which the result nodes will be inserted.</p>

 <p>Use <code>nextSibling</code> to specify the child node
 before which the result nodes should be inserted.
 If <code>nextSibling</code> is not a descendant of <code>node</code>,
 then an <code>IllegalArgumentException</code> is thrown.
 If <code>node</code> is <code>null</code> and <code>nextSibling</code> is not <code>null</code>,
 then an <code>IllegalStateException</code> is thrown.
 If <code>nextSibling</code> is <code>null</code>,
 then the behavior is the same as calling {@link #DOMResult(Node node)},
 i.e. append the result nodes as the last child of the specified <code>node</code>.</p>
 
 @param nextSibling The child node before which the result nodes will be inserted.
 
 @throws IllegalArgumentException If <code>nextSibling</code> is not a
   descendant of <code>node</code>.
 @throws IllegalStateException If <code>node</code> is <code>null</code>
   and <code>nextSibling</code> is not <code>null</code>.
 
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node javax.xml.transform.dom.DOMResult.getNextSibling()
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Get the child node before which the result nodes will be inserted.</p>
 
 <p>If no node was set via
 {@link #DOMResult(Node node, Node nextSibling)},
 {@link #DOMResult(Node node, Node nextSibling, String systemId)} or
 {@link #setNextSibling(Node nextSibling)},
 then <code>null</code> will be returned.</p>

 @return The child node before which the result nodes will be inserted.
 
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.dom.DOMResult.setSystemId(String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Set the systemId that may be used in association with the node.</p>

 @param systemId The system identifier as a URI string.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.transform.dom.DOMResult.getSystemId()
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Get the System Identifier.</p>
 
 <p>If no System ID was set via
 {@link #DOMResult(Node node, String systemId)},
 {@link #DOMResult(Node node, Node nextSibling, String systemId)} or
 {@link #setSystemId(String systemId)},
 then <code>null</code> will be returned.</p>

 @return The system identifier.

<!-- END DATA -->
