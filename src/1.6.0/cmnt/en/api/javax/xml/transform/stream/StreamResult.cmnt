<!-- BEGIN KEY -->
public class javax.xml.transform.stream.StreamResult extends java.lang.Object implements javax.xml.transform.Result
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Acts as an holder for a transformation result,
 which may be XML, plain Text, HTML, or some other form of markup.</p>

 @author <a href="Jeff.Suttor@Sun.com">Jeff Suttor</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.stream.StreamResult.FEATURE
<!-- END KEY -->
<!-- BEGIN DATA -->
If {@link javax.xml.transform.TransformerFactory#getFeature}
 returns true when passed this value as an argument,
 the Transformer supports Result output of this type.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stream.StreamResult()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Zero-argument default constructor.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stream.StreamResult(OutputStream outputStream)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a StreamResult from a byte stream.  Normally,
 a stream should be used rather than a reader, so that
 the transformer may use instructions contained in the
 transformation instructions to control the encoding.

 @param outputStream A valid OutputStream reference.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stream.StreamResult(Writer writer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a StreamResult from a character stream.  Normally,
 a stream should be used rather than a reader, so that
 the transformer may use instructions contained in the
 transformation instructions to control the encoding.  However,
 there are times when it is useful to write to a character
 stream, such as when using a StringWriter.

 @param writer  A valid Writer reference.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stream.StreamResult(String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a StreamResult from a URL.

 @param systemId Must be a String that conforms to the URI syntax.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.stream.StreamResult(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a StreamResult from a File.

 @param f Must a non-null File reference.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.stream.StreamResult.setOutputStream(OutputStream outputStream)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the ByteStream that is to be written to.  Normally,
 a stream should be used rather than a reader, so that
 the transformer may use instructions contained in the
 transformation instructions to control the encoding.

 @param outputStream A valid OutputStream reference.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.OutputStream javax.xml.transform.stream.StreamResult.getOutputStream()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the byte stream that was set with setOutputStream.

 @return The byte stream that was set with setOutputStream, or null
 if setOutputStream or the ByteStream constructor was not called.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.stream.StreamResult.setWriter(Writer writer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the writer that is to receive the result.  Normally,
 a stream should be used rather than a writer, so that
 the transformer may use instructions contained in the
 transformation instructions to control the encoding.  However,
 there are times when it is useful to write to a writer,
 such as when using a StringWriter.

 @param writer  A valid Writer reference.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Writer javax.xml.transform.stream.StreamResult.getWriter()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the character stream that was set with setWriter.

 @return The character stream that was set with setWriter, or null
 if setWriter or the Writer constructor was not called.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.stream.StreamResult.setSystemId(String systemId)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the systemID that may be used in association
 with the byte or character stream, or, if neither is set, use
 this value as a writeable URI (probably a file name).

 @param systemId The system identifier as a URI string.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.stream.StreamResult.setSystemId(File f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Set the system ID from a <code>File</code> reference.</p>
 

 @param f Must a non-null File reference.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.transform.stream.StreamResult.getSystemId()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the system identifier that was set with setSystemId.

 @return The system identifier that was set with setSystemId, or null
 if setSystemId was not called.

<!-- END DATA -->
