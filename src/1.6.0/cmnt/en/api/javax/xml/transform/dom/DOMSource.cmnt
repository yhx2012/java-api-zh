<!-- BEGIN KEY -->
public class javax.xml.transform.dom.DOMSource extends java.lang.Object implements javax.xml.transform.Source
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Acts as a holder for a transformation Source tree in the
 form of a Document Object Model (DOM) tree.</p>
 
 <p>Note that XSLT requires namespace support. Attempting to transform a DOM
 that was not contructed with a namespace-aware parser may result in errors.
 Parsers can be made namespace aware by calling
 {@link javax.xml.parsers.DocumentBuilderFactory#setNamespaceAware(boolean awareness)}.</p>
 
 @author <a href="Jeff.Suttor@Sun.com">Jeff Suttor</a>
 @version $Revision: 1.2 $, $Date: 2007-03-03 08:04:35 $
 @see <a href="http://www.w3.org/TR/DOM-Level-2">Document Object Model (DOM) Level 2 Specification</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.transform.dom.DOMSource.FEATURE
<!-- END KEY -->
<!-- BEGIN DATA -->
If {@link javax.xml.transform.TransformerFactory#getFeature}
 returns true when passed this value as an argument,
 the Transformer supports Source input of this type.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.dom.DOMSource()
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Zero-argument default constructor.  If this constructor is used, and
 no DOM source is set using {@link #setNode(Node node)} , then the
 <code>Transformer</code> will
 create an empty source {@link org.w3c.dom.Document} using
 {@link javax.xml.parsers.DocumentBuilder#newDocument()}.</p>

 @see javax.xml.transform.Transformer#transform(Source xmlSource, Result outputTarget)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.dom.DOMSource(Node n)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new input source with a DOM node.  The operation
 will be applied to the subtree rooted at this node.  In XSLT,
 a "/" pattern still means the root of the tree (not the subtree),
 and the evaluation of global variables and parameters is done
 from the root node also.

 @param n The DOM node that will contain the Source tree.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.xml.transform.dom.DOMSource(Node node, String systemID)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new input source with a DOM node, and with the
 system ID also passed in as the base URI.

 @param node The DOM node that will contain the Source tree.
 @param systemID Specifies the base URI associated with node.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.dom.DOMSource.setNode(Node node)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the node that will represents a Source DOM tree.

 @param node The node that is to be transformed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.Node javax.xml.transform.dom.DOMSource.getNode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the node that represents a Source DOM tree.

 @return The node that is to be transformed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.xml.transform.dom.DOMSource.setSystemId(String systemID)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the base ID (URL or system ID) from where URLs
 will be resolved.

 @param systemID Base URL for this DOM tree.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.xml.transform.dom.DOMSource.getSystemId()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the base ID (URL or system ID) from where URLs
 will be resolved.

 @return Base URL for this DOM tree.

<!-- END DATA -->
