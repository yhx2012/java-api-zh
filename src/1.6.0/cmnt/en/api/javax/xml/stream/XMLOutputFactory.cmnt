<!-- BEGIN KEY -->
public abstract class javax.xml.stream.XMLOutputFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 Defines an abstract implementation of a factory for 
 getting XMLEventWriters and XMLStreamWriters.

 The following table defines the standard properties of this specification.  
 Each property varies in the level of support required by each implementation.
 The level of support required is described in the 'Required' column.

     <table border="2" rules="all" cellpadding="4">
     <thead>
      <tr>
        <th align="center" colspan="2">
          Configuration parameters
        </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th>Property Name</th>
        <th>Behavior</th>
        <th>Return type</th>
        <th>Default Value</th>
        <th>Required</th>
              </tr>
         <tr><td>javax.xml.stream.isRepairingNamespaces</td><td>defaults prefixes on the output side</td><td>Boolean</td><td>False</td><td>Yes</td></tr>
      </tbody>
   </table>

 <p>The following paragraphs describe the namespace and prefix repair algorithm:</p>

 <p>The property can be set with the following code line:
 <code>setProperty("javax.xml.stream.isRepairingNamespaces",new Boolean(true|false));</code></p>
 
 <p>This property specifies that the writer default namespace prefix declarations. 
 The default value is false. </p>

 <p>If a writer isRepairingNamespaces it will create a namespace declaration
 on the current StartElement for
 any attribute that does not 
 currently have a namespace declaration in scope.  If the StartElement
 has a uri but no prefix specified a prefix will be assigned, if the prefix
 has not been declared in a parent of the current StartElement it will be declared
 on the current StartElement.  If the defaultNamespace is bound and in scope
 and the default namespace matches the URI of the attribute or StartElement
 QName no prefix will be assigned.</p>

 <p>If an element or attribute name has a prefix, but is not 
 bound to any namespace URI, then the prefix will be removed 
 during serialization.</p> 

 <p>If element and/or attribute names in the same start or 
 empty-element tag are bound to different namespace URIs and 
 are using the same prefix then the element or the first 
 occurring attribute retains the original prefix and the 
 following attributes have their prefixes replaced with a 
 new prefix that is bound to the namespace URIs of those 
 attributes. </p>

 <p>If an element or attribute name uses a prefix that is 
 bound to a different URI than that inherited from the 
 namespace context of the parent of that element and there 
 is no namespace declaration in the context of the current 
 element then such a namespace declaration is added. </p>

 <p>If an element or attribute name is bound to a prefix and 
 there is a namespace declaration that binds that prefix 
 to a different URI then that namespace declaration is 
 either removed if the correct mapping is inherited from 
 the parent context of that element, or changed to the 
 namespace URI of the element or attribute using that prefix.</p> 

 @version 1.0 
 @author Copyright (c) 2003 by BEA Systems. All Rights Reserved.
 @see XMLInputFactory
 @see XMLEventWriter
 @see XMLStreamWriter
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.stream.XMLOutputFactory.IS_REPAIRING_NAMESPACES
<!-- END KEY -->
<!-- BEGIN DATA -->

 Property used to set prefix defaulting on the output side 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.stream.XMLOutputFactory javax.xml.stream.XMLOutputFactory.newInstance() throws javax.xml.stream.FactoryConfigurationError
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new instance of the factory.
 @throws FactoryConfigurationError if an instance of this factory cannot be loaded

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.stream.XMLInputFactory javax.xml.stream.XMLOutputFactory.newInstance(String factoryId, ClassLoader classLoader) throws javax.xml.stream.FactoryConfigurationError
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new instance of the factory. 

 @param factoryId             Name of the factory to find, same as
                              a property name
 @param classLoader           classLoader to use
 @return the factory implementation
 @throws FactoryConfigurationError if an instance of this factory cannot be loaded

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamWriter javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(Writer stream) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLStreamWriter that writes to a writer
 @param stream the writer to write to
 @throws XMLStreamException

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamWriter javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(OutputStream stream) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLStreamWriter that writes to a stream
 @param stream the stream to write to
 @throws XMLStreamException

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamWriter javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(OutputStream stream, String encoding) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLStreamWriter that writes to a stream
 @param stream the stream to write to
 @param encoding the encoding to use
 @throws XMLStreamException

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamWriter javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(Result result) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLStreamWriter that writes to a JAXP result.  This method is optional.
 @param result the result to write to
 @throws UnsupportedOperationException if this method is not 
 supported by this XMLOutputFactory
 @throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventWriter javax.xml.stream.XMLOutputFactory.createXMLEventWriter(Result result) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLEventWriter that writes to a JAXP result.  This method is optional.
 @param result the result to write to
 @throws UnsupportedOperationException if this method is not 
 supported by this XMLOutputFactory
 @throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventWriter javax.xml.stream.XMLOutputFactory.createXMLEventWriter(OutputStream stream) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLEventWriter that writes to a stream
 @param stream the stream to write to
 @throws XMLStreamException

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventWriter javax.xml.stream.XMLOutputFactory.createXMLEventWriter(OutputStream stream, String encoding) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLEventWriter that writes to a stream
 @param stream the stream to write to
 @param encoding the encoding to use
 @throws XMLStreamException

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventWriter javax.xml.stream.XMLOutputFactory.createXMLEventWriter(Writer stream) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLEventWriter that writes to a writer
 @param stream the stream to write to
 @throws XMLStreamException

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.stream.XMLOutputFactory.setProperty(String name, Object value) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Allows the user to set specific features/properties on the underlying implementation. 
 @param name The name of the property
 @param value The value of the property
 @throws java.lang.IllegalArgumentException if the property is not supported

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.Object javax.xml.stream.XMLOutputFactory.getProperty(String name) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get a feature/property on the underlying implementation
 @param name The name of the property
 @return The value of the property
 @throws java.lang.IllegalArgumentException if the property is not supported

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.xml.stream.XMLOutputFactory.isPropertySupported(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Query the set of properties that this factory supports.

 @param name The name of the property (may not be null)
 @return true if the property is supported and false otherwise

<!-- END DATA -->
