<!-- BEGIN KEY -->
public abstract class javax.xml.stream.XMLEventFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 This interface defines a utility class for creating instances of
 XMLEvents
 @version 1.0
 @author Copyright (c) 2003 by BEA Systems. All Rights Reserved.
 @see javax.xml.stream.events.StartElement
 @see javax.xml.stream.events.EndElement
 @see javax.xml.stream.events.ProcessingInstruction
 @see javax.xml.stream.events.Comment
 @see javax.xml.stream.events.Characters
 @see javax.xml.stream.events.StartDocument
 @see javax.xml.stream.events.EndDocument
 @see javax.xml.stream.events.DTD
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.stream.XMLEventFactory javax.xml.stream.XMLEventFactory.newInstance() throws javax.xml.stream.FactoryConfigurationError
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new instance of the factory 
 @throws FactoryConfigurationError if an instance of this factory cannot be loaded

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.stream.XMLEventFactory javax.xml.stream.XMLEventFactory.newInstance(String factoryId, ClassLoader classLoader) throws javax.xml.stream.FactoryConfigurationError
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new instance of the factory 

 @param factoryId             Name of the factory to find, same as
                              a property name
 @param classLoader           classLoader to use
 @return the factory implementation
 @throws FactoryConfigurationError if an instance of this factory cannot be loaded

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.stream.XMLEventFactory.setLocation(Location location)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method allows setting of the Location on each event that
 is created by this factory.  The values are copied by value into
 the events created by this factory.  To reset the location 
 information set the location to null.
 @param location the location to set on each event created

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.Attribute javax.xml.stream.XMLEventFactory.createAttribute(String prefix, String namespaceURI, String localName, String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new Attribute
 @param prefix the prefix of this attribute, may not be null
 @param namespaceURI the attribute value is set to this value, may not be null
 @param localName the local name of the XML name of the attribute, localName cannot be null
 @param value the attribute value to set, may not be null
 @return the Attribute with specified values

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.Attribute javax.xml.stream.XMLEventFactory.createAttribute(String localName, String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new Attribute
 @param localName the local name of the XML name of the attribute, localName cannot be null
 @param value the attribute value to set, may not be null
 @return the Attribute with specified values

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.Attribute javax.xml.stream.XMLEventFactory.createAttribute(QName name, String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new Attribute
 @param name the qualified name of the attribute, may not be null
 @param value the attribute value to set, may not be null
 @return the Attribute with specified values

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.Namespace javax.xml.stream.XMLEventFactory.createNamespace(String namespaceURI)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new default Namespace
 @param namespaceURI the default namespace uri
 @return the Namespace with the specified value

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.Namespace javax.xml.stream.XMLEventFactory.createNamespace(String prefix, String namespaceUri)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new Namespace
 @param prefix the prefix of this namespace, may not be null
 @param namespaceUri the attribute value is set to this value, may not be null
 @return the Namespace with the specified values

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.StartElement javax.xml.stream.XMLEventFactory.createStartElement(QName name, java.util.Iterator attributes, java.util.Iterator namespaces)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new StartElement.  Namespaces can be added to this StartElement
 by passing in an Iterator that walks over a set of Namespace interfaces.
 Attributes can be added to this StartElement by passing an iterator 
 that walks over a set of Attribute interfaces.

 @param name the qualified name of the attribute, may not be null
 @param attributes an optional unordered set of objects that 
 implement Attribute to add to the new StartElement, may be null
 @param namespaces an optional unordered set of objects that 
 implement Namespace to add to the new StartElement, may be null
 @return an instance of the requested StartElement

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.StartElement javax.xml.stream.XMLEventFactory.createStartElement(String prefix, String namespaceUri, String localName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new StartElement.  This defaults the NamespaceContext to
 an empty NamespaceContext.  Querying this event for its namespaces or
 attributes will result in an empty iterator being returned.

 @param namespaceUri the uri of the QName of the new StartElement
 @param localName the local name of the QName of the new StartElement
 @param prefix the prefix of the QName of the new StartElement
 @return an instance of the requested StartElement

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.StartElement javax.xml.stream.XMLEventFactory.createStartElement(String prefix, String namespaceUri, String localName, java.util.Iterator attributes, java.util.Iterator namespaces)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new StartElement.  Namespaces can be added to this StartElement
 by passing in an Iterator that walks over a set of Namespace interfaces.
 Attributes can be added to this StartElement by passing an iterator 
 that walks over a set of Attribute interfaces.

 @param namespaceUri the uri of the QName of the new StartElement
 @param localName the local name of the QName of the new StartElement
 @param prefix the prefix of the QName of the new StartElement
 @param attributes an unordered set of objects that implement 
 Attribute to add to the new StartElement
 @param namespaces an unordered set of objects that implement 
 Namespace to add to the new StartElement
 @return an instance of the requested StartElement

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.StartElement javax.xml.stream.XMLEventFactory.createStartElement(String prefix, String namespaceUri, String localName, java.util.Iterator attributes, java.util.Iterator namespaces, NamespaceContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new StartElement.  Namespaces can be added to this StartElement
 by passing in an Iterator that walks over a set of Namespace interfaces.
 Attributes can be added to this StartElement by passing an iterator 
 that walks over a set of Attribute interfaces.

 @param namespaceUri the uri of the QName of the new StartElement
 @param localName the local name of the QName of the new StartElement
 @param prefix the prefix of the QName of the new StartElement
 @param attributes an unordered set of objects that implement 
 Attribute to add to the new StartElement, may be null
 @param namespaces an unordered set of objects that implement 
 Namespace to add to the new StartElement, may be null
 @param context the namespace context of this element
 @return an instance of the requested StartElement

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.EndElement javax.xml.stream.XMLEventFactory.createEndElement(QName name, java.util.Iterator namespaces)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new EndElement
 @param name the qualified name of the EndElement
 @param namespaces an optional unordered set of objects that 
 implement Namespace that have gone out of scope, may be null
 @return an instance of the requested EndElement

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.EndElement javax.xml.stream.XMLEventFactory.createEndElement(String prefix, String namespaceUri, String localName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new EndElement
 @param namespaceUri the uri of the QName of the new StartElement
 @param localName the local name of the QName of the new StartElement
 @param prefix the prefix of the QName of the new StartElement
 @return an instance of the requested EndElement

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.EndElement javax.xml.stream.XMLEventFactory.createEndElement(String prefix, String namespaceUri, String localName, java.util.Iterator namespaces)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new EndElement
 @param namespaceUri the uri of the QName of the new StartElement
 @param localName the local name of the QName of the new StartElement
 @param prefix the prefix of the QName of the new StartElement
 @param namespaces an unordered set of objects that implement 
 Namespace that have gone out of scope, may be null
 @return an instance of the requested EndElement

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.Characters javax.xml.stream.XMLEventFactory.createCharacters(String content)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a Characters event, this method does not check if the content
 is all whitespace.  To create a space event use #createSpace(String)
 @param content the string to create
 @return a Characters event

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.Characters javax.xml.stream.XMLEventFactory.createCData(String content)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a Characters event with the CData flag set to true
 @param content the string to create
 @return a Characters event

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.Characters javax.xml.stream.XMLEventFactory.createSpace(String content)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a Characters event with the isSpace flag set to true
 @param content the content of the space to create
 @return a Characters event

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.Characters javax.xml.stream.XMLEventFactory.createIgnorableSpace(String content)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create an ignorable space
 @param content the space to create
 @return a Characters event

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.StartDocument javax.xml.stream.XMLEventFactory.createStartDocument()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates a new instance of a StartDocument event
 @return a StartDocument event

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.StartDocument javax.xml.stream.XMLEventFactory.createStartDocument(String encoding, String version, boolean standalone)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates a new instance of a StartDocument event

 @param encoding the encoding style
 @param version the XML version
 @param standalone the status of standalone may be set to "true" or "false"
 @return a StartDocument event

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.StartDocument javax.xml.stream.XMLEventFactory.createStartDocument(String encoding, String version)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates a new instance of a StartDocument event

 @param encoding the encoding style
 @param version the XML version
 @return a StartDocument event

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.StartDocument javax.xml.stream.XMLEventFactory.createStartDocument(String encoding)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates a new instance of a StartDocument event

 @param encoding the encoding style
 @return a StartDocument event

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.EndDocument javax.xml.stream.XMLEventFactory.createEndDocument()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new instance of an EndDocument event
 @return an EndDocument event

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.EntityReference javax.xml.stream.XMLEventFactory.createEntityReference(String name, EntityDeclaration declaration)
<!-- END KEY -->
<!-- BEGIN DATA -->
Creates a new instance of a EntityReference event

 @param name The name of the reference
 @param declaration the declaration for the event
 @return an EntityReference event

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.Comment javax.xml.stream.XMLEventFactory.createComment(String text)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a comment
 @param text The text of the comment
 a Comment event

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.ProcessingInstruction javax.xml.stream.XMLEventFactory.createProcessingInstruction(String target, String data)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a processing instruction
 @param target The target of the processing instruction
 @param data The text of the processing instruction
 @return a ProcessingInstruction event

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.events.DTD javax.xml.stream.XMLEventFactory.createDTD(String dtd)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a document type definition event
 This string contains the entire document type declaration that matches
 the doctypedecl in the XML 1.0 specification
 @param dtd the text of the document type definition
 @return a DTD event

<!-- END DATA -->
