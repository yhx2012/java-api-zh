<!-- BEGIN KEY -->
public abstract class javax.xml.stream.XMLInputFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 Defines an abstract implementation of a factory for getting streams.
 
 The following table defines the standard properties of this specification.  
 Each property varies in the level of support required by each implementation.
 The level of support required is described in the 'Required' column.

   <table border="2" rules="all" cellpadding="4">
    <thead>
      <tr>
        <th align="center" colspan="5">
          Configuration parameters
        </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th>Property Name</th>
        <th>Behavior</th>
        <th>Return type</th>
        <th>Default Value</th>
        <th>Required</th>
      </tr>
 <tr><td>javax.xml.stream.isValidating</td><td>Turns on/off implementation specific DTD validation</td><td>Boolean</td><td>False</td><td>No</td></tr>
 <tr><td>javax.xml.stream.isNamespaceAware</td><td>Turns on/off namespace processing for XML 1.0 support</td><td>Boolean</td><td>True</td><td>True (required) / False (optional)</td></tr>
 <tr><td>javax.xml.stream.isCoalescing</td><td>Requires the processor to coalesce adjacent character data</td><td>Boolean</td><td>False</td><td>Yes</td></tr>
 <tr><td>javax.xml.stream.isReplacingEntityReferences</td><td>replace internal entity references with their replacement text and report them as characters</td><td>Boolean</td><td>True</td><td>Yes</td></tr>
<tr><td>javax.xml.stream.isSupportingExternalEntities</td><td>Resolve external parsed entities</td><td>Boolean</td><td>Unspecified</td><td>Yes</td></tr>
<tr><td>javax.xml.stream.supportDTD</td><td>Use this property to request processors that do not support DTDs</td><td>Boolean</td><td>True</td><td>Yes</td></tr>
<tr><td>javax.xml.stream.reporter</td><td>sets/gets the impl of the XMLReporter </td><td>javax.xml.stream.XMLReporter</td><td>Null</td><td>Yes</td></tr>
<tr><td>javax.xml.stream.resolver</td><td>sets/gets the impl of the XMLResolver interface</td><td>javax.xml.stream.XMLResolver</td><td>Null</td><td>Yes</td></tr>
<tr><td>javax.xml.stream.allocator</td><td>sets/gets the impl of the XMLEventAllocator interface</td><td>javax.xml.stream.util.XMLEventAllocator</td><td>Null</td><td>Yes</td></tr>
    </tbody>
  </table>


 @version 1.0
 @author Copyright (c) 2003 by BEA Systems. All Rights Reserved.
 @see XMLOutputFactory
 @see XMLEventReader
 @see XMLStreamReader
 @see EventFilter
 @see XMLReporter
 @see XMLResolver
 @see javax.xml.stream.util.XMLEventAllocator
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.stream.XMLInputFactory.IS_NAMESPACE_AWARE
<!-- END KEY -->
<!-- BEGIN DATA -->

 The property used to turn on/off namespace support, 
 this is to support XML 1.0 documents,
 only the true setting must be supported

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.stream.XMLInputFactory.IS_VALIDATING
<!-- END KEY -->
<!-- BEGIN DATA -->

 The property used to turn on/off implementation specific validation 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.stream.XMLInputFactory.IS_COALESCING
<!-- END KEY -->
<!-- BEGIN DATA -->

 The property that requires the parser to coalesce adjacent character data sections 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.stream.XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES
<!-- END KEY -->
<!-- BEGIN DATA -->

 Requires the parser to replace internal 
 entity references with their replacement 
 text and report them as characters

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.stream.XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES
<!-- END KEY -->
<!-- BEGIN DATA -->

  The property that requires the parser to resolve external parsed entities

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.stream.XMLInputFactory.SUPPORT_DTD
<!-- END KEY -->
<!-- BEGIN DATA -->

  The property that requires the parser to support DTDs

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.stream.XMLInputFactory.REPORTER
<!-- END KEY -->
<!-- BEGIN DATA -->
 The property used to
 set/get the implementation of the XMLReporter interface 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.stream.XMLInputFactory.RESOLVER
<!-- END KEY -->
<!-- BEGIN DATA -->
 The property used to set/get the implementation of the XMLResolver

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.xml.stream.XMLInputFactory.ALLOCATOR
<!-- END KEY -->
<!-- BEGIN DATA -->
 The property used to set/get the implementation of the allocator

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory.newInstance() throws javax.xml.stream.FactoryConfigurationError
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new instance of the factory.
 This static method creates a new factory instance. 
 This method uses the following ordered lookup procedure to determine 
 the XMLInputFactory implementation class to load: 
 Use the javax.xml.stream.XMLInputFactory system property. 
 Use the properties file "lib/stax.properties" in the JRE directory. 
 This configuration file is in standard java.util.Properties format and contains 
 the fully qualified name of the implementation class with the key being the system property defined above. 
 Use the Services API (as detailed in the JAR specification), if available, to determine the classname. 
 The Services API will look for a classname in the file META-INF/services/javax.xml.stream.XMLInputFactory 
 in jars available to the runtime. 
 Platform default XMLInputFactory instance. 
 Once an application has obtained a reference to a XMLInputFactory 
 it can use the factory to configure and obtain stream instances. 

 @throws FactoryConfigurationError if an instance of this factory cannot be loaded

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory.newInstance(String factoryId, ClassLoader classLoader) throws javax.xml.stream.FactoryConfigurationError
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new instance of the factory 

 @param factoryId             Name of the factory to find, same as
                              a property name
 @param classLoader           classLoader to use
 @return the factory implementation
 @throws FactoryConfigurationError if an instance of this factory cannot be loaded

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamReader javax.xml.stream.XMLInputFactory.createXMLStreamReader(Reader reader) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLStreamReader from a reader
 @param reader the XML data to read from
 @throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamReader javax.xml.stream.XMLInputFactory.createXMLStreamReader(Source source) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLStreamReader from a JAXP source.  This method is optional.
 @param source the source to read from
 @throws UnsupportedOperationException if this method is not 
 supported by this XMLInputFactory
 @throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamReader javax.xml.stream.XMLInputFactory.createXMLStreamReader(InputStream stream) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLStreamReader from a java.io.InputStream
 @param stream the InputStream to read from
 @throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamReader javax.xml.stream.XMLInputFactory.createXMLStreamReader(InputStream stream, String encoding) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLStreamReader from a java.io.InputStream
 @param stream the InputStream to read from
 @param encoding the character encoding of the stream
 @throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamReader javax.xml.stream.XMLInputFactory.createXMLStreamReader(String systemId, InputStream stream) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLStreamReader from a java.io.InputStream
 @param systemId the system ID of the stream
 @param stream the InputStream to read from

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamReader javax.xml.stream.XMLInputFactory.createXMLStreamReader(String systemId, Reader reader) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLStreamReader from a java.io.InputStream
 @param systemId the system ID of the stream
 @param reader the InputStream to read from

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventReader javax.xml.stream.XMLInputFactory.createXMLEventReader(Reader reader) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLEventReader from a reader
 @param reader the XML data to read from
 @throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventReader javax.xml.stream.XMLInputFactory.createXMLEventReader(String systemId, Reader reader) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLEventReader from a reader
 @param systemId the system ID of the input 
 @param reader the XML data to read from
 @throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventReader javax.xml.stream.XMLInputFactory.createXMLEventReader(XMLStreamReader reader) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLEventReader from an XMLStreamReader.  After being used
 to construct the XMLEventReader instance returned from this method
 the XMLStreamReader must not be used.  
 @param reader the XMLStreamReader to read from (may not be modified)
 @return a new XMLEventReader
 @throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventReader javax.xml.stream.XMLInputFactory.createXMLEventReader(Source source) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLEventReader from a JAXP source.
 Support of this method is optional.
 @param source the source to read from
 @throws UnsupportedOperationException if this method is not 
 supported by this XMLInputFactory

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventReader javax.xml.stream.XMLInputFactory.createXMLEventReader(InputStream stream) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLEventReader from a java.io.InputStream
 @param stream the InputStream to read from
 @throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventReader javax.xml.stream.XMLInputFactory.createXMLEventReader(InputStream stream, String encoding) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLEventReader from a java.io.InputStream
 @param stream the InputStream to read from
 @param encoding the character encoding of the stream
 @throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventReader javax.xml.stream.XMLInputFactory.createXMLEventReader(String systemId, InputStream stream) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new XMLEventReader from a java.io.InputStream
 @param systemId the system ID of the stream
 @param stream the InputStream to read from
 @throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLStreamReader javax.xml.stream.XMLInputFactory.createFilteredReader(XMLStreamReader reader, StreamFilter filter) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a filtered reader that wraps the filter around the reader
 @param reader the reader to filter
 @param filter the filter to apply to the reader
 @throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLEventReader javax.xml.stream.XMLInputFactory.createFilteredReader(XMLEventReader reader, EventFilter filter) throws javax.xml.stream.XMLStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a filtered event reader that wraps the filter around the event reader
 @param reader the event reader to wrap
 @param filter the filter to apply to the event reader
 @throws XMLStreamException 

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLResolver javax.xml.stream.XMLInputFactory.getXMLResolver()
<!-- END KEY -->
<!-- BEGIN DATA -->
 The resolver that will be set on any XMLStreamReader or XMLEventReader created 
 by this factory instance.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.stream.XMLInputFactory.setXMLResolver(XMLResolver resolver)
<!-- END KEY -->
<!-- BEGIN DATA -->
 The resolver that will be set on any XMLStreamReader or XMLEventReader created 
 by this factory instance.
 @param resolver the resolver to use to resolve references

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.XMLReporter javax.xml.stream.XMLInputFactory.getXMLReporter()
<!-- END KEY -->
<!-- BEGIN DATA -->
 The reporter that will be set on any XMLStreamReader or XMLEventReader created 
 by this factory instance.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.stream.XMLInputFactory.setXMLReporter(XMLReporter reporter)
<!-- END KEY -->
<!-- BEGIN DATA -->
 The reporter that will be set on any XMLStreamReader or XMLEventReader created 
 by this factory instance.
 @param reporter the resolver to use to report non fatal errors

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.stream.XMLInputFactory.setProperty(String name, Object value) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Allows the user to set specific feature/property on the underlying implementation. The underlying implementation
 is not required to support every setting of every property in the specification and may use IllegalArgumentException
 to signal that an unsupported property may not be set with the specified value.
 @param name The name of the property (may not be null)
 @param value The value of the property
 @throws java.lang.IllegalArgumentException if the property is not supported

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.Object javax.xml.stream.XMLInputFactory.getProperty(String name) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the value of a feature/property from the underlying implementation
 @param name The name of the property (may not be null)
 @return The value of the property
 @throws IllegalArgumentException if the property is not supported

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.xml.stream.XMLInputFactory.isPropertySupported(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Query the set of properties that this factory supports.

 @param name The name of the property (may not be null)
 @return true if the property is supported and false otherwise

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void javax.xml.stream.XMLInputFactory.setEventAllocator(XMLEventAllocator allocator)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set a user defined event allocator for events
 @param allocator the user defined allocator

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract javax.xml.stream.util.XMLEventAllocator javax.xml.stream.XMLInputFactory.getEventAllocator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the allocator used by streams created with this factory

<!-- END DATA -->
