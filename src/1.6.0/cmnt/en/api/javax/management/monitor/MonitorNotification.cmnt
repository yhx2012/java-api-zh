<!-- BEGIN KEY -->
public class javax.management.monitor.MonitorNotification extends javax.management.Notification
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides definitions of the notifications sent by monitor MBeans.
 <P>
 The notification source and a set of parameters concerning the monitor MBean's state
 need to be specified when creating a new object of this class.

 The list of notifications fired by the monitor MBeans is the following:

 <UL>
 <LI>Common to all kind of monitors:
     <UL>
     <LI>The observed object is not registered in the MBean server.
     <LI>The observed attribute is not contained in the observed object.
     <LI>The type of the observed attribute is not correct.
     <LI>Any exception (except the cases described above) occurs when trying to get the value of the observed attribute.
     </UL>
 <LI>Common to the counter and the gauge monitors:
     <UL>
     <LI>The threshold high or threshold low are not of the same type as the gauge (gauge monitors).
     <LI>The threshold or the offset or the modulus are not of the same type as the counter (counter monitors).
     </UL>
 <LI>Counter monitors only:
     <UL>
     <LI>The observed attribute has reached the threshold value.
     </UL>
 <LI>Gauge monitors only:
     <UL>
     <LI>The observed attribute has exceeded the threshold high value.
     <LI>The observed attribute has exceeded the threshold low value.
     </UL>
 <LI>String monitors only:
     <UL>
     <LI>The observed attribute has matched the "string to compare" value.
     <LI>The observed attribute has differed from the "string to compare" value.
     </UL>
 </UL>

 @version     4.23     11/17/05
 @author      Sun Microsystems, Inc

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.management.monitor.MonitorNotification.OBSERVED_OBJECT_ERROR
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notification type denoting that the observed object is not registered in the MBean server.
 This notification is fired by all kinds of monitors.
 <BR>The value of this notification type is <CODE>jmx.monitor.error.mbean</CODE>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.management.monitor.MonitorNotification.OBSERVED_ATTRIBUTE_ERROR
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notification type denoting that the observed attribute is not contained in the observed object.
 This notification is fired by all kinds of monitors.
 <BR>The value of this notification type is <CODE>jmx.monitor.error.attribute</CODE>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.management.monitor.MonitorNotification.OBSERVED_ATTRIBUTE_TYPE_ERROR
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notification type denoting that the type of the observed attribute is not correct.
 This notification is fired by all kinds of monitors.
 <BR>The value of this notification type is <CODE>jmx.monitor.error.type</CODE>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.management.monitor.MonitorNotification.THRESHOLD_ERROR
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notification type denoting that the type of the thresholds, offset or modulus is not correct.
 This notification is fired by counter and gauge monitors.
 <BR>The value of this notification type is <CODE>jmx.monitor.error.threshold</CODE>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.management.monitor.MonitorNotification.RUNTIME_ERROR
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notification type denoting that a non-predefined error type has occurred when trying to get the value of the observed attribute.
 This notification is fired by all kinds of monitors.
 <BR>The value of this notification type is <CODE>jmx.monitor.error.runtime</CODE>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.management.monitor.MonitorNotification.THRESHOLD_VALUE_EXCEEDED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notification type denoting that the observed attribute has reached the threshold value.
 This notification is only fired by counter monitors.
 <BR>The value of this notification type is <CODE>jmx.monitor.counter.threshold</CODE>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.management.monitor.MonitorNotification.THRESHOLD_HIGH_VALUE_EXCEEDED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notification type denoting that the observed attribute has exceeded the threshold high value.
 This notification is only fired by gauge monitors.
 <BR>The value of this notification type is <CODE>jmx.monitor.gauge.high</CODE>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.management.monitor.MonitorNotification.THRESHOLD_LOW_VALUE_EXCEEDED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notification type denoting that the observed attribute has exceeded the threshold low value.
 This notification is only fired by gauge monitors.
 <BR>The value of this notification type is <CODE>jmx.monitor.gauge.low</CODE>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.management.monitor.MonitorNotification.STRING_TO_COMPARE_VALUE_MATCHED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notification type denoting that the observed attribute has matched the "string to compare" value.
 This notification is only fired by string monitors.
 <BR>The value of this notification type is <CODE>jmx.monitor.string.matches</CODE>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.management.monitor.MonitorNotification.STRING_TO_COMPARE_VALUE_DIFFERED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notification type denoting that the observed attribute has differed from the "string to compare" value.
 This notification is only fired by string monitors.
 <BR>The value of this notification type is <CODE>jmx.monitor.string.differs</CODE>.

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.management.ObjectName javax.management.monitor.MonitorNotification.observedObject
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial Monitor notification observed object.

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.management.monitor.MonitorNotification.observedAttribute
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial Monitor notification observed attribute.

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Object javax.management.monitor.MonitorNotification.derivedGauge
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial Monitor notification derived gauge.

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Object javax.management.monitor.MonitorNotification.trigger
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial Monitor notification release mechanism.
         This value is used to keep the threshold/string (depending on the
         monitor type) that triggered off this notification.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.ObjectName javax.management.monitor.MonitorNotification.getObservedObject()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the observed object of this monitor notification.

 @return The observed object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.monitor.MonitorNotification.getObservedAttribute()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the observed attribute of this monitor notification.

 @return The observed attribute.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.monitor.MonitorNotification.getDerivedGauge()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the derived gauge of this monitor notification.

 @return The derived gauge.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.monitor.MonitorNotification.getTrigger()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the threshold/string (depending on the monitor type) that triggered off this monitor notification.

 @return The trigger.

<!-- END DATA -->
