<!-- BEGIN KEY -->
public class javax.management.monitor.CounterMonitor extends javax.management.monitor.Monitor implements javax.management.monitor.CounterMonitorMBean
<!-- END KEY -->
<!-- BEGIN DATA -->
 Defines a monitor MBean designed to observe the values of a counter
 attribute.

 <P> A counter monitor sends a {@link
 MonitorNotification#THRESHOLD_VALUE_EXCEEDED threshold
 notification} when the value of the counter reaches or exceeds a
 threshold known as the comparison level.  The notify flag must be
 set to <CODE>true</CODE>.

 <P> In addition, an offset mechanism enables particular counting
 intervals to be detected.  If the offset value is not zero,
 whenever the threshold is triggered by the counter value reaching a
 comparison level, that comparison level is incremented by the
 offset value.  This is regarded as taking place instantaneously,
 that is, before the count is incremented.  Thus, for each level,
 the threshold triggers an event notification every time the count
 increases by an interval equal to the offset value.

 <P> If the counter can wrap around its maximum value, the modulus
 needs to be specified.  The modulus is the value at which the
 counter is reset to zero.

 <P> If the counter difference mode is used, the value of the
 derived gauge is calculated as the difference between the observed
 counter values for two successive observations.  If this difference
 is negative, the value of the derived gauge is incremented by the
 value of the modulus.  The derived gauge value (V[t]) is calculated
 using the following method:

 <UL>
 <LI>if (counter[t] - counter[t-GP]) is positive then
 V[t] = counter[t] - counter[t-GP]
 <LI>if (counter[t] - counter[t-GP]) is negative then
 V[t] = counter[t] - counter[t-GP] + MODULUS
 </UL>

 This implementation of the counter monitor requires the observed
 attribute to be of the type integer (<CODE>Byte</CODE>,
 <CODE>Integer</CODE>, <CODE>Short</CODE>, <CODE>Long</CODE>).

 @version     1.79     11/17/05
 @author      Sun Microsystems, Inc

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.monitor.CounterMonitor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Default constructor.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.monitor.CounterMonitor.start()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Starts the counter monitor.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.monitor.CounterMonitor.stop()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Stops the counter monitor.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Number javax.management.monitor.CounterMonitor.getDerivedGauge(ObjectName object)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the derived gauge of the specified object, if this object is
 contained in the set of observed MBeans, or <code>null</code> otherwise.

 @param object the name of the object whose derived gauge is to
 be returned.

 @return The derived gauge of the specified object.

 @since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized long javax.management.monitor.CounterMonitor.getDerivedGaugeTimeStamp(ObjectName object)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the derived gauge timestamp of the specified object, if
 this object is contained in the set of observed MBeans, or
 <code>0</code> otherwise.

 @param object the name of the object whose derived gauge
 timestamp is to be returned.

 @return The derived gauge timestamp of the specified object.

 @since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Number javax.management.monitor.CounterMonitor.getThreshold(ObjectName object)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the current threshold value of the specified object, if
 this object is contained in the set of observed MBeans, or
 <code>null</code> otherwise.

 @param object the name of the object whose threshold is to be
 returned.

 @return The threshold value of the specified object.

 @since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Number javax.management.monitor.CounterMonitor.getInitThreshold()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the initial threshold value common to all observed objects.

 @return The initial threshold.

 @see #setInitThreshold

 @since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.monitor.CounterMonitor.setInitThreshold(Number value) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the initial threshold value common to all observed objects.

 <BR>The current threshold of every object in the set of
 observed MBeans is updated consequently.

 @param value The initial threshold value.

 @exception IllegalArgumentException The specified
 threshold is null or the threshold value is less than zero.

 @see #getInitThreshold

 @since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Number javax.management.monitor.CounterMonitor.getDerivedGauge()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the derived gauge of the first object in the set of
 observed MBeans.

 @return The derived gauge.

 @deprecated As of JMX 1.2, replaced by
 {@link #getDerivedGauge(ObjectName)}

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized long javax.management.monitor.CounterMonitor.getDerivedGaugeTimeStamp()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the derived gauge timestamp of the first object in the set
 of observed MBeans.

 @return The derived gauge timestamp.

 @deprecated As of JMX 1.2, replaced by
 {@link #getDerivedGaugeTimeStamp(ObjectName)}

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Number javax.management.monitor.CounterMonitor.getThreshold()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the threshold value of the first object in the set of
 observed MBeans.

 @return The threshold value.

 @see #setThreshold

 @deprecated As of JMX 1.2, replaced by {@link #getThreshold(ObjectName)}

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.monitor.CounterMonitor.setThreshold(Number value) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the initial threshold value.

 @param value The initial threshold value.

 @exception IllegalArgumentException The specified threshold is
 null or the threshold value is less than zero.

 @see #getThreshold()

 @deprecated As of JMX 1.2, replaced by {@link #setInitThreshold}

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Number javax.management.monitor.CounterMonitor.getOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the offset value common to all observed MBeans.

 @return The offset value.

 @see #setOffset

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.monitor.CounterMonitor.setOffset(Number value) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the offset value common to all observed MBeans.

 @param value The offset value.

 @exception IllegalArgumentException The specified
 offset is null or the offset value is less than zero.

 @see #getOffset

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Number javax.management.monitor.CounterMonitor.getModulus()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the modulus value common to all observed MBeans.

 @see #setModulus

 @return The modulus value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.monitor.CounterMonitor.setModulus(Number value) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the modulus value common to all observed MBeans.

 @param value The modulus value.

 @exception IllegalArgumentException The specified
 modulus is null or the modulus value is less than zero.

 @see #getModulus

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean javax.management.monitor.CounterMonitor.getNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the notification's on/off switch value common to all
 observed MBeans.

 @return <CODE>true</CODE> if the counter monitor notifies when
 exceeding the threshold, <CODE>false</CODE> otherwise.

 @see #setNotify

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.monitor.CounterMonitor.setNotify(boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the notification's on/off switch value common to all
 observed MBeans.

 @param value The notification's on/off switch value.

 @see #getNotify

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean javax.management.monitor.CounterMonitor.getDifferenceMode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the difference mode flag value common to all observed MBeans.

 @return <CODE>true</CODE> if the difference mode is used,
 <CODE>false</CODE> otherwise.

 @see #setDifferenceMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.monitor.CounterMonitor.setDifferenceMode(boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the difference mode flag value common to all observed MBeans.

 @param value The difference mode flag value.

 @see #getDifferenceMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.MBeanNotificationInfo[] javax.management.monitor.CounterMonitor.getNotificationInfo()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <CODE>NotificationInfo</CODE> object containing the
 name of the Java class of the notification and the notification
 types sent by the counter monitor.

<!-- END DATA -->
