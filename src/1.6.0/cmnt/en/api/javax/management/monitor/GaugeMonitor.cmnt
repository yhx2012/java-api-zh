<!-- BEGIN KEY -->
public class javax.management.monitor.GaugeMonitor extends javax.management.monitor.Monitor implements javax.management.monitor.GaugeMonitorMBean
<!-- END KEY -->
<!-- BEGIN DATA -->
 Defines a monitor MBean designed to observe the values of a gauge attribute.

 <P> A gauge monitor observes an attribute that is continuously
 variable with time. A gauge monitor sends notifications as
 follows:

 <UL>

 <LI> if the attribute value is increasing and becomes equal to or
 greater than the high threshold value, a {@link
 MonitorNotification#THRESHOLD_HIGH_VALUE_EXCEEDED threshold high
 notification} is sent. The notify high flag must be set to
 <CODE>true</CODE>.

 <BR>Subsequent crossings of the high threshold value do not cause
 further notifications unless the attribute value becomes equal to
 or less than the low threshold value.</LI>

 <LI> if the attribute value is decreasing and becomes equal to or
 less than the low threshold value, a {@link
 MonitorNotification#THRESHOLD_LOW_VALUE_EXCEEDED threshold low
 notification} is sent. The notify low flag must be set to
 <CODE>true</CODE>.

 <BR>Subsequent crossings of the low threshold value do not cause
 further notifications unless the attribute value becomes equal to
 or greater than the high threshold value.</LI>

 </UL>

 This provides a hysteresis mechanism to avoid repeated triggering
 of notifications when the attribute value makes small oscillations
 around the high or low threshold value.

 <P> If the gauge difference mode is used, the value of the derived
 gauge is calculated as the difference between the observed gauge
 values for two successive observations.

 <BR>The derived gauge value (V[t]) is calculated using the following method:
 <UL>
 <LI>V[t] = gauge[t] - gauge[t-GP]</LI>
 </UL>

 This implementation of the gauge monitor requires the observed
 attribute to be of the type integer or floating-point
 (<CODE>Byte</CODE>, <CODE>Integer</CODE>, <CODE>Short</CODE>,
 <CODE>Long</CODE>, <CODE>Float</CODE>, <CODE>Double</CODE>).

 @version     1.78     11/17/05
 @author      Sun Microsystems, Inc

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.monitor.GaugeMonitor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Default constructor.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.monitor.GaugeMonitor.start()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Starts the gauge monitor.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.monitor.GaugeMonitor.stop()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Stops the gauge monitor.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Number javax.management.monitor.GaugeMonitor.getDerivedGauge(ObjectName object)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the derived gauge of the specified object, if this object is
 contained in the set of observed MBeans, or <code>null</code> otherwise.

 @param object the name of the MBean.

 @return The derived gauge of the specified object.

 @since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized long javax.management.monitor.GaugeMonitor.getDerivedGaugeTimeStamp(ObjectName object)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the derived gauge timestamp of the specified object, if
 this object is contained in the set of observed MBeans, or
 <code>0</code> otherwise.

 @param object the name of the object whose derived gauge
 timestamp is to be returned.

 @return The derived gauge timestamp of the specified object.

 @since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Number javax.management.monitor.GaugeMonitor.getDerivedGauge()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the derived gauge of the first object in the set of
 observed MBeans.

 @return The derived gauge.

 @deprecated As of JMX 1.2, replaced by
 {@link #getDerivedGauge(ObjectName)}

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized long javax.management.monitor.GaugeMonitor.getDerivedGaugeTimeStamp()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the derived gauge timestamp of the first object in the set
 of observed MBeans.

 @return The derived gauge timestamp.

 @deprecated As of JMX 1.2, replaced by
 {@link #getDerivedGaugeTimeStamp(ObjectName)}

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Number javax.management.monitor.GaugeMonitor.getHighThreshold()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the high threshold value common to all observed MBeans.

 @return The high threshold value.

 @see #setThresholds

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Number javax.management.monitor.GaugeMonitor.getLowThreshold()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the low threshold value common to all observed MBeans.

 @return The low threshold value.

 @see #setThresholds

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.monitor.GaugeMonitor.setThresholds(Number highValue, Number lowValue) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the high and the low threshold values common to all
 observed MBeans.

 @param highValue The high threshold value.
 @param lowValue The low threshold value.

 @exception IllegalArgumentException The specified high/low
 threshold is null or the low threshold is greater than the high
 threshold or the high threshold and the low threshold are not
 of the same type.

 @see #getHighThreshold
 @see #getLowThreshold

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean javax.management.monitor.GaugeMonitor.getNotifyHigh()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the high notification's on/off switch value common to all
 observed MBeans.

 @return <CODE>true</CODE> if the gauge monitor notifies when
 exceeding the high threshold, <CODE>false</CODE> otherwise.

 @see #setNotifyHigh

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.monitor.GaugeMonitor.setNotifyHigh(boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the high notification's on/off switch value common to all
 observed MBeans.

 @param value The high notification's on/off switch value.

 @see #getNotifyHigh

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean javax.management.monitor.GaugeMonitor.getNotifyLow()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the low notification's on/off switch value common to all
 observed MBeans.

 @return <CODE>true</CODE> if the gauge monitor notifies when
 exceeding the low threshold, <CODE>false</CODE> otherwise.

 @see #setNotifyLow

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.monitor.GaugeMonitor.setNotifyLow(boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the low notification's on/off switch value common to all
 observed MBeans.

 @param value The low notification's on/off switch value.

 @see #getNotifyLow

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean javax.management.monitor.GaugeMonitor.getDifferenceMode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the difference mode flag value common to all observed MBeans.

 @return <CODE>true</CODE> if the difference mode is used,
 <CODE>false</CODE> otherwise.

 @see #setDifferenceMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.monitor.GaugeMonitor.setDifferenceMode(boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the difference mode flag value common to all observed MBeans.

 @param value The difference mode flag value.

 @see #getDifferenceMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.MBeanNotificationInfo[] javax.management.monitor.GaugeMonitor.getNotificationInfo()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <CODE>NotificationInfo</CODE> object containing the
 name of the Java class of the notification and the notification
 types sent by the gauge monitor.

<!-- END DATA -->
