<!-- BEGIN KEY -->
public interface javax.management.monitor.CounterMonitorMBean extends javax.management.monitor.MonitorMBean
<!-- END KEY -->
<!-- BEGIN DATA -->
 Exposes the remote management interface of the counter monitor MBean.

 @version     4.27     11/17/05
 @author      Sun Microsystems, Inc

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.management.monitor.CounterMonitorMBean.getDerivedGauge()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the derived gauge.

 @return The derived gauge.
 @deprecated As of JMX 1.2, replaced by {@link #getDerivedGauge(ObjectName)}

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.management.monitor.CounterMonitorMBean.getDerivedGaugeTimeStamp()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the derived gauge timestamp.

 @return The derived gauge timestamp.
 @deprecated As of JMX 1.2, replaced by {@link #getDerivedGaugeTimeStamp(ObjectName)}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.management.monitor.CounterMonitorMBean.getThreshold()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the threshold value.

 @return The threshold value.

 @see #setThreshold(Number)

 @deprecated As of JMX 1.2, replaced by {@link #getThreshold(ObjectName)}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.monitor.CounterMonitorMBean.setThreshold(Number value) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the threshold value.

 @see #getThreshold()

 @param value The threshold value.
 @exception java.lang.IllegalArgumentException The specified threshold is null or the threshold value is less than zero.
 @deprecated As of JMX 1.2, replaced by {@link #setInitThreshold}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.management.monitor.CounterMonitorMBean.getDerivedGauge(ObjectName object)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the derived gauge for the specified MBean.

 @param object the MBean for which the derived gauge is to be returned
 @return The derived gauge for the specified MBean if this MBean is in the
         set of observed MBeans, or <code>null</code> otherwise.

 @since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public long javax.management.monitor.CounterMonitorMBean.getDerivedGaugeTimeStamp(ObjectName object)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the derived gauge timestamp for the specified MBean.

 @param object the MBean for which the derived gauge timestamp is to be returned
 @return The derived gauge timestamp for the specified MBean if this MBean
         is in the set of observed MBeans, or <code>null</code> otherwise.

 @since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.management.monitor.CounterMonitorMBean.getThreshold(ObjectName object)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the threshold value for the specified MBean.

 @param object the MBean for which the threshold value is to be returned
 @return The threshold value for the specified MBean if this MBean
         is in the set of observed MBeans, or <code>null</code> otherwise.

 @see #setThreshold

 @since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.management.monitor.CounterMonitorMBean.getInitThreshold()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the initial threshold value common to all observed objects.

 @return The initial threshold value.

 @see #setInitThreshold

 @since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.monitor.CounterMonitorMBean.setInitThreshold(Number value) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the initial threshold value common to all observed MBeans.

 @param value The initial threshold value.
 @exception java.lang.IllegalArgumentException The specified
 threshold is null or the threshold value is less than zero.

 @see #getInitThreshold

 @since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.management.monitor.CounterMonitorMBean.getOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the offset value.

 @see #setOffset(Number)

 @return The offset value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.monitor.CounterMonitorMBean.setOffset(Number value) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the offset value.

 @param value The offset value.
 @exception java.lang.IllegalArgumentException The specified
 offset is null or the offset value is less than zero.

 @see #getOffset()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Number javax.management.monitor.CounterMonitorMBean.getModulus()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the modulus value.

 @return The modulus value.

 @see #setModulus

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.monitor.CounterMonitorMBean.setModulus(Number value) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the modulus value.

 @param value The modulus value.
 @exception java.lang.IllegalArgumentException The specified
 modulus is null or the modulus value is less than zero.

 @see #getModulus

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.monitor.CounterMonitorMBean.getNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the notification's on/off switch value.

 @return <CODE>true</CODE> if the counter monitor notifies when
 exceeding the threshold, <CODE>false</CODE> otherwise.

 @see #setNotify

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.monitor.CounterMonitorMBean.setNotify(boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the notification's on/off switch value.

 @param value The notification's on/off switch value.

 @see #getNotify

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.monitor.CounterMonitorMBean.getDifferenceMode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the difference mode flag value.

 @return <CODE>true</CODE> if the difference mode is used,
 <CODE>false</CODE> otherwise.

 @see #setDifferenceMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.monitor.CounterMonitorMBean.setDifferenceMode(boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the difference mode flag value.

 @param value The difference mode flag value.

 @see #getDifferenceMode

<!-- END DATA -->
