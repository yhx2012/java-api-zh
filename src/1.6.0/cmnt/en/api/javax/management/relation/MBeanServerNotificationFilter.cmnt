<!-- BEGIN KEY -->
public class javax.management.relation.MBeanServerNotificationFilter extends javax.management.NotificationFilterSupport
<!-- END KEY -->
<!-- BEGIN DATA -->
 Filter for {@link MBeanServerNotification}.
 This filter filters MBeanServerNotification notifications by
 selecting the ObjectNames of interest and the operations (registration,
 unregistration, both) of interest (corresponding to notification
 types).

 <p>The <b>serialVersionUID</b> of this class is <code>2605900539589789736L</code>.
 
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] javax.management.relation.MBeanServerNotificationFilter.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serialField selectedNames List List of {@link ObjectName}s of interest
         <ul>
         <li><code>null</code> means that all {@link ObjectName}s are implicitly selected
         (check for explicit deselections)</li>
         <li>Empty vector means that no {@link ObjectName} is explicitly selected</li>
         </ul>
 @serialField deselectedNames List List of {@link ObjectName}s with no interest
         <ul>
         <li><code>null</code> means that all {@link ObjectName}s are implicitly deselected 
         (check for explicit selections))</li>
         <li>Empty vector means that no {@link ObjectName} is explicitly deselected</li>
         </ul>

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.MBeanServerNotificationFilter()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a filter selecting all MBeanServerNotification notifications for
 all ObjectNames.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.relation.MBeanServerNotificationFilter.disableAllObjectNames()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Disables any MBeanServerNotification (all ObjectNames are
 deselected).

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.relation.MBeanServerNotificationFilter.disableObjectName(ObjectName objectName) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Disables MBeanServerNotifications concerning given ObjectName.

 @param objectName  ObjectName no longer of interest

 @exception IllegalArgumentException  if the given ObjectName is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.relation.MBeanServerNotificationFilter.enableAllObjectNames()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Enables all MBeanServerNotifications (all ObjectNames are selected).

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.relation.MBeanServerNotificationFilter.enableObjectName(ObjectName objectName) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Enables MBeanServerNotifications concerning given ObjectName.

 @param objectName  ObjectName of interest

 @exception IllegalArgumentException  if the given ObjectName is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.util.Vector<javax.management.ObjectName> javax.management.relation.MBeanServerNotificationFilter.getEnabledObjectNames()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets all the ObjectNames enabled.

 @return Vector of ObjectNames:
 <P>- null means all ObjectNames are implicitly selected, except the
 ObjectNames explicitly deselected
 <P>- empty means all ObjectNames are deselected, i.e. no ObjectName
 selected.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.util.Vector<javax.management.ObjectName> javax.management.relation.MBeanServerNotificationFilter.getDisabledObjectNames()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets all the ObjectNames disabled.

 @return Vector of ObjectNames:
 <P>- null means all ObjectNames are implicitly deselected, except the
 ObjectNames explicitly selected
 <P>- empty means all ObjectNames are selected, i.e. no ObjectName
 deselected.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean javax.management.relation.MBeanServerNotificationFilter.isNotificationEnabled(Notification notif) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked before sending the specified notification to the listener.
 <P>If:
 <P>- the ObjectName of the concerned MBean is selected (explicitly OR
 (implicitly and not explicitly deselected))
 <P>AND
 <P>- the type of the operation (registration or unregistration) is
 selected
 <P>then the notification is sent to the listener.

 @param notif  The notification to be sent.

 @return true if the notification has to be sent to the listener, false
 otherwise.

 @exception IllegalArgumentException  if null parameter

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.MBeanServerNotificationFilter.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Deserializes an {@link MBeanServerNotificationFilter} from an {@link ObjectInputStream}.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.MBeanServerNotificationFilter.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Serializes an {@link MBeanServerNotificationFilter} to an {@link ObjectOutputStream}.

<!-- END DATA -->
