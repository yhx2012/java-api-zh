<!-- BEGIN KEY -->
public class javax.management.relation.RoleInfo extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A RoleInfo object summarises a role in a relation type.

 <p>The <b>serialVersionUID</b> of this class is <code>2504952983494636987L</code>.
 
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int javax.management.relation.RoleInfo.ROLE_CARDINALITY_INFINITY
<!-- END KEY -->
<!-- BEGIN DATA -->
 To specify an unlimited cardinality.

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] javax.management.relation.RoleInfo.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serialField name String Role name
 @serialField isReadable boolean Read access mode: <code>true</code> if role is readable
 @serialField isWritable boolean Write access mode: <code>true</code> if role is writable
 @serialField description String Role description
 @serialField minDegree int Minimum degree (i.e. minimum number of referenced MBeans in corresponding role)
 @serialField maxDegree int Maximum degree (i.e. maximum number of referenced MBeans in corresponding role)
 @serialField referencedMBeanClassName String Name of class of MBean(s) expected to be referenced in corresponding role

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleInfo(String roleName, String mbeanClassName, boolean read, boolean write, int min, int max, String descr) throws java.lang.IllegalArgumentException, javax.management.relation.InvalidRoleInfoException, java.lang.ClassNotFoundException, javax.management.NotCompliantMBeanException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructor.

 @param roleName  name of the role.
 @param mbeanClassName  name of the class of MBean(s) expected to
 be referenced in corresponding role.  If an MBean <em>M</em> is in
 this role, then the MBean server must return true for
 {@link MBeanServer#isInstanceOf isInstanceOf(M, mbeanClassName)}.
 @param read  flag to indicate if the corresponding role
 can be read
 @param write  flag to indicate if the corresponding role
 can be set
 @param min  minimum degree for role, i.e. minimum number of
 MBeans to provide in corresponding role
 Must be less than or equal to <tt>max</tt>.
 (ROLE_CARDINALITY_INFINITY for unlimited)
 @param max  maximum degree for role, i.e. maximum number of
 MBeans to provide in corresponding role
 Must be greater than or equal to <tt>min</tt>
 (ROLE_CARDINALITY_INFINITY for unlimited)
 @param descr  description of the role (can be null)

 @exception IllegalArgumentException  if null parameter
 @exception InvalidRoleInfoException  if the minimum degree is
 greater than the maximum degree.
 @exception ClassNotFoundException As of JMX 1.2, this exception
 can no longer be thrown.  It is retained in the declaration of
 this class for compatibility with existing code.
 @exception NotCompliantMBeanException  if the class mbeanClassName
 is not a MBean class.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleInfo(String roleName, String mbeanClassName, boolean read, boolean write) throws java.lang.IllegalArgumentException, java.lang.ClassNotFoundException, javax.management.NotCompliantMBeanException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructor.

 @param roleName  name of the role
 @param mbeanClassName  name of the class of MBean(s) expected to
 be referenced in corresponding role.  If an MBean <em>M</em> is in
 this role, then the MBean server must return true for
 {@link MBeanServer#isInstanceOf isInstanceOf(M, mbeanClassName)}.
 @param read  flag to indicate if the corresponding role
 can be read
 @param write  flag to indicate if the corresponding role
 can be set

 <P>Minimum and maximum degrees defaulted to 1.
 <P>Description of role defaulted to null.

 @exception IllegalArgumentException  if null parameter
 @exception ClassNotFoundException As of JMX 1.2, this exception
 can no longer be thrown.  It is retained in the declaration of
 this class for compatibility with existing code.
 @exception NotCompliantMBeanException As of JMX 1.2, this
 exception can no longer be thrown.  It is retained in the
 declaration of this class for compatibility with existing code.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleInfo(String roleName, String mbeanClassName) throws java.lang.IllegalArgumentException, java.lang.ClassNotFoundException, javax.management.NotCompliantMBeanException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructor.

 @param roleName  name of the role
 @param mbeanClassName  name of the class of MBean(s) expected to
 be referenced in corresponding role.  If an MBean <em>M</em> is in
 this role, then the MBean server must return true for
 {@link MBeanServer#isInstanceOf isInstanceOf(M, mbeanClassName)}.

 <P>IsReadable and IsWritable defaulted to true.
 <P>Minimum and maximum degrees defaulted to 1.
 <P>Description of role defaulted to null.

 @exception IllegalArgumentException  if null parameter
 @exception ClassNotFoundException As of JMX 1.2, this exception
 can no longer be thrown.  It is retained in the declaration of
 this class for compatibility with existing code.
 @exception NotCompliantMBeanException As of JMX 1.2, this
 exception can no longer be thrown.  It is retained in the
 declaration of this class for compatibility with existing code.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleInfo(RoleInfo roleInfo) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copy constructor.

 @param roleInfo the <tt>RoleInfo</tt> instance to be copied.

 @exception IllegalArgumentException  if null parameter

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RoleInfo.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of the role.

 @return the name of the role.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.relation.RoleInfo.isReadable()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns read access mode for the role (true if it is readable).

 @return true if the role is readable.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.relation.RoleInfo.isWritable()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns write access mode for the role (true if it is writable).

 @return true if the role is writable.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RoleInfo.getDescription()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns description text for the role.

 @return the description of the role.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.relation.RoleInfo.getMinDegree()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns minimum degree for corresponding role reference.

 @return the minimum degree.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.relation.RoleInfo.getMaxDegree()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns maximum degree for corresponding role reference.

 @return the maximum degree.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RoleInfo.getRefMBeanClassName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Returns name of type of MBean expected to be referenced in
 corresponding role.</p>

 @return the name of the referenced type.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.relation.RoleInfo.checkMinDegree(int value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the <tt>value</tt> parameter is greater than or equal to
 the expected minimum degree, false otherwise.

 @param value  the value to be checked

 @return true if greater than or equal to minimum degree, false otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.relation.RoleInfo.checkMaxDegree(int value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the <tt>value</tt> parameter is lower than or equal to
 the expected maximum degree, false otherwise.

 @param value  the value to be checked

 @return true if lower than or equal to maximum degree, false otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RoleInfo.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string describing the role info.

 @return a description of the role info.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.RoleInfo.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Deserializes a {@link RoleInfo} from an {@link ObjectInputStream}.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.RoleInfo.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Serializes a {@link RoleInfo} to an {@link ObjectOutputStream}.

<!-- END DATA -->
