<!-- BEGIN KEY -->
public class javax.management.relation.RelationTypeSupport extends java.lang.Object implements javax.management.relation.RelationType
<!-- END KEY -->
<!-- BEGIN DATA -->
 A RelationTypeSupport object implements the RelationType interface.
 <P>It represents a relation type, providing role information for each role
 expected to be supported in every relation of that type.

 <P>A relation type includes a relation type name and a list of
 role infos (represented by RoleInfo objects).

 <P>A relation type has to be declared in the Relation Service:
 <P>- either using the createRelationType() method, where a RelationTypeSupport
 object will be created and kept in the Relation Service
 <P>- either using the addRelationType() method where the user has to create
 an object implementing the RelationType interface, and this object will be
 used as representing a relation type in the Relation Service.

 <p>The <b>serialVersionUID</b> of this class is <code>4611072955724144607L</code>.
 
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] javax.management.relation.RelationTypeSupport.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serialField typeName String Relation type name
 @serialField roleName2InfoMap Map {@link Map} holding the mapping:
              &lt;role name ({@link String})&gt; -&gt; &lt;role info ({@link RoleInfo} object)&gt;
 @serialField isInRelationService boolean Flag specifying whether the relation type has been declared in the
              Relation Service (so can no longer be updated)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RelationTypeSupport(String relationTypeName, javax.management.relation.RoleInfo[] roleInfoArray) throws java.lang.IllegalArgumentException, javax.management.relation.InvalidRelationTypeException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructor where all role definitions are dynamically created and
 passed as parameter.

 @param relationTypeName  Name of relation type
 @param roleInfoArray  List of role definitions (RoleInfo objects)

 @exception IllegalArgumentException  if null parameter
 @exception InvalidRelationTypeException  if:
 <P>- the same name has been used for two different roles
 <P>- no role info provided
 <P>- one null role info provided

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.management.relation.RelationTypeSupport(String relationTypeName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructor to be used for subclasses.

 @param relationTypeName  Name of relation type.

 @exception IllegalArgumentException  if null parameter.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RelationTypeSupport.getRelationTypeName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the relation type name.

 @return the relation type name.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<javax.management.relation.RoleInfo> javax.management.relation.RelationTypeSupport.getRoleInfos()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the list of role definitions (ArrayList of RoleInfo objects).

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleInfo javax.management.relation.RelationTypeSupport.getRoleInfo(String roleInfoName) throws java.lang.IllegalArgumentException, javax.management.relation.RoleInfoNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the role info (RoleInfo object) for the given role info name
 (null if not found).

 @param roleInfoName  role info name

 @return RoleInfo object providing role definition
 does not exist

 @exception IllegalArgumentException  if null parameter
 @exception RoleInfoNotFoundException  if no role info with that name in
 relation type.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.management.relation.RelationTypeSupport.addRoleInfo(RoleInfo roleInfo) throws java.lang.IllegalArgumentException, javax.management.relation.InvalidRelationTypeException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Add a role info.
 This method of course should not be used after the creation of the
 relation type, because updating it would invalidate that the relations
 created associated to that type still conform to it.
 Can throw a RuntimeException if trying to update a relation type
 declared in the Relation Service.

 @param roleInfo  role info to be added.

 @exception IllegalArgumentException  if null parameter.
 @exception InvalidRelationTypeException  if there is already a role
  info in current relation type with the same name.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.RelationTypeSupport.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Deserializes a {@link RelationTypeSupport} from an {@link ObjectInputStream}.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.RelationTypeSupport.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Serializes a {@link RelationTypeSupport} to an {@link ObjectOutputStream}.

<!-- END DATA -->
