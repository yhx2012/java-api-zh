<!-- BEGIN KEY -->
public class javax.management.relation.RoleUnresolvedList extends java.util.ArrayList
<!-- END KEY -->
<!-- BEGIN DATA -->
 A RoleUnresolvedList represents a list of RoleUnresolved objects,
 representing roles not retrieved from a relation due to a problem
 encountered when trying to access (read or write) the roles.

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleUnresolvedList()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an empty RoleUnresolvedList.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleUnresolvedList(int initialCapacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an empty RoleUnresolvedList with the initial capacity
 specified.

 @param initialCapacity  initial capacity

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleUnresolvedList(java.util.List<javax.management.relation.RoleUnresolved> list) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a {@code RoleUnresolvedList} containing the elements of the
 {@code List} specified, in the order in which they are returned by
 the {@code List}'s iterator. The {@code RoleUnresolvedList} instance has
 an initial capacity of 110% of the size of the {@code List}
 specified.

 @param list the {@code List} that defines the initial contents of
 the new {@code RoleUnresolvedList}.

 @exception IllegalArgumentException if the {@code list} parameter
 is {@code null} or if the {@code list} parameter contains any
 non-RoleUnresolved objects.

 @see ArrayList#ArrayList(java.util.Collection)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<javax.management.relation.RoleUnresolved> javax.management.relation.RoleUnresolvedList.asList()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return a view of this list as a {@code List<RoleUnresolved>}.
 Changes to the returned value are reflected by changes
 to the original {@code RoleUnresolvedList} and vice versa.

 @return a {@code List<RoleUnresolved>} whose contents
 reflect the contents of this {@code RoleUnresolvedList}.

 <p>If this method has ever been called on a given
 {@code RoleUnresolvedList} instance, a subsequent attempt to add
 an object to that instance which is not a {@code RoleUnresolved}
 will fail with an {@code IllegalArgumentException}. For compatibility
 reasons, a {@code RoleUnresolvedList} on which this method has never
 been called does allow objects other than {@code RoleUnresolved}s to
 be added.</p>

 @throws IllegalArgumentException if this {@code RoleUnresolvedList}
 contains an element that is not a {@code RoleUnresolved}.

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RoleUnresolvedList.add(RoleUnresolved role) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the RoleUnresolved specified as the last element of the list.

 @param role - the unresolved role to be added.

 @exception IllegalArgumentException  if the unresolved role is null.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RoleUnresolvedList.add(int index, RoleUnresolved role) throws java.lang.IllegalArgumentException, java.lang.IndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the unresolved role specified as an element at the position
 specified.
 Elements with an index greater than or equal to the current position are
 shifted up.

 @param index - The position in the list where the new
 RoleUnresolved object is to be inserted.
 @param role - The RoleUnresolved object to be inserted.

 @exception IllegalArgumentException  if the unresolved role is null.
 @exception IndexOutOfBoundsException if index is out of range
 (<code>index &lt; 0 || index &gt; size()</code>).

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RoleUnresolvedList.set(int index, RoleUnresolved role) throws java.lang.IllegalArgumentException, java.lang.IndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the element at the position specified to be the unresolved role
 specified.
 The previous element at that position is discarded.

 @param index - The position specified.
 @param role - The value to which the unresolved role element
 should be set.

 @exception IllegalArgumentException   if the unresolved role is null.
 @exception IndexOutOfBoundsException if index is out of range
 (<code>index &lt; 0 || index &gt;= size()</code>).

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.relation.RoleUnresolvedList.addAll(RoleUnresolvedList roleList) throws java.lang.IndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends all the elements in the RoleUnresolvedList specified to the end
 of the list, in the order in which they are returned by the Iterator of
 the RoleUnresolvedList specified.

 @param roleList - Elements to be inserted into the list
 (can be null).

 @return true if this list changed as a result of the call.

 @exception IndexOutOfBoundsException  if accessing with an index
 outside of the list.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.relation.RoleUnresolvedList.addAll(int index, RoleUnresolvedList roleList) throws java.lang.IllegalArgumentException, java.lang.IndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts all of the elements in the RoleUnresolvedList specified into
 this list, starting at the specified position, in the order in which
 they are returned by the Iterator of the RoleUnresolvedList specified.

 @param index - Position at which to insert the first element from the
 RoleUnresolvedList specified.
 @param roleList - Elements to be inserted into the list.

 @return true if this list changed as a result of the call.

 @exception IllegalArgumentException  if the role is null.
 @exception IndexOutOfBoundsException if index is out of range
 (<code>index &lt; 0 || index &gt; size()</code>).

<!-- END DATA -->
