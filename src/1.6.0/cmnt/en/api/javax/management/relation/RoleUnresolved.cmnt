<!-- BEGIN KEY -->
public class javax.management.relation.RoleUnresolved extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 Represents an unresolved role: a role not retrieved from a relation due
 to a problem. It provides the role name, value (if problem when trying to
 set the role) and an integer defining the problem (constants defined in
 RoleStatus).

 <p>The <b>serialVersionUID</b> of this class is <code>-48350262537070138L</code>.
 
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] javax.management.relation.RoleUnresolved.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
@serialField roleName String Role name 
  @serialField roleValue List Role value ({@link List} of {@link ObjectName} objects)
  @serialField problemType int Problem type

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.relation.RoleUnresolved(String name, java.util.List<javax.management.ObjectName> value, int pbType) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructor.

 @param name  name of the role
 @param value  value of the role (if problem when setting the
 role)
 @param pbType  type of problem (according to known problem types,
 listed as static final members).

 @exception IllegalArgumentException  if null parameter or incorrect
 problem type

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RoleUnresolved.getRoleName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves role name.

 @return the role name.

 @see #setRoleName

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<javax.management.ObjectName> javax.management.relation.RoleUnresolved.getRoleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves role value.

 @return an ArrayList of ObjectName objects, the one provided to be set
 in given role. Null if the unresolved role is returned for a read
 access.

 @see #setRoleValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.relation.RoleUnresolved.getProblemType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves problem type.

 @return an integer corresponding to a problem, those being described as
 static final members of current class.

 @see #setProblemType

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RoleUnresolved.setRoleName(String name) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets role name.

 @param name the new role name.

 @exception IllegalArgumentException  if null parameter

 @see #getRoleName

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RoleUnresolved.setRoleValue(java.util.List<javax.management.ObjectName> value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets role value.

 @param value  List of ObjectName objects for referenced
 MBeans not set in role.

 @see #getRoleValue

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.relation.RoleUnresolved.setProblemType(int pbType) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets problem type.

 @param pbType  integer corresponding to a problem. Must be one of
 those described as static final members of current class.

 @exception IllegalArgumentException  if incorrect problem type

 @see #getProblemType

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.relation.RoleUnresolved.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Clone this object.

 @return an independent clone.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.relation.RoleUnresolved.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return a string describing this object.

 @return a description of this RoleUnresolved object.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.RoleUnresolved.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Deserializes a {@link RoleUnresolved} from an {@link ObjectInputStream}.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.relation.RoleUnresolved.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Serializes a {@link RoleUnresolved} to an {@link ObjectOutputStream}.

<!-- END DATA -->
