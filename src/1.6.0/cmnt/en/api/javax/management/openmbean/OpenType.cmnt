<!-- BEGIN KEY -->
public abstract class javax.management.openmbean.OpenType extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>OpenType</code> class is the parent abstract class of all classes which describe the actual <i>open type</i>
 of open data values.
 <p>
 An <i>open type</i> is defined by:
 <ul>
  <li>the fully qualified Java class name of the open data values this type describes;
      note that only a limited set of Java classes is allowed for open data values
      (see {@link #ALLOWED_CLASSNAMES_LIST ALLOWED_CLASSNAMES_LIST}),</li>
  <li>its name,</li>
  <li>its description.</li>
 </ul>

 @param <T> the Java type that instances described by this type must
 have.  For example, {@link SimpleType#INTEGER} is a {@code
 SimpleType<Integer>} which is a subclass of {@code OpenType<Integer>},
 meaning that an attribute, parameter, or return value that is described
 as a {@code SimpleType.INTEGER} must have Java type
 {@link Integer}.

 @version     3.38  06/06/13
 @author      Sun Microsystems, Inc.

 @since 1.5
 @since.unbundled JMX 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.List<java.lang.String> javax.management.openmbean.OpenType.ALLOWED_CLASSNAMES_LIST
<!-- END KEY -->
<!-- BEGIN DATA -->
 List of the fully qualified names of the Java classes allowed for open
 data values. A multidimensional array of any one of these classes or
 their corresponding primitive types is also an allowed class for open
 data values.

       <pre>ALLOWED_CLASSNAMES_LIST = {
        "java.lang.Void",
        "java.lang.Boolean",
        "java.lang.Character",
        "java.lang.Byte",
        "java.lang.Short",
        "java.lang.Integer",
        "java.lang.Long",
        "java.lang.Float",
        "java.lang.Double",
        "java.lang.String",
        "java.math.BigDecimal",
        "java.math.BigInteger",
        "java.util.Date",
        "javax.management.ObjectName",
        CompositeData.class.getName(),
        TabularData.class.getName() } ;
       </pre>


<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String[] javax.management.openmbean.OpenType.ALLOWED_CLASSNAMES
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated Use {@link #ALLOWED_CLASSNAMES_LIST ALLOWED_CLASSNAMES_LIST} instead.

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.management.openmbean.OpenType.className
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial The fully qualified Java class name of open data values this
         type describes.

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.management.openmbean.OpenType.description
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial The type description (should not be null or empty).

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String javax.management.openmbean.OpenType.typeName
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial The name given to this type (should not be null or empty).

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.management.openmbean.OpenType(String className, String typeName, String description) throws javax.management.openmbean.OpenDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an <code>OpenType</code> instance (actually a subclass instance as <code>OpenType</code> is abstract),
 checking for the validity of the given parameters.
 The validity constraints are described below for each parameter.
 <br>&nbsp;
 @param  className  The fully qualified Java class name of the open data values this open type describes.
			  The valid Java class names allowed for open data values are listed in
			  {@link #ALLOWED_CLASSNAMES_LIST ALLOWED_CLASSNAMES_LIST}.
			  A multidimensional array of any one of these classes
                    or their corresponding primitive types is also an allowed class,
			  in which case the class name follows the rules defined by the method
			  {@link Class#getName() getName()} of <code>java.lang.Class</code>.
			  For example, a 3-dimensional array of Strings has for class name
			  &quot;<code>[[[Ljava.lang.String;</code>&quot; (without the quotes).
 <br>&nbsp;
 @param  typeName  The name given to the open type this instance represents; cannot be a null or empty string.
 <br>&nbsp;
 @param  description  The human readable description of the open type this instance represents;
			    cannot be a null or empty string.
 <br>&nbsp;
 @throws IllegalArgumentException  if <var>className</var>, <var>typeName</var> or <var>description</var>
					 is a null or empty string
 <br>&nbsp;
 @throws OpenDataException  if <var>className</var> is not one of the allowed Java class names for open data

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.openmbean.OpenType.getClassName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the fully qualified Java class name of the open data values
 this open type describes.
 The only possible Java class names for open data values are listed in
 {@link #ALLOWED_CLASSNAMES_LIST ALLOWED_CLASSNAMES_LIST}.
 A multidimensional array of any one of these classes or their
 corresponding primitive types is also an allowed class,
 in which case the class name follows the rules defined by the method
 {@link Class#getName() getName()} of <code>java.lang.Class</code>.
 For example, a 3-dimensional array of Strings has for class name
 &quot;<code>[[[Ljava.lang.String;</code>&quot; (without the quotes),
 a 3-dimensional array of Integers has for class name
 &quot;<code>[[[Ljava.lang.Integer;</code>&quot; (without the quotes),
 and a 3-dimensional array of int has for class name
 &quot;<code>[[[I</code>&quot; (without the quotes)

 @return the class name.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.openmbean.OpenType.getTypeName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of this <code>OpenType</code> instance.

 @return the type name.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.openmbean.OpenType.getDescription()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the text description of this <code>OpenType</code> instance.

 @return the description.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.OpenType.isArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <code>true</code> if the open data values this open
 type describes are arrays, <code>false</code> otherwise.

 @return true if this is an array type.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.management.openmbean.OpenType.isValue(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tests whether <var>obj</var> is a value for this open type.

 @param obj the object to be tested for validity.

 @return <code>true</code> if <var>obj</var> is a value for this
 open type, <code>false</code> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean javax.management.openmbean.OpenType.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares the specified <code>obj</code> parameter with this
 open type instance for equality.

 @param obj the object to compare to.

 @return true if this object and <code>obj</code> are equal.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String javax.management.openmbean.OpenType.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this open type instance.

 @return the string representation.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void javax.management.openmbean.OpenType.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Deserializes an {@link OpenType} from an {@link java.io.ObjectInputStream}.

<!-- END DATA -->
