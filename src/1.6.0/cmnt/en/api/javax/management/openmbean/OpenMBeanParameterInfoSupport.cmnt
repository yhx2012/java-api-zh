<!-- BEGIN KEY -->
public class javax.management.openmbean.OpenMBeanParameterInfoSupport extends javax.management.MBeanParameterInfo implements javax.management.openmbean.OpenMBeanParameterInfo
<!-- END KEY -->
<!-- BEGIN DATA -->
 Describes a parameter used in one or more operations or
 constructors of an open MBean.

 @version     3.39  06/03/15
 @author      Sun Microsystems, Inc.

 @since 1.5
 @since.unbundled JMX 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
private javax.management.openmbean.OpenType<?> javax.management.openmbean.OpenMBeanParameterInfoSupport.openType
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial The open mbean parameter's <i>open type</i>

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Object javax.management.openmbean.OpenMBeanParameterInfoSupport.defaultValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial The open mbean parameter's default value

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.util.Set<?> javax.management.openmbean.OpenMBeanParameterInfoSupport.legalValues
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial The open mbean parameter's legal values. This {@link
 Set} is unmodifiable

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Comparable javax.management.openmbean.OpenMBeanParameterInfoSupport.minValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial The open mbean parameter's min value

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Comparable javax.management.openmbean.OpenMBeanParameterInfoSupport.maxValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial The open mbean parameter's max value

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.OpenMBeanParameterInfoSupport(String name, String description, javax.management.openmbean.OpenType<?> openType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an {@code OpenMBeanParameterInfoSupport} instance,
 which describes the parameter used in one or more operations or
 constructors of a class of open MBeans, with the specified
 {@code name}, {@code openType} and {@code description}.

 @param name  cannot be a null or empty string.

 @param description  cannot be a null or empty string.

 @param openType  cannot be null.

 @throws IllegalArgumentException if {@code name} or {@code
 description} are null or empty string, or {@code openType} is
 null.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.OpenMBeanParameterInfoSupport(String name, String description, javax.management.openmbean.OpenType<?> openType, Descriptor descriptor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Constructs an {@code OpenMBeanParameterInfoSupport} instance,
 which describes the parameter used in one or more operations or
 constructors of a class of open MBeans, with the specified
 {@code name}, {@code openType}, {@code description},
 and {@code descriptor}.</p>

 <p>The {@code descriptor} can contain entries that will define
 the values returned by certain methods of this class, as
 explained in the {@link <a href="package-summary.html#constraints">
 package description</a>}.

 @param name  cannot be a null or empty string.

 @param description  cannot be a null or empty string.

 @param openType  cannot be null.

 @param descriptor The descriptor for the parameter.  This may be null
 which is equivalent to an empty descriptor.

 @throws IllegalArgumentException if {@code name} or {@code
 description} are null or empty string, or {@code openType} is
 null, or the descriptor entries are invalid as described in the
 {@link <a href="package-summary.html#constraints">package
 description</a>}.

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.OpenMBeanParameterInfoSupport(String name, String description, javax.management.openmbean.OpenType<T> openType, T defaultValue) throws javax.management.openmbean.OpenDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an {@code OpenMBeanParameterInfoSupport} instance,
 which describes the parameter used in one or more operations or
 constructors of a class of open MBeans, with the specified
 {@code name}, {@code openType}, {@code description} and {@code
 defaultValue}.

 @param name  cannot be a null or empty string.

 @param description  cannot be a null or empty string.

 @param openType  cannot be null.

 @param defaultValue must be a valid value for the {@code
 openType} specified for this parameter; default value not
 supported for {@code ArrayType} and {@code TabularType}; can be
 null, in which case it means that no default value is set.

 @param <T> allows the compiler to check that the {@code defaultValue},
 if non-null, has the correct Java type for the given {@code openType}.

 @throws IllegalArgumentException if {@code name} or {@code
 description} are null or empty string, or {@code openType} is
 null.

 @throws OpenDataException if {@code defaultValue} is not a
 valid value for the specified {@code openType}, or {@code
 defaultValue} is non null and {@code openType} is an {@code
 ArrayType} or a {@code TabularType}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.OpenMBeanParameterInfoSupport(String name, String description, javax.management.openmbean.OpenType<T> openType, T defaultValue, T[] legalValues) throws javax.management.openmbean.OpenDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Constructs an {@code OpenMBeanParameterInfoSupport} instance,
 which describes the parameter used in one or more operations or
 constructors of a class of open MBeans, with the specified
 {@code name}, {@code openType}, {@code description}, {@code
 defaultValue} and {@code legalValues}.</p>

 <p>The contents of {@code legalValues} are copied, so subsequent
 modifications of the array referenced by {@code legalValues}
 have no impact on this {@code OpenMBeanParameterInfoSupport}
 instance.</p>

 @param name  cannot be a null or empty string.

 @param description  cannot be a null or empty string.

 @param openType  cannot be null.

 @param defaultValue must be a valid value for the {@code
 openType} specified for this parameter; default value not
 supported for {@code ArrayType} and {@code TabularType}; can be
 null, in which case it means that no default value is set.

 @param legalValues each contained value must be valid for the
 {@code openType} specified for this parameter; legal values not
 supported for {@code ArrayType} and {@code TabularType}; can be
 null or empty.

 @param <T> allows the compiler to check that the {@code
 defaultValue} and {@code legalValues}, if non-null, have the
 correct Java type for the given {@code openType}.

 @throws IllegalArgumentException if {@code name} or {@code
 description} are null or empty string, or {@code openType} is
 null.

 @throws OpenDataException if {@code defaultValue} is not a
 valid value for the specified {@code openType}, or one value in
 {@code legalValues} is not valid for the specified {@code
 openType}, or {@code defaultValue} is non null and {@code
 openType} is an {@code ArrayType} or a {@code TabularType}, or
 {@code legalValues} is non null and non empty and {@code
 openType} is an {@code ArrayType} or a {@code TabularType}, or
 {@code legalValues} is non null and non empty and {@code
 defaultValue} is not contained in {@code legalValues}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.OpenMBeanParameterInfoSupport(String name, String description, javax.management.openmbean.OpenType<T> openType, T defaultValue, java.lang.Comparable<T> minValue, java.lang.Comparable<T> maxValue) throws javax.management.openmbean.OpenDataException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an {@code OpenMBeanParameterInfoSupport} instance,
 which describes the parameter used in one or more operations or
 constructors of a class of open MBeans, with the specified
 {@code name}, {@code openType}, {@code description}, {@code
 defaultValue}, {@code minValue} and {@code maxValue}.

 It is possible to specify minimal and maximal values only for
 an open type whose values are {@code Comparable}.

 @param name  cannot be a null or empty string.

 @param description  cannot be a null or empty string.

 @param openType  cannot be null.

 @param defaultValue must be a valid value for the {@code
 openType} specified for this parameter; default value not
 supported for {@code ArrayType} and {@code TabularType}; can be
 null, in which case it means that no default value is set.

 @param minValue must be valid for the {@code openType}
 specified for this parameter; can be null, in which case it
 means that no minimal value is set.

 @param maxValue must be valid for the {@code openType}
 specified for this parameter; can be null, in which case it
 means that no maximal value is set.

 @param <T> allows the compiler to check that the {@code
 defaultValue}, {@code minValue}, and {@code maxValue}, if
 non-null, have the correct Java type for the given {@code
 openType}.

 @throws IllegalArgumentException if {@code name} or {@code
 description} are null or empty string, or {@code openType} is
 null.

 @throws OpenDataException if {@code defaultValue}, {@code
 minValue} or {@code maxValue} is not a valid value for the
 specified {@code openType}, or {@code defaultValue} is non null
 and {@code openType} is an {@code ArrayType} or a {@code
 TabularType}, or both {@code minValue} and {@code maxValue} are
 non-null and {@code minValue.compareTo(maxValue) > 0} is {@code
 true}, or both {@code defaultValue} and {@code minValue} are
 non-null and {@code minValue.compareTo(defaultValue) > 0} is
 {@code true}, or both {@code defaultValue} and {@code maxValue}
 are non-null and {@code defaultValue.compareTo(maxValue) > 0}
 is {@code true}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.openmbean.OpenType<?> javax.management.openmbean.OpenMBeanParameterInfoSupport.getOpenType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the open type for the values of the parameter described
 by this {@code OpenMBeanParameterInfoSupport} instance.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.openmbean.OpenMBeanParameterInfoSupport.getDefaultValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the default value for the parameter described by this
 {@code OpenMBeanParameterInfoSupport} instance, if specified,
 or {@code null} otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<?> javax.management.openmbean.OpenMBeanParameterInfoSupport.getLegalValues()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an unmodifiable Set of legal values for the parameter
 described by this {@code OpenMBeanParameterInfoSupport}
 instance, if specified, or {@code null} otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Comparable<?> javax.management.openmbean.OpenMBeanParameterInfoSupport.getMinValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the minimal value for the parameter described by this
 {@code OpenMBeanParameterInfoSupport} instance, if specified,
 or {@code null} otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Comparable<?> javax.management.openmbean.OpenMBeanParameterInfoSupport.getMaxValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the maximal value for the parameter described by this
 {@code OpenMBeanParameterInfoSupport} instance, if specified,
 or {@code null} otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.OpenMBeanParameterInfoSupport.hasDefaultValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns {@code true} if this {@code
 OpenMBeanParameterInfoSupport} instance specifies a non-null
 default value for the described parameter, {@code false}
 otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.OpenMBeanParameterInfoSupport.hasLegalValues()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns {@code true} if this {@code
 OpenMBeanParameterInfoSupport} instance specifies a non-null
 set of legal values for the described parameter, {@code false}
 otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.OpenMBeanParameterInfoSupport.hasMinValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns {@code true} if this {@code
 OpenMBeanParameterInfoSupport} instance specifies a non-null
 minimal value for the described parameter, {@code false}
 otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.OpenMBeanParameterInfoSupport.hasMaxValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns {@code true} if this {@code
 OpenMBeanParameterInfoSupport} instance specifies a non-null
 maximal value for the described parameter, {@code false}
 otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.OpenMBeanParameterInfoSupport.isValue(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tests whether {@code obj} is a valid value for the parameter
 described by this {@code OpenMBeanParameterInfo} instance.

 @param obj the object to be tested.

 @return {@code true} if {@code obj} is a valid value
 for the parameter described by this
 {@code OpenMBeanParameterInfo} instance,
 {@code false} otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.openmbean.OpenMBeanParameterInfoSupport.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Compares the specified {@code obj} parameter with this {@code
 OpenMBeanParameterInfoSupport} instance for equality.</p>

 <p>Returns {@code true} if and only if all of the following
 statements are true:

 <ul>
 <li>{@code obj} is non null,</li>
 <li>{@code obj} also implements the {@code OpenMBeanParameterInfo}
 interface,</li>
 <li>their names are equal</li>
 <li>their open types are equal</li>
 <li>their default, min, max and legal values are equal.</li>
 </ul>
 This ensures that this {@code equals} method works properly for
 {@code obj} parameters which are different implementations of
 the {@code OpenMBeanParameterInfo} interface.

 <p>If {@code obj} also implements {@link DescriptorRead}, then its
 {@link DescriptorRead#getDescriptor() getDescriptor()} method must
 also return the same value as for this object.</p>

 @param obj the object to be compared for equality with this
 {@code OpenMBeanParameterInfoSupport} instance.

 @return {@code true} if the specified object is equal to this
 {@code OpenMBeanParameterInfoSupport} instance.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.openmbean.OpenMBeanParameterInfoSupport.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Returns the hash code value for this {@code
 OpenMBeanParameterInfoSupport} instance.</p>

 <p>The hash code of an {@code OpenMBeanParameterInfoSupport}
 instance is the sum of the hash codes of all elements of
 information used in {@code equals} comparisons (ie: its name,
 its <i>open type</i>, its default, min, max and legal
 values, and its Descriptor).

 <p>This ensures that {@code t1.equals(t2)} implies that {@code
 t1.hashCode()==t2.hashCode()} for any two {@code
 OpenMBeanParameterInfoSupport} instances {@code t1} and {@code
 t2}, as required by the general contract of the method {@link
 Object#hashCode() Object.hashCode()}.

 <p>However, note that another instance of a class implementing
 the {@code OpenMBeanParameterInfo} interface may be equal to
 this {@code OpenMBeanParameterInfoSupport} instance as defined
 by {@link #equals(java.lang.Object)}, but may have a different
 hash code if it is calculated differently.

 <p>As {@code OpenMBeanParameterInfoSupport} instances are
 immutable, the hash code for this instance is calculated once,
 on the first call to {@code hashCode}, and then the same value
 is returned for subsequent calls.

 @return the hash code value for this {@code
 OpenMBeanParameterInfoSupport} instance

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.openmbean.OpenMBeanParameterInfoSupport.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this
 {@code OpenMBeanParameterInfoSupport} instance.
 <p>
 The string representation consists of the name of this class (i.e.
 {@code javax.management.openmbean.OpenMBeanParameterInfoSupport}),
 the string representation of the name and open type of the described
 parameter, the string representation of its default, min, max and legal
 values and the string representation of its descriptor.
 <p>
 As {@code OpenMBeanParameterInfoSupport} instances are immutable,
 the string representation for this instance is calculated once,
 on the first call to {@code toString}, and then the same value
 is returned for subsequent calls.

 @return a string representation of this
 {@code OpenMBeanParameterInfoSupport} instance.

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Object javax.management.openmbean.OpenMBeanParameterInfoSupport.readResolve()
<!-- END KEY -->
<!-- BEGIN DATA -->
 An object serialized in a version of the API before Descriptors were
 added to this class will have an empty or null Descriptor.
 For consistency with our
 behavior in this version, we must replace the object with one
 where the Descriptors reflect the same values of openType, defaultValue,
 etc.

<!-- END DATA -->
