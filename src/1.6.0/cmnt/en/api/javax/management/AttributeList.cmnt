<!-- BEGIN KEY -->
public class javax.management.AttributeList extends java.util.ArrayList
<!-- END KEY -->
<!-- BEGIN DATA -->
 Represents a list of values for attributes of an MBean. The methods
 used for the insertion of {@link javax.management.Attribute
 Attribute} objects in the <CODE>AttributeList</CODE> overrides the
 corresponding methods in the superclass
 <CODE>ArrayList</CODE>. This is needed in order to insure that the
 objects contained in the <CODE>AttributeList</CODE> are only
 <CODE>Attribute</CODE> objects. This avoids getting an exception
 when retrieving elements from the <CODE>AttributeList</CODE>.

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.AttributeList()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an empty <CODE>AttributeList</CODE>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.AttributeList(int initialCapacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an empty <CODE>AttributeList</CODE> with
 the initial capacity specified.

 @param initialCapacity the initial capacity of the
 <code>AttributeList</code>, as specified by {@link
 ArrayList#ArrayList(int)}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.AttributeList(AttributeList list)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an <CODE>AttributeList</CODE> containing the
 elements of the <CODE>AttributeList</CODE> specified, in the
 order in which they are returned by the
 <CODE>AttributeList</CODE>'s iterator.  The
 <CODE>AttributeList</CODE> instance has an initial capacity of
 110% of the size of the <CODE>AttributeList</CODE> specified.

 @param list the <code>AttributeList</code> that defines the initial
 contents of the new <code>AttributeList</code>.

 @see ArrayList#ArrayList(java.util.Collection)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.AttributeList(java.util.List<javax.management.Attribute> list)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an {@code AttributeList} containing the elements of the
 {@code List} specified, in the order in which they are returned by
 the {@code List}'s iterator.

 @param list the {@code List} that defines the initial contents of
 the new {@code AttributeList}.

 @exception IllegalArgumentException if the {@code list} parameter
 is {@code null} or if the {@code list} parameter contains any
 non-Attribute objects.

 @see ArrayList#ArrayList(java.util.Collection)

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<javax.management.Attribute> javax.management.AttributeList.asList()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return a view of this list as a {@code List<Attribute>}.
 Changes to the returned value are reflected by changes
 to the original {@code AttributeList} and vice versa.

 @return a {@code List<Attribute>} whose contents
 reflect the contents of this {@code AttributeList}.

 <p>If this method has ever been called on a given
 {@code AttributeList} instance, a subsequent attempt to add
 an object to that instance which is not an {@code Attribute}
 will fail with a {@code IllegalArgumentException}. For compatibility
 reasons, an {@code AttributeList} on which this method has never
 been called does allow objects other than {@code Attribute}s to
 be added.</p>

 @throws IllegalArgumentException if this {@code AttributeList} contains
 an element that is not an {@code Attribute}.

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.AttributeList.add(Attribute object)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the {@code Attribute} specified as the last element of the list.

 @param object  The attribute to be added.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.AttributeList.add(int index, Attribute object)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the attribute specified as an element at the position specified.
 Elements with an index greater than or equal to the current position are
 shifted up. If the index is out of range (index < 0 || index >
 size() a RuntimeOperationsException should be raised, wrapping the
 java.lang.IndexOutOfBoundsException thrown.

 @param object  The <CODE>Attribute</CODE> object to be inserted.
 @param index The position in the list where the new {@code Attribute}
 object is to be inserted.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.AttributeList.set(int index, Attribute object)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the element at the position specified to be the attribute specified.
 The previous element at that position is discarded. If the index is
 out of range (index < 0 || index > size() a RuntimeOperationsException
 should be raised, wrapping the java.lang.IndexOutOfBoundsException thrown.

 @param object  The value to which the attribute element should be set.
 @param index  The position specified.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.AttributeList.addAll(AttributeList list)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends all the elements in the <CODE>AttributeList</CODE> specified to
 the end of the list, in the order in which they are returned by the
 Iterator of the <CODE>AttributeList</CODE> specified.

 @param list  Elements to be inserted into the list.

 @return true if this list changed as a result of the call.

 @see ArrayList#addAll(java.util.Collection)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.AttributeList.addAll(int index, AttributeList list)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts all of the elements in the <CODE>AttributeList</CODE> specified
 into this list, starting at the specified position, in the order in which
 they are returned by the Iterator of the {@code AttributeList} specified.
 If the index is out of range (index < 0 || index > size() a
 RuntimeOperationsException should be raised, wrapping the
 java.lang.IndexOutOfBoundsException thrown.

 @param list  Elements to be inserted into the list.
 @param index  Position at which to insert the first element from the
 <CODE>AttributeList</CODE> specified.

 @return true if this list changed as a result of the call.

 @see ArrayList#addAll(int, java.util.Collection)

<!-- END DATA -->
