<!-- BEGIN KEY -->
public class javax.management.remote.rmi.RMIIIOPServerImpl extends javax.management.remote.rmi.RMIServerImpl
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>An {@link RMIServerImpl} that is exported through IIOP and that
 creates client connections as RMI objects exported through IIOP.
 User code does not usually reference this class directly.</p>

 @see RMIServerImpl

 @since 1.5
 @since.unbundled 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.remote.rmi.RMIIIOPServerImpl(java.util.Map<java.lang.String, ?> env) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Creates a new {@link RMIServerImpl}.</p>

 @param env the environment containing attributes for the new
 <code>RMIServerImpl</code>.  Can be null, which is equivalent
 to an empty Map.

 @exception IOException if the RMI object cannot be created.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.Remote javax.management.remote.rmi.RMIIIOPServerImpl.toStub() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Returns an IIOP stub.</p>
 The stub might not yet be connected to the ORB. The stub will
 be serializable only if it is connected to the ORB.
 @return an IIOP stub.
 @exception IOException if the stub cannot be created - e.g the
            RMIIIOPServerImpl has not been exported yet.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.management.remote.rmi.RMIConnection javax.management.remote.rmi.RMIIIOPServerImpl.makeClient(String connectionId, Subject subject) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Creates a new client connection as an RMI object exported
 through IIOP.

 @param connectionId the ID of the new connection.  Every
 connection opened by this connector server will have a
 different ID.  The behavior is unspecified if this parameter is
 null.

 @param subject the authenticated subject.  Can be null.

 @return the newly-created <code>RMIConnection</code>.

 @exception IOException if the new client object cannot be
 created or exported.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void javax.management.remote.rmi.RMIIIOPServerImpl.closeServer() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Called by {@link #close()} to close the connector server by
 unexporting this object.  After returning from this method, the
 connector server must not accept any new connections.</p>

 @exception IOException if the attempt to close the connector
 server failed.

<!-- END DATA -->
