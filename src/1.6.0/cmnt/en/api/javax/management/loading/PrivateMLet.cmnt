<!-- BEGIN KEY -->
public class javax.management.loading.PrivateMLet extends javax.management.loading.MLet implements javax.management.loading.PrivateClassLoader
<!-- END KEY -->
<!-- BEGIN DATA -->
 An MLet that is not added to the {@link ClassLoaderRepository}.
 This class acts exactly like its parent class, {@link MLet}, with
 one exception.  When a PrivateMLet is registered in an MBean
 server, it is not added to that MBean server's {@link
 ClassLoaderRepository}.  This is true because this class implements
 the interface {@link PrivateClassLoader}.

 @since 1.5
 @since.unbundled JMX 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.loading.PrivateMLet(java.net.URL[] urls, boolean delegateToCLR)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new PrivateMLet for the specified URLs using the
 default delegation parent ClassLoader.  The URLs will be
 searched in the order specified for classes and resources
 after first searching in the parent class loader.

 @param  urls  The URLs from which to load classes and resources.
 @param  delegateToCLR  True if, when a class is not found in
 either the parent ClassLoader or the URLs, the MLet should delegate
 to its containing MBeanServer's {@link ClassLoaderRepository}.


<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.loading.PrivateMLet(java.net.URL[] urls, ClassLoader parent, boolean delegateToCLR)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new PrivateMLet for the given URLs. The URLs will
 be searched in the order specified for classes and resources
 after first searching in the specified parent class loader.
 The parent argument will be used as the parent class loader
 for delegation.

 @param  urls  The URLs from which to load classes and resources.
 @param  parent The parent class loader for delegation.
 @param  delegateToCLR  True if, when a class is not found in
 either the parent ClassLoader or the URLs, the MLet should delegate
 to its containing MBeanServer's {@link ClassLoaderRepository}.


<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.loading.PrivateMLet(java.net.URL[] urls, ClassLoader parent, URLStreamHandlerFactory factory, boolean delegateToCLR)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new PrivateMLet for the specified URLs, parent
 class loader, and URLStreamHandlerFactory. The parent argument
 will be used as the parent class loader for delegation. The
 factory argument will be used as the stream handler factory to
 obtain protocol handlers when creating new URLs.

 @param  urls  The URLs from which to load classes and resources.
 @param  parent The parent class loader for delegation.
 @param  factory  The URLStreamHandlerFactory to use when creating URLs.
 @param  delegateToCLR  True if, when a class is not found in
 either the parent ClassLoader or the URLs, the MLet should delegate
 to its containing MBeanServer's {@link ClassLoaderRepository}.


<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.loading.MLet.readExternal(ObjectInput in) throws java.io.IOException, java.lang.ClassNotFoundException, java.lang.UnsupportedOperationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Restore this MLet's contents from the given {@link ObjectInput}.
 Not all implementations support this method.  Those that do not
 throw {@link UnsupportedOperationException}.  A subclass may
 override this method to support it or to change the format of
 the read data.</p>

 <p>The format of the read data is not specified, but if an
 implementation supports {@link #readExternal} it must also
 support {@link #writeExternal} in such a way that what is
 written by the latter can be read by the former.</p>

 @param in The object input stream to read from.

 @exception IOException if a problem occurred while reading.
 @exception ClassNotFoundException if the class for the object
 being restored cannot be found.
 @exception UnsupportedOperationException if this
 implementation does not support this operation.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.loading.MLet.writeExternal(ObjectOutput out) throws java.io.IOException, java.lang.UnsupportedOperationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Save this MLet's contents to the given {@link ObjectOutput}.
 Not all implementations support this method.  Those that do not
 throw {@link UnsupportedOperationException}.  A subclass may
 override this method to support it or to change the format of
 the written data.</p>

 <p>The format of the written data is not specified, but if
 an implementation supports {@link #writeExternal} it must
 also support {@link #readExternal} in such a way that what is
 written by the former can be read by the latter.</p>

 @param out The object output stream to write to.

 @exception IOException If a problem occurred while writing.
 @exception UnsupportedOperationException If this
 implementation does not support this operation.

<!-- END DATA -->
