<!-- BEGIN KEY -->
public class javax.management.loading.DefaultLoaderRepository extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Keeps the list of Class Loaders registered in the MBean Server.
 It provides the necessary methods to load classes using the registered 
 Class Loaders.</p>

 <p>This deprecated class is maintained for compatibility.  In
 previous versions of JMX, there was one
 <code>DefaultLoaderRepository</code> shared by all MBean servers.
 As of JMX 1.2, that functionality is approximated by using {@link
 MBeanServerFactory#findMBeanServer} to find all known MBean
 servers, and consulting the {@link ClassLoaderRepository} of each
 one.  It is strongly recommended that code referencing
 <code>DefaultLoaderRepository</code> be rewritten.</p>

 @deprecated Use 
 {@link javax.management.MBeanServer#getClassLoaderRepository()}} 
 instead.

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Class javax.management.loading.DefaultLoaderRepository.loadClass(String className) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Go through the list of class loaders and try to load the requested 
 class.
 The method will stop as soon as the class is found. If the class
 is not found the method will throw a <CODE>ClassNotFoundException</CODE>
 exception.

 @param className The name of the class to be loaded.

 @return the loaded class.

 @exception ClassNotFoundException The specified class could not be 
            found.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Class javax.management.loading.DefaultLoaderRepository.loadClassWithout(ClassLoader loader, String className) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Go through the list of class loaders but exclude the given 
 class loader, then try to load 
 the requested class.
 The method will stop as soon as the class is found. If the class
 is not found the method will throw a <CODE>ClassNotFoundException</CODE>
 exception.

 @param className The name of the class to be loaded.
 @param loader The class loader to be excluded.

 @return the loaded class.

 @exception ClassNotFoundException The specified class could not be 
    found.

<!-- END DATA -->
