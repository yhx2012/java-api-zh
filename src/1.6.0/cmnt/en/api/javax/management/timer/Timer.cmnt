<!-- BEGIN KEY -->
public class javax.management.timer.Timer extends javax.management.NotificationBroadcasterSupport implements javax.management.timer.TimerMBean, javax.management.MBeanRegistration
<!-- END KEY -->
<!-- BEGIN DATA -->

 Provides the implementation of the timer MBean.
 The timer MBean sends out an alarm at a specified time
 that wakes up all the listeners registered to receive timer notifications.
 <P>

 This class manages a list of dated timer notifications.
 A method allows users to add/remove as many notifications as required.
 When a timer notification is emitted by the timer and becomes obsolete,
 it is automatically removed from the list of timer notifications.
 <BR>Additional timer notifications can be added into regularly repeating notifications.
 <P>

 Note:
 <OL>
 <LI>When sending timer notifications, the timer updates the notification sequence number
 irrespective of the notification type.
 <LI>The timer service relies on the system date of the host where the <CODE>Timer</CODE> class is loaded.
 Listeners may receive untimely notifications
 if their host has a different system date.
 To avoid such problems, synchronize the system date of all host machines where timing is needed.
 <LI>The default behavior for periodic notifications is <i>fixed-delay execution</i>, as
     specified in {@link java.util.Timer}. In order to use <i>fixed-rate execution</i>, use the
     overloaded {@link #addNotification(String, String, Object, Date, long, long, boolean)} method.
 <LI>Notification listeners are potentially all executed in the same
 thread.  Therefore, they should execute rapidly to avoid holding up
 other listeners or perturbing the regularity of fixed-delay
 executions.  See {@link NotificationBroadcasterSupport}.
 </OL>

 @version     4.63     12/29/05
 @author      Sun Microsystems, Inc

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long javax.management.timer.Timer.ONE_SECOND
<!-- END KEY -->
<!-- BEGIN DATA -->
 Number of milliseconds in one second.
 Useful constant for the <CODE>addNotification</CODE> method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long javax.management.timer.Timer.ONE_MINUTE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Number of milliseconds in one minute.
 Useful constant for the <CODE>addNotification</CODE> method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long javax.management.timer.Timer.ONE_HOUR
<!-- END KEY -->
<!-- BEGIN DATA -->
 Number of milliseconds in one hour.
 Useful constant for the <CODE>addNotification</CODE> method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long javax.management.timer.Timer.ONE_DAY
<!-- END KEY -->
<!-- BEGIN DATA -->
 Number of milliseconds in one day.
 Useful constant for the <CODE>addNotification</CODE> method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long javax.management.timer.Timer.ONE_WEEK
<!-- END KEY -->
<!-- BEGIN DATA -->
 Number of milliseconds in one week.
 Useful constant for the <CODE>addNotification</CODE> method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.timer.Timer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Default constructor.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.management.ObjectName javax.management.timer.Timer.preRegister(MBeanServer server, ObjectName name) throws java.lang.Exception
<!-- END KEY -->
<!-- BEGIN DATA -->
 Allows the timer MBean to perform any operations it needs before being registered
 in the MBean server.
 <P>
 Not used in this context.

 @param server The MBean server in which the timer MBean will be registered.
 @param name The object name of the timer MBean.

 @return The name of the timer MBean registered.

 @exception java.lang.Exception

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.timer.Timer.postRegister(Boolean registrationDone)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Allows the timer MBean to perform any operations needed after having been
 registered in the MBean server or after the registration has failed.
 <P>
 Not used in this context.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.timer.Timer.preDeregister() throws java.lang.Exception
<!-- END KEY -->
<!-- BEGIN DATA -->
 Allows the timer MBean to perform any operations it needs before being unregistered
 by the MBean server.
 <P>
 Stops the timer.

 @exception java.lang.Exception

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.timer.Timer.postDeregister()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Allows the timer MBean to perform any operations needed after having been
 unregistered by the MBean server.
 <P>
 Not used in this context.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.timer.Timer.start()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Starts the timer.
 <P>
 If there is one or more timer notifications before the time in the list of notifications, the notification
 is sent according to the <CODE>sendPastNotifications</CODE> flag and then, updated
 according to its period and remaining number of occurrences.
 If the timer notification date remains earlier than the current date, this notification is just removed
 from the list of notifications.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.timer.Timer.stop()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Stops the timer.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Integer javax.management.timer.Timer.addNotification(String type, String message, Object userData, Date date, long period, long nbOccurences, boolean fixedRate) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new timer notification with the specified <CODE>type</CODE>, <CODE>message</CODE>
 and <CODE>userData</CODE> and inserts it into the list of notifications with a given date,
 period and number of occurrences.
 <P>
 If the timer notification to be inserted has a date that is before the current date,
 the method behaves as if the specified date were the current date. <BR>
 For once-off notifications, the notification is delivered immediately. <BR>
 For periodic notifications, the first notification is delivered immediately and the
 subsequent ones are spaced as specified by the period parameter.
 <P>
 Note that once the timer notification has been added into the list of notifications,
 its associated date, period and number of occurrences cannot be updated.
 <P>
 In the case of a periodic notification, the value of parameter <i>fixedRate</i> is used to
 specify the execution scheme, as specified in {@link java.util.Timer}.

 @param type The timer notification type.
 @param message The timer notification detailed message.
 @param userData The timer notification user data object.
 @param date The date when the notification occurs.
 @param period The period of the timer notification (in milliseconds).
 @param nbOccurences The total number the timer notification will be emitted.
 @param fixedRate If <code>true</code> and if the notification is periodic, the notification
                  is scheduled with a <i>fixed-rate</i> execution scheme. If
                  <code>false</code> and if the notification is periodic, the notification
                  is scheduled with a <i>fixed-delay</i> execution scheme. Ignored if the
                  notification is not periodic.

 @return The identifier of the new created timer notification.

 @exception java.lang.IllegalArgumentException The date is {@code null} or
 the period or the number of occurrences is negative.

 @see #addNotification(String, String, Object, Date, long, long)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Integer javax.management.timer.Timer.addNotification(String type, String message, Object userData, Date date, long period, long nbOccurences) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new timer notification with the specified <CODE>type</CODE>, <CODE>message</CODE>
 and <CODE>userData</CODE> and inserts it into the list of notifications with a given date,
 period and number of occurrences.
 <P>
 If the timer notification to be inserted has a date that is before the current date,
 the method behaves as if the specified date were the current date. <BR>
 For once-off notifications, the notification is delivered immediately. <BR>
 For periodic notifications, the first notification is delivered immediately and the
 subsequent ones are spaced as specified by the period parameter.
 <P>
 Note that once the timer notification has been added into the list of notifications,
 its associated date, period and number of occurrences cannot be updated.
 <P>
 In the case of a periodic notification, uses a <i>fixed-delay</i> execution scheme, as specified in
 {@link java.util.Timer}. In order to use a <i>fixed-rate</i> execution scheme, use
 {@link #addNotification(String, String, Object, Date, long, long, boolean)} instead.

 @param type The timer notification type.
 @param message The timer notification detailed message.
 @param userData The timer notification user data object.
 @param date The date when the notification occurs.
 @param period The period of the timer notification (in milliseconds).
 @param nbOccurences The total number the timer notification will be emitted.

 @return The identifier of the new created timer notification.

 @exception java.lang.IllegalArgumentException The date is {@code null} or
 the period or the number of occurrences is negative.

 @see #addNotification(String, String, Object, Date, long, long, boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Integer javax.management.timer.Timer.addNotification(String type, String message, Object userData, Date date, long period) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new timer notification with the specified <CODE>type</CODE>, <CODE>message</CODE>
 and <CODE>userData</CODE> and inserts it into the list of notifications with a given date
 and period and a null number of occurrences.
 <P>
 The timer notification will repeat continuously using the timer period using a <i>fixed-delay</i>
 execution scheme, as specified in {@link java.util.Timer}. In order to use a <i>fixed-rate</i>
 execution scheme, use {@link #addNotification(String, String, Object, Date, long, long,
 boolean)} instead.
 <P>
 If the timer notification to be inserted has a date that is before the current date,
 the method behaves as if the specified date were the current date. The
 first notification is delivered immediately and the subsequent ones are
 spaced as specified by the period parameter.

 @param type The timer notification type.
 @param message The timer notification detailed message.
 @param userData The timer notification user data object.
 @param date The date when the notification occurs.
 @param period The period of the timer notification (in milliseconds).

 @return The identifier of the new created timer notification.

 @exception java.lang.IllegalArgumentException The date is {@code null} or
 the period is negative.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Integer javax.management.timer.Timer.addNotification(String type, String message, Object userData, Date date) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new timer notification with the specified <CODE>type</CODE>, <CODE>message</CODE>
 and <CODE>userData</CODE> and inserts it into the list of notifications with a given date
 and a null period and number of occurrences.
 <P>
 The timer notification will be handled once at the specified date.
 <P>
 If the timer notification to be inserted has a date that is before the current date,
 the method behaves as if the specified date were the current date and the
 notification is delivered immediately.

 @param type The timer notification type.
 @param message The timer notification detailed message.
 @param userData The timer notification user data object.
 @param date The date when the notification occurs.

 @return The identifier of the new created timer notification.

 @exception java.lang.IllegalArgumentException The date is {@code null}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.timer.Timer.removeNotification(Integer id) throws javax.management.InstanceNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the timer notification corresponding to the specified identifier from the list of notifications.

 @param id The timer notification identifier.

 @exception InstanceNotFoundException The specified identifier does not correspond to any timer notification
 in the list of notifications of this timer MBean.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.timer.Timer.removeNotifications(String type) throws javax.management.InstanceNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all the timer notifications corresponding to the specified type from the list of notifications.

 @param type The timer notification type.

 @exception InstanceNotFoundException The specified type does not correspond to any timer notification
 in the list of notifications of this timer MBean.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void javax.management.timer.Timer.removeAllNotifications()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all the timer notifications from the list of notifications
 and resets the counter used to update the timer notification identifiers.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.management.timer.Timer.getNbNotifications()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the number of timer notifications registered into the list of notifications.

 @return The number of timer notifications.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.util.Vector<java.lang.Integer> javax.management.timer.Timer.getAllNotificationIDs()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets all timer notification identifiers registered into the list of notifications.

 @return A vector of <CODE>Integer</CODE> objects containing all the timer notification identifiers.
 <BR>The vector is empty if there is no timer notification registered for this timer MBean.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.util.Vector<java.lang.Integer> javax.management.timer.Timer.getNotificationIDs(String type)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets all the identifiers of timer notifications corresponding to the specified type.

 @param type The timer notification type.

 @return A vector of <CODE>Integer</CODE> objects containing all the identifiers of
 timer notifications with the specified <CODE>type</CODE>.
 <BR>The vector is empty if there is no timer notifications registered for this timer MBean
 with the specified <CODE>type</CODE>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.timer.Timer.getNotificationType(Integer id)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the timer notification type corresponding to the specified identifier.

 @param id The timer notification identifier.

 @return The timer notification type or null if the identifier is not mapped to any
 timer notification registered for this timer MBean.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.management.timer.Timer.getNotificationMessage(Integer id)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the timer notification detailed message corresponding to the specified identifier.

 @param id The timer notification identifier.

 @return The timer notification detailed message or null if the identifier is not mapped to any
 timer notification registered for this timer MBean.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object javax.management.timer.Timer.getNotificationUserData(Integer id)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the timer notification user data object corresponding to the specified identifier.

 @param id The timer notification identifier.

 @return The timer notification user data object or null if the identifier is not mapped to any
 timer notification registered for this timer MBean.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Date javax.management.timer.Timer.getDate(Integer id)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a copy of the date associated to a timer notification.

 @param id The timer notification identifier.

 @return A copy of the date or null if the identifier is not mapped to any
 timer notification registered for this timer MBean.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Long javax.management.timer.Timer.getPeriod(Integer id)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a copy of the period (in milliseconds) associated to a timer notification.

 @param id The timer notification identifier.

 @return A copy of the period or null if the identifier is not mapped to any
 timer notification registered for this timer MBean.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Long javax.management.timer.Timer.getNbOccurences(Integer id)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a copy of the remaining number of occurrences associated to a timer notification.

 @param id The timer notification identifier.

 @return A copy of the remaining number of occurrences or null if the identifier is not mapped to any
 timer notification registered for this timer MBean.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Boolean javax.management.timer.Timer.getFixedRate(Integer id)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a copy of the flag indicating whether a periodic notification is
 executed at <i>fixed-delay</i> or at <i>fixed-rate</i>.

 @param id The timer notification identifier.

 @return A copy of the flag indicating whether a periodic notification is
         executed at <i>fixed-delay</i> or at <i>fixed-rate</i>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.timer.Timer.getSendPastNotifications()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the flag indicating whether or not the timer sends past notifications.
 <BR>The default value of the past notifications sending on/off flag is <CODE>false</CODE>.

 @return The past notifications sending on/off flag value.

 @see #setSendPastNotifications

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.management.timer.Timer.setSendPastNotifications(boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the flag indicating whether the timer sends past notifications or not.
 <BR>The default value of the past notifications sending on/off flag is <CODE>false</CODE>.

 @param value The past notifications sending on/off flag value.

 @see #getSendPastNotifications

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.timer.Timer.isActive()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tests whether the timer MBean is active.
 A timer MBean is marked active when the {@link #start start} method is called.
 It becomes inactive when the {@link #stop stop} method is called.
 <BR>The default value of the active on/off flag is <CODE>false</CODE>.

 @return <CODE>true</CODE> if the timer MBean is active, <CODE>false</CODE> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.management.timer.Timer.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tests whether the list of timer notifications is empty.

 @return <CODE>true</CODE> if the list of timer notifications is empty, <CODE>false</CODE> otherwise.

<!-- END DATA -->
