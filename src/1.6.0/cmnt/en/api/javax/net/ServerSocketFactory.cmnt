<!-- BEGIN KEY -->
public abstract class javax.net.ServerSocketFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

 This class creates server sockets.  It may be subclassed by other
 factories, which create particular types of server sockets.  This
 provides a general framework for the addition of public socket-level
 functionality.  It is the server side analogue of a socket factory,
 and similarly provides a way to capture a variety of policies related
 to the sockets being constructed.

 <P> Like socket factories, server Socket factory instances have
 methods used to create sockets. There is also an environment
 specific default server socket factory; frameworks will often use
 their own customized factory.

 @since 1.4
 @see SocketFactory

 @version 1.21
 @author David Brownell

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.net.ServerSocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates a server socket factory.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.net.ServerSocketFactory javax.net.ServerSocketFactory.getDefault()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a copy of the environment's default socket factory.

 @return the <code>ServerSocketFactory</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.ServerSocket javax.net.ServerSocketFactory.createServerSocket() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns an unbound server socket.  The socket is configured with
 the socket options (such as accept timeout) given to this factory.

 @return the unbound socket
 @throws IOException if the socket cannot be created
 @see java.net.ServerSocket#bind(java.net.SocketAddress)
 @see java.net.ServerSocket#bind(java.net.SocketAddress, int)
 @see java.net.ServerSocket#ServerSocket()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.net.ServerSocket javax.net.ServerSocketFactory.createServerSocket(int port) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a server socket bound to the specified port.
 The socket is configured with the socket options
 (such as accept timeout) given to this factory.

 @param port the port to listen to
 @return the <code>ServerSocket</code>
 @exception IOException for networking errors
 @see java.net.ServerSocket#ServerSocket(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.net.ServerSocket javax.net.ServerSocketFactory.createServerSocket(int port, int backlog) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a server socket bound to the specified port, and uses the
 specified connection backlog.  The socket is configured with
 the socket options (such as accept timeout) given to this factory.

 @param port the port to listen to
 @param backlog how many connections are queued
 @return the <code>ServerSocket</code>
 @exception IOException for networking errors
 @see java.net.ServerSocket#ServerSocket(int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.net.ServerSocket javax.net.ServerSocketFactory.createServerSocket(int port, int backlog, InetAddress ifAddress) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a server socket bound to the specified port,
 with a specified listen backlog and local IP.
 The <code>ifAddress</code> argument can be used on a multi-homed
 host for a <code>ServerSocket</code> that will only accept connect
 requests to one of its addresses. If <code>ifAddress</code> is null,
 it will accept connections on all local addresses. The socket is
 configured with the socket options (such as accept timeout) given
 to this factory.

 @param port the port to listen to
 @param backlog how many connections are queued
 @param ifAddress the network interface address to use
 @return the <code>ServerSocket</code>
 @exception IOException for networking errors
 @see java.net.ServerSocket#ServerSocket(int, int, java.net.InetAddress)

<!-- END DATA -->
