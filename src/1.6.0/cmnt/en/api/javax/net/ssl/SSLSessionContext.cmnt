<!-- BEGIN KEY -->
public interface javax.net.ssl.SSLSessionContext
<!-- END KEY -->
<!-- BEGIN DATA -->

 A <code>SSLSessionContext</code> represents a set of
 <code>SSLSession</code>s associated with a single entity. For example,
 it could be associated with a server or client who participates in many
 sessions concurrently.
 <p>
 Not all environments will contain session contexts.
 <p>
 There are <code>SSLSessionContext</code> parameters that affect how
 sessions are stored:
 <UL>
      <LI>Sessions can be set to expire after a specified
      time limit.
      <LI>The number of sessions that can be stored in context
      can be limited.
 </UL>
 A session can be retrieved based on its session id, and all session id's
 in a <code>SSLSessionContext</code> can be listed.

 @see SSLSession

 @since 1.4
 @author Nathan Abramson
 @author David Brownell
 @version 1.15

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.SSLSession javax.net.ssl.SSLSessionContext.getSession(byte[] sessionId)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the <code>SSLSession</code> bound to the specified session id.

 @param sessionId the Session identifier
 @return the <code>SSLSession</code> or null if
 the specified session id does not refer to a valid SSLSession.

 @throws NullPointerException if <code>sessionId</code> is null.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration javax.net.ssl.SSLSessionContext.getIds()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns an Enumeration of all session id's grouped under this
 <code>SSLSessionContext</code>.

 @return an enumeration of all the Session id's

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.net.ssl.SSLSessionContext.setSessionTimeout(int seconds) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Sets the timeout limit for <code>SSLSession</code> objects grouped
 under this <code>SSLSessionContext</code>.
 <p>
 If the timeout limit is set to 't' seconds, a session exceeds the
 timeout limit 't' seconds after its creation time.
 When the timeout limit is exceeded for a session, the
 <code>SSLSession</code> object is invalidated and future connections
 cannot resume or rejoin the session.
 A check for sessions exceeding the timeout is made immediately whenever
 the timeout limit is changed for this <code>SSLSessionContext</code>.

 @param seconds the new session timeout limit in seconds; zero means
		there is no limit.

 @exception IllegalArgumentException if the timeout specified is < 0.
 @see #getSessionTimeout

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.net.ssl.SSLSessionContext.getSessionTimeout()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the timeout limit of <code>SSLSession</code> objects grouped
 under this <code>SSLSessionContext</code>.
 <p>
 If the timeout limit is set to 't' seconds, a session exceeds the
 timeout limit 't' seconds after its creation time.
 When the timeout limit is exceeded for a session, the
 <code>SSLSession</code> object is invalidated and future connections
 cannot resume or rejoin the session.
 A check for sessions exceeding the timeout limit is made immediately
 whenever the timeout limit is changed for this
 <code>SSLSessionContext</code>.

 @return the session timeout limit in seconds; zero means there is no
 limit.
 @see #setSessionTimeout

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.net.ssl.SSLSessionContext.setSessionCacheSize(int size) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Sets the size of the cache used for storing
 <code>SSLSession</code> objects grouped under this
 <code>SSLSessionContext</code>.

 @param size the new session cache size limit; zero means there is no
 limit.
 @exception IllegalArgumentException if the specified size is < 0.
 @see #getSessionCacheSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public int javax.net.ssl.SSLSessionContext.getSessionCacheSize()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the size of the cache used for storing
 <code>SSLSession</code> objects grouped under this
 <code>SSLSessionContext</code>.

 @return size of the session cache; zero means there is no size limit.
 @see #setSessionCacheSize

<!-- END DATA -->
