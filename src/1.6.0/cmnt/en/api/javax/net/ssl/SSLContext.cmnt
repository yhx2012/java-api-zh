<!-- BEGIN KEY -->
public class javax.net.ssl.SSLContext extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

 Instances of this class represent a secure socket protocol
 implementation which acts as a factory for secure socket
 factories or <code>SSLEngine</code>s. This class is initialized
 with an optional set of key and trust managers and source of
 secure random bytes.

 @since 1.4
 @version 1.32, 04/24/06

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.net.ssl.SSLContext(SSLContextSpi contextSpi, Provider provider, String protocol)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates an SSLContext object.

 @param contextSpi the delegate
 @param provider the provider
 @param protocol the protocol

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized javax.net.ssl.SSLContext javax.net.ssl.SSLContext.getDefault() throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the default SSL context.

 <p>If a default context was set using the {@link #setDefault
 SSLContext.setDefault()} method, it is returned. Otherwise, the first
 call of this method triggers the call
 <code>SSLContext.getInstance("Default")</code>.
 If successful, that object is made the default SSL context and returned.

 <p>The default context is immediately
 usable and does not require {@linkplain #init initialization}.

 @return the default SSL context
 @throws NoSuchAlgorithmException if the
   {@link SSLContext#getInstance SSLContext.getInstance()} call fails
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized void javax.net.ssl.SSLContext.setDefault(SSLContext context)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Sets the default SSL context. It will be returned by subsequent calls
 to {@link #getDefault}. The default context must be immediately usable
 and not require {@linkplain #init initialization}.

 @param context the SSLContext
 @throws	NullPointerException if context is null
 @throws	SecurityException if a security manager exists and its
		<code>checkPermission</code> method does not allow
		<code>SSLPermission("setDefaultSSLContext")</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.net.ssl.SSLContext javax.net.ssl.SSLContext.getInstance(String protocol) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a <code>SSLContext</code> object that implements the
 specified secure socket protocol.

 <p> This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new SSLContext object encapsulating the
 SSLContextSpi implementation from the first
 Provider that supports the specified protocol is returned.

 <p> Note that the list of registered providers may be retrieved via
 the {@link Security#getProviders() Security.getProviders()} method.

 @param protocol the standard name of the requested protocol.
		See Appendix A in the <a href=
	"{@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html#AppA">
		Java Secure Socket Extension Reference Guide </a>
		for information about standard protocol names.

 @return the new <code>SSLContext</code> object.

 @exception NoSuchAlgorithmException if no Provider supports a
		TrustManagerFactorySpi implementation for the
		specified protocol.

 @see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.net.ssl.SSLContext javax.net.ssl.SSLContext.getInstance(String protocol, String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a <code>SSLContext</code> object that implements the
 specified secure socket protocol.

 <p> A new SSLContext object encapsulating the
 SSLContextSpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

 <p> Note that the list of registered providers may be retrieved via
 the {@link Security#getProviders() Security.getProviders()} method.

 @param protocol the standard name of the requested protocol.
		See Appendix A in the <a href=
	"{@docRoot}/../technotes/guides//security/jsse/JSSERefGuide.html#AppA">
		Java Secure Socket Extension Reference Guide </a>
		for information about standard protocol names.

 @param provider the name of the provider.

 @return the new <code>SSLContext</code> object.

 @throws NoSuchAlgorithmException if a SSLContextSpi
		implementation for the specified protocol is not
		available from the specified provider.

 @throws NoSuchProviderException if the specified provider is not
		registered in the security provider list.

 @throws IllegalArgumentException if the provider name is null or empty.

 @see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static javax.net.ssl.SSLContext javax.net.ssl.SSLContext.getInstance(String protocol, Provider provider) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a <code>SSLContext</code> object that implements the
 specified secure socket protocol.

 <p> A new SSLContext object encapsulating the
 SSLContextSpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

 @param protocol the standard name of the requested protocol.
		See Appendix A in the <a href=
	"{@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html#AppA">
		Java Secure Socket Extension Reference Guide </a>
		for information about standard protocol names.

 @param provider an instance of the provider.

 @return the new <code>SSLContext</code> object.

 @throws NoSuchAlgorithmException if a KeyManagerFactorySpi
		implementation for the specified protocol is not available
		from the specified Provider object.

 @throws IllegalArgumentException if the provider name is null.

 @see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.net.ssl.SSLContext.getProtocol()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the protocol name of this <code>SSLContext</code> object.

 <p>This is the same name that was specified in one of the
 <code>getInstance</code> calls that created this
 <code>SSLContext</code> object.

 @return the protocol name of this <code>SSLContext</code> object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider javax.net.ssl.SSLContext.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the provider of this <code>SSLContext</code> object.

 @return the provider of this <code>SSLContext</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.net.ssl.SSLContext.init(javax.net.ssl.KeyManager[] km, javax.net.ssl.TrustManager[] tm, SecureRandom random) throws java.security.KeyManagementException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Initializes this context. Either of the first two parameters
 may be null in which case the installed security providers will
 be searched for the highest priority implementation of the
 appropriate factory. Likewise, the secure random parameter may
 be null in which case the default implementation will be used.
 <P>
 Only the first instance of a particular key and/or trust manager
 implementation type in the array is used.  (For example, only
 the first javax.net.ssl.X509KeyManager in the array will be used.)

 @param km the sources of authentication keys or null
 @param tm the sources of peer authentication trust decisions or null
 @param random the source of randomness for this generator or null
 @throws KeyManagementException if this operation fails

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.net.ssl.SSLSocketFactory javax.net.ssl.SSLContext.getSocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a <code>SocketFactory</code> object for this
 context.

 @return the <code>SocketFactory</code> object
 @throws IllegalStateException if the SSLContextImpl requires
		initialization and the <code>init()</code> has not been called

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.net.ssl.SSLServerSocketFactory javax.net.ssl.SSLContext.getServerSocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a <code>ServerSocketFactory</code> object for
 this context.

 @return the <code>ServerSocketFactory</code> object
 @throws IllegalStateException if the SSLContextImpl requires
		initialization and the <code>init()</code> has not been called

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.net.ssl.SSLEngine javax.net.ssl.SSLContext.createSSLEngine()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates a new <code>SSLEngine</code> using this context.
 <P>
 Applications using this factory method are providing no hints
 for an internal session reuse strategy. If hints are desired,
 {@link #createSSLEngine(String, int)} should be used
 instead.
 <P>
 Some cipher suites (such as Kerberos) require remote hostname
 information, in which case this factory method should not be used.

 @return	the <code>SSLEngine</code> object
 @throws	UnsupportedOperationException if the underlying provider
		does not implement the operation.
 @throws  IllegalStateException if the SSLContextImpl requires
		initialization and the <code>init()</code> has not been called
 @since   1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.net.ssl.SSLEngine javax.net.ssl.SSLContext.createSSLEngine(String peerHost, int peerPort)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates a new <code>SSLEngine</code> using this context using
 advisory peer information.
 <P>
 Applications using this factory method are providing hints
 for an internal session reuse strategy.
 <P>
 Some cipher suites (such as Kerberos) require remote hostname
 information, in which case peerHost needs to be specified.

 @param	peerHost the non-authoritative name of the host
 @param	peerPort the non-authoritative port
 @return	the new <code>SSLEngine</code> object
 @throws	UnsupportedOperationException if the underlying provider
		does not implement the operation.
 @throws  IllegalStateException if the SSLContextImpl requires
		initialization and the <code>init()</code> has not been called
 @since   1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.net.ssl.SSLSessionContext javax.net.ssl.SSLContext.getServerSessionContext()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the server session context, which represents the set of
 SSL sessions available for use during the handshake phase of
 server-side SSL sockets.
 <P>
 This context may be unavailable in some environments, in which
 case this method returns null. For example, when the underlying
 SSL provider does not provide an implementation of SSLSessionContext
 interface, this method returns null. A non-null session context
 is returned otherwise.

 @return server session context bound to this SSL context

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.net.ssl.SSLSessionContext javax.net.ssl.SSLContext.getClientSessionContext()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the client session context, which represents the set of
 SSL sessions available for use during the handshake phase of
 client-side SSL sockets.
 <P>
 This context may be unavailable in some environments, in which
 case this method returns null. For example, when the underlying
 SSL provider does not provide an implementation of SSLSessionContext
 interface, this method returns null. A non-null session context
 is returned otherwise.

 @return client session context bound to this SSL context

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.net.ssl.SSLParameters javax.net.ssl.SSLContext.getDefaultSSLParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a copy of the SSLParameters indicating the default
 settings for this SSL context.

 <p>The parameters will always have the ciphersuites and protocols
 arrays set to non-null values.

 @return a copy of the SSLParameters object with the default settings
 @throws UnsupportedOperationException if the default SSL parameters
   could not be obtained.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.net.ssl.SSLParameters javax.net.ssl.SSLContext.getSupportedSSLParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a copy of the SSLParameters indicating the supported
 settings for this SSL context.

 <p>The parameters will always have the ciphersuites and protocols
 arrays set to non-null values.

 @return a copy of the SSLParameters object with the supported
   settings
 @throws UnsupportedOperationException if the supported SSL parameters
   could not be obtained.
 @since 1.6

<!-- END DATA -->
