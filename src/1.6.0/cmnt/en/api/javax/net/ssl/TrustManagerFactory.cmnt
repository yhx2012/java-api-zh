<!-- BEGIN KEY -->
public class javax.net.ssl.TrustManagerFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

 This class acts as a factory for trust managers based on a
 source of trust material. Each trust manager manages a specific
 type of trust material for use by secure sockets. The trust
 material is based on a KeyStore and/or provider specific sources.

 @since 1.4
 @see TrustManager
 @version 1.18, 04/24/06

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.net.ssl.TrustManagerFactory(TrustManagerFactorySpi factorySpi, Provider provider, String algorithm)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates a TrustManagerFactory object.

 @param factorySpi the delegate
 @param provider the provider
 @param algorithm the algorithm

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Obtains the default TrustManagerFactory algorithm name.

 <p>The default TrustManager can be changed at runtime by setting
 the value of the "ssl.TrustManagerFactory.algorithm" security
 property (set in the Java security properties file or by calling
 {@link java.security.Security#setProperty(String, String) })
 to the desired algorithm name.

 @return the default algorithm name as specified in the
 Java security properties, or an implementation-specific default
 if no such property exists.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String javax.net.ssl.TrustManagerFactory.getAlgorithm()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the algorithm name of this <code>TrustManagerFactory</code>
 object.

 <p>This is the same name that was specified in one of the
 <code>getInstance</code> calls that created this
 <code>TrustManagerFactory</code> object.

 @return the algorithm name of this <code>TrustManagerFactory</code>
		object

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.net.ssl.TrustManagerFactory javax.net.ssl.TrustManagerFactory.getInstance(String algorithm) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a <code>TrustManagerFactory</code> object that acts as a
 factory for trust managers.

 <p> This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new TrustManagerFactory object encapsulating the
 TrustManagerFactorySpi implementation from the first
 Provider that supports the specified algorithm is returned.

 <p> Note that the list of registered providers may be retrieved via
 the {@link Security#getProviders() Security.getProviders()} method.

 @param algorithm the standard name of the requested trust management
		algorithm.  See the <a href=
	"{@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html">
		Java Secure Socket Extension Reference Guide </a>
		for information about standard algorithm names.

 @return the new <code>TrustManagerFactory</code> object.

 @exception NoSuchAlgorithmException if no Provider supports a
		TrustManagerFactorySpi implementation for the
		specified algorithm.

 @see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.net.ssl.TrustManagerFactory javax.net.ssl.TrustManagerFactory.getInstance(String algorithm, String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a <code>TrustManagerFactory</code> object that acts as a
 factory for trust managers.

 <p> A new KeyManagerFactory object encapsulating the
 KeyManagerFactorySpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

 <p> Note that the list of registered providers may be retrieved via
 the {@link Security#getProviders() Security.getProviders()} method.

 @param algorithm the standard name of the requested trust management
		algorithm.  See the <a href=
	"{@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html">
		Java Secure Socket Extension Reference Guide </a>
		for information about standard algorithm names.

 @param provider the name of the provider.

 @return the new <code>TrustManagerFactory</code> object

 @throws NoSuchAlgorithmException if a TrustManagerFactorySpi
		implementation for the specified algorithm is not
		available from the specified provider.

 @throws NoSuchProviderException if the specified provider is not
		registered in the security provider list.

 @throws IllegalArgumentException if the provider name is null or empty.

 @see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final javax.net.ssl.TrustManagerFactory javax.net.ssl.TrustManagerFactory.getInstance(String algorithm, Provider provider) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a <code>TrustManagerFactory</code> object that acts as a
 factory for trust managers.

 <p> A new TrustManagerFactory object encapsulating the
 TrustManagerFactorySpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

 @param algorithm the standard name of the requested trust management
		algorithm.  See the <a href=
	"{@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html">
		Java Secure Socket Extension Reference Guide </a>
		for information about standard algorithm names.

 @param provider an instance of the provider.

 @return the new <code>TrustManagerFactory</code> object.

 @throws NoSuchAlgorithmException if a TrustManagerFactorySpi
		implementation for the specified algorithm is not available
		from the specified Provider object.

 @throws IllegalArgumentException if the provider is null.

 @see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider javax.net.ssl.TrustManagerFactory.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the provider of this <code>TrustManagerFactory</code> object.

 @return the provider of this <code>TrustManagerFactory</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.net.ssl.TrustManagerFactory.init(KeyStore ks) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Initializes this factory with a source of certificate
 authorities and related trust material.
 <P>
 The provider typically uses a KeyStore as a basis for making
 trust decisions.
 <P>
 For more flexible initialization, please see
 {@link #init(ManagerFactoryParameters)}.

 @param ks the key store, or null
 @throws KeyStoreException if this operation fails

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void javax.net.ssl.TrustManagerFactory.init(ManagerFactoryParameters spec) throws java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Initializes this factory with a source of provider-specific
 trust material.
 <P>
 In some cases, initialization parameters other than a keystore
 may be needed by a provider.  Users of that particular provider
 are expected to pass an implementation of the appropriate
 <CODE>ManagerFactoryParameters</CODE> as defined by the
 provider.  The provider can then call the specified methods in
 the <CODE>ManagerFactoryParameters</CODE> implementation to obtain the
 needed information.

 @param spec an implementation of a provider-specific parameter
		specification
 @throws InvalidAlgorithmParameterException if an error is
		encountered

<!-- END DATA -->
<!-- BEGIN KEY -->
public final javax.net.ssl.TrustManager[] javax.net.ssl.TrustManagerFactory.getTrustManagers()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns one trust manager for each type of trust material.

 @return the trust managers

<!-- END DATA -->
