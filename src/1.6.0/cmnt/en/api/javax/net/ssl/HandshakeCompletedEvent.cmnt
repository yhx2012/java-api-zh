<!-- BEGIN KEY -->
public class javax.net.ssl.HandshakeCompletedEvent extends java.util.EventObject
<!-- END KEY -->
<!-- BEGIN DATA -->

 This event indicates that an SSL handshake completed on a given
 SSL connection.  All of the core information about that handshake's
 result is captured through an "SSLSession" object.  As a convenience,
 this event class provides direct access to some important session
 attributes.

 <P> The source of this event is the SSLSocket on which handshaking
 just completed.

 @see SSLSocket
 @see HandshakeCompletedListener
 @see SSLSession

 @since 1.4
 @version 1.23
 @author David Brownell

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.HandshakeCompletedEvent(SSLSocket sock, SSLSession s)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Constructs a new HandshakeCompletedEvent.

 @param sock the SSLSocket acting as the source of the event
 @param s the SSLSession this event is associated with

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.SSLSession javax.net.ssl.HandshakeCompletedEvent.getSession()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the session that triggered this event.

 @return the <code>SSLSession</code> for this handshake

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String javax.net.ssl.HandshakeCompletedEvent.getCipherSuite()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the cipher suite in use by the session which was produced
 by the handshake.  (This is a convenience method for
 getting the ciphersuite from the SSLsession.)

 @return the name of the cipher suite negotiated during this session.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.Certificate[] javax.net.ssl.HandshakeCompletedEvent.getLocalCertificates()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the certificate(s) that were sent to the peer during
 handshaking.
 Note: This method is useful only when using certificate-based
 cipher suites.

 When multiple certificates are available for use in a
 handshake, the implementation chooses what it considers the
 "best" certificate chain available, and transmits that to
 the other side.  This method allows the caller to know
 which certificate chain was actually used.

 @return an ordered array of certificates, with the local
		certificate first followed by any
		certificate authorities.  If no certificates were sent,
		then null is returned.
 @see #getLocalPrincipal()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.Certificate[] javax.net.ssl.HandshakeCompletedEvent.getPeerCertificates() throws javax.net.ssl.SSLPeerUnverifiedException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the identity of the peer which was established as part
 of defining the session.
 Note: This method can be used only when using certificate-based
 cipher suites; using it with non-certificate-based cipher suites,
 such as Kerberos, will throw an SSLPeerUnverifiedException.

 @return an ordered array of the peer certificates,
		with the peer's own certificate first followed by
		any certificate authorities.
 @exception SSLPeerUnverifiedException if the peer is not verified.
 @see #getPeerPrincipal()

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.security.cert.X509Certificate[] javax.net.ssl.HandshakeCompletedEvent.getPeerCertificateChain() throws javax.net.ssl.SSLPeerUnverifiedException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the identity of the peer which was identified as part
 of defining the session.
 Note: This method can be used only when using certificate-based
 cipher suites; using it with non-certificate-based cipher suites,
 such as Kerberos, will throw an SSLPeerUnverifiedException.

 <p><em>Note: this method exists for compatibility with previous
 releases. New applications should use
 {@link #getPeerCertificates} instead.</em></p>

 @return an ordered array of peer X.509 certificates,
		with the peer's own certificate first followed by any
		certificate authorities.  (The certificates are in
		the original JSSE
		{@link javax.security.cert.X509Certificate} format).
 @exception SSLPeerUnverifiedException if the peer is not verified.
 @see #getPeerPrincipal()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.Principal javax.net.ssl.HandshakeCompletedEvent.getPeerPrincipal() throws javax.net.ssl.SSLPeerUnverifiedException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the identity of the peer which was established as part of
 defining the session.

 @return the peer's principal. Returns an X500Principal of the
 end-entity certiticate for X509-based cipher suites, and
 KerberosPrincipal for Kerberos cipher suites.

 @throws SSLPeerUnverifiedException if the peer's identity has not
		been verified

 @see #getPeerCertificates()
 @see #getLocalPrincipal()

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.Principal javax.net.ssl.HandshakeCompletedEvent.getLocalPrincipal()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the principal that was sent to the peer during handshaking.

 @return the principal sent to the peer. Returns an X500Principal
 of the end-entity certificate for X509-based cipher suites, and
 KerberosPrincipal for Kerberos cipher suites. If no principal was
 sent, then null is returned.

 @see #getLocalCertificates()
 @see #getPeerPrincipal()

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.SSLSocket javax.net.ssl.HandshakeCompletedEvent.getSocket()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the socket which is the source of this event.
 (This is a convenience function, to let applications
 write code without type casts.)

 @return the socket on which the connection was made.

<!-- END DATA -->
