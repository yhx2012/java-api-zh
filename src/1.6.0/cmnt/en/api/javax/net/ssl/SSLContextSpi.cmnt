<!-- BEGIN KEY -->
public abstract class javax.net.ssl.SSLContextSpi extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

 This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)
 for the <code>SSLContext</code> class.

 <p> All the abstract methods in this class must be implemented by each
 cryptographic service provider who wishes to supply the implementation
 of a particular SSL context.

 @since 1.4
 @see SSLContext
 @version 1.16

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void javax.net.ssl.SSLContextSpi.engineInit(javax.net.ssl.KeyManager[] km, javax.net.ssl.TrustManager[] tm, SecureRandom sr) throws java.security.KeyManagementException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Initializes this context.

 @param km the sources of authentication keys
 @param tm the sources of peer authentication trust decisions
 @param sr the source of randomness
 @throws KeyManagementException if this operation fails
 @see SSLContext#init(KeyManager [], TrustManager [], SecureRandom)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract javax.net.ssl.SSLSocketFactory javax.net.ssl.SSLContextSpi.engineGetSocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a <code>SocketFactory</code> object for this
 context.

 @return the <code>SocketFactory</code> object
 @throws IllegalStateException if the SSLContextImpl requires
         initialization and the <code>engineInit()</code>
         has not been called
 @see javax.net.ssl.SSLContext#getSocketFactory()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract javax.net.ssl.SSLServerSocketFactory javax.net.ssl.SSLContextSpi.engineGetServerSocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a <code>ServerSocketFactory</code> object for
 this context.

 @return the <code>ServerSocketFactory</code> object
 @throws IllegalStateException if the SSLContextImpl requires
         initialization and the <code>engineInit()</code>
         has not been called
 @see javax.net.ssl.SSLContext#getServerSocketFactory()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract javax.net.ssl.SSLEngine javax.net.ssl.SSLContextSpi.engineCreateSSLEngine()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates a new <code>SSLEngine</code> using this context.
 <P>
 Applications using this factory method are providing no hints
 for an internal session reuse strategy. If hints are desired,
 {@link #engineCreateSSLEngine(String, int)} should be used
 instead.
 <P>
 Some cipher suites (such as Kerberos) require remote hostname
 information, in which case this factory method should not be used.

 @return  the <code>SSLEngine</code> Object
 @throws IllegalStateException if the SSLContextImpl requires
         initialization and the <code>engineInit()</code>
         has not been called

 @see     SSLContext#createSSLEngine()

 @since   1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract javax.net.ssl.SSLEngine javax.net.ssl.SSLContextSpi.engineCreateSSLEngine(String host, int port)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates a <code>SSLEngine</code> using this context.
 <P>
 Applications using this factory method are providing hints
 for an internal session reuse strategy.
 <P>
 Some cipher suites (such as Kerberos) require remote hostname
 information, in which case peerHost needs to be specified.

 @param host the non-authoritative name of the host
 @param port the non-authoritative port
 @return  the <code>SSLEngine</code> Object
 @throws IllegalStateException if the SSLContextImpl requires
         initialization and the <code>engineInit()</code>
         has not been called

 @see     SSLContext#createSSLEngine(String, int)

 @since   1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract javax.net.ssl.SSLSessionContext javax.net.ssl.SSLContextSpi.engineGetServerSessionContext()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a server <code>SSLSessionContext</code> object for
 this context.

 @return the <code>SSLSessionContext</code> object
 @see javax.net.ssl.SSLContext#getServerSessionContext()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract javax.net.ssl.SSLSessionContext javax.net.ssl.SSLContextSpi.engineGetClientSessionContext()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a client <code>SSLSessionContext</code> object for
 this context.

 @return the <code>SSLSessionContext</code> object
 @see javax.net.ssl.SSLContext#getClientSessionContext()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.net.ssl.SSLParameters javax.net.ssl.SSLContextSpi.engineGetDefaultSSLParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a copy of the SSLParameters indicating the default
 settings for this SSL context.

 <p>The parameters will always have the ciphersuite and protocols
 arrays set to non-null values.

 <p>The default implementation obtains the parameters from an
 SSLSocket created by calling the
 {@linkplain javax.net.SocketFactory#createSocket
 SocketFactory.createSocket()} method of this context's SocketFactory.

 @return a copy of the SSLParameters object with the default settings
 @throws UnsupportedOperationException if the default SSL parameters
   could not be obtained.

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected javax.net.ssl.SSLParameters javax.net.ssl.SSLContextSpi.engineGetSupportedSSLParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a copy of the SSLParameters indicating the maximum supported
 settings for this SSL context.

 <p>The parameters will always have the ciphersuite and protocols
 arrays set to non-null values.

 <p>The default implementation obtains the parameters from an
 SSLSocket created by calling the
 {@linkplain javax.net.SocketFactory#createSocket
 SocketFactory.createSocket()} method of this context's SocketFactory.

 @return a copy of the SSLParameters object with the maximum supported 
   settings
 @throws UnsupportedOperationException if the supported SSL parameters
   could not be obtained.

 @since 1.6

<!-- END DATA -->
