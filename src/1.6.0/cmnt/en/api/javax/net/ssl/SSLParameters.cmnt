<!-- BEGIN KEY -->
public class javax.net.ssl.SSLParameters extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

 Encapsulates parameters for an SSL/TLS connection. The parameters
 are the list of ciphersuites to be accepted in an SSL/TLS handshake,
 the list of protocols to be allowed, and whether SSL/TLS servers should
 request or require client authentication.

 <p>SSLParameters can be created via the constructors in this class.
 Objects can also be obtained using the <code>getSSLParameters()</code>
 methods in 
 {@link SSLSocket#getSSLParameters SSLSocket} and 
 {@link SSLEngine#getSSLParameters SSLEngine} or the
 {@link SSLContext#getDefaultSSLParameters getDefaultSSLParameters()} and
 {@link SSLContext#getSupportedSSLParameters getSupportedSSLParameters()} 
 methods in <code>SSLContext</code>.

 <P>SSLParameters can be applied to a connection via the methods 
 {@link SSLSocket#setSSLParameters SSLSocket.setSSLParameters()} and
 {@link SSLEngine#setSSLParameters SSLEngine.getSSLParameters()}.

 @see SSLSocket
 @see SSLEngine
 @see SSLContext

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.SSLParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Constructs SSLParameters.

 <p>The cipherSuites and protocols values are set to <code>null</code>,
 wantClientAuth and needClientAuth are set to <code>false</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.SSLParameters(java.lang.String[] cipherSuites)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Constructs SSLParameters from the specified array of ciphersuites.
 Calling this constructor is equivalent to calling the no-args
 constructor followed by
 <code>setCipherSuites(cipherSuites);</code>.

 @param cipherSuites the array of ciphersuites (or null)

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.net.ssl.SSLParameters(java.lang.String[] cipherSuites, java.lang.String[] protocols)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Constructs SSLParameters from the specified array of ciphersuites
 and protocols.
 Calling this constructor is equivalent to calling the no-args
 constructor followed by
 <code>setCipherSuites(cipherSuites); setProtocols(protocols);</code>.

 @param cipherSuites the array of ciphersuites (or null)
 @param protocols the array of protocols (or null)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] javax.net.ssl.SSLParameters.getCipherSuites()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a copy of the array of ciphersuites or null if none
 have been set.

 @return a copy of the array of ciphersuites or null if none
 have been set.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.net.ssl.SSLParameters.setCipherSuites(java.lang.String[] cipherSuites)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Sets the array of ciphersuites.

 @param cipherSuites the array of ciphersuites (or null)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] javax.net.ssl.SSLParameters.getProtocols()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a copy of the array of protocols or null if none
 have been set.

 @return a copy of the array of protocols or null if none
 have been set.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.net.ssl.SSLParameters.setProtocols(java.lang.String[] protocols)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Sets the array of protocols.

 @param protocols the array of protocols (or null)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.net.ssl.SSLParameters.getWantClientAuth()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns whether client authentication should be requested.

 @return whether client authentication should be requested.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.net.ssl.SSLParameters.setWantClientAuth(boolean wantClientAuth)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Sets whether client authentication should be requested. Calling
 this method clears the <code>needClientAuth</code> flag.

 @param wantClientAuth whether client authentication should be requested

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean javax.net.ssl.SSLParameters.getNeedClientAuth()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns whether client authentication should be required.

 @return whether client authentication should be required.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void javax.net.ssl.SSLParameters.setNeedClientAuth(boolean needClientAuth)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Sets whether client authentication should be required. Calling
 this method clears the <code>wantClientAuth</code> flag.

 @param needClientAuth whether client authentication should be required

<!-- END DATA -->
