<!-- BEGIN KEY -->
public abstract class org.omg.PortableServer.Servant extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 Defines the native <code>Servant</code> type. In Java, the 
 <code>Servant</code> type is mapped to the Java 
 <code>org.omg.PortableServer.Servant</code> class.
 It serves as the base class for all POA servant 
 implementations and provides a number of methods that may 
 be invoked by the application programmer, as well as methods 
 which are invoked by the POA itself and may be overridden by 
 the user to control aspects of servant behavior.
 Based on IDL to Java spec. (CORBA V2.3.1) ptc/00-01-08.pdf.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final org.omg.PortableServer.portable.Delegate org.omg.PortableServer.Servant._get_delegate()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the ORB vendor-specific implementation of
 <code>PortableServer::Servant</code>.
 @return <code>_delegate</code> the ORB vendor-specific
 implementation of <code>PortableServer::Servant</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void org.omg.PortableServer.Servant._set_delegate(Delegate delegate)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Supports the Java ORB portability
 interfaces by providing a method for classes that support
 ORB portability through delegation to set their delegate.
 @param delegate ORB vendor-specific implementation of
                 the <code>PortableServer::Servant</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final org.omg.CORBA.Object org.omg.PortableServer.Servant._this_object()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Allows the servant to obtain the object reference for
 the target CORBA object it is incarnating for that request.
 @return <code>this_object</code> <code>Object</code> reference
 associated with the request.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final org.omg.CORBA.Object org.omg.PortableServer.Servant._this_object(ORB orb)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Allows the servant to obtain the object reference for
 the target CORBA Object it is incarnating for that request.
 @param orb ORB with which the servant is associated.
 @return <code>_this_object</code> reference associated with the request.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final org.omg.CORBA.ORB org.omg.PortableServer.Servant._orb()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the instance of the ORB 
 currently associated with the <code>Servant</code> (convenience method).
 @return <code>orb</code> the instance of the ORB currently 
 associated with the <code>Servant</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final org.omg.PortableServer.POA org.omg.PortableServer.Servant._poa()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Allows easy execution of common methods, equivalent to 
 <code>PortableServer::Current:get_POA</code>. 
 @return <code>poa</code> POA associated with the servant.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte[] org.omg.PortableServer.Servant._object_id()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Allows easy execution of
 common methods, equivalent
 to calling <code>PortableServer::Current::get_object_id</code>.
 @return <code>object_id</code> the <code>Object</code> ID associated
 with this servant.

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.PortableServer.POA org.omg.PortableServer.Servant._default_POA()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the
 root POA from the ORB instance associated with the servant.
 Subclasses may override this method to return a different POA.
 @return <code>default_POA</code> the POA associated with the
 <code>Servant</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.omg.PortableServer.Servant._is_a(String repository_id)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks to see if the specified <code>repository_id</code> is present
 on the list returned by <code>_all_interfaces()</code> or is the
 <code>repository_id</code> for the generic CORBA Object.
 @param repository_id the <code>repository_id</code>
		to be checked in the repository list or against the id
		of generic CORBA objects.
 @return <code>is_a</code> boolean indicating whether the specified
		<code>repository_id</code> is
         in the repository list or is same as a generic CORBA
         object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.omg.PortableServer.Servant._non_existent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks for the existence of an
 <code>Object</code>.
 The <code>Servant</code> provides a default implementation of
 <code>_non_existent()</code> that can be overridden by derived servants.
 @return <code>non_existent</code> <code>true</code> if that object does
		 not exist,  <code>false</code> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Object org.omg.PortableServer.Servant._get_interface_def()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an <code>InterfaceDef</code> object as a
 <code>CORBA::Object</code> that defines the runtime type of the
 <code>CORBA::Object</code> implemented by the <code>Servant</code>. 
 The invoker of <code>_get_interface_def</code>
 must narrow the result to an <code>InterfaceDef</code> in order
 to use it.
 <P>This default implementation of <code>_get_interface_def()</code>
 can be overridden
 by derived servants if the default behavior is not adequate.
 As defined in the CORBA 2.3.1 specification, section 11.3.1, the
 default behavior of <code>_get_interface_def()</code> is to use 
 the most derived
 interface of a static servant or the most derived interface retrieved
 from a dynamic servant to obtain the <code>InterfaceDef</code>. 
 This behavior must
 be supported by the <code>Delegate</code> that implements the
 <code>Servant</code>.
 @return <code>get_interface_def</code> an <code>InterfaceDef</code>
 object as a
 <code>CORBA::Object</code> that defines the runtime type of the
 <code>CORBA::Object</code> implemented by the <code>Servant</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String[] org.omg.PortableServer.Servant._all_interfaces(POA poa, byte[] objectId)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Used by the ORB to obtain complete type 
 information from the servant.
 @param poa POA with which the servant is associated.
 @param objectId is the id corresponding to the object
         associated with this servant.
 @return list of type information for the object.

<!-- END DATA -->
