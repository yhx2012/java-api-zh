<!-- BEGIN KEY -->
public abstract class org.omg.CORBA.portable.OutputStream extends java.io.OutputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
 OuputStream is the Java API for writing IDL types
 to CDR marshal streams. These methods are used by the ORB to
 marshal IDL types as well as to insert IDL types into Anys.
 The <code>_array</code> versions of the methods can be directly
 used to write sequences and arrays of IDL types.

 @version 1.13, 04/22/98
 @since   JDK1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract org.omg.CORBA.portable.InputStream org.omg.CORBA.portable.OutputStream.create_input_stream()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an input stream with the same buffer.
@return an input stream with the same buffer.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_boolean(boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a boolean value to this stream.
 @param value the value to be written.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_char(char value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a char value to this stream.
 @param value the value to be written.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_wchar(char value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a wide char value to this stream.
 @param value the value to be written.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_octet(byte value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a CORBA octet (i.e. byte) value to this stream.
 @param value the value to be written.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_short(short value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a short value to this stream.
 @param value the value to be written.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_ushort(short value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes an unsigned short value to this stream.
 @param value the value to be written.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_long(int value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a CORBA long (i.e. Java int) value to this stream.
 @param value the value to be written.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_ulong(int value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes an unsigned CORBA long (i.e. Java int) value to this stream.
 @param value the value to be written.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_longlong(long value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a CORBA longlong (i.e. Java long) value to this stream.
 @param value the value to be written.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_ulonglong(long value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes an unsigned CORBA longlong (i.e. Java long) value to this stream.
 @param value the value to be written.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_float(float value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a float value to this stream.
 @param value the value to be written.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_double(double value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a double value to this stream.
 @param value the value to be written.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_string(String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a string value to this stream.
 @param value the value to be written.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_wstring(String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a wide string value to this stream.
 @param value the value to be written.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_boolean_array(boolean[] value, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes an array of booleans on this output stream.
 @param value the array to be written.
 @param offset offset on the stream.
 @param length length of buffer to write.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_char_array(char[] value, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes an array of chars on this output stream.
 @param value the array to be written.
 @param offset offset on the stream.
 @param length length of buffer to write.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_wchar_array(char[] value, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes an array of wide chars on this output stream.
 @param value the array to be written.
 @param offset offset on the stream.
 @param length length of buffer to write.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_octet_array(byte[] value, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes an array of CORBA octets (bytes) on this output stream.
 @param value the array to be written.
 @param offset offset on the stream.
 @param length length of buffer to write.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_short_array(short[] value, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes an array of shorts on this output stream.
 @param value the array to be written.
 @param offset offset on the stream.
 @param length length of buffer to write.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_ushort_array(short[] value, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes an array of unsigned shorts on this output stream.
 @param value the array to be written.
 @param offset offset on the stream.
 @param length length of buffer to write.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_long_array(int[] value, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes an array of CORBA longs (i.e. Java ints) on this output stream.
 @param value the array to be written.
 @param offset offset on the stream.
 @param length length of buffer to write.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_ulong_array(int[] value, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes an array of unsigned CORBA longs (i.e. Java ints) on this output stream.
 @param value the array to be written.
 @param offset offset on the stream.
 @param length length of buffer to write.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_longlong_array(long[] value, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes an array of CORBA longlongs (i.e. Java longs) on this output stream.
 @param value the array to be written.
 @param offset offset on the stream.
 @param length length of buffer to write.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_ulonglong_array(long[] value, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes an array of unsigned CORBA longlongs (i.e. Java ints) on this output stream.
 @param value the array to be written.
 @param offset offset on the stream.
 @param length length of buffer to write.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_float_array(float[] value, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes an array of floats on this output stream.
 @param value the array to be written.
 @param offset offset on the stream.
 @param length length of buffer to write.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_double_array(double[] value, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes an array of doubles on this output stream.
 @param value the array to be written.
 @param offset offset on the stream.
 @param length length of buffer to write.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_Object(Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a CORBA Object on this output stream.
 @param value the value to be written.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_TypeCode(TypeCode value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a TypeCode on this output stream.
 @param value the value to be written.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void org.omg.CORBA.portable.OutputStream.write_any(Any value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes an Any on this output stream.
 @param value the value to be written.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.portable.OutputStream.write_Principal(Principal value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a Principle on this output stream.
 @param value the value to be written.
 @deprecated Deprecated by CORBA 2.2.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.portable.OutputStream.write(int b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Writes an integer (length of arrays) onto this stream.
 @param b the value to be written.
 @throws java.io.IOException if there is an input/output error 
 @see <a href="package-summary.html#unimpl"><code>portable</code>
 package comments for unimplemented features</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.portable.OutputStream.write_fixed(BigDecimal value)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Writes a BigDecimal number.
 @param value a BidDecimal--value to be written.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.portable.OutputStream.write_Context(Context ctx, ContextList contexts)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Writes a CORBA context on this stream. The
 Context is marshaled as a sequence of strings.
 Only those Context values specified in the contexts 
 parameter are actually written.
 @param ctx a CORBA context
 @param contexts a <code>ContextList</code> object containing the list of contexts
        to be written
 @see <a href="package-summary.html#unimpl"><code>portable</code>
 package comments for unimplemented features</a>

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.ORB org.omg.CORBA.portable.OutputStream.orb()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the ORB that created this OutputStream.
 @return the ORB that created this OutputStream
 @see <a href="package-summary.html#unimpl"><code>portable</code>
 package comments for unimplemented features</a>

<!-- END DATA -->
