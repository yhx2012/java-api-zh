<!-- BEGIN KEY -->
public class org.omg.CORBA._PolicyStub extends org.omg.CORBA.portable.ObjectImpl implements org.omg.CORBA.Policy
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Stub for <tt>Policy</tt>.  For more information on 
 Stub files, see <a href="doc-files/generatedfiles.html#stub">
 "Generated Files: Stubs"</a>.<P>
 org/omg/CORBA/_PolicyStub.java
 Generated by the IDL-to-Java compiler (portable), version "3.0"
 from ../../../../../src/share/classes/org/omg/PortableServer/corba.idl.
 Saturday, July 17, 1999 12:26:20 AM PDT

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA._PolicyStub()
<!-- END KEY -->
<!-- BEGIN DATA -->
Constructors
 NOTE:  If the default constructor is used, the
        object is useless until _set_delegate (...)
        is called.

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA._PolicyStub(Delegate delegate)
<!-- END KEY -->
<!-- BEGIN DATA -->
Constructs a <code>_PolicyStub</code> object initialized
 with the given <code>Delegate</code> object.

 @param delegate a Delegate Object

<!-- END DATA -->
<!-- BEGIN KEY -->
public int org.omg.CORBA._PolicyStub.policy_type()
<!-- END KEY -->
<!-- BEGIN DATA -->
Returns the constant value that corresponds to the 
 type of the policy object.  The values of 
 the polivy objectys are allocated by the OMG.
 New values for PolicyType should be obtained from the OMG by
 sending mail to request@omg.org.  In general the constant
 values that are allocated are defined in conjunction with
 the definition of the corresponding policy object.
 @return the constant value that corresponds to the type of
 the policy object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Policy org.omg.CORBA._PolicyStub.copy()
<!-- END KEY -->
<!-- BEGIN DATA -->
Copies the policy object. The copy does not retain any
 relationships that the policy had with any domain or object.
 @return the copy of the policy object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA._PolicyStub.destroy()
<!-- END KEY -->
<!-- BEGIN DATA -->
Destroys the policy object.  It is the responsibility of
 the policy object to determine whether it can be destroyed.

<!-- END DATA -->
