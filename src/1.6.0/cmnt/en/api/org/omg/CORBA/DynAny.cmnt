<!-- BEGIN KEY -->
public interface org.omg.CORBA.DynAny extends org.omg.CORBA.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
Enables <tt>org.omg.CORBA.Any</tt> values to be dynamically 
 interpreted (traversed) and
  constructed. A <tt>DynAny</tt> object is associated with a data value
  which may correspond to a copy of the value inserted into an <tt>Any</tt>.
  The <tt>DynAny</tt> APIs enable traversal of the data value associated with an
  Any at runtime and extraction of the primitive constituents of the
  data value.
 @deprecated Use the new <a href="../DynamicAny/DynAny.html">DynAny</a> instead

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.TypeCode org.omg.CORBA.DynAny.type()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>TypeCode</code> of the object inserted into
 this <code>DynAny</code>.

 @return the <code>TypeCode</code> object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.assign(DynAny dyn_any) throws org.omg.CORBA.DynAnyPackage.Invalid
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copy the contents from one Dynamic Any into another.

 @param dyn_any the <code>DynAny</code> object whose contents
                are assigned to this <code>DynAny</code>. 
 @throws Invalid if the source <code>DynAny</code> is
            invalid 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.from_any(Any value) throws org.omg.CORBA.DynAnyPackage.Invalid
<!-- END KEY -->
<!-- BEGIN DATA -->
 Make a <code>DynAny</code> object from an <code>Any</code>
 object.

 @param value the <code>Any</code> object.
 @throws Invalid if the source <code>Any</code> object is
                    empty or bad

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Any org.omg.CORBA.DynAny.to_any() throws org.omg.CORBA.DynAnyPackage.Invalid
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convert a <code>DynAny</code> object to an <code>Any</code>
 object.

 @return the <code>Any</code> object.
 @throws Invalid if this <code>DynAny</code> is empty or
                    bad.
            created or does not contain a meaningful value

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.destroy()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Destroys this <code>DynAny</code> object and frees any resources
 used to represent the data value associated with it. This method
 also destroys all <code>DynAny</code> objects obtained from it.
 <p>
 Destruction of <code>DynAny</code> objects should be handled with
 care, taking into account issues dealing with the representation of 
 data values associated with <code>DynAny</code> objects.  A programmer
 who wants to destroy a <code>DynAny</code> object but still be able
 to manipulate some component of the data value associated with it,
 should first create a <code>DynAny</code> object for the component
 and then make a copy of the created <code>DynAny</code> object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.DynAny org.omg.CORBA.DynAny.copy()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Clones this <code>DynAny</code> object.

 @return a copy of this <code>DynAny</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_boolean(boolean value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the given <code>boolean</code> as the value for this
 <code>DynAny</code> object.

 <p> If this method is called on a constructed <code>DynAny</code>
 object, it initializes the next component of the constructed data
 value associated with this <code>DynAny</code> object.

 @param value the <code>boolean</code> to insert into this
              <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.InvalidValue
            if the value inserted is not consistent with the type
            of the accessed component in this <code>DynAny</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_octet(byte value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the given <code>byte</code> as the value for this
 <code>DynAny</code> object.

 <p> If this method is called on a constructed <code>DynAny</code>
 object, it initializes the next component of the constructed data
 value associated with this <code>DynAny</code> object.

 @param value the <code>byte</code> to insert into this
              <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.InvalidValue
            if the value inserted is not consistent with the type
            of the accessed component in this <code>DynAny</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_char(char value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the given <code>char</code> as the value for this
 <code>DynAny</code> object.

 <p> If this method is called on a constructed <code>DynAny</code>
 object, it initializes the next component of the constructed data
 value associated with this <code>DynAny</code> object.

 @param value the <code>char</code> to insert into this
              <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.InvalidValue
            if the value inserted is not consistent with the type
            of the accessed component in this <code>DynAny</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_short(short value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the given <code>short</code> as the value for this
 <code>DynAny</code> object.

 <p> If this method is called on a constructed <code>DynAny</code>
 object, it initializes the next component of the constructed data
 value associated with this <code>DynAny</code> object.

 @param value the <code>short</code> to insert into this
              <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.InvalidValue
            if the value inserted is not consistent with the type
            of the accessed component in this <code>DynAny</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_ushort(short value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the given <code>short</code> as the value for this
 <code>DynAny</code> object.

 <p> If this method is called on a constructed <code>DynAny</code>
 object, it initializes the next component of the constructed data
 value associated with this <code>DynAny</code> object.

 @param value the <code>short</code> to insert into this
              <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.InvalidValue
            if the value inserted is not consistent with the type
            of the accessed component in this <code>DynAny</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_long(int value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the given <code>int</code> as the value for this
 <code>DynAny</code> object.

 <p> If this method is called on a constructed <code>DynAny</code>
 object, it initializes the next component of the constructed data
 value associated with this <code>DynAny</code> object.

 @param value the <code>int</code> to insert into this
              <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.InvalidValue
            if the value inserted is not consistent with the type
            of the accessed component in this <code>DynAny</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_ulong(int value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the given <code>int</code> as the value for this
 <code>DynAny</code> object.

 <p> If this method is called on a constructed <code>DynAny</code>
 object, it initializes the next component of the constructed data
 value associated with this <code>DynAny</code> object.

 @param value the <code>int</code> to insert into this
              <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.InvalidValue
            if the value inserted is not consistent with the type
            of the accessed component in this <code>DynAny</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_float(float value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the given <code>float</code> as the value for this
 <code>DynAny</code> object.

 <p> If this method is called on a constructed <code>DynAny</code>
 object, it initializes the next component of the constructed data
 value associated with this <code>DynAny</code> object.

 @param value the <code>float</code> to insert into this
              <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.InvalidValue
            if the value inserted is not consistent with the type
            of the accessed component in this <code>DynAny</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_double(double value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the given <code>double</code> as the value for this
 <code>DynAny</code> object.

 <p> If this method is called on a constructed <code>DynAny</code>
 object, it initializes the next component of the constructed data
 value associated with this <code>DynAny</code> object.

 @param value the <code>double</code> to insert into this
              <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.InvalidValue
            if the value inserted is not consistent with the type
            of the accessed component in this <code>DynAny</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_string(String value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the given <code>String</code> object as the value for this
 <code>DynAny</code> object.

 <p> If this method is called on a constructed <code>DynAny</code>
 object, it initializes the next component of the constructed data
 value associated with this <code>DynAny</code> object.

 @param value the <code>String</code> to insert into this
              <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.InvalidValue
            if the value inserted is not consistent with the type
            of the accessed component in this <code>DynAny</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_reference(Object value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the given <code>org.omg.CORBA.Object</code> as the value for this
 <code>DynAny</code> object.

 <p> If this method is called on a constructed <code>DynAny</code>
 object, it initializes the next component of the constructed data
 value associated with this <code>DynAny</code> object.

 @param value the <code>org.omg.CORBA.Object</code> to insert into this
              <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.InvalidValue
            if the value inserted is not consistent with the type
            of the accessed component in this <code>DynAny</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_typecode(TypeCode value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the given <code>org.omg.CORBA.TypeCode</code> as the value for this
 <code>DynAny</code> object.

 <p> If this method is called on a constructed <code>DynAny</code>
 object, it initializes the next component of the constructed data
 value associated with this <code>DynAny</code> object.

 @param value the <code>org.omg.CORBA.TypeCode</code> to insert into this
              <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.InvalidValue
            if the value inserted is not consistent with the type
            of the accessed component in this <code>DynAny</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_longlong(long value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the given <code>long</code> as the value for this
 <code>DynAny</code> object.

 <p> If this method is called on a constructed <code>DynAny</code>
 object, it initializes the next component of the constructed data
 value associated with this <code>DynAny</code> object.

 @param value the <code>long</code> to insert into this
              <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.InvalidValue
            if the value inserted is not consistent with the type
            of the accessed component in this <code>DynAny</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_ulonglong(long value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the given <code>long</code> as the value for this
 <code>DynAny</code> object.

 <p> If this method is called on a constructed <code>DynAny</code>
 object, it initializes the next component of the constructed data
 value associated with this <code>DynAny</code> object.

 @param value the <code>long</code> to insert into this
              <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.InvalidValue
            if the value inserted is not consistent with the type
            of the accessed component in this <code>DynAny</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_wchar(char value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the given <code>char</code> as the value for this
 <code>DynAny</code> object.

 <p> If this method is called on a constructed <code>DynAny</code>
 object, it initializes the next component of the constructed data
 value associated with this <code>DynAny</code> object.

 @param value the <code>char</code> to insert into this
              <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.InvalidValue
            if the value inserted is not consistent with the type
            of the accessed component in this <code>DynAny</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_wstring(String value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the given <code>String</code> as the value for this
 <code>DynAny</code> object.

 <p> If this method is called on a constructed <code>DynAny</code>
 object, it initializes the next component of the constructed data
 value associated with this <code>DynAny</code> object.

 @param value the <code>String</code> to insert into this
              <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.InvalidValue
            if the value inserted is not consistent with the type
            of the accessed component in this <code>DynAny</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_any(Any value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the given <code>org.omg.CORBA.Any</code> object as the value for this
 <code>DynAny</code> object.

 <p> If this method is called on a constructed <code>DynAny</code>
 object, it initializes the next component of the constructed data
 value associated with this <code>DynAny</code> object.

 @param value the <code>org.omg.CORBA.Any</code> object to insert into this
              <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.InvalidValue
            if the value inserted is not consistent with the type
            of the accessed component in this <code>DynAny</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.insert_val(Serializable value) throws org.omg.CORBA.DynAnyPackage.InvalidValue
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the given <code>java.io.Serializable</code> object as the value for this
 <code>DynAny</code> object.

 <p> If this method is called on a constructed <code>DynAny</code>
 object, it initializes the next component of the constructed data
 value associated with this <code>DynAny</code> object.

 @param value the <code>java.io.Serializable</code> object to insert into this
              <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.InvalidValue
            if the value inserted is not consistent with the type
            of the accessed component in this <code>DynAny</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Serializable org.omg.CORBA.DynAny.get_val() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>java.io.Serializable</code> object contained
 in this <code>DynAny</code> object.

 @return the <code>java.io.Serializable</code> object that is the 
         value for this <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.TypeMismatch
               if the type code of the accessed component in this
               <code>DynAny</code> object is not equivalent to
               the type code for a <code>java.io.Serializable</code> object

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.omg.CORBA.DynAny.get_boolean() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>boolean</code> contained
 in this <code>DynAny</code> object.

 @return the <code>boolean</code> that is the 
         value for this <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.TypeMismatch
               if the type code of the accessed component in this
               <code>DynAny</code> object is not equivalent to
               the type code for a <code>boolean</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte org.omg.CORBA.DynAny.get_octet() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>byte</code> contained
 in this <code>DynAny</code> object.

 @return the <code>byte</code> that is the 
         value for this <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.TypeMismatch
               if the type code of the accessed component in this
               <code>DynAny</code> object is not equivalent to
               the type code for a <code>byte</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public char org.omg.CORBA.DynAny.get_char() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>char</code> contained
 in this <code>DynAny</code> object.

 @return the <code>char</code> that is the 
         value for this <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.TypeMismatch
               if the type code of the accessed component in this
               <code>DynAny</code> object is not equivalent to
               the type code for a <code>char</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public short org.omg.CORBA.DynAny.get_short() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>short</code> contained
 in this <code>DynAny</code> object.

 @return the <code>short</code> that is the 
         value for this <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.TypeMismatch
               if the type code of the accessed component in this
               <code>DynAny</code> object is not equivalent to
               the type code for a <code>short</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public short org.omg.CORBA.DynAny.get_ushort() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>short</code> contained
 in this <code>DynAny</code> object.

 @return the <code>short</code> that is the 
         value for this <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.TypeMismatch
               if the type code of the accessed component in this
               <code>DynAny</code> object is not equivalent to
               the type code for a <code>short</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int org.omg.CORBA.DynAny.get_long() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>int</code> contained
 in this <code>DynAny</code> object.

 @return the <code>int</code> that is the 
         value for this <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.TypeMismatch
               if the type code of the accessed component in this
               <code>DynAny</code> object is not equivalent to
               the type code for a <code>int</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int org.omg.CORBA.DynAny.get_ulong() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>int</code> contained
 in this <code>DynAny</code> object.

 @return the <code>int</code> that is the 
         value for this <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.TypeMismatch
               if the type code of the accessed component in this
               <code>DynAny</code> object is not equivalent to
               the type code for a <code>int</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public float org.omg.CORBA.DynAny.get_float() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>float</code> contained
 in this <code>DynAny</code> object.

 @return the <code>float</code> that is the 
         value for this <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.TypeMismatch
               if the type code of the accessed component in this
               <code>DynAny</code> object is not equivalent to
               the type code for a <code>float</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public double org.omg.CORBA.DynAny.get_double() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>double</code> contained
 in this <code>DynAny</code> object.

 @return the <code>double</code> that is the 
         value for this <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.TypeMismatch
               if the type code of the accessed component in this
               <code>DynAny</code> object is not equivalent to
               the type code for a <code>double</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.omg.CORBA.DynAny.get_string() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>String</code> contained
 in this <code>DynAny</code> object.

 @return the <code>String</code> that is the 
         value for this <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.TypeMismatch
               if the type code of the accessed component in this
               <code>DynAny</code> object is not equivalent to
               the type code for a <code>String</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Object org.omg.CORBA.DynAny.get_reference() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>org.omg.CORBA.Other</code> contained
 in this <code>DynAny</code> object.

 @return the <code>org.omg.CORBA.Other</code> that is the 
         value for this <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.TypeMismatch
               if the type code of the accessed component in this
               <code>DynAny</code> object is not equivalent to
               the type code for an <code>org.omg.CORBA.Other</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.TypeCode org.omg.CORBA.DynAny.get_typecode() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>org.omg.CORBA.TypeCode</code> contained
 in this <code>DynAny</code> object.

 @return the <code>org.omg.CORBA.TypeCode</code> that is the 
         value for this <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.TypeMismatch
               if the type code of the accessed component in this
               <code>DynAny</code> object is not equivalent to
               the type code for a <code>org.omg.CORBA.TypeCode</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public long org.omg.CORBA.DynAny.get_longlong() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>long</code> contained
 in this <code>DynAny</code> object.

 @return the <code>long</code> that is the 
         value for this <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.TypeMismatch
               if the type code of the accessed component in this
               <code>DynAny</code> object is not equivalent to
               the type code for a <code>long</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public long org.omg.CORBA.DynAny.get_ulonglong() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>long</code> contained
 in this <code>DynAny</code> object.

 @return the <code>long</code> that is the 
         value for this <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.TypeMismatch
               if the type code of the accessed component in this
               <code>DynAny</code> object is not equivalent to
               the type code for a <code>long</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public char org.omg.CORBA.DynAny.get_wchar() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>char</code> contained
 in this <code>DynAny</code> object.

 @return the <code>char</code> that is the 
         value for this <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.TypeMismatch
               if the type code of the accessed component in this
               <code>DynAny</code> object is not equivalent to
               the type code for a <code>char</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String org.omg.CORBA.DynAny.get_wstring() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>String</code> contained
 in this <code>DynAny</code> object.

 @return the <code>String</code> that is the 
         value for this <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.TypeMismatch
               if the type code of the accessed component in this
               <code>DynAny</code> object is not equivalent to
               the type code for a <code>String</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.Any org.omg.CORBA.DynAny.get_any() throws org.omg.CORBA.DynAnyPackage.TypeMismatch
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the <code>org.omg.CORBA.Any</code> contained
 in this <code>DynAny</code> object.

 @return the <code>org.omg.CORBA.Any</code> that is the 
         value for this <code>DynAny</code> object
 @throws org.omg.CORBA.DynAnyPackage.TypeMismatch
               if the type code of the accessed component in this
               <code>DynAny</code> object is not equivalent to
               the type code for an <code>org.omg.CORBA.Any</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.omg.CORBA.DynAny org.omg.CORBA.DynAny.current_component()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>DynAny</code> object reference that can
 be used to get/set the value of the component currently accessed.
 The appropriate <code>insert</code> method
 can be called on the resulting <code>DynAny</code> object
 to initialize the component.
 The appropriate <code>get</code> method
 can be called on the resulting <code>DynAny</code> object
 to extract the value of the component.

 @return a <code>DynAny</code> object reference that can be
         used to retrieve or set the value of the component currently
         accessed

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.omg.CORBA.DynAny.next()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Moves to the next component of this <code>DynAny</code> object.
 This method is used for iterating through the components of
 a constructed type, effectively moving a pointer from one
 component to the next.  The pointer starts out on the first
 component when a <code>DynAny</code> object is created.

 @return <code>true</code> if the pointer points to a component;
 <code>false</code> if there are no more components or this
 <code>DynAny</code> is associated with a basic type rather than
 a constructed type

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.omg.CORBA.DynAny.seek(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Moves the internal pointer to the given index. Logically, this method
 sets a new offset for this pointer.  

 @param index an <code>int</code> indicating the position to which
              the pointer should move.  The first position is 0.
 @return <code>true</code> if the pointer points to a component;
 <code>false</code> if there is no component at the designated
 index.  If this <code>DynAny</code> object is associated with a
 basic type, this method returns <code>false</code> for any index
 other than 0.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.omg.CORBA.DynAny.rewind()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Moves the internal pointer to the first component.

<!-- END DATA -->
