<!-- BEGIN KEY -->
public class org.xml.sax.helpers.XMLFilterImpl extends java.lang.Object implements org.xml.sax.XMLFilter, org.xml.sax.EntityResolver, org.xml.sax.DTDHandler, org.xml.sax.ContentHandler, org.xml.sax.ErrorHandler
<!-- END KEY -->
<!-- BEGIN DATA -->
 Base class for deriving an XML filter.

 <blockquote>
 <em>This module, both source code and documentation, is in the
 Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
 See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>
 for further information.
 </blockquote>

 <p>This class is designed to sit between an {@link org.xml.sax.XMLReader
 XMLReader} and the client application's event handlers.  By default, it
 does nothing but pass requests up to the reader and events
 on to the handlers unmodified, but subclasses can override
 specific methods to modify the event stream or the configuration
 requests as they pass through.</p>

 @since SAX 2.0
 @author David Megginson
 @version 2.0.1 (sax2r2)
 @see org.xml.sax.XMLFilter
 @see org.xml.sax.XMLReader
 @see org.xml.sax.EntityResolver
 @see org.xml.sax.DTDHandler
 @see org.xml.sax.ContentHandler
 @see org.xml.sax.ErrorHandler

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.helpers.XMLFilterImpl()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct an empty XML filter, with no parent.

 <p>This filter will have no parent: you must assign a parent
 before you start a parse or do any configuration with
 setFeature or setProperty, unless you use this as a pure event
 consumer rather than as an {@link XMLReader}.</p>

 @see org.xml.sax.XMLReader#setFeature
 @see org.xml.sax.XMLReader#setProperty
 @see #setParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.helpers.XMLFilterImpl(XMLReader parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct an XML filter with the specified parent.

 @see #setParent
 @see #getParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.setParent(XMLReader parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the parent reader.

 <p>This is the {@link org.xml.sax.XMLReader XMLReader} from which 
 this filter will obtain its events and to which it will pass its 
 configuration requests.  The parent may itself be another filter.</p>

 <p>If there is no parent reader set, any attempt to parse
 or to set or get a feature or property will fail.</p>

 @param parent The parent XML reader.
 @see #getParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.XMLReader org.xml.sax.helpers.XMLFilterImpl.getParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the parent reader.

 @return The parent XML reader, or null if none is set.
 @see #setParent

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.setFeature(String name, boolean value) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the value of a feature.

 <p>This will always fail if the parent is null.</p>

 @param name The feature name.
 @param value The requested feature value.
 @exception org.xml.sax.SAXNotRecognizedException If the feature
            value can't be assigned or retrieved from the parent.
 @exception org.xml.sax.SAXNotSupportedException When the
            parent recognizes the feature name but 
            cannot set the requested value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean org.xml.sax.helpers.XMLFilterImpl.getFeature(String name) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Look up the value of a feature.

 <p>This will always fail if the parent is null.</p>

 @param name The feature name.
 @return The current value of the feature.
 @exception org.xml.sax.SAXNotRecognizedException If the feature
            value can't be assigned or retrieved from the parent.
 @exception org.xml.sax.SAXNotSupportedException When the
            parent recognizes the feature name but 
            cannot determine its value at this time.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.setProperty(String name, Object value) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the value of a property.

 <p>This will always fail if the parent is null.</p>

 @param name The property name.
 @param value The requested property value.
 @exception org.xml.sax.SAXNotRecognizedException If the property
            value can't be assigned or retrieved from the parent.
 @exception org.xml.sax.SAXNotSupportedException When the
            parent recognizes the property name but 
            cannot set the requested value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object org.xml.sax.helpers.XMLFilterImpl.getProperty(String name) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Look up the value of a property.

 @param name The property name.
 @return The current value of the property.
 @exception org.xml.sax.SAXNotRecognizedException If the property
            value can't be assigned or retrieved from the parent.
 @exception org.xml.sax.SAXNotSupportedException When the
            parent recognizes the property name but 
            cannot determine its value at this time.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.setEntityResolver(EntityResolver resolver)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the entity resolver.

 @param resolver The new entity resolver.

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.EntityResolver org.xml.sax.helpers.XMLFilterImpl.getEntityResolver()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the current entity resolver.

 @return The current entity resolver, or null if none was set.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.setDTDHandler(DTDHandler handler)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the DTD event handler.

 @param handler the new DTD handler

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.DTDHandler org.xml.sax.helpers.XMLFilterImpl.getDTDHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the current DTD event handler.

 @return The current DTD handler, or null if none was set.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.setContentHandler(ContentHandler handler)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the content event handler.

 @param handler the new content handler

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.ContentHandler org.xml.sax.helpers.XMLFilterImpl.getContentHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the content event handler.

 @return The current content handler, or null if none was set.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.setErrorHandler(ErrorHandler handler)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the error event handler.

 @param handler the new error handler

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.ErrorHandler org.xml.sax.helpers.XMLFilterImpl.getErrorHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the current error event handler.

 @return The current error handler, or null if none was set.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.parse(InputSource input) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Parse a document.

 @param input The input source for the document entity.
 @exception org.xml.sax.SAXException Any SAX exception, possibly
            wrapping another exception.
 @exception java.io.IOException An IO exception from the parser,
            possibly from a byte stream or character stream
            supplied by the application.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.parse(String systemId) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Parse a document.

 @param systemId The system identifier as a fully-qualified URI.
 @exception org.xml.sax.SAXException Any SAX exception, possibly
            wrapping another exception.
 @exception java.io.IOException An IO exception from the parser,
            possibly from a byte stream or character stream
            supplied by the application.

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.xml.sax.InputSource org.xml.sax.helpers.XMLFilterImpl.resolveEntity(String publicId, String systemId) throws org.xml.sax.SAXException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Filter an external entity resolution.

 @param publicId The entity's public identifier, or null.
 @param systemId The entity's system identifier.
 @return A new InputSource or null for the default.
 @exception org.xml.sax.SAXException The client may throw
            an exception during processing.
 @exception java.io.IOException The client may throw an
            I/O-related exception while obtaining the
            new InputSource.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.notationDecl(String name, String publicId, String systemId) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Filter a notation declaration event.

 @param name The notation name.
 @param publicId The notation's public identifier, or null.
 @param systemId The notation's system identifier, or null.
 @exception org.xml.sax.SAXException The client may throw
            an exception during processing.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.unparsedEntityDecl(String name, String publicId, String systemId, String notationName) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Filter an unparsed entity declaration event.

 @param name The entity name.
 @param publicId The entity's public identifier, or null.
 @param systemId The entity's system identifier, or null.
 @param notationName The name of the associated notation.
 @exception org.xml.sax.SAXException The client may throw
            an exception during processing.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.setDocumentLocator(Locator locator)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Filter a new document locator event.

 @param locator The document locator.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.startDocument() throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Filter a start document event.

 @exception org.xml.sax.SAXException The client may throw
            an exception during processing.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.endDocument() throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Filter an end document event.

 @exception org.xml.sax.SAXException The client may throw
            an exception during processing.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.startPrefixMapping(String prefix, String uri) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Filter a start Namespace prefix mapping event.

 @param prefix The Namespace prefix.
 @param uri The Namespace URI.
 @exception org.xml.sax.SAXException The client may throw
            an exception during processing.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.endPrefixMapping(String prefix) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Filter an end Namespace prefix mapping event.

 @param prefix The Namespace prefix.
 @exception org.xml.sax.SAXException The client may throw
            an exception during processing.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.startElement(String uri, String localName, String qName, Attributes atts) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Filter a start element event.

 @param uri The element's Namespace URI, or the empty string.
 @param localName The element's local name, or the empty string.
 @param qName The element's qualified (prefixed) name, or the empty
        string.
 @param atts The element's attributes.
 @exception org.xml.sax.SAXException The client may throw
            an exception during processing.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.endElement(String uri, String localName, String qName) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Filter an end element event.

 @param uri The element's Namespace URI, or the empty string.
 @param localName The element's local name, or the empty string.
 @param qName The element's qualified (prefixed) name, or the empty
        string.
 @exception org.xml.sax.SAXException The client may throw
            an exception during processing.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.characters(char[] ch, int start, int length) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Filter a character data event.

 @param ch An array of characters.
 @param start The starting position in the array.
 @param length The number of characters to use from the array.
 @exception org.xml.sax.SAXException The client may throw
            an exception during processing.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.ignorableWhitespace(char[] ch, int start, int length) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Filter an ignorable whitespace event.

 @param ch An array of characters.
 @param start The starting position in the array.
 @param length The number of characters to use from the array.
 @exception org.xml.sax.SAXException The client may throw
            an exception during processing.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.processingInstruction(String target, String data) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Filter a processing instruction event.

 @param target The processing instruction target.
 @param data The text following the target.
 @exception org.xml.sax.SAXException The client may throw
            an exception during processing.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.skippedEntity(String name) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Filter a skipped entity event.

 @param name The name of the skipped entity.
 @exception org.xml.sax.SAXException The client may throw
            an exception during processing.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.warning(SAXParseException e) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Filter a warning event.

 @param e The warning as an exception.
 @exception org.xml.sax.SAXException The client may throw
            an exception during processing.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.error(SAXParseException e) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Filter an error event.

 @param e The error as an exception.
 @exception org.xml.sax.SAXException The client may throw
            an exception during processing.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.xml.sax.helpers.XMLFilterImpl.fatalError(SAXParseException e) throws org.xml.sax.SAXException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Filter a fatal error event.

 @param e The error as an exception.
 @exception org.xml.sax.SAXException The client may throw
            an exception during processing.

<!-- END DATA -->
