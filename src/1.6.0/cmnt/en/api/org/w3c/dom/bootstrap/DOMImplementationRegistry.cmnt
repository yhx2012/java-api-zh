<!-- BEGIN KEY -->
public final class org.w3c.dom.bootstrap.DOMImplementationRegistry extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 A factory that enables applications to obtain instances of
 <code>DOMImplementation</code>.

 <p>
 Example:
 </p>

 <pre class='example'>
  // get an instance of the DOMImplementation registry
  DOMImplementationRegistry registry =
       DOMImplementationRegistry.newInstance();
  // get a DOM implementation the Level 3 XML module
  DOMImplementation domImpl =
       registry.getDOMImplementation("XML 3.0");
 </pre>

 <p>
 This provides an application with an implementation-independent starting
 point. DOM implementations may modify this class to meet new security
 standards or to provide *additional* fallbacks for the list of
 DOMImplementationSources.
 </p>

 @see DOMImplementation
 @see DOMImplementationSource
 @since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String org.w3c.dom.bootstrap.DOMImplementationRegistry.PROPERTY
<!-- END KEY -->
<!-- BEGIN DATA -->
 The system property to specify the
 DOMImplementationSource class names.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static org.w3c.dom.bootstrap.DOMImplementationRegistry org.w3c.dom.bootstrap.DOMImplementationRegistry.newInstance() throws java.lang.ClassNotFoundException, java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.ClassCastException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Obtain a new instance of a <code>DOMImplementationRegistry</code>.


 The <code>DOMImplementationRegistry</code> is initialized by the
 application or the implementation, depending on the context, by
 first checking the value of the Java system property
 <code>org.w3c.dom.DOMImplementationSourceList</code> and
 the the service provider whose contents are at
 "<code>META_INF/services/org.w3c.dom.DOMImplementationSourceList</code>"
 The value of this property is a white-space separated list of
 names of availables classes implementing the
 <code>DOMImplementationSource</code> interface. Each class listed
 in the class name list is instantiated and any exceptions
 encountered are thrown to the application.

 @return an initialized instance of DOMImplementationRegistry
 @throws ClassNotFoundException
     If any specified class can not be found
 @throws InstantiationException
     If any specified class is an interface or abstract class
 @throws IllegalAccessException
     If the default constructor of a specified class is not accessible
 @throws ClassCastException
     If any specified class does not implement
 <code>DOMImplementationSource</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.DOMImplementation org.w3c.dom.bootstrap.DOMImplementationRegistry.getDOMImplementation(String features)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the first implementation that has the desired
 features, or <code>null</code> if none is found.

 @param features
            A string that specifies which features are required. This is
            a space separated list in which each feature is specified by
            its name optionally followed by a space and a version number.
            This is something like: "XML 1.0 Traversal +Events 2.0"
 @return An implementation that has the desired features,
         or <code>null</code> if none found.

<!-- END DATA -->
<!-- BEGIN KEY -->
public org.w3c.dom.DOMImplementationList org.w3c.dom.bootstrap.DOMImplementationRegistry.getDOMImplementationList(String features)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return a list of implementations that support the
 desired features.

 @param features
            A string that specifies which features are required. This is
            a space separated list in which each feature is specified by
            its name optionally followed by a space and a version number.
            This is something like: "XML 1.0 Traversal +Events 2.0"
 @return A list of DOMImplementations that support the desired features.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void org.w3c.dom.bootstrap.DOMImplementationRegistry.addSource(DOMImplementationSource s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Register an implementation.

 @param s The source to be registered, may not be <code>null</code>

<!-- END DATA -->
