<!-- BEGIN KEY -->
public class org.w3c.dom.DOMException extends java.lang.RuntimeException
<!-- END KEY -->
<!-- BEGIN DATA -->
 DOM operations only raise exceptions in "exceptional" circumstances, i.e., 
 when an operation is impossible to perform (either for logical reasons, 
 because data is lost, or because the implementation has become unstable). 
 In general, DOM methods return specific error values in ordinary 
 processing situations, such as out-of-bound errors when using 
 <code>NodeList</code>.
 <p>Implementations should raise other exceptions under other circumstances. 
 For example, implementations should raise an implementation-dependent 
 exception if a <code>null</code> argument is passed when <code>null</code>
  was not expected.
 <p>Some languages and object systems do not support the concept of 
 exceptions. For such systems, error conditions may be indicated using 
 native error reporting mechanisms. For some bindings, for example, 
 methods may return error codes similar to those listed in the 
 corresponding method descriptions.
 <p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.DOMException.INDEX_SIZE_ERR
<!-- END KEY -->
<!-- BEGIN DATA -->
 If index or size is negative, or greater than the allowed value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.DOMException.DOMSTRING_SIZE_ERR
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the specified range of text does not fit into a 
 <code>DOMString</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.DOMException.HIERARCHY_REQUEST_ERR
<!-- END KEY -->
<!-- BEGIN DATA -->
 If any <code>Node</code> is inserted somewhere it doesn't belong.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.DOMException.WRONG_DOCUMENT_ERR
<!-- END KEY -->
<!-- BEGIN DATA -->
 If a <code>Node</code> is used in a different document than the one 
 that created it (that doesn't support it).

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.DOMException.INVALID_CHARACTER_ERR
<!-- END KEY -->
<!-- BEGIN DATA -->
 If an invalid or illegal character is specified, such as in an XML name.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.DOMException.NO_DATA_ALLOWED_ERR
<!-- END KEY -->
<!-- BEGIN DATA -->
 If data is specified for a <code>Node</code> which does not support 
 data.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.DOMException.NO_MODIFICATION_ALLOWED_ERR
<!-- END KEY -->
<!-- BEGIN DATA -->
 If an attempt is made to modify an object where modifications are not 
 allowed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.DOMException.NOT_FOUND_ERR
<!-- END KEY -->
<!-- BEGIN DATA -->
 If an attempt is made to reference a <code>Node</code> in a context 
 where it does not exist.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.DOMException.NOT_SUPPORTED_ERR
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the implementation does not support the requested type of object or 
 operation.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.DOMException.INUSE_ATTRIBUTE_ERR
<!-- END KEY -->
<!-- BEGIN DATA -->
 If an attempt is made to add an attribute that is already in use 
 elsewhere.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.DOMException.INVALID_STATE_ERR
<!-- END KEY -->
<!-- BEGIN DATA -->
 If an attempt is made to use an object that is not, or is no longer, 
 usable.
 @since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.DOMException.SYNTAX_ERR
<!-- END KEY -->
<!-- BEGIN DATA -->
 If an invalid or illegal string is specified.
 @since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.DOMException.INVALID_MODIFICATION_ERR
<!-- END KEY -->
<!-- BEGIN DATA -->
 If an attempt is made to modify the type of the underlying object.
 @since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.DOMException.NAMESPACE_ERR
<!-- END KEY -->
<!-- BEGIN DATA -->
 If an attempt is made to create or change an object in a way which is 
 incorrect with regard to namespaces.
 @since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.DOMException.INVALID_ACCESS_ERR
<!-- END KEY -->
<!-- BEGIN DATA -->
 If a parameter or an operation is not supported by the underlying 
 object.
 @since DOM Level 2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.DOMException.VALIDATION_ERR
<!-- END KEY -->
<!-- BEGIN DATA -->
 If a call to a method such as <code>insertBefore</code> or 
 <code>removeChild</code> would make the <code>Node</code> invalid 
 with respect to "partial validity", this exception would be raised 
 and the operation would not be done. This code is used in [<a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Val-20040127/'>DOM Level 3 Validation</a>]
 . Refer to this specification for further information.
 @since DOM Level 3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final short org.w3c.dom.DOMException.TYPE_MISMATCH_ERR
<!-- END KEY -->
<!-- BEGIN DATA -->
  If the type of an object is incompatible with the expected type of the 
 parameter associated to the object. 
 @since DOM Level 3

<!-- END DATA -->
