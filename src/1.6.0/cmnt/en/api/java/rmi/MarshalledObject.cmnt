<!-- BEGIN KEY -->
public final class java.rmi.MarshalledObject extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <code>MarshalledObject</code> contains a byte stream with the serialized
 representation of an object given to its constructor.  The <code>get</code>
 method returns a new copy of the original object, as deserialized from
 the contained byte stream.  The contained object is serialized and
 deserialized with the same serialization semantics used for marshaling
 and unmarshaling parameters and return values of RMI calls:  When the
 serialized form is created:

 <ul>
 <li> classes are annotated with a codebase URL from where the class
      can be loaded (if available), and
 <li> any remote object in the <code>MarshalledObject</code> is
      represented by a serialized instance of its stub.
 </ul>

 <p>When copy of the object is retrieved (via the <code>get</code> method),
 if the class is not available locally, it will be loaded from the
 appropriate location (specified the URL annotated with the class descriptor
 when the class was serialized.

 <p><code>MarshalledObject</code> facilitates passing objects in RMI calls
 that are not automatically deserialized immediately by the remote peer.

 @param <T> the type of the object contained in this
 <code>MarshalledObject</code>

 @version 1.35, 11/17/05
 @author  Ann Wollrath
 @author  Peter Jones
 @since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private byte[] java.rmi.MarshalledObject.objBytes
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial Bytes of serialized representation.  If <code>objBytes</code> is
 <code>null</code> then the object marshalled was a <code>null</code>
 reference.

<!-- END DATA -->
<!-- BEGIN KEY -->
private byte[] java.rmi.MarshalledObject.locBytes
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial Bytes of location annotations, which are ignored by
 <code>equals</code>.  If <code>locBytes</code> is null, there were no
 non-<code>null</code> annotations during marshalling.

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.rmi.MarshalledObject.hash
<!-- END KEY -->
<!-- BEGIN DATA -->

 @serial Stored hash code of contained object. 

 @see #hashCode

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.MarshalledObject(T obj) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <code>MarshalledObject</code> that contains the
 serialized representation of the current state of the supplied object.
 The object is serialized with the semantics used for marshaling
 parameters for RMI calls.

 @param obj the object to be serialized (must be serializable)
 @exception IOException if an <code>IOException</code> occurs; an
 <code>IOException</code> may occur if <code>obj</code> is not
 serializable.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public T java.rmi.MarshalledObject.get() throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a new copy of the contained marshalledobject.  The internal
 representation is deserialized with the semantics used for
 unmarshaling paramters for RMI calls.

 @return a copy of the contained object
 @exception IOException if an <code>IOException</code> occurs while
 deserializing the object from its internal representation.
 @exception ClassNotFoundException if a
 <code>ClassNotFoundException</code> occurs while deserializing the
 object from its internal representation.
 could not be found
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.rmi.MarshalledObject.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return a hash code for this <code>MarshalledObject</code>.

 @return a hash code

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.rmi.MarshalledObject.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares this <code>MarshalledObject</code> to another object.
 Returns true if and only if the argument refers to a
 <code>MarshalledObject</code> that contains exactly the same
 serialized representation of an object as this one does. The
 comparison ignores any class codebase annotation, meaning that
 two objects are equivalent if they have the same serialized
 representation <i>except</i> for the codebase of each class
 in the serialized representation.

 @param obj the object to compare with this <code>MarshalledObject</code>
 @return <code>true</code> if the argument contains an equaivalent
 serialized object; <code>false</code> otherwise
 @since 1.2

<!-- END DATA -->
