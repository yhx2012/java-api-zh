<!-- BEGIN KEY -->
public interface java.rmi.activation.ActivationInstantiator extends java.rmi.Remote
<!-- END KEY -->
<!-- BEGIN DATA -->
 An <code>ActivationInstantiator</code> is responsible for creating
 instances of "activatable" objects. A concrete subclass of
 <code>ActivationGroup</code> implements the <code>newInstance</code>
 method to handle creating objects within the group.

 @author 	Ann Wollrath
 @version	1.17, 11/17/05
 @see 	ActivationGroup
 @since	1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.MarshalledObject<? extends java.rmi.Remote> java.rmi.activation.ActivationInstantiator.newInstance(ActivationID id, ActivationDesc desc) throws java.rmi.activation.ActivationException, java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->
 The activator calls an instantiator's <code>newInstance</code>
 method in order to recreate in that group an object with the
 activation identifier, <code>id</code>, and descriptor,
 <code>desc</code>. The instantiator is responsible for: <ul>

 <li> determining the class for the object using the descriptor's
 <code>getClassName</code> method,

 <li> loading the class from the code location obtained from the
 descriptor (using the <code>getLocation</code> method),

 <li> creating an instance of the class by invoking the special
 "activation" constructor of the object's class that takes two
 arguments: the object's <code>ActivationID</code>, and the
 <code>MarshalledObject</code> containing object specific
 initialization data, and

 <li> returning a MarshalledObject containing the stub for the
 remote object it created </ul>

 @param id the object's activation identifier
 @param desc the object's descriptor
 @return a marshalled object containing the serialized
 representation of remote object's stub
 @exception ActivationException if object activation fails
 @exception RemoteException if remote call fails
 @since 1.2

<!-- END DATA -->
