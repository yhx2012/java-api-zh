<!-- BEGIN KEY -->
public final class java.rmi.server.UID extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <code>UID</code> represents an identifier that is unique over time
 with respect to the host it is generated on, or one of 2<sup>16</sup>
 "well-known" identifiers.

 <p>The {@link #UID()} constructor can be used to generate an
 identifier that is unique over time with respect to the host it is
 generated on.  The {@link #UID(short)} constructor can be used to
 create one of 2<sup>16</sup> well-known identifiers.

 <p>A <code>UID</code> instance contains three primitive values:
 <ul>
 <li><code>unique</code>, an <code>int</code> that uniquely identifies
 the VM that this <code>UID</code> was generated in, with respect to its
 host and at the time represented by the <code>time</code> value (an
 example implementation of the <code>unique</code> value would be a
 process identifier),
  or zero for a well-known <code>UID</code>
 <li><code>time</code>, a <code>long</code> equal to a time (as returned
 by {@link System#currentTimeMillis()}) at which the VM that this
 <code>UID</code> was generated in was alive,
 or zero for a well-known <code>UID</code>
 <li><code>count</code>, a <code>short</code> to distinguish
 <code>UID</code>s generated in the same VM with the same
 <code>time</code> value
 </ul>

 <p>An independently generated <code>UID</code> instance is unique
 over time with respect to the host it is generated on as long as
 the host requires more than one millisecond to reboot and its system
 clock is never set backward.  A globally unique identifier can be
 constructed by pairing a <code>UID</code> instance with a unique host
 identifier, such as an IP address.

 @author	Ann Wollrath
 @author	Peter Jones
 @version	1.24, 06/02/23
 @since	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
private final int java.rmi.server.UID.unique
<!-- END KEY -->
<!-- BEGIN DATA -->
 number that uniquely identifies the VM that this <code>UID</code>
 was generated in with respect to its host and at the given time
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private final long java.rmi.server.UID.time
<!-- END KEY -->
<!-- BEGIN DATA -->
 a time (as returned by {@link System#currentTimeMillis()}) at which
 the VM that this <code>UID</code> was generated in was alive
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private final short java.rmi.server.UID.count
<!-- END KEY -->
<!-- BEGIN DATA -->
 16-bit number to distinguish <code>UID</code> instances created
 in the same VM with the same time value
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.server.UID()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Generates a <code>UID</code> that is unique over time with
 respect to the host that it was generated on.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.server.UID(short num)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a "well-known" <code>UID</code>.

 There are 2<sup>16</sup> possible such well-known ids.

 <p>A <code>UID</code> created via this constructor will not
 clash with any <code>UID</code>s generated via the no-arg
 constructor.

 @param	num number for well-known <code>UID</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.rmi.server.UID.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the hash code value for this <code>UID</code>.

 @return	the hash code value for this <code>UID</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.rmi.server.UID.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares the specified object with this <code>UID</code> for
 equality.

 This method returns <code>true</code> if and only if the
 specified object is a <code>UID</code> instance with the same
 <code>unique</code>, <code>time</code>, and <code>count</code>
 values as this one.

 @param	obj the object to compare this <code>UID</code> to

 @return	<code>true</code> if the given object is equivalent to
 this one, and <code>false</code> otherwise

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.rmi.server.UID.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this <code>UID</code>.

 @return	a string representation of this <code>UID</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.rmi.server.UID.write(DataOutput out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Marshals a binary representation of this <code>UID</code> to
 a <code>DataOutput</code> instance.

 <p>Specifically, this method first invokes the given stream's
 {@link DataOutput#writeInt(int)} method with this <code>UID</code>'s
 <code>unique</code> value, then it invokes the stream's
 {@link DataOutput#writeLong(long)} method with this <code>UID</code>'s
 <code>time</code> value, and then it invokes the stream's
 {@link DataOutput#writeShort(int)} method with this <code>UID</code>'s
 <code>count</code> value.

 @param	out the <code>DataOutput</code> instance to write
 this <code>UID</code> to

 @throws	IOException if an I/O error occurs while performing
 this operation

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.rmi.server.UID java.rmi.server.UID.read(DataInput in) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs and returns a new <code>UID</code> instance by
 unmarshalling a binary representation from an
 <code>DataInput</code> instance.

 <p>Specifically, this method first invokes the given stream's
 {@link DataInput#readInt()} method to read a <code>unique</code> value,
 then it invoke's the stream's
 {@link DataInput#readLong()} method to read a <code>time</code> value,
 then it invoke's the stream's
 {@link DataInput#readShort()} method to read a <code>count</code> value,
 and then it creates and returns a new <code>UID</code> instance
 that contains the <code>unique</code>, <code>time</code>, and
 <code>count</code> values that were read from the stream.

 @param	in the <code>DataInput</code> instance to read
 <code>UID</code> from

 @return	unmarshalled <code>UID</code> instance

 @throws	IOException if an I/O error occurs while performing
 this operation

<!-- END DATA -->
