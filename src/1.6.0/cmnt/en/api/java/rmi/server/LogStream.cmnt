<!-- BEGIN KEY -->
public class java.rmi.server.LogStream extends java.io.PrintStream
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>LogStream</code> provides a mechanism for logging errors that are
 of possible interest to those monitoring a system.  

 @version 1.21, 11/17/05
 @author  Ann Wollrath (lots of code stolen from Ken Arnold)
 @since   JDK1.1
 @deprecated no replacement

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.rmi.server.LogStream.SILENT
<!-- END KEY -->
<!-- BEGIN DATA -->
log level constant (no logging). 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.rmi.server.LogStream.BRIEF
<!-- END KEY -->
<!-- BEGIN DATA -->
log level constant (brief logging). 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.rmi.server.LogStream.VERBOSE
<!-- END KEY -->
<!-- BEGIN DATA -->
log level constant (verbose logging). 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.rmi.server.LogStream java.rmi.server.LogStream.log(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the LogStream identified by the given name.  If
 a log corresponding to "name" does not exist, a log using
 the default stream is created.
 @param name name identifying the desired LogStream
 @return log associated with given name
 @since JDK1.1
 @deprecated no replacement

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.io.PrintStream java.rmi.server.LogStream.getDefaultStream()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the current default stream for new logs.
 @return default log stream
 @see #setDefaultStream
 @since JDK1.1
 @deprecated no replacement

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized void java.rmi.server.LogStream.setDefaultStream(PrintStream newDefault)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the default stream for new logs.
 @param newDefault new default log stream
 @see #getDefaultStream
 @since JDK1.1
 @deprecated no replacement

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.io.OutputStream java.rmi.server.LogStream.getOutputStream()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the current stream to which output from this log is sent.
 @return output stream for this log
 @see #setOutputStream
 @since JDK1.1
 @deprecated no replacement

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.rmi.server.LogStream.setOutputStream(OutputStream out)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the stream to which output from this log is sent.
 @param out new output stream for this log
 @see #getOutputStream
 @since JDK1.1
 @deprecated no replacement

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.rmi.server.LogStream.write(int b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Write a byte of data to the stream.  If it is not a newline, then
 the byte is appended to the internal buffer.  If it is a newline,
 then the currently buffered line is sent to the log's output
 stream, prefixed with the appropriate logging information.
 @since JDK1.1
 @deprecated no replacement

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.rmi.server.LogStream.write(byte[] b, int off, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Write a subarray of bytes.  Pass each through write byte method.
 @since JDK1.1
 @deprecated no replacement

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.rmi.server.LogStream.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return log name as string representation.
 @return log name
 @since JDK1.1
 @deprecated no replacement

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.rmi.server.LogStream.parseLevel(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convert a string name of a logging level to its internal
 integer representation.
 @param s name of logging level (e.g., 'SILENT', 'BRIEF', 'VERBOSE')
 @return corresponding integer log level
 @since JDK1.1
 @deprecated no replacement

<!-- END DATA -->
