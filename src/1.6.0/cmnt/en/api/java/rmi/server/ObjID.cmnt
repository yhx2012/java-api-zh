<!-- BEGIN KEY -->
public final class java.rmi.server.ObjID extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 An <code>ObjID</code> is used to identify a remote object exported
 to an RMI runtime.  When a remote object is exported, it is assigned
 an object identifier either implicitly or explicitly, depending on
 the API used to export.

 <p>The {@link #ObjID()} constructor can be used to generate a unique
 object identifier.  Such an <code>ObjID</code> is unique over time
 with respect to the host it is generated on.

 The {@link #ObjID(int)} constructor can be used to create a
 "well-known" object identifier.  The scope of a well-known
 <code>ObjID</code> depends on the RMI runtime it is exported to.

 <p>An <code>ObjID</code> instance contains an object number (of type
 <code>long</code>) and an address space identifier (of type
 {@link UID}).  In a unique <code>ObjID</code>, the address space
 identifier is unique with respect to a given host over time.  In a
 well-known <code>ObjID</code>, the address space identifier is
 equivalent to one returned by invoking the {@link UID#UID(short)}
 constructor with the value zero.

 <p>If the system property <code>java.rmi.server.randomIDs</code>
 is defined to equal the string <code>"true"</code> (case insensitive),
 then the {@link #ObjID()} constructor will use a cryptographically
 strong random number generator to choose the object number of the
 returned <code>ObjID</code>.

 @author	Ann Wollrath
 @author	Peter Jones
 @version	1.31, 06/02/23
 @since	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.rmi.server.ObjID.REGISTRY_ID
<!-- END KEY -->
<!-- BEGIN DATA -->
Object number for well-known <code>ObjID</code> of the registry. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.rmi.server.ObjID.ACTIVATOR_ID
<!-- END KEY -->
<!-- BEGIN DATA -->
Object number for well-known <code>ObjID</code> of the activator. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.rmi.server.ObjID.DGC_ID
<!-- END KEY -->
<!-- BEGIN DATA -->
 Object number for well-known <code>ObjID</code> of
 the distributed garbage collector.

<!-- END DATA -->
<!-- BEGIN KEY -->
private final long java.rmi.server.ObjID.objNum
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial object number
 @see #hashCode

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.rmi.server.UID java.rmi.server.ObjID.space
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial address space identifier (unique to host over time)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.server.ObjID()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Generates a unique object identifier.

 <p>If the system property <code>java.rmi.server.randomIDs</code>
 is defined to equal the string <code>"true"</code> (case insensitive),
 then this constructor will use a cryptographically
 strong random number generator to choose the object number of the
 returned <code>ObjID</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.server.ObjID(int objNum)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a "well-known" object identifier.

 <p>An <code>ObjID</code> created via this constructor will not
 clash with any <code>ObjID</code>s generated via the no-arg
 constructor.

 @param	objNum object number for well-known object identifier

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.rmi.server.ObjID.write(ObjectOutput out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Marshals a binary representation of this <code>ObjID</code> to
 an <code>ObjectOutput</code> instance.

 <p>Specifically, this method first invokes the given stream's
 {@link ObjectOutput#writeLong(long)} method with this object
 identifier's object number, and then it writes its address
 space identifier by invoking its {@link UID#write(DataOutput)}
 method with the stream.

 @param	out the <code>ObjectOutput</code> instance to write
 this <code>ObjID</code> to

 @throws	IOException if an I/O error occurs while performing
 this operation

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.rmi.server.ObjID java.rmi.server.ObjID.read(ObjectInput in) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs and returns a new <code>ObjID</code> instance by
 unmarshalling a binary representation from an
 <code>ObjectInput</code> instance.

 <p>Specifically, this method first invokes the given stream's
 {@link ObjectInput#readLong()} method to read an object number,
 then it invokes {@link UID#read(DataInput)} with the
 stream to read an address space identifier, and then it
 creates and returns a new <code>ObjID</code> instance that
 contains the object number and address space identifier that
 were read from the stream.

 @param	in the <code>ObjectInput</code> instance to read
 <code>ObjID</code> from

 @return	unmarshalled <code>ObjID</code> instance

 @throws	IOException if an I/O error occurs while performing
 this operation

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.rmi.server.ObjID.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the hash code value for this object identifier, the
 object number.

 @return	the hash code value for this object identifier

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.rmi.server.ObjID.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares the specified object with this <code>ObjID</code> for
 equality.

 This method returns <code>true</code> if and only if the
 specified object is an <code>ObjID</code> instance with the same
 object number and address space identifier as this one.

 @param	obj the object to compare this <code>ObjID</code> to

 @return	<code>true</code> if the given object is equivalent to
 this one, and <code>false</code> otherwise

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.rmi.server.ObjID.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this object identifier.

 @return	a string representation of this object identifier

<!-- END DATA -->
