<!-- BEGIN KEY -->
public abstract class java.rmi.server.RemoteServer extends java.rmi.server.RemoteObject
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>RemoteServer</code> class is the common superclass to server
 implementations and provides the framework to support a wide range
 of remote reference semantics.  Specifically, the functions needed
 to create and export remote objects (i.e. to make them remotely
 available) are provided abstractly by <code>RemoteServer</code> and
 concretely by its subclass(es).

 @version 1.33, 11/17/05
 @author  Ann Wollrath
 @since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.rmi.server.RemoteServer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>RemoteServer</code>.
 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.rmi.server.RemoteServer(RemoteRef ref)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>RemoteServer</code> with the given reference type.

 @param ref the remote reference
 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.rmi.server.RemoteServer.getClientHost() throws java.rmi.server.ServerNotActiveException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of the client host for the
 remote method invocation being processed in the current thread.

 @return 	a string representation of the client host

 @throws	ServerNotActiveException if no remote method invocation
 is being processed in the current thread

 @since	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.rmi.server.RemoteServer.setLog(OutputStream out)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Log RMI calls to the output stream <code>out</code>. If
 <code>out</code> is <code>null</code>, call logging is turned off.

 <p>If there is a security manager, its
 <code>checkPermission</code> method will be invoked with a
 <code>java.util.logging.LoggingPermission("control")</code>
 permission; this could result in a <code>SecurityException</code>.

 @param	out the output stream to which RMI calls should be logged
 @throws	SecurityException  if there is a security manager and
 		the invocation of its <code>checkPermission</code> method
		fails
 @see #getLog
 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.io.PrintStream java.rmi.server.RemoteServer.getLog()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns stream for the RMI call log.
 @return the call log
 @see #setLog
 @since JDK1.1

<!-- END DATA -->
