<!-- BEGIN KEY -->
public interface java.rmi.server.ServerRef extends java.rmi.server.RemoteRef
<!-- END KEY -->
<!-- BEGIN DATA -->
 A ServerRef represents the server-side handle for a remote object
 implementation.

 @version 1.17, 11/17/05
 @author  Ann Wollrath
 @since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.rmi.server.ServerRef.serialVersionUID
<!-- END KEY -->
<!-- BEGIN DATA -->
indicate compatibility with JDK 1.1.x version of class. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.server.RemoteStub java.rmi.server.ServerRef.exportObject(Remote obj, Object data) throws java.rmi.RemoteException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates a client stub object for the supplied Remote object.
 If the call completes successfully, the remote object should
 be able to accept incoming calls from clients.
 @param obj the remote object implementation
 @param data information necessary to export the object
 @return the stub for the remote object
 @exception RemoteException if an exception occurs attempting
 to export the object (e.g., stub class could not be found)
 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.rmi.server.ServerRef.getClientHost() throws java.rmi.server.ServerNotActiveException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the hostname of the current client.  When called from a
 thread actively handling a remote method invocation the
 hostname of the client is returned.
 @return the client's host name
 @exception ServerNotActiveException if called outside of servicing
 a remote method invocation
 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.Externalizable.readExternal(ObjectInput in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 The object implements the readExternal method to restore its
 contents by calling the methods of DataInput for primitive
 types and readObject for objects, strings and arrays.  The
 readExternal method must read the values in the same sequence
 and with the same types as were written by writeExternal.

 @param in the stream to read data from in order to restore the object
 @exception IOException if I/O errors occur
 @exception ClassNotFoundException If the class for an object being
              restored cannot be found.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.Externalizable.writeExternal(ObjectOutput out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 The object implements the writeExternal method to save its contents
 by calling the methods of DataOutput for its primitive values or
 calling the writeObject method of ObjectOutput for objects, strings,
 and arrays.

 @serialData Overriding methods should use this tag to describe
             the data layout of this Externalizable object.
             List the sequence of element types and, if possible,
             relate the element to a public/protected field and/or
             method of this Externalizable class.

 @param out the stream to write the object to
 @exception IOException Includes any I/O exceptions that may occur

<!-- END DATA -->
