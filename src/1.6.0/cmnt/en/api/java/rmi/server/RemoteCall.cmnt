<!-- BEGIN KEY -->
public interface java.rmi.server.RemoteCall
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>RemoteCall</code> is an abstraction used solely by the RMI runtime
 (in conjunction with stubs and skeletons of remote objects) to carry out a
 call to a remote object.  The <code>RemoteCall</code> interface is
 deprecated because it is only used by deprecated methods of
 <code>java.rmi.server.RemoteRef</code>.

 @version 1.21, 07/17/06
 @since   JDK1.1
 @author  Ann Wollrath
 @author  Roger Riggs
 @see     java.rmi.server.RemoteRef
 @deprecated no replacement.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.ObjectOutput java.rmi.server.RemoteCall.getOutputStream() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the output stream the stub/skeleton should put arguments/results
 into.

 @return output stream for arguments/results
 @exception java.io.IOException if an I/O error occurs.
 @since JDK1.1
 @deprecated no replacement

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.rmi.server.RemoteCall.releaseOutputStream() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Release the output stream; in some transports this would release
 the stream.

 @exception java.io.IOException if an I/O error occurs.
 @since JDK1.1
 @deprecated no replacement

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.ObjectInput java.rmi.server.RemoteCall.getInputStream() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the InputStream that the stub/skeleton should get
 results/arguments from.

 @return input stream for reading arguments/results
 @exception java.io.IOException if an I/O error occurs.
 @since JDK1.1
 @deprecated no replacement

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.rmi.server.RemoteCall.releaseInputStream() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Release the input stream. This would allow some transports to release
 the channel early.

 @exception java.io.IOException if an I/O error occurs.
 @since JDK1.1
 @deprecated no replacement

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.ObjectOutput java.rmi.server.RemoteCall.getResultStream(boolean success) throws java.io.IOException, java.io.StreamCorruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an output stream (may put out header information
 relating to the success of the call). Should only succeed
 once per remote call.

 @param success If true, indicates normal return, else indicates
 exceptional return.
 @return output stream for writing call result
 @exception java.io.IOException              if an I/O error occurs.
 @exception java.io.StreamCorruptedException If already been called.
 @since JDK1.1
 @deprecated no replacement

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.rmi.server.RemoteCall.executeCall() throws java.lang.Exception
<!-- END KEY -->
<!-- BEGIN DATA -->
 Do whatever it takes to execute the call.

 @exception java.lang.Exception if a general exception occurs.
 @since JDK1.1
 @deprecated no replacement

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.rmi.server.RemoteCall.done() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Allow cleanup after the remote call has completed.

 @exception java.io.IOException if an I/O error occurs.
 @since JDK1.1
 @deprecated no replacement

<!-- END DATA -->
