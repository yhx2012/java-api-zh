<!-- BEGIN KEY -->
public abstract class java.rmi.server.RMISocketFactory extends java.lang.Object implements java.rmi.server.RMIClientSocketFactory, java.rmi.server.RMIServerSocketFactory
<!-- END KEY -->
<!-- BEGIN DATA -->
 An <code>RMISocketFactory</code> instance is used by the RMI runtime
 in order to obtain client and server sockets for RMI calls.  An
 application may use the <code>setSocketFactory</code> method to
 request that the RMI runtime use its socket factory instance
 instead of the default implementation.<p>

 The default socket factory implementation used goes through a
 three-tiered approach to creating client sockets. First, a direct
 socket connection to the remote VM is attempted.  If that fails
 (due to a firewall), the runtime uses HTTP with the explicit port
 number of the server.  If the firewall does not allow this type of
 communication, then HTTP to a cgi-bin script on the server is used
 to POST the RMI call.<p>

 @version 1.22, 11/17/05
 @author  Ann Wollrath
 @author  Peter Jones
 @since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.rmi.server.RMISocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an <code>RMISocketFactory</code>.
 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.net.Socket java.rmi.server.RMISocketFactory.createSocket(String host, int port) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a client socket connected to the specified host and port.
 @param  host   the host name
 @param  port   the port number
 @return a socket connected to the specified host and port.
 @exception IOException if an I/O error occurs during socket creation
 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.net.ServerSocket java.rmi.server.RMISocketFactory.createServerSocket(int port) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a server socket on the specified port (port 0 indicates
 an anonymous port).
 @param  port the port number
 @return the server socket on the specified port
 @exception IOException if an I/O error occurs during server socket
 creation
 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized void java.rmi.server.RMISocketFactory.setSocketFactory(RMISocketFactory fac) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the global socket factory from which RMI gets sockets (if the
 remote object is not associated with a specific client and/or server
 socket factory). The RMI socket factory can only be set once. Note: The
 RMISocketFactory may only be set if the current security manager allows
 setting a socket factory; if disallowed, a SecurityException will be
 thrown.
 @param fac the socket factory
 @exception IOException if the RMI socket factory is already set
 @exception  SecurityException  if a security manager exists and its  
             <code>checkSetFactory</code> method doesn't allow the operation.
 @see #getSocketFactory
 @see java.lang.SecurityManager#checkSetFactory()
 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.rmi.server.RMISocketFactory java.rmi.server.RMISocketFactory.getSocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the socket factory set by the <code>setSocketFactory</code>
 method. Returns <code>null</code> if no socket factory has been
 set.
 @return the socket factory
 @see #setSocketFactory(RMISocketFactory)
 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.rmi.server.RMISocketFactory java.rmi.server.RMISocketFactory.getDefaultSocketFactory()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a reference to the default socket factory used
 by this RMI implementation.  This will be the factory used
 by the RMI runtime when <code>getSocketFactory</code>
 returns <code>null</code>.
 @return the default RMI socket factory
 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized void java.rmi.server.RMISocketFactory.setFailureHandler(RMIFailureHandler fh)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the failure handler to be called by the RMI runtime if server
 socket creation fails.  By default, if no failure handler is installed
 and server socket creation fails, the RMI runtime does attempt to
 recreate the server socket.

 <p>If there is a security manager, this method first calls
 the security manager's <code>checkSetFactory</code> method 
 to ensure the operation is allowed. 
 This could result in a <code>SecurityException</code>.

 @param fh the failure handler
 @throws	SecurityException  if a security manager exists and its  
		<code>checkSetFactory</code> method doesn't allow the
		operation.
 @see #getFailureHandler
 @see java.rmi.server.RMIFailureHandler#failure(Exception)
 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.rmi.server.RMIFailureHandler java.rmi.server.RMISocketFactory.getFailureHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the handler for socket creation failure set by the
 <code>setFailureHandler</code> method.
 @return the failure handler
 @see #setFailureHandler(RMIFailureHandler)
 @since JDK1.1

<!-- END DATA -->
