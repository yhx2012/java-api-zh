<!-- BEGIN KEY -->
public abstract class java.text.spi.NumberFormatProvider extends java.util.spi.LocaleServiceProvider
<!-- END KEY -->
<!-- BEGIN DATA -->
 An abstract class for service providers that
 provide concrete implementations of the 
 {@link java.text.NumberFormat NumberFormat} class.

 @since        1.6
 @version      @(#)NumberFormatProvider.java	1.2 05/11/17

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.text.spi.NumberFormatProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sole constructor.  (For invocation by subclass constructors, typically
 implicit.)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.text.NumberFormat java.text.spi.NumberFormatProvider.getCurrencyInstance(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a new <code>NumberFormat</code> instance which formats 
 monetary values for the specified locale.

 @param locale the desired locale.
 @exception NullPointerException if <code>locale</code> is null
 @exception IllegalArgumentException if <code>locale</code> isn't
     one of the locales returned from 
     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() 
     getAvailableLocales()}.
 @return a currency formatter
 @see java.text.NumberFormat#getCurrencyInstance(java.util.Locale)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.text.NumberFormat java.text.spi.NumberFormatProvider.getIntegerInstance(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a new <code>NumberFormat</code> instance which formats 
 integer values for the specified locale.
 The returned number format is configured to
 round floating point numbers to the nearest integer using
 half-even rounding (see {@link java.math.RoundingMode#HALF_EVEN HALF_EVEN})
 for formatting, and to parse only the integer part of
 an input string (see {@link
 java.text.NumberFormat#isParseIntegerOnly isParseIntegerOnly}).

 @param locale the desired locale
 @exception NullPointerException if <code>locale</code> is null
 @exception IllegalArgumentException if <code>locale</code> isn't
     one of the locales returned from 
     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() 
     getAvailableLocales()}.
 @return a number format for integer values
 @see java.text.NumberFormat#getIntegerInstance(java.util.Locale)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.text.NumberFormat java.text.spi.NumberFormatProvider.getNumberInstance(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a new general-purpose <code>NumberFormat</code> instance for 
 the specified locale.

 @param locale the desired locale
 @exception NullPointerException if <code>locale</code> is null
 @exception IllegalArgumentException if <code>locale</code> isn't
     one of the locales returned from 
     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() 
     getAvailableLocales()}.
 @return a general-purpose number formatter
 @see java.text.NumberFormat#getNumberInstance(java.util.Locale)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.text.NumberFormat java.text.spi.NumberFormatProvider.getPercentInstance(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a new <code>NumberFormat</code> instance which formats 
 percentage values for the specified locale.

 @param locale the desired locale
 @exception NullPointerException if <code>locale</code> is null
 @exception IllegalArgumentException if <code>locale</code> isn't
     one of the locales returned from 
     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales() 
     getAvailableLocales()}.
 @return a percent formatter
 @see java.text.NumberFormat#getPercentInstance(java.util.Locale)

<!-- END DATA -->
