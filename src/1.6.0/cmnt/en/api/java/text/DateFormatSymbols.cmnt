<!-- BEGIN KEY -->
public class java.text.DateFormatSymbols extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>DateFormatSymbols</code> is a public class for encapsulating
 localizable date-time formatting data, such as the names of the
 months, the names of the days of the week, and the time zone data.
 <code>DateFormat</code> and <code>SimpleDateFormat</code> both use
 <code>DateFormatSymbols</code> to encapsulate this information.

 <p>
 Typically you shouldn't use <code>DateFormatSymbols</code> directly.
 Rather, you are encouraged to create a date-time formatter with the
 <code>DateFormat</code> class's factory methods: <code>getTimeInstance</code>,
 <code>getDateInstance</code>, or <code>getDateTimeInstance</code>.
 These methods automatically create a <code>DateFormatSymbols</code> for
 the formatter so that you don't have to. After the
 formatter is created, you may modify its format pattern using the
 <code>setPattern</code> method. For more information about
 creating formatters using <code>DateFormat</code>'s factory methods,
 see {@link DateFormat}.

 <p>
 If you decide to create a date-time formatter with a specific
 format pattern for a specific locale, you can do so with:
 <blockquote>
 <pre>
 new SimpleDateFormat(aPattern, DateFormatSymbols.getInstance(aLocale)).
 </pre>
 </blockquote>

 <p>
 <code>DateFormatSymbols</code> objects are cloneable. When you obtain
 a <code>DateFormatSymbols</code> object, feel free to modify the
 date-time formatting data. For instance, you can replace the localized
 date-time format pattern characters with the ones that you feel easy
 to remember. Or you can change the representative cities
 to your favorite ones.

 <p>
 New <code>DateFormatSymbols</code> subclasses may be added to support
 <code>SimpleDateFormat</code> for date-time formatting for additional locales.

 @see          DateFormat
 @see          SimpleDateFormat
 @see          java.util.SimpleTimeZone
 @version      1.48 04/25/06
 @author       Chen-Lieh Huang

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String[] java.text.DateFormatSymbols.eras
<!-- END KEY -->
<!-- BEGIN DATA -->
 Era strings. For example: "AD" and "BC".  An array of 2 strings,
 indexed by <code>Calendar.BC</code> and <code>Calendar.AD</code>.
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String[] java.text.DateFormatSymbols.months
<!-- END KEY -->
<!-- BEGIN DATA -->
 Month strings. For example: "January", "February", etc.  An array
 of 13 strings (some calendars have 13 months), indexed by
 <code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String[] java.text.DateFormatSymbols.shortMonths
<!-- END KEY -->
<!-- BEGIN DATA -->
 Short month strings. For example: "Jan", "Feb", etc.  An array of
 13 strings (some calendars have 13 months), indexed by
 <code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String[] java.text.DateFormatSymbols.weekdays
<!-- END KEY -->
<!-- BEGIN DATA -->
 Weekday strings. For example: "Sunday", "Monday", etc.  An array
 of 8 strings, indexed by <code>Calendar.SUNDAY</code>,
 <code>Calendar.MONDAY</code>, etc.
 The element <code>weekdays[0]</code> is ignored.
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String[] java.text.DateFormatSymbols.shortWeekdays
<!-- END KEY -->
<!-- BEGIN DATA -->
 Short weekday strings. For example: "Sun", "Mon", etc.  An array
 of 8 strings, indexed by <code>Calendar.SUNDAY</code>,
 <code>Calendar.MONDAY</code>, etc.
 The element <code>shortWeekdays[0]</code> is ignored.
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String[] java.text.DateFormatSymbols.ampms
<!-- END KEY -->
<!-- BEGIN DATA -->
 AM and PM strings. For example: "AM" and "PM".  An array of
 2 strings, indexed by <code>Calendar.AM</code> and
 <code>Calendar.PM</code>.
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String[][] java.text.DateFormatSymbols.zoneStrings
<!-- END KEY -->
<!-- BEGIN DATA -->
 Localized names of time zones in this locale.  This is a
 two-dimensional array of strings of size <em>n</em> by <em>m</em>,
 where <em>m</em> is at least 5.  Each of the <em>n</em> rows is an
 entry containing the localized names for a single <code>TimeZone</code>.
 Each such row contains (with <code>i</code> ranging from
 0..<em>n</em>-1):
 <ul>
 <li><code>zoneStrings[i][0]</code> - time zone ID</li>
 <li><code>zoneStrings[i][1]</code> - long name of zone in standard
 time</li>
 <li><code>zoneStrings[i][2]</code> - short name of zone in
 standard time</li>
 <li><code>zoneStrings[i][3]</code> - long name of zone in daylight
 saving time</li>
 <li><code>zoneStrings[i][4]</code> - short name of zone in daylight
 saving time</li>
 </ul>
 The zone ID is <em>not</em> localized; it's one of the valid IDs of  
 the {@link java.util.TimeZone TimeZone} class that are not  
 <a href="../java/util/TimeZone.html#CustomID">custom IDs</a>. 
 All other entries are localized names. 
 @see java.util.TimeZone
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String java.text.DateFormatSymbols.localPatternChars
<!-- END KEY -->
<!-- BEGIN DATA -->
 Localized date-time pattern characters. For example, a locale may
 wish to use 'u' rather than 'y' to represent years in its date format
 pattern strings.
 This string must be exactly 18 characters long, with the index of
 the characters described by <code>DateFormat.ERA_FIELD</code>,
 <code>DateFormat.YEAR_FIELD</code>, etc.  Thus, if the string were
 "Xz...", then localized patterns would use 'X' for era and 'z' for year.
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.util.Locale java.text.DateFormatSymbols.locale
<!-- END KEY -->
<!-- BEGIN DATA -->
 The locale which is used for initializing this DateFormatSymbols object.

 @since 1.6
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.DateFormatSymbols()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a DateFormatSymbols object by loading format data from
 resources for the default locale. This constructor can only 
 construct instances for the locales supported by the Java 
 runtime environment, not for those supported by installed 
 {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}
 implementations. For full locale coverage, use the 
 {@link #getInstance(Locale) getInstance} method. 

 @see #getInstance()
 @exception  java.util.MissingResourceException
             if the resources for the default locale cannot be
             found or cannot be loaded.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.DateFormatSymbols(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a DateFormatSymbols object by loading format data from
 resources for the given locale. This constructor can only 
 construct instances for the locales supported by the Java 
 runtime environment, not for those supported by installed 
 {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}
 implementations. For full locale coverage, use the 
 {@link #getInstance(Locale) getInstance} method. 

 @see #getInstance(Locale)
 @exception  java.util.MissingResourceException
             if the resources for the specified locale cannot be
             found or cannot be loaded.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Locale[] java.text.DateFormatSymbols.getAvailableLocales()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all locales for which the
 <code>getInstance</code> methods of this class can return
 localized instances.
 The returned array represents the union of locales supported by the 
 Java runtime and by installed 
 {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}
 implementations.  It must contain at least a <code>Locale</code>
 instance equal to {@link java.util.Locale#US Locale.US}.

 @return An array of locales for which localized
         <code>DateFormatSymbols</code> instances are available.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.text.DateFormatSymbols java.text.DateFormatSymbols.getInstance()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>DateFormatSymbols</code> instance for the default 
 locale.  This method provides access to <code>DateFormatSymbols</code>
 instances for locales supported by the Java runtime itself as well 
 as for those supported by installed 
 {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider} 
 implementations.
 @return a <code>DateFormatSymbols</code> instance.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.text.DateFormatSymbols java.text.DateFormatSymbols.getInstance(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>DateFormatSymbols</code> instance for the specified 
 locale.  This method provides access to <code>DateFormatSymbols</code>
 instances for locales supported by the Java runtime itself as well 
 as for those supported by installed 
 {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider} 
 implementations.
 @param locale the given locale.
 @return a <code>DateFormatSymbols</code> instance.
 @exception NullPointerException if <code>locale</code> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] java.text.DateFormatSymbols.getEras()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets era strings. For example: "AD" and "BC".
 @return the era strings.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DateFormatSymbols.setEras(java.lang.String[] newEras)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets era strings. For example: "AD" and "BC".
 @param newEras the new era strings.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] java.text.DateFormatSymbols.getMonths()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets month strings. For example: "January", "February", etc.
 @return the month strings.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DateFormatSymbols.setMonths(java.lang.String[] newMonths)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets month strings. For example: "January", "February", etc.
 @param newMonths the new month strings.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] java.text.DateFormatSymbols.getShortMonths()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets short month strings. For example: "Jan", "Feb", etc.
 @return the short month strings.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DateFormatSymbols.setShortMonths(java.lang.String[] newShortMonths)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets short month strings. For example: "Jan", "Feb", etc.
 @param newShortMonths the new short month strings.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] java.text.DateFormatSymbols.getWeekdays()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets weekday strings. For example: "Sunday", "Monday", etc.
 @return the weekday strings. Use <code>Calendar.SUNDAY</code>,
 <code>Calendar.MONDAY</code>, etc. to index the result array.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DateFormatSymbols.setWeekdays(java.lang.String[] newWeekdays)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets weekday strings. For example: "Sunday", "Monday", etc.
 @param newWeekdays the new weekday strings. The array should
 be indexed by <code>Calendar.SUNDAY</code>,
 <code>Calendar.MONDAY</code>, etc.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] java.text.DateFormatSymbols.getShortWeekdays()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets short weekday strings. For example: "Sun", "Mon", etc.
 @return the short weekday strings. Use <code>Calendar.SUNDAY</code>,
 <code>Calendar.MONDAY</code>, etc. to index the result array.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DateFormatSymbols.setShortWeekdays(java.lang.String[] newShortWeekdays)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets short weekday strings. For example: "Sun", "Mon", etc.
 @param newShortWeekdays the new short weekday strings. The array should
 be indexed by <code>Calendar.SUNDAY</code>,
 <code>Calendar.MONDAY</code>, etc.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] java.text.DateFormatSymbols.getAmPmStrings()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets ampm strings. For example: "AM" and "PM".
 @return the ampm strings.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DateFormatSymbols.setAmPmStrings(java.lang.String[] newAmpms)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets ampm strings. For example: "AM" and "PM".
 @param newAmpms the new ampm strings.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[][] java.text.DateFormatSymbols.getZoneStrings()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets time zone strings.  Use of this method is discouraged; use 
 {@link java.util.TimeZone#getDisplayName() TimeZone.getDisplayName()} 
 instead.
 <p>
 The value returned is a
 two-dimensional array of strings of size <em>n</em> by <em>m</em>,
 where <em>m</em> is at least 5.  Each of the <em>n</em> rows is an
 entry containing the localized names for a single <code>TimeZone</code>.
 Each such row contains (with <code>i</code> ranging from
 0..<em>n</em>-1):
 <ul>
 <li><code>zoneStrings[i][0]</code> - time zone ID</li>
 <li><code>zoneStrings[i][1]</code> - long name of zone in standard
 time</li>
 <li><code>zoneStrings[i][2]</code> - short name of zone in
 standard time</li>
 <li><code>zoneStrings[i][3]</code> - long name of zone in daylight
 saving time</li>
 <li><code>zoneStrings[i][4]</code> - short name of zone in daylight
 saving time</li>
 </ul>
 The zone ID is <em>not</em> localized; it's one of the valid IDs of 
 the {@link java.util.TimeZone TimeZone} class that are not 
 <a href="../util/TimeZone.html#CustomID">custom IDs</a>.
 All other entries are localized names.  If a zone does not implement 
 daylight saving time, the daylight saving time names should not be used.
 <p>
 If {@link #setZoneStrings(String[][]) setZoneStrings} has been called 
 on this <code>DateFormatSymbols</code> instance, then the strings 
 provided by that call are returned. Otherwise, the returned array 
 contains names provided by the Java runtime and by installed 
 {@link java.util.spi.TimeZoneNameProvider TimeZoneNameProvider} 
 implementations.      
 
 @return the time zone strings.
 @see #setZoneStrings(String[][])

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DateFormatSymbols.setZoneStrings(java.lang.String[][] newZoneStrings)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets time zone strings.  The argument must be a
 two-dimensional array of strings of size <em>n</em> by <em>m</em>,
 where <em>m</em> is at least 5.  Each of the <em>n</em> rows is an
 entry containing the localized names for a single <code>TimeZone</code>.
 Each such row contains (with <code>i</code> ranging from
 0..<em>n</em>-1):
 <ul>
 <li><code>zoneStrings[i][0]</code> - time zone ID</li>
 <li><code>zoneStrings[i][1]</code> - long name of zone in standard
 time</li>
 <li><code>zoneStrings[i][2]</code> - short name of zone in
 standard time</li>
 <li><code>zoneStrings[i][3]</code> - long name of zone in daylight
 saving time</li>
 <li><code>zoneStrings[i][4]</code> - short name of zone in daylight
 saving time</li>
 </ul>
 The zone ID is <em>not</em> localized; it's one of the valid IDs of 
 the {@link java.util.TimeZone TimeZone} class that are not 
 <a href="../util/TimeZone.html#CustomID">custom IDs</a>.
 All other entries are localized names.

 @param newZoneStrings the new time zone strings.
 @exception IllegalArgumentException if the length of any row in
    <code>newZoneStrings</code> is less than 5
 @exception NullPointerException if <code>newZoneStrings</code> is null
 @see #getZoneStrings()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.text.DateFormatSymbols.getLocalPatternChars()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets localized date-time pattern characters. For example: 'u', 't', etc.
 @return the localized date-time pattern characters.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DateFormatSymbols.setLocalPatternChars(String newLocalPatternChars)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets localized date-time pattern characters. For example: 'u', 't', etc.
 @param newLocalPatternChars the new localized date-time
 pattern characters.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.text.DateFormatSymbols.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Overrides Cloneable

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.text.DateFormatSymbols.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Override hashCode.
 Generates a hash code for the DateFormatSymbols object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.text.DateFormatSymbols.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Override equals

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.text.DateFormatSymbols.writeObject(ObjectOutputStream stream) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Write out the default serializable data, after ensuring the
 <code>zoneStrings</code> field is initialized in order to make
 sure the backward compatibility.

 @since 1.6

<!-- END DATA -->
