<!-- BEGIN KEY -->
public class java.text.DecimalFormatSymbols extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class represents the set of symbols (such as the decimal separator,
 the grouping separator, and so on) needed by <code>DecimalFormat</code>
 to format numbers. <code>DecimalFormat</code> creates for itself an instance of
 <code>DecimalFormatSymbols</code> from its locale data.  If you need to change any
 of these symbols, you can get the <code>DecimalFormatSymbols</code> object from
 your <code>DecimalFormat</code> and modify it.

 @see          java.util.Locale
 @see          DecimalFormat
 @version      1.46, 02/27/06
 @author       Mark Davis
 @author       Alan Liu

<!-- END DATA -->
<!-- BEGIN KEY -->
private char java.text.DecimalFormatSymbols.zeroDigit
<!-- END KEY -->
<!-- BEGIN DATA -->
 Character used for zero.

 @serial
 @see #getZeroDigit

<!-- END DATA -->
<!-- BEGIN KEY -->
private char java.text.DecimalFormatSymbols.groupingSeparator
<!-- END KEY -->
<!-- BEGIN DATA -->
 Character used for thousands separator.

 @serial
 @see #getGroupingSeparator

<!-- END DATA -->
<!-- BEGIN KEY -->
private char java.text.DecimalFormatSymbols.decimalSeparator
<!-- END KEY -->
<!-- BEGIN DATA -->
 Character used for decimal sign.

 @serial
 @see #getDecimalSeparator

<!-- END DATA -->
<!-- BEGIN KEY -->
private char java.text.DecimalFormatSymbols.perMill
<!-- END KEY -->
<!-- BEGIN DATA -->
 Character used for per mille sign.

 @serial
 @see #getPerMill

<!-- END DATA -->
<!-- BEGIN KEY -->
private char java.text.DecimalFormatSymbols.percent
<!-- END KEY -->
<!-- BEGIN DATA -->
 Character used for percent sign.
 @serial
 @see #getPercent

<!-- END DATA -->
<!-- BEGIN KEY -->
private char java.text.DecimalFormatSymbols.digit
<!-- END KEY -->
<!-- BEGIN DATA -->
 Character used for a digit in a pattern.

 @serial
 @see #getDigit

<!-- END DATA -->
<!-- BEGIN KEY -->
private char java.text.DecimalFormatSymbols.patternSeparator
<!-- END KEY -->
<!-- BEGIN DATA -->
 Character used to separate positive and negative subpatterns
 in a pattern.

 @serial
 @see #getPatternSeparator

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.text.DecimalFormatSymbols.infinity
<!-- END KEY -->
<!-- BEGIN DATA -->
 String used to represent infinity.
 @serial
 @see #getInfinity

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.text.DecimalFormatSymbols.NaN
<!-- END KEY -->
<!-- BEGIN DATA -->
 String used to represent "not a number".
 @serial
 @see #getNaN

<!-- END DATA -->
<!-- BEGIN KEY -->
private char java.text.DecimalFormatSymbols.minusSign
<!-- END KEY -->
<!-- BEGIN DATA -->
 Character used to represent minus sign.
 @serial
 @see #getMinusSign

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.text.DecimalFormatSymbols.currencySymbol
<!-- END KEY -->
<!-- BEGIN DATA -->
 String denoting the local currency, e.g. "$".
 @serial
 @see #getCurrencySymbol

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.text.DecimalFormatSymbols.intlCurrencySymbol
<!-- END KEY -->
<!-- BEGIN DATA -->
 ISO 4217 currency code denoting the local currency, e.g. "USD".
 @serial
 @see #getInternationalCurrencySymbol

<!-- END DATA -->
<!-- BEGIN KEY -->
private char java.text.DecimalFormatSymbols.monetarySeparator
<!-- END KEY -->
<!-- BEGIN DATA -->
 The decimal separator used when formatting currency values.
 @serial
 @since JDK 1.1.6
 @see #getMonetaryDecimalSeparator

<!-- END DATA -->
<!-- BEGIN KEY -->
private char java.text.DecimalFormatSymbols.exponential
<!-- END KEY -->
<!-- BEGIN DATA -->
 The character used to distinguish the exponent in a number formatted
 in exponential notation, e.g. 'E' for a number such as "1.23E45".
 <p>
 Note that the public API provides no way to set this field,
 even though it is supported by the implementation and the stream format.
 The intent is that this will be added to the API in the future.

 @serial
 @since JDK 1.1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.text.DecimalFormatSymbols.exponentialSeparator
<!-- END KEY -->
<!-- BEGIN DATA -->
 The string used to separate the mantissa from the exponent.
 Examples: "x10^" for 1.23x10^4, "E" for 1.23E4.
 <p>
 If both <code>exponential</code> and <code>exponentialSeparator</code>
 exist, this <code>exponentialSeparator</code> has the precedence.

 @serial
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.util.Locale java.text.DecimalFormatSymbols.locale
<!-- END KEY -->
<!-- BEGIN DATA -->
 The locale of these currency format symbols.

 @serial
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.text.DecimalFormatSymbols.serialVersionOnStream
<!-- END KEY -->
<!-- BEGIN DATA -->
 Describes the version of <code>DecimalFormatSymbols</code> present on the stream.
 Possible values are:
 <ul>
 <li><b>0</b> (or uninitialized): versions prior to JDK 1.1.6.

 <li><b>1</b>: Versions written by JDK 1.1.6 or later, which include
      two new fields: <code>monetarySeparator</code> and <code>exponential</code>.
 <li><b>2</b>: Versions written by J2SE 1.4 or later, which include a
      new <code>locale</code> field.
 <li><b>3</b>: Versions written by J2SE 1.6 or later, which include a
      new <code>exponentialSeparator</code> field.
 </ul>
 When streaming out a <code>DecimalFormatSymbols</code>, the most recent format
 (corresponding to the highest allowable <code>serialVersionOnStream</code>)
 is always written.

 @serial
 @since JDK 1.1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.DecimalFormatSymbols()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a DecimalFormatSymbols object for the default locale.
 This constructor can only construct instances for the locales 
 supported by the Java runtime environment, not for those 
 supported by installed 
 {@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider}
 implementations. For full locale coverage, use the 
 {@link #getInstance(Locale) getInstance} method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.text.DecimalFormatSymbols(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a DecimalFormatSymbols object for the given locale.
 This constructor can only construct instances for the locales 
 supported by the Java runtime environment, not for those 
 supported by installed 
 {@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider}
 implementations. For full locale coverage, use the 
 {@link #getInstance(Locale) getInstance} method.

 @exception NullPointerException if <code>locale</code> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Locale[] java.text.DecimalFormatSymbols.getAvailableLocales()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all locales for which the
 <code>getInstance</code> methods of this class can return
 localized instances.
 The returned array represents the union of locales supported by the Java 
 runtime and by installed 
 {@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider}
 implementations.  It must contain at least a <code>Locale</code>
 instance equal to {@link java.util.Locale#US Locale.US}.

 @return An array of locales for which localized
         <code>DecimalFormatSymbols</code> instances are available.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.text.DecimalFormatSymbols java.text.DecimalFormatSymbols.getInstance()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>DecimalFormatSymbols</code> instance for the default 
 locale.  This method provides access to <code>DecimalFormatSymbols</code>
 instances for locales supported by the Java runtime itself as well 
 as for those supported by installed 
 {@link java.text.spi.DecimalFormatSymbolsProvider 
 DecimalFormatSymbolsProvider} implementations.
 @return a <code>DecimalFormatSymbols</code> instance.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.text.DecimalFormatSymbols java.text.DecimalFormatSymbols.getInstance(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>DecimalFormatSymbols</code> instance for the specified 
 locale.  This method provides access to <code>DecimalFormatSymbols</code>
 instances for locales supported by the Java runtime itself as well 
 as for those supported by installed 
 {@link java.text.spi.DecimalFormatSymbolsProvider 
 DecimalFormatSymbolsProvider} implementations.
 @param locale the desired locale.
 @return a <code>DecimalFormatSymbols</code> instance.
 @exception NullPointerException if <code>locale</code> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.DecimalFormatSymbols.getZeroDigit()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the character used for zero. Different for Arabic, etc.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setZeroDigit(char zeroDigit)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the character used for zero. Different for Arabic, etc.

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.DecimalFormatSymbols.getGroupingSeparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the character used for thousands separator. Different for French, etc.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setGroupingSeparator(char groupingSeparator)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the character used for thousands separator. Different for French, etc.

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.DecimalFormatSymbols.getDecimalSeparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the character used for decimal sign. Different for French, etc.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setDecimalSeparator(char decimalSeparator)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the character used for decimal sign. Different for French, etc.

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.DecimalFormatSymbols.getPerMill()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the character used for per mille sign. Different for Arabic, etc.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setPerMill(char perMill)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the character used for per mille sign. Different for Arabic, etc.

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.DecimalFormatSymbols.getPercent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the character used for percent sign. Different for Arabic, etc.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setPercent(char percent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the character used for percent sign. Different for Arabic, etc.

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.DecimalFormatSymbols.getDigit()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the character used for a digit in a pattern.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setDigit(char digit)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the character used for a digit in a pattern.

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.DecimalFormatSymbols.getPatternSeparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the character used to separate positive and negative subpatterns
 in a pattern.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setPatternSeparator(char patternSeparator)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the character used to separate positive and negative subpatterns
 in a pattern.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.text.DecimalFormatSymbols.getInfinity()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the string used to represent infinity. Almost always left
 unchanged.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setInfinity(String infinity)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the string used to represent infinity. Almost always left
 unchanged.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.text.DecimalFormatSymbols.getNaN()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the string used to represent "not a number". Almost always left
 unchanged.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setNaN(String NaN)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the string used to represent "not a number". Almost always left
 unchanged.

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.DecimalFormatSymbols.getMinusSign()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the character used to represent minus sign. If no explicit
 negative format is specified, one is formed by prefixing
 minusSign to the positive format.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setMinusSign(char minusSign)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the character used to represent minus sign. If no explicit
 negative format is specified, one is formed by prefixing
 minusSign to the positive format.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.text.DecimalFormatSymbols.getCurrencySymbol()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the currency symbol for the currency of these
 DecimalFormatSymbols in their locale.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setCurrencySymbol(String currency)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the currency symbol for the currency of these
 DecimalFormatSymbols in their locale.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.text.DecimalFormatSymbols.getInternationalCurrencySymbol()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the ISO 4217 currency code of the currency of these
 DecimalFormatSymbols.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setInternationalCurrencySymbol(String currencyCode)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the ISO 4217 currency code of the currency of these
 DecimalFormatSymbols.
 If the currency code is valid (as defined by
 {@link java.util.Currency#getInstance(java.lang.String) Currency.getInstance}),
 this also sets the currency attribute to the corresponding Currency
 instance and the currency symbol attribute to the currency's symbol
 in the DecimalFormatSymbols' locale. If the currency code is not valid,
 then the currency attribute is set to null and the currency symbol
 attribute is not modified.

 @see #setCurrency
 @see #setCurrencySymbol
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Currency java.text.DecimalFormatSymbols.getCurrency()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the currency of these DecimalFormatSymbols. May be null if the
 currency symbol attribute was previously set to a value that's not
 a valid ISO 4217 currency code.

 @return the currency used, or null
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setCurrency(Currency currency)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the currency of these DecimalFormatSymbols.
 This also sets the currency symbol attribute to the currency's symbol
 in the DecimalFormatSymbols' locale, and the international currency
 symbol attribute to the currency's ISO 4217 currency code.

 @param currency the new currency to be used
 @exception NullPointerException if <code>currency</code> is null
 @since 1.4
 @see #setCurrencySymbol
 @see #setInternationalCurrencySymbol

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.text.DecimalFormatSymbols.getMonetaryDecimalSeparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the monetary decimal separator.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setMonetaryDecimalSeparator(char sep)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the monetary decimal separator.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.text.DecimalFormatSymbols.getExponentSeparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the string used to separate the mantissa from the exponent.
 Examples: "x10^" for 1.23x10^4, "E" for 1.23E4.

 @return the exponent separator string
 @see #setExponentSeparator(java.lang.String)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.text.DecimalFormatSymbols.setExponentSeparator(String exp)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the string used to separate the mantissa from the exponent.
 Examples: "x10^" for 1.23x10^4, "E" for 1.23E4.

 @param exp the exponent separator string
 @exception NullPointerException if <code>exp</code> is null
 @see #getExponentSeparator()
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.text.DecimalFormatSymbols.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Standard override.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.text.DecimalFormatSymbols.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Override equals.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.text.DecimalFormatSymbols.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Override hashCode.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.text.DecimalFormatSymbols.readObject(ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads the default serializable fields, provides default values for objects
 in older serial versions, and initializes non-serializable fields.
 If <code>serialVersionOnStream</code>
 is less than 1, initializes <code>monetarySeparator</code> to be
 the same as <code>decimalSeparator</code> and <code>exponential</code>
 to be 'E'.
 If <code>serialVersionOnStream</code> is less than 2,
 initializes <code>locale</code>to the root locale, and initializes 
 If <code>serialVersionOnStream</code> is less than 3, it initializes 
 <code>exponentialSeparator</code> using <code>exponential</code>.
 Sets <code>serialVersionOnStream</code> back to the maximum allowed value so that
 default serialization will work properly if this object is streamed out again.
 Initializes the currency from the intlCurrencySymbol field.

 @since JDK 1.1.6

<!-- END DATA -->
