<!-- BEGIN KEY -->
public class java.security.spec.ECPoint extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 This immutable class represents a point on an elliptic curve (EC)
 in affine coordinates. Other coordinate systems can
 extend this class to represent this point in other
 coordinates.

 @author Valerie Peng
 @version 1.4, 11/17/05

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.security.spec.ECPoint java.security.spec.ECPoint.POINT_INFINITY
<!-- END KEY -->
<!-- BEGIN DATA -->
 This defines the point at infinity.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.spec.ECPoint(BigInteger x, BigInteger y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an ECPoint from the specified affine x-coordinate
 <code>x</code> and affine y-coordinate <code>y</code>.
 @param x the affine x-coordinate.
 @param y the affine y-coordinate.
 @exception NullPointerException if <code>x</code> or 
 <code>y</code> is null.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.BigInteger java.security.spec.ECPoint.getAffineX()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the affine x-coordinate <code>x</code>.
 Note: POINT_INFINITY has a null affine x-coordinate.
 @return the affine x-coordinate.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.BigInteger java.security.spec.ECPoint.getAffineY()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the affine y-coordinate <code>y</code>.
 Note: POINT_INFINITY has a null affine y-coordinate.
 @return the affine y-coordinate.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.spec.ECPoint.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares this elliptic curve point for equality with
 the specified object. 
 @param obj the object to be compared.
 @return true if <code>obj</code> is an instance of 
 ECPoint and the affine coordinates match, false otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.spec.ECPoint.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hash code value for this elliptic curve point.
 @return a hash code value.

<!-- END DATA -->
