<!-- BEGIN KEY -->
public class java.security.spec.EllipticCurve extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 This immutable class holds the necessary values needed to represent 
 an elliptic curve.

 @see ECField
 @see ECFieldFp
 @see ECFieldF2m

 @author Valerie Peng
 @version 1.5, 03/28/06

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.spec.EllipticCurve(ECField field, BigInteger a, BigInteger b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an elliptic curve with the specified elliptic field
 <code>field</code> and the coefficients <code>a</code> and
 <code>b</code>.
 @param field the finite field that this elliptic curve is over.
 @param a the first coefficient of this elliptic curve.
 @param b the second coefficient of this elliptic curve.
 @exception NullPointerException if <code>field</code>,
 <code>a</code>, or <code>b</code> is null.
 @exception IllegalArgumentException if <code>a</code>
 or <code>b</code> is not null and not in <code>field</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.spec.EllipticCurve(ECField field, BigInteger a, BigInteger b, byte[] seed)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an elliptic curve with the specified elliptic field
 <code>field</code>, the coefficients <code>a</code> and
 <code>b</code>, and the <code>seed</code> used for curve generation.
 @param field the finite field that this elliptic curve is over.
 @param a the first coefficient of this elliptic curve.
 @param b the second coefficient of this elliptic curve.
 @param seed the bytes used during curve generation for later
 validation. Contents of this array are copied to protect against
 subsequent modification.
 @exception NullPointerException if <code>field</code>,
 <code>a</code>, or <code>b</code> is null.
 @exception IllegalArgumentException if <code>a</code>
 or <code>b</code> is not null and not in <code>field</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.spec.ECField java.security.spec.EllipticCurve.getField()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the finite field <code>field</code> that this 
 elliptic curve is over.
 @return the field <code>field</code> that this curve 
 is over.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.BigInteger java.security.spec.EllipticCurve.getA()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the first coefficient <code>a</code> of the
 elliptic curve.
 @return the first coefficient <code>a</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.BigInteger java.security.spec.EllipticCurve.getB()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the second coefficient <code>b</code> of the
 elliptic curve.
 @return the second coefficient <code>b</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] java.security.spec.EllipticCurve.getSeed()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the seeding bytes <code>seed</code> used 
 during curve generation. May be null if not specified.
 @return the seeding bytes <code>seed</code>. A new
 array is returned each time this method is called.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.spec.EllipticCurve.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares this elliptic curve for equality with the
 specified object. 
 @param obj the object to be compared.
 @return true if <code>obj</code> is an instance of
 EllipticCurve and the field, A, B, and seeding bytes 
 match, false otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.spec.EllipticCurve.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hash code value for this elliptic curve.
 @return a hash code value.

<!-- END DATA -->
