<!-- BEGIN KEY -->
public class java.security.spec.RSAMultiPrimePrivateCrtKeySpec extends java.security.spec.RSAPrivateKeySpec
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class specifies an RSA multi-prime private key, as defined in the 
 PKCS#1 v2.1, using the Chinese Remainder Theorem (CRT) information 
 values for efficiency.

 @author Valerie Peng

 @version 1.9 05/11/17

 @see java.security.Key
 @see java.security.KeyFactory
 @see KeySpec
 @see PKCS8EncodedKeySpec
 @see RSAPrivateKeySpec
 @see RSAPublicKeySpec
 @see RSAOtherPrimeInfo

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.spec.RSAMultiPrimePrivateCrtKeySpec(BigInteger modulus, BigInteger publicExponent, BigInteger privateExponent, BigInteger primeP, BigInteger primeQ, BigInteger primeExponentP, BigInteger primeExponentQ, BigInteger crtCoefficient, java.security.spec.RSAOtherPrimeInfo[] otherPrimeInfo)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <code>RSAMultiPrimePrivateCrtKeySpec</code>
 given the modulus, publicExponent, privateExponent,
 primeP, primeQ, primeExponentP, primeExponentQ,
 crtCoefficient, and otherPrimeInfo as defined in PKCS#1 v2.1.

 <p>Note that the contents of <code>otherPrimeInfo</code> 
 are copied to protect against subsequent modification when 
 constructing this object.

 @param modulus the modulus n.
 @param publicExponent the public exponent e.
 @param privateExponent the private exponent d.
 @param primeP the prime factor p of n.
 @param primeQ the prime factor q of n.
 @param primeExponentP this is d mod (p-1).
 @param primeExponentQ this is d mod (q-1).
 @param crtCoefficient the Chinese Remainder Theorem
 coefficient q-1 mod p.
 @param otherPrimeInfo triplets of the rest of primes, null can be
 specified if there are only two prime factors (p and q).
 @exception NullPointerException if any of the parameters, i.e. 
 <code>modulus</code>, 
 <code>publicExponent</code>, <code>privateExponent</code>, 
 <code>primeP</code>, <code>primeQ</code>, 
 <code>primeExponentP</code>, <code>primeExponentQ</code>,
 <code>crtCoefficient</code>, is null.
 @exception IllegalArgumentException if an empty, i.e. 0-length,
 <code>otherPrimeInfo</code> is specified.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.BigInteger java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPublicExponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the public exponent.

 @return the public exponent.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.BigInteger java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPrimeP()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the primeP.

 @return the primeP.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.BigInteger java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPrimeQ()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the primeQ.

 @return the primeQ.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.BigInteger java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPrimeExponentP()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the primeExponentP.

 @return the primeExponentP.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.BigInteger java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPrimeExponentQ()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the primeExponentQ.

 @return the primeExponentQ.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.BigInteger java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getCrtCoefficient()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the crtCoefficient.

 @return the crtCoefficient.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.spec.RSAOtherPrimeInfo[] java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getOtherPrimeInfo()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a copy of the otherPrimeInfo or null if there are 
 only two prime factors (p and q).

 @return the otherPrimeInfo. Returns a new array each
 time this method is called.

<!-- END DATA -->
