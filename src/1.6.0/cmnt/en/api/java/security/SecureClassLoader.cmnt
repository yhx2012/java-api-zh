<!-- BEGIN KEY -->
public class java.security.SecureClassLoader extends java.lang.ClassLoader
<!-- END KEY -->
<!-- BEGIN DATA -->

 This class extends ClassLoader with additional support for defining
 classes with an associated code source and permissions which are
 retrieved by the system policy by default.

 @version 1.86, 11/17/05
 @author  Li Gong 
 @author  Roland Schemers

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.SecureClassLoader(ClassLoader parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new SecureClassLoader using the specified parent
 class loader for delegation.

 <p>If there is a security manager, this method first
 calls the security manager's <code>checkCreateClassLoader</code> 
 method  to ensure creation of a class loader is allowed.
 <p>
 @param parent the parent ClassLoader
 @exception  SecurityException  if a security manager exists and its  
             <code>checkCreateClassLoader</code> method doesn't allow 
             creation of a class loader.
 @see SecurityManager#checkCreateClassLoader

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.SecureClassLoader()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new SecureClassLoader using the default parent class
 loader for delegation.

 <p>If there is a security manager, this method first
 calls the security manager's <code>checkCreateClassLoader</code> 
 method  to ensure creation of a class loader is allowed.

 @exception  SecurityException  if a security manager exists and its  
             <code>checkCreateClassLoader</code> method doesn't allow 
             creation of a class loader.
 @see SecurityManager#checkCreateClassLoader

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.lang.Class<?> java.security.SecureClassLoader.defineClass(String name, byte[] b, int off, int len, CodeSource cs)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Converts an array of bytes into an instance of class Class,
 with an optional CodeSource. Before the
 class can be used it must be resolved.
 <p>
 If a non-null CodeSource is supplied a ProtectionDomain is
 constructed and associated with the class being defined.
 <p>
 @param      name the expected name of the class, or <code>null</code>
                  if not known, using '.' and not '/' as the separator
                  and without a trailing ".class" suffix.
 @param      b    the bytes that make up the class data. The bytes in 
             positions <code>off</code> through <code>off+len-1</code> 
             should have the format of a valid class file as defined 
             by the 
             <a href="http://java.sun.com/docs/books/vmspec/">Java 
             Virtual Machine Specification</a>.
 @param      off  the start offset in <code>b</code> of the class data
 @param      len  the length of the class data
 @param      cs   the associated CodeSource, or <code>null</code> if none
 @return the <code>Class</code> object created from the data,
         and optional CodeSource.
 @exception  ClassFormatError if the data did not contain a valid class
 @exception  IndexOutOfBoundsException if either <code>off</code> or 
             <code>len</code> is negative, or if 
             <code>off+len</code> is greater than <code>b.length</code>.

 @exception  SecurityException if an attempt is made to add this class
             to a package that contains classes that were signed by
             a different set of certificates than this class, or if 
             the class name begins with "java.".

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.lang.Class<?> java.security.SecureClassLoader.defineClass(String name, ByteBuffer b, CodeSource cs)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Converts a {@link java.nio.ByteBuffer <tt>ByteBuffer</tt>}
 into an instance of class <tt>Class</tt>, with an optional CodeSource. 
 Before the class can be used it must be resolved.
 <p>
 If a non-null CodeSource is supplied a ProtectionDomain is
 constructed and associated with the class being defined.
 <p>
 @param      name the expected name of the class, or <code>null</code>
                  if not known, using '.' and not '/' as the separator
                  and without a trailing ".class" suffix.
 @param      b    the bytes that make up the class data.  The bytes from positions
                  <tt>b.position()</tt> through <tt>b.position() + b.limit() -1</tt>
                  should have the format of a valid class file as defined by the
                  <a href="http://java.sun.com/docs/books/vmspec/">Java Virtual
                  Machine Specification</a>.
 @param      cs   the associated CodeSource, or <code>null</code> if none
 @return the <code>Class</code> object created from the data,
         and optional CodeSource.
 @exception  ClassFormatError if the data did not contain a valid class
 @exception  SecurityException if an attempt is made to add this class
             to a package that contains classes that were signed by
             a different set of certificates than this class, or if 
             the class name begins with "java.".

 @since  1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.PermissionCollection java.security.SecureClassLoader.getPermissions(CodeSource codesource)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the permissions for the given CodeSource object.
 <p>
 This method is invoked by the defineClass method which takes
 a CodeSource as an argument when it is constructing the
 ProtectionDomain for the class being defined.
 <p>
 @param codesource the codesource.

 @return the permissions granted to the codesource.


<!-- END DATA -->
