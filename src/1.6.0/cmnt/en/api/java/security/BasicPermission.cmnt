<!-- BEGIN KEY -->
public abstract class java.security.BasicPermission extends java.security.Permission implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 The BasicPermission class extends the Permission class, and
 can be used as the base class for permissions that want to
 follow the same naming convention as BasicPermission.
 <P>
 The name for a BasicPermission is the name of the given permission
 (for example, "exit",
 "setFactory", "print.queueJob", etc). The naming
 convention follows the  hierarchical property naming convention.
 An asterisk may appear by itself, or if immediately preceded by a "."
 may appear at the end of the name, to signify a wildcard match.
 For example, "*" and "java.*" are valid, while "*java", "a*b",
 and "java*" are not valid.
 <P>
 The action string (inherited from Permission) is unused.
 Thus, BasicPermission is commonly used as the base class for
 "named" permissions
 (ones that contain a name but no actions list; you either have the
 named permission or you don't.)
 Subclasses may implement actions on top of BasicPermission,
 if desired.
 <p>
 <P>
 @see java.security.Permission
 @see java.security.Permissions
 @see java.security.PermissionCollection
 @see java.lang.RuntimePermission
 @see java.security.SecurityPermission
 @see java.util.PropertyPermission
 @see java.awt.AWTPermission
 @see java.net.NetPermission
 @see java.lang.SecurityManager

 @version 1.44 05/11/17

 @author Marianne Mueller
 @author Roland Schemers

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.BasicPermission(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new BasicPermission with the specified name.
 Name is the symbolic name of the permission, such as
 "setFactory",
 "print.queueJob", or "topLevelWindow", etc.

 @param name the name of the BasicPermission.

 @throws NullPointerException if <code>name</code> is <code>null</code>.
 @throws IllegalArgumentException if <code>name</code> is empty.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.BasicPermission(String name, String actions)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new BasicPermission object with the specified name.
 The name is the symbolic name of the BasicPermission, and the
 actions String is currently unused.

 @param name the name of the BasicPermission.
 @param actions ignored.

 @throws NullPointerException if <code>name</code> is <code>null</code>.
 @throws IllegalArgumentException if <code>name</code> is empty.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.BasicPermission.implies(Permission p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks if the specified permission is "implied" by
 this object.
 <P>
 More specifically, this method returns true if:<p>
 <ul>
 <li> <i>p</i>'s class is the same as this object's class, and<p>
 <li> <i>p</i>'s name equals or (in the case of wildcards)
      is implied by this object's
      name. For example, "a.b.*" implies "a.b.c".
 </ul>

 @param p the permission to check against.

 @return true if the passed permission is equal to or
 implied by this permission, false otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.BasicPermission.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks two BasicPermission objects for equality.
 Checks that <i>obj</i>'s class is the same as this object's class
 and has the same name as this object.
 <P>
 @param obj the object we are testing for equality with this object.
 @return true if <i>obj</i> is a BasicPermission, and has the same name
  as this BasicPermission object, false otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.BasicPermission.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the hash code value for this object.
 The hash code used is the hash code of the name, that is,
 <code>getName().hashCode()</code>, where <code>getName</code> is
 from the Permission superclass.

 @return a hash code value for this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.BasicPermission.getActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the canonical string representation of the actions,
 which currently is the empty string "", since there are no actions for
 a BasicPermission.

 @return the empty string "".

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.PermissionCollection java.security.BasicPermission.newPermissionCollection()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a new PermissionCollection object for storing BasicPermission
 objects.
 <p>
 A BasicPermissionCollection stores a collection of
 BasicPermission permissions.

 <p>BasicPermission objects must be stored in a manner that allows them
 to be inserted in any order, but that also enables the
 PermissionCollection <code>implies</code> method
 to be implemented in an efficient (and consistent) manner.

 @return a new PermissionCollection object suitable for
 storing BasicPermissions.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.security.BasicPermission.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 readObject is called to restore the state of the BasicPermission from
 a stream. 

<!-- END DATA -->
