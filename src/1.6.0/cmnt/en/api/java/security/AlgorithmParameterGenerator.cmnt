<!-- BEGIN KEY -->
public class java.security.AlgorithmParameterGenerator extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>AlgorithmParameterGenerator</code> class is used to generate a
 set of
 parameters to be used with a certain algorithm. Parameter generators
 are constructed using the <code>getInstance</code> factory methods
 (static methods that return instances of a given class).
 
 <P>The object that will generate the parameters can be initialized
 in two different ways: in an algorithm-independent manner, or in an
 algorithm-specific manner:

 <ul>
 <li>The algorithm-independent approach uses the fact that all parameter
 generators share the concept of a "size" and a
 source of randomness. The measure of size is universally shared 
 by all algorithm parameters, though it is interpreted differently
 for different algorithms. For example, in the case of parameters for
 the <i>DSA</i> algorithm, "size" corresponds to the size
 of the prime modulus (in bits).
 When using this approach, algorithm-specific parameter generation
 values - if any - default to some standard values, unless they can be
 derived from the specified size.<P>

 <li>The other approach initializes a parameter generator object
 using algorithm-specific semantics, which are represented by a set of
 algorithm-specific parameter generation values. To generate
 Diffie-Hellman system parameters, for example, the parameter generation
 values usually
 consist of the size of the prime modulus and the size of the
 random exponent, both specified in number of bits.
 </ul>

 <P>In case the client does not explicitly initialize the
 AlgorithmParameterGenerator
 (via a call to an <code>init</code> method), each provider must supply (and
 document) a default initialization. For example, the Sun provider uses a
 default modulus prime size of 1024 bits for the generation of DSA
 parameters.

 @author Jan Luehe

 @version 1.43, 04/21/06

 @see AlgorithmParameters
 @see java.security.spec.AlgorithmParameterSpec

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.AlgorithmParameterGenerator(AlgorithmParameterGeneratorSpi paramGenSpi, Provider provider, String algorithm)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an AlgorithmParameterGenerator object.

 @param paramGenSpi the delegate
 @param provider the provider
 @param algorithm the algorithm

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.security.AlgorithmParameterGenerator.getAlgorithm()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the standard name of the algorithm this parameter
 generator is associated with.
 
 @return the string name of the algorithm. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.AlgorithmParameterGenerator java.security.AlgorithmParameterGenerator.getInstance(String algorithm) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an AlgorithmParameterGenerator object for generating
 a set of parameters to be used with the specified algorithm.

 <p> This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new AlgorithmParameterGenerator object encapsulating the
 AlgorithmParameterGeneratorSpi implementation from the first
 Provider that supports the specified algorithm is returned.

 <p> Note that the list of registered providers may be retrieved via
 the {@link Security#getProviders() Security.getProviders()} method.

 @param algorithm the name of the algorithm this
 parameter generator is associated with.
 See Appendix A in the <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a>
 for information about standard algorithm names.

 @return the new AlgorithmParameterGenerator object.

 @exception NoSuchAlgorithmException if no Provider supports an
		AlgorithmParameterGeneratorSpi implementation for the
		specified algorithm.
 
 @see Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.AlgorithmParameterGenerator java.security.AlgorithmParameterGenerator.getInstance(String algorithm, String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns an AlgorithmParameterGenerator object for generating
 a set of parameters to be used with the specified algorithm.

 <p> A new AlgorithmParameterGenerator object encapsulating the
 AlgorithmParameterGeneratorSpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

 <p> Note that the list of registered providers may be retrieved via
 the {@link Security#getProviders() Security.getProviders()} method.

 @param algorithm the name of the algorithm this
 parameter generator is associated with.
 See Appendix A in the <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a>
 for information about standard algorithm names.

 @param provider the string name of the Provider.

 @return the new AlgorithmParameterGenerator object.

 @exception NoSuchAlgorithmException if an AlgorithmParameterGeneratorSpi
		implementation for the specified algorithm is not
		available from the specified provider.

 @exception NoSuchProviderException if the specified provider is not
		registered in the security provider list.

 @exception IllegalArgumentException if the provider name is null
		or empty.
 
 @see Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.AlgorithmParameterGenerator java.security.AlgorithmParameterGenerator.getInstance(String algorithm, Provider provider) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns an AlgorithmParameterGenerator object for generating
 a set of parameters to be used with the specified algorithm.

 <p> A new AlgorithmParameterGenerator object encapsulating the
 AlgorithmParameterGeneratorSpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

 @param algorithm the string name of the algorithm this
 parameter generator is associated with.
 See Appendix A in the <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a>
 for information about standard algorithm names.

 @param provider the Provider object.

 @return the new AlgorithmParameterGenerator object.

 @exception NoSuchAlgorithmException if an AlgorithmParameterGeneratorSpi
		implementation for the specified algorithm is not available
		from the specified Provider object.

 @exception IllegalArgumentException if the specified provider is null.

 @see Provider

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider java.security.AlgorithmParameterGenerator.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the provider of this algorithm parameter generator object.
 
 @return the provider of this algorithm parameter generator object

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.AlgorithmParameterGenerator.init(int size)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Initializes this parameter generator for a certain size.
 To create the parameters, the <code>SecureRandom</code>
 implementation of the highest-priority installed provider is used as
 the source of randomness.
 (If none of the installed providers supply an implementation of
 <code>SecureRandom</code>, a system-provided source of randomness is
 used.)

 @param size the size (number of bits).

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.AlgorithmParameterGenerator.init(int size, SecureRandom random)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Initializes this parameter generator for a certain size and source
 of randomness.

 @param size the size (number of bits).
 @param random the source of randomness.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.AlgorithmParameterGenerator.init(AlgorithmParameterSpec genParamSpec) throws java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Initializes this parameter generator with a set of algorithm-specific
 parameter generation values.
 To generate the parameters, the <code>SecureRandom</code>
 implementation of the highest-priority installed provider is used as
 the source of randomness.
 (If none of the installed providers supply an implementation of
 <code>SecureRandom</code>, a system-provided source of randomness is
 used.)

 @param genParamSpec the set of algorithm-specific parameter generation values.

 @exception InvalidAlgorithmParameterException if the given parameter
 generation values are inappropriate for this parameter generator.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.AlgorithmParameterGenerator.init(AlgorithmParameterSpec genParamSpec, SecureRandom random) throws java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Initializes this parameter generator with a set of algorithm-specific
 parameter generation values.

 @param genParamSpec the set of algorithm-specific parameter generation values.
 @param random the source of randomness.

 @exception InvalidAlgorithmParameterException if the given parameter
 generation values are inappropriate for this parameter generator.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.AlgorithmParameters java.security.AlgorithmParameterGenerator.generateParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Generates the parameters.

 @return the new AlgorithmParameters object.

<!-- END DATA -->
