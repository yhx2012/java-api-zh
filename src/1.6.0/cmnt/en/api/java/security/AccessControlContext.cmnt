<!-- BEGIN KEY -->
public final class java.security.AccessControlContext extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

 An AccessControlContext is used to make system resource access decisions
 based on the context it encapsulates.
 
 <p>More specifically, it encapsulates a context and
 has a single method, <code>checkPermission</code>,
 that is equivalent to the <code>checkPermission</code> method
 in the AccessController class, with one difference: The AccessControlContext
 <code>checkPermission</code> method makes access decisions based on the 
 context it encapsulates,
 rather than that of the current execution thread.
 
 <p>Thus, the purpose of AccessControlContext is for those situations where
 a security check that should be made within a given context
 actually needs to be done from within a
 <i>different</i> context (for example, from within a worker thread).
 
 <p> An AccessControlContext is created by calling the 
 <code>AccessController.getContext</code> method. 
 The <code>getContext</code> method takes a "snapshot"
 of the current calling context, and places
 it in an AccessControlContext object, which it returns. A sample call is
 the following:
 
 <pre>
 
   AccessControlContext acc = AccessController.getContext()
 
 </pre>
 
 <p>
 Code within a different context can subsequently call the
 <code>checkPermission</code> method on the
 previously-saved AccessControlContext object. A sample call is the
 following:
 
 <pre>
 
   acc.checkPermission(permission)
 
 </pre> 
 
 @see AccessController

 @author Roland Schemers

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.AccessControlContext(java.security.ProtectionDomain[] context)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create an AccessControlContext with the given set of ProtectionDomains.
 Context must not be null. Duplicate domains will be removed from the
 context.

 @param context the ProtectionDomains associated with this context.
 The non-duplicate domains are copied from the array. Subsequent
 changes to the array will not affect this AccessControlContext.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.AccessControlContext(AccessControlContext acc, DomainCombiner combiner)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new <code>AccessControlContext</code> with the given
 <code>AccessControlContext</code> and <code>DomainCombiner</code>.
 This constructor associates the provided
 <code>DomainCombiner</code> with the provided
 <code>AccessControlContext</code>.

 <p>

 @param acc the <code>AccessControlContext</code> associated
		with the provided <code>DomainCombiner</code>. <p>

 @param combiner the <code>DomainCombiner</code> to be associated
		with the provided <code>AccessControlContext</code>.

 @exception NullPointerException if the provided
		<code>context</code> is <code>null</code>. <p>

 @exception SecurityException if the caller does not have permission
		to invoke this constructor.
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.DomainCombiner java.security.AccessControlContext.getDomainCombiner()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the <code>DomainCombiner</code> associated with this
 <code>AccessControlContext</code>.

 <p>

 @return the <code>DomainCombiner</code> associated with this
		<code>AccessControlContext</code>, or <code>null</code>
		if there is none.

 @exception SecurityException if the caller does not have permission
		to get the <code>DomainCombiner</code> associated with this
		<code>AccessControlContext</code>.
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.AccessControlContext.checkPermission(Permission perm) throws java.security.AccessControlException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Determines whether the access request indicated by the
 specified permission should be allowed or denied, based on
 the security policy currently in effect, and the context in
 this object. The request is allowed only if every ProtectionDomain
 in the context implies the permission. Otherwise the request is
 denied.
 
 <p>
 This method quietly returns if the access request
 is permitted, or throws a suitable AccessControlException otherwise. 

 @param perm the requested permission.
 
 @exception AccessControlException if the specified permission
 is not permitted, based on the current security policy and the
 context encapsulated by this object.
 @exception NullPointerException if the permission to check for is null.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.AccessControlContext.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks two AccessControlContext objects for equality. 
 Checks that <i>obj</i> is
 an AccessControlContext and has the same set of ProtectionDomains
 as this context.
 <P>
 @param obj the object we are testing for equality with this object.
 @return true if <i>obj</i> is an AccessControlContext, and has the 
 same set of ProtectionDomains as this context, false otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.AccessControlContext.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the hash code value for this context. The hash code
 is computed by exclusive or-ing the hash code of all the protection
 domains in the context together.
 
 @return a hash code value for this context.

<!-- END DATA -->
