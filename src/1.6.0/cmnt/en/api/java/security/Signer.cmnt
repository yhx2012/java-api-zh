<!-- BEGIN KEY -->
public abstract class java.security.Signer extends java.security.Identity
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class is used to represent an Identity that can also digitally
 sign data.

 <p>The management of a signer's private keys is an important and
 sensitive issue that should be handled by subclasses as appropriate
 to their intended use.

 @see Identity

 @version 1.43 05/11/17
 @author Benjamin Renaud

 @deprecated This class is no longer used. Its functionality has been
 replaced by <code>java.security.KeyStore</code>, the
 <code>java.security.cert</code> package, and
 <code>java.security.Principal</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.security.PrivateKey java.security.Signer.privateKey
<!-- END KEY -->
<!-- BEGIN DATA -->
 The signer's private key.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.Signer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a signer. This constructor should only be used for
 serialization.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.Signer(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a signer with the specified identity name.

 @param name the identity name.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.Signer(String name, IdentityScope scope) throws java.security.KeyManagementException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a signer with the specified identity name and scope.

 @param name the identity name.

 @param scope the scope of the identity.

 @exception KeyManagementException if there is already an identity
 with the same name in the scope.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.PrivateKey java.security.Signer.getPrivateKey()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns this signer's private key.

 <p>First, if there is a security manager, its <code>checkSecurityAccess</code> 
 method is called with <code>"getSignerPrivateKey"</code> 
 as its argument to see if it's ok to return the private key. 
 
 @return this signer's private key, or null if the private key has
 not yet been set.
 
 @exception  SecurityException  if a security manager exists and its  
 <code>checkSecurityAccess</code> method doesn't allow 
 returning the private key.
 
 @see SecurityManager#checkSecurityAccess

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.Signer.setKeyPair(KeyPair pair) throws java.security.InvalidParameterException, java.security.KeyException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the key pair (public key and private key) for this signer.

 <p>First, if there is a security manager, its <code>checkSecurityAccess</code> 
 method is called with <code>"setSignerKeyPair"</code> 
 as its argument to see if it's ok to set the key pair. 
 
 @param pair an initialized key pair.

 @exception InvalidParameterException if the key pair is not
 properly initialized.
 @exception KeyException if the key pair cannot be set for any
 other reason.
 @exception  SecurityException  if a security manager exists and its  
 <code>checkSecurityAccess</code> method doesn't allow 
 setting the key pair.
 
 @see SecurityManager#checkSecurityAccess

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.Signer.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string of information about the signer.

 @return a string of information about the signer.

<!-- END DATA -->
