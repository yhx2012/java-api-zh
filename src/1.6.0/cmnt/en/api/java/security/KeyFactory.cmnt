<!-- BEGIN KEY -->
public class java.security.KeyFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 Key factories are used to convert <I>keys</I> (opaque
 cryptographic keys of type <code>Key</code>) into <I>key specifications</I>
 (transparent representations of the underlying key material), and vice
 versa.

 <P> Key factories are bi-directional. That is, they allow you to build an
 opaque key object from a given key specification (key material), or to
 retrieve the underlying key material of a key object in a suitable format.

 <P> Multiple compatible key specifications may exist for the same key.
 For example, a DSA public key may be specified using
 <code>DSAPublicKeySpec</code> or
 <code>X509EncodedKeySpec</code>. A key factory can be used to translate
 between compatible key specifications.

 <P> The following is an example of how to use a key factory in order to
 instantiate a DSA public key from its encoding.
 Assume Alice has received a digital signature from Bob.
 Bob also sent her his public key (in encoded format) to verify
 his signature. Alice then performs the following actions:

 <pre>
 X509EncodedKeySpec bobPubKeySpec = new X509EncodedKeySpec(bobEncodedPubKey);
 KeyFactory keyFactory = KeyFactory.getInstance("DSA");
 PublicKey bobPubKey = keyFactory.generatePublic(bobPubKeySpec);
 Signature sig = Signature.getInstance("DSA");
 sig.initVerify(bobPubKey);
 sig.update(data);
 sig.verify(signature);
 </pre>

 @author Jan Luehe

 @version 1.35, 04/21/06

 @see Key
 @see PublicKey
 @see PrivateKey
 @see java.security.spec.KeySpec
 @see java.security.spec.DSAPublicKeySpec
 @see java.security.spec.X509EncodedKeySpec

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.KeyFactory(KeyFactorySpi keyFacSpi, Provider provider, String algorithm)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a KeyFactory object.

 @param keyFacSpi the delegate
 @param provider the provider
 @param algorithm the name of the algorithm
 to associate with this <tt>KeyFactory</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.KeyFactory java.security.KeyFactory.getInstance(String algorithm) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a KeyFactory object that converts
 public/private keys of the specified algorithm.

 <p> This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new KeyFactory object encapsulating the
 KeyFactorySpi implementation from the first
 Provider that supports the specified algorithm is returned.

 <p> Note that the list of registered providers may be retrieved via
 the {@link Security#getProviders() Security.getProviders()} method.

 @param algorithm the name of the requested key algorithm. 
 See Appendix A in the <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a> 
 for information about standard algorithm names.

 @return the new KeyFactory object.

 @exception NoSuchAlgorithmException if no Provider supports a
          KeyFactorySpi implementation for the
          specified algorithm.

 @see Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.KeyFactory java.security.KeyFactory.getInstance(String algorithm, String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a KeyFactory object that converts
 public/private keys of the specified algorithm.

 <p> A new KeyFactory object encapsulating the
 KeyFactorySpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

 <p> Note that the list of registered providers may be retrieved via
 the {@link Security#getProviders() Security.getProviders()} method.

 @param algorithm the name of the requested key algorithm. 
 See Appendix A in the <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a> 
 for information about standard algorithm names.

 @param provider the name of the provider.

 @return the new KeyFactory object.

 @exception NoSuchAlgorithmException if a KeyFactorySpi
          implementation for the specified algorithm is not
          available from the specified provider.

 @exception NoSuchProviderException if the specified provider is not
          registered in the security provider list.

 @exception IllegalArgumentException if the provider name is null
          or empty.
 
 @see Provider 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.KeyFactory java.security.KeyFactory.getInstance(String algorithm, Provider provider) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a KeyFactory object that converts
 public/private keys of the specified algorithm.

 <p> A new KeyFactory object encapsulating the
 KeyFactorySpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

 @param algorithm the name of the requested key algorithm. 
 See Appendix A in the <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a> 
 for information about standard algorithm names.

 @param provider the provider.

 @return the new KeyFactory object.

 @exception NoSuchAlgorithmException if a KeyFactorySpi
          implementation for the specified algorithm is not available
          from the specified Provider object.

 @exception IllegalArgumentException if the specified provider is null.
 
 @see Provider

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider java.security.KeyFactory.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the provider of this key factory object.
 
 @return the provider of this key factory object

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.security.KeyFactory.getAlgorithm()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the name of the algorithm 
 associated with this <tt>KeyFactory</tt>.

 @return the name of the algorithm associated with this
 <tt>KeyFactory</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.PublicKey java.security.KeyFactory.generatePublic(KeySpec keySpec) throws java.security.spec.InvalidKeySpecException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Generates a public key object from the provided key specification
 (key material).

 @param keySpec the specification (key material) of the public key.

 @return the public key.

 @exception InvalidKeySpecException if the given key specification
 is inappropriate for this key factory to produce a public key.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.PrivateKey java.security.KeyFactory.generatePrivate(KeySpec keySpec) throws java.security.spec.InvalidKeySpecException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Generates a private key object from the provided key specification
 (key material).

 @param keySpec the specification (key material) of the private key.

 @return the private key.

 @exception InvalidKeySpecException if the given key specification
 is inappropriate for this key factory to produce a private key.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final T extends java.security.spec.KeySpec java.security.KeyFactory.getKeySpec(Key key, java.lang.Class<T> keySpec) throws java.security.spec.InvalidKeySpecException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a specification (key material) of the given key object.
 <code>keySpec</code> identifies the specification class in which 
 the key material should be returned. It could, for example, be
 <code>DSAPublicKeySpec.class</code>, to indicate that the
 key material should be returned in an instance of the 
 <code>DSAPublicKeySpec</code> class.

 @param key the key.

 @param keySpec the specification class in which 
 the key material should be returned.

 @return the underlying key specification (key material) in an instance
 of the requested specification class.

 @exception InvalidKeySpecException if the requested key specification is
 inappropriate for the given key, or the given key cannot be processed
 (e.g., the given key has an unrecognized algorithm or format).

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Key java.security.KeyFactory.translateKey(Key key) throws java.security.InvalidKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Translates a key object, whose provider may be unknown or potentially
 untrusted, into a corresponding key object of this key factory.

 @param key the key whose provider is unknown or untrusted.

 @return the translated key.

 @exception InvalidKeyException if the given key cannot be processed
 by this key factory.

<!-- END DATA -->
