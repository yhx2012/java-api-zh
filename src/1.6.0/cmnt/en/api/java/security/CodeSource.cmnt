<!-- BEGIN KEY -->
public class java.security.CodeSource extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->

 <p>This class extends the concept of a codebase to
 encapsulate not only the location (URL) but also the certificate chains 
 that were used to verify signed code originating from that location.

 @version 	1.41, 11/17/05
 @author Li Gong
 @author Roland Schemers

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.net.URL java.security.CodeSource.location
<!-- END KEY -->
<!-- BEGIN DATA -->
 The code location.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.CodeSource(URL url, java.security.cert.Certificate[] certs)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a CodeSource and associates it with the specified 
 location and set of certificates.
 
 @param url the location (URL).
 
 @param certs the certificate(s). It may be null. The contents of the 
 array are copied to protect against subsequent modification.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.CodeSource(URL url, java.security.CodeSigner[] signers)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a CodeSource and associates it with the specified 
 location and set of code signers.
 
 @param url the location (URL).
 @param signers the code signers. It may be null. The contents of the 
 array are copied to protect against subsequent modification.

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.CodeSource.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the hash code value for this object.

 @return a hash code value for this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.CodeSource.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tests for equality between the specified object and this
 object. Two CodeSource objects are considered equal if their 
 locations are of identical value and if their signer certificate
 chains are of identical value. It is not required that
 the certificate chains be in the same order.
 
 @param obj the object to test for equality with this object.
 
 @return true if the objects are considered equal, false otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.net.URL java.security.CodeSource.getLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the location associated with this CodeSource.
 
 @return the location (URL).

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.cert.Certificate[] java.security.CodeSource.getCertificates()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the certificates associated with this CodeSource.
 <p>
 If this CodeSource object was created using the
 {@link #CodeSource(URL url, CodeSigner[] signers)}
 constructor then its certificate chains are extracted and used to 
 create an array of Certificate objects. Each signer certificate is 
 followed by its supporting certificate chain (which may be empty). 
 Each signer certificate and its supporting certificate chain is ordered 
 bottom-to-top (i.e., with the signer certificate first and the (root) 
 certificate authority last).
 
 @return A copy of the certificates array, or null if there is none. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.CodeSigner[] java.security.CodeSource.getCodeSigners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the code signers associated with this CodeSource.
 <p>
 If this CodeSource object was created using the
 {@link #CodeSource(URL url, Certificate[] certs)}
 constructor then its certificate chains are extracted and used to 
 create an array of CodeSigner objects. Note that only X.509 certificates
 are examined - all other certificate types are ignored.

 @return A copy of the code signer array, or null if there is none.

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.CodeSource.implies(CodeSource codesource)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if this CodeSource object "implies" the specified CodeSource.
 <P>
 More specifically, this method makes the following checks, in order. 
 If any fail, it returns false. If they all succeed, it returns true.<p>
 <ol>
 <li> <i>codesource</i> must not be null.
 <li> If this object's certificates are not null, then all
 of this object's certificates must be present in <i>codesource</i>'s 
 certificates.
 <li> If this object's location (getLocation()) is not null, then the 
 following checks are made against this object's location and 
 <i>codesource</i>'s:<p>
   <ol>
     <li>  <i>codesource</i>'s location must not be null.

     <li>  If this object's location 
           equals <i>codesource</i>'s location, then return true.

     <li>  This object's protocol (getLocation().getProtocol()) must be
           equal to <i>codesource</i>'s protocol.

     <li>  If this object's host (getLocation().getHost()) is not null,  
           then the SocketPermission
           constructed with this object's host must imply the
           SocketPermission constructed with <i>codesource</i>'s host.

     <li>  If this object's port (getLocation().getPort()) is not 
           equal to -1 (that is, if a port is specified), it must equal 
           <i>codesource</i>'s port.

     <li>  If this object's file (getLocation().getFile()) doesn't equal
           <i>codesource</i>'s file, then the following checks are made:
           If this object's file ends with "/-",
           then <i>codesource</i>'s file must start with this object's
           file (exclusive the trailing "-").
           If this object's file ends with a "/*",
           then <i>codesource</i>'s file must start with this object's
           file and must not have any further "/" separators.
           If this object's file doesn't end with a "/", 
           then <i>codesource</i>'s file must match this object's 
           file with a '/' appended.

     <li>  If this object's reference (getLocation().getRef()) is 
           not null, it must equal <i>codesource</i>'s reference.

   </ol>
 </ol>
 <p>
 For example, the codesource objects with the following locations
 and null certificates all imply
 the codesource with the location "http://java.sun.com/classes/foo.jar"
 and null certificates:
 <pre>
     http:
     http://*.sun.com/classes/*
     http://java.sun.com/classes/-
     http://java.sun.com/classes/foo.jar
 </pre>
 
 Note that if this CodeSource has a null location and a null
 certificate chain, then it implies every other CodeSource.

 @param codesource CodeSource to compare against.

 @return true if the specified codesource is implied by this codesource,
 false if not.  

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.CodeSource.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string describing this CodeSource, telling its
 URL and certificates.
 
 @return information about this CodeSource.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.security.CodeSource.readObject(ObjectInputStream ois) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Restores this object from a stream (i.e., deserializes it).

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.security.CodeSource.writeObject(ObjectOutputStream oos) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes this object out to a stream (i.e., serializes it).

 @serialData An initial <code>URL</code> is followed by an
 <code>int</code> indicating the number of certificates to follow 
 (a value of "zero" denotes that there are no certificates associated
 with this object).
 Each certificate is written out starting with a <code>String</code>
 denoting the certificate type, followed by an
 <code>int</code> specifying the length of the certificate encoding,
 followed by the certificate encoding itself which is written out as an
 array of bytes. Finally, if any code signers are present then the array 
 of code signers is serialized and written out too.

<!-- END DATA -->
