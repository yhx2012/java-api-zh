<!-- BEGIN KEY -->
public class java.security.AlgorithmParameters extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class is used as an opaque representation of cryptographic parameters.
 
 <p>An <code>AlgorithmParameters</code> object for managing the parameters
 for a particular algorithm can be obtained by
 calling one of the <code>getInstance</code> factory methods
 (static methods that return instances of a given class).
 
 <p>Once an <code>AlgorithmParameters</code> object is obtained, it must be
 initialized via a call to <code>init</code>, using an appropriate parameter
 specification or parameter encoding.

 <p>A transparent parameter specification is obtained from an
 <code>AlgorithmParameters</code> object via a call to
 <code>getParameterSpec</code>, and a byte encoding of the parameters is
 obtained via a call to <code>getEncoded</code>.

 @author Jan Luehe

 @version 1.27, 04/21/06

 @see java.security.spec.AlgorithmParameterSpec
 @see java.security.spec.DSAParameterSpec
 @see KeyPairGenerator

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.AlgorithmParameters(AlgorithmParametersSpi paramSpi, Provider provider, String algorithm)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an AlgorithmParameters object.

 @param paramSpi the delegate
 @param provider the provider
 @param algorithm the algorithm

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.security.AlgorithmParameters.getAlgorithm()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of the algorithm associated with this parameter object.
 
 @return the algorithm name.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.AlgorithmParameters java.security.AlgorithmParameters.getInstance(String algorithm) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a parameter object for the specified algorithm.

 <p> This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new AlgorithmParameters object encapsulating the
 AlgorithmParametersSpi implementation from the first
 Provider that supports the specified algorithm is returned.

 <p> Note that the list of registered providers may be retrieved via
 the {@link Security#getProviders() Security.getProviders()} method.

 <p> The returned parameter object must be initialized via a call to
 <code>init</code>, using an appropriate parameter specification or
 parameter encoding.

 @param algorithm the name of the algorithm requested. 
 See Appendix A in the <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a>
 for information about standard algorithm names.

 @return the new parameter object.

 @exception NoSuchAlgorithmException if no Provider supports an
		AlgorithmParametersSpi implementation for the
		specified algorithm.

 @see Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.AlgorithmParameters java.security.AlgorithmParameters.getInstance(String algorithm, String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a parameter object for the specified algorithm.

 <p> A new AlgorithmParameters object encapsulating the
 AlgorithmParametersSpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

 <p> Note that the list of registered providers may be retrieved via
 the {@link Security#getProviders() Security.getProviders()} method.

 <p>The returned parameter object must be initialized via a call to
 <code>init</code>, using an appropriate parameter specification or
 parameter encoding.

 @param algorithm the name of the algorithm requested.
 See Appendix A in the <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a>
 for information about standard algorithm names.

 @param provider the name of the provider.

 @return the new parameter object.

 @exception NoSuchAlgorithmException if an AlgorithmParametersSpi
		implementation for the specified algorithm is not
		available from the specified provider.

 @exception NoSuchProviderException if the specified provider is not
		registered in the security provider list.

 @exception IllegalArgumentException if the provider name is null
		or empty. 
 
 @see Provider 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.AlgorithmParameters java.security.AlgorithmParameters.getInstance(String algorithm, Provider provider) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a parameter object for the specified algorithm.

 <p> A new AlgorithmParameters object encapsulating the
 AlgorithmParametersSpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

 <p>The returned parameter object must be initialized via a call to
 <code>init</code>, using an appropriate parameter specification or
 parameter encoding.

 @param algorithm the name of the algorithm requested.
 See Appendix A in the <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a>
 for information about standard algorithm names.

 @param provider the name of the provider.

 @return the new parameter object.

 @exception NoSuchAlgorithmException if an AlgorithmParameterGeneratorSpi
          implementation for the specified algorithm is not available
          from the specified Provider object.

 @exception IllegalArgumentException if the provider is null.

 @see Provider

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider java.security.AlgorithmParameters.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the provider of this parameter object.
 
 @return the provider of this parameter object

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.AlgorithmParameters.init(AlgorithmParameterSpec paramSpec) throws java.security.spec.InvalidParameterSpecException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Initializes this parameter object using the parameters 
 specified in <code>paramSpec</code>.

 @param paramSpec the parameter specification.

 @exception InvalidParameterSpecException if the given parameter
 specification is inappropriate for the initialization of this parameter
 object, or if this parameter object has already been initialized.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.AlgorithmParameters.init(byte[] params) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Imports the specified parameters and decodes them according to the 
 primary decoding format for parameters. The primary decoding
 format for parameters is ASN.1, if an ASN.1 specification for this type
 of parameters exists.

 @param params the encoded parameters.

 @exception IOException on decoding errors, or if this parameter object
 has already been initialized.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.AlgorithmParameters.init(byte[] params, String format) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Imports the parameters from <code>params</code> and decodes them 
 according to the specified decoding scheme.
 If <code>format</code> is null, the
 primary decoding format for parameters is used. The primary decoding
 format is ASN.1, if an ASN.1 specification for these parameters
 exists.

 @param params the encoded parameters.

 @param format the name of the decoding scheme.

 @exception IOException on decoding errors, or if this parameter object
 has already been initialized.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final T extends java.security.spec.AlgorithmParameterSpec java.security.AlgorithmParameters.getParameterSpec(java.lang.Class<T> paramSpec) throws java.security.spec.InvalidParameterSpecException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a (transparent) specification of this parameter object.
 <code>paramSpec</code> identifies the specification class in which 
 the parameters should be returned. It could, for example, be
 <code>DSAParameterSpec.class</code>, to indicate that the
 parameters should be returned in an instance of the 
 <code>DSAParameterSpec</code> class.

 @param paramSpec the specification class in which 
 the parameters should be returned.

 @return the parameter specification.

 @exception InvalidParameterSpecException if the requested parameter
 specification is inappropriate for this parameter object, or if this
 parameter object has not been initialized.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte[] java.security.AlgorithmParameters.getEncoded() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the parameters in their primary encoding format.
 The primary encoding format for parameters is ASN.1, if an ASN.1
 specification for this type of parameters exists.

 @return the parameters encoded using their primary encoding format.

 @exception IOException on encoding errors, or if this parameter object
 has not been initialized.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final byte[] java.security.AlgorithmParameters.getEncoded(String format) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the parameters encoded in the specified scheme.
 If <code>format</code> is null, the
 primary encoding format for parameters is used. The primary encoding
 format is ASN.1, if an ASN.1 specification for these parameters
 exists.

 @param format the name of the encoding format.

 @return the parameters encoded using the specified encoding scheme.

 @exception IOException on encoding errors, or if this parameter object
 has not been initialized.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.security.AlgorithmParameters.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a formatted string describing the parameters.

 @return a formatted string describing the parameters, or null if this
 parameter object has not been initialized.

<!-- END DATA -->
