<!-- BEGIN KEY -->
public static class java.security.KeyStore.PasswordProtection extends java.lang.Object implements java.security.KeyStore.ProtectionParameter, javax.security.auth.Destroyable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A password-based implementation of <code>ProtectionParameter</code>.

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.KeyStore.PasswordProtection(char[] password)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a password parameter.

 <p> The specified <code>password</code> is cloned before it is stored
 in the new <code>PasswordProtection</code> object.

 @param password the password, which may be <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized char[] java.security.KeyStore.PasswordProtection.getPassword()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the password.

 <p>Note that this method returns a reference to the password.
 If a clone of the array is created it is the caller's
 responsibility to zero out the password information
 after it is no longer needed.

 @see #destroy()
 @return the password, which may be <code>null</code>
 @exception IllegalStateException if the password has
		been cleared (destroyed)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.security.KeyStore.PasswordProtection.destroy() throws javax.security.auth.DestroyFailedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Clears the password.

 @exception DestroyFailedException if this method was unable
	to clear the password

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.security.KeyStore.PasswordProtection.isDestroyed()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines if password has been cleared.

 @return true if the password has been cleared, false otherwise

<!-- END DATA -->
