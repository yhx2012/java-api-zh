<!-- BEGIN KEY -->
public class java.security.DigestInputStream extends java.io.FilterInputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
 A transparent stream that updates the associated message digest using
 the bits going through the stream.

 <p>To complete the message digest computation, call one of the
 <code>digest</code> methods on the associated message
 digest after your calls to one of this digest input stream's
 {@link #read() read} methods.

 <p>It is possible to turn this stream on or off (see
 {@link #on(boolean) on}). When it is on, a call to one of the
 <code>read</code> methods
 results in an update on the message digest.  But when it is off,
 the message digest is not updated. The default is for the stream
 to be on.

 <p>Note that digest objects can compute only one digest (see
 {@link MessageDigest}),
 so that in order to compute intermediate digests, a caller should
 retain a handle onto the digest object, and clone it for each
 digest to be computed, leaving the orginal digest untouched.

 @see MessageDigest

 @see DigestOutputStream

 @version 1.38 05/11/17
 @author Benjamin Renaud

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.MessageDigest java.security.DigestInputStream.digest
<!-- END KEY -->
<!-- BEGIN DATA -->
 The message digest associated with this stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.DigestInputStream(InputStream stream, MessageDigest digest)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a digest input stream, using the specified input stream
 and message digest.

 @param stream the input stream.

 @param digest the message digest to associate with this stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.MessageDigest java.security.DigestInputStream.getMessageDigest()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the message digest associated with this stream.

 @return the message digest associated with this stream.
 @see #setMessageDigest(java.security.MessageDigest)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.DigestInputStream.setMessageDigest(MessageDigest digest)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Associates the specified message digest with this stream.

 @param digest the message digest to be associated with this stream.
 @see #getMessageDigest()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.DigestInputStream.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads a byte, and updates the message digest (if the digest
 function is on).  That is, this method reads a byte from the
 input stream, blocking until the byte is actually read. If the
 digest function is on (see {@link #on(boolean) on}), this method
 will then call <code>update</code> on the message digest associated
 with this stream, passing it the byte read.

 @return the byte read.

 @exception IOException if an I/O error occurs.

 @see MessageDigest#update(byte)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.DigestInputStream.read(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads into a byte array, and updates the message digest (if the
 digest function is on).  That is, this method reads up to
 <code>len</code> bytes from the input stream into the array
 <code>b</code>, starting at offset <code>off</code>. This method
 blocks until the data is actually
 read. If the digest function is on (see
 {@link #on(boolean) on}), this method will then call <code>update</code>
 on the message digest associated with this stream, passing it
 the data.

 @param b	the array into which the data is read.

 @param off the starting offset into <code>b</code> of where the
 data should be placed.

 @param len the maximum number of bytes to be read from the input
 stream into b, starting at offset <code>off</code>.

 @return  the actual number of bytes read. This is less than
 <code>len</code> if the end of the stream is reached prior to
 reading <code>len</code> bytes. -1 is returned if no bytes were
 read because the end of the stream had already been reached when
 the call was made.

 @exception IOException if an I/O error occurs.

 @see MessageDigest#update(byte[], int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.DigestInputStream.on(boolean on)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Turns the digest function on or off. The default is on.  When
 it is on, a call to one of the <code>read</code> methods results in an
 update on the message digest.  But when it is off, the message
 digest is not updated.

 @param on true to turn the digest function on, false to turn
 it off.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.DigestInputStream.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Prints a string representation of this digest input stream and
 its associated message digest object.

<!-- END DATA -->
