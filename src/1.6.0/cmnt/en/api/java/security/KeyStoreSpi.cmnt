<!-- BEGIN KEY -->
public abstract class java.security.KeyStoreSpi extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)
 for the <code>KeyStore</code> class.
 All the abstract methods in this class must be implemented by each
 cryptographic service provider who wishes to supply the implementation
 of a keystore for a particular keystore type.

 @author Jan Luehe

 @version 1.22, 04/07/06

 @see KeyStore

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.Key java.security.KeyStoreSpi.engineGetKey(String alias, char[] password) throws java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the key associated with the given alias, using the given
 password to recover it.  The key must have been associated with
 the alias by a call to <code>setKeyEntry</code>,
 or by a call to <code>setEntry</code> with a
 <code>PrivateKeyEntry</code> or <code>SecretKeyEntry</code>.

 @param alias the alias name
 @param password the password for recovering the key

 @return the requested key, or null if the given alias does not exist
 or does not identify a key-related entry.

 @exception NoSuchAlgorithmException if the algorithm for recovering the
 key cannot be found
 @exception UnrecoverableKeyException if the key cannot be recovered
 (e.g., the given password is wrong).

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.cert.Certificate[] java.security.KeyStoreSpi.engineGetCertificateChain(String alias)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the certificate chain associated with the given alias.
 The certificate chain must have been associated with the alias
 by a call to <code>setKeyEntry</code>,
 or by a call to <code>setEntry</code> with a
 <code>PrivateKeyEntry</code>.

 @param alias the alias name

 @return the certificate chain (ordered with the user's certificate first
 and the root certificate authority last), or null if the given alias
 does not exist or does not contain a certificate chain

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.cert.Certificate java.security.KeyStoreSpi.engineGetCertificate(String alias)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the certificate associated with the given alias.

 <p> If the given alias name identifies an entry
 created by a call to <code>setCertificateEntry</code>,
 or created by a call to <code>setEntry</code> with a
 <code>TrustedCertificateEntry</code>,
 then the trusted certificate contained in that entry is returned.

 <p> If the given alias name identifies an entry
 created by a call to <code>setKeyEntry</code>,
 or created by a call to <code>setEntry</code> with a
 <code>PrivateKeyEntry</code>,
 then the first element of the certificate chain in that entry
 (if a chain exists) is returned.

 @param alias the alias name

 @return the certificate, or null if the given alias does not exist or
 does not contain a certificate.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Date java.security.KeyStoreSpi.engineGetCreationDate(String alias)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the creation date of the entry identified by the given alias.

 @param alias the alias name

 @return the creation date of this entry, or null if the given alias does
 not exist

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.security.KeyStoreSpi.engineSetKeyEntry(String alias, Key key, char[] password, java.security.cert.Certificate[] chain) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the given key to the given alias, protecting it with the given
 password.

 <p>If the given key is of type <code>java.security.PrivateKey</code>,
 it must be accompanied by a certificate chain certifying the
 corresponding public key.

 <p>If the given alias already exists, the keystore information
 associated with it is overridden by the given key (and possibly
 certificate chain).

 @param alias the alias name
 @param key the key to be associated with the alias
 @param password the password to protect the key
 @param chain the certificate chain for the corresponding public
 key (only required if the given key is of type
 <code>java.security.PrivateKey</code>).

 @exception KeyStoreException if the given key cannot be protected, or
 this operation fails for some other reason

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.security.KeyStoreSpi.engineSetKeyEntry(String alias, byte[] key, java.security.cert.Certificate[] chain) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the given key (that has already been protected) to the given
 alias.

 <p>If the protected key is of type
 <code>java.security.PrivateKey</code>,
 it must be accompanied by a certificate chain certifying the
 corresponding public key.

 <p>If the given alias already exists, the keystore information
 associated with it is overridden by the given key (and possibly
 certificate chain).

 @param alias the alias name
 @param key the key (in protected format) to be associated with the alias
 @param chain the certificate chain for the corresponding public
 key (only useful if the protected key is of type
 <code>java.security.PrivateKey</code>).

 @exception KeyStoreException if this operation fails.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.security.KeyStoreSpi.engineSetCertificateEntry(String alias, Certificate cert) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the given certificate to the given alias.

 <p> If the given alias identifies an existing entry
 created by a call to <code>setCertificateEntry</code>,
 or created by a call to <code>setEntry</code> with a
 <code>TrustedCertificateEntry</code>,
 the trusted certificate in the existing entry
 is overridden by the given certificate.

 @param alias the alias name
 @param cert the certificate

 @exception KeyStoreException if the given alias already exists and does
 not identify an entry containing a trusted certificate,
 or this operation fails for some other reason.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.security.KeyStoreSpi.engineDeleteEntry(String alias) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Deletes the entry identified by the given alias from this keystore.

 @param alias the alias name

 @exception KeyStoreException if the entry cannot be removed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Enumeration<java.lang.String> java.security.KeyStoreSpi.engineAliases()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Lists all the alias names of this keystore.

 @return enumeration of the alias names

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.security.KeyStoreSpi.engineContainsAlias(String alias)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks if the given alias exists in this keystore.

 @param alias the alias name

 @return true if the alias exists, false otherwise

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.security.KeyStoreSpi.engineSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the number of entries in this keystore.

 @return the number of entries in this keystore

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.security.KeyStoreSpi.engineIsKeyEntry(String alias)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the entry identified by the given alias
 was created by a call to <code>setKeyEntry</code>,
 or created by a call to <code>setEntry</code> with a
 <code>PrivateKeyEntry</code> or a <code>SecretKeyEntry</code>.

 @param alias the alias for the keystore entry to be checked

 @return true if the entry identified by the given alias is a
 key-related, false otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.security.KeyStoreSpi.engineIsCertificateEntry(String alias)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the entry identified by the given alias
 was created by a call to <code>setCertificateEntry</code>,
 or created by a call to <code>setEntry</code> with a
 <code>TrustedCertificateEntry</code>.

 @param alias the alias for the keystore entry to be checked

 @return true if the entry identified by the given alias contains a
 trusted certificate, false otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String java.security.KeyStoreSpi.engineGetCertificateAlias(Certificate cert)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the (alias) name of the first keystore entry whose certificate
 matches the given certificate.

 <p>This method attempts to match the given certificate with each
 keystore entry. If the entry being considered was
 created by a call to <code>setCertificateEntry</code>,
 or created by a call to <code>setEntry</code> with a
 <code>TrustedCertificateEntry</code>,
 then the given certificate is compared to that entry's certificate.

 <p> If the entry being considered was
 created by a call to <code>setKeyEntry</code>,
 or created by a call to <code>setEntry</code> with a
 <code>PrivateKeyEntry</code>,
 then the given certificate is compared to the first
 element of that entry's certificate chain.

 @param cert the certificate to match with.

 @return the alias name of the first entry with matching certificate,
 or null if no such entry exists in this keystore.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.security.KeyStoreSpi.engineStore(OutputStream stream, char[] password) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Stores this keystore to the given output stream, and protects its
 integrity with the given password.

 @param stream the output stream to which this keystore is written.
 @param password the password to generate the keystore integrity check

 @exception IOException if there was an I/O problem with data
 @exception NoSuchAlgorithmException if the appropriate data integrity
 algorithm could not be found
 @exception CertificateException if any of the certificates included in
 the keystore data could not be stored

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.KeyStoreSpi.engineStore(KeyStore.LoadStoreParameter param) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Stores this keystore using the given
 <code>KeyStore.LoadStoreParmeter</code>.

 @param param the <code>KeyStore.LoadStoreParmeter</code>
		that specifies how to store the keystore,
		which may be <code>null</code>

 @exception IllegalArgumentException if the given
		<code>KeyStore.LoadStoreParmeter</code>
		input is not recognized
 @exception IOException if there was an I/O problem with data
 @exception NoSuchAlgorithmException if the appropriate data integrity
		algorithm could not be found
 @exception CertificateException if any of the certificates included in
		the keystore data could not be stored

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.security.KeyStoreSpi.engineLoad(InputStream stream, char[] password) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Loads the keystore from the given input stream.

 <p>A password may be given to unlock the keystore
 (e.g. the keystore resides on a hardware token device),
 or to check the integrity of the keystore data.
 If a password is not given for integrity checking,
 then integrity checking is not performed.

 @param stream the input stream from which the keystore is loaded,
 or <code>null</code>
 @param password the password used to check the integrity of
 the keystore, the password used to unlock the keystore,
 or <code>null</code>

 @exception IOException if there is an I/O or format problem with the
 keystore data, if a password is required but not given,
 or if the given password was incorrect. If the error is due to a
 wrong password, the {@link Throwable#getCause cause} of the 
 <code>IOException</code> should be an 
 <code>UnrecoverableKeyException</code>
 @exception NoSuchAlgorithmException if the algorithm used to check
 the integrity of the keystore cannot be found
 @exception CertificateException if any of the certificates in the
 keystore could not be loaded

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.KeyStoreSpi.engineLoad(KeyStore.LoadStoreParameter param) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Loads the keystore using the given
 <code>KeyStore.LoadStoreParameter</code>.

 <p> Note that if this KeyStore has already been loaded, it is
 reinitialized and loaded again from the given parameter.

 @param param the <code>KeyStore.LoadStoreParameter</code>
		that specifies how to load the keystore,
		which may be <code>null</code>

 @exception IllegalArgumentException if the given
		<code>KeyStore.LoadStoreParameter</code>
		input is not recognized
 @exception IOException if there is an I/O or format problem with the
		keystore data. If the error is due to an incorrect 
         <code>ProtectionParameter</code> (e.g. wrong password)
         the {@link Throwable#getCause cause} of the 
         <code>IOException</code> should be an 
         <code>UnrecoverableKeyException</code>
 @exception NoSuchAlgorithmException if the algorithm used to check
		the integrity of the keystore cannot be found
 @exception CertificateException if any of the certificates in the
		keystore could not be loaded

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.KeyStore.Entry java.security.KeyStoreSpi.engineGetEntry(String alias, KeyStore.ProtectionParameter protParam) throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableEntryException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a <code>KeyStore.Entry</code> for the specified alias
 with the specified protection parameter.

 @param alias get the <code>KeyStore.Entry</code> for this alias
 @param protParam the <code>ProtectionParameter</code>
		used to protect the <code>Entry</code>,
		which may be <code>null</code>

 @return the <code>KeyStore.Entry</code> for the specified alias,
		or <code>null</code> if there is no such entry

 @exception KeyStoreException if the operation failed
 @exception NoSuchAlgorithmException if the algorithm for recovering the
		entry cannot be found
 @exception UnrecoverableEntryException if the specified
		<code>protParam</code> were insufficient or invalid
 @exception UnrecoverableKeyException if the entry is a 
          <code>PrivateKeyEntry</code> or <code>SecretKeyEntry</code>
          and the specified <code>protParam</code> does not contain
          the information needed to recover the key (e.g. wrong password)

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.KeyStoreSpi.engineSetEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Saves a <code>KeyStore.Entry</code> under the specified alias.
 The specified protection parameter is used to protect the
 <code>Entry</code>.

 <p> If an entry already exists for the specified alias,
 it is overridden.

 @param alias save the <code>KeyStore.Entry</code> under this alias
 @param entry the <code>Entry</code> to save
 @param protParam the <code>ProtectionParameter</code>
		used to protect the <code>Entry</code>,
		which may be <code>null</code>

 @exception KeyStoreException if this operation fails

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.KeyStoreSpi.engineEntryInstanceOf(String alias, java.lang.Class<? extends java.security.KeyStore.Entry> entryClass)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines if the keystore <code>Entry</code> for the specified
 <code>alias</code> is an instance or subclass of the specified
 <code>entryClass</code>.

 @param alias the alias name
 @param entryClass the entry class

 @return true if the keystore <code>Entry</code> for the specified
		<code>alias</code> is an instance or subclass of the
		specified <code>entryClass</code>, false otherwise

 @since 1.5

<!-- END DATA -->
