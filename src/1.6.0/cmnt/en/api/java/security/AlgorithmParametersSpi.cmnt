<!-- BEGIN KEY -->
public abstract class java.security.AlgorithmParametersSpi extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)
 for the <code>AlgorithmParameters</code> class, which is used to manage
 algorithm parameters.

 <p> All the abstract methods in this class must be implemented by each 
 cryptographic service provider who wishes to supply parameter management
 for a particular algorithm.

 @author Jan Luehe

 @version 1.14, 11/17/05

 @see AlgorithmParameters
 @see java.security.spec.AlgorithmParameterSpec
 @see java.security.spec.DSAParameterSpec

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.security.AlgorithmParametersSpi.engineInit(AlgorithmParameterSpec paramSpec) throws java.security.spec.InvalidParameterSpecException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Initializes this parameters object using the parameters 
 specified in <code>paramSpec</code>.

 @param paramSpec the parameter specification.

 @exception InvalidParameterSpecException if the given parameter
 specification is inappropriate for the initialization of this parameter
 object.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.security.AlgorithmParametersSpi.engineInit(byte[] params) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Imports the specified parameters and decodes them
 according to the primary decoding format for parameters.
 The primary decoding format for parameters is ASN.1, if an ASN.1
 specification for this type of parameters exists.

 @param params the encoded parameters.

 @exception IOException on decoding errors

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.security.AlgorithmParametersSpi.engineInit(byte[] params, String format) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Imports the parameters from <code>params</code> and
 decodes them according to the specified decoding format.
 If <code>format</code> is null, the
 primary decoding format for parameters is used. The primary decoding
 format is ASN.1, if an ASN.1 specification for these parameters
 exists.

 @param params the encoded parameters.

 @param format the name of the decoding format.

 @exception IOException on decoding errors

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract T extends java.security.spec.AlgorithmParameterSpec java.security.AlgorithmParametersSpi.engineGetParameterSpec(java.lang.Class<T> paramSpec) throws java.security.spec.InvalidParameterSpecException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a (transparent) specification of this parameters
 object.
 <code>paramSpec</code> identifies the specification class in which 
 the parameters should be returned. It could, for example, be
 <code>DSAParameterSpec.class</code>, to indicate that the
 parameters should be returned in an instance of the 
 <code>DSAParameterSpec</code> class.

 @param paramSpec the the specification class in which 
 the parameters should be returned.

 @return the parameter specification.

 @exception InvalidParameterSpecException if the requested parameter
 specification is inappropriate for this parameter object.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract byte[] java.security.AlgorithmParametersSpi.engineGetEncoded() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the parameters in their primary encoding format.
 The primary encoding format for parameters is ASN.1, if an ASN.1
 specification for this type of parameters exists.

 @return the parameters encoded using their primary encoding format.

 @exception IOException on encoding errors.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract byte[] java.security.AlgorithmParametersSpi.engineGetEncoded(String format) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the parameters encoded in the specified format.
 If <code>format</code> is null, the
 primary encoding format for parameters is used. The primary encoding
 format is ASN.1, if an ASN.1 specification for these parameters
 exists.

 @param format the name of the encoding format.

 @return the parameters encoded using the specified encoding scheme.

 @exception IOException on encoding errors.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract java.lang.String java.security.AlgorithmParametersSpi.engineToString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a formatted string describing the parameters.

 @return a formatted string describing the parameters.

<!-- END DATA -->
