<!-- BEGIN KEY -->
public class java.security.KeyRep extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 Standardized representation for serialized Key objects.

 <p>

 Note that a serialized Key may contain sensitive information
 which should not be exposed in untrusted environments.  See the
 <a href="../../../platform/serialization/spec/security.html">
 Security Appendix</a>
 of the Serialization Specification for more information.

 @see Key
 @see KeyFactory
 @see javax.crypto.spec.SecretKeySpec
 @see java.security.spec.X509EncodedKeySpec
 @see java.security.spec.PKCS8EncodedKeySpec

 @version 1.10, 06/04/24
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.security.KeyRep.Type java.security.KeyRep.type
<!-- END KEY -->
<!-- BEGIN DATA -->
 Either one of Type.SECRET, Type.PUBLIC, or Type.PRIVATE

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.security.KeyRep.algorithm
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Key algorithm

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.security.KeyRep.format
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Key encoding format

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private byte[] java.security.KeyRep.encoded
<!-- END KEY -->
<!-- BEGIN DATA -->
 The encoded Key bytes

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.KeyRep(KeyRep.Type type, String algorithm, String format, byte[] encoded)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct the alternate Key class.

 <p>

 @param type either one of Type.SECRET, Type.PUBLIC, or Type.PRIVATE
 @param algorithm the algorithm returned from
		<code>Key.getAlgorithm()</code>
 @param format the encoding format returned from
		<code>Key.getFormat()</code>
 @param encoded the encoded bytes returned from
		<code>Key.getEncoded()</code>

 @exception NullPointerException
		if type is <code>null</code>,
		if algorithm is <code>null</code>,
		if format is <code>null</code>,
		or if encoded is <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object java.security.KeyRep.readResolve() throws java.io.ObjectStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resolve the Key object.

 <p> This method supports three Type/format combinations:
 <ul>
 <li> Type.SECRET/"RAW" - returns a SecretKeySpec object
 constructed using encoded key bytes and algorithm
 <li> Type.PUBLIC/"X.509" - gets a KeyFactory instance for
 the key algorithm, constructs an X509EncodedKeySpec with the
 encoded key bytes, and generates a public key from the spec
 <li> Type.PRIVATE/"PKCS#8" - gets a KeyFactory instance for
 the key algorithm, constructs a PKCS8EncodedKeySpec with the
 encoded key bytes, and generates a private key from the spec
 </ul>

 <p>

 @return the resolved Key object

 @exception ObjectStreamException if the Type/format
	combination is unrecognized, if the algorithm, key format, or
	encoded key bytes are unrecognized/invalid, of if the
	resolution of the key fails for any reason

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object java.security.KeyRep.readResolve() throws java.io.ObjectStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resolve the Key object.

 <p> This method supports three Type/format combinations:
 <ul>
 <li> Type.SECRET/"RAW" - returns a SecretKeySpec object
 constructed using encoded key bytes and algorithm
 <li> Type.PUBLIC/"X.509" - gets a KeyFactory instance for
 the key algorithm, constructs an X509EncodedKeySpec with the
 encoded key bytes, and generates a public key from the spec
 <li> Type.PRIVATE/"PKCS#8" - gets a KeyFactory instance for
 the key algorithm, constructs a PKCS8EncodedKeySpec with the
 encoded key bytes, and generates a private key from the spec
 </ul>

 <p>

 @return the resolved Key object

 @exception ObjectStreamException if the Type/format
	combination is unrecognized, if the algorithm, key format, or
	encoded key bytes are unrecognized/invalid, of if the
	resolution of the key fails for any reason

<!-- END DATA -->
