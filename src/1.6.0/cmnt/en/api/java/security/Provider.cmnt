<!-- BEGIN KEY -->
public abstract class java.security.Provider extends java.util.Properties
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class represents a "provider" for the
 Java Security API, where a provider implements some or all parts of
 Java Security. Services that a provider may implement include:

 <ul>

 <li>Algorithms (such as DSA, RSA, MD5 or SHA-1).

 <li>Key generation, conversion, and management facilities (such as for
 algorithm-specific keys).

</ul>

 <p>Each provider has a name and a version number, and is configured
 in each runtime it is installed in.

 <p>See <a href =
 "../../../technotes/guides/security/crypto/CryptoSpec.html#Provider">The Provider Class</a>
 in the "Java Cryptography Architecture API Specification &amp; Reference"
 for information about how a particular type of provider, the
 cryptographic service provider, works and is installed. However,
 please note that a provider can be used to implement any security
 service in Java that uses a pluggable architecture with a choice
 of implementations that fit underneath. 

 <p>Some provider implementations may encounter unrecoverable internal
 errors during their operation, for example a failure to communicate with a 
 security token. A {@link ProviderException} should be used to indicate 
 such errors.

 <p>The service type <code>Provider</code> is reserved for use by the
 security framework. Services of this type cannot be added, removed,
 or modified by applications.
 The following attributes are automatically placed in each Provider object:
 <table cellspacing=4>
 <tr><th>Name</th><th>Value</th>
 <tr><td><code>Provider.id name</code></td>
    <td><code>String.valueOf(provider.getName())</code></td>
 <tr><td><code>Provider.id version</code></td>
     <td><code>String.valueOf(provider.getVersion())</code></td>
 <tr><td><code>Provider.id info</code></td>
       <td><code>String.valueOf(provider.getInfo())</code></td>
 <tr><td><code>Provider.id className</code></td>
     <td><code>provider.getClass().getName()</code></td>
 </table>

 @version 1.77, 08/07/06
 @author Benjamin Renaud
 @author Andreas Sterbenz

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.security.Provider.name
<!-- END KEY -->
<!-- BEGIN DATA -->
 The provider name.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.security.Provider.info
<!-- END KEY -->
<!-- BEGIN DATA -->
 A description of the provider and its services.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private double java.security.Provider.version
<!-- END KEY -->
<!-- BEGIN DATA -->
 The provider version number.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.Provider(String name, double version, String info)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a provider with the specified name, version number,
 and information.

 @param name the provider name.

 @param version the provider version number.

 @param info a description of the provider and its services.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.Provider.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of this provider.

 @return the name of this provider.

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.security.Provider.getVersion()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the version number for this provider.

 @return the version number for this provider.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.Provider.getInfo()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a human-readable description of the provider and its
 services.  This may return an HTML page, with relevant links.

 @return a description of the provider and its services.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.Provider.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string with the name and the version number
 of this provider.

 @return the string with the name and the version number
 for this provider.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.security.Provider.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Clears this provider so that it no longer contains the properties
 used to look up facilities implemented by the provider.
 
 <p>First, if there is a security manager, its 
 <code>checkSecurityAccess</code> method is called with the string 
 <code>"clearProviderProperties."+name</code> (where <code>name</code> 
 is the provider name) to see if it's ok to clear this provider.
 If the default implementation of <code>checkSecurityAccess</code> 
 is used (that is, that method is not overriden), then this results in
 a call to the security manager's <code>checkPermission</code> method 
 with a <code>SecurityPermission("clearProviderProperties."+name)</code>
 permission.

 @throws  SecurityException
          if a security manager exists and its <code>{@link
          java.lang.SecurityManager#checkSecurityAccess}</code> method 
          denies access to clear this provider

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.security.Provider.load(InputStream inStream) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads a property list (key and element pairs) from the input stream.

 @param inStream   the input stream.
 @exception  IOException  if an error occurred when reading from the
               input stream.
 @see java.util.Properties#load

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.security.Provider.putAll(java.util.Map<?, ?> t)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies all of the mappings from the specified Map to this provider.
 These mappings will replace any properties that this provider had 
 for any of the keys currently in the specified Map. 

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> java.security.Provider.entrySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an unmodifiable Set view of the property entries contained 
 in this Provider.

 @see   java.util.Map.Entry
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.lang.Object> java.security.Provider.keySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an unmodifiable Set view of the property keys contained in 
 this provider.

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Collection<java.lang.Object> java.security.Provider.values()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an unmodifiable Collection view of the property values 
 contained in this provider.

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Object java.security.Provider.put(Object key, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>key</code> property to have the specified
 <code>value</code>.
 
 <p>First, if there is a security manager, its 
 <code>checkSecurityAccess</code> method is called with the string 
 <code>"putProviderProperty."+name</code>, where <code>name</code> is the
 provider name, to see if it's ok to set this provider's property values. 
 If the default implementation of <code>checkSecurityAccess</code>
 is used (that is, that method is not overriden), then this results in
 a call to the security manager's <code>checkPermission</code> method 
 with a <code>SecurityPermission("putProviderProperty."+name)</code>
 permission.

 @param key the property key.

 @param value the property value.

 @return the previous value of the specified property
 (<code>key</code>), or null if it did not have one.

 @throws  SecurityException
          if a security manager exists and its <code>{@link
          java.lang.SecurityManager#checkSecurityAccess}</code> method 
          denies access to set property values.

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Object java.security.Provider.remove(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the <code>key</code> property (and its corresponding
 <code>value</code>).
 
 <p>First, if there is a security manager, its 
 <code>checkSecurityAccess</code> method is called with the string 
 <code>"removeProviderProperty."+name</code>, where <code>name</code> is
 the provider name, to see if it's ok to remove this provider's 
 properties. If the default implementation of 
 <code>checkSecurityAccess</code> is used (that is, that method is not 
 overriden), then this results in a call to the security manager's 
 <code>checkPermission</code> method with a
 <code>SecurityPermission("removeProviderProperty."+name)</code>
 permission.

 @param key the key for the property to be removed.

 @return the value to which the key had been mapped,
 or null if the key did not have a mapping.

 @throws  SecurityException
          if a security manager exists and its <code>{@link
          java.lang.SecurityManager#checkSecurityAccess}</code> method 
          denies access to remove this provider's properties.

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.security.Provider.Service java.security.Provider.getService(String type, String algorithm)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the service describing this Provider's implementation of the
 specified type of this algorithm or alias. If no such
 implementation exists, this method returns null. If there are two
 matching services, one added to this provider using 
 {@link #putService putService()} and one added via {@link #put put()},
 the service added via {@link #putService putService()} is returned.

 @param type the type of {@link Service service} requested
 (for example, <code>MessageDigest</code>)
 @param algorithm the case insensitive algorithm name (or alternate 
 alias) of the service requested (for example, <code>SHA-1</code>)

 @return the service describing this Provider's matching service
 or null if no such service exists

 @throws NullPointerException if type or algorithm is null

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.util.Set<java.security.Provider.Service> java.security.Provider.getServices()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get an unmodifiable Set of all services supported by
 this Provider.

 @return an unmodifiable Set of all services supported by
 this Provider

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.security.Provider.putService(Provider.Service s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Add a service. If a service of the same type with the same algorithm
 name exists and it was added using {@link #putService putService()}, 
 it is replaced by the new service. 
 This method also places information about this service
 in the provider's Hashtable values in the format described in the
 <a href="../../../technotes/guides/security/crypto/CryptoSpec.html">
 Java Cryptography Architecture API Specification &amp; Reference </a>.

 <p>Also, if there is a security manager, its 
 <code>checkSecurityAccess</code> method is called with the string 
 <code>"putProviderProperty."+name</code>, where <code>name</code> is 
 the provider name, to see if it's ok to set this provider's property 
 values. If the default implementation of <code>checkSecurityAccess</code>
 is used (that is, that method is not overriden), then this results in
 a call to the security manager's <code>checkPermission</code> method with
 a <code>SecurityPermission("putProviderProperty."+name)</code>
 permission.

 @param s the Service to add

 @throws SecurityException
      if a security manager exists and its <code>{@link
      java.lang.SecurityManager#checkSecurityAccess}</code> method denies
      access to set property values.
 @throws NullPointerException if s is null

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.security.Provider.removeService(Provider.Service s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Remove a service previously added using 
 {@link #putService putService()}. The specified service is removed from
 this provider. It will no longer be returned by 
 {@link #getService getService()} and its information will be removed 
 from this provider's Hashtable.

 <p>Also, if there is a security manager, its 
 <code>checkSecurityAccess</code> method is called with the string 
 <code>"removeProviderProperty."+name</code>, where <code>name</code> is 
 the provider name, to see if it's ok to remove this provider's 
 properties. If the default implementation of 
 <code>checkSecurityAccess</code> is used (that is, that method is not 
 overriden), then this results in a call to the security manager's 
 <code>checkPermission</code> method with a
 <code>SecurityPermission("removeProviderProperty."+name)</code>
 permission.

 @param s the Service to be removed

 @throws  SecurityException
          if a security manager exists and its <code>{@link
          java.lang.SecurityManager#checkSecurityAccess}</code> method denies
          access to remove this provider's properties.
 @throws NullPointerException if s is null

 @since 1.5

<!-- END DATA -->
