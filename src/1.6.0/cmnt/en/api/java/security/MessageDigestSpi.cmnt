<!-- BEGIN KEY -->
public abstract class java.security.MessageDigestSpi extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)
 for the <code>MessageDigest</code> class, which provides the functionality
 of a message digest algorithm, such as MD5 or SHA. Message digests are
 secure one-way hash functions that take arbitrary-sized data and output a
 fixed-length hash value.

 <p> All the abstract methods in this class must be implemented by a
 cryptographic service provider who wishes to supply the implementation
 of a particular message digest algorithm.

 <p> Implementations are free to implement the Cloneable interface.

 @author Benjamin Renaud 

 @version 1.17, 03/10/06

 @see MessageDigest

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.security.MessageDigestSpi.engineGetDigestLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the digest length in bytes.

 <p>This concrete method has been added to this previously-defined
 abstract class. (For backwards compatibility, it cannot be abstract.)
 
 <p>The default behavior is to return 0.
 
 <p>This method may be overridden by a provider to return the digest
 length.

 @return the digest length in bytes.

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.security.MessageDigestSpi.engineUpdate(byte input)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Updates the digest using the specified byte.

 @param input the byte to use for the update.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.security.MessageDigestSpi.engineUpdate(byte[] input, int offset, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Updates the digest using the specified array of bytes,    
 starting at the specified offset.

 @param input the array of bytes to use for the update.

 @param offset the offset to start from in the array of bytes.

 @param len the number of bytes to use, starting at 
 <code>offset</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.security.MessageDigestSpi.engineUpdate(ByteBuffer input)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Update the digest using the specified ByteBuffer. The digest is
 updated using the <code>input.remaining()</code> bytes starting
 at <code>input.position()</code>.
 Upon return, the buffer's position will be equal to its limit;
 its limit will not have changed.

 @param input the ByteBuffer
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract byte[] java.security.MessageDigestSpi.engineDigest()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Completes the hash computation by performing final
 operations such as padding. Once <code>engineDigest</code> has 
 been called, the engine should be reset (see 
 {@link #engineReset() engineReset}).  
 Resetting is the responsibility of the
 engine implementor.

 @return the array of bytes for the resulting hash value.  

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.security.MessageDigestSpi.engineDigest(byte[] buf, int offset, int len) throws java.security.DigestException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Completes the hash computation by performing final
 operations such as padding. Once <code>engineDigest</code> has
 been called, the engine should be reset (see 
 {@link #engineReset() engineReset}).  
 Resetting is the responsibility of the
 engine implementor.

 This method should be abstract, but we leave it concrete for
 binary compatibility.  Knowledgeable providers should override this
 method.

 @param buf the output buffer in which to store the digest

 @param offset offset to start from in the output buffer

 @param len number of bytes within buf allotted for the digest.
 Both this default implementation and the SUN provider do not
 return partial digests.  The presence of this parameter is solely
 for consistency in our API's.  If the value of this parameter is less
 than the actual digest length, the method will throw a DigestException.
 This parameter is ignored if its value is greater than or equal to
 the actual digest length.

 @return the length of the digest stored in the output buffer.
 
 @exception DigestException if an error occurs.

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.security.MessageDigestSpi.engineReset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets the digest for further use.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.security.MessageDigestSpi.clone() throws java.lang.CloneNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns a clone if the implementation is cloneable.    
 
 @return a clone if the implementation is cloneable.

 @exception CloneNotSupportedException if this is called on an
 implementation that does not support <code>Cloneable</code>.

<!-- END DATA -->
