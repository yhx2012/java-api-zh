<!-- BEGIN KEY -->
public class java.security.KeyStore extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class represents a storage facility for cryptographic
 keys and certificates.

 <p> A <code>KeyStore</code> manages different types of entries.
 Each type of entry implements the <code>KeyStore.Entry</code> interface.
 Three basic <code>KeyStore.Entry</code> implementations are provided:

 <ul>
 <li><b>KeyStore.PrivateKeyEntry</b>
 <p> This type of entry holds a cryptographic <code>PrivateKey</code>,
 which is optionally stored in a protected format to prevent
 unauthorized access.  It is also accompanied by a certificate chain
 for the corresponding public key.

 <p> Private keys and certificate chains are used by a given entity for
 self-authentication. Applications for this authentication include software
 distribution organizations which sign JAR files as part of releasing
 and/or licensing software.

 <li><b>KeyStore.SecretKeyEntry</b>
 <p> This type of entry holds a cryptographic <code>SecretKey</code>,
 which is optionally stored in a protected format to prevent
 unauthorized access.

 <li><b>KeyStore.TrustedCertificateEntry</b>
 <p> This type of entry contains a single public key <code>Certificate</code>
 belonging to another party. It is called a <i>trusted certificate</i>
 because the keystore owner trusts that the public key in the certificate
 indeed belongs to the identity identified by the <i>subject</i> (owner)
 of the certificate.

 <p>This type of entry can be used to authenticate other parties.
 </ul>

 <p> Each entry in a keystore is identified by an "alias" string. In the
 case of private keys and their associated certificate chains, these strings
 distinguish among the different ways in which the entity may authenticate
 itself. For example, the entity may authenticate itself using different
 certificate authorities, or using different public key algorithms.

 <p> Whether aliases are case sensitive is implementation dependent. In order
 to avoid problems, it is recommended not to use aliases in a KeyStore that
 only differ in case.

 <p> Whether keystores are persistent, and the mechanisms used by the
 keystore if it is persistent, are not specified here. This allows
 use of a variety of techniques for protecting sensitive (e.g., private or
 secret) keys. Smart cards or other integrated cryptographic engines
 (SafeKeyper) are one option, and simpler mechanisms such as files may also
 be used (in a variety of formats).

 <p> Typical ways to request a KeyStore object include
 relying on the default type and providing a specific keystore type.

 <ul>
 <li>To rely on the default type:
 <pre>
    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
 </pre>
 The system will return a keystore implementation for the default type.
 <p>

 <li>To provide a specific keystore type:
 <pre>
      KeyStore ks = KeyStore.getInstance("JKS");
 </pre>
 The system will return the most preferred implementation of the
 specified keystore type available in the environment. <p>
 </ul>

 <p> Before a keystore can be accessed, it must be
 {@link #load(java.io.InputStream, char[]) loaded}.
 <pre>
    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());

    // get user password and file input stream
    char[] password = getPassword();

    java.io.FileInputStream fis = null;
    try {
        fis = new java.io.FileInputStream("keyStoreName");
        ks.load(fis, password);
    } finally {
        if (fis != null) {
            fis.close();
        }
    }
 </pre>

 To create an empty keystore using the above <code>load</code> method,
 pass <code>null</code> as the <code>InputStream</code> argument.

 <p> Once the keystore has been loaded, it is possible
 to read existing entries from the keystore, or to write new entries
 into the keystore:
 <pre>
    // get my private key
    KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry)
        ks.getEntry("privateKeyAlias", password);
    PrivateKey myPrivateKey = pkEntry.getPrivateKey();

    // save my secret key
    javax.crypto.SecretKey mySecretKey;
    KeyStore.SecretKeyEntry skEntry =
        new KeyStore.SecretKeyEntry(mySecretKey);
    ks.setEntry("secretKeyAlias", skEntry, 
        new KeyStore.PasswordProtection(password));

    // store away the keystore
    java.io.FileOutputStream fos = null;
    try {
        fos = new java.io.FileOutputStream("newKeyStoreName");
        ks.store(fos, password);
    } finally {
        if (fos != null) {
            fos.close();
        }
    }
 </pre>

 Note that although the same password may be used to
 load the keystore, to protect the private key entry,
 to protect the secret key entry, and to store the keystore
 (as is shown in the sample code above),
 different passwords or other protection parameters
 may also be used.

 @author Jan Luehe

 @version 1.53, 07/28/06

 @see java.security.PrivateKey
 @see javax.crypto.SecretKey
 @see java.security.cert.Certificate

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.KeyStore(KeyStoreSpi keyStoreSpi, Provider provider, String type)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a KeyStore object of the given type, and encapsulates the given
 provider implementation (SPI object) in it.

 @param keyStoreSpi the provider implementation.
 @param provider the provider.
 @param type the keystore type.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.KeyStore java.security.KeyStore.getInstance(String type) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a keystore object of the specified type.
 
 <p> This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new KeyStore object encapsulating the
 KeyStoreSpi implementation from the first
 Provider that supports the specified type is returned.

 <p> Note that the list of registered providers may be retrieved via
 the {@link Security#getProviders() Security.getProviders()} method.

 @param type the type of keystore. 
 See Appendix A in the <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a> 
 for information about standard keystore types.

 @return a keystore object of the specified type.

 @exception KeyStoreException if no Provider supports a
          KeyStoreSpi implementation for the
          specified type.

 @see Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.KeyStore java.security.KeyStore.getInstance(String type, String provider) throws java.security.KeyStoreException, java.security.NoSuchProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a keystore object of the specified type.
 
 <p> A new KeyStore object encapsulating the
 KeyStoreSpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

 <p> Note that the list of registered providers may be retrieved via
 the {@link Security#getProviders() Security.getProviders()} method.

 @param type the type of keystore.
 See Appendix A in the <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a> 
 for information about standard keystore types.

 @param provider the name of the provider.

 @return a keystore object of the specified type.

 @exception KeyStoreException if a KeyStoreSpi
          implementation for the specified type is not
          available from the specified provider.
 
 @exception NoSuchProviderException if the specified provider is not
          registered in the security provider list.

 @exception IllegalArgumentException if the provider name is null
		or empty.

 @see Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.KeyStore java.security.KeyStore.getInstance(String type, Provider provider) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a keystore object of the specified type.
 
 <p> A new KeyStore object encapsulating the
 KeyStoreSpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

 @param type the type of keystore.
 See Appendix A in the <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a> 
 for information about standard keystore types.

 @param provider the provider.

 @return a keystore object of the specified type.

 @exception KeyStoreException if KeyStoreSpi
          implementation for the specified type is not available
          from the specified Provider object.

 @exception IllegalArgumentException if the specified provider is null.

 @see Provider

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.security.KeyStore.getDefaultType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the default keystore type as specified in the Java security
 properties file, or the string
 &quot;jks&quot; (acronym for &quot;Java keystore&quot;)
 if no such property exists.
 The Java security properties file is located in the file named
 &lt;JAVA_HOME&gt;/lib/security/java.security.
 &lt;JAVA_HOME&gt; refers to the value of the java.home system property,
 and specifies the directory where the JRE is installed.

 <p>The default keystore type can be used by applications that do not
 want to use a hard-coded keystore type when calling one of the
 <code>getInstance</code> methods, and want to provide a default keystore
 type in case a user does not specify its own.

 <p>The default keystore type can be changed by setting the value of the
 "keystore.type" security property (in the Java security properties
 file) to the desired keystore type.

 @return the default keystore type as specified in the 
 Java security properties file, or the string &quot;jks&quot;
 if no such property exists.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider java.security.KeyStore.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the provider of this keystore.
 
 @return the provider of this keystore.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.security.KeyStore.getType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the type of this keystore.

 @return the type of this keystore.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Key java.security.KeyStore.getKey(String alias, char[] password) throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the key associated with the given alias, using the given
 password to recover it.  The key must have been associated with
 the alias by a call to <code>setKeyEntry</code>,
 or by a call to <code>setEntry</code> with a
 <code>PrivateKeyEntry</code> or <code>SecretKeyEntry</code>.

 @param alias the alias name
 @param password the password for recovering the key

 @return the requested key, or null if the given alias does not exist
 or does not identify a key-related entry.

 @exception KeyStoreException if the keystore has not been initialized
 (loaded).
 @exception NoSuchAlgorithmException if the algorithm for recovering the
 key cannot be found
 @exception UnrecoverableKeyException if the key cannot be recovered
 (e.g., the given password is wrong).

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.cert.Certificate[] java.security.KeyStore.getCertificateChain(String alias) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the certificate chain associated with the given alias.
 The certificate chain must have been associated with the alias
 by a call to <code>setKeyEntry</code>,
 or by a call to <code>setEntry</code> with a
 <code>PrivateKeyEntry</code>.

 @param alias the alias name

 @return the certificate chain (ordered with the user's certificate first
 and the root certificate authority last), or null if the given alias
 does not exist or does not contain a certificate chain

 @exception KeyStoreException if the keystore has not been initialized
 (loaded).

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.cert.Certificate java.security.KeyStore.getCertificate(String alias) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the certificate associated with the given alias.

 <p> If the given alias name identifies an entry
 created by a call to <code>setCertificateEntry</code>,
 or created by a call to <code>setEntry</code> with a
 <code>TrustedCertificateEntry</code>,
 then the trusted certificate contained in that entry is returned.

 <p> If the given alias name identifies an entry
 created by a call to <code>setKeyEntry</code>,
 or created by a call to <code>setEntry</code> with a
 <code>PrivateKeyEntry</code>,
 then the first element of the certificate chain in that entry
 is returned.
 
 @param alias the alias name

 @return the certificate, or null if the given alias does not exist or
 does not contain a certificate.

 @exception KeyStoreException if the keystore has not been initialized
 (loaded).

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.util.Date java.security.KeyStore.getCreationDate(String alias) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the creation date of the entry identified by the given alias.

 @param alias the alias name

 @return the creation date of this entry, or null if the given alias does
 not exist

 @exception KeyStoreException if the keystore has not been initialized
 (loaded).

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.KeyStore.setKeyEntry(String alias, Key key, char[] password, java.security.cert.Certificate[] chain) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the given key to the given alias, protecting it with the given
 password.

 <p>If the given key is of type <code>java.security.PrivateKey</code>,
 it must be accompanied by a certificate chain certifying the
 corresponding public key.

 <p>If the given alias already exists, the keystore information
 associated with it is overridden by the given key (and possibly
 certificate chain).

 @param alias the alias name
 @param key the key to be associated with the alias
 @param password the password to protect the key
 @param chain the certificate chain for the corresponding public
 key (only required if the given key is of type
 <code>java.security.PrivateKey</code>).

 @exception KeyStoreException if the keystore has not been initialized
 (loaded), the given key cannot be protected, or this operation fails
 for some other reason

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.KeyStore.setKeyEntry(String alias, byte[] key, java.security.cert.Certificate[] chain) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the given key (that has already been protected) to the given
 alias.
 
 <p>If the protected key is of type
 <code>java.security.PrivateKey</code>, it must be accompanied by a
 certificate chain certifying the corresponding public key. If the
 underlying keystore implementation is of type <code>jks</code>,
 <code>key</code> must be encoded as an
 <code>EncryptedPrivateKeyInfo</code> as defined in the PKCS #8 standard.

 <p>If the given alias already exists, the keystore information
 associated with it is overridden by the given key (and possibly
 certificate chain).

 @param alias the alias name
 @param key the key (in protected format) to be associated with the alias
 @param chain the certificate chain for the corresponding public
		key (only useful if the protected key is of type
		<code>java.security.PrivateKey</code>).

 @exception KeyStoreException if the keystore has not been initialized
 (loaded), or if this operation fails for some other reason.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.KeyStore.setCertificateEntry(String alias, Certificate cert) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the given trusted certificate to the given alias.

 <p> If the given alias identifies an existing entry
 created by a call to <code>setCertificateEntry</code>,
 or created by a call to <code>setEntry</code> with a
 <code>TrustedCertificateEntry</code>,
 the trusted certificate in the existing entry
 is overridden by the given certificate.

 @param alias the alias name
 @param cert the certificate

 @exception KeyStoreException if the keystore has not been initialized,
 or the given alias already exists and does not identify an
 entry containing a trusted certificate,
 or this operation fails for some other reason.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.KeyStore.deleteEntry(String alias) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Deletes the entry identified by the given alias from this keystore.

 @param alias the alias name

 @exception KeyStoreException if the keystore has not been initialized,
 or if the entry cannot be removed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.util.Enumeration<java.lang.String> java.security.KeyStore.aliases() throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Lists all the alias names of this keystore.

 @return enumeration of the alias names

 @exception KeyStoreException if the keystore has not been initialized
 (loaded).

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.security.KeyStore.containsAlias(String alias) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks if the given alias exists in this keystore.

 @param alias the alias name

 @return true if the alias exists, false otherwise

 @exception KeyStoreException if the keystore has not been initialized
 (loaded).

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.security.KeyStore.size() throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the number of entries in this keystore.

 @return the number of entries in this keystore

 @exception KeyStoreException if the keystore has not been initialized
 (loaded).

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.security.KeyStore.isKeyEntry(String alias) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the entry identified by the given alias
 was created by a call to <code>setKeyEntry</code>,
 or created by a call to <code>setEntry</code> with a
 <code>PrivateKeyEntry</code> or a <code>SecretKeyEntry</code>.

 @param alias the alias for the keystore entry to be checked

 @return true if the entry identified by the given alias is a
 key-related entry, false otherwise.

 @exception KeyStoreException if the keystore has not been initialized
 (loaded).

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.security.KeyStore.isCertificateEntry(String alias) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the entry identified by the given alias
 was created by a call to <code>setCertificateEntry</code>,
 or created by a call to <code>setEntry</code> with a
 <code>TrustedCertificateEntry</code>.

 @param alias the alias for the keystore entry to be checked

 @return true if the entry identified by the given alias contains a
 trusted certificate, false otherwise.

 @exception KeyStoreException if the keystore has not been initialized
 (loaded).

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.security.KeyStore.getCertificateAlias(Certificate cert) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the (alias) name of the first keystore entry whose certificate
 matches the given certificate.

 <p> This method attempts to match the given certificate with each
 keystore entry. If the entry being considered was
 created by a call to <code>setCertificateEntry</code>,
 or created by a call to <code>setEntry</code> with a
 <code>TrustedCertificateEntry</code>,
 then the given certificate is compared to that entry's certificate.

 <p> If the entry being considered was
 created by a call to <code>setKeyEntry</code>,
 or created by a call to <code>setEntry</code> with a
 <code>PrivateKeyEntry</code>,
 then the given certificate is compared to the first
 element of that entry's certificate chain.

 @param cert the certificate to match with.

 @return the alias name of the first entry with a matching certificate,
 or null if no such entry exists in this keystore.

 @exception KeyStoreException if the keystore has not been initialized
 (loaded).

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.KeyStore.store(OutputStream stream, char[] password) throws java.security.KeyStoreException, java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Stores this keystore to the given output stream, and protects its
 integrity with the given password.

 @param stream the output stream to which this keystore is written.
 @param password the password to generate the keystore integrity check

 @exception KeyStoreException if the keystore has not been initialized
 (loaded).
 @exception IOException if there was an I/O problem with data
 @exception NoSuchAlgorithmException if the appropriate data integrity
 algorithm could not be found
 @exception CertificateException if any of the certificates included in
 the keystore data could not be stored

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.KeyStore.store(KeyStore.LoadStoreParameter param) throws java.security.KeyStoreException, java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Stores this keystore using the given <code>LoadStoreParameter</code>.

 @param param the <code>LoadStoreParameter</code>
		that specifies how to store the keystore,
		which may be <code>null</code>

 @exception IllegalArgumentException if the given
		<code>LoadStoreParameter</code>
		input is not recognized
 @exception KeyStoreException if the keystore has not been initialized
		(loaded)
 @exception IOException if there was an I/O problem with data
 @exception NoSuchAlgorithmException if the appropriate data integrity
		algorithm could not be found
 @exception CertificateException if any of the certificates included in
		the keystore data could not be stored

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.KeyStore.load(InputStream stream, char[] password) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Loads this KeyStore from the given input stream.

 <p>A password may be given to unlock the keystore
 (e.g. the keystore resides on a hardware token device),
 or to check the integrity of the keystore data.
 If a password is not given for integrity checking,
 then integrity checking is not performed.

 <p>In order to create an empty keystore, or if the keystore cannot
 be initialized from a stream, pass <code>null</code>
 as the <code>stream</code> argument.

 <p> Note that if this keystore has already been loaded, it is
 reinitialized and loaded again from the given input stream.

 @param stream the input stream from which the keystore is loaded,
 or <code>null</code>
 @param password the password used to check the integrity of
 the keystore, the password used to unlock the keystore,
 or <code>null</code>

 @exception IOException if there is an I/O or format problem with the
 keystore data, if a password is required but not given,
 or if the given password was incorrect. If the error is due to a
 wrong password, the {@link Throwable#getCause cause} of the 
 <code>IOException</code> should be an 
 <code>UnrecoverableKeyException</code>
 @exception NoSuchAlgorithmException if the algorithm used to check
 the integrity of the keystore cannot be found
 @exception CertificateException if any of the certificates in the
 keystore could not be loaded

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.KeyStore.load(KeyStore.LoadStoreParameter param) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Loads this keystore using the given <code>LoadStoreParameter</code>.

 <p> Note that if this KeyStore has already been loaded, it is
 reinitialized and loaded again from the given parameter.

 @param param the <code>LoadStoreParameter</code>
		that specifies how to load the keystore,
		which may be <code>null</code>

 @exception IllegalArgumentException if the given
		<code>LoadStoreParameter</code>
		input is not recognized
 @exception IOException if there is an I/O or format problem with the
		keystore data. If the error is due to an incorrect 
         <code>ProtectionParameter</code> (e.g. wrong password)
         the {@link Throwable#getCause cause} of the 
         <code>IOException</code> should be an 
         <code>UnrecoverableKeyException</code>
 @exception NoSuchAlgorithmException if the algorithm used to check
		the integrity of the keystore cannot be found
 @exception CertificateException if any of the certificates in the
		keystore could not be loaded

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.KeyStore.Entry java.security.KeyStore.getEntry(String alias, KeyStore.ProtectionParameter protParam) throws java.security.NoSuchAlgorithmException, java.security.UnrecoverableEntryException, java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a keystore <code>Entry</code> for the specified alias
 with the specified protection parameter.

 @param alias get the keystore <code>Entry</code> for this alias
 @param protParam the <code>ProtectionParameter</code>
		used to protect the <code>Entry</code>,
		which may be <code>null</code>

 @return the keystore <code>Entry</code> for the specified alias,
		or <code>null</code> if there is no such entry

 @exception NullPointerException if
		<code>alias</code> is <code>null</code>
 @exception NoSuchAlgorithmException if the algorithm for recovering the
		entry cannot be found
 @exception UnrecoverableEntryException if the specified
		<code>protParam</code> were insufficient or invalid
 @exception UnrecoverableKeyException if the entry is a 
          <code>PrivateKeyEntry</code> or <code>SecretKeyEntry</code>
          and the specified <code>protParam</code> does not contain
          the information needed to recover the key (e.g. wrong password)
 @exception KeyStoreException if the keystore has not been initialized
		(loaded).
 @see #setEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter)

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.security.KeyStore.setEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Saves a keystore <code>Entry</code> under the specified alias.
 The protection parameter is used to protect the
 <code>Entry</code>.

 <p> If an entry already exists for the specified alias,
 it is overridden.

 @param alias save the keystore <code>Entry</code> under this alias
 @param entry the <code>Entry</code> to save
 @param protParam the <code>ProtectionParameter</code>
		used to protect the <code>Entry</code>,
		which may be <code>null</code>

 @exception NullPointerException if
		<code>alias</code> or <code>entry</code>
		is <code>null</code>
 @exception KeyStoreException if the keystore has not been initialized
		(loaded), or if this operation fails for some other reason

 @see #getEntry(String, KeyStore.ProtectionParameter)

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.security.KeyStore.entryInstanceOf(String alias, java.lang.Class<? extends java.security.KeyStore.Entry> entryClass) throws java.security.KeyStoreException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines if the keystore <code>Entry</code> for the specified
 <code>alias</code> is an instance or subclass of the specified
 <code>entryClass</code>.

 @param alias the alias name
 @param entryClass the entry class 

 @return true if the keystore <code>Entry</code> for the specified
		<code>alias</code> is an instance or subclass of the
		specified <code>entryClass</code>, false otherwise

 @exception NullPointerException if
		<code>alias</code> or <code>entryClass</code>
		is <code>null</code>
 @exception KeyStoreException if the keystore has not been
		initialized (loaded)

 @since 1.5

<!-- END DATA -->
