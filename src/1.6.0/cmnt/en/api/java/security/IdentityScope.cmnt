<!-- BEGIN KEY -->
public abstract class java.security.IdentityScope extends java.security.Identity
<!-- END KEY -->
<!-- BEGIN DATA -->

 <p>This class represents a scope for identities. It is an Identity 
 itself, and therefore has a name and can have a scope. It can also 
 optionally have a public key and associated certificates.

 <p>An IdentityScope can contain Identity objects of all kinds, including
 Signers. All types of Identity objects can be retrieved, added, and 
 removed using the same methods. Note that it is possible, and in fact
 expected, that different types of identity scopes will
 apply different policies for their various operations on the
 various types of Identities.

 <p>There is a one-to-one mapping between keys and identities, and 
 there can only be one copy of one key per scope. For example, suppose
 <b>Acme Software, Inc</b> is a software publisher known to a user.
 Suppose it is an Identity, that is, it has a public key, and a set of
 associated certificates. It is named in the scope using the name 
 "Acme Software". No other named Identity in the scope has the same 
 public  key. Of course, none has the same name as well.

 @see Identity
 @see Signer
 @see Principal
 @see Key

 @version 1.55 05/11/17
 @author Benjamin Renaud

 @deprecated This class is no longer used. Its functionality has been
 replaced by <code>java.security.KeyStore</code>, the
 <code>java.security.cert</code> package, and
 <code>java.security.Principal</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.IdentityScope()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This constructor is used for serialization only and should not
 be used by subclasses.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.IdentityScope(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new identity scope with the specified name.

 @param name the scope name.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.IdentityScope(String name, IdentityScope scope) throws java.security.KeyManagementException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new identity scope with the specified name and scope.
 
 @param name the scope name.
 @param scope the scope for the new identity scope.
 
 @exception KeyManagementException if there is already an identity 
 with the same name in the scope.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.IdentityScope java.security.IdentityScope.getSystemScope()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the system's identity scope.
 
 @return the system's identity scope.
 
 @see #setSystemScope

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static void java.security.IdentityScope.setSystemScope(IdentityScope scope)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the system's identity scope.

 <p>First, if there is a security manager, its 
 <code>checkSecurityAccess</code> 
 method is called with <code>"setSystemScope"</code> 
 as its argument to see if it's ok to set the identity scope. 
 
 @param scope the scope to set.
 
 @exception  SecurityException  if a security manager exists and its  
 <code>checkSecurityAccess</code> method doesn't allow 
 setting the identity scope.
 
 @see #getSystemScope
 @see SecurityManager#checkSecurityAccess

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.security.IdentityScope.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of identities within this identity scope.
 
 @return the number of identities within this identity scope.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.Identity java.security.IdentityScope.getIdentity(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the identity in this scope with the specified name (if any).
 
 @param name the name of the identity to be retrieved.
 
 @return the identity named <code>name</code>, or null if there are
 no identities named <code>name</code> in this scope.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.Identity java.security.IdentityScope.getIdentity(Principal principal)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the identity whose name is the same as that of the 
 specified principal. (Note: Identity implements Principal.)

 @param principal the principal corresponding to the identity
 to be retrieved.
 
 @return the identity whose name is the same as that of the 
 principal, or null if there are no identities of the same name 
 in this scope.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.Identity java.security.IdentityScope.getIdentity(PublicKey key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the identity with the specified public key.

 @param key the public key for the identity to be returned.

 @return the identity with the given key, or null if there are
 no identities in this scope with that key.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.security.IdentityScope.addIdentity(Identity identity) throws java.security.KeyManagementException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds an identity to this identity scope.

 @param identity the identity to be added.

 @exception KeyManagementException if the identity is not
 valid, a name conflict occurs, another identity has the same
 public key as the identity being added, or another exception
 occurs. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.security.IdentityScope.removeIdentity(Identity identity) throws java.security.KeyManagementException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes an identity from this identity scope.

 @param identity the identity to be removed.

 @exception KeyManagementException if the identity is missing,
 or another exception occurs.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Enumeration<java.security.Identity> java.security.IdentityScope.identities()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an enumeration of all identities in this identity scope.
 
 @return an enumeration of all identities in this identity scope.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.IdentityScope.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this identity scope, including
 its name, its scope name, and the number of identities in this
 identity scope.

 @return a string representation of this identity scope.

<!-- END DATA -->
