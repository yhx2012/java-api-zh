<!-- BEGIN KEY -->
public class java.security.SecureRandom extends java.util.Random
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class provides a cryptographically strong random number
 generator (RNG).

 <p>A cryptographically strong random number
 minimally complies with the statistical random number generator tests
 specified in <a href="http://csrc.nist.gov/cryptval/140-2.htm">
 <i>FIPS 140-2, Security Requirements for Cryptographic Modules</i></a>,
 section 4.9.1.
 Additionally, SecureRandom must produce non-deterministic output.
 Therefore any seed material passed to a SecureRandom object must be
 unpredictable, and all SecureRandom output sequences must be
 cryptographically strong, as described in
 <a href="http://www.ietf.org/rfc/rfc1750.txt">
 <i>RFC 1750: Randomness Recommendations for Security</i></a>.
 
 <p>A caller obtains a SecureRandom instance via the
 no-argument constructor or one of the <code>getInstance</code> methods:

 <pre>
      SecureRandom random = new SecureRandom();
 </pre>

 <p> Many SecureRandom implementations are in the form of a pseudo-random
 number generator (PRNG), which means they use a deterministic algorithm
 to produce a pseudo-random sequence from a true random seed.
 Other implementations may produce true random numbers,
 and yet others may use a combination of both techniques.

 <p> Typical callers of SecureRandom invoke the following methods
 to retrieve random bytes:

 <pre>
      SecureRandom random = new SecureRandom();
      byte bytes[] = new byte[20];
      random.nextBytes(bytes);
 </pre>

 <p> Callers may also invoke the <code>generateSeed</code> method
 to generate a given number of seed bytes (to seed other random number
 generators, for example):
 <pre>
      byte seed[] = random.generateSeed(20);
 </pre>

 @see java.security.SecureRandomSpi
 @see java.util.Random
 
 @version 1.54, 04/21/06
 @author Benjamin Renaud
 @author Josh Bloch 

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.security.Provider java.security.SecureRandom.provider
<!-- END KEY -->
<!-- BEGIN DATA -->
 The provider.

 @serial
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.security.SecureRandomSpi java.security.SecureRandom.secureRandomSpi
<!-- END KEY -->
<!-- BEGIN DATA -->
 The provider implementation.

 @serial
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private byte[] java.security.SecureRandom.state
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.security.MessageDigest java.security.SecureRandom.digest
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private byte[] java.security.SecureRandom.randomBytes
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial

 We know that the MessageDigest class does not implement
 java.io.Serializable.  However, since this field is no longer
 used, it will always be NULL and won't affect the serialization
 of the SecureRandom class itself.

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.security.SecureRandom.randomBytesUsed
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private long java.security.SecureRandom.counter
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.SecureRandom()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a secure random number generator (RNG) implementing the
 default random number algorithm.

 <p> This constructor traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new SecureRandom object encapsulating the
 SecureRandomSpi implementation from the first
 Provider that supports a SecureRandom (RNG) algorithm is returned.
 If none of the Providers support a RNG algorithm,
 then an implementation-specific default is returned.

 <p> Note that the list of registered providers may be retrieved via
 the {@link Security#getProviders() Security.getProviders()} method.

 <p> See Appendix A in the <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a> 
 for information about standard RNG algorithm names.

 <p> The returned SecureRandom object has not been seeded.  To seed the
 returned object, call the <code>setSeed</code> method.
 If <code>setSeed</code> is not called, the first call to
 <code>nextBytes</code> will force the SecureRandom object to seed itself.
 This self-seeding will not occur if <code>setSeed</code> was
 previously called.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.SecureRandom(byte[] seed)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a secure random number generator (RNG) implementing the
 default random number algorithm.
 The SecureRandom instance is seeded with the specified seed bytes.

 <p> This constructor traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new SecureRandom object encapsulating the
 SecureRandomSpi implementation from the first
 Provider that supports a SecureRandom (RNG) algorithm is returned.
 If none of the Providers support a RNG algorithm,
 then an implementation-specific default is returned.

 <p> Note that the list of registered providers may be retrieved via
 the {@link Security#getProviders() Security.getProviders()} method.

 <p> See Appendix A in the <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a> 
 for information about standard RNG algorithm names.

 @param seed the seed.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.SecureRandom(SecureRandomSpi secureRandomSpi, Provider provider)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a SecureRandom object.

 @param secureRandomSpi the SecureRandom implementation.
 @param provider the provider.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.SecureRandom java.security.SecureRandom.getInstance(String algorithm) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a SecureRandom object that implements the specified
 Random Number Generator (RNG) algorithm. 

 <p> This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new SecureRandom object encapsulating the
 SecureRandomSpi implementation from the first
 Provider that supports the specified algorithm is returned.

 <p> Note that the list of registered providers may be retrieved via
 the {@link Security#getProviders() Security.getProviders()} method.

 <p> The returned SecureRandom object has not been seeded.  To seed the
 returned object, call the <code>setSeed</code> method.
 If <code>setSeed</code> is not called, the first call to
 <code>nextBytes</code> will force the SecureRandom object to seed itself.
 This self-seeding will not occur if <code>setSeed</code> was
 previously called.

 @param algorithm the name of the RNG algorithm.
 See Appendix A in the <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a> 
 for information about standard RNG algorithm names.

 @return the new SecureRandom object.

 @exception NoSuchAlgorithmException if no Provider supports a
		SecureRandomSpi implementation for the
		specified algorithm.

 @see Provider

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.SecureRandom java.security.SecureRandom.getInstance(String algorithm, String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a SecureRandom object that implements the specified
 Random Number Generator (RNG) algorithm. 

 <p> A new SecureRandom object encapsulating the
 SecureRandomSpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

 <p> Note that the list of registered providers may be retrieved via
 the {@link Security#getProviders() Security.getProviders()} method.

 <p> The returned SecureRandom object has not been seeded.  To seed the
 returned object, call the <code>setSeed</code> method.
 If <code>setSeed</code> is not called, the first call to
 <code>nextBytes</code> will force the SecureRandom object to seed itself.
 This self-seeding will not occur if <code>setSeed</code> was
 previously called.

 @param algorithm the name of the RNG algorithm.
 See Appendix A in the <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a> 
 for information about standard RNG algorithm names.

 @param provider the name of the provider.

 @return the new SecureRandom object.

 @exception NoSuchAlgorithmException if a SecureRandomSpi
		implementation for the specified algorithm is not
		available from the specified provider.

 @exception NoSuchProviderException if the specified provider is not
          registered in the security provider list.

 @exception IllegalArgumentException if the provider name is null
		or empty.

 @see Provider

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.SecureRandom java.security.SecureRandom.getInstance(String algorithm, Provider provider) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a SecureRandom object that implements the specified
 Random Number Generator (RNG) algorithm. 

 <p> A new SecureRandom object encapsulating the
 SecureRandomSpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

 <p> The returned SecureRandom object has not been seeded.  To seed the
 returned object, call the <code>setSeed</code> method.
 If <code>setSeed</code> is not called, the first call to
 <code>nextBytes</code> will force the SecureRandom object to seed itself.
 This self-seeding will not occur if <code>setSeed</code> was
 previously called.

 @param algorithm the name of the RNG algorithm.
 See Appendix A in the <a href=
 "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a> 
 for information about standard RNG algorithm names.

 @param provider the provider.

 @return the new SecureRandom object.

 @exception NoSuchAlgorithmException if a SecureRandomSpi
		implementation for the specified algorithm is not available
		from the specified Provider object.

 @exception IllegalArgumentException if the specified provider is null.

 @see Provider

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider java.security.SecureRandom.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the provider of this SecureRandom object.

 @return the provider of this SecureRandom object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.SecureRandom.getAlgorithm()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of the algorithm implemented by this SecureRandom
 object.

 @return the name of the algorithm or <code>unknown</code>
		if the algorithm name cannot be determined.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.security.SecureRandom.setSeed(byte[] seed)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reseeds this random object. The given seed supplements, rather than
 replaces, the existing seed. Thus, repeated calls are guaranteed
 never to reduce randomness.

 @param seed the seed.

 @see #getSeed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.SecureRandom.setSeed(long seed)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reseeds this random object, using the eight bytes contained 
 in the given <code>long seed</code>. The given seed supplements, 
 rather than replaces, the existing seed. Thus, repeated calls 
 are guaranteed never to reduce randomness. 
 
 <p>This method is defined for compatibility with 
 <code>java.util.Random</code>.

 @param seed the seed.

 @see #getSeed

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.security.SecureRandom.nextBytes(byte[] bytes)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Generates a user-specified number of random bytes.

 <p> If a call to <code>setSeed</code> had not occurred previously,
 the first call to this method forces this SecureRandom object
 to seed itself.  This self-seeding will not occur if
 <code>setSeed</code> was previously called.
 
 @param bytes the array to be filled in with random bytes.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final int java.security.SecureRandom.next(int numBits)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Generates an integer containing the user-specified number of
 pseudo-random bits (right justified, with leading zeros).  This
 method overrides a <code>java.util.Random</code> method, and serves
 to provide a source of random bits to all of the methods inherited
 from that class (for example, <code>nextInt</code>,
 <code>nextLong</code>, and <code>nextFloat</code>).

 @param numBits number of pseudo-random bits to be generated, where
 0 <= <code>numBits</code> <= 32.

 @return an <code>int</code> containing the user-specified number
 of pseudo-random bits (right justified, with leading zeros).

<!-- END DATA -->
<!-- BEGIN KEY -->
public static byte[] java.security.SecureRandom.getSeed(int numBytes)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the given number of seed bytes, computed using the seed
 generation algorithm that this class uses to seed itself.  This
 call may be used to seed other random number generators.

 <p>This method is only included for backwards compatibility. 
 The caller is encouraged to use one of the alternative
 <code>getInstance</code> methods to obtain a SecureRandom object, and
 then call the <code>generateSeed</code> method to obtain seed bytes
 from that object.

 @param numBytes the number of seed bytes to generate.
 
 @return the seed bytes.

 @see #setSeed

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] java.security.SecureRandom.generateSeed(int numBytes)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the given number of seed bytes, computed using the seed
 generation algorithm that this class uses to seed itself.  This
 call may be used to seed other random number generators.

 @param numBytes the number of seed bytes to generate.
 
 @return the seed bytes.

<!-- END DATA -->
