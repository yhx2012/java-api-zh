<!-- BEGIN KEY -->
public class java.security.cert.CertPathBuilderException extends java.security.GeneralSecurityException
<!-- END KEY -->
<!-- BEGIN DATA -->
 An exception indicating one of a variety of problems encountered when
 building a certification path with a <code>CertPathBuilder</code>.
 <p>
 A <code>CertPathBuilderException</code> provides support for wrapping 
 exceptions. The {@link #getCause getCause} method returns the throwable, 
 if any, that caused this exception to be thrown. 
 <p>
 <b>Concurrent Access</b>
 <p>
 Unless otherwise specified, the methods defined in this class are not
 thread-safe. Multiple threads that need to access a single
 object concurrently should synchronize amongst themselves and
 provide the necessary locking. Multiple threads each manipulating
 separate objects need not synchronize.

 @see CertPathBuilder

 @version 	1.8 11/17/05
 @since	1.4
 @author 	Sean Mullan

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPathBuilderException()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>CertPathBuilderException</code> with <code>null</code>
 as its detail message.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPathBuilderException(String msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>CertPathBuilderException</code> with the given
 detail message. The detail message is a <code>String</code> that 
 describes this particular exception in more detail.

 @param msg the detail message

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPathBuilderException(Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>CertPathBuilderException</code> that wraps the specified
 throwable. This allows any exception to be converted into a 
 <code>CertPathBuilderException</code>, while retaining information 
 about the wrapped exception, which may be useful for debugging. The 
 detail message is set to (<code>cause==null ? null : cause.toString()
 </code>) (which typically contains the class and detail message of 
 cause).

 @param cause the cause (which is saved for later retrieval by the 
 {@link #getCause getCause()} method). (A <code>null</code> value is 
 permitted, and indicates that the cause is nonexistent or unknown.)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPathBuilderException(String msg, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>CertPathBuilderException</code> with the specified
 detail message and cause.

 @param msg the detail message
 @param  cause the cause (which is saved for later retrieval by the 
 {@link #getCause getCause()} method). (A <code>null</code> value is 
 permitted, and indicates that the cause is nonexistent or unknown.)

<!-- END DATA -->
