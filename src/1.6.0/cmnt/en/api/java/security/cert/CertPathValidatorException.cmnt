<!-- BEGIN KEY -->
public class java.security.cert.CertPathValidatorException extends java.security.GeneralSecurityException
<!-- END KEY -->
<!-- BEGIN DATA -->
 An exception indicating one of a variety of problems encountered when 
 validating a certification path. 
 <p>
 A <code>CertPathValidatorException</code> provides support for wrapping
 exceptions. The {@link #getCause getCause} method returns the throwable, 
 if any, that caused this exception to be thrown. 
 <p>
 A <code>CertPathValidatorException</code> may also include the 
 certification path that was being validated when the exception was thrown 
 and the index of the certificate in the certification path that caused the 
 exception to be thrown. Use the {@link #getCertPath getCertPath} and
 {@link #getIndex getIndex} methods to retrieve this information.
 
 <p>
 <b>Concurrent Access</b>
 <p>
 Unless otherwise specified, the methods defined in this class are not
 thread-safe. Multiple threads that need to access a single
 object concurrently should synchronize amongst themselves and
 provide the necessary locking. Multiple threads each manipulating
 separate objects need not synchronize.

 @see CertPathValidator

 @version 	1.12 04/06/06
 @since	1.4
 @author 	Yassir Elley

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.security.cert.CertPathValidatorException.index
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial the index of the certificate in the certification path  
 that caused the exception to be thrown

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.security.cert.CertPath java.security.cert.CertPathValidatorException.certPath
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial the <code>CertPath</code> that was being validated when 
 the exception was thrown

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPathValidatorException()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>CertPathValidatorException</code> with 
 no detail message. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPathValidatorException(String msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>CertPathValidatorException</code> with the given
 detail message. A detail message is a <code>String</code> that 
 describes this particular exception.

 @param msg the detail message

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPathValidatorException(Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>CertPathValidatorException</code> that wraps the 
 specified throwable. This allows any exception to be converted into a 
 <code>CertPathValidatorException</code>, while retaining information 
 about the wrapped exception, which may be useful for debugging. The 
 detail message is set to (<code>cause==null ? null : cause.toString()
 </code>) (which typically contains the class and detail message of 
 cause).

 @param cause the cause (which is saved for later retrieval by the 
 {@link #getCause getCause()} method). (A <code>null</code> value is 
 permitted, and indicates that the cause is nonexistent or unknown.)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPathValidatorException(String msg, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>CertPathValidatorException</code> with the specified
 detail message and cause.

 @param msg the detail message 
 @param cause the cause (which is saved for later retrieval by the 
 {@link #getCause getCause()} method). (A <code>null</code> value is 
 permitted, and indicates that the cause is nonexistent or unknown.)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPathValidatorException(String msg, Throwable cause, CertPath certPath, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>CertPathValidatorException</code> with the specified
 detail message, cause, certification path, and index.

 @param msg the detail message (or <code>null</code> if none)
 @param cause the cause (or <code>null</code> if none)
 @param certPath the certification path that was in the process of
 being validated when the error was encountered
 @param index the index of the certificate in the certification path
 that caused the error (or -1 if not applicable). Note that 
 the list of certificates in a <code>CertPath</code> is zero based.
 @throws IndexOutOfBoundsException if the index is out of range
 <code>(index < -1 || (certPath != null && index >=
 certPath.getCertificates().size())</code>
 @throws IllegalArgumentException if <code>certPath</code> is 
 <code>null</code> and <code>index</code> is not -1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.CertPath java.security.cert.CertPathValidatorException.getCertPath()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the certification path that was being validated when
 the exception was thrown.

 @return the <code>CertPath</code> that was being validated when
 the exception was thrown (or <code>null</code> if not specified)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.cert.CertPathValidatorException.getIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the index of the certificate in the certification path 
 that caused the exception to be thrown. Note that the list of
 certificates in a <code>CertPath</code> is zero based. If no 
 index has been set, -1 is returned.

 @return the index that has been set, or -1 if none has been set

<!-- END DATA -->
