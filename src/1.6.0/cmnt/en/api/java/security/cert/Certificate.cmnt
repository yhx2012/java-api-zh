<!-- BEGIN KEY -->
public abstract class java.security.cert.Certificate extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>Abstract class for managing a variety of identity certificates.
 An identity certificate is a binding of a principal to a public key which
 is vouched for by another principal.  (A principal represents
 an entity such as an individual user, a group, or a corporation.)
<p>
 This class is an abstraction for certificates that have different
 formats but important common uses.  For example, different types of
 certificates, such as X.509 and PGP, share general certificate
 functionality (like encoding and verifying) and
 some types of information (like a public key).
 <p>
 X.509, PGP, and SDSI certificates can all be implemented by
 subclassing the Certificate class, even though they contain different
 sets of information, and they store and retrieve the information in
 different ways.

 @see X509Certificate
 @see CertificateFactory

 @author Hemma Prafullchandra
 @version 1.27, 04/21/06

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.cert.Certificate(String type)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a certificate of the specified type.

 @param type the standard name of the certificate type.
 See Appendix A in the <a href=
 "../../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
 Java Cryptography Architecture API Specification &amp; Reference </a>
 for information about standard certificate types.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.security.cert.Certificate.getType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the type of this certificate.

 @return the type of this certificate.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.cert.Certificate.equals(Object other)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares this certificate for equality with the specified
 object. If the <code>other</code> object is an
 <code>instanceof</code> <code>Certificate</code>, then
 its encoded form is retrieved and compared with the
 encoded form of this certificate.

 @param other the object to test for equality with this certificate.
 @return true iff the encoded forms of the two certificates
 match, false otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.cert.Certificate.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hashcode value for this certificate from its
 encoded form.

 @return the hashcode value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract byte[] java.security.cert.Certificate.getEncoded() throws java.security.cert.CertificateEncodingException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the encoded form of this certificate. It is
 assumed that each certificate type would have only a single
 form of encoding; for example, X.509 certificates would
 be encoded as ASN.1 DER.

 @return the encoded form of this certificate

 @exception CertificateEncodingException if an encoding error occurs.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.security.cert.Certificate.verify(PublicKey key) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Verifies that this certificate was signed using the
 private key that corresponds to the specified public key.

 @param key the PublicKey used to carry out the verification.

 @exception NoSuchAlgorithmException on unsupported signature
 algorithms.
 @exception InvalidKeyException on incorrect key.
 @exception NoSuchProviderException if there's no default provider.
 @exception SignatureException on signature errors.
 @exception CertificateException on encoding errors.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.security.cert.Certificate.verify(PublicKey key, String sigProvider) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Verifies that this certificate was signed using the
 private key that corresponds to the specified public key.
 This method uses the signature verification engine
 supplied by the specified provider.

 @param key the PublicKey used to carry out the verification.
 @param sigProvider the name of the signature provider.

 @exception NoSuchAlgorithmException on unsupported signature
 algorithms.
 @exception InvalidKeyException on incorrect key.
 @exception NoSuchProviderException on incorrect provider.
 @exception SignatureException on signature errors.
 @exception CertificateException on encoding errors.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.String java.security.cert.Certificate.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this certificate.

 @return a string representation of this certificate.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.security.PublicKey java.security.cert.Certificate.getPublicKey()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the public key from this certificate.

 @return the public key.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object java.security.cert.Certificate.writeReplace() throws java.io.ObjectStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Replace the Certificate to be serialized.

 @return the alternate Certificate object to be serialized

 @throws java.io.ObjectStreamException if a new object representing 
 this Certificate could not be created
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object java.security.cert.Certificate.writeReplace() throws java.io.ObjectStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Replace the Certificate to be serialized.

 @return the alternate Certificate object to be serialized

 @throws java.io.ObjectStreamException if a new object representing 
 this Certificate could not be created
 @since 1.3

<!-- END DATA -->
