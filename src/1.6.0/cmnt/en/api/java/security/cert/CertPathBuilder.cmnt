<!-- BEGIN KEY -->
public class java.security.cert.CertPathBuilder extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 A class for building certification paths (also known as certificate chains).
 <p>
 This class uses a provider-based architecture.
 To create a <code>CertPathBuilder</code>, call 
 one of the static <code>getInstance</code> methods, passing in the 
 algorithm name of the <code>CertPathBuilder</code> desired and optionally 
 the name of the provider desired.
 <p>
 Once a <code>CertPathBuilder</code> object has been created, certification 
 paths can be constructed by calling the {@link #build build} method and 
 passing it an algorithm-specific set of parameters. If successful, the 
 result (including the <code>CertPath</code> that was built) is returned 
 in an object that implements the <code>CertPathBuilderResult</code> 
 interface.
 <p>
 <b>Concurrent Access</b>
 <p>
 The static methods of this class are guaranteed to be thread-safe.
 Multiple threads may concurrently invoke the static methods defined in
 this class with no ill effects.
 <p>
 However, this is not true for the non-static methods defined by this class.
 Unless otherwise documented by a specific provider, threads that need to
 access a single <code>CertPathBuilder</code> instance concurrently should
 synchronize amongst themselves and provide the necessary locking. Multiple
 threads each manipulating a different <code>CertPathBuilder</code> instance
 need not synchronize.
 
 @see CertPath

 @version 	1.13 04/21/06
 @since	1.4
 @author	Sean Mullan
 @author	Yassir Elley

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.cert.CertPathBuilder(CertPathBuilderSpi builderSpi, Provider provider, String algorithm)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>CertPathBuilder</code> object of the given algorithm, 
 and encapsulates the given provider implementation (SPI object) in it.

 @param builderSpi the provider implementation
 @param provider the provider
 @param algorithm the algorithm name

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.cert.CertPathBuilder java.security.cert.CertPathBuilder.getInstance(String algorithm) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>CertPathBuilder</code> object that implements the
 specified algorithm.

 <p> This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new CertPathBuilder object encapsulating the
 CertPathBuilderSpi implementation from the first
 Provider that supports the specified algorithm is returned.

 <p> Note that the list of registered providers may be retrieved via
 the {@link Security#getProviders() Security.getProviders()} method.
 
 @param algorithm the name of the requested <code>CertPathBuilder</code> 
  algorithm.  See Appendix A in the <a href=
  "../../../../technotes/guides/security/certpath/CertPathProgGuide.html#AppA">
  Java Certification Path API Programmer's Guide </a>
  for information about standard algorithm names.

 @return a <code>CertPathBuilder</code> object that implements the
		specified algorithm.

 @throws NoSuchAlgorithmException if no Provider supports a
          CertPathBuilderSpi implementation for the
          specified algorithm.

 @see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.cert.CertPathBuilder java.security.cert.CertPathBuilder.getInstance(String algorithm, String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>CertPathBuilder</code> object that implements the
 specified algorithm.

 <p> A new CertPathBuilder object encapsulating the
 CertPathBuilderSpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

 <p> Note that the list of registered providers may be retrieved via
 the {@link Security#getProviders() Security.getProviders()} method.

 @param algorithm the name of the requested <code>CertPathBuilder</code> 
  algorithm.  See Appendix A in the <a href=
  "../../../../technotes/guides/security/certpath/CertPathProgGuide.html#AppA">
  Java Certification Path API Programmer's Guide </a>
  for information about standard algorithm names.

 @param provider the name of the provider.

 @return a <code>CertPathBuilder</code> object that implements the 
		specified algorithm.

 @throws NoSuchAlgorithmException if a CertPathBuilderSpi
		implementation for the specified algorithm is not
		available from the specified provider.

 @throws NoSuchProviderException if the specified provider is not
		registered in the security provider list.

 @exception IllegalArgumentException if the <code>provider</code> is
		null or empty.

 @see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.security.cert.CertPathBuilder java.security.cert.CertPathBuilder.getInstance(String algorithm, Provider provider) throws java.security.NoSuchAlgorithmException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>CertPathBuilder</code> object that implements the
 specified algorithm.

 <p> A new CertPathBuilder object encapsulating the
 CertPathBuilderSpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

 @param algorithm the name of the requested <code>CertPathBuilder</code> 
  algorithm.  See Appendix A in the <a href=
  "../../../../technotes/guides/security/certpath/CertPathProgGuide.html#AppA">
  Java Certification Path API Programmer's Guide </a>
  for information about standard algorithm names.

 @param provider the provider.

 @return a <code>CertPathBuilder</code> object that implements the 
		specified algorithm.

 @exception NoSuchAlgorithmException if a CertPathBuilderSpi
		implementation for the specified algorithm is not available
		from the specified Provider object.

 @exception IllegalArgumentException if the <code>provider</code> is
		null.

 @see java.security.Provider

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.Provider java.security.cert.CertPathBuilder.getProvider()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the provider of this <code>CertPathBuilder</code>.

 @return the provider of this <code>CertPathBuilder</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.security.cert.CertPathBuilder.getAlgorithm()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of the algorithm of this <code>CertPathBuilder</code>.

 @return the name of the algorithm of this <code>CertPathBuilder</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.security.cert.CertPathBuilderResult java.security.cert.CertPathBuilder.build(CertPathParameters params) throws java.security.cert.CertPathBuilderException, java.security.InvalidAlgorithmParameterException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Attempts to build a certification path using the specified algorithm
 parameter set.

 @param params the algorithm parameters
 @return the result of the build algorithm
 @throws CertPathBuilderException if the builder is unable to construct 
  a certification path that satisfies the specified parameters
 @throws InvalidAlgorithmParameterException if the specified parameters 
 are inappropriate for this <code>CertPathBuilder</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.security.cert.CertPathBuilder.getDefaultType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the default <code>CertPathBuilder</code> type as specified in
 the Java security properties file, or the string &quot;PKIX&quot;
 if no such property exists. The Java security properties file is
 located in the file named &lt;JAVA_HOME&gt;/lib/security/java.security.
 &lt;JAVA_HOME&gt; refers to the value of the java.home system property,
 and specifies the directory where the JRE is installed.

 <p>The default <code>CertPathBuilder</code> type can be used by
 applications that do not want to use a hard-coded type when calling one
 of the <code>getInstance</code> methods, and want to provide a default
 type in case a user does not specify its own.

 <p>The default <code>CertPathBuilder</code> type can be changed by
 setting the value of the "certpathbuilder.type" security property
 (in the Java security properties file) to the desired type.

 @return the default <code>CertPathBuilder</code> type as specified
 in the Java security properties file, or the string &quot;PKIX&quot;
 if no such property exists.

<!-- END DATA -->
