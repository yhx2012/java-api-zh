<!-- BEGIN KEY -->
public abstract class java.security.cert.CertPath extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 An immutable sequence of certificates (a certification path).
 <p>
 This is an abstract class that defines the methods common to all
 <code>CertPath</code>s. Subclasses can handle different kinds of
 certificates (X.509, PGP, etc.).
 <p>
 All <code>CertPath</code> objects have a type, a list of 
 <code>Certificate</code>s, and one or more supported encodings. Because the 
 <code>CertPath</code> class is immutable, a <code>CertPath</code> cannot 
 change in any externally visible way after being constructed. This 
 stipulation applies to all public fields and methods of this class and any 
 added or overridden by subclasses.
 <p>
 The type is a <code>String</code> that identifies the type of
 <code>Certificate</code>s in the certification path. For each
 certificate <code>cert</code> in a certification path <code>certPath</code>,
 <code>cert.getType().equals(certPath.getType())</code> must be
 <code>true</code>.
 <p>
 The list of <code>Certificate</code>s is an ordered <code>List</code> of
 zero or more <code>Certificate</code>s. This <code>List</code> and all
 of the <code>Certificate</code>s contained in it must be immutable.
 <p>
 Each <code>CertPath</code> object must support one or more encodings
 so that the object can be translated into a byte array for storage or
 transmission to other parties. Preferably, these encodings should be
 well-documented standards (such as PKCS#7). One of the encodings supported
 by a <code>CertPath</code> is considered the default encoding. This
 encoding is used if no encoding is explicitly requested (for the
 {@link #getEncoded() getEncoded()} method, for instance).
 <p>
 All <code>CertPath</code> objects are also <code>Serializable</code>. 
 <code>CertPath</code> objects are resolved into an alternate 
 {@link CertPathRep CertPathRep} object during serialization. This allows
 a <code>CertPath</code> object to be serialized into an equivalent
 representation regardless of its underlying implementation.
 <p>
 <code>CertPath</code> objects can be created with a
 <code>CertificateFactory</code> or they can be returned by other classes,
 such as a <code>CertPathBuilder</code>.
 <p>
 By convention, X.509 <code>CertPath</code>s (consisting of
 <code>X509Certificate</code>s), are ordered starting with the target 
 certificate and ending with a certificate issued by the trust anchor. That 
 is, the issuer of one certificate is the subject of the following one. The 
 certificate representing the {@link TrustAnchor TrustAnchor} should not be 
 included in the certification path. Unvalidated X.509 <code>CertPath</code>s 
 may not follow these conventions. PKIX <code>CertPathValidator</code>s will 
 detect any departure from these conventions that cause the certification 
 path to be invalid and throw a <code>CertPathValidatorException</code>.
 <p>
 <b>Concurrent Access</b>
 <p>
 All <code>CertPath</code> objects must be thread-safe. That is, multiple
 threads may concurrently invoke the methods defined in this class on a
 single <code>CertPath</code> object (or more than one) with no
 ill effects. This is also true for the <code>List</code> returned by
 <code>CertPath.getCertificates</code>.
 <p>
 Requiring <code>CertPath</code> objects to be immutable and thread-safe
 allows them to be passed around to various pieces of code without worrying
 about coordinating access.  Providing this thread-safety is
 generally not difficult, since the <code>CertPath</code> and
 <code>List</code> objects in question are immutable.

 @see CertificateFactory
 @see CertPathBuilder

 @version 1.11 04/07/06
 @author	Yassir Elley
 @since	1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.cert.CertPath(String type)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>CertPath</code> of the specified type.
 <p>
 This constructor is protected because most users should use a
 <code>CertificateFactory</code> to create <code>CertPath</code>s.

 @param type the standard name of the type of
 <code>Certificate</code>s in this path

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.cert.CertPath.getType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the type of <code>Certificate</code>s in this certification
 path. This is the same string that would be returned by
 {@link java.security.cert.Certificate#getType() cert.getType()}
 for all <code>Certificate</code>s in the certification path.

 @return the type of <code>Certificate</code>s in this certification
 path (never null)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Iterator<java.lang.String> java.security.cert.CertPath.getEncodings()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an iteration of the encodings supported by this certification 
 path, with the default encoding first. Attempts to modify the returned
 <code>Iterator</code> via its <code>remove</code> method result in an
 <code>UnsupportedOperationException</code>.

 @return an <code>Iterator</code> over the names of the supported
         encodings (as Strings)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.cert.CertPath.equals(Object other)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares this certification path for equality with the specified
 object. Two <code>CertPath</code>s are equal if and only if their
 types are equal and their certificate <code>List</code>s (and by
 implication the <code>Certificate</code>s in those <code>List</code>s)
 are equal. A <code>CertPath</code> is never equal to an object that is
 not a <code>CertPath</code>.
 <p>
 This algorithm is implemented by this method. If it is overridden,
 the behavior specified here must be maintained.

 @param other the object to test for equality with this certification path
 @return true if the specified object is equal to this certification path,
 false otherwise

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.security.cert.CertPath.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the hashcode for this certification path. The hash code of
 a certification path is defined to be the result of the following
 calculation:
 <pre><code>
  hashCode = path.getType().hashCode();
  hashCode = 31*hashCode + path.getCertificates().hashCode();
 </code></pre>
 This ensures that <code>path1.equals(path2)</code> implies that
 <code>path1.hashCode()==path2.hashCode()</code> for any two certification
 paths, <code>path1</code> and <code>path2</code>, as required by the
 general contract of <code>Object.hashCode</code>.

 @return the hashcode value for this certification path

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.cert.CertPath.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this certification path.
 This calls the <code>toString</code> method on each of the
 <code>Certificate</code>s in the path.

 @return a string representation of this certification path

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract byte[] java.security.cert.CertPath.getEncoded() throws java.security.cert.CertificateEncodingException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the encoded form of this certification path, using the default
 encoding.

 @return the encoded bytes
 @exception CertificateEncodingException if an encoding error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract byte[] java.security.cert.CertPath.getEncoded(String encoding) throws java.security.cert.CertificateEncodingException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the encoded form of this certification path, using the
 specified encoding.

 @param encoding the name of the encoding to use
 @return the encoded bytes
 @exception CertificateEncodingException if an encoding error occurs or
   the encoding requested is not supported

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.List<? extends java.security.cert.Certificate> java.security.cert.CertPath.getCertificates()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the list of certificates in this certification path.
 The <code>List</code> returned must be immutable and thread-safe.

 @return an immutable <code>List</code> of <code>Certificate</code>s
         (may be empty, but not null)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object java.security.cert.CertPath.writeReplace() throws java.io.ObjectStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Replaces the <code>CertPath</code> to be serialized with a 
 <code>CertPathRep</code> object.

 @return the <code>CertPathRep</code> to be serialized

 @throws ObjectStreamException if a <code>CertPathRep</code> object 
 representing this certification path could not be created

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Object java.security.cert.CertPath.writeReplace() throws java.io.ObjectStreamException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Replaces the <code>CertPath</code> to be serialized with a 
 <code>CertPathRep</code> object.

 @return the <code>CertPathRep</code> to be serialized

 @throws ObjectStreamException if a <code>CertPathRep</code> object 
 representing this certification path could not be created

<!-- END DATA -->
