<!-- BEGIN KEY -->
public class java.security.cert.X509CRLSelector extends java.lang.Object implements java.security.cert.CRLSelector
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <code>CRLSelector</code> that selects <code>X509CRLs</code> that
 match all specified criteria. This class is particularly useful when
 selecting CRLs from a <code>CertStore</code> to check revocation status
 of a particular certificate.
 <p>
 When first constructed, an <code>X509CRLSelector</code> has no criteria
 enabled and each of the <code>get</code> methods return a default
 value (<code>null</code>). Therefore, the {@link #match match} method 
 would return <code>true</code> for any <code>X509CRL</code>. Typically, 
 several criteria are enabled (by calling {@link #setIssuers setIssuers} 
 or {@link #setDateAndTime setDateAndTime}, for instance) and then the
 <code>X509CRLSelector</code> is passed to
 {@link CertStore#getCRLs CertStore.getCRLs} or some similar
 method.
 <p>
 Please refer to RFC 2459 for definitions of the X.509 CRL fields and
 extensions mentioned below.
 <p>
 <b>Concurrent Access</b>
 <p>
 Unless otherwise specified, the methods defined in this class are not
 thread-safe. Multiple threads that need to access a single
 object concurrently should synchronize amongst themselves and
 provide the necessary locking. Multiple threads each manipulating
 separate objects need not synchronize.

 @see CRLSelector
 @see X509CRL

 @version 	1.17 11/17/05
 @since	1.4
 @author	Steve Hanna

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.X509CRLSelector()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an <code>X509CRLSelector</code>. Initially, no criteria are set
 so any <code>X509CRL</code> will match.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.cert.X509CRLSelector.setIssuers(java.util.Collection<javax.security.auth.x500.X500Principal> issuers)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the issuerNames criterion. The issuer distinguished name in the
 <code>X509CRL</code> must match at least one of the specified
 distinguished names. If <code>null</code>, any issuer distinguished name
 will do.
 <p>
 This method allows the caller to specify, with a single method call,
 the complete set of issuer names which <code>X509CRLs</code> may contain.
 The specified value replaces the previous value for the issuerNames
 criterion.
 <p>
 The <code>names</code> parameter (if not <code>null</code>) is a
 <code>Collection</code> of <code>X500Principal</code>s.
 <p>
 Note that the <code>names</code> parameter can contain duplicate
 distinguished names, but they may be removed from the 
 <code>Collection</code> of names returned by the
 {@link #getIssuers getIssuers} method.
 <p>
 Note that a copy is performed on the <code>Collection</code> to
 protect against subsequent modifications.

 @param issuers a <code>Collection</code> of X500Principals 
   (or <code>null</code>)
 @see #getIssuers
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.cert.X509CRLSelector.setIssuerNames(java.util.Collection<?> names) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <strong>Note:</strong> use {@linkplain #setIssuers(Collection)} instead
 or only specify the byte array form of distinguished names when using
 this method. See {@link #addIssuerName(String)} for more information.
 <p>
 Sets the issuerNames criterion. The issuer distinguished name in the
 <code>X509CRL</code> must match at least one of the specified
 distinguished names. If <code>null</code>, any issuer distinguished name
 will do.
 <p>
 This method allows the caller to specify, with a single method call,
 the complete set of issuer names which <code>X509CRLs</code> may contain.
 The specified value replaces the previous value for the issuerNames
 criterion.
 <p>
 The <code>names</code> parameter (if not <code>null</code>) is a
 <code>Collection</code> of names. Each name is a <code>String</code>
 or a byte array representing a distinguished name (in RFC 2253 or
 ASN.1 DER encoded form, respectively). If <code>null</code> is supplied
 as the value for this argument, no issuerNames check will be performed.
 <p>
 Note that the <code>names</code> parameter can contain duplicate
 distinguished names, but they may be removed from the 
 <code>Collection</code> of names returned by the
 {@link #getIssuerNames getIssuerNames} method.
 <p>
 If a name is specified as a byte array, it should contain a single DER
 encoded distinguished name, as defined in X.501. The ASN.1 notation for
 this structure is as follows.
 <pre><code>
 Name ::= CHOICE {
   RDNSequence }

 RDNSequence ::= SEQUENCE OF RelativeDistinguishedName

 RelativeDistinguishedName ::=
   SET SIZE (1 .. MAX) OF AttributeTypeAndValue

 AttributeTypeAndValue ::= SEQUENCE {
   type     AttributeType,
   value    AttributeValue }

 AttributeType ::= OBJECT IDENTIFIER

 AttributeValue ::= ANY DEFINED BY AttributeType
 ....
 DirectoryString ::= CHOICE {
       teletexString           TeletexString (SIZE (1..MAX)),
       printableString         PrintableString (SIZE (1..MAX)),
       universalString         UniversalString (SIZE (1..MAX)),
       utf8String              UTF8String (SIZE (1.. MAX)),
       bmpString               BMPString (SIZE (1..MAX)) }
 </code></pre>
 <p>
 Note that a deep copy is performed on the <code>Collection</code> to
 protect against subsequent modifications.

 @param names a <code>Collection</code> of names (or <code>null</code>)
 @throws IOException if a parsing error occurs
 @see #getIssuerNames

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.cert.X509CRLSelector.addIssuer(X500Principal issuer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a name to the issuerNames criterion. The issuer distinguished
 name in the <code>X509CRL</code> must match at least one of the specified
 distinguished names.
 <p>
 This method allows the caller to add a name to the set of issuer names
 which <code>X509CRLs</code> may contain. The specified name is added to
 any previous value for the issuerNames criterion.
 If the specified name is a duplicate, it may be ignored.

 @param issuer the issuer as X500Principal
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.cert.X509CRLSelector.addIssuerName(String name) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <strong>Denigrated</strong>, use 
 {@linkplain #addIssuer(X500Principal)} or 
 {@linkplain #addIssuerName(byte[])} instead. This method should not be 
 relied on as it can fail to match some CRLs because of a loss of 
 encoding information in the RFC 2253 String form of some distinguished 
 names.
 <p>
 Adds a name to the issuerNames criterion. The issuer distinguished
 name in the <code>X509CRL</code> must match at least one of the specified
 distinguished names.
 <p>
 This method allows the caller to add a name to the set of issuer names
 which <code>X509CRLs</code> may contain. The specified name is added to
 any previous value for the issuerNames criterion.
 If the specified name is a duplicate, it may be ignored.

 @param name the name in RFC 2253 form
 @throws IOException if a parsing error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.cert.X509CRLSelector.addIssuerName(byte[] name) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a name to the issuerNames criterion. The issuer distinguished
 name in the <code>X509CRL</code> must match at least one of the specified
 distinguished names.
 <p>
 This method allows the caller to add a name to the set of issuer names
 which <code>X509CRLs</code> may contain. The specified name is added to
 any previous value for the issuerNames criterion. If the specified name
 is a duplicate, it may be ignored.
 If a name is specified as a byte array, it should contain a single DER
 encoded distinguished name, as defined in X.501. The ASN.1 notation for
 this structure is as follows.
 <p>
 The name is provided as a byte array. This byte array should contain
 a single DER encoded distinguished name, as defined in X.501. The ASN.1
 notation for this structure appears in the documentation for
 {@link #setIssuerNames setIssuerNames(Collection names)}.
 <p>
 Note that the byte array supplied here is cloned to protect against
 subsequent modifications.

 @param name a byte array containing the name in ASN.1 DER encoded form
 @throws IOException if a parsing error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.cert.X509CRLSelector.setMinCRLNumber(BigInteger minCRL)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the minCRLNumber criterion. The <code>X509CRL</code> must have a
 CRL number extension whose value is greater than or equal to the
 specified value. If <code>null</code>, no minCRLNumber check will be 
 done.

 @param minCRL the minimum CRL number accepted (or <code>null</code>)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.cert.X509CRLSelector.setMaxCRLNumber(BigInteger maxCRL)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the maxCRLNumber criterion. The <code>X509CRL</code> must have a
 CRL number extension whose value is less than or equal to the
 specified value. If <code>null</code>, no maxCRLNumber check will be 
 done.

 @param maxCRL the maximum CRL number accepted (or <code>null</code>)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.cert.X509CRLSelector.setDateAndTime(Date dateAndTime)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the dateAndTime criterion. The specified date must be
 equal to or later than the value of the thisUpdate component
 of the <code>X509CRL</code> and earlier than the value of the
 nextUpdate component. There is no match if the <code>X509CRL</code>
 does not contain a nextUpdate component.
 If <code>null</code>, no dateAndTime check will be done.
 <p>
 Note that the <code>Date</code> supplied here is cloned to protect 
 against subsequent modifications.

 @param dateAndTime the <code>Date</code> to match against
                    (or <code>null</code>)
 @see #getDateAndTime

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.security.cert.X509CRLSelector.setCertificateChecking(X509Certificate cert)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the certificate being checked. This is not a criterion. Rather,
 it is optional information that may help a <code>CertStore</code>
 find CRLs that would be relevant when checking revocation for the
 specified certificate. If <code>null</code> is specified, then no
 such optional information is provided.

 @param cert the <code>X509Certificate</code> being checked
             (or <code>null</code>)
 @see #getCertificateChecking

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Collection<javax.security.auth.x500.X500Principal> java.security.cert.X509CRLSelector.getIssuers()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the issuerNames criterion. The issuer distinguished
 name in the <code>X509CRL</code> must match at least one of the specified
 distinguished names. If the value returned is <code>null</code>, any
 issuer distinguished name will do.
 <p>
 If the value returned is not <code>null</code>, it is a
 unmodifiable <code>Collection</code> of <code>X500Principal</code>s.

 @return an unmodifiable <code>Collection</code> of names 
   (or <code>null</code>)
 @see #setIssuers
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Collection<java.lang.Object> java.security.cert.X509CRLSelector.getIssuerNames()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a copy of the issuerNames criterion. The issuer distinguished
 name in the <code>X509CRL</code> must match at least one of the specified
 distinguished names. If the value returned is <code>null</code>, any
 issuer distinguished name will do.
 <p>
 If the value returned is not <code>null</code>, it is a
 <code>Collection</code> of names. Each name is a <code>String</code>
 or a byte array representing a distinguished name (in RFC 2253 or
 ASN.1 DER encoded form, respectively).  Note that the 
 <code>Collection</code> returned may contain duplicate names.
 <p>
 If a name is specified as a byte array, it should contain a single DER
 encoded distinguished name, as defined in X.501. The ASN.1 notation for
 this structure is given in the documentation for
 {@link #setIssuerNames setIssuerNames(Collection names)}.
 <p>
 Note that a deep copy is performed on the <code>Collection</code> to
 protect against subsequent modifications.

 @return a <code>Collection</code> of names (or <code>null</code>)
 @see #setIssuerNames

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.BigInteger java.security.cert.X509CRLSelector.getMinCRL()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the minCRLNumber criterion. The <code>X509CRL</code> must have a
 CRL number extension whose value is greater than or equal to the
 specified value. If <code>null</code>, no minCRLNumber check will be done.

 @return the minimum CRL number accepted (or <code>null</code>)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.math.BigInteger java.security.cert.X509CRLSelector.getMaxCRL()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the maxCRLNumber criterion. The <code>X509CRL</code> must have a
 CRL number extension whose value is less than or equal to the
 specified value. If <code>null</code>, no maxCRLNumber check will be 
 done.

 @return the maximum CRL number accepted (or <code>null</code>)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Date java.security.cert.X509CRLSelector.getDateAndTime()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the dateAndTime criterion. The specified date must be
 equal to or later than the value of the thisUpdate component
 of the <code>X509CRL</code> and earlier than the value of the
 nextUpdate component. There is no match if the
 <code>X509CRL</code> does not contain a nextUpdate component.
 If <code>null</code>, no dateAndTime check will be done.
 <p>
 Note that the <code>Date</code> returned is cloned to protect against
 subsequent modifications.

 @return the <code>Date</code> to match against (or <code>null</code>)
 @see #setDateAndTime

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.cert.X509Certificate java.security.cert.X509CRLSelector.getCertificateChecking()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the certificate being checked. This is not a criterion. Rather,
 it is optional information that may help a <code>CertStore</code>
 find CRLs that would be relevant when checking revocation for the
 specified certificate. If the value returned is <code>null</code>, then 
 no such optional information is provided.

 @return the certificate being checked (or <code>null</code>)
 @see #setCertificateChecking

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.security.cert.X509CRLSelector.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a printable representation of the <code>X509CRLSelector</code>.

 @return a <code>String</code> describing the contents of the
         <code>X509CRLSelector</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.security.cert.X509CRLSelector.match(CRL crl)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Decides whether a <code>CRL</code> should be selected.

 @param crl the <code>CRL</code> to be checked
 @return <code>true</code> if the <code>CRL</code> should be selected,
         <code>false</code> otherwise

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.security.cert.X509CRLSelector.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a copy of this object.

 @return the copy

<!-- END DATA -->
