<!-- BEGIN KEY -->
public abstract class java.nio.channels.SocketChannel extends java.nio.channels.spi.AbstractSelectableChannel implements java.nio.channels.ByteChannel, java.nio.channels.ScatteringByteChannel, java.nio.channels.GatheringByteChannel
<!-- END KEY -->
<!-- BEGIN DATA -->
 A selectable channel for stream-oriented connecting sockets.
 
 <p> Socket channels are not a complete abstraction of connecting network
 sockets.  Binding, shutdown, and the manipulation of socket options must be
 done through an associated {@link java.net.Socket} object obtained by
 invoking the {@link #socket() socket} method.  It is not possible to create
 a channel for an arbitrary, pre-existing socket, nor is it possible to
 specify the {@link java.net.SocketImpl} object to be used by a socket
 associated with a socket channel.

 <p> A socket channel is created by invoking one of the {@link #open open}
 methods of this class.  A newly-created socket channel is open but not yet
 connected.  An attempt to invoke an I/O operation upon an unconnected
 channel will cause a {@link NotYetConnectedException} to be thrown.  A
 socket channel can be connected by invoking its {@link #connect connect}
 method; once connected, a socket channel remains connected until it is
 closed.  Whether or not a socket channel is connected may be determined by
 invoking its {@link #isConnected isConnected} method.

 <p> Socket channels support <i>non-blocking connection:</i>&nbsp;A socket
 channel may be created and the process of establishing the link to the
 remote socket may be initiated via the {@link #connect connect} method for
 later completion by the {@link #finishConnect finishConnect} method.
 Whether or not a connection operation is in progress may be determined by
 invoking the {@link #isConnectionPending isConnectionPending} method.

 <p> The input and output sides of a socket channel may independently be
 <i>shut down</i> without actually closing the channel.  Shutting down the
 input side of a channel by invoking the {@link java.net.Socket#shutdownInput
 shutdownInput} method of an associated socket object will cause further
 reads on the channel to return <tt>-1</tt>, the end-of-stream indication.
 Shutting down the output side of the channel by invoking the {@link
 java.net.Socket#shutdownOutput shutdownOutput} method of an associated
 socket object will cause further writes on the channel to throw a {@link
 ClosedChannelException}.

 <p> Socket channels support <i>asynchronous shutdown,</i> which is similar
 to the asynchronous close operation specified in the {@link Channel} class.
 If the input side of a socket is shut down by one thread while another
 thread is blocked in a read operation on the socket's channel, then the read
 operation in the blocked thread will complete without reading any bytes and
 will return <tt>-1</tt>.  If the output side of a socket is shut down by one
 thread while another thread is blocked in a write operation on the socket's
 channel, then the blocked thread will receive an {@link
 AsynchronousCloseException}.

 <p> Socket channels are safe for use by multiple concurrent threads.  They
 support concurrent reading and writing, though at most one thread may be
 reading and at most one thread may be writing at any given time.  The {@link
 #connect connect} and {@link #finishConnect finishConnect} methods are
 mutually synchronized against each other, and an attempt to initiate a read
 or write operation while an invocation of one of these methods is in
 progress will block until that invocation is complete.  </p>


 @author Mark Reinhold
 @author JSR-51 Expert Group
 @version 1.34, 05/11/17
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.nio.channels.SocketChannel(SelectorProvider provider)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Initializes a new instance of this class.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.channels.SocketChannel java.nio.channels.SocketChannel.open() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Opens a socket channel.

 <p> The new channel is created by invoking the {@link
 java.nio.channels.spi.SelectorProvider#openSocketChannel
 openSocketChannel} method of the system-wide default {@link
 java.nio.channels.spi.SelectorProvider} object.  </p>

 @return  A new socket channel

 @throws  IOException
          If an I/O error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.nio.channels.SocketChannel java.nio.channels.SocketChannel.open(SocketAddress remote) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Opens a socket channel and connects it to a remote address.

 <p> This convenience method works as if by invoking the {@link #open()}
 method, invoking the {@link #connect(SocketAddress) connect} method upon
 the resulting socket channel, passing it <tt>remote</tt>, and then
 returning that channel.  </p>

 @param  remote
         The remote address to which the new channel is to be connected

 @throws  AsynchronousCloseException
          If another thread closes this channel
          while the connect operation is in progress

 @throws  ClosedByInterruptException
          If another thread interrupts the current thread
          while the connect operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status

 @throws  UnresolvedAddressException
          If the given remote address is not fully resolved

 @throws  UnsupportedAddressTypeException
          If the type of the given remote address is not supported

 @throws  SecurityException
          If a security manager has been installed
          and it does not permit access to the given remote endpoint

 @throws  IOException
          If some other I/O error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.nio.channels.SocketChannel.validOps()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an operation set identifying this channel's supported
 operations.

 <p> Socket channels support connecting, reading, and writing, so this
 method returns <tt>(</tt>{@link SelectionKey#OP_CONNECT}
 <tt>|</tt>&nbsp;{@link SelectionKey#OP_READ} <tt>|</tt>&nbsp;{@link
 SelectionKey#OP_WRITE}<tt>)</tt>.  </p>

 @return  The valid-operation set

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.net.Socket java.nio.channels.SocketChannel.socket()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves a socket associated with this channel.

 <p> The returned object will not declare any public methods that are not
 declared in the {@link java.net.Socket} class.  </p>

 @return  A socket associated with this channel

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.nio.channels.SocketChannel.isConnected()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tells whether or not this channel's network socket is connected.  </p>

 @return  <tt>true</tt> if, and only if, this channel's network socket
          is connected

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.nio.channels.SocketChannel.isConnectionPending()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tells whether or not a connection operation is in progress on this
 channel.  </p>

 @return  <tt>true</tt> if, and only if, a connection operation has been
          initiated on this channel but not yet completed by invoking the
          {@link #finishConnect finishConnect} method

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.nio.channels.SocketChannel.connect(SocketAddress remote) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Connects this channel's socket.

 <p> If this channel is in non-blocking mode then an invocation of this
 method initiates a non-blocking connection operation.  If the connection
 is established immediately, as can happen with a local connection, then
 this method returns <tt>true</tt>.  Otherwise this method returns
 <tt>false</tt> and the connection operation must later be completed by
 invoking the {@link #finishConnect finishConnect} method.

 <p> If this channel is in blocking mode then an invocation of this
 method will block until the connection is established or an I/O error
 occurs.

 <p> This method performs exactly the same security checks as the {@link
 java.net.Socket} class.  That is, if a security manager has been
 installed then this method verifies that its {@link
 java.lang.SecurityManager#checkConnect checkConnect} method permits
 connecting to the address and port number of the given remote endpoint.

 <p> This method may be invoked at any time.  If a read or write
 operation upon this channel is invoked while an invocation of this
 method is in progress then that operation will first block until this
 invocation is complete.  If a connection attempt is initiated but fails,
 that is, if an invocation of this method throws a checked exception,
 then the channel will be closed.  </p>

 @param  remote
         The remote address to which this channel is to be connected

 @return  <tt>true</tt> if a connection was established,
          <tt>false</tt> if this channel is in non-blocking mode
          and the connection operation is in progress

 @throws  AlreadyConnectedException
          If this channel is already connected

 @throws  ConnectionPendingException
          If a non-blocking connection operation is already in progress
          on this channel

 @throws  ClosedChannelException
          If this channel is closed

 @throws  AsynchronousCloseException
          If another thread closes this channel
          while the connect operation is in progress

 @throws  ClosedByInterruptException
          If another thread interrupts the current thread
          while the connect operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status

 @throws  UnresolvedAddressException
          If the given remote address is not fully resolved

 @throws  UnsupportedAddressTypeException
          If the type of the given remote address is not supported

 @throws  SecurityException
          If a security manager has been installed
          and it does not permit access to the given remote endpoint

 @throws  IOException
          If some other I/O error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.nio.channels.SocketChannel.finishConnect() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Finishes the process of connecting a socket channel.

 <p> A non-blocking connection operation is initiated by placing a socket
 channel in non-blocking mode and then invoking its {@link #connect
 connect} method.  Once the connection is established, or the attempt has
 failed, the socket channel will become connectable and this method may
 be invoked to complete the connection sequence.  If the connection
 operation failed then invoking this method will cause an appropriate
 {@link java.io.IOException} to be thrown.

 <p> If this channel is already connected then this method will not block
 and will immediately return <tt>true</tt>.  If this channel is in
 non-blocking mode then this method will return <tt>false</tt> if the
 connection process is not yet complete.  If this channel is in blocking
 mode then this method will block until the connection either completes
 or fails, and will always either return <tt>true</tt> or throw a checked
 exception describing the failure.

 <p> This method may be invoked at any time.  If a read or write
 operation upon this channel is invoked while an invocation of this
 method is in progress then that operation will first block until this
 invocation is complete.  If a connection attempt fails, that is, if an
 invocation of this method throws a checked exception, then the channel
 will be closed.  </p>

 @return  <tt>true</tt> if, and only if, this channel's socket is now
          connected

 @throws  NoConnectionPendingException
          If this channel is not connected and a connection operation
          has not been initiated

 @throws  ClosedChannelException
          If this channel is closed

 @throws  AsynchronousCloseException
          If another thread closes this channel
          while the connect operation is in progress

 @throws  ClosedByInterruptException
          If another thread interrupts the current thread
          while the connect operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status

 @throws  IOException
          If some other I/O error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.nio.channels.SocketChannel.read(ByteBuffer dst) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws  NotYetConnectedException
          If this channel is not yet connected

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract long java.nio.channels.SocketChannel.read(java.nio.ByteBuffer[] dsts, int offset, int length) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws  NotYetConnectedException
          If this channel is not yet connected

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.nio.channels.SocketChannel.read(java.nio.ByteBuffer[] dsts) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws  NotYetConnectedException
          If this channel is not yet connected

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.nio.channels.SocketChannel.write(ByteBuffer src) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws  NotYetConnectedException
          If this channel is not yet connected

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract long java.nio.channels.SocketChannel.write(java.nio.ByteBuffer[] srcs, int offset, int length) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws  NotYetConnectedException
          If this channel is not yet connected

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.nio.channels.SocketChannel.write(java.nio.ByteBuffer[] srcs) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws  NotYetConnectedException
          If this channel is not yet connected

<!-- END DATA -->
