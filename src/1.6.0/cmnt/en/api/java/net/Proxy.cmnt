<!-- BEGIN KEY -->
public class java.net.Proxy extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class represents a proxy setting, typically a type (http, socks) and
 a socket address. 
 A <code>Proxy</code> is an immutable object.

 @version 1.3, 08/09/03
 @see     java.net.ProxySelector
 @author Yingxian Wang
 @author Jean-Christophe Collet
 @since   1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.net.Proxy java.net.Proxy.NO_PROXY
<!-- END KEY -->
<!-- BEGIN DATA -->
 A proxy setting that represents a <code>DIRECT</code> connection,
 basically telling the protocol handler not to use any proxying.
 Used, for instance, to create sockets bypassing any other global
 proxy settings (like SOCKS):
 <P>
 <code>Socket s = new Socket(Proxy.NO_PROXY);</code><br>
 <P>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.Proxy(Proxy.Type type, SocketAddress sa)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an entry representing a PROXY connection.
 Certain combinations are illegal. For instance, for types Http, and
 Socks, a SocketAddress <b>must</b> be provided. 
 <P>
 Use the <code>Proxy.NO_PROXY</code> constant
 for representing a direct connection.

 @param type the <code>Type</code> of the proxy
 @param sa the <code>SocketAddress</code> for that proxy
 @throws IllegalArgumentException when the type and the address are
 incompatible

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.Proxy.Type java.net.Proxy.type()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the proxy type.

 @return a Type representing the proxy type 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.SocketAddress java.net.Proxy.address()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the socket address of the proxy, or 
 <code>null</code> if its a direct connection.

 @return a <code>SocketAddress</code> representing the socket end
         point of the proxy

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.Proxy.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a string representation of this Proxy.
 This String is constructed by calling toString() on its type
 and concatenating " @ " and the toString() result from its address
 if its type is not <code>DIRECT</code>.

 @return  a string representation of this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.net.Proxy.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares this object against the specified object.
 The result is <code>true</code> if and only if the argument is
 not <code>null</code> and it represents the same proxy as
 this object.
 <p>
 Two instances of <code>Proxy</code> represent the same
 address if both the SocketAddresses and type are equal.

 @param   obj   the object to compare against.
 @return  <code>true</code> if the objects are the same;
          <code>false</code> otherwise.
 @see java.net.InetSocketAddress#equals(java.lang.Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.net.Proxy.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hashcode for this Proxy.

 @return  a hash code value for this Proxy.

<!-- END DATA -->
