<!-- BEGIN KEY -->
public final class java.net.HttpCookie extends java.lang.Object implements java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
 An HttpCookie object represents an http cookie, which carries state
 information between server and user agent. Cookie is widely adopted
 to create stateful sessions.

 <p>There are 3 http cookie specifications:
 <blockquote>
   Netscape draft<br>
   RFC 2109 - <a href="http://www.ietf.org/rfc/rfc2109.txt">
 <i>http://www.ietf.org/rfc/rfc2109.txt</i></a><br>
   RFC 2965 - <a href="http://www.ietf.org/rfc/rfc2965.txt">
 <i>http://www.ietf.org/rfc/rfc2965.txt</i></a>
 </blockquote>

 <p>HttpCookie class can accept all these 3 forms of syntax.

 @version 1.5, 05/11/17
 @author Edward Wang
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.HttpCookie(String name, String value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a cookie with a specified name and value.

 <p>The name must conform to RFC 2965. That means it can contain 
 only ASCII alphanumeric characters and cannot contain commas, 
 semicolons, or white space or begin with a $ character. The cookie's
 name cannot be changed after creation.

 <p>The value can be anything the server chooses to send. Its
 value is probably of interest only to the server. The cookie's
 value can be changed after creation with the
 <code>setValue</code> method.

 <p>By default, cookies are created according to the RFC 2965
 cookie specification. The version can be changed with the 
 <code>setVersion</code> method.


 @param name 			a <code>String</code> specifying the name of the cookie

 @param value			a <code>String</code> specifying the value of the cookie

 @throws IllegalArgumentException	if the cookie name contains illegal characters
					or it is one of the tokens reserved for use
					by the cookie protocol
 @throws NullPointerException     if <tt>name</tt> is <tt>null</tt>
 @see #setValue
 @see #setVersion


<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.List<java.net.HttpCookie> java.net.HttpCookie.parse(String header)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs cookies from set-cookie or set-cookie2 header string.
 RFC 2965 section 3.2.2 set-cookie2 syntax indicates that one header line
 may contain more than one cookie definitions, so this is a static
 utility method instead of another constructor.

 @param header    a <tt>String</tt> specifying the set-cookie header.
                  The header should start with "set-cookie", or "set-cookie2"
                  token; or it should have no leading token at all.
 @return          a List of cookie parsed from header line string
 @throws IllegalArgumentException if header string violates the cookie
                                  specification's syntax, or the cookie
                                  name contains llegal characters, or
                                  the cookie name is one of the tokens
                                  reserved for use by the cookie protocol
 @throws NullPointerException     if the header string is <tt>null</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.HttpCookie.hasExpired()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reports whether this http cookie has expired or not.

 @return  <tt>true</tt> to indicate this http cookie has expired;
          otherwise, <tt>false</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.HttpCookie.setComment(String purpose)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Specifies a comment that describes a cookie's purpose.
 The comment is useful if the browser presents the cookie 
 to the user. Comments
 are not supported by Netscape Version 0 cookies.

 @param purpose		a <code>String</code> specifying the comment 
				to display to the user

 @see #getComment


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.HttpCookie.getComment()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the comment describing the purpose of this cookie, or
 <code>null</code> if the cookie has no comment.

 @return			a <code>String</code> containing the comment,
				or <code>null</code> if none

 @see #setComment


<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.HttpCookie.setCommentURL(String purpose)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Specifies a comment url that describes a cookie's purpose.
 The comment url is useful if the browser presents the cookie 
 to the user. Comment url is RFC 2965 only.

 @param purpose		a <code>String</code> specifying the comment url
				to display to the user

 @see #getCommentURL


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.HttpCookie.getCommentURL()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the comment url describing the purpose of this cookie, or
 <code>null</code> if the cookie has no comment url.

 @return			a <code>String</code> containing the comment url,
				or <code>null</code> if none

 @see #setCommentURL


<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.HttpCookie.setDiscard(boolean discard)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Specify whether user agent should discard the cookie unconditionally.
 This is RFC 2965 only attribute.

 @param discard   <tt>true</tt> indicates to discard cookie unconditionally

 @see #getDiscard

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.HttpCookie.getDiscard()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the discard attribute of the cookie

 @return  a <tt>boolean</tt> to represent this cookie's discard attribute

 @see #setDiscard

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.HttpCookie.setPortlist(String ports)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Specify the portlist of the cookie, which restricts the port(s)
 to which a cookie may be sent back in a Cookie header.

 @param ports     a <tt>String</tt> specify the port list, which is
                  comma seperated series of digits
 @see #getPortlist

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.HttpCookie.getPortlist()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the port list attribute of the cookie

 @return  a <tt>String</tt> contains the port list
          or <tt>null</tt> if none
 @see #setPortlist

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.HttpCookie.setDomain(String pattern)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Specifies the domain within which this cookie should be presented.

 <p>The form of the domain name is specified by RFC 2965. A domain
 name begins with a dot (<code>.foo.com</code>) and means that
 the cookie is visible to servers in a specified Domain Name System
 (DNS) zone (for example, <code>www.foo.com</code>, but not 
 <code>a.b.foo.com</code>). By default, cookies are only returned
 to the server that sent them.


 @param pattern		a <code>String</code> containing the domain name
				within which this cookie is visible;
				form is according to RFC 2965

 @see #getDomain


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.HttpCookie.getDomain()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the domain name set for this cookie. The form of 
 the domain name is set by RFC 2965.

 @return			a <code>String</code> containing the domain name

 @see #setDomain


<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.HttpCookie.setMaxAge(long expiry)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the maximum age of the cookie in seconds.

 <p>A positive value indicates that the cookie will expire
 after that many seconds have passed. Note that the value is
 the <i>maximum</i> age when the cookie will expire, not the cookie's
 current age.

 <p>A negative value means
 that the cookie is not stored persistently and will be deleted
 when the Web browser exits. A zero value causes the cookie
 to be deleted.

 @param expiry		an integer specifying the maximum age of the
 				cookie in seconds; if zero, the cookie
                          should be discarded immediately;
                          otherwise, the cookie's max age is unspecified.

 @see #getMaxAge


<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.net.HttpCookie.getMaxAge()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the maximum age of the cookie, specified in seconds.
 By default, <code>-1</code> indicating the cookie will persist
 until browser shutdown.


 @return			an integer specifying the maximum age of the
				cookie in seconds


 @see #setMaxAge


<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.HttpCookie.setPath(String uri)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Specifies a path for the cookie
 to which the client should return the cookie.

 <p>The cookie is visible to all the pages in the directory
 you specify, and all the pages in that directory's subdirectories. 
 A cookie's path must include the servlet that set the cookie,
 for example, <i>/catalog</i>, which makes the cookie
 visible to all directories on the server under <i>/catalog</i>.

 <p>Consult RFC 2965 (available on the Internet) for more
 information on setting path names for cookies.


 @param uri		a <code>String</code> specifying a path


 @see #getPath


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.HttpCookie.getPath()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the path on the server 
 to which the browser returns this cookie. The
 cookie is visible to all subpaths on the server.


 @return		a <code>String</code> specifying a path that contains
			a servlet name, for example, <i>/catalog</i>

 @see #setPath


<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.HttpCookie.setSecure(boolean flag)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates to the browser whether the cookie should only be sent
 using a secure protocol, such as HTTPS or SSL.

 <p>The default value is <code>false</code>.

 @param flag	if <code>true</code>, sends the cookie from the browser
			to the server using only when using a secure protocol;
			if <code>false</code>, sent on any protocol

 @see #getSecure


<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.HttpCookie.getSecure()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <code>true</code> if the browser is sending cookies
 only over a secure protocol, or <code>false</code> if the
 browser can send cookies using any protocol.

 @return		<code>true</code> if the browser can use
			any standard protocol; otherwise, <code>false</code>

 @see #setSecure


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.HttpCookie.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of the cookie. The name cannot be changed after
 creation.

 @return		a <code>String</code> specifying the cookie's name


<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.HttpCookie.setValue(String newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Assigns a new value to a cookie after the cookie is created.
 If you use a binary value, you may want to use BASE64 encoding.

 <p>With Version 0 cookies, values should not contain white 
 space, brackets, parentheses, equals signs, commas,
 double quotes, slashes, question marks, at signs, colons,
 and semicolons. Empty values may not behave the same way
 on all browsers.

 @param newValue		a <code>String</code> specifying the new value 


 @see #getValue


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.HttpCookie.getValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of the cookie.

 @return			a <code>String</code> containing the cookie's
				present value

 @see #setValue


<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.net.HttpCookie.getVersion()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the version of the protocol this cookie complies 
 with. Version 1 complies with RFC 2965/2109, 
 and version 0 complies with the original
 cookie specification drafted by Netscape. Cookies provided
 by a browser use and identify the browser's cookie version.


 @return			0 if the cookie complies with the
				original Netscape specification; 1
				if the cookie complies with RFC 2965/2109

 @see #setVersion


<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.HttpCookie.setVersion(int v)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the version of the cookie protocol this cookie complies
 with. Version 0 complies with the original Netscape cookie
 specification. Version 1 complies with RFC 2965/2109.


 @param v			0 if the cookie should comply with 
				the original Netscape specification;
				1 if the cookie should comply with RFC 2965/2109

 @throws IllegalArgumentException if <tt>v</tt> is neither 0 nor 1

 @see #getVersion


<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.net.HttpCookie.domainMatches(String domain, String host)
<!-- END KEY -->
<!-- BEGIN DATA -->
 The utility method to check whether a host name is in a domain
 or not.

 <p>This concept is described in the cookie specification.
 To understand the concept, some terminologies need to be defined first:
 <blockquote>
 effective host name = hostname if host name contains dot<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or = hostname.local if not
 </blockquote>
 <p>Host A's name domain-matches host B's if:
 <blockquote><ul>
   <li>their host name strings string-compare equal; or</li>
   <li>A is a HDN string and has the form NB, where N is a non-empty
   name string, B has the form .B', and B' is a HDN string.  (So,
   x.y.com domain-matches .Y.com but not Y.com.)</li>
 </ul></blockquote>

 <p>A host isn't in a domain (RFC 2965 sec. 3.3.2) if:
 <blockquote><ul>
   <li>The value for the Domain attribute contains no embedded dots,
   and the value is not .local.</li>
   <li>The effective host name that derives from the request-host does
   not domain-match the Domain attribute.</li>
   <li>The request-host is a HDN (not IP address) and has the form HD,
   where D is the value of the Domain attribute, and H is a string
   that contains one or more dots.</li>
 </ul></blockquote>

 <p>Examples:
 <blockquote><ul>
   <li>A Set-Cookie2 from request-host y.x.foo.com for Domain=.foo.com
   would be rejected, because H is y.x and contains a dot.</li>
   <li>A Set-Cookie2 from request-host x.foo.com for Domain=.foo.com
   would be accepted.</li>
   <li>A Set-Cookie2 with Domain=.com or Domain=.com., will always be
   rejected, because there is no embedded dot.</li>
   <li>A Set-Cookie2 with Domain=ajax.com will be accepted, and the
   value for Domain will be taken to be .ajax.com, because a dot
   gets prepended to the value.</li>
   <li>A Set-Cookie2 from request-host example for Domain=.local will
   be accepted, because the effective host name for the request-
   host is example.local, and example.local domain-matches .local.</li>
 </ul></blockquote>

 @param domain    the domain name to check host name with
 @param host      the host name in question
 @return          <tt>true</tt> if they domain-matches; <tt>false</tt> if not

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.HttpCookie.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a cookie header string representation of this cookie,
 which is in the format defined by corresponding cookie specification,
 but without the leading "Cookie:" token.

 @return  a string form of the cookie. The string has the defined format

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.HttpCookie.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Test the equality of two http cookies.

 <p> The result is <tt>true</tt> only if two cookies
 come from same domain (case-insensitive),
 have same name (case-insensitive),
 and have same path (case-sensitive).

 @return          <tt>true</tt> if 2 http cookies equal to each other;
                  otherwise, <tt>false</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.net.HttpCookie.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return hash code of this http cookie. The result is the sum of
 hash code value of three significant components of this cookie:
 name, domain, and path.
 That is, the hash code is the value of the expression:
 <blockquote>
 getName().toLowerCase().hashCode()<br>
 + getDomain().toLowerCase().hashCode()<br>
 + getPath().hashCode()
 </blockquote>

 @return          this http cookie's hash code

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.net.HttpCookie.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create and return a copy of this object.

 @return          a clone of this http cookie

<!-- END DATA -->
