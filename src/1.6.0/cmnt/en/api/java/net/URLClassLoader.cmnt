<!-- BEGIN KEY -->
public class java.net.URLClassLoader extends java.security.SecureClassLoader
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class loader is used to load classes and resources from a search
 path of URLs referring to both JAR files and directories. Any URL that
 ends with a '/' is assumed to refer to a directory. Otherwise, the URL
 is assumed to refer to a JAR file which will be opened as needed.
 <p>
 The AccessControlContext of the thread that created the instance of
 URLClassLoader will be used when subsequently loading classes and
 resources.
 <p>
 The classes that are loaded are by default granted permission only to
 access the URLs specified when the URLClassLoader was created.

 @author  David Connelly
 @version 1.89, 08/03/06
 @since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URLClassLoader(java.net.URL[] urls, ClassLoader parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new URLClassLoader for the given URLs. The URLs will be
 searched in the order specified for classes and resources after first
 searching in the specified parent class loader. Any URL that ends with
 a '/' is assumed to refer to a directory. Otherwise, the URL is assumed
 to refer to a JAR file which will be downloaded and opened as needed.

 <p>If there is a security manager, this method first
 calls the security manager's <code>checkCreateClassLoader</code> method
 to ensure creation of a class loader is allowed.
 
 @param urls the URLs from which to load classes and resources
 @param parent the parent class loader for delegation
 @exception  SecurityException  if a security manager exists and its  
             <code>checkCreateClassLoader</code> method doesn't allow 
             creation of a class loader.
 @see SecurityManager#checkCreateClassLoader

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URLClassLoader(java.net.URL[] urls)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new URLClassLoader for the specified URLs using the
 default delegation parent <code>ClassLoader</code>. The URLs will
 be searched in the order specified for classes and resources after
 first searching in the parent class loader. Any URL that ends with
 a '/' is assumed to refer to a directory. Otherwise, the URL is
 assumed to refer to a JAR file which will be downloaded and opened
 as needed.

 <p>If there is a security manager, this method first
 calls the security manager's <code>checkCreateClassLoader</code> method
 to ensure creation of a class loader is allowed.
 
 @param urls the URLs from which to load classes and resources

 @exception  SecurityException  if a security manager exists and its  
             <code>checkCreateClassLoader</code> method doesn't allow 
             creation of a class loader.
 @see SecurityManager#checkCreateClassLoader

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URLClassLoader(java.net.URL[] urls, ClassLoader parent, URLStreamHandlerFactory factory)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new URLClassLoader for the specified URLs, parent
 class loader, and URLStreamHandlerFactory. The parent argument
 will be used as the parent class loader for delegation. The
 factory argument will be used as the stream handler factory to
 obtain protocol handlers when creating new jar URLs.

 <p>If there is a security manager, this method first
 calls the security manager's <code>checkCreateClassLoader</code> method
 to ensure creation of a class loader is allowed.

 @param urls the URLs from which to load classes and resources
 @param parent the parent class loader for delegation
 @param factory the URLStreamHandlerFactory to use when creating URLs

 @exception  SecurityException  if a security manager exists and its  
             <code>checkCreateClassLoader</code> method doesn't allow 
             creation of a class loader.
 @see SecurityManager#checkCreateClassLoader

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.net.URLClassLoader.addURL(URL url)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends the specified URL to the list of URLs to search for
 classes and resources.

 @param url the URL to be added to the search path of URLs

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL[] java.net.URLClassLoader.getURLs()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the search path of URLs for loading classes and resources.
 This includes the original list of URLs specified to the constructor,
 along with any URLs subsequently appended by the addURL() method.
 @return the search path of URLs for loading classes and resources.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Class<?> java.net.URLClassLoader.findClass(String name) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Finds and loads the class with the specified name from the URL search
 path. Any URLs referring to JAR files are loaded and opened as needed
 until the class is found.

 @param name the name of the class
 @return the resulting class
 @exception ClassNotFoundException if the class could not be found

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Package java.net.URLClassLoader.definePackage(String name, Manifest man, URL url) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Defines a new package by name in this ClassLoader. The attributes
 contained in the specified Manifest will be used to obtain package
 version and sealing information. For sealed packages, the additional
 URL specifies the code source URL from which the package was loaded.

 @param name  the package name
 @param man   the Manifest containing package version and sealing
              information
 @param url   the code source url for the package, or null if none
 @exception   IllegalArgumentException if the package name duplicates
              an existing package either in this class loader or one
              of its ancestors
 @return the newly defined Package object

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL java.net.URLClassLoader.findResource(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Finds the resource with the specified name on the URL search path.

 @param name the name of the resource
 @return a <code>URL</code> for the resource, or <code>null</code> 
 if the resource could not be found.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<java.net.URL> java.net.URLClassLoader.findResources(String name) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an Enumeration of URLs representing all of the resources
 on the URL search path having the specified name.

 @param name the resource name
 @exception IOException if an I/O exception occurs
 @return an <code>Enumeration</code> of <code>URL</code>s

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.security.PermissionCollection java.net.URLClassLoader.getPermissions(CodeSource codesource)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the permissions for the given codesource object.
 The implementation of this method first calls super.getPermissions
 and then adds permissions based on the URL of the codesource.
 <p>
 If the protocol of this URL is "jar", then the permission granted 
 is based on the permission that is required by the URL of the Jar 
 file.
 <p>
 If the protocol is "file"
 and the path specifies a file, then permission to read that
 file is granted. If protocol is "file" and the path is
 a directory, permission is granted to read all files
 and (recursively) all files and subdirectories contained in
 that directory.
 <p>
 If the protocol is not "file", then
 to connect to and accept connections from the URL's host is granted.
 @param codesource the codesource
 @return the permissions granted to the codesource

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.net.URLClassLoader java.net.URLClassLoader.newInstance(java.net.URL[] urls, ClassLoader parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new instance of URLClassLoader for the specified
 URLs and parent class loader. If a security manager is
 installed, the <code>loadClass</code> method of the URLClassLoader
 returned by this method will invoke the
 <code>SecurityManager.checkPackageAccess</code> method before
 loading the class.

 @param urls the URLs to search for classes and resources
 @param parent the parent class loader for delegation
 @return the resulting class loader

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.net.URLClassLoader java.net.URLClassLoader.newInstance(java.net.URL[] urls)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new instance of URLClassLoader for the specified
 URLs and default parent class loader. If a security manager is
 installed, the <code>loadClass</code> method of the URLClassLoader
 returned by this method will invoke the
 <code>SecurityManager.checkPackageAccess</code> before
 loading the class.

 @param urls the URLs to search for classes and resources
 @return the resulting class loader

<!-- END DATA -->
