<!-- BEGIN KEY -->
public abstract class java.net.HttpURLConnection extends java.net.URLConnection
<!-- END KEY -->
<!-- BEGIN DATA -->
 A URLConnection with support for HTTP-specific features. See
 <A HREF="http://www.w3.org/pub/WWW/Protocols/"> the spec </A> for
 details.
 <p>
 
 Each HttpURLConnection instance is used to make a single request  
 but the underlying network connection to the HTTP server may be
 transparently shared by other instances. Calling the close() methods
 on the InputStream or OutputStream of an HttpURLConnection
 after a request may free network resources associated with this
 instance but has no effect on any shared persistent connection.
 Calling the disconnect() method may close the underlying socket
 if a persistent connection is otherwise idle at that time.
 
 @see     java.net.HttpURLConnection#disconnect()
 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.net.HttpURLConnection.method
<!-- END KEY -->
<!-- BEGIN DATA -->
 The HTTP method (GET,POST,PUT,etc.). 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.net.HttpURLConnection.chunkLength
<!-- END KEY -->
<!-- BEGIN DATA -->

 The chunk-length when using chunked encoding streaming mode for output.
 A value of <code>-1</code> means chunked encoding is disabled for output.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.net.HttpURLConnection.fixedContentLength
<!-- END KEY -->
<!-- BEGIN DATA -->
 The fixed content-length when using fixed-length streaming mode.
 A value of <code>-1</code> means fixed-length streaming mode is disabled
 for output.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.net.HttpURLConnection.responseCode
<!-- END KEY -->
<!-- BEGIN DATA -->
 An <code>int</code> representing the three digit HTTP Status-Code.
 <ul>
 <li> 1xx: Informational
 <li> 2xx: Success
 <li> 3xx: Redirection
 <li> 4xx: Client Error
 <li> 5xx: Server Error
 </ul>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.net.HttpURLConnection.responseMessage
<!-- END KEY -->
<!-- BEGIN DATA -->
 The HTTP response message.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.net.HttpURLConnection.instanceFollowRedirects
<!-- END KEY -->
<!-- BEGIN DATA -->
 If <code>true</code>, the protocol will automatically follow redirects.
 If <code>false</code>, the protocol will not automatically follow 
 redirects.
 <p>
 This field is set by the <code>setInstanceFollowRedirects</code> 
 method. Its value is returned by the <code>getInstanceFollowRedirects</code> 
 method.
 <p>
 Its default value is based on the value of the static followRedirects 
 at HttpURLConnection construction time.

 @see     java.net.HttpURLConnection#setInstanceFollowRedirects(boolean)
 @see     java.net.HttpURLConnection#getInstanceFollowRedirects()
 @see     java.net.HttpURLConnection#setFollowRedirects(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_OK
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 200: OK.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_CREATED
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 201: Created.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_ACCEPTED
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 202: Accepted.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_NOT_AUTHORITATIVE
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 203: Non-Authoritative Information.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_NO_CONTENT
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 204: No Content.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_RESET
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 205: Reset Content.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_PARTIAL
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 206: Partial Content.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_MULT_CHOICE
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 300: Multiple Choices.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_MOVED_PERM
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 301: Moved Permanently.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_MOVED_TEMP
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 302: Temporary Redirect.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_SEE_OTHER
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 303: See Other.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_NOT_MODIFIED
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 304: Not Modified.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_USE_PROXY
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 305: Use Proxy.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_BAD_REQUEST
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 400: Bad Request.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_UNAUTHORIZED
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 401: Unauthorized.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_PAYMENT_REQUIRED
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 402: Payment Required.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_FORBIDDEN
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 403: Forbidden.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_NOT_FOUND
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 404: Not Found.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_BAD_METHOD
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 405: Method Not Allowed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_NOT_ACCEPTABLE
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 406: Not Acceptable.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_PROXY_AUTH
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 407: Proxy Authentication Required.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_CLIENT_TIMEOUT
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 408: Request Time-Out.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_CONFLICT
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 409: Conflict.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_GONE
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 410: Gone.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_LENGTH_REQUIRED
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 411: Length Required.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_PRECON_FAILED
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 412: Precondition Failed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_ENTITY_TOO_LARGE
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 413: Request Entity Too Large.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_REQ_TOO_LONG
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 414: Request-URI Too Large.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_UNSUPPORTED_TYPE
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 415: Unsupported Media Type.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_SERVER_ERROR
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 500: Internal Server Error. 
 @deprecated   it is misplaced and shouldn't have existed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_INTERNAL_ERROR
<!-- END KEY -->
<!-- BEGIN DATA -->

 HTTP Status-Code 500: Internal Server Error. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_NOT_IMPLEMENTED
<!-- END KEY -->
<!-- BEGIN DATA -->

 HTTP Status-Code 501: Not Implemented.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_BAD_GATEWAY
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 502: Bad Gateway.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_UNAVAILABLE
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 503: Service Unavailable.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_GATEWAY_TIMEOUT
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 504: Gateway Timeout.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.net.HttpURLConnection.HTTP_VERSION
<!-- END KEY -->
<!-- BEGIN DATA -->
 HTTP Status-Code 505: HTTP Version Not Supported.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.net.HttpURLConnection(URL u)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructor for the HttpURLConnection.
 @param u the URL

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.HttpURLConnection.getHeaderFieldKey(int n)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the key for the <code>n</code><sup>th</sup> header field.
 Some implementations may treat the <code>0</code><sup>th</sup> 
 header field as special, i.e. as the status line returned by the HTTP
 server. In this case, {@link #getHeaderField(int) getHeaderField(0)} returns the status 
 line, but <code>getHeaderFieldKey(0)</code> returns null.

 @param   n   an index, where n >=0.
 @return  the key for the <code>n</code><sup>th</sup> header field,
          or <code>null</code> if the key does not exist.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.HttpURLConnection.setFixedLengthStreamingMode(int contentLength)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method is used to enable streaming of a HTTP request body
 without internal buffering, when the content length is known in
 advance. 
 <p>
 An exception will be thrown if the application
 attempts to write more data than the indicated
 content-length, or if the application closes the OutputStream
 before writing the indicated amount.
 <p>
 When output streaming is enabled, authentication
 and redirection cannot be handled automatically.
 A HttpRetryException will be thrown when reading
 the response if authentication or redirection are required.
 This exception can be queried for the details of the error.
 <p>
 This method must be called before the URLConnection is connected.

 @param   contentLength The number of bytes which will be written
		to the OutputStream.

 @throws  IllegalStateException if URLConnection is already connected 
		or if a different streaming mode is already enabled.

 @throws  IllegalArgumentException if a content length less than 
		zero is specified.

 @see     #setChunkedStreamingMode(int)
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.HttpURLConnection.setChunkedStreamingMode(int chunklen)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method is used to enable streaming of a HTTP request body
 without internal buffering, when the content length is <b>not</b>
 known in advance. In this mode, chunked transfer encoding 
 is used to send the request body. Note, not all HTTP servers
 support this mode.
 <p>
 When output streaming is enabled, authentication
 and redirection cannot be handled automatically.
 A HttpRetryException will be thrown when reading
 the response if authentication or redirection are required.
 This exception can be queried for the details of the error.
 <p>
 This method must be called before the URLConnection is connected.

 @param   chunklen The number of bytes to write in each chunk.
		If chunklen is less than or equal to zero, a default 
		value will be used.

 @throws  IllegalStateException if URLConnection is already connected 
		or if a different streaming mode is already enabled.

 @see     #setFixedLengthStreamingMode(int)
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.HttpURLConnection.getHeaderField(int n)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value for the <code>n</code><sup>th</sup> header field. 
 Some implementations may treat the <code>0</code><sup>th</sup> 
 header field as special, i.e. as the status line returned by the HTTP
 server. 
 <p>
 This method can be used in conjunction with the 
 {@link #getHeaderFieldKey getHeaderFieldKey} method to iterate through all 
 the headers in the message. 

 @param   n   an index, where n>=0.
 @return  the value of the <code>n</code><sup>th</sup> header field,
		or <code>null</code> if the value does not exist.
 @see     java.net.HttpURLConnection#getHeaderFieldKey(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.net.HttpURLConnection.setFollowRedirects(boolean set)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets whether HTTP redirects  (requests with response code 3xx) should 
 be automatically followed by this class.  True by default.  Applets
 cannot change this variable.
 <p>
 If there is a security manager, this method first calls
 the security manager's <code>checkSetFactory</code> method 
 to ensure the operation is allowed. 
 This could result in a SecurityException.
 
 @param set a <code>boolean</code> indicating whether or not
 to follow HTTP redirects.
 @exception  SecurityException  if a security manager exists and its  
             <code>checkSetFactory</code> method doesn't 
             allow the operation.
 @see        SecurityManager#checkSetFactory
 @see #getFollowRedirects()

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.net.HttpURLConnection.getFollowRedirects()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>boolean</code> indicating
 whether or not HTTP redirects (3xx) should
 be automatically followed.

 @return <code>true</code> if HTTP redirects should
 be automatically followed, <tt>false</tt> if not.
 @see #setFollowRedirects(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.HttpURLConnection.setInstanceFollowRedirects(boolean followRedirects)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets whether HTTP redirects (requests with response code 3xx) should
 be automatically followed by this <code>HttpURLConnection</code> 
 instance.
 <p>
 The default value comes from followRedirects, which defaults to
 true.

 @param followRedirects a <code>boolean</code> indicating 
 whether or not to follow HTTP redirects.

 @see    java.net.HttpURLConnection#instanceFollowRedirects
 @see #getInstanceFollowRedirects
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.HttpURLConnection.getInstanceFollowRedirects()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of this <code>HttpURLConnection</code>'s
 <code>instanceFollowRedirects</code> field.

 @return  the value of this <code>HttpURLConnection</code>'s
          <code>instanceFollowRedirects</code> field.
 @see     java.net.HttpURLConnection#instanceFollowRedirects
 @see #setInstanceFollowRedirects(boolean)
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.HttpURLConnection.setRequestMethod(String method) throws java.net.ProtocolException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the method for the URL request, one of:
 <UL>
  <LI>GET
  <LI>POST
  <LI>HEAD
  <LI>OPTIONS
  <LI>PUT
  <LI>DELETE
  <LI>TRACE
 </UL> are legal, subject to protocol restrictions.  The default
 method is GET.
 
 @param method the HTTP method
 @exception ProtocolException if the method cannot be reset or if
              the requested method isn't valid for HTTP.
 @see #getRequestMethod()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.HttpURLConnection.getRequestMethod()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the request method.
 @return the HTTP request method
 @see #setRequestMethod(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.net.HttpURLConnection.getResponseCode() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the status code from an HTTP response message.
 For example, in the case of the following status lines:
 <PRE>
 HTTP/1.0 200 OK
 HTTP/1.0 401 Unauthorized
 </PRE>
 It will return 200 and 401 respectively.
 Returns -1 if no code can be discerned
 from the response (i.e., the response is not valid HTTP).
 @throws IOException if an error occurred connecting to the server.
 @return the HTTP Status-Code, or -1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.HttpURLConnection.getResponseMessage() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the HTTP response message, if any, returned along with the
 response code from a server.  From responses like:
 <PRE>
 HTTP/1.0 200 OK
 HTTP/1.0 404 Not Found
 </PRE>
 Extracts the Strings "OK" and "Not Found" respectively.
 Returns null if none could be discerned from the responses 
 (the result was not valid HTTP).
 @throws IOException if an error occurred connecting to the server.
 @return the HTTP response message, or <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.net.HttpURLConnection.disconnect()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates that other requests to the server
 are unlikely in the near future. Calling disconnect() 
 should not imply that this HttpURLConnection 
 instance can be reused for other requests.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.net.HttpURLConnection.usingProxy()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates if the connection is going through a proxy.
 @return a boolean indicating if the connection is
 using a proxy.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream java.net.HttpURLConnection.getErrorStream()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the error stream if the connection failed
 but the server sent useful data nonetheless. The
 typical example is when an HTTP server responds
 with a 404, which will cause a FileNotFoundException 
 to be thrown in connect, but the server sent an HTML
 help page with suggestions as to what to do.

 <p>This method will not cause a connection to be initiated.  If
 the connection was not connected, or if the server did not have
 an error while connecting or if the server had an error but
 no error data was sent, this method will return null. This is
 the default.

 @return an error stream if any, null if there have been no
 errors, the connection is not connected or the server sent no
 useful data.

<!-- END DATA -->
