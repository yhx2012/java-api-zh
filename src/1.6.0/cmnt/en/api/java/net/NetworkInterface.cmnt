<!-- BEGIN KEY -->
public final class java.net.NetworkInterface extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class represents a Network Interface made up of a name, 
 and a list of IP addresses assigned to this interface.
 It is used to identify the local interface on which a multicast group
 is joined. 

 Interfaces are normally known by names such as "le0".

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.NetworkInterface.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the name of this network interface.

 @return the name of this network interface

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<java.net.InetAddress> java.net.NetworkInterface.getInetAddresses()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convenience method to return an Enumeration with all or a
 subset of the InetAddresses bound to this network interface.
 <p>
 If there is a security manager, its <code>checkConnect</code> 
 method is called for each InetAddress. Only InetAddresses where
 the <code>checkConnect</code> doesn't throw a SecurityException
 will be returned in the Enumeration.
 @return an Enumeration object with all or a subset of the InetAddresses
 bound to this network interface

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.net.InterfaceAddress> java.net.NetworkInterface.getInterfaceAddresses()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get a List of all or a subset of the <code>InterfaceAddresses</code>
 of this network interface.
 <p>
 If there is a security manager, its <code>checkConnect</code> 
 method is called with the InetAddress for each InterfaceAddress.
 Only InterfaceAddresses where the <code>checkConnect</code> doesn't throw
 a SecurityException will be returned in the List.

 @return a <code>List</code> object with all or a subset of the
	       InterfaceAddresss of this network interface
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<java.net.NetworkInterface> java.net.NetworkInterface.getSubInterfaces()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get an Enumeration with all the subinterfaces (also known as virtual
 interfaces) attached to this network interface.
 <p>
 For instance eth0:1 will be a subinterface to eth0.

 @return an Enumeration object with all of the subinterfaces
 of this network interface
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.NetworkInterface java.net.NetworkInterface.getParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the parent NetworkInterface of this interface if this is
 a subinterface, or <code>null</code> if it is a physical
 (non virtual) interface or has no parent.

 @return The <code>NetworkInterface</code> this interface is attached to.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.NetworkInterface.getDisplayName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the display name of this network interface.
 A display name is a human readable String describing the network
 device.

 @return the display name of this network interface, 
         or null if no display name is available.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.net.NetworkInterface java.net.NetworkInterface.getByName(String name) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches for the network interface with the specified name.

 @param   name 
		The name of the network interface.

 @return  A <tt>NetworkInterface</tt> with the specified name,
          or <tt>null</tt> if there is no network interface
		with the specified name.

 @throws	SocketException  
	        If an I/O error occurs.

 @throws  NullPointerException
		If the specified name is <tt>null</tt>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.net.NetworkInterface java.net.NetworkInterface.getByInetAddress(InetAddress addr) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convenience method to search for a network interface that
 has the specified Internet Protocol (IP) address bound to
 it.
 <p>
 If the specified IP address is bound to multiple network 
 interfaces it is not defined which network interface is
 returned.

 @param   addr
		The <tt>InetAddress</tt> to search with.

 @return  A <tt>NetworkInterface</tt> 
          or <tt>null</tt> if there is no network interface
          with the specified IP address.

 @throws  SocketException  
          If an I/O error occurs. 

 @throws  NullPointerException
          If the specified address is <tt>null</tt>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Enumeration<java.net.NetworkInterface> java.net.NetworkInterface.getNetworkInterfaces() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns all the interfaces on this machine. Returns null if no
 network interfaces could be found on this machine.
 
 NOTE: can use getNetworkInterfaces()+getInetAddresses() 
       to obtain all IP addresses for this node

 @return an Enumeration of NetworkInterfaces found on this machine
 @exception  SocketException  if an I/O error occurs.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.NetworkInterface.isUp() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether a network interface is up and running.

 @return	<code>true</code> if the interface is up and running.
 @exception	SocketException if an I/O error occurs.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.NetworkInterface.isLoopback() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether a network interface is a loopback interface.

 @return	<code>true</code> if the interface is a loopback interface.
 @exception	SocketException if an I/O error occurs.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.NetworkInterface.isPointToPoint() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether a network interface is a point to point interface.
 A typical point to point interface would be a PPP connection through
 a modem.

 @return	<code>true</code> if the interface is a point to point
		interface.
 @exception	SocketException if an I/O error occurs.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.NetworkInterface.supportsMulticast() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether a network interface supports multicasting or not.

 @return	<code>true</code> if the interface supports Multicasting.
 @exception	SocketException if an I/O error occurs.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] java.net.NetworkInterface.getHardwareAddress() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the hardware address (usually MAC) of the interface if it
 has one and if it can be accessed given the current privileges.

 @return	a byte array containing the address or <code>null</code> if
		the address doesn't exist or is not accessible.
 @exception	SocketException if an I/O error occurs.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.net.NetworkInterface.getMTU() throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the Maximum Transmission Unit (MTU) of this interface.
 
 @return the value of the MTU for that interface.
 @exception	SocketException if an I/O error occurs.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.NetworkInterface.isVirtual()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether this interface is a virtual interface (also called
 subinterface).
 Virtual interfaces are, on some systems, interfaces created as a child
 of a physical interface and given different settings (like address or
 MTU). Usually the name of the interface will the name of the parent
 followed by a colon (:) and a number identifying the child since there
 can be several virtual interfaces attached to a single physical
 interface.

 @return <code>true</code> if this interface is a virtual interface.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.NetworkInterface.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares this object against the specified object.
 The result is <code>true</code> if and only if the argument is
 not <code>null</code> and it represents the same NetworkInterface
 as this object.
 <p>
 Two instances of <code>NetworkInterface</code> represent the same 
 NetworkInterface if both name and addrs are the same for both.

 @param   obj   the object to compare against.
 @return  <code>true</code> if the objects are the same;
          <code>false</code> otherwise.
 @see     java.net.InetAddress#getAddress()

<!-- END DATA -->
