<!-- BEGIN KEY -->
public final class java.net.DatagramPacket extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class represents a datagram packet. 
 <p>
 Datagram packets are used to implement a connectionless packet 
 delivery service. Each message is routed from one machine to 
 another based solely on information contained within that packet. 
 Multiple packets sent from one machine to another might be routed 
 differently, and might arrive in any order. Packet delivery is
 not guaranteed.

 @author  Pavani Diwanji
 @author  Benjamin Renaud
 @version 1.46, 04/07/06
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.DatagramPacket(byte[] buf, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>DatagramPacket</code> for receiving packets of 
 length <code>length</code>, specifying an offset into the buffer.
 <p>
 The <code>length</code> argument must be less than or equal to 
 <code>buf.length</code>. 

 @param   buf      buffer for holding the incoming datagram.
 @param   offset   the offset for the buffer
 @param   length   the number of bytes to read.

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.DatagramPacket(byte[] buf, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>DatagramPacket</code> for receiving packets of 
 length <code>length</code>. 
 <p>
 The <code>length</code> argument must be less than or equal to 
 <code>buf.length</code>. 

 @param   buf      buffer for holding the incoming datagram.
 @param   length   the number of bytes to read.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.DatagramPacket(byte[] buf, int offset, int length, InetAddress address, int port)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a datagram packet for sending packets of length
 <code>length</code> with offset <code>ioffset</code>to the
 specified port number on the specified host. The
 <code>length</code> argument must be less than or equal to
 <code>buf.length</code>.

 @param   buf      the packet data.
 @param   offset   the packet data offset.
 @param   length   the packet data length.
 @param   address  the destination address.
 @param   port     the destination port number.
 @see java.net.InetAddress

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.DatagramPacket(byte[] buf, int offset, int length, SocketAddress address) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a datagram packet for sending packets of length
 <code>length</code> with offset <code>ioffset</code>to the
 specified port number on the specified host. The
 <code>length</code> argument must be less than or equal to
 <code>buf.length</code>.

 @param   buf      the packet data.
 @param   offset   the packet data offset.
 @param   length   the packet data length.
 @param   address  the destination socket address.
 @throws  IllegalArgumentException if address type is not supported
 @see java.net.InetAddress

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.DatagramPacket(byte[] buf, int length, InetAddress address, int port)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a datagram packet for sending packets of length 
 <code>length</code> to the specified port number on the specified 
 host. The <code>length</code> argument must be less than or equal 
 to <code>buf.length</code>. 

 @param   buf      the packet data.
 @param   length   the packet length.
 @param   address  the destination address.
 @param   port     the destination port number.
 @see     java.net.InetAddress

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.DatagramPacket(byte[] buf, int length, SocketAddress address) throws java.net.SocketException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a datagram packet for sending packets of length 
 <code>length</code> to the specified port number on the specified 
 host. The <code>length</code> argument must be less than or equal 
 to <code>buf.length</code>. 

 @param   buf      the packet data.
 @param   length   the packet length.
 @param   address  the destination address.
 @throws  IllegalArgumentException if address type is not supported
 @since 1.4
 @see     java.net.InetAddress

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.net.InetAddress java.net.DatagramPacket.getAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the IP address of the machine to which this datagram is being
 sent or from which the datagram was received.

 @return  the IP address of the machine to which this datagram is being
          sent or from which the datagram was received.
 @see     java.net.InetAddress
 @see #setAddress(java.net.InetAddress)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.net.DatagramPacket.getPort()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the port number on the remote host to which this datagram is
 being sent or from which the datagram was received.

 @return  the port number on the remote host to which this datagram is
          being sent or from which the datagram was received.
 @see #setPort(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized byte[] java.net.DatagramPacket.getData()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the data buffer. The data received or the data to be sent
 starts from the <code>offset</code> in the buffer, 
 and runs for <code>length</code> long.

 @return  the buffer used to receive or  send data
 @see #setData(byte[], int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.net.DatagramPacket.getOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the offset of the data to be sent or the offset of the
 data received.

 @return  the offset of the data to be sent or the offset of the
          data received.

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.net.DatagramPacket.getLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the length of the data to be sent or the length of the
 data received.

 @return  the length of the data to be sent or the length of the
          data received.
 @see #setLength(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.net.DatagramPacket.setData(byte[] buf, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Set the data buffer for this packet. This sets the
 data, length and offset of the packet.

 @param buf the buffer to set for this packet

 @param offset the offset into the data

 @param length the length of the data 
       and/or the length of the buffer used to receive data

 @exception NullPointerException if the argument is null

 @see #getData
 @see #getOffset
 @see #getLength

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.net.DatagramPacket.setAddress(InetAddress iaddr)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the IP address of the machine to which this datagram
 is being sent.
 @param iaddr the <code>InetAddress</code>
 @since   JDK1.1
 @see #getAddress()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.net.DatagramPacket.setPort(int iport)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the port number on the remote host to which this datagram
 is being sent.
 @param iport the port number
 @since   JDK1.1
 @see #getPort()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.net.DatagramPacket.setSocketAddress(SocketAddress address)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the SocketAddress (usually IP address + port number) of the remote
 host to which this datagram is being sent.

 @param address the <code>SocketAddress</code>
 @throws  IllegalArgumentException if address is null or is a
          SocketAddress subclass not supported by this socket
 
 @since 1.4
 @see #getSocketAddress

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.net.SocketAddress java.net.DatagramPacket.getSocketAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the SocketAddress (usually IP address + port number) of the remote
 host that this packet is being sent to or is coming from.

 @return the <code>SocketAddress</code>
 @since 1.4
 @see #setSocketAddress

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.net.DatagramPacket.setData(byte[] buf)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Set the data buffer for this packet. With the offset of 
 this DatagramPacket set to 0, and the length set to
 the length of <code>buf</code>.

 @param buf the buffer to set for this packet.

 @exception NullPointerException if the argument is null.

 @see #getLength
 @see #getData

 @since JDK1.1 

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.net.DatagramPacket.setLength(int length)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Set the length for this packet. The length of the packet is
 the number of bytes from the packet's data buffer that will be
 sent, or the number of bytes of the packet's data buffer that
 will be used for receiving data. The length must be lesser or
 equal to the offset plus the length of the packet's buffer.

 @param length the length to set for this packet.
 
 @exception IllegalArgumentException if the length is negative
 of if the length is greater than the packet's data buffer
 length.

 @see #getLength
 @see #setData

 @since JDK1.1 

<!-- END DATA -->
