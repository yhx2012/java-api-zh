<!-- BEGIN KEY -->
public abstract class java.net.SocketImpl extends java.lang.Object implements java.net.SocketOptions
<!-- END KEY -->
<!-- BEGIN DATA -->
 The abstract class <code>SocketImpl</code> is a common superclass 
 of all classes that actually implement sockets. It is used to 
 create both client and server sockets. 
 <p>
 A "plain" socket implements these methods exactly as 
 described, without attempting to go through a firewall or proxy. 

 @author  unascribed
 @version 1.44, 04/07/06
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.io.FileDescriptor java.net.SocketImpl.fd
<!-- END KEY -->
<!-- BEGIN DATA -->
 The file descriptor object for this socket. 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.net.InetAddress java.net.SocketImpl.address
<!-- END KEY -->
<!-- BEGIN DATA -->
 The IP address of the remote end of this socket. 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.net.SocketImpl.port
<!-- END KEY -->
<!-- BEGIN DATA -->
 The port number on the remote host to which this socket is connected. 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.net.SocketImpl.localport
<!-- END KEY -->
<!-- BEGIN DATA -->
 The local port number to which this socket is connected. 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.SocketImpl.create(boolean stream) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates either a stream or a datagram socket. 

 @param      stream   if <code>true</code>, create a stream socket;
                      otherwise, create a datagram socket.
 @exception  IOException  if an I/O error occurs while creating the
               socket.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.SocketImpl.connect(String host, int port) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Connects this socket to the specified port on the named host. 

 @param      host   the name of the remote host.
 @param      port   the port number.
 @exception  IOException  if an I/O error occurs when connecting to the
               remote host.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.SocketImpl.connect(InetAddress address, int port) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Connects this socket to the specified port number on the specified host.

 @param      address   the IP address of the remote host.
 @param      port      the port number.
 @exception  IOException  if an I/O error occurs when attempting a
               connection.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.SocketImpl.connect(SocketAddress address, int timeout) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Connects this socket to the specified port number on the specified host.
 A timeout of zero is interpreted as an infinite timeout. The connection
 will then block until established or an error occurs.

 @param      address   the Socket address of the remote host.
 @param	  timeout  the timeout value, in milliseconds, or zero for no timeout.
 @exception  IOException  if an I/O error occurs when attempting a
               connection.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.SocketImpl.bind(InetAddress host, int port) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Binds this socket to the specified local IP address and port number.

 @param      host   an IP address that belongs to a local interface.
 @param      port   the port number.
 @exception  IOException  if an I/O error occurs when binding this socket.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.SocketImpl.listen(int backlog) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the maximum queue length for incoming connection indications 
 (a request to connect) to the <code>count</code> argument. If a 
 connection indication arrives when the queue is full, the 
 connection is refused. 

 @param      backlog   the maximum length of the queue.
 @exception  IOException  if an I/O error occurs when creating the queue.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.SocketImpl.accept(SocketImpl s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Accepts a connection. 

 @param      s   the accepted connection.
 @exception  IOException  if an I/O error occurs when accepting the
               connection.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract java.io.InputStream java.net.SocketImpl.getInputStream() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an input stream for this socket.

 @return     a stream for reading from this socket.
 @exception  IOException  if an I/O error occurs when creating the
               input stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract java.io.OutputStream java.net.SocketImpl.getOutputStream() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an output stream for this socket.

 @return     an output stream for writing to this socket.
 @exception  IOException  if an I/O error occurs when creating the
               output stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract int java.net.SocketImpl.available() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of bytes that can be read from this socket
 without blocking.

 @return     the number of bytes that can be read from this socket
             without blocking.
 @exception  IOException  if an I/O error occurs when determining the
               number of bytes available.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.SocketImpl.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Closes this socket. 

 @exception  IOException  if an I/O error occurs when closing this socket.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.net.SocketImpl.shutdownInput() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Places the input stream for this socket at "end of stream".
 Any data sent to this socket is acknowledged and then
 silently discarded.

 If you read from a socket input stream after invoking 
 shutdownInput() on the socket, the stream will return EOF.

 @exception IOException if an I/O error occurs when shutting down this
 socket.
 @see java.net.Socket#shutdownOutput()
 @see java.net.Socket#close()
 @see java.net.Socket#setSoLinger(boolean, int)
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.net.SocketImpl.shutdownOutput() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Disables the output stream for this socket.
 For a TCP socket, any previously written data will be sent
 followed by TCP's normal connection termination sequence.

 If you write to a socket output stream after invoking 
 shutdownOutput() on the socket, the stream will throw 
 an IOException.

 @exception IOException if an I/O error occurs when shutting down this
 socket.
 @see java.net.Socket#shutdownInput()
 @see java.net.Socket#close()
 @see java.net.Socket#setSoLinger(boolean, int)
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.io.FileDescriptor java.net.SocketImpl.getFileDescriptor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of this socket's <code>fd</code> field.

 @return  the value of this socket's <code>fd</code> field.
 @see     java.net.SocketImpl#fd

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.net.InetAddress java.net.SocketImpl.getInetAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of this socket's <code>address</code> field.

 @return  the value of this socket's <code>address</code> field.
 @see     java.net.SocketImpl#address

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.net.SocketImpl.getPort()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of this socket's <code>port</code> field.

 @return  the value of this socket's <code>port</code> field.
 @see     java.net.SocketImpl#port

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.net.SocketImpl.supportsUrgentData()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether or not this SocketImpl supports sending 
 urgent data. By default, false is returned
 unless the method is overridden in a sub-class

 @return  true if urgent data supported
 @see     java.net.SocketImpl#address
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract void java.net.SocketImpl.sendUrgentData(int data) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Send one byte of urgent data on the socket.
 The byte to be sent is the low eight bits of the parameter
 @param data The byte of data to send
 @exception IOException if there is an error
  sending the data.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.net.SocketImpl.getLocalPort()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of this socket's <code>localport</code> field.

 @return  the value of this socket's <code>localport</code> field.
 @see     java.net.SocketImpl#localport

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.SocketImpl.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the address and port of this socket as a <code>String</code>.

 @return  a string representation of this socket.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.net.SocketImpl.setPerformancePreferences(int connectionTime, int latency, int bandwidth)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets performance preferences for this socket.

 <p> Sockets use the TCP/IP protocol by default.  Some implementations
 may offer alternative protocols which have different performance
 characteristics than TCP/IP.  This method allows the application to
 express its own preferences as to how these tradeoffs should be made
 when the implementation chooses from the available protocols.

 <p> Performance preferences are described by three integers
 whose values indicate the relative importance of short connection time,
 low latency, and high bandwidth.  The absolute values of the integers
 are irrelevant; in order to choose a protocol the values are simply
 compared, with larger values indicating stronger preferences. Negative
 values represent a lower priority than positive values. If the
 application prefers short connection time over both low latency and high
 bandwidth, for example, then it could invoke this method with the values
 <tt>(1, 0, 0)</tt>.  If the application prefers high bandwidth above low
 latency, and low latency above short connection time, then it could
 invoke this method with the values <tt>(0, 1, 2)</tt>.

 By default, this method does nothing, unless it is overridden in a
 a sub-class.

 @param  connectionTime
         An <tt>int</tt> expressing the relative importance of a short
         connection time

 @param  latency
         An <tt>int</tt> expressing the relative importance of low
         latency

 @param  bandwidth
         An <tt>int</tt> expressing the relative importance of high
         bandwidth
  
 @since 1.5

<!-- END DATA -->
