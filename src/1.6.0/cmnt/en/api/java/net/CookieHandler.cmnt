<!-- BEGIN KEY -->
public abstract class java.net.CookieHandler extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 A CookieHandler object provides a callback mechanism to hook up a
 HTTP state management policy implementation into the HTTP protocol
 handler. The HTTP state management mechanism specifies a way to
 create a stateful session with HTTP requests and responses.

 <p>A system-wide CookieHandler that to used by the HTTP protocol
 handler can be registered by doing a
 CookieHandler.setDefault(CookieHandler). The currently registered
 CookieHandler can be retrieved by calling
 CookieHandler.getDefault().

 For more information on HTTP state management, see <a
 href="http://www.ietf.org/rfc/rfc2965.txt""><i>RFC&nbsp;2965: HTTP
 State Management Mechanism</i></a>

 @version 1.4, 03/08/09
 @author Yingxian Wang
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.net.CookieHandler java.net.CookieHandler.getDefault()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the system-wide cookie handler.

 @return the system-wide cookie handler; A null return means
        there is no system-wide cookie handler currently set.
 @throws SecurityException
       If a security manager has been installed and it denies
 {@link NetPermission}<tt>("getCookieHandler")</tt>
 @see #setDefault(CookieHandler)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized void java.net.CookieHandler.setDefault(CookieHandler cHandler)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets (or unsets) the system-wide cookie handler.
 
 Note: non-standard http protocol handlers may ignore this setting.

 @param cHandler The HTTP cookie handler, or
       <code>null</code> to unset.
 @throws SecurityException
       If a security manager has been installed and it denies
 {@link NetPermission}<tt>("setCookieHandler")</tt>
 @see #getDefault()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Map<java.lang.String, java.util.List<java.lang.String>> java.net.CookieHandler.get(URI uri, java.util.Map<java.lang.String, java.util.List<java.lang.String>> requestHeaders) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets all the applicable cookies from a cookie cache for the
 specified uri in the request header.

 HTTP protocol implementers should make sure that this method is
 called after all request headers related to choosing cookies
 are added, and before the request is sent.

 @param uri a <code>URI</code> to send cookies to in a request
 @param requestHeaders - a Map from request header
            field names to lists of field values representing
            the current request headers
 @return an immutable map from state management headers, with
            field names "Cookie" or "Cookie2" to a list of
            cookies containing state information

 @throws IOException if an I/O error occurs
 @throws IllegalArgumentException if either argument is null
 @see #put(URI, Map)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.net.CookieHandler.put(URI uri, java.util.Map<java.lang.String, java.util.List<java.lang.String>> responseHeaders) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets all the applicable cookies, examples are response header
 fields that are named Set-Cookie2, present in the response
 headers into a cookie cache.

 @param uri a <code>URI</code> where the cookies come from
 @param responseHeaders an immutable map from field names to
            lists of field values representing the response
            header fields returned
 @throws	IOException if an I/O error occurs 
 @throws  IllegalArgumentException if either argument is null
 @see #get(URI, Map)

<!-- END DATA -->
