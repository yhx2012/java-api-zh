<!-- BEGIN KEY -->
public class java.net.InterfaceAddress extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class represents a Network Interface address. In short it's an
 IP address, a subnet mask and a broadcast address when the address is
 an IPv4 one. An IP address and a network prefix length in the case
 of IPv6 address.

 @see java.net.NetworkInterface
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.InetAddress java.net.InterfaceAddress.getAddress()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an <code>InetAddress</code> for this address.

 @return the <code>InetAddress</code> for this address.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.InetAddress java.net.InterfaceAddress.getBroadcast()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an <code>InetAddress</code> for the brodcast address
 for this InterfaceAddress.
 <p>
 Only IPv4 networks have broadcast address therefore, in the case
 of an IPv6 network, <code>null</code> will be returned.

 @return the <code>InetAddress</code> representing the broadcast
         address or <code>null</code> if there is no broadcast address.

<!-- END DATA -->
<!-- BEGIN KEY -->
public short java.net.InterfaceAddress.getNetworkPrefixLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the network prefix length for this address. This is also known
 as the subnet mask in the context of IPv4 addresses.
 Typical IPv4 values would be 8 (255.0.0.0), 16 (255.255.0.0)
 or 24 (255.255.255.0). <p>
 Typical IPv6 values would be 128 (::1/128) or 10 (fe80::203:baff:fe27:1243/10)

 @return a <code>short</code> representing the prefix length for the
	       subnet of that address.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.InterfaceAddress.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares this object against the specified object.
 The result is <code>true</code> if and only if the argument is
 not <code>null</code> and it represents the same interface address as
 this object.
 <p>
 Two instances of <code>InterfaceAddress</code> represent the same
 address if the InetAddress, the prefix length and the broadcast are
 the same for both.

 @param   obj   the object to compare against.
 @return  <code>true</code> if the objects are the same;
          <code>false</code> otherwise.
 @see     java.net.InterfaceAddress#hashCode()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.net.InterfaceAddress.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hashcode for this Interface address.

 @return  a hash code value for this Interface address.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.net.InterfaceAddress.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Converts this Interface address to a <code>String</code>. The 
 string returned is of the form: InetAddress / prefix length [ broadcast address ].

 @return  a string representation of this Interface address.

<!-- END DATA -->
