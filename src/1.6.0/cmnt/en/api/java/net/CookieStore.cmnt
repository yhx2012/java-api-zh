<!-- BEGIN KEY -->
public interface java.net.CookieStore
<!-- END KEY -->
<!-- BEGIN DATA -->
 A CookieStore object represents a storage for cookie. Can store and retrieve
 cookies.

 <p>{@link CookieManager} will call <tt>CookieStore.add</tt> to save cookies
 for every incoming HTTP response, and call <tt>CookieStore.get</tt> to
 retrieve cookie for every outgoing HTTP request. A CookieStore
 is responsible for removing HttpCookie instances which have expired.

 @version 1.3, 05/11/17
 @author Edward Wang
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.net.CookieStore.add(URI uri, HttpCookie cookie)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds one HTTP cookie to the store. This is called for every
 incoming HTTP response.

 <p>A cookie to store may or may not be associated with an URI. If it
 is not associated with an URI, the cookie's domain and path attribute
 will indicate where it comes from. If it is associated with an URI and
 its domain and path attribute are not speicifed, given URI will indicate
 where this cookie comes from.

 <p>If a cookie corresponding to the given URI already exists,
 then it is replaced with the new one.

 @param uri       the uri this cookie associated with.
                  if <tt>null</tt>, this cookie will not be associated
                  with an URI
 @param cookie    the cookie to store

 @throws NullPointerException if <tt>cookie</tt> is <tt>null</tt>

 @see #get


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.net.HttpCookie> java.net.CookieStore.get(URI uri)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieve cookies associated with given URI, or whose domain matches the
 given URI. Only cookies that have not expired are returned.
 This is called for every outgoing HTTP request.

 @return          an immutable list of HttpCookie,
                  return empty list if no cookies match the given URI

 @throws NullPointerException if <tt>uri</tt> is <tt>null</tt>

 @see #add


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.net.HttpCookie> java.net.CookieStore.getCookies()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get all not-expired cookies in cookie store.

 @return          an immutable list of http cookies;
                  return empty list if there's no http cookie in store

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.net.URI> java.net.CookieStore.getURIs()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get all URIs which identify the cookies in this cookie store.

 @return          an immutable list of URIs;
                  return empty list if no cookie in this cookie store
                  is associated with an URI

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.CookieStore.remove(URI uri, HttpCookie cookie)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Remove a cookie from store.

 @param uri       the uri this cookie associated with.
                  if <tt>null</tt>, the cookie to be removed is not associated
                  with an URI when added; if not <tt>null</tt>, the cookie
                  to be removed is associated with the given URI when added.
 @param cookie    the cookie to remove

 @return          <tt>true</tt> if this store contained the specified cookie

 @throws NullPointerException if <tt>cookie</tt> is <tt>null</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.net.CookieStore.removeAll()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Remove all cookies in this cookie store.

 @return          <tt>true</tt> if this store changed as a result of the call

<!-- END DATA -->
