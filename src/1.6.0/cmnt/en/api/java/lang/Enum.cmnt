<!-- BEGIN KEY -->
public abstract class java.lang.Enum extends java.lang.Object implements java.lang.Comparable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 This is the common base class of all Java language enumeration types.

 @author  Josh Bloch
 @author  Neal Gafter
 @version 1.15, 01/27/06
 @since   1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.String java.lang.Enum.name
<!-- END KEY -->
<!-- BEGIN DATA -->
 The name of this enum constant, as declared in the enum declaration.
 Most programmers should use the {@link #toString} method rather than
 accessing this field.

<!-- END DATA -->
<!-- BEGIN KEY -->
private final int java.lang.Enum.ordinal
<!-- END KEY -->
<!-- BEGIN DATA -->
 The ordinal of this enumeration constant (its position
 in the enum declaration, where the initial constant is assigned
 an ordinal of zero).
 
 Most programmers will have no use for this field.  It is designed
 for use by sophisticated enum-based data structures, such as
 {@link java.util.EnumSet} and {@link java.util.EnumMap}.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.Enum(String name, int ordinal)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sole constructor.  Programmers cannot invoke this constructor.
 It is for use by code emitted by the compiler in response to
 enum type declarations.

 @param name - The name of this enum constant, which is the identifier
               used to declare it.
 @param ordinal - The ordinal of this enumeration constant (its position
         in the enum declaration, where the initial constant is assigned
         an ordinal of zero).

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.lang.Enum.name()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of this enum constant, exactly as declared in its
 enum declaration.
 
 <b>Most programmers should use the {@link #toString} method in
 preference to this one, as the toString method may return
 a more user-friendly name.</b>  This method is designed primarily for
 use in specialized situations where correctness depends on getting the
 exact name, which will not vary from release to release.

 @return the name of this enum constant

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.lang.Enum.ordinal()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the ordinal of this enumeration constant (its position
 in its enum declaration, where the initial constant is assigned
 an ordinal of zero).
 
 Most programmers will have no use for this method.  It is
 designed for use by sophisticated enum-based data structures, such
 as {@link java.util.EnumSet} and {@link java.util.EnumMap}.

 @return the ordinal of this enumeration constant

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.Enum.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of this enum constant, as contained in the
 declaration.  This method may be overridden, though it typically
 isn't necessary or desirable.  An enum type should override this
 method when a more "programmer-friendly" string form exists.

 @return the name of this enum constant

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.lang.Enum.equals(Object other)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the specified object is equal to this
 enum constant.

 @param other the object to be compared for equality with this object.
 @return  true if the specified object is equal to this
          enum constant.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.lang.Enum.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hash code for this enum constant.

 @return a hash code for this enum constant.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.lang.Object java.lang.Enum.clone() throws java.lang.CloneNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Throws CloneNotSupportedException.  This guarantees that enums
 are never cloned, which is necessary to preserve their "singleton"
 status.

 @return (never returns)

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.lang.Enum.compareTo(E o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares this enum with the specified object for order.  Returns a
 negative integer, zero, or a positive integer as this object is less
 than, equal to, or greater than the specified object.
 
 Enum constants are only comparable to other enum constants of the
 same enum type.  The natural order implemented by this
 method is the order in which the constants are declared.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the Class object corresponding to this enum constant's
 enum type.  Two enum constants e1 and  e2 are of the
 same enum type if and only if
   e1.getDeclaringClass() == e2.getDeclaringClass().
 (The value returned by this method may differ from the one returned
 by the {@link Object#getClass} method for enum constants with
 constant-specific class bodies.)

 @return the Class object corresponding to this enum constant's
     enum type

<!-- END DATA -->
<!-- BEGIN KEY -->
public static T extends java.lang.Enum<T> java.lang.Enum.valueOf(java.lang.Class<T> enumType, String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the enum constant of the specified enum type with the
 specified name.  The name must match exactly an identifier used
 to declare an enum constant in this type.  (Extraneous whitespace
 characters are not permitted.) 

 @param enumType the <tt>Class</tt> object of the enum type from which
      to return a constant
 @param name the name of the constant to return
 @return the enum constant of the specified enum type with the
      specified name
 @throws IllegalArgumentException if the specified enum type has
         no constant with the specified name, or the specified
         class object does not represent an enum type
 @throws NullPointerException if <tt>enumType</tt> or <tt>name</tt>
         is null
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void java.lang.Enum.finalize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 enum classes cannot have finalize methods.

<!-- END DATA -->
