<!-- BEGIN KEY -->
public class java.lang.ref.ReferenceQueue extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reference queues, to which registered reference objects are appended by the
 garbage collector after the appropriate reachability changes are detected.

 @version  1.25, 11/17/05
 @author   Mark Reinhold
 @since    1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.ref.ReferenceQueue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new reference-object queue.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.ref.Reference<? extends T> java.lang.ref.ReferenceQueue.poll()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Polls this queue to see if a reference object is available.  If one is
 available without further delay then it is removed from the queue and
 returned.  Otherwise this method immediately returns <tt>null</tt>.

 @return  A reference object, if one was immediately available,
          otherwise <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.ref.Reference<? extends T> java.lang.ref.ReferenceQueue.remove(long timeout) throws java.lang.IllegalArgumentException, java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the next reference object in this queue, blocking until either
 one becomes available or the given timeout period expires.

 <p> This method does not offer real-time guarantees: It schedules the
 timeout as if by invoking the {@link Object#wait(long)} method.

 @param  timeout  If positive, block for up to <code>timeout</code>
                  milliseconds while waiting for a reference to be
                  added to this queue.  If zero, block indefinitely.

 @return  A reference object, if one was available within the specified
          timeout period, otherwise <code>null</code>

 @throws  IllegalArgumentException
          If the value of the timeout argument is negative

 @throws  InterruptedException
          If the timeout wait is interrupted

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.ref.Reference<? extends T> java.lang.ref.ReferenceQueue.remove() throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the next reference object in this queue, blocking until one
 becomes available.

 @return A reference object, blocking until one becomes available
 @throws  InterruptedException  If the wait is interrupted

<!-- END DATA -->
