<!-- BEGIN KEY -->
public final class java.lang.reflect.Array extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>Array</code> class provides static methods to dynamically create and
 access Java arrays.

 <p><code>Array</code> permits widening conversions to occur during a get or set
 operation, but throws an <code>IllegalArgumentException</code> if a narrowing
 conversion would occur.

 @author Nakul Saraiya

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Object java.lang.reflect.Array.newInstance(java.lang.Class<?> componentType, int length) throws java.lang.NegativeArraySizeException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new array with the specified component type and
 length.
 Invoking this method is equivalent to creating an array
 as follows:
 <blockquote>
 <pre>
 int[] x = {length};
 Array.newInstance(componentType, x);
 </pre>
 </blockquote>

 @param componentType the <code>Class</code> object representing the
 component type of the new array
 @param length the length of the new array
 @return the new array
 @exception NullPointerException if the specified
 <code>componentType</code> parameter is null
 @exception IllegalArgumentException if componentType is {@link Void#TYPE}
 @exception NegativeArraySizeException if the specified <code>length</code> 
 is negative

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Object java.lang.reflect.Array.newInstance(java.lang.Class<?> componentType, int[] dimensions) throws java.lang.IllegalArgumentException, java.lang.NegativeArraySizeException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new array
 with the specified component type and dimensions. 
 If <code>componentType</code>
 represents a non-array class or interface, the new array
 has <code>dimensions.length</code> dimensions and
 <code>componentType</code> as its component type. If
 <code>componentType</code> represents an array class, the
 number of dimensions of the new array is equal to the sum
 of <code>dimensions.length</code> and the number of
 dimensions of <code>componentType</code>. In this case, the
 component type of the new array is the component type of
 <code>componentType</code>.
 
 <p>The number of dimensions of the new array must not
 exceed the number of array dimensions supported by the
 implementation (typically 255).

 @param componentType the <code>Class</code> object representing the component
 type of the new array
 @param dimensions an array of <code>int</code> representing the dimensions of
 the new array
 @return the new array
 @exception NullPointerException if the specified 
 <code>componentType</code> argument is null
 @exception IllegalArgumentException if the specified <code>dimensions</code> 
 argument is a zero-dimensional array, or if the number of
 requested dimensions exceeds the limit on the number of array dimensions 
 supported by the implementation (typically 255), or if componentType 
 is {@link Void#TYPE}.
 @exception NegativeArraySizeException if any of the components in
 the specified <code>dimensions</code> argument is negative.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native int java.lang.reflect.Array.getLength(Object array) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the length of the specified array object, as an <code>int</code>.

 @param array the array
 @return the length of the array
 @exception IllegalArgumentException if the object argument is not
 an array

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native java.lang.Object java.lang.reflect.Array.get(Object array, int index) throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of the indexed component in the specified
 array object.  The value is automatically wrapped in an object
 if it has a primitive type.

 @param array the array
 @param index the index
 @return the (possibly wrapped) value of the indexed component in
 the specified array
 @exception NullPointerException If the specified object is null
 @exception IllegalArgumentException If the specified object is not
 an array
 @exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
 argument is negative, or if it is greater than or equal to the
 length of the specified array

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native boolean java.lang.reflect.Array.getBoolean(Object array, int index) throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of the indexed component in the specified
 array object, as a <code>boolean</code>.

 @param array the array
 @param index the index
 @return the value of the indexed component in the specified array
 @exception NullPointerException If the specified object is null
 @exception IllegalArgumentException If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion
 @exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
 argument is negative, or if it is greater than or equal to the
 length of the specified array
 @see Array#get

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native byte java.lang.reflect.Array.getByte(Object array, int index) throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of the indexed component in the specified
 array object, as a <code>byte</code>.

 @param array the array
 @param index the index
 @return the value of the indexed component in the specified array
 @exception NullPointerException If the specified object is null
 @exception IllegalArgumentException If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion
 @exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
 argument is negative, or if it is greater than or equal to the
 length of the specified array
 @see Array#get

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native char java.lang.reflect.Array.getChar(Object array, int index) throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of the indexed component in the specified
 array object, as a <code>char</code>.

 @param array the array
 @param index the index
 @return the value of the indexed component in the specified array
 @exception NullPointerException If the specified object is null
 @exception IllegalArgumentException If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion
 @exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
 argument is negative, or if it is greater than or equal to the
 length of the specified array
 @see Array#get

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native short java.lang.reflect.Array.getShort(Object array, int index) throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of the indexed component in the specified
 array object, as a <code>short</code>.

 @param array the array
 @param index the index
 @return the value of the indexed component in the specified array
 @exception NullPointerException If the specified object is null
 @exception IllegalArgumentException If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion
 @exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
 argument is negative, or if it is greater than or equal to the
 length of the specified array
 @see Array#get

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native int java.lang.reflect.Array.getInt(Object array, int index) throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of the indexed component in the specified
 array object, as an <code>int</code>.

 @param array the array
 @param index the index
 @return the value of the indexed component in the specified array
 @exception NullPointerException If the specified object is null
 @exception IllegalArgumentException If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion
 @exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
 argument is negative, or if it is greater than or equal to the
 length of the specified array
 @see Array#get

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native long java.lang.reflect.Array.getLong(Object array, int index) throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of the indexed component in the specified
 array object, as a <code>long</code>.

 @param array the array
 @param index the index
 @return the value of the indexed component in the specified array
 @exception NullPointerException If the specified object is null
 @exception IllegalArgumentException If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion
 @exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
 argument is negative, or if it is greater than or equal to the
 length of the specified array
 @see Array#get

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native float java.lang.reflect.Array.getFloat(Object array, int index) throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of the indexed component in the specified
 array object, as a <code>float</code>.

 @param array the array
 @param index the index
 @return the value of the indexed component in the specified array
 @exception NullPointerException If the specified object is null
 @exception IllegalArgumentException If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion
 @exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
 argument is negative, or if it is greater than or equal to the
 length of the specified array
 @see Array#get

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native double java.lang.reflect.Array.getDouble(Object array, int index) throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of the indexed component in the specified
 array object, as a <code>double</code>.

 @param array the array
 @param index the index
 @return the value of the indexed component in the specified array
 @exception NullPointerException If the specified object is null
 @exception IllegalArgumentException If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion
 @exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
 argument is negative, or if it is greater than or equal to the
 length of the specified array
 @see Array#get

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native void java.lang.reflect.Array.set(Object array, int index, Object value) throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the value of the indexed component of the specified array
 object to the specified new value.  The new value is first
 automatically unwrapped if the array has a primitive component
 type.
 @param array the array
 @param index the index into the array
 @param value the new value of the indexed component
 @exception NullPointerException If the specified object argument
 is null
 @exception IllegalArgumentException If the specified object argument
 is not an array, or if the array component type is primitive and
 an unwrapping conversion fails
 @exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
 argument is negative, or if it is greater than or equal to
 the length of the specified array

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native void java.lang.reflect.Array.setBoolean(Object array, int index, boolean z) throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the value of the indexed component of the specified array
 object to the specified <code>boolean</code> value.
 @param array the array
 @param index the index into the array
 @param z the new value of the indexed component
 @exception NullPointerException If the specified object argument
 is null
 @exception IllegalArgumentException If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array's component type by an identity or a
 primitive widening conversion
 @exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
 argument is negative, or if it is greater than or equal to
 the length of the specified array
 @see Array#set

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native void java.lang.reflect.Array.setByte(Object array, int index, byte b) throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the value of the indexed component of the specified array
 object to the specified <code>byte</code> value.
 @param array the array
 @param index the index into the array
 @param b the new value of the indexed component
 @exception NullPointerException If the specified object argument
 is null
 @exception IllegalArgumentException If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array's component type by an identity or a
 primitive widening conversion
 @exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
 argument is negative, or if it is greater than or equal to
 the length of the specified array
 @see Array#set

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native void java.lang.reflect.Array.setChar(Object array, int index, char c) throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the value of the indexed component of the specified array
 object to the specified <code>char</code> value.
 @param array the array
 @param index the index into the array
 @param c the new value of the indexed component
 @exception NullPointerException If the specified object argument
 is null
 @exception IllegalArgumentException If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array's component type by an identity or a
 primitive widening conversion
 @exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
 argument is negative, or if it is greater than or equal to
 the length of the specified array
 @see Array#set

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native void java.lang.reflect.Array.setShort(Object array, int index, short s) throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the value of the indexed component of the specified array
 object to the specified <code>short</code> value.
 @param array the array
 @param index the index into the array
 @param s the new value of the indexed component
 @exception NullPointerException If the specified object argument
 is null
 @exception IllegalArgumentException If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array's component type by an identity or a
 primitive widening conversion
 @exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
 argument is negative, or if it is greater than or equal to
 the length of the specified array
 @see Array#set

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native void java.lang.reflect.Array.setInt(Object array, int index, int i) throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the value of the indexed component of the specified array
 object to the specified <code>int</code> value.
 @param array the array
 @param index the index into the array
 @param i the new value of the indexed component
 @exception NullPointerException If the specified object argument
 is null
 @exception IllegalArgumentException If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array's component type by an identity or a
 primitive widening conversion
 @exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
 argument is negative, or if it is greater than or equal to
 the length of the specified array
 @see Array#set

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native void java.lang.reflect.Array.setLong(Object array, int index, long l) throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the value of the indexed component of the specified array
 object to the specified <code>long</code> value.
 @param array the array
 @param index the index into the array
 @param l the new value of the indexed component
 @exception NullPointerException If the specified object argument
 is null
 @exception IllegalArgumentException If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array's component type by an identity or a
 primitive widening conversion
 @exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
 argument is negative, or if it is greater than or equal to
 the length of the specified array
 @see Array#set

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native void java.lang.reflect.Array.setFloat(Object array, int index, float f) throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the value of the indexed component of the specified array
 object to the specified <code>float</code> value.
 @param array the array
 @param index the index into the array
 @param f the new value of the indexed component
 @exception NullPointerException If the specified object argument
 is null
 @exception IllegalArgumentException If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array's component type by an identity or a
 primitive widening conversion
 @exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
 argument is negative, or if it is greater than or equal to
 the length of the specified array
 @see Array#set

<!-- END DATA -->
<!-- BEGIN KEY -->
public static native void java.lang.reflect.Array.setDouble(Object array, int index, double d) throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the value of the indexed component of the specified array
 object to the specified <code>double</code> value.
 @param array the array
 @param index the index into the array
 @param d the new value of the indexed component
 @exception NullPointerException If the specified object argument
 is null
 @exception IllegalArgumentException If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array's component type by an identity or a
 primitive widening conversion
 @exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
 argument is negative, or if it is greater than or equal to
 the length of the specified array
 @see Array#set

<!-- END DATA -->
