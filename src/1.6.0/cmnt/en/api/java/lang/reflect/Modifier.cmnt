<!-- BEGIN KEY -->
public class java.lang.reflect.Modifier extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Modifier class provides <code>static</code> methods and
 constants to decode class and member access modifiers.  The sets of
 modifiers are represented as integers with distinct bit positions
 representing different modifiers.  The values for the constants
 representing the modifiers are taken from <a
 href="http://java.sun.com/docs/books/vmspec/2nd-edition/html/VMSpecTOC.doc.html"><i>The
 Java</i><sup><small>TM</small></sup> <i>Virtual Machine Specification, Second
 edition</i></a> tables 
 <a href="http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#75734">4.1</a>,
 <a href="http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#88358">4.4</a>,
 <a href="http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#75568">4.5</a>, and 
 <a href="http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#88478">4.7</a>.

 @see Class#getModifiers()
 @see Member#getModifiers()

 @author Nakul Saraiya
 @author Kenneth Russell

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.PUBLIC
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>int</code> value representing the <code>public</code> 
 modifier.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.PRIVATE
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>int</code> value representing the <code>private</code> 
 modifier.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.PROTECTED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>int</code> value representing the <code>protected</code> 
 modifier.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.STATIC
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>int</code> value representing the <code>static</code> 
 modifier.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.FINAL
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>int</code> value representing the <code>final</code> 
 modifier.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.SYNCHRONIZED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>int</code> value representing the <code>synchronized</code> 
 modifier.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.VOLATILE
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>int</code> value representing the <code>volatile</code> 
 modifier.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.TRANSIENT
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>int</code> value representing the <code>transient</code> 
 modifier.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.NATIVE
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>int</code> value representing the <code>native</code> 
 modifier.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.INTERFACE
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>int</code> value representing the <code>interface</code> 
 modifier.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.ABSTRACT
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>int</code> value representing the <code>abstract</code> 
 modifier.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.reflect.Modifier.STRICT
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>int</code> value representing the <code>strictfp</code> 
 modifier.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isPublic(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return <tt>true</tt> if the integer argument includes the
 <tt>public</tt> modifier, <tt>false</tt> otherwise.

 @param 	mod a set of modifiers
 @return <tt>true</tt> if <code>mod</code> includes the
 <tt>public</tt> modifier; <tt>false</tt> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isPrivate(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return <tt>true</tt> if the integer argument includes the
 <tt>private</tt> modifier, <tt>false</tt> otherwise.

 @param 	mod a set of modifiers
 @return <tt>true</tt> if <code>mod</code> includes the
 <tt>private</tt> modifier; <tt>false</tt> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isProtected(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return <tt>true</tt> if the integer argument includes the
 <tt>protected</tt> modifier, <tt>false</tt> otherwise.

 @param 	mod a set of modifiers
 @return <tt>true</tt> if <code>mod</code> includes the
 <tt>protected</tt> modifier; <tt>false</tt> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isStatic(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return <tt>true</tt> if the integer argument includes the
 <tt>static</tt> modifier, <tt>false</tt> otherwise.

 @param 	mod a set of modifiers
 @return <tt>true</tt> if <code>mod</code> includes the
 <tt>static</tt> modifier; <tt>false</tt> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isFinal(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return <tt>true</tt> if the integer argument includes the
 <tt>final</tt> modifier, <tt>false</tt> otherwise.

 @param 	mod a set of modifiers
 @return <tt>true</tt> if <code>mod</code> includes the
 <tt>final</tt> modifier; <tt>false</tt> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isSynchronized(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return <tt>true</tt> if the integer argument includes the
 <tt>synchronized</tt> modifier, <tt>false</tt> otherwise.

 @param 	mod a set of modifiers
 @return <tt>true</tt> if <code>mod</code> includes the
 <tt>synchronized</tt> modifier; <tt>false</tt> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isVolatile(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return <tt>true</tt> if the integer argument includes the
 <tt>volatile</tt> modifier, <tt>false</tt> otherwise.

 @param 	mod a set of modifiers
 @return <tt>true</tt> if <code>mod</code> includes the
 <tt>volatile</tt> modifier; <tt>false</tt> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isTransient(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return <tt>true</tt> if the integer argument includes the
 <tt>transient</tt> modifier, <tt>false</tt> otherwise.

 @param 	mod a set of modifiers
 @return <tt>true</tt> if <code>mod</code> includes the
 <tt>transient</tt> modifier; <tt>false</tt> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isNative(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return <tt>true</tt> if the integer argument includes the
 <tt>native</tt> modifier, <tt>false</tt> otherwise.

 @param 	mod a set of modifiers
 @return <tt>true</tt> if <code>mod</code> includes the
 <tt>native</tt> modifier; <tt>false</tt> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isInterface(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return <tt>true</tt> if the integer argument includes the
 <tt>interface</tt> modifier, <tt>false</tt> otherwise.

 @param 	mod a set of modifiers
 @return <tt>true</tt> if <code>mod</code> includes the
 <tt>interface</tt> modifier; <tt>false</tt> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isAbstract(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return <tt>true</tt> if the integer argument includes the
 <tt>abstract</tt> modifier, <tt>false</tt> otherwise.

 @param 	mod a set of modifiers
 @return <tt>true</tt> if <code>mod</code> includes the
 <tt>abstract</tt> modifier; <tt>false</tt> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.lang.reflect.Modifier.isStrict(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return <tt>true</tt> if the integer argument includes the
 <tt>strictfp</tt> modifier, <tt>false</tt> otherwise.

 @param 	mod a set of modifiers
 @return <tt>true</tt> if <code>mod</code> includes the
 <tt>strictfp</tt> modifier; <tt>false</tt> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.reflect.Modifier.toString(int mod)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return a string describing the access modifier flags in
 the specified modifier. For example:
 <blockquote><pre>
    public final synchronized strictfp
 </pre></blockquote>
 The modifier names are returned in an order consistent with the
 suggested modifier orderings given in <a
 href="http://java.sun.com/docs/books/jls/second_edition/html/j.title.doc.html"><em>The
 Java Language Specification, Second Edition</em></a> sections
 <a href="http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#21613">&sect;8.1.1</a>, 
 <a href="http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#78091">&sect;8.3.1</a>, 
 <a href="http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#78188">&sect;8.4.3</a>, 
 <a href="http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#42018">&sect;8.8.3</a>, and
 <a href="http://java.sun.com/docs/books/jls/second_edition/html/interfaces.doc.html#235947">&sect;9.1.1</a>.  
 The full modifier ordering used by this method is:
 <blockquote> <code> 
 public protected private abstract static final transient
 volatile synchronized native strictfp
 interface </code> </blockquote> 
 The <code>interface</code> modifier discussed in this class is
 not a true modifier in the Java language and it appears after
 all other modifiers listed by this method.  This method may
 return a string of modifiers that are not valid modifiers of a
 Java entity; in other words, no checking is done on the
 possible validity of the combination of modifiers represented
 by the input.

 @param	mod a set of modifiers
 @return	a string representation of the set of modifiers
 represented by <code>mod</code>

<!-- END DATA -->
