<!-- BEGIN KEY -->
public class java.lang.reflect.AccessibleObject extends java.lang.Object implements java.lang.reflect.AnnotatedElement
<!-- END KEY -->
<!-- BEGIN DATA -->
 The AccessibleObject class is the base class for Field, Method and
 Constructor objects.  It provides the ability to flag a reflected
 object as suppressing default Java language access control checks
 when it is used.  The access checks--for public, default (package)
 access, protected, and private members--are performed when Fields,
 Methods or Constructors are used to set or get fields, to invoke
 methods, or to create and initialize new instances of classes,
 respectively.

 <p>Setting the <tt>accessible</tt> flag in a reflected object
 permits sophisticated applications with sufficient privilege, such
 as Java Object Serialization or other persistence mechanisms, to
 manipulate objects in a manner that would normally be prohibited.

 @see Field
 @see Method
 @see Constructor
 @see ReflectPermission

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.reflect.AccessibleObject()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructor: only used by the Java Virtual Machine.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[] array, boolean flag) throws java.lang.SecurityException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convenience method to set the <tt>accessible</tt> flag for an
 array of objects with a single security check (for efficiency).

 <p>First, if there is a security manager, its
 <code>checkPermission</code> method is called with a
 <code>ReflectPermission("suppressAccessChecks")</code> permission.

 <p>A <code>SecurityException</code> is raised if <code>flag</code> is
 <code>true</code> but accessibility of any of the elements of the input
 <code>array</code> may not be changed (for example, if the element
 object is a {@link Constructor} object for the class {@link
 java.lang.Class}).  In the event of such a SecurityException, the
 accessibility of objects is set to <code>flag</code> for array elements
 upto (and excluding) the element for which the exception occurred; the
 accessibility of elements beyond (and including) the element for which
 the exception occurred is unchanged.

 @param array the array of AccessibleObjects
 @param flag  the new value for the <tt>accessible</tt> flag
              in each object
 @throws SecurityException if the request is denied.
 @see SecurityManager#checkPermission
 @see java.lang.RuntimePermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.reflect.AccessibleObject.setAccessible(boolean flag) throws java.lang.SecurityException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the <tt>accessible</tt> flag for this object to
 the indicated boolean value.  A value of <tt>true</tt> indicates that
 the reflected object should suppress Java language access
 checking when it is used.  A value of <tt>false</tt> indicates 
 that the reflected object should enforce Java language access checks.

 <p>First, if there is a security manager, its
 <code>checkPermission</code> method is called with a
 <code>ReflectPermission("suppressAccessChecks")</code> permission.
 
 <p>A <code>SecurityException</code> is raised if <code>flag</code> is
 <code>true</code> but accessibility of this object may not be changed
 (for example, if this element object is a {@link Constructor} object for
 the class {@link java.lang.Class}).

 <p>A <code>SecurityException</code> is raised if this object is a {@link
 java.lang.reflect.Constructor} object for the class
 <code>java.lang.Class</code>, and <code>flag</code> is true.

 @param flag the new value for the <tt>accessible</tt> flag
 @throws SecurityException if the request is denied.
 @see SecurityManager#checkPermission
 @see java.lang.RuntimePermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.reflect.AccessibleObject.isAccessible()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the value of the <tt>accessible</tt> flag for this object.

 @return the value of the object's <tt>accessible</tt> flag

<!-- END DATA -->
<!-- BEGIN KEY -->
public T extends java.lang.annotation.Annotation java.lang.reflect.AccessibleObject.getAnnotation(java.lang.Class<T> annotationClass)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation> annotationClass)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getAnnotations()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getDeclaredAnnotations()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.5

<!-- END DATA -->
