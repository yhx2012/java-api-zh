<!-- BEGIN KEY -->
public class java.lang.ThreadLocal extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class provides thread-local variables.  These variables differ from
 their normal counterparts in that each thread that accesses one (via its
 <tt>get</tt> or <tt>set</tt> method) has its own, independently initialized
 copy of the variable.  <tt>ThreadLocal</tt> instances are typically private
 static fields in classes that wish to associate state with a thread (e.g.,
 a user ID or Transaction ID).

 <p>For example, the class below generates unique identifiers local to each
 thread.
 A thread's id is
 assigned the first time it invokes <tt>UniqueThreadIdGenerator.getCurrentThreadId()</tt> and remains unchanged on subsequent calls.
 <pre>
 import java.util.concurrent.atomic.AtomicInteger;

 public class UniqueThreadIdGenerator {

     private static final AtomicInteger uniqueId = new AtomicInteger(0);

     private static final ThreadLocal &lt; Integer > uniqueNum = 
         new ThreadLocal &lt; Integer > () {
             &#64;Override protected Integer initialValue() {
                 return uniqueId.getAndIncrement();
         }
     };
 
     public static int getCurrentThreadId() {
         return uniqueId.get();
     }
 } // UniqueThreadIdGenerator
 </pre>
 <p>Each thread holds an implicit reference to its copy of a thread-local
 variable as long as the thread is alive and the <tt>ThreadLocal</tt>
 instance is accessible; after a thread goes away, all of its copies of
 thread-local instances are subject to garbage collection (unless other
 references to these copies exist). 

 @author  Josh Bloch and Doug Lea
 @version 1.42, 06/23/06
 @since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.ThreadLocal()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a thread local variable.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected T java.lang.ThreadLocal.initialValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current thread's "initial value" for this
 thread-local variable.  This method will be invoked the first
 time a thread accesses the variable with the {@link #get}
 method, unless the thread previously invoked the {@link #set}
 method, in which case the <tt>initialValue</tt> method will not
 be invoked for the thread.  Normally, this method is invoked at
 most once per thread, but it may be invoked again in case of
 subsequent invocations of {@link #remove} followed by {@link #get}.

 <p>This implementation simply returns <tt>null</tt>; if the
 programmer desires thread-local variables to have an initial
 value other than <tt>null</tt>, <tt>ThreadLocal</tt> must be
 subclassed, and this method overridden.  Typically, an
 anonymous inner class will be used.

 @return the initial value for this thread-local

<!-- END DATA -->
<!-- BEGIN KEY -->
public T java.lang.ThreadLocal.get()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value in the current thread's copy of this
 thread-local variable.  If the variable has no value for the
 current thread, it is first initialized to the value returned
 by an invocation of the {@link #initialValue} method.

 @return the current thread's value of this thread-local

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.ThreadLocal.set(T value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the current thread's copy of this thread-local variable
 to the specified value.  Most subclasses will have no need to 
 override this method, relying solely on the {@link #initialValue}
 method to set the values of thread-locals.

 @param value the value to be stored in the current thread's copy of
        this thread-local.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.ThreadLocal.remove()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the current thread's value for this thread-local
 variable.  If this thread-local variable is subsequently
 {@linkplain #get read} by the current thread, its value will be
 reinitialized by invoking its {@link #initialValue} method,
 unless its value is {@linkplain #set set} by the current thread
 in the interim.  This may result in multiple invocations of the
 <tt>initialValue</tt> method in the current thread.

 @since 1.5

<!-- END DATA -->
