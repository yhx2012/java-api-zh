<!-- BEGIN KEY -->
public final class java.lang.StringBuilder extends java.lang.AbstractStringBuilder implements java.io.Serializable, java.lang.CharSequence
<!-- END KEY -->
<!-- BEGIN DATA -->
 A mutable sequence of characters.  This class provides an API compatible
 with <code>StringBuffer</code>, but with no guarantee of synchronization.
 This class is designed for use as a drop-in replacement for
 <code>StringBuffer</code> in places where the string buffer was being
 used by a single thread (as is generally the case).   Where possible,
 it is recommended that this class be used in preference to
 <code>StringBuffer</code> as it will be faster under most implementations.
 
 <p>The principal operations on a <code>StringBuilder</code> are the 
 <code>append</code> and <code>insert</code> methods, which are 
 overloaded so as to accept data of any type. Each effectively 
 converts a given datum to a string and then appends or inserts the 
 characters of that string to the string builder. The 
 <code>append</code> method always adds these characters at the end 
 of the builder; the <code>insert</code> method adds the characters at 
 a specified point. 
 <p>
 For example, if <code>z</code> refers to a string builder object 
 whose current contents are "<code>start</code>", then 
 the method call <code>z.append("le")</code> would cause the string 
 builder to contain "<code>startle</code>", whereas 
 <code>z.insert(4, "le")</code> would alter the string builder to 
 contain "<code>starlet</code>". 
 <p>
 In general, if sb refers to an instance of a <code>StringBuilder</code>, 
 then <code>sb.append(x)</code> has the same effect as 
 <code>sb.insert(sb.length(),&nbsp;x)</code>.

 Every string builder has a capacity. As long as the length of the 
 character sequence contained in the string builder does not exceed 
 the capacity, it is not necessary to allocate a new internal 
 buffer. If the internal buffer overflows, it is automatically made larger.

 <p>Instances of <code>StringBuilder</code> are not safe for
 use by multiple threads. If such synchronization is required then it is
 recommended that {@link java.lang.StringBuffer} be used. 

 @author	Michael McCloskey
 @version 	1.11, 11/17/05
 @see         java.lang.StringBuffer
 @see         java.lang.String
 @since	1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a string builder with no characters in it and an 
 initial capacity of 16 characters. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder(int capacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a string builder with no characters in it and an 
 initial capacity specified by the <code>capacity</code> argument. 

 @param      capacity  the initial capacity.
 @throws     NegativeArraySizeException  if the <code>capacity</code>
               argument is less than <code>0</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder(String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a string builder initialized to the contents of the 
 specified string. The initial capacity of the string builder is 
 <code>16</code> plus the length of the string argument.  

 @param   str   the initial contents of the buffer.
 @throws    NullPointerException if <code>str</code> is <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder(CharSequence seq)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a string builder that contains the same characters
 as the specified <code>CharSequence</code>. The initial capacity of
 the string builder is <code>16</code> plus the length of the
 <code>CharSequence</code> argument.

 @param      seq   the sequence to copy.
 @throws    NullPointerException if <code>seq</code> is <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.append(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see     java.lang.String#valueOf(java.lang.Object)
 @see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.append(StringBuffer sb)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends the specified <tt>StringBuffer</tt> to this sequence.
 <p>
 The characters of the <tt>StringBuffer</tt> argument are appended, 
 in order, to this sequence, increasing the 
 length of this sequence by the length of the argument. 
 If <tt>sb</tt> is <tt>null</tt>, then the four characters 
 <tt>"null"</tt> are appended to this sequence.
 <p>
 Let <i>n</i> be the length of this character sequence just prior to 
 execution of the <tt>append</tt> method. Then the character at index 
 <i>k</i> in the new character sequence is equal to the character at 
 index <i>k</i> in the old character sequence, if <i>k</i> is less than 
 <i>n</i>; otherwise, it is equal to the character at index <i>k-n</i> 
 in the argument <code>sb</code>.

 @param   sb   the <tt>StringBuffer</tt> to append.
 @return  a reference to this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.append(CharSequence s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.append(CharSequence s, int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws     IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.append(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see     java.lang.String#valueOf(boolean)
 @see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.append(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see     java.lang.String#valueOf(int)
 @see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.append(long lng)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see     java.lang.String#valueOf(long)
 @see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.append(float f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see     java.lang.String#valueOf(float)
 @see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.append(double d)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see     java.lang.String#valueOf(double)
 @see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.appendCodePoint(int codePoint)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.delete(int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.deleteCharAt(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.replace(int start, int end, String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int index, char[] str, int offset, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int offset, Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(java.lang.Object)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int offset, String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int offset, char[] str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int dstOffset, CharSequence s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int dstOffset, CharSequence s, int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int offset, boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(boolean)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int offset, char c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IndexOutOfBoundsException {@inheritDoc}
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int offset, int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(int)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int offset, long l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(long)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int offset, float f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(float)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuilder java.lang.StringBuilder.insert(int offset, double d)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(double)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.StringBuilder.indexOf(String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.StringBuilder.indexOf(String str, int fromIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.StringBuilder.lastIndexOf(String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.StringBuilder.lastIndexOf(String str, int fromIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.lang.StringBuilder.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 readObject is called to restore the state of the StringBuffer from
 a stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.lang.StringBuilder.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Save the state of the <tt>StringBuilder</tt> instance to a stream 
 (that is, serialize it).

 @serialData the number of characters currently stored in the string
             builder (<tt>int</tt>), followed by the characters in the
             string builder (<tt>char[]</tt>).   The length of the
             <tt>char</tt> array may be greater than the number of 
             characters currently stored in the string builder, in which
             case extra characters are ignored.

<!-- END DATA -->
