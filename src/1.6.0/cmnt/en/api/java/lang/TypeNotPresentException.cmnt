<!-- BEGIN KEY -->
public class java.lang.TypeNotPresentException extends java.lang.RuntimeException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Thrown when an application tries to access a type using a string
 representing the type's name, but no definition for the type with
 the specified name can be found.   This exception differs from
 {@link ClassNotFoundException} in that <tt>ClassNotFoundException</tt> is a
 checked exception, whereas this exception is unchecked.

 <p>Note that this exception may be used when undefined type variables
 are accessed as well as when types (e.g., classes, interfaces or
 annotation types) are loaded.

 @author  Josh Bloch
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.TypeNotPresentException(String typeName, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <tt>TypeNotPresentException</tt> for the named type
 with the specified cause.

 @param typeName the fully qualified name of the unavailable type
 @param cause the exception that was thrown when the system attempted to
    load the named type, or <tt>null</tt> if unavailable or inapplicable

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.TypeNotPresentException.typeName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the fully qualified name of the unavailable type.

 @return the fully qualified name of the unavailable type

<!-- END DATA -->
