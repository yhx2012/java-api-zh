<!-- BEGIN KEY -->
public final class java.lang.StringBuffer extends java.lang.AbstractStringBuilder implements java.io.Serializable, java.lang.CharSequence
<!-- END KEY -->
<!-- BEGIN DATA -->
 A thread-safe, mutable sequence of characters. 
 A string buffer is like a {@link String}, but can be modified. At any 
 point in time it contains some particular sequence of characters, but 
 the length and content of the sequence can be changed through certain 
 method calls.
 <p>
 String buffers are safe for use by multiple threads. The methods 
 are synchronized where necessary so that all the operations on any 
 particular instance behave as if they occur in some serial order 
 that is consistent with the order of the method calls made by each of 
 the individual threads involved.
 <p>
 The principal operations on a <code>StringBuffer</code> are the 
 <code>append</code> and <code>insert</code> methods, which are 
 overloaded so as to accept data of any type. Each effectively 
 converts a given datum to a string and then appends or inserts the 
 characters of that string to the string buffer. The 
 <code>append</code> method always adds these characters at the end 
 of the buffer; the <code>insert</code> method adds the characters at 
 a specified point. 
 <p>
 For example, if <code>z</code> refers to a string buffer object 
 whose current contents are "<code>start</code>", then 
 the method call <code>z.append("le")</code> would cause the string 
 buffer to contain "<code>startle</code>", whereas 
 <code>z.insert(4, "le")</code> would alter the string buffer to 
 contain "<code>starlet</code>". 
 <p>
 In general, if sb refers to an instance of a <code>StringBuffer</code>, 
 then <code>sb.append(x)</code> has the same effect as 
 <code>sb.insert(sb.length(),&nbsp;x)</code>.
 <p>
 Whenever an operation occurs involving a source sequence (such as
 appending or inserting from a source sequence) this class synchronizes
 only on the string buffer performing the operation, not on the source.
 <p>
 Every string buffer has a capacity. As long as the length of the 
 character sequence contained in the string buffer does not exceed 
 the capacity, it is not necessary to allocate a new internal 
 buffer array. If the internal buffer overflows, it is 
 automatically made larger. 

 As of  release JDK 5, this class has been supplemented with an equivalent 
 class designed for use by a single thread, {@link StringBuilder}.  The 
 <tt>StringBuilder</tt> class should generally be used in preference to 
 this one, as it supports all of the same operations but it is faster, as 
 it performs no synchronization.

 @author	Arthur van Hoff
 @version 	1.101, 11/17/05
 @see     java.lang.StringBuilder
 @see     java.lang.String
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
private static final java.io.ObjectStreamField[] java.lang.StringBuffer.serialPersistentFields
<!-- END KEY -->
<!-- BEGIN DATA -->
 Serializable fields for StringBuffer.
 
 @serialField value  char[]
              The backing character array of this StringBuffer.
 @serialField count int
              The number of characters in this StringBuffer.
 @serialField shared  boolean
              A flag indicating whether the backing array is shared. 
              The value is ignored upon deserialization.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a string buffer with no characters in it and an 
 initial capacity of 16 characters. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer(int capacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a string buffer with no characters in it and 
 the specified initial capacity. 

 @param      capacity  the initial capacity.
 @exception  NegativeArraySizeException  if the <code>capacity</code>
               argument is less than <code>0</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer(String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a string buffer initialized to the contents of the 
 specified string. The initial capacity of the string buffer is 
 <code>16</code> plus the length of the string argument.

 @param   str   the initial contents of the buffer.
 @exception NullPointerException if <code>str</code> is <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer(CharSequence seq)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a string buffer that contains the same characters
 as the specified <code>CharSequence</code>. The initial capacity of
 the string buffer is <code>16</code> plus the length of the
 <code>CharSequence</code> argument.
 <p>
 If the length of the specified <code>CharSequence</code> is
 less than or equal to zero, then an empty buffer of capacity
 <code>16</code> is returned.

 @param      seq   the sequence to copy.
 @exception NullPointerException if <code>seq</code> is <code>null</code>
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.lang.StringBuffer.trimToSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since      1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.lang.StringBuffer.setLength(int newLength)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IndexOutOfBoundsException {@inheritDoc}
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized char java.lang.StringBuffer.charAt(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IndexOutOfBoundsException {@inheritDoc}
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.lang.StringBuffer.codePointAt(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since      1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.lang.StringBuffer.codePointBefore(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since     1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.lang.StringBuffer.codePointCount(int beginIndex, int endIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since     1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.lang.StringBuffer.offsetByCodePoints(int index, int codePointOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since     1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.lang.StringBuffer.getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.lang.StringBuffer.setCharAt(int index, char ch)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IndexOutOfBoundsException {@inheritDoc}
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see     java.lang.String#valueOf(java.lang.Object)
 @see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(StringBuffer sb)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends the specified <tt>StringBuffer</tt> to this sequence.
 <p>
 The characters of the <tt>StringBuffer</tt> argument are appended, 
 in order, to the contents of this <tt>StringBuffer</tt>, increasing the 
 length of this <tt>StringBuffer</tt> by the length of the argument. 
 If <tt>sb</tt> is <tt>null</tt>, then the four characters 
 <tt>"null"</tt> are appended to this <tt>StringBuffer</tt>.
 <p>
 Let <i>n</i> be the length of the old character sequence, the one 
 contained in the <tt>StringBuffer</tt> just prior to execution of the 
 <tt>append</tt> method. Then the character at index <i>k</i> in 
 the new character sequence is equal to the character at index <i>k</i> 
 in the old character sequence, if <i>k</i> is less than <i>n</i>; 
 otherwise, it is equal to the character at index <i>k-n</i> in the 
 argument <code>sb</code>.
 <p>
 This method synchronizes on <code>this</code> (the destination) 
 object but does not synchronize on the source (<code>sb</code>).

 @param   sb   the <tt>StringBuffer</tt> to append.
 @return  a reference to this object.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer java.lang.StringBuffer.append(CharSequence s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends the specified <code>CharSequence</code> to this
 sequence.
 <p>
 The characters of the <code>CharSequence</code> argument are appended, 
 in order, increasing the length of this sequence by the length of the 
 argument.

 <p>The result of this method is exactly the same as if it were an
 invocation of this.append(s, 0, s.length());

 <p>This method synchronizes on this (the destination) 
 object but does not synchronize on the source (<code>s</code>).

 <p>If <code>s</code> is <code>null</code>, then the four characters 
 <code>"null"</code> are appended.

 @param   s the <code>CharSequence</code> to append.
 @return  a reference to this object.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(CharSequence s, int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IndexOutOfBoundsException {@inheritDoc}
 @since      1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see     java.lang.String#valueOf(boolean)
 @see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see     java.lang.String#valueOf(int)
 @see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.appendCodePoint(int codePoint)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(long lng)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see     java.lang.String#valueOf(long)
 @see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(float f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see     java.lang.String#valueOf(float)
 @see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(double d)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @see     java.lang.String#valueOf(double)
 @see     #append(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.delete(int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @since      1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.deleteCharAt(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @since      1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.replace(int start, int end, String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @since      1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String java.lang.StringBuffer.substring(int start)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @since      1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.CharSequence java.lang.StringBuffer.subSequence(int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IndexOutOfBoundsException {@inheritDoc}
 @since      1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String java.lang.StringBuffer.substring(int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @since      1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int index, char[] str, int offset, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @since      1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int offset, Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(java.lang.Object)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int offset, String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int offset, char[] str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer java.lang.StringBuffer.insert(int dstOffset, CharSequence s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IndexOutOfBoundsException {@inheritDoc}
 @since      1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int dstOffset, CharSequence s, int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IndexOutOfBoundsException {@inheritDoc}
 @since      1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer java.lang.StringBuffer.insert(int offset, boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(boolean)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int offset, char c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IndexOutOfBoundsException {@inheritDoc}
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer java.lang.StringBuffer.insert(int offset, int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(int)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer java.lang.StringBuffer.insert(int offset, long l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(long)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer java.lang.StringBuffer.insert(int offset, float f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(float)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.StringBuffer java.lang.StringBuffer.insert(int offset, double d)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws StringIndexOutOfBoundsException {@inheritDoc}
 @see        java.lang.String#valueOf(double)
 @see        #insert(int, java.lang.String)
 @see        #length()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.StringBuffer.indexOf(String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @since      1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.lang.StringBuffer.indexOf(String str, int fromIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @since      1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.StringBuffer.lastIndexOf(String str)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @since      1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.lang.StringBuffer.lastIndexOf(String str, int fromIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @since      1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.StringBuffer java.lang.StringBuffer.reverse()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since   JDK1.0.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.lang.StringBuffer.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 readObject is called to restore the state of the StringBuffer from
 a stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
private synchronized void java.lang.StringBuffer.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 readObject is called to restore the state of the StringBuffer from
 a stream.

<!-- END DATA -->
