<!-- BEGIN KEY -->
public class java.lang.ThreadGroup extends java.lang.Object implements java.lang.Thread.UncaughtExceptionHandler
<!-- END KEY -->
<!-- BEGIN DATA -->
 A thread group represents a set of threads. In addition, a thread 
 group can also include other thread groups. The thread groups form 
 a tree in which every thread group except the initial thread group 
 has a parent. 
 <p>
 A thread is allowed to access information about its own thread 
 group, but not to access information about its thread group's 
 parent thread group or any other thread groups. 

 @author  unascribed
 @version 1.65, 11/17/05
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.ThreadGroup(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new thread group. The parent of this new group is 
 the thread group of the currently running thread. 
 <p>
 The <code>checkAccess</code> method of the parent thread group is 
 called with no arguments; this may result in a security exception. 

 @param   name   the name of the new thread group.
 @exception  SecurityException  if the current thread cannot create a
               thread in the specified thread group.
 @see     java.lang.ThreadGroup#checkAccess()
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.ThreadGroup(ThreadGroup parent, String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new thread group. The parent of this new group is the 
 specified thread group. 
 <p>
 The <code>checkAccess</code> method of the parent thread group is 
 called with no arguments; this may result in a security exception. 

 @param     parent   the parent thread group.
 @param     name     the name of the new thread group.
 @exception  NullPointerException  if the thread group argument is
               <code>null</code>.
 @exception  SecurityException  if the current thread cannot create a
               thread in the specified thread group.
 @see     java.lang.SecurityException
 @see     java.lang.ThreadGroup#checkAccess()
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.lang.ThreadGroup.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of this thread group.

 @return  the name of this thread group.
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.ThreadGroup java.lang.ThreadGroup.getParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the parent of this thread group.
 <p>
 First, if the parent is not <code>null</code>, the 
 <code>checkAccess</code> method of the parent thread group is 
 called with no arguments; this may result in a security exception. 

 @return  the parent of this thread group. The top-level thread group
          is the only thread group whose parent is <code>null</code>.
 @exception  SecurityException  if the current thread cannot modify
               this thread group.
 @see        java.lang.ThreadGroup#checkAccess()
 @see        java.lang.SecurityException
 @see        java.lang.RuntimePermission
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.lang.ThreadGroup.getMaxPriority()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the maximum priority of this thread group. Threads that are
 part of this group cannot have a higher priority than the maximum
 priority.

 @return  the maximum priority that a thread in this thread group
          can have.
 @see     #setMaxPriority
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.lang.ThreadGroup.isDaemon()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tests if this thread group is a daemon thread group. A 
 daemon thread group is automatically destroyed when its last 
 thread is stopped or its last thread group is destroyed. 

 @return  <code>true</code> if this thread group is a daemon thread group;
          <code>false</code> otherwise.
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.lang.ThreadGroup.isDestroyed()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tests if this thread group has been destroyed.

 @return  true if this object is destroyed
 @since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.lang.ThreadGroup.setDaemon(boolean daemon)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Changes the daemon status of this thread group.
 <p>
 First, the <code>checkAccess</code> method of this thread group is 
 called with no arguments; this may result in a security exception. 
 <p>
 A daemon thread group is automatically destroyed when its last 
 thread is stopped or its last thread group is destroyed. 

 @param      daemon   if <code>true</code>, marks this thread group as
                      a daemon thread group; otherwise, marks this
                      thread group as normal.
 @exception  SecurityException  if the current thread cannot modify
               this thread group.
 @see        java.lang.SecurityException
 @see        java.lang.ThreadGroup#checkAccess()
 @since      JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.lang.ThreadGroup.setMaxPriority(int pri)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the maximum priority of the group. Threads in the thread 
 group that already have a higher priority are not affected. 
 <p>
 First, the <code>checkAccess</code> method of this thread group is 
 called with no arguments; this may result in a security exception. 
 <p>
 If the <code>pri</code> argument is less than 
 {@link Thread#MIN_PRIORITY} or greater than 
 {@link Thread#MAX_PRIORITY}, the maximum priority of the group 
 remains unchanged.
 <p>
 Otherwise, the priority of this ThreadGroup object is set to the 
 smaller of the specified <code>pri</code> and the maximum permitted 
 priority of the parent of this thread group. (If this thread group 
 is the system thread group, which has no parent, then its maximum 
 priority is simply set to <code>pri</code>.) Then this method is 
 called recursively, with <code>pri</code> as its argument, for 
 every thread group that belongs to this thread group.

 @param      pri   the new priority of the thread group.
 @exception  SecurityException  if the current thread cannot modify
               this thread group.
 @see        #getMaxPriority
 @see        java.lang.SecurityException
 @see        java.lang.ThreadGroup#checkAccess()
 @since      JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.lang.ThreadGroup.parentOf(ThreadGroup g)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tests if this thread group is either the thread group 
 argument or one of its ancestor thread groups. 

 @param   g   a thread group.
 @return  <code>true</code> if this thread group is the thread group
          argument or one of its ancestor thread groups;
          <code>false</code> otherwise.
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.lang.ThreadGroup.checkAccess()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines if the currently running thread has permission to 
 modify this thread group. 
 <p>
 If there is a security manager, its <code>checkAccess</code> method 
 is called with this thread group as its argument. This may result 
 in throwing a <code>SecurityException</code>. 

 @exception  SecurityException  if the current thread is not allowed to
               access this thread group.
 @see        java.lang.SecurityManager#checkAccess(java.lang.ThreadGroup)
 @since      JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.ThreadGroup.activeCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an estimate of the number of active threads in this
 thread group.  The result might not reflect concurrent activity,
 and might be affected by the presence of certain system threads.
 <p>
 Due to the inherently imprecise nature of the result, it is
 recommended that this method only be used for informational purposes.

 @return  an estimate of the number of active threads in this thread
          group and in any other thread group that has this thread
          group as an ancestor.
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.ThreadGroup.enumerate(java.lang.Thread[] list)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies into the specified array every active thread in this 
 thread group and its subgroups. 
 <p>
 First, the <code>checkAccess</code> method of this thread group is 
 called with no arguments; this may result in a security exception. 
 <p>
 An application might use the <code>activeCount</code> method to 
 get an estimate of how big the array should be, however <i>if the
 array is too short to hold all the threads, the extra threads are
 silently ignored.</i>  If it is critical to obtain every active
 thread in this thread group and its subgroups, the caller should
 verify that the returned int value is strictly less than the length
 of <tt>list</tt>.
 <p>
 Due to the inherent race condition in this method, it is recommended
 that the method only be used for informational purposes.

 @param   list   an array into which to place the list of threads.
 @return  the number of threads put into the array.
 @exception  SecurityException  if the current thread does not
               have permission to enumerate this thread group.
 @see     java.lang.ThreadGroup#activeCount()
 @see     java.lang.ThreadGroup#checkAccess()
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.ThreadGroup.enumerate(java.lang.Thread[] list, boolean recurse)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies into the specified array every active thread in this 
 thread group. If the <code>recurse</code> flag is 
 <code>true</code>, references to every active thread in this 
 thread's subgroups are also included. If the array is too short to 
 hold all the threads, the extra threads are silently ignored. 
 <p>
 First, the <code>checkAccess</code> method of this thread group is 
 called with no arguments; this may result in a security exception. 
 <p>
 An application might use the <code>activeCount</code> method to 
 get an estimate of how big the array should be, however <i>if the
 array is too short to hold all the threads, the extra threads are
 silently ignored.</i>  If it is critical to obtain every active thread
 in this thread group, the caller should verify that the returned int
 value is strictly less than the length of <tt>list</tt>.
 <p>
 Due to the inherent race condition in this method, it is recommended
 that the method only be used for informational purposes.

 @param   list      an array into which to place the list of threads.
 @param   recurse   a flag indicating whether also to include threads
                    in thread groups that are subgroups of this
                    thread group.
 @return  the number of threads placed into the array.
 @exception  SecurityException  if the current thread does not
               have permission to enumerate this thread group.
 @see     java.lang.ThreadGroup#activeCount()
 @see     java.lang.ThreadGroup#checkAccess()
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.ThreadGroup.activeGroupCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an estimate of the number of active groups in this
 thread group.  The result might not reflect concurrent activity.
 <p>
 Due to the inherently imprecise nature of the result, it is
 recommended that this method only be used for informational purposes.

 @return  the number of active thread groups with this thread group as
          an ancestor.
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.ThreadGroup.enumerate(java.lang.ThreadGroup[] list)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies into the specified array references to every active 
 subgroup in this thread group. 
 <p>
 First, the <code>checkAccess</code> method of this thread group is 
 called with no arguments; this may result in a security exception. 
 <p>
 An application might use the <code>activeGroupCount</code> method to 
 get an estimate of how big the array should be, however <i>if the
 array is too short to hold all the thread groups, the extra thread
 groups are silently ignored.</i>  If it is critical to obtain every
 active subgroup in this thread group, the caller should verify that
 the returned int value is strictly less than the length of
 <tt>list</tt>.
 <p>
 Due to the inherent race condition in this method, it is recommended
 that the method only be used for informational purposes.

 @param   list   an array into which to place the list of thread groups.
 @return  the number of thread groups put into the array.
 @exception  SecurityException  if the current thread does not
               have permission to enumerate this thread group.
 @see     java.lang.ThreadGroup#activeGroupCount()
 @see     java.lang.ThreadGroup#checkAccess()
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.ThreadGroup.enumerate(java.lang.ThreadGroup[] list, boolean recurse)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies into the specified array references to every active 
 subgroup in this thread group. If the <code>recurse</code> flag is 
 <code>true</code>, references to all active subgroups of the 
 subgroups and so forth are also included. 
 <p>
 First, the <code>checkAccess</code> method of this thread group is 
 called with no arguments; this may result in a security exception. 
 <p>
 An application might use the <code>activeGroupCount</code> method to 
 get an estimate of how big the array should be, however <i>if the
 array is too short to hold all the thread groups, the extra thread
 groups are silently ignored.</i>  If it is critical to obtain every
 active subgroup in this thread group, the caller should verify that
 the returned int value is strictly less than the length of
 <tt>list</tt>.
 <p>
 Due to the inherent race condition in this method, it is recommended
 that the method only be used for informational purposes.

 @param   list      an array into which to place the list of threads.
 @param   recurse   a flag indicating whether to recursively enumerate
                    all included thread groups.
 @return  the number of thread groups put into the array.
 @exception  SecurityException  if the current thread does not
               have permission to enumerate this thread group.
 @see     java.lang.ThreadGroup#activeGroupCount()
 @see     java.lang.ThreadGroup#checkAccess()
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.lang.ThreadGroup.stop()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Stops all threads in this thread group.
 <p>
 First, the <code>checkAccess</code> method of this thread group is 
 called with no arguments; this may result in a security exception. 
 <p>
 This method then calls the <code>stop</code> method on all the 
 threads in this thread group and in all of its subgroups. 

 @exception  SecurityException  if the current thread is not allowed
               to access this thread group or any of the threads in
               the thread group.
 @see        java.lang.SecurityException
 @see        java.lang.Thread#stop()
 @see        java.lang.ThreadGroup#checkAccess()
 @since      JDK1.0
 @deprecated    This method is inherently unsafe.  See
     {@link Thread#stop} for details.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.lang.ThreadGroup.interrupt()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Interrupts all threads in this thread group.
 <p>
 First, the <code>checkAccess</code> method of this thread group is 
 called with no arguments; this may result in a security exception. 
 <p>
 This method then calls the <code>interrupt</code> method on all the 
 threads in this thread group and in all of its subgroups.

 @exception  SecurityException  if the current thread is not allowed
               to access this thread group or any of the threads in
               the thread group.
 @see        java.lang.Thread#interrupt()
 @see        java.lang.SecurityException
 @see        java.lang.ThreadGroup#checkAccess()
 @since      1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.lang.ThreadGroup.suspend()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Suspends all threads in this thread group.
 <p>
 First, the <code>checkAccess</code> method of this thread group is 
 called with no arguments; this may result in a security exception. 
 <p>
 This method then calls the <code>suspend</code> method on all the 
 threads in this thread group and in all of its subgroups. 

 @exception  SecurityException  if the current thread is not allowed
               to access this thread group or any of the threads in
               the thread group.
 @see        java.lang.Thread#suspend()
 @see        java.lang.SecurityException
 @see        java.lang.ThreadGroup#checkAccess()
 @since      JDK1.0
 @deprecated    This method is inherently deadlock-prone.  See
     {@link Thread#suspend} for details.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.lang.ThreadGroup.resume()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resumes all threads in this thread group.
 <p>
 First, the <code>checkAccess</code> method of this thread group is 
 called with no arguments; this may result in a security exception. 
 <p>
 This method then calls the <code>resume</code> method on all the 
 threads in this thread group and in all of its sub groups. 

 @exception  SecurityException  if the current thread is not allowed to
               access this thread group or any of the threads in the
               thread group.
 @see        java.lang.SecurityException
 @see        java.lang.Thread#resume()
 @see        java.lang.ThreadGroup#checkAccess()
 @since      JDK1.0
 @deprecated    This method is used solely in conjunction with
      <tt>Thread.suspend</tt> and <tt>ThreadGroup.suspend</tt>,
       both of which have been deprecated, as they are inherently
       deadlock-prone.  See {@link Thread#suspend} for details.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.lang.ThreadGroup.destroy()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Destroys this thread group and all of its subgroups. This thread 
 group must be empty, indicating that all threads that had been in 
 this thread group have since stopped. 
 <p>
 First, the <code>checkAccess</code> method of this thread group is 
 called with no arguments; this may result in a security exception. 

 @exception  IllegalThreadStateException  if the thread group is not
               empty or if the thread group has already been destroyed.
 @exception  SecurityException  if the current thread cannot modify this
               thread group.
 @see        java.lang.ThreadGroup#checkAccess()
 @since      JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.ThreadGroup.list()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Prints information about this thread group to the standard 
 output. This method is useful only for debugging. 

 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.lang.ThreadGroup.uncaughtException(Thread t, Throwable e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called by the Java Virtual Machine when a thread in this 
 thread group stops because of an uncaught exception, and the thread 
 does not have a specific {@link Thread.UncaughtExceptionHandler} 
 installed.
 <p>
 The <code>uncaughtException</code> method of 
 <code>ThreadGroup</code> does the following: 
 <ul>
 <li>If this thread group has a parent thread group, the
     <code>uncaughtException</code> method of that parent is called
     with the same two arguments. 
 <li>Otherwise, this method checks to see if there is a
     {@linkplain Thread#getDefaultUncaughtExceptionHandler default
     uncaught exception handler} installed, and if so, its
     <code>uncaughtException</code> method is called with the same 
     two arguments.
 <li>Otherwise, this method determines if the <code>Throwable</code>
     argument is an instance of {@link ThreadDeath}. If so, nothing
     special is done. Otherwise, a message containing the
     thread's name, as returned from the thread's {@link
     Thread#getName getName} method, and a stack backtrace,
     using the <code>Throwable</code>'s {@link
     Throwable#printStackTrace printStackTrace} method, is
     printed to the {@linkplain System#err standard error stream}.
 </ul>
 <p>
 Applications can override this method in subclasses of 
 <code>ThreadGroup</code> to provide alternative handling of 
 uncaught exceptions. 

 @param   t   the thread that is about to exit.
 @param   e   the uncaught exception.
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.ThreadGroup.allowThreadSuspension(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Used by VM to control lowmem implicit suspension.

 @param b boolean to allow or disallow suspension
 @return true on success
 @since   JDK1.1
 @deprecated The definition of this call depends on {@link #suspend},
		   which is deprecated.  Further, the behavior of this call
		   was never specified.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.ThreadGroup.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this Thread group.

 @return  a string representation of this thread group.
 @since   JDK1.0

<!-- END DATA -->
