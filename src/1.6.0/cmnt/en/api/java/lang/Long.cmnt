<!-- BEGIN KEY -->
public final class java.lang.Long extends java.lang.Number implements java.lang.Comparable
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>Long</code> class wraps a value of the primitive type
 <code>long</code> in an object. An object of type <code>Long</code>
 contains a single field whose type is <code>long</code>.

 <p> 

 In addition, this class provides several methods for converting a
 <code>long</code> to a <code>String</code> and a
 <code>String</code> to a <code>long</code>, as well as other
 constants and methods useful when dealing with a <code>long</code>.

 <p>Implementation note: The implementations of the "bit twiddling"
 methods (such as {@link #highestOneBit(long) highestOneBit} and
 {@link #numberOfTrailingZeros(long) numberOfTrailingZeros}) are
 based on material from Henry S. Warren, Jr.'s <i>Hacker's
 Delight</i>, (Addison Wesley, 2002).

 @author  Lee Boynton
 @author  Arthur van Hoff
 @author  Josh Bloch
 @version 1.81, 11/17/05
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.lang.Long.MIN_VALUE
<!-- END KEY -->
<!-- BEGIN DATA -->
 A constant holding the minimum value a <code>long</code> can
 have, -2<sup>63</sup>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.lang.Long.MAX_VALUE
<!-- END KEY -->
<!-- BEGIN DATA -->
 A constant holding the maximum value a <code>long</code> can
 have, 2<sup>63</sup>-1.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.Class<java.lang.Long> java.lang.Long.TYPE
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>Class</code> instance representing the primitive type
 <code>long</code>.

 @since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.lang.Long.SIZE
<!-- END KEY -->
<!-- BEGIN DATA -->
 The number of bits used to represent a <tt>long</tt> value in two's
 complement binary form.

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
private final long java.lang.Long.value
<!-- END KEY -->
<!-- BEGIN DATA -->
 The value of the <code>Long</code>.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Long(long value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a newly allocated <code>Long</code> object that
 represents the specified <code>long</code> argument.

 @param   value   the value to be represented by the 
          <code>Long</code> object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Long(String s) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a newly allocated <code>Long</code> object that
 represents the <code>long</code> value indicated by the
 <code>String</code> parameter. The string is converted to a
 <code>long</code> value in exactly the manner used by the
 <code>parseLong</code> method for radix 10.

 @param      s   the <code>String</code> to be converted to a 
		   <code>Long</code>.
 @exception  NumberFormatException  if the <code>String</code> does not
               contain a parsable <code>long</code>.
 @see        java.lang.Long#parseLong(java.lang.String, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.Long.toString(long i, int radix)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of the first argument in the
 radix specified by the second argument.
 <p>
 If the radix is smaller than <code>Character.MIN_RADIX</code>
 or larger than <code>Character.MAX_RADIX</code>, then the radix
 <code>10</code> is used instead.
 <p>
 If the first argument is negative, the first element of the
 result is the ASCII minus sign <code>'-'</code>
 (<code>'&#92;u002d'</code>). If the first argument is not
 negative, no sign character appears in the result.
 <p>
 The remaining characters of the result represent the magnitude
 of the first argument. If the magnitude is zero, it is
 represented by a single zero character <code>'0'</code>
 (<code>'&#92;u0030'</code>); otherwise, the first character of
 the representation of the magnitude will not be the zero
 character.  The following ASCII characters are used as digits:
 <blockquote><pre>
   0123456789abcdefghijklmnopqrstuvwxyz
 </pre></blockquote>
 These are <code>'&#92;u0030'</code> through
 <code>'&#92;u0039'</code> and <code>'&#92;u0061'</code> through
 <code>'&#92;u007a'</code>. If <code>radix</code> is
 <var>N</var>, then the first <var>N</var> of these characters
 are used as radix-<var>N</var> digits in the order shown. Thus,
 the digits for hexadecimal (radix 16) are
 <code>0123456789abcdef</code>. If uppercase letters are
 desired, the {@link java.lang.String#toUpperCase()} method may
 be called on the result:
 <blockquote><pre>
 Long.toString(n, 16).toUpperCase()
 </pre></blockquote>
 
 @param   i       a <code>long</code>to be converted to a string.
 @param   radix   the radix to use in the string representation.
 @return  a string representation of the argument in the specified radix.
 @see     java.lang.Character#MAX_RADIX
 @see     java.lang.Character#MIN_RADIX

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.Long.toHexString(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of the <code>long</code>
 argument as an unsigned integer in base&nbsp;16.
 <p>
 The unsigned <code>long</code> value is the argument plus
 2<sup>64</sup> if the argument is negative; otherwise, it is
 equal to the argument.  This value is converted to a string of
 ASCII digits in hexadecimal (base&nbsp;16) with no extra
 leading <code>0</code>s.  If the unsigned magnitude is zero, it
 is represented by a single zero character <code>'0'</code>
 (<code>'&#92;u0030'</code>); otherwise, the first character of
 the representation of the unsigned magnitude will not be the
 zero character. The following characters are used as
 hexadecimal digits:
 <blockquote><pre>
 0123456789abcdef
 </pre></blockquote>
 These are the characters <code>'&#92;u0030'</code> through
 <code>'&#92;u0039'</code> and  <code>'&#92;u0061'</code> through
 <code>'&#92;u0066'</code>.  If uppercase letters are desired,
 the {@link java.lang.String#toUpperCase()} method may be called
 on the result:
 <blockquote><pre>
 Long.toHexString(n).toUpperCase()
 </pre></blockquote>

 @param   i   a <code>long</code> to be converted to a string.
 @return  the string representation of the unsigned <code>long</code>
 		value represented by the argument in hexadecimal
		(base&nbsp;16).
 @since   JDK 1.0.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.Long.toOctalString(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of the <code>long</code>
 argument as an unsigned integer in base&nbsp;8.
 <p>
 The unsigned <code>long</code> value is the argument plus
 2<sup>64</sup> if the argument is negative; otherwise, it is
 equal to the argument.  This value is converted to a string of
 ASCII digits in octal (base&nbsp;8) with no extra leading
 <code>0</code>s.
 <p>
 If the unsigned magnitude is zero, it is represented by a
 single zero character <code>'0'</code>
 (<code>'&#92;u0030'</code>); otherwise, the first character of
 the representation of the unsigned magnitude will not be the
 zero character. The following characters are used as octal
 digits:
 <blockquote><pre>
 01234567
 </pre></blockquote>
 These are the characters <code>'&#92;u0030'</code> through 
 <code>'&#92;u0037'</code>. 

 @param   i   a <code>long</code> to be converted to a string.
 @return  the string representation of the unsigned <code>long</code> 
		value represented by the argument in octal (base&nbsp;8).
 @since   JDK 1.0.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.Long.toBinaryString(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of the <code>long</code>
 argument as an unsigned integer in base&nbsp;2.
 <p>
 The unsigned <code>long</code> value is the argument plus
 2<sup>64</sup> if the argument is negative; otherwise, it is
 equal to the argument.  This value is converted to a string of
 ASCII digits in binary (base&nbsp;2) with no extra leading
 <code>0</code>s.  If the unsigned magnitude is zero, it is
 represented by a single zero character <code>'0'</code>
 (<code>'&#92;u0030'</code>); otherwise, the first character of
 the representation of the unsigned magnitude will not be the
 zero character. The characters <code>'0'</code>
 (<code>'&#92;u0030'</code>) and <code>'1'</code>
 (<code>'&#92;u0031'</code>) are used as binary digits.

 @param   i   a <code>long</code> to be converted to a string.
 @return  the string representation of the unsigned <code>long</code> 
          value represented by the argument in binary (base&nbsp;2).
 @since   JDK 1.0.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.lang.Long.toString(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>String</code> object representing the specified
 <code>long</code>.  The argument is converted to signed decimal
 representation and returned as a string, exactly as if the
 argument and the radix 10 were given as arguments to the {@link
 #toString(long, int)} method.

 @param   i   a <code>long</code> to be converted.
 @return  a string representation of the argument in base&nbsp;10.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Long.parseLong(String s, int radix) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Parses the string argument as a signed <code>long</code> in the
 radix specified by the second argument. The characters in the
 string must all be digits of the specified radix (as determined
 by whether {@link java.lang.Character#digit(char, int)} returns
 a nonnegative value), except that the first character may be an
 ASCII minus sign <code>'-'</code> (<code>'&#92;u002D'</code>) to
 indicate a negative value. The resulting <code>long</code>
 value is returned.
 <p>
 Note that neither the character <code>L</code>
 (<code>'&#92;u004C'</code>) nor <code>l</code>
 (<code>'&#92;u006C'</code>) is permitted to appear at the end
 of the string as a type indicator, as would be permitted in
 Java programming language source code - except that either
 <code>L</code> or <code>l</code> may appear as a digit for a
 radix greater than 22.
 <p>
 An exception of type <code>NumberFormatException</code> is
 thrown if any of the following situations occurs:
 <ul>
 <li>The first argument is <code>null</code> or is a string of
 length zero.
 <li>The <code>radix</code> is either smaller than {@link
 java.lang.Character#MIN_RADIX} or larger than {@link
 java.lang.Character#MAX_RADIX}.
 <li>Any character of the string is not a digit of the specified
 radix, except that the first character may be a minus sign
 <code>'-'</code> (<code>'&#92;u002d'</code>) provided that the
 string is longer than length 1.
 <li>The value represented by the string is not a value of type
      <code>long</code>. 
 </ul><p>
 Examples:
 <blockquote><pre>
 parseLong("0", 10) returns 0L
 parseLong("473", 10) returns 473L
 parseLong("-0", 10) returns 0L
 parseLong("-FF", 16) returns -255L
 parseLong("1100110", 2) returns 102L
 parseLong("99", 8) throws a NumberFormatException
 parseLong("Hazelnut", 10) throws a NumberFormatException
 parseLong("Hazelnut", 36) returns 1356099454469L
 </pre></blockquote>
 
 @param      s       the <code>String</code> containing the
                     <code>long</code> representation to be parsed.
 @param      radix   the radix to be used while parsing <code>s</code>.
 @return     the <code>long</code> represented by the string argument in
             the specified radix.
 @exception  NumberFormatException  if the string does not contain a
               parsable <code>long</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Long.parseLong(String s) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Parses the string argument as a signed decimal
 <code>long</code>.  The characters in the string must all be
 decimal digits, except that the first character may be an ASCII
 minus sign <code>'-'</code> (<code>&#92;u002D'</code>) to
 indicate a negative value. The resulting <code>long</code>
 value is returned, exactly as if the argument and the radix
 <code>10</code> were given as arguments to the {@link
 #parseLong(java.lang.String, int)} method.
 <p>
 Note that neither the character <code>L</code>
 (<code>'&#92;u004C'</code>) nor <code>l</code>
 (<code>'&#92;u006C'</code>) is permitted to appear at the end
 of the string as a type indicator, as would be permitted in
 Java programming language source code.

 @param      s   a <code>String</code> containing the <code>long</code>
             representation to be parsed
 @return     the <code>long</code> represented by the argument in 
		   decimal.
 @exception  NumberFormatException  if the string does not contain a
               parsable <code>long</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Long java.lang.Long.valueOf(String s, int radix) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>Long</code> object holding the value
 extracted from the specified <code>String</code> when parsed
 with the radix given by the second argument.  The first
 argument is interpreted as representing a signed
 <code>long</code> in the radix specified by the second
 argument, exactly as if the arguments were given to the {@link
 #parseLong(java.lang.String, int)} method. The result is a
 <code>Long</code> object that represents the <code>long</code>
 value specified by the string.
 <p>
 In other words, this method returns a <code>Long</code> object equal 
 to the value of:

 <blockquote><code>
 new Long(Long.parseLong(s, radix))
 </code></blockquote>

 @param      s       the string to be parsed
 @param      radix   the radix to be used in interpreting <code>s</code>
 @return     a <code>Long</code> object holding the value
             represented by the string argument in the specified
             radix.
 @exception  NumberFormatException  If the <code>String</code> does not
             contain a parsable <code>long</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Long java.lang.Long.valueOf(String s) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>Long</code> object holding the value
 of the specified <code>String</code>. The argument is
 interpreted as representing a signed decimal <code>long</code>,
 exactly as if the argument were given to the {@link
 #parseLong(java.lang.String)} method. The result is a
 <code>Long</code> object that represents the integer value
 specified by the string.
 <p>
 In other words, this method returns a <code>Long</code> object
 equal to the value of:

 <blockquote><pre>
 new Long(Long.parseLong(s))
 </pre></blockquote>

 @param      s   the string to be parsed.
 @return     a <code>Long</code> object holding the value
             represented by the string argument.
 @exception  NumberFormatException  If the string cannot be parsed
              as a <code>long</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Long java.lang.Long.valueOf(long l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <tt>Long</tt> instance representing the specified
 <tt>long</tt> value.
 If a new <tt>Long</tt> instance is not required, this method
 should generally be used in preference to the constructor
 {@link #Long(long)}, as this method is likely to yield
 significantly better space and time performance by caching
 frequently requested values.

 @param  l a long value.
 @return a <tt>Long</tt> instance representing <tt>l</tt>.
 @since  1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Long java.lang.Long.decode(String nm) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Decodes a <code>String</code> into a <code>Long</code>.
 Accepts decimal, hexadecimal, and octal numbers given by the
 following grammar:

 <blockquote>
 <dl>
 <dt><i>DecodableString:</i>
 <dd><i>Sign<sub>opt</sub> DecimalNumeral</i>
 <dd><i>Sign<sub>opt</sub></i> <code>0x</code> <i>HexDigits</i>
 <dd><i>Sign<sub>opt</sub></i> <code>0X</code> <i>HexDigits</i>
 <dd><i>Sign<sub>opt</sub></i> <code>#</code> <i>HexDigits</i>
 <dd><i>Sign<sub>opt</sub></i> <code>0</code> <i>OctalDigits</i>
 <p>
 <dt><i>Sign:</i>
 <dd><code>-</code>
 </dl>
 </blockquote>

 <i>DecimalNumeral</i>, <i>HexDigits</i>, and <i>OctalDigits</i>
 are defined in <a href="http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#48282">&sect;3.10.1</a> 
 of the <a href="http://java.sun.com/docs/books/jls/html/">Java 
 Language Specification</a>.
 <p>
 The sequence of characters following an (optional) negative
 sign and/or radix specifier (&quot;<code>0x</code>&quot;,
 &quot;<code>0X</code>&quot;, &quot;<code>#</code>&quot;, or
 leading zero) is parsed as by the <code>Long.parseLong</code>
 method with the indicated radix (10, 16, or 8).  This sequence
 of characters must represent a positive value or a {@link
 NumberFormatException} will be thrown.  The result is negated
 if first character of the specified <code>String</code> is the
 minus sign.  No whitespace characters are permitted in the
 <code>String</code>.

 @param     nm the <code>String</code> to decode.
 @return    a <code>Long</code> object holding the <code>long</code>
		  value represented by <code>nm</code>
 @exception NumberFormatException  if the <code>String</code> does not
            contain a parsable <code>long</code>.
 @see java.lang.Long#parseLong(String, int)
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte java.lang.Long.byteValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of this <code>Long</code> as a
 <code>byte</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public short java.lang.Long.shortValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of this <code>Long</code> as a
 <code>short</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.Long.intValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of this <code>Long</code> as an
 <code>int</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.lang.Long.longValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of this <code>Long</code> as a
 <code>long</code> value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.lang.Long.floatValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of this <code>Long</code> as a
 <code>float</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.lang.Long.doubleValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value of this <code>Long</code> as a
 <code>double</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.lang.Long.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>String</code> object representing this
 <code>Long</code>'s value.  The value is converted to signed
 decimal representation and returned as a string, exactly as if
 the <code>long</code> value were given as an argument to the
 {@link java.lang.Long#toString(long)} method.

 @return  a string representation of the value of this object in
		base&nbsp;10.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.Long.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hash code for this <code>Long</code>. The result is
 the exclusive OR of the two halves of the primitive
 <code>long</code> value held by this <code>Long</code>
 object. That is, the hashcode is the value of the expression:
 <blockquote><pre>
 (int)(this.longValue()^(this.longValue()&gt;&gt;&gt;32))
 </pre></blockquote>

 @return  a hash code value for this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.lang.Long.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares this object to the specified object.  The result is
 <code>true</code> if and only if the argument is not
 <code>null</code> and is a <code>Long</code> object that
 contains the same <code>long</code> value as this object.

 @param   obj   the object to compare with.
 @return  <code>true</code> if the objects are the same;
          <code>false</code> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Long java.lang.Long.getLong(String nm)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the <code>long</code> value of the system property
 with the specified name.
 <p>
 The first argument is treated as the name of a system property.
 System properties are accessible through the {@link
 java.lang.System#getProperty(java.lang.String)} method. The
 string value of this property is then interpreted as a
 <code>long</code> value and a <code>Long</code> object
 representing this value is returned.  Details of possible
 numeric formats can be found with the definition of
 <code>getProperty</code>.
 <p>
 If there is no property with the specified name, if the
 specified name is empty or <code>null</code>, or if the
 property does not have the correct numeric format, then
 <code>null</code> is returned.
 <p>
 In other words, this method returns a <code>Long</code> object equal to 
 the value of:
 <blockquote><code>
 getLong(nm, null)
 </code></blockquote>

 @param   nm   property name.
 @return  the <code>Long</code> value of the property.
 @see     java.lang.System#getProperty(java.lang.String)
 @see     java.lang.System#getProperty(java.lang.String, java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Long java.lang.Long.getLong(String nm, long val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the <code>long</code> value of the system property
 with the specified name.
 <p>
 The first argument is treated as the name of a system property.
 System properties are accessible through the {@link
 java.lang.System#getProperty(java.lang.String)} method. The
 string value of this property is then interpreted as a
 <code>long</code> value and a <code>Long</code> object
 representing this value is returned.  Details of possible
 numeric formats can be found with the definition of
 <code>getProperty</code>.
 <p>
 The second argument is the default value. A <code>Long</code> object
 that represents the value of the second argument is returned if there
 is no property of the specified name, if the property does not have
 the correct numeric format, or if the specified name is empty or null.
 <p>
 In other words, this method returns a <code>Long</code> object equal 
 to the value of:
 <blockquote><code>
 getLong(nm, new Long(val))
 </code></blockquote>
 but in practice it may be implemented in a manner such as: 
 <blockquote><pre>
 Long result = getLong(nm, null);
 return (result == null) ? new Long(val) : result;
 </pre></blockquote>
 to avoid the unnecessary allocation of a <code>Long</code> object when 
 the default value is not needed. 

 @param   nm    property name.
 @param   val   default value.
 @return  the <code>Long</code> value of the property.
 @see     java.lang.System#getProperty(java.lang.String)
 @see     java.lang.System#getProperty(java.lang.String, java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.Long java.lang.Long.getLong(String nm, Long val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>long</code> value of the system property with
 the specified name.  The first argument is treated as the name
 of a system property.  System properties are accessible through
 the {@link java.lang.System#getProperty(java.lang.String)}
 method. The string value of this property is then interpreted
 as a <code>long</code> value, as per the
 <code>Long.decode</code> method, and a <code>Long</code> object
 representing this value is returned.
 <p><ul>
 <li>If the property value begins with the two ASCII characters
 <code>0x</code> or the ASCII character <code>#</code>, not followed by 
 a minus sign, then the rest of it is parsed as a hexadecimal integer
 exactly as for the method {@link #valueOf(java.lang.String, int)} 
 with radix 16. 
 <li>If the property value begins with the ASCII character
 <code>0</code> followed by another character, it is parsed as
 an octal integer exactly as by the method {@link
 #valueOf(java.lang.String, int)} with radix 8.
 <li>Otherwise the property value is parsed as a decimal
 integer exactly as by the method 
 {@link #valueOf(java.lang.String, int)} with radix 10.
 </ul>
 <p>
 Note that, in every case, neither <code>L</code>
 (<code>'&#92;u004C'</code>) nor <code>l</code>
 (<code>'&#92;u006C'</code>) is permitted to appear at the end
 of the property value as a type indicator, as would be
 permitted in Java programming language source code.
 <p>
 The second argument is the default value. The default value is
 returned if there is no property of the specified name, if the
 property does not have the correct numeric format, or if the
 specified name is empty or <code>null</code>.

 @param   nm   property name.
 @param   val   default value.
 @return  the <code>Long</code> value of the property.
 @see     java.lang.System#getProperty(java.lang.String)
 @see java.lang.System#getProperty(java.lang.String, java.lang.String)
 @see java.lang.Long#decode

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.lang.Long.compareTo(Long anotherLong)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares two <code>Long</code> objects numerically.

 @param   anotherLong   the <code>Long</code> to be compared.
 @return	the value <code>0</code> if this <code>Long</code> is
 		equal to the argument <code>Long</code>; a value less than
 		<code>0</code> if this <code>Long</code> is numerically less
 		than the argument <code>Long</code>; and a value greater 
 		than <code>0</code> if this <code>Long</code> is numerically
 		 greater than the argument <code>Long</code> (signed
 		 comparison).
 @since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Long.highestOneBit(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <tt>long</tt> value with at most a single one-bit, in the
 position of the highest-order ("leftmost") one-bit in the specified
 <tt>long</tt> value.  Returns zero if the specified value has no
 one-bits in its two's complement binary representation, that is, if it
 is equal to zero.

 @return a <tt>long</tt> value with a single one-bit, in the position
     of the highest-order one-bit in the specified value, or zero if
     the specified value is itself equal to zero.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Long.lowestOneBit(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <tt>long</tt> value with at most a single one-bit, in the
 position of the lowest-order ("rightmost") one-bit in the specified
 <tt>long</tt> value.  Returns zero if the specified value has no
 one-bits in its two's complement binary representation, that is, if it
 is equal to zero.

 @return a <tt>long</tt> value with a single one-bit, in the position
     of the lowest-order one-bit in the specified value, or zero if
     the specified value is itself equal to zero.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Long.numberOfLeadingZeros(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of zero bits preceding the highest-order
 ("leftmost") one-bit in the two's complement binary representation
 of the specified <tt>long</tt> value.  Returns 64 if the
 specified value has no one-bits in its two's complement representation,
 in other words if it is equal to zero.

 <p>Note that this method is closely related to the logarithm base 2.
 For all positive <tt>long</tt> values x:
 <ul>
 <li>floor(log<sub>2</sub>(x)) = <tt>63 - numberOfLeadingZeros(x)</tt>
 <li>ceil(log<sub>2</sub>(x)) = <tt>64 - numberOfLeadingZeros(x - 1)</tt>
 </ul>

 @return the number of zero bits preceding the highest-order
     ("leftmost") one-bit in the two's complement binary representation
     of the specified <tt>long</tt> value, or 64 if the value
     is equal to zero.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Long.numberOfTrailingZeros(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of zero bits following the lowest-order ("rightmost")
 one-bit in the two's complement binary representation of the specified
 <tt>long</tt> value.  Returns 64 if the specified value has no
 one-bits in its two's complement representation, in other words if it is
 equal to zero.

 @return the number of zero bits following the lowest-order ("rightmost")
     one-bit in the two's complement binary representation of the
     specified <tt>long</tt> value, or 64 if the value is equal
     to zero.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Long.bitCount(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of one-bits in the two's complement binary
 representation of the specified <tt>long</tt> value.  This function is
 sometimes referred to as the <i>population count</i>.

 @return the number of one-bits in the two's complement binary
     representation of the specified <tt>long</tt> value.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Long.rotateLeft(long i, int distance)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value obtained by rotating the two's complement binary
 representation of the specified <tt>long</tt> value left by the
 specified number of bits.  (Bits shifted out of the left hand, or
 high-order, side reenter on the right, or low-order.)

 <p>Note that left rotation with a negative distance is equivalent to
 right rotation: <tt>rotateLeft(val, -distance) == rotateRight(val,
 distance)</tt>.  Note also that rotation by any multiple of 64 is a
 no-op, so all but the last six bits of the rotation distance can be
 ignored, even if the distance is negative: <tt>rotateLeft(val,
 distance) == rotateLeft(val, distance & 0x3F)</tt>.

 @return the value obtained by rotating the two's complement binary
     representation of the specified <tt>long</tt> value left by the
     specified number of bits.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Long.rotateRight(long i, int distance)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value obtained by rotating the two's complement binary
 representation of the specified <tt>long</tt> value right by the
 specified number of bits.  (Bits shifted out of the right hand, or
 low-order, side reenter on the left, or high-order.)

 <p>Note that right rotation with a negative distance is equivalent to
 left rotation: <tt>rotateRight(val, -distance) == rotateLeft(val,
 distance)</tt>.  Note also that rotation by any multiple of 64 is a
 no-op, so all but the last six bits of the rotation distance can be
 ignored, even if the distance is negative: <tt>rotateRight(val,
 distance) == rotateRight(val, distance & 0x3F)</tt>.

 @return the value obtained by rotating the two's complement binary
     representation of the specified <tt>long</tt> value right by the
     specified number of bits.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Long.reverse(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value obtained by reversing the order of the bits in the
 two's complement binary representation of the specified <tt>long</tt>
 value.

 @return the value obtained by reversing order of the bits in the
     specified <tt>long</tt> value.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.lang.Long.signum(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the signum function of the specified <tt>long</tt> value.  (The
 return value is -1 if the specified value is negative; 0 if the
 specified value is zero; and 1 if the specified value is positive.)

 @return the signum function of the specified <tt>long</tt> value.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long java.lang.Long.reverseBytes(long i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value obtained by reversing the order of the bytes in the
 two's complement representation of the specified <tt>long</tt> value.

 @return the value obtained by reversing the bytes in the specified
     <tt>long</tt> value.
 @since 1.5

<!-- END DATA -->
