<!-- BEGIN KEY -->
protected class java.awt.Component.FlipBufferStrategy extends java.awt.image.BufferStrategy
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inner class for flipping buffers on a component.  That component must
 be a <code>Canvas</code> or <code>Window</code>.
 @see Canvas
 @see Window
 @see java.awt.image.BufferStrategy
 @author Michael Martak
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.Component.FlipBufferStrategy.numBuffers
<!-- END KEY -->
<!-- BEGIN DATA -->
 The number of buffers

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.BufferCapabilities java.awt.Component.FlipBufferStrategy.caps
<!-- END KEY -->
<!-- BEGIN DATA -->
 The buffering capabilities

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Image java.awt.Component.FlipBufferStrategy.drawBuffer
<!-- END KEY -->
<!-- BEGIN DATA -->
 The drawing buffer

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.image.VolatileImage java.awt.Component.FlipBufferStrategy.drawVBuffer
<!-- END KEY -->
<!-- BEGIN DATA -->
 The drawing buffer as a volatile image

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.awt.Component.FlipBufferStrategy.validatedContents
<!-- END KEY -->
<!-- BEGIN DATA -->
 Whether or not the drawing buffer has been recently restored from
 a lost state.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Component.FlipBufferStrategy(int numBuffers, BufferCapabilities caps) throws java.awt.AWTException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new flipping buffer strategy for this component.
 The component must be a <code>Canvas</code> or <code>Window</code>.
 @see Canvas
 @see Window
 @param numBuffers the number of buffers
 @param caps the capabilities of the buffers
 @exception AWTException if the capabilities supplied could not be
 supported or met
 @exception ClassCastException if the component is not a canvas or
 window.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Component.FlipBufferStrategy.createBuffers(int numBuffers, BufferCapabilities caps) throws java.awt.AWTException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates one or more complex, flipping buffers with the given
 capabilities.
 @param numBuffers number of buffers to create; must be greater than
 one
 @param caps the capabilities of the buffers.
 <code>BufferCapabilities.isPageFlipping</code> must be
 <code>true</code>.
 @exception AWTException if the capabilities supplied could not be
 supported or met
 @exception IllegalStateException if the component has no peer
 @exception IllegalArgumentException if numBuffers is less than two,
 or if <code>BufferCapabilities.isPageFlipping</code> is not
 <code>true</code>.
 @see java.awt.BufferCapabilities#isPageFlipping()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.Image java.awt.Component.FlipBufferStrategy.getBackBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @return direct access to the back buffer, as an image.
 @exception IllegalStateException if the buffers have not yet
 been created

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Component.FlipBufferStrategy.flip(BufferCapabilities.FlipContents flipAction)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Flipping moves the contents of the back buffer to the front buffer,
 either by copying or by moving the video pointer.
 @param flipAction an integer value describing the flipping action
 for the contents of the back buffer.  This should be one of the
 values of the <code>BufferCapabilities.FlipContents</code>
 property.
 @exception IllegalStateException if the buffers have not yet
 been created
 @see java.awt.BufferCapabilities#getFlipContents()

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Component.FlipBufferStrategy.destroyBuffers()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Destroys the buffers created through this object

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.BufferCapabilities java.awt.Component.FlipBufferStrategy.getCapabilities()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @return the buffering capabilities of this strategy

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Graphics java.awt.Component.FlipBufferStrategy.getDrawGraphics()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @return the graphics on the drawing buffer.  This method may not
 be synchronized for performance reasons; use of this method by multiple
 threads should be handled at the application level.  Disposal of the
 graphics object must be handled by the application.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Component.FlipBufferStrategy.revalidate()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Restore the drawing buffer if it has been lost

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Component.FlipBufferStrategy.contentsLost()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @return whether the drawing buffer was lost since the last call to
 <code>getDrawGraphics</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Component.FlipBufferStrategy.contentsRestored()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @return whether the drawing buffer was recently restored from a lost
 state and reinitialized to the default background color (white)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Component.FlipBufferStrategy.show()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Makes the next available buffer visible by either blitting or
 flipping.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Component.FlipBufferStrategy.dispose()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
