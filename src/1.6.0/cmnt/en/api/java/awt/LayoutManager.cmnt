<!-- BEGIN KEY -->
public interface java.awt.LayoutManager
<!-- END KEY -->
<!-- BEGIN DATA -->

 Defines the interface for classes that know how to lay out 
 <code>Container</code>s.
 <p>
 Swing's painting architecture assumes the children of a
 <code>JComponent</code> do not overlap.  If a
 <code>JComponent</code>'s <code>LayoutManager</code> allows
 children to overlap, the <code>JComponent</code> must override
 <code>isOptimizedDrawingEnabled</code> to return false.

 @see Container
 @see javax.swing.JComponent#isOptimizedDrawingEnabled

 @version	1.27, 11/17/05
 @author 	Sami Shaio
 @author 	Arthur van Hoff

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.LayoutManager.addLayoutComponent(String name, Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the layout manager uses a per-component string,
 adds the component <code>comp</code> to the layout,
 associating it 
 with the string specified by <code>name</code>.
 
 @param name the string to be associated with the component
 @param comp the component to be added

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.LayoutManager.removeLayoutComponent(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified component from the layout.
 @param comp the component to be removed

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.LayoutManager.preferredLayoutSize(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Calculates the preferred size dimensions for the specified 
 container, given the components it contains.
 @param parent the container to be laid out
  
 @see #minimumLayoutSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.LayoutManager.minimumLayoutSize(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Calculates the minimum size dimensions for the specified 
 container, given the components it contains.
 @param parent the component to be laid out
 @see #preferredLayoutSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.LayoutManager.layoutContainer(Container parent)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Lays out the specified container.
 @param parent the container to be laid out 

<!-- END DATA -->
