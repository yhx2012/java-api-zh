<!-- BEGIN KEY -->
public class java.awt.image.MemoryImageSource extends java.lang.Object implements java.awt.image.ImageProducer
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class is an implementation of the ImageProducer interface which
 uses an array to produce pixel values for an Image.  Here is an example
 which calculates a 100x100 image representing a fade from black to blue
 along the X axis and a fade from black to red along the Y axis:
 <pre>
 
	int w = 100;
	int h = 100;
	int pix[] = new int[w * h];
	int index = 0;
	for (int y = 0; y < h; y++) {
	    int red = (y * 255) / (h - 1);
	    for (int x = 0; x < w; x++) {
		int blue = (x * 255) / (w - 1);
		pix[index++] = (255 << 24) | (red << 16) | blue;
	    }
	}
	Image img = createImage(new MemoryImageSource(w, h, pix, 0, w));
 
 </pre>
 The MemoryImageSource is also capable of managing a memory image which
 varies over time to allow animation or custom rendering.  Here is an
 example showing how to set up the animation source and signal changes
 in the data (adapted from the MemoryAnimationSourceDemo by Garth Dickie):
 <pre>

	int pixels[];
	MemoryImageSource source;

	public void init() {
	    int width = 50;
	    int height = 50;
	    int size = width * height;
	    pixels = new int[size];

	    int value = getBackground().getRGB();
	    for (int i = 0; i < size; i++) {
		pixels[i] = value;
	    }

	    source = new MemoryImageSource(width, height, pixels, 0, width);
	    source.setAnimated(true);
	    image = createImage(source);
	}

	public void run() {
	    Thread me = Thread.currentThread( );
	    me.setPriority(Thread.MIN_PRIORITY);

	    while (true) {
		try {
		    thread.sleep(10);
		} catch( InterruptedException e ) {
		    return;
		}

		// Modify the values in the pixels array at (x, y, w, h)

		// Send the new data to the interested ImageConsumers
		source.newPixels(x, y, w, h);
	    }
	}

 </pre>

 @see ImageProducer

 @version	1.34 11/17/05
 @author 	Jim Graham
 @author	Animation capabilities inspired by the
		MemoryAnimationSource class written by Garth Dickie

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.MemoryImageSource(int w, int h, ColorModel cm, byte[] pix, int off, int scan)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an ImageProducer object which uses an array of bytes
 to produce data for an Image object.
 @param w the width of the rectangle of pixels
 @param h the height of the rectangle of pixels
 @param cm the specified <code>ColorModel</code>
 @param pix an array of pixels
 @param off the offset into the array of where to store the 
        first pixel
 @param scan the distance from one row of pixels to the next in
        the array
 @see java.awt.Component#createImage

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.MemoryImageSource(int w, int h, ColorModel cm, byte[] pix, int off, int scan, java.util.Hashtable<?, ?> props)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an ImageProducer object which uses an array of bytes
 to produce data for an Image object.
 @param w the width of the rectangle of pixels
 @param h the height of the rectangle of pixels
 @param cm the specified <code>ColorModel</code>
 @param pix an array of pixels
 @param off the offset into the array of where to store the 
        first pixel
 @param scan the distance from one row of pixels to the next in
        the array
 @param props a list of properties that the <code>ImageProducer</code>
        uses to process an image
 @see java.awt.Component#createImage

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.MemoryImageSource(int w, int h, ColorModel cm, int[] pix, int off, int scan)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an ImageProducer object which uses an array of integers
 to produce data for an Image object.
 @param w the width of the rectangle of pixels
 @param h the height of the rectangle of pixels
 @param cm the specified <code>ColorModel</code>
 @param pix an array of pixels
 @param off the offset into the array of where to store the 
        first pixel
 @param scan the distance from one row of pixels to the next in
        the array
 @see java.awt.Component#createImage

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.MemoryImageSource(int w, int h, ColorModel cm, int[] pix, int off, int scan, java.util.Hashtable<?, ?> props)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an ImageProducer object which uses an array of integers
 to produce data for an Image object.
 @param w the width of the rectangle of pixels
 @param h the height of the rectangle of pixels
 @param cm the specified <code>ColorModel</code>
 @param pix an array of pixels
 @param off the offset into the array of where to store the 
        first pixel
 @param scan the distance from one row of pixels to the next in
        the array
 @param props a list of properties that the <code>ImageProducer</code>
        uses to process an image
 @see java.awt.Component#createImage

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.MemoryImageSource(int w, int h, int[] pix, int off, int scan)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an ImageProducer object which uses an array of integers
 in the default RGB ColorModel to produce data for an Image object.
 @param w the width of the rectangle of pixels
 @param h the height of the rectangle of pixels
 @param pix an array of pixels
 @param off the offset into the array of where to store the 
        first pixel
 @param scan the distance from one row of pixels to the next in
        the array
 @see java.awt.Component#createImage
 @see ColorModel#getRGBdefault

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.MemoryImageSource(int w, int h, int[] pix, int off, int scan, java.util.Hashtable<?, ?> props)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an ImageProducer object which uses an array of integers
 in the default RGB ColorModel to produce data for an Image object.
 @param w the width of the rectangle of pixels
 @param h the height of the rectangle of pixels
 @param pix an array of pixels
 @param off the offset into the array of where to store the 
        first pixel
 @param scan the distance from one row of pixels to the next in
        the array
 @param props a list of properties that the <code>ImageProducer</code>
        uses to process an image
 @see java.awt.Component#createImage
 @see ColorModel#getRGBdefault

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.image.MemoryImageSource.addConsumer(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds an ImageConsumer to the list of consumers interested in
 data for this image.
 @param ic the specified <code>ImageConsumer</code>
 @throws NullPointerException if the specified
           <code>ImageConsumer</code> is null
 @see ImageConsumer

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.awt.image.MemoryImageSource.isConsumer(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines if an ImageConsumer is on the list of consumers currently
 interested in data for this image.
 @param ic the specified <code>ImageConsumer</code>
 @return <code>true</code> if the <code>ImageConsumer</code>
 is on the list; <code>false</code> otherwise.
 @see ImageConsumer

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.image.MemoryImageSource.removeConsumer(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes an ImageConsumer from the list of consumers interested in
 data for this image.
 @param ic the specified <code>ImageConsumer</code>
 @see ImageConsumer

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.MemoryImageSource.startProduction(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds an ImageConsumer to the list of consumers interested in
 data for this image and immediately starts delivery of the
 image data through the ImageConsumer interface.
 @param ic the specified <code>ImageConsumer</code>
 image data through the ImageConsumer interface.
 @see ImageConsumer

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.MemoryImageSource.requestTopDownLeftRightResend(ImageConsumer ic)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Requests that a given ImageConsumer have the image data delivered
 one more time in top-down, left-right order.
 @param ic the specified <code>ImageConsumer</code>
 @see ImageConsumer

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.image.MemoryImageSource.setAnimated(boolean animated)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Changes this memory image into a multi-frame animation or a
 single-frame static image depending on the animated parameter.
 <p>This method should be called immediately after the
 MemoryImageSource is constructed and before an image is
 created with it to ensure that all ImageConsumers will
 receive the correct multi-frame data.  If an ImageConsumer
 is added to this ImageProducer before this flag is set then
 that ImageConsumer will see only a snapshot of the pixel
 data that was available when it connected.
 @param animated <code>true</code> if the image is a 
       multi-frame animation

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.image.MemoryImageSource.setFullBufferUpdates(boolean fullbuffers)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Specifies whether this animated memory image should always be
 updated by sending the complete buffer of pixels whenever
 there is a change.
 This flag is ignored if the animation flag is not turned on
 through the setAnimated() method.
 <p>This method should be called immediately after the
 MemoryImageSource is constructed and before an image is
 created with it to ensure that all ImageConsumers will
 receive the correct pixel delivery hints.
 @param fullbuffers <code>true</code> if the complete pixel 
             buffer should always
 be sent
 @see #setAnimated

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.image.MemoryImageSource.newPixels()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sends a whole new buffer of pixels to any ImageConsumers that
 are currently interested in the data for this image and notify
 them that an animation frame is complete.
 This method only has effect if the animation flag has been
 turned on through the setAnimated() method.
 @see #newPixels(int, int, int, int, boolean)
 @see ImageConsumer
 @see #setAnimated

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.image.MemoryImageSource.newPixels(int x, int y, int w, int h)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sends a rectangular region of the buffer of pixels to any
 ImageConsumers that are currently interested in the data for
 this image and notify them that an animation frame is complete.
 This method only has effect if the animation flag has been
 turned on through the setAnimated() method.
 If the full buffer update flag was turned on with the
 setFullBufferUpdates() method then the rectangle parameters
 will be ignored and the entire buffer will always be sent.
 @param x the x coordinate of the upper left corner of the rectangle
 of pixels to be sent
 @param y the y coordinate of the upper left corner of the rectangle
 of pixels to be sent
 @param w the width of the rectangle of pixels to be sent
 @param h the height of the rectangle of pixels to be sent
 @see #newPixels(int, int, int, int, boolean)
 @see ImageConsumer
 @see #setAnimated
 @see #setFullBufferUpdates

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.image.MemoryImageSource.newPixels(int x, int y, int w, int h, boolean framenotify)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sends a rectangular region of the buffer of pixels to any
 ImageConsumers that are currently interested in the data for
 this image.
 If the framenotify parameter is true then the consumers are
 also notified that an animation frame is complete.
 This method only has effect if the animation flag has been
 turned on through the setAnimated() method.
 If the full buffer update flag was turned on with the
 setFullBufferUpdates() method then the rectangle parameters
 will be ignored and the entire buffer will always be sent.
 @param x the x coordinate of the upper left corner of the rectangle
 of pixels to be sent
 @param y the y coordinate of the upper left corner of the rectangle
 of pixels to be sent
 @param w the width of the rectangle of pixels to be sent
 @param h the height of the rectangle of pixels to be sent
 @param framenotify <code>true</code> if the consumers should be sent a
 {@link ImageConsumer#SINGLEFRAMEDONE SINGLEFRAMEDONE} notification
 @see ImageConsumer
 @see #setAnimated
 @see #setFullBufferUpdates

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.image.MemoryImageSource.newPixels(byte[] newpix, ColorModel newmodel, int offset, int scansize)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Changes to a new byte array to hold the pixels for this image.
 If the animation flag has been turned on through the setAnimated()
 method, then the new pixels will be immediately delivered to any
 ImageConsumers that are currently interested in the data for
 this image.
 @param newpix the new pixel array
 @param newmodel the specified <code>ColorModel</code>
 @param offset the offset into the array
 @param scansize the distance from one row of pixels to the next in
 the array
 @see #newPixels(int, int, int, int, boolean)
 @see #setAnimated

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.image.MemoryImageSource.newPixels(int[] newpix, ColorModel newmodel, int offset, int scansize)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Changes to a new int array to hold the pixels for this image.
 If the animation flag has been turned on through the setAnimated()
 method, then the new pixels will be immediately delivered to any
 ImageConsumers that are currently interested in the data for
 this image.
 @param newpix the new pixel array
 @param newmodel the specified <code>ColorModel</code>
 @param offset the offset into the array
 @param scansize the distance from one row of pixels to the next in
 the array
 @see #newPixels(int, int, int, int, boolean)
 @see #setAnimated

<!-- END DATA -->
