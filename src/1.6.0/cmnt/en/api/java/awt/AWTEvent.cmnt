<!-- BEGIN KEY -->
public abstract class java.awt.AWTEvent extends java.util.EventObject
<!-- END KEY -->
<!-- BEGIN DATA -->
 The root event class for all AWT events.
 This class and its subclasses supercede the original
 java.awt.Event class.
 Subclasses of this root AWTEvent class defined outside of the
 java.awt.event package should define event ID values greater than
 the value defined by RESERVED_ID_MAX.
 <p>
 The event masks defined in this class are needed by Component subclasses
 which are using Component.enableEvents() to select for event types not
 selected by registered listeners. If a listener is registered on a
 component, the appropriate event mask is already set internally by the
 component.
 <p>
 The masks are also used to specify to which types of events an
 AWTEventListener should listen. The masks are bitwise-ORed together
 and passed to Toolkit.addAWTEventListener.
 
 @see Component#enableEvents
 @see Toolkit#addAWTEventListener

 @see java.awt.event.ActionEvent
 @see java.awt.event.AdjustmentEvent
 @see java.awt.event.ComponentEvent
 @see java.awt.event.ContainerEvent
 @see java.awt.event.FocusEvent
 @see java.awt.event.InputMethodEvent
 @see java.awt.event.InvocationEvent
 @see java.awt.event.ItemEvent
 @see java.awt.event.HierarchyEvent
 @see java.awt.event.KeyEvent
 @see java.awt.event.MouseEvent
 @see java.awt.event.MouseWheelEvent
 @see java.awt.event.PaintEvent
 @see java.awt.event.TextEvent
 @see java.awt.event.WindowEvent

 @author Carl Quinn
 @author Amy Fowler
 @version 1.60 04/07/06
 @since 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.AWTEvent.id
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event's id.
 @serial
 @see #getID()
 @see #AWTEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.awt.AWTEvent.consumed
<!-- END KEY -->
<!-- BEGIN DATA -->
 Controls whether or not the event is sent back down to the peer once the
 source has processed it - false means it's sent to the peer; true means
 it's not. Semantic events always have a 'true' value since they were
 generated by the peer in response to a low-level event.
 @serial
 @see #consume
 @see #isConsumed

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.COMPONENT_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event mask for selecting component events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.CONTAINER_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event mask for selecting container events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.FOCUS_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event mask for selecting focus events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.KEY_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event mask for selecting key events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.MOUSE_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event mask for selecting mouse events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.MOUSE_MOTION_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event mask for selecting mouse motion events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.WINDOW_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event mask for selecting window events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.ACTION_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event mask for selecting action events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.ADJUSTMENT_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event mask for selecting adjustment events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.ITEM_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event mask for selecting item events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.TEXT_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event mask for selecting text events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.INPUT_METHOD_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event mask for selecting input method events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.PAINT_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event mask for selecting paint events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.INVOCATION_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event mask for selecting invocation events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.HIERARCHY_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event mask for selecting hierarchy events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event mask for selecting hierarchy bounds events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.MOUSE_WHEEL_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event mask for selecting mouse wheel events.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.WINDOW_STATE_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event mask for selecting window state events.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final long java.awt.AWTEvent.WINDOW_FOCUS_EVENT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event mask for selecting window focus events.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.AWTEvent.RESERVED_ID_MAX
<!-- END KEY -->
<!-- BEGIN DATA -->
 The maximum value for reserved AWT event IDs. Programs defining
 their own event IDs should use IDs greater than this value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.AWTEvent(Event event)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an AWTEvent object from the parameters of a 1.0-style event.
 @param event the old-style event

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.AWTEvent(Object source, int id)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an AWTEvent object with the specified source object and type.
 
 @param source the object where the event originated
 @param id the event type

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.AWTEvent.setSource(Object newSource)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retargets an event to a new source. This method is typically used to
 retarget an event to a lightweight child Component of the original
 heavyweight source.
 <p>
 This method is intended to be used only by event targeting subsystems,
 such as client-defined KeyboardFocusManagers. It is not for general
 client use.

 @param newSource the new Object to which the event should be dispatched
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.AWTEvent.getID()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the event type.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.AWTEvent.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a String representation of this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.AWTEvent.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representing the state of this <code>Event</code>.
 This method is intended to be used only for debugging purposes, and the 
 content and format of the returned string may vary between 
 implementations. The returned string may be empty but may not be 
 <code>null</code>.
 
 @return  a string representation of this event

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.AWTEvent.consume()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Consumes this event, if this event can be consumed. Only low-level,
 system events can be consumed

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.awt.AWTEvent.isConsumed()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether this event has been consumed.

<!-- END DATA -->
