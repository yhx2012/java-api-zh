<!-- BEGIN KEY -->
public class java.awt.MenuItem extends java.awt.MenuComponent implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
 All items in a menu must belong to the class
 <code>MenuItem</code>, or one of its subclasses.
 <p>
 The default <code>MenuItem</code> object embodies
 a simple labeled menu item.
 <p>
 This picture of a menu bar shows five menu items:
 <IMG SRC="doc-files/MenuBar-1.gif" alt="The following text describes this graphic."
 ALIGN=CENTER HSPACE=10 VSPACE=7>
 <br CLEAR=LEFT>
 The first two items are simple menu items, labeled
 <code>"Basic"</code> and <code>"Simple"</code>.
 Following these two items is a separator, which is itself
 a menu item, created with the label <code>"-"</code>.
 Next is an instance of <code>CheckboxMenuItem</code>
 labeled <code>"Check"</code>. The final menu item is a
 submenu labeled <code>"More&nbsp;Examples"</code>,
 and this submenu is an instance of <code>Menu</code>.
 <p>
 When a menu item is selected, AWT sends an action event to
 the menu item. Since the event is an
 instance of <code>ActionEvent</code>, the <code>processEvent</code>
 method examines the event and passes it along to
 <code>processActionEvent</code>. The latter method redirects the
 event to any <code>ActionListener</code> objects that have
 registered an interest in action events generated by this
 menu item.
 <P>
 Note that the subclass <code>Menu</code> overrides this behavior and
 does not send any event to the frame until one of its subitems is
 selected.

 @version 1.94, 07/11/06
 @author Sami Shaio

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean java.awt.MenuItem.enabled
<!-- END KEY -->
<!-- BEGIN DATA -->
 A value to indicate whether a menu item is enabled
 or not.  If it is enabled, <code>enabled</code> will
 be set to true.  Else <code>enabled</code> will
 be set to false.

 @serial
 @see #isEnabled()
 @see #setEnabled(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String java.awt.MenuItem.label
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>label</code> is the label of a menu item.
 It can be any string.

 @serial
 @see #getLabel()
 @see #setLabel(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String java.awt.MenuItem.actionCommand
<!-- END KEY -->
<!-- BEGIN DATA -->
 This field indicates the command tha has been issued
 by a  particular menu item.
 By default the <code>actionCommand</code>
 is the label of the menu item, unless it has been
 set using setActionCommand.

 @serial
 @see #setActionCommand(String)
 @see #getActionCommand()

<!-- END DATA -->
<!-- BEGIN KEY -->
 long java.awt.MenuItem.eventMask
<!-- END KEY -->
<!-- BEGIN DATA -->
 The eventMask is ONLY set by subclasses via enableEvents.
 The mask should NOT be set when listeners are registered
 so that we can distinguish the difference between when
 listeners request events and subclasses request them.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.MenuShortcut java.awt.MenuItem.shortcut
<!-- END KEY -->
<!-- BEGIN DATA -->
 A sequence of key stokes that ia associated with
 a menu item.
 Note :in 1.1.2 you must use setActionCommand()
 on a menu item in order for its shortcut to
 work.

 @serial
 @see #getShortcut()
 @see #setShortcut(MenuShortcut)
 @see #deleteShortcut()

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.MenuItem.menuItemSerializedDataVersion
<!-- END KEY -->
<!-- BEGIN DATA -->
 Menu item serialized data version.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuItem() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new MenuItem with an empty label and no keyboard
 shortcut.
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
 returns true.
 @see java.awt.GraphicsEnvironment#isHeadless
 @since    JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuItem(String label) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new MenuItem with the specified label
 and no keyboard shortcut. Note that use of "-" in
 a label is reserved to indicate a separator between
 menu items. By default, all menu items except for
 separators are enabled.
 @param       label the label for this menu item.
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
 returns true.
 @see java.awt.GraphicsEnvironment#isHeadless
 @since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuItem(String label, MenuShortcut s) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a menu item with an associated keyboard shortcut.
 Note that use of "-" in a label is reserved to indicate
 a separator between menu items. By default, all menu
 items except for separators are enabled.
 @param       label the label for this menu item.
 @param       s the instance of <code>MenuShortcut</code>
                       associated with this menu item.
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
 returns true.
 @see java.awt.GraphicsEnvironment#isHeadless
 @since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuItem.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the menu item's peer.  The peer allows us to modify the
 appearance of the menu item without changing its functionality.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.MenuItem.getLabel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the label for this menu item.
 @return  the label of this menu item, or <code>null</code>
                       if this menu item has no label.
 @see     java.awt.MenuItem#setLabel
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.MenuItem.setLabel(String label)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the label for this menu item to the specified label.
 @param     label   the new label, or <code>null</code> for no label.
 @see       java.awt.MenuItem#getLabel
 @since     JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.MenuItem.isEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks whether this menu item is enabled.
 @see        java.awt.MenuItem#setEnabled
 @since      JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.MenuItem.setEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets whether or not this menu item can be chosen.
 @param      b  if <code>true</code>, enables this menu item;
                       if <code>false</code>, disables it.
 @see        java.awt.MenuItem#isEnabled
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.MenuItem.enable()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated As of JDK version 1.1,
 replaced by <code>setEnabled(boolean)</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuItem.enable(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated As of JDK version 1.1,
 replaced by <code>setEnabled(boolean)</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.MenuItem.disable()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated As of JDK version 1.1,
 replaced by <code>setEnabled(boolean)</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuShortcut java.awt.MenuItem.getShortcut()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the <code>MenuShortcut</code> object associated with this
 menu item,
 @return      the menu shortcut associated with this menu item,
                   or <code>null</code> if none has been specified.
 @see         java.awt.MenuItem#setShortcut
 @since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuItem.setShortcut(MenuShortcut s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the <code>MenuShortcut</code> object associated with this
 menu item. If a menu shortcut is already associated with
 this menu item, it is replaced.
 @param       s  the menu shortcut to associate
                           with this menu item.
 @see         java.awt.MenuItem#getShortcut
 @since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuItem.deleteShortcut()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Delete any <code>MenuShortcut</code> object associated
 with this menu item.
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void java.awt.MenuItem.enableEvents(long eventsToEnable)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Enables event delivery to this menu item for events
 to be defined by the specified event mask parameter
 <p>
 Since event types are automatically enabled when a listener for
 that type is added to the menu item, this method only needs
 to be invoked by subclasses of <code>MenuItem</code> which desire to
 have the specified event types delivered to <code>processEvent</code>
 regardless of whether a listener is registered.

 @param       eventsToEnable the event mask defining the event types
 @see         java.awt.MenuItem#processEvent
 @see         java.awt.MenuItem#disableEvents
 @see         java.awt.Component#enableEvents
 @since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void java.awt.MenuItem.disableEvents(long eventsToDisable)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Disables event delivery to this menu item for events
 defined by the specified event mask parameter.

 @param       eventsToDisable the event mask defining the event types
 @see         java.awt.MenuItem#processEvent
 @see         java.awt.MenuItem#enableEvents
 @see         java.awt.Component#disableEvents
 @since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuItem.setActionCommand(String command)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the command name of the action event that is fired
 by this menu item.
 <p>
 By default, the action command is set to the label of
 the menu item.
 @param       command   the action command to be set
                                for this menu item.
 @see         java.awt.MenuItem#getActionCommand
 @since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.MenuItem.getActionCommand()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the command name of the action event that is fired
 by this menu item.
 @see         java.awt.MenuItem#setActionCommand
 @since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.MenuItem.addActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified action listener to receive action events
 from this menu item.
 If l is null, no exception is thrown and no action is performed.
 <p>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
 >AWT Threading Issues</a> for details on AWT's threading model.

 @param      l the action listener.
 @see        #removeActionListener
 @see        #getActionListeners
 @see        java.awt.event.ActionEvent
 @see        java.awt.event.ActionListener
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.MenuItem.removeActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified action listener so it no longer receives
 action events from this menu item.
 If l is null, no exception is thrown and no action is performed.
 <p>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
 >AWT Threading Issues</a> for details on AWT's threading model.

 @param      l the action listener.
 @see        #addActionListener
 @see        #getActionListeners
 @see        java.awt.event.ActionEvent
 @see        java.awt.event.ActionListener
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.event.ActionListener[] java.awt.MenuItem.getActionListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the action listeners
 registered on this menu item.

 @return all of this menu item's <code>ActionListener</code>s
         or an empty array if no action
         listeners are currently registered

 @see        #addActionListener
 @see        #removeActionListener
 @see        java.awt.event.ActionEvent
 @see        java.awt.event.ActionListener
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.awt.MenuItem.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the objects currently registered
 as <code><em>Foo</em>Listener</code>s
 upon this <code>MenuItem</code>.
 <code><em>Foo</em>Listener</code>s are registered using the
 <code>add<em>Foo</em>Listener</code> method.

 <p>
 You can specify the <code>listenerType</code> argument
 with a class literal, such as
 <code><em>Foo</em>Listener.class</code>.
 For example, you can query a
 <code>MenuItem</code> <code>m</code>
 for its action listeners with the following code:

 <pre>ActionListener[] als = (ActionListener[])(m.getListeners(ActionListener.class));</pre>

 If no such listeners exist, this method returns an empty array.

 @param listenerType the type of listeners requested; this parameter
          should specify an interface that descends from
          <code>java.util.EventListener</code>
 @return an array of all objects registered as
          <code><em>Foo</em>Listener</code>s on this menu item,
          or an empty array if no such
          listeners have been added
 @exception ClassCastException if <code>listenerType</code>
          doesn't specify a class or interface that implements
          <code>java.util.EventListener</code>

 @see #getActionListeners
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.MenuItem.processEvent(AWTEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Processes events on this menu item. If the event is an
 instance of <code>ActionEvent</code>, it invokes
 <code>processActionEvent</code>, another method
 defined by <code>MenuItem</code>.
 <p>
 Currently, menu items only support action events.
 <p>Note that if the event parameter is <code>null</code>
 the behavior is unspecified and may result in an
 exception.

 @param       e the event
 @see         java.awt.MenuItem#processActionEvent
 @since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.MenuItem.processActionEvent(ActionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Processes action events occurring on this menu item,
 by dispatching them to any registered
 <code>ActionListener</code> objects.
 This method is not called unless action events are
 enabled for this component. Action events are enabled
 when one of the following occurs:
 <p><ul>
 <li>An <code>ActionListener</code> object is registered
 via <code>addActionListener</code>.
 <li>Action events are enabled via <code>enableEvents</code>.
 </ul>
 <p>Note that if the event parameter is <code>null</code>
 the behavior is unspecified and may result in an
 exception.

 @param       e the action event
 @see         java.awt.event.ActionEvent
 @see         java.awt.event.ActionListener
 @see         java.awt.MenuItem#enableEvents
 @since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.MenuItem.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representing the state of this <code>MenuItem</code>.
 This method is intended to be used only for debugging purposes, and the 
 content and format of the returned string may vary between 
 implementations. The returned string may be empty but may not be 
 <code>null</code>.

 @return the parameter string of this menu item

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.MenuItem.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleContext associated with this MenuItem. 
 For menu items, the AccessibleContext takes the form of an 
 AccessibleAWTMenuItem. 
 A new AccessibleAWTMenuItem instance is created if necessary.

 @return an AccessibleAWTMenuItem that serves as the 
         AccessibleContext of this MenuItem
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.MenuItem.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads the <code>ObjectInputStream</code> and if it
 isn't <code>null</code> adds a listener to receive
 action events fired by the <code>Menu</code> Item.
 Unrecognized keys or values will be ignored.
 
 @param s the <code>ObjectInputStream</code> to read
 @exception HeadlessException if
   <code>GraphicsEnvironment.isHeadless</code> returns
   <code>true</code>
 @see #removeActionListener(ActionListener)
 @see #addActionListener(ActionListener)
 @see #writeObject(ObjectOutputStream)

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.MenuItem.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes default serializable fields to stream.  Writes
 a list of serializable <code>ActionListeners</code>
 as optional data. The non-serializable listeners are
 detected and no attempt is made to serialize them.

 @param s the <code>ObjectOutputStream</code> to write
 @serialData <code>null</code> terminated sequence of 0
   or more pairs; the pair consists of a <code>String</code> 
   and an <code>Object</code>; the <code>String</code> 
   indicates the type of object and is one of the following:
   <code>actionListenerK</code> indicating an
     <code>ActionListener</code> object

 @see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)
 @see #readObject(ObjectInputStream)

<!-- END DATA -->
