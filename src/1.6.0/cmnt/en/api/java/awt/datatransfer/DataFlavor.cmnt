<!-- BEGIN KEY -->
public class java.awt.datatransfer.DataFlavor extends java.lang.Object implements java.io.Externalizable, java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A {@code DataFlavor} provides meta information about data. {@code DataFlavor}
 is typically used to access data on the clipboard, or during
 a drag and drop operation.
 <p>
 An instance of {@code DataFlavor} encapsulates a content type as
 defined in <a href="http://www.ietf.org/rfc/rfc2045.txt">RFC 2045</a>
 and <a href="http://www.ietf.org/rfc/rfc2046.txt">RFC 2046</a>.
 A content type is typically referred to as a MIME type.
 <p>
 A content type consists of a media type (referred
 to as the primary type), a subtype, and optional parameters. See
 <a href="http://www.ietf.org/rfc/rfc2045.txt">RFC 2045</a>
 for details on the syntax of a MIME type.
 <p>
 The JRE data transfer implementation interprets the parameter &quot;class&quot;
 of a MIME type as <B>a representation class</b>.
 The representation class reflects the class of the object being
 transferred. In other words, the representation class is the type of
 object returned by {@link Transferable#getTransferData}.
 For example, the MIME type of {@link #imageFlavor} is
 {@code "image/x-java-image;class=java.awt.Image"},
 the primary type is {@code image}, the subtype is
 {@code x-java-image}, and the representation class is
 {@code java.awt.Image}. When {@code getTransferData} is invoked
 with a {@code DataFlavor} of {@code imageFlavor}, an instance of
 {@code java.awt.Image} is returned.
 It's important to note that {@code DataFlavor} does no error checking
 against the representation class. It is up to consumers of
 {@code DataFlavor}, such as {@code Transferable}, to honor the representation
 class.
 <br>
 Note, if you do not specify a representation class when
 creating a {@code DataFlavor}, the default
 representation class is used. See appropriate documentation for
 {@code DataFlavor}'s constructors.
 <p>
 Also, {@code DataFlavor} instances with the &quot;text&quot; primary
 MIME type may have a &quot;charset&quot; parameter. Refer to
 <a href="http://www.ietf.org/rfc/rfc2046.txt">RFC 2046</a> and
 {@link #selectBestTextFlavor} for details on &quot;text&quot; MIME types
 and the &quot;charset&quot; parameter.
 <p>
 Equality of {@code DataFlavors} is determined by the primary type,
 subtype, and representation class. Refer to {@link #equals(DataFlavor)} for
 details. When determining equality, any optional parameters are ignored.
 For example, the following produces two {@code DataFlavors} that
 are considered identical:
 <pre>
   DataFlavor flavor1 = new DataFlavor(Object.class, &quot;X-test/test; class=&lt;java.lang.Object&gt;; foo=bar&quot;);
   DataFlavor flavor2 = new DataFlavor(Object.class, &quot;X-test/test; class=&lt;java.lang.Object&gt;; x=y&quot;);
   // The following returns true.
   flavor1.equals(flavor2);
 </pre>
 As mentioned, {@code flavor1} and {@code flavor2} are considered identical.
 As such, asking a {@code Transferable} for either {@code DataFlavor} returns
 the same results.
 <p>
 For more information on the using data transfer with Swing see
 the <a href="http://java.sun.com/docs/books/tutorial/uiswing/misc/dnd.html">
 How to Use Drag and Drop and Data Transfer</a>,
 section in <em>Java Tutorial</em>.

 @version     1.83, 07/28/06
 @author      Blake Sullivan
 @author      Laurence P. G. Cable
 @author      Jeff Dunn

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.datatransfer.DataFlavor java.awt.datatransfer.DataFlavor.stringFlavor
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>DataFlavor</code> representing a Java Unicode String class,
 where:
 <pre>
     representationClass = java.lang.String
     mimeType           = "application/x-java-serialized-object"        
 </pre> 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.datatransfer.DataFlavor java.awt.datatransfer.DataFlavor.imageFlavor
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>DataFlavor</code> representing a Java Image class,
 where:
 <pre>
     representationClass = java.awt.Image
     mimeType            = "image/x-java-image"
 </pre>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.datatransfer.DataFlavor java.awt.datatransfer.DataFlavor.plainTextFlavor
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>DataFlavor</code> representing plain text with Unicode
 encoding, where:
 <pre>
     representationClass = InputStream
     mimeType            = "text/plain; charset=unicode"
 </pre>
 This <code>DataFlavor</code> has been <b>deprecated</b> because
 (1) Its representation is an InputStream, an 8-bit based representation,
 while Unicode is a 16-bit character set; and (2) The charset "unicode"
 is not well-defined. "unicode" implies a particular platform's
 implementation of Unicode, not a cross-platform implementation.

 @deprecated as of 1.3. Use <code>DataFlavor.getReaderForText(Transferable)</code> 
             instead of <code>Transferable.getTransferData(DataFlavor.plainTextFlavor)</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.awt.datatransfer.DataFlavor.javaSerializedObjectMimeType
<!-- END KEY -->
<!-- BEGIN DATA -->
 A MIME Content-Type of application/x-java-serialized-object represents
 a graph of Java object(s) that have been made persistent.

 The representation class associated with this <code>DataFlavor</code>
 identifies the Java type of an object returned as a reference
 from an invocation <code>java.awt.datatransfer.getTransferData</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.datatransfer.DataFlavor java.awt.datatransfer.DataFlavor.javaFileListFlavor
<!-- END KEY -->
<!-- BEGIN DATA -->
 To transfer a list of files to/from Java (and the underlying
 platform) a <code>DataFlavor</code> of this type/subtype and
 representation class of <code>java.util.List</code> is used.
 Each element of the list is required/guaranteed to be of type
 <code>java.io.File</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.awt.datatransfer.DataFlavor.javaJVMLocalObjectMimeType
<!-- END KEY -->
<!-- BEGIN DATA -->
 To transfer a reference to an arbitrary Java object reference that
 has no associated MIME Content-type, across a <code>Transferable</code>
 interface WITHIN THE SAME JVM, a <code>DataFlavor</code>
 with this type/subtype is used, with a <code>representationClass</code>
 equal to the type of the class/interface being passed across the
 <code>Transferable</code>.
 <p>
 The object reference returned from 
 <code>Transferable.getTransferData</code> for a <code>DataFlavor</code>
 with this MIME Content-Type is required to be
 an instance of the representation Class of the <code>DataFlavor</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.awt.datatransfer.DataFlavor.javaRemoteObjectMimeType
<!-- END KEY -->
<!-- BEGIN DATA -->
 In order to pass a live link to a Remote object via a Drag and Drop
 <code>ACTION_LINK</code> operation a Mime Content Type of
 application/x-java-remote-object should be used,
 where the representation class of the <code>DataFlavor</code> 
 represents the type of the <code>Remote</code> interface to be
 transferred.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.datatransfer.DataFlavor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new <code>DataFlavor</code>.  This constructor is
 provided only for the purpose of supporting the
 <code>Externalizable</code> interface.  It is not 
 intended for public (client) use.

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.datatransfer.DataFlavor(java.lang.Class<?> representationClass, String humanPresentableName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>DataFlavor</code> that represents a Java class.
 <p>
 The returned <code>DataFlavor</code> will have the following
 characteristics:
 <pre>
    representationClass = representationClass
    mimeType            = application/x-java-serialized-object        
 </pre>
 @param representationClass the class used to transfer data in this flavor
 @param humanPresentableName the human-readable string used to identify 
                 this flavor; if this parameter is <code>null</code>
		       then the value of the the MIME Content Type is used
 @exception NullPointerException if <code>representationClass</code> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.datatransfer.DataFlavor(String mimeType, String humanPresentableName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>DataFlavor</code> that represents a
 <code>MimeType</code>.
 <p>
 The returned <code>DataFlavor</code> will have the following
 characteristics:
 <p>
 If the <code>mimeType</code> is
 "application/x-java-serialized-object; class=&lt;representation class&gt;",
 the result is the same as calling
 <code>new DataFlavor(Class:forName(&lt;representation class&gt;)</code>.
 <p>
 Otherwise:
 <pre>
     representationClass = InputStream
     mimeType            = mimeType         
 </pre>
 @param mimeType the string used to identify the MIME type for this flavor;
                 if the the <code>mimeType</code> does not specify a
                 "class=" parameter, or if the class is not successfully
                 loaded, then an <code>IllegalArgumentException</code>
		       is thrown
 @param humanPresentableName the human-readable string used to identify 
                 this flavor; if this parameter is <code>null</code>
		       then the value of the the MIME Content Type is used
 @exception IllegalArgumentException if <code>mimeType</code> is
	               invalid or if the class is not successfully loaded
 @exception NullPointerException if <code>mimeType</code> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.datatransfer.DataFlavor(String mimeType, String humanPresentableName, ClassLoader classLoader) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>DataFlavor</code> that represents a
 <code>MimeType</code>.
 <p>
 The returned <code>DataFlavor</code> will have the following
 characteristics:
 <p>
 If the mimeType is
 "application/x-java-serialized-object; class=&lt;representation class&gt;",
 the result is the same as calling
 <code>new DataFlavor(Class:forName(&lt;representation class&gt;)</code>.
 <p>
 Otherwise:
 <pre>
     representationClass = InputStream
     mimeType            = mimeType         
 </pre>
 @param mimeType the string used to identify the MIME type for this flavor
 @param humanPresentableName the human-readable string used to 
		identify this flavor
 @param classLoader the class loader to use
 @exception ClassNotFoundException if the class is not loaded
 @exception IllegalArgumentException if <code>mimeType</code> is
	               invalid
 @exception NullPointerException if <code>mimeType</code> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.datatransfer.DataFlavor(String mimeType) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>DataFlavor</code> from a <code>mimeType</code> string.
 The string can specify a "class=<fully specified Java class name>"
 parameter to create a <code>DataFlavor</code> with the desired 
 representation class. If the string does not contain "class=" parameter,
 <code>java.io.InputStream</code> is used as default.
 
 @param mimeType the string used to identify the MIME type for this flavor;
                 if the class specified by "class=" parameter is not
                 successfully loaded, then an
		       <code>ClassNotFoundException</code> is thrown
 @exception ClassNotFoundException if the class is not loaded
 @exception IllegalArgumentException if <code>mimeType</code> is
	               invalid
 @exception NullPointerException if <code>mimeType</code> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static final java.lang.Class<?> java.awt.datatransfer.DataFlavor.tryToLoadClass(String className, ClassLoader fallback) throws java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tries to load a class from: the bootstrap loader, the system loader,
 the context loader (if one is present) and finally the loader specified.

 @param className the name of the class to be loaded
 @param fallback the fallback loader
 @return the class loaded
 @exception ClassNotFoundException if class is not found

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.datatransfer.DataFlavor.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 String representation of this <code>DataFlavor</code> and its
 parameters. The resulting <code>String</code> contains the name of
 the <code>DataFlavor</code> class, this flavor's MIME type, and its
 representation class. If this flavor has a primary MIME type of "text",
 supports the charset parameter, and has an encoded representation, the
 flavor's charset is also included. See <code>selectBestTextFlavor</code>
 for a list of text flavors which support the charset parameter.

 @return  string representation of this <code>DataFlavor</code>
 @see #selectBestTextFlavor

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.datatransfer.DataFlavor java.awt.datatransfer.DataFlavor.getTextPlainUnicodeFlavor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>DataFlavor</code> representing plain text with Unicode
 encoding, where:
 <pre>
     representationClass = java.io.InputStream
     mimeType            = "text/plain;
                            charset=&lt;platform default Unicode encoding&gt;"
 </pre>
 Sun's implementation for Microsoft Windows uses the encoding <code>utf-16le</code>.
 Sun's implementation for Solaris and Linux uses the encoding
 <code>iso-10646-ucs-2</code>.

 @return a <code>DataFlavor</code> representing plain text
    with Unicode encoding
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.datatransfer.DataFlavor java.awt.datatransfer.DataFlavor.selectBestTextFlavor(java.awt.datatransfer.DataFlavor[] availableFlavors)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Selects the best text <code>DataFlavor</code> from an array of <code>
 DataFlavor</code>s. Only <code>DataFlavor.stringFlavor</code>, and
 equivalent flavors, and flavors that have a primary MIME type of "text",
 are considered for selection.
 <p>
 Flavors are first sorted by their MIME types in the following order:
 <ul>
 <li>"text/sgml"
 <li>"text/xml"
 <li>"text/html"
 <li>"text/rtf"
 <li>"text/enriched"
 <li>"text/richtext"
 <li>"text/uri-list"
 <li>"text/tab-separated-values"
 <li>"text/t140"
 <li>"text/rfc822-headers"
 <li>"text/parityfec"
 <li>"text/directory"
 <li>"text/css"
 <li>"text/calendar"
 <li>"application/x-java-serialized-object"
 <li>"text/plain"
 <li>"text/&lt;other&gt;"
 </ul>
 <p>For example, "text/sgml" will be selected over
 "text/html", and <code>DataFlavor.stringFlavor</code> will be chosen
 over <code>DataFlavor.plainTextFlavor</code>.
 <p>
 If two or more flavors share the best MIME type in the array, then that
 MIME type will be checked to see if it supports the charset parameter.
 <p>
 The following MIME types support, or are treated as though they support,
 the charset parameter:
 <ul>
 <li>"text/sgml"
 <li>"text/xml"
 <li>"text/html"
 <li>"text/enriched"
 <li>"text/richtext"
 <li>"text/uri-list"
 <li>"text/directory"
 <li>"text/css"
 <li>"text/calendar"
 <li>"application/x-java-serialized-object"
 <li>"text/plain"
 </ul>
 The following MIME types do not support, or are treated as though they
 do not support, the charset parameter:
 <ul>
 <li>"text/rtf"
 <li>"text/tab-separated-values"
 <li>"text/t140"
 <li>"text/rfc822-headers"
 <li>"text/parityfec"
 </ul>
 For "text/&lt;other&gt;" MIME types, the first time the JRE needs to
 determine whether the MIME type supports the charset parameter, it will
 check whether the parameter is explicitly listed in an arbitrarily
 chosen <code>DataFlavor</code> which uses that MIME type. If so, the JRE
 will assume from that point on that the MIME type supports the charset
 parameter and will not check again. If the parameter is not explicitly
 listed, the JRE will assume from that point on that the MIME type does
 not support the charset parameter and will not check again. Because
 this check is performed on an arbitrarily chosen
 <code>DataFlavor</code>, developers must ensure that all
 <code>DataFlavor</code>s with a "text/&lt;other&gt;" MIME type specify
 the charset parameter if it is supported by that MIME type. Developers
 should never rely on the JRE to substitute the platform's default
 charset for a "text/&lt;other&gt;" DataFlavor. Failure to adhere to this
 restriction will lead to undefined behavior.
 <p>
 If the best MIME type in the array does not support the charset
 parameter, the flavors which share that MIME type will then be sorted by
 their representation classes in the following order:
 <code>java.io.InputStream</code>, <code>java.nio.ByteBuffer</code>,
 <code>[B</code>, &lt;all others&gt;.
 <p>
 If two or more flavors share the best representation class, or if no
 flavor has one of the three specified representations, then one of those
 flavors will be chosen non-deterministically.
 <p>
 If the best MIME type in the array does support the charset parameter,
 the flavors which share that MIME type will then be sorted by their
 representation classes in the following order:
 <code>java.io.Reader</code>, <code>java.lang.String</code>,
 <code>java.nio.CharBuffer</code>, <code>[C</code>, &lt;all others&gt;.
 <p>
 If two or more flavors share the best representation class, and that
 representation is one of the four explicitly listed, then one of those
 flavors will be chosen non-deterministically. If, however, no flavor has
 one of the four specified representations, the flavors will then be
 sorted by their charsets. Unicode charsets, such as "UTF-16", "UTF-8",
 "UTF-16BE", "UTF-16LE", and their aliases, are considered best. After
 them, the platform default charset and its aliases are selected.
 "US-ASCII" and its aliases are worst. All other charsets are chosen in
 alphabetical order, but only charsets supported by this implementation
 of the Java platform will be considered.
 <p>
 If two or more flavors share the best charset, the flavors will then
 again be sorted by their representation classes in the following order:
 <code>java.io.InputStream</code>, <code>java.nio.ByteBuffer</code>,
 <code>[B</code>, &lt;all others&gt;.
 <p>
 If two or more flavors share the best representation class, or if no
 flavor has one of the three specified representations, then one of those
 flavors will be chosen non-deterministically.

 @param availableFlavors an array of available <code>DataFlavor</code>s
 @return the best (highest fidelity) flavor according to the rules
         specified above, or <code>null</code>,
         if <code>availableFlavors</code> is <code>null</code>,
         has zero length, or contains no text flavors
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Reader java.awt.datatransfer.DataFlavor.getReaderForText(Transferable transferable) throws java.awt.datatransfer.UnsupportedFlavorException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a Reader for a text flavor, decoded, if necessary, for the expected
 charset (encoding). The supported representation classes are
 <code>java.io.Reader</code>, <code>java.lang.String</code>,
 <code>java.nio.CharBuffer</code>, <code>[C</code>,
 <code>java.io.InputStream</code>, <code>java.nio.ByteBuffer</code>,
 and <code>[B</code>.
 <p>
 Because text flavors which do not support the charset parameter are
 encoded in a non-standard format, this method should not be called for
 such flavors. However, in order to maintain backward-compatibility,
 if this method is called for such a flavor, this method will treat the
 flavor as though it supports the charset parameter and attempt to
 decode it accordingly. See <code>selectBestTextFlavor</code> for a list
 of text flavors which do not support the charset parameter.

 @param transferable the <code>Transferable</code> whose data will be
        requested in this flavor

 @return a <code>Reader</code> to read the <code>Transferable</code>'s
         data

 @exception IllegalArgumentException if the representation class
            is not one of the seven listed above
 @exception IllegalArgumentException if the <code>Transferable</code>
            has <code>null</code> data
 @exception NullPointerException if the <code>Transferable</code> is 
            <code>null</code>
 @exception UnsupportedEncodingException if this flavor's representation
            is <code>java.io.InputStream</code>,
            <code>java.nio.ByteBuffer</code>, or <code>[B</code> and
            this flavor's encoding is not supported by this
            implementation of the Java platform
 @exception UnsupportedFlavorException if the <code>Transferable</code>
            does not support this flavor
 @exception IOException if the data cannot be read because of an
            I/O error
 @see #selectBestTextFlavor
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.datatransfer.DataFlavor.getMimeType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the MIME type string for this <code>DataFlavor</code>.
 @return the MIME type string for this flavor

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class<?> java.awt.datatransfer.DataFlavor.getRepresentationClass()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>Class</code> which objects supporting this
 <code>DataFlavor</code> will return when this <code>DataFlavor</code>
 is requested.
 @return the <code>Class</code> which objects supporting this
 <code>DataFlavor</code> will return when this <code>DataFlavor</code>
 is requested

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.datatransfer.DataFlavor.getHumanPresentableName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the human presentable name for the data format that this
 <code>DataFlavor</code> represents.  This name would be localized
 for different countries.
 @return the human presentable name for the data format that this
    <code>DataFlavor</code> represents

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.datatransfer.DataFlavor.getPrimaryType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the primary MIME type for this <code>DataFlavor</code>.
 @return the primary MIME type of this <code>DataFlavor</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.datatransfer.DataFlavor.getSubType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the sub MIME type of this <code>DataFlavor</code>.
 @return the Sub MIME type of this <code>DataFlavor</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.datatransfer.DataFlavor.getParameter(String paramName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the human presentable name for this <code>DataFlavor</code>
 if <code>paramName</code> equals "humanPresentableName".  Otherwise
 returns the MIME type value associated with <code>paramName</code>.

 @param paramName the parameter name requested
 @return the value of the name parameter, or <code>null</code>
 	if there is no associated value

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.datatransfer.DataFlavor.setHumanPresentableName(String humanPresentableName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the human presentable name for the data format that this
 <code>DataFlavor</code> represents. This name would be localized
 for different countries.
 @param humanPresentableName the new human presentable name

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.datatransfer.DataFlavor.equals(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tests an arbitrary <code>Object</code> to this <code>DataFlavor</code>
 for equality. Two <code>DataFlavor</code>s are considered equal if and
 only if their MIME primary type and subtype and representation class are
 equal. Additionally, if the primary type is "text", the subtype denotes
 a text flavor which supports the charset parameter, and the
 representation class is not <code>java.io.Reader</code>,
 <code>java.lang.String</code>, <code>java.nio.CharBuffer</code>, or
 <code>[C</code>, the <code>charset</code> parameter must also be equal.
 If a charset is not explicitly specified for one or both
 <code>DataFlavor</code>s, the platform default encoding is assumed. See
 <code>selectBestTextFlavor</code> for a list of text flavors which
 support the charset parameter.

 @param o the <code>Object</code> to compare with <code>this</code>
 @return <code>true</code> if <code>that</code> is equivalent to this
         <code>DataFlavor</code>; <code>false</code> otherwise
 @see #selectBestTextFlavor

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.datatransfer.DataFlavor.equals(DataFlavor that)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tests a <code>DataFlavor</code> to this <code>DataFlavor</code> for
 equality. Two <code>DataFlavor</code>s are considered equal if and only
 if their MIME primary type and subtype and representation class are
 equal. Additionally, if the primary type is "text", the subtype denotes
 a text flavor which supports the charset parameter, and the
 representation class is not <code>java.io.Reader</code>,
 <code>java.lang.String</code>, <code>java.nio.CharBuffer</code>, or
 <code>[C</code>, the <code>charset</code> parameter must also be equal.
 If a charset is not explicitly specified for one or both
 <code>DataFlavor</code>s, the platform default encoding is assumed. See
 <code>selectBestTextFlavor</code> for a list of text flavors which
 support the charset parameter.

 @param that the <code>DataFlavor</code> to compare with
        <code>this</code>
 @return <code>true</code> if <code>that</code> is equivalent to this
         <code>DataFlavor</code>; <code>false</code> otherwise
 @see #selectBestTextFlavor

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.datatransfer.DataFlavor.equals(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares only the <code>mimeType</code> against the passed in 
 <code>String</code> and <code>representationClass</code> is
 not considered in the comparison.
 If <code>representationClass</code> needs to be compared, then
 <code>equals(new DataFlavor(s))</code> may be used.

 @deprecated As inconsistent with <code>hashCode()</code> contract,
             use <code>isMimeTypeEqual(String)</code> instead.
 @return true if the String (MimeType) is equal

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.datatransfer.DataFlavor.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns hash code for this <code>DataFlavor</code>.
 For two equal <code>DataFlavor</code>s, hash codes are equal.
 For the <code>String</code>
 that matches <code>DataFlavor.equals(String)</code>, it is not
 guaranteed that <code>DataFlavor</code>'s hash code is equal
 to the hash code of the <code>String</code>.

 @return a hash code for this <code>DataFlavor</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.datatransfer.DataFlavor.match(DataFlavor that)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tests a <code>DataFlavor</code> to this <code>DataFlavor</code> for
 equality. Two <code>DataFlavor</code>s are considered equal if and only
 if their MIME primary type and subtype and representation class are
 equal. Additionally, if the primary type is "text", the subtype denotes
 a text flavor which supports the charset parameter, and the
 representation class is not <code>java.io.Reader</code>,
 <code>java.lang.String</code>, <code>java.nio.CharBuffer</code>, or
 <code>[C</code>, the <code>charset</code> parameter must also be equal.
 If a charset is not explicitly specified for one or both
 <code>DataFlavor</code>s, the platform default encoding is assumed. See
 <code>selectBestTextFlavor</code> for a list of text flavors which
 support the charset parameter.

 @param that the <code>DataFlavor</code> to compare with
        <code>this</code>
 @return <code>true</code> if <code>that</code> is equivalent to this
         <code>DataFlavor</code>; <code>false</code> otherwise
 @see #selectBestTextFlavor
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.datatransfer.DataFlavor.isMimeTypeEqual(String mimeType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether the string representation of the MIME type passed in
 is equivalent to the MIME type of this <code>DataFlavor</code>.
 Parameters are not included in the comparison.

 @param mimeType the string representation of the MIME type
 @return true if the string representation of the MIME type passed in is
         equivalent to the MIME type of this <code>DataFlavor</code>;
         false otherwise
 @throws NullPointerException if mimeType is <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.awt.datatransfer.DataFlavor.isMimeTypeEqual(DataFlavor dataFlavor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares the <code>mimeType</code> of two <code>DataFlavor</code>
 objects. No parameters are considered.

 @param dataFlavor the <code>DataFlavor</code> to be compared
 @return true if the <code>MimeType</code>s are equal,
	otherwise false

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.datatransfer.DataFlavor.isMimeTypeSerializedObject()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Does the <code>DataFlavor</code> represent a serialized object?

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.datatransfer.DataFlavor.isRepresentationClassInputStream()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Does the <code>DataFlavor</code> represent a 
 <code>java.io.InputStream</code>?

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.datatransfer.DataFlavor.isRepresentationClassReader()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether the representation class for this
 <code>DataFlavor</code> is <code>java.io.Reader</code> or a subclass
 thereof.

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.datatransfer.DataFlavor.isRepresentationClassCharBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether the representation class for this
 <code>DataFlavor</code> is <code>java.nio.CharBuffer</code> or a
 subclass thereof.

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.datatransfer.DataFlavor.isRepresentationClassByteBuffer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether the representation class for this
 <code>DataFlavor</code> is <code>java.nio.ByteBuffer</code> or a
 subclass thereof.

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.datatransfer.DataFlavor.isRepresentationClassSerializable()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the representation class can be serialized.
 @return true if the representation class can be serialized

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.datatransfer.DataFlavor.isRepresentationClassRemote()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the representation class is <code>Remote</code>.
 @return true if the representation class is <code>Remote</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.datatransfer.DataFlavor.isFlavorSerializedObjectType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the <code>DataFlavor</code> specified represents
 a serialized object.
 @return true if the <code>DataFlavor</code> specified represents
	a Serialized Object

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.datatransfer.DataFlavor.isFlavorRemoteObjectType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the <code>DataFlavor</code> specified represents
 a remote object.
 @return true if the <code>DataFlavor</code> specified represents
	a Remote Object

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.datatransfer.DataFlavor.isFlavorJavaFileListType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the <code>DataFlavor</code> specified represents
 a list of file objects.
 @return true if the <code>DataFlavor</code> specified represents
	a List of File objects

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.datatransfer.DataFlavor.isFlavorTextType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether this <code>DataFlavor</code> is a valid text flavor for
 this implementation of the Java platform. Only flavors equivalent to
 <code>DataFlavor.stringFlavor</code> and <code>DataFlavor</code>s with
 a primary MIME type of "text" can be valid text flavors.
 <p>
 If this flavor supports the charset parameter, it must be equivalent to
 <code>DataFlavor.stringFlavor</code>, or its representation must be
 <code>java.io.Reader</code>, <code>java.lang.String</code>,
 <code>java.nio.CharBuffer</code>, <code>[C</code>,
 <code>java.io.InputStream</code>, <code>java.nio.ByteBuffer</code>, or
 <code>[B</code>. If the representation is
 <code>java.io.InputStream</code>, <code>java.nio.ByteBuffer</code>, or
 <code>[B</code>, then this flavor's <code>charset</code> parameter must
 be supported by this implementation of the Java platform. If a charset
 is not specified, then the platform default charset, which is always
 supported, is assumed.
 <p>
 If this flavor does not support the charset parameter, its
 representation must be <code>java.io.InputStream</code>,
 <code>java.nio.ByteBuffer</code>, or <code>[B</code>.
 <p>
 See <code>selectBestTextFlavor</code> for a list of text flavors which
 support the charset parameter.

 @return <code>true</code> if this <code>DataFlavor</code> is a valid
         text flavor as described above; <code>false</code> otherwise
 @see #selectBestTextFlavor
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.datatransfer.DataFlavor.writeExternal(ObjectOutput os) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Serializes this <code>DataFlavor</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.datatransfer.DataFlavor.readExternal(ObjectInput is) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Restores this <code>DataFlavor</code> from a Serialized state.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.awt.datatransfer.DataFlavor.clone() throws java.lang.CloneNotSupportedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a clone of this <code>DataFlavor</code>.
 @return a clone of this <code>DataFlavor</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.awt.datatransfer.DataFlavor.normalizeMimeTypeParameter(String parameterName, String parameterValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called on <code>DataFlavor</code> for every MIME Type parameter
 to allow <code>DataFlavor</code> subclasses to handle special
 parameters like the text/plain <code>charset</code>
 parameters, whose values are case insensitive.  (MIME type parameter
 values are supposed to be case sensitive.
 <p>
 This method is called for each parameter name/value pair and should
 return the normalized representation of the <code>parameterValue</code>.

 This method is never invoked by this implementation from 1.1 onwards.

 @deprecated

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.awt.datatransfer.DataFlavor.normalizeMimeType(String mimeType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called for each MIME type string to give <code>DataFlavor</code> subtypes 
 the opportunity to change how the normalization of MIME types is 
 accomplished.  One possible use would be to add default
 parameter/value pairs in cases where none are present in the MIME
 type string passed in.

 This method is never invoked by this implementation from 1.1 onwards.

 @deprecated

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.datatransfer.DataFlavor.readExternal(ObjectInput is) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Restores this <code>DataFlavor</code> from a Serialized state.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.datatransfer.DataFlavor.writeExternal(ObjectOutput os) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Serializes this <code>DataFlavor</code>.

<!-- END DATA -->
