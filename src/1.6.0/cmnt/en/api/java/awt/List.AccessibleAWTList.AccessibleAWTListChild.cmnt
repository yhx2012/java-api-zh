<!-- BEGIN KEY -->
protected class java.awt.List.AccessibleAWTList.AccessibleAWTListChild extends java.awt.Component.AccessibleAWTComponent implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class implements accessibility support for 
 List children.  It provides an implementation of the 
 Java Accessibility API appropriate to list children 
 user-interface elements.
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleContext for this object.  In the
 implementation of the Java Accessibility API for this class, 
 return this object, which acts as its own AccessibleContext.
 
 @return this object

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleRole java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getAccessibleRole()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the role of this object.  

 @return an instance of AccessibleRole describing the role of 
 the object
 @see AccessibleRole

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleStateSet java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getAccessibleStateSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the state set of this object.  The AccessibleStateSet of an 
 object is composed of a set of unique AccessibleState's.  A 
 change in the AccessibleStateSet of an object will cause a 
 PropertyChangeEvent to be fired for the 
 ACCESSIBLE_STATE_PROPERTY property.

 @return an instance of AccessibleStateSet containing the
 current state set of the object
 @see AccessibleStateSet
 @see AccessibleState
 @see #addPropertyChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Locale java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getLocale()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the locale of the component. If the component does not 
 have a locale, then the locale of its parent is returned.

 @return This component's locale.  If this component does not have
 a locale, the locale of its parent is returned.

 @exception IllegalComponentStateException
 If the Component does not have its own locale and has not yet 
 been added to a containment hierarchy such that the locale can
 be determined from the containing parent.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getAccessibleIndexInParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the 0-based index of this object in its accessible parent.

 @return the 0-based index of this object in its parent; -1 if 
 this object does not have an accessible parent.

 @see #getAccessibleParent
 @see #getAccessibleChildrenCount
 @see #getAccessibleChild

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getAccessibleChildrenCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of accessible children of the object.

 @return the number of accessible children of the object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getAccessibleChild(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the specified Accessible child of the object.  The 
 Accessible children of an Accessible object are zero-based, 
 so the first child of an Accessible child is at index 0, the 
 second child is at index 1, and so on.

 @param i zero-based index of child
 @return the Accessible child of the object
 @see #getAccessibleChildrenCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getBackground()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the background color of this object.

 @return the background color, if supported, of the object; 
 otherwise, null
 @see #setBackground

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.setBackground(Color c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the background color of this object.

 @param c the new Color for the background
 @see #setBackground

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getForeground()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the foreground color of this object.

 @return the foreground color, if supported, of the object; 
 otherwise, null
 @see #setForeground

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.setForeground(Color c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the foreground color of this object.

 @param c the new Color for the foreground
 @see #getForeground

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Cursor java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getCursor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the Cursor of this object.

 @return the Cursor, if supported, of the object; otherwise, null
 @see #setCursor

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.setCursor(Cursor cursor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the Cursor of this object.
 <p>
 The method may have no visual effect if the Java platform
 implementation and/or the native system do not support
 changing the mouse cursor shape.
 @param cursor the new Cursor for the object
 @see #getCursor

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the Font of this object.

 @return the Font,if supported, for the object; otherwise, null
 @see #setFont

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.setFont(Font f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the Font of this object.

 @param f the new Font for the object
 @see #getFont

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FontMetrics java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getFontMetrics(Font f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the FontMetrics of this object.

 @param f the Font
 @return the FontMetrics, if supported, the object; otherwise, null
 @see #getFont

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.List.AccessibleAWTList.AccessibleAWTListChild.isEnabled()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determine if the object is enabled.  Objects that are enabled
 will also have the AccessibleState.ENABLED state set in their
 AccessibleStateSet.

 @return true if object is enabled; otherwise, false
 @see #setEnabled
 @see AccessibleContext#getAccessibleStateSet
 @see AccessibleState#ENABLED
 @see AccessibleStateSet

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.setEnabled(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the enabled state of the object.

 @param b if true, enables this object; otherwise, disables it 
 @see #isEnabled

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.List.AccessibleAWTList.AccessibleAWTListChild.isVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determine if the object is visible.  Note: this means that the
 object intends to be visible; however, it may not be
 showing on the screen because one of the objects that this object
 is contained by is currently not visible.  To determine if an 
 object is showing on the screen, use isShowing().
 <p>Objects that are visible will also have the 
 AccessibleState.VISIBLE state set in their AccessibleStateSet.

 @return true if object is visible; otherwise, false
 @see #setVisible
 @see AccessibleContext#getAccessibleStateSet
 @see AccessibleState#VISIBLE
 @see AccessibleStateSet

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.setVisible(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the visible state of the object.

 @param b if true, shows this object; otherwise, hides it 
 @see #isVisible

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.List.AccessibleAWTList.AccessibleAWTListChild.isShowing()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determine if the object is showing.  This is determined by 
 checking the visibility of the object and visibility of the 
 object ancestors.
 Note: this will return true even if the object is obscured 
 by another (for example, it to object is underneath a menu 
 that was pulled down).

 @return true if object is showing; otherwise, false

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.List.AccessibleAWTList.AccessibleAWTListChild.contains(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Checks whether the specified point is within this object's 
 bounds, where the point's x and y coordinates are defined to 
 be relative to the coordinate system of the object. 

 @param p the Point relative to the coordinate system of the 
 object
 @return true if object contains Point; otherwise false
 @see #getBounds

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getLocationOnScreen()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the location of the object on the screen.

 @return location of object on screen; null if this object
 is not on the screen
 @see #getBounds
 @see #getLocation

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Gets the location of the object relative to the parent in the 
 form of a point specifying the object's top-left corner in the 
 screen's coordinate space.

 @return An instance of Point representing the top-left corner of
 the objects's bounds in the coordinate space of the screen; null
 if this object or its parent are not on the screen
 @see #getBounds
 @see #getLocationOnScreen

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.setLocation(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Sets the location of the object relative to the parent.
 @param p the new position for the top-left corner
 @see #getLocation

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Gets the bounds of this object in the form of a Rectangle object. 
 The bounds specify this object's width, height, and location
 relative to its parent. 

 @return A rectangle indicating this component's bounds; null if 
 this object is not on the screen.
 @see #contains

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.setBounds(Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Sets the bounds of this object in the form of a Rectangle 
 object.  The bounds specify this object's width, height, and 
 location relative to its parent.
	
 @param r rectangle indicating this component's bounds
 @see #getBounds

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getSize()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns the size of this object in the form of a Dimension 
 object.  The height field of the Dimension object contains this 
 objects's height, and the width field of the Dimension object 
 contains this object's width. 

 @return A Dimension object that indicates the size of this 
 component; null if this object is not on the screen
 @see #setSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.setSize(Dimension d)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Resizes this object so that it has width and height. 
	
 @param d - The dimension specifying the new size of the object. 
 @see #getSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.Accessible java.awt.List.AccessibleAWTList.AccessibleAWTListChild.getAccessibleAt(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>Accessible</code> child, if one exists,
 contained at the local coordinate <code>Point</code>.

 @param p the point relative to the coordinate system of this 
     object
 @return the <code>Accessible</code>, if it exists,
     at the specified location; otherwise <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.List.AccessibleAWTList.AccessibleAWTListChild.isFocusTraversable()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether this object can accept focus or not.   Objects 
 that can accept focus will also have the 
 <code>AccessibleState.FOCUSABLE</code> state set in their 
 <code>AccessibleStateSet</code>.

 @return true if object can accept focus; otherwise false
 @see AccessibleContext#getAccessibleStateSet
 @see AccessibleState#FOCUSABLE
 @see AccessibleState#FOCUSED
 @see AccessibleStateSet

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.requestFocus()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Requests focus for this object.  If this object cannot accept 
 focus, nothing will happen.  Otherwise, the object will attempt 
 to take focus.
 @see #isFocusTraversable

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.addFocusListener(FocusListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified focus listener to receive focus events from 
 this component. 

 @param l the focus listener
 @see #removeFocusListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.AccessibleAWTList.AccessibleAWTListChild.removeFocusListener(FocusListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified focus listener so it no longer receives 
 focus events from this component.

 @param l the focus listener
 @see #addFocusListener

<!-- END DATA -->
