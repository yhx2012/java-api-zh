<!-- BEGIN KEY -->
public class java.awt.DefaultKeyboardFocusManager extends java.awt.KeyboardFocusManager
<!-- END KEY -->
<!-- BEGIN DATA -->
 The default KeyboardFocusManager for AWT applications. Focus traversal is
 done in response to a Component's focus traversal keys, and using a
 Container's FocusTraversalPolicy.
 <p>
 Please see
 <a href="http://java.sun.com/docs/books/tutorial/uiswing/misc/focus.html">
 How to Use the Focus Subsystem</a>,
 a section in <em>The Java Tutorial</em>, and the
 <a href="../../java/awt/doc-files/FocusSpec.html">Focus Specification</a>
 for more information.

 @author David Mendenhall
 @version 1.40, 07/11/06

 @see FocusTraversalPolicy
 @see Component#setFocusTraversalKeys
 @see Component#getFocusTraversalKeys
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.DefaultKeyboardFocusManager.dispatchEvent(AWTEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method is called by the AWT event dispatcher requesting that the
 current KeyboardFocusManager dispatch the specified event on its behalf.
 DefaultKeyboardFocusManagers dispatch all FocusEvents, all WindowEvents
 related to focus, and all KeyEvents. These events are dispatched based
 on the KeyboardFocusManager's notion of the focus owner and the focused
 and active Windows, sometimes overriding the source of the specified
 AWTEvent. If this method returns <code>false</code>, then the AWT event
 dispatcher will attempt to dispatch the event itself.

 @param e the AWTEvent to be dispatched
 @return <code>true</code> if this method dispatched the event;
         <code>false</code> otherwise

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(KeyEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called by <code>dispatchEvent</code> if no other
 KeyEventDispatcher in the dispatcher chain dispatched the KeyEvent, or
 if no other KeyEventDispatchers are registered. If the event has not
 been consumed, its target is enabled, and the focus owner is not null,
 this method dispatches the event to its target. This method will also
 subsequently dispatch the event to all registered
 KeyEventPostProcessors. After all this operations are finished, 
 the event is passed to peers for processing.
 <p>
 In all cases, this method returns <code>true</code>, since
 DefaultKeyboardFocusManager is designed so that neither
 <code>dispatchEvent</code>, nor the AWT event dispatcher, should take
 further action on the event in any situation.

 @param e the KeyEvent to be dispatched
 @return <code>true</code>
 @see Component#dispatchEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.DefaultKeyboardFocusManager.postProcessKeyEvent(KeyEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method will be called by <code>dispatchKeyEvent</code>. It will
 handle any unconsumed KeyEvents that map to an AWT
 <code>MenuShortcut</code> by consuming the event and activating the
 shortcut.

 @param e the KeyEvent to post-process
 @return <code>true</code>
 @see #dispatchKeyEvent
 @see MenuShortcut

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.DefaultKeyboardFocusManager.processKeyEvent(Component focusedComponent, KeyEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method initiates a focus traversal operation if and only if the
 KeyEvent represents a focus traversal key for the specified
 focusedComponent. It is expected that focusedComponent is the current
 focus owner, although this need not be the case. If it is not,
 focus traversal will nevertheless proceed as if focusedComponent
 were the focus owner.

 @param focusedComponent the Component that is the basis for a focus
        traversal operation if the specified event represents a focus
        traversal key for the Component
 @param e the event that may represent a focus traversal key

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.awt.DefaultKeyboardFocusManager.enqueueKeyEvents(long after, Component untilFocused)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Delays dispatching of KeyEvents until the specified Component becomes
 the focus owner. KeyEvents with timestamps later than the specified
 timestamp will be enqueued until the specified Component receives a
 FOCUS_GAINED event, or the AWT cancels the delay request by invoking
 <code>dequeueKeyEvents</code> or <code>discardKeyEvents</code>.

 @param after timestamp of current event, or the current, system time if
        the current event has no timestamp, or the AWT cannot determine
        which event is currently being handled
 @param untilFocused Component which will receive a FOCUS_GAINED event
        before any pending KeyEvents
 @see #dequeueKeyEvents
 @see #discardKeyEvents

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.awt.DefaultKeyboardFocusManager.dequeueKeyEvents(long after, Component untilFocused)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Releases for normal dispatching to the current focus owner all
 KeyEvents which were enqueued because of a call to
 <code>enqueueKeyEvents</code> with the same timestamp and Component.
 If the given timestamp is less than zero, the outstanding enqueue
 request for the given Component with the <b>oldest</b> timestamp (if
 any) should be cancelled.

 @param after the timestamp specified in the call to
        <code>enqueueKeyEvents</code>, or any value < 0
 @param untilFocused the Component specified in the call to
        <code>enqueueKeyEvents</code>
 @see #enqueueKeyEvents
 @see #discardKeyEvents

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.awt.DefaultKeyboardFocusManager.discardKeyEvents(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Discards all KeyEvents which were enqueued because of one or more calls
 to <code>enqueueKeyEvents</code> with the specified Component, or one of
 its descendants.

 @param comp the Component specified in one or more calls to
        <code>enqueueKeyEvents</code>, or a parent of such a Component
 @see #enqueueKeyEvents
 @see #dequeueKeyEvents

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.DefaultKeyboardFocusManager.focusPreviousComponent(Component aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Focuses the Component before aComponent, typically based on a
 FocusTraversalPolicy.

 @param aComponent the Component that is the basis for the focus
        traversal operation
 @see FocusTraversalPolicy
 @see Component#transferFocusBackward

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.DefaultKeyboardFocusManager.focusNextComponent(Component aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Focuses the Component after aComponent, typically based on a
 FocusTraversalPolicy.

 @param aComponent the Component that is the basis for the focus
        traversal operation
 @see FocusTraversalPolicy
 @see Component#transferFocus

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.DefaultKeyboardFocusManager.upFocusCycle(Component aComponent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Moves the focus up one focus traversal cycle. Typically, the focus owner
 is set to aComponent's focus cycle root, and the current focus cycle
 root is set to the new focus owner's focus cycle root. If, however,
 aComponent's focus cycle root is a Window, then the focus owner is set
 to the focus cycle root's default Component to focus, and the current
 focus cycle root is unchanged.

 @param aComponent the Component that is the basis for the focus
        traversal operation
 @see Component#transferFocusUpCycle

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.DefaultKeyboardFocusManager.downFocusCycle(Container aContainer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Moves the focus down one focus traversal cycle. If aContainer is a focus
 cycle root, then the focus owner is set to aContainer's default
 Component to focus, and the current focus cycle root is set to
 aContainer. If aContainer is not a focus cycle root, then no focus
 traversal operation occurs.

 @param aContainer the Container that is the basis for the focus
        traversal operation
 @see Container#transferFocusDownCycle

<!-- END DATA -->
