<!-- BEGIN KEY -->
public interface java.awt.LayoutManager2 extends java.awt.LayoutManager
<!-- END KEY -->
<!-- BEGIN DATA -->

 Defines an interface for classes that know how to layout Containers
 based on a layout constraints object.

 This interface extends the LayoutManager interface to deal with layouts
 explicitly in terms of constraint objects that specify how and where
 components should be added to the layout.
 <p>
 This minimal extension to LayoutManager is intended for tool
 providers who wish to the creation of constraint-based layouts.
 It does not yet provide full, general support for custom
 constraint-based layout managers.

 @see LayoutManager
 @see Container

 @version	1.15, 11/17/05
 @author 	Jonni Kanerva

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.LayoutManager2.addLayoutComponent(Component comp, Object constraints)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified component to the layout, using the specified
 constraint object.
 @param comp the component to be added
 @param constraints  where/how the component is added to the layout.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.LayoutManager2.maximumLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Calculates the maximum size dimensions for the specified container,
 given the components it contains.
 @see java.awt.Component#getMaximumSize
 @see LayoutManager

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.LayoutManager2.getLayoutAlignmentX(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the alignment along the x axis.  This specifies how
 the component would like to be aligned relative to other 
 components.  The value should be a number between 0 and 1
 where 0 represents alignment along the origin, 1 is aligned
 the furthest away from the origin, 0.5 is centered, etc.

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.LayoutManager2.getLayoutAlignmentY(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the alignment along the y axis.  This specifies how
 the component would like to be aligned relative to other 
 components.  The value should be a number between 0 and 1
 where 0 represents alignment along the origin, 1 is aligned
 the furthest away from the origin, 0.5 is centered, etc.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.LayoutManager2.invalidateLayout(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invalidates the layout, indicating that if the layout manager
 has cached information it should be discarded.

<!-- END DATA -->
