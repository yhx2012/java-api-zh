<!-- BEGIN KEY -->
public class java.awt.print.Book extends java.lang.Object implements java.awt.print.Pageable
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>Book</code> class provides a representation of a document in
 which pages may have different page formats and page painters. This
 class uses the {@link Pageable} interface to interact with a
 {@link PrinterJob}.
 @see Pageable
 @see PrinterJob 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.print.Book()
<!-- END KEY -->
<!-- BEGIN DATA -->
	Creates a new, empty <code>Book</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.print.Book.getNumberOfPages()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of pages in this <code>Book</code>.
 @return the number of pages this <code>Book</code> contains.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.print.PageFormat java.awt.print.Book.getPageFormat(int pageIndex) throws java.lang.IndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the {@link PageFormat} of the page specified by
 <code>pageIndex</code>.
 @param pageIndex the zero based index of the page whose
            <code>PageFormat</code> is being requested
 @return the <code>PageFormat</code> describing the size and
          orientation of the page.
 @throws IndexOutOfBoundsException if the <code>Pageable</code> 
 		does not contain the requested page 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.print.Printable java.awt.print.Book.getPrintable(int pageIndex) throws java.lang.IndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the {@link Printable} instance responsible for rendering   
 the page specified by <code>pageIndex</code>.
 @param pageIndex the zero based index of the page whose
                  <code>Printable</code> is being requested
 @return the <code>Printable</code> that renders the page.
 @throws IndexOutOfBoundsException if the <code>Pageable</code>
            does not contain the requested page 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.print.Book.setPage(int pageIndex, Printable painter, PageFormat page) throws java.lang.IndexOutOfBoundsException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>PageFormat</code> and the <code>Painter</code> for a
 specified page number.
 @param pageIndex the zero based index of the page whose
                  painter and format is altered
 @param painter   the <code>Printable</code> instance that
                  renders the page
 @param page      the size and orientation of the page
 @throws IndexOutOfBoundsException if the specified
		page is not already in this <code>Book</code> 
 @throws NullPointerException if the <code>painter</code> or
		<code>page</code> argument is <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.print.Book.append(Printable painter, PageFormat page)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends a single page to the end of this <code>Book</code>.   
 @param painter   the <code>Printable</code> instance that
                  renders the page
 @param page      the size and orientation of the page 
 @throws <code>NullPointerException</code>
          If the <code>painter</code> or <code>page</code>
		argument is <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.print.Book.append(Printable painter, PageFormat page, int numPages)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends <code>numPages</code> pages to the end of this
 <code>Book</code>.  Each of the pages is associated with 
 <code>page</code>.
 @param painter   the <code>Printable</code> instance that renders
                  the page
 @param page      the size and orientation of the page
 @param numPages  the number of pages to be added to the
                  this <code>Book</code>. 
 @throws <code>NullPointerException</code>
          If the <code>painter</code> or <code>page</code>
		argument is <code>null</code>

<!-- END DATA -->
