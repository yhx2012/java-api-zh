<!-- BEGIN KEY -->
public final class java.awt.DisplayMode extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>DisplayMode</code> class encapsulates the bit depth, height,
 width, and refresh rate of a <code>GraphicsDevice</code>. The ability to 
 change graphics device's display mode is platform- and 
 configuration-dependent and may not always be available 
 (see {@link GraphicsDevice#isDisplayChangeSupported}).
 <p>
 For more information on full-screen exclusive mode API, see the
 <a href="http://java.sun.com/docs/books/tutorial/extra/fullscreen/index.html">
 Full-Screen Exclusive Mode API Tutorial</a>.

 @see GraphicsDevice
 @see GraphicsDevice#isDisplayChangeSupported
 @see GraphicsDevice#getDisplayModes
 @see GraphicsDevice#setDisplayMode
 @author Michael Martak
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.DisplayMode.BIT_DEPTH_MULTI
<!-- END KEY -->
<!-- BEGIN DATA -->
 Value of the bit depth if multiple bit depths are supported in this
 display mode.
 @see #getBitDepth

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.DisplayMode.REFRESH_RATE_UNKNOWN
<!-- END KEY -->
<!-- BEGIN DATA -->
 Value of the refresh rate if not known.
 @see #getRefreshRate

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.DisplayMode(int width, int height, int bitDepth, int refreshRate)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a new display mode object with the supplied parameters.
 @param width the width of the display, in pixels
 @param height the height of the display, in pixels
 @param bitDepth the bit depth of the display, in bits per
        pixel.  This can be <code>BIT_DEPTH_MULTI</code> if multiple
        bit depths are available.
 @param refreshRate the refresh rate of the display, in hertz.
        This can be <code>REFRESH_RATE_UNKNOWN</code> if the
        information is not available.
 @see #BIT_DEPTH_MULTI
 @see #REFRESH_RATE_UNKNOWN

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.DisplayMode.getHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the height of the display, in pixels.
 @return the height of the display, in pixels

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.DisplayMode.getWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the width of the display, in pixels.
 @return the width of the display, in pixels

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.DisplayMode.getBitDepth()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the bit depth of the display, in bits per pixel.  This may be
 <code>BIT_DEPTH_MULTI</code> if multiple bit depths are supported in
 this display mode.

 @return the bit depth of the display, in bits per pixel.
 @see #BIT_DEPTH_MULTI

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.DisplayMode.getRefreshRate()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the refresh rate of the display, in hertz.  This may be
 <code>REFRESH_RATE_UNKNOWN</code> if the information is not available.

 @return the refresh rate of the display, in hertz.
 @see #REFRESH_RATE_UNKNOWN

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.DisplayMode.equals(DisplayMode dm)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether the two display modes are equal.
 @return whether the two display modes are equal

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.DisplayMode.equals(Object dm)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.DisplayMode.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
