<!-- BEGIN KEY -->
public class java.awt.dnd.DropTargetDragEvent extends java.awt.dnd.DropTargetEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>DropTargetDragEvent</code> is delivered to a 
 <code>DropTargetListener</code> via its
 dragEnter() and dragOver() methods.
 <p>
 The <code>DropTargetDragEvent</code> reports the <i>source drop actions</i>
 and the <i>user drop action</i> that reflect the current state of 
 the drag operation.
 <p>
 <i>Source drop actions</i> is a bitwise mask of <code>DnDConstants</code>
 that represents the set of drop actions supported by the drag source for 
 this drag operation.
 <p>
 <i>User drop action</i> depends on the drop actions supported by the drag
 source and the drop action selected by the user. The user can select a drop
 action by pressing modifier keys during the drag operation: 
 <pre> 
   Ctrl + Shift -> ACTION_LINK
   Ctrl         -> ACTION_COPY
   Shift        -> ACTION_MOVE
 </pre> 
 If the user selects a drop action, the <i>user drop action</i> is one of 
 <code>DnDConstants</code> that represents the selected drop action if this
 drop action is supported by the drag source or
 <code>DnDConstants.ACTION_NONE</code> if this drop action is not supported 
 by the drag source.
 <p>
 If the user doesn't select a drop action, the set of
 <code>DnDConstants</code> that represents the set of drop actions supported
 by the drag source is searched for <code>DnDConstants.ACTION_MOVE</code>,
 then for <code>DnDConstants.ACTION_COPY</code>, then for
 <code>DnDConstants.ACTION_LINK</code> and the <i>user drop action</i> is the
 first constant found. If no constant is found the <i>user drop action</i>
 is <code>DnDConstants.ACTION_NONE</code>.

 @version 	1.25, 11/17/05
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.Point java.awt.dnd.DropTargetDragEvent.location
<!-- END KEY -->
<!-- BEGIN DATA -->
 The location of the drag cursor's hotspot in Component coordinates.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.dnd.DropTargetDragEvent.actions
<!-- END KEY -->
<!-- BEGIN DATA -->
 The source drop actions.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.dnd.DropTargetDragEvent.dropAction
<!-- END KEY -->
<!-- BEGIN DATA -->
 The user drop action.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DropTargetDragEvent(DropTargetContext dtc, Point cursorLocn, int dropAction, int srcActions)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a <code>DropTargetDragEvent</code> given the
 <code>DropTargetContext</code> for this operation,
 the location of the "Drag" <code>Cursor</code>'s hotspot 
 in the <code>Component</code>'s coordinates, the
 user drop action, and the source drop actions.
 <P>
 @param dtc        The DropTargetContext for this operation
 @param cursorLocn The location of the "Drag" Cursor's 
 hotspot in Component coordinates
 @param dropAction The user drop action
 @param srcActions The source drop actions
 
 @throws NullPointerException if cursorLocn is null
 @throws <code>IllegalArgumentException</code> if dropAction is not one of
         <code>DnDConstants</code>.
 @throws <code>IllegalArgumentException</code> if srcActions is not
         a bitwise mask of <code>DnDConstants</code>.
 @throws <code>IllegalArgumentException</code> if dtc is <code>null</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.dnd.DropTargetDragEvent.getLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns a <code>Point</code>
 indicating the <code>Cursor</code>'s current
 location within the <code>Component'</code>s
 coordinates.
 <P>
 @return the current cursor location in 
 <code>Component</code>'s coords.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.datatransfer.DataFlavor[] java.awt.dnd.DropTargetDragEvent.getCurrentDataFlavors()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns the current <code>DataFlavor</code>s from the
 <code>DropTargetContext</code>.
 <P>
 @return current DataFlavors from the DropTargetContext

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.awt.datatransfer.DataFlavor> java.awt.dnd.DropTargetDragEvent.getCurrentDataFlavorsAsList()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns the current <code>DataFlavor</code>s
 as a <code>java.util.List</code>
 <P>
 @return a <code>java.util.List</code> of the Current <code>DataFlavor</code>s

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.dnd.DropTargetDragEvent.isDataFlavorSupported(DataFlavor df)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns a <code>boolean</code> indicating
 if the specified <code>DataFlavor</code> is supported.
 <P>
 @param df the <code>DataFlavor</code> to test
 <P>
 @return if a particular DataFlavor is supported

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.dnd.DropTargetDragEvent.getSourceActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns the source drop actions.
 
 @return the source drop actions

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.dnd.DropTargetDragEvent.getDropAction()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns the user drop action.
 
 @return the user drop action

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.datatransfer.Transferable java.awt.dnd.DropTargetDragEvent.getTransferable()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns the Transferable object that represents
 the data associated with the current drag operation.
 
 @return the Transferable associated with the drag operation
 @throws InvalidDnDOperationException if the data associated with the drag
         operation is not available

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTargetDragEvent.acceptDrag(int dragOperation)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Accepts the drag.

 This method should be called from a
 <code>DropTargetListeners</code> <code>dragEnter</code>,
 <code>dragOver</code>, and <code>dropActionChanged</code>
 methods if the implementation wishes to accept an operation
 from the srcActions other than the one selected by
 the user as represented by the <code>dropAction</code>.
 
 @param dragOperation the operation accepted by the target

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTargetDragEvent.rejectDrag()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Rejects the drag as a result of examining either the
 <code>dropAction</code> or the available <code>DataFlavor</code>
 types.

<!-- END DATA -->
