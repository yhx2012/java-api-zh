<!-- BEGIN KEY -->
public class java.awt.dnd.DropTargetDropEvent extends java.awt.dnd.DropTargetEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>DropTargetDropEvent</code> is delivered 
 via the <code>DropTargetListener</code> drop() method. 
 <p>
 The <code>DropTargetDropEvent</code> reports the <i>source drop actions</i>
 and the <i>user drop action</i> that reflect the current state of the
 drag-and-drop operation. 
 <p>
 <i>Source drop actions</i> is a bitwise mask of <code>DnDConstants</code>
 that represents the set of drop actions supported by the drag source for 
 this drag-and-drop operation.
 <p>
 <i>User drop action</i> depends on the drop actions supported by the drag
 source and the drop action selected by the user. The user can select a drop
 action by pressing modifier keys during the drag operation: 
 <pre> 
   Ctrl + Shift -> ACTION_LINK
   Ctrl         -> ACTION_COPY
   Shift        -> ACTION_MOVE
 </pre> 
 If the user selects a drop action, the <i>user drop action</i> is one of 
 <code>DnDConstants</code> that represents the selected drop action if this
 drop action is supported by the drag source or
 <code>DnDConstants.ACTION_NONE</code> if this drop action is not supported 
 by the drag source.
 <p>
 If the user doesn't select a drop action, the set of
 <code>DnDConstants</code> that represents the set of drop actions supported
 by the drag source is searched for <code>DnDConstants.ACTION_MOVE</code>,
 then for <code>DnDConstants.ACTION_COPY</code>, then for
 <code>DnDConstants.ACTION_LINK</code> and the <i>user drop action</i> is the
 first constant found. If no constant is found the <i>user drop action</i>
 is <code>DnDConstants.ACTION_NONE</code>.
 
 @version 	1.29, 11/17/05
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.Point java.awt.dnd.DropTargetDropEvent.location
<!-- END KEY -->
<!-- BEGIN DATA -->
 The location of the drag cursor's hotspot in Component coordinates.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.dnd.DropTargetDropEvent.actions
<!-- END KEY -->
<!-- BEGIN DATA -->
 The source drop actions.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.dnd.DropTargetDropEvent.dropAction
<!-- END KEY -->
<!-- BEGIN DATA -->
 The user drop action.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean java.awt.dnd.DropTargetDropEvent.isLocalTx
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>true</code> if the source is in the same JVM as the target.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DropTargetDropEvent(DropTargetContext dtc, Point cursorLocn, int dropAction, int srcActions)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a <code>DropTargetDropEvent</code> given
 the <code>DropTargetContext</code> for this operation, 
 the location of the drag <code>Cursor</code>'s
 hotspot in the <code>Component</code>'s coordinates, 
 the currently
 selected user drop action, and the current set of
 actions supported by the source.
 By default, this constructor 
 assumes that the target is not in the same virtual machine as 
 the source; that is, {@link #isLocalTransfer()} will 
 return <code>false</code>.
 <P>
 @param dtc        The <code>DropTargetContext</code> for this operation
 @param cursorLocn The location of the "Drag" Cursor's 
 hotspot in <code>Component</code> coordinates
 @param dropAction the user drop action.
 @param srcActions the source drop actions.
 
 @throws <code>NullPointerException</code> 
 if cursorLocn is <code>null</code>
 @throws <code>IllegalArgumentException</code> if dropAction is not one of
         <code>DnDConstants</code>.
 @throws <code>IllegalArgumentException</code> if srcActions is not
         a bitwise mask of <code>DnDConstants</code>.
 @throws <code>IllegalArgumentException</code> if dtc is <code>null</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DropTargetDropEvent(DropTargetContext dtc, Point cursorLocn, int dropAction, int srcActions, boolean isLocal)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a <code>DropTargetEvent</code> given the 
 <code>DropTargetContext</code> for this operation,
 the location of the drag <code>Cursor</code>'s hotspot 
 in the <code>Component</code>'s 
 coordinates, the currently selected user drop action, 
 the current set of actions supported by the source,
 and a <code>boolean</code> indicating if the source is in the same JVM
 as the target.
 <P>
 @param dtc        The DropTargetContext for this operation
 @param cursorLocn The location of the "Drag" Cursor's 
 hotspot in Component's coordinates
 @param dropAction the user drop action.
 @param srcActions the source drop actions.
 @param isLocal  True if the source is in the same JVM as the target

 @throws <code>NullPointerException</code> if cursorLocn is
         <code>null</code> 
 @throws <code>IllegalArgumentException</code> if dropAction is not one of
         <code>DnDConstants</code>.
 @throws <code>IllegalArgumentException</code> if srcActions is not
         a bitwise mask of <code>DnDConstants</code>.
 @throws <code>IllegalArgumentException</code> if dtc is <code>null</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.dnd.DropTargetDropEvent.getLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns a <code>Point</code>
 indicating the <code>Cursor</code>'s current
 location in the <code>Component</code>'s coordinates.
 <P>
 @return the current <code>Cursor</code> location in Component's coords.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.datatransfer.DataFlavor[] java.awt.dnd.DropTargetDropEvent.getCurrentDataFlavors()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns the current DataFlavors.
 <P>
 @return current DataFlavors

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.awt.datatransfer.DataFlavor> java.awt.dnd.DropTargetDropEvent.getCurrentDataFlavorsAsList()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns the currently available
 <code>DataFlavor</code>s as a <code>java.util.List</code>.
 <P>
 @return the currently available DataFlavors as a java.util.List

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.dnd.DropTargetDropEvent.isDataFlavorSupported(DataFlavor df)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns a <code>boolean</code> indicating if the
 specified <code>DataFlavor</code> is available
 from the source.
 <P>
 @param df the <code>DataFlavor</code> to test
 <P>
 @return if the DataFlavor specified is available from the source

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.dnd.DropTargetDropEvent.getSourceActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns the source drop actions.
 
 @return the source drop actions.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.dnd.DropTargetDropEvent.getDropAction()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns the user drop action.
 
 @return the user drop actions.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.datatransfer.Transferable java.awt.dnd.DropTargetDropEvent.getTransferable()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns the <code>Transferable</code> object 
 associated with the drop.
 <P>
 @return the <code>Transferable</code> associated with the drop

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTargetDropEvent.acceptDrop(int dropAction)
<!-- END KEY -->
<!-- BEGIN DATA -->
 accept the drop, using the specified action.
 <P>
 @param dropAction the specified action

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTargetDropEvent.rejectDrop()
<!-- END KEY -->
<!-- BEGIN DATA -->
 reject the Drop.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTargetDropEvent.dropComplete(boolean success)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method notifies the <code>DragSource</code> 
 that the drop transfer(s) are completed.
 <P>
 @param success a <code>boolean</code> indicating that the drop transfer(s) are completed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.dnd.DropTargetDropEvent.isLocalTransfer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns an <code>int</code> indicating if
 the source is in the same JVM as the target.
 <P>
 @return if the Source is in the same JVM

<!-- END DATA -->
