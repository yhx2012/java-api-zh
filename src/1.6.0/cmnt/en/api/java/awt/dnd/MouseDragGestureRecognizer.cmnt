<!-- BEGIN KEY -->
public abstract class java.awt.dnd.MouseDragGestureRecognizer extends java.awt.dnd.DragGestureRecognizer implements java.awt.event.MouseListener, java.awt.event.MouseMotionListener
<!-- END KEY -->
<!-- BEGIN DATA -->
 This abstract subclass of <code>DragGestureRecognizer</code>
 defines a <code>DragGestureRecognizer</code>
 for mouse-based gestures.

 Each platform implements its own concrete subclass of this class,
 available via the Toolkit.createDragGestureRecognizer() method, 
 to encapsulate
 the recognition of the platform dependent mouse gesture(s) that initiate
 a Drag and Drop operation.
 <p>
 Mouse drag gesture recognizers should honor the
 drag gesture motion threshold, available through
 {@link DragSource#getDragThreshold}.
 A drag gesture should be recognized only when the distance
 in either the horizontal or vertical direction between 
 the location of the latest mouse dragged event and the 
 location of the corresponding mouse button pressed event
 is greater than the drag gesture motion threshold.
 <p>
 Drag gesture recognizers created with
 {@link DragSource#createDefaultDragGestureRecognizer}
 follow this convention.

 @author Laurence P. G. Cable
 @version 1.15

 @see java.awt.dnd.DragGestureListener
 @see java.awt.dnd.DragGestureEvent
 @see java.awt.dnd.DragSource

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.dnd.MouseDragGestureRecognizer(DragSource ds, Component c, int act, DragGestureListener dgl)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a new <code>MouseDragGestureRecognizer</code> 
 given the <code>DragSource</code> for the 
 <code>Component</code> c, the <code>Component</code> 
 to observe, the action(s)
 permitted for this drag operation, and 
 the <code>DragGestureListener</code> to 
 notify when a drag gesture is detected.
 <P>
 @param ds  The DragSource for the Component c
 @param c   The Component to observe
 @param act The actions permitted for this Drag
 @param dgl The DragGestureListener to notify when a gesture is detected


<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.dnd.MouseDragGestureRecognizer(DragSource ds, Component c, int act)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a new <code>MouseDragGestureRecognizer</code> 
 given the <code>DragSource</code> for 
 the <code>Component</code> c, 
 the <code>Component</code> to observe, and the action(s)
 permitted for this drag operation.
 <P>
 @param ds  The DragSource for the Component c
 @param c   The Component to observe
 @param act The actions permitted for this drag

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.dnd.MouseDragGestureRecognizer(DragSource ds, Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a new <code>MouseDragGestureRecognizer</code> 
 given the <code>DragSource</code> for the 
 <code>Component</code> c, and the 
 <code>Component</code> to observe.
 <P>
 @param ds  The DragSource for the Component c
 @param c   The Component to observe

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.dnd.MouseDragGestureRecognizer(DragSource ds)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a new <code>MouseDragGestureRecognizer</code>
 given the <code>DragSource</code> for the <code>Component</code>.
 <P>
 @param ds  The DragSource for the Component

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.dnd.MouseDragGestureRecognizer.registerListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 register this DragGestureRecognizer's Listeners with the Component

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.dnd.MouseDragGestureRecognizer.unregisterListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 unregister this DragGestureRecognizer's Listeners with the Component

 subclasses must override this method

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.MouseDragGestureRecognizer.mouseClicked(MouseEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when the mouse has been clicked on a component.
 <P>
 @param e the <code>MouseEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.MouseDragGestureRecognizer.mousePressed(MouseEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when a mouse button has been 
 pressed on a <code>Component</code>.
 <P>
 @param e the <code>MouseEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.MouseDragGestureRecognizer.mouseReleased(MouseEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when a mouse button has been released on a component.
 <P>
 @param e the <code>MouseEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.MouseDragGestureRecognizer.mouseEntered(MouseEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when the mouse enters a component.
 <P>
 @param e the <code>MouseEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.MouseDragGestureRecognizer.mouseExited(MouseEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when the mouse exits a component.
 <P>
 @param e the <code>MouseEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.MouseDragGestureRecognizer.mouseDragged(MouseEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when a mouse button is pressed on a component.
 <P>
 @param e the <code>MouseEvent</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.MouseDragGestureRecognizer.mouseMoved(MouseEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when the mouse button has been moved on a component
 (with no buttons no down).
 <P>
 @param e the <code>MouseEvent</code>

<!-- END DATA -->
