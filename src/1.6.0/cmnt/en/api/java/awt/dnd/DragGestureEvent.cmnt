<!-- BEGIN KEY -->
public class java.awt.dnd.DragGestureEvent extends java.util.EventObject
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <code>DragGestureEvent</code> is passed 
 to <code>DragGestureListener</code>'s  
 dragGestureRecognized() method
 when a particular <code>DragGestureRecognizer</code> detects that a 
 platform dependent drag initiating gesture has occurred 
 on the <code>Component</code> that it is tracking.
 
 @version 1.24
 @see java.awt.dnd.DragGestureRecognizer
 @see java.awt.dnd.DragGestureListener
 @see java.awt.dnd.DragSource

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.dnd.DragSource java.awt.dnd.DragGestureEvent.dragSource
<!-- END KEY -->
<!-- BEGIN DATA -->
 The DragSource associated with this DragGestureEvent.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.Component java.awt.dnd.DragGestureEvent.component
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Component associated with this DragGestureEvent.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.Point java.awt.dnd.DragGestureEvent.origin
<!-- END KEY -->
<!-- BEGIN DATA -->
 The origin of the drag.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.dnd.DragGestureEvent.action
<!-- END KEY -->
<!-- BEGIN DATA -->
 The user's preferred action.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DragGestureEvent(DragGestureRecognizer dgr, int act, Point ori, java.util.List<? extends java.awt.event.InputEvent> evs)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a <code>DragGestureEvent</code> given the
 <code>DragGestureRecognizer</code> firing this event, 
 an <code>int</code> representing
 the user's preferred action, a <code>Point</code> 
 indicating the origin of the drag, and a <code>List</code> 
 of events that comprise the gesture.
 <P>
 @param dgr The <code>DragGestureRecognizer</code> firing this event
 @param act The the user's preferred action
 @param ori The origin of the drag
 @param evs The <code>List</code> of events that comprise the gesture
 <P>
 @throws <code>IllegalArgumentException</code> if 
 input parameters are null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DragGestureRecognizer java.awt.dnd.DragGestureEvent.getSourceAsDragGestureRecognizer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the source as a <code>DragGestureRecognizer</code>.
 <P>
 @return the source as a <code>DragGestureRecognizer</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.dnd.DragGestureEvent.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>Component</code> associated 
 with this <code>DragGestureEvent</code>.
 <P>
 @return the Component

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DragSource java.awt.dnd.DragGestureEvent.getDragSource()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>DragSource</code>.
 <P>
 @return the <code>DragSource</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.dnd.DragGestureEvent.getDragOrigin()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>Point</code> in the coordinates
 of the <code>Component</code> over which the drag originated.
 <P>
 @return the Point where the drag originated in Component coords.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<java.awt.event.InputEvent> java.awt.dnd.DragGestureEvent.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an <code>Iterator</code> for the events
 comprising the gesture.
 <P>
 @return an Iterator for the events comprising the gesture

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.awt.dnd.DragGestureEvent.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an <code>Object</code> array of the 
 events comprising the drag gesture.
 <P>
 @return an array of the events comprising the gesture

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.awt.dnd.DragGestureEvent.toArray(java.lang.Object[] array)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of the events comprising the drag gesture.
 <P>
 @param array the array of <code>EventObject</code> sub(types)
 <P>
 @return an array of the events comprising the gesture

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.dnd.DragGestureEvent.getDragAction()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an <code>int</code> representing the 
 action selected by the user.
 <P>
 @return the action selected by the user

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.InputEvent java.awt.dnd.DragGestureEvent.getTriggerEvent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the initial event that triggered the gesture. 
 <P>
 @return the first "triggering" event in the sequence of the gesture

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DragGestureEvent.startDrag(Cursor dragCursor, Transferable transferable) throws java.awt.dnd.InvalidDnDOperationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Starts the drag operation given the <code>Cursor</code> for this drag
 operation and the <code>Transferable</code> representing the source data
 for this drag operation.
 <br>
 If a <code>null</code> <code>Cursor</code> is specified no exception will
 be thrown and default drag cursors will be used instead.
 <br>
 If a <code>null</code> <code>Transferable</code> is specified 
 <code>NullPointerException</code> will be thrown.
 
 @param dragCursor   The <code>Cursor</code> for this drag operation 
 @param transferable The <code>Transferable</code> representing the source
                     data for this drag operation.

 @throws <code>InvalidDnDOperationException</code> if the Drag and Drop
         system is unable to initiate a drag operation, or if the user 
         attempts to start a drag while an existing drag operation is
         still executing. 
 @throws <code>NullPointerException</code> if the
         <code>Transferable</code> is <code>null</code>.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DragGestureEvent.startDrag(Cursor dragCursor, Transferable transferable, DragSourceListener dsl) throws java.awt.dnd.InvalidDnDOperationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Starts the drag given the initial <code>Cursor</code> to display, 
 the <code>Transferable</code> object, 
 and the <code>DragSourceListener</code> to use.
 <P>
 @param dragCursor   The initial drag Cursor
 @param transferable The source's Transferable
 @param dsl	   The source's DragSourceListener
 <P>
 @throws <code>InvalidDnDOperationException</code> if 
 the Drag and Drop system is unable to
 initiate a drag operation, or if the user 
 attempts to start a drag while an existing
 drag operation is still executing.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DragGestureEvent.startDrag(Cursor dragCursor, Image dragImage, Point imageOffset, Transferable transferable, DragSourceListener dsl) throws java.awt.dnd.InvalidDnDOperationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Start the drag given the initial <code>Cursor</code> to display,
 a drag <code>Image</code>, the offset of 
 the <code>Image</code>, 
 the <code>Transferable</code> object, and 
 the <code>DragSourceListener</code> to use.
 <P>
 @param dragCursor   The initial drag Cursor
 @param dragImage    The source's dragImage
 @param imageOffset  The dragImage's offset
 @param transferable The source's Transferable
 @param dsl	   The source's DragSourceListener
 <P>
 @throws <code>InvalidDnDOperationException</code> if 
 the Drag and Drop system is unable to
 initiate a drag operation, or if the user 
 attempts to start a drag while an existing
 drag operation is still executing.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.dnd.DragGestureEvent.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Deserializes this <code>DragGestureEvent</code>. This method first
 performs default deserialization for all non-<code>transient</code>
 fields. An attempt is then made to deserialize this object's
 <code>List</code> of gesture events as well. This is first attempted
 by deserializing the field <code>events</code>, because, in releases
 prior to 1.4, a non-<code>transient</code> field of this name stored the
 <code>List</code> of gesture events. If this fails, the next object in
 the stream is used instead. If the resulting <code>List</code> is
 <code>null</code>, this object's <code>List</code> of gesture events
 is set to an empty <code>List</code>.

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.dnd.DragGestureEvent.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Serializes this <code>DragGestureEvent</code>. Performs default
 serialization and then writes out this object's <code>List</code> of
 gesture events if and only if the <code>List</code> can be serialized.
 If not, <code>null</code> is written instead. In this case, a
 <code>DragGestureEvent</code> created from the resulting deserialized
 stream will contain an empty <code>List</code> of gesture events.

 @serialData The default serializable fields, in alphabetical order,
             followed by either a <code>List</code> instance, or
             <code>null</code>.
 @since 1.4

<!-- END DATA -->
