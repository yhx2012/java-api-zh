<!-- BEGIN KEY -->
public class java.awt.dnd.DropTargetContext extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <code>DropTargetContext</code> is created 
 whenever the logical cursor associated
 with a Drag and Drop operation coincides with the visible geometry of
 a <code>Component</code> associated with a <code>DropTarget</code>.
 The <code>DropTargetContext</code> provides 
 the mechanism for a potential receiver
 of a drop operation to both provide the end user with the appropriate
 drag under feedback, but also to effect the subsequent data transfer
 if appropriate.

 @version 	1.38, 11/17/05
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.dnd.DropTarget java.awt.dnd.DropTargetContext.dropTarget
<!-- END KEY -->
<!-- BEGIN DATA -->
 The DropTarget associated with this DropTargetContext.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DropTarget java.awt.dnd.DropTargetContext.getDropTarget()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns the <code>DropTarget</code> associated with this
 <code>DropTargetContext</code>.
 <P>
 @return the <code>DropTarget</code> associated with this <code>DropTargetContext</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.dnd.DropTargetContext.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns the <code>Component</code> associated with
 this <code>DropTargetContext</code>.
 <P>
 @return the Component associated with this Context

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTargetContext.addNotify(DropTargetContextPeer dtcp)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when associated with the <code>DropTargetContextPeer</code>.
 <P>
 @param dtcp the <code>DropTargetContextPeer</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTargetContext.removeNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called when disassociated with the <code>DropTargetContextPeer</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.dnd.DropTargetContext.setTargetActions(int actions)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method sets the current actions acceptable to 
 this <code>DropTarget</code>.
 <P>
 @param actions an <code>int</code> representing the supported action(s)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.awt.dnd.DropTargetContext.getTargetActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns an <code>int</code> representing the 
 current actions this <code>DropTarget</code> will accept.
 <P>
 @return the current actions acceptable to this <code>DropTarget</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTargetContext.dropComplete(boolean success) throws java.awt.dnd.InvalidDnDOperationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method signals that the drop is completed and 
 if it was successful or not.
 <P>
 @param success true for success, false if not
 <P>
 @throws InvalidDnDOperationException if a drop is not outstanding/extant

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.dnd.DropTargetContext.acceptDrag(int dragOperation)
<!-- END KEY -->
<!-- BEGIN DATA -->
 accept the Drag.
 <P>
 @param dragOperation the supported action(s)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.dnd.DropTargetContext.rejectDrag()
<!-- END KEY -->
<!-- BEGIN DATA -->
 reject the Drag.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.dnd.DropTargetContext.acceptDrop(int dropOperation)
<!-- END KEY -->
<!-- BEGIN DATA -->
 called to signal that the drop is acceptable
 using the specified operation.
 must be called during DropTargetListener.drop method invocation.
 <P>
 @param dropOperation the supported action(s)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.dnd.DropTargetContext.rejectDrop()
<!-- END KEY -->
<!-- BEGIN DATA -->
 called to signal that the drop is unacceptable.
 must be called during DropTargetListener.drop method invocation.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.datatransfer.DataFlavor[] java.awt.dnd.DropTargetContext.getCurrentDataFlavors()
<!-- END KEY -->
<!-- BEGIN DATA -->
 get the available DataFlavors of the 
 <code>Transferable</code> operand of this operation.
 <P>
 @return a <code>DataFlavor[]</code> containing the
 supported <code>DataFlavor</code>s of the 
 <code>Transferable</code> operand.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.List<java.awt.datatransfer.DataFlavor> java.awt.dnd.DropTargetContext.getCurrentDataFlavorsAsList()
<!-- END KEY -->
<!-- BEGIN DATA -->

 This method returns a the currently available DataFlavors 
 of the <code>Transferable</code> operand
 as a <code>java.util.List</code>.
 <P>
 @return the currently available 
 DataFlavors as a <code>java.util.List</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.awt.dnd.DropTargetContext.isDataFlavorSupported(DataFlavor df)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns a <code>boolean</code> 
 indicating if the given <code>DataFlavor</code> is
 supported by this <code>DropTargetContext</code>.
 <P>
 @param df the <code>DataFlavor</code>
 <P>
 @return if the <code>DataFlavor</code> specified is supported

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.datatransfer.Transferable java.awt.dnd.DropTargetContext.getTransferable() throws java.awt.dnd.InvalidDnDOperationException
<!-- END KEY -->
<!-- BEGIN DATA -->
 get the Transferable (proxy) operand of this operation
 <P>
 @throws InvalidDnDOperationException if a drag is not outstanding/extant
 <P>
 @return the <code>Transferable</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.datatransfer.Transferable java.awt.dnd.DropTargetContext.createTransferableProxy(Transferable t, boolean local)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a TransferableProxy to proxy for the specified
 Transferable.
 
 @param t the <tt>Transferable</tt> to be proxied
 @param local <tt>true</tt> if <tt>t</tt> represents
        the result of a local drag-n-drop operation.
 @return the new <tt>TransferableProxy</tt> instance.   

<!-- END DATA -->
