<!-- BEGIN KEY -->
public class java.awt.dnd.DropTarget extends java.lang.Object implements java.awt.dnd.DropTargetListener, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>DropTarget</code> is associated 
 with a <code>Component</code> when that <code>Component</code> 
 wishes
 to accept drops during Drag and Drop operations.
 <P>
  Each
 <code>DropTarget</code> is associated with a <code>FlavorMap</code>.
 The default <code>FlavorMap</code> hereafter designates the
 <code>FlavorMap</code> returned by <code>SystemFlavorMap.getDefaultFlavorMap()</code>. 
 
 @version 	1.51, 04/07/06
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.dnd.DropTargetContext java.awt.dnd.DropTarget.dropTargetContext
<!-- END KEY -->
<!-- BEGIN DATA -->
 The DropTargetContext associated with this DropTarget.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.Component java.awt.dnd.DropTarget.component
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Component associated with this DropTarget.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.dnd.DropTarget.actions
<!-- END KEY -->
<!-- BEGIN DATA -->
 Default permissible actions supported by this DropTarget.
 
 @see #setDefaultActions
 @see #getDefaultActions
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean java.awt.dnd.DropTarget.active
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>true</code> if the DropTarget is accepting Drag & Drop operations.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DropTarget(Component c, int ops, DropTargetListener dtl, boolean act, FlavorMap fm) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new DropTarget given the <code>Component</code> 
 to associate itself with, an <code>int</code> representing
 the default acceptable action(s) to 
 support, a <code>DropTargetListener</code>
 to handle event processing, a <code>boolean</code> indicating 
 if the <code>DropTarget</code> is currently accepting drops, and 
 a <code>FlavorMap</code> to use (or null for the default <CODE>FlavorMap</CODE>).
 <P>
 The Component will receive drops only if it is enabled.
 @param c 	The <code>Component</code> with which this <code>DropTarget</code> is associated
 @param ops	The default acceptable actions for this <code>DropTarget</code>
 @param dtl	The <code>DropTargetListener</code> for this <code>DropTarget</code>
 @param act	Is the <code>DropTarget</code> accepting drops.
 @param fm	The <code>FlavorMap</code> to use, or null for the default <CODE>FlavorMap</CODE> 
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
            returns true
 @see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DropTarget(Component c, int ops, DropTargetListener dtl, boolean act) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>DropTarget</code> given the <code>Component</code> 
 to associate itself with, an <code>int</code> representing
 the default acceptable action(s) 
 to support, a <code>DropTargetListener</code>
 to handle event processing, and a <code>boolean</code> indicating 
 if the <code>DropTarget</code> is currently accepting drops.
 <P>
 The Component will receive drops only if it is enabled.
 @param c 	The <code>Component</code> with which this <code>DropTarget</code> is associated
 @param ops	The default acceptable actions for this <code>DropTarget</code>
 @param dtl	The <code>DropTargetListener</code> for this <code>DropTarget</code>
 @param act	Is the <code>DropTarget</code> accepting drops.
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
            returns true
 @see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DropTarget() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>DropTarget</code>.
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
            returns true
 @see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DropTarget(Component c, DropTargetListener dtl) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>DropTarget</code> given the <code>Component</code> 
 to associate itself with, and the <code>DropTargetListener</code>
 to handle event processing.
 <P>
 The Component will receive drops only if it is enabled.
 @param c 	The <code>Component</code> with which this <code>DropTarget</code> is associated
 @param dtl	The <code>DropTargetListener</code> for this <code>DropTarget</code>
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
            returns true
 @see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DropTarget(Component c, int ops, DropTargetListener dtl) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>DropTarget</code> given the <code>Component</code> 
 to associate itself with, an <code>int</code> representing
 the default acceptable action(s) to support, and a
 <code>DropTargetListener</code> to handle event processing.
 <P>
 The Component will receive drops only if it is enabled.
 @param c 	The <code>Component</code> with which this <code>DropTarget</code> is associated
 @param ops	The default acceptable actions for this <code>DropTarget</code>
 @param dtl	The <code>DropTargetListener</code> for this <code>DropTarget</code>
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
            returns true
 @see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DropTarget.setComponent(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Note: this interface is required to permit the safe association
 of a DropTarget with a Component in one of two ways, either:
 <code> component.setDropTarget(droptarget); </code>
 or <code> droptarget.setComponent(component); </code>
 <P>
 The Component will receive drops only if it is enabled.
 @param c The new <code>Component</code> this <code>DropTarget</code> 
 is to be associated with.<P>

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.Component java.awt.dnd.DropTarget.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>Component</code> associated 
 with this <code>DropTarget</code>.
 <P>
 @return the current <code>Component</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTarget.setDefaultActions(int ops)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the default acceptable actions for this <code>DropTarget</code>
 <P>
 @param ops the default actions
 <P>
 @see java.awt.dnd.DnDConstants

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.dnd.DropTarget.getDefaultActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets an <code>int</code> representing the
 current action(s) supported by this <code>DropTarget</code>.
 <P>
 @return the current default actions

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DropTarget.setActive(boolean isActive)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the DropTarget active if <code>true</code>, 
 inactive if <code>false</code>.
 <P>
 @param isActive sets the <code>DropTarget</code> (in)active.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.dnd.DropTarget.isActive()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reports whether or not 
 this <code>DropTarget</code> 
 is currently active (ready to accept drops).
 <P>
 @return <CODE>true</CODE> if active, <CODE>false</CODE> if not

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DropTarget.addDropTargetListener(DropTargetListener dtl) throws java.util.TooManyListenersException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a new <code>DropTargetListener</code> (UNICAST SOURCE).
 <P>
 @param dtl The new <code>DropTargetListener</code>
 <P>
 @throws <code>TooManyListenersException</code> if a 
 <code>DropTargetListener</code> is already added to this
 <code>DropTarget</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DropTarget.removeDropTargetListener(DropTargetListener dtl)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the current <code>DropTargetListener</code> (UNICAST SOURCE).
 <P>
 @param dtl the DropTargetListener to deregister.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DropTarget.dragEnter(DropTargetDragEvent dtde)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Calls <code>dragEnter</code> on the registered
 <code>DropTargetListener</code> and passes it
 the specified <code>DropTargetDragEvent</code>.
 Has no effect if this <code>DropTarget</code>
 is not active.

 @param dtde the <code>DropTargetDragEvent</code>

 @throws NullPointerException if this <code>DropTarget</code>
         is active and <code>dtde</code> is <code>null</code>

 @see #isActive

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DropTarget.dragOver(DropTargetDragEvent dtde)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Calls <code>dragOver</code> on the registered
 <code>DropTargetListener</code> and passes it
 the specified <code>DropTargetDragEvent</code>.
 Has no effect if this <code>DropTarget</code>
 is not active.

 @param dtde the <code>DropTargetDragEvent</code>

 @throws NullPointerException if this <code>DropTarget</code>
         is active and <code>dtde</code> is <code>null</code>

 @see #isActive

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DropTarget.dropActionChanged(DropTargetDragEvent dtde)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Calls <code>dropActionChanged</code> on the registered
 <code>DropTargetListener</code> and passes it
 the specified <code>DropTargetDragEvent</code>.
 Has no effect if this <code>DropTarget</code>
 is not active.

 @param dtde the <code>DropTargetDragEvent</code>

 @throws NullPointerException if this <code>DropTarget</code>
         is active and <code>dtde</code> is <code>null</code>

 @see #isActive

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DropTarget.dragExit(DropTargetEvent dte)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Calls <code>dragExit</code> on the registered
 <code>DropTargetListener</code> and passes it
 the specified <code>DropTargetEvent</code>.
 Has no effect if this <code>DropTarget</code>
 is not active.
 <p>
 This method itself does not throw any exception
 for null parameter but for exceptions thrown by
 the respective method of the listener.

 @param dte the <code>DropTargetEvent</code>

 @see #isActive

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.dnd.DropTarget.drop(DropTargetDropEvent dtde)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Calls <code>drop</code> on the registered
 <code>DropTargetListener</code> and passes it
 the specified <code>DropTargetDropEvent</code>
 if this <code>DropTarget</code> is active.

 @param dtde the <code>DropTargetDropEvent</code>

 @throws NullPointerException if <code>dtde</code> is null
         and at least one of the following is true: this
         <code>DropTarget</code> is not active, or there is
         no a <code>DropTargetListener</code> registered.

 @see #isActive

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.datatransfer.FlavorMap java.awt.dnd.DropTarget.getFlavorMap()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>FlavorMap</code>
 associated with this <code>DropTarget</code>.
 If no <code>FlavorMap</code> has been set for this
 <code>DropTarget</code>, it is associated with the default
 <code>FlavorMap</code>.
 <P>
 @return the FlavorMap for this DropTarget

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTarget.setFlavorMap(FlavorMap fm)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>FlavorMap</code> associated
 with this <code>DropTarget</code>.
 <P>
 @param fm the new <code>FlavorMap</code>, or null to 
 associate the default FlavorMap with this DropTarget.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTarget.addNotify(ComponentPeer peer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notify the DropTarget that it has been associated with a Component


 This method is usually called from java.awt.Component.addNotify() of
 the Component associated with this DropTarget to notify the DropTarget
 that a ComponentPeer has been associated with that Component.

 Calling this method, other than to notify this DropTarget of the
 association of the ComponentPeer with the Component may result in
 a malfunction of the DnD system.

 <P>
 @param peer The Peer of the Component we are associated with!


<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.dnd.DropTarget.removeNotify(ComponentPeer peer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notify the DropTarget that it has been disassociated from a Component


 This method is usually called from java.awt.Component.removeNotify() of
 the Component associated with this DropTarget to notify the DropTarget
 that a ComponentPeer has been disassociated with that Component.

 Calling this method, other than to notify this DropTarget of the
 disassociation of the ComponentPeer from the Component may result in
 a malfunction of the DnD system.

 <P>
 @param peer The Peer of the Component we are being disassociated from!

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.dnd.DropTargetContext java.awt.dnd.DropTarget.getDropTargetContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>DropTargetContext</code> associated 
 with this <code>DropTarget</code>.
 <P>
 @return the <code>DropTargetContext</code> associated with this <code>DropTarget</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.dnd.DropTargetContext java.awt.dnd.DropTarget.createDropTargetContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the DropTargetContext associated with this DropTarget.
 Subclasses may override this method to instantiate their own
 DropTargetContext subclass.

 This call is typically *only* called by the platform's
 DropTargetContextPeer as a drag operation encounters this
 DropTarget. Accessing the Context while no Drag is current
 has undefined results.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.dnd.DropTarget.DropTargetAutoScroller java.awt.dnd.DropTarget.createDropTargetAutoScroller(Component c, Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 create an embedded autoscroller
 <P>
 @param c the <code>Component</code>
 @param p the <code>Point</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.dnd.DropTarget.initializeAutoscrolling(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 initialize autoscrolling
 <P>
 @param p the <code>Point</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.dnd.DropTarget.updateAutoscroll(Point dragCursorLocn)
<!-- END KEY -->
<!-- BEGIN DATA -->
 update autoscrolling with current cursor locn
 <P>
 @param dragCursorLocn the <code>Point</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.dnd.DropTarget.clearAutoscroll()
<!-- END KEY -->
<!-- BEGIN DATA -->
 clear autoscrolling

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.dnd.DropTarget.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Deserializes this <code>DropTarget</code>. This method first performs
 default deserialization for all non-<code>transient</code> fields. An
 attempt is then made to deserialize this object's
 <code>DropTargetListener</code> as well. This is first attempted by
 deserializing the field <code>dtListener</code>, because, in releases
 prior to 1.4, a non-<code>transient</code> field of this name stored the
 <code>DropTargetListener</code>. If this fails, the next object in the
 stream is used instead.

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.dnd.DropTarget.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Serializes this <code>DropTarget</code>. Performs default serialization,
 and then writes out this object's <code>DropTargetListener</code> if and
 only if it can be serialized. If not, <code>null</code> is written
 instead.

 @serialData The default serializable fields, in alphabetical order,
             followed by either a <code>DropTargetListener</code>
             instance, or <code>null</code>.
 @since 1.4

<!-- END DATA -->
