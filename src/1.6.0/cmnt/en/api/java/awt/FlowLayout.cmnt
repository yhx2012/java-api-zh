<!-- BEGIN KEY -->
public class java.awt.FlowLayout extends java.lang.Object implements java.awt.LayoutManager, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A flow layout arranges components in a directional flow, much
 like lines of text in a paragraph. The flow direction is
 determined by the container's <code>componentOrientation</code>
 property and may be one of two values: 
 <ul>
 <li><code>ComponentOrientation.LEFT_TO_RIGHT</code>
 <li><code>ComponentOrientation.RIGHT_TO_LEFT</code>
 </ul>
 Flow layouts are typically used
 to arrange buttons in a panel. It arranges buttons
 horizontally until no more buttons fit on the same line.
 The line alignment is determined by the <code>align</code>
 property. The possible values are:
 <ul>
 <li>{@link #LEFT LEFT}
 <li>{@link #RIGHT RIGHT}
 <li>{@link #CENTER CENTER}
 <li>{@link #LEADING LEADING}
 <li>{@link #TRAILING TRAILING}
 </ul>
 <p>
 For example, the following picture shows an applet using the flow
 layout manager (its default layout manager) to position three buttons:
 <p>
 <img src="doc-files/FlowLayout-1.gif"
 ALT="Graphic of Layout for Three Buttons"
 ALIGN=center HSPACE=10 VSPACE=7>
 <p>
 Here is the code for this applet:
 <p>
 <hr><blockquote><pre>
 import java.awt.*;
 import java.applet.Applet;

 public class myButtons extends Applet {
     Button button1, button2, button3;
     public void init() {
         button1 = new Button("Ok");
         button2 = new Button("Open");
         button3 = new Button("Close");
         add(button1);
         add(button2);
         add(button3);
     }
 }
 </pre></blockquote><hr>
 <p>
 A flow layout lets each component assume its natural (preferred) size.

 @version     1.58, 11/17/05
 @author      Arthur van Hoff
 @author      Sami Shaio
 @since       JDK1.0
 @see ComponentOrientation

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.FlowLayout.LEFT
<!-- END KEY -->
<!-- BEGIN DATA -->
 This value indicates that each row of components
 should be left-justified.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.FlowLayout.CENTER
<!-- END KEY -->
<!-- BEGIN DATA -->
 This value indicates that each row of components
 should be centered.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.FlowLayout.RIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
 This value indicates that each row of components
 should be right-justified.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.FlowLayout.LEADING
<!-- END KEY -->
<!-- BEGIN DATA -->
 This value indicates that each row of components
 should be justified to the leading edge of the container's
 orientation, for example, to the left in left-to-right orientations.

 @see     java.awt.Component#getComponentOrientation
 @see     java.awt.ComponentOrientation
 @since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.FlowLayout.TRAILING
<!-- END KEY -->
<!-- BEGIN DATA -->
 This value indicates that each row of components
 should be justified to the trailing edge of the container's
 orientation, for example, to the right in left-to-right orientations.

 @see     java.awt.Component#getComponentOrientation
 @see     java.awt.ComponentOrientation
 @since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.FlowLayout.align
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>align</code> is the property that determines
 how each row distributes empty space.
 It can be one of the following values:
 <ul>
 <code>LEFT</code>
 <code>RIGHT</code>
 <code>CENTER</code>
 <code>LEADING</code>
 <code>TRAILING</code>
 </ul>

 @serial
 @see #getAlignment
 @see #setAlignment

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.FlowLayout.newAlign
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>newAlign</code> is the property that determines
 how each row distributes empty space for the Java 2 platform,
 v1.2 and greater.
 It can be one of the following three values:
 <ul>
 <code>LEFT</code>
 <code>RIGHT</code>
 <code>CENTER</code>
 <code>LEADING</code>
 <code>TRAILING</code>
 </ul>

 @serial
 @since 1.2
 @see #getAlignment
 @see #setAlignment

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.FlowLayout.hgap
<!-- END KEY -->
<!-- BEGIN DATA -->
 The flow layout manager allows a seperation of
 components with gaps.  The horizontal gap will
 specify the space between components and between
 the components and the borders of the
 <code>Container</code>.

 @serial
 @see #getHgap()
 @see #setHgap(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.FlowLayout.vgap
<!-- END KEY -->
<!-- BEGIN DATA -->
 The flow layout manager allows a seperation of
 components with gaps.  The vertical gap will
 specify the space between rows and between the
 the rows and the borders of the <code>Container</code>.

 @serial
 @see #getHgap()
 @see #setHgap(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean java.awt.FlowLayout.alignOnBaseline
<!-- END KEY -->
<!-- BEGIN DATA -->
 If true, components will be aligned on their baseline.

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.FlowLayout.serialVersionOnStream
<!-- END KEY -->
<!-- BEGIN DATA -->
 This represent the <code>currentSerialVersion</code>
 which is bein used.  It will be one of two values :
 <code>0</code> versions before Java 2 platform v1.2..
 <code>1</code> versions after  Java 2 platform v1.2..

 @serial
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FlowLayout()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new <code>FlowLayout</code> with a centered alignment and a
 default 5-unit horizontal and vertical gap.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FlowLayout(int align)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new <code>FlowLayout</code> with the specified
 alignment and a default 5-unit horizontal and vertical gap.
 The value of the alignment argument must be one of
 <code>FlowLayout.LEFT</code>, <code>FlowLayout.RIGHT</code>,
 <code>FlowLayout.CENTER</code>, <code>FlowLayout.LEADING</code>,
 or <code>FlowLayout.TRAILING</code>.
 @param align the alignment value

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FlowLayout(int align, int hgap, int vgap)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new flow layout manager with the indicated alignment
 and the indicated horizontal and vertical gaps.
 <p>
 The value of the alignment argument must be one of
 <code>FlowLayout.LEFT</code>, <code>FlowLayout.RIGHT</code>,
 <code>FlowLayout.CENTER</code>, <code>FlowLayout.LEADING</code>,
 or <code>FlowLayout.TRAILING</code>.
 @param      align   the alignment value
 @param      hgap    the horizontal gap between components
                     and between the components and the 
                     borders of the <code>Container</code>
 @param      vgap    the vertical gap between components
                     and between the components and the 
                     borders of the <code>Container</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FlowLayout.getAlignment()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the alignment for this layout.
 Possible values are <code>FlowLayout.LEFT</code>,
 <code>FlowLayout.RIGHT</code>, <code>FlowLayout.CENTER</code>,
 <code>FlowLayout.LEADING</code>,
 or <code>FlowLayout.TRAILING</code>.
 @return     the alignment value for this layout
 @see        java.awt.FlowLayout#setAlignment
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FlowLayout.setAlignment(int align)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the alignment for this layout.
 Possible values are
 <ul>
 <li><code>FlowLayout.LEFT</code>
 <li><code>FlowLayout.RIGHT</code>
 <li><code>FlowLayout.CENTER</code>
 <li><code>FlowLayout.LEADING</code>
 <li><code>FlowLayout.TRAILING</code>
 </ul>
 @param      align one of the alignment values shown above
 @see        #getAlignment()
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FlowLayout.getHgap()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the horizontal gap between components
 and between the components and the borders
 of the <code>Container</code>

 @return     the horizontal gap between components
             and between the components and the borders
             of the <code>Container</code>
 @see        java.awt.FlowLayout#setHgap
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FlowLayout.setHgap(int hgap)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the horizontal gap between components and
 between the components and the borders of the
 <code>Container</code>.

 @param hgap the horizontal gap between components
             and between the components and the borders
             of the <code>Container</code>
 @see        java.awt.FlowLayout#getHgap
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FlowLayout.getVgap()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the vertical gap between components and
 between the components and the borders of the
 <code>Container</code>.

 @return     the vertical gap between components
             and between the components and the borders
             of the <code>Container</code>
 @see        java.awt.FlowLayout#setVgap
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FlowLayout.setVgap(int vgap)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the vertical gap between components and between
 the components and the borders of the <code>Container</code>.

 @param vgap the vertical gap between components
             and between the components and the borders
             of the <code>Container</code>
 @see        java.awt.FlowLayout#getVgap
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FlowLayout.setAlignOnBaseline(boolean alignOnBaseline)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets whether or not components should be vertically aligned along their
 baseline.  Components that do not have a baseline will be centered.
 The default is false.

 @param alignOnBaseline whether or not components should be
                        vertically aligned on their baseline
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.FlowLayout.getAlignOnBaseline()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if components are to be vertically aligned along
 their baseline.  The default is false.

 @return true if components are to be vertically aligned along
              their baseline
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FlowLayout.addLayoutComponent(String name, Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified component to the layout.
 Not used by this class.
 @param name the name of the component
 @param comp the component to be added

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FlowLayout.removeLayoutComponent(Component comp)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified component from the layout.
 Not used by this class.
 @param comp the component to remove
 @see       java.awt.Container#removeAll

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.FlowLayout.preferredLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the preferred dimensions for this layout given the 
 <i>visible</i> components in the specified target container.

 @param target the container that needs to be laid out
 @return    the preferred dimensions to lay out the
            subcomponents of the specified container
 @see Container
 @see #minimumLayoutSize
 @see       java.awt.Container#getPreferredSize

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.FlowLayout.minimumLayoutSize(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the minimum dimensions needed to layout the <i>visible</i>
 components contained in the specified target container.
 @param target the container that needs to be laid out
 @return    the minimum dimensions to lay out the
            subcomponents of the specified container
 @see #preferredLayoutSize
 @see       java.awt.Container
 @see       java.awt.Container#doLayout

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FlowLayout.layoutContainer(Container target)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Lays out the container. This method lets each 
 <i>visible</i> component take
 its preferred size by reshaping the components in the
 target container in order to satisfy the alignment of
 this <code>FlowLayout</code> object.

 @param target the specified component being laid out
 @see Container
 @see       java.awt.Container#doLayout

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.FlowLayout.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this <code>FlowLayout</code>
 object and its values.
 @return     a string representation of this layout

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.FlowLayout.readObject(ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads this object out of a serialization stream, handling
 objects written by older versions of the class that didn't contain all
 of the fields we use now..

<!-- END DATA -->
