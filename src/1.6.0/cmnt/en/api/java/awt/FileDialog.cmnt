<!-- BEGIN KEY -->
public class java.awt.FileDialog extends java.awt.Dialog
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>FileDialog</code> class displays a dialog window
 from which the user can select a file.
 <p>
 Since it is a modal dialog, when the application calls
 its <code>show</code> method to display the dialog,
 it blocks the rest of the application until the user has
 chosen a file.

 @see Window#show

 @version 	1.55, 04/07/06
 @author 	Sami Shaio
 @author 	Arthur van Hoff
 @since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.FileDialog.LOAD
<!-- END KEY -->
<!-- BEGIN DATA -->
 This constant value indicates that the purpose of the file
 dialog window is to locate a file from which to read.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.FileDialog.SAVE
<!-- END KEY -->
<!-- BEGIN DATA -->
 This constant value indicates that the purpose of the file
 dialog window is to locate a file to which to write.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FileDialog(Frame parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a file dialog for loading a file.  The title of the
 file dialog is initially empty.  This is a convenience method for
 <code>FileDialog(parent, "", LOAD)</code>.

 @param parent the owner of the dialog
 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FileDialog(Frame parent, String title)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a file dialog window with the specified title for loading
 a file. The files shown are those in the current directory.
 This is a convenience method for
 <code>FileDialog(parent, title, LOAD)</code>.

 @param     parent   the owner of the dialog
 @param     title    the title of the dialog

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FileDialog(Frame parent, String title, int mode)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a file dialog window with the specified title for loading
 or saving a file.
 <p>
 If the value of <code>mode</code> is <code>LOAD</code>, then the
 file dialog is finding a file to read, and the files shown are those
 in the current directory.   If the value of
 <code>mode</code> is <code>SAVE</code>, the file dialog is finding
 a place to write a file.

 @param     parent   the owner of the dialog
 @param     title   the title of the dialog
 @param     mode   the mode of the dialog; either
		<code>FileDialog.LOAD</code> or <code>FileDialog.SAVE</code>
 @exception  IllegalArgumentException if an illegal file
                 dialog mode is supplied
 @see       java.awt.FileDialog#LOAD
 @see       java.awt.FileDialog#SAVE

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FileDialog(Dialog parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a file dialog for loading a file.  The title of the
 file dialog is initially empty.  This is a convenience method for
 <code>FileDialog(parent, "", LOAD)</code>.

 @param     parent   the owner of the dialog
 @exception java.lang.IllegalArgumentException if the <code>parent</code>'s
            <code>GraphicsConfiguration</code>
            is not from a screen device;
 @exception java.lang.IllegalArgumentException if <code>parent</code>
            is <code>null</code>; this exception is always thrown when
            <code>GraphicsEnvironment.isHeadless</code>
            returns <code>true</code>
 @see java.awt.GraphicsEnvironment#isHeadless
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FileDialog(Dialog parent, String title)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a file dialog window with the specified title for loading
 a file. The files shown are those in the current directory.
 This is a convenience method for
 <code>FileDialog(parent, title, LOAD)</code>.

 @param     parent   the owner of the dialog
 @param     title    the title of the dialog; a <code>null</code> value
                     will be accepted without causing a
                     <code>NullPointerException</code> to be thrown
 @exception java.lang.IllegalArgumentException if the <code>parent</code>'s
            <code>GraphicsConfiguration</code>
            is not from a screen device;
 @exception java.lang.IllegalArgumentException if <code>parent</code>
            is <code>null</code>; this exception is always thrown when
            <code>GraphicsEnvironment.isHeadless</code>
            returns <code>true</code>
 @see java.awt.GraphicsEnvironment#isHeadless
 @since     1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.FileDialog(Dialog parent, String title, int mode)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a file dialog window with the specified title for loading
 or saving a file.
 <p>
 If the value of <code>mode</code> is <code>LOAD</code>, then the
 file dialog is finding a file to read, and the files shown are those
 in the current directory.   If the value of
 <code>mode</code> is <code>SAVE</code>, the file dialog is finding
 a place to write a file.

 @param     parent   the owner of the dialog
 @param     title    the title of the dialog; a <code>null</code> value
                     will be accepted without causing a
                     <code>NullPointerException</code> to be thrown
 @param     mode     the mode of the dialog; either
		           <code>FileDialog.LOAD</code> or <code>FileDialog.SAVE</code>
 @exception java.lang.IllegalArgumentException if an illegal 
            file dialog mode is supplied;
 @exception java.lang.IllegalArgumentException if the <code>parent</code>'s
            <code>GraphicsConfiguration</code>
            is not from a screen device;
 @exception java.lang.IllegalArgumentException if <code>parent</code>
            is <code>null</code>; this exception is always thrown when
            <code>GraphicsEnvironment.isHeadless</code>
            returns <code>true</code>
 @see       java.awt.GraphicsEnvironment#isHeadless
 @see       java.awt.FileDialog#LOAD
 @see       java.awt.FileDialog#SAVE
 @since     1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FileDialog.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the file dialog's peer.  The peer allows us to change the look
 of the file dialog without changing its functionality.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.FileDialog.getMode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates whether this file dialog box is for loading from a file
 or for saving to a file.

 @return   the mode of this file dialog window, either
               <code>FileDialog.LOAD</code> or
               <code>FileDialog.SAVE</code>
 @see      java.awt.FileDialog#LOAD
 @see      java.awt.FileDialog#SAVE
 @see      java.awt.FileDialog#setMode

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FileDialog.setMode(int mode)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the mode of the file dialog.  If <code>mode</code> is not
 a legal value, an exception will be thrown and <code>mode</code>
 will not be set.

 @param      mode  the mode for this file dialog, either
                 <code>FileDialog.LOAD</code> or
                 <code>FileDialog.SAVE</code>
 @see        java.awt.FileDialog#LOAD
 @see        java.awt.FileDialog#SAVE
 @see        java.awt.FileDialog#getMode
 @exception  IllegalArgumentException if an illegal file
                 dialog mode is supplied
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.FileDialog.getDirectory()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the directory of this file dialog.

 @return  the (potentially <code>null</code> or invalid)
		directory of this <code>FileDialog</code>
 @see       java.awt.FileDialog#setDirectory

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FileDialog.setDirectory(String dir)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the directory of this file dialog window to be the
 specified directory. Specifying a <code>null</code> or an
 invalid directory implies an implementation-defined default.
 This default will not be realized, however, until the user
 has selected a file. Until this point, <code>getDirectory()</code>
 will return the value passed into this method.
 <p>
 Specifying "" as the directory is exactly equivalent to
 specifying <code>null</code> as the directory.

 @param     dir   the specified directory
 @see       java.awt.FileDialog#getDirectory

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.FileDialog.getFile()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the selected file of this file dialog.  If the user
 selected <code>CANCEL</code>, the returned file is <code>null</code>.

 @return    the currently selected file of this file dialog window,
                or <code>null</code> if none is selected
 @see       java.awt.FileDialog#setFile

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.FileDialog.setFile(String file)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the selected file for this file dialog window to be the
 specified file. This file becomes the default file if it is set
 before the file dialog window is first shown.
 <p>
 Specifying "" as the file is exactly equivalent to specifying
 <code>null</code>
 as the file.

 @param    file   the file being set
 @see      java.awt.FileDialog#getFile

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.FilenameFilter java.awt.FileDialog.getFilenameFilter()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines this file dialog's filename filter. A filename filter
 allows the user to specify which files appear in the file dialog
 window.  Filename filters do not function in Sun's reference
 implementation for Microsoft Windows.

 @return    this file dialog's filename filter
 @see       java.io.FilenameFilter
 @see       java.awt.FileDialog#setFilenameFilter

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.FileDialog.setFilenameFilter(FilenameFilter filter)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the filename filter for this file dialog window to the
 specified filter.
 Filename filters do not function in Sun's reference
 implementation for Microsoft Windows.

 @param   filter   the specified filter
 @see     java.io.FilenameFilter
 @see     java.awt.FileDialog#getFilenameFilter

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.awt.FileDialog.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representing the state of this <code>FileDialog</code>
 window. This method is intended to be used only for debugging purposes,
 and the content and format of the returned string may vary between 
 implementations. The returned string may be empty but may not be 
 <code>null</code>.

 @return  the parameter string of this file dialog window

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.FileDialog.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Reads the <code>ObjectInputStream</code> and performs
 a backwards compatibility check by converting
 either a <code>dir</code> or a <code>file</code>
 equal to an empty string to <code>null</code>.

 @param s the <code>ObjectInputStream</code> to read

<!-- END DATA -->
