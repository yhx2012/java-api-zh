<!-- BEGIN KEY -->
public final class java.awt.SplashScreen extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 The splash screen can be created at application startup, before the 
 Java Virtual Machine (JVM) starts. The splash screen is displayed as an 
 undecorated window containing an image. You can use GIF, JPEG, and PNG files
 for the image. Animation (for GIF) and transparency (for GIF, PNG) are
 supported. The window is positioned at the center of the screen (the
 position on multi-monitor systems is not specified - it is platform and 
 implementation dependent).
 The window is closed automatically as soon as the first window is displayed by
 Swing/AWT (may be also closed manually using the Java API, see below).
 <P>
 There are two ways to show the native splash screen:
 <P>
 <UL>
 <LI>If your application is run from the command line or from a shortcut,
 use the "-splash:" Java application  launcher option to show a splash screen.
 <BR>
 For example: 
 <PRE>
 java -splash:filename.gif Test
 </PRE>
 <LI>If your application is packaged in a jar file, you can use the
 "SplashScreen-Image" option in a manifest file to show a splash screen.
 Place the image in the jar archive and specify the path in the option.
 The path should not have a leading slash.
 <BR>
 For example, in the <code>manifest.mf</code> file:
 <PRE>
 Manifest-Version: 1.0
 Main-Class: Test
 SplashScreen-Image: filename.gif
 </PRE>
 The command line interface has higher precedence over the manifest 
 setting.
 </UL>
 <p>
 The {@code SplashScreen} class provides the API for controlling the splash 
 screen. This class may be used to close the splash screen, change the splash
 screen image, get the image position/size and paint in the splash screen. It
 cannot be used to create the splash screen; you should use the command line or manifest
 file option for that.
 <p>
 This class cannot be instantiated. Only a single instance of this class
 can exist, and it may be obtained using the {@link #getSplashScreen()}
 static method. In case the splash screen has not been created at
 application startup via the command line or manifest file option,
 the <code>getSplashScreen</code> method returns <code>null</code>.

 @author Oleg Semenov
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.awt.SplashScreen java.awt.SplashScreen.getSplashScreen()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the {@code SplashScreen} object used for
 Java startup splash screen control.

 @throws UnsupportedOperationException if the splash screen feature is not
         supported by the current toolkit
 @throws HeadlessException if {@code GraphicsEnvironment.isHeadless()}
         returns true
 @return the {@link SplashScreen} instance, or <code>null</code> if there is
         none or it has already been closed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.SplashScreen.setImageURL(URL imageURL) throws java.lang.NullPointerException, java.io.IOException, java.lang.IllegalStateException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Changes the splash screen image. The new image is loaded from the
 specified URL; GIF, JPEG and PNG image formats are supported.
 The method returns after the image has finished loading and the window
 has been updated.
 The splash screen window is resized according to the size of
 the image and is centered on the screen.

 @param imageURL the non-<code>null</code> URL for the new
        splash screen image
 @throws NullPointerException if {@code imageURL} is <code>null</code>
 @throws IOException if there was an error while loading the image
 @throws IllegalStateException if the splash screen has already been
         closed

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.net.URL java.awt.SplashScreen.getImageURL() throws java.lang.IllegalStateException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current splash screen image.

 @return URL for the current splash screen image file
 @throws IllegalStateException if the splash screen has already been closed

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Rectangle java.awt.SplashScreen.getBounds() throws java.lang.IllegalStateException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the bounds of the splash screen window as a {@link Rectangle}.
 This may be useful if, for example, you want to replace the splash
 screen with your window at the same location.
 <p>
 You cannot control the size or position of the splash screen.
 The splash screen size is adjusted automatically when the image changes.

 @return a {@code Rectangle} containing the splash screen bounds
 @throws IllegalStateException if the splash screen has already been closed

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.SplashScreen.getSize() throws java.lang.IllegalStateException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the size of the splash screen window as a {@link Dimension}. 
 This may be useful if, for example,
 you want to draw on the splash screen overlay surface.
 <p>
 You cannot control the size or position of the splash screen.
 The splash screen size is adjusted automatically when the image changes.

 @return a {@link Dimension} object indicating the splash screen size
 @throws IllegalStateException if the splash screen has already been closed

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Graphics2D java.awt.SplashScreen.createGraphics() throws java.lang.IllegalStateException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a graphics context (as a {@link Graphics2D} object) for the splash
 screen overlay image, which allows you to draw over the splash screen.
 Note that you do not draw on the main image but on the image that is
 displayed over the main image using alpha blending. Also note that drawing
 on the overlay image does not necessarily update the contents of splash
 screen window. You should call {@code update()} on the
 <code>SplashScreen</code> when you want the splash screen to be
 updated immediately.

 @return graphics context for the splash screen overlay surface
 @throws IllegalStateException if the splash screen has already been closed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.SplashScreen.update() throws java.lang.IllegalStateException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Updates the splash window with current contents of the overlay image.

 @throws IllegalStateException if the overlay image does not exist; 
         for example, if {@code createGraphics} has never been called,
         or if the splash screen has already been closed

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.SplashScreen.close() throws java.lang.IllegalStateException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Hides the splash screen, closes the window, and releases all associated
 resources.

 @throws IllegalStateException if the splash screen has already been closed

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.SplashScreen.isVisible()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines whether the splash screen is visible. The splash screen may
 be hidden using {@link #close()}, it is also hidden automatically when
 the first AWT/Swing window is made visible.

 @return true if the splash screen is visible (has not been closed yet),
         false otherwise

<!-- END DATA -->
