<!-- BEGIN KEY -->
public static class java.awt.geom.Arc2D.Float extends java.awt.geom.Arc2D implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class defines an arc specified in {@code float} precision.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.geom.Arc2D.Float.x
<!-- END KEY -->
<!-- BEGIN DATA -->
 The X coordinate of the upper-left corner of the framing
 rectangle of the arc.
 @since 1.2
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.geom.Arc2D.Float.y
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Y coordinate of the upper-left corner of the framing
 rectangle of the arc.
 @since 1.2
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.geom.Arc2D.Float.width
<!-- END KEY -->
<!-- BEGIN DATA -->
 The overall width of the full ellipse of which this arc is 
 a partial section (not considering the
 angular extents).
 @since 1.2
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.geom.Arc2D.Float.height
<!-- END KEY -->
<!-- BEGIN DATA -->
 The overall height of the full ellipse of which this arc is 
 a partial section (not considering the
 angular extents).
 @since 1.2
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.geom.Arc2D.Float.start
<!-- END KEY -->
<!-- BEGIN DATA -->
 The starting angle of the arc in degrees.
 @since 1.2
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.geom.Arc2D.Float.extent
<!-- END KEY -->
<!-- BEGIN DATA -->
 The angular extent of the arc in degrees.
 @since 1.2
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Arc2D.Float()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new OPEN arc, initialized to location (0, 0),
 size (0, 0), angular extents (start = 0, extent = 0).
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Arc2D.Float(int type)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new arc, initialized to location (0, 0),
 size (0, 0), angular extents (start = 0, extent = 0), and
 the specified closure type.

 @param type The closure type for the arc: 
 {@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Arc2D.Float(float x, float y, float w, float h, float start, float extent, int type)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new arc, initialized to the specified location,
 size, angular extents, and closure type.

 @param x The X coordinate of the upper-left corner of  
          the arc's framing rectangle.
 @param y The Y coordinate of the upper-left corner of  
          the arc's framing rectangle.
 @param w The overall width of the full ellipse of which  
          this arc is a partial section.
 @param h The overall height of the full ellipse of which this  
          arc is a partial section.
 @param start The starting angle of the arc in degrees.
 @param extent The angular extent of the arc in degrees.
 @param type The closure type for the arc: 
 {@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Arc2D.Float(Rectangle2D ellipseBounds, float start, float extent, int type)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new arc, initialized to the specified location,
 size, angular extents, and closure type.

 @param ellipseBounds The framing rectangle that defines the 
 outer boundary of the full ellipse of which this arc is a 
 partial section.  
 @param start The starting angle of the arc in degrees.  
 @param extent The angular extent of the arc in degrees.  
 @param type The closure type for the arc: 
 {@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.Arc2D.Float.getX()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 Note that the arc
 <a href="Arc2D.html#inscribes">partially inscribes</a>
 the framing rectangle of this {@code RectangularShape}.

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.Arc2D.Float.getY()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 Note that the arc
 <a href="Arc2D.html#inscribes">partially inscribes</a>
 the framing rectangle of this {@code RectangularShape}.

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.Arc2D.Float.getWidth()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 Note that the arc
 <a href="Arc2D.html#inscribes">partially inscribes</a>
 the framing rectangle of this {@code RectangularShape}.

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.Arc2D.Float.getHeight()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 Note that the arc
 <a href="Arc2D.html#inscribes">partially inscribes</a>
 the framing rectangle of this {@code RectangularShape}.

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.Arc2D.Float.getAngleStart()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.geom.Arc2D.Float.getAngleExtent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.geom.Arc2D.Float.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.Arc2D.Float.setArc(double x, double y, double w, double h, double angSt, double angExt, int closure)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.Arc2D.Float.setAngleStart(double angSt)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.geom.Arc2D.Float.setAngleExtent(double angExt)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.geom.Rectangle2D java.awt.geom.Arc2D.Float.makeBounds(double x, double y, double w, double h)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.geom.Arc2D.Float.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads the default serializable fields from the
 <code>ObjectInputStream</code> followed by a byte
 indicating the arc type of this <code>Arc2D</code>
 instance.

 @serialData
 <ol>
 <li>The default serializable fields.
 <li>
 followed by a <code>byte</code> indicating the arc type
 {@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
 </ol>

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.geom.Arc2D.Float.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes the default serializable fields to the
 <code>ObjectOutputStream</code> followed by a byte
 indicating the arc type of this <code>Arc2D</code>
 instance.

 @serialData
 <ol>
 <li>The default serializable fields.
 <li>
 followed by a <code>byte</code> indicating the arc type
 {@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
 </ol>

<!-- END DATA -->
