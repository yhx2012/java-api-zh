<!-- BEGIN KEY -->
public static class java.awt.geom.Path2D.Float extends java.awt.geom.Path2D implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 The {@code Float} class defines a geometric path with
 coordinates stored in single precision floating point.

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Path2D.Float()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new empty single precision {@code Path2D} object
 with a default winding rule of {@link #WIND_NON_ZERO}.

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Path2D.Float(int rule)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new empty single precision {@code Path2D} object
 with the specified winding rule to control operations that
 require the interior of the path to be defined.

 @param rule the winding rule
 @see #WIND_EVEN_ODD
 @see #WIND_NON_ZERO
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Path2D.Float(int rule, int initialCapacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new empty single precision {@code Path2D} object
 with the specified winding rule and the specified initial
 capacity to store path segments.
 This number is an initial guess as to how many path segments
 will be added to the path, but the storage is expanded as
 needed to store whatever path segments are added.

 @param rule the winding rule
 @param initialCapacity the estimate for the number of path segments
                        in the path
 @see #WIND_EVEN_ODD
 @see #WIND_NON_ZERO
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Path2D.Float(Shape s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new single precision {@code Path2D} object
 from an arbitrary {@link Shape} object.
 All of the initial geometry and the winding rule for this path are
 taken from the specified {@code Shape} object.

 @param s the specified {@code Shape} object
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Path2D.Float(Shape s, AffineTransform at)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new single precision {@code Path2D} object
 from an arbitrary {@link Shape} object, transformed by an
 {@link AffineTransform} object.
 All of the initial geometry and the winding rule for this path are
 taken from the specified {@code Shape} object and transformed
 by the specified {@code AffineTransform} object.

 @param s the specified {@code Shape} object
 @param at the specified {@code AffineTransform} object
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final synchronized void java.awt.geom.Path2D.Float.moveTo(double x, double y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final synchronized void java.awt.geom.Path2D.Float.moveTo(float x, float y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a point to the path by moving to the specified
 coordinates specified in float precision.
 <p>
 This method provides a single precision variant of
 the double precision {@code moveTo()} method on the
 base {@code Path2D} class.

 @param x the specified X coordinate
 @param y the specified Y coordinate
 @see Path2D#moveTo
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final synchronized void java.awt.geom.Path2D.Float.lineTo(double x, double y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final synchronized void java.awt.geom.Path2D.Float.lineTo(float x, float y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a point to the path by drawing a straight line from the
 current coordinates to the new specified coordinates
 specified in float precision.
 <p>
 This method provides a single precision variant of
 the double precision {@code lineTo()} method on the
 base {@code Path2D} class.

 @param x the specified X coordinate
 @param y the specified Y coordinate
 @see Path2D#lineTo
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final synchronized void java.awt.geom.Path2D.Float.quadTo(double x1, double y1, double x2, double y2)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final synchronized void java.awt.geom.Path2D.Float.quadTo(float x1, float y1, float x2, float y2)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a curved segment, defined by two new points, to the path by
 drawing a Quadratic curve that intersects both the current
 coordinates and the specified coordinates {@code (x2,y2)},
 using the specified point {@code (x1,y1)} as a quadratic
 parametric control point.
 All coordinates are specified in float precision.
 <p>
 This method provides a single precision variant of
 the double precision {@code quadTo()} method on the
 base {@code Path2D} class.

 @param x1 the X coordinate of the quadratic control point
 @param y1 the Y coordinate of the quadratic control point
 @param x2 the X coordinate of the final end point
 @param y2 the Y coordinate of the final end point
 @see Path2D#quadTo
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final synchronized void java.awt.geom.Path2D.Float.curveTo(double x1, double y1, double x2, double y2, double x3, double y3)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final synchronized void java.awt.geom.Path2D.Float.curveTo(float x1, float y1, float x2, float y2, float x3, float y3)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a curved segment, defined by three new points, to the path by
 drawing a B&eacute;zier curve that intersects both the current
 coordinates and the specified coordinates {@code (x3,y3)},
 using the specified points {@code (x1,y1)} and {@code (x2,y2)} as
 B&eacute;zier control points.
 All coordinates are specified in float precision.
 <p>
 This method provides a single precision variant of
 the double precision {@code curveTo()} method on the
 base {@code Path2D} class.

 @param x1 the X coordinate of the first B&eacute;zier control point
 @param y1 the Y coordinate of the first B&eacute;zier control point
 @param x2 the X coordinate of the second B&eacute;zier control point
 @param y2 the Y coordinate of the second B&eacute;zier control point
 @param x3 the X coordinate of the final end point
 @param y3 the Y coordinate of the final end point
 @see Path2D#curveTo
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.awt.geom.Path2D.Float.append(PathIterator pi, boolean connect)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.awt.geom.Path2D.Float.transform(AffineTransform at)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final synchronized java.awt.geom.Rectangle2D java.awt.geom.Path2D.Float.getBounds2D()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.PathIterator java.awt.geom.Path2D.Float.getPathIterator(AffineTransform at)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 <p>
 The iterator for this class is not multi-threaded safe,
 which means that the {@code Path2D} class does not
 guarantee that modifications to the geometry of this
 {@code Path2D} object do not affect any iterations of
 that geometry that are already in process.

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.Object java.awt.geom.Path2D.Float.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new object of the same class as this object.

 @return     a clone of this instance.
 @exception  OutOfMemoryError    if there is not enough memory.
 @see        java.lang.Cloneable
 @since      1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.geom.Path2D.Float.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads the default serializable fields from the
 {@code ObjectInputStream} followed by an explicit
 serialization of the path segments stored in this
 path.
 <p>
 There are no default serializable fields as of 1.6.
 <p>
 The serial data for this object is described in the
 writeObject method.

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.geom.Path2D.Float.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes the default serializable fields to the
 {@code ObjectOutputStream} followed by an explicit
 serialization of the path segments stored in this
 path.

 @serialData
 <a name="Path2DSerialData"><!-- --></a>
 <ol>
 <li>The default serializable fields.
 There are no default serializable fields as of 1.6.
 <li>followed by
 a byte indicating the storage type of the original object
 as a hint (SERIAL_STORAGE_FLT_ARRAY)
 <li>followed by
 an integer indicating the number of path segments to follow (NP)
 or -1 to indicate an unknown number of path segments follows
 <li>followed by
 an integer indicating the total number of coordinates to follow (NC)
 or -1 to indicate an unknown number of coordinates follows
 (NC should always be even since coordinates always appear in pairs
  representing an x,y pair)
 <li>followed by
 a byte indicating the winding rule
 ({@link #WIND_EVEN_ODD WIND_EVEN_ODD} or
  {@link #WIND_NON_ZERO WIND_NON_ZERO})
 <li>followed by
 NP (or unlimited if NP < 0) sets of values consisting of
 a single byte indicating a path segment type
 followed by one or more pairs of float or double
 values representing the coordinates of the path segment
 <li>followed by
 a byte indicating the end of the path (SERIAL_PATH_END).
 </ol>
 <p>
 The following byte value constants are used in the serialized form
 of {@code Path2D} objects:
 <table>
 <tr>
 <th>Constant Name</th>
 <th>Byte Value</th>
 <th>Followed by</th>
 <th>Description</th>
 </tr>
 <tr>
 <td>{@code SERIAL_STORAGE_FLT_ARRAY}</td>
 <td>0x30</td>
 <td></td>
 <td>A hint that the original {@code Path2D} object stored
 the coordinates in a Java array of floats.</td>
 </tr>
 <tr>
 <td>{@code SERIAL_STORAGE_DBL_ARRAY}</td>
 <td>0x31</td>
 <td></td>
 <td>A hint that the original {@code Path2D} object stored
 the coordinates in a Java array of doubles.</td>
 </tr>
 <tr>
 <td>{@code SERIAL_SEG_FLT_MOVETO}</td>
 <td>0x40</td>
 <td>2 floats</td>
 <td>A {@link #moveTo moveTo} path segment follows.</td>
 </tr>
 <tr>
 <td>{@code SERIAL_SEG_FLT_LINETO}</td>
 <td>0x41</td>
 <td>2 floats</td>
 <td>A {@link #lineTo lineTo} path segment follows.</td>
 </tr>
 <tr>
 <td>{@code SERIAL_SEG_FLT_QUADTO}</td>
 <td>0x42</td>
 <td>4 floats</td>
 <td>A {@link #quadTo quadTo} path segment follows.</td>
 </tr>
 <tr>
 <td>{@code SERIAL_SEG_FLT_CUBICTO}</td>
 <td>0x43</td>
 <td>6 floats</td>
 <td>A {@link #curveTo curveTo} path segment follows.</td>
 </tr>
 <tr>
 <td>{@code SERIAL_SEG_DBL_MOVETO}</td>
 <td>0x50</td>
 <td>2 doubles</td>
 <td>A {@link #moveTo moveTo} path segment follows.</td>
 </tr>
 <tr>
 <td>{@code SERIAL_SEG_DBL_LINETO}</td>
 <td>0x51</td>
 <td>2 doubles</td>
 <td>A {@link #lineTo lineTo} path segment follows.</td>
 </tr>
 <tr>
 <td>{@code SERIAL_SEG_DBL_QUADTO}</td>
 <td>0x52</td>
 <td>4 doubles</td>
 <td>A {@link #curveTo curveTo} path segment follows.</td>
 </tr>
 <tr>
 <td>{@code SERIAL_SEG_DBL_CUBICTO}</td>
 <td>0x53</td>
 <td>6 doubles</td>
 <td>A {@link #curveTo curveTo} path segment follows.</td>
 </tr>
 <tr>
 <td>{@code SERIAL_SEG_CLOSE}</td>
 <td>0x60</td>
 <td></td>
 <td>A {@link #closePath closePath} path segment.</td>
 </tr>
 <tr>
 <td>{@code SERIAL_PATH_END}</td>
 <td>0x61</td>
 <td></td>
 <td>There are no more path segments following.</td>
 </table>

 @since 1.6

<!-- END DATA -->
