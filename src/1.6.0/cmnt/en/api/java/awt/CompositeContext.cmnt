<!-- BEGIN KEY -->
public interface java.awt.CompositeContext
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>CompositeContext</code> interface defines the encapsulated
 and optimized environment for a compositing operation.
 <code>CompositeContext</code> objects maintain state for
 compositing operations.  In a multi-threaded environment, several
 contexts can exist simultaneously for a single {@link Composite} 
 object.
 @see Composite
 @version 10 Feb 1997

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.CompositeContext.dispose()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Releases resources allocated for a context.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.CompositeContext.compose(Raster src, Raster dstIn, WritableRaster dstOut)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Composes the two source {@link Raster} objects and 
 places the result in the destination 
 {@link WritableRaster}.  Note that the destination 
 can be the same object as either the first or second 
 source. Note that <code>dstIn</code> and 
 <code>dstOut</code> must be compatible with the 
 <code>dstColorModel</code> passed to the 
 {@link Composite#createContext(java.awt.image.ColorModel, java.awt.image.ColorModel, java.awt.RenderingHints) createContext} 
 method of the <code>Composite</code> interface.
 @param src the first source for the compositing operation
 @param dstIn the second source for the compositing operation
 @param dstOut the <code>WritableRaster</code> into which the 
 result of the operation is stored
 @see Composite

<!-- END DATA -->
