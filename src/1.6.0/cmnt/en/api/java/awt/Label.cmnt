<!-- BEGIN KEY -->
public class java.awt.Label extends java.awt.Component implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <code>Label</code> object is a component for placing text in a
 container. A label displays a single line of read-only text.
 The text can be changed by the application, but a user cannot edit it
 directly.
 <p>
 For example, the code&nbsp;.&nbsp;.&nbsp;.
 <p>
 <hr><blockquote><pre>
 setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10));
 add(new Label("Hi There!"));
 add(new Label("Another Label"));
 </pre></blockquote><hr>
 <p>
 produces the following labels:
 <p>
 <img src="doc-files/Label-1.gif" alt="Two labels: 'Hi There!' and 'Another label'"
 ALIGN=center HSPACE=10 VSPACE=7>

 @version	1.59, 04/07/06
 @author 	Sami Shaio
 @since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Label.LEFT
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates that the label should be left justified.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Label.CENTER
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates that the label should be centered.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.Label.RIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates that the label should be right justified.
 @since   JDK1.0t.

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String java.awt.Label.text
<!-- END KEY -->
<!-- BEGIN DATA -->
 The text of this label.
 This text can be modified by the program
 but never by the user.

 @serial
 @see #getText()
 @see #setText(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.Label.alignment
<!-- END KEY -->
<!-- BEGIN DATA -->
 The label's alignment.  The default alignment is set
 to be left justified.

 @serial
 @see #getAlignment()
 @see #setAlignment(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Label() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an empty label.
 The text of the label is the empty string <code>""</code>.
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
 returns true.
 @see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Label(String text) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new label with the specified string of text,
 left justified.
 @param text the string that the label presents.
        A <code>null</code> value
        will be accepted without causing a NullPointerException
        to be thrown.
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
 returns true.
 @see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Label(String text, int alignment) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new label that presents the specified string of
 text with the specified alignment.
 Possible values for <code>alignment</code> are <code>Label.LEFT</code>,
 <code>Label.RIGHT</code>, and <code>Label.CENTER</code>.
 @param text the string that the label presents.
        A <code>null</code> value
        will be accepted without causing a NullPointerException
        to be thrown.
 @param     alignment   the alignment value.
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
 returns true.
 @see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Label.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the peer for this label.  The peer allows us to
 modify the appearance of the label without changing its
 functionality.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Label.getAlignment()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the current alignment of this label. Possible values are
 <code>Label.LEFT</code>, <code>Label.RIGHT</code>, and
 <code>Label.CENTER</code>.
 @see        java.awt.Label#setAlignment

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Label.setAlignment(int alignment)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the alignment for this label to the specified alignment.
 Possible values are <code>Label.LEFT</code>,
 <code>Label.RIGHT</code>, and <code>Label.CENTER</code>.
 @param      alignment    the alignment to be set.
 @exception  IllegalArgumentException if an improper value for
                          <code>alignment</code> is given.
 @see        java.awt.Label#getAlignment

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.Label.getText()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Gets the text of this label. 
 @return     the text of this label, or <code>null</code> if 
             the text has been set to <code>null</code>.
 @see        java.awt.Label#setText

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Label.setText(String text)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the text for this label to the specified text.
 @param      text the text that this label displays. If 
             <code>text</code> is <code>null</code>, it is 
             treated for display purposes like an empty 
             string <code>""</code>.
 @see        java.awt.Label#getText

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.awt.Label.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representing the state of this <code>Label</code>.
 This method is intended to be used only for debugging purposes, and the 
 content and format of the returned string may vary between 
 implementations. The returned string may be empty but may not be 
 <code>null</code>.

 @return     the parameter string of this label

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.Label.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleContext associated with this Label. 
 For labels, the AccessibleContext takes the form of an 
 AccessibleAWTLabel. 
 A new AccessibleAWTLabel instance is created if necessary.

 @return an AccessibleAWTLabel that serves as the 
         AccessibleContext of this Label
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.Label.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Read a label from an object input stream.
 @exception HeadlessException if
 <code>GraphicsEnvironment.isHeadless()</code> returns
 <code>true</code>
 @serial
 @since 1.4
 @see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
