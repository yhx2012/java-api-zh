<!-- BEGIN KEY -->
public class java.awt.Window extends java.awt.Container implements javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <code>Window</code> object is a top-level window with no borders and no
 menubar.  
 The default layout for a window is <code>BorderLayout</code>.
 <p>
 A window must have either a frame, dialog, or another window defined as its
 owner when it's constructed. 
 <p>
 In a multi-screen environment, you can create a <code>Window</code>
 on a different screen device by constructing the <code>Window</code>
 with {@link #Window(Window, GraphicsConfiguration)}.  The 
 <code>GraphicsConfiguration</code> object is one of the 
 <code>GraphicsConfiguration</code> objects of the target screen device.  
 <p>
 In a virtual device multi-screen environment in which the desktop 
 area could span multiple physical screen devices, the bounds of all
 configurations are relative to the virtual device coordinate system.  
 The origin of the virtual-coordinate system is at the upper left-hand 
 corner of the primary physical screen.  Depending on the location of
 the primary screen in the virtual device, negative coordinates are 
 possible, as shown in the following figure.
 <p>
 <img src="doc-files/MultiScreen.gif"
 alt="Diagram shows virtual device containing 4 physical screens. Primary physical screen shows coords (0,0), other screen shows (-80,-100)."
 ALIGN=center HSPACE=10 VSPACE=7>
 <p>  
 In such an environment, when calling <code>setLocation</code>, 
 you must pass a virtual coordinate to this method.  Similarly,
 calling <code>getLocationOnScreen</code> on a <code>Window</code> returns 
 virtual device coordinates.  Call the <code>getBounds</code> method 
 of a <code>GraphicsConfiguration</code> to find its origin in the virtual
 coordinate system.
 <p>
 The following code sets the location of a <code>Window</code> 
 at (10, 10) relative to the origin of the physical screen
 of the corresponding <code>GraphicsConfiguration</code>.  If the 
 bounds of the <code>GraphicsConfiguration</code> is not taken 
 into account, the <code>Window</code> location would be set 
 at (10, 10) relative to the virtual-coordinate system and would appear
 on the primary physical screen, which might be different from the
 physical screen of the specified <code>GraphicsConfiguration</code>.

 <pre>
	Window w = new Window(Window owner, GraphicsConfiguration gc);
	Rectangle bounds = gc.getBounds();
	w.setLocation(10 + bounds.x, 10 + bounds.y);
 </pre>

 <p>
 Note: the location and size of top-level windows (including
 <code>Window</code>s, <code>Frame</code>s, and <code>Dialog</code>s)
 are under the control of the desktop's window management system.
 Calls to <code>setLocation</code>, <code>setSize</code>, and
 <code>setBounds</code> are requests (not directives) which are
 forwarded to the window management system.  Every effort will be
 made to honor such requests.  However, in some cases the window
 management system may ignore such requests, or modify the requested
 geometry in order to place and size the <code>Window</code> in a way
 that more closely matches the desktop settings.
 <p>
 Due to the asynchronous nature of native event handling, the results
 returned by <code>getBounds</code>, <code>getLocation</code>,
 <code>getLocationOnScreen</code>, and <code>getSize</code> might not 
 reflect the actual geometry of the Window on screen until the last
 request has been processed.  During the processing of subsequent
 requests these values might change accordingly while the window
 management system fulfills the requests.
 <p>
 An application may set the size and location of an invisible
 {@code Window} arbitrarily, but the window management system may
 subsequently change its size and/or location when the
 {@code Window} is made visible. One or more {@code ComponentEvent}s
 will be generated to indicate the new geometry.
 <p>
 Windows are capable of generating the following WindowEvents:
 WindowOpened, WindowClosed, WindowGainedFocus, WindowLostFocus.

 @version 	1.240, 03/15/06
 @author 	Sami Shaio
 @author 	Arthur van Hoff
 @see WindowEvent
 @see #addWindowListener
 @see java.awt.BorderLayout
 @since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String java.awt.Window.warningString
<!-- END KEY -->
<!-- BEGIN DATA -->
 This represents the warning message that is
 to be displayed in a non secure window. ie :
 a window that has a security manager installed for
 which calling SecurityManager.checkTopLevelWindow()
 is false.  This message can be displayed anywhere in
 the window.

 @serial
 @see #getWarningString

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.Window.state
<!-- END KEY -->
<!-- BEGIN DATA -->
 An Integer value representing the Window State.

 @serial
 @since 1.2
 @see #show

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean java.awt.Window.alwaysOnTop
<!-- END KEY -->
<!-- BEGIN DATA -->
 A boolean value representing Window always-on-top state
 @since 1.5
 @serial
 @see #setAlwaysOnTop
 @see #isAlwaysOnTop

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.Dialog.ModalExclusionType java.awt.Window.modalExclusionType
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial

 @see java.awt.Dialog.ModalExclusionType
 @see #getModalExclusionType
 @see #setModalExclusionType

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.FocusManager java.awt.Window.focusMgr
<!-- END KEY -->
<!-- BEGIN DATA -->
 Unused. Maintained for serialization backward-compatibility.

 @serial
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean java.awt.Window.focusableWindowState
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates whether this Window can become the focused Window.

 @serial
 @see #getFocusableWindowState
 @see #setFocusableWindowState
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.Window.windowSerializedDataVersion
<!-- END KEY -->
<!-- BEGIN DATA -->
 The window serialized data version.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Window(Frame owner)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new, initially invisible window with the specified
 <code>Frame</code> as its owner. The window will not be focusable 
 unless its owner is showing on the screen.
 <p>
 If there is a security manager, this method first calls 
 the security manager's <code>checkTopLevelWindow</code> 
 method with <code>this</code> 
 as its argument to determine whether or not the window 
 must be displayed with a warning banner. 
 
 @param owner the <code>Frame</code> to act as owner or <code>null</code>
    if this window has no owner
 @exception IllegalArgumentException if the <code>owner</code>'s
    <code>GraphicsConfiguration</code> is not from a screen device
 @exception HeadlessException when
    <code>GraphicsEnvironment.isHeadless</code> returns <code>true</code>

 @see java.awt.GraphicsEnvironment#isHeadless
 @see java.lang.SecurityManager#checkTopLevelWindow
 @see #isShowing

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Window(Window owner)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new, initially invisible window with the specified
 <code>Window</code> as its owner. This window will not be focusable 
 unless its nearest owning <code>Frame</code> or <code>Dialog</code>
 is showing on the screen.
 <p>
 If there is a security manager, this method first calls 
 the security manager's <code>checkTopLevelWindow</code> 
 method with <code>this</code> 
 as its argument to determine whether or not the window 
 must be displayed with a warning banner. 
 
 @param owner the <code>Window</code> to act as owner or
     <code>null</code> if this window has no owner
 @exception IllegalArgumentException if the <code>owner</code>'s
     <code>GraphicsConfiguration</code> is not from a screen device
 @exception HeadlessException when
     <code>GraphicsEnvironment.isHeadless()</code> returns
     <code>true</code>

 @see       java.awt.GraphicsEnvironment#isHeadless
 @see       java.lang.SecurityManager#checkTopLevelWindow
 @see       #isShowing

 @since     1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Window(Window owner, GraphicsConfiguration gc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new, initially invisible window with the specified owner
 <code>Window</code> and a <code>GraphicsConfiguration</code>
 of a screen device. The Window will not be focusable unless
 its nearest owning <code>Frame</code> or <code>Dialog</code>
 is showing on the screen.
 <p>
 If there is a security manager, this method first calls 
 the security manager's <code>checkTopLevelWindow</code> 
 method with <code>this</code> 
 as its argument to determine whether or not the window 
 must be displayed with a warning banner.

 @param owner the window to act as owner or <code>null</code>
     if this window has no owner
 @param gc the <code>GraphicsConfiguration</code> of the target
     screen device; if <code>gc</code> is <code>null</code>,
     the system default <code>GraphicsConfiguration</code> is assumed
 @exception IllegalArgumentException if <code>gc</code>
     is not from a screen device
 @exception HeadlessException when
     <code>GraphicsEnvironment.isHeadless()</code> returns
     <code>true</code>

 @see       java.awt.GraphicsEnvironment#isHeadless
 @see       java.lang.SecurityManager#checkTopLevelWindow
 @see       GraphicsConfiguration#getBounds
 @see       #isShowing
 @since     1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.awt.Image> java.awt.Window.getIconImages()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the sequence of images to be displayed as the icon for this window.
 <p>
 This method returns a copy of the internally stored list, so all operations
 on the returned object will not affect the window's behavior.

 @return    the copy of icon images' list for this window, or 
            empty list if this window doesn't have icon images. 
 @see       #setIconImages
 @see       #setIconImage(Image)
 @since     1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Window.setIconImages(java.util.List<? extends java.awt.Image> icons)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the sequence of images to be displayed as the icon 
 for this window. Subsequent calls to {@code getIconImages} will
 always return a copy of the {@code icons} list.
 <p>
 Depending on the platform capabilities one or several images 
 of different dimensions will be used as the window's icon.
 <p>
 The {@code icons} list is scanned for the images of most 
 appropriate dimensions from the beginning. If the list contains
 several images of the same size, the first will be used.
 <p>
 Ownerless windows with no icon specified use platfrom-default icon.
 The icon of an owned window may be inherited from the owner
 unless explicitly overridden.
 Setting the icon to {@code null} or empty list restores
 the default behavior.
 <p>
 Note : Native windowing systems may use different images of differing 
 dimensions to represent a window, depending on the context (e.g. 
 window decoration, window list, taskbar, etc.). They could also use 
 just a single image for all contexts or no image at all.
 
 @param     icons the list of icon images to be displayed.
 @see       #getIconImages()
 @see       #setIconImage(Image)
 @since     1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.setIconImage(Image image)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the image to be displayed as the icon for this window.
 <p>
 This method can be used instead of {@link #setIconImages setIconImages()}
 to specify a single image as a window's icon.
 <p>
 The following statement:
 <pre>
     setIconImage(image);
 </pre>
 is equivalent to:
 <pre>
     ArrayList<Image> imageList = new ArrayList<Image>();
     imageList.add(image);
     setIconImages(imageList);
 </pre>
 <p>
 Note : Native windowing systems may use different images of differing 
 dimensions to represent a window, depending on the context (e.g. 
 window decoration, window list, taskbar, etc.). They could also use 
 just a single image for all contexts or no image at all.

 @param     image the icon image to be displayed.
 @see       #setIconImages
 @see       #getIconImages()
 @since     1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Makes this Window displayable by creating the connection to its
 native screen resource.  
 This method is called internally by the toolkit and should
 not be called directly by programs.
 @see Component#isDisplayable
 @see Container#removeNotify
 @since JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.removeNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.pack()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Causes this Window to be sized to fit the preferred size
 and layouts of its subcomponents.  If the window and/or its owner
 are not yet displayable, both are made displayable before
 calculating the preferred size.  The Window will be validated
 after the preferredSize is calculated.
 @see Component#isDisplayable

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.setMinimumSize(Dimension minimumSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the minimum size of this window to a constant
 value.  Subsequent calls to {@code getMinimumSize}
 will always return this value. If current window's
 size is less than {@code minimumSize} the size of the
 window is automatically enlarged to honor the minimum size.
 <p>
 If the {@code setSize} or {@code setBounds} methods
 are called afterwards with a width or height less than
 that specified by {@code setMinimumSize} the window
 is automatically enlarged to honor the {@code minimumSize}
 value. Setting the minimum size to {@code null} restores
 the default behavior.
 <p>
 Resizing operation may be restricted if the user tries
 to resize window below the {@code minimumSize} value.
 This behaviour is platform-dependent.

 @param minimumSize the new minimum size of this window
 @see Component#setMinimumSize
 @see #getMinimumSize
 @see #isMinimumSizeSet
 @see #setSize(Dimension)
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.setSize(Dimension d)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 <p>
 The {@code d.width} and {@code d.height} values
 are automatically enlarged if either is less than
 the minimum size as specified by previous call to
 {@code setMinimumSize}.

 @see #getSize
 @see #setBounds
 @see #setMinimumSize
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.setSize(int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 <p>
 The {@code width} and {@code height} values
 are automatically enlarged if either is less than
 the minimum size as specified by previous call to
 {@code setMinimumSize}.

 @see #getSize
 @see #setBounds
 @see #setMinimumSize
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.reshape(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated As of JDK version 1.1,
 replaced by <code>setBounds(int, int, int, int)</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.setVisible(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Shows or hides this {@code Window} depending on the value of parameter
 {@code b}.
 @param b  if {@code true}, makes the {@code Window} visible, 
 otherwise hides the {@code Window}.
 If the {@code Window} and/or its owner
 are not yet displayable, both are made displayable.  The 
 {@code Window} will be validated prior to being made visible.  
 If the {@code Window} is already visible, this will bring the 
 {@code Window} to the front.<p>
 If {@code false}, hides this {@code Window}, its subcomponents, and all
 of its owned children. 
 The {@code Window} and its subcomponents can be made visible again
 with a call to {@code #setVisible(true)}.
 @see java.awt.Component#isDisplayable
 @see java.awt.Component#setVisible
 @see java.awt.Window#toFront
 @see java.awt.Window#dispose

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.show()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Makes the Window visible. If the Window and/or its owner
 are not yet displayable, both are made displayable.  The 
 Window will be validated prior to being made visible.  
 If the Window is already visible, this will bring the Window 
 to the front.
 @see       Component#isDisplayable
 @see       #toFront
 @deprecated As of JDK version 1.5, replaced by
 {@link #setVisible(boolean)}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.hide()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Hide this Window, its subcomponents, and all of its owned children. 
 The Window and its subcomponents can be made visible again
 with a call to {@code show}. 
 </p>
 @see #show
 @see #dispose
 @deprecated As of JDK version 1.5, replaced by
 {@link #setVisible(boolean)}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.dispose()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Releases all of the native screen resources used by this
 <code>Window</code>, its subcomponents, and all of its owned
 children. That is, the resources for these <code>Component</code>s
 will be destroyed, any memory they consume will be returned to the
 OS, and they will be marked as undisplayable.
 <p>
 The <code>Window</code> and its subcomponents can be made displayable
 again by rebuilding the native resources with a subsequent call to
 <code>pack</code> or <code>show</code>. The states of the recreated
 <code>Window</code> and its subcomponents will be identical to the
 states of these objects at the point where the <code>Window</code>
 was disposed (not accounting for additional modifications between
 those actions).
 <p>
 <b>Note</b>: When the last displayable window
 within the Java virtual machine (VM) is disposed of, the VM may
 terminate.  See <a href="doc-files/AWTThreadIssues.html#Autoshutdown">
 AWT Threading Issues</a> for more information.
 @see Component#isDisplayable
 @see #pack
 @see #show

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.toFront()
<!-- END KEY -->
<!-- BEGIN DATA -->
 If this Window is visible, brings this Window to the front and may make
 it the focused Window.
 <p>
 Places this Window at the top of the stacking order and shows it in
 front of any other Windows in this VM. No action will take place if this
 Window is not visible. Some platforms do not allow Windows which own
 other Windows to appear on top of those owned Windows. Some platforms
 may not permit this VM to place its Windows above windows of native
 applications, or Windows of other VMs. This permission may depend on
 whether a Window in this VM is already focused. Every attempt will be
 made to move this Window as high as possible in the stacking order;
 however, developers should not assume that this method will move this
 Window above all other windows in every situation.
 <p>
 Because of variations in native windowing systems, no guarantees about
 changes to the focused and active Windows can be made. Developers must
 never assume that this Window is the focused or active Window until this
 Window receives a WINDOW_GAINED_FOCUS or WINDOW_ACTIVATED event. On
 platforms where the top-most window is the focused window, this method
 will <b>probably</b> focus this Window, if it is not already focused. On
 platforms where the stacking order does not typically affect the focused
 window, this method will <b>probably</b> leave the focused and active
 Windows unchanged.
 <p>
 If this method causes this Window to be focused, and this Window is a
 Frame or a Dialog, it will also become activated. If this Window is
 focused, but it is not a Frame or a Dialog, then the first Frame or
 Dialog that is an owner of this Window will be activated.
 <p>
 If this window is blocked by modal dialog, then the blocking dialog
 is brought to the front and remains above the blocked window.

 @see       #toBack

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.toBack()
<!-- END KEY -->
<!-- BEGIN DATA -->
 If this Window is visible, sends this Window to the back and may cause
 it to lose focus or activation if it is the focused or active Window.
 <p>
 Places this Window at the bottom of the stacking order and shows it
 behind any other Windows in this VM. No action will take place is this
 Window is not visible. Some platforms do not allow Windows which are
 owned by other Windows to appear below their owners. Every attempt will
 be made to move this Window as low as possible in the stacking order;
 however, developers should not assume that this method will move this
 Window below all other windows in every situation.
 <p>
 Because of variations in native windowing systems, no guarantees about
 changes to the focused and active Windows can be made. Developers must
 never assume that this Window is no longer the focused or active Window
 until this Window receives a WINDOW_LOST_FOCUS or WINDOW_DEACTIVATED
 event. On platforms where the top-most window is the focused window,
 this method will <b>probably</b> cause this Window to lose focus. In
 that case, the next highest, focusable Window in this VM will receive
 focus. On platforms where the stacking order does not typically affect
 the focused window, this method will <b>probably</b> leave the focused
 and active Windows unchanged.

 @see       #toFront

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Toolkit java.awt.Window.getToolkit()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the toolkit of this frame.
 @return    the toolkit of this window.
 @see       Toolkit
 @see       Toolkit#getDefaultToolkit
 @see       Component#getToolkit

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.awt.Window.getWarningString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the warning string that is displayed with this window. 
 If this window is insecure, the warning string is displayed 
 somewhere in the visible area of the window. A window is 
 insecure if there is a security manager, and the security 
 manager's <code>checkTopLevelWindow</code> method returns 
 <code>false</code> when this window is passed to it as an
 argument.
 <p>
 If the window is secure, then <code>getWarningString</code>
 returns <code>null</code>. If the window is insecure, this
 method checks for the system property 
 <code>awt.appletWarning</code> 
 and returns the string value of that property. 
 @return    the warning string for this window.
 @see       java.lang.SecurityManager#checkTopLevelWindow(java.lang.Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Locale java.awt.Window.getLocale()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Gets the <code>Locale</code> object that is associated 
 with this window, if the locale has been set.
 If no locale has been set, then the default locale 
 is returned.
 @return    the locale that is set for this window.
 @see       java.util.Locale
 @since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.im.InputContext java.awt.Window.getInputContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the input context for this window. A window always has an input context,
 which is shared by subcomponents unless they create and set their own.
 @see Component#getInputContext
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.setCursor(Cursor cursor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the cursor image to a specified cursor.
 <p>
 The method may have no visual effect if the Java platform
 implementation and/or the native system do not support
 changing the mouse cursor shape.
 @param     cursor One of the constants defined
            by the <code>Cursor</code> class. If this parameter is null
            then the cursor for this window will be set to the type
            Cursor.DEFAULT_CURSOR.
 @see       Component#getCursor
 @see       Cursor
 @since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Window java.awt.Window.getOwner()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the owner of this window.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Window[] java.awt.Window.getOwnedWindows()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return an array containing all the windows this
 window currently owns.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Window[] java.awt.Window.getWindows()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all {@code Window}s, both owned and ownerless,
 created by this application.
 If called from an applet, the array includes only the {@code Window}s
 accessible by that applet.
 <p>
 <b>Warning:</b> this method may return system created windows, such
 as a print dialog. Applications should not assume the existence of
 these dialogs, nor should an application assume anything about these
 dialogs such as component positions, <code>LayoutManager</code>s
 or serialization.

 @see Frame#getFrames
 @see Window#getOwnerlessWindows

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Window[] java.awt.Window.getOwnerlessWindows()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all {@code Window}s created by this application
 that have no owner. They include {@code Frame}s and ownerless
 {@code Dialog}s and {@code Window}s.
 If called from an applet, the array includes only the {@code Window}s
 accessible by that applet.
 <p>
 <b>Warning:</b> this method may return system created windows, such
 as a print dialog. Applications should not assume the existence of
 these dialogs, nor should an application assume anything about these
 dialogs such as component positions, <code>LayoutManager</code>s
 or serialization.

 @see Frame#getFrames
 @see Window#getWindows

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.setModalExclusionType(Dialog.ModalExclusionType exclusionType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Specifies the modal exclusion type for this window. If a window is modal
 excluded, it is not blocked by some modal dialogs. See {@link
 java.awt.Dialog.ModalExclusionType Dialog.ModalExclusionType} for
 possible modal exclusion types.
 <p>
 If the given type is not supported, <code>NO_EXCLUDE</code> is used.
 <p>
 Note: changing the modal exclusion type for a visible window may have no
 effect until it is hidden and then shown again.

 @param exclusionType the modal exclusion type for this window; a <code>null</code>
     value is equivivalent to {@link Dialog.ModalExclusionType#NO_EXCLUDE
     NO_EXCLUDE}
 @throws SecurityException if the calling thread does not have permission
     to set the modal exclusion property to the window with the given
     <code>exclusionType</code>
 @see java.awt.Dialog.ModalExclusionType
 @see java.awt.Window#getModalExclusionType
 @see java.awt.Toolkit#isModalExclusionTypeSupported

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dialog.ModalExclusionType java.awt.Window.getModalExclusionType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the modal exclusion type of this window.

 @return the modal exclusion type of this window

 @see java.awt.Dialog.ModalExclusionType
 @see java.awt.Window#setModalExclusionType

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Window.addWindowListener(WindowListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified window listener to receive window events from
 this window.
 If l is null, no exception is thrown and no action is performed.
 <p>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
 >AWT Threading Issues</a> for details on AWT's threading model.

 @param 	l the window listener
 @see #removeWindowListener
 @see #getWindowListeners

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Window.addWindowStateListener(WindowStateListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified window state listener to receive window
 events from this window.  If <code>l</code> is <code>null</code>,
 no exception is thrown and no action is performed.
 <p>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
 >AWT Threading Issues</a> for details on AWT's threading model.

 @param   l the window state listener
 @see #removeWindowStateListener
 @see #getWindowStateListeners
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Window.addWindowFocusListener(WindowFocusListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified window focus listener to receive window events
 from this window.
 If l is null, no exception is thrown and no action is performed.
 <p>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
 >AWT Threading Issues</a> for details on AWT's threading model.

 @param   l the window focus listener
 @see #removeWindowFocusListener
 @see #getWindowFocusListeners
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Window.removeWindowListener(WindowListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified window listener so that it no longer
 receives window events from this window.
 If l is null, no exception is thrown and no action is performed.
 <p>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
 >AWT Threading Issues</a> for details on AWT's threading model.

 @param 	l the window listener
 @see #addWindowListener
 @see #getWindowListeners

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Window.removeWindowStateListener(WindowStateListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified window state listener so that it no
 longer receives window events from this window.  If
 <code>l</code> is <code>null</code>, no exception is thrown and
 no action is performed.
 <p>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
 >AWT Threading Issues</a> for details on AWT's threading model.

 @param   l the window state listener
 @see #addWindowStateListener
 @see #getWindowStateListeners
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Window.removeWindowFocusListener(WindowFocusListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified window focus listener so that it no longer
 receives window events from this window.
 If l is null, no exception is thrown and no action is performed.
 <p>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
 >AWT Threading Issues</a> for details on AWT's threading model.

 @param   l the window focus listener
 @see #addWindowFocusListener
 @see #getWindowFocusListeners
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.event.WindowListener[] java.awt.Window.getWindowListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the window listeners
 registered on this window.

 @return all of this window's <code>WindowListener</code>s
         or an empty array if no window
         listeners are currently registered

 @see #addWindowListener
 @see #removeWindowListener
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.event.WindowFocusListener[] java.awt.Window.getWindowFocusListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the window focus listeners
 registered on this window.

 @return all of this window's <code>WindowFocusListener</code>s
         or an empty array if no window focus
         listeners are currently registered

 @see #addWindowFocusListener
 @see #removeWindowFocusListener
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.event.WindowStateListener[] java.awt.Window.getWindowStateListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the window state listeners
 registered on this window.

 @return all of this window's <code>WindowStateListener</code>s
         or an empty array if no window state
         listeners are currently registered

 @see #addWindowStateListener
 @see #removeWindowStateListener
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.awt.Window.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the objects currently registered
 as <code><em>Foo</em>Listener</code>s
 upon this <code>Window</code>.
 <code><em>Foo</em>Listener</code>s are registered using the
 <code>add<em>Foo</em>Listener</code> method.

 <p>

 You can specify the <code>listenerType</code> argument
 with a class literal, such as
 <code><em>Foo</em>Listener.class</code>.
 For example, you can query a
 <code>Window</code> <code>w</code>
 for its window listeners with the following code:

 <pre>WindowListener[] wls = (WindowListener[])(w.getListeners(WindowListener.class));</pre>

 If no such listeners exist, this method returns an empty array.

 @param listenerType the type of listeners requested; this parameter
          should specify an interface that descends from
          <code>java.util.EventListener</code>
 @return an array of all objects registered as
          <code><em>Foo</em>Listener</code>s on this window,
          or an empty array if no such
          listeners have been added
 @exception ClassCastException if <code>listenerType</code>
          doesn't specify a class or interface that implements
          <code>java.util.EventListener</code>

 @see #getWindowListeners
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Window.processEvent(AWTEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Processes events on this window. If the event is an
 <code>WindowEvent</code>, it invokes the
 <code>processWindowEvent</code> method, else it invokes its
 superclass's <code>processEvent</code>.
 <p>Note that if the event parameter is <code>null</code>
 the behavior is unspecified and may result in an
 exception.

 @param e the event

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Window.processWindowEvent(WindowEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Processes window events occurring on this window by
 dispatching them to any registered WindowListener objects.
 NOTE: This method will not be called unless window events
 are enabled for this component; this happens when one of the
 following occurs:
 <ul>
 <li>A WindowListener object is registered via
     <code>addWindowListener</code>
 <li>Window events are enabled via <code>enableEvents</code>
 </ul>
 <p>Note that if the event parameter is <code>null</code>
 the behavior is unspecified and may result in an
 exception.

 @param e the window event
 @see Component#enableEvents

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Window.processWindowFocusEvent(WindowEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Processes window focus event occuring on this window by
 dispatching them to any registered WindowFocusListener objects.
 NOTE: this method will not be called unless window focus events
 are enabled for this window. This happens when one of the
 following occurs:
 <ul>
 <li>a WindowFocusListener is registered via
     <code>addWindowFocusListener</code>
 <li>Window focus events are enabled via <code>enableEvents</code>
 </ul>
 <p>Note that if the event parameter is <code>null</code>
 the behavior is unspecified and may result in an
 exception.

 @param e the window focus event
 @see Component#enableEvents
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.Window.processWindowStateEvent(WindowEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Processes window state event occuring on this window by
 dispatching them to any registered <code>WindowStateListener</code>
 objects.
 NOTE: this method will not be called unless window state events
 are enabled for this window.  This happens when one of the
 following occurs:
 <ul>
 <li>a <code>WindowStateListener</code> is registered via
    <code>addWindowStateListener</code>
 <li>window state events are enabled via <code>enableEvents</code>
 </ul>
 <p>Note that if the event parameter is <code>null</code>
 the behavior is unspecified and may result in an
 exception.

 @param e the window state event
 @see java.awt.Component#enableEvents
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.awt.Window.setAlwaysOnTop(boolean alwaysOnTop) throws java.lang.SecurityException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets whether this window should always be above other windows.  If
 there are multiple always-on-top windows, their relative order is
 unspecified and platform dependent.
 <p>
 If some other window is already always-on-top then the
 relative order between these windows is unspecified (depends on
 platform).  No window can be brought to be over the always-on-top
 window except maybe another always-on-top window.
 <p>
 All windows owned by an always-on-top window inherit this state and
 automatically become always-on-top.  If a window ceases to be
 always-on-top, the windows that it owns will no longer be
 always-on-top.  When an always-on-top window is sent {@link #toBack
 toBack}, its always-on-top state is set to <code>false</code>.

 <p> When this method is called on a window with a value of
 <code>true</code>, and the window is visible and the platform
 supports always-on-top for this window, the window is immediately
 brought forward, "sticking" it in the top-most position. If the
 window isn`t currently visible, this method sets the always-on-top
 state to <code>true</code> but does not bring the window forward.
 When the window is later shown, it will be always-on-top.

 <p> When this method is called on a window with a value of
 <code>false</code> the always-on-top state is set to normal. The
 window remains in the top-most position but it`s z-order can be
 changed as for any other window.  Calling this method with a value
 of <code>false</code> on a window that has a normal state has no
 effect.  Setting the always-on-top state to false has no effect on
 the relative z-order of the windows if there are no other
 always-on-top windows.

 <p><b>Note</b>: some platforms might not support always-on-top
 windows.  To detect if always-on-top windows are supported by the
 current platform, use {@link Toolkit#isAlwaysOnTopSupported()} and
 {@link Window#isAlwaysOnTopSupported()}.  If always-on-top mode
 isn't supported by the toolkit or for this window, calling this
 method has no effect.
 <p>
 If a SecurityManager is installed, the calling thread must be
 granted the AWTPermission "setWindowAlwaysOnTop" in
 order to set the value of this property. If this
 permission is not granted, this method will throw a
 SecurityException, and the current value of the property will
 be left unchanged.

 @param alwaysOnTop true if the window should always be above other
        windows
 @throws SecurityException if the calling thread does not have
         permission to set the value of always-on-top property
 @see #isAlwaysOnTop
 @see #toFront
 @see #toBack
 @see AWTPermission
 @see #isAlwaysOnTopSupported
 @see Toolkit#isAlwaysOnTopSupported
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Window.isAlwaysOnTopSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether the always-on-top mode is supported for this
 window. Some platforms may not support always-on-top windows, some
 may support only some kinds of top-level windows; for example,
 a platform may not support always-on-top modal dialogs.
 @return <code>true</code>, if the always-on-top mode is
         supported by the toolkit and for this window,
         <code>false</code>, if always-on-top mode is not supported
         for this window or toolkit doesn't support always-on-top windows.
 @see #setAlwaysOnTop(boolean)
 @see Toolkit#isAlwaysOnTopSupported
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.awt.Window.isAlwaysOnTop()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether this window is an always-on-top window.
 @return <code>true</code>, if the window is in always-on-top state, 
         <code>false</code> otherwise
 @see #setAlwaysOnTop
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.Window.getFocusOwner()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the child Component of this Window that has focus if this Window
 is focused; returns null otherwise.

 @return the child Component with focus, or null if this Window is not
         focused
 @see #getMostRecentFocusOwner
 @see #isFocused

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.Window.getMostRecentFocusOwner()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the child Component of this Window that will receive the focus
 when this Window is focused. If this Window is currently focused, this
 method returns the same Component as <code>getFocusOwner()</code>. If
 this Window is not focused, then the child Component that most recently 
 requested focus will be returned. If no child Component has ever
 requested focus, and this is a focusable Window, then this Window's
 initial focusable Component is returned. If no child Component has ever
 requested focus, and this is a non-focusable Window, null is returned.

 @return the child Component that will receive focus when this Window is
         focused
 @see #getFocusOwner
 @see #isFocused
 @see #isFocusableWindow
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Window.isActive()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether this Window is active. Only a Frame or a Dialog may be
 active. The native windowing system may denote the active Window or its
 children with special decorations, such as a highlighted title bar. The
 active Window is always either the focused Window, or the first Frame or
 Dialog that is an owner of the focused Window.

 @return whether this is the active Window.
 @see #isFocused
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Window.isFocused()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether this Window is focused. If there exists a focus owner,
 the focused Window is the Window that is, or contains, that focus owner.
 If there is no focus owner, then no Window is focused.
 <p>
 If the focused Window is a Frame or a Dialog it is also the active
 Window. Otherwise, the active Window is the first Frame or Dialog that
 is an owner of the focused Window.

 @return whether this is the focused Window.
 @see #isActive
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.awt.AWTKeyStroke> java.awt.Window.getFocusTraversalKeys(int id)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a focus traversal key for this Window. (See <code>
 setFocusTraversalKeys</code> for a full description of each key.)
 <p>
 If the traversal key has not been explicitly set for this Window,
 then this Window's parent's traversal key is returned. If the
 traversal key has not been explicitly set for any of this Window's
 ancestors, then the current KeyboardFocusManager's default traversal key
 is returned.

 @param id one of KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
         KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,
         KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS, or
         KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS
 @return the AWTKeyStroke for the specified key
 @see Container#setFocusTraversalKeys
 @see KeyboardFocusManager#FORWARD_TRAVERSAL_KEYS
 @see KeyboardFocusManager#BACKWARD_TRAVERSAL_KEYS
 @see KeyboardFocusManager#UP_CYCLE_TRAVERSAL_KEYS
 @see KeyboardFocusManager#DOWN_CYCLE_TRAVERSAL_KEYS
 @throws IllegalArgumentException if id is not one of
         KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
         KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,
         KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS, or
         KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.awt.Window.setFocusCycleRoot(boolean focusCycleRoot)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Does nothing because Windows must always be roots of a focus traversal
 cycle. The passed-in value is ignored.

 @param focusCycleRoot this value is ignored
 @see #isFocusCycleRoot
 @see Container#setFocusTraversalPolicy
 @see Container#getFocusTraversalPolicy
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.awt.Window.isFocusCycleRoot()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Always returns <code>true</code> because all Windows must be roots of a
 focus traversal cycle.

 @return <code>true</code>
 @see #setFocusCycleRoot
 @see Container#setFocusTraversalPolicy
 @see Container#getFocusTraversalPolicy
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.awt.Container java.awt.Window.getFocusCycleRootAncestor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Always returns <code>null</code> because Windows have no ancestors; they
 represent the top of the Component hierarchy.

 @return <code>null</code>
 @see Container#isFocusCycleRoot()
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.awt.Window.isFocusableWindow()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether this Window can become the focused Window, that is,
 whether this Window or any of its subcomponents can become the focus
 owner. For a Frame or Dialog to be focusable, its focusable Window state
 must be set to <code>true</code>. For a Window which is not a Frame or
 Dialog to be focusable, its focusable Window state must be set to
 <code>true</code>, its nearest owning Frame or Dialog must be
 showing on the screen, and it must contain at least one Component in
 its focus traversal cycle. If any of these conditions is not met, then
 neither this Window nor any of its subcomponents can become the focus
 owner.

 @return <code>true</code> if this Window can be the focused Window;
         <code>false</code> otherwise
 @see #getFocusableWindowState
 @see #setFocusableWindowState
 @see #isShowing
 @see Component#isFocusable
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Window.getFocusableWindowState()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether this Window can become the focused Window if it meets
 the other requirements outlined in <code>isFocusableWindow</code>. If
 this method returns <code>false</code>, then
 <code>isFocusableWindow</code> will return <code>false</code> as well.
 If this method returns <code>true</code>, then
 <code>isFocusableWindow</code> may return <code>true</code> or
 <code>false</code> depending upon the other requirements which must be
 met in order for a Window to be focusable.
 <p>
 By default, all Windows have a focusable Window state of
 <code>true</code>.

 @return whether this Window can be the focused Window
 @see #isFocusableWindow
 @see #setFocusableWindowState
 @see #isShowing
 @see Component#setFocusable
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.setFocusableWindowState(boolean focusableWindowState)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets whether this Window can become the focused Window if it meets
 the other requirements outlined in <code>isFocusableWindow</code>. If
 this Window's focusable Window state is set to <code>false</code>, then
 <code>isFocusableWindow</code> will return <code>false</code>. If this
 Window's focusable Window state is set to <code>true</code>, then
 <code>isFocusableWindow</code> may return <code>true</code> or
 <code>false</code> depending upon the other requirements which must be
 met in order for a Window to be focusable.
 <p>
 Setting a Window's focusability state to <code>false</code> is the
 standard mechanism for an application to identify to the AWT a Window
 which will be used as a floating palette or toolbar, and thus should be
 a non-focusable Window.

 Setting the focusability state on a visible <code>Window</code>
 can have a delayed effect on some platforms &#151; the actual
 change may happen only when the <code>Window</code> becomes
 hidden and then visible again.  To ensure consistent behavior 
 across platforms, set the <code>Window</code>'s focusable state 
 when the <code>Window</code> is invisible and then show it.

 @param focusableWindowState whether this Window can be the focused
        Window
 @see #isFocusableWindow
 @see #getFocusableWindowState
 @see #isShowing
 @see Component#setFocusable
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.addPropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a PropertyChangeListener to the listener list. The listener is
 registered for all bound properties of this class, including the
 following:
 <ul>
    <li>this Window's font ("font")</li>
    <li>this Window's background color ("background")</li>
    <li>this Window's foreground color ("foreground")</li>
    <li>this Window's focusability ("focusable")</li>
    <li>this Window's focus traversal keys enabled state
        ("focusTraversalKeysEnabled")</li>
    <li>this Window's Set of FORWARD_TRAVERSAL_KEYS
        ("forwardFocusTraversalKeys")</li>
    <li>this Window's Set of BACKWARD_TRAVERSAL_KEYS
        ("backwardFocusTraversalKeys")</li>
    <li>this Window's Set of UP_CYCLE_TRAVERSAL_KEYS
        ("upCycleFocusTraversalKeys")</li>
    <li>this Window's Set of DOWN_CYCLE_TRAVERSAL_KEYS
        ("downCycleFocusTraversalKeys")</li>
    <li>this Window's focus traversal policy ("focusTraversalPolicy")
        </li>
    <li>this Window's focusable Window state ("focusableWindowState")
        </li>
    <li>this Window's always-on-top state("alwaysOnTop")</li>
 </ul>
 Note that if this Window is inheriting a bound property, then no
 event will be fired in response to a change in the inherited property.
 <p>
 If listener is null, no exception is thrown and no action is performed.

 @param    listener  the PropertyChangeListener to be added

 @see Component#removePropertyChangeListener
 @see #addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.addPropertyChangeListener(String propertyName, PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a PropertyChangeListener to the listener list for a specific
 property. The specified property may be user-defined, or one of the
 following:
 <ul>
    <li>this Window's font ("font")</li>
    <li>this Window's background color ("background")</li>
    <li>this Window's foreground color ("foreground")</li>
    <li>this Window's focusability ("focusable")</li>
    <li>this Window's focus traversal keys enabled state
        ("focusTraversalKeysEnabled")</li>
    <li>this Window's Set of FORWARD_TRAVERSAL_KEYS
        ("forwardFocusTraversalKeys")</li>
    <li>this Window's Set of BACKWARD_TRAVERSAL_KEYS
        ("backwardFocusTraversalKeys")</li>
    <li>this Window's Set of UP_CYCLE_TRAVERSAL_KEYS
        ("upCycleFocusTraversalKeys")</li>
    <li>this Window's Set of DOWN_CYCLE_TRAVERSAL_KEYS
        ("downCycleFocusTraversalKeys")</li>
    <li>this Window's focus traversal policy ("focusTraversalPolicy")
        </li>
    <li>this Window's focusable Window state ("focusableWindowState")
        </li>
    <li>this Window's always-on-top state("alwaysOnTop")</li>
 </ul>
 Note that if this Window is inheriting a bound property, then no
 event will be fired in response to a change in the inherited property.
 <p>
 If listener is null, no exception is thrown and no action is performed.

 @param propertyName one of the property names listed above
 @param listener the PropertyChangeListener to be added

 @see #addPropertyChangeListener(java.beans.PropertyChangeListener)
 @see Component#removePropertyChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Window.postEvent(Event e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated As of JDK version 1.1
 replaced by <code>dispatchEvent(AWTEvent)</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Window.isShowing()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks if this Window is showing on screen.
 @see Component#setVisible

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.applyResourceBundle(ResourceBundle rb)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated As of J2SE 1.4, replaced by
 {@link Component#applyComponentOrientation Component.applyComponentOrientation}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.applyResourceBundle(String rbName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated As of J2SE 1.4, replaced by
 {@link Component#applyComponentOrientation Component.applyComponentOrientation}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.Window.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleContext associated with this Window. 
 For windows, the AccessibleContext takes the form of an 
 AccessibleAWTWindow. 
 A new AccessibleAWTWindow instance is created if necessary.

 @return an AccessibleAWTWindow that serves as the 
         AccessibleContext of this Window
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.GraphicsConfiguration java.awt.Window.getGraphicsConfiguration()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method returns the GraphicsConfiguration used by this Window.
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.setLocationRelativeTo(Component c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the location of the window relative to the specified
 component.
 <p>
 If the component is not currently showing, or <code>c</code>
 is <code>null</code>, the window is placed at the center of
 the screen. The center point can be determined with {@link 
 GraphicsEnvironment#getCenterPoint GraphicsEnvironment.getCenterPoint}
 <p>
 If the bottom of the component is offscreen, the window is
 placed to the side of the <code>Component</code> that is
 closest to the center of the screen.  So if the <code>Component</code>
 is on the right part of the screen, the <code>Window</code>
 is placed to its left, and visa versa.

 @param c  the component in relation to which the window's location
           is determined
 @see java.awt.GraphicsEnvironment#getCenterPoint
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.createBufferStrategy(int numBuffers)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new strategy for multi-buffering on this component.
 Multi-buffering is useful for rendering performance.  This method
 attempts to create the best strategy available with the number of
 buffers supplied.  It will always create a <code>BufferStrategy</code>
 with that number of buffers.
 A page-flipping strategy is attempted first, then a blitting strategy
 using accelerated buffers.  Finally, an unaccelerated blitting
 strategy is used.
 <p>
 Each time this method is called,
 the existing buffer strategy for this component is discarded.
 @param numBuffers number of buffers to create
 @exception IllegalArgumentException if numBuffers is less than 1.
 @exception IllegalStateException if the component is not displayable
 @see #isDisplayable
 @see #getBufferStrategy
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.createBufferStrategy(int numBuffers, BufferCapabilities caps) throws java.awt.AWTException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new strategy for multi-buffering on this component with the
 required buffer capabilities.  This is useful, for example, if only
 accelerated memory or page flipping is desired (as specified by the
 buffer capabilities).
 <p>
 Each time this method
 is called, the existing buffer strategy for this component is discarded.
 @param numBuffers number of buffers to create, including the front buffer
 @param caps the required capabilities for creating the buffer strategy;
 cannot be <code>null</code>
 @exception AWTException if the capabilities supplied could not be
 supported or met; this may happen, for example, if there is not enough
 accelerated memory currently available, or if page flipping is specified
 but not possible.
 @exception IllegalArgumentException if numBuffers is less than 1, or if
 caps is <code>null</code>
 @see #getBufferStrategy
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.BufferStrategy java.awt.Window.getBufferStrategy()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>BufferStrategy</code> used by this component.  This
 method will return null if a <code>BufferStrategy</code> has not yet
 been created or has been disposed.

 @return the buffer strategy used by this component
 @see #createBufferStrategy
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.setLocationByPlatform(boolean locationByPlatform)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets whether this Window should appear at the default location for the
 native windowing system or at the current location (returned by
 <code>getLocation</code>) the next time the Window is made visible.
 This behavior resembles a native window shown without programmatically
 setting its location.  Most windowing systems cascade windows if their
 locations are not explicitly set. The actual location is determined once the
 window is shown on the screen.
 <p>
 This behavior can also be enabled by setting the System Property
 "java.awt.Window.locationByPlatform" to "true", though calls to this method
 take precedence.
 <p>
 Calls to <code>setVisible</code>, <code>setLocation</code> and
 <code>setBounds</code> after calling <code>setLocationByPlatform</code> clear
 this property of the Window.
 <p>
 For example, after the following code is executed:
 <pre><blockquote>
 setLocationByPlatform(true);
 setVisible(true);
 boolean flag = isLocationByPlatform();
 </blockquote></pre>
 The window will be shown at platform's default location and
 <code>flag</code> will be <code>false</code>.
 <p>
 In the following sample:
 <pre><blockquote>
 setLocationByPlatform(true);
 setLocation(10, 10);
 boolean flag = isLocationByPlatform();
 setVisible(true);
 </blockquote></pre>
 The window will be shown at (10, 10) and <code>flag</code> will be
 <code>false</code>.

 @param locationByPlatform <code>true</code> if this Window should appear
        at the default location, <code>false</code> if at the current location
 @throws <code>IllegalComponentStateException</code> if the window
         is showing on screen and locationByPlatform is <code>true</code>.
 @see #setLocation
 @see #isShowing
 @see #setVisible
 @see #isLocationByPlatform
 @see java.lang.System#getProperty(String)
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Window.isLocationByPlatform()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <code>true</code> if this Window will appear at the default location
 for the native windowing system the next time this Window is made visible.
 This method always returns <code>false</code> if the Window is showing on the
 screen.

 @return whether this Window will appear at the default location
 @see #setLocationByPlatform
 @see #isShowing
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.setBounds(int x, int y, int width, int height)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 <p>
 The {@code width} or {@code height} values
 are automatically enlarged if either is less than
 the minimum size as specified by previous call to
 {@code setMinimumSize}.

 @see #getBounds
 @see #setLocation(int, int)
 @see #setLocation(Point)
 @see #setSize(int, int)
 @see #setSize(Dimension)
 @see #setMinimumSize
 @see #setLocationByPlatform
 @see #isLocationByPlatform
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Window.setBounds(Rectangle r)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 <p>
 The {@code r.width} or {@code r.height} values
 will be automatically enlarged if either is less than
 the minimum size as specified by previous call to
 {@code setMinimumSize}.

 @see #getBounds
 @see #setLocation(int, int)
 @see #setLocation(Point)
 @see #setSize(int, int)
 @see #setSize(Dimension)
 @see #setMinimumSize
 @see #setLocationByPlatform
 @see #isLocationByPlatform
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.Window.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads the <code>ObjectInputStream</code> and an optional
 list of listeners to receive various events fired by
 the component; also reads a list of
 (possibly <code>null</code>) child windows.
 Unrecognized keys or values will be ignored.

 @param s the <code>ObjectInputStream</code> to read
 @exception HeadlessException if
   <code>GraphicsEnvironment.isHeadless</code> returns
   <code>true</code>
 @see java.awt.GraphicsEnvironment#isHeadless
 @see #writeObject

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.Window.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes default serializable fields to stream.  Writes
 a list of serializable <code>WindowListener</code>s and
 <code>WindowFocusListener</code>s as optional data.
 Writes a list of child windows as optional data.
 Writes a list of icon images as optional data

 @param s the <code>ObjectOutputStream</code> to write
 @serialData <code>null</code> terminated sequence of
    0 or more pairs; the pair consists of a <code>String</code>
    and and <code>Object</code>; the <code>String</code>
    indicates the type of object and is one of the following:
    <code>windowListenerK</code> indicating a
      <code>WindowListener</code> object;
    <code>windowFocusWindowK</code> indicating a
      <code>WindowFocusListener</code> object;
    <code>ownedWindowK</code> indicating a child
      <code>Window</code> object

 @see AWTEventMulticaster#save(java.io.ObjectOutputStream, java.lang.String, java.util.EventListener)
 @see Component#windowListenerK
 @see Component#windowFocusListenerK
 @see Component#ownedWindowK
 @see #readObject(ObjectInputStream)

<!-- END DATA -->
