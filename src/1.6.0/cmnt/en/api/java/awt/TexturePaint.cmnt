<!-- BEGIN KEY -->
public class java.awt.TexturePaint extends java.lang.Object implements java.awt.Paint
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>TexturePaint</code> class provides a way to fill a
 {@link Shape} with a texture that is specified as
 a {@link BufferedImage}. The size of the <code>BufferedImage</code>
 object should be small because the <code>BufferedImage</code> data
 is copied by the <code>TexturePaint</code> object.
 At construction time, the texture is anchored to the upper
 left corner of a {@link Rectangle2D} that is
 specified in user space.  Texture is computed for
 locations in the device space by conceptually replicating the   
 specified <code>Rectangle2D</code> infinitely in all directions
 in user space and mapping the <code>BufferedImage</code> to each
 replicated <code>Rectangle2D</code>.
 @see Paint
 @see Graphics2D#setPaint
 @version 1.40, 11/17/05

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.TexturePaint(BufferedImage txtr, Rectangle2D anchor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>TexturePaint</code> object.
 @param txtr the <code>BufferedImage</code> object with the texture
 used for painting
 @param anchor the <code>Rectangle2D</code> in user space used to
 anchor and replicate the texture

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.image.BufferedImage java.awt.TexturePaint.getImage()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>BufferedImage</code> texture used to 
 fill the shapes.
 @return a <code>BufferedImage</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Rectangle2D java.awt.TexturePaint.getAnchorRect()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a copy of the anchor rectangle which positions and
 sizes the textured image.
 @return the <code>Rectangle2D</code> used to anchor and
 size this <code>TexturePaint</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.PaintContext java.awt.TexturePaint.createContext(ColorModel cm, Rectangle deviceBounds, Rectangle2D userBounds, AffineTransform xform, RenderingHints hints)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates and returns a context used to generate the color pattern.
 @param cm the {@link ColorModel} that receives the
 <code>Paint</code> data. This is used only as a hint.
 @param deviceBounds the device space bounding box of the graphics
 primitive being rendered
 @param userBounds the user space bounding box of the graphics
 primitive being rendered
 @param xform the {@link AffineTransform} from user space
          into device space
 @param hints a {@link RenderingHints} object that can be used to
          specify how the pattern is ultimately rendered
 @return the {@link PaintContext} used for generating color
          patterns.
 @see PaintContext

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.TexturePaint.getTransparency()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the transparency mode for this <code>TexturePaint</code>.
 @return the transparency mode for this <code>TexturePaint</code>
 as an integer value. 
 @see Transparency

<!-- END DATA -->
