<!-- BEGIN KEY -->
public class java.awt.Point extends java.awt.geom.Point2D implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A point representing a location in {@code (x,y)} coordinate space,
 specified in integer precision.

 @version 	1.40, 02/24/06
 @author 	Sami Shaio
 @since       1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Point.x
<!-- END KEY -->
<!-- BEGIN DATA -->
 The X coordinate of this <code>Point</code>.
 If no X coordinate is set it will default to 0.

 @serial
 @see #getLocation()
 @see #move(int, int)
 @since 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Point.y
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Y coordinate of this <code>Point</code>. 
 If no Y coordinate is set it will default to 0.

 @serial
 @see #getLocation()
 @see #move(int, int)
 @since 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs and initializes a point at the origin 
 (0,&nbsp;0) of the coordinate space. 
 @since       1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs and initializes a point with the same location as
 the specified <code>Point</code> object.
 @param       p a point
 @since       1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs and initializes a point at the specified 
 {@code (x,y)} location in the coordinate space. 
 @param x the X coordinate of the newly constructed <code>Point</code>
 @param y the Y coordinate of the newly constructed <code>Point</code>
 @since 1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.Point.getX()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public double java.awt.Point.getY()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.Point.getLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the location of this point.
 This method is included for completeness, to parallel the
 <code>getLocation</code> method of <code>Component</code>.
 @return      a copy of this point, at the same location
 @see         java.awt.Component#getLocation
 @see         java.awt.Point#setLocation(java.awt.Point)
 @see         java.awt.Point#setLocation(int, int)
 @since       1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Point.setLocation(Point p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the location of the point to the specified location.
 This method is included for completeness, to parallel the
 <code>setLocation</code> method of <code>Component</code>.
 @param       p  a point, the new location for this point
 @see         java.awt.Component#setLocation(java.awt.Point)
 @see         java.awt.Point#getLocation
 @since       1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Point.setLocation(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Changes the point to have the specified location.
 <p>
 This method is included for completeness, to parallel the
 <code>setLocation</code> method of <code>Component</code>.
 Its behavior is identical with <code>move(int,&nbsp;int)</code>.
 @param       x the X coordinate of the new location
 @param       y the Y coordinate of the new location
 @see         java.awt.Component#setLocation(int, int)
 @see         java.awt.Point#getLocation
 @see         java.awt.Point#move(int, int)
 @since       1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Point.setLocation(double x, double y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the location of this point to the specified double coordinates.
 The double values will be rounded to integer values.
 Any number smaller than <code>Integer.MIN_VALUE</code>
 will be reset to <code>MIN_VALUE</code>, and any number
 larger than <code>Integer.MAX_VALUE</code> will be
 reset to <code>MAX_VALUE</code>.

 @param x the X coordinate of the new location
 @param y the Y coordinate of the new location
 @see #getLocation

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Point.move(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Moves this point to the specified location in the 
 {@code (x,y)} coordinate plane. This method
 is identical with <code>setLocation(int,&nbsp;int)</code>.
 @param       x the X coordinate of the new location
 @param       y the Y coordinate of the new location
 @see         java.awt.Component#setLocation(int, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Point.translate(int dx, int dy)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Translates this point, at location {@code (x,y)}, 
 by {@code dx} along the {@code x} axis and {@code dy} 
 along the {@code y} axis so that it now represents the point 
 {@code (x+dx,y+dy)}.

 @param       dx   the distance to move this point 
                            along the X axis
 @param       dy    the distance to move this point 
                            along the Y axis

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Point.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines whether or not two points are equal. Two instances of
 <code>Point2D</code> are equal if the values of their 
 <code>x</code> and <code>y</code> member fields, representing
 their position in the coordinate space, are the same.
 @param obj an object to be compared with this <code>Point2D</code>
 @return <code>true</code> if the object to be compared is
         an instance of <code>Point2D</code> and has
         the same values; <code>false</code> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.Point.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this point and its location 
 in the {@code (x,y)} coordinate space. This method is 
 intended to be used only for debugging purposes, and the content 
 and format of the returned string may vary between implementations. 
 The returned string may be empty but may not be <code>null</code>.
 
 @return  a string representation of this point

<!-- END DATA -->
