<!-- BEGIN KEY -->
public class java.awt.event.WindowEvent extends java.awt.event.ComponentEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
 A low-level event that indicates that a window has changed its status. This
 low-level event is generated by a Window object when it is opened, closed,
 activated, deactivated, iconified, or deiconified, or when focus is
 transfered into or out of the Window.
 <P>
 The event is passed to every <code>WindowListener</code>
 or <code>WindowAdapter</code> object which registered to receive such
 events using the window's <code>addWindowListener</code> method.
 (<code>WindowAdapter</code> objects implement the
 <code>WindowListener</code> interface.) Each such listener object
 gets this <code>WindowEvent</code> when the event occurs.

 @author Carl Quinn
 @author Amy Fowler
 @version 1.37, 04/18/06

 @see WindowAdapter
 @see WindowListener
 @see <a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/windowlistener.html">Tutorial: Writing a Window Listener</a>

 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_FIRST
<!-- END KEY -->
<!-- BEGIN DATA -->
 The first number in the range of ids used for window events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_OPENED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The window opened event.  This event is delivered only
 the first time a window is made visible.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_CLOSING
<!-- END KEY -->
<!-- BEGIN DATA -->
 The "window is closing" event. This event is delivered when
 the user attempts to close the window from the window's system menu.  
 If the program does not explicitly hide or dispose the window
 while processing this event, the window close operation will be
 cancelled.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_CLOSED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The window closed event. This event is delivered after
 the window has been closed as the result of a call to dispose.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_ICONIFIED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The window iconified event. This event is delivered when
 the window has been changed from a normal to a minimized state.
 For many platforms, a minimized window is displayed as
 the icon specified in the window's iconImage property.
 @see java.awt.Frame#setIconImage

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_DEICONIFIED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The window deiconified event type. This event is delivered when
 the window has been changed from a minimized to a normal state.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_ACTIVATED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The window-activated event type. This event is delivered when the Window
 becomes the active Window. Only a Frame or a Dialog can be the active
 Window. The native windowing system may denote the active Window or its
 children with special decorations, such as a highlighted title bar. The
 active Window is always either the focused Window, or the first Frame or
 Dialog that is an owner of the focused Window.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_DEACTIVATED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The window-deactivated event type. This event is delivered when the
 Window is no longer the active Window. Only a Frame or a Dialog can be
 the active Window. The native windowing system may denote the active
 Window or its children with special decorations, such as a highlighted
 title bar. The active Window is always either the focused Window, or the
 first Frame or Dialog that is an owner of the focused Window.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_GAINED_FOCUS
<!-- END KEY -->
<!-- BEGIN DATA -->
 The window-gained-focus event type. This event is delivered when the
 Window becomes the focused Window, which means that the Window, or one
 of its subcomponents, will receive keyboard events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_LOST_FOCUS
<!-- END KEY -->
<!-- BEGIN DATA -->
 The window-lost-focus event type. This event is delivered when a Window
 is no longer the focused Window, which means keyboard events will no
 longer be delivered to the Window or any of its subcomponents.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_STATE_CHANGED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The window-state-changed event type.  This event is delivered
 when a Window's state is changed by virtue of it being
 iconified, maximized etc.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.WindowEvent.WINDOW_LAST
<!-- END KEY -->
<!-- BEGIN DATA -->
 The last number in the range of ids used for window events.

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.event.WindowEvent.oldState
<!-- END KEY -->
<!-- BEGIN DATA -->
 TBS

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.WindowEvent(Window source, int id, Window opposite, int oldState, int newState)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>WindowEvent</code> object.
 <p>Note that passing in an invalid <code>id</code> results in
 unspecified behavior. This method throws an
 <code>IllegalArgumentException</code> if <code>source</code>
 is <code>null</code>.

 @param source	the <code>Window</code> object
                    that originated the event
 @param id        an integer indicating the type of event.
 @param opposite  the other window involved in the focus or activation
                      change, or <code>null</code>
 @param oldState  previous state of the window for window state
                      change event
 @param newState  new state of the window for window state change event
 @throws IllegalArgumentException if <code>source</code> is null
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.WindowEvent(Window source, int id, Window opposite)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>WindowEvent</code> object with the
 specified opposite <code>Window</code>. The opposite
 <code>Window</code> is the other <code>Window</code>
 involved in this focus or activation change.
 For a <code>WINDOW_ACTIVATED</code> or
 <code>WINDOW_GAINED_FOCUS</code> event, this is the
 <code>Window</code> that lost activation or focus.
 For a <code>WINDOW_DEACTIVATED</code> or
 <code>WINDOW_LOST_FOCUS</code> event, this is the
 <code>Window</code> that gained activation or focus.
 If this focus change occurs with a native application, with a
 Java application in a different VM, or with no other
 <code>Window</code>, then the opposite Window is <code>null</code>.
 <p>Note that passing in an invalid <code>id</code> results in
 unspecified behavior. This method throws an
 <code>IllegalArgumentException</code> if <code>source</code>
 is <code>null</code>.

 @param source     the <code>Window</code> object that
                   originated the event
 @param id         <code>WINDOW_ACTIVATED</code>,
                   <code>WINDOW_DEACTIVATED</code>,
                   <code>WINDOW_GAINED_FOCUS</code>,
                   or <code>WINDOW_LOST_FOCUS</code>. It is
                   expected that this constructor will not be used for
                   other <code>WindowEvent</code> types because the
                   opposite <code>Window</code> of such events
                   will always be <code>null</code>
 @param opposite   the other <code>Window</code> involved in the
                   focus or activation change, or <code>null</code>
 @throws IllegalArgumentException if <code>source</code> is null
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.WindowEvent(Window source, int id, int oldState, int newState)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>WindowEvent</code> object with the specified
 previous and new window states.
 <p>Note that passing in an invalid <code>id</code> results in
 unspecified behavior. This method throws an
 <code>IllegalArgumentException</code> if <code>source</code>
 is <code>null</code>.
 
 @param source	the <code>Window</code> object
                  that originated the event
 @param id	<code>WINDOW_STATE_CHANGED</code> event type.
                  It is expected that this constructor will not
                  be used for other <code>WindowEvent</code>
                  types, because the previous and new window
                  states are meaningless for other event types.
 @param oldState	an integer representing the previous window state
 @param newState	an integer representing the new window state
 @throws IllegalArgumentException if <code>source</code> is null
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.WindowEvent(Window source, int id)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>WindowEvent</code> object.
 <p>Note that passing in an invalid <code>id</code> results in
 unspecified behavior. This method throws an
 <code>IllegalArgumentException</code> if <code>source</code>
 is <code>null</code>.

 @param source the <code>Window</code> object that originated the event
 @param id     an integer indicating the type of event
 @throws IllegalArgumentException if <code>source</code> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Window java.awt.event.WindowEvent.getWindow()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the originator of the event.

 @return the Window object that originated the event

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Window java.awt.event.WindowEvent.getOppositeWindow()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the other Window involved in this focus or activation change.
 For a WINDOW_ACTIVATED or WINDOW_GAINED_FOCUS event, this is the Window
 that lost activation or focus. For a WINDOW_DEACTIVATED or
 WINDOW_LOST_FOCUS event, this is the Window that gained activation or
 focus. For any other type of WindowEvent, or if the focus or activation
 change occurs with a native application, with a Java application in a
 different VM or context, or with no other Window, null is returned.

 @return the other Window involved in the focus or activation change, or
         null
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.WindowEvent.getOldState()
<!-- END KEY -->
<!-- BEGIN DATA -->
 For <code>WINDOW_STATE_CHANGED</code> events returns the
 previous state of the window. The state is
 represented as a bitwise mask.
 <ul>
 <li><code>NORMAL</code>
 <br>Indicates that no state bits are set.
 <li><code>ICONIFIED</code>
 <li><code>MAXIMIZED_HORIZ</code>
 <li><code>MAXIMIZED_VERT</code>
 <li><code>MAXIMIZED_BOTH</code>
 <br>Concatenates <code>MAXIMIZED_HORIZ</code>
 and <code>MAXIMIZED_VERT</code>.
 </ul>

 @return a bitwise mask of the previous window state
 @see java.awt.Frame#getExtendedState()
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.WindowEvent.getNewState()
<!-- END KEY -->
<!-- BEGIN DATA -->
 For <code>WINDOW_STATE_CHANGED</code> events returns the
 new state of the window. The state is
 represented as a bitwise mask.
 <ul>
 <li><code>NORMAL</code>
 <br>Indicates that no state bits are set.
 <li><code>ICONIFIED</code>
 <li><code>MAXIMIZED_HORIZ</code>
 <li><code>MAXIMIZED_VERT</code>
 <li><code>MAXIMIZED_BOTH</code>
 <br>Concatenates <code>MAXIMIZED_HORIZ</code>
 and <code>MAXIMIZED_VERT</code>.
 </ul>

 @return a bitwise mask of the new window state
 @see java.awt.Frame#getExtendedState()
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.event.WindowEvent.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a parameter string identifying this event.
 This method is useful for event-logging and for debugging.

 @return a string identifying the event and its attributes

<!-- END DATA -->
