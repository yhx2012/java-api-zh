<!-- BEGIN KEY -->
public abstract class java.awt.event.InputEvent extends java.awt.event.ComponentEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
 The root event class for all component-level input events.

 Input events are delivered to listeners before they are
 processed normally by the source where they originated.
 This allows listeners and component subclasses to "consume"
 the event so that the source will not process them in their
 default manner.  For example, consuming mousePressed events
 on a Button component will prevent the Button from being
 activated.

 @author Carl Quinn
 @version 1.37 03/17/06

 @see KeyEvent
 @see KeyAdapter
 @see MouseEvent
 @see MouseAdapter
 @see MouseMotionAdapter

 @since 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.SHIFT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Shift key modifier constant.
 It is recommended that SHIFT_DOWN_MASK be used instead.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.CTRL_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Control key modifier constant.
 It is recommended that CTRL_DOWN_MASK be used instead.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.META_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Meta key modifier constant.
 It is recommended that META_DOWN_MASK be used instead.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.ALT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Alt key modifier constant.
 It is recommended that ALT_DOWN_MASK be used instead.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.ALT_GRAPH_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The AltGraph key modifier constant.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.BUTTON1_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Mouse Button1 modifier constant.
 It is recommended that BUTTON1_DOWN_MASK be used instead.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.BUTTON2_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Mouse Button2 modifier constant.
 It is recommended that BUTTON2_DOWN_MASK be used instead.
 Note that BUTTON2_MASK has the same value as ALT_MASK.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.BUTTON3_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Mouse Button3 modifier constant.
 It is recommended that BUTTON3_DOWN_MASK be used instead.
 Note that BUTTON3_MASK has the same value as META_MASK.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.SHIFT_DOWN_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Shift key extended modifier constant.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.CTRL_DOWN_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Control key extended modifier constant.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.META_DOWN_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Meta key extended modifier constant.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.ALT_DOWN_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Alt key extended modifier constant.                    
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.BUTTON1_DOWN_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Mouse Button1 extended modifier constant.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.BUTTON2_DOWN_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Mouse Button2 extended modifier constant.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.BUTTON3_DOWN_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Mouse Button3 extended modifier constant.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The AltGraph key extended modifier constant.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
 long java.awt.event.InputEvent.when
<!-- END KEY -->
<!-- BEGIN DATA -->
 The input event's Time stamp in UTC format.  The time stamp 
 indicates when the input event was created.

 @serial
 @see #getWhen()

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.event.InputEvent.modifiers
<!-- END KEY -->
<!-- BEGIN DATA -->
 The state of the modifier mask at the time the input
 event was fired.

 @serial
 @see #getModifiers()
 @see #getModifiersEx()
 @see java.awt.event.KeyEvent
 @see java.awt.event.MouseEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.event.InputEvent.isShiftDown()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether or not the Shift modifier is down on this event.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.event.InputEvent.isControlDown()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether or not the Control modifier is down on this event.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.event.InputEvent.isMetaDown()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether or not the Meta modifier is down on this event.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.event.InputEvent.isAltDown()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether or not the Alt modifier is down on this event.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.event.InputEvent.isAltGraphDown()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether or not the AltGraph modifier is down on this event.

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.awt.event.InputEvent.getWhen()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the timestamp of when this event occurred.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.InputEvent.getModifiers()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the modifier mask for this event.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.InputEvent.getModifiersEx()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the extended modifier mask for this event.
 Extended modifiers represent the state of all modal keys, 
 such as ALT, CTRL, META, and the mouse buttons just after 
 the event occurred
 <P> 
 For example, if the user presses <b>button 1</b> followed by
 <b>button 2</b>, and then releases them in the same order,
 the following sequence of events is generated:
 <PRE>
    <code>MOUSE_PRESSED</code>:  <code>BUTTON1_DOWN_MASK</code>
    <code>MOUSE_PRESSED</code>:  <code>BUTTON1_DOWN_MASK | BUTTON2_DOWN_MASK</code>
    <code>MOUSE_RELEASED</code>: <code>BUTTON2_DOWN_MASK</code>
    <code>MOUSE_CLICKED</code>:  <code>BUTTON2_DOWN_MASK</code>
    <code>MOUSE_RELEASED</code>: 
    <code>MOUSE_CLICKED</code>:  
 </PRE>
 <P>
 It is not recommended to compare the return value of this method
 using <code>==</code> because new modifiers can be added in the future.
 For example, the appropriate way to check that SHIFT and BUTTON1 are
 down, but CTRL is up is demonstrated by the following code:
 <PRE>
    int onmask = SHIFT_DOWN_MASK | BUTTON1_DOWN_MASK;
    int offmask = CTRL_DOWN_MASK;
    if ((event.getModifiersEx() & (onmask | offmask)) == onmask) {
        ...
    }
 </PRE>
 The above code will work even if new modifiers are added.
 
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.event.InputEvent.consume()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Consumes this event so that it will not be processed
 in the default manner by the source which originated it.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.event.InputEvent.isConsumed()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether or not this event has been consumed.
 @see #consume

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.awt.event.InputEvent.getModifiersExText(int modifiers)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a String describing the extended modifier keys and 
 mouse buttons, such as "Shift", "Button1", or "Ctrl+Shift".  
 These strings can be localized by changing the 
 awt.properties file.

 @param modifiers a modifier mask describing the extended
                modifier keys and mouse buttons for the event 
 @return a text description of the combination of extended 
         modifier keys and mouse buttons that were held down 
         during the event. 
 @since 1.4

<!-- END DATA -->
