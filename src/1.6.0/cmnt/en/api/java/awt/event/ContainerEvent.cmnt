<!-- BEGIN KEY -->
public class java.awt.event.ContainerEvent extends java.awt.event.ComponentEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
 A low-level event which indicates that a container's contents
 changed because a component was added or removed.
 <P>
 Container events are provided for notification purposes ONLY;
 The AWT will automatically handle changes to the containers
 contents internally so that the program works properly regardless of
 whether the program is receiving these events or not.
 <P>
 This low-level event is generated by a container object (such as a 
 Panel) when a component is added to it or removed from it. 
 The event is passed to every <code>ContainerListener</code>
 or <code>ContainerAdapter</code> object which registered to receive such
 events using the component's <code>addContainerListener</code> method.
 (<code>ContainerAdapter</code> objects implement the 
 <code>ContainerListener</code> interface.) Each such listener object 
 gets this <code>ContainerEvent</code> when the event occurs.

 @see ContainerAdapter
 @see ContainerListener
 @see <a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/containerlistener.html">Tutorial: Writing a Container Listener</a>

 @author Tim Prinzing
 @author Amy Fowler
 @version 1.20 04/13/06
 @since 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ContainerEvent.CONTAINER_FIRST
<!-- END KEY -->
<!-- BEGIN DATA -->
 The first number in the range of ids used for container events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ContainerEvent.CONTAINER_LAST
<!-- END KEY -->
<!-- BEGIN DATA -->
 The last number in the range of ids used for container events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ContainerEvent.COMPONENT_ADDED
<!-- END KEY -->
<!-- BEGIN DATA -->
 This event indicates that a component was added to the container.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ContainerEvent.COMPONENT_REMOVED
<!-- END KEY -->
<!-- BEGIN DATA -->
 This event indicates that a component was removed from the container.

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.Component java.awt.event.ContainerEvent.child
<!-- END KEY -->
<!-- BEGIN DATA -->
 The non-null component that is being added or
 removed from the Container.

 @serial
 @see #getChild()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ContainerEvent(Component source, int id, Component child)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>ContainerEvent</code> object.
 <p>Note that passing in an invalid <code>id</code> results in
 unspecified behavior. This method throws an
 <code>IllegalArgumentException</code> if <code>source</code>
 is <code>null</code>.
 
 @param source the <code>Component</code> object (container)
               that originated the event
 @param id     an integer indicating the type of event
 @param child  the component that was added or removed
 @throws IllegalArgumentException if <code>source</code> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Container java.awt.event.ContainerEvent.getContainer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the originator of the event.

 @return the <code>Container</code> object that originated 
 the event, or <code>null</code> if the object is not a 
 <code>Container</code>.  

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.event.ContainerEvent.getChild()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the component that was affected by the event.

 @return the Component object that was added or removed

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.event.ContainerEvent.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a parameter string identifying this event.
 This method is useful for event-logging and for debugging.

 @return a string identifying the event and its attributes

<!-- END DATA -->
