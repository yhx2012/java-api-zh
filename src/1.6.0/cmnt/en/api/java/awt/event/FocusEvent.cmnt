<!-- BEGIN KEY -->
public class java.awt.event.FocusEvent extends java.awt.event.ComponentEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
 A low-level event which indicates that a Component has gained or lost the
 input focus. This low-level event is generated by a Component (such as a
 TextField). The event is passed to every <code>FocusListener</code> or
 <code>FocusAdapter</code> object which registered to receive such events
 using the Component's <code>addFocusListener</code> method. (<code>
 FocusAdapter</code> objects implement the <code>FocusListener</code>
 interface.) Each such listener object gets this <code>FocusEvent</code> when
 the event occurs.
 <p>
 There are two levels of focus events: permanent and temporary. Permanent
 focus change events occur when focus is directly moved from one Component to
 another, such as through a call to requestFocus() or as the user uses the
 TAB key to traverse Components. Temporary focus change events occur when
 focus is temporarily lost for a Component as the indirect result of another
 operation, such as Window deactivation or a Scrollbar drag. In this case,
 the original focus state will automatically be restored once that operation
 is finished, or, for the case of Window deactivation, when the Window is
 reactivated. Both permanent and temporary focus events are delivered using
 the FOCUS_GAINED and FOCUS_LOST event ids; the level may be distinguished in
 the event using the isTemporary() method.
  
 @see FocusAdapter
 @see FocusListener
 @see <a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/focuslistener.html">Tutorial: Writing a Focus Listener</a>

 @author Carl Quinn
 @author Amy Fowler
 @version 1.33 04/18/06
 @since 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.FocusEvent.FOCUS_FIRST
<!-- END KEY -->
<!-- BEGIN DATA -->
 The first number in the range of ids used for focus events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.FocusEvent.FOCUS_LAST
<!-- END KEY -->
<!-- BEGIN DATA -->
 The last number in the range of ids used for focus events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.FocusEvent.FOCUS_GAINED
<!-- END KEY -->
<!-- BEGIN DATA -->
 This event indicates that the Component is now the focus owner.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.FocusEvent.FOCUS_LOST
<!-- END KEY -->
<!-- BEGIN DATA -->
 This event indicates that the Component is no longer the focus owner.

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean java.awt.event.FocusEvent.temporary
<!-- END KEY -->
<!-- BEGIN DATA -->
 A focus event can have two different levels, permanent and temporary.
 It will be set to true if some operation takes away the focus
 temporarily and intends on getting it back once the event is completed.
 Otherwise it will be set to false.

 @serial
 @see #isTemporary

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.FocusEvent(Component source, int id, boolean temporary, Component opposite)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>FocusEvent</code> object with the
 specified temporary state and opposite <code>Component</code>.
 The opposite <code>Component</code> is the other
 <code>Component</code> involved in this focus change.
 For a <code>FOCUS_GAINED</code> event, this is the
 <code>Component</code> that lost focus. For a
 <code>FOCUS_LOST</code> event, this is the <code>Component</code>
 that gained focus. If this focus change occurs with a native
 application, with a Java application in a different VM,
 or with no other <code>Component</code>, then the opposite
 <code>Component</code> is <code>null</code>.
 <p>Note that passing in an invalid <code>id</code> results in
 unspecified behavior. This method throws an
 <code>IllegalArgumentException</code> if <code>source</code>
 is <code>null</code>.
 
 @param source     the <code>Component</code> that originated the event
 @param id         <code>FOCUS_GAINED</code> or <code>FOCUS_LOST</code>
 @param temporary  <code>true</code> if the focus change is temporary;
                   <code>false</code> otherwise
 @param opposite   the other Component involved in the focus change,
                   or <code>null</code>
 @throws IllegalArgumentException if <code>source</code> is null
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.FocusEvent(Component source, int id, boolean temporary)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>FocusEvent</code> object and identifies
 whether or not the change is temporary.
 <p>Note that passing in an invalid <code>id</code> results in
 unspecified behavior. This method throws an
 <code>IllegalArgumentException</code> if <code>source</code>
 is <code>null</code>.

 @param source    the <code>Component</code> that originated the event
 @param id        an integer indicating the type of event
 @param temporary <code>true</code> if the focus change is temporary;
                  <code>false</code> otherwise
 @throws IllegalArgumentException if <code>source</code> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.FocusEvent(Component source, int id)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>FocusEvent</code> object and identifies it
 as a permanent change in focus.
 <p>Note that passing in an invalid <code>id</code> results in
 unspecified behavior. This method throws an
 <code>IllegalArgumentException</code> if <code>source</code>
 is <code>null</code>.

 @param source    the <code>Component</code> that originated the event
 @param id        an integer indicating the type of event
 @throws IllegalArgumentException if <code>source</code> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.event.FocusEvent.isTemporary()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Identifies the focus change event as temporary or permanent.

 @return <code>true</code> if the focus change is temporary;
         <code>false</code> otherwise

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.event.FocusEvent.getOppositeComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the other Component involved in this focus change. For a
 FOCUS_GAINED event, this is the Component that lost focus. For a
 FOCUS_LOST event, this is the Component that gained focus. If this
 focus change occurs with a native application, with a Java application
 in a different VM or context, or with no other Component, then null is
 returned.

 @return the other Component involved in the focus change, or null
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.event.FocusEvent.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a parameter string identifying this event.
 This method is useful for event-logging and for debugging.

 @return a string identifying the event and its attributes

<!-- END DATA -->
