<!-- BEGIN KEY -->
public class java.awt.event.ActionEvent extends java.awt.AWTEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
 A semantic event which indicates that a component-defined action occurred.
 This high-level event is generated by a component (such as a
 <code>Button</code>) when
 the component-specific action occurs (such as being pressed).
 The event is passed to every every <code>ActionListener</code> object
 that registered to receive such events using the component's
 <code>addActionListener</code> method.
 <p>
 <b>Note:</b> To invoke an <code>ActionEvent</code> on a
 <code>Button</code> using the keyboard, use the Space bar.
 <P>
 The object that implements the <code>ActionListener</code> interface
 gets this <code>ActionEvent</code> when the event occurs. The listener
 is therefore spared the details of processing individual mouse movements
 and mouse clicks, and can instead process a "meaningful" (semantic)
 event like "button pressed".
  
 @see ActionListener
 @see <a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/eventmodel.html">Tutorial: Java 1.1 Event Model</a>

 @author Carl Quinn
 @version 1.31 04/13/06
 @since 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ActionEvent.SHIFT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The shift modifier. An indicator that the shift key was held
 down during the event.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ActionEvent.CTRL_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The control modifier. An indicator that the control key was held
 down during the event.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ActionEvent.META_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->

 The meta modifier. An indicator that the meta key was held
 down during the event.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ActionEvent.ALT_MASK
<!-- END KEY -->
<!-- BEGIN DATA -->

 The alt modifier. An indicator that the alt key was held
 down during the event.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ActionEvent.ACTION_FIRST
<!-- END KEY -->
<!-- BEGIN DATA -->
 The first number in the range of ids used for action events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ActionEvent.ACTION_LAST
<!-- END KEY -->
<!-- BEGIN DATA -->
 The last number in the range of ids used for action events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.ActionEvent.ACTION_PERFORMED
<!-- END KEY -->
<!-- BEGIN DATA -->
 This event id indicates that a meaningful action occured.

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.lang.String java.awt.event.ActionEvent.actionCommand
<!-- END KEY -->
<!-- BEGIN DATA -->
 The nonlocalized string that gives more details
 of what actually caused the event.
 This information is very specific to the component
 that fired it.

 @serial
 @see #getActionCommand

<!-- END DATA -->
<!-- BEGIN KEY -->
 long java.awt.event.ActionEvent.when
<!-- END KEY -->
<!-- BEGIN DATA -->
 Timestamp of when this event occurred. Because an ActionEvent is a high-
 level, semantic event, the timestamp is typically the same as an
 underlying InputEvent.

 @serial
 @see #getWhen

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.event.ActionEvent.modifiers
<!-- END KEY -->
<!-- BEGIN DATA -->
 This represents the key modifier that was selected,
 and is used to determine the state of the selected key.
 If no modifier has been selected it will default to
 zero.

 @serial
 @see #getModifiers

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ActionEvent(Object source, int id, String command)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an <code>ActionEvent</code> object.
 <p>
 Note that passing in an invalid <code>id</code> results in
 unspecified behavior. This method throws an
 <code>IllegalArgumentException</code> if <code>source</code>
 is <code>null</code>.
 A <code>null</code> <code>command</code> string is legal,
 but not recommended.

 @param source  the object that originated the event
 @param id      an integer that identifies the event
 @param command a string that may specify a command (possibly one 
                of several) associated with the event
 @throws IllegalArgumentException if <code>source</code> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ActionEvent(Object source, int id, String command, int modifiers)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an <code>ActionEvent</code> object with modifier keys.
 <p>
 Note that passing in an invalid <code>id</code> results in
 unspecified behavior. This method throws an
 <code>IllegalArgumentException</code> if <code>source</code>
 is <code>null</code>.
 A <code>null</code> <code>command</code> string is legal,
 but not recommended.

 @param source    the object that originated the event
 @param id        an integer that identifies the event
 @param command   a string that may specify a command (possibly one 
                  of several) associated with the event
 @param modifiers the modifier keys held down during this action
 @throws IllegalArgumentException if <code>source</code> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.ActionEvent(Object source, int id, String command, long when, int modifiers)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an <code>ActionEvent</code> object with the specified
 modifier keys and timestamp.
 <p>
 Note that passing in an invalid <code>id</code> results in
 unspecified behavior. This method throws an
 <code>IllegalArgumentException</code> if <code>source</code>
 is <code>null</code>.
 A <code>null</code> <code>command</code> string is legal,
 but not recommended.

 @param source    the object that originated the event
 @param id        an integer that identifies the event
 @param command   a string that may specify a command (possibly one 
                  of several) associated with the event
 @param when      the time the event occurred
 @param modifiers the modifier keys held down during this action
 @throws IllegalArgumentException if <code>source</code> is null

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.event.ActionEvent.getActionCommand()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the command string associated with this action.
 This string allows a "modal" component to specify one of several 
 commands, depending on its state. For example, a single button might
 toggle between "show details" and "hide details". The source object
 and the event would be the same in each case, but the command string
 would identify the intended action.
 <p>
 Note that if a <code>null</code> command string was passed
 to the constructor for this <code>ActionEvent</code>, this
 this method returns <code>null</code>.

 @return the string identifying the command for this event

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.awt.event.ActionEvent.getWhen()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the timestamp of when this event occurred. Because an
 ActionEvent is a high-level, semantic event, the timestamp is typically
 the same as an underlying InputEvent.

 @return this event's timestamp
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.ActionEvent.getModifiers()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the modifier keys held down during this action event.
 
 @return the bitwise-or of the modifier constants

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.event.ActionEvent.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a parameter string identifying this action event.
 This method is useful for event-logging and for debugging.
 
 @return a string identifying the event and its associated command 

<!-- END DATA -->
