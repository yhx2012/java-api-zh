<!-- BEGIN KEY -->
public class java.awt.event.HierarchyEvent extends java.awt.AWTEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
 An event which indicates a change to the <code>Component</code>
 hierarchy to which a <code>Component</code> belongs.
 <ul>
 <li>Hierarchy Change Events (HierarchyListener)
     <ul>
     <li> addition of an ancestor
     <li> removal of an ancestor
     <li> hierarchy made displayable
     <li> hierarchy made undisplayable
     <li> hierarchy shown on the screen (both visible and displayable)
     <li> hierarchy hidden on the screen (either invisible or undisplayable)
     </ul>
 <li>Ancestor Reshape Events (HierarchyBoundsListener)
     <ul>
     <li> an ancestor was resized
     <li> an ancestor was moved
     </ul>
 </ul>
 <p>
 Hierarchy events are provided for notification purposes ONLY.
 The AWT will automatically handle changes to the hierarchy internally so
 that GUI layout and displayability works properly regardless of whether a
 program is receiving these events or not.
 <p>
 This event is generated by a Container object (such as a Panel) when the
 Container is added, removed, moved, or resized, and passed down the
 hierarchy. It is also generated by a Component object when that object's
 <code>addNotify</code>, <code>removeNotify</code>, <code>show</code>, or
 <code>hide</code> method is called. ANCESTOR_MOVED and ANCESTOR_RESIZED
 events are dispatched to every <code>HierarchyBoundsListener</code> or
 <code>HierarchyBoundsAdapter</code> object which registered to receive
 such events using the Component's <code>addHierarchyBoundsListener</code>
 method. (<code>HierarchyBoundsAdapter</code> objects implement the <code>
 HierarchyBoundsListener</code> interface.) HIERARCHY_CHANGED events are
 dispatched to every <code>HierarchyListener</code> object which registered
 to receive such events using the Component's <code>addHierarchyListener
 </code> method. Each such listener object gets this <code>HierarchyEvent
 </code> when the event occurs.

 @author	David Mendenhall
 @version	1.14, 11/17/05
 @see		HierarchyListener
 @see		HierarchyBoundsAdapter
 @see		HierarchyBoundsListener
 @since 	1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.HierarchyEvent.HIERARCHY_FIRST
<!-- END KEY -->
<!-- BEGIN DATA -->
 Marks the first integer id for the range of hierarchy event ids.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.HierarchyEvent.HIERARCHY_CHANGED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event id indicating that modification was made to the
 entire hierarchy tree.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.HierarchyEvent.ANCESTOR_MOVED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event id indicating an ancestor-Container was moved.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.HierarchyEvent.ANCESTOR_RESIZED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The event id indicating an ancestor-Container was resized.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.HierarchyEvent.HIERARCHY_LAST
<!-- END KEY -->
<!-- BEGIN DATA -->
 Marks the last integer id for the range of ancestor event ids.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.HierarchyEvent.PARENT_CHANGED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates that the <code>HIERARCHY_CHANGED</code> event
 was generated by a reparenting operation.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.HierarchyEvent.DISPLAYABILITY_CHANGED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates that the <code>HIERARCHY_CHANGED</code> event
 was generated due to a change in the displayability
 of the hierarchy.  To discern the
 current displayability of the hierarchy, call
 <code>Component.isDisplayable</code>. Displayability changes occur
 in response to explicit or implicit calls to
 <code>Component.addNotify</code> and
 <code>Component.removeNotify</code>.

 @see java.awt.Component#isDisplayable()
 @see java.awt.Component#addNotify()
 @see java.awt.Component#removeNotify()

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.HierarchyEvent.SHOWING_CHANGED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates that the <code>HIERARCHY_CHANGED</code> event
 was generated due to a change in the showing state
 of the hierarchy. To discern the
 current showing state of the hierarchy, call
 <code>Component.isShowing</code>. Showing state changes occur
 when either the displayability or visibility of the
 hierarchy occurs. Visibility changes occur in response to explicit
 or implicit calls to <code>Component.show</code> and
 <code>Component.hide</code>.

 @see java.awt.Component#isShowing()
 @see java.awt.Component#addNotify()
 @see java.awt.Component#removeNotify()
 @see java.awt.Component#show()
 @see java.awt.Component#hide()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.HierarchyEvent(Component source, int id, Component changed, Container changedParent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an <code>HierarchyEvent</code> object to identify a
 change in the <code>Component</code> hierarchy.
 <p>Note that passing in an invalid <code>id</code> results in
 unspecified behavior. This method throws an
 <code>IllegalArgumentException</code> if <code>source</code>
 is <code>null</code>.

 @param source          the <code>Component</code> object that
                        originated the event
 @param id              an integer indicating the type of event
 @param changed         the <code>Component</code> at the top of
                        the hierarchy which was changed
 @param changedParent   the parent of <code>changed</code>; this
                        may be the parent before or after the
                        change, depending on the type of change
 @throws IllegalArgumentException if <code>source</code> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.HierarchyEvent(Component source, int id, Component changed, Container changedParent, long changeFlags)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an <code>HierarchyEvent</code> object to identify
 a change in the <code>Component</code> hierarchy.
 <p>Note that passing in an invalid <code>id</code> results in
 unspecified behavior. This method throws an
 <code>IllegalArgumentException</code> if <code>source</code>
 is <code>null</code>.

 @param source          the <code>Component</code> object that
                        originated the event
 @param id              an integer indicating the type of event
 @param changed         the <code>Component</code> at the top
                        of the hierarchy which was changed
 @param changedParent   the parent of <code>changed</code>; this
                        may be the parent before or after the
                        change, depending on the type of change
 @param changeFlags     a bitmask which indicates the type(s) of
                        <code>HIERARCHY_CHANGED</code> events
                        represented in this event object
 @throws IllegalArgumentException if <code>source</code> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.event.HierarchyEvent.getComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the originator of the event.

 @return the <code>Component</code> object that originated 
 the event, or <code>null</code> if the object is not a 
 <code>Component</code>.  

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.awt.event.HierarchyEvent.getChanged()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the Component at the top of the hierarchy which was
 changed.

 @return the changed Component

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Container java.awt.event.HierarchyEvent.getChangedParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the parent of the Component returned by <code>
 getChanged()</code>. For a HIERARCHY_CHANGED event where the
 change was of type PARENT_CHANGED via a call to <code>
 Container.add</code>, the parent returned is the parent
 after the add operation. For a HIERARCHY_CHANGED event where
 the change was of type PARENT_CHANGED via a call to <code>
 Container.remove</code>, the parent returned is the parent
 before the remove operation. For all other events and types,
 the parent returned is the parent during the operation.

 @return the parent of the changed Component

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.awt.event.HierarchyEvent.getChangeFlags()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a bitmask which indicates the type(s) of
 HIERARCHY_CHANGED events represented in this event object.
 The bits have been bitwise-ored together.

 @return the bitmask, or 0 if this is not an HIERARCHY_CHANGED
 event

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.event.HierarchyEvent.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a parameter string identifying this event.
 This method is useful for event-logging and for debugging.

 @return a string identifying the event and its attributes

<!-- END DATA -->
