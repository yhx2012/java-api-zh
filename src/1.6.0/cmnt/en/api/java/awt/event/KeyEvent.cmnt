<!-- BEGIN KEY -->
public class java.awt.event.KeyEvent extends java.awt.event.InputEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
 An event which indicates that a keystroke occurred in a component.
 <p>
 This low-level event is generated by a component object (such as a text 
 field) when a key is pressed, released, or typed.  
 The event is passed to every <code>KeyListener</code>
 or <code>KeyAdapter</code> object which registered to receive such
 events using the component's <code>addKeyListener</code> method.
 (<code>KeyAdapter</code> objects implement the 
 <code>KeyListener</code> interface.)  Each such listener object 
 gets this <code>KeyEvent</code> when the event occurs.
 <p>
 <em>"Key typed" events</em> are higher-level and generally do not depend on 
 the platform or keyboard layout.  They are generated when a Unicode character 
 is entered, and are the preferred way to find out about character input.
 In the simplest case, a key typed event is produced by a single key press 
 (e.g., 'a').  Often, however, characters are produced by series of key 
 presses (e.g., 'shift' + 'a'), and the mapping from key pressed events to 
 key typed events may be many-to-one or many-to-many.  Key releases are not 
 usually necessary to generate a key typed event, but there are some cases 
 where the key typed event is not generated until a key is released (e.g., 
 entering ASCII sequences via the Alt-Numpad method in Windows).  
 No key typed events are generated for keys that don't generate Unicode 
 characters (e.g., action keys, modifier keys, etc.).
 <p>
 The getKeyChar method always returns a valid Unicode character or 
 CHAR_UNDEFINED.  Character input is reported by KEY_TYPED events: 
 KEY_PRESSED and KEY_RELEASED events are not necessarily associated 
 with character input.  Therefore, the result of the getKeyChar method 
 is guaranteed to be meaningful only for KEY_TYPED events.   
 <p>
 For key pressed and key released events, the getKeyCode method returns 
 the event's keyCode.  For key typed events, the getKeyCode method 
 always returns VK_UNDEFINED.

 <p>
 <em>"Key pressed" and "key released" events</em> are lower-level and depend 
 on the platform and keyboard layout. They are generated whenever a key is 
 pressed or released, and are the only way to find out about keys that don't 
 generate character input (e.g., action keys, modifier keys, etc.). The key 
 being pressed or released is indicated by the getKeyCode method, which returns 
 a virtual key code.

 <p>
 <em>Virtual key codes</em> are used to report which keyboard key has
 been pressed, rather than a character generated by the combination
 of one or more keystrokes (such as "A", which comes from shift and "a").  

 <p>
 For example, pressing the Shift key will cause a KEY_PRESSED event 
 with a VK_SHIFT keyCode, while pressing the 'a' key will result in 
 a VK_A keyCode.  After the 'a' key is released, a KEY_RELEASED event 
 will be fired with VK_A. Separately, a KEY_TYPED event with a keyChar 
 value of 'A' is generated.

 <p>
 Pressing and releasing a key on the keyboard results in the generating
 the following key events (in order):
 <PRE>
    {@code KEY_PRESSED}
    {@code KEY_TYPED} (is only generated if a valid Unicode character could be generated.)
    {@code KEY_RELEASED}
 </PRE>

 But in some cases (e.g. auto-repeat or input method is activated) the order
 could be different (and platform dependent).

 <p>
 Notes:
 <ul>
 <li>Key combinations which do not result in Unicode characters, such as action 
 keys like F1 and the HELP key, do not generate KEY_TYPED events.
 <li>Not all keyboards or systems are capable of generating all
 virtual key codes.  No attempt is made in Java to generate these keys 
 artificially. 
 <li>Virtual key codes do not identify a physical key: they depend on the
 platform and keyboard layout. For example, the key that generates VK_Q 
 when using a U.S. keyboard layout will generate VK_A when using a French 
 keyboard layout.
 <li>Not all characters have a keycode associated with them.  For example, 
 there is no keycode for the question mark because there is no keyboard 
 for which it appears on the primary layer.  
 <li>In order to support the platform-independent handling of action keys,
 the Java platform uses a few additional virtual key constants for functions
 that would otherwise have to be recognized by interpreting virtual key codes
 and modifiers. For example, for Japanese Windows keyboards, VK_ALL_CANDIDATES
 is returned instead of VK_CONVERT with the ALT modifier.
 <li>As specified in <a href="../doc-files/FocusSpec.html">Focus Specification</a>
 key events are dispatched to the focus owner by default.
 </ul>

 <p>
 WARNING: Aside from those keys that are defined by the Java language
 (VK_ENTER, VK_BACK_SPACE, and VK_TAB), do not rely on the values of the VK_
 constants.  Sun reserves the right to change these values as needed
 to accomodate a wider range of keyboards in the future.

 @author Carl Quinn
 @author Amy Fowler
 @author Norbert Lindenberg
 @version 1.79 10/19/06

 @see KeyAdapter
 @see KeyListener
 @see <a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/keylistener.html">Tutorial: Writing a Key Listener</a>

 @since 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.KEY_FIRST
<!-- END KEY -->
<!-- BEGIN DATA -->
 The first number in the range of ids used for key events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.KEY_LAST
<!-- END KEY -->
<!-- BEGIN DATA -->
 The last number in the range of ids used for key events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.KEY_TYPED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The "key typed" event.  This event is generated when a character is
 entered.  In the simplest case, it is produced by a single key press.  
 Often, however, characters are produced by series of key presses, and 
 the mapping from key pressed events to key typed events may be 
 many-to-one or many-to-many.  

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.KEY_PRESSED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The "key pressed" event. This event is generated when a key
 is pushed down.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.KEY_RELEASED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The "key released" event. This event is generated when a key
 is let up.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_LEFT
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the non-numpad <b>left</b> arrow key.
 @see #VK_KP_LEFT

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_UP
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the non-numpad <b>up</b> arrow key.
 @see #VK_KP_UP

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_RIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the non-numpad <b>right</b> arrow key.
 @see #VK_KP_RIGHT

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DOWN
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the non-numpad <b>down</b> arrow key.
 @see #VK_KP_DOWN

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_COMMA
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the comma key, ","

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_MINUS
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the minus key, "-"
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_PERIOD
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the period key, "."

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_SLASH
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the forward slash key, "/"

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_0
<!-- END KEY -->
<!-- BEGIN DATA -->
VK_0 thru VK_9 are the same as ASCII '0' thru '9' (0x30 - 0x39) 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_SEMICOLON
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the semicolon key, ";"

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_EQUALS
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the equals key, "="

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_A
<!-- END KEY -->
<!-- BEGIN DATA -->
VK_A thru VK_Z are the same as ASCII 'A' thru 'Z' (0x41 - 0x5A) 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_OPEN_BRACKET
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the open bracket key, "["

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_BACK_SLASH
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the back slash key, "\"

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_CLOSE_BRACKET
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the close bracket key, "]"

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_SEPARATER
<!-- END KEY -->
<!-- BEGIN DATA -->

 This constant is obsolete, and is included only for backwards
 compatibility.
 @see #VK_SEPARATOR

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_SEPARATOR
<!-- END KEY -->
<!-- BEGIN DATA -->

 Constant for the Numpad Separator key. 
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F1
<!-- END KEY -->
<!-- BEGIN DATA -->
Constant for the F1 function key. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F2
<!-- END KEY -->
<!-- BEGIN DATA -->
Constant for the F2 function key. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F3
<!-- END KEY -->
<!-- BEGIN DATA -->
Constant for the F3 function key. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F4
<!-- END KEY -->
<!-- BEGIN DATA -->
Constant for the F4 function key. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F5
<!-- END KEY -->
<!-- BEGIN DATA -->
Constant for the F5 function key. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F6
<!-- END KEY -->
<!-- BEGIN DATA -->
Constant for the F6 function key. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F7
<!-- END KEY -->
<!-- BEGIN DATA -->
Constant for the F7 function key. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F8
<!-- END KEY -->
<!-- BEGIN DATA -->
Constant for the F8 function key. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F9
<!-- END KEY -->
<!-- BEGIN DATA -->
Constant for the F9 function key. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F10
<!-- END KEY -->
<!-- BEGIN DATA -->
Constant for the F10 function key. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F11
<!-- END KEY -->
<!-- BEGIN DATA -->
Constant for the F11 function key. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F12
<!-- END KEY -->
<!-- BEGIN DATA -->
Constant for the F12 function key. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F13
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the F13 function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F14
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the F14 function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F15
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the F15 function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F16
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the F16 function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F17
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the F17 function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F18
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the F18 function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F19
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the F19 function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F20
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the F20 function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F21
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the F21 function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F22
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the F22 function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F23
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the F23 function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_F24
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the F24 function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_KP_UP
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the numeric keypad <b>up</b> arrow key.
 @see #VK_UP
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_KP_DOWN
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the numeric keypad <b>down</b> arrow key.
 @see #VK_DOWN
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_KP_LEFT
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the numeric keypad <b>left</b> arrow key.
 @see #VK_LEFT
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_KP_RIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the numeric keypad <b>right</b> arrow key.
 @see #VK_RIGHT
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_GRAVE
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_ACUTE
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_CIRCUMFLEX
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_TILDE
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_MACRON
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_BREVE
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_ABOVEDOT
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_DIAERESIS
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_ABOVERING
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_DOUBLEACUTE
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_CARON
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_CEDILLA
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_OGONEK
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_IOTA
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_VOICED_SOUND
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DEAD_SEMIVOICED_SOUND
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_AMPERSAND
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_ASTERISK
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_QUOTEDBL
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_LESS
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_GREATER
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_BRACELEFT
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_BRACERIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_AT
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the "@" key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_COLON
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the ":" key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_CIRCUMFLEX
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the "^" key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_DOLLAR
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the "$" key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_EURO_SIGN
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the Euro currency sign key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_EXCLAMATION_MARK
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the "!" key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_INVERTED_EXCLAMATION_MARK
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the inverted exclamation mark key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_LEFT_PARENTHESIS
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the "(" key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_NUMBER_SIGN
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the "#" key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_PLUS
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the "+" key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_RIGHT_PARENTHESIS
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the ")" key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_UNDERSCORE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the "_" key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_WINDOWS
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the Microsoft Windows "Windows" key.
 It is used for both the left and right version of the key.  
 @see #getKeyLocation()
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_CONTEXT_MENU
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the Microsoft Windows Context Menu key.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_CONVERT
<!-- END KEY -->
<!-- BEGIN DATA -->
Constant for the Convert function key. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_NONCONVERT
<!-- END KEY -->
<!-- BEGIN DATA -->
Constant for the Don't Convert function key. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_ACCEPT
<!-- END KEY -->
<!-- BEGIN DATA -->
Constant for the Accept or Commit function key. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_ALPHANUMERIC
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the Alphanumeric function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_KATAKANA
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the Katakana function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_HIRAGANA
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the Hiragana function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_FULL_WIDTH
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the Full-Width Characters function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_HALF_WIDTH
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the Half-Width Characters function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_ROMAN_CHARACTERS
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the Roman Characters function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_ALL_CANDIDATES
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the All Candidates function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_PREVIOUS_CANDIDATE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the Previous Candidate function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_CODE_INPUT
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the Code Input function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_JAPANESE_KATAKANA
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the Japanese-Katakana function key.
 This key switches to a Japanese input method and selects its Katakana input mode.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_JAPANESE_HIRAGANA
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the Japanese-Hiragana function key.
 This key switches to a Japanese input method and selects its Hiragana input mode.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_JAPANESE_ROMAN
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the Japanese-Roman function key.
 This key switches to a Japanese input method and selects its Roman-Direct input mode.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_KANA_LOCK
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the locking Kana function key.
 This key locks the keyboard into a Kana layout.
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_INPUT_METHOD_ON_OFF
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the input method on/off key.
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_CUT
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_COPY
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_PASTE
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_UNDO
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_AGAIN
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_FIND
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_PROPS
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_STOP
<!-- END KEY -->
<!-- BEGIN DATA -->
@since 1.2 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_COMPOSE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the Compose function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_ALT_GRAPH
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the AltGraph function key.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_BEGIN
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constant for the Begin key.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.VK_UNDEFINED
<!-- END KEY -->
<!-- BEGIN DATA -->
 This value is used to indicate that the keyCode is unknown.
 KEY_TYPED events do not have a keyCode value; this value 
 is used instead.  

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final char java.awt.event.KeyEvent.CHAR_UNDEFINED
<!-- END KEY -->
<!-- BEGIN DATA -->
 KEY_PRESSED and KEY_RELEASED events which do not map to a
 valid Unicode character use this for the keyChar value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.KEY_LOCATION_UNKNOWN
<!-- END KEY -->
<!-- BEGIN DATA -->
 A constant indicating that the keyLocation is indeterminate
 or not relevant.
 <code>KEY_TYPED</code> events do not have a keyLocation; this value
 is used instead.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.KEY_LOCATION_STANDARD
<!-- END KEY -->
<!-- BEGIN DATA -->
 A constant indicating that the key pressed or released
 is not distinguished as the left or right version of a key,
 and did not originate on the numeric keypad (or did not
 originate with a virtual key corresponding to the numeric
 keypad).
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.KEY_LOCATION_LEFT
<!-- END KEY -->
<!-- BEGIN DATA -->
 A constant indicating that the key pressed or released is in
 the left key location (there is more than one possible location
 for this key).  Example: the left shift key.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.KEY_LOCATION_RIGHT
<!-- END KEY -->
<!-- BEGIN DATA -->
 A constant indicating that the key pressed or released is in
 the right key location (there is more than one possible location
 for this key).  Example: the right shift key.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.KeyEvent.KEY_LOCATION_NUMPAD
<!-- END KEY -->
<!-- BEGIN DATA -->
 A constant indicating that the key event originated on the
 numeric keypad or with a virtual key corresponding to the
 numeric keypad.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean java.awt.event.KeyEvent.isProxyActive
<!-- END KEY -->
<!-- BEGIN DATA -->
 Stores the state of native event dispatching system
 - true, if when the event was created event proxying 
         mechanism was active
 - false, if it was inactive
 Used in Component.dispatchEventImpl to correctly dispatch
 events when proxy is active

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.event.KeyEvent.keyCode
<!-- END KEY -->
<!-- BEGIN DATA -->
 The unique value assigned to each of the keys on the
 keyboard.  There is a common set of key codes that
 can be fired by most keyboards.
 The symbolic name for a key code should be used rather
 than the code value itself.

 @serial
 @see #getKeyCode()
 @see #setKeyCode(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
 char java.awt.event.KeyEvent.keyChar
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>keyChar</code> is a valid unicode character
 that is fired by a key or a key combination on
 a keyboard.

 @serial
 @see #getKeyChar()
 @see #setKeyChar(char)

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.event.KeyEvent.keyLocation
<!-- END KEY -->
<!-- BEGIN DATA -->
 The location of the key on the keyboard.

 Some keys occur more than once on a keyboard, e.g. the left and
 right shift keys.  Additionally, some keys occur on the numeric
 keypad.  This variable is used to distinguish such keys.

 The only legal values are <code>KEY_LOCATION_UNKNOWN</code>, 
 <code>KEY_LOCATION_STANDARD</code>, <code>KEY_LOCATION_LEFT</code>, 
 <code>KEY_LOCATION_RIGHT</code>, and <code>KEY_LOCATION_NUMPAD</code>.

 @serial
 @see #getKeyLocation()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.KeyEvent(Component source, int id, long when, int modifiers, int keyCode, char keyChar)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>KeyEvent</code> object.
 <p>Note that passing in an invalid <code>id</code> results in
 unspecified behavior. This method throws an
 <code>IllegalArgumentException</code> if <code>source</code>
 is <code>null</code>.

 @param source    the <code>Component</code> that originated the event
 @param id        an integer identifying the type of event
 @param when      a long integer that specifies the time the event
                  occurred
 @param modifiers the modifier keys down during event (shift, ctrl,
                  alt, meta)
                  Either extended _DOWN_MASK or old _MASK modifiers
                  should be used, but both models should not be mixed
                  in one event. Use of the extended modifiers is
                  preferred.
 @param keyCode   the integer code for an actual key, or VK_UNDEFINED 
                  (for a key-typed event)
 @param keyChar   the Unicode character generated by this event, or 
                  CHAR_UNDEFINED (for key-pressed and key-released
                  events which do not map to a valid Unicode character)
 @throws IllegalArgumentException  if <code>id</code> is
     <code>KEY_TYPED</code> and <code>keyChar</code> is
     <code>CHAR_UNDEFINED</code>; or if <code>id</code> is
     <code>KEY_TYPED</code> and <code>keyCode</code> is not
     <code>VK_UNDEFINED</code>
 @throws IllegalArgumentException if <code>source</code> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.KeyEvent(Component source, int id, long when, int modifiers, int keyCode)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated as of JDK1.1 

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.KeyEvent.getKeyCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the integer keyCode associated with the key in this event.
 
 @return the integer code for an actual key on the keyboard. 
         (For <code>KEY_TYPED</code> events, the keyCode is 
         <code>VK_UNDEFINED</code>.)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.event.KeyEvent.setKeyCode(int keyCode)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the keyCode value to indicate a physical key.

 @param keyCode an integer corresponding to an actual key on the keyboard.

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.awt.event.KeyEvent.getKeyChar()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the character associated with the key in this event.
 For example, the <code>KEY_TYPED</code> event for shift + "a" 
 returns the value for "A".
 <p>
 <code>KEY_PRESSED</code> and <code>KEY_RELEASED</code> events 
 are not intended for reporting of character input.  Therefore, 
 the values returned by this method are guaranteed to be 
 meaningful only for <code>KEY_TYPED</code> events.  

 @return the Unicode character defined for this key event.
         If no valid Unicode character exists for this key event, 
         <code>CHAR_UNDEFINED</code> is returned.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.event.KeyEvent.setKeyChar(char keyChar)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the keyChar value to indicate a logical character.

 @param keyChar a char corresponding to to the combination of keystrokes
                that make up this event.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.event.KeyEvent.setModifiers(int modifiers)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the modifiers to indicate additional keys that were held down
 (e.g. shift, ctrl, alt, meta) defined as part of InputEvent.
 <p>
 NOTE:  use of this method is not recommended, because many AWT
 implementations do not recognize modifier changes.  This is
 especially true for <code>KEY_TYPED</code> events where the shift 
 modifier is changed.

 @param modifiers an integer combination of the modifier constants.
 @see InputEvent
 @deprecated as of JDK1.1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.KeyEvent.getKeyLocation()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the location of the key that originated this key event.

 Some keys occur more than once on a keyboard, e.g. the left and
 right shift keys.  Additionally, some keys occur on the numeric
 keypad.  This provides a way of distinguishing such keys.

 @return the location of the key that was pressed or released.
         Always returns <code>KEY_LOCATION_UNKNOWN</code> for 
         <code>KEY_TYPED</code> events.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.awt.event.KeyEvent.getKeyText(int keyCode)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a String describing the keyCode, such as "HOME", "F1" or "A".
 These strings can be localized by changing the awt.properties file.

 @return a string containing a text description for a physical key,
         identified by its keyCode

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.awt.event.KeyEvent.getKeyModifiersText(int modifiers)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>String</code> describing the modifier key(s),
 such as "Shift", or "Ctrl+Shift".  These strings can be
 localized by changing the <code>awt.properties</code> file.
 <p>
 Note that <code>InputEvent.ALT_MASK</code> and
 <code>InputEvent.BUTTON2_MASK</code> have the same value,
 so the string "Alt" is returned for both modifiers.  Likewise,
 <code>InputEvent.META_MASK</code> and
 <code>InputEvent.BUTTON3_MASK</code> have the same value,
 so the string "Meta" is returned for both modifiers.

 @return string a text description of the combination of modifier
                keys that were held down during the event
 @see InputEvent#getModifiersExText(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.event.KeyEvent.isActionKey()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns whether the key in this event is an "action" key.
 Typically an action key does not fire a unicode character and is
 not a modifier key.

 @return <code>true</code> if the key is an "action" key,
         <code>false</code> otherwise

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.event.KeyEvent.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a parameter string identifying this event.
 This method is useful for event logging and for debugging.

 @return a string identifying the event and its attributes

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.event.KeyEvent.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets new modifiers by the old ones. The key modifiers 
 override overlaping mouse modifiers.
 @serial

<!-- END DATA -->
