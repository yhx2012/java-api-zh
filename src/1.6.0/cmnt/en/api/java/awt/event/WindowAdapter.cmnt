<!-- BEGIN KEY -->
public abstract class java.awt.event.WindowAdapter extends java.lang.Object implements java.awt.event.WindowListener, java.awt.event.WindowStateListener, java.awt.event.WindowFocusListener
<!-- END KEY -->
<!-- BEGIN DATA -->
 An abstract adapter class for receiving window events.
 The methods in this class are empty. This class exists as
 convenience for creating listener objects.
 <P>
 Extend this class to create a <code>WindowEvent</code> listener 
 and override the methods for the events of interest. (If you implement the 
 <code>WindowListener</code> interface, you have to define all of
 the methods in it. This abstract class defines null methods for them
 all, so you can only have to define methods for events you care about.)
 <P>
 Create a listener object using the extended class and then register it with 
 a Window using the window's <code>addWindowListener</code> 
 method. When the window's status changes by virtue of being opened,
 closed, activated or deactivated, iconified or deiconified, 
 the relevant method in the listener
 object is invoked, and the <code>WindowEvent</code> is passed to it.

 @see WindowEvent
 @see WindowListener
 @see <a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/windowlistener.html">Tutorial: Writing a Window Listener</a>

 @author Carl Quinn
 @author Amy Fowler
 @author David Mendenhall
 @version 1.22, 04/13/06
 @since 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.event.WindowAdapter.windowOpened(WindowEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when a window has been opened.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.event.WindowAdapter.windowClosing(WindowEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when a window is in the process of being closed.
 The close operation can be overridden at this point.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.event.WindowAdapter.windowClosed(WindowEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when a window has been closed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.event.WindowAdapter.windowIconified(WindowEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when a window is iconified.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.event.WindowAdapter.windowDeiconified(WindowEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when a window is de-iconified.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.event.WindowAdapter.windowActivated(WindowEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when a window is activated.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.event.WindowAdapter.windowDeactivated(WindowEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when a window is de-activated.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.event.WindowAdapter.windowStateChanged(WindowEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when a window state is changed.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.event.WindowAdapter.windowGainedFocus(WindowEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when the Window is set to be the focused Window, which means
 that the Window, or one of its subcomponents, will receive keyboard
 events.

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.event.WindowAdapter.windowLostFocus(WindowEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Invoked when the Window is no longer the focused Window, which means
 that keyboard events will no longer be delivered to the Window or any of
 its subcomponents.

 @since 1.4

<!-- END DATA -->
