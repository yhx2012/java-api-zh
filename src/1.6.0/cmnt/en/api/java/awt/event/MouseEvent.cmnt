<!-- BEGIN KEY -->
public class java.awt.event.MouseEvent extends java.awt.event.InputEvent
<!-- END KEY -->
<!-- BEGIN DATA -->
 An event which indicates that a mouse action occurred in a component.
 A mouse action is considered to occur in a particular component if and only
 if the mouse cursor is over the unobscured part of the component's bounds
 when the action happens.
 For lightweight components, such as Swing's components, mouse events
 are only dispatched to the component if the mouse event type has been
 enabled on the component. A mouse event type is enabled by adding the
 appropriate mouse-based {@code EventListener} to the component
 ({@link MouseListener} or {@link MouseMotionListener}), or by invoking
 {@link Component#enableEvents(long)} with the appropriate mask parameter
 ({@code AWTEvent.MOUSE_EVENT_MASK} or {@code AWTEvent.MOUSE_MOTION_EVENT_MASK}).
 If the mouse event type has not been enabled on the component, the
 corresponding mouse events are dispatched to the first ancestor that
 has enabled the mouse event type.
<p>
 For example, if a {@code MouseListener} has been added to a component, or
 {@code enableEvents(AWTEvent.MOUSE_EVENT_MASK)} has been invoked, then all
 the events defined by {@code MouseListener} are dispatched to the component.
 On the other hand, if a {@code MouseMotionListener} has not been added and
 {@code enableEvents} has not been invoked with
 {@code AWTEvent.MOUSE_MOTION_EVENT_MASK}, then mouse motion events are not
 dispatched to the component. Instead the mouse motion events are
 dispatched to the first ancestors that has enabled mouse motion
 events.
 <P>
 This low-level event is generated by a component object for:
 <ul>
 <li>Mouse Events
     <ul>
     <li>a mouse button is pressed
     <li>a mouse button is released
     <li>a mouse button is clicked (pressed and released)
     <li>the mouse cursor enters the unobscured part of component's geometry
     <li>the mouse cursor exits the unobscured part of component's geometry
     </ul>
 <li> Mouse Motion Events
     <ul>
     <li>the mouse is moved
     <li>the mouse is dragged
     </ul>
 </ul>
 <P>
 A <code>MouseEvent</code> object is passed to every
 <code>MouseListener</code>
 or <code>MouseAdapter</code> object which is registered to receive 
 the "interesting" mouse events using the component's 
 <code>addMouseListener</code> method.
 (<code>MouseAdapter</code> objects implement the 
 <code>MouseListener</code> interface.) Each such listener object 
 gets a <code>MouseEvent</code> containing the mouse event.
 <P>
 A <code>MouseEvent</code> object is also passed to every
 <code>MouseMotionListener</code> or
 <code>MouseMotionAdapter</code> object which is registered to receive 
 mouse motion events using the component's
 <code>addMouseMotionListener</code>
 method. (<code>MouseMotionAdapter</code> objects implement the 
 <code>MouseMotionListener</code> interface.) Each such listener object 
 gets a <code>MouseEvent</code> containing the mouse motion event.
 <P>
 When a mouse button is clicked, events are generated and sent to the
 registered <code>MouseListener</code>s.
 The state of modal keys can be retrieved using {@link InputEvent#getModifiers}
 and {@link InputEvent#getModifiersEx}.
 The button mask returned by {@link InputEvent#getModifiers} reflects
 only the button that changed state, not the current state of all buttons.
 (Note: Due to overlap in the values of ALT_MASK/BUTTON2_MASK and
 META_MASK/BUTTON3_MASK, this is not always true for mouse events involving
 modifier keys).
 To get the state of all buttons and modifier keys, use
 {@link InputEvent#getModifiersEx}.
 The button which has changed state is returned by {@link MouseEvent#getButton}
 <P> 
 For example, if the first mouse button is pressed, events are sent in the
 following order:
 <PRE>
    <b   >id           </b   >   <b   >modifiers   </b   > <b   >button </b   >          
    <code>MOUSE_PRESSED</code>:  <code>BUTTON1_MASK</code> <code>BUTTON1</code>
    <code>MOUSE_RELEASED</code>: <code>BUTTON1_MASK</code> <code>BUTTON1</code>
    <code>MOUSE_CLICKED</code>:  <code>BUTTON1_MASK</code> <code>BUTTON1</code>
 </PRE>
 When multiple mouse buttons are pressed, each press, release, and click
 results in a separate event. 
 <P> 
 For example, if the user presses <b>button 1</b> followed by
 <b>button 2</b>, and then releases them in the same order,
 the following sequence of events is generated:
 <PRE>
    <b   >id           </b   >   <b   >modifiers   </b   > <b   >button </b   >          
    <code>MOUSE_PRESSED</code>:  <code>BUTTON1_MASK</code> <code>BUTTON1</code>
    <code>MOUSE_PRESSED</code>:  <code>BUTTON2_MASK</code> <code>BUTTON2</code>
    <code>MOUSE_RELEASED</code>: <code>BUTTON1_MASK</code> <code>BUTTON1</code>
    <code>MOUSE_CLICKED</code>:  <code>BUTTON1_MASK</code> <code>BUTTON1</code>
    <code>MOUSE_RELEASED</code>: <code>BUTTON2_MASK</code> <code>BUTTON2</code>
    <code>MOUSE_CLICKED</code>:  <code>BUTTON2_MASK</code> <code>BUTTON2</code>
 </PRE>
 If <b>button 2</b> is released first, the
 <code>MOUSE_RELEASED</code>/<code>MOUSE_CLICKED</code> pair
 for <code>BUTTON2_MASK</code> arrives first,
 followed by the pair for <code>BUTTON1_MASK</code>.
 <p>

 <code>MOUSE_DRAGGED</code> events are delivered to the <code>Component</code> 
 in which the mouse button was pressed until the mouse button is released 
 (regardless of whether the mouse position is within the bounds of the 
 <code>Component</code>).  Due to platform-dependent Drag&Drop implementations, 
 <code>MOUSE_DRAGGED</code> events may not be delivered during a native 
 Drag&Drop operation.  
 
 In a multi-screen environment mouse drag events are delivered to the
 <code>Component</code> even if the mouse position is outside the bounds of the
 <code>GraphicsConfiguration</code> associated with that 
 <code>Component</code>. However, the reported position for mouse drag events
 in this case may differ from the actual mouse position: 
 <ul>
 <li>In a multi-screen environment without a virtual device:
 <br>
 The reported coordinates for mouse drag events are clipped to fit within the
 bounds of the <code>GraphicsConfiguration</code> associated with 
 the <code>Component</code>.
 <li>In a multi-screen environment with a virtual device:
 <br>
 The reported coordinates for mouse drag events are clipped to fit within the
 bounds of the virtual device associated with the <code>Component</code>.   
 </ul>

 @author Carl Quinn
 1.56, 07/11/06
   
 @see MouseAdapter
 @see MouseListener
 @see MouseMotionAdapter
 @see MouseMotionListener
 @see MouseWheelListener
 @see <a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/mouselistener.html">Tutorial: Writing a Mouse Listener</a>
 @see <a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/mousemotionlistener.html">Tutorial: Writing a Mouse Motion Listener</a>

 @since 1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.MouseEvent.MOUSE_FIRST
<!-- END KEY -->
<!-- BEGIN DATA -->
 The first number in the range of ids used for mouse events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.MouseEvent.MOUSE_LAST
<!-- END KEY -->
<!-- BEGIN DATA -->
 The last number in the range of ids used for mouse events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.MouseEvent.MOUSE_CLICKED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The "mouse clicked" event. This <code>MouseEvent</code>
 occurs when a mouse button is pressed and released.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.MouseEvent.MOUSE_PRESSED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The "mouse pressed" event. This <code>MouseEvent</code>
 occurs when a mouse button is pushed down.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.MouseEvent.MOUSE_RELEASED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The "mouse released" event. This <code>MouseEvent</code>
 occurs when a mouse button is let up.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.MouseEvent.MOUSE_MOVED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The "mouse moved" event. This <code>MouseEvent</code>
 occurs when the mouse position changes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.MouseEvent.MOUSE_ENTERED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The "mouse entered" event. This <code>MouseEvent</code>
 occurs when the mouse cursor enters the unobscured part of component's
 geometry. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.MouseEvent.MOUSE_EXITED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The "mouse exited" event. This <code>MouseEvent</code>
 occurs when the mouse cursor exits the unobscured part of component's
 geometry.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.MouseEvent.MOUSE_DRAGGED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The "mouse dragged" event. This <code>MouseEvent</code>
 occurs when the mouse position changes while a mouse button is pressed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.MouseEvent.MOUSE_WHEEL
<!-- END KEY -->
<!-- BEGIN DATA -->
 The "mouse wheel" event.  This is the only <code>MouseWheelEvent</code>.
 It occurs when a mouse equipped with a wheel has its wheel rotated.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.MouseEvent.NOBUTTON
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates no mouse buttons; used by {@link #getButton}. 
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.MouseEvent.BUTTON1
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates mouse button #1; used by {@link #getButton}.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.MouseEvent.BUTTON2
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates mouse button #2; used by {@link #getButton}.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.event.MouseEvent.BUTTON3
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates mouse button #3; used by {@link #getButton}.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.event.MouseEvent.x
<!-- END KEY -->
<!-- BEGIN DATA -->
 The mouse event's x coordinate.
 The x value is relative to the component that fired the event.

 @serial
 @see #getX()

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.event.MouseEvent.y
<!-- END KEY -->
<!-- BEGIN DATA -->
 The mouse event's y coordinate.
 The y value is relative to the component that fired the event.

 @serial
 @see #getY()

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.event.MouseEvent.xAbs
<!-- END KEY -->
<!-- BEGIN DATA -->
 The mouse event's x absolute coordinate.
 In a virtual device multi-screen environment in which the
 desktop area could span multiple physical screen devices,
 this coordinate is relative to the virtual coordinate system.
 Otherwise, this coordinate is relative to the coordinate system
 associated with the Component's GraphicsConfiguration.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.event.MouseEvent.yAbs
<!-- END KEY -->
<!-- BEGIN DATA -->
 The mouse event's y absolute coordinate.
 In a virtual device multi-screen environment in which the
 desktop area could span multiple physical screen devices,
 this coordinate is relative to the virtual coordinate system.
 Otherwise, this coordinate is relative to the coordinate system
 associated with the Component's GraphicsConfiguration.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.event.MouseEvent.clickCount
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates the number of quick consecutive clicks of
 a mouse button.
 clickCount will be valid for only three mouse events :<BR>
 <code>MOUSE_CLICKED</code>,
 <code>MOUSE_PRESSED</code> and
 <code>MOUSE_RELEASED</code>.
 For the above, the <code>clickCount</code> will be at least 1. 
 For all other events the count will be 0.

 @serial
 @see #getClickCount().

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.event.MouseEvent.button
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates which, if any, of the mouse buttons has changed state.

 The only legal values are the following constants:
 <code>NOBUTTON</code>,
 <code>BUTTON1</code>,
 <code>BUTTON2</code> or
 <code>BUTTON3</code>.
 @serial
 @see #getButton().

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean java.awt.event.MouseEvent.popupTrigger
<!-- END KEY -->
<!-- BEGIN DATA -->
 A property used to indicate whether a Popup Menu
 should appear  with a certain gestures.
 If <code>popupTrigger</code> = <code>false</code>,
 no popup menu should appear.  If it is <code>true</code>
 then a popup menu should appear.

 @serial
 @see java.awt.PopupMenu
 @see #isPopupTrigger()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.MouseEvent(Component source, int id, long when, int modifiers, int x, int y, int clickCount, boolean popupTrigger, int button)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>MouseEvent</code> object with the
 specified source component,
 type, modifiers, coordinates, and click count.
 <p>
 Note that passing in an invalid <code>id</code> results in
 unspecified behavior.  Creating an invalid event (such
 as by using more than one of the old _MASKs, or modifier/button
 values which don't match) results in unspecified behavior.
 An invocation of the form
 <tt>MouseEvent(source, id, when, modifiers, x, y, clickCount, popupTrigger, button)</tt>
 behaves in exactly the same way as the invocation
 <tt> {@link #MouseEvent(Component, int, long, int, int, int,
 int, int, int, boolean, int) MouseEvent}(source, id, when, modifiers,
 x, y, xAbs, yAbs, clickCount, popupTrigger, button)</tt>
 where xAbs and yAbs defines as source's location on screen plus
 relative coordinates x and y.
 xAbs and yAbs are set to zero if the source is not showing.
 This method throws an
 <code>IllegalArgumentException</code> if <code>source</code>
 is <code>null</code>.

 @param source       the <code>Component</code> that originated the event
 @param id           the integer that identifies the event
 @param when         a long int that gives the time the event occurred
 @param modifiers    the modifier keys down during event (e.g. shift, ctrl,
                     alt, meta)
                     Either extended _DOWN_MASK or old _MASK modifiers
                     should be used, but both models should not be mixed
                     in one event. Use of the extended modifiers is
                     preferred.
 @param x            the horizontal x coordinate for the mouse location
 @param y            the vertical y coordinate for the mouse location
 @param clickCount   the number of mouse clicks associated with event
 @param popupTrigger a boolean, true if this event is a trigger for a
                     popup menu 
 @param button       which of the mouse buttons has changed state.
                      <code>NOBUTTON</code>,
                      <code>BUTTON1</code>,
                      <code>BUTTON2</code> or
                      <code>BUTTON3</code>.
 @throws IllegalArgumentException if an invalid <code>button</code> 
            value is passed in
 @throws IllegalArgumentException if <code>source</code> is null
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.MouseEvent(Component source, int id, long when, int modifiers, int x, int y, int clickCount, boolean popupTrigger)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>MouseEvent</code> object with the
 specified source component,
 type, modifiers, coordinates, and click count.
 <p>Note that passing in an invalid <code>id</code> results in
 unspecified behavior.
 An invocation of the form
 <tt>MouseEvent(source, id, when, modifiers, x, y, clickCount, popupTrigger)</tt>
 behaves in exactly the same way as the invocation
 <tt> {@link #MouseEvent(Component, int, long, int, int, int,
 int, int, int, boolean, int) MouseEvent}(source, id, when, modifiers,
 x, y, xAbs, yAbs, clickCount, popupTrigger, MouseEvent.NOBUTTON)</tt>
 where xAbs and yAbs defines as source's location on screen plus
 relative coordinates x and y.
 xAbs and yAbs are set to zero if the source is not showing.
 This method throws an <code>IllegalArgumentException</code>
 if <code>source</code> is <code>null</code>.

 @param source       the <code>Component</code> that originated the event
 @param id           the integer that identifies the event
 @param when         a long int that gives the time the event occurred
 @param modifiers    the modifier keys down during event (e.g. shift, ctrl,
                     alt, meta)
                     Either extended _DOWN_MASK or old _MASK modifiers
                     should be used, but both models should not be mixed
                     in one event. Use of the extended modifiers is
                     preferred.
 @param x            the horizontal x coordinate for the mouse location
 @param y            the vertical y coordinate for the mouse location
 @param clickCount   the number of mouse clicks associated with event
 @param popupTrigger a boolean, true if this event is a trigger for a
                     popup menu 
 @throws IllegalArgumentException if <code>source</code> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.event.MouseEvent(Component source, int id, long when, int modifiers, int x, int y, int xAbs, int yAbs, int clickCount, boolean popupTrigger, int button)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>MouseEvent</code> object with the
 specified source component,
 type, modifiers, coordinates, absolute coordinates, and click count.
 <p>
 Note that passing in an invalid <code>id</code> results in
 unspecified behavior.  Creating an invalid event (such
 as by using more than one of the old _MASKs, or modifier/button
 values which don't match) results in unspecified behavior.
 Even if inconsistent values for relative and absolute coordinates are
 passed to the constructor, the mouse event instance is still
 created and no exception is thrown. 
 This method throws an
 <code>IllegalArgumentException</code> if <code>source</code>
 is <code>null</code>.

 @param source       the <code>Component</code> that originated the event
 @param id           the integer that identifies the event
 @param when         a long int that gives the time the event occurred
 @param modifiers    the modifier keys down during event (e.g. shift, ctrl,
                     alt, meta)
                     Either extended _DOWN_MASK or old _MASK modifiers
                     should be used, but both models should not be mixed
                     in one event. Use of the extended modifiers is
                     preferred.
 @param x            the horizontal x coordinate for the mouse location
 @param y            the vertical y coordinate for the mouse location
 @param xAbs         the absolute horizontal x coordinate for the mouse location
 @param yAbs         the absolute vertical y coordinate for the mouse location
 @param clickCount   the number of mouse clicks associated with event
 @param popupTrigger a boolean, true if this event is a trigger for a
                     popup menu 
 @param button       which of the mouse buttons has changed state.
                      <code>NOBUTTON</code>,
                      <code>BUTTON1</code>,
                      <code>BUTTON2</code> or
                      <code>BUTTON3</code>.
 @throws IllegalArgumentException if an invalid <code>button</code> 
            value is passed in
 @throws IllegalArgumentException if <code>source</code> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.event.MouseEvent.getLocationOnScreen()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the absolute x, y position of the event.
 In a virtual device multi-screen environment in which the
 desktop area could span multiple physical screen devices,
 these coordinates are relative to the virtual coordinate system.
 Otherwise, these coordinates are relative to the coordinate system
 associated with the Component's GraphicsConfiguration.

 @return a <code>Point</code> object containing the absolute  x
  and y coordinates.

 @see java.awt.GraphicsConfiguration
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.MouseEvent.getXOnScreen()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the absolute horizontal x position of the event.
 In a virtual device multi-screen environment in which the
 desktop area could span multiple physical screen devices,
 this coordinate is relative to the virtual coordinate system.
 Otherwise, this coordinate is relative to the coordinate system
 associated with the Component's GraphicsConfiguration.

 @return x  an integer indicating absolute horizontal position.

 @see java.awt.GraphicsConfiguration
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.MouseEvent.getYOnScreen()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the absolute vertical y position of the event.
 In a virtual device multi-screen environment in which the
 desktop area could span multiple physical screen devices,
 this coordinate is relative to the virtual coordinate system.
 Otherwise, this coordinate is relative to the coordinate system
 associated with the Component's GraphicsConfiguration.

 @return y  an integer indicating absolute vertical position.

 @see java.awt.GraphicsConfiguration
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.MouseEvent.getX()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the horizontal x position of the event relative to the 
 source component.

 @return x  an integer indicating horizontal position relative to
            the component

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.MouseEvent.getY()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the vertical y position of the event relative to the
 source component.

 @return y  an integer indicating vertical position relative to
            the component

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Point java.awt.event.MouseEvent.getPoint()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the x,y position of the event relative to the source component.

 @return a <code>Point</code> object containing the x and y coordinates 
         relative to the source component 


<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.event.MouseEvent.translatePoint(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Translates the event's coordinates to a new position
 by adding specified <code>x</code> (horizontal) and <code>y</code>
 (vertical) offsets.

 @param x the horizontal x value to add to the current x
          coordinate position
 @param y the vertical y value to add to the current y
                coordinate position

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.MouseEvent.getClickCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of mouse clicks associated with this event.

 @return integer value for the number of clicks

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.event.MouseEvent.getButton()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns which, if any, of the mouse buttons has changed state.

 @return one of the following constants:
 <code>NOBUTTON</code>,
 <code>BUTTON1</code>,
 <code>BUTTON2</code> or
 <code>BUTTON3</code>.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.event.MouseEvent.isPopupTrigger()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether or not this mouse event is the popup menu
 trigger event for the platform.
 <p><b>Note</b>: Popup menus are triggered differently
 on different systems. Therefore, <code>isPopupTrigger</code>
 should be checked in both <code>mousePressed</code>
 and <code>mouseReleased</code>
 for proper cross-platform functionality.

 @return boolean, true if this event is the popup menu trigger
         for this platform

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.awt.event.MouseEvent.getMouseModifiersText(int modifiers)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>String</code> describing the modifier keys and
 mouse buttons that were down during the event, such as "Shift",
 or "Ctrl+Shift". These strings can be localized by changing
 the <code>awt.properties</code> file.
 <p>
 Note that <code>InputEvent.ALT_MASK</code> and
 <code>InputEvent.BUTTON2_MASK</code> have the same value,
 so the string "Alt" is returned for both modifiers.  Likewise,
 <code>InputEvent.META_MASK</code> and
 <code>InputEvent.BUTTON3_MASK</code> have the same value,
 so the string "Meta" is returned for both modifiers.

 @param modifiers a modifier mask describing the modifier keys and 
                  mouse buttons that were down during the event
 @return string   a text description of the combination of modifier
                  keys and mouse buttons that were down during the event
 @see InputEvent#getModifiersExText(int)
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.event.MouseEvent.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a parameter string identifying this event.
 This method is useful for event-logging and for debugging.

 @return a string identifying the event and its attributes

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.event.MouseEvent.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets new modifiers by the old ones.
 @serial

<!-- END DATA -->
