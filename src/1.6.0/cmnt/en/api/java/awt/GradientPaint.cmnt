<!-- BEGIN KEY -->
public class java.awt.GradientPaint extends java.lang.Object implements java.awt.Paint
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>GradientPaint</code> class provides a way to fill 
 a {@link Shape} with a linear color gradient pattern.
 If {@link Point} P1 with {@link Color} C1 and <code>Point</code> P2 with
 <code>Color</code> C2 are specified in user space, the
 <code>Color</code> on the P1, P2 connecting line is proportionally
 changed from C1 to C2.  Any point P not on the extended P1, P2
 connecting line has the color of the point P' that is the perpendicular
 projection of P on the extended P1, P2 connecting line.
 Points on the extended line outside of the P1, P2 segment can be colored
 in one of two ways.
 <ul>
 <li>
 If the gradient is cyclic then the points on the extended P1, P2
 connecting line cycle back and forth between the colors C1 and C2.
 <li>
 If the gradient is acyclic then points on the P1 side of the segment
 have the constant <code>Color</code> C1 while points on the P2 side
 have the constant <code>Color</code> C2.
 </ul>

 @see Paint
 @see Graphics2D#setPaint
 @version 10 Feb 1997

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.GradientPaint(float x1, float y1, Color color1, float x2, float y2, Color color2)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a simple acyclic <code>GradientPaint</code> object.
 @param x1 x coordinate of the first specified
 <code>Point</code> in user space
 @param y1 y coordinate of the first specified
 <code>Point</code> in user space
 @param color1 <code>Color</code> at the first specified 
 <code>Point</code>
 @param x2 x coordinate of the second specified
 <code>Point</code> in user space
 @param y2 y coordinate of the second specified
 <code>Point</code> in user space
 @param color2 <code>Color</code> at the second specified 
 <code>Point</code>
 @throws NullPointerException if either one of colors is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.GradientPaint(Point2D pt1, Color color1, Point2D pt2, Color color2)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a simple acyclic <code>GradientPaint</code> object.
 @param pt1 the first specified <code>Point</code> in user space
 @param color1 <code>Color</code> at the first specified 
 <code>Point</code>
 @param pt2 the second specified <code>Point</code> in user space
 @param color2 <code>Color</code> at the second specified 
 <code>Point</code>
 @throws NullPointerException if either one of colors or points 
 is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.GradientPaint(float x1, float y1, Color color1, float x2, float y2, Color color2, boolean cyclic)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs either a cyclic or acyclic <code>GradientPaint</code>
 object depending on the <code>boolean</code> parameter.
 @param x1 x coordinate of the first specified
 <code>Point</code> in user space
 @param y1 y coordinate of the first specified
 <code>Point</code> in user space
 @param color1 <code>Color</code> at the first specified 
 <code>Point</code>
 @param x2 x coordinate of the second specified
 <code>Point</code> in user space
 @param y2 y coordinate of the second specified
 <code>Point</code> in user space
 @param color2 <code>Color</code> at the second specified 
 <code>Point</code>
 @param cyclic <code>true</code> if the gradient pattern should cycle
 repeatedly between the two colors; <code>false</code> otherwise

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.GradientPaint(Point2D pt1, Color color1, Point2D pt2, Color color2, boolean cyclic)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs either a cyclic or acyclic <code>GradientPaint</code>
 object depending on the <code>boolean</code> parameter.
 @param pt1 the first specified <code>Point</code> 
 in user space
 @param color1 <code>Color</code> at the first specified 
 <code>Point</code>
 @param pt2 the second specified <code>Point</code> 
 in user space
 @param color2 <code>Color</code> at the second specified 
 <code>Point</code>
 @param cyclic <code>true</code> if the gradient pattern should cycle
 repeatedly between the two colors; <code>false</code> otherwise
 @throws NullPointerException if either one of colors or points 
 is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Point2D java.awt.GradientPaint.getPoint1()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a copy of the point P1 that anchors the first color.
 @return a {@link Point2D} object that is a copy of the point
 that anchors the first color of this 
 <code>GradientPaint</code>.  

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color java.awt.GradientPaint.getColor1()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the color C1 anchored by the point P1.
 @return a <code>Color</code> object that is the color
 anchored by P1.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Point2D java.awt.GradientPaint.getPoint2()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a copy of the point P2 which anchors the second color.
 @return a {@link Point2D} object that is a copy of the point
 that anchors the second color of this
 <code>GradientPaint</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color java.awt.GradientPaint.getColor2()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the color C2 anchored by the point P2.
 @return a <code>Color</code> object that is the color
 anchored by P2.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.GradientPaint.isCyclic()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <code>true</code> if the gradient cycles repeatedly
 between the two colors C1 and C2.
 @return <code>true</code> if the gradient cycles repeatedly
 between the two colors; <code>false</code> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.PaintContext java.awt.GradientPaint.createContext(ColorModel cm, Rectangle deviceBounds, Rectangle2D userBounds, AffineTransform xform, RenderingHints hints)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates and returns a context used to generate the color pattern.
 @param cm {@link ColorModel} that receives
 the <code>Paint</code> data. This is used only as a hint.
 @param deviceBounds the device space bounding box of the 
 graphics primitive being rendered
 @param userBounds the user space bounding box of the 
 graphics primitive being rendered
 @param xform the {@link AffineTransform} from user
     space into device space
 @param hints the hints that the context object uses to choose
 between rendering alternatives
 @return the {@link PaintContext} that generates color patterns.
 @see PaintContext

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.GradientPaint.getTransparency()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the transparency mode for this <code>GradientPaint</code>.
 @return an integer value representing this <code>GradientPaint</code>
 object's transparency mode.
 @see Transparency

<!-- END DATA -->
