<!-- BEGIN KEY -->
public final class java.awt.LinearGradientPaint extends java.awt.MultipleGradientPaint
<!-- END KEY -->
<!-- BEGIN DATA -->
 The {@code LinearGradientPaint} class provides a way to fill
 a {@link java.awt.Shape} with a linear color gradient pattern.  The user
 may specify two or more gradient colors, and this paint will provide an
 interpolation between each color.  The user also specifies start and end
 points which define where in user space the color gradient should begin 
 and end.
 <p>
 The user must provide an array of floats specifying how to distribute the
 colors along the gradient.  These values should range from 0.0 to 1.0 and 
 act like keyframes along the gradient (they mark where the gradient should 
 be exactly a particular color).
 <p>
 In the event that the user does not set the first keyframe value equal
 to 0 and/or the last keyframe value equal to 1, keyframes will be created
 at these positions and the first and last colors will be replicated there.
 So, if a user specifies the following arrays to construct a gradient:<br>
 <pre>
     {Color.BLUE, Color.RED}, {.3f, .7f}
 </pre>
 this will be converted to a gradient with the following keyframes:<br>
 <pre>
     {Color.BLUE, Color.BLUE, Color.RED, Color.RED}, {0f, .3f, .7f, 1f}
 </pre>

 <p>
 The user may also select what action the {@code LinearGradientPaint}
 should take when filling color outside the start and end points.
 If no cycle method is specified, {@code NO_CYCLE} will be chosen by
 default, which means the endpoint colors will be used to fill the
 remaining area.
 <p>
 The colorSpace parameter allows the user to specify in which colorspace
 the interpolation should be performed, default sRGB or linearized RGB.

 <p>
 The following code demonstrates typical usage of
 {@code LinearGradientPaint}:
 <p>
 <pre>
     Point2D start = new Point2D.Float(0, 0);
     Point2D end = new Point2D.Float(50, 50);
     float[] dist = {0.0f, 0.2f, 1.0f};
     Color[] colors = {Color.RED, Color.WHITE, Color.BLUE};
     LinearGradientPaint p =
         new LinearGradientPaint(start, end, dist, colors);
 </pre>
 <p>
 This code will create a {@code LinearGradientPaint} which interpolates
 between red and white for the first 20% of the gradient and between white
 and blue for the remaining 80%.

 <p>
 This image demonstrates the example code above for each
 of the three cycle methods:
 <p>
 <center>
 <img src = "doc-files/LinearGradientPaint.png">
 </center>
  
 @see java.awt.Paint
 @see java.awt.Graphics2D#setPaint
 @author Nicholas Talian, Vincent Hardy, Jim Graham, Jerry Evans
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.LinearGradientPaint(float startX, float startY, float endX, float endY, float[] fractions, java.awt.Color[] colors)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a {@code LinearGradientPaint} with a default 
 {@code NO_CYCLE} repeating method and {@code SRGB} color space.

 @param startX the X coordinate of the gradient axis start point 
               in user space
 @param startY the Y coordinate of the gradient axis start point 
               in user space
 @param endX   the X coordinate of the gradient axis end point 
               in user space
 @param endY   the Y coordinate of the gradient axis end point 
               in user space
 @param fractions numbers ranging from 0.0 to 1.0 specifying the 
                  distribution of colors along the gradient
 @param colors array of colors corresponding to each fractional value
     
 @throws NullPointerException
 if {@code fractions} array is null,
 or {@code colors} array is null,
 @throws IllegalArgumentException
 if start and end points are the same points,
 or {@code fractions.length != colors.length},
 or {@code colors} is less than 2 in size,
 or a {@code fractions} value is less than 0.0 or greater than 1.0,
 or the {@code fractions} are not provided in strictly increasing order

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.LinearGradientPaint(float startX, float startY, float endX, float endY, float[] fractions, java.awt.Color[] colors, MultipleGradientPaint.CycleMethod cycleMethod)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a {@code LinearGradientPaint} with a default {@code SRGB}
 color space.

 @param startX the X coordinate of the gradient axis start point 
               in user space
 @param startY the Y coordinate of the gradient axis start point 
               in user space
 @param endX   the X coordinate of the gradient axis end point 
               in user space
 @param endY   the Y coordinate of the gradient axis end point 
               in user space
 @param fractions numbers ranging from 0.0 to 1.0 specifying the 
                  distribution of colors along the gradient
 @param colors array of colors corresponding to each fractional value
 @param cycleMethod either {@code NO_CYCLE}, {@code REFLECT},
                    or {@code REPEAT}

 @throws NullPointerException
 if {@code fractions} array is null,
 or {@code colors} array is null,
 or {@code cycleMethod} is null
 @throws IllegalArgumentException
 if start and end points are the same points,
 or {@code fractions.length != colors.length},
 or {@code colors} is less than 2 in size,
 or a {@code fractions} value is less than 0.0 or greater than 1.0,
 or the {@code fractions} are not provided in strictly increasing order

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.LinearGradientPaint(Point2D start, Point2D end, float[] fractions, java.awt.Color[] colors)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a {@code LinearGradientPaint} with a default 
 {@code NO_CYCLE} repeating method and {@code SRGB} color space.

 @param start the gradient axis start {@code Point2D} in user space
 @param end the gradient axis end {@code Point2D} in user space
 @param fractions numbers ranging from 0.0 to 1.0 specifying the 
                  distribution of colors along the gradient
 @param colors array of colors corresponding to each fractional value

 @throws NullPointerException
 if one of the points is null,
 or {@code fractions} array is null,
 or {@code colors} array is null
 @throws IllegalArgumentException
 if start and end points are the same points,
 or {@code fractions.length != colors.length},
 or {@code colors} is less than 2 in size,
 or a {@code fractions} value is less than 0.0 or greater than 1.0,
 or the {@code fractions} are not provided in strictly increasing order

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.LinearGradientPaint(Point2D start, Point2D end, float[] fractions, java.awt.Color[] colors, MultipleGradientPaint.CycleMethod cycleMethod)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a {@code LinearGradientPaint} with a default {@code SRGB}
 color space.

 @param start the gradient axis start {@code Point2D} in user space
 @param end the gradient axis end {@code Point2D} in user space
 @param fractions numbers ranging from 0.0 to 1.0 specifying the 
                  distribution of colors along the gradient
 @param colors array of colors corresponding to each fractional value
 @param cycleMethod either {@code NO_CYCLE}, {@code REFLECT},
                    or {@code REPEAT}
   
 @throws NullPointerException
 if one of the points is null,
 or {@code fractions} array is null,
 or {@code colors} array is null,
 or {@code cycleMethod} is null
 @throws IllegalArgumentException
 if start and end points are the same points,
 or {@code fractions.length != colors.length},
 or {@code colors} is less than 2 in size,
 or a {@code fractions} value is less than 0.0 or greater than 1.0,
 or the {@code fractions} are not provided in strictly increasing order

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.LinearGradientPaint(Point2D start, Point2D end, float[] fractions, java.awt.Color[] colors, MultipleGradientPaint.CycleMethod cycleMethod, MultipleGradientPaint.ColorSpaceType colorSpace, AffineTransform gradientTransform)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a {@code LinearGradientPaint}.

 @param start the gradient axis start {@code Point2D} in user space
 @param end the gradient axis end {@code Point2D} in user space
 @param fractions numbers ranging from 0.0 to 1.0 specifying the 
                  distribution of colors along the gradient
 @param colors array of colors corresponding to each fractional value
 @param cycleMethod either {@code NO_CYCLE}, {@code REFLECT},
                    or {@code REPEAT}
 @param colorSpace which color space to use for interpolation, 
                   either {@code SRGB} or {@code LINEAR_RGB}
 @param gradientTransform transform to apply to the gradient
     
 @throws NullPointerException
 if one of the points is null,
 or {@code fractions} array is null,
 or {@code colors} array is null,
 or {@code cycleMethod} is null,
 or {@code colorSpace} is null,
 or {@code gradientTransform} is null
 @throws IllegalArgumentException
 if start and end points are the same points,
 or {@code fractions.length != colors.length},
 or {@code colors} is less than 2 in size,
 or a {@code fractions} value is less than 0.0 or greater than 1.0,
 or the {@code fractions} are not provided in strictly increasing order

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.PaintContext java.awt.LinearGradientPaint.createContext(ColorModel cm, Rectangle deviceBounds, Rectangle2D userBounds, AffineTransform transform, RenderingHints hints)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Point2D java.awt.LinearGradientPaint.getStartPoint()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a copy of the start point of the gradient axis.

 @return a {@code Point2D} object that is a copy of the point
 that anchors the first color of this {@code LinearGradientPaint}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Point2D java.awt.LinearGradientPaint.getEndPoint()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a copy of the end point of the gradient axis.

 @return a {@code Point2D} object that is a copy of the point
 that anchors the last color of this {@code LinearGradientPaint}

<!-- END DATA -->
