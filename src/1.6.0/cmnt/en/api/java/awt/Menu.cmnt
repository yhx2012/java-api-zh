<!-- BEGIN KEY -->
public class java.awt.Menu extends java.awt.MenuItem implements java.awt.MenuContainer, javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <code>Menu</code> object is a pull-down menu component
 that is deployed from a menu bar.
 <p>
 A menu can optionally be a <i>tear-off</i> menu. A tear-off menu
 can be opened and dragged away from its parent menu bar or menu.
 It remains on the screen after the mouse button has been released.
 The mechanism for tearing off a menu is platform dependent, since
 the look and feel of the tear-off menu is determined by its peer.
 On platforms that do not support tear-off menus, the tear-off
 property is ignored.
 <p>
 Each item in a menu must belong to the <code>MenuItem</code>
 class. It can be an instance of <code>MenuItem</code>, a submenu
 (an instance of <code>Menu</code>), or a check box (an instance of
 <code>CheckboxMenuItem</code>).

 @version 1.78, 04/07/06
 @author Sami Shaio
 @see     java.awt.MenuItem
 @see     java.awt.CheckboxMenuItem
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.util.Vector java.awt.Menu.items
<!-- END KEY -->
<!-- BEGIN DATA -->
 A vector of the items that will be part of the Menu.

 @serial
 @see #countItems()

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean java.awt.Menu.tearOff
<!-- END KEY -->
<!-- BEGIN DATA -->
 This field indicates whether the menu has the
 tear of property or not.  It will be set to
 <code>true</code> if the menu has the tear off
 property and it will be set to <code>false</code>
 if it does not.
 A torn off menu can be deleted by a user when
 it is no longer needed.

 @serial
 @see #isTearOff()

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean java.awt.Menu.isHelpMenu
<!-- END KEY -->
<!-- BEGIN DATA -->
 This field will be set to <code>true</code>
 if the Menu in question is actually a help
 menu.  Otherwise it will be set to <code>
 false</code>.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.Menu.menuSerializedDataVersion
<!-- END KEY -->
<!-- BEGIN DATA -->
 The menu serialized Data Version.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Menu() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new menu with an empty label. This menu is not
 a tear-off menu.
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
 returns true.
 @see java.awt.GraphicsEnvironment#isHeadless
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Menu(String label) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new menu with the specified label. This menu is not
 a tear-off menu.
 @param       label the menu's label in the menu bar, or in
                   another menu of which this menu is a submenu.
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
 returns true.
 @see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Menu(String label, boolean tearOff) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new menu with the specified label,
 indicating whether the menu can be torn off.
 <p>
 Tear-off functionality may not be supported by all
 implementations of AWT.  If a particular implementation doesn't
 support tear-off menus, this value is silently ignored.
 @param       label the menu's label in the menu bar, or in
                   another menu of which this menu is a submenu.
 @param       tearOff   if <code>true</code>, the menu
                   is a tear-off menu.
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
 returns true.
 @see java.awt.GraphicsEnvironment#isHeadless
 @since       JDK1.0.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Menu.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the menu's peer.  The peer allows us to modify the
 appearance of the menu without changing its functionality.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Menu.removeNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the menu's peer.  The peer allows us to modify the appearance
 of the menu without changing its functionality.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Menu.isTearOff()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates whether this menu is a tear-off menu.
 <p>
 Tear-off functionality may not be supported by all
 implementations of AWT.  If a particular implementation doesn't
 support tear-off menus, this value is silently ignored.
 @return      <code>true</code> if this is a tear-off menu;
                         <code>false</code> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Menu.getItemCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the number of items in this menu.
 @return     the number of items in this menu.
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Menu.countItems()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated As of JDK version 1.1,
 replaced by <code>getItemCount()</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuItem java.awt.Menu.getItem(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the item located at the specified index of this menu.
 @param     index the position of the item to be returned.
 @return    the item located at the specified index.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuItem java.awt.Menu.add(MenuItem mi)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified menu item to this menu. If the
 menu item has been part of another menu, removes it
 from that menu.

 @param       mi   the menu item to be added
 @return      the menu item added
 @see         java.awt.Menu#insert(java.lang.String, int)
 @see         java.awt.Menu#insert(java.awt.MenuItem, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Menu.add(String label)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds an item with the specified label to this menu.

 @param       label   the text on the item
 @see         java.awt.Menu#insert(java.lang.String, int)
 @see         java.awt.Menu#insert(java.awt.MenuItem, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Menu.insert(MenuItem menuitem, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts a menu item into this menu
 at the specified position.

 @param         menuitem  the menu item to be inserted.
 @param         index     the position at which the menu
                          item should be inserted.
 @see           java.awt.Menu#add(java.lang.String)
 @see           java.awt.Menu#add(java.awt.MenuItem)
 @exception     IllegalArgumentException if the value of
                    <code>index</code> is less than zero
 @since         JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Menu.insert(String label, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts a menu item with the specified label into this menu
 at the specified position.  This is a convenience method for
 <code>insert(menuItem, index)</code>.

 @param       label the text on the item
 @param       index the position at which the menu item
                      should be inserted
 @see         java.awt.Menu#add(java.lang.String)
 @see         java.awt.Menu#add(java.awt.MenuItem)
 @exception     IllegalArgumentException if the value of
                    <code>index</code> is less than zero
 @since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Menu.addSeparator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a separator line, or a hypen, to the menu at the current position.
 @see         java.awt.Menu#insertSeparator(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Menu.insertSeparator(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts a separator at the specified position.
 @param       index the position at which the
                       menu separator should be inserted.
 @exception   IllegalArgumentException if the value of
                       <code>index</code> is less than 0.
 @see         java.awt.Menu#addSeparator
 @since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Menu.remove(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the menu item at the specified index from this menu.
 @param       index the position of the item to be removed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Menu.remove(MenuComponent item)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified menu item from this menu.
 @param  item the item to be removed from the menu. 
         If <code>item</code> is <code>null</code> 
         or is not in this menu, this method does 
         nothing. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.Menu.removeAll()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all items from this menu.
 @since       JDK1.0.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.Menu.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representing the state of this <code>Menu</code>.
 This method is intended to be used only for debugging purposes, and the 
 content and format of the returned string may vary between 
 implementations. The returned string may be empty but may not be 
 <code>null</code>.
 
 @return the parameter string of this menu

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.Menu.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleContext associated with this Menu. 
 For menus, the AccessibleContext takes the form of an 
 AccessibleAWTMenu. 
 A new AccessibleAWTMenu instance is created if necessary.

 @return an AccessibleAWTMenu that serves as the 
         AccessibleContext of this Menu
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.Menu.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException, java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads the <code>ObjectInputStream</code>.
 Unrecognized keys or values will be ignored.

 @param s the <code>ObjectInputStream</code> to read
 @exception HeadlessException if
   <code>GraphicsEnvironment.isHeadless</code> returns
   <code>true</code>
 @see java.awt.GraphicsEnvironment#isHeadless
 @see #writeObject(ObjectOutputStream)

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.Menu.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes default serializable fields to stream.

 @param s the <code>ObjectOutputStream</code> to write
 @see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)
 @see #readObject(ObjectInputStream)

<!-- END DATA -->
