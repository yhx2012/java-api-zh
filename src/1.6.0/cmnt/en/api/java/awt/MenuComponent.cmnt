<!-- BEGIN KEY -->
public abstract class java.awt.MenuComponent extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 The abstract class <code>MenuComponent</code> is the superclass 
 of all menu-related components. In this respect, the class
 <code>MenuComponent</code> is analogous to the abstract superclass
 <code>Component</code> for AWT components.
 <p>
 Menu components receive and process AWT events, just as components do,
 through the method <code>processEvent</code>.

 @version 	1.81, 06/01/06
 @author 	Arthur van Hoff
 @since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.Font java.awt.MenuComponent.font
<!-- END KEY -->
<!-- BEGIN DATA -->
 The menu component's font. This value can be 
 <code>null</code> at which point a default will be used.
 This defaults to <code>null</code>.

 @serial
 @see #setFont(Font)
 @see #getFont()

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.awt.MenuComponent.name
<!-- END KEY -->
<!-- BEGIN DATA -->
 The menu component's name, which defaults to <code>null</code>.
 @serial
 @see #getName()
 @see #setName(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
private boolean java.awt.MenuComponent.nameExplicitlySet
<!-- END KEY -->
<!-- BEGIN DATA -->
 A variable to indicate whether a name is explicitly set.
 If <code>true</code> the name will be set explicitly. 
 This defaults to <code>false</code>.
 @serial
 @see #setName(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean java.awt.MenuComponent.newEventsOnly
<!-- END KEY -->
<!-- BEGIN DATA -->
 Defaults to <code>false</code>.
 @serial
 @see #dispatchEvent(AWTEvent)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuComponent() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>MenuComponent</code>.
 @exception HeadlessException if
    <code>GraphicsEnvironment.isHeadless</code>
    returns <code>true</code>
 @see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.MenuComponent.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the name of the menu component.
 @return        the name of the menu component
 @see           java.awt.MenuComponent#setName(java.lang.String)
 @since         JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.setName(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the name of the component to the specified string.
 @param         name    the name of the menu component
 @see           java.awt.MenuComponent#getName
 @since         JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuContainer java.awt.MenuComponent.getParent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the parent container for this menu component.
 @return    the menu component containing this menu component, 
                 or <code>null</code> if this menu component 
                 is the outermost component, the menu bar itself

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.peer.MenuComponentPeer java.awt.MenuComponent.getPeer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated As of JDK version 1.1,
 programs should not directly manipulate peers.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Font java.awt.MenuComponent.getFont()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the font used for this menu component.
 @return   the font used in this menu component, if there is one; 
                  <code>null</code> otherwise
 @see     java.awt.MenuComponent#setFont

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.setFont(Font f)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the font to be used for this menu component to the specified 
 font. This font is also used by all subcomponents of this menu 
 component, unless those subcomponents specify a different font. 
 <p>
 Some platforms may not support setting of all font attributes 
 of a menu component; in such cases, calling <code>setFont</code>
 will have no effect on the unsupported font attributes of this 
 menu component.  Unless subcomponents of this menu component 
 specify a different font, this font will be used by those 
 subcomponents if supported by the underlying platform.  

 @param     f   the font to be set
 @see       #getFont
 @see       Font#getAttributes
 @see       java.awt.font.TextAttribute

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuComponent.removeNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the menu component's peer.  The peer allows us to modify the
 appearance of the menu component without changing the functionality of
 the menu component.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.MenuComponent.postEvent(Event evt)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Posts the specified event to the menu.
 This method is part of the Java&nbsp;1.0 event system
 and it is maintained only for backwards compatibility.
 Its use is discouraged, and it may not be supported
 in the future.
 @param evt the event which is to take place
 @deprecated As of JDK version 1.1, replaced by {@link
 #dispatchEvent(AWTEvent) dispatchEvent}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.awt.MenuComponent.dispatchEvent(AWTEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Delivers an event to this component or one of its sub components.
 @param e the event

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.MenuComponent.processEvent(AWTEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Processes events occurring on this menu component.  
 <p>Note that if the event parameter is <code>null</code>
 the behavior is unspecified and may result in an
 exception.

 @param e the event
 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.awt.MenuComponent.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representing the state of this
 <code>MenuComponent</code>. This method is intended to be used
 only for debugging purposes, and the content and format of the
 returned string may vary between implementations. The returned
 string may be empty but may not be <code>null</code>.

 @return     the parameter string of this menu component

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.MenuComponent.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a representation of this menu component as a string. 
 @return  a string representation of this menu component

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.lang.Object java.awt.MenuComponent.getTreeLock()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets this component's locking object (the object that owns the thread 
 sychronization monitor) for AWT component-tree and layout
 operations.
 @return this component's locking object

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.MenuComponent.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>AccessibleContext</code> associated with 
 this <code>MenuComponent</code>.

 The method implemented by this base class returns <code>null</code>.
 Classes that extend <code>MenuComponent</code>
 should implement this method to return the 
 <code>AccessibleContext</code> associated with the subclass.

 @return the <code>AccessibleContext</code> of this
     <code>MenuComponent</code>
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.MenuComponent.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads the menu component from an object input stream.

 @param s the <code>ObjectInputStream</code> to read
 @exception HeadlessException if
   <code>GraphicsEnvironment.isHeadless</code> returns
   <code>true</code>
 @serial
 @see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
