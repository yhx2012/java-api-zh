<!-- BEGIN KEY -->
public class java.awt.MenuBar extends java.awt.MenuComponent implements java.awt.MenuContainer, javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>MenuBar</code> class encapsulates the platform's
 concept of a menu bar bound to a frame. In order to associate
 the menu bar with a <code>Frame</code> object, call the
 frame's <code>setMenuBar</code> method.
 <p>
 <A NAME="mbexample"></A><!-- target for cross references -->
 This is what a menu bar might look like:
 <p>
 <img src="doc-files/MenuBar-1.gif"
 <alt="Diagram of MenuBar containing 2 menus: Examples and Options.
 Examples menu is expanded showing items: Basic, Simple, Check, and More Examples."
 ALIGN=center HSPACE=10 VSPACE=7>
 <p>
 A menu bar handles keyboard shortcuts for menu items, passing them
 along to its child menus.
 (Keyboard shortcuts, which are optional, provide the user with
 an alternative to the mouse for invoking a menu item and the
 action that is associated with it.)
 Each menu item can maintain an instance of <code>MenuShortcut</code>.
 The <code>MenuBar</code> class defines several methods,
 {@link MenuBar#shortcuts} and
 {@link MenuBar#getShortcutMenuItem}
 that retrieve information about the shortcuts a given
 menu bar is managing.

 @version 1.72, 04/18/06
 @author Sami Shaio
 @see        java.awt.Frame
 @see        java.awt.Frame#setMenuBar(java.awt.MenuBar)
 @see        java.awt.Menu
 @see        java.awt.MenuItem
 @see        java.awt.MenuShortcut
 @since      JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.util.Vector java.awt.MenuBar.menus
<!-- END KEY -->
<!-- BEGIN DATA -->
 This field represents a vector of the
 actual menus that will be part of the MenuBar.

 @serial
 @see #countMenus()

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.awt.Menu java.awt.MenuBar.helpMenu
<!-- END KEY -->
<!-- BEGIN DATA -->
 This menu is a special menu dedicated to
 help.  The one thing to note about this menu
 is that on some platforms it appears at the
 right edge of the menubar.

 @serial
 @see #getHelpMenu()
 @see #setHelpMenu(Menu)

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.MenuBar.menuBarSerializedDataVersion
<!-- END KEY -->
<!-- BEGIN DATA -->
 The MenuBar's serialized data version.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuBar() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new menu bar.
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
 returns true.
 @see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuBar.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the menu bar's peer.  The peer allows us to change the
 appearance of the menu bar without changing any of the menu bar's
 functionality.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuBar.removeNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the menu bar's peer.  The peer allows us to change the
 appearance of the menu bar without changing any of the menu bar's
 functionality.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Menu java.awt.MenuBar.getHelpMenu()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the help menu on the menu bar.
 @return    the help menu on this menu bar.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuBar.setHelpMenu(Menu m)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the specified menu to be this menu bar's help menu.
 If this menu bar has an existing help menu, the old help menu is
 removed from the menu bar, and replaced with the specified menu.
 @param m    the menu to be set as the help menu

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Menu java.awt.MenuBar.add(Menu m)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified menu to the menu bar.
 If the menu has been part of another menu bar,
 removes it from that menu bar.

 @param        m   the menu to be added
 @return       the menu added
 @see          java.awt.MenuBar#remove(int)
 @see          java.awt.MenuBar#remove(java.awt.MenuComponent)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuBar.remove(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the menu located at the specified
 index from this menu bar.
 @param        index   the position of the menu to be removed.
 @see          java.awt.MenuBar#add(java.awt.Menu)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuBar.remove(MenuComponent m)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified menu component from this menu bar.
 @param        m the menu component to be removed.
 @see          java.awt.MenuBar#add(java.awt.Menu)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.MenuBar.getMenuCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the number of menus on the menu bar.
 @return     the number of menus on the menu bar.
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.MenuBar.countMenus()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated As of JDK version 1.1,
 replaced by <code>getMenuCount()</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Menu java.awt.MenuBar.getMenu(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the specified menu.
 @param      i the index position of the menu to be returned.
 @return     the menu at the specified index of this menu bar.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.util.Enumeration<java.awt.MenuShortcut> java.awt.MenuBar.shortcuts()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets an enumeration of all menu shortcuts this menu bar
 is managing.
 @return      an enumeration of menu shortcuts that this
                      menu bar is managing.
 @see         java.awt.MenuShortcut
 @since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.MenuItem java.awt.MenuBar.getShortcutMenuItem(MenuShortcut s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the instance of <code>MenuItem</code> associated
 with the specified <code>MenuShortcut</code> object,
 or <code>null</code> if none of the menu items being managed
 by this menu bar is associated with the specified menu
 shortcut.
 @param        s the specified menu shortcut.
 @see          java.awt.MenuItem
 @see          java.awt.MenuShortcut
 @since        JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.MenuBar.deleteShortcut(MenuShortcut s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Deletes the specified menu shortcut.
 @param     s the menu shortcut to delete.
 @since     JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.MenuBar.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the AccessibleContext associated with this MenuBar. 
 For menu bars, the AccessibleContext takes the form of an 
 AccessibleAWTMenuBar. 
 A new AccessibleAWTMenuBar instance is created if necessary.

 @return an AccessibleAWTMenuBar that serves as the 
         AccessibleContext of this MenuBar
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.MenuBar.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads the <code>ObjectInputStream</code>.
 Unrecognized keys or values will be ignored.

 @param s the <code>ObjectInputStream</code> to read
 @exception HeadlessException if
   <code>GraphicsEnvironment.isHeadless</code> returns
   <code>true</code>
 @see java.awt.GraphicsEnvironment#isHeadless
 @see #writeObject(java.io.ObjectOutputStream)

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.MenuBar.writeObject(ObjectOutputStream s) throws java.lang.ClassNotFoundException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes default serializable fields to stream.

 @param s the <code>ObjectOutputStream</code> to write
 @see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)
 @see #readObject(java.io.ObjectInputStream)

<!-- END DATA -->
