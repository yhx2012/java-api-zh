<!-- BEGIN KEY -->
public class java.awt.Color extends java.lang.Object implements java.awt.Paint, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>Color</code> class is used to encapsulate colors in the default
 sRGB color space or colors in arbitrary color spaces identified by a
 {@link ColorSpace}.  Every color has an implicit alpha value of 1.0 or
 an explicit one provided in the constructor.  The alpha value
 defines the transparency of a color and can be represented by
 a float value in the range 0.0&nbsp;-&nbsp;1.0 or 0&nbsp;-&nbsp;255.
 An alpha value of 1.0 or 255 means that the color is completely
 opaque and an alpha value of 0 or 0.0 means that the color is 
 completely transparent.
 When constructing a <code>Color</code> with an explicit alpha or
 getting the color/alpha components of a <code>Color</code>, the color
 components are never premultiplied by the alpha component.
 <p>
 The default color space for the Java 2D(tm) API is sRGB, a proposed
 standard RGB color space.  For further information on sRGB,
 see <A href="http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html">
 http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html
 </A>.
 <p>
 @version 	10 Feb 1997
 @author 	Sami Shaio
 @author 	Arthur van Hoff
 @see		ColorSpace
 @see         AlphaComposite

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.white
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color white.  In the default sRGB space.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.WHITE
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color white.  In the default sRGB space.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.lightGray
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color light gray.  In the default sRGB space.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.LIGHT_GRAY
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color light gray.  In the default sRGB space.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.gray
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color gray.  In the default sRGB space.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.GRAY
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color gray.  In the default sRGB space.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.darkGray
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color dark gray.  In the default sRGB space.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.DARK_GRAY
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color dark gray.  In the default sRGB space.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.black
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color black.  In the default sRGB space.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.BLACK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color black.  In the default sRGB space.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.red
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color red.  In the default sRGB space.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.RED
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color red.  In the default sRGB space.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.pink
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color pink.  In the default sRGB space.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.PINK
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color pink.  In the default sRGB space.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.orange
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color orange.  In the default sRGB space.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.ORANGE
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color orange.  In the default sRGB space.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.yellow
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color yellow.  In the default sRGB space.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.YELLOW
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color yellow.  In the default sRGB space.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.green
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color green.  In the default sRGB space.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.GREEN
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color green.  In the default sRGB space.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.magenta
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color magenta.  In the default sRGB space.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.MAGENTA
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color magenta.  In the default sRGB space.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.cyan
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color cyan.  In the default sRGB space.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.CYAN
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color cyan.  In the default sRGB space.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.blue
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color blue.  In the default sRGB space.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.awt.Color java.awt.Color.BLUE
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color blue.  In the default sRGB space.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.Color.value
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color value.
 @serial
 @see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
private float[] java.awt.Color.frgbvalue
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color value in the default sRGB <code>ColorSpace</code> as
 <code>float</code> components (no alpha).
 If <code>null</code> after object construction, this must be an
 sRGB color constructed with 8-bit precision, so compute from the
 <code>int</code> color value. 
 @serial
 @see #getRGBColorComponents
 @see #getRGBComponents

<!-- END DATA -->
<!-- BEGIN KEY -->
private float[] java.awt.Color.fvalue
<!-- END KEY -->
<!-- BEGIN DATA -->
 The color value in the native <code>ColorSpace</code> as
 <code>float</code> components (no alpha).
 If <code>null</code> after object construction, this must be an
 sRGB color constructed with 8-bit precision, so compute from the
 <code>int</code> color value. 
 @serial
 @see #getRGBColorComponents
 @see #getRGBComponents  

<!-- END DATA -->
<!-- BEGIN KEY -->
private float java.awt.Color.falpha
<!-- END KEY -->
<!-- BEGIN DATA -->
 The alpha value as a <code>float</code> component.
 If <code>frgbvalue</code> is <code>null</code>, this is not valid
 data, so compute from the <code>int</code> color value.
 @serial
 @see #getRGBComponents
 @see #getComponents

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.awt.color.ColorSpace java.awt.Color.cs
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>ColorSpace</code>.  If <code>null</code>, then it's
 default is sRGB.
 @serial
 @see #getColor
 @see #getColorSpace
 @see #getColorComponents

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color(int r, int g, int b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an opaque sRGB color with the specified red, green, 
 and blue values in the range (0 - 255).  
 The actual color used in rendering depends
 on finding the best match given the color space 
 available for a given output device.  
 Alpha is defaulted to 255.

 @throws IllegalArgumentException if <code>r</code>, <code>g</code>
        or <code>b</code> are outside of the range
        0 to 255, inclusive
 @param r the red component
 @param g the green component
 @param b the blue component
 @see #getRed
 @see #getGreen
 @see #getBlue
 @see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color(int r, int g, int b, int a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an sRGB color with the specified red, green, blue, and alpha
 values in the range (0 - 255).

 @throws IllegalArgumentException if <code>r</code>, <code>g</code>,
        <code>b</code> or <code>a</code> are outside of the range
        0 to 255, inclusive
 @param r the red component
 @param g the green component
 @param b the blue component
 @param a the alpha component
 @see #getRed
 @see #getGreen
 @see #getBlue
 @see #getAlpha
 @see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color(int rgb)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an opaque sRGB color with the specified combined RGB value
 consisting of the red component in bits 16-23, the green component
 in bits 8-15, and the blue component in bits 0-7.  The actual color
 used in rendering depends on finding the best match given the
 color space available for a particular output device.  Alpha is
 defaulted to 255.

 @param rgb the combined RGB components
 @see java.awt.image.ColorModel#getRGBdefault
 @see #getRed
 @see #getGreen
 @see #getBlue
 @see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color(int rgba, boolean hasalpha)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an sRGB color with the specified combined RGBA value consisting
 of the alpha component in bits 24-31, the red component in bits 16-23,
 the green component in bits 8-15, and the blue component in bits 0-7.
 If the <code>hasalpha</code> argument is <code>false</code>, alpha
 is defaulted to 255.

 @param rgba the combined RGBA components
 @param hasalpha <code>true</code> if the alpha bits are valid;
        <code>false</code> otherwise
 @see java.awt.image.ColorModel#getRGBdefault
 @see #getRed
 @see #getGreen
 @see #getBlue
 @see #getAlpha
 @see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color(float r, float g, float b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an opaque sRGB color with the specified red, green, and blue
 values in the range (0.0 - 1.0).  Alpha is defaulted to 1.0.  The
 actual color used in rendering depends on finding the best
 match given the color space available for a particular output
 device.

 @throws IllegalArgumentException if <code>r</code>, <code>g</code>
        or <code>b</code> are outside of the range
        0.0 to 1.0, inclusive
 @param r the red component
 @param g the green component
 @param b the blue component
 @see #getRed
 @see #getGreen
 @see #getBlue
 @see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color(float r, float g, float b, float a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an sRGB color with the specified red, green, blue, and
 alpha values in the range (0.0 - 1.0).  The actual color
 used in rendering depends on finding the best match given the
 color space available for a particular output device.
 @throws IllegalArgumentException if <code>r</code>, <code>g</code>
        <code>b</code> or <code>a</code> are outside of the range
        0.0 to 1.0, inclusive
 @param r the red component
 @param g the green component
 @param b the blue component
 @param a the alpha component
 @see #getRed
 @see #getGreen
 @see #getBlue
 @see #getAlpha
 @see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color(ColorSpace cspace, float[] components, float alpha)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a color in the specified <code>ColorSpace</code>
 with the color components specified in the <code>float</code>
 array and the specified alpha.  The number of components is
 determined by the type of the <code>ColorSpace</code>.  For 
 example, RGB requires 3 components, but CMYK requires 4 
 components.
 @param cspace the <code>ColorSpace</code> to be used to
			interpret the components
 @param components an arbitrary number of color components
                      that is compatible with the <code>ColorSpace</code>
 @param alpha alpha value
 @throws IllegalArgumentException if any of the values in the 
         <code>components</code> array or <code>alpha</code> is 
         outside of the range 0.0 to 1.0
 @see #getComponents
 @see #getColorComponents

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Color.getRed()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the red component in the range 0-255 in the default sRGB
 space.
 @return the red component.
 @see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Color.getGreen()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the green component in the range 0-255 in the default sRGB
 space.
 @return the green component.
 @see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Color.getBlue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the blue component in the range 0-255 in the default sRGB
 space.
 @return the blue component.
 @see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Color.getAlpha()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the alpha component in the range 0-255.
 @return the alpha component.
 @see #getRGB

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Color.getRGB()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the RGB value representing the color in the default sRGB
 {@link ColorModel}.
 (Bits 24-31 are alpha, 16-23 are red, 8-15 are green, 0-7 are
 blue).
 @return the RGB value of the color in the default sRGB
         <code>ColorModel</code>.
 @see java.awt.image.ColorModel#getRGBdefault
 @see #getRed
 @see #getGreen
 @see #getBlue
 @since JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color java.awt.Color.brighter()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <code>Color</code> that is a brighter version of this
 <code>Color</code>.
 <p>
 This method applies an arbitrary scale factor to each of the three RGB 
 components of this <code>Color</code> to create a brighter version
 of this <code>Color</code>. Although <code>brighter</code> and
 <code>darker</code> are inverse operations, the results of a
 series of invocations of these two methods might be inconsistent
 because of rounding errors. 
 @return     a new <code>Color</code> object that is  
                 a brighter version of this <code>Color</code>.
 @see        java.awt.Color#darker
 @since      JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Color java.awt.Color.darker()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <code>Color</code> that is a darker version of this
 <code>Color</code>.
 <p>
 This method applies an arbitrary scale factor to each of the three RGB 
 components of this <code>Color</code> to create a darker version of
 this <code>Color</code>.  Although <code>brighter</code> and
 <code>darker</code> are inverse operations, the results of a series 
 of invocations of these two methods might be inconsistent because
 of rounding errors. 
 @return  a new <code>Color</code> object that is 
                    a darker version of this <code>Color</code>.
 @see        java.awt.Color#brighter
 @since      JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Color.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Computes the hash code for this <code>Color</code>.
 @return     a hash code value for this object.
 @since      JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.Color.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines whether another object is equal to this 
 <code>Color</code>.
 <p>
 The result is <code>true</code> if and only if the argument is not 
 <code>null</code> and is a <code>Color</code> object that has the same 
 red, green, blue, and alpha values as this object. 
 @param       obj   the object to test for equality with this
				<code>Color</code>
 @return      <code>true</code> if the objects are the same; 
                             <code>false</code> otherwise.
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.Color.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this <code>Color</code>. This
 method is intended to be used only for debugging purposes.  The 
 content and format of the returned string might vary between 
 implementations. The returned string might be empty but cannot 
 be <code>null</code>.
 
 @return  a string representation of this <code>Color</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Color java.awt.Color.decode(String nm) throws java.lang.NumberFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Converts a <code>String</code> to an integer and returns the 
 specified opaque <code>Color</code>. This method handles string
 formats that are used to represent octal and hexidecimal numbers.
 @param      nm a <code>String</code> that represents 
                            an opaque color as a 24-bit integer
 @return     the new <code>Color</code> object.
 @see        java.lang.Integer#decode
 @exception  NumberFormatException  if the specified string cannot
                      be interpreted as a decimal, 
                      octal, or hexidecimal integer.
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Color java.awt.Color.getColor(String nm)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Finds a color in the system properties. 
 <p>
 The argument is treated as the name of a system property to 
 be obtained. The string value of this property is then interpreted 
 as an integer which is then converted to a <code>Color</code>
 object. 
 <p>
 If the specified property is not found or could not be parsed as 
 an integer then <code>null</code> is returned. 
 @param    nm the name of the color property
 @return   the <code>Color</code> converted from the system 
 		property.
 @see      java.lang.System#getProperty(java.lang.String)
 @see      java.lang.Integer#getInteger(java.lang.String)
 @see      java.awt.Color#Color(int)
 @since    JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Color java.awt.Color.getColor(String nm, Color v)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Finds a color in the system properties. 
 <p>
 The first argument is treated as the name of a system property to 
 be obtained. The string value of this property is then interpreted 
 as an integer which is then converted to a <code>Color</code>
 object. 
 <p>
 If the specified property is not found or cannot be parsed as 
 an integer then the <code>Color</code> specified by the second
 argument is returned instead. 
 @param    nm the name of the color property
 @param    v    the default <code>Color</code>
 @return   the <code>Color</code> converted from the system
		property, or the specified <code>Color</code>.
 @see      java.lang.System#getProperty(java.lang.String)
 @see      java.lang.Integer#getInteger(java.lang.String)
 @see      java.awt.Color#Color(int)
 @since    JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Color java.awt.Color.getColor(String nm, int v)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Finds a color in the system properties. 
 <p>
 The first argument is treated as the name of a system property to 
 be obtained. The string value of this property is then interpreted 
 as an integer which is then converted to a <code>Color</code>
 object. 
 <p>
 If the specified property is not found or could not be parsed as 
 an integer then the integer value <code>v</code> is used instead, 
 and is converted to a <code>Color</code> object.
 @param    nm  the name of the color property
 @param    v   the default color value, as an integer
 @return   the <code>Color</code> converted from the system
		property or the <code>Color</code> converted from
		the specified integer.
 @see      java.lang.System#getProperty(java.lang.String)
 @see      java.lang.Integer#getInteger(java.lang.String)
 @see      java.awt.Color#Color(int)
 @since    JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.awt.Color.HSBtoRGB(float hue, float saturation, float brightness)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Converts the components of a color, as specified by the HSB 
 model, to an equivalent set of values for the default RGB model. 
 <p>
 The <code>saturation</code> and <code>brightness</code> components
 should be floating-point values between zero and one
 (numbers in the range 0.0-1.0).  The <code>hue</code> component
 can be any floating-point number.  The floor of this number is
 subtracted from it to create a fraction between 0 and 1.  This
 fractional number is then multiplied by 360 to produce the hue
 angle in the HSB color model.
 <p>
 The integer that is returned by <code>HSBtoRGB</code> encodes the 
 value of a color in bits 0-23 of an integer value that is the same 
 format used by the method {@link #getRGB() <code>getRGB</code>}.
 This integer can be supplied as an argument to the
 <code>Color</code> constructor that takes a single integer argument. 
 @param     hue   the hue component of the color
 @param     saturation   the saturation of the color
 @param     brightness   the brightness of the color
 @return    the RGB value of the color with the indicated hue, 
                            saturation, and brightness.
 @see       java.awt.Color#getRGB()
 @see       java.awt.Color#Color(int)
 @see       java.awt.image.ColorModel#getRGBdefault()
 @since     JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static float[] java.awt.Color.RGBtoHSB(int r, int g, int b, float[] hsbvals)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Converts the components of a color, as specified by the default RGB 
 model, to an equivalent set of values for hue, saturation, and 
 brightness that are the three components of the HSB model. 
 <p>
 If the <code>hsbvals</code> argument is <code>null</code>, then a 
 new array is allocated to return the result. Otherwise, the method 
 returns the array <code>hsbvals</code>, with the values put into 
 that array. 
 @param     r   the red component of the color
 @param     g   the green component of the color
 @param     b   the blue component of the color
 @param     hsbvals  the array used to return the 
                     three HSB values, or <code>null</code>
 @return    an array of three elements containing the hue, saturation, 
                     and brightness (in that order), of the color with 
                     the indicated red, green, and blue components.
 @see       java.awt.Color#getRGB()
 @see       java.awt.Color#Color(int)
 @see       java.awt.image.ColorModel#getRGBdefault()
 @since     JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.Color java.awt.Color.getHSBColor(float h, float s, float b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>Color</code> object based on the specified values 
 for the HSB color model. 
 <p>
 The <code>s</code> and <code>b</code> components should be
 floating-point values between zero and one 
 (numbers in the range 0.0-1.0).  The <code>h</code> component 
 can be any floating-point number.  The floor of this number is 
 subtracted from it to create a fraction between 0 and 1.  This 
 fractional number is then multiplied by 360 to produce the hue
 angle in the HSB color model.
 @param  h   the hue component
 @param  s   the saturation of the color
 @param  b   the brightness of the color
 @return  a <code>Color</code> object with the specified hue, 
                                 saturation, and brightness.
 @since   JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[] java.awt.Color.getRGBComponents(float[] compArray)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>float</code> array containing the color and alpha
 components of the <code>Color</code>, as represented in the default
 sRGB color space.
 If <code>compArray</code> is <code>null</code>, an array of length
 4 is created for the return value.  Otherwise, 
 <code>compArray</code> must have length 4 or greater,
 and it is filled in with the components and returned.
 @param compArray an array that this method fills with 
			color and alpha components and returns
 @return the RGBA components in a <code>float</code> array.

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[] java.awt.Color.getRGBColorComponents(float[] compArray)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>float</code> array containing only the color
 components of the <code>Color</code>, in the default sRGB color
 space.  If <code>compArray</code> is <code>null</code>, an array of
 length 3 is created for the return value.  Otherwise,
 <code>compArray</code> must have length 3 or greater, and it is
 filled in with the components and returned.
 @param compArray an array that this method fills with color 
		components and returns
 @return the RGB components in a <code>float</code> array.

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[] java.awt.Color.getComponents(float[] compArray)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>float</code> array containing the color and alpha
 components of the <code>Color</code>, in the
 <code>ColorSpace</code> of the <code>Color</code>.
 If <code>compArray</code> is <code>null</code>, an array with
 length equal to the number of components in the associated
 <code>ColorSpace</code> plus one is created for
 the return value.  Otherwise, <code>compArray</code> must have at
 least this length and it is filled in with the components and
 returned.
 @param compArray an array that this method fills with the color and
		alpha components of this <code>Color</code> in its
		<code>ColorSpace</code> and returns
 @return the color and alpha components in a <code>float</code> 
 		array.

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[] java.awt.Color.getColorComponents(float[] compArray)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>float</code> array containing only the color
 components of the <code>Color</code>, in the
 <code>ColorSpace</code> of the <code>Color</code>.
 If <code>compArray</code> is <code>null</code>, an array with
 length equal to the number of components in the associated
 <code>ColorSpace</code> is created for
 the return value.  Otherwise, <code>compArray</code> must have at
 least this length and it is filled in with the components and
 returned.
 @param compArray an array that this method fills with the color
		components of this <code>Color</code> in its
		<code>ColorSpace</code> and returns
 @return the color components in a <code>float</code> array.

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[] java.awt.Color.getComponents(ColorSpace cspace, float[] compArray)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>float</code> array containing the color and alpha
 components of the <code>Color</code>, in the 
 <code>ColorSpace</code> specified by the <code>cspace</code> 
 parameter.  If <code>compArray</code> is <code>null</code>, an
 array with length equal to the number of components in 
 <code>cspace</code> plus one is created for the return value.
 Otherwise, <code>compArray</code> must have at least this
 length, and it is filled in with the components and returned.
 @param cspace a specified <code>ColorSpace</code>
 @param compArray an array that this method fills with the
		color and alpha components of this <code>Color</code> in
		the specified <code>ColorSpace</code> and returns
 @return the color and alpha components in a <code>float</code> 
 		array.

<!-- END DATA -->
<!-- BEGIN KEY -->
public float[] java.awt.Color.getColorComponents(ColorSpace cspace, float[] compArray)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>float</code> array containing only the color
 components of the <code>Color</code> in the 
 <code>ColorSpace</code> specified by the <code>cspace</code> 
 parameter. If <code>compArray</code> is <code>null</code>, an array
 with length equal to the number of components in 
 <code>cspace</code> is created for the return value.  Otherwise,
 <code>compArray</code> must have at least this length, and it is
 filled in with the components and returned.
 @param cspace a specified <code>ColorSpace</code>
 @param compArray an array that this method fills with the color
		components of this <code>Color</code> in the specified
 		<code>ColorSpace</code>
 @return the color components in a <code>float</code> array.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.color.ColorSpace java.awt.Color.getColorSpace()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>ColorSpace</code> of this <code>Color</code>.
 @return this <code>Color</code> object's <code>ColorSpace</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.PaintContext java.awt.Color.createContext(ColorModel cm, Rectangle r, Rectangle2D r2d, AffineTransform xform, RenderingHints hints)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates and returns a {@link PaintContext} used to generate a solid
 color pattern.  This enables a <code>Color</code> object to be used
 as an argument to any method requiring an object implementing the
 {@link Paint} interface.
 The same <code>PaintContext</code> is returned, regardless of
 whether or not <code>r</code>, <code>r2d</code>,
 <code>xform</code>, or <code>hints</code> are <code>null</code>.
 @param cm the specified <code>ColorModel</code>
 @param r the specified {@link Rectangle}
 @param r2d the specified {@link Rectangle2D}
 @param xform the specified {@link AffineTransform}
 @param hints the specified {@link RenderingHints}
 @return a <code>PaintContext</code> that is used to generate a
		solid color pattern.
 @see Paint
 @see PaintContext
 @see Graphics2D#setPaint

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.Color.getTransparency()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the transparency mode for this <code>Color</code>.  This is
 required to implement the <code>Paint</code> interface.
 @return this <code>Color</code> object's transparency mode.
 @see Paint
 @see Transparency
 @see #createContext

<!-- END DATA -->
