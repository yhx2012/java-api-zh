<!-- BEGIN KEY -->
public abstract class java.awt.font.GraphicAttribute extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class is used with the CHAR_REPLACEMENT attribute.
 <p>
 The <code>GraphicAttribute</code> class represents a graphic embedded
 in text. Clients subclass this class to implement their own char
 replacement graphics.  Clients wishing to embed shapes and images in
 text need not subclass this class.  Instead, clients can use the
 {@link ShapeGraphicAttribute} and {@link ImageGraphicAttribute} 
 classes.
 <p>
 Subclasses must ensure that their objects are immutable once they
 are constructed.  Mutating a <code>GraphicAttribute</code> that
 is used in a {@link TextLayout} results in undefined behavior from the
 <code>TextLayout</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.GraphicAttribute.TOP_ALIGNMENT
<!-- END KEY -->
<!-- BEGIN DATA -->

 Aligns top of graphic to top of line. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.GraphicAttribute.BOTTOM_ALIGNMENT
<!-- END KEY -->
<!-- BEGIN DATA -->

 Aligns bottom of graphic to bottom of line. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.GraphicAttribute.ROMAN_BASELINE
<!-- END KEY -->
<!-- BEGIN DATA -->

 Aligns origin of graphic to roman baseline of line. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.GraphicAttribute.CENTER_BASELINE
<!-- END KEY -->
<!-- BEGIN DATA -->

 Aligns origin of graphic to center baseline of line. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.GraphicAttribute.HANGING_BASELINE
<!-- END KEY -->
<!-- BEGIN DATA -->

 Aligns origin of graphic to hanging baseline of line. 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.awt.font.GraphicAttribute(int alignment)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>GraphicAttribute</code>.
 Subclasses use this to define the alignment of the graphic.
 @param alignment an int representing one of the 
 <code>GraphicAttribute</code> alignment fields
 @throws IllegalArgumentException if alignment is not one of the
 five defined values.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float java.awt.font.GraphicAttribute.getAscent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the ascent of this <code>GraphicAttribute</code>.  A
 graphic can be rendered above its ascent.
 @return the ascent of this <code>GraphicAttribute</code>.
 @see #getBounds()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float java.awt.font.GraphicAttribute.getDescent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the descent of this <code>GraphicAttribute</code>.  A
 graphic can be rendered below its descent.
 @return the descent of this <code>GraphicAttribute</code>.
 @see #getBounds()

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float java.awt.font.GraphicAttribute.getAdvance()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the advance of this <code>GraphicAttribute</code>.  The
 <code>GraphicAttribute</code> object's advance is the distance
 from the point at which the graphic is rendered and the point where
 the next character or graphic is rendered.  A graphic can be
 rendered beyond its advance
 @return the advance of this <code>GraphicAttribute</code>.
 @see #getBounds()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Rectangle2D java.awt.font.GraphicAttribute.getBounds()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a {@link Rectangle2D} that encloses all of the
 bits drawn by this <code>GraphicAttribute</code> relative to the
 rendering position.
 A graphic may be rendered beyond its origin, ascent, descent,
 or advance;  but if it is, this method's implementation must
 indicate where the graphic is rendered.
 Default bounds is the rectangle (0, -ascent, advance, ascent+descent).
 @return a <code>Rectangle2D</code> that encloses all of the bits
 rendered by this <code>GraphicAttribute</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Shape java.awt.font.GraphicAttribute.getOutline(AffineTransform tx)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return a {@link java.awt.Shape} that represents the region that
 this <code>GraphicAttribute</code> renders.  This is used when a
 {@link TextLayout} is requested to return the outline of the text.
 The (untransformed) shape must not extend outside the rectangular
 bounds returned by <code>getBounds</code>.
 The default implementation returns the rectangle returned by
 {@link #getBounds}, transformed by the provided {@link AffineTransform}
 if present.
 @param tx an optional {@link AffineTransform} to apply to the
   outline of this <code>GraphicAttribute</code>. This can be null.
 @return a <code>Shape</code> representing this graphic attribute,
   suitable for stroking or filling.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.awt.font.GraphicAttribute.draw(Graphics2D graphics, float x, float y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Renders this <code>GraphicAttribute</code> at the specified 
 location.
 @param graphics the {@link Graphics2D} into which to render the
 graphic
 @param x the user-space X coordinate where the graphic is rendered
 @param y the user-space Y coordinate where the graphic is rendered

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.awt.font.GraphicAttribute.getAlignment()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the alignment of this <code>GraphicAttribute</code>.
 Alignment can be to a particular baseline, or to the absolute top
 or bottom of a line.
 @return the alignment of this <code>GraphicAttribute</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.font.GlyphJustificationInfo java.awt.font.GraphicAttribute.getJustificationInfo()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the justification information for this 
 <code>GraphicAttribute</code>.  Subclasses
 can override this method to provide different justification
 information.
 @return a {@link GlyphJustificationInfo} object that contains the
 justification information for this <code>GraphicAttribute</code>.

<!-- END DATA -->
