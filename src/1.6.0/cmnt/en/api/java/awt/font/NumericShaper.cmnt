<!-- BEGIN KEY -->
public final class java.awt.font.NumericShaper extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>NumericShaper</code> class is used to convert Latin-1 (European) 
 digits to other Unicode decimal digits.  Users of this class will
 primarily be people who wish to present data using
 national digit shapes, but find it more convenient to represent the
 data internally using Latin-1 (European) digits.  This does not
 interpret the deprecated numeric shape selector character (U+206E).
 <p>
 Instances of <code>NumericShaper</code> are typically applied 
 as attributes to text with the
 {@link TextAttribute#NUMERIC_SHAPING NUMERIC_SHAPING} attribute
 of the <code>TextAttribute</code> class.  
 For example, this code snippet causes a <code>TextLayout</code> to 
 shape European digits to Arabic in an Arabic context:<br>
 <blockquote><pre>
 Map map = new HashMap();
 map.put(TextAttribute.NUMERIC_SHAPING, 
     NumericShaper.getContextualShaper(NumericShaper.ARABIC));
 FontRenderContext frc = ...;
 TextLayout layout = new TextLayout(text, map, frc);
 layout.draw(g2d, x, y);
 </pre></blockquote>
 <br>
 It is also possible to perform numeric shaping explicitly using instances 
 of <code>NumericShaper</code>, as this code snippet demonstrates:<br>
 <blockquote><pre>
   char[] text = ...;
   // shape all EUROPEAN digits (except zero) to ARABIC digits
   NumericShaper shaper = NumericShaper.getShaper(NumericShaper.ARABIC);
   shaper.shape(text, start, count);

   // shape European digits to ARABIC digits if preceding text is Arabic, or
   // shape European digits to TAMIL digits if preceding text is Tamil, or
   // leave European digits alone if there is no preceding text, or 
   // preceding text is neither Arabic nor Tamil
   NumericShaper shaper = 
      NumericShaper.getContextualShaper(NumericShaper.ARABIC | 
                                              NumericShaper.TAMIL,
                                              NumericShaper.EUROPEAN);
   shaper.shape(text. start, count);
 </pre></blockquote>

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.EUROPEAN
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the Latin-1 (European) and extended range, and 
  Latin-1 (European) decimal base. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.ARABIC
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the ARABIC range and decimal base. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.EASTERN_ARABIC
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the ARABIC range and ARABIC_EXTENDED decimal base. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.DEVANAGARI
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the DEVANAGARI range and decimal base. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.BENGALI
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the BENGALI range and decimal base. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.GURMUKHI
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the GURMUKHI range and decimal base. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.GUJARATI
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the GUJARATI range and decimal base. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.ORIYA
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the ORIYA range and decimal base. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.TAMIL
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the TAMIL range and decimal base. Tamil does not have a 
  decimal digit 0 so Latin-1 (European) 0 is used. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.TELUGU
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the TELUGU range and decimal base. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.KANNADA
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the KANNADA range and decimal base. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.MALAYALAM
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the MALAYALAM range and decimal base. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.THAI
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the THAI range and decimal base. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.LAO
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the LAO range and decimal base. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.TIBETAN
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the TIBETAN range and decimal base. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.MYANMAR
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the MYANMAR range and decimal base. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.ETHIOPIC
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the ETHIOPIC range and decimal base. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.KHMER
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the KHMER range and decimal base. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.MONGOLIAN
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies the MONGOLIAN range and decimal base. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.awt.font.NumericShaper.ALL_RANGES
<!-- END KEY -->
<!-- BEGIN DATA -->
Identifies all ranges, for full contextual shaping. 
<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.font.NumericShaper.key
<!-- END KEY -->
<!-- BEGIN DATA -->
index of context for contextual shaping - values range from 0 to 18 
<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.font.NumericShaper.mask
<!-- END KEY -->
<!-- BEGIN DATA -->
flag indicating whether to shape contextually (high bit) and which 
  digit ranges to shape (bits 0-18) 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.font.NumericShaper java.awt.font.NumericShaper.getShaper(int singleRange)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a shaper for the provided unicode range.  All 
 Latin-1 (EUROPEAN) digits are converted 
 to the corresponding decimal unicode digits.
 @param singleRange the specified Unicode range
 @return a non-contextual numeric shaper 
 @throws IllegalArgumentException if the range is not a single range

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.font.NumericShaper java.awt.font.NumericShaper.getContextualShaper(int ranges)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a contextual shaper for the provided unicode range(s).  
 Latin-1 (EUROPEAN) digits are converted to the decimal digits 
 corresponding to the range of the preceding text, if the
 range is one of the provided ranges.  Multiple ranges are 
 represented by or-ing the values together, such as, 
 <code>NumericShaper.ARABIC | NumericShaper.THAI</code>.  The
 shaper assumes EUROPEAN as the starting context, that is, if 
 EUROPEAN digits are encountered before any strong directional 
 text in the string, the context is presumed to be EUROPEAN, and 
 so the digits will not shape.
 @param ranges the specified Unicode ranges
 @return a shaper for the specified ranges

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.awt.font.NumericShaper java.awt.font.NumericShaper.getContextualShaper(int ranges, int defaultContext)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a contextual shaper for the provided unicode range(s).  
 Latin-1 (EUROPEAN) digits will be converted to the decimal digits 
 corresponding to the range of the preceding text, if the
 range is one of the provided ranges.  Multiple ranges are 
 represented by or-ing the values together, for example, 
 <code>NumericShaper.ARABIC | NumericShaper.THAI</code>.  The
 shaper uses defaultContext as the starting context.
 @param ranges the specified Unicode ranges
 @param defaultContext the starting context, such as 
 <code>NumericShaper.EUROPEAN</code>
 @return a shaper for the specified Unicode ranges.
 @throws IllegalArgumentException if the specified
 <code>defaultContext</code> is not a single valid range.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.font.NumericShaper.shape(char[] text, int start, int count)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Converts the digits in the text that occur between start and 
 start + count.
 @param text an array of characters to convert
 @param start the index into <code>text</code> to start 
        converting
 @param count the number of characters in <code>text</code>
        to convert
 @throws IndexOutOfBoundsException if start or start + count is
        out of bounds
 @throws NullPointerException if text is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.font.NumericShaper.shape(char[] text, int start, int count, int context)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Converts the digits in the text that occur between start and 
 start + count, using the provided context.
 Context is ignored if the shaper is not a contextual shaper.
 @param text an array of characters
 @param start the index into <code>text</code> to start
        converting
 @param count the number of characters in <code>text</code>
        to convert
 @param context the context to which to convert the 
        characters, such as <code>NumericShaper.EUROPEAN</code>
 @throws IndexOutOfBoundsException if start or start + count is
        out of bounds
 @throws NullPointerException if text is null
 @throws IllegalArgumentException if this is a contextual shaper
 and the specified <code>context</code> is not a single valid
 range.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.font.NumericShaper.isContextual()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>boolean</code> indicating whether or not
 this shaper shapes contextually.
 @return <code>true</code> if this shaper is contextual; 
         <code>false</code> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.font.NumericShaper.getRanges()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an <code>int</code> that ORs together the values for
 all the ranges that will be shaped.
 <p>
 For example, to check if a shaper shapes to Arabic, you would use the 
 following:
 <blockquote>
   <code>if ((shaper.getRanges() & shaper.ARABIC) != 0) { ... </code>
 </blockquote>
 @return the values for all the ranges to be shaped.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.font.NumericShaper.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hash code for this shaper.
 @return this shaper's hash code.
 @see java.lang.Object#hashCode

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.font.NumericShaper.equals(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the specified object is an instance of 
 <code>NumericShaper</code> and shapes identically to this one.
 @param o the specified object to compare to this
          <code>NumericShaper</code>
 @return <code>true</code> if <code>o</code> is an instance
         of <code>NumericShaper</code> and shapes in the same way;
         <code>false</code> otherwise.
 @see java.lang.Object#equals(java.lang.Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.font.NumericShaper.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>String</code> that describes this shaper. This method 
 is used for debugging purposes only.
 @return a <code>String</code> describing this shaper.

<!-- END DATA -->
