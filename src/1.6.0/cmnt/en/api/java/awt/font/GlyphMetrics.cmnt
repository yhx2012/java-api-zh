<!-- BEGIN KEY -->
public final class java.awt.font.GlyphMetrics extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>GlyphMetrics</code> class represents infomation for a
 single glyph.   A glyph is the visual representation of one or more
 characters.  Many different glyphs can be used to represent a single
 character or combination of characters.  <code>GlyphMetrics</code>
 instances are produced by {@link java.awt.Font Font} and are applicable 
 to a specific glyph in a particular <code>Font</code>.
 <p>
 Glyphs are either STANDARD, LIGATURE, COMBINING, or COMPONENT.
 <ul>
 <li>STANDARD glyphs are commonly used to represent single characters.
 <li>LIGATURE glyphs are used to represent sequences of characters.
 <li>COMPONENT glyphs in a {@link GlyphVector} do not correspond to a
 particular character in a text model. Instead, COMPONENT glyphs are
 added for typographical reasons, such as Arabic justification.
 <li>COMBINING glyphs embellish STANDARD or LIGATURE glyphs, such
 as accent marks.  Carets do not appear before COMBINING glyphs.
 </ul>
 <p>
 Other metrics available through <code>GlyphMetrics</code> are the
 components of the advance, the visual bounds, and the left and right
 side bearings.
 <p>
 Glyphs for a rotated font, or obtained from a <code>GlyphVector</code>
 which has applied a rotation to the glyph, can have advances that
 contain both X and Y components.  Usually the advance only has one
 component.
 <p>
 The advance of a glyph is the distance from the glyph's origin to the
 origin of the next glyph along the baseline, which is either vertical
 or horizontal.  Note that, in a <code>GlyphVector</code>, 
 the distance from a glyph to its following glyph might not be the 
 glyph's advance, because of kerning or other positioning adjustments.  
 <p>
 The bounds is the smallest rectangle that completely contains the
 outline of the glyph.  The bounds rectangle is relative to the
 glyph's origin.  The left-side bearing is the distance from the glyph
 origin to the left of its bounds rectangle. If the left-side bearing is
 negative, part of the glyph is drawn to the left of its origin.  The
 right-side bearing is the distance from the right side of the bounds
 rectangle to the next glyph origin (the origin plus the advance).  If
 negative, part of the glyph is drawn to the right of the next glyph's
 origin.  Note that the bounds does not necessarily enclose all the pixels
 affected when rendering the glyph, because of rasterization and pixel
 adjustment effects.
 <p>
 Although instances of <code>GlyphMetrics</code> can be directly
 constructed, they are almost always obtained from a 
 <code>GlyphVector</code>.  Once constructed, <code>GlyphMetrics</code>
 objects are immutable.
 <p>
 <strong>Example</strong>:<p>
 Querying a <code>Font</code> for glyph information
 <blockquote><pre>
 Font font = ...;
 int glyphIndex = ...;
 GlyphMetrics metrics = GlyphVector.getGlyphMetrics(glyphIndex);
 int isStandard = metrics.isStandard();
 float glyphAdvance = metrics.getAdvance();
 </pre></blockquote>
 @see java.awt.Font
 @see GlyphVector

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final byte java.awt.font.GlyphMetrics.STANDARD
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates a glyph that represents a single standard
 character.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final byte java.awt.font.GlyphMetrics.LIGATURE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates a glyph that represents multiple characters
 as a ligature, for example 'fi' or 'ffi'.  It is followed by
 filler glyphs for the remaining characters. Filler and combining
 glyphs can be intermixed to control positioning of accent marks
 on the logically preceeding ligature.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final byte java.awt.font.GlyphMetrics.COMBINING
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates a glyph that represents a combining character,
 such as an umlaut.  There is no caret position between this glyph
 and the preceeding glyph.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final byte java.awt.font.GlyphMetrics.COMPONENT
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates a glyph with no corresponding character in the
 backing store.  The glyph is associated with the character
 represented by the logicaly preceeding non-component glyph.  This
 is used for kashida justification or other visual modifications to
 existing glyphs.  There is no caret position between this glyph
 and the preceeding glyph.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final byte java.awt.font.GlyphMetrics.WHITESPACE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Indicates a glyph with no visual representation. It can
 be added to the other code values to indicate an invisible glyph.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.font.GlyphMetrics(float advance, Rectangle2D bounds, byte glyphType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>GlyphMetrics</code> object.
 @param advance the advance width of the glyph
 @param bounds the black box bounds of the glyph
 @param glyphType the type of the glyph

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.font.GlyphMetrics(boolean horizontal, float advanceX, float advanceY, Rectangle2D bounds, byte glyphType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>GlyphMetrics</code> object.
 @param horizontal if true, metrics are for a horizontal baseline, 
   otherwise they are for a vertical baseline
 @param advanceX the X-component of the glyph's advance
 @param advanceY the Y-component of the glyph's advance
 @param bounds the visual bounds of the glyph
 @param glyphType the type of the glyph
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.font.GlyphMetrics.getAdvance()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the advance of the glyph along the baseline (either 
 horizontal or vertical).
 @return the advance of the glyph

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.font.GlyphMetrics.getAdvanceX()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the x-component of the advance of the glyph.
 @return the x-component of the advance of the glyph
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.font.GlyphMetrics.getAdvanceY()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the y-component of the advance of the glyph.
 @return the y-component of the advance of the glyph
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.geom.Rectangle2D java.awt.font.GlyphMetrics.getBounds2D()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the bounds of the glyph. This is the bounding box of the glyph outline.
 Because of rasterization and pixel alignment effects, it does not necessarily
 enclose the pixels that are affected when rendering the glyph.
 @return a {@link Rectangle2D} that is the bounds of the glyph.

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.font.GlyphMetrics.getLSB()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the left (top) side bearing of the glyph.
 <p>
 This is the distance from 0,&nbsp;0 to the left (top) of the glyph
 bounds.  If the bounds of the glyph is to the left of (above) the
 origin, the LSB is negative.
 @return the left side bearing of the glyph.

<!-- END DATA -->
<!-- BEGIN KEY -->
public float java.awt.font.GlyphMetrics.getRSB()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the right (bottom) side bearing of the glyph.
 <p>
 This is the distance from the right (bottom) of the glyph bounds to
 the advance. If the bounds of the glyph is to the right of (below)
 the advance, the RSB is negative.
 @return the right side bearing of the glyph.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.font.GlyphMetrics.getType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the raw glyph type code.
 @return the raw glyph type code.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.font.GlyphMetrics.isStandard()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <code>true</code> if this is a standard glyph.
 @return <code>true</code> if this is a standard glyph;
		<code>false</code> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.font.GlyphMetrics.isLigature()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <code>true</code> if this is a ligature glyph.
 @return <code>true</code> if this is a ligature glyph;
		<code>false</code> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.font.GlyphMetrics.isCombining()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <code>true</code> if this is a combining glyph.
 @return <code>true</code> if this is a combining glyph;
		<code>false</code> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.font.GlyphMetrics.isComponent()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <code>true</code> if this is a component glyph.
 @return <code>true</code> if this is a component glyph;
		<code>false</code> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.font.GlyphMetrics.isWhitespace()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <code>true</code> if this is a whitespace glyph.
 @return <code>true</code> if this is a whitespace glyph;
		<code>false</code> otherwise.

<!-- END DATA -->
