<!-- BEGIN KEY -->
public class java.awt.Robot extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class is used to generate native system input events
 for the purposes of test automation, self-running demos, and
 other applications where control of the mouse and keyboard
 is needed. The primary purpose of Robot is to facilitate
 automated testing of Java platform implementations.
 <p>
 Using the class to generate input events differs from posting
 events to the AWT event queue or AWT components in that the
 events are generated in the platform's native input
 queue. For example, <code>Robot.mouseMove</code> will actually move
 the mouse cursor instead of just generating mouse move events.
 <p>
 Note that some platforms require special privileges or extensions 
 to access low-level input control. If the current platform configuration
 does not allow input control, an <code>AWTException</code> will be thrown
 when trying to construct Robot objects. For example, X-Window systems
 will throw the exception if the XTEST 2.2 standard extension is not supported
 (or not enabled) by the X server.
 <p>
 Applications that use Robot for purposes other than self-testing should 
 handle these error conditions gracefully.

 @version 	1.29, 03/21/06
 @author 	Robi Khan
 @since   	1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Robot() throws java.awt.AWTException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a Robot object in the coordinate system of the primary screen.
 <p>
 
 @throws 	AWTException if the platform configuration does not allow
 low-level input control.  This exception is always thrown when
 GraphicsEnvironment.isHeadless() returns true
 @throws 	SecurityException if <code>createRobot</code> permission is not granted
 @see     java.awt.GraphicsEnvironment#isHeadless
 @see     SecurityManager#checkPermission
 @see 	AWTPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Robot(GraphicsDevice screen) throws java.awt.AWTException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a Robot for the given screen device. Coordinates passed
 to Robot method calls like mouseMove and createScreenCapture will
 be interpreted as being in the same coordinate system as the
 specified screen. Note that depending on the platform configuration,
 multiple screens may either:
 <ul>
 <li>share the same coordinate system to form a combined virtual screen</li>
 <li>use different coordinate systems to act as independent screens</li>
 </ul>
 This constructor is meant for the latter case.
 <p>
 If screen devices are reconfigured such that the coordinate system is
 affected, the behavior of existing Robot objects is undefined.

 @param screen	A screen GraphicsDevice indicating the coordinate
			system the Robot will operate in.
 @throws 	AWTException if the platform configuration does not allow
 low-level input control.  This exception is always thrown when
 GraphicsEnvironment.isHeadless() returns true.
 @throws  IllegalArgumentException if <code>screen</code> is not a screen
		GraphicsDevice.
 @throws 	SecurityException if <code>createRobot</code> permission is not granted
 @see     java.awt.GraphicsEnvironment#isHeadless
 @see     GraphicsDevice
 @see     SecurityManager#checkPermission
 @see 	AWTPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Robot.mouseMove(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Moves mouse pointer to given screen coordinates.
 @param x		X position
 @param y		Y position

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Robot.mousePress(int buttons)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Presses one or more mouse buttons.  The mouse buttons should
 be released using the <code>mouseRelease</code> method.

 @param buttons	the Button mask; a combination of one or more
 of these flags:
 <ul>
 <li><code>InputEvent.BUTTON1_MASK</code>
 <li><code>InputEvent.BUTTON2_MASK</code>
 <li><code>InputEvent.BUTTON3_MASK</code>
 </ul>
 @throws 	IllegalArgumentException if the button mask is not a
		valid combination
 @see #mouseRelease(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Robot.mouseRelease(int buttons)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Releases one or more mouse buttons. 

 @param buttons	the Button mask; a combination of one or more
 of these flags:
 <ul>
 <li><code>InputEvent.BUTTON1_MASK</code>
 <li><code>InputEvent.BUTTON2_MASK</code>
 <li><code>InputEvent.BUTTON3_MASK</code>
 </ul>
 @see #mousePress(int)
 @throws 	IllegalArgumentException if the button mask is not a valid
		combination

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Robot.mouseWheel(int wheelAmt)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Rotates the scroll wheel on wheel-equipped mice.
 
 @param wheelAmt  number of "notches" to move the mouse wheel
                  Negative values indicate movement up/away from the user,
                  positive values indicate movement down/towards the user.

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Robot.keyPress(int keycode)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Presses a given key.  The key should be released using the
 <code>keyRelease</code> method.
 <p>
 Key codes that have more than one physical key associated with them 
 (e.g. <code>KeyEvent.VK_SHIFT</code> could mean either the 
 left or right shift key) will map to the left key.

 @param	keycode	Key to press (e.g. <code>KeyEvent.VK_A</code>)
 @throws 	IllegalArgumentException if <code>keycode</code> is not
          a valid key
 @see     #keyRelease(int)
 @see     java.awt.event.KeyEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Robot.keyRelease(int keycode)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Releases a given key.
 <p>
 Key codes that have more than one physical key associated with them 
 (e.g. <code>KeyEvent.VK_SHIFT</code> could mean either the 
 left or right shift key) will map to the left key.

 @param	keycode	Key to release (e.g. <code>KeyEvent.VK_A</code>)
 @throws 	IllegalArgumentException if <code>keycode</code> is not a
          valid key
 @see  #keyPress(int)
 @see     java.awt.event.KeyEvent

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.Color java.awt.Robot.getPixelColor(int x, int y)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the color of a pixel at the given screen coordinates.
 @param	x	X position of pixel
 @param	y	Y position of pixel
 @return  Color of the pixel

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.image.BufferedImage java.awt.Robot.createScreenCapture(Rectangle screenRect)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an image containing pixels read from the screen.  This image does
 not include the mouse cursor.
 @param	screenRect	Rect to capture in screen coordinates
 @return	The captured image
 @throws 	IllegalArgumentException if <code>screenRect</code> width and height are not greater than zero
 @throws 	SecurityException if <code>readDisplayPixels</code> permission is not granted
 @see     SecurityManager#checkPermission
 @see 	AWTPermission

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.awt.Robot.isAutoWaitForIdle()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns whether this Robot automatically invokes <code>waitForIdle</code>
 after generating an event.
 @return Whether <code>waitForIdle</code> is automatically called

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Robot.setAutoWaitForIdle(boolean isOn)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets whether this Robot automatically invokes <code>waitForIdle</code>
 after generating an event.
 @param	isOn	Whether <code>waitForIdle</code> is automatically invoked

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.awt.Robot.getAutoDelay()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of milliseconds this Robot sleeps after generating an event.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Robot.setAutoDelay(int ms)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the number of milliseconds this Robot sleeps after generating an event.
 @throws 	IllegalArgumentException If <code>ms</code> is not between 0 and 60,000 milliseconds inclusive

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Robot.delay(int ms)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sleeps for the specified time.
 To catch any <code>InterruptedException</code>s that occur,
 <code>Thread.sleep()</code> may be used instead.
 @param	ms	time to sleep in milliseconds
 @throws 	IllegalArgumentException if <code>ms</code> is not between 0 and 60,000 milliseconds inclusive
 @see     java.lang.Thread#sleep

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.Robot.waitForIdle()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Waits until all events currently on the event queue have been processed.
 @throws 	IllegalThreadStateException if called on the AWT event dispatching thread

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String java.awt.Robot.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this Robot.

 @return	the string representation.

<!-- END DATA -->
