<!-- BEGIN KEY -->
public class java.awt.List extends java.awt.Component implements java.awt.ItemSelectable, javax.accessibility.Accessible
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>List</code> component presents the user with a
 scrolling list of text items. The list can be set up so that
 the user can choose either one item or multiple items.
 <p>
 For example, the code&nbsp;.&nbsp;.&nbsp;.
 <p>
 <hr><blockquote><pre>
 List lst = new List(4, false);
 lst.add("Mercury");
 lst.add("Venus");
 lst.add("Earth");
 lst.add("JavaSoft");
 lst.add("Mars");
 lst.add("Jupiter");
 lst.add("Saturn");
 lst.add("Uranus");
 lst.add("Neptune");
 lst.add("Pluto");
 cnt.add(lst);
 </pre></blockquote><hr>
 <p>
 where <code>cnt</code> is a container, produces the following
 scrolling list:
 <p>
 <img src="doc-files/List-1.gif"
 alt="Shows a list containing: Venus, Earth, JavaSoft, and Mars. Javasoft is selected." ALIGN=center HSPACE=10 VSPACE=7>
 <p>
 If the List allows multiple selections, then clicking on
 an item that is already selected deselects it. In the preceding
 example, only one item from the scrolling list can be selected
 at a time, since the second argument when creating the new scrolling
 list is <code>false</code>. If the List does not allow multiple
 selections, selecting an item causes any other selected item
 to be deselected.
 <p>
 Note that the list in the example shown was created with four visible
 rows.  Once the list has been created, the number of visible rows
 cannot be changed.  A default <code>List</code> is created with
 four rows, so that <code>lst = new List()</code> is equivalent to
 <code>list = new List(4, false)</code>.
 <p>
 Beginning with Java&nbsp;1.1, the Abstract Window Toolkit
 sends the <code>List</code> object all mouse, keyboard, and focus events
 that occur over it. (The old AWT event model is being maintained
 only for backwards compatibility, and its use is discouraged.)
 <p>
 When an item is selected or deselected by the user, AWT sends an instance
 of <code>ItemEvent</code> to the list.
 When the user double-clicks on an item in a scrolling list,
 AWT sends an instance of <code>ActionEvent</code> to the
 list following the item event. AWT also generates an action event
 when the user presses the return key while an item in the
 list is selected.
 <p>
 If an application wants to perform some action based on an item
 in this list being selected or activated by the user, it should implement
 <code>ItemListener</code> or <code>ActionListener</code>
 as appropriate and register the new listener to receive
 events from this list.
 <p>
 For multiple-selection scrolling lists, it is considered a better
 user interface to use an external gesture (such as clicking on a
 button) to trigger the action.
 @version 	1.110, 07/11/06
 @author 	Sami Shaio
 @see         java.awt.event.ItemEvent
 @see         java.awt.event.ItemListener
 @see         java.awt.event.ActionEvent
 @see         java.awt.event.ActionListener
 @since       JDK1.0

<!-- END DATA -->
<!-- BEGIN KEY -->
 java.util.Vector java.awt.List.items
<!-- END KEY -->
<!-- BEGIN DATA -->
 A vector created to contain items which will become
 part of the List Component.

 @serial
 @see #addItem(String)
 @see #getItem(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.List.rows
<!-- END KEY -->
<!-- BEGIN DATA -->
 This field will represent the number of visible rows in the
 <code>List</code> Component.  It is specified only once, and
 that is when the list component is actually
 created.  It will never change.

 @serial
 @see #getRows()

<!-- END DATA -->
<!-- BEGIN KEY -->
 boolean java.awt.List.multipleMode
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>multipleMode</code> is a variable that will
 be set to <code>true</code> if a list component is to be set to
 multiple selection mode, that is where the user can
 select more than one item in a list at one time.
 <code>multipleMode</code> will be set to false if the
 list component is set to single selection, that is where
 the user can only select one item on the list at any
 one time.

 @serial
 @see #isMultipleMode()
 @see #setMultipleMode(boolean)

<!-- END DATA -->
<!-- BEGIN KEY -->
 int[] java.awt.List.selected
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>selected</code> is an array that will contain
 the indices of items that have been selected.

 @serial
 @see #getSelectedIndexes()
 @see #getSelectedIndex()

<!-- END DATA -->
<!-- BEGIN KEY -->
 int java.awt.List.visibleIndex
<!-- END KEY -->
<!-- BEGIN DATA -->
 This variable contains the value that will be used
 when trying to make a particular list item visible.

 @serial
 @see #makeVisible(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.awt.List.listSerializedDataVersion
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>List</code> component's
 Serialized Data Version.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.List() throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new scrolling list.
 By default, there are four visible lines and multiple selections are
 not allowed.  Note that this is a convenience method for
 <code>List(0, false)</code>.  Also note that the number of visible
 lines in the list cannot be changed after it has been created.
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
 returns true.
 @see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.List(int rows) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new scrolling list initialized with the specified
 number of visible lines. By default, multiple selections are
 not allowed.  Note that this is a convenience method for
 <code>List(rows, false)</code>.  Also note that the number
 of visible rows in the list cannot be changed after it has
 been created.
 @param       rows the number of items to show.
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
 returns true.
 @see java.awt.GraphicsEnvironment#isHeadless
 @since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.List(int rows, boolean multipleMode) throws java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new scrolling list initialized to display the specified
 number of rows. Note that if zero rows are specified, then
 the list will be created with a default of four rows.
 Also note that the number of visible rows in the list cannot
 be changed after it has been created.
 If the value of <code>multipleMode</code> is
 <code>true</code>, then the user can select multiple items from
 the list. If it is <code>false</code>, only one item at a time
 can be selected.
 @param       rows   the number of items to show.
 @param       multipleMode   if <code>true</code>,
                     then multiple selections are allowed;
                     otherwise, only one item can be selected at a time.
 @exception HeadlessException if GraphicsEnvironment.isHeadless()
 returns true.
 @see java.awt.GraphicsEnvironment#isHeadless

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.addNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates the peer for the list.  The peer allows us to modify the
 list's appearance without changing its functionality.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.removeNotify()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the peer for this list.  The peer allows us to modify the
 list's appearance without changing its functionality.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.List.getItemCount()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the number of items in the list.
 @return     the number of items in the list
 @see        #getItem
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.List.countItems()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated As of JDK version 1.1,
 replaced by <code>getItemCount()</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.awt.List.getItem(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the item associated with the specified index.
 @return       an item that is associated with
                    the specified index
 @param        index the position of the item
 @see          #getItemCount

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String[] java.awt.List.getItems()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the items in the list.
 @return       a string array containing items of the list
 @see          #select
 @see          #deselect
 @see          #isIndexSelected
 @since        JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.add(String item)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified item to the end of scrolling list.
 @param item the item to be added
 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.addItem(String item)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated      replaced by <code>add(String)</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.add(String item, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified item to the the scrolling list
 at the position indicated by the index.  The index is 
 zero-based.  If the value of the index is less than zero, 
 or if the value of the index is greater than or equal to 
 the number of items in the list, then the item is added 
 to the end of the list.
 @param       item   the item to be added;
              if this parameter is <code>null</code> then the item is
              treated as an empty string, <code>""</code>
 @param       index  the position at which to add the item
 @since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.List.addItem(String item, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated      replaced by <code>add(String, int)</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.List.replaceItem(String newValue, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Replaces the item at the specified index in the scrolling list
 with the new string.
 @param       newValue   a new string to replace an existing item
 @param       index      the position of the item to replace
 @exception ArrayIndexOutOfBoundsException if <code>index</code>
		is out of range

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.removeAll()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all items from this list.
 @see #remove
 @see #delItems
 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.List.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated As of JDK version 1.1,
 replaced by <code>removeAll()</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.List.remove(String item)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the first occurrence of an item from the list.
 If the specified item is selected, and is the only selected 
 item in the list, the list is set to have no selection.
 @param        item  the item to remove from the list
 @exception    IllegalArgumentException
                     if the item doesn't exist in the list
 @since        JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.remove(int position)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the item at the specified position
 from this scrolling list.
 If the item with the specified position is selected, and is the 
 only selected item in the list, the list is set to have no selection.
 @param      position   the index of the item to delete
 @see        #add(String, int)
 @since      JDK1.1
 @exception    ArrayIndexOutOfBoundsException
               if the <code>position</code> is less than 0 or
               greater than <code>getItemCount()-1</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.delItem(int position)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated     replaced by <code>remove(String)</code>
                         and <code>remove(int)</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.awt.List.getSelectedIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the index of the selected item on the list,
 
 @return        the index of the selected item; 
                if no item is selected, or if multiple items are 
                selected, <code>-1</code> is returned.  
 @see           #select
 @see           #deselect
 @see           #isIndexSelected

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int[] java.awt.List.getSelectedIndexes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the selected indexes on the list.
 
 @return        an array of the selected indexes on this scrolling list; 
                if no item is selected, a zero-length array is returned. 
 @see           #select
 @see           #deselect
 @see           #isIndexSelected

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String java.awt.List.getSelectedItem()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the selected item on this scrolling list.
 
 @return        the selected item on the list; 
                if no item is selected, or if multiple items are 
                selected, <code>null</code> is returned.  
 @see           #select
 @see           #deselect
 @see           #isIndexSelected

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.String[] java.awt.List.getSelectedItems()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the selected items on this scrolling list.
 
 @return        an array of the selected items on this scrolling list;
                if no item is selected, a zero-length array is returned. 
 @see           #select
 @see           #deselect
 @see           #isIndexSelected

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.awt.List.getSelectedObjects()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the selected items on this scrolling list in an array of Objects.
 @return        an array of <code>Object</code>s representing the 
                selected items on this scrolling list;
                if no item is selected, a zero-length array is returned.
 @see #getSelectedItems
 @see ItemSelectable

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.select(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Selects the item at the specified index in the scrolling list.
<p>
 Note that passing out of range parameters is invalid, 
 and will result in unspecified behavior.  

 <p>Note that this method should be primarily used to
 initially select an item in this component.  
 Programmatically calling this method will <i>not</i> trigger
 an <code>ItemEvent</code>.  The only way to trigger an
 <code>ItemEvent</code> is by user interaction.

 @param        index the position of the item to select
 @see          #getSelectedItem
 @see          #deselect
 @see          #isIndexSelected

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.List.deselect(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Deselects the item at the specified index.
 <p>
 Note that passing out of range parameters is invalid, 
 and will result in unspecified behavior.  
 <p>
 If the item at the specified index is not selected,
 then the operation is ignored.
 @param        index the position of the item to deselect
 @see          #select
 @see          #getSelectedItem
 @see          #isIndexSelected

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.List.isIndexSelected(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines if the specified item in this scrolling list is
 selected.
 @param      index   the item to be checked
 @return     <code>true</code> if the specified item has been
                       selected; <code>false</code> otherwise
 @see        #select
 @see        #deselect
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.List.isSelected(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated As of JDK version 1.1,
 replaced by <code>isIndexSelected(int)</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.List.getRows()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the number of visible lines in this list.  Note that
 once the <code>List</code> has been created, this number
 will never change.
 @return     the number of visible lines in this scrolling list

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.List.isMultipleMode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines whether this list allows multiple selections.
 @return     <code>true</code> if this list allows multiple
                 selections; otherwise, <code>false</code>
 @see        #setMultipleMode
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.awt.List.allowsMultipleSelections()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated As of JDK version 1.1,
 replaced by <code>isMultipleMode()</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.awt.List.setMultipleMode(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the flag that determines whether this list
 allows multiple selections.
 When the selection mode is changed from multiple-selection to
 single-selection, the selected items change as follows:
 If a selected item has the location cursor, only that 
 item will remain selected.  If no selected item has the 
 location cursor, all items will be deselected.  
 @param       b   if <code>true</code> then multiple selections
                      are allowed; otherwise, only one item from
                      the list can be selected at once
 @see         #isMultipleMode
 @since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.List.setMultipleSelections(boolean b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated As of JDK version 1.1,
 replaced by <code>setMultipleMode(boolean)</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.awt.List.getVisibleIndex()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the index of the item that was last made visible by
 the method <code>makeVisible</code>.
 @return      the index of the item that was last made visible
 @see         #makeVisible

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.List.makeVisible(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Makes the item at the specified index visible.
 @param       index    the position of the item
 @see         #getVisibleIndex

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.List.getPreferredSize(int rows)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the preferred dimensions for a list with the specified
 number of rows.
 @param      rows    number of rows in the list
 @return     the preferred dimensions for displaying this scrolling list
             given that the specified number of rows must be visible
 @see        java.awt.Component#getPreferredSize
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.List.preferredSize(int rows)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated As of JDK version 1.1,
 replaced by <code>getPreferredSize(int)</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.List.getPreferredSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the preferred size of this scrolling list.
 @return     the preferred dimensions for displaying this scrolling list
 @see        java.awt.Component#getPreferredSize
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.List.preferredSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated As of JDK version 1.1,
 replaced by <code>getPreferredSize()</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.List.getMinimumSize(int rows)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the minumum dimensions for a list with the specified
 number of rows.
 @param      rows    number of rows in the list
 @return     the minimum dimensions for displaying this scrolling list
             given that the specified number of rows must be visible
 @see        java.awt.Component#getMinimumSize
 @since      JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.List.minimumSize(int rows)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated As of JDK version 1.1,
 replaced by <code>getMinimumSize(int)</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.List.getMinimumSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines the minimum size of this scrolling list.
 @return       the minimum dimensions needed
                        to display this scrolling list
 @see          java.awt.Component#getMinimumSize()
 @since        JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Dimension java.awt.List.minimumSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated As of JDK version 1.1,
 replaced by <code>getMinimumSize()</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.List.addItemListener(ItemListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified item listener to receive item events from
 this list.  Item events are sent in response to user input, but not
 in response to calls to <code>select</code> or <code>deselect</code>.
 If listener <code>l</code> is <code>null</code>,
 no exception is thrown and no action is performed.
 <p>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
 >AWT Threading Issues</a> for details on AWT's threading model.

 @param         l the item listener
 @see           #removeItemListener
 @see           #getItemListeners
 @see           #select
 @see           #deselect
 @see           java.awt.event.ItemEvent
 @see           java.awt.event.ItemListener
 @since         JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.List.removeItemListener(ItemListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified item listener so that it no longer
 receives item events from this list.
 If listener <code>l</code> is <code>null</code>,
 no exception is thrown and no action is performed.
 <p>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
 >AWT Threading Issues</a> for details on AWT's threading model.

 @param         	l the item listener
 @see           	#addItemListener
 @see           	#getItemListeners
 @see           	java.awt.event.ItemEvent
 @see           	java.awt.event.ItemListener
 @since         	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.event.ItemListener[] java.awt.List.getItemListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the item listeners
 registered on this list.

 @return all of this list's <code>ItemListener</code>s
         or an empty array if no item
         listeners are currently registered

 @see           	#addItemListener
 @see           	#removeItemListener
 @see           	java.awt.event.ItemEvent
 @see           	java.awt.event.ItemListener
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.List.addActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified action listener to receive action events from
 this list. Action events occur when a user double-clicks
 on a list item or types Enter when the list has the keyboard
 focus.
 <p>
 If listener <code>l</code> is <code>null</code>,
 no exception is thrown and no action is performed.
 <p>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
 >AWT Threading Issues</a> for details on AWT's threading model.

 @param         l the action listener
 @see           #removeActionListener
 @see           #getActionListeners
 @see           java.awt.event.ActionEvent
 @see           java.awt.event.ActionListener
 @since         JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.List.removeActionListener(ActionListener l)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified action listener so that it no longer
 receives action events from this list. Action events
 occur when a user double-clicks on a list item.
 If listener <code>l</code> is <code>null</code>,
 no exception is thrown and no action is performed.
 <p>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
 >AWT Threading Issues</a> for details on AWT's threading model.

 @param         	l     the action listener
 @see           	#addActionListener
 @see           	#getActionListeners
 @see           	java.awt.event.ActionEvent
 @see           	java.awt.event.ActionListener
 @since         	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.awt.event.ActionListener[] java.awt.List.getActionListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the action listeners
 registered on this list.

 @return all of this list's <code>ActionListener</code>s
         or an empty array if no action
         listeners are currently registered

 @see           	#addActionListener
 @see           	#removeActionListener
 @see           	java.awt.event.ActionEvent
 @see           	java.awt.event.ActionListener
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.awt.List.getListeners(java.lang.Class<T> listenerType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the objects currently registered
 as <code><em>Foo</em>Listener</code>s
 upon this <code>List</code>.
 <code><em>Foo</em>Listener</code>s are registered using the
 <code>add<em>Foo</em>Listener</code> method.

 <p>
 You can specify the <code>listenerType</code> argument
 with a class literal, such as
 <code><em>Foo</em>Listener.class</code>.
 For example, you can query a
 <code>List</code> <code>l</code>
 for its item listeners with the following code:

 <pre>ItemListener[] ils = (ItemListener[])(l.getListeners(ItemListener.class));</pre>

 If no such listeners exist, this method returns an empty array.

 @param listenerType the type of listeners requested; this parameter
          should specify an interface that descends from
          <code>java.util.EventListener</code>
 @return an array of all objects registered as
          <code><em>Foo</em>Listener</code>s on this list,
          or an empty array if no such
          listeners have been added
 @exception ClassCastException if <code>listenerType</code>
          doesn't specify a class or interface that implements
          <code>java.util.EventListener</code>

 @see #getItemListeners
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.List.processEvent(AWTEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Processes events on this scrolling list. If an event is
 an instance of <code>ItemEvent</code>, it invokes the
 <code>processItemEvent</code> method. Else, if the
 event is an instance of <code>ActionEvent</code>,
 it invokes <code>processActionEvent</code>.
 If the event is not an item event or an action event,
 it invokes <code>processEvent</code> on the superclass.
 <p>Note that if the event parameter is <code>null</code>
 the behavior is unspecified and may result in an
 exception.

 @param        e the event
 @see          java.awt.event.ActionEvent
 @see          java.awt.event.ItemEvent
 @see          #processActionEvent
 @see          #processItemEvent
 @since        JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.List.processItemEvent(ItemEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Processes item events occurring on this list by
 dispatching them to any registered
 <code>ItemListener</code> objects.
 <p>
 This method is not called unless item events are
 enabled for this component. Item events are enabled
 when one of the following occurs:
 <p><ul>
 <li>An <code>ItemListener</code> object is registered
 via <code>addItemListener</code>.
 <li>Item events are enabled via <code>enableEvents</code>.
 </ul>
 <p>Note that if the event parameter is <code>null</code>
 the behavior is unspecified and may result in an
 exception.

 @param       e the item event
 @see         java.awt.event.ItemEvent
 @see         java.awt.event.ItemListener
 @see         #addItemListener
 @see         java.awt.Component#enableEvents
 @since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.awt.List.processActionEvent(ActionEvent e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Processes action events occurring on this component
 by dispatching them to any registered
 <code>ActionListener</code> objects.
 <p>
 This method is not called unless action events are
 enabled for this component. Action events are enabled
 when one of the following occurs:
 <p><ul>
 <li>An <code>ActionListener</code> object is registered
 via <code>addActionListener</code>.
 <li>Action events are enabled via <code>enableEvents</code>.
 </ul>
 <p>Note that if the event parameter is <code>null</code>
 the behavior is unspecified and may result in an
 exception.

 @param       e the action event
 @see         java.awt.event.ActionEvent
 @see         java.awt.event.ActionListener
 @see         #addActionListener
 @see         java.awt.Component#enableEvents
 @since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.lang.String java.awt.List.paramString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the parameter string representing the state of this
 scrolling list. This string is useful for debugging.
 @return    the parameter string of this scrolling list

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.awt.List.delItems(int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @deprecated As of JDK version 1.1,
 Not for public use in the future.
 This method is expected to be retained only as a package
 private method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public javax.accessibility.AccessibleContext java.awt.List.getAccessibleContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>AccessibleContext</code> associated with this 
 <code>List</code>. For lists, the <code>AccessibleContext</code>
 takes the form of an <code>AccessibleAWTList</code>. 
 A new <code>AccessibleAWTList</code> instance is created, if necessary.

 @return an <code>AccessibleAWTList</code> that serves as the 
         <code>AccessibleContext</code> of this <code>List</code>
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.List.readObject(ObjectInputStream s) throws java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads the <code>ObjectInputStream</code> and if it
 isn't <code>null</code> adds a listener to receive
 both item events and action events (as specified
 by the key stored in the stream) fired by the
 <code>List</code>.
 Unrecognized keys or values will be ignored.

 @param s the <code>ObjectInputStream</code> to write
 @exception HeadlessException if
   <code>GraphicsEnvironment.isHeadless</code> returns
   <code>true</code>
 @see #removeItemListener(ItemListener)
 @see #addItemListener(ItemListener)
 @see java.awt.GraphicsEnvironment#isHeadless
 @see #writeObject(ObjectOutputStream)

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.awt.List.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes default serializable fields to stream.  Writes
 a list of serializable <code>ItemListeners</code>
 and <code>ActionListeners</code> as optional data.
 The non-serializable listeners are detected and
 no attempt is made to serialize them.

 @serialData <code>null</code> terminated sequence of 0
  or more pairs; the pair consists of a <code>String</code>
  and an <code>Object</code>; the <code>String</code>
  indicates the type of object and is one of the
  following:
  <code>itemListenerK</code> indicating an
    <code>ItemListener</code> object;
  <code>actionListenerK</code> indicating an
    <code>ActionListener</code> object

 @param s the <code>ObjectOutputStream</code> to write
 @see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)
 @see java.awt.Component#itemListenerK
 @see java.awt.Component#actionListenerK
 @see #readObject(ObjectInputStream)

<!-- END DATA -->
