<!-- BEGIN KEY -->
public class java.sql.Date extends java.util.Date
<!-- END KEY -->
<!-- BEGIN DATA -->
 <P>A thin wrapper around a millisecond value that allows
 JDBC to identify this as an SQL <code>DATE</code> value.  A 
 milliseconds value represents the number of milliseconds that 
 have passed since January 1, 1970 00:00:00.000 GMT.
 <p>
 To conform with the definition of SQL <code>DATE</code>, the 
 millisecond values wrapped by a <code>java.sql.Date</code> instance 
 must be 'normalized' by setting the 
 hours, minutes, seconds, and milliseconds to zero in the particular
 time zone with which the instance is associated.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Date(int year, int month, int day)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>Date</code> object initialized with the given
 year, month, and day.
 <P>
 The result is undefined if a given argument is out of bounds.

 @param year the year minus 1900; must be 0 to 8099. (Note that
        8099 is 9999 minus 1900.)
 @param month 0 to 11
 @param day 1 to 31
 @deprecated instead use the constructor <code>Date(long date)</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.Date(long date)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>Date</code> object using the given milliseconds 
 time value.  If the given milliseconds value contains time 
 information, the driver will set the time components to the
 time in the default time zone (the time zone of the Java virtual
 machine running the application) that corresponds to zero GMT.

 @param date milliseconds since January 1, 1970, 00:00:00 GMT not
        to exceed the milliseconds representation for the year 8099.
        A negative number indicates the number of milliseconds
        before January 1, 1970, 00:00:00 GMT.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Date.setTime(long date)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets an existing <code>Date</code> object 
 using the given milliseconds time value. 
 If the given milliseconds value contains time information, 
 the driver will set the time components to the
 time in the default time zone (the time zone of the Java virtual
 machine running the application) that corresponds to zero GMT.

 @param date milliseconds since January 1, 1970, 00:00:00 GMT not
        to exceed the milliseconds representation for the year 8099.
        A negative number indicates the number of milliseconds
        before January 1, 1970, 00:00:00 GMT.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.sql.Date java.sql.Date.valueOf(String s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Converts a string in JDBC date escape format to
 a <code>Date</code> value.

 @param s a <code>String</code> object representing a date in 
        in the format "yyyy-mm-dd"
 @return a <code>java.sql.Date</code> object representing the
         given date
 @throws IllegalArgumentException if the date given is not in the
         JDBC date escape format (yyyy-mm-dd)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.sql.Date.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Formats a date in the date escape format yyyy-mm-dd.  
 <P>
 @return a String in yyyy-mm-dd format

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.Date.getHours()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method is deprecated and should not be used because SQL Date 
 values do not have a time component.

 @deprecated
 @exception java.lang.IllegalArgumentException if this method is invoked
 @see #setHours

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.Date.getMinutes()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method is deprecated and should not be used because SQL Date 
 values do not have a time component.

 @deprecated
 @exception java.lang.IllegalArgumentException if this method is invoked
 @see #setMinutes

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.Date.getSeconds()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method is deprecated and should not be used because SQL Date 
 values do not have a time component.

 @deprecated
 @exception java.lang.IllegalArgumentException if this method is invoked
 @see #setSeconds

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Date.setHours(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method is deprecated and should not be used because SQL Date 
 values do not have a time component.

 @deprecated
 @exception java.lang.IllegalArgumentException if this method is invoked
 @see #getHours

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Date.setMinutes(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method is deprecated and should not be used because SQL Date 
 values do not have a time component.

 @deprecated
 @exception java.lang.IllegalArgumentException if this method is invoked
 @see #getMinutes

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.Date.setSeconds(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method is deprecated and should not be used because SQL Date 
 values do not have a time component.

 @deprecated
 @exception java.lang.IllegalArgumentException if this method is invoked
 @see #getSeconds

<!-- END DATA -->
