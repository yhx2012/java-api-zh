<!-- BEGIN KEY -->
public class java.sql.QueryObjectFactory extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

 This is a utility class which provides access to the implementation of <code>QueryObjectGenerator</code> 
 that is provided with Java SE. 
 <p>
 This class can also be used with JDBC drivers which do not provide <code>QueryObjectGenerator</code>
 implementations.

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static T extends java.sql.BaseQuery java.sql.QueryObjectFactory.createDefaultQueryObject(java.lang.Class<T> ifc, DataSource ds) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a concrete implementation of a Query interface using the Java SE <code>QueryObjectGenerator</code>
 implementation.
 <p> 
 @param ifc The Query interface that will be created
 @param ds The <code>DataSource</code> that will be used when invoking methods that accesss
 the data source. The QueryObjectGenerator implementation will use
 this <code>DataSource</code> without any unwrapping or modications 
 to create connections to the data source.

 @return A concrete implementation of a Query interface   
 @exception SQLException if a database access error occurs.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static T extends java.sql.BaseQuery java.sql.QueryObjectFactory.createDefaultQueryObject(java.lang.Class<T> ifc, Connection con) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a concrete implementation of a Query interface using the Java SE <code>QueryObjectGenerator</code>
 implementation.
 <p> 
 @param ifc The Query interface that will be created
 @param con The <code>Connection</code> that will be used when invoking methods that accesss
 the data source. The QueryObjectGenerator implementation will use
 this <code>Connection</code> without any unwrapping or modications 
 to create statements from the data source.

 @return A concrete implementation of a Query interface   
 @exception SQLException if a database access error occurs.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static T extends java.sql.BaseQuery java.sql.QueryObjectFactory.createQueryObject(java.lang.Class<T> ifc, DataSource ds) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a concrete implementation of a Query interface using the JDBC driver's <code>QueryObjectGenerator</code>
 implementation. This method will attempt to invoke <code>DataSource.createQueryObject()</code> and if the
 method does not exist on the <code>DataSource</code>, <code>createDefaultQueryObject</code> will be invoked
 to create the concrete implementation of a Query interface.
 <p> 
 @param ifc The Query interface that will be created
 @param ds The <code>DataSource</code> that will be used when invoking methods that access
 the data source. The QueryObjectGenerator implementation will use
 this <code>DataSource</code> without any unwrapping or modications 
 to create connections to the data source.

 @return A concrete implementation of a Query interface   
 @exception SQLException if a database access error occurs.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static T extends java.sql.BaseQuery java.sql.QueryObjectFactory.createQueryObject(java.lang.Class<T> ifc, Connection con) throws java.sql.SQLException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a concrete implementation of a Query interface using the JDBC driver's <code>QueryObjectGenerator</code>
 implementation. This method will attempt to invoke <code>Connection.createQueryObject()</code> and if the
 method does not exist on the <code>Connection</code>, <code>createDefaultQueryObject</code> will be invoked
 to create the concrete implementation of a Query interface.
 <p> 
 @param ifc The Query interface that will be created
 @param con The <code>Connection</code> that will be used when invoking methods that access
 the data source. The QueryObjectGenerator implementation will use
 this <code>Connection</code> without any unwrapping or modications 
 to create statements from the data source.

 @return A concrete implementation of a Query interface   
 @exception SQLException if a database access error occurs.
 @since 1.6

<!-- END DATA -->
