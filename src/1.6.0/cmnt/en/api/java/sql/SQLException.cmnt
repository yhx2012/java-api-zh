<!-- BEGIN KEY -->
public class java.sql.SQLException extends java.lang.Exception implements java.lang.Iterable
<!-- END KEY -->
<!-- BEGIN DATA -->
 <P>An exception that provides information on a database access
 error or other errors.

 <P>Each <code>SQLException</code> provides several kinds of information: 
 <UL>
   <LI> a string describing the error.  This is used as the Java Exception
       message, available via the method <code>getMesasge</code>.
   <LI> a "SQLstate" string, which follows either the XOPEN SQLstate conventions
        or the SQL:2003 conventions.
       The values of the SQLState string are described in the appropriate spec.
       The <code>DatabaseMetaData</code> method <code>getSQLStateType</code>
       can be used to discover whether the driver returns the XOPEN type or
       the SQL:2003 type.
   <LI> an integer error code that is specific to each vendor.  Normally this will
	 be the actual error code returned by the underlying database.
   <LI> a chain to a next Exception.  This can be used to provide additional
 	 error information.
   <LI> the causal relationship, if any for this <code>SQLException</code>.
 </UL>

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.sql.SQLException.SQLState
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.sql.SQLException.vendorCode
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private volatile java.sql.SQLException java.sql.SQLException.next
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLException(String reason, String SQLState, int vendorCode)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Constructs a <code>SQLException</code> object with a given
 <code>reason</code>, <code>SQLState</code>  and 
 <code>vendorCode</code>.

 The <code>cause</code> is not initialized, and may subsequently be
 initialized by a call to the 
 {@link Throwable#initCause(java.lang.Throwable)} method.
 <p>
 @param reason a description of the exception 
 @param SQLState an XOPEN or SQL:2003 code identifying the exception
 @param vendorCode a database vendor-specific exception code

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLException(String reason, String SQLState)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>SQLException</code> object with a given
 <code>reason</code> and <code>SQLState</code>.

 The <code>cause</code> is not initialized, and may subsequently be
 initialized by a call to the 
 {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code
 is initialized to 0.
 <p>
 @param reason a description of the exception 
 @param SQLState an XOPEN or SQL:2003 code identifying the exception 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLException(String reason)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Constructs a <code>SQLException</code> object with a given
 <code>reason</code>. The  <code>SQLState</code>  is initialized to
 <code>null</code> and the vender code is initialized to 0.

 The <code>cause</code> is not initialized, and may subsequently be
 initialized by a call to the 
 {@link Throwable#initCause(java.lang.Throwable)} method.
 <p>
 @param reason a description of the exception 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLException()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>SQLException</code> object. 
 The <code>reason</code>, <code>SQLState</code> are initialized
 to <code>null</code> and the vendor code is initialized to 0.

 The <code>cause</code> is not initialized, and may subsequently be
 initialized by a call to the 
 {@link Throwable#initCause(java.lang.Throwable)} method.
 <p>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLException(Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
  Constructs a <code>SQLException</code> object with a given
 <code>cause</code>.
 The <code>SQLState</code> is initialized
 to <code>null</code> and the vendor code is initialized to 0. 
 The <code>reason</code>  is initialized to <code>null</code> if 
 <code>cause==null</code> or to <code>cause.toString()</code> if 
 <code>cause!=null</code>.
 <p>
 @param cause the underlying reason for this <code>SQLException</code> 
 (which is saved for later retrieval by the <code>getCause()</code> method); 
 may be null indicating the cause is non-existent or unknown.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLException(String reason, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>SQLException</code> object with a given
 <code>reason</code> and  <code>cause</code>.  
 The <code>SQLState</code> is  initialized to <code>null</code>
 and the vendor code is initialized to 0.
 <p>
 @param reason a description of the exception. 
 @param cause the underlying reason for this <code>SQLException</code> 
 (which is saved for later retrieval by the <code>getCause()</code> method); 
 may be null indicating the cause is non-existent or unknown.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLException(String reason, String sqlState, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>SQLException</code> object with a given
 <code>reason</code>, <code>SQLState</code> and  <code>cause</code>.  
 The vendor code is initialized to 0.
 <p>  
 @param reason a description of the exception. 
 @param sqlState an XOPEN or SQL:2003 code identifying the exception 
 @param cause the underlying reason for this <code>SQLException</code>
 (which is saved for later retrieval by the 
 <code>getCause()</code> method); may be null indicating
     the cause is non-existent or unknown.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLException(String reason, String sqlState, int vendorCode, Throwable cause)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>SQLException</code> object with a given
 <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>
 and  <code>cause</code>.  
 <p> 
 @param reason a description of the exception 
 @param sqlState an XOPEN or SQL:2003 code identifying the exception
 @param vendorCode a database vendor-specific exception code
 @param cause the underlying reason for this <code>SQLException</code> 
 (which is saved for later retrieval by the <code>getCause()</code> method); 
 may be null indicating the cause is non-existent or unknown.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.sql.SQLException.getSQLState()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the SQLState for this <code>SQLException</code> object.

 @return the SQLState value

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.sql.SQLException.getErrorCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the vendor-specific exception code
 for this <code>SQLException</code> object.

 @return the vendor's error code

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.sql.SQLException java.sql.SQLException.getNextException()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the exception chained to this 
 <code>SQLException</code> object by setNextException(SQLException ex).

 @return the next <code>SQLException</code> object in the chain; 
         <code>null</code> if there are none
 @see #setNextException

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.sql.SQLException.setNextException(SQLException ex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds an <code>SQLException</code> object to the end of the chain.

 @param ex the new exception that will be added to the end of
            the <code>SQLException</code> chain
 @see #getNextException

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<java.lang.Throwable> java.sql.SQLException.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an iterator over the chained SQLExceptions.  The iterator will
 be used to iterate over each SQLException and its underlying cause 
 (if any).

 @return an iterator over the chained SQLExceptions and causes in the proper 
 order

 @since 1.6

<!-- END DATA -->
