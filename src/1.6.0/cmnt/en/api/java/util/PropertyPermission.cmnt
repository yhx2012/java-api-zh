<!-- BEGIN KEY -->
public final class java.util.PropertyPermission extends java.security.BasicPermission
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class is for property permissions.

 <P>
 The name is the name of the property ("java.home",
 "os.name", etc). The naming
 convention follows the  hierarchical property naming convention.
 Also, an asterisk
 may appear at the end of the name, following a ".", or by itself, to
 signify a wildcard match. For example: "java.*" or "*" is valid,
 "*java" or "a*b" is not valid.
 <P>
 <P>
 The actions to be granted are passed to the constructor in a string containing
 a list of zero or more comma-separated keywords. The possible keywords are
 "read" and "write". Their meaning is defined as follows:
 <P>
 <DL>
    <DT> read
    <DD> read permission. Allows <code>System.getProperty</code> to
         be called.
    <DT> write
    <DD> write permission. Allows <code>System.setProperty</code> to
         be called.
 </DL>
 <P>
 The actions string is converted to lowercase before processing.
 <P>
 Care should be taken before granting code permission to access
 certain system properties.  For example, granting permission to
 access the "java.home" system property gives potentially malevolent
 code sensitive information about the system environment (the Java
 installation directory).  Also, granting permission to access
 the "user.name" and "user.home" system properties gives potentially
 malevolent code sensitive information about the user environment
 (the user's account name and home directory).

 @see java.security.BasicPermission
 @see java.security.Permission
 @see java.security.Permissions
 @see java.security.PermissionCollection
 @see java.lang.SecurityManager

 @version 1.35 06/04/21

 @author Roland Schemers
 @since 1.2

 @serial exclude

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.util.PropertyPermission.actions
<!-- END KEY -->
<!-- BEGIN DATA -->
 The actions string.

 @serial 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.PropertyPermission(String name, String actions)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new PropertyPermission object with the specified name.
 The name is the name of the system property, and
 <i>actions</i> contains a comma-separated list of the
 desired actions granted on the property. Possible actions are
 "read" and "write".

 @param name the name of the PropertyPermission.
 @param actions the actions string.

 @throws NullPointerException if <code>name</code> is <code>null</code>.
 @throws IllegalArgumentException if <code>name</code> is empty or if
 <code>actions</code> is invalid.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.PropertyPermission.implies(Permission p)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks if this PropertyPermission object "implies" the specified
 permission.
 <P>
 More specifically, this method returns true if:<p>
 <ul>
 <li> <i>p</i> is an instanceof PropertyPermission,<p>
 <li> <i>p</i>'s actions are a subset of this
 object's actions, and <p>
 <li> <i>p</i>'s name is implied by this object's
      name. For example, "java.*" implies "java.home".
 </ul>
 @param p the permission to check against.

 @return true if the specified permission is implied by this object,
 false if not.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.PropertyPermission.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Checks two PropertyPermission objects for equality. Checks that <i>obj</i> is
 a PropertyPermission, and has the same name and actions as this object.
 <P>
 @param obj the object we are testing for equality with this object.
 @return true if obj is a PropertyPermission, and has the same name and
 actions as this PropertyPermission object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.PropertyPermission.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the hash code value for this object.
 The hash code used is the hash code of this permissions name, that is,
 <code>getName().hashCode()</code>, where <code>getName</code> is
 from the Permission superclass.

 @return a hash code value for this object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.PropertyPermission.getActions()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the "canonical string representation" of the actions.
 That is, this method always returns present actions in the following order:
 read, write. For example, if this PropertyPermission object
 allows both write and read actions, a call to <code>getActions</code>
 will return the string "read,write".

 @return the canonical string representation of the actions.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.security.PermissionCollection java.util.PropertyPermission.newPermissionCollection()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a new PermissionCollection object for storing
 PropertyPermission objects.
 <p>

 @return a new PermissionCollection object suitable for storing
 PropertyPermissions.

<!-- END DATA -->
<!-- BEGIN KEY -->
private synchronized void java.util.PropertyPermission.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 readObject is called to restore the state of the PropertyPermission from
 a stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
private synchronized void java.util.PropertyPermission.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 WriteObject is called to save the state of the PropertyPermission
 to a stream. The actions are serialized, and the superclass
 takes care of the name.

<!-- END DATA -->
