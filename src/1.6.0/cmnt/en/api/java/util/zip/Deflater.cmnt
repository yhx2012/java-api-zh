<!-- BEGIN KEY -->
public class java.util.zip.Deflater extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class provides support for general purpose compression using the
 popular ZLIB compression library. The ZLIB compression library was
 initially developed as part of the PNG graphics standard and is not
 protected by patents. It is fully described in the specifications at 
 the <a href="package-summary.html#package_description">java.util.zip
 package description</a>.

 <p>The following code fragment demonstrates a trivial compression
 and decompression of a string using <tt>Deflater</tt> and
 <tt>Inflater</tt>.

 <blockquote><pre>
 try {
     // Encode a String into bytes
     String inputString = "blahblahblah??";
     byte[] input = inputString.getBytes("UTF-8");

     // Compress the bytes
     byte[] output = new byte[100];
     Deflater compresser = new Deflater();
     compresser.setInput(input);
     compresser.finish();
     int compressedDataLength = compresser.deflate(output);

     // Decompress the bytes
     Inflater decompresser = new Inflater();
     decompresser.setInput(output, 0, compressedDataLength);
     byte[] result = new byte[100];
     int resultLength = decompresser.inflate(result);
     decompresser.end();

     // Decode the bytes into a String
     String outputString = new String(result, 0, resultLength, "UTF-8");
 } catch(java.io.UnsupportedEncodingException ex) {
     // handle
 } catch (java.util.zip.DataFormatException ex) {
     // handle
 }
 </pre></blockquote>

 @see		Inflater
 @version 	1.45, 04/07/06
 @author 	David Connelly

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.zip.Deflater.DEFLATED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compression method for the deflate algorithm (the only one currently
 supported).

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.zip.Deflater.NO_COMPRESSION
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compression level for no compression.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.zip.Deflater.BEST_SPEED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compression level for fastest compression.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.zip.Deflater.BEST_COMPRESSION
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compression level for best compression.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.zip.Deflater.DEFAULT_COMPRESSION
<!-- END KEY -->
<!-- BEGIN DATA -->
 Default compression level.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.zip.Deflater.FILTERED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compression strategy best used for data consisting mostly of small
 values with a somewhat random distribution. Forces more Huffman coding
 and less string matching.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.zip.Deflater.HUFFMAN_ONLY
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compression strategy for Huffman coding only.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.zip.Deflater.DEFAULT_STRATEGY
<!-- END KEY -->
<!-- BEGIN DATA -->
 Default compression strategy.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.Deflater(int level, boolean nowrap)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new compressor using the specified compression level.
 If 'nowrap' is true then the ZLIB header and checksum fields will
 not be used in order to support the compression format used in
 both GZIP and PKZIP.
 @param level the compression level (0-9)
 @param nowrap if true then use GZIP compatible compression

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.Deflater(int level)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Creates a new compressor using the specified compression level.
 Compressed data will be generated in ZLIB format.
 @param level the compression level (0-9)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.Deflater()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new compressor with the default compression level.
 Compressed data will be generated in ZLIB format.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.zip.Deflater.setInput(byte[] b, int off, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets input data for compression. This should be called whenever
 needsInput() returns true indicating that more input data is required.
 @param b the input data bytes
 @param off the start offset of the data
 @param len the length of the data
 @see Deflater#needsInput

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.Deflater.setInput(byte[] b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets input data for compression. This should be called whenever
 needsInput() returns true indicating that more input data is required.
 @param b the input data bytes
 @see Deflater#needsInput

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.zip.Deflater.setDictionary(byte[] b, int off, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets preset dictionary for compression. A preset dictionary is used
 when the history buffer can be predetermined. When the data is later
 uncompressed with Inflater.inflate(), Inflater.getAdler() can be called
 in order to get the Adler-32 value of the dictionary required for
 decompression.
 @param b the dictionary data bytes
 @param off the start offset of the data
 @param len the length of the data
 @see Inflater#inflate
 @see Inflater#getAdler

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.Deflater.setDictionary(byte[] b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets preset dictionary for compression. A preset dictionary is used
 when the history buffer can be predetermined. When the data is later
 uncompressed with Inflater.inflate(), Inflater.getAdler() can be called
 in order to get the Adler-32 value of the dictionary required for
 decompression.
 @param b the dictionary data bytes
 @see Inflater#inflate
 @see Inflater#getAdler

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.zip.Deflater.setStrategy(int strategy)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the compression strategy to the specified value.
 @param strategy the new compression strategy
 @exception IllegalArgumentException if the compression strategy is
				           invalid

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.zip.Deflater.setLevel(int level)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the current compression level to the specified value.
 @param level the new compression level (0-9)
 @exception IllegalArgumentException if the compression level is invalid

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.zip.Deflater.needsInput()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the input data buffer is empty and setInput()
 should be called in order to provide more input.
 @return true if the input data buffer is empty and setInput()
 should be called in order to provide more input

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.zip.Deflater.finish()
<!-- END KEY -->
<!-- BEGIN DATA -->
 When called, indicates that compression should end with the current
 contents of the input buffer.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.util.zip.Deflater.finished()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the end of the compressed data output stream has
 been reached.
 @return true if the end of the compressed data output stream has
 been reached

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.util.zip.Deflater.deflate(byte[] b, int off, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fills specified buffer with compressed data. Returns actual number
 of bytes of compressed data. A return value of 0 indicates that
 needsInput() should be called in order to determine if more input
 data is required.
 @param b the buffer for the compressed data
 @param off the start offset of the data
 @param len the maximum number of bytes of compressed data
 @return the actual number of bytes of compressed data

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.Deflater.deflate(byte[] b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fills specified buffer with compressed data. Returns actual number
 of bytes of compressed data. A return value of 0 indicates that
 needsInput() should be called in order to determine if more input
 data is required.
 @param b the buffer for the compressed data
 @return the actual number of bytes of compressed data

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.util.zip.Deflater.getAdler()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the ADLER-32 value of the uncompressed data.
 @return the ADLER-32 value of the uncompressed data

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.Deflater.getTotalIn()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the total number of uncompressed bytes input so far.

 <p>Since the number of bytes may be greater than
 Integer.MAX_VALUE, the {@link #getBytesRead()} method is now
 the preferred means of obtaining this information.</p>

 @return the total number of uncompressed bytes input so far

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized long java.util.zip.Deflater.getBytesRead()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the total number of uncompressed bytes input so far.</p>

 @return the total (non-negative) number of uncompressed bytes input so far
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.Deflater.getTotalOut()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the total number of compressed bytes output so far.

 <p>Since the number of bytes may be greater than
 Integer.MAX_VALUE, the {@link #getBytesWritten()} method is now
 the preferred means of obtaining this information.</p>

 @return the total number of compressed bytes output so far

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized long java.util.zip.Deflater.getBytesWritten()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the total number of compressed bytes output so far.</p>

 @return the total (non-negative) number of compressed bytes output so far
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.zip.Deflater.reset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets deflater so that a new set of input data can be processed.
 Keeps current compression level and strategy settings.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.zip.Deflater.end()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Closes the compressor and discards any unprocessed input.
 This method should be called when the compressor is no longer
 being used, but will also be called automatically by the
 finalize() method. Once this method is called, the behavior
 of the Deflater object is undefined.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.util.zip.Deflater.finalize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Closes the compressor when garbage is collected.

<!-- END DATA -->
