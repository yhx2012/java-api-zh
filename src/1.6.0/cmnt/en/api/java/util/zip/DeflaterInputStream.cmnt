<!-- BEGIN KEY -->
public class java.util.zip.DeflaterInputStream extends java.io.FilterInputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
 Implements an input stream filter for compressing data in the "deflate"
 compression format.

 @version	1.1
 @since	1.6
 @author	David R Tribble (david@tribble.com)

 @see	DeflaterOutputStream
 @see	InflaterOutputStream
 @see	InflaterInputStream

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.util.zip.Deflater java.util.zip.DeflaterInputStream.def
<!-- END KEY -->
<!-- BEGIN DATA -->
Compressor for this stream. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected final byte[] java.util.zip.DeflaterInputStream.buf
<!-- END KEY -->
<!-- BEGIN DATA -->
Input buffer for reading compressed data. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.DeflaterInputStream(InputStream in)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new input stream with a default compressor and buffer
 size.

 @param in input stream to read the uncompressed data to
 @throws NullPointerException if {@code in} is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.DeflaterInputStream(InputStream in, Deflater defl)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new input stream with the specified compressor and a
 default buffer size.

 @param in input stream to read the uncompressed data to
 @param defl compressor ("deflater") for this stream
 @throws NullPointerException if {@code in} or {@code defl} is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.DeflaterInputStream(InputStream in, Deflater defl, int bufLen)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new input stream with the specified compressor and buffer
 size.

 @param in input stream to read the uncompressed data to
 @param defl compressor ("deflater") for this stream
 @param bufLen compression buffer size
 @throws IllegalArgumentException if {@code bufLen} is <= 0
 @throws NullPointerException if {@code in} or {@code defl} is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.DeflaterInputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Closes this input stream and its underlying input stream, discarding
 any pending uncompressed data.

 @throws IOException if an I/O error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.DeflaterInputStream.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads a single byte of compressed data from the input stream.
 This method will block until some input can be read and compressed.

 @return a single byte of compressed data, or -1 if the end of the
 uncompressed input stream is reached
 @throws IOException if an I/O error occurs or if this stream is
 already closed

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.DeflaterInputStream.read(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads compressed data into a byte array.
 This method will block until some input can be read and compressed.

 @param b buffer into which the data is read
 @param off starting offset of the data within {@code b}
 @param len maximum number of compressed bytes to read into {@code b}
 @return the actual number of bytes read, or -1 if the end of the
 uncompressed input stream is reached
 @throws IndexOutOfBoundsException  if {@code len} > {@code b.length -
 off}
 @throws IOException if an I/O error occurs or if this input stream is
 already closed

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.zip.DeflaterInputStream.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Skips over and discards data from the input stream.
 This method may block until the specified number of bytes are read and
 skipped. <em>Note:</em> While {@code n} is given as a {@code long},
 the maximum number of bytes which can be skipped is
 {@code Integer.MAX_VALUE}.

 @param n number of bytes to be skipped
 @return the actual number of bytes skipped
 @throws IOException if an I/O error occurs or if this stream is
 already closed

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.DeflaterInputStream.available() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns 0 after EOF has been reached, otherwise always return 1.
 <p>
 Programs should not count on this method to return the actual number
 of bytes that could be read without blocking
 @return zero after the end of the underlying input stream has been
 reached, otherwise always returns 1
 @throws IOException if an I/O error occurs or if this stream is
 already closed

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.zip.DeflaterInputStream.markSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Always returns {@code false} because this input stream does not support
 the {@link #mark mark()} and {@link #reset reset()} methods.

 @return false, always

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.DeflaterInputStream.mark(int limit)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <i>This operation is not supported</i>.

 @param limit maximum bytes that can be read before invalidating the position marker

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.DeflaterInputStream.reset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <i>This operation is not supported</i>.

 @throws IOException always thrown

<!-- END DATA -->
