<!-- BEGIN KEY -->
public class java.util.zip.DeflaterOutputStream extends java.io.FilterOutputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class implements an output stream filter for compressing data in
 the "deflate" compression format. It is also used as the basis for other
 types of compression filters, such as GZIPOutputStream.

 @see		Deflater
 @version 	1.36, 03/13/06
 @author 	David Connelly

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.zip.Deflater java.util.zip.DeflaterOutputStream.def
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compressor for this stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected byte[] java.util.zip.DeflaterOutputStream.buf
<!-- END KEY -->
<!-- BEGIN DATA -->
 Output buffer for writing compressed data.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.DeflaterOutputStream(OutputStream out, Deflater def, int size)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new output stream with the specified compressor and
 buffer size.
 @param out the output stream
 @param def the compressor ("deflater")
 @param size the output buffer size
 @exception IllegalArgumentException if size is <= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.DeflaterOutputStream(OutputStream out, Deflater def)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new output stream with the specified compressor and
 a default buffer size.
 @param out the output stream
 @param def the compressor ("deflater")

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.DeflaterOutputStream(OutputStream out)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new output stream with a default compressor and buffer size.
 @param out the output stream

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.DeflaterOutputStream.write(int b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a byte to the compressed output stream. This method will
 block until the byte can be written.
 @param b the byte to be written
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.DeflaterOutputStream.write(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes an array of bytes to the compressed output stream. This
 method will block until all the bytes are written.
 @param b the data to be written
 @param off the start offset of the data
 @param len the length of the data
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.DeflaterOutputStream.finish() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Finishes writing compressed data to the output stream without closing
 the underlying stream. Use this method when applying multiple filters
 in succession to the same output stream.
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.DeflaterOutputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes remaining compressed data to the output stream and closes the
 underlying stream.
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.util.zip.DeflaterOutputStream.deflate() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes next block of compressed data to the output stream.
 @throws IOException if an I/O error has occurred

<!-- END DATA -->
