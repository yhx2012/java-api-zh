<!-- BEGIN KEY -->
public class java.util.zip.Inflater extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class provides support for general purpose decompression using the
 popular ZLIB compression library. The ZLIB compression library was
 initially developed as part of the PNG graphics standard and is not
 protected by patents. It is fully described in the specifications at 
 the <a href="package-summary.html#package_description">java.util.zip
 package description</a>.

 <p>The following code fragment demonstrates a trivial compression
 and decompression of a string using <tt>Deflater</tt> and
 <tt>Inflater</tt>.

 <blockquote><pre>
 try {
     // Encode a String into bytes
     String inputString = "blahblahblah??";
     byte[] input = inputString.getBytes("UTF-8");

     // Compress the bytes
     byte[] output = new byte[100];
     Deflater compresser = new Deflater();
     compresser.setInput(input);
     compresser.finish();
     int compressedDataLength = compresser.deflate(output);

     // Decompress the bytes
     Inflater decompresser = new Inflater();
     decompresser.setInput(output, 0, compressedDataLength);
     byte[] result = new byte[100];
     int resultLength = decompresser.inflate(result);
     decompresser.end();

     // Decode the bytes into a String
     String outputString = new String(result, 0, resultLength, "UTF-8");
 } catch(java.io.UnsupportedEncodingException ex) {
     // handle
 } catch (java.util.zip.DataFormatException ex) {
     // handle
 }
 </pre></blockquote>

 @see		Deflater
 @version 	1.47, 04/07/06
 @author 	David Connelly


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.Inflater(boolean nowrap)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new decompressor. If the parameter 'nowrap' is true then
 the ZLIB header and checksum fields will not be used. This provides
 compatibility with the compression format used by both GZIP and PKZIP.
 <p>
 Note: When using the 'nowrap' option it is also necessary to provide
 an extra "dummy" byte as input. This is required by the ZLIB native
 library in order to support certain optimizations.

 @param nowrap if true then support GZIP compatible compression

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.Inflater()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new decompressor.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.zip.Inflater.setInput(byte[] b, int off, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets input data for decompression. Should be called whenever
 needsInput() returns true indicating that more input data is
 required.
 @param b the input data bytes
 @param off the start offset of the input data
 @param len the length of the input data
 @see Inflater#needsInput

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.Inflater.setInput(byte[] b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets input data for decompression. Should be called whenever
 needsInput() returns true indicating that more input data is
 required.
 @param b the input data bytes
 @see Inflater#needsInput

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.zip.Inflater.setDictionary(byte[] b, int off, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the preset dictionary to the given array of bytes. Should be
 called when inflate() returns 0 and needsDictionary() returns true
 indicating that a preset dictionary is required. The method getAdler()
 can be used to get the Adler-32 value of the dictionary needed.
 @param b the dictionary data bytes
 @param off the start offset of the data
 @param len the length of the data
 @see Inflater#needsDictionary
 @see Inflater#getAdler

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.Inflater.setDictionary(byte[] b)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the preset dictionary to the given array of bytes. Should be
 called when inflate() returns 0 and needsDictionary() returns true
 indicating that a preset dictionary is required. The method getAdler()
 can be used to get the Adler-32 value of the dictionary needed.
 @param b the dictionary data bytes
 @see Inflater#needsDictionary
 @see Inflater#getAdler

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.util.zip.Inflater.getRemaining()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the total number of bytes remaining in the input buffer.
 This can be used to find out what bytes still remain in the input
 buffer after decompression has finished.
 @return the total number of bytes remaining in the input buffer

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.util.zip.Inflater.needsInput()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if no data remains in the input buffer. This can
 be used to determine if #setInput should be called in order
 to provide more input.
 @return true if no data remains in the input buffer

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.util.zip.Inflater.needsDictionary()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if a preset dictionary is needed for decompression.
 @return true if a preset dictionary is needed for decompression
 @see Inflater#setDictionary

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.util.zip.Inflater.finished()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if the end of the compressed data stream has been
 reached.
 @return true if the end of the compressed data stream has been
 reached

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.util.zip.Inflater.inflate(byte[] b, int off, int len) throws java.util.zip.DataFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Uncompresses bytes into specified buffer. Returns actual number
 of bytes uncompressed. A return value of 0 indicates that
 needsInput() or needsDictionary() should be called in order to
 determine if more input data or a preset dictionary is required.
 In the latter case, getAdler() can be used to get the Adler-32
 value of the dictionary required.
 @param b the buffer for the uncompressed data
 @param off the start offset of the data
 @param len the maximum number of uncompressed bytes
 @return the actual number of uncompressed bytes
 @exception DataFormatException if the compressed data format is invalid
 @see Inflater#needsInput
 @see Inflater#needsDictionary

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.Inflater.inflate(byte[] b) throws java.util.zip.DataFormatException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Uncompresses bytes into specified buffer. Returns actual number
 of bytes uncompressed. A return value of 0 indicates that
 needsInput() or needsDictionary() should be called in order to
 determine if more input data or a preset dictionary is required.
 In the latter case, getAdler() can be used to get the Adler-32
 value of the dictionary required.
 @param b the buffer for the uncompressed data
 @return the actual number of uncompressed bytes
 @exception DataFormatException if the compressed data format is invalid
 @see Inflater#needsInput
 @see Inflater#needsDictionary

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.util.zip.Inflater.getAdler()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the ADLER-32 value of the uncompressed data.
 @return the ADLER-32 value of the uncompressed data

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.Inflater.getTotalIn()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the total number of compressed bytes input so far.

 <p>Since the number of bytes may be greater than
 Integer.MAX_VALUE, the {@link #getBytesRead()} method is now
 the preferred means of obtaining this information.</p>

 @return the total number of compressed bytes input so far

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized long java.util.zip.Inflater.getBytesRead()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the total number of compressed bytes input so far.</p>

 @return the total (non-negative) number of compressed bytes input so far
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.Inflater.getTotalOut()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the total number of uncompressed bytes output so far.

 <p>Since the number of bytes may be greater than
 Integer.MAX_VALUE, the {@link #getBytesWritten()} method is now
 the preferred means of obtaining this information.</p>

 @return the total number of uncompressed bytes output so far

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized long java.util.zip.Inflater.getBytesWritten()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the total number of uncompressed bytes output so far.</p>

 @return the total (non-negative) number of uncompressed bytes output so far
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.zip.Inflater.reset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets inflater so that a new set of input data can be processed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.zip.Inflater.end()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Closes the decompressor and discards any unprocessed input.
 This method should be called when the decompressor is no longer
 being used, but will also be called automatically by the finalize()
 method. Once this method is called, the behavior of the Inflater
 object is undefined.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.util.zip.Inflater.finalize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Closes the decompressor when garbage is collected.

<!-- END DATA -->
