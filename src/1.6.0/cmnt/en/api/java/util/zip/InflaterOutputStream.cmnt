<!-- BEGIN KEY -->
public class java.util.zip.InflaterOutputStream extends java.io.FilterOutputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
 Implements an output stream filter for uncompressing data stored in the
 "deflate" compression format.

 @version	1.1
 @since	1.6
 @author	David R Tribble (david@tribble.com)

 @see	InflaterInputStream
 @see	DeflaterInputStream
 @see	DeflaterOutputStream

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.util.zip.Inflater java.util.zip.InflaterOutputStream.inf
<!-- END KEY -->
<!-- BEGIN DATA -->
Decompressor for this stream. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected final byte[] java.util.zip.InflaterOutputStream.buf
<!-- END KEY -->
<!-- BEGIN DATA -->
Output buffer for writing uncompressed data. 
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.InflaterOutputStream(OutputStream out)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new output stream with a default decompressor and buffer
 size.

 @param out output stream to write the uncompressed data to
 @throws NullPointerException if {@code out} is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.InflaterOutputStream(OutputStream out, Inflater infl)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new output stream with the specified decompressor and a
 default buffer size.

 @param out output stream to write the uncompressed data to
 @param infl decompressor ("inflater") for this stream
 @throws NullPointerException if {@code out} or {@code infl} is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.InflaterOutputStream(OutputStream out, Inflater infl, int bufLen)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new output stream with the specified decompressor and
 buffer size.

 @param out output stream to write the uncompressed data to
 @param infl decompressor ("inflater") for this stream
 @param bufLen decompression buffer size
 @throws IllegalArgumentException if {@code bufLen} is <= 0
 @throws NullPointerException if {@code out} or {@code infl} is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.InflaterOutputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes any remaining uncompressed data to the output stream and closes
 the underlying output stream.

 @throws IOException if an I/O error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.InflaterOutputStream.flush() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Flushes this output stream, forcing any pending buffered output bytes to be
 written.

 @throws IOException if an I/O error occurs or this stream is already
 closed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.InflaterOutputStream.finish() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Finishes writing uncompressed data to the output stream without closing
 the underlying stream.  Use this method when applying multiple filters in
 succession to the same output stream.

 @throws IOException if an I/O error occurs or this stream is already
 closed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.InflaterOutputStream.write(int b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a byte to the uncompressed output stream.

 @param b a single byte of compressed data to decompress and write to
 the output stream
 @throws IOException if an I/O error occurs or this stream is already
 closed
 @throws ZipException if a compression (ZIP) format error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.InflaterOutputStream.write(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes an array of bytes to the uncompressed output stream.

 @param b buffer containing compressed data to decompress and write to
 the output stream
 @param off starting offset of the compressed data within {@code b}
 @param len number of bytes to decompress from {@code b}
 @throws IndexOutOfBoundsException if {@code off} < 0, or if
 {@code len} < 0, or if {@code len} > {@code b.length - off}
 @throws IOException if an I/O error occurs or this stream is already
 closed
 @throws NullPointerException if {@code b} is null
 @throws ZipException if a compression (ZIP) format error occurs

<!-- END DATA -->
