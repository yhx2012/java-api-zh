<!-- BEGIN KEY -->
public class java.util.zip.GZIPOutputStream extends java.util.zip.DeflaterOutputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class implements a stream filter for writing compressed data in
 the GZIP file format.
 @version 	1.23, 11/17/05
 @author 	David Connelly


<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.zip.CRC32 java.util.zip.GZIPOutputStream.crc
<!-- END KEY -->
<!-- BEGIN DATA -->
 CRC-32 of uncompressed data.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.GZIPOutputStream(OutputStream out, int size) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new output stream with the specified buffer size.
 @param out the output stream
 @param size the output buffer size
 @exception IOException If an I/O error has occurred.
 @exception IllegalArgumentException if size is <= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.GZIPOutputStream(OutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new output stream with a default buffer size.
 @param out the output stream
 @exception IOException If an I/O error has occurred.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.zip.GZIPOutputStream.write(byte[] buf, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes array of bytes to the compressed output stream. This method
 will block until all the bytes are written.
 @param buf the data to be written
 @param off the start offset of the data
 @param len the length of the data
 @exception IOException If an I/O error has occurred.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.GZIPOutputStream.finish() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Finishes writing compressed data to the output stream without closing
 the underlying stream. Use this method when applying multiple filters
 in succession to the same output stream.
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
