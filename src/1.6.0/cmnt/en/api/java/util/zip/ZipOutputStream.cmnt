<!-- BEGIN KEY -->
public class java.util.zip.ZipOutputStream extends java.util.zip.DeflaterOutputStream implements java.util.zip.ZipConstants
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class implements an output stream filter for writing files in the
 ZIP file format. Includes support for both compressed and uncompressed
 entries.

 @author	David Connelly
 @version	1.35, 07/31/06

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.zip.ZipOutputStream.STORED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compression method for uncompressed (STORED) entries.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.zip.ZipOutputStream.DEFLATED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compression method for compressed (DEFLATED) entries.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.ZipOutputStream(OutputStream out)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new ZIP output stream.
 @param out the actual output stream

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipOutputStream.setComment(String comment)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the ZIP file comment.
 @param comment the comment string
 @exception IllegalArgumentException if the length of the specified
		  ZIP file comment is greater than 0xFFFF bytes

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipOutputStream.setMethod(int method)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the default compression method for subsequent entries. This
 default will be used whenever the compression method is not specified
 for an individual ZIP file entry, and is initially set to DEFLATED.
 @param method the default compression method
 @exception IllegalArgumentException if the specified compression method
		  is invalid

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipOutputStream.setLevel(int level)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the compression level for subsequent entries which are DEFLATED.
 The default setting is DEFAULT_COMPRESSION.
 @param level the compression level (0-9)
 @exception IllegalArgumentException if the compression level is invalid

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipOutputStream.putNextEntry(ZipEntry e) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Begins writing a new ZIP file entry and positions the stream to the
 start of the entry data. Closes the current entry if still active.
 The default compression method will be used if no compression method
 was specified for the entry, and the current time will be used if
 the entry has no set modification time.
 @param e the ZIP entry to be written
 @exception ZipException if a ZIP format error has occurred
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipOutputStream.closeEntry() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Closes the current ZIP entry and positions the stream for writing
 the next entry.
 @exception ZipException if a ZIP format error has occurred
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.zip.ZipOutputStream.write(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes an array of bytes to the current ZIP entry data. This method
 will block until all the bytes are written.
 @param b the data to be written
 @param off the start offset in the data
 @param len the number of bytes that are written
 @exception ZipException if a ZIP file error has occurred
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipOutputStream.finish() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Finishes writing the contents of the ZIP output stream without closing
 the underlying stream. Use this method when applying multiple filters
 in succession to the same output stream.
 @exception ZipException if a ZIP file error has occurred
 @exception IOException if an I/O exception has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipOutputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Closes the ZIP output stream as well as the stream being filtered.
 @exception ZipException if a ZIP file error has occurred
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
