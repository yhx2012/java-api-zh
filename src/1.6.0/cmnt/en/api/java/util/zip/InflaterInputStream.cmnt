<!-- BEGIN KEY -->
public class java.util.zip.InflaterInputStream extends java.io.FilterInputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class implements a stream filter for uncompressing data in the
 "deflate" compression format. It is also used as the basis for other
 decompression filters, such as GZIPInputStream.

 @see		Inflater
 @version 	1.40, 04/07/06
 @author 	David Connelly

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.zip.Inflater java.util.zip.InflaterInputStream.inf
<!-- END KEY -->
<!-- BEGIN DATA -->
 Decompressor for this stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected byte[] java.util.zip.InflaterInputStream.buf
<!-- END KEY -->
<!-- BEGIN DATA -->
 Input buffer for decompression.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.util.zip.InflaterInputStream.len
<!-- END KEY -->
<!-- BEGIN DATA -->
 Length of input buffer.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.InflaterInputStream(InputStream in, Inflater inf, int size)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new input stream with the specified decompressor and
 buffer size.
 @param in the input stream
 @param inf the decompressor ("inflater")
 @param size the input buffer size
 @exception IllegalArgumentException if size is <= 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.InflaterInputStream(InputStream in, Inflater inf)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new input stream with the specified decompressor and a
 default buffer size.
 @param in the input stream
 @param inf the decompressor ("inflater")

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.InflaterInputStream(InputStream in)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new input stream with a default decompressor and buffer size.
 @param in the input stream

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.InflaterInputStream.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads a byte of uncompressed data. This method will block until
 enough input is available for decompression.
 @return the byte read, or -1 if end of compressed input is reached
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.InflaterInputStream.read(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads uncompressed data into an array of bytes. If <code>len</code> is not
 zero, the method will block until some input can be decompressed; otherwise,
 no bytes are read and <code>0</code> is returned.
 @param b the buffer into which the data is read
 @param off the start offset in the destination array <code>b</code>
 @param len the maximum number of bytes read
 @return the actual number of bytes read, or -1 if the end of the
         compressed input is reached or a preset dictionary is needed
 @exception  NullPointerException If <code>b</code> is <code>null</code>.
 @exception  IndexOutOfBoundsException If <code>off</code> is negative, 
 <code>len</code> is negative, or <code>len</code> is greater than 
 <code>b.length - off</code>
 @exception ZipException if a ZIP format error has occurred
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.InflaterInputStream.available() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns 0 after EOF has been reached, otherwise always return 1.
 <p>
 Programs should not count on this method to return the actual number
 of bytes that could be read without blocking.

 @return     1 before EOF and 0 after EOF.
 @exception  IOException  if an I/O error occurs.
 

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.zip.InflaterInputStream.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Skips specified number of bytes of uncompressed data.
 @param n the number of bytes to skip
 @return the actual number of bytes skipped.
 @exception IOException if an I/O error has occurred
 @exception IllegalArgumentException if n < 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.InflaterInputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Closes this input stream and releases any system resources associated
 with the stream.
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.util.zip.InflaterInputStream.fill() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fills input buffer with more data to decompress.
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.zip.InflaterInputStream.markSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tests if this input stream supports the <code>mark</code> and
 <code>reset</code> methods. The <code>markSupported</code>
 method of <code>InflaterInputStream</code> returns
 <code>false</code>.

 @return  a <code>boolean</code> indicating if this stream type supports
          the <code>mark</code> and <code>reset</code> methods.
 @see     java.io.InputStream#mark(int)
 @see     java.io.InputStream#reset()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.zip.InflaterInputStream.mark(int readlimit)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Marks the current position in this input stream.

 <p> The <code>mark</code> method of <code>InflaterInputStream</code>
 does nothing.

 @param   readlimit   the maximum limit of bytes that can be read before
                      the mark position becomes invalid.
 @see     java.io.InputStream#reset()

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.zip.InflaterInputStream.reset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Repositions this stream to the position at the time the
 <code>mark</code> method was last called on this input stream.

 <p> The method <code>reset</code> for class
 <code>InflaterInputStream</code> does nothing except throw an
 <code>IOException</code>.

 @exception  IOException  if this method is invoked.
 @see     java.io.InputStream#mark(int)
 @see     java.io.IOException

<!-- END DATA -->
