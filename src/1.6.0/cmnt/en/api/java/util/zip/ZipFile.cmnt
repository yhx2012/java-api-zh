<!-- BEGIN KEY -->
public class java.util.zip.ZipFile extends java.lang.Object implements java.util.zip.ZipConstants
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class is used to read entries from a zip file.

 <p> Unless otherwise noted, passing a <tt>null</tt> argument to a constructor
 or method in this class will cause a {@link NullPointerException} to be
 thrown.

 @version   1.78, 07/31/06
 @author	David Connelly

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.zip.ZipFile.OPEN_READ
<!-- END KEY -->
<!-- BEGIN DATA -->
 Mode flag to open a zip file for reading.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.zip.ZipFile.OPEN_DELETE
<!-- END KEY -->
<!-- BEGIN DATA -->
 Mode flag to open a zip file and mark it for deletion.  The file will be
 deleted some time between the moment that it is opened and the moment
 that it is closed, but its contents will remain accessible via the
 <tt>ZipFile</tt> object until either the close method is invoked or the
 virtual machine exits.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.ZipFile(String name) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Opens a zip file for reading.

 <p>First, if there is a security
 manager, its <code>checkRead</code> method
 is called with the <code>name</code> argument
 as its argument to ensure the read is allowed.

 @param name the name of the zip file
 @throws ZipException if a ZIP format error has occurred
 @throws IOException if an I/O error has occurred
 @throws SecurityException if a security manager exists and its
         <code>checkRead</code> method doesn't allow read access to the file.
 @see SecurityManager#checkRead(java.lang.String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.ZipFile(File file, int mode) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Opens a new <code>ZipFile</code> to read from the specified
 <code>File</code> object in the specified mode.  The mode argument
 must be either <tt>OPEN_READ</tt> or <tt>OPEN_READ | OPEN_DELETE</tt>.

 <p>First, if there is a security manager, its <code>checkRead</code>
 method is called with the <code>name</code> argument as its argument to
 ensure the read is allowed.

 @param file the ZIP file to be opened for reading
 @param mode the mode in which the file is to be opened
 @throws ZipException if a ZIP format error has occurred
 @throws IOException if an I/O error has occurred
 @throws SecurityException if a security manager exists and
         its <code>checkRead</code> method
         doesn't allow read access to the file,
         or its <code>checkDelete</code> method doesn't allow deleting
         the file when the <tt>OPEN_DELETE</tt> flag is set.
 @throws IllegalArgumentException if the <tt>mode</tt> argument is invalid
 @see SecurityManager#checkRead(java.lang.String)
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.ZipFile(File file) throws java.util.zip.ZipException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Opens a ZIP file for reading given the specified File object.
 @param file the ZIP file to be opened for reading
 @throws ZipException if a ZIP error has occurred
 @throws IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.ZipEntry java.util.zip.ZipFile.getEntry(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the zip file entry for the specified name, or null
 if not found.

 @param name the name of the entry
 @return the zip file entry, or null if not found
 @throws IllegalStateException if the zip file has been closed

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream java.util.zip.ZipFile.getInputStream(ZipEntry entry) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an input stream for reading the contents of the specified
 zip file entry.

 <p> Closing this ZIP file will, in turn, close all input
 streams that have been returned by invocations of this method.

 @param entry the zip file entry
 @return the input stream for reading the contents of the specified
 zip file entry.
 @throws ZipException if a ZIP format error has occurred
 @throws IOException if an I/O error has occurred
 @throws IllegalStateException if the zip file has been closed

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.zip.ZipFile.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the path name of the ZIP file.
 @return the path name of the ZIP file

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<? extends java.util.zip.ZipEntry> java.util.zip.ZipFile.entries()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an enumeration of the ZIP file entries.
 @return an enumeration of the ZIP file entries
 @throws IllegalStateException if the zip file has been closed

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.ZipFile.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of entries in the ZIP file.
 @return the number of entries in the ZIP file
 @throws IllegalStateException if the zip file has been closed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipFile.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Closes the ZIP file.
 <p> Closing this ZIP file will close all of the input streams
 previously returned by invocations of the {@link #getInputStream
 getInputStream} method.

 @throws IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.util.zip.ZipFile.finalize() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Ensures that the <code>close</code> method of this ZIP file is
 called when there are no more references to it.

 <p>
 Since the time when GC would invoke this method is undetermined,
 it is strongly recommended that applications invoke the <code>close</code>
 method as soon they have finished accessing this <code>ZipFile</code>.
 This will prevent holding up system resources for an undetermined
 length of time.

 @throws IOException if an I/O error has occurred
 @see    java.util.zip.ZipFile#close()

<!-- END DATA -->
