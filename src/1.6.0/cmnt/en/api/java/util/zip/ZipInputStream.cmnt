<!-- BEGIN KEY -->
public class java.util.zip.ZipInputStream extends java.util.zip.InflaterInputStream implements java.util.zip.ZipConstants
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class implements an input stream filter for reading files in the
 ZIP file format. Includes support for both compressed and uncompressed
 entries.

 @author	David Connelly
 @version	1.43, 07/31/06

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.ZipInputStream(InputStream in)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new ZIP input stream.
 @param in the actual input stream

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.ZipEntry java.util.zip.ZipInputStream.getNextEntry() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads the next ZIP file entry and positions the stream at the
 beginning of the entry data.
 @return the next ZIP file entry, or null if there are no more entries
 @exception ZipException if a ZIP file error has occurred
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipInputStream.closeEntry() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Closes the current ZIP entry and positions the stream for reading the
 next entry.
 @exception ZipException if a ZIP file error has occurred
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.ZipInputStream.available() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns 0 after EOF has reached for the current entry data,
 otherwise always return 1.
 <p>
 Programs should not count on this method to return the actual number
 of bytes that could be read without blocking.

 @return     1 before EOF and 0 after EOF has reached for current entry.
 @exception  IOException  if an I/O error occurs.


<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.ZipInputStream.read(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads from the current ZIP entry into an array of bytes.
 If <code>len</code> is not zero, the method
 blocks until some input is available; otherwise, no
 bytes are read and <code>0</code> is returned.
 @param b the buffer into which the data is read
 @param off the start offset in the destination array <code>b</code>
 @param len the maximum number of bytes read
 @return the actual number of bytes read, or -1 if the end of the
         entry is reached
 @exception  NullPointerException If <code>b</code> is <code>null</code>.
 @exception  IndexOutOfBoundsException If <code>off</code> is negative,
 <code>len</code> is negative, or <code>len</code> is greater than
 <code>b.length - off</code>
 @exception ZipException if a ZIP file error has occurred
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.zip.ZipInputStream.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Skips specified number of bytes in the current ZIP entry.
 @param n the number of bytes to skip
 @return the actual number of bytes skipped
 @exception ZipException if a ZIP file error has occurred
 @exception IOException if an I/O error has occurred
 @exception IllegalArgumentException if n < 0

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipInputStream.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Closes this input stream and releases any system resources associated
 with the stream.
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.zip.ZipEntry java.util.zip.ZipInputStream.createZipEntry(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <code>ZipEntry</code> object for the specified
 entry name.

 @param name the ZIP file entry name
 @return the ZipEntry just created

<!-- END DATA -->
