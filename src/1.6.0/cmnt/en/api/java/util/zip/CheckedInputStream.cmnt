<!-- BEGIN KEY -->
public class java.util.zip.CheckedInputStream extends java.io.FilterInputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
 An input stream that also maintains a checksum of the data being read.
 The checksum can then be used to verify the integrity of the input data.

 @see		Checksum
 @version 	1.22, 04/07/06
 @author 	David Connelly

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.CheckedInputStream(InputStream in, Checksum cksum)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an input stream using the specified Checksum.
 @param in the input stream
 @param cksum the Checksum

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.CheckedInputStream.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads a byte. Will block if no input is available.
 @return the byte read, or -1 if the end of the stream is reached.
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.CheckedInputStream.read(byte[] buf, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads into an array of bytes. If <code>len</code> is not zero, the method
 blocks until some input is available; otherwise, no
 bytes are read and <code>0</code> is returned.
 @param buf the buffer into which the data is read
 @param off the start offset in the destination array <code>b</code>
 @param len the maximum number of bytes read
 @return    the actual number of bytes read, or -1 if the end
		  of the stream is reached.
 @exception  NullPointerException If <code>buf</code> is <code>null</code>.
 @exception  IndexOutOfBoundsException If <code>off</code> is negative, 
 <code>len</code> is negative, or <code>len</code> is greater than 
 <code>buf.length - off</code>
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.zip.CheckedInputStream.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Skips specified number of bytes of input.
 @param n the number of bytes to skip
 @return the actual number of bytes skipped
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.Checksum java.util.zip.CheckedInputStream.getChecksum()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the Checksum for this input stream.
 @return the Checksum value

<!-- END DATA -->
