<!-- BEGIN KEY -->
public class java.util.zip.ZipEntry extends java.lang.Object implements java.util.zip.ZipConstants, java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class is used to represent a ZIP file entry.

 @version	1.40, 11/17/05
 @author	David Connelly

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.zip.ZipEntry.STORED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compression method for uncompressed entries.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.zip.ZipEntry.DEFLATED
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compression method for compressed (deflated) entries.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.ZipEntry(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new zip entry with the specified name.

 @param name the entry name
 @exception NullPointerException if the entry name is null
 @exception IllegalArgumentException if the entry name is longer than
		  0xFFFF bytes

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.ZipEntry(ZipEntry e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new zip entry with fields taken from the specified
 zip entry.
 @param e a zip Entry object

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.zip.ZipEntry.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of the entry.
 @return the name of the entry

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipEntry.setTime(long time)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the modification time of the entry.
 @param time the entry modification time in number of milliseconds
		   since the epoch
 @see #getTime()

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.zip.ZipEntry.getTime()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the modification time of the entry, or -1 if not specified.
 @return the modification time of the entry, or -1 if not specified
 @see #setTime(long)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipEntry.setSize(long size)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the uncompressed size of the entry data.
 @param size the uncompressed size in bytes
 @exception IllegalArgumentException if the specified size is less
		  than 0 or greater than 0xFFFFFFFF bytes
 @see #getSize()

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.zip.ZipEntry.getSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the uncompressed size of the entry data, or -1 if not known.
 @return the uncompressed size of the entry data, or -1 if not known
 @see #setSize(long)

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.zip.ZipEntry.getCompressedSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the size of the compressed entry data, or -1 if not known.
 In the case of a stored entry, the compressed size will be the same
 as the uncompressed size of the entry.
 @return the size of the compressed entry data, or -1 if not known
 @see #setCompressedSize(long)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipEntry.setCompressedSize(long csize)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the size of the compressed entry data.
 @param csize the compressed size to set to
 @see #getCompressedSize()

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipEntry.setCrc(long crc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the CRC-32 checksum of the uncompressed entry data.
 @param crc the CRC-32 value
 @exception IllegalArgumentException if the specified CRC-32 value is
		  less than 0 or greater than 0xFFFFFFFF
 @see #getCrc()

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.zip.ZipEntry.getCrc()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the CRC-32 checksum of the uncompressed entry data, or -1 if
 not known.
 @return the CRC-32 checksum of the uncompressed entry data, or -1 if
 not known
 @see #setCrc(long)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipEntry.setMethod(int method)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the compression method for the entry.
 @param method the compression method, either STORED or DEFLATED
 @exception IllegalArgumentException if the specified compression
		  method is invalid
 @see #getMethod()

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.ZipEntry.getMethod()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the compression method of the entry, or -1 if not specified.
 @return the compression method of the entry, or -1 if not specified
 @see #setMethod(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipEntry.setExtra(byte[] extra)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the optional extra field data for the entry.
 @param extra the extra field data bytes
 @exception IllegalArgumentException if the length of the specified
		  extra field data is greater than 0xFFFF bytes
 @see #getExtra()

<!-- END DATA -->
<!-- BEGIN KEY -->
public byte[] java.util.zip.ZipEntry.getExtra()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the extra field data for the entry, or null if none.
 @return the extra field data for the entry, or null if none
 @see #setExtra(byte[])

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.zip.ZipEntry.setComment(String comment)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the optional comment string for the entry.
 @param comment the comment string
 @exception IllegalArgumentException if the length of the specified
		  comment string is greater than 0xFFFF bytes
 @see #getComment()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.zip.ZipEntry.getComment()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the comment string for the entry, or null if none.
 @return the comment string for the entry, or null if none
 @see #setComment(String)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.zip.ZipEntry.isDirectory()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if this is a directory entry. A directory entry is
 defined to be one whose name ends with a '/'.
 @return true if this is a directory entry

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.zip.ZipEntry.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of the ZIP entry.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.zip.ZipEntry.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the hash code value for this entry.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.util.zip.ZipEntry.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a copy of this entry.

<!-- END DATA -->
