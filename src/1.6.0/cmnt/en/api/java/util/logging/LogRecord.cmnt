<!-- BEGIN KEY -->
public class java.util.logging.LogRecord extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 LogRecord objects are used to pass logging requests between
 the logging framework and individual log Handlers.
 <p>
 When a LogRecord is passed into the logging framework it 
 logically belongs to the framework and should no longer be
 used or updated by the client application.
 <p>
 Note that if the client application has not specified an
 explicit source method name and source class name, then the
 LogRecord class will infer them automatically when they are
 first accessed (due to a call on getSourceMethodName or
 getSourceClassName) by analyzing the call stack.  Therefore,
 if a logging Handler wants to pass off a LogRecord to another
 thread, or to transmit it over RMI, and if it wishes to subsequently
 obtain method name or class name information it should call
 one of getSourceClassName or getSourceMethodName to force
 the values to be filled in.
 <p>
 <b> Serialization notes:</b>
 <ul>
 <li>The LogRecord class is serializable.

 <li> Because objects in the parameters array may not be serializable,
 during serialization all objects in the parameters array are
 written as the corresponding Strings (using Object.toString).

 <li> The ResourceBundle is not transmitted as part of the serialized
 form, but the resource bundle name is, and the recipient object's
 readObject method will attempt to locate a suitable resource bundle.

 </ul>

 @version 1.24, 11/17/05
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.util.logging.Level java.util.logging.LogRecord.level
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial Logging message level

<!-- END DATA -->
<!-- BEGIN KEY -->
private long java.util.logging.LogRecord.sequenceNumber
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial Sequence number

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.util.logging.LogRecord.sourceClassName
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial Class that issued logging call

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.util.logging.LogRecord.sourceMethodName
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial Method that issued logging call

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.util.logging.LogRecord.message
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial Non-localized raw message text

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.util.logging.LogRecord.threadID
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial Thread ID for thread that issued logging call.

<!-- END DATA -->
<!-- BEGIN KEY -->
private long java.util.logging.LogRecord.millis
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial Event time in milliseconds since 1970

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Throwable java.util.logging.LogRecord.thrown
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial The Throwable (if any) associated with log message

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.util.logging.LogRecord.loggerName
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial Name of the source Logger.

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.util.logging.LogRecord.resourceBundleName
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial Resource bundle name to localized log message.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.logging.LogRecord(Level level, String msg)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Construct a LogRecord with the given level and message values.
 <p>
 The sequence property will be initialized with a new unique value.
 These sequence values are allocated in increasing order within a VM.
 <p>
 The millis property will be initialized to the current time.
 <p>
 The thread ID property will be initialized with a unique ID for
 the current thread.
 <p>
 All other properties will be initialized to "null". 
 
 @param level  a logging level value
 @param msg  the raw non-localized logging message (may be null)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.logging.LogRecord.getLoggerName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the source Logger name's

 @return source logger name (may be null)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.LogRecord.setLoggerName(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the source Logger name.

 @param name   the source logger name (may be null)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.ResourceBundle java.util.logging.LogRecord.getResourceBundle()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the localization resource bundle
 <p>
 This is the ResourceBundle that should be used to localize
 the message string before formatting it.  The result may
 be null if the message is not localizable, or if no suitable
 ResourceBundle is available.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.LogRecord.setResourceBundle(ResourceBundle bundle)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the localization resource bundle.

 @param bundle  localization bundle (may be null)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.logging.LogRecord.getResourceBundleName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the localization resource bundle name
 <p>
 This is the name for the ResourceBundle that should be
 used to localize the message string before formatting it.
 The result may be null if the message is not localizable.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.LogRecord.setResourceBundleName(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the localization resource bundle name.

 @param name  localization bundle name (may be null)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.logging.Level java.util.logging.LogRecord.getLevel()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the logging message level, for example Level.SEVERE.
 @return the logging message level

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.LogRecord.setLevel(Level level)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the logging message level, for example Level.SEVERE.
 @param level the logging message level

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.logging.LogRecord.getSequenceNumber()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Get the sequence number.
 <p>
 Sequence numbers are normally assigned in the LogRecord
 constructor, which assigns unique sequence numbers to
 each new LogRecord in increasing order.
 @return the sequence number

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.LogRecord.setSequenceNumber(long seq)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Set the sequence number.
 <p>
 Sequence numbers are normally assigned in the LogRecord constructor,
 so it should not normally be necessary to use this method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.logging.LogRecord.getSourceClassName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the  name of the class that (allegedly) issued the logging request.
 <p>
 Note that this sourceClassName is not verified and may be spoofed.
 This information may either have been provided as part of the
 logging call, or it may have been inferred automatically by the
 logging framework.  In the latter case, the information may only
 be approximate and may in fact describe an earlier call on the
 stack frame.
 <p>
 May be null if no information could be obtained.

 @return the source class name

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.LogRecord.setSourceClassName(String sourceClassName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the name of the class that (allegedly) issued the logging request.

 @param sourceClassName the source class name (may be null)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.logging.LogRecord.getSourceMethodName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the  name of the method that (allegedly) issued the logging request.
 <p>
 Note that this sourceMethodName is not verified and may be spoofed.
 This information may either have been provided as part of the
 logging call, or it may have been inferred automatically by the
 logging framework.  In the latter case, the information may only
 be approximate and may in fact describe an earlier call on the
 stack frame.
 <p>
 May be null if no information could be obtained.

 @return the source method name

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.LogRecord.setSourceMethodName(String sourceMethodName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the name of the method that (allegedly) issued the logging request.

 @param sourceMethodName the source method name (may be null)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.logging.LogRecord.getMessage()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the "raw" log message, before localization or formatting.
 <p>
 May be null, which is equivalent to the empty string "".
 <p>
 This message may be either the final text or a localization key.
 <p>
 During formatting, if the source logger has a localization
 ResourceBundle and if that ResourceBundle has an entry for
 this message string, then the message string is replaced
 with the localized value.

 @return the raw message string

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.LogRecord.setMessage(String message)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the "raw" log message, before localization or formatting.

 @param message the raw message string (may be null)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.util.logging.LogRecord.getParameters()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the parameters to the log message.

 @return the log message parameters.  May be null if
			there are no parameters.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.LogRecord.setParameters(java.lang.Object[] parameters)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set the parameters to the log message.

 @param parameters the log message parameters. (may be null)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.logging.LogRecord.getThreadID()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get an identifier for the thread where the message originated.
 <p>
 This is a thread identifier within the Java VM and may or
 may not map to any operating system ID.

 @return thread ID

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.LogRecord.setThreadID(int threadID)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set an identifier for the thread where the message originated.
 @param threadID 	the thread ID

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.logging.LogRecord.getMillis()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get event time in milliseconds since 1970.

 @return event time in millis since 1970

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.LogRecord.setMillis(long millis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set event time.

 @param millis event time in millis since 1970

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Throwable java.util.logging.LogRecord.getThrown()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get any throwable associated with the log record.
 <p>
 If the event involved an exception, this will be the
 exception object. Otherwise null.

 @return a throwable

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.LogRecord.setThrown(Throwable thrown)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set a throwable associated with the log event.

 @param thrown  a throwable (may be null)

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.logging.LogRecord.writeObject(ObjectOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serialData Default fields, followed by a two byte version number
 (major byte, followed by minor byte), followed by information on
 the log record parameter array.  If there is no parameter array, 
 then -1 is written.  If there is a parameter array (possible of zero
 length) then the array length is written as an integer, followed
 by String values for each parameter.  If a parameter is null, then
 a null String is written.  Otherwise the output of Object.toString()
 is written.

<!-- END DATA -->
