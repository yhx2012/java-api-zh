<!-- BEGIN KEY -->
public class java.util.logging.ErrorManager extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 ErrorManager objects can be attached to Handlers to process
 any error that occur on a Handler during Logging.
 <p>
 When processing logging output, if a Handler encounters problems
 then rather than throwing an Exception back to the issuer of
 the logging call (who is unlikely to be interested) the Handler
 should call its associated ErrorManager.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.logging.ErrorManager.GENERIC_FAILURE
<!-- END KEY -->
<!-- BEGIN DATA -->
 GENERIC_FAILURE is used for failure that don't fit
 into one of the other categories.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.logging.ErrorManager.WRITE_FAILURE
<!-- END KEY -->
<!-- BEGIN DATA -->
 WRITE_FAILURE is used when a write to an output stream fails.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.logging.ErrorManager.FLUSH_FAILURE
<!-- END KEY -->
<!-- BEGIN DATA -->
 FLUSH_FAILURE is used when a flush to an output stream fails.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.logging.ErrorManager.CLOSE_FAILURE
<!-- END KEY -->
<!-- BEGIN DATA -->
 CLOSE_FAILURE is used when a close of an output stream fails.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.logging.ErrorManager.OPEN_FAILURE
<!-- END KEY -->
<!-- BEGIN DATA -->
 OPEN_FAILURE is used when an open of an output stream fails.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.logging.ErrorManager.FORMAT_FAILURE
<!-- END KEY -->
<!-- BEGIN DATA -->
 FORMAT_FAILURE is used when formatting fails for any reason.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.logging.ErrorManager.error(String msg, Exception ex, int code)
<!-- END KEY -->
<!-- BEGIN DATA -->
 The error method is called when a Handler failure occurs.
 <p>
 This method may be overriden in subclasses.  The default
 behavior in this base class is that the first call is
 reported to System.err, and subsequent calls are ignored.

 @param msg    a descriptive string (may be null)
 @param ex     an exception (may be null)
 @param code   an error code defined in ErrorManager

<!-- END DATA -->
