<!-- BEGIN KEY -->
public class java.util.logging.StreamHandler extends java.util.logging.Handler
<!-- END KEY -->
<!-- BEGIN DATA -->
 Stream based logging <tt>Handler</tt>.
 <p>
 This is primarily intended as a base class or support class to
 be used in implementing other logging <tt>Handlers</tt>.
 <p>
 <tt>LogRecords</tt> are published to a given <tt>java.io.OutputStream</tt>.
 <p>
 <b>Configuration:</b>
 By default each <tt>StreamHandler</tt> is initialized using the following
 <tt>LogManager</tt> configuration properties.  If properties are not defined
 (or have invalid values) then the specified default values are used.
 <ul>
 <li>   java.util.logging.StreamHandler.level
	  specifies the default level for the <tt>Handler</tt>
	  (defaults to <tt>Level.INFO</tt>).
 <li>   java.util.logging.StreamHandler.filter
	  specifies the name of a <tt>Filter</tt> class to use
	   (defaults to no <tt>Filter</tt>).
 <li>   java.util.logging.StreamHandler.formatter 
	  specifies the name of a <tt>Formatter</tt> class to use
  	  (defaults to <tt>java.util.logging.SimpleFormatter</tt>).
 <li>   java.util.logging.StreamHandler.encoding 
	  the name of the character set encoding to use (defaults to
	  the default platform encoding).
 </ul>

 @version 1.19, 11/17/05
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.logging.StreamHandler()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a <tt>StreamHandler</tt>, with no current output stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.logging.StreamHandler(OutputStream out, Formatter formatter)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a <tt>StreamHandler</tt> with a given <tt>Formatter</tt>
 and output stream.
 <p>
 @param out         the target output stream
 @param formatter   Formatter to be used to format output

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.util.logging.StreamHandler.setOutputStream(OutputStream out) throws java.lang.SecurityException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Change the output stream.
 <P>
 If there is a current output stream then the <tt>Formatter</tt>'s 
 tail string is written and the stream is flushed and closed.
 Then the output stream is replaced with the new output stream.

 @param out   New output stream.  May not be null.
 @exception  SecurityException  if a security manager exists and if
             the caller does not have <tt>LoggingPermission("control")</tt>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.logging.StreamHandler.setEncoding(String encoding) throws java.lang.SecurityException, java.io.UnsupportedEncodingException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set (or change) the character encoding used by this <tt>Handler</tt>.
 <p>
 The encoding should be set before any <tt>LogRecords</tt> are written
 to the <tt>Handler</tt>.

 @param encoding  The name of a supported character encoding.
	      May be null, to indicate the default platform encoding.
 @exception  SecurityException  if a security manager exists and if
             the caller does not have <tt>LoggingPermission("control")</tt>.
 @exception  UnsupportedEncodingException if the named encoding is
		not supported.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.logging.StreamHandler.publish(LogRecord record)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Format and publish a <tt>LogRecord</tt>.
 <p>
 The <tt>StreamHandler</tt> first checks if there is an <tt>OutputStream</tt>
 and if the given <tt>LogRecord</tt> has at least the required log level.
 If not it silently returns.  If so, it calls any associated
 <tt>Filter</tt> to check if the record should be published.  If so,
 it calls its <tt>Formatter</tt> to format the record and then writes 
 the result to the current output stream.
 <p>
 If this is the first <tt>LogRecord</tt> to be written to a given
 <tt>OutputStream</tt>, the <tt>Formatter</tt>'s "head" string is 
 written to the stream before the <tt>LogRecord</tt> is written.

 @param  record  description of the log event. A null record is
                 silently ignored and is not published

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.logging.StreamHandler.isLoggable(LogRecord record)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Check if this <tt>Handler</tt> would actually log a given <tt>LogRecord</tt>.
 <p>
 This method checks if the <tt>LogRecord</tt> has an appropriate level and 
 whether it satisfies any <tt>Filter</tt>.  It will also return false if
 no output stream has been assigned yet or the LogRecord is Null.
 <p>
 @param record  a <tt>LogRecord</tt>
 @return true if the <tt>LogRecord</tt> would be logged.


<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.logging.StreamHandler.flush()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Flush any buffered messages.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.util.logging.StreamHandler.close() throws java.lang.SecurityException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Close the current output stream.
 <p>
 The <tt>Formatter</tt>'s "tail" string is written to the stream before it
 is closed.  In addition, if the <tt>Formatter</tt>'s "head" string has not
 yet been written to the stream, it will be written before the
 "tail" string.

 @exception  SecurityException  if a security manager exists and if
             the caller does not have LoggingPermission("control").
 @exception  SecurityException  if a security manager exists and if
             the caller does not have LoggingPermission("control").

<!-- END DATA -->
