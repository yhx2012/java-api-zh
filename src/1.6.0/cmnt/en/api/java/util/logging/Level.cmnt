<!-- BEGIN KEY -->
public class java.util.logging.Level extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 The Level class defines a set of standard logging levels that
 can be used to control logging output.  The logging Level objects
 are ordered and are specified by ordered integers.  Enabling logging
 at a given level also enables logging at all higher levels.
 <p>
 Clients should normally use the predefined Level constants such
 as Level.SEVERE.
 <p>
 The levels in descending order are:
 <ul>
 <li>SEVERE (highest value)
 <li>WARNING
 <li>INFO
 <li>CONFIG
 <li>FINE
 <li>FINER
 <li>FINEST  (lowest value)
 </ul>
 In addition there is a level OFF that can be used to turn
 off logging, and a level ALL that can be used to enable
 logging of all messages.
 <p>
 It is possible for third parties to define additional logging
 levels by subclassing Level.  In such cases subclasses should
 take care to chose unique integer level values and to ensure that 
 they maintain the Object uniqueness property across serialization
 by defining a suitable readResolve method.

 @version 1.20, 11/17/05
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.logging.Level java.util.logging.Level.OFF
<!-- END KEY -->
<!-- BEGIN DATA -->
 OFF is a special level that can be used to turn off logging.
 This level is initialized to <CODE>Integer.MAX_VALUE</CODE>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.logging.Level java.util.logging.Level.SEVERE
<!-- END KEY -->
<!-- BEGIN DATA -->
 SEVERE is a message level indicating a serious failure.
 <p>
 In general SEVERE messages should describe events that are
 of considerable importance and which will prevent normal
 program execution.   They should be reasonably intelligible
 to end users and to system administrators.
 This level is initialized to <CODE>1000</CODE>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.logging.Level java.util.logging.Level.WARNING
<!-- END KEY -->
<!-- BEGIN DATA -->
 WARNING is a message level indicating a potential problem.
 <p>
 In general WARNING messages should describe events that will
 be of interest to end users or system managers, or which
 indicate potential problems.
 This level is initialized to <CODE>900</CODE>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.logging.Level java.util.logging.Level.INFO
<!-- END KEY -->
<!-- BEGIN DATA -->
 INFO is a message level for informational messages.
 <p>
 Typically INFO messages will be written to the console
 or its equivalent.  So the INFO level should only be 
 used for reasonably significant messages that will
 make sense to end users and system admins.
 This level is initialized to <CODE>800</CODE>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.logging.Level java.util.logging.Level.CONFIG
<!-- END KEY -->
<!-- BEGIN DATA -->
 CONFIG is a message level for static configuration messages.
 <p>
 CONFIG messages are intended to provide a variety of static
 configuration information, to assist in debugging problems
 that may be associated with particular configurations.
 For example, CONFIG message might include the CPU type,
 the graphics depth, the GUI look-and-feel, etc.
 This level is initialized to <CODE>700</CODE>. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.logging.Level java.util.logging.Level.FINE
<!-- END KEY -->
<!-- BEGIN DATA -->
 FINE is a message level providing tracing information.
 <p>
 All of FINE, FINER, and FINEST are intended for relatively
 detailed tracing.  The exact meaning of the three levels will
 vary between subsystems, but in general, FINEST should be used
 for the most voluminous detailed output, FINER for somewhat
 less detailed output, and FINE for the  lowest volume (and
 most important) messages.
 <p>
 In general the FINE level should be used for information
 that will be broadly interesting to developers who do not have
 a specialized interest in the specific subsystem.
 <p>
 FINE messages might include things like minor (recoverable)
 failures.  Issues indicating potential performance problems
 are also worth logging as FINE.
 This level is initialized to <CODE>500</CODE>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.logging.Level java.util.logging.Level.FINER
<!-- END KEY -->
<!-- BEGIN DATA -->
 FINER indicates a fairly detailed tracing message.
 By default logging calls for entering, returning, or throwing
 an exception are traced at this level.
 This level is initialized to <CODE>400</CODE>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.logging.Level java.util.logging.Level.FINEST
<!-- END KEY -->
<!-- BEGIN DATA -->
 FINEST indicates a highly detailed tracing message.
 This level is initialized to <CODE>300</CODE>. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.logging.Level java.util.logging.Level.ALL
<!-- END KEY -->
<!-- BEGIN DATA -->
 ALL indicates that all messages should be logged.
 This level is initialized to <CODE>Integer.MIN_VALUE</CODE>.

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.String java.util.logging.Level.name
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial  The non-localized name of the level.

<!-- END DATA -->
<!-- BEGIN KEY -->
private final int java.util.logging.Level.value
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial  The integer value of the level.

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.String java.util.logging.Level.resourceBundleName
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serial The resource bundle name to be used in localizing the level name.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.logging.Level(String name, int value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a named Level with a given integer value.
 <p>
 Note that this constructor is "protected" to allow subclassing.
 In general clients of logging should use one of the constant Level
 objects such as SEVERE or FINEST.  However, if clients need to
 add new logging levels, they may subclass Level and define new
 constants.
 @param name  the name of the Level, for example "SEVERE".
 @param value an integer value for the level.
 @throws NullPointerException if the name is null

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.logging.Level(String name, int value, String resourceBundleName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a named Level with a given integer value and a
 given localization resource name.
 <p>
 @param name  the name of the Level, for example "SEVERE".
 @param value an integer value for the level.
 @param resourceBundleName name of a resource bundle to use in
    localizing the given name. If the resourceBundleName is null 
    or an empty string, it is ignored. 
 @throws NullPointerException if the name is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.logging.Level.getResourceBundleName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the level's localization resource bundle name, or
 null if no localization bundle is defined.

 @return localization resource bundle name

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.logging.Level.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the non-localized string name of the Level.

 @return non-localized name

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.logging.Level.getLocalizedName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the localized string name of the Level, for
 the current default locale. 
 <p>
 If no localization information is available, the
 non-localized name is returned.

 @return localized name

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.util.logging.Level.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @return the non-localized name of the Level, for example "INFO".

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.util.logging.Level.intValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the integer value for this level.  This integer value
 can be used for efficient ordering comparisons between
 Level objects.
 @return the integer value for this level.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.util.logging.Level java.util.logging.Level.parse(String name) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Parse a level name string into a Level.
 <p>
 The argument string may consist of either a level name
 or an integer value.
 <p>
 For example:
 <ul>
 <li>	"SEVERE"
 <li>	"1000"
 </ul>
 @param  name   string to be parsed
 @throws NullPointerException if the name is null
 @throws IllegalArgumentException if the value is not valid. 
 Valid values are integers between <CODE>Integer.MIN_VALUE</CODE> 
 and <CODE>Integer.MAX_VALUE</CODE>, and all known level names. 
 Known names are the levels defined by this class (i.e. <CODE>FINE</CODE>,
 <CODE>FINER</CODE>, <CODE>FINEST</CODE>), or created by this class with
 appropriate package access, or new levels defined or created
 by subclasses.

 @return The parsed value. Passing an integer that corresponds to a known name
 (eg 700) will return the associated name (eg <CODE>CONFIG</CODE>).
 Passing an integer that does not (eg 1) will return a new level name
 initialized to that value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.logging.Level.equals(Object ox)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compare two objects for value equality.
 @return true if and only if the two objects have the same level value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.logging.Level.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Generate a hashcode.
 @return a hashcode based on the level value

<!-- END DATA -->
