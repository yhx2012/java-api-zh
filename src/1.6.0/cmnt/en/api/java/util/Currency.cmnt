<!-- BEGIN KEY -->
public final class java.util.Currency extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 Represents a currency. Currencies are identified by their ISO 4217 currency
 codes. Visit the <a href="http://www.bsi-global.com/">
 BSi web site</a> for more information, including a table of
 currency codes.
 <p>
 The class is designed so that there's never more than one
 <code>Currency</code> instance for any given currency. Therefore, there's
 no public constructor. You obtain a <code>Currency</code> instance using
 the <code>getInstance</code> methods.

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.lang.String java.util.Currency.currencyCode
<!-- END KEY -->
<!-- BEGIN DATA -->
 ISO 4217 currency code for this currency.

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Currency java.util.Currency.getInstance(String currencyCode)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>Currency</code> instance for the given currency code.

 @param currencyCode the ISO 4217 code of the currency
 @return the <code>Currency</code> instance for the given currency code
 @exception NullPointerException if <code>currencyCode</code> is null
 @exception IllegalArgumentException if <code>currencyCode</code> is not
 a supported ISO 4217 code.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.Currency java.util.Currency.getInstance(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>Currency</code> instance for the country of the
 given locale. The language and variant components of the locale
 are ignored. The result may vary over time, as countries change their
 currencies. For example, for the original member countries of the
 European Monetary Union, the method returns the old national currencies
 until December 31, 2001, and the Euro from January 1, 2002, local time
 of the respective countries.
 <p>
 The method returns <code>null</code> for territories that don't
 have a currency, such as Antarctica.

 @param locale the locale for whose country a <code>Currency</code>
 instance is needed
 @return the <code>Currency</code> instance for the country of the given
 locale, or null
 @exception NullPointerException if <code>locale</code> or its country
 code is null
 @exception IllegalArgumentException if the country of the given locale
 is not a supported ISO 3166 country code.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.Currency.getCurrencyCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the ISO 4217 currency code of this currency.

 @return the ISO 4217 currency code of this currency.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.Currency.getSymbol()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the symbol of this currency for the default locale.
 For example, for the US Dollar, the symbol is "$" if the default
 locale is the US, while for other locales it may be "US$". If no
 symbol can be determined, the ISO 4217 currency code is returned.

 @return the symbol of this currency for the default locale

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.Currency.getSymbol(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the symbol of this currency for the specified locale.
 For example, for the US Dollar, the symbol is "$" if the specified
 locale is the US, while for other locales it may be "US$". If no
 symbol can be determined, the ISO 4217 currency code is returned.

 @param locale the locale for which a display name for this currency is
 needed
 @return the symbol of this currency for the specified locale
 @exception NullPointerException if <code>locale</code> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.Currency.getDefaultFractionDigits()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the default number of fraction digits used with this currency.
 For example, the default number of fraction digits for the Euro is 2,
 while for the Japanese Yen it's 0.
 In the case of pseudo-currencies, such as IMF Special Drawing Rights,
 -1 is returned.

 @return the default number of fraction digits used with this currency

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.Currency.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the ISO 4217 currency code of this currency.

 @return the ISO 4217 currency code of this currency

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Object java.util.Currency.readResolve()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resolves instances being deserialized to a single instance per currency.

<!-- END DATA -->
