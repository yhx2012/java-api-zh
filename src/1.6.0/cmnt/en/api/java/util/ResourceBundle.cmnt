<!-- BEGIN KEY -->
public abstract class java.util.ResourceBundle extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->

 Resource bundles contain locale-specific objects.
 When your program needs a locale-specific resource,
 a <code>String</code> for example, your program can load it
 from the resource bundle that is appropriate for the
 current user's locale. In this way, you can write
 program code that is largely independent of the user's
 locale isolating most, if not all, of the locale-specific
 information in resource bundles.

 <p>
 This allows you to write programs that can:
 <UL type=SQUARE>
 <LI> be easily localized, or translated, into different languages
 <LI> handle multiple locales at once
 <LI> be easily modified later to support even more locales
 </UL>

 <P>
 Resource bundles belong to families whose members share a common base 
 name, but whose names also have additional components that identify 
 their locales. For example, the base name of a family of resource 
 bundles might be "MyResources". The family should have a default 
 resource bundle which simply has the same name as its family - 
 "MyResources" - and will be used as the bundle of last resort if a
 specific locale is not supported. The family can then provide as
 many locale-specific members as needed, for example a German one
 named "MyResources_de".

 <P>
 Each resource bundle in a family contains the same items, but the items have
 been translated for the locale represented by that resource bundle.
 For example, both "MyResources" and "MyResources_de" may have a
 <code>String</code> that's used on a button for canceling operations.
 In "MyResources" the <code>String</code> may contain "Cancel" and in
 "MyResources_de" it may contain "Abbrechen".

 <P>
 If there are different resources for different countries, you
 can make specializations: for example, "MyResources_de_CH" contains objects for
 the German language (de) in Switzerland (CH). If you want to only
 modify some of the resources
 in the specialization, you can do so.

 <P>
 When your program needs a locale-specific object, it loads
 the <code>ResourceBundle</code> class using the
 {@link #getBundle(java.lang.String, java.util.Locale) getBundle}
 method:
 <blockquote>
 <pre>
 ResourceBundle myResources =
      ResourceBundle.getBundle("MyResources", currentLocale);
 </pre>
 </blockquote>

 <P>
 Resource bundles contain key/value pairs. The keys uniquely
 identify a locale-specific object in the bundle. Here's an
 example of a <code>ListResourceBundle</code> that contains
 two key/value pairs:
 <blockquote>
 <pre>
 public class MyResources extends ListResourceBundle {
     protected Object[][] getContents() {
         return new Object[][] {
             // LOCALIZE THE SECOND STRING OF EACH ARRAY (e.g., "OK")
             {"OkKey", "OK"},
             {"CancelKey", "Cancel"},
             // END OF MATERIAL TO LOCALIZE
        };
     }
 }
 </pre>
 </blockquote>
 Keys are always <code>String</code>s.
 In this example, the keys are "OkKey" and "CancelKey".
 In the above example, the values
 are also <code>String</code>s--"OK" and "Cancel"--but
 they don't have to be. The values can be any type of object.

 <P>
 You retrieve an object from resource bundle using the appropriate
 getter method. Because "OkKey" and "CancelKey"
 are both strings, you would use <code>getString</code> to retrieve them:
 <blockquote>
 <pre>
 button1 = new Button(myResources.getString("OkKey"));
 button2 = new Button(myResources.getString("CancelKey"));
 </pre>
 </blockquote>
 The getter methods all require the key as an argument and return
 the object if found. If the object is not found, the getter method
 throws a <code>MissingResourceException</code>.

 <P>
 Besides <code>getString</code>, <code>ResourceBundle</code> also provides
 a method for getting string arrays, <code>getStringArray</code>,
 as well as a generic <code>getObject</code> method for any other
 type of object. When using <code>getObject</code>, you'll
 have to cast the result to the appropriate type. For example:
 <blockquote>
 <pre>
 int[] myIntegers = (int[]) myResources.getObject("intList");
 </pre>
 </blockquote>

 <P>
 The Java Platform provides two subclasses of <code>ResourceBundle</code>,
 <code>ListResourceBundle</code> and <code>PropertyResourceBundle</code>,
 that provide a fairly simple way to create resources.
 As you saw briefly in a previous example, <code>ListResourceBundle</code>
 manages its resource as a list of key/value pairs.
 <code>PropertyResourceBundle</code> uses a properties file to manage
 its resources.

 <p>
 If <code>ListResourceBundle</code> or <code>PropertyResourceBundle</code>
 do not suit your needs, you can write your own <code>ResourceBundle</code>
 subclass.  Your subclasses must override two methods: <code>handleGetObject</code>
 and <code>getKeys()</code>.

 <h4>ResourceBundle.Control</h4>

 The {@link ResourceBundle.Control} class provides information necessary
 to perform the bundle loading process by the <code>getBundle</code>
 factory methods that take a <code>ResourceBundle.Control</code>
 instance. You can implement your own subclass in order to enable
 non-standard resource bundle formats, change the search strategy, or
 define caching parameters. Refer to the descriptions of the class and the
 {@link #getBundle(String, Locale, ClassLoader, Control) getBundle}
 factory method for details.

 <h4>Cache Management</h4>

 Resource bundle instances created by the <code>getBundle</code> factory
 methods are cached by default, and the factory methods return the same
 resource bundle instance multiple times if it has been
 cached. <code>getBundle</code> clients may clear the cache, manage the
 lifetime of cached resource bundle instances using time-to-live values,
 or specify not to cache resource bundle instances. Refer to the
 descriptions of the {@linkplain #getBundle(String, Locale, ClassLoader,
 Control) <code>getBundle</code> factory method}, {@link
 #clearCache(ClassLoader) clearCache}, {@link
 Control#getTimeToLive(String, Locale)
 ResourceBundle.Control.getTimeToLive}, and {@link
 Control#needsReload(String, Locale, String, ClassLoader, ResourceBundle,
 long) ResourceBundle.Control.needsReload} for details.

 <h4>Example</h4>

 The following is a very simple example of a <code>ResourceBundle</code>
 subclass, <code>MyResources</code>, that manages two resources (for a larger number of
 resources you would probably use a <code>Map</code>).
 Notice that you don't need to supply a value if 
 a "parent-level" <code>ResourceBundle</code> handles the same
 key with the same value (as for the okKey below).
 <blockquote>
 <pre>
 // default (English language, United States)
 public class MyResources extends ResourceBundle {
     public Object handleGetObject(String key) {
         if (key.equals("okKey")) return "Ok";
         if (key.equals("cancelKey")) return "Cancel";
         return null;
     }
 
     public Enumeration&lt;String&gt; getKeys() {
         return Collections.enumeration(keySet());
     }
 
     // Overrides handleKeySet() so that the getKeys() implementation
     // can rely on the keySet() value.
     protected Set&lt;String&gt; handleKeySet() {
         return new HashSet&lt;String&gt;(Arrays.asList("okKey", "cancelKey"));
     }
 }

 // German language
 public class MyResources_de extends MyResources {
     public Object handleGetObject(String key) {
         // don't need okKey, since parent level handles it.
         if (key.equals("cancelKey")) return "Abbrechen";
         return null;
     }
 
     protected Set&lt;String&gt; handleKeySet() {
         return new HashSet&lt;String&gt;(Arrays.asList("cancelKey"));
     }
 }
 </pre>
 </blockquote>
 You do not have to restrict yourself to using a single family of
 <code>ResourceBundle</code>s. For example, you could have a set of bundles for
 exception messages, <code>ExceptionResources</code>
 (<code>ExceptionResources_fr</code>, <code>ExceptionResources_de</code>, ...),
 and one for widgets, <code>WidgetResource</code> (<code>WidgetResources_fr</code>,
 <code>WidgetResources_de</code>, ...); breaking up the resources however you like.

 @see ListResourceBundle
 @see PropertyResourceBundle
 @see MissingResourceException
 @since JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.ResourceBundle java.util.ResourceBundle.parent
<!-- END KEY -->
<!-- BEGIN DATA -->
 The parent bundle of this bundle.
 The parent bundle is searched by {@link #getObject getObject}
 when this bundle does not contain a particular resource.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.ResourceBundle()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sole constructor.  (For invocation by subclass constructors, typically
 implicit.)

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.util.ResourceBundle.getString(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a string for the given key from this resource bundle or one of its parents.
 Calling this method is equivalent to calling
 <blockquote>
 <code>(String) {@link #getObject(java.lang.String) getObject}(key)</code>.
 </blockquote>

 @param key the key for the desired string
 @exception NullPointerException if <code>key</code> is <code>null</code>
 @exception MissingResourceException if no object for the given key can be found
 @exception ClassCastException if the object found for the given key is not a string
 @return the string for the given key

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String[] java.util.ResourceBundle.getStringArray(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a string array for the given key from this resource bundle or one of its parents.
 Calling this method is equivalent to calling
 <blockquote>
 <code>(String[]) {@link #getObject(java.lang.String) getObject}(key)</code>.
 </blockquote>

 @param key the key for the desired string array
 @exception NullPointerException if <code>key</code> is <code>null</code>
 @exception MissingResourceException if no object for the given key can be found
 @exception ClassCastException if the object found for the given key is not a string array
 @return the string array for the given key

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.Object java.util.ResourceBundle.getObject(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets an object for the given key from this resource bundle or one of its parents.
 This method first tries to obtain the object from this resource bundle using
 {@link #handleGetObject(java.lang.String) handleGetObject}.
 If not successful, and the parent resource bundle is not null,
 it calls the parent's <code>getObject</code> method.
 If still not successful, it throws a MissingResourceException.

 @param key the key for the desired object
 @exception NullPointerException if <code>key</code> is <code>null</code>
 @exception MissingResourceException if no object for the given key can be found
 @return the object for the given key

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Locale java.util.ResourceBundle.getLocale()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the locale of this resource bundle. This method can be used after a
 call to getBundle() to determine whether the resource bundle returned really
 corresponds to the requested locale or is a fallback.

 @return the locale of this resource bundle

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.util.ResourceBundle.setParent(ResourceBundle parent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the parent bundle of this bundle.
 The parent bundle is searched by {@link #getObject getObject}
 when this bundle does not contain a particular resource.

 @param parent this bundle's parent bundle.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(String baseName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a resource bundle using the specified base name, the default locale,
 and the caller's class loader. Calling this method is equivalent to calling
 <blockquote>
 <code>getBundle(baseName, Locale.getDefault(), this.getClass().getClassLoader())</code>,
 </blockquote>
 except that <code>getClassLoader()</code> is run with the security
 privileges of <code>ResourceBundle</code>.
 See {@link #getBundle(String, Locale, ClassLoader) getBundle}
 for a complete description of the search and instantiation strategy.

 @param baseName the base name of the resource bundle, a fully qualified class name
 @exception java.lang.NullPointerException
     if <code>baseName</code> is <code>null</code>
 @exception MissingResourceException
     if no resource bundle for the specified base name can be found
 @return a resource bundle for the given base name and the default locale

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(String baseName, ResourceBundle.Control control)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a resource bundle using the specified base name, the
 default locale and the specified control. Calling this method
 is equivalent to calling
 <pre>
 getBundle(baseName, Locale.getDefault(),
           this.getClass().getClassLoader(), control),
 </pre>
 except that <code>getClassLoader()</code> is run with the security
 privileges of <code>ResourceBundle</code>.  See {@link
 #getBundle(String, Locale, ClassLoader, Control) getBundle} for the
 complete description of the resource bundle loading process with a
 <code>ResourceBundle.Control</code>.

 @param baseName
        the base name of the resource bundle, a fully qualified class
        name
 @param control
        the control which gives information for the resource bundle
        loading process
 @return a resource bundle for the given base name and the default
        locale
 @exception NullPointerException
        if <code>baseName</code> or <code>control</code> is
        <code>null</code>
 @exception MissingResourceException
        if no resource bundle for the specified base name can be found
 @exception IllegalArgumentException
        if the given <code>control</code> doesn't perform properly
        (e.g., <code>control.getCandidateLocales</code> returns null.) 
        Note that validation of <code>control</code> is performed as
        needed.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(String baseName, Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a resource bundle using the specified base name and locale,
 and the caller's class loader. Calling this method is equivalent to calling
 <blockquote>
 <code>getBundle(baseName, locale, this.getClass().getClassLoader())</code>,
 </blockquote>
 except that <code>getClassLoader()</code> is run with the security
 privileges of <code>ResourceBundle</code>.
 See {@link #getBundle(String, Locale, ClassLoader) getBundle}
 for a complete description of the search and instantiation strategy.

 @param baseName
        the base name of the resource bundle, a fully qualified class name
 @param locale
        the locale for which a resource bundle is desired
 @exception NullPointerException
        if <code>baseName</code> or <code>locale</code> is <code>null</code>
 @exception MissingResourceException
        if no resource bundle for the specified base name can be found
 @return a resource bundle for the given base name and locale

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(String baseName, Locale targetLocale, ResourceBundle.Control control)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a resource bundle using the specified base name, target
 locale and control, and the caller's class loader. Calling this
 method is equivalent to calling
 <pre>
 getBundle(baseName, targetLocale, this.getClass().getClassLoader(),
           control),
 </pre>
 except that <code>getClassLoader()</code> is run with the security
 privileges of <code>ResourceBundle</code>.  See {@link
 #getBundle(String, Locale, ClassLoader, Control) getBundle} for the
 complete description of the resource bundle loading process with a
 <code>ResourceBundle.Control</code>.

 @param baseName
        the base name of the resource bundle, a fully qualified
        class name
 @param targetLocale
        the locale for which a resource bundle is desired
 @param control
        the control which gives information for the resource
        bundle loading process
 @return a resource bundle for the given base name and a
        <code>Locale</code> in <code>locales</code>
 @exception NullPointerException
        if <code>baseName</code>, <code>locales</code> or
        <code>control</code> is <code>null</code>
 @exception MissingResourceException
        if no resource bundle for the specified base name in any
        of the <code>locales</code> can be found.
 @exception IllegalArgumentException
        if the given <code>control</code> doesn't perform properly
        (e.g., <code>control.getCandidateLocales</code> returns null.) 
        Note that validation of <code>control</code> is performed as
        needed.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.ResourceBundle java.util.ResourceBundle.getBundle(String baseName, Locale locale, ClassLoader loader)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a resource bundle using the specified base name, locale, and class loader.

 <p><a name="default_behavior"/>
 Conceptually, <code>getBundle</code> uses the following strategy for locating and instantiating
 resource bundles:
 <p>
 <code>getBundle</code> uses the base name, the specified locale, and the default
 locale (obtained from {@link java.util.Locale#getDefault() Locale.getDefault})
 to generate a sequence of <a name="candidates"><em>candidate bundle names</em></a>.
 If the specified locale's language, country, and variant are all empty
 strings, then the base name is the only candidate bundle name.
 Otherwise, the following sequence is generated from the attribute
 values of the specified locale (language1, country1, and variant1)
 and of the default locale (language2, country2, and variant2):
 <ul>
 <li> baseName + "_" + language1 + "_" + country1 + "_" + variant1
 <li> baseName + "_" + language1 + "_" + country1
 <li> baseName + "_" + language1
 <li> baseName + "_" + language2 + "_" + country2 + "_" + variant2
 <li> baseName + "_" + language2 + "_" + country2
 <li> baseName + "_" + language2
 <li> baseName
 </ul>
 <p>
 Candidate bundle names where the final component is an empty string are omitted.
 For example, if country1 is an empty string, the second candidate bundle name is omitted.

 <p>
 <code>getBundle</code> then iterates over the candidate bundle names to find the first
 one for which it can <em>instantiate</em> an actual resource bundle. For each candidate
 bundle name, it attempts to create a resource bundle:
 <ul>
 <li>
 First, it attempts to load a class using the candidate bundle name.
 If such a class can be found and loaded using the specified class loader, is assignment
 compatible with ResourceBundle, is accessible from ResourceBundle, and can be instantiated,
 <code>getBundle</code> creates a new instance of this class and uses it as the <em>result
 resource bundle</em>.
 <li>
 Otherwise, <code>getBundle</code> attempts to locate a property resource file.
 It generates a path name from the candidate bundle name by replacing all "." characters
 with "/" and appending the string ".properties".
 It attempts to find a "resource" with this name using
 {@link java.lang.ClassLoader#getResource(java.lang.String) ClassLoader.getResource}.
 (Note that a "resource" in the sense of <code>getResource</code> has nothing to do with
 the contents of a resource bundle, it is just a container of data, such as a file.)
 If it finds a "resource", it attempts to create a new
 {@link PropertyResourceBundle} instance from its contents.
 If successful, this instance becomes the <em>result resource bundle</em>.
 </ul>

 <p>
 If no result resource bundle has been found, a <code>MissingResourceException</code>
 is thrown.

 <p><a name="parent_chain"/>
 Once a result resource bundle has been found, its <em>parent chain</em> is instantiated.
 <code>getBundle</code> iterates over the candidate bundle names that can be
 obtained by successively removing variant, country, and language
 (each time with the preceding "_") from the bundle name of the result resource bundle.
 As above, candidate bundle names where the final component is an empty string are omitted.
 With each of the candidate bundle names it attempts to instantiate a resource bundle, as
 described above.
 Whenever it succeeds, it calls the previously instantiated resource
 bundle's {@link #setParent(java.util.ResourceBundle) setParent} method
 with the new resource bundle, unless the previously instantiated resource
 bundle already has a non-null parent.

 <p>
 <code>getBundle</code> caches instantiated resource bundles and
 may return the same resource bundle instance multiple
 times.

 <p>
 The <code>baseName</code> argument should be a fully qualified class name. However, for
 compatibility with earlier versions, Sun's Java SE Runtime Environments do not verify this,
 and so it is possible to access <code>PropertyResourceBundle</code>s by specifying a
 path name (using "/") instead of a fully qualified class name (using ".").

 <p><a name="default_behavior_example"/>
 <strong>Example:</strong><br>The following class and property files are provided:
 <pre>
     MyResources.class
     MyResources.properties
     MyResources_fr.properties
     MyResources_fr_CH.class
     MyResources_fr_CH.properties
     MyResources_en.properties
     MyResources_es_ES.class
 </pre>
 The contents of all files are valid (that is, public non-abstract subclasses of <code>ResourceBundle</code> for
 the ".class" files, syntactically correct ".properties" files).
 The default locale is <code>Locale("en", "GB")</code>.
 <p>
 Calling <code>getBundle</code> with the shown locale argument values instantiates
 resource bundles from the following sources:
 <ul>
 <li>Locale("fr", "CH"): result MyResources_fr_CH.class, parent MyResources_fr.properties, parent MyResources.class
 <li>Locale("fr", "FR"): result MyResources_fr.properties, parent MyResources.class
 <li>Locale("de", "DE"): result MyResources_en.properties, parent MyResources.class
 <li>Locale("en", "US"): result MyResources_en.properties, parent MyResources.class
 <li>Locale("es", "ES"): result MyResources_es_ES.class, parent MyResources.class
 </ul>
 <p>The file MyResources_fr_CH.properties is never used because it is hidden by
 MyResources_fr_CH.class. Likewise, MyResources.properties is also hidden by
 MyResources.class.

 @param baseName the base name of the resource bundle, a fully qualified class name
 @param locale the locale for which a resource bundle is desired
 @param loader the class loader from which to load the resource bundle
 @return a resource bundle for the given base name and locale
 @exception java.lang.NullPointerException
        if <code>baseName</code>, <code>locale</code>, or <code>loader</code> is <code>null</code>
 @exception MissingResourceException
        if no resource bundle for the specified base name can be found
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.ResourceBundle java.util.ResourceBundle.getBundle(String baseName, Locale targetLocale, ClassLoader loader, ResourceBundle.Control control)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a resource bundle using the specified base name, target
 locale, class loader and control. Unlike the {@linkplain
 #getBundle(String, Locale, ClassLoader) <code>getBundle</code>
 factory methods with no <code>control</code> argument}, the given
 <code>control</code> specifies how to locate and instantiate resource
 bundles. Conceptually, the bundle loading process with the given
 <code>control</code> is performed in the following steps.

 <p>
 <ol>
 <li>This factory method looks up the resource bundle in the cache for
 the specified <code>baseName</code>, <code>targetLocale</code> and
 <code>loader</code>.  If the requested resource bundle instance is
 found in the cache and the time-to-live periods of the instance and
 all of its parent instances have not expired, the instance is returned
 to the caller. Otherwise, this factory method proceeds with the
 loading process below.</li>

 <li>The {@link ResourceBundle.Control#getFormats(String)
 control.getFormats} method is called to get resource bundle formats
 to produce bundle or resource names. The strings
 <code>"java.class"</code> and <code>"java.properties"</code>
 designate class-based and {@linkplain PropertyResourceBundle
 property}-based resource bundles, respectively. Other strings
 starting with <code>"java."</code> are reserved for future extensions
 and must not be used for application-defined formats. Other strings
 designate application-defined formats.</li>

 <li>The {@link ResourceBundle.Control#getCandidateLocales(String,
 Locale) control.getCandidateLocales} method is called with the target
 locale to get a list of <em>candidate <code>Locale</code>s</em> for
 which resource bundles are searched.</li>

 <li>The {@link ResourceBundle.Control#newBundle(String, Locale,
 String, ClassLoader, boolean) control.newBundle} method is called to
 instantiate a <code>ResourceBundle</code> for the base bundle name, a
 candidate locale, and a format. (Refer to the note on the cache
 lookup below.) This step is iterated over all combinations of the
 candidate locales and formats until the <code>newBundle</code> method
 returns a <code>ResourceBundle</code> instance or the iteration has
 used up all the combinations. For example, if the candidate locales
 are <code>Locale("de", "DE")</code>, <code>Locale("de")</code> and
 <code>Locale("")</code> and the formats are <code>"java.class"</code>
 and <code>"java.properties"</code>, then the following is the
 sequence of locale-format combinations to be used to call
 <code>control.newBundle</code>.

 <table style="width: 50%; text-align: left; margin-left: 40px;"
  border="0" cellpadding="2" cellspacing="2">
 <tbody><code>
 <tr>
 <td
 style="vertical-align: top; text-align: left; font-weight: bold; width: 50%;">Locale<br>
 </td>
 <td
 style="vertical-align: top; text-align: left; font-weight: bold; width: 50%;">format<br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top; width: 50%;">Locale("de", "DE")<br>
 </td>
 <td style="vertical-align: top; width: 50%;">java.class<br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top; width: 50%;">Locale("de", "DE")</td>
 <td style="vertical-align: top; width: 50%;">java.properties<br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top; width: 50%;">Locale("de")</td>
 <td style="vertical-align: top; width: 50%;">java.class</td>
 </tr>
 <tr>
 <td style="vertical-align: top; width: 50%;">Locale("de")</td>
 <td style="vertical-align: top; width: 50%;">java.properties</td>
 </tr>
 <tr>
 <td style="vertical-align: top; width: 50%;">Locale("")<br>
 </td>
 <td style="vertical-align: top; width: 50%;">java.class</td>
 </tr>
 <tr>
 <td style="vertical-align: top; width: 50%;">Locale("")</td>
 <td style="vertical-align: top; width: 50%;">java.properties</td>
 </tr>
 </code></tbody>
 </table>
 </li>

 <li>If the previous step has found no resource bundle, proceed to
 Step 6. If a bundle has been found that is a base bundle (a bundle
 for <code>Locale("")</code>), and the candidate locale list only contained
 <code>Locale("")</code>, return the bundle to the caller. If a bundle
 has been found that is a base bundle, but the candidate locale list
 contained locales other than Locale(""), put the bundle on hold and
 proceed to Step 6. If a bundle has been found that is not a base
 bundle, proceed to Step 7.</li>

 <li>The {@link ResourceBundle.Control#getFallbackLocale(String,
 Locale) control.getFallbackLocale} method is called to get a fallback
 locale (alternative to the current target locale) to try further
 finding a resource bundle. If the method returns a non-null locale,
 it becomes the next target locale and the loading process starts over
 from Step 3. Otherwise, if a base bundle was found and put on hold in
 a previous Step 5, it is returned to the caller now. Otherwise, a
 MissingResourceException is thrown.</li>

 <li>At this point, we have found a resource bundle that's not the
 base bundle. If this bundle set its parent during its instantiation,
 it is returned to the caller. Otherwise, its <a
 href="./ResourceBundle.html#parent_chain">parent chain</a> is
 instantiated based on the list of candidate locales from which it was
 found. Finally, the bundle is returned to the caller.</li>


 </ol>

 <p>During the resource bundle loading process above, this factory
 method looks up the cache before calling the {@link
 Control#newBundle(String, Locale, String, ClassLoader, boolean)
 control.newBundle} method.  If the time-to-live period of the
 resource bundle found in the cache has expired, the factory method
 calls the {@link ResourceBundle.Control#needsReload(String, Locale,
 String, ClassLoader, ResourceBundle, long) control.needsReload}
 method to determine whether the resource bundle needs to be reloaded.
 If reloading is required, the factory method calls
 <code>control.newBundle</code> to reload the resource bundle.  If
 <code>control.newBundle</code> returns <code>null</code>, the factory
 method puts a dummy resource bundle in the cache as a mark of
 nonexistent resource bundles in order to avoid lookup overhead for
 subsequent requests. Such dummy resource bundles are under the same
 expiration control as specified by <code>control</code>.

 <p>All resource bundles loaded are cached by default. Refer to
 {@link Control#getTimeToLive(String,Locale)
 control.getTimeToLive} for details.


 <p>The following is an example of the bundle loading process with the
 default <code>ResourceBundle.Control</code> implementation.
 
 <p>Conditions:
 <ul>
 <li>Base bundle name: <code>foo.bar.Messages</code>
 <li>Requested <code>Locale</code>: {@link Locale#ITALY}</li>
 <li>Default <code>Locale</code>: {@link Locale#FRENCH}</li>
 <li>Available resource bundles:
 <code>foo/bar/Messages_fr.properties</code> and
 <code>foo/bar/Messages.properties</code></li>

 </ul>

 <p>First, <code>getBundle</code> tries loading a resource bundle in
 the following sequence.

 <ul>
 <li>class <code>foo.bar.Messages_it_IT</code>
 <li>file <code>foo/bar/Messages_it_IT.properties</code>
 <li>class <code>foo.bar.Messages_it</code></li>
 <li>file <code>foo/bar/Messages_it.properties</code></li>
 <li>class <code>foo.bar.Messages</code></li>
 <li>file <code>foo/bar/Messages.properties</code></li>
 </ul>

 <p>At this point, <code>getBundle</code> finds
 <code>foo/bar/Messages.properties</code>, which is put on hold
 because it's the base bundle.  <code>getBundle</code> calls {@link
 Control#getFallbackLocale(String, Locale)
 control.getFallbackLocale("foo.bar.Messages", Locale.ITALY)} which
 returns <code>Locale.FRENCH</code>. Next, <code>getBundle</code>
 tries loading a bundle in the following sequence.

 <ul>
 <li>class <code>foo.bar.Messages_fr</code></li>
 <li>file <code>foo/bar/Messages_fr.properties</code></li>
 <li>class <code>foo.bar.Messages</code></li>
 <li>file <code>foo/bar/Messages.properties</code></li>
 </ul>

 <p><code>getBundle</code> finds
 <code>foo/bar/Messages_fr.properties</code> and creates a
 <code>ResourceBundle</code> instance. Then, <code>getBundle</code>
 sets up its parent chain from the list of the candiate locales.  Only
 <code>foo/bar/Messages.properties</code> is found in the list and
 <code>getBundle</code> creates a <code>ResourceBundle</code> instance
 that becomes the parent of the instance for
 <code>foo/bar/Messages_fr.properties</code>.

 @param baseName
        the base name of the resource bundle, a fully qualified
        class name
 @param targetLocale
        the locale for which a resource bundle is desired
 @param loader
        the class loader from which to load the resource bundle
 @param control
        the control which gives information for the resource
        bundle loading process
 @return a resource bundle for the given base name and locale
 @exception NullPointerException
        if <code>baseName</code>, <code>targetLocale</code>,
        <code>loader</code>, or <code>control</code> is
        <code>null</code>
 @exception MissingResourceException
        if no resource bundle for the specified base name can be found
 @exception IllegalArgumentException
        if the given <code>control</code> doesn't perform properly
        (e.g., <code>control.getCandidateLocales</code> returns null.) 
        Note that validation of <code>control</code> is performed as
        needed.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final void java.util.ResourceBundle.clearCache()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all resource bundles from the cache that have been loaded
 using the caller's class loader.

 @since 1.6
 @see ResourceBundle.Control#getTimeToLive(String,Locale)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final void java.util.ResourceBundle.clearCache(ClassLoader loader)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all resource bundles from the cache that have been loaded
 using the given class loader.

 @param loader the class loader
 @exception NullPointerException if <code>loader</code> is null
 @since 1.6
 @see ResourceBundle.Control#getTimeToLive(String,Locale)

<!-- END DATA -->
<!-- BEGIN KEY -->
protected abstract java.lang.Object java.util.ResourceBundle.handleGetObject(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets an object for the given key from this resource bundle.
 Returns null if this resource bundle does not contain an
 object for the given key.

 @param key the key for the desired object
 @exception NullPointerException if <code>key</code> is <code>null</code>
 @return the object for the given key, or null

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.util.Enumeration<java.lang.String> java.util.ResourceBundle.getKeys()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an enumeration of the keys.

 @return an <code>Enumeration</code> of the keys contained in
         this <code>ResourceBundle</code> and its parent bundles.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.ResourceBundle.containsKey(String key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines whether the given <code>key</code> is contained in
 this <code>ResourceBundle</code> or its parent bundles.

 @param key
        the resource <code>key</code>
 @return <code>true</code> if the given <code>key</code> is
        contained in this <code>ResourceBundle</code> or its
        parent bundles; <code>false</code> otherwise.
 @exception NullPointerException
         if <code>key</code> is <code>null</code>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.lang.String> java.util.ResourceBundle.keySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>Set</code> of all keys contained in this
 <code>ResourceBundle</code> and its parent bundles.

 @return a <code>Set</code> of all keys contained in this
         <code>ResourceBundle</code> and its parent bundles.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Set<java.lang.String> java.util.ResourceBundle.handleKeySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>Set</code> of the keys contained <em>only</em>
 in this <code>ResourceBundle</code>.

 <p>The default implementation returns a <code>Set</code> of the
 keys returned by the {@link #getKeys() getKeys} method except
 for the ones for which the {@link #handleGetObject(String)
 handleGetObject} method returns <code>null</code>. Once the
 <code>Set</code> has been created, the value is kept in this
 <code>ResourceBundle</code> in order to avoid producing the
 same <code>Set</code> in the next calls.  Override this method
 in subclass implementations for faster handling.

 @return a <code>Set</code> of the keys contained only in this
        <code>ResourceBundle</code>
 @since 1.6

<!-- END DATA -->
