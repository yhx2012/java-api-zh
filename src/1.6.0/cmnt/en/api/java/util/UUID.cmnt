<!-- BEGIN KEY -->
public final class java.util.UUID extends java.lang.Object implements java.io.Serializable, java.lang.Comparable
<!-- END KEY -->
<!-- BEGIN DATA -->
 
 A class that represents an immutable universally unique identifier (UUID). 
 A UUID represents a 128-bit value.

 <p>There exist different variants of these global identifiers. The methods
 of this class are for manipulating the Leach-Salz variant, although the
 constructors allow the creation of any variant of UUID (described below).
 
 <p>The layout of a variant 2 (Leach-Salz) UUID is as follows:

 The most significant long consists of the following unsigned fields:
 <pre>
 0xFFFFFFFF00000000 time_low
 0x00000000FFFF0000 time_mid
 0x000000000000F000 version
 0x0000000000000FFF time_hi
 </pre>
 The least significant long consists of the following unsigned fields:
 <pre>
 0xC000000000000000 variant
 0x3FFF000000000000 clock_seq
 0x0000FFFFFFFFFFFF node
 </pre>

 <p>The variant field contains a value which identifies the layout of
 the <tt>UUID</tt>. The bit layout described above is valid only for
 a <tt>UUID</tt> with a variant value of 2, which indicates the
 Leach-Salz variant.

 <p>The version field holds a value that describes the type of this
 <tt>UUID</tt>. There are four different basic types of UUIDs: time-based,
 DCE security, name-based, and randomly generated UUIDs. These types
 have a version value of 1, 2, 3 and 4, respectively.
 
 <p>For more information including algorithms used to create <tt>UUID</tt>s,
 see <a href="http://www.ietf.org/rfc/rfc4122.txt">
 <i>RFC&nbsp;4122: A Universally Unique IDentifier (UUID) URN
 Namespace</i></a>, section 4.2 &quot;Algorithms for Creating a Time-Based
 UUID&quot;.

 @version 1.18, 06/02/06
 @since   1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.UUID(long mostSigBits, long leastSigBits)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new <tt>UUID</tt> using the specified data.
 <tt>mostSigBits</tt> is used for the most significant 64 bits
 of the <tt>UUID</tt> and <tt>leastSigBits</tt> becomes the
 least significant 64 bits of the <tt>UUID</tt>.

 @param  mostSigBits
 @param  leastSigBits

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.UUID java.util.UUID.randomUUID()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Static factory to retrieve a type 4 (pseudo randomly generated) UUID.

 The <code>UUID</code> is generated using a cryptographically strong
 pseudo random number generator.

 @return  a randomly generated <tt>UUID</tt>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.UUID java.util.UUID.nameUUIDFromBytes(byte[] name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Static factory to retrieve a type 3 (name based) <tt>UUID</tt> based on
 the specified byte array.

 @param  name a byte array to be used to construct a <tt>UUID</tt>.
 @return  a <tt>UUID</tt> generated from the specified array.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.UUID java.util.UUID.fromString(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <tt>UUID</tt> from the string standard representation as
 described in the {@link #toString} method.

 @param  name a string that specifies a <tt>UUID</tt>.
 @return  a <tt>UUID</tt> with the specified value.
 @throws IllegalArgumentException if name does not conform to the
         string representation as described in {@link #toString}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.UUID.getLeastSignificantBits()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the least significant 64 bits of this UUID's 128 bit value.

 @return the least significant 64 bits of this UUID's 128 bit value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.UUID.getMostSignificantBits()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the most significant 64 bits of this UUID's 128 bit value.

 @return the most significant 64 bits of this UUID's 128 bit value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.UUID.version()
<!-- END KEY -->
<!-- BEGIN DATA -->
 The version number associated with this <tt>UUID</tt>. The version 
 number describes how this <tt>UUID</tt> was generated.

 The version number has the following meaning:<p>
 <ul>
 <li>1    Time-based UUID
 <li>2    DCE security UUID
 <li>3    Name-based UUID
 <li>4    Randomly generated UUID
 </ul>

 @return  the version number of this <tt>UUID</tt>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.UUID.variant()
<!-- END KEY -->
<!-- BEGIN DATA -->
 The variant number associated with this <tt>UUID</tt>. The variant 
 number describes the layout of the <tt>UUID</tt>.

 The variant number has the following meaning:<p>
 <ul>
 <li>0    Reserved for NCS backward compatibility
 <li>2    The Leach-Salz variant (used by this class)
 <li>6    Reserved, Microsoft Corporation backward compatibility
 <li>7    Reserved for future definition
 </ul>

 @return  the variant number of this <tt>UUID</tt>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.UUID.timestamp()
<!-- END KEY -->
<!-- BEGIN DATA -->
 The timestamp value associated with this UUID.

 <p>The 60 bit timestamp value is constructed from the time_low,
 time_mid, and time_hi fields of this <tt>UUID</tt>. The resulting 
 timestamp is measured in 100-nanosecond units since midnight, 
 October 15, 1582 UTC.<p>

 The timestamp value is only meaningful in a time-based UUID, which
 has version type 1. If this <tt>UUID</tt> is not a time-based UUID then
 this method throws UnsupportedOperationException.
 
 @throws UnsupportedOperationException if this UUID is not a 
         version 1 UUID.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.UUID.clockSequence()
<!-- END KEY -->
<!-- BEGIN DATA -->
 The clock sequence value associated with this UUID.

 <p>The 14 bit clock sequence value is constructed from the clock
 sequence field of this UUID. The clock sequence field is used to
 guarantee temporal uniqueness in a time-based UUID.<p>

 The  clockSequence value is only meaningful in a time-based UUID, which
 has version type 1. If this UUID is not a time-based UUID then
 this method throws UnsupportedOperationException.
 
 @return  the clock sequence of this <tt>UUID</tt>.
 @throws UnsupportedOperationException if this UUID is not a 
         version 1 UUID.

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.UUID.node()
<!-- END KEY -->
<!-- BEGIN DATA -->
 The node value associated with this UUID.

 <p>The 48 bit node value is constructed from the node field of
 this UUID. This field is intended to hold the IEEE 802 address 
 of the machine that generated this UUID to guarantee spatial
 uniqueness.<p>

 The node value is only meaningful in a time-based UUID, which
 has version type 1. If this UUID is not a time-based UUID then
 this method throws UnsupportedOperationException.
 
 @return  the node value of this <tt>UUID</tt>.
 @throws UnsupportedOperationException if this UUID is not a
         version 1 UUID.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.UUID.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <code>String</code> object representing this
 <code>UUID</code>.
 
 <p>The UUID string representation is as described by this BNF : 
 <blockquote><pre>
 {@code
 UUID                   = <time_low> "-" <time_mid> "-"
                          <time_high_and_version> "-"
                          <variant_and_sequence> "-"
                          <node>
 time_low               = 4*<hexOctet>
 time_mid               = 2*<hexOctet>
 time_high_and_version  = 2*<hexOctet>
 variant_and_sequence   = 2*<hexOctet>
 node                   = 6*<hexOctet>
 hexOctet               = <hexDigit><hexDigit>
 hexDigit               =
       "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
       | "a" | "b" | "c" | "d" | "e" | "f"
       | "A" | "B" | "C" | "D" | "E" | "F"
 }</pre></blockquote>

 @return  a string representation of this <tt>UUID</tt>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.UUID.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hash code for this <code>UUID</code>.

 @return  a hash code value for this <tt>UUID</tt>. 

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.UUID.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares this object to the specified object.  The result is
 <tt>true</tt> if and only if the argument is not
 <tt>null</tt>, is a <tt>UUID</tt> object, has the same variant,
 and contains the same value, bit for bit, as this <tt>UUID</tt>.

 @param   obj   the object to compare with.
 @return  <code>true</code> if the objects are the same;
          <code>false</code> otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.UUID.compareTo(UUID val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares this UUID with the specified UUID.
 
 <p>The first of two UUIDs follows the second if the most significant
 field in which the UUIDs differ is greater for the first UUID.

 @param  val <tt>UUID</tt> to which this <tt>UUID</tt> is to be compared.
 @return -1, 0 or 1 as this <tt>UUID</tt> is less than, equal
         to, or greater than <tt>val</tt>.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.UUID.readObject(ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reconstitute the <tt>UUID</tt> instance from a stream (that is,
 deserialize it). This is necessary to set the transient fields
 to their correct uninitialized value so they will be recomputed
 on demand.

<!-- END DATA -->
