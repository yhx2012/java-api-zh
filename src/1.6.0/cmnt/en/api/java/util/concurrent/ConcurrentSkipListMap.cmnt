<!-- BEGIN KEY -->
public class java.util.concurrent.ConcurrentSkipListMap extends java.util.AbstractMap implements java.util.concurrent.ConcurrentNavigableMap, java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A scalable concurrent {@link ConcurrentNavigableMap} implementation.
 The map is sorted according to the {@linkplain Comparable natural
 ordering} of its keys, or by a {@link Comparator} provided at map
 creation time, depending on which constructor is used.

 <p>This class implements a concurrent variant of <a
 href="http://www.cs.umd.edu/~pugh/">SkipLists</a> providing
 expected average <i>log(n)</i> time cost for the
 <tt>containsKey</tt>, <tt>get</tt>, <tt>put</tt> and
 <tt>remove</tt> operations and their variants.  Insertion, removal,
 update, and access operations safely execute concurrently by
 multiple threads.  Iterators are <i>weakly consistent</i>, returning
 elements reflecting the state of the map at some point at or since
 the creation of the iterator.  They do <em>not</em> throw {@link
 ConcurrentModificationException}, and may proceed concurrently with
 other operations. Ascending key ordered views and their iterators
 are faster than descending ones.

 <p>All <tt>Map.Entry</tt> pairs returned by methods in this class
 and its views represent snapshots of mappings at the time they were
 produced. They do <em>not</em> support the <tt>Entry.setValue</tt>
 method. (Note however that it is possible to change mappings in the
 associated map using <tt>put</tt>, <tt>putIfAbsent</tt>, or
 <tt>replace</tt>, depending on exactly which effect you need.)

 <p>Beware that, unlike in most collections, the <tt>size</tt>
 method is <em>not</em> a constant-time operation. Because of the
 asynchronous nature of these maps, determining the current number
 of elements requires a traversal of the elements.  Additionally,
 the bulk operations <tt>putAll</tt>, <tt>equals</tt>, and
 <tt>clear</tt> are <em>not</em> guaranteed to be performed
 atomically. For example, an iterator operating concurrently with a
 <tt>putAll</tt> operation might view only some of the added
 elements.

 <p>This class and its views and iterators implement all of the
 <em>optional</em> methods of the {@link Map} and {@link Iterator}
 interfaces. Like most other concurrent collections, this class does
 <em>not</em> permit the use of <tt>null</tt> keys or values because some
 null return values cannot be reliably distinguished from the absence of
 elements.

 <p>This class is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.

 @author Doug Lea
 @param <K> the type of keys maintained by this map
 @param <V> the type of mapped values
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.Comparator<? super K> java.util.concurrent.ConcurrentSkipListMap.comparator
<!-- END KEY -->
<!-- BEGIN DATA -->
 The comparator used to maintain order in this map, or null
 if using natural ordering.
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentSkipListMap()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new, empty map, sorted according to the
 {@linkplain Comparable natural ordering} of the keys.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentSkipListMap(java.util.Comparator<? super K> comparator)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new, empty map, sorted according to the specified
 comparator.

 @param comparator the comparator that will be used to order this map.
        If <tt>null</tt>, the {@linkplain Comparable natural
        ordering} of the keys will be used.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentSkipListMap(java.util.Map<? extends K, ? extends V> m)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new map containing the same mappings as the given map,
 sorted according to the {@linkplain Comparable natural ordering} of
 the keys.

 @param  m the map whose mappings are to be placed in this map
 @throws ClassCastException if the keys in <tt>m</tt> are not
         {@link Comparable}, or are not mutually comparable
 @throws NullPointerException if the specified map or any of its keys
         or values are null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentSkipListMap(java.util.SortedMap<K, ? extends V> m)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new map containing the same mappings and using the
 same ordering as the specified sorted map.

 @param m the sorted map whose mappings are to be placed in this
        map, and whose comparator is to be used to sort this map
 @throws NullPointerException if the specified sorted map or any of
         its keys or values are null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentSkipListMap<K, V> java.util.concurrent.ConcurrentSkipListMap.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a shallow copy of this <tt>ConcurrentSkipListMap</tt>
 instance. (The keys and values themselves are not cloned.)

 @return a shallow copy of this map

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentSkipListMap.containsKey(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this map contains a mapping for the specified
 key.

 @param key key whose presence in this map is to be tested
 @return <tt>true</tt> if this map contains a mapping for the specified key
 @throws ClassCastException if the specified key cannot be compared
         with the keys currently in the map
 @throws NullPointerException if the specified key is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.concurrent.ConcurrentSkipListMap.get(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value to which the specified key is mapped,
 or {@code null} if this map contains no mapping for the key.

 <p>More formally, if this map contains a mapping from a key
 {@code k} to a value {@code v} such that {@code key} compares
 equal to {@code k} according to the map's ordering, then this
 method returns {@code v}; otherwise it returns {@code null}.
 (There can be at most one such mapping.)

 @throws ClassCastException if the specified key cannot be compared
         with the keys currently in the map
 @throws NullPointerException if the specified key is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.concurrent.ConcurrentSkipListMap.put(K key, V value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Associates the specified value with the specified key in this map.
 If the map previously contained a mapping for the key, the old
 value is replaced.

 @param key key with which the specified value is to be associated
 @param value value to be associated with the specified key
 @return the previous value associated with the specified key, or
         <tt>null</tt> if there was no mapping for the key
 @throws ClassCastException if the specified key cannot be compared
         with the keys currently in the map
 @throws NullPointerException if the specified key or value is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.concurrent.ConcurrentSkipListMap.remove(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the mapping for the specified key from this map if present.

 @param  key key for which mapping should be removed
 @return the previous value associated with the specified key, or
         <tt>null</tt> if there was no mapping for the key
 @throws ClassCastException if the specified key cannot be compared
         with the keys currently in the map
 @throws NullPointerException if the specified key is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentSkipListMap.containsValue(Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this map maps one or more keys to the
 specified value.  This operation requires time linear in the
 map size.

 @param value value whose presence in this map is to be tested
 @return <tt>true</tt> if a mapping to <tt>value</tt> exists;
         <tt>false</tt> otherwise
 @throws NullPointerException if the specified value is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.ConcurrentSkipListMap.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of key-value mappings in this map.  If this map
 contains more than <tt>Integer.MAX_VALUE</tt> elements, it
 returns <tt>Integer.MAX_VALUE</tt>.

 <p>Beware that, unlike in most collections, this method is
 <em>NOT</em> a constant-time operation. Because of the
 asynchronous nature of these maps, determining the current
 number of elements requires traversing them all to count them.
 Additionally, it is possible for the size to change during
 execution of this method, in which case the returned result
 will be inaccurate. Thus, this method is typically not very
 useful in concurrent applications.

 @return the number of elements in this map

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentSkipListMap.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this map contains no key-value mappings.
 @return <tt>true</tt> if this map contains no key-value mappings

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ConcurrentSkipListMap.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all of the mappings from this map.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<K> java.util.concurrent.ConcurrentSkipListMap.keySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a {@link NavigableSet} view of the keys contained in this map.
 The set's iterator returns the keys in ascending order.
 The set is backed by the map, so changes to the map are
 reflected in the set, and vice-versa.  The set supports element
 removal, which removes the corresponding mapping from the map,
 via the {@code Iterator.remove}, {@code Set.remove},
 {@code removeAll}, {@code retainAll}, and {@code clear}
 operations.  It does not support the {@code add} or {@code addAll}
 operations.

 <p>The view's {@code iterator} is a "weakly consistent" iterator
 that will never throw {@link ConcurrentModificationException},
 and guarantees to traverse elements as they existed upon
 construction of the iterator, and may (but is not guaranteed to)
 reflect any modifications subsequent to construction.

 <p>This method is equivalent to method {@code navigableKeySet}.

 @return a navigable set view of the keys in this map

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Collection<V> java.util.concurrent.ConcurrentSkipListMap.values()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a {@link Collection} view of the values contained in this map.
 The collection's iterator returns the values in ascending order
 of the corresponding keys.
 The collection is backed by the map, so changes to the map are
 reflected in the collection, and vice-versa.  The collection
 supports element removal, which removes the corresponding
 mapping from the map, via the <tt>Iterator.remove</tt>,
 <tt>Collection.remove</tt>, <tt>removeAll</tt>,
 <tt>retainAll</tt> and <tt>clear</tt> operations.  It does not
 support the <tt>add</tt> or <tt>addAll</tt> operations.

 <p>The view's <tt>iterator</tt> is a "weakly consistent" iterator
 that will never throw {@link ConcurrentModificationException},
 and guarantees to traverse elements as they existed upon
 construction of the iterator, and may (but is not guaranteed to)
 reflect any modifications subsequent to construction.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.util.Map.Entry<K, V>> java.util.concurrent.ConcurrentSkipListMap.entrySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a {@link Set} view of the mappings contained in this map.
 The set's iterator returns the entries in ascending key order.
 The set is backed by the map, so changes to the map are
 reflected in the set, and vice-versa.  The set supports element
 removal, which removes the corresponding mapping from the map,
 via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,
 <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt>
 operations.  It does not support the <tt>add</tt> or
 <tt>addAll</tt> operations.

 <p>The view's <tt>iterator</tt> is a "weakly consistent" iterator
 that will never throw {@link ConcurrentModificationException},
 and guarantees to traverse elements as they existed upon
 construction of the iterator, and may (but is not guaranteed to)
 reflect any modifications subsequent to construction.

 <p>The <tt>Map.Entry</tt> elements returned by
 <tt>iterator.next()</tt> do <em>not</em> support the
 <tt>setValue</tt> operation.

 @return a set view of the mappings contained in this map,
         sorted in ascending key order

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentSkipListMap.equals(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares the specified object with this map for equality.
 Returns <tt>true</tt> if the given object is also a map and the
 two maps represent the same mappings.  More formally, two maps
 <tt>m1</tt> and <tt>m2</tt> represent the same mappings if
 <tt>m1.entrySet().equals(m2.entrySet())</tt>.  This
 operation may return misleading results if either map is
 concurrently modified during execution of this method.

 @param o object to be compared for equality with this map
 @return <tt>true</tt> if the specified object is equal to this map

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.concurrent.ConcurrentSkipListMap.putIfAbsent(K key, V value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

 @return the previous value associated with the specified key,
         or <tt>null</tt> if there was no mapping for the key
 @throws ClassCastException if the specified key cannot be compared
         with the keys currently in the map
 @throws NullPointerException if the specified key or value is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentSkipListMap.remove(Object key, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

 @throws ClassCastException if the specified key cannot be compared
         with the keys currently in the map
 @throws NullPointerException if the specified key is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentSkipListMap.replace(K key, V oldValue, V newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

 @throws ClassCastException if the specified key cannot be compared
         with the keys currently in the map
 @throws NullPointerException if any of the arguments are null

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.concurrent.ConcurrentSkipListMap.replace(K key, V value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

 @return the previous value associated with the specified key,
         or <tt>null</tt> if there was no mapping for the key
 @throws ClassCastException if the specified key cannot be compared
         with the keys currently in the map
 @throws NullPointerException if the specified key or value is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public K java.util.concurrent.ConcurrentSkipListMap.firstKey()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public K java.util.concurrent.ConcurrentSkipListMap.lastKey()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentNavigableMap<K, V> java.util.concurrent.ConcurrentSkipListMap.subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if {@code fromKey} or {@code toKey} is null
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentNavigableMap<K, V> java.util.concurrent.ConcurrentSkipListMap.headMap(K toKey, boolean inclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if {@code toKey} is null
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentNavigableMap<K, V> java.util.concurrent.ConcurrentSkipListMap.tailMap(K fromKey, boolean inclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if {@code fromKey} is null
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentNavigableMap<K, V> java.util.concurrent.ConcurrentSkipListMap.subMap(K fromKey, K toKey)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if {@code fromKey} or {@code toKey} is null
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentNavigableMap<K, V> java.util.concurrent.ConcurrentSkipListMap.headMap(K toKey)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if {@code toKey} is null
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentNavigableMap<K, V> java.util.concurrent.ConcurrentSkipListMap.tailMap(K fromKey)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if {@code fromKey} is null
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.concurrent.ConcurrentSkipListMap.lowerEntry(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a key-value mapping associated with the greatest key
 strictly less than the given key, or <tt>null</tt> if there is
 no such key. The returned entry does <em>not</em> support the
 <tt>Entry.setValue</tt> method.

 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if the specified key is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public K java.util.concurrent.ConcurrentSkipListMap.lowerKey(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if the specified key is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.concurrent.ConcurrentSkipListMap.floorEntry(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a key-value mapping associated with the greatest key
 less than or equal to the given key, or <tt>null</tt> if there
 is no such key. The returned entry does <em>not</em> support
 the <tt>Entry.setValue</tt> method.

 @param key the key
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if the specified key is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public K java.util.concurrent.ConcurrentSkipListMap.floorKey(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @param key the key
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if the specified key is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.concurrent.ConcurrentSkipListMap.ceilingEntry(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a key-value mapping associated with the least key
 greater than or equal to the given key, or <tt>null</tt> if
 there is no such entry. The returned entry does <em>not</em>
 support the <tt>Entry.setValue</tt> method.

 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if the specified key is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public K java.util.concurrent.ConcurrentSkipListMap.ceilingKey(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if the specified key is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.concurrent.ConcurrentSkipListMap.higherEntry(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a key-value mapping associated with the least key
 strictly greater than the given key, or <tt>null</tt> if there
 is no such key. The returned entry does <em>not</em> support
 the <tt>Entry.setValue</tt> method.

 @param key the key
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if the specified key is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public K java.util.concurrent.ConcurrentSkipListMap.higherKey(K key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @param key the key
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if the specified key is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.concurrent.ConcurrentSkipListMap.firstEntry()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a key-value mapping associated with the least
 key in this map, or <tt>null</tt> if the map is empty.
 The returned entry does <em>not</em> support
 the <tt>Entry.setValue</tt> method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.concurrent.ConcurrentSkipListMap.lastEntry()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a key-value mapping associated with the greatest
 key in this map, or <tt>null</tt> if the map is empty.
 The returned entry does <em>not</em> support
 the <tt>Entry.setValue</tt> method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.concurrent.ConcurrentSkipListMap.pollFirstEntry()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes and returns a key-value mapping associated with
 the least key in this map, or <tt>null</tt> if the map is empty.
 The returned entry does <em>not</em> support
 the <tt>Entry.setValue</tt> method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Map.Entry<K, V> java.util.concurrent.ConcurrentSkipListMap.pollLastEntry()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes and returns a key-value mapping associated with
 the greatest key in this map, or <tt>null</tt> if the map is empty.
 The returned entry does <em>not</em> support
 the <tt>Entry.setValue</tt> method.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.concurrent.ConcurrentSkipListMap.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reconstitute the map from a stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.concurrent.ConcurrentSkipListMap.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Save the state of this map to a stream.

 @serialData The key (Object) and value (Object) for each
 key-value mapping represented by the map, followed by
 <tt>null</tt>. The key-value mappings are emitted in key-order
 (as determined by the Comparator, or by the keys' natural
 ordering if no Comparator).

<!-- END DATA -->
