<!-- BEGIN KEY -->
public class java.util.concurrent.LinkedBlockingDeque extends java.util.AbstractQueue implements java.util.concurrent.BlockingDeque, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 An optionally-bounded {@linkplain BlockingDeque blocking deque} based on
 linked nodes.

 <p> The optional capacity bound constructor argument serves as a
 way to prevent excessive expansion. The capacity, if unspecified,
 is equal to {@link Integer#MAX_VALUE}.  Linked nodes are
 dynamically created upon each insertion unless this would bring the
 deque above capacity.

 <p>Most operations run in constant time (ignoring time spent
 blocking).  Exceptions include {@link #remove(Object) remove},
 {@link #removeFirstOccurrence removeFirstOccurrence}, {@link
 #removeLastOccurrence removeLastOccurrence}, {@link #contains
 contains}, {@link #iterator iterator.remove()}, and the bulk
 operations, all of which run in linear time.

 <p>This class and its iterator implement all of the
 <em>optional</em> methods of the {@link Collection} and {@link
 Iterator} interfaces.

 <p>This class is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.

 @since 1.6
 @author  Doug Lea
 @param <E> the type of elements held in this collection

<!-- END DATA -->
<!-- BEGIN KEY -->
private final int java.util.concurrent.LinkedBlockingDeque.capacity
<!-- END KEY -->
<!-- BEGIN DATA -->
Maximum number of items in the deque 
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.ReentrantLock java.util.concurrent.LinkedBlockingDeque.lock
<!-- END KEY -->
<!-- BEGIN DATA -->
Main lock guarding all access 
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.Condition java.util.concurrent.LinkedBlockingDeque.notEmpty
<!-- END KEY -->
<!-- BEGIN DATA -->
Condition for waiting takes 
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.Condition java.util.concurrent.LinkedBlockingDeque.notFull
<!-- END KEY -->
<!-- BEGIN DATA -->
Condition for waiting puts 
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.LinkedBlockingDeque()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <tt>LinkedBlockingDeque</tt> with a capacity of
 {@link Integer#MAX_VALUE}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.LinkedBlockingDeque(int capacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <tt>LinkedBlockingDeque</tt> with the given (fixed) capacity.

 @param capacity the capacity of this deque
 @throws IllegalArgumentException if <tt>capacity</tt> is less than 1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.LinkedBlockingDeque(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <tt>LinkedBlockingDeque</tt> with a capacity of
 {@link Integer#MAX_VALUE}, initially containing the elements of
 the given collection, added in traversal order of the
 collection's iterator.

 @param c the collection of elements to initially contain
 @throws NullPointerException if the specified collection or any
         of its elements are null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.LinkedBlockingDeque.addFirst(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IllegalStateException {@inheritDoc}
 @throws NullPointerException  {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.LinkedBlockingDeque.addLast(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IllegalStateException {@inheritDoc}
 @throws NullPointerException  {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingDeque.offerFirst(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingDeque.offerLast(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.LinkedBlockingDeque.putFirst(E e) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @throws InterruptedException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.LinkedBlockingDeque.putLast(E e) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @throws InterruptedException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingDeque.offerFirst(E e, long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @throws InterruptedException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingDeque.offerLast(E e, long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @throws InterruptedException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.LinkedBlockingDeque.removeFirst()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.LinkedBlockingDeque.removeLast()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.LinkedBlockingDeque.getFirst()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.LinkedBlockingDeque.getLast()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingDeque.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element at the end of this deque unless it would
 violate capacity restrictions.  When using a capacity-restricted deque,
 it is generally preferable to use method {@link #offer(Object) offer}.

 <p>This method is equivalent to {@link #addLast}.

 @throws IllegalStateException if the element cannot be added at this
         time due to capacity restrictions
 @throws NullPointerException if the specified element is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingDeque.offer(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException if the specified element is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.LinkedBlockingDeque.put(E e) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @throws InterruptedException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingDeque.offer(E e, long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NullPointerException {@inheritDoc}
 @throws InterruptedException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.LinkedBlockingDeque.remove()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves and removes the head of the queue represented by this deque.
 This method differs from {@link #poll poll} only in that it throws an
 exception if this deque is empty.

 <p>This method is equivalent to {@link #removeFirst() removeFirst}.

 @return the head of the queue represented by this deque
 @throws NoSuchElementException if this deque is empty

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.LinkedBlockingDeque.element()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves, but does not remove, the head of the queue represented by
 this deque.  This method differs from {@link #peek peek} only in that
 it throws an exception if this deque is empty.

 <p>This method is equivalent to {@link #getFirst() getFirst}.

 @return the head of the queue represented by this deque
 @throws NoSuchElementException if this deque is empty

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.LinkedBlockingDeque.remainingCapacity()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of additional elements that this deque can ideally
 (in the absence of memory or resource constraints) accept without
 blocking. This is always equal to the initial capacity of this deque
 less the current <tt>size</tt> of this deque.

 <p>Note that you <em>cannot</em> always tell if an attempt to insert
 an element will succeed by inspecting <tt>remainingCapacity</tt>
 because it may be the case that another thread is about to
 insert or remove an element.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.LinkedBlockingDeque.drainTo(java.util.Collection<? super E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws UnsupportedOperationException {@inheritDoc}
 @throws ClassCastException            {@inheritDoc}
 @throws NullPointerException          {@inheritDoc}
 @throws IllegalArgumentException      {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.LinkedBlockingDeque.drainTo(java.util.Collection<? super E> c, int maxElements)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws UnsupportedOperationException {@inheritDoc}
 @throws ClassCastException            {@inheritDoc}
 @throws NullPointerException          {@inheritDoc}
 @throws IllegalArgumentException      {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.LinkedBlockingDeque.push(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws IllegalStateException {@inheritDoc}
 @throws NullPointerException  {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.LinkedBlockingDeque.pop()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingDeque.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the first occurrence of the specified element from this deque.
 If the deque does not contain the element, it is unchanged.
 More formally, removes the first element <tt>e</tt> such that
 <tt>o.equals(e)</tt> (if such an element exists).
 Returns <tt>true</tt> if this deque contained the specified element
 (or equivalently, if this deque changed as a result of the call).

 <p>This method is equivalent to
 {@link #removeFirstOccurrence(Object) removeFirstOccurrence}.

 @param o element to be removed from this deque, if present
 @return <tt>true</tt> if this deque changed as a result of the call

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.LinkedBlockingDeque.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of elements in this deque.

 @return the number of elements in this deque

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingDeque.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this deque contains the specified element.
 More formally, returns <tt>true</tt> if and only if this deque contains
 at least one element <tt>e</tt> such that <tt>o.equals(e)</tt>.

 @param o object to be checked for containment in this deque
 @return <tt>true</tt> if this deque contains the specified element

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.util.concurrent.LinkedBlockingDeque.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array containing all of the elements in this deque, in
 proper sequence (from first to last element).

 <p>The returned array will be "safe" in that no references to it are
 maintained by this deque.  (In other words, this method must allocate
 a new array).  The caller is thus free to modify the returned array.

 <p>This method acts as bridge between array-based and collection-based
 APIs.

 @return an array containing all of the elements in this deque

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.util.concurrent.LinkedBlockingDeque.toArray(T[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array containing all of the elements in this deque, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.  If the deque fits in the specified array, it
 is returned therein.  Otherwise, a new array is allocated with the
 runtime type of the specified array and the size of this deque.

 <p>If this deque fits in the specified array with room to spare
 (i.e., the array has more elements than this deque), the element in
 the array immediately following the end of the deque is set to
 <tt>null</tt>.

 <p>Like the {@link #toArray()} method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 <p>Suppose <tt>x</tt> is a deque known to contain only strings.
 The following code can be used to dump the deque into a newly
 allocated array of <tt>String</tt>:

 <pre>
     String[] y = x.toArray(new String[0]);</pre>

 Note that <tt>toArray(new Object[0])</tt> is identical in function to
 <tt>toArray()</tt>.

 @param a the array into which the elements of the deque are to
          be stored, if it is big enough; otherwise, a new array of the
          same runtime type is allocated for this purpose
 @return an array containing all of the elements in this deque
 @throws ArrayStoreException if the runtime type of the specified array
         is not a supertype of the runtime type of every element in
         this deque
 @throws NullPointerException if the specified array is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.LinkedBlockingDeque.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically removes all of the elements from this deque.
 The deque will be empty after this call returns.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.concurrent.LinkedBlockingDeque.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an iterator over the elements in this deque in proper sequence.
 The elements will be returned in order from first (head) to last (tail).
 The returned <tt>Iterator</tt> is a "weakly consistent" iterator that
 will never throw {@link ConcurrentModificationException},
 and guarantees to traverse elements as they existed upon
 construction of the iterator, and may (but is not guaranteed to)
 reflect any modifications subsequent to construction.

 @return an iterator over the elements in this deque in proper sequence

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.concurrent.LinkedBlockingDeque.descendingIterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an iterator over the elements in this deque in reverse
 sequential order.  The elements will be returned in order from
 last (tail) to first (head).
 The returned <tt>Iterator</tt> is a "weakly consistent" iterator that
 will never throw {@link ConcurrentModificationException},
 and guarantees to traverse elements as they existed upon
 construction of the iterator, and may (but is not guaranteed to)
 reflect any modifications subsequent to construction.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.concurrent.LinkedBlockingDeque.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reconstitute this deque from a stream (that is,
 deserialize it).
 @param s the stream

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.concurrent.LinkedBlockingDeque.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Save the state of this deque to a stream (that is, serialize it).

 @serialData The capacity (int), followed by elements (each an
 <tt>Object</tt>) in the proper order, followed by a null
 @param s the stream

<!-- END DATA -->
