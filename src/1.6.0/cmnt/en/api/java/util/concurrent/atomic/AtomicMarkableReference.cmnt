<!-- BEGIN KEY -->
public class java.util.concurrent.atomic.AtomicMarkableReference extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 An {@code AtomicMarkableReference} maintains an object reference
 along with a mark bit, that can be updated atomically.
 <p>
 <p> Implementation note. This implementation maintains markable
 references by creating internal objects representing "boxed"
 [reference, boolean] pairs.

 @since 1.5
 @author Doug Lea
 @param <V> The type of object referred to by this reference

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.atomic.AtomicMarkableReference(V initialRef, boolean initialMark)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new {@code AtomicMarkableReference} with the given
 initial values.

 @param initialRef the initial reference
 @param initialMark the initial mark

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.concurrent.atomic.AtomicMarkableReference.getReference()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current value of the reference.

 @return the current value of the reference

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.atomic.AtomicMarkableReference.isMarked()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current value of the mark.

 @return the current value of the mark

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.concurrent.atomic.AtomicMarkableReference.get(boolean[] markHolder)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current values of both the reference and the mark.
 Typical usage is {@code boolean[1] holder; ref = v.get(holder); }.

 @param markHolder an array of size of at least one. On return,
 {@code markholder[0]} will hold the value of the mark.
 @return the current value of the reference

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.atomic.AtomicMarkableReference.weakCompareAndSet(V expectedReference, V newReference, boolean expectedMark, boolean newMark)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets the value of both the reference and mark
 to the given update values if the
 current reference is {@code ==} to the expected reference
 and the current mark is equal to the expected mark.

 <p>May <a href="package-summary.html#Spurious">fail spuriously</a>
 and does not provide ordering guarantees, so is only rarely an
 appropriate alternative to {@code compareAndSet}.

 @param expectedReference the expected value of the reference
 @param newReference the new value for the reference
 @param expectedMark the expected value of the mark
 @param newMark the new value for the mark
 @return true if successful

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.atomic.AtomicMarkableReference.compareAndSet(V expectedReference, V newReference, boolean expectedMark, boolean newMark)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets the value of both the reference and mark
 to the given update values if the
 current reference is {@code ==} to the expected reference
 and the current mark is equal to the expected mark.

 @param expectedReference the expected value of the reference
 @param newReference the new value for the reference
 @param expectedMark the expected value of the mark
 @param newMark the new value for the mark
 @return true if successful

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.atomic.AtomicMarkableReference.set(V newReference, boolean newMark)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Unconditionally sets the value of both the reference and mark.

 @param newReference the new value for the reference
 @param newMark the new value for the mark

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.atomic.AtomicMarkableReference.attemptMark(V expectedReference, boolean newMark)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets the value of the mark to the given update value
 if the current reference is {@code ==} to the expected
 reference.  Any given invocation of this operation may fail
 (return {@code false}) spuriously, but repeated invocation
 when the current value holds the expected value and no other
 thread is also attempting to set the value will eventually
 succeed.

 @param expectedReference the expected value of the reference
 @param newMark the new value for the mark
 @return true if successful

<!-- END DATA -->
