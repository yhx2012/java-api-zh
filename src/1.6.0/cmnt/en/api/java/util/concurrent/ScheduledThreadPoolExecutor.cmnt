<!-- BEGIN KEY -->
public class java.util.concurrent.ScheduledThreadPoolExecutor extends java.util.concurrent.ThreadPoolExecutor implements java.util.concurrent.ScheduledExecutorService
<!-- END KEY -->
<!-- BEGIN DATA -->
 A {@link ThreadPoolExecutor} that can additionally schedule
 commands to run after a given delay, or to execute
 periodically. This class is preferable to {@link java.util.Timer}
 when multiple worker threads are needed, or when the additional
 flexibility or capabilities of {@link ThreadPoolExecutor} (which
 this class extends) are required.

 <p> Delayed tasks execute no sooner than they are enabled, but
 without any real-time guarantees about when, after they are
 enabled, they will commence. Tasks scheduled for exactly the same
 execution time are enabled in first-in-first-out (FIFO) order of
 submission.

 <p>While this class inherits from {@link ThreadPoolExecutor}, a few
 of the inherited tuning methods are not useful for it. In
 particular, because it acts as a fixed-sized pool using
 <tt>corePoolSize</tt> threads and an unbounded queue, adjustments
 to <tt>maximumPoolSize</tt> have no useful effect.

 <p><b>Extension notes:</b> This class overrides {@link
 AbstractExecutorService} <tt>submit</tt> methods to generate
 internal objects to control per-task delays and scheduling. To
 preserve functionality, any further overrides of these methods in
 subclasses must invoke superclass versions, which effectively
 disables additional task customization. However, this class
 provides alternative protected extension method
 <tt>decorateTask</tt> (one version each for <tt>Runnable</tt> and
 <tt>Callable</tt>) that can be used to customize the concrete task
 types used to execute commands entered via <tt>execute</tt>,
 <tt>submit</tt>, <tt>schedule</tt>, <tt>scheduleAtFixedRate</tt>,
 and <tt>scheduleWithFixedDelay</tt>.  By default, a
 <tt>ScheduledThreadPoolExecutor</tt> uses a task type extending
 {@link FutureTask}. However, this may be modified or replaced using
 subclasses of the form:

 <pre>
 public class CustomScheduledExecutor extends ScheduledThreadPoolExecutor {

   static class CustomTask&lt;V&gt; implements RunnableScheduledFuture&lt;V&gt; { ... }

   protected &lt;V&gt; RunnableScheduledFuture&lt;V&gt; decorateTask(
                Runnable r, RunnableScheduledFuture&lt;V&gt; task) {
       return new CustomTask&lt;V&gt;(r, task);
   }

   protected &lt;V&gt; RunnableScheduledFuture&lt;V&gt; decorateTask(
                Callable&lt;V&gt; c, RunnableScheduledFuture&lt;V&gt; task) {
       return new CustomTask&lt;V&gt;(c, task);
   }
   // ... add constructors, etc.
 }
 </pre>
 @since 1.5
 @author Doug Lea

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ScheduledThreadPoolExecutor(int corePoolSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new ScheduledThreadPoolExecutor with the given core
 pool size.

 @param corePoolSize the number of threads to keep in the pool,
 even if they are idle
 @throws IllegalArgumentException if <tt>corePoolSize &lt; 0</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ScheduledThreadPoolExecutor(int corePoolSize, ThreadFactory threadFactory)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new ScheduledThreadPoolExecutor with the given
 initial parameters.

 @param corePoolSize the number of threads to keep in the pool,
 even if they are idle
 @param threadFactory the factory to use when the executor
 creates a new thread
 @throws IllegalArgumentException if <tt>corePoolSize &lt; 0</tt>
 @throws NullPointerException if threadFactory is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ScheduledThreadPoolExecutor(int corePoolSize, RejectedExecutionHandler handler)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new ScheduledThreadPoolExecutor with the given
 initial parameters.

 @param corePoolSize the number of threads to keep in the pool,
 even if they are idle
 @param handler the handler to use when execution is blocked
 because the thread bounds and queue capacities are reached
 @throws IllegalArgumentException if <tt>corePoolSize &lt; 0</tt>
 @throws NullPointerException if handler is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ScheduledThreadPoolExecutor(int corePoolSize, ThreadFactory threadFactory, RejectedExecutionHandler handler)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new ScheduledThreadPoolExecutor with the given
 initial parameters.

 @param corePoolSize the number of threads to keep in the pool,
 even if they are idle
 @param threadFactory the factory to use when the executor
 creates a new thread
 @param handler the handler to use when execution is blocked
 because the thread bounds and queue capacities are reached.
 @throws IllegalArgumentException if <tt>corePoolSize &lt; 0</tt>
 @throws NullPointerException if threadFactory or handler is null

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.concurrent.RunnableScheduledFuture<V> java.util.concurrent.ScheduledThreadPoolExecutor.decorateTask(Runnable runnable, java.util.concurrent.RunnableScheduledFuture<V> task)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Modifies or replaces the task used to execute a runnable.
 This method can be used to override the concrete
 class used for managing internal tasks.
 The default implementation simply returns the given task.

 @param runnable the submitted Runnable
 @param task the task created to execute the runnable
 @return a task that can execute the runnable
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.concurrent.RunnableScheduledFuture<V> java.util.concurrent.ScheduledThreadPoolExecutor.decorateTask(java.util.concurrent.Callable<V> callable, java.util.concurrent.RunnableScheduledFuture<V> task)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Modifies or replaces the task used to execute a callable.
 This method can be used to override the concrete
 class used for managing internal tasks.
 The default implementation simply returns the given task.

 @param callable the submitted Callable
 @param task the task created to execute the callable
 @return a task that can execute the callable
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ScheduledThreadPoolExecutor.execute(Runnable command)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Executes command with zero required delay. This has effect
 equivalent to <tt>schedule(command, 0, anyUnit)</tt>.  Note
 that inspections of the queue and of the list returned by
 <tt>shutdownNow</tt> will access the zero-delayed
 {@link ScheduledFuture}, not the <tt>command</tt> itself.

 @param command the task to execute
 @throws RejectedExecutionException at discretion of
 <tt>RejectedExecutionHandler</tt>, if task cannot be accepted
 for execution because the executor has been shut down.
 @throws NullPointerException if command is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ScheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the policy on whether to continue executing existing periodic
 tasks even when this executor has been <tt>shutdown</tt>. In
 this case, these tasks will only terminate upon
 <tt>shutdownNow</tt>, or after setting the policy to
 <tt>false</tt> when already shutdown. This value is by default
 false.

 @param value if true, continue after shutdown, else don't.
 @see #getContinueExistingPeriodicTasksAfterShutdownPolicy

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ScheduledThreadPoolExecutor.getContinueExistingPeriodicTasksAfterShutdownPolicy()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the policy on whether to continue executing existing
 periodic tasks even when this executor has been
 <tt>shutdown</tt>. In this case, these tasks will only
 terminate upon <tt>shutdownNow</tt> or after setting the policy
 to <tt>false</tt> when already shutdown. This value is by
 default false.

 @return true if will continue after shutdown
 @see #setContinueExistingPeriodicTasksAfterShutdownPolicy

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the policy on whether to execute existing delayed
 tasks even when this executor has been <tt>shutdown</tt>. In
 this case, these tasks will only terminate upon
 <tt>shutdownNow</tt>, or after setting the policy to
 <tt>false</tt> when already shutdown. This value is by default
 true.

 @param value if true, execute after shutdown, else don't.
 @see #getExecuteExistingDelayedTasksAfterShutdownPolicy

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ScheduledThreadPoolExecutor.getExecuteExistingDelayedTasksAfterShutdownPolicy()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the policy on whether to execute existing delayed
 tasks even when this executor has been <tt>shutdown</tt>. In
 this case, these tasks will only terminate upon
 <tt>shutdownNow</tt>, or after setting the policy to
 <tt>false</tt> when already shutdown. This value is by default
 true.

 @return true if will execute after shutdown
 @see #setExecuteExistingDelayedTasksAfterShutdownPolicy

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ScheduledThreadPoolExecutor.shutdown()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Initiates an orderly shutdown in which previously submitted
 tasks are executed, but no new tasks will be accepted. If the
 <tt>ExecuteExistingDelayedTasksAfterShutdownPolicy</tt> has
 been set <tt>false</tt>, existing delayed tasks whose delays
 have not yet elapsed are cancelled. And unless the
 <tt>ContinueExistingPeriodicTasksAfterShutdownPolicy</tt> has
 been set <tt>true</tt>, future executions of existing periodic
 tasks will be cancelled.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<java.lang.Runnable> java.util.concurrent.ScheduledThreadPoolExecutor.shutdownNow()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Attempts to stop all actively executing tasks, halts the
 processing of waiting tasks, and returns a list of the tasks
 that were awaiting execution.

 <p>There are no guarantees beyond best-effort attempts to stop
 processing actively executing tasks.  This implementation
 cancels tasks via {@link Thread#interrupt}, so any task that
 fails to respond to interrupts may never terminate.

 @return list of tasks that never commenced execution.  Each
 element of this list is a {@link ScheduledFuture},
 including those tasks submitted using <tt>execute</tt>, which
 are for scheduling purposes used as the basis of a zero-delay
 <tt>ScheduledFuture</tt>.
 @throws SecurityException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.BlockingQueue<java.lang.Runnable> java.util.concurrent.ScheduledThreadPoolExecutor.getQueue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the task queue used by this executor.  Each element of
 this queue is a {@link ScheduledFuture}, including those
 tasks submitted using <tt>execute</tt> which are for scheduling
 purposes used as the basis of a zero-delay
 <tt>ScheduledFuture</tt>. Iteration over this queue is
 <em>not</em> guaranteed to traverse tasks in the order in
 which they will execute.

 @return the task queue

<!-- END DATA -->
