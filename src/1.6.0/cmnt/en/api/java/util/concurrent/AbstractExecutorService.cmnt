<!-- BEGIN KEY -->
public abstract class java.util.concurrent.AbstractExecutorService extends java.lang.Object implements java.util.concurrent.ExecutorService
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides default implementations of {@link ExecutorService}
 execution methods. This class implements the <tt>submit</tt>,
 <tt>invokeAny</tt> and <tt>invokeAll</tt> methods using a
 {@link RunnableFuture} returned by <tt>newTaskFor</tt>, which defaults
 to the {@link FutureTask} class provided in this package.  For example,
 the implementation of <tt>submit(Runnable)</tt> creates an
 associated <tt>RunnableFuture</tt> that is executed and
 returned. Subclasses may override the <tt>newTaskFor</tt> methods
 to return <tt>RunnableFuture</tt> implementations other than
 <tt>FutureTask</tt>.

 <p> <b>Extension example</b>. Here is a sketch of a class
 that customizes {@link ThreadPoolExecutor} to use
 a <tt>CustomTask</tt> class instead of the default <tt>FutureTask</tt>:
 <pre>
 public class CustomThreadPoolExecutor extends ThreadPoolExecutor {

   static class CustomTask&lt;V&gt; implements RunnableFuture&lt;V&gt; {...}

   protected &lt;V&gt; RunnableFuture&lt;V&gt; newTaskFor(Callable&lt;V&gt; c) {
       return new CustomTask&lt;V&gt;(c);
   }
   protected &lt;V&gt; RunnableFuture&lt;V&gt; newTaskFor(Runnable r, V v) {
       return new CustomTask&lt;V&gt;(r, v);
   }
   // ... add constructors, etc.
 }
 </pre>
 @since 1.5
 @author Doug Lea

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.concurrent.RunnableFuture<T> java.util.concurrent.AbstractExecutorService.newTaskFor(Runnable runnable, T value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <tt>RunnableFuture</tt> for the given runnable and default
 value.

 @param runnable the runnable task being wrapped
 @param value the default value for the returned future
 @return a <tt>RunnableFuture</tt> which when run will run the
 underlying runnable and which, as a <tt>Future</tt>, will yield
 the given value as its result and provide for cancellation of
 the underlying task.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.concurrent.RunnableFuture<T> java.util.concurrent.AbstractExecutorService.newTaskFor(java.util.concurrent.Callable<T> callable)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a <tt>RunnableFuture</tt> for the given callable task.

 @param callable the callable task being wrapped
 @return a <tt>RunnableFuture</tt> which when run will call the
 underlying callable and which, as a <tt>Future</tt>, will yield
 the callable's result as its result and provide for
 cancellation of the underlying task.
 @since 1.6

<!-- END DATA -->
