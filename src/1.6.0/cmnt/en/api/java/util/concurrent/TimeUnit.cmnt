<!-- BEGIN KEY -->
public class java.util.concurrent.TimeUnit extends java.lang.Enum
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <tt>TimeUnit</tt> represents time durations at a given unit of
 granularity and provides utility methods to convert across units,
 and to perform timing and delay operations in these units.  A
 <tt>TimeUnit</tt> does not maintain time information, but only
 helps organize and use time representations that may be maintained
 separately across various contexts.  A nanosecond is defined as one
 thousandth of a microsecond, a microsecond as one thousandth of a
 millisecond, a millisecond as one thousandth of a second, a minute
 as sixty seconds, an hour as sixty minutes, and a day as twenty four
 hours.

 <p>A <tt>TimeUnit</tt> is mainly used to inform time-based methods
 how a given timing parameter should be interpreted. For example,
 the following code will timeout in 50 milliseconds if the {@link
 java.util.concurrent.locks.Lock lock} is not available:

 <pre>  Lock lock = ...;
  if ( lock.tryLock(50L, TimeUnit.MILLISECONDS) ) ...
 </pre>
 while this code will timeout in 50 seconds:
 <pre>
  Lock lock = ...;
  if ( lock.tryLock(50L, TimeUnit.SECONDS) ) ...
 </pre>

 Note however, that there is no guarantee that a particular timeout
 implementation will be able to notice the passage of time at the
 same granularity as the given <tt>TimeUnit</tt>.

 @since 1.5
 @author Doug Lea

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.concurrent.TimeUnit.convert(long sourceDuration, TimeUnit sourceUnit)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Convert the given time duration in the given unit to this
 unit.  Conversions from finer to coarser granularities
 truncate, so lose precision. For example converting
 <tt>999</tt> milliseconds to seconds results in
 <tt>0</tt>. Conversions from coarser to finer granularities
 with arguments that would numerically overflow saturate to
 <tt>Long.MIN_VALUE</tt> if negative or <tt>Long.MAX_VALUE</tt>
 if positive.

 <p>For example, to convert 10 minutes to milliseconds, use:
 <tt>TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES)</tt>

 @param sourceDuration the time duration in the given <tt>sourceUnit</tt>
 @param sourceUnit the unit of the <tt>sourceDuration</tt> argument
 @return the converted duration in this unit,
 or <tt>Long.MIN_VALUE</tt> if conversion would negatively
 overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.concurrent.TimeUnit.toNanos(long duration)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Equivalent to <tt>NANOSECONDS.convert(duration, this)</tt>.
 @param duration the duration
 @return the converted duration,
 or <tt>Long.MIN_VALUE</tt> if conversion would negatively
 overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
 @see #convert

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.concurrent.TimeUnit.toMicros(long duration)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Equivalent to <tt>MICROSECONDS.convert(duration, this)</tt>.
 @param duration the duration
 @return the converted duration,
 or <tt>Long.MIN_VALUE</tt> if conversion would negatively
 overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
 @see #convert

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.concurrent.TimeUnit.toMillis(long duration)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Equivalent to <tt>MILLISECONDS.convert(duration, this)</tt>.
 @param duration the duration
 @return the converted duration,
 or <tt>Long.MIN_VALUE</tt> if conversion would negatively
 overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
 @see #convert

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.concurrent.TimeUnit.toSeconds(long duration)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Equivalent to <tt>SECONDS.convert(duration, this)</tt>.
 @param duration the duration
 @return the converted duration,
 or <tt>Long.MIN_VALUE</tt> if conversion would negatively
 overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
 @see #convert

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.concurrent.TimeUnit.toMinutes(long duration)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Equivalent to <tt>MINUTES.convert(duration, this)</tt>.
 @param duration the duration
 @return the converted duration,
 or <tt>Long.MIN_VALUE</tt> if conversion would negatively
 overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
 @see #convert
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.concurrent.TimeUnit.toHours(long duration)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Equivalent to <tt>HOURS.convert(duration, this)</tt>.
 @param duration the duration
 @return the converted duration,
 or <tt>Long.MIN_VALUE</tt> if conversion would negatively
 overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
 @see #convert
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.util.concurrent.TimeUnit.toDays(long duration)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Equivalent to <tt>DAYS.convert(duration, this)</tt>.
 @param duration the duration
 @return the converted duration
 @see #convert
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.TimeUnit.timedWait(Object obj, long timeout) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Performs a timed <tt>Object.wait</tt> using this time unit.
 This is a convenience method that converts timeout arguments
 into the form required by the <tt>Object.wait</tt> method.

 <p>For example, you could implement a blocking <tt>poll</tt>
 method (see {@link BlockingQueue#poll BlockingQueue.poll})
 using:

 <pre>  public synchronized Object poll(long timeout, TimeUnit unit) throws InterruptedException {
    while (empty) {
      unit.timedWait(this, timeout);
      ...
    }
  }</pre>

 @param obj the object to wait on
 @param timeout the maximum time to wait. If less than
 or equal to zero, do not wait at all.
 @throws InterruptedException if interrupted while waiting.
 @see Object#wait(long, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.TimeUnit.timedJoin(Thread thread, long timeout) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Performs a timed <tt>Thread.join</tt> using this time unit.
 This is a convenience method that converts time arguments into the
 form required by the <tt>Thread.join</tt> method.
 @param thread the thread to wait for
 @param timeout the maximum time to wait. If less than
 or equal to zero, do not wait at all.
 @throws InterruptedException if interrupted while waiting.
 @see Thread#join(long, int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.TimeUnit.sleep(long timeout) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Performs a <tt>Thread.sleep</tt> using this unit.
 This is a convenience method that converts time arguments into the
 form required by the <tt>Thread.sleep</tt> method.
 @param timeout the minimum time to sleep. If less than
 or equal to zero, do not sleep at all.
 @throws InterruptedException if interrupted while sleeping.
 @see Thread#sleep

<!-- END DATA -->
