<!-- BEGIN KEY -->
public class java.util.concurrent.ConcurrentHashMap extends java.util.AbstractMap implements java.util.concurrent.ConcurrentMap, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A hash table supporting full concurrency of retrievals and
 adjustable expected concurrency for updates. This class obeys the
 same functional specification as {@link java.util.Hashtable}, and
 includes versions of methods corresponding to each method of
 <tt>Hashtable</tt>. However, even though all operations are
 thread-safe, retrieval operations do <em>not</em> entail locking,
 and there is <em>not</em> any support for locking the entire table
 in a way that prevents all access.  This class is fully
 interoperable with <tt>Hashtable</tt> in programs that rely on its
 thread safety but not on its synchronization details.

 <p> Retrieval operations (including <tt>get</tt>) generally do not
 block, so may overlap with update operations (including
 <tt>put</tt> and <tt>remove</tt>). Retrievals reflect the results
 of the most recently <em>completed</em> update operations holding
 upon their onset.  For aggregate operations such as <tt>putAll</tt>
 and <tt>clear</tt>, concurrent retrievals may reflect insertion or
 removal of only some entries.  Similarly, Iterators and
 Enumerations return elements reflecting the state of the hash table
 at some point at or since the creation of the iterator/enumeration.
 They do <em>not</em> throw {@link ConcurrentModificationException}.
 However, iterators are designed to be used by only one thread at a time.

 <p> The allowed concurrency among update operations is guided by
 the optional <tt>concurrencyLevel</tt> constructor argument
 (default <tt>16</tt>), which is used as a hint for internal sizing.  The
 table is internally partitioned to try to permit the indicated
 number of concurrent updates without contention. Because placement
 in hash tables is essentially random, the actual concurrency will
 vary.  Ideally, you should choose a value to accommodate as many
 threads as will ever concurrently modify the table. Using a
 significantly higher value than you need can waste space and time,
 and a significantly lower value can lead to thread contention. But
 overestimates and underestimates within an order of magnitude do
 not usually have much noticeable impact. A value of one is
 appropriate when it is known that only one thread will modify and
 all others will only read. Also, resizing this or any other kind of
 hash table is a relatively slow operation, so, when possible, it is
 a good idea to provide estimates of expected table sizes in
 constructors.

 <p>This class and its views and iterators implement all of the
 <em>optional</em> methods of the {@link Map} and {@link Iterator}
 interfaces.

 <p> Like {@link Hashtable} but unlike {@link HashMap}, this class
 does <em>not</em> allow <tt>null</tt> to be used as a key or value.

 <p>This class is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.

 @since 1.5
 @author Doug Lea
 @param <K> the type of keys maintained by this map
 @param <V> the type of mapped values

<!-- END DATA -->
<!-- BEGIN KEY -->
final int java.util.concurrent.ConcurrentHashMap.segmentMask
<!-- END KEY -->
<!-- BEGIN DATA -->
 Mask value for indexing into segments. The upper bits of a
 key's hash code are used to choose the segment.

<!-- END DATA -->
<!-- BEGIN KEY -->
final int java.util.concurrent.ConcurrentHashMap.segmentShift
<!-- END KEY -->
<!-- BEGIN DATA -->
 Shift value for indexing within segments.

<!-- END DATA -->
<!-- BEGIN KEY -->
final java.util.concurrent.ConcurrentHashMap.Segment[] java.util.concurrent.ConcurrentHashMap.segments
<!-- END KEY -->
<!-- BEGIN DATA -->
 The segments, each of which is a specialized hash table

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentHashMap(int initialCapacity, float loadFactor, int concurrencyLevel)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new, empty map with the specified initial
 capacity, load factor and concurrency level.

 @param initialCapacity the initial capacity. The implementation
 performs internal sizing to accommodate this many elements.
 @param loadFactor  the load factor threshold, used to control resizing.
 Resizing may be performed when the average number of elements per
 bin exceeds this threshold.
 @param concurrencyLevel the estimated number of concurrently
 updating threads. The implementation performs internal sizing
 to try to accommodate this many threads.
 @throws IllegalArgumentException if the initial capacity is
 negative or the load factor or concurrencyLevel are
 nonpositive.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentHashMap(int initialCapacity, float loadFactor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new, empty map with the specified initial capacity
 and load factor and with the default concurrencyLevel (16).

 @param initialCapacity The implementation performs internal
 sizing to accommodate this many elements.
 @param loadFactor  the load factor threshold, used to control resizing.
 Resizing may be performed when the average number of elements per
 bin exceeds this threshold.
 @throws IllegalArgumentException if the initial capacity of
 elements is negative or the load factor is nonpositive

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentHashMap(int initialCapacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new, empty map with the specified initial capacity,
 and with default load factor (0.75) and concurrencyLevel (16).

 @param initialCapacity the initial capacity. The implementation
 performs internal sizing to accommodate this many elements.
 @throws IllegalArgumentException if the initial capacity of
 elements is negative.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentHashMap()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new, empty map with a default initial capacity (16),
 load factor (0.75) and concurrencyLevel (16).

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentHashMap(java.util.Map<? extends K, ? extends V> m)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new map with the same mappings as the given map.
 The map is created with a capacity of 1.5 times the number
 of mappings in the given map or 16 (whichever is greater),
 and a default load factor (0.75) and concurrencyLevel (16).

 @param m the map

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentHashMap.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this map contains no key-value mappings.

 @return <tt>true</tt> if this map contains no key-value mappings

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.ConcurrentHashMap.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of key-value mappings in this map.  If the
 map contains more than <tt>Integer.MAX_VALUE</tt> elements, returns
 <tt>Integer.MAX_VALUE</tt>.

 @return the number of key-value mappings in this map

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.concurrent.ConcurrentHashMap.get(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the value to which the specified key is mapped,
 or {@code null} if this map contains no mapping for the key.

 <p>More formally, if this map contains a mapping from a key
 {@code k} to a value {@code v} such that {@code key.equals(k)},
 then this method returns {@code v}; otherwise it returns
 {@code null}.  (There can be at most one such mapping.)

 @throws NullPointerException if the specified key is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentHashMap.containsKey(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tests if the specified object is a key in this table.

 @param  key   possible key
 @return <tt>true</tt> if and only if the specified object
         is a key in this table, as determined by the
         <tt>equals</tt> method; <tt>false</tt> otherwise.
 @throws NullPointerException if the specified key is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentHashMap.containsValue(Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this map maps one or more keys to the
 specified value. Note: This method requires a full internal
 traversal of the hash table, and so is much slower than
 method <tt>containsKey</tt>.

 @param value value whose presence in this map is to be tested
 @return <tt>true</tt> if this map maps one or more keys to the
         specified value
 @throws NullPointerException if the specified value is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentHashMap.contains(Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Legacy method testing if some key maps into the specified value
 in this table.  This method is identical in functionality to
 {@link #containsValue}, and exists solely to ensure
 full compatibility with class {@link java.util.Hashtable},
 which supported this method prior to introduction of the
 Java Collections framework.

 @param  value a value to search for
 @return <tt>true</tt> if and only if some key maps to the
         <tt>value</tt> argument in this table as
         determined by the <tt>equals</tt> method;
         <tt>false</tt> otherwise
 @throws NullPointerException if the specified value is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.concurrent.ConcurrentHashMap.put(K key, V value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Maps the specified key to the specified value in this table.
 Neither the key nor the value can be null.

 <p> The value can be retrieved by calling the <tt>get</tt> method
 with a key that is equal to the original key.

 @param key key with which the specified value is to be associated
 @param value value to be associated with the specified key
 @return the previous value associated with <tt>key</tt>, or
         <tt>null</tt> if there was no mapping for <tt>key</tt>
 @throws NullPointerException if the specified key or value is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.concurrent.ConcurrentHashMap.putIfAbsent(K key, V value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

 @return the previous value associated with the specified key,
         or <tt>null</tt> if there was no mapping for the key
 @throws NullPointerException if the specified key or value is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ConcurrentHashMap.putAll(java.util.Map<? extends K, ? extends V> m)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies all of the mappings from the specified map to this one.
 These mappings replace any mappings that this map had for any of the
 keys currently in the specified map.

 @param m mappings to be stored in this map

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.concurrent.ConcurrentHashMap.remove(Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the key (and its corresponding value) from this map.
 This method does nothing if the key is not in the map.

 @param  key the key that needs to be removed
 @return the previous value associated with <tt>key</tt>, or
         <tt>null</tt> if there was no mapping for <tt>key</tt>
 @throws NullPointerException if the specified key is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentHashMap.remove(Object key, Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

 @throws NullPointerException if the specified key is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentHashMap.replace(K key, V oldValue, V newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

 @throws NullPointerException if any of the arguments are null

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.concurrent.ConcurrentHashMap.replace(K key, V value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

 @return the previous value associated with the specified key,
         or <tt>null</tt> if there was no mapping for the key
 @throws NullPointerException if the specified key or value is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ConcurrentHashMap.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all of the mappings from this map.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<K> java.util.concurrent.ConcurrentHashMap.keySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a {@link Set} view of the keys contained in this map.
 The set is backed by the map, so changes to the map are
 reflected in the set, and vice-versa.  The set supports element
 removal, which removes the corresponding mapping from this map,
 via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,
 <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt>
 operations.  It does not support the <tt>add</tt> or
 <tt>addAll</tt> operations.

 <p>The view's <tt>iterator</tt> is a "weakly consistent" iterator
 that will never throw {@link ConcurrentModificationException},
 and guarantees to traverse elements as they existed upon
 construction of the iterator, and may (but is not guaranteed to)
 reflect any modifications subsequent to construction.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Collection<V> java.util.concurrent.ConcurrentHashMap.values()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a {@link Collection} view of the values contained in this map.
 The collection is backed by the map, so changes to the map are
 reflected in the collection, and vice-versa.  The collection
 supports element removal, which removes the corresponding
 mapping from this map, via the <tt>Iterator.remove</tt>,
 <tt>Collection.remove</tt>, <tt>removeAll</tt>,
 <tt>retainAll</tt>, and <tt>clear</tt> operations.  It does not
 support the <tt>add</tt> or <tt>addAll</tt> operations.

 <p>The view's <tt>iterator</tt> is a "weakly consistent" iterator
 that will never throw {@link ConcurrentModificationException},
 and guarantees to traverse elements as they existed upon
 construction of the iterator, and may (but is not guaranteed to)
 reflect any modifications subsequent to construction.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Set<java.util.Map.Entry<K, V>> java.util.concurrent.ConcurrentHashMap.entrySet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a {@link Set} view of the mappings contained in this map.
 The set is backed by the map, so changes to the map are
 reflected in the set, and vice-versa.  The set supports element
 removal, which removes the corresponding mapping from the map,
 via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,
 <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt>
 operations.  It does not support the <tt>add</tt> or
 <tt>addAll</tt> operations.

 <p>The view's <tt>iterator</tt> is a "weakly consistent" iterator
 that will never throw {@link ConcurrentModificationException},
 and guarantees to traverse elements as they existed upon
 construction of the iterator, and may (but is not guaranteed to)
 reflect any modifications subsequent to construction.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<K> java.util.concurrent.ConcurrentHashMap.keys()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an enumeration of the keys in this table.

 @return an enumeration of the keys in this table
 @see #keySet()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<V> java.util.concurrent.ConcurrentHashMap.elements()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an enumeration of the values in this table.

 @return an enumeration of the values in this table
 @see #values()

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.concurrent.ConcurrentHashMap.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reconstitute the <tt>ConcurrentHashMap</tt> instance from a
 stream (i.e., deserialize it).
 @param s the stream

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.concurrent.ConcurrentHashMap.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Save the state of the <tt>ConcurrentHashMap</tt> instance to a
 stream (i.e., serialize it).
 @param s the stream
 @serialData
 the key (Object) and value (Object)
 for each key-value mapping, followed by a null pair.
 The key-value mappings are emitted in no particular order.

<!-- END DATA -->
