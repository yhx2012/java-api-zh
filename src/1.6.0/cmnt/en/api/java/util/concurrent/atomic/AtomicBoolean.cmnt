<!-- BEGIN KEY -->
public class java.util.concurrent.atomic.AtomicBoolean extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A {@code boolean} value that may be updated atomically. See the
 {@link java.util.concurrent.atomic} package specification for
 description of the properties of atomic variables. An
 {@code AtomicBoolean} is used in applications such as atomically
 updated flags, and cannot be used as a replacement for a
 {@link java.lang.Boolean}.

 @since 1.5
 @author Doug Lea

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.atomic.AtomicBoolean(boolean initialValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new {@code AtomicBoolean} with the given initial value.

 @param initialValue the initial value

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.atomic.AtomicBoolean()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new {@code AtomicBoolean} with initial value {@code false}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.atomic.AtomicBoolean.get()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current value.

 @return the current value

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean expect, boolean update)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets the value to the given updated value
 if the current value {@code ==} the expected value.

 @param expect the expected value
 @param update the new value
 @return true if successful. False return indicates that
 the actual value was not equal to the expected value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.atomic.AtomicBoolean.weakCompareAndSet(boolean expect, boolean update)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets the value to the given updated value
 if the current value {@code ==} the expected value.

 <p>May <a href="package-summary.html#Spurious">fail spuriously</a>
 and does not provide ordering guarantees, so is only rarely an
 appropriate alternative to {@code compareAndSet}.

 @param expect the expected value
 @param update the new value
 @return true if successful.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.atomic.AtomicBoolean.set(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Unconditionally sets to the given value.

 @param newValue the new value

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.atomic.AtomicBoolean.lazySet(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Eventually sets to the given value.

 @param newValue the new value
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.atomic.AtomicBoolean.getAndSet(boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets to the given value and returns the previous value.

 @param newValue the new value
 @return the previous value

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.concurrent.atomic.AtomicBoolean.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the String representation of the current value.
 @return the String representation of the current value.

<!-- END DATA -->
