<!-- BEGIN KEY -->
public class java.util.concurrent.DelayQueue extends java.util.AbstractQueue implements java.util.concurrent.BlockingQueue
<!-- END KEY -->
<!-- BEGIN DATA -->
 An unbounded {@linkplain BlockingQueue blocking queue} of
 <tt>Delayed</tt> elements, in which an element can only be taken
 when its delay has expired.  The <em>head</em> of the queue is that
 <tt>Delayed</tt> element whose delay expired furthest in the
 past.  If no delay has expired there is no head and <tt>poll</tt>
 will return <tt>null</tt>. Expiration occurs when an element's
 <tt>getDelay(TimeUnit.NANOSECONDS)</tt> method returns a value less
 than or equal to zero.  Even though unexpired elements cannot be
 removed using <tt>take</tt> or <tt>poll</tt>, they are otherwise
 treated as normal elements. For example, the <tt>size</tt> method
 returns the count of both expired and unexpired elements.
 This queue does not permit null elements.

 <p>This class and its iterator implement all of the
 <em>optional</em> methods of the {@link Collection} and {@link
 Iterator} interfaces.

 <p>This class is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.

 @since 1.5
 @author Doug Lea
 @param <E> the type of elements held in this collection

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.DelayQueue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <tt>DelayQueue</tt> that is initially empty.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.DelayQueue(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <tt>DelayQueue</tt> initially containing the elements of the
 given collection of {@link Delayed} instances.

 @param c the collection of elements to initially contain
 @throws NullPointerException if the specified collection or any
         of its elements are null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.DelayQueue.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element into this delay queue.

 @param e the element to add
 @return <tt>true</tt> (as specified by {@link Collection#add})
 @throws NullPointerException if the specified element is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.DelayQueue.offer(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element into this delay queue.

 @param e the element to add
 @return <tt>true</tt>
 @throws NullPointerException if the specified element is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.DelayQueue.put(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element into this delay queue. As the queue is
 unbounded this method will never block.

 @param e the element to add
 @throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.DelayQueue.offer(E e, long timeout, TimeUnit unit)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element into this delay queue. As the queue is
 unbounded this method will never block.

 @param e the element to add
 @param timeout This parameter is ignored as the method never blocks
 @param unit This parameter is ignored as the method never blocks
 @return <tt>true</tt>
 @throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E extends java.util.concurrent.Delayed java.util.concurrent.DelayQueue.poll()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves and removes the head of this queue, or returns <tt>null</tt>
 if this queue has no elements with an expired delay.

 @return the head of this queue, or <tt>null</tt> if this
         queue has no elements with an expired delay

<!-- END DATA -->
<!-- BEGIN KEY -->
public E extends java.util.concurrent.Delayed java.util.concurrent.DelayQueue.take() throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves and removes the head of this queue, waiting if necessary
 until an element with an expired delay is available on this queue.

 @return the head of this queue
 @throws InterruptedException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E extends java.util.concurrent.Delayed java.util.concurrent.DelayQueue.poll(long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves and removes the head of this queue, waiting if necessary
 until an element with an expired delay is available on this queue,
 or the specified wait time expires.

 @return the head of this queue, or <tt>null</tt> if the
         specified waiting time elapses before an element with
         an expired delay becomes available
 @throws InterruptedException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E extends java.util.concurrent.Delayed java.util.concurrent.DelayQueue.peek()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves, but does not remove, the head of this queue, or
 returns <tt>null</tt> if this queue is empty.  Unlike
 <tt>poll</tt>, if no expired elements are available in the queue,
 this method returns the element that will expire next,
 if one exists.

 @return the head of this queue, or <tt>null</tt> if this
         queue is empty.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.DelayQueue.drainTo(java.util.Collection<? super E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws UnsupportedOperationException {@inheritDoc}
 @throws ClassCastException            {@inheritDoc}
 @throws NullPointerException          {@inheritDoc}
 @throws IllegalArgumentException      {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.DelayQueue.drainTo(java.util.Collection<? super E> c, int maxElements)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws UnsupportedOperationException {@inheritDoc}
 @throws ClassCastException            {@inheritDoc}
 @throws NullPointerException          {@inheritDoc}
 @throws IllegalArgumentException      {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.DelayQueue.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically removes all of the elements from this delay queue.
 The queue will be empty after this call returns.
 Elements with an unexpired delay are not waited for; they are
 simply discarded from the queue.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.DelayQueue.remainingCapacity()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Always returns <tt>Integer.MAX_VALUE</tt> because
 a <tt>DelayQueue</tt> is not capacity constrained.

 @return <tt>Integer.MAX_VALUE</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.util.concurrent.DelayQueue.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array containing all of the elements in this queue.
 The returned array elements are in no particular order.

 <p>The returned array will be "safe" in that no references to it are
 maintained by this queue.  (In other words, this method must allocate
 a new array).  The caller is thus free to modify the returned array.

 <p>This method acts as bridge between array-based and collection-based
 APIs.

 @return an array containing all of the elements in this queue

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.util.concurrent.DelayQueue.toArray(T[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array containing all of the elements in this queue; the
 runtime type of the returned array is that of the specified array.
 The returned array elements are in no particular order.
 If the queue fits in the specified array, it is returned therein.
 Otherwise, a new array is allocated with the runtime type of the
 specified array and the size of this queue.

 <p>If this queue fits in the specified array with room to spare
 (i.e., the array has more elements than this queue), the element in
 the array immediately following the end of the queue is set to
 <tt>null</tt>.

 <p>Like the {@link #toArray()} method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 <p>The following code can be used to dump a delay queue into a newly
 allocated array of <tt>Delayed</tt>:

 <pre>
     Delayed[] a = q.toArray(new Delayed[0]);</pre>

 Note that <tt>toArray(new Object[0])</tt> is identical in function to
 <tt>toArray()</tt>.

 @param a the array into which the elements of the queue are to
          be stored, if it is big enough; otherwise, a new array of the
          same runtime type is allocated for this purpose
 @return an array containing all of the elements in this queue
 @throws ArrayStoreException if the runtime type of the specified array
         is not a supertype of the runtime type of every element in
         this queue
 @throws NullPointerException if the specified array is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.DelayQueue.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a single instance of the specified element from this
 queue, if it is present, whether or not it has expired.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.concurrent.DelayQueue.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an iterator over all the elements (both expired and
 unexpired) in this queue. The iterator does not return the
 elements in any particular order.  The returned
 <tt>Iterator</tt> is a "weakly consistent" iterator that will
 never throw {@link ConcurrentModificationException}, and
 guarantees to traverse elements as they existed upon
 construction of the iterator, and may (but is not guaranteed
 to) reflect any modifications subsequent to construction.

 @return an iterator over the elements in this queue

<!-- END DATA -->
