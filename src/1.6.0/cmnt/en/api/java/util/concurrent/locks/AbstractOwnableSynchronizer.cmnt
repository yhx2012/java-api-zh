<!-- BEGIN KEY -->
public abstract class java.util.concurrent.locks.AbstractOwnableSynchronizer extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A synchronizer that may be exclusively owned by a thread.  This
 class provides a basis for creating locks and related synchronizers
 that may entail a notion of ownership.  The
 <tt>AbstractOwnableSynchronizer</tt> class itself does not manage or
 use this information. However, subclasses and tools may use
 appropriately maintained values to help control and monitor access
 and provide diagnostics.

 @since 1.6
 @author Doug Lea

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.concurrent.locks.AbstractOwnableSynchronizer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Empty constructor for use by subclasses.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread t)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the thread that currently owns exclusive access. A
 <tt>null</tt> argument indicates that no thread owns access.
 This method does not otherwise impose any synchronization or
 <tt>volatile</tt> field accesses.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.lang.Thread java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the thread last set by
 <tt>setExclusiveOwnerThread</tt>, or <tt>null</tt> if never
 set.  This method does not otherwise impose any synchronization
 or <tt>volatile</tt> field accesses.
 @return the owner thread

<!-- END DATA -->
