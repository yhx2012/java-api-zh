<!-- BEGIN KEY -->
public abstract class java.util.concurrent.atomic.AtomicIntegerFieldUpdater extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 A reflection-based utility that enables atomic updates to
 designated {@code volatile int} fields of designated classes.
 This class is designed for use in atomic data structures in which
 several fields of the same node are independently subject to atomic
 updates.

 <p>Note that the guarantees of the {@code compareAndSet}
 method in this class are weaker than in other atomic classes.
 Because this class cannot ensure that all uses of the field
 are appropriate for purposes of atomic access, it can
 guarantee atomicity only with respect to other invocations of
 {@code compareAndSet} and {@code set} on the same updater.

 @since 1.5
 @author Doug Lea
 @param <T> The type of the object holding the updatable field

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.concurrent.atomic.AtomicIntegerFieldUpdater()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Protected do-nothing constructor for use by subclasses.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.concurrent.atomic.AtomicIntegerFieldUpdater<U> java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater(java.lang.Class<U> tclass, String fieldName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates and returns an updater for objects with the given field.
 The Class argument is needed to check that reflective types and
 generic types match.

 @param tclass the class of the objects holding the field
 @param fieldName the name of the field to be updated
 @return the updater
 @throws IllegalArgumentException if the field is not a
 volatile integer type
 @throws RuntimeException with a nested reflection-based
 exception if the class does not hold field or is the wrong type

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.util.concurrent.atomic.AtomicIntegerFieldUpdater.compareAndSet(T obj, int expect, int update)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets the field of the given object managed by this updater
 to the given updated value if the current value {@code ==} the
 expected value. This method is guaranteed to be atomic with respect to
 other calls to {@code compareAndSet} and {@code set}, but not
 necessarily with respect to other changes in the field.

 @param obj An object whose field to conditionally set
 @param expect the expected value
 @param update the new value
 @return true if successful
 @throws ClassCastException if {@code obj} is not an instance
 of the class possessing the field established in the constructor

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.util.concurrent.atomic.AtomicIntegerFieldUpdater.weakCompareAndSet(T obj, int expect, int update)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets the field of the given object managed by this updater
 to the given updated value if the current value {@code ==} the
 expected value. This method is guaranteed to be atomic with respect to
 other calls to {@code compareAndSet} and {@code set}, but not
 necessarily with respect to other changes in the field.

 <p>May <a href="package-summary.html#Spurious">fail spuriously</a>
 and does not provide ordering guarantees, so is only rarely an
 appropriate alternative to {@code compareAndSet}.

 @param obj An object whose field to conditionally set
 @param expect the expected value
 @param update the new value
 @return true if successful
 @throws ClassCastException if {@code obj} is not an instance
 of the class possessing the field established in the constructor

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.util.concurrent.atomic.AtomicIntegerFieldUpdater.set(T obj, int newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the field of the given object managed by this updater to the
 given updated value. This operation is guaranteed to act as a volatile
 store with respect to subsequent invocations of {@code compareAndSet}.

 @param obj An object whose field to set
 @param newValue the new value

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.util.concurrent.atomic.AtomicIntegerFieldUpdater.lazySet(T obj, int newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Eventually sets the field of the given object managed by this
 updater to the given updated value.

 @param obj An object whose field to set
 @param newValue the new value
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.util.concurrent.atomic.AtomicIntegerFieldUpdater.get(T obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the current value held in the field of the given object managed
 by this updater.

 @param obj An object whose field to get
 @return the current value

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndSet(T obj, int newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets the field of the given object managed by this updater
 to the given value and returns the old value.

 @param obj An object whose field to get and set
 @param newValue the new value
 @return the previous value

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndIncrement(T obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically increments by one the current value of the field of the
 given object managed by this updater.

 @param obj An object whose field to get and set
 @return the previous value

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndDecrement(T obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically decrements by one the current value of the field of the
 given object managed by this updater.

 @param obj An object whose field to get and set
 @return the previous value

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndAdd(T obj, int delta)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically adds the given value to the current value of the field of
 the given object managed by this updater.

 @param obj An object whose field to get and set
 @param delta the value to add
 @return the previous value

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.atomic.AtomicIntegerFieldUpdater.incrementAndGet(T obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically increments by one the current value of the field of the
 given object managed by this updater.

 @param obj An object whose field to get and set
 @return the updated value

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.atomic.AtomicIntegerFieldUpdater.decrementAndGet(T obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically decrements by one the current value of the field of the
 given object managed by this updater.

 @param obj An object whose field to get and set
 @return the updated value

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.atomic.AtomicIntegerFieldUpdater.addAndGet(T obj, int delta)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically adds the given value to the current value of the field of
 the given object managed by this updater.

 @param obj An object whose field to get and set
 @param delta the value to add
 @return the updated value

<!-- END DATA -->
