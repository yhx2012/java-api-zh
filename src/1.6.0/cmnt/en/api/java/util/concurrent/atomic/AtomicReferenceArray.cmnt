<!-- BEGIN KEY -->
public class java.util.concurrent.atomic.AtomicReferenceArray extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 An array of object references in which elements may be updated
 atomically.  See the {@link java.util.concurrent.atomic} package
 specification for description of the properties of atomic
 variables.
 @since 1.5
 @author Doug Lea
 @param <E> The base class of elements held in this array

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.atomic.AtomicReferenceArray(int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new AtomicReferenceArray of given length.
 @param length the length of the array

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.atomic.AtomicReferenceArray(E[] array)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new AtomicReferenceArray with the same length as, and
 all elements copied from, the given array.

 @param array the array to copy elements from
 @throws NullPointerException if array is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public final int java.util.concurrent.atomic.AtomicReferenceArray.length()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the length of the array.

 @return the length of the array

<!-- END DATA -->
<!-- BEGIN KEY -->
public final E java.util.concurrent.atomic.AtomicReferenceArray.get(int i)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the current value at position {@code i}.

 @param i the index
 @return the current value

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.atomic.AtomicReferenceArray.set(int i, E newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the element at position {@code i} to the given value.

 @param i the index
 @param newValue the new value

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.atomic.AtomicReferenceArray.lazySet(int i, E newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Eventually sets the element at position {@code i} to the given value.

 @param i the index
 @param newValue the new value
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final E java.util.concurrent.atomic.AtomicReferenceArray.getAndSet(int i, E newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets the element at position {@code i} to the given
 value and returns the old value.

 @param i the index
 @param newValue the new value
 @return the previous value

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.atomic.AtomicReferenceArray.compareAndSet(int i, E expect, E update)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets the element at position {@code i} to the given
 updated value if the current value {@code ==} the expected value.
 @param i the index
 @param expect the expected value
 @param update the new value
 @return true if successful. False return indicates that
 the actual value was not equal to the expected value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.atomic.AtomicReferenceArray.weakCompareAndSet(int i, E expect, E update)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets the element at position {@code i} to the given
 updated value if the current value {@code ==} the expected value.

 <p>May <a href="package-summary.html#Spurious">fail spuriously</a>
 and does not provide ordering guarantees, so is only rarely an
 appropriate alternative to {@code compareAndSet}.

 @param i the index
 @param expect the expected value
 @param update the new value
 @return true if successful.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.concurrent.atomic.AtomicReferenceArray.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the String representation of the current values of array.
 @return the String representation of the current values of array.

<!-- END DATA -->
