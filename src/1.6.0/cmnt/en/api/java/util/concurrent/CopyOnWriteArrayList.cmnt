<!-- BEGIN KEY -->
public class java.util.concurrent.CopyOnWriteArrayList extends java.lang.Object implements java.util.List, java.util.RandomAccess, java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A thread-safe variant of {@link java.util.ArrayList} in which all mutative
 operations (<tt>add</tt>, <tt>set</tt>, and so on) are implemented by
 making a fresh copy of the underlying array.

 <p> This is ordinarily too costly, but may be <em>more</em> efficient
 than alternatives when traversal operations vastly outnumber
 mutations, and is useful when you cannot or don't want to
 synchronize traversals, yet need to preclude interference among
 concurrent threads.  The "snapshot" style iterator method uses a
 reference to the state of the array at the point that the iterator
 was created. This array never changes during the lifetime of the
 iterator, so interference is impossible and the iterator is
 guaranteed not to throw <tt>ConcurrentModificationException</tt>.
 The iterator will not reflect additions, removals, or changes to
 the list since the iterator was created.  Element-changing
 operations on iterators themselves (<tt>remove</tt>, <tt>set</tt>, and
 <tt>add</tt>) are not supported. These methods throw
 <tt>UnsupportedOperationException</tt>.

 <p>All elements are permitted, including <tt>null</tt>.

 <p>Memory consistency effects: As with other concurrent
 collections, actions in a thread prior to placing an object into a
 {@code CopyOnWriteArrayList}
 <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a>
 actions subsequent to the access or removal of that element from
 the {@code CopyOnWriteArrayList} in another thread.

 <p>This class is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.

 @since 1.5
 @author Doug Lea
 @param <E> the type of elements held in this collection

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.CopyOnWriteArrayList()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an empty list.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.CopyOnWriteArrayList(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a list containing the elements of the specified
 collection, in the order they are returned by the collection's
 iterator.

 @param c the collection of initially held elements
 @throws NullPointerException if the specified collection is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.CopyOnWriteArrayList(E[] toCopyIn)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a list holding a copy of the given array.

 @param toCopyIn the array (a copy of this array is used as the
        internal array)
 @throws NullPointerException if the specified array is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.CopyOnWriteArrayList.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of elements in this list.

 @return the number of elements in this list

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.CopyOnWriteArrayList.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this list contains no elements.

 @return <tt>true</tt> if this list contains no elements

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.CopyOnWriteArrayList.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this list contains the specified element.
 More formally, returns <tt>true</tt> if and only if this list contains
 at least one element <tt>e</tt> such that
 <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.

 @param o element whose presence in this list is to be tested
 @return <tt>true</tt> if this list contains the specified element

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.CopyOnWriteArrayList.indexOf(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.CopyOnWriteArrayList.indexOf(E e, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the index of the first occurrence of the specified element in
 this list, searching forwards from <tt>index</tt>, or returns -1 if
 the element is not found.
 More formally, returns the lowest index <tt>i</tt> such that
 <tt>(i&nbsp;&gt;=&nbsp;index&nbsp;&amp;&amp;&nbsp;(e==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;e.equals(get(i))))</tt>,
 or -1 if there is no such index.

 @param e element to search for
 @param index index to start searching from
 @return the index of the first occurrence of the element in
         this list at position <tt>index</tt> or later in the list;
         <tt>-1</tt> if the element is not found.
 @throws IndexOutOfBoundsException if the specified index is negative

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(E e, int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the index of the last occurrence of the specified element in
 this list, searching backwards from <tt>index</tt>, or returns -1 if
 the element is not found.
 More formally, returns the highest index <tt>i</tt> such that
 <tt>(i&nbsp;&lt;=&nbsp;index&nbsp;&amp;&amp;&nbsp;(e==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;e.equals(get(i))))</tt>,
 or -1 if there is no such index.

 @param e element to search for
 @param index index to start searching backwards from
 @return the index of the last occurrence of the element at position
         less than or equal to <tt>index</tt> in this list;
         -1 if the element is not found.
 @throws IndexOutOfBoundsException if the specified index is greater
         than or equal to the current size of this list

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.util.concurrent.CopyOnWriteArrayList.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a shallow copy of this list.  (The elements themselves
 are not copied.)

 @return a clone of this list

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.util.concurrent.CopyOnWriteArrayList.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array containing all of the elements in this list
 in proper sequence (from first to last element).

 <p>The returned array will be "safe" in that no references to it are
 maintained by this list.  (In other words, this method must allocate
 a new array).  The caller is thus free to modify the returned array.

 <p>This method acts as bridge between array-based and collection-based
 APIs.

 @return an array containing all the elements in this list

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.util.concurrent.CopyOnWriteArrayList.toArray(T[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array containing all of the elements in this list in
 proper sequence (from first to last element); the runtime type of
 the returned array is that of the specified array.  If the list fits
 in the specified array, it is returned therein.  Otherwise, a new
 array is allocated with the runtime type of the specified array and
 the size of this list.

 <p>If this list fits in the specified array with room to spare
 (i.e., the array has more elements than this list), the element in
 the array immediately following the end of the list is set to
 <tt>null</tt>.  (This is useful in determining the length of this
 list <i>only</i> if the caller knows that this list does not contain
 any null elements.)

 <p>Like the {@link #toArray()} method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 <p>Suppose <tt>x</tt> is a list known to contain only strings.
 The following code can be used to dump the list into a newly
 allocated array of <tt>String</tt>:

 <pre>
     String[] y = x.toArray(new String[0]);</pre>

 Note that <tt>toArray(new Object[0])</tt> is identical in function to
 <tt>toArray()</tt>.

 @param a the array into which the elements of the list are to
          be stored, if it is big enough; otherwise, a new array of the
          same runtime type is allocated for this purpose.
 @return an array containing all the elements in this list
 @throws ArrayStoreException if the runtime type of the specified array
         is not a supertype of the runtime type of every element in
         this list
 @throws NullPointerException if the specified array is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.CopyOnWriteArrayList.get(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.CopyOnWriteArrayList.set(int index, E element)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Replaces the element at the specified position in this list with the
 specified element.

 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.CopyOnWriteArrayList.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends the specified element to the end of this list.

 @param e element to be appended to this list
 @return <tt>true</tt> (as specified by {@link Collection#add})

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.CopyOnWriteArrayList.add(int index, E element)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element at the specified position in this
 list. Shifts the element currently at that position (if any) and
 any subsequent elements to the right (adds one to their indices).

 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.CopyOnWriteArrayList.remove(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the element at the specified position in this list.
 Shifts any subsequent elements to the left (subtracts one from their
 indices).  Returns the element that was removed from the list.

 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.CopyOnWriteArrayList.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the first occurrence of the specified element from this list,
 if it is present.  If this list does not contain the element, it is
 unchanged.  More formally, removes the element with the lowest index
 <tt>i</tt> such that
 <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>
 (if such an element exists).  Returns <tt>true</tt> if this list
 contained the specified element (or equivalently, if this list
 changed as a result of the call).

 @param o element to be removed from this list, if present
 @return <tt>true</tt> if this list contained the specified element

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.CopyOnWriteArrayList.addIfAbsent(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Append the element if not present.

 @param e element to be added to this list, if absent
 @return <tt>true</tt> if the element was added

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.CopyOnWriteArrayList.containsAll(java.util.Collection<?> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this list contains all of the elements of the
 specified collection.

 @param c collection to be checked for containment in this list
 @return <tt>true</tt> if this list contains all of the elements of the
         specified collection
 @throws NullPointerException if the specified collection is null
 @see #contains(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.CopyOnWriteArrayList.removeAll(java.util.Collection<?> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes from this list all of its elements that are contained in
 the specified collection. This is a particularly expensive operation
 in this class because of the need for an internal temporary array.

 @param c collection containing elements to be removed from this list
 @return <tt>true</tt> if this list changed as a result of the call
 @throws ClassCastException if the class of an element of this list
         is incompatible with the specified collection (optional)
 @throws NullPointerException if this list contains a null element and the
         specified collection does not permit null elements (optional),
         or if the specified collection is null
 @see #remove(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.CopyOnWriteArrayList.retainAll(java.util.Collection<?> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retains only the elements in this list that are contained in the
 specified collection.  In other words, removes from this list all of
 its elements that are not contained in the specified collection.

 @param c collection containing elements to be retained in this list
 @return <tt>true</tt> if this list changed as a result of the call
 @throws ClassCastException if the class of an element of this list
         is incompatible with the specified collection (optional)
 @throws NullPointerException if this list contains a null element and the
         specified collection does not permit null elements (optional),
         or if the specified collection is null
 @see #remove(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.CopyOnWriteArrayList.addAllAbsent(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends all of the elements in the specified collection that
 are not already contained in this list, to the end of
 this list, in the order that they are returned by the
 specified collection's iterator.

 @param c collection containing elements to be added to this list
 @return the number of elements added
 @throws NullPointerException if the specified collection is null
 @see #addIfAbsent(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.CopyOnWriteArrayList.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all of the elements from this list.
 The list will be empty after this call returns.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.CopyOnWriteArrayList.addAll(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends all of the elements in the specified collection to the end
 of this list, in the order that they are returned by the specified
 collection's iterator.

 @param c collection containing elements to be added to this list
 @return <tt>true</tt> if this list changed as a result of the call
 @throws NullPointerException if the specified collection is null
 @see #add(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.CopyOnWriteArrayList.addAll(int index, java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts all of the elements in the specified collection into this
 list, starting at the specified position.  Shifts the element
 currently at that position (if any) and any subsequent elements to
 the right (increases their indices).  The new elements will appear
 in this list in the order that they are returned by the
 specified collection's iterator.

 @param index index at which to insert the first element
        from the specified collection
 @param c collection containing elements to be added to this list
 @return <tt>true</tt> if this list changed as a result of the call
 @throws IndexOutOfBoundsException {@inheritDoc}
 @throws NullPointerException if the specified collection is null
 @see #add(int,Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.concurrent.CopyOnWriteArrayList.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of this list.  The string
 representation consists of the string representations of the list's
 elements in the order they are returned by its iterator, enclosed in
 square brackets (<tt>"[]"</tt>).  Adjacent elements are separated by
 the characters <tt>", "</tt> (comma and space).  Elements are
 converted to strings as by {@link String#valueOf(Object)}.

 @return a string representation of this list

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.CopyOnWriteArrayList.equals(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares the specified object with this list for equality.
 Returns {@code true} if the specified object is the same object
 as this object, or if it is also a {@link List} and the sequence
 of elements returned by an {@linkplain List#iterator() iterator}
 over the specified list is the same as the sequence returned by
 an iterator over this list.  The two sequences are considered to
 be the same if they have the same length and corresponding
 elements at the same position in the sequence are <em>equal</em>.
 Two elements {@code e1} and {@code e2} are considered
 <em>equal</em> if {@code (e1==null ? e2==null : e1.equals(e2))}.

 @param o the object to be compared for equality with this list
 @return {@code true} if the specified object is equal to this list

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.CopyOnWriteArrayList.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the hash code value for this list.

 <p>This implementation uses the definition in {@link List#hashCode}.

 @return the hash code value for this list

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.concurrent.CopyOnWriteArrayList.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an iterator over the elements in this list in proper sequence.

 <p>The returned iterator provides a snapshot of the state of the list
 when the iterator was constructed. No synchronization is needed while
 traversing the iterator. The iterator does <em>NOT</em> support the
 <tt>remove</tt> method.

 @return an iterator over the elements in this list in proper sequence

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.ListIterator<E> java.util.concurrent.CopyOnWriteArrayList.listIterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

 <p>The returned iterator provides a snapshot of the state of the list
 when the iterator was constructed. No synchronization is needed while
 traversing the iterator. The iterator does <em>NOT</em> support the
 <tt>remove</tt>, <tt>set</tt> or <tt>add</tt> methods.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.ListIterator<E> java.util.concurrent.CopyOnWriteArrayList.listIterator(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 {@inheritDoc}

 <p>The returned iterator provides a snapshot of the state of the list
 when the iterator was constructed. No synchronization is needed while
 traversing the iterator. The iterator does <em>NOT</em> support the
 <tt>remove</tt>, <tt>set</tt> or <tt>add</tt> methods.

 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.List<E> java.util.concurrent.CopyOnWriteArrayList.subList(int fromIndex, int toIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a view of the portion of this list between
 <tt>fromIndex</tt>, inclusive, and <tt>toIndex</tt>, exclusive.
 The returned list is backed by this list, so changes in the
 returned list are reflected in this list, and vice-versa.
 While mutative operations are supported, they are probably not
 very useful for CopyOnWriteArrayLists.

 <p>The semantics of the list returned by this method become
 undefined if the backing list (i.e., this list) is
 <i>structurally modified</i> in any way other than via the
 returned list.  (Structural modifications are those that change
 the size of the list, or otherwise perturb it in such a fashion
 that iterations in progress may yield incorrect results.)

 @param fromIndex low endpoint (inclusive) of the subList
 @param toIndex high endpoint (exclusive) of the subList
 @return a view of the specified range within this list
 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.concurrent.CopyOnWriteArrayList.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reconstitute the list from a stream (i.e., deserialize it).
 @param s the stream

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.concurrent.CopyOnWriteArrayList.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Save the state of the list to a stream (i.e., serialize it).

 @serialData The length of the array backing the list is emitted
               (int), followed by all of its elements (each an Object)
               in the proper order.
 @param s the stream

<!-- END DATA -->
