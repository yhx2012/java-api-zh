<!-- BEGIN KEY -->
public class java.util.concurrent.atomic.AtomicLong extends java.lang.Number implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A {@code long} value that may be updated atomically.  See the
 {@link java.util.concurrent.atomic} package specification for
 description of the properties of atomic variables. An
 {@code AtomicLong} is used in applications such as atomically
 incremented sequence numbers, and cannot be used as a replacement
 for a {@link java.lang.Long}. However, this class does extend
 {@code Number} to allow uniform access by tools and utilities that
 deal with numerically-based classes.

 @since 1.5
 @author Doug Lea

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.atomic.AtomicLong(long initialValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new AtomicLong with the given initial value.

 @param initialValue the initial value

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.atomic.AtomicLong()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new AtomicLong with initial value {@code 0}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.util.concurrent.atomic.AtomicLong.get()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the current value.

 @return the current value

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.atomic.AtomicLong.set(long newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets to the given value.

 @param newValue the new value

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.atomic.AtomicLong.lazySet(long newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Eventually sets to the given value.

 @param newValue the new value
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.util.concurrent.atomic.AtomicLong.getAndSet(long newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets to the given value and returns the old value.

 @param newValue the new value
 @return the previous value

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.atomic.AtomicLong.compareAndSet(long expect, long update)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets the value to the given updated value
 if the current value {@code ==} the expected value.

 @param expect the expected value
 @param update the new value
 @return true if successful. False return indicates that
 the actual value was not equal to the expected value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.atomic.AtomicLong.weakCompareAndSet(long expect, long update)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets the value to the given updated value
 if the current value {@code ==} the expected value.

 <p>May <a href="package-summary.html#Spurious">fail spuriously</a>
 and does not provide ordering guarantees, so is only rarely an
 appropriate alternative to {@code compareAndSet}.

 @param expect the expected value
 @param update the new value
 @return true if successful.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.util.concurrent.atomic.AtomicLong.getAndIncrement()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically increments by one the current value.

 @return the previous value

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.util.concurrent.atomic.AtomicLong.getAndDecrement()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically decrements by one the current value.

 @return the previous value

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.util.concurrent.atomic.AtomicLong.getAndAdd(long delta)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically adds the given value to the current value.

 @param delta the value to add
 @return the previous value

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.util.concurrent.atomic.AtomicLong.incrementAndGet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically increments by one the current value.

 @return the updated value

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.util.concurrent.atomic.AtomicLong.decrementAndGet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically decrements by one the current value.

 @return the updated value

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.util.concurrent.atomic.AtomicLong.addAndGet(long delta)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically adds the given value to the current value.

 @param delta the value to add
 @return the updated value

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.concurrent.atomic.AtomicLong.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the String representation of the current value.
 @return the String representation of the current value.

<!-- END DATA -->
