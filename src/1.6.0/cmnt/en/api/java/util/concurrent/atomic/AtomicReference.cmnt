<!-- BEGIN KEY -->
public class java.util.concurrent.atomic.AtomicReference extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 An object reference that may be updated atomically. See the {@link
 java.util.concurrent.atomic} package specification for description
 of the properties of atomic variables.
 @since 1.5
 @author Doug Lea
 @param <V> The type of object referred to by this reference

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.atomic.AtomicReference(V initialValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new AtomicReference with the given initial value.

 @param initialValue the initial value

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.atomic.AtomicReference()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new AtomicReference with null initial value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final V java.util.concurrent.atomic.AtomicReference.get()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the current value.

 @return the current value

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.atomic.AtomicReference.set(V newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets to the given value.

 @param newValue the new value

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.atomic.AtomicReference.lazySet(V newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Eventually sets to the given value.

 @param newValue the new value
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.atomic.AtomicReference.compareAndSet(V expect, V update)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets the value to the given updated value
 if the current value {@code ==} the expected value.
 @param expect the expected value
 @param update the new value
 @return true if successful. False return indicates that
 the actual value was not equal to the expected value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.atomic.AtomicReference.weakCompareAndSet(V expect, V update)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets the value to the given updated value
 if the current value {@code ==} the expected value.

 <p>May <a href="package-summary.html#Spurious">fail spuriously</a>
 and does not provide ordering guarantees, so is only rarely an
 appropriate alternative to {@code compareAndSet}.

 @param expect the expected value
 @param update the new value
 @return true if successful.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final V java.util.concurrent.atomic.AtomicReference.getAndSet(V newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets to the given value and returns the old value.

 @param newValue the new value
 @return the previous value

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.concurrent.atomic.AtomicReference.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the String representation of the current value.
 @return the String representation of the current value.

<!-- END DATA -->
