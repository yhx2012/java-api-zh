<!-- BEGIN KEY -->
public interface java.util.concurrent.CompletionService
<!-- END KEY -->
<!-- BEGIN DATA -->
 A service that decouples the production of new asynchronous tasks
 from the consumption of the results of completed tasks.  Producers
 <tt>submit</tt> tasks for execution. Consumers <tt>take</tt>
 completed tasks and process their results in the order they
 complete.  A <tt>CompletionService</tt> can for example be used to
 manage asynchronous IO, in which tasks that perform reads are
 submitted in one part of a program or system, and then acted upon
 in a different part of the program when the reads complete,
 possibly in a different order than they were requested.

 <p>Typically, a <tt>CompletionService</tt> relies on a separate
 {@link Executor} to actually execute the tasks, in which case the
 <tt>CompletionService</tt> only manages an internal completion
 queue. The {@link ExecutorCompletionService} class provides an
 implementation of this approach.

 <p>Memory consistency effects: Actions in a thread prior to
 submitting a task to a {@code CompletionService}
 <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a>
 actions taken by that task, which in turn <i>happen-before</i>
 actions following a successful return from the corresponding {@code take()}.


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.Future<V> java.util.concurrent.CompletionService.submit(java.util.concurrent.Callable<V> task)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Submits a value-returning task for execution and returns a Future
 representing the pending results of the task.  Upon completion,
 this task may be taken or polled.

 @param task the task to submit
 @return a Future representing pending completion of the task
 @throws RejectedExecutionException if the task cannot be
         scheduled for execution
 @throws NullPointerException if the task is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.Future<V> java.util.concurrent.CompletionService.submit(Runnable task, V result)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Submits a Runnable task for execution and returns a Future
 representing that task.  Upon completion, this task may be
 taken or polled.

 @param task the task to submit
 @param result the result to return upon successful completion
 @return a Future representing pending completion of the task,
         and whose <tt>get()</tt> method will return the given
         result value upon completion
 @throws RejectedExecutionException if the task cannot be
         scheduled for execution
 @throws NullPointerException if the task is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.Future<V> java.util.concurrent.CompletionService.take() throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves and removes the Future representing the next
 completed task, waiting if none are yet present.

 @return the Future representing the next completed task
 @throws InterruptedException if interrupted while waiting

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.Future<V> java.util.concurrent.CompletionService.poll()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves and removes the Future representing the next
 completed task or <tt>null</tt> if none are present.

 @return the Future representing the next completed task, or
         <tt>null</tt> if none are present

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.Future<V> java.util.concurrent.CompletionService.poll(long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves and removes the Future representing the next
 completed task, waiting if necessary up to the specified wait
 time if none are yet present.

 @param timeout how long to wait before giving up, in units of
        <tt>unit</tt>
 @param unit a <tt>TimeUnit</tt> determining how to interpret the
        <tt>timeout</tt> parameter
 @return the Future representing the next completed task or
         <tt>null</tt> if the specified waiting time elapses
         before one is present
 @throws InterruptedException if interrupted while waiting

<!-- END DATA -->
