<!-- BEGIN KEY -->
public class java.util.concurrent.ConcurrentSkipListSet extends java.util.AbstractSet implements java.util.NavigableSet, java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A scalable concurrent {@link NavigableSet} implementation based on
 a {@link ConcurrentSkipListMap}.  The elements of the set are kept
 sorted according to their {@linkplain Comparable natural ordering},
 or by a {@link Comparator} provided at set creation time, depending
 on which constructor is used.

 <p>This implementation provides expected average <i>log(n)</i> time
 cost for the <tt>contains</tt>, <tt>add</tt>, and <tt>remove</tt>
 operations and their variants.  Insertion, removal, and access
 operations safely execute concurrently by multiple threads.
 Iterators are <i>weakly consistent</i>, returning elements
 reflecting the state of the set at some point at or since the
 creation of the iterator.  They do <em>not</em> throw {@link
 ConcurrentModificationException}, and may proceed concurrently with
 other operations.  Ascending ordered views and their iterators are
 faster than descending ones.

 <p>Beware that, unlike in most collections, the <tt>size</tt>
 method is <em>not</em> a constant-time operation. Because of the
 asynchronous nature of these sets, determining the current number
 of elements requires a traversal of the elements. Additionally, the
 bulk operations <tt>addAll</tt>, <tt>removeAll</tt>,
 <tt>retainAll</tt>, and <tt>containsAll</tt> are <em>not</em>
 guaranteed to be performed atomically. For example, an iterator
 operating concurrently with an <tt>addAll</tt> operation might view
 only some of the added elements.

 <p>This class and its iterators implement all of the
 <em>optional</em> methods of the {@link Set} and {@link Iterator}
 interfaces. Like most other concurrent collection implementations,
 this class does not permit the use of <tt>null</tt> elements,
 because <tt>null</tt> arguments and return values cannot be reliably
 distinguished from the absence of elements.

 <p>This class is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.

 @author Doug Lea
 @param <E> the type of elements maintained by this set
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.ConcurrentNavigableMap<E, java.lang.Object> java.util.concurrent.ConcurrentSkipListSet.m
<!-- END KEY -->
<!-- BEGIN DATA -->
 The underlying map. Uses Boolean.TRUE as value for each
 element.  This field is declared final for the sake of thread
 safety, which entails some ugliness in clone()

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentSkipListSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new, empty set that orders its elements according to
 their {@linkplain Comparable natural ordering}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentSkipListSet(java.util.Comparator<? super E> comparator)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new, empty set that orders its elements according to
 the specified comparator.

 @param comparator the comparator that will be used to order this set.
        If <tt>null</tt>, the {@linkplain Comparable natural
        ordering} of the elements will be used.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentSkipListSet(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new set containing the elements in the specified
 collection, that orders its elements according to their
 {@linkplain Comparable natural ordering}.

 @param c The elements that will comprise the new set
 @throws ClassCastException if the elements in <tt>c</tt> are
         not {@link Comparable}, or are not mutually comparable
 @throws NullPointerException if the specified collection or any
         of its elements are null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentSkipListSet(java.util.SortedSet<E> s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new set containing the same elements and using the
 same ordering as the specified sorted set.

 @param s sorted set whose elements will comprise the new set
 @throws NullPointerException if the specified sorted set or any
         of its elements are null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentSkipListSet<E> java.util.concurrent.ConcurrentSkipListSet.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a shallow copy of this <tt>ConcurrentSkipListSet</tt>
 instance. (The elements themselves are not cloned.)

 @return a shallow copy of this set

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.ConcurrentSkipListSet.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of elements in this set.  If this set
 contains more than <tt>Integer.MAX_VALUE</tt> elements, it
 returns <tt>Integer.MAX_VALUE</tt>.

 <p>Beware that, unlike in most collections, this method is
 <em>NOT</em> a constant-time operation. Because of the
 asynchronous nature of these sets, determining the current
 number of elements requires traversing them all to count them.
 Additionally, it is possible for the size to change during
 execution of this method, in which case the returned result
 will be inaccurate. Thus, this method is typically not very
 useful in concurrent applications.

 @return the number of elements in this set

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentSkipListSet.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this set contains no elements.
 @return <tt>true</tt> if this set contains no elements

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentSkipListSet.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this set contains the specified element.
 More formally, returns <tt>true</tt> if and only if this set
 contains an element <tt>e</tt> such that <tt>o.equals(e)</tt>.

 @param o object to be checked for containment in this set
 @return <tt>true</tt> if this set contains the specified element
 @throws ClassCastException if the specified element cannot be
         compared with the elements currently in this set
 @throws NullPointerException if the specified element is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentSkipListSet.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified element to this set if it is not already present.
 More formally, adds the specified element <tt>e</tt> to this set if
 the set contains no element <tt>e2</tt> such that <tt>e.equals(e2)</tt>.
 If this set already contains the element, the call leaves the set
 unchanged and returns <tt>false</tt>.

 @param e element to be added to this set
 @return <tt>true</tt> if this set did not already contain the
         specified element
 @throws ClassCastException if <tt>e</tt> cannot be compared
         with the elements currently in this set
 @throws NullPointerException if the specified element is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentSkipListSet.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified element from this set if it is present.
 More formally, removes an element <tt>e</tt> such that
 <tt>o.equals(e)</tt>, if this set contains such an element.
 Returns <tt>true</tt> if this set contained the element (or
 equivalently, if this set changed as a result of the call).
 (This set will not contain the element once the call returns.)

 @param o object to be removed from this set, if present
 @return <tt>true</tt> if this set contained the specified element
 @throws ClassCastException if <tt>o</tt> cannot be compared
         with the elements currently in this set
 @throws NullPointerException if the specified element is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ConcurrentSkipListSet.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all of the elements from this set.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.concurrent.ConcurrentSkipListSet.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an iterator over the elements in this set in ascending order.

 @return an iterator over the elements in this set in ascending order

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.concurrent.ConcurrentSkipListSet.descendingIterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an iterator over the elements in this set in descending order.

 @return an iterator over the elements in this set in descending order

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentSkipListSet.equals(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares the specified object with this set for equality.  Returns
 <tt>true</tt> if the specified object is also a set, the two sets
 have the same size, and every member of the specified set is
 contained in this set (or equivalently, every member of this set is
 contained in the specified set).  This definition ensures that the
 equals method works properly across different implementations of the
 set interface.

 @param o the object to be compared for equality with this set
 @return <tt>true</tt> if the specified object is equal to this set

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentSkipListSet.removeAll(java.util.Collection<?> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes from this set all of its elements that are contained in
 the specified collection.  If the specified collection is also
 a set, this operation effectively modifies this set so that its
 value is the <i>asymmetric set difference</i> of the two sets.

 @param  c collection containing elements to be removed from this set
 @return <tt>true</tt> if this set changed as a result of the call
 @throws ClassCastException if the types of one or more elements in this
         set are incompatible with the specified collection
 @throws NullPointerException if the specified collection or any
         of its elements are null

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.ConcurrentSkipListSet.lower(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if the specified element is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.ConcurrentSkipListSet.floor(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if the specified element is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.ConcurrentSkipListSet.ceiling(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if the specified element is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.ConcurrentSkipListSet.higher(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if the specified element is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.ConcurrentSkipListSet.first()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.ConcurrentSkipListSet.last()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<E> java.util.concurrent.ConcurrentSkipListSet.subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if {@code fromElement} or
         {@code toElement} is null
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<E> java.util.concurrent.ConcurrentSkipListSet.headSet(E toElement, boolean inclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if {@code toElement} is null
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<E> java.util.concurrent.ConcurrentSkipListSet.tailSet(E fromElement, boolean inclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if {@code fromElement} is null
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<E> java.util.concurrent.ConcurrentSkipListSet.subSet(E fromElement, E toElement)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if {@code fromElement} or
         {@code toElement} is null
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<E> java.util.concurrent.ConcurrentSkipListSet.headSet(E toElement)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if {@code toElement} is null
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<E> java.util.concurrent.ConcurrentSkipListSet.tailSet(E fromElement)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if {@code fromElement} is null
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<E> java.util.concurrent.ConcurrentSkipListSet.descendingSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a reverse order view of the elements contained in this set.
 The descending set is backed by this set, so changes to the set are
 reflected in the descending set, and vice-versa.

 <p>The returned set has an ordering equivalent to
 <tt>{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())</tt>.
 The expression {@code s.descendingSet().descendingSet()} returns a
 view of {@code s} essentially equivalent to {@code s}.

 @return a reverse order view of this set

<!-- END DATA -->
