<!-- BEGIN KEY -->
public class java.util.concurrent.FutureTask extends java.lang.Object implements java.util.concurrent.RunnableFuture
<!-- END KEY -->
<!-- BEGIN DATA -->
 A cancellable asynchronous computation.  This class provides a base
 implementation of {@link Future}, with methods to start and cancel
 a computation, query to see if the computation is complete, and
 retrieve the result of the computation.  The result can only be
 retrieved when the computation has completed; the <tt>get</tt>
 method will block if the computation has not yet completed.  Once
 the computation has completed, the computation cannot be restarted
 or cancelled.

 <p>A <tt>FutureTask</tt> can be used to wrap a {@link Callable} or
 {@link java.lang.Runnable} object.  Because <tt>FutureTask</tt>
 implements <tt>Runnable</tt>, a <tt>FutureTask</tt> can be
 submitted to an {@link Executor} for execution.

 <p>In addition to serving as a standalone class, this class provides
 <tt>protected</tt> functionality that may be useful when creating
 customized task classes.

 @since 1.5
 @author Doug Lea
 @param <V> The result type returned by this FutureTask's <tt>get</tt> method

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.FutureTask(java.util.concurrent.Callable<V> callable)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <tt>FutureTask</tt> that will upon running, execute the
 given <tt>Callable</tt>.

 @param  callable the callable task
 @throws NullPointerException if callable is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.FutureTask(Runnable runnable, V result)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <tt>FutureTask</tt> that will upon running, execute the
 given <tt>Runnable</tt>, and arrange that <tt>get</tt> will return the
 given result on successful completion.

 @param  runnable the runnable task
 @param result the result to return on successful completion. If
 you don't need a particular result, consider using
 constructions of the form:
 <tt>Future&lt;?&gt; f = new FutureTask&lt;Object&gt;(runnable, null)</tt>
 @throws NullPointerException if runnable is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.concurrent.FutureTask.get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws CancellationException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.concurrent.FutureTask.get(long timeout, TimeUnit unit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws CancellationException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.util.concurrent.FutureTask.done()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Protected method invoked when this task transitions to state
 <tt>isDone</tt> (whether normally or via cancellation). The
 default implementation does nothing.  Subclasses may override
 this method to invoke completion callbacks or perform
 bookkeeping. Note that you can query status inside the
 implementation of this method to determine whether this task
 has been cancelled.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.util.concurrent.FutureTask.set(V v)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the result of this Future to the given value unless
 this future has already been set or has been cancelled.
 This method is invoked internally by the <tt>run</tt> method
 upon successful completion of the computation.
 @param v the value

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.util.concurrent.FutureTask.setException(Throwable t)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Causes this future to report an <tt>ExecutionException</tt>
 with the given throwable as its cause, unless this Future has
 already been set or has been cancelled.
 This method is invoked internally by the <tt>run</tt> method
 upon failure of the computation.
 @param t the cause of failure

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.FutureTask.run()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets this Future to the result of its computation
 unless it has been cancelled.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.util.concurrent.FutureTask.runAndReset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Executes the computation without setting its result, and then
 resets this Future to initial state, failing to do so if the
 computation encounters an exception or is cancelled.  This is
 designed for use with tasks that intrinsically execute more
 than once.
 @return true if successfully run and reset

<!-- END DATA -->
