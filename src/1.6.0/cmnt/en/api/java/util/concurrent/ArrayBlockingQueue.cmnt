<!-- BEGIN KEY -->
public class java.util.concurrent.ArrayBlockingQueue extends java.util.AbstractQueue implements java.util.concurrent.BlockingQueue, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A bounded {@linkplain BlockingQueue blocking queue} backed by an
 array.  This queue orders elements FIFO (first-in-first-out).  The
 <em>head</em> of the queue is that element that has been on the
 queue the longest time.  The <em>tail</em> of the queue is that
 element that has been on the queue the shortest time. New elements
 are inserted at the tail of the queue, and the queue retrieval
 operations obtain elements at the head of the queue.

 <p>This is a classic &quot;bounded buffer&quot;, in which a
 fixed-sized array holds elements inserted by producers and
 extracted by consumers.  Once created, the capacity cannot be
 increased.  Attempts to <tt>put</tt> an element into a full queue
 will result in the operation blocking; attempts to <tt>take</tt> an
 element from an empty queue will similarly block.

 <p> This class supports an optional fairness policy for ordering
 waiting producer and consumer threads.  By default, this ordering
 is not guaranteed. However, a queue constructed with fairness set
 to <tt>true</tt> grants threads access in FIFO order. Fairness
 generally decreases throughput but reduces variability and avoids
 starvation.

 <p>This class and its iterator implement all of the
 <em>optional</em> methods of the {@link Collection} and {@link
 Iterator} interfaces.

 <p>This class is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.

 @since 1.5
 @author Doug Lea
 @param <E> the type of elements held in this collection

<!-- END DATA -->
<!-- BEGIN KEY -->
private final E[] java.util.concurrent.ArrayBlockingQueue.items
<!-- END KEY -->
<!-- BEGIN DATA -->
The queued items  
<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.util.concurrent.ArrayBlockingQueue.takeIndex
<!-- END KEY -->
<!-- BEGIN DATA -->
items index for next take, poll or remove 
<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.util.concurrent.ArrayBlockingQueue.putIndex
<!-- END KEY -->
<!-- BEGIN DATA -->
items index for next put, offer, or add. 
<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.util.concurrent.ArrayBlockingQueue.count
<!-- END KEY -->
<!-- BEGIN DATA -->
Number of items in the queue 
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.ReentrantLock java.util.concurrent.ArrayBlockingQueue.lock
<!-- END KEY -->
<!-- BEGIN DATA -->
Main lock guarding all access 
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.Condition java.util.concurrent.ArrayBlockingQueue.notEmpty
<!-- END KEY -->
<!-- BEGIN DATA -->
Condition for waiting takes 
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.Condition java.util.concurrent.ArrayBlockingQueue.notFull
<!-- END KEY -->
<!-- BEGIN DATA -->
Condition for waiting puts 
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ArrayBlockingQueue(int capacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an <tt>ArrayBlockingQueue</tt> with the given (fixed)
 capacity and default access policy.

 @param capacity the capacity of this queue
 @throws IllegalArgumentException if <tt>capacity</tt> is less than 1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ArrayBlockingQueue(int capacity, boolean fair)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an <tt>ArrayBlockingQueue</tt> with the given (fixed)
 capacity and the specified access policy.

 @param capacity the capacity of this queue
 @param fair if <tt>true</tt> then queue accesses for threads blocked
        on insertion or removal, are processed in FIFO order;
        if <tt>false</tt> the access order is unspecified.
 @throws IllegalArgumentException if <tt>capacity</tt> is less than 1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ArrayBlockingQueue(int capacity, boolean fair, java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an <tt>ArrayBlockingQueue</tt> with the given (fixed)
 capacity, the specified access policy and initially containing the
 elements of the given collection,
 added in traversal order of the collection's iterator.

 @param capacity the capacity of this queue
 @param fair if <tt>true</tt> then queue accesses for threads blocked
        on insertion or removal, are processed in FIFO order;
        if <tt>false</tt> the access order is unspecified.
 @param c the collection of elements to initially contain
 @throws IllegalArgumentException if <tt>capacity</tt> is less than
         <tt>c.size()</tt>, or less than 1.
 @throws NullPointerException if the specified collection or any
         of its elements are null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ArrayBlockingQueue.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element at the tail of this queue if it is
 possible to do so immediately without exceeding the queue's capacity,
 returning <tt>true</tt> upon success and throwing an
 <tt>IllegalStateException</tt> if this queue is full.

 @param e the element to add
 @return <tt>true</tt> (as specified by {@link Collection#add})
 @throws IllegalStateException if this queue is full
 @throws NullPointerException if the specified element is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ArrayBlockingQueue.offer(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element at the tail of this queue if it is
 possible to do so immediately without exceeding the queue's capacity,
 returning <tt>true</tt> upon success and <tt>false</tt> if this queue
 is full.  This method is generally preferable to method {@link #add},
 which can fail to insert an element only by throwing an exception.

 @throws NullPointerException if the specified element is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ArrayBlockingQueue.put(E e) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element at the tail of this queue, waiting
 for space to become available if the queue is full.

 @throws InterruptedException {@inheritDoc}
 @throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ArrayBlockingQueue.offer(E e, long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element at the tail of this queue, waiting
 up to the specified wait time for space to become available if
 the queue is full.

 @throws InterruptedException {@inheritDoc}
 @throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.ArrayBlockingQueue.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of elements in this queue.

 @return the number of elements in this queue

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.ArrayBlockingQueue.remainingCapacity()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of additional elements that this queue can ideally
 (in the absence of memory or resource constraints) accept without
 blocking. This is always equal to the initial capacity of this queue
 less the current <tt>size</tt> of this queue.

 <p>Note that you <em>cannot</em> always tell if an attempt to insert
 an element will succeed by inspecting <tt>remainingCapacity</tt>
 because it may be the case that another thread is about to
 insert or remove an element.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ArrayBlockingQueue.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a single instance of the specified element from this queue,
 if it is present.  More formally, removes an element <tt>e</tt> such
 that <tt>o.equals(e)</tt>, if this queue contains one or more such
 elements.
 Returns <tt>true</tt> if this queue contained the specified element
 (or equivalently, if this queue changed as a result of the call).

 @param o element to be removed from this queue, if present
 @return <tt>true</tt> if this queue changed as a result of the call

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ArrayBlockingQueue.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this queue contains the specified element.
 More formally, returns <tt>true</tt> if and only if this queue contains
 at least one element <tt>e</tt> such that <tt>o.equals(e)</tt>.

 @param o object to be checked for containment in this queue
 @return <tt>true</tt> if this queue contains the specified element

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.util.concurrent.ArrayBlockingQueue.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array containing all of the elements in this queue, in
 proper sequence.

 <p>The returned array will be "safe" in that no references to it are
 maintained by this queue.  (In other words, this method must allocate
 a new array).  The caller is thus free to modify the returned array.

 <p>This method acts as bridge between array-based and collection-based
 APIs.

 @return an array containing all of the elements in this queue

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.util.concurrent.ArrayBlockingQueue.toArray(T[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array containing all of the elements in this queue, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.  If the queue fits in the specified array, it
 is returned therein.  Otherwise, a new array is allocated with the
 runtime type of the specified array and the size of this queue.

 <p>If this queue fits in the specified array with room to spare
 (i.e., the array has more elements than this queue), the element in
 the array immediately following the end of the queue is set to
 <tt>null</tt>.

 <p>Like the {@link #toArray()} method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 <p>Suppose <tt>x</tt> is a queue known to contain only strings.
 The following code can be used to dump the queue into a newly
 allocated array of <tt>String</tt>:

 <pre>
     String[] y = x.toArray(new String[0]);</pre>

 Note that <tt>toArray(new Object[0])</tt> is identical in function to
 <tt>toArray()</tt>.

 @param a the array into which the elements of the queue are to
          be stored, if it is big enough; otherwise, a new array of the
          same runtime type is allocated for this purpose
 @return an array containing all of the elements in this queue
 @throws ArrayStoreException if the runtime type of the specified array
         is not a supertype of the runtime type of every element in
         this queue
 @throws NullPointerException if the specified array is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.ArrayBlockingQueue.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically removes all of the elements from this queue.
 The queue will be empty after this call returns.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.ArrayBlockingQueue.drainTo(java.util.Collection<? super E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws UnsupportedOperationException {@inheritDoc}
 @throws ClassCastException            {@inheritDoc}
 @throws NullPointerException          {@inheritDoc}
 @throws IllegalArgumentException      {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.ArrayBlockingQueue.drainTo(java.util.Collection<? super E> c, int maxElements)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws UnsupportedOperationException {@inheritDoc}
 @throws ClassCastException            {@inheritDoc}
 @throws NullPointerException          {@inheritDoc}
 @throws IllegalArgumentException      {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.concurrent.ArrayBlockingQueue.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an iterator over the elements in this queue in proper sequence.
 The returned <tt>Iterator</tt> is a "weakly consistent" iterator that
 will never throw {@link ConcurrentModificationException},
 and guarantees to traverse elements as they existed upon
 construction of the iterator, and may (but is not guaranteed to)
 reflect any modifications subsequent to construction.

 @return an iterator over the elements in this queue in proper sequence

<!-- END DATA -->
