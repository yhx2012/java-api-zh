<!-- BEGIN KEY -->
public class java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject extends java.lang.Object implements java.util.concurrent.locks.Condition, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 Condition implementation for a {@link
 AbstractQueuedLongSynchronizer} serving as the basis of a {@link
 Lock} implementation.

 <p>Method documentation for this class describes mechanics,
 not behavioral specifications from the point of view of Lock
 and Condition users. Exported versions of this class will in
 general need to be accompanied by documentation describing
 condition semantics that rely on those of the associated
 <tt>AbstractQueuedLongSynchronizer</tt>.

 <p>This class is Serializable, but all fields are transient,
 so deserialized conditions have no waiters.

 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <tt>ConditionObject</tt> instance.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.signal()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Moves the longest-waiting thread, if one exists, from the
 wait queue for this condition to the wait queue for the
 owning lock.

 @throws IllegalMonitorStateException if {@link #isHeldExclusively}
         returns {@code false}

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.signalAll()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Moves all threads from the wait queue for this condition to
 the wait queue for the owning lock.

 @throws IllegalMonitorStateException if {@link #isHeldExclusively}
         returns {@code false}

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.awaitUninterruptibly()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Implements uninterruptible condition wait.
 <ol>
 <li> Save lock state returned by {@link #getState}
 <li> Invoke {@link #release} with
      saved state as argument, throwing
      IllegalMonitorStateException if it fails.
 <li> Block until signalled
 <li> Reacquire by invoking specialized version of
      {@link #acquire} with saved state as argument.
 </ol>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.await() throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Implements interruptible condition wait.
 <ol>
 <li> If current thread is interrupted, throw InterruptedException
 <li> Save lock state returned by {@link #getState}
 <li> Invoke {@link #release} with
      saved state as argument, throwing
      IllegalMonitorStateException  if it fails.
 <li> Block until signalled or interrupted
 <li> Reacquire by invoking specialized version of
      {@link #acquire} with saved state as argument.
 <li> If interrupted while blocked in step 4, throw exception
 </ol>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final long java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.awaitNanos(long nanosTimeout) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Implements timed condition wait.
 <ol>
 <li> If current thread is interrupted, throw InterruptedException
 <li> Save lock state returned by {@link #getState}
 <li> Invoke {@link #release} with
      saved state as argument, throwing
      IllegalMonitorStateException  if it fails.
 <li> Block until signalled, interrupted, or timed out
 <li> Reacquire by invoking specialized version of
      {@link #acquire} with saved state as argument.
 <li> If interrupted while blocked in step 4, throw InterruptedException
 </ol>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.awaitUntil(Date deadline) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Implements absolute timed condition wait.
 <ol>
 <li> If current thread is interrupted, throw InterruptedException
 <li> Save lock state returned by {@link #getState}
 <li> Invoke {@link #release} with
      saved state as argument, throwing
      IllegalMonitorStateException  if it fails.
 <li> Block until signalled, interrupted, or timed out
 <li> Reacquire by invoking specialized version of
      {@link #acquire} with saved state as argument.
 <li> If interrupted while blocked in step 4, throw InterruptedException
 <li> If timed out while blocked in step 4, return false, else true
 </ol>

<!-- END DATA -->
<!-- BEGIN KEY -->
public final boolean java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.await(long time, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Implements timed condition wait.
 <ol>
 <li> If current thread is interrupted, throw InterruptedException
 <li> Save lock state returned by {@link #getState}
 <li> Invoke {@link #release} with
      saved state as argument, throwing
      IllegalMonitorStateException  if it fails.
 <li> Block until signalled, interrupted, or timed out
 <li> Reacquire by invoking specialized version of
      {@link #acquire} with saved state as argument.
 <li> If interrupted while blocked in step 4, throw InterruptedException
 <li> If timed out while blocked in step 4, return false, else true
 </ol>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final boolean java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.hasWaiters()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Queries whether any threads are waiting on this condition.
 Implements {@link AbstractQueuedLongSynchronizer#hasWaiters}.

 @return {@code true} if there are any waiting threads
 @throws IllegalMonitorStateException if {@link #isHeldExclusively}
         returns {@code false}

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final int java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.getWaitQueueLength()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an estimate of the number of threads waiting on
 this condition.
 Implements {@link AbstractQueuedLongSynchronizer#getWaitQueueLength}.

 @return the estimated number of waiting threads
 @throws IllegalMonitorStateException if {@link #isHeldExclusively}
         returns {@code false}

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.util.Collection<java.lang.Thread> java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.getWaitingThreads()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a collection containing those threads that may be
 waiting on this Condition.
 Implements {@link AbstractQueuedLongSynchronizer#getWaitingThreads}.

 @return the collection of threads
 @throws IllegalMonitorStateException if {@link #isHeldExclusively}
         returns {@code false}

<!-- END DATA -->
