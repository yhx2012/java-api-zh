<!-- BEGIN KEY -->
public class java.util.concurrent.atomic.AtomicStampedReference extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 An {@code AtomicStampedReference} maintains an object reference
 along with an integer "stamp", that can be updated atomically.

 <p> Implementation note. This implementation maintains stamped
 references by creating internal objects representing "boxed"
 [reference, integer] pairs.

 @since 1.5
 @author Doug Lea
 @param <V> The type of object referred to by this reference

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.atomic.AtomicStampedReference(V initialRef, int initialStamp)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new {@code AtomicStampedReference} with the given
 initial values.

 @param initialRef the initial reference
 @param initialStamp the initial stamp

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.concurrent.atomic.AtomicStampedReference.getReference()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current value of the reference.

 @return the current value of the reference

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.atomic.AtomicStampedReference.getStamp()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current value of the stamp.

 @return the current value of the stamp

<!-- END DATA -->
<!-- BEGIN KEY -->
public V java.util.concurrent.atomic.AtomicStampedReference.get(int[] stampHolder)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current values of both the reference and the stamp.
 Typical usage is {@code int[1] holder; ref = v.get(holder); }.

 @param stampHolder an array of size of at least one.  On return,
 {@code stampholder[0]} will hold the value of the stamp.
 @return the current value of the reference

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.atomic.AtomicStampedReference.weakCompareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets the value of both the reference and stamp
 to the given update values if the
 current reference is {@code ==} to the expected reference
 and the current stamp is equal to the expected stamp.

 <p>May <a href="package-summary.html#Spurious">fail spuriously</a>
 and does not provide ordering guarantees, so is only rarely an
 appropriate alternative to {@code compareAndSet}.

 @param expectedReference the expected value of the reference
 @param newReference the new value for the reference
 @param expectedStamp the expected value of the stamp
 @param newStamp the new value for the stamp
 @return true if successful

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.atomic.AtomicStampedReference.compareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets the value of both the reference and stamp
 to the given update values if the
 current reference is {@code ==} to the expected reference
 and the current stamp is equal to the expected stamp.

 @param expectedReference the expected value of the reference
 @param newReference the new value for the reference
 @param expectedStamp the expected value of the stamp
 @param newStamp the new value for the stamp
 @return true if successful

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.atomic.AtomicStampedReference.set(V newReference, int newStamp)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Unconditionally sets the value of both the reference and stamp.

 @param newReference the new value for the reference
 @param newStamp the new value for the stamp

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.atomic.AtomicStampedReference.attemptStamp(V expectedReference, int newStamp)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically sets the value of the stamp to the given update value
 if the current reference is {@code ==} to the expected
 reference.  Any given invocation of this operation may fail
 (return {@code false}) spuriously, but repeated invocation
 when the current value holds the expected value and no other
 thread is also attempting to set the value will eventually
 succeed.

 @param expectedReference the expected value of the reference
 @param newStamp the new value for the stamp
 @return true if successful

<!-- END DATA -->
