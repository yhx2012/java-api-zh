<!-- BEGIN KEY -->
public class java.util.concurrent.ConcurrentLinkedQueue extends java.util.AbstractQueue implements java.util.Queue, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 An unbounded thread-safe {@linkplain Queue queue} based on linked nodes.
 This queue orders elements FIFO (first-in-first-out).
 The <em>head</em> of the queue is that element that has been on the
 queue the longest time.
 The <em>tail</em> of the queue is that element that has been on the
 queue the shortest time. New elements
 are inserted at the tail of the queue, and the queue retrieval
 operations obtain elements at the head of the queue.
 A <tt>ConcurrentLinkedQueue</tt> is an appropriate choice when
 many threads will share access to a common collection.
 This queue does not permit <tt>null</tt> elements.

 <p>This implementation employs an efficient &quot;wait-free&quot;
 algorithm based on one described in <a
 href="http://www.cs.rochester.edu/u/michael/PODC96.html"> Simple,
 Fast, and Practical Non-Blocking and Blocking Concurrent Queue
 Algorithms</a> by Maged M. Michael and Michael L. Scott.

 <p>Beware that, unlike in most collections, the <tt>size</tt> method
 is <em>NOT</em> a constant-time operation. Because of the
 asynchronous nature of these queues, determining the current number
 of elements requires a traversal of the elements.

 <p>This class and its iterator implement all of the
 <em>optional</em> methods of the {@link Collection} and {@link
 Iterator} interfaces.

 <p>Memory consistency effects: As with other concurrent
 collections, actions in a thread prior to placing an object into a
 {@code ConcurrentLinkedQueue}
 <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a>
 actions subsequent to the access or removal of that element from
 the {@code ConcurrentLinkedQueue} in another thread.

 <p>This class is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.

 @since 1.5
 @author Doug Lea
 @param <E> the type of elements held in this collection


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentLinkedQueue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <tt>ConcurrentLinkedQueue</tt> that is initially empty.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.ConcurrentLinkedQueue(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <tt>ConcurrentLinkedQueue</tt>
 initially containing the elements of the given collection,
 added in traversal order of the collection's iterator.
 @param c the collection of elements to initially contain
 @throws NullPointerException if the specified collection or any
         of its elements are null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentLinkedQueue.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element at the tail of this queue.

 @return <tt>true</tt> (as specified by {@link Collection#add})
 @throws NullPointerException if the specified element is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentLinkedQueue.offer(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element at the tail of this queue.

 @return <tt>true</tt> (as specified by {@link Queue#offer})
 @throws NullPointerException if the specified element is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentLinkedQueue.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this queue contains no elements.

 @return <tt>true</tt> if this queue contains no elements

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.ConcurrentLinkedQueue.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of elements in this queue.  If this queue
 contains more than <tt>Integer.MAX_VALUE</tt> elements, returns
 <tt>Integer.MAX_VALUE</tt>.

 <p>Beware that, unlike in most collections, this method is
 <em>NOT</em> a constant-time operation. Because of the
 asynchronous nature of these queues, determining the current
 number of elements requires an O(n) traversal.

 @return the number of elements in this queue

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentLinkedQueue.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this queue contains the specified element.
 More formally, returns <tt>true</tt> if and only if this queue contains
 at least one element <tt>e</tt> such that <tt>o.equals(e)</tt>.

 @param o object to be checked for containment in this queue
 @return <tt>true</tt> if this queue contains the specified element

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.ConcurrentLinkedQueue.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a single instance of the specified element from this queue,
 if it is present.  More formally, removes an element <tt>e</tt> such
 that <tt>o.equals(e)</tt>, if this queue contains one or more such
 elements.
 Returns <tt>true</tt> if this queue contained the specified element
 (or equivalently, if this queue changed as a result of the call).

 @param o element to be removed from this queue, if present
 @return <tt>true</tt> if this queue changed as a result of the call

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.util.concurrent.ConcurrentLinkedQueue.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array containing all of the elements in this queue, in
 proper sequence.

 <p>The returned array will be "safe" in that no references to it are
 maintained by this queue.  (In other words, this method must allocate
 a new array).  The caller is thus free to modify the returned array.

 <p>This method acts as bridge between array-based and collection-based
 APIs.

 @return an array containing all of the elements in this queue

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.util.concurrent.ConcurrentLinkedQueue.toArray(T[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array containing all of the elements in this queue, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.  If the queue fits in the specified array, it
 is returned therein.  Otherwise, a new array is allocated with the
 runtime type of the specified array and the size of this queue.

 <p>If this queue fits in the specified array with room to spare
 (i.e., the array has more elements than this queue), the element in
 the array immediately following the end of the queue is set to
 <tt>null</tt>.

 <p>Like the {@link #toArray()} method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 <p>Suppose <tt>x</tt> is a queue known to contain only strings.
 The following code can be used to dump the queue into a newly
 allocated array of <tt>String</tt>:

 <pre>
     String[] y = x.toArray(new String[0]);</pre>

 Note that <tt>toArray(new Object[0])</tt> is identical in function to
 <tt>toArray()</tt>.

 @param a the array into which the elements of the queue are to
          be stored, if it is big enough; otherwise, a new array of the
          same runtime type is allocated for this purpose
 @return an array containing all of the elements in this queue
 @throws ArrayStoreException if the runtime type of the specified array
         is not a supertype of the runtime type of every element in
         this queue
 @throws NullPointerException if the specified array is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.concurrent.ConcurrentLinkedQueue.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an iterator over the elements in this queue in proper sequence.
 The returned iterator is a "weakly consistent" iterator that
 will never throw {@link ConcurrentModificationException},
 and guarantees to traverse elements as they existed upon
 construction of the iterator, and may (but is not guaranteed to)
 reflect any modifications subsequent to construction.

 @return an iterator over the elements in this queue in proper sequence

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.concurrent.ConcurrentLinkedQueue.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reconstitute the Queue instance from a stream (that is,
 deserialize it).
 @param s the stream

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.concurrent.ConcurrentLinkedQueue.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Save the state to a stream (that is, serialize it).

 @serialData All of the elements (each an <tt>E</tt>) in
 the proper order, followed by a null
 @param s the stream

<!-- END DATA -->
