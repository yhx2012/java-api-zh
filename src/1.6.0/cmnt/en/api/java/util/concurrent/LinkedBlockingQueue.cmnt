<!-- BEGIN KEY -->
public class java.util.concurrent.LinkedBlockingQueue extends java.util.AbstractQueue implements java.util.concurrent.BlockingQueue, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 An optionally-bounded {@linkplain BlockingQueue blocking queue} based on
 linked nodes.
 This queue orders elements FIFO (first-in-first-out).
 The <em>head</em> of the queue is that element that has been on the
 queue the longest time.
 The <em>tail</em> of the queue is that element that has been on the
 queue the shortest time. New elements
 are inserted at the tail of the queue, and the queue retrieval
 operations obtain elements at the head of the queue.
 Linked queues typically have higher throughput than array-based queues but
 less predictable performance in most concurrent applications.

 <p> The optional capacity bound constructor argument serves as a
 way to prevent excessive queue expansion. The capacity, if unspecified,
 is equal to {@link Integer#MAX_VALUE}.  Linked nodes are
 dynamically created upon each insertion unless this would bring the
 queue above capacity.

 <p>This class and its iterator implement all of the
 <em>optional</em> methods of the {@link Collection} and {@link
 Iterator} interfaces.

 <p>This class is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.

 @since 1.5
 @author Doug Lea
 @param <E> the type of elements held in this collection


<!-- END DATA -->
<!-- BEGIN KEY -->
private final int java.util.concurrent.LinkedBlockingQueue.capacity
<!-- END KEY -->
<!-- BEGIN DATA -->
The capacity bound, or Integer.MAX_VALUE if none 
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.LinkedBlockingQueue.count
<!-- END KEY -->
<!-- BEGIN DATA -->
Current number of elements 
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.ReentrantLock java.util.concurrent.LinkedBlockingQueue.takeLock
<!-- END KEY -->
<!-- BEGIN DATA -->
Lock held by take, poll, etc 
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.Condition java.util.concurrent.LinkedBlockingQueue.notEmpty
<!-- END KEY -->
<!-- BEGIN DATA -->
Wait queue for waiting takes 
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.ReentrantLock java.util.concurrent.LinkedBlockingQueue.putLock
<!-- END KEY -->
<!-- BEGIN DATA -->
Lock held by put, offer, etc 
<!-- END DATA -->
<!-- BEGIN KEY -->
private final java.util.concurrent.locks.Condition java.util.concurrent.LinkedBlockingQueue.notFull
<!-- END KEY -->
<!-- BEGIN DATA -->
Wait queue for waiting puts 
<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.LinkedBlockingQueue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <tt>LinkedBlockingQueue</tt> with a capacity of
 {@link Integer#MAX_VALUE}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.LinkedBlockingQueue(int capacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <tt>LinkedBlockingQueue</tt> with the given (fixed) capacity.

 @param capacity the capacity of this queue
 @throws IllegalArgumentException if <tt>capacity</tt> is not greater
         than zero

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.LinkedBlockingQueue(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <tt>LinkedBlockingQueue</tt> with a capacity of
 {@link Integer#MAX_VALUE}, initially containing the elements of the
 given collection,
 added in traversal order of the collection's iterator.

 @param c the collection of elements to initially contain
 @throws NullPointerException if the specified collection or any
         of its elements are null

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.LinkedBlockingQueue.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of elements in this queue.

 @return the number of elements in this queue

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.LinkedBlockingQueue.remainingCapacity()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of additional elements that this queue can ideally
 (in the absence of memory or resource constraints) accept without
 blocking. This is always equal to the initial capacity of this queue
 less the current <tt>size</tt> of this queue.

 <p>Note that you <em>cannot</em> always tell if an attempt to insert
 an element will succeed by inspecting <tt>remainingCapacity</tt>
 because it may be the case that another thread is about to
 insert or remove an element.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.LinkedBlockingQueue.put(E e) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element at the tail of this queue, waiting if
 necessary for space to become available.

 @throws InterruptedException {@inheritDoc}
 @throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingQueue.offer(E e, long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element at the tail of this queue, waiting if
 necessary up to the specified wait time for space to become available.

 @return <tt>true</tt> if successful, or <tt>false</tt> if
         the specified waiting time elapses before space is available.
 @throws InterruptedException {@inheritDoc}
 @throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingQueue.offer(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element at the tail of this queue if it is
 possible to do so immediately without exceeding the queue's capacity,
 returning <tt>true</tt> upon success and <tt>false</tt> if this queue
 is full.
 When using a capacity-restricted queue, this method is generally
 preferable to method {@link BlockingQueue#add add}, which can fail to
 insert an element only by throwing an exception.

 @throws NullPointerException if the specified element is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.LinkedBlockingQueue.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a single instance of the specified element from this queue,
 if it is present.  More formally, removes an element <tt>e</tt> such
 that <tt>o.equals(e)</tt>, if this queue contains one or more such
 elements.
 Returns <tt>true</tt> if this queue contained the specified element
 (or equivalently, if this queue changed as a result of the call).

 @param o element to be removed from this queue, if present
 @return <tt>true</tt> if this queue changed as a result of the call

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.util.concurrent.LinkedBlockingQueue.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array containing all of the elements in this queue, in
 proper sequence.

 <p>The returned array will be "safe" in that no references to it are
 maintained by this queue.  (In other words, this method must allocate
 a new array).  The caller is thus free to modify the returned array.

 <p>This method acts as bridge between array-based and collection-based
 APIs.

 @return an array containing all of the elements in this queue

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.util.concurrent.LinkedBlockingQueue.toArray(T[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array containing all of the elements in this queue, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.  If the queue fits in the specified array, it
 is returned therein.  Otherwise, a new array is allocated with the
 runtime type of the specified array and the size of this queue.

 <p>If this queue fits in the specified array with room to spare
 (i.e., the array has more elements than this queue), the element in
 the array immediately following the end of the queue is set to
 <tt>null</tt>.

 <p>Like the {@link #toArray()} method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 <p>Suppose <tt>x</tt> is a queue known to contain only strings.
 The following code can be used to dump the queue into a newly
 allocated array of <tt>String</tt>:

 <pre>
     String[] y = x.toArray(new String[0]);</pre>

 Note that <tt>toArray(new Object[0])</tt> is identical in function to
 <tt>toArray()</tt>.

 @param a the array into which the elements of the queue are to
          be stored, if it is big enough; otherwise, a new array of the
          same runtime type is allocated for this purpose
 @return an array containing all of the elements in this queue
 @throws ArrayStoreException if the runtime type of the specified array
         is not a supertype of the runtime type of every element in
         this queue
 @throws NullPointerException if the specified array is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.LinkedBlockingQueue.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Atomically removes all of the elements from this queue.
 The queue will be empty after this call returns.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.LinkedBlockingQueue.drainTo(java.util.Collection<? super E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws UnsupportedOperationException {@inheritDoc}
 @throws ClassCastException            {@inheritDoc}
 @throws NullPointerException          {@inheritDoc}
 @throws IllegalArgumentException      {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.LinkedBlockingQueue.drainTo(java.util.Collection<? super E> c, int maxElements)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws UnsupportedOperationException {@inheritDoc}
 @throws ClassCastException            {@inheritDoc}
 @throws NullPointerException          {@inheritDoc}
 @throws IllegalArgumentException      {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.concurrent.LinkedBlockingQueue.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an iterator over the elements in this queue in proper sequence.
 The returned <tt>Iterator</tt> is a "weakly consistent" iterator that
 will never throw {@link ConcurrentModificationException},
 and guarantees to traverse elements as they existed upon
 construction of the iterator, and may (but is not guaranteed to)
 reflect any modifications subsequent to construction.

 @return an iterator over the elements in this queue in proper sequence

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.concurrent.LinkedBlockingQueue.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reconstitute this queue instance from a stream (that is,
 deserialize it).
 @param s the stream

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.concurrent.LinkedBlockingQueue.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Save the state to a stream (that is, serialize it).

 @serialData The capacity is emitted (int), followed by all of
 its elements (each an <tt>Object</tt>) in the proper order,
 followed by a null
 @param s the stream

<!-- END DATA -->
