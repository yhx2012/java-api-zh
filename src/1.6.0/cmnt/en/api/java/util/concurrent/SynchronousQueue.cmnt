<!-- BEGIN KEY -->
public class java.util.concurrent.SynchronousQueue extends java.util.AbstractQueue implements java.util.concurrent.BlockingQueue, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A {@linkplain BlockingQueue blocking queue} in which each insert
 operation must wait for a corresponding remove operation by another
 thread, and vice versa.  A synchronous queue does not have any
 internal capacity, not even a capacity of one.  You cannot
 <tt>peek</tt> at a synchronous queue because an element is only
 present when you try to remove it; you cannot insert an element
 (using any method) unless another thread is trying to remove it;
 you cannot iterate as there is nothing to iterate.  The
 <em>head</em> of the queue is the element that the first queued
 inserting thread is trying to add to the queue; if there is no such
 queued thread then no element is available for removal and
 <tt>poll()</tt> will return <tt>null</tt>.  For purposes of other
 <tt>Collection</tt> methods (for example <tt>contains</tt>), a
 <tt>SynchronousQueue</tt> acts as an empty collection.  This queue
 does not permit <tt>null</tt> elements.

 <p>Synchronous queues are similar to rendezvous channels used in
 CSP and Ada. They are well suited for handoff designs, in which an
 object running in one thread must sync up with an object running
 in another thread in order to hand it some information, event, or
 task.

 <p> This class supports an optional fairness policy for ordering
 waiting producer and consumer threads.  By default, this ordering
 is not guaranteed. However, a queue constructed with fairness set
 to <tt>true</tt> grants threads access in FIFO order.

 <p>This class and its iterator implement all of the
 <em>optional</em> methods of the {@link Collection} and {@link
 Iterator} interfaces.

 <p>This class is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.

 @since 1.5
 @author Doug Lea and Bill Scherer and Michael Scott
 @param <E> the type of elements held in this collection

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.SynchronousQueue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <tt>SynchronousQueue</tt> with nonfair access policy.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.concurrent.SynchronousQueue(boolean fair)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <tt>SynchronousQueue</tt> with the specified fairness policy.

 @param fair if true, waiting threads contend in FIFO order for
        access; otherwise the order is unspecified.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.SynchronousQueue.put(E o) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified element to this queue, waiting if necessary for
 another thread to receive it.

 @throws InterruptedException {@inheritDoc}
 @throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.SynchronousQueue.offer(E o, long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element into this queue, waiting if necessary
 up to the specified wait time for another thread to receive it.

 @return <tt>true</tt> if successful, or <tt>false</tt> if the
         specified waiting time elapses before a consumer appears.
 @throws InterruptedException {@inheritDoc}
 @throws NullPointerException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.SynchronousQueue.offer(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element into this queue, if another thread is
 waiting to receive it.

 @param e the element to add
 @return <tt>true</tt> if the element was added to this queue, else
         <tt>false</tt>
 @throws NullPointerException if the specified element is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.SynchronousQueue.take() throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves and removes the head of this queue, waiting if necessary
 for another thread to insert it.

 @return the head of this queue
 @throws InterruptedException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.SynchronousQueue.poll(long timeout, TimeUnit unit) throws java.lang.InterruptedException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves and removes the head of this queue, waiting
 if necessary up to the specified wait time, for another thread
 to insert it.

 @return the head of this queue, or <tt>null</tt> if the
         specified waiting time elapses before an element is present.
 @throws InterruptedException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.SynchronousQueue.poll()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves and removes the head of this queue, if another thread
 is currently making an element available.

 @return the head of this queue, or <tt>null</tt> if no
         element is available.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.SynchronousQueue.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Always returns <tt>true</tt>.
 A <tt>SynchronousQueue</tt> has no internal capacity.

 @return <tt>true</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.SynchronousQueue.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Always returns zero.
 A <tt>SynchronousQueue</tt> has no internal capacity.

 @return zero.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.SynchronousQueue.remainingCapacity()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Always returns zero.
 A <tt>SynchronousQueue</tt> has no internal capacity.

 @return zero.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.concurrent.SynchronousQueue.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Does nothing.
 A <tt>SynchronousQueue</tt> has no internal capacity.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.SynchronousQueue.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Always returns <tt>false</tt>.
 A <tt>SynchronousQueue</tt> has no internal capacity.

 @param o the element
 @return <tt>false</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.SynchronousQueue.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Always returns <tt>false</tt>.
 A <tt>SynchronousQueue</tt> has no internal capacity.

 @param o the element to remove
 @return <tt>false</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.SynchronousQueue.containsAll(java.util.Collection<?> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>false</tt> unless the given collection is empty.
 A <tt>SynchronousQueue</tt> has no internal capacity.

 @param c the collection
 @return <tt>false</tt> unless given collection is empty

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.SynchronousQueue.removeAll(java.util.Collection<?> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Always returns <tt>false</tt>.
 A <tt>SynchronousQueue</tt> has no internal capacity.

 @param c the collection
 @return <tt>false</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.concurrent.SynchronousQueue.retainAll(java.util.Collection<?> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Always returns <tt>false</tt>.
 A <tt>SynchronousQueue</tt> has no internal capacity.

 @param c the collection
 @return <tt>false</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.concurrent.SynchronousQueue.peek()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Always returns <tt>null</tt>.
 A <tt>SynchronousQueue</tt> does not return elements
 unless actively waited on.

 @return <tt>null</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.concurrent.SynchronousQueue.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an empty iterator in which <tt>hasNext</tt> always returns
 <tt>false</tt>.

 @return an empty iterator

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.util.concurrent.SynchronousQueue.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a zero-length array.
 @return a zero-length array

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.util.concurrent.SynchronousQueue.toArray(T[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the zeroeth element of the specified array to <tt>null</tt>
 (if the array has non-zero length) and returns it.

 @param a the array
 @return the specified array
 @throws NullPointerException if the specified array is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.SynchronousQueue.drainTo(java.util.Collection<? super E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws UnsupportedOperationException {@inheritDoc}
 @throws ClassCastException            {@inheritDoc}
 @throws NullPointerException          {@inheritDoc}
 @throws IllegalArgumentException      {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.concurrent.SynchronousQueue.drainTo(java.util.Collection<? super E> c, int maxElements)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws UnsupportedOperationException {@inheritDoc}
 @throws ClassCastException            {@inheritDoc}
 @throws NullPointerException          {@inheritDoc}
 @throws IllegalArgumentException      {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.concurrent.SynchronousQueue.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Save the state to a stream (that is, serialize it).

 @param s the stream

<!-- END DATA -->
