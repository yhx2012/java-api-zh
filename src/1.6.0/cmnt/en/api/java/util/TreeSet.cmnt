<!-- BEGIN KEY -->
public class java.util.TreeSet extends java.util.AbstractSet implements java.util.NavigableSet, java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A {@link NavigableSet} implementation based on a {@link TreeMap}.
 The elements are ordered using their {@linkplain Comparable natural
 ordering}, or by a {@link Comparator} provided at set creation
 time, depending on which constructor is used.

 <p>This implementation provides guaranteed log(n) time cost for the basic
 operations ({@code add}, {@code remove} and {@code contains}).

 <p>Note that the ordering maintained by a set (whether or not an explicit
 comparator is provided) must be <i>consistent with equals</i> if it is to
 correctly implement the {@code Set} interface.  (See {@code Comparable}
 or {@code Comparator} for a precise definition of <i>consistent with
 equals</i>.)  This is so because the {@code Set} interface is defined in
 terms of the {@code equals} operation, but a {@code TreeSet} instance
 performs all element comparisons using its {@code compareTo} (or
 {@code compare}) method, so two elements that are deemed equal by this method
 are, from the standpoint of the set, equal.  The behavior of a set
 <i>is</i> well-defined even if its ordering is inconsistent with equals; it
 just fails to obey the general contract of the {@code Set} interface.

 <p><strong>Note that this implementation is not synchronized.</strong>
 If multiple threads access a tree set concurrently, and at least one
 of the threads modifies the set, it <i>must</i> be synchronized
 externally.  This is typically accomplished by synchronizing on some
 object that naturally encapsulates the set.
 If no such object exists, the set should be "wrapped" using the
 {@link Collections#synchronizedSortedSet Collections.synchronizedSortedSet}
 method.  This is best done at creation time, to prevent accidental
 unsynchronized access to the set: <pre>
   SortedSet s = Collections.synchronizedSortedSet(new TreeSet(...));</pre>

 <p>The iterators returned by this class's {@code iterator} method are
 <i>fail-fast</i>: if the set is modified at any time after the iterator is
 created, in any way except through the iterator's own {@code remove}
 method, the iterator will throw a {@link ConcurrentModificationException}.
 Thus, in the face of concurrent modification, the iterator fails quickly
 and cleanly, rather than risking arbitrary, non-deterministic behavior at
 an undetermined time in the future.

 <p>Note that the fail-fast behavior of an iterator cannot be guaranteed
 as it is, generally speaking, impossible to make any hard guarantees in the
 presence of unsynchronized concurrent modification.  Fail-fast iterators
 throw {@code ConcurrentModificationException} on a best-effort basis.
 Therefore, it would be wrong to write a program that depended on this
 exception for its correctness:   <i>the fail-fast behavior of iterators
 should be used only to detect bugs.</i>

 <p>This class is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.

 @param <E> the type of elements maintained by this set

 @author  Josh Bloch
 @version 1.37, 05/10/06
 @see	    Collection
 @see	    Set
 @see	    HashSet
 @see     Comparable
 @see     Comparator
 @see	    TreeMap
 @since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.TreeSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new, empty tree set, sorted according to the
 natural ordering of its elements.  All elements inserted into
 the set must implement the {@link Comparable} interface.
 Furthermore, all such elements must be <i>mutually
 comparable</i>: {@code e1.compareTo(e2)} must not throw a
 {@code ClassCastException} for any elements {@code e1} and
 {@code e2} in the set.  If the user attempts to add an element
 to the set that violates this constraint (for example, the user
 attempts to add a string element to a set whose elements are
 integers), the {@code add} call will throw a
 {@code ClassCastException}.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.TreeSet(java.util.Comparator<? super E> comparator)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new, empty tree set, sorted according to the specified
 comparator.  All elements inserted into the set must be <i>mutually
 comparable</i> by the specified comparator: {@code comparator.compare(e1,
 e2)} must not throw a {@code ClassCastException} for any elements
 {@code e1} and {@code e2} in the set.  If the user attempts to add
 an element to the set that violates this constraint, the
 {@code add} call will throw a {@code ClassCastException}.

 @param comparator the comparator that will be used to order this set.
        If {@code null}, the {@linkplain Comparable natural
        ordering} of the elements will be used.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.TreeSet(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new tree set containing the elements in the specified
 collection, sorted according to the <i>natural ordering</i> of its
 elements.  All elements inserted into the set must implement the
 {@link Comparable} interface.  Furthermore, all such elements must be
 <i>mutually comparable</i>: {@code e1.compareTo(e2)} must not throw a
 {@code ClassCastException} for any elements {@code e1} and
 {@code e2} in the set.

 @param c collection whose elements will comprise the new set
 @throws ClassCastException if the elements in {@code c} are
         not {@link Comparable}, or are not mutually comparable
 @throws NullPointerException if the specified collection is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.TreeSet(java.util.SortedSet<E> s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new tree set containing the same elements and
 using the same ordering as the specified sorted set.

 @param s sorted set whose elements will comprise the new set
 @throws NullPointerException if the specified sorted set is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.TreeSet.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an iterator over the elements in this set in ascending order.

 @return an iterator over the elements in this set in ascending order

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.TreeSet.descendingIterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an iterator over the elements in this set in descending order.

 @return an iterator over the elements in this set in descending order
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<E> java.util.TreeSet.descendingSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.TreeSet.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of elements in this set (its cardinality).

 @return the number of elements in this set (its cardinality)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.TreeSet.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns {@code true} if this set contains no elements.

 @return {@code true} if this set contains no elements

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.TreeSet.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns {@code true} if this set contains the specified element.
 More formally, returns {@code true} if and only if this set
 contains an element {@code e} such that
 <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.

 @param o object to be checked for containment in this set
 @return {@code true} if this set contains the specified element
 @throws ClassCastException if the specified object cannot be compared
         with the elements currently in the set
 @throws NullPointerException if the specified element is null
         and this set uses natural ordering, or its comparator
         does not permit null elements

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.TreeSet.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified element to this set if it is not already present.
 More formally, adds the specified element {@code e} to this set if
 the set contains no element {@code e2} such that
 <tt>(e==null&nbsp;?&nbsp;e2==null&nbsp;:&nbsp;e.equals(e2))</tt>.
 If this set already contains the element, the call leaves the set
 unchanged and returns {@code false}.

 @param e element to be added to this set
 @return {@code true} if this set did not already contain the specified
         element
 @throws ClassCastException if the specified object cannot be compared
         with the elements currently in this set
 @throws NullPointerException if the specified element is null
         and this set uses natural ordering, or its comparator
         does not permit null elements

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.TreeSet.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified element from this set if it is present.
 More formally, removes an element {@code e} such that
 <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>,
 if this set contains such an element.  Returns {@code true} if
 this set contained the element (or equivalently, if this set
 changed as a result of the call).  (This set will not contain the
 element once the call returns.)

 @param o object to be removed from this set, if present
 @return {@code true} if this set contained the specified element
 @throws ClassCastException if the specified object cannot be compared
         with the elements currently in this set
 @throws NullPointerException if the specified element is null
         and this set uses natural ordering, or its comparator
         does not permit null elements

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.TreeSet.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all of the elements from this set.
 The set will be empty after this call returns.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.TreeSet.addAll(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds all of the elements in the specified collection to this set.

 @param c collection containing elements to be added to this set
 @return {@code true} if this set changed as a result of the call
 @throws ClassCastException if the elements provided cannot be compared
         with the elements currently in the set
 @throws NullPointerException if the specified collection is null or
         if any element is null and this set uses natural ordering, or
         its comparator does not permit null elements

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<E> java.util.TreeSet.subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if {@code fromElement} or {@code toElement}
         is null and this set uses natural ordering, or its comparator
         does not permit null elements
 @throws IllegalArgumentException {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<E> java.util.TreeSet.headSet(E toElement, boolean inclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if {@code toElement} is null and
         this set uses natural ordering, or its comparator does
         not permit null elements
 @throws IllegalArgumentException {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.NavigableSet<E> java.util.TreeSet.tailSet(E fromElement, boolean inclusive)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if {@code fromElement} is null and
         this set uses natural ordering, or its comparator does
         not permit null elements
 @throws IllegalArgumentException {@inheritDoc}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.SortedSet<E> java.util.TreeSet.subSet(E fromElement, E toElement)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if {@code fromElement} or
         {@code toElement} is null and this set uses natural ordering,
         or its comparator does not permit null elements
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.SortedSet<E> java.util.TreeSet.headSet(E toElement)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if {@code toElement} is null
         and this set uses natural ordering, or its comparator does
         not permit null elements
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.SortedSet<E> java.util.TreeSet.tailSet(E fromElement)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if {@code fromElement} is null
         and this set uses natural ordering, or its comparator does
         not permit null elements
 @throws IllegalArgumentException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.TreeSet.first()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.TreeSet.last()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws NoSuchElementException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.TreeSet.lower(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if the specified element is null
         and this set uses natural ordering, or its comparator
         does not permit null elements
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.TreeSet.floor(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if the specified element is null
         and this set uses natural ordering, or its comparator
         does not permit null elements
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.TreeSet.ceiling(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if the specified element is null
         and this set uses natural ordering, or its comparator
         does not permit null elements
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.TreeSet.higher(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @throws ClassCastException {@inheritDoc}
 @throws NullPointerException if the specified element is null
         and this set uses natural ordering, or its comparator
         does not permit null elements
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.TreeSet.pollFirst()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.TreeSet.pollLast()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.util.TreeSet.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a shallow copy of this {@code TreeSet} instance. (The elements
 themselves are not cloned.)

 @return a shallow copy of this set

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.TreeSet.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reconstitute the {@code TreeSet} instance from a stream (that is,
 deserialize it).

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.TreeSet.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Save the state of the {@code TreeSet} instance to a stream (that is,
 serialize it).

 @serialData Emits the comparator used to order this set, or
             {@code null} if it obeys its elements' natural ordering
             (Object), followed by the size of the set (the number of
             elements it contains) (int), followed by all of its
             elements (each an Object) in order (as determined by the
             set's Comparator, or by the elements' natural ordering if
             the set has no Comparator).

<!-- END DATA -->
