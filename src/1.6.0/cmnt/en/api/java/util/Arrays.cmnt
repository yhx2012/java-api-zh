<!-- BEGIN KEY -->
public class java.util.Arrays extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class contains various methods for manipulating arrays (such as
 sorting and searching).  This class also contains a static factory
 that allows arrays to be viewed as lists.

 <p>The methods in this class all throw a <tt>NullPointerException</tt> if
 the specified array reference is null, except where noted.

 <p>The documentation for the methods contained in this class includes
 briefs description of the <i>implementations</i>.  Such descriptions should
 be regarded as <i>implementation notes</i>, rather than parts of the
 <i>specification</i>.  Implementors should feel free to substitute other
 algorithms, so long as the specification itself is adhered to.  (For
 example, the algorithm used by <tt>sort(Object[])</tt> does not have to be
 a mergesort, but it does have to be <i>stable</i>.)

 <p>This class is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.

 @author  Josh Bloch
 @author  Neal Gafter
 @author  John Rose
 @version 1.71, 04/21/06
 @since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.sort(long[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sorts the specified array of longs into ascending numerical order.
 The sorting algorithm is a tuned quicksort, adapted from Jon
 L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",
 Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
 1993).  This algorithm offers n*log(n) performance on many data sets
 that cause other quicksorts to degrade to quadratic performance.

 @param a the array to be sorted

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.sort(long[] a, int fromIndex, int toIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sorts the specified range of the specified array of longs into
 ascending numerical order.  The range to be sorted extends from index
 <tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.
 (If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)

 <p>The sorting algorithm is a tuned quicksort, adapted from Jon
 L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",
 Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
 1993).  This algorithm offers n*log(n) performance on many data sets
 that cause other quicksorts to degrade to quadratic performance.

 @param a the array to be sorted
 @param fromIndex the index of the first element (inclusive) to be
        sorted
 @param toIndex the index of the last element (exclusive) to be sorted
 @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
 @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
 <tt>toIndex &gt; a.length</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.sort(int[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sorts the specified array of ints into ascending numerical order.
 The sorting algorithm is a tuned quicksort, adapted from Jon
 L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",
 Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
 1993).  This algorithm offers n*log(n) performance on many data sets
 that cause other quicksorts to degrade to quadratic performance.

 @param a the array to be sorted

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.sort(int[] a, int fromIndex, int toIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sorts the specified range of the specified array of ints into
 ascending numerical order.  The range to be sorted extends from index
 <tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.
 (If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)<p>

 The sorting algorithm is a tuned quicksort, adapted from Jon
 L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",
 Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
 1993).  This algorithm offers n*log(n) performance on many data sets
 that cause other quicksorts to degrade to quadratic performance.

 @param a the array to be sorted
 @param fromIndex the index of the first element (inclusive) to be
        sorted
 @param toIndex the index of the last element (exclusive) to be sorted
 @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
 @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.sort(short[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sorts the specified array of shorts into ascending numerical order.
 The sorting algorithm is a tuned quicksort, adapted from Jon
 L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",
 Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
 1993).  This algorithm offers n*log(n) performance on many data sets
 that cause other quicksorts to degrade to quadratic performance.

 @param a the array to be sorted

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.sort(short[] a, int fromIndex, int toIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sorts the specified range of the specified array of shorts into
 ascending numerical order.  The range to be sorted extends from index
 <tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.
 (If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)<p>

 The sorting algorithm is a tuned quicksort, adapted from Jon
 L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",
 Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
 1993).  This algorithm offers n*log(n) performance on many data sets
 that cause other quicksorts to degrade to quadratic performance.

 @param a the array to be sorted
 @param fromIndex the index of the first element (inclusive) to be
        sorted
 @param toIndex the index of the last element (exclusive) to be sorted
 @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
 @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.sort(char[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sorts the specified array of chars into ascending numerical order.
 The sorting algorithm is a tuned quicksort, adapted from Jon
 L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",
 Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
 1993).  This algorithm offers n*log(n) performance on many data sets
 that cause other quicksorts to degrade to quadratic performance.

 @param a the array to be sorted

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.sort(char[] a, int fromIndex, int toIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sorts the specified range of the specified array of chars into
 ascending numerical order.  The range to be sorted extends from index
 <tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.
 (If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)<p>

 The sorting algorithm is a tuned quicksort, adapted from Jon
 L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",
 Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
 1993).  This algorithm offers n*log(n) performance on many data sets
 that cause other quicksorts to degrade to quadratic performance.

 @param a the array to be sorted
 @param fromIndex the index of the first element (inclusive) to be
        sorted
 @param toIndex the index of the last element (exclusive) to be sorted
 @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
 @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.sort(byte[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sorts the specified array of bytes into ascending numerical order.
 The sorting algorithm is a tuned quicksort, adapted from Jon
 L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",
 Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
 1993).  This algorithm offers n*log(n) performance on many data sets
 that cause other quicksorts to degrade to quadratic performance.

 @param a the array to be sorted

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.sort(byte[] a, int fromIndex, int toIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sorts the specified range of the specified array of bytes into
 ascending numerical order.  The range to be sorted extends from index
 <tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.
 (If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)<p>

 The sorting algorithm is a tuned quicksort, adapted from Jon
 L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",
 Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
 1993).  This algorithm offers n*log(n) performance on many data sets
 that cause other quicksorts to degrade to quadratic performance.

 @param a the array to be sorted
 @param fromIndex the index of the first element (inclusive) to be
        sorted
 @param toIndex the index of the last element (exclusive) to be sorted
 @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
 @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.sort(double[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sorts the specified array of doubles into ascending numerical order.
 <p>
 The <code>&lt;</code> relation does not provide a total order on
 all floating-point values; although they are distinct numbers
 <code>-0.0 == 0.0</code> is <code>true</code> and a NaN value
 compares neither less than, greater than, nor equal to any
 floating-point value, even itself.  To allow the sort to
 proceed, instead of using the <code>&lt;</code> relation to
 determine ascending numerical order, this method uses the total
 order imposed by {@link Double#compareTo}.  This ordering
 differs from the <code>&lt;</code> relation in that
 <code>-0.0</code> is treated as less than <code>0.0</code> and
 NaN is considered greater than any other floating-point value.
 For the purposes of sorting, all NaN values are considered
 equivalent and equal.
 <p>
 The sorting algorithm is a tuned quicksort, adapted from Jon
 L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",
 Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
 1993).  This algorithm offers n*log(n) performance on many data sets
 that cause other quicksorts to degrade to quadratic performance.

 @param a the array to be sorted

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.sort(double[] a, int fromIndex, int toIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sorts the specified range of the specified array of doubles into
 ascending numerical order.  The range to be sorted extends from index
 <tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.
 (If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)
 <p>
 The <code>&lt;</code> relation does not provide a total order on
 all floating-point values; although they are distinct numbers
 <code>-0.0 == 0.0</code> is <code>true</code> and a NaN value
 compares neither less than, greater than, nor equal to any
 floating-point value, even itself.  To allow the sort to
 proceed, instead of using the <code>&lt;</code> relation to
 determine ascending numerical order, this method uses the total
 order imposed by {@link Double#compareTo}.  This ordering
 differs from the <code>&lt;</code> relation in that
 <code>-0.0</code> is treated as less than <code>0.0</code> and
 NaN is considered greater than any other floating-point value.
 For the purposes of sorting, all NaN values are considered
 equivalent and equal.
 <p>
 The sorting algorithm is a tuned quicksort, adapted from Jon
 L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",
 Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
 1993).  This algorithm offers n*log(n) performance on many data sets
 that cause other quicksorts to degrade to quadratic performance.

 @param a the array to be sorted
 @param fromIndex the index of the first element (inclusive) to be
        sorted
 @param toIndex the index of the last element (exclusive) to be sorted
 @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
 @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.sort(float[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sorts the specified array of floats into ascending numerical order.
 <p>
 The <code>&lt;</code> relation does not provide a total order on
 all floating-point values; although they are distinct numbers
 <code>-0.0f == 0.0f</code> is <code>true</code> and a NaN value
 compares neither less than, greater than, nor equal to any
 floating-point value, even itself.  To allow the sort to
 proceed, instead of using the <code>&lt;</code> relation to
 determine ascending numerical order, this method uses the total
 order imposed by {@link Float#compareTo}.  This ordering
 differs from the <code>&lt;</code> relation in that
 <code>-0.0f</code> is treated as less than <code>0.0f</code> and
 NaN is considered greater than any other floating-point value.
 For the purposes of sorting, all NaN values are considered
 equivalent and equal.
 <p>
 The sorting algorithm is a tuned quicksort, adapted from Jon
 L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",
 Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
 1993).  This algorithm offers n*log(n) performance on many data sets
 that cause other quicksorts to degrade to quadratic performance.

 @param a the array to be sorted

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.sort(float[] a, int fromIndex, int toIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sorts the specified range of the specified array of floats into
 ascending numerical order.  The range to be sorted extends from index
 <tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.
 (If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)
 <p>
 The <code>&lt;</code> relation does not provide a total order on
 all floating-point values; although they are distinct numbers
 <code>-0.0f == 0.0f</code> is <code>true</code> and a NaN value
 compares neither less than, greater than, nor equal to any
 floating-point value, even itself.  To allow the sort to
 proceed, instead of using the <code>&lt;</code> relation to
 determine ascending numerical order, this method uses the total
 order imposed by {@link Float#compareTo}.  This ordering
 differs from the <code>&lt;</code> relation in that
 <code>-0.0f</code> is treated as less than <code>0.0f</code> and
 NaN is considered greater than any other floating-point value.
 For the purposes of sorting, all NaN values are considered
 equivalent and equal.
 <p>
 The sorting algorithm is a tuned quicksort, adapted from Jon
 L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function",
 Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
 1993).  This algorithm offers n*log(n) performance on many data sets
 that cause other quicksorts to degrade to quadratic performance.

 @param a the array to be sorted
 @param fromIndex the index of the first element (inclusive) to be
        sorted
 @param toIndex the index of the last element (exclusive) to be sorted
 @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
 @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.sort(java.lang.Object[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sorts the specified array of objects into ascending order, according to
 the {@linkplain Comparable natural ordering}
 of its elements.  All elements in the array
 must implement the {@link Comparable} interface.  Furthermore, all
 elements in the array must be <i>mutually comparable</i> (that is,
 <tt>e1.compareTo(e2)</tt> must not throw a <tt>ClassCastException</tt>
 for any elements <tt>e1</tt> and <tt>e2</tt> in the array).<p>

 This sort is guaranteed to be <i>stable</i>:  equal elements will
 not be reordered as a result of the sort.<p>

 The sorting algorithm is a modified mergesort (in which the merge is
 omitted if the highest element in the low sublist is less than the
 lowest element in the high sublist).  This algorithm offers guaranteed
 n*log(n) performance.

 @param a the array to be sorted
 @throws  ClassCastException if the array contains elements that are not
		<i>mutually comparable</i> (for example, strings and integers).

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.sort(java.lang.Object[] a, int fromIndex, int toIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sorts the specified range of the specified array of objects into
 ascending order, according to the
 {@linkplain Comparable natural ordering} of its
 elements.  The range to be sorted extends from index
 <tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.
 (If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)  All
 elements in this range must implement the {@link Comparable}
 interface.  Furthermore, all elements in this range must be <i>mutually
 comparable</i> (that is, <tt>e1.compareTo(e2)</tt> must not throw a
 <tt>ClassCastException</tt> for any elements <tt>e1</tt> and
 <tt>e2</tt> in the array).<p>

 This sort is guaranteed to be <i>stable</i>:  equal elements will
 not be reordered as a result of the sort.<p>

 The sorting algorithm is a modified mergesort (in which the merge is
 omitted if the highest element in the low sublist is less than the
 lowest element in the high sublist).  This algorithm offers guaranteed
 n*log(n) performance.

 @param a the array to be sorted
 @param fromIndex the index of the first element (inclusive) to be
        sorted
 @param toIndex the index of the last element (exclusive) to be sorted
 @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
 @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>
 @throws    ClassCastException if the array contains elements that are
		  not <i>mutually comparable</i> (for example, strings and
		  integers).

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.sort(T[] a, java.util.Comparator<? super T> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sorts the specified array of objects according to the order induced by
 the specified comparator.  All elements in the array must be
 <i>mutually comparable</i> by the specified comparator (that is,
 <tt>c.compare(e1, e2)</tt> must not throw a <tt>ClassCastException</tt>
 for any elements <tt>e1</tt> and <tt>e2</tt> in the array).<p>

 This sort is guaranteed to be <i>stable</i>:  equal elements will
 not be reordered as a result of the sort.<p>

 The sorting algorithm is a modified mergesort (in which the merge is
 omitted if the highest element in the low sublist is less than the
 lowest element in the high sublist).  This algorithm offers guaranteed
 n*log(n) performance.

 @param a the array to be sorted
 @param c the comparator to determine the order of the array.  A
        <tt>null</tt> value indicates that the elements'
        {@linkplain Comparable natural ordering} should be used.
 @throws  ClassCastException if the array contains elements that are
		not <i>mutually comparable</i> using the specified comparator.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.sort(T[] a, int fromIndex, int toIndex, java.util.Comparator<? super T> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sorts the specified range of the specified array of objects according
 to the order induced by the specified comparator.  The range to be
 sorted extends from index <tt>fromIndex</tt>, inclusive, to index
 <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the
 range to be sorted is empty.)  All elements in the range must be
 <i>mutually comparable</i> by the specified comparator (that is,
 <tt>c.compare(e1, e2)</tt> must not throw a <tt>ClassCastException</tt>
 for any elements <tt>e1</tt> and <tt>e2</tt> in the range).<p>

 This sort is guaranteed to be <i>stable</i>:  equal elements will
 not be reordered as a result of the sort.<p>

 The sorting algorithm is a modified mergesort (in which the merge is
 omitted if the highest element in the low sublist is less than the
 lowest element in the high sublist).  This algorithm offers guaranteed
 n*log(n) performance.

 @param a the array to be sorted
 @param fromIndex the index of the first element (inclusive) to be
        sorted
 @param toIndex the index of the last element (exclusive) to be sorted
 @param c the comparator to determine the order of the array.  A
        <tt>null</tt> value indicates that the elements'
        {@linkplain Comparable natural ordering} should be used.
 @throws ClassCastException if the array contains elements that are not
	       <i>mutually comparable</i> using the specified comparator.
 @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
 @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.binarySearch(long[] a, long key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches the specified array of longs for the specified value using the
 binary search algorithm.  The array must be sorted (as
 by the {@link #sort(long[])} method) prior to making this call.  If it
 is not sorted, the results are undefined.  If the array contains
 multiple elements with the specified value, there is no guarantee which
 one will be found.

 @param a the array to be searched
 @param key the value to be searched for
 @return index of the search key, if it is contained in the array;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the array: the index of the first
	       element greater than the key, or <tt>a.length</tt> if all
	       elements in the array are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.binarySearch(long[] a, int fromIndex, int toIndex, long key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches a range of
 the specified array of longs for the specified value using the
 binary search algorithm.
 The range must be sorted (as
 by the {@link #sort(long[], int, int)} method)
 prior to making this call.  If it
 is not sorted, the results are undefined.  If the range contains
 multiple elements with the specified value, there is no guarantee which
 one will be found.

 @param a the array to be searched
 @param fromIndex the index of the first element (inclusive) to be
		searched
 @param toIndex the index of the last element (exclusive) to be searched
 @param key the value to be searched for
 @return index of the search key, if it is contained in the array
	       within the specified range;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the array: the index of the first
	       element in the range greater than the key,
	       or <tt>toIndex</tt> if all
	       elements in the range are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
 @throws IllegalArgumentException
	       if {@code fromIndex > toIndex}
 @throws ArrayIndexOutOfBoundsException
	       if {@code fromIndex < 0 or toIndex > a.length}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.binarySearch(int[] a, int key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches the specified array of ints for the specified value using the
 binary search algorithm.  The array must be sorted (as
 by the {@link #sort(int[])} method) prior to making this call.  If it
 is not sorted, the results are undefined.  If the array contains
 multiple elements with the specified value, there is no guarantee which
 one will be found.

 @param a the array to be searched
 @param key the value to be searched for
 @return index of the search key, if it is contained in the array;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the array: the index of the first
	       element greater than the key, or <tt>a.length</tt> if all
	       elements in the array are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.binarySearch(int[] a, int fromIndex, int toIndex, int key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches a range of
 the specified array of ints for the specified value using the
 binary search algorithm.
 The range must be sorted (as
 by the {@link #sort(int[], int, int)} method)
 prior to making this call.  If it
 is not sorted, the results are undefined.  If the range contains
 multiple elements with the specified value, there is no guarantee which
 one will be found.

 @param a the array to be searched
 @param fromIndex the index of the first element (inclusive) to be
		searched
 @param toIndex the index of the last element (exclusive) to be searched
 @param key the value to be searched for
 @return index of the search key, if it is contained in the array
	       within the specified range;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the array: the index of the first
	       element in the range greater than the key,
	       or <tt>toIndex</tt> if all
	       elements in the range are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
 @throws IllegalArgumentException
	       if {@code fromIndex > toIndex}
 @throws ArrayIndexOutOfBoundsException
	       if {@code fromIndex < 0 or toIndex > a.length}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.binarySearch(short[] a, short key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches the specified array of shorts for the specified value using
 the binary search algorithm.  The array must be sorted
 (as by the {@link #sort(short[])} method) prior to making this call.  If
 it is not sorted, the results are undefined.  If the array contains
 multiple elements with the specified value, there is no guarantee which
 one will be found.

 @param a the array to be searched
 @param key the value to be searched for
 @return index of the search key, if it is contained in the array;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the array: the index of the first
	       element greater than the key, or <tt>a.length</tt> if all
	       elements in the array are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.binarySearch(short[] a, int fromIndex, int toIndex, short key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches a range of
 the specified array of shorts for the specified value using
 the binary search algorithm.
 The range must be sorted
 (as by the {@link #sort(short[], int, int)} method)
 prior to making this call.  If
 it is not sorted, the results are undefined.  If the range contains
 multiple elements with the specified value, there is no guarantee which
 one will be found.

 @param a the array to be searched
 @param fromIndex the index of the first element (inclusive) to be
		searched
 @param toIndex the index of the last element (exclusive) to be searched
 @param key the value to be searched for
 @return index of the search key, if it is contained in the array
	       within the specified range;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the array: the index of the first
	       element in the range greater than the key,
	       or <tt>toIndex</tt> if all
	       elements in the range are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
 @throws IllegalArgumentException
	       if {@code fromIndex > toIndex}
 @throws ArrayIndexOutOfBoundsException
	       if {@code fromIndex < 0 or toIndex > a.length}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.binarySearch(char[] a, char key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches the specified array of chars for the specified value using the
 binary search algorithm.  The array must be sorted (as
 by the {@link #sort(char[])} method) prior to making this call.  If it
 is not sorted, the results are undefined.  If the array contains
 multiple elements with the specified value, there is no guarantee which
 one will be found.

 @param a the array to be searched
 @param key the value to be searched for
 @return index of the search key, if it is contained in the array;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the array: the index of the first
	       element greater than the key, or <tt>a.length</tt> if all
	       elements in the array are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.binarySearch(char[] a, int fromIndex, int toIndex, char key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches a range of
 the specified array of chars for the specified value using the
 binary search algorithm.
 The range must be sorted (as
 by the {@link #sort(char[], int, int)} method)
 prior to making this call.  If it
 is not sorted, the results are undefined.  If the range contains
 multiple elements with the specified value, there is no guarantee which
 one will be found.

 @param a the array to be searched
 @param fromIndex the index of the first element (inclusive) to be
		searched
 @param toIndex the index of the last element (exclusive) to be searched
 @param key the value to be searched for
 @return index of the search key, if it is contained in the array
	       within the specified range;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the array: the index of the first
	       element in the range greater than the key,
	       or <tt>toIndex</tt> if all
	       elements in the range are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
 @throws IllegalArgumentException
	       if {@code fromIndex > toIndex}
 @throws ArrayIndexOutOfBoundsException
	       if {@code fromIndex < 0 or toIndex > a.length}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.binarySearch(byte[] a, byte key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches the specified array of bytes for the specified value using the
 binary search algorithm.  The array must be sorted (as
 by the {@link #sort(byte[])} method) prior to making this call.  If it
 is not sorted, the results are undefined.  If the array contains
 multiple elements with the specified value, there is no guarantee which
 one will be found.

 @param a the array to be searched
 @param key the value to be searched for
 @return index of the search key, if it is contained in the array;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the array: the index of the first
	       element greater than the key, or <tt>a.length</tt> if all
	       elements in the array are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.binarySearch(byte[] a, int fromIndex, int toIndex, byte key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches a range of
 the specified array of bytes for the specified value using the
 binary search algorithm.
 The range must be sorted (as
 by the {@link #sort(byte[], int, int)} method)
 prior to making this call.  If it
 is not sorted, the results are undefined.  If the range contains
 multiple elements with the specified value, there is no guarantee which
 one will be found.

 @param a the array to be searched
 @param fromIndex the index of the first element (inclusive) to be
		searched
 @param toIndex the index of the last element (exclusive) to be searched
 @param key the value to be searched for
 @return index of the search key, if it is contained in the array
	       within the specified range;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the array: the index of the first
	       element in the range greater than the key,
	       or <tt>toIndex</tt> if all
	       elements in the range are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
 @throws IllegalArgumentException
	       if {@code fromIndex > toIndex}
 @throws ArrayIndexOutOfBoundsException
	       if {@code fromIndex < 0 or toIndex > a.length}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.binarySearch(double[] a, double key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches the specified array of doubles for the specified value using
 the binary search algorithm.  The array must be sorted
 (as by the {@link #sort(double[])} method) prior to making this call.
 If it is not sorted, the results are undefined.  If the array contains
 multiple elements with the specified value, there is no guarantee which
 one will be found.  This method considers all NaN values to be
 equivalent and equal.

 @param a the array to be searched
 @param key the value to be searched for
 @return index of the search key, if it is contained in the array;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the array: the index of the first
	       element greater than the key, or <tt>a.length</tt> if all
	       elements in the array are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.binarySearch(double[] a, int fromIndex, int toIndex, double key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches a range of
 the specified array of doubles for the specified value using
 the binary search algorithm.
 The range must be sorted
 (as by the {@link #sort(double[], int, int)} method)
 prior to making this call.
 If it is not sorted, the results are undefined.  If the range contains
 multiple elements with the specified value, there is no guarantee which
 one will be found.  This method considers all NaN values to be
 equivalent and equal.

 @param a the array to be searched
 @param fromIndex the index of the first element (inclusive) to be
		searched
 @param toIndex the index of the last element (exclusive) to be searched
 @param key the value to be searched for
 @return index of the search key, if it is contained in the array
	       within the specified range;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the array: the index of the first
	       element in the range greater than the key,
	       or <tt>toIndex</tt> if all
	       elements in the range are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
 @throws IllegalArgumentException
	       if {@code fromIndex > toIndex}
 @throws ArrayIndexOutOfBoundsException
	       if {@code fromIndex < 0 or toIndex > a.length}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.binarySearch(float[] a, float key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches the specified array of floats for the specified value using
 the binary search algorithm.  The array must be sorted
 (as by the {@link #sort(float[])} method) prior to making this call.  If
 it is not sorted, the results are undefined.  If the array contains
 multiple elements with the specified value, there is no guarantee which
 one will be found.  This method considers all NaN values to be
 equivalent and equal.

 @param a the array to be searched
 @param key the value to be searched for
 @return index of the search key, if it is contained in the array;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the array: the index of the first
	       element greater than the key, or <tt>a.length</tt> if all
	       elements in the array are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.binarySearch(float[] a, int fromIndex, int toIndex, float key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches a range of
 the specified array of floats for the specified value using
 the binary search algorithm.
 The range must be sorted
 (as by the {@link #sort(float[], int, int)} method)
 prior to making this call.  If
 it is not sorted, the results are undefined.  If the range contains
 multiple elements with the specified value, there is no guarantee which
 one will be found.  This method considers all NaN values to be
 equivalent and equal.

 @param a the array to be searched
 @param fromIndex the index of the first element (inclusive) to be
		searched
 @param toIndex the index of the last element (exclusive) to be searched
 @param key the value to be searched for
 @return index of the search key, if it is contained in the array
	       within the specified range;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the array: the index of the first
	       element in the range greater than the key,
	       or <tt>toIndex</tt> if all
	       elements in the range are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
 @throws IllegalArgumentException
	       if {@code fromIndex > toIndex}
 @throws ArrayIndexOutOfBoundsException
	       if {@code fromIndex < 0 or toIndex > a.length}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.binarySearch(java.lang.Object[] a, Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches the specified array for the specified object using the binary
 search algorithm.  The array must be sorted into ascending order
 according to the
 {@linkplain Comparable natural ordering}
 of its elements (as by the
 {@link #sort(Object[])} method) prior to making this call.
 If it is not sorted, the results are undefined.
 (If the array contains elements that are not mutually comparable (for
 example, strings and integers), it <i>cannot</i> be sorted according
 to the natural ordering of its elements, hence results are undefined.)
 If the array contains multiple
 elements equal to the specified object, there is no guarantee which
 one will be found.

 @param a the array to be searched
 @param key the value to be searched for
 @return index of the search key, if it is contained in the array;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the array: the index of the first
	       element greater than the key, or <tt>a.length</tt> if all
	       elements in the array are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
 @throws ClassCastException if the search key is not comparable to the
         elements of the array.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.binarySearch(java.lang.Object[] a, int fromIndex, int toIndex, Object key)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches a range of
 the specified array for the specified object using the binary
 search algorithm.
 The range must be sorted into ascending order
 according to the
 {@linkplain Comparable natural ordering}
 of its elements (as by the
 {@link #sort(Object[], int, int)} method) prior to making this
 call.  If it is not sorted, the results are undefined.
 (If the range contains elements that are not mutually comparable (for
 example, strings and integers), it <i>cannot</i> be sorted according
 to the natural ordering of its elements, hence results are undefined.)
 If the range contains multiple
 elements equal to the specified object, there is no guarantee which
 one will be found.

 @param a the array to be searched
 @param fromIndex the index of the first element (inclusive) to be
		searched
 @param toIndex the index of the last element (exclusive) to be searched
 @param key the value to be searched for
 @return index of the search key, if it is contained in the array
	       within the specified range;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the array: the index of the first
	       element in the range greater than the key,
	       or <tt>toIndex</tt> if all
	       elements in the range are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
 @throws ClassCastException if the search key is not comparable to the
         elements of the array within the specified range.
 @throws IllegalArgumentException
	       if {@code fromIndex > toIndex}
 @throws ArrayIndexOutOfBoundsException
	       if {@code fromIndex < 0 or toIndex > a.length}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.binarySearch(T[] a, T key, java.util.Comparator<? super T> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches the specified array for the specified object using the binary
 search algorithm.  The array must be sorted into ascending order
 according to the specified comparator (as by the
 {@link #sort(Object[], Comparator) sort(T[], Comparator)}
 method) prior to making this call.  If it is
 not sorted, the results are undefined.
 If the array contains multiple
 elements equal to the specified object, there is no guarantee which one
 will be found.

 @param a the array to be searched
 @param key the value to be searched for
 @param c the comparator by which the array is ordered.  A
        <tt>null</tt> value indicates that the elements'
	      {@linkplain Comparable natural ordering} should be used.
 @return index of the search key, if it is contained in the array;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the array: the index of the first
	       element greater than the key, or <tt>a.length</tt> if all
	       elements in the array are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
 @throws ClassCastException if the array contains elements that are not
	       <i>mutually comparable</i> using the specified comparator,
	       or the search key is not comparable to the
	       elements of the array using this comparator.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.binarySearch(T[] a, int fromIndex, int toIndex, T key, java.util.Comparator<? super T> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Searches a range of
 the specified array for the specified object using the binary
 search algorithm.
 The range must be sorted into ascending order
 according to the specified comparator (as by the
 {@link #sort(Object[], int, int, Comparator)
 sort(T[], int, int, Comparator)}
 method) prior to making this call.
 If it is not sorted, the results are undefined.
 If the range contains multiple elements equal to the specified object,
 there is no guarantee which one will be found.

 @param a the array to be searched
 @param fromIndex the index of the first element (inclusive) to be
		searched
 @param toIndex the index of the last element (exclusive) to be searched
 @param key the value to be searched for
 @param c the comparator by which the array is ordered.  A
        <tt>null</tt> value indicates that the elements'
        {@linkplain Comparable natural ordering} should be used.
 @return index of the search key, if it is contained in the array
	       within the specified range;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the array: the index of the first
	       element in the range greater than the key,
	       or <tt>toIndex</tt> if all
	       elements in the range are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
 @throws ClassCastException if the range contains elements that are not
	       <i>mutually comparable</i> using the specified comparator,
	       or the search key is not comparable to the
	       elements in the range using this comparator.
 @throws IllegalArgumentException
	       if {@code fromIndex > toIndex}
 @throws ArrayIndexOutOfBoundsException
	       if {@code fromIndex < 0 or toIndex > a.length}
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.util.Arrays.equals(long[] a, long[] a2)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if the two specified arrays of longs are
 <i>equal</i> to one another.  Two arrays are considered equal if both
 arrays contain the same number of elements, and all corresponding pairs
 of elements in the two arrays are equal.  In other words, two arrays
 are equal if they contain the same elements in the same order.  Also,
 two array references are considered equal if both are <tt>null</tt>.<p>

 @param a one array to be tested for equality
 @param a2 the other array to be tested for equality
 @return <tt>true</tt> if the two arrays are equal

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.util.Arrays.equals(int[] a, int[] a2)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if the two specified arrays of ints are
 <i>equal</i> to one another.  Two arrays are considered equal if both
 arrays contain the same number of elements, and all corresponding pairs
 of elements in the two arrays are equal.  In other words, two arrays
 are equal if they contain the same elements in the same order.  Also,
 two array references are considered equal if both are <tt>null</tt>.<p>

 @param a one array to be tested for equality
 @param a2 the other array to be tested for equality
 @return <tt>true</tt> if the two arrays are equal

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.util.Arrays.equals(short[] a, short[] a2)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if the two specified arrays of shorts are
 <i>equal</i> to one another.  Two arrays are considered equal if both
 arrays contain the same number of elements, and all corresponding pairs
 of elements in the two arrays are equal.  In other words, two arrays
 are equal if they contain the same elements in the same order.  Also,
 two array references are considered equal if both are <tt>null</tt>.<p>

 @param a one array to be tested for equality
 @param a2 the other array to be tested for equality
 @return <tt>true</tt> if the two arrays are equal

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.util.Arrays.equals(char[] a, char[] a2)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if the two specified arrays of chars are
 <i>equal</i> to one another.  Two arrays are considered equal if both
 arrays contain the same number of elements, and all corresponding pairs
 of elements in the two arrays are equal.  In other words, two arrays
 are equal if they contain the same elements in the same order.  Also,
 two array references are considered equal if both are <tt>null</tt>.<p>

 @param a one array to be tested for equality
 @param a2 the other array to be tested for equality
 @return <tt>true</tt> if the two arrays are equal

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.util.Arrays.equals(byte[] a, byte[] a2)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if the two specified arrays of bytes are
 <i>equal</i> to one another.  Two arrays are considered equal if both
 arrays contain the same number of elements, and all corresponding pairs
 of elements in the two arrays are equal.  In other words, two arrays
 are equal if they contain the same elements in the same order.  Also,
 two array references are considered equal if both are <tt>null</tt>.<p>

 @param a one array to be tested for equality
 @param a2 the other array to be tested for equality
 @return <tt>true</tt> if the two arrays are equal

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.util.Arrays.equals(boolean[] a, boolean[] a2)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if the two specified arrays of booleans are
 <i>equal</i> to one another.  Two arrays are considered equal if both
 arrays contain the same number of elements, and all corresponding pairs
 of elements in the two arrays are equal.  In other words, two arrays
 are equal if they contain the same elements in the same order.  Also,
 two array references are considered equal if both are <tt>null</tt>.<p>

 @param a one array to be tested for equality
 @param a2 the other array to be tested for equality
 @return <tt>true</tt> if the two arrays are equal

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.util.Arrays.equals(double[] a, double[] a2)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if the two specified arrays of doubles are
 <i>equal</i> to one another.  Two arrays are considered equal if both
 arrays contain the same number of elements, and all corresponding pairs
 of elements in the two arrays are equal.  In other words, two arrays
 are equal if they contain the same elements in the same order.  Also,
 two array references are considered equal if both are <tt>null</tt>.<p>

 Two doubles <tt>d1</tt> and <tt>d2</tt> are considered equal if:
 <pre>    <tt>new Double(d1).equals(new Double(d2))</tt></pre>
 (Unlike the <tt>==</tt> operator, this method considers
 <tt>NaN</tt> equals to itself, and 0.0d unequal to -0.0d.)

 @param a one array to be tested for equality
 @param a2 the other array to be tested for equality
 @return <tt>true</tt> if the two arrays are equal
 @see Double#equals(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.util.Arrays.equals(float[] a, float[] a2)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if the two specified arrays of floats are
 <i>equal</i> to one another.  Two arrays are considered equal if both
 arrays contain the same number of elements, and all corresponding pairs
 of elements in the two arrays are equal.  In other words, two arrays
 are equal if they contain the same elements in the same order.  Also,
 two array references are considered equal if both are <tt>null</tt>.<p>

 Two floats <tt>f1</tt> and <tt>f2</tt> are considered equal if:
 <pre>    <tt>new Float(f1).equals(new Float(f2))</tt></pre>
 (Unlike the <tt>==</tt> operator, this method considers
 <tt>NaN</tt> equals to itself, and 0.0f unequal to -0.0f.)

 @param a one array to be tested for equality
 @param a2 the other array to be tested for equality
 @return <tt>true</tt> if the two arrays are equal
 @see Float#equals(Object)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.util.Arrays.equals(java.lang.Object[] a, java.lang.Object[] a2)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if the two specified arrays of Objects are
 <i>equal</i> to one another.  The two arrays are considered equal if
 both arrays contain the same number of elements, and all corresponding
 pairs of elements in the two arrays are equal.  Two objects <tt>e1</tt>
 and <tt>e2</tt> are considered <i>equal</i> if <tt>(e1==null ? e2==null
 : e1.equals(e2))</tt>.  In other words, the two arrays are equal if
 they contain the same elements in the same order.  Also, two array
 references are considered equal if both are <tt>null</tt>.<p>

 @param a one array to be tested for equality
 @param a2 the other array to be tested for equality
 @return <tt>true</tt> if the two arrays are equal

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.fill(long[] a, long val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the specified long value to each element of the specified array
 of longs.

 @param a the array to be filled
 @param val the value to be stored in all elements of the array

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.fill(long[] a, int fromIndex, int toIndex, long val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the specified long value to each element of the specified
 range of the specified array of longs.  The range to be filled
 extends from index <tt>fromIndex</tt>, inclusive, to index
 <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the
 range to be filled is empty.)

 @param a the array to be filled
 @param fromIndex the index of the first element (inclusive) to be
        filled with the specified value
 @param toIndex the index of the last element (exclusive) to be
        filled with the specified value
 @param val the value to be stored in all elements of the array
 @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
 @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.fill(int[] a, int val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the specified int value to each element of the specified array
 of ints.

 @param a the array to be filled
 @param val the value to be stored in all elements of the array

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.fill(int[] a, int fromIndex, int toIndex, int val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the specified int value to each element of the specified
 range of the specified array of ints.  The range to be filled
 extends from index <tt>fromIndex</tt>, inclusive, to index
 <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the
 range to be filled is empty.)

 @param a the array to be filled
 @param fromIndex the index of the first element (inclusive) to be
        filled with the specified value
 @param toIndex the index of the last element (exclusive) to be
        filled with the specified value
 @param val the value to be stored in all elements of the array
 @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
 @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.fill(short[] a, short val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the specified short value to each element of the specified array
 of shorts.

 @param a the array to be filled
 @param val the value to be stored in all elements of the array

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.fill(short[] a, int fromIndex, int toIndex, short val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the specified short value to each element of the specified
 range of the specified array of shorts.  The range to be filled
 extends from index <tt>fromIndex</tt>, inclusive, to index
 <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the
 range to be filled is empty.)

 @param a the array to be filled
 @param fromIndex the index of the first element (inclusive) to be
        filled with the specified value
 @param toIndex the index of the last element (exclusive) to be
        filled with the specified value
 @param val the value to be stored in all elements of the array
 @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
 @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.fill(char[] a, char val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the specified char value to each element of the specified array
 of chars.

 @param a the array to be filled
 @param val the value to be stored in all elements of the array

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.fill(char[] a, int fromIndex, int toIndex, char val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the specified char value to each element of the specified
 range of the specified array of chars.  The range to be filled
 extends from index <tt>fromIndex</tt>, inclusive, to index
 <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the
 range to be filled is empty.)

 @param a the array to be filled
 @param fromIndex the index of the first element (inclusive) to be
        filled with the specified value
 @param toIndex the index of the last element (exclusive) to be
        filled with the specified value
 @param val the value to be stored in all elements of the array
 @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
 @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.fill(byte[] a, byte val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the specified byte value to each element of the specified array
 of bytes.

 @param a the array to be filled
 @param val the value to be stored in all elements of the array

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.fill(byte[] a, int fromIndex, int toIndex, byte val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the specified byte value to each element of the specified
 range of the specified array of bytes.  The range to be filled
 extends from index <tt>fromIndex</tt>, inclusive, to index
 <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the
 range to be filled is empty.)

 @param a the array to be filled
 @param fromIndex the index of the first element (inclusive) to be
        filled with the specified value
 @param toIndex the index of the last element (exclusive) to be
        filled with the specified value
 @param val the value to be stored in all elements of the array
 @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
 @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.fill(boolean[] a, boolean val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the specified boolean value to each element of the specified
 array of booleans.

 @param a the array to be filled
 @param val the value to be stored in all elements of the array

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.fill(boolean[] a, int fromIndex, int toIndex, boolean val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the specified boolean value to each element of the specified
 range of the specified array of booleans.  The range to be filled
 extends from index <tt>fromIndex</tt>, inclusive, to index
 <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the
 range to be filled is empty.)

 @param a the array to be filled
 @param fromIndex the index of the first element (inclusive) to be
        filled with the specified value
 @param toIndex the index of the last element (exclusive) to be
        filled with the specified value
 @param val the value to be stored in all elements of the array
 @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
 @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.fill(double[] a, double val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the specified double value to each element of the specified
 array of doubles.

 @param a the array to be filled
 @param val the value to be stored in all elements of the array

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.fill(double[] a, int fromIndex, int toIndex, double val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the specified double value to each element of the specified
 range of the specified array of doubles.  The range to be filled
 extends from index <tt>fromIndex</tt>, inclusive, to index
 <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the
 range to be filled is empty.)

 @param a the array to be filled
 @param fromIndex the index of the first element (inclusive) to be
        filled with the specified value
 @param toIndex the index of the last element (exclusive) to be
        filled with the specified value
 @param val the value to be stored in all elements of the array
 @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
 @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.fill(float[] a, float val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the specified float value to each element of the specified array
 of floats.

 @param a the array to be filled
 @param val the value to be stored in all elements of the array

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.fill(float[] a, int fromIndex, int toIndex, float val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the specified float value to each element of the specified
 range of the specified array of floats.  The range to be filled
 extends from index <tt>fromIndex</tt>, inclusive, to index
 <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the
 range to be filled is empty.)

 @param a the array to be filled
 @param fromIndex the index of the first element (inclusive) to be
        filled with the specified value
 @param toIndex the index of the last element (exclusive) to be
        filled with the specified value
 @param val the value to be stored in all elements of the array
 @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
 @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.fill(java.lang.Object[] a, Object val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the specified Object reference to each element of the specified
 array of Objects.

 @param a the array to be filled
 @param val the value to be stored in all elements of the array
 @throws ArrayStoreException if the specified value is not of a
         runtime type that can be stored in the specified array

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.Arrays.fill(java.lang.Object[] a, int fromIndex, int toIndex, Object val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Assigns the specified Object reference to each element of the specified
 range of the specified array of Objects.  The range to be filled
 extends from index <tt>fromIndex</tt>, inclusive, to index
 <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the
 range to be filled is empty.)

 @param a the array to be filled
 @param fromIndex the index of the first element (inclusive) to be
        filled with the specified value
 @param toIndex the index of the last element (exclusive) to be
        filled with the specified value
 @param val the value to be stored in all elements of the array
 @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
 @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>
 @throws ArrayStoreException if the specified value is not of a
         runtime type that can be stored in the specified array

<!-- END DATA -->
<!-- BEGIN KEY -->
public static T[] java.util.Arrays.copyOf(T[] original, int newLength)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies the specified array, truncating or padding with nulls (if necessary)
 so the copy has the specified length.  For all indices that are
 valid in both the original array and the copy, the two arrays will
 contain identical values.  For any indices that are valid in the
 copy but not the original, the copy will contain <tt>null</tt>.
 Such indices will exist if and only if the specified length
 is greater than that of the original array.
 The resulting array is of exactly the same class as the original array.

 @param original the array to be copied
 @param newLength the length of the copy to be returned
 @return a copy of the original array, truncated or padded with nulls
     to obtain the specified length
 @throws NegativeArraySizeException if <tt>newLength</tt> is negative
 @throws NullPointerException if <tt>original</tt> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static T[] java.util.Arrays.copyOf(U[] original, int newLength, java.lang.Class<? extends T[]> newType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies the specified array, truncating or padding with nulls (if necessary)
 so the copy has the specified length.  For all indices that are
 valid in both the original array and the copy, the two arrays will
 contain identical values.  For any indices that are valid in the
 copy but not the original, the copy will contain <tt>null</tt>.
 Such indices will exist if and only if the specified length
 is greater than that of the original array.
 The resulting array is of the class <tt>newType</tt>.

 @param original the array to be copied
 @param newLength the length of the copy to be returned
 @param newType the class of the copy to be returned
 @return a copy of the original array, truncated or padded with nulls
     to obtain the specified length
 @throws NegativeArraySizeException if <tt>newLength</tt> is negative
 @throws NullPointerException if <tt>original</tt> is null
 @throws ArrayStoreException if an element copied from
     <tt>original</tt> is not of a runtime type that can be stored in
     an array of class <tt>newType</tt>
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static byte[] java.util.Arrays.copyOf(byte[] original, int newLength)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies the specified array, truncating or padding with zeros (if necessary)
 so the copy has the specified length.  For all indices that are
 valid in both the original array and the copy, the two arrays will
 contain identical values.  For any indices that are valid in the
 copy but not the original, the copy will contain <tt>(byte)0</tt>.
 Such indices will exist if and only if the specified length
 is greater than that of the original array.

 @param original the array to be copied
 @param newLength the length of the copy to be returned
 @return a copy of the original array, truncated or padded with zeros
     to obtain the specified length
 @throws NegativeArraySizeException if <tt>newLength</tt> is negative
 @throws NullPointerException if <tt>original</tt> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static short[] java.util.Arrays.copyOf(short[] original, int newLength)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies the specified array, truncating or padding with zeros (if necessary)
 so the copy has the specified length.  For all indices that are
 valid in both the original array and the copy, the two arrays will
 contain identical values.  For any indices that are valid in the
 copy but not the original, the copy will contain <tt>(short)0</tt>.
 Such indices will exist if and only if the specified length
 is greater than that of the original array.

 @param original the array to be copied
 @param newLength the length of the copy to be returned
 @return a copy of the original array, truncated or padded with zeros
     to obtain the specified length
 @throws NegativeArraySizeException if <tt>newLength</tt> is negative
 @throws NullPointerException if <tt>original</tt> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int[] java.util.Arrays.copyOf(int[] original, int newLength)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies the specified array, truncating or padding with zeros (if necessary)
 so the copy has the specified length.  For all indices that are
 valid in both the original array and the copy, the two arrays will
 contain identical values.  For any indices that are valid in the
 copy but not the original, the copy will contain <tt>0</tt>.
 Such indices will exist if and only if the specified length
 is greater than that of the original array.

 @param original the array to be copied
 @param newLength the length of the copy to be returned
 @return a copy of the original array, truncated or padded with zeros
     to obtain the specified length
 @throws NegativeArraySizeException if <tt>newLength</tt> is negative
 @throws NullPointerException if <tt>original</tt> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long[] java.util.Arrays.copyOf(long[] original, int newLength)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies the specified array, truncating or padding with zeros (if necessary)
 so the copy has the specified length.  For all indices that are
 valid in both the original array and the copy, the two arrays will
 contain identical values.  For any indices that are valid in the
 copy but not the original, the copy will contain <tt>0L</tt>.
 Such indices will exist if and only if the specified length
 is greater than that of the original array.

 @param original the array to be copied
 @param newLength the length of the copy to be returned
 @return a copy of the original array, truncated or padded with zeros
     to obtain the specified length
 @throws NegativeArraySizeException if <tt>newLength</tt> is negative
 @throws NullPointerException if <tt>original</tt> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static char[] java.util.Arrays.copyOf(char[] original, int newLength)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies the specified array, truncating or padding with null characters (if necessary)
 so the copy has the specified length.  For all indices that are valid
 in both the original array and the copy, the two arrays will contain
 identical values.  For any indices that are valid in the copy but not
 the original, the copy will contain <tt>'\\u000'</tt>.  Such indices
 will exist if and only if the specified length is greater than that of
 the original array.

 @param original the array to be copied
 @param newLength the length of the copy to be returned
 @return a copy of the original array, truncated or padded with null characters
     to obtain the specified length
 @throws NegativeArraySizeException if <tt>newLength</tt> is negative
 @throws NullPointerException if <tt>original</tt> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static float[] java.util.Arrays.copyOf(float[] original, int newLength)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies the specified array, truncating or padding with zeros (if necessary)
 so the copy has the specified length.  For all indices that are
 valid in both the original array and the copy, the two arrays will
 contain identical values.  For any indices that are valid in the
 copy but not the original, the copy will contain <tt>0f</tt>.
 Such indices will exist if and only if the specified length
 is greater than that of the original array.

 @param original the array to be copied
 @param newLength the length of the copy to be returned
 @return a copy of the original array, truncated or padded with zeros
     to obtain the specified length
 @throws NegativeArraySizeException if <tt>newLength</tt> is negative
 @throws NullPointerException if <tt>original</tt> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double[] java.util.Arrays.copyOf(double[] original, int newLength)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies the specified array, truncating or padding with zeros (if necessary)
 so the copy has the specified length.  For all indices that are
 valid in both the original array and the copy, the two arrays will
 contain identical values.  For any indices that are valid in the
 copy but not the original, the copy will contain <tt>0d</tt>.
 Such indices will exist if and only if the specified length
 is greater than that of the original array.

 @param original the array to be copied
 @param newLength the length of the copy to be returned
 @return a copy of the original array, truncated or padded with zeros
     to obtain the specified length
 @throws NegativeArraySizeException if <tt>newLength</tt> is negative
 @throws NullPointerException if <tt>original</tt> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean[] java.util.Arrays.copyOf(boolean[] original, int newLength)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies the specified array, truncating or padding with <tt>false</tt> (if necessary)
 so the copy has the specified length.  For all indices that are
 valid in both the original array and the copy, the two arrays will
 contain identical values.  For any indices that are valid in the
 copy but not the original, the copy will contain <tt>false</tt>.
 Such indices will exist if and only if the specified length
 is greater than that of the original array.

 @param original the array to be copied
 @param newLength the length of the copy to be returned
 @return a copy of the original array, truncated or padded with false elements
     to obtain the specified length
 @throws NegativeArraySizeException if <tt>newLength</tt> is negative
 @throws NullPointerException if <tt>original</tt> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static T[] java.util.Arrays.copyOfRange(T[] original, int from, int to)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies the specified range of the specified array into a new array.
 The initial index of the range (<tt>from</tt>) must lie between zero
 and <tt>original.length</tt>, inclusive.  The value at
 <tt>original[from]</tt> is placed into the initial element of the copy
 (unless <tt>from == original.length</tt> or <tt>from == to</tt>).
 Values from subsequent elements in the original array are placed into
 subsequent elements in the copy.  The final index of the range
 (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,
 may be greater than <tt>original.length</tt>, in which case
 <tt>null</tt> is placed in all elements of the copy whose index is
 greater than or equal to <tt>original.length - from</tt>.  The length
 of the returned array will be <tt>to - from</tt>.
 <p>
 The resulting array is of exactly the same class as the original array.

 @param original the array from which a range is to be copied
 @param from the initial index of the range to be copied, inclusive
 @param to the final index of the range to be copied, exclusive.
     (This index may lie outside the array.)
 @return a new array containing the specified range from the original array,
     truncated or padded with nulls to obtain the required length
 @throws ArrayIndexOutOfBoundsException if <tt>from &lt; 0</tt>
     or <tt>from &gt; original.length()</tt>
 @throws IllegalArgumentException if <tt>from &gt; to</tt>
 @throws NullPointerException if <tt>original</tt> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static T[] java.util.Arrays.copyOfRange(U[] original, int from, int to, java.lang.Class<? extends T[]> newType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies the specified range of the specified array into a new array.
 The initial index of the range (<tt>from</tt>) must lie between zero
 and <tt>original.length</tt>, inclusive.  The value at
 <tt>original[from]</tt> is placed into the initial element of the copy
 (unless <tt>from == original.length</tt> or <tt>from == to</tt>).
 Values from subsequent elements in the original array are placed into
 subsequent elements in the copy.  The final index of the range
 (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,
 may be greater than <tt>original.length</tt>, in which case
 <tt>null</tt> is placed in all elements of the copy whose index is
 greater than or equal to <tt>original.length - from</tt>.  The length
 of the returned array will be <tt>to - from</tt>.
 The resulting array is of the class <tt>newType</tt>.

 @param original the array from which a range is to be copied
 @param from the initial index of the range to be copied, inclusive
 @param to the final index of the range to be copied, exclusive.
     (This index may lie outside the array.)
 @param newType the class of the copy to be returned
 @return a new array containing the specified range from the original array,
     truncated or padded with nulls to obtain the required length
 @throws ArrayIndexOutOfBoundsException if <tt>from &lt; 0</tt>
     or <tt>from &gt; original.length()</tt>
 @throws IllegalArgumentException if <tt>from &gt; to</tt>
 @throws NullPointerException if <tt>original</tt> is null
 @throws ArrayStoreException if an element copied from
     <tt>original</tt> is not of a runtime type that can be stored in
     an array of class <tt>newType</tt>.
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static byte[] java.util.Arrays.copyOfRange(byte[] original, int from, int to)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies the specified range of the specified array into a new array.
 The initial index of the range (<tt>from</tt>) must lie between zero
 and <tt>original.length</tt>, inclusive.  The value at
 <tt>original[from]</tt> is placed into the initial element of the copy
 (unless <tt>from == original.length</tt> or <tt>from == to</tt>).
 Values from subsequent elements in the original array are placed into
 subsequent elements in the copy.  The final index of the range
 (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,
 may be greater than <tt>original.length</tt>, in which case
 <tt>(byte)0</tt> is placed in all elements of the copy whose index is
 greater than or equal to <tt>original.length - from</tt>.  The length
 of the returned array will be <tt>to - from</tt>.

 @param original the array from which a range is to be copied
 @param from the initial index of the range to be copied, inclusive
 @param to the final index of the range to be copied, exclusive.
     (This index may lie outside the array.)
 @return a new array containing the specified range from the original array,
     truncated or padded with zeros to obtain the required length
 @throws ArrayIndexOutOfBoundsException if <tt>from &lt; 0</tt>
     or <tt>from &gt; original.length()</tt>
 @throws IllegalArgumentException if <tt>from &gt; to</tt>
 @throws NullPointerException if <tt>original</tt> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static short[] java.util.Arrays.copyOfRange(short[] original, int from, int to)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies the specified range of the specified array into a new array.
 The initial index of the range (<tt>from</tt>) must lie between zero
 and <tt>original.length</tt>, inclusive.  The value at
 <tt>original[from]</tt> is placed into the initial element of the copy
 (unless <tt>from == original.length</tt> or <tt>from == to</tt>).
 Values from subsequent elements in the original array are placed into
 subsequent elements in the copy.  The final index of the range
 (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,
 may be greater than <tt>original.length</tt>, in which case
 <tt>(short)0</tt> is placed in all elements of the copy whose index is
 greater than or equal to <tt>original.length - from</tt>.  The length
 of the returned array will be <tt>to - from</tt>.

 @param original the array from which a range is to be copied
 @param from the initial index of the range to be copied, inclusive
 @param to the final index of the range to be copied, exclusive.
     (This index may lie outside the array.)
 @return a new array containing the specified range from the original array,
     truncated or padded with zeros to obtain the required length
 @throws ArrayIndexOutOfBoundsException if <tt>from &lt; 0</tt>
     or <tt>from &gt; original.length()</tt>
 @throws IllegalArgumentException if <tt>from &gt; to</tt>
 @throws NullPointerException if <tt>original</tt> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int[] java.util.Arrays.copyOfRange(int[] original, int from, int to)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies the specified range of the specified array into a new array.
 The initial index of the range (<tt>from</tt>) must lie between zero
 and <tt>original.length</tt>, inclusive.  The value at
 <tt>original[from]</tt> is placed into the initial element of the copy
 (unless <tt>from == original.length</tt> or <tt>from == to</tt>).
 Values from subsequent elements in the original array are placed into
 subsequent elements in the copy.  The final index of the range
 (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,
 may be greater than <tt>original.length</tt>, in which case
 <tt>0</tt> is placed in all elements of the copy whose index is
 greater than or equal to <tt>original.length - from</tt>.  The length
 of the returned array will be <tt>to - from</tt>.

 @param original the array from which a range is to be copied
 @param from the initial index of the range to be copied, inclusive
 @param to the final index of the range to be copied, exclusive.
     (This index may lie outside the array.)
 @return a new array containing the specified range from the original array,
     truncated or padded with zeros to obtain the required length
 @throws ArrayIndexOutOfBoundsException if <tt>from &lt; 0</tt>
     or <tt>from &gt; original.length()</tt>
 @throws IllegalArgumentException if <tt>from &gt; to</tt>
 @throws NullPointerException if <tt>original</tt> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static long[] java.util.Arrays.copyOfRange(long[] original, int from, int to)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies the specified range of the specified array into a new array.
 The initial index of the range (<tt>from</tt>) must lie between zero
 and <tt>original.length</tt>, inclusive.  The value at
 <tt>original[from]</tt> is placed into the initial element of the copy
 (unless <tt>from == original.length</tt> or <tt>from == to</tt>).
 Values from subsequent elements in the original array are placed into
 subsequent elements in the copy.  The final index of the range
 (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,
 may be greater than <tt>original.length</tt>, in which case
 <tt>0L</tt> is placed in all elements of the copy whose index is
 greater than or equal to <tt>original.length - from</tt>.  The length
 of the returned array will be <tt>to - from</tt>.

 @param original the array from which a range is to be copied
 @param from the initial index of the range to be copied, inclusive
 @param to the final index of the range to be copied, exclusive.
     (This index may lie outside the array.)
 @return a new array containing the specified range from the original array,
     truncated or padded with zeros to obtain the required length
 @throws ArrayIndexOutOfBoundsException if <tt>from &lt; 0</tt>
     or <tt>from &gt; original.length()</tt>
 @throws IllegalArgumentException if <tt>from &gt; to</tt>
 @throws NullPointerException if <tt>original</tt> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static char[] java.util.Arrays.copyOfRange(char[] original, int from, int to)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies the specified range of the specified array into a new array.
 The initial index of the range (<tt>from</tt>) must lie between zero
 and <tt>original.length</tt>, inclusive.  The value at
 <tt>original[from]</tt> is placed into the initial element of the copy
 (unless <tt>from == original.length</tt> or <tt>from == to</tt>).
 Values from subsequent elements in the original array are placed into
 subsequent elements in the copy.  The final index of the range
 (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,
 may be greater than <tt>original.length</tt>, in which case
 <tt>'\\u000'</tt> is placed in all elements of the copy whose index is
 greater than or equal to <tt>original.length - from</tt>.  The length
 of the returned array will be <tt>to - from</tt>.

 @param original the array from which a range is to be copied
 @param from the initial index of the range to be copied, inclusive
 @param to the final index of the range to be copied, exclusive.
     (This index may lie outside the array.)
 @return a new array containing the specified range from the original array,
     truncated or padded with null characters to obtain the required length
 @throws ArrayIndexOutOfBoundsException if <tt>from &lt; 0</tt>
     or <tt>from &gt; original.length()</tt>
 @throws IllegalArgumentException if <tt>from &gt; to</tt>
 @throws NullPointerException if <tt>original</tt> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static float[] java.util.Arrays.copyOfRange(float[] original, int from, int to)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies the specified range of the specified array into a new array.
 The initial index of the range (<tt>from</tt>) must lie between zero
 and <tt>original.length</tt>, inclusive.  The value at
 <tt>original[from]</tt> is placed into the initial element of the copy
 (unless <tt>from == original.length</tt> or <tt>from == to</tt>).
 Values from subsequent elements in the original array are placed into
 subsequent elements in the copy.  The final index of the range
 (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,
 may be greater than <tt>original.length</tt>, in which case
 <tt>0f</tt> is placed in all elements of the copy whose index is
 greater than or equal to <tt>original.length - from</tt>.  The length
 of the returned array will be <tt>to - from</tt>.

 @param original the array from which a range is to be copied
 @param from the initial index of the range to be copied, inclusive
 @param to the final index of the range to be copied, exclusive.
     (This index may lie outside the array.)
 @return a new array containing the specified range from the original array,
     truncated or padded with zeros to obtain the required length
 @throws ArrayIndexOutOfBoundsException if <tt>from &lt; 0</tt>
     or <tt>from &gt; original.length()</tt>
 @throws IllegalArgumentException if <tt>from &gt; to</tt>
 @throws NullPointerException if <tt>original</tt> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static double[] java.util.Arrays.copyOfRange(double[] original, int from, int to)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies the specified range of the specified array into a new array.
 The initial index of the range (<tt>from</tt>) must lie between zero
 and <tt>original.length</tt>, inclusive.  The value at
 <tt>original[from]</tt> is placed into the initial element of the copy
 (unless <tt>from == original.length</tt> or <tt>from == to</tt>).
 Values from subsequent elements in the original array are placed into
 subsequent elements in the copy.  The final index of the range
 (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,
 may be greater than <tt>original.length</tt>, in which case
 <tt>0d</tt> is placed in all elements of the copy whose index is
 greater than or equal to <tt>original.length - from</tt>.  The length
 of the returned array will be <tt>to - from</tt>.

 @param original the array from which a range is to be copied
 @param from the initial index of the range to be copied, inclusive
 @param to the final index of the range to be copied, exclusive.
     (This index may lie outside the array.)
 @return a new array containing the specified range from the original array,
     truncated or padded with zeros to obtain the required length
 @throws ArrayIndexOutOfBoundsException if <tt>from &lt; 0</tt>
     or <tt>from &gt; original.length()</tt>
 @throws IllegalArgumentException if <tt>from &gt; to</tt>
 @throws NullPointerException if <tt>original</tt> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean[] java.util.Arrays.copyOfRange(boolean[] original, int from, int to)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Copies the specified range of the specified array into a new array.
 The initial index of the range (<tt>from</tt>) must lie between zero
 and <tt>original.length</tt>, inclusive.  The value at
 <tt>original[from]</tt> is placed into the initial element of the copy
 (unless <tt>from == original.length</tt> or <tt>from == to</tt>).
 Values from subsequent elements in the original array are placed into
 subsequent elements in the copy.  The final index of the range
 (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,
 may be greater than <tt>original.length</tt>, in which case
 <tt>false</tt> is placed in all elements of the copy whose index is
 greater than or equal to <tt>original.length - from</tt>.  The length
 of the returned array will be <tt>to - from</tt>.

 @param original the array from which a range is to be copied
 @param from the initial index of the range to be copied, inclusive
 @param to the final index of the range to be copied, exclusive.
     (This index may lie outside the array.)
 @return a new array containing the specified range from the original array,
     truncated or padded with false elements to obtain the required length
 @throws ArrayIndexOutOfBoundsException if <tt>from &lt; 0</tt>
     or <tt>from &gt; original.length()</tt>
 @throws IllegalArgumentException if <tt>from &gt; to</tt>
 @throws NullPointerException if <tt>original</tt> is null
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.List<T> java.util.Arrays.asList(T[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a fixed-size list backed by the specified array.  (Changes to
 the returned list "write through" to the array.)  This method acts
 as bridge between array-based and collection-based APIs, in
 combination with {@link Collection#toArray}.  The returned list is
 serializable and implements {@link RandomAccess}.

 <p>This method also provides a convenient way to create a fixed-size
 list initialized to contain several elements:
 <pre>
     List&lt;String&gt; stooges = Arrays.asList("Larry", "Moe", "Curly");
 </pre>

 @param a the array by which the list will be backed
 @return a list view of the specified array

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.hashCode(long[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hash code based on the contents of the specified array.
 For any two <tt>long</tt> arrays <tt>a</tt> and <tt>b</tt>
 such that <tt>Arrays.equals(a, b)</tt>, it is also the case that
 <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.

 <p>The value returned by this method is the same value that would be
 obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}
 method on a {@link List} containing a sequence of {@link Long}
 instances representing the elements of <tt>a</tt> in the same order.
 If <tt>a</tt> is <tt>null</tt>, this method returns 0.

 @param a the array whose hash value to compute
 @return a content-based hash code for <tt>a</tt>
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.hashCode(int[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hash code based on the contents of the specified array.
 For any two non-null <tt>int</tt> arrays <tt>a</tt> and <tt>b</tt>
 such that <tt>Arrays.equals(a, b)</tt>, it is also the case that
 <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.

 <p>The value returned by this method is the same value that would be
 obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}
 method on a {@link List} containing a sequence of {@link Integer}
 instances representing the elements of <tt>a</tt> in the same order.
 If <tt>a</tt> is <tt>null</tt>, this method returns 0.

 @param a the array whose hash value to compute
 @return a content-based hash code for <tt>a</tt>
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.hashCode(short[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hash code based on the contents of the specified array.
 For any two <tt>short</tt> arrays <tt>a</tt> and <tt>b</tt>
 such that <tt>Arrays.equals(a, b)</tt>, it is also the case that
 <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.

 <p>The value returned by this method is the same value that would be
 obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}
 method on a {@link List} containing a sequence of {@link Short}
 instances representing the elements of <tt>a</tt> in the same order.
 If <tt>a</tt> is <tt>null</tt>, this method returns 0.

 @param a the array whose hash value to compute
 @return a content-based hash code for <tt>a</tt>
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.hashCode(char[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hash code based on the contents of the specified array.
 For any two <tt>char</tt> arrays <tt>a</tt> and <tt>b</tt>
 such that <tt>Arrays.equals(a, b)</tt>, it is also the case that
 <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.

 <p>The value returned by this method is the same value that would be
 obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}
 method on a {@link List} containing a sequence of {@link Character}
 instances representing the elements of <tt>a</tt> in the same order.
 If <tt>a</tt> is <tt>null</tt>, this method returns 0.

 @param a the array whose hash value to compute
 @return a content-based hash code for <tt>a</tt>
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.hashCode(byte[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hash code based on the contents of the specified array.
 For any two <tt>byte</tt> arrays <tt>a</tt> and <tt>b</tt>
 such that <tt>Arrays.equals(a, b)</tt>, it is also the case that
 <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.

 <p>The value returned by this method is the same value that would be
 obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}
 method on a {@link List} containing a sequence of {@link Byte}
 instances representing the elements of <tt>a</tt> in the same order.
 If <tt>a</tt> is <tt>null</tt>, this method returns 0.

 @param a the array whose hash value to compute
 @return a content-based hash code for <tt>a</tt>
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.hashCode(boolean[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hash code based on the contents of the specified array.
 For any two <tt>boolean</tt> arrays <tt>a</tt> and <tt>b</tt>
 such that <tt>Arrays.equals(a, b)</tt>, it is also the case that
 <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.

 <p>The value returned by this method is the same value that would be
 obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}
 method on a {@link List} containing a sequence of {@link Boolean}
 instances representing the elements of <tt>a</tt> in the same order.
 If <tt>a</tt> is <tt>null</tt>, this method returns 0.

 @param a the array whose hash value to compute
 @return a content-based hash code for <tt>a</tt>
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.hashCode(float[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hash code based on the contents of the specified array.
 For any two <tt>float</tt> arrays <tt>a</tt> and <tt>b</tt>
 such that <tt>Arrays.equals(a, b)</tt>, it is also the case that
 <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.

 <p>The value returned by this method is the same value that would be
 obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}
 method on a {@link List} containing a sequence of {@link Float}
 instances representing the elements of <tt>a</tt> in the same order.
 If <tt>a</tt> is <tt>null</tt>, this method returns 0.

 @param a the array whose hash value to compute
 @return a content-based hash code for <tt>a</tt>
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.hashCode(double[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hash code based on the contents of the specified array.
 For any two <tt>double</tt> arrays <tt>a</tt> and <tt>b</tt>
 such that <tt>Arrays.equals(a, b)</tt>, it is also the case that
 <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.

 <p>The value returned by this method is the same value that would be
 obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}
 method on a {@link List} containing a sequence of {@link Double}
 instances representing the elements of <tt>a</tt> in the same order.
 If <tt>a</tt> is <tt>null</tt>, this method returns 0.

 @param a the array whose hash value to compute
 @return a content-based hash code for <tt>a</tt>
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.hashCode(java.lang.Object[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hash code based on the contents of the specified array.  If
 the array contains other arrays as elements, the hash code is based on
 their identities rather than their contents.  It is therefore
 acceptable to invoke this method on an array that contains itself as an
 element,  either directly or indirectly through one or more levels of
 arrays.

 <p>For any two arrays <tt>a</tt> and <tt>b</tt> such that
 <tt>Arrays.equals(a, b)</tt>, it is also the case that
 <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.

 <p>The value returned by this method is equal to the value that would
 be returned by <tt>Arrays.asList(a).hashCode()</tt>, unless <tt>a</tt>
 is <tt>null</tt>, in which case <tt>0</tt> is returned.

 @param a the array whose content-based hash code to compute
 @return a content-based hash code for <tt>a</tt>
 @see #deepHashCode(Object[])
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static int java.util.Arrays.deepHashCode(java.lang.Object[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hash code based on the "deep contents" of the specified
 array.  If the array contains other arrays as elements, the
 hash code is based on their contents and so on, ad infinitum.
 It is therefore unacceptable to invoke this method on an array that
 contains itself as an element, either directly or indirectly through
 one or more levels of arrays.  The behavior of such an invocation is
 undefined.

 <p>For any two arrays <tt>a</tt> and <tt>b</tt> such that
 <tt>Arrays.deepEquals(a, b)</tt>, it is also the case that
 <tt>Arrays.deepHashCode(a) == Arrays.deepHashCode(b)</tt>.

 <p>The computation of the value returned by this method is similar to
 that of the value returned by {@link List#hashCode()} on a list
 containing the same elements as <tt>a</tt> in the same order, with one
 difference: If an element <tt>e</tt> of <tt>a</tt> is itself an array,
 its hash code is computed not by calling <tt>e.hashCode()</tt>, but as
 by calling the appropriate overloading of <tt>Arrays.hashCode(e)</tt>
 if <tt>e</tt> is an array of a primitive type, or as by calling
 <tt>Arrays.deepHashCode(e)</tt> recursively if <tt>e</tt> is an array
 of a reference type.  If <tt>a</tt> is <tt>null</tt>, this method
 returns 0.

 @param a the array whose deep-content-based hash code to compute
 @return a deep-content-based hash code for <tt>a</tt>
 @see #hashCode(Object[])
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static boolean java.util.Arrays.deepEquals(java.lang.Object[] a1, java.lang.Object[] a2)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if the two specified arrays are <i>deeply
 equal</i> to one another.  Unlike the {@link #equals(Object[],Object[])}
 method, this method is appropriate for use with nested arrays of
 arbitrary depth.

 <p>Two array references are considered deeply equal if both
 are <tt>null</tt>, or if they refer to arrays that contain the same
 number of elements and all corresponding pairs of elements in the two
 arrays are deeply equal.

 <p>Two possibly <tt>null</tt> elements <tt>e1</tt> and <tt>e2</tt> are
 deeply equal if any of the following conditions hold:
 <ul>
    <li> <tt>e1</tt> and <tt>e2</tt> are both arrays of object reference
         types, and <tt>Arrays.deepEquals(e1, e2) would return true</tt>
    <li> <tt>e1</tt> and <tt>e2</tt> are arrays of the same primitive
         type, and the appropriate overloading of
         <tt>Arrays.equals(e1, e2)</tt> would return true.
    <li> <tt>e1 == e2</tt>
    <li> <tt>e1.equals(e2)</tt> would return true.
 </ul>
 Note that this definition permits <tt>null</tt> elements at any depth.

 <p>If either of the specified arrays contain themselves as elements
 either directly or indirectly through one or more levels of arrays,
 the behavior of this method is undefined.

 @param a1 one array to be tested for equality
 @param a2 the other array to be tested for equality
 @return <tt>true</tt> if the two arrays are equal
 @see #equals(Object[],Object[])
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.util.Arrays.toString(long[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of the contents of the specified array.
 The string representation consists of a list of the array's elements,
 enclosed in square brackets (<tt>"[]"</tt>).  Adjacent elements are
 separated by the characters <tt>", "</tt> (a comma followed by a
 space).  Elements are converted to strings as by
 <tt>String.valueOf(long)</tt>.  Returns <tt>"null"</tt> if <tt>a</tt>
 is <tt>null</tt>.

 @param a the array whose string representation to return
 @return a string representation of <tt>a</tt>
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.util.Arrays.toString(int[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of the contents of the specified array.
 The string representation consists of a list of the array's elements,
 enclosed in square brackets (<tt>"[]"</tt>).  Adjacent elements are
 separated by the characters <tt>", "</tt> (a comma followed by a
 space).  Elements are converted to strings as by
 <tt>String.valueOf(int)</tt>.  Returns <tt>"null"</tt> if <tt>a</tt> is
 <tt>null</tt>.

 @param a the array whose string representation to return
 @return a string representation of <tt>a</tt>
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.util.Arrays.toString(short[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of the contents of the specified array.
 The string representation consists of a list of the array's elements,
 enclosed in square brackets (<tt>"[]"</tt>).  Adjacent elements are
 separated by the characters <tt>", "</tt> (a comma followed by a
 space).  Elements are converted to strings as by
 <tt>String.valueOf(short)</tt>.  Returns <tt>"null"</tt> if <tt>a</tt>
 is <tt>null</tt>.

 @param a the array whose string representation to return
 @return a string representation of <tt>a</tt>
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.util.Arrays.toString(char[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of the contents of the specified array.
 The string representation consists of a list of the array's elements,
 enclosed in square brackets (<tt>"[]"</tt>).  Adjacent elements are
 separated by the characters <tt>", "</tt> (a comma followed by a
 space).  Elements are converted to strings as by
 <tt>String.valueOf(char)</tt>.  Returns <tt>"null"</tt> if <tt>a</tt>
 is <tt>null</tt>.

 @param a the array whose string representation to return
 @return a string representation of <tt>a</tt>
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.util.Arrays.toString(byte[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of the contents of the specified array.
 The string representation consists of a list of the array's elements,
 enclosed in square brackets (<tt>"[]"</tt>).  Adjacent elements
 are separated by the characters <tt>", "</tt> (a comma followed
 by a space).  Elements are converted to strings as by
 <tt>String.valueOf(byte)</tt>.  Returns <tt>"null"</tt> if
 <tt>a</tt> is <tt>null</tt>.

 @param a the array whose string representation to return
 @return a string representation of <tt>a</tt>
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.util.Arrays.toString(boolean[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of the contents of the specified array.
 The string representation consists of a list of the array's elements,
 enclosed in square brackets (<tt>"[]"</tt>).  Adjacent elements are
 separated by the characters <tt>", "</tt> (a comma followed by a
 space).  Elements are converted to strings as by
 <tt>String.valueOf(boolean)</tt>.  Returns <tt>"null"</tt> if
 <tt>a</tt> is <tt>null</tt>.

 @param a the array whose string representation to return
 @return a string representation of <tt>a</tt>
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.util.Arrays.toString(float[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of the contents of the specified array.
 The string representation consists of a list of the array's elements,
 enclosed in square brackets (<tt>"[]"</tt>).  Adjacent elements are
 separated by the characters <tt>", "</tt> (a comma followed by a
 space).  Elements are converted to strings as by
 <tt>String.valueOf(float)</tt>.  Returns <tt>"null"</tt> if <tt>a</tt>
 is <tt>null</tt>.

 @param a the array whose string representation to return
 @return a string representation of <tt>a</tt>
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.util.Arrays.toString(double[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of the contents of the specified array.
 The string representation consists of a list of the array's elements,
 enclosed in square brackets (<tt>"[]"</tt>).  Adjacent elements are
 separated by the characters <tt>", "</tt> (a comma followed by a
 space).  Elements are converted to strings as by
 <tt>String.valueOf(double)</tt>.  Returns <tt>"null"</tt> if <tt>a</tt>
 is <tt>null</tt>.

 @param a the array whose string representation to return
 @return a string representation of <tt>a</tt>
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.util.Arrays.toString(java.lang.Object[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of the contents of the specified array.
 If the array contains other arrays as elements, they are converted to
 strings by the {@link Object#toString} method inherited from
 <tt>Object</tt>, which describes their <i>identities</i> rather than
 their contents.

 <p>The value returned by this method is equal to the value that would
 be returned by <tt>Arrays.asList(a).toString()</tt>, unless <tt>a</tt>
 is <tt>null</tt>, in which case <tt>"null"</tt> is returned.

 @param a the array whose string representation to return
 @return a string representation of <tt>a</tt>
 @see #deepToString(Object[])
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.lang.String java.util.Arrays.deepToString(java.lang.Object[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a string representation of the "deep contents" of the specified
 array.  If the array contains other arrays as elements, the string
 representation contains their contents and so on.  This method is
 designed for converting multidimensional arrays to strings.

 <p>The string representation consists of a list of the array's
 elements, enclosed in square brackets (<tt>"[]"</tt>).  Adjacent
 elements are separated by the characters <tt>", "</tt> (a comma
 followed by a space).  Elements are converted to strings as by
 <tt>String.valueOf(Object)</tt>, unless they are themselves
 arrays.

 <p>If an element <tt>e</tt> is an array of a primitive type, it is
 converted to a string as by invoking the appropriate overloading of
 <tt>Arrays.toString(e)</tt>.  If an element <tt>e</tt> is an array of a
 reference type, it is converted to a string as by invoking
 this method recursively.

 <p>To avoid infinite recursion, if the specified array contains itself
 as an element, or contains an indirect reference to itself through one
 or more levels of arrays, the self-reference is converted to the string
 <tt>"[...]"</tt>.  For example, an array containing only a reference
 to itself would be rendered as <tt>"[[...]]"</tt>.

 <p>This method returns <tt>"null"</tt> if the specified array
 is <tt>null</tt>.

 @param a the array whose string representation to return
 @return a string representation of <tt>a</tt>
 @see #toString(Object[])
 @since 1.5

<!-- END DATA -->
