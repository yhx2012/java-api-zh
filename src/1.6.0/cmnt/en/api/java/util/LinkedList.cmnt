<!-- BEGIN KEY -->
public class java.util.LinkedList extends java.util.AbstractSequentialList implements java.util.List, java.util.Deque, java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 Linked list implementation of the <tt>List</tt> interface.  Implements all
 optional list operations, and permits all elements (including
 <tt>null</tt>).  In addition to implementing the <tt>List</tt> interface,
 the <tt>LinkedList</tt> class provides uniformly named methods to
 <tt>get</tt>, <tt>remove</tt> and <tt>insert</tt> an element at the
 beginning and end of the list.  These operations allow linked lists to be
 used as a stack, {@linkplain Queue queue}, or {@linkplain Deque
 double-ended queue}. <p>

 The class implements the <tt>Deque</tt> interface, providing
 first-in-first-out queue operations for <tt>add</tt>,
 <tt>poll</tt>, along with other stack and deque operations.<p>

 All of the operations perform as could be expected for a doubly-linked
 list.  Operations that index into the list will traverse the list from
 the beginning or the end, whichever is closer to the specified index.<p>

 <p><strong>Note that this implementation is not synchronized.</strong>
 If multiple threads access a linked list concurrently, and at least
 one of the threads modifies the list structurally, it <i>must</i> be
 synchronized externally.  (A structural modification is any operation
 that adds or deletes one or more elements; merely setting the value of
 an element is not a structural modification.)  This is typically
 accomplished by synchronizing on some object that naturally
 encapsulates the list.

 If no such object exists, the list should be "wrapped" using the
 {@link Collections#synchronizedList Collections.synchronizedList}
 method.  This is best done at creation time, to prevent accidental
 unsynchronized access to the list:<pre>
   List list = Collections.synchronizedList(new LinkedList(...));</pre>

 <p>The iterators returned by this class's <tt>iterator</tt> and
 <tt>listIterator</tt> methods are <i>fail-fast</i>: if the list is
 structurally modified at any time after the iterator is created, in
 any way except through the Iterator's own <tt>remove</tt> or
 <tt>add</tt> methods, the iterator will throw a {@link
 ConcurrentModificationException}.  Thus, in the face of concurrent
 modification, the iterator fails quickly and cleanly, rather than
 risking arbitrary, non-deterministic behavior at an undetermined
 time in the future.

 <p>Note that the fail-fast behavior of an iterator cannot be guaranteed
 as it is, generally speaking, impossible to make any hard guarantees in the
 presence of unsynchronized concurrent modification.  Fail-fast iterators
 throw <tt>ConcurrentModificationException</tt> on a best-effort basis.
 Therefore, it would be wrong to write a program that depended on this
 exception for its correctness:   <i>the fail-fast behavior of iterators
 should be used only to detect bugs.</i>

 <p>This class is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.

 @author  Josh Bloch
 @version 1.67, 04/21/06
 @see	    List
 @see	    ArrayList
 @see	    Vector
 @since 1.2
 @param <E> the type of elements held in this collection

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.LinkedList()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an empty list.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.LinkedList(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a list containing the elements of the specified
 collection, in the order they are returned by the collection's
 iterator.

 @param  c the collection whose elements are to be placed into this list
 @throws NullPointerException if the specified collection is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.getFirst()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the first element in this list.

 @return the first element in this list
 @throws NoSuchElementException if this list is empty

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.getLast()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the last element in this list.

 @return the last element in this list
 @throws NoSuchElementException if this list is empty

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.removeFirst()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes and returns the first element from this list.

 @return the first element from this list
 @throws NoSuchElementException if this list is empty

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.removeLast()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes and returns the last element from this list.

 @return the last element from this list
 @throws NoSuchElementException if this list is empty

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.LinkedList.addFirst(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element at the beginning of this list.

 @param e the element to add

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.LinkedList.addLast(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends the specified element to the end of this list.

 <p>This method is equivalent to {@link #add}.

 @param e the element to add

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.LinkedList.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this list contains the specified element.
 More formally, returns <tt>true</tt> if and only if this list contains
 at least one element <tt>e</tt> such that
 <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.

 @param o element whose presence in this list is to be tested
 @return <tt>true</tt> if this list contains the specified element

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.LinkedList.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of elements in this list.

 @return the number of elements in this list

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.LinkedList.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends the specified element to the end of this list.

 <p>This method is equivalent to {@link #addLast}.

 @param e element to be appended to this list
 @return <tt>true</tt> (as specified by {@link Collection#add})

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.LinkedList.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the first occurrence of the specified element from this list,
 if it is present.  If this list does not contain the element, it is
 unchanged.  More formally, removes the element with the lowest index
 <tt>i</tt> such that
 <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>
 (if such an element exists).  Returns <tt>true</tt> if this list
 contained the specified element (or equivalently, if this list
 changed as a result of the call).

 @param o element to be removed from this list, if present
 @return <tt>true</tt> if this list contained the specified element

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.LinkedList.addAll(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends all of the elements in the specified collection to the end of
 this list, in the order that they are returned by the specified
 collection's iterator.  The behavior of this operation is undefined if
 the specified collection is modified while the operation is in
 progress.  (Note that this will occur if the specified collection is
 this list, and it's nonempty.)

 @param c collection containing elements to be added to this list
 @return <tt>true</tt> if this list changed as a result of the call
 @throws NullPointerException if the specified collection is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.LinkedList.addAll(int index, java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts all of the elements in the specified collection into this
 list, starting at the specified position.  Shifts the element
 currently at that position (if any) and any subsequent elements to
 the right (increases their indices).  The new elements will appear
 in the list in the order that they are returned by the
 specified collection's iterator.

 @param index index at which to insert the first element
              from the specified collection
 @param c collection containing elements to be added to this list
 @return <tt>true</tt> if this list changed as a result of the call
 @throws IndexOutOfBoundsException {@inheritDoc}
 @throws NullPointerException if the specified collection is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.LinkedList.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all of the elements from this list.

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.get(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the element at the specified position in this list.

 @param index index of the element to return
 @return the element at the specified position in this list
 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.set(int index, E element)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Replaces the element at the specified position in this list with the
 specified element.

 @param index index of the element to replace
 @param element element to be stored at the specified position
 @return the element previously at the specified position
 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.LinkedList.add(int index, E element)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element at the specified position in this list.
 Shifts the element currently at that position (if any) and any
 subsequent elements to the right (adds one to their indices).

 @param index index at which the specified element is to be inserted
 @param element element to be inserted
 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.remove(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the element at the specified position in this list.  Shifts any
 subsequent elements to the left (subtracts one from their indices).
 Returns the element that was removed from the list.

 @param index the index of the element to be removed
 @return the element previously at the specified position
 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.LinkedList.indexOf(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the index of the first occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
 More formally, returns the lowest index <tt>i</tt> such that
 <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,
 or -1 if there is no such index.

 @param o element to search for
 @return the index of the first occurrence of the specified element in
         this list, or -1 if this list does not contain the element

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.LinkedList.lastIndexOf(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the index of the last occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
 More formally, returns the highest index <tt>i</tt> such that
 <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,
 or -1 if there is no such index.

 @param o element to search for
 @return the index of the last occurrence of the specified element in
         this list, or -1 if this list does not contain the element

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.peek()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves, but does not remove, the head (first element) of this list.
 @return the head of this list, or <tt>null</tt> if this list is empty
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.element()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves, but does not remove, the head (first element) of this list.
 @return the head of this list
 @throws NoSuchElementException if this list is empty
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.poll()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves and removes the head (first element) of this list
 @return the head of this list, or <tt>null</tt> if this list is empty
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.remove()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves and removes the head (first element) of this list.

 @return the head of this list
 @throws NoSuchElementException if this list is empty
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.LinkedList.offer(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified element as the tail (last element) of this list.

 @param e the element to add
 @return <tt>true</tt> (as specified by {@link Queue#offer})
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.LinkedList.offerFirst(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element at the front of this list.

 @param e the element to insert
 @return <tt>true</tt> (as specified by {@link Deque#offerFirst})
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.LinkedList.offerLast(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element at the end of this list.

 @param e the element to insert
 @return <tt>true</tt> (as specified by {@link Deque#offerLast})
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.peekFirst()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves, but does not remove, the first element of this list,
 or returns <tt>null</tt> if this list is empty.

 @return the first element of this list, or <tt>null</tt>
         if this list is empty
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.peekLast()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves, but does not remove, the last element of this list,
 or returns <tt>null</tt> if this list is empty.

 @return the last element of this list, or <tt>null</tt>
         if this list is empty
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.pollFirst()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves and removes the first element of this list,
 or returns <tt>null</tt> if this list is empty.

 @return the first element of this list, or <tt>null</tt> if
     this list is empty
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.pollLast()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves and removes the last element of this list,
 or returns <tt>null</tt> if this list is empty.

 @return the last element of this list, or <tt>null</tt> if
     this list is empty
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.LinkedList.push(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Pushes an element onto the stack represented by this list.  In other
 words, inserts the element at the front of this list.

 <p>This method is equivalent to {@link #addFirst}.

 @param e the element to push
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.LinkedList.pop()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Pops an element from the stack represented by this list.  In other
 words, removes and returns the first element of this list.

 <p>This method is equivalent to {@link #removeFirst()}.

 @return the element at the front of this list (which is the top
         of the stack represented by this list)
 @throws NoSuchElementException if this list is empty
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.LinkedList.removeFirstOccurrence(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the first occurrence of the specified element in this
 list (when traversing the list from head to tail).  If the list
 does not contain the element, it is unchanged.

 @param o element to be removed from this list, if present
 @return <tt>true</tt> if the list contained the specified element
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.LinkedList.removeLastOccurrence(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the last occurrence of the specified element in this
 list (when traversing the list from head to tail).  If the list
 does not contain the element, it is unchanged.

 @param o element to be removed from this list, if present
 @return <tt>true</tt> if the list contained the specified element
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.ListIterator<E> java.util.LinkedList.listIterator(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a list-iterator of the elements in this list (in proper
 sequence), starting at the specified position in the list.
 Obeys the general contract of <tt>List.listIterator(int)</tt>.<p>

 The list-iterator is <i>fail-fast</i>: if the list is structurally
 modified at any time after the Iterator is created, in any way except
 through the list-iterator's own <tt>remove</tt> or <tt>add</tt>
 methods, the list-iterator will throw a
 <tt>ConcurrentModificationException</tt>.  Thus, in the face of
 concurrent modification, the iterator fails quickly and cleanly, rather
 than risking arbitrary, non-deterministic behavior at an undetermined
 time in the future.

 @param index index of the first element to be returned from the
              list-iterator (by a call to <tt>next</tt>)
 @return a ListIterator of the elements in this list (in proper
         sequence), starting at the specified position in the list
 @throws IndexOutOfBoundsException {@inheritDoc}
 @see List#listIterator(int)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.LinkedList.descendingIterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @since 1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.util.LinkedList.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a shallow copy of this <tt>LinkedList</tt>. (The elements
 themselves are not cloned.)

 @return a shallow copy of this <tt>LinkedList</tt> instance

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.util.LinkedList.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array containing all of the elements in this list
 in proper sequence (from first to last element).

 <p>The returned array will be "safe" in that no references to it are
 maintained by this list.  (In other words, this method must allocate
 a new array).  The caller is thus free to modify the returned array.

 <p>This method acts as bridge between array-based and collection-based
 APIs.

 @return an array containing all of the elements in this list
         in proper sequence

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.util.LinkedList.toArray(T[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array containing all of the elements in this list in
 proper sequence (from first to last element); the runtime type of
 the returned array is that of the specified array.  If the list fits
 in the specified array, it is returned therein.  Otherwise, a new
 array is allocated with the runtime type of the specified array and
 the size of this list.

 <p>If the list fits in the specified array with room to spare (i.e.,
 the array has more elements than the list), the element in the array
 immediately following the end of the list is set to <tt>null</tt>.
 (This is useful in determining the length of the list <i>only</i> if
 the caller knows that the list does not contain any null elements.)

 <p>Like the {@link #toArray()} method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 <p>Suppose <tt>x</tt> is a list known to contain only strings.
 The following code can be used to dump the list into a newly
 allocated array of <tt>String</tt>:

 <pre>
     String[] y = x.toArray(new String[0]);</pre>

 Note that <tt>toArray(new Object[0])</tt> is identical in function to
 <tt>toArray()</tt>.

 @param a the array into which the elements of the list are to
          be stored, if it is big enough; otherwise, a new array of the
          same runtime type is allocated for this purpose.
 @return an array containing the elements of the list
 @throws ArrayStoreException if the runtime type of the specified array
         is not a supertype of the runtime type of every element in
         this list
 @throws NullPointerException if the specified array is null

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.LinkedList.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reconstitute this <tt>LinkedList</tt> instance from a stream (that is
 deserialize it).

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.LinkedList.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Save the state of this <tt>LinkedList</tt> instance to a stream (that
 is, serialize it).

 @serialData The size of the list (the number of elements it
             contains) is emitted (int), followed by all of its
             elements (each an Object) in the proper order.

<!-- END DATA -->
