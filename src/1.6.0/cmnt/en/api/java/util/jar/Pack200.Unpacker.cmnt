<!-- BEGIN KEY -->
public static interface java.util.jar.Pack200.Unpacker
<!-- END KEY -->
<!-- BEGIN DATA -->
 The unpacker engine converts the packed stream to a JAR file.
 An instance of the engine can be obtained
 using {@link #newUnpacker}.
 <p>
 Every JAR file produced by this engine will include the string
 "<tt>PACK200</tt>" as a zip file comment.
 This allows a deployer to detect if a JAR archive was packed and unpacked.
 <p>
 This version of the unpacker is compatible with all previous versions.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.util.jar.Pack200.Unpacker.KEEP
<!-- END KEY -->
<!-- BEGIN DATA -->
The string "keep", a possible value for certain properties.
 @see #DEFLATE_HINT

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.util.jar.Pack200.Unpacker.TRUE
<!-- END KEY -->
<!-- BEGIN DATA -->
The string "true", a possible value for certain properties.
 @see #DEFLATE_HINT

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.util.jar.Pack200.Unpacker.FALSE
<!-- END KEY -->
<!-- BEGIN DATA -->
The string "false", a possible value for certain properties.
 @see #DEFLATE_HINT

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.util.jar.Pack200.Unpacker.DEFLATE_HINT
<!-- END KEY -->
<!-- BEGIN DATA -->
 Property indicating that the unpacker should
 ignore all transmitted values for DEFLATE_HINT,
 replacing them by the given value, {@link #TRUE} or {@link #FALSE}.
 The default value is the special string {@link #KEEP},
 which asks the unpacker to preserve all transmitted
 deflation hints.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.util.jar.Pack200.Unpacker.PROGRESS
<!-- END KEY -->
<!-- BEGIN DATA -->
 The unpacker's progress as a percentage, as periodically
 updated by the unpacker.
 Values of 0 - 100 are normal, and -1 indicates a stall.
 Observe this property with a {@link PropertyChangeListener}.
 <p>
 At a minimum, the unpacker must set progress to 0
 at the beginning of a packing operation, and to 100
 at the end.
 @see #addPropertyChangeListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.SortedMap<java.lang.String, java.lang.String> java.util.jar.Pack200.Unpacker.properties()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the set of this engine's properties. This set is 
 a "live view", so that changing its
 contents immediately affects the Packer engine, and
 changes from the engine (such as progress indications)
 are immediately visible in the map.

 <p>The property map may contain pre-defined implementation
 specific and default properties.  Users are encouraged to
 read the information and fully understand the implications,
 before modifying pre-existing properties.
 <p>
 Implementation specific properties are prefixed with a
 package name associated with the implementor, beginning
 with <tt>com.</tt> or a similar prefix.
 All property names beginning with <tt>pack.</tt> and
 <tt>unpack.</tt> are reserved for use by this API.
 <p>
 Unknown properties may be ignored or rejected with an
 unspecified error, and invalid entries may cause an
 unspecified error to be thrown.

 @return A sorted association of option key strings to option values.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.jar.Pack200.Unpacker.unpack(InputStream in, JarOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Read a Pack200 archive, and write the encoded JAR to
 a JarOutputStream.
 The entire contents of the input stream will be read.
 It may be more efficient to read the Pack200 archive
 to a file and pass the File object, using the alternate
 method described below.
 <p>
 Closes its input but not its output.  (The output can accumulate more elements.)
 @param in an InputStream.
 @param out a JarOutputStream.
 @exception IOException if an error is encountered.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.jar.Pack200.Unpacker.unpack(File in, JarOutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Read a Pack200 archive, and write the encoded JAR to
 a JarOutputStream.
 <p>
 Does not close its output.  (The output can accumulate more elements.)
 @param in a File.
 @param out a JarOutputStream.
 @exception IOException if an error is encountered.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.jar.Pack200.Unpacker.addPropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Registers a listener for PropertyChange events on the properties map.
 This is typically used by applications to update a progress bar.

 @see #properties
 @see #PROGRESS
 @param listener  An object to be invoked when a property is changed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.jar.Pack200.Unpacker.removePropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Remove a listener for PropertyChange events, added by
 the {@link #addPropertyChangeListener}.

 @see #addPropertyChangeListener
 @param listener  The PropertyChange listener to be removed.

<!-- END DATA -->
