<!-- BEGIN KEY -->
public class java.util.jar.JarFile extends java.util.zip.ZipFile
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>JarFile</code> class is used to read the contents of a jar file
 from any file that can be opened with <code>java.io.RandomAccessFile</code>.
 It extends the class <code>java.util.zip.ZipFile</code> with support
 for reading an optional <code>Manifest</code> entry. The
 <code>Manifest</code> can be used to specify meta-information about the
 jar file and its entries.

 <p> Unless otherwise noted, passing a <tt>null</tt> argument to a constructor
 or method in this class will cause a {@link NullPointerException} to be
 thrown.

 @author  David Connelly
 @version 1.67, 04/07/06
 @see	    Manifest
 @see     java.util.zip.ZipFile
 @see     java.util.jar.JarEntry
 @since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final java.lang.String java.util.jar.JarFile.MANIFEST_NAME
<!-- END KEY -->
<!-- BEGIN DATA -->
 The JAR manifest file name.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.jar.JarFile(String name) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <code>JarFile</code> to read from the specified
 file <code>name</code>. The <code>JarFile</code> will be verified if
 it is signed.
 @param name the name of the jar file to be opened for reading
 @throws IOException if an I/O error has occurred
 @throws SecurityException if access to the file is denied
         by the SecurityManager

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.jar.JarFile(String name, boolean verify) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <code>JarFile</code> to read from the specified
 file <code>name</code>.
 @param name the name of the jar file to be opened for reading
 @param verify whether or not to verify the jar file if
 it is signed.
 @throws IOException if an I/O error has occurred
 @throws SecurityException if access to the file is denied
         by the SecurityManager 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.jar.JarFile(File file) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <code>JarFile</code> to read from the specified
 <code>File</code> object. The <code>JarFile</code> will be verified if
 it is signed.
 @param file the jar file to be opened for reading
 @throws IOException if an I/O error has occurred
 @throws SecurityException if access to the file is denied
         by the SecurityManager

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.jar.JarFile(File file, boolean verify) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <code>JarFile</code> to read from the specified
 <code>File</code> object.
 @param file the jar file to be opened for reading
 @param verify whether or not to verify the jar file if
 it is signed.
 @throws IOException if an I/O error has occurred
 @throws SecurityException if access to the file is denied
         by the SecurityManager.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.jar.JarFile(File file, boolean verify, int mode) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <code>JarFile</code> to read from the specified
 <code>File</code> object in the specified mode.  The mode argument
 must be either <tt>OPEN_READ</tt> or <tt>OPEN_READ | OPEN_DELETE</tt>.

 @param file the jar file to be opened for reading
 @param verify whether or not to verify the jar file if
 it is signed.
 @param mode the mode in which the file is to be opened
 @throws IOException if an I/O error has occurred
 @throws IllegalArgumentException
         if the <tt>mode</tt> argument is invalid
 @throws SecurityException if access to the file is denied
         by the SecurityManager
 @since 1.3

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.jar.Manifest java.util.jar.JarFile.getManifest() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the jar file manifest, or <code>null</code> if none.

 @return the jar file manifest, or <code>null</code> if none

 @throws IllegalStateException
         may be thrown if the jar file has been closed

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.jar.JarEntry java.util.jar.JarFile.getJarEntry(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>JarEntry</code> for the given entry name or
 <code>null</code> if not found.

 @param name the jar file entry name
 @return the <code>JarEntry</code> for the given entry name or
         <code>null</code> if not found.

 @throws IllegalStateException
         may be thrown if the jar file has been closed

 @see java.util.jar.JarEntry

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.zip.ZipEntry java.util.jar.JarFile.getEntry(String name)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the <code>ZipEntry</code> for the given entry name or
 <code>null</code> if not found.

 @param name the jar file entry name
 @return the <code>ZipEntry</code> for the given entry name or
         <code>null</code> if not found

 @throws IllegalStateException
         may be thrown if the jar file has been closed

 @see java.util.zip.ZipEntry

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Enumeration<java.util.jar.JarEntry> java.util.jar.JarFile.entries()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an enumeration of the zip file entries.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.io.InputStream java.util.jar.JarFile.getInputStream(ZipEntry ze) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an input stream for reading the contents of the specified
 zip file entry.
 @param ze the zip file entry
 @return an input stream for reading the contents of the specified
         zip file entry
 @throws ZipException if a zip file format error has occurred
 @throws IOException if an I/O error has occurred
 @throws SecurityException if any of the jar file entries
         are incorrectly signed.
 @throws IllegalStateException
         may be thrown if the jar file has been closed

<!-- END DATA -->
