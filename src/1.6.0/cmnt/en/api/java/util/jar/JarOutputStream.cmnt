<!-- BEGIN KEY -->
public class java.util.jar.JarOutputStream extends java.util.zip.ZipOutputStream
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>JarOutputStream</code> class is used to write the contents
 of a JAR file to any output stream. It extends the class
 <code>java.util.zip.ZipOutputStream</code> with support
 for writing an optional <code>Manifest</code> entry. The
 <code>Manifest</code> can be used to specify meta-information about
 the JAR file and its entries.

 @author  David Connelly
 @version 1.23, 11/17/05
 @see	    Manifest
 @see	    java.util.zip.ZipOutputStream
 @since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.jar.JarOutputStream(OutputStream out, Manifest man) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <code>JarOutputStream</code> with the specified
 <code>Manifest</code>. The manifest is written as the first
 entry to the output stream.

 @param out the actual output stream
 @param man the optional <code>Manifest</code>
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.jar.JarOutputStream(OutputStream out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <code>JarOutputStream</code> with no manifest.
 @param out the actual output stream
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.jar.JarOutputStream.putNextEntry(ZipEntry ze) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Begins writing a new JAR file entry and positions the stream
 to the start of the entry data. This method will also close
 any previous entry. The default compression method will be
 used if no compression method was specified for the entry.
 The current time will be used if the entry has no set modification
 time.

 @param ze the ZIP/JAR entry to be written
 @exception ZipException if a ZIP error has occurred
 @exception IOException if an I/O error has occurred

<!-- END DATA -->
