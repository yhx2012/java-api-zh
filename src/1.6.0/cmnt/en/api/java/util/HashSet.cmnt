<!-- BEGIN KEY -->
public class java.util.HashSet extends java.util.AbstractSet implements java.util.Set, java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class implements the <tt>Set</tt> interface, backed by a hash table
 (actually a <tt>HashMap</tt> instance).  It makes no guarantees as to the
 iteration order of the set; in particular, it does not guarantee that the
 order will remain constant over time.  This class permits the <tt>null</tt>
 element.

 <p>This class offers constant time performance for the basic operations
 (<tt>add</tt>, <tt>remove</tt>, <tt>contains</tt> and <tt>size</tt>),
 assuming the hash function disperses the elements properly among the
 buckets.  Iterating over this set requires time proportional to the sum of
 the <tt>HashSet</tt> instance's size (the number of elements) plus the
 "capacity" of the backing <tt>HashMap</tt> instance (the number of
 buckets).  Thus, it's very important not to set the initial capacity too
 high (or the load factor too low) if iteration performance is important.

 <p><strong>Note that this implementation is not synchronized.</strong>
 If multiple threads access a hash set concurrently, and at least one of
 the threads modifies the set, it <i>must</i> be synchronized externally.
 This is typically accomplished by synchronizing on some object that
 naturally encapsulates the set.

 If no such object exists, the set should be "wrapped" using the
 {@link Collections#synchronizedSet Collections.synchronizedSet}
 method.  This is best done at creation time, to prevent accidental
 unsynchronized access to the set:<pre>
   Set s = Collections.synchronizedSet(new HashSet(...));</pre>

 <p>The iterators returned by this class's <tt>iterator</tt> method are
 <i>fail-fast</i>: if the set is modified at any time after the iterator is
 created, in any way except through the iterator's own <tt>remove</tt>
 method, the Iterator throws a {@link ConcurrentModificationException}.
 Thus, in the face of concurrent modification, the iterator fails quickly
 and cleanly, rather than risking arbitrary, non-deterministic behavior at
 an undetermined time in the future.

 <p>Note that the fail-fast behavior of an iterator cannot be guaranteed
 as it is, generally speaking, impossible to make any hard guarantees in the
 presence of unsynchronized concurrent modification.  Fail-fast iterators
 throw <tt>ConcurrentModificationException</tt> on a best-effort basis.
 Therefore, it would be wrong to write a program that depended on this
 exception for its correctness: <i>the fail-fast behavior of iterators
 should be used only to detect bugs.</i>

 <p>This class is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.

 @param <E> the type of elements maintained by this set

 @author  Josh Bloch
 @author  Neal Gafter
 @version 1.37, 04/21/06
 @see	    Collection
 @see	    Set
 @see	    TreeSet
 @see	    HashMap
 @since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.HashSet()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new, empty set; the backing <tt>HashMap</tt> instance has
 default initial capacity (16) and load factor (0.75).

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.HashSet(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new set containing the elements in the specified
 collection.  The <tt>HashMap</tt> is created with default load factor
 (0.75) and an initial capacity sufficient to contain the elements in
 the specified collection.

 @param c the collection whose elements are to be placed into this set
 @throws NullPointerException if the specified collection is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.HashSet(int initialCapacity, float loadFactor)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new, empty set; the backing <tt>HashMap</tt> instance has
 the specified initial capacity and the specified load factor.

 @param      initialCapacity   the initial capacity of the hash map
 @param      loadFactor        the load factor of the hash map
 @throws     IllegalArgumentException if the initial capacity is less
             than zero, or if the load factor is nonpositive

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.HashSet(int initialCapacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a new, empty set; the backing <tt>HashMap</tt> instance has
 the specified initial capacity and default load factor (0.75).

 @param      initialCapacity   the initial capacity of the hash table
 @throws     IllegalArgumentException if the initial capacity is less
             than zero

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator<E> java.util.HashSet.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an iterator over the elements in this set.  The elements
 are returned in no particular order.

 @return an Iterator over the elements in this set
 @see ConcurrentModificationException

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.HashSet.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of elements in this set (its cardinality).

 @return the number of elements in this set (its cardinality)

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.HashSet.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this set contains no elements.

 @return <tt>true</tt> if this set contains no elements

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.HashSet.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this set contains the specified element.
 More formally, returns <tt>true</tt> if and only if this set
 contains an element <tt>e</tt> such that
 <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.

 @param o element whose presence in this set is to be tested
 @return <tt>true</tt> if this set contains the specified element

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.HashSet.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds the specified element to this set if it is not already present.
 More formally, adds the specified element <tt>e</tt> to this set if
 this set contains no element <tt>e2</tt> such that
 <tt>(e==null&nbsp;?&nbsp;e2==null&nbsp;:&nbsp;e.equals(e2))</tt>.
 If this set already contains the element, the call leaves the set
 unchanged and returns <tt>false</tt>.

 @param e element to be added to this set
 @return <tt>true</tt> if this set did not already contain the specified
 element

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.HashSet.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the specified element from this set if it is present.
 More formally, removes an element <tt>e</tt> such that
 <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>,
 if this set contains such an element.  Returns <tt>true</tt> if
 this set contained the element (or equivalently, if this set
 changed as a result of the call).  (This set will not contain the
 element once the call returns.)

 @param o object to be removed from this set, if present
 @return <tt>true</tt> if the set contained the specified element

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.HashSet.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all of the elements from this set.
 The set will be empty after this call returns.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.util.HashSet.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a shallow copy of this <tt>HashSet</tt> instance: the elements
 themselves are not cloned.

 @return a shallow copy of this set

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.HashSet.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reconstitute the <tt>HashSet</tt> instance from a stream (that is,
 deserialize it).

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.HashSet.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Save the state of this <tt>HashSet</tt> instance to a stream (that is,
 serialize it).

 @serialData The capacity of the backing <tt>HashMap</tt> instance
		   (int), and its load factor (float) are emitted, followed by
		   the size of the set (the number of elements it contains)
		   (int), followed by all of its elements (each an Object) in
             no particular order.

<!-- END DATA -->
