<!-- BEGIN KEY -->
public class java.util.ArrayList extends java.util.AbstractList implements java.util.List, java.util.RandomAccess, java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resizable-array implementation of the <tt>List</tt> interface.  Implements
 all optional list operations, and permits all elements, including
 <tt>null</tt>.  In addition to implementing the <tt>List</tt> interface,
 this class provides methods to manipulate the size of the array that is
 used internally to store the list.  (This class is roughly equivalent to
 <tt>Vector</tt>, except that it is unsynchronized.)<p>

 The <tt>size</tt>, <tt>isEmpty</tt>, <tt>get</tt>, <tt>set</tt>,
 <tt>iterator</tt>, and <tt>listIterator</tt> operations run in constant
 time.  The <tt>add</tt> operation runs in <i>amortized constant time</i>,
 that is, adding n elements requires O(n) time.  All of the other operations
 run in linear time (roughly speaking).  The constant factor is low compared
 to that for the <tt>LinkedList</tt> implementation.<p>

 Each <tt>ArrayList</tt> instance has a <i>capacity</i>.  The capacity is
 the size of the array used to store the elements in the list.  It is always
 at least as large as the list size.  As elements are added to an ArrayList,
 its capacity grows automatically.  The details of the growth policy are not
 specified beyond the fact that adding an element has constant amortized
 time cost.<p>

 An application can increase the capacity of an <tt>ArrayList</tt> instance
 before adding a large number of elements using the <tt>ensureCapacity</tt>
 operation.  This may reduce the amount of incremental reallocation.

 <p><strong>Note that this implementation is not synchronized.</strong>
 If multiple threads access an <tt>ArrayList</tt> instance concurrently,
 and at least one of the threads modifies the list structurally, it
 <i>must</i> be synchronized externally.  (A structural modification is
 any operation that adds or deletes one or more elements, or explicitly
 resizes the backing array; merely setting the value of an element is not
 a structural modification.)  This is typically accomplished by
 synchronizing on some object that naturally encapsulates the list.

 If no such object exists, the list should be "wrapped" using the
 {@link Collections#synchronizedList Collections.synchronizedList}
 method.  This is best done at creation time, to prevent accidental
 unsynchronized access to the list:<pre>
   List list = Collections.synchronizedList(new ArrayList(...));</pre>

 <p>The iterators returned by this class's <tt>iterator</tt> and
 <tt>listIterator</tt> methods are <i>fail-fast</i>: if the list is
 structurally modified at any time after the iterator is created, in any way
 except through the iterator's own <tt>remove</tt> or <tt>add</tt> methods,
 the iterator will throw a {@link ConcurrentModificationException}.  Thus, in
 the face of concurrent modification, the iterator fails quickly and cleanly,
 rather than risking arbitrary, non-deterministic behavior at an undetermined
 time in the future.<p>

 Note that the fail-fast behavior of an iterator cannot be guaranteed
 as it is, generally speaking, impossible to make any hard guarantees in the
 presence of unsynchronized concurrent modification.  Fail-fast iterators
 throw <tt>ConcurrentModificationException</tt> on a best-effort basis.
 Therefore, it would be wrong to write a program that depended on this
 exception for its correctness: <i>the fail-fast behavior of iterators
 should be used only to detect bugs.</i><p>

 This class is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.

 @author  Josh Bloch
 @author  Neal Gafter
 @version 1.56, 04/21/06
 @see	    Collection
 @see	    List
 @see	    LinkedList
 @see	    Vector
 @since   1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.util.ArrayList.size
<!-- END KEY -->
<!-- BEGIN DATA -->
 The size of the ArrayList (the number of elements it contains).

 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.ArrayList(int initialCapacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an empty list with the specified initial capacity.

 @param   initialCapacity   the initial capacity of the list
 @exception IllegalArgumentException if the specified initial capacity
            is negative

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.ArrayList()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an empty list with an initial capacity of ten.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.ArrayList(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a list containing the elements of the specified
 collection, in the order they are returned by the collection's
 iterator.

 @param c the collection whose elements are to be placed into this list
 @throws NullPointerException if the specified collection is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.ArrayList.trimToSize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Trims the capacity of this <tt>ArrayList</tt> instance to be the
 list's current size.  An application can use this operation to minimize
 the storage of an <tt>ArrayList</tt> instance.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.ArrayList.ensureCapacity(int minCapacity)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Increases the capacity of this <tt>ArrayList</tt> instance, if
 necessary, to ensure that it can hold at least the number of elements
 specified by the minimum capacity argument.

 @param   minCapacity   the desired minimum capacity

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.ArrayList.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of elements in this list.

 @return the number of elements in this list

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.ArrayList.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this list contains no elements.

 @return <tt>true</tt> if this list contains no elements

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.ArrayList.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns <tt>true</tt> if this list contains the specified element.
 More formally, returns <tt>true</tt> if and only if this list contains
 at least one element <tt>e</tt> such that
 <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.

 @param o element whose presence in this list is to be tested
 @return <tt>true</tt> if this list contains the specified element

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.ArrayList.indexOf(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the index of the first occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
 More formally, returns the lowest index <tt>i</tt> such that
 <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,
 or -1 if there is no such index.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.ArrayList.lastIndexOf(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the index of the last occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
 More formally, returns the highest index <tt>i</tt> such that
 <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,
 or -1 if there is no such index.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.util.ArrayList.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a shallow copy of this <tt>ArrayList</tt> instance.  (The
 elements themselves are not copied.)

 @return a clone of this <tt>ArrayList</tt> instance

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.util.ArrayList.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array containing all of the elements in this list
 in proper sequence (from first to last element).

 <p>The returned array will be "safe" in that no references to it are
 maintained by this list.  (In other words, this method must allocate
 a new array).  The caller is thus free to modify the returned array.

 <p>This method acts as bridge between array-based and collection-based
 APIs.

 @return an array containing all of the elements in this list in
         proper sequence

<!-- END DATA -->
<!-- BEGIN KEY -->
public T[] java.util.ArrayList.toArray(T[] a)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array containing all of the elements in this list in proper
 sequence (from first to last element); the runtime type of the returned
 array is that of the specified array.  If the list fits in the
 specified array, it is returned therein.  Otherwise, a new array is
 allocated with the runtime type of the specified array and the size of
 this list.

 <p>If the list fits in the specified array with room to spare
 (i.e., the array has more elements than the list), the element in
 the array immediately following the end of the collection is set to
 <tt>null</tt>.  (This is useful in determining the length of the
 list <i>only</i> if the caller knows that the list does not contain
 any null elements.)

 @param a the array into which the elements of the list are to
          be stored, if it is big enough; otherwise, a new array of the
          same runtime type is allocated for this purpose.
 @return an array containing the elements of the list
 @throws ArrayStoreException if the runtime type of the specified array
         is not a supertype of the runtime type of every element in
         this list
 @throws NullPointerException if the specified array is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.ArrayList.get(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the element at the specified position in this list.

 @param  index index of the element to return
 @return the element at the specified position in this list
 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.ArrayList.set(int index, E element)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Replaces the element at the specified position in this list with
 the specified element.

 @param index index of the element to replace
 @param element element to be stored at the specified position
 @return the element previously at the specified position
 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.ArrayList.add(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends the specified element to the end of this list.

 @param e element to be appended to this list
 @return <tt>true</tt> (as specified by {@link Collection#add})

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.ArrayList.add(int index, E element)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts the specified element at the specified position in this
 list. Shifts the element currently at that position (if any) and
 any subsequent elements to the right (adds one to their indices).

 @param index index at which the specified element is to be inserted
 @param element element to be inserted
 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public E java.util.ArrayList.remove(int index)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the element at the specified position in this list.
 Shifts any subsequent elements to the left (subtracts one from their
 indices).

 @param index the index of the element to be removed
 @return the element that was removed from the list
 @throws IndexOutOfBoundsException {@inheritDoc}

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.ArrayList.remove(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes the first occurrence of the specified element from this list,
 if it is present.  If the list does not contain the element, it is
 unchanged.  More formally, removes the element with the lowest index
 <tt>i</tt> such that
 <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>
 (if such an element exists).  Returns <tt>true</tt> if this list
 contained the specified element (or equivalently, if this list
 changed as a result of the call).

 @param o element to be removed from this list, if present
 @return <tt>true</tt> if this list contained the specified element

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.ArrayList.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes all of the elements from this list.  The list will
 be empty after this call returns.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.ArrayList.addAll(java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends all of the elements in the specified collection to the end of
 this list, in the order that they are returned by the
 specified collection's Iterator.  The behavior of this operation is
 undefined if the specified collection is modified while the operation
 is in progress.  (This implies that the behavior of this call is
 undefined if the specified collection is this list, and this
 list is nonempty.)

 @param c collection containing elements to be added to this list
 @return <tt>true</tt> if this list changed as a result of the call
 @throws NullPointerException if the specified collection is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.ArrayList.addAll(int index, java.util.Collection<? extends E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Inserts all of the elements in the specified collection into this
 list, starting at the specified position.  Shifts the element
 currently at that position (if any) and any subsequent elements to
 the right (increases their indices).  The new elements will appear
 in the list in the order that they are returned by the
 specified collection's iterator.

 @param index index at which to insert the first element from the
              specified collection
 @param c collection containing elements to be added to this list
 @return <tt>true</tt> if this list changed as a result of the call
 @throws IndexOutOfBoundsException {@inheritDoc}
 @throws NullPointerException if the specified collection is null

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.util.ArrayList.removeRange(int fromIndex, int toIndex)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes from this list all of the elements whose index is between
 <tt>fromIndex</tt>, inclusive, and <tt>toIndex</tt>, exclusive.
 Shifts any succeeding elements to the left (reduces their index).
 This call shortens the list by <tt>(toIndex - fromIndex)</tt> elements.
 (If <tt>toIndex==fromIndex</tt>, this operation has no effect.)

 @param fromIndex index of first element to be removed
 @param toIndex index after last element to be removed
 @throws IndexOutOfBoundsException if fromIndex or toIndex out of
              range (fromIndex &lt; 0 || fromIndex &gt;= size() || toIndex
              &gt; size() || toIndex &lt; fromIndex)

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.ArrayList.readObject(ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reconstitute the <tt>ArrayList</tt> instance from a stream (that is,
 deserialize it).

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.util.ArrayList.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Save the state of the <tt>ArrayList</tt> instance to a stream (that
 is, serialize it).

 @serialData The length of the array backing the <tt>ArrayList</tt>
             instance is emitted (int), followed by all of its elements
             (each an <tt>Object</tt>) in the proper order.

<!-- END DATA -->
