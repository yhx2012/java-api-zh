<!-- BEGIN KEY -->
public abstract class java.util.EnumSet extends java.util.AbstractSet implements java.lang.Cloneable, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A specialized {@link Set} implementation for use with enum types.  All of
 the elements in an enum set must come from a single enum type that is
 specified, explicitly or implicitly, when the set is created.  Enum sets
 are represented internally as bit vectors.  This representation is
 extremely compact and efficient. The space and time performance of this
 class should be good enough to allow its use as a high-quality, typesafe
 alternative to traditional <tt>int</tt>-based "bit flags."  Even bulk
 operations (such as <tt>containsAll</tt> and <tt>retainAll</tt>) should
 run very quickly if their argument is also an enum set.

 <p>The iterator returned by the <tt>iterator</tt> method traverses the
 elements in their <i>natural order</i> (the order in which the enum
 constants are declared).  The returned iterator is <i>weakly
 consistent</i>: it will never throw {@link ConcurrentModificationException}
 and it may or may not show the effects of any modifications to the set that
 occur while the iteration is in progress.

 <p>Null elements are not permitted.  Attempts to insert a null element
 will throw {@link NullPointerException}.  Attempts to test for the
 presence of a null element or to remove one will, however, function
 properly.

 <P>Like most collection implementations, <tt>EnumSet</tt> is not
 synchronized.  If multiple threads access an enum set concurrently, and at
 least one of the threads modifies the set, it should be synchronized
 externally.  This is typically accomplished by synchronizing on some
 object that naturally encapsulates the enum set.  If no such object exists,
 the set should be "wrapped" using the {@link Collections#synchronizedSet}
 method.  This is best done at creation time, to prevent accidental
 unsynchronized access:

 <pre>
 Set&lt;MyEnum&gt; s = Collections.synchronizedSet(EnumSet.noneOf(MyEnum.class));
 </pre>

 <p>Implementation note: All basic operations execute in constant time.
 They are likely (though not guaranteed) to be much faster than their
 {@link HashSet} counterparts.  Even bulk operations execute in
 constant time if their argument is also an enum set.

 <p>This class is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.

 @author Josh Bloch
 @version 1.15, 07/10/06
 @since 1.5
 @see EnumMap
 @serial exclude

<!-- END DATA -->
<!-- BEGIN KEY -->
final java.lang.Class<E> java.util.EnumSet.elementType
<!-- END KEY -->
<!-- BEGIN DATA -->
 The class of all the elements of this set.

<!-- END DATA -->
<!-- BEGIN KEY -->
final java.lang.Enum[] java.util.EnumSet.universe
<!-- END KEY -->
<!-- BEGIN DATA -->
 All of the values comprising T.  (Cached for performance.)

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.noneOf(java.lang.Class<E> elementType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an empty enum set with the specified element type.

 @param elementType the class object of the element type for this enum
     set
 @throws NullPointerException if <tt>elementType</tt> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.allOf(java.lang.Class<E> elementType)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an enum set containing all of the elements in the specified
 element type.

 @param elementType the class object of the element type for this enum
     set
 @throws NullPointerException if <tt>elementType</tt> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.copyOf(java.util.EnumSet<E> s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an enum set with the same element type as the specified enum
 set, initially containing the same elements (if any).

 @param s the enum set from which to initialize this enum set
 @throws NullPointerException if <tt>s</tt> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.copyOf(java.util.Collection<E> c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an enum set initialized from the specified collection.  If
 the specified collection is an <tt>EnumSet</tt> instance, this static
 factory method behaves identically to {@link #copyOf(EnumSet)}.
 Otherwise, the specified collection must contain at least one element
 (in order to determine the new enum set's element type).

 @param c the collection from which to initialize this enum set
 @throws IllegalArgumentException if <tt>c</tt> is not an
     <tt>EnumSet</tt> instance and contains no elements
 @throws NullPointerException if <tt>c</tt> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.complementOf(java.util.EnumSet<E> s)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an enum set with the same element type as the specified enum
 set, initially containing all the elements of this type that are
 <i>not</i> contained in the specified set.

 @param s the enum set from whose complement to initialize this enum set
 @throws NullPointerException if <tt>s</tt> is null

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.of(E e)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an enum set initially containing the specified element.

 Overloadings of this method exist to initialize an enum set with
 one through five elements.  A sixth overloading is provided that
 uses the varargs feature.  This overloading may be used to create
 an enum set initially containing an arbitrary number of elements, but
 is likely to run slower than the overloadings that do not use varargs.

 @param e the element that this set is to contain initially
 @throws NullPointerException if <tt>e</tt> is null
 @return an enum set initially containing the specified element

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.of(E e1, E e2)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an enum set initially containing the specified elements.

 Overloadings of this method exist to initialize an enum set with
 one through five elements.  A sixth overloading is provided that
 uses the varargs feature.  This overloading may be used to create
 an enum set initially containing an arbitrary number of elements, but
 is likely to run slower than the overloadings that do not use varargs.

 @param e1 an element that this set is to contain initially
 @param e2 another element that this set is to contain initially
 @throws NullPointerException if any parameters are null
 @return an enum set initially containing the specified elements

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.of(E e1, E e2, E e3)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an enum set initially containing the specified elements.

 Overloadings of this method exist to initialize an enum set with
 one through five elements.  A sixth overloading is provided that
 uses the varargs feature.  This overloading may be used to create
 an enum set initially containing an arbitrary number of elements, but
 is likely to run slower than the overloadings that do not use varargs.

 @param e1 an element that this set is to contain initially
 @param e2 another element that this set is to contain initially
 @param e3 another element that this set is to contain initially
 @throws NullPointerException if any parameters are null
 @return an enum set initially containing the specified elements

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.of(E e1, E e2, E e3, E e4)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an enum set initially containing the specified elements.

 Overloadings of this method exist to initialize an enum set with
 one through five elements.  A sixth overloading is provided that
 uses the varargs feature.  This overloading may be used to create
 an enum set initially containing an arbitrary number of elements, but
 is likely to run slower than the overloadings that do not use varargs.

 @param e1 an element that this set is to contain initially
 @param e2 another element that this set is to contain initially
 @param e3 another element that this set is to contain initially
 @param e4 another element that this set is to contain initially
 @throws NullPointerException if any parameters are null
 @return an enum set initially containing the specified elements

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.of(E e1, E e2, E e3, E e4, E e5)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an enum set initially containing the specified elements.

 Overloadings of this method exist to initialize an enum set with
 one through five elements.  A sixth overloading is provided that
 uses the varargs feature.  This overloading may be used to create
 an enum set initially containing an arbitrary number of elements, but
 is likely to run slower than the overloadings that do not use varargs.

 @param e1 an element that this set is to contain initially
 @param e2 another element that this set is to contain initially
 @param e3 another element that this set is to contain initially
 @param e4 another element that this set is to contain initially
 @param e5 another element that this set is to contain initially
 @throws NullPointerException if any parameters are null
 @return an enum set initially containing the specified elements

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.of(E first, E[] rest)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an enum set initially containing the specified elements.
 This factory, whose parameter list uses the varargs feature, may
 be used to create an enum set initially containing an arbitrary
 number of elements, but it is likely to run slower than the overloadings
 that do not use varargs.

 @param first an element that the set is to contain initially
 @param rest the remaining elements the set is to contain initially
 @throws NullPointerException if any of the specified elements are null,
     or if <tt>rest</tt> is null
 @return an enum set initially containing the specified elements

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.EnumSet<E> java.util.EnumSet.range(E from, E to)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an enum set initially containing all of the elements in the
 range defined by the two specified endpoints.  The returned set will
 contain the endpoints themselves, which may be identical but must not
 be out of order.

 @param from the first element in the range
 @param to the last element in the range
 @throws NullPointerException if <tt>first</tt> or <tt>last</tt> are
     null
 @throws IllegalArgumentException if <tt>first.compareTo(last) &gt; 0</tt>
 @return an enum set initially containing all of the elements in the
     range defined by the two specified endpoints

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.EnumSet<E> java.util.EnumSet.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a copy of this set.

 @return a copy of this set

<!-- END DATA -->
