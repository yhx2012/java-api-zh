<!-- BEGIN KEY -->
public abstract class java.util.TimeZone extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable
<!-- END KEY -->
<!-- BEGIN DATA -->
 <code>TimeZone</code> represents a time zone offset, and also figures out daylight
 savings.

 <p>
 Typically, you get a <code>TimeZone</code> using <code>getDefault</code>
 which creates a <code>TimeZone</code> based on the time zone where the program
 is running. For example, for a program running in Japan, <code>getDefault</code>
 creates a <code>TimeZone</code> object based on Japanese Standard Time.

 <p>
 You can also get a <code>TimeZone</code> using <code>getTimeZone</code>
 along with a time zone ID. For instance, the time zone ID for the
 U.S. Pacific Time zone is "America/Los_Angeles". So, you can get a
 U.S. Pacific Time <code>TimeZone</code> object with:
 <blockquote><pre>
 TimeZone tz = TimeZone.getTimeZone("America/Los_Angeles");
 </pre></blockquote>
 You can use the <code>getAvailableIDs</code> method to iterate through
 all the supported time zone IDs. You can then choose a
 supported ID to get a <code>TimeZone</code>.
 If the time zone you want is not represented by one of the
 supported IDs, then a custom time zone ID can be specified to
 produce a TimeZone. The syntax of a custom time zone ID is:

 <blockquote><pre>
 <a name="CustomID"><i>CustomID:</i></a>
         <code>GMT</code> <i>Sign</i> <i>Hours</i> <code>:</code> <i>Minutes</i>
         <code>GMT</code> <i>Sign</i> <i>Hours</i> <i>Minutes</i>
         <code>GMT</code> <i>Sign</i> <i>Hours</i>
 <i>Sign:</i> one of
         <code>+ -</code>
 <i>Hours:</i>
         <i>Digit</i>
         <i>Digit</i> <i>Digit</i>
 <i>Minutes:</i>
         <i>Digit</i> <i>Digit</i>
 <i>Digit:</i> one of
         <code>0 1 2 3 4 5 6 7 8 9</code>
 </pre></blockquote>

 <i>Hours</i> must be between 0 to 23 and <i>Minutes</i> must be
 between 00 to 59.  For example, "GMT+10" and "GMT+0010" mean ten
 hours and ten minutes ahead of GMT, respectively.
 <p>
 The format is locale independent and digits must be taken from the
 Basic Latin block of the Unicode standard. No daylight saving time
 transition schedule can be specified with a custom time zone ID. If
 the specified string doesn't match the syntax, <code>"GMT"</code>
 is used.
 <p>
 When creating a <code>TimeZone</code>, the specified custom time
 zone ID is normalized in the following syntax:
 <blockquote><pre>
 <a name="NormalizedCustomID"><i>NormalizedCustomID:</i></a>
         <code>GMT</code> <i>Sign</i> <i>TwoDigitHours</i> <code>:</code> <i>Minutes</i>
 <i>Sign:</i> one of
         <code>+ -</code>
 <i>TwoDigitHours:</i>
         <i>Digit</i> <i>Digit</i>
 <i>Minutes:</i>
         <i>Digit</i> <i>Digit</i>
 <i>Digit:</i> one of
         <code>0 1 2 3 4 5 6 7 8 9</code>
 </pre></blockquote>
 For example, TimeZone.getTimeZone("GMT-8").getID() returns "GMT-08:00".

 <h4>Three-letter time zone IDs</h4>
 
 For compatibility with JDK 1.1.x, some other three-letter time zone IDs
 (such as "PST", "CTT", "AST") are also supported. However, <strong>their
 use is deprecated</strong> because the same abbreviation is often used
 for multiple time zones (for example, "CST" could be U.S. "Central Standard
 Time" and "China Standard Time"), and the Java platform can then only
 recognize one of them.


 @see          Calendar
 @see          GregorianCalendar
 @see          SimpleTimeZone
 @version      1.75 11/30/05
 @author       Mark Davis, David Goldsmith, Chen-Lieh Huang, Alan Liu
 @since        JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.TimeZone.SHORT
<!-- END KEY -->
<!-- BEGIN DATA -->
 A style specifier for <code>getDisplayName()</code> indicating
 a short name, such as "PST."
 @see #LONG
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public static final int java.util.TimeZone.LONG
<!-- END KEY -->
<!-- BEGIN DATA -->
 A style specifier for <code>getDisplayName()</code> indicating
 a long name, such as "Pacific Standard Time."
 @see #SHORT
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.String java.util.TimeZone.ID
<!-- END KEY -->
<!-- BEGIN DATA -->
 The string identifier of this <code>TimeZone</code>.  This is a
 programmatic identifier used internally to look up <code>TimeZone</code>
 objects from the system table and also to map them to their localized
 display names.  <code>ID</code> values are unique in the system
 table but may not be for dynamically created zones.
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.TimeZone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sole constructor.  (For invocation by subclass constructors, typically
 implicit.)

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.util.TimeZone.getOffset(int era, int year, int month, int day, int dayOfWeek, int milliseconds)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the time zone offset, for current date, modified in case of
 daylight savings. This is the offset to add to UTC to get local time.
 <p>
 This method returns a historically correct offset if an
 underlying <code>TimeZone</code> implementation subclass
 supports historical Daylight Saving Time schedule and GMT
 offset changes.

 @param era the era of the given date.
 @param year the year in the given date.
 @param month the month in the given date.
 Month is 0-based. e.g., 0 for January.
 @param day the day-in-month of the given date.
 @param dayOfWeek the day-of-week of the given date.
 @param milliseconds the milliseconds in day in <em>standard</em>
 local time.

 @return the offset in milliseconds to add to GMT to get local time.

 @see Calendar#ZONE_OFFSET
 @see Calendar#DST_OFFSET

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.TimeZone.getOffset(long date)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the offset of this time zone from UTC at the specified
 date. If Daylight Saving Time is in effect at the specified
 date, the offset value is adjusted with the amount of daylight
 saving.
 <p>
 This method returns a historically correct offset value if an
 underlying TimeZone implementation subclass supports historical
 Daylight Saving Time schedule and GMT offset changes.

 @param date the date represented in milliseconds since January 1, 1970 00:00:00 GMT
 @return the amount of time in milliseconds to add to UTC to get local time.

 @see Calendar#ZONE_OFFSET
 @see Calendar#DST_OFFSET
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.util.TimeZone.setRawOffset(int offsetMillis)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the base time zone offset to GMT.
 This is the offset to add to UTC to get local time.
 <p>
 If an underlying <code>TimeZone</code> implementation subclass
 supports historical GMT offset changes, the specified GMT
 offset is set as the latest GMT offset and the difference from
 the known latest GMT offset value is used to adjust all
 historical GMT offset values.

 @param offsetMillis the given base time zone offset to GMT.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.util.TimeZone.getRawOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the amount of time in milliseconds to add to UTC to get
 standard time in this time zone. Because this value is not
 affected by daylight saving time, it is called <I>raw
 offset</I>.
 <p>
 If an underlying <code>TimeZone</code> implementation subclass
 supports historical GMT offset changes, the method returns the
 raw offset value of the current date. In Honolulu, for example,
 its raw offset changed from GMT-10:30 to GMT-10:00 in 1947, and
 this method always returns -36000000 milliseconds (i.e., -10
 hours).

 @return the amount of raw offset time in milliseconds to add to UTC.
 @see Calendar#ZONE_OFFSET

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.TimeZone.getID()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the ID of this time zone.
 @return the ID of this time zone.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.util.TimeZone.setID(String ID)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the time zone ID. This does not change any other data in
 the time zone object.
 @param ID the new time zone ID.

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.util.TimeZone.getDisplayName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a name of this time zone suitable for presentation to the user
 in the default locale.
 This method returns the long name, not including daylight savings.
 If the display name is not available for the locale,
 then this method returns a string in the 
 <a href="#NormalizedCustomID">normalized custom ID format</a>.
 @return the human-readable name of this time zone in the default locale.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.util.TimeZone.getDisplayName(Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a name of this time zone suitable for presentation to the user
 in the specified locale.
 This method returns the long name, not including daylight savings.
 If the display name is not available for the locale,
 then this method returns a string in the 
 <a href="#NormalizedCustomID">normalized custom ID format</a>.
 @param locale the locale in which to supply the display name.
 @return the human-readable name of this time zone in the given locale.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public final java.lang.String java.util.TimeZone.getDisplayName(boolean daylight, int style)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a name of this time zone suitable for presentation to the user
 in the default locale.
 If the display name is not available for the locale, then this
 method returns a string in the 
 <a href="#NormalizedCustomID">normalized custom ID format</a>.
 @param daylight if true, return the daylight savings name.
 @param style either <code>LONG</code> or <code>SHORT</code>
 @return the human-readable name of this time zone in the default locale.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.util.TimeZone.getDisplayName(boolean daylight, int style, Locale locale)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a name of this time zone suitable for presentation to the user
 in the specified locale.
 If the display name is not available for the locale,
 then this method returns a string in the 
 <a href="#NormalizedCustomID">normalized custom ID format</a>.
 @param daylight if true, return the daylight savings name.
 @param style either <code>LONG</code> or <code>SHORT</code>
 @param locale the locale in which to supply the display name.
 @return the human-readable name of this time zone in the given locale.
 @exception IllegalArgumentException style is invalid.
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.util.TimeZone.getDSTSavings()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the amount of time to be added to local standard time
 to get local wall clock time.
 <p>
 The default implementation always returns 3600000 milliseconds
 (i.e., one hour) if this time zone observes Daylight Saving
 Time. Otherwise, 0 (zero) is returned.
 <p>
 If an underlying TimeZone implementation subclass supports
 historical Daylight Saving Time changes, this method returns
 the known latest daylight saving value.

 @return the amount of saving time in milliseconds
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.util.TimeZone.useDaylightTime()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Queries if this time zone uses daylight savings time.
 <p>
 If an underlying <code>TimeZone</code> implementation subclass
 supports historical Daylight Saving Time schedule changes, the
 method refers to the latest Daylight Saving Time schedule
 information.

 @return true if this time zone uses daylight savings time,
 false, otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.util.TimeZone.inDaylightTime(Date date)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Queries if the given date is in daylight savings time in
 this time zone.
 @param date the given Date.
 @return true if the given date is in daylight savings time,
 false, otherwise.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.util.TimeZone java.util.TimeZone.getTimeZone(String ID)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <code>TimeZone</code> for the given ID.

 @param ID the ID for a <code>TimeZone</code>, either an abbreviation
 such as "PST", a full name such as "America/Los_Angeles", or a custom
 ID such as "GMT-8:00". Note that the support of abbreviations is
 for JDK 1.1.x compatibility only and full names should be used.

 @return the specified <code>TimeZone</code>, or the GMT zone if the given ID
 cannot be understood.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.lang.String[] java.util.TimeZone.getAvailableIDs(int rawOffset)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the available IDs according to the given time zone offset in milliseconds.

 @param rawOffset the given time zone GMT offset in milliseconds.
 @return an array of IDs, where the time zone for that ID has
 the specified GMT offset. For example, "America/Phoenix" and "America/Denver"
 both have GMT-07:00, but differ in daylight savings behavior.
 @see #getRawOffset()

<!-- END DATA -->
<!-- BEGIN KEY -->
public static synchronized java.lang.String[] java.util.TimeZone.getAvailableIDs()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets all the available IDs supported.
 @return an array of IDs.

<!-- END DATA -->
<!-- BEGIN KEY -->
public static java.util.TimeZone java.util.TimeZone.getDefault()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the default <code>TimeZone</code> for this host.
 The source of the default <code>TimeZone</code> 
 may vary with implementation.
 @return a default <code>TimeZone</code>.
 @see #setDefault

<!-- END DATA -->
<!-- BEGIN KEY -->
public static void java.util.TimeZone.setDefault(TimeZone zone)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>TimeZone</code> that is
 returned by the <code>getDefault</code> method.  If <code>zone</code>
 is null, reset the default to the value it had originally when the
 VM first started.
 @param zone the new default time zone
 @see #getDefault

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.util.TimeZone.hasSameRules(TimeZone other)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns true if this zone has the same rule and offset as another zone.
 That is, if this zone differs only in ID, if at all.  Returns false
 if the other zone is null.
 @param other the <code>TimeZone</code> object to be compared with
 @return true if the other zone is not null and is the same as this one,
 with the possible exception of the ID
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.util.TimeZone.clone()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a copy of this <code>TimeZone</code>.

 @return a clone of this <code>TimeZone</code>

<!-- END DATA -->
