<!-- BEGIN KEY -->
public abstract class java.util.EventListenerProxy extends java.lang.Object implements java.util.EventListener
<!-- END KEY -->
<!-- BEGIN DATA -->
 An abstract wrapper class for an EventListener class which associates a set
 of additional parameters with the listener. Subclasses must provide the
 storage and accessor methods for the additional arguments or parameters.
 
 Subclasses of EventListenerProxy may be returned by getListeners() methods
 as a way of associating named properties with their listeners.
 
 For example, a Bean which supports named properties would have a two
 argument method signature for adding a PropertyChangeListener for a
 property:
 
     public void addPropertyChangeListener(String propertyName,
                                  PropertyChangeListener listener);
 
 If the Bean also implemented the zero argument get listener method:
 
     public PropertyChangeListener[] getPropertyChangeListeners();

 then the array may contain inner PropertyChangeListeners which are also 
 PropertyChangeListenerProxy objects.
 
 If the calling method is interested in retrieving the named property then it
 would have to test the element to see if it is a proxy class.
 
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.EventListenerProxy(EventListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @param listener The listener object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.EventListener java.util.EventListenerProxy.getListener()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @return The listener associated with this proxy.

<!-- END DATA -->
