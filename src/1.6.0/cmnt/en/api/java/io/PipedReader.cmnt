<!-- BEGIN KEY -->
public class java.io.PipedReader extends java.io.Reader
<!-- END KEY -->
<!-- BEGIN DATA -->
 Piped character-input streams.

 @version 	1.19, 06/06/28
 @author	Mark Reinhold
 @since	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.PipedReader(PipedWriter src) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>PipedReader</code> so
 that it is connected to the piped writer
 <code>src</code>. Data written to <code>src</code> 
 will then be available as input from this stream.

 @param      src   the stream to connect to.
 @exception  IOException  if an I/O error occurs.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.PipedReader(PipedWriter src, int pipeSize) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>PipedReader</code> so that it is connected
 to the piped writer <code>src</code> and uses the specified
 pipe size for the pipe's buffer. Data written to <code>src</code> 
 will then be  available as input from this stream.

 @param      src       the stream to connect to.
 @param      pipeSize  the size of the pipe's buffer.
 @exception  IOException  if an I/O error occurs.
 @exception  IllegalArgumentException if <code>pipeSize <= 0</code>.
 @since	   1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.PipedReader()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>PipedReader</code> so
 that it is not yet {@linkplain #connect(java.io.PipedWriter)
 connected}. It must be {@linkplain java.io.PipedWriter#connect(
 java.io.PipedReader) connected} to a <code>PipedWriter</code>
 before being used.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.PipedReader(int pipeSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a <code>PipedReader</code> so that it is not yet 
 {@link #connect(java.io.PipedWriter) connected} and uses
 the specified pipe size for the pipe's buffer.
 It must be  {@linkplain java.io.PipedWriter#connect(
 java.io.PipedReader) connected} to a <code>PipedWriter</code>
 before being used.

 @param   pipeSize the size of the pipe's buffer.
 @exception  IllegalArgumentException if <code>pipeSize <= 0</code>.
 @since	   1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.PipedReader.connect(PipedWriter src) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Causes this piped reader to be connected
 to the piped  writer <code>src</code>.
 If this object is already connected to some
 other piped writer, an <code>IOException</code>
 is thrown.
 <p>
 If <code>src</code> is an
 unconnected piped writer and <code>snk</code>
 is an unconnected piped reader, they
 may be connected by either the call:
 <p>
 <pre><code>snk.connect(src)</code> </pre> 
 <p>
 or the call:
 <p>
 <pre><code>src.connect(snk)</code> </pre> 
 <p>
 The two
 calls have the same effect.

 @param      src   The piped writer to connect to.
 @exception  IOException  if an I/O error occurs.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.io.PipedReader.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads the next character of data from this piped stream.
 If no character is available because the end of the stream 
 has been reached, the value <code>-1</code> is returned. 
 This method blocks until input data is available, the end of
 the stream is detected, or an exception is thrown. 

 @return     the next character of data, or <code>-1</code> if the end of the
             stream is reached.
 @exception  IOException  if the pipe is
		<a href=PipedInputStream.html#BROKEN> <code>broken</code></a>,
		{@link #connect(java.io.PipedWriter) unconnected}, closed,
		or an I/O error occurs.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized int java.io.PipedReader.read(char[] cbuf, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads up to <code>len</code> characters of data from this piped
 stream into an array of characters. Less than <code>len</code> characters
 will be read if the end of the data stream is reached or if
 <code>len</code> exceeds the pipe's buffer size. This method 
 blocks until at least one character of input is available. 

 @param      cbuf     the buffer into which the data is read.
 @param      off   the start offset of the data.
 @param      len   the maximum number of characters read.
 @return     the total number of characters read into the buffer, or
             <code>-1</code> if there is no more data because the end of
             the stream has been reached.
 @exception  IOException  if the pipe is
			<a href=PipedInputStream.html#BROKEN> <code>broken</code></a>,
          	{@link #connect(java.io.PipedWriter) unconnected}, closed,
			or an I/O error occurs.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.io.PipedReader.ready() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tell whether this stream is ready to be read.  A piped character
 stream is ready if the circular buffer is not empty.

 @exception  IOException  if the pipe is
			<a href=PipedInputStream.html#BROKEN> <code>broken</code></a>,
			{@link #connect(java.io.PipedWriter) unconnected}, or closed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.PipedReader.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Closes this piped stream and releases any system resources 
 associated with the stream. 

 @exception  IOException  if an I/O error occurs.

<!-- END DATA -->
