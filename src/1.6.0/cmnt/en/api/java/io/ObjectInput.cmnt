<!-- BEGIN KEY -->
public interface java.io.ObjectInput extends java.io.DataInput
<!-- END KEY -->
<!-- BEGIN DATA -->
 ObjectInput extends the DataInput interface to include the reading of
 objects. DataInput includes methods for the input of primitive types,
 ObjectInput extends that interface to include objects, arrays, and Strings.

 @author  unascribed
 @version 1.20, 11/17/05
 @see java.io.InputStream
 @see java.io.ObjectOutputStream
 @see java.io.ObjectInputStream
 @since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.io.ObjectInput.readObject() throws java.lang.ClassNotFoundException, java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Read and return an object. The class that implements this interface
 defines where the object is "read" from.

 @return the object read from the stream
 @exception java.lang.ClassNotFoundException If the class of a serialized
      object cannot be found.
 @exception IOException If any of the usual Input/Output
 related exceptions occur.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.ObjectInput.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads a byte of data. This method will block if no input is
 available.
 @return 	the byte read, or -1 if the end of the
		stream is reached.
 @exception IOException If an I/O error has occurred.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.ObjectInput.read(byte[] b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads into an array of bytes.  This method will
 block until some input is available.
 @param b	the buffer into which the data is read
 @return  the actual number of bytes read, -1 is
 		returned when the end of the stream is reached.
 @exception IOException If an I/O error has occurred.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.ObjectInput.read(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads into an array of bytes.  This method will
 block until some input is available.
 @param b	the buffer into which the data is read
 @param off the start offset of the data
 @param len the maximum number of bytes read
 @return  the actual number of bytes read, -1 is
 		returned when the end of the stream is reached.
 @exception IOException If an I/O error has occurred.

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.io.ObjectInput.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Skips n bytes of input.
 @param n the number of bytes to be skipped
 @return	the actual number of bytes skipped.
 @exception IOException If an I/O error has occurred.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.ObjectInput.available() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the number of bytes that can be read
 without blocking.
 @return the number of available bytes.
 @exception IOException If an I/O error has occurred.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.ObjectInput.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Closes the input stream. Must be called
 to release any resources associated with
 the stream.
 @exception IOException If an I/O error has occurred.

<!-- END DATA -->
