<!-- BEGIN KEY -->
public interface java.io.ObjectOutput extends java.io.DataOutput
<!-- END KEY -->
<!-- BEGIN DATA -->
 ObjectOutput extends the DataOutput interface to include writing of objects.
 DataOutput includes methods for output of primitive types, ObjectOutput
 extends that interface to include objects, arrays, and Strings.

 @author  unascribed
 @version 1.17, 11/17/05
 @see java.io.InputStream
 @see java.io.ObjectOutputStream
 @see java.io.ObjectInputStream
 @since   JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.ObjectOutput.writeObject(Object obj) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Write an object to the underlying storage or stream.  The
 class that implements this interface defines how the object is
 written.

 @param obj the object to be written
 @exception IOException Any of the usual Input/Output related exceptions.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.ObjectOutput.write(int b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a byte. This method will block until the byte is actually
 written.
 @param b	the byte
 @exception IOException If an I/O error has occurred.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.ObjectOutput.write(byte[] b) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes an array of bytes. This method will block until the bytes
 are actually written.
 @param b	the data to be written
 @exception IOException If an I/O error has occurred.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.ObjectOutput.write(byte[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a sub array of bytes.
 @param b	the data to be written
 @param off	the start offset in the data
 @param len	the number of bytes that are written
 @exception IOException If an I/O error has occurred.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.ObjectOutput.flush() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Flushes the stream. This will write any buffered
 output bytes.
 @exception IOException If an I/O error has occurred.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.ObjectOutput.close() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Closes the stream. This method must be called
 to release any resources associated with the
 stream.
 @exception IOException If an I/O error has occurred.

<!-- END DATA -->
