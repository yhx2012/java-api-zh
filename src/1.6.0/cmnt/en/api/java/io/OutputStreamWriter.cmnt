<!-- BEGIN KEY -->
public class java.io.OutputStreamWriter extends java.io.Writer
<!-- END KEY -->
<!-- BEGIN DATA -->
 An OutputStreamWriter is a bridge from character streams to byte streams:
 Characters written to it are encoded into bytes using a specified {@link
 java.nio.charset.Charset <code>charset</code>}.  The charset that it uses
 may be specified by name or may be given explicitly, or the platform's
 default charset may be accepted.

 <p> Each invocation of a write() method causes the encoding converter to be
 invoked on the given character(s).  The resulting bytes are accumulated in a
 buffer before being written to the underlying output stream.  The size of
 this buffer may be specified, but by default it is large enough for most
 purposes.  Note that the characters passed to the write() methods are not
 buffered.

 <p> For top efficiency, consider wrapping an OutputStreamWriter within a
 BufferedWriter so as to avoid frequent converter invocations.  For example:

 <pre>
 Writer out
   = new BufferedWriter(new OutputStreamWriter(System.out));
 </pre>

 <p> A <i>surrogate pair</i> is a character represented by a sequence of two
 <tt>char</tt> values: A <i>high</i> surrogate in the range '&#92;uD800' to
 '&#92;uDBFF' followed by a <i>low</i> surrogate in the range '&#92;uDC00' to
 '&#92;uDFFF'. 

 <p> A <i>malformed surrogate element</i> is a high surrogate that is not
 followed by a low surrogate or a low surrogate that is not preceded by a
 high surrogate.  
 
 <p> This class always replaces malformed surrogate elements and unmappable
 character sequences with the charset's default <i>substitution sequence</i>.
 The {@linkplain java.nio.charset.CharsetEncoder} class should be used when more
 control over the encoding process is required.

 @see BufferedWriter
 @see OutputStream
 @see java.nio.charset.Charset

 @version 	1.50, 06/06/07
 @author	Mark Reinhold
 @since	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.OutputStreamWriter(OutputStream out, String charsetName) throws java.io.UnsupportedEncodingException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an OutputStreamWriter that uses the named charset.

 @param  out
         An OutputStream

 @param  charsetName
         The name of a supported
         {@link java.nio.charset.Charset </code>charset<code>}

 @exception  UnsupportedEncodingException
             If the named encoding is not supported

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.OutputStreamWriter(OutputStream out)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an OutputStreamWriter that uses the default character encoding.

 @param  out  An OutputStream

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.OutputStreamWriter(OutputStream out, Charset cs)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an OutputStreamWriter that uses the given charset. </p>

 @param  out
         An OutputStream

 @param  cs
         A charset

 @since 1.4
 @spec JSR-51

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.OutputStreamWriter(OutputStream out, CharsetEncoder enc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an OutputStreamWriter that uses the given charset encoder.  </p>

 @param  out
         An OutputStream

 @param  enc
         A charset encoder

 @since 1.4
 @spec JSR-51

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.io.OutputStreamWriter.getEncoding()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of the character encoding being used by this stream.

 <p> If the encoding has an historical name then that name is returned;
 otherwise the encoding's canonical name is returned.

 <p> If this instance was created with the {@link
 #OutputStreamWriter(OutputStream, String)} constructor then the returned
 name, being unique for the encoding, may differ from the name passed to
 the constructor.  This method may return <tt>null</tt> if the stream has
 been closed. </p>

 @return The historical name of this encoding, or possibly
         <code>null</code> if the stream has been closed

 @see java.nio.charset.Charset

 @revised 1.4
 @spec JSR-51

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.OutputStreamWriter.write(int c) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a single character.

 @exception  IOException  If an I/O error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.OutputStreamWriter.write(char[] cbuf, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a portion of an array of characters.

 @param  cbuf  Buffer of characters
 @param  off   Offset from which to start writing characters
 @param  len   Number of characters to write

 @exception  IOException  If an I/O error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.OutputStreamWriter.write(String str, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a portion of a string.

 @param  str  A String
 @param  off  Offset from which to start writing characters
 @param  len  Number of characters to write

 @exception  IOException  If an I/O error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.OutputStreamWriter.flush() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Flushes the stream.

 @exception  IOException  If an I/O error occurs

<!-- END DATA -->
