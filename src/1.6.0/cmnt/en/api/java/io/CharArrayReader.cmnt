<!-- BEGIN KEY -->
public class java.io.CharArrayReader extends java.io.Reader
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class implements a character buffer that can be used as a
 character-input stream.

 @author	Herb Jellinek
 @version 	1.25, 11/17/05
 @since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected char[] java.io.CharArrayReader.buf
<!-- END KEY -->
<!-- BEGIN DATA -->
The character buffer. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.io.CharArrayReader.pos
<!-- END KEY -->
<!-- BEGIN DATA -->
The current buffer position. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.io.CharArrayReader.markedPos
<!-- END KEY -->
<!-- BEGIN DATA -->
The position of mark in buffer. 
<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.io.CharArrayReader.count
<!-- END KEY -->
<!-- BEGIN DATA -->

  The index of the end of this buffer.  There is not valid
  data at or beyond this index.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.CharArrayReader(char[] buf)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a CharArrayReader from the specified array of chars.
 @param buf	Input buffer (not copied)

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.CharArrayReader(char[] buf, int offset, int length)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a CharArrayReader from the specified array of chars.

 <p> The resulting reader will start reading at the given
 <tt>offset</tt>.  The total number of <tt>char</tt> values that can be
 read from this reader will be either <tt>length</tt> or
 <tt>buf.length-offset</tt>, whichever is smaller.

 @throws IllegalArgumentException
         If <tt>offset</tt> is negative or greater than
         <tt>buf.length</tt>, or if <tt>length</tt> is negative, or if
         the sum of these two values is negative.

 @param buf	Input buffer (not copied)
 @param offset    Offset of the first char to read
 @param length	Number of chars to read

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.CharArrayReader.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads a single character.
 
 @exception   IOException  If an I/O error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.CharArrayReader.read(char[] b, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads characters into a portion of an array.
 @param b	 Destination buffer
 @param off  Offset at which to start storing characters
 @param len   Maximum number of characters to read
 @return  The actual number of characters read, or -1 if
 		the end of the stream has been reached
 
 @exception   IOException  If an I/O error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.io.CharArrayReader.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Skips characters.  Returns the number of characters that were skipped.

 <p>The <code>n</code> parameter may be negative, even though the
 <code>skip</code> method of the {@link Reader} superclass throws
 an exception in this case. If <code>n</code> is negative, then
 this method does nothing and returns <code>0</code>.

 @param n The number of characters to skip
 @return       The number of characters actually skipped
 @exception  IOException If the stream is closed, or an I/O error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.CharArrayReader.ready() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tells whether this stream is ready to be read.  Character-array readers
 are always ready to be read.

 @exception  IOException  If an I/O error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.CharArrayReader.markSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tells whether this stream supports the mark() operation, which it does.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.CharArrayReader.mark(int readAheadLimit) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Marks the present position in the stream.  Subsequent calls to reset()
 will reposition the stream to this point.

 @param  readAheadLimit  Limit on the number of characters that may be
                         read while still preserving the mark.  Because
                         the stream's input comes from a character array,
                         there is no actual limit; hence this argument is
                         ignored.

 @exception  IOException  If an I/O error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.CharArrayReader.reset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets the stream to the most recent mark, or to the beginning if it has
 never been marked.

 @exception  IOException  If an I/O error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.CharArrayReader.close()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Closes the stream and releases any system resources associated with
 it.  Once the stream has been closed, further read(), ready(),
 mark(), reset(), or skip() invocations will throw an IOException.
 Closing a previously closed stream has no effect.

<!-- END DATA -->
