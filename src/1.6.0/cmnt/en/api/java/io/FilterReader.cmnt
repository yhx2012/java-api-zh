<!-- BEGIN KEY -->
public abstract class java.io.FilterReader extends java.io.Reader
<!-- END KEY -->
<!-- BEGIN DATA -->
 Abstract class for reading filtered character streams.
 The abstract class <code>FilterReader</code> itself
 provides default methods that pass all requests to 
 the contained stream. Subclasses of <code>FilterReader</code>
 should override some of these methods and may also provide
 additional methods and fields.

 @version 	1.19, 05/11/17
 @author	Mark Reinhold
 @since	JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.io.Reader java.io.FilterReader.in
<!-- END KEY -->
<!-- BEGIN DATA -->
 The underlying character-input stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.io.FilterReader(Reader in)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new filtered reader.

 @param in  a Reader object providing the underlying stream.
 @throws NullPointerException if <code>in</code> is <code>null</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.FilterReader.read() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads a single character.

 @exception  IOException  If an I/O error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.FilterReader.read(char[] cbuf, int off, int len) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads characters into a portion of an array.

 @exception  IOException  If an I/O error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public long java.io.FilterReader.skip(long n) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Skips characters.

 @exception  IOException  If an I/O error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.FilterReader.ready() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tells whether this stream is ready to be read.

 @exception  IOException  If an I/O error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.FilterReader.markSupported()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tells whether this stream supports the mark() operation.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.FilterReader.mark(int readAheadLimit) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Marks the present position in the stream.

 @exception  IOException  If an I/O error occurs

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.FilterReader.reset() throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets the stream.

 @exception  IOException  If an I/O error occurs

<!-- END DATA -->
