<!-- BEGIN KEY -->
public class java.io.ObjectStreamField extends java.lang.Object implements java.lang.Comparable
<!-- END KEY -->
<!-- BEGIN DATA -->
 A description of a Serializable field from a Serializable class.  An array
 of ObjectStreamFields is used to declare the Serializable fields of a class.

 @author	Mike Warres
 @author	Roger Riggs
 @version 1.47, 06/04/07
 @see ObjectStreamClass
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.ObjectStreamField(String name, java.lang.Class<?> type)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create a Serializable field with the specified type.  This field should
 be documented with a <code>serialField</code> tag. 

 @param	name the name of the serializable field
 @param	type the <code>Class</code> object of the serializable field

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.ObjectStreamField(String name, java.lang.Class<?> type, boolean unshared)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates an ObjectStreamField representing a serializable field with the
 given name and type.  If unshared is false, values of the represented
 field are serialized and deserialized in the default manner--if the
 field is non-primitive, object values are serialized and deserialized as
 if they had been written and read by calls to writeObject and
 readObject.  If unshared is true, values of the represented field are
 serialized and deserialized as if they had been written and read by
 calls to writeUnshared and readUnshared.

 @param   name field name
 @param   type field type
 @param   unshared if false, write/read field values in the same manner
          as writeObject/readObject; if true, write/read in the same
          manner as writeUnshared/readUnshared
 @since   1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.io.ObjectStreamField.getName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the name of this field.

 @return	a <code>String</code> representing the name of the serializable
 		field 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class<?> java.io.ObjectStreamField.getType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the type of the field.  If the type is non-primitive and this
 <code>ObjectStreamField</code> was obtained from a deserialized {@link
 ObjectStreamClass} instance, then <code>Object.class</code> is returned.
 Otherwise, the <code>Class</code> object for the type of the field is
 returned.

 @return	a <code>Class</code> object representing the type of the
 		serializable field

<!-- END DATA -->
<!-- BEGIN KEY -->
public char java.io.ObjectStreamField.getTypeCode()
<!-- END KEY -->
<!-- BEGIN DATA -->

 Returns character encoding of field type.  The encoding is as follows:
 <blockquote><pre>
 B            byte
 C            char
 D            double
 F            float
 I            int
 J            long
 L            class or interface
 S            short
 Z            boolean
 [            array
 </pre></blockquote>

 @return	the typecode of the serializable field

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.io.ObjectStreamField.getTypeString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return the JVM type signature.

 @return	null if this field has a primitive type.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.ObjectStreamField.getOffset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Offset of field within instance data.

 @return	the offset of this field
 @see #setOffset

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.io.ObjectStreamField.setOffset(int offset)
<!-- END KEY -->
<!-- BEGIN DATA -->

 Offset within instance data.

 @param	offset the offset of the field
 @see #getOffset

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.ObjectStreamField.isPrimitive()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return true if this field has a primitive type.

 @return	true if and only if this field corresponds to a primitive type

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.io.ObjectStreamField.isUnshared()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns boolean value indicating whether or not the serializable field
 represented by this ObjectStreamField instance is unshared.

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.ObjectStreamField.compareTo(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compare this field with another <code>ObjectStreamField</code>.  Return
 -1 if this is smaller, 0 if equal, 1 if greater.  Types that are
 primitives are "smaller" than object types.  If equal, the field names
 are compared.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.io.ObjectStreamField.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return a string that describes this field.

<!-- END DATA -->
