<!-- BEGIN KEY -->
public abstract static class java.io.ObjectOutputStream.PutField extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provide programmatic access to the persistent fields to be written
 to ObjectOutput.

 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.io.ObjectOutputStream.PutField.put(String name, boolean val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Put the value of the named boolean field into the persistent field.

 @param  name the name of the serializable field
 @param  val the value to assign to the field
 @throws IllegalArgumentException if <code>name</code> does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 <code>boolean</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.io.ObjectOutputStream.PutField.put(String name, byte val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Put the value of the named byte field into the persistent field.

 @param  name the name of the serializable field
 @param  val the value to assign to the field
 @throws IllegalArgumentException if <code>name</code> does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 <code>byte</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.io.ObjectOutputStream.PutField.put(String name, char val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Put the value of the named char field into the persistent field.

 @param  name the name of the serializable field
 @param  val the value to assign to the field
 @throws IllegalArgumentException if <code>name</code> does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 <code>char</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.io.ObjectOutputStream.PutField.put(String name, short val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Put the value of the named short field into the persistent field.

 @param  name the name of the serializable field
 @param  val the value to assign to the field
 @throws IllegalArgumentException if <code>name</code> does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 <code>short</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.io.ObjectOutputStream.PutField.put(String name, int val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Put the value of the named int field into the persistent field.

 @param  name the name of the serializable field
 @param  val the value to assign to the field
 @throws IllegalArgumentException if <code>name</code> does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 <code>int</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.io.ObjectOutputStream.PutField.put(String name, long val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Put the value of the named long field into the persistent field.

 @param  name the name of the serializable field
 @param  val the value to assign to the field
 @throws IllegalArgumentException if <code>name</code> does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 <code>long</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.io.ObjectOutputStream.PutField.put(String name, float val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Put the value of the named float field into the persistent field.

 @param  name the name of the serializable field
 @param  val the value to assign to the field
 @throws IllegalArgumentException if <code>name</code> does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 <code>float</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.io.ObjectOutputStream.PutField.put(String name, double val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Put the value of the named double field into the persistent field.

 @param  name the name of the serializable field
 @param  val the value to assign to the field
 @throws IllegalArgumentException if <code>name</code> does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 <code>double</code>

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.io.ObjectOutputStream.PutField.put(String name, Object val)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Put the value of the named Object field into the persistent field.

 @param  name the name of the serializable field
 @param  val the value to assign to the field
         (which may be <code>null</code>)
 @throws IllegalArgumentException if <code>name</code> does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not a
 reference type

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract void java.io.ObjectOutputStream.PutField.write(ObjectOutput out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Write the data and fields to the specified ObjectOutput stream, 
 which must be the same stream that produced this  
 <code>PutField</code> object.
 
 @param  out the stream to write the data and fields to
 @throws IOException if I/O errors occur while writing to the
 	   underlying stream
 @throws IllegalArgumentException if the specified stream is not 
         the same stream that produced this <code>PutField</code> 
         object
 @deprecated This method does not write the values contained by this
 	   <code>PutField</code> object in a proper format, and may
 	   result in corruption of the serialization stream.  The
 	   correct way to write <code>PutField</code> data is by
 	   calling the {@link java.io.ObjectOutputStream#writeFields()}
 	   method.

<!-- END DATA -->
