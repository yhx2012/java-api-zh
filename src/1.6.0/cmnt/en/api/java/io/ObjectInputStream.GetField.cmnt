<!-- BEGIN KEY -->
public abstract static class java.io.ObjectInputStream.GetField extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provide access to the persistent fields read from the input stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.io.ObjectStreamClass java.io.ObjectInputStream.GetField.getObjectStreamClass()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the ObjectStreamClass that describes the fields in the stream.

 @return  the descriptor class that describes the serializable fields

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.io.ObjectInputStream.GetField.defaulted(String name) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Return true if the named field is defaulted and has no value in this
 stream.

 @param  name the name of the field
 @return true, if and only if the named field is defaulted
 @throws IOException if there are I/O errors while reading from
 	   the underlying <code>InputStream</code>
 @throws IllegalArgumentException if <code>name</code> does not
 	   correspond to a serializable field

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract boolean java.io.ObjectInputStream.GetField.get(String name, boolean val) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the value of the named boolean field from the persistent field.

 @param  name the name of the field
 @param  val the default value to use if <code>name</code> does not
 	   have a value
 @return the value of the named <code>boolean</code> field
 @throws IOException if there are I/O errors while reading from the
 	   underlying <code>InputStream</code>
 @throws IllegalArgumentException if type of <code>name</code> is
 	   not serializable or if the field type is incorrect

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract byte java.io.ObjectInputStream.GetField.get(String name, byte val) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the value of the named byte field from the persistent field.

 @param  name the name of the field
 @param  val the default value to use if <code>name</code> does not
 	   have a value
 @return the value of the named <code>byte</code> field
 @throws IOException if there are I/O errors while reading from the
 	   underlying <code>InputStream</code>
 @throws IllegalArgumentException if type of <code>name</code> is
 	   not serializable or if the field type is incorrect

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract char java.io.ObjectInputStream.GetField.get(String name, char val) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the value of the named char field from the persistent field.

 @param  name the name of the field
 @param  val the default value to use if <code>name</code> does not
 	   have a value
 @return the value of the named <code>char</code> field
 @throws IOException if there are I/O errors while reading from the
 	   underlying <code>InputStream</code>
 @throws IllegalArgumentException if type of <code>name</code> is
 	   not serializable or if the field type is incorrect

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract short java.io.ObjectInputStream.GetField.get(String name, short val) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the value of the named short field from the persistent field.

 @param  name the name of the field
 @param  val the default value to use if <code>name</code> does not
 	   have a value
 @return the value of the named <code>short</code> field
 @throws IOException if there are I/O errors while reading from the
 	   underlying <code>InputStream</code>
 @throws IllegalArgumentException if type of <code>name</code> is
 	   not serializable or if the field type is incorrect

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract int java.io.ObjectInputStream.GetField.get(String name, int val) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the value of the named int field from the persistent field.

 @param  name the name of the field
 @param  val the default value to use if <code>name</code> does not
 	   have a value
 @return the value of the named <code>int</code> field
 @throws IOException if there are I/O errors while reading from the
 	   underlying <code>InputStream</code>
 @throws IllegalArgumentException if type of <code>name</code> is
 	   not serializable or if the field type is incorrect

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract long java.io.ObjectInputStream.GetField.get(String name, long val) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the value of the named long field from the persistent field.

 @param  name the name of the field
 @param  val the default value to use if <code>name</code> does not
 	   have a value
 @return the value of the named <code>long</code> field
 @throws IOException if there are I/O errors while reading from the
 	   underlying <code>InputStream</code>
 @throws IllegalArgumentException if type of <code>name</code> is
 	   not serializable or if the field type is incorrect

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract float java.io.ObjectInputStream.GetField.get(String name, float val) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the value of the named float field from the persistent field.

 @param  name the name of the field
 @param  val the default value to use if <code>name</code> does not
 	   have a value
 @return the value of the named <code>float</code> field
 @throws IOException if there are I/O errors while reading from the
 	   underlying <code>InputStream</code>
 @throws IllegalArgumentException if type of <code>name</code> is
 	   not serializable or if the field type is incorrect

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract double java.io.ObjectInputStream.GetField.get(String name, double val) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the value of the named double field from the persistent field.

 @param  name the name of the field
 @param  val the default value to use if <code>name</code> does not
 	   have a value
 @return the value of the named <code>double</code> field
 @throws IOException if there are I/O errors while reading from the
 	   underlying <code>InputStream</code>
 @throws IllegalArgumentException if type of <code>name</code> is
 	   not serializable or if the field type is incorrect

<!-- END DATA -->
<!-- BEGIN KEY -->
public abstract java.lang.Object java.io.ObjectInputStream.GetField.get(String name, Object val) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Get the value of the named Object field from the persistent field.

 @param  name the name of the field
 @param  val the default value to use if <code>name</code> does not
 	   have a value
 @return the value of the named <code>Object</code> field
 @throws IOException if there are I/O errors while reading from the
 	   underlying <code>InputStream</code>
 @throws IllegalArgumentException if type of <code>name</code> is
 	   not serializable or if the field type is incorrect

<!-- END DATA -->
