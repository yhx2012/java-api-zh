<!-- BEGIN KEY -->
public class java.io.CharArrayWriter extends java.io.Writer
<!-- END KEY -->
<!-- BEGIN DATA -->
 This class implements a character buffer that can be used as an Writer.
 The buffer automatically grows when data is written to the stream.  The data
 can be retrieved using toCharArray() and toString().
 <P>
 Note: Invoking close() on this class has no effect, and methods
 of this class can be called after the stream has closed
 without generating an IOException.

 @author	Herb Jellinek
 @version 	1.25, 11/17/05
 @since       JDK1.1

<!-- END DATA -->
<!-- BEGIN KEY -->
protected char[] java.io.CharArrayWriter.buf
<!-- END KEY -->
<!-- BEGIN DATA -->
 The buffer where data is stored.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected int java.io.CharArrayWriter.count
<!-- END KEY -->
<!-- BEGIN DATA -->
 The number of chars in the buffer.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.CharArrayWriter()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new CharArrayWriter.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.CharArrayWriter(int initialSize)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new CharArrayWriter with the specified initial size.

 @param initialSize  an int specifying the initial buffer size.
 @exception IllegalArgumentException if initialSize is negative

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.CharArrayWriter.write(int c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a character to the buffer.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.CharArrayWriter.write(char[] c, int off, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes characters to the buffer.
 @param c	the data to be written
 @param off	the start offset in the data
 @param len	the number of chars that are written

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.CharArrayWriter.write(String str, int off, int len)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Write a portion of a string to the buffer.
 @param  str  String to be written from
 @param  off  Offset from which to start reading characters
 @param  len  Number of characters to be written

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.CharArrayWriter.writeTo(Writer out) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes the contents of the buffer to another character stream.

 @param out	the output stream to write to
 @throws IOException If an I/O error occurs.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.CharArrayWriter java.io.CharArrayWriter.append(CharSequence csq)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends the specified character sequence to this writer.

 <p> An invocation of this method of the form <tt>out.append(csq)</tt>
 behaves in exactly the same way as the invocation

 <pre>
     out.write(csq.toString()) </pre>

 <p> Depending on the specification of <tt>toString</tt> for the
 character sequence <tt>csq</tt>, the entire sequence may not be
 appended. For instance, invoking the <tt>toString</tt> method of a
 character buffer will return a subsequence whose content depends upon
 the buffer's position and limit.

 @param  csq
         The character sequence to append.  If <tt>csq</tt> is
         <tt>null</tt>, then the four characters <tt>"null"</tt> are
         appended to this writer.

 @return  This writer

 @since  1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.CharArrayWriter java.io.CharArrayWriter.append(CharSequence csq, int start, int end)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends a subsequence of the specified character sequence to this writer.

 <p> An invocation of this method of the form <tt>out.append(csq, start,
 end)</tt> when <tt>csq</tt> is not <tt>null</tt>, behaves in
 exactly the same way as the invocation

 <pre>
     out.write(csq.subSequence(start, end).toString()) </pre>

 @param  csq
         The character sequence from which a subsequence will be
         appended.  If <tt>csq</tt> is <tt>null</tt>, then characters
         will be appended as if <tt>csq</tt> contained the four
         characters <tt>"null"</tt>.

 @param  start
         The index of the first character in the subsequence

 @param  end
         The index of the character following the last character in the
         subsequence

 @return  This writer

 @throws  IndexOutOfBoundsException
          If <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt>
          is greater than <tt>end</tt>, or <tt>end</tt> is greater than
          <tt>csq.length()</tt>

 @since  1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.CharArrayWriter java.io.CharArrayWriter.append(char c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Appends the specified character to this writer.

 <p> An invocation of this method of the form <tt>out.append(c)</tt>
 behaves in exactly the same way as the invocation

 <pre>
     out.write(c) </pre>

 @param  c
         The 16-bit character to append

 @return  This writer

 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.CharArrayWriter.reset()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Resets the buffer so that you can use it again without
 throwing away the already allocated buffer.

<!-- END DATA -->
<!-- BEGIN KEY -->
public char[] java.io.CharArrayWriter.toCharArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a copy of the input data.

 @return an array of chars copied from the input data.

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.io.CharArrayWriter.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the current size of the buffer.

 @return an int representing the current size of the buffer.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.io.CharArrayWriter.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Converts input data to a string.
 @return the string.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.CharArrayWriter.flush()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Flush the stream.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.CharArrayWriter.close()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Close the stream.  This method does not release the buffer, since its
 contents might still be required. Note: Invoking this method in this class
 will have no effect.

<!-- END DATA -->
