<!-- BEGIN KEY -->
public final class java.io.Console extends java.lang.Object implements java.io.Flushable
<!-- END KEY -->
<!-- BEGIN DATA -->
 Methods to access the character-based console device, if any, associated
 with the current Java virtual machine.

 <p> Whether a virtual machine has a console is dependent upon the
 underlying platform and also upon the manner in which the virtual
 machine is invoked.  If the virtual machine is started from an
 interactive command line without redirecting the standard input and
 output streams then its console will exist and will typically be
 connected to the keyboard and display from which the virtual machine
 was launched.  If the virtual machine is started automatically, for
 example by a background job scheduler, then it will typically not
 have a console.
 <p>
 If this virtual machine has a console then it is represented by a
 unique instance of this class which can be obtained by invoking the
 {@link java.lang.System#console()} method.  If no console device is
 available then an invocation of that method will return <tt>null</tt>.
 <p>
 Read and write operations are synchronized to guarantee the atomic
 completion of critical operations; therefore invoking methods
 {@link #readLine()}, {@link #readPassword()}, {@link #format format()},
 {@link #printf printf()} as well as the read, format and write operations
 on the objects returned by {@link #reader()} and {@link #writer()} may
 block in multithreaded scenarios.
 <p>
 Invoking <tt>close()</tt> on the objects returned by the {@link #reader()}
 and the {@link #writer()} will not close the underlying stream of those
 objects.
 <p>
 The console-read methods return <tt>null</tt> when the end of the
 console input stream is reached, for example by typing control-D on
 Unix or control-Z on Windows.  Subsequent read operations will succeed
 if additional characters are later entered on the console's input
 device.
 <p>
 Unless otherwise specified, passing a <tt>null</tt> argument to any method
 in this class will cause a {@link NullPointerException} to be thrown.
 <p>
 <b>Security note:</b>
 If an application needs to read a password or other secure data, it should
 use {@link #readPassword()} or {@link #readPassword(String, Object...)} and
 manually zero the returned character array after processing to minimize the
 lifetime of sensitive data in memory.

 <blockquote><pre>
 Console cons;
 char[] passwd;
 if ((cons = System.console()) != null &&
     (passwd = cons.readPassword("[%s]", "Password:")) != null) {
     ...
     java.util.Arrays.fill(passwd, ' ');
 }
 </pre></blockquote>

 @author  Xueming Shen
 @version 1.11, 06/12/06
 @since   1.6

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.PrintWriter java.io.Console.writer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the unique {@link java.io.PrintWriter PrintWriter} object
 associated with this console.

 @return  The printwriter associated with this console

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Reader java.io.Console.reader()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Retrieves the unique {@link java.io.Reader Reader} object associated
 with this console.
 <p>
 This method is intended to be used by sophisticated applications, for
 example, a {@link java.util.Scanner} object which utilizes the rich
 parsing/scanning functionality provided by the <tt>Scanner</tt>:
 <blockquote><pre>
 Console con = System.console();
 if (con != null) {
     Scanner sc = new Scanner(con.reader());
     ...
 }
 </pre></blockquote>
 <p>
 For simple applications requiring only line-oriented reading, use
 <tt>{@link #readLine}</tt>.
 <p>
 The bulk read operations {@link java.io.Reader#read(char[]) read(char[]) },
 {@link java.io.Reader#read(char[], int, int) read(char[], int, int) } and
 {@link java.io.Reader#read(java.nio.CharBuffer) read(java.nio.CharBuffer)}
 on the returned object will not read in characters beyond the line
 bound for each invocation, even if the destination buffer has space for
 more characters. A line bound is considered to be any one of a line feed
 (<tt>'\n'</tt>), a carriage return (<tt>'\r'</tt>), a carriage return
 followed immediately by a linefeed, or an end of stream.

 @return  The reader associated with this console

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Console java.io.Console.format(String fmt, java.lang.Object[] args)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Writes a formatted string to this console's output stream using
 the specified format string and arguments.

 @param  fmt
         A format string as described in <a
         href="../util/Formatter.html#syntax">Format string syntax</a>

 @param  args
         Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The number of arguments is
         variable and may be zero.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         the <a href="http://java.sun.com/docs/books/vmspec/">Java
         Virtual Machine Specification</a>.  The behaviour on a
         <tt>null</tt> argument depends on the <a
         href="../util/Formatter.html#syntax">conversion</a>.

 @throws  IllegalFormatException
          If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the <a
          href="../util/Formatter.html#detail">Details</a> section
          of the formatter class specification.

 @return  This console

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.Console java.io.Console.printf(String format, java.lang.Object[] args)
<!-- END KEY -->
<!-- BEGIN DATA -->
 A convenience method to write a formatted string to this console's
 output stream using the specified format string and arguments.

 <p> An invocation of this method of the form <tt>con.printf(format,
 args)</tt> behaves in exactly the same way as the invocation of
 <pre>con.format(format, args)</pre>.

 @param  format
         A format string as described in <a
         href="../util/Formatter.html#syntax">Format string syntax</a>.

 @param  args
         Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The number of arguments is
         variable and may be zero.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         the <a href="http://java.sun.com/docs/books/vmspec/">Java
         Virtual Machine Specification</a>.  The behaviour on a
         <tt>null</tt> argument depends on the <a
         href="../util/Formatter.html#syntax">conversion</a>.

 @throws  IllegalFormatException
          If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the <a
          href="../util/Formatter.html#detail">Details</a> section of the
          formatter class specification.

 @return  This console

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.io.Console.readLine(String fmt, java.lang.Object[] args)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a formatted prompt, then reads a single line of text from the
 console.

 @param  fmt
         A format string as described in <a
         href="../util/Formatter.html#syntax">Format string syntax</a>.

 @param  args
         Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         the <a href="http://java.sun.com/docs/books/vmspec/">Java
         Virtual Machine Specification</a>.

 @throws  IllegalFormatException
          If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the <a
          href="../util/Formatter.html#detail">Details</a> section
          of the formatter class specification.

 @throws IOError
         If an I/O error occurs.

 @return  A string containing the line read from the console, not
          including any line-termination characters, or <tt>null</tt>
          if an end of stream has been reached.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.io.Console.readLine()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads a single line of text from the console.

 @throws IOError
         If an I/O error occurs.

 @return  A string containing the line read from the console, not
          including any line-termination characters, or <tt>null</tt>
          if an end of stream has been reached.

<!-- END DATA -->
<!-- BEGIN KEY -->
public char[] java.io.Console.readPassword(String fmt, java.lang.Object[] args)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Provides a formatted prompt, then reads a password or passphrase from
 the console with echoing disabled.

 @param  fmt
         A format string as described in <a
         href="../util/Formatter.html#syntax">Format string syntax</a>
         for the prompt text.

 @param  args
         Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         the <a href="http://java.sun.com/docs/books/vmspec/">Java
         Virtual Machine Specification</a>.

 @throws  IllegalFormatException
          If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the <a
          href="../util/Formatter.html#detail">Details</a>
          section of the formatter class specification.

 @throws IOError
         If an I/O error occurs.

 @return  A character array containing the password or passphrase read
          from the console, not including any line-termination characters,
          or <tt>null</tt> if an end of stream has been reached.

<!-- END DATA -->
<!-- BEGIN KEY -->
public char[] java.io.Console.readPassword()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reads a password or passphrase from the console with echoing disabled

 @throws IOError
         If an I/O error occurs.

 @return  A character array containing the password or passphrase read
          from the console, not including any line-termination characters,
          or <tt>null</tt> if an end of stream has been reached.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.io.Console.flush()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Flushes the console and forces any buffered output to be written
 immediately .

<!-- END DATA -->
