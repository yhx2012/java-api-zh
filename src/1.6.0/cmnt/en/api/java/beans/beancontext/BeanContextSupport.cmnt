<!-- BEGIN KEY -->
public class java.beans.beancontext.BeanContextSupport extends java.beans.beancontext.BeanContextChildSupport implements java.beans.beancontext.BeanContext, java.io.Serializable, java.beans.PropertyChangeListener, java.beans.VetoableChangeListener
<!-- END KEY -->
<!-- BEGIN DATA -->
 This helper class provides a utility implementation of the
 java.beans.beancontext.BeanContext interface.
 </p>
 <p>
 Since this class directly implements the BeanContext interface, the class
 can, and is intended to be used either by subclassing this implementation,
 or via ad-hoc delegation of an instance of this class from another.
 </p>

 @author Laurence P. G. Cable
 @version 1.46, 01/13/03
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient java.util.HashMap java.beans.beancontext.BeanContextSupport.children
<!-- END KEY -->
<!-- BEGIN DATA -->
 all accesses to the <code> protected HashMap children </code> field
 shall be synchronized on that object.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient java.util.ArrayList java.beans.beancontext.BeanContextSupport.bcmListeners
<!-- END KEY -->
<!-- BEGIN DATA -->
 all accesses to the <code> protected ArrayList bcmListeners </code> field
 shall be synchronized on that object.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Locale java.beans.beancontext.BeanContextSupport.locale
<!-- END KEY -->
<!-- BEGIN DATA -->
 The current locale of this BeanContext.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.beans.beancontext.BeanContextSupport.okToUseGui
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <tt>boolean</tt> indicating if this 
 instance may now render a GUI.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.beans.beancontext.BeanContextSupport.designTime
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <tt>boolean</tt> indicating whether or not 
 this object is currently in design time mode.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextSupport(BeanContext peer, Locale lcle, boolean dTime, boolean visible)
<!-- END KEY -->
<!-- BEGIN DATA -->
 
 Construct a BeanContextSupport instance
 

 @param peer	The peer <tt>BeanContext</tt> we are 
                  supplying an implementation for, 
                  or <tt>null</tt> 
                  if this object is its own peer
 @param lcle	The current Locale for this BeanContext. If 
                  <tt>lcle</tt> is <tt>null</tt>, the default locale 
                  is assigned to the <tt>BeanContext</tt> instance. 
 @param dTime	The initial state, 
                  <tt>true</tt> if in design mode, 
                  <tt>false</tt> if runtime.
 @param visible	The initial visibility.
 @see java.util.Locale#getDefault()      
 @see java.util.Locale#setDefault(java.util.Locale)  

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextSupport(BeanContext peer, Locale lcle, boolean dtime)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create an instance using the specified Locale and design mode.

 @param peer	The peer <tt>BeanContext</tt> we 
                  are supplying an implementation for, 
                  or <tt>null</tt> if this object is its own peer
 @param lcle	The current Locale for this <tt>BeanContext</tt>. If 
                  <tt>lcle</tt> is <tt>null</tt>, the default locale 
                  is assigned to the <tt>BeanContext</tt> instance. 
 @param dtime	The initial state, <tt>true</tt> 
                  if in design mode, 
                  <tt>false</tt> if runtime.
 @see java.util.Locale#getDefault()      
 @see java.util.Locale#setDefault(java.util.Locale)  

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextSupport(BeanContext peer, Locale lcle)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create an instance using the specified locale

 @param peer	The peer BeanContext we are 
                  supplying an implementation for, 
                  or <tt>null</tt> if this object 
                  is its own peer
 @param lcle	The current Locale for this 
                  <tt>BeanContext</tt>. If 
                  <tt>lcle</tt> is <tt>null</tt>, 
                  the default locale 
                  is assigned to the <tt>BeanContext</tt> 
                  instance.
 @see java.util.Locale#getDefault()      
 @see java.util.Locale#setDefault(java.util.Locale)   

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextSupport(BeanContext peer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create an instance using with a default locale

 @param peer	The peer <tt>BeanContext</tt> we are 
                  supplying an implementation for, 
                  or <tt>null</tt> if this object 
                  is its own peer

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextSupport()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create an instance that is not a delegate of another object

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContext java.beans.beancontext.BeanContextSupport.getBeanContextPeer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the instance of <tt>BeanContext</tt> that
 this object is providing the implementation for.
 @return the BeanContext instance 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.beans.beancontext.BeanContextSupport.instantiateChild(String beanName) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
 The instantiateChild method is a convenience hook 
 in BeanContext to simplify
 the task of instantiating a Bean, nested, 
 into a <tt>BeanContext</tt>.
 </p>
 <p>
 The semantics of the beanName parameter are defined by java.beans.Beans.instantate.
 </p>

 @param beanName the name of the Bean to instantiate within this BeanContext
 @throws IOException if there is an I/O error when the bean is being deserialized
 @throws ClassNotFoundException if the class 
 identified by the beanName parameter is not found
 @return the new object

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.beans.beancontext.BeanContextSupport.size()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the number of children currently nested in 
 this BeanContext.

 @return number of children

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.beancontext.BeanContextSupport.isEmpty()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reports whether or not this 
 <tt>BeanContext</tt> is empty.
 A <tt>BeanContext</tt> is considered 
 empty when it contains zero 
 nested children.
 @return if there are not children

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.beancontext.BeanContextSupport.contains(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines whether or not the specified object 
 is currently a child of this <tt>BeanContext</tt>.
 @param o the Object in question
 @return if this object is a child

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.beancontext.BeanContextSupport.containsKey(Object o)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines whether or not the specified object 
 is currently a child of this <tt>BeanContext</tt>.
 @param o the Object in question
 @return if this object is a child

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator java.beans.beancontext.BeanContextSupport.iterator()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets all JavaBean or <tt>BeanContext</tt> instances 
 currently nested in this <tt>BeanContext</tt>.
 @return an <tt>Iterator</tt> of the nested children

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.beans.beancontext.BeanContextSupport.toArray()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets all JavaBean or <tt>BeanContext</tt> 
 instances currently nested in this BeanContext.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.beans.beancontext.BeanContextSupport.toArray(java.lang.Object[] arry)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets an array containing all children of 
 this <tt>BeanContext</tt> that match
 the types contained in arry.
 @param arry The array of object 
 types that are of interest.
 @return an array of children

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.beancontext.BeanContextSupport.BCSChild java.beans.beancontext.BeanContextSupport.createBCSChild(Object targetChild, Object peer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
 Subclasses can override this method to insert their own subclass
 of Child without having to override add() or the other Collection
 methods that add children to the set.
 </p>

 @param targetChild the child to create the Child on behalf of
 @param peer        the peer if the tragetChild and the peer are related by an implementation of BeanContextProxy

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.beancontext.BeanContextSupport.add(Object targetChild)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds/nests a child within this <tt>BeanContext</tt>.
 <p>
 Invoked as a side effect of java.beans.Beans.instantiate().
 If the child object is not valid for adding then this method
 throws an IllegalStateException.
 </p>


 @param targetChild The child objects to nest 
 within this <tt>BeanContext</tt>
 @return true if the child was added successfully.
 @see #validatePendingAdd

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.beancontext.BeanContextSupport.remove(Object targetChild)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a child from this BeanContext.  If the child object is not
 for adding then this method throws an IllegalStateException.
 @param targetChild The child objects to remove
 @see #validatePendingRemove

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.beans.beancontext.BeanContextSupport.remove(Object targetChild, boolean callChildSetBC)
<!-- END KEY -->
<!-- BEGIN DATA -->
 internal remove used when removal caused by 
 unexpected <tt>setBeanContext</tt> or
 by <tt>remove()</tt> invocation.
 @param targetChild the JavaBean, BeanContext, or Object to be removed
 @param callChildSetBC used to indicate that 
 the child should be notified that it is no 
 longer nested in this <tt>BeanContext</tt>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.beancontext.BeanContextSupport.containsAll(java.util.Collection c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tests to see if all objects in the
 specified <tt>Collection</tt> are children of
 this <tt>BeanContext</tt>.
 @param c the specified <tt>Collection</tt> 
 
 @return <tt>true</tt> if all objects 
 in the collection are children of 
 this <tt>BeanContext</tt>, false if not.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.beancontext.BeanContextSupport.addAll(java.util.Collection c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 add Collection to set of Children (Unsupported)
 implementations must synchronized on the hierarchy lock and "children" protected field
 @throws UnsupportedOperationException

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.beancontext.BeanContextSupport.removeAll(java.util.Collection c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 remove all specified children (Unsupported)
 implementations must synchronized on the hierarchy lock and "children" protected field
 @throws UnsupportedOperationException

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.beancontext.BeanContextSupport.retainAll(java.util.Collection c)
<!-- END KEY -->
<!-- BEGIN DATA -->
 retain only specified children (Unsupported)
 implementations must synchronized on the hierarchy lock and "children" protected field
 @throws UnsupportedOperationException

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextSupport.clear()
<!-- END KEY -->
<!-- BEGIN DATA -->
 clear the children (Unsupported)
 implementations must synchronized on the hierarchy lock and "children" protected field
 @throws UnsupportedOperationException

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextSupport.addBeanContextMembershipListener(BeanContextMembershipListener bcml)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Adds a BeanContextMembershipListener

 @param  bcml the BeanContextMembershipListener to add
 @throws NullPointerException

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextSupport.removeBeanContextMembershipListener(BeanContextMembershipListener bcml)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a BeanContextMembershipListener

 @param  bcml the BeanContextMembershipListener to remove
 @throws NullPointerException

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.io.InputStream java.beans.beancontext.BeanContextSupport.getResourceAsStream(String name, BeanContextChild bcc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @param name the name of the resource requested.
 @param bcc  the child object making the request.

 @return  the requested resource as an InputStream
 @throws  NullPointerException

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.net.URL java.beans.beancontext.BeanContextSupport.getResource(String name, BeanContextChild bcc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @param name the name of the resource requested.
 @param bcc  the child object making the request.

 @return the requested resource as an InputStream

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.beancontext.BeanContextSupport.setDesignTime(boolean dTime)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the new design time value for this <tt>BeanContext</tt>.
 @param dTime the new designTime value

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.beans.beancontext.BeanContextSupport.isDesignTime()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reports whether or not this object is in
 currently in design time mode.
 @return <tt>true</tt> if in design time mode, 
 <tt>false</tt> if not

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.beancontext.BeanContextSupport.setLocale(Locale newLocale) throws java.beans.PropertyVetoException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the locale of this BeanContext.
 @param newLocale the new locale. This method call will have
        no effect if newLocale is <CODE>null</CODE>.
 @throws PropertyVetoException if the new value is rejected

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.util.Locale java.beans.beancontext.BeanContextSupport.getLocale()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the locale for this <tt>BeanContext</tt>.

 @return the current Locale of the <tt>BeanContext</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.beans.beancontext.BeanContextSupport.needsGui()
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
 This method is typically called from the environment in order to determine
 if the implementor "needs" a GUI.
 </p>
 <p>
 The algorithm used herein tests the BeanContextPeer, and its current children
 to determine if they are either Containers, Components, or if they implement
 Visibility and return needsGui() == true.
 </p>
 @return <tt>true</tt> if the implementor needs a GUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.beancontext.BeanContextSupport.dontUseGui()
<!-- END KEY -->
<!-- BEGIN DATA -->
 notify this instance that it may no longer render a GUI.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.beancontext.BeanContextSupport.okToUseGui()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Notify this instance that it may now render a GUI

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.beancontext.BeanContextSupport.avoidingGui()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Used to determine if the <tt>BeanContext</tt> 
 child is avoiding using its GUI.
 @return is this instance avoiding using its GUI?
 @see Visibility

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.beancontext.BeanContextSupport.isSerializing()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Is this <tt>BeanContext</tt> in the 
 process of being serialized?
 @return if this <tt>BeanContext</tt> is 
 currently being serialized

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.util.Iterator java.beans.beancontext.BeanContextSupport.bcsChildren()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an iterator of all children 
 of this <tt>BeanContext</tt>.
 @return an iterator for all the current BCSChild values 

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.beans.beancontext.BeanContextSupport.bcsPreSerializationHook(ObjectOutputStream oos) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 called by writeObject after defaultWriteObject() but prior to
 serialization of currently serializable children.

 This method may be overridden by subclasses to perform custom
 serialization of their state prior to this superclass serializing
 the children.

 This method should not however be used by subclasses to replace their
 own implementation (if any) of writeObject().

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.beans.beancontext.BeanContextSupport.bcsPreDeserializationHook(ObjectInputStream ois) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 called by readObject after defaultReadObject() but prior to
 deserialization of any children.

 This method may be overridden by subclasses to perform custom
 deserialization of their state prior to this superclass deserializing
 the children.

 This method should not however be used by subclasses to replace their
 own implementation (if any) of readObject().

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.beans.beancontext.BeanContextSupport.childDeserializedHook(Object child, BeanContextSupport.BCSChild bcsc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called by readObject with the newly deserialized child and BCSChild.
 @param child the newly deserialized child
 @param bcsc the newly deserialized BCSChild

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void java.beans.beancontext.BeanContextSupport.serialize(ObjectOutputStream oos, java.util.Collection coll) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Used by writeObject to serialize a Collection.
 @param oos the <tt>ObjectOutputStream</tt> 
 to use during serialization
 @param coll the <tt>Collection</tt> to serialize
 @throws IOException if serialization failed

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void java.beans.beancontext.BeanContextSupport.deserialize(ObjectInputStream ois, java.util.Collection coll) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 used by readObject to deserialize a collection.
 @param ois the ObjectInputStream to use
 @param coll the Collection

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.beans.beancontext.BeanContextSupport.writeChildren(ObjectOutputStream oos) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->

 Used to serialize all children of 
 this <tt>BeanContext</tt>.
 @param oos the <tt>ObjectOutputStream</tt> 
 to use during serialization
 @throws IOException if serialization failed

<!-- END DATA -->
<!-- BEGIN KEY -->
public final void java.beans.beancontext.BeanContextSupport.readChildren(ObjectInputStream ois) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 When an instance of this class is used as a delegate for the
 implementation of the BeanContext protocols (and its subprotocols)
 there exists a 'chicken and egg' problem during deserialization 

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextSupport.vetoableChange(PropertyChangeEvent pce) throws java.beans.PropertyVetoException
<!-- END KEY -->
<!-- BEGIN DATA -->
 subclasses may envelope to monitor veto child property changes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextSupport.propertyChange(PropertyChangeEvent pce)
<!-- END KEY -->
<!-- BEGIN DATA -->
 subclasses may envelope to monitor child property changes.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.beans.beancontext.BeanContextSupport.validatePendingAdd(Object targetChild)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
 Subclasses of this class may override, or envelope, this method to
 add validation behavior for the BeanContext to examine child objects
 immediately prior to their being added to the BeanContext. 
 </p>

 @return true iff the child may be added to this BeanContext, otherwise false.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.beans.beancontext.BeanContextSupport.validatePendingRemove(Object targetChild)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
 Subclasses of this class may override, or envelope, this method to
 add validation behavior for the BeanContext to examine child objects
 immediately prior to their being removed from the BeanContext. 
 </p>

 @return true iff the child may be removed from this BeanContext, otherwise false.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.beans.beancontext.BeanContextSupport.childJustAddedHook(Object child, BeanContextSupport.BCSChild bcsc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 subclasses may override this method to simply extend add() semantics
 after the child has been added and before the event notification has
 occurred. The method is called with the child synchronized.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.beans.beancontext.BeanContextSupport.childJustRemovedHook(Object child, BeanContextSupport.BCSChild bcsc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 subclasses may override this method to simply extend remove() semantics
 after the child has been removed and before the event notification has
 occurred. The method is called with the child synchronized.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static final java.beans.Visibility java.beans.beancontext.BeanContextSupport.getChildVisibility(Object child)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the Component (if any) associated with the specified child.
 @param child the specified child
 @return the Component (if any) associated with the specified child.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static final java.io.Serializable java.beans.beancontext.BeanContextSupport.getChildSerializable(Object child)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the Serializable (if any) associated with the specified Child
 @param child the specified child
 @return the Serializable (if any) associated with the specified Child

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static final java.beans.PropertyChangeListener java.beans.beancontext.BeanContextSupport.getChildPropertyChangeListener(Object child)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the PropertyChangeListener 
 (if any) of the specified child
 @param child the specified child
 @return the PropertyChangeListener (if any) of the specified child

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static final java.beans.VetoableChangeListener java.beans.beancontext.BeanContextSupport.getChildVetoableChangeListener(Object child)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the VetoableChangeListener 
 (if any) of the specified child
 @param child the specified child
 @return the VetoableChangeListener (if any) of the specified child

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static final java.beans.beancontext.BeanContextMembershipListener java.beans.beancontext.BeanContextSupport.getChildBeanContextMembershipListener(Object child)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the BeanContextMembershipListener 
 (if any) of the specified child
 @param child the specified child
 @return the BeanContextMembershipListener (if any) of the specified child

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static final java.beans.beancontext.BeanContextChild java.beans.beancontext.BeanContextSupport.getChildBeanContextChild(Object child)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the BeanContextChild (if any) of the specified child
 @param child the specified child
 @return  the BeanContextChild (if any) of the specified child
 @throws  IllegalArgumentException if child implements both BeanContextChild and BeanContextProxy

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void java.beans.beancontext.BeanContextSupport.fireChildrenAdded(BeanContextMembershipEvent bcme)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fire a BeanContextshipEvent on the BeanContextMembershipListener interface

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void java.beans.beancontext.BeanContextSupport.fireChildrenRemoved(BeanContextMembershipEvent bcme)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fire a BeanContextshipEvent on the BeanContextMembershipListener interface

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.beans.beancontext.BeanContextSupport.initialize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 protected method called from constructor and readObject to initialize
 transient state of BeanContextSupport instance.

 This class uses this method to instantiate inner class listeners used
 to monitor PropertyChange and VetoableChange events on children.

 subclasses may envelope this method to add their own initialization
 behavior

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final java.lang.Object[] java.beans.beancontext.BeanContextSupport.copyChildren()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets a copy of the this BeanContext's children.
 @return a copy of the current nested children

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static final boolean java.beans.beancontext.BeanContextSupport.classEquals(java.lang.Class first, java.lang.Class second)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Tests to see if two class objects, 
 or their names are equal.
 @param first the first object
 @param second the second object
 @return true if equal, false if not

<!-- END DATA -->
<!-- BEGIN KEY -->
private synchronized void java.beans.beancontext.BeanContextSupport.readObject(ObjectInputStream ois) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 deserialize contents ... if this instance has a distinct peer the
 children are *not* serialized here, the peer's readObject() must call
 readChildren() after deserializing this instance.

<!-- END DATA -->
<!-- BEGIN KEY -->
private synchronized void java.beans.beancontext.BeanContextSupport.writeObject(ObjectOutputStream oos) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Serialize the BeanContextSupport, if this instance has a distinct 
 peer (that is this object is acting as a delegate for another) then
 the children of this instance are not serialized here due to a 
 'chicken and egg' problem that occurs on deserialization of the 
 children at the same time as this instance. 

 Therefore in situations where there is a distinct peer to this instance
 it should always call writeObject() followed by writeChildren() and
 readObject() followed by readChildren().

 @param oos the ObjectOutputStream

<!-- END DATA -->
