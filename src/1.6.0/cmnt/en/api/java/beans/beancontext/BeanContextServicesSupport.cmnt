<!-- BEGIN KEY -->
public class java.beans.beancontext.BeanContextServicesSupport extends java.beans.beancontext.BeanContextSupport implements java.beans.beancontext.BeanContextServices
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
 This helper class provides a utility implementation of the
 java.beans.beancontext.BeanContextServices interface.
 </p>
 <p>
 Since this class directly implements the BeanContextServices interface,
 the class can, and is intended to be used either by subclassing this
 implementation, or via delegation of an instance of this class
 from another through the BeanContextProxy interface.
 </p>

 @author Laurence P. G. Cable
 @version 1.24, 11/17/05
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient java.util.HashMap java.beans.beancontext.BeanContextServicesSupport.services
<!-- END KEY -->
<!-- BEGIN DATA -->
 all accesses to the <code> protected transient HashMap services </code>
 field should be synchronized on that object

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient int java.beans.beancontext.BeanContextServicesSupport.serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 The number of instances of a serializable <tt>BeanContextServceProvider</tt>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient java.beans.beancontext.BeanContextServicesSupport.BCSSProxyServiceProvider java.beans.beancontext.BeanContextServicesSupport.proxy
<!-- END KEY -->
<!-- BEGIN DATA -->
 Delegate for the <tt>BeanContextServiceProvider</tt>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient java.util.ArrayList java.beans.beancontext.BeanContextServicesSupport.bcsListeners
<!-- END KEY -->
<!-- BEGIN DATA -->
 List of <tt>BeanContextServicesListener</tt> objects.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextServicesSupport(BeanContextServices peer, Locale lcle, boolean dTime, boolean visible)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
 Construct a BeanContextServicesSupport instance
 </p>

 @param peer	The peer BeanContext we are supplying an implementation for, if null the this object is its own peer
 @param lcle	The current Locale for this BeanContext.
 @param dtime	The initial state, true if in design mode, false if runtime.
 @param visible	The initial visibility.
 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextServicesSupport(BeanContextServices peer, Locale lcle, boolean dtime)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create an instance using the specified Locale and design mode.

 @param peer	The peer BeanContext we are supplying an implementation for, if null the this object is its own peer
 @param lcle	The current Locale for this BeanContext.
 @param dtime	The initial state, true if in design mode, false if runtime.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextServicesSupport(BeanContextServices peer, Locale lcle)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create an instance using the specified locale

 @param peer	The peer BeanContext we are supplying an implementation for, if null the this object is its own peer
 @param lcle	The current Locale for this BeanContext.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextServicesSupport(BeanContextServices peer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create an instance with a peer

 @param peer	The peer BeanContext we are supplying an implementation for, if null the this object is its own peer

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextServicesSupport()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Create an instance that is not a delegate of another object

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextServicesSupport.initialize()
<!-- END KEY -->
<!-- BEGIN DATA -->
 called by BeanContextSupport superclass during construction and 
 deserialization to initialize subclass transient state.

 subclasses may envelope this method, but should not override it or
 call it directly.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextServices java.beans.beancontext.BeanContextServicesSupport.getBeanContextServicesPeer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <tt>BeanContextServices</tt> associated with this
 <tt>BeanContextServicesSupport</tt>.

 @return the instance of <tt>BeanContext</tt> 
 this object is providing the implementation for.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.beancontext.BeanContextSupport.BCSChild java.beans.beancontext.BeanContextServicesSupport.createBCSChild(Object targetChild, Object peer)
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
 Subclasses can override this method to insert their own subclass
 of Child without having to override add() or the other Collection
 methods that add children to the set.
 </p>

 @param targetChild the child to create the Child on behalf of
 @param peer        the peer if the targetChild and peer are related by BeanContextProxy

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.beancontext.BeanContextServicesSupport.BCSSServiceProvider java.beans.beancontext.BeanContextServicesSupport.createBCSSServiceProvider(java.lang.Class sc, BeanContextServiceProvider bcsp)
<!-- END KEY -->
<!-- BEGIN DATA -->
 subclasses can override this method to create new subclasses of
 BCSSServiceProvider without having to overrride addService() in
 order to instantiate.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextServicesSupport.addBeanContextServicesListener(BeanContextServicesListener bcsl)
<!-- END KEY -->
<!-- BEGIN DATA -->
 add a BeanContextServicesListener

 @throw new NullPointerException

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextServicesSupport.removeBeanContextServicesListener(BeanContextServicesListener bcsl)
<!-- END KEY -->
<!-- BEGIN DATA -->
 remove a BeanContextServicesListener

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.beancontext.BeanContextServicesSupport.addService(java.lang.Class serviceClass, BeanContextServiceProvider bcsp)
<!-- END KEY -->
<!-- BEGIN DATA -->
 add a service

<!-- END DATA -->
<!-- BEGIN KEY -->
protected boolean java.beans.beancontext.BeanContextServicesSupport.addService(java.lang.Class serviceClass, BeanContextServiceProvider bcsp, boolean fireEvent)
<!-- END KEY -->
<!-- BEGIN DATA -->
 add a service

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextServicesSupport.revokeService(java.lang.Class serviceClass, BeanContextServiceProvider bcsp, boolean revokeCurrentServicesNow)
<!-- END KEY -->
<!-- BEGIN DATA -->
 remove a service

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.beans.beancontext.BeanContextServicesSupport.hasService(java.lang.Class serviceClass)
<!-- END KEY -->
<!-- BEGIN DATA -->
 has a service, which may be delegated

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.beans.beancontext.BeanContextServicesSupport.getService(BeanContextChild child, Object requestor, java.lang.Class serviceClass, Object serviceSelector, BeanContextServiceRevokedListener bcsrl) throws java.util.TooManyListenersException
<!-- END KEY -->
<!-- BEGIN DATA -->
 obtain a service which may be delegated

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextServicesSupport.releaseService(BeanContextChild child, Object requestor, Object service)
<!-- END KEY -->
<!-- BEGIN DATA -->
 release a service

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator java.beans.beancontext.BeanContextServicesSupport.getCurrentServiceClasses()
<!-- END KEY -->
<!-- BEGIN DATA -->
 @return an iterator for all the currently registered service classes.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.util.Iterator java.beans.beancontext.BeanContextServicesSupport.getCurrentServiceSelectors(java.lang.Class serviceClass)
<!-- END KEY -->
<!-- BEGIN DATA -->
 @return an iterator for all the currently available service selectors
 (if any) available for the specified service.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextServicesSupport.serviceAvailable(BeanContextServiceAvailableEvent bcssae)
<!-- END KEY -->
<!-- BEGIN DATA -->
 BeanContextServicesListener callback, propagates event to all 
 currently registered listeners and BeanContextServices children,
 if this BeanContextService does not already implement this service
 itself.

 subclasses may override or envelope this method to implement their
 own propagation semantics.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextServicesSupport.serviceRevoked(BeanContextServiceRevokedEvent bcssre)
<!-- END KEY -->
<!-- BEGIN DATA -->
 BeanContextServicesListener callback, propagates event to all 
 currently registered listeners and BeanContextServices children,
 if this BeanContextService does not already implement this service
 itself.

 subclasses may override or envelope this method to implement their
 own propagation semantics.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected static final java.beans.beancontext.BeanContextServicesListener java.beans.beancontext.BeanContextServicesSupport.getChildBeanContextServicesListener(Object child)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <tt>BeanContextServicesListener</tt> (if any) of the specified
 child.

 @param child the specified child
 @return the BeanContextServicesListener (if any) of the specified child

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.beans.beancontext.BeanContextServicesSupport.childJustRemovedHook(Object child, BeanContextSupport.BCSChild bcsc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 called from superclass child removal operations after a child
 has been successfully removed. called with child synchronized.

 This subclass uses this hook to immediately revoke any services
 being used by this child if it is a BeanContextChild.

 subclasses may envelope this method in order to implement their
 own child removal side-effects.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.beans.beancontext.BeanContextServicesSupport.releaseBeanContextResources()
<!-- END KEY -->
<!-- BEGIN DATA -->
 called from setBeanContext to notify a BeanContextChild
 to release resources obtained from the nesting BeanContext.
 
 This method revokes any services obtained from its parent.
 
 subclasses may envelope this method to implement their own semantics.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.beans.beancontext.BeanContextServicesSupport.initializeBeanContextResources()
<!-- END KEY -->
<!-- BEGIN DATA -->
 called from setBeanContext to notify a BeanContextChild
 to allocate resources obtained from the nesting BeanContext.
 
 subclasses may envelope this method to implement their own semantics.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void java.beans.beancontext.BeanContextServicesSupport.fireServiceAdded(java.lang.Class serviceClass)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fires a <tt>BeanContextServiceEvent</tt> notifying of a new service.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void java.beans.beancontext.BeanContextServicesSupport.fireServiceAdded(BeanContextServiceAvailableEvent bcssae)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fires a <tt>BeanContextServiceAvailableEvent</tt> indicating that a new
 service has become available.

 @param bcssae the <tt>BeanContextServiceAvailableEvent</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void java.beans.beancontext.BeanContextServicesSupport.fireServiceRevoked(BeanContextServiceRevokedEvent bcsre)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fires a <tt>BeanContextServiceEvent</tt> notifying of a service being revoked.

 @param bcsre the <tt>BeanContextServiceRevokedEvent</tt>

<!-- END DATA -->
<!-- BEGIN KEY -->
protected final void java.beans.beancontext.BeanContextServicesSupport.fireServiceRevoked(java.lang.Class serviceClass, boolean revokeNow)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fires a <tt>BeanContextServiceRevokedEvent</tt> 
 indicating that a particular service is 
 no longer available.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.beans.beancontext.BeanContextServicesSupport.bcsPreSerializationHook(ObjectOutputStream oos) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 called from BeanContextSupport writeObject before it serializes the
 children ...

 This class will serialize any Serializable BeanContextServiceProviders
 herein.

 subclasses may envelope this method to insert their own serialization
 processing that has to occur prior to serialization of the children

<!-- END DATA -->
<!-- BEGIN KEY -->
protected synchronized void java.beans.beancontext.BeanContextServicesSupport.bcsPreDeserializationHook(ObjectInputStream ois) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 called from BeanContextSupport readObject before it deserializes the
 children ...

 This class will deserialize any Serializable BeanContextServiceProviders
 serialized earlier thus making them available to the children when they
 deserialized.

 subclasses may envelope this method to insert their own serialization
 processing that has to occur prior to serialization of the children

<!-- END DATA -->
<!-- BEGIN KEY -->
private synchronized void java.beans.beancontext.BeanContextServicesSupport.readObject(ObjectInputStream ois) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 deserialize the instance

<!-- END DATA -->
<!-- BEGIN KEY -->
private synchronized void java.beans.beancontext.BeanContextServicesSupport.writeObject(ObjectOutputStream oos) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 serialize the instance

<!-- END DATA -->
