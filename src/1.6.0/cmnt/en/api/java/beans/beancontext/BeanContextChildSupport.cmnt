<!-- BEGIN KEY -->
public class java.beans.beancontext.BeanContextChildSupport extends java.lang.Object implements java.beans.beancontext.BeanContextChild, java.beans.beancontext.BeanContextServicesListener, java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 <p>
 This is a general support class to provide support for implementing the
 BeanContextChild protocol.
 
 This class may either be directly subclassed, or encapsulated and delegated
 to in order to implement this interface for a given component.
 </p>

 @author	Laurence P. G. Cable
 @version	1.17, 11/17/05
 @since	1.2
 
 @see	java.beans.beancontext.BeanContext
 @see	java.beans.beancontext.BeanContextServices
 @see	java.beans.beancontext.BeanContextChild

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextChild java.beans.beancontext.BeanContextChildSupport.beanContextChildPeer
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <code>BeanContext</code> in which 
 this <code>BeanContextChild</code> is nested.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.PropertyChangeSupport java.beans.beancontext.BeanContextChildSupport.pcSupport
<!-- END KEY -->
<!-- BEGIN DATA -->

 The <tt>PropertyChangeSupport</tt> associated with this
 <tt>BeanContextChildSupport</tt>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected java.beans.VetoableChangeSupport java.beans.beancontext.BeanContextChildSupport.vcSupport
<!-- END KEY -->
<!-- BEGIN DATA -->
 The <tt>VetoableChangeSupport</tt> associated with this
 <tt>BeanContextChildSupport</tt>.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected transient boolean java.beans.beancontext.BeanContextChildSupport.rejectedSetBCOnce
<!-- END KEY -->
<!-- BEGIN DATA -->
 A flag indicating that there has been
 at least one <code>PropertyChangeVetoException</code>
 thrown for the attempted setBeanContext operation.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextChildSupport()
<!-- END KEY -->
<!-- BEGIN DATA -->
 construct a BeanContextChildSupport where this class has been 
 subclassed in order to implement the JavaBean component itself.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextChildSupport(BeanContextChild bcc)
<!-- END KEY -->
<!-- BEGIN DATA -->
 construct a BeanContextChildSupport where the JavaBean component
 itself implements BeanContextChild, and encapsulates this, delegating
 that interface to this implementation

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.beancontext.BeanContextChildSupport.setBeanContext(BeanContext bc) throws java.beans.PropertyVetoException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the <code>BeanContext</code> for 
 this <code>BeanContextChildSupport</code>.
 @param bc the new value to be assigned to the <code>BeanContext</code> 
 property
 @throws <code>PropertyVetoException</code> if the change is rejected

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.beans.beancontext.BeanContext java.beans.beancontext.BeanContextChildSupport.getBeanContext()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the nesting <code>BeanContext</code> 
 for this <code>BeanContextChildSupport</code>.
 @return the nesting <code>BeanContext</code> for 
 this <code>BeanContextChildSupport</code>.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChildSupport.addPropertyChangeListener(String name, PropertyChangeListener pcl)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Add a PropertyChangeListener for a specific property.
 The same listener object may be added more than once.  For each
 property,  the listener will be invoked the number of times it was added
 for that property.
 If <code>name</code> or <code>pcl</code> is null, no exception is thrown
 and no action is taken.

 @param name The name of the property to listen on
 @param pcl The <code>PropertyChangeListener</code> to be added

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChildSupport.removePropertyChangeListener(String name, PropertyChangeListener pcl)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Remove a PropertyChangeListener for a specific property.
 If <code>pcl</code> was added more than once to the same event
 source for the specified property, it will be notified one less time
 after being removed.
 If <code>name</code> is null, no exception is thrown
 and no action is taken.
 If <code>pcl</code> is null, or was never added for the specified
 property, no exception is thrown and no action is taken.

 @param name The name of the property that was listened on
 @param pcl The PropertyChangeListener to be removed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChildSupport.addVetoableChangeListener(String name, VetoableChangeListener vcl)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Add a VetoableChangeListener for a specific property.
 The same listener object may be added more than once.  For each
 property,  the listener will be invoked the number of times it was added
 for that property.
 If <code>name</code> or <code>vcl</code> is null, no exception is thrown
 and no action is taken.

 @param name The name of the property to listen on
 @param vcl The <code>VetoableChangeListener</code> to be added

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChildSupport.removeVetoableChangeListener(String name, VetoableChangeListener vcl)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Removes a <code>VetoableChangeListener</code>.
 If <code>pcl</code> was added more than once to the same event
 source for the specified property, it will be notified one less time
 after being removed.
 If <code>name</code> is null, no exception is thrown
 and no action is taken.
 If <code>vcl</code> is null, or was never added for the specified
 property, no exception is thrown and no action is taken.

 @param name The name of the property that was listened on
 @param vcl The <code>VetoableChangeListener</code> to be removed

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChildSupport.serviceRevoked(BeanContextServiceRevokedEvent bcsre)
<!-- END KEY -->
<!-- BEGIN DATA -->
 A service provided by the nesting BeanContext has been revoked.
 
 Subclasses may override this method in order to implement their own
 behaviors.
 @param bcsre The <code>BeanContextServiceRevokedEvent</code> fired as a 
 result of a service being revoked

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChildSupport.serviceAvailable(BeanContextServiceAvailableEvent bcsae)
<!-- END KEY -->
<!-- BEGIN DATA -->
 A new service is available from the nesting BeanContext.
 
 Subclasses may override this method in order to implement their own
 behaviors 
 @param bcsae The BeanContextServiceAvailableEvent fired as a
 result of a service becoming available
 

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.beancontext.BeanContextChild java.beans.beancontext.BeanContextChildSupport.getBeanContextChildPeer()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the <tt>BeanContextChild</tt> associated with this 
 <tt>BeanContextChildSupport</tt>.

 @return the <tt>BeanContextChild</tt> peer of this class

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.beancontext.BeanContextChildSupport.isDelegated()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Reports whether or not this class is a delegate of another.
 
 @return true if this class is a delegate of another

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChildSupport.firePropertyChange(String name, Object oldValue, Object newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Report a bound property update to any registered listeners. No event is
 fired if old and new are equal and non-null.
 @param name The programmatic name of the property that was changed
 @param oldValue  The old value of the property
 @param newValue  The new value of the property

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.beancontext.BeanContextChildSupport.fireVetoableChange(String name, Object oldValue, Object newValue) throws java.beans.PropertyVetoException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Report a vetoable property update to any registered listeners. 
 If anyone vetos the change, then fire a new event 
 reverting everyone to the old value and then rethrow 
 the PropertyVetoException. <P>

 No event is fired if old and new are equal and non-null.
 <P>
 @param name The programmatic name of the property that is about to
 change
 
 @param oldValue The old value of the property
 @param newValue - The new value of the property
 
 @throws PropertyVetoException if the recipient wishes the property
 change to be rolled back.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.beancontext.BeanContextChildSupport.validatePendingSetBeanContext(BeanContext newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Called from setBeanContext to validate (or otherwise) the
 pending change in the nesting BeanContext property value.
 Returning false will cause setBeanContext to throw
 PropertyVetoException.
 @param newValue the new value that has been requested for 
  the BeanContext property
 @return <code>true</code> if the change operation is to be vetoed

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.beans.beancontext.BeanContextChildSupport.releaseBeanContextResources()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method may be overridden by subclasses to provide their own
 release behaviors. When invoked any resources held by this instance
 obtained from its current BeanContext property should be released
 since the object is no longer nested within that BeanContext.

<!-- END DATA -->
<!-- BEGIN KEY -->
protected void java.beans.beancontext.BeanContextChildSupport.initializeBeanContextResources()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method may be overridden by subclasses to provide their own
 initialization behaviors. When invoked any resources requried by the
 BeanContextChild should be obtained from the current BeanContext.

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.beans.beancontext.BeanContextChildSupport.readObject(ObjectInputStream ois) throws java.io.IOException, java.lang.ClassNotFoundException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Restore a persistent object, must wait for subsequent setBeanContext()
 to fully restore any resources obtained from the new nesting 
 BeanContext

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.beans.beancontext.BeanContextChildSupport.writeObject(ObjectOutputStream oos) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Write the persistence state of the object.

<!-- END DATA -->
