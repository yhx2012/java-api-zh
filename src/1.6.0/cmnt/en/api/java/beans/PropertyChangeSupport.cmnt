<!-- BEGIN KEY -->
public class java.beans.PropertyChangeSupport extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 This is a utility class that can be used by beans that support bound
 properties.  You can use an instance of this class as a member field
 of your bean and delegate various work to it.

 This class is serializable.  When it is serialized it will save
 (and restore) any listeners that are themselves serializable.  Any
 non-serializable listeners will be skipped during serialization.


<!-- END DATA -->
<!-- BEGIN KEY -->
private java.util.Hashtable java.beans.PropertyChangeSupport.children
<!-- END KEY -->
<!-- BEGIN DATA -->

 Hashtable for managing listeners for specific properties.
 Maps property names to PropertyChangeSupport objects.
 @serial 
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Object java.beans.PropertyChangeSupport.source
<!-- END KEY -->
<!-- BEGIN DATA -->

 The object to be provided as the "source" for any generated events.
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.beans.PropertyChangeSupport.propertyChangeSupportSerializedDataVersion
<!-- END KEY -->
<!-- BEGIN DATA -->
 Internal version number
 @serial
 @since

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.PropertyChangeSupport(Object sourceBean)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>PropertyChangeSupport</code> object.

 @param sourceBean  The bean to be given as the source for any events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.PropertyChangeSupport.addPropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Add a PropertyChangeListener to the listener list.
 The listener is registered for all properties.
 The same listener object may be added more than once, and will be called
 as many times as it is added.
 If <code>listener</code> is null, no exception is thrown and no action
 is taken.

 @param listener  The PropertyChangeListener to be added

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.PropertyChangeSupport.removePropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Remove a PropertyChangeListener from the listener list.
 This removes a PropertyChangeListener that was registered
 for all properties.
 If <code>listener</code> was added more than once to the same event
 source, it will be notified one less time after being removed.
 If <code>listener</code> is null, or was never added, no exception is
 thrown and no action is taken.

 @param listener  The PropertyChangeListener to be removed

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.beans.PropertyChangeListener[] java.beans.PropertyChangeSupport.getPropertyChangeListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the listeners that were added to the
 PropertyChangeSupport object with addPropertyChangeListener().
 <p>
 If some listeners have been added with a named property, then
 the returned array will be a mixture of PropertyChangeListeners
 and <code>PropertyChangeListenerProxy</code>s. If the calling
 method is interested in distinguishing the listeners then it must
 test each element to see if it's a
 <code>PropertyChangeListenerProxy</code>, perform the cast, and examine
 the parameter.
 
 <pre>
 PropertyChangeListener[] listeners = bean.getPropertyChangeListeners();
 for (int i = 0; i < listeners.length; i++) {
	 if (listeners[i] instanceof PropertyChangeListenerProxy) {
     PropertyChangeListenerProxy proxy = 
                    (PropertyChangeListenerProxy)listeners[i];
     if (proxy.getPropertyName().equals("foo")) {
       // proxy is a PropertyChangeListener which was associated
       // with the property named "foo"
     }
   }
 }
</pre>

 @see PropertyChangeListenerProxy
 @return all of the <code>PropertyChangeListeners</code> added or an 
         empty array if no listeners have been added
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.PropertyChangeSupport.addPropertyChangeListener(String propertyName, PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Add a PropertyChangeListener for a specific property.  The listener
 will be invoked only when a call on firePropertyChange names that
 specific property.
 The same listener object may be added more than once.  For each
 property,  the listener will be invoked the number of times it was added
 for that property.
 If <code>propertyName</code> or <code>listener</code> is null, no
 exception is thrown and no action is taken.

 @param propertyName  The name of the property to listen on.
 @param listener  The PropertyChangeListener to be added

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.PropertyChangeSupport.removePropertyChangeListener(String propertyName, PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Remove a PropertyChangeListener for a specific property.
 If <code>listener</code> was added more than once to the same event
 source for the specified property, it will be notified one less time
 after being removed.
 If <code>propertyName</code> is null,  no exception is thrown and no
 action is taken.
 If <code>listener</code> is null, or was never added for the specified
 property, no exception is thrown and no action is taken.

 @param propertyName  The name of the property that was listened on.
 @param listener  The PropertyChangeListener to be removed

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.beans.PropertyChangeListener[] java.beans.PropertyChangeSupport.getPropertyChangeListeners(String propertyName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the listeners which have been associated 
 with the named property.

 @param propertyName  The name of the property being listened to
 @return all of the <code>PropertyChangeListeners</code> associated with
         the named property.  If no such listeners have been added,
         or if <code>propertyName</code> is null, an empty array is
         returned.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyChangeSupport.firePropertyChange(String propertyName, Object oldValue, Object newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Report a bound property update to any registered listeners.
 No event is fired if old and new are equal and non-null.

 <p>
 This is merely a convenience wrapper around the more general
 firePropertyChange method that takes {@code
 PropertyChangeEvent} value.

 @param propertyName  The programmatic name of the property
		that was changed.
 @param oldValue  The old value of the property.
 @param newValue  The new value of the property.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyChangeSupport.firePropertyChange(String propertyName, int oldValue, int newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Report an int bound property update to any registered listeners.
 No event is fired if old and new are equal.
 <p>
 This is merely a convenience wrapper around the more general
 firePropertyChange method that takes Object values.

 @param propertyName  The programmatic name of the property
		that was changed.
 @param oldValue  The old value of the property.
 @param newValue  The new value of the property.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyChangeSupport.firePropertyChange(String propertyName, boolean oldValue, boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Report a boolean bound property update to any registered listeners.
 No event is fired if old and new are equal.
 <p>
 This is merely a convenience wrapper around the more general
 firePropertyChange method that takes Object values.

 @param propertyName  The programmatic name of the property
		that was changed.
 @param oldValue  The old value of the property.
 @param newValue  The new value of the property.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeEvent evt)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fire an existing PropertyChangeEvent to any registered listeners.
 No event is fired if the given event's old and new values are
 equal and non-null.
 @param evt  The PropertyChangeEvent object.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyChangeSupport.fireIndexedPropertyChange(String propertyName, int index, Object oldValue, Object newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Report a bound indexed property update to any registered
 listeners. 
 <p>
 No event is fired if old and new values are equal
 and non-null.

 <p>
 This is merely a convenience wrapper around the more general
 firePropertyChange method that takes {@code PropertyChangeEvent} value.

 @param propertyName The programmatic name of the property that
                     was changed.
 @param index        index of the property element that was changed.
 @param oldValue     The old value of the property.
 @param newValue     The new value of the property.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyChangeSupport.fireIndexedPropertyChange(String propertyName, int index, int oldValue, int newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Report an <code>int</code> bound indexed property update to any registered 
 listeners. 
 <p>
 No event is fired if old and new values are equal.
 <p>
 This is merely a convenience wrapper around the more general
 fireIndexedPropertyChange method which takes Object values.

 @param propertyName The programmatic name of the property that
                     was changed.
 @param index        index of the property element that was changed.
 @param oldValue     The old value of the property.
 @param newValue     The new value of the property.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyChangeSupport.fireIndexedPropertyChange(String propertyName, int index, boolean oldValue, boolean newValue)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Report a <code>boolean</code> bound indexed property update to any 
 registered listeners. 
 <p>
 No event is fired if old and new values are equal.
 <p>
 This is merely a convenience wrapper around the more general
 fireIndexedPropertyChange method which takes Object values.

 @param propertyName The programmatic name of the property that
                     was changed.
 @param index        index of the property element that was changed.
 @param oldValue     The old value of the property.
 @param newValue     The new value of the property.
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.beans.PropertyChangeSupport.hasListeners(String propertyName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Check if there are any listeners for a specific property, including
 those registered on all properties.  If <code>propertyName</code>
 is null, only check for listeners registered on all properties.

 @param propertyName  the property name.
 @return true if there are one or more listeners for the given property

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.beans.PropertyChangeSupport.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serialData Null terminated list of <code>PropertyChangeListeners</code>.
 <p>
 At serialization time we skip non-serializable listeners and
 only serialize the serializable listeners.


<!-- END DATA -->
