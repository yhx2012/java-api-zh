<!-- BEGIN KEY -->
public class java.beans.Statement extends java.lang.Object
<!-- END KEY -->
<!-- BEGIN DATA -->
 A <code>Statement</code> object represents a primitive statement
 in which a single method is applied to a target and
 a set of arguments - as in <code>"a.setFoo(b)"</code>.
 Note that where this example uses names
 to denote the target and its argument, a statement
 object does not require a name space and is constructed with
 the values themselves.
 The statement object associates the named method
 with its environment as a simple set of values:
 the target and an array of argument values.

 @since 1.4

 @version 1.31 05/23/06
 @author Philip Milne

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.Statement(Object target, String methodName, java.lang.Object[] arguments)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Creates a new <code>Statement</code> object with a <code>target</code>,
 <code>methodName</code> and <code>arguments</code> as per the parameters.

 @param target The target of this statement.
 @param methodName The methodName of this statement.
 @param arguments The arguments of this statement. If <code>null</code> then an empty array will be used.


<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.beans.Statement.getTarget()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the target of this statement.

 @return The target of this statement.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.beans.Statement.getMethodName()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the name of the method.

 @return The name of the method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object[] java.beans.Statement.getArguments()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the arguments of this statement.

 @return the arguments of this statement.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.Statement.execute() throws java.lang.Exception
<!-- END KEY -->
<!-- BEGIN DATA -->
 The execute method finds a method whose name is the same
 as the methodName property, and invokes the method on
 the target.

 When the target's class defines many methods with the given name
 the implementation should choose the most specific method using
 the algorithm specified in the Java Language Specification
 (15.11). The dynamic class of the target and arguments are used
 in place of the compile-time type information and, like the
 <code>java.lang.reflect.Method</code> class itself, conversion between
 primitive values and their associated wrapper classes is handled
 internally.
 <p>
 The following method types are handled as special cases:
 <ul>
 <li>
 Static methods may be called by using a class object as the target.
 <li>
 The reserved method name "new" may be used to call a class's constructor
 as if all classes defined static "new" methods. Constructor invocations
 are typically considered <code>Expression</code>s rather than <code>Statement</code>s
 as they return a value.
 <li>
 The method names "get" and "set" defined in the <code>java.util.List</code>
 interface may also be applied to array instances, mapping to
 the static methods of the same name in the <code>Array</code> class.
 </ul>

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.beans.Statement.toString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Prints the value of this statement using a Java-style syntax.

<!-- END DATA -->
