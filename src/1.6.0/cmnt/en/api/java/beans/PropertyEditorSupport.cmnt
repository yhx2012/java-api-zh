<!-- BEGIN KEY -->
public class java.beans.PropertyEditorSupport extends java.lang.Object implements java.beans.PropertyEditor
<!-- END KEY -->
<!-- BEGIN DATA -->
 This is a support class to help build property editors.
 <p>
 It can be used either as a base class or as a delagatee.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.PropertyEditorSupport()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>PropertyEditorSupport</code> object.
 
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.PropertyEditorSupport(Object source)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>PropertyEditorSupport</code> object.

 @param source the source used for event firing
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.beans.PropertyEditorSupport.getSource()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the bean that is used as the
 source of events. If the source has not
 been explicitly set then this instance of
 <code>PropertyEditorSupport</code> is returned.

 @return the source object or this instance
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyEditorSupport.setSource(Object source)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the source bean.
 <p>
 The source bean is used as the source of events
 for the property changes. This source should be used for information
 purposes only and should not be modified by the PropertyEditor.

 @param source source object to be used for events
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyEditorSupport.setValue(Object value)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Set (or change) the object that is to be edited.

 @param value The new target object to be edited.  Note that this
     object should not be modified by the PropertyEditor, rather 
     the PropertyEditor should create a new object to hold any
     modified value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Object java.beans.PropertyEditorSupport.getValue()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the value of the property.

 @return The value of the property.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.PropertyEditorSupport.isPaintable()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines whether the class will honor the paintValue method.

 @return  True if the class will honor the paintValue method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyEditorSupport.paintValue(Graphics gfx, Rectangle box)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Paint a representation of the value into a given area of screen
 real estate.  Note that the propertyEditor is responsible for doing
 its own clipping so that it fits into the given rectangle.
 <p>
 If the PropertyEditor doesn't honor paint requests (see isPaintable)
 this method should be a silent noop.

 @param gfx  Graphics object to paint into.
 @param box  Rectangle within graphics object into which we should paint.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.beans.PropertyEditorSupport.getJavaInitializationString()
<!-- END KEY -->
<!-- BEGIN DATA -->
 This method is intended for use when generating Java code to set
 the value of the property.  It should return a fragment of Java code
 that can be used to initialize a variable with the current property
 value.
 <p>
 Example results are "2", "new Color(127,127,34)", "Color.orange", etc.

 @return A fragment of Java code representing an initializer for the
   	current value.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String java.beans.PropertyEditorSupport.getAsText()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the property value as a string suitable for presentation
 to a human to edit.

 @return The property value as a string suitable for presentation
       to a human to edit.
 <p>   Returns "null" is the value can't be expressed as a string.
 <p>   If a non-null value is returned, then the PropertyEditor should
	     be prepared to parse that string back in setAsText().

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyEditorSupport.setAsText(String text) throws java.lang.IllegalArgumentException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the property value by parsing a given String.  May raise
 java.lang.IllegalArgumentException if either the String is
 badly formatted or if this kind of property can't be expressed
 as text.

 @param text  The string to be parsed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.String[] java.beans.PropertyEditorSupport.getTags()
<!-- END KEY -->
<!-- BEGIN DATA -->
 If the property value must be one of a set of known tagged values, 
 then this method should return an array of the tag values.  This can
 be used to represent (for example) enum values.  If a PropertyEditor
 supports tags, then it should support the use of setAsText with
 a tag value as a way of setting the value.

 @return The tag values for this property.  May be null if this 
   property cannot be represented as a tagged value.
	

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.awt.Component java.beans.PropertyEditorSupport.getCustomEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 A PropertyEditor may chose to make available a full custom Component
 that edits its property value.  It is the responsibility of the
 PropertyEditor to hook itself up to its editor Component itself and
 to report property value changes by firing a PropertyChange event.
 <P>
 The higher-level code that calls getCustomEditor may either embed
 the Component in some larger property sheet, or it may put it in
 its own individual dialog, or ...

 @return A java.awt.Component that will allow a human to directly
      edit the current property value.  May be null if this is
	    not supported.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.PropertyEditorSupport.supportsCustomEditor()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Determines whether the propertyEditor can provide a custom editor.

 @return  True if the propertyEditor can provide a custom editor.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.PropertyEditorSupport.addPropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Register a listener for the PropertyChange event.  The class will
 fire a PropertyChange value whenever the value is updated.

 @param listener  An object to be invoked when a PropertyChange
		event is fired.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.PropertyEditorSupport.removePropertyChangeListener(PropertyChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Remove a listener for the PropertyChange event.

 @param listener  The PropertyChange listener to be removed.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyEditorSupport.firePropertyChange()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Report that we have been modified to any interested listeners.

<!-- END DATA -->
