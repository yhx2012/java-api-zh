<!-- BEGIN KEY -->
public class java.beans.VetoableChangeSupport extends java.lang.Object implements java.io.Serializable
<!-- END KEY -->
<!-- BEGIN DATA -->
 This is a utility class that can be used by beans that support constrained
 properties.  You can use an instance of this class as a member field
 of your bean and delegate various work to it.

 This class is serializable.  When it is serialized it will save
 (and restore) any listeners that are themselves serializable.  Any
 non-serializable listeners will be skipped during serialization.

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.util.Hashtable java.beans.VetoableChangeSupport.children
<!-- END KEY -->
<!-- BEGIN DATA -->

 Hashtable for managing listeners for specific properties.
 Maps property names to VetoableChangeSupport objects.
 @serial 
 @since 1.2

<!-- END DATA -->
<!-- BEGIN KEY -->
private java.lang.Object java.beans.VetoableChangeSupport.source
<!-- END KEY -->
<!-- BEGIN DATA -->

 The object to be provided as the "source" for any generated events.
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
private int java.beans.VetoableChangeSupport.vetoableChangeSupportSerializedDataVersion
<!-- END KEY -->
<!-- BEGIN DATA -->
 Internal version number
 @serial

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.VetoableChangeSupport(Object sourceBean)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a <code>VetoableChangeSupport</code> object.

 @param sourceBean  The bean to be given as the source for any events.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.VetoableChangeSupport.addVetoableChangeListener(VetoableChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Add a VetoableListener to the listener list.
 The listener is registered for all properties.
 The same listener object may be added more than once, and will be called
 as many times as it is added.
 If <code>listener</code> is null, no exception is thrown and no action
 is taken.

 @param listener  The VetoableChangeListener to be added

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.VetoableChangeSupport.removeVetoableChangeListener(VetoableChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Remove a VetoableChangeListener from the listener list.
 This removes a VetoableChangeListener that was registered
 for all properties.
 If <code>listener</code> was added more than once to the same event
 source, it will be notified one less time after being removed.
 If <code>listener</code> is null, or was never added, no exception is
 thrown and no action is taken.

 @param listener  The VetoableChangeListener to be removed

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.beans.VetoableChangeListener[] java.beans.VetoableChangeSupport.getVetoableChangeListeners()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns the list of VetoableChangeListeners. If named vetoable change listeners
 were added, then VetoableChangeListenerProxy wrappers will returned
 <p>
 @return List of VetoableChangeListeners and VetoableChangeListenerProxys
         if named property change listeners were added.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.VetoableChangeSupport.addVetoableChangeListener(String propertyName, VetoableChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Add a VetoableChangeListener for a specific property.  The listener
 will be invoked only when a call on fireVetoableChange names that
 specific property.
 The same listener object may be added more than once.  For each
 property,  the listener will be invoked the number of times it was added
 for that property.
 If <code>propertyName</code> or <code>listener</code> is null, no
 exception is thrown and no action is taken.

 @param propertyName  The name of the property to listen on.
 @param listener  The VetoableChangeListener to be added

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.VetoableChangeSupport.removeVetoableChangeListener(String propertyName, VetoableChangeListener listener)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Remove a VetoableChangeListener for a specific property.
 If <code>listener</code> was added more than once to the same event
 source for the specified property, it will be notified one less time
 after being removed.
 If <code>propertyName</code> is null, no exception is thrown and no
 action is taken.
 If <code>listener</code> is null, or was never added for the specified
 property, no exception is thrown and no action is taken.

 @param propertyName  The name of the property that was listened on.
 @param listener  The VetoableChangeListener to be removed

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.beans.VetoableChangeListener[] java.beans.VetoableChangeSupport.getVetoableChangeListeners(String propertyName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns an array of all the listeners which have been associated 
 with the named property.

 @param propertyName  The name of the property being listened to
 @return all the <code>VetoableChangeListeners</code> associated with
         the named property.  If no such listeners have been added,
         or if <code>propertyName</code> is null, an empty array is
         returned.
 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.VetoableChangeSupport.fireVetoableChange(String propertyName, Object oldValue, Object newValue) throws java.beans.PropertyVetoException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Report a vetoable property update to any registered listeners.  If
 anyone vetos the change, then fire a new event reverting everyone to 
 the old value and then rethrow the PropertyVetoException.
 <p>
 No event is fired if old and new are equal and non-null.

 @param propertyName  The programmatic name of the property
		that is about to change..
 @param oldValue  The old value of the property.
 @param newValue  The new value of the property.
 @exception PropertyVetoException if the recipient wishes the property
              change to be rolled back.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.VetoableChangeSupport.fireVetoableChange(String propertyName, int oldValue, int newValue) throws java.beans.PropertyVetoException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Report a int vetoable property update to any registered listeners.
 No event is fired if old and new are equal.
 <p>
 This is merely a convenience wrapper around the more general
 fireVetoableChange method that takes Object values.

 @param propertyName  The programmatic name of the property
		that is about to change.
 @param oldValue  The old value of the property.
 @param newValue  The new value of the property.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.VetoableChangeSupport.fireVetoableChange(String propertyName, boolean oldValue, boolean newValue) throws java.beans.PropertyVetoException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Report a boolean vetoable property update to any registered listeners.
 No event is fired if old and new are equal.
 <p>
 This is merely a convenience wrapper around the more general
 fireVetoableChange method that takes Object values.

 @param propertyName  The programmatic name of the property
		that is about to change.
 @param oldValue  The old value of the property.
 @param newValue  The new value of the property.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.VetoableChangeSupport.fireVetoableChange(PropertyChangeEvent evt) throws java.beans.PropertyVetoException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Fire a vetoable property update to any registered listeners.  If
 anyone vetos the change, then fire a new event reverting everyone to 
 the old value and then rethrow the PropertyVetoException.
 <p>
 No event is fired if old and new are equal and non-null.

 @param evt  The PropertyChangeEvent to be fired.
 @exception PropertyVetoException if the recipient wishes the property
              change to be rolled back.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized boolean java.beans.VetoableChangeSupport.hasListeners(String propertyName)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Check if there are any listeners for a specific property, including
 those registered on all properties.  If <code>propertyName</code>
 is null, only check for listeners registered on all properties.

 @param propertyName  the property name.
 @return true if there are one or more listeners for the given property

<!-- END DATA -->
<!-- BEGIN KEY -->
private void java.beans.VetoableChangeSupport.writeObject(ObjectOutputStream s) throws java.io.IOException
<!-- END KEY -->
<!-- BEGIN DATA -->
 @serialData Null terminated list of <code>VetoableChangeListeners</code>.
 <p>
 At serialization time we skip non-serializable listeners and
 only serialize the serializable listeners.


<!-- END DATA -->
